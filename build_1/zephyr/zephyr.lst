
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	f0 43 03 20 11 13 01 00 1b bd 02 00 e5 12 01 00     .C. ............
    8010:	e5 12 01 00 e5 12 01 00 e5 12 01 00 e5 12 01 00     ................
	...
    802c:	8d 0b 01 00 e5 12 01 00 00 00 00 00 2d 0b 01 00     ............-...
    803c:	e5 12 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8050:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8060:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8070:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8080:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8090:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    80a0:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    80b0:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    80c0:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    80d0:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    80e0:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    80f0:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8100:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8110:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8120:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8130:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8140:	15 0c 01 00 15 0c 01 00 15 0c 01 00 15 0c 01 00     ................
    8150:	15 0c 01 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b857 	b.w	8f20 <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f928 	bl	90d6 <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f91b 	bl	90d6 <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f90a 	bl	90d6 <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f8fc 	bl	90d6 <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b80c 	b.w	8f20 <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f8e1 	bl	90d6 <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_idiv0>:
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop

00008f24 <__gedf2>:
    8f24:	f04f 3cff 	mov.w	ip, #4294967295
    8f28:	e006      	b.n	8f38 <__cmpdf2+0x4>
    8f2a:	bf00      	nop

00008f2c <__ledf2>:
    8f2c:	f04f 0c01 	mov.w	ip, #1
    8f30:	e002      	b.n	8f38 <__cmpdf2+0x4>
    8f32:	bf00      	nop

00008f34 <__cmpdf2>:
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f48:	bf18      	it	ne
    8f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f4e:	d01b      	beq.n	8f88 <__cmpdf2+0x54>
    8f50:	b001      	add	sp, #4
    8f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f56:	bf0c      	ite	eq
    8f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f5c:	ea91 0f03 	teqne	r1, r3
    8f60:	bf02      	ittt	eq
    8f62:	ea90 0f02 	teqeq	r0, r2
    8f66:	2000      	moveq	r0, #0
    8f68:	4770      	bxeq	lr
    8f6a:	f110 0f00 	cmn.w	r0, #0
    8f6e:	ea91 0f03 	teq	r1, r3
    8f72:	bf58      	it	pl
    8f74:	4299      	cmppl	r1, r3
    8f76:	bf08      	it	eq
    8f78:	4290      	cmpeq	r0, r2
    8f7a:	bf2c      	ite	cs
    8f7c:	17d8      	asrcs	r0, r3, #31
    8f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f82:	f040 0001 	orr.w	r0, r0, #1
    8f86:	4770      	bx	lr
    8f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f90:	d102      	bne.n	8f98 <__cmpdf2+0x64>
    8f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f96:	d107      	bne.n	8fa8 <__cmpdf2+0x74>
    8f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fa0:	d1d6      	bne.n	8f50 <__cmpdf2+0x1c>
    8fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fa6:	d0d3      	beq.n	8f50 <__cmpdf2+0x1c>
    8fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__aeabi_cdrcmple>:
    8fb0:	4684      	mov	ip, r0
    8fb2:	4610      	mov	r0, r2
    8fb4:	4662      	mov	r2, ip
    8fb6:	468c      	mov	ip, r1
    8fb8:	4619      	mov	r1, r3
    8fba:	4663      	mov	r3, ip
    8fbc:	e000      	b.n	8fc0 <__aeabi_cdcmpeq>
    8fbe:	bf00      	nop

00008fc0 <__aeabi_cdcmpeq>:
    8fc0:	b501      	push	{r0, lr}
    8fc2:	f7ff ffb7 	bl	8f34 <__cmpdf2>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf48      	it	mi
    8fca:	f110 0f00 	cmnmi.w	r0, #0
    8fce:	bd01      	pop	{r0, pc}

00008fd0 <__aeabi_dcmpeq>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff fff4 	bl	8fc0 <__aeabi_cdcmpeq>
    8fd8:	bf0c      	ite	eq
    8fda:	2001      	moveq	r0, #1
    8fdc:	2000      	movne	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmplt>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffea 	bl	8fc0 <__aeabi_cdcmpeq>
    8fec:	bf34      	ite	cc
    8fee:	2001      	movcc	r0, #1
    8ff0:	2000      	movcs	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmple>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffe0 	bl	8fc0 <__aeabi_cdcmpeq>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpge>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffce 	bl	8fb0 <__aeabi_cdrcmple>
    9014:	bf94      	ite	ls
    9016:	2001      	movls	r0, #1
    9018:	2000      	movhi	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpgt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffc4 	bl	8fb0 <__aeabi_cdrcmple>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__popcountsi2>:
    90b0:	0843      	lsrs	r3, r0, #1
    90b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    90b6:	1ac0      	subs	r0, r0, r3
    90b8:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
    90bc:	0880      	lsrs	r0, r0, #2
    90be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    90c2:	4418      	add	r0, r3
    90c4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    90c8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    90cc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    90d0:	4358      	muls	r0, r3
    90d2:	0e00      	lsrs	r0, r0, #24
    90d4:	4770      	bx	lr

000090d6 <__udivmoddi4>:
    90d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90da:	4686      	mov	lr, r0
    90dc:	468c      	mov	ip, r1
    90de:	4608      	mov	r0, r1
    90e0:	9e08      	ldr	r6, [sp, #32]
    90e2:	4615      	mov	r5, r2
    90e4:	4674      	mov	r4, lr
    90e6:	4619      	mov	r1, r3
    90e8:	2b00      	cmp	r3, #0
    90ea:	f040 80c1 	bne.w	9270 <__udivmoddi4+0x19a>
    90ee:	4285      	cmp	r5, r0
    90f0:	fab2 f282 	clz	r2, r2
    90f4:	d945      	bls.n	9182 <__udivmoddi4+0xac>
    90f6:	b14a      	cbz	r2, 910c <__udivmoddi4+0x36>
    90f8:	f1c2 0320 	rsb	r3, r2, #32
    90fc:	fa00 fc02 	lsl.w	ip, r0, r2
    9100:	4095      	lsls	r5, r2
    9102:	4094      	lsls	r4, r2
    9104:	fa2e f303 	lsr.w	r3, lr, r3
    9108:	ea43 0c0c 	orr.w	ip, r3, ip
    910c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9110:	b2a8      	uxth	r0, r5
    9112:	0c23      	lsrs	r3, r4, #16
    9114:	fbbc f8fe 	udiv	r8, ip, lr
    9118:	fb0e cc18 	mls	ip, lr, r8, ip
    911c:	fb08 f900 	mul.w	r9, r8, r0
    9120:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    9124:	4599      	cmp	r9, r3
    9126:	d928      	bls.n	917a <__udivmoddi4+0xa4>
    9128:	18eb      	adds	r3, r5, r3
    912a:	f108 37ff 	add.w	r7, r8, #4294967295
    912e:	d204      	bcs.n	913a <__udivmoddi4+0x64>
    9130:	4599      	cmp	r9, r3
    9132:	d902      	bls.n	913a <__udivmoddi4+0x64>
    9134:	f1a8 0702 	sub.w	r7, r8, #2
    9138:	442b      	add	r3, r5
    913a:	eba3 0309 	sub.w	r3, r3, r9
    913e:	b2a4      	uxth	r4, r4
    9140:	fbb3 fcfe 	udiv	ip, r3, lr
    9144:	fb0e 331c 	mls	r3, lr, ip, r3
    9148:	fb0c f000 	mul.w	r0, ip, r0
    914c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9150:	42a0      	cmp	r0, r4
    9152:	d914      	bls.n	917e <__udivmoddi4+0xa8>
    9154:	192c      	adds	r4, r5, r4
    9156:	f10c 33ff 	add.w	r3, ip, #4294967295
    915a:	d204      	bcs.n	9166 <__udivmoddi4+0x90>
    915c:	42a0      	cmp	r0, r4
    915e:	d902      	bls.n	9166 <__udivmoddi4+0x90>
    9160:	f1ac 0302 	sub.w	r3, ip, #2
    9164:	442c      	add	r4, r5
    9166:	1a24      	subs	r4, r4, r0
    9168:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    916c:	b11e      	cbz	r6, 9176 <__udivmoddi4+0xa0>
    916e:	40d4      	lsrs	r4, r2
    9170:	2300      	movs	r3, #0
    9172:	6034      	str	r4, [r6, #0]
    9174:	6073      	str	r3, [r6, #4]
    9176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    917a:	4647      	mov	r7, r8
    917c:	e7dd      	b.n	913a <__udivmoddi4+0x64>
    917e:	4663      	mov	r3, ip
    9180:	e7f1      	b.n	9166 <__udivmoddi4+0x90>
    9182:	bb92      	cbnz	r2, 91ea <__udivmoddi4+0x114>
    9184:	1b43      	subs	r3, r0, r5
    9186:	2101      	movs	r1, #1
    9188:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    918c:	b2af      	uxth	r7, r5
    918e:	0c20      	lsrs	r0, r4, #16
    9190:	fbb3 fcfe 	udiv	ip, r3, lr
    9194:	fb0e 331c 	mls	r3, lr, ip, r3
    9198:	fb0c f807 	mul.w	r8, ip, r7
    919c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    91a0:	4598      	cmp	r8, r3
    91a2:	d961      	bls.n	9268 <__udivmoddi4+0x192>
    91a4:	18eb      	adds	r3, r5, r3
    91a6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91aa:	d204      	bcs.n	91b6 <__udivmoddi4+0xe0>
    91ac:	4598      	cmp	r8, r3
    91ae:	d902      	bls.n	91b6 <__udivmoddi4+0xe0>
    91b0:	f1ac 0002 	sub.w	r0, ip, #2
    91b4:	442b      	add	r3, r5
    91b6:	eba3 0308 	sub.w	r3, r3, r8
    91ba:	b2a4      	uxth	r4, r4
    91bc:	fbb3 fcfe 	udiv	ip, r3, lr
    91c0:	fb0e 331c 	mls	r3, lr, ip, r3
    91c4:	fb0c f707 	mul.w	r7, ip, r7
    91c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91cc:	42a7      	cmp	r7, r4
    91ce:	d94d      	bls.n	926c <__udivmoddi4+0x196>
    91d0:	192c      	adds	r4, r5, r4
    91d2:	f10c 33ff 	add.w	r3, ip, #4294967295
    91d6:	d204      	bcs.n	91e2 <__udivmoddi4+0x10c>
    91d8:	42a7      	cmp	r7, r4
    91da:	d902      	bls.n	91e2 <__udivmoddi4+0x10c>
    91dc:	f1ac 0302 	sub.w	r3, ip, #2
    91e0:	442c      	add	r4, r5
    91e2:	1be4      	subs	r4, r4, r7
    91e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91e8:	e7c0      	b.n	916c <__udivmoddi4+0x96>
    91ea:	f1c2 0320 	rsb	r3, r2, #32
    91ee:	4095      	lsls	r5, r2
    91f0:	4094      	lsls	r4, r2
    91f2:	fa20 f103 	lsr.w	r1, r0, r3
    91f6:	fa2e f303 	lsr.w	r3, lr, r3
    91fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91fe:	4090      	lsls	r0, r2
    9200:	b2af      	uxth	r7, r5
    9202:	4303      	orrs	r3, r0
    9204:	fbb1 fcfe 	udiv	ip, r1, lr
    9208:	fb0e 101c 	mls	r0, lr, ip, r1
    920c:	0c19      	lsrs	r1, r3, #16
    920e:	fb0c f807 	mul.w	r8, ip, r7
    9212:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9216:	4588      	cmp	r8, r1
    9218:	d922      	bls.n	9260 <__udivmoddi4+0x18a>
    921a:	1869      	adds	r1, r5, r1
    921c:	f10c 30ff 	add.w	r0, ip, #4294967295
    9220:	d204      	bcs.n	922c <__udivmoddi4+0x156>
    9222:	4588      	cmp	r8, r1
    9224:	d902      	bls.n	922c <__udivmoddi4+0x156>
    9226:	f1ac 0002 	sub.w	r0, ip, #2
    922a:	4429      	add	r1, r5
    922c:	eba1 0108 	sub.w	r1, r1, r8
    9230:	b29b      	uxth	r3, r3
    9232:	fbb1 fcfe 	udiv	ip, r1, lr
    9236:	fb0e 111c 	mls	r1, lr, ip, r1
    923a:	fb0c f707 	mul.w	r7, ip, r7
    923e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    9242:	429f      	cmp	r7, r3
    9244:	d90e      	bls.n	9264 <__udivmoddi4+0x18e>
    9246:	18eb      	adds	r3, r5, r3
    9248:	f10c 31ff 	add.w	r1, ip, #4294967295
    924c:	d204      	bcs.n	9258 <__udivmoddi4+0x182>
    924e:	429f      	cmp	r7, r3
    9250:	d902      	bls.n	9258 <__udivmoddi4+0x182>
    9252:	f1ac 0102 	sub.w	r1, ip, #2
    9256:	442b      	add	r3, r5
    9258:	1bdb      	subs	r3, r3, r7
    925a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    925e:	e793      	b.n	9188 <__udivmoddi4+0xb2>
    9260:	4660      	mov	r0, ip
    9262:	e7e3      	b.n	922c <__udivmoddi4+0x156>
    9264:	4661      	mov	r1, ip
    9266:	e7f7      	b.n	9258 <__udivmoddi4+0x182>
    9268:	4660      	mov	r0, ip
    926a:	e7a4      	b.n	91b6 <__udivmoddi4+0xe0>
    926c:	4663      	mov	r3, ip
    926e:	e7b8      	b.n	91e2 <__udivmoddi4+0x10c>
    9270:	4283      	cmp	r3, r0
    9272:	d906      	bls.n	9282 <__udivmoddi4+0x1ac>
    9274:	b916      	cbnz	r6, 927c <__udivmoddi4+0x1a6>
    9276:	2100      	movs	r1, #0
    9278:	4608      	mov	r0, r1
    927a:	e77c      	b.n	9176 <__udivmoddi4+0xa0>
    927c:	e9c6 e000 	strd	lr, r0, [r6]
    9280:	e7f9      	b.n	9276 <__udivmoddi4+0x1a0>
    9282:	fab3 f783 	clz	r7, r3
    9286:	b98f      	cbnz	r7, 92ac <__udivmoddi4+0x1d6>
    9288:	4283      	cmp	r3, r0
    928a:	d301      	bcc.n	9290 <__udivmoddi4+0x1ba>
    928c:	4572      	cmp	r2, lr
    928e:	d808      	bhi.n	92a2 <__udivmoddi4+0x1cc>
    9290:	ebbe 0402 	subs.w	r4, lr, r2
    9294:	eb60 0303 	sbc.w	r3, r0, r3
    9298:	2001      	movs	r0, #1
    929a:	469c      	mov	ip, r3
    929c:	b91e      	cbnz	r6, 92a6 <__udivmoddi4+0x1d0>
    929e:	2100      	movs	r1, #0
    92a0:	e769      	b.n	9176 <__udivmoddi4+0xa0>
    92a2:	4638      	mov	r0, r7
    92a4:	e7fa      	b.n	929c <__udivmoddi4+0x1c6>
    92a6:	e9c6 4c00 	strd	r4, ip, [r6]
    92aa:	e7f8      	b.n	929e <__udivmoddi4+0x1c8>
    92ac:	f1c7 0c20 	rsb	ip, r7, #32
    92b0:	40bb      	lsls	r3, r7
    92b2:	fa0e f507 	lsl.w	r5, lr, r7
    92b6:	fa22 f40c 	lsr.w	r4, r2, ip
    92ba:	fa2e f10c 	lsr.w	r1, lr, ip
    92be:	40ba      	lsls	r2, r7
    92c0:	431c      	orrs	r4, r3
    92c2:	fa20 f30c 	lsr.w	r3, r0, ip
    92c6:	40b8      	lsls	r0, r7
    92c8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92cc:	4301      	orrs	r1, r0
    92ce:	fa1f fe84 	uxth.w	lr, r4
    92d2:	fbb3 f8f9 	udiv	r8, r3, r9
    92d6:	fb09 3018 	mls	r0, r9, r8, r3
    92da:	0c0b      	lsrs	r3, r1, #16
    92dc:	fb08 fa0e 	mul.w	sl, r8, lr
    92e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92e4:	459a      	cmp	sl, r3
    92e6:	d940      	bls.n	936a <__udivmoddi4+0x294>
    92e8:	18e3      	adds	r3, r4, r3
    92ea:	f108 30ff 	add.w	r0, r8, #4294967295
    92ee:	d204      	bcs.n	92fa <__udivmoddi4+0x224>
    92f0:	459a      	cmp	sl, r3
    92f2:	d902      	bls.n	92fa <__udivmoddi4+0x224>
    92f4:	f1a8 0002 	sub.w	r0, r8, #2
    92f8:	4423      	add	r3, r4
    92fa:	eba3 030a 	sub.w	r3, r3, sl
    92fe:	b289      	uxth	r1, r1
    9300:	fbb3 f8f9 	udiv	r8, r3, r9
    9304:	fb09 3318 	mls	r3, r9, r8, r3
    9308:	fb08 fe0e 	mul.w	lr, r8, lr
    930c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9310:	458e      	cmp	lr, r1
    9312:	d92c      	bls.n	936e <__udivmoddi4+0x298>
    9314:	1861      	adds	r1, r4, r1
    9316:	f108 33ff 	add.w	r3, r8, #4294967295
    931a:	d204      	bcs.n	9326 <__udivmoddi4+0x250>
    931c:	458e      	cmp	lr, r1
    931e:	d902      	bls.n	9326 <__udivmoddi4+0x250>
    9320:	f1a8 0302 	sub.w	r3, r8, #2
    9324:	4421      	add	r1, r4
    9326:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    932a:	eba1 010e 	sub.w	r1, r1, lr
    932e:	fba0 9802 	umull	r9, r8, r0, r2
    9332:	4541      	cmp	r1, r8
    9334:	46ce      	mov	lr, r9
    9336:	4643      	mov	r3, r8
    9338:	d302      	bcc.n	9340 <__udivmoddi4+0x26a>
    933a:	d106      	bne.n	934a <__udivmoddi4+0x274>
    933c:	454d      	cmp	r5, r9
    933e:	d204      	bcs.n	934a <__udivmoddi4+0x274>
    9340:	3801      	subs	r0, #1
    9342:	ebb9 0e02 	subs.w	lr, r9, r2
    9346:	eb68 0304 	sbc.w	r3, r8, r4
    934a:	2e00      	cmp	r6, #0
    934c:	d0a7      	beq.n	929e <__udivmoddi4+0x1c8>
    934e:	ebb5 020e 	subs.w	r2, r5, lr
    9352:	eb61 0103 	sbc.w	r1, r1, r3
    9356:	fa01 fc0c 	lsl.w	ip, r1, ip
    935a:	fa22 f307 	lsr.w	r3, r2, r7
    935e:	40f9      	lsrs	r1, r7
    9360:	ea4c 0303 	orr.w	r3, ip, r3
    9364:	e9c6 3100 	strd	r3, r1, [r6]
    9368:	e799      	b.n	929e <__udivmoddi4+0x1c8>
    936a:	4640      	mov	r0, r8
    936c:	e7c5      	b.n	92fa <__udivmoddi4+0x224>
    936e:	4643      	mov	r3, r8
    9370:	e7d9      	b.n	9326 <__udivmoddi4+0x250>

00009372 <strcmp>:
    9372:	f810 2b01 	ldrb.w	r2, [r0], #1
    9376:	f811 3b01 	ldrb.w	r3, [r1], #1
    937a:	2a01      	cmp	r2, #1
    937c:	bf28      	it	cs
    937e:	429a      	cmpcs	r2, r3
    9380:	d0f7      	beq.n	9372 <strcmp>
    9382:	1ad0      	subs	r0, r2, r3
    9384:	4770      	bx	lr

00009386 <strlen>:
    9386:	4603      	mov	r3, r0
    9388:	f813 2b01 	ldrb.w	r2, [r3], #1
    938c:	2a00      	cmp	r2, #0
    938e:	d1fb      	bne.n	9388 <strlen+0x2>
    9390:	1a18      	subs	r0, r3, r0
    9392:	3801      	subs	r0, #1
    9394:	4770      	bx	lr
	...

00009398 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    939a:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    939c:	f7ff f82e 	bl	83fc <__aeabi_i2d>
    93a0:	a325      	add	r3, pc, #148	; (adr r3, 9438 <ntc_temperature+0xa0>)
    93a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    93a6:	f7ff f893 	bl	84d0 <__aeabi_dmul>
    93aa:	f7ff faa3 	bl	88f4 <__aeabi_d2f>
    93ae:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    93b0:	1e63      	subs	r3, r4, #1
    93b2:	b2db      	uxtb	r3, r3
    93b4:	2b02      	cmp	r3, #2
    93b6:	bf96      	itet	ls
    93b8:	4a27      	ldrls	r2, [pc, #156]	; (9458 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    93ba:	2000      	movhi	r0, #0
    93bc:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    93c0:	4629      	mov	r1, r5
    93c2:	f7ff fbf5 	bl	8bb0 <__aeabi_fmul>
    93c6:	f7ff f82b 	bl	8420 <__aeabi_f2d>
    93ca:	4606      	mov	r6, r0
    93cc:	4628      	mov	r0, r5
    93ce:	460f      	mov	r7, r1
    93d0:	f7ff f826 	bl	8420 <__aeabi_f2d>
    93d4:	4602      	mov	r2, r0
    93d6:	460b      	mov	r3, r1
    93d8:	2000      	movs	r0, #0
    93da:	4920      	ldr	r1, [pc, #128]	; (945c <ntc_temperature+0xc4>)
    93dc:	f7fe fec0 	bl	8160 <__aeabi_dsub>
    93e0:	4602      	mov	r2, r0
    93e2:	460b      	mov	r3, r1
    93e4:	4630      	mov	r0, r6
    93e6:	4639      	mov	r1, r7
    93e8:	f7ff f99c 	bl	8724 <__aeabi_ddiv>
    93ec:	f7ff fa82 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    93f0:	491b      	ldr	r1, [pc, #108]	; (9460 <ntc_temperature+0xc8>)
    93f2:	f7ff fc91 	bl	8d18 <__aeabi_fdiv>
    93f6:	f7ff f813 	bl	8420 <__aeabi_f2d>
    93fa:	f01f f907 	bl	2860c <log>
    93fe:	a310      	add	r3, pc, #64	; (adr r3, 9440 <ntc_temperature+0xa8>)
    9400:	e9d3 2300 	ldrd	r2, r3, [r3]
    9404:	f7ff f98e 	bl	8724 <__aeabi_ddiv>
    9408:	a30f      	add	r3, pc, #60	; (adr r3, 9448 <ntc_temperature+0xb0>)
    940a:	e9d3 2300 	ldrd	r2, r3, [r3]
    940e:	f7fe fea9 	bl	8164 <__adddf3>
    9412:	4602      	mov	r2, r0
    9414:	460b      	mov	r3, r1
    9416:	2000      	movs	r0, #0
    9418:	4912      	ldr	r1, [pc, #72]	; (9464 <ntc_temperature+0xcc>)
    941a:	f7ff f983 	bl	8724 <__aeabi_ddiv>
    941e:	f7ff fa69 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    9422:	f7fe fffd 	bl	8420 <__aeabi_f2d>
    9426:	a30a      	add	r3, pc, #40	; (adr r3, 9450 <ntc_temperature+0xb8>)
    9428:	e9d3 2300 	ldrd	r2, r3, [r3]
    942c:	f7fe fe98 	bl	8160 <__aeabi_dsub>
    9430:	f7ff fa60 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    9434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9436:	bf00      	nop
    9438:	3a66a002 	.word	0x3a66a002
    943c:	3f2ccdb3 	.word	0x3f2ccdb3
    9440:	00000000 	.word	0x00000000
    9444:	40af0200 	.word	0x40af0200
    9448:	dcb5db83 	.word	0xdcb5db83
    944c:	3f6b79e1 	.word	0x3f6b79e1
    9450:	66666666 	.word	0x66666666
    9454:	40711266 	.word	0x40711266
    9458:	000318e0 	.word	0x000318e0
    945c:	40080000 	.word	0x40080000
    9460:	461c4000 	.word	0x461c4000
    9464:	3ff00000 	.word	0x3ff00000

00009468 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9468:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    946a:	4d65      	ldr	r5, [pc, #404]	; (9600 <bt_init+0x198>)
{
    946c:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    946e:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    9472:	6899      	ldr	r1, [r3, #8]
    9474:	f011 0101 	ands.w	r1, r1, #1
    9478:	d11a      	bne.n	94b0 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    947a:	f640 4003 	movw	r0, #3075	; 0xc03
    947e:	aa01      	add	r2, sp, #4
    9480:	f009 f9d4 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
    9484:	4604      	mov	r4, r0
    9486:	2800      	cmp	r0, #0
    9488:	f040 80b6 	bne.w	95f8 <bt_init+0x190>
		hci_reset_complete(rsp);
    948c:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    948e:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	b95b      	cbnz	r3, 94ac <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9494:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9498:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    949c:	f002 0209 	and.w	r2, r2, #9
    94a0:	e8d3 1fef 	ldaex	r1, [r3]
    94a4:	e8c3 2fe4 	stlex	r4, r2, [r3]
    94a8:	2c00      	cmp	r4, #0
    94aa:	d1f9      	bne.n	94a0 <bt_init+0x38>
		net_buf_unref(rsp);
    94ac:	f012 f858 	bl	1b560 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    94b0:	2100      	movs	r1, #0
    94b2:	f241 0003 	movw	r0, #4099	; 0x1003
    94b6:	aa01      	add	r2, sp, #4
    94b8:	f009 f9b8 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    94bc:	4604      	mov	r4, r0
    94be:	2800      	cmp	r0, #0
    94c0:	f040 809a 	bne.w	95f8 <bt_init+0x190>
	read_local_features_complete(rsp);
    94c4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94c6:	4e4f      	ldr	r6, [pc, #316]	; (9604 <bt_init+0x19c>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94c8:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94ca:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94ce:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94d2:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94d4:	4618      	mov	r0, r3
    94d6:	f012 f843 	bl	1b560 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    94da:	4621      	mov	r1, r4
    94dc:	f241 0001 	movw	r0, #4097	; 0x1001
    94e0:	aa01      	add	r2, sp, #4
    94e2:	f009 f9a3 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    94e6:	4604      	mov	r4, r0
    94e8:	2800      	cmp	r0, #0
    94ea:	f040 8085 	bne.w	95f8 <bt_init+0x190>
	read_local_ver_complete(rsp);
    94ee:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    94f0:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    94f2:	785a      	ldrb	r2, [r3, #1]
    94f4:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    94f8:	885a      	ldrh	r2, [r3, #2]
    94fa:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    94fe:	791a      	ldrb	r2, [r3, #4]
    9500:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    9504:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9508:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    950c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9510:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    9514:	f012 f824 	bl	1b560 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    9518:	4621      	mov	r1, r4
    951a:	f241 0002 	movw	r0, #4098	; 0x1002
    951e:	aa01      	add	r2, sp, #4
    9520:	f009 f984 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    9524:	4604      	mov	r4, r0
    9526:	2800      	cmp	r0, #0
    9528:	d166      	bne.n	95f8 <bt_init+0x190>
	read_supported_commands_complete(rsp);
    952a:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    952c:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    952e:	1c53      	adds	r3, r2, #1
    9530:	3241      	adds	r2, #65	; 0x41
    9532:	4634      	mov	r4, r6
    9534:	6818      	ldr	r0, [r3, #0]
    9536:	6859      	ldr	r1, [r3, #4]
    9538:	3308      	adds	r3, #8
    953a:	c403      	stmia	r4!, {r0, r1}
    953c:	4293      	cmp	r3, r2
    953e:	4626      	mov	r6, r4
    9540:	d1f7      	bne.n	9532 <bt_init+0xca>
	net_buf_unref(rsp);
    9542:	4638      	mov	r0, r7
    9544:	f012 f80c 	bl	1b560 <net_buf_unref>
		err = prng_init();
    9548:	f00a ffc0 	bl	144cc <prng_init>
		if (err) {
    954c:	4604      	mov	r4, r0
    954e:	2800      	cmp	r0, #0
    9550:	d152      	bne.n	95f8 <bt_init+0x190>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    9552:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    9556:	069a      	lsls	r2, r3, #26
    9558:	d41a      	bmi.n	9590 <bt_init+0x128>
		LOG_WRN("Controller to host flow control not supported");
    955a:	4b2b      	ldr	r3, [pc, #172]	; (9608 <bt_init+0x1a0>)
    955c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9560:	9307      	str	r3, [sp, #28]
    9562:	2302      	movs	r3, #2
    9564:	4829      	ldr	r0, [pc, #164]	; (960c <bt_init+0x1a4>)
    9566:	aa06      	add	r2, sp, #24
    9568:	9306      	str	r3, [sp, #24]
    956a:	f022 fd1c 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    956e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    9572:	065b      	lsls	r3, r3, #25
    9574:	d44e      	bmi.n	9614 <bt_init+0x1ac>
		LOG_ERR("Non-LE capable controller detected!");
    9576:	4b26      	ldr	r3, [pc, #152]	; (9610 <bt_init+0x1a8>)
    9578:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    957c:	9307      	str	r3, [sp, #28]
    957e:	2302      	movs	r3, #2
    9580:	4822      	ldr	r0, [pc, #136]	; (960c <bt_init+0x1a4>)
    9582:	aa06      	add	r2, sp, #24
    9584:	9306      	str	r3, [sp, #24]
		return -ENODEV;
    9586:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
    958a:	f022 fd0c 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
	if (err) {
    958e:	e033      	b.n	95f8 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9590:	2107      	movs	r1, #7
    9592:	f640 4033 	movw	r0, #3123	; 0xc33
    9596:	f009 f8fb 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
    959a:	4606      	mov	r6, r0
    959c:	2800      	cmp	r0, #0
    959e:	f000 8141 	beq.w	9824 <bt_init+0x3bc>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    95a2:	2107      	movs	r1, #7
    95a4:	300c      	adds	r0, #12
    95a6:	f012 f8fd 	bl	1b7a4 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    95aa:	2345      	movs	r3, #69	; 0x45
    95ac:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95ae:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    95b0:	f8c0 4002 	str.w	r4, [r0, #2]
    95b4:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    95b6:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95b8:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    95ba:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95bc:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    95be:	4631      	mov	r1, r6
    95c0:	f640 4033 	movw	r0, #3123	; 0xc33
    95c4:	f009 f932 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    95c8:	4604      	mov	r4, r0
    95ca:	b9a8      	cbnz	r0, 95f8 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95cc:	2101      	movs	r1, #1
    95ce:	f640 4031 	movw	r0, #3121	; 0xc31
    95d2:	f009 f8dd 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
    95d6:	4606      	mov	r6, r0
    95d8:	2800      	cmp	r0, #0
    95da:	f000 8123 	beq.w	9824 <bt_init+0x3bc>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    95de:	2101      	movs	r1, #1
    95e0:	300c      	adds	r0, #12
    95e2:	f024 fd10 	bl	2e006 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    95e6:	4622      	mov	r2, r4
    95e8:	4631      	mov	r1, r6
    95ea:	f640 4031 	movw	r0, #3121	; 0xc31
    95ee:	f009 f91d 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    95f2:	4604      	mov	r4, r0
    95f4:	2800      	cmp	r0, #0
    95f6:	d0ba      	beq.n	956e <bt_init+0x106>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    95f8:	4620      	mov	r0, r4
    95fa:	b009      	add	sp, #36	; 0x24
    95fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95fe:	bf00      	nop
    9600:	20008000 	.word	0x20008000
    9604:	20008070 	.word	0x20008070
    9608:	00034c65 	.word	0x00034c65
    960c:	000314b4 	.word	0x000314b4
    9610:	00034c93 	.word	0x00034c93
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9614:	2100      	movs	r1, #0
    9616:	f242 0003 	movw	r0, #8195	; 0x2003
    961a:	aa02      	add	r2, sp, #8
    961c:	f009 f906 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    9620:	4604      	mov	r4, r0
    9622:	2800      	cmp	r0, #0
    9624:	d1e8      	bne.n	95f8 <bt_init+0x190>
	read_le_features_complete(rsp);
    9626:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9628:	4ebf      	ldr	r6, [pc, #764]	; (9928 <bt_init+0x4c0>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    962a:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    962c:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9630:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9634:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    9636:	4618      	mov	r0, r3
    9638:	f011 ff92 	bl	1b560 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    963c:	4621      	mov	r1, r4
    963e:	f242 0002 	movw	r0, #8194	; 0x2002
    9642:	aa02      	add	r2, sp, #8
    9644:	f009 f8f2 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
    9648:	4604      	mov	r4, r0
    964a:	2800      	cmp	r0, #0
    964c:	d1d4      	bne.n	95f8 <bt_init+0x190>
		le_read_buffer_size_complete(rsp);
    964e:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9650:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9652:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9656:	b291      	uxth	r1, r2
    9658:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    965c:	b129      	cbz	r1, 966a <bt_init+0x202>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    965e:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9660:	4611      	mov	r1, r2
    9662:	f106 0028 	add.w	r0, r6, #40	; 0x28
    9666:	f026 fdac 	bl	301c2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    966a:	4620      	mov	r0, r4
    966c:	f011 ff78 	bl	1b560 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9670:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    9674:	f016 0620 	ands.w	r6, r6, #32
    9678:	d118      	bne.n	96ac <bt_init+0x244>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    967a:	2102      	movs	r1, #2
    967c:	f640 406d 	movw	r0, #3181	; 0xc6d
    9680:	f009 f886 	bl	12790 <bt_hci_cmd_create>
		if (!buf) {
    9684:	4604      	mov	r4, r0
    9686:	2800      	cmp	r0, #0
    9688:	f000 80cc 	beq.w	9824 <bt_init+0x3bc>
	return net_buf_simple_add(&buf->b, len);
    968c:	2102      	movs	r1, #2
    968e:	300c      	adds	r0, #12
    9690:	f012 f888 	bl	1b7a4 <net_buf_simple_add>
		cp_le->le = 0x01;
    9694:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9696:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    9698:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    969a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    969c:	4632      	mov	r2, r6
    969e:	f640 406d 	movw	r0, #3181	; 0xc6d
    96a2:	f009 f8c3 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
    96a6:	4604      	mov	r4, r0
    96a8:	2800      	cmp	r0, #0
    96aa:	d1a5      	bne.n	95f8 <bt_init+0x190>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    96ac:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    96b0:	071f      	lsls	r7, r3, #28
    96b2:	d512      	bpl.n	96da <bt_init+0x272>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    96b4:	2100      	movs	r1, #0
    96b6:	f242 001c 	movw	r0, #8220	; 0x201c
    96ba:	aa02      	add	r2, sp, #8
    96bc:	f009 f8b6 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
    96c0:	4604      	mov	r4, r0
    96c2:	2800      	cmp	r0, #0
    96c4:	d198      	bne.n	95f8 <bt_init+0x190>
		le_read_supp_states_complete(rsp);
    96c6:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    96c8:	68c3      	ldr	r3, [r0, #12]
    96ca:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96ce:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96d2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96d6:	f011 ff43 	bl	1b560 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    96da:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    96de:	069e      	lsls	r6, r3, #26
    96e0:	d524      	bpl.n	972c <bt_init+0x2c4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    96e2:	a901      	add	r1, sp, #4
    96e4:	f10d 0002 	add.w	r0, sp, #2
    96e8:	f009 f91c 	bl	12924 <hci_le_read_max_data_len>
		if (err) {
    96ec:	4604      	mov	r4, r0
    96ee:	2800      	cmp	r0, #0
    96f0:	d182      	bne.n	95f8 <bt_init+0x190>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f2:	2104      	movs	r1, #4
    96f4:	f242 0024 	movw	r0, #8228	; 0x2024
    96f8:	f009 f84a 	bl	12790 <bt_hci_cmd_create>
		if (!buf) {
    96fc:	4606      	mov	r6, r0
    96fe:	2800      	cmp	r0, #0
    9700:	f000 8090 	beq.w	9824 <bt_init+0x3bc>
    9704:	2104      	movs	r1, #4
    9706:	300c      	adds	r0, #12
    9708:	f012 f84c 	bl	1b7a4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    970c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9710:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9712:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9714:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9718:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    971a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    971c:	f242 0024 	movw	r0, #8228	; 0x2024
    9720:	f009 f884 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
    9724:	4604      	mov	r4, r0
    9726:	2800      	cmp	r0, #0
    9728:	f47f af66 	bne.w	95f8 <bt_init+0x190>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    972c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9730:	065c      	lsls	r4, r3, #25
    9732:	d510      	bpl.n	9756 <bt_init+0x2ee>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9734:	2100      	movs	r1, #0
    9736:	f242 002a 	movw	r0, #8234	; 0x202a
    973a:	aa02      	add	r2, sp, #8
    973c:	f009 f876 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
    9740:	4604      	mov	r4, r0
    9742:	2800      	cmp	r0, #0
    9744:	f47f af58 	bne.w	95f8 <bt_init+0x190>
		le_read_resolving_list_size_complete(rsp);
    9748:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
    974a:	68c3      	ldr	r3, [r0, #12]
    974c:	785b      	ldrb	r3, [r3, #1]
    974e:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    9752:	f011 ff05 	bl	1b560 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    9756:	2108      	movs	r1, #8
    9758:	f242 0001 	movw	r0, #8193	; 0x2001
    975c:	f009 f818 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
    9760:	4604      	mov	r4, r0
    9762:	2800      	cmp	r0, #0
    9764:	d05e      	beq.n	9824 <bt_init+0x3bc>
    9766:	2108      	movs	r1, #8
    9768:	300c      	adds	r0, #12
    976a:	f012 f81b 	bl	1b7a4 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    976e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9772:	f240 2302 	movw	r3, #514	; 0x202
    9776:	f011 0f40 	tst.w	r1, #64	; 0x40
    977a:	bf08      	it	eq
    977c:	2303      	moveq	r3, #3
    977e:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9780:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9782:	bf4c      	ite	mi
    9784:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    9788:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    978c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9790:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9792:	bf48      	it	mi
    9794:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9798:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    979c:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    97a0:	bf18      	it	ne
    97a2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97a6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    97aa:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    97ac:	bf48      	it	mi
    97ae:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97b2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    97b4:	bf08      	it	eq
    97b6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    97ba:	2100      	movs	r1, #0
    97bc:	f022 fbfe 	bl	2bfbc <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    97c0:	4621      	mov	r1, r4
    97c2:	2200      	movs	r2, #0
    97c4:	f242 0001 	movw	r0, #8193	; 0x2001
    97c8:	f009 f830 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    97cc:	4604      	mov	r4, r0
    97ce:	2800      	cmp	r0, #0
    97d0:	f47f af12 	bne.w	95f8 <bt_init+0x190>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97d4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    97d8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97dc:	0698      	lsls	r0, r3, #26
    97de:	d424      	bmi.n	982a <bt_init+0x3c2>
	if (bt_dev.le.acl_mtu) {
    97e0:	b9c9      	cbnz	r1, 9816 <bt_init+0x3ae>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    97e2:	f241 0005 	movw	r0, #4101	; 0x1005
    97e6:	aa02      	add	r2, sp, #8
    97e8:	f009 f820 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    97ec:	4604      	mov	r4, r0
    97ee:	2800      	cmp	r0, #0
    97f0:	f47f af02 	bne.w	95f8 <bt_init+0x190>
	if (bt_dev.le.acl_mtu) {
    97f4:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    97f8:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
    97fa:	b94b      	cbnz	r3, 9810 <bt_init+0x3a8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    97fc:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    97fe:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9802:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    9806:	889a      	ldrh	r2, [r3, #4]
    9808:	4848      	ldr	r0, [pc, #288]	; (992c <bt_init+0x4c4>)
    980a:	4611      	mov	r1, r2
    980c:	f026 fcd9 	bl	301c2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9810:	4620      	mov	r0, r4
    9812:	f011 fea5 	bl	1b560 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9816:	2108      	movs	r1, #8
    9818:	f640 4001 	movw	r0, #3073	; 0xc01
    981c:	f008 ffb8 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
    9820:	4604      	mov	r4, r0
    9822:	b988      	cbnz	r0, 9848 <bt_init+0x3e0>
		return -ENOBUFS;
    9824:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9828:	e6e6      	b.n	95f8 <bt_init+0x190>
	else if (!bt_dev.le.acl_mtu) {
    982a:	2900      	cmp	r1, #0
    982c:	d1f3      	bne.n	9816 <bt_init+0x3ae>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    982e:	4b40      	ldr	r3, [pc, #256]	; (9930 <bt_init+0x4c8>)
    9830:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9834:	9307      	str	r3, [sp, #28]
    9836:	2302      	movs	r3, #2
    9838:	483e      	ldr	r0, [pc, #248]	; (9934 <bt_init+0x4cc>)
    983a:	aa06      	add	r2, sp, #24
    983c:	9306      	str	r3, [sp, #24]
		return -EIO;
    983e:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9842:	f022 fbb0 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
	if (err) {
    9846:	e6d7      	b.n	95f8 <bt_init+0x190>
    9848:	2108      	movs	r1, #8
    984a:	300c      	adds	r0, #12
    984c:	f011 ffaa 	bl	1b7a4 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9850:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9854:	4602      	mov	r2, r0
    9856:	07d9      	lsls	r1, r3, #31
    9858:	d431      	bmi.n	98be <bt_init+0x456>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    985a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    985e:	4836      	ldr	r0, [pc, #216]	; (9938 <bt_init+0x4d0>)
	sys_put_le64(mask, ev->events);
    9860:	f022 fbac 	bl	2bfbc <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9864:	4621      	mov	r1, r4
    9866:	2200      	movs	r2, #0
    9868:	f640 4001 	movw	r0, #3073	; 0xc01
    986c:	f008 ffde 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    9870:	4604      	mov	r4, r0
    9872:	2800      	cmp	r0, #0
    9874:	f47f aec0 	bne.w	95f8 <bt_init+0x190>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9878:	4601      	mov	r1, r0
    987a:	aa01      	add	r2, sp, #4
    987c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9880:	f008 ffd4 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    9884:	4604      	mov	r4, r0
    9886:	b1f0      	cbz	r0, 98c6 <bt_init+0x45e>
		LOG_WRN("Vendor HCI extensions not available");
    9888:	4b2c      	ldr	r3, [pc, #176]	; (993c <bt_init+0x4d4>)
			LOG_WRN("Failed to read supported vendor features");
    988a:	9307      	str	r3, [sp, #28]
    988c:	2302      	movs	r3, #2
    988e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9892:	4828      	ldr	r0, [pc, #160]	; (9934 <bt_init+0x4cc>)
    9894:	aa06      	add	r2, sp, #24
    9896:	9306      	str	r3, [sp, #24]
    9898:	f022 fb85 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    989c:	f022 fd22 	bl	2c2e4 <bt_id_init>
	if (err) {
    98a0:	4604      	mov	r4, r0
    98a2:	2800      	cmp	r0, #0
    98a4:	f47f aea8 	bne.w	95f8 <bt_init+0x190>
		err = bt_conn_init();
    98a8:	f00b ffac 	bl	15804 <bt_conn_init>
		if (err) {
    98ac:	4604      	mov	r4, r0
    98ae:	2800      	cmp	r0, #0
    98b0:	f47f aea2 	bne.w	95f8 <bt_init+0x190>
}
    98b4:	b009      	add	sp, #36	; 0x24
    98b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    98ba:	f009 bdd3 	b.w	13464 <bt_init.part.0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    98be:	a118      	add	r1, pc, #96	; (adr r1, 9920 <bt_init+0x4b8>)
    98c0:	e9d1 0100 	ldrd	r0, r1, [r1]
    98c4:	e7cc      	b.n	9860 <bt_init+0x3f8>
	net_buf_unref(rsp);
    98c6:	9801      	ldr	r0, [sp, #4]
    98c8:	f011 fe4a 	bl	1b560 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    98cc:	4621      	mov	r1, r4
    98ce:	f64f 4002 	movw	r0, #64514	; 0xfc02
    98d2:	aa01      	add	r2, sp, #4
    98d4:	f008 ffaa 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
    98d8:	4604      	mov	r4, r0
    98da:	b108      	cbz	r0, 98e0 <bt_init+0x478>
		LOG_WRN("Failed to read supported vendor commands");
    98dc:	4b18      	ldr	r3, [pc, #96]	; (9940 <bt_init+0x4d8>)
    98de:	e7d4      	b.n	988a <bt_init+0x422>
	rp.cmds = (void *)rsp->data;
    98e0:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    98e2:	68c3      	ldr	r3, [r0, #12]
    98e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    98e8:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    98ec:	f011 fe38 	bl	1b560 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    98f0:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    98f4:	075b      	lsls	r3, r3, #29
    98f6:	d5d1      	bpl.n	989c <bt_init+0x434>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    98f8:	4621      	mov	r1, r4
    98fa:	f64f 4003 	movw	r0, #64515	; 0xfc03
    98fe:	aa01      	add	r2, sp, #4
    9900:	f008 ff94 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
    9904:	b108      	cbz	r0, 990a <bt_init+0x4a2>
			LOG_WRN("Failed to read supported vendor features");
    9906:	4b0f      	ldr	r3, [pc, #60]	; (9944 <bt_init+0x4dc>)
    9908:	e7bf      	b.n	988a <bt_init+0x422>
		rp.feat = (void *)rsp->data;
    990a:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    990c:	68c3      	ldr	r3, [r0, #12]
    990e:	785b      	ldrb	r3, [r3, #1]
    9910:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    9914:	f011 fe24 	bl	1b560 <net_buf_unref>
    9918:	e7c0      	b.n	989c <bt_init+0x434>
    991a:	bf00      	nop
    991c:	f3af 8000 	nop.w
    9920:	02008890 	.word	0x02008890
    9924:	20008000 	.word	0x20008000
    9928:	200080d0 	.word	0x200080d0
    992c:	20008100 	.word	0x20008100
    9930:	00034cb7 	.word	0x00034cb7
    9934:	000314b4 	.word	0x000314b4
    9938:	02008810 	.word	0x02008810
    993c:	00034cda 	.word	0x00034cda
    9940:	00034cfe 	.word	0x00034cfe
    9944:	00034d27 	.word	0x00034d27

00009948 <__ieee754_log>:
    9948:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    994c:	4602      	mov	r2, r0
    994e:	460b      	mov	r3, r1
    9950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9954:	460d      	mov	r5, r1
    9956:	b087      	sub	sp, #28
    9958:	da24      	bge.n	99a4 <__ieee754_log+0x5c>
    995a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    995e:	4304      	orrs	r4, r0
    9960:	d108      	bne.n	9974 <__ieee754_log+0x2c>
    9962:	2200      	movs	r2, #0
    9964:	2300      	movs	r3, #0
    9966:	2000      	movs	r0, #0
    9968:	49c9      	ldr	r1, [pc, #804]	; (9c90 <__ieee754_log+0x348>)
    996a:	f7fe fedb 	bl	8724 <__aeabi_ddiv>
    996e:	b007      	add	sp, #28
    9970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9974:	2900      	cmp	r1, #0
    9976:	da04      	bge.n	9982 <__ieee754_log+0x3a>
    9978:	f7fe fbf2 	bl	8160 <__aeabi_dsub>
    997c:	2200      	movs	r2, #0
    997e:	2300      	movs	r3, #0
    9980:	e7f3      	b.n	996a <__ieee754_log+0x22>
    9982:	2200      	movs	r2, #0
    9984:	4bc3      	ldr	r3, [pc, #780]	; (9c94 <__ieee754_log+0x34c>)
    9986:	f7fe fda3 	bl	84d0 <__aeabi_dmul>
    998a:	460b      	mov	r3, r1
    998c:	460d      	mov	r5, r1
    998e:	4602      	mov	r2, r0
    9990:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9994:	48c0      	ldr	r0, [pc, #768]	; (9c98 <__ieee754_log+0x350>)
    9996:	4285      	cmp	r5, r0
    9998:	dd06      	ble.n	99a8 <__ieee754_log+0x60>
    999a:	4610      	mov	r0, r2
    999c:	4619      	mov	r1, r3
    999e:	f7fe fbe1 	bl	8164 <__adddf3>
    99a2:	e7e4      	b.n	996e <__ieee754_log+0x26>
    99a4:	2100      	movs	r1, #0
    99a6:	e7f5      	b.n	9994 <__ieee754_log+0x4c>
    99a8:	152c      	asrs	r4, r5, #20
    99aa:	f3c5 0513 	ubfx	r5, r5, #0, #20
    99ae:	4610      	mov	r0, r2
    99b0:	2200      	movs	r2, #0
    99b2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    99b6:	440c      	add	r4, r1
    99b8:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    99bc:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    99c0:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    99c4:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    99c8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    99cc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    99d0:	ea41 0305 	orr.w	r3, r1, r5
    99d4:	4619      	mov	r1, r3
    99d6:	4bb1      	ldr	r3, [pc, #708]	; (9c9c <__ieee754_log+0x354>)
    99d8:	f7fe fbc2 	bl	8160 <__aeabi_dsub>
    99dc:	1cab      	adds	r3, r5, #2
    99de:	4682      	mov	sl, r0
    99e0:	468b      	mov	fp, r1
    99e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    99e6:	2200      	movs	r2, #0
    99e8:	2b02      	cmp	r3, #2
    99ea:	dc53      	bgt.n	9a94 <__ieee754_log+0x14c>
    99ec:	2300      	movs	r3, #0
    99ee:	f7ff faef 	bl	8fd0 <__aeabi_dcmpeq>
    99f2:	b1d0      	cbz	r0, 9a2a <__ieee754_log+0xe2>
    99f4:	2c00      	cmp	r4, #0
    99f6:	f000 8120 	beq.w	9c3a <__ieee754_log+0x2f2>
    99fa:	4620      	mov	r0, r4
    99fc:	f7fe fcfe 	bl	83fc <__aeabi_i2d>
    9a00:	4606      	mov	r6, r0
    9a02:	460f      	mov	r7, r1
    9a04:	a38e      	add	r3, pc, #568	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9a06:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a0a:	f7fe fd61 	bl	84d0 <__aeabi_dmul>
    9a0e:	4604      	mov	r4, r0
    9a10:	460d      	mov	r5, r1
    9a12:	4630      	mov	r0, r6
    9a14:	4639      	mov	r1, r7
    9a16:	a38c      	add	r3, pc, #560	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9a18:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a1c:	f7fe fd58 	bl	84d0 <__aeabi_dmul>
    9a20:	4602      	mov	r2, r0
    9a22:	460b      	mov	r3, r1
    9a24:	4620      	mov	r0, r4
    9a26:	4629      	mov	r1, r5
    9a28:	e7b9      	b.n	999e <__ieee754_log+0x56>
    9a2a:	a389      	add	r3, pc, #548	; (adr r3, 9c50 <__ieee754_log+0x308>)
    9a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a30:	4650      	mov	r0, sl
    9a32:	4659      	mov	r1, fp
    9a34:	f7fe fd4c 	bl	84d0 <__aeabi_dmul>
    9a38:	4602      	mov	r2, r0
    9a3a:	460b      	mov	r3, r1
    9a3c:	2000      	movs	r0, #0
    9a3e:	4998      	ldr	r1, [pc, #608]	; (9ca0 <__ieee754_log+0x358>)
    9a40:	f7fe fb8e 	bl	8160 <__aeabi_dsub>
    9a44:	4606      	mov	r6, r0
    9a46:	460f      	mov	r7, r1
    9a48:	4652      	mov	r2, sl
    9a4a:	465b      	mov	r3, fp
    9a4c:	4650      	mov	r0, sl
    9a4e:	4659      	mov	r1, fp
    9a50:	f7fe fd3e 	bl	84d0 <__aeabi_dmul>
    9a54:	4602      	mov	r2, r0
    9a56:	460b      	mov	r3, r1
    9a58:	4630      	mov	r0, r6
    9a5a:	4639      	mov	r1, r7
    9a5c:	f7fe fd38 	bl	84d0 <__aeabi_dmul>
    9a60:	4606      	mov	r6, r0
    9a62:	460f      	mov	r7, r1
    9a64:	b914      	cbnz	r4, 9a6c <__ieee754_log+0x124>
    9a66:	4632      	mov	r2, r6
    9a68:	463b      	mov	r3, r7
    9a6a:	e0a0      	b.n	9bae <__ieee754_log+0x266>
    9a6c:	4620      	mov	r0, r4
    9a6e:	f7fe fcc5 	bl	83fc <__aeabi_i2d>
    9a72:	4680      	mov	r8, r0
    9a74:	4689      	mov	r9, r1
    9a76:	a372      	add	r3, pc, #456	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9a78:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a7c:	f7fe fd28 	bl	84d0 <__aeabi_dmul>
    9a80:	4604      	mov	r4, r0
    9a82:	460d      	mov	r5, r1
    9a84:	4640      	mov	r0, r8
    9a86:	4649      	mov	r1, r9
    9a88:	a36f      	add	r3, pc, #444	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a8e:	f7fe fd1f 	bl	84d0 <__aeabi_dmul>
    9a92:	e0a5      	b.n	9be0 <__ieee754_log+0x298>
    9a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a98:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9a9c:	f7fe fb62 	bl	8164 <__adddf3>
    9aa0:	4602      	mov	r2, r0
    9aa2:	460b      	mov	r3, r1
    9aa4:	4650      	mov	r0, sl
    9aa6:	4659      	mov	r1, fp
    9aa8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9aac:	f7fe fe3a 	bl	8724 <__aeabi_ddiv>
    9ab0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9ab4:	3551      	adds	r5, #81	; 0x51
    9ab6:	e9cd 0100 	strd	r0, r1, [sp]
    9aba:	4620      	mov	r0, r4
    9abc:	4335      	orrs	r5, r6
    9abe:	f7fe fc9d 	bl	83fc <__aeabi_i2d>
    9ac2:	e9dd 2300 	ldrd	r2, r3, [sp]
    9ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9aca:	4610      	mov	r0, r2
    9acc:	4619      	mov	r1, r3
    9ace:	f7fe fcff 	bl	84d0 <__aeabi_dmul>
    9ad2:	4602      	mov	r2, r0
    9ad4:	460b      	mov	r3, r1
    9ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9ada:	f7fe fcf9 	bl	84d0 <__aeabi_dmul>
    9ade:	4680      	mov	r8, r0
    9ae0:	4689      	mov	r9, r1
    9ae2:	a35d      	add	r3, pc, #372	; (adr r3, 9c58 <__ieee754_log+0x310>)
    9ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ae8:	f7fe fcf2 	bl	84d0 <__aeabi_dmul>
    9aec:	a35c      	add	r3, pc, #368	; (adr r3, 9c60 <__ieee754_log+0x318>)
    9aee:	e9d3 2300 	ldrd	r2, r3, [r3]
    9af2:	f7fe fb37 	bl	8164 <__adddf3>
    9af6:	4642      	mov	r2, r8
    9af8:	464b      	mov	r3, r9
    9afa:	f7fe fce9 	bl	84d0 <__aeabi_dmul>
    9afe:	a35a      	add	r3, pc, #360	; (adr r3, 9c68 <__ieee754_log+0x320>)
    9b00:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b04:	f7fe fb2e 	bl	8164 <__adddf3>
    9b08:	4642      	mov	r2, r8
    9b0a:	464b      	mov	r3, r9
    9b0c:	f7fe fce0 	bl	84d0 <__aeabi_dmul>
    9b10:	a357      	add	r3, pc, #348	; (adr r3, 9c70 <__ieee754_log+0x328>)
    9b12:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b16:	f7fe fb25 	bl	8164 <__adddf3>
    9b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9b1e:	f7fe fcd7 	bl	84d0 <__aeabi_dmul>
    9b22:	a355      	add	r3, pc, #340	; (adr r3, 9c78 <__ieee754_log+0x330>)
    9b24:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9b2c:	4640      	mov	r0, r8
    9b2e:	4649      	mov	r1, r9
    9b30:	f7fe fcce 	bl	84d0 <__aeabi_dmul>
    9b34:	a352      	add	r3, pc, #328	; (adr r3, 9c80 <__ieee754_log+0x338>)
    9b36:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b3a:	f7fe fb13 	bl	8164 <__adddf3>
    9b3e:	4642      	mov	r2, r8
    9b40:	464b      	mov	r3, r9
    9b42:	f7fe fcc5 	bl	84d0 <__aeabi_dmul>
    9b46:	a350      	add	r3, pc, #320	; (adr r3, 9c88 <__ieee754_log+0x340>)
    9b48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b4c:	f7fe fb0a 	bl	8164 <__adddf3>
    9b50:	4642      	mov	r2, r8
    9b52:	464b      	mov	r3, r9
    9b54:	f7fe fcbc 	bl	84d0 <__aeabi_dmul>
    9b58:	4602      	mov	r2, r0
    9b5a:	460b      	mov	r3, r1
    9b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9b60:	f7fe fb00 	bl	8164 <__adddf3>
    9b64:	2d00      	cmp	r5, #0
    9b66:	4680      	mov	r8, r0
    9b68:	4689      	mov	r9, r1
    9b6a:	dd48      	ble.n	9bfe <__ieee754_log+0x2b6>
    9b6c:	2200      	movs	r2, #0
    9b6e:	4b4c      	ldr	r3, [pc, #304]	; (9ca0 <__ieee754_log+0x358>)
    9b70:	4650      	mov	r0, sl
    9b72:	4659      	mov	r1, fp
    9b74:	f7fe fcac 	bl	84d0 <__aeabi_dmul>
    9b78:	4652      	mov	r2, sl
    9b7a:	465b      	mov	r3, fp
    9b7c:	f7fe fca8 	bl	84d0 <__aeabi_dmul>
    9b80:	4602      	mov	r2, r0
    9b82:	460b      	mov	r3, r1
    9b84:	4606      	mov	r6, r0
    9b86:	460f      	mov	r7, r1
    9b88:	4640      	mov	r0, r8
    9b8a:	4649      	mov	r1, r9
    9b8c:	f7fe faea 	bl	8164 <__adddf3>
    9b90:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b94:	f7fe fc9c 	bl	84d0 <__aeabi_dmul>
    9b98:	4680      	mov	r8, r0
    9b9a:	4689      	mov	r9, r1
    9b9c:	b964      	cbnz	r4, 9bb8 <__ieee754_log+0x270>
    9b9e:	4602      	mov	r2, r0
    9ba0:	460b      	mov	r3, r1
    9ba2:	4630      	mov	r0, r6
    9ba4:	4639      	mov	r1, r7
    9ba6:	f7fe fadb 	bl	8160 <__aeabi_dsub>
    9baa:	4602      	mov	r2, r0
    9bac:	460b      	mov	r3, r1
    9bae:	4650      	mov	r0, sl
    9bb0:	4659      	mov	r1, fp
    9bb2:	f7fe fad5 	bl	8160 <__aeabi_dsub>
    9bb6:	e6da      	b.n	996e <__ieee754_log+0x26>
    9bb8:	a321      	add	r3, pc, #132	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9bba:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bc2:	f7fe fc85 	bl	84d0 <__aeabi_dmul>
    9bc6:	4604      	mov	r4, r0
    9bc8:	460d      	mov	r5, r1
    9bca:	a31f      	add	r3, pc, #124	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bd4:	f7fe fc7c 	bl	84d0 <__aeabi_dmul>
    9bd8:	4642      	mov	r2, r8
    9bda:	464b      	mov	r3, r9
    9bdc:	f7fe fac2 	bl	8164 <__adddf3>
    9be0:	4602      	mov	r2, r0
    9be2:	460b      	mov	r3, r1
    9be4:	4630      	mov	r0, r6
    9be6:	4639      	mov	r1, r7
    9be8:	f7fe faba 	bl	8160 <__aeabi_dsub>
    9bec:	4652      	mov	r2, sl
    9bee:	465b      	mov	r3, fp
    9bf0:	f7fe fab6 	bl	8160 <__aeabi_dsub>
    9bf4:	4602      	mov	r2, r0
    9bf6:	460b      	mov	r3, r1
    9bf8:	4620      	mov	r0, r4
    9bfa:	4629      	mov	r1, r5
    9bfc:	e7d9      	b.n	9bb2 <__ieee754_log+0x26a>
    9bfe:	4602      	mov	r2, r0
    9c00:	460b      	mov	r3, r1
    9c02:	4650      	mov	r0, sl
    9c04:	4659      	mov	r1, fp
    9c06:	f7fe faab 	bl	8160 <__aeabi_dsub>
    9c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c0e:	f7fe fc5f 	bl	84d0 <__aeabi_dmul>
    9c12:	4606      	mov	r6, r0
    9c14:	460f      	mov	r7, r1
    9c16:	2c00      	cmp	r4, #0
    9c18:	f43f af25 	beq.w	9a66 <__ieee754_log+0x11e>
    9c1c:	a308      	add	r3, pc, #32	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c26:	f7fe fc53 	bl	84d0 <__aeabi_dmul>
    9c2a:	4604      	mov	r4, r0
    9c2c:	460d      	mov	r5, r1
    9c2e:	a306      	add	r3, pc, #24	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9c30:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c38:	e729      	b.n	9a8e <__ieee754_log+0x146>
    9c3a:	2000      	movs	r0, #0
    9c3c:	2100      	movs	r1, #0
    9c3e:	e696      	b.n	996e <__ieee754_log+0x26>
    9c40:	fee00000 	.word	0xfee00000
    9c44:	3fe62e42 	.word	0x3fe62e42
    9c48:	35793c76 	.word	0x35793c76
    9c4c:	3dea39ef 	.word	0x3dea39ef
    9c50:	55555555 	.word	0x55555555
    9c54:	3fd55555 	.word	0x3fd55555
    9c58:	df3e5244 	.word	0xdf3e5244
    9c5c:	3fc2f112 	.word	0x3fc2f112
    9c60:	96cb03de 	.word	0x96cb03de
    9c64:	3fc74664 	.word	0x3fc74664
    9c68:	94229359 	.word	0x94229359
    9c6c:	3fd24924 	.word	0x3fd24924
    9c70:	55555593 	.word	0x55555593
    9c74:	3fe55555 	.word	0x3fe55555
    9c78:	d078c69f 	.word	0xd078c69f
    9c7c:	3fc39a09 	.word	0x3fc39a09
    9c80:	1d8e78af 	.word	0x1d8e78af
    9c84:	3fcc71c5 	.word	0x3fcc71c5
    9c88:	9997fa04 	.word	0x9997fa04
    9c8c:	3fd99999 	.word	0x3fd99999
    9c90:	c3500000 	.word	0xc3500000
    9c94:	43500000 	.word	0x43500000
    9c98:	7fefffff 	.word	0x7fefffff
    9c9c:	3ff00000 	.word	0x3ff00000
    9ca0:	3fe00000 	.word	0x3fe00000
    9ca4:	00000000 	.word	0x00000000

00009ca8 <_dtoa_r>:
    9ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cac:	4614      	mov	r4, r2
    9cae:	b097      	sub	sp, #92	; 0x5c
    9cb0:	461d      	mov	r5, r3
    9cb2:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9cb4:	4683      	mov	fp, r0
    9cb6:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9cb8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9cbc:	b97f      	cbnz	r7, 9cde <_dtoa_r+0x36>
    9cbe:	2010      	movs	r0, #16
    9cc0:	f01e fce4 	bl	2868c <malloc>
    9cc4:	4602      	mov	r2, r0
    9cc6:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9cca:	b920      	cbnz	r0, 9cd6 <_dtoa_r+0x2e>
    9ccc:	4ba2      	ldr	r3, [pc, #648]	; (9f58 <_dtoa_r+0x2b0>)
    9cce:	21ea      	movs	r1, #234	; 0xea
    9cd0:	48a2      	ldr	r0, [pc, #648]	; (9f5c <_dtoa_r+0x2b4>)
    9cd2:	f01f f997 	bl	29004 <__assert_func>
    9cd6:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9cda:	6007      	str	r7, [r0, #0]
    9cdc:	60c7      	str	r7, [r0, #12]
    9cde:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9ce2:	6819      	ldr	r1, [r3, #0]
    9ce4:	b159      	cbz	r1, 9cfe <_dtoa_r+0x56>
    9ce6:	685a      	ldr	r2, [r3, #4]
    9ce8:	2301      	movs	r3, #1
    9cea:	4658      	mov	r0, fp
    9cec:	4093      	lsls	r3, r2
    9cee:	604a      	str	r2, [r1, #4]
    9cf0:	608b      	str	r3, [r1, #8]
    9cf2:	f01f fac7 	bl	29284 <_Bfree>
    9cf6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cfa:	2200      	movs	r2, #0
    9cfc:	601a      	str	r2, [r3, #0]
    9cfe:	1e2b      	subs	r3, r5, #0
    9d00:	bfb7      	itett	lt
    9d02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9d06:	2300      	movge	r3, #0
    9d08:	2201      	movlt	r2, #1
    9d0a:	9305      	strlt	r3, [sp, #20]
    9d0c:	bfa8      	it	ge
    9d0e:	6033      	strge	r3, [r6, #0]
    9d10:	9f05      	ldr	r7, [sp, #20]
    9d12:	4b93      	ldr	r3, [pc, #588]	; (9f60 <_dtoa_r+0x2b8>)
    9d14:	bfb8      	it	lt
    9d16:	6032      	strlt	r2, [r6, #0]
    9d18:	43bb      	bics	r3, r7
    9d1a:	d119      	bne.n	9d50 <_dtoa_r+0xa8>
    9d1c:	f242 730f 	movw	r3, #9999	; 0x270f
    9d20:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d22:	6013      	str	r3, [r2, #0]
    9d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9d28:	4323      	orrs	r3, r4
    9d2a:	f000 85e0 	beq.w	a8ee <_dtoa_r+0xc46>
    9d2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d30:	b953      	cbnz	r3, 9d48 <_dtoa_r+0xa0>
    9d32:	4b8c      	ldr	r3, [pc, #560]	; (9f64 <_dtoa_r+0x2bc>)
    9d34:	e021      	b.n	9d7a <_dtoa_r+0xd2>
    9d36:	4b8c      	ldr	r3, [pc, #560]	; (9f68 <_dtoa_r+0x2c0>)
    9d38:	9308      	str	r3, [sp, #32]
    9d3a:	3308      	adds	r3, #8
    9d3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d3e:	6013      	str	r3, [r2, #0]
    9d40:	9808      	ldr	r0, [sp, #32]
    9d42:	b017      	add	sp, #92	; 0x5c
    9d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d48:	4b86      	ldr	r3, [pc, #536]	; (9f64 <_dtoa_r+0x2bc>)
    9d4a:	9308      	str	r3, [sp, #32]
    9d4c:	3303      	adds	r3, #3
    9d4e:	e7f5      	b.n	9d3c <_dtoa_r+0x94>
    9d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d5c:	2200      	movs	r2, #0
    9d5e:	2300      	movs	r3, #0
    9d60:	f7ff f936 	bl	8fd0 <__aeabi_dcmpeq>
    9d64:	4680      	mov	r8, r0
    9d66:	b150      	cbz	r0, 9d7e <_dtoa_r+0xd6>
    9d68:	2301      	movs	r3, #1
    9d6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d6c:	6013      	str	r3, [r2, #0]
    9d6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d70:	b113      	cbz	r3, 9d78 <_dtoa_r+0xd0>
    9d72:	4b7e      	ldr	r3, [pc, #504]	; (9f6c <_dtoa_r+0x2c4>)
    9d74:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d76:	6013      	str	r3, [r2, #0]
    9d78:	4b7d      	ldr	r3, [pc, #500]	; (9f70 <_dtoa_r+0x2c8>)
    9d7a:	9308      	str	r3, [sp, #32]
    9d7c:	e7e0      	b.n	9d40 <_dtoa_r+0x98>
    9d7e:	ab14      	add	r3, sp, #80	; 0x50
    9d80:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9d84:	4658      	mov	r0, fp
    9d86:	9301      	str	r3, [sp, #4]
    9d88:	ab15      	add	r3, sp, #84	; 0x54
    9d8a:	9300      	str	r3, [sp, #0]
    9d8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9d90:	f01f fcfe 	bl	29790 <__d2b>
    9d94:	9003      	str	r0, [sp, #12]
    9d96:	2e00      	cmp	r6, #0
    9d98:	d078      	beq.n	9e8c <_dtoa_r+0x1e4>
    9d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d9c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9da0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9da8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9db0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9db4:	4619      	mov	r1, r3
    9db6:	2200      	movs	r2, #0
    9db8:	4b6e      	ldr	r3, [pc, #440]	; (9f74 <_dtoa_r+0x2cc>)
    9dba:	f7fe f9d1 	bl	8160 <__aeabi_dsub>
    9dbe:	a360      	add	r3, pc, #384	; (adr r3, 9f40 <_dtoa_r+0x298>)
    9dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dc4:	f7fe fb84 	bl	84d0 <__aeabi_dmul>
    9dc8:	a35f      	add	r3, pc, #380	; (adr r3, 9f48 <_dtoa_r+0x2a0>)
    9dca:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dce:	f7fe f9c9 	bl	8164 <__adddf3>
    9dd2:	4604      	mov	r4, r0
    9dd4:	460d      	mov	r5, r1
    9dd6:	4630      	mov	r0, r6
    9dd8:	f7fe fb10 	bl	83fc <__aeabi_i2d>
    9ddc:	a35c      	add	r3, pc, #368	; (adr r3, 9f50 <_dtoa_r+0x2a8>)
    9dde:	e9d3 2300 	ldrd	r2, r3, [r3]
    9de2:	f7fe fb75 	bl	84d0 <__aeabi_dmul>
    9de6:	4602      	mov	r2, r0
    9de8:	460b      	mov	r3, r1
    9dea:	4620      	mov	r0, r4
    9dec:	4629      	mov	r1, r5
    9dee:	f7fe f9b9 	bl	8164 <__adddf3>
    9df2:	4604      	mov	r4, r0
    9df4:	460d      	mov	r5, r1
    9df6:	f7ff f933 	bl	9060 <__aeabi_d2iz>
    9dfa:	2200      	movs	r2, #0
    9dfc:	4607      	mov	r7, r0
    9dfe:	2300      	movs	r3, #0
    9e00:	4620      	mov	r0, r4
    9e02:	4629      	mov	r1, r5
    9e04:	f7ff f8ee 	bl	8fe4 <__aeabi_dcmplt>
    9e08:	b140      	cbz	r0, 9e1c <_dtoa_r+0x174>
    9e0a:	4638      	mov	r0, r7
    9e0c:	f7fe faf6 	bl	83fc <__aeabi_i2d>
    9e10:	4622      	mov	r2, r4
    9e12:	462b      	mov	r3, r5
    9e14:	f7ff f8dc 	bl	8fd0 <__aeabi_dcmpeq>
    9e18:	b900      	cbnz	r0, 9e1c <_dtoa_r+0x174>
    9e1a:	3f01      	subs	r7, #1
    9e1c:	2f16      	cmp	r7, #22
    9e1e:	d854      	bhi.n	9eca <_dtoa_r+0x222>
    9e20:	4b55      	ldr	r3, [pc, #340]	; (9f78 <_dtoa_r+0x2d0>)
    9e22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e2e:	f7ff f8d9 	bl	8fe4 <__aeabi_dcmplt>
    9e32:	2800      	cmp	r0, #0
    9e34:	d04b      	beq.n	9ece <_dtoa_r+0x226>
    9e36:	3f01      	subs	r7, #1
    9e38:	2300      	movs	r3, #0
    9e3a:	9312      	str	r3, [sp, #72]	; 0x48
    9e3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e3e:	1b9b      	subs	r3, r3, r6
    9e40:	1e5a      	subs	r2, r3, #1
    9e42:	bf4c      	ite	mi
    9e44:	f1c3 0301 	rsbmi	r3, r3, #1
    9e48:	2300      	movpl	r3, #0
    9e4a:	920a      	str	r2, [sp, #40]	; 0x28
    9e4c:	bf45      	ittet	mi
    9e4e:	9306      	strmi	r3, [sp, #24]
    9e50:	2300      	movmi	r3, #0
    9e52:	9306      	strpl	r3, [sp, #24]
    9e54:	930a      	strmi	r3, [sp, #40]	; 0x28
    9e56:	2f00      	cmp	r7, #0
    9e58:	db3b      	blt.n	9ed2 <_dtoa_r+0x22a>
    9e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e5c:	970f      	str	r7, [sp, #60]	; 0x3c
    9e5e:	443b      	add	r3, r7
    9e60:	930a      	str	r3, [sp, #40]	; 0x28
    9e62:	2300      	movs	r3, #0
    9e64:	930b      	str	r3, [sp, #44]	; 0x2c
    9e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e68:	2b09      	cmp	r3, #9
    9e6a:	f200 8089 	bhi.w	9f80 <_dtoa_r+0x2d8>
    9e6e:	2b05      	cmp	r3, #5
    9e70:	bfc5      	ittet	gt
    9e72:	3b04      	subgt	r3, #4
    9e74:	2400      	movgt	r4, #0
    9e76:	2401      	movle	r4, #1
    9e78:	9320      	strgt	r3, [sp, #128]	; 0x80
    9e7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e7c:	3b02      	subs	r3, #2
    9e7e:	2b03      	cmp	r3, #3
    9e80:	f200 8089 	bhi.w	9f96 <_dtoa_r+0x2ee>
    9e84:	e8df f003 	tbb	[pc, r3]
    9e88:	59383a2d 	.word	0x59383a2d
    9e8c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9e90:	441e      	add	r6, r3
    9e92:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9e96:	2b20      	cmp	r3, #32
    9e98:	bfc9      	itett	gt
    9e9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9e9e:	f1c3 0320 	rsble	r3, r3, #32
    9ea2:	409f      	lslgt	r7, r3
    9ea4:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9ea8:	bfd8      	it	le
    9eaa:	fa04 f003 	lslle.w	r0, r4, r3
    9eae:	f106 36ff 	add.w	r6, r6, #4294967295
    9eb2:	bfc4      	itt	gt
    9eb4:	fa24 f303 	lsrgt.w	r3, r4, r3
    9eb8:	ea47 0003 	orrgt.w	r0, r7, r3
    9ebc:	f7fe fa8e 	bl	83dc <__aeabi_ui2d>
    9ec0:	2201      	movs	r2, #1
    9ec2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9ec6:	9213      	str	r2, [sp, #76]	; 0x4c
    9ec8:	e774      	b.n	9db4 <_dtoa_r+0x10c>
    9eca:	2301      	movs	r3, #1
    9ecc:	e7b5      	b.n	9e3a <_dtoa_r+0x192>
    9ece:	9012      	str	r0, [sp, #72]	; 0x48
    9ed0:	e7b4      	b.n	9e3c <_dtoa_r+0x194>
    9ed2:	9b06      	ldr	r3, [sp, #24]
    9ed4:	1bdb      	subs	r3, r3, r7
    9ed6:	9306      	str	r3, [sp, #24]
    9ed8:	427b      	negs	r3, r7
    9eda:	930b      	str	r3, [sp, #44]	; 0x2c
    9edc:	2300      	movs	r3, #0
    9ede:	930f      	str	r3, [sp, #60]	; 0x3c
    9ee0:	e7c1      	b.n	9e66 <_dtoa_r+0x1be>
    9ee2:	2300      	movs	r3, #0
    9ee4:	930e      	str	r3, [sp, #56]	; 0x38
    9ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ee8:	2b00      	cmp	r3, #0
    9eea:	dc57      	bgt.n	9f9c <_dtoa_r+0x2f4>
    9eec:	2301      	movs	r3, #1
    9eee:	4699      	mov	r9, r3
    9ef0:	461a      	mov	r2, r3
    9ef2:	9309      	str	r3, [sp, #36]	; 0x24
    9ef4:	9221      	str	r2, [sp, #132]	; 0x84
    9ef6:	e00c      	b.n	9f12 <_dtoa_r+0x26a>
    9ef8:	2301      	movs	r3, #1
    9efa:	e7f3      	b.n	9ee4 <_dtoa_r+0x23c>
    9efc:	2300      	movs	r3, #0
    9efe:	930e      	str	r3, [sp, #56]	; 0x38
    9f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f02:	18fb      	adds	r3, r7, r3
    9f04:	f103 0901 	add.w	r9, r3, #1
    9f08:	9309      	str	r3, [sp, #36]	; 0x24
    9f0a:	464b      	mov	r3, r9
    9f0c:	2b01      	cmp	r3, #1
    9f0e:	bfb8      	it	lt
    9f10:	2301      	movlt	r3, #1
    9f12:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9f16:	2100      	movs	r1, #0
    9f18:	2204      	movs	r2, #4
    9f1a:	f102 0514 	add.w	r5, r2, #20
    9f1e:	429d      	cmp	r5, r3
    9f20:	d940      	bls.n	9fa4 <_dtoa_r+0x2fc>
    9f22:	6041      	str	r1, [r0, #4]
    9f24:	4658      	mov	r0, fp
    9f26:	f01f f96d 	bl	29204 <_Balloc>
    9f2a:	9008      	str	r0, [sp, #32]
    9f2c:	2800      	cmp	r0, #0
    9f2e:	d13c      	bne.n	9faa <_dtoa_r+0x302>
    9f30:	4b12      	ldr	r3, [pc, #72]	; (9f7c <_dtoa_r+0x2d4>)
    9f32:	4602      	mov	r2, r0
    9f34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9f38:	e6ca      	b.n	9cd0 <_dtoa_r+0x28>
    9f3a:	2301      	movs	r3, #1
    9f3c:	e7df      	b.n	9efe <_dtoa_r+0x256>
    9f3e:	bf00      	nop
    9f40:	636f4361 	.word	0x636f4361
    9f44:	3fd287a7 	.word	0x3fd287a7
    9f48:	8b60c8b3 	.word	0x8b60c8b3
    9f4c:	3fc68a28 	.word	0x3fc68a28
    9f50:	509f79fb 	.word	0x509f79fb
    9f54:	3fd34413 	.word	0x3fd34413
    9f58:	00038ccb 	.word	0x00038ccb
    9f5c:	00038ce2 	.word	0x00038ce2
    9f60:	7ff00000 	.word	0x7ff00000
    9f64:	00038cc7 	.word	0x00038cc7
    9f68:	00038cbe 	.word	0x00038cbe
    9f6c:	00037aca 	.word	0x00037aca
    9f70:	00037ac9 	.word	0x00037ac9
    9f74:	3ff80000 	.word	0x3ff80000
    9f78:	00031730 	.word	0x00031730
    9f7c:	00038d56 	.word	0x00038d56
    9f80:	2401      	movs	r4, #1
    9f82:	2300      	movs	r3, #0
    9f84:	940e      	str	r4, [sp, #56]	; 0x38
    9f86:	9320      	str	r3, [sp, #128]	; 0x80
    9f88:	f04f 33ff 	mov.w	r3, #4294967295
    9f8c:	2200      	movs	r2, #0
    9f8e:	4699      	mov	r9, r3
    9f90:	9309      	str	r3, [sp, #36]	; 0x24
    9f92:	2312      	movs	r3, #18
    9f94:	e7ae      	b.n	9ef4 <_dtoa_r+0x24c>
    9f96:	2301      	movs	r3, #1
    9f98:	930e      	str	r3, [sp, #56]	; 0x38
    9f9a:	e7f5      	b.n	9f88 <_dtoa_r+0x2e0>
    9f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f9e:	4699      	mov	r9, r3
    9fa0:	9309      	str	r3, [sp, #36]	; 0x24
    9fa2:	e7b6      	b.n	9f12 <_dtoa_r+0x26a>
    9fa4:	3101      	adds	r1, #1
    9fa6:	0052      	lsls	r2, r2, #1
    9fa8:	e7b7      	b.n	9f1a <_dtoa_r+0x272>
    9faa:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9fae:	f1b9 0f0e 	cmp.w	r9, #14
    9fb2:	9a08      	ldr	r2, [sp, #32]
    9fb4:	601a      	str	r2, [r3, #0]
    9fb6:	d86f      	bhi.n	a098 <_dtoa_r+0x3f0>
    9fb8:	2c00      	cmp	r4, #0
    9fba:	d06d      	beq.n	a098 <_dtoa_r+0x3f0>
    9fbc:	2f00      	cmp	r7, #0
    9fbe:	dd36      	ble.n	a02e <_dtoa_r+0x386>
    9fc0:	f007 020f 	and.w	r2, r7, #15
    9fc4:	4ba0      	ldr	r3, [pc, #640]	; (a248 <_dtoa_r+0x5a0>)
    9fc6:	05f8      	lsls	r0, r7, #23
    9fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9fcc:	e9d3 3400 	ldrd	r3, r4, [r3]
    9fd0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9fd4:	ea4f 1427 	mov.w	r4, r7, asr #4
    9fd8:	d517      	bpl.n	a00a <_dtoa_r+0x362>
    9fda:	4b9c      	ldr	r3, [pc, #624]	; (a24c <_dtoa_r+0x5a4>)
    9fdc:	f004 040f 	and.w	r4, r4, #15
    9fe0:	f04f 0803 	mov.w	r8, #3
    9fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9fec:	f7fe fb9a 	bl	8724 <__aeabi_ddiv>
    9ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9ff4:	4d95      	ldr	r5, [pc, #596]	; (a24c <_dtoa_r+0x5a4>)
    9ff6:	b95c      	cbnz	r4, a010 <_dtoa_r+0x368>
    9ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a000:	f7fe fb90 	bl	8724 <__aeabi_ddiv>
    a004:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a008:	e02b      	b.n	a062 <_dtoa_r+0x3ba>
    a00a:	f04f 0802 	mov.w	r8, #2
    a00e:	e7f1      	b.n	9ff4 <_dtoa_r+0x34c>
    a010:	07e1      	lsls	r1, r4, #31
    a012:	d509      	bpl.n	a028 <_dtoa_r+0x380>
    a014:	f108 0801 	add.w	r8, r8, #1
    a018:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a01c:	e9d5 2300 	ldrd	r2, r3, [r5]
    a020:	f7fe fa56 	bl	84d0 <__aeabi_dmul>
    a024:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a028:	1064      	asrs	r4, r4, #1
    a02a:	3508      	adds	r5, #8
    a02c:	e7e3      	b.n	9ff6 <_dtoa_r+0x34e>
    a02e:	f000 8107 	beq.w	a240 <_dtoa_r+0x598>
    a032:	427c      	negs	r4, r7
    a034:	4b84      	ldr	r3, [pc, #528]	; (a248 <_dtoa_r+0x5a0>)
    a036:	4d85      	ldr	r5, [pc, #532]	; (a24c <_dtoa_r+0x5a4>)
    a038:	f04f 0802 	mov.w	r8, #2
    a03c:	f004 020f 	and.w	r2, r4, #15
    a040:	1124      	asrs	r4, r4, #4
    a042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a04e:	f7fe fa3f 	bl	84d0 <__aeabi_dmul>
    a052:	2300      	movs	r3, #0
    a054:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a058:	2c00      	cmp	r4, #0
    a05a:	f040 80e5 	bne.w	a228 <_dtoa_r+0x580>
    a05e:	2b00      	cmp	r3, #0
    a060:	d1d0      	bne.n	a004 <_dtoa_r+0x35c>
    a062:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a064:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a068:	2b00      	cmp	r3, #0
    a06a:	f000 814c 	beq.w	a306 <_dtoa_r+0x65e>
    a06e:	2200      	movs	r2, #0
    a070:	4b77      	ldr	r3, [pc, #476]	; (a250 <_dtoa_r+0x5a8>)
    a072:	4620      	mov	r0, r4
    a074:	4629      	mov	r1, r5
    a076:	f7fe ffb5 	bl	8fe4 <__aeabi_dcmplt>
    a07a:	2800      	cmp	r0, #0
    a07c:	f000 8143 	beq.w	a306 <_dtoa_r+0x65e>
    a080:	f1b9 0f00 	cmp.w	r9, #0
    a084:	f000 813f 	beq.w	a306 <_dtoa_r+0x65e>
    a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a08a:	2b00      	cmp	r3, #0
    a08c:	f300 80e4 	bgt.w	a258 <_dtoa_r+0x5b0>
    a090:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a094:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a098:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a09a:	2b00      	cmp	r3, #0
    a09c:	db02      	blt.n	a0a4 <_dtoa_r+0x3fc>
    a09e:	2f0e      	cmp	r7, #14
    a0a0:	f340 8242 	ble.w	a528 <_dtoa_r+0x880>
    a0a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a0a6:	2a00      	cmp	r2, #0
    a0a8:	f040 8267 	bne.w	a57a <_dtoa_r+0x8d2>
    a0ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a0ae:	2500      	movs	r5, #0
    a0b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a0b4:	f1b8 0f00 	cmp.w	r8, #0
    a0b8:	d00d      	beq.n	a0d6 <_dtoa_r+0x42e>
    a0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a0bc:	2b00      	cmp	r3, #0
    a0be:	dd0a      	ble.n	a0d6 <_dtoa_r+0x42e>
    a0c0:	4543      	cmp	r3, r8
    a0c2:	9a06      	ldr	r2, [sp, #24]
    a0c4:	bfa8      	it	ge
    a0c6:	4643      	movge	r3, r8
    a0c8:	1ad2      	subs	r2, r2, r3
    a0ca:	eba8 0803 	sub.w	r8, r8, r3
    a0ce:	9206      	str	r2, [sp, #24]
    a0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0d2:	1ad3      	subs	r3, r2, r3
    a0d4:	930a      	str	r3, [sp, #40]	; 0x28
    a0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0d8:	b30b      	cbz	r3, a11e <_dtoa_r+0x476>
    a0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0dc:	2b00      	cmp	r3, #0
    a0de:	f000 82a6 	beq.w	a62e <_dtoa_r+0x986>
    a0e2:	2c00      	cmp	r4, #0
    a0e4:	f000 82a1 	beq.w	a62a <_dtoa_r+0x982>
    a0e8:	4629      	mov	r1, r5
    a0ea:	4622      	mov	r2, r4
    a0ec:	4658      	mov	r0, fp
    a0ee:	f01f f9f3 	bl	294d8 <__pow5mult>
    a0f2:	9a03      	ldr	r2, [sp, #12]
    a0f4:	4601      	mov	r1, r0
    a0f6:	4605      	mov	r5, r0
    a0f8:	4658      	mov	r0, fp
    a0fa:	f01f f943 	bl	29384 <__multiply>
    a0fe:	9903      	ldr	r1, [sp, #12]
    a100:	4606      	mov	r6, r0
    a102:	4658      	mov	r0, fp
    a104:	f01f f8be 	bl	29284 <_Bfree>
    a108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a10a:	1b1b      	subs	r3, r3, r4
    a10c:	930b      	str	r3, [sp, #44]	; 0x2c
    a10e:	f000 8291 	beq.w	a634 <_dtoa_r+0x98c>
    a112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a114:	4631      	mov	r1, r6
    a116:	4658      	mov	r0, fp
    a118:	f01f f9de 	bl	294d8 <__pow5mult>
    a11c:	9003      	str	r0, [sp, #12]
    a11e:	2101      	movs	r1, #1
    a120:	4658      	mov	r0, fp
    a122:	f01f f919 	bl	29358 <__i2b>
    a126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a128:	4604      	mov	r4, r0
    a12a:	2b00      	cmp	r3, #0
    a12c:	f000 8284 	beq.w	a638 <_dtoa_r+0x990>
    a130:	461a      	mov	r2, r3
    a132:	4601      	mov	r1, r0
    a134:	4658      	mov	r0, fp
    a136:	f01f f9cf 	bl	294d8 <__pow5mult>
    a13a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a13c:	4604      	mov	r4, r0
    a13e:	2b01      	cmp	r3, #1
    a140:	dc03      	bgt.n	a14a <_dtoa_r+0x4a2>
    a142:	9b04      	ldr	r3, [sp, #16]
    a144:	2b00      	cmp	r3, #0
    a146:	f000 827c 	beq.w	a642 <_dtoa_r+0x99a>
    a14a:	2600      	movs	r6, #0
    a14c:	6923      	ldr	r3, [r4, #16]
    a14e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a152:	6918      	ldr	r0, [r3, #16]
    a154:	f026 fc82 	bl	30a5c <__hi0bits>
    a158:	f1c0 0020 	rsb	r0, r0, #32
    a15c:	960f      	str	r6, [sp, #60]	; 0x3c
    a15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a160:	4418      	add	r0, r3
    a162:	f010 001f 	ands.w	r0, r0, #31
    a166:	f000 8291 	beq.w	a68c <_dtoa_r+0x9e4>
    a16a:	f1c0 0320 	rsb	r3, r0, #32
    a16e:	2b04      	cmp	r3, #4
    a170:	f340 8281 	ble.w	a676 <_dtoa_r+0x9ce>
    a174:	f1c0 001c 	rsb	r0, r0, #28
    a178:	9b06      	ldr	r3, [sp, #24]
    a17a:	4403      	add	r3, r0
    a17c:	4480      	add	r8, r0
    a17e:	9306      	str	r3, [sp, #24]
    a180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a182:	4403      	add	r3, r0
    a184:	930a      	str	r3, [sp, #40]	; 0x28
    a186:	9b06      	ldr	r3, [sp, #24]
    a188:	2b00      	cmp	r3, #0
    a18a:	dd05      	ble.n	a198 <_dtoa_r+0x4f0>
    a18c:	461a      	mov	r2, r3
    a18e:	9903      	ldr	r1, [sp, #12]
    a190:	4658      	mov	r0, fp
    a192:	f01f f9fb 	bl	2958c <__lshift>
    a196:	9003      	str	r0, [sp, #12]
    a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a19a:	2b00      	cmp	r3, #0
    a19c:	dd05      	ble.n	a1aa <_dtoa_r+0x502>
    a19e:	4621      	mov	r1, r4
    a1a0:	461a      	mov	r2, r3
    a1a2:	4658      	mov	r0, fp
    a1a4:	f01f f9f2 	bl	2958c <__lshift>
    a1a8:	4604      	mov	r4, r0
    a1aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	f000 8276 	beq.w	a69e <_dtoa_r+0x9f6>
    a1b2:	4621      	mov	r1, r4
    a1b4:	9803      	ldr	r0, [sp, #12]
    a1b6:	f026 fca0 	bl	30afa <__mcmp>
    a1ba:	2800      	cmp	r0, #0
    a1bc:	f280 826f 	bge.w	a69e <_dtoa_r+0x9f6>
    a1c0:	2300      	movs	r3, #0
    a1c2:	220a      	movs	r2, #10
    a1c4:	9903      	ldr	r1, [sp, #12]
    a1c6:	4658      	mov	r0, fp
    a1c8:	f01f f87e 	bl	292c8 <__multadd>
    a1cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a1ce:	1e7e      	subs	r6, r7, #1
    a1d0:	9003      	str	r0, [sp, #12]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	f000 825c 	beq.w	a690 <_dtoa_r+0x9e8>
    a1d8:	2300      	movs	r3, #0
    a1da:	4629      	mov	r1, r5
    a1dc:	220a      	movs	r2, #10
    a1de:	4658      	mov	r0, fp
    a1e0:	f01f f872 	bl	292c8 <__multadd>
    a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1e6:	4605      	mov	r5, r0
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	dc03      	bgt.n	a1f4 <_dtoa_r+0x54c>
    a1ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1ee:	2b02      	cmp	r3, #2
    a1f0:	f300 825e 	bgt.w	a6b0 <_dtoa_r+0xa08>
    a1f4:	f1b8 0f00 	cmp.w	r8, #0
    a1f8:	dd05      	ble.n	a206 <_dtoa_r+0x55e>
    a1fa:	4629      	mov	r1, r5
    a1fc:	4642      	mov	r2, r8
    a1fe:	4658      	mov	r0, fp
    a200:	f01f f9c4 	bl	2958c <__lshift>
    a204:	4605      	mov	r5, r0
    a206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a208:	2b00      	cmp	r3, #0
    a20a:	f000 82d0 	beq.w	a7ae <_dtoa_r+0xb06>
    a20e:	6869      	ldr	r1, [r5, #4]
    a210:	4658      	mov	r0, fp
    a212:	f01e fff7 	bl	29204 <_Balloc>
    a216:	4607      	mov	r7, r0
    a218:	2800      	cmp	r0, #0
    a21a:	f040 827f 	bne.w	a71c <_dtoa_r+0xa74>
    a21e:	4b0d      	ldr	r3, [pc, #52]	; (a254 <_dtoa_r+0x5ac>)
    a220:	4602      	mov	r2, r0
    a222:	f240 21ea 	movw	r1, #746	; 0x2ea
    a226:	e553      	b.n	9cd0 <_dtoa_r+0x28>
    a228:	07e2      	lsls	r2, r4, #31
    a22a:	d506      	bpl.n	a23a <_dtoa_r+0x592>
    a22c:	f108 0801 	add.w	r8, r8, #1
    a230:	e9d5 2300 	ldrd	r2, r3, [r5]
    a234:	f7fe f94c 	bl	84d0 <__aeabi_dmul>
    a238:	2301      	movs	r3, #1
    a23a:	1064      	asrs	r4, r4, #1
    a23c:	3508      	adds	r5, #8
    a23e:	e70b      	b.n	a058 <_dtoa_r+0x3b0>
    a240:	f04f 0802 	mov.w	r8, #2
    a244:	e70d      	b.n	a062 <_dtoa_r+0x3ba>
    a246:	bf00      	nop
    a248:	00031730 	.word	0x00031730
    a24c:	00031708 	.word	0x00031708
    a250:	3ff00000 	.word	0x3ff00000
    a254:	00038d56 	.word	0x00038d56
    a258:	4620      	mov	r0, r4
    a25a:	2200      	movs	r2, #0
    a25c:	4bac      	ldr	r3, [pc, #688]	; (a510 <_dtoa_r+0x868>)
    a25e:	4629      	mov	r1, r5
    a260:	f7fe f936 	bl	84d0 <__aeabi_dmul>
    a264:	1e7e      	subs	r6, r7, #1
    a266:	f108 0801 	add.w	r8, r8, #1
    a26a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a26c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a270:	4640      	mov	r0, r8
    a272:	f7fe f8c3 	bl	83fc <__aeabi_i2d>
    a276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a27a:	f7fe f929 	bl	84d0 <__aeabi_dmul>
    a27e:	4ba5      	ldr	r3, [pc, #660]	; (a514 <_dtoa_r+0x86c>)
    a280:	2200      	movs	r2, #0
    a282:	f7fd ff6f 	bl	8164 <__adddf3>
    a286:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a28a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a28e:	9311      	str	r3, [sp, #68]	; 0x44
    a290:	2c00      	cmp	r4, #0
    a292:	d13b      	bne.n	a30c <_dtoa_r+0x664>
    a294:	2200      	movs	r2, #0
    a296:	4ba0      	ldr	r3, [pc, #640]	; (a518 <_dtoa_r+0x870>)
    a298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a29c:	f7fd ff60 	bl	8160 <__aeabi_dsub>
    a2a0:	4602      	mov	r2, r0
    a2a2:	460b      	mov	r3, r1
    a2a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a2a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a2ac:	f7fe feb8 	bl	9020 <__aeabi_dcmpgt>
    a2b0:	2800      	cmp	r0, #0
    a2b2:	f040 8157 	bne.w	a564 <_dtoa_r+0x8bc>
    a2b6:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a2c2:	f7fe fe8f 	bl	8fe4 <__aeabi_dcmplt>
    a2c6:	2800      	cmp	r0, #0
    a2c8:	f43f aee2 	beq.w	a090 <_dtoa_r+0x3e8>
    a2cc:	2400      	movs	r4, #0
    a2ce:	4625      	mov	r5, r4
    a2d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a2d2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a2d6:	43de      	mvns	r6, r3
    a2d8:	f04f 0800 	mov.w	r8, #0
    a2dc:	4621      	mov	r1, r4
    a2de:	4658      	mov	r0, fp
    a2e0:	f01e ffd0 	bl	29284 <_Bfree>
    a2e4:	2d00      	cmp	r5, #0
    a2e6:	f000 80a9 	beq.w	a43c <_dtoa_r+0x794>
    a2ea:	f1b8 0f00 	cmp.w	r8, #0
    a2ee:	d005      	beq.n	a2fc <_dtoa_r+0x654>
    a2f0:	45a8      	cmp	r8, r5
    a2f2:	d003      	beq.n	a2fc <_dtoa_r+0x654>
    a2f4:	4641      	mov	r1, r8
    a2f6:	4658      	mov	r0, fp
    a2f8:	f01e ffc4 	bl	29284 <_Bfree>
    a2fc:	4629      	mov	r1, r5
    a2fe:	4658      	mov	r0, fp
    a300:	f01e ffc0 	bl	29284 <_Bfree>
    a304:	e09a      	b.n	a43c <_dtoa_r+0x794>
    a306:	463e      	mov	r6, r7
    a308:	464c      	mov	r4, r9
    a30a:	e7b1      	b.n	a270 <_dtoa_r+0x5c8>
    a30c:	4b83      	ldr	r3, [pc, #524]	; (a51c <_dtoa_r+0x874>)
    a30e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a312:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a316:	9b08      	ldr	r3, [sp, #32]
    a318:	441c      	add	r4, r3
    a31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a31c:	2b00      	cmp	r3, #0
    a31e:	d04a      	beq.n	a3b6 <_dtoa_r+0x70e>
    a320:	4602      	mov	r2, r0
    a322:	460b      	mov	r3, r1
    a324:	2000      	movs	r0, #0
    a326:	497e      	ldr	r1, [pc, #504]	; (a520 <_dtoa_r+0x878>)
    a328:	f7fe f9fc 	bl	8724 <__aeabi_ddiv>
    a32c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a330:	f7fd ff16 	bl	8160 <__aeabi_dsub>
    a334:	f8dd a020 	ldr.w	sl, [sp, #32]
    a338:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a33c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a340:	f7fe fe8e 	bl	9060 <__aeabi_d2iz>
    a344:	4605      	mov	r5, r0
    a346:	f7fe f859 	bl	83fc <__aeabi_i2d>
    a34a:	4602      	mov	r2, r0
    a34c:	3530      	adds	r5, #48	; 0x30
    a34e:	460b      	mov	r3, r1
    a350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a354:	f7fd ff04 	bl	8160 <__aeabi_dsub>
    a358:	f80a 5b01 	strb.w	r5, [sl], #1
    a35c:	4602      	mov	r2, r0
    a35e:	460b      	mov	r3, r1
    a360:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a368:	f7fe fe5a 	bl	9020 <__aeabi_dcmpgt>
    a36c:	2800      	cmp	r0, #0
    a36e:	d165      	bne.n	a43c <_dtoa_r+0x794>
    a370:	2000      	movs	r0, #0
    a372:	496c      	ldr	r1, [pc, #432]	; (a524 <_dtoa_r+0x87c>)
    a374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a378:	f7fd fef2 	bl	8160 <__aeabi_dsub>
    a37c:	4602      	mov	r2, r0
    a37e:	460b      	mov	r3, r1
    a380:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a384:	f7fe fe4c 	bl	9020 <__aeabi_dcmpgt>
    a388:	2800      	cmp	r0, #0
    a38a:	f040 810d 	bne.w	a5a8 <_dtoa_r+0x900>
    a38e:	45a2      	cmp	sl, r4
    a390:	f000 80ea 	beq.w	a568 <_dtoa_r+0x8c0>
    a394:	2200      	movs	r2, #0
    a396:	4b5e      	ldr	r3, [pc, #376]	; (a510 <_dtoa_r+0x868>)
    a398:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a39c:	f7fe f898 	bl	84d0 <__aeabi_dmul>
    a3a0:	2200      	movs	r2, #0
    a3a2:	4b5b      	ldr	r3, [pc, #364]	; (a510 <_dtoa_r+0x868>)
    a3a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3ac:	f7fe f890 	bl	84d0 <__aeabi_dmul>
    a3b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a3b4:	e7c2      	b.n	a33c <_dtoa_r+0x694>
    a3b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a3ba:	f7fe f889 	bl	84d0 <__aeabi_dmul>
    a3be:	46a0      	mov	r8, r4
    a3c0:	f8dd a020 	ldr.w	sl, [sp, #32]
    a3c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a3c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3cc:	f7fe fe48 	bl	9060 <__aeabi_d2iz>
    a3d0:	4605      	mov	r5, r0
    a3d2:	f7fe f813 	bl	83fc <__aeabi_i2d>
    a3d6:	4602      	mov	r2, r0
    a3d8:	3530      	adds	r5, #48	; 0x30
    a3da:	460b      	mov	r3, r1
    a3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3e0:	f7fd febe 	bl	8160 <__aeabi_dsub>
    a3e4:	f80a 5b01 	strb.w	r5, [sl], #1
    a3e8:	4602      	mov	r2, r0
    a3ea:	460b      	mov	r3, r1
    a3ec:	45a2      	cmp	sl, r4
    a3ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a3f2:	f04f 0200 	mov.w	r2, #0
    a3f6:	d123      	bne.n	a440 <_dtoa_r+0x798>
    a3f8:	4b49      	ldr	r3, [pc, #292]	; (a520 <_dtoa_r+0x878>)
    a3fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a3fe:	f7fd feb1 	bl	8164 <__adddf3>
    a402:	4602      	mov	r2, r0
    a404:	460b      	mov	r3, r1
    a406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a40a:	f7fe fe09 	bl	9020 <__aeabi_dcmpgt>
    a40e:	2800      	cmp	r0, #0
    a410:	f040 80ca 	bne.w	a5a8 <_dtoa_r+0x900>
    a414:	2000      	movs	r0, #0
    a416:	4942      	ldr	r1, [pc, #264]	; (a520 <_dtoa_r+0x878>)
    a418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a41c:	f7fd fea0 	bl	8160 <__aeabi_dsub>
    a420:	4602      	mov	r2, r0
    a422:	460b      	mov	r3, r1
    a424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a428:	f7fe fddc 	bl	8fe4 <__aeabi_dcmplt>
    a42c:	b170      	cbz	r0, a44c <_dtoa_r+0x7a4>
    a42e:	46c2      	mov	sl, r8
    a430:	f108 38ff 	add.w	r8, r8, #4294967295
    a434:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a438:	2b30      	cmp	r3, #48	; 0x30
    a43a:	d0f8      	beq.n	a42e <_dtoa_r+0x786>
    a43c:	4637      	mov	r7, r6
    a43e:	e055      	b.n	a4ec <_dtoa_r+0x844>
    a440:	4b33      	ldr	r3, [pc, #204]	; (a510 <_dtoa_r+0x868>)
    a442:	f7fe f845 	bl	84d0 <__aeabi_dmul>
    a446:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a44a:	e7bd      	b.n	a3c8 <_dtoa_r+0x720>
    a44c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a450:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a454:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a456:	2b00      	cmp	r3, #0
    a458:	f6ff ae28 	blt.w	a0ac <_dtoa_r+0x404>
    a45c:	2f0e      	cmp	r7, #14
    a45e:	f73f ae25 	bgt.w	a0ac <_dtoa_r+0x404>
    a462:	4b2e      	ldr	r3, [pc, #184]	; (a51c <_dtoa_r+0x874>)
    a464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a468:	e9d3 3400 	ldrd	r3, r4, [r3]
    a46c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a470:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a472:	2b00      	cmp	r3, #0
    a474:	da02      	bge.n	a47c <_dtoa_r+0x7d4>
    a476:	f1b9 0f00 	cmp.w	r9, #0
    a47a:	d064      	beq.n	a546 <_dtoa_r+0x89e>
    a47c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a480:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a484:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a488:	4620      	mov	r0, r4
    a48a:	4629      	mov	r1, r5
    a48c:	f7fe f94a 	bl	8724 <__aeabi_ddiv>
    a490:	f7fe fde6 	bl	9060 <__aeabi_d2iz>
    a494:	4606      	mov	r6, r0
    a496:	f7fd ffb1 	bl	83fc <__aeabi_i2d>
    a49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a49e:	f7fe f817 	bl	84d0 <__aeabi_dmul>
    a4a2:	4602      	mov	r2, r0
    a4a4:	4620      	mov	r0, r4
    a4a6:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a4aa:	460b      	mov	r3, r1
    a4ac:	4629      	mov	r1, r5
    a4ae:	f7fd fe57 	bl	8160 <__aeabi_dsub>
    a4b2:	f80a 4b01 	strb.w	r4, [sl], #1
    a4b6:	9c08      	ldr	r4, [sp, #32]
    a4b8:	4602      	mov	r2, r0
    a4ba:	460b      	mov	r3, r1
    a4bc:	ebaa 0404 	sub.w	r4, sl, r4
    a4c0:	45a1      	cmp	r9, r4
    a4c2:	f040 8082 	bne.w	a5ca <_dtoa_r+0x922>
    a4c6:	f7fd fe4d 	bl	8164 <__adddf3>
    a4ca:	4604      	mov	r4, r0
    a4cc:	460d      	mov	r5, r1
    a4ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4d2:	f7fe fda5 	bl	9020 <__aeabi_dcmpgt>
    a4d6:	2800      	cmp	r0, #0
    a4d8:	d165      	bne.n	a5a6 <_dtoa_r+0x8fe>
    a4da:	4620      	mov	r0, r4
    a4dc:	4629      	mov	r1, r5
    a4de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4e2:	f7fe fd75 	bl	8fd0 <__aeabi_dcmpeq>
    a4e6:	b108      	cbz	r0, a4ec <_dtoa_r+0x844>
    a4e8:	07f3      	lsls	r3, r6, #31
    a4ea:	d45c      	bmi.n	a5a6 <_dtoa_r+0x8fe>
    a4ec:	9903      	ldr	r1, [sp, #12]
    a4ee:	4658      	mov	r0, fp
    a4f0:	f01e fec8 	bl	29284 <_Bfree>
    a4f4:	2300      	movs	r3, #0
    a4f6:	3701      	adds	r7, #1
    a4f8:	f88a 3000 	strb.w	r3, [sl]
    a4fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4fe:	601f      	str	r7, [r3, #0]
    a500:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a502:	2b00      	cmp	r3, #0
    a504:	f43f ac1c 	beq.w	9d40 <_dtoa_r+0x98>
    a508:	f8c3 a000 	str.w	sl, [r3]
    a50c:	e418      	b.n	9d40 <_dtoa_r+0x98>
    a50e:	bf00      	nop
    a510:	40240000 	.word	0x40240000
    a514:	401c0000 	.word	0x401c0000
    a518:	40140000 	.word	0x40140000
    a51c:	00031730 	.word	0x00031730
    a520:	3fe00000 	.word	0x3fe00000
    a524:	3ff00000 	.word	0x3ff00000
    a528:	4ba2      	ldr	r3, [pc, #648]	; (a7b4 <_dtoa_r+0xb0c>)
    a52a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a52e:	e9d3 3400 	ldrd	r3, r4, [r3]
    a532:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a536:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a538:	2b00      	cmp	r3, #0
    a53a:	da9f      	bge.n	a47c <_dtoa_r+0x7d4>
    a53c:	f1b9 0f00 	cmp.w	r9, #0
    a540:	dc9c      	bgt.n	a47c <_dtoa_r+0x7d4>
    a542:	f47f aec3 	bne.w	a2cc <_dtoa_r+0x624>
    a546:	2200      	movs	r2, #0
    a548:	4b9b      	ldr	r3, [pc, #620]	; (a7b8 <_dtoa_r+0xb10>)
    a54a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a54e:	f7fd ffbf 	bl	84d0 <__aeabi_dmul>
    a552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a556:	f7fe fd59 	bl	900c <__aeabi_dcmpge>
    a55a:	4604      	mov	r4, r0
    a55c:	2800      	cmp	r0, #0
    a55e:	f47f aeb5 	bne.w	a2cc <_dtoa_r+0x624>
    a562:	463e      	mov	r6, r7
    a564:	4625      	mov	r5, r4
    a566:	e0b4      	b.n	a6d2 <_dtoa_r+0xa2a>
    a568:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a56c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a570:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a572:	2b00      	cmp	r3, #0
    a574:	db01      	blt.n	a57a <_dtoa_r+0x8d2>
    a576:	2f0e      	cmp	r7, #14
    a578:	ddd6      	ble.n	a528 <_dtoa_r+0x880>
    a57a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a57c:	2a01      	cmp	r2, #1
    a57e:	dc36      	bgt.n	a5ee <_dtoa_r+0x946>
    a580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a582:	b382      	cbz	r2, a5e6 <_dtoa_r+0x93e>
    a584:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a588:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a58a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a58e:	9a06      	ldr	r2, [sp, #24]
    a590:	2101      	movs	r1, #1
    a592:	4658      	mov	r0, fp
    a594:	441a      	add	r2, r3
    a596:	9206      	str	r2, [sp, #24]
    a598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a59a:	441a      	add	r2, r3
    a59c:	920a      	str	r2, [sp, #40]	; 0x28
    a59e:	f01e fedb 	bl	29358 <__i2b>
    a5a2:	4605      	mov	r5, r0
    a5a4:	e586      	b.n	a0b4 <_dtoa_r+0x40c>
    a5a6:	463e      	mov	r6, r7
    a5a8:	4653      	mov	r3, sl
    a5aa:	469a      	mov	sl, r3
    a5ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a5b0:	2a39      	cmp	r2, #57	; 0x39
    a5b2:	d106      	bne.n	a5c2 <_dtoa_r+0x91a>
    a5b4:	9a08      	ldr	r2, [sp, #32]
    a5b6:	429a      	cmp	r2, r3
    a5b8:	d1f7      	bne.n	a5aa <_dtoa_r+0x902>
    a5ba:	2230      	movs	r2, #48	; 0x30
    a5bc:	9908      	ldr	r1, [sp, #32]
    a5be:	3601      	adds	r6, #1
    a5c0:	700a      	strb	r2, [r1, #0]
    a5c2:	781a      	ldrb	r2, [r3, #0]
    a5c4:	3201      	adds	r2, #1
    a5c6:	701a      	strb	r2, [r3, #0]
    a5c8:	e738      	b.n	a43c <_dtoa_r+0x794>
    a5ca:	2200      	movs	r2, #0
    a5cc:	4b7b      	ldr	r3, [pc, #492]	; (a7bc <_dtoa_r+0xb14>)
    a5ce:	f7fd ff7f 	bl	84d0 <__aeabi_dmul>
    a5d2:	2200      	movs	r2, #0
    a5d4:	2300      	movs	r3, #0
    a5d6:	4604      	mov	r4, r0
    a5d8:	460d      	mov	r5, r1
    a5da:	f7fe fcf9 	bl	8fd0 <__aeabi_dcmpeq>
    a5de:	2800      	cmp	r0, #0
    a5e0:	f43f af50 	beq.w	a484 <_dtoa_r+0x7dc>
    a5e4:	e782      	b.n	a4ec <_dtoa_r+0x844>
    a5e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a5ec:	e7cc      	b.n	a588 <_dtoa_r+0x8e0>
    a5ee:	f109 34ff 	add.w	r4, r9, #4294967295
    a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5f4:	42a3      	cmp	r3, r4
    a5f6:	db08      	blt.n	a60a <_dtoa_r+0x962>
    a5f8:	f1b9 0f00 	cmp.w	r9, #0
    a5fc:	eba3 0404 	sub.w	r4, r3, r4
    a600:	db0e      	blt.n	a620 <_dtoa_r+0x978>
    a602:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a606:	464b      	mov	r3, r9
    a608:	e7c1      	b.n	a58e <_dtoa_r+0x8e6>
    a60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a60c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a60e:	1ae3      	subs	r3, r4, r3
    a610:	940b      	str	r4, [sp, #44]	; 0x2c
    a612:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a616:	2400      	movs	r4, #0
    a618:	441a      	add	r2, r3
    a61a:	464b      	mov	r3, r9
    a61c:	920f      	str	r2, [sp, #60]	; 0x3c
    a61e:	e7b6      	b.n	a58e <_dtoa_r+0x8e6>
    a620:	9b06      	ldr	r3, [sp, #24]
    a622:	eba3 0809 	sub.w	r8, r3, r9
    a626:	2300      	movs	r3, #0
    a628:	e7b1      	b.n	a58e <_dtoa_r+0x8e6>
    a62a:	9e03      	ldr	r6, [sp, #12]
    a62c:	e571      	b.n	a112 <_dtoa_r+0x46a>
    a62e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a630:	9903      	ldr	r1, [sp, #12]
    a632:	e570      	b.n	a116 <_dtoa_r+0x46e>
    a634:	9603      	str	r6, [sp, #12]
    a636:	e572      	b.n	a11e <_dtoa_r+0x476>
    a638:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a63a:	2b01      	cmp	r3, #1
    a63c:	dc17      	bgt.n	a66e <_dtoa_r+0x9c6>
    a63e:	9b04      	ldr	r3, [sp, #16]
    a640:	b9ab      	cbnz	r3, a66e <_dtoa_r+0x9c6>
    a642:	9b05      	ldr	r3, [sp, #20]
    a644:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a648:	b99b      	cbnz	r3, a672 <_dtoa_r+0x9ca>
    a64a:	9b05      	ldr	r3, [sp, #20]
    a64c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a650:	0d36      	lsrs	r6, r6, #20
    a652:	0536      	lsls	r6, r6, #20
    a654:	b136      	cbz	r6, a664 <_dtoa_r+0x9bc>
    a656:	9b06      	ldr	r3, [sp, #24]
    a658:	2601      	movs	r6, #1
    a65a:	3301      	adds	r3, #1
    a65c:	9306      	str	r3, [sp, #24]
    a65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a660:	3301      	adds	r3, #1
    a662:	930a      	str	r3, [sp, #40]	; 0x28
    a664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a666:	2b00      	cmp	r3, #0
    a668:	f47f ad70 	bne.w	a14c <_dtoa_r+0x4a4>
    a66c:	960f      	str	r6, [sp, #60]	; 0x3c
    a66e:	2001      	movs	r0, #1
    a670:	e575      	b.n	a15e <_dtoa_r+0x4b6>
    a672:	2600      	movs	r6, #0
    a674:	e7f6      	b.n	a664 <_dtoa_r+0x9bc>
    a676:	f43f ad86 	beq.w	a186 <_dtoa_r+0x4de>
    a67a:	331c      	adds	r3, #28
    a67c:	9a06      	ldr	r2, [sp, #24]
    a67e:	441a      	add	r2, r3
    a680:	4498      	add	r8, r3
    a682:	9206      	str	r2, [sp, #24]
    a684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a686:	441a      	add	r2, r3
    a688:	920a      	str	r2, [sp, #40]	; 0x28
    a68a:	e57c      	b.n	a186 <_dtoa_r+0x4de>
    a68c:	4603      	mov	r3, r0
    a68e:	e7f4      	b.n	a67a <_dtoa_r+0x9d2>
    a690:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a692:	2b00      	cmp	r3, #0
    a694:	dc2b      	bgt.n	a6ee <_dtoa_r+0xa46>
    a696:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a698:	2b02      	cmp	r3, #2
    a69a:	dc09      	bgt.n	a6b0 <_dtoa_r+0xa08>
    a69c:	e027      	b.n	a6ee <_dtoa_r+0xa46>
    a69e:	f1b9 0f00 	cmp.w	r9, #0
    a6a2:	dc1d      	bgt.n	a6e0 <_dtoa_r+0xa38>
    a6a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a6a6:	2b02      	cmp	r3, #2
    a6a8:	dd1a      	ble.n	a6e0 <_dtoa_r+0xa38>
    a6aa:	463e      	mov	r6, r7
    a6ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	f47f ae0c 	bne.w	a2d0 <_dtoa_r+0x628>
    a6b8:	4621      	mov	r1, r4
    a6ba:	2205      	movs	r2, #5
    a6bc:	4658      	mov	r0, fp
    a6be:	f01e fe03 	bl	292c8 <__multadd>
    a6c2:	4601      	mov	r1, r0
    a6c4:	4604      	mov	r4, r0
    a6c6:	9803      	ldr	r0, [sp, #12]
    a6c8:	f026 fa17 	bl	30afa <__mcmp>
    a6cc:	2800      	cmp	r0, #0
    a6ce:	f77f adff 	ble.w	a2d0 <_dtoa_r+0x628>
    a6d2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6d6:	2331      	movs	r3, #49	; 0x31
    a6d8:	3601      	adds	r6, #1
    a6da:	f80a 3b01 	strb.w	r3, [sl], #1
    a6de:	e5fb      	b.n	a2d8 <_dtoa_r+0x630>
    a6e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6e2:	463e      	mov	r6, r7
    a6e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	f47f ad83 	bne.w	a1f4 <_dtoa_r+0x54c>
    a6ee:	9f08      	ldr	r7, [sp, #32]
    a6f0:	4621      	mov	r1, r4
    a6f2:	9803      	ldr	r0, [sp, #12]
    a6f4:	f026 f8f0 	bl	308d8 <quorem>
    a6f8:	9b08      	ldr	r3, [sp, #32]
    a6fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a700:	f807 9b01 	strb.w	r9, [r7], #1
    a704:	1afb      	subs	r3, r7, r3
    a706:	429a      	cmp	r2, r3
    a708:	f340 80cb 	ble.w	a8a2 <_dtoa_r+0xbfa>
    a70c:	2300      	movs	r3, #0
    a70e:	220a      	movs	r2, #10
    a710:	9903      	ldr	r1, [sp, #12]
    a712:	4658      	mov	r0, fp
    a714:	f01e fdd8 	bl	292c8 <__multadd>
    a718:	9003      	str	r0, [sp, #12]
    a71a:	e7e9      	b.n	a6f0 <_dtoa_r+0xa48>
    a71c:	692a      	ldr	r2, [r5, #16]
    a71e:	f105 010c 	add.w	r1, r5, #12
    a722:	300c      	adds	r0, #12
    a724:	3202      	adds	r2, #2
    a726:	0092      	lsls	r2, r2, #2
    a728:	f025 ff0d 	bl	30546 <memcpy>
    a72c:	2201      	movs	r2, #1
    a72e:	4639      	mov	r1, r7
    a730:	4658      	mov	r0, fp
    a732:	f01e ff2b 	bl	2958c <__lshift>
    a736:	9b08      	ldr	r3, [sp, #32]
    a738:	46a8      	mov	r8, r5
    a73a:	4605      	mov	r5, r0
    a73c:	f103 0a01 	add.w	sl, r3, #1
    a740:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a744:	4413      	add	r3, r2
    a746:	930a      	str	r3, [sp, #40]	; 0x28
    a748:	9b04      	ldr	r3, [sp, #16]
    a74a:	f003 0301 	and.w	r3, r3, #1
    a74e:	930b      	str	r3, [sp, #44]	; 0x2c
    a750:	f10a 33ff 	add.w	r3, sl, #4294967295
    a754:	4621      	mov	r1, r4
    a756:	9803      	ldr	r0, [sp, #12]
    a758:	9306      	str	r3, [sp, #24]
    a75a:	f026 f8bd 	bl	308d8 <quorem>
    a75e:	4641      	mov	r1, r8
    a760:	9009      	str	r0, [sp, #36]	; 0x24
    a762:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a766:	9803      	ldr	r0, [sp, #12]
    a768:	f026 f9c7 	bl	30afa <__mcmp>
    a76c:	462a      	mov	r2, r5
    a76e:	4621      	mov	r1, r4
    a770:	4607      	mov	r7, r0
    a772:	4658      	mov	r0, fp
    a774:	f01e ff76 	bl	29664 <__mdiff>
    a778:	68c2      	ldr	r2, [r0, #12]
    a77a:	4601      	mov	r1, r0
    a77c:	b302      	cbz	r2, a7c0 <_dtoa_r+0xb18>
    a77e:	4658      	mov	r0, fp
    a780:	f01e fd80 	bl	29284 <_Bfree>
    a784:	2f00      	cmp	r7, #0
    a786:	da3a      	bge.n	a7fe <_dtoa_r+0xb56>
    a788:	2201      	movs	r2, #1
    a78a:	9903      	ldr	r1, [sp, #12]
    a78c:	4658      	mov	r0, fp
    a78e:	f01e fefd 	bl	2958c <__lshift>
    a792:	4621      	mov	r1, r4
    a794:	9003      	str	r0, [sp, #12]
    a796:	f026 f9b0 	bl	30afa <__mcmp>
    a79a:	2800      	cmp	r0, #0
    a79c:	dc03      	bgt.n	a7a6 <_dtoa_r+0xafe>
    a79e:	d129      	bne.n	a7f4 <_dtoa_r+0xb4c>
    a7a0:	f019 0f01 	tst.w	r9, #1
    a7a4:	d026      	beq.n	a7f4 <_dtoa_r+0xb4c>
    a7a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7aa:	d11d      	bne.n	a7e8 <_dtoa_r+0xb40>
    a7ac:	e032      	b.n	a814 <_dtoa_r+0xb6c>
    a7ae:	4628      	mov	r0, r5
    a7b0:	e7c1      	b.n	a736 <_dtoa_r+0xa8e>
    a7b2:	bf00      	nop
    a7b4:	00031730 	.word	0x00031730
    a7b8:	40140000 	.word	0x40140000
    a7bc:	40240000 	.word	0x40240000
    a7c0:	900e      	str	r0, [sp, #56]	; 0x38
    a7c2:	9803      	ldr	r0, [sp, #12]
    a7c4:	f026 f999 	bl	30afa <__mcmp>
    a7c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    a7ca:	900c      	str	r0, [sp, #48]	; 0x30
    a7cc:	4658      	mov	r0, fp
    a7ce:	f01e fd59 	bl	29284 <_Bfree>
    a7d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7d4:	bb5a      	cbnz	r2, a82e <_dtoa_r+0xb86>
    a7d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7d8:	b953      	cbnz	r3, a7f0 <_dtoa_r+0xb48>
    a7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7dc:	b943      	cbnz	r3, a7f0 <_dtoa_r+0xb48>
    a7de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7e2:	d017      	beq.n	a814 <_dtoa_r+0xb6c>
    a7e4:	2f00      	cmp	r7, #0
    a7e6:	dd05      	ble.n	a7f4 <_dtoa_r+0xb4c>
    a7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a7ee:	e001      	b.n	a7f4 <_dtoa_r+0xb4c>
    a7f0:	2f00      	cmp	r7, #0
    a7f2:	da2a      	bge.n	a84a <_dtoa_r+0xba2>
    a7f4:	f8dd a018 	ldr.w	sl, [sp, #24]
    a7f8:	f80a 9b01 	strb.w	r9, [sl], #1
    a7fc:	e56e      	b.n	a2dc <_dtoa_r+0x634>
    a7fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a800:	433b      	orrs	r3, r7
    a802:	d104      	bne.n	a80e <_dtoa_r+0xb66>
    a804:	9b04      	ldr	r3, [sp, #16]
    a806:	f003 0301 	and.w	r3, r3, #1
    a80a:	2b00      	cmp	r3, #0
    a80c:	d0bc      	beq.n	a788 <_dtoa_r+0xae0>
    a80e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a812:	d136      	bne.n	a882 <_dtoa_r+0xbda>
    a814:	9f06      	ldr	r7, [sp, #24]
    a816:	2339      	movs	r3, #57	; 0x39
    a818:	f807 3b01 	strb.w	r3, [r7], #1
    a81c:	46ba      	mov	sl, r7
    a81e:	3f01      	subs	r7, #1
    a820:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a824:	2b39      	cmp	r3, #57	; 0x39
    a826:	d05a      	beq.n	a8de <_dtoa_r+0xc36>
    a828:	3301      	adds	r3, #1
    a82a:	703b      	strb	r3, [r7, #0]
    a82c:	e556      	b.n	a2dc <_dtoa_r+0x634>
    a82e:	2f00      	cmp	r7, #0
    a830:	db06      	blt.n	a840 <_dtoa_r+0xb98>
    a832:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a834:	433b      	orrs	r3, r7
    a836:	d106      	bne.n	a846 <_dtoa_r+0xb9e>
    a838:	9b04      	ldr	r3, [sp, #16]
    a83a:	f003 0301 	and.w	r3, r3, #1
    a83e:	b913      	cbnz	r3, a846 <_dtoa_r+0xb9e>
    a840:	2a00      	cmp	r2, #0
    a842:	dca1      	bgt.n	a788 <_dtoa_r+0xae0>
    a844:	e7d6      	b.n	a7f4 <_dtoa_r+0xb4c>
    a846:	2a00      	cmp	r2, #0
    a848:	dce1      	bgt.n	a80e <_dtoa_r+0xb66>
    a84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a84c:	4657      	mov	r7, sl
    a84e:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a852:	4553      	cmp	r3, sl
    a854:	d02e      	beq.n	a8b4 <_dtoa_r+0xc0c>
    a856:	2300      	movs	r3, #0
    a858:	220a      	movs	r2, #10
    a85a:	9903      	ldr	r1, [sp, #12]
    a85c:	4658      	mov	r0, fp
    a85e:	f01e fd33 	bl	292c8 <__multadd>
    a862:	45a8      	cmp	r8, r5
    a864:	9003      	str	r0, [sp, #12]
    a866:	f04f 0300 	mov.w	r3, #0
    a86a:	f04f 020a 	mov.w	r2, #10
    a86e:	4641      	mov	r1, r8
    a870:	4658      	mov	r0, fp
    a872:	d10b      	bne.n	a88c <_dtoa_r+0xbe4>
    a874:	f01e fd28 	bl	292c8 <__multadd>
    a878:	4680      	mov	r8, r0
    a87a:	4605      	mov	r5, r0
    a87c:	f10a 0a01 	add.w	sl, sl, #1
    a880:	e766      	b.n	a750 <_dtoa_r+0xaa8>
    a882:	f8dd a018 	ldr.w	sl, [sp, #24]
    a886:	f109 0901 	add.w	r9, r9, #1
    a88a:	e7b5      	b.n	a7f8 <_dtoa_r+0xb50>
    a88c:	f01e fd1c 	bl	292c8 <__multadd>
    a890:	4629      	mov	r1, r5
    a892:	4680      	mov	r8, r0
    a894:	2300      	movs	r3, #0
    a896:	220a      	movs	r2, #10
    a898:	4658      	mov	r0, fp
    a89a:	f01e fd15 	bl	292c8 <__multadd>
    a89e:	4605      	mov	r5, r0
    a8a0:	e7ec      	b.n	a87c <_dtoa_r+0xbd4>
    a8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8a4:	f04f 0800 	mov.w	r8, #0
    a8a8:	2b00      	cmp	r3, #0
    a8aa:	bfcc      	ite	gt
    a8ac:	461f      	movgt	r7, r3
    a8ae:	2701      	movle	r7, #1
    a8b0:	9b08      	ldr	r3, [sp, #32]
    a8b2:	441f      	add	r7, r3
    a8b4:	2201      	movs	r2, #1
    a8b6:	9903      	ldr	r1, [sp, #12]
    a8b8:	4658      	mov	r0, fp
    a8ba:	f01e fe67 	bl	2958c <__lshift>
    a8be:	4621      	mov	r1, r4
    a8c0:	9003      	str	r0, [sp, #12]
    a8c2:	f026 f91a 	bl	30afa <__mcmp>
    a8c6:	2800      	cmp	r0, #0
    a8c8:	dca8      	bgt.n	a81c <_dtoa_r+0xb74>
    a8ca:	d102      	bne.n	a8d2 <_dtoa_r+0xc2a>
    a8cc:	f019 0f01 	tst.w	r9, #1
    a8d0:	d1a4      	bne.n	a81c <_dtoa_r+0xb74>
    a8d2:	46ba      	mov	sl, r7
    a8d4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a8d8:	2b30      	cmp	r3, #48	; 0x30
    a8da:	d0fa      	beq.n	a8d2 <_dtoa_r+0xc2a>
    a8dc:	e4fe      	b.n	a2dc <_dtoa_r+0x634>
    a8de:	9b08      	ldr	r3, [sp, #32]
    a8e0:	42bb      	cmp	r3, r7
    a8e2:	d19b      	bne.n	a81c <_dtoa_r+0xb74>
    a8e4:	2331      	movs	r3, #49	; 0x31
    a8e6:	9a08      	ldr	r2, [sp, #32]
    a8e8:	3601      	adds	r6, #1
    a8ea:	7013      	strb	r3, [r2, #0]
    a8ec:	e4f6      	b.n	a2dc <_dtoa_r+0x634>
    a8ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	f47f aa20 	bne.w	9d36 <_dtoa_r+0x8e>
    a8f6:	4b01      	ldr	r3, [pc, #4]	; (a8fc <_dtoa_r+0xc54>)
    a8f8:	f7ff ba3f 	b.w	9d7a <_dtoa_r+0xd2>
    a8fc:	00038cbe 	.word	0x00038cbe

0000a900 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a900:	4603      	mov	r3, r0
    a902:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a904:	2401      	movs	r4, #1
    a906:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a908:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a90a:	409c      	lsls	r4, r3
    a90c:	6843      	ldr	r3, [r0, #4]
    a90e:	681b      	ldr	r3, [r3, #0]
    a910:	421c      	tst	r4, r3
    a912:	d10e      	bne.n	a932 <gpio_pin_get_dt+0x32>
    a914:	490e      	ldr	r1, [pc, #56]	; (a950 <gpio_pin_get_dt+0x50>)
    a916:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a91a:	4a0e      	ldr	r2, [pc, #56]	; (a954 <gpio_pin_get_dt+0x54>)
    a91c:	480e      	ldr	r0, [pc, #56]	; (a958 <gpio_pin_get_dt+0x58>)
    a91e:	f01f feb8 	bl	2a692 <assert_print>
    a922:	480e      	ldr	r0, [pc, #56]	; (a95c <gpio_pin_get_dt+0x5c>)
    a924:	f01f feb5 	bl	2a692 <assert_print>
    a928:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a92c:	4809      	ldr	r0, [pc, #36]	; (a954 <gpio_pin_get_dt+0x54>)
    a92e:	f01f fea9 	bl	2a684 <assert_post_action>
	const struct gpio_driver_data *const data =
    a932:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a934:	6883      	ldr	r3, [r0, #8]
    a936:	a901      	add	r1, sp, #4
    a938:	685b      	ldr	r3, [r3, #4]
    a93a:	4798      	blx	r3
	if (ret == 0) {
    a93c:	b930      	cbnz	r0, a94c <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a93e:	682a      	ldr	r2, [r5, #0]
    a940:	9b01      	ldr	r3, [sp, #4]
    a942:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a944:	4223      	tst	r3, r4
    a946:	bf14      	ite	ne
    a948:	2001      	movne	r0, #1
    a94a:	2000      	moveq	r0, #0
}
    a94c:	b003      	add	sp, #12
    a94e:	bd30      	pop	{r4, r5, pc}
    a950:	000325eb 	.word	0x000325eb
    a954:	000325ba 	.word	0x000325ba
    a958:	00032629 	.word	0x00032629
    a95c:	00032646 	.word	0x00032646

0000a960 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
	
}

//DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a960:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a962:	f023 ff4e 	bl	2e802 <sys_clock_cycle_get_32>
    a966:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a968:	4804      	ldr	r0, [pc, #16]	; (a97c <digital_0_call_back+0x1c>)
    a96a:	f01f fcd0 	bl	2a30e <printk>
	if(digital_value[0]<=DIGITAL_0_LIMIT)digital_value[0]++;
    a96e:	4a04      	ldr	r2, [pc, #16]	; (a980 <digital_0_call_back+0x20>)
    a970:	8813      	ldrh	r3, [r2, #0]
    a972:	8813      	ldrh	r3, [r2, #0]
    a974:	3301      	adds	r3, #1
    a976:	b21b      	sxth	r3, r3
    a978:	8013      	strh	r3, [r2, #0]
}
    a97a:	bd08      	pop	{r3, pc}
    a97c:	00032658 	.word	0x00032658
    a980:	20021af0 	.word	0x20021af0

0000a984 <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a984:	b508      	push	{r3, lr}
    a986:	f023 ff3c 	bl	2e802 <sys_clock_cycle_get_32>
    a98a:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a98c:	4804      	ldr	r0, [pc, #16]	; (a9a0 <digital_1_call_back+0x1c>)
    a98e:	f01f fcbe 	bl	2a30e <printk>
	if(digital_value[1]<=DIGITAL_0_LIMIT)digital_value[1]++;
    a992:	4a04      	ldr	r2, [pc, #16]	; (a9a4 <digital_1_call_back+0x20>)
    a994:	8853      	ldrh	r3, [r2, #2]
    a996:	8853      	ldrh	r3, [r2, #2]
    a998:	3301      	adds	r3, #1
    a99a:	b21b      	sxth	r3, r3
    a99c:	8053      	strh	r3, [r2, #2]
}
    a99e:	bd08      	pop	{r3, pc}
    a9a0:	00032673 	.word	0x00032673
    a9a4:	20021af0 	.word	0x20021af0

0000a9a8 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a9a8:	b508      	push	{r3, lr}
    a9aa:	f023 ff2a 	bl	2e802 <sys_clock_cycle_get_32>
    a9ae:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a9b0:	4804      	ldr	r0, [pc, #16]	; (a9c4 <digital_2_call_back+0x1c>)
    a9b2:	f01f fcac 	bl	2a30e <printk>
	if(digital_value[2]<=DIGITAL_0_LIMIT)digital_value[2]++;
    a9b6:	4a04      	ldr	r2, [pc, #16]	; (a9c8 <digital_2_call_back+0x20>)
    a9b8:	8893      	ldrh	r3, [r2, #4]
    a9ba:	8893      	ldrh	r3, [r2, #4]
    a9bc:	3301      	adds	r3, #1
    a9be:	b21b      	sxth	r3, r3
    a9c0:	8093      	strh	r3, [r2, #4]
}
    a9c2:	bd08      	pop	{r3, pc}
    a9c4:	0003268e 	.word	0x0003268e
    a9c8:	20021af0 	.word	0x20021af0

0000a9cc <uart_2_work_handler.part.0>:
static void uart_2_work_handler(struct k_work *item)
    a9cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    a9ce:	4b09      	ldr	r3, [pc, #36]	; (a9f4 <uart_2_work_handler.part.0+0x28>)
    a9d0:	aa04      	add	r2, sp, #16
    a9d2:	9305      	str	r3, [sp, #20]
    a9d4:	2302      	movs	r3, #2
    a9d6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a9da:	4807      	ldr	r0, [pc, #28]	; (a9f8 <uart_2_work_handler.part.0+0x2c>)
    a9dc:	9304      	str	r3, [sp, #16]
    a9de:	f01f fa1f 	bl	29e20 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9e2:	f240 6267 	movw	r2, #1639	; 0x667
    a9e6:	2300      	movs	r3, #0
    a9e8:	4804      	ldr	r0, [pc, #16]	; (a9fc <uart_2_work_handler.part.0+0x30>)
}
    a9ea:	b007      	add	sp, #28
    a9ec:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9f0:	f01b bb76 	b.w	260e0 <k_work_reschedule>
    a9f4:	000326a9 	.word	0x000326a9
    a9f8:	00031584 	.word	0x00031584
    a9fc:	200091f8 	.word	0x200091f8

0000aa00 <uart_work_handler.part.0>:
static void uart_work_handler(struct k_work *item)
    aa00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART receive buffer");
    aa02:	4b09      	ldr	r3, [pc, #36]	; (aa28 <uart_work_handler.part.0+0x28>)
    aa04:	aa04      	add	r2, sp, #16
    aa06:	9305      	str	r3, [sp, #20]
    aa08:	2302      	movs	r3, #2
    aa0a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    aa0e:	4807      	ldr	r0, [pc, #28]	; (aa2c <uart_work_handler.part.0+0x2c>)
    aa10:	9304      	str	r3, [sp, #16]
    aa12:	f01f fa05 	bl	29e20 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa16:	f240 6267 	movw	r2, #1639	; 0x667
    aa1a:	2300      	movs	r3, #0
    aa1c:	4804      	ldr	r0, [pc, #16]	; (aa30 <uart_work_handler.part.0+0x30>)
}
    aa1e:	b007      	add	sp, #28
    aa20:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa24:	f01b bb5c 	b.w	260e0 <k_work_reschedule>
    aa28:	000326d4 	.word	0x000326d4
    aa2c:	00031584 	.word	0x00031584
    aa30:	20009228 	.word	0x20009228

0000aa34 <uart_2_work_handler>:
{
    aa34:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    aa36:	2030      	movs	r0, #48	; 0x30
    aa38:	f025 fd62 	bl	30500 <k_malloc>
	if (buf) {
    aa3c:	b138      	cbz	r0, aa4e <uart_2_work_handler+0x1a>
		buf->len = 0;
    aa3e:	2300      	movs	r3, #0
    aa40:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa42:	1d01      	adds	r1, r0, #4
}
    aa44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa48:	4803      	ldr	r0, [pc, #12]	; (aa58 <uart_2_work_handler+0x24>)
    aa4a:	f01f b9ec 	b.w	29e26 <uart_rx_enable.constprop.0>
}
    aa4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa52:	f7ff bfbb 	b.w	a9cc <uart_2_work_handler.part.0>
    aa56:	bf00      	nop
    aa58:	00030f6c 	.word	0x00030f6c

0000aa5c <uart_work_handler>:
{
    aa5c:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    aa5e:	2030      	movs	r0, #48	; 0x30
    aa60:	f025 fd4e 	bl	30500 <k_malloc>
	if (buf) {
    aa64:	b138      	cbz	r0, aa76 <uart_work_handler+0x1a>
		buf->len = 0;
    aa66:	2300      	movs	r3, #0
    aa68:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa6a:	1d01      	adds	r1, r0, #4
}
    aa6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa70:	4803      	ldr	r0, [pc, #12]	; (aa80 <uart_work_handler+0x24>)
    aa72:	f01f b9d8 	b.w	29e26 <uart_rx_enable.constprop.0>
}
    aa76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa7a:	f7ff bfc1 	b.w	aa00 <uart_work_handler.part.0>
    aa7e:	bf00      	nop
    aa80:	00030f84 	.word	0x00030f84

0000aa84 <button3_thread>:
		    flash_test_();
	}
}


void button3_thread(void){
    aa84:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;
	while(1){
		i=0;
		k_sem_take(&button_3,K_FOREVER);
    aa86:	4e09      	ldr	r6, [pc, #36]	; (aaac <button3_thread+0x28>)
	    while (i<=C_Buffer_Current_Position){
    aa88:	4d09      	ldr	r5, [pc, #36]	; (aab0 <button3_thread+0x2c>)
		k_sem_take(&button_3,K_FOREVER);
    aa8a:	f04f 32ff 	mov.w	r2, #4294967295
    aa8e:	f04f 33ff 	mov.w	r3, #4294967295
    aa92:	4630      	mov	r0, r6
    aa94:	f01f f9d7 	bl	29e46 <k_sem_take.constprop.0.isra.0>
		i=0;
    aa98:	2400      	movs	r4, #0
	     print_current_position_cb(i);
    aa9a:	4620      	mov	r0, r4
    aa9c:	f001 f96e 	bl	bd7c <print_current_position_cb>
	    while (i<=C_Buffer_Current_Position){
    aaa0:	682b      	ldr	r3, [r5, #0]
	     i++;
    aaa2:	3401      	adds	r4, #1
	    while (i<=C_Buffer_Current_Position){
    aaa4:	42a3      	cmp	r3, r4
    aaa6:	d3f0      	bcc.n	aa8a <button3_thread+0x6>
    aaa8:	e7f7      	b.n	aa9a <button3_thread+0x16>
    aaaa:	bf00      	nop
    aaac:	20008bbc 	.word	0x20008bbc
    aab0:	20021468 	.word	0x20021468

0000aab4 <button4_thread>:
		}
    }
}

void button4_thread(void){
    aab4:	b538      	push	{r3, r4, r5, lr}

    uint8_t *packet_data;
	packet_data = k_malloc(25);
    aab6:	2019      	movs	r0, #25
    aab8:	f025 fd22 	bl	30500 <k_malloc>
	//49 53 41 44 4f 52 41 
    *packet_data = 0x49;
    aabc:	2349      	movs	r3, #73	; 0x49
    *(packet_data+1) = 0x53;
    *(packet_data+2) = 0x41;
    *(packet_data+3) = 0x44;
    aabe:	2244      	movs	r2, #68	; 0x44
    *packet_data = 0x49;
    aac0:	7003      	strb	r3, [r0, #0]
    *(packet_data+3) = 0x44;
    aac2:	70c2      	strb	r2, [r0, #3]
    *(packet_data+1) = 0x53;
    aac4:	2353      	movs	r3, #83	; 0x53
    *(packet_data+4) = 0x4F;
    aac6:	224f      	movs	r2, #79	; 0x4f
    *(packet_data+1) = 0x53;
    aac8:	7043      	strb	r3, [r0, #1]
    *(packet_data+4) = 0x4F;
    aaca:	7102      	strb	r2, [r0, #4]
    *(packet_data+2) = 0x41;
    aacc:	2341      	movs	r3, #65	; 0x41
    *(packet_data+5) = 0x52;
    aace:	2252      	movs	r2, #82	; 0x52
	packet_data = k_malloc(25);
    aad0:	4604      	mov	r4, r0
    *(packet_data+6) = 0x41;
	while(1){
		k_sem_take(&button_test,K_FOREVER);
    aad2:	4d08      	ldr	r5, [pc, #32]	; (aaf4 <button4_thread+0x40>)
    *(packet_data+2) = 0x41;
    aad4:	7083      	strb	r3, [r0, #2]
    *(packet_data+5) = 0x52;
    aad6:	7142      	strb	r2, [r0, #5]
    *(packet_data+6) = 0x41;
    aad8:	7183      	strb	r3, [r0, #6]
		k_sem_take(&button_test,K_FOREVER);
    aada:	4628      	mov	r0, r5
    aadc:	f04f 32ff 	mov.w	r2, #4294967295
    aae0:	f04f 33ff 	mov.w	r3, #4294967295
    aae4:	f01f f9af 	bl	29e46 <k_sem_take.constprop.0.isra.0>
    	bt_nus_send(NULL, packet_data,7);
    aae8:	2207      	movs	r2, #7
    aaea:	4621      	mov	r1, r4
    aaec:	2000      	movs	r0, #0
    aaee:	f005 fd61 	bl	105b4 <bt_nus_send>
	while(1){
    aaf2:	e7f2      	b.n	aada <button4_thread+0x26>
    aaf4:	20008bd4 	.word	0x20008bd4

0000aaf8 <write_memory_thread>:
void write_memory_thread(void){
    aaf8:	b510      	push	{r4, lr}
		    k_sem_take(&save_memory,K_FOREVER);
    aafa:	4c04      	ldr	r4, [pc, #16]	; (ab0c <write_memory_thread+0x14>)
    aafc:	f04f 32ff 	mov.w	r2, #4294967295
    ab00:	f04f 33ff 	mov.w	r3, #4294967295
    ab04:	4620      	mov	r0, r4
    ab06:	f01f f99e 	bl	29e46 <k_sem_take.constprop.0.isra.0>
	while(1){
    ab0a:	e7f7      	b.n	aafc <write_memory_thread+0x4>
    ab0c:	20008c1c 	.word	0x20008c1c

0000ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    ab10:	4603      	mov	r3, r0
    ab12:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    ab14:	6800      	ldr	r0, [r0, #0]
    ab16:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab18:	2301      	movs	r3, #1
    ab1a:	6845      	ldr	r5, [r0, #4]
    ab1c:	408b      	lsls	r3, r1
    ab1e:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    ab20:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab22:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    ab24:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab26:	d10e      	bne.n	ab46 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    ab28:	490e      	ldr	r1, [pc, #56]	; (ab64 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    ab2a:	f44f 731d 	mov.w	r3, #628	; 0x274
    ab2e:	4a0e      	ldr	r2, [pc, #56]	; (ab68 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    ab30:	480e      	ldr	r0, [pc, #56]	; (ab6c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    ab32:	f01f fdae 	bl	2a692 <assert_print>
    ab36:	480e      	ldr	r0, [pc, #56]	; (ab70 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    ab38:	f01f fdab 	bl	2a692 <assert_print>
    ab3c:	f44f 711d 	mov.w	r1, #628	; 0x274
    ab40:	4809      	ldr	r0, [pc, #36]	; (ab68 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    ab42:	f01f fd9f 	bl	2a684 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    ab46:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    ab48:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab4a:	6994      	ldr	r4, [r2, #24]
    ab4c:	bf18      	it	ne
    ab4e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    ab52:	46a4      	mov	ip, r4
}
    ab54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab58:	bf08      	it	eq
    ab5a:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    ab5e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    ab62:	4760      	bx	ip
    ab64:	000325eb 	.word	0x000325eb
    ab68:	000325ba 	.word	0x000325ba
    ab6c:	00032629 	.word	0x00032629
    ab70:	00032646 	.word	0x00032646

0000ab74 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab74:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ab76:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab78:	b08a      	sub	sp, #40	; 0x28
    ab7a:	4604      	mov	r4, r0
    ab7c:	460e      	mov	r6, r1
    ab7e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ab80:	2b03      	cmp	r3, #3
    ab82:	d820      	bhi.n	abc6 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ab84:	e8df f003 	tbb	[pc, r3]
    ab88:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ab8c:	4911      	ldr	r1, [pc, #68]	; (abd4 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ab8e:	4628      	mov	r0, r5
    ab90:	f025 fe48 	bl	30824 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ab94:	9505      	str	r5, [sp, #20]
    ab96:	7863      	ldrb	r3, [r4, #1]
    ab98:	211e      	movs	r1, #30
    ab9a:	9304      	str	r3, [sp, #16]
    ab9c:	78a3      	ldrb	r3, [r4, #2]
    ab9e:	4630      	mov	r0, r6
    aba0:	9303      	str	r3, [sp, #12]
    aba2:	78e3      	ldrb	r3, [r4, #3]
    aba4:	4a0c      	ldr	r2, [pc, #48]	; (abd8 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    aba6:	9302      	str	r3, [sp, #8]
    aba8:	7923      	ldrb	r3, [r4, #4]
    abaa:	9301      	str	r3, [sp, #4]
    abac:	7963      	ldrb	r3, [r4, #5]
    abae:	9300      	str	r3, [sp, #0]
    abb0:	79a3      	ldrb	r3, [r4, #6]
    abb2:	f01f fbb9 	bl	2a328 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    abb6:	b00a      	add	sp, #40	; 0x28
    abb8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    abba:	4908      	ldr	r1, [pc, #32]	; (abdc <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    abbc:	e7e7      	b.n	ab8e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    abbe:	4908      	ldr	r1, [pc, #32]	; (abe0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    abc0:	e7e5      	b.n	ab8e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    abc2:	4908      	ldr	r1, [pc, #32]	; (abe4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    abc4:	e7e3      	b.n	ab8e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    abc6:	210a      	movs	r1, #10
    abc8:	4628      	mov	r0, r5
    abca:	4a07      	ldr	r2, [pc, #28]	; (abe8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    abcc:	f01f fbac 	bl	2a328 <snprintk>
		break;
    abd0:	e7e0      	b.n	ab94 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    abd2:	bf00      	nop
    abd4:	000326fd 	.word	0x000326fd
    abd8:	0003271f 	.word	0x0003271f
    abdc:	00032704 	.word	0x00032704
    abe0:	0003270b 	.word	0x0003270b
    abe4:	00032715 	.word	0x00032715
    abe8:	000361d3 	.word	0x000361d3

0000abec <security_changed>:
{
    abec:	b5f0      	push	{r4, r5, r6, r7, lr}
    abee:	4614      	mov	r4, r2
    abf0:	b089      	sub	sp, #36	; 0x24
    abf2:	af00      	add	r7, sp, #0
    abf4:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abf6:	f021 fd54 	bl	2c6a2 <bt_conn_get_dst>
    abfa:	4639      	mov	r1, r7
    abfc:	f7ff ffba 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    ac00:	b9ac      	cbnz	r4, ac2e <security_changed+0x42>
		LOG_INF("Security changed: %s level %u", addr, level);
    ac02:	466c      	mov	r4, sp
    ac04:	b08a      	sub	sp, #40	; 0x28
    ac06:	466a      	mov	r2, sp
    ac08:	4b14      	ldr	r3, [pc, #80]	; (ac5c <security_changed+0x70>)
    ac0a:	61d5      	str	r5, [r2, #28]
    ac0c:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ac10:	f44f 7300 	mov.w	r3, #512	; 0x200
    ac14:	8413      	strh	r3, [r2, #32]
    ac16:	4b12      	ldr	r3, [pc, #72]	; (ac60 <security_changed+0x74>)
    ac18:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ac1c:	4811      	ldr	r0, [pc, #68]	; (ac64 <security_changed+0x78>)
    ac1e:	f842 3f10 	str.w	r3, [r2, #16]!
    ac22:	f01f f8fd 	bl	29e20 <z_log_msg_static_create.constprop.0>
    ac26:	46a5      	mov	sp, r4
}
    ac28:	3724      	adds	r7, #36	; 0x24
    ac2a:	46bd      	mov	sp, r7
    ac2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    ac2e:	466e      	mov	r6, sp
    ac30:	b08a      	sub	sp, #40	; 0x28
    ac32:	466b      	mov	r3, sp
    ac34:	4a0c      	ldr	r2, [pc, #48]	; (ac68 <security_changed+0x7c>)
    ac36:	e9c3 5407 	strd	r5, r4, [r3, #28]
    ac3a:	e9c3 2705 	strd	r2, r7, [r3, #20]
    ac3e:	f44f 7200 	mov.w	r2, #512	; 0x200
    ac42:	849a      	strh	r2, [r3, #36]	; 0x24
    ac44:	461a      	mov	r2, r3
    ac46:	4b09      	ldr	r3, [pc, #36]	; (ac6c <security_changed+0x80>)
    ac48:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    ac4c:	4805      	ldr	r0, [pc, #20]	; (ac64 <security_changed+0x78>)
    ac4e:	f842 3f10 	str.w	r3, [r2, #16]!
    ac52:	f01f f8e5 	bl	29e20 <z_log_msg_static_create.constprop.0>
    ac56:	46b5      	mov	sp, r6
}
    ac58:	e7e6      	b.n	ac28 <security_changed+0x3c>
    ac5a:	bf00      	nop
    ac5c:	00032742 	.word	0x00032742
    ac60:	01000004 	.word	0x01000004
    ac64:	00031584 	.word	0x00031584
    ac68:	00032760 	.word	0x00032760
    ac6c:	01000005 	.word	0x01000005

0000ac70 <pairing_failed>:
{
    ac70:	b590      	push	{r4, r7, lr}
    ac72:	b089      	sub	sp, #36	; 0x24
    ac74:	af00      	add	r7, sp, #0
    ac76:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac78:	f021 fd13 	bl	2c6a2 <bt_conn_get_dst>
    ac7c:	4639      	mov	r1, r7
    ac7e:	f7ff ff79 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    ac82:	b08a      	sub	sp, #40	; 0x28
    ac84:	466a      	mov	r2, sp
    ac86:	4b09      	ldr	r3, [pc, #36]	; (acac <pairing_failed+0x3c>)
    ac88:	61d4      	str	r4, [r2, #28]
    ac8a:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ac8e:	f44f 7300 	mov.w	r3, #512	; 0x200
    ac92:	8413      	strh	r3, [r2, #32]
    ac94:	4b06      	ldr	r3, [pc, #24]	; (acb0 <pairing_failed+0x40>)
    ac96:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ac9a:	4806      	ldr	r0, [pc, #24]	; (acb4 <pairing_failed+0x44>)
    ac9c:	f842 3f10 	str.w	r3, [r2, #16]!
    aca0:	f01f f8be 	bl	29e20 <z_log_msg_static_create.constprop.0>
}
    aca4:	3724      	adds	r7, #36	; 0x24
    aca6:	46bd      	mov	sp, r7
    aca8:	bd90      	pop	{r4, r7, pc}
    acaa:	bf00      	nop
    acac:	00032784 	.word	0x00032784
    acb0:	01000004 	.word	0x01000004
    acb4:	00031584 	.word	0x00031584

0000acb8 <pairing_complete>:
{
    acb8:	b590      	push	{r4, r7, lr}
    acba:	b089      	sub	sp, #36	; 0x24
    acbc:	af00      	add	r7, sp, #0
    acbe:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acc0:	f021 fcef 	bl	2c6a2 <bt_conn_get_dst>
    acc4:	4639      	mov	r1, r7
    acc6:	f7ff ff55 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    acca:	b08a      	sub	sp, #40	; 0x28
    accc:	466a      	mov	r2, sp
    acce:	4b09      	ldr	r3, [pc, #36]	; (acf4 <pairing_complete+0x3c>)
    acd0:	61d4      	str	r4, [r2, #28]
    acd2:	e9c2 3705 	strd	r3, r7, [r2, #20]
    acd6:	f44f 7300 	mov.w	r3, #512	; 0x200
    acda:	8413      	strh	r3, [r2, #32]
    acdc:	4b06      	ldr	r3, [pc, #24]	; (acf8 <pairing_complete+0x40>)
    acde:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ace2:	4806      	ldr	r0, [pc, #24]	; (acfc <pairing_complete+0x44>)
    ace4:	f842 3f10 	str.w	r3, [r2, #16]!
    ace8:	f01f f89a 	bl	29e20 <z_log_msg_static_create.constprop.0>
}
    acec:	3724      	adds	r7, #36	; 0x24
    acee:	46bd      	mov	sp, r7
    acf0:	bd90      	pop	{r4, r7, pc}
    acf2:	bf00      	nop
    acf4:	000327a7 	.word	0x000327a7
    acf8:	01000004 	.word	0x01000004
    acfc:	00031584 	.word	0x00031584

0000ad00 <auth_cancel>:
{
    ad00:	b580      	push	{r7, lr}
    ad02:	b088      	sub	sp, #32
    ad04:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad06:	f021 fccc 	bl	2c6a2 <bt_conn_get_dst>
    ad0a:	4639      	mov	r1, r7
    ad0c:	f7ff ff32 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    ad10:	b088      	sub	sp, #32
    ad12:	466a      	mov	r2, sp
    ad14:	4b08      	ldr	r3, [pc, #32]	; (ad38 <auth_cancel+0x38>)
    ad16:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    ad1a:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ad1e:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad22:	8393      	strh	r3, [r2, #28]
    ad24:	4b05      	ldr	r3, [pc, #20]	; (ad3c <auth_cancel+0x3c>)
    ad26:	4806      	ldr	r0, [pc, #24]	; (ad40 <auth_cancel+0x40>)
    ad28:	f842 3f10 	str.w	r3, [r2, #16]!
    ad2c:	f01f f878 	bl	29e20 <z_log_msg_static_create.constprop.0>
}
    ad30:	3720      	adds	r7, #32
    ad32:	46bd      	mov	sp, r7
    ad34:	bd80      	pop	{r7, pc}
    ad36:	bf00      	nop
    ad38:	000327c9 	.word	0x000327c9
    ad3c:	01000003 	.word	0x01000003
    ad40:	00031584 	.word	0x00031584

0000ad44 <auth_passkey_display>:
{
    ad44:	b590      	push	{r4, r7, lr}
    ad46:	b089      	sub	sp, #36	; 0x24
    ad48:	af00      	add	r7, sp, #0
    ad4a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad4c:	f021 fca9 	bl	2c6a2 <bt_conn_get_dst>
    ad50:	4639      	mov	r1, r7
    ad52:	f7ff ff0f 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad56:	b08a      	sub	sp, #40	; 0x28
    ad58:	466a      	mov	r2, sp
    ad5a:	4b09      	ldr	r3, [pc, #36]	; (ad80 <auth_passkey_display+0x3c>)
    ad5c:	61d4      	str	r4, [r2, #28]
    ad5e:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ad62:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad66:	8413      	strh	r3, [r2, #32]
    ad68:	4b06      	ldr	r3, [pc, #24]	; (ad84 <auth_passkey_display+0x40>)
    ad6a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ad6e:	4806      	ldr	r0, [pc, #24]	; (ad88 <auth_passkey_display+0x44>)
    ad70:	f842 3f10 	str.w	r3, [r2, #16]!
    ad74:	f01f f854 	bl	29e20 <z_log_msg_static_create.constprop.0>
}
    ad78:	3724      	adds	r7, #36	; 0x24
    ad7a:	46bd      	mov	sp, r7
    ad7c:	bd90      	pop	{r4, r7, pc}
    ad7e:	bf00      	nop
    ad80:	000327df 	.word	0x000327df
    ad84:	01000004 	.word	0x01000004
    ad88:	00031584 	.word	0x00031584

0000ad8c <auth_passkey_confirm>:
{
    ad8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad8e:	b08f      	sub	sp, #60	; 0x3c
    ad90:	af00      	add	r7, sp, #0
    ad92:	460c      	mov	r4, r1
    ad94:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    ad96:	f00a f819 	bl	14dcc <bt_conn_ref>
    ad9a:	4b16      	ldr	r3, [pc, #88]	; (adf4 <auth_passkey_confirm+0x68>)
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad9c:	466e      	mov	r6, sp
	auth_conn = bt_conn_ref(conn);
    ad9e:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ada0:	4628      	mov	r0, r5
    ada2:	f107 0518 	add.w	r5, r7, #24
    ada6:	f021 fc7c 	bl	2c6a2 <bt_conn_get_dst>
    adaa:	4629      	mov	r1, r5
    adac:	f7ff fee2 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    adb0:	b08a      	sub	sp, #40	; 0x28
    adb2:	466a      	mov	r2, sp
    adb4:	4b10      	ldr	r3, [pc, #64]	; (adf8 <auth_passkey_confirm+0x6c>)
    adb6:	61d4      	str	r4, [r2, #28]
    adb8:	e9c2 3505 	strd	r3, r5, [r2, #20]
    adbc:	f44f 7300 	mov.w	r3, #512	; 0x200
    adc0:	4c0e      	ldr	r4, [pc, #56]	; (adfc <auth_passkey_confirm+0x70>)
    adc2:	8413      	strh	r3, [r2, #32]
    adc4:	4b0e      	ldr	r3, [pc, #56]	; (ae00 <auth_passkey_confirm+0x74>)
    adc6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    adca:	4620      	mov	r0, r4
    adcc:	f842 3f10 	str.w	r3, [r2, #16]!
    add0:	f01f f826 	bl	29e20 <z_log_msg_static_create.constprop.0>
    add4:	46b5      	mov	sp, r6
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    add6:	4b0b      	ldr	r3, [pc, #44]	; (ae04 <auth_passkey_confirm+0x78>)
    add8:	f107 0210 	add.w	r2, r7, #16
    addc:	617b      	str	r3, [r7, #20]
    adde:	2302      	movs	r3, #2
    ade0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    ade4:	613b      	str	r3, [r7, #16]
    ade6:	4620      	mov	r0, r4
    ade8:	f01f f81a 	bl	29e20 <z_log_msg_static_create.constprop.0>
}
    adec:	373c      	adds	r7, #60	; 0x3c
    adee:	46bd      	mov	sp, r7
    adf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adf2:	bf00      	nop
    adf4:	2000a328 	.word	0x2000a328
    adf8:	000327df 	.word	0x000327df
    adfc:	00031584 	.word	0x00031584
    ae00:	01000004 	.word	0x01000004
    ae04:	000327f4 	.word	0x000327f4

0000ae08 <bt_receive_cb>:
{
    ae08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ae0c:	2400      	movs	r4, #0
{
    ae0e:	4605      	mov	r5, r0
    ae10:	b088      	sub	sp, #32
    ae12:	460f      	mov	r7, r1
    ae14:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ae16:	4621      	mov	r1, r4
    ae18:	221a      	movs	r2, #26
    ae1a:	a801      	add	r0, sp, #4
    ae1c:	9400      	str	r4, [sp, #0]
    ae1e:	f025 fbcc 	bl	305ba <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    ae22:	4628      	mov	r0, r5
    ae24:	f021 fc3d 	bl	2c6a2 <bt_conn_get_dst>
    ae28:	4669      	mov	r1, sp
    ae2a:	f7ff fea3 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    ae2e:	4669      	mov	r1, sp
    ae30:	481d      	ldr	r0, [pc, #116]	; (aea8 <bt_receive_cb+0xa0>)
    ae32:	f01e f843 	bl	28ebc <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae36:	f8df 8074 	ldr.w	r8, [pc, #116]	; aeac <bt_receive_cb+0xa4>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ae3a:	f8df 9074 	ldr.w	r9, [pc, #116]	; aeb0 <bt_receive_cb+0xa8>
	for (uint16_t pos = 0; pos != len;) {
    ae3e:	42b4      	cmp	r4, r6
    ae40:	d007      	beq.n	ae52 <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    ae42:	2030      	movs	r0, #48	; 0x30
    ae44:	f025 fb5c 	bl	30500 <k_malloc>
		if (!tx) {
    ae48:	4605      	mov	r5, r0
    ae4a:	b928      	cbnz	r0, ae58 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    ae4c:	4819      	ldr	r0, [pc, #100]	; (aeb4 <bt_receive_cb+0xac>)
    ae4e:	f01e f835 	bl	28ebc <iprintf>
}
    ae52:	b008      	add	sp, #32
    ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size) {
    ae58:	1b32      	subs	r2, r6, r4
    ae5a:	2a27      	cmp	r2, #39	; 0x27
			tx->len = tx_data_size;
    ae5c:	bf8c      	ite	hi
    ae5e:	2227      	movhi	r2, #39	; 0x27
			tx->len = (len - pos);
    ae60:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    ae62:	f100 0a04 	add.w	sl, r0, #4
    ae66:	8582      	strh	r2, [r0, #44]	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ae68:	1939      	adds	r1, r7, r4
    ae6a:	4650      	mov	r0, sl
    ae6c:	f025 fb6b 	bl	30546 <memcpy>
		pos += tx->len;
    ae70:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    ae72:	441c      	add	r4, r3
    ae74:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    ae76:	42a6      	cmp	r6, r4
    ae78:	d109      	bne.n	ae8e <bt_receive_cb+0x86>
    ae7a:	19ba      	adds	r2, r7, r6
    ae7c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    ae80:	2a0d      	cmp	r2, #13
    ae82:	d104      	bne.n	ae8e <bt_receive_cb+0x86>
			tx->data[tx->len] = '\n';
    ae84:	210a      	movs	r1, #10
    ae86:	18ea      	adds	r2, r5, r3
			tx->len++;
    ae88:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    ae8a:	7111      	strb	r1, [r2, #4]
			tx->len++;
    ae8c:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae8e:	4651      	mov	r1, sl
    ae90:	4640      	mov	r0, r8
    ae92:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    ae94:	f01e ffcf 	bl	29e36 <uart_tx.constprop.0>
		if (err) {
    ae98:	2800      	cmp	r0, #0
    ae9a:	d0d0      	beq.n	ae3e <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ae9c:	4629      	mov	r1, r5
    ae9e:	4648      	mov	r0, r9
    aea0:	f025 f97a 	bl	30198 <k_queue_append>
    aea4:	e7cb      	b.n	ae3e <bt_receive_cb+0x36>
    aea6:	bf00      	nop
    aea8:	00032823 	.word	0x00032823
    aeac:	00030f84 	.word	0x00030f84
    aeb0:	20008c80 	.word	0x20008c80
    aeb4:	0003283a 	.word	0x0003283a

0000aeb8 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    aeb8:	4603      	mov	r3, r0
    aeba:	b510      	push	{r4, lr}
    aebc:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aebe:	7919      	ldrb	r1, [r3, #4]
    aec0:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    aec2:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aec4:	fa03 f101 	lsl.w	r1, r3, r1
    aec8:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    aeca:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aecc:	681b      	ldr	r3, [r3, #0]
    aece:	4219      	tst	r1, r3
    aed0:	d10e      	bne.n	aef0 <gpio_pin_set_dt.isra.0+0x38>
    aed2:	490e      	ldr	r1, [pc, #56]	; (af0c <gpio_pin_set_dt.isra.0+0x54>)
    aed4:	f240 533d 	movw	r3, #1341	; 0x53d
    aed8:	4a0d      	ldr	r2, [pc, #52]	; (af10 <gpio_pin_set_dt.isra.0+0x58>)
    aeda:	480e      	ldr	r0, [pc, #56]	; (af14 <gpio_pin_set_dt.isra.0+0x5c>)
    aedc:	f01f fbd9 	bl	2a692 <assert_print>
    aee0:	480d      	ldr	r0, [pc, #52]	; (af18 <gpio_pin_set_dt.isra.0+0x60>)
    aee2:	f01f fbd6 	bl	2a692 <assert_print>
    aee6:	f240 513d 	movw	r1, #1341	; 0x53d
    aeea:	4809      	ldr	r0, [pc, #36]	; (af10 <gpio_pin_set_dt.isra.0+0x58>)
    aeec:	f01f fbca 	bl	2a684 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aef0:	6823      	ldr	r3, [r4, #0]
    aef2:	4219      	tst	r1, r3
    aef4:	d003      	beq.n	aefe <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    aef6:	b122      	cbz	r2, af02 <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    aef8:	6883      	ldr	r3, [r0, #8]
    aefa:	691b      	ldr	r3, [r3, #16]
    aefc:	e003      	b.n	af06 <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    aefe:	2a00      	cmp	r2, #0
    af00:	d0fa      	beq.n	aef8 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    af02:	6883      	ldr	r3, [r0, #8]
    af04:	68db      	ldr	r3, [r3, #12]
}
    af06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    af0a:	4718      	bx	r3
    af0c:	000325eb 	.word	0x000325eb
    af10:	000325ba 	.word	0x000325ba
    af14:	00032629 	.word	0x00032629
    af18:	00032646 	.word	0x00032646

0000af1c <button_pressed_1>:
void button_pressed_1(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    af1c:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    af1e:	4807      	ldr	r0, [pc, #28]	; (af3c <button_pressed_1+0x20>)
    af20:	f01a fb3e 	bl	255a0 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    af24:	2101      	movs	r1, #1
    af26:	4806      	ldr	r0, [pc, #24]	; (af40 <button_pressed_1+0x24>)
    af28:	f7ff ffc6 	bl	aeb8 <gpio_pin_set_dt.isra.0>
    af2c:	f023 fc69 	bl	2e802 <sys_clock_cycle_get_32>
}
    af30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    af34:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    af36:	4803      	ldr	r0, [pc, #12]	; (af44 <button_pressed_1+0x28>)
    af38:	f01f b9e9 	b.w	2a30e <printk>
    af3c:	20008c4c 	.word	0x20008c4c
    af40:	00031888 	.word	0x00031888
    af44:	00032865 	.word	0x00032865

0000af48 <connected>:
{
    af48:	b5b0      	push	{r4, r5, r7, lr}
    af4a:	b088      	sub	sp, #32
    af4c:	4604      	mov	r4, r0
    af4e:	af00      	add	r7, sp, #0
	if (err) {
    af50:	b189      	cbz	r1, af76 <connected+0x2e>
		LOG_ERR("Connection failed (err %u)", err);
    af52:	466c      	mov	r4, sp
    af54:	b088      	sub	sp, #32
    af56:	466a      	mov	r2, sp
    af58:	4b17      	ldr	r3, [pc, #92]	; (afb8 <connected+0x70>)
    af5a:	4818      	ldr	r0, [pc, #96]	; (afbc <connected+0x74>)
    af5c:	e9c2 3105 	strd	r3, r1, [r2, #20]
    af60:	2303      	movs	r3, #3
    af62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    af66:	f842 3f10 	str.w	r3, [r2, #16]!
    af6a:	f01e ff59 	bl	29e20 <z_log_msg_static_create.constprop.0>
    af6e:	46a5      	mov	sp, r4
}
    af70:	3720      	adds	r7, #32
    af72:	46bd      	mov	sp, r7
    af74:	bdb0      	pop	{r4, r5, r7, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    af76:	f021 fb94 	bl	2c6a2 <bt_conn_get_dst>
    af7a:	4639      	mov	r1, r7
    af7c:	f7ff fdfa 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    af80:	466d      	mov	r5, sp
    af82:	b088      	sub	sp, #32
    af84:	466a      	mov	r2, sp
    af86:	4b0e      	ldr	r3, [pc, #56]	; (afc0 <connected+0x78>)
    af88:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    af8c:	e9c2 3705 	strd	r3, r7, [r2, #20]
    af90:	f44f 7300 	mov.w	r3, #512	; 0x200
    af94:	8393      	strh	r3, [r2, #28]
    af96:	4b0b      	ldr	r3, [pc, #44]	; (afc4 <connected+0x7c>)
    af98:	4808      	ldr	r0, [pc, #32]	; (afbc <connected+0x74>)
    af9a:	f842 3f10 	str.w	r3, [r2, #16]!
    af9e:	f01e ff3f 	bl	29e20 <z_log_msg_static_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    afa2:	4620      	mov	r0, r4
    afa4:	46ad      	mov	sp, r5
    afa6:	f009 ff11 	bl	14dcc <bt_conn_ref>
    afaa:	4b07      	ldr	r3, [pc, #28]	; (afc8 <connected+0x80>)
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    afac:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    afae:	6018      	str	r0, [r3, #0]
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    afb0:	4806      	ldr	r0, [pc, #24]	; (afcc <connected+0x84>)
    afb2:	f7ff ff81 	bl	aeb8 <gpio_pin_set_dt.isra.0>
    afb6:	e7db      	b.n	af70 <connected+0x28>
    afb8:	0003287d 	.word	0x0003287d
    afbc:	00031584 	.word	0x00031584
    afc0:	00032898 	.word	0x00032898
    afc4:	01000003 	.word	0x01000003
    afc8:	2000a32c 	.word	0x2000a32c
    afcc:	000318a0 	.word	0x000318a0

0000afd0 <disconnected>:
{
    afd0:	b5b0      	push	{r4, r5, r7, lr}
    afd2:	b088      	sub	sp, #32
    afd4:	af00      	add	r7, sp, #0
    afd6:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    afd8:	f021 fb63 	bl	2c6a2 <bt_conn_get_dst>
    afdc:	4639      	mov	r1, r7
    afde:	f7ff fdc9 	bl	ab74 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afe2:	466d      	mov	r5, sp
    afe4:	b08a      	sub	sp, #40	; 0x28
    afe6:	466a      	mov	r2, sp
    afe8:	4b11      	ldr	r3, [pc, #68]	; (b030 <disconnected+0x60>)
    afea:	61d4      	str	r4, [r2, #28]
    afec:	e9c2 3705 	strd	r3, r7, [r2, #20]
    aff0:	f44f 7300 	mov.w	r3, #512	; 0x200
    aff4:	8413      	strh	r3, [r2, #32]
    aff6:	4b0f      	ldr	r3, [pc, #60]	; (b034 <disconnected+0x64>)
	if (auth_conn) {
    aff8:	4c0f      	ldr	r4, [pc, #60]	; (b038 <disconnected+0x68>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    affa:	4810      	ldr	r0, [pc, #64]	; (b03c <disconnected+0x6c>)
    affc:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    b000:	f842 3f10 	str.w	r3, [r2, #16]!
    b004:	f01e ff0c 	bl	29e20 <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
    b008:	6820      	ldr	r0, [r4, #0]
    b00a:	46ad      	mov	sp, r5
    b00c:	b118      	cbz	r0, b016 <disconnected+0x46>
		bt_conn_unref(auth_conn);
    b00e:	f009 ff05 	bl	14e1c <bt_conn_unref>
		auth_conn = NULL;
    b012:	2300      	movs	r3, #0
    b014:	6023      	str	r3, [r4, #0]
	if (current_conn) {
    b016:	4c0a      	ldr	r4, [pc, #40]	; (b040 <disconnected+0x70>)
    b018:	6820      	ldr	r0, [r4, #0]
    b01a:	b130      	cbz	r0, b02a <disconnected+0x5a>
		bt_conn_unref(current_conn);
    b01c:	f009 fefe 	bl	14e1c <bt_conn_unref>
		current_conn = NULL;
    b020:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    b022:	4808      	ldr	r0, [pc, #32]	; (b044 <disconnected+0x74>)
		current_conn = NULL;
    b024:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    b026:	f7ff ff47 	bl	aeb8 <gpio_pin_set_dt.isra.0>
}
    b02a:	3720      	adds	r7, #32
    b02c:	46bd      	mov	sp, r7
    b02e:	bdb0      	pop	{r4, r5, r7, pc}
    b030:	000328a5 	.word	0x000328a5
    b034:	01000004 	.word	0x01000004
    b038:	2000a328 	.word	0x2000a328
    b03c:	00031584 	.word	0x00031584
    b040:	2000a32c 	.word	0x2000a32c
    b044:	000318a0 	.word	0x000318a0

0000b048 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    b048:	4603      	mov	r3, r0
    b04a:	b570      	push	{r4, r5, r6, lr}
    b04c:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    b04e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    b050:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    b052:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    b054:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b056:	f002 0430 	and.w	r4, r2, #48	; 0x30
    b05a:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    b05c:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    b05e:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b062:	d10e      	bne.n	b082 <gpio_pin_configure_dt.isra.0+0x3a>
    b064:	4925      	ldr	r1, [pc, #148]	; (b0fc <gpio_pin_configure_dt.isra.0+0xb4>)
    b066:	f240 23b7 	movw	r3, #695	; 0x2b7
    b06a:	4a25      	ldr	r2, [pc, #148]	; (b100 <gpio_pin_configure_dt.isra.0+0xb8>)
    b06c:	4825      	ldr	r0, [pc, #148]	; (b104 <gpio_pin_configure_dt.isra.0+0xbc>)
    b06e:	f01f fb10 	bl	2a692 <assert_print>
    b072:	4825      	ldr	r0, [pc, #148]	; (b108 <gpio_pin_configure_dt.isra.0+0xc0>)
    b074:	f01f fb0d 	bl	2a692 <assert_print>
    b078:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    b07c:	4820      	ldr	r0, [pc, #128]	; (b100 <gpio_pin_configure_dt.isra.0+0xb8>)
    b07e:	f01f fb01 	bl	2a684 <assert_post_action>
    b082:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    b086:	2c02      	cmp	r4, #2
    b088:	d10c      	bne.n	b0a4 <gpio_pin_configure_dt.isra.0+0x5c>
    b08a:	4920      	ldr	r1, [pc, #128]	; (b10c <gpio_pin_configure_dt.isra.0+0xc4>)
    b08c:	f240 23bb 	movw	r3, #699	; 0x2bb
    b090:	4a1b      	ldr	r2, [pc, #108]	; (b100 <gpio_pin_configure_dt.isra.0+0xb8>)
    b092:	481c      	ldr	r0, [pc, #112]	; (b104 <gpio_pin_configure_dt.isra.0+0xbc>)
    b094:	f01f fafd 	bl	2a692 <assert_print>
    b098:	481d      	ldr	r0, [pc, #116]	; (b110 <gpio_pin_configure_dt.isra.0+0xc8>)
    b09a:	f01f fafa 	bl	2a692 <assert_print>
    b09e:	f240 21bb 	movw	r1, #699	; 0x2bb
    b0a2:	e7eb      	b.n	b07c <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    b0a4:	f002 0406 	and.w	r4, r2, #6
    b0a8:	2c04      	cmp	r4, #4
    b0aa:	d109      	bne.n	b0c0 <gpio_pin_configure_dt.isra.0+0x78>
    b0ac:	4919      	ldr	r1, [pc, #100]	; (b114 <gpio_pin_configure_dt.isra.0+0xcc>)
    b0ae:	f240 23bf 	movw	r3, #703	; 0x2bf
    b0b2:	4a13      	ldr	r2, [pc, #76]	; (b100 <gpio_pin_configure_dt.isra.0+0xb8>)
    b0b4:	4813      	ldr	r0, [pc, #76]	; (b104 <gpio_pin_configure_dt.isra.0+0xbc>)
    b0b6:	f01f faec 	bl	2a692 <assert_print>
    b0ba:	f240 21bf 	movw	r1, #703	; 0x2bf
    b0be:	e7dd      	b.n	b07c <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b0c0:	2401      	movs	r4, #1
    b0c2:	681b      	ldr	r3, [r3, #0]
    b0c4:	408c      	lsls	r4, r1
    b0c6:	421c      	tst	r4, r3
    b0c8:	d10c      	bne.n	b0e4 <gpio_pin_configure_dt.isra.0+0x9c>
    b0ca:	4913      	ldr	r1, [pc, #76]	; (b118 <gpio_pin_configure_dt.isra.0+0xd0>)
    b0cc:	f240 23d2 	movw	r3, #722	; 0x2d2
    b0d0:	4a0b      	ldr	r2, [pc, #44]	; (b100 <gpio_pin_configure_dt.isra.0+0xb8>)
    b0d2:	480c      	ldr	r0, [pc, #48]	; (b104 <gpio_pin_configure_dt.isra.0+0xbc>)
    b0d4:	f01f fadd 	bl	2a692 <assert_print>
    b0d8:	4810      	ldr	r0, [pc, #64]	; (b11c <gpio_pin_configure_dt.isra.0+0xd4>)
    b0da:	f01f fada 	bl	2a692 <assert_print>
    b0de:	f240 21d2 	movw	r1, #722	; 0x2d2
    b0e2:	e7cb      	b.n	b07c <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0e4:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b0e6:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0ea:	bf14      	ite	ne
    b0ec:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b0ee:	43a3      	biceq	r3, r4
    b0f0:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    b0f2:	6833      	ldr	r3, [r6, #0]
}
    b0f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    b0f8:	4718      	bx	r3
    b0fa:	bf00      	nop
    b0fc:	000328c2 	.word	0x000328c2
    b100:	000325ba 	.word	0x000325ba
    b104:	00032629 	.word	0x00032629
    b108:	000328fb 	.word	0x000328fb
    b10c:	00032938 	.word	0x00032938
    b110:	0003296d 	.word	0x0003296d
    b114:	000329bf 	.word	0x000329bf
    b118:	000325eb 	.word	0x000325eb
    b11c:	00032646 	.word	0x00032646

0000b120 <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b120:	b510      	push	{r4, lr}
	switch (evt->type) {
    b122:	780b      	ldrb	r3, [r1, #0]
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b124:	b086      	sub	sp, #24
	switch (evt->type) {
    b126:	2b05      	cmp	r3, #5
    b128:	d828      	bhi.n	b17c <uart_cb+0x5c>
    b12a:	e8df f003 	tbb	[pc, r3]
    b12e:	8a03      	.short	0x8a03
    b130:	467a682b 	.word	0x467a682b
		if ((evt->data.tx.len == 0) ||
    b134:	688b      	ldr	r3, [r1, #8]
    b136:	b30b      	cbz	r3, b17c <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
    b138:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    b13a:	b1f8      	cbz	r0, b17c <uart_cb+0x5c>
		if (aborted_buf) {
    b13c:	4a4b      	ldr	r2, [pc, #300]	; (b26c <uart_cb+0x14c>)
    b13e:	6813      	ldr	r3, [r2, #0]
    b140:	b1f3      	cbz	r3, b180 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b142:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    b144:	2300      	movs	r3, #0
    b146:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    b148:	4a49      	ldr	r2, [pc, #292]	; (b270 <uart_cb+0x150>)
    b14a:	6013      	str	r3, [r2, #0]
		k_free(buf);
    b14c:	f025 f9d1 	bl	304f2 <k_free>
	return z_impl_k_queue_get(queue, timeout);
    b150:	2200      	movs	r2, #0
    b152:	2300      	movs	r3, #0
    b154:	4847      	ldr	r0, [pc, #284]	; (b274 <uart_cb+0x154>)
    b156:	f01a f9b9 	bl	254cc <z_impl_k_queue_get>
		if (!buf) {
    b15a:	b178      	cbz	r0, b17c <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
    b15c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b15e:	1d01      	adds	r1, r0, #4
    b160:	4845      	ldr	r0, [pc, #276]	; (b278 <uart_cb+0x158>)
    b162:	f01e fe68 	bl	29e36 <uart_tx.constprop.0>
    b166:	b148      	cbz	r0, b17c <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    b168:	4b44      	ldr	r3, [pc, #272]	; (b27c <uart_cb+0x15c>)
			LOG_WRN("Not able to allocate UART receive buffer");
    b16a:	9305      	str	r3, [sp, #20]
    b16c:	2302      	movs	r3, #2
    b16e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b172:	4843      	ldr	r0, [pc, #268]	; (b280 <uart_cb+0x160>)
    b174:	aa04      	add	r2, sp, #16
    b176:	9304      	str	r3, [sp, #16]
    b178:	f01e fe52 	bl	29e20 <z_log_msg_static_create.constprop.0>
}
    b17c:	b006      	add	sp, #24
    b17e:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
    b180:	3804      	subs	r0, #4
    b182:	e7e3      	b.n	b14c <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b184:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    b186:	68cb      	ldr	r3, [r1, #12]
    b188:	8d10      	ldrh	r0, [r2, #40]	; 0x28
    b18a:	4403      	add	r3, r0
		if (disable_req) {
    b18c:	483d      	ldr	r0, [pc, #244]	; (b284 <uart_cb+0x164>)
		buf->len += evt->data.rx.len;
    b18e:	b29b      	uxth	r3, r3
    b190:	8513      	strh	r3, [r2, #40]	; 0x28
		if (disable_req) {
    b192:	7802      	ldrb	r2, [r0, #0]
    b194:	2a00      	cmp	r2, #0
    b196:	d1f1      	bne.n	b17c <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    b198:	684a      	ldr	r2, [r1, #4]
    b19a:	4413      	add	r3, r2
    b19c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b1a0:	2b0a      	cmp	r3, #10
    b1a2:	d001      	beq.n	b1a8 <uart_cb+0x88>
    b1a4:	2b0d      	cmp	r3, #13
    b1a6:	d1e9      	bne.n	b17c <uart_cb+0x5c>
			disable_req = true;
    b1a8:	2301      	movs	r3, #1
    b1aa:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    b1ac:	4832      	ldr	r0, [pc, #200]	; (b278 <uart_cb+0x158>)
    b1ae:	6883      	ldr	r3, [r0, #8]
    b1b0:	695b      	ldr	r3, [r3, #20]
}
    b1b2:	b006      	add	sp, #24
    b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1b8:	4718      	bx	r3
		disable_req = false;
    b1ba:	2400      	movs	r4, #0
    b1bc:	4b31      	ldr	r3, [pc, #196]	; (b284 <uart_cb+0x164>)
		buf = k_malloc(sizeof(*buf));
    b1be:	2030      	movs	r0, #48	; 0x30
		disable_req = false;
    b1c0:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    b1c2:	f025 f99d 	bl	30500 <k_malloc>
		if (buf) {
    b1c6:	b138      	cbz	r0, b1d8 <uart_cb+0xb8>
			buf->len = 0;
    b1c8:	8584      	strh	r4, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b1ca:	1d01      	adds	r1, r0, #4
    b1cc:	482a      	ldr	r0, [pc, #168]	; (b278 <uart_cb+0x158>)
}
    b1ce:	b006      	add	sp, #24
    b1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b1d4:	f01e be27 	b.w	29e26 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    b1d8:	4b2b      	ldr	r3, [pc, #172]	; (b288 <uart_cb+0x168>)
    b1da:	aa04      	add	r2, sp, #16
    b1dc:	9305      	str	r3, [sp, #20]
    b1de:	2302      	movs	r3, #2
    b1e0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b1e4:	4826      	ldr	r0, [pc, #152]	; (b280 <uart_cb+0x160>)
    b1e6:	9304      	str	r3, [sp, #16]
    b1e8:	f01e fe1a 	bl	29e20 <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1ec:	f240 6267 	movw	r2, #1639	; 0x667
    b1f0:	2300      	movs	r3, #0
    b1f2:	4826      	ldr	r0, [pc, #152]	; (b28c <uart_cb+0x16c>)
}
    b1f4:	b006      	add	sp, #24
    b1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1fa:	f01a bf71 	b.w	260e0 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    b1fe:	2030      	movs	r0, #48	; 0x30
    b200:	f025 f97e 	bl	30500 <k_malloc>
		if (buf) {
    b204:	4601      	mov	r1, r0
    b206:	b150      	cbz	r0, b21e <uart_cb+0xfe>
			buf->len = 0;
    b208:	2300      	movs	r3, #0
	return api->rx_buf_rsp(dev, buf, len);
    b20a:	2228      	movs	r2, #40	; 0x28
    b20c:	8583      	strh	r3, [r0, #44]	; 0x2c
    b20e:	481a      	ldr	r0, [pc, #104]	; (b278 <uart_cb+0x158>)
    b210:	3104      	adds	r1, #4
    b212:	6883      	ldr	r3, [r0, #8]
    b214:	691b      	ldr	r3, [r3, #16]
}
    b216:	b006      	add	sp, #24
    b218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b21c:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    b21e:	4b1a      	ldr	r3, [pc, #104]	; (b288 <uart_cb+0x168>)
    b220:	e7a3      	b.n	b16a <uart_cb+0x4a>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    b222:	684b      	ldr	r3, [r1, #4]
    b224:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
    b226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b228:	b12b      	cbz	r3, b236 <uart_cb+0x116>
			k_fifo_put(&fifo_uart_rx_data, buf);
    b22a:	4819      	ldr	r0, [pc, #100]	; (b290 <uart_cb+0x170>)
}
    b22c:	b006      	add	sp, #24
    b22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    b232:	f024 bfb1 	b.w	30198 <k_queue_append>
			k_free(buf);
    b236:	4608      	mov	r0, r1
}
    b238:	b006      	add	sp, #24
    b23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    b23e:	f025 b958 	b.w	304f2 <k_free>
		if (!aborted_buf) {
    b242:	4a0a      	ldr	r2, [pc, #40]	; (b26c <uart_cb+0x14c>)
    b244:	6813      	ldr	r3, [r2, #0]
    b246:	b90b      	cbnz	r3, b24c <uart_cb+0x12c>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    b248:	684b      	ldr	r3, [r1, #4]
    b24a:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    b24c:	4808      	ldr	r0, [pc, #32]	; (b270 <uart_cb+0x150>)
    b24e:	688b      	ldr	r3, [r1, #8]
    b250:	6801      	ldr	r1, [r0, #0]
    b252:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b254:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    b256:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
    b258:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
		uart_tx(uart, &buf->data[aborted_len],
    b25a:	4807      	ldr	r0, [pc, #28]	; (b278 <uart_cb+0x158>)
    b25c:	1ad2      	subs	r2, r2, r3
    b25e:	4419      	add	r1, r3
}
    b260:	b006      	add	sp, #24
    b262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
    b266:	f01e bde6 	b.w	29e36 <uart_tx.constprop.0>
    b26a:	bf00      	nop
    b26c:	2000a324 	.word	0x2000a324
    b270:	2000a320 	.word	0x2000a320
    b274:	20008c80 	.word	0x20008c80
    b278:	00030f84 	.word	0x00030f84
    b27c:	000329f2 	.word	0x000329f2
    b280:	00031584 	.word	0x00031584
    b284:	20021b2e 	.word	0x20021b2e
    b288:	000326d4 	.word	0x000326d4
    b28c:	20009228 	.word	0x20009228
    b290:	20008c64 	.word	0x20008c64

0000b294 <shoot_minute_save_thread>:
void shoot_minute_save_thread(void){
    b294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
    b298:	f025 f83c 	bl	30314 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b29c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2a0:	fba0 0302 	umull	r0, r3, r0, r2
    b2a4:	fb02 3101 	mla	r1, r2, r1, r3
    b2a8:	0bc0      	lsrs	r0, r0, #15
   uint64_t actual_time = k_uptime_get()/1000;
    b2aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2ae:	2300      	movs	r3, #0
    b2b0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    b2b4:	0bc9      	lsrs	r1, r1, #15
    b2b6:	f7fd fdcb 	bl	8e50 <__aeabi_ldivmod>
    h = (actual_time/3600); 
    b2ba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b2be:	2300      	movs	r3, #0
   uint64_t actual_time = k_uptime_get()/1000;
    b2c0:	460d      	mov	r5, r1
    b2c2:	4606      	mov	r6, r0
    h = (actual_time/3600); 
    b2c4:	f7fd fe14 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b2c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b2cc:	fb03 f100 	mul.w	r1, r3, r0
    b2d0:	1a70      	subs	r0, r6, r1
    b2d2:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b2d6:	223c      	movs	r2, #60	; 0x3c
    b2d8:	2300      	movs	r3, #0
    b2da:	f7fd fe09 	bl	8ef0 <__aeabi_uldivmod>
    b2de:	4605      	mov	r5, r0
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b2e0:	4f22      	ldr	r7, [pc, #136]	; (b36c <shoot_minute_save_thread+0xd8>)
    b2e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    b2e6:	f025 f815 	bl	30314 <z_impl_k_uptime_ticks>
    b2ea:	fba0 4306 	umull	r4, r3, r0, r6
    b2ee:	fb06 3101 	mla	r1, r6, r1, r3
    b2f2:	0be4      	lsrs	r4, r4, #15
    actual_time = k_uptime_get()/1000;
    b2f4:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    b2f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2fc:	2300      	movs	r3, #0
    b2fe:	0bc9      	lsrs	r1, r1, #15
    b300:	f7fd fda6 	bl	8e50 <__aeabi_ldivmod>
	h = (actual_time/3600); 
    b304:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b308:	2300      	movs	r3, #0
    actual_time = k_uptime_get()/1000;
    b30a:	4604      	mov	r4, r0
    b30c:	468a      	mov	sl, r1
	m = (actual_time -(3600*h))/60;
    b30e:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	h = (actual_time/3600); 
    b312:	f7fd fded 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b316:	fb08 f800 	mul.w	r8, r8, r0
	h = (actual_time/3600); 
    b31a:	4681      	mov	r9, r0
	m = (actual_time -(3600*h))/60;
    b31c:	ebb4 0008 	subs.w	r0, r4, r8
    b320:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b324:	eb6a 71e8 	sbc.w	r1, sl, r8, asr #31
    b328:	2300      	movs	r3, #0
    b32a:	f7fd fde1 	bl	8ef0 <__aeabi_uldivmod>
   if (m==(last_minute+1)){
    b32e:	1c6a      	adds	r2, r5, #1
    b330:	4282      	cmp	r2, r0
    b332:	d1d8      	bne.n	b2e6 <shoot_minute_save_thread+0x52>
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b334:	233c      	movs	r3, #60	; 0x3c
        if (m==59){last_minute=-1;}
    b336:	2a3b      	cmp	r2, #59	; 0x3b
    b338:	bf14      	ite	ne
    b33a:	4615      	movne	r5, r2
    b33c:	f04f 35ff 	moveq.w	r5, #4294967295
	s = (actual_time -(3600*h)-(m*60));
    b340:	eba4 0408 	sub.w	r4, r4, r8
		if (h==24){h=0;} // only up to 23:59:59h
    b344:	f1b9 0f18 	cmp.w	r9, #24
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b348:	fb03 4312 	mls	r3, r3, r2, r4
    b34c:	bf14      	ite	ne
    b34e:	4649      	movne	r1, r9
    b350:	2100      	moveq	r1, #0
    b352:	4638      	mov	r0, r7
    b354:	f01e ffdb 	bl	2a30e <printk>
        feed_circular_buffer();
    b358:	f000 fbda 	bl	bb10 <feed_circular_buffer>
		print_current_position_cb(C_Buffer_Current_Position);
    b35c:	4b04      	ldr	r3, [pc, #16]	; (b370 <shoot_minute_save_thread+0xdc>)
    b35e:	6818      	ldr	r0, [r3, #0]
    b360:	f000 fd0c 	bl	bd7c <print_current_position_cb>
		printk(" \n");
    b364:	4803      	ldr	r0, [pc, #12]	; (b374 <shoot_minute_save_thread+0xe0>)
    b366:	f01e ffd2 	bl	2a30e <printk>
    b36a:	e7ba      	b.n	b2e2 <shoot_minute_save_thread+0x4e>
    b36c:	00032a10 	.word	0x00032a10
    b370:	20021468 	.word	0x20021468
    b374:	00032e44 	.word	0x00032e44

0000b378 <ble_write_thread>:
{
    b378:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    b37a:	f04f 32ff 	mov.w	r2, #4294967295
    b37e:	f04f 33ff 	mov.w	r3, #4294967295
    b382:	480d      	ldr	r0, [pc, #52]	; (b3b8 <ble_write_thread+0x40>)
    b384:	f01e fd5f 	bl	29e46 <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    b388:	4d0c      	ldr	r5, [pc, #48]	; (b3bc <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    b38a:	4e0d      	ldr	r6, [pc, #52]	; (b3c0 <ble_write_thread+0x48>)
    b38c:	f04f 32ff 	mov.w	r2, #4294967295
    b390:	f04f 33ff 	mov.w	r3, #4294967295
    b394:	4628      	mov	r0, r5
    b396:	f01a f899 	bl	254cc <z_impl_k_queue_get>
    b39a:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len)) {
    b39c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b39e:	1d01      	adds	r1, r0, #4
    b3a0:	2000      	movs	r0, #0
    b3a2:	f005 f907 	bl	105b4 <bt_nus_send>
    b3a6:	b110      	cbz	r0, b3ae <ble_write_thread+0x36>
			printk("Falha aqui- Failed to send data over BLE connection");
    b3a8:	4630      	mov	r0, r6
    b3aa:	f01e ffb0 	bl	2a30e <printk>
		k_free(buf);
    b3ae:	4620      	mov	r0, r4
    b3b0:	f025 f89f 	bl	304f2 <k_free>
	for (;;) {
    b3b4:	e7ea      	b.n	b38c <ble_write_thread+0x14>
    b3b6:	bf00      	nop
    b3b8:	20008ba4 	.word	0x20008ba4
    b3bc:	20008c64 	.word	0x20008c64
    b3c0:	00032a40 	.word	0x00032a40

0000b3c4 <adc_thread>:
}




void adc_thread(void){
    b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b3c8:	4e36      	ldr	r6, [pc, #216]	; (b4a4 <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b3ca:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b4a8 <adc_thread+0xe4>
    b3ce:	b085      	sub	sp, #20
	int err;
    

    while (1) {	
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b3d0:	4c36      	ldr	r4, [pc, #216]	; (b4ac <adc_thread+0xe8>)
    b3d2:	2700      	movs	r7, #0
    b3d4:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b3d6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b4b0 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b3da:	7963      	ldrb	r3, [r4, #5]
    b3dc:	b13b      	cbz	r3, b3ee <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b3de:	2301      	movs	r3, #1
    b3e0:	7922      	ldrb	r2, [r4, #4]
    b3e2:	4093      	lsls	r3, r2
    b3e4:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b3e6:	7c23      	ldrb	r3, [r4, #16]
    b3e8:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b3ea:	7c63      	ldrb	r3, [r4, #17]
    b3ec:	7473      	strb	r3, [r6, #17]
    b3ee:	f04f 32ff 	mov.w	r2, #4294967295
    b3f2:	f04f 33ff 	mov.w	r3, #4294967295
    b3f6:	4650      	mov	r0, sl
    b3f8:	f019 fe70 	bl	250dc <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b3fc:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b3fe:	68ab      	ldr	r3, [r5, #8]
    b400:	4631      	mov	r1, r6
    b402:	4628      	mov	r0, r5
    b404:	685b      	ldr	r3, [r3, #4]
    b406:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b408:	7922      	ldrb	r2, [r4, #4]
    b40a:	f9b8 1000 	ldrsh.w	r1, [r8]
    b40e:	4b29      	ldr	r3, [pc, #164]	; (b4b4 <adc_thread+0xf0>)
    b410:	9201      	str	r2, [sp, #4]
    b412:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

           if (flag==1){
    b416:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b4b8 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b41a:	4650      	mov	r0, sl
    b41c:	f019 ff2e 	bl	2527c <z_impl_k_mutex_unlock>
    b420:	f8d9 3000 	ldr.w	r3, [r9]
    b424:	9a01      	ldr	r2, [sp, #4]
    b426:	2b01      	cmp	r3, #1
    b428:	d12d      	bne.n	b486 <adc_thread+0xc2>
			printk("- %s, channel %d: ",adc_channels[i].dev->name,adc_channels[i].channel_id);
    b42a:	6829      	ldr	r1, [r5, #0]
    b42c:	4823      	ldr	r0, [pc, #140]	; (b4bc <adc_thread+0xf8>)
    b42e:	f01e ff6e 	bl	2a30e <printk>
			printk("%"PRId16, buf_adc);
    b432:	f9b8 1000 	ldrsh.w	r1, [r8]
    b436:	4822      	ldr	r0, [pc, #136]	; (b4c0 <adc_thread+0xfc>)
    b438:	f01e ff69 	bl	2a30e <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b43c:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf_adc;
    b43e:	f9b8 5000 	ldrsh.w	r5, [r8]
    b442:	b1e3      	cbz	r3, b47e <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b444:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b446:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b448:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b44c:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b44e:	bf0a      	itet	eq
    b450:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b452:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b454:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b456:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b458:	bf08      	it	eq
    b45a:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b45c:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b45e:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b460:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b462:	bf44      	itt	mi
    b464:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b468:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b46a:	79a0      	ldrb	r0, [r4, #6]
    b46c:	a903      	add	r1, sp, #12
    b46e:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b470:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b472:	f010 f9c3 	bl	1b7fc <adc_gain_invert>
	if (ret == 0) {
    b476:	b910      	cbnz	r0, b47e <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b478:	9d03      	ldr	r5, [sp, #12]
    b47a:	9b01      	ldr	r3, [sp, #4]
    b47c:	411d      	asrs	r5, r3
			adc_raw_to_millivolts_dt(&adc_channels[i],&val_mv);
			printk(" = %"PRId32" mV\n", val_mv);
    b47e:	4629      	mov	r1, r5
    b480:	4810      	ldr	r0, [pc, #64]	; (b4c4 <adc_thread+0x100>)
    b482:	f01e ff44 	bl	2a30e <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b486:	3701      	adds	r7, #1
    b488:	2f06      	cmp	r7, #6
    b48a:	f104 0414 	add.w	r4, r4, #20
    b48e:	d1a4      	bne.n	b3da <adc_thread+0x16>
		   }
			
		}
        flag=0;
    b490:	2300      	movs	r3, #0
    b492:	f8c9 3000 	str.w	r3, [r9]
	return z_impl_k_sleep(timeout);
    b496:	2100      	movs	r1, #0
    b498:	f640 40cd 	movw	r0, #3277	; 0xccd
    b49c:	f01b ff74 	bl	27388 <z_impl_k_sleep>
    while (1) {	
    b4a0:	e796      	b.n	b3d0 <adc_thread+0xc>
    b4a2:	bf00      	nop
    b4a4:	200083e4 	.word	0x200083e4
    b4a8:	2000a334 	.word	0x2000a334
    b4ac:	00031810 	.word	0x00031810
    b4b0:	20021b10 	.word	0x20021b10
    b4b4:	20021b00 	.word	0x20021b00
    b4b8:	2000a330 	.word	0x2000a330
    b4bc:	00032a74 	.word	0x00032a74
    b4c0:	00032a87 	.word	0x00032a87
    b4c4:	00032a8b 	.word	0x00032a8b

0000b4c8 <button_pressed_4>:
void button_pressed_4(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4c8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b4ca:	4805      	ldr	r0, [pc, #20]	; (b4e0 <button_pressed_4+0x18>)
    b4cc:	f01a f868 	bl	255a0 <z_impl_k_sem_give>
    b4d0:	f023 f997 	bl	2e802 <sys_clock_cycle_get_32>
}
    b4d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b4d8:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b4da:	4802      	ldr	r0, [pc, #8]	; (b4e4 <button_pressed_4+0x1c>)
    b4dc:	f01e bf17 	b.w	2a30e <printk>
    b4e0:	20008bd4 	.word	0x20008bd4
    b4e4:	00032a95 	.word	0x00032a95

0000b4e8 <button_pressed_3>:
void button_pressed_3(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4e8:	b508      	push	{r3, lr}
    b4ea:	4805      	ldr	r0, [pc, #20]	; (b500 <button_pressed_3+0x18>)
    b4ec:	f01a f858 	bl	255a0 <z_impl_k_sem_give>
    b4f0:	f023 f987 	bl	2e802 <sys_clock_cycle_get_32>
}
    b4f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b4f8:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b4fa:	4802      	ldr	r0, [pc, #8]	; (b504 <button_pressed_3+0x1c>)
    b4fc:	f01e bf07 	b.w	2a30e <printk>
    b500:	20008bbc 	.word	0x20008bbc
    b504:	00032aad 	.word	0x00032aad

0000b508 <button_pressed_2>:
void button_pressed_2(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b508:	b508      	push	{r3, lr}
    b50a:	4807      	ldr	r0, [pc, #28]	; (b528 <button_pressed_2+0x20>)
    b50c:	f01a f848 	bl	255a0 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b510:	2101      	movs	r1, #1
    b512:	4806      	ldr	r0, [pc, #24]	; (b52c <button_pressed_2+0x24>)
    b514:	f7ff fcd0 	bl	aeb8 <gpio_pin_set_dt.isra.0>
    b518:	f023 f973 	bl	2e802 <sys_clock_cycle_get_32>
}
    b51c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b520:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b522:	4803      	ldr	r0, [pc, #12]	; (b530 <button_pressed_2+0x28>)
    b524:	f01e bef3 	b.w	2a30e <printk>
    b528:	20008c1c 	.word	0x20008c1c
    b52c:	00031890 	.word	0x00031890
    b530:	00032ac5 	.word	0x00032ac5

0000b534 <uart2_teste>:
void uart2_teste(void){
    b534:	b510      	push	{r4, lr}
   buf = k_malloc(sizeof(*buf));
    b536:	2030      	movs	r0, #48	; 0x30
    b538:	f024 ffe2 	bl	30500 <k_malloc>
    buf->data[0] = 0x41;
    b53c:	f244 2341 	movw	r3, #16961	; 0x4241
    buf->len=3;
    b540:	2203      	movs	r2, #3
    buf->data[0] = 0x41;
    b542:	8083      	strh	r3, [r0, #4]
	buf->data[2] = 0x43;
    b544:	2343      	movs	r3, #67	; 0x43
   buf = k_malloc(sizeof(*buf));
    b546:	4604      	mov	r4, r0
	buf->data[2] = 0x43;
    b548:	7183      	strb	r3, [r0, #6]
    buf->len=3;
    b54a:	8582      	strh	r2, [r0, #44]	; 0x2c
   uart_tx(uart_2, buf->data, buf->len, SYS_FOREVER_MS);
    b54c:	1d01      	adds	r1, r0, #4
    b54e:	4804      	ldr	r0, [pc, #16]	; (b560 <uart2_teste+0x2c>)
    b550:	f01e fc71 	bl	29e36 <uart_tx.constprop.0>
   k_free(buf);
    b554:	4620      	mov	r0, r4
}
    b556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   k_free(buf);
    b55a:	f024 bfca 	b.w	304f2 <k_free>
    b55e:	bf00      	nop
    b560:	00030f6c 	.word	0x00030f6c

0000b564 <send_bluetooth>:
{
    b564:	b084      	sub	sp, #16
    b566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b56a:	ac06      	add	r4, sp, #24
    b56c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b570:	203d      	movs	r0, #61	; 0x3d
    uint32_t comprimento=buf.len;
    b572:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b576:	f024 ffc3 	bl	30500 <k_malloc>
    int k=0;
    b57a:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b57c:	4605      	mov	r5, r0
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b57e:	f8df 8054 	ldr.w	r8, [pc, #84]	; b5d4 <send_bluetooth+0x70>
    while(k<comprimento-1){
    b582:	1e77      	subs	r7, r6, #1
    b584:	42a7      	cmp	r7, r4
    b586:	d91d      	bls.n	b5c4 <send_bluetooth+0x60>
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b588:	42b4      	cmp	r4, r6
    b58a:	d301      	bcc.n	b590 <send_bluetooth+0x2c>
    b58c:	2200      	movs	r2, #0
    b58e:	e00f      	b.n	b5b0 <send_bluetooth+0x4c>
    b590:	2200      	movs	r2, #0
    b592:	1e6b      	subs	r3, r5, #1
       data[small_pkt]=buf.data[k];
    b594:	f104 0118 	add.w	r1, r4, #24
    b598:	4469      	add	r1, sp
       small_pkt++;
    b59a:	3201      	adds	r2, #1
	   *(packet_data+small_pkt) = buf.data[k];
    b59c:	7909      	ldrb	r1, [r1, #4]
       small_pkt++;
    b59e:	b292      	uxth	r2, r2
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5a0:	2a3d      	cmp	r2, #61	; 0x3d
	   *(packet_data+small_pkt) = buf.data[k];
    b5a2:	f803 1f01 	strb.w	r1, [r3, #1]!
       k++;
    b5a6:	f104 0401 	add.w	r4, r4, #1
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5aa:	d001      	beq.n	b5b0 <send_bluetooth+0x4c>
    b5ac:	42a6      	cmp	r6, r4
    b5ae:	d8f1      	bhi.n	b594 <send_bluetooth+0x30>
           if (bt_nus_send(NULL, packet_data ,small_pkt)) {
    b5b0:	4629      	mov	r1, r5
    b5b2:	2000      	movs	r0, #0
    b5b4:	f004 fffe 	bl	105b4 <bt_nus_send>
    b5b8:	2800      	cmp	r0, #0
    b5ba:	d0e3      	beq.n	b584 <send_bluetooth+0x20>
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b5bc:	4640      	mov	r0, r8
    b5be:	f01e fea6 	bl	2a30e <printk>
    b5c2:	e7df      	b.n	b584 <send_bluetooth+0x20>
     k_free(packet_data);
    b5c4:	4628      	mov	r0, r5
    b5c6:	f024 ff94 	bl	304f2 <k_free>
}
    b5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5ce:	2000      	movs	r0, #0
    b5d0:	b004      	add	sp, #16
    b5d2:	4770      	bx	lr
    b5d4:	00032add 	.word	0x00032add

0000b5d8 <send_protobuf_thread>:
void send_protobuf_thread(void){
    b5d8:	b510      	push	{r4, lr}
		    k_sem_take(&send_proto,K_FOREVER);
    b5da:	4c05      	ldr	r4, [pc, #20]	; (b5f0 <send_protobuf_thread+0x18>)
    b5dc:	f04f 32ff 	mov.w	r2, #4294967295
    b5e0:	f04f 33ff 	mov.w	r3, #4294967295
    b5e4:	4620      	mov	r0, r4
    b5e6:	f01e fc2e 	bl	29e46 <k_sem_take.constprop.0.isra.0>
		    send_protobuf();
    b5ea:	f01e fc34 	bl	29e56 <send_protobuf>
   while(1){
    b5ee:	e7f5      	b.n	b5dc <send_protobuf_thread+0x4>
    b5f0:	20008c4c 	.word	0x20008c4c

0000b5f4 <configure_all_buttons>:
void configure_all_buttons(void){
    b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b5f6:	4c30      	ldr	r4, [pc, #192]	; (b6b8 <configure_all_buttons+0xc4>)
    b5f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b5fc:	4620      	mov	r0, r4
    b5fe:	f7ff fd23 	bl	b048 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b602:	4620      	mov	r0, r4
    b604:	f7ff fa84 	bl	ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b608:	492c      	ldr	r1, [pc, #176]	; (b6bc <configure_all_buttons+0xc8>)
    b60a:	4b2d      	ldr	r3, [pc, #180]	; (b6c0 <configure_all_buttons+0xcc>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b60c:	4c2d      	ldr	r4, [pc, #180]	; (b6c4 <configure_all_buttons+0xd0>)
    b60e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b610:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b614:	4620      	mov	r0, r4
    b616:	608b      	str	r3, [r1, #8]
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b618:	4d2b      	ldr	r5, [pc, #172]	; (b6c8 <configure_all_buttons+0xd4>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b61a:	f01e fc16 	bl	29e4a <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b61e:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b620:	4f2a      	ldr	r7, [pc, #168]	; (b6cc <configure_all_buttons+0xd8>)
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b622:	2217      	movs	r2, #23
    b624:	4631      	mov	r1, r6
    b626:	4628      	mov	r0, r5
    b628:	f01e fe71 	bl	2a30e <printk>
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b62c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b630:	4638      	mov	r0, r7
    b632:	f7ff fd09 	bl	b048 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b636:	4638      	mov	r0, r7
    b638:	f7ff fa6a 	bl	ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b63c:	4924      	ldr	r1, [pc, #144]	; (b6d0 <configure_all_buttons+0xdc>)
    b63e:	4b25      	ldr	r3, [pc, #148]	; (b6d4 <configure_all_buttons+0xe0>)
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b640:	4620      	mov	r0, r4
    b642:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b648:	4f23      	ldr	r7, [pc, #140]	; (b6d8 <configure_all_buttons+0xe4>)
    b64a:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b64c:	f01e fbfd 	bl	29e4a <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b650:	2218      	movs	r2, #24
    b652:	4631      	mov	r1, r6
    b654:	4628      	mov	r0, r5
    b656:	f01e fe5a 	bl	2a30e <printk>
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b65a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b65e:	4638      	mov	r0, r7
    b660:	f7ff fcf2 	bl	b048 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON3_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b664:	4638      	mov	r0, r7
    b666:	f7ff fa53 	bl	ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b66a:	491c      	ldr	r1, [pc, #112]	; (b6dc <configure_all_buttons+0xe8>)
    b66c:	4b1c      	ldr	r3, [pc, #112]	; (b6e0 <configure_all_buttons+0xec>)
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b66e:	4620      	mov	r0, r4
    b670:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b672:	f44f 7380 	mov.w	r3, #256	; 0x100
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b676:	4f1b      	ldr	r7, [pc, #108]	; (b6e4 <configure_all_buttons+0xf0>)
    b678:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b67a:	f01e fbe6 	bl	29e4a <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b67e:	2208      	movs	r2, #8
    b680:	4631      	mov	r1, r6
    b682:	4628      	mov	r0, r5
    b684:	f01e fe43 	bl	2a30e <printk>
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b688:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b68c:	4638      	mov	r0, r7
    b68e:	f7ff fcdb 	bl	b048 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON4_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b692:	4638      	mov	r0, r7
    b694:	f7ff fa3c 	bl	ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b698:	4913      	ldr	r1, [pc, #76]	; (b6e8 <configure_all_buttons+0xf4>)
    b69a:	4b14      	ldr	r3, [pc, #80]	; (b6ec <configure_all_buttons+0xf8>)
 gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b69c:	4620      	mov	r0, r4
    b69e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b6a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    b6a4:	608b      	str	r3, [r1, #8]
    b6a6:	f01e fbd0 	bl	29e4a <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b6aa:	4631      	mov	r1, r6
    b6ac:	4628      	mov	r0, r5
}
    b6ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b6b2:	2209      	movs	r2, #9
    b6b4:	f01e be2b 	b.w	2a30e <printk>
    b6b8:	000318d8 	.word	0x000318d8
    b6bc:	2000a390 	.word	0x2000a390
    b6c0:	0000af1d 	.word	0x0000af1d
    b6c4:	00030f24 	.word	0x00030f24
    b6c8:	00032b01 	.word	0x00032b01
    b6cc:	000318d0 	.word	0x000318d0
    b6d0:	2000a384 	.word	0x2000a384
    b6d4:	0000b509 	.word	0x0000b509
    b6d8:	000318c8 	.word	0x000318c8
    b6dc:	2000a378 	.word	0x2000a378
    b6e0:	0000b4e9 	.word	0x0000b4e9
    b6e4:	000318c0 	.word	0x000318c0
    b6e8:	2000a36c 	.word	0x2000a36c
    b6ec:	0000b4c9 	.word	0x0000b4c9

0000b6f0 <configure_digital_inputs>:
void configure_digital_inputs(void){
    b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT );
    b6f2:	4c2e      	ldr	r4, [pc, #184]	; (b7ac <configure_digital_inputs+0xbc>)
    b6f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b6f8:	4620      	mov	r0, r4
    b6fa:	f7ff fca5 	bl	b048 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 4 Value:%d \n",gpio_pin_get_dt(DIG_0_ADR));
    b6fe:	4620      	mov	r0, r4
    b700:	f7ff f8fe 	bl	a900 <gpio_pin_get_dt>
    b704:	4601      	mov	r1, r0
    b706:	482a      	ldr	r0, [pc, #168]	; (b7b0 <configure_digital_inputs+0xc0>)
    b708:	f01e fe01 	bl	2a30e <printk>
 gpio_pin_interrupt_configure_dt(DIG_0_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b70c:	4620      	mov	r0, r4
    b70e:	f7ff f9ff 	bl	ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b712:	4928      	ldr	r1, [pc, #160]	; (b7b4 <configure_digital_inputs+0xc4>)
    b714:	4b28      	ldr	r3, [pc, #160]	; (b7b8 <configure_digital_inputs+0xc8>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b716:	4c29      	ldr	r4, [pc, #164]	; (b7bc <configure_digital_inputs+0xcc>)
    b718:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b71a:	2310      	movs	r3, #16
    b71c:	4620      	mov	r0, r4
    b71e:	608b      	str	r3, [r1, #8]
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b720:	4d27      	ldr	r5, [pc, #156]	; (b7c0 <configure_digital_inputs+0xd0>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b722:	f01e fb92 	bl	29e4a <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b726:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b728:	4f26      	ldr	r7, [pc, #152]	; (b7c4 <configure_digital_inputs+0xd4>)
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b72a:	2204      	movs	r2, #4
    b72c:	4631      	mov	r1, r6
    b72e:	4628      	mov	r0, r5
    b730:	f01e fded 	bl	2a30e <printk>
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b734:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b738:	4638      	mov	r0, r7
    b73a:	f7ff fc85 	bl	b048 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 5 Value:%d \n",gpio_pin_get_dt(DIG_1_ADR));
    b73e:	4638      	mov	r0, r7
    b740:	f7ff f8de 	bl	a900 <gpio_pin_get_dt>
    b744:	4601      	mov	r1, r0
    b746:	4820      	ldr	r0, [pc, #128]	; (b7c8 <configure_digital_inputs+0xd8>)
    b748:	f01e fde1 	bl	2a30e <printk>
 gpio_pin_interrupt_configure_dt(DIG_1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b74c:	4638      	mov	r0, r7
    b74e:	f7ff f9df 	bl	ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b752:	491e      	ldr	r1, [pc, #120]	; (b7cc <configure_digital_inputs+0xdc>)
    b754:	4b1e      	ldr	r3, [pc, #120]	; (b7d0 <configure_digital_inputs+0xe0>)
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b756:	4f1f      	ldr	r7, [pc, #124]	; (b7d4 <configure_digital_inputs+0xe4>)
    b758:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b75a:	2320      	movs	r3, #32
 gpio_add_callback(DIG_1.port, DIG_1_CB);
    b75c:	4620      	mov	r0, r4
    b75e:	608b      	str	r3, [r1, #8]
    b760:	f01e fb73 	bl	29e4a <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b764:	2205      	movs	r2, #5
    b766:	4631      	mov	r1, r6
    b768:	4628      	mov	r0, r5
    b76a:	f01e fdd0 	bl	2a30e <printk>
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b76e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b772:	4638      	mov	r0, r7
    b774:	f7ff fc68 	bl	b048 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 6 Value:%d \n",gpio_pin_get_dt(DIG_2_ADR));
    b778:	4638      	mov	r0, r7
    b77a:	f7ff f8c1 	bl	a900 <gpio_pin_get_dt>
    b77e:	4601      	mov	r1, r0
    b780:	4815      	ldr	r0, [pc, #84]	; (b7d8 <configure_digital_inputs+0xe8>)
    b782:	f01e fdc4 	bl	2a30e <printk>
 gpio_pin_interrupt_configure_dt(DIG_2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b786:	4638      	mov	r0, r7
    b788:	f7ff f9c2 	bl	ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b78c:	4913      	ldr	r1, [pc, #76]	; (b7dc <configure_digital_inputs+0xec>)
    b78e:	4b14      	ldr	r3, [pc, #80]	; (b7e0 <configure_digital_inputs+0xf0>)
 gpio_add_callback(DIG_2.port, DIG_2_CB);
    b790:	4620      	mov	r0, r4
    b792:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b794:	2340      	movs	r3, #64	; 0x40
    b796:	608b      	str	r3, [r1, #8]
    b798:	f01e fb57 	bl	29e4a <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b79c:	4631      	mov	r1, r6
    b79e:	4628      	mov	r0, r5
}
    b7a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b7a4:	2206      	movs	r2, #6
    b7a6:	f01e bdb2 	b.w	2a30e <printk>
    b7aa:	bf00      	nop
    b7ac:	000318b8 	.word	0x000318b8
    b7b0:	00032b1d 	.word	0x00032b1d
    b7b4:	2000a360 	.word	0x2000a360
    b7b8:	0000a961 	.word	0x0000a961
    b7bc:	00030f0c 	.word	0x00030f0c
    b7c0:	00032b35 	.word	0x00032b35
    b7c4:	000318b0 	.word	0x000318b0
    b7c8:	00032b58 	.word	0x00032b58
    b7cc:	2000a354 	.word	0x2000a354
    b7d0:	0000a985 	.word	0x0000a985
    b7d4:	000318a8 	.word	0x000318a8
    b7d8:	00032b70 	.word	0x00032b70
    b7dc:	2000a348 	.word	0x2000a348
    b7e0:	0000a9a9 	.word	0x0000a9a9

0000b7e4 <configure_led>:
void configure_led(void){
    b7e4:	b508      	push	{r3, lr}
 gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    b7e6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7ea:	480a      	ldr	r0, [pc, #40]	; (b814 <configure_led+0x30>)
    b7ec:	f7ff fc2c 	bl	b048 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    b7f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7f4:	4808      	ldr	r0, [pc, #32]	; (b818 <configure_led+0x34>)
    b7f6:	f7ff fc27 	bl	b048 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    b7fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7fe:	4807      	ldr	r0, [pc, #28]	; (b81c <configure_led+0x38>)
    b800:	f7ff fc22 	bl	b048 <gpio_pin_configure_dt.isra.0>
}
    b804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    b808:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b80c:	4804      	ldr	r0, [pc, #16]	; (b820 <configure_led+0x3c>)
    b80e:	f7ff bc1b 	b.w	b048 <gpio_pin_configure_dt.isra.0>
    b812:	bf00      	nop
    b814:	000318a0 	.word	0x000318a0
    b818:	00031898 	.word	0x00031898
    b81c:	00031890 	.word	0x00031890
    b820:	00031888 	.word	0x00031888

0000b824 <turn_off_all_leds>:
void turn_off_all_leds(void){
    b824:	b508      	push	{r3, lr}
       gpio_pin_set_dt(LED1, OFF);
    b826:	2100      	movs	r1, #0
    b828:	4808      	ldr	r0, [pc, #32]	; (b84c <turn_off_all_leds+0x28>)
    b82a:	f7ff fb45 	bl	aeb8 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED2, OFF);
    b82e:	2100      	movs	r1, #0
    b830:	4807      	ldr	r0, [pc, #28]	; (b850 <turn_off_all_leds+0x2c>)
    b832:	f7ff fb41 	bl	aeb8 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED3, OFF);
    b836:	2100      	movs	r1, #0
    b838:	4806      	ldr	r0, [pc, #24]	; (b854 <turn_off_all_leds+0x30>)
    b83a:	f7ff fb3d 	bl	aeb8 <gpio_pin_set_dt.isra.0>
}
    b83e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       gpio_pin_set_dt(LED4, OFF);
    b842:	2100      	movs	r1, #0
    b844:	4804      	ldr	r0, [pc, #16]	; (b858 <turn_off_all_leds+0x34>)
    b846:	f7ff bb37 	b.w	aeb8 <gpio_pin_set_dt.isra.0>
    b84a:	bf00      	nop
    b84c:	000318a0 	.word	0x000318a0
    b850:	00031898 	.word	0x00031898
    b854:	00031890 	.word	0x00031890
    b858:	00031888 	.word	0x00031888

0000b85c <configure_adc>:
void configure_adc(void){
    b85c:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b85e:	2500      	movs	r5, #0
    b860:	4c12      	ldr	r4, [pc, #72]	; (b8ac <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    b862:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b866:	f024 fc24 	bl	300b2 <z_device_is_ready>
    b86a:	b920      	cbnz	r0, b876 <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    b86c:	4810      	ldr	r0, [pc, #64]	; (b8b0 <configure_adc+0x54>)
}
    b86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    b872:	f01e bd4c 	b.w	2a30e <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b876:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b87a:	b16b      	cbz	r3, b898 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    b87c:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    b880:	6883      	ldr	r3, [r0, #8]
    b882:	4621      	mov	r1, r4
    b884:	681b      	ldr	r3, [r3, #0]
    b886:	4798      	blx	r3
		if (err < 0) {
    b888:	1e02      	subs	r2, r0, #0
    b88a:	da08      	bge.n	b89e <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b88c:	4629      	mov	r1, r5
}
    b88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    b892:	4808      	ldr	r0, [pc, #32]	; (b8b4 <configure_adc+0x58>)
    b894:	f01e bd3b 	b.w	2a30e <printk>
		return -ENOTSUP;
    b898:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b89c:	e7f6      	b.n	b88c <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b89e:	3501      	adds	r5, #1
    b8a0:	2d06      	cmp	r5, #6
    b8a2:	f104 0414 	add.w	r4, r4, #20
    b8a6:	d1dc      	bne.n	b862 <configure_adc+0x6>
}
    b8a8:	bd38      	pop	{r3, r4, r5, pc}
    b8aa:	bf00      	nop
    b8ac:	00031816 	.word	0x00031816
    b8b0:	00032b88 	.word	0x00032b88
    b8b4:	00032ba9 	.word	0x00032ba9

0000b8b8 <main>:
{
    b8b8:	b570      	push	{r4, r5, r6, lr}
    b8ba:	b08a      	sub	sp, #40	; 0x28
	return z_impl_k_mutex_init(mutex);
    b8bc:	4862      	ldr	r0, [pc, #392]	; (ba48 <main+0x190>)
    b8be:	f024 fc4b 	bl	30158 <z_impl_k_mutex_init>
	configure_led();
    b8c2:	f7ff ff8f 	bl	b7e4 <configure_led>
	turn_off_all_leds();
    b8c6:	f7ff ffad 	bl	b824 <turn_off_all_leds>
 	configure_all_buttons();
    b8ca:	f7ff fe93 	bl	b5f4 <configure_all_buttons>
	configure_digital_inputs();
    b8ce:	f7ff ff0f 	bl	b6f0 <configure_digital_inputs>
	configure_adc();
    b8d2:	f7ff ffc3 	bl	b85c <configure_adc>
    b8d6:	4d5d      	ldr	r5, [pc, #372]	; (ba4c <main+0x194>)
    b8d8:	4628      	mov	r0, r5
    b8da:	f024 fbea 	bl	300b2 <z_device_is_ready>
	if (!device_is_ready(uart)) {
    b8de:	b1d0      	cbz	r0, b916 <main+0x5e>
	rx = k_malloc(sizeof(*rx));
    b8e0:	2030      	movs	r0, #48	; 0x30
    b8e2:	f024 fe0d 	bl	30500 <k_malloc>
	if (rx) {
    b8e6:	4604      	mov	r4, r0
    b8e8:	b1a8      	cbz	r0, b916 <main+0x5e>
		rx->len = 0;
    b8ea:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    b8ec:	4958      	ldr	r1, [pc, #352]	; (ba50 <main+0x198>)
		rx->len = 0;
    b8ee:	8586      	strh	r6, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
    b8f0:	4858      	ldr	r0, [pc, #352]	; (ba54 <main+0x19c>)
    b8f2:	f01a fad9 	bl	25ea8 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b8f6:	68ab      	ldr	r3, [r5, #8]
    b8f8:	681b      	ldr	r3, [r3, #0]
    b8fa:	b973      	cbnz	r3, b91a <main+0x62>
		k_free(rx);
    b8fc:	4620      	mov	r0, r4
    b8fe:	f024 fdf8 	bl	304f2 <k_free>
		LOG_ERR("Cannot initialize UART callback");
    b902:	4b55      	ldr	r3, [pc, #340]	; (ba58 <main+0x1a0>)
    b904:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b908:	9309      	str	r3, [sp, #36]	; 0x24
    b90a:	2302      	movs	r3, #2
    b90c:	4853      	ldr	r0, [pc, #332]	; (ba5c <main+0x1a4>)
    b90e:	aa08      	add	r2, sp, #32
    b910:	9308      	str	r3, [sp, #32]
    b912:	f01e fa85 	bl	29e20 <z_log_msg_static_create.constprop.0>
		error();
    b916:	f01e fab4 	bl	29e82 <error>
	return api->callback_set(dev, callback, user_data);
    b91a:	4632      	mov	r2, r6
    b91c:	4628      	mov	r0, r5
    b91e:	4950      	ldr	r1, [pc, #320]	; (ba60 <main+0x1a8>)
    b920:	4798      	blx	r3
	if (err) {
    b922:	2800      	cmp	r0, #0
    b924:	d1ea      	bne.n	b8fc <main+0x44>
	tx = k_malloc(sizeof(*tx));
    b926:	2030      	movs	r0, #48	; 0x30
    b928:	f024 fdea 	bl	30500 <k_malloc>
	if (tx) {
    b92c:	4606      	mov	r6, r0
    b92e:	2800      	cmp	r0, #0
    b930:	d0f1      	beq.n	b916 <main+0x5e>
		pos = snprintf(tx->data, sizeof(tx->data),
    b932:	1d03      	adds	r3, r0, #4
    b934:	4618      	mov	r0, r3
    b936:	494b      	ldr	r1, [pc, #300]	; (ba64 <main+0x1ac>)
    b938:	f024 ff74 	bl	30824 <strcpy>
		tx->len = pos;
    b93c:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b93e:	4601      	mov	r1, r0
		tx->len = pos;
    b940:	85b2      	strh	r2, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b942:	4628      	mov	r0, r5
    b944:	f01e fa77 	bl	29e36 <uart_tx.constprop.0>
	if (err) {
    b948:	4601      	mov	r1, r0
    b94a:	b118      	cbz	r0, b954 <main+0x9c>
		printf("Cannot display welcome message (err: %d)", err);
    b94c:	4846      	ldr	r0, [pc, #280]	; (ba68 <main+0x1b0>)
    b94e:	f01d fab5 	bl	28ebc <iprintf>
	if (err) {
    b952:	e7e0      	b.n	b916 <main+0x5e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
    b954:	1d21      	adds	r1, r4, #4
    b956:	4628      	mov	r0, r5
    b958:	f01e fa65 	bl	29e26 <uart_rx_enable.constprop.0>
	if (err) {
    b95c:	4604      	mov	r4, r0
    b95e:	2800      	cmp	r0, #0
    b960:	d1d9      	bne.n	b916 <main+0x5e>
    b962:	4e42      	ldr	r6, [pc, #264]	; (ba6c <main+0x1b4>)
    b964:	4630      	mov	r0, r6
    b966:	f024 fba4 	bl	300b2 <z_device_is_ready>
	if (!device_is_ready(uart_2)) {
    b96a:	2800      	cmp	r0, #0
    b96c:	d0d3      	beq.n	b916 <main+0x5e>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b96e:	2030      	movs	r0, #48	; 0x30
    b970:	f024 fdc6 	bl	30500 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b974:	493e      	ldr	r1, [pc, #248]	; (ba70 <main+0x1b8>)
	rx_uart2->len = 0;
    b976:	8584      	strh	r4, [r0, #44]	; 0x2c
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b978:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b97a:	483e      	ldr	r0, [pc, #248]	; (ba74 <main+0x1bc>)
    b97c:	f01a fa94 	bl	25ea8 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b980:	68b3      	ldr	r3, [r6, #8]
    b982:	681b      	ldr	r3, [r3, #0]
    b984:	b11b      	cbz	r3, b98e <main+0xd6>
	return api->callback_set(dev, callback, user_data);
    b986:	4622      	mov	r2, r4
    b988:	4630      	mov	r0, r6
    b98a:	493b      	ldr	r1, [pc, #236]	; (ba78 <main+0x1c0>)
    b98c:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), 50);
    b98e:	4837      	ldr	r0, [pc, #220]	; (ba6c <main+0x1b4>)
    b990:	1d29      	adds	r1, r5, #4
    b992:	f01e fa48 	bl	29e26 <uart_rx_enable.constprop.0>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    b996:	4839      	ldr	r0, [pc, #228]	; (ba7c <main+0x1c4>)
    b998:	f009 fefe 	bl	15798 <bt_conn_auth_cb_register>
		if (err) {
    b99c:	b128      	cbz	r0, b9aa <main+0xf2>
			printk("Failed to register authorization callbacks.\n");
    b99e:	4838      	ldr	r0, [pc, #224]	; (ba80 <main+0x1c8>)
}
    b9a0:	b00a      	add	sp, #40	; 0x28
    b9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    b9a6:	f01e bcb2 	b.w	2a30e <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    b9aa:	4836      	ldr	r0, [pc, #216]	; (ba84 <main+0x1cc>)
    b9ac:	f009 ff0e 	bl	157cc <bt_conn_auth_info_cb_register>
		if (err) {
    b9b0:	b108      	cbz	r0, b9b6 <main+0xfe>
			printk("Failed to register authorization info callbacks.\n");
    b9b2:	4835      	ldr	r0, [pc, #212]	; (ba88 <main+0x1d0>)
    b9b4:	e7f4      	b.n	b9a0 <main+0xe8>
	err = bt_enable(NULL);
    b9b6:	f007 fd81 	bl	134bc <bt_enable>
	if (err) {
    b9ba:	2800      	cmp	r0, #0
    b9bc:	d1ab      	bne.n	b916 <main+0x5e>
	printf("Bluetooth initialized \n\r");
    b9be:	4833      	ldr	r0, [pc, #204]	; (ba8c <main+0x1d4>)
    b9c0:	f01d fa7c 	bl	28ebc <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    b9c4:	4832      	ldr	r0, [pc, #200]	; (ba90 <main+0x1d8>)
    b9c6:	f01d fa79 	bl	28ebc <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    b9ca:	4832      	ldr	r0, [pc, #200]	; (ba94 <main+0x1dc>)
    b9cc:	f01d fa76 	bl	28ebc <iprintf>
	z_impl_k_sem_give(sem);
    b9d0:	4831      	ldr	r0, [pc, #196]	; (ba98 <main+0x1e0>)
    b9d2:	f019 fde5 	bl	255a0 <z_impl_k_sem_give>
		settings_load();
    b9d6:	f01f fc53 	bl	2b280 <settings_load>
	err = bt_nus_init(&nus_cb);
    b9da:	4830      	ldr	r0, [pc, #192]	; (ba9c <main+0x1e4>)
    b9dc:	f004 fdde 	bl	1059c <bt_nus_init>
	if (err) {
    b9e0:	4601      	mov	r1, r0
    b9e2:	b128      	cbz	r0, b9f0 <main+0x138>
		printf("Failed to initialize UART service (err: %d)", err);
    b9e4:	482e      	ldr	r0, [pc, #184]	; (baa0 <main+0x1e8>)
}
    b9e6:	b00a      	add	sp, #40	; 0x28
    b9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    b9ec:	f01d ba66 	b.w	28ebc <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    b9f0:	4d2c      	ldr	r5, [pc, #176]	; (baa4 <main+0x1ec>)
    b9f2:	ac04      	add	r4, sp, #16
    b9f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b9f8:	682b      	ldr	r3, [r5, #0]
    b9fa:	2501      	movs	r5, #1
    b9fc:	6023      	str	r3, [r4, #0]
    b9fe:	2202      	movs	r2, #2
    ba00:	4b29      	ldr	r3, [pc, #164]	; (baa8 <main+0x1f0>)
    ba02:	492a      	ldr	r1, [pc, #168]	; (baac <main+0x1f4>)
    ba04:	9500      	str	r5, [sp, #0]
    ba06:	a804      	add	r0, sp, #16
    ba08:	f008 fc32 	bl	14270 <bt_le_adv_start>
	if (err) {
    ba0c:	4604      	mov	r4, r0
    ba0e:	b128      	cbz	r0, ba1c <main+0x164>
		printf("Advertising failed to start (err %d)", err);
    ba10:	4601      	mov	r1, r0
    ba12:	4827      	ldr	r0, [pc, #156]	; (bab0 <main+0x1f8>)
    ba14:	f01d fa52 	bl	28ebc <iprintf>
}
    ba18:	b00a      	add	sp, #40	; 0x28
    ba1a:	bd70      	pop	{r4, r5, r6, pc}
	flag=1;//print ad values once
    ba1c:	4b25      	ldr	r3, [pc, #148]	; (bab4 <main+0x1fc>)
    ba1e:	4e26      	ldr	r6, [pc, #152]	; (bab8 <main+0x200>)
    ba20:	601d      	str	r5, [r3, #0]
    ba22:	ad02      	add	r5, sp, #8
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba24:	3401      	adds	r4, #1
		uart2_teste();
    ba26:	f7ff fd85 	bl	b534 <uart2_teste>
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba2a:	e896 0003 	ldmia.w	r6, {r0, r1}
    ba2e:	e885 0003 	stmia.w	r5, {r0, r1}
        gpio_pin_set_dt(&led, value);
    ba32:	4628      	mov	r0, r5
    ba34:	f004 0101 	and.w	r1, r4, #1
    ba38:	f7ff fa3e 	bl	aeb8 <gpio_pin_set_dt.isra.0>
	return z_impl_k_sleep(timeout);
    ba3c:	2100      	movs	r1, #0
    ba3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ba42:	f01b fca1 	bl	27388 <z_impl_k_sleep>
	for (;;) {
    ba46:	e7ed      	b.n	ba24 <main+0x16c>
    ba48:	2000a334 	.word	0x2000a334
    ba4c:	00030f84 	.word	0x00030f84
    ba50:	0000aa5d 	.word	0x0000aa5d
    ba54:	20009228 	.word	0x20009228
    ba58:	00032bcb 	.word	0x00032bcb
    ba5c:	00031584 	.word	0x00031584
    ba60:	0000b121 	.word	0x0000b121
    ba64:	00032beb 	.word	0x00032beb
    ba68:	00032c12 	.word	0x00032c12
    ba6c:	00030f6c 	.word	0x00030f6c
    ba70:	0000aa35 	.word	0x0000aa35
    ba74:	200091f8 	.word	0x200091f8
    ba78:	00029e1f 	.word	0x00029e1f
    ba7c:	200083cc 	.word	0x200083cc
    ba80:	00032c3b 	.word	0x00032c3b
    ba84:	200083bc 	.word	0x200083bc
    ba88:	00032c68 	.word	0x00032c68
    ba8c:	00032c9a 	.word	0x00032c9a
    ba90:	00032cb3 	.word	0x00032cb3
    ba94:	00032cd4 	.word	0x00032cd4
    ba98:	20008ba4 	.word	0x20008ba4
    ba9c:	200083b0 	.word	0x200083b0
    baa0:	00032cfd 	.word	0x00032cfd
    baa4:	00031650 	.word	0x00031650
    baa8:	000317f8 	.word	0x000317f8
    baac:	00031800 	.word	0x00031800
    bab0:	00032d29 	.word	0x00032d29
    bab4:	2000a330 	.word	0x2000a330
    bab8:	00031898 	.word	0x00031898

0000babc <time_stamp_function>:
uint32_t time_stamp_function(void){
    babc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    babe:	f024 fc29 	bl	30314 <z_impl_k_uptime_ticks>
    bac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bac6:	fba0 0302 	umull	r0, r3, r0, r2
    baca:	fb02 3101 	mla	r1, r2, r1, r3
    bace:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    bad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bad4:	2300      	movs	r3, #0
    bad6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    bada:	0bc9      	lsrs	r1, r1, #15
    badc:	f7fd f9b8 	bl	8e50 <__aeabi_ldivmod>
    bae0:	4603      	mov	r3, r0
}
    bae2:	4801      	ldr	r0, [pc, #4]	; (bae8 <time_stamp_function+0x2c>)
    bae4:	4418      	add	r0, r3
    bae6:	bd08      	pop	{r3, pc}
    bae8:	61cf9980 	.word	0x61cf9980

0000baec <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    baec:	b538      	push	{r3, r4, r5, lr}
    baee:	460d      	mov	r5, r1
    baf0:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    baf2:	f7ff ffe3 	bl	babc <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    baf6:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    baf8:	4b04      	ldr	r3, [pc, #16]	; (bb0c <values_of_digital_sensor+0x20>)
    bafa:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    bafe:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    bb02:	e9c4 0200 	strd	r0, r2, [r4]
}
    bb06:	4620      	mov	r0, r4
    bb08:	bd38      	pop	{r3, r4, r5, pc}
    bb0a:	bf00      	nop
    bb0c:	20021af0 	.word	0x20021af0

0000bb10 <feed_circular_buffer>:
void feed_circular_buffer(void){
    bb10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bb14:	4d2f      	ldr	r5, [pc, #188]	; (bbd4 <feed_circular_buffer+0xc4>)
    bb16:	4b30      	ldr	r3, [pc, #192]	; (bbd8 <feed_circular_buffer+0xc8>)
    bb18:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bb1a:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bb1e:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bb20:	d256      	bcs.n	bbd0 <feed_circular_buffer+0xc0>
  gnss_return_value.timestamp=time_stamp_function();
    bb22:	f7ff ffcb 	bl	babc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb26:	f04f 0800 	mov.w	r8, #0
    bb2a:	4c2c      	ldr	r4, [pc, #176]	; (bbdc <feed_circular_buffer+0xcc>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb2c:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb2e:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bb32:	e9c6 8802 	strd	r8, r8, [r6, #8]
    bb36:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    bb38:	f7ff ffc0 	bl	babc <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    bb3c:	4e28      	ldr	r6, [pc, #160]	; (bbe0 <feed_circular_buffer+0xd0>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb3e:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    bb42:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb46:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb48:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    bb4c:	f7ff ffb6 	bl	babc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    bb50:	682b      	ldr	r3, [r5, #0]
    bb52:	8872      	ldrh	r2, [r6, #2]
    bb54:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb58:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    bb5a:	f7ff ffaf 	bl	babc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    bb5e:	682b      	ldr	r3, [r5, #0]
    bb60:	88b2      	ldrh	r2, [r6, #4]
    bb62:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb66:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    bb68:	f7ff ffa8 	bl	babc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    bb6c:	682b      	ldr	r3, [r5, #0]
    bb6e:	88f2      	ldrh	r2, [r6, #6]
    bb70:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb74:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    bb76:	f7ff ffa1 	bl	babc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    bb7a:	682b      	ldr	r3, [r5, #0]
    bb7c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb80:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    bb82:	f7ff ff9b 	bl	babc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    bb86:	682b      	ldr	r3, [r5, #0]
    bb88:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb8c:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    bb8e:	f7ff ff95 	bl	babc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bb92:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb94:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bb96:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bb9a:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb9c:	4638      	mov	r0, r7
    bb9e:	f7ff ffa5 	bl	baec <values_of_digital_sensor>
    bba2:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bba6:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bba8:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbaa:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbae:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbb2:	3438      	adds	r4, #56	; 0x38
    bbb4:	2101      	movs	r1, #1
    bbb6:	4638      	mov	r0, r7
    bbb8:	f7ff ff98 	bl	baec <values_of_digital_sensor>
    bbbc:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer_Free_Position++;
    bbc0:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbc2:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer_Free_Position++;
    bbc6:	3301      	adds	r3, #1
    bbc8:	602b      	str	r3, [r5, #0]
}
    bbca:	b002      	add	sp, #8
    bbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbd0:	2300      	movs	r3, #0
    bbd2:	e7f9      	b.n	bbc8 <feed_circular_buffer+0xb8>
    bbd4:	2002146c 	.word	0x2002146c
    bbd8:	20021468 	.word	0x20021468
    bbdc:	2000ac68 	.word	0x2000ac68
    bbe0:	20021b00 	.word	0x20021b00

0000bbe4 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    bbe6:	4b1c      	ldr	r3, [pc, #112]	; (bc58 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    bbe8:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    bbea:	6818      	ldr	r0, [r3, #0]
    bbec:	889b      	ldrh	r3, [r3, #4]
    bbee:	9000      	str	r0, [sp, #0]
    bbf0:	2218      	movs	r2, #24
    bbf2:	2100      	movs	r1, #0
    bbf4:	f10d 0006 	add.w	r0, sp, #6
    bbf8:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    bbfc:	2601      	movs	r6, #1
   char tag[30]="10203";
    bbfe:	f024 fcdc 	bl	305ba <memset>
     msg.positions.timestamp=1;
    bc02:	2300      	movs	r3, #0
    msg.timestamp=0;
    bc04:	4c15      	ldr	r4, [pc, #84]	; (bc5c <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    bc06:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    bc08:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    bc0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bc10:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    bc12:	4b13      	ldr	r3, [pc, #76]	; (bc60 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc14:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    bc16:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    bc18:	230b      	movs	r3, #11
    bc1a:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    bc1c:	4b11      	ldr	r3, [pc, #68]	; (bc64 <fill_fields_to_test+0x80>)
    bc1e:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    bc20:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    bc22:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    bc24:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    bc26:	7766      	strb	r6, [r4, #29]
    bc28:	f104 001e 	add.w	r0, r4, #30
    bc2c:	f024 fdfa 	bl	30824 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc30:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    bc34:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc38:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc3c:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc3e:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    bc42:	f7fc ff61 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    bc46:	3501      	adds	r5, #1
    bc48:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc4a:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    bc4c:	f104 0424 	add.w	r4, r4, #36	; 0x24
    bc50:	d1e6      	bne.n	bc20 <fill_fields_to_test+0x3c>
}
    bc52:	4802      	ldr	r0, [pc, #8]	; (bc5c <fill_fields_to_test+0x78>)
    bc54:	b009      	add	sp, #36	; 0x24
    bc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc58:	000316a4 	.word	0x000316a4
    bc5c:	2000ab78 	.word	0x2000ab78
    bc60:	40400000 	.word	0x40400000
    bc64:	41400000 	.word	0x41400000

0000bc68 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    bc68:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc6a:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    bc6e:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    bc70:	f7ff ffb8 	bl	bbe4 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    bc74:	2202      	movs	r2, #2
    bc76:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    bc7a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    bc7e:	4a3a      	ldr	r2, [pc, #232]	; (bd68 <send_array_dd_v0+0x100>)
    bc80:	ae0c      	add	r6, sp, #48	; 0x30
    bc82:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bc84:	4631      	mov	r1, r6
    bc86:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    bc88:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bc8a:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bc8c:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bc8e:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    bc90:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bc92:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bc94:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bc96:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    bc98:	f101 010c 	add.w	r1, r1, #12
    bc9c:	d1f8      	bne.n	bc90 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bc9e:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bca0:	6958      	ldr	r0, [r3, #20]
    bca2:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    bca4:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bca6:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bca8:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bcac:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    bcb0:	f101 0108 	add.w	r1, r1, #8
    bcb4:	d1f6      	bne.n	bca4 <send_array_dd_v0+0x3c>
    bcb6:	f103 051e 	add.w	r5, r3, #30
    bcba:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    bcbe:	f855 3c06 	ldr.w	r3, [r5, #-6]
    bcc2:	4629      	mov	r1, r5
    bcc4:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    bcc8:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    bccc:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    bcd0:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    bcd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    bcd8:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    bcdc:	f024 fda2 	bl	30824 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bce0:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    bce2:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bce4:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bce8:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bcea:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bcee:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bcf2:	4633      	mov	r3, r6
    bcf4:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    bcf8:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bcfa:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bcfc:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bd00:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    bd04:	f103 0308 	add.w	r3, r3, #8
    bd08:	d1f6      	bne.n	bcf8 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    bd0a:	3524      	adds	r5, #36	; 0x24
    bd0c:	42a5      	cmp	r5, r4
    bd0e:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    bd12:	d1d4      	bne.n	bcbe <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd14:	466c      	mov	r4, sp
    bd16:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    bd1a:	4668      	mov	r0, sp
    bd1c:	4913      	ldr	r1, [pc, #76]	; (bd6c <send_array_dd_v0+0x104>)
    bd1e:	ad07      	add	r5, sp, #28
    bd20:	f000 f906 	bl	bf30 <pb_ostream_from_buffer>
    bd24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd28:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd2a:	4911      	ldr	r1, [pc, #68]	; (bd70 <send_array_dd_v0+0x108>)
    bd2c:	aa0c      	add	r2, sp, #48	; 0x30
    bd2e:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd30:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd32:	f000 fb7d 	bl	c430 <pb_encode>
   int j=0;
    bd36:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    bd38:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    bd3a:	490c      	ldr	r1, [pc, #48]	; (bd6c <send_array_dd_v0+0x104>)
    bd3c:	4a0d      	ldr	r2, [pc, #52]	; (bd74 <send_array_dd_v0+0x10c>)
    bd3e:	4283      	cmp	r3, r0
    bd40:	d10b      	bne.n	bd5a <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    bd42:	490d      	ldr	r1, [pc, #52]	; (bd78 <send_array_dd_v0+0x110>)
    return function_return;
    bd44:	f240 72dc 	movw	r2, #2012	; 0x7dc
    bd48:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    bd4a:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    bd4e:	f024 fbfa 	bl	30546 <memcpy>
}
    bd52:	4638      	mov	r0, r7
    bd54:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    bd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    bd5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    bd5e:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    bd60:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    bd64:	e7eb      	b.n	bd3e <send_array_dd_v0+0xd6>
    bd66:	bf00      	nop
    bd68:	0012d687 	.word	0x0012d687
    bd6c:	20021b2f 	.word	0x20021b2f
    bd70:	000318ec 	.word	0x000318ec
    bd74:	2000a39f 	.word	0x2000a39f
    bd78:	2000a39c 	.word	0x2000a39c

0000bd7c <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    bd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd80:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bd82:	4d30      	ldr	r5, [pc, #192]	; (be44 <print_current_position_cb+0xc8>)
    printf("\n\n####Position %d #####\n",pos);
    bd84:	4601      	mov	r1, r0
void print_current_position_cb(uint32_t pos){
    bd86:	b085      	sub	sp, #20
    printf("\n\n####Position %d #####\n",pos);
    bd88:	482f      	ldr	r0, [pc, #188]	; (be48 <print_current_position_cb+0xcc>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bd8a:	01a6      	lsls	r6, r4, #6
    bd8c:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    bd90:	f01d f894 	bl	28ebc <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bd94:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    bd98:	6863      	ldr	r3, [r4, #4]
    bd9a:	482c      	ldr	r0, [pc, #176]	; (be4c <print_current_position_cb+0xd0>)
    bd9c:	f01d f88e 	bl	28ebc <iprintf>
	if (!spec->channel_cfg_dt_node_exists) {
    bda0:	4a2b      	ldr	r2, [pc, #172]	; (be50 <print_current_position_cb+0xd4>)
    val_mv = C_Buffer[pos].analog.value;
    bda2:	6967      	ldr	r7, [r4, #20]
    bda4:	7953      	ldrb	r3, [r2, #5]
    bda6:	b1cb      	cbz	r3, bddc <print_current_position_cb+0x60>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bda8:	79d3      	ldrb	r3, [r2, #7]
	if (spec->channel_cfg.differential) {
    bdaa:	7a91      	ldrb	r1, [r2, #10]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bdac:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    bdae:	bf0a      	itet	eq
    bdb0:	6813      	ldreq	r3, [r2, #0]
		vref_mv = spec->vref_mv;
    bdb2:	89d3      	ldrhne	r3, [r2, #14]
	return api->ref_internal;
    bdb4:	689b      	ldreq	r3, [r3, #8]
	resolution = spec->resolution;
    bdb6:	7c14      	ldrb	r4, [r2, #16]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bdb8:	bf08      	it	eq
    bdba:	891b      	ldrheq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    bdbc:	0689      	lsls	r1, r1, #26
	int32_t adc_mv = *valp * ref_mv;
    bdbe:	fb07 f303 	mul.w	r3, r7, r3
		resolution -= 1U;
    bdc2:	bf48      	it	mi
    bdc4:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    bdc8:	7990      	ldrb	r0, [r2, #6]
    bdca:	a903      	add	r1, sp, #12
		resolution -= 1U;
    bdcc:	bf48      	it	mi
    bdce:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    bdd0:	9303      	str	r3, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bdd2:	f00f fd13 	bl	1b7fc <adc_gain_invert>
	if (ret == 0) {
    bdd6:	b908      	cbnz	r0, bddc <print_current_position_cb+0x60>
		*valp = (adc_mv >> resolution);
    bdd8:	9f03      	ldr	r7, [sp, #12]
    bdda:	4127      	asrs	r7, r4
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    bddc:	19ac      	adds	r4, r5, r6
    bdde:	463b      	mov	r3, r7
    bde0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    bde4:	481b      	ldr	r0, [pc, #108]	; (be54 <print_current_position_cb+0xd8>)
    bde6:	f01d f869 	bl	28ebc <iprintf>
    int i=0;
    bdea:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bdec:	f8df 9068 	ldr.w	r9, [pc, #104]	; be58 <print_current_position_cb+0xdc>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    bdf0:	f107 0801 	add.w	r8, r7, #1
    bdf4:	8ba0      	ldrh	r0, [r4, #28]
    bdf6:	fa5f f188 	uxtb.w	r1, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bdfa:	f8d4 a018 	ldr.w	sl, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    bdfe:	f9b4 b01c 	ldrsh.w	fp, [r4, #28]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    be02:	f7fd fac9 	bl	9398 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be06:	f7fc fb0b 	bl	8420 <__aeabi_f2d>
    be0a:	e9cd 0100 	strd	r0, r1, [sp]
    be0e:	4639      	mov	r1, r7
      i++;
    be10:	4647      	mov	r7, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be12:	465b      	mov	r3, fp
    be14:	4652      	mov	r2, sl
    be16:	4648      	mov	r0, r9
    be18:	f01d f850 	bl	28ebc <iprintf>
    while (i<3){
    be1c:	2f03      	cmp	r7, #3
    be1e:	f104 0408 	add.w	r4, r4, #8
    be22:	d1e5      	bne.n	bdf0 <print_current_position_cb+0x74>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be24:	4435      	add	r5, r6
    be26:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    be2a:	2100      	movs	r1, #0
    be2c:	480b      	ldr	r0, [pc, #44]	; (be5c <print_current_position_cb+0xe0>)
    be2e:	f01d f845 	bl	28ebc <iprintf>
    be32:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    be36:	2101      	movs	r1, #1
    be38:	4808      	ldr	r0, [pc, #32]	; (be5c <print_current_position_cb+0xe0>)
}
    be3a:	b005      	add	sp, #20
    be3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be40:	f01d b83c 	b.w	28ebc <iprintf>
    be44:	2000ac68 	.word	0x2000ac68
    be48:	00032ddc 	.word	0x00032ddc
    be4c:	00032df5 	.word	0x00032df5
    be50:	00031810 	.word	0x00031810
    be54:	00032e21 	.word	0x00032e21
    be58:	00032e47 	.word	0x00032e47
    be5c:	00032e6d 	.word	0x00032e6d

0000be60 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    be60:	b500      	push	{lr}
    pb_type_t type = field->type;
    be62:	7d83      	ldrb	r3, [r0, #22]
{
    be64:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    be66:	2b3f      	cmp	r3, #63	; 0x3f
{
    be68:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    be6a:	d849      	bhi.n	bf00 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    be6c:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    be70:	d01c      	beq.n	beac <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    be72:	2820      	cmp	r0, #32
    be74:	d102      	bne.n	be7c <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    be76:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    be78:	8818      	ldrh	r0, [r3, #0]
    be7a:	e006      	b.n	be8a <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    be7c:	2830      	cmp	r0, #48	; 0x30
    be7e:	d0fa      	beq.n	be76 <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    be80:	2810      	cmp	r0, #16
    be82:	d106      	bne.n	be92 <pb_check_proto3_default_value+0x32>
    be84:	6a0a      	ldr	r2, [r1, #32]
    be86:	b122      	cbz	r2, be92 <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    be88:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    be8a:	fab0 f080 	clz	r0, r0
    be8e:	0940      	lsrs	r0, r0, #5
    be90:	e00c      	b.n	beac <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    be92:	680a      	ldr	r2, [r1, #0]
    be94:	6890      	ldr	r0, [r2, #8]
    be96:	b980      	cbnz	r0, beba <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    be98:	f003 020f 	and.w	r2, r3, #15
    be9c:	2a05      	cmp	r2, #5
    be9e:	d80e      	bhi.n	bebe <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    bea0:	69cb      	ldr	r3, [r1, #28]
    bea2:	8a4a      	ldrh	r2, [r1, #18]
    bea4:	441a      	add	r2, r3
    bea6:	4293      	cmp	r3, r2
    bea8:	d103      	bne.n	beb2 <pb_check_proto3_default_value+0x52>
            return true;
    beaa:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    beac:	b00b      	add	sp, #44	; 0x2c
    beae:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    beb2:	f813 1b01 	ldrb.w	r1, [r3], #1
    beb6:	2900      	cmp	r1, #0
    beb8:	d0f5      	beq.n	bea6 <pb_check_proto3_default_value+0x46>
            return false;
    beba:	2000      	movs	r0, #0
    bebc:	e7f6      	b.n	beac <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    bebe:	2a06      	cmp	r2, #6
    bec0:	d101      	bne.n	bec6 <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    bec2:	69cb      	ldr	r3, [r1, #28]
    bec4:	e7d8      	b.n	be78 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    bec6:	2a07      	cmp	r2, #7
    bec8:	d102      	bne.n	bed0 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    beca:	69cb      	ldr	r3, [r1, #28]
    becc:	7818      	ldrb	r0, [r3, #0]
    bece:	e7dc      	b.n	be8a <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    bed0:	2a0b      	cmp	r2, #11
    bed2:	d101      	bne.n	bed8 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    bed4:	8a48      	ldrh	r0, [r1, #18]
    bed6:	e7d8      	b.n	be8a <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    bed8:	f003 030e 	and.w	r3, r3, #14
    bedc:	2b08      	cmp	r3, #8
    bede:	d1e5      	bne.n	beac <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    bee0:	69ca      	ldr	r2, [r1, #28]
    bee2:	4668      	mov	r0, sp
    bee4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bee6:	f01e f877 	bl	29fd8 <pb_field_iter_begin>
    beea:	2800      	cmp	r0, #0
    beec:	d0dd      	beq.n	beaa <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    beee:	4668      	mov	r0, sp
    bef0:	f7ff ffb6 	bl	be60 <pb_check_proto3_default_value>
    bef4:	2800      	cmp	r0, #0
    bef6:	d0d9      	beq.n	beac <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    bef8:	4668      	mov	r0, sp
    befa:	f01e f890 	bl	2a01e <pb_field_iter_next>
    befe:	e7f4      	b.n	beea <pb_check_proto3_default_value+0x8a>
    bf00:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    bf04:	2a80      	cmp	r2, #128	; 0x80
    bf06:	d101      	bne.n	bf0c <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    bf08:	69c0      	ldr	r0, [r0, #28]
    bf0a:	e7be      	b.n	be8a <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    bf0c:	2a40      	cmp	r2, #64	; 0x40
    bf0e:	d1d4      	bne.n	beba <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    bf10:	f003 030f 	and.w	r3, r3, #15
    bf14:	2b0a      	cmp	r3, #10
    bf16:	d102      	bne.n	bf1e <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    bf18:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    bf1a:	6818      	ldr	r0, [r3, #0]
    bf1c:	e7b5      	b.n	be8a <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    bf1e:	6803      	ldr	r3, [r0, #0]
    bf20:	4a02      	ldr	r2, [pc, #8]	; (bf2c <pb_check_proto3_default_value+0xcc>)
    bf22:	68d8      	ldr	r0, [r3, #12]
    bf24:	4290      	cmp	r0, r2
    bf26:	d1b0      	bne.n	be8a <pb_check_proto3_default_value+0x2a>
    bf28:	e7f6      	b.n	bf18 <pb_check_proto3_default_value+0xb8>
    bf2a:	bf00      	nop
    bf2c:	0002a03d 	.word	0x0002a03d

0000bf30 <pb_ostream_from_buffer>:
    return stream;
    bf30:	6082      	str	r2, [r0, #8]
    bf32:	2200      	movs	r2, #0
{
    bf34:	b510      	push	{r4, lr}
    return stream;
    bf36:	4c03      	ldr	r4, [pc, #12]	; (bf44 <pb_ostream_from_buffer+0x14>)
    bf38:	e9c0 2203 	strd	r2, r2, [r0, #12]
    bf3c:	e9c0 4100 	strd	r4, r1, [r0]
}
    bf40:	bd10      	pop	{r4, pc}
    bf42:	bf00      	nop
    bf44:	0002a06d 	.word	0x0002a06d

0000bf48 <pb_write>:
{
    bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf4a:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    bf4c:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    bf4e:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    bf50:	b19a      	cbz	r2, bf7a <pb_write+0x32>
    bf52:	6806      	ldr	r6, [r0, #0]
    bf54:	b18e      	cbz	r6, bf7a <pb_write+0x32>
    bf56:	18d3      	adds	r3, r2, r3
    bf58:	d202      	bcs.n	bf60 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    bf5a:	6887      	ldr	r7, [r0, #8]
    bf5c:	429f      	cmp	r7, r3
    bf5e:	d207      	bcs.n	bf70 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    bf60:	6923      	ldr	r3, [r4, #16]
    bf62:	4a08      	ldr	r2, [pc, #32]	; (bf84 <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    bf64:	2b00      	cmp	r3, #0
    bf66:	bf08      	it	eq
    bf68:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    bf6a:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    bf6c:	6123      	str	r3, [r4, #16]
}
    bf6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    bf70:	47b0      	blx	r6
    bf72:	b910      	cbnz	r0, bf7a <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    bf74:	6923      	ldr	r3, [r4, #16]
    bf76:	4a04      	ldr	r2, [pc, #16]	; (bf88 <pb_write+0x40>)
    bf78:	e7f4      	b.n	bf64 <pb_write+0x1c>
    stream->bytes_written += count;
    bf7a:	68e3      	ldr	r3, [r4, #12]
    return true;
    bf7c:	2001      	movs	r0, #1
    stream->bytes_written += count;
    bf7e:	442b      	add	r3, r5
    bf80:	60e3      	str	r3, [r4, #12]
    return true;
    bf82:	e7f4      	b.n	bf6e <pb_write+0x26>
    bf84:	00032e8f 	.word	0x00032e8f
    bf88:	00032e9b 	.word	0x00032e9b

0000bf8c <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    bf8c:	b410      	push	{r4}
    bf8e:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    bf90:	8a4b      	ldrh	r3, [r1, #18]
    bf92:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    bf96:	2c02      	cmp	r4, #2
    bf98:	d117      	bne.n	bfca <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    bf9a:	2b01      	cmp	r3, #1
    bf9c:	d105      	bne.n	bfaa <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    bf9e:	69cb      	ldr	r3, [r1, #28]
    bfa0:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    bfa2:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    bfa4:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    bfa6:	f01e b86a 	b.w	2a07e <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    bfaa:	2b02      	cmp	r3, #2
    bfac:	d102      	bne.n	bfb4 <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    bfae:	69cb      	ldr	r3, [r1, #28]
    bfb0:	881a      	ldrh	r2, [r3, #0]
    bfb2:	e7f6      	b.n	bfa2 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    bfb4:	2b04      	cmp	r3, #4
    bfb6:	d102      	bne.n	bfbe <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    bfb8:	69cb      	ldr	r3, [r1, #28]
    bfba:	681a      	ldr	r2, [r3, #0]
    bfbc:	e7f1      	b.n	bfa2 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    bfbe:	2b08      	cmp	r3, #8
    bfc0:	d11f      	bne.n	c002 <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    bfc2:	69cb      	ldr	r3, [r1, #28]
    bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfc8:	e7ec      	b.n	bfa4 <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    bfca:	2b01      	cmp	r3, #1
    bfcc:	d108      	bne.n	bfe0 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    bfce:	69cb      	ldr	r3, [r1, #28]
    bfd0:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    bfd4:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    bfd6:	2c03      	cmp	r4, #3
    bfd8:	d1e4      	bne.n	bfa4 <pb_enc_varint+0x18>
}
    bfda:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    bfdc:	f01e b88e 	b.w	2a0fc <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    bfe0:	2b02      	cmp	r3, #2
    bfe2:	d103      	bne.n	bfec <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    bfe4:	69cb      	ldr	r3, [r1, #28]
    bfe6:	f9b3 2000 	ldrsh.w	r2, [r3]
    bfea:	e7f3      	b.n	bfd4 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    bfec:	2b04      	cmp	r3, #4
    bfee:	d102      	bne.n	bff6 <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    bff0:	69cb      	ldr	r3, [r1, #28]
    bff2:	681a      	ldr	r2, [r3, #0]
    bff4:	e7ee      	b.n	bfd4 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    bff6:	2b08      	cmp	r3, #8
    bff8:	d103      	bne.n	c002 <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    bffa:	69cb      	ldr	r3, [r1, #28]
    bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
    c000:	e7e9      	b.n	bfd6 <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    c002:	6903      	ldr	r3, [r0, #16]
    c004:	4a03      	ldr	r2, [pc, #12]	; (c014 <pb_enc_varint+0x88>)
    c006:	2b00      	cmp	r3, #0
    c008:	bf08      	it	eq
    c00a:	4613      	moveq	r3, r2
    c00c:	6103      	str	r3, [r0, #16]
}
    c00e:	bc10      	pop	{r4}
    c010:	2000      	movs	r0, #0
    c012:	4770      	bx	lr
    c014:	00032ea4 	.word	0x00032ea4

0000c018 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    c018:	8a4a      	ldrh	r2, [r1, #18]
    c01a:	2a04      	cmp	r2, #4
    c01c:	d102      	bne.n	c024 <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    c01e:	69c9      	ldr	r1, [r1, #28]
    c020:	f01e b875 	b.w	2a10e <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    c024:	2a08      	cmp	r2, #8
    c026:	d102      	bne.n	c02e <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    c028:	69c9      	ldr	r1, [r1, #28]
    c02a:	f01e b873 	b.w	2a114 <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    c02e:	6902      	ldr	r2, [r0, #16]
    c030:	4903      	ldr	r1, [pc, #12]	; (c040 <pb_enc_fixed+0x28>)
    c032:	2a00      	cmp	r2, #0
    c034:	bf08      	it	eq
    c036:	460a      	moveq	r2, r1
    c038:	6102      	str	r2, [r0, #16]
    }
}
    c03a:	2000      	movs	r0, #0
    c03c:	4770      	bx	lr
    c03e:	bf00      	nop
    c040:	00032ea4 	.word	0x00032ea4

0000c044 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    c044:	7d8a      	ldrb	r2, [r1, #22]
{
    c046:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    c048:	f002 020f 	and.w	r2, r2, #15
    c04c:	2a0b      	cmp	r2, #11
    c04e:	d811      	bhi.n	c074 <pb_encode_tag_for_field+0x30>
    c050:	e8df f002 	tbb	[pc, r2]
    c054:	0c0c0c0c 	.word	0x0c0c0c0c
    c058:	0a0a060e 	.word	0x0a0a060e
    c05c:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    c060:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    c062:	8a1a      	ldrh	r2, [r3, #16]
    c064:	f01e b859 	b.w	2a11a <pb_encode_tag>
            wiretype = PB_WT_STRING;
    c068:	2102      	movs	r1, #2
            break;
    c06a:	e7fa      	b.n	c062 <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    c06c:	2100      	movs	r1, #0
    c06e:	e7f8      	b.n	c062 <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    c070:	2105      	movs	r1, #5
    c072:	e7f6      	b.n	c062 <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    c074:	6903      	ldr	r3, [r0, #16]
    c076:	4a03      	ldr	r2, [pc, #12]	; (c084 <pb_encode_tag_for_field+0x40>)
    c078:	2b00      	cmp	r3, #0
    c07a:	bf08      	it	eq
    c07c:	4613      	moveq	r3, r2
    c07e:	6103      	str	r3, [r0, #16]
}
    c080:	2000      	movs	r0, #0
    c082:	4770      	bx	lr
    c084:	00032eb6 	.word	0x00032eb6

0000c088 <pb_encode_submessage>:
{
    c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c08c:	460e      	mov	r6, r1
    c08e:	4617      	mov	r7, r2
    c090:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c092:	2214      	movs	r2, #20
    c094:	2100      	movs	r1, #0
{
    c096:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c098:	a801      	add	r0, sp, #4
    c09a:	f024 fa8e 	bl	305ba <memset>
    if (!pb_encode(&substream, fields, src_struct))
    c09e:	463a      	mov	r2, r7
    c0a0:	4631      	mov	r1, r6
    c0a2:	a801      	add	r0, sp, #4
    c0a4:	f000 f9c4 	bl	c430 <pb_encode>
    c0a8:	b910      	cbnz	r0, c0b0 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    c0aa:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    c0ac:	6123      	str	r3, [r4, #16]
    c0ae:	e008      	b.n	c0c2 <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c0b0:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    c0b4:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c0b6:	4643      	mov	r3, r8
    c0b8:	462a      	mov	r2, r5
    c0ba:	4620      	mov	r0, r4
    c0bc:	f01d ffdf 	bl	2a07e <pb_encode_varint>
    c0c0:	b918      	cbnz	r0, c0ca <pb_encode_submessage+0x42>
        return false;
    c0c2:	2000      	movs	r0, #0
}
    c0c4:	b006      	add	sp, #24
    c0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    c0ca:	6821      	ldr	r1, [r4, #0]
    c0cc:	b921      	cbnz	r1, c0d8 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    c0ce:	462a      	mov	r2, r5
    c0d0:	4620      	mov	r0, r4
    c0d2:	f7ff ff39 	bl	bf48 <pb_write>
    c0d6:	e7f5      	b.n	c0c4 <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    c0d8:	68e3      	ldr	r3, [r4, #12]
    c0da:	68a2      	ldr	r2, [r4, #8]
    c0dc:	442b      	add	r3, r5
    c0de:	4293      	cmp	r3, r2
    c0e0:	d905      	bls.n	c0ee <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    c0e2:	6923      	ldr	r3, [r4, #16]
    c0e4:	4a0e      	ldr	r2, [pc, #56]	; (c120 <pb_encode_submessage+0x98>)
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	bf08      	it	eq
    c0ea:	4613      	moveq	r3, r2
    c0ec:	e7de      	b.n	c0ac <pb_encode_submessage+0x24>
    substream.state = stream->state;
    c0ee:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    c0f0:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    c0f2:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    c0f4:	a801      	add	r0, sp, #4
    c0f6:	4631      	mov	r1, r6
    substream.max_size = size;
    c0f8:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    c0fc:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    c100:	f000 f996 	bl	c430 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    c104:	9a04      	ldr	r2, [sp, #16]
    c106:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    c108:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    c10a:	4413      	add	r3, r2
    c10c:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    c10e:	9b02      	ldr	r3, [sp, #8]
    c110:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    c112:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    c114:	d101      	bne.n	c11a <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    c116:	6123      	str	r3, [r4, #16]
    c118:	e7d4      	b.n	c0c4 <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    c11a:	4a02      	ldr	r2, [pc, #8]	; (c124 <pb_encode_submessage+0x9c>)
    c11c:	e7e3      	b.n	c0e6 <pb_encode_submessage+0x5e>
    c11e:	bf00      	nop
    c120:	00032e8f 	.word	0x00032e8f
    c124:	00032ec9 	.word	0x00032ec9

0000c128 <encode_basic_field>:
{
    c128:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    c12a:	69cb      	ldr	r3, [r1, #28]
{
    c12c:	4604      	mov	r4, r0
    c12e:	460d      	mov	r5, r1
    if (!field->pData)
    c130:	2b00      	cmp	r3, #0
    c132:	d07f      	beq.n	c234 <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    c134:	f7ff ff86 	bl	c044 <pb_encode_tag_for_field>
    c138:	2800      	cmp	r0, #0
    c13a:	d073      	beq.n	c224 <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    c13c:	7da8      	ldrb	r0, [r5, #22]
    c13e:	f000 030f 	and.w	r3, r0, #15
    c142:	2b0b      	cmp	r3, #11
    c144:	d873      	bhi.n	c22e <encode_basic_field+0x106>
    c146:	e8df f003 	tbb	[pc, r3]
    c14a:	1106      	.short	0x1106
    c14c:	17171111 	.word	0x17171111
    c150:	5252351d 	.word	0x5252351d
    c154:	6f72      	.short	0x6f72
        if (p[i] != 0)
    c156:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    c158:	4620      	mov	r0, r4
}
    c15a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    c15e:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    c160:	2300      	movs	r3, #0
    c162:	3a00      	subs	r2, #0
    c164:	bf18      	it	ne
    c166:	2201      	movne	r2, #1
    c168:	f01d bf89 	b.w	2a07e <pb_encode_varint>
            return pb_enc_varint(stream, field);
    c16c:	4629      	mov	r1, r5
    c16e:	4620      	mov	r0, r4
}
    c170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    c174:	f7ff bf0a 	b.w	bf8c <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    c178:	4629      	mov	r1, r5
    c17a:	4620      	mov	r0, r4
}
    c17c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    c180:	f7ff bf4a 	b.w	c018 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    c184:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    c186:	b909      	cbnz	r1, c18c <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    c188:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    c18a:	e00e      	b.n	c1aa <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c18c:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c18e:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c190:	d80a      	bhi.n	c1a8 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c192:	8a6b      	ldrh	r3, [r5, #18]
    c194:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c196:	4293      	cmp	r3, r2
    c198:	d206      	bcs.n	c1a8 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    c19a:	6923      	ldr	r3, [r4, #16]
    c19c:	4a26      	ldr	r2, [pc, #152]	; (c238 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    c19e:	2b00      	cmp	r3, #0
    c1a0:	bf08      	it	eq
    c1a2:	4613      	moveq	r3, r2
    c1a4:	6123      	str	r3, [r4, #16]
    c1a6:	e03d      	b.n	c224 <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    c1a8:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c1aa:	4620      	mov	r0, r4
}
    c1ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c1b0:	f01d bfb9 	b.w	2a126 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c1b4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    c1b8:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    c1ba:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    c1bc:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c1be:	d00e      	beq.n	c1de <encode_basic_field+0xb6>
        if (max_size == 0)
    c1c0:	b913      	cbnz	r3, c1c8 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    c1c2:	6923      	ldr	r3, [r4, #16]
    c1c4:	4a1d      	ldr	r2, [pc, #116]	; (c23c <encode_basic_field+0x114>)
    c1c6:	e7ea      	b.n	c19e <encode_basic_field+0x76>
        max_size -= 1;
    c1c8:	3b01      	subs	r3, #1
    if (str == NULL)
    c1ca:	2900      	cmp	r1, #0
    c1cc:	d0dc      	beq.n	c188 <encode_basic_field+0x60>
    size_t size = 0;
    c1ce:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    c1d0:	429a      	cmp	r2, r3
    c1d2:	5c88      	ldrb	r0, [r1, r2]
    c1d4:	d006      	beq.n	c1e4 <encode_basic_field+0xbc>
    c1d6:	2800      	cmp	r0, #0
    c1d8:	d0e7      	beq.n	c1aa <encode_basic_field+0x82>
            size++;
    c1da:	3201      	adds	r2, #1
            p++;
    c1dc:	e7f8      	b.n	c1d0 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    c1de:	f04f 33ff 	mov.w	r3, #4294967295
    c1e2:	e7f2      	b.n	c1ca <encode_basic_field+0xa2>
        if (*p != '\0')
    c1e4:	2800      	cmp	r0, #0
    c1e6:	d0e0      	beq.n	c1aa <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    c1e8:	6923      	ldr	r3, [r4, #16]
    c1ea:	4a15      	ldr	r2, [pc, #84]	; (c240 <encode_basic_field+0x118>)
    c1ec:	e7d7      	b.n	c19e <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    c1ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c1f0:	b912      	cbnz	r2, c1f8 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    c1f2:	6923      	ldr	r3, [r4, #16]
    c1f4:	4a13      	ldr	r2, [pc, #76]	; (c244 <encode_basic_field+0x11c>)
    c1f6:	e7d2      	b.n	c19e <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c1f8:	2b09      	cmp	r3, #9
    c1fa:	d006      	beq.n	c20a <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c1fc:	4620      	mov	r0, r4
    c1fe:	69ea      	ldr	r2, [r5, #28]
    c200:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    c202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c206:	f7ff bf3f 	b.w	c088 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c20a:	6a2a      	ldr	r2, [r5, #32]
    c20c:	2a00      	cmp	r2, #0
    c20e:	d0f5      	beq.n	c1fc <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    c210:	f852 3c08 	ldr.w	r3, [r2, #-8]
    c214:	2b00      	cmp	r3, #0
    c216:	d0f1      	beq.n	c1fc <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    c218:	4629      	mov	r1, r5
    c21a:	4620      	mov	r0, r4
    c21c:	3a04      	subs	r2, #4
    c21e:	4798      	blx	r3
    c220:	2800      	cmp	r0, #0
    c222:	d1eb      	bne.n	c1fc <encode_basic_field+0xd4>
        return false;
    c224:	2000      	movs	r0, #0
}
    c226:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c228:	8a6a      	ldrh	r2, [r5, #18]
    c22a:	69e9      	ldr	r1, [r5, #28]
    c22c:	e7bd      	b.n	c1aa <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    c22e:	6923      	ldr	r3, [r4, #16]
    c230:	4a05      	ldr	r2, [pc, #20]	; (c248 <encode_basic_field+0x120>)
    c232:	e7b4      	b.n	c19e <encode_basic_field+0x76>
        return true;
    c234:	2001      	movs	r0, #1
    c236:	e7f6      	b.n	c226 <encode_basic_field+0xfe>
    c238:	00032edd 	.word	0x00032edd
    c23c:	00032ef1 	.word	0x00032ef1
    c240:	00032f04 	.word	0x00032f04
    c244:	00032f18 	.word	0x00032f18
    c248:	00032eb6 	.word	0x00032eb6

0000c24c <encode_field>:
{
    c24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c250:	7d8b      	ldrb	r3, [r1, #22]
{
    c252:	4605      	mov	r5, r0
    c254:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c258:	2a30      	cmp	r2, #48	; 0x30
{
    c25a:	460c      	mov	r4, r1
    c25c:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c25e:	d112      	bne.n	c286 <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    c260:	6a0b      	ldr	r3, [r1, #32]
    c262:	881a      	ldrh	r2, [r3, #0]
    c264:	8a0b      	ldrh	r3, [r1, #16]
    c266:	429a      	cmp	r2, r3
    c268:	d114      	bne.n	c294 <encode_field+0x48>
    if (!field->pData)
    c26a:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c26c:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    c26e:	b9ea      	cbnz	r2, c2ac <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c270:	f013 0f30 	tst.w	r3, #48	; 0x30
    c274:	d10e      	bne.n	c294 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    c276:	692b      	ldr	r3, [r5, #16]
    c278:	4a69      	ldr	r2, [pc, #420]	; (c420 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c27a:	2b00      	cmp	r3, #0
    c27c:	bf08      	it	eq
    c27e:	4613      	moveq	r3, r2
    c280:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c282:	2000      	movs	r0, #0
    c284:	e007      	b.n	c296 <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    c286:	2a10      	cmp	r2, #16
    c288:	d1ef      	bne.n	c26a <encode_field+0x1e>
        if (field->pSize)
    c28a:	6a0a      	ldr	r2, [r1, #32]
    c28c:	b132      	cbz	r2, c29c <encode_field+0x50>
        if (p[i] != 0)
    c28e:	7813      	ldrb	r3, [r2, #0]
    c290:	2b00      	cmp	r3, #0
    c292:	d1ea      	bne.n	c26a <encode_field+0x1e>
            return true;
    c294:	2001      	movs	r0, #1
}
    c296:	b007      	add	sp, #28
    c298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    c29c:	2b3f      	cmp	r3, #63	; 0x3f
    c29e:	d8e4      	bhi.n	c26a <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    c2a0:	4608      	mov	r0, r1
    c2a2:	f7ff fddd 	bl	be60 <pb_check_proto3_default_value>
    c2a6:	2800      	cmp	r0, #0
    c2a8:	d0df      	beq.n	c26a <encode_field+0x1e>
    c2aa:	e7f3      	b.n	c294 <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    c2ac:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    c2b0:	2a40      	cmp	r2, #64	; 0x40
    c2b2:	d10c      	bne.n	c2ce <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    c2b4:	6823      	ldr	r3, [r4, #0]
    c2b6:	68db      	ldr	r3, [r3, #12]
    c2b8:	2b00      	cmp	r3, #0
    c2ba:	d0eb      	beq.n	c294 <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    c2bc:	4622      	mov	r2, r4
    c2be:	4629      	mov	r1, r5
    c2c0:	2000      	movs	r0, #0
    c2c2:	4798      	blx	r3
    c2c4:	2800      	cmp	r0, #0
    c2c6:	d1e5      	bne.n	c294 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    c2c8:	692b      	ldr	r3, [r5, #16]
    c2ca:	4a56      	ldr	r2, [pc, #344]	; (c424 <encode_field+0x1d8>)
    c2cc:	e7d5      	b.n	c27a <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    c2ce:	f003 0130 	and.w	r1, r3, #48	; 0x30
    c2d2:	2920      	cmp	r1, #32
    c2d4:	f040 809d 	bne.w	c412 <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c2d8:	6a21      	ldr	r1, [r4, #32]
    c2da:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c2dc:	2e00      	cmp	r6, #0
    c2de:	d0d9      	beq.n	c294 <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c2e0:	2a80      	cmp	r2, #128	; 0x80
    c2e2:	d120      	bne.n	c326 <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c2e4:	f003 030f 	and.w	r3, r3, #15
    c2e8:	2b05      	cmp	r3, #5
    c2ea:	d85e      	bhi.n	c3aa <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c2ec:	2102      	movs	r1, #2
    c2ee:	4628      	mov	r0, r5
    c2f0:	8a22      	ldrh	r2, [r4, #16]
    c2f2:	f01d ff12 	bl	2a11a <pb_encode_tag>
    c2f6:	2800      	cmp	r0, #0
    c2f8:	d0c3      	beq.n	c282 <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c2fa:	7da3      	ldrb	r3, [r4, #22]
    c2fc:	f003 030f 	and.w	r3, r3, #15
    c300:	2b04      	cmp	r3, #4
    c302:	d116      	bne.n	c332 <encode_field+0xe6>
            size = 4 * (size_t)count;
    c304:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c306:	463a      	mov	r2, r7
    c308:	2300      	movs	r3, #0
    c30a:	4628      	mov	r0, r5
    c30c:	f01d feb7 	bl	2a07e <pb_encode_varint>
    c310:	2800      	cmp	r0, #0
    c312:	d0b6      	beq.n	c282 <encode_field+0x36>
        if (stream->callback == NULL)
    c314:	6829      	ldr	r1, [r5, #0]
    c316:	bb79      	cbnz	r1, c378 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c318:	463a      	mov	r2, r7
    c31a:	4628      	mov	r0, r5
}
    c31c:	b007      	add	sp, #28
    c31e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c322:	f7ff be11 	b.w	bf48 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c326:	8aa2      	ldrh	r2, [r4, #20]
    c328:	42b2      	cmp	r2, r6
    c32a:	d2db      	bcs.n	c2e4 <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c32c:	692b      	ldr	r3, [r5, #16]
    c32e:	4a3e      	ldr	r2, [pc, #248]	; (c428 <encode_field+0x1dc>)
    c330:	e7a3      	b.n	c27a <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c332:	2b05      	cmp	r3, #5
    c334:	d101      	bne.n	c33a <encode_field+0xee>
            size = 8 * (size_t)count;
    c336:	00f7      	lsls	r7, r6, #3
    c338:	e7e5      	b.n	c306 <encode_field+0xba>
            void *pData_orig = field->pData;
    c33a:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c33c:	2214      	movs	r2, #20
    c33e:	2100      	movs	r1, #0
    c340:	a801      	add	r0, sp, #4
    c342:	f024 f93a 	bl	305ba <memset>
            void *pData_orig = field->pData;
    c346:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c34a:	4621      	mov	r1, r4
    c34c:	a801      	add	r0, sp, #4
    c34e:	f7ff fe1d 	bl	bf8c <pb_enc_varint>
    c352:	b928      	cbnz	r0, c360 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c354:	692b      	ldr	r3, [r5, #16]
    c356:	2b00      	cmp	r3, #0
    c358:	d192      	bne.n	c280 <encode_field+0x34>
    c35a:	9b05      	ldr	r3, [sp, #20]
    c35c:	4a33      	ldr	r2, [pc, #204]	; (c42c <encode_field+0x1e0>)
    c35e:	e78c      	b.n	c27a <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c360:	69e3      	ldr	r3, [r4, #28]
    c362:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c364:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c366:	4413      	add	r3, r2
    c368:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c36a:	b2bb      	uxth	r3, r7
    c36c:	429e      	cmp	r6, r3
    c36e:	d8ec      	bhi.n	c34a <encode_field+0xfe>
            size = sizestream.bytes_written;
    c370:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c372:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c376:	e7c6      	b.n	c306 <encode_field+0xba>
    c378:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c37a:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c37c:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c37e:	f003 030e 	and.w	r3, r3, #14
    c382:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c384:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c386:	d10d      	bne.n	c3a4 <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c388:	f7ff fe46 	bl	c018 <pb_enc_fixed>
    c38c:	2800      	cmp	r0, #0
    c38e:	f43f af78 	beq.w	c282 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c392:	69e3      	ldr	r3, [r4, #28]
    c394:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c396:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c398:	4413      	add	r3, r2
    c39a:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c39c:	b2bb      	uxth	r3, r7
    c39e:	429e      	cmp	r6, r3
    c3a0:	d8eb      	bhi.n	c37a <encode_field+0x12e>
    c3a2:	e777      	b.n	c294 <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c3a4:	f7ff fdf2 	bl	bf8c <pb_enc_varint>
    c3a8:	e7f0      	b.n	c38c <encode_field+0x140>
    c3aa:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c3ae:	7da3      	ldrb	r3, [r4, #22]
    c3b0:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c3b4:	2b86      	cmp	r3, #134	; 0x86
    c3b6:	d127      	bne.n	c408 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c3b8:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c3ba:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c3bc:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c3c0:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c3c2:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c3c6:	f1b9 0f00 	cmp.w	r9, #0
    c3ca:	d11a      	bne.n	c402 <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c3cc:	f7ff fe3a 	bl	c044 <pb_encode_tag_for_field>
    c3d0:	b908      	cbnz	r0, c3d6 <encode_field+0x18a>
                field->pData = pData_orig;
    c3d2:	61e7      	str	r7, [r4, #28]
                if (!status)
    c3d4:	e755      	b.n	c282 <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c3d6:	2201      	movs	r2, #1
    c3d8:	4628      	mov	r0, r5
    c3da:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c3dc:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c3e0:	f7ff fdb2 	bl	bf48 <pb_write>
                field->pData = pData_orig;
    c3e4:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c3e6:	2800      	cmp	r0, #0
    c3e8:	f43f af4b 	beq.w	c282 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c3ec:	69e3      	ldr	r3, [r4, #28]
    c3ee:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c3f0:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c3f4:	4413      	add	r3, r2
    c3f6:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c3f8:	fa1f f388 	uxth.w	r3, r8
    c3fc:	429e      	cmp	r6, r3
    c3fe:	d8d6      	bhi.n	c3ae <encode_field+0x162>
    c400:	e748      	b.n	c294 <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c402:	f7ff fe91 	bl	c128 <encode_basic_field>
    c406:	e7ed      	b.n	c3e4 <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c408:	4621      	mov	r1, r4
    c40a:	4628      	mov	r0, r5
    c40c:	f7ff fe8c 	bl	c128 <encode_basic_field>
    c410:	e7e9      	b.n	c3e6 <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c412:	4621      	mov	r1, r4
    c414:	4628      	mov	r0, r5
}
    c416:	b007      	add	sp, #28
    c418:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c41c:	f7ff be84 	b.w	c128 <encode_basic_field>
    c420:	00032f31 	.word	0x00032f31
    c424:	00032f48 	.word	0x00032f48
    c428:	00032f57 	.word	0x00032f57
    c42c:	00032f6f 	.word	0x00032f6f

0000c430 <pb_encode>:
{
    c430:	b530      	push	{r4, r5, lr}
    c432:	b095      	sub	sp, #84	; 0x54
    c434:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c436:	4668      	mov	r0, sp
    c438:	f01d fdfc 	bl	2a034 <pb_field_iter_begin_const>
    c43c:	b370      	cbz	r0, c49c <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c43e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c442:	f003 030f 	and.w	r3, r3, #15
    c446:	2b0a      	cmp	r3, #10
    c448:	d121      	bne.n	c48e <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c44a:	9b07      	ldr	r3, [sp, #28]
    c44c:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c44e:	b91d      	cbnz	r5, c458 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c450:	4668      	mov	r0, sp
    c452:	f01d fde4 	bl	2a01e <pb_field_iter_next>
    c456:	e7f1      	b.n	c43c <pb_encode+0xc>
        if (extension->type->encode)
    c458:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c45a:	4629      	mov	r1, r5
        if (extension->type->encode)
    c45c:	685b      	ldr	r3, [r3, #4]
    c45e:	b123      	cbz	r3, c46a <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c460:	4620      	mov	r0, r4
    c462:	4798      	blx	r3
        if (!status)
    c464:	b158      	cbz	r0, c47e <pb_encode+0x4e>
        extension = extension->next;
    c466:	68ad      	ldr	r5, [r5, #8]
    c468:	e7f1      	b.n	c44e <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c46a:	a80a      	add	r0, sp, #40	; 0x28
    c46c:	f01d fde4 	bl	2a038 <pb_field_iter_begin_extension_const>
    c470:	b940      	cbnz	r0, c484 <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c472:	6923      	ldr	r3, [r4, #16]
    c474:	4a0a      	ldr	r2, [pc, #40]	; (c4a0 <pb_encode+0x70>)
    c476:	2b00      	cmp	r3, #0
    c478:	bf08      	it	eq
    c47a:	4613      	moveq	r3, r2
    c47c:	6123      	str	r3, [r4, #16]
                return false;
    c47e:	2000      	movs	r0, #0
}
    c480:	b015      	add	sp, #84	; 0x54
    c482:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c484:	4620      	mov	r0, r4
    c486:	a90a      	add	r1, sp, #40	; 0x28
    c488:	f7ff fee0 	bl	c24c <encode_field>
    c48c:	e7ea      	b.n	c464 <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c48e:	4669      	mov	r1, sp
    c490:	4620      	mov	r0, r4
    c492:	f7ff fedb 	bl	c24c <encode_field>
    c496:	2800      	cmp	r0, #0
    c498:	d1da      	bne.n	c450 <pb_encode+0x20>
    c49a:	e7f0      	b.n	c47e <pb_encode+0x4e>
        return true; /* Empty message type */
    c49c:	2001      	movs	r0, #1
    c49e:	e7ef      	b.n	c480 <pb_encode+0x50>
    c4a0:	00032f76 	.word	0x00032f76

0000c4a4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    c4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4a8:	b097      	sub	sp, #92	; 0x5c
    c4aa:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    c4ac:	4604      	mov	r4, r0
{
    c4ae:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
    c4b2:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    c4b6:	61fb      	str	r3, [r7, #28]
	__ASSERT_NO_MSG(in_packaged != NULL);
    c4b8:	b958      	cbnz	r0, c4d2 <cbprintf_package_convert+0x2e>
    c4ba:	49ab      	ldr	r1, [pc, #684]	; (c768 <cbprintf_package_convert+0x2c4>)
    c4bc:	f44f 7365 	mov.w	r3, #916	; 0x394
    c4c0:	4aaa      	ldr	r2, [pc, #680]	; (c76c <cbprintf_package_convert+0x2c8>)
    c4c2:	48ab      	ldr	r0, [pc, #684]	; (c770 <cbprintf_package_convert+0x2cc>)
    c4c4:	f01e f8e5 	bl	2a692 <assert_print>
    c4c8:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c4cc:	48a7      	ldr	r0, [pc, #668]	; (c76c <cbprintf_package_convert+0x2c8>)
    c4ce:	f01e f8d9 	bl	2a684 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    c4d2:	f3ca 03c0 	ubfx	r3, sl, #3, #1
    c4d6:	617b      	str	r3, [r7, #20]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c4da:	b953      	cbnz	r3, c4f2 <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
    c4dc:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    c4de:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    c4e0:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    c4e2:	6abd      	ldr	r5, [r7, #40]	; 0x28
	buf += ros_nbr;
    c4e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c4e8:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    c4ea:	42b5      	cmp	r5, r6
    c4ec:	d319      	bcc.n	c522 <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
    c4ee:	1b03      	subs	r3, r0, r4
    c4f0:	62bb      	str	r3, [r7, #40]	; 0x28
	rws_nbr = in_desc->rw_str_cnt;
    c4f2:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    c4f4:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    c4f8:	61bb      	str	r3, [r7, #24]
	ro_cpy = ros_nbr &&
    c4fa:	f1bb 0f00 	cmp.w	fp, #0
    c4fe:	d002      	beq.n	c506 <cbprintf_package_convert+0x62>
    c500:	f01a 0f01 	tst.w	sl, #1
    c504:	d116      	bne.n	c534 <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
    c506:	69bb      	ldr	r3, [r7, #24]
    c508:	bb53      	cbnz	r3, c560 <cbprintf_package_convert+0xbc>
		if (cb) {
    c50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c50c:	b11b      	cbz	r3, c516 <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
    c50e:	4620      	mov	r0, r4
    c510:	69fa      	ldr	r2, [r7, #28]
    c512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c514:	4798      	blx	r3
		return in_len;
    c516:	6abd      	ldr	r5, [r7, #40]	; 0x28

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    c518:	4628      	mov	r0, r5
    c51a:	375c      	adds	r7, #92	; 0x5c
    c51c:	46bd      	mov	sp, r7
    c51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    c522:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    c526:	4640      	mov	r0, r8
    c528:	f7fc ff2d 	bl	9386 <strlen>
    c52c:	3001      	adds	r0, #1
    c52e:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    c530:	3501      	adds	r5, #1
    c532:	e7da      	b.n	c4ea <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
    c534:	7823      	ldrb	r3, [r4, #0]
    c536:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    c538:	627b      	str	r3, [r7, #36]	; 0x24
    c53a:	009b      	lsls	r3, r3, #2
    c53c:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
    c53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c540:	623a      	str	r2, [r7, #32]
	uint8_t *str_pos = &buf[args_size];
    c542:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    c546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c548:	2b00      	cmp	r3, #0
    c54a:	f040 8101 	bne.w	c750 <cbprintf_package_convert+0x2ac>
		out_len = (int)in_len;
    c54e:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    c550:	2600      	movs	r6, #0
		out_len = (int)in_len;
    c552:	6abd      	ldr	r5, [r7, #40]	; 0x28
		if (ro_cpy) {
    c554:	eb09 030b 	add.w	r3, r9, fp
			for (int i = 0; i < ros_nbr; i++) {
    c558:	4543      	cmp	r3, r8
    c55a:	d14e      	bne.n	c5fa <cbprintf_package_convert+0x156>
    c55c:	44d9      	add	r9, fp
    c55e:	e013      	b.n	c588 <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
    c560:	f01a 0f02 	tst.w	sl, #2
    c564:	d0d1      	beq.n	c50a <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
    c566:	7823      	ldrb	r3, [r4, #0]
    c568:	4699      	mov	r9, r3
    c56a:	627b      	str	r3, [r7, #36]	; 0x24
    c56c:	009b      	lsls	r3, r3, #2
    c56e:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c570:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    c572:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c576:	623b      	str	r3, [r7, #32]
	if (cb == NULL) {
    c578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c57a:	2b00      	cmp	r3, #0
    c57c:	d17c      	bne.n	c678 <cbprintf_package_convert+0x1d4>
		out_len = (int)in_len;
    c57e:	6abd      	ldr	r5, [r7, #40]	; 0x28
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c580:	f1bb 0f00 	cmp.w	fp, #0
    c584:	d150      	bne.n	c628 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
    c586:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
    c588:	f01a 0f05 	tst.w	sl, #5
    c58c:	bf0c      	ite	eq
    c58e:	2302      	moveq	r3, #2
    c590:	2301      	movne	r3, #1
    c592:	62fb      	str	r3, [r7, #44]	; 0x2c
    c594:	69bb      	ldr	r3, [r7, #24]
    c596:	eb09 0b43 	add.w	fp, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c59a:	f00a 0302 	and.w	r3, sl, #2
    c59e:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < rws_nbr; i++) {
    c5a0:	45d9      	cmp	r9, fp
    c5a2:	d0b9      	beq.n	c518 <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
    c5a4:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    c5a8:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c5ac:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c5b0:	4b70      	ldr	r3, [pc, #448]	; (c774 <cbprintf_package_convert+0x2d0>)
    c5b2:	4598      	cmp	r8, r3
    c5b4:	d302      	bcc.n	c5bc <cbprintf_package_convert+0x118>
    c5b6:	4b70      	ldr	r3, [pc, #448]	; (c778 <cbprintf_package_convert+0x2d4>)
    c5b8:	4598      	cmp	r8, r3
    c5ba:	d33b      	bcc.n	c634 <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c5bc:	697b      	ldr	r3, [r7, #20]
    c5be:	2b00      	cmp	r3, #0
    c5c0:	d045      	beq.n	c64e <cbprintf_package_convert+0x1aa>
    c5c2:	6a38      	ldr	r0, [r7, #32]
    c5c4:	f01d fdf0 	bl	2a1a8 <is_ptr>
    c5c8:	2800      	cmp	r0, #0
    c5ca:	d040      	beq.n	c64e <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    c5cc:	46e8      	mov	r8, sp
    c5ce:	b08a      	sub	sp, #40	; 0x28
    c5d0:	466a      	mov	r2, sp
    c5d2:	4b6a      	ldr	r3, [pc, #424]	; (c77c <cbprintf_package_convert+0x2d8>)
    c5d4:	6153      	str	r3, [r2, #20]
    c5d6:	6a3b      	ldr	r3, [r7, #32]
    c5d8:	e9c2 3106 	strd	r3, r1, [r2, #24]
    c5dc:	f44f 7300 	mov.w	r3, #512	; 0x200
    c5e0:	8413      	strh	r3, [r2, #32]
    c5e2:	4b67      	ldr	r3, [pc, #412]	; (c780 <cbprintf_package_convert+0x2dc>)
    c5e4:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c5e8:	2300      	movs	r3, #0
    c5ea:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    c5ee:	4865      	ldr	r0, [pc, #404]	; (c784 <cbprintf_package_convert+0x2e0>)
    c5f0:	f002 f93a 	bl	e868 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    c5f4:	3d02      	subs	r5, #2
    c5f6:	46c5      	mov	sp, r8
				continue;
    c5f8:	e7d2      	b.n	c5a0 <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
    c5fa:	f818 2b01 	ldrb.w	r2, [r8], #1
    c5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c600:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    c604:	f7fc febf 	bl	9386 <strlen>
				if (strl && strl_cnt < strl_len) {
    c608:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c60e:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    c610:	b142      	cbz	r2, c624 <cbprintf_package_convert+0x180>
    c612:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    c616:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    c618:	bf3e      	ittt	cc
    c61a:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
    c61e:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    c622:	3601      	addcc	r6, #1
				out_len += len;
    c624:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    c626:	e797      	b.n	c558 <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c628:	f01a 0604 	ands.w	r6, sl, #4
	size_t strl_cnt = 0;
    c62c:	bf1c      	itt	ne
    c62e:	6afe      	ldrne	r6, [r7, #44]	; 0x2c
				str_pos += ros_nbr;
    c630:	44d9      	addne	r9, fp
    c632:	e7a9      	b.n	c588 <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c634:	697b      	ldr	r3, [r7, #20]
    c636:	b123      	cbz	r3, c642 <cbprintf_package_convert+0x19e>
    c638:	6a38      	ldr	r0, [r7, #32]
    c63a:	f01d fdb5 	bl	2a1a8 <is_ptr>
    c63e:	2800      	cmp	r0, #0
    c640:	d1c4      	bne.n	c5cc <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c642:	f01a 0f01 	tst.w	sl, #1
    c646:	d105      	bne.n	c654 <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
    c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c64a:	1aed      	subs	r5, r5, r3
    c64c:	e7a8      	b.n	c5a0 <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c650:	2b00      	cmp	r3, #0
    c652:	d0a5      	beq.n	c5a0 <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
    c654:	4640      	mov	r0, r8
    c656:	f7fc fe96 	bl	9386 <strlen>
				if (strl && strl_cnt < strl_len) {
    c65a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c65e:	b14b      	cbz	r3, c674 <cbprintf_package_convert+0x1d0>
    c660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c664:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    c666:	bf3f      	itttt	cc
    c668:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
		return 1 + strlen(str);
    c66c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    c66e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    c672:	3601      	addcc	r6, #1
				out_len += (len - 1);
    c674:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    c676:	e793      	b.n	c5a0 <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c678:	f1bb 0f00 	cmp.w	fp, #0
    c67c:	d06e      	beq.n	c75c <cbprintf_package_convert+0x2b8>
    c67e:	f01a 0604 	ands.w	r6, sl, #4
    c682:	d06e      	beq.n	c762 <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
    c684:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    c686:	2600      	movs	r6, #0
		dst = keep_str_pos;
    c688:	f107 0048 	add.w	r0, r7, #72	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c68c:	465a      	mov	r2, fp
    c68e:	4649      	mov	r1, r9
    c690:	f023 ff59 	bl	30546 <memcpy>
	str_pos += ros_nbr;
    c694:	69bb      	ldr	r3, [r7, #24]
    c696:	44d9      	add	r9, fp
	for (int i = 0; i < rws_nbr; i++) {
    c698:	005b      	lsls	r3, r3, #1
    c69a:	60fb      	str	r3, [r7, #12]
    c69c:	69bb      	ldr	r3, [r7, #24]
    c69e:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    c6a2:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c6a4:	f00a 0302 	and.w	r3, sl, #2
    c6a8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    c6aa:	68bb      	ldr	r3, [r7, #8]
    c6ac:	454b      	cmp	r3, r9
    c6ae:	d16b      	bne.n	c788 <cbprintf_package_convert+0x2e4>
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6b0:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c6b2:	f01a 0f02 	tst.w	sl, #2
    c6b6:	bf18      	it	ne
    c6b8:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6ba:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c6be:	bf08      	it	eq
    c6c0:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c6c4:	f01a 0f01 	tst.w	sl, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6c8:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c6ca:	f040 80e1 	bne.w	c890 <cbprintf_package_convert+0x3ec>
    c6ce:	f01a 0f04 	tst.w	sl, #4
    c6d2:	bf14      	ite	ne
    c6d4:	4640      	movne	r0, r8
    c6d6:	2000      	moveq	r0, #0
    c6d8:	623b      	str	r3, [r7, #32]
	*in_desc = out_desc;
    c6da:	7062      	strb	r2, [r4, #1]
    c6dc:	70a0      	strb	r0, [r4, #2]
    c6de:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    c6e0:	4620      	mov	r0, r4
    c6e2:	69fa      	ldr	r2, [r7, #28]
    c6e4:	6939      	ldr	r1, [r7, #16]
    c6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c6e8:	4798      	blx	r3
	if (rv < 0) {
    c6ea:	1e05      	subs	r5, r0, #0
    c6ec:	f6ff af14 	blt.w	c518 <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
    c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c6f2:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    c6f4:	7023      	strb	r3, [r4, #0]
    c6f6:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c6f8:	69fa      	ldr	r2, [r7, #28]
	*in_desc = in_desc_backup;
    c6fa:	7063      	strb	r3, [r4, #1]
    c6fc:	69bb      	ldr	r3, [r7, #24]
    c6fe:	f884 b002 	strb.w	fp, [r4, #2]
    c702:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c704:	f107 0048 	add.w	r0, r7, #72	; 0x48
    c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c70a:	4798      	blx	r3
	if (rv < 0) {
    c70c:	f1b0 0800 	subs.w	r8, r0, #0
    c710:	f2c0 80ec 	blt.w	c8ec <cbprintf_package_convert+0x448>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c714:	6abb      	ldr	r3, [r7, #40]	; 0x28
	rv = cb(str_pos, strs_len, ctx);
    c716:	4648      	mov	r0, r9
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c718:	eba3 010b 	sub.w	r1, r3, fp
    c71c:	693b      	ldr	r3, [r7, #16]
	rv = cb(str_pos, strs_len, ctx);
    c71e:	69fa      	ldr	r2, [r7, #28]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c720:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    c722:	68fb      	ldr	r3, [r7, #12]
    c724:	1ac9      	subs	r1, r1, r3
    c726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c728:	4798      	blx	r3
	if (rv < 0) {
    c72a:	2800      	cmp	r0, #0
    c72c:	f2c0 80e0 	blt.w	c8f0 <cbprintf_package_convert+0x44c>
	for (int i = 0; i < scpy_cnt; i++) {
    c730:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    c734:	44a8      	add	r8, r5
	out_len += rv;
    c736:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    c73a:	f107 0a38 	add.w	sl, r7, #56	; 0x38
	for (int i = 0; i < scpy_cnt; i++) {
    c73e:	45b3      	cmp	fp, r6
    c740:	f2c0 80a8 	blt.w	c894 <cbprintf_package_convert+0x3f0>
	(void)cb(NULL, 0, ctx);
    c744:	2100      	movs	r1, #0
    c746:	69fa      	ldr	r2, [r7, #28]
    c748:	4608      	mov	r0, r1
    c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c74c:	4798      	blx	r3
	return out_len;
    c74e:	e6e3      	b.n	c518 <cbprintf_package_convert+0x74>
	if (cb == NULL) {
    c750:	465e      	mov	r6, fp
    c752:	f04f 0800 	mov.w	r8, #0
    c756:	f107 0038 	add.w	r0, r7, #56	; 0x38
    c75a:	e797      	b.n	c68c <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
    c75c:	465e      	mov	r6, fp
		keep_cnt = 0;
    c75e:	46d8      	mov	r8, fp
    c760:	e798      	b.n	c694 <cbprintf_package_convert+0x1f0>
    c762:	46b0      	mov	r8, r6
    c764:	e796      	b.n	c694 <cbprintf_package_convert+0x1f0>
    c766:	bf00      	nop
    c768:	0003301d 	.word	0x0003301d
    c76c:	00032f88 	.word	0x00032f88
    c770:	00032629 	.word	0x00032629
    c774:	00030df4 	.word	0x00030df4
    c778:	00038df4 	.word	0x00038df4
    c77c:	00033038 	.word	0x00033038
    c780:	01000004 	.word	0x01000004
    c784:	00031504 	.word	0x00031504
		uint8_t arg_idx = *str_pos++;
    c788:	f819 1b02 	ldrb.w	r1, [r9], #2
    c78c:	4b59      	ldr	r3, [pc, #356]	; (c8f4 <cbprintf_package_convert+0x450>)
		uint8_t arg_pos = *str_pos++;
    c78e:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    c792:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    c796:	4298      	cmp	r0, r3
    c798:	d302      	bcc.n	c7a0 <cbprintf_package_convert+0x2fc>
    c79a:	4b57      	ldr	r3, [pc, #348]	; (c8f8 <cbprintf_package_convert+0x454>)
    c79c:	4298      	cmp	r0, r3
    c79e:	d316      	bcc.n	c7ce <cbprintf_package_convert+0x32a>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c7a0:	697b      	ldr	r3, [r7, #20]
    c7a2:	b12b      	cbz	r3, c7b0 <cbprintf_package_convert+0x30c>
    c7a4:	6a38      	ldr	r0, [r7, #32]
    c7a6:	f01d fcff 	bl	2a1a8 <is_ptr>
    c7aa:	2800      	cmp	r0, #0
    c7ac:	f47f af7d 	bne.w	c6aa <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c7b0:	687b      	ldr	r3, [r7, #4]
    c7b2:	2b00      	cmp	r3, #0
    c7b4:	d04a      	beq.n	c84c <cbprintf_package_convert+0x3a8>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c7b6:	2e0f      	cmp	r6, #15
    c7b8:	d93e      	bls.n	c838 <cbprintf_package_convert+0x394>
    c7ba:	4950      	ldr	r1, [pc, #320]	; (c8fc <cbprintf_package_convert+0x458>)
    c7bc:	f44f 6389 	mov.w	r3, #1096	; 0x448
    c7c0:	4a4f      	ldr	r2, [pc, #316]	; (c900 <cbprintf_package_convert+0x45c>)
    c7c2:	4850      	ldr	r0, [pc, #320]	; (c904 <cbprintf_package_convert+0x460>)
    c7c4:	f01d ff65 	bl	2a692 <assert_print>
    c7c8:	f44f 6189 	mov.w	r1, #1096	; 0x448
    c7cc:	e67e      	b.n	c4cc <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c7ce:	697b      	ldr	r3, [r7, #20]
    c7d0:	b12b      	cbz	r3, c7de <cbprintf_package_convert+0x33a>
    c7d2:	6a38      	ldr	r0, [r7, #32]
    c7d4:	f01d fce8 	bl	2a1a8 <is_ptr>
    c7d8:	2800      	cmp	r0, #0
    c7da:	f47f af66 	bne.w	c6aa <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c7de:	f01a 0f01 	tst.w	sl, #1
    c7e2:	d00b      	beq.n	c7fc <cbprintf_package_convert+0x358>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c7e4:	2e0f      	cmp	r6, #15
    c7e6:	d927      	bls.n	c838 <cbprintf_package_convert+0x394>
    c7e8:	4944      	ldr	r1, [pc, #272]	; (c8fc <cbprintf_package_convert+0x458>)
    c7ea:	f240 433e 	movw	r3, #1086	; 0x43e
    c7ee:	4a44      	ldr	r2, [pc, #272]	; (c900 <cbprintf_package_convert+0x45c>)
    c7f0:	4844      	ldr	r0, [pc, #272]	; (c904 <cbprintf_package_convert+0x460>)
    c7f2:	f01d ff4e 	bl	2a692 <assert_print>
    c7f6:	f240 413e 	movw	r1, #1086	; 0x43e
    c7fa:	e667      	b.n	c4cc <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c7fc:	f01a 0f04 	tst.w	sl, #4
    c800:	f43f af53 	beq.w	c6aa <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c804:	f1b8 0f0f 	cmp.w	r8, #15
    c808:	d909      	bls.n	c81e <cbprintf_package_convert+0x37a>
    c80a:	493f      	ldr	r1, [pc, #252]	; (c908 <cbprintf_package_convert+0x464>)
    c80c:	f240 4341 	movw	r3, #1089	; 0x441
    c810:	4a3b      	ldr	r2, [pc, #236]	; (c900 <cbprintf_package_convert+0x45c>)
    c812:	483c      	ldr	r0, [pc, #240]	; (c904 <cbprintf_package_convert+0x460>)
    c814:	f01d ff3d 	bl	2a692 <assert_print>
    c818:	f240 4141 	movw	r1, #1089	; 0x441
    c81c:	e656      	b.n	c4cc <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
    c81e:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c822:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c826:	f108 0101 	add.w	r1, r8, #1
    c82a:	eb03 0802 	add.w	r8, r3, r2
    c82e:	f808 5c10 	strb.w	r5, [r8, #-16]
    c832:	fa5f f881 	uxtb.w	r8, r1
    c836:	e738      	b.n	c6aa <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    c838:	f106 0328 	add.w	r3, r6, #40	; 0x28
    c83c:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c840:	1c71      	adds	r1, r6, #1
    c842:	189e      	adds	r6, r3, r2
    c844:	f806 5c20 	strb.w	r5, [r6, #-32]
    c848:	b2ce      	uxtb	r6, r1
    c84a:	e72e      	b.n	c6aa <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c84c:	f1b8 0f0f 	cmp.w	r8, #15
    c850:	d909      	bls.n	c866 <cbprintf_package_convert+0x3c2>
    c852:	492d      	ldr	r1, [pc, #180]	; (c908 <cbprintf_package_convert+0x464>)
    c854:	f240 434b 	movw	r3, #1099	; 0x44b
    c858:	4a29      	ldr	r2, [pc, #164]	; (c900 <cbprintf_package_convert+0x45c>)
    c85a:	482a      	ldr	r0, [pc, #168]	; (c904 <cbprintf_package_convert+0x460>)
    c85c:	f01d ff19 	bl	2a692 <assert_print>
    c860:	f240 414b 	movw	r1, #1099	; 0x44b
    c864:	e632      	b.n	c4cc <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
    c866:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c86a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c86e:	f108 0001 	add.w	r0, r8, #1
    c872:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    c876:	f107 0358 	add.w	r3, r7, #88	; 0x58
    c87a:	f108 0802 	add.w	r8, r8, #2
    c87e:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    c882:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    c886:	fa5f f888 	uxtb.w	r8, r8
    c88a:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    c88e:	e70c      	b.n	c6aa <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c890:	2000      	movs	r0, #0
    c892:	e721      	b.n	c6d8 <cbprintf_package_convert+0x234>
		uint8_t loc = cpy_str_pos[i];
    c894:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    c898:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    c89c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t str_len = strl ? strl[i] : 0;
    c8a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c8a4:	b1fb      	cbz	r3, c8e6 <cbprintf_package_convert+0x442>
    c8a6:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    c8aa:	2101      	movs	r1, #1
    c8ac:	69fa      	ldr	r2, [r7, #28]
    c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8b0:	f107 0037 	add.w	r0, r7, #55	; 0x37
    c8b4:	4798      	blx	r3
		if (rv < 0) {
    c8b6:	2800      	cmp	r0, #0
    c8b8:	db1a      	blt.n	c8f0 <cbprintf_package_convert+0x44c>
		out_len += rv;
    c8ba:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    c8bc:	f1b8 0f00 	cmp.w	r8, #0
    c8c0:	d106      	bne.n	c8d0 <cbprintf_package_convert+0x42c>
    c8c2:	4648      	mov	r0, r9
    c8c4:	f7fc fd5f 	bl	9386 <strlen>
    c8c8:	f100 0801 	add.w	r8, r0, #1
    c8cc:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    c8d0:	4641      	mov	r1, r8
    c8d2:	4648      	mov	r0, r9
    c8d4:	69fa      	ldr	r2, [r7, #28]
    c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8d8:	4798      	blx	r3
		if (rv < 0) {
    c8da:	2800      	cmp	r0, #0
    c8dc:	db08      	blt.n	c8f0 <cbprintf_package_convert+0x44c>
		out_len += rv;
    c8de:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    c8e0:	f10b 0b01 	add.w	fp, fp, #1
    c8e4:	e72b      	b.n	c73e <cbprintf_package_convert+0x29a>
		uint16_t str_len = strl ? strl[i] : 0;
    c8e6:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
    c8ea:	e7de      	b.n	c8aa <cbprintf_package_convert+0x406>
    c8ec:	4645      	mov	r5, r8
    c8ee:	e613      	b.n	c518 <cbprintf_package_convert+0x74>
    c8f0:	4605      	mov	r5, r0
    c8f2:	e611      	b.n	c518 <cbprintf_package_convert+0x74>
    c8f4:	00030df4 	.word	0x00030df4
    c8f8:	00038df4 	.word	0x00038df4
    c8fc:	000330db 	.word	0x000330db
    c900:	00032f88 	.word	0x00032f88
    c904:	00032629 	.word	0x00032629
    c908:	000330fa 	.word	0x000330fa

0000c90c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    c90c:	4b01      	ldr	r3, [pc, #4]	; (c914 <char_out+0x8>)
    c90e:	681b      	ldr	r3, [r3, #0]
    c910:	4718      	bx	r3
    c912:	bf00      	nop
    c914:	200083f8 	.word	0x200083f8

0000c918 <__printk_hook_install>:
	_char_out = fn;
    c918:	4b01      	ldr	r3, [pc, #4]	; (c920 <__printk_hook_install+0x8>)
    c91a:	6018      	str	r0, [r3, #0]
}
    c91c:	4770      	bx	lr
    c91e:	bf00      	nop
    c920:	200083f8 	.word	0x200083f8

0000c924 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    c924:	b507      	push	{r0, r1, r2, lr}
    c926:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c928:	2100      	movs	r1, #0
    c92a:	4602      	mov	r2, r0
    c92c:	9100      	str	r1, [sp, #0]
    c92e:	4803      	ldr	r0, [pc, #12]	; (c93c <vprintk+0x18>)
    c930:	f000 fcb0 	bl	d294 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    c934:	b003      	add	sp, #12
    c936:	f85d fb04 	ldr.w	pc, [sp], #4
    c93a:	bf00      	nop
    c93c:	0000c90d 	.word	0x0000c90d

0000c940 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c940:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    c942:	2500      	movs	r5, #0
{
    c944:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    c946:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    c94a:	4604      	mov	r4, r0
    c94c:	9500      	str	r5, [sp, #0]
    c94e:	a903      	add	r1, sp, #12
    c950:	4805      	ldr	r0, [pc, #20]	; (c968 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    c952:	9505      	str	r5, [sp, #20]
    c954:	f000 fc9e 	bl	d294 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    c958:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    c95c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c95e:	bfb8      	it	lt
    c960:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c962:	b007      	add	sp, #28
    c964:	bd30      	pop	{r4, r5, pc}
    c966:	bf00      	nop
    c968:	0002a2e9 	.word	0x0002a2e9

0000c96c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    c96c:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    c96e:	460c      	mov	r4, r1
    c970:	2900      	cmp	r1, #0
    c972:	d034      	beq.n	c9de <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    c974:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c976:	1f0b      	subs	r3, r1, #4
    c978:	1a9b      	subs	r3, r3, r2
    c97a:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    c97c:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c980:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c982:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    c984:	07e8      	lsls	r0, r5, #31
    c986:	d40d      	bmi.n	c9a4 <sys_heap_free+0x38>
    c988:	23af      	movs	r3, #175	; 0xaf
    c98a:	4a15      	ldr	r2, [pc, #84]	; (c9e0 <sys_heap_free+0x74>)
    c98c:	4915      	ldr	r1, [pc, #84]	; (c9e4 <sys_heap_free+0x78>)
    c98e:	4816      	ldr	r0, [pc, #88]	; (c9e8 <sys_heap_free+0x7c>)
    c990:	f01d fe7f 	bl	2a692 <assert_print>
    c994:	4621      	mov	r1, r4
    c996:	4815      	ldr	r0, [pc, #84]	; (c9ec <sys_heap_free+0x80>)
    c998:	f01d fe7b 	bl	2a692 <assert_print>
    c99c:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    c99e:	4810      	ldr	r0, [pc, #64]	; (c9e0 <sys_heap_free+0x74>)
    c9a0:	f01d fe70 	bl	2a684 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    c9a4:	4610      	mov	r0, r2
    c9a6:	f01d fcd6 	bl	2a356 <chunk_size>
    c9aa:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    c9ac:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c9b0:	1b80      	subs	r0, r0, r6
    c9b2:	4281      	cmp	r1, r0
    c9b4:	d00b      	beq.n	c9ce <sys_heap_free+0x62>
    c9b6:	23b7      	movs	r3, #183	; 0xb7
    c9b8:	4a09      	ldr	r2, [pc, #36]	; (c9e0 <sys_heap_free+0x74>)
    c9ba:	490d      	ldr	r1, [pc, #52]	; (c9f0 <sys_heap_free+0x84>)
    c9bc:	480a      	ldr	r0, [pc, #40]	; (c9e8 <sys_heap_free+0x7c>)
    c9be:	f01d fe68 	bl	2a692 <assert_print>
    c9c2:	4621      	mov	r1, r4
    c9c4:	480b      	ldr	r0, [pc, #44]	; (c9f4 <sys_heap_free+0x88>)
    c9c6:	f01d fe64 	bl	2a692 <assert_print>
    c9ca:	21b7      	movs	r1, #183	; 0xb7
    c9cc:	e7e7      	b.n	c99e <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c9ce:	f025 0501 	bic.w	r5, r5, #1
    c9d2:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    c9d4:	4610      	mov	r0, r2
}
    c9d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    c9da:	f01d bd79 	b.w	2a4d0 <free_chunk>
}
    c9de:	bd70      	pop	{r4, r5, r6, pc}
    c9e0:	0003312b 	.word	0x0003312b
    c9e4:	0003314c 	.word	0x0003314c
    c9e8:	00032629 	.word	0x00032629
    c9ec:	0003315d 	.word	0x0003315d
    c9f0:	00033195 	.word	0x00033195
    c9f4:	000331bb 	.word	0x000331bb

0000c9f8 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9fc:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    c9fe:	400b      	ands	r3, r1
{
    ca00:	460f      	mov	r7, r1
    ca02:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    ca04:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    ca06:	d010      	beq.n	ca2a <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    ca08:	f1c1 0900 	rsb	r9, r1, #0
    ca0c:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    ca10:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca12:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    ca14:	2a04      	cmp	r2, #4
    ca16:	bf28      	it	cs
    ca18:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca1a:	4219      	tst	r1, r3
    ca1c:	d10c      	bne.n	ca38 <sys_heap_aligned_alloc+0x40>
    ca1e:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    ca20:	b9e4      	cbnz	r4, ca5c <sys_heap_aligned_alloc+0x64>
		return NULL;
    ca22:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ca24:	4628      	mov	r0, r5
    ca26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ca2a:	2904      	cmp	r1, #4
    ca2c:	d813      	bhi.n	ca56 <sys_heap_aligned_alloc+0x5e>
}
    ca2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ca32:	4611      	mov	r1, r2
    ca34:	f01d bd7d 	b.w	2a532 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca38:	492c      	ldr	r1, [pc, #176]	; (caec <sys_heap_aligned_alloc+0xf4>)
    ca3a:	f44f 73a2 	mov.w	r3, #324	; 0x144
    ca3e:	4a2c      	ldr	r2, [pc, #176]	; (caf0 <sys_heap_aligned_alloc+0xf8>)
    ca40:	482c      	ldr	r0, [pc, #176]	; (caf4 <sys_heap_aligned_alloc+0xfc>)
    ca42:	f01d fe26 	bl	2a692 <assert_print>
    ca46:	482c      	ldr	r0, [pc, #176]	; (caf8 <sys_heap_aligned_alloc+0x100>)
    ca48:	f01d fe23 	bl	2a692 <assert_print>
    ca4c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ca50:	4827      	ldr	r0, [pc, #156]	; (caf0 <sys_heap_aligned_alloc+0xf8>)
    ca52:	f01d fe17 	bl	2a684 <assert_post_action>
		rew = 0;
    ca56:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    ca58:	2204      	movs	r2, #4
    ca5a:	e7e1      	b.n	ca20 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    ca5c:	68b3      	ldr	r3, [r6, #8]
    ca5e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ca62:	d9de      	bls.n	ca22 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ca64:	f104 010b 	add.w	r1, r4, #11
    ca68:	4439      	add	r1, r7
    ca6a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ca6c:	4630      	mov	r0, r6
    ca6e:	08c9      	lsrs	r1, r1, #3
    ca70:	f01d fcc7 	bl	2a402 <alloc_chunk>
	if (c0 == 0) {
    ca74:	4680      	mov	r8, r0
    ca76:	2800      	cmp	r0, #0
    ca78:	d0d3      	beq.n	ca22 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    ca7a:	f109 0504 	add.w	r5, r9, #4
    ca7e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    ca82:	1e7b      	subs	r3, r7, #1
    ca84:	4435      	add	r5, r6
    ca86:	441d      	add	r5, r3
    ca88:	427f      	negs	r7, r7
    ca8a:	403d      	ands	r5, r7
    ca8c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca90:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca92:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca94:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca96:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca98:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ca9c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ca9e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    caa2:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    caa6:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    caaa:	d208      	bcs.n	cabe <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    caac:	4601      	mov	r1, r0
    caae:	463a      	mov	r2, r7
    cab0:	4630      	mov	r0, r6
    cab2:	f01d fcf3 	bl	2a49c <split_chunks>
		free_list_add(h, c0);
    cab6:	4641      	mov	r1, r8
    cab8:	4630      	mov	r0, r6
    caba:	f01d fc51 	bl	2a360 <free_list_add>
	return c + chunk_size(h, c);
    cabe:	4639      	mov	r1, r7
    cac0:	4630      	mov	r0, r6
    cac2:	f01d fc48 	bl	2a356 <chunk_size>
    cac6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    cac8:	4284      	cmp	r4, r0
    caca:	d207      	bcs.n	cadc <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    cacc:	4630      	mov	r0, r6
    cace:	4622      	mov	r2, r4
    cad0:	f01d fce4 	bl	2a49c <split_chunks>
		free_list_add(h, c_end);
    cad4:	4621      	mov	r1, r4
    cad6:	4630      	mov	r0, r6
    cad8:	f01d fc42 	bl	2a360 <free_list_add>
	void *cmem = &buf[c];
    cadc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cae0:	8873      	ldrh	r3, [r6, #2]
    cae2:	f043 0301 	orr.w	r3, r3, #1
    cae6:	8073      	strh	r3, [r6, #2]
    cae8:	e79c      	b.n	ca24 <sys_heap_aligned_alloc+0x2c>
    caea:	bf00      	nop
    caec:	000331f7 	.word	0x000331f7
    caf0:	0003312b 	.word	0x0003312b
    caf4:	00032629 	.word	0x00032629
    caf8:	00033212 	.word	0x00033212

0000cafc <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cafc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb02:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cb04:	d30e      	bcc.n	cb24 <sys_heap_init+0x28>
    cb06:	493a      	ldr	r1, [pc, #232]	; (cbf0 <sys_heap_init+0xf4>)
    cb08:	f240 13eb 	movw	r3, #491	; 0x1eb
    cb0c:	4a39      	ldr	r2, [pc, #228]	; (cbf4 <sys_heap_init+0xf8>)
    cb0e:	483a      	ldr	r0, [pc, #232]	; (cbf8 <sys_heap_init+0xfc>)
    cb10:	f01d fdbf 	bl	2a692 <assert_print>
    cb14:	4839      	ldr	r0, [pc, #228]	; (cbfc <sys_heap_init+0x100>)
    cb16:	f01d fdbc 	bl	2a692 <assert_print>
    cb1a:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    cb1e:	4835      	ldr	r0, [pc, #212]	; (cbf4 <sys_heap_init+0xf8>)
    cb20:	f01d fdb0 	bl	2a684 <assert_post_action>
    cb24:	2a04      	cmp	r2, #4
    cb26:	d80c      	bhi.n	cb42 <sys_heap_init+0x46>
    cb28:	4935      	ldr	r1, [pc, #212]	; (cc00 <sys_heap_init+0x104>)
    cb2a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    cb2e:	4a31      	ldr	r2, [pc, #196]	; (cbf4 <sys_heap_init+0xf8>)
    cb30:	4831      	ldr	r0, [pc, #196]	; (cbf8 <sys_heap_init+0xfc>)
    cb32:	f01d fdae 	bl	2a692 <assert_print>
    cb36:	4833      	ldr	r0, [pc, #204]	; (cc04 <sys_heap_init+0x108>)
    cb38:	f01d fdab 	bl	2a692 <assert_print>
    cb3c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    cb40:	e7ed      	b.n	cb1e <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    cb42:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cb44:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cb46:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cb48:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cb4c:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb50:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cb52:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb54:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cb58:	d80c      	bhi.n	cb74 <sys_heap_init+0x78>
    cb5a:	492b      	ldr	r1, [pc, #172]	; (cc08 <sys_heap_init+0x10c>)
    cb5c:	f240 13fb 	movw	r3, #507	; 0x1fb
    cb60:	4a24      	ldr	r2, [pc, #144]	; (cbf4 <sys_heap_init+0xf8>)
    cb62:	4825      	ldr	r0, [pc, #148]	; (cbf8 <sys_heap_init+0xfc>)
    cb64:	f01d fd95 	bl	2a692 <assert_print>
    cb68:	4826      	ldr	r0, [pc, #152]	; (cc04 <sys_heap_init+0x108>)
    cb6a:	f01d fd92 	bl	2a692 <assert_print>
    cb6e:	f240 11fb 	movw	r1, #507	; 0x1fb
    cb72:	e7d4      	b.n	cb1e <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cb74:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    cb78:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cb7a:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cb7c:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cb80:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    cb84:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cb86:	3107      	adds	r1, #7
    cb88:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cb8a:	1c4d      	adds	r5, r1, #1
    cb8c:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    cb8e:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    cb90:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cb92:	d90c      	bls.n	cbae <sys_heap_init+0xb2>
    cb94:	491d      	ldr	r1, [pc, #116]	; (cc0c <sys_heap_init+0x110>)
    cb96:	f44f 7303 	mov.w	r3, #524	; 0x20c
    cb9a:	4a16      	ldr	r2, [pc, #88]	; (cbf4 <sys_heap_init+0xf8>)
    cb9c:	4816      	ldr	r0, [pc, #88]	; (cbf8 <sys_heap_init+0xfc>)
    cb9e:	f01d fd78 	bl	2a692 <assert_print>
    cba2:	4818      	ldr	r0, [pc, #96]	; (cc04 <sys_heap_init+0x108>)
    cba4:	f01d fd75 	bl	2a692 <assert_print>
    cba8:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cbac:	e7b7      	b.n	cb1e <sys_heap_init+0x22>
    cbae:	f100 050c 	add.w	r5, r0, #12
    cbb2:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cbb6:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    cbba:	42b5      	cmp	r5, r6
    cbbc:	d1fb      	bne.n	cbb6 <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cbbe:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cbc0:	f045 0501 	orr.w	r5, r5, #1
    cbc4:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    cbc6:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    cbc8:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cbcc:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    cbce:	8004      	strh	r4, [r0, #0]
    cbd0:	8077      	strh	r7, [r6, #2]
    cbd2:	1886      	adds	r6, r0, r2
    cbd4:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    cbd8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    cbdc:	8074      	strh	r4, [r6, #2]
    cbde:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cbe0:	885a      	ldrh	r2, [r3, #2]
    cbe2:	f042 0201 	orr.w	r2, r2, #1
    cbe6:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cbe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    cbec:	f01d bbb8 	b.w	2a360 <free_list_add>
    cbf0:	0003322f 	.word	0x0003322f
    cbf4:	0003312b 	.word	0x0003312b
    cbf8:	00032629 	.word	0x00032629
    cbfc:	00033245 	.word	0x00033245
    cc00:	0003325c 	.word	0x0003325c
    cc04:	0003327d 	.word	0x0003327d
    cc08:	00033296 	.word	0x00033296
    cc0c:	000332bf 	.word	0x000332bf

0000cc10 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cc10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc14:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc16:	8ba3      	ldrh	r3, [r4, #28]
{
    cc18:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cc1a:	0719      	lsls	r1, r3, #28
{
    cc1c:	4615      	mov	r5, r2
	if (processing) {
    cc1e:	d412      	bmi.n	cc46 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cc20:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc22:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    cc26:	d164      	bne.n	ccf2 <process_event+0xe2>
			evt = process_recheck(mgr);
    cc28:	4620      	mov	r0, r4
    cc2a:	f01d fcab 	bl	2a584 <process_recheck>
		}

		if (evt == EVT_NOP) {
    cc2e:	b188      	cbz	r0, cc54 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cc30:	3801      	subs	r0, #1
    cc32:	2804      	cmp	r0, #4
    cc34:	f200 8134 	bhi.w	cea0 <process_event+0x290>
    cc38:	e8df f010 	tbh	[pc, r0, lsl #1]
    cc3c:	0132005b 	.word	0x0132005b
    cc40:	00d10081 	.word	0x00d10081
    cc44:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    cc46:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cc48:	bf0c      	ite	eq
    cc4a:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cc4e:	f043 0120 	orrne.w	r1, r3, #32
    cc52:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    cc54:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc56:	4620      	mov	r0, r4
    cc58:	f018 f9f8 	bl	2504c <z_spin_unlock_valid>
    cc5c:	2800      	cmp	r0, #0
    cc5e:	f040 819b 	bne.w	cf98 <process_event+0x388>
    cc62:	4998      	ldr	r1, [pc, #608]	; (cec4 <process_event+0x2b4>)
    cc64:	23c2      	movs	r3, #194	; 0xc2
    cc66:	4a98      	ldr	r2, [pc, #608]	; (cec8 <process_event+0x2b8>)
    cc68:	4898      	ldr	r0, [pc, #608]	; (cecc <process_event+0x2bc>)
    cc6a:	f01d fd12 	bl	2a692 <assert_print>
    cc6e:	4621      	mov	r1, r4
    cc70:	e0b0      	b.n	cdd4 <process_event+0x1c4>
    cc72:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cc76:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cc78:	2801      	cmp	r0, #1
    cc7a:	d81e      	bhi.n	ccba <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    cc7c:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    cc7e:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    cc80:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    cc82:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cc86:	d114      	bne.n	ccb2 <process_event+0xa2>
		*clients = mgr->clients;
    cc88:	463a      	mov	r2, r7
    cc8a:	e003      	b.n	cc94 <process_event+0x84>
				mgr->refs += 1U;
    cc8c:	8be0      	ldrh	r0, [r4, #30]
    cc8e:	3001      	adds	r0, #1
    cc90:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    cc92:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cc94:	2a00      	cmp	r2, #0
    cc96:	d1f9      	bne.n	cc8c <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc98:	f023 0307 	bic.w	r3, r3, #7
    cc9c:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    cca0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cca2:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cca4:	f01d fc6e 	bl	2a584 <process_recheck>
    cca8:	b390      	cbz	r0, cd10 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ccaa:	f042 0220 	orr.w	r2, r2, #32
    ccae:	83a2      	strh	r2, [r4, #28]
    ccb0:	e02e      	b.n	cd10 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ccb2:	f023 0307 	bic.w	r3, r3, #7
    ccb6:	b29a      	uxth	r2, r3
}
    ccb8:	e7f2      	b.n	cca0 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    ccba:	2a04      	cmp	r2, #4
    ccbc:	d133      	bne.n	cd26 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ccbe:	f023 0307 	bic.w	r3, r3, #7
    ccc2:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    ccc4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ccc6:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    ccc8:	f01d fc5c 	bl	2a584 <process_recheck>
    cccc:	b110      	cbz	r0, ccd4 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ccce:	f042 0220 	orr.w	r2, r2, #32
    ccd2:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ccd4:	8ba3      	ldrh	r3, [r4, #28]
    ccd6:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ccda:	4589      	cmp	r9, r1
    ccdc:	f040 80ea 	bne.w	ceb4 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cce0:	8ba1      	ldrh	r1, [r4, #28]
    cce2:	06ca      	lsls	r2, r1, #27
    cce4:	f140 814f 	bpl.w	cf86 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cce8:	f021 0310 	bic.w	r3, r1, #16
    ccec:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    ccee:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    ccf2:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ccf6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    ccf8:	f1b8 0f00 	cmp.w	r8, #0
    ccfc:	dab9      	bge.n	cc72 <process_event+0x62>
	list->head = NULL;
    ccfe:	2200      	movs	r2, #0
		*clients = mgr->clients;
    cd00:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd02:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    cd06:	e9c4 2200 	strd	r2, r2, [r4]
    cd0a:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd0e:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd10:	8ba3      	ldrh	r3, [r4, #28]
    cd12:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cd16:	4589      	cmp	r9, r1
    cd18:	f040 80cd 	bne.w	ceb6 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    cd1c:	2f00      	cmp	r7, #0
    cd1e:	d0df      	beq.n	cce0 <process_event+0xd0>
    cd20:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd22:	46b2      	mov	sl, r6
    cd24:	e044      	b.n	cdb0 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    cd26:	496a      	ldr	r1, [pc, #424]	; (ced0 <process_event+0x2c0>)
    cd28:	f240 131b 	movw	r3, #283	; 0x11b
    cd2c:	4a69      	ldr	r2, [pc, #420]	; (ced4 <process_event+0x2c4>)
    cd2e:	4867      	ldr	r0, [pc, #412]	; (cecc <process_event+0x2bc>)
    cd30:	f01d fcaf 	bl	2a692 <assert_print>
    cd34:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    cd38:	4866      	ldr	r0, [pc, #408]	; (ced4 <process_event+0x2c4>)
    cd3a:	f01d fca3 	bl	2a684 <assert_post_action>
    cd3e:	b149      	cbz	r1, cd54 <process_event+0x144>
    cd40:	4965      	ldr	r1, [pc, #404]	; (ced8 <process_event+0x2c8>)
    cd42:	f44f 73ab 	mov.w	r3, #342	; 0x156
    cd46:	4a63      	ldr	r2, [pc, #396]	; (ced4 <process_event+0x2c4>)
    cd48:	4860      	ldr	r0, [pc, #384]	; (cecc <process_event+0x2bc>)
    cd4a:	f01d fca2 	bl	2a692 <assert_print>
    cd4e:	f44f 71ab 	mov.w	r1, #342	; 0x156
    cd52:	e7f1      	b.n	cd38 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    cd54:	6823      	ldr	r3, [r4, #0]
    cd56:	b94b      	cbnz	r3, cd6c <process_event+0x15c>
    cd58:	4960      	ldr	r1, [pc, #384]	; (cedc <process_event+0x2cc>)
    cd5a:	f240 1357 	movw	r3, #343	; 0x157
    cd5e:	4a5d      	ldr	r2, [pc, #372]	; (ced4 <process_event+0x2c4>)
    cd60:	485a      	ldr	r0, [pc, #360]	; (cecc <process_event+0x2bc>)
    cd62:	f01d fc96 	bl	2a692 <assert_print>
    cd66:	f240 1157 	movw	r1, #343	; 0x157
    cd6a:	e7e5      	b.n	cd38 <process_event+0x128>
			transit = mgr->transitions->start;
    cd6c:	6923      	ldr	r3, [r4, #16]
    cd6e:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    cd70:	b94e      	cbnz	r6, cd86 <process_event+0x176>
    cd72:	495b      	ldr	r1, [pc, #364]	; (cee0 <process_event+0x2d0>)
    cd74:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    cd78:	4a56      	ldr	r2, [pc, #344]	; (ced4 <process_event+0x2c4>)
    cd7a:	4854      	ldr	r0, [pc, #336]	; (cecc <process_event+0x2bc>)
    cd7c:	f01d fc89 	bl	2a692 <assert_print>
    cd80:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    cd84:	e7d8      	b.n	cd38 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd86:	460f      	mov	r7, r1
		res = 0;
    cd88:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd8a:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd8e:	8ba3      	ldrh	r3, [r4, #28]
    cd90:	f023 0307 	bic.w	r3, r3, #7
    cd94:	f043 0306 	orr.w	r3, r3, #6
    cd98:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd9a:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    cd9c:	68a2      	ldr	r2, [r4, #8]
    cd9e:	2a00      	cmp	r2, #0
    cda0:	f040 808b 	bne.w	ceba <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    cda4:	2f00      	cmp	r7, #0
    cda6:	f040 808b 	bne.w	cec0 <process_event+0x2b0>
		    || (transit != NULL)) {
    cdaa:	2e00      	cmp	r6, #0
    cdac:	d098      	beq.n	cce0 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cdae:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cdb0:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    cdb4:	f104 0b14 	add.w	fp, r4, #20
    cdb8:	4658      	mov	r0, fp
			mgr->flags = flags;
    cdba:	83a3      	strh	r3, [r4, #28]
    cdbc:	f018 f946 	bl	2504c <z_spin_unlock_valid>
    cdc0:	2800      	cmp	r0, #0
    cdc2:	f040 8097 	bne.w	cef4 <process_event+0x2e4>
    cdc6:	493f      	ldr	r1, [pc, #252]	; (cec4 <process_event+0x2b4>)
    cdc8:	23c2      	movs	r3, #194	; 0xc2
    cdca:	4a3f      	ldr	r2, [pc, #252]	; (cec8 <process_event+0x2b8>)
    cdcc:	483f      	ldr	r0, [pc, #252]	; (cecc <process_event+0x2bc>)
    cdce:	f01d fc60 	bl	2a692 <assert_print>
    cdd2:	4659      	mov	r1, fp
    cdd4:	4843      	ldr	r0, [pc, #268]	; (cee4 <process_event+0x2d4>)
    cdd6:	f01d fc5c 	bl	2a692 <assert_print>
    cdda:	21c2      	movs	r1, #194	; 0xc2
    cddc:	e0ae      	b.n	cf3c <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    cdde:	2902      	cmp	r1, #2
    cde0:	d009      	beq.n	cdf6 <process_event+0x1e6>
    cde2:	4941      	ldr	r1, [pc, #260]	; (cee8 <process_event+0x2d8>)
    cde4:	f240 135d 	movw	r3, #349	; 0x15d
    cde8:	4a3a      	ldr	r2, [pc, #232]	; (ced4 <process_event+0x2c4>)
    cdea:	4838      	ldr	r0, [pc, #224]	; (cecc <process_event+0x2bc>)
    cdec:	f01d fc51 	bl	2a692 <assert_print>
    cdf0:	f240 115d 	movw	r1, #349	; 0x15d
    cdf4:	e7a0      	b.n	cd38 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    cdf6:	8be7      	ldrh	r7, [r4, #30]
    cdf8:	b14f      	cbz	r7, ce0e <process_event+0x1fe>
    cdfa:	493c      	ldr	r1, [pc, #240]	; (ceec <process_event+0x2dc>)
    cdfc:	f44f 73af 	mov.w	r3, #350	; 0x15e
    ce00:	4a34      	ldr	r2, [pc, #208]	; (ced4 <process_event+0x2c4>)
    ce02:	4832      	ldr	r0, [pc, #200]	; (cecc <process_event+0x2bc>)
    ce04:	f01d fc45 	bl	2a692 <assert_print>
    ce08:	f44f 71af 	mov.w	r1, #350	; 0x15e
    ce0c:	e794      	b.n	cd38 <process_event+0x128>
			transit = mgr->transitions->stop;
    ce0e:	6923      	ldr	r3, [r4, #16]
    ce10:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    ce12:	b94e      	cbnz	r6, ce28 <process_event+0x218>
    ce14:	4932      	ldr	r1, [pc, #200]	; (cee0 <process_event+0x2d0>)
    ce16:	f240 1361 	movw	r3, #353	; 0x161
    ce1a:	4a2e      	ldr	r2, [pc, #184]	; (ced4 <process_event+0x2c4>)
    ce1c:	482b      	ldr	r0, [pc, #172]	; (cecc <process_event+0x2bc>)
    ce1e:	f01d fc38 	bl	2a692 <assert_print>
    ce22:	f240 1161 	movw	r1, #353	; 0x161
    ce26:	e787      	b.n	cd38 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce28:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ce2a:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce2c:	f023 0307 	bic.w	r3, r3, #7
    ce30:	f043 0304 	orr.w	r3, r3, #4
    ce34:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce36:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce3a:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce3c:	e7ae      	b.n	cd9c <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    ce3e:	2901      	cmp	r1, #1
    ce40:	d009      	beq.n	ce56 <process_event+0x246>
    ce42:	492b      	ldr	r1, [pc, #172]	; (cef0 <process_event+0x2e0>)
    ce44:	f44f 73b2 	mov.w	r3, #356	; 0x164
    ce48:	4a22      	ldr	r2, [pc, #136]	; (ced4 <process_event+0x2c4>)
    ce4a:	4820      	ldr	r0, [pc, #128]	; (cecc <process_event+0x2bc>)
    ce4c:	f01d fc21 	bl	2a692 <assert_print>
    ce50:	f44f 71b2 	mov.w	r1, #356	; 0x164
    ce54:	e770      	b.n	cd38 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ce56:	6823      	ldr	r3, [r4, #0]
    ce58:	b94b      	cbnz	r3, ce6e <process_event+0x25e>
    ce5a:	4920      	ldr	r1, [pc, #128]	; (cedc <process_event+0x2cc>)
    ce5c:	f240 1365 	movw	r3, #357	; 0x165
    ce60:	4a1c      	ldr	r2, [pc, #112]	; (ced4 <process_event+0x2c4>)
    ce62:	481a      	ldr	r0, [pc, #104]	; (cecc <process_event+0x2bc>)
    ce64:	f01d fc15 	bl	2a692 <assert_print>
    ce68:	f240 1165 	movw	r1, #357	; 0x165
    ce6c:	e764      	b.n	cd38 <process_event+0x128>
			transit = mgr->transitions->reset;
    ce6e:	6923      	ldr	r3, [r4, #16]
    ce70:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    ce72:	b94e      	cbnz	r6, ce88 <process_event+0x278>
    ce74:	491a      	ldr	r1, [pc, #104]	; (cee0 <process_event+0x2d0>)
    ce76:	f44f 73b4 	mov.w	r3, #360	; 0x168
    ce7a:	4a16      	ldr	r2, [pc, #88]	; (ced4 <process_event+0x2c4>)
    ce7c:	4813      	ldr	r0, [pc, #76]	; (cecc <process_event+0x2bc>)
    ce7e:	f01d fc08 	bl	2a692 <assert_print>
    ce82:	f44f 71b4 	mov.w	r1, #360	; 0x168
    ce86:	e757      	b.n	cd38 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce88:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce8a:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ce8c:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce8e:	f023 0307 	bic.w	r3, r3, #7
    ce92:	f043 0305 	orr.w	r3, r3, #5
    ce96:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce98:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce9c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce9e:	e77d      	b.n	cd9c <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    cea0:	490b      	ldr	r1, [pc, #44]	; (ced0 <process_event+0x2c0>)
    cea2:	f240 136b 	movw	r3, #363	; 0x16b
    cea6:	4a0b      	ldr	r2, [pc, #44]	; (ced4 <process_event+0x2c4>)
    cea8:	4808      	ldr	r0, [pc, #32]	; (cecc <process_event+0x2bc>)
    ceaa:	f01d fbf2 	bl	2a692 <assert_print>
    ceae:	f240 116b 	movw	r1, #363	; 0x16b
    ceb2:	e741      	b.n	cd38 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    ceb4:	2700      	movs	r7, #0
    ceb6:	2600      	movs	r6, #0
    ceb8:	e770      	b.n	cd9c <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ceba:	f04f 0a01 	mov.w	sl, #1
    cebe:	e777      	b.n	cdb0 <process_event+0x1a0>
    cec0:	4692      	mov	sl, r2
    cec2:	e775      	b.n	cdb0 <process_event+0x1a0>
    cec4:	000333ba 	.word	0x000333ba
    cec8:	0003338d 	.word	0x0003338d
    cecc:	00032629 	.word	0x00032629
    ced0:	00037ac9 	.word	0x00037ac9
    ced4:	000332ea 	.word	0x000332ea
    ced8:	0003330c 	.word	0x0003330c
    cedc:	00033318 	.word	0x00033318
    cee0:	0003333b 	.word	0x0003333b
    cee4:	000333d1 	.word	0x000333d1
    cee8:	00033352 	.word	0x00033352
    ceec:	00033368 	.word	0x00033368
    cef0:	00033377 	.word	0x00033377
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cef4:	f385 8811 	msr	BASEPRI, r5
    cef8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cefc:	f1ba 0f00 	cmp.w	sl, #0
    cf00:	d11e      	bne.n	cf40 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    cf02:	2f00      	cmp	r7, #0
    cf04:	d12f      	bne.n	cf66 <process_event+0x356>
			if (transit != NULL) {
    cf06:	b116      	cbz	r6, cf0e <process_event+0x2fe>
				transit(mgr, transition_complete);
    cf08:	4620      	mov	r0, r4
    cf0a:	4926      	ldr	r1, [pc, #152]	; (cfa4 <process_event+0x394>)
    cf0c:	47b0      	blx	r6
	__asm__ volatile(
    cf0e:	f04f 0320 	mov.w	r3, #32
    cf12:	f3ef 8511 	mrs	r5, BASEPRI
    cf16:	f383 8812 	msr	BASEPRI_MAX, r3
    cf1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf1e:	4658      	mov	r0, fp
    cf20:	f018 f886 	bl	25030 <z_spin_lock_valid>
    cf24:	bb38      	cbnz	r0, cf76 <process_event+0x366>
    cf26:	2394      	movs	r3, #148	; 0x94
    cf28:	4a1f      	ldr	r2, [pc, #124]	; (cfa8 <process_event+0x398>)
    cf2a:	4920      	ldr	r1, [pc, #128]	; (cfac <process_event+0x39c>)
    cf2c:	4820      	ldr	r0, [pc, #128]	; (cfb0 <process_event+0x3a0>)
    cf2e:	f01d fbb0 	bl	2a692 <assert_print>
    cf32:	4659      	mov	r1, fp
    cf34:	481f      	ldr	r0, [pc, #124]	; (cfb4 <process_event+0x3a4>)
    cf36:	f01d fbac 	bl	2a692 <assert_print>
    cf3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf3c:	481a      	ldr	r0, [pc, #104]	; (cfa8 <process_event+0x398>)
    cf3e:	e6fc      	b.n	cd3a <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    cf40:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cf42:	2900      	cmp	r1, #0
    cf44:	d0dd      	beq.n	cf02 <process_event+0x2f2>
	return node->next;
    cf46:	680d      	ldr	r5, [r1, #0]
    cf48:	2900      	cmp	r1, #0
    cf4a:	d0da      	beq.n	cf02 <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    cf4c:	4643      	mov	r3, r8
    cf4e:	464a      	mov	r2, r9
    cf50:	4620      	mov	r0, r4
    cf52:	f8d1 a004 	ldr.w	sl, [r1, #4]
    cf56:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cf58:	b11d      	cbz	r5, cf62 <process_event+0x352>
    cf5a:	682b      	ldr	r3, [r5, #0]
    cf5c:	4629      	mov	r1, r5
    cf5e:	461d      	mov	r5, r3
    cf60:	e7f2      	b.n	cf48 <process_event+0x338>
    cf62:	462b      	mov	r3, r5
    cf64:	e7fa      	b.n	cf5c <process_event+0x34c>
    cf66:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    cf68:	4643      	mov	r3, r8
    cf6a:	464a      	mov	r2, r9
    cf6c:	4620      	mov	r0, r4
    cf6e:	683f      	ldr	r7, [r7, #0]
    cf70:	f01d fb34 	bl	2a5dc <notify_one>
    cf74:	e7c5      	b.n	cf02 <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    cf76:	4658      	mov	r0, fp
    cf78:	f018 f876 	bl	25068 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cf7c:	8ba3      	ldrh	r3, [r4, #28]
    cf7e:	f023 0308 	bic.w	r3, r3, #8
    cf82:	83a3      	strh	r3, [r4, #28]
    cf84:	e6ac      	b.n	cce0 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    cf86:	068b      	lsls	r3, r1, #26
    cf88:	f57f ae64 	bpl.w	cc54 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cf8c:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cf90:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cf92:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    cf96:	e647      	b.n	cc28 <process_event+0x18>
	__asm__ volatile(
    cf98:	f385 8811 	msr	BASEPRI, r5
    cf9c:	f3bf 8f6f 	isb	sy
}
    cfa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfa4:	0000cfb9 	.word	0x0000cfb9
    cfa8:	0003338d 	.word	0x0003338d
    cfac:	000333e6 	.word	0x000333e6
    cfb0:	00032629 	.word	0x00032629
    cfb4:	000333fb 	.word	0x000333fb

0000cfb8 <transition_complete>:
{
    cfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfba:	4604      	mov	r4, r0
    cfbc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    cfbe:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    cfc2:	f04f 0320 	mov.w	r3, #32
    cfc6:	f3ef 8711 	mrs	r7, BASEPRI
    cfca:	f383 8812 	msr	BASEPRI_MAX, r3
    cfce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cfd2:	4630      	mov	r0, r6
    cfd4:	f018 f82c 	bl	25030 <z_spin_lock_valid>
    cfd8:	b968      	cbnz	r0, cff6 <transition_complete+0x3e>
    cfda:	2394      	movs	r3, #148	; 0x94
    cfdc:	4a0b      	ldr	r2, [pc, #44]	; (d00c <transition_complete+0x54>)
    cfde:	490c      	ldr	r1, [pc, #48]	; (d010 <transition_complete+0x58>)
    cfe0:	480c      	ldr	r0, [pc, #48]	; (d014 <transition_complete+0x5c>)
    cfe2:	f01d fb56 	bl	2a692 <assert_print>
    cfe6:	4631      	mov	r1, r6
    cfe8:	480b      	ldr	r0, [pc, #44]	; (d018 <transition_complete+0x60>)
    cfea:	f01d fb52 	bl	2a692 <assert_print>
    cfee:	2194      	movs	r1, #148	; 0x94
    cff0:	4806      	ldr	r0, [pc, #24]	; (d00c <transition_complete+0x54>)
    cff2:	f01d fb47 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
    cff6:	4630      	mov	r0, r6
    cff8:	f018 f836 	bl	25068 <z_spin_lock_set_owner>
	mgr->last_res = res;
    cffc:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    cffe:	463a      	mov	r2, r7
    d000:	4620      	mov	r0, r4
}
    d002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    d006:	2101      	movs	r1, #1
    d008:	f7ff be02 	b.w	cc10 <process_event>
    d00c:	0003338d 	.word	0x0003338d
    d010:	000333e6 	.word	0x000333e6
    d014:	00032629 	.word	0x00032629
    d018:	000333fb 	.word	0x000333fb

0000d01c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d020:	4604      	mov	r4, r0
    d022:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d024:	f01d faca 	bl	2a5bc <validate_args>

	if (rv < 0) {
    d028:	1e05      	subs	r5, r0, #0
    d02a:	db67      	blt.n	d0fc <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d02c:	f104 0914 	add.w	r9, r4, #20
    d030:	f04f 0320 	mov.w	r3, #32
    d034:	f3ef 8a11 	mrs	sl, BASEPRI
    d038:	f383 8812 	msr	BASEPRI_MAX, r3
    d03c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d040:	4648      	mov	r0, r9
    d042:	f017 fff5 	bl	25030 <z_spin_lock_valid>
    d046:	4680      	mov	r8, r0
    d048:	b960      	cbnz	r0, d064 <onoff_request+0x48>
    d04a:	2394      	movs	r3, #148	; 0x94
    d04c:	4a37      	ldr	r2, [pc, #220]	; (d12c <onoff_request+0x110>)
    d04e:	4938      	ldr	r1, [pc, #224]	; (d130 <onoff_request+0x114>)
    d050:	4838      	ldr	r0, [pc, #224]	; (d134 <onoff_request+0x118>)
    d052:	f01d fb1e 	bl	2a692 <assert_print>
    d056:	4649      	mov	r1, r9
    d058:	4837      	ldr	r0, [pc, #220]	; (d138 <onoff_request+0x11c>)
    d05a:	f01d fb1a 	bl	2a692 <assert_print>
    d05e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d060:	4832      	ldr	r0, [pc, #200]	; (d12c <onoff_request+0x110>)
    d062:	e040      	b.n	d0e6 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d064:	4648      	mov	r0, r9
    d066:	f017 ffff 	bl	25068 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d06a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d06e:	8be3      	ldrh	r3, [r4, #30]
    d070:	8ba6      	ldrh	r6, [r4, #28]
    d072:	4293      	cmp	r3, r2
    d074:	f006 0607 	and.w	r6, r6, #7
    d078:	d043      	beq.n	d102 <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d07a:	2e02      	cmp	r6, #2
    d07c:	d113      	bne.n	d0a6 <onoff_request+0x8a>
	rv = state;
    d07e:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d080:	3301      	adds	r3, #1
    d082:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d084:	4648      	mov	r0, r9
    d086:	f017 ffe1 	bl	2504c <z_spin_unlock_valid>
    d08a:	2800      	cmp	r0, #0
    d08c:	d13f      	bne.n	d10e <onoff_request+0xf2>
    d08e:	23c2      	movs	r3, #194	; 0xc2
    d090:	4a26      	ldr	r2, [pc, #152]	; (d12c <onoff_request+0x110>)
    d092:	492a      	ldr	r1, [pc, #168]	; (d13c <onoff_request+0x120>)
    d094:	4827      	ldr	r0, [pc, #156]	; (d134 <onoff_request+0x118>)
    d096:	f01d fafc 	bl	2a692 <assert_print>
    d09a:	4649      	mov	r1, r9
    d09c:	4828      	ldr	r0, [pc, #160]	; (d140 <onoff_request+0x124>)
    d09e:	f01d faf8 	bl	2a692 <assert_print>
    d0a2:	21c2      	movs	r1, #194	; 0xc2
    d0a4:	e7dc      	b.n	d060 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d0a6:	2e06      	cmp	r6, #6
    d0a8:	d813      	bhi.n	d0d2 <onoff_request+0xb6>
    d0aa:	e8df f006 	tbb	[pc, r6]
    d0ae:	2d09      	.short	0x2d09
    d0b0:	04091212 	.word	0x04091212
    d0b4:	09          	.byte	0x09
    d0b5:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d0b6:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d0ba:	f04f 0800 	mov.w	r8, #0
    d0be:	e7e1      	b.n	d084 <onoff_request+0x68>
	parent->next = child;
    d0c0:	2300      	movs	r3, #0
    d0c2:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d0c4:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d0c6:	b983      	cbnz	r3, d0ea <onoff_request+0xce>
	list->head = node;
    d0c8:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d0cc:	b186      	cbz	r6, d0f0 <onoff_request+0xd4>
	rv = state;
    d0ce:	4635      	mov	r5, r6
    d0d0:	e7f3      	b.n	d0ba <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d0d2:	491c      	ldr	r1, [pc, #112]	; (d144 <onoff_request+0x128>)
    d0d4:	4817      	ldr	r0, [pc, #92]	; (d134 <onoff_request+0x118>)
    d0d6:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d0da:	4a1b      	ldr	r2, [pc, #108]	; (d148 <onoff_request+0x12c>)
    d0dc:	f01d fad9 	bl	2a692 <assert_print>
    d0e0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d0e4:	4818      	ldr	r0, [pc, #96]	; (d148 <onoff_request+0x12c>)
    d0e6:	f01d facd 	bl	2a684 <assert_post_action>
	parent->next = child;
    d0ea:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d0ec:	6067      	str	r7, [r4, #4]
}
    d0ee:	e7ed      	b.n	d0cc <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d0f0:	4652      	mov	r2, sl
    d0f2:	2102      	movs	r1, #2
    d0f4:	4620      	mov	r0, r4
    d0f6:	f7ff fd8b 	bl	cc10 <process_event>
    d0fa:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d0fc:	4628      	mov	r0, r5
    d0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d102:	f06f 050a 	mvn.w	r5, #10
    d106:	e7d8      	b.n	d0ba <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d108:	f06f 0504 	mvn.w	r5, #4
    d10c:	e7d5      	b.n	d0ba <onoff_request+0x9e>
	__asm__ volatile(
    d10e:	f38a 8811 	msr	BASEPRI, sl
    d112:	f3bf 8f6f 	isb	sy
		if (notify) {
    d116:	f1b8 0f00 	cmp.w	r8, #0
    d11a:	d0ef      	beq.n	d0fc <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d11c:	2300      	movs	r3, #0
    d11e:	4632      	mov	r2, r6
    d120:	4639      	mov	r1, r7
    d122:	4620      	mov	r0, r4
    d124:	f01d fa5a 	bl	2a5dc <notify_one>
    d128:	e7e8      	b.n	d0fc <onoff_request+0xe0>
    d12a:	bf00      	nop
    d12c:	0003338d 	.word	0x0003338d
    d130:	000333e6 	.word	0x000333e6
    d134:	00032629 	.word	0x00032629
    d138:	000333fb 	.word	0x000333fb
    d13c:	000333ba 	.word	0x000333ba
    d140:	000333d1 	.word	0x000333d1
    d144:	00033377 	.word	0x00033377
    d148:	000332ea 	.word	0x000332ea

0000d14c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d14c:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d14e:	6842      	ldr	r2, [r0, #4]
    d150:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d152:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d156:	2a02      	cmp	r2, #2
	notify->result = res;
    d158:	6081      	str	r1, [r0, #8]
	switch (method) {
    d15a:	d00a      	beq.n	d172 <sys_notify_finalize+0x26>
    d15c:	2a03      	cmp	r2, #3
    d15e:	f04f 0100 	mov.w	r1, #0
    d162:	d003      	beq.n	d16c <sys_notify_finalize+0x20>
    d164:	2a01      	cmp	r2, #1
    d166:	d10a      	bne.n	d17e <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d168:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d16a:	e006      	b.n	d17a <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d16c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d16e:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d170:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d172:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d174:	2200      	movs	r2, #0
    d176:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d178:	b958      	cbnz	r0, d192 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d17a:	2000      	movs	r0, #0
    d17c:	e7f8      	b.n	d170 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d17e:	4906      	ldr	r1, [pc, #24]	; (d198 <sys_notify_finalize+0x4c>)
    d180:	4806      	ldr	r0, [pc, #24]	; (d19c <sys_notify_finalize+0x50>)
    d182:	2345      	movs	r3, #69	; 0x45
    d184:	4a06      	ldr	r2, [pc, #24]	; (d1a0 <sys_notify_finalize+0x54>)
    d186:	f01d fa84 	bl	2a692 <assert_print>
    d18a:	2145      	movs	r1, #69	; 0x45
    d18c:	4804      	ldr	r0, [pc, #16]	; (d1a0 <sys_notify_finalize+0x54>)
    d18e:	f01d fa79 	bl	2a684 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d192:	f01b f953 	bl	2843c <z_impl_k_poll_signal_raise>
    d196:	e7f0      	b.n	d17a <sys_notify_finalize+0x2e>
    d198:	00037ac9 	.word	0x00037ac9
    d19c:	00032629 	.word	0x00032629
    d1a0:	00033413 	.word	0x00033413

0000d1a4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    d1a4:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1a6:	4c09      	ldr	r4, [pc, #36]	; (d1cc <crc8_ccitt+0x28>)
    d1a8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    d1aa:	4291      	cmp	r1, r2
    d1ac:	d100      	bne.n	d1b0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    d1ae:	bd10      	pop	{r4, pc}
		val ^= p[i];
    d1b0:	f811 3b01 	ldrb.w	r3, [r1], #1
    d1b4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1b6:	0903      	lsrs	r3, r0, #4
    d1b8:	5ce3      	ldrb	r3, [r4, r3]
    d1ba:	0100      	lsls	r0, r0, #4
    d1bc:	b2c0      	uxtb	r0, r0
    d1be:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1c0:	0918      	lsrs	r0, r3, #4
    d1c2:	5c20      	ldrb	r0, [r4, r0]
    d1c4:	011b      	lsls	r3, r3, #4
    d1c6:	b2db      	uxtb	r3, r3
    d1c8:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    d1ca:	e7ee      	b.n	d1aa <crc8_ccitt+0x6>
    d1cc:	00033436 	.word	0x00033436

0000d1d0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1d2:	4602      	mov	r2, r0
    d1d4:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    d1d6:	270a      	movs	r7, #10
	size_t val = 0;
    d1d8:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    d1da:	4e07      	ldr	r6, [pc, #28]	; (d1f8 <extract_decimal+0x28>)
    d1dc:	460b      	mov	r3, r1
    d1de:	781c      	ldrb	r4, [r3, #0]
    d1e0:	3101      	adds	r1, #1
    d1e2:	5d35      	ldrb	r5, [r6, r4]
    d1e4:	076d      	lsls	r5, r5, #29
    d1e6:	d401      	bmi.n	d1ec <extract_decimal+0x1c>
	}
	*str = sp;
    d1e8:	6013      	str	r3, [r2, #0]
	return val;
}
    d1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d1ec:	fb07 4300 	mla	r3, r7, r0, r4
    d1f0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d1f4:	e7f2      	b.n	d1dc <extract_decimal+0xc>
    d1f6:	bf00      	nop
    d1f8:	00038b54 	.word	0x00038b54

0000d1fc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d1fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d200:	4615      	mov	r5, r2
    d202:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    d204:	78d3      	ldrb	r3, [r2, #3]
    d206:	4a22      	ldr	r2, [pc, #136]	; (d290 <encode_uint+0x94>)
	switch (specifier) {
    d208:	2b6f      	cmp	r3, #111	; 0x6f
    d20a:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d20e:	4680      	mov	r8, r0
    d210:	460f      	mov	r7, r1
    d212:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d216:	d029      	beq.n	d26c <encode_uint+0x70>
    d218:	d824      	bhi.n	d264 <encode_uint+0x68>
		return 10;
    d21a:	2b58      	cmp	r3, #88	; 0x58
    d21c:	bf0c      	ite	eq
    d21e:	2610      	moveq	r6, #16
    d220:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d222:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d226:	4632      	mov	r2, r6
    d228:	2300      	movs	r3, #0
    d22a:	4640      	mov	r0, r8
    d22c:	4639      	mov	r1, r7
    d22e:	f7fb fe5f 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d232:	2a09      	cmp	r2, #9
    d234:	b2d4      	uxtb	r4, r2
    d236:	d81e      	bhi.n	d276 <encode_uint+0x7a>
    d238:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d23a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d23c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d23e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d242:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d246:	d301      	bcc.n	d24c <encode_uint+0x50>
    d248:	45d1      	cmp	r9, sl
    d24a:	d811      	bhi.n	d270 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d24c:	782b      	ldrb	r3, [r5, #0]
    d24e:	069b      	lsls	r3, r3, #26
    d250:	d505      	bpl.n	d25e <encode_uint+0x62>
		if (radix == 8) {
    d252:	2e08      	cmp	r6, #8
    d254:	d115      	bne.n	d282 <encode_uint+0x86>
			conv->altform_0 = true;
    d256:	78ab      	ldrb	r3, [r5, #2]
    d258:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d25c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d25e:	4648      	mov	r0, r9
    d260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d264:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d268:	2b70      	cmp	r3, #112	; 0x70
    d26a:	e7d7      	b.n	d21c <encode_uint+0x20>
	switch (specifier) {
    d26c:	2608      	movs	r6, #8
    d26e:	e7d8      	b.n	d222 <encode_uint+0x26>
		value /= radix;
    d270:	4680      	mov	r8, r0
    d272:	460f      	mov	r7, r1
    d274:	e7d7      	b.n	d226 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d276:	f1bb 0f01 	cmp.w	fp, #1
    d27a:	bf0c      	ite	eq
    d27c:	3437      	addeq	r4, #55	; 0x37
    d27e:	3457      	addne	r4, #87	; 0x57
    d280:	e7db      	b.n	d23a <encode_uint+0x3e>
		} else if (radix == 16) {
    d282:	2e10      	cmp	r6, #16
    d284:	d1eb      	bne.n	d25e <encode_uint+0x62>
			conv->altform_0c = true;
    d286:	78ab      	ldrb	r3, [r5, #2]
    d288:	f043 0310 	orr.w	r3, r3, #16
    d28c:	e7e6      	b.n	d25c <encode_uint+0x60>
    d28e:	bf00      	nop
    d290:	00038b54 	.word	0x00038b54

0000d294 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d298:	4682      	mov	sl, r0
    d29a:	4617      	mov	r7, r2
    d29c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d29e:	2500      	movs	r5, #0
{
    d2a0:	b097      	sub	sp, #92	; 0x5c
    d2a2:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d2a4:	7838      	ldrb	r0, [r7, #0]
    d2a6:	b908      	cbnz	r0, d2ac <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d2a8:	4628      	mov	r0, r5
    d2aa:	e349      	b.n	d940 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    d2ac:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    d2ae:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d2b0:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d2b2:	d006      	beq.n	d2c2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    d2b4:	9903      	ldr	r1, [sp, #12]
    d2b6:	47d0      	blx	sl
    d2b8:	2800      	cmp	r0, #0
    d2ba:	f2c0 8341 	blt.w	d940 <z_cbvprintf_impl+0x6ac>
    d2be:	3501      	adds	r5, #1
		if (bps == NULL) {
    d2c0:	e1f0      	b.n	d6a4 <z_cbvprintf_impl+0x410>
		} state = {
    d2c2:	2218      	movs	r2, #24
    d2c4:	2100      	movs	r1, #0
    d2c6:	a810      	add	r0, sp, #64	; 0x40
    d2c8:	f023 f977 	bl	305ba <memset>
	if (*sp == '%') {
    d2cc:	787b      	ldrb	r3, [r7, #1]
    d2ce:	2b25      	cmp	r3, #37	; 0x25
    d2d0:	f000 80a3 	beq.w	d41a <z_cbvprintf_impl+0x186>
    d2d4:	2300      	movs	r3, #0
    d2d6:	4698      	mov	r8, r3
    d2d8:	469e      	mov	lr, r3
    d2da:	469c      	mov	ip, r3
    d2dc:	4618      	mov	r0, r3
    d2de:	1c79      	adds	r1, r7, #1
    d2e0:	460e      	mov	r6, r1
		switch (*sp) {
    d2e2:	f811 2b01 	ldrb.w	r2, [r1], #1
    d2e6:	2a2b      	cmp	r2, #43	; 0x2b
    d2e8:	f000 80c6 	beq.w	d478 <z_cbvprintf_impl+0x1e4>
    d2ec:	f200 80bd 	bhi.w	d46a <z_cbvprintf_impl+0x1d6>
    d2f0:	2a20      	cmp	r2, #32
    d2f2:	f000 80c4 	beq.w	d47e <z_cbvprintf_impl+0x1ea>
    d2f6:	2a23      	cmp	r2, #35	; 0x23
    d2f8:	f000 80c4 	beq.w	d484 <z_cbvprintf_impl+0x1f0>
    d2fc:	b12b      	cbz	r3, d30a <z_cbvprintf_impl+0x76>
    d2fe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d306:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d30a:	f1b8 0f00 	cmp.w	r8, #0
    d30e:	d005      	beq.n	d31c <z_cbvprintf_impl+0x88>
    d310:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d314:	f043 0320 	orr.w	r3, r3, #32
    d318:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d31c:	f1be 0f00 	cmp.w	lr, #0
    d320:	d005      	beq.n	d32e <z_cbvprintf_impl+0x9a>
    d322:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d326:	f043 0310 	orr.w	r3, r3, #16
    d32a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d32e:	f1bc 0f00 	cmp.w	ip, #0
    d332:	d005      	beq.n	d340 <z_cbvprintf_impl+0xac>
    d334:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d338:	f043 0308 	orr.w	r3, r3, #8
    d33c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d340:	b128      	cbz	r0, d34e <z_cbvprintf_impl+0xba>
    d342:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d346:	f043 0304 	orr.w	r3, r3, #4
    d34a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d34e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d352:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d356:	2944      	cmp	r1, #68	; 0x44
    d358:	d103      	bne.n	d362 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d35a:	f36f 1386 	bfc	r3, #6, #1
    d35e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d362:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d366:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d36c:	9609      	str	r6, [sp, #36]	; 0x24
    d36e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d372:	f040 808c 	bne.w	d48e <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d376:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d37a:	f043 0301 	orr.w	r3, r3, #1
    d37e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d382:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d384:	781a      	ldrb	r2, [r3, #0]
    d386:	2a2e      	cmp	r2, #46	; 0x2e
    d388:	bf0c      	ite	eq
    d38a:	2101      	moveq	r1, #1
    d38c:	2100      	movne	r1, #0
    d38e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d392:	f361 0241 	bfi	r2, r1, #1, #1
    d396:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d39a:	d10c      	bne.n	d3b6 <z_cbvprintf_impl+0x122>
	++sp;
    d39c:	1c5a      	adds	r2, r3, #1
    d39e:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d3a0:	785a      	ldrb	r2, [r3, #1]
    d3a2:	2a2a      	cmp	r2, #42	; 0x2a
    d3a4:	f040 8083 	bne.w	d4ae <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d3a8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d3ac:	3302      	adds	r3, #2
		conv->prec_star = true;
    d3ae:	f042 0204 	orr.w	r2, r2, #4
    d3b2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d3b6:	781a      	ldrb	r2, [r3, #0]
    d3b8:	2a6c      	cmp	r2, #108	; 0x6c
    d3ba:	f000 80a4 	beq.w	d506 <z_cbvprintf_impl+0x272>
    d3be:	f200 8086 	bhi.w	d4ce <z_cbvprintf_impl+0x23a>
    d3c2:	2a68      	cmp	r2, #104	; 0x68
    d3c4:	f000 808c 	beq.w	d4e0 <z_cbvprintf_impl+0x24c>
    d3c8:	2a6a      	cmp	r2, #106	; 0x6a
    d3ca:	f000 80a5 	beq.w	d518 <z_cbvprintf_impl+0x284>
    d3ce:	2a4c      	cmp	r2, #76	; 0x4c
    d3d0:	f000 80aa 	beq.w	d528 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d3d4:	461a      	mov	r2, r3
    d3d6:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d3da:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d3dc:	9204      	str	r2, [sp, #16]
    d3de:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d3e2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d3e6:	f200 8117 	bhi.w	d618 <z_cbvprintf_impl+0x384>
    d3ea:	2b6d      	cmp	r3, #109	; 0x6d
    d3ec:	f200 80a9 	bhi.w	d542 <z_cbvprintf_impl+0x2ae>
    d3f0:	2b69      	cmp	r3, #105	; 0x69
    d3f2:	f200 8111 	bhi.w	d618 <z_cbvprintf_impl+0x384>
    d3f6:	2b57      	cmp	r3, #87	; 0x57
    d3f8:	f200 80be 	bhi.w	d578 <z_cbvprintf_impl+0x2e4>
    d3fc:	2b41      	cmp	r3, #65	; 0x41
    d3fe:	d003      	beq.n	d408 <z_cbvprintf_impl+0x174>
    d400:	3b45      	subs	r3, #69	; 0x45
    d402:	2b02      	cmp	r3, #2
    d404:	f200 8108 	bhi.w	d618 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d408:	2204      	movs	r2, #4
    d40a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d40e:	f362 0302 	bfi	r3, r2, #0, #3
    d412:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d416:	2301      	movs	r3, #1
			break;
    d418:	e0ca      	b.n	d5b0 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d41a:	1cba      	adds	r2, r7, #2
    d41c:	9204      	str	r2, [sp, #16]
    d41e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d422:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d426:	07da      	lsls	r2, r3, #31
    d428:	f140 80fd 	bpl.w	d626 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d42c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d430:	f1b9 0f00 	cmp.w	r9, #0
    d434:	da07      	bge.n	d446 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d436:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d43a:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d43e:	f042 0204 	orr.w	r2, r2, #4
    d442:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d446:	075e      	lsls	r6, r3, #29
    d448:	f140 80f6 	bpl.w	d638 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d44c:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d450:	f1bb 0f00 	cmp.w	fp, #0
    d454:	f280 80f5 	bge.w	d642 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d458:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d45c:	f36f 0341 	bfc	r3, #1, #1
    d460:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d464:	f04f 3bff 	mov.w	fp, #4294967295
    d468:	e0eb      	b.n	d642 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d46a:	2a2d      	cmp	r2, #45	; 0x2d
    d46c:	d00d      	beq.n	d48a <z_cbvprintf_impl+0x1f6>
    d46e:	2a30      	cmp	r2, #48	; 0x30
    d470:	f47f af44 	bne.w	d2fc <z_cbvprintf_impl+0x68>
    d474:	2301      	movs	r3, #1
	} while (loop);
    d476:	e733      	b.n	d2e0 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d478:	f04f 0c01 	mov.w	ip, #1
    d47c:	e730      	b.n	d2e0 <z_cbvprintf_impl+0x4c>
    d47e:	f04f 0e01 	mov.w	lr, #1
    d482:	e72d      	b.n	d2e0 <z_cbvprintf_impl+0x4c>
    d484:	f04f 0801 	mov.w	r8, #1
    d488:	e72a      	b.n	d2e0 <z_cbvprintf_impl+0x4c>
    d48a:	2001      	movs	r0, #1
    d48c:	e728      	b.n	d2e0 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d48e:	a809      	add	r0, sp, #36	; 0x24
    d490:	f7ff fe9e 	bl	d1d0 <extract_decimal>
	if (sp != wp) {
    d494:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d496:	42b3      	cmp	r3, r6
    d498:	f43f af74 	beq.w	d384 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d49c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d4a0:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d4a2:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d4a4:	f360 0241 	bfi	r2, r0, #1, #1
    d4a8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d4ac:	e76a      	b.n	d384 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d4ae:	a809      	add	r0, sp, #36	; 0x24
    d4b0:	f7ff fe8e 	bl	d1d0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d4b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d4b8:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d4ba:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d4be:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d4c2:	f362 0341 	bfi	r3, r2, #1, #1
    d4c6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4cc:	e773      	b.n	d3b6 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d4ce:	2a74      	cmp	r2, #116	; 0x74
    d4d0:	d026      	beq.n	d520 <z_cbvprintf_impl+0x28c>
    d4d2:	2a7a      	cmp	r2, #122	; 0x7a
    d4d4:	f47f af7e 	bne.w	d3d4 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d4d8:	2106      	movs	r1, #6
    d4da:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d4de:	e00c      	b.n	d4fa <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d4e0:	785a      	ldrb	r2, [r3, #1]
    d4e2:	2a68      	cmp	r2, #104	; 0x68
    d4e4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d4e8:	d106      	bne.n	d4f8 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d4ea:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d4ec:	f361 02c6 	bfi	r2, r1, #3, #4
    d4f0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d4f4:	3302      	adds	r3, #2
    d4f6:	e76d      	b.n	d3d4 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d4f8:	2102      	movs	r1, #2
    d4fa:	f361 02c6 	bfi	r2, r1, #3, #4
    d4fe:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d502:	3301      	adds	r3, #1
    d504:	e766      	b.n	d3d4 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d506:	785a      	ldrb	r2, [r3, #1]
    d508:	2a6c      	cmp	r2, #108	; 0x6c
    d50a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d50e:	d101      	bne.n	d514 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d510:	2104      	movs	r1, #4
    d512:	e7eb      	b.n	d4ec <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d514:	2103      	movs	r1, #3
    d516:	e7f0      	b.n	d4fa <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d518:	2105      	movs	r1, #5
    d51a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d51e:	e7ec      	b.n	d4fa <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d520:	2107      	movs	r1, #7
    d522:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d526:	e7e8      	b.n	d4fa <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d528:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d52c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d530:	f022 0202 	bic.w	r2, r2, #2
    d534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d538:	f042 0202 	orr.w	r2, r2, #2
    d53c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d540:	e7df      	b.n	d502 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d542:	3b6e      	subs	r3, #110	; 0x6e
    d544:	b2d9      	uxtb	r1, r3
    d546:	2301      	movs	r3, #1
    d548:	408b      	lsls	r3, r1
    d54a:	f240 4182 	movw	r1, #1154	; 0x482
    d54e:	420b      	tst	r3, r1
    d550:	d138      	bne.n	d5c4 <z_cbvprintf_impl+0x330>
    d552:	f013 0f24 	tst.w	r3, #36	; 0x24
    d556:	d152      	bne.n	d5fe <z_cbvprintf_impl+0x36a>
    d558:	07d8      	lsls	r0, r3, #31
    d55a:	d55d      	bpl.n	d618 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d55c:	2103      	movs	r1, #3
    d55e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d562:	f361 0302 	bfi	r3, r1, #0, #3
    d566:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d56a:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d56e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d572:	424b      	negs	r3, r1
    d574:	414b      	adcs	r3, r1
    d576:	e01b      	b.n	d5b0 <z_cbvprintf_impl+0x31c>
    d578:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d57a:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d57e:	b2c9      	uxtb	r1, r1
    d580:	fa00 f101 	lsl.w	r1, r0, r1
    d584:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d588:	f47f af3e 	bne.w	d408 <z_cbvprintf_impl+0x174>
    d58c:	f640 0601 	movw	r6, #2049	; 0x801
    d590:	4231      	tst	r1, r6
    d592:	d11d      	bne.n	d5d0 <z_cbvprintf_impl+0x33c>
    d594:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d598:	d03e      	beq.n	d618 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d59a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d59e:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5a2:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d5a6:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d5a8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5ac:	d034      	beq.n	d618 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d5ae:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d5b0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d5b4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d5b8:	430b      	orrs	r3, r1
    d5ba:	f363 0241 	bfi	r2, r3, #1, #1
    d5be:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d5c2:	e72e      	b.n	d422 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    d5c4:	2102      	movs	r1, #2
    d5c6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d5ca:	f361 0302 	bfi	r3, r1, #0, #3
    d5ce:	e7e8      	b.n	d5a2 <z_cbvprintf_impl+0x30e>
    d5d0:	2002      	movs	r0, #2
    d5d2:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5d6:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d5da:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5de:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d5e0:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d5e4:	bf02      	ittt	eq
    d5e6:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d5ea:	f041 0101 	orreq.w	r1, r1, #1
    d5ee:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d5f2:	2b63      	cmp	r3, #99	; 0x63
    d5f4:	d1db      	bne.n	d5ae <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d5f6:	1e13      	subs	r3, r2, #0
    d5f8:	bf18      	it	ne
    d5fa:	2301      	movne	r3, #1
    d5fc:	e7d8      	b.n	d5b0 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    d5fe:	2103      	movs	r1, #3
    d600:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d604:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d608:	f361 0302 	bfi	r3, r1, #0, #3
    d60c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d610:	bf14      	ite	ne
    d612:	2301      	movne	r3, #1
    d614:	2300      	moveq	r3, #0
    d616:	e7cb      	b.n	d5b0 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    d618:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d61c:	f043 0301 	orr.w	r3, r3, #1
    d620:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d624:	e7c3      	b.n	d5ae <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    d626:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d62a:	2a00      	cmp	r2, #0
		int width = -1;
    d62c:	bfac      	ite	ge
    d62e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    d632:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    d636:	e706      	b.n	d446 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    d638:	0798      	lsls	r0, r3, #30
    d63a:	f57f af13 	bpl.w	d464 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    d63e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d642:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d644:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d648:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d64c:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d650:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d654:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d656:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d65a:	d133      	bne.n	d6c4 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    d65c:	1ecb      	subs	r3, r1, #3
    d65e:	2b04      	cmp	r3, #4
    d660:	d804      	bhi.n	d66c <z_cbvprintf_impl+0x3d8>
    d662:	e8df f003 	tbb	[pc, r3]
    d666:	4621      	.short	0x4621
    d668:	2146      	.short	0x2146
    d66a:	21          	.byte	0x21
    d66b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d66c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d66e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d670:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d674:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d678:	d11c      	bne.n	d6b4 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    d67a:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d67e:	17da      	asrs	r2, r3, #31
    d680:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d684:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d686:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d68a:	f013 0603 	ands.w	r6, r3, #3
    d68e:	d050      	beq.n	d732 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    d690:	463a      	mov	r2, r7
    d692:	4650      	mov	r0, sl
    d694:	9b04      	ldr	r3, [sp, #16]
    d696:	9903      	ldr	r1, [sp, #12]
    d698:	f01c ffdd 	bl	2a656 <outs>
    d69c:	2800      	cmp	r0, #0
    d69e:	f2c0 814f 	blt.w	d940 <z_cbvprintf_impl+0x6ac>
    d6a2:	4405      	add	r5, r0
			continue;
    d6a4:	9f04      	ldr	r7, [sp, #16]
    d6a6:	e5fd      	b.n	d2a4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d6a8:	f854 3b04 	ldr.w	r3, [r4], #4
    d6ac:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d6ae:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d6b2:	e7e8      	b.n	d686 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    d6b4:	2902      	cmp	r1, #2
    d6b6:	d1e5      	bne.n	d684 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    d6b8:	b21a      	sxth	r2, r3
    d6ba:	f343 33c0 	sbfx	r3, r3, #15, #1
    d6be:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d6c2:	e7df      	b.n	d684 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    d6c4:	2b02      	cmp	r3, #2
    d6c6:	d124      	bne.n	d712 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    d6c8:	1ecb      	subs	r3, r1, #3
    d6ca:	2b04      	cmp	r3, #4
    d6cc:	d804      	bhi.n	d6d8 <z_cbvprintf_impl+0x444>
    d6ce:	e8df f003 	tbb	[pc, r3]
    d6d2:	1018      	.short	0x1018
    d6d4:	1810      	.short	0x1810
    d6d6:	18          	.byte	0x18
    d6d7:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    d6d8:	2901      	cmp	r1, #1
    d6da:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    d6de:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    d6e2:	d014      	beq.n	d70e <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    d6e4:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    d6e6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    d6ea:	d1cc      	bne.n	d686 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    d6ec:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    d6ee:	9310      	str	r3, [sp, #64]	; 0x40
    d6f0:	e7c9      	b.n	d686 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    d6f2:	3407      	adds	r4, #7
    d6f4:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    d6f8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    d6fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d700:	e7c1      	b.n	d686 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    d702:	f854 3b04 	ldr.w	r3, [r4], #4
    d706:	9310      	str	r3, [sp, #64]	; 0x40
    d708:	2300      	movs	r3, #0
    d70a:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    d70c:	e7bb      	b.n	d686 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    d70e:	b2db      	uxtb	r3, r3
    d710:	e7cd      	b.n	d6ae <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    d712:	2b04      	cmp	r3, #4
    d714:	d108      	bne.n	d728 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    d716:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    d718:	f024 0407 	bic.w	r4, r4, #7
    d71c:	e9d4 2300 	ldrd	r2, r3, [r4]
    d720:	3408      	adds	r4, #8
    d722:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d726:	e7ae      	b.n	d686 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d728:	2b03      	cmp	r3, #3
    d72a:	d1ac      	bne.n	d686 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    d72c:	f854 3b04 	ldr.w	r3, [r4], #4
    d730:	e7dd      	b.n	d6ee <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    d732:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d736:	2878      	cmp	r0, #120	; 0x78
    d738:	d8b4      	bhi.n	d6a4 <z_cbvprintf_impl+0x410>
    d73a:	2862      	cmp	r0, #98	; 0x62
    d73c:	d81c      	bhi.n	d778 <z_cbvprintf_impl+0x4e4>
    d73e:	2825      	cmp	r0, #37	; 0x25
    d740:	f43f adb8 	beq.w	d2b4 <z_cbvprintf_impl+0x20>
    d744:	2858      	cmp	r0, #88	; 0x58
    d746:	d1ad      	bne.n	d6a4 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d748:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d74c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d750:	9300      	str	r3, [sp, #0]
    d752:	aa12      	add	r2, sp, #72	; 0x48
    d754:	ab0a      	add	r3, sp, #40	; 0x28
    d756:	f7ff fd51 	bl	d1fc <encode_uint>
			if (precision >= 0) {
    d75a:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    d75e:	4607      	mov	r7, r0
			if (precision >= 0) {
    d760:	f280 8097 	bge.w	d892 <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    d764:	2f00      	cmp	r7, #0
    d766:	d09d      	beq.n	d6a4 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d768:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d76c:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    d770:	2e00      	cmp	r6, #0
    d772:	d04e      	beq.n	d812 <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    d774:	3001      	adds	r0, #1
    d776:	e04c      	b.n	d812 <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    d778:	3863      	subs	r0, #99	; 0x63
    d77a:	2815      	cmp	r0, #21
    d77c:	d892      	bhi.n	d6a4 <z_cbvprintf_impl+0x410>
    d77e:	a201      	add	r2, pc, #4	; (adr r2, d784 <z_cbvprintf_impl+0x4f0>)
    d780:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d784:	0000d803 	.word	0x0000d803
    d788:	0000d869 	.word	0x0000d869
    d78c:	0000d6a5 	.word	0x0000d6a5
    d790:	0000d6a5 	.word	0x0000d6a5
    d794:	0000d6a5 	.word	0x0000d6a5
    d798:	0000d6a5 	.word	0x0000d6a5
    d79c:	0000d869 	.word	0x0000d869
    d7a0:	0000d6a5 	.word	0x0000d6a5
    d7a4:	0000d6a5 	.word	0x0000d6a5
    d7a8:	0000d6a5 	.word	0x0000d6a5
    d7ac:	0000d6a5 	.word	0x0000d6a5
    d7b0:	0000d8f1 	.word	0x0000d8f1
    d7b4:	0000d88d 	.word	0x0000d88d
    d7b8:	0000d8b3 	.word	0x0000d8b3
    d7bc:	0000d6a5 	.word	0x0000d6a5
    d7c0:	0000d6a5 	.word	0x0000d6a5
    d7c4:	0000d7dd 	.word	0x0000d7dd
    d7c8:	0000d6a5 	.word	0x0000d6a5
    d7cc:	0000d88d 	.word	0x0000d88d
    d7d0:	0000d6a5 	.word	0x0000d6a5
    d7d4:	0000d6a5 	.word	0x0000d6a5
    d7d8:	0000d88d 	.word	0x0000d88d
			if (precision >= 0) {
    d7dc:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    d7e0:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    d7e2:	db0a      	blt.n	d7fa <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    d7e4:	4659      	mov	r1, fp
    d7e6:	4638      	mov	r0, r7
    d7e8:	f023 f85a 	bl	308a0 <strnlen>
			bpe = bps + len;
    d7ec:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    d7f0:	2f00      	cmp	r7, #0
    d7f2:	f43f af57 	beq.w	d6a4 <z_cbvprintf_impl+0x410>
		char sign = 0;
    d7f6:	2600      	movs	r6, #0
    d7f8:	e00b      	b.n	d812 <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    d7fa:	4638      	mov	r0, r7
    d7fc:	f7fb fdc3 	bl	9386 <strlen>
    d800:	e7f4      	b.n	d7ec <z_cbvprintf_impl+0x558>
		char sign = 0;
    d802:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    d804:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d806:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    d808:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d80c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    d810:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    d812:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d816:	f013 0210 	ands.w	r2, r3, #16
    d81a:	9205      	str	r2, [sp, #20]
    d81c:	f000 8083 	beq.w	d926 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    d820:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    d822:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    d824:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    d828:	bf48      	it	mi
    d82a:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    d82c:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    d82e:	bf48      	it	mi
    d830:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    d832:	f1b9 0f00 	cmp.w	r9, #0
    d836:	f340 8090 	ble.w	d95a <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    d83a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    d83e:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    d842:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d846:	0750      	lsls	r0, r2, #29
    d848:	9306      	str	r3, [sp, #24]
    d84a:	f100 8086 	bmi.w	d95a <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    d84e:	0651      	lsls	r1, r2, #25
    d850:	d579      	bpl.n	d946 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    d852:	b13e      	cbz	r6, d864 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    d854:	4630      	mov	r0, r6
    d856:	9903      	ldr	r1, [sp, #12]
    d858:	47d0      	blx	sl
    d85a:	2800      	cmp	r0, #0
    d85c:	db70      	blt.n	d940 <z_cbvprintf_impl+0x6ac>
    d85e:	9b06      	ldr	r3, [sp, #24]
    d860:	3501      	adds	r5, #1
    d862:	461e      	mov	r6, r3
					pad = '0';
    d864:	2230      	movs	r2, #48	; 0x30
    d866:	e06f      	b.n	d948 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    d868:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    d86a:	bf5a      	itte	pl
    d86c:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    d870:	015e      	lslpl	r6, r3, #5
				sign = '+';
    d872:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    d874:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    d878:	2b00      	cmp	r3, #0
    d87a:	f6bf af65 	bge.w	d748 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    d87e:	4252      	negs	r2, r2
    d880:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    d884:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    d886:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d88a:	e75d      	b.n	d748 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    d88c:	2600      	movs	r6, #0
    d88e:	e75b      	b.n	d748 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    d890:	2600      	movs	r6, #0
				conv->flag_zero = false;
    d892:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    d896:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d89a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    d89c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    d8a0:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    d8a2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    d8a6:	f67f af5d 	bls.w	d764 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    d8aa:	ebab 0303 	sub.w	r3, fp, r3
    d8ae:	9313      	str	r3, [sp, #76]	; 0x4c
    d8b0:	e758      	b.n	d764 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    d8b2:	9810      	ldr	r0, [sp, #64]	; 0x40
    d8b4:	b380      	cbz	r0, d918 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d8b6:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d8ba:	ab0a      	add	r3, sp, #40	; 0x28
    d8bc:	2100      	movs	r1, #0
    d8be:	f8cd 8000 	str.w	r8, [sp]
    d8c2:	aa12      	add	r2, sp, #72	; 0x48
    d8c4:	f7ff fc9a 	bl	d1fc <encode_uint>
				conv->altform_0c = true;
    d8c8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d8cc:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    d8d0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d8d4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d8d8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d8dc:	4607      	mov	r7, r0
				conv->altform_0c = true;
    d8de:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d8e2:	dad5      	bge.n	d890 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    d8e4:	2800      	cmp	r0, #0
    d8e6:	f43f aedd 	beq.w	d6a4 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d8ea:	eba8 0000 	sub.w	r0, r8, r0
    d8ee:	e782      	b.n	d7f6 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    d8f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    d8f2:	2907      	cmp	r1, #7
    d8f4:	f63f aed6 	bhi.w	d6a4 <z_cbvprintf_impl+0x410>
    d8f8:	e8df f001 	tbb	[pc, r1]
    d8fc:	0c06040c 	.word	0x0c06040c
    d900:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    d904:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    d906:	e6cd      	b.n	d6a4 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    d908:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    d90a:	e6cb      	b.n	d6a4 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    d90c:	17ea      	asrs	r2, r5, #31
    d90e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    d912:	e6c7      	b.n	d6a4 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    d914:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    d916:	e6c5      	b.n	d6a4 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    d918:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d9d8 <z_cbvprintf_impl+0x744>
		char sign = 0;
    d91c:	4606      	mov	r6, r0
    d91e:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    d922:	2005      	movs	r0, #5
    d924:	e775      	b.n	d812 <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    d926:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    d928:	bf48      	it	mi
    d92a:	3001      	addmi	r0, #1
    d92c:	e779      	b.n	d822 <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    d92e:	4610      	mov	r0, r2
    d930:	9307      	str	r3, [sp, #28]
    d932:	9206      	str	r2, [sp, #24]
    d934:	9903      	ldr	r1, [sp, #12]
    d936:	47d0      	blx	sl
    d938:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d93c:	2800      	cmp	r0, #0
    d93e:	da04      	bge.n	d94a <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    d940:	b017      	add	sp, #92	; 0x5c
    d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    d946:	2220      	movs	r2, #32
					pad = '0';
    d948:	464b      	mov	r3, r9
				while (width-- > 0) {
    d94a:	4619      	mov	r1, r3
    d94c:	2900      	cmp	r1, #0
    d94e:	f103 33ff 	add.w	r3, r3, #4294967295
    d952:	dcec      	bgt.n	d92e <z_cbvprintf_impl+0x69a>
    d954:	444d      	add	r5, r9
    d956:	4699      	mov	r9, r3
    d958:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    d95a:	b12e      	cbz	r6, d968 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    d95c:	4630      	mov	r0, r6
    d95e:	9903      	ldr	r1, [sp, #12]
    d960:	47d0      	blx	sl
    d962:	2800      	cmp	r0, #0
    d964:	dbec      	blt.n	d940 <z_cbvprintf_impl+0x6ac>
    d966:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    d968:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d96c:	06da      	lsls	r2, r3, #27
    d96e:	d401      	bmi.n	d974 <z_cbvprintf_impl+0x6e0>
    d970:	071b      	lsls	r3, r3, #28
    d972:	d505      	bpl.n	d980 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    d974:	2030      	movs	r0, #48	; 0x30
    d976:	9903      	ldr	r1, [sp, #12]
    d978:	47d0      	blx	sl
    d97a:	2800      	cmp	r0, #0
    d97c:	dbe0      	blt.n	d940 <z_cbvprintf_impl+0x6ac>
    d97e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    d980:	9b05      	ldr	r3, [sp, #20]
    d982:	b133      	cbz	r3, d992 <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    d984:	9903      	ldr	r1, [sp, #12]
    d986:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d98a:	47d0      	blx	sl
    d98c:	2800      	cmp	r0, #0
    d98e:	dbd7      	blt.n	d940 <z_cbvprintf_impl+0x6ac>
    d990:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d992:	44ab      	add	fp, r5
    d994:	e005      	b.n	d9a2 <z_cbvprintf_impl+0x70e>
				OUTC('0');
    d996:	2030      	movs	r0, #48	; 0x30
    d998:	9903      	ldr	r1, [sp, #12]
    d99a:	47d0      	blx	sl
    d99c:	2800      	cmp	r0, #0
    d99e:	dbcf      	blt.n	d940 <z_cbvprintf_impl+0x6ac>
    d9a0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d9a2:	ebab 0305 	sub.w	r3, fp, r5
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	dcf5      	bgt.n	d996 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    d9aa:	4643      	mov	r3, r8
    d9ac:	463a      	mov	r2, r7
    d9ae:	4650      	mov	r0, sl
    d9b0:	9903      	ldr	r1, [sp, #12]
    d9b2:	f01c fe50 	bl	2a656 <outs>
    d9b6:	2800      	cmp	r0, #0
    d9b8:	dbc2      	blt.n	d940 <z_cbvprintf_impl+0x6ac>
    d9ba:	4405      	add	r5, r0
		while (width > 0) {
    d9bc:	44a9      	add	r9, r5
    d9be:	eba9 0305 	sub.w	r3, r9, r5
    d9c2:	2b00      	cmp	r3, #0
    d9c4:	f77f ae6e 	ble.w	d6a4 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    d9c8:	2020      	movs	r0, #32
    d9ca:	9903      	ldr	r1, [sp, #12]
    d9cc:	47d0      	blx	sl
    d9ce:	2800      	cmp	r0, #0
    d9d0:	dbb6      	blt.n	d940 <z_cbvprintf_impl+0x6ac>
    d9d2:	3501      	adds	r5, #1
			--width;
    d9d4:	e7f3      	b.n	d9be <z_cbvprintf_impl+0x72a>
    d9d6:	bf00      	nop
    d9d8:	0003344b 	.word	0x0003344b

0000d9dc <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    d9dc:	b538      	push	{r3, r4, r5, lr}
    d9de:	460d      	mov	r5, r1
    d9e0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    d9e2:	2220      	movs	r2, #32
    d9e4:	2100      	movs	r1, #0
    d9e6:	f022 fde8 	bl	305ba <memset>
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    d9ea:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    d9ec:	68eb      	ldr	r3, [r5, #12]
    d9ee:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    d9f0:	68ab      	ldr	r3, [r5, #8]
    d9f2:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    d9f4:	682b      	ldr	r3, [r5, #0]
    d9f6:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    d9f8:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    d9fa:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    d9fc:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    d9fe:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    da00:	b123      	cbz	r3, da0c <mpsc_pbuf_init+0x30>
    da02:	1e59      	subs	r1, r3, #1
    da04:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    da06:	bf08      	it	eq
    da08:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    da0c:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    da0e:	2201      	movs	r2, #1
    da10:	2100      	movs	r1, #0
    da12:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    da16:	f022 fbd4 	bl	301c2 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    da1a:	b148      	cbz	r0, da30 <mpsc_pbuf_init+0x54>
    da1c:	4905      	ldr	r1, [pc, #20]	; (da34 <mpsc_pbuf_init+0x58>)
    da1e:	4806      	ldr	r0, [pc, #24]	; (da38 <mpsc_pbuf_init+0x5c>)
    da20:	232e      	movs	r3, #46	; 0x2e
    da22:	4a06      	ldr	r2, [pc, #24]	; (da3c <mpsc_pbuf_init+0x60>)
    da24:	f01c fe35 	bl	2a692 <assert_print>
    da28:	212e      	movs	r1, #46	; 0x2e
    da2a:	4804      	ldr	r0, [pc, #16]	; (da3c <mpsc_pbuf_init+0x60>)
    da2c:	f01c fe2a 	bl	2a684 <assert_post_action>
	ARG_UNUSED(err);
}
    da30:	bd38      	pop	{r3, r4, r5, pc}
    da32:	bf00      	nop
    da34:	00033472 	.word	0x00033472
    da38:	00032629 	.word	0x00032629
    da3c:	0003344c 	.word	0x0003344c

0000da40 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    da40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da44:	b087      	sub	sp, #28
    da46:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    da4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    da4c:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    da4e:	3b01      	subs	r3, #1
    da50:	428b      	cmp	r3, r1
{
    da52:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
    da54:	f0c0 80a0 	bcc.w	db98 <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
    da58:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
    da5a:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    da5c:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    da60:	f04f 0320 	mov.w	r3, #32
    da64:	f3ef 8b11 	mrs	fp, BASEPRI
    da68:	f383 8812 	msr	BASEPRI_MAX, r3
    da6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    da70:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
    da72:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    da74:	f017 fadc 	bl	25030 <z_spin_lock_valid>
    da78:	b958      	cbnz	r0, da92 <mpsc_pbuf_alloc+0x52>
    da7a:	2394      	movs	r3, #148	; 0x94
    da7c:	4a49      	ldr	r2, [pc, #292]	; (dba4 <mpsc_pbuf_alloc+0x164>)
    da7e:	494a      	ldr	r1, [pc, #296]	; (dba8 <mpsc_pbuf_alloc+0x168>)
    da80:	484a      	ldr	r0, [pc, #296]	; (dbac <mpsc_pbuf_alloc+0x16c>)
    da82:	f01c fe06 	bl	2a692 <assert_print>
    da86:	4629      	mov	r1, r5
    da88:	4849      	ldr	r0, [pc, #292]	; (dbb0 <mpsc_pbuf_alloc+0x170>)
    da8a:	f01c fe02 	bl	2a692 <assert_print>
    da8e:	2194      	movs	r1, #148	; 0x94
    da90:	e050      	b.n	db34 <mpsc_pbuf_alloc+0xf4>
	z_spin_lock_set_owner(l);
    da92:	4628      	mov	r0, r5
    da94:	f017 fae8 	bl	25068 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    da98:	a905      	add	r1, sp, #20
    da9a:	4620      	mov	r0, r4
    da9c:	f01c fe06 	bl	2a6ac <free_space>

		if (free_wlen >= wlen) {
    daa0:	9905      	ldr	r1, [sp, #20]
		wrap = free_space(buffer, &free_wlen);
    daa2:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
    daa4:	42b9      	cmp	r1, r7
    daa6:	d328      	bcc.n	dafa <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    daa8:	6822      	ldr	r2, [r4, #0]
			item =
    daaa:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    daac:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    daae:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    dab2:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    dab6:	f021 0103 	bic.w	r1, r1, #3
    daba:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    dabe:	6821      	ldr	r1, [r4, #0]
    dac0:	463a      	mov	r2, r7
    dac2:	f01c fe15 	bl	2a6f0 <idx_inc>
		cont = false;
    dac6:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    daca:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dacc:	4628      	mov	r0, r5
    dace:	f017 fabd 	bl	2504c <z_spin_unlock_valid>
    dad2:	b320      	cbz	r0, db1e <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
    dad4:	f389 8811 	msr	BASEPRI, r9
    dad8:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    dadc:	f1b8 0f00 	cmp.w	r8, #0
    dae0:	d05c      	beq.n	db9c <mpsc_pbuf_alloc+0x15c>
    dae2:	b146      	cbz	r6, daf6 <mpsc_pbuf_alloc+0xb6>
    dae4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    dae8:	2b00      	cmp	r3, #0
    daea:	d0b9      	beq.n	da60 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    daec:	69a3      	ldr	r3, [r4, #24]
    daee:	b113      	cbz	r3, daf6 <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
    daf0:	4631      	mov	r1, r6
    daf2:	4620      	mov	r0, r4
    daf4:	4798      	blx	r3
{
    daf6:	2600      	movs	r6, #0
    daf8:	e7b2      	b.n	da60 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    dafa:	b118      	cbz	r0, db04 <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
    dafc:	4620      	mov	r0, r4
    dafe:	f01c fe05 	bl	2a70c <add_skip_item>
			cont = true;
    db02:	e7e3      	b.n	dacc <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    db04:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    db08:	4313      	orrs	r3, r2
    db0a:	d036      	beq.n	db7a <mpsc_pbuf_alloc+0x13a>
    db0c:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
    db0e:	f022 fb07 	bl	30120 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    db12:	9903      	ldr	r1, [sp, #12]
    db14:	bb88      	cbnz	r0, db7a <mpsc_pbuf_alloc+0x13a>
    db16:	4628      	mov	r0, r5
    db18:	f017 fa98 	bl	2504c <z_spin_unlock_valid>
    db1c:	b968      	cbnz	r0, db3a <mpsc_pbuf_alloc+0xfa>
    db1e:	23c2      	movs	r3, #194	; 0xc2
    db20:	4a20      	ldr	r2, [pc, #128]	; (dba4 <mpsc_pbuf_alloc+0x164>)
    db22:	4924      	ldr	r1, [pc, #144]	; (dbb4 <mpsc_pbuf_alloc+0x174>)
    db24:	4821      	ldr	r0, [pc, #132]	; (dbac <mpsc_pbuf_alloc+0x16c>)
    db26:	f01c fdb4 	bl	2a692 <assert_print>
    db2a:	4629      	mov	r1, r5
    db2c:	4822      	ldr	r0, [pc, #136]	; (dbb8 <mpsc_pbuf_alloc+0x178>)
    db2e:	f01c fdb0 	bl	2a692 <assert_print>
    db32:	21c2      	movs	r1, #194	; 0xc2
    db34:	481b      	ldr	r0, [pc, #108]	; (dba4 <mpsc_pbuf_alloc+0x164>)
    db36:	f01c fda5 	bl	2a684 <assert_post_action>
    db3a:	f38b 8811 	msr	BASEPRI, fp
    db3e:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    db42:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    db46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    db4a:	f017 fd6d 	bl	25628 <z_impl_k_sem_take>
    db4e:	4680      	mov	r8, r0
	__asm__ volatile(
    db50:	f04f 0320 	mov.w	r3, #32
    db54:	f3ef 8911 	mrs	r9, BASEPRI
    db58:	f383 8812 	msr	BASEPRI_MAX, r3
    db5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    db60:	4628      	mov	r0, r5
    db62:	f017 fa65 	bl	25030 <z_spin_lock_valid>
    db66:	2800      	cmp	r0, #0
    db68:	d087      	beq.n	da7a <mpsc_pbuf_alloc+0x3a>
			if (err == 0) {
    db6a:	fab8 f888 	clz	r8, r8
	z_spin_lock_set_owner(l);
    db6e:	4628      	mov	r0, r5
    db70:	f017 fa7a 	bl	25068 <z_spin_lock_set_owner>
    db74:	ea4f 1858 	mov.w	r8, r8, lsr #5
    db78:	e7a8      	b.n	dacc <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    db7a:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    db7c:	4620      	mov	r0, r4
    db7e:	f10d 0313 	add.w	r3, sp, #19
    db82:	f3c2 0240 	ubfx	r2, r2, #1, #1
    db86:	f01c fde4 	bl	2a752 <drop_item_locked>
			cont = dropped_item != NULL;
    db8a:	f1b0 0800 	subs.w	r8, r0, #0
    db8e:	4606      	mov	r6, r0
    db90:	bf18      	it	ne
    db92:	f04f 0801 	movne.w	r8, #1
    db96:	e799      	b.n	dacc <mpsc_pbuf_alloc+0x8c>
		return NULL;
    db98:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    db9c:	4650      	mov	r0, sl
    db9e:	b007      	add	sp, #28
    dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dba4:	0003338d 	.word	0x0003338d
    dba8:	000333e6 	.word	0x000333e6
    dbac:	00032629 	.word	0x00032629
    dbb0:	000333fb 	.word	0x000333fb
    dbb4:	000333ba 	.word	0x000333ba
    dbb8:	000333d1 	.word	0x000333d1

0000dbbc <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    dbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbc0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    dbc2:	69c3      	ldr	r3, [r0, #28]
    dbc4:	4608      	mov	r0, r1
{
    dbc6:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    dbc8:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    dbca:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    dbce:	4607      	mov	r7, r0
    dbd0:	f04f 0320 	mov.w	r3, #32
    dbd4:	f3ef 8811 	mrs	r8, BASEPRI
    dbd8:	f383 8812 	msr	BASEPRI_MAX, r3
    dbdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dbe0:	4628      	mov	r0, r5
    dbe2:	f017 fa25 	bl	25030 <z_spin_lock_valid>
    dbe6:	b968      	cbnz	r0, dc04 <mpsc_pbuf_commit+0x48>
    dbe8:	2394      	movs	r3, #148	; 0x94
    dbea:	4a19      	ldr	r2, [pc, #100]	; (dc50 <mpsc_pbuf_commit+0x94>)
    dbec:	4919      	ldr	r1, [pc, #100]	; (dc54 <mpsc_pbuf_commit+0x98>)
    dbee:	481a      	ldr	r0, [pc, #104]	; (dc58 <mpsc_pbuf_commit+0x9c>)
    dbf0:	f01c fd4f 	bl	2a692 <assert_print>
    dbf4:	4629      	mov	r1, r5
    dbf6:	4819      	ldr	r0, [pc, #100]	; (dc5c <mpsc_pbuf_commit+0xa0>)
    dbf8:	f01c fd4b 	bl	2a692 <assert_print>
    dbfc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dbfe:	4814      	ldr	r0, [pc, #80]	; (dc50 <mpsc_pbuf_commit+0x94>)
    dc00:	f01c fd40 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
    dc04:	4628      	mov	r0, r5
    dc06:	f017 fa2f 	bl	25068 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    dc0a:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    dc0c:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    dc0e:	f043 0301 	orr.w	r3, r3, #1
    dc12:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    dc14:	6861      	ldr	r1, [r4, #4]
    dc16:	4620      	mov	r0, r4
    dc18:	f01c fd6a 	bl	2a6f0 <idx_inc>
    dc1c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    dc1e:	4620      	mov	r0, r4
    dc20:	f01c fd8a 	bl	2a738 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dc24:	4628      	mov	r0, r5
    dc26:	f017 fa11 	bl	2504c <z_spin_unlock_valid>
    dc2a:	b958      	cbnz	r0, dc44 <mpsc_pbuf_commit+0x88>
    dc2c:	23c2      	movs	r3, #194	; 0xc2
    dc2e:	4a08      	ldr	r2, [pc, #32]	; (dc50 <mpsc_pbuf_commit+0x94>)
    dc30:	490b      	ldr	r1, [pc, #44]	; (dc60 <mpsc_pbuf_commit+0xa4>)
    dc32:	4809      	ldr	r0, [pc, #36]	; (dc58 <mpsc_pbuf_commit+0x9c>)
    dc34:	f01c fd2d 	bl	2a692 <assert_print>
    dc38:	4629      	mov	r1, r5
    dc3a:	480a      	ldr	r0, [pc, #40]	; (dc64 <mpsc_pbuf_commit+0xa8>)
    dc3c:	f01c fd29 	bl	2a692 <assert_print>
    dc40:	21c2      	movs	r1, #194	; 0xc2
    dc42:	e7dc      	b.n	dbfe <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    dc44:	f388 8811 	msr	BASEPRI, r8
    dc48:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc50:	0003338d 	.word	0x0003338d
    dc54:	000333e6 	.word	0x000333e6
    dc58:	00032629 	.word	0x00032629
    dc5c:	000333fb 	.word	0x000333fb
    dc60:	000333ba 	.word	0x000333ba
    dc64:	000333d1 	.word	0x000333d1

0000dc68 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    dc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc6c:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    dc6e:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    dc72:	f04f 0320 	mov.w	r3, #32
    dc76:	f3ef 8811 	mrs	r8, BASEPRI
    dc7a:	f383 8812 	msr	BASEPRI_MAX, r3
    dc7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc82:	4638      	mov	r0, r7
    dc84:	f017 f9d4 	bl	25030 <z_spin_lock_valid>
    dc88:	4605      	mov	r5, r0
    dc8a:	b968      	cbnz	r0, dca8 <mpsc_pbuf_claim+0x40>
    dc8c:	2394      	movs	r3, #148	; 0x94
    dc8e:	4a33      	ldr	r2, [pc, #204]	; (dd5c <mpsc_pbuf_claim+0xf4>)
    dc90:	4933      	ldr	r1, [pc, #204]	; (dd60 <mpsc_pbuf_claim+0xf8>)
    dc92:	4834      	ldr	r0, [pc, #208]	; (dd64 <mpsc_pbuf_claim+0xfc>)
    dc94:	f01c fcfd 	bl	2a692 <assert_print>
    dc98:	4639      	mov	r1, r7
    dc9a:	4833      	ldr	r0, [pc, #204]	; (dd68 <mpsc_pbuf_claim+0x100>)
    dc9c:	f01c fcf9 	bl	2a692 <assert_print>
    dca0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dca2:	482e      	ldr	r0, [pc, #184]	; (dd5c <mpsc_pbuf_claim+0xf4>)
    dca4:	f01c fcee 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
    dca8:	4638      	mov	r0, r7
    dcaa:	f017 f9dd 	bl	25068 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    dcae:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    dcb2:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    dcb4:	bf88      	it	hi
    dcb6:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    dcb8:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    dcba:	2b00      	cmp	r3, #0
    dcbc:	d03f      	beq.n	dd3e <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
    dcbe:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    dcc0:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    dcc4:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    dcc8:	f013 0003 	ands.w	r0, r3, #3
    dccc:	d03a      	beq.n	dd44 <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
    dcce:	2802      	cmp	r0, #2
    dcd0:	d103      	bne.n	dcda <mpsc_pbuf_claim+0x72>
		return item->skip.len;
    dcd2:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    dcd6:	08b6      	lsrs	r6, r6, #2
    dcd8:	d105      	bne.n	dce6 <mpsc_pbuf_claim+0x7e>
    dcda:	07d8      	lsls	r0, r3, #31
    dcdc:	d41f      	bmi.n	dd1e <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    dcde:	4648      	mov	r0, r9
    dce0:	69e3      	ldr	r3, [r4, #28]
    dce2:	4798      	blx	r3
    dce4:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    dce6:	68a1      	ldr	r1, [r4, #8]
    dce8:	4632      	mov	r2, r6
    dcea:	4620      	mov	r0, r4
    dcec:	f01c fd00 	bl	2a6f0 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    dcf0:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    dcf2:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    dcf4:	4632      	mov	r2, r6
    dcf6:	4620      	mov	r0, r4
    dcf8:	f01c fcfa 	bl	2a6f0 <idx_inc>
				buffer->rd_idx =
    dcfc:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dcfe:	4638      	mov	r0, r7
    dd00:	f017 f9a4 	bl	2504c <z_spin_unlock_valid>
    dd04:	bb00      	cbnz	r0, dd48 <mpsc_pbuf_claim+0xe0>
    dd06:	23c2      	movs	r3, #194	; 0xc2
    dd08:	4a14      	ldr	r2, [pc, #80]	; (dd5c <mpsc_pbuf_claim+0xf4>)
    dd0a:	4918      	ldr	r1, [pc, #96]	; (dd6c <mpsc_pbuf_claim+0x104>)
    dd0c:	4815      	ldr	r0, [pc, #84]	; (dd64 <mpsc_pbuf_claim+0xfc>)
    dd0e:	f01c fcc0 	bl	2a692 <assert_print>
    dd12:	4639      	mov	r1, r7
    dd14:	4816      	ldr	r0, [pc, #88]	; (dd70 <mpsc_pbuf_claim+0x108>)
    dd16:	f01c fcbc 	bl	2a692 <assert_print>
    dd1a:	21c2      	movs	r1, #194	; 0xc2
    dd1c:	e7c1      	b.n	dca2 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    dd1e:	f043 0302 	orr.w	r3, r3, #2
    dd22:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    dd26:	69e3      	ldr	r3, [r4, #28]
    dd28:	4648      	mov	r0, r9
    dd2a:	68a5      	ldr	r5, [r4, #8]
    dd2c:	4798      	blx	r3
    dd2e:	4629      	mov	r1, r5
    dd30:	4602      	mov	r2, r0
    dd32:	4620      	mov	r0, r4
    dd34:	f01c fcdc 	bl	2a6f0 <idx_inc>
		cont = false;
    dd38:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    dd3a:	60a0      	str	r0, [r4, #8]
    dd3c:	e7df      	b.n	dcfe <mpsc_pbuf_claim+0x96>
		cont = false;
    dd3e:	461d      	mov	r5, r3
			item = NULL;
    dd40:	46a9      	mov	r9, r5
    dd42:	e7dc      	b.n	dcfe <mpsc_pbuf_claim+0x96>
		cont = false;
    dd44:	4605      	mov	r5, r0
    dd46:	e7fb      	b.n	dd40 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
    dd48:	f388 8811 	msr	BASEPRI, r8
    dd4c:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    dd50:	2d00      	cmp	r5, #0
    dd52:	d18e      	bne.n	dc72 <mpsc_pbuf_claim+0xa>

	return item;
}
    dd54:	4648      	mov	r0, r9
    dd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd5a:	bf00      	nop
    dd5c:	0003338d 	.word	0x0003338d
    dd60:	000333e6 	.word	0x000333e6
    dd64:	00032629 	.word	0x00032629
    dd68:	000333fb 	.word	0x000333fb
    dd6c:	000333ba 	.word	0x000333ba
    dd70:	000333d1 	.word	0x000333d1

0000dd74 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    dd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd78:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    dd7a:	69c3      	ldr	r3, [r0, #28]
    dd7c:	4608      	mov	r0, r1
{
    dd7e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    dd80:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    dd82:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    dd86:	4607      	mov	r7, r0
	__asm__ volatile(
    dd88:	f04f 0320 	mov.w	r3, #32
    dd8c:	f3ef 8811 	mrs	r8, BASEPRI
    dd90:	f383 8812 	msr	BASEPRI_MAX, r3
    dd94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dd98:	4630      	mov	r0, r6
    dd9a:	f017 f949 	bl	25030 <z_spin_lock_valid>
    dd9e:	b968      	cbnz	r0, ddbc <mpsc_pbuf_free+0x48>
    dda0:	2394      	movs	r3, #148	; 0x94
    dda2:	4a23      	ldr	r2, [pc, #140]	; (de30 <mpsc_pbuf_free+0xbc>)
    dda4:	4923      	ldr	r1, [pc, #140]	; (de34 <mpsc_pbuf_free+0xc0>)
    dda6:	4824      	ldr	r0, [pc, #144]	; (de38 <mpsc_pbuf_free+0xc4>)
    dda8:	f01c fc73 	bl	2a692 <assert_print>
    ddac:	4631      	mov	r1, r6
    ddae:	4823      	ldr	r0, [pc, #140]	; (de3c <mpsc_pbuf_free+0xc8>)
    ddb0:	f01c fc6f 	bl	2a692 <assert_print>
    ddb4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ddb6:	481e      	ldr	r0, [pc, #120]	; (de30 <mpsc_pbuf_free+0xbc>)
    ddb8:	f01c fc64 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
    ddbc:	4630      	mov	r0, r6
    ddbe:	f017 f953 	bl	25068 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    ddc2:	782b      	ldrb	r3, [r5, #0]
    ddc4:	f36f 0300 	bfc	r3, #0, #1
    ddc8:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ddca:	6923      	ldr	r3, [r4, #16]
    ddcc:	079b      	lsls	r3, r3, #30
    ddce:	d505      	bpl.n	dddc <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    ddd0:	68e2      	ldr	r2, [r4, #12]
    ddd2:	6a23      	ldr	r3, [r4, #32]
    ddd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ddd8:	429d      	cmp	r5, r3
    ddda:	d119      	bne.n	de10 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
    dddc:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ddde:	463a      	mov	r2, r7
		witem->hdr.busy = 0;
    dde0:	f36f 0341 	bfc	r3, #1, #1
    dde4:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    dde6:	68e1      	ldr	r1, [r4, #12]
    dde8:	4620      	mov	r0, r4
    ddea:	f01c fc81 	bl	2a6f0 <idx_inc>
    ddee:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ddf0:	4630      	mov	r0, r6
    ddf2:	f017 f92b 	bl	2504c <z_spin_unlock_valid>
    ddf6:	b980      	cbnz	r0, de1a <mpsc_pbuf_free+0xa6>
    ddf8:	23c2      	movs	r3, #194	; 0xc2
    ddfa:	4a0d      	ldr	r2, [pc, #52]	; (de30 <mpsc_pbuf_free+0xbc>)
    ddfc:	4910      	ldr	r1, [pc, #64]	; (de40 <mpsc_pbuf_free+0xcc>)
    ddfe:	480e      	ldr	r0, [pc, #56]	; (de38 <mpsc_pbuf_free+0xc4>)
    de00:	f01c fc47 	bl	2a692 <assert_print>
    de04:	4631      	mov	r1, r6
    de06:	480f      	ldr	r0, [pc, #60]	; (de44 <mpsc_pbuf_free+0xd0>)
    de08:	f01c fc43 	bl	2a692 <assert_print>
    de0c:	21c2      	movs	r1, #194	; 0xc2
    de0e:	e7d2      	b.n	ddb6 <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
    de10:	682b      	ldr	r3, [r5, #0]
    de12:	f367 039f 	bfi	r3, r7, #2, #30
    de16:	602b      	str	r3, [r5, #0]
    de18:	e7ea      	b.n	ddf0 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
    de1a:	f388 8811 	msr	BASEPRI, r8
    de1e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    de22:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    de26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de2a:	f017 bbb9 	b.w	255a0 <z_impl_k_sem_give>
    de2e:	bf00      	nop
    de30:	0003338d 	.word	0x0003338d
    de34:	000333e6 	.word	0x000333e6
    de38:	00032629 	.word	0x00032629
    de3c:	000333fb 	.word	0x000333fb
    de40:	000333ba 	.word	0x000333ba
    de44:	000333d1 	.word	0x000333d1

0000de48 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    de48:	b148      	cbz	r0, de5e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    de4a:	4b05      	ldr	r3, [pc, #20]	; (de60 <arch_busy_wait+0x18>)
    de4c:	4a05      	ldr	r2, [pc, #20]	; (de64 <arch_busy_wait+0x1c>)
    de4e:	681b      	ldr	r3, [r3, #0]
    de50:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    de54:	4358      	muls	r0, r3
    de56:	4b04      	ldr	r3, [pc, #16]	; (de68 <arch_busy_wait+0x20>)
    de58:	f043 0301 	orr.w	r3, r3, #1
    de5c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    de5e:	4770      	bx	lr
    de60:	20008694 	.word	0x20008694
    de64:	000f4240 	.word	0x000f4240
    de68:	00031700 	.word	0x00031700

0000de6c <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    de6c:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    de6e:	b570      	push	{r4, r5, r6, lr}
    de70:	4605      	mov	r5, r0
    de72:	461e      	mov	r6, r3
    de74:	4608      	mov	r0, r1
    de76:	d90b      	bls.n	de90 <ppi_ipc_to_rtc.isra.0+0x24>
    de78:	491d      	ldr	r1, [pc, #116]	; (def0 <ppi_ipc_to_rtc.isra.0+0x84>)
    de7a:	481e      	ldr	r0, [pc, #120]	; (def4 <ppi_ipc_to_rtc.isra.0+0x88>)
    de7c:	f240 13e7 	movw	r3, #487	; 0x1e7
    de80:	4a1d      	ldr	r2, [pc, #116]	; (def8 <ppi_ipc_to_rtc.isra.0+0x8c>)
    de82:	f01c fc06 	bl	2a692 <assert_print>
    de86:	f240 11e7 	movw	r1, #487	; 0x1e7
    de8a:	481b      	ldr	r0, [pc, #108]	; (def8 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    de8c:	f01c fbfa 	bl	2a684 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    de90:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    de92:	f010 fa39 	bl	1e308 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    de96:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    de9a:	b1ae      	cbz	r6, dec8 <ppi_ipc_to_rtc.isra.0+0x5c>
    de9c:	b950      	cbnz	r0, deb4 <ppi_ipc_to_rtc.isra.0+0x48>
    de9e:	4917      	ldr	r1, [pc, #92]	; (defc <ppi_ipc_to_rtc.isra.0+0x90>)
    dea0:	f240 234e 	movw	r3, #590	; 0x24e
    dea4:	4a16      	ldr	r2, [pc, #88]	; (df00 <ppi_ipc_to_rtc.isra.0+0x94>)
    dea6:	4813      	ldr	r0, [pc, #76]	; (def4 <ppi_ipc_to_rtc.isra.0+0x88>)
    dea8:	f01c fbf3 	bl	2a692 <assert_print>
    deac:	f240 214e 	movw	r1, #590	; 0x24e
    deb0:	4813      	ldr	r0, [pc, #76]	; (df00 <ppi_ipc_to_rtc.isra.0+0x94>)
    deb2:	e7eb      	b.n	de8c <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    deb4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    deb8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    debc:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    dec0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    dec4:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    dec6:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    dec8:	b948      	cbnz	r0, dede <ppi_ipc_to_rtc.isra.0+0x72>
    deca:	490c      	ldr	r1, [pc, #48]	; (defc <ppi_ipc_to_rtc.isra.0+0x90>)
    decc:	f240 2363 	movw	r3, #611	; 0x263
    ded0:	4a0b      	ldr	r2, [pc, #44]	; (df00 <ppi_ipc_to_rtc.isra.0+0x94>)
    ded2:	4808      	ldr	r0, [pc, #32]	; (def4 <ppi_ipc_to_rtc.isra.0+0x88>)
    ded4:	f01c fbdd 	bl	2a692 <assert_print>
    ded8:	f240 2163 	movw	r1, #611	; 0x263
    dedc:	e7e8      	b.n	deb0 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    dede:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    dee2:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    dee6:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    deea:	6016      	str	r6, [r2, #0]
    deec:	e7eb      	b.n	dec6 <ppi_ipc_to_rtc.isra.0+0x5a>
    deee:	bf00      	nop
    def0:	000334b1 	.word	0x000334b1
    def4:	00032629 	.word	0x00032629
    def8:	0003347f 	.word	0x0003347f
    defc:	000334f4 	.word	0x000334f4
    df00:	000334bc 	.word	0x000334bc

0000df04 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    df04:	b5f0      	push	{r4, r5, r6, r7, lr}
    df06:	b083      	sub	sp, #12
    df08:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    df0a:	1d38      	adds	r0, r7, #4
    df0c:	f011 f8a4 	bl	1f058 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    df10:	4b24      	ldr	r3, [pc, #144]	; (dfa4 <sync_rtc_setup+0xa0>)
    df12:	4298      	cmp	r0, r3
    df14:	d143      	bne.n	df9e <sync_rtc_setup+0x9a>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    df16:	f010 fbeb 	bl	1e6f0 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    df1a:	1e04      	subs	r4, r0, #0
    df1c:	da13      	bge.n	df46 <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    df1e:	7938      	ldrb	r0, [r7, #4]
    df20:	f011 f8a0 	bl	1f064 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    df24:	466d      	mov	r5, sp
    df26:	b088      	sub	sp, #32
    df28:	466a      	mov	r2, sp
    df2a:	4b1f      	ldr	r3, [pc, #124]	; (dfa8 <sync_rtc_setup+0xa4>)
    df2c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    df30:	2303      	movs	r3, #3
    df32:	f842 3f10 	str.w	r3, [r2, #16]!
    df36:	2300      	movs	r3, #0
    df38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df3c:	481b      	ldr	r0, [pc, #108]	; (dfac <sync_rtc_setup+0xa8>)
    df3e:	f000 fc93 	bl	e868 <z_impl_z_log_msg_static_create>
    df42:	46ad      	mov	sp, r5
	}

	return rv;
    df44:	e027      	b.n	df96 <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    df46:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    df4a:	4d19      	ldr	r5, [pc, #100]	; (dfb0 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    df4c:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    df4e:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    df50:	80fb      	strh	r3, [r7, #6]
    df52:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    df54:	687b      	ldr	r3, [r7, #4]
    df56:	b914      	cbnz	r4, df5e <sync_rtc_setup+0x5a>
		return -ENOSYS;
    df58:	f06f 0457 	mvn.w	r4, #87	; 0x57
    df5c:	e7e2      	b.n	df24 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    df5e:	2108      	movs	r1, #8
    df60:	4628      	mov	r0, r5
    df62:	4a14      	ldr	r2, [pc, #80]	; (dfb4 <sync_rtc_setup+0xb0>)
    df64:	47a0      	blx	r4
	if (err < 0) {
    df66:	1e04      	subs	r4, r0, #0
    df68:	dbdc      	blt.n	df24 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    df6a:	6933      	ldr	r3, [r6, #16]
    df6c:	2b00      	cmp	r3, #0
    df6e:	d0f3      	beq.n	df58 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    df70:	2201      	movs	r2, #1
    df72:	2108      	movs	r1, #8
    df74:	4628      	mov	r0, r5
    df76:	4798      	blx	r3
	if (rv < 0) {
    df78:	1e04      	subs	r4, r0, #0
    df7a:	dbd3      	blt.n	df24 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    df7c:	2301      	movs	r3, #1
    df7e:	7938      	ldrb	r0, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    df80:	4a0d      	ldr	r2, [pc, #52]	; (dfb8 <sync_rtc_setup+0xb4>)
    df82:	fa03 f100 	lsl.w	r1, r3, r0
    df86:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    df8a:	79fa      	ldrb	r2, [r7, #7]
    df8c:	7979      	ldrb	r1, [r7, #5]
    df8e:	f7ff ff6d 	bl	de6c <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    df92:	2c00      	cmp	r4, #0
    df94:	d1c6      	bne.n	df24 <sync_rtc_setup+0x20>
}
    df96:	4620      	mov	r0, r4
    df98:	370c      	adds	r7, #12
    df9a:	46bd      	mov	sp, r7
    df9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    df9e:	f06f 0412 	mvn.w	r4, #18
    dfa2:	e7bf      	b.n	df24 <sync_rtc_setup+0x20>
    dfa4:	0bad0000 	.word	0x0bad0000
    dfa8:	000334f8 	.word	0x000334f8
    dfac:	000315b4 	.word	0x000315b4
    dfb0:	00030fe4 	.word	0x00030fe4
    dfb4:	0000e06d 	.word	0x0000e06d
    dfb8:	40017000 	.word	0x40017000

0000dfbc <rtc_cb>:
{
    dfbc:	b570      	push	{r4, r5, r6, lr}
    dfbe:	9e04      	ldr	r6, [sp, #16]
    dfc0:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    dfc4:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    dfc6:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dfca:	4630      	mov	r0, r6
    dfcc:	f010 f982 	bl	1e2d4 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    dfd0:	2c0f      	cmp	r4, #15
    dfd2:	d90b      	bls.n	dfec <rtc_cb+0x30>
    dfd4:	491b      	ldr	r1, [pc, #108]	; (e044 <rtc_cb+0x88>)
    dfd6:	481c      	ldr	r0, [pc, #112]	; (e048 <rtc_cb+0x8c>)
    dfd8:	f240 13e1 	movw	r3, #481	; 0x1e1
    dfdc:	4a1b      	ldr	r2, [pc, #108]	; (e04c <rtc_cb+0x90>)
    dfde:	f01c fb58 	bl	2a692 <assert_print>
    dfe2:	f240 11e1 	movw	r1, #481	; 0x1e1
    dfe6:	4819      	ldr	r0, [pc, #100]	; (e04c <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    dfe8:	f01c fb4c 	bl	2a684 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    dfec:	00a4      	lsls	r4, r4, #2
    dfee:	b2e4      	uxtb	r4, r4
    dff0:	b950      	cbnz	r0, e008 <rtc_cb+0x4c>
    dff2:	4917      	ldr	r1, [pc, #92]	; (e050 <rtc_cb+0x94>)
    dff4:	4814      	ldr	r0, [pc, #80]	; (e048 <rtc_cb+0x8c>)
    dff6:	f44f 7317 	mov.w	r3, #604	; 0x25c
    dffa:	4a16      	ldr	r2, [pc, #88]	; (e054 <rtc_cb+0x98>)
    dffc:	f01c fb49 	bl	2a692 <assert_print>
    e000:	f44f 7117 	mov.w	r1, #604	; 0x25c
    e004:	4813      	ldr	r0, [pc, #76]	; (e054 <rtc_cb+0x98>)
    e006:	e7ef      	b.n	dfe8 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    e008:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    e00a:	4b13      	ldr	r3, [pc, #76]	; (e058 <rtc_cb+0x9c>)
    e00c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    e010:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    e012:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    e014:	4a11      	ldr	r2, [pc, #68]	; (e05c <rtc_cb+0xa0>)
    e016:	40ab      	lsls	r3, r5
    e018:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    e01c:	4630      	mov	r0, r6
    e01e:	f010 fb85 	bl	1e72c <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    e022:	4628      	mov	r0, r5
    e024:	f011 f81e 	bl	1f064 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    e028:	4b0d      	ldr	r3, [pc, #52]	; (e060 <rtc_cb+0xa4>)
    e02a:	4298      	cmp	r0, r3
    e02c:	d008      	beq.n	e040 <rtc_cb+0x84>
    e02e:	490d      	ldr	r1, [pc, #52]	; (e064 <rtc_cb+0xa8>)
    e030:	4805      	ldr	r0, [pc, #20]	; (e048 <rtc_cb+0x8c>)
    e032:	2374      	movs	r3, #116	; 0x74
    e034:	4a0c      	ldr	r2, [pc, #48]	; (e068 <rtc_cb+0xac>)
    e036:	f01c fb2c 	bl	2a692 <assert_print>
    e03a:	2174      	movs	r1, #116	; 0x74
    e03c:	480a      	ldr	r0, [pc, #40]	; (e068 <rtc_cb+0xac>)
    e03e:	e7d3      	b.n	dfe8 <rtc_cb+0x2c>
}
    e040:	bd70      	pop	{r4, r5, r6, pc}
    e042:	bf00      	nop
    e044:	000334b1 	.word	0x000334b1
    e048:	00032629 	.word	0x00032629
    e04c:	0003347f 	.word	0x0003347f
    e050:	00033520 	.word	0x00033520
    e054:	000334bc 	.word	0x000334bc
    e058:	4002a080 	.word	0x4002a080
    e05c:	40017000 	.word	0x40017000
    e060:	0bad0000 	.word	0x0bad0000
    e064:	0003355b 	.word	0x0003355b
    e068:	00033524 	.word	0x00033524

0000e06c <mbox_callback>:
{
    e06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e070:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    e072:	6883      	ldr	r3, [r0, #8]
    e074:	691b      	ldr	r3, [r3, #16]
    e076:	b94b      	cbnz	r3, e08c <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    e078:	4927      	ldr	r1, [pc, #156]	; (e118 <mbox_callback+0xac>)
    e07a:	4828      	ldr	r0, [pc, #160]	; (e11c <mbox_callback+0xb0>)
    e07c:	23ca      	movs	r3, #202	; 0xca
    e07e:	4a28      	ldr	r2, [pc, #160]	; (e120 <mbox_callback+0xb4>)
    e080:	f01c fb07 	bl	2a692 <assert_print>
    e084:	21ca      	movs	r1, #202	; 0xca
    e086:	4826      	ldr	r0, [pc, #152]	; (e120 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    e088:	f01c fafc 	bl	2a684 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    e08c:	2200      	movs	r2, #0
    e08e:	4798      	blx	r3
    e090:	4606      	mov	r6, r0
    e092:	2800      	cmp	r0, #0
    e094:	d1f0      	bne.n	e078 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e096:	f3c4 2907 	ubfx	r9, r4, #8, #8
    e09a:	4648      	mov	r0, r9
    e09c:	f010 f94e 	bl	1e33c <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    e0a0:	fa5f f884 	uxtb.w	r8, r4
    e0a4:	4633      	mov	r3, r6
    e0a6:	4649      	mov	r1, r9
    e0a8:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e0aa:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    e0ac:	4640      	mov	r0, r8
    e0ae:	f7ff fedd 	bl	de6c <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    e0b2:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    e0b6:	4648      	mov	r0, r9
    e0b8:	f010 f90c 	bl	1e2d4 <z_nrf_rtc_timer_compare_evt_address_get>
    e0bc:	2d0f      	cmp	r5, #15
    e0be:	d90a      	bls.n	e0d6 <mbox_callback+0x6a>
    e0c0:	4918      	ldr	r1, [pc, #96]	; (e124 <mbox_callback+0xb8>)
    e0c2:	4816      	ldr	r0, [pc, #88]	; (e11c <mbox_callback+0xb0>)
    e0c4:	f240 13e1 	movw	r3, #481	; 0x1e1
    e0c8:	4a17      	ldr	r2, [pc, #92]	; (e128 <mbox_callback+0xbc>)
    e0ca:	f01c fae2 	bl	2a692 <assert_print>
    e0ce:	f240 11e1 	movw	r1, #481	; 0x1e1
    e0d2:	4815      	ldr	r0, [pc, #84]	; (e128 <mbox_callback+0xbc>)
    e0d4:	e7d8      	b.n	e088 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e0d6:	4a15      	ldr	r2, [pc, #84]	; (e12c <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e0d8:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e0da:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    e0dc:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e0e0:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    e0e2:	b950      	cbnz	r0, e0fa <mbox_callback+0x8e>
    e0e4:	4912      	ldr	r1, [pc, #72]	; (e130 <mbox_callback+0xc4>)
    e0e6:	480d      	ldr	r0, [pc, #52]	; (e11c <mbox_callback+0xb0>)
    e0e8:	f44f 7312 	mov.w	r3, #584	; 0x248
    e0ec:	4a11      	ldr	r2, [pc, #68]	; (e134 <mbox_callback+0xc8>)
    e0ee:	f01c fad0 	bl	2a692 <assert_print>
    e0f2:	f44f 7112 	mov.w	r1, #584	; 0x248
    e0f6:	480f      	ldr	r0, [pc, #60]	; (e134 <mbox_callback+0xc8>)
    e0f8:	e7c6      	b.n	e088 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    e0fa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    e0fe:	4b0e      	ldr	r3, [pc, #56]	; (e138 <mbox_callback+0xcc>)
    e100:	f107 0232 	add.w	r2, r7, #50	; 0x32
    e104:	9300      	str	r3, [sp, #0]
    e106:	4648      	mov	r0, r9
    e108:	4633      	mov	r3, r6
    e10a:	9401      	str	r4, [sp, #4]
    e10c:	0052      	lsls	r2, r2, #1
    e10e:	f010 f9ff 	bl	1e510 <z_nrf_rtc_timer_set>
}
    e112:	b003      	add	sp, #12
    e114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e118:	00033472 	.word	0x00033472
    e11c:	00032629 	.word	0x00032629
    e120:	00033524 	.word	0x00033524
    e124:	000334b1 	.word	0x000334b1
    e128:	0003347f 	.word	0x0003347f
    e12c:	4002a080 	.word	0x4002a080
    e130:	00033520 	.word	0x00033520
    e134:	000334bc 	.word	0x000334bc
    e138:	0000dfbd 	.word	0x0000dfbd

0000e13c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e13c:	f020 bc9f 	b.w	2ea7e <SystemInit>

0000e140 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    e140:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    e142:	aa01      	add	r2, sp, #4
    e144:	f020 fc82 	bl	2ea4c <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    e148:	4604      	mov	r4, r0
    e14a:	b168      	cbz	r0, e168 <soc_secure_gpio_pin_mcu_select+0x28>
    e14c:	2316      	movs	r3, #22
    e14e:	4a0e      	ldr	r2, [pc, #56]	; (e188 <soc_secure_gpio_pin_mcu_select+0x48>)
    e150:	490e      	ldr	r1, [pc, #56]	; (e18c <soc_secure_gpio_pin_mcu_select+0x4c>)
    e152:	480f      	ldr	r0, [pc, #60]	; (e190 <soc_secure_gpio_pin_mcu_select+0x50>)
    e154:	f01c fa9d 	bl	2a692 <assert_print>
    e158:	4621      	mov	r1, r4
    e15a:	480e      	ldr	r0, [pc, #56]	; (e194 <soc_secure_gpio_pin_mcu_select+0x54>)
    e15c:	f01c fa99 	bl	2a692 <assert_print>
    e160:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    e162:	4809      	ldr	r0, [pc, #36]	; (e188 <soc_secure_gpio_pin_mcu_select+0x48>)
    e164:	f01c fa8e 	bl	2a684 <assert_post_action>
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	b15b      	cbz	r3, e184 <soc_secure_gpio_pin_mcu_select+0x44>
    e16c:	2317      	movs	r3, #23
    e16e:	4a06      	ldr	r2, [pc, #24]	; (e188 <soc_secure_gpio_pin_mcu_select+0x48>)
    e170:	4909      	ldr	r1, [pc, #36]	; (e198 <soc_secure_gpio_pin_mcu_select+0x58>)
    e172:	4807      	ldr	r0, [pc, #28]	; (e190 <soc_secure_gpio_pin_mcu_select+0x50>)
    e174:	f01c fa8d 	bl	2a692 <assert_print>
    e178:	9901      	ldr	r1, [sp, #4]
    e17a:	4808      	ldr	r0, [pc, #32]	; (e19c <soc_secure_gpio_pin_mcu_select+0x5c>)
    e17c:	f01c fa89 	bl	2a692 <assert_print>
    e180:	2117      	movs	r1, #23
    e182:	e7ee      	b.n	e162 <soc_secure_gpio_pin_mcu_select+0x22>
}
    e184:	b002      	add	sp, #8
    e186:	bd10      	pop	{r4, pc}
    e188:	00033578 	.word	0x00033578
    e18c:	000335b2 	.word	0x000335b2
    e190:	00032629 	.word	0x00032629
    e194:	000335d2 	.word	0x000335d2
    e198:	000335ec 	.word	0x000335ec
    e19c:	000335f8 	.word	0x000335f8

0000e1a0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    e1a0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e1a2:	2200      	movs	r2, #0
{
    e1a4:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    e1a6:	490f      	ldr	r1, [pc, #60]	; (e1e4 <enable_logger+0x44>)
    e1a8:	480f      	ldr	r0, [pc, #60]	; (e1e8 <enable_logger+0x48>)
    e1aa:	f022 f8db 	bl	30364 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e1ae:	2200      	movs	r2, #0
    e1b0:	2300      	movs	r3, #0
    e1b2:	2400      	movs	r4, #0
    e1b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e1b8:	230e      	movs	r3, #14
    e1ba:	4d0c      	ldr	r5, [pc, #48]	; (e1ec <enable_logger+0x4c>)
    e1bc:	e9cd 3403 	strd	r3, r4, [sp, #12]
    e1c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e1c4:	4628      	mov	r0, r5
    e1c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e1ca:	4b09      	ldr	r3, [pc, #36]	; (e1f0 <enable_logger+0x50>)
    e1cc:	4909      	ldr	r1, [pc, #36]	; (e1f4 <enable_logger+0x54>)
    e1ce:	9400      	str	r4, [sp, #0]
    e1d0:	f016 fe64 	bl	24e9c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e1d4:	4908      	ldr	r1, [pc, #32]	; (e1f8 <enable_logger+0x58>)
    e1d6:	4628      	mov	r0, r5
    e1d8:	f021 ffa8 	bl	3012c <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    e1dc:	4620      	mov	r0, r4
    e1de:	b009      	add	sp, #36	; 0x24
    e1e0:	bd30      	pop	{r4, r5, pc}
    e1e2:	bf00      	nop
    e1e4:	0000e341 	.word	0x0000e341
    e1e8:	200096e8 	.word	0x200096e8
    e1ec:	20009258 	.word	0x20009258
    e1f0:	0000e611 	.word	0x0000e611
    e1f4:	20031688 	.word	0x20031688
    e1f8:	00033612 	.word	0x00033612

0000e1fc <activate_foreach_backend>:
{
    e1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e200:	4604      	mov	r4, r0
	while (mask_cpy) {
    e202:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    e204:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e208:	f8df 8050 	ldr.w	r8, [pc, #80]	; e25c <activate_foreach_backend+0x60>
	while (mask_cpy) {
    e20c:	b914      	cbnz	r4, e214 <activate_foreach_backend+0x18>
}
    e20e:	4638      	mov	r0, r7
    e210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    e214:	fa94 f5a4 	rbit	r5, r4
    e218:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    e21c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e220:	012e      	lsls	r6, r5, #4
    e222:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    e226:	ea6f 0a03 	mvn.w	sl, r3
    e22a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e22e:	7b2b      	ldrb	r3, [r5, #12]
    e230:	2b00      	cmp	r3, #0
    e232:	d0eb      	beq.n	e20c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    e234:	f858 3006 	ldr.w	r3, [r8, r6]
    e238:	691b      	ldr	r3, [r3, #16]
    e23a:	b94b      	cbnz	r3, e250 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    e23c:	4446      	add	r6, r8
			log_backend_enable(backend,
    e23e:	6873      	ldr	r3, [r6, #4]
    e240:	2204      	movs	r2, #4
    e242:	4628      	mov	r0, r5
    e244:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    e246:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    e24a:	f000 fae7 	bl	e81c <log_backend_enable>
    e24e:	e7dd      	b.n	e20c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    e250:	4628      	mov	r0, r5
    e252:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e254:	2800      	cmp	r0, #0
    e256:	d1d9      	bne.n	e20c <activate_foreach_backend+0x10>
    e258:	e7f0      	b.n	e23c <activate_foreach_backend+0x40>
    e25a:	bf00      	nop
    e25c:	000315c4 	.word	0x000315c4

0000e260 <z_log_init>:
{
    e260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e264:	f8df 90b8 	ldr.w	r9, [pc, #184]	; e320 <z_log_init+0xc0>
    e268:	4c2e      	ldr	r4, [pc, #184]	; (e324 <z_log_init+0xc4>)
    e26a:	4680      	mov	r8, r0
    e26c:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e270:	2b9f      	cmp	r3, #159	; 0x9f
{
    e272:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e274:	d90b      	bls.n	e28e <z_log_init+0x2e>
    e276:	492c      	ldr	r1, [pc, #176]	; (e328 <z_log_init+0xc8>)
    e278:	f240 1315 	movw	r3, #277	; 0x115
    e27c:	4a2b      	ldr	r2, [pc, #172]	; (e32c <z_log_init+0xcc>)
    e27e:	482c      	ldr	r0, [pc, #176]	; (e330 <z_log_init+0xd0>)
    e280:	f01c fa07 	bl	2a692 <assert_print>
    e284:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e288:	4828      	ldr	r0, [pc, #160]	; (e32c <z_log_init+0xcc>)
    e28a:	f01c f9fb 	bl	2a684 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    e28e:	4829      	ldr	r0, [pc, #164]	; (e334 <z_log_init+0xd4>)
    e290:	f01c fb30 	bl	2a8f4 <atomic_inc>
    e294:	4606      	mov	r6, r0
    e296:	b360      	cbz	r0, e2f2 <z_log_init+0x92>
	uint32_t mask = 0;
    e298:	2500      	movs	r5, #0
}
    e29a:	4628      	mov	r0, r5
    e29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    e2a0:	7b23      	ldrb	r3, [r4, #12]
    e2a2:	b173      	cbz	r3, e2c2 <z_log_init+0x62>
	if (backend->api->init) {
    e2a4:	6823      	ldr	r3, [r4, #0]
    e2a6:	68db      	ldr	r3, [r3, #12]
    e2a8:	b10b      	cbz	r3, e2ae <z_log_init+0x4e>
		backend->api->init(backend);
    e2aa:	4620      	mov	r0, r4
    e2ac:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    e2ae:	6823      	ldr	r3, [r4, #0]
    e2b0:	691b      	ldr	r3, [r3, #16]
    e2b2:	b9b3      	cbnz	r3, e2e2 <z_log_init+0x82>
				log_backend_enable(backend,
    e2b4:	6863      	ldr	r3, [r4, #4]
    e2b6:	2204      	movs	r2, #4
    e2b8:	4620      	mov	r0, r4
    e2ba:	6819      	ldr	r1, [r3, #0]
    e2bc:	f000 faae 	bl	e81c <log_backend_enable>
			i++;
    e2c0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2c2:	3410      	adds	r4, #16
    e2c4:	454c      	cmp	r4, r9
    e2c6:	d918      	bls.n	e2fa <z_log_init+0x9a>
    e2c8:	491b      	ldr	r1, [pc, #108]	; (e338 <z_log_init+0xd8>)
    e2ca:	f44f 7391 	mov.w	r3, #290	; 0x122
    e2ce:	4a17      	ldr	r2, [pc, #92]	; (e32c <z_log_init+0xcc>)
    e2d0:	4817      	ldr	r0, [pc, #92]	; (e330 <z_log_init+0xd0>)
    e2d2:	f01c f9de 	bl	2a692 <assert_print>
    e2d6:	4819      	ldr	r0, [pc, #100]	; (e33c <z_log_init+0xdc>)
    e2d8:	f01c f9db 	bl	2a692 <assert_print>
    e2dc:	f44f 7191 	mov.w	r1, #290	; 0x122
    e2e0:	e7d2      	b.n	e288 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    e2e2:	4620      	mov	r0, r4
    e2e4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    e2e6:	2800      	cmp	r0, #0
    e2e8:	d0e4      	beq.n	e2b4 <z_log_init+0x54>
				mask |= BIT(i);
    e2ea:	fa0a f306 	lsl.w	r3, sl, r6
    e2ee:	431d      	orrs	r5, r3
    e2f0:	e7e6      	b.n	e2c0 <z_log_init+0x60>
	uint32_t mask = 0;
    e2f2:	4605      	mov	r5, r0
				mask |= BIT(i);
    e2f4:	f04f 0a01 	mov.w	sl, #1
    e2f8:	e7e4      	b.n	e2c4 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2fa:	d3d1      	bcc.n	e2a0 <z_log_init+0x40>
	if (blocking) {
    e2fc:	f1b8 0f00 	cmp.w	r8, #0
    e300:	d0cb      	beq.n	e29a <z_log_init+0x3a>
		while (mask) {
    e302:	2d00      	cmp	r5, #0
    e304:	d0c8      	beq.n	e298 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    e306:	4628      	mov	r0, r5
    e308:	f7ff ff78 	bl	e1fc <activate_foreach_backend>
    e30c:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    e30e:	2f00      	cmp	r7, #0
    e310:	d0f7      	beq.n	e302 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    e312:	2100      	movs	r1, #0
    e314:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e318:	f019 f836 	bl	27388 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    e31c:	e7f1      	b.n	e302 <z_log_init+0xa2>
    e31e:	bf00      	nop
    e320:	000315d4 	.word	0x000315d4
    e324:	000315c4 	.word	0x000315c4
    e328:	00033647 	.word	0x00033647
    e32c:	0003361a 	.word	0x0003361a
    e330:	00032629 	.word	0x00032629
    e334:	20021484 	.word	0x20021484
    e338:	0003366b 	.word	0x0003366b
    e33c:	0003368c 	.word	0x0003368c

0000e340 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    e340:	4801      	ldr	r0, [pc, #4]	; (e348 <log_process_thread_timer_expiry_fn+0x8>)
    e342:	f017 b92d 	b.w	255a0 <z_impl_k_sem_give>
    e346:	bf00      	nop
    e348:	20008c04 	.word	0x20008c04

0000e34c <log_format_func_t_get>:
}
    e34c:	4b01      	ldr	r3, [pc, #4]	; (e354 <log_format_func_t_get+0x8>)
    e34e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e352:	4770      	bx	lr
    e354:	00031b18 	.word	0x00031b18

0000e358 <log_set_timestamp_func>:
{
    e358:	b508      	push	{r3, lr}
    e35a:	4603      	mov	r3, r0
    e35c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    e35e:	b12b      	cbz	r3, e36c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    e360:	4a04      	ldr	r2, [pc, #16]	; (e374 <log_set_timestamp_func+0x1c>)
    e362:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    e364:	f000 fcfc 	bl	ed60 <log_output_timestamp_freq_set>
	return 0;
    e368:	2000      	movs	r0, #0
}
    e36a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e36c:	f06f 0015 	mvn.w	r0, #21
    e370:	e7fb      	b.n	e36a <log_set_timestamp_func+0x12>
    e372:	bf00      	nop
    e374:	200083fc 	.word	0x200083fc

0000e378 <z_log_notify_backend_enabled>:
{
    e378:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    e37a:	4c04      	ldr	r4, [pc, #16]	; (e38c <z_log_notify_backend_enabled+0x14>)
    e37c:	7823      	ldrb	r3, [r4, #0]
    e37e:	b913      	cbnz	r3, e386 <z_log_notify_backend_enabled+0xe>
    e380:	4803      	ldr	r0, [pc, #12]	; (e390 <z_log_notify_backend_enabled+0x18>)
    e382:	f017 f90d 	bl	255a0 <z_impl_k_sem_give>
	backend_attached = true;
    e386:	2301      	movs	r3, #1
    e388:	7023      	strb	r3, [r4, #0]
}
    e38a:	bd10      	pop	{r4, pc}
    e38c:	20022302 	.word	0x20022302
    e390:	20008c04 	.word	0x20008c04

0000e394 <z_log_dropped>:
{
    e394:	b510      	push	{r4, lr}
    e396:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    e398:	4806      	ldr	r0, [pc, #24]	; (e3b4 <z_log_dropped+0x20>)
    e39a:	f01c faab 	bl	2a8f4 <atomic_inc>
	if (buffered) {
    e39e:	b13c      	cbz	r4, e3b0 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e3a0:	4b05      	ldr	r3, [pc, #20]	; (e3b8 <z_log_dropped+0x24>)
    e3a2:	e8d3 1fef 	ldaex	r1, [r3]
    e3a6:	3901      	subs	r1, #1
    e3a8:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e3ac:	2a00      	cmp	r2, #0
    e3ae:	d1f8      	bne.n	e3a2 <z_log_dropped+0xe>
}
    e3b0:	bd10      	pop	{r4, pc}
    e3b2:	bf00      	nop
    e3b4:	2002147c 	.word	0x2002147c
    e3b8:	20021480 	.word	0x20021480

0000e3bc <z_log_dropped_read_and_clear>:
}
    e3bc:	2000      	movs	r0, #0
    e3be:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e3c0:	4b03      	ldr	r3, [pc, #12]	; (e3d0 <z_log_dropped_read_and_clear+0x14>)
    e3c2:	e8d3 0fef 	ldaex	r0, [r3]
    e3c6:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e3ca:	2a00      	cmp	r2, #0
    e3cc:	d1f9      	bne.n	e3c2 <z_log_dropped_read_and_clear+0x6>
    e3ce:	4770      	bx	lr
    e3d0:	2002147c 	.word	0x2002147c

0000e3d4 <dropped_notify>:
{
    e3d4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    e3d6:	f7ff fff1 	bl	e3bc <z_log_dropped_read_and_clear>
    e3da:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e3dc:	4c0f      	ldr	r4, [pc, #60]	; (e41c <dropped_notify+0x48>)
    e3de:	4e10      	ldr	r6, [pc, #64]	; (e420 <dropped_notify+0x4c>)
    e3e0:	42b4      	cmp	r4, r6
    e3e2:	d919      	bls.n	e418 <dropped_notify+0x44>
    e3e4:	490f      	ldr	r1, [pc, #60]	; (e424 <dropped_notify+0x50>)
    e3e6:	f240 13cd 	movw	r3, #461	; 0x1cd
    e3ea:	4a0f      	ldr	r2, [pc, #60]	; (e428 <dropped_notify+0x54>)
    e3ec:	480f      	ldr	r0, [pc, #60]	; (e42c <dropped_notify+0x58>)
    e3ee:	f01c f950 	bl	2a692 <assert_print>
    e3f2:	480f      	ldr	r0, [pc, #60]	; (e430 <dropped_notify+0x5c>)
    e3f4:	f01c f94d 	bl	2a692 <assert_print>
    e3f8:	f240 11cd 	movw	r1, #461	; 0x1cd
    e3fc:	480a      	ldr	r0, [pc, #40]	; (e428 <dropped_notify+0x54>)
    e3fe:	f01c f941 	bl	2a684 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e402:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e404:	795b      	ldrb	r3, [r3, #5]
    e406:	b12b      	cbz	r3, e414 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    e408:	6823      	ldr	r3, [r4, #0]
    e40a:	685b      	ldr	r3, [r3, #4]
    e40c:	b113      	cbz	r3, e414 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    e40e:	4629      	mov	r1, r5
    e410:	4620      	mov	r0, r4
    e412:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e414:	3410      	adds	r4, #16
    e416:	e7e3      	b.n	e3e0 <dropped_notify+0xc>
    e418:	d3f3      	bcc.n	e402 <dropped_notify+0x2e>
}
    e41a:	bd70      	pop	{r4, r5, r6, pc}
    e41c:	000315c4 	.word	0x000315c4
    e420:	000315d4 	.word	0x000315d4
    e424:	0003366b 	.word	0x0003366b
    e428:	0003361a 	.word	0x0003361a
    e42c:	00032629 	.word	0x00032629
    e430:	0003368c 	.word	0x0003368c

0000e434 <z_log_msg_init>:
{
    e434:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    e436:	4c04      	ldr	r4, [pc, #16]	; (e448 <z_log_msg_init+0x14>)
    e438:	4904      	ldr	r1, [pc, #16]	; (e44c <z_log_msg_init+0x18>)
    e43a:	4620      	mov	r0, r4
    e43c:	f7ff face 	bl	d9dc <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    e440:	4b03      	ldr	r3, [pc, #12]	; (e450 <z_log_msg_init+0x1c>)
    e442:	601c      	str	r4, [r3, #0]
}
    e444:	bd10      	pop	{r4, pc}
    e446:	bf00      	nop
    e448:	20008a14 	.word	0x20008a14
    e44c:	00031b04 	.word	0x00031b04
    e450:	20021474 	.word	0x20021474

0000e454 <log_core_init>:
{
    e454:	b508      	push	{r3, lr}
	panic_mode = false;
    e456:	2300      	movs	r3, #0
    e458:	4a06      	ldr	r2, [pc, #24]	; (e474 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    e45a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    e45e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    e460:	4a05      	ldr	r2, [pc, #20]	; (e478 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    e462:	4806      	ldr	r0, [pc, #24]	; (e47c <log_core_init+0x28>)
	dropped_cnt = 0;
    e464:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    e466:	f7ff ff77 	bl	e358 <log_set_timestamp_func>
}
    e46a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    e46e:	f7ff bfe1 	b.w	e434 <z_log_msg_init>
    e472:	bf00      	nop
    e474:	20022303 	.word	0x20022303
    e478:	2002147c 	.word	0x2002147c
    e47c:	0002a8f1 	.word	0x0002a8f1

0000e480 <z_log_msg_alloc>:
{
    e480:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    e482:	2200      	movs	r2, #0
    e484:	2300      	movs	r3, #0
    e486:	4801      	ldr	r0, [pc, #4]	; (e48c <z_log_msg_alloc+0xc>)
    e488:	f7ff bada 	b.w	da40 <mpsc_pbuf_alloc>
    e48c:	20008a14 	.word	0x20008a14

0000e490 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    e490:	4801      	ldr	r0, [pc, #4]	; (e498 <z_log_msg_local_claim+0x8>)
    e492:	f7ff bbe9 	b.w	dc68 <mpsc_pbuf_claim>
    e496:	bf00      	nop
    e498:	20008a14 	.word	0x20008a14

0000e49c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    e49c:	4b02      	ldr	r3, [pc, #8]	; (e4a8 <z_log_msg_free+0xc>)
{
    e49e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    e4a0:	6818      	ldr	r0, [r3, #0]
    e4a2:	f7ff bc67 	b.w	dd74 <mpsc_pbuf_free>
    e4a6:	bf00      	nop
    e4a8:	20021474 	.word	0x20021474

0000e4ac <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    e4ac:	4801      	ldr	r0, [pc, #4]	; (e4b4 <z_log_msg_pending+0x8>)
    e4ae:	f01c b9aa 	b.w	2a806 <mpsc_pbuf_is_pending>
    e4b2:	bf00      	nop
    e4b4:	20008a14 	.word	0x20008a14

0000e4b8 <z_impl_log_process>:
{
    e4b8:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    e4ba:	4b2e      	ldr	r3, [pc, #184]	; (e574 <z_impl_log_process+0xbc>)
    e4bc:	7818      	ldrb	r0, [r3, #0]
    e4be:	2800      	cmp	r0, #0
    e4c0:	d057      	beq.n	e572 <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    e4c2:	f7ff ffe5 	bl	e490 <z_log_msg_local_claim>
	if (msg) {
    e4c6:	4605      	mov	r5, r0
    e4c8:	b340      	cbz	r0, e51c <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e4ca:	4b2b      	ldr	r3, [pc, #172]	; (e578 <z_impl_log_process+0xc0>)
    e4cc:	e8d3 1fef 	ldaex	r1, [r3]
    e4d0:	3901      	subs	r1, #1
    e4d2:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e4d6:	2a00      	cmp	r2, #0
    e4d8:	d1f8      	bne.n	e4cc <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e4da:	4c28      	ldr	r4, [pc, #160]	; (e57c <z_impl_log_process+0xc4>)
    e4dc:	4e28      	ldr	r6, [pc, #160]	; (e580 <z_impl_log_process+0xc8>)
    e4de:	42b4      	cmp	r4, r6
    e4e0:	d918      	bls.n	e514 <z_impl_log_process+0x5c>
    e4e2:	4928      	ldr	r1, [pc, #160]	; (e584 <z_impl_log_process+0xcc>)
    e4e4:	f240 13c1 	movw	r3, #449	; 0x1c1
    e4e8:	4a27      	ldr	r2, [pc, #156]	; (e588 <z_impl_log_process+0xd0>)
    e4ea:	4828      	ldr	r0, [pc, #160]	; (e58c <z_impl_log_process+0xd4>)
    e4ec:	f01c f8d1 	bl	2a692 <assert_print>
    e4f0:	4827      	ldr	r0, [pc, #156]	; (e590 <z_impl_log_process+0xd8>)
    e4f2:	f01c f8ce 	bl	2a692 <assert_print>
    e4f6:	f240 11c1 	movw	r1, #449	; 0x1c1
    e4fa:	4823      	ldr	r0, [pc, #140]	; (e588 <z_impl_log_process+0xd0>)
    e4fc:	f01c f8c2 	bl	2a684 <assert_post_action>
	return backend->cb->active;
    e500:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    e502:	795b      	ldrb	r3, [r3, #5]
    e504:	b123      	cbz	r3, e510 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    e506:	6823      	ldr	r3, [r4, #0]
    e508:	4629      	mov	r1, r5
    e50a:	4620      	mov	r0, r4
    e50c:	681b      	ldr	r3, [r3, #0]
    e50e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e510:	3410      	adds	r4, #16
    e512:	e7e4      	b.n	e4de <z_impl_log_process+0x26>
    e514:	d3f4      	bcc.n	e500 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    e516:	4628      	mov	r0, r5
    e518:	f7ff ffc0 	bl	e49c <z_log_msg_free>
	return dropped_cnt > 0;
    e51c:	4b1d      	ldr	r3, [pc, #116]	; (e594 <z_impl_log_process+0xdc>)
    e51e:	4c1e      	ldr	r4, [pc, #120]	; (e598 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    e520:	681b      	ldr	r3, [r3, #0]
    e522:	2b00      	cmp	r3, #0
    e524:	dd19      	ble.n	e55a <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    e526:	f021 fef5 	bl	30314 <z_impl_k_uptime_ticks>
    e52a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e52e:	fba0 0302 	umull	r0, r3, r0, r2
    e532:	fb02 3101 	mla	r1, r2, r1, r3
    e536:	0bc3      	lsrs	r3, r0, #15
    e538:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e53c:	e9d4 2000 	ldrd	r2, r0, [r4]
    e540:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    e542:	f240 32e9 	movw	r2, #1001	; 0x3e9
    e546:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e54a:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    e54e:	4293      	cmp	r3, r2
    e550:	f171 0100 	sbcs.w	r1, r1, #0
    e554:	d301      	bcc.n	e55a <z_impl_log_process+0xa2>
				dropped_notify();
    e556:	f7ff ff3d 	bl	e3d4 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    e55a:	e9d4 3200 	ldrd	r3, r2, [r4]
    e55e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    e562:	f142 0200 	adc.w	r2, r2, #0
    e566:	e9c4 3200 	strd	r3, r2, [r4]
}
    e56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    e56e:	f7ff bf9d 	b.w	e4ac <z_log_msg_pending>
}
    e572:	bd70      	pop	{r4, r5, r6, pc}
    e574:	20022302 	.word	0x20022302
    e578:	20021480 	.word	0x20021480
    e57c:	000315c4 	.word	0x000315c4
    e580:	000315d4 	.word	0x000315d4
    e584:	0003366b 	.word	0x0003366b
    e588:	0003361a 	.word	0x0003361a
    e58c:	00032629 	.word	0x00032629
    e590:	0003368c 	.word	0x0003368c
    e594:	2002147c 	.word	0x2002147c
    e598:	200096e0 	.word	0x200096e0

0000e59c <z_impl_log_panic>:
{
    e59c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    e59e:	4d15      	ldr	r5, [pc, #84]	; (e5f4 <z_impl_log_panic+0x58>)
    e5a0:	7829      	ldrb	r1, [r5, #0]
    e5a2:	bb29      	cbnz	r1, e5f0 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    e5a4:	2001      	movs	r0, #1
    e5a6:	f7ff fe5b 	bl	e260 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e5aa:	4c13      	ldr	r4, [pc, #76]	; (e5f8 <z_impl_log_panic+0x5c>)
    e5ac:	4e13      	ldr	r6, [pc, #76]	; (e5fc <z_impl_log_panic+0x60>)
    e5ae:	42b4      	cmp	r4, r6
    e5b0:	d917      	bls.n	e5e2 <z_impl_log_panic+0x46>
    e5b2:	4913      	ldr	r1, [pc, #76]	; (e600 <z_impl_log_panic+0x64>)
    e5b4:	f44f 73c2 	mov.w	r3, #388	; 0x184
    e5b8:	4a12      	ldr	r2, [pc, #72]	; (e604 <z_impl_log_panic+0x68>)
    e5ba:	4813      	ldr	r0, [pc, #76]	; (e608 <z_impl_log_panic+0x6c>)
    e5bc:	f01c f869 	bl	2a692 <assert_print>
    e5c0:	4812      	ldr	r0, [pc, #72]	; (e60c <z_impl_log_panic+0x70>)
    e5c2:	f01c f866 	bl	2a692 <assert_print>
    e5c6:	f44f 71c2 	mov.w	r1, #388	; 0x184
    e5ca:	480e      	ldr	r0, [pc, #56]	; (e604 <z_impl_log_panic+0x68>)
    e5cc:	f01c f85a 	bl	2a684 <assert_post_action>
	return backend->cb->active;
    e5d0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e5d2:	795b      	ldrb	r3, [r3, #5]
    e5d4:	b11b      	cbz	r3, e5de <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    e5d6:	6823      	ldr	r3, [r4, #0]
    e5d8:	4620      	mov	r0, r4
    e5da:	689b      	ldr	r3, [r3, #8]
    e5dc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e5de:	3410      	adds	r4, #16
    e5e0:	e7e5      	b.n	e5ae <z_impl_log_panic+0x12>
    e5e2:	d3f5      	bcc.n	e5d0 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    e5e4:	f7ff ff68 	bl	e4b8 <z_impl_log_process>
		while (log_process() == true) {
    e5e8:	2800      	cmp	r0, #0
    e5ea:	d1fb      	bne.n	e5e4 <z_impl_log_panic+0x48>
	panic_mode = true;
    e5ec:	2301      	movs	r3, #1
    e5ee:	702b      	strb	r3, [r5, #0]
}
    e5f0:	bd70      	pop	{r4, r5, r6, pc}
    e5f2:	bf00      	nop
    e5f4:	20022303 	.word	0x20022303
    e5f8:	000315c4 	.word	0x000315c4
    e5fc:	000315d4 	.word	0x000315d4
    e600:	0003366b 	.word	0x0003366b
    e604:	0003361a 	.word	0x0003361a
    e608:	00032629 	.word	0x00032629
    e60c:	0003368c 	.word	0x0003368c

0000e610 <log_process_thread_func>:
{
    e610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e614:	4b2f      	ldr	r3, [pc, #188]	; (e6d4 <log_process_thread_func+0xc4>)
    e616:	4f30      	ldr	r7, [pc, #192]	; (e6d8 <log_process_thread_func+0xc8>)
    e618:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    e61a:	091b      	lsrs	r3, r3, #4
    e61c:	d10b      	bne.n	e636 <log_process_thread_func+0x26>
    e61e:	492f      	ldr	r1, [pc, #188]	; (e6dc <log_process_thread_func+0xcc>)
    e620:	f240 3347 	movw	r3, #839	; 0x347
    e624:	4a2e      	ldr	r2, [pc, #184]	; (e6e0 <log_process_thread_func+0xd0>)
    e626:	482f      	ldr	r0, [pc, #188]	; (e6e4 <log_process_thread_func+0xd4>)
    e628:	f01c f833 	bl	2a692 <assert_print>
    e62c:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e630:	482b      	ldr	r0, [pc, #172]	; (e6e0 <log_process_thread_func+0xd0>)
    e632:	f01c f827 	bl	2a684 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    e636:	2100      	movs	r1, #0
    e638:	4608      	mov	r0, r1
    e63a:	f7ff fe11 	bl	e260 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e63e:	4604      	mov	r4, r0
    e640:	b340      	cbz	r0, e694 <log_process_thread_func+0x84>
    e642:	f240 6867 	movw	r8, #1639	; 0x667
    e646:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    e64a:	f018 fed1 	bl	273f0 <z_impl_z_current_get>
	proc_tid = process_tid;
    e64e:	4b26      	ldr	r3, [pc, #152]	; (e6e8 <log_process_thread_func+0xd8>)
    e650:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e652:	b130      	cbz	r0, e662 <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    e654:	4b25      	ldr	r3, [pc, #148]	; (e6ec <log_process_thread_func+0xdc>)
	    process_tid &&
    e656:	681b      	ldr	r3, [r3, #0]
    e658:	2b09      	cmp	r3, #9
    e65a:	dd02      	ble.n	e662 <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    e65c:	4824      	ldr	r0, [pc, #144]	; (e6f0 <log_process_thread_func+0xe0>)
    e65e:	f016 ff9f 	bl	255a0 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e662:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    e664:	f8df a088 	ldr.w	sl, [pc, #136]	; e6f0 <log_process_thread_func+0xe0>
		if (activate_mask) {
    e668:	b144      	cbz	r4, e67c <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    e66a:	4620      	mov	r0, r4
    e66c:	f7ff fdc6 	bl	e1fc <activate_foreach_backend>
			if (!activate_mask) {
    e670:	4604      	mov	r4, r0
    e672:	b918      	cbnz	r0, e67c <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    e674:	f04f 38ff 	mov.w	r8, #4294967295
    e678:	f04f 39ff 	mov.w	r9, #4294967295
    e67c:	f7ff ff1c 	bl	e4b8 <z_impl_log_process>
		if (log_process() == false) {
    e680:	4606      	mov	r6, r0
    e682:	b928      	cbnz	r0, e690 <log_process_thread_func+0x80>
			if (processed_any) {
    e684:	b95d      	cbnz	r5, e69e <log_process_thread_func+0x8e>
    e686:	4642      	mov	r2, r8
    e688:	464b      	mov	r3, r9
    e68a:	4650      	mov	r0, sl
    e68c:	f016 ffcc 	bl	25628 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e690:	4635      	mov	r5, r6
    e692:	e7e9      	b.n	e668 <log_process_thread_func+0x58>
    e694:	f04f 38ff 	mov.w	r8, #4294967295
    e698:	f04f 39ff 	mov.w	r9, #4294967295
    e69c:	e7d5      	b.n	e64a <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e69e:	4d0d      	ldr	r5, [pc, #52]	; (e6d4 <log_process_thread_func+0xc4>)
    e6a0:	e008      	b.n	e6b4 <log_process_thread_func+0xa4>
    e6a2:	d2f0      	bcs.n	e686 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    e6a4:	682b      	ldr	r3, [r5, #0]
    e6a6:	699b      	ldr	r3, [r3, #24]
    e6a8:	b11b      	cbz	r3, e6b2 <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    e6aa:	2200      	movs	r2, #0
    e6ac:	4628      	mov	r0, r5
    e6ae:	4611      	mov	r1, r2
    e6b0:	4798      	blx	r3
    e6b2:	3510      	adds	r5, #16
    e6b4:	42bd      	cmp	r5, r7
    e6b6:	d9f4      	bls.n	e6a2 <log_process_thread_func+0x92>
    e6b8:	490e      	ldr	r1, [pc, #56]	; (e6f4 <log_process_thread_func+0xe4>)
    e6ba:	f240 333b 	movw	r3, #827	; 0x33b
    e6be:	4a08      	ldr	r2, [pc, #32]	; (e6e0 <log_process_thread_func+0xd0>)
    e6c0:	4808      	ldr	r0, [pc, #32]	; (e6e4 <log_process_thread_func+0xd4>)
    e6c2:	f01b ffe6 	bl	2a692 <assert_print>
    e6c6:	480c      	ldr	r0, [pc, #48]	; (e6f8 <log_process_thread_func+0xe8>)
    e6c8:	f01b ffe3 	bl	2a692 <assert_print>
    e6cc:	f240 313b 	movw	r1, #827	; 0x33b
    e6d0:	e7ae      	b.n	e630 <log_process_thread_func+0x20>
    e6d2:	bf00      	nop
    e6d4:	000315c4 	.word	0x000315c4
    e6d8:	000315d4 	.word	0x000315d4
    e6dc:	000336ab 	.word	0x000336ab
    e6e0:	0003361a 	.word	0x0003361a
    e6e4:	00032629 	.word	0x00032629
    e6e8:	20021478 	.word	0x20021478
    e6ec:	20021480 	.word	0x20021480
    e6f0:	20008c04 	.word	0x20008c04
    e6f4:	0003366b 	.word	0x0003366b
    e6f8:	0003368c 	.word	0x0003368c

0000e6fc <z_log_msg_post_finalize>:
{
    e6fc:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    e6fe:	482b      	ldr	r0, [pc, #172]	; (e7ac <z_log_msg_post_finalize+0xb0>)
    e700:	f01c f8f8 	bl	2a8f4 <atomic_inc>
	if (panic_mode) {
    e704:	4b2a      	ldr	r3, [pc, #168]	; (e7b0 <z_log_msg_post_finalize+0xb4>)
    e706:	781b      	ldrb	r3, [r3, #0]
    e708:	2b00      	cmp	r3, #0
    e70a:	d034      	beq.n	e776 <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    e70c:	f04f 0320 	mov.w	r3, #32
    e710:	f3ef 8411 	mrs	r4, BASEPRI
    e714:	f383 8812 	msr	BASEPRI_MAX, r3
    e718:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e71c:	4825      	ldr	r0, [pc, #148]	; (e7b4 <z_log_msg_post_finalize+0xb8>)
    e71e:	f016 fc87 	bl	25030 <z_spin_lock_valid>
    e722:	b968      	cbnz	r0, e740 <z_log_msg_post_finalize+0x44>
    e724:	2394      	movs	r3, #148	; 0x94
    e726:	4a24      	ldr	r2, [pc, #144]	; (e7b8 <z_log_msg_post_finalize+0xbc>)
    e728:	4924      	ldr	r1, [pc, #144]	; (e7bc <z_log_msg_post_finalize+0xc0>)
    e72a:	4825      	ldr	r0, [pc, #148]	; (e7c0 <z_log_msg_post_finalize+0xc4>)
    e72c:	f01b ffb1 	bl	2a692 <assert_print>
    e730:	4920      	ldr	r1, [pc, #128]	; (e7b4 <z_log_msg_post_finalize+0xb8>)
    e732:	4824      	ldr	r0, [pc, #144]	; (e7c4 <z_log_msg_post_finalize+0xc8>)
    e734:	f01b ffad 	bl	2a692 <assert_print>
    e738:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e73a:	481f      	ldr	r0, [pc, #124]	; (e7b8 <z_log_msg_post_finalize+0xbc>)
    e73c:	f01b ffa2 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
    e740:	481c      	ldr	r0, [pc, #112]	; (e7b4 <z_log_msg_post_finalize+0xb8>)
    e742:	f016 fc91 	bl	25068 <z_spin_lock_set_owner>
    e746:	f7ff feb7 	bl	e4b8 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e74a:	481a      	ldr	r0, [pc, #104]	; (e7b4 <z_log_msg_post_finalize+0xb8>)
    e74c:	f016 fc7e 	bl	2504c <z_spin_unlock_valid>
    e750:	b958      	cbnz	r0, e76a <z_log_msg_post_finalize+0x6e>
    e752:	23c2      	movs	r3, #194	; 0xc2
    e754:	4a18      	ldr	r2, [pc, #96]	; (e7b8 <z_log_msg_post_finalize+0xbc>)
    e756:	491c      	ldr	r1, [pc, #112]	; (e7c8 <z_log_msg_post_finalize+0xcc>)
    e758:	4819      	ldr	r0, [pc, #100]	; (e7c0 <z_log_msg_post_finalize+0xc4>)
    e75a:	f01b ff9a 	bl	2a692 <assert_print>
    e75e:	4915      	ldr	r1, [pc, #84]	; (e7b4 <z_log_msg_post_finalize+0xb8>)
    e760:	481a      	ldr	r0, [pc, #104]	; (e7cc <z_log_msg_post_finalize+0xd0>)
    e762:	f01b ff96 	bl	2a692 <assert_print>
    e766:	21c2      	movs	r1, #194	; 0xc2
    e768:	e7e7      	b.n	e73a <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    e76a:	f384 8811 	msr	BASEPRI, r4
    e76e:	f3bf 8f6f 	isb	sy
}
    e772:	b002      	add	sp, #8
    e774:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    e776:	4b16      	ldr	r3, [pc, #88]	; (e7d0 <z_log_msg_post_finalize+0xd4>)
    e778:	681b      	ldr	r3, [r3, #0]
    e77a:	2b00      	cmp	r3, #0
    e77c:	d0f9      	beq.n	e772 <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    e77e:	b950      	cbnz	r0, e796 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    e780:	2200      	movs	r2, #0
    e782:	2300      	movs	r3, #0
    e784:	4813      	ldr	r0, [pc, #76]	; (e7d4 <z_log_msg_post_finalize+0xd8>)
    e786:	e9cd 2300 	strd	r2, r3, [sp]
    e78a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e78e:	2300      	movs	r3, #0
    e790:	f019 fb18 	bl	27dc4 <z_impl_k_timer_start>
    e794:	e7ed      	b.n	e772 <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e796:	280a      	cmp	r0, #10
    e798:	d1eb      	bne.n	e772 <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    e79a:	480e      	ldr	r0, [pc, #56]	; (e7d4 <z_log_msg_post_finalize+0xd8>)
    e79c:	f021 fdee 	bl	3037c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    e7a0:	480d      	ldr	r0, [pc, #52]	; (e7d8 <z_log_msg_post_finalize+0xdc>)
}
    e7a2:	b002      	add	sp, #8
    e7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7a8:	f016 befa 	b.w	255a0 <z_impl_k_sem_give>
    e7ac:	20021480 	.word	0x20021480
    e7b0:	20022303 	.word	0x20022303
    e7b4:	20021470 	.word	0x20021470
    e7b8:	0003338d 	.word	0x0003338d
    e7bc:	000333e6 	.word	0x000333e6
    e7c0:	00032629 	.word	0x00032629
    e7c4:	000333fb 	.word	0x000333fb
    e7c8:	000333ba 	.word	0x000333ba
    e7cc:	000333d1 	.word	0x000333d1
    e7d0:	20021478 	.word	0x20021478
    e7d4:	200096e8 	.word	0x200096e8
    e7d8:	20008c04 	.word	0x20008c04

0000e7dc <z_log_msg_commit>:
{
    e7dc:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    e7de:	4b06      	ldr	r3, [pc, #24]	; (e7f8 <z_log_msg_commit+0x1c>)
{
    e7e0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    e7e2:	681b      	ldr	r3, [r3, #0]
    e7e4:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    e7e6:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    e7e8:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    e7ea:	4804      	ldr	r0, [pc, #16]	; (e7fc <z_log_msg_commit+0x20>)
    e7ec:	f7ff f9e6 	bl	dbbc <mpsc_pbuf_commit>
}
    e7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    e7f4:	f7ff bf82 	b.w	e6fc <z_log_msg_post_finalize>
    e7f8:	200083fc 	.word	0x200083fc
    e7fc:	20008a14 	.word	0x20008a14

0000e800 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    e800:	4a04      	ldr	r2, [pc, #16]	; (e814 <log_source_name_get+0x14>)
    e802:	4b05      	ldr	r3, [pc, #20]	; (e818 <log_source_name_get+0x18>)
    e804:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    e806:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    e80a:	bf34      	ite	cc
    e80c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    e810:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    e812:	4770      	bx	lr
    e814:	00031454 	.word	0x00031454
    e818:	000315c4 	.word	0x000315c4

0000e81c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e81c:	4b0e      	ldr	r3, [pc, #56]	; (e858 <log_backend_enable+0x3c>)
{
    e81e:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    e820:	1ac3      	subs	r3, r0, r3
    e822:	111b      	asrs	r3, r3, #4
    e824:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    e826:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    e828:	b948      	cbnz	r0, e83e <log_backend_enable+0x22>
    e82a:	490c      	ldr	r1, [pc, #48]	; (e85c <log_backend_enable+0x40>)
    e82c:	480c      	ldr	r0, [pc, #48]	; (e860 <log_backend_enable+0x44>)
    e82e:	23de      	movs	r3, #222	; 0xde
    e830:	4a0c      	ldr	r2, [pc, #48]	; (e864 <log_backend_enable+0x48>)
    e832:	f01b ff2e 	bl	2a692 <assert_print>
    e836:	21de      	movs	r1, #222	; 0xde
    e838:	480a      	ldr	r0, [pc, #40]	; (e864 <log_backend_enable+0x48>)
    e83a:	f01b ff23 	bl	2a684 <assert_post_action>
	backend->cb->id = id;
    e83e:	6844      	ldr	r4, [r0, #4]
    e840:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    e842:	6843      	ldr	r3, [r0, #4]
    e844:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    e846:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    e848:	6843      	ldr	r3, [r0, #4]
    e84a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    e84c:	6843      	ldr	r3, [r0, #4]
    e84e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    e850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    e854:	f7ff bd90 	b.w	e378 <z_log_notify_backend_enabled>
    e858:	000315c4 	.word	0x000315c4
    e85c:	0003374b 	.word	0x0003374b
    e860:	00032629 	.word	0x00032629
    e864:	00033713 	.word	0x00033713

0000e868 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    e86c:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    e870:	b08f      	sub	sp, #60	; 0x3c
    e872:	f3c1 2649 	ubfx	r6, r1, #9, #10
    e876:	460d      	mov	r5, r1
    e878:	4690      	mov	r8, r2
    e87a:	4699      	mov	r9, r3
    e87c:	9005      	str	r0, [sp, #20]
    e87e:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    e880:	2e00      	cmp	r6, #0
    e882:	d03d      	beq.n	e900 <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
    e884:	f04f 0b04 	mov.w	fp, #4
    e888:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    e88c:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    e88e:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    e890:	4631      	mov	r1, r6
    e892:	ab0b      	add	r3, sp, #44	; 0x2c
    e894:	4640      	mov	r0, r8
    e896:	f8cd b008 	str.w	fp, [sp, #8]
    e89a:	9701      	str	r7, [sp, #4]
    e89c:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    e8a0:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    e8a4:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e8a6:	9607      	str	r6, [sp, #28]
    e8a8:	f7fd fdfc 	bl	c4a4 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    e8ac:	f3c0 0309 	ubfx	r3, r0, #0, #10
    e8b0:	1918      	adds	r0, r3, r4
    e8b2:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e8b6:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    e8b8:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e8ba:	f363 2552 	bfi	r5, r3, #9, #10
    e8be:	9306      	str	r3, [sp, #24]
    e8c0:	f7ff fdde 	bl	e480 <z_log_msg_alloc>
		if (msg) {
    e8c4:	4604      	mov	r4, r0
    e8c6:	b308      	cbz	r0, e90c <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
    e8c8:	2200      	movs	r2, #0
    e8ca:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    e8cc:	3010      	adds	r0, #16
    e8ce:	900b      	str	r0, [sp, #44]	; 0x2c
    e8d0:	930c      	str	r3, [sp, #48]	; 0x30
    e8d2:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e8d4:	4640      	mov	r0, r8
    e8d6:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    e8da:	4a12      	ldr	r2, [pc, #72]	; (e924 <z_impl_z_log_msg_static_create+0xbc>)
    e8dc:	9907      	ldr	r1, [sp, #28]
    e8de:	f8cd a000 	str.w	sl, [sp]
    e8e2:	ab0b      	add	r3, sp, #44	; 0x2c
    e8e4:	f7fd fdde 	bl	c4a4 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    e8e8:	2800      	cmp	r0, #0
    e8ea:	da0f      	bge.n	e90c <z_impl_z_log_msg_static_create+0xa4>
    e8ec:	490e      	ldr	r1, [pc, #56]	; (e928 <z_impl_z_log_msg_static_create+0xc0>)
    e8ee:	480f      	ldr	r0, [pc, #60]	; (e92c <z_impl_z_log_msg_static_create+0xc4>)
    e8f0:	2349      	movs	r3, #73	; 0x49
    e8f2:	4a0f      	ldr	r2, [pc, #60]	; (e930 <z_impl_z_log_msg_static_create+0xc8>)
    e8f4:	f01b fecd 	bl	2a692 <assert_print>
    e8f8:	2149      	movs	r1, #73	; 0x49
    e8fa:	480d      	ldr	r0, [pc, #52]	; (e930 <z_impl_z_log_msg_static_create+0xc8>)
    e8fc:	f01b fec2 	bl	2a684 <assert_post_action>
    e900:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e904:	0880      	lsrs	r0, r0, #2
    e906:	f7ff fdbb 	bl	e480 <z_log_msg_alloc>
    e90a:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    e90c:	f366 2552 	bfi	r5, r6, #9, #10
    e910:	464b      	mov	r3, r9
    e912:	462a      	mov	r2, r5
    e914:	4620      	mov	r0, r4
    e916:	9905      	ldr	r1, [sp, #20]
}
    e918:	b00f      	add	sp, #60	; 0x3c
    e91a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    e91e:	f01c b80d 	b.w	2a93c <z_log_msg_finalize>
    e922:	bf00      	nop
    e924:	0002a911 	.word	0x0002a911
    e928:	00033797 	.word	0x00033797
    e92c:	00032629 	.word	0x00032629
    e930:	0003376b 	.word	0x0003376b

0000e934 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    e934:	b40e      	push	{r1, r2, r3}
    e936:	b503      	push	{r0, r1, lr}
    e938:	ab03      	add	r3, sp, #12
    e93a:	f853 2b04 	ldr.w	r2, [r3], #4
    e93e:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e940:	4804      	ldr	r0, [pc, #16]	; (e954 <print_formatted+0x20>)
	va_start(args, fmt);
    e942:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e944:	f01c f821 	bl	2a98a <cbvprintf>
	va_end(args);

	return length;
}
    e948:	b002      	add	sp, #8
    e94a:	f85d eb04 	ldr.w	lr, [sp], #4
    e94e:	b003      	add	sp, #12
    e950:	4770      	bx	lr
    e952:	bf00      	nop
    e954:	0000e975 	.word	0x0000e975

0000e958 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e958:	06ca      	lsls	r2, r1, #27
    e95a:	d405      	bmi.n	e968 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e95c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    e95e:	bf4c      	ite	mi
    e960:	4902      	ldrmi	r1, [pc, #8]	; (e96c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    e962:	4903      	ldrpl	r1, [pc, #12]	; (e970 <newline_print+0x18>)
    e964:	f7ff bfe6 	b.w	e934 <print_formatted>
	}
}
    e968:	4770      	bx	lr
    e96a:	bf00      	nop
    e96c:	0003688a 	.word	0x0003688a
    e970:	00032c0f 	.word	0x00032c0f

0000e974 <out_func>:
{
    e974:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    e976:	684b      	ldr	r3, [r1, #4]
{
    e978:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    e97a:	681a      	ldr	r2, [r3, #0]
    e97c:	68cb      	ldr	r3, [r1, #12]
{
    e97e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    e980:	429a      	cmp	r2, r3
    e982:	d102      	bne.n	e98a <out_func+0x16>
		log_output_flush(out_ctx);
    e984:	4608      	mov	r0, r1
    e986:	f01c f807 	bl	2a998 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e98a:	6863      	ldr	r3, [r4, #4]
    e98c:	e8d3 2fef 	ldaex	r2, [r3]
    e990:	1c51      	adds	r1, r2, #1
    e992:	e8c3 1fe0 	stlex	r0, r1, [r3]
    e996:	2800      	cmp	r0, #0
    e998:	d1f8      	bne.n	e98c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    e99a:	68a3      	ldr	r3, [r4, #8]
    e99c:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    e99e:	6863      	ldr	r3, [r4, #4]
    e9a0:	681a      	ldr	r2, [r3, #0]
    e9a2:	68e3      	ldr	r3, [r4, #12]
    e9a4:	429a      	cmp	r2, r3
    e9a6:	d909      	bls.n	e9bc <out_func+0x48>
    e9a8:	4905      	ldr	r1, [pc, #20]	; (e9c0 <out_func+0x4c>)
    e9aa:	4806      	ldr	r0, [pc, #24]	; (e9c4 <out_func+0x50>)
    e9ac:	2379      	movs	r3, #121	; 0x79
    e9ae:	4a06      	ldr	r2, [pc, #24]	; (e9c8 <out_func+0x54>)
    e9b0:	f01b fe6f 	bl	2a692 <assert_print>
    e9b4:	2179      	movs	r1, #121	; 0x79
    e9b6:	4804      	ldr	r0, [pc, #16]	; (e9c8 <out_func+0x54>)
    e9b8:	f01b fe64 	bl	2a684 <assert_post_action>
}
    e9bc:	2000      	movs	r0, #0
    e9be:	bd38      	pop	{r3, r4, r5, pc}
    e9c0:	000337cf 	.word	0x000337cf
    e9c4:	00032629 	.word	0x00032629
    e9c8:	000337a0 	.word	0x000337a0

0000e9cc <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    e9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9d0:	b089      	sub	sp, #36	; 0x24
    e9d2:	469a      	mov	sl, r3
    e9d4:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    e9d8:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    e9dc:	9305      	str	r3, [sp, #20]
    e9de:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e9e0:	4604      	mov	r4, r0
    e9e2:	460d      	mov	r5, r1
    e9e4:	9e16      	ldr	r6, [sp, #88]	; 0x58
    e9e6:	9206      	str	r2, [sp, #24]
    e9e8:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    e9ea:	f1bb 0f00 	cmp.w	fp, #0
    e9ee:	f000 8085 	beq.w	eafc <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    e9f2:	f006 0308 	and.w	r3, r6, #8
    e9f6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    e9f8:	f01b ff88 	bl	2a90c <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    e9fc:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    ea00:	4602      	mov	r2, r0
    ea02:	2800      	cmp	r0, #0
    ea04:	d049      	beq.n	ea9a <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    ea06:	4620      	mov	r0, r4
    ea08:	498c      	ldr	r1, [pc, #560]	; (ec3c <log_output_process+0x270>)
    ea0a:	f7ff ff93 	bl	e934 <print_formatted>
    ea0e:	4680      	mov	r8, r0
	if (stamp) {
    ea10:	f1b9 0f00 	cmp.w	r9, #0
    ea14:	d008      	beq.n	ea28 <log_output_process+0x5c>
	if (!format) {
    ea16:	f016 0f44 	tst.w	r6, #68	; 0x44
    ea1a:	d140      	bne.n	ea9e <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    ea1c:	462a      	mov	r2, r5
    ea1e:	4620      	mov	r0, r4
    ea20:	4987      	ldr	r1, [pc, #540]	; (ec40 <log_output_process+0x274>)
    ea22:	f7ff ff87 	bl	e934 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    ea26:	4480      	add	r8, r0
	if (color) {
    ea28:	f006 0301 	and.w	r3, r6, #1
    ea2c:	b153      	cbz	r3, ea44 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    ea2e:	4b85      	ldr	r3, [pc, #532]	; (ec44 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    ea30:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    ea32:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    ea36:	4b84      	ldr	r3, [pc, #528]	; (ec48 <log_output_process+0x27c>)
    ea38:	4984      	ldr	r1, [pc, #528]	; (ec4c <log_output_process+0x280>)
    ea3a:	2a00      	cmp	r2, #0
    ea3c:	bf08      	it	eq
    ea3e:	461a      	moveq	r2, r3
    ea40:	f7ff ff78 	bl	e934 <print_formatted>
	if (level_on) {
    ea44:	f006 0308 	and.w	r3, r6, #8
    ea48:	2b00      	cmp	r3, #0
    ea4a:	d054      	beq.n	eaf6 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    ea4c:	4b80      	ldr	r3, [pc, #512]	; (ec50 <log_output_process+0x284>)
    ea4e:	4620      	mov	r0, r4
    ea50:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    ea54:	497f      	ldr	r1, [pc, #508]	; (ec54 <log_output_process+0x288>)
    ea56:	f7ff ff6d 	bl	e934 <print_formatted>
    ea5a:	4605      	mov	r5, r0
	if (domain) {
    ea5c:	9b06      	ldr	r3, [sp, #24]
    ea5e:	b12b      	cbz	r3, ea6c <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    ea60:	461a      	mov	r2, r3
    ea62:	4620      	mov	r0, r4
    ea64:	497c      	ldr	r1, [pc, #496]	; (ec58 <log_output_process+0x28c>)
    ea66:	f7ff ff65 	bl	e934 <print_formatted>
    ea6a:	4405      	add	r5, r0
	if (source) {
    ea6c:	f1ba 0f00 	cmp.w	sl, #0
    ea70:	d005      	beq.n	ea7e <log_output_process+0xb2>
		total += print_formatted(output,
    ea72:	4652      	mov	r2, sl
    ea74:	4620      	mov	r0, r4
    ea76:	4979      	ldr	r1, [pc, #484]	; (ec5c <log_output_process+0x290>)
    ea78:	f7ff ff5c 	bl	e934 <print_formatted>
    ea7c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    ea7e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    ea80:	2f00      	cmp	r7, #0
    ea82:	d149      	bne.n	eb18 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    ea84:	9b04      	ldr	r3, [sp, #16]
    ea86:	2b00      	cmp	r3, #0
    ea88:	d160      	bne.n	eb4c <log_output_process+0x180>
	if (color) {
    ea8a:	07f3      	lsls	r3, r6, #31
    ea8c:	f100 80cf 	bmi.w	ec2e <log_output_process+0x262>
	newline_print(output, flags);
    ea90:	4631      	mov	r1, r6
    ea92:	4620      	mov	r0, r4
    ea94:	f7ff ff60 	bl	e958 <newline_print>
}
    ea98:	e0c3      	b.n	ec22 <log_output_process+0x256>
	uint32_t length = 0U;
    ea9a:	4680      	mov	r8, r0
    ea9c:	e7b8      	b.n	ea10 <log_output_process+0x44>
	} else if (freq != 0U) {
    ea9e:	4b70      	ldr	r3, [pc, #448]	; (ec60 <log_output_process+0x294>)
    eaa0:	6818      	ldr	r0, [r3, #0]
    eaa2:	2800      	cmp	r0, #0
    eaa4:	d0bf      	beq.n	ea26 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    eaa6:	4b6f      	ldr	r3, [pc, #444]	; (ec64 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    eaa8:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    eaac:	681b      	ldr	r3, [r3, #0]
    eaae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    eab2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    eab6:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    eaba:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    eabe:	fb09 f505 	mul.w	r5, r9, r5
    eac2:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eac6:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    eaca:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    eace:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ead2:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    ead6:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eada:	fb09 f505 	mul.w	r5, r9, r5
    eade:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    eae2:	fb0c 1113 	mls	r1, ip, r3, r1
    eae6:	4620      	mov	r0, r4
    eae8:	9100      	str	r1, [sp, #0]
    eaea:	e9cd e501 	strd	lr, r5, [sp, #4]
    eaee:	495e      	ldr	r1, [pc, #376]	; (ec68 <log_output_process+0x29c>)
    eaf0:	f7ff ff20 	bl	e934 <print_formatted>
    eaf4:	e797      	b.n	ea26 <log_output_process+0x5a>
	int total = 0;
    eaf6:	f006 0508 	and.w	r5, r6, #8
    eafa:	e7af      	b.n	ea5c <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eafc:	f1ba 0f01 	cmp.w	sl, #1
    eb00:	d106      	bne.n	eb10 <log_output_process+0x144>
	if (package) {
    eb02:	b9ef      	cbnz	r7, eb40 <log_output_process+0x174>
	if (data_len) {
    eb04:	9b04      	ldr	r3, [sp, #16]
    eb06:	2b00      	cmp	r3, #0
    eb08:	f000 808b 	beq.w	ec22 <log_output_process+0x256>
		prefix_offset = 0;
    eb0c:	2500      	movs	r5, #0
    eb0e:	e01d      	b.n	eb4c <log_output_process+0x180>
	if (package) {
    eb10:	2f00      	cmp	r7, #0
    eb12:	d0f7      	beq.n	eb04 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eb14:	4855      	ldr	r0, [pc, #340]	; (ec6c <log_output_process+0x2a0>)
    eb16:	e014      	b.n	eb42 <log_output_process+0x176>
		cb = out_func;
    eb18:	4855      	ldr	r0, [pc, #340]	; (ec70 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    eb1a:	463b      	mov	r3, r7
    eb1c:	4622      	mov	r2, r4
    eb1e:	4955      	ldr	r1, [pc, #340]	; (ec74 <log_output_process+0x2a8>)
    eb20:	f01b fb11 	bl	2a146 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    eb24:	2800      	cmp	r0, #0
    eb26:	da0e      	bge.n	eb46 <log_output_process+0x17a>
    eb28:	4953      	ldr	r1, [pc, #332]	; (ec78 <log_output_process+0x2ac>)
    eb2a:	4854      	ldr	r0, [pc, #336]	; (ec7c <log_output_process+0x2b0>)
    eb2c:	f44f 7300 	mov.w	r3, #512	; 0x200
    eb30:	4a53      	ldr	r2, [pc, #332]	; (ec80 <log_output_process+0x2b4>)
    eb32:	f01b fdae 	bl	2a692 <assert_print>
    eb36:	f44f 7100 	mov.w	r1, #512	; 0x200
    eb3a:	4851      	ldr	r0, [pc, #324]	; (ec80 <log_output_process+0x2b4>)
    eb3c:	f01b fda2 	bl	2a684 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eb40:	484b      	ldr	r0, [pc, #300]	; (ec70 <log_output_process+0x2a4>)
		prefix_offset = 0;
    eb42:	465d      	mov	r5, fp
    eb44:	e7e9      	b.n	eb1a <log_output_process+0x14e>
	if (data_len) {
    eb46:	9b04      	ldr	r3, [sp, #16]
    eb48:	2b00      	cmp	r3, #0
    eb4a:	d066      	beq.n	ec1a <log_output_process+0x24e>
		print_formatted(output, " ");
    eb4c:	f8df 8134 	ldr.w	r8, [pc, #308]	; ec84 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    eb50:	f8df 9134 	ldr.w	r9, [pc, #308]	; ec88 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eb54:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    eb56:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eb58:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    eb5a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eb5c:	bf28      	it	cs
    eb5e:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    eb60:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    eb64:	f7ff fef8 	bl	e958 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    eb68:	4555      	cmp	r5, sl
    eb6a:	dc43      	bgt.n	ebf4 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    eb6c:	9b05      	ldr	r3, [sp, #20]
    eb6e:	4649      	mov	r1, r9
    eb70:	4620      	mov	r0, r4
    eb72:	781a      	ldrb	r2, [r3, #0]
    eb74:	f7ff fede 	bl	e934 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    eb78:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    eb7c:	f01a 0f07 	tst.w	sl, #7
    eb80:	d103      	bne.n	eb8a <log_output_process+0x1be>
			print_formatted(output, " ");
    eb82:	4641      	mov	r1, r8
    eb84:	4620      	mov	r0, r4
    eb86:	f7ff fed5 	bl	e934 <print_formatted>
		if (i < length) {
    eb8a:	4557      	cmp	r7, sl
    eb8c:	d939      	bls.n	ec02 <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    eb8e:	9b05      	ldr	r3, [sp, #20]
    eb90:	4649      	mov	r1, r9
    eb92:	4620      	mov	r0, r4
    eb94:	f813 200a 	ldrb.w	r2, [r3, sl]
    eb98:	f7ff fecc 	bl	e934 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    eb9c:	f10a 0a01 	add.w	sl, sl, #1
    eba0:	f1ba 0f10 	cmp.w	sl, #16
    eba4:	d1ea      	bne.n	eb7c <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    eba6:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    ebaa:	4620      	mov	r0, r4
    ebac:	4937      	ldr	r1, [pc, #220]	; (ec8c <log_output_process+0x2c0>)
    ebae:	f7ff fec1 	bl	e934 <print_formatted>
		if (i < length) {
    ebb2:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    ebb4:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    ebb6:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    ebb8:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    ebba:	4b35      	ldr	r3, [pc, #212]	; (ec90 <log_output_process+0x2c4>)
    ebbc:	5c99      	ldrb	r1, [r3, r2]
    ebbe:	f011 0f97 	tst.w	r1, #151	; 0x97
    ebc2:	bf08      	it	eq
    ebc4:	222e      	moveq	r2, #46	; 0x2e
    ebc6:	4933      	ldr	r1, [pc, #204]	; (ec94 <log_output_process+0x2c8>)
    ebc8:	f7ff feb4 	bl	e934 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ebcc:	f10a 0a01 	add.w	sl, sl, #1
    ebd0:	f1ba 0f10 	cmp.w	sl, #16
    ebd4:	d01a      	beq.n	ec0c <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    ebd6:	f01a 0f07 	tst.w	sl, #7
    ebda:	d103      	bne.n	ebe4 <log_output_process+0x218>
			print_formatted(output, " ");
    ebdc:	4641      	mov	r1, r8
    ebde:	4620      	mov	r0, r4
    ebe0:	f7ff fea8 	bl	e934 <print_formatted>
		if (i < length) {
    ebe4:	4557      	cmp	r7, sl
    ebe6:	4652      	mov	r2, sl
    ebe8:	d8e4      	bhi.n	ebb4 <log_output_process+0x1e8>
			print_formatted(output, " ");
    ebea:	4641      	mov	r1, r8
    ebec:	4620      	mov	r0, r4
    ebee:	f7ff fea1 	bl	e934 <print_formatted>
    ebf2:	e7eb      	b.n	ebcc <log_output_process+0x200>
		print_formatted(output, " ");
    ebf4:	4641      	mov	r1, r8
    ebf6:	4620      	mov	r0, r4
    ebf8:	f7ff fe9c 	bl	e934 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    ebfc:	f10a 0a01 	add.w	sl, sl, #1
    ec00:	e7b2      	b.n	eb68 <log_output_process+0x19c>
			print_formatted(output, "   ");
    ec02:	4620      	mov	r0, r4
    ec04:	4924      	ldr	r1, [pc, #144]	; (ec98 <log_output_process+0x2cc>)
    ec06:	f7ff fe95 	bl	e934 <print_formatted>
    ec0a:	e7c7      	b.n	eb9c <log_output_process+0x1d0>
		data += length;
    ec0c:	9b05      	ldr	r3, [sp, #20]
    ec0e:	443b      	add	r3, r7
    ec10:	9305      	str	r3, [sp, #20]
	} while (len);
    ec12:	9b04      	ldr	r3, [sp, #16]
    ec14:	1bdb      	subs	r3, r3, r7
    ec16:	9304      	str	r3, [sp, #16]
    ec18:	d19c      	bne.n	eb54 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    ec1a:	f1bb 0f00 	cmp.w	fp, #0
    ec1e:	f47f af34 	bne.w	ea8a <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    ec22:	4620      	mov	r0, r4
}
    ec24:	b009      	add	sp, #36	; 0x24
    ec26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    ec2a:	f01b beb5 	b.w	2a998 <log_output_flush>
		print_formatted(output, "%s", log_color);
    ec2e:	4620      	mov	r0, r4
    ec30:	4a05      	ldr	r2, [pc, #20]	; (ec48 <log_output_process+0x27c>)
    ec32:	4906      	ldr	r1, [pc, #24]	; (ec4c <log_output_process+0x280>)
    ec34:	f7ff fe7e 	bl	e934 <print_formatted>
}
    ec38:	e72a      	b.n	ea90 <log_output_process+0xc4>
    ec3a:	bf00      	nop
    ec3c:	00033804 	.word	0x00033804
    ec40:	00033808 	.word	0x00033808
    ec44:	00031b28 	.word	0x00031b28
    ec48:	000337ff 	.word	0x000337ff
    ec4c:	000327dc 	.word	0x000327dc
    ec50:	00031b3c 	.word	0x00031b3c
    ec54:	0003382d 	.word	0x0003382d
    ec58:	00033833 	.word	0x00033833
    ec5c:	00033837 	.word	0x00033837
    ec60:	2002148c 	.word	0x2002148c
    ec64:	20021488 	.word	0x20021488
    ec68:	00033811 	.word	0x00033811
    ec6c:	0002a9b3 	.word	0x0002a9b3
    ec70:	0000e975 	.word	0x0000e975
    ec74:	0002a98b 	.word	0x0002a98b
    ec78:	0003383c 	.word	0x0003383c
    ec7c:	00032629 	.word	0x00032629
    ec80:	000337a0 	.word	0x000337a0
    ec84:	00037a08 	.word	0x00037a08
    ec88:	00033845 	.word	0x00033845
    ec8c:	0003384b 	.word	0x0003384b
    ec90:	00038b54 	.word	0x00038b54
    ec94:	0003384d 	.word	0x0003384d
    ec98:	00037a06 	.word	0x00037a06

0000ec9c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    ec9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    eca0:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    eca2:	684b      	ldr	r3, [r1, #4]
    eca4:	4605      	mov	r5, r0
    eca6:	460c      	mov	r4, r1
    eca8:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    ecaa:	688e      	ldr	r6, [r1, #8]
    ecac:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    ecae:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    ecb2:	b15b      	cbz	r3, eccc <log_output_msg_process+0x30>
    ecb4:	4a13      	ldr	r2, [pc, #76]	; (ed04 <log_output_msg_process+0x68>)
    ecb6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    ecb8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ecbc:	2900      	cmp	r1, #0
    ecbe:	db1f      	blt.n	ed00 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    ecc0:	7820      	ldrb	r0, [r4, #0]
    ecc2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ecc6:	f7ff fd9b 	bl	e800 <log_source_name_get>
    ecca:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    eccc:	4621      	mov	r1, r4
    ecce:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    ecd2:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    ecd4:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    ecd8:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    ecda:	eb01 0402 	add.w	r4, r1, r2
    ecde:	bf08      	it	eq
    ece0:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    ece2:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    ece6:	e9cd 0803 	strd	r0, r8, [sp, #12]
    ecea:	e9cd 1401 	strd	r1, r4, [sp, #4]
    ecee:	2200      	movs	r2, #0
    ecf0:	4631      	mov	r1, r6
    ecf2:	4628      	mov	r0, r5
    ecf4:	9700      	str	r7, [sp, #0]
    ecf6:	f7ff fe69 	bl	e9cc <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    ecfa:	b006      	add	sp, #24
    ecfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ed00:	2300      	movs	r3, #0
    ed02:	e7e3      	b.n	eccc <log_output_msg_process+0x30>
    ed04:	00031454 	.word	0x00031454

0000ed08 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed08:	f242 730f 	movw	r3, #9999	; 0x270f
{
    ed0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed0e:	428b      	cmp	r3, r1
    ed10:	bf28      	it	cs
    ed12:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    ed14:	6805      	ldr	r5, [r0, #0]
{
    ed16:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed18:	2105      	movs	r1, #5
    ed1a:	4668      	mov	r0, sp
    ed1c:	4a0d      	ldr	r2, [pc, #52]	; (ed54 <log_output_dropped_process+0x4c>)
    ed1e:	f01b fb03 	bl	2a328 <snprintk>
    ed22:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    ed24:	6863      	ldr	r3, [r4, #4]
    ed26:	4628      	mov	r0, r5
    ed28:	220b      	movs	r2, #11
    ed2a:	685b      	ldr	r3, [r3, #4]
    ed2c:	490a      	ldr	r1, [pc, #40]	; (ed58 <log_output_dropped_process+0x50>)
    ed2e:	f01b fe1f 	bl	2a970 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ed32:	6863      	ldr	r3, [r4, #4]
    ed34:	4632      	mov	r2, r6
    ed36:	4669      	mov	r1, sp
    ed38:	4628      	mov	r0, r5
    ed3a:	685b      	ldr	r3, [r3, #4]
    ed3c:	f01b fe18 	bl	2a970 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    ed40:	6863      	ldr	r3, [r4, #4]
    ed42:	221b      	movs	r2, #27
    ed44:	4628      	mov	r0, r5
    ed46:	685b      	ldr	r3, [r3, #4]
    ed48:	4904      	ldr	r1, [pc, #16]	; (ed5c <log_output_dropped_process+0x54>)
    ed4a:	f01b fe11 	bl	2a970 <buffer_write>
		     output->control_block->ctx);
}
    ed4e:	b002      	add	sp, #8
    ed50:	bd70      	pop	{r4, r5, r6, pc}
    ed52:	bf00      	nop
    ed54:	000327c6 	.word	0x000327c6
    ed58:	0003386c 	.word	0x0003386c
    ed5c:	00033850 	.word	0x00033850

0000ed60 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    ed60:	2100      	movs	r1, #0
    ed62:	2301      	movs	r3, #1
    ed64:	4a06      	ldr	r2, [pc, #24]	; (ed80 <log_output_timestamp_freq_set+0x20>)
    ed66:	4290      	cmp	r0, r2
    ed68:	d806      	bhi.n	ed78 <log_output_timestamp_freq_set+0x18>
    ed6a:	4a06      	ldr	r2, [pc, #24]	; (ed84 <log_output_timestamp_freq_set+0x24>)
    ed6c:	b901      	cbnz	r1, ed70 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    ed6e:	2301      	movs	r3, #1
    ed70:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ed72:	4b05      	ldr	r3, [pc, #20]	; (ed88 <log_output_timestamp_freq_set+0x28>)
    ed74:	6018      	str	r0, [r3, #0]
}
    ed76:	4770      	bx	lr
		timestamp_div *= 2U;
    ed78:	2101      	movs	r1, #1
		frequency /= 2U;
    ed7a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    ed7c:	005b      	lsls	r3, r3, #1
    ed7e:	e7f2      	b.n	ed66 <log_output_timestamp_freq_set+0x6>
    ed80:	000f4240 	.word	0x000f4240
    ed84:	20021488 	.word	0x20021488
    ed88:	2002148c 	.word	0x2002148c

0000ed8c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    ed8c:	2201      	movs	r2, #1
    ed8e:	4b01      	ldr	r3, [pc, #4]	; (ed94 <log_backend_rtt_init+0x8>)
    ed90:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    ed92:	4770      	bx	lr
    ed94:	20022304 	.word	0x20022304

0000ed98 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    ed98:	4b01      	ldr	r3, [pc, #4]	; (eda0 <format_set+0x8>)
	return 0;
}
    ed9a:	2000      	movs	r0, #0
	log_format_current = log_type;
    ed9c:	6019      	str	r1, [r3, #0]
}
    ed9e:	4770      	bx	lr
    eda0:	200214a4 	.word	0x200214a4

0000eda4 <panic>:
	panic_mode = true;
    eda4:	2201      	movs	r2, #1
    eda6:	4b02      	ldr	r3, [pc, #8]	; (edb0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    eda8:	4802      	ldr	r0, [pc, #8]	; (edb4 <panic+0x10>)
    edaa:	701a      	strb	r2, [r3, #0]
    edac:	f01b bdf4 	b.w	2a998 <log_output_flush>
    edb0:	20022305 	.word	0x20022305
    edb4:	00031b6c 	.word	0x00031b6c

0000edb8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    edb8:	4801      	ldr	r0, [pc, #4]	; (edc0 <dropped+0x8>)
    edba:	f7ff bfa5 	b.w	ed08 <log_output_dropped_process>
    edbe:	bf00      	nop
    edc0:	00031b6c 	.word	0x00031b6c

0000edc4 <process>:
{
    edc4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    edc6:	4b06      	ldr	r3, [pc, #24]	; (ede0 <process+0x1c>)
{
    edc8:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    edca:	6818      	ldr	r0, [r3, #0]
    edcc:	f7ff fabe 	bl	e34c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    edd0:	4621      	mov	r1, r4
}
    edd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    edd6:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    edd8:	220f      	movs	r2, #15
    edda:	4802      	ldr	r0, [pc, #8]	; (ede4 <process+0x20>)
    eddc:	4718      	bx	r3
    edde:	bf00      	nop
    ede0:	200214a4 	.word	0x200214a4
    ede4:	00031b6c 	.word	0x00031b6c

0000ede8 <on_failed_write>:
	if (retry_cnt == 0) {
    ede8:	b910      	cbnz	r0, edf0 <on_failed_write+0x8>
		host_present = false;
    edea:	4b07      	ldr	r3, [pc, #28]	; (ee08 <on_failed_write+0x20>)
    edec:	7018      	strb	r0, [r3, #0]
}
    edee:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    edf0:	4b06      	ldr	r3, [pc, #24]	; (ee0c <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    edf2:	781b      	ldrb	r3, [r3, #0]
    edf4:	b11b      	cbz	r3, edfe <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    edf6:	f241 3088 	movw	r0, #5000	; 0x1388
    edfa:	f021 ba8d 	b.w	30318 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    edfe:	20a4      	movs	r0, #164	; 0xa4
    ee00:	2100      	movs	r1, #0
    ee02:	f018 bac1 	b.w	27388 <z_impl_k_sleep>
    ee06:	bf00      	nop
    ee08:	20022304 	.word	0x20022304
    ee0c:	20022305 	.word	0x20022305

0000ee10 <data_out_block_mode>:
{
    ee10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee14:	4680      	mov	r8, r0
    ee16:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    ee18:	2404      	movs	r4, #4
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    ee1a:	f8df 9070 	ldr.w	r9, [pc, #112]	; ee8c <data_out_block_mode+0x7c>
    ee1e:	4f1c      	ldr	r7, [pc, #112]	; (ee90 <data_out_block_mode+0x80>)
		if (!is_sync_mode()) {
    ee20:	f899 5000 	ldrb.w	r5, [r9]
    ee24:	b995      	cbnz	r5, ee4c <data_out_block_mode+0x3c>
			RTT_LOCK();
    ee26:	f015 fc3d 	bl	246a4 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    ee2a:	4628      	mov	r0, r5
    ee2c:	4632      	mov	r2, r6
    ee2e:	4641      	mov	r1, r8
    ee30:	f015 fbe6 	bl	24600 <SEGGER_RTT_WriteSkipNoLock>
    ee34:	4605      	mov	r5, r0
			RTT_UNLOCK();
    ee36:	f015 fc3f 	bl	246b8 <zephyr_rtt_mutex_unlock>
		if (ret) {
    ee3a:	b1e5      	cbz	r5, ee76 <data_out_block_mode+0x66>
	host_present = true;
    ee3c:	2301      	movs	r3, #1
    ee3e:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    ee40:	f899 3000 	ldrb.w	r3, [r9]
    ee44:	b973      	cbnz	r3, ee64 <data_out_block_mode+0x54>
}
    ee46:	4630      	mov	r0, r6
    ee48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    ee4c:	4632      	mov	r2, r6
    ee4e:	4641      	mov	r1, r8
    ee50:	2000      	movs	r0, #0
    ee52:	f015 fbd5 	bl	24600 <SEGGER_RTT_WriteSkipNoLock>
    ee56:	4605      	mov	r5, r0
    ee58:	e7ef      	b.n	ee3a <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    ee5a:	4620      	mov	r0, r4
    ee5c:	1e65      	subs	r5, r4, #1
    ee5e:	f7ff ffc3 	bl	ede8 <on_failed_write>
    ee62:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    ee64:	2000      	movs	r0, #0
    ee66:	f015 fc13 	bl	24690 <SEGGER_RTT_HasDataUp>
    ee6a:	2800      	cmp	r0, #0
    ee6c:	d0eb      	beq.n	ee46 <data_out_block_mode+0x36>
    ee6e:	783b      	ldrb	r3, [r7, #0]
    ee70:	2b00      	cmp	r3, #0
    ee72:	d1f2      	bne.n	ee5a <data_out_block_mode+0x4a>
    ee74:	e7e7      	b.n	ee46 <data_out_block_mode+0x36>
		} else if (host_present) {
    ee76:	783b      	ldrb	r3, [r7, #0]
    ee78:	2b00      	cmp	r3, #0
    ee7a:	d0e4      	beq.n	ee46 <data_out_block_mode+0x36>
			retry_cnt--;
    ee7c:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    ee7e:	4620      	mov	r0, r4
    ee80:	f7ff ffb2 	bl	ede8 <on_failed_write>
	} while ((ret == 0) && host_present);
    ee84:	783b      	ldrb	r3, [r7, #0]
    ee86:	2b00      	cmp	r3, #0
    ee88:	d1ca      	bne.n	ee20 <data_out_block_mode+0x10>
    ee8a:	e7dc      	b.n	ee46 <data_out_block_mode+0x36>
    ee8c:	20022305 	.word	0x20022305
    ee90:	20022304 	.word	0x20022304

0000ee94 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    ee94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ee98:	460f      	mov	r7, r1
    ee9a:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ee9c:	2108      	movs	r1, #8
    ee9e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    eea0:	f01b fe25 	bl	2aaee <nvs_al_size.isra.0>
    eea4:	4680      	mov	r8, r0

	*addr -= ate_size;
    eea6:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    eea8:	f8df 9048 	ldr.w	r9, [pc, #72]	; eef4 <nvs_recover_last_ate+0x60>
	*addr -= ate_size;
    eeac:	1a24      	subs	r4, r4, r0
    eeae:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    eeb0:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    eeb4:	42ac      	cmp	r4, r5
    eeb6:	d803      	bhi.n	eec0 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    eeb8:	2000      	movs	r0, #0
}
    eeba:	b003      	add	sp, #12
    eebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    eec0:	2308      	movs	r3, #8
    eec2:	466a      	mov	r2, sp
    eec4:	4621      	mov	r1, r4
    eec6:	4630      	mov	r0, r6
    eec8:	f01b fd81 	bl	2a9ce <nvs_flash_rd>
		if (rc) {
    eecc:	2800      	cmp	r0, #0
    eece:	d1f4      	bne.n	eeba <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    eed0:	4669      	mov	r1, sp
    eed2:	4630      	mov	r0, r6
    eed4:	f01b fe15 	bl	2ab02 <nvs_ate_valid>
    eed8:	b140      	cbz	r0, eeec <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    eeda:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    eede:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    eee2:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    eee6:	4413      	add	r3, r2
    eee8:	441d      	add	r5, r3
			*addr = ate_end_addr;
    eeea:	603c      	str	r4, [r7, #0]
		ate_end_addr -= ate_size;
    eeec:	eba4 0408 	sub.w	r4, r4, r8
    eef0:	e7e0      	b.n	eeb4 <nvs_recover_last_ate+0x20>
    eef2:	bf00      	nop
    eef4:	ffff0000 	.word	0xffff0000

0000eef8 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eefc:	b08f      	sub	sp, #60	; 0x3c
    eefe:	4604      	mov	r4, r0
    ef00:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    ef02:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    ef06:	4640      	mov	r0, r8
    ef08:	f021 f926 	bl	30158 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    ef0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    ef0e:	6883      	ldr	r3, [r0, #8]
    ef10:	68db      	ldr	r3, [r3, #12]
    ef12:	4798      	blx	r3
    ef14:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    ef16:	b988      	cbnz	r0, ef3c <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
    ef18:	4b8d      	ldr	r3, [pc, #564]	; (f150 <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
    ef1a:	637b      	str	r3, [r7, #52]	; 0x34
    ef1c:	2302      	movs	r3, #2
		return -EINVAL;
    ef1e:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
    ef22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef26:	488b      	ldr	r0, [pc, #556]	; (f154 <nvs_mount+0x25c>)
    ef28:	633b      	str	r3, [r7, #48]	; 0x30
    ef2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ef2e:	f01b fddb 	bl	2aae8 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    ef32:	4628      	mov	r0, r5
    ef34:	373c      	adds	r7, #60	; 0x3c
    ef36:	46bd      	mov	sp, r7
    ef38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    ef3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    ef3e:	6883      	ldr	r3, [r0, #8]
    ef40:	68db      	ldr	r3, [r3, #12]
    ef42:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    ef44:	6803      	ldr	r3, [r0, #0]
    ef46:	3b01      	subs	r3, #1
    ef48:	2b1f      	cmp	r3, #31
    ef4a:	d901      	bls.n	ef50 <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
    ef4c:	4b82      	ldr	r3, [pc, #520]	; (f158 <nvs_mount+0x260>)
    ef4e:	e7e4      	b.n	ef1a <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    ef50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ef52:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    ef54:	f107 0214 	add.w	r2, r7, #20
    ef58:	f01f f9e1 	bl	2e31e <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    ef5c:	b108      	cbz	r0, ef62 <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
    ef5e:	4b7f      	ldr	r3, [pc, #508]	; (f15c <nvs_mount+0x264>)
    ef60:	e7db      	b.n	ef1a <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
    ef62:	89a5      	ldrh	r5, [r4, #12]
    ef64:	b12d      	cbz	r5, ef72 <nvs_mount+0x7a>
    ef66:	69bb      	ldr	r3, [r7, #24]
    ef68:	fbb5 f2f3 	udiv	r2, r5, r3
    ef6c:	fb03 5512 	mls	r5, r3, r2, r5
    ef70:	b10d      	cbz	r5, ef76 <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
    ef72:	4b7b      	ldr	r3, [pc, #492]	; (f160 <nvs_mount+0x268>)
    ef74:	e7d1      	b.n	ef1a <nvs_mount+0x22>
	if (fs->sector_count < 2) {
    ef76:	89e3      	ldrh	r3, [r4, #14]
    ef78:	2b01      	cmp	r3, #1
    ef7a:	d801      	bhi.n	ef80 <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
    ef7c:	4b79      	ldr	r3, [pc, #484]	; (f164 <nvs_mount+0x26c>)
    ef7e:	e7cc      	b.n	ef1a <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ef80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    ef82:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ef84:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    ef88:	f04f 33ff 	mov.w	r3, #4294967295
    ef8c:	f04f 32ff 	mov.w	r2, #4294967295
    ef90:	4640      	mov	r0, r8
    ef92:	f016 f8a3 	bl	250dc <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ef96:	2108      	movs	r1, #8
    ef98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ef9a:	f01b fda8 	bl	2aaee <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    ef9e:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    efa0:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    efa2:	89e3      	ldrh	r3, [r4, #14]
    efa4:	fa1f fb85 	uxth.w	fp, r5
    efa8:	455b      	cmp	r3, fp
    efaa:	d808      	bhi.n	efbe <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
    efac:	89e3      	ldrh	r3, [r4, #14]
    efae:	454b      	cmp	r3, r9
    efb0:	d123      	bne.n	effa <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
    efb2:	4640      	mov	r0, r8
    efb4:	f016 f962 	bl	2527c <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    efb8:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    efbc:	e7b9      	b.n	ef32 <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
    efbe:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    efc0:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    efc2:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    efc4:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    efc8:	4652      	mov	r2, sl
    efca:	2308      	movs	r3, #8
    efcc:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    efce:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    efd0:	f01b fd4b 	bl	2aa6a <nvs_flash_cmp_const>
		if (rc) {
    efd4:	b178      	cbz	r0, eff6 <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
    efd6:	4639      	mov	r1, r7
    efd8:	4620      	mov	r0, r4
    efda:	f01b fd06 	bl	2a9ea <nvs_sector_advance>
			closed_sectors++;
    efde:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    efe2:	2308      	movs	r3, #8
    efe4:	4652      	mov	r2, sl
    efe6:	4620      	mov	r0, r4
    efe8:	6839      	ldr	r1, [r7, #0]
			closed_sectors++;
    efea:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    efee:	f01b fd3c 	bl	2aa6a <nvs_flash_cmp_const>
			if (!rc) {
    eff2:	2800      	cmp	r0, #0
    eff4:	d0da      	beq.n	efac <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
    eff6:	3501      	adds	r5, #1
    eff8:	e7d3      	b.n	efa2 <nvs_mount+0xaa>
	if (i == fs->sector_count) {
    effa:	455b      	cmp	r3, fp
    effc:	d10b      	bne.n	f016 <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    effe:	6839      	ldr	r1, [r7, #0]
    f000:	2308      	movs	r3, #8
    f002:	4652      	mov	r2, sl
    f004:	4620      	mov	r0, r4
    f006:	1b89      	subs	r1, r1, r6
    f008:	f01b fd2f 	bl	2aa6a <nvs_flash_cmp_const>
		if (!rc) {
    f00c:	b918      	cbnz	r0, f016 <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
    f00e:	4639      	mov	r1, r7
    f010:	4620      	mov	r0, r4
    f012:	f01b fcea 	bl	2a9ea <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    f016:	4639      	mov	r1, r7
    f018:	4620      	mov	r0, r4
    f01a:	f7ff ff3b 	bl	ee94 <nvs_recover_last_ate>
	if (rc) {
    f01e:	4605      	mov	r5, r0
    f020:	b118      	cbz	r0, f02a <nvs_mount+0x132>
    f022:	4640      	mov	r0, r8
    f024:	f016 f92a 	bl	2527c <z_impl_k_mutex_unlock>
	if (rc) {
    f028:	e783      	b.n	ef32 <nvs_mount+0x3a>
	fs->ate_wra = addr;
    f02a:	683b      	ldr	r3, [r7, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f02c:	ea4f 4913 	mov.w	r9, r3, lsr #16
    f030:	ea4f 4909 	mov.w	r9, r9, lsl #16
	fs->ate_wra = addr;
    f034:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f036:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    f03a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    f03e:	4299      	cmp	r1, r3
    f040:	d30f      	bcc.n	f062 <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f042:	2308      	movs	r3, #8
    f044:	4620      	mov	r0, r4
    f046:	1d3a      	adds	r2, r7, #4
    f048:	f01b fcc1 	bl	2a9ce <nvs_flash_rd>
		if (rc) {
    f04c:	4605      	mov	r5, r0
    f04e:	2800      	cmp	r0, #0
    f050:	d1e7      	bne.n	f022 <nvs_mount+0x12a>
    f052:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
    f054:	f813 2b01 	ldrb.w	r2, [r3], #1
    f058:	4592      	cmp	sl, r2
    f05a:	d144      	bne.n	f0e6 <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f05c:	3501      	adds	r5, #1
    f05e:	2d08      	cmp	r5, #8
    f060:	d1f8      	bne.n	f054 <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f062:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    f064:	4639      	mov	r1, r7
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f066:	0c1b      	lsrs	r3, r3, #16
    f068:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    f06a:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f06c:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
    f06e:	f01b fcbc 	bl	2a9ea <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    f072:	4652      	mov	r2, sl
    f074:	4620      	mov	r0, r4
    f076:	89a3      	ldrh	r3, [r4, #12]
    f078:	6839      	ldr	r1, [r7, #0]
    f07a:	f01b fcf6 	bl	2aa6a <nvs_flash_cmp_const>
	if (rc < 0) {
    f07e:	1e05      	subs	r5, r0, #0
    f080:	dbcf      	blt.n	f022 <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
    f082:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    f084:	f000 8082 	beq.w	f18c <nvs_mount+0x294>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f088:	f64f 7aff 	movw	sl, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    f08c:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f090:	89a3      	ldrh	r3, [r4, #12]
    f092:	fa1f f289 	uxth.w	r2, r9
    f096:	1b9b      	subs	r3, r3, r6
    f098:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    f09a:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f09e:	d33c      	bcc.n	f11a <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
    f0a0:	4b31      	ldr	r3, [pc, #196]	; (f168 <nvs_mount+0x270>)
    f0a2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f0a6:	637b      	str	r3, [r7, #52]	; 0x34
    f0a8:	2302      	movs	r3, #2
    f0aa:	482a      	ldr	r0, [pc, #168]	; (f154 <nvs_mount+0x25c>)
    f0ac:	633b      	str	r3, [r7, #48]	; 0x30
    f0ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f0b2:	f01b fd19 	bl	2aae8 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f0b6:	4620      	mov	r0, r4
    f0b8:	6861      	ldr	r1, [r4, #4]
    f0ba:	f01b fcfb 	bl	2aab4 <nvs_flash_erase_sector>
		if (rc) {
    f0be:	4605      	mov	r5, r0
    f0c0:	2800      	cmp	r0, #0
    f0c2:	d1ae      	bne.n	f022 <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
    f0c4:	6863      	ldr	r3, [r4, #4]
    f0c6:	4a29      	ldr	r2, [pc, #164]	; (f16c <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f0c8:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    f0ca:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f0cc:	440b      	add	r3, r1
    f0ce:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    f0d2:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f0d4:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    f0d6:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f0d8:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f0da:	f01b fdf4 	bl	2acc6 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    f0de:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f0e0:	2d00      	cmp	r5, #0
    f0e2:	d06f      	beq.n	f1c4 <nvs_mount+0x2cc>
    f0e4:	e79d      	b.n	f022 <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
    f0e6:	4620      	mov	r0, r4
    f0e8:	1d39      	adds	r1, r7, #4
    f0ea:	f01b fd0a 	bl	2ab02 <nvs_ate_valid>
    f0ee:	6862      	ldr	r2, [r4, #4]
    f0f0:	b910      	cbnz	r0, f0f8 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
    f0f2:	1b92      	subs	r2, r2, r6
    f0f4:	6062      	str	r2, [r4, #4]
    f0f6:	e7a0      	b.n	f03a <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f0f8:	893d      	ldrh	r5, [r7, #8]
    f0fa:	88f9      	ldrh	r1, [r7, #6]
    f0fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    f0fe:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f102:	4429      	add	r1, r5
    f104:	f01b fcf3 	bl	2aaee <nvs_al_size.isra.0>
    f108:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f10a:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f10c:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f10e:	d1f0      	bne.n	f0f2 <nvs_mount+0x1fa>
    f110:	2d00      	cmp	r5, #0
    f112:	d0ee      	beq.n	f0f2 <nvs_mount+0x1fa>
				rc = -ESPIPE;
    f114:	f06f 051c 	mvn.w	r5, #28
    f118:	e09c      	b.n	f254 <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f11a:	2308      	movs	r3, #8
    f11c:	4649      	mov	r1, r9
    f11e:	4620      	mov	r0, r4
    f120:	f107 020c 	add.w	r2, r7, #12
    f124:	f01b fc53 	bl	2a9ce <nvs_flash_rd>
			if (rc) {
    f128:	4605      	mov	r5, r0
    f12a:	2800      	cmp	r0, #0
    f12c:	f47f af79 	bne.w	f022 <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    f130:	4620      	mov	r0, r4
    f132:	f107 010c 	add.w	r1, r7, #12
    f136:	f01b fce4 	bl	2ab02 <nvs_ate_valid>
    f13a:	b130      	cbz	r0, f14a <nvs_mount+0x252>
    f13c:	89bb      	ldrh	r3, [r7, #12]
    f13e:	4553      	cmp	r3, sl
    f140:	d103      	bne.n	f14a <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
    f142:	8a3b      	ldrh	r3, [r7, #16]
    f144:	2b00      	cmp	r3, #0
    f146:	f000 808b 	beq.w	f260 <nvs_mount+0x368>
			addr += ate_size;
    f14a:	44b1      	add	r9, r6
    f14c:	e7a0      	b.n	f090 <nvs_mount+0x198>
    f14e:	bf00      	nop
    f150:	000338bc 	.word	0x000338bc
    f154:	00031534 	.word	0x00031534
    f158:	000338de 	.word	0x000338de
    f15c:	000338fb 	.word	0x000338fb
    f160:	00033913 	.word	0x00033913
    f164:	00033927 	.word	0x00033927
    f168:	00033984 	.word	0x00033984
    f16c:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    f170:	4652      	mov	r2, sl
    f172:	4620      	mov	r0, r4
    f174:	1a5b      	subs	r3, r3, r1
    f176:	f01b fc78 	bl	2aa6a <nvs_flash_cmp_const>
		if (rc < 0) {
    f17a:	1e05      	subs	r5, r0, #0
    f17c:	f6ff af51 	blt.w	f022 <nvs_mount+0x12a>
		if (!rc) {
    f180:	d008      	beq.n	f194 <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    f182:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f184:	68a3      	ldr	r3, [r4, #8]
    f186:	6812      	ldr	r2, [r2, #0]
    f188:	4413      	add	r3, r2
    f18a:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    f18c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    f190:	428b      	cmp	r3, r1
    f192:	d8ed      	bhi.n	f170 <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f194:	6861      	ldr	r1, [r4, #4]
    f196:	89a3      	ldrh	r3, [r4, #12]
    f198:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    f19c:	429a      	cmp	r2, r3
    f19e:	d19f      	bne.n	f0e0 <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f1a0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; f290 <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f1a4:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f1a6:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f1aa:	4293      	cmp	r3, r2
    f1ac:	d098      	beq.n	f0e0 <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f1ae:	4620      	mov	r0, r4
    f1b0:	f01b fc80 	bl	2aab4 <nvs_flash_erase_sector>
		if (rc) {
    f1b4:	4605      	mov	r5, r0
    f1b6:	2800      	cmp	r0, #0
    f1b8:	f47f af33 	bne.w	f022 <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f1bc:	6863      	ldr	r3, [r4, #4]
    f1be:	ea03 0309 	and.w	r3, r3, r9
    f1c2:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    f1c4:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f1c6:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    f1c8:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f1cc:	429a      	cmp	r2, r3
    f1ce:	d03d      	beq.n	f24c <nvs_mount+0x354>
    f1d0:	4640      	mov	r0, r8
    f1d2:	f016 f853 	bl	2527c <z_impl_k_mutex_unlock>
	fs->ready = true;
    f1d6:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f1d8:	46e8      	mov	r8, sp
    f1da:	b088      	sub	sp, #32
	fs->ready = true;
    f1dc:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f1de:	466d      	mov	r5, sp
    f1e0:	89e2      	ldrh	r2, [r4, #14]
    f1e2:	89a3      	ldrh	r3, [r4, #12]
    f1e4:	f04f 0904 	mov.w	r9, #4
    f1e8:	462e      	mov	r6, r5
    f1ea:	492a      	ldr	r1, [pc, #168]	; (f294 <nvs_mount+0x39c>)
    f1ec:	61eb      	str	r3, [r5, #28]
    f1ee:	e9c5 1205 	strd	r1, r2, [r5, #20]
    f1f2:	f846 9f10 	str.w	r9, [r6, #16]!
    f1f6:	4632      	mov	r2, r6
    f1f8:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f1fc:	4826      	ldr	r0, [pc, #152]	; (f298 <nvs_mount+0x3a0>)
    f1fe:	f01b fc73 	bl	2aae8 <z_log_msg_static_create.constprop.0>
    f202:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
    f204:	6863      	ldr	r3, [r4, #4]
    f206:	46ad      	mov	sp, r5
    f208:	4a24      	ldr	r2, [pc, #144]	; (f29c <nvs_mount+0x3a4>)
    f20a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f20e:	616a      	str	r2, [r5, #20]
    f210:	0c1a      	lsrs	r2, r3, #16
    f212:	b29b      	uxth	r3, r3
    f214:	61aa      	str	r2, [r5, #24]
    f216:	61eb      	str	r3, [r5, #28]
    f218:	4632      	mov	r2, r6
    f21a:	481f      	ldr	r0, [pc, #124]	; (f298 <nvs_mount+0x3a0>)
    f21c:	f8c5 9010 	str.w	r9, [r5, #16]
    f220:	f01b fc62 	bl	2aae8 <z_log_msg_static_create.constprop.0>
    f224:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
    f226:	68a3      	ldr	r3, [r4, #8]
    f228:	46ad      	mov	sp, r5
    f22a:	4a1d      	ldr	r2, [pc, #116]	; (f2a0 <nvs_mount+0x3a8>)
    f22c:	f8c5 9010 	str.w	r9, [r5, #16]
    f230:	616a      	str	r2, [r5, #20]
    f232:	0c1a      	lsrs	r2, r3, #16
    f234:	b29b      	uxth	r3, r3
    f236:	61aa      	str	r2, [r5, #24]
    f238:	61eb      	str	r3, [r5, #28]
    f23a:	4632      	mov	r2, r6
    f23c:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f240:	4815      	ldr	r0, [pc, #84]	; (f298 <nvs_mount+0x3a0>)
    f242:	f01b fc51 	bl	2aae8 <z_log_msg_static_create.constprop.0>
	return 0;
    f246:	2500      	movs	r5, #0
    f248:	46c5      	mov	sp, r8
    f24a:	e672      	b.n	ef32 <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
    f24c:	4620      	mov	r0, r4
    f24e:	f01b fd25 	bl	2ac9c <nvs_add_gc_done_ate>
    f252:	4605      	mov	r5, r0
    f254:	4640      	mov	r0, r8
    f256:	f016 f811 	bl	2527c <z_impl_k_mutex_unlock>
	if (rc) {
    f25a:	2d00      	cmp	r5, #0
    f25c:	d0bb      	beq.n	f1d6 <nvs_mount+0x2de>
    f25e:	e668      	b.n	ef32 <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
    f260:	4b10      	ldr	r3, [pc, #64]	; (f2a4 <nvs_mount+0x3ac>)
    f262:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f266:	637b      	str	r3, [r7, #52]	; 0x34
    f268:	2302      	movs	r3, #2
    f26a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f26e:	633b      	str	r3, [r7, #48]	; 0x30
    f270:	4809      	ldr	r0, [pc, #36]	; (f298 <nvs_mount+0x3a0>)
    f272:	f01b fc39 	bl	2aae8 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f276:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    f278:	4639      	mov	r1, r7
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f27a:	0c1b      	lsrs	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    f27c:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f27e:	041b      	lsls	r3, r3, #16
    f280:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
    f282:	f01b fbb2 	bl	2a9ea <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    f286:	4620      	mov	r0, r4
    f288:	6839      	ldr	r1, [r7, #0]
    f28a:	f01b fc13 	bl	2aab4 <nvs_flash_erase_sector>
    f28e:	e726      	b.n	f0de <nvs_mount+0x1e6>
    f290:	ffff0000 	.word	0xffff0000
    f294:	0003394a 	.word	0x0003394a
    f298:	00031534 	.word	0x00031534
    f29c:	00033961 	.word	0x00033961
    f2a0:	00033973 	.word	0x00033973
    f2a4:	000339ab 	.word	0x000339ab

0000f2a8 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2ac:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    f2ae:	7c03      	ldrb	r3, [r0, #16]
{
    f2b0:	4604      	mov	r4, r0
    f2b2:	4689      	mov	r9, r1
    f2b4:	4690      	mov	r8, r2
    f2b6:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    f2b8:	b97b      	cbnz	r3, f2da <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
    f2ba:	4b66      	ldr	r3, [pc, #408]	; (f454 <nvs_write+0x1ac>)
		return -EACCES;
    f2bc:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
    f2c0:	930b      	str	r3, [sp, #44]	; 0x2c
    f2c2:	2302      	movs	r3, #2
    f2c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f2c8:	4863      	ldr	r0, [pc, #396]	; (f458 <nvs_write+0x1b0>)
    f2ca:	aa0a      	add	r2, sp, #40	; 0x28
    f2cc:	930a      	str	r3, [sp, #40]	; 0x28
    f2ce:	f01b fc0b 	bl	2aae8 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    f2d2:	4630      	mov	r0, r6
    f2d4:	b00d      	add	sp, #52	; 0x34
    f2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f2da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    f2dc:	2108      	movs	r1, #8
    f2de:	4610      	mov	r0, r2
    f2e0:	f01b fc05 	bl	2aaee <nvs_al_size.isra.0>
    f2e4:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    f2e6:	4629      	mov	r1, r5
    f2e8:	4610      	mov	r0, r2
    f2ea:	f01b fc00 	bl	2aaee <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f2ee:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    f2f0:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f2f2:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    f2f6:	42ab      	cmp	r3, r5
    f2f8:	f0c0 80a9 	bcc.w	f44e <nvs_write+0x1a6>
    f2fc:	b11d      	cbz	r5, f306 <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    f2fe:	f1b8 0f00 	cmp.w	r8, #0
    f302:	f000 80a4 	beq.w	f44e <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    f306:	6863      	ldr	r3, [r4, #4]
    f308:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f30a:	4620      	mov	r0, r4
    f30c:	aa04      	add	r2, sp, #16
    f30e:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    f310:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f314:	f01b fc2d 	bl	2ab72 <nvs_prev_ate>
		if (rc) {
    f318:	4606      	mov	r6, r0
    f31a:	2800      	cmp	r0, #0
    f31c:	d1d9      	bne.n	f2d2 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f31e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f322:	454b      	cmp	r3, r9
    f324:	d005      	beq.n	f332 <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    f326:	6862      	ldr	r2, [r4, #4]
    f328:	9b03      	ldr	r3, [sp, #12]
    f32a:	429a      	cmp	r2, r3
    f32c:	d1ed      	bne.n	f30a <nvs_write+0x62>
		if (len == 0) {
    f32e:	b9e5      	cbnz	r5, f36a <nvs_write+0xc2>
    f330:	e7cf      	b.n	f2d2 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f332:	4620      	mov	r0, r4
    f334:	a904      	add	r1, sp, #16
    f336:	f01b fbe4 	bl	2ab02 <nvs_ate_valid>
    f33a:	2800      	cmp	r0, #0
    f33c:	d0f3      	beq.n	f326 <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
    f33e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
    f342:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    f346:	b175      	cbz	r5, f366 <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    f348:	42ab      	cmp	r3, r5
    f34a:	d10e      	bne.n	f36a <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
    f34c:	ea4f 411b 	mov.w	r1, fp, lsr #16
    f350:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    f352:	4401      	add	r1, r0
    f354:	462b      	mov	r3, r5
    f356:	4642      	mov	r2, r8
    f358:	4620      	mov	r0, r4
    f35a:	f01b fb53 	bl	2aa04 <nvs_flash_block_cmp>
			if (rc <= 0) {
    f35e:	2800      	cmp	r0, #0
    f360:	dc03      	bgt.n	f36a <nvs_write+0xc2>
    f362:	4606      	mov	r6, r0
    f364:	e7b5      	b.n	f2d2 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    f366:	2b00      	cmp	r3, #0
    f368:	d0b3      	beq.n	f2d2 <nvs_write+0x2a>
	if (data_size) {
    f36a:	2f00      	cmp	r7, #0
    f36c:	d13e      	bne.n	f3ec <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    f36e:	f104 0314 	add.w	r3, r4, #20
    f372:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f374:	f04f 32ff 	mov.w	r2, #4294967295
    f378:	f04f 33ff 	mov.w	r3, #4294967295
    f37c:	f104 0014 	add.w	r0, r4, #20
    f380:	f015 feac 	bl	250dc <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    f384:	f8df b0d4 	ldr.w	fp, [pc, #212]	; f45c <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    f388:	89e3      	ldrh	r3, [r4, #14]
    f38a:	429e      	cmp	r6, r3
    f38c:	d05c      	beq.n	f448 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    f38e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f392:	18f9      	adds	r1, r7, r3
    f394:	428a      	cmp	r2, r1
    f396:	d32c      	bcc.n	f3f2 <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f398:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    f39c:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    f39e:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    f3a0:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    f3a4:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    f3a8:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
    f3ac:	f01b fb54 	bl	2aa58 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f3b0:	462b      	mov	r3, r5
    f3b2:	4642      	mov	r2, r8
    f3b4:	68a1      	ldr	r1, [r4, #8]
    f3b6:	4620      	mov	r0, r4
    f3b8:	f01b fc25 	bl	2ac06 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    f3bc:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f3be:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    f3c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3c2:	f01b fb94 	bl	2aaee <nvs_al_size.isra.0>
    f3c6:	68a2      	ldr	r2, [r4, #8]
    f3c8:	4402      	add	r2, r0
    f3ca:	60a2      	str	r2, [r4, #8]
	if (rc) {
    f3cc:	f1ba 0f00 	cmp.w	sl, #0
    f3d0:	d107      	bne.n	f3e2 <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
    f3d2:	4620      	mov	r0, r4
    f3d4:	a906      	add	r1, sp, #24
    f3d6:	f01b fc50 	bl	2ac7a <nvs_flash_ate_wrt>
	rc = len;
    f3da:	2800      	cmp	r0, #0
    f3dc:	bf14      	ite	ne
    f3de:	4682      	movne	sl, r0
    f3e0:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    f3e2:	9801      	ldr	r0, [sp, #4]
    f3e4:	f015 ff4a 	bl	2527c <z_impl_k_mutex_unlock>
	return rc;
    f3e8:	4656      	mov	r6, sl
    f3ea:	e772      	b.n	f2d2 <nvs_write+0x2a>
		required_space = data_size + ate_size;
    f3ec:	4457      	add	r7, sl
    f3ee:	b2bf      	uxth	r7, r7
    f3f0:	e7bd      	b.n	f36e <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f3f2:	2108      	movs	r1, #8
    f3f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3f6:	f01b fb7a 	bl	2aaee <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    f3fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f3fe:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    f402:	2300      	movs	r3, #0
    f404:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    f408:	1813      	adds	r3, r2, r0
    f40a:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    f40e:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    f410:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    f414:	441a      	add	r2, r3
    f416:	1a10      	subs	r0, r2, r0
    f418:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    f41a:	a806      	add	r0, sp, #24
    f41c:	f01b fb1c 	bl	2aa58 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    f420:	a906      	add	r1, sp, #24
    f422:	4620      	mov	r0, r4
    f424:	f01b fc29 	bl	2ac7a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    f428:	4620      	mov	r0, r4
    f42a:	1d21      	adds	r1, r4, #4
    f42c:	f01b fadd 	bl	2a9ea <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f430:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    f432:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f434:	ea03 030b 	and.w	r3, r3, fp
    f438:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f43a:	f01b fc44 	bl	2acc6 <nvs_gc>
		if (rc) {
    f43e:	4682      	mov	sl, r0
    f440:	2800      	cmp	r0, #0
    f442:	d1ce      	bne.n	f3e2 <nvs_write+0x13a>
		gc_count++;
    f444:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    f446:	e79f      	b.n	f388 <nvs_write+0xe0>
			rc = -ENOSPC;
    f448:	f06f 0a1b 	mvn.w	sl, #27
    f44c:	e7c9      	b.n	f3e2 <nvs_write+0x13a>
		return -EINVAL;
    f44e:	f06f 0615 	mvn.w	r6, #21
    f452:	e73e      	b.n	f2d2 <nvs_write+0x2a>
    f454:	000338a8 	.word	0x000338a8
    f458:	00031534 	.word	0x00031534
    f45c:	ffff0000 	.word	0xffff0000

0000f460 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    f460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f464:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    f466:	7c03      	ldrb	r3, [r0, #16]
{
    f468:	b088      	sub	sp, #32
    f46a:	4604      	mov	r4, r0
    f46c:	460f      	mov	r7, r1
    f46e:	4690      	mov	r8, r2
    f470:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    f474:	b973      	cbnz	r3, f494 <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
    f476:	4b2f      	ldr	r3, [pc, #188]	; (f534 <nvs_read_hist+0xd4>)
    f478:	482f      	ldr	r0, [pc, #188]	; (f538 <nvs_read_hist+0xd8>)
    f47a:	9307      	str	r3, [sp, #28]
    f47c:	2302      	movs	r3, #2
    f47e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f482:	aa06      	add	r2, sp, #24
    f484:	9306      	str	r3, [sp, #24]
    f486:	f01b fb2f 	bl	2aae8 <z_log_msg_static_create.constprop.0>
		return -EACCES;
    f48a:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    f48e:	b008      	add	sp, #32
    f490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f494:	2108      	movs	r1, #8
    f496:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f498:	f01b fb29 	bl	2aaee <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    f49c:	89a3      	ldrh	r3, [r4, #12]
    f49e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    f4a2:	42b3      	cmp	r3, r6
    f4a4:	d343      	bcc.n	f52e <nvs_read_hist+0xce>
	cnt_his = 0U;
    f4a6:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    f4a8:	f8d4 a004 	ldr.w	sl, [r4, #4]
    f4ac:	f8cd a004 	str.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f4b0:	454d      	cmp	r5, r9
    f4b2:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    f4b4:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f4b8:	d909      	bls.n	f4ce <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f4ba:	6863      	ldr	r3, [r4, #4]
    f4bc:	4553      	cmp	r3, sl
    f4be:	d11e      	bne.n	f4fe <nvs_read_hist+0x9e>
    f4c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f4c4:	42bb      	cmp	r3, r7
    f4c6:	d01a      	beq.n	f4fe <nvs_read_hist+0x9e>
		return -ENOENT;
    f4c8:	f06f 0001 	mvn.w	r0, #1
    f4cc:	e7df      	b.n	f48e <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f4ce:	4620      	mov	r0, r4
    f4d0:	aa02      	add	r2, sp, #8
    f4d2:	a901      	add	r1, sp, #4
    f4d4:	f01b fb4d 	bl	2ab72 <nvs_prev_ate>
		if (rc) {
    f4d8:	2800      	cmp	r0, #0
    f4da:	d1d8      	bne.n	f48e <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    f4dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f4e0:	42bb      	cmp	r3, r7
    f4e2:	d106      	bne.n	f4f2 <nvs_read_hist+0x92>
    f4e4:	4620      	mov	r0, r4
    f4e6:	a902      	add	r1, sp, #8
    f4e8:	f01b fb0b 	bl	2ab02 <nvs_ate_valid>
    f4ec:	b108      	cbz	r0, f4f2 <nvs_read_hist+0x92>
			cnt_his++;
    f4ee:	3501      	adds	r5, #1
    f4f0:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    f4f2:	6862      	ldr	r2, [r4, #4]
    f4f4:	9b01      	ldr	r3, [sp, #4]
    f4f6:	429a      	cmp	r2, r3
    f4f8:	d1da      	bne.n	f4b0 <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
    f4fa:	4651      	mov	r1, sl
    f4fc:	e7e0      	b.n	f4c0 <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f4fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f502:	2b00      	cmp	r3, #0
    f504:	d0e0      	beq.n	f4c8 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f506:	45a9      	cmp	r9, r5
    f508:	d8de      	bhi.n	f4c8 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
    f50a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    f50e:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f510:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    f512:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f516:	bf28      	it	cs
    f518:	4633      	movcs	r3, r6
    f51a:	4401      	add	r1, r0
    f51c:	4642      	mov	r2, r8
    f51e:	4620      	mov	r0, r4
    f520:	f01b fa55 	bl	2a9ce <nvs_flash_rd>
	if (rc) {
    f524:	2800      	cmp	r0, #0
    f526:	d1b2      	bne.n	f48e <nvs_read_hist+0x2e>
	return wlk_ate.len;
    f528:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    f52c:	e7af      	b.n	f48e <nvs_read_hist+0x2e>
		return -EINVAL;
    f52e:	f06f 0015 	mvn.w	r0, #21
    f532:	e7ac      	b.n	f48e <nvs_read_hist+0x2e>
    f534:	000338a8 	.word	0x000338a8
    f538:	00031534 	.word	0x00031534

0000f53c <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    f53c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    f53e:	b970      	cbnz	r0, f55e <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    f540:	4b12      	ldr	r3, [pc, #72]	; (f58c <ipc_service_open_instance+0x50>)
    f542:	4813      	ldr	r0, [pc, #76]	; (f590 <ipc_service_open_instance+0x54>)
    f544:	9305      	str	r3, [sp, #20]
    f546:	2302      	movs	r3, #2
    f548:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f54c:	aa04      	add	r2, sp, #16
    f54e:	9304      	str	r3, [sp, #16]
    f550:	f01b fc91 	bl	2ae76 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f554:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    f558:	b007      	add	sp, #28
    f55a:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    f55e:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    f560:	b963      	cbnz	r3, f57c <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    f562:	4b0c      	ldr	r3, [pc, #48]	; (f594 <ipc_service_open_instance+0x58>)
    f564:	480a      	ldr	r0, [pc, #40]	; (f590 <ipc_service_open_instance+0x54>)
    f566:	9305      	str	r3, [sp, #20]
    f568:	2302      	movs	r3, #2
    f56a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f56e:	aa04      	add	r2, sp, #16
    f570:	9304      	str	r3, [sp, #16]
    f572:	f01b fc80 	bl	2ae76 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f576:	f06f 0004 	mvn.w	r0, #4
    f57a:	e7ed      	b.n	f558 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    f57c:	681b      	ldr	r3, [r3, #0]
    f57e:	b11b      	cbz	r3, f588 <ipc_service_open_instance+0x4c>
}
    f580:	b007      	add	sp, #28
    f582:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    f586:	4718      	bx	r3
		return 0;
    f588:	4618      	mov	r0, r3
    f58a:	e7e5      	b.n	f558 <ipc_service_open_instance+0x1c>
    f58c:	000339c7 	.word	0x000339c7
    f590:	0003153c 	.word	0x0003153c
    f594:	000339d8 	.word	0x000339d8

0000f598 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    f598:	b530      	push	{r4, r5, lr}
    f59a:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    f59c:	b108      	cbz	r0, f5a2 <ipc_service_register_endpoint+0xa>
    f59e:	b101      	cbz	r1, f5a2 <ipc_service_register_endpoint+0xa>
    f5a0:	b96a      	cbnz	r2, f5be <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    f5a2:	4b13      	ldr	r3, [pc, #76]	; (f5f0 <ipc_service_register_endpoint+0x58>)
    f5a4:	4813      	ldr	r0, [pc, #76]	; (f5f4 <ipc_service_register_endpoint+0x5c>)
    f5a6:	9305      	str	r3, [sp, #20]
    f5a8:	2302      	movs	r3, #2
    f5aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5ae:	aa04      	add	r2, sp, #16
    f5b0:	9304      	str	r3, [sp, #16]
    f5b2:	f01b fc60 	bl	2ae76 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f5b6:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    f5ba:	b007      	add	sp, #28
    f5bc:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    f5be:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    f5c0:	b10c      	cbz	r4, f5c6 <ipc_service_register_endpoint+0x2e>
    f5c2:	68e5      	ldr	r5, [r4, #12]
    f5c4:	b965      	cbnz	r5, f5e0 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    f5c6:	4b0c      	ldr	r3, [pc, #48]	; (f5f8 <ipc_service_register_endpoint+0x60>)
    f5c8:	480a      	ldr	r0, [pc, #40]	; (f5f4 <ipc_service_register_endpoint+0x5c>)
    f5ca:	9305      	str	r3, [sp, #20]
    f5cc:	2302      	movs	r3, #2
    f5ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5d2:	aa04      	add	r2, sp, #16
    f5d4:	9304      	str	r3, [sp, #16]
    f5d6:	f01b fc4e 	bl	2ae76 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f5da:	f06f 0004 	mvn.w	r0, #4
    f5de:	e7ec      	b.n	f5ba <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    f5e0:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    f5e4:	68e3      	ldr	r3, [r4, #12]
}
    f5e6:	b007      	add	sp, #28
    f5e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    f5ec:	4718      	bx	r3
    f5ee:	bf00      	nop
    f5f0:	000339f6 	.word	0x000339f6
    f5f4:	0003153c 	.word	0x0003153c
    f5f8:	000339d8 	.word	0x000339d8

0000f5fc <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    f5fc:	b530      	push	{r4, r5, lr}
    f5fe:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    f600:	4604      	mov	r4, r0
{
    f602:	b087      	sub	sp, #28
	if (!ept) {
    f604:	b968      	cbnz	r0, f622 <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    f606:	4b1a      	ldr	r3, [pc, #104]	; (f670 <ipc_service_send+0x74>)
    f608:	481a      	ldr	r0, [pc, #104]	; (f674 <ipc_service_send+0x78>)
    f60a:	9305      	str	r3, [sp, #20]
    f60c:	2302      	movs	r3, #2
    f60e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f612:	aa04      	add	r2, sp, #16
    f614:	9304      	str	r3, [sp, #16]
    f616:	f01b fc2e 	bl	2ae76 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f61a:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    f61e:	b007      	add	sp, #28
    f620:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    f622:	6800      	ldr	r0, [r0, #0]
    f624:	b960      	cbnz	r0, f640 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    f626:	4b14      	ldr	r3, [pc, #80]	; (f678 <ipc_service_send+0x7c>)
    f628:	4812      	ldr	r0, [pc, #72]	; (f674 <ipc_service_send+0x78>)
    f62a:	9305      	str	r3, [sp, #20]
    f62c:	2302      	movs	r3, #2
    f62e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f632:	aa04      	add	r2, sp, #16
    f634:	9304      	str	r3, [sp, #16]
    f636:	f01b fc1e 	bl	2ae76 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    f63a:	f06f 0001 	mvn.w	r0, #1
    f63e:	e7ee      	b.n	f61e <ipc_service_send+0x22>
	backend = ept->instance->api;
    f640:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    f642:	b10a      	cbz	r2, f648 <ipc_service_send+0x4c>
    f644:	6895      	ldr	r5, [r2, #8]
    f646:	b965      	cbnz	r5, f662 <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    f648:	4b0c      	ldr	r3, [pc, #48]	; (f67c <ipc_service_send+0x80>)
    f64a:	480a      	ldr	r0, [pc, #40]	; (f674 <ipc_service_send+0x78>)
    f64c:	9305      	str	r3, [sp, #20]
    f64e:	2302      	movs	r3, #2
    f650:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f654:	aa04      	add	r2, sp, #16
    f656:	9304      	str	r3, [sp, #16]
    f658:	f01b fc0d 	bl	2ae76 <z_log_msg_static_create.constprop.0>
		return -EIO;
    f65c:	f06f 0004 	mvn.w	r0, #4
    f660:	e7dd      	b.n	f61e <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    f662:	460a      	mov	r2, r1
    f664:	46ac      	mov	ip, r5
    f666:	6861      	ldr	r1, [r4, #4]
}
    f668:	b007      	add	sp, #28
    f66a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    f66e:	4760      	bx	ip
    f670:	00033a22 	.word	0x00033a22
    f674:	0003153c 	.word	0x0003153c
    f678:	00033a33 	.word	0x00033a33
    f67c:	000339d8 	.word	0x000339d8

0000f680 <shared_memory_prepare>:
    f680:	2000      	movs	r0, #0
    f682:	4b01      	ldr	r3, [pc, #4]	; (f688 <shared_memory_prepare+0x8>)
    f684:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    f686:	4770      	bx	lr
    f688:	20070000 	.word	0x20070000

0000f68c <advertise_ept>:
{
    f68c:	b530      	push	{r4, r5, lr}
    f68e:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f690:	490e      	ldr	r1, [pc, #56]	; (f6cc <advertise_ept+0x40>)
{
    f692:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f694:	9102      	str	r1, [sp, #8]
    f696:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    f69a:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f69c:	e9cd 3100 	strd	r3, r1, [sp]
    f6a0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f6a4:	f04f 33ff 	mov.w	r3, #4294967295
    f6a8:	4620      	mov	r0, r4
    f6aa:	f014 fc6f 	bl	23f8c <rpmsg_create_ept>
	if (err != 0) {
    f6ae:	b950      	cbnz	r0, f6c6 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    f6b0:	2301      	movs	r3, #1
    f6b2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    f6b6:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    f6ba:	b123      	cbz	r3, f6c6 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    f6bc:	4620      	mov	r0, r4
}
    f6be:	b005      	add	sp, #20
    f6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    f6c4:	4718      	bx	r3
}
    f6c6:	b005      	add	sp, #20
    f6c8:	bd30      	pop	{r4, r5, pc}
    f6ca:	bf00      	nop
    f6cc:	0002af6d 	.word	0x0002af6d

0000f6d0 <get_ept>:
{
    f6d0:	b538      	push	{r3, r4, r5, lr}
    f6d2:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f6d4:	4611      	mov	r1, r2
{
    f6d6:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f6d8:	f01b fc4a 	bl	2af70 <get_ept_slot_with_name>
	if (ept != NULL) {
    f6dc:	4603      	mov	r3, r0
    f6de:	b938      	cbnz	r0, f6f0 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f6e0:	4628      	mov	r0, r5
    f6e2:	4904      	ldr	r1, [pc, #16]	; (f6f4 <get_ept+0x24>)
    f6e4:	f01b fc44 	bl	2af70 <get_ept_slot_with_name>
    f6e8:	4603      	mov	r3, r0
	if (ept != NULL) {
    f6ea:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    f6ec:	6023      	str	r3, [r4, #0]
}
    f6ee:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    f6f0:	2001      	movs	r0, #1
    f6f2:	e7fb      	b.n	f6ec <get_ept+0x1c>
    f6f4:	0003688b 	.word	0x0003688b

0000f6f8 <open>:
{
    f6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f6fc:	2301      	movs	r3, #1
    f6fe:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    f700:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f702:	6846      	ldr	r6, [r0, #4]
{
    f704:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    f706:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f70a:	e8d7 2fef 	ldaex	r2, [r7]
    f70e:	2a00      	cmp	r2, #0
    f710:	d103      	bne.n	f71a <open+0x22>
    f712:	e8c7 3fe1 	stlex	r1, r3, [r7]
    f716:	2900      	cmp	r1, #0
    f718:	d1f7      	bne.n	f70a <open+0x12>
    f71a:	f040 80b8 	bne.w	f88e <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    f71e:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f720:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    f722:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f724:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    f726:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    f72a:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    f72e:	bf26      	itte	cs
    f730:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    f734:	fab3 f383 	clzcs	r3, r3
		return 0;
    f738:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    f73a:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    f73e:	bf28      	it	cs
    f740:	f1c3 0320 	rsbcs	r3, r3, #32
    f744:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    f746:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    f748:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    f74c:	f000 8099 	beq.w	f882 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    f750:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f752:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    f754:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    f756:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    f758:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    f75c:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f75e:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    f760:	3209      	adds	r2, #9
    f762:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    f766:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    f768:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    f76c:	440a      	add	r2, r1
	return (buf_size * num);
    f76e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f770:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    f774:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    f776:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    f77a:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    f77e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f780:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    f782:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    f786:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    f78a:	3303      	adds	r3, #3
    f78c:	4413      	add	r3, r2
    f78e:	f023 0303 	bic.w	r3, r3, #3
    f792:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    f796:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    f798:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    f79c:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    f7a0:	4b3c      	ldr	r3, [pc, #240]	; (f894 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f7a2:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    f7a4:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f7a8:	6831      	ldr	r1, [r6, #0]
    f7aa:	f000 fa1d 	bl	fbe8 <ipc_static_vrings_init>
	if (err != 0) {
    f7ae:	4604      	mov	r4, r0
    f7b0:	bb30      	cbnz	r0, f800 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    f7b2:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    f7b6:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f7ba:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    f7be:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f7c2:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    f7c4:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f7c6:	bf08      	it	eq
    f7c8:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    f7ca:	f016 fa5d 	bl	25c88 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    f7ce:	2300      	movs	r3, #0
    f7d0:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    f7d4:	4930      	ldr	r1, [pc, #192]	; (f898 <open+0x1a0>)
    f7d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f7da:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    f7de:	9300      	str	r3, [sp, #0]
    f7e0:	4658      	mov	r0, fp
    f7e2:	4623      	mov	r3, r4
    f7e4:	f016 fa6a 	bl	25cbc <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    f7e8:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    f7ec:	492b      	ldr	r1, [pc, #172]	; (f89c <open+0x1a4>)
    f7ee:	f016 f97f 	bl	25af0 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    f7f2:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    f7f6:	6883      	ldr	r3, [r0, #8]
    f7f8:	685c      	ldr	r4, [r3, #4]
    f7fa:	b91c      	cbnz	r4, f804 <open+0x10c>
		return -ENOSYS;
    f7fc:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    f800:	2100      	movs	r1, #0
    f802:	e037      	b.n	f874 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f804:	464b      	mov	r3, r9
    f806:	4a26      	ldr	r2, [pc, #152]	; (f8a0 <open+0x1a8>)
    f808:	f8da 1018 	ldr.w	r1, [sl, #24]
    f80c:	47a0      	blx	r4
	if (err != 0) {
    f80e:	4604      	mov	r4, r0
    f810:	2800      	cmp	r0, #0
    f812:	d1f5      	bne.n	f800 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    f814:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    f818:	6883      	ldr	r3, [r0, #8]
    f81a:	691b      	ldr	r3, [r3, #16]
    f81c:	2b00      	cmp	r3, #0
    f81e:	d0ed      	beq.n	f7fc <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    f820:	2201      	movs	r2, #1
    f822:	f8da 1018 	ldr.w	r1, [sl, #24]
    f826:	4798      	blx	r3
	if (err != 0) {
    f828:	4604      	mov	r4, r0
    f82a:	2800      	cmp	r0, #0
    f82c:	d1e8      	bne.n	f800 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    f82e:	4b1d      	ldr	r3, [pc, #116]	; (f8a4 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f830:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    f832:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    f836:	4b1c      	ldr	r3, [pc, #112]	; (f8a8 <open+0x1b0>)
    f838:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f83c:	4b1b      	ldr	r3, [pc, #108]	; (f8ac <open+0x1b4>)
    f83e:	9303      	str	r3, [sp, #12]
    f840:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    f844:	9302      	str	r3, [sp, #8]
    f846:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    f84a:	e9cd 8300 	strd	r8, r3, [sp]
    f84e:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    f852:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    f854:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f858:	f000 f98e 	bl	fb78 <ipc_rpmsg_init>
	if (err != 0) {
    f85c:	4604      	mov	r4, r0
    f85e:	2800      	cmp	r0, #0
    f860:	d1ce      	bne.n	f800 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f862:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    f866:	f014 fd35 	bl	242d4 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    f86a:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f86c:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    f870:	db0a      	blt.n	f888 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    f872:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    f874:	4638      	mov	r0, r7
    f876:	f01b fbb0 	bl	2afda <atomic_set.isra.0>
}
    f87a:	4620      	mov	r0, r4
    f87c:	b005      	add	sp, #20
    f87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f882:	f06f 040b 	mvn.w	r4, #11
    f886:	e7bb      	b.n	f800 <open+0x108>
		err = -EINVAL;
    f888:	f06f 0415 	mvn.w	r4, #21
    f88c:	e7b8      	b.n	f800 <open+0x108>
		return -EALREADY;
    f88e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f892:	e7f2      	b.n	f87a <open+0x182>
    f894:	0002afc3 	.word	0x0002afc3
    f898:	20031e88 	.word	0x20031e88
    f89c:	0002afa9 	.word	0x0002afa9
    f8a0:	0002af9d 	.word	0x0002af9d
    f8a4:	0000f975 	.word	0x0000f975
    f8a8:	0002b07b 	.word	0x0002b07b
    f8ac:	0002b00b 	.word	0x0002b00b

0000f8b0 <close>:
{
    f8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8b4:	4606      	mov	r6, r0
    f8b6:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    f8ba:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f8bc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    f8c0:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f8c4:	e8d7 3fef 	ldaex	r3, [r7]
    f8c8:	2b02      	cmp	r3, #2
    f8ca:	d103      	bne.n	f8d4 <close+0x24>
    f8cc:	e8c7 9fe2 	stlex	r2, r9, [r7]
    f8d0:	2a00      	cmp	r2, #0
    f8d2:	d1f7      	bne.n	f8c4 <close+0x14>
    f8d4:	d149      	bne.n	f96a <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    f8d6:	4826      	ldr	r0, [pc, #152]	; (f970 <close+0xc0>)
    f8d8:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f8dc:	f7f9 fd49 	bl	9372 <strcmp>
    f8e0:	b120      	cbz	r0, f8ec <close+0x3c>
		return -EBUSY;
    f8e2:	f06f 040f 	mvn.w	r4, #15
}
    f8e6:	4620      	mov	r0, r4
    f8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    f8ec:	4820      	ldr	r0, [pc, #128]	; (f970 <close+0xc0>)
    f8ee:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    f8f2:	f7f9 fd3e 	bl	9372 <strcmp>
    f8f6:	2800      	cmp	r0, #0
    f8f8:	d1f3      	bne.n	f8e2 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    f8fa:	4628      	mov	r0, r5
    f8fc:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f900:	f01b fbee 	bl	2b0e0 <ipc_rpmsg_deinit>
	if (err != 0) {
    f904:	4604      	mov	r4, r0
    f906:	bb70      	cbnz	r0, f966 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    f908:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    f90a:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    f90c:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    f90e:	6883      	ldr	r3, [r0, #8]
    f910:	691b      	ldr	r3, [r3, #16]
    f912:	b333      	cbz	r3, f962 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    f914:	4622      	mov	r2, r4
    f916:	6989      	ldr	r1, [r1, #24]
    f918:	4798      	blx	r3
	if (err != 0) {
    f91a:	4604      	mov	r4, r0
    f91c:	bb18      	cbnz	r0, f966 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    f91e:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    f922:	4649      	mov	r1, r9
    f924:	4630      	mov	r0, r6
    f926:	f016 fa31 	bl	25d8c <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    f92a:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    f92c:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    f930:	f001 fd68 	bl	11404 <z_impl_k_thread_abort>
    f934:	4630      	mov	r0, r6
    f936:	f8d8 1000 	ldr.w	r1, [r8]
    f93a:	f01b fc0e 	bl	2b15a <ipc_static_vrings_deinit>
	if (err != 0) {
    f93e:	4604      	mov	r4, r0
    f940:	b988      	cbnz	r0, f966 <close+0xb6>
    f942:	4601      	mov	r1, r0
    f944:	22e8      	movs	r2, #232	; 0xe8
    f946:	4630      	mov	r0, r6
    f948:	f020 fe37 	bl	305ba <memset>
    f94c:	4621      	mov	r1, r4
    f94e:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    f952:	4628      	mov	r0, r5
    f954:	f020 fe31 	bl	305ba <memset>
	atomic_set(&data->state, STATE_READY);
    f958:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    f95a:	4638      	mov	r0, r7
    f95c:	f01b fb3d 	bl	2afda <atomic_set.isra.0>
	return err;
    f960:	e7c1      	b.n	f8e6 <close+0x36>
		return -ENOSYS;
    f962:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    f966:	2102      	movs	r1, #2
    f968:	e7f7      	b.n	f95a <close+0xaa>
		return -EALREADY;
    f96a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f96e:	e7ba      	b.n	f8e6 <close+0x36>
    f970:	0003688b 	.word	0x0003688b

0000f974 <bound_cb>:
{
    f974:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    f976:	4604      	mov	r4, r0
    f978:	b140      	cbz	r0, f98c <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    f97a:	2300      	movs	r3, #0
    f97c:	2201      	movs	r2, #1
    f97e:	e9cd 3200 	strd	r3, r2, [sp]
    f982:	4b07      	ldr	r3, [pc, #28]	; (f9a0 <bound_cb+0x2c>)
    f984:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f988:	f014 fab4 	bl	23ef4 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    f98c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f98e:	681b      	ldr	r3, [r3, #0]
    f990:	b123      	cbz	r3, f99c <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    f992:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    f994:	b002      	add	sp, #8
    f996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    f99a:	4718      	bx	r3
}
    f99c:	b002      	add	sp, #8
    f99e:	bd10      	pop	{r4, pc}
    f9a0:	0003688b 	.word	0x0003688b

0000f9a4 <send>:
{
    f9a4:	b513      	push	{r0, r1, r4, lr}
    f9a6:	4604      	mov	r4, r0
    f9a8:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f9aa:	6921      	ldr	r1, [r4, #16]
    f9ac:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    f9b0:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    f9b4:	2902      	cmp	r1, #2
    f9b6:	d110      	bne.n	f9da <send+0x36>
	if (len == 0) {
    f9b8:	b193      	cbz	r3, f9e0 <send+0x3c>
	if (!rpmsg_ept) {
    f9ba:	b1a0      	cbz	r0, f9e6 <send+0x42>
    f9bc:	2101      	movs	r1, #1
    f9be:	e9cd 3100 	strd	r3, r1, [sp]
    f9c2:	4613      	mov	r3, r2
    f9c4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f9c8:	f014 fa94 	bl	23ef4 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    f9cc:	4b07      	ldr	r3, [pc, #28]	; (f9ec <send+0x48>)
		return -ENOMEM;
    f9ce:	4298      	cmp	r0, r3
    f9d0:	bf08      	it	eq
    f9d2:	f06f 000b 	mvneq.w	r0, #11
}
    f9d6:	b002      	add	sp, #8
    f9d8:	bd10      	pop	{r4, pc}
		return -EBUSY;
    f9da:	f06f 000f 	mvn.w	r0, #15
    f9de:	e7fa      	b.n	f9d6 <send+0x32>
		return -EBADMSG;
    f9e0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f9e4:	e7f7      	b.n	f9d6 <send+0x32>
		return -ENOENT;
    f9e6:	f06f 0001 	mvn.w	r0, #1
    f9ea:	e7f4      	b.n	f9d6 <send+0x32>
    f9ec:	fffff82e 	.word	0xfffff82e

0000f9f0 <register_ept>:
{
    f9f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f9f4:	4688      	mov	r8, r1
    f9f6:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    f9f8:	6906      	ldr	r6, [r0, #16]
    f9fa:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    f9fe:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    fa02:	2b02      	cmp	r3, #2
    fa04:	d15f      	bne.n	fac6 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    fa06:	6813      	ldr	r3, [r2, #0]
    fa08:	b923      	cbnz	r3, fa14 <register_ept+0x24>
		return -EINVAL;
    fa0a:	f06f 0015 	mvn.w	r0, #21
}
    fa0e:	b003      	add	sp, #12
    fa10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    fa14:	781b      	ldrb	r3, [r3, #0]
    fa16:	2b00      	cmp	r3, #0
    fa18:	d0f7      	beq.n	fa0a <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    fa1a:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    fa1e:	f1b9 0f00 	cmp.w	r9, #0
    fa22:	d133      	bne.n	fa8c <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    fa24:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    fa28:	f04f 32ff 	mov.w	r2, #4294967295
    fa2c:	f04f 33ff 	mov.w	r3, #4294967295
    fa30:	4638      	mov	r0, r7
    fa32:	f015 fb53 	bl	250dc <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    fa36:	4630      	mov	r0, r6
    fa38:	682a      	ldr	r2, [r5, #0]
    fa3a:	a901      	add	r1, sp, #4
    fa3c:	f7ff fe48 	bl	f6d0 <get_ept>
	if (rpmsg_ept == NULL) {
    fa40:	9c01      	ldr	r4, [sp, #4]
    fa42:	b91c      	cbnz	r4, fa4c <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fa44:	4638      	mov	r0, r7
    fa46:	f01b fac6 	bl	2afd6 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    fa4a:	e7de      	b.n	fa0a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    fa4c:	f105 0308 	add.w	r3, r5, #8
    fa50:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    fa52:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    fa54:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    fa58:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    fa5a:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    fa5c:	b160      	cbz	r0, fa78 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fa5e:	4638      	mov	r0, r7
    fa60:	f01b fab9 	bl	2afd6 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    fa64:	4621      	mov	r1, r4
    fa66:	4630      	mov	r0, r6
    fa68:	6e23      	ldr	r3, [r4, #96]	; 0x60
    fa6a:	682a      	ldr	r2, [r5, #0]
    fa6c:	f7ff fe0e 	bl	f68c <advertise_ept>
	return 0;
    fa70:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    fa72:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    fa76:	e7ca      	b.n	fa0e <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    fa78:	2220      	movs	r2, #32
    fa7a:	6829      	ldr	r1, [r5, #0]
    fa7c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fa80:	f020 fefb 	bl	3087a <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fa84:	4638      	mov	r0, r7
    fa86:	f01b faa6 	bl	2afd6 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    fa8a:	e7f1      	b.n	fa70 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    fa8c:	4630      	mov	r0, r6
    fa8e:	490f      	ldr	r1, [pc, #60]	; (facc <register_ept+0xdc>)
    fa90:	f01b fa6e 	bl	2af70 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    fa94:	4604      	mov	r4, r0
    fa96:	2800      	cmp	r0, #0
    fa98:	d0b7      	beq.n	fa0a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    fa9a:	f105 0308 	add.w	r3, r5, #8
    fa9e:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    faa0:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    faa2:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    faa4:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    faa6:	2300      	movs	r3, #0
    faa8:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    faac:	2220      	movs	r2, #32
    faae:	6829      	ldr	r1, [r5, #0]
    fab0:	3040      	adds	r0, #64	; 0x40
    fab2:	f020 fee2 	bl	3087a <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    fab6:	4622      	mov	r2, r4
    fab8:	2101      	movs	r1, #1
    faba:	4630      	mov	r0, r6
    fabc:	f000 f83e 	bl	fb3c <ipc_rpmsg_register_ept>
	if (err != 0) {
    fac0:	2800      	cmp	r0, #0
    fac2:	d0d5      	beq.n	fa70 <register_ept+0x80>
    fac4:	e7a1      	b.n	fa0a <register_ept+0x1a>
		return -EBUSY;
    fac6:	f06f 000f 	mvn.w	r0, #15
    faca:	e7a0      	b.n	fa0e <register_ept+0x1e>
    facc:	0003688b 	.word	0x0003688b

0000fad0 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fad4:	4605      	mov	r5, r0
    fad6:	460e      	mov	r6, r1
    fad8:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fada:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    fadc:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    fae0:	b085      	sub	sp, #20
    fae2:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    fae6:	4621      	mov	r1, r4
    fae8:	4630      	mov	r0, r6
    faea:	f7f9 fc42 	bl	9372 <strcmp>
    faee:	b9e0      	cbnz	r0, fb2a <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    faf0:	4b11      	ldr	r3, [pc, #68]	; (fb38 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    faf2:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    faf6:	9302      	str	r3, [sp, #8]
    faf8:	f8da 3010 	ldr.w	r3, [sl, #16]
    fafc:	4632      	mov	r2, r6
    fafe:	e9cd 8300 	strd	r8, r3, [sp]
    fb02:	4629      	mov	r1, r5
    fb04:	f04f 33ff 	mov.w	r3, #4294967295
    fb08:	4658      	mov	r0, fp
    fb0a:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    fb0e:	f014 fa3d 	bl	23f8c <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    fb12:	b960      	cbnz	r0, fb2e <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    fb14:	2370      	movs	r3, #112	; 0x70
    fb16:	2201      	movs	r2, #1
    fb18:	fb03 9307 	mla	r3, r3, r7, r9
    fb1c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    fb20:	f8da 300c 	ldr.w	r3, [sl, #12]
    fb24:	b10b      	cbz	r3, fb2a <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    fb26:	4658      	mov	r0, fp
    fb28:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fb2a:	3470      	adds	r4, #112	; 0x70
    fb2c:	b117      	cbz	r7, fb34 <ns_bind_cb+0x64>
			}
		}
	}
}
    fb2e:	b005      	add	sp, #20
    fb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fb34:	2701      	movs	r7, #1
    fb36:	e7d6      	b.n	fae6 <ns_bind_cb+0x16>
    fb38:	0002b0dd 	.word	0x0002b0dd

0000fb3c <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    fb3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fb3e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    fb40:	b190      	cbz	r0, fb68 <ipc_rpmsg_register_ept+0x2c>
    fb42:	b18a      	cbz	r2, fb68 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    fb44:	2901      	cmp	r1, #1
    fb46:	d112      	bne.n	fb6e <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    fb48:	4b0a      	ldr	r3, [pc, #40]	; (fb74 <ipc_rpmsg_register_ept+0x38>)
    fb4a:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    fb4e:	9302      	str	r3, [sp, #8]
    fb50:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    fb54:	3240      	adds	r2, #64	; 0x40
    fb56:	9301      	str	r3, [sp, #4]
    fb58:	f04f 33ff 	mov.w	r3, #4294967295
    fb5c:	4620      	mov	r0, r4
    fb5e:	9300      	str	r3, [sp, #0]
    fb60:	f014 fa14 	bl	23f8c <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    fb64:	b004      	add	sp, #16
    fb66:	bd10      	pop	{r4, pc}
		return -EINVAL;
    fb68:	f06f 0015 	mvn.w	r0, #21
    fb6c:	e7fa      	b.n	fb64 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    fb6e:	2000      	movs	r0, #0
    fb70:	e7f8      	b.n	fb64 <ipc_rpmsg_register_ept+0x28>
    fb72:	bf00      	nop
    fb74:	0002b0dd 	.word	0x0002b0dd

0000fb78 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    fb78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fb7c:	b087      	sub	sp, #28
    fb7e:	460e      	mov	r6, r1
    fb80:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    fb84:	4614      	mov	r4, r2
    fb86:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    fb8a:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    fb8c:	b330      	cbz	r0, fbdc <ipc_rpmsg_init+0x64>
    fb8e:	b329      	cbz	r1, fbdc <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    fb90:	f8df c050 	ldr.w	ip, [pc, #80]	; fbe4 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    fb94:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    fb98:	2d00      	cmp	r5, #0
    fb9a:	bf08      	it	eq
    fb9c:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    fb9e:	b99e      	cbnz	r6, fbc8 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    fba0:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    fba4:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    fba8:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    fbaa:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    fbac:	f020 fa64 	bl	30078 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    fbb0:	ab03      	add	r3, sp, #12
    fbb2:	e9cd 4300 	strd	r4, r3, [sp]
    fbb6:	462a      	mov	r2, r5
    fbb8:	463b      	mov	r3, r7
    fbba:	4641      	mov	r1, r8
    fbbc:	4648      	mov	r0, r9
    fbbe:	f014 fbaf 	bl	24320 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    fbc2:	b007      	add	sp, #28
    fbc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    fbc8:	2200      	movs	r2, #0
    fbca:	4641      	mov	r1, r8
    fbcc:	920e      	str	r2, [sp, #56]	; 0x38
    fbce:	4648      	mov	r0, r9
    fbd0:	462a      	mov	r2, r5
}
    fbd2:	b007      	add	sp, #28
    fbd4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    fbd8:	f014 bccc 	b.w	24574 <rpmsg_init_vdev>
		return -EINVAL;
    fbdc:	f06f 0015 	mvn.w	r0, #21
    fbe0:	e7ef      	b.n	fbc2 <ipc_rpmsg_init+0x4a>
    fbe2:	bf00      	nop
    fbe4:	0000fad1 	.word	0x0000fad1

0000fbe8 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbea:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    fbec:	4604      	mov	r4, r0
{
    fbee:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    fbf0:	2800      	cmp	r0, #0
    fbf2:	d06f      	beq.n	fcd4 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    fbf4:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    fbf6:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    fbf8:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fbfa:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    fbfc:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    fc00:	4f36      	ldr	r7, [pc, #216]	; (fcdc <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fc02:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    fc04:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    fc08:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fc0c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    fc10:	f04f 33ff 	mov.w	r3, #4294967295
    fc14:	9300      	str	r3, [sp, #0]
    fc16:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    fc18:	f01f f83f 	bl	2ec9a <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    fc1c:	4a30      	ldr	r2, [pc, #192]	; (fce0 <ipc_static_vrings_init+0xf8>)
    fc1e:	ab06      	add	r3, sp, #24
    fc20:	e892 0003 	ldmia.w	r2, {r0, r1}
    fc24:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    fc28:	4618      	mov	r0, r3
    fc2a:	f010 fe95 	bl	20958 <metal_init>
	if (err != 0) {
    fc2e:	4605      	mov	r5, r0
    fc30:	b9d8      	cbnz	r0, fc6a <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    fc32:	f104 0034 	add.w	r0, r4, #52	; 0x34
    fc36:	f010 fe6f 	bl	20918 <metal_register_generic_device>
	if (err != 0) {
    fc3a:	4605      	mov	r5, r0
    fc3c:	b9a8      	cbnz	r0, fc6a <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    fc3e:	4639      	mov	r1, r7
    fc40:	4828      	ldr	r0, [pc, #160]	; (fce4 <ipc_static_vrings_init+0xfc>)
    fc42:	aa05      	add	r2, sp, #20
    fc44:	f01f f801 	bl	2ec4a <metal_device_open>
	if (err != 0) {
    fc48:	4605      	mov	r5, r0
    fc4a:	b970      	cbnz	r0, fc6a <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    fc4c:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    fc4e:	689a      	ldr	r2, [r3, #8]
    fc50:	b172      	cbz	r2, fc70 <ipc_static_vrings_init+0x88>
    fc52:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fc54:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    fc58:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fc5c:	f01b fa6f 	bl	2b13e <virtqueue_allocate>
    fc60:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    fc64:	b930      	cbnz	r0, fc74 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    fc66:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    fc6a:	4628      	mov	r0, r5
    fc6c:	b009      	add	sp, #36	; 0x24
    fc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc70:	4603      	mov	r3, r0
    fc72:	e7ef      	b.n	fc54 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    fc74:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    fc78:	f01b fa61 	bl	2b13e <virtqueue_allocate>
    fc7c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    fc80:	2800      	cmp	r0, #0
    fc82:	d0f0      	beq.n	fc66 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fc84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fc88:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fc8c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    fc90:	2304      	movs	r3, #4
    fc92:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    fc96:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    fc9a:	2302      	movs	r3, #2
    fc9c:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    fc9e:	4b12      	ldr	r3, [pc, #72]	; (fce8 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fca0:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fca4:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fca8:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    fcac:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fcb0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    fcb4:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fcb6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fcba:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fcbe:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fcc2:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    fcc6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    fcca:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    fcce:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fcd0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    fcd2:	e7ca      	b.n	fc6a <ipc_static_vrings_init+0x82>
		return -EINVAL;
    fcd4:	f06f 0515 	mvn.w	r5, #21
    fcd8:	e7c7      	b.n	fc6a <ipc_static_vrings_init+0x82>
    fcda:	bf00      	nop
    fcdc:	00033a5d 	.word	0x00033a5d
    fce0:	00031664 	.word	0x00031664
    fce4:	00033a67 	.word	0x00033a67
    fce8:	00031ba8 	.word	0x00031ba8

0000fcec <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    fcec:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    fcee:	4b11      	ldr	r3, [pc, #68]	; (fd34 <flash_area_open+0x48>)
{
    fcf0:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    fcf2:	681c      	ldr	r4, [r3, #0]
    fcf4:	b1dc      	cbz	r4, fd2e <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    fcf6:	4b10      	ldr	r3, [pc, #64]	; (fd38 <flash_area_open+0x4c>)
    fcf8:	6819      	ldr	r1, [r3, #0]
    fcfa:	2300      	movs	r3, #0
    fcfc:	428b      	cmp	r3, r1
    fcfe:	db02      	blt.n	fd06 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    fd00:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    fd04:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    fd06:	4622      	mov	r2, r4
    fd08:	f812 6b10 	ldrb.w	r6, [r2], #16
    fd0c:	4286      	cmp	r6, r0
    fd0e:	d002      	beq.n	fd16 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    fd10:	4614      	mov	r4, r2
    fd12:	3301      	adds	r3, #1
    fd14:	e7f2      	b.n	fcfc <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fd16:	68e0      	ldr	r0, [r4, #12]
    fd18:	b910      	cbnz	r0, fd20 <flash_area_open+0x34>
		return -ENODEV;
    fd1a:	f06f 0012 	mvn.w	r0, #18
    fd1e:	e7f1      	b.n	fd04 <flash_area_open+0x18>
    fd20:	f020 f9c7 	bl	300b2 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fd24:	2800      	cmp	r0, #0
    fd26:	d0f8      	beq.n	fd1a <flash_area_open+0x2e>
	return 0;
    fd28:	2000      	movs	r0, #0
	*fap = area;
    fd2a:	602c      	str	r4, [r5, #0]
	return 0;
    fd2c:	e7ea      	b.n	fd04 <flash_area_open+0x18>
		return -EACCES;
    fd2e:	f06f 000c 	mvn.w	r0, #12
    fd32:	e7e7      	b.n	fd04 <flash_area_open+0x18>
    fd34:	2000846c 	.word	0x2000846c
    fd38:	00031c44 	.word	0x00031c44

0000fd3c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    fd3c:	b570      	push	{r4, r5, r6, lr}
    fd3e:	b088      	sub	sp, #32
    fd40:	4605      	mov	r5, r0
    fd42:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    fd44:	b2c0      	uxtb	r0, r0
    fd46:	4669      	mov	r1, sp
{
    fd48:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    fd4a:	f7ff ffcf 	bl	fcec <flash_area_open>
	if (rc < 0 || fa == NULL) {
    fd4e:	2800      	cmp	r0, #0
    fd50:	db1b      	blt.n	fd8a <flash_area_get_sectors+0x4e>
    fd52:	9800      	ldr	r0, [sp, #0]
    fd54:	b1c8      	cbz	r0, fd8a <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    fd56:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    fd58:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    fd5a:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    fd5c:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    fd5e:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    fd60:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    fd64:	2300      	movs	r3, #0
	cb_data->status = 0;
    fd66:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    fd6a:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    fd6c:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    fd6e:	f01b fa24 	bl	2b1ba <flash_area_close>
	if (flash_dev == NULL) {
    fd72:	b16d      	cbz	r5, fd90 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    fd74:	4628      	mov	r0, r5
    fd76:	4908      	ldr	r1, [pc, #32]	; (fd98 <flash_area_get_sectors+0x5c>)
    fd78:	aa01      	add	r2, sp, #4
    fd7a:	f01e fad4 	bl	2e326 <flash_page_foreach>
	if (cb_data->status == 0) {
    fd7e:	9807      	ldr	r0, [sp, #28]
    fd80:	b908      	cbnz	r0, fd86 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    fd82:	9b05      	ldr	r3, [sp, #20]
    fd84:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    fd86:	b008      	add	sp, #32
    fd88:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    fd8a:	f06f 0015 	mvn.w	r0, #21
    fd8e:	e7fa      	b.n	fd86 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    fd90:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    fd94:	e7f7      	b.n	fd86 <flash_area_get_sectors+0x4a>
    fd96:	bf00      	nop
    fd98:	0002b23d 	.word	0x0002b23d

0000fd9c <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
    fd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    fda0:	4b0f      	ldr	r3, [pc, #60]	; (fde0 <settings_save_one+0x44>)
{
    fda2:	4605      	mov	r5, r0
	cs = settings_save_dst;
    fda4:	681c      	ldr	r4, [r3, #0]
{
    fda6:	460e      	mov	r6, r1
    fda8:	4617      	mov	r7, r2
	if (!cs) {
    fdaa:	b1ac      	cbz	r4, fdd8 <settings_save_one+0x3c>
    fdac:	f04f 32ff 	mov.w	r2, #4294967295
    fdb0:	f04f 33ff 	mov.w	r3, #4294967295
    fdb4:	480b      	ldr	r0, [pc, #44]	; (fde4 <settings_save_one+0x48>)
    fdb6:	f015 f991 	bl	250dc <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    fdba:	6863      	ldr	r3, [r4, #4]
    fdbc:	4632      	mov	r2, r6
    fdbe:	f8d3 8008 	ldr.w	r8, [r3, #8]
    fdc2:	4629      	mov	r1, r5
    fdc4:	463b      	mov	r3, r7
    fdc6:	4620      	mov	r0, r4
    fdc8:	47c0      	blx	r8
    fdca:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fdcc:	4805      	ldr	r0, [pc, #20]	; (fde4 <settings_save_one+0x48>)
    fdce:	f015 fa55 	bl	2527c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    fdd2:	4620      	mov	r0, r4
    fdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    fdd8:	f06f 0401 	mvn.w	r4, #1
    fddc:	e7f9      	b.n	fdd2 <settings_save_one+0x36>
    fdde:	bf00      	nop
    fde0:	200214a8 	.word	0x200214a8
    fde4:	20008b7c 	.word	0x20008b7c

0000fde8 <settings_src_register>:
	parent->next = child;
    fde8:	2300      	movs	r3, #0
    fdea:	6003      	str	r3, [r0, #0]
	return list->tail;
    fdec:	4b04      	ldr	r3, [pc, #16]	; (fe00 <settings_src_register+0x18>)
    fdee:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    fdf0:	b912      	cbnz	r2, fdf8 <settings_src_register+0x10>
	list->head = node;
    fdf2:	e9c3 0000 	strd	r0, r0, [r3]
}
    fdf6:	4770      	bx	lr
	parent->next = child;
    fdf8:	6010      	str	r0, [r2, #0]
	list->tail = node;
    fdfa:	6058      	str	r0, [r3, #4]
}
    fdfc:	4770      	bx	lr
    fdfe:	bf00      	nop
    fe00:	200214ac 	.word	0x200214ac

0000fe04 <settings_dst_register>:
	settings_save_dst = cs;
    fe04:	4b01      	ldr	r3, [pc, #4]	; (fe0c <settings_dst_register+0x8>)
    fe06:	6018      	str	r0, [r3, #0]
}
    fe08:	4770      	bx	lr
    fe0a:	bf00      	nop
    fe0c:	200214a8 	.word	0x200214a8

0000fe10 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    fe10:	2300      	movs	r3, #0
{
    fe12:	b530      	push	{r4, r5, lr}
    fe14:	b085      	sub	sp, #20
    fe16:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    fe18:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fe1c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fe1e:	f04f 33ff 	mov.w	r3, #4294967295
    fe22:	f04f 32ff 	mov.w	r2, #4294967295
    fe26:	480b      	ldr	r0, [pc, #44]	; (fe54 <settings_load_subtree+0x44>)
    fe28:	f015 f958 	bl	250dc <z_impl_k_mutex_lock>
	return list->head;
    fe2c:	4b0a      	ldr	r3, [pc, #40]	; (fe58 <settings_load_subtree+0x48>)
    fe2e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fe30:	b94c      	cbnz	r4, fe46 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
    fe32:	4628      	mov	r0, r5
    fe34:	f000 f8f6 	bl	10024 <settings_commit_subtree>
    fe38:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fe3a:	4806      	ldr	r0, [pc, #24]	; (fe54 <settings_load_subtree+0x44>)
    fe3c:	f015 fa1e 	bl	2527c <z_impl_k_mutex_unlock>
}
    fe40:	4620      	mov	r0, r4
    fe42:	b005      	add	sp, #20
    fe44:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
    fe46:	6863      	ldr	r3, [r4, #4]
    fe48:	4620      	mov	r0, r4
    fe4a:	681b      	ldr	r3, [r3, #0]
    fe4c:	a901      	add	r1, sp, #4
    fe4e:	4798      	blx	r3
	return node->next;
    fe50:	6824      	ldr	r4, [r4, #0]
    fe52:	e7ed      	b.n	fe30 <settings_load_subtree+0x20>
    fe54:	20008b7c 	.word	0x20008b7c
    fe58:	200214ac 	.word	0x200214ac

0000fe5c <settings_load_subtree_direct>:
{
    fe5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    fe5e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    fe62:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    fe64:	f04f 33ff 	mov.w	r3, #4294967295
    fe68:	f04f 32ff 	mov.w	r2, #4294967295
    fe6c:	4809      	ldr	r0, [pc, #36]	; (fe94 <settings_load_subtree_direct+0x38>)
    fe6e:	f015 f935 	bl	250dc <z_impl_k_mutex_lock>
	return list->head;
    fe72:	4b09      	ldr	r3, [pc, #36]	; (fe98 <settings_load_subtree_direct+0x3c>)
    fe74:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fe76:	b92c      	cbnz	r4, fe84 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
    fe78:	4806      	ldr	r0, [pc, #24]	; (fe94 <settings_load_subtree_direct+0x38>)
    fe7a:	f015 f9ff 	bl	2527c <z_impl_k_mutex_unlock>
}
    fe7e:	4620      	mov	r0, r4
    fe80:	b004      	add	sp, #16
    fe82:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
    fe84:	6863      	ldr	r3, [r4, #4]
    fe86:	4620      	mov	r0, r4
    fe88:	681b      	ldr	r3, [r3, #0]
    fe8a:	a901      	add	r1, sp, #4
    fe8c:	4798      	blx	r3
	return node->next;
    fe8e:	6824      	ldr	r4, [r4, #0]
    fe90:	e7f1      	b.n	fe76 <settings_load_subtree_direct+0x1a>
    fe92:	bf00      	nop
    fe94:	20008b7c 	.word	0x20008b7c
    fe98:	200214ac 	.word	0x200214ac

0000fe9c <settings_store_init>:
	list->head = NULL;
    fe9c:	2200      	movs	r2, #0
    fe9e:	4b02      	ldr	r3, [pc, #8]	; (fea8 <settings_store_init+0xc>)
	list->tail = NULL;
    fea0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    fea4:	4770      	bx	lr
    fea6:	bf00      	nop
    fea8:	200214ac 	.word	0x200214ac

0000feac <settings_init>:
	list->head = NULL;
    feac:	2200      	movs	r2, #0
    feae:	4b02      	ldr	r3, [pc, #8]	; (feb8 <settings_init+0xc>)
	list->tail = NULL;
    feb0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    feb4:	f7ff bff2 	b.w	fe9c <settings_store_init>
    feb8:	200214b4 	.word	0x200214b4

0000febc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    febc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fec0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    fec2:	460c      	mov	r4, r1
    fec4:	b109      	cbz	r1, feca <settings_parse_and_lookup+0xe>
		*next = NULL;
    fec6:	2300      	movs	r3, #0
    fec8:	600b      	str	r3, [r1, #0]
{
    feca:	2600      	movs	r6, #0
    fecc:	4d25      	ldr	r5, [pc, #148]	; (ff64 <settings_parse_and_lookup+0xa8>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    fece:	f8df 9098 	ldr.w	r9, [pc, #152]	; ff68 <settings_parse_and_lookup+0xac>
    fed2:	454d      	cmp	r5, r9
    fed4:	d924      	bls.n	ff20 <settings_parse_and_lookup+0x64>
    fed6:	4925      	ldr	r1, [pc, #148]	; (ff6c <settings_parse_and_lookup+0xb0>)
    fed8:	2394      	movs	r3, #148	; 0x94
    feda:	4a25      	ldr	r2, [pc, #148]	; (ff70 <settings_parse_and_lookup+0xb4>)
    fedc:	4825      	ldr	r0, [pc, #148]	; (ff74 <settings_parse_and_lookup+0xb8>)
    fede:	f01a fbd8 	bl	2a692 <assert_print>
    fee2:	4825      	ldr	r0, [pc, #148]	; (ff78 <settings_parse_and_lookup+0xbc>)
    fee4:	f01a fbd5 	bl	2a692 <assert_print>
    fee8:	2194      	movs	r1, #148	; 0x94
    feea:	4821      	ldr	r0, [pc, #132]	; (ff70 <settings_parse_and_lookup+0xb4>)
    feec:	f01a fbca 	bl	2a684 <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    fef0:	f8d5 8000 	ldr.w	r8, [r5]
    fef4:	4638      	mov	r0, r7
    fef6:	4641      	mov	r1, r8
    fef8:	aa01      	add	r2, sp, #4
    fefa:	f01b f9c8 	bl	2b28e <settings_name_steq>
    fefe:	b150      	cbz	r0, ff16 <settings_parse_and_lookup+0x5a>
			continue;
		}
		if (!bestmatch) {
    ff00:	b916      	cbnz	r6, ff08 <settings_parse_and_lookup+0x4c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
    ff02:	b954      	cbnz	r4, ff1a <settings_parse_and_lookup+0x5e>
{
    ff04:	462e      	mov	r6, r5
    ff06:	e006      	b.n	ff16 <settings_parse_and_lookup+0x5a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ff08:	2200      	movs	r2, #0
    ff0a:	4640      	mov	r0, r8
    ff0c:	6831      	ldr	r1, [r6, #0]
    ff0e:	f01b f9be 	bl	2b28e <settings_name_steq>
    ff12:	2800      	cmp	r0, #0
    ff14:	d1f5      	bne.n	ff02 <settings_parse_and_lookup+0x46>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff16:	3514      	adds	r5, #20
    ff18:	e7db      	b.n	fed2 <settings_parse_and_lookup+0x16>
				*next = tmpnext;
    ff1a:	9b01      	ldr	r3, [sp, #4]
    ff1c:	6023      	str	r3, [r4, #0]
    ff1e:	e7f1      	b.n	ff04 <settings_parse_and_lookup+0x48>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff20:	d3e6      	bcc.n	fef0 <settings_parse_and_lookup+0x34>
	return list->head;
    ff22:	4b16      	ldr	r3, [pc, #88]	; (ff7c <settings_parse_and_lookup+0xc0>)
    ff24:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ff26:	b1c5      	cbz	r5, ff5a <settings_parse_and_lookup+0x9e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff28:	f855 8c14 	ldr.w	r8, [r5, #-20]
    ff2c:	4638      	mov	r0, r7
    ff2e:	4641      	mov	r1, r8
    ff30:	aa01      	add	r2, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ff32:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff34:	f01b f9ab 	bl	2b28e <settings_name_steq>
    ff38:	b150      	cbz	r0, ff50 <settings_parse_and_lookup+0x94>
			continue;
		}
		if (!bestmatch) {
    ff3a:	b916      	cbnz	r6, ff42 <settings_parse_and_lookup+0x86>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
    ff3c:	b954      	cbnz	r4, ff54 <settings_parse_and_lookup+0x98>
{
    ff3e:	462e      	mov	r6, r5
    ff40:	e006      	b.n	ff50 <settings_parse_and_lookup+0x94>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ff42:	2200      	movs	r2, #0
    ff44:	4640      	mov	r0, r8
    ff46:	6831      	ldr	r1, [r6, #0]
    ff48:	f01b f9a1 	bl	2b28e <settings_name_steq>
    ff4c:	2800      	cmp	r0, #0
    ff4e:	d1f5      	bne.n	ff3c <settings_parse_and_lookup+0x80>
	return node->next;
    ff50:	696d      	ldr	r5, [r5, #20]
    ff52:	e7e8      	b.n	ff26 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    ff54:	9b01      	ldr	r3, [sp, #4]
    ff56:	6023      	str	r3, [r4, #0]
    ff58:	e7f1      	b.n	ff3e <settings_parse_and_lookup+0x82>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    ff5a:	4630      	mov	r0, r6
    ff5c:	b003      	add	sp, #12
    ff5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ff62:	bf00      	nop
    ff64:	000315d4 	.word	0x000315d4
    ff68:	0003164c 	.word	0x0003164c
    ff6c:	00033aa1 	.word	0x00033aa1
    ff70:	00033a6f 	.word	0x00033a6f
    ff74:	00032629 	.word	0x00032629
    ff78:	0003368c 	.word	0x0003368c
    ff7c:	200214b4 	.word	0x200214b4

0000ff80 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    ff80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff84:	b084      	sub	sp, #16
    ff86:	af02      	add	r7, sp, #8
    ff88:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
    ff8c:	4604      	mov	r4, r0
    ff8e:	460d      	mov	r5, r1
    ff90:	4616      	mov	r6, r2
    ff92:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
    ff94:	6078      	str	r0, [r7, #4]

	if (load_arg && load_arg->subtree &&
    ff96:	f1b9 0f00 	cmp.w	r9, #0
    ff9a:	d007      	beq.n	ffac <settings_call_set_handler+0x2c>
    ff9c:	f8d9 1000 	ldr.w	r1, [r9]
    ffa0:	bb31      	cbnz	r1, fff0 <settings_call_set_handler+0x70>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
    ffa2:	f8d9 a004 	ldr.w	sl, [r9, #4]
    ffa6:	f1ba 0f00 	cmp.w	sl, #0
    ffaa:	d128      	bne.n	fffe <settings_call_set_handler+0x7e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
    ffac:	4620      	mov	r0, r4
    ffae:	1d39      	adds	r1, r7, #4
    ffb0:	f7ff ff84 	bl	febc <settings_parse_and_lookup>
		if (!ch) {
    ffb4:	b308      	cbz	r0, fffa <settings_call_set_handler+0x7a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    ffb6:	f8d0 9008 	ldr.w	r9, [r0, #8]
    ffba:	4643      	mov	r3, r8
    ffbc:	4632      	mov	r2, r6
    ffbe:	4629      	mov	r1, r5
    ffc0:	6878      	ldr	r0, [r7, #4]
    ffc2:	47c8      	blx	r9

		if (rc != 0) {
    ffc4:	b1c8      	cbz	r0, fffa <settings_call_set_handler+0x7a>
			LOG_ERR("set-value failure. key: %s error(%d)",
    ffc6:	466d      	mov	r5, sp
    ffc8:	b08a      	sub	sp, #40	; 0x28
    ffca:	aa02      	add	r2, sp, #8
    ffcc:	4b12      	ldr	r3, [pc, #72]	; (10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>)
    ffce:	61d0      	str	r0, [r2, #28]
    ffd0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ffd4:	f44f 7300 	mov.w	r3, #512	; 0x200
    ffd8:	8413      	strh	r3, [r2, #32]
    ffda:	4b10      	ldr	r3, [pc, #64]	; (1001c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c>)
    ffdc:	f842 3f10 	str.w	r3, [r2, #16]!
    ffe0:	2300      	movs	r3, #0
    ffe2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    ffe6:	480e      	ldr	r0, [pc, #56]	; (10020 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x20>)
    ffe8:	f7fe fc3e 	bl	e868 <z_impl_z_log_msg_static_create>
    ffec:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
    ffee:	e004      	b.n	fffa <settings_call_set_handler+0x7a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    fff0:	1d3a      	adds	r2, r7, #4
    fff2:	f01b f94c 	bl	2b28e <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    fff6:	2800      	cmp	r0, #0
    fff8:	d1d3      	bne.n	ffa2 <settings_call_set_handler+0x22>
		return 0;
    fffa:	2000      	movs	r0, #0
    fffc:	e007      	b.n	1000e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    fffe:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10002:	4632      	mov	r2, r6
   10004:	9300      	str	r3, [sp, #0]
   10006:	4629      	mov	r1, r5
   10008:	4643      	mov	r3, r8
   1000a:	6878      	ldr	r0, [r7, #4]
   1000c:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   1000e:	3708      	adds	r7, #8
   10010:	46bd      	mov	sp, r7
   10012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10016:	bf00      	nop
   10018:	00033ac9 	.word	0x00033ac9
   1001c:	01000004 	.word	0x01000004
   10020:	0003159c 	.word	0x0003159c

00010024 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   10024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10026:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   10028:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1002a:	4c1e      	ldr	r4, [pc, #120]	; (100a4 <settings_commit_subtree+0x80>)
   1002c:	4f1e      	ldr	r7, [pc, #120]	; (100a8 <settings_commit_subtree+0x84>)
   1002e:	42bc      	cmp	r4, r7
   10030:	d91f      	bls.n	10072 <settings_commit_subtree+0x4e>
   10032:	491e      	ldr	r1, [pc, #120]	; (100ac <settings_commit_subtree+0x88>)
   10034:	23f4      	movs	r3, #244	; 0xf4
   10036:	4a1e      	ldr	r2, [pc, #120]	; (100b0 <settings_commit_subtree+0x8c>)
   10038:	481e      	ldr	r0, [pc, #120]	; (100b4 <settings_commit_subtree+0x90>)
   1003a:	f01a fb2a 	bl	2a692 <assert_print>
   1003e:	481e      	ldr	r0, [pc, #120]	; (100b8 <settings_commit_subtree+0x94>)
   10040:	f01a fb27 	bl	2a692 <assert_print>
   10044:	21f4      	movs	r1, #244	; 0xf4
   10046:	481a      	ldr	r0, [pc, #104]	; (100b0 <settings_commit_subtree+0x8c>)
   10048:	f01a fb1c 	bl	2a684 <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1004c:	b92e      	cbnz	r6, 1005a <settings_commit_subtree+0x36>
			continue;
		}
		if (ch->h_commit) {
   1004e:	68e3      	ldr	r3, [r4, #12]
   10050:	b95b      	cbnz	r3, 1006a <settings_commit_subtree+0x46>
{
   10052:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10054:	4605      	mov	r5, r0
   10056:	3414      	adds	r4, #20
   10058:	e7e9      	b.n	1002e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1005a:	2200      	movs	r2, #0
   1005c:	4631      	mov	r1, r6
   1005e:	6820      	ldr	r0, [r4, #0]
   10060:	f01b f915 	bl	2b28e <settings_name_steq>
   10064:	2800      	cmp	r0, #0
   10066:	d1f2      	bne.n	1004e <settings_commit_subtree+0x2a>
   10068:	e7f3      	b.n	10052 <settings_commit_subtree+0x2e>
			rc2 = ch->h_commit();
   1006a:	4798      	blx	r3
			if (!rc) {
   1006c:	2d00      	cmp	r5, #0
   1006e:	d1f0      	bne.n	10052 <settings_commit_subtree+0x2e>
   10070:	e7f0      	b.n	10054 <settings_commit_subtree+0x30>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10072:	d3eb      	bcc.n	1004c <settings_commit_subtree+0x28>
	return list->head;
   10074:	4b11      	ldr	r3, [pc, #68]	; (100bc <settings_commit_subtree+0x98>)
   10076:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   10078:	b194      	cbz	r4, 100a0 <settings_commit_subtree+0x7c>
   1007a:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1007c:	b91e      	cbnz	r6, 10086 <settings_commit_subtree+0x62>
			continue;
		}
		if (ch->h_commit) {
   1007e:	68e3      	ldr	r3, [r4, #12]
   10080:	b94b      	cbnz	r3, 10096 <settings_commit_subtree+0x72>
	return node->next;
   10082:	6964      	ldr	r4, [r4, #20]
   10084:	e7f8      	b.n	10078 <settings_commit_subtree+0x54>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10086:	2200      	movs	r2, #0
   10088:	4631      	mov	r1, r6
   1008a:	6820      	ldr	r0, [r4, #0]
   1008c:	f01b f8ff 	bl	2b28e <settings_name_steq>
   10090:	2800      	cmp	r0, #0
   10092:	d1f4      	bne.n	1007e <settings_commit_subtree+0x5a>
   10094:	e7f5      	b.n	10082 <settings_commit_subtree+0x5e>
			rc2 = ch->h_commit();
   10096:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   10098:	2d00      	cmp	r5, #0
   1009a:	bf08      	it	eq
   1009c:	4605      	moveq	r5, r0
   1009e:	e7f0      	b.n	10082 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   100a0:	4628      	mov	r0, r5
   100a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100a4:	000315d4 	.word	0x000315d4
   100a8:	0003164c 	.word	0x0003164c
   100ac:	00033aa1 	.word	0x00033aa1
   100b0:	00033a6f 	.word	0x00033a6f
   100b4:	00032629 	.word	0x00032629
   100b8:	0003368c 	.word	0x0003368c
   100bc:	200214b4 	.word	0x200214b4

000100c0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   100c0:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   100c2:	4c07      	ldr	r4, [pc, #28]	; (100e0 <settings_subsys_init+0x20>)
   100c4:	7823      	ldrb	r3, [r4, #0]
   100c6:	b10b      	cbz	r3, 100cc <settings_subsys_init+0xc>
		return 0;
   100c8:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   100ca:	bd10      	pop	{r4, pc}
	settings_init();
   100cc:	f7ff feee 	bl	feac <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   100d0:	f000 f866 	bl	101a0 <settings_backend_init>
	if (!err) {
   100d4:	2800      	cmp	r0, #0
   100d6:	d1f8      	bne.n	100ca <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   100d8:	2301      	movs	r3, #1
   100da:	7023      	strb	r3, [r4, #0]
   100dc:	e7f4      	b.n	100c8 <settings_subsys_init+0x8>
   100de:	bf00      	nop
   100e0:	20022316 	.word	0x20022316

000100e4 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   100e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100e8:	4680      	mov	r8, r0
   100ea:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   100ec:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   100ee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1019c <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   100f2:	3401      	adds	r4, #1
{
   100f4:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
   100f6:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   100f8:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   100fc:	1e65      	subs	r5, r4, #1
   100fe:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   10100:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   10104:	d047      	beq.n	10196 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   10106:	234a      	movs	r3, #74	; 0x4a
   10108:	4629      	mov	r1, r5
   1010a:	aa05      	add	r2, sp, #20
   1010c:	4630      	mov	r0, r6
   1010e:	f01a feab 	bl	2ae68 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10112:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   10116:	343f      	adds	r4, #63	; 0x3f
   10118:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1011a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1011c:	4621      	mov	r1, r4
   1011e:	2301      	movs	r3, #1
   10120:	4630      	mov	r0, r6
   10122:	f10d 020b 	add.w	r2, sp, #11
   10126:	f01a fe9f 	bl	2ae68 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1012a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1012c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1012e:	dc03      	bgt.n	10138 <settings_nvs_load+0x54>
   10130:	2800      	cmp	r0, #0
   10132:	dc03      	bgt.n	1013c <settings_nvs_load+0x58>
{
   10134:	462c      	mov	r4, r5
   10136:	e7e1      	b.n	100fc <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   10138:	2800      	cmp	r0, #0
   1013a:	dc16      	bgt.n	1016a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   1013c:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   10140:	42ab      	cmp	r3, r5
   10142:	d109      	bne.n	10158 <settings_nvs_load+0x74>
				cf->last_name_id--;
   10144:	4642      	mov	r2, r8
   10146:	1e6b      	subs	r3, r5, #1
   10148:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1014c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10150:	2302      	movs	r3, #2
   10152:	4630      	mov	r0, r6
   10154:	f7ff f8a8 	bl	f2a8 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   10158:	4629      	mov	r1, r5
   1015a:	4630      	mov	r0, r6
   1015c:	f01a fe80 	bl	2ae60 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   10160:	4621      	mov	r1, r4
   10162:	4630      	mov	r0, r6
   10164:	f01a fe7c 	bl	2ae60 <nvs_delete>
			continue;
   10168:	e7e4      	b.n	10134 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   1016a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1016e:	eb0d 0703 	add.w	r7, sp, r3
   10172:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
   10174:	4652      	mov	r2, sl
		name[rc1] = '\0';
   10176:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   1017a:	a805      	add	r0, sp, #20
   1017c:	f8cd 9000 	str.w	r9, [sp]
   10180:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
   10182:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   10184:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   10188:	f7ff fefa 	bl	ff80 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   1018c:	2800      	cmp	r0, #0
   1018e:	d0d1      	beq.n	10134 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   10190:	b018      	add	sp, #96	; 0x60
   10192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10196:	2000      	movs	r0, #0
	return ret;
   10198:	e7fa      	b.n	10190 <settings_nvs_load+0xac>
   1019a:	bf00      	nop
   1019c:	0002b2ff 	.word	0x0002b2ff

000101a0 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   101a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   101a2:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   101a4:	4669      	mov	r1, sp
   101a6:	2007      	movs	r0, #7
	uint32_t sector_cnt = 1;
   101a8:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   101aa:	f7ff fd9f 	bl	fcec <flash_area_open>
	if (rc) {
   101ae:	4604      	mov	r4, r0
   101b0:	2800      	cmp	r0, #0
   101b2:	d134      	bne.n	1021e <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   101b4:	2007      	movs	r0, #7
   101b6:	aa02      	add	r2, sp, #8
   101b8:	a901      	add	r1, sp, #4
   101ba:	f7ff fdbf 	bl	fd3c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   101be:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   101c2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   101c4:	d02b      	beq.n	1021e <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   101c6:	b138      	cbz	r0, 101d8 <settings_backend_init+0x38>
   101c8:	340c      	adds	r4, #12
   101ca:	d005      	beq.n	101d8 <settings_backend_init+0x38>
		k_panic();
   101cc:	4040      	eors	r0, r0
   101ce:	f380 8811 	msr	BASEPRI, r0
   101d2:	f04f 0004 	mov.w	r0, #4
   101d6:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   101d8:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   101da:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   101de:	d223      	bcs.n	10228 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   101e0:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
   101e2:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
   101e4:	9a00      	ldr	r2, [sp, #0]
   101e6:	6894      	ldr	r4, [r2, #8]
		nvs_size += nvs_sector_size;
   101e8:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   101ea:	4284      	cmp	r4, r0
   101ec:	d31a      	bcc.n	10224 <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   101ee:	3301      	adds	r3, #1
   101f0:	2b08      	cmp	r3, #8
   101f2:	d1f9      	bne.n	101e8 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   101f4:	4d0e      	ldr	r5, [pc, #56]	; (10230 <settings_backend_init+0x90>)
   101f6:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   101f8:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   101fa:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   101fc:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   101fe:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
   10200:	68d3      	ldr	r3, [r2, #12]
   10202:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   10204:	f01b f915 	bl	2b432 <settings_nvs_backend_init>
	if (rc) {
   10208:	4604      	mov	r4, r0
   1020a:	b940      	cbnz	r0, 1021e <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1020c:	4e09      	ldr	r6, [pc, #36]	; (10234 <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
   1020e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10210:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   10212:	f7ff fde9 	bl	fde8 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   10216:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10218:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1021a:	f7ff fdf3 	bl	fe04 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   1021e:	4620      	mov	r0, r4
   10220:	b004      	add	sp, #16
   10222:	bd70      	pop	{r4, r5, r6, pc}
   10224:	b29b      	uxth	r3, r3
   10226:	e7e5      	b.n	101f4 <settings_backend_init+0x54>
		return -EDOM;
   10228:	f06f 0420 	mvn.w	r4, #32
   1022c:	e7f7      	b.n	1021e <settings_backend_init+0x7e>
   1022e:	bf00      	nop
   10230:	200214bc 	.word	0x200214bc
   10234:	2000842c 	.word	0x2000842c

00010238 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1023c:	4605      	mov	r5, r0
	__asm__ volatile(
   1023e:	f04f 0320 	mov.w	r3, #32
   10242:	f3ef 8611 	mrs	r6, BASEPRI
   10246:	f383 8812 	msr	BASEPRI_MAX, r3
   1024a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1024e:	4820      	ldr	r0, [pc, #128]	; (102d0 <pm_state_notify+0x98>)
   10250:	f014 feee 	bl	25030 <z_spin_lock_valid>
   10254:	b968      	cbnz	r0, 10272 <pm_state_notify+0x3a>
   10256:	2394      	movs	r3, #148	; 0x94
   10258:	4a1e      	ldr	r2, [pc, #120]	; (102d4 <pm_state_notify+0x9c>)
   1025a:	491f      	ldr	r1, [pc, #124]	; (102d8 <pm_state_notify+0xa0>)
   1025c:	481f      	ldr	r0, [pc, #124]	; (102dc <pm_state_notify+0xa4>)
   1025e:	f01a fa18 	bl	2a692 <assert_print>
   10262:	491b      	ldr	r1, [pc, #108]	; (102d0 <pm_state_notify+0x98>)
   10264:	481e      	ldr	r0, [pc, #120]	; (102e0 <pm_state_notify+0xa8>)
   10266:	f01a fa14 	bl	2a692 <assert_print>
   1026a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1026c:	4819      	ldr	r0, [pc, #100]	; (102d4 <pm_state_notify+0x9c>)
   1026e:	f01a fa09 	bl	2a684 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10272:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
   10276:	4816      	ldr	r0, [pc, #88]	; (102d0 <pm_state_notify+0x98>)
   10278:	f014 fef6 	bl	25068 <z_spin_lock_set_owner>
	return list->head;
   1027c:	4b19      	ldr	r3, [pc, #100]	; (102e4 <pm_state_notify+0xac>)
   1027e:	4f1a      	ldr	r7, [pc, #104]	; (102e8 <pm_state_notify+0xb0>)
   10280:	681c      	ldr	r4, [r3, #0]
   10282:	f8df 8068 	ldr.w	r8, [pc, #104]	; 102ec <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10286:	b97c      	cbnz	r4, 102a8 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10288:	4811      	ldr	r0, [pc, #68]	; (102d0 <pm_state_notify+0x98>)
   1028a:	f014 fedf 	bl	2504c <z_spin_unlock_valid>
   1028e:	b9c8      	cbnz	r0, 102c4 <pm_state_notify+0x8c>
   10290:	23c2      	movs	r3, #194	; 0xc2
   10292:	4a10      	ldr	r2, [pc, #64]	; (102d4 <pm_state_notify+0x9c>)
   10294:	4916      	ldr	r1, [pc, #88]	; (102f0 <pm_state_notify+0xb8>)
   10296:	4811      	ldr	r0, [pc, #68]	; (102dc <pm_state_notify+0xa4>)
   10298:	f01a f9fb 	bl	2a692 <assert_print>
   1029c:	490c      	ldr	r1, [pc, #48]	; (102d0 <pm_state_notify+0x98>)
   1029e:	4815      	ldr	r0, [pc, #84]	; (102f4 <pm_state_notify+0xbc>)
   102a0:	f01a f9f7 	bl	2a692 <assert_print>
   102a4:	21c2      	movs	r1, #194	; 0xc2
   102a6:	e7e1      	b.n	1026c <pm_state_notify+0x34>
			callback = notifier->state_exit;
   102a8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   102ac:	2d00      	cmp	r5, #0
   102ae:	bf18      	it	ne
   102b0:	4613      	movne	r3, r2
		if (callback) {
   102b2:	b12b      	cbz	r3, 102c0 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   102b4:	f898 2014 	ldrb.w	r2, [r8, #20]
   102b8:	fb09 f202 	mul.w	r2, r9, r2
   102bc:	5cb8      	ldrb	r0, [r7, r2]
   102be:	4798      	blx	r3
	return node->next;
   102c0:	6824      	ldr	r4, [r4, #0]
   102c2:	e7e0      	b.n	10286 <pm_state_notify+0x4e>
	__asm__ volatile(
   102c4:	f386 8811 	msr	BASEPRI, r6
   102c8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   102cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   102d0:	200214fc 	.word	0x200214fc
   102d4:	0003338d 	.word	0x0003338d
   102d8:	000333e6 	.word	0x000333e6
   102dc:	00032629 	.word	0x00032629
   102e0:	000333fb 	.word	0x000333fb
   102e4:	2002151c 	.word	0x2002151c
   102e8:	20021510 	.word	0x20021510
   102ec:	20021a88 	.word	0x20021a88
   102f0:	000333ba 	.word	0x000333ba
   102f4:	000333d1 	.word	0x000333d1

000102f8 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   102f8:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   102fa:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   102fc:	4b16      	ldr	r3, [pc, #88]	; (10358 <pm_system_resume+0x60>)
   102fe:	7d1c      	ldrb	r4, [r3, #20]
   10300:	f004 031f 	and.w	r3, r4, #31
   10304:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10306:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10308:	4b14      	ldr	r3, [pc, #80]	; (1035c <pm_system_resume+0x64>)
   1030a:	0961      	lsrs	r1, r4, #5
   1030c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10310:	e8d3 1fef 	ldaex	r1, [r3]
   10314:	ea01 0500 	and.w	r5, r1, r0
   10318:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1031c:	2e00      	cmp	r6, #0
   1031e:	d1f7      	bne.n	10310 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10320:	420a      	tst	r2, r1
   10322:	d013      	beq.n	1034c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   10324:	4b0e      	ldr	r3, [pc, #56]	; (10360 <pm_system_resume+0x68>)
   10326:	4d0f      	ldr	r5, [pc, #60]	; (10364 <pm_system_resume+0x6c>)
   10328:	b18b      	cbz	r3, 1034e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1032a:	230c      	movs	r3, #12
   1032c:	4363      	muls	r3, r4
   1032e:	18ea      	adds	r2, r5, r3
   10330:	7851      	ldrb	r1, [r2, #1]
   10332:	5ce8      	ldrb	r0, [r5, r3]
   10334:	f01a faa9 	bl	2a88a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10338:	2000      	movs	r0, #0
   1033a:	f7ff ff7d 	bl	10238 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1033e:	230c      	movs	r3, #12
   10340:	435c      	muls	r4, r3
   10342:	2300      	movs	r3, #0
   10344:	192a      	adds	r2, r5, r4
   10346:	512b      	str	r3, [r5, r4]
   10348:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1034c:	bd70      	pop	{r4, r5, r6, pc}
   1034e:	f383 8811 	msr	BASEPRI, r3
   10352:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10356:	e7ef      	b.n	10338 <pm_system_resume+0x40>
   10358:	20021a88 	.word	0x20021a88
   1035c:	20021524 	.word	0x20021524
   10360:	0002a88b 	.word	0x0002a88b
   10364:	20021510 	.word	0x20021510

00010368 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1036c:	4b45      	ldr	r3, [pc, #276]	; (10484 <pm_system_suspend+0x11c>)
{
   1036e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10370:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   10372:	f04f 0320 	mov.w	r3, #32
   10376:	f3ef 8811 	mrs	r8, BASEPRI
   1037a:	f383 8812 	msr	BASEPRI_MAX, r3
   1037e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10382:	4841      	ldr	r0, [pc, #260]	; (10488 <pm_system_suspend+0x120>)
   10384:	f014 fe54 	bl	25030 <z_spin_lock_valid>
   10388:	b968      	cbnz	r0, 103a6 <pm_system_suspend+0x3e>
   1038a:	2394      	movs	r3, #148	; 0x94
   1038c:	4a3f      	ldr	r2, [pc, #252]	; (1048c <pm_system_suspend+0x124>)
   1038e:	4940      	ldr	r1, [pc, #256]	; (10490 <pm_system_suspend+0x128>)
   10390:	4840      	ldr	r0, [pc, #256]	; (10494 <pm_system_suspend+0x12c>)
   10392:	f01a f97e 	bl	2a692 <assert_print>
   10396:	493c      	ldr	r1, [pc, #240]	; (10488 <pm_system_suspend+0x120>)
   10398:	483f      	ldr	r0, [pc, #252]	; (10498 <pm_system_suspend+0x130>)
   1039a:	f01a f97a 	bl	2a692 <assert_print>
   1039e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   103a0:	483a      	ldr	r0, [pc, #232]	; (1048c <pm_system_suspend+0x124>)
   103a2:	f01a f96f 	bl	2a684 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   103a6:	240c      	movs	r4, #12
   103a8:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   103aa:	4837      	ldr	r0, [pc, #220]	; (10488 <pm_system_suspend+0x120>)
   103ac:	f014 fe5c 	bl	25068 <z_spin_lock_set_owner>
   103b0:	4b3a      	ldr	r3, [pc, #232]	; (1049c <pm_system_suspend+0x134>)
   103b2:	4e3b      	ldr	r6, [pc, #236]	; (104a0 <pm_system_suspend+0x138>)
   103b4:	5d19      	ldrb	r1, [r3, r4]
   103b6:	191a      	adds	r2, r3, r4
   103b8:	b1b9      	cbz	r1, 103ea <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   103ba:	ca07      	ldmia	r2, {r0, r1, r2}
   103bc:	eb06 0c04 	add.w	ip, r6, r4
   103c0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   103c4:	2200      	movs	r2, #0
   103c6:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   103c8:	482f      	ldr	r0, [pc, #188]	; (10488 <pm_system_suspend+0x120>)
   103ca:	f014 fe3f 	bl	2504c <z_spin_unlock_valid>
   103ce:	4604      	mov	r4, r0
   103d0:	b9b0      	cbnz	r0, 10400 <pm_system_suspend+0x98>
   103d2:	23c2      	movs	r3, #194	; 0xc2
   103d4:	4a2d      	ldr	r2, [pc, #180]	; (1048c <pm_system_suspend+0x124>)
   103d6:	4933      	ldr	r1, [pc, #204]	; (104a4 <pm_system_suspend+0x13c>)
   103d8:	482e      	ldr	r0, [pc, #184]	; (10494 <pm_system_suspend+0x12c>)
   103da:	f01a f95a 	bl	2a692 <assert_print>
   103de:	492a      	ldr	r1, [pc, #168]	; (10488 <pm_system_suspend+0x120>)
   103e0:	4831      	ldr	r0, [pc, #196]	; (104a8 <pm_system_suspend+0x140>)
   103e2:	f01a f956 	bl	2a692 <assert_print>
   103e6:	21c2      	movs	r1, #194	; 0xc2
   103e8:	e7da      	b.n	103a0 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   103ea:	4639      	mov	r1, r7
   103ec:	4628      	mov	r0, r5
   103ee:	f000 f865 	bl	104bc <pm_policy_next_state>
		if (info != NULL) {
   103f2:	2800      	cmp	r0, #0
   103f4:	d0e8      	beq.n	103c8 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   103f6:	c807      	ldmia	r0, {r0, r1, r2}
   103f8:	4434      	add	r4, r6
   103fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   103fe:	e7e3      	b.n	103c8 <pm_system_suspend+0x60>
	__asm__ volatile(
   10400:	f388 8811 	msr	BASEPRI, r8
   10404:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10408:	230c      	movs	r3, #12
   1040a:	436b      	muls	r3, r5
   1040c:	18f2      	adds	r2, r6, r3
   1040e:	5cf3      	ldrb	r3, [r6, r3]
   10410:	b3ab      	cbz	r3, 1047e <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10412:	1c7b      	adds	r3, r7, #1
   10414:	d00f      	beq.n	10436 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10416:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1041a:	2100      	movs	r1, #0
   1041c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10420:	4822      	ldr	r0, [pc, #136]	; (104ac <pm_system_suspend+0x144>)
   10422:	2300      	movs	r3, #0
   10424:	fbee 010c 	umlal	r0, r1, lr, ip
   10428:	4a21      	ldr	r2, [pc, #132]	; (104b0 <pm_system_suspend+0x148>)
   1042a:	f7f8 fd61 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1042e:	2101      	movs	r1, #1
   10430:	1a38      	subs	r0, r7, r0
   10432:	f017 fadb 	bl	279ec <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10436:	f016 f959 	bl	266ec <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1043a:	2001      	movs	r0, #1
   1043c:	f7ff fefc 	bl	10238 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10440:	4b1c      	ldr	r3, [pc, #112]	; (104b4 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10442:	096a      	lsrs	r2, r5, #5
   10444:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10448:	2201      	movs	r2, #1
   1044a:	f005 011f 	and.w	r1, r5, #31
   1044e:	408a      	lsls	r2, r1
   10450:	e8d3 0fef 	ldaex	r0, [r3]
   10454:	4310      	orrs	r0, r2
   10456:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1045a:	2900      	cmp	r1, #0
   1045c:	d1f8      	bne.n	10450 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   1045e:	4b16      	ldr	r3, [pc, #88]	; (104b8 <pm_system_suspend+0x150>)
   10460:	b133      	cbz	r3, 10470 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   10462:	230c      	movs	r3, #12
   10464:	436b      	muls	r3, r5
   10466:	18f2      	adds	r2, r6, r3
   10468:	7851      	ldrb	r1, [r2, #1]
   1046a:	5cf0      	ldrb	r0, [r6, r3]
   1046c:	f01a fa01 	bl	2a872 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10470:	f7ff ff42 	bl	102f8 <pm_system_resume>
	k_sched_unlock();
   10474:	f016 f9a6 	bl	267c4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   10478:	4620      	mov	r0, r4
   1047a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   1047e:	461c      	mov	r4, r3
   10480:	e7fa      	b.n	10478 <pm_system_suspend+0x110>
   10482:	bf00      	nop
   10484:	20021a88 	.word	0x20021a88
   10488:	20021500 	.word	0x20021500
   1048c:	0003338d 	.word	0x0003338d
   10490:	000333e6 	.word	0x000333e6
   10494:	00032629 	.word	0x00032629
   10498:	000333fb 	.word	0x000333fb
   1049c:	20021504 	.word	0x20021504
   104a0:	20021510 	.word	0x20021510
   104a4:	000333ba 	.word	0x000333ba
   104a8:	000333d1 	.word	0x000333d1
   104ac:	000f423f 	.word	0x000f423f
   104b0:	000f4240 	.word	0x000f4240
   104b4:	20021524 	.word	0x20021524
   104b8:	0002a873 	.word	0x0002a873

000104bc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   104bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104c0:	b085      	sub	sp, #20
   104c2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   104c4:	a903      	add	r1, sp, #12
   104c6:	f000 f843 	bl	10550 <pm_state_cpu_get_all>
   104ca:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   104ce:	4604      	mov	r4, r0
   104d0:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   104d4:	4b1b      	ldr	r3, [pc, #108]	; (10544 <pm_policy_next_state+0x88>)
   104d6:	9d03      	ldr	r5, [sp, #12]
   104d8:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   104dc:	1e43      	subs	r3, r0, #1
   104de:	b21b      	sxth	r3, r3
   104e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   104e4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10548 <pm_policy_next_state+0x8c>
   104e8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   104ec:	b924      	cbnz	r4, 104f8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   104ee:	46a1      	mov	r9, r4
}
   104f0:	4648      	mov	r0, r9
   104f2:	b005      	add	sp, #20
   104f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104f8:	46c4      	mov	ip, r8
   104fa:	4659      	mov	r1, fp
   104fc:	6868      	ldr	r0, [r5, #4]
   104fe:	2300      	movs	r3, #0
   10500:	fbe0 c107 	umlal	ip, r1, r0, r7
   10504:	4a11      	ldr	r2, [pc, #68]	; (1054c <pm_policy_next_state+0x90>)
   10506:	4660      	mov	r0, ip
   10508:	f7f8 fcf2 	bl	8ef0 <__aeabi_uldivmod>
   1050c:	46c4      	mov	ip, r8
   1050e:	4659      	mov	r1, fp
   10510:	9001      	str	r0, [sp, #4]
   10512:	68a8      	ldr	r0, [r5, #8]
   10514:	2300      	movs	r3, #0
   10516:	fbe0 c107 	umlal	ip, r1, r0, r7
   1051a:	4a0c      	ldr	r2, [pc, #48]	; (1054c <pm_policy_next_state+0x90>)
   1051c:	4660      	mov	r0, ip
   1051e:	f7f8 fce7 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10522:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   10526:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10528:	d001      	beq.n	1052e <pm_policy_next_state+0x72>
   1052a:	4582      	cmp	sl, r0
   1052c:	d905      	bls.n	1053a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1052e:	1c73      	adds	r3, r6, #1
   10530:	d0de      	beq.n	104f0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   10532:	9b01      	ldr	r3, [sp, #4]
   10534:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10536:	42b0      	cmp	r0, r6
   10538:	d9da      	bls.n	104f0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1053a:	3c01      	subs	r4, #1
   1053c:	b2a4      	uxth	r4, r4
   1053e:	3d0c      	subs	r5, #12
   10540:	e7d4      	b.n	104ec <pm_policy_next_state+0x30>
   10542:	bf00      	nop
   10544:	20008440 	.word	0x20008440
   10548:	000f423f 	.word	0x000f423f
   1054c:	000f4240 	.word	0x000f4240

00010550 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10550:	b908      	cbnz	r0, 10556 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10552:	4b02      	ldr	r3, [pc, #8]	; (1055c <pm_state_cpu_get_all+0xc>)
   10554:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10556:	2000      	movs	r0, #0
   10558:	4770      	bx	lr
   1055a:	bf00      	nop
   1055c:	00031bcc 	.word	0x00031bcc

00010560 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10560:	4b03      	ldr	r3, [pc, #12]	; (10570 <nus_ccc_cfg_changed+0x10>)
   10562:	689b      	ldr	r3, [r3, #8]
   10564:	b11b      	cbz	r3, 1056e <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   10566:	1e48      	subs	r0, r1, #1
   10568:	bf18      	it	ne
   1056a:	2001      	movne	r0, #1
   1056c:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   1056e:	4770      	bx	lr
   10570:	20021528 	.word	0x20021528

00010574 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   10574:	b510      	push	{r4, lr}
   10576:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   10578:	4b03      	ldr	r3, [pc, #12]	; (10588 <on_receive+0x14>)
{
   1057a:	4611      	mov	r1, r2
	if (nus_cb.received) {
   1057c:	681b      	ldr	r3, [r3, #0]
   1057e:	b10b      	cbz	r3, 10584 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   10580:	4622      	mov	r2, r4
   10582:	4798      	blx	r3
}
	return len;
}
   10584:	4620      	mov	r0, r4
   10586:	bd10      	pop	{r4, pc}
   10588:	20021528 	.word	0x20021528

0001058c <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   1058c:	4b02      	ldr	r3, [pc, #8]	; (10598 <on_sent+0xc>)
   1058e:	685b      	ldr	r3, [r3, #4]
   10590:	b103      	cbz	r3, 10594 <on_sent+0x8>
		nus_cb.sent(conn);
   10592:	4718      	bx	r3
	}
}
   10594:	4770      	bx	lr
   10596:	bf00      	nop
   10598:	20021528 	.word	0x20021528

0001059c <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   1059c:	b130      	cbz	r0, 105ac <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   1059e:	4b04      	ldr	r3, [pc, #16]	; (105b0 <bt_nus_init+0x14>)
   105a0:	6802      	ldr	r2, [r0, #0]
   105a2:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   105a4:	6842      	ldr	r2, [r0, #4]
   105a6:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   105a8:	6882      	ldr	r2, [r0, #8]
   105aa:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   105ac:	2000      	movs	r0, #0
   105ae:	4770      	bx	lr
   105b0:	20021528 	.word	0x20021528

000105b4 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   105b4:	b570      	push	{r4, r5, r6, lr}
   105b6:	460e      	mov	r6, r1
   105b8:	4615      	mov	r5, r2
   105ba:	4604      	mov	r4, r0
   105bc:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   105be:	2100      	movs	r1, #0
   105c0:	2218      	movs	r2, #24
   105c2:	4668      	mov	r0, sp
   105c4:	f01f fff9 	bl	305ba <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   105c8:	490b      	ldr	r1, [pc, #44]	; (105f8 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   105ca:	4b0c      	ldr	r3, [pc, #48]	; (105fc <bt_nus_send+0x48>)
	params.data = data;
   105cc:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   105d0:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   105d4:	9304      	str	r3, [sp, #16]

	if (!conn) {
   105d6:	b92c      	cbnz	r4, 105e4 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   105d8:	4669      	mov	r1, sp
   105da:	4620      	mov	r0, r4
   105dc:	f007 ff0a 	bl	183f4 <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   105e0:	b006      	add	sp, #24
   105e2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   105e4:	2201      	movs	r2, #1
   105e6:	4620      	mov	r0, r4
   105e8:	f007 fbd2 	bl	17d90 <bt_gatt_is_subscribed>
   105ec:	2800      	cmp	r0, #0
   105ee:	d1f3      	bne.n	105d8 <bt_nus_send+0x24>
		return -EINVAL;
   105f0:	f06f 0015 	mvn.w	r0, #21
   105f4:	e7f4      	b.n	105e0 <bt_nus_send+0x2c>
   105f6:	bf00      	nop
   105f8:	00031bf4 	.word	0x00031bf4
   105fc:	0001058d 	.word	0x0001058d

00010600 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10600:	4904      	ldr	r1, [pc, #16]	; (10614 <sub_bytes+0x14>)
   10602:	1e43      	subs	r3, r0, #1
   10604:	300f      	adds	r0, #15
   10606:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1060a:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   1060c:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   1060e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10610:	d1f9      	bne.n	10606 <sub_bytes+0x6>
	}
}
   10612:	4770      	bx	lr
   10614:	00033af8 	.word	0x00033af8

00010618 <tc_aes128_set_encrypt_key>:
{
   10618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1061a:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   1061c:	4e26      	ldr	r6, [pc, #152]	; (106b8 <tc_aes128_set_encrypt_key+0xa0>)
{
   1061e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10620:	ad01      	add	r5, sp, #4
{
   10622:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10624:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10628:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1062a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1062c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10630:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   10634:	4638      	mov	r0, r7
   10636:	2f00      	cmp	r7, #0
   10638:	d039      	beq.n	106ae <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   1063a:	2c00      	cmp	r4, #0
   1063c:	d039      	beq.n	106b2 <tc_aes128_set_encrypt_key+0x9a>
   1063e:	1f38      	subs	r0, r7, #4
   10640:	4602      	mov	r2, r0
   10642:	4621      	mov	r1, r4
   10644:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10646:	784b      	ldrb	r3, [r1, #1]
   10648:	780d      	ldrb	r5, [r1, #0]
   1064a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1064c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10650:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   10652:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10654:	432b      	orrs	r3, r5
   10656:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   1065a:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1065c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10660:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10664:	d1ef      	bne.n	10646 <tc_aes128_set_encrypt_key+0x2e>
   10666:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10668:	4c14      	ldr	r4, [pc, #80]	; (106bc <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   1066a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1066c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1066e:	d116      	bne.n	1069e <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10670:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10674:	5ca5      	ldrb	r5, [r4, r2]
   10676:	0e1a      	lsrs	r2, r3, #24
   10678:	5ca2      	ldrb	r2, [r4, r2]
   1067a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1067e:	f3c3 2507 	ubfx	r5, r3, #8, #8
   10682:	5d65      	ldrb	r5, [r4, r5]
   10684:	b2db      	uxtb	r3, r3
   10686:	5ce3      	ldrb	r3, [r4, r3]
   10688:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1068c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10690:	f021 0303 	bic.w	r3, r1, #3
   10694:	3330      	adds	r3, #48	; 0x30
   10696:	446b      	add	r3, sp
   10698:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1069c:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1069e:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   106a2:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   106a4:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   106a6:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   106a8:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   106aa:	d1de      	bne.n	1066a <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   106ac:	2001      	movs	r0, #1
}
   106ae:	b00d      	add	sp, #52	; 0x34
   106b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   106b2:	4620      	mov	r0, r4
   106b4:	e7fb      	b.n	106ae <tc_aes128_set_encrypt_key+0x96>
   106b6:	bf00      	nop
   106b8:	0003166c 	.word	0x0003166c
   106bc:	00033af8 	.word	0x00033af8

000106c0 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   106c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   106c4:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   106c6:	6803      	ldr	r3, [r0, #0]
{
   106c8:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   106ca:	9302      	str	r3, [sp, #8]
   106cc:	6843      	ldr	r3, [r0, #4]
   106ce:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 1088c <compress+0x1cc>
   106d2:	9303      	str	r3, [sp, #12]
   106d4:	6883      	ldr	r3, [r0, #8]
   106d6:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   106da:	9304      	str	r3, [sp, #16]
   106dc:	68c3      	ldr	r3, [r0, #12]
   106de:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   106e0:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   106e2:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   106e6:	9306      	str	r3, [sp, #24]
   106e8:	6943      	ldr	r3, [r0, #20]
   106ea:	9307      	str	r3, [sp, #28]
   106ec:	6983      	ldr	r3, [r0, #24]
   106ee:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   106f2:	9308      	str	r3, [sp, #32]
   106f4:	69c3      	ldr	r3, [r0, #28]
   106f6:	4698      	mov	r8, r3
   106f8:	9309      	str	r3, [sp, #36]	; 0x24
   106fa:	9b08      	ldr	r3, [sp, #32]
   106fc:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   106fe:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   10700:	ab0c      	add	r3, sp, #48	; 0x30
   10702:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10704:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   10708:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   1070a:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1070e:	44a9      	add	r9, r5
   10710:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   10714:	9d00      	ldr	r5, [sp, #0]
   10716:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   1071a:	444b      	add	r3, r9
   1071c:	ea25 0502 	bic.w	r5, r5, r2
   10720:	ea02 090c 	and.w	r9, r2, ip
   10724:	ea85 0509 	eor.w	r5, r5, r9
   10728:	442b      	add	r3, r5
   1072a:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   1072c:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   10730:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   10734:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10738:	4025      	ands	r5, r4
   1073a:	ea06 090b 	and.w	r9, r6, fp
   1073e:	ea85 0509 	eor.w	r5, r5, r9
   10742:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   10746:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10748:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   1074a:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   1074c:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   10750:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   10752:	46de      	mov	lr, fp
   10754:	f8dd 8000 	ldr.w	r8, [sp]
   10758:	f040 8088 	bne.w	1086c <compress+0x1ac>
   1075c:	f04f 0a10 	mov.w	sl, #16
   10760:	494b      	ldr	r1, [pc, #300]	; (10890 <compress+0x1d0>)
   10762:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   10764:	4651      	mov	r1, sl
   10766:	f10a 0a01 	add.w	sl, sl, #1
   1076a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   1076e:	f00a 070f 	and.w	r7, sl, #15
   10772:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10776:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1077a:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   1077e:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   10782:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   10784:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   10788:	f101 070e 	add.w	r7, r1, #14
   1078c:	f007 070f 	and.w	r7, r7, #15
   10790:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10794:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10798:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   1079a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   1079e:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   107a2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107a6:	f001 010f 	and.w	r1, r1, #15
   107aa:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   107ae:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   107b2:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   107b6:	f859 ec40 	ldr.w	lr, [r9, #-64]
   107ba:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   107be:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107c2:	4471      	add	r1, lr
		s0 = sigma0(s0);
   107c4:	f8dd e004 	ldr.w	lr, [sp, #4]
   107c8:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   107cc:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107d0:	4441      	add	r1, r8
		s1 = sigma1(s1);
   107d2:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107d6:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   107d8:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   107dc:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   107e0:	ea2c 0705 	bic.w	r7, ip, r5
   107e4:	ea87 0708 	eor.w	r7, r7, r8
   107e8:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   107ec:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   107f0:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   107f4:	4477      	add	r7, lr
   107f6:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107fa:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   107fe:	4477      	add	r7, lr
   10800:	440f      	add	r7, r1
   10802:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   10804:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10808:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   1080a:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1080e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   10812:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   10816:	ea07 0703 	and.w	r7, r7, r3
   1081a:	ea04 0806 	and.w	r8, r4, r6
   1081e:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   10822:	ea87 0708 	eor.w	r7, r7, r8
   10826:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10828:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   1082a:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   1082e:	f8cd c000 	str.w	ip, [sp]
   10832:	46b3      	mov	fp, r6
   10834:	d122      	bne.n	1087c <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   10836:	9902      	ldr	r1, [sp, #8]
   10838:	4439      	add	r1, r7
   1083a:	6001      	str	r1, [r0, #0]
   1083c:	9903      	ldr	r1, [sp, #12]
   1083e:	4419      	add	r1, r3
   10840:	9b04      	ldr	r3, [sp, #16]
   10842:	6041      	str	r1, [r0, #4]
   10844:	4423      	add	r3, r4
   10846:	6083      	str	r3, [r0, #8]
   10848:	9b05      	ldr	r3, [sp, #20]
   1084a:	4433      	add	r3, r6
   1084c:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   1084e:	9b06      	ldr	r3, [sp, #24]
   10850:	4473      	add	r3, lr
   10852:	6103      	str	r3, [r0, #16]
   10854:	9b07      	ldr	r3, [sp, #28]
   10856:	442b      	add	r3, r5
   10858:	6143      	str	r3, [r0, #20]
   1085a:	9b08      	ldr	r3, [sp, #32]
   1085c:	4413      	add	r3, r2
   1085e:	6183      	str	r3, [r0, #24]
   10860:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10862:	4463      	add	r3, ip
   10864:	61c3      	str	r3, [r0, #28]
}
   10866:	b01d      	add	sp, #116	; 0x74
   10868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1086c:	46b3      	mov	fp, r6
   1086e:	f8cd c000 	str.w	ip, [sp]
   10872:	4626      	mov	r6, r4
   10874:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   10876:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10878:	462a      	mov	r2, r5
   1087a:	e740      	b.n	106fe <compress+0x3e>
   1087c:	4694      	mov	ip, r2
   1087e:	4626      	mov	r6, r4
   10880:	462a      	mov	r2, r5
   10882:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10884:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   10886:	463b      	mov	r3, r7
   10888:	e76c      	b.n	10764 <compress+0xa4>
   1088a:	bf00      	nop
   1088c:	00031cf8 	.word	0x00031cf8
   10890:	00031d34 	.word	0x00031d34

00010894 <tc_sha256_init>:
{
   10894:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   10896:	4604      	mov	r4, r0
   10898:	b1c8      	cbz	r0, 108ce <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   1089a:	2270      	movs	r2, #112	; 0x70
   1089c:	2100      	movs	r1, #0
   1089e:	f01a fdf6 	bl	2b48e <_set>
	s->iv[1] = 0xbb67ae85;
   108a2:	4b0b      	ldr	r3, [pc, #44]	; (108d0 <tc_sha256_init+0x3c>)
   108a4:	4a0b      	ldr	r2, [pc, #44]	; (108d4 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   108a6:	490c      	ldr	r1, [pc, #48]	; (108d8 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   108a8:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   108ac:	4b0b      	ldr	r3, [pc, #44]	; (108dc <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   108ae:	480c      	ldr	r0, [pc, #48]	; (108e0 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   108b0:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   108b4:	4b0b      	ldr	r3, [pc, #44]	; (108e4 <tc_sha256_init+0x50>)
   108b6:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   108ba:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   108bc:	4b0a      	ldr	r3, [pc, #40]	; (108e8 <tc_sha256_init+0x54>)
   108be:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   108c0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   108c4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   108c8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   108cc:	61e3      	str	r3, [r4, #28]
}
   108ce:	bd10      	pop	{r4, pc}
   108d0:	bb67ae85 	.word	0xbb67ae85
   108d4:	6a09e667 	.word	0x6a09e667
   108d8:	3c6ef372 	.word	0x3c6ef372
   108dc:	a54ff53a 	.word	0xa54ff53a
   108e0:	510e527f 	.word	0x510e527f
   108e4:	9b05688c 	.word	0x9b05688c
   108e8:	1f83d9ab 	.word	0x1f83d9ab

000108ec <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   108ec:	4901      	ldr	r1, [pc, #4]	; (108f4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   108ee:	2210      	movs	r2, #16
	str	r2, [r1]
   108f0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   108f2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   108f4:	e000ed10 	.word	0xe000ed10

000108f8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   108f8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   108fa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   108fc:	f380 8811 	msr	BASEPRI, r0
	isb
   10900:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   10904:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10908:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1090a:	b662      	cpsie	i
	isb
   1090c:	f3bf 8f6f 	isb	sy

	bx	lr
   10910:	4770      	bx	lr
   10912:	bf00      	nop

00010914 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   10914:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   10916:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10918:	f381 8811 	msr	BASEPRI, r1

	wfe
   1091c:	bf20      	wfe

	msr	BASEPRI, r0
   1091e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   10922:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   10924:	4770      	bx	lr
   10926:	bf00      	nop

00010928 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1092c:	4681      	mov	r9, r0

	if (esf != NULL) {
   1092e:	460c      	mov	r4, r1
{
   10930:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   10932:	2900      	cmp	r1, #0
   10934:	d04c      	beq.n	109d0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   10936:	e9d1 1200 	ldrd	r1, r2, [r1]
   1093a:	466e      	mov	r6, sp
   1093c:	b08a      	sub	sp, #40	; 0x28
   1093e:	68a3      	ldr	r3, [r4, #8]
   10940:	466d      	mov	r5, sp
   10942:	f04f 0a05 	mov.w	sl, #5
   10946:	46a8      	mov	r8, r5
   10948:	4825      	ldr	r0, [pc, #148]	; (109e0 <z_arm_fatal_error+0xb8>)
   1094a:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1094e:	e9c5 0105 	strd	r0, r1, [r5, #20]
   10952:	f848 af10 	str.w	sl, [r8, #16]!
   10956:	2300      	movs	r3, #0
   10958:	4642      	mov	r2, r8
   1095a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1095e:	4821      	ldr	r0, [pc, #132]	; (109e4 <z_arm_fatal_error+0xbc>)
   10960:	f7fd ff82 	bl	e868 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   10964:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   10968:	46b5      	mov	sp, r6
   1096a:	6963      	ldr	r3, [r4, #20]
   1096c:	46ad      	mov	sp, r5
   1096e:	481e      	ldr	r0, [pc, #120]	; (109e8 <z_arm_fatal_error+0xc0>)
   10970:	e9c5 2307 	strd	r2, r3, [r5, #28]
   10974:	e9c5 0105 	strd	r0, r1, [r5, #20]
   10978:	f8c5 a010 	str.w	sl, [r5, #16]
   1097c:	2300      	movs	r3, #0
   1097e:	4642      	mov	r2, r8
   10980:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   10984:	4817      	ldr	r0, [pc, #92]	; (109e4 <z_arm_fatal_error+0xbc>)
   10986:	f7fd ff6f 	bl	e868 <z_impl_z_log_msg_static_create>
   1098a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1098c:	b088      	sub	sp, #32
   1098e:	69e3      	ldr	r3, [r4, #28]
   10990:	466d      	mov	r5, sp
   10992:	f04f 0a03 	mov.w	sl, #3
   10996:	46a8      	mov	r8, r5
   10998:	4a14      	ldr	r2, [pc, #80]	; (109ec <z_arm_fatal_error+0xc4>)
   1099a:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1099e:	f848 af10 	str.w	sl, [r8, #16]!
   109a2:	2300      	movs	r3, #0
   109a4:	4642      	mov	r2, r8
   109a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   109aa:	480e      	ldr	r0, [pc, #56]	; (109e4 <z_arm_fatal_error+0xbc>)
   109ac:	f7fd ff5c 	bl	e868 <z_impl_z_log_msg_static_create>
   109b0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   109b2:	69a3      	ldr	r3, [r4, #24]
   109b4:	46ad      	mov	sp, r5
   109b6:	4a0e      	ldr	r2, [pc, #56]	; (109f0 <z_arm_fatal_error+0xc8>)
   109b8:	f8c5 a010 	str.w	sl, [r5, #16]
   109bc:	e9c5 2305 	strd	r2, r3, [r5, #20]
   109c0:	2300      	movs	r3, #0
   109c2:	4642      	mov	r2, r8
   109c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   109c8:	4806      	ldr	r0, [pc, #24]	; (109e4 <z_arm_fatal_error+0xbc>)
   109ca:	f7fd ff4d 	bl	e868 <z_impl_z_log_msg_static_create>
   109ce:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   109d0:	4621      	mov	r1, r4
   109d2:	4648      	mov	r0, r9
   109d4:	f013 fe7c 	bl	246d0 <z_fatal_error>
}
   109d8:	46bd      	mov	sp, r7
   109da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   109de:	bf00      	nop
   109e0:	00033bf8 	.word	0x00033bf8
   109e4:	0003157c 	.word	0x0003157c
   109e8:	00033c27 	.word	0x00033c27
   109ec:	00033c56 	.word	0x00033c56
   109f0:	00033c65 	.word	0x00033c65

000109f4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   109f4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   109f6:	2800      	cmp	r0, #0
   109f8:	db07      	blt.n	10a0a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   109fa:	2301      	movs	r3, #1
   109fc:	0941      	lsrs	r1, r0, #5
   109fe:	4a03      	ldr	r2, [pc, #12]	; (10a0c <arch_irq_enable+0x18>)
   10a00:	f000 001f 	and.w	r0, r0, #31
   10a04:	4083      	lsls	r3, r0
   10a06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10a0a:	4770      	bx	lr
   10a0c:	e000e100 	.word	0xe000e100

00010a10 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10a10:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10a12:	2800      	cmp	r0, #0
   10a14:	db0c      	blt.n	10a30 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10a16:	2201      	movs	r2, #1
   10a18:	4906      	ldr	r1, [pc, #24]	; (10a34 <arch_irq_disable+0x24>)
   10a1a:	0943      	lsrs	r3, r0, #5
   10a1c:	f000 001f 	and.w	r0, r0, #31
   10a20:	4082      	lsls	r2, r0
   10a22:	3320      	adds	r3, #32
   10a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10a2c:	f3bf 8f6f 	isb	sy
}
   10a30:	4770      	bx	lr
   10a32:	bf00      	nop
   10a34:	e000e100 	.word	0xe000e100

00010a38 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10a38:	4b05      	ldr	r3, [pc, #20]	; (10a50 <arch_irq_is_enabled+0x18>)
   10a3a:	0942      	lsrs	r2, r0, #5
   10a3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10a40:	2301      	movs	r3, #1
   10a42:	f000 001f 	and.w	r0, r0, #31
   10a46:	fa03 f000 	lsl.w	r0, r3, r0
}
   10a4a:	4010      	ands	r0, r2
   10a4c:	4770      	bx	lr
   10a4e:	bf00      	nop
   10a50:	e000e100 	.word	0xe000e100

00010a54 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   10a54:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   10a56:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10a58:	2b07      	cmp	r3, #7
{
   10a5a:	4604      	mov	r4, r0
   10a5c:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10a5e:	d90f      	bls.n	10a80 <z_arm_irq_priority_set+0x2c>
   10a60:	235b      	movs	r3, #91	; 0x5b
   10a62:	4a10      	ldr	r2, [pc, #64]	; (10aa4 <z_arm_irq_priority_set+0x50>)
   10a64:	4910      	ldr	r1, [pc, #64]	; (10aa8 <z_arm_irq_priority_set+0x54>)
   10a66:	4811      	ldr	r0, [pc, #68]	; (10aac <z_arm_irq_priority_set+0x58>)
   10a68:	f019 fe13 	bl	2a692 <assert_print>
   10a6c:	4629      	mov	r1, r5
   10a6e:	4810      	ldr	r0, [pc, #64]	; (10ab0 <z_arm_irq_priority_set+0x5c>)
   10a70:	2307      	movs	r3, #7
   10a72:	4622      	mov	r2, r4
   10a74:	f019 fe0d 	bl	2a692 <assert_print>
   10a78:	215b      	movs	r1, #91	; 0x5b
   10a7a:	480a      	ldr	r0, [pc, #40]	; (10aa4 <z_arm_irq_priority_set+0x50>)
   10a7c:	f019 fe02 	bl	2a684 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10a80:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10a82:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10a84:	bfac      	ite	ge
   10a86:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10a8a:	4a0a      	ldrlt	r2, [pc, #40]	; (10ab4 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10a8c:	ea4f 1343 	mov.w	r3, r3, lsl #5
   10a90:	b2db      	uxtb	r3, r3
   10a92:	bfab      	itete	ge
   10a94:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10a98:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10a9c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10aa0:	5413      	strblt	r3, [r2, r0]
}
   10aa2:	bd38      	pop	{r3, r4, r5, pc}
   10aa4:	00033c93 	.word	0x00033c93
   10aa8:	00033cc9 	.word	0x00033cc9
   10aac:	00032629 	.word	0x00032629
   10ab0:	00033ce4 	.word	0x00033ce4
   10ab4:	e000ed14 	.word	0xe000ed14

00010ab8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10ab8:	bf30      	wfi
    b z_SysNmiOnReset
   10aba:	f7ff bffd 	b.w	10ab8 <z_SysNmiOnReset>
   10abe:	bf00      	nop

00010ac0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10ac0:	4a0b      	ldr	r2, [pc, #44]	; (10af0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   10ac2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10ac4:	4b0b      	ldr	r3, [pc, #44]	; (10af4 <z_arm_prep_c+0x34>)
   10ac6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10aca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   10acc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10ad0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10ad4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10ad8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10ae0:	f013 fec8 	bl	24874 <z_bss_zero>
	z_data_copy();
   10ae4:	f016 fdc2 	bl	2766c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10ae8:	f000 fc06 	bl	112f8 <z_arm_interrupt_init>
	z_cstart();
   10aec:	f013 ff02 	bl	248f4 <z_cstart>
   10af0:	00008000 	.word	0x00008000
   10af4:	e000ed00 	.word	0xe000ed00

00010af8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10af8:	4a09      	ldr	r2, [pc, #36]	; (10b20 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10afa:	490a      	ldr	r1, [pc, #40]	; (10b24 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10afc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   10afe:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   10b00:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   10b02:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10b04:	4908      	ldr	r1, [pc, #32]	; (10b28 <arch_swap+0x30>)
   10b06:	684b      	ldr	r3, [r1, #4]
   10b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10b0c:	604b      	str	r3, [r1, #4]
   10b0e:	2300      	movs	r3, #0
   10b10:	f383 8811 	msr	BASEPRI, r3
   10b14:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10b18:	6893      	ldr	r3, [r2, #8]
}
   10b1a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10b1c:	4770      	bx	lr
   10b1e:	bf00      	nop
   10b20:	20021a88 	.word	0x20021a88
   10b24:	00032504 	.word	0x00032504
   10b28:	e000ed00 	.word	0xe000ed00

00010b2c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10b2c:	4915      	ldr	r1, [pc, #84]	; (10b84 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10b2e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   10b30:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10b34:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10b38:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10b3a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10b3e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10b42:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   10b44:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10b48:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10b4c:	4f0e      	ldr	r7, [pc, #56]	; (10b88 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10b4e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10b52:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   10b54:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10b56:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   10b58:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10b5c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   10b5e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10b60:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10b62:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10b66:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10b6a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10b6e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   10b72:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   10b76:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   10b78:	f01b f8d6 	bl	2bd28 <configure_builtin_stack_guard>
    pop {r2, lr}
   10b7c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   10b80:	4770      	bx	lr
   10b82:	0000      	.short	0x0000
    ldr r1, =_kernel
   10b84:	20021a88 	.word	0x20021a88
    ldr v4, =_SCS_ICSR
   10b88:	e000ed04 	.word	0xe000ed04

00010b8c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   10b8c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10b90:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10b92:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10b96:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10b9a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10b9c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10ba0:	2902      	cmp	r1, #2
    beq _oops
   10ba2:	d0ff      	beq.n	10ba4 <_oops>

00010ba4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10ba4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   10ba6:	f01b f8b0 	bl	2bd0a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   10baa:	bd01      	pop	{r0, pc}

00010bac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   10bac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   10bb0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   10bb2:	490d      	ldr	r1, [pc, #52]	; (10be8 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   10bb4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   10bb8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   10bba:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   10bbe:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   10bc2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   10bc4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   10bc8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   10bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10bd0:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   10bd4:	2300      	movs	r3, #0
   10bd6:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   10bd8:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10bdc:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   10bde:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   10be0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10be4:	4770      	bx	lr
   10be6:	bf00      	nop
   10be8:	0002a343 	.word	0x0002a343

00010bec <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10bec:	4b08      	ldr	r3, [pc, #32]	; (10c10 <arch_switch_to_main_thread+0x24>)
   10bee:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   10bf0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   10bf2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10bf6:	4610      	mov	r0, r2
   10bf8:	f381 8809 	msr	PSP, r1
   10bfc:	2100      	movs	r1, #0
   10bfe:	b663      	cpsie	if
   10c00:	f381 8811 	msr	BASEPRI, r1
   10c04:	f3bf 8f6f 	isb	sy
   10c08:	2200      	movs	r2, #0
   10c0a:	2300      	movs	r3, #0
   10c0c:	f019 fb99 	bl	2a342 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10c10:	20021a88 	.word	0x20021a88

00010c14 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10c14:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10c16:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10c18:	4a0b      	ldr	r2, [pc, #44]	; (10c48 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10c1a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   10c1c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10c1e:	bf1e      	ittt	ne
	movne	r1, #0
   10c20:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10c22:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   10c24:	f01f fa89 	blne	3013a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10c28:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10c2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10c2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10c32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10c36:	4905      	ldr	r1, [pc, #20]	; (10c4c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10c38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10c3a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10c3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10c3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   10c42:	4903      	ldr	r1, [pc, #12]	; (10c50 <_isr_wrapper+0x3c>)
	bx r1
   10c44:	4708      	bx	r1
   10c46:	0000      	.short	0x0000
	ldr r2, =_kernel
   10c48:	20021a88 	.word	0x20021a88
	ldr r1, =_sw_isr_table
   10c4c:	0003102c 	.word	0x0003102c
	ldr r1, =z_arm_int_exit
   10c50:	00010c55 	.word	0x00010c55

00010c54 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10c54:	4b04      	ldr	r3, [pc, #16]	; (10c68 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10c56:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10c58:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10c5a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10c5c:	d003      	beq.n	10c66 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   10c5e:	4903      	ldr	r1, [pc, #12]	; (10c6c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10c64:	600a      	str	r2, [r1, #0]

00010c66 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10c66:	4770      	bx	lr
	ldr r3, =_kernel
   10c68:	20021a88 	.word	0x20021a88
	ldr r1, =_SCS_ICSR
   10c6c:	e000ed04 	.word	0xe000ed04

00010c70 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c74:	b086      	sub	sp, #24
   10c76:	4606      	mov	r6, r0
   10c78:	460d      	mov	r5, r1
   10c7a:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   10c7c:	2402      	movs	r4, #2
   10c7e:	4b4b      	ldr	r3, [pc, #300]	; (10dac <mem_manage_fault.constprop.0+0x13c>)
   10c80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c84:	617b      	str	r3, [r7, #20]
   10c86:	484a      	ldr	r0, [pc, #296]	; (10db0 <mem_manage_fault.constprop.0+0x140>)
   10c88:	613c      	str	r4, [r7, #16]
   10c8a:	f107 0210 	add.w	r2, r7, #16
   10c8e:	f01b f84f 	bl	2bd30 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10c92:	4b48      	ldr	r3, [pc, #288]	; (10db4 <mem_manage_fault.constprop.0+0x144>)
   10c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10c96:	06db      	lsls	r3, r3, #27
   10c98:	d509      	bpl.n	10cae <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   10c9a:	4b47      	ldr	r3, [pc, #284]	; (10db8 <mem_manage_fault.constprop.0+0x148>)
   10c9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ca0:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10ca4:	4842      	ldr	r0, [pc, #264]	; (10db0 <mem_manage_fault.constprop.0+0x140>)
   10ca6:	f107 0210 	add.w	r2, r7, #16
   10caa:	f01b f841 	bl	2bd30 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10cae:	4b41      	ldr	r3, [pc, #260]	; (10db4 <mem_manage_fault.constprop.0+0x144>)
   10cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10cb2:	0718      	lsls	r0, r3, #28
   10cb4:	d50a      	bpl.n	10ccc <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10cb6:	4b41      	ldr	r3, [pc, #260]	; (10dbc <mem_manage_fault.constprop.0+0x14c>)
   10cb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10cbc:	617b      	str	r3, [r7, #20]
   10cbe:	2302      	movs	r3, #2
   10cc0:	483b      	ldr	r0, [pc, #236]	; (10db0 <mem_manage_fault.constprop.0+0x140>)
   10cc2:	613b      	str	r3, [r7, #16]
   10cc4:	f107 0210 	add.w	r2, r7, #16
   10cc8:	f01b f832 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10ccc:	4c39      	ldr	r4, [pc, #228]	; (10db4 <mem_manage_fault.constprop.0+0x144>)
   10cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10cd0:	0799      	lsls	r1, r3, #30
   10cd2:	d522      	bpl.n	10d1a <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   10cd4:	46e8      	mov	r8, sp
   10cd6:	4b3a      	ldr	r3, [pc, #232]	; (10dc0 <mem_manage_fault.constprop.0+0x150>)
   10cd8:	f107 0210 	add.w	r2, r7, #16
   10cdc:	617b      	str	r3, [r7, #20]
   10cde:	2302      	movs	r3, #2
   10ce0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ce4:	613b      	str	r3, [r7, #16]
   10ce6:	4832      	ldr	r0, [pc, #200]	; (10db0 <mem_manage_fault.constprop.0+0x140>)
   10ce8:	f01b f822 	bl	2bd30 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   10cec:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10cee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10cf0:	0612      	lsls	r2, r2, #24
   10cf2:	d512      	bpl.n	10d1a <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10cf4:	b088      	sub	sp, #32
   10cf6:	466a      	mov	r2, sp
   10cf8:	4932      	ldr	r1, [pc, #200]	; (10dc4 <mem_manage_fault.constprop.0+0x154>)
   10cfa:	482d      	ldr	r0, [pc, #180]	; (10db0 <mem_manage_fault.constprop.0+0x140>)
   10cfc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10d00:	2303      	movs	r3, #3
   10d02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10d06:	f842 3f10 	str.w	r3, [r2, #16]!
   10d0a:	f01b f811 	bl	2bd30 <z_log_msg_static_create.constprop.0>
   10d0e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10d10:	b11e      	cbz	r6, 10d1a <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10d18:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10d1a:	4b26      	ldr	r3, [pc, #152]	; (10db4 <mem_manage_fault.constprop.0+0x144>)
   10d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d1e:	07db      	lsls	r3, r3, #31
   10d20:	d50a      	bpl.n	10d38 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   10d22:	4b29      	ldr	r3, [pc, #164]	; (10dc8 <mem_manage_fault.constprop.0+0x158>)
   10d24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d28:	617b      	str	r3, [r7, #20]
   10d2a:	2302      	movs	r3, #2
   10d2c:	4820      	ldr	r0, [pc, #128]	; (10db0 <mem_manage_fault.constprop.0+0x140>)
   10d2e:	613b      	str	r3, [r7, #16]
   10d30:	f107 0210 	add.w	r2, r7, #16
   10d34:	f01a fffc 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10d38:	4b1e      	ldr	r3, [pc, #120]	; (10db4 <mem_manage_fault.constprop.0+0x144>)
   10d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d3c:	069e      	lsls	r6, r3, #26
   10d3e:	d50a      	bpl.n	10d56 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   10d40:	4b22      	ldr	r3, [pc, #136]	; (10dcc <mem_manage_fault.constprop.0+0x15c>)
   10d42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d46:	617b      	str	r3, [r7, #20]
   10d48:	2302      	movs	r3, #2
   10d4a:	4819      	ldr	r0, [pc, #100]	; (10db0 <mem_manage_fault.constprop.0+0x140>)
   10d4c:	613b      	str	r3, [r7, #16]
   10d4e:	f107 0210 	add.w	r2, r7, #16
   10d52:	f01a ffed 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10d56:	4b17      	ldr	r3, [pc, #92]	; (10db4 <mem_manage_fault.constprop.0+0x144>)
   10d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10d5a:	06d4      	lsls	r4, r2, #27
   10d5c:	d402      	bmi.n	10d64 <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10d60:	0790      	lsls	r0, r2, #30
   10d62:	d511      	bpl.n	10d88 <mem_manage_fault.constprop.0+0x118>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   10d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d66:	06d9      	lsls	r1, r3, #27
   10d68:	d50e      	bpl.n	10d88 <mem_manage_fault.constprop.0+0x118>
   10d6a:	4919      	ldr	r1, [pc, #100]	; (10dd0 <mem_manage_fault.constprop.0+0x160>)
   10d6c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   10d70:	4a18      	ldr	r2, [pc, #96]	; (10dd4 <mem_manage_fault.constprop.0+0x164>)
   10d72:	4819      	ldr	r0, [pc, #100]	; (10dd8 <mem_manage_fault.constprop.0+0x168>)
   10d74:	f019 fc8d 	bl	2a692 <assert_print>
   10d78:	4818      	ldr	r0, [pc, #96]	; (10ddc <mem_manage_fault.constprop.0+0x16c>)
   10d7a:	f019 fc8a 	bl	2a692 <assert_print>
   10d7e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   10d82:	4814      	ldr	r0, [pc, #80]	; (10dd4 <mem_manage_fault.constprop.0+0x164>)
   10d84:	f019 fc7e 	bl	2a684 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   10d88:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10d8a:	4b0a      	ldr	r3, [pc, #40]	; (10db4 <mem_manage_fault.constprop.0+0x144>)

	return reason;
}
   10d8c:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10d90:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   10d92:	bf42      	ittt	mi
   10d94:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   10d96:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   10d9a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10d9e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   10da2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10da4:	7028      	strb	r0, [r5, #0]
}
   10da6:	46bd      	mov	sp, r7
   10da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dac:	00033d24 	.word	0x00033d24
   10db0:	0003157c 	.word	0x0003157c
   10db4:	e000ed00 	.word	0xe000ed00
   10db8:	00033d3a 	.word	0x00033d3a
   10dbc:	00033d6d 	.word	0x00033d6d
   10dc0:	00033d80 	.word	0x00033d80
   10dc4:	00033d98 	.word	0x00033d98
   10dc8:	00033dae 	.word	0x00033dae
   10dcc:	00033dcd 	.word	0x00033dcd
   10dd0:	00033e36 	.word	0x00033e36
   10dd4:	00033dfc 	.word	0x00033dfc
   10dd8:	00032629 	.word	0x00032629
   10ddc:	00033e80 	.word	0x00033e80

00010de0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10de4:	b086      	sub	sp, #24
   10de6:	4606      	mov	r6, r0
   10de8:	460d      	mov	r5, r1
   10dea:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   10dec:	2402      	movs	r4, #2
   10dee:	4b3e      	ldr	r3, [pc, #248]	; (10ee8 <bus_fault.constprop.0+0x108>)
   10df0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10df4:	617b      	str	r3, [r7, #20]
   10df6:	483d      	ldr	r0, [pc, #244]	; (10eec <bus_fault.constprop.0+0x10c>)
   10df8:	613c      	str	r4, [r7, #16]
   10dfa:	f107 0210 	add.w	r2, r7, #16
   10dfe:	f01a ff97 	bl	2bd30 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10e02:	4b3b      	ldr	r3, [pc, #236]	; (10ef0 <bus_fault.constprop.0+0x110>)
   10e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e06:	04d9      	lsls	r1, r3, #19
   10e08:	d509      	bpl.n	10e1e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   10e0a:	4b3a      	ldr	r3, [pc, #232]	; (10ef4 <bus_fault.constprop.0+0x114>)
   10e0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e10:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10e14:	4835      	ldr	r0, [pc, #212]	; (10eec <bus_fault.constprop.0+0x10c>)
   10e16:	f107 0210 	add.w	r2, r7, #16
   10e1a:	f01a ff89 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10e1e:	4b34      	ldr	r3, [pc, #208]	; (10ef0 <bus_fault.constprop.0+0x110>)
   10e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e22:	051a      	lsls	r2, r3, #20
   10e24:	d50a      	bpl.n	10e3c <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10e26:	4b34      	ldr	r3, [pc, #208]	; (10ef8 <bus_fault.constprop.0+0x118>)
   10e28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e2c:	617b      	str	r3, [r7, #20]
   10e2e:	2302      	movs	r3, #2
   10e30:	482e      	ldr	r0, [pc, #184]	; (10eec <bus_fault.constprop.0+0x10c>)
   10e32:	613b      	str	r3, [r7, #16]
   10e34:	f107 0210 	add.w	r2, r7, #16
   10e38:	f01a ff7a 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10e3c:	4c2c      	ldr	r4, [pc, #176]	; (10ef0 <bus_fault.constprop.0+0x110>)
   10e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10e40:	059b      	lsls	r3, r3, #22
   10e42:	d522      	bpl.n	10e8a <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   10e44:	46e8      	mov	r8, sp
   10e46:	4b2d      	ldr	r3, [pc, #180]	; (10efc <bus_fault.constprop.0+0x11c>)
   10e48:	4828      	ldr	r0, [pc, #160]	; (10eec <bus_fault.constprop.0+0x10c>)
   10e4a:	617b      	str	r3, [r7, #20]
   10e4c:	2302      	movs	r3, #2
   10e4e:	f107 0210 	add.w	r2, r7, #16
   10e52:	613b      	str	r3, [r7, #16]
   10e54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e58:	f01a ff6a 	bl	2bd30 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10e5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10e5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10e60:	0410      	lsls	r0, r2, #16
   10e62:	d512      	bpl.n	10e8a <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10e64:	b088      	sub	sp, #32
   10e66:	466a      	mov	r2, sp
   10e68:	4925      	ldr	r1, [pc, #148]	; (10f00 <bus_fault.constprop.0+0x120>)
   10e6a:	4820      	ldr	r0, [pc, #128]	; (10eec <bus_fault.constprop.0+0x10c>)
   10e6c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10e70:	2303      	movs	r3, #3
   10e72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10e76:	f842 3f10 	str.w	r3, [r2, #16]!
   10e7a:	f01a ff59 	bl	2bd30 <z_log_msg_static_create.constprop.0>
   10e7e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10e80:	b11e      	cbz	r6, 10e8a <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10e82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10e84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10e88:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10e8a:	4b19      	ldr	r3, [pc, #100]	; (10ef0 <bus_fault.constprop.0+0x110>)
   10e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e8e:	0559      	lsls	r1, r3, #21
   10e90:	d50a      	bpl.n	10ea8 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   10e92:	4b1c      	ldr	r3, [pc, #112]	; (10f04 <bus_fault.constprop.0+0x124>)
   10e94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e98:	617b      	str	r3, [r7, #20]
   10e9a:	2302      	movs	r3, #2
   10e9c:	4813      	ldr	r0, [pc, #76]	; (10eec <bus_fault.constprop.0+0x10c>)
   10e9e:	613b      	str	r3, [r7, #16]
   10ea0:	f107 0210 	add.w	r2, r7, #16
   10ea4:	f01a ff44 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10ea8:	4b11      	ldr	r3, [pc, #68]	; (10ef0 <bus_fault.constprop.0+0x110>)
   10eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10eac:	05d2      	lsls	r2, r2, #23
   10eae:	d515      	bpl.n	10edc <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   10eb0:	4b15      	ldr	r3, [pc, #84]	; (10f08 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10eb2:	617b      	str	r3, [r7, #20]
   10eb4:	2302      	movs	r3, #2
   10eb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10eba:	480c      	ldr	r0, [pc, #48]	; (10eec <bus_fault.constprop.0+0x10c>)
   10ebc:	613b      	str	r3, [r7, #16]
   10ebe:	f107 0210 	add.w	r2, r7, #16
   10ec2:	f01a ff35 	bl	2bd30 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   10ec6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10ec8:	4a09      	ldr	r2, [pc, #36]	; (10ef0 <bus_fault.constprop.0+0x110>)

	return reason;
}
   10eca:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10ecc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10ece:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10ed2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10ed4:	7028      	strb	r0, [r5, #0]
}
   10ed6:	46bd      	mov	sp, r7
   10ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ede:	049b      	lsls	r3, r3, #18
   10ee0:	d5f1      	bpl.n	10ec6 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10ee2:	4b0a      	ldr	r3, [pc, #40]	; (10f0c <bus_fault.constprop.0+0x12c>)
   10ee4:	e7e5      	b.n	10eb2 <bus_fault.constprop.0+0xd2>
   10ee6:	bf00      	nop
   10ee8:	00033ee4 	.word	0x00033ee4
   10eec:	0003157c 	.word	0x0003157c
   10ef0:	e000ed00 	.word	0xe000ed00
   10ef4:	00033efa 	.word	0x00033efa
   10ef8:	00033d6d 	.word	0x00033d6d
   10efc:	00033f0b 	.word	0x00033f0b
   10f00:	00033f24 	.word	0x00033f24
   10f04:	00033f39 	.word	0x00033f39
   10f08:	00033f54 	.word	0x00033f54
   10f0c:	00033dcd 	.word	0x00033dcd

00010f10 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   10f10:	b510      	push	{r4, lr}
   10f12:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   10f14:	2402      	movs	r4, #2
   10f16:	4b3a      	ldr	r3, [pc, #232]	; (11000 <usage_fault.constprop.0+0xf0>)
   10f18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f1c:	4839      	ldr	r0, [pc, #228]	; (11004 <usage_fault.constprop.0+0xf4>)
   10f1e:	aa04      	add	r2, sp, #16
   10f20:	9305      	str	r3, [sp, #20]
   10f22:	9404      	str	r4, [sp, #16]
   10f24:	f01a ff04 	bl	2bd30 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   10f28:	4b37      	ldr	r3, [pc, #220]	; (11008 <usage_fault.constprop.0+0xf8>)
   10f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f2c:	019b      	lsls	r3, r3, #6
   10f2e:	d508      	bpl.n	10f42 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   10f30:	4b36      	ldr	r3, [pc, #216]	; (1100c <usage_fault.constprop.0+0xfc>)
   10f32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f36:	4833      	ldr	r0, [pc, #204]	; (11004 <usage_fault.constprop.0+0xf4>)
   10f38:	aa04      	add	r2, sp, #16
   10f3a:	e9cd 4304 	strd	r4, r3, [sp, #16]
   10f3e:	f01a fef7 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10f42:	4b31      	ldr	r3, [pc, #196]	; (11008 <usage_fault.constprop.0+0xf8>)
   10f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f46:	01dc      	lsls	r4, r3, #7
   10f48:	d509      	bpl.n	10f5e <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   10f4a:	4b31      	ldr	r3, [pc, #196]	; (11010 <usage_fault.constprop.0+0x100>)
   10f4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f50:	9305      	str	r3, [sp, #20]
   10f52:	2302      	movs	r3, #2
   10f54:	482b      	ldr	r0, [pc, #172]	; (11004 <usage_fault.constprop.0+0xf4>)
   10f56:	aa04      	add	r2, sp, #16
   10f58:	9304      	str	r3, [sp, #16]
   10f5a:	f01a fee9 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   10f5e:	4b2a      	ldr	r3, [pc, #168]	; (11008 <usage_fault.constprop.0+0xf8>)
   10f60:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   10f62:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   10f66:	d009      	beq.n	10f7c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   10f68:	2402      	movs	r4, #2
   10f6a:	4b2a      	ldr	r3, [pc, #168]	; (11014 <usage_fault.constprop.0+0x104>)
   10f6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f70:	4824      	ldr	r0, [pc, #144]	; (11004 <usage_fault.constprop.0+0xf4>)
   10f72:	aa04      	add	r2, sp, #16
   10f74:	9305      	str	r3, [sp, #20]
   10f76:	9404      	str	r4, [sp, #16]
   10f78:	f01a feda 	bl	2bd30 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10f7c:	4b22      	ldr	r3, [pc, #136]	; (11008 <usage_fault.constprop.0+0xf8>)
   10f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f80:	0318      	lsls	r0, r3, #12
   10f82:	d509      	bpl.n	10f98 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   10f84:	4b24      	ldr	r3, [pc, #144]	; (11018 <usage_fault.constprop.0+0x108>)
   10f86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f8a:	9305      	str	r3, [sp, #20]
   10f8c:	2302      	movs	r3, #2
   10f8e:	481d      	ldr	r0, [pc, #116]	; (11004 <usage_fault.constprop.0+0xf4>)
   10f90:	aa04      	add	r2, sp, #16
   10f92:	9304      	str	r3, [sp, #16]
   10f94:	f01a fecc 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   10f98:	4b1b      	ldr	r3, [pc, #108]	; (11008 <usage_fault.constprop.0+0xf8>)
   10f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f9c:	0359      	lsls	r1, r3, #13
   10f9e:	d509      	bpl.n	10fb4 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   10fa0:	4b1e      	ldr	r3, [pc, #120]	; (1101c <usage_fault.constprop.0+0x10c>)
   10fa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fa6:	9305      	str	r3, [sp, #20]
   10fa8:	2302      	movs	r3, #2
   10faa:	4816      	ldr	r0, [pc, #88]	; (11004 <usage_fault.constprop.0+0xf4>)
   10fac:	aa04      	add	r2, sp, #16
   10fae:	9304      	str	r3, [sp, #16]
   10fb0:	f01a febe 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10fb4:	4b14      	ldr	r3, [pc, #80]	; (11008 <usage_fault.constprop.0+0xf8>)
   10fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fb8:	039a      	lsls	r2, r3, #14
   10fba:	d509      	bpl.n	10fd0 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   10fbc:	4b18      	ldr	r3, [pc, #96]	; (11020 <usage_fault.constprop.0+0x110>)
   10fbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fc2:	9305      	str	r3, [sp, #20]
   10fc4:	2302      	movs	r3, #2
   10fc6:	480f      	ldr	r0, [pc, #60]	; (11004 <usage_fault.constprop.0+0xf4>)
   10fc8:	aa04      	add	r2, sp, #16
   10fca:	9304      	str	r3, [sp, #16]
   10fcc:	f01a feb0 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   10fd0:	4b0d      	ldr	r3, [pc, #52]	; (11008 <usage_fault.constprop.0+0xf8>)
   10fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fd4:	03db      	lsls	r3, r3, #15
   10fd6:	d509      	bpl.n	10fec <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   10fd8:	4b12      	ldr	r3, [pc, #72]	; (11024 <usage_fault.constprop.0+0x114>)
   10fda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fde:	9305      	str	r3, [sp, #20]
   10fe0:	2302      	movs	r3, #2
   10fe2:	4808      	ldr	r0, [pc, #32]	; (11004 <usage_fault.constprop.0+0xf4>)
   10fe4:	aa04      	add	r2, sp, #16
   10fe6:	9304      	str	r3, [sp, #16]
   10fe8:	f01a fea2 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10fec:	4a06      	ldr	r2, [pc, #24]	; (11008 <usage_fault.constprop.0+0xf8>)

	return reason;
}
   10fee:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10ff0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10ff2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   10ff6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   10ffa:	6293      	str	r3, [r2, #40]	; 0x28
}
   10ffc:	b006      	add	sp, #24
   10ffe:	bd10      	pop	{r4, pc}
   11000:	00033f6c 	.word	0x00033f6c
   11004:	0003157c 	.word	0x0003157c
   11008:	e000ed00 	.word	0xe000ed00
   1100c:	00033f84 	.word	0x00033f84
   11010:	00033f97 	.word	0x00033f97
   11014:	00033fb1 	.word	0x00033fb1
   11018:	00033fdb 	.word	0x00033fdb
   1101c:	00033ff9 	.word	0x00033ff9
   11020:	0003401e 	.word	0x0003401e
   11024:	00034038 	.word	0x00034038

00011028 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1102c:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1102e:	4b93      	ldr	r3, [pc, #588]	; (1127c <z_arm_fault+0x254>)
{
   11030:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11032:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   11036:	4688      	mov	r8, r1
   11038:	4616      	mov	r6, r2
   1103a:	2300      	movs	r3, #0
   1103c:	af00      	add	r7, sp, #0
   1103e:	f3ca 0908 	ubfx	r9, sl, #0, #9
   11042:	f383 8811 	msr	BASEPRI, r3
   11046:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1104a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1104e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11052:	d00e      	beq.n	11072 <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   11054:	498a      	ldr	r1, [pc, #552]	; (11280 <z_arm_fault+0x258>)
   11056:	f44f 6384 	mov.w	r3, #1056	; 0x420
   1105a:	4a8a      	ldr	r2, [pc, #552]	; (11284 <z_arm_fault+0x25c>)
   1105c:	488a      	ldr	r0, [pc, #552]	; (11288 <z_arm_fault+0x260>)
   1105e:	f019 fb18 	bl	2a692 <assert_print>
   11062:	488a      	ldr	r0, [pc, #552]	; (1128c <z_arm_fault+0x264>)
   11064:	f019 fb15 	bl	2a692 <assert_print>
   11068:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   1106c:	4885      	ldr	r0, [pc, #532]	; (11284 <z_arm_fault+0x25c>)
   1106e:	f019 fb09 	bl	2a684 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   11072:	f012 0401 	ands.w	r4, r2, #1
   11076:	d1ed      	bne.n	11054 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11078:	0653      	lsls	r3, r2, #25
   1107a:	d404      	bmi.n	11086 <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1107c:	0710      	lsls	r0, r2, #28
   1107e:	d40f      	bmi.n	110a0 <z_arm_fault+0x78>
			*nested_exc = true;
   11080:	f04f 0801 	mov.w	r8, #1
   11084:	e00f      	b.n	110a6 <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   11086:	4b82      	ldr	r3, [pc, #520]	; (11290 <z_arm_fault+0x268>)
   11088:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1108c:	61fb      	str	r3, [r7, #28]
   1108e:	2302      	movs	r3, #2
   11090:	4880      	ldr	r0, [pc, #512]	; (11294 <z_arm_fault+0x26c>)
   11092:	61bb      	str	r3, [r7, #24]
   11094:	f107 0218 	add.w	r2, r7, #24
   11098:	f01a fe4a 	bl	2bd30 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1109c:	0771      	lsls	r1, r6, #29
   1109e:	d500      	bpl.n	110a2 <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
   110a0:	4645      	mov	r5, r8
	*nested_exc = false;
   110a2:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
   110a6:	2d00      	cmp	r5, #0
   110a8:	d0d4      	beq.n	11054 <z_arm_fault+0x2c>
	*recoverable = false;
   110aa:	2300      	movs	r3, #0
   110ac:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   110ae:	f1a9 0303 	sub.w	r3, r9, #3
   110b2:	2b09      	cmp	r3, #9
   110b4:	f200 80c1 	bhi.w	1123a <z_arm_fault+0x212>
   110b8:	e8df f003 	tbb	[pc, r3]
   110bc:	97b7b405 	.word	0x97b7b405
   110c0:	bfbfbfbf 	.word	0xbfbfbfbf
   110c4:	babf      	.short	0xbabf
	PR_FAULT_INFO("***** HARD FAULT *****");
   110c6:	46e9      	mov	r9, sp
   110c8:	f04f 0a02 	mov.w	sl, #2
   110cc:	4b72      	ldr	r3, [pc, #456]	; (11298 <z_arm_fault+0x270>)
   110ce:	f107 0218 	add.w	r2, r7, #24
   110d2:	61fb      	str	r3, [r7, #28]
   110d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   110d8:	486e      	ldr	r0, [pc, #440]	; (11294 <z_arm_fault+0x26c>)
   110da:	f8c7 a018 	str.w	sl, [r7, #24]
   110de:	f01a fe27 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   110e2:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   110e4:	4e65      	ldr	r6, [pc, #404]	; (1127c <z_arm_fault+0x254>)
	*recoverable = false;
   110e6:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   110e8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   110ea:	079a      	lsls	r2, r3, #30
   110ec:	d50a      	bpl.n	11104 <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
   110ee:	4b6b      	ldr	r3, [pc, #428]	; (1129c <z_arm_fault+0x274>)
		PR_EXC("  Debug event");
   110f0:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   110f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   110f8:	4866      	ldr	r0, [pc, #408]	; (11294 <z_arm_fault+0x26c>)
   110fa:	f107 0218 	add.w	r2, r7, #24
   110fe:	f01a fe17 	bl	2bd30 <z_log_msg_static_create.constprop.0>
}
   11102:	e042      	b.n	1118a <z_arm_fault+0x162>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11104:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11106:	2b00      	cmp	r3, #0
   11108:	da01      	bge.n	1110e <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
   1110a:	4b65      	ldr	r3, [pc, #404]	; (112a0 <z_arm_fault+0x278>)
   1110c:	e7f0      	b.n	110f0 <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1110e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11110:	005b      	lsls	r3, r3, #1
   11112:	d57a      	bpl.n	1120a <z_arm_fault+0x1e2>
		PR_EXC("  Fault escalation (see below)");
   11114:	4b63      	ldr	r3, [pc, #396]	; (112a4 <z_arm_fault+0x27c>)
   11116:	f107 0218 	add.w	r2, r7, #24
   1111a:	e9c7 a306 	strd	sl, r3, [r7, #24]
   1111e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11122:	485c      	ldr	r0, [pc, #368]	; (11294 <z_arm_fault+0x26c>)
   11124:	f01a fe04 	bl	2bd30 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11128:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1112a:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11130:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11132:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11136:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1113a:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1113c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11144:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1114a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1114e:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11152:	429a      	cmp	r2, r3
   11154:	d009      	beq.n	1116a <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   11156:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   11158:	b2db      	uxtb	r3, r3
   1115a:	2b00      	cmp	r3, #0
   1115c:	d038      	beq.n	111d0 <z_arm_fault+0x1a8>
			reason = mem_manage_fault(esf, 1, recoverable);
   1115e:	2001      	movs	r0, #1
   11160:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   11162:	f7ff fd85 	bl	10c70 <mem_manage_fault.constprop.0>
   11166:	4604      	mov	r4, r0
		break;
   11168:	e00f      	b.n	1118a <z_arm_fault+0x162>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1116a:	b088      	sub	sp, #32
   1116c:	682b      	ldr	r3, [r5, #0]
   1116e:	466a      	mov	r2, sp
   11170:	494d      	ldr	r1, [pc, #308]	; (112a8 <z_arm_fault+0x280>)
   11172:	4848      	ldr	r0, [pc, #288]	; (11294 <z_arm_fault+0x26c>)
   11174:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11178:	2303      	movs	r3, #3
   1117a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1117e:	f842 3f10 	str.w	r3, [r2, #16]!
   11182:	f01a fdd5 	bl	2bd30 <z_log_msg_static_create.constprop.0>
   11186:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   11188:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1118a:	79fb      	ldrb	r3, [r7, #7]
   1118c:	b9e3      	cbnz	r3, 111c8 <z_arm_fault+0x1a0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1118e:	f107 0208 	add.w	r2, r7, #8
   11192:	f105 0620 	add.w	r6, r5, #32
   11196:	4613      	mov	r3, r2
   11198:	6828      	ldr	r0, [r5, #0]
   1119a:	6869      	ldr	r1, [r5, #4]
   1119c:	3508      	adds	r5, #8
   1119e:	c303      	stmia	r3!, {r0, r1}
   111a0:	42b5      	cmp	r5, r6
   111a2:	461a      	mov	r2, r3
   111a4:	d1f7      	bne.n	11196 <z_arm_fault+0x16e>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   111a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111a8:	f1b8 0f00 	cmp.w	r8, #0
   111ac:	d061      	beq.n	11272 <z_arm_fault+0x24a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   111ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
   111b2:	b922      	cbnz	r2, 111be <z_arm_fault+0x196>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   111b4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   111b8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   111bc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   111be:	4620      	mov	r0, r4
   111c0:	f107 0108 	add.w	r1, r7, #8
   111c4:	f7ff fbb0 	bl	10928 <z_arm_fatal_error>
}
   111c8:	3728      	adds	r7, #40	; 0x28
   111ca:	46bd      	mov	sp, r7
   111cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   111d0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   111d2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   111d6:	d004      	beq.n	111e2 <z_arm_fault+0x1ba>
			reason = bus_fault(esf, 1, recoverable);
   111d8:	2001      	movs	r0, #1
   111da:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   111dc:	f7ff fe00 	bl	10de0 <bus_fault.constprop.0>
   111e0:	e7c1      	b.n	11166 <z_arm_fault+0x13e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   111e2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   111e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   111e8:	d302      	bcc.n	111f0 <z_arm_fault+0x1c8>
		reason = usage_fault(esf);
   111ea:	f7ff fe91 	bl	10f10 <usage_fault.constprop.0>
   111ee:	e7ba      	b.n	11166 <z_arm_fault+0x13e>
			__ASSERT(0,
   111f0:	492e      	ldr	r1, [pc, #184]	; (112ac <z_arm_fault+0x284>)
   111f2:	f240 23f2 	movw	r3, #754	; 0x2f2
   111f6:	4a23      	ldr	r2, [pc, #140]	; (11284 <z_arm_fault+0x25c>)
   111f8:	4823      	ldr	r0, [pc, #140]	; (11288 <z_arm_fault+0x260>)
   111fa:	f019 fa4a 	bl	2a692 <assert_print>
   111fe:	482c      	ldr	r0, [pc, #176]	; (112b0 <z_arm_fault+0x288>)
   11200:	f019 fa47 	bl	2a692 <assert_print>
   11204:	f240 21f2 	movw	r1, #754	; 0x2f2
   11208:	e730      	b.n	1106c <z_arm_fault+0x44>
		__ASSERT(0,
   1120a:	4928      	ldr	r1, [pc, #160]	; (112ac <z_arm_fault+0x284>)
   1120c:	f240 23f6 	movw	r3, #758	; 0x2f6
   11210:	4a1c      	ldr	r2, [pc, #112]	; (11284 <z_arm_fault+0x25c>)
   11212:	481d      	ldr	r0, [pc, #116]	; (11288 <z_arm_fault+0x260>)
   11214:	f019 fa3d 	bl	2a692 <assert_print>
   11218:	4826      	ldr	r0, [pc, #152]	; (112b4 <z_arm_fault+0x28c>)
   1121a:	f019 fa3a 	bl	2a692 <assert_print>
   1121e:	f240 21f6 	movw	r1, #758	; 0x2f6
   11222:	e723      	b.n	1106c <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   11224:	2000      	movs	r0, #0
   11226:	1df9      	adds	r1, r7, #7
   11228:	e79b      	b.n	11162 <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
   1122a:	2000      	movs	r0, #0
   1122c:	1df9      	adds	r1, r7, #7
   1122e:	e7d5      	b.n	111dc <z_arm_fault+0x1b4>
	PR_FAULT_INFO(
   11230:	4b21      	ldr	r3, [pc, #132]	; (112b8 <z_arm_fault+0x290>)
   11232:	61fb      	str	r3, [r7, #28]
   11234:	2302      	movs	r3, #2
   11236:	61bb      	str	r3, [r7, #24]
   11238:	e75c      	b.n	110f4 <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
   1123a:	4a20      	ldr	r2, [pc, #128]	; (112bc <z_arm_fault+0x294>)
   1123c:	466e      	mov	r6, sp
   1123e:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   11242:	b08a      	sub	sp, #40	; 0x28
   11244:	4b1e      	ldr	r3, [pc, #120]	; (112c0 <z_arm_fault+0x298>)
   11246:	bf18      	it	ne
   11248:	4613      	movne	r3, r2
   1124a:	466a      	mov	r2, sp
   1124c:	491d      	ldr	r1, [pc, #116]	; (112c4 <z_arm_fault+0x29c>)
   1124e:	4811      	ldr	r0, [pc, #68]	; (11294 <z_arm_fault+0x26c>)
   11250:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11254:	f1a9 0310 	sub.w	r3, r9, #16
   11258:	61d3      	str	r3, [r2, #28]
   1125a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1125e:	8413      	strh	r3, [r2, #32]
   11260:	4b19      	ldr	r3, [pc, #100]	; (112c8 <z_arm_fault+0x2a0>)
   11262:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   11266:	f842 3f10 	str.w	r3, [r2, #16]!
   1126a:	f01a fd61 	bl	2bd30 <z_log_msg_static_create.constprop.0>
   1126e:	46b5      	mov	sp, r6
}
   11270:	e78b      	b.n	1118a <z_arm_fault+0x162>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11272:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11276:	f023 0301 	bic.w	r3, r3, #1
   1127a:	e79f      	b.n	111bc <z_arm_fault+0x194>
   1127c:	e000ed00 	.word	0xe000ed00
   11280:	00034091 	.word	0x00034091
   11284:	00033dfc 	.word	0x00033dfc
   11288:	00032629 	.word	0x00032629
   1128c:	000340a4 	.word	0x000340a4
   11290:	000340e2 	.word	0x000340e2
   11294:	0003157c 	.word	0x0003157c
   11298:	00034105 	.word	0x00034105
   1129c:	0003411c 	.word	0x0003411c
   112a0:	0003413d 	.word	0x0003413d
   112a4:	0003414b 	.word	0x0003414b
   112a8:	0003416a 	.word	0x0003416a
   112ac:	00037ac9 	.word	0x00037ac9
   112b0:	00034186 	.word	0x00034186
   112b4:	000341aa 	.word	0x000341aa
   112b8:	000341da 	.word	0x000341da
   112bc:	00034078 	.word	0x00034078
   112c0:	00034063 	.word	0x00034063
   112c4:	000341fe 	.word	0x000341fe
   112c8:	01000004 	.word	0x01000004

000112cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   112cc:	4b04      	ldr	r3, [pc, #16]	; (112e0 <z_arm_fault_init+0x14>)
   112ce:	695a      	ldr	r2, [r3, #20]
   112d0:	f042 0210 	orr.w	r2, r2, #16
   112d4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   112d6:	695a      	ldr	r2, [r3, #20]
   112d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   112dc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   112de:	4770      	bx	lr
   112e0:	e000ed00 	.word	0xe000ed00

000112e4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   112e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   112e8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   112ec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   112ee:	4672      	mov	r2, lr
	bl z_arm_fault
   112f0:	f7ff fe9a 	bl	11028 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   112f4:	bd01      	pop	{r0, pc}
   112f6:	bf00      	nop

000112f8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   112f8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112fa:	2120      	movs	r1, #32
   112fc:	4803      	ldr	r0, [pc, #12]	; (1130c <z_arm_interrupt_init+0x14>)
   112fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11300:	3301      	adds	r3, #1
   11302:	2b45      	cmp	r3, #69	; 0x45
   11304:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11308:	d1f9      	bne.n	112fe <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1130a:	4770      	bx	lr
   1130c:	e000e100 	.word	0xe000e100

00011310 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11310:	2000      	movs	r0, #0
    msr CONTROL, r0
   11312:	f380 8814 	msr	CONTROL, r0
    isb
   11316:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1131a:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1131c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   11320:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11324:	f7fc ff0a 	bl	e13c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11328:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1132a:	490e      	ldr	r1, [pc, #56]	; (11364 <__start+0x54>)
    str r0, [r1]
   1132c:	6008      	str	r0, [r1, #0]
    dsb
   1132e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11332:	480d      	ldr	r0, [pc, #52]	; (11368 <__start+0x58>)
    msr msp, r0
   11334:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11338:	f000 f83e 	bl	113b8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1133c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1133e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11342:	480a      	ldr	r0, [pc, #40]	; (1136c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11344:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11348:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1134a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1134e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11352:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11354:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11356:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1135a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1135e:	f7ff fbaf 	bl	10ac0 <z_arm_prep_c>
   11362:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   11364:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11368:	200343f0 	.word	0x200343f0
    ldr r0, =z_interrupt_stacks
   1136c:	200336b0 	.word	0x200336b0

00011370 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11370:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11374:	4905      	ldr	r1, [pc, #20]	; (1138c <sys_arch_reboot+0x1c>)
   11376:	4b06      	ldr	r3, [pc, #24]	; (11390 <sys_arch_reboot+0x20>)
   11378:	68ca      	ldr	r2, [r1, #12]
   1137a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1137e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11380:	60cb      	str	r3, [r1, #12]
   11382:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11386:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11388:	e7fd      	b.n	11386 <sys_arch_reboot+0x16>
   1138a:	bf00      	nop
   1138c:	e000ed00 	.word	0xe000ed00
   11390:	05fa0004 	.word	0x05fa0004

00011394 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   11394:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   11396:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11398:	4906      	ldr	r1, [pc, #24]	; (113b4 <z_arm_clear_arm_mpu_config+0x20>)
   1139a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1139e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   113a2:	4293      	cmp	r3, r2
   113a4:	db00      	blt.n	113a8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   113a6:	4770      	bx	lr
  mpu->RNR = rnr;
   113a8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   113ac:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   113b0:	3301      	adds	r3, #1
   113b2:	e7f6      	b.n	113a2 <z_arm_clear_arm_mpu_config+0xe>
   113b4:	e000ed00 	.word	0xe000ed00

000113b8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   113b8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   113ba:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   113bc:	2400      	movs	r4, #0
   113be:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   113c2:	f7ff ffe7 	bl	11394 <z_arm_clear_arm_mpu_config>
   113c6:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   113c8:	f04f 30ff 	mov.w	r0, #4294967295
   113cc:	4a0c      	ldr	r2, [pc, #48]	; (11400 <z_arm_init_arch_hw_at_boot+0x48>)
   113ce:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   113d2:	3301      	adds	r3, #1
   113d4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   113d6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   113da:	d1f8      	bne.n	113ce <z_arm_init_arch_hw_at_boot+0x16>
   113dc:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   113de:	f04f 30ff 	mov.w	r0, #4294967295
   113e2:	4a07      	ldr	r2, [pc, #28]	; (11400 <z_arm_init_arch_hw_at_boot+0x48>)
   113e4:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   113e8:	3301      	adds	r3, #1
   113ea:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   113ec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   113f0:	d1f8      	bne.n	113e4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   113f2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   113f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113f8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   113fc:	bd10      	pop	{r4, pc}
   113fe:	bf00      	nop
   11400:	e000e100 	.word	0xe000e100

00011404 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11404:	4b08      	ldr	r3, [pc, #32]	; (11428 <z_impl_k_thread_abort+0x24>)
   11406:	689b      	ldr	r3, [r3, #8]
   11408:	4283      	cmp	r3, r0
   1140a:	d10b      	bne.n	11424 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1140c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11410:	b143      	cbz	r3, 11424 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11412:	4b06      	ldr	r3, [pc, #24]	; (1142c <z_impl_k_thread_abort+0x28>)
   11414:	685a      	ldr	r2, [r3, #4]
   11416:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1141a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1141c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1141e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11422:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   11424:	f015 bfea 	b.w	273fc <z_thread_abort>
   11428:	20021a88 	.word	0x20021a88
   1142c:	e000ed00 	.word	0xe000ed00

00011430 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11432:	4c09      	ldr	r4, [pc, #36]	; (11458 <z_arm_configure_static_mpu_regions+0x28>)
   11434:	4a09      	ldr	r2, [pc, #36]	; (1145c <z_arm_configure_static_mpu_regions+0x2c>)
   11436:	4623      	mov	r3, r4
   11438:	2101      	movs	r1, #1
   1143a:	4809      	ldr	r0, [pc, #36]	; (11460 <z_arm_configure_static_mpu_regions+0x30>)
   1143c:	f000 f92a 	bl	11694 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11440:	2300      	movs	r3, #0
   11442:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11444:	4b07      	ldr	r3, [pc, #28]	; (11464 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11446:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11448:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1144a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1144c:	9301      	str	r3, [sp, #4]
   1144e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11450:	f000 f944 	bl	116dc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11454:	b004      	add	sp, #16
   11456:	bd10      	pop	{r4, pc}
   11458:	20070000 	.word	0x20070000
   1145c:	20008000 	.word	0x20008000
   11460:	00031df8 	.word	0x00031df8
   11464:	20008e40 	.word	0x20008e40

00011468 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11468:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   1146a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1146c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1146e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11472:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11476:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11478:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1147a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1147c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   11480:	4905      	ldr	r1, [pc, #20]	; (11498 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11482:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11486:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   1148a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1148e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   11492:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11496:	bd10      	pop	{r4, pc}
   11498:	e000ed00 	.word	0xe000ed00

0001149c <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   1149c:	b580      	push	{r7, lr}
   1149e:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   114a0:	b088      	sub	sp, #32
   114a2:	466a      	mov	r2, sp
   114a4:	4b07      	ldr	r3, [pc, #28]	; (114c4 <region_allocate_and_init.part.0+0x28>)
   114a6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   114aa:	2303      	movs	r3, #3
   114ac:	f842 3f10 	str.w	r3, [r2, #16]!
   114b0:	2300      	movs	r3, #0
   114b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   114b6:	4804      	ldr	r0, [pc, #16]	; (114c8 <region_allocate_and_init.part.0+0x2c>)
   114b8:	f7fd f9d6 	bl	e868 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   114bc:	f06f 0015 	mvn.w	r0, #21
   114c0:	46bd      	mov	sp, r7
   114c2:	bd80      	pop	{r7, pc}
   114c4:	00034215 	.word	0x00034215
   114c8:	00031564 	.word	0x00031564

000114cc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   114cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114d0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   114d2:	4606      	mov	r6, r0
   114d4:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   114d8:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   114da:	4d5f      	ldr	r5, [pc, #380]	; (11658 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   114dc:	af00      	add	r7, sp, #0
   114de:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   114e0:	687b      	ldr	r3, [r7, #4]
   114e2:	4599      	cmp	r9, r3
   114e4:	da35      	bge.n	11552 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   114e6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   114ea:	f1b8 0f00 	cmp.w	r8, #0
   114ee:	d054      	beq.n	1159a <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   114f0:	f1b8 0f1f 	cmp.w	r8, #31
   114f4:	d91b      	bls.n	1152e <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   114f6:	f018 0f1f 	tst.w	r8, #31
   114fa:	d118      	bne.n	1152e <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   114fc:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11500:	f01b 0f1f 	tst.w	fp, #31
   11504:	d113      	bne.n	1152e <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11506:	4658      	mov	r0, fp
   11508:	f01a fc17 	bl	2bd3a <arm_cmse_mpu_region_get>
   1150c:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1150e:	eb08 000b 	add.w	r0, r8, fp
   11512:	3801      	subs	r0, #1
   11514:	f01a fc11 	bl	2bd3a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11518:	4582      	cmp	sl, r0
   1151a:	d01f      	beq.n	1155c <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   1151c:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11520:	466c      	mov	r4, sp
   11522:	b088      	sub	sp, #32
   11524:	466a      	mov	r2, sp
   11526:	494d      	ldr	r1, [pc, #308]	; (1165c <mpu_configure_regions_and_partition.constprop.0+0x190>)
   11528:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   1152c:	e005      	b.n	1153a <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1152e:	466c      	mov	r4, sp
   11530:	b088      	sub	sp, #32
   11532:	466a      	mov	r2, sp
   11534:	4b4a      	ldr	r3, [pc, #296]	; (11660 <mpu_configure_regions_and_partition.constprop.0+0x194>)
   11536:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   1153a:	2303      	movs	r3, #3
   1153c:	f842 3f10 	str.w	r3, [r2, #16]!
   11540:	2300      	movs	r3, #0
   11542:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11546:	4847      	ldr	r0, [pc, #284]	; (11664 <mpu_configure_regions_and_partition.constprop.0+0x198>)
   11548:	f7fd f98e 	bl	e868 <z_impl_z_log_msg_static_create>
   1154c:	46a5      	mov	sp, r4
			return -EINVAL;
   1154e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11552:	4620      	mov	r0, r4
   11554:	371c      	adds	r7, #28
   11556:	46bd      	mov	sp, r7
   11558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1155c:	f11a 0f16 	cmn.w	sl, #22
   11560:	d0de      	beq.n	11520 <mpu_configure_regions_and_partition.constprop.0+0x54>
   11562:	4554      	cmp	r4, sl
   11564:	dddc      	ble.n	11520 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   11566:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1156a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   1156e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   11572:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11576:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1157a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1157e:	e9d6 2100 	ldrd	r2, r1, [r6]
   11582:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   11584:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11586:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1158a:	d11e      	bne.n	115ca <mpu_configure_regions_and_partition.constprop.0+0xfe>
   1158c:	45d8      	cmp	r8, fp
   1158e:	d108      	bne.n	115a2 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   11590:	4631      	mov	r1, r6
   11592:	fa5f f08a 	uxtb.w	r0, sl
   11596:	f01a fbd9 	bl	2bd4c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1159a:	f109 0901 	add.w	r9, r9, #1
   1159e:	360c      	adds	r6, #12
   115a0:	e79e      	b.n	114e0 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   115a2:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   115a6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   115aa:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   115ae:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   115b2:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   115b4:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   115b6:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   115ba:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   115bc:	f01a fbc6 	bl	2bd4c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   115c0:	f110 0f16 	cmn.w	r0, #22
   115c4:	d0c3      	beq.n	1154e <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   115c6:	1c44      	adds	r4, r0, #1
   115c8:	e7e7      	b.n	1159a <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   115ca:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   115cc:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   115ce:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   115d0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   115d4:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   115d8:	d108      	bne.n	115ec <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   115da:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   115de:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   115e0:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   115e4:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   115e6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   115ea:	e7e7      	b.n	115bc <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   115ec:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   115f0:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   115f4:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   115f6:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   115fa:	4631      	mov	r1, r6
   115fc:	f01a fba6 	bl	2bd4c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11600:	f110 0f16 	cmn.w	r0, #22
   11604:	d0a3      	beq.n	1154e <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   11606:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1160a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1160e:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11610:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   11614:	f362 0304 	bfi	r3, r2, #0, #5
   11618:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   1161a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1161e:	7c3a      	ldrb	r2, [r7, #16]
   11620:	085b      	lsrs	r3, r3, #1
   11622:	f363 1247 	bfi	r2, r3, #5, #3
   11626:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   11628:	e9d6 3200 	ldrd	r3, r2, [r6]
   1162c:	4413      	add	r3, r2
   1162e:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   11630:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   11634:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   11636:	4443      	add	r3, r8
   11638:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   1163c:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   1163e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   11642:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
   11644:	617b      	str	r3, [r7, #20]
   11646:	d902      	bls.n	1164e <mpu_configure_regions_and_partition.constprop.0+0x182>
   11648:	f7ff ff28 	bl	1149c <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   1164c:	e7b8      	b.n	115c0 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   1164e:	f107 0108 	add.w	r1, r7, #8
   11652:	f7ff ff09 	bl	11468 <region_init>
   11656:	e7b6      	b.n	115c6 <mpu_configure_regions_and_partition.constprop.0+0xfa>
   11658:	e000ed00 	.word	0xe000ed00
   1165c:	0003425e 	.word	0x0003425e
   11660:	0003423b 	.word	0x0003423b
   11664:	00031564 	.word	0x00031564

00011668 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11668:	2205      	movs	r2, #5
   1166a:	4b04      	ldr	r3, [pc, #16]	; (1167c <arm_core_mpu_enable+0x14>)
   1166c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11670:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11674:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11678:	4770      	bx	lr
   1167a:	bf00      	nop
   1167c:	e000ed00 	.word	0xe000ed00

00011680 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11680:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11684:	2200      	movs	r2, #0
   11686:	4b02      	ldr	r3, [pc, #8]	; (11690 <arm_core_mpu_disable+0x10>)
   11688:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1168c:	4770      	bx	lr
   1168e:	bf00      	nop
   11690:	e000ed00 	.word	0xe000ed00

00011694 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11694:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11696:	4d0c      	ldr	r5, [pc, #48]	; (116c8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   11698:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1169a:	782a      	ldrb	r2, [r5, #0]
   1169c:	f7ff ff16 	bl	114cc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   116a0:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   116a2:	3016      	adds	r0, #22
   116a4:	d10f      	bne.n	116c6 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   116a6:	f44f 738d 	mov.w	r3, #282	; 0x11a
   116aa:	4a08      	ldr	r2, [pc, #32]	; (116cc <arm_core_mpu_configure_static_mpu_regions+0x38>)
   116ac:	4908      	ldr	r1, [pc, #32]	; (116d0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   116ae:	4809      	ldr	r0, [pc, #36]	; (116d4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   116b0:	f018 ffef 	bl	2a692 <assert_print>
   116b4:	4621      	mov	r1, r4
   116b6:	4808      	ldr	r0, [pc, #32]	; (116d8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   116b8:	f018 ffeb 	bl	2a692 <assert_print>
   116bc:	f44f 718d 	mov.w	r1, #282	; 0x11a
   116c0:	4802      	ldr	r0, [pc, #8]	; (116cc <arm_core_mpu_configure_static_mpu_regions+0x38>)
   116c2:	f018 ffdf 	bl	2a684 <assert_post_action>
			regions_num);
	}
}
   116c6:	bd38      	pop	{r3, r4, r5, pc}
   116c8:	20022317 	.word	0x20022317
   116cc:	00034281 	.word	0x00034281
   116d0:	00037ac9 	.word	0x00037ac9
   116d4:	00032629 	.word	0x00032629
   116d8:	000342b8 	.word	0x000342b8

000116dc <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   116dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e0:	4e31      	ldr	r6, [pc, #196]	; (117a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   116e2:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   116e4:	4605      	mov	r5, r0
   116e6:	f04f 0800 	mov.w	r8, #0
   116ea:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   116ec:	4f2f      	ldr	r7, [pc, #188]	; (117ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   116ee:	45c8      	cmp	r8, r9
   116f0:	db02      	blt.n	116f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   116f2:	b003      	add	sp, #12
   116f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   116f8:	f8d5 a004 	ldr.w	sl, [r5, #4]
   116fc:	f1ba 0f00 	cmp.w	sl, #0
   11700:	d04c      	beq.n	1179c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11702:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11704:	4608      	mov	r0, r1
   11706:	9101      	str	r1, [sp, #4]
   11708:	f01a fb17 	bl	2bd3a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1170c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1170e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11710:	eb0a 0001 	add.w	r0, sl, r1
   11714:	3801      	subs	r0, #1
   11716:	f01a fb10 	bl	2bd3a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1171a:	4284      	cmp	r4, r0
   1171c:	f04f 0214 	mov.w	r2, #20
   11720:	4b23      	ldr	r3, [pc, #140]	; (117b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   11722:	d015      	beq.n	11750 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   11724:	fb02 f308 	mul.w	r3, r2, r8
   11728:	f06f 0215 	mvn.w	r2, #21
   1172c:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   11730:	f44f 7395 	mov.w	r3, #298	; 0x12a
   11734:	4a1f      	ldr	r2, [pc, #124]	; (117b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11736:	4920      	ldr	r1, [pc, #128]	; (117b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   11738:	4820      	ldr	r0, [pc, #128]	; (117bc <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   1173a:	f018 ffaa 	bl	2a692 <assert_print>
   1173e:	4649      	mov	r1, r9
   11740:	481f      	ldr	r0, [pc, #124]	; (117c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   11742:	f018 ffa6 	bl	2a692 <assert_print>
   11746:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1174a:	481a      	ldr	r0, [pc, #104]	; (117b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1174c:	f018 ff9a 	bl	2a684 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11750:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11754:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11756:	d0eb      	beq.n	11730 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11758:	7819      	ldrb	r1, [r3, #0]
   1175a:	42a1      	cmp	r1, r4
   1175c:	dde8      	ble.n	11730 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   1175e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   11762:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   11766:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1176a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1176e:	f100 0108 	add.w	r1, r0, #8
   11772:	7b00      	ldrb	r0, [r0, #12]
   11774:	f364 0004 	bfi	r0, r4, #0, #5
   11778:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1177a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1177e:	790c      	ldrb	r4, [r1, #4]
   11780:	0840      	lsrs	r0, r0, #1
   11782:	f360 1447 	bfi	r4, r0, #5, #3
   11786:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   11788:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1178c:	f021 011f 	bic.w	r1, r1, #31
   11790:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   11792:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   11796:	f021 011f 	bic.w	r1, r1, #31
   1179a:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1179c:	f108 0801 	add.w	r8, r8, #1
   117a0:	3614      	adds	r6, #20
   117a2:	350c      	adds	r5, #12
   117a4:	e7a3      	b.n	116ee <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   117a6:	bf00      	nop
   117a8:	20021534 	.word	0x20021534
   117ac:	e000ed00 	.word	0xe000ed00
   117b0:	20022317 	.word	0x20022317
   117b4:	00034281 	.word	0x00034281
   117b8:	00037ac9 	.word	0x00037ac9
   117bc:	00032629 	.word	0x00032629
   117c0:	000342e4 	.word	0x000342e4

000117c4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   117c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   117c6:	4d1f      	ldr	r5, [pc, #124]	; (11844 <z_arm_mpu_init+0x80>)
   117c8:	682c      	ldr	r4, [r5, #0]
   117ca:	2c08      	cmp	r4, #8
   117cc:	d910      	bls.n	117f0 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   117ce:	f240 1351 	movw	r3, #337	; 0x151
   117d2:	4a1d      	ldr	r2, [pc, #116]	; (11848 <z_arm_mpu_init+0x84>)
   117d4:	491d      	ldr	r1, [pc, #116]	; (1184c <z_arm_mpu_init+0x88>)
   117d6:	481e      	ldr	r0, [pc, #120]	; (11850 <z_arm_mpu_init+0x8c>)
   117d8:	f018 ff5b 	bl	2a692 <assert_print>
   117dc:	4621      	mov	r1, r4
   117de:	2208      	movs	r2, #8
   117e0:	481c      	ldr	r0, [pc, #112]	; (11854 <z_arm_mpu_init+0x90>)
   117e2:	f018 ff56 	bl	2a692 <assert_print>
   117e6:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   117ea:	4817      	ldr	r0, [pc, #92]	; (11848 <z_arm_mpu_init+0x84>)
   117ec:	f018 ff4a 	bl	2a684 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   117f0:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   117f2:	f7ff ff45 	bl	11680 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   117f6:	4b18      	ldr	r3, [pc, #96]	; (11858 <z_arm_mpu_init+0x94>)
   117f8:	4a18      	ldr	r2, [pc, #96]	; (1185c <z_arm_mpu_init+0x98>)
   117fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   117fe:	4284      	cmp	r4, r0
   11800:	d117      	bne.n	11832 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   11802:	4b17      	ldr	r3, [pc, #92]	; (11860 <z_arm_mpu_init+0x9c>)
   11804:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11806:	f7ff ff2f 	bl	11668 <arm_core_mpu_enable>
	__ASSERT(
   1180a:	4b13      	ldr	r3, [pc, #76]	; (11858 <z_arm_mpu_init+0x94>)
   1180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   11810:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11814:	2b08      	cmp	r3, #8
   11816:	d013      	beq.n	11840 <z_arm_mpu_init+0x7c>
   11818:	4912      	ldr	r1, [pc, #72]	; (11864 <z_arm_mpu_init+0xa0>)
   1181a:	f240 13bb 	movw	r3, #443	; 0x1bb
   1181e:	4a0a      	ldr	r2, [pc, #40]	; (11848 <z_arm_mpu_init+0x84>)
   11820:	480b      	ldr	r0, [pc, #44]	; (11850 <z_arm_mpu_init+0x8c>)
   11822:	f018 ff36 	bl	2a692 <assert_print>
   11826:	4810      	ldr	r0, [pc, #64]	; (11868 <z_arm_mpu_init+0xa4>)
   11828:	f018 ff33 	bl	2a692 <assert_print>
   1182c:	f240 11bb 	movw	r1, #443	; 0x1bb
   11830:	e7db      	b.n	117ea <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11832:	6869      	ldr	r1, [r5, #4]
   11834:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11838:	f7ff fe16 	bl	11468 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1183c:	3001      	adds	r0, #1
   1183e:	e7de      	b.n	117fe <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11840:	2000      	movs	r0, #0
   11842:	bd38      	pop	{r3, r4, r5, pc}
   11844:	00031e04 	.word	0x00031e04
   11848:	00034281 	.word	0x00034281
   1184c:	00037ac9 	.word	0x00037ac9
   11850:	00032629 	.word	0x00032629
   11854:	00034313 	.word	0x00034313
   11858:	e000ed00 	.word	0xe000ed00
   1185c:	0044ffaa 	.word	0x0044ffaa
   11860:	20022317 	.word	0x20022317
   11864:	00034347 	.word	0x00034347
   11868:	00034397 	.word	0x00034397

0001186c <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   1186c:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   1186e:	4b0b      	ldr	r3, [pc, #44]	; (1189c <malloc_prepare+0x30>)
   11870:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11874:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   11878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1187c:	d20c      	bcs.n	11898 <malloc_prepare+0x2c>
   1187e:	4908      	ldr	r1, [pc, #32]	; (118a0 <malloc_prepare+0x34>)
   11880:	2381      	movs	r3, #129	; 0x81
   11882:	4a08      	ldr	r2, [pc, #32]	; (118a4 <malloc_prepare+0x38>)
   11884:	4808      	ldr	r0, [pc, #32]	; (118a8 <malloc_prepare+0x3c>)
   11886:	f018 ff04 	bl	2a692 <assert_print>
   1188a:	4808      	ldr	r0, [pc, #32]	; (118ac <malloc_prepare+0x40>)
   1188c:	f018 ff01 	bl	2a692 <assert_print>
   11890:	2181      	movs	r1, #129	; 0x81
   11892:	4804      	ldr	r0, [pc, #16]	; (118a4 <malloc_prepare+0x38>)
   11894:	f018 fef6 	bl	2a684 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11898:	2000      	movs	r0, #0
   1189a:	bd08      	pop	{r3, pc}
   1189c:	200385c0 	.word	0x200385c0
   118a0:	000343e8 	.word	0x000343e8
   118a4:	000343b8 	.word	0x000343b8
   118a8:	00032629 	.word	0x00032629
   118ac:	0003442f 	.word	0x0003442f

000118b0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   118b0:	4b01      	ldr	r3, [pc, #4]	; (118b8 <__stdout_hook_install+0x8>)
   118b2:	6018      	str	r0, [r3, #0]
}
   118b4:	4770      	bx	lr
   118b6:	bf00      	nop
   118b8:	20008474 	.word	0x20008474

000118bc <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   118bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118be:	4606      	mov	r6, r0
   118c0:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   118c2:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   118c4:	4f06      	ldr	r7, [pc, #24]	; (118e0 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   118c6:	42ac      	cmp	r4, r5
   118c8:	da08      	bge.n	118dc <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   118ca:	683b      	ldr	r3, [r7, #0]
   118cc:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   118ce:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   118d0:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   118d2:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   118d6:	d001      	beq.n	118dc <z_impl_zephyr_read_stdin+0x20>
   118d8:	280d      	cmp	r0, #13
   118da:	d1f4      	bne.n	118c6 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   118dc:	4620      	mov	r0, r4
   118de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118e0:	20008470 	.word	0x20008470

000118e4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   118e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118e6:	460d      	mov	r5, r1
   118e8:	4f09      	ldr	r7, [pc, #36]	; (11910 <z_impl_zephyr_write_stdout+0x2c>)
   118ea:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   118ec:	f1c0 0401 	rsb	r4, r0, #1
   118f0:	19a3      	adds	r3, r4, r6
   118f2:	429d      	cmp	r5, r3
   118f4:	dc01      	bgt.n	118fa <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   118f6:	4628      	mov	r0, r5
   118f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   118fa:	7873      	ldrb	r3, [r6, #1]
   118fc:	2b0a      	cmp	r3, #10
   118fe:	d102      	bne.n	11906 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11900:	200d      	movs	r0, #13
   11902:	683b      	ldr	r3, [r7, #0]
   11904:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11906:	683b      	ldr	r3, [r7, #0]
   11908:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   1190c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1190e:	e7ef      	b.n	118f0 <z_impl_zephyr_write_stdout+0xc>
   11910:	20008474 	.word	0x20008474

00011914 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11914:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11916:	2105      	movs	r1, #5
   11918:	4801      	ldr	r0, [pc, #4]	; (11920 <_exit+0xc>)
   1191a:	f7ff ffe3 	bl	118e4 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   1191e:	e7fe      	b.n	1191e <_exit+0xa>
   11920:	000344b6 	.word	0x000344b6

00011924 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11924:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11926:	4c07      	ldr	r4, [pc, #28]	; (11944 <_sbrk+0x20>)
   11928:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1192a:	18c2      	adds	r2, r0, r3
   1192c:	4806      	ldr	r0, [pc, #24]	; (11948 <_sbrk+0x24>)
   1192e:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11932:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   11936:	428a      	cmp	r2, r1
		heap_sz += count;
   11938:	bf36      	itet	cc
   1193a:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1193c:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11940:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   11942:	bd10      	pop	{r4, pc}
   11944:	20021548 	.word	0x20021548
   11948:	200385c0 	.word	0x200385c0

0001194c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   1194c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1194e:	4604      	mov	r4, r0
   11950:	b958      	cbnz	r0, 1196a <__retarget_lock_init_recursive+0x1e>
   11952:	4911      	ldr	r1, [pc, #68]	; (11998 <__retarget_lock_init_recursive+0x4c>)
   11954:	f240 137b 	movw	r3, #379	; 0x17b
   11958:	4a10      	ldr	r2, [pc, #64]	; (1199c <__retarget_lock_init_recursive+0x50>)
   1195a:	4811      	ldr	r0, [pc, #68]	; (119a0 <__retarget_lock_init_recursive+0x54>)
   1195c:	f018 fe99 	bl	2a692 <assert_print>
   11960:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11964:	480d      	ldr	r0, [pc, #52]	; (1199c <__retarget_lock_init_recursive+0x50>)
   11966:	f018 fe8d 	bl	2a684 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   1196a:	2014      	movs	r0, #20
   1196c:	f016 fe8e 	bl	2868c <malloc>
   11970:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11972:	b960      	cbnz	r0, 1198e <__retarget_lock_init_recursive+0x42>
   11974:	490b      	ldr	r1, [pc, #44]	; (119a4 <__retarget_lock_init_recursive+0x58>)
   11976:	f240 1383 	movw	r3, #387	; 0x183
   1197a:	4a08      	ldr	r2, [pc, #32]	; (1199c <__retarget_lock_init_recursive+0x50>)
   1197c:	4808      	ldr	r0, [pc, #32]	; (119a0 <__retarget_lock_init_recursive+0x54>)
   1197e:	f018 fe88 	bl	2a692 <assert_print>
   11982:	4809      	ldr	r0, [pc, #36]	; (119a8 <__retarget_lock_init_recursive+0x5c>)
   11984:	f018 fe85 	bl	2a692 <assert_print>
   11988:	f240 1183 	movw	r1, #387	; 0x183
   1198c:	e7ea      	b.n	11964 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   1198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   11992:	f01e bbe1 	b.w	30158 <z_impl_k_mutex_init>
   11996:	bf00      	nop
   11998:	000344bd 	.word	0x000344bd
   1199c:	000343b8 	.word	0x000343b8
   119a0:	00032629 	.word	0x00032629
   119a4:	000344bc 	.word	0x000344bc
   119a8:	000344f8 	.word	0x000344f8

000119ac <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   119ac:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   119ae:	b958      	cbnz	r0, 119c8 <__retarget_lock_acquire_recursive+0x1c>
   119b0:	4909      	ldr	r1, [pc, #36]	; (119d8 <__retarget_lock_acquire_recursive+0x2c>)
   119b2:	480a      	ldr	r0, [pc, #40]	; (119dc <__retarget_lock_acquire_recursive+0x30>)
   119b4:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   119b8:	4a09      	ldr	r2, [pc, #36]	; (119e0 <__retarget_lock_acquire_recursive+0x34>)
   119ba:	f018 fe6a 	bl	2a692 <assert_print>
   119be:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   119c2:	4807      	ldr	r0, [pc, #28]	; (119e0 <__retarget_lock_acquire_recursive+0x34>)
   119c4:	f018 fe5e 	bl	2a684 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   119c8:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   119cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   119d0:	f04f 33ff 	mov.w	r3, #4294967295
   119d4:	f013 bb82 	b.w	250dc <z_impl_k_mutex_lock>
   119d8:	000344bd 	.word	0x000344bd
   119dc:	00032629 	.word	0x00032629
   119e0:	000343b8 	.word	0x000343b8

000119e4 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   119e4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   119e6:	b958      	cbnz	r0, 11a00 <__retarget_lock_release_recursive+0x1c>
   119e8:	4907      	ldr	r1, [pc, #28]	; (11a08 <__retarget_lock_release_recursive+0x24>)
   119ea:	4808      	ldr	r0, [pc, #32]	; (11a0c <__retarget_lock_release_recursive+0x28>)
   119ec:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   119f0:	4a07      	ldr	r2, [pc, #28]	; (11a10 <__retarget_lock_release_recursive+0x2c>)
   119f2:	f018 fe4e 	bl	2a692 <assert_print>
   119f6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   119fa:	4805      	ldr	r0, [pc, #20]	; (11a10 <__retarget_lock_release_recursive+0x2c>)
   119fc:	f018 fe42 	bl	2a684 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   11a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   11a04:	f013 bc3a 	b.w	2527c <z_impl_k_mutex_unlock>
   11a08:	000344bd 	.word	0x000344bd
   11a0c:	00032629 	.word	0x00032629
   11a10:	000343b8 	.word	0x000343b8

00011a14 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11a14:	b508      	push	{r3, lr}
   11a16:	211d      	movs	r1, #29
   11a18:	4804      	ldr	r0, [pc, #16]	; (11a2c <__chk_fail+0x18>)
   11a1a:	f7ff ff63 	bl	118e4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11a1e:	4040      	eors	r0, r0
   11a20:	f380 8811 	msr	BASEPRI, r0
   11a24:	f04f 0003 	mov.w	r0, #3
   11a28:	df02      	svc	2
	CODE_UNREACHABLE;
   11a2a:	bf00      	nop
   11a2c:	0003451b 	.word	0x0003451b

00011a30 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11a30:	2000      	movs	r0, #0
   11a32:	4b02      	ldr	r3, [pc, #8]	; (11a3c <remoteproc_mgr_boot+0xc>)
   11a34:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11a38:	4770      	bx	lr
   11a3a:	bf00      	nop
   11a3c:	40005000 	.word	0x40005000

00011a40 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11a40:	4b0e      	ldr	r3, [pc, #56]	; (11a7c <bt_hex+0x3c>)
   11a42:	2940      	cmp	r1, #64	; 0x40
   11a44:	bf28      	it	cs
   11a46:	2140      	movcs	r1, #64	; 0x40
{
   11a48:	b570      	push	{r4, r5, r6, lr}
   11a4a:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   11a4c:	4c0c      	ldr	r4, [pc, #48]	; (11a80 <bt_hex+0x40>)
   11a4e:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   11a50:	42b0      	cmp	r0, r6
   11a52:	f103 0302 	add.w	r3, r3, #2
   11a56:	d104      	bne.n	11a62 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11a58:	2300      	movs	r3, #0
   11a5a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11a5e:	4807      	ldr	r0, [pc, #28]	; (11a7c <bt_hex+0x3c>)
   11a60:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   11a62:	7802      	ldrb	r2, [r0, #0]
   11a64:	0912      	lsrs	r2, r2, #4
   11a66:	5ca2      	ldrb	r2, [r4, r2]
   11a68:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
   11a70:	f002 020f 	and.w	r2, r2, #15
   11a74:	5ca2      	ldrb	r2, [r4, r2]
   11a76:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   11a7a:	e7e9      	b.n	11a50 <bt_hex+0x10>
   11a7c:	20022336 	.word	0x20022336
   11a80:	0003457b 	.word	0x0003457b

00011a84 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   11a84:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   11a86:	7803      	ldrb	r3, [r0, #0]
   11a88:	b08b      	sub	sp, #44	; 0x2c
   11a8a:	4604      	mov	r4, r0
   11a8c:	ad07      	add	r5, sp, #28
   11a8e:	2b03      	cmp	r3, #3
   11a90:	d821      	bhi.n	11ad6 <bt_addr_le_str+0x52>
   11a92:	e8df f003 	tbb	[pc, r3]
   11a96:	1a02      	.short	0x1a02
   11a98:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   11a9a:	4912      	ldr	r1, [pc, #72]	; (11ae4 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   11a9c:	4628      	mov	r0, r5
   11a9e:	f01e fec1 	bl	30824 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11aa2:	9505      	str	r5, [sp, #20]
   11aa4:	7863      	ldrb	r3, [r4, #1]
   11aa6:	211e      	movs	r1, #30
   11aa8:	9304      	str	r3, [sp, #16]
   11aaa:	78a3      	ldrb	r3, [r4, #2]
   11aac:	4a0e      	ldr	r2, [pc, #56]	; (11ae8 <bt_addr_le_str+0x64>)
   11aae:	9303      	str	r3, [sp, #12]
   11ab0:	78e3      	ldrb	r3, [r4, #3]
   11ab2:	480e      	ldr	r0, [pc, #56]	; (11aec <bt_addr_le_str+0x68>)
   11ab4:	9302      	str	r3, [sp, #8]
   11ab6:	7923      	ldrb	r3, [r4, #4]
   11ab8:	9301      	str	r3, [sp, #4]
   11aba:	7963      	ldrb	r3, [r4, #5]
   11abc:	9300      	str	r3, [sp, #0]
   11abe:	79a3      	ldrb	r3, [r4, #6]
   11ac0:	f018 fc32 	bl	2a328 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11ac4:	4809      	ldr	r0, [pc, #36]	; (11aec <bt_addr_le_str+0x68>)
   11ac6:	b00b      	add	sp, #44	; 0x2c
   11ac8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   11aca:	4909      	ldr	r1, [pc, #36]	; (11af0 <bt_addr_le_str+0x6c>)
   11acc:	e7e6      	b.n	11a9c <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   11ace:	4909      	ldr	r1, [pc, #36]	; (11af4 <bt_addr_le_str+0x70>)
   11ad0:	e7e4      	b.n	11a9c <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   11ad2:	4909      	ldr	r1, [pc, #36]	; (11af8 <bt_addr_le_str+0x74>)
   11ad4:	e7e2      	b.n	11a9c <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11ad6:	210a      	movs	r1, #10
   11ad8:	4628      	mov	r0, r5
   11ada:	4a08      	ldr	r2, [pc, #32]	; (11afc <bt_addr_le_str+0x78>)
   11adc:	f018 fc24 	bl	2a328 <snprintk>
		break;
   11ae0:	e7df      	b.n	11aa2 <bt_addr_le_str+0x1e>
   11ae2:	bf00      	nop
   11ae4:	000326fd 	.word	0x000326fd
   11ae8:	0003271f 	.word	0x0003271f
   11aec:	20022318 	.word	0x20022318
   11af0:	00032704 	.word	0x00032704
   11af4:	0003270b 	.word	0x0003270b
   11af8:	00032715 	.word	0x00032715
   11afc:	000361d3 	.word	0x000361d3

00011b00 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   11b00:	b590      	push	{r4, r7, lr}
   11b02:	b087      	sub	sp, #28
	int err;
	LOG_INF("Saving ID");
   11b04:	466c      	mov	r4, sp
{
   11b06:	af00      	add	r7, sp, #0
	LOG_INF("Saving ID");
   11b08:	4b12      	ldr	r3, [pc, #72]	; (11b54 <save_id+0x54>)
   11b0a:	617b      	str	r3, [r7, #20]
   11b0c:	2302      	movs	r3, #2
   11b0e:	613b      	str	r3, [r7, #16]
   11b10:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11b14:	4810      	ldr	r0, [pc, #64]	; (11b58 <save_id+0x58>)
   11b16:	f107 0210 	add.w	r2, r7, #16
   11b1a:	2300      	movs	r3, #0
   11b1c:	f7fc fea4 	bl	e868 <z_impl_z_log_msg_static_create>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   11b20:	490e      	ldr	r1, [pc, #56]	; (11b5c <save_id+0x5c>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   11b22:	480f      	ldr	r0, [pc, #60]	; (11b60 <save_id+0x60>)
   11b24:	79ca      	ldrb	r2, [r1, #7]
   11b26:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   11b2a:	f7fe f937 	bl	fd9c <settings_save_one>
	if (err) {
   11b2e:	b170      	cbz	r0, 11b4e <save_id+0x4e>
		LOG_ERR("Failed to save ID (err %d)", err);
   11b30:	b088      	sub	sp, #32
   11b32:	466a      	mov	r2, sp
   11b34:	4b0b      	ldr	r3, [pc, #44]	; (11b64 <save_id+0x64>)
   11b36:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11b3a:	2303      	movs	r3, #3
   11b3c:	f842 3f10 	str.w	r3, [r2, #16]!
   11b40:	2300      	movs	r3, #0
   11b42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b46:	4804      	ldr	r0, [pc, #16]	; (11b58 <save_id+0x58>)
   11b48:	f7fc fe8e 	bl	e868 <z_impl_z_log_msg_static_create>
   11b4c:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   11b4e:	371c      	adds	r7, #28
   11b50:	46bd      	mov	sp, r7
   11b52:	bd90      	pop	{r4, r7, pc}
   11b54:	00034593 	.word	0x00034593
   11b58:	000314f4 	.word	0x000314f4
   11b5c:	20008000 	.word	0x20008000
   11b60:	0003459d 	.word	0x0003459d
   11b64:	000345a3 	.word	0x000345a3

00011b68 <set_setting>:
{
   11b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b6c:	4604      	mov	r4, r0
   11b6e:	4617      	mov	r7, r2
   11b70:	4698      	mov	r8, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11b72:	4e29      	ldr	r6, [pc, #164]	; (11c18 <set_setting+0xb0>)
   11b74:	b088      	sub	sp, #32
   11b76:	e8d6 3faf 	lda	r3, [r6]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11b7a:	07d9      	lsls	r1, r3, #31
   11b7c:	d529      	bpl.n	11bd2 <set_setting+0x6a>
	if (!name) {
   11b7e:	b968      	cbnz	r0, 11b9c <set_setting+0x34>
		LOG_ERR("Insufficient number of arguments");
   11b80:	4b26      	ldr	r3, [pc, #152]	; (11c1c <set_setting+0xb4>)
   11b82:	9307      	str	r3, [sp, #28]
   11b84:	2302      	movs	r3, #2
   11b86:	9306      	str	r3, [sp, #24]
   11b88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11b8c:	4603      	mov	r3, r0
   11b8e:	aa06      	add	r2, sp, #24
   11b90:	4823      	ldr	r0, [pc, #140]	; (11c20 <set_setting+0xb8>)
   11b92:	f7fc fe69 	bl	e868 <z_impl_z_log_msg_static_create>
		return -ENOENT;
   11b96:	f06f 0001 	mvn.w	r0, #1
   11b9a:	e01b      	b.n	11bd4 <set_setting+0x6c>
	len = settings_name_next(name, &next);
   11b9c:	a901      	add	r1, sp, #4
   11b9e:	f019 fb9a 	bl	2b2d6 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   11ba2:	4920      	ldr	r1, [pc, #128]	; (11c24 <set_setting+0xbc>)
	len = settings_name_next(name, &next);
   11ba4:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   11ba6:	4620      	mov	r0, r4
   11ba8:	f01e fe55 	bl	30856 <strncmp>
   11bac:	4603      	mov	r3, r0
   11bae:	2800      	cmp	r0, #0
   11bb0:	d1f1      	bne.n	11b96 <set_setting+0x2e>
   11bb2:	e8d6 2faf 	lda	r2, [r6]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   11bb6:	f3c2 05c0 	ubfx	r5, r2, #3, #1
   11bba:	0712      	lsls	r2, r2, #28
   11bbc:	d50d      	bpl.n	11bda <set_setting+0x72>
			LOG_WRN("Ignoring identities stored in flash");
   11bbe:	4a1a      	ldr	r2, [pc, #104]	; (11c28 <set_setting+0xc0>)
   11bc0:	9207      	str	r2, [sp, #28]
   11bc2:	2202      	movs	r2, #2
   11bc4:	9206      	str	r2, [sp, #24]
   11bc6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11bca:	4815      	ldr	r0, [pc, #84]	; (11c20 <set_setting+0xb8>)
   11bcc:	aa06      	add	r2, sp, #24
   11bce:	f7fc fe4b 	bl	e868 <z_impl_z_log_msg_static_create>
		return 0;
   11bd2:	2000      	movs	r0, #0
}
   11bd4:	b008      	add	sp, #32
   11bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   11bda:	f1a6 04cc 	sub.w	r4, r6, #204	; 0xcc
   11bde:	2207      	movs	r2, #7
   11be0:	4621      	mov	r1, r4
   11be2:	4640      	mov	r0, r8
   11be4:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   11be6:	2806      	cmp	r0, #6
   11be8:	d810      	bhi.n	11c0c <set_setting+0xa4>
				LOG_ERR("Invalid length ID address in storage");
   11bea:	4b10      	ldr	r3, [pc, #64]	; (11c2c <set_setting+0xc4>)
   11bec:	9307      	str	r3, [sp, #28]
   11bee:	2302      	movs	r3, #2
   11bf0:	9306      	str	r3, [sp, #24]
   11bf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11bf6:	462b      	mov	r3, r5
   11bf8:	4809      	ldr	r0, [pc, #36]	; (11c20 <set_setting+0xb8>)
   11bfa:	aa06      	add	r2, sp, #24
   11bfc:	f7fc fe34 	bl	e868 <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
   11c00:	f846 5ccc 	str.w	r5, [r6, #-204]
			bt_dev.id_count = 0U;
   11c04:	71e5      	strb	r5, [r4, #7]
			(void)memset(bt_dev.id_addr, 0,
   11c06:	f8c4 5003 	str.w	r5, [r4, #3]
			bt_dev.id_count = 0U;
   11c0a:	e7e2      	b.n	11bd2 <set_setting+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   11c0c:	2307      	movs	r3, #7
   11c0e:	fbb0 f0f3 	udiv	r0, r0, r3
   11c12:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   11c14:	e7dd      	b.n	11bd2 <set_setting+0x6a>
   11c16:	bf00      	nop
   11c18:	200080cc 	.word	0x200080cc
   11c1c:	000345be 	.word	0x000345be
   11c20:	000314f4 	.word	0x000314f4
   11c24:	00032712 	.word	0x00032712
   11c28:	000345df 	.word	0x000345df
   11c2c:	00034603 	.word	0x00034603

00011c30 <bt_settings_encode_key>:
{
   11c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c34:	b088      	sub	sp, #32
   11c36:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   11c3a:	799c      	ldrb	r4, [r3, #6]
   11c3c:	795d      	ldrb	r5, [r3, #5]
   11c3e:	791e      	ldrb	r6, [r3, #4]
   11c40:	78df      	ldrb	r7, [r3, #3]
   11c42:	f893 c002 	ldrb.w	ip, [r3, #2]
   11c46:	f893 e001 	ldrb.w	lr, [r3, #1]
   11c4a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   11c4c:	f1b8 0f00 	cmp.w	r8, #0
   11c50:	d00e      	beq.n	11c70 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   11c52:	e9cd 3806 	strd	r3, r8, [sp, #24]
   11c56:	e9cd ce04 	strd	ip, lr, [sp, #16]
   11c5a:	4613      	mov	r3, r2
   11c5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   11c60:	e9cd 4500 	strd	r4, r5, [sp]
   11c64:	4a08      	ldr	r2, [pc, #32]	; (11c88 <bt_settings_encode_key+0x58>)
   11c66:	f018 fb5f 	bl	2a328 <snprintk>
}
   11c6a:	b008      	add	sp, #32
   11c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   11c70:	e9cd e305 	strd	lr, r3, [sp, #20]
   11c74:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   11c78:	4613      	mov	r3, r2
   11c7a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   11c7e:	4a03      	ldr	r2, [pc, #12]	; (11c8c <bt_settings_encode_key+0x5c>)
   11c80:	9400      	str	r4, [sp, #0]
   11c82:	f018 fb51 	bl	2a328 <snprintk>
}
   11c86:	e7f0      	b.n	11c6a <bt_settings_encode_key+0x3a>
   11c88:	00034628 	.word	0x00034628
   11c8c:	0003464c 	.word	0x0003464c

00011c90 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   11c90:	4801      	ldr	r0, [pc, #4]	; (11c98 <bt_settings_save_id+0x8>)
   11c92:	f013 bff3 	b.w	25c7c <k_work_submit>
   11c96:	bf00      	nop
   11c98:	20008478 	.word	0x20008478

00011c9c <commit_settings>:
}

static int commit_settings(void)
{
   11c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ca0:	4d1d      	ldr	r5, [pc, #116]	; (11d18 <commit_settings+0x7c>)
   11ca2:	b086      	sub	sp, #24
   11ca4:	e8d5 3faf 	lda	r3, [r5]
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11ca8:	f013 0f01 	tst.w	r3, #1
   11cac:	462f      	mov	r7, r5
   11cae:	d031      	beq.n	11d14 <commit_settings+0x78>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   11cb0:	f815 6cc5 	ldrb.w	r6, [r5, #-197]
   11cb4:	f1a5 08cc 	sub.w	r8, r5, #204	; 0xcc
   11cb8:	b9d6      	cbnz	r6, 11cf0 <commit_settings+0x54>
		err = bt_setup_public_id_addr();
   11cba:	f001 ffc5 	bl	13c48 <bt_setup_public_id_addr>
		if (err) {
   11cbe:	4604      	mov	r4, r0
   11cc0:	b170      	cbz	r0, 11ce0 <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   11cc2:	4b16      	ldr	r3, [pc, #88]	; (11d1c <commit_settings+0x80>)
   11cc4:	9305      	str	r3, [sp, #20]
   11cc6:	2302      	movs	r3, #2
   11cc8:	9304      	str	r3, [sp, #16]
   11cca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11cce:	4633      	mov	r3, r6
   11cd0:	4813      	ldr	r0, [pc, #76]	; (11d20 <commit_settings+0x84>)
   11cd2:	aa04      	add	r2, sp, #16
   11cd4:	f7fc fdc8 	bl	e868 <z_impl_z_log_msg_static_create>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   11cd8:	4620      	mov	r0, r4
   11cda:	b006      	add	sp, #24
   11cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
   11ce0:	f898 6007 	ldrb.w	r6, [r8, #7]
   11ce4:	b926      	cbnz	r6, 11cf0 <commit_settings+0x54>
		err = bt_setup_random_id_addr();
   11ce6:	f002 f813 	bl	13d10 <bt_setup_random_id_addr>
		if (err) {
   11cea:	4604      	mov	r4, r0
   11cec:	2800      	cmp	r0, #0
   11cee:	d1e8      	bne.n	11cc2 <commit_settings+0x26>
   11cf0:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11cf4:	075a      	lsls	r2, r3, #29
   11cf6:	d401      	bmi.n	11cfc <commit_settings+0x60>
		bt_finalize_init();
   11cf8:	f001 fbae 	bl	13458 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11cfc:	e8d7 3fef 	ldaex	r3, [r7]
   11d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   11d04:	e8c7 2fe1 	stlex	r1, r2, [r7]
   11d08:	2900      	cmp	r1, #0
   11d0a:	d1f7      	bne.n	11cfc <commit_settings+0x60>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   11d0c:	03db      	lsls	r3, r3, #15
   11d0e:	d501      	bpl.n	11d14 <commit_settings+0x78>
		bt_settings_save_id();
   11d10:	f7ff ffbe 	bl	11c90 <bt_settings_save_id>
		return 0;
   11d14:	2400      	movs	r4, #0
   11d16:	e7df      	b.n	11cd8 <commit_settings+0x3c>
   11d18:	200080cc 	.word	0x200080cc
   11d1c:	0003466d 	.word	0x0003466d
   11d20:	000314f4 	.word	0x000314f4

00011d24 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   11d24:	b5b0      	push	{r4, r5, r7, lr}
   11d26:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   11d28:	f7fe f9ca 	bl	100c0 <settings_subsys_init>
	if (err) {
   11d2c:	4604      	mov	r4, r0
   11d2e:	b178      	cbz	r0, 11d50 <bt_settings_init+0x2c>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   11d30:	466d      	mov	r5, sp
   11d32:	b088      	sub	sp, #32
   11d34:	466a      	mov	r2, sp
   11d36:	4b08      	ldr	r3, [pc, #32]	; (11d58 <bt_settings_init+0x34>)
   11d38:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11d3c:	2303      	movs	r3, #3
   11d3e:	f842 3f10 	str.w	r3, [r2, #16]!
   11d42:	2300      	movs	r3, #0
   11d44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11d48:	4804      	ldr	r0, [pc, #16]	; (11d5c <bt_settings_init+0x38>)
   11d4a:	f7fc fd8d 	bl	e868 <z_impl_z_log_msg_static_create>
   11d4e:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   11d50:	4620      	mov	r0, r4
   11d52:	46bd      	mov	sp, r7
   11d54:	bdb0      	pop	{r4, r5, r7, pc}
   11d56:	bf00      	nop
   11d58:	00034691 	.word	0x00034691
   11d5c:	000314f4 	.word	0x000314f4

00011d60 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   11d60:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11d62:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   11d64:	4d09      	ldr	r5, [pc, #36]	; (11d8c <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11d66:	4b0a      	ldr	r3, [pc, #40]	; (11d90 <long_wq_init+0x30>)
{
   11d68:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   11d6a:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11d6c:	9302      	str	r3, [sp, #8]
   11d6e:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   11d70:	f013 ff8a 	bl	25c88 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   11d74:	ab02      	add	r3, sp, #8
   11d76:	4628      	mov	r0, r5
   11d78:	9300      	str	r3, [sp, #0]
   11d7a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   11d7e:	230a      	movs	r3, #10
   11d80:	4904      	ldr	r1, [pc, #16]	; (11d94 <long_wq_init+0x34>)
   11d82:	f013 ff9b 	bl	25cbc <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   11d86:	4620      	mov	r0, r4
   11d88:	b005      	add	sp, #20
   11d8a:	bd30      	pop	{r4, r5, pc}
   11d8c:	20009a98 	.word	0x20009a98
   11d90:	000346c5 	.word	0x000346c5
   11d94:	20032288 	.word	0x20032288

00011d98 <bt_long_wq_schedule>:
{
   11d98:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   11d9a:	4801      	ldr	r0, [pc, #4]	; (11da0 <bt_long_wq_schedule+0x8>)
   11d9c:	f014 b8b0 	b.w	25f00 <k_work_schedule_for_queue>
   11da0:	20009a98 	.word	0x20009a98

00011da4 <bt_long_wq_reschedule>:
{
   11da4:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   11da6:	4801      	ldr	r0, [pc, #4]	; (11dac <bt_long_wq_reschedule+0x8>)
   11da8:	f014 b926 	b.w	25ff8 <k_work_reschedule_for_queue>
   11dac:	20009a98 	.word	0x20009a98

00011db0 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11db0:	7803      	ldrb	r3, [r0, #0]
{
   11db2:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   11db4:	2b01      	cmp	r3, #1
   11db6:	d013      	beq.n	11de0 <uuid_to_uuid128+0x30>
   11db8:	2b02      	cmp	r3, #2
   11dba:	d027      	beq.n	11e0c <uuid_to_uuid128+0x5c>
   11dbc:	b97b      	cbnz	r3, 11dde <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11dbe:	460a      	mov	r2, r1
   11dc0:	4b18      	ldr	r3, [pc, #96]	; (11e24 <uuid_to_uuid128+0x74>)
   11dc2:	f103 0410 	add.w	r4, r3, #16
   11dc6:	f853 5b04 	ldr.w	r5, [r3], #4
   11dca:	42a3      	cmp	r3, r4
   11dcc:	f842 5b04 	str.w	r5, [r2], #4
   11dd0:	d1f9      	bne.n	11dc6 <uuid_to_uuid128+0x16>
   11dd2:	781b      	ldrb	r3, [r3, #0]
   11dd4:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   11dd6:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   11dd8:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   11dda:	0a1b      	lsrs	r3, r3, #8
   11ddc:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11dde:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11de0:	460a      	mov	r2, r1
   11de2:	4b10      	ldr	r3, [pc, #64]	; (11e24 <uuid_to_uuid128+0x74>)
   11de4:	f103 0410 	add.w	r4, r3, #16
   11de8:	f853 5b04 	ldr.w	r5, [r3], #4
   11dec:	42a3      	cmp	r3, r4
   11dee:	f842 5b04 	str.w	r5, [r2], #4
   11df2:	d1f9      	bne.n	11de8 <uuid_to_uuid128+0x38>
   11df4:	781b      	ldrb	r3, [r3, #0]
   11df6:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   11df8:	6843      	ldr	r3, [r0, #4]
   11dfa:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11dfe:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   11e00:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11e02:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   11e04:	0a1b      	lsrs	r3, r3, #8
   11e06:	738a      	strb	r2, [r1, #14]
   11e08:	740b      	strb	r3, [r1, #16]
}
   11e0a:	e7e8      	b.n	11dde <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11e0c:	f100 0310 	add.w	r3, r0, #16
   11e10:	f850 2b04 	ldr.w	r2, [r0], #4
   11e14:	4298      	cmp	r0, r3
   11e16:	f841 2b04 	str.w	r2, [r1], #4
   11e1a:	d1f9      	bne.n	11e10 <uuid_to_uuid128+0x60>
   11e1c:	7803      	ldrb	r3, [r0, #0]
   11e1e:	700b      	strb	r3, [r1, #0]
   11e20:	e7dd      	b.n	11dde <uuid_to_uuid128+0x2e>
   11e22:	bf00      	nop
   11e24:	000346ce 	.word	0x000346ce

00011e28 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11e28:	b538      	push	{r3, r4, r5, lr}
   11e2a:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11e2c:	2d01      	cmp	r5, #1
{
   11e2e:	4610      	mov	r0, r2
   11e30:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11e32:	d010      	beq.n	11e56 <bt_buf_get_rx+0x2e>
   11e34:	2d03      	cmp	r5, #3
   11e36:	d01a      	beq.n	11e6e <bt_buf_get_rx+0x46>
   11e38:	2d05      	cmp	r5, #5
   11e3a:	d018      	beq.n	11e6e <bt_buf_get_rx+0x46>
   11e3c:	490e      	ldr	r1, [pc, #56]	; (11e78 <bt_buf_get_rx+0x50>)
   11e3e:	233d      	movs	r3, #61	; 0x3d
   11e40:	4a0e      	ldr	r2, [pc, #56]	; (11e7c <bt_buf_get_rx+0x54>)
   11e42:	480f      	ldr	r0, [pc, #60]	; (11e80 <bt_buf_get_rx+0x58>)
   11e44:	f018 fc25 	bl	2a692 <assert_print>
   11e48:	480e      	ldr	r0, [pc, #56]	; (11e84 <bt_buf_get_rx+0x5c>)
   11e4a:	f018 fc22 	bl	2a692 <assert_print>
   11e4e:	213d      	movs	r1, #61	; 0x3d
   11e50:	480a      	ldr	r0, [pc, #40]	; (11e7c <bt_buf_get_rx+0x54>)
   11e52:	f018 fc17 	bl	2a684 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11e56:	480c      	ldr	r0, [pc, #48]	; (11e88 <bt_buf_get_rx+0x60>)
   11e58:	f01c f8a7 	bl	2dfaa <net_buf_alloc_fixed>
   11e5c:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11e5e:	b120      	cbz	r0, 11e6a <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   11e60:	2101      	movs	r1, #1
   11e62:	300c      	adds	r0, #12
   11e64:	f009 fa6a 	bl	1b33c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11e68:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11e6a:	4620      	mov	r0, r4
   11e6c:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11e6e:	4602      	mov	r2, r0
   11e70:	460b      	mov	r3, r1
   11e72:	4806      	ldr	r0, [pc, #24]	; (11e8c <bt_buf_get_rx+0x64>)
   11e74:	e7f0      	b.n	11e58 <bt_buf_get_rx+0x30>
   11e76:	bf00      	nop
   11e78:	0003470e 	.word	0x0003470e
   11e7c:	000346df 	.word	0x000346df
   11e80:	00032629 	.word	0x00032629
   11e84:	00034753 	.word	0x00034753
   11e88:	20008d70 	.word	0x20008d70
   11e8c:	20008cd4 	.word	0x20008cd4

00011e90 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11e90:	b510      	push	{r4, lr}
   11e92:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11e94:	490a      	ldr	r1, [pc, #40]	; (11ec0 <bt_buf_get_cmd_complete+0x30>)
{
   11e96:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11e98:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   11e9c:	b920      	cbnz	r0, 11ea8 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11ea2:	2001      	movs	r0, #1
   11ea4:	f7ff bfc0 	b.w	11e28 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11ea8:	f009 fb9e 	bl	1b5e8 <net_buf_ref>
   11eac:	2101      	movs	r1, #1
		buf->len = 0U;
   11eae:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   11eb0:	4604      	mov	r4, r0
   11eb2:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   11eb4:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   11eb6:	300c      	adds	r0, #12
   11eb8:	f009 fa40 	bl	1b33c <net_buf_simple_reserve>
}
   11ebc:	4620      	mov	r0, r4
   11ebe:	bd10      	pop	{r4, pc}
   11ec0:	20008000 	.word	0x20008000

00011ec4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11ec4:	b570      	push	{r4, r5, r6, lr}
   11ec6:	4604      	mov	r4, r0
	switch (evt) {
   11ec8:	2c0f      	cmp	r4, #15
{
   11eca:	460d      	mov	r5, r1
   11ecc:	4610      	mov	r0, r2
   11ece:	4619      	mov	r1, r3
	switch (evt) {
   11ed0:	d805      	bhi.n	11ede <bt_buf_get_evt+0x1a>
   11ed2:	2c0d      	cmp	r4, #13
   11ed4:	d90d      	bls.n	11ef2 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11eda:	f7ff bfd9 	b.w	11e90 <bt_buf_get_cmd_complete>
	switch (evt) {
   11ede:	2c13      	cmp	r4, #19
   11ee0:	d107      	bne.n	11ef2 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   11ee2:	480c      	ldr	r0, [pc, #48]	; (11f14 <bt_buf_get_evt+0x50>)
   11ee4:	f01c f861 	bl	2dfaa <net_buf_alloc_fixed>
			if (buf) {
   11ee8:	4604      	mov	r4, r0
   11eea:	b938      	cbnz	r0, 11efc <bt_buf_get_evt+0x38>
{
   11eec:	2400      	movs	r4, #0
}
   11eee:	4620      	mov	r0, r4
   11ef0:	bd70      	pop	{r4, r5, r6, pc}
   11ef2:	4602      	mov	r2, r0
   11ef4:	460b      	mov	r3, r1
		if (discardable) {
   11ef6:	b145      	cbz	r5, 11f0a <bt_buf_get_evt+0x46>
   11ef8:	4807      	ldr	r0, [pc, #28]	; (11f18 <bt_buf_get_evt+0x54>)
   11efa:	e7f3      	b.n	11ee4 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11efc:	2101      	movs	r1, #1
   11efe:	300c      	adds	r0, #12
   11f00:	f009 fa1c 	bl	1b33c <net_buf_simple_reserve>
   11f04:	2301      	movs	r3, #1
   11f06:	7623      	strb	r3, [r4, #24]
}
   11f08:	e7f1      	b.n	11eee <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11f0a:	2001      	movs	r0, #1
}
   11f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11f10:	f7ff bf8a 	b.w	11e28 <bt_buf_get_rx>
   11f14:	20008e0c 	.word	0x20008e0c
   11f18:	20008d3c 	.word	0x20008d3c

00011f1c <hci_disconn_complete_prio>:
{
   11f1c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11f1e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11f20:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   11f24:	781b      	ldrb	r3, [r3, #0]
   11f26:	b963      	cbnz	r3, 11f42 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   11f28:	4620      	mov	r0, r4
   11f2a:	f002 ffa7 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   11f2e:	4605      	mov	r5, r0
   11f30:	b940      	cbnz	r0, 11f44 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11f32:	4b08      	ldr	r3, [pc, #32]	; (11f54 <hci_disconn_complete_prio+0x38>)
   11f34:	881a      	ldrh	r2, [r3, #0]
   11f36:	b922      	cbnz	r2, 11f42 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11f38:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11f3c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11f40:	8018      	strh	r0, [r3, #0]
}
   11f42:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11f44:	2101      	movs	r1, #1
   11f46:	f002 ffa1 	bl	14e8c <bt_conn_set_state>
	bt_conn_unref(conn);
   11f4a:	4628      	mov	r0, r5
}
   11f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11f50:	f002 bf64 	b.w	14e1c <bt_conn_unref>
   11f54:	20021b12 	.word	0x20021b12

00011f58 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11f58:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11f5a:	4c08      	ldr	r4, [pc, #32]	; (11f7c <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11f5c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11f5e:	2205      	movs	r2, #5
   11f60:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11f64:	f003 fa80 	bl	15468 <bt_conn_lookup_state_le>
		if (!conn) {
   11f68:	b938      	cbnz	r0, 11f7a <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11f6a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11f6e:	2204      	movs	r2, #4
}
   11f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11f74:	4902      	ldr	r1, [pc, #8]	; (11f80 <find_pending_connect.part.0+0x28>)
   11f76:	f003 ba77 	b.w	15468 <bt_conn_lookup_state_le>
}
   11f7a:	bd10      	pop	{r4, pc}
   11f7c:	20008000 	.word	0x20008000
   11f80:	00034561 	.word	0x00034561

00011f84 <hci_data_buf_overflow>:
{
   11f84:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11f86:	68c3      	ldr	r3, [r0, #12]
{
   11f88:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11f8a:	b088      	sub	sp, #32
   11f8c:	466a      	mov	r2, sp
   11f8e:	781b      	ldrb	r3, [r3, #0]
   11f90:	4906      	ldr	r1, [pc, #24]	; (11fac <hci_data_buf_overflow+0x28>)
   11f92:	4807      	ldr	r0, [pc, #28]	; (11fb0 <hci_data_buf_overflow+0x2c>)
   11f94:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11f98:	2303      	movs	r3, #3
   11f9a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11f9e:	f842 3f10 	str.w	r3, [r2, #16]!
   11fa2:	f01a f800 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
}
   11fa6:	46bd      	mov	sp, r7
   11fa8:	bd80      	pop	{r7, pc}
   11faa:	bf00      	nop
   11fac:	00034773 	.word	0x00034773
   11fb0:	000314b4 	.word	0x000314b4

00011fb4 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   11fb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   11fb6:	4b06      	ldr	r3, [pc, #24]	; (11fd0 <le_conn_param_neg_reply.part.0+0x1c>)
   11fb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11fbc:	9305      	str	r3, [sp, #20]
   11fbe:	2302      	movs	r3, #2
   11fc0:	4804      	ldr	r0, [pc, #16]	; (11fd4 <le_conn_param_neg_reply.part.0+0x20>)
   11fc2:	aa04      	add	r2, sp, #16
   11fc4:	9304      	str	r3, [sp, #16]
   11fc6:	f019 ffee 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
}
   11fca:	b007      	add	sp, #28
   11fcc:	f85d fb04 	ldr.w	pc, [sp], #4
   11fd0:	0003479b 	.word	0x0003479b
   11fd4:	000314b4 	.word	0x000314b4

00011fd8 <rx_queue_put>:
{
   11fd8:	b598      	push	{r3, r4, r7, lr}
   11fda:	4601      	mov	r1, r0
   11fdc:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   11fde:	480d      	ldr	r0, [pc, #52]	; (12014 <rx_queue_put+0x3c>)
   11fe0:	f009 f9d2 	bl	1b388 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   11fe4:	490c      	ldr	r1, [pc, #48]	; (12018 <rx_queue_put+0x40>)
   11fe6:	480d      	ldr	r0, [pc, #52]	; (1201c <rx_queue_put+0x44>)
   11fe8:	f01e f94e 	bl	30288 <k_work_submit_to_queue>
	if (err < 0) {
   11fec:	2800      	cmp	r0, #0
   11fee:	da0e      	bge.n	1200e <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   11ff0:	466c      	mov	r4, sp
   11ff2:	b088      	sub	sp, #32
   11ff4:	466a      	mov	r2, sp
   11ff6:	4b0a      	ldr	r3, [pc, #40]	; (12020 <rx_queue_put+0x48>)
   11ff8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11ffc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12000:	2303      	movs	r3, #3
   12002:	4808      	ldr	r0, [pc, #32]	; (12024 <rx_queue_put+0x4c>)
   12004:	f842 3f10 	str.w	r3, [r2, #16]!
   12008:	f019 ffcd 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   1200c:	46a5      	mov	sp, r4
}
   1200e:	46bd      	mov	sp, r7
   12010:	bd98      	pop	{r3, r4, r7, pc}
   12012:	bf00      	nop
   12014:	2000813c 	.word	0x2000813c
   12018:	200084c4 	.word	0x200084c4
   1201c:	20009bc8 	.word	0x20009bc8
   12020:	000347b5 	.word	0x000347b5
   12024:	000314b4 	.word	0x000314b4

00012028 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   12028:	460b      	mov	r3, r1
   1202a:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1202c:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   1202e:	af00      	add	r7, sp, #0
   12030:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   12032:	4629      	mov	r1, r5
   12034:	68d8      	ldr	r0, [r3, #12]
   12036:	f7ff fd03 	bl	11a40 <bt_hex>
   1203a:	b08a      	sub	sp, #40	; 0x28
   1203c:	466a      	mov	r2, sp
   1203e:	4b09      	ldr	r3, [pc, #36]	; (12064 <handle_event.part.0+0x3c>)
   12040:	e9c2 5007 	strd	r5, r0, [r2, #28]
   12044:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12048:	f240 4302 	movw	r3, #1026	; 0x402
   1204c:	8493      	strh	r3, [r2, #36]	; 0x24
   1204e:	4b06      	ldr	r3, [pc, #24]	; (12068 <handle_event.part.0+0x40>)
   12050:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   12054:	4805      	ldr	r0, [pc, #20]	; (1206c <handle_event.part.0+0x44>)
   12056:	f842 3f10 	str.w	r3, [r2, #16]!
   1205a:	f019 ffa4 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
}
   1205e:	46bd      	mov	sp, r7
   12060:	bdb0      	pop	{r4, r5, r7, pc}
   12062:	bf00      	nop
   12064:	000347d2 	.word	0x000347d2
   12068:	01000005 	.word	0x01000005
   1206c:	000314b4 	.word	0x000314b4

00012070 <hci_hardware_error>:
{
   12070:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   12072:	2101      	movs	r1, #1
   12074:	af00      	add	r7, sp, #0
   12076:	300c      	adds	r0, #12
   12078:	f009 fb76 	bl	1b768 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1207c:	b088      	sub	sp, #32
   1207e:	466a      	mov	r2, sp
   12080:	7803      	ldrb	r3, [r0, #0]
   12082:	4906      	ldr	r1, [pc, #24]	; (1209c <hci_hardware_error+0x2c>)
   12084:	4806      	ldr	r0, [pc, #24]	; (120a0 <hci_hardware_error+0x30>)
   12086:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1208a:	2303      	movs	r3, #3
   1208c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12090:	f842 3f10 	str.w	r3, [r2, #16]!
   12094:	f019 ff87 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
}
   12098:	46bd      	mov	sp, r7
   1209a:	bd80      	pop	{r7, pc}
   1209c:	000347f4 	.word	0x000347f4
   120a0:	000314b4 	.word	0x000314b4

000120a4 <le_data_len_change>:
{
   120a4:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120a6:	68c3      	ldr	r3, [r0, #12]
{
   120a8:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120aa:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   120ac:	4620      	mov	r0, r4
   120ae:	f002 fee5 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   120b2:	b980      	cbnz	r0, 120d6 <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   120b4:	466d      	mov	r5, sp
   120b6:	b088      	sub	sp, #32
   120b8:	466a      	mov	r2, sp
   120ba:	4b08      	ldr	r3, [pc, #32]	; (120dc <le_data_len_change+0x38>)
   120bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120c0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   120c4:	2303      	movs	r3, #3
   120c6:	4806      	ldr	r0, [pc, #24]	; (120e0 <le_data_len_change+0x3c>)
   120c8:	f842 3f10 	str.w	r3, [r2, #16]!
   120cc:	f019 ff6b 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   120d0:	46ad      	mov	sp, r5
}
   120d2:	46bd      	mov	sp, r7
   120d4:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   120d6:	f002 fea1 	bl	14e1c <bt_conn_unref>
   120da:	e7fa      	b.n	120d2 <le_data_len_change+0x2e>
   120dc:	00034816 	.word	0x00034816
   120e0:	000314b4 	.word	0x000314b4

000120e4 <le_phy_update_complete>:
{
   120e4:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120e6:	68c3      	ldr	r3, [r0, #12]
{
   120e8:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120ea:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   120ee:	4620      	mov	r0, r4
   120f0:	f002 fec4 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   120f4:	b980      	cbnz	r0, 12118 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   120f6:	466d      	mov	r5, sp
   120f8:	b088      	sub	sp, #32
   120fa:	466a      	mov	r2, sp
   120fc:	4b08      	ldr	r3, [pc, #32]	; (12120 <le_phy_update_complete+0x3c>)
   120fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12102:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12106:	2303      	movs	r3, #3
   12108:	4806      	ldr	r0, [pc, #24]	; (12124 <le_phy_update_complete+0x40>)
   1210a:	f842 3f10 	str.w	r3, [r2, #16]!
   1210e:	f019 ff4a 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12112:	46ad      	mov	sp, r5
}
   12114:	46bd      	mov	sp, r7
   12116:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   12118:	f002 fe80 	bl	14e1c <bt_conn_unref>
   1211c:	e7fa      	b.n	12114 <le_phy_update_complete+0x30>
   1211e:	bf00      	nop
   12120:	00034816 	.word	0x00034816
   12124:	000314b4 	.word	0x000314b4

00012128 <hci_disconn_complete>:
{
   12128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1212c:	68c5      	ldr	r5, [r0, #12]
{
   1212e:	af00      	add	r7, sp, #0
	if (evt->status) {
   12130:	782e      	ldrb	r6, [r5, #0]
   12132:	b9ae      	cbnz	r6, 12160 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12134:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12138:	4640      	mov	r0, r8
   1213a:	f002 fe9f 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   1213e:	4604      	mov	r4, r0
   12140:	b988      	cbnz	r0, 12166 <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12142:	466c      	mov	r4, sp
   12144:	b088      	sub	sp, #32
   12146:	466a      	mov	r2, sp
   12148:	4b0b      	ldr	r3, [pc, #44]	; (12178 <hci_disconn_complete+0x50>)
   1214a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1214e:	e9c2 3805 	strd	r3, r8, [r2, #20]
   12152:	2303      	movs	r3, #3
   12154:	4809      	ldr	r0, [pc, #36]	; (1217c <hci_disconn_complete+0x54>)
   12156:	f842 3f10 	str.w	r3, [r2, #16]!
   1215a:	f019 ff24 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   1215e:	46a5      	mov	sp, r4
}
   12160:	46bd      	mov	sp, r7
   12162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   12166:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12168:	4631      	mov	r1, r6
	conn->err = evt->reason;
   1216a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1216c:	f002 fe8e 	bl	14e8c <bt_conn_set_state>
		bt_conn_unref(conn);
   12170:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   12172:	f002 fe53 	bl	14e1c <bt_conn_unref>
   12176:	e7f3      	b.n	12160 <hci_disconn_complete+0x38>
   12178:	0003483a 	.word	0x0003483a
   1217c:	000314b4 	.word	0x000314b4

00012180 <handle_event>:
{
   12180:	b5b0      	push	{r4, r5, r7, lr}
   12182:	4604      	mov	r4, r0
   12184:	af00      	add	r7, sp, #0
   12186:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   1218a:	4293      	cmp	r3, r2
   1218c:	d103      	bne.n	12196 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   1218e:	4620      	mov	r0, r4
   12190:	f7ff ff4a 	bl	12028 <handle_event.part.0>
}
   12194:	e018      	b.n	121c8 <handle_event+0x48>
		if (handler->event != event) {
   12196:	4610      	mov	r0, r2
   12198:	f810 5b08 	ldrb.w	r5, [r0], #8
   1219c:	42a5      	cmp	r5, r4
   1219e:	d119      	bne.n	121d4 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   121a0:	8a0b      	ldrh	r3, [r1, #16]
   121a2:	7850      	ldrb	r0, [r2, #1]
   121a4:	4298      	cmp	r0, r3
   121a6:	d911      	bls.n	121cc <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   121a8:	466d      	mov	r5, sp
   121aa:	b088      	sub	sp, #32
   121ac:	466a      	mov	r2, sp
   121ae:	490a      	ldr	r1, [pc, #40]	; (121d8 <handle_event+0x58>)
   121b0:	61d4      	str	r4, [r2, #28]
   121b2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   121b6:	2304      	movs	r3, #4
   121b8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   121bc:	4807      	ldr	r0, [pc, #28]	; (121dc <handle_event+0x5c>)
   121be:	f842 3f10 	str.w	r3, [r2, #16]!
   121c2:	f019 fef0 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   121c6:	46ad      	mov	sp, r5
}
   121c8:	46bd      	mov	sp, r7
   121ca:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   121cc:	4608      	mov	r0, r1
   121ce:	6853      	ldr	r3, [r2, #4]
   121d0:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   121d2:	e7f9      	b.n	121c8 <handle_event+0x48>
   121d4:	4602      	mov	r2, r0
   121d6:	e7d8      	b.n	1218a <handle_event+0xa>
   121d8:	00034860 	.word	0x00034860
   121dc:	000314b4 	.word	0x000314b4

000121e0 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   121e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   121e2:	4855      	ldr	r0, [pc, #340]	; (12338 <rx_work_handler+0x158>)
{
   121e4:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   121e6:	f009 f939 	bl	1b45c <net_buf_slist_get>
	if (!buf) {
   121ea:	4604      	mov	r4, r0
   121ec:	2800      	cmp	r0, #0
   121ee:	d06a      	beq.n	122c6 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   121f0:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   121f2:	2b01      	cmp	r3, #1
   121f4:	d069      	beq.n	122ca <rx_work_handler+0xea>
   121f6:	2b03      	cmp	r3, #3
   121f8:	f040 8099 	bne.w	1232e <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   121fc:	8a03      	ldrh	r3, [r0, #16]
   121fe:	2b03      	cmp	r3, #3
   12200:	d80c      	bhi.n	1221c <rx_work_handler+0x3c>
   12202:	f240 13ed 	movw	r3, #493	; 0x1ed
   12206:	4a4d      	ldr	r2, [pc, #308]	; (1233c <rx_work_handler+0x15c>)
   12208:	494d      	ldr	r1, [pc, #308]	; (12340 <rx_work_handler+0x160>)
   1220a:	484e      	ldr	r0, [pc, #312]	; (12344 <rx_work_handler+0x164>)
   1220c:	f018 fa41 	bl	2a692 <assert_print>
   12210:	4040      	eors	r0, r0
   12212:	f380 8811 	msr	BASEPRI, r0
   12216:	f04f 0003 	mov.w	r0, #3
   1221a:	df02      	svc	2
   1221c:	2104      	movs	r1, #4
   1221e:	f104 000c 	add.w	r0, r4, #12
   12222:	f009 faa1 	bl	1b768 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12226:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12228:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1222a:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   1222c:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   1222e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   12232:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   12234:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12236:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   12238:	d010      	beq.n	1225c <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1223a:	466d      	mov	r5, sp
   1223c:	b088      	sub	sp, #32
   1223e:	466a      	mov	r2, sp
   12240:	4841      	ldr	r0, [pc, #260]	; (12348 <rx_work_handler+0x168>)
   12242:	61d3      	str	r3, [r2, #28]
   12244:	2304      	movs	r3, #4
   12246:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1224a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1224e:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12252:	483e      	ldr	r0, [pc, #248]	; (1234c <rx_work_handler+0x16c>)
   12254:	f019 fea7 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12258:	46ad      	mov	sp, r5
   1225a:	e064      	b.n	12326 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1225c:	f002 fe0e 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   12260:	4605      	mov	r5, r0
   12262:	b960      	cbnz	r0, 1227e <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   12264:	466d      	mov	r5, sp
   12266:	b088      	sub	sp, #32
   12268:	8b63      	ldrh	r3, [r4, #26]
   1226a:	466a      	mov	r2, sp
   1226c:	4938      	ldr	r1, [pc, #224]	; (12350 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   1226e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12272:	2303      	movs	r3, #3
   12274:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12278:	f842 3f10 	str.w	r3, [r2, #16]!
   1227c:	e7e9      	b.n	12252 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   1227e:	f002 fef9 	bl	15074 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   12282:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   12284:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   12286:	0b32      	lsrs	r2, r6, #12
   12288:	4628      	mov	r0, r5
   1228a:	f002 fc63 	bl	14b54 <bt_conn_recv>
	bt_conn_unref(conn);
   1228e:	4628      	mov	r0, r5
   12290:	f002 fdc4 	bl	14e1c <bt_conn_unref>
	return list->head;
   12294:	4b2f      	ldr	r3, [pc, #188]	; (12354 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   12296:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1229a:	b1a3      	cbz	r3, 122c6 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1229c:	492e      	ldr	r1, [pc, #184]	; (12358 <rx_work_handler+0x178>)
   1229e:	482f      	ldr	r0, [pc, #188]	; (1235c <rx_work_handler+0x17c>)
   122a0:	f01d fff2 	bl	30288 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   122a4:	2800      	cmp	r0, #0
   122a6:	da0e      	bge.n	122c6 <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   122a8:	466c      	mov	r4, sp
   122aa:	b088      	sub	sp, #32
   122ac:	466a      	mov	r2, sp
   122ae:	4b2c      	ldr	r3, [pc, #176]	; (12360 <rx_work_handler+0x180>)
   122b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   122b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   122b8:	2303      	movs	r3, #3
   122ba:	4824      	ldr	r0, [pc, #144]	; (1234c <rx_work_handler+0x16c>)
   122bc:	f842 3f10 	str.w	r3, [r2, #16]!
   122c0:	f019 fe71 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   122c4:	46a5      	mov	sp, r4
		}
	}
}
   122c6:	46bd      	mov	sp, r7
   122c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   122ca:	8a03      	ldrh	r3, [r0, #16]
   122cc:	2b01      	cmp	r3, #1
   122ce:	d80c      	bhi.n	122ea <rx_work_handler+0x10a>
   122d0:	f640 136d 	movw	r3, #2413	; 0x96d
   122d4:	4a19      	ldr	r2, [pc, #100]	; (1233c <rx_work_handler+0x15c>)
   122d6:	491a      	ldr	r1, [pc, #104]	; (12340 <rx_work_handler+0x160>)
   122d8:	481a      	ldr	r0, [pc, #104]	; (12344 <rx_work_handler+0x164>)
   122da:	f018 f9da 	bl	2a692 <assert_print>
   122de:	4040      	eors	r0, r0
   122e0:	f380 8811 	msr	BASEPRI, r0
   122e4:	f04f 0003 	mov.w	r0, #3
   122e8:	df02      	svc	2
   122ea:	2102      	movs	r1, #2
   122ec:	f104 000c 	add.w	r0, r4, #12
   122f0:	f009 fa3a 	bl	1b768 <net_buf_simple_pull_mem>
   122f4:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   122f6:	7800      	ldrb	r0, [r0, #0]
   122f8:	f019 fe13 	bl	2bf22 <bt_hci_evt_get_flags>
   122fc:	0783      	lsls	r3, r0, #30
   122fe:	d40c      	bmi.n	1231a <rx_work_handler+0x13a>
   12300:	f640 1371 	movw	r3, #2417	; 0x971
   12304:	4a0d      	ldr	r2, [pc, #52]	; (1233c <rx_work_handler+0x15c>)
   12306:	4917      	ldr	r1, [pc, #92]	; (12364 <rx_work_handler+0x184>)
   12308:	480e      	ldr	r0, [pc, #56]	; (12344 <rx_work_handler+0x164>)
   1230a:	f018 f9c2 	bl	2a692 <assert_print>
   1230e:	4040      	eors	r0, r0
   12310:	f380 8811 	msr	BASEPRI, r0
   12314:	f04f 0003 	mov.w	r0, #3
   12318:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1231a:	2306      	movs	r3, #6
   1231c:	4621      	mov	r1, r4
   1231e:	4a12      	ldr	r2, [pc, #72]	; (12368 <rx_work_handler+0x188>)
   12320:	7828      	ldrb	r0, [r5, #0]
   12322:	f7ff ff2d 	bl	12180 <handle_event>
		net_buf_unref(buf);
   12326:	4620      	mov	r0, r4
   12328:	f009 f91a 	bl	1b560 <net_buf_unref>
		break;
   1232c:	e7b2      	b.n	12294 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1232e:	466d      	mov	r5, sp
   12330:	b088      	sub	sp, #32
   12332:	466a      	mov	r2, sp
   12334:	490d      	ldr	r1, [pc, #52]	; (1236c <rx_work_handler+0x18c>)
   12336:	e79a      	b.n	1226e <rx_work_handler+0x8e>
   12338:	2000813c 	.word	0x2000813c
   1233c:	00034882 	.word	0x00034882
   12340:	000348b6 	.word	0x000348b6
   12344:	00032629 	.word	0x00032629
   12348:	000348cf 	.word	0x000348cf
   1234c:	000314b4 	.word	0x000314b4
   12350:	000348f3 	.word	0x000348f3
   12354:	20008000 	.word	0x20008000
   12358:	200084c4 	.word	0x200084c4
   1235c:	20009bc8 	.word	0x20009bc8
   12360:	000347b5 	.word	0x000347b5
   12364:	00034915 	.word	0x00034915
   12368:	00031e94 	.word	0x00031e94
   1236c:	00034943 	.word	0x00034943

00012370 <hci_le_meta_event>:
{
   12370:	b510      	push	{r4, lr}
   12372:	2101      	movs	r1, #1
   12374:	4604      	mov	r4, r0
   12376:	300c      	adds	r0, #12
   12378:	f009 f9f6 	bl	1b768 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1237c:	4621      	mov	r1, r4
}
   1237e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12382:	230a      	movs	r3, #10
   12384:	4a01      	ldr	r2, [pc, #4]	; (1238c <hci_le_meta_event+0x1c>)
   12386:	7800      	ldrb	r0, [r0, #0]
   12388:	f7ff befa 	b.w	12180 <handle_event>
   1238c:	00031ec4 	.word	0x00031ec4

00012390 <le_remote_feat_complete>:
{
   12390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   12392:	68c5      	ldr	r5, [r0, #12]
{
   12394:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12396:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1239a:	4630      	mov	r0, r6
   1239c:	f002 fd6e 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   123a0:	4604      	mov	r4, r0
   123a2:	b980      	cbnz	r0, 123c6 <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   123a4:	466c      	mov	r4, sp
   123a6:	b088      	sub	sp, #32
   123a8:	466a      	mov	r2, sp
   123aa:	4b10      	ldr	r3, [pc, #64]	; (123ec <le_remote_feat_complete+0x5c>)
   123ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   123b0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   123b4:	2303      	movs	r3, #3
   123b6:	480e      	ldr	r0, [pc, #56]	; (123f0 <le_remote_feat_complete+0x60>)
   123b8:	f842 3f10 	str.w	r3, [r2, #16]!
   123bc:	f019 fdf3 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   123c0:	46a5      	mov	sp, r4
}
   123c2:	46bd      	mov	sp, r7
   123c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   123c6:	782b      	ldrb	r3, [r5, #0]
   123c8:	b93b      	cbnz	r3, 123da <le_remote_feat_complete+0x4a>
   123ca:	f8d5 3003 	ldr.w	r3, [r5, #3]
   123ce:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   123d2:	f8d5 3007 	ldr.w	r3, [r5, #7]
   123d6:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   123da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   123de:	1d20      	adds	r0, r4, #4
   123e0:	f019 fdca 	bl	2bf78 <atomic_or>
	bt_conn_unref(conn);
   123e4:	4620      	mov	r0, r4
   123e6:	f002 fd19 	bl	14e1c <bt_conn_unref>
   123ea:	e7ea      	b.n	123c2 <le_remote_feat_complete+0x32>
   123ec:	00034816 	.word	0x00034816
   123f0:	000314b4 	.word	0x000314b4

000123f4 <hci_cmd_done>:
{
   123f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   123f8:	4606      	mov	r6, r0
   123fa:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   123fc:	7a90      	ldrb	r0, [r2, #10]
{
   123fe:	4688      	mov	r8, r1
   12400:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12402:	f008 fe73 	bl	1b0ec <net_buf_pool_get>
   12406:	4d41      	ldr	r5, [pc, #260]	; (1250c <hci_cmd_done+0x118>)
   12408:	4285      	cmp	r5, r0
   1240a:	d018      	beq.n	1243e <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   1240c:	7aa4      	ldrb	r4, [r4, #10]
   1240e:	46e8      	mov	r8, sp
   12410:	4620      	mov	r0, r4
   12412:	f008 fe6b 	bl	1b0ec <net_buf_pool_get>
   12416:	b08a      	sub	sp, #40	; 0x28
   12418:	466a      	mov	r2, sp
   1241a:	4b3d      	ldr	r3, [pc, #244]	; (12510 <hci_cmd_done+0x11c>)
   1241c:	e9c2 4007 	strd	r4, r0, [r2, #28]
   12420:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12424:	2306      	movs	r3, #6
   12426:	6255      	str	r5, [r2, #36]	; 0x24
   12428:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   1242c:	4839      	ldr	r0, [pc, #228]	; (12514 <hci_cmd_done+0x120>)
   1242e:	f842 3f10 	str.w	r3, [r2, #16]!
   12432:	f019 fdb8 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12436:	46c5      	mov	sp, r8
}
   12438:	46bd      	mov	sp, r7
   1243a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   1243e:	4620      	mov	r0, r4
   12440:	f008 fe5c 	bl	1b0fc <net_buf_id>
   12444:	f04f 090c 	mov.w	r9, #12
   12448:	4d33      	ldr	r5, [pc, #204]	; (12518 <hci_cmd_done+0x124>)
   1244a:	fb09 5000 	mla	r0, r9, r0, r5
   1244e:	8843      	ldrh	r3, [r0, #2]
   12450:	42b3      	cmp	r3, r6
   12452:	d016      	beq.n	12482 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   12454:	4620      	mov	r0, r4
   12456:	f008 fe51 	bl	1b0fc <net_buf_id>
   1245a:	fb09 5000 	mla	r0, r9, r0, r5
   1245e:	466c      	mov	r4, sp
   12460:	b088      	sub	sp, #32
   12462:	466a      	mov	r2, sp
   12464:	8843      	ldrh	r3, [r0, #2]
   12466:	61d3      	str	r3, [r2, #28]
   12468:	2304      	movs	r3, #4
   1246a:	492c      	ldr	r1, [pc, #176]	; (1251c <hci_cmd_done+0x128>)
   1246c:	4829      	ldr	r0, [pc, #164]	; (12514 <hci_cmd_done+0x120>)
   1246e:	e9c2 1605 	strd	r1, r6, [r2, #20]
   12472:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   12476:	f842 3f10 	str.w	r3, [r2, #16]!
   1247a:	f019 fd94 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   1247e:	46a5      	mov	sp, r4
		return;
   12480:	e7da      	b.n	12438 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   12482:	4e27      	ldr	r6, [pc, #156]	; (12520 <hci_cmd_done+0x12c>)
   12484:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   12488:	b120      	cbz	r0, 12494 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   1248a:	f009 f869 	bl	1b560 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1248e:	2300      	movs	r3, #0
   12490:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   12494:	4620      	mov	r0, r4
   12496:	f008 fe31 	bl	1b0fc <net_buf_id>
   1249a:	260c      	movs	r6, #12
   1249c:	fb06 5000 	mla	r0, r6, r0, r5
   124a0:	6843      	ldr	r3, [r0, #4]
   124a2:	b1ab      	cbz	r3, 124d0 <hci_cmd_done+0xdc>
   124a4:	f1b8 0f00 	cmp.w	r8, #0
   124a8:	d112      	bne.n	124d0 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   124aa:	4620      	mov	r0, r4
   124ac:	f008 fe26 	bl	1b0fc <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   124b0:	2101      	movs	r1, #1
   124b2:	fb06 5000 	mla	r0, r6, r0, r5
   124b6:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   124b8:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   124bc:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   124be:	f003 061f 	and.w	r6, r3, #31
   124c2:	40b1      	lsls	r1, r6
	if (val) {
   124c4:	095b      	lsrs	r3, r3, #5
   124c6:	b1da      	cbz	r2, 12500 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   124c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   124cc:	f019 fd54 	bl	2bf78 <atomic_or>
	if (cmd(buf)->sync) {
   124d0:	4620      	mov	r0, r4
   124d2:	f008 fe13 	bl	1b0fc <net_buf_id>
   124d6:	260c      	movs	r6, #12
   124d8:	fb06 5000 	mla	r0, r6, r0, r5
   124dc:	6883      	ldr	r3, [r0, #8]
   124de:	2b00      	cmp	r3, #0
   124e0:	d0aa      	beq.n	12438 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   124e2:	4620      	mov	r0, r4
   124e4:	f008 fe0a 	bl	1b0fc <net_buf_id>
   124e8:	4370      	muls	r0, r6
   124ea:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   124ee:	4620      	mov	r0, r4
   124f0:	f008 fe04 	bl	1b0fc <net_buf_id>
   124f4:	fb06 5500 	mla	r5, r6, r0, r5
   124f8:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   124fa:	f013 f851 	bl	255a0 <z_impl_k_sem_give>
}
   124fe:	e79b      	b.n	12438 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12500:	43c9      	mvns	r1, r1
   12502:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12506:	f019 fd51 	bl	2bfac <atomic_and.isra.0>
   1250a:	e7e1      	b.n	124d0 <hci_cmd_done+0xdc>
   1250c:	20008dd8 	.word	0x20008dd8
   12510:	00034957 	.word	0x00034957
   12514:	000314b4 	.word	0x000314b4
   12518:	2002154c 	.word	0x2002154c
   1251c:	0003498c 	.word	0x0003498c
   12520:	20008000 	.word	0x20008000

00012524 <hci_cmd_status>:
{
   12524:	b538      	push	{r3, r4, r5, lr}
   12526:	2104      	movs	r1, #4
   12528:	4604      	mov	r4, r0
   1252a:	300c      	adds	r0, #12
   1252c:	f009 f91c 	bl	1b768 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12530:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   12532:	7801      	ldrb	r1, [r0, #0]
   12534:	4622      	mov	r2, r4
   12536:	8840      	ldrh	r0, [r0, #2]
   12538:	f7ff ff5c 	bl	123f4 <hci_cmd_done>
	if (ncmd) {
   1253c:	b125      	cbz	r5, 12548 <hci_cmd_status+0x24>
}
   1253e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   12542:	4802      	ldr	r0, [pc, #8]	; (1254c <hci_cmd_status+0x28>)
   12544:	f013 b82c 	b.w	255a0 <z_impl_k_sem_give>
   12548:	bd38      	pop	{r3, r4, r5, pc}
   1254a:	bf00      	nop
   1254c:	20008120 	.word	0x20008120

00012550 <hci_cmd_complete>:
{
   12550:	b538      	push	{r3, r4, r5, lr}
   12552:	2103      	movs	r1, #3
   12554:	4604      	mov	r4, r0
   12556:	300c      	adds	r0, #12
   12558:	f009 f906 	bl	1b768 <net_buf_simple_pull_mem>
	status = buf->data[0];
   1255c:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   1255e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12560:	4622      	mov	r2, r4
   12562:	7819      	ldrb	r1, [r3, #0]
   12564:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   12568:	f7ff ff44 	bl	123f4 <hci_cmd_done>
	if (ncmd) {
   1256c:	b125      	cbz	r5, 12578 <hci_cmd_complete+0x28>
}
   1256e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12572:	4802      	ldr	r0, [pc, #8]	; (1257c <hci_cmd_complete+0x2c>)
   12574:	f013 b814 	b.w	255a0 <z_impl_k_sem_give>
   12578:	bd38      	pop	{r3, r4, r5, pc}
   1257a:	bf00      	nop
   1257c:	20008120 	.word	0x20008120

00012580 <hci_num_completed_packets>:
{
   12580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   12584:	2500      	movs	r5, #0
{
   12586:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
   12588:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1258a:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   1258e:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 1268c <hci_num_completed_packets+0x10c>
{
   12592:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
   12594:	f898 3000 	ldrb.w	r3, [r8]
   12598:	429d      	cmp	r5, r3
   1259a:	db03      	blt.n	125a4 <hci_num_completed_packets+0x24>
}
   1259c:	371c      	adds	r7, #28
   1259e:	46bd      	mov	sp, r7
   125a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   125a4:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   125a8:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   125ac:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   125b0:	4658      	mov	r0, fp
   125b2:	f002 fc63 	bl	14e7c <bt_conn_lookup_handle>
		if (!conn) {
   125b6:	4604      	mov	r4, r0
   125b8:	b1d8      	cbz	r0, 125f2 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   125ba:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   125be:	2e00      	cmp	r6, #0
   125c0:	d039      	beq.n	12636 <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   125c2:	f04f 0320 	mov.w	r3, #32
   125c6:	f3ef 8211 	mrs	r2, BASEPRI
   125ca:	f383 8812 	msr	BASEPRI_MAX, r3
   125ce:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   125d2:	69e3      	ldr	r3, [r4, #28]
   125d4:	b1f3      	cbz	r3, 12614 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   125d6:	3b01      	subs	r3, #1
   125d8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   125da:	f382 8811 	msr	BASEPRI, r2
   125de:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   125e2:	4620      	mov	r0, r4
   125e4:	f002 fa3a 	bl	14a5c <bt_conn_get_pkts>
   125e8:	3e01      	subs	r6, #1
   125ea:	f012 ffd9 	bl	255a0 <z_impl_k_sem_give>
   125ee:	b2b6      	uxth	r6, r6
   125f0:	e7e5      	b.n	125be <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   125f2:	466c      	mov	r4, sp
   125f4:	b088      	sub	sp, #32
   125f6:	466a      	mov	r2, sp
   125f8:	4b25      	ldr	r3, [pc, #148]	; (12690 <hci_num_completed_packets+0x110>)
   125fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   125fe:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   12602:	2303      	movs	r3, #3
   12604:	4823      	ldr	r0, [pc, #140]	; (12694 <hci_num_completed_packets+0x114>)
   12606:	f842 3f10 	str.w	r3, [r2, #16]!
   1260a:	f019 fccc 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   1260e:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   12610:	3501      	adds	r5, #1
   12612:	e7bf      	b.n	12594 <hci_num_completed_packets+0x14>
   12614:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   12616:	b993      	cbnz	r3, 1263e <hci_num_completed_packets+0xbe>
   12618:	f382 8811 	msr	BASEPRI, r2
   1261c:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   12620:	2302      	movs	r3, #2
   12622:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12626:	481b      	ldr	r0, [pc, #108]	; (12694 <hci_num_completed_packets+0x114>)
   12628:	f8c7 a014 	str.w	sl, [r7, #20]
   1262c:	613b      	str	r3, [r7, #16]
   1262e:	f107 0210 	add.w	r2, r7, #16
   12632:	f019 fcb8 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   12636:	4620      	mov	r0, r4
   12638:	f002 fbf0 	bl	14e1c <bt_conn_unref>
   1263c:	e7e8      	b.n	12610 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1263e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   12640:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12642:	428b      	cmp	r3, r1
	list->head = node;
   12644:	6160      	str	r0, [r4, #20]
	list->tail = node;
   12646:	bf08      	it	eq
   12648:	61a0      	streq	r0, [r4, #24]
   1264a:	f382 8811 	msr	BASEPRI, r2
   1264e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   12652:	f04f 0220 	mov.w	r2, #32
   12656:	f3ef 8111 	mrs	r1, BASEPRI
   1265a:	f382 8812 	msr	BASEPRI_MAX, r2
   1265e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   12662:	68da      	ldr	r2, [r3, #12]
   12664:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   12666:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   1266a:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   1266e:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   12670:	b94a      	cbnz	r2, 12686 <hci_num_completed_packets+0x106>
	list->head = node;
   12672:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   12676:	f381 8811 	msr	BASEPRI, r1
   1267a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1267e:	4658      	mov	r0, fp
   12680:	f013 fafc 	bl	25c7c <k_work_submit>
   12684:	e7ad      	b.n	125e2 <hci_num_completed_packets+0x62>
	parent->next = child;
   12686:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12688:	6263      	str	r3, [r4, #36]	; 0x24
}
   1268a:	e7f4      	b.n	12676 <hci_num_completed_packets+0xf6>
   1268c:	000349db 	.word	0x000349db
   12690:	000349bf 	.word	0x000349bf
   12694:	000314b4 	.word	0x000314b4

00012698 <le_conn_update_complete>:
{
   12698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1269a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1269c:	68c5      	ldr	r5, [r0, #12]
{
   1269e:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   126a0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   126a4:	4630      	mov	r0, r6
   126a6:	f002 fbe9 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   126aa:	4604      	mov	r4, r0
   126ac:	b988      	cbnz	r0, 126d2 <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   126ae:	466c      	mov	r4, sp
   126b0:	b088      	sub	sp, #32
   126b2:	466a      	mov	r2, sp
   126b4:	4b2b      	ldr	r3, [pc, #172]	; (12764 <le_conn_update_complete+0xcc>)
   126b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   126ba:	e9c2 3605 	strd	r3, r6, [r2, #20]
   126be:	2303      	movs	r3, #3
   126c0:	4829      	ldr	r0, [pc, #164]	; (12768 <le_conn_update_complete+0xd0>)
   126c2:	f842 3f10 	str.w	r3, [r2, #16]!
   126c6:	f019 fc6e 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   126ca:	46a5      	mov	sp, r4
}
   126cc:	370c      	adds	r7, #12
   126ce:	46bd      	mov	sp, r7
   126d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   126d2:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   126d4:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   126d6:	2b1a      	cmp	r3, #26
   126d8:	d117      	bne.n	1270a <le_conn_update_complete+0x72>
   126da:	78c3      	ldrb	r3, [r0, #3]
   126dc:	2b01      	cmp	r3, #1
   126de:	d128      	bne.n	12732 <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   126e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   126e4:	4630      	mov	r0, r6
   126e6:	f019 fc47 	bl	2bf78 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   126ea:	0542      	lsls	r2, r0, #21
   126ec:	d40d      	bmi.n	1270a <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
   126ee:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   126f2:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
   126f4:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   126f6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   126fa:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   126fc:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   126fe:	f003 f9eb 	bl	15ad8 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   12702:	4620      	mov	r0, r4
   12704:	f002 fb8a 	bl	14e1c <bt_conn_unref>
   12708:	e7e0      	b.n	126cc <le_conn_update_complete+0x34>
		if (!evt->status) {
   1270a:	782b      	ldrb	r3, [r5, #0]
   1270c:	b98b      	cbnz	r3, 12732 <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   1270e:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   12712:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   12716:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1271a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1271e:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   12722:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12726:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1272a:	4630      	mov	r0, r6
   1272c:	f019 fc3e 	bl	2bfac <atomic_and.isra.0>
}
   12730:	e014      	b.n	1275c <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12732:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   12736:	05db      	lsls	r3, r3, #23
   12738:	d5f5      	bpl.n	12726 <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1273a:	782b      	ldrb	r3, [r5, #0]
   1273c:	2b20      	cmp	r3, #32
   1273e:	d1f2      	bne.n	12726 <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
   12740:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   12744:	2b00      	cmp	r3, #0
   12746:	d0ee      	beq.n	12726 <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
   12748:	3b01      	subs	r3, #1
   1274a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   1274e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   12752:	2300      	movs	r3, #0
   12754:	f104 0060 	add.w	r0, r4, #96	; 0x60
   12758:	f013 fc48 	bl	25fec <k_work_schedule>
		notify_le_param_updated(conn);
   1275c:	4620      	mov	r0, r4
   1275e:	f002 fced 	bl	1513c <notify_le_param_updated>
   12762:	e7ce      	b.n	12702 <le_conn_update_complete+0x6a>
   12764:	00034816 	.word	0x00034816
   12768:	000314b4 	.word	0x000314b4

0001276c <bt_hci_cmd_state_set_init>:
{
   1276c:	b510      	push	{r4, lr}
	state->bit = bit;
   1276e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   12772:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   12776:	460c      	mov	r4, r1
	state->val = val;
   12778:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   1277a:	f008 fcbf 	bl	1b0fc <net_buf_id>
   1277e:	220c      	movs	r2, #12
   12780:	4b02      	ldr	r3, [pc, #8]	; (1278c <bt_hci_cmd_state_set_init+0x20>)
   12782:	fb02 3300 	mla	r3, r2, r0, r3
   12786:	605c      	str	r4, [r3, #4]
}
   12788:	bd10      	pop	{r4, pc}
   1278a:	bf00      	nop
   1278c:	2002154c 	.word	0x2002154c

00012790 <bt_hci_cmd_create>:
{
   12790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12794:	f04f 32ff 	mov.w	r2, #4294967295
   12798:	4606      	mov	r6, r0
   1279a:	f04f 33ff 	mov.w	r3, #4294967295
   1279e:	481e      	ldr	r0, [pc, #120]	; (12818 <bt_hci_cmd_create+0x88>)
   127a0:	460f      	mov	r7, r1
   127a2:	f01b fc02 	bl	2dfaa <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   127a6:	4604      	mov	r4, r0
   127a8:	b958      	cbnz	r0, 127c2 <bt_hci_cmd_create+0x32>
   127aa:	491c      	ldr	r1, [pc, #112]	; (1281c <bt_hci_cmd_create+0x8c>)
   127ac:	481c      	ldr	r0, [pc, #112]	; (12820 <bt_hci_cmd_create+0x90>)
   127ae:	f240 1301 	movw	r3, #257	; 0x101
   127b2:	4a1c      	ldr	r2, [pc, #112]	; (12824 <bt_hci_cmd_create+0x94>)
   127b4:	f017 ff6d 	bl	2a692 <assert_print>
   127b8:	f240 1101 	movw	r1, #257	; 0x101
   127bc:	4819      	ldr	r0, [pc, #100]	; (12824 <bt_hci_cmd_create+0x94>)
   127be:	f017 ff61 	bl	2a684 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   127c2:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   127c6:	f100 0a0c 	add.w	sl, r0, #12
   127ca:	2101      	movs	r1, #1
   127cc:	4650      	mov	r0, sl
   127ce:	f008 fdb5 	bl	1b33c <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   127d2:	4620      	mov	r0, r4
   127d4:	f884 8018 	strb.w	r8, [r4, #24]
   127d8:	f008 fc90 	bl	1b0fc <net_buf_id>
   127dc:	f04f 090c 	mov.w	r9, #12
   127e0:	4d11      	ldr	r5, [pc, #68]	; (12828 <bt_hci_cmd_create+0x98>)
   127e2:	fb09 5000 	mla	r0, r9, r0, r5
   127e6:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   127e8:	4620      	mov	r0, r4
   127ea:	f008 fc87 	bl	1b0fc <net_buf_id>
   127ee:	fb09 5000 	mla	r0, r9, r0, r5
   127f2:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   127f6:	4620      	mov	r0, r4
   127f8:	f008 fc80 	bl	1b0fc <net_buf_id>
   127fc:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12800:	2103      	movs	r1, #3
   12802:	4650      	mov	r0, sl
   12804:	f8c5 8004 	str.w	r8, [r5, #4]
   12808:	f008 ffcc 	bl	1b7a4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1280c:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   1280e:	7087      	strb	r7, [r0, #2]
}
   12810:	4620      	mov	r0, r4
   12812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12816:	bf00      	nop
   12818:	20008dd8 	.word	0x20008dd8
   1281c:	00036908 	.word	0x00036908
   12820:	00032629 	.word	0x00032629
   12824:	00034882 	.word	0x00034882
   12828:	2002154c 	.word	0x2002154c

0001282c <bt_hci_cmd_send_sync>:
{
   1282c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12830:	b087      	sub	sp, #28
   12832:	4680      	mov	r8, r0
   12834:	4615      	mov	r5, r2
	if (!buf) {
   12836:	460c      	mov	r4, r1
{
   12838:	af00      	add	r7, sp, #0
	if (!buf) {
   1283a:	b921      	cbnz	r1, 12846 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   1283c:	f7ff ffa8 	bl	12790 <bt_hci_cmd_create>
		if (!buf) {
   12840:	4604      	mov	r4, r0
   12842:	2800      	cmp	r0, #0
   12844:	d05a      	beq.n	128fc <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12846:	2201      	movs	r2, #1
   12848:	2100      	movs	r1, #0
   1284a:	4638      	mov	r0, r7
   1284c:	f01d fcb9 	bl	301c2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12850:	4620      	mov	r0, r4
   12852:	f008 fc53 	bl	1b0fc <net_buf_id>
   12856:	230c      	movs	r3, #12
   12858:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 12904 <bt_hci_cmd_send_sync+0xd8>
   1285c:	fb03 9000 	mla	r0, r3, r0, r9
   12860:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   12862:	4620      	mov	r0, r4
   12864:	f008 fec0 	bl	1b5e8 <net_buf_ref>
   12868:	4601      	mov	r1, r0
   1286a:	4827      	ldr	r0, [pc, #156]	; (12908 <bt_hci_cmd_send_sync+0xdc>)
   1286c:	f008 fe52 	bl	1b514 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   12870:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   12874:	2300      	movs	r3, #0
   12876:	4638      	mov	r0, r7
   12878:	f012 fed6 	bl	25628 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1287c:	4606      	mov	r6, r0
   1287e:	b180      	cbz	r0, 128a2 <bt_hci_cmd_send_sync+0x76>
   12880:	f240 1349 	movw	r3, #329	; 0x149
   12884:	4a21      	ldr	r2, [pc, #132]	; (1290c <bt_hci_cmd_send_sync+0xe0>)
   12886:	4922      	ldr	r1, [pc, #136]	; (12910 <bt_hci_cmd_send_sync+0xe4>)
   12888:	4822      	ldr	r0, [pc, #136]	; (12914 <bt_hci_cmd_send_sync+0xe8>)
   1288a:	f017 ff02 	bl	2a692 <assert_print>
   1288e:	4631      	mov	r1, r6
   12890:	4821      	ldr	r0, [pc, #132]	; (12918 <bt_hci_cmd_send_sync+0xec>)
   12892:	f017 fefe 	bl	2a692 <assert_print>
   12896:	4040      	eors	r0, r0
   12898:	f380 8811 	msr	BASEPRI, r0
   1289c:	f04f 0003 	mov.w	r0, #3
   128a0:	df02      	svc	2
	status = cmd(buf)->status;
   128a2:	4620      	mov	r0, r4
   128a4:	f008 fc2a 	bl	1b0fc <net_buf_id>
   128a8:	230c      	movs	r3, #12
   128aa:	4358      	muls	r0, r3
   128ac:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   128b0:	b1e6      	cbz	r6, 128ec <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   128b2:	466d      	mov	r5, sp
   128b4:	b088      	sub	sp, #32
   128b6:	466a      	mov	r2, sp
   128b8:	4b18      	ldr	r3, [pc, #96]	; (1291c <bt_hci_cmd_send_sync+0xf0>)
   128ba:	61d6      	str	r6, [r2, #28]
   128bc:	e9c2 3805 	strd	r3, r8, [r2, #20]
   128c0:	2304      	movs	r3, #4
   128c2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   128c6:	4816      	ldr	r0, [pc, #88]	; (12920 <bt_hci_cmd_send_sync+0xf4>)
   128c8:	f842 3f10 	str.w	r3, [r2, #16]!
   128cc:	f019 fb6b 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   128d0:	4620      	mov	r0, r4
   128d2:	46ad      	mov	sp, r5
   128d4:	f008 fe44 	bl	1b560 <net_buf_unref>
			return -ECONNREFUSED;
   128d8:	2e09      	cmp	r6, #9
   128da:	bf14      	ite	ne
   128dc:	f06f 0004 	mvnne.w	r0, #4
   128e0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   128e4:	371c      	adds	r7, #28
   128e6:	46bd      	mov	sp, r7
   128e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   128ec:	b115      	cbz	r5, 128f4 <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   128ee:	602c      	str	r4, [r5, #0]
	return 0;
   128f0:	2000      	movs	r0, #0
   128f2:	e7f7      	b.n	128e4 <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   128f4:	4620      	mov	r0, r4
   128f6:	f008 fe33 	bl	1b560 <net_buf_unref>
   128fa:	e7f9      	b.n	128f0 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   128fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12900:	e7f0      	b.n	128e4 <bt_hci_cmd_send_sync+0xb8>
   12902:	bf00      	nop
   12904:	2002154c 	.word	0x2002154c
   12908:	20008144 	.word	0x20008144
   1290c:	00034882 	.word	0x00034882
   12910:	00033472 	.word	0x00033472
   12914:	00032629 	.word	0x00032629
   12918:	000349f2 	.word	0x000349f2
   1291c:	00034a12 	.word	0x00034a12
   12920:	000314b4 	.word	0x000314b4

00012924 <hci_le_read_max_data_len>:
{
   12924:	b570      	push	{r4, r5, r6, lr}
   12926:	b088      	sub	sp, #32
   12928:	4606      	mov	r6, r0
   1292a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1292c:	f242 002f 	movw	r0, #8239	; 0x202f
   12930:	2100      	movs	r1, #0
   12932:	aa01      	add	r2, sp, #4
   12934:	f7ff ff7a 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   12938:	4604      	mov	r4, r0
   1293a:	b160      	cbz	r0, 12956 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   1293c:	4b0b      	ldr	r3, [pc, #44]	; (1296c <hci_le_read_max_data_len+0x48>)
   1293e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12942:	9307      	str	r3, [sp, #28]
   12944:	2302      	movs	r3, #2
   12946:	480a      	ldr	r0, [pc, #40]	; (12970 <hci_le_read_max_data_len+0x4c>)
   12948:	aa06      	add	r2, sp, #24
   1294a:	9306      	str	r3, [sp, #24]
   1294c:	f019 fb2b 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
}
   12950:	4620      	mov	r0, r4
   12952:	b008      	add	sp, #32
   12954:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   12956:	9801      	ldr	r0, [sp, #4]
   12958:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1295a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1295e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   12960:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   12964:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   12966:	f008 fdfb 	bl	1b560 <net_buf_unref>
	return 0;
   1296a:	e7f1      	b.n	12950 <hci_le_read_max_data_len+0x2c>
   1296c:	00034a2e 	.word	0x00034a2e
   12970:	000314b4 	.word	0x000314b4

00012974 <bt_hci_le_rand>:
{
   12974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12976:	4b14      	ldr	r3, [pc, #80]	; (129c8 <bt_hci_le_rand+0x54>)
{
   12978:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1297a:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   1297e:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12980:	2b00      	cmp	r3, #0
   12982:	da1d      	bge.n	129c0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   12984:	b914      	cbnz	r4, 1298c <bt_hci_le_rand+0x18>
	return 0;
   12986:	4620      	mov	r0, r4
}
   12988:	b003      	add	sp, #12
   1298a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   1298c:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1298e:	f04f 0100 	mov.w	r1, #0
   12992:	f242 0018 	movw	r0, #8216	; 0x2018
   12996:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   12998:	4626      	mov	r6, r4
   1299a:	bf28      	it	cs
   1299c:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1299e:	f7ff ff45 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
   129a2:	2800      	cmp	r0, #0
   129a4:	d1f0      	bne.n	12988 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   129a6:	9f01      	ldr	r7, [sp, #4]
   129a8:	4632      	mov	r2, r6
   129aa:	68f9      	ldr	r1, [r7, #12]
   129ac:	4628      	mov	r0, r5
   129ae:	3101      	adds	r1, #1
   129b0:	f01d fdc9 	bl	30546 <memcpy>
		net_buf_unref(rsp);
   129b4:	4638      	mov	r0, r7
   129b6:	f008 fdd3 	bl	1b560 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   129ba:	4435      	add	r5, r6
		len -= count;
   129bc:	1ba4      	subs	r4, r4, r6
   129be:	e7e1      	b.n	12984 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   129c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   129c4:	e7e0      	b.n	12988 <bt_hci_le_rand+0x14>
   129c6:	bf00      	nop
   129c8:	20008000 	.word	0x20008000

000129cc <bt_hci_le_enh_conn_complete>:
{
   129cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d0:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   129d2:	f8b0 9001 	ldrh.w	r9, [r0, #1]
   129d6:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   129d8:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   129dc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   129e0:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   129e2:	4aa9      	ldr	r2, [pc, #676]	; (12c88 <bt_hci_le_enh_conn_complete+0x2bc>)
   129e4:	b29b      	uxth	r3, r3
   129e6:	8811      	ldrh	r1, [r2, #0]
{
   129e8:	af02      	add	r7, sp, #8
		if (disconnected_handles[i] == handle) {
   129ea:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   129ec:	bf04      	itt	eq
   129ee:	8016      	strheq	r6, [r2, #0]
			return true;
   129f0:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   129f2:	f000 ff99 	bl	13928 <bt_id_pending_keys_update>
	if (evt->status) {
   129f6:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   129f8:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   129fc:	b3a4      	cbz	r4, 12a68 <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   129fe:	2c3c      	cmp	r4, #60	; 0x3c
   12a00:	d122      	bne.n	12a48 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12a02:	f001 fafb 	bl	13ffc <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12a06:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12a0a:	3010      	adds	r0, #16
   12a0c:	f019 face 	bl	2bfac <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12a10:	2000      	movs	r0, #0
   12a12:	f7ff faa1 	bl	11f58 <find_pending_connect.part.0>
		if (!conn) {
   12a16:	4605      	mov	r5, r0
   12a18:	b970      	cbnz	r0, 12a38 <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   12a1a:	4b9c      	ldr	r3, [pc, #624]	; (12c8c <bt_hci_le_enh_conn_complete+0x2c0>)
   12a1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a20:	627b      	str	r3, [r7, #36]	; 0x24
   12a22:	2302      	movs	r3, #2
   12a24:	489a      	ldr	r0, [pc, #616]	; (12c90 <bt_hci_le_enh_conn_complete+0x2c4>)
   12a26:	623b      	str	r3, [r7, #32]
   12a28:	f107 0220 	add.w	r2, r7, #32
   12a2c:	f019 fabb 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
}
   12a30:	372c      	adds	r7, #44	; 0x2c
   12a32:	46bd      	mov	sp, r7
   12a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12a38:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12a3a:	2100      	movs	r1, #0
   12a3c:	f002 fa26 	bl	14e8c <bt_conn_set_state>
		bt_conn_unref(conn);
   12a40:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   12a42:	f002 f9eb 	bl	14e1c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12a46:	e7f3      	b.n	12a30 <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   12a48:	466d      	mov	r5, sp
   12a4a:	b088      	sub	sp, #32
   12a4c:	aa02      	add	r2, sp, #8
   12a4e:	4b91      	ldr	r3, [pc, #580]	; (12c94 <bt_hci_le_enh_conn_complete+0x2c8>)
   12a50:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12a54:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12a58:	2303      	movs	r3, #3
   12a5a:	488d      	ldr	r0, [pc, #564]	; (12c90 <bt_hci_le_enh_conn_complete+0x2c4>)
   12a5c:	f842 3f10 	str.w	r3, [r2, #16]!
   12a60:	f019 faa1 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12a64:	46ad      	mov	sp, r5
		return;
   12a66:	e7e3      	b.n	12a30 <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12a68:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12a6a:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12a6e:	3b02      	subs	r3, #2
   12a70:	2b01      	cmp	r3, #1
   12a72:	d82c      	bhi.n	12ace <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12a74:	4651      	mov	r1, sl
   12a76:	f107 0010 	add.w	r0, r7, #16
   12a7a:	f019 fa8d 	bl	2bf98 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12a7e:	7c3b      	ldrb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12a80:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12a84:	3b02      	subs	r3, #2
   12a86:	743b      	strb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12a88:	f107 0009 	add.w	r0, r7, #9
   12a8c:	f019 fa7f 	bl	2bf8e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12a90:	2301      	movs	r3, #1
   12a92:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12a94:	78eb      	ldrb	r3, [r5, #3]
   12a96:	2b01      	cmp	r3, #1
   12a98:	d02e      	beq.n	12af8 <bt_hci_le_enh_conn_complete+0x12c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   12a9a:	4650      	mov	r0, sl
   12a9c:	f7fe fff2 	bl	11a84 <bt_addr_le_str>
   12aa0:	466c      	mov	r4, sp
   12aa2:	b088      	sub	sp, #32
   12aa4:	aa02      	add	r2, sp, #8
   12aa6:	4b7c      	ldr	r3, [pc, #496]	; (12c98 <bt_hci_le_enh_conn_complete+0x2cc>)
   12aa8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12aac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
   12ab4:	8393      	strh	r3, [r2, #28]
   12ab6:	4b79      	ldr	r3, [pc, #484]	; (12c9c <bt_hci_le_enh_conn_complete+0x2d0>)
   12ab8:	4875      	ldr	r0, [pc, #468]	; (12c90 <bt_hci_le_enh_conn_complete+0x2c4>)
   12aba:	f842 3f10 	str.w	r3, [r2, #16]!
   12abe:	f019 fa72 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12ac2:	211f      	movs	r1, #31
   12ac4:	46a5      	mov	sp, r4
   12ac6:	4640      	mov	r0, r8
   12ac8:	f019 fa88 	bl	2bfdc <bt_hci_disconnect>
		return;
   12acc:	e7b0      	b.n	12a30 <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12ace:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   12ad0:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12ad2:	2b01      	cmp	r3, #1
   12ad4:	bf04      	itt	eq
   12ad6:	4b72      	ldreq	r3, [pc, #456]	; (12ca0 <bt_hci_le_enh_conn_complete+0x2d4>)
   12ad8:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12adc:	4620      	mov	r0, r4
   12ade:	f019 fbc2 	bl	2c266 <bt_lookup_id_addr>
   12ae2:	4601      	mov	r1, r0
   12ae4:	f107 0010 	add.w	r0, r7, #16
   12ae8:	f019 fa56 	bl	2bf98 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12aec:	4651      	mov	r1, sl
   12aee:	f107 0008 	add.w	r0, r7, #8
   12af2:	f019 fa51 	bl	2bf98 <bt_addr_le_copy>
   12af6:	e7cd      	b.n	12a94 <bt_hci_le_enh_conn_complete+0xc8>
   12af8:	f107 0010 	add.w	r0, r7, #16
   12afc:	f7ff fa2c 	bl	11f58 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b00:	78eb      	ldrb	r3, [r5, #3]
   12b02:	4604      	mov	r4, r0
   12b04:	2b01      	cmp	r3, #1
   12b06:	d10a      	bne.n	12b1e <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12b08:	f001 fa78 	bl	13ffc <bt_le_adv_lookup_legacy>
   12b0c:	4683      	mov	fp, r0
   12b0e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12b12:	3010      	adds	r0, #16
   12b14:	f019 fa4a 	bl	2bfac <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   12b18:	4658      	mov	r0, fp
   12b1a:	f019 fcc5 	bl	2c4a8 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   12b1e:	2c00      	cmp	r4, #0
   12b20:	d0bb      	beq.n	12a9a <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   12b22:	4620      	mov	r0, r4
	conn->err = 0U;
   12b24:	2200      	movs	r2, #0
	conn->handle = handle;
   12b26:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12b2a:	f107 0110 	add.w	r1, r7, #16
   12b2e:	f019 fa33 	bl	2bf98 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12b32:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   12b36:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12b3a:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   12b3e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12b42:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   12b46:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12b4a:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   12b4c:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b4e:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   12b50:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b52:	d116      	bne.n	12b82 <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   12b54:	f107 0108 	add.w	r1, r7, #8
   12b58:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12b5c:	f019 fa1c 	bl	2bf98 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12b60:	f001 fa4c 	bl	13ffc <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   12b64:	7a21      	ldrb	r1, [r4, #8]
   12b66:	4a4e      	ldr	r2, [pc, #312]	; (12ca0 <bt_hci_le_enh_conn_complete+0x2d4>)
   12b68:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   12b6c:	4411      	add	r1, r2
   12b6e:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12b72:	f019 fa11 	bl	2bf98 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   12b76:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   12b7a:	065d      	lsls	r5, r3, #25
   12b7c:	d501      	bpl.n	12b82 <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   12b7e:	f001 fc03 	bl	14388 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12b82:	2107      	movs	r1, #7
   12b84:	4620      	mov	r0, r4
   12b86:	f002 f981 	bl	14e8c <bt_conn_set_state>
	if (is_disconnected) {
   12b8a:	b11e      	cbz	r6, 12b94 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12b8c:	2101      	movs	r1, #1
   12b8e:	4620      	mov	r0, r4
   12b90:	f002 f97c 	bl	14e8c <bt_conn_set_state>
	bt_conn_connected(conn);
   12b94:	4620      	mov	r0, r4
   12b96:	f019 fd0d 	bl	2c5b4 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   12b9a:	7b63      	ldrb	r3, [r4, #13]
   12b9c:	2b07      	cmp	r3, #7
   12b9e:	d16e      	bne.n	12c7e <bt_hci_le_enh_conn_complete+0x2b2>
   12ba0:	1d23      	adds	r3, r4, #4
   12ba2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12ba6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12baa:	4d3d      	ldr	r5, [pc, #244]	; (12ca0 <bt_hci_le_enh_conn_complete+0x2d4>)
   12bac:	d129      	bne.n	12c02 <bt_hci_le_enh_conn_complete+0x236>
   12bae:	78e3      	ldrb	r3, [r4, #3]
   12bb0:	b11b      	cbz	r3, 12bba <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12bb2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12bb6:	0718      	lsls	r0, r3, #28
   12bb8:	d523      	bpl.n	12c02 <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12bba:	2102      	movs	r1, #2
   12bbc:	f242 0016 	movw	r0, #8214	; 0x2016
   12bc0:	f7ff fde6 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   12bc4:	4606      	mov	r6, r0
   12bc6:	2800      	cmp	r0, #0
   12bc8:	d05b      	beq.n	12c82 <bt_hci_le_enh_conn_complete+0x2b6>
   12bca:	2102      	movs	r1, #2
   12bcc:	300c      	adds	r0, #12
   12bce:	f008 fde9 	bl	1b7a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12bd2:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12bd4:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   12bd6:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12bd8:	4631      	mov	r1, r6
   12bda:	f242 0016 	movw	r0, #8214	; 0x2016
   12bde:	f7ff fe25 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
   12be2:	b170      	cbz	r0, 12c02 <bt_hci_le_enh_conn_complete+0x236>
			LOG_ERR("Failed read remote features (%d)", err);
   12be4:	466e      	mov	r6, sp
   12be6:	b088      	sub	sp, #32
   12be8:	aa02      	add	r2, sp, #8
   12bea:	4b2e      	ldr	r3, [pc, #184]	; (12ca4 <bt_hci_le_enh_conn_complete+0x2d8>)
   12bec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12bf0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12bf4:	2303      	movs	r3, #3
   12bf6:	4826      	ldr	r0, [pc, #152]	; (12c90 <bt_hci_le_enh_conn_complete+0x2c4>)
   12bf8:	f842 3f10 	str.w	r3, [r2, #16]!
   12bfc:	f019 f9d3 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12c00:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12c02:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   12c06:	07d9      	lsls	r1, r3, #31
   12c08:	d516      	bpl.n	12c38 <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12c0a:	2100      	movs	r1, #0
   12c0c:	2302      	movs	r3, #2
   12c0e:	4620      	mov	r0, r4
   12c10:	461a      	mov	r2, r3
   12c12:	9100      	str	r1, [sp, #0]
   12c14:	f019 fa1b 	bl	2c04e <bt_le_set_phy>
		if (err) {
   12c18:	b170      	cbz	r0, 12c38 <bt_hci_le_enh_conn_complete+0x26c>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   12c1a:	466e      	mov	r6, sp
   12c1c:	b088      	sub	sp, #32
   12c1e:	aa02      	add	r2, sp, #8
   12c20:	4b21      	ldr	r3, [pc, #132]	; (12ca8 <bt_hci_le_enh_conn_complete+0x2dc>)
   12c22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c26:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12c2a:	2303      	movs	r3, #3
   12c2c:	4818      	ldr	r0, [pc, #96]	; (12c90 <bt_hci_le_enh_conn_complete+0x2c4>)
   12c2e:	f842 3f10 	str.w	r3, [r2, #16]!
   12c32:	f019 f9b8 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12c36:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12c38:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12c3c:	069a      	lsls	r2, r3, #26
   12c3e:	d51e      	bpl.n	12c7e <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12c40:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   12c44:	689b      	ldr	r3, [r3, #8]
   12c46:	079b      	lsls	r3, r3, #30
   12c48:	d519      	bpl.n	12c7e <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12c4a:	1db9      	adds	r1, r7, #6
   12c4c:	1d38      	adds	r0, r7, #4
   12c4e:	f7ff fe69 	bl	12924 <hci_le_read_max_data_len>
			if (!err) {
   12c52:	b9a0      	cbnz	r0, 12c7e <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
   12c54:	4620      	mov	r0, r4
   12c56:	88fa      	ldrh	r2, [r7, #6]
   12c58:	88b9      	ldrh	r1, [r7, #4]
   12c5a:	f019 f9da 	bl	2c012 <bt_le_set_data_len>
				if (err) {
   12c5e:	b170      	cbz	r0, 12c7e <bt_hci_le_enh_conn_complete+0x2b2>
					LOG_ERR("Failed to set data len (%d)", err);
   12c60:	466d      	mov	r5, sp
   12c62:	b088      	sub	sp, #32
   12c64:	aa02      	add	r2, sp, #8
   12c66:	4b11      	ldr	r3, [pc, #68]	; (12cac <bt_hci_le_enh_conn_complete+0x2e0>)
   12c68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c6c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12c70:	2303      	movs	r3, #3
   12c72:	4807      	ldr	r0, [pc, #28]	; (12c90 <bt_hci_le_enh_conn_complete+0x2c4>)
   12c74:	f842 3f10 	str.w	r3, [r2, #16]!
   12c78:	f019 f995 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12c7c:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   12c7e:	4620      	mov	r0, r4
   12c80:	e6df      	b.n	12a42 <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   12c82:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12c86:	e7ad      	b.n	12be4 <bt_hci_le_enh_conn_complete+0x218>
   12c88:	20021b12 	.word	0x20021b12
   12c8c:	00034a4e 	.word	0x00034a4e
   12c90:	000314b4 	.word	0x000314b4
   12c94:	00034a6f 	.word	0x00034a6f
   12c98:	00034a88 	.word	0x00034a88
   12c9c:	01000003 	.word	0x01000003
   12ca0:	20008000 	.word	0x20008000
   12ca4:	00034aa4 	.word	0x00034aa4
   12ca8:	00034ac5 	.word	0x00034ac5
   12cac:	00034adc 	.word	0x00034adc

00012cb0 <le_legacy_conn_complete>:
{
   12cb0:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   12cb2:	68c1      	ldr	r1, [r0, #12]
{
   12cb4:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   12cb6:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12cb8:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   12cba:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   12cbe:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12cc2:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   12cc4:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   12cc8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12ccc:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   12cd0:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   12cd4:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   12cd8:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12cdc:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   12ce0:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12ce4:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   12ce8:	7b4b      	ldrb	r3, [r1, #13]
   12cea:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12cee:	f019 f953 	bl	2bf98 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   12cf2:	4907      	ldr	r1, [pc, #28]	; (12d10 <le_legacy_conn_complete+0x60>)
   12cf4:	f10d 000b 	add.w	r0, sp, #11
   12cf8:	f019 f949 	bl	2bf8e <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12cfc:	f10d 0011 	add.w	r0, sp, #17
   12d00:	f019 f945 	bl	2bf8e <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   12d04:	4668      	mov	r0, sp
   12d06:	f7ff fe61 	bl	129cc <bt_hci_le_enh_conn_complete>
}
   12d0a:	b009      	add	sp, #36	; 0x24
   12d0c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d10:	00034575 	.word	0x00034575

00012d14 <bt_security_err_get>:
	switch (hci_err) {
   12d14:	2829      	cmp	r0, #41	; 0x29
   12d16:	bf9a      	itte	ls
   12d18:	4b01      	ldrls	r3, [pc, #4]	; (12d20 <bt_security_err_get+0xc>)
   12d1a:	5c18      	ldrbls	r0, [r3, r0]
{
   12d1c:	2009      	movhi	r0, #9
}
   12d1e:	4770      	bx	lr
   12d20:	00034d91 	.word	0x00034d91

00012d24 <hci_encrypt_key_refresh_complete>:
{
   12d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d26:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   12d28:	68c3      	ldr	r3, [r0, #12]
{
   12d2a:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   12d2c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   12d30:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12d32:	4630      	mov	r0, r6
   12d34:	f002 f8a2 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   12d38:	4604      	mov	r4, r0
   12d3a:	b988      	cbnz	r0, 12d60 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12d3c:	466c      	mov	r4, sp
   12d3e:	b088      	sub	sp, #32
   12d40:	466a      	mov	r2, sp
   12d42:	4b1f      	ldr	r3, [pc, #124]	; (12dc0 <hci_encrypt_key_refresh_complete+0x9c>)
   12d44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d48:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12d4c:	2303      	movs	r3, #3
   12d4e:	481d      	ldr	r0, [pc, #116]	; (12dc4 <hci_encrypt_key_refresh_complete+0xa0>)
   12d50:	f842 3f10 	str.w	r3, [r2, #16]!
   12d54:	f019 f927 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12d58:	46a5      	mov	sp, r4
}
   12d5a:	371c      	adds	r7, #28
   12d5c:	46bd      	mov	sp, r7
   12d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12d60:	b15d      	cbz	r5, 12d7a <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12d62:	4628      	mov	r0, r5
   12d64:	f7ff ffd6 	bl	12d14 <bt_security_err_get>
   12d68:	4629      	mov	r1, r5
   12d6a:	4602      	mov	r2, r0
   12d6c:	4620      	mov	r0, r4
   12d6e:	f002 fad5 	bl	1531c <bt_conn_security_changed>
	bt_conn_unref(conn);
   12d72:	4620      	mov	r0, r4
   12d74:	f002 f852 	bl	14e1c <bt_conn_unref>
   12d78:	e7ef      	b.n	12d5a <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   12d7a:	7883      	ldrb	r3, [r0, #2]
   12d7c:	2b01      	cmp	r3, #1
   12d7e:	d1f0      	bne.n	12d62 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   12d80:	f007 fa32 	bl	1a1e8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12d84:	4620      	mov	r0, r4
   12d86:	f019 f8de 	bl	2bf46 <update_sec_level>
   12d8a:	2800      	cmp	r0, #0
   12d8c:	d1e9      	bne.n	12d62 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12d8e:	2005      	movs	r0, #5
   12d90:	f7ff ffc0 	bl	12d14 <bt_security_err_get>
   12d94:	2105      	movs	r1, #5
   12d96:	4602      	mov	r2, r0
   12d98:	4620      	mov	r0, r4
   12d9a:	f002 fabf 	bl	1531c <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12d9e:	4b0a      	ldr	r3, [pc, #40]	; (12dc8 <hci_encrypt_key_refresh_complete+0xa4>)
   12da0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12da4:	617b      	str	r3, [r7, #20]
   12da6:	2302      	movs	r3, #2
   12da8:	4806      	ldr	r0, [pc, #24]	; (12dc4 <hci_encrypt_key_refresh_complete+0xa0>)
   12daa:	613b      	str	r3, [r7, #16]
   12dac:	f107 0210 	add.w	r2, r7, #16
   12db0:	f019 f8f9 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12db4:	2105      	movs	r1, #5
   12db6:	4620      	mov	r0, r4
   12db8:	f019 fc05 	bl	2c5c6 <bt_conn_disconnect>
   12dbc:	e7d9      	b.n	12d72 <hci_encrypt_key_refresh_complete+0x4e>
   12dbe:	bf00      	nop
   12dc0:	0003483a 	.word	0x0003483a
   12dc4:	000314b4 	.word	0x000314b4
   12dc8:	00034af8 	.word	0x00034af8

00012dcc <hci_encrypt_change>:
{
   12dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12dd0:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   12dd2:	68c6      	ldr	r6, [r0, #12]
{
   12dd4:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12dd6:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   12dda:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   12ddc:	4640      	mov	r0, r8
   12dde:	f002 f84d 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   12de2:	4604      	mov	r4, r0
   12de4:	b990      	cbnz	r0, 12e0c <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12de6:	466c      	mov	r4, sp
   12de8:	b088      	sub	sp, #32
   12dea:	466a      	mov	r2, sp
   12dec:	4b23      	ldr	r3, [pc, #140]	; (12e7c <hci_encrypt_change+0xb0>)
   12dee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12df2:	e9c2 3805 	strd	r3, r8, [r2, #20]
   12df6:	2303      	movs	r3, #3
   12df8:	4821      	ldr	r0, [pc, #132]	; (12e80 <hci_encrypt_change+0xb4>)
   12dfa:	f842 3f10 	str.w	r3, [r2, #16]!
   12dfe:	f019 f8d2 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12e02:	46a5      	mov	sp, r4
}
   12e04:	3718      	adds	r7, #24
   12e06:	46bd      	mov	sp, r7
   12e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   12e0c:	b15d      	cbz	r5, 12e26 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   12e0e:	4628      	mov	r0, r5
   12e10:	f7ff ff80 	bl	12d14 <bt_security_err_get>
   12e14:	4629      	mov	r1, r5
   12e16:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e18:	4620      	mov	r0, r4
   12e1a:	f002 fa7f 	bl	1531c <bt_conn_security_changed>
	bt_conn_unref(conn);
   12e1e:	4620      	mov	r0, r4
   12e20:	f001 fffc 	bl	14e1c <bt_conn_unref>
   12e24:	e7ee      	b.n	12e04 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   12e26:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   12e28:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   12e2a:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   12e2c:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   12e2e:	d005      	beq.n	12e3c <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e30:	2000      	movs	r0, #0
   12e32:	f7ff ff6f 	bl	12d14 <bt_security_err_get>
   12e36:	2100      	movs	r1, #0
   12e38:	4602      	mov	r2, r0
   12e3a:	e7ed      	b.n	12e18 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   12e3c:	b10b      	cbz	r3, 12e42 <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   12e3e:	f007 f9d3 	bl	1a1e8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12e42:	4620      	mov	r0, r4
   12e44:	f019 f87f 	bl	2bf46 <update_sec_level>
   12e48:	2800      	cmp	r0, #0
   12e4a:	d1f1      	bne.n	12e30 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e4c:	2005      	movs	r0, #5
   12e4e:	f7ff ff61 	bl	12d14 <bt_security_err_get>
   12e52:	2105      	movs	r1, #5
   12e54:	4602      	mov	r2, r0
   12e56:	4620      	mov	r0, r4
   12e58:	f002 fa60 	bl	1531c <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12e5c:	4b09      	ldr	r3, [pc, #36]	; (12e84 <hci_encrypt_change+0xb8>)
   12e5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12e62:	617b      	str	r3, [r7, #20]
   12e64:	2302      	movs	r3, #2
   12e66:	4806      	ldr	r0, [pc, #24]	; (12e80 <hci_encrypt_change+0xb4>)
   12e68:	613b      	str	r3, [r7, #16]
   12e6a:	f107 0210 	add.w	r2, r7, #16
   12e6e:	f019 f89a 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12e72:	2105      	movs	r1, #5
   12e74:	4620      	mov	r0, r4
   12e76:	f019 fba6 	bl	2c5c6 <bt_conn_disconnect>
   12e7a:	e7d0      	b.n	12e1e <hci_encrypt_change+0x52>
   12e7c:	0003483a 	.word	0x0003483a
   12e80:	000314b4 	.word	0x000314b4
   12e84:	00034af8 	.word	0x00034af8

00012e88 <bt_send>:
	return bt_dev.drv->send(buf);
   12e88:	4b02      	ldr	r3, [pc, #8]	; (12e94 <bt_send+0xc>)
   12e8a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   12e8e:	695b      	ldr	r3, [r3, #20]
   12e90:	4718      	bx	r3
   12e92:	bf00      	nop
   12e94:	20008000 	.word	0x20008000

00012e98 <bt_hci_cmd_send>:
{
   12e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e9a:	4605      	mov	r5, r0
	if (!buf) {
   12e9c:	460c      	mov	r4, r1
{
   12e9e:	af00      	add	r7, sp, #0
	if (!buf) {
   12ea0:	b919      	cbnz	r1, 12eaa <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   12ea2:	f7ff fc75 	bl	12790 <bt_hci_cmd_create>
		if (!buf) {
   12ea6:	4604      	mov	r4, r0
   12ea8:	b318      	cbz	r0, 12ef2 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12eaa:	f640 4335 	movw	r3, #3125	; 0xc35
   12eae:	429d      	cmp	r5, r3
   12eb0:	d119      	bne.n	12ee6 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   12eb2:	4620      	mov	r0, r4
   12eb4:	f7ff ffe8 	bl	12e88 <bt_send>
		if (err) {
   12eb8:	4605      	mov	r5, r0
   12eba:	b188      	cbz	r0, 12ee0 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   12ebc:	466e      	mov	r6, sp
   12ebe:	b088      	sub	sp, #32
   12ec0:	466a      	mov	r2, sp
   12ec2:	4b0d      	ldr	r3, [pc, #52]	; (12ef8 <bt_hci_cmd_send+0x60>)
   12ec4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12ec8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12ecc:	2303      	movs	r3, #3
   12ece:	480b      	ldr	r0, [pc, #44]	; (12efc <bt_hci_cmd_send+0x64>)
   12ed0:	f842 3f10 	str.w	r3, [r2, #16]!
   12ed4:	f019 f867 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   12ed8:	4620      	mov	r0, r4
   12eda:	46b5      	mov	sp, r6
   12edc:	f008 fb40 	bl	1b560 <net_buf_unref>
}
   12ee0:	4628      	mov	r0, r5
   12ee2:	46bd      	mov	sp, r7
   12ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12ee6:	4621      	mov	r1, r4
   12ee8:	4805      	ldr	r0, [pc, #20]	; (12f00 <bt_hci_cmd_send+0x68>)
   12eea:	f008 fb13 	bl	1b514 <net_buf_put>
	return 0;
   12eee:	2500      	movs	r5, #0
   12ef0:	e7f6      	b.n	12ee0 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   12ef2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12ef6:	e7f3      	b.n	12ee0 <bt_hci_cmd_send+0x48>
   12ef8:	00034b1e 	.word	0x00034b1e
   12efc:	000314b4 	.word	0x000314b4
   12f00:	20008144 	.word	0x20008144

00012f04 <bt_hci_host_num_completed_packets>:
{
   12f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f08:	b086      	sub	sp, #24
   12f0a:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   12f0c:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   12f0e:	7e46      	ldrb	r6, [r0, #25]
{
   12f10:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12f12:	7a80      	ldrb	r0, [r0, #10]
   12f14:	f008 f8ea 	bl	1b0ec <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   12f18:	4621      	mov	r1, r4
   12f1a:	f01d f948 	bl	301ae <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   12f1e:	4b2d      	ldr	r3, [pc, #180]	; (12fd4 <bt_hci_host_num_completed_packets+0xd0>)
   12f20:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   12f24:	069b      	lsls	r3, r3, #26
   12f26:	d513      	bpl.n	12f50 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
   12f28:	4630      	mov	r0, r6
   12f2a:	f002 fc63 	bl	157f4 <bt_conn_lookup_index>
	if (!conn) {
   12f2e:	4604      	mov	r4, r0
   12f30:	b990      	cbnz	r0, 12f58 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   12f32:	466c      	mov	r4, sp
   12f34:	b088      	sub	sp, #32
   12f36:	466a      	mov	r2, sp
   12f38:	4b27      	ldr	r3, [pc, #156]	; (12fd8 <bt_hci_host_num_completed_packets+0xd4>)
   12f3a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12f3e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12f42:	2303      	movs	r3, #3
   12f44:	4825      	ldr	r0, [pc, #148]	; (12fdc <bt_hci_host_num_completed_packets+0xd8>)
   12f46:	f842 3f10 	str.w	r3, [r2, #16]!
   12f4a:	f019 f82c 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   12f4e:	46a5      	mov	sp, r4
}
   12f50:	3718      	adds	r7, #24
   12f52:	46bd      	mov	sp, r7
   12f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   12f58:	7b43      	ldrb	r3, [r0, #13]
   12f5a:	3b07      	subs	r3, #7
   12f5c:	2b01      	cmp	r3, #1
   12f5e:	d90e      	bls.n	12f7e <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
   12f60:	4b1f      	ldr	r3, [pc, #124]	; (12fe0 <bt_hci_host_num_completed_packets+0xdc>)
   12f62:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12f66:	617b      	str	r3, [r7, #20]
   12f68:	2302      	movs	r3, #2
   12f6a:	481c      	ldr	r0, [pc, #112]	; (12fdc <bt_hci_host_num_completed_packets+0xd8>)
   12f6c:	613b      	str	r3, [r7, #16]
   12f6e:	f107 0210 	add.w	r2, r7, #16
   12f72:	f019 f818 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   12f76:	4620      	mov	r0, r4
   12f78:	f001 ff50 	bl	14e1c <bt_conn_unref>
		return;
   12f7c:	e7e8      	b.n	12f50 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
   12f7e:	f001 ff4d 	bl	14e1c <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   12f82:	2105      	movs	r1, #5
   12f84:	f640 4035 	movw	r0, #3125	; 0xc35
   12f88:	f7ff fc02 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   12f8c:	4604      	mov	r4, r0
   12f8e:	b958      	cbnz	r0, 12fa8 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
   12f90:	4b14      	ldr	r3, [pc, #80]	; (12fe4 <bt_hci_host_num_completed_packets+0xe0>)
   12f92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12f96:	617b      	str	r3, [r7, #20]
   12f98:	2302      	movs	r3, #2
   12f9a:	4810      	ldr	r0, [pc, #64]	; (12fdc <bt_hci_host_num_completed_packets+0xd8>)
   12f9c:	613b      	str	r3, [r7, #16]
   12f9e:	f107 0210 	add.w	r2, r7, #16
   12fa2:	f019 f800 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		return;
   12fa6:	e7d3      	b.n	12f50 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
   12fa8:	f100 080c 	add.w	r8, r0, #12
   12fac:	2101      	movs	r1, #1
   12fae:	4640      	mov	r0, r8
   12fb0:	f008 fbf8 	bl	1b7a4 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   12fb4:	2601      	movs	r6, #1
   12fb6:	2104      	movs	r1, #4
   12fb8:	7006      	strb	r6, [r0, #0]
   12fba:	4640      	mov	r0, r8
   12fbc:	f008 fbf2 	bl	1b7a4 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   12fc0:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   12fc2:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   12fc4:	7086      	strb	r6, [r0, #2]
   12fc6:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   12fc8:	4621      	mov	r1, r4
   12fca:	f640 4035 	movw	r0, #3125	; 0xc35
   12fce:	f7ff ff63 	bl	12e98 <bt_hci_cmd_send>
   12fd2:	e7bd      	b.n	12f50 <bt_hci_host_num_completed_packets+0x4c>
   12fd4:	20008000 	.word	0x20008000
   12fd8:	00034b40 	.word	0x00034b40
   12fdc:	000314b4 	.word	0x000314b4
   12fe0:	00034b69 	.word	0x00034b69
   12fe4:	00034b95 	.word	0x00034b95

00012fe8 <le_ltk_request>:
{
   12fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12fec:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   12fee:	68c4      	ldr	r4, [r0, #12]
{
   12ff0:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
   12ff2:	8826      	ldrh	r6, [r4, #0]
   12ff4:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
   12ff8:	4640      	mov	r0, r8
   12ffa:	f001 ff3f 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   12ffe:	4605      	mov	r5, r0
   13000:	b990      	cbnz	r0, 13028 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13002:	466c      	mov	r4, sp
   13004:	b088      	sub	sp, #32
   13006:	aa02      	add	r2, sp, #8
   13008:	4b2c      	ldr	r3, [pc, #176]	; (130bc <le_ltk_request+0xd4>)
   1300a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1300e:	e9c2 3805 	strd	r3, r8, [r2, #20]
   13012:	2303      	movs	r3, #3
   13014:	482a      	ldr	r0, [pc, #168]	; (130c0 <le_ltk_request+0xd8>)
   13016:	f842 3f10 	str.w	r3, [r2, #16]!
   1301a:	f018 ffc4 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   1301e:	46a5      	mov	sp, r4
}
   13020:	3728      	adds	r7, #40	; 0x28
   13022:	46bd      	mov	sp, r7
   13024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   13028:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1302c:	f8d4 3006 	ldr.w	r3, [r4, #6]
   13030:	9701      	str	r7, [sp, #4]
   13032:	8961      	ldrh	r1, [r4, #10]
   13034:	9100      	str	r1, [sp, #0]
   13036:	f01a fc3e 	bl	2d8b6 <bt_smp_request_ltk>
   1303a:	b370      	cbz	r0, 1309a <le_ltk_request+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1303c:	2112      	movs	r1, #18
   1303e:	f242 001a 	movw	r0, #8218	; 0x201a
   13042:	f7ff fba5 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   13046:	4604      	mov	r4, r0
   13048:	b970      	cbnz	r0, 13068 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   1304a:	4b1e      	ldr	r3, [pc, #120]	; (130c4 <le_ltk_request+0xdc>)
   1304c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13050:	627b      	str	r3, [r7, #36]	; 0x24
   13052:	2302      	movs	r3, #2
   13054:	481a      	ldr	r0, [pc, #104]	; (130c0 <le_ltk_request+0xd8>)
   13056:	623b      	str	r3, [r7, #32]
   13058:	f107 0220 	add.w	r2, r7, #32
   1305c:	f018 ffa3 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   13060:	4628      	mov	r0, r5
   13062:	f001 fedb 	bl	14e1c <bt_conn_unref>
   13066:	e7db      	b.n	13020 <le_ltk_request+0x38>
   13068:	2112      	movs	r1, #18
   1306a:	300c      	adds	r0, #12
   1306c:	f008 fb9a 	bl	1b7a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   13070:	4603      	mov	r3, r0
   13072:	463a      	mov	r2, r7
   13074:	f823 6b02 	strh.w	r6, [r3], #2
   13078:	f107 0c10 	add.w	ip, r7, #16
   1307c:	4616      	mov	r6, r2
   1307e:	ce03      	ldmia	r6!, {r0, r1}
   13080:	4566      	cmp	r6, ip
   13082:	6018      	str	r0, [r3, #0]
   13084:	6059      	str	r1, [r3, #4]
   13086:	4632      	mov	r2, r6
   13088:	f103 0308 	add.w	r3, r3, #8
   1308c:	d1f6      	bne.n	1307c <le_ltk_request+0x94>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1308e:	4621      	mov	r1, r4
   13090:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   13094:	f7ff ff00 	bl	12e98 <bt_hci_cmd_send>
   13098:	e7e2      	b.n	13060 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1309a:	2102      	movs	r1, #2
   1309c:	f242 001b 	movw	r0, #8219	; 0x201b
   130a0:	f7ff fb76 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   130a4:	4604      	mov	r4, r0
   130a6:	2800      	cmp	r0, #0
   130a8:	d0cf      	beq.n	1304a <le_ltk_request+0x62>
   130aa:	2102      	movs	r1, #2
   130ac:	300c      	adds	r0, #12
   130ae:	f008 fb79 	bl	1b7a4 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   130b2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   130b4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   130b6:	f242 001b 	movw	r0, #8219	; 0x201b
   130ba:	e7eb      	b.n	13094 <le_ltk_request+0xac>
   130bc:	00034816 	.word	0x00034816
   130c0:	000314b4 	.word	0x000314b4
   130c4:	00034bb8 	.word	0x00034bb8

000130c8 <le_conn_param_req>:
{
   130c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   130ca:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   130cc:	68c3      	ldr	r3, [r0, #12]
{
   130ce:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   130d0:	78d9      	ldrb	r1, [r3, #3]
   130d2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   130d4:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   130d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   130da:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   130dc:	7959      	ldrb	r1, [r3, #5]
   130de:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   130e0:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   130e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   130e6:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   130e8:	799a      	ldrb	r2, [r3, #6]
   130ea:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   130ec:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   130ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   130f2:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   130f4:	7a1a      	ldrb	r2, [r3, #8]
   130f6:	7a5b      	ldrb	r3, [r3, #9]
   130f8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   130fc:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   130fe:	f001 febd 	bl	14e7c <bt_conn_lookup_handle>
	if (!conn) {
   13102:	4605      	mov	r5, r0
   13104:	b9a8      	cbnz	r0, 13132 <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13106:	466d      	mov	r5, sp
   13108:	b088      	sub	sp, #32
   1310a:	466a      	mov	r2, sp
   1310c:	4b1e      	ldr	r3, [pc, #120]	; (13188 <le_conn_param_req+0xc0>)
   1310e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13112:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13116:	2303      	movs	r3, #3
   13118:	481c      	ldr	r0, [pc, #112]	; (1318c <le_conn_param_req+0xc4>)
   1311a:	f842 3f10 	str.w	r3, [r2, #16]!
   1311e:	f018 ff42 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   13122:	2102      	movs	r1, #2
   13124:	46ad      	mov	sp, r5
   13126:	4620      	mov	r0, r4
   13128:	f018 ffdd 	bl	2c0e6 <le_conn_param_neg_reply>
}
   1312c:	370c      	adds	r7, #12
   1312e:	46bd      	mov	sp, r7
   13130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   13132:	4639      	mov	r1, r7
   13134:	f002 f85a 	bl	151ec <le_param_req>
   13138:	b938      	cbnz	r0, 1314a <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1313a:	211e      	movs	r1, #30
   1313c:	4620      	mov	r0, r4
   1313e:	f018 ffd2 	bl	2c0e6 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   13142:	4628      	mov	r0, r5
   13144:	f001 fe6a 	bl	14e1c <bt_conn_unref>
   13148:	e7f0      	b.n	1312c <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1314a:	210e      	movs	r1, #14
   1314c:	f242 0020 	movw	r0, #8224	; 0x2020
   13150:	f7ff fb1e 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   13154:	4604      	mov	r4, r0
   13156:	2800      	cmp	r0, #0
   13158:	d0f3      	beq.n	13142 <le_conn_param_req+0x7a>
   1315a:	210e      	movs	r1, #14
   1315c:	300c      	adds	r0, #12
   1315e:	f008 fb21 	bl	1b7a4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13162:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   13164:	8006      	strh	r6, [r0, #0]
   13166:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1316a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1316c:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1316e:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   13170:	887b      	ldrh	r3, [r7, #2]
   13172:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   13174:	88bb      	ldrh	r3, [r7, #4]
   13176:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   13178:	88fb      	ldrh	r3, [r7, #6]
   1317a:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1317c:	f242 0020 	movw	r0, #8224	; 0x2020
   13180:	f7ff fe8a 	bl	12e98 <bt_hci_cmd_send>
   13184:	e7dd      	b.n	13142 <le_conn_param_req+0x7a>
   13186:	bf00      	nop
   13188:	00034816 	.word	0x00034816
   1318c:	000314b4 	.word	0x000314b4

00013190 <hci_tx_thread>:
{
   13190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   13194:	f8df 8154 	ldr.w	r8, [pc, #340]	; 132ec <hci_tx_thread+0x15c>
{
   13198:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
   1319a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 132f0 <hci_tx_thread+0x160>
{
   1319e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   131a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   131a4:	4853      	ldr	r0, [pc, #332]	; (132f4 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   131a6:	f36f 3394 	bfc	r3, #14, #7
   131aa:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   131ae:	f001 fdd5 	bl	14d5c <bt_conn_prepare_events>
   131b2:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   131b4:	f04f 32ff 	mov.w	r2, #4294967295
   131b8:	f04f 33ff 	mov.w	r3, #4294967295
   131bc:	4629      	mov	r1, r5
   131be:	484b      	ldr	r0, [pc, #300]	; (132ec <hci_tx_thread+0x15c>)
   131c0:	f015 f860 	bl	28284 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   131c4:	b160      	cbz	r0, 131e0 <hci_tx_thread+0x50>
   131c6:	f640 13e6 	movw	r3, #2534	; 0x9e6
   131ca:	464a      	mov	r2, r9
   131cc:	494a      	ldr	r1, [pc, #296]	; (132f8 <hci_tx_thread+0x168>)
   131ce:	484b      	ldr	r0, [pc, #300]	; (132fc <hci_tx_thread+0x16c>)
   131d0:	f017 fa5f 	bl	2a692 <assert_print>
   131d4:	4040      	eors	r0, r0
   131d6:	f380 8811 	msr	BASEPRI, r0
   131da:	f04f 0003 	mov.w	r0, #3
   131de:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   131e0:	f04f 0a03 	mov.w	sl, #3
{
   131e4:	4e41      	ldr	r6, [pc, #260]	; (132ec <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
   131e6:	b915      	cbnz	r5, 131ee <hci_tx_thread+0x5e>
	z_impl_k_yield();
   131e8:	f013 ff94 	bl	27114 <z_impl_k_yield>
	while (1) {
   131ec:	e7d8      	b.n	131a0 <hci_tx_thread+0x10>
		switch (ev->state) {
   131ee:	68f3      	ldr	r3, [r6, #12]
   131f0:	f3c3 3386 	ubfx	r3, r3, #14, #7
   131f4:	2b01      	cmp	r3, #1
   131f6:	d960      	bls.n	132ba <hci_tx_thread+0x12a>
   131f8:	2b04      	cmp	r3, #4
   131fa:	d168      	bne.n	132ce <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   131fc:	7b33      	ldrb	r3, [r6, #12]
   131fe:	2b00      	cmp	r3, #0
   13200:	d15e      	bne.n	132c0 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   13202:	2200      	movs	r2, #0
   13204:	2300      	movs	r3, #0
   13206:	483e      	ldr	r0, [pc, #248]	; (13300 <hci_tx_thread+0x170>)
   13208:	f01a fed4 	bl	2dfb4 <net_buf_get>
	BT_ASSERT(buf);
   1320c:	4604      	mov	r4, r0
   1320e:	b960      	cbnz	r0, 1322a <hci_tx_thread+0x9a>
   13210:	f44f 6318 	mov.w	r3, #2432	; 0x980
   13214:	464a      	mov	r2, r9
   13216:	493b      	ldr	r1, [pc, #236]	; (13304 <hci_tx_thread+0x174>)
   13218:	4838      	ldr	r0, [pc, #224]	; (132fc <hci_tx_thread+0x16c>)
   1321a:	f017 fa3a 	bl	2a692 <assert_print>
   1321e:	4040      	eors	r0, r0
   13220:	f380 8811 	msr	BASEPRI, r0
   13224:	f04f 0003 	mov.w	r0, #3
   13228:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   1322a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 13308 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   1322e:	f04f 33ff 	mov.w	r3, #4294967295
   13232:	f04f 32ff 	mov.w	r2, #4294967295
   13236:	4835      	ldr	r0, [pc, #212]	; (1330c <hci_tx_thread+0x17c>)
   13238:	f012 f9f6 	bl	25628 <z_impl_k_sem_take>
   1323c:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   13240:	b18b      	cbz	r3, 13266 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   13242:	4b33      	ldr	r3, [pc, #204]	; (13310 <hci_tx_thread+0x180>)
   13244:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13248:	617b      	str	r3, [r7, #20]
   1324a:	2302      	movs	r3, #2
   1324c:	4831      	ldr	r0, [pc, #196]	; (13314 <hci_tx_thread+0x184>)
   1324e:	613b      	str	r3, [r7, #16]
   13250:	f107 0210 	add.w	r2, r7, #16
   13254:	f018 fea7 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   13258:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   1325c:	f008 f980 	bl	1b560 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13260:	2300      	movs	r3, #0
   13262:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   13266:	4620      	mov	r0, r4
   13268:	f008 f9be 	bl	1b5e8 <net_buf_ref>
   1326c:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   13270:	4620      	mov	r0, r4
   13272:	f7ff fe09 	bl	12e88 <bt_send>
	if (err) {
   13276:	b300      	cbz	r0, 132ba <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   13278:	46eb      	mov	fp, sp
   1327a:	b088      	sub	sp, #32
   1327c:	466a      	mov	r2, sp
   1327e:	4b26      	ldr	r3, [pc, #152]	; (13318 <hci_tx_thread+0x188>)
   13280:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13284:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13288:	2303      	movs	r3, #3
   1328a:	4822      	ldr	r0, [pc, #136]	; (13314 <hci_tx_thread+0x184>)
   1328c:	f842 3f10 	str.w	r3, [r2, #16]!
   13290:	f018 fe89 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   13294:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   13296:	481d      	ldr	r0, [pc, #116]	; (1330c <hci_tx_thread+0x17c>)
   13298:	f012 f982 	bl	255a0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1329c:	4620      	mov	r0, r4
   1329e:	f007 ff2d 	bl	1b0fc <net_buf_id>
   132a2:	220c      	movs	r2, #12
   132a4:	4b1d      	ldr	r3, [pc, #116]	; (1331c <hci_tx_thread+0x18c>)
   132a6:	211f      	movs	r1, #31
   132a8:	fb02 3000 	mla	r0, r2, r0, r3
   132ac:	4622      	mov	r2, r4
   132ae:	8840      	ldrh	r0, [r0, #2]
   132b0:	f7ff f8a0 	bl	123f4 <hci_cmd_done>
		net_buf_unref(buf);
   132b4:	4620      	mov	r0, r4
   132b6:	f008 f953 	bl	1b560 <net_buf_unref>
	for (; count; ev++, count--) {
   132ba:	3614      	adds	r6, #20
   132bc:	3d01      	subs	r5, #1
   132be:	e792      	b.n	131e6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   132c0:	2b01      	cmp	r3, #1
   132c2:	d1fa      	bne.n	132ba <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   132c4:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   132c6:	3838      	subs	r0, #56	; 0x38
   132c8:	f002 f9fe 	bl	156c8 <bt_conn_process_tx>
   132cc:	e7f5      	b.n	132ba <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   132ce:	466c      	mov	r4, sp
   132d0:	b088      	sub	sp, #32
   132d2:	466a      	mov	r2, sp
   132d4:	4912      	ldr	r1, [pc, #72]	; (13320 <hci_tx_thread+0x190>)
   132d6:	480f      	ldr	r0, [pc, #60]	; (13314 <hci_tx_thread+0x184>)
		switch (ev->state) {
   132d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   132dc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   132e0:	f842 af10 	str.w	sl, [r2, #16]!
   132e4:	f018 fe5f 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   132e8:	46a5      	mov	sp, r4
   132ea:	e7e6      	b.n	132ba <hci_tx_thread+0x12a>
   132ec:	20008488 	.word	0x20008488
   132f0:	00034882 	.word	0x00034882
   132f4:	2000849c 	.word	0x2000849c
   132f8:	00033472 	.word	0x00033472
   132fc:	00032629 	.word	0x00032629
   13300:	20008144 	.word	0x20008144
   13304:	00036908 	.word	0x00036908
   13308:	20008000 	.word	0x20008000
   1330c:	20008120 	.word	0x20008120
   13310:	00034bcf 	.word	0x00034bcf
   13314:	000314b4 	.word	0x000314b4
   13318:	00034b1e 	.word	0x00034b1e
   1331c:	2002154c 	.word	0x2002154c
   13320:	00034bea 	.word	0x00034bea

00013324 <hci_event_prio>:
{
   13324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13328:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1332a:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1332e:	4630      	mov	r0, r6
   13330:	f01a fe51 	bl	2dfd6 <net_buf_simple_headroom>
	state->len = buf->len;
   13334:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   13338:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1333a:	f1b8 0f01 	cmp.w	r8, #1
   1333e:	d80c      	bhi.n	1335a <hci_event_prio+0x36>
   13340:	f640 537b 	movw	r3, #3451	; 0xd7b
   13344:	4a1b      	ldr	r2, [pc, #108]	; (133b4 <hci_event_prio+0x90>)
   13346:	491c      	ldr	r1, [pc, #112]	; (133b8 <hci_event_prio+0x94>)
   13348:	481c      	ldr	r0, [pc, #112]	; (133bc <hci_event_prio+0x98>)
   1334a:	f017 f9a2 	bl	2a692 <assert_print>
   1334e:	4040      	eors	r0, r0
   13350:	f380 8811 	msr	BASEPRI, r0
   13354:	f04f 0003 	mov.w	r0, #3
   13358:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1335a:	4630      	mov	r0, r6
   1335c:	2102      	movs	r1, #2
   1335e:	f008 fa03 	bl	1b768 <net_buf_simple_pull_mem>
   13362:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13364:	7800      	ldrb	r0, [r0, #0]
   13366:	f018 fddc 	bl	2bf22 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1336a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1336c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1336e:	d40c      	bmi.n	1338a <hci_event_prio+0x66>
   13370:	f640 537f 	movw	r3, #3455	; 0xd7f
   13374:	4a0f      	ldr	r2, [pc, #60]	; (133b4 <hci_event_prio+0x90>)
   13376:	4912      	ldr	r1, [pc, #72]	; (133c0 <hci_event_prio+0x9c>)
   13378:	4810      	ldr	r0, [pc, #64]	; (133bc <hci_event_prio+0x98>)
   1337a:	f017 f98a 	bl	2a692 <assert_print>
   1337e:	4040      	eors	r0, r0
   13380:	f380 8811 	msr	BASEPRI, r0
   13384:	f04f 0003 	mov.w	r0, #3
   13388:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1338a:	2305      	movs	r3, #5
   1338c:	4621      	mov	r1, r4
   1338e:	4a0d      	ldr	r2, [pc, #52]	; (133c4 <hci_event_prio+0xa0>)
   13390:	7838      	ldrb	r0, [r7, #0]
   13392:	f7fe fef5 	bl	12180 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13396:	07b3      	lsls	r3, r6, #30
   13398:	d507      	bpl.n	133aa <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1339a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1339c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   133a0:	fa13 f585 	uxtah	r5, r3, r5
   133a4:	60e5      	str	r5, [r4, #12]
}
   133a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   133aa:	4620      	mov	r0, r4
}
   133ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   133b0:	f008 b8d6 	b.w	1b560 <net_buf_unref>
   133b4:	00034882 	.word	0x00034882
   133b8:	000348b6 	.word	0x000348b6
   133bc:	00032629 	.word	0x00032629
   133c0:	00034c0b 	.word	0x00034c0b
   133c4:	00031e6c 	.word	0x00031e6c

000133c8 <bt_recv>:
{
   133c8:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   133ca:	7e03      	ldrb	r3, [r0, #24]
   133cc:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   133ce:	2b01      	cmp	r3, #1
{
   133d0:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   133d2:	d006      	beq.n	133e2 <bt_recv+0x1a>
   133d4:	2b03      	cmp	r3, #3
   133d6:	d112      	bne.n	133fe <bt_recv+0x36>
			rx_queue_put(buf);
   133d8:	f7fe fdfe 	bl	11fd8 <rx_queue_put>
		return 0;
   133dc:	2000      	movs	r0, #0
}
   133de:	46bd      	mov	sp, r7
   133e0:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   133e2:	68c3      	ldr	r3, [r0, #12]
   133e4:	7818      	ldrb	r0, [r3, #0]
   133e6:	f018 fd9c 	bl	2bf22 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   133ea:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   133ec:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   133ee:	d502      	bpl.n	133f6 <bt_recv+0x2e>
			hci_event_prio(buf);
   133f0:	4620      	mov	r0, r4
   133f2:	f7ff ff97 	bl	13324 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   133f6:	07ab      	lsls	r3, r5, #30
   133f8:	d5f0      	bpl.n	133dc <bt_recv+0x14>
			rx_queue_put(buf);
   133fa:	4620      	mov	r0, r4
   133fc:	e7ec      	b.n	133d8 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   133fe:	466d      	mov	r5, sp
   13400:	b088      	sub	sp, #32
   13402:	466a      	mov	r2, sp
   13404:	4908      	ldr	r1, [pc, #32]	; (13428 <bt_recv+0x60>)
   13406:	4809      	ldr	r0, [pc, #36]	; (1342c <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   13408:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1340c:	2303      	movs	r3, #3
   1340e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13412:	f842 3f10 	str.w	r3, [r2, #16]!
   13416:	f018 fdc6 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1341a:	4620      	mov	r0, r4
   1341c:	46ad      	mov	sp, r5
   1341e:	f008 f89f 	bl	1b560 <net_buf_unref>
		return -EINVAL;
   13422:	f06f 0015 	mvn.w	r0, #21
   13426:	e7da      	b.n	133de <bt_recv+0x16>
   13428:	00034c24 	.word	0x00034c24
   1342c:	000314b4 	.word	0x000314b4

00013430 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13430:	4a08      	ldr	r2, [pc, #32]	; (13454 <bt_hci_driver_register+0x24>)
{
   13432:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   13434:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   13438:	b930      	cbnz	r0, 13448 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1343a:	68d9      	ldr	r1, [r3, #12]
   1343c:	b139      	cbz	r1, 1344e <bt_hci_driver_register+0x1e>
   1343e:	6959      	ldr	r1, [r3, #20]
   13440:	b129      	cbz	r1, 1344e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   13442:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   13446:	4770      	bx	lr
		return -EALREADY;
   13448:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1344c:	4770      	bx	lr
		return -EINVAL;
   1344e:	f06f 0015 	mvn.w	r0, #21
}
   13452:	4770      	bx	lr
   13454:	20008000 	.word	0x20008000

00013458 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13458:	2104      	movs	r1, #4
   1345a:	4801      	ldr	r0, [pc, #4]	; (13460 <bt_finalize_init+0x8>)
   1345c:	f018 bd8c 	b.w	2bf78 <atomic_or>
   13460:	200080cc 	.word	0x200080cc

00013464 <bt_init.part.0>:
static int bt_init(void)
   13464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (!bt_dev.id_count) {
   13466:	480c      	ldr	r0, [pc, #48]	; (13498 <bt_init.part.0+0x34>)
   13468:	79c3      	ldrb	r3, [r0, #7]
   1346a:	b96b      	cbnz	r3, 13488 <bt_init.part.0+0x24>
			LOG_INF("No ID address. App must call settings_load()");
   1346c:	4b0b      	ldr	r3, [pc, #44]	; (1349c <bt_init.part.0+0x38>)
   1346e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   13472:	9305      	str	r3, [sp, #20]
   13474:	2302      	movs	r3, #2
   13476:	480a      	ldr	r0, [pc, #40]	; (134a0 <bt_init.part.0+0x3c>)
   13478:	aa04      	add	r2, sp, #16
   1347a:	9304      	str	r3, [sp, #16]
   1347c:	f018 fd93 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
}
   13480:	2000      	movs	r0, #0
   13482:	b007      	add	sp, #28
   13484:	f85d fb04 	ldr.w	pc, [sp], #4
   13488:	2108      	movs	r1, #8
   1348a:	30cc      	adds	r0, #204	; 0xcc
   1348c:	f018 fd74 	bl	2bf78 <atomic_or>
	bt_finalize_init();
   13490:	f7ff ffe2 	bl	13458 <bt_finalize_init>
	return 0;
   13494:	e7f4      	b.n	13480 <bt_init.part.0+0x1c>
   13496:	bf00      	nop
   13498:	20008000 	.word	0x20008000
   1349c:	00034c38 	.word	0x00034c38
   134a0:	000314b4 	.word	0x000314b4

000134a4 <init_work>:
{
   134a4:	b510      	push	{r4, lr}
	err = bt_init();
   134a6:	f7f5 ffdf 	bl	9468 <bt_init>
	if (ready_cb) {
   134aa:	4b03      	ldr	r3, [pc, #12]	; (134b8 <init_work+0x14>)
   134ac:	681b      	ldr	r3, [r3, #0]
   134ae:	b113      	cbz	r3, 134b6 <init_work+0x12>
}
   134b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   134b4:	4718      	bx	r3
}
   134b6:	bd10      	pop	{r4, pc}
   134b8:	200215c4 	.word	0x200215c4

000134bc <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   134bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   134be:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
   134c0:	4d3d      	ldr	r5, [pc, #244]	; (135b8 <bt_enable+0xfc>)
{
   134c2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   134c4:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   134c8:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   134ca:	b983      	cbnz	r3, 134ee <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   134cc:	4b3b      	ldr	r3, [pc, #236]	; (135bc <bt_enable+0x100>)
		return -ENODEV;
   134ce:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   134d2:	617b      	str	r3, [r7, #20]
   134d4:	2302      	movs	r3, #2
   134d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   134da:	4839      	ldr	r0, [pc, #228]	; (135c0 <bt_enable+0x104>)
   134dc:	613b      	str	r3, [r7, #16]
   134de:	f107 0210 	add.w	r2, r7, #16
   134e2:	f018 fd60 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   134e6:	4620      	mov	r0, r4
   134e8:	371c      	adds	r7, #28
   134ea:	46bd      	mov	sp, r7
   134ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   134ee:	f06f 0102 	mvn.w	r1, #2
   134f2:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   134f6:	f018 fd59 	bl	2bfac <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   134fa:	2101      	movs	r1, #1
   134fc:	f018 fd3c 	bl	2bf78 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13500:	07c3      	lsls	r3, r0, #31
   13502:	d456      	bmi.n	135b2 <bt_enable+0xf6>
		err = bt_settings_init();
   13504:	f7fe fc0e 	bl	11d24 <bt_settings_init>
		if (err) {
   13508:	4604      	mov	r4, r0
   1350a:	2800      	cmp	r0, #0
   1350c:	d1eb      	bne.n	134e6 <bt_enable+0x2a>
	ready_cb = cb;
   1350e:	4b2d      	ldr	r3, [pc, #180]	; (135c4 <bt_enable+0x108>)
   13510:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   13512:	2201      	movs	r2, #1
   13514:	f505 7090 	add.w	r0, r5, #288	; 0x120
   13518:	4611      	mov	r1, r2
   1351a:	f01c fe52 	bl	301c2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1351e:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   13522:	f01c fe2c 	bl	3017e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13526:	2200      	movs	r2, #0
   13528:	2300      	movs	r3, #0
   1352a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1352e:	f06f 0308 	mvn.w	r3, #8
   13532:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13536:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1353a:	e9cd 4400 	strd	r4, r4, [sp]
   1353e:	4b22      	ldr	r3, [pc, #136]	; (135c8 <bt_enable+0x10c>)
   13540:	4922      	ldr	r1, [pc, #136]	; (135cc <bt_enable+0x110>)
   13542:	9404      	str	r4, [sp, #16]
   13544:	4822      	ldr	r0, [pc, #136]	; (135d0 <bt_enable+0x114>)
   13546:	f011 fca9 	bl	24e9c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1354a:	4922      	ldr	r1, [pc, #136]	; (135d4 <bt_enable+0x118>)
   1354c:	4820      	ldr	r0, [pc, #128]	; (135d0 <bt_enable+0x114>)
   1354e:	f01c fded 	bl	3012c <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   13552:	4821      	ldr	r0, [pc, #132]	; (135d8 <bt_enable+0x11c>)
   13554:	f012 fb98 	bl	25c88 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   13558:	f06f 0307 	mvn.w	r3, #7
   1355c:	f640 0298 	movw	r2, #2200	; 0x898
   13560:	491e      	ldr	r1, [pc, #120]	; (135dc <bt_enable+0x120>)
   13562:	481d      	ldr	r0, [pc, #116]	; (135d8 <bt_enable+0x11c>)
   13564:	9400      	str	r4, [sp, #0]
   13566:	f012 fba9 	bl	25cbc <k_work_queue_start>
   1356a:	491d      	ldr	r1, [pc, #116]	; (135e0 <bt_enable+0x124>)
   1356c:	481a      	ldr	r0, [pc, #104]	; (135d8 <bt_enable+0x11c>)
   1356e:	f01c fddd 	bl	3012c <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   13572:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   13576:	68db      	ldr	r3, [r3, #12]
   13578:	4798      	blx	r3
	if (err) {
   1357a:	4604      	mov	r4, r0
   1357c:	b178      	cbz	r0, 1359e <bt_enable+0xe2>
		LOG_ERR("HCI driver open failed (%d)", err);
   1357e:	466d      	mov	r5, sp
   13580:	b088      	sub	sp, #32
   13582:	462a      	mov	r2, r5
   13584:	4b17      	ldr	r3, [pc, #92]	; (135e4 <bt_enable+0x128>)
   13586:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1358a:	e9c5 3005 	strd	r3, r0, [r5, #20]
   1358e:	2303      	movs	r3, #3
   13590:	480b      	ldr	r0, [pc, #44]	; (135c0 <bt_enable+0x104>)
   13592:	f842 3f10 	str.w	r3, [r2, #16]!
   13596:	f018 fd06 	bl	2bfa6 <z_log_msg_static_create.constprop.0>
   1359a:	46ad      	mov	sp, r5
		return err;
   1359c:	e7a3      	b.n	134e6 <bt_enable+0x2a>
	if (!cb) {
   1359e:	b91e      	cbnz	r6, 135a8 <bt_enable+0xec>
		return bt_init();
   135a0:	f7f5 ff62 	bl	9468 <bt_init>
   135a4:	4604      	mov	r4, r0
   135a6:	e79e      	b.n	134e6 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   135a8:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   135ac:	f012 fb66 	bl	25c7c <k_work_submit>
	return 0;
   135b0:	e799      	b.n	134e6 <bt_enable+0x2a>
		return -EALREADY;
   135b2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   135b6:	e796      	b.n	134e6 <bt_enable+0x2a>
   135b8:	20008000 	.word	0x20008000
   135bc:	00034d50 	.word	0x00034d50
   135c0:	000314b4 	.word	0x000314b4
   135c4:	200215c4 	.word	0x200215c4
   135c8:	00013191 	.word	0x00013191
   135cc:	200327a0 	.word	0x200327a0
   135d0:	20009b40 	.word	0x20009b40
   135d4:	00034d69 	.word	0x00034d69
   135d8:	20009bc8 	.word	0x20009bc8
   135dc:	20032ba0 	.word	0x20032ba0
   135e0:	00034d6f 	.word	0x00034d6f
   135e4:	00034d75 	.word	0x00034d75

000135e8 <bt_is_ready>:
   135e8:	4b02      	ldr	r3, [pc, #8]	; (135f4 <bt_is_ready+0xc>)
   135ea:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   135ee:	f3c0 0080 	ubfx	r0, r0, #2, #1
   135f2:	4770      	bx	lr
   135f4:	200080cc 	.word	0x200080cc

000135f8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   135f8:	4800      	ldr	r0, [pc, #0]	; (135fc <bt_get_name+0x4>)
   135fa:	4770      	bx	lr
   135fc:	00032dbd 	.word	0x00032dbd

00013600 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13602:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   13604:	2500      	movs	r5, #0
   13606:	4f09      	ldr	r7, [pc, #36]	; (1362c <id_find+0x2c>)
   13608:	79fb      	ldrb	r3, [r7, #7]
   1360a:	b2ec      	uxtb	r4, r5
   1360c:	42a3      	cmp	r3, r4
   1360e:	d802      	bhi.n	13616 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13610:	f06f 0001 	mvn.w	r0, #1
   13614:	e009      	b.n	1362a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   13616:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1361a:	4630      	mov	r0, r6
   1361c:	4439      	add	r1, r7
   1361e:	f018 fd89 	bl	2c134 <bt_addr_le_eq>
   13622:	3501      	adds	r5, #1
   13624:	2800      	cmp	r0, #0
   13626:	d0ef      	beq.n	13608 <id_find+0x8>
   13628:	4620      	mov	r0, r4
}
   1362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1362c:	20008000 	.word	0x20008000

00013630 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13630:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13632:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13634:	460d      	mov	r5, r1
   13636:	b1a9      	cbz	r1, 13664 <id_create.constprop.0+0x34>
   13638:	4628      	mov	r0, r5
   1363a:	4915      	ldr	r1, [pc, #84]	; (13690 <id_create.constprop.0+0x60>)
   1363c:	f018 fd7a 	bl	2c134 <bt_addr_le_eq>
   13640:	b980      	cbnz	r0, 13664 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   13642:	4629      	mov	r1, r5
   13644:	4813      	ldr	r0, [pc, #76]	; (13694 <id_create.constprop.0+0x64>)
   13646:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1364a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1364c:	f018 fd82 	bl	2c154 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13650:	4811      	ldr	r0, [pc, #68]	; (13698 <id_create.constprop.0+0x68>)
   13652:	f018 fd77 	bl	2c144 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   13656:	0743      	lsls	r3, r0, #29
   13658:	d501      	bpl.n	1365e <id_create.constprop.0+0x2e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   1365a:	f7fe fb19 	bl	11c90 <bt_settings_save_id>
	}

	return 0;
   1365e:	2000      	movs	r0, #0
}
   13660:	b003      	add	sp, #12
   13662:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   13664:	4668      	mov	r0, sp
   13666:	f018 fc4e 	bl	2bf06 <bt_addr_le_create_static>
			if (err) {
   1366a:	2800      	cmp	r0, #0
   1366c:	d1f8      	bne.n	13660 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   1366e:	4668      	mov	r0, sp
   13670:	f7ff ffc6 	bl	13600 <id_find>
   13674:	2800      	cmp	r0, #0
   13676:	daf5      	bge.n	13664 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   13678:	4b06      	ldr	r3, [pc, #24]	; (13694 <id_create.constprop.0+0x64>)
   1367a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1367e:	4669      	mov	r1, sp
   13680:	4418      	add	r0, r3
   13682:	f018 fd67 	bl	2c154 <bt_addr_le_copy>
		if (addr) {
   13686:	2d00      	cmp	r5, #0
   13688:	d0e2      	beq.n	13650 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1368a:	4601      	mov	r1, r0
   1368c:	4628      	mov	r0, r5
   1368e:	e7dd      	b.n	1364c <id_create.constprop.0+0x1c>
   13690:	00034568 	.word	0x00034568
   13694:	20008000 	.word	0x20008000
   13698:	200080cc 	.word	0x200080cc

0001369c <set_random_address>:
{
   1369c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1369e:	2206      	movs	r2, #6
   136a0:	4911      	ldr	r1, [pc, #68]	; (136e8 <set_random_address+0x4c>)
   136a2:	4605      	mov	r5, r0
   136a4:	f01c ff3f 	bl	30526 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   136a8:	b1c8      	cbz	r0, 136de <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   136aa:	2106      	movs	r1, #6
   136ac:	f242 0005 	movw	r0, #8197	; 0x2005
   136b0:	f7ff f86e 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   136b4:	4604      	mov	r4, r0
   136b6:	b1a0      	cbz	r0, 136e2 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   136b8:	2206      	movs	r2, #6
   136ba:	4629      	mov	r1, r5
   136bc:	300c      	adds	r0, #12
   136be:	f01a fc96 	bl	2dfee <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   136c2:	2200      	movs	r2, #0
   136c4:	4621      	mov	r1, r4
   136c6:	f242 0005 	movw	r0, #8197	; 0x2005
   136ca:	f7ff f8af 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   136ce:	b938      	cbnz	r0, 136e0 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   136d0:	4805      	ldr	r0, [pc, #20]	; (136e8 <set_random_address+0x4c>)
   136d2:	4629      	mov	r1, r5
   136d4:	f018 fd39 	bl	2c14a <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   136d8:	2301      	movs	r3, #1
   136da:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   136de:	2000      	movs	r0, #0
}
   136e0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   136e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   136e6:	e7fb      	b.n	136e0 <set_random_address+0x44>
   136e8:	20008061 	.word	0x20008061

000136ec <find_rl_conflict>:
{
   136ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136f0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   136f2:	460c      	mov	r4, r1
{
   136f4:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   136f6:	b959      	cbnz	r1, 13710 <find_rl_conflict+0x24>
   136f8:	492b      	ldr	r1, [pc, #172]	; (137a8 <find_rl_conflict+0xbc>)
   136fa:	f44f 7357 	mov.w	r3, #860	; 0x35c
   136fe:	4a2b      	ldr	r2, [pc, #172]	; (137ac <find_rl_conflict+0xc0>)
   13700:	482b      	ldr	r0, [pc, #172]	; (137b0 <find_rl_conflict+0xc4>)
   13702:	f016 ffc6 	bl	2a692 <assert_print>
   13706:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   1370a:	4828      	ldr	r0, [pc, #160]	; (137ac <find_rl_conflict+0xc0>)
   1370c:	f016 ffba 	bl	2a684 <assert_post_action>
   13710:	6808      	ldr	r0, [r1, #0]
   13712:	b948      	cbnz	r0, 13728 <find_rl_conflict+0x3c>
   13714:	4927      	ldr	r1, [pc, #156]	; (137b4 <find_rl_conflict+0xc8>)
   13716:	f240 335d 	movw	r3, #861	; 0x35d
   1371a:	4a24      	ldr	r2, [pc, #144]	; (137ac <find_rl_conflict+0xc0>)
   1371c:	4824      	ldr	r0, [pc, #144]	; (137b0 <find_rl_conflict+0xc4>)
   1371e:	f016 ffb8 	bl	2a692 <assert_print>
   13722:	f240 315d 	movw	r1, #861	; 0x35d
   13726:	e7f0      	b.n	1370a <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   13728:	b94d      	cbnz	r5, 1373e <find_rl_conflict+0x52>
   1372a:	4923      	ldr	r1, [pc, #140]	; (137b8 <find_rl_conflict+0xcc>)
   1372c:	f240 335e 	movw	r3, #862	; 0x35e
   13730:	4a1e      	ldr	r2, [pc, #120]	; (137ac <find_rl_conflict+0xc0>)
   13732:	481f      	ldr	r0, [pc, #124]	; (137b0 <find_rl_conflict+0xc4>)
   13734:	f016 ffad 	bl	2a692 <assert_print>
   13738:	f240 315e 	movw	r1, #862	; 0x35e
   1373c:	e7e5      	b.n	1370a <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   1373e:	7a03      	ldrb	r3, [r0, #8]
   13740:	075a      	lsls	r2, r3, #29
   13742:	d509      	bpl.n	13758 <find_rl_conflict+0x6c>
   13744:	491d      	ldr	r1, [pc, #116]	; (137bc <find_rl_conflict+0xd0>)
   13746:	f44f 7358 	mov.w	r3, #864	; 0x360
   1374a:	4a18      	ldr	r2, [pc, #96]	; (137ac <find_rl_conflict+0xc0>)
   1374c:	4818      	ldr	r0, [pc, #96]	; (137b0 <find_rl_conflict+0xc4>)
   1374e:	f016 ffa0 	bl	2a692 <assert_print>
   13752:	f44f 7158 	mov.w	r1, #864	; 0x360
   13756:	e7d8      	b.n	1370a <find_rl_conflict+0x1e>
	if (conflict->found) {
   13758:	684f      	ldr	r7, [r1, #4]
   1375a:	b9f7      	cbnz	r7, 1379a <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   1375c:	7a2b      	ldrb	r3, [r5, #8]
   1375e:	075b      	lsls	r3, r3, #29
   13760:	d51b      	bpl.n	1379a <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   13762:	1c69      	adds	r1, r5, #1
   13764:	3001      	adds	r0, #1
   13766:	f018 fce5 	bl	2c134 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1376a:	f8d4 8000 	ldr.w	r8, [r4]
   1376e:	2216      	movs	r2, #22
   13770:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   13772:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   13774:	4668      	mov	r0, sp
   13776:	f01c ff20 	bl	305ba <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   1377a:	2210      	movs	r2, #16
   1377c:	4669      	mov	r1, sp
   1377e:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   13782:	f01c fed0 	bl	30526 <memcmp>
   13786:	b158      	cbz	r0, 137a0 <find_rl_conflict+0xb4>
   13788:	6820      	ldr	r0, [r4, #0]
   1378a:	2210      	movs	r2, #16
   1378c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   13790:	302a      	adds	r0, #42	; 0x2a
   13792:	f01c fec8 	bl	30526 <memcmp>
   13796:	b918      	cbnz	r0, 137a0 <find_rl_conflict+0xb4>
		conflict->found = resident;
   13798:	6065      	str	r5, [r4, #4]
}
   1379a:	b006      	add	sp, #24
   1379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   137a0:	2e00      	cmp	r6, #0
   137a2:	d1f9      	bne.n	13798 <find_rl_conflict+0xac>
   137a4:	e7f9      	b.n	1379a <find_rl_conflict+0xae>
   137a6:	bf00      	nop
   137a8:	00034df5 	.word	0x00034df5
   137ac:	00034dc7 	.word	0x00034dc7
   137b0:	00032629 	.word	0x00032629
   137b4:	00034e0d 	.word	0x00034e0d
   137b8:	00034e30 	.word	0x00034e30
   137bc:	00034e48 	.word	0x00034e48

000137c0 <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   137c0:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   137c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   137c4:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
   137c6:	4604      	mov	r4, r0
   137c8:	b087      	sub	sp, #28
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   137ca:	4608      	mov	r0, r1
   137cc:	f001 fe4c 	bl	15468 <bt_conn_lookup_state_le>
	if (conn) {
   137d0:	4606      	mov	r6, r0
   137d2:	b188      	cbz	r0, 137f8 <bt_id_add.part.0+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   137d4:	4b49      	ldr	r3, [pc, #292]	; (138fc <bt_id_add.part.0+0x13c>)
   137d6:	e8d3 1fef 	ldaex	r1, [r3]
   137da:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   137de:	e8c3 1fe2 	stlex	r2, r1, [r3]
   137e2:	2a00      	cmp	r2, #0
   137e4:	d1f7      	bne.n	137d6 <bt_id_add.part.0+0x16>
	keys->state |= flag;
   137e6:	7a23      	ldrb	r3, [r4, #8]
   137e8:	f043 0301 	orr.w	r3, r3, #1
   137ec:	7223      	strb	r3, [r4, #8]
}
   137ee:	b007      	add	sp, #28
   137f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   137f4:	f001 bb12 	b.w	14e1c <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   137f8:	4d41      	ldr	r5, [pc, #260]	; (13900 <bt_id_add.part.0+0x140>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   137fa:	4601      	mov	r1, r0
   137fc:	4841      	ldr	r0, [pc, #260]	; (13904 <bt_id_add.part.0+0x144>)
   137fe:	f000 fbf7 	bl	13ff0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   13802:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13806:	b173      	cbz	r3, 13826 <bt_id_add.part.0+0x66>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13808:	4630      	mov	r0, r6
   1380a:	f018 fce9 	bl	2c1e0 <addr_res_enable>
		if (err) {
   1380e:	b150      	cbz	r0, 13826 <bt_id_add.part.0+0x66>
			LOG_WRN("Failed to disable address resolution");
   13810:	4b3d      	ldr	r3, [pc, #244]	; (13908 <bt_id_add.part.0+0x148>)
		LOG_WRN("Set privacy mode command is not supported");
   13812:	9305      	str	r3, [sp, #20]
   13814:	2302      	movs	r3, #2
   13816:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1381a:	9304      	str	r3, [sp, #16]
   1381c:	aa04      	add	r2, sp, #16
		LOG_ERR("Failed to set privacy mode");
   1381e:	483b      	ldr	r0, [pc, #236]	; (1390c <bt_id_add.part.0+0x14c>)
   13820:	f018 fcdb 	bl	2c1da <z_log_msg_static_create.constprop.0>
		goto done;
   13824:	e026      	b.n	13874 <bt_id_add.part.0+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   13826:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   1382a:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1382e:	429a      	cmp	r2, r3
   13830:	d12a      	bne.n	13888 <bt_id_add.part.0+0xc8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   13832:	2602      	movs	r6, #2
   13834:	4b36      	ldr	r3, [pc, #216]	; (13910 <bt_id_add.part.0+0x150>)
   13836:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1383a:	4834      	ldr	r0, [pc, #208]	; (1390c <bt_id_add.part.0+0x14c>)
   1383c:	aa04      	add	r2, sp, #16
   1383e:	9305      	str	r3, [sp, #20]
   13840:	9604      	str	r6, [sp, #16]
   13842:	f018 fcca 	bl	2c1da <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   13846:	2200      	movs	r2, #0
   13848:	f242 0029 	movw	r0, #8233	; 0x2029
   1384c:	4611      	mov	r1, r2
   1384e:	f7fe ffed 	bl	1282c <bt_hci_cmd_send_sync>
		if (err) {
   13852:	b130      	cbz	r0, 13862 <bt_id_add.part.0+0xa2>
			LOG_ERR("Failed to clear resolution list");
   13854:	4b2f      	ldr	r3, [pc, #188]	; (13914 <bt_id_add.part.0+0x154>)
   13856:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   1385a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1385e:	aa04      	add	r2, sp, #16
   13860:	e7dd      	b.n	1381e <bt_id_add.part.0+0x5e>
		bt_dev.le.rl_entries++;
   13862:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   13866:	3301      	adds	r3, #1
   13868:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1386c:	7a23      	ldrb	r3, [r4, #8]
   1386e:	f043 0304 	orr.w	r3, r3, #4
   13872:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13874:	2001      	movs	r0, #1
   13876:	f018 fcb3 	bl	2c1e0 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1387a:	2100      	movs	r1, #0
   1387c:	4826      	ldr	r0, [pc, #152]	; (13918 <bt_id_add.part.0+0x158>)
}
   1387e:	b007      	add	sp, #28
   13880:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13884:	f000 bbb4 	b.w	13ff0 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   13888:	4622      	mov	r2, r4
   1388a:	1c67      	adds	r7, r4, #1
   1388c:	4639      	mov	r1, r7
   1388e:	f812 0b2a 	ldrb.w	r0, [r2], #42
   13892:	f018 fc66 	bl	2c162 <hci_id_add>
	if (err) {
   13896:	4606      	mov	r6, r0
   13898:	b120      	cbz	r0, 138a4 <bt_id_add.part.0+0xe4>
		LOG_ERR("Failed to add IRK to controller");
   1389a:	4b20      	ldr	r3, [pc, #128]	; (1391c <bt_id_add.part.0+0x15c>)
		LOG_ERR("Failed to set privacy mode");
   1389c:	9305      	str	r3, [sp, #20]
   1389e:	2302      	movs	r3, #2
   138a0:	9304      	str	r3, [sp, #16]
   138a2:	e7da      	b.n	1385a <bt_id_add.part.0+0x9a>
	bt_dev.le.rl_entries++;
   138a4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   138a8:	3301      	adds	r3, #1
   138aa:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   138ae:	7a23      	ldrb	r3, [r4, #8]
   138b0:	f043 0304 	orr.w	r3, r3, #4
   138b4:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   138b6:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   138ba:	075b      	lsls	r3, r3, #29
   138bc:	d401      	bmi.n	138c2 <bt_id_add.part.0+0x102>
		LOG_WRN("Set privacy mode command is not supported");
   138be:	4b18      	ldr	r3, [pc, #96]	; (13920 <bt_id_add.part.0+0x160>)
   138c0:	e7a7      	b.n	13812 <bt_id_add.part.0+0x52>
	bt_addr_le_copy(&cp.id_addr, addr);
   138c2:	4639      	mov	r1, r7
   138c4:	4668      	mov	r0, sp
   138c6:	f018 fc45 	bl	2c154 <bt_addr_le_copy>
	cp.mode = mode;
   138ca:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   138cc:	2108      	movs	r1, #8
   138ce:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   138d2:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   138d6:	f7fe ff5b 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   138da:	4604      	mov	r4, r0
   138dc:	b160      	cbz	r0, 138f8 <bt_id_add.part.0+0x138>
   138de:	2208      	movs	r2, #8
   138e0:	4669      	mov	r1, sp
   138e2:	300c      	adds	r0, #12
   138e4:	f01a fb83 	bl	2dfee <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   138e8:	4632      	mov	r2, r6
   138ea:	4621      	mov	r1, r4
   138ec:	f242 004e 	movw	r0, #8270	; 0x204e
   138f0:	f7fe ff9c 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   138f4:	2800      	cmp	r0, #0
   138f6:	d0bd      	beq.n	13874 <bt_id_add.part.0+0xb4>
		LOG_ERR("Failed to set privacy mode");
   138f8:	4b0a      	ldr	r3, [pc, #40]	; (13924 <bt_id_add.part.0+0x164>)
   138fa:	e7cf      	b.n	1389c <bt_id_add.part.0+0xdc>
   138fc:	200080cc 	.word	0x200080cc
   13900:	20008000 	.word	0x20008000
   13904:	0002c237 	.word	0x0002c237
   13908:	00034e7d 	.word	0x00034e7d
   1390c:	000314cc 	.word	0x000314cc
   13910:	00034ea2 	.word	0x00034ea2
   13914:	00034ed3 	.word	0x00034ed3
   13918:	0002c211 	.word	0x0002c211
   1391c:	00034ef3 	.word	0x00034ef3
   13920:	00034f13 	.word	0x00034f13
   13924:	00034f3d 	.word	0x00034f3d

00013928 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13928:	4b08      	ldr	r3, [pc, #32]	; (1394c <bt_id_pending_keys_update+0x24>)
   1392a:	e8d3 2fef 	ldaex	r2, [r3]
   1392e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   13932:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13936:	2800      	cmp	r0, #0
   13938:	d1f7      	bne.n	1392a <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1393a:	0413      	lsls	r3, r2, #16
   1393c:	d504      	bpl.n	13948 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1393e:	2200      	movs	r2, #0
   13940:	2002      	movs	r0, #2
   13942:	4903      	ldr	r1, [pc, #12]	; (13950 <bt_id_pending_keys_update+0x28>)
   13944:	f006 bd5a 	b.w	1a3fc <bt_keys_foreach_type>
}
   13948:	4770      	bx	lr
   1394a:	bf00      	nop
   1394c:	200080cc 	.word	0x200080cc
   13950:	0002c2c5 	.word	0x0002c2c5

00013954 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   13954:	2300      	movs	r3, #0
{
   13956:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13958:	4905      	ldr	r1, [pc, #20]	; (13970 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   1395a:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1395e:	466a      	mov	r2, sp
   13960:	2002      	movs	r0, #2
   13962:	f006 fd4b 	bl	1a3fc <bt_keys_foreach_type>
}
   13966:	9801      	ldr	r0, [sp, #4]
   13968:	b003      	add	sp, #12
   1396a:	f85d fb04 	ldr.w	pc, [sp], #4
   1396e:	bf00      	nop
   13970:	000136ed 	.word	0x000136ed

00013974 <bt_id_add>:
	CHECKIF(keys == NULL) {
   13974:	4603      	mov	r3, r0
{
   13976:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   13978:	b170      	cbz	r0, 13998 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1397a:	490a      	ldr	r1, [pc, #40]	; (139a4 <bt_id_add+0x30>)
   1397c:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   13980:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
   13984:	b10c      	cbz	r4, 1398a <bt_id_add+0x16>
   13986:	4294      	cmp	r4, r2
   13988:	d208      	bcs.n	1399c <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   1398a:	3201      	adds	r2, #1
   1398c:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13990:	7a1a      	ldrb	r2, [r3, #8]
   13992:	f042 0204 	orr.w	r2, r2, #4
   13996:	721a      	strb	r2, [r3, #8]
}
   13998:	bc10      	pop	{r4}
   1399a:	4770      	bx	lr
   1399c:	bc10      	pop	{r4}
   1399e:	f7ff bf0f 	b.w	137c0 <bt_id_add.part.0>
   139a2:	bf00      	nop
   139a4:	20008000 	.word	0x20008000

000139a8 <bt_id_del>:
{
   139a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   139ac:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   139ae:	4605      	mov	r5, r0
{
   139b0:	af00      	add	r7, sp, #0
	CHECKIF(keys == NULL) {
   139b2:	b398      	cbz	r0, 13a1c <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   139b4:	4c4e      	ldr	r4, [pc, #312]	; (13af0 <bt_id_del+0x148>)
   139b6:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   139ba:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   139be:	b1ca      	cbz	r2, 139f4 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   139c0:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   139c2:	4293      	cmp	r3, r2
   139c4:	dc23      	bgt.n	13a0e <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   139c6:	2100      	movs	r1, #0
   139c8:	2206      	movs	r2, #6
   139ca:	4608      	mov	r0, r1
   139cc:	f001 fd4c 	bl	15468 <bt_conn_lookup_state_le>
	if (conn) {
   139d0:	4606      	mov	r6, r0
   139d2:	b338      	cbz	r0, 13a24 <bt_id_del+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   139d4:	34cc      	adds	r4, #204	; 0xcc
   139d6:	e8d4 3fef 	ldaex	r3, [r4]
   139da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   139de:	e8c4 3fe2 	stlex	r2, r3, [r4]
   139e2:	2a00      	cmp	r2, #0
   139e4:	d1f7      	bne.n	139d6 <bt_id_del+0x2e>
	keys->state |= flag;
   139e6:	7a2b      	ldrb	r3, [r5, #8]
   139e8:	f043 0302 	orr.w	r3, r3, #2
   139ec:	722b      	strb	r3, [r5, #8]
		bt_conn_unref(conn);
   139ee:	f001 fa15 	bl	14e1c <bt_conn_unref>
		return;
   139f2:	e013      	b.n	13a1c <bt_id_del+0x74>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   139f4:	b95b      	cbnz	r3, 13a0e <bt_id_del+0x66>
   139f6:	493f      	ldr	r1, [pc, #252]	; (13af4 <bt_id_del+0x14c>)
   139f8:	483f      	ldr	r0, [pc, #252]	; (13af8 <bt_id_del+0x150>)
   139fa:	f240 4323 	movw	r3, #1059	; 0x423
   139fe:	4a3f      	ldr	r2, [pc, #252]	; (13afc <bt_id_del+0x154>)
   13a00:	f016 fe47 	bl	2a692 <assert_print>
   13a04:	f240 4123 	movw	r1, #1059	; 0x423
   13a08:	483c      	ldr	r0, [pc, #240]	; (13afc <bt_id_del+0x154>)
   13a0a:	f016 fe3b 	bl	2a684 <assert_post_action>
			bt_dev.le.rl_entries--;
   13a0e:	3b01      	subs	r3, #1
   13a10:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13a14:	7a2b      	ldrb	r3, [r5, #8]
   13a16:	f023 0304 	bic.w	r3, r3, #4
   13a1a:	722b      	strb	r3, [r5, #8]
}
   13a1c:	371c      	adds	r7, #28
   13a1e:	46bd      	mov	sp, r7
   13a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13a24:	4601      	mov	r1, r0
   13a26:	4836      	ldr	r0, [pc, #216]	; (13b00 <bt_id_del+0x158>)
   13a28:	f000 fae2 	bl	13ff0 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13a2c:	4630      	mov	r0, r6
   13a2e:	f018 fbd7 	bl	2c1e0 <addr_res_enable>
	if (err) {
   13a32:	4606      	mov	r6, r0
   13a34:	b1d0      	cbz	r0, 13a6c <bt_id_del+0xc4>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   13a36:	466d      	mov	r5, sp
   13a38:	b088      	sub	sp, #32
   13a3a:	466b      	mov	r3, sp
   13a3c:	4a31      	ldr	r2, [pc, #196]	; (13b04 <bt_id_del+0x15c>)
   13a3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13a42:	e9c3 2005 	strd	r2, r0, [r3, #20]
   13a46:	461a      	mov	r2, r3
   13a48:	2303      	movs	r3, #3
   13a4a:	482f      	ldr	r0, [pc, #188]	; (13b08 <bt_id_del+0x160>)
   13a4c:	f842 3f10 	str.w	r3, [r2, #16]!
   13a50:	f018 fbc3 	bl	2c1da <z_log_msg_static_create.constprop.0>
   13a54:	46ad      	mov	sp, r5
	if (bt_dev.le.rl_entries) {
   13a56:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13a5a:	b113      	cbz	r3, 13a62 <bt_id_del+0xba>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13a5c:	2001      	movs	r0, #1
   13a5e:	f018 fbbf 	bl	2c1e0 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13a62:	2100      	movs	r1, #0
   13a64:	4829      	ldr	r0, [pc, #164]	; (13b0c <bt_id_del+0x164>)
   13a66:	f000 fac3 	bl	13ff0 <bt_le_ext_adv_foreach>
   13a6a:	e7d7      	b.n	13a1c <bt_id_del+0x74>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13a6c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13a70:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   13a74:	429a      	cmp	r2, r3
   13a76:	d20c      	bcs.n	13a92 <bt_id_del+0xea>
		bt_dev.le.rl_entries--;
   13a78:	3b01      	subs	r3, #1
   13a7a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13a7e:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13a80:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13a82:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13a86:	2002      	movs	r0, #2
   13a88:	4921      	ldr	r1, [pc, #132]	; (13b10 <bt_id_del+0x168>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13a8a:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13a8c:	f006 fcb6 	bl	1a3fc <bt_keys_foreach_type>
		goto done;
   13a90:	e7e1      	b.n	13a56 <bt_id_del+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13a92:	2107      	movs	r1, #7
   13a94:	f242 0028 	movw	r0, #8232	; 0x2028
   13a98:	f7fe fe7a 	bl	12790 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13a9c:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
   13aa0:	4680      	mov	r8, r0
   13aa2:	b958      	cbnz	r0, 13abc <bt_id_del+0x114>
		LOG_ERR("Failed to remove IRK from controller");
   13aa4:	4b1b      	ldr	r3, [pc, #108]	; (13b14 <bt_id_del+0x16c>)
   13aa6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13aaa:	617b      	str	r3, [r7, #20]
   13aac:	2302      	movs	r3, #2
   13aae:	4816      	ldr	r0, [pc, #88]	; (13b08 <bt_id_del+0x160>)
   13ab0:	613b      	str	r3, [r7, #16]
   13ab2:	f107 0210 	add.w	r2, r7, #16
   13ab6:	f018 fb90 	bl	2c1da <z_log_msg_static_create.constprop.0>
		goto done;
   13aba:	e7cc      	b.n	13a56 <bt_id_del+0xae>
	return net_buf_simple_add(&buf->b, len);
   13abc:	2107      	movs	r1, #7
   13abe:	300c      	adds	r0, #12
   13ac0:	f007 fe70 	bl	1b7a4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13ac4:	4649      	mov	r1, r9
   13ac6:	f018 fb45 	bl	2c154 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   13aca:	4632      	mov	r2, r6
   13acc:	4641      	mov	r1, r8
   13ace:	f242 0028 	movw	r0, #8232	; 0x2028
   13ad2:	f7fe feab 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   13ad6:	2800      	cmp	r0, #0
   13ad8:	d1e4      	bne.n	13aa4 <bt_id_del+0xfc>
	bt_dev.le.rl_entries--;
   13ada:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13ade:	3b01      	subs	r3, #1
   13ae0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   13ae4:	7a2b      	ldrb	r3, [r5, #8]
   13ae6:	f023 0304 	bic.w	r3, r3, #4
   13aea:	722b      	strb	r3, [r5, #8]
   13aec:	e7b3      	b.n	13a56 <bt_id_del+0xae>
   13aee:	bf00      	nop
   13af0:	20008000 	.word	0x20008000
   13af4:	00034f58 	.word	0x00034f58
   13af8:	00032629 	.word	0x00032629
   13afc:	00034dc7 	.word	0x00034dc7
   13b00:	0002c237 	.word	0x0002c237
   13b04:	00034f71 	.word	0x00034f71
   13b08:	000314cc 	.word	0x000314cc
   13b0c:	0002c211 	.word	0x0002c211
   13b10:	0002c1c5 	.word	0x0002c1c5
   13b14:	00034f9e 	.word	0x00034f9e

00013b18 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13b18:	b570      	push	{r4, r5, r6, lr}
   13b1a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b1c:	4604      	mov	r4, r0
{
   13b1e:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b20:	b920      	cbnz	r0, 13b2c <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13b22:	b31d      	cbz	r5, 13b6c <bt_id_create+0x54>
			return -EINVAL;
   13b24:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   13b28:	b006      	add	sp, #24
   13b2a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b2c:	4920      	ldr	r1, [pc, #128]	; (13bb0 <bt_id_create+0x98>)
   13b2e:	f018 fb01 	bl	2c134 <bt_addr_le_eq>
   13b32:	2800      	cmp	r0, #0
   13b34:	d1f5      	bne.n	13b22 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13b36:	7823      	ldrb	r3, [r4, #0]
   13b38:	2b01      	cmp	r3, #1
   13b3a:	d104      	bne.n	13b46 <bt_id_create+0x2e>
   13b3c:	79a3      	ldrb	r3, [r4, #6]
   13b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13b42:	2bc0      	cmp	r3, #192	; 0xc0
   13b44:	d00a      	beq.n	13b5c <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   13b46:	4b1b      	ldr	r3, [pc, #108]	; (13bb4 <bt_id_create+0x9c>)
   13b48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13b4c:	9305      	str	r3, [sp, #20]
   13b4e:	2302      	movs	r3, #2
   13b50:	4819      	ldr	r0, [pc, #100]	; (13bb8 <bt_id_create+0xa0>)
   13b52:	aa04      	add	r2, sp, #16
   13b54:	9304      	str	r3, [sp, #16]
   13b56:	f018 fb40 	bl	2c1da <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13b5a:	e7e3      	b.n	13b24 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   13b5c:	4620      	mov	r0, r4
   13b5e:	f7ff fd4f 	bl	13600 <id_find>
   13b62:	2800      	cmp	r0, #0
   13b64:	dbdd      	blt.n	13b22 <bt_id_create+0xa>
			return -EALREADY;
   13b66:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13b6a:	e7dd      	b.n	13b28 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13b6c:	4d13      	ldr	r5, [pc, #76]	; (13bbc <bt_id_create+0xa4>)
   13b6e:	79eb      	ldrb	r3, [r5, #7]
   13b70:	2b01      	cmp	r3, #1
   13b72:	d01a      	beq.n	13baa <bt_id_create+0x92>
   13b74:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   13b78:	f018 fae4 	bl	2c144 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13b7c:	07c3      	lsls	r3, r0, #31
   13b7e:	d50b      	bpl.n	13b98 <bt_id_create+0x80>
	new_id = bt_dev.id_count;
   13b80:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   13b82:	4621      	mov	r1, r4
   13b84:	4630      	mov	r0, r6
   13b86:	f7ff fd53 	bl	13630 <id_create.constprop.0>
	if (err) {
   13b8a:	2800      	cmp	r0, #0
   13b8c:	d1cc      	bne.n	13b28 <bt_id_create+0x10>
		bt_dev.id_count++;
   13b8e:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   13b90:	4630      	mov	r0, r6
		bt_dev.id_count++;
   13b92:	3301      	adds	r3, #1
   13b94:	71eb      	strb	r3, [r5, #7]
	return new_id;
   13b96:	e7c7      	b.n	13b28 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   13b98:	2c00      	cmp	r4, #0
   13b9a:	d0c3      	beq.n	13b24 <bt_id_create+0xc>
   13b9c:	4620      	mov	r0, r4
   13b9e:	4904      	ldr	r1, [pc, #16]	; (13bb0 <bt_id_create+0x98>)
   13ba0:	f018 fac8 	bl	2c134 <bt_addr_le_eq>
   13ba4:	2800      	cmp	r0, #0
   13ba6:	d0eb      	beq.n	13b80 <bt_id_create+0x68>
   13ba8:	e7bc      	b.n	13b24 <bt_id_create+0xc>
		return -ENOMEM;
   13baa:	f06f 000b 	mvn.w	r0, #11
   13bae:	e7bb      	b.n	13b28 <bt_id_create+0x10>
   13bb0:	00034568 	.word	0x00034568
   13bb4:	00034fc3 	.word	0x00034fc3
   13bb8:	000314cc 	.word	0x000314cc
   13bbc:	20008000 	.word	0x20008000

00013bc0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13bc0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   13bc2:	4604      	mov	r4, r0
{
   13bc4:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   13bc6:	b960      	cbnz	r0, 13be2 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   13bc8:	4b1a      	ldr	r3, [pc, #104]	; (13c34 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   13bca:	9307      	str	r3, [sp, #28]
   13bcc:	2302      	movs	r3, #2
   13bce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13bd2:	4819      	ldr	r0, [pc, #100]	; (13c38 <bt_id_read_public_addr+0x78>)
   13bd4:	aa06      	add	r2, sp, #24
   13bd6:	9306      	str	r3, [sp, #24]
   13bd8:	f018 faff 	bl	2c1da <z_log_msg_static_create.constprop.0>
		return 0U;
   13bdc:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13bde:	b008      	add	sp, #32
   13be0:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13be2:	2100      	movs	r1, #0
   13be4:	f241 0009 	movw	r0, #4105	; 0x1009
   13be8:	aa01      	add	r2, sp, #4
   13bea:	f7fe fe1f 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   13bee:	4606      	mov	r6, r0
   13bf0:	b108      	cbz	r0, 13bf6 <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   13bf2:	4b12      	ldr	r3, [pc, #72]	; (13c3c <bt_id_read_public_addr+0x7c>)
   13bf4:	e7e9      	b.n	13bca <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   13bf6:	9b01      	ldr	r3, [sp, #4]
   13bf8:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13bfa:	68dd      	ldr	r5, [r3, #12]
   13bfc:	4910      	ldr	r1, [pc, #64]	; (13c40 <bt_id_read_public_addr+0x80>)
   13bfe:	3501      	adds	r5, #1
   13c00:	4628      	mov	r0, r5
   13c02:	f01c fc90 	bl	30526 <memcmp>
   13c06:	b918      	cbnz	r0, 13c10 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   13c08:	9801      	ldr	r0, [sp, #4]
   13c0a:	f007 fca9 	bl	1b560 <net_buf_unref>
		return 0U;
   13c0e:	e7e5      	b.n	13bdc <bt_id_read_public_addr+0x1c>
   13c10:	2206      	movs	r2, #6
   13c12:	4628      	mov	r0, r5
   13c14:	490b      	ldr	r1, [pc, #44]	; (13c44 <bt_id_read_public_addr+0x84>)
   13c16:	f01c fc86 	bl	30526 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13c1a:	2800      	cmp	r0, #0
   13c1c:	d0f4      	beq.n	13c08 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   13c1e:	4629      	mov	r1, r5
   13c20:	1c60      	adds	r0, r4, #1
   13c22:	f018 fa92 	bl	2c14a <bt_addr_copy>
	net_buf_unref(rsp);
   13c26:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13c28:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13c2a:	f007 fc99 	bl	1b560 <net_buf_unref>
	return 1U;
   13c2e:	2001      	movs	r0, #1
   13c30:	e7d5      	b.n	13bde <bt_id_read_public_addr+0x1e>
   13c32:	bf00      	nop
   13c34:	00034ff1 	.word	0x00034ff1
   13c38:	000314cc 	.word	0x000314cc
   13c3c:	0003500a 	.word	0x0003500a
   13c40:	00034575 	.word	0x00034575
   13c44:	0003456f 	.word	0x0003456f

00013c48 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13c48:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13c4a:	4668      	mov	r0, sp
   13c4c:	f7ff ffb8 	bl	13bc0 <bt_id_read_public_addr>
   13c50:	4b04      	ldr	r3, [pc, #16]	; (13c64 <bt_setup_public_id_addr+0x1c>)
   13c52:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13c54:	b118      	cbz	r0, 13c5e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13c56:	4669      	mov	r1, sp
   13c58:	2000      	movs	r0, #0
   13c5a:	f7ff fce9 	bl	13630 <id_create.constprop.0>
}
   13c5e:	b003      	add	sp, #12
   13c60:	f85d fb04 	ldr.w	pc, [sp], #4
   13c64:	20008000 	.word	0x20008000

00013c68 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13c68:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c6a:	4b24      	ldr	r3, [pc, #144]	; (13cfc <bt_read_static_addr+0x94>)
{
   13c6c:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c6e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   13c72:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c74:	07db      	lsls	r3, r3, #31
{
   13c76:	b089      	sub	sp, #36	; 0x24
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13c78:	d40d      	bmi.n	13c96 <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   13c7a:	4b21      	ldr	r3, [pc, #132]	; (13d00 <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   13c7c:	9307      	str	r3, [sp, #28]
		return 0;
   13c7e:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   13c80:	2302      	movs	r3, #2
   13c82:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13c86:	481f      	ldr	r0, [pc, #124]	; (13d04 <bt_read_static_addr+0x9c>)
   13c88:	aa06      	add	r2, sp, #24
   13c8a:	9306      	str	r3, [sp, #24]
   13c8c:	f018 faa5 	bl	2c1da <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   13c90:	4620      	mov	r0, r4
   13c92:	b009      	add	sp, #36	; 0x24
   13c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13c96:	2100      	movs	r1, #0
   13c98:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13c9c:	aa01      	add	r2, sp, #4
   13c9e:	f7fe fdc5 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   13ca2:	4603      	mov	r3, r0
   13ca4:	b108      	cbz	r0, 13caa <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   13ca6:	4b18      	ldr	r3, [pc, #96]	; (13d08 <bt_read_static_addr+0xa0>)
   13ca8:	e7e8      	b.n	13c7c <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   13caa:	9801      	ldr	r0, [sp, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   13cac:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   13cae:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   13cb0:	7854      	ldrb	r4, [r2, #1]
   13cb2:	3202      	adds	r2, #2
   13cb4:	42b4      	cmp	r4, r6
   13cb6:	bf28      	it	cs
   13cb8:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   13cba:	429c      	cmp	r4, r3
   13cbc:	dc0e      	bgt.n	13cdc <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   13cbe:	f007 fc4f 	bl	1b560 <net_buf_unref>
	if (!cnt) {
   13cc2:	2c00      	cmp	r4, #0
   13cc4:	d1e4      	bne.n	13c90 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   13cc6:	4b11      	ldr	r3, [pc, #68]	; (13d0c <bt_read_static_addr+0xa4>)
   13cc8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13ccc:	9307      	str	r3, [sp, #28]
   13cce:	2302      	movs	r3, #2
   13cd0:	480c      	ldr	r0, [pc, #48]	; (13d04 <bt_read_static_addr+0x9c>)
   13cd2:	aa06      	add	r2, sp, #24
   13cd4:	9306      	str	r3, [sp, #24]
   13cd6:	f018 fa80 	bl	2c1da <z_log_msg_static_create.constprop.0>
   13cda:	e7d9      	b.n	13c90 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13cdc:	4611      	mov	r1, r2
   13cde:	fb07 5603 	mla	r6, r7, r3, r5
   13ce2:	f102 0c14 	add.w	ip, r2, #20
   13ce6:	f851 eb04 	ldr.w	lr, [r1], #4
   13cea:	4561      	cmp	r1, ip
   13cec:	f846 eb04 	str.w	lr, [r6], #4
   13cf0:	d1f9      	bne.n	13ce6 <bt_read_static_addr+0x7e>
   13cf2:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   13cf4:	3301      	adds	r3, #1
   13cf6:	8031      	strh	r1, [r6, #0]
   13cf8:	3216      	adds	r2, #22
   13cfa:	e7de      	b.n	13cba <bt_read_static_addr+0x52>
   13cfc:	20008000 	.word	0x20008000
   13d00:	00035028 	.word	0x00035028
   13d04:	000314cc 	.word	0x000314cc
   13d08:	00035054 	.word	0x00035054
   13d0c:	00035074 	.word	0x00035074

00013d10 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13d10:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13d12:	4d15      	ldr	r5, [pc, #84]	; (13d68 <bt_setup_random_id_addr+0x58>)
{
   13d14:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13d16:	79ec      	ldrb	r4, [r5, #7]
   13d18:	b92c      	cbnz	r4, 13d26 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13d1a:	2101      	movs	r1, #1
   13d1c:	a802      	add	r0, sp, #8
   13d1e:	f7ff ffa3 	bl	13c68 <bt_read_static_addr>
   13d22:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13d24:	b9c0      	cbnz	r0, 13d58 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13d26:	2100      	movs	r1, #0
   13d28:	4608      	mov	r0, r1
}
   13d2a:	b008      	add	sp, #32
   13d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13d30:	f7ff bef2 	b.w	13b18 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13d34:	ab02      	add	r3, sp, #8
   13d36:	fb06 3102 	mla	r1, r6, r2, r3
   13d3a:	f10d 0001 	add.w	r0, sp, #1
   13d3e:	f018 fa04 	bl	2c14a <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13d42:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13d44:	4669      	mov	r1, sp
   13d46:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13d48:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13d4c:	f7ff fc70 	bl	13630 <id_create.constprop.0>
				if (err) {
   13d50:	3401      	adds	r4, #1
   13d52:	b110      	cbz	r0, 13d5a <bt_setup_random_id_addr+0x4a>
}
   13d54:	b008      	add	sp, #32
   13d56:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13d58:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13d5a:	79eb      	ldrb	r3, [r5, #7]
   13d5c:	b2e2      	uxtb	r2, r4
   13d5e:	4293      	cmp	r3, r2
   13d60:	d8e8      	bhi.n	13d34 <bt_setup_random_id_addr+0x24>
			return 0;
   13d62:	2000      	movs	r0, #0
   13d64:	e7f6      	b.n	13d54 <bt_setup_random_id_addr+0x44>
   13d66:	bf00      	nop
   13d68:	20008000 	.word	0x20008000

00013d6c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d70:	4690      	mov	r8, r2
   13d72:	460e      	mov	r6, r1
   13d74:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   13d76:	4602      	mov	r2, r0
   13d78:	2800      	cmp	r0, #0
   13d7a:	d04b      	beq.n	13e14 <bt_id_set_adv_own_addr+0xa8>
   13d7c:	2b00      	cmp	r3, #0
   13d7e:	d049      	beq.n	13e14 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13d80:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   13d82:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13d84:	d531      	bpl.n	13dea <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13d86:	4f25      	ldr	r7, [pc, #148]	; (13e1c <bt_id_set_adv_own_addr+0xb0>)
   13d88:	f1b8 0f00 	cmp.w	r8, #0
   13d8c:	d013      	beq.n	13db6 <bt_id_set_adv_own_addr+0x4a>
   13d8e:	0688      	lsls	r0, r1, #26
   13d90:	d40a      	bmi.n	13da8 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13d92:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13d96:	5cfb      	ldrb	r3, [r7, r3]
   13d98:	2b01      	cmp	r3, #1
   13d9a:	d015      	beq.n	13dc8 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13d9c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13d9e:	06b2      	lsls	r2, r6, #26
   13da0:	d50f      	bpl.n	13dc2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13da2:	f043 0302 	orr.w	r3, r3, #2
   13da6:	e00b      	b.n	13dc0 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13da8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   13dac:	0659      	lsls	r1, r3, #25
   13dae:	d4f0      	bmi.n	13d92 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   13db0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13db4:	e006      	b.n	13dc4 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13db6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13dba:	5cfb      	ldrb	r3, [r7, r3]
   13dbc:	2b01      	cmp	r3, #1
   13dbe:	d003      	beq.n	13dc8 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   13dc0:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13dc2:	2000      	movs	r0, #0
}
   13dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13dc8:	2107      	movs	r1, #7
   13dca:	fb01 7104 	mla	r1, r1, r4, r7
   13dce:	4610      	mov	r0, r2
   13dd0:	3101      	adds	r1, #1
   13dd2:	f018 fa54 	bl	2c27e <bt_id_set_adv_random_addr>
				if (err) {
   13dd6:	2800      	cmp	r0, #0
   13dd8:	d1f4      	bne.n	13dc4 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   13dda:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13dde:	5d3b      	ldrb	r3, [r7, r4]
   13de0:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13de2:	f1b8 0f00 	cmp.w	r8, #0
   13de6:	d0ec      	beq.n	13dc2 <bt_id_set_adv_own_addr+0x56>
   13de8:	e7d9      	b.n	13d9e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13dea:	074b      	lsls	r3, r1, #29
   13dec:	d50e      	bpl.n	13e0c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13dee:	4e0b      	ldr	r6, [pc, #44]	; (13e1c <bt_id_set_adv_own_addr+0xb0>)
   13df0:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13df4:	5df3      	ldrb	r3, [r6, r7]
   13df6:	2b01      	cmp	r3, #1
   13df8:	d1e2      	bne.n	13dc0 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13dfa:	2107      	movs	r1, #7
   13dfc:	fb11 3104 	smlabb	r1, r1, r4, r3
   13e00:	4431      	add	r1, r6
   13e02:	f018 fa3c 	bl	2c27e <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   13e06:	5df3      	ldrb	r3, [r6, r7]
   13e08:	702b      	strb	r3, [r5, #0]
		if (err) {
   13e0a:	e7db      	b.n	13dc4 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   13e0c:	f018 fa3f 	bl	2c28e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13e10:	2301      	movs	r3, #1
   13e12:	e7f9      	b.n	13e08 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   13e14:	f06f 0015 	mvn.w	r0, #21
   13e18:	e7d4      	b.n	13dc4 <bt_id_set_adv_own_addr+0x58>
   13e1a:	bf00      	nop
   13e1c:	20008000 	.word	0x20008000

00013e20 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e24:	460c      	mov	r4, r1
   13e26:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13e28:	2120      	movs	r1, #32
{
   13e2a:	4692      	mov	sl, r2
   13e2c:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13e2e:	f7fe fcaf 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   13e32:	4605      	mov	r5, r0
   13e34:	2800      	cmp	r0, #0
   13e36:	d05b      	beq.n	13ef0 <hci_set_ad+0xd0>
   13e38:	2120      	movs	r1, #32
   13e3a:	300c      	adds	r0, #12
   13e3c:	f007 fcb2 	bl	1b7a4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13e40:	2220      	movs	r2, #32
   13e42:	4681      	mov	r9, r0
   13e44:	2100      	movs	r1, #0
   13e46:	f01c fbb8 	bl	305ba <memset>
	uint8_t set_data_len = 0;
   13e4a:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   13e4c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   13e50:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   13e54:	2300      	movs	r3, #0
   13e56:	f8d4 8000 	ldr.w	r8, [r4]
   13e5a:	6862      	ldr	r2, [r4, #4]
   13e5c:	4293      	cmp	r3, r2
   13e5e:	d30c      	bcc.n	13e7a <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   13e60:	3408      	adds	r4, #8
   13e62:	45a2      	cmp	sl, r4
   13e64:	d1f6      	bne.n	13e54 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13e66:	2200      	movs	r2, #0
   13e68:	4629      	mov	r1, r5
   13e6a:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   13e6c:	f889 6000 	strb.w	r6, [r9]
}
   13e70:	b009      	add	sp, #36	; 0x24
   13e72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13e76:	f7fe bcd9 	b.w	1282c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   13e7a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   13e7e:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   13e80:	1811      	adds	r1, r2, r0
   13e82:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   13e84:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   13e88:	d91b      	bls.n	13ec2 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13e8a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   13e8e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13e92:	d101      	bne.n	13e98 <hci_set_ad+0x78>
   13e94:	2a00      	cmp	r2, #0
   13e96:	dc12      	bgt.n	13ebe <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   13e98:	4b17      	ldr	r3, [pc, #92]	; (13ef8 <hci_set_ad+0xd8>)
   13e9a:	9307      	str	r3, [sp, #28]
   13e9c:	2302      	movs	r3, #2
   13e9e:	9306      	str	r3, [sp, #24]
   13ea0:	2300      	movs	r3, #0
   13ea2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13ea6:	4815      	ldr	r0, [pc, #84]	; (13efc <hci_set_ad+0xdc>)
   13ea8:	aa06      	add	r2, sp, #24
   13eaa:	f7fa fcdd 	bl	e868 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   13eae:	4628      	mov	r0, r5
   13eb0:	f007 fb56 	bl	1b560 <net_buf_unref>
					return -EINVAL;
   13eb4:	f06f 0015 	mvn.w	r0, #21
}
   13eb8:	b009      	add	sp, #36	; 0x24
   13eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13ebe:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13ec2:	b2d7      	uxtb	r7, r2
   13ec4:	1c79      	adds	r1, r7, #1
   13ec6:	f80b 1006 	strb.w	r1, [fp, r6]
   13eca:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   13ecc:	b2c9      	uxtb	r1, r1
   13ece:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13ed2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13ed6:	fa5b f080 	uxtab	r0, fp, r0
   13eda:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   13edc:	3702      	adds	r7, #2
   13ede:	f01c fb32 	bl	30546 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13ee2:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   13ee4:	4437      	add	r7, r6
   13ee6:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   13ee8:	3301      	adds	r3, #1
   13eea:	f108 0808 	add.w	r8, r8, #8
   13eee:	e7b4      	b.n	13e5a <hci_set_ad+0x3a>
		return -ENOBUFS;
   13ef0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13ef4:	e7e0      	b.n	13eb8 <hci_set_ad+0x98>
   13ef6:	bf00      	nop
   13ef8:	000350a3 	.word	0x000350a3
   13efc:	00031484 	.word	0x00031484

00013f00 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13f00:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13f02:	4605      	mov	r5, r0
   13f04:	4b16      	ldr	r3, [pc, #88]	; (13f60 <le_adv_start_add_conn+0x60>)
   13f06:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   13f0a:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   13f0c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13f10:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   13f12:	2207      	movs	r2, #7
   13f14:	4628      	mov	r0, r5
   13f16:	4913      	ldr	r1, [pc, #76]	; (13f64 <le_adv_start_add_conn+0x64>)
   13f18:	f01c fb05 	bl	30526 <memcmp>
   13f1c:	4603      	mov	r3, r0
   13f1e:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13f20:	b96b      	cbnz	r3, 13f3e <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13f22:	4911      	ldr	r1, [pc, #68]	; (13f68 <le_adv_start_add_conn+0x68>)
   13f24:	f001 fa38 	bl	15398 <bt_conn_add_le>
		if (!conn) {
   13f28:	4604      	mov	r4, r0
   13f2a:	b910      	cbnz	r0, 13f32 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   13f2c:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   13f30:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   13f32:	2104      	movs	r1, #4
   13f34:	f000 ffaa 	bl	14e8c <bt_conn_set_state>
		return 0;
   13f38:	2000      	movs	r0, #0
		*out_conn = conn;
   13f3a:	6034      	str	r4, [r6, #0]
   13f3c:	e7f8      	b.n	13f30 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   13f3e:	4629      	mov	r1, r5
   13f40:	f001 fa62 	bl	15408 <bt_conn_exists_le>
   13f44:	b940      	cbnz	r0, 13f58 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   13f46:	7820      	ldrb	r0, [r4, #0]
   13f48:	4629      	mov	r1, r5
   13f4a:	f001 fa25 	bl	15398 <bt_conn_add_le>
	if (!conn) {
   13f4e:	4604      	mov	r4, r0
   13f50:	2800      	cmp	r0, #0
   13f52:	d0eb      	beq.n	13f2c <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   13f54:	2105      	movs	r1, #5
   13f56:	e7ed      	b.n	13f34 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   13f58:	f06f 0015 	mvn.w	r0, #21
   13f5c:	e7e8      	b.n	13f30 <le_adv_start_add_conn+0x30>
   13f5e:	bf00      	nop
   13f60:	20008000 	.word	0x20008000
   13f64:	00034568 	.word	0x00034568
   13f68:	00034561 	.word	0x00034561

00013f6c <valid_adv_param>:
{
   13f6c:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13f6e:	6843      	ldr	r3, [r0, #4]
{
   13f70:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13f72:	0558      	lsls	r0, r3, #21
   13f74:	d501      	bpl.n	13f7a <valid_adv_param+0xe>
		return false;
   13f76:	2000      	movs	r0, #0
}
   13f78:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13f7a:	6922      	ldr	r2, [r4, #16]
   13f7c:	b10a      	cbz	r2, 13f82 <valid_adv_param+0x16>
   13f7e:	07d9      	lsls	r1, r3, #31
   13f80:	d5f9      	bpl.n	13f76 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13f82:	4d19      	ldr	r5, [pc, #100]	; (13fe8 <valid_adv_param+0x7c>)
   13f84:	7820      	ldrb	r0, [r4, #0]
   13f86:	79eb      	ldrb	r3, [r5, #7]
   13f88:	4283      	cmp	r3, r0
   13f8a:	d9f4      	bls.n	13f76 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   13f8c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13f90:	2207      	movs	r2, #7
   13f92:	4916      	ldr	r1, [pc, #88]	; (13fec <valid_adv_param+0x80>)
   13f94:	4428      	add	r0, r5
   13f96:	f01c fac6 	bl	30526 <memcmp>
	if (param->id >= bt_dev.id_count ||
   13f9a:	2800      	cmp	r0, #0
   13f9c:	d0eb      	beq.n	13f76 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13f9e:	6860      	ldr	r0, [r4, #4]
   13fa0:	07c2      	lsls	r2, r0, #31
   13fa2:	d406      	bmi.n	13fb2 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   13fa4:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   13fa8:	2b08      	cmp	r3, #8
   13faa:	d802      	bhi.n	13fb2 <valid_adv_param+0x46>
   13fac:	68a3      	ldr	r3, [r4, #8]
   13fae:	2b9f      	cmp	r3, #159	; 0x9f
   13fb0:	d9e1      	bls.n	13f76 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   13fb2:	f010 0f30 	tst.w	r0, #48	; 0x30
   13fb6:	d002      	beq.n	13fbe <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   13fb8:	6923      	ldr	r3, [r4, #16]
   13fba:	2b00      	cmp	r3, #0
   13fbc:	d0db      	beq.n	13f76 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   13fbe:	06c3      	lsls	r3, r0, #27
   13fc0:	d401      	bmi.n	13fc6 <valid_adv_param+0x5a>
   13fc2:	6923      	ldr	r3, [r4, #16]
   13fc4:	b943      	cbnz	r3, 13fd8 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   13fc6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13fca:	429a      	cmp	r2, r3
   13fcc:	d8d3      	bhi.n	13f76 <valid_adv_param+0xa>
   13fce:	2a1f      	cmp	r2, #31
   13fd0:	d9d1      	bls.n	13f76 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   13fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13fd6:	d8ce      	bhi.n	13f76 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   13fd8:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   13fdc:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   13fe0:	bf18      	it	ne
   13fe2:	2001      	movne	r0, #1
   13fe4:	e7c8      	b.n	13f78 <valid_adv_param+0xc>
   13fe6:	bf00      	nop
   13fe8:	20008000 	.word	0x20008000
   13fec:	00034568 	.word	0x00034568

00013ff0 <bt_le_ext_adv_foreach>:
{
   13ff0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   13ff2:	4801      	ldr	r0, [pc, #4]	; (13ff8 <bt_le_ext_adv_foreach+0x8>)
   13ff4:	4718      	bx	r3
   13ff6:	bf00      	nop
   13ff8:	20008018 	.word	0x20008018

00013ffc <bt_le_adv_lookup_legacy>:
}
   13ffc:	4800      	ldr	r0, [pc, #0]	; (14000 <bt_le_adv_lookup_legacy+0x4>)
   13ffe:	4770      	bx	lr
   14000:	20008018 	.word	0x20008018

00014004 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14008:	b093      	sub	sp, #76	; 0x4c
   1400a:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   1400c:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1400e:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   14012:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   14014:	ebba 0403 	subs.w	r4, sl, r3
   14018:	4890      	ldr	r0, [pc, #576]	; (1425c <bt_le_adv_start_legacy+0x258>)
   1401a:	bf18      	it	ne
   1401c:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   1401e:	9307      	str	r3, [sp, #28]
   14020:	f018 f971 	bl	2c306 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14024:	0747      	lsls	r7, r0, #29
{
   14026:	460d      	mov	r5, r1
   14028:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1402a:	f140 810d 	bpl.w	14248 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1402e:	4608      	mov	r0, r1
   14030:	f7ff ff9c 	bl	13f6c <valid_adv_param>
   14034:	b928      	cbnz	r0, 14042 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   14036:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1403a:	4620      	mov	r0, r4
   1403c:	b013      	add	sp, #76	; 0x4c
   1403e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   14042:	4628      	mov	r0, r5
   14044:	f018 f93a 	bl	2c2bc <bt_id_adv_random_addr_check>
   14048:	4681      	mov	r9, r0
   1404a:	2800      	cmp	r0, #0
   1404c:	d0f3      	beq.n	14036 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1404e:	f106 0810 	add.w	r8, r6, #16
   14052:	4640      	mov	r0, r8
   14054:	f018 f957 	bl	2c306 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14058:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   1405c:	0600      	lsls	r0, r0, #24
   1405e:	f100 80f6 	bmi.w	1424e <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   14062:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   14066:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1406a:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1406c:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1406e:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14072:	68eb      	ldr	r3, [r5, #12]
   14074:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   14078:	f018 f936 	bl	2c2e8 <get_adv_channel_map>
	if (adv->id != param->id) {
   1407c:	7832      	ldrb	r2, [r6, #0]
   1407e:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14080:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   14084:	429a      	cmp	r2, r3
   14086:	d004      	beq.n	14092 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14088:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1408c:	4873      	ldr	r0, [pc, #460]	; (1425c <bt_le_adv_start_legacy+0x258>)
   1408e:	f018 f93d 	bl	2c30c <atomic_and>
	adv->id = param->id;
   14092:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14094:	4a72      	ldr	r2, [pc, #456]	; (14260 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   14096:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   14098:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1409c:	4630      	mov	r0, r6
   1409e:	4622      	mov	r2, r4
   140a0:	6869      	ldr	r1, [r5, #4]
   140a2:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   140a6:	f7ff fe61 	bl	13d6c <bt_id_set_adv_own_addr>
	if (err) {
   140aa:	4604      	mov	r4, r0
   140ac:	2800      	cmp	r0, #0
   140ae:	d1c4      	bne.n	1403a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   140b0:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   140b4:	f1ba 0f00 	cmp.w	sl, #0
   140b8:	d013      	beq.n	140e2 <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   140ba:	6929      	ldr	r1, [r5, #16]
   140bc:	f018 f931 	bl	2c322 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   140c0:	4628      	mov	r0, r5
   140c2:	f018 f9ba 	bl	2c43a <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   140c6:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   140c8:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   140ca:	07d9      	lsls	r1, r3, #31
   140cc:	d416      	bmi.n	140fc <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   140ce:	059b      	lsls	r3, r3, #22
   140d0:	d403      	bmi.n	140da <bt_le_adv_start_legacy+0xd6>
   140d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   140d4:	b90b      	cbnz	r3, 140da <bt_le_adv_start_legacy+0xd6>
   140d6:	2f02      	cmp	r7, #2
   140d8:	d159      	bne.n	1418e <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   140da:	2302      	movs	r3, #2
   140dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   140e0:	e019      	b.n	14116 <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   140e2:	4960      	ldr	r1, [pc, #384]	; (14264 <bt_le_adv_start_legacy+0x260>)
   140e4:	f018 f91d 	bl	2c322 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   140e8:	4628      	mov	r0, r5
   140ea:	f018 f9a6 	bl	2c43a <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   140ee:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   140f0:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   140f2:	07da      	lsls	r2, r3, #31
   140f4:	d5eb      	bpl.n	140ce <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   140f6:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   140fa:	e00c      	b.n	14116 <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   140fc:	f013 0f10 	tst.w	r3, #16
   14100:	bf0c      	ite	eq
   14102:	2301      	moveq	r3, #1
   14104:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   14106:	6929      	ldr	r1, [r5, #16]
   14108:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1410c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   14110:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   14112:	f018 f906 	bl	2c322 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   14116:	210f      	movs	r1, #15
   14118:	f242 0006 	movw	r0, #8198	; 0x2006
   1411c:	f7fe fb38 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   14120:	4604      	mov	r4, r0
   14122:	2800      	cmp	r0, #0
   14124:	f000 8096 	beq.w	14254 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14128:	220f      	movs	r2, #15
   1412a:	a908      	add	r1, sp, #32
   1412c:	300c      	adds	r0, #12
   1412e:	f019 ff5e 	bl	2dfee <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   14132:	4621      	mov	r1, r4
   14134:	2200      	movs	r2, #0
   14136:	f242 0006 	movw	r0, #8198	; 0x2006
   1413a:	f7fe fb77 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   1413e:	4604      	mov	r4, r0
   14140:	2800      	cmp	r0, #0
   14142:	f47f af7a 	bne.w	1403a <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   14146:	f1ba 0f00 	cmp.w	sl, #0
   1414a:	d026      	beq.n	1419a <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1414c:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1414e:	07dc      	lsls	r4, r3, #31
   14150:	d431      	bmi.n	141b6 <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14152:	2101      	movs	r1, #1
   14154:	4630      	mov	r0, r6
   14156:	f018 f980 	bl	2c45a <bt_le_adv_set_enable_legacy>
	if (err) {
   1415a:	4604      	mov	r4, r0
   1415c:	2800      	cmp	r0, #0
   1415e:	d06b      	beq.n	14238 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   14160:	4b41      	ldr	r3, [pc, #260]	; (14268 <bt_le_adv_start_legacy+0x264>)
   14162:	9311      	str	r3, [sp, #68]	; 0x44
   14164:	2302      	movs	r3, #2
   14166:	9310      	str	r3, [sp, #64]	; 0x40
   14168:	2300      	movs	r3, #0
   1416a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1416e:	483f      	ldr	r0, [pc, #252]	; (1426c <bt_le_adv_start_legacy+0x268>)
   14170:	aa10      	add	r2, sp, #64	; 0x40
   14172:	f7fa fb79 	bl	e868 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14176:	9d07      	ldr	r5, [sp, #28]
   14178:	2d00      	cmp	r5, #0
   1417a:	f43f af5e 	beq.w	1403a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1417e:	4628      	mov	r0, r5
   14180:	2100      	movs	r1, #0
   14182:	f000 fe83 	bl	14e8c <bt_conn_set_state>
			bt_conn_unref(conn);
   14186:	4628      	mov	r0, r5
   14188:	f000 fe48 	bl	14e1c <bt_conn_unref>
   1418c:	e755      	b.n	1403a <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1418e:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   14190:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14194:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14198:	e7bd      	b.n	14116 <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1419a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1419c:	4659      	mov	r1, fp
   1419e:	9300      	str	r3, [sp, #0]
   141a0:	4630      	mov	r0, r6
   141a2:	e9cd 9701 	strd	r9, r7, [sp, #4]
   141a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   141a8:	9a05      	ldr	r2, [sp, #20]
   141aa:	f018 f8d4 	bl	2c356 <le_adv_update.constprop.0>
		if (err) {
   141ae:	4604      	mov	r4, r0
   141b0:	2800      	cmp	r0, #0
   141b2:	d0cb      	beq.n	1414c <bt_le_adv_start_legacy+0x148>
   141b4:	e741      	b.n	1403a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   141b6:	4630      	mov	r0, r6
   141b8:	a907      	add	r1, sp, #28
   141ba:	f7ff fea1 	bl	13f00 <le_adv_start_add_conn>
		if (err) {
   141be:	4604      	mov	r4, r0
   141c0:	2800      	cmp	r0, #0
   141c2:	d0c6      	beq.n	14152 <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   141c4:	f110 0f0c 	cmn.w	r0, #12
   141c8:	f47f af37 	bne.w	1403a <bt_le_adv_start_legacy+0x36>
   141cc:	f1ba 0f00 	cmp.w	sl, #0
   141d0:	f47f af33 	bne.w	1403a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   141d4:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   141d6:	0798      	lsls	r0, r3, #30
   141d8:	f53f af2f 	bmi.w	1403a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   141dc:	686c      	ldr	r4, [r5, #4]
   141de:	f084 0402 	eor.w	r4, r4, #2
   141e2:	f3c4 0440 	ubfx	r4, r4, #1, #1
   141e6:	f004 0201 	and.w	r2, r4, #1
   141ea:	210e      	movs	r1, #14
   141ec:	4640      	mov	r0, r8
   141ee:	f018 f89f 	bl	2c330 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   141f2:	1e7b      	subs	r3, r7, #1
   141f4:	425a      	negs	r2, r3
   141f6:	415a      	adcs	r2, r3
   141f8:	2108      	movs	r1, #8
   141fa:	4640      	mov	r0, r8
   141fc:	f018 f898 	bl	2c330 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   14200:	1eb9      	subs	r1, r7, #2
   14202:	424a      	negs	r2, r1
   14204:	414a      	adcs	r2, r1
   14206:	4640      	mov	r0, r8
   14208:	2109      	movs	r1, #9
   1420a:	f018 f891 	bl	2c330 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1420e:	686a      	ldr	r2, [r5, #4]
   14210:	210a      	movs	r1, #10
   14212:	4640      	mov	r0, r8
   14214:	f002 0201 	and.w	r2, r2, #1
   14218:	f018 f88a 	bl	2c330 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1421c:	464a      	mov	r2, r9
   1421e:	210b      	movs	r1, #11
   14220:	4640      	mov	r0, r8
   14222:	f018 f885 	bl	2c330 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   14226:	686a      	ldr	r2, [r5, #4]
   14228:	210d      	movs	r1, #13
   1422a:	4640      	mov	r0, r8
   1422c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14230:	f018 f87e 	bl	2c330 <atomic_set_bit_to>
	return 0;
   14234:	2400      	movs	r4, #0
   14236:	e700      	b.n	1403a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14238:	9807      	ldr	r0, [sp, #28]
   1423a:	b108      	cbz	r0, 14240 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   1423c:	f000 fdee 	bl	14e1c <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14240:	f1ba 0f00 	cmp.w	sl, #0
   14244:	d1cf      	bne.n	141e6 <bt_le_adv_start_legacy+0x1e2>
   14246:	e7c9      	b.n	141dc <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   14248:	f06f 040a 	mvn.w	r4, #10
   1424c:	e6f5      	b.n	1403a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1424e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14252:	e6f2      	b.n	1403a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   14254:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14258:	e6ef      	b.n	1403a <bt_le_adv_start_legacy+0x36>
   1425a:	bf00      	nop
   1425c:	200080cc 	.word	0x200080cc
   14260:	20008000 	.word	0x20008000
   14264:	00034568 	.word	0x00034568
   14268:	000350bc 	.word	0x000350bc
   1426c:	00031484 	.word	0x00031484

00014270 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14270:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14272:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14274:	9a06      	ldr	r2, [sp, #24]
{
   14276:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14278:	e9cd 3200 	strd	r3, r2, [sp]
   1427c:	462b      	mov	r3, r5
   1427e:	460a      	mov	r2, r1
   14280:	4601      	mov	r1, r0
   14282:	4811      	ldr	r0, [pc, #68]	; (142c8 <bt_le_adv_start+0x58>)
   14284:	f7ff febe 	bl	14004 <bt_le_adv_start_legacy>
   14288:	4621      	mov	r1, r4
   1428a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   1428c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1428e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   14292:	429d      	cmp	r5, r3
   14294:	d102      	bne.n	1429c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   14296:	4630      	mov	r0, r6
   14298:	b002      	add	sp, #8
   1429a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   1429c:	880a      	ldrh	r2, [r1, #0]
   1429e:	4282      	cmp	r2, r0
   142a0:	d104      	bne.n	142ac <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   142a2:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   142a4:	b112      	cbz	r2, 142ac <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   142a6:	7812      	ldrb	r2, [r2, #0]
   142a8:	07d2      	lsls	r2, r2, #31
   142aa:	d402      	bmi.n	142b2 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   142ac:	3301      	adds	r3, #1
   142ae:	3108      	adds	r1, #8
   142b0:	e7ef      	b.n	14292 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   142b2:	4906      	ldr	r1, [pc, #24]	; (142cc <bt_le_adv_start+0x5c>)
   142b4:	4806      	ldr	r0, [pc, #24]	; (142d0 <bt_le_adv_start+0x60>)
   142b6:	f011 fdf7 	bl	25ea8 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   142ba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   142be:	2300      	movs	r3, #0
   142c0:	4803      	ldr	r0, [pc, #12]	; (142d0 <bt_le_adv_start+0x60>)
   142c2:	f011 ff0d 	bl	260e0 <k_work_reschedule>
   142c6:	e7e6      	b.n	14296 <bt_le_adv_start+0x26>
   142c8:	20008018 	.word	0x20008018
   142cc:	00014359 	.word	0x00014359
   142d0:	20008030 	.word	0x20008030

000142d4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   142d4:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   142d6:	481a      	ldr	r0, [pc, #104]	; (14340 <bt_le_adv_stop+0x6c>)
   142d8:	f018 f8e6 	bl	2c4a8 <bt_le_lim_adv_cancel_timeout>
   142dc:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   142e0:	4818      	ldr	r0, [pc, #96]	; (14344 <bt_le_adv_stop+0x70>)
   142e2:	f018 f813 	bl	2c30c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   142e6:	4817      	ldr	r0, [pc, #92]	; (14344 <bt_le_adv_stop+0x70>)
   142e8:	f018 f80d 	bl	2c306 <atomic_get>
   142ec:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   142ee:	061a      	lsls	r2, r3, #24
   142f0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   142f4:	d523      	bpl.n	1433e <bt_le_adv_stop+0x6a>
   142f6:	4813      	ldr	r0, [pc, #76]	; (14344 <bt_le_adv_stop+0x70>)
   142f8:	f018 f805 	bl	2c306 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   142fc:	0543      	lsls	r3, r0, #21
   142fe:	d514      	bpl.n	1432a <bt_le_adv_stop+0x56>
   14300:	2207      	movs	r2, #7
   14302:	4911      	ldr	r1, [pc, #68]	; (14348 <bt_le_adv_stop+0x74>)
   14304:	4811      	ldr	r0, [pc, #68]	; (1434c <bt_le_adv_stop+0x78>)
   14306:	f01c f90e 	bl	30526 <memcmp>
   1430a:	4b11      	ldr	r3, [pc, #68]	; (14350 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1430c:	b998      	cbnz	r0, 14336 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1430e:	2204      	movs	r2, #4
   14310:	4910      	ldr	r1, [pc, #64]	; (14354 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   14312:	7e18      	ldrb	r0, [r3, #24]
   14314:	f001 f8a8 	bl	15468 <bt_conn_lookup_state_le>
   14318:	4604      	mov	r4, r0
	if (conn) {
   1431a:	b130      	cbz	r0, 1432a <bt_le_adv_stop+0x56>
		conn->err = status;
   1431c:	2100      	movs	r1, #0
   1431e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14320:	f000 fdb4 	bl	14e8c <bt_conn_set_state>
		bt_conn_unref(conn);
   14324:	4620      	mov	r0, r4
   14326:	f000 fd79 	bl	14e1c <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1432a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1432e:	2100      	movs	r1, #0
   14330:	4803      	ldr	r0, [pc, #12]	; (14340 <bt_le_adv_stop+0x6c>)
   14332:	f018 b892 	b.w	2c45a <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   14336:	2205      	movs	r2, #5
   14338:	f103 0121 	add.w	r1, r3, #33	; 0x21
   1433c:	e7e9      	b.n	14312 <bt_le_adv_stop+0x3e>
}
   1433e:	bd10      	pop	{r4, pc}
   14340:	20008018 	.word	0x20008018
   14344:	20008028 	.word	0x20008028
   14348:	00034568 	.word	0x00034568
   1434c:	20008021 	.word	0x20008021
   14350:	20008000 	.word	0x20008000
   14354:	00034561 	.word	0x00034561

00014358 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   14358:	b580      	push	{r7, lr}
   1435a:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1435c:	f7ff ffba 	bl	142d4 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   14360:	b088      	sub	sp, #32
   14362:	466a      	mov	r2, sp
   14364:	4b06      	ldr	r3, [pc, #24]	; (14380 <adv_timeout+0x28>)
   14366:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1436a:	2303      	movs	r3, #3
   1436c:	f842 3f10 	str.w	r3, [r2, #16]!
   14370:	2300      	movs	r3, #0
   14372:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14376:	4803      	ldr	r0, [pc, #12]	; (14384 <adv_timeout+0x2c>)
   14378:	f7fa fa76 	bl	e868 <z_impl_z_log_msg_static_create>
}
   1437c:	46bd      	mov	sp, r7
   1437e:	bd80      	pop	{r7, pc}
   14380:	000350d7 	.word	0x000350d7
   14384:	00031484 	.word	0x00031484

00014388 <bt_le_adv_resume>:
{
   14388:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1438a:	4c1e      	ldr	r4, [pc, #120]	; (14404 <bt_le_adv_resume+0x7c>)
   1438c:	4620      	mov	r0, r4
   1438e:	f017 ffba 	bl	2c306 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   14392:	0440      	lsls	r0, r0, #17
   14394:	d534      	bpl.n	14400 <bt_le_adv_resume+0x78>
   14396:	4620      	mov	r0, r4
   14398:	f017 ffb5 	bl	2c306 <atomic_get>
   1439c:	0601      	lsls	r1, r0, #24
   1439e:	d42f      	bmi.n	14400 <bt_le_adv_resume+0x78>
   143a0:	4620      	mov	r0, r4
   143a2:	f017 ffb0 	bl	2c306 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   143a6:	0542      	lsls	r2, r0, #21
   143a8:	d52a      	bpl.n	14400 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   143aa:	a901      	add	r1, sp, #4
   143ac:	f1a4 0010 	sub.w	r0, r4, #16
   143b0:	f7ff fda6 	bl	13f00 <le_adv_start_add_conn>
	if (err) {
   143b4:	4605      	mov	r5, r0
   143b6:	bb18      	cbnz	r0, 14400 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   143b8:	2101      	movs	r1, #1
   143ba:	f1a4 0010 	sub.w	r0, r4, #16
   143be:	f018 f84c 	bl	2c45a <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   143c2:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   143c4:	b928      	cbnz	r0, 143d2 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   143c6:	4630      	mov	r0, r6
}
   143c8:	b002      	add	sp, #8
   143ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   143ce:	f000 bd25 	b.w	14e1c <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   143d2:	4629      	mov	r1, r5
   143d4:	4630      	mov	r0, r6
   143d6:	f000 fd59 	bl	14e8c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   143da:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   143de:	4620      	mov	r0, r4
   143e0:	f017 ff94 	bl	2c30c <atomic_and>
   143e4:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   143e6:	4630      	mov	r0, r6
   143e8:	f000 fd18 	bl	14e1c <bt_conn_unref>
	if (persist_paused) {
   143ec:	046b      	lsls	r3, r5, #17
   143ee:	d507      	bpl.n	14400 <bt_le_adv_resume+0x78>
   143f0:	e8d4 3fef 	ldaex	r3, [r4]
   143f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   143f8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   143fc:	2a00      	cmp	r2, #0
   143fe:	d1f7      	bne.n	143f0 <bt_le_adv_resume+0x68>
}
   14400:	b002      	add	sp, #8
   14402:	bd70      	pop	{r4, r5, r6, pc}
   14404:	20008028 	.word	0x20008028

00014408 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14408:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1440a:	b508      	push	{r3, lr}
   1440c:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14410:	d910      	bls.n	14434 <sys_memcpy_swap.constprop.0+0x2c>
   14412:	4298      	cmp	r0, r3
   14414:	d213      	bcs.n	1443e <sys_memcpy_swap.constprop.0+0x36>
   14416:	490e      	ldr	r1, [pc, #56]	; (14450 <sys_memcpy_swap.constprop.0+0x48>)
   14418:	f240 2315 	movw	r3, #533	; 0x215
   1441c:	4a0d      	ldr	r2, [pc, #52]	; (14454 <sys_memcpy_swap.constprop.0+0x4c>)
   1441e:	480e      	ldr	r0, [pc, #56]	; (14458 <sys_memcpy_swap.constprop.0+0x50>)
   14420:	f016 f937 	bl	2a692 <assert_print>
   14424:	480d      	ldr	r0, [pc, #52]	; (1445c <sys_memcpy_swap.constprop.0+0x54>)
   14426:	f016 f934 	bl	2a692 <assert_print>
   1442a:	f240 2115 	movw	r1, #533	; 0x215
   1442e:	4809      	ldr	r0, [pc, #36]	; (14454 <sys_memcpy_swap.constprop.0+0x4c>)
   14430:	f016 f928 	bl	2a684 <assert_post_action>
   14434:	d0ef      	beq.n	14416 <sys_memcpy_swap.constprop.0+0xe>
   14436:	f100 0210 	add.w	r2, r0, #16
   1443a:	4291      	cmp	r1, r2
   1443c:	e7ea      	b.n	14414 <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   1443e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   14440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   14444:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   14446:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1444a:	d1f9      	bne.n	14440 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   1444c:	bd08      	pop	{r3, pc}
   1444e:	bf00      	nop
   14450:	0003512f 	.word	0x0003512f
   14454:	000350fd 	.word	0x000350fd
   14458:	00032629 	.word	0x00032629
   1445c:	00035186 	.word	0x00035186

00014460 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   14460:	b530      	push	{r4, r5, lr}
   14462:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   14464:	2120      	movs	r1, #32
   14466:	a80a      	add	r0, sp, #40	; 0x28
   14468:	f7fe fa84 	bl	12974 <bt_hci_le_rand>
	if (ret) {
   1446c:	4604      	mov	r4, r0
   1446e:	bb18      	cbnz	r0, 144b8 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   14470:	f01b ff50 	bl	30314 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   14474:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   14478:	fba0 2305 	umull	r2, r3, r0, r5
   1447c:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   14480:	2308      	movs	r3, #8
   14482:	0bd2      	lsrs	r2, r2, #15
   14484:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   14488:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1448a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1448e:	9300      	str	r3, [sp, #0]
   14490:	2220      	movs	r2, #32
   14492:	480b      	ldr	r0, [pc, #44]	; (144c0 <prng_reseed.constprop.0+0x60>)
   14494:	446b      	add	r3, sp
   14496:	a90a      	add	r1, sp, #40	; 0x28
   14498:	f017 fbd7 	bl	2bc4a <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   1449c:	b960      	cbnz	r0, 144b8 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
   1449e:	4b09      	ldr	r3, [pc, #36]	; (144c4 <prng_reseed.constprop.0+0x64>)
   144a0:	9309      	str	r3, [sp, #36]	; 0x24
   144a2:	2302      	movs	r3, #2
   144a4:	9308      	str	r3, [sp, #32]
   144a6:	4623      	mov	r3, r4
   144a8:	f06f 0404 	mvn.w	r4, #4
   144ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144b0:	4805      	ldr	r0, [pc, #20]	; (144c8 <prng_reseed.constprop.0+0x68>)
   144b2:	aa08      	add	r2, sp, #32
   144b4:	f7fa f9d8 	bl	e868 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   144b8:	4620      	mov	r0, r4
   144ba:	b013      	add	sp, #76	; 0x4c
   144bc:	bd30      	pop	{r4, r5, pc}
   144be:	bf00      	nop
   144c0:	20009c70 	.word	0x20009c70
   144c4:	000351b8 	.word	0x000351b8
   144c8:	000314c4 	.word	0x000314c4

000144cc <prng_init>:

int prng_init(void)
{
   144cc:	b510      	push	{r4, lr}
   144ce:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   144d0:	2108      	movs	r1, #8
   144d2:	4668      	mov	r0, sp
   144d4:	f7fe fa4e 	bl	12974 <bt_hci_le_rand>
	if (ret) {
   144d8:	4604      	mov	r4, r0
   144da:	b990      	cbnz	r0, 14502 <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   144dc:	2208      	movs	r2, #8
   144de:	4669      	mov	r1, sp
   144e0:	480b      	ldr	r0, [pc, #44]	; (14510 <prng_init+0x44>)
   144e2:	f017 fb92 	bl	2bc0a <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   144e6:	b978      	cbnz	r0, 14508 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
   144e8:	4b0a      	ldr	r3, [pc, #40]	; (14514 <prng_init+0x48>)
   144ea:	9307      	str	r3, [sp, #28]
   144ec:	2302      	movs	r3, #2
   144ee:	9306      	str	r3, [sp, #24]
   144f0:	4623      	mov	r3, r4
		return -EIO;
   144f2:	f06f 0404 	mvn.w	r4, #4
   144f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144fa:	4807      	ldr	r0, [pc, #28]	; (14518 <prng_init+0x4c>)
   144fc:	aa06      	add	r2, sp, #24
   144fe:	f7fa f9b3 	bl	e868 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   14502:	4620      	mov	r0, r4
   14504:	b008      	add	sp, #32
   14506:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   14508:	f7ff ffaa 	bl	14460 <prng_reseed.constprop.0>
   1450c:	4604      	mov	r4, r0
   1450e:	e7f8      	b.n	14502 <prng_init+0x36>
   14510:	20009c70 	.word	0x20009c70
   14514:	000351cf 	.word	0x000351cf
   14518:	000314c4 	.word	0x000314c4

0001451c <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   1451c:	b538      	push	{r3, r4, r5, lr}
   1451e:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   14520:	4604      	mov	r4, r0
   14522:	b198      	cbz	r0, 1454c <bt_rand+0x30>
   14524:	b191      	cbz	r1, 1454c <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   14526:	4a0b      	ldr	r2, [pc, #44]	; (14554 <bt_rand+0x38>)
   14528:	f017 fba8 	bl	2bc7c <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1452c:	1c43      	adds	r3, r0, #1
   1452e:	d107      	bne.n	14540 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   14530:	f7ff ff96 	bl	14460 <prng_reseed.constprop.0>
		if (ret) {
   14534:	b948      	cbnz	r0, 1454a <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   14536:	4629      	mov	r1, r5
   14538:	4620      	mov	r0, r4
   1453a:	4a06      	ldr	r2, [pc, #24]	; (14554 <bt_rand+0x38>)
   1453c:	f017 fb9e 	bl	2bc7c <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   14540:	2801      	cmp	r0, #1
   14542:	bf0c      	ite	eq
   14544:	2000      	moveq	r0, #0
   14546:	f06f 0004 	mvnne.w	r0, #4
}
   1454a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1454c:	f06f 0015 	mvn.w	r0, #21
   14550:	e7fb      	b.n	1454a <bt_rand+0x2e>
   14552:	bf00      	nop
   14554:	20009c70 	.word	0x20009c70

00014558 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   14558:	2240      	movs	r2, #64	; 0x40
{
   1455a:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1455c:	4903      	ldr	r1, [pc, #12]	; (1456c <bt_pub_key_is_debug+0x14>)
   1455e:	f01b ffe2 	bl	30526 <memcmp>
}
   14562:	fab0 f080 	clz	r0, r0
   14566:	0940      	lsrs	r0, r0, #5
   14568:	bd08      	pop	{r3, pc}
   1456a:	bf00      	nop
   1456c:	0003527f 	.word	0x0003527f

00014570 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   14570:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   14572:	4b3d      	ldr	r3, [pc, #244]	; (14668 <bt_pub_key_gen+0xf8>)
{
   14574:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   14576:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1457a:	f003 0306 	and.w	r3, r3, #6
   1457e:	2b06      	cmp	r3, #6
   14580:	d00f      	beq.n	145a2 <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   14582:	4b3a      	ldr	r3, [pc, #232]	; (1466c <bt_pub_key_gen+0xfc>)
   14584:	9305      	str	r3, [sp, #20]
   14586:	2302      	movs	r3, #2
   14588:	9304      	str	r3, [sp, #16]
		return -ENOTSUP;
   1458a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1458e:	2300      	movs	r3, #0
   14590:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14594:	4836      	ldr	r0, [pc, #216]	; (14670 <bt_pub_key_gen+0x100>)
   14596:	aa04      	add	r2, sp, #16
   14598:	f7fa f966 	bl	e868 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   1459c:	4628      	mov	r0, r5
   1459e:	b007      	add	sp, #28
   145a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   145a2:	2800      	cmp	r0, #0
   145a4:	d05d      	beq.n	14662 <bt_pub_key_gen+0xf2>
	return list->head;
   145a6:	4e33      	ldr	r6, [pc, #204]	; (14674 <bt_pub_key_gen+0x104>)
   145a8:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   145aa:	b1a2      	cbz	r2, 145d6 <bt_pub_key_gen+0x66>
   145ac:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   145ae:	4283      	cmp	r3, r0
   145b0:	d10d      	bne.n	145ce <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   145b2:	4b31      	ldr	r3, [pc, #196]	; (14678 <bt_pub_key_gen+0x108>)
   145b4:	9305      	str	r3, [sp, #20]
   145b6:	2302      	movs	r3, #2
   145b8:	9304      	str	r3, [sp, #16]
   145ba:	2300      	movs	r3, #0
   145bc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   145c0:	482b      	ldr	r0, [pc, #172]	; (14670 <bt_pub_key_gen+0x100>)
   145c2:	aa04      	add	r2, sp, #16
   145c4:	f7fa f950 	bl	e868 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   145c8:	f06f 0577 	mvn.w	r5, #119	; 0x77
   145cc:	e7e6      	b.n	1459c <bt_pub_key_gen+0x2c>
	return node->next;
   145ce:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   145d0:	b10b      	cbz	r3, 145d6 <bt_pub_key_gen+0x66>
   145d2:	3b04      	subs	r3, #4
   145d4:	e7eb      	b.n	145ae <bt_pub_key_gen+0x3e>
	parent->next = child;
   145d6:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   145d8:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   145da:	1d03      	adds	r3, r0, #4
	list->head = node;
   145dc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   145de:	b902      	cbnz	r2, 145e2 <bt_pub_key_gen+0x72>
	list->tail = node;
   145e0:	6073      	str	r3, [r6, #4]
   145e2:	4c26      	ldr	r4, [pc, #152]	; (1467c <bt_pub_key_gen+0x10c>)
   145e4:	e8d4 7fef 	ldaex	r7, [r4]
   145e8:	f047 0320 	orr.w	r3, r7, #32
   145ec:	e8c4 3fe2 	stlex	r2, r3, [r4]
   145f0:	2a00      	cmp	r2, #0
   145f2:	d1f7      	bne.n	145e4 <bt_pub_key_gen+0x74>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   145f4:	f017 0720 	ands.w	r7, r7, #32
   145f8:	d001      	beq.n	145fe <bt_pub_key_gen+0x8e>
	return 0;
   145fa:	2500      	movs	r5, #0
   145fc:	e7ce      	b.n	1459c <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145fe:	e8d4 3fef 	ldaex	r3, [r4]
   14602:	f023 0310 	bic.w	r3, r3, #16
   14606:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1460a:	2a00      	cmp	r2, #0
   1460c:	d1f7      	bne.n	145fe <bt_pub_key_gen+0x8e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1460e:	463a      	mov	r2, r7
   14610:	4639      	mov	r1, r7
   14612:	f242 0025 	movw	r0, #8229	; 0x2025
   14616:	f7fe f909 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   1461a:	4605      	mov	r5, r0
   1461c:	2800      	cmp	r0, #0
   1461e:	d0ec      	beq.n	145fa <bt_pub_key_gen+0x8a>
		LOG_ERR("Sending LE P256 Public Key command failed");
   14620:	4b17      	ldr	r3, [pc, #92]	; (14680 <bt_pub_key_gen+0x110>)
   14622:	9305      	str	r3, [sp, #20]
   14624:	2302      	movs	r3, #2
   14626:	9304      	str	r3, [sp, #16]
   14628:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1462c:	463b      	mov	r3, r7
   1462e:	4810      	ldr	r0, [pc, #64]	; (14670 <bt_pub_key_gen+0x100>)
   14630:	aa04      	add	r2, sp, #16
   14632:	f7fa f919 	bl	e868 <z_impl_z_log_msg_static_create>
   14636:	e8d4 3fef 	ldaex	r3, [r4]
   1463a:	f023 0320 	bic.w	r3, r3, #32
   1463e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14642:	2a00      	cmp	r2, #0
   14644:	d1f7      	bne.n	14636 <bt_pub_key_gen+0xc6>
	return list->head;
   14646:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14648:	b13c      	cbz	r4, 1465a <bt_pub_key_gen+0xea>
			if (cb->func) {
   1464a:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1464e:	3c04      	subs	r4, #4
			if (cb->func) {
   14650:	b10b      	cbz	r3, 14656 <bt_pub_key_gen+0xe6>
				cb->func(NULL);
   14652:	2000      	movs	r0, #0
   14654:	4798      	blx	r3
	return node->next;
   14656:	6864      	ldr	r4, [r4, #4]
   14658:	e7f6      	b.n	14648 <bt_pub_key_gen+0xd8>
	list->head = NULL;
   1465a:	2300      	movs	r3, #0
	list->tail = NULL;
   1465c:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   14660:	e79c      	b.n	1459c <bt_pub_key_gen+0x2c>
		return -EINVAL;
   14662:	f06f 0515 	mvn.w	r5, #21
   14666:	e799      	b.n	1459c <bt_pub_key_gen+0x2c>
   14668:	20008000 	.word	0x20008000
   1466c:	000351f8 	.word	0x000351f8
   14670:	000314a4 	.word	0x000314a4
   14674:	200215cc 	.word	0x200215cc
   14678:	00035217 	.word	0x00035217
   1467c:	200080cc 	.word	0x200080cc
   14680:	00035233 	.word	0x00035233

00014684 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14684:	4b04      	ldr	r3, [pc, #16]	; (14698 <bt_pub_key_get+0x14>)
   14686:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   1468a:	f013 0f10 	tst.w	r3, #16
}
   1468e:	4803      	ldr	r0, [pc, #12]	; (1469c <bt_pub_key_get+0x18>)
   14690:	bf08      	it	eq
   14692:	2000      	moveq	r0, #0
   14694:	4770      	bx	lr
   14696:	bf00      	nop
   14698:	200080cc 	.word	0x200080cc
   1469c:	200223b7 	.word	0x200223b7

000146a0 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   146a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   146a2:	4e27      	ldr	r6, [pc, #156]	; (14740 <bt_dh_key_gen+0xa0>)
{
   146a4:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   146a6:	6833      	ldr	r3, [r6, #0]
{
   146a8:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
   146aa:	428b      	cmp	r3, r1
   146ac:	d041      	beq.n	14732 <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   146ae:	b123      	cbz	r3, 146ba <bt_dh_key_gen+0x1a>
		return -EBUSY;
   146b0:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   146b4:	4620      	mov	r0, r4
   146b6:	46bd      	mov	sp, r7
   146b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   146ba:	4b22      	ldr	r3, [pc, #136]	; (14744 <bt_dh_key_gen+0xa4>)
   146bc:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   146c0:	0692      	lsls	r2, r2, #26
   146c2:	d4f5      	bmi.n	146b0 <bt_dh_key_gen+0x10>
   146c4:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   146c8:	06db      	lsls	r3, r3, #27
   146ca:	d535      	bpl.n	14738 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
   146cc:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   146ce:	f242 0026 	movw	r0, #8230	; 0x2026
   146d2:	2140      	movs	r1, #64	; 0x40
   146d4:	f7fe f85c 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   146d8:	4605      	mov	r5, r0
   146da:	b338      	cbz	r0, 1472c <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
   146dc:	2140      	movs	r1, #64	; 0x40
   146de:	300c      	adds	r0, #12
   146e0:	f007 f860 	bl	1b7a4 <net_buf_simple_add>
   146e4:	4623      	mov	r3, r4
   146e6:	f104 0240 	add.w	r2, r4, #64	; 0x40
   146ea:	f853 1b04 	ldr.w	r1, [r3], #4
   146ee:	4293      	cmp	r3, r2
   146f0:	f840 1b04 	str.w	r1, [r0], #4
   146f4:	d1f9      	bne.n	146ea <bt_dh_key_gen+0x4a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   146f6:	2200      	movs	r2, #0
   146f8:	4629      	mov	r1, r5
   146fa:	f242 0026 	movw	r0, #8230	; 0x2026
   146fe:	f7fe f895 	bl	1282c <bt_hci_cmd_send_sync>
	if (err) {
   14702:	4604      	mov	r4, r0
   14704:	2800      	cmp	r0, #0
   14706:	d0d5      	beq.n	146b4 <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   14708:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1470a:	466d      	mov	r5, sp
   1470c:	b088      	sub	sp, #32
   1470e:	466a      	mov	r2, sp
		dh_key_cb = NULL;
   14710:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   14712:	490d      	ldr	r1, [pc, #52]	; (14748 <bt_dh_key_gen+0xa8>)
   14714:	e9c2 1405 	strd	r1, r4, [r2, #20]
   14718:	2103      	movs	r1, #3
   1471a:	f842 1f10 	str.w	r1, [r2, #16]!
   1471e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14722:	480a      	ldr	r0, [pc, #40]	; (1474c <bt_dh_key_gen+0xac>)
   14724:	f7fa f8a0 	bl	e868 <z_impl_z_log_msg_static_create>
   14728:	46ad      	mov	sp, r5
		return err;
   1472a:	e7c3      	b.n	146b4 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   1472c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14730:	e7ea      	b.n	14708 <bt_dh_key_gen+0x68>
		return -EALREADY;
   14732:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14736:	e7bd      	b.n	146b4 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   14738:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1473c:	e7ba      	b.n	146b4 <bt_dh_key_gen+0x14>
   1473e:	bf00      	nop
   14740:	200215c8 	.word	0x200215c8
   14744:	200080cc 	.word	0x200080cc
   14748:	0003525d 	.word	0x0003525d
   1474c:	000314a4 	.word	0x000314a4

00014750 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   14750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14752:	4b19      	ldr	r3, [pc, #100]	; (147b8 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   14754:	68c5      	ldr	r5, [r0, #12]
   14756:	e8d3 2fef 	ldaex	r2, [r3]
   1475a:	f022 0220 	bic.w	r2, r2, #32
   1475e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14762:	2900      	cmp	r1, #0
   14764:	d1f7      	bne.n	14756 <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   14766:	782a      	ldrb	r2, [r5, #0]
   14768:	b98a      	cbnz	r2, 1478e <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1476a:	4914      	ldr	r1, [pc, #80]	; (147bc <bt_hci_evt_le_pkey_complete+0x6c>)
   1476c:	1c6a      	adds	r2, r5, #1
   1476e:	f105 0041 	add.w	r0, r5, #65	; 0x41
   14772:	f852 4b04 	ldr.w	r4, [r2], #4
   14776:	4282      	cmp	r2, r0
   14778:	f841 4b04 	str.w	r4, [r1], #4
   1477c:	d1f9      	bne.n	14772 <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1477e:	e8d3 1fef 	ldaex	r1, [r3]
   14782:	f041 0110 	orr.w	r1, r1, #16
   14786:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1478a:	2a00      	cmp	r2, #0
   1478c:	d1f7      	bne.n	1477e <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   1478e:	4e0c      	ldr	r6, [pc, #48]	; (147c0 <bt_hci_evt_le_pkey_complete+0x70>)
   14790:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14792:	b16c      	cbz	r4, 147b0 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   14794:	4f09      	ldr	r7, [pc, #36]	; (147bc <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14796:	3c04      	subs	r4, #4
		if (cb->func) {
   14798:	6823      	ldr	r3, [r4, #0]
   1479a:	b12b      	cbz	r3, 147a8 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   1479c:	782a      	ldrb	r2, [r5, #0]
   1479e:	2a00      	cmp	r2, #0
   147a0:	bf0c      	ite	eq
   147a2:	4638      	moveq	r0, r7
   147a4:	2000      	movne	r0, #0
   147a6:	4798      	blx	r3
	return node->next;
   147a8:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147aa:	b10c      	cbz	r4, 147b0 <bt_hci_evt_le_pkey_complete+0x60>
   147ac:	3c04      	subs	r4, #4
   147ae:	e7f3      	b.n	14798 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   147b0:	2300      	movs	r3, #0
	list->tail = NULL;
   147b2:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   147b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   147b8:	200080cc 	.word	0x200080cc
   147bc:	200223b7 	.word	0x200223b7
   147c0:	200215cc 	.word	0x200215cc

000147c4 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   147c4:	4905      	ldr	r1, [pc, #20]	; (147dc <bt_hci_evt_le_dhkey_complete+0x18>)
   147c6:	680b      	ldr	r3, [r1, #0]
   147c8:	b133      	cbz	r3, 147d8 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   147ca:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   147cc:	2000      	movs	r0, #0
   147ce:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   147d0:	7811      	ldrb	r1, [r2, #0]
   147d2:	b901      	cbnz	r1, 147d6 <bt_hci_evt_le_dhkey_complete+0x12>
   147d4:	1c50      	adds	r0, r2, #1
   147d6:	4718      	bx	r3
	}
}
   147d8:	4770      	bx	lr
   147da:	bf00      	nop
   147dc:	200215c8 	.word	0x200215c8

000147e0 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   147e0:	b570      	push	{r4, r5, r6, lr}
   147e2:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   147e4:	4b12      	ldr	r3, [pc, #72]	; (14830 <notify_connected+0x50>)
   147e6:	681d      	ldr	r5, [r3, #0]
   147e8:	b995      	cbnz	r5, 14810 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   147ea:	4d12      	ldr	r5, [pc, #72]	; (14834 <notify_connected+0x54>)
   147ec:	4e12      	ldr	r6, [pc, #72]	; (14838 <notify_connected+0x58>)
   147ee:	42b5      	cmp	r5, r6
   147f0:	d91c      	bls.n	1482c <notify_connected+0x4c>
   147f2:	4912      	ldr	r1, [pc, #72]	; (1483c <notify_connected+0x5c>)
   147f4:	f240 535b 	movw	r3, #1371	; 0x55b
   147f8:	4a11      	ldr	r2, [pc, #68]	; (14840 <notify_connected+0x60>)
   147fa:	4812      	ldr	r0, [pc, #72]	; (14844 <notify_connected+0x64>)
   147fc:	f015 ff49 	bl	2a692 <assert_print>
   14800:	4811      	ldr	r0, [pc, #68]	; (14848 <notify_connected+0x68>)
   14802:	f015 ff46 	bl	2a692 <assert_print>
   14806:	f240 515b 	movw	r1, #1371	; 0x55b
   1480a:	480d      	ldr	r0, [pc, #52]	; (14840 <notify_connected+0x60>)
   1480c:	f015 ff3a 	bl	2a684 <assert_post_action>
		if (cb->connected) {
   14810:	682b      	ldr	r3, [r5, #0]
   14812:	b113      	cbz	r3, 1481a <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   14814:	4620      	mov	r0, r4
   14816:	7b21      	ldrb	r1, [r4, #12]
   14818:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1481a:	69ad      	ldr	r5, [r5, #24]
   1481c:	e7e4      	b.n	147e8 <notify_connected+0x8>
		if (cb->connected) {
   1481e:	682b      	ldr	r3, [r5, #0]
   14820:	b113      	cbz	r3, 14828 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   14822:	4620      	mov	r0, r4
   14824:	7b21      	ldrb	r1, [r4, #12]
   14826:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14828:	351c      	adds	r5, #28
   1482a:	e7e0      	b.n	147ee <notify_connected+0xe>
   1482c:	d3f7      	bcc.n	1481e <notify_connected+0x3e>
		}
	}
}
   1482e:	bd70      	pop	{r4, r5, r6, pc}
   14830:	200215f4 	.word	0x200215f4
   14834:	00031420 	.word	0x00031420
   14838:	0003143c 	.word	0x0003143c
   1483c:	000352f6 	.word	0x000352f6
   14840:	000352c6 	.word	0x000352c6
   14844:	00032629 	.word	0x00032629
   14848:	0003368c 	.word	0x0003368c

0001484c <tx_notify>:
{
   1484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14850:	4604      	mov	r4, r0
	tx->cb = NULL;
   14852:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   14856:	4f14      	ldr	r7, [pc, #80]	; (148a8 <tx_notify+0x5c>)
	__asm__ volatile(
   14858:	f04f 0220 	mov.w	r2, #32
   1485c:	f3ef 8311 	mrs	r3, BASEPRI
   14860:	f382 8812 	msr	BASEPRI_MAX, r2
   14864:	f3bf 8f6f 	isb	sy
	return list->head;
   14868:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1486a:	b929      	cbnz	r1, 14878 <tx_notify+0x2c>
	__asm__ volatile(
   1486c:	f383 8811 	msr	BASEPRI, r3
   14870:	f3bf 8f6f 	isb	sy
}
   14874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14878:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1487a:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1487c:	4281      	cmp	r1, r0
	list->tail = node;
   1487e:	bf08      	it	eq
   14880:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   14882:	6222      	str	r2, [r4, #32]
   14884:	f383 8811 	msr	BASEPRI, r3
   14888:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1488c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   14890:	4638      	mov	r0, r7
	tx->user_data = NULL;
   14892:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   14896:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1489a:	f01b fc7d 	bl	30198 <k_queue_append>
		cb(conn, user_data, 0);
   1489e:	2200      	movs	r2, #0
   148a0:	4631      	mov	r1, r6
   148a2:	4620      	mov	r0, r4
   148a4:	47a8      	blx	r5
	while (1) {
   148a6:	e7d7      	b.n	14858 <tx_notify+0xc>
   148a8:	20008cb8 	.word	0x20008cb8

000148ac <conn_tx_destroy>:
{
   148ac:	b570      	push	{r4, r5, r6, lr}
   148ae:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   148b0:	b949      	cbnz	r1, 148c6 <conn_tx_destroy+0x1a>
   148b2:	490d      	ldr	r1, [pc, #52]	; (148e8 <conn_tx_destroy+0x3c>)
   148b4:	480d      	ldr	r0, [pc, #52]	; (148ec <conn_tx_destroy+0x40>)
   148b6:	2339      	movs	r3, #57	; 0x39
   148b8:	4a0d      	ldr	r2, [pc, #52]	; (148f0 <conn_tx_destroy+0x44>)
   148ba:	f015 feea 	bl	2a692 <assert_print>
   148be:	2139      	movs	r1, #57	; 0x39
   148c0:	480b      	ldr	r0, [pc, #44]	; (148f0 <conn_tx_destroy+0x44>)
   148c2:	f015 fedf 	bl	2a684 <assert_post_action>
	tx->cb = NULL;
   148c6:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   148c8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   148cc:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   148ce:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   148d2:	4808      	ldr	r0, [pc, #32]	; (148f4 <conn_tx_destroy+0x48>)
   148d4:	f01b fc60 	bl	30198 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   148d8:	4631      	mov	r1, r6
   148da:	4620      	mov	r0, r4
   148dc:	462b      	mov	r3, r5
}
   148de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   148e2:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   148e6:	4718      	bx	r3
   148e8:	00035311 	.word	0x00035311
   148ec:	00032629 	.word	0x00032629
   148f0:	000352c6 	.word	0x000352c6
   148f4:	20008cb8 	.word	0x20008cb8

000148f8 <send_frag>:
{
   148f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   148fc:	4604      	mov	r4, r0
   148fe:	460e      	mov	r6, r1
   14900:	4692      	mov	sl, r2
   14902:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   14904:	698d      	ldr	r5, [r1, #24]
{
   14906:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   14908:	f04f 33ff 	mov.w	r3, #4294967295
   1490c:	f04f 32ff 	mov.w	r2, #4294967295
   14910:	484c      	ldr	r0, [pc, #304]	; (14a44 <send_frag+0x14c>)
   14912:	f010 fe89 	bl	25628 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   14916:	7b63      	ldrb	r3, [r4, #13]
   14918:	2b07      	cmp	r3, #7
   1491a:	f040 8086 	bne.w	14a2a <send_frag+0x132>
	__asm__ volatile(
   1491e:	f04f 0320 	mov.w	r3, #32
   14922:	f3ef 8211 	mrs	r2, BASEPRI
   14926:	f383 8812 	msr	BASEPRI_MAX, r3
   1492a:	f3bf 8f6f 	isb	sy
	if (tx) {
   1492e:	2d00      	cmp	r5, #0
   14930:	d04e      	beq.n	149d0 <send_frag+0xd8>
	parent->next = child;
   14932:	2300      	movs	r3, #0
   14934:	602b      	str	r3, [r5, #0]
	return list->tail;
   14936:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   14938:	2b00      	cmp	r3, #0
   1493a:	d146      	bne.n	149ca <send_frag+0xd2>
	list->head = node;
   1493c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14940:	f382 8811 	msr	BASEPRI, r2
   14944:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14948:	2104      	movs	r1, #4
   1494a:	f106 000c 	add.w	r0, r6, #12
   1494e:	f006 fecd 	bl	1b6ec <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14952:	8823      	ldrh	r3, [r4, #0]
   14954:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   14958:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   1495c:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14960:	8a33      	ldrh	r3, [r6, #16]
   14962:	3b04      	subs	r3, #4
   14964:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14966:	2302      	movs	r3, #2
	return bt_send(buf);
   14968:	4630      	mov	r0, r6
   1496a:	7633      	strb	r3, [r6, #24]
   1496c:	f7fe fa8c 	bl	12e88 <bt_send>
	if (err) {
   14970:	2800      	cmp	r0, #0
   14972:	d064      	beq.n	14a3e <send_frag+0x146>
		LOG_ERR("Unable to send to driver (err %d)", err);
   14974:	46ea      	mov	sl, sp
   14976:	b088      	sub	sp, #32
   14978:	466a      	mov	r2, sp
   1497a:	4b33      	ldr	r3, [pc, #204]	; (14a48 <send_frag+0x150>)
   1497c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14980:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14984:	2303      	movs	r3, #3
   14986:	4831      	ldr	r0, [pc, #196]	; (14a4c <send_frag+0x154>)
   14988:	f842 3f10 	str.w	r3, [r2, #16]!
   1498c:	f017 fde1 	bl	2c552 <z_log_msg_static_create.constprop.0>
   14990:	46d5      	mov	sp, sl
	__asm__ volatile(
   14992:	f04f 0320 	mov.w	r3, #32
   14996:	f3ef 8a11 	mrs	sl, BASEPRI
   1499a:	f383 8812 	msr	BASEPRI_MAX, r3
   1499e:	f3bf 8f6f 	isb	sy
		if (tx) {
   149a2:	b315      	cbz	r5, 149ea <send_frag+0xf2>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   149a4:	4629      	mov	r1, r5
   149a6:	f104 0014 	add.w	r0, r4, #20
   149aa:	f017 fdac 	bl	2c506 <sys_slist_find_and_remove>
	__asm__ volatile(
   149ae:	f38a 8811 	msr	BASEPRI, sl
   149b2:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   149b6:	4823      	ldr	r0, [pc, #140]	; (14a44 <send_frag+0x14c>)
   149b8:	f010 fdf2 	bl	255a0 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   149bc:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   149be:	4629      	mov	r1, r5
   149c0:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   149c2:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   149c4:	f7ff ff72 	bl	148ac <conn_tx_destroy>
   149c8:	e028      	b.n	14a1c <send_frag+0x124>
	parent->next = child;
   149ca:	601d      	str	r5, [r3, #0]
	list->tail = node;
   149cc:	61a5      	str	r5, [r4, #24]
}
   149ce:	e7b7      	b.n	14940 <send_frag+0x48>
	return list->tail;
   149d0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   149d2:	b133      	cbz	r3, 149e2 <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
   149d4:	f103 080c 	add.w	r8, r3, #12
   149d8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   149da:	3301      	adds	r3, #1
   149dc:	f8c8 3000 	str.w	r3, [r8]
   149e0:	e7ae      	b.n	14940 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   149e2:	69e3      	ldr	r3, [r4, #28]
   149e4:	f104 081c 	add.w	r8, r4, #28
   149e8:	e7f7      	b.n	149da <send_frag+0xe2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   149ea:	f8d8 3000 	ldr.w	r3, [r8]
   149ee:	b95b      	cbnz	r3, 14a08 <send_frag+0x110>
   149f0:	4917      	ldr	r1, [pc, #92]	; (14a50 <send_frag+0x158>)
   149f2:	4818      	ldr	r0, [pc, #96]	; (14a54 <send_frag+0x15c>)
   149f4:	f240 2327 	movw	r3, #551	; 0x227
   149f8:	4a17      	ldr	r2, [pc, #92]	; (14a58 <send_frag+0x160>)
   149fa:	f015 fe4a 	bl	2a692 <assert_print>
   149fe:	f240 2127 	movw	r1, #551	; 0x227
   14a02:	4815      	ldr	r0, [pc, #84]	; (14a58 <send_frag+0x160>)
   14a04:	f015 fe3e 	bl	2a684 <assert_post_action>
			(*pending_no_cb)--;
   14a08:	3b01      	subs	r3, #1
   14a0a:	f8c8 3000 	str.w	r3, [r8]
   14a0e:	f38a 8811 	msr	BASEPRI, sl
   14a12:	f3bf 8f6f 	isb	sy
   14a16:	480b      	ldr	r0, [pc, #44]	; (14a44 <send_frag+0x14c>)
   14a18:	f010 fdc2 	bl	255a0 <z_impl_k_sem_give>
	if (always_consume) {
   14a1c:	f1b9 0f00 	cmp.w	r9, #0
   14a20:	d109      	bne.n	14a36 <send_frag+0x13e>
	return false;
   14a22:	2000      	movs	r0, #0
}
   14a24:	46bd      	mov	sp, r7
   14a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a2a:	4806      	ldr	r0, [pc, #24]	; (14a44 <send_frag+0x14c>)
   14a2c:	f010 fdb8 	bl	255a0 <z_impl_k_sem_give>
	if (tx) {
   14a30:	2d00      	cmp	r5, #0
   14a32:	d1c3      	bne.n	149bc <send_frag+0xc4>
   14a34:	e7f2      	b.n	14a1c <send_frag+0x124>
		net_buf_unref(buf);
   14a36:	4630      	mov	r0, r6
   14a38:	f006 fd92 	bl	1b560 <net_buf_unref>
   14a3c:	e7f1      	b.n	14a22 <send_frag+0x12a>
	return true;
   14a3e:	2001      	movs	r0, #1
   14a40:	e7f0      	b.n	14a24 <send_frag+0x12c>
   14a42:	bf00      	nop
   14a44:	20008100 	.word	0x20008100
   14a48:	00034b1e 	.word	0x00034b1e
   14a4c:	00031494 	.word	0x00031494
   14a50:	00035314 	.word	0x00035314
   14a54:	00032629 	.word	0x00032629
   14a58:	000352c6 	.word	0x000352c6

00014a5c <bt_conn_get_pkts>:
}
   14a5c:	4800      	ldr	r0, [pc, #0]	; (14a60 <bt_conn_get_pkts+0x4>)
   14a5e:	4770      	bx	lr
   14a60:	20008100 	.word	0x20008100

00014a64 <bt_conn_new>:
{
   14a64:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   14a66:	2200      	movs	r2, #0
   14a68:	4604      	mov	r4, r0
   14a6a:	428a      	cmp	r2, r1
   14a6c:	d102      	bne.n	14a74 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14a6e:	2400      	movs	r4, #0
}
   14a70:	4620      	mov	r0, r4
   14a72:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14a74:	2001      	movs	r0, #1
   14a76:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   14a7a:	e8d3 5fef 	ldaex	r5, [r3]
   14a7e:	2d00      	cmp	r5, #0
   14a80:	d104      	bne.n	14a8c <bt_conn_new+0x28>
   14a82:	e8c3 0fec 	stlex	ip, r0, [r3]
   14a86:	f1bc 0f00 	cmp.w	ip, #0
   14a8a:	d1f6      	bne.n	14a7a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14a8c:	d002      	beq.n	14a94 <bt_conn_new+0x30>
   14a8e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   14a90:	4402      	add	r2, r0
   14a92:	e7ea      	b.n	14a6a <bt_conn_new+0x6>
	if (!conn) {
   14a94:	2c00      	cmp	r4, #0
   14a96:	d0ea      	beq.n	14a6e <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   14a98:	22c4      	movs	r2, #196	; 0xc4
   14a9a:	2100      	movs	r1, #0
   14a9c:	4620      	mov	r0, r4
   14a9e:	f01b fd8c 	bl	305ba <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14aa2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14aa6:	4904      	ldr	r1, [pc, #16]	; (14ab8 <bt_conn_new+0x54>)
   14aa8:	f011 f9fe 	bl	25ea8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14aac:	4903      	ldr	r1, [pc, #12]	; (14abc <bt_conn_new+0x58>)
   14aae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14ab2:	f011 f81d 	bl	25af0 <k_work_init>
	return conn;
   14ab6:	e7db      	b.n	14a70 <bt_conn_new+0xc>
   14ab8:	00015515 	.word	0x00015515
   14abc:	0002c559 	.word	0x0002c559

00014ac0 <conn_cleanup>:
{
   14ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ac4:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   14ac6:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   14ac8:	f104 0638 	add.w	r6, r4, #56	; 0x38
   14acc:	2300      	movs	r3, #0
   14ace:	2200      	movs	r2, #0
   14ad0:	4630      	mov	r0, r6
   14ad2:	f019 fa6f 	bl	2dfb4 <net_buf_get>
   14ad6:	4603      	mov	r3, r0
   14ad8:	b980      	cbnz	r0, 14afc <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14ada:	6963      	ldr	r3, [r4, #20]
   14adc:	b1cb      	cbz	r3, 14b12 <conn_cleanup+0x52>
   14ade:	4918      	ldr	r1, [pc, #96]	; (14b40 <conn_cleanup+0x80>)
   14ae0:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   14ae4:	4a17      	ldr	r2, [pc, #92]	; (14b44 <conn_cleanup+0x84>)
   14ae6:	4818      	ldr	r0, [pc, #96]	; (14b48 <conn_cleanup+0x88>)
   14ae8:	f015 fdd3 	bl	2a692 <assert_print>
   14aec:	4817      	ldr	r0, [pc, #92]	; (14b4c <conn_cleanup+0x8c>)
   14aee:	f015 fdd0 	bl	2a692 <assert_print>
   14af2:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14af6:	4813      	ldr	r0, [pc, #76]	; (14b44 <conn_cleanup+0x84>)
   14af8:	f015 fdc4 	bl	2a684 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14afc:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   14afe:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   14b00:	f006 fd2e 	bl	1b560 <net_buf_unref>
		if (tx) {
   14b04:	2d00      	cmp	r5, #0
   14b06:	d0e1      	beq.n	14acc <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   14b08:	4629      	mov	r1, r5
   14b0a:	4620      	mov	r0, r4
   14b0c:	f7ff fece 	bl	148ac <conn_tx_destroy>
   14b10:	e7da      	b.n	14ac8 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14b12:	69e3      	ldr	r3, [r4, #28]
   14b14:	b14b      	cbz	r3, 14b2a <conn_cleanup+0x6a>
   14b16:	490e      	ldr	r1, [pc, #56]	; (14b50 <conn_cleanup+0x90>)
   14b18:	f240 23b5 	movw	r3, #693	; 0x2b5
   14b1c:	4a09      	ldr	r2, [pc, #36]	; (14b44 <conn_cleanup+0x84>)
   14b1e:	480a      	ldr	r0, [pc, #40]	; (14b48 <conn_cleanup+0x88>)
   14b20:	f015 fdb7 	bl	2a692 <assert_print>
   14b24:	f240 21b5 	movw	r1, #693	; 0x2b5
   14b28:	e7e5      	b.n	14af6 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   14b2a:	4620      	mov	r0, r4
   14b2c:	f017 fd17 	bl	2c55e <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14b30:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14b34:	2200      	movs	r2, #0
}
   14b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14b3a:	2300      	movs	r3, #0
   14b3c:	f011 bad0 	b.w	260e0 <k_work_reschedule>
   14b40:	00035327 	.word	0x00035327
   14b44:	000352c6 	.word	0x000352c6
   14b48:	00032629 	.word	0x00032629
   14b4c:	0003534d 	.word	0x0003534d
   14b50:	00035362 	.word	0x00035362

00014b54 <bt_conn_recv>:
{
   14b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b58:	4616      	mov	r6, r2
   14b5a:	b086      	sub	sp, #24
   14b5c:	af00      	add	r7, sp, #0
   14b5e:	4604      	mov	r4, r0
   14b60:	460d      	mov	r5, r1
	tx_notify(conn);
   14b62:	f7ff fe73 	bl	1484c <tx_notify>
	switch (flags) {
   14b66:	2e01      	cmp	r6, #1
   14b68:	d030      	beq.n	14bcc <bt_conn_recv+0x78>
   14b6a:	2e02      	cmp	r6, #2
   14b6c:	d16a      	bne.n	14c44 <bt_conn_recv+0xf0>
		if (conn->rx) {
   14b6e:	6923      	ldr	r3, [r4, #16]
   14b70:	b163      	cbz	r3, 14b8c <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   14b72:	4b40      	ldr	r3, [pc, #256]	; (14c74 <bt_conn_recv+0x120>)
   14b74:	4840      	ldr	r0, [pc, #256]	; (14c78 <bt_conn_recv+0x124>)
   14b76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14b7a:	e9c7 6304 	strd	r6, r3, [r7, #16]
   14b7e:	f107 0210 	add.w	r2, r7, #16
   14b82:	f017 fce6 	bl	2c552 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   14b86:	4620      	mov	r0, r4
   14b88:	f017 fce9 	bl	2c55e <bt_conn_reset_rx_state>
		conn->rx = buf;
   14b8c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14b8e:	6921      	ldr	r1, [r4, #16]
   14b90:	8a08      	ldrh	r0, [r1, #16]
   14b92:	2801      	cmp	r0, #1
   14b94:	d930      	bls.n	14bf8 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14b96:	68cb      	ldr	r3, [r1, #12]
   14b98:	881b      	ldrh	r3, [r3, #0]
   14b9a:	3304      	adds	r3, #4
   14b9c:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   14b9e:	4298      	cmp	r0, r3
   14ba0:	d32a      	bcc.n	14bf8 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   14ba2:	d95f      	bls.n	14c64 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   14ba4:	466d      	mov	r5, sp
   14ba6:	b088      	sub	sp, #32
   14ba8:	466a      	mov	r2, sp
   14baa:	61d3      	str	r3, [r2, #28]
   14bac:	2304      	movs	r3, #4
   14bae:	4933      	ldr	r1, [pc, #204]	; (14c7c <bt_conn_recv+0x128>)
   14bb0:	e9c2 1005 	strd	r1, r0, [r2, #20]
   14bb4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14bb8:	482f      	ldr	r0, [pc, #188]	; (14c78 <bt_conn_recv+0x124>)
   14bba:	f842 3f10 	str.w	r3, [r2, #16]!
   14bbe:	f017 fcc8 	bl	2c552 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14bc2:	4620      	mov	r0, r4
   14bc4:	46ad      	mov	sp, r5
   14bc6:	f017 fcca 	bl	2c55e <bt_conn_reset_rx_state>
		return;
   14bca:	e015      	b.n	14bf8 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   14bcc:	6920      	ldr	r0, [r4, #16]
   14bce:	b970      	cbnz	r0, 14bee <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   14bd0:	4b2b      	ldr	r3, [pc, #172]	; (14c80 <bt_conn_recv+0x12c>)
   14bd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14bd6:	617b      	str	r3, [r7, #20]
   14bd8:	2302      	movs	r3, #2
   14bda:	4827      	ldr	r0, [pc, #156]	; (14c78 <bt_conn_recv+0x124>)
   14bdc:	613b      	str	r3, [r7, #16]
   14bde:	f107 0210 	add.w	r2, r7, #16
   14be2:	f017 fcb6 	bl	2c552 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14be6:	4620      	mov	r0, r4
   14be8:	f017 fcb9 	bl	2c55e <bt_conn_reset_rx_state>
   14bec:	e001      	b.n	14bf2 <bt_conn_recv+0x9e>
		if (!buf->len) {
   14bee:	8a2e      	ldrh	r6, [r5, #16]
   14bf0:	b936      	cbnz	r6, 14c00 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   14bf2:	4628      	mov	r0, r5
   14bf4:	f006 fcb4 	bl	1b560 <net_buf_unref>
}
   14bf8:	3718      	adds	r7, #24
   14bfa:	46bd      	mov	sp, r7
   14bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14c00:	300c      	adds	r0, #12
   14c02:	f019 f9ec 	bl	2dfde <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   14c06:	4286      	cmp	r6, r0
   14c08:	d912      	bls.n	14c30 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14c0a:	4b1e      	ldr	r3, [pc, #120]	; (14c84 <bt_conn_recv+0x130>)
   14c0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c10:	617b      	str	r3, [r7, #20]
   14c12:	2302      	movs	r3, #2
   14c14:	4818      	ldr	r0, [pc, #96]	; (14c78 <bt_conn_recv+0x124>)
   14c16:	613b      	str	r3, [r7, #16]
   14c18:	f107 0210 	add.w	r2, r7, #16
   14c1c:	f017 fc99 	bl	2c552 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14c20:	2200      	movs	r2, #0
   14c22:	4620      	mov	r0, r4
   14c24:	6921      	ldr	r1, [r4, #16]
   14c26:	f000 ff19 	bl	15a5c <bt_l2cap_recv>
			conn->rx = NULL;
   14c2a:	2300      	movs	r3, #0
   14c2c:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   14c2e:	e7e0      	b.n	14bf2 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14c30:	6920      	ldr	r0, [r4, #16]
   14c32:	8a2a      	ldrh	r2, [r5, #16]
   14c34:	68e9      	ldr	r1, [r5, #12]
   14c36:	300c      	adds	r0, #12
   14c38:	f019 f9d9 	bl	2dfee <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14c3c:	4628      	mov	r0, r5
   14c3e:	f006 fc8f 	bl	1b560 <net_buf_unref>
		break;
   14c42:	e7a4      	b.n	14b8e <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14c44:	46e8      	mov	r8, sp
   14c46:	b088      	sub	sp, #32
   14c48:	466a      	mov	r2, sp
   14c4a:	4b0f      	ldr	r3, [pc, #60]	; (14c88 <bt_conn_recv+0x134>)
   14c4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   14c50:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14c54:	2303      	movs	r3, #3
   14c56:	4808      	ldr	r0, [pc, #32]	; (14c78 <bt_conn_recv+0x124>)
   14c58:	f842 3f10 	str.w	r3, [r2, #16]!
   14c5c:	f017 fc79 	bl	2c552 <z_log_msg_static_create.constprop.0>
   14c60:	46c5      	mov	sp, r8
   14c62:	e7c0      	b.n	14be6 <bt_conn_recv+0x92>
	conn->rx = NULL;
   14c64:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   14c66:	2201      	movs	r2, #1
   14c68:	4620      	mov	r0, r4
	conn->rx = NULL;
   14c6a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   14c6c:	f000 fef6 	bl	15a5c <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   14c70:	e7c2      	b.n	14bf8 <bt_conn_recv+0xa4>
   14c72:	bf00      	nop
   14c74:	0003537b 	.word	0x0003537b
   14c78:	00031494 	.word	0x00031494
   14c7c:	000353fb 	.word	0x000353fb
   14c80:	00035398 	.word	0x00035398
   14c84:	000353b6 	.word	0x000353b6
   14c88:	000353dd 	.word	0x000353dd

00014c8c <bt_conn_send_cb>:
{
   14c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c90:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14c92:	7b43      	ldrb	r3, [r0, #13]
{
   14c94:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14c96:	2b07      	cmp	r3, #7
{
   14c98:	460f      	mov	r7, r1
   14c9a:	4616      	mov	r6, r2
   14c9c:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   14c9e:	d00c      	beq.n	14cba <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   14ca0:	4b28      	ldr	r3, [pc, #160]	; (14d44 <bt_conn_send_cb+0xb8>)
   14ca2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ca6:	9305      	str	r3, [sp, #20]
   14ca8:	2302      	movs	r3, #2
   14caa:	4827      	ldr	r0, [pc, #156]	; (14d48 <bt_conn_send_cb+0xbc>)
   14cac:	aa04      	add	r2, sp, #16
   14cae:	9304      	str	r3, [sp, #16]
   14cb0:	f017 fc4f 	bl	2c552 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   14cb4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14cb8:	e01d      	b.n	14cf6 <bt_conn_send_cb+0x6a>
	if (cb) {
   14cba:	2a00      	cmp	r2, #0
   14cbc:	d040      	beq.n	14d40 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   14cbe:	f012 fb97 	bl	273f0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14cc2:	4b22      	ldr	r3, [pc, #136]	; (14d4c <bt_conn_send_cb+0xc0>)
   14cc4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14cc6:	4822      	ldr	r0, [pc, #136]	; (14d50 <bt_conn_send_cb+0xc4>)
   14cc8:	bf07      	ittee	eq
   14cca:	2200      	moveq	r2, #0
   14ccc:	2300      	moveq	r3, #0
   14cce:	f04f 32ff 	movne.w	r2, #4294967295
   14cd2:	f04f 33ff 	movne.w	r3, #4294967295
   14cd6:	f010 fbf9 	bl	254cc <z_impl_k_queue_get>
   14cda:	4604      	mov	r4, r0
		if (!tx) {
   14cdc:	b970      	cbnz	r0, 14cfc <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   14cde:	4b1d      	ldr	r3, [pc, #116]	; (14d54 <bt_conn_send_cb+0xc8>)
   14ce0:	4819      	ldr	r0, [pc, #100]	; (14d48 <bt_conn_send_cb+0xbc>)
   14ce2:	9305      	str	r3, [sp, #20]
   14ce4:	2302      	movs	r3, #2
   14ce6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cea:	aa04      	add	r2, sp, #16
   14cec:	9304      	str	r3, [sp, #16]
   14cee:	f017 fc30 	bl	2c552 <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   14cf2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14cf6:	b006      	add	sp, #24
   14cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14cfc:	7b6b      	ldrb	r3, [r5, #13]
   14cfe:	2b07      	cmp	r3, #7
   14d00:	d012      	beq.n	14d28 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   14d02:	4b15      	ldr	r3, [pc, #84]	; (14d58 <bt_conn_send_cb+0xcc>)
   14d04:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14d08:	9305      	str	r3, [sp, #20]
   14d0a:	2302      	movs	r3, #2
   14d0c:	480e      	ldr	r0, [pc, #56]	; (14d48 <bt_conn_send_cb+0xbc>)
   14d0e:	aa04      	add	r2, sp, #16
   14d10:	9304      	str	r3, [sp, #16]
   14d12:	f017 fc1e 	bl	2c552 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   14d16:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   14d18:	4621      	mov	r1, r4
	tx->user_data = NULL;
   14d1a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   14d1e:	480c      	ldr	r0, [pc, #48]	; (14d50 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   14d20:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14d22:	f01b fa39 	bl	30198 <k_queue_append>
}
   14d26:	e7c5      	b.n	14cb4 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   14d28:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14d2a:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14d2e:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   14d30:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14d34:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
   14d36:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   14d38:	f006 fbec 	bl	1b514 <net_buf_put>
	return 0;
   14d3c:	2000      	movs	r0, #0
   14d3e:	e7da      	b.n	14cf6 <bt_conn_send_cb+0x6a>
   14d40:	4614      	mov	r4, r2
   14d42:	e7f5      	b.n	14d30 <bt_conn_send_cb+0xa4>
   14d44:	00035416 	.word	0x00035416
   14d48:	00031494 	.word	0x00031494
   14d4c:	2000a270 	.word	0x2000a270
   14d50:	20008cb8 	.word	0x20008cb8
   14d54:	00035425 	.word	0x00035425
   14d58:	00035443 	.word	0x00035443

00014d5c <bt_conn_prepare_events>:
{
   14d5c:	b570      	push	{r4, r5, r6, lr}
   14d5e:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   14d60:	4817      	ldr	r0, [pc, #92]	; (14dc0 <bt_conn_prepare_events+0x64>)
   14d62:	f01b fbc1 	bl	304e8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14d66:	2200      	movs	r2, #0
   14d68:	2101      	movs	r1, #1
   14d6a:	4620      	mov	r0, r4
   14d6c:	4b14      	ldr	r3, [pc, #80]	; (14dc0 <bt_conn_prepare_events+0x64>)
   14d6e:	f013 fa47 	bl	28200 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14d72:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14d76:	4b13      	ldr	r3, [pc, #76]	; (14dc4 <bt_conn_prepare_events+0x68>)
   14d78:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   14d7c:	b90a      	cbnz	r2, 14d82 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14d7e:	2001      	movs	r0, #1
}
   14d80:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14d82:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   14d86:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   14d8a:	b953      	cbnz	r3, 14da2 <bt_conn_prepare_events+0x46>
   14d8c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14d90:	1d28      	adds	r0, r5, #4
   14d92:	f017 fbd3 	bl	2c53c <atomic_and>
   14d96:	0643      	lsls	r3, r0, #25
   14d98:	d503      	bpl.n	14da2 <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   14d9a:	4628      	mov	r0, r5
   14d9c:	f7ff fe90 	bl	14ac0 <conn_cleanup>
		return -ENOTCONN;
   14da0:	e7ed      	b.n	14d7e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   14da2:	7b6b      	ldrb	r3, [r5, #13]
   14da4:	2b07      	cmp	r3, #7
   14da6:	d1ea      	bne.n	14d7e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   14da8:	4630      	mov	r0, r6
   14daa:	4b07      	ldr	r3, [pc, #28]	; (14dc8 <bt_conn_prepare_events+0x6c>)
   14dac:	2200      	movs	r2, #0
   14dae:	2104      	movs	r1, #4
   14db0:	f013 fa26 	bl	28200 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14db4:	2301      	movs	r3, #1
			ev_count++;
   14db6:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14db8:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   14dbc:	e7e0      	b.n	14d80 <bt_conn_prepare_events+0x24>
   14dbe:	bf00      	nop
   14dc0:	200084d4 	.word	0x200084d4
   14dc4:	20009e6c 	.word	0x20009e6c
   14dc8:	20009de0 	.word	0x20009de0

00014dcc <bt_conn_ref>:
{
   14dcc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   14dce:	b180      	cbz	r0, 14df2 <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   14dd0:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   14dd4:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   14dd8:	b1bb      	cbz	r3, 14e0a <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   14dda:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14ddc:	e8d2 4fef 	ldaex	r4, [r2]
   14de0:	429c      	cmp	r4, r3
   14de2:	d104      	bne.n	14dee <bt_conn_ref+0x22>
   14de4:	e8c2 1fec 	stlex	ip, r1, [r2]
   14de8:	f1bc 0f00 	cmp.w	ip, #0
   14dec:	d1f6      	bne.n	14ddc <bt_conn_ref+0x10>
   14dee:	d1f1      	bne.n	14dd4 <bt_conn_ref+0x8>
}
   14df0:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   14df2:	4907      	ldr	r1, [pc, #28]	; (14e10 <bt_conn_ref+0x44>)
   14df4:	4807      	ldr	r0, [pc, #28]	; (14e14 <bt_conn_ref+0x48>)
   14df6:	f240 437c 	movw	r3, #1148	; 0x47c
   14dfa:	4a07      	ldr	r2, [pc, #28]	; (14e18 <bt_conn_ref+0x4c>)
   14dfc:	f015 fc49 	bl	2a692 <assert_print>
   14e00:	f240 417c 	movw	r1, #1148	; 0x47c
   14e04:	4804      	ldr	r0, [pc, #16]	; (14e18 <bt_conn_ref+0x4c>)
   14e06:	f015 fc3d 	bl	2a684 <assert_post_action>
			return NULL;
   14e0a:	4618      	mov	r0, r3
   14e0c:	e7f0      	b.n	14df0 <bt_conn_ref+0x24>
   14e0e:	bf00      	nop
   14e10:	00034b90 	.word	0x00034b90
   14e14:	00032629 	.word	0x00032629
   14e18:	000352c6 	.word	0x000352c6

00014e1c <bt_conn_unref>:
{
   14e1c:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   14e1e:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14e22:	e8d3 2fef 	ldaex	r2, [r3]
   14e26:	1e51      	subs	r1, r2, #1
   14e28:	e8c3 1fe4 	stlex	r4, r1, [r3]
   14e2c:	2c00      	cmp	r4, #0
   14e2e:	d1f8      	bne.n	14e22 <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   14e30:	2a00      	cmp	r2, #0
   14e32:	dc0e      	bgt.n	14e52 <bt_conn_unref+0x36>
   14e34:	490d      	ldr	r1, [pc, #52]	; (14e6c <bt_conn_unref+0x50>)
   14e36:	f44f 6393 	mov.w	r3, #1176	; 0x498
   14e3a:	4a0d      	ldr	r2, [pc, #52]	; (14e70 <bt_conn_unref+0x54>)
   14e3c:	480d      	ldr	r0, [pc, #52]	; (14e74 <bt_conn_unref+0x58>)
   14e3e:	f015 fc28 	bl	2a692 <assert_print>
   14e42:	480d      	ldr	r0, [pc, #52]	; (14e78 <bt_conn_unref+0x5c>)
   14e44:	f015 fc25 	bl	2a692 <assert_print>
   14e48:	f44f 6193 	mov.w	r1, #1176	; 0x498
   14e4c:	4808      	ldr	r0, [pc, #32]	; (14e70 <bt_conn_unref+0x54>)
   14e4e:	f015 fc19 	bl	2a684 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   14e52:	f240 1201 	movw	r2, #257	; 0x101
   14e56:	8841      	ldrh	r1, [r0, #2]
   14e58:	4291      	cmp	r1, r2
   14e5a:	d106      	bne.n	14e6a <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e5c:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   14e60:	b91b      	cbnz	r3, 14e6a <bt_conn_unref+0x4e>
}
   14e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   14e66:	f7ff ba8f 	b.w	14388 <bt_le_adv_resume>
}
   14e6a:	bd10      	pop	{r4, pc}
   14e6c:	00035469 	.word	0x00035469
   14e70:	000352c6 	.word	0x000352c6
   14e74:	00032629 	.word	0x00032629
   14e78:	00035471 	.word	0x00035471

00014e7c <bt_conn_lookup_handle>:
{
   14e7c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14e7e:	2101      	movs	r1, #1
   14e80:	4801      	ldr	r0, [pc, #4]	; (14e88 <bt_conn_lookup_handle+0xc>)
   14e82:	f017 bb75 	b.w	2c570 <conn_lookup_handle>
   14e86:	bf00      	nop
   14e88:	20009da8 	.word	0x20009da8

00014e8c <bt_conn_set_state>:
{
   14e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   14e8e:	7b46      	ldrb	r6, [r0, #13]
{
   14e90:	4604      	mov	r4, r0
	if (conn->state == state) {
   14e92:	428e      	cmp	r6, r1
{
   14e94:	460d      	mov	r5, r1
   14e96:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   14e98:	d119      	bne.n	14ece <bt_conn_set_state+0x42>
	switch (state) {
   14e9a:	2e08      	cmp	r6, #8
   14e9c:	bf98      	it	ls
   14e9e:	4b6c      	ldrls	r3, [pc, #432]	; (15050 <bt_conn_set_state+0x1c4>)
		LOG_WRN("no transition %s", state2str(state));
   14ea0:	466c      	mov	r4, sp
   14ea2:	b088      	sub	sp, #32
   14ea4:	bf94      	ite	ls
   14ea6:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   14eaa:	4b6a      	ldrhi	r3, [pc, #424]	; (15054 <bt_conn_set_state+0x1c8>)
		LOG_WRN("no transition %s", state2str(state));
   14eac:	466a      	mov	r2, sp
   14eae:	496a      	ldr	r1, [pc, #424]	; (15058 <bt_conn_set_state+0x1cc>)
   14eb0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
   14eb8:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   14ebc:	8393      	strh	r3, [r2, #28]
   14ebe:	4b67      	ldr	r3, [pc, #412]	; (1505c <bt_conn_set_state+0x1d0>)
   14ec0:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
   14ec4:	4866      	ldr	r0, [pc, #408]	; (15060 <bt_conn_set_state+0x1d4>)
   14ec6:	f017 fb44 	bl	2c552 <z_log_msg_static_create.constprop.0>
   14eca:	46a5      	mov	sp, r4
   14ecc:	e043      	b.n	14f56 <bt_conn_set_state+0xca>
	conn->state = state;
   14ece:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14ed0:	b926      	cbnz	r6, 14edc <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14ed2:	7883      	ldrb	r3, [r0, #2]
   14ed4:	2b08      	cmp	r3, #8
   14ed6:	d001      	beq.n	14edc <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   14ed8:	f7ff ff78 	bl	14dcc <bt_conn_ref>
	switch (conn->state) {
   14edc:	7b63      	ldrb	r3, [r4, #13]
   14ede:	2b08      	cmp	r3, #8
   14ee0:	f200 80b0 	bhi.w	15044 <bt_conn_set_state+0x1b8>
   14ee4:	e8df f003 	tbb	[pc, r3]
   14ee8:	37370539 	.word	0x37370539
   14eec:	1c373737 	.word	0x1c373737
   14ef0:	37          	.byte	0x37
   14ef1:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   14ef2:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   14ef4:	4d5b      	ldr	r5, [pc, #364]	; (15064 <bt_conn_set_state+0x1d8>)
	__asm__ volatile(
   14ef6:	f04f 0220 	mov.w	r2, #32
   14efa:	f3ef 8311 	mrs	r3, BASEPRI
   14efe:	f382 8812 	msr	BASEPRI_MAX, r2
   14f02:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14f06:	69e2      	ldr	r2, [r4, #28]
   14f08:	2a00      	cmp	r2, #0
   14f0a:	d077      	beq.n	14ffc <bt_conn_set_state+0x170>
			conn->pending_no_cb--;
   14f0c:	3a01      	subs	r2, #1
   14f0e:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   14f10:	f383 8811 	msr	BASEPRI, r3
   14f14:	f3bf 8f6f 	isb	sy
   14f18:	4628      	mov	r0, r5
   14f1a:	f010 fb41 	bl	255a0 <z_impl_k_sem_give>
}
   14f1e:	e7ea      	b.n	14ef6 <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14f20:	78a3      	ldrb	r3, [r4, #2]
   14f22:	2b04      	cmp	r3, #4
   14f24:	d017      	beq.n	14f56 <bt_conn_set_state+0xca>
	z_impl_k_queue_init(queue);
   14f26:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14f2a:	f01b f928 	bl	3017e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   14f2e:	2100      	movs	r1, #0
   14f30:	484d      	ldr	r0, [pc, #308]	; (15068 <bt_conn_set_state+0x1dc>)
   14f32:	f013 fa83 	bl	2843c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14f36:	2300      	movs	r3, #0
	list->tail = NULL;
   14f38:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14f3c:	78e3      	ldrb	r3, [r4, #3]
   14f3e:	2b01      	cmp	r3, #1
   14f40:	d109      	bne.n	14f56 <bt_conn_set_state+0xca>
			conn->le.conn_param_retry_countdown =
   14f42:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   14f44:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   14f48:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   14f4c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14f50:	2300      	movs	r3, #0
   14f52:	f011 f84b 	bl	25fec <k_work_schedule>
}
   14f56:	46bd      	mov	sp, r7
   14f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   14f5a:	78a3      	ldrb	r3, [r4, #2]
   14f5c:	2b04      	cmp	r3, #4
   14f5e:	d103      	bne.n	14f68 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   14f60:	4620      	mov	r0, r4
   14f62:	f7ff ff5b 	bl	14e1c <bt_conn_unref>
			break;
   14f66:	e7f6      	b.n	14f56 <bt_conn_set_state+0xca>
		switch (old_state) {
   14f68:	2e08      	cmp	r6, #8
   14f6a:	d8f4      	bhi.n	14f56 <bt_conn_set_state+0xca>
   14f6c:	a301      	add	r3, pc, #4	; (adr r3, 14f74 <bt_conn_set_state+0xe8>)
   14f6e:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   14f72:	bf00      	nop
   14f74:	00014fe5 	.word	0x00014fe5
   14f78:	00014f99 	.word	0x00014f99
   14f7c:	00014fd7 	.word	0x00014fd7
   14f80:	00014f61 	.word	0x00014f61
   14f84:	00014f61 	.word	0x00014f61
   14f88:	00014fd7 	.word	0x00014fd7
   14f8c:	00014fd7 	.word	0x00014fd7
   14f90:	00014f57 	.word	0x00014f57
   14f94:	00014fe5 	.word	0x00014fe5
			tx_notify(conn);
   14f98:	4620      	mov	r0, r4
   14f9a:	f7ff fc57 	bl	1484c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14f9e:	78a3      	ldrb	r3, [r4, #2]
   14fa0:	2b01      	cmp	r3, #1
   14fa2:	d10a      	bne.n	14fba <bt_conn_set_state+0x12e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   14fa4:	f104 0560 	add.w	r5, r4, #96	; 0x60
   14fa8:	4628      	mov	r0, r5
   14faa:	f01b f97e 	bl	302aa <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14fae:	f010 0f0c 	tst.w	r0, #12
   14fb2:	d002      	beq.n	14fba <bt_conn_set_state+0x12e>
				k_work_cancel_delayable(&conn->deferred_work);
   14fb4:	4628      	mov	r0, r5
   14fb6:	f011 f899 	bl	260ec <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14fba:	3404      	adds	r4, #4
   14fbc:	e8d4 3fef 	ldaex	r3, [r4]
   14fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14fc4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14fc8:	2a00      	cmp	r2, #0
   14fca:	d1f7      	bne.n	14fbc <bt_conn_set_state+0x130>
   14fcc:	2100      	movs	r1, #0
   14fce:	4826      	ldr	r0, [pc, #152]	; (15068 <bt_conn_set_state+0x1dc>)
   14fd0:	f013 fa34 	bl	2843c <z_impl_k_poll_signal_raise>
   14fd4:	e7bf      	b.n	14f56 <bt_conn_set_state+0xca>
			if (conn->err) {
   14fd6:	7b23      	ldrb	r3, [r4, #12]
   14fd8:	2b00      	cmp	r3, #0
   14fda:	d0c1      	beq.n	14f60 <bt_conn_set_state+0xd4>
				notify_connected(conn);
   14fdc:	4620      	mov	r0, r4
   14fde:	f7ff fbff 	bl	147e0 <notify_connected>
   14fe2:	e7bd      	b.n	14f60 <bt_conn_set_state+0xd4>
			LOG_WRN("Invalid (%u) old state", state);
   14fe4:	466c      	mov	r4, sp
   14fe6:	b088      	sub	sp, #32
   14fe8:	466a      	mov	r2, sp
   14fea:	4b20      	ldr	r3, [pc, #128]	; (1506c <bt_conn_set_state+0x1e0>)
		LOG_WRN("no valid (%u) state was set", state);
   14fec:	e9c2 3505 	strd	r3, r5, [r2, #20]
   14ff0:	2303      	movs	r3, #3
   14ff2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14ff6:	f842 3f10 	str.w	r3, [r2, #16]!
   14ffa:	e763      	b.n	14ec4 <bt_conn_set_state+0x38>
	return list->head;
   14ffc:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14ffe:	b921      	cbnz	r1, 1500a <bt_conn_set_state+0x17e>
   15000:	f383 8811 	msr	BASEPRI, r3
   15004:	f3bf 8f6f 	isb	sy
		if (!node) {
   15008:	e7a5      	b.n	14f56 <bt_conn_set_state+0xca>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1500a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1500c:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1500e:	4281      	cmp	r1, r0
	list->tail = node;
   15010:	bf08      	it	eq
   15012:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   15014:	6162      	str	r2, [r4, #20]
   15016:	f383 8811 	msr	BASEPRI, r3
   1501a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1501e:	f04f 0220 	mov.w	r2, #32
   15022:	f3ef 8311 	mrs	r3, BASEPRI
   15026:	f382 8812 	msr	BASEPRI_MAX, r2
   1502a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1502e:	68ca      	ldr	r2, [r1, #12]
   15030:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   15032:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   15034:	f383 8811 	msr	BASEPRI, r3
   15038:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1503c:	4620      	mov	r0, r4
   1503e:	f7ff fc35 	bl	148ac <conn_tx_destroy>
   15042:	e769      	b.n	14f18 <bt_conn_set_state+0x8c>
		LOG_WRN("no valid (%u) state was set", state);
   15044:	466c      	mov	r4, sp
   15046:	b088      	sub	sp, #32
   15048:	466a      	mov	r2, sp
   1504a:	4b09      	ldr	r3, [pc, #36]	; (15070 <bt_conn_set_state+0x1e4>)
   1504c:	e7ce      	b.n	14fec <bt_conn_set_state+0x160>
   1504e:	bf00      	nop
   15050:	00031f24 	.word	0x00031f24
   15054:	0003548f 	.word	0x0003548f
   15058:	00035499 	.word	0x00035499
   1505c:	01000003 	.word	0x01000003
   15060:	00031494 	.word	0x00031494
   15064:	20008100 	.word	0x20008100
   15068:	200084d4 	.word	0x200084d4
   1506c:	000354aa 	.word	0x000354aa
   15070:	000354c1 	.word	0x000354c1

00015074 <bt_conn_index>:
		index = conn - acl_conns;
   15074:	4a0c      	ldr	r2, [pc, #48]	; (150a8 <bt_conn_index+0x34>)
{
   15076:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   15078:	490c      	ldr	r1, [pc, #48]	; (150ac <bt_conn_index+0x38>)
   1507a:	1a83      	subs	r3, r0, r2
   1507c:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1507e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   15080:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   15084:	d00e      	beq.n	150a4 <bt_conn_index+0x30>
   15086:	490a      	ldr	r1, [pc, #40]	; (150b0 <bt_conn_index+0x3c>)
   15088:	f240 43b6 	movw	r3, #1206	; 0x4b6
   1508c:	4a09      	ldr	r2, [pc, #36]	; (150b4 <bt_conn_index+0x40>)
   1508e:	480a      	ldr	r0, [pc, #40]	; (150b8 <bt_conn_index+0x44>)
   15090:	f015 faff 	bl	2a692 <assert_print>
   15094:	4809      	ldr	r0, [pc, #36]	; (150bc <bt_conn_index+0x48>)
   15096:	f015 fafc 	bl	2a692 <assert_print>
   1509a:	f240 41b6 	movw	r1, #1206	; 0x4b6
   1509e:	4805      	ldr	r0, [pc, #20]	; (150b4 <bt_conn_index+0x40>)
   150a0:	f015 faf0 	bl	2a684 <assert_post_action>
}
   150a4:	b2d8      	uxtb	r0, r3
   150a6:	bd08      	pop	{r3, pc}
   150a8:	20009da8 	.word	0x20009da8
   150ac:	c28f5c29 	.word	0xc28f5c29
   150b0:	000354dd 	.word	0x000354dd
   150b4:	000352c6 	.word	0x000352c6
   150b8:	00032629 	.word	0x00032629
   150bc:	000355a6 	.word	0x000355a6

000150c0 <bt_conn_create_pdu_timeout>:
{
   150c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   150c2:	b087      	sub	sp, #28
   150c4:	4604      	mov	r4, r0
   150c6:	460d      	mov	r5, r1
   150c8:	4617      	mov	r7, r2
   150ca:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   150cc:	f01b f828 	bl	30120 <k_is_in_isr>
   150d0:	b158      	cbz	r0, 150ea <bt_conn_create_pdu_timeout+0x2a>
   150d2:	4914      	ldr	r1, [pc, #80]	; (15124 <bt_conn_create_pdu_timeout+0x64>)
   150d4:	4814      	ldr	r0, [pc, #80]	; (15128 <bt_conn_create_pdu_timeout+0x68>)
   150d6:	f240 43d2 	movw	r3, #1234	; 0x4d2
   150da:	4a14      	ldr	r2, [pc, #80]	; (1512c <bt_conn_create_pdu_timeout+0x6c>)
   150dc:	f015 fad9 	bl	2a692 <assert_print>
   150e0:	f240 41d2 	movw	r1, #1234	; 0x4d2
   150e4:	4811      	ldr	r0, [pc, #68]	; (1512c <bt_conn_create_pdu_timeout+0x6c>)
   150e6:	f015 facd 	bl	2a684 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   150ea:	4911      	ldr	r1, [pc, #68]	; (15130 <bt_conn_create_pdu_timeout+0x70>)
   150ec:	463a      	mov	r2, r7
   150ee:	2c00      	cmp	r4, #0
   150f0:	bf14      	ite	ne
   150f2:	4620      	movne	r0, r4
   150f4:	4608      	moveq	r0, r1
   150f6:	4633      	mov	r3, r6
   150f8:	f018 ff57 	bl	2dfaa <net_buf_alloc_fixed>
	if (!buf) {
   150fc:	4604      	mov	r4, r0
   150fe:	b960      	cbnz	r0, 1511a <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   15100:	4b0c      	ldr	r3, [pc, #48]	; (15134 <bt_conn_create_pdu_timeout+0x74>)
   15102:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15106:	9305      	str	r3, [sp, #20]
   15108:	2302      	movs	r3, #2
   1510a:	480b      	ldr	r0, [pc, #44]	; (15138 <bt_conn_create_pdu_timeout+0x78>)
   1510c:	aa04      	add	r2, sp, #16
   1510e:	9304      	str	r3, [sp, #16]
   15110:	f017 fa1f 	bl	2c552 <z_log_msg_static_create.constprop.0>
}
   15114:	4620      	mov	r0, r4
   15116:	b007      	add	sp, #28
   15118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1511a:	1d69      	adds	r1, r5, #5
   1511c:	300c      	adds	r0, #12
   1511e:	f006 f90d 	bl	1b33c <net_buf_simple_reserve>
	return buf;
   15122:	e7f7      	b.n	15114 <bt_conn_create_pdu_timeout+0x54>
   15124:	000355c0 	.word	0x000355c0
   15128:	00032629 	.word	0x00032629
   1512c:	000352c6 	.word	0x000352c6
   15130:	20008d08 	.word	0x20008d08
   15134:	000355cf 	.word	0x000355cf
   15138:	00031494 	.word	0x00031494

0001513c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1513e:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15140:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15142:	e8d0 3faf 	lda	r3, [r0]
   15146:	059b      	lsls	r3, r3, #22
   15148:	d511      	bpl.n	1516e <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1514a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1514e:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   15152:	429a      	cmp	r2, r3
   15154:	d80b      	bhi.n	1516e <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15156:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   1515a:	429a      	cmp	r2, r3
   1515c:	d307      	bcc.n	1516e <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1515e:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   15162:	429a      	cmp	r2, r3
   15164:	d103      	bne.n	1516e <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15166:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1516a:	f017 f9e7 	bl	2c53c <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1516e:	4b18      	ldr	r3, [pc, #96]	; (151d0 <notify_le_param_updated+0x94>)
   15170:	681d      	ldr	r5, [r3, #0]
   15172:	b995      	cbnz	r5, 1519a <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15174:	4d17      	ldr	r5, [pc, #92]	; (151d4 <notify_le_param_updated+0x98>)
   15176:	4f18      	ldr	r7, [pc, #96]	; (151d8 <notify_le_param_updated+0x9c>)
   15178:	42bd      	cmp	r5, r7
   1517a:	d926      	bls.n	151ca <notify_le_param_updated+0x8e>
   1517c:	4917      	ldr	r1, [pc, #92]	; (151dc <notify_le_param_updated+0xa0>)
   1517e:	f240 53a5 	movw	r3, #1445	; 0x5a5
   15182:	4a17      	ldr	r2, [pc, #92]	; (151e0 <notify_le_param_updated+0xa4>)
   15184:	4817      	ldr	r0, [pc, #92]	; (151e4 <notify_le_param_updated+0xa8>)
   15186:	f015 fa84 	bl	2a692 <assert_print>
   1518a:	4817      	ldr	r0, [pc, #92]	; (151e8 <notify_le_param_updated+0xac>)
   1518c:	f015 fa81 	bl	2a692 <assert_print>
   15190:	f240 51a5 	movw	r1, #1445	; 0x5a5
   15194:	4812      	ldr	r0, [pc, #72]	; (151e0 <notify_le_param_updated+0xa4>)
   15196:	f015 fa75 	bl	2a684 <assert_post_action>
		if (cb->le_param_updated) {
   1519a:	68ee      	ldr	r6, [r5, #12]
   1519c:	b13e      	cbz	r6, 151ae <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   1519e:	4620      	mov	r0, r4
   151a0:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   151a4:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   151a8:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   151ac:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   151ae:	69ad      	ldr	r5, [r5, #24]
   151b0:	e7df      	b.n	15172 <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   151b2:	68ee      	ldr	r6, [r5, #12]
   151b4:	b13e      	cbz	r6, 151c6 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   151b6:	4620      	mov	r0, r4
   151b8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   151bc:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   151c0:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   151c4:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   151c6:	351c      	adds	r5, #28
   151c8:	e7d6      	b.n	15178 <notify_le_param_updated+0x3c>
   151ca:	d3f2      	bcc.n	151b2 <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   151cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151ce:	bf00      	nop
   151d0:	200215f4 	.word	0x200215f4
   151d4:	00031420 	.word	0x00031420
   151d8:	0003143c 	.word	0x0003143c
   151dc:	000352f6 	.word	0x000352f6
   151e0:	000352c6 	.word	0x000352c6
   151e4:	00032629 	.word	0x00032629
   151e8:	0003368c 	.word	0x0003368c

000151ec <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   151ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   151f0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   151f2:	4608      	mov	r0, r1
{
   151f4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   151f6:	f016 ff55 	bl	2c0a4 <bt_le_conn_params_valid>
   151fa:	4605      	mov	r5, r0
   151fc:	b918      	cbnz	r0, 15206 <le_param_req+0x1a>
		return false;
   151fe:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   15200:	4628      	mov	r0, r5
   15202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15206:	4b1b      	ldr	r3, [pc, #108]	; (15274 <le_param_req+0x88>)
   15208:	681e      	ldr	r6, [r3, #0]
   1520a:	b99e      	cbnz	r6, 15234 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1520c:	4e1a      	ldr	r6, [pc, #104]	; (15278 <le_param_req+0x8c>)
   1520e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1527c <le_param_req+0x90>
   15212:	4546      	cmp	r6, r8
   15214:	d927      	bls.n	15266 <le_param_req+0x7a>
   15216:	491a      	ldr	r1, [pc, #104]	; (15280 <le_param_req+0x94>)
   15218:	f240 53ed 	movw	r3, #1517	; 0x5ed
   1521c:	4a19      	ldr	r2, [pc, #100]	; (15284 <le_param_req+0x98>)
   1521e:	481a      	ldr	r0, [pc, #104]	; (15288 <le_param_req+0x9c>)
   15220:	f015 fa37 	bl	2a692 <assert_print>
   15224:	4819      	ldr	r0, [pc, #100]	; (1528c <le_param_req+0xa0>)
   15226:	f015 fa34 	bl	2a692 <assert_print>
   1522a:	f240 51ed 	movw	r1, #1517	; 0x5ed
   1522e:	4815      	ldr	r0, [pc, #84]	; (15284 <le_param_req+0x98>)
   15230:	f015 fa28 	bl	2a684 <assert_post_action>
		if (!cb->le_param_req) {
   15234:	68b3      	ldr	r3, [r6, #8]
   15236:	b90b      	cbnz	r3, 1523c <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   15238:	69b6      	ldr	r6, [r6, #24]
   1523a:	e7e6      	b.n	1520a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1523c:	4621      	mov	r1, r4
   1523e:	4638      	mov	r0, r7
   15240:	4798      	blx	r3
   15242:	2800      	cmp	r0, #0
   15244:	d0db      	beq.n	151fe <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15246:	4620      	mov	r0, r4
   15248:	f016 ff2c 	bl	2c0a4 <bt_le_conn_params_valid>
   1524c:	2800      	cmp	r0, #0
   1524e:	d1f3      	bne.n	15238 <le_param_req+0x4c>
   15250:	e7d5      	b.n	151fe <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15252:	4621      	mov	r1, r4
   15254:	4638      	mov	r0, r7
   15256:	4798      	blx	r3
   15258:	2800      	cmp	r0, #0
   1525a:	d0d0      	beq.n	151fe <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1525c:	4620      	mov	r0, r4
   1525e:	f016 ff21 	bl	2c0a4 <bt_le_conn_params_valid>
   15262:	b920      	cbnz	r0, 1526e <le_param_req+0x82>
   15264:	e7cb      	b.n	151fe <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15266:	d2cb      	bcs.n	15200 <le_param_req+0x14>
		if (!cb->le_param_req) {
   15268:	68b3      	ldr	r3, [r6, #8]
   1526a:	2b00      	cmp	r3, #0
   1526c:	d1f1      	bne.n	15252 <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1526e:	361c      	adds	r6, #28
   15270:	e7cf      	b.n	15212 <le_param_req+0x26>
   15272:	bf00      	nop
   15274:	200215f4 	.word	0x200215f4
   15278:	00031420 	.word	0x00031420
   1527c:	0003143c 	.word	0x0003143c
   15280:	000352f6 	.word	0x000352f6
   15284:	000352c6 	.word	0x000352c6
   15288:	00032629 	.word	0x00032629
   1528c:	0003368c 	.word	0x0003368c

00015290 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   15290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15294:	78c3      	ldrb	r3, [r0, #3]
{
   15296:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15298:	b9db      	cbnz	r3, 152d2 <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   1529a:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1529e:	4b18      	ldr	r3, [pc, #96]	; (15300 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   152a0:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   152a4:	681d      	ldr	r5, [r3, #0]
   152a6:	b9bd      	cbnz	r5, 152d8 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152a8:	4d16      	ldr	r5, [pc, #88]	; (15304 <bt_conn_identity_resolved+0x74>)
   152aa:	4f17      	ldr	r7, [pc, #92]	; (15308 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   152ac:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152b0:	42bd      	cmp	r5, r7
   152b2:	d921      	bls.n	152f8 <bt_conn_identity_resolved+0x68>
   152b4:	4915      	ldr	r1, [pc, #84]	; (1530c <bt_conn_identity_resolved+0x7c>)
   152b6:	f240 73bc 	movw	r3, #1980	; 0x7bc
   152ba:	4a15      	ldr	r2, [pc, #84]	; (15310 <bt_conn_identity_resolved+0x80>)
   152bc:	4815      	ldr	r0, [pc, #84]	; (15314 <bt_conn_identity_resolved+0x84>)
   152be:	f015 f9e8 	bl	2a692 <assert_print>
   152c2:	4815      	ldr	r0, [pc, #84]	; (15318 <bt_conn_identity_resolved+0x88>)
   152c4:	f015 f9e5 	bl	2a692 <assert_print>
   152c8:	f240 71bc 	movw	r1, #1980	; 0x7bc
   152cc:	4810      	ldr	r0, [pc, #64]	; (15310 <bt_conn_identity_resolved+0x80>)
   152ce:	f015 f9d9 	bl	2a684 <assert_post_action>
		rpa = &conn->le.init_addr;
   152d2:	f100 0697 	add.w	r6, r0, #151	; 0x97
   152d6:	e7e2      	b.n	1529e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   152d8:	692b      	ldr	r3, [r5, #16]
   152da:	b11b      	cbz	r3, 152e4 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   152dc:	463a      	mov	r2, r7
   152de:	4631      	mov	r1, r6
   152e0:	4620      	mov	r0, r4
   152e2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   152e4:	69ad      	ldr	r5, [r5, #24]
   152e6:	e7de      	b.n	152a6 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   152e8:	692b      	ldr	r3, [r5, #16]
   152ea:	b11b      	cbz	r3, 152f4 <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   152ec:	4642      	mov	r2, r8
   152ee:	4631      	mov	r1, r6
   152f0:	4620      	mov	r0, r4
   152f2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152f4:	351c      	adds	r5, #28
   152f6:	e7db      	b.n	152b0 <bt_conn_identity_resolved+0x20>
   152f8:	d3f6      	bcc.n	152e8 <bt_conn_identity_resolved+0x58>
		}
	}
}
   152fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   152fe:	bf00      	nop
   15300:	200215f4 	.word	0x200215f4
   15304:	00031420 	.word	0x00031420
   15308:	0003143c 	.word	0x0003143c
   1530c:	000352f6 	.word	0x000352f6
   15310:	000352c6 	.word	0x000352c6
   15314:	00032629 	.word	0x00032629
   15318:	0003368c 	.word	0x0003368c

0001531c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   1531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1531e:	7a43      	ldrb	r3, [r0, #9]
{
   15320:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   15322:	7283      	strb	r3, [r0, #10]
{
   15324:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   15326:	f017 fa33 	bl	2c790 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1532a:	4b14      	ldr	r3, [pc, #80]	; (1537c <bt_conn_security_changed+0x60>)
   1532c:	681d      	ldr	r5, [r3, #0]
   1532e:	b995      	cbnz	r5, 15356 <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15330:	4d13      	ldr	r5, [pc, #76]	; (15380 <bt_conn_security_changed+0x64>)
   15332:	4f14      	ldr	r7, [pc, #80]	; (15384 <bt_conn_security_changed+0x68>)
   15334:	42bd      	cmp	r5, r7
   15336:	d91e      	bls.n	15376 <bt_conn_security_changed+0x5a>
   15338:	4913      	ldr	r1, [pc, #76]	; (15388 <bt_conn_security_changed+0x6c>)
   1533a:	f640 0328 	movw	r3, #2088	; 0x828
   1533e:	4a13      	ldr	r2, [pc, #76]	; (1538c <bt_conn_security_changed+0x70>)
   15340:	4813      	ldr	r0, [pc, #76]	; (15390 <bt_conn_security_changed+0x74>)
   15342:	f015 f9a6 	bl	2a692 <assert_print>
   15346:	4813      	ldr	r0, [pc, #76]	; (15394 <bt_conn_security_changed+0x78>)
   15348:	f015 f9a3 	bl	2a692 <assert_print>
   1534c:	f640 0128 	movw	r1, #2088	; 0x828
   15350:	480e      	ldr	r0, [pc, #56]	; (1538c <bt_conn_security_changed+0x70>)
   15352:	f015 f997 	bl	2a684 <assert_post_action>
		if (cb->security_changed) {
   15356:	696b      	ldr	r3, [r5, #20]
   15358:	b11b      	cbz	r3, 15362 <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   1535a:	4632      	mov	r2, r6
   1535c:	4620      	mov	r0, r4
   1535e:	7a61      	ldrb	r1, [r4, #9]
   15360:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15362:	69ad      	ldr	r5, [r5, #24]
   15364:	e7e3      	b.n	1532e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   15366:	696b      	ldr	r3, [r5, #20]
   15368:	b11b      	cbz	r3, 15372 <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   1536a:	4632      	mov	r2, r6
   1536c:	4620      	mov	r0, r4
   1536e:	7a61      	ldrb	r1, [r4, #9]
   15370:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15372:	351c      	adds	r5, #28
   15374:	e7de      	b.n	15334 <bt_conn_security_changed+0x18>
   15376:	d3f6      	bcc.n	15366 <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   15378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1537a:	bf00      	nop
   1537c:	200215f4 	.word	0x200215f4
   15380:	00031420 	.word	0x00031420
   15384:	0003143c 	.word	0x0003143c
   15388:	000352f6 	.word	0x000352f6
   1538c:	000352c6 	.word	0x000352c6
   15390:	00032629 	.word	0x00032629
   15394:	0003368c 	.word	0x0003368c

00015398 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15398:	b538      	push	{r3, r4, r5, lr}
   1539a:	4605      	mov	r5, r0
   1539c:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1539e:	480b      	ldr	r0, [pc, #44]	; (153cc <bt_conn_add_le+0x34>)
   153a0:	2101      	movs	r1, #1
   153a2:	f7ff fb5f 	bl	14a64 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   153a6:	b180      	cbz	r0, 153ca <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   153a8:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   153aa:	6823      	ldr	r3, [r4, #0]
   153ac:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   153b0:	88a3      	ldrh	r3, [r4, #4]
   153b2:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   153b6:	79a3      	ldrb	r3, [r4, #6]
   153b8:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   153bc:	2301      	movs	r3, #1
   153be:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   153c0:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   153c2:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   153c4:	4b02      	ldr	r3, [pc, #8]	; (153d0 <bt_conn_add_le+0x38>)
   153c6:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   153ca:	bd38      	pop	{r3, r4, r5, pc}
   153cc:	20009da8 	.word	0x20009da8
   153d0:	00280018 	.word	0x00280018

000153d4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   153d4:	b570      	push	{r4, r5, r6, lr}
   153d6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   153d8:	480a      	ldr	r0, [pc, #40]	; (15404 <bt_conn_lookup_addr_le+0x30>)
{
   153da:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   153dc:	f7ff fcf6 	bl	14dcc <bt_conn_ref>
   153e0:	4604      	mov	r4, r0

		if (!conn) {
   153e2:	b120      	cbz	r0, 153ee <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   153e4:	7883      	ldrb	r3, [r0, #2]
   153e6:	2b01      	cmp	r3, #1
   153e8:	d004      	beq.n	153f4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   153ea:	f7ff fd17 	bl	14e1c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   153ee:	2400      	movs	r4, #0
}
   153f0:	4620      	mov	r0, r4
   153f2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   153f4:	4632      	mov	r2, r6
   153f6:	4629      	mov	r1, r5
   153f8:	f017 f933 	bl	2c662 <bt_conn_is_peer_addr_le>
   153fc:	2800      	cmp	r0, #0
   153fe:	d1f7      	bne.n	153f0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   15400:	4620      	mov	r0, r4
   15402:	e7f2      	b.n	153ea <bt_conn_lookup_addr_le+0x16>
   15404:	20009da8 	.word	0x20009da8

00015408 <bt_conn_exists_le>:
{
   15408:	b5b0      	push	{r4, r5, r7, lr}
   1540a:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1540c:	f7ff ffe2 	bl	153d4 <bt_conn_lookup_addr_le>
	if (conn) {
   15410:	4604      	mov	r4, r0
   15412:	b1e8      	cbz	r0, 15450 <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   15414:	7b43      	ldrb	r3, [r0, #13]
   15416:	466d      	mov	r5, sp
   15418:	2b08      	cmp	r3, #8
   1541a:	bf98      	it	ls
   1541c:	4a0d      	ldrls	r2, [pc, #52]	; (15454 <bt_conn_exists_le+0x4c>)
   1541e:	b088      	sub	sp, #32
   15420:	bf94      	ite	ls
   15422:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   15426:	4b0c      	ldrhi	r3, [pc, #48]	; (15458 <bt_conn_exists_le+0x50>)
   15428:	466a      	mov	r2, sp
   1542a:	490c      	ldr	r1, [pc, #48]	; (1545c <bt_conn_exists_le+0x54>)
   1542c:	480c      	ldr	r0, [pc, #48]	; (15460 <bt_conn_exists_le+0x58>)
   1542e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15432:	f44f 7300 	mov.w	r3, #512	; 0x200
   15436:	8393      	strh	r3, [r2, #28]
   15438:	4b0a      	ldr	r3, [pc, #40]	; (15464 <bt_conn_exists_le+0x5c>)
   1543a:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1543e:	f842 3f10 	str.w	r3, [r2, #16]!
   15442:	f017 f886 	bl	2c552 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   15446:	4620      	mov	r0, r4
   15448:	46ad      	mov	sp, r5
   1544a:	f7ff fce7 	bl	14e1c <bt_conn_unref>
		return true;
   1544e:	2001      	movs	r0, #1
}
   15450:	46bd      	mov	sp, r7
   15452:	bdb0      	pop	{r4, r5, r7, pc}
   15454:	00031f24 	.word	0x00031f24
   15458:	0003548f 	.word	0x0003548f
   1545c:	000355f8 	.word	0x000355f8
   15460:	00031494 	.word	0x00031494
   15464:	01000003 	.word	0x01000003

00015468 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1546a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1546c:	480e      	ldr	r0, [pc, #56]	; (154a8 <bt_conn_lookup_state_le+0x40>)
{
   1546e:	460e      	mov	r6, r1
   15470:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15472:	f7ff fcab 	bl	14dcc <bt_conn_ref>

		if (!conn) {
   15476:	4604      	mov	r4, r0
   15478:	b120      	cbz	r0, 15484 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1547a:	7883      	ldrb	r3, [r0, #2]
   1547c:	2b01      	cmp	r3, #1
   1547e:	d003      	beq.n	15488 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15480:	f7ff fccc 	bl	14e1c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15484:	2400      	movs	r4, #0
   15486:	e00d      	b.n	154a4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15488:	b136      	cbz	r6, 15498 <bt_conn_lookup_state_le+0x30>
   1548a:	4632      	mov	r2, r6
   1548c:	4629      	mov	r1, r5
   1548e:	f017 f8e8 	bl	2c662 <bt_conn_is_peer_addr_le>
   15492:	b908      	cbnz	r0, 15498 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   15494:	4620      	mov	r0, r4
   15496:	e7f3      	b.n	15480 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15498:	7b63      	ldrb	r3, [r4, #13]
   1549a:	42bb      	cmp	r3, r7
   1549c:	d1fa      	bne.n	15494 <bt_conn_lookup_state_le+0x2c>
   1549e:	7a23      	ldrb	r3, [r4, #8]
   154a0:	42ab      	cmp	r3, r5
   154a2:	d1f7      	bne.n	15494 <bt_conn_lookup_state_le+0x2c>
}
   154a4:	4620      	mov	r0, r4
   154a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154a8:	20009da8 	.word	0x20009da8

000154ac <send_conn_le_param_update>:
{
   154ac:	b538      	push	{r3, r4, r5, lr}
   154ae:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   154b0:	4608      	mov	r0, r1
{
   154b2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   154b4:	f016 fdf6 	bl	2c0a4 <bt_le_conn_params_valid>
   154b8:	b338      	cbz	r0, 1550a <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   154ba:	4b15      	ldr	r3, [pc, #84]	; (15510 <send_conn_le_param_update+0x64>)
   154bc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   154c0:	0799      	lsls	r1, r3, #30
   154c2:	d407      	bmi.n	154d4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   154c4:	78e3      	ldrb	r3, [r4, #3]
   154c6:	b173      	cbz	r3, 154e6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   154c8:	4629      	mov	r1, r5
   154ca:	4620      	mov	r0, r4
}
   154cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   154d0:	f000 bb02 	b.w	15ad8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   154d4:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   154d8:	079a      	lsls	r2, r3, #30
   154da:	d5f3      	bpl.n	154c4 <send_conn_le_param_update+0x18>
   154dc:	1d23      	adds	r3, r4, #4
   154de:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   154e2:	055b      	lsls	r3, r3, #21
   154e4:	d4ee      	bmi.n	154c4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   154e6:	4629      	mov	r1, r5
   154e8:	4620      	mov	r0, r4
   154ea:	f017 f8dc 	bl	2c6a6 <bt_conn_le_conn_update>
		if (rc == 0) {
   154ee:	b958      	cbnz	r0, 15508 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   154f0:	882b      	ldrh	r3, [r5, #0]
   154f2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   154f6:	886b      	ldrh	r3, [r5, #2]
   154f8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   154fc:	88ab      	ldrh	r3, [r5, #4]
   154fe:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   15502:	88eb      	ldrh	r3, [r5, #6]
   15504:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   15508:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1550a:	f06f 0015 	mvn.w	r0, #21
   1550e:	e7fb      	b.n	15508 <send_conn_le_param_update+0x5c>
   15510:	20008000 	.word	0x20008000

00015514 <deferred_work>:
{
   15514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15518:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   1551a:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   1551e:	4604      	mov	r4, r0
   15520:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   15522:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   15526:	bb8b      	cbnz	r3, 1558c <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   15528:	4630      	mov	r0, r6
   1552a:	f017 f919 	bl	2c760 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1552e:	4b3d      	ldr	r3, [pc, #244]	; (15624 <deferred_work+0x110>)
   15530:	681d      	ldr	r5, [r3, #0]
   15532:	b99d      	cbnz	r5, 1555c <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15534:	4d3c      	ldr	r5, [pc, #240]	; (15628 <deferred_work+0x114>)
   15536:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1562c <deferred_work+0x118>
   1553a:	4545      	cmp	r5, r8
   1553c:	d91e      	bls.n	1557c <deferred_work+0x68>
   1553e:	493c      	ldr	r1, [pc, #240]	; (15630 <deferred_work+0x11c>)
   15540:	f240 536c 	movw	r3, #1388	; 0x56c
   15544:	4a3b      	ldr	r2, [pc, #236]	; (15634 <deferred_work+0x120>)
   15546:	483c      	ldr	r0, [pc, #240]	; (15638 <deferred_work+0x124>)
   15548:	f015 f8a3 	bl	2a692 <assert_print>
   1554c:	483b      	ldr	r0, [pc, #236]	; (1563c <deferred_work+0x128>)
   1554e:	f015 f8a0 	bl	2a692 <assert_print>
   15552:	f240 516c 	movw	r1, #1388	; 0x56c
   15556:	4837      	ldr	r0, [pc, #220]	; (15634 <deferred_work+0x120>)
   15558:	f015 f894 	bl	2a684 <assert_post_action>
		if (cb->disconnected) {
   1555c:	686b      	ldr	r3, [r5, #4]
   1555e:	b11b      	cbz	r3, 15568 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   15560:	4630      	mov	r0, r6
   15562:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   15566:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15568:	69ad      	ldr	r5, [r5, #24]
   1556a:	e7e2      	b.n	15532 <deferred_work+0x1e>
		if (cb->disconnected) {
   1556c:	686b      	ldr	r3, [r5, #4]
   1556e:	b11b      	cbz	r3, 15578 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   15570:	4630      	mov	r0, r6
   15572:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   15576:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15578:	351c      	adds	r5, #28
   1557a:	e7de      	b.n	1553a <deferred_work+0x26>
   1557c:	d3f6      	bcc.n	1556c <deferred_work+0x58>
		bt_conn_unref(conn);
   1557e:	4630      	mov	r0, r6
   15580:	f7ff fc4c 	bl	14e1c <bt_conn_unref>
}
   15584:	3708      	adds	r7, #8
   15586:	46bd      	mov	sp, r7
   15588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   1558c:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   15590:	2b01      	cmp	r3, #1
   15592:	d1f7      	bne.n	15584 <deferred_work+0x70>
	if (atomic_test_and_clear_bit(conn->flags,
   15594:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15598:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1559c:	4628      	mov	r0, r5
   1559e:	f016 ffcd 	bl	2c53c <atomic_and>
   155a2:	0581      	lsls	r1, r0, #22
   155a4:	d526      	bpl.n	155f4 <deferred_work+0xe0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   155a8:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155aa:	603b      	str	r3, [r7, #0]
   155ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   155ae:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155b0:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   155b2:	f7ff ff7b 	bl	154ac <send_conn_le_param_update>
		if (!err) {
   155b6:	b968      	cbnz	r0, 155d4 <deferred_work+0xc0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   155b8:	f46f 7180 	mvn.w	r1, #256	; 0x100
   155bc:	4628      	mov	r0, r5
   155be:	f016 ffbd 	bl	2c53c <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   155c2:	e8d5 3fef 	ldaex	r3, [r5]
   155c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   155ca:	e8c5 3fe2 	stlex	r2, r3, [r5]
   155ce:	2a00      	cmp	r2, #0
   155d0:	d0d8      	beq.n	15584 <deferred_work+0x70>
   155d2:	e7f6      	b.n	155c2 <deferred_work+0xae>
			LOG_WRN("Send LE param update failed (err %d)", err);
   155d4:	466c      	mov	r4, sp
   155d6:	b088      	sub	sp, #32
   155d8:	466a      	mov	r2, sp
   155da:	4b19      	ldr	r3, [pc, #100]	; (15640 <deferred_work+0x12c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   155dc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   155e0:	2303      	movs	r3, #3
   155e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   155e6:	4817      	ldr	r0, [pc, #92]	; (15644 <deferred_work+0x130>)
   155e8:	f842 3f10 	str.w	r3, [r2, #16]!
   155ec:	f016 ffb1 	bl	2c552 <z_log_msg_static_create.constprop.0>
   155f0:	46a5      	mov	sp, r4
   155f2:	e7e6      	b.n	155c2 <deferred_work+0xae>
		param = BT_LE_CONN_PARAM(
   155f4:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   155f8:	4a13      	ldr	r2, [pc, #76]	; (15648 <deferred_work+0x134>)
		err = send_conn_le_param_update(conn, param);
   155fa:	4639      	mov	r1, r7
   155fc:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(
   155fe:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   15602:	f7ff ff53 	bl	154ac <send_conn_le_param_update>
		if (!err) {
   15606:	b940      	cbnz	r0, 1561a <deferred_work+0x106>
   15608:	e8d5 3fef 	ldaex	r3, [r5]
   1560c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15610:	e8c5 3fe2 	stlex	r2, r3, [r5]
   15614:	2a00      	cmp	r2, #0
   15616:	d0d4      	beq.n	155c2 <deferred_work+0xae>
   15618:	e7f6      	b.n	15608 <deferred_work+0xf4>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1561a:	466c      	mov	r4, sp
   1561c:	b088      	sub	sp, #32
   1561e:	466a      	mov	r2, sp
   15620:	4b0a      	ldr	r3, [pc, #40]	; (1564c <deferred_work+0x138>)
   15622:	e7db      	b.n	155dc <deferred_work+0xc8>
   15624:	200215f4 	.word	0x200215f4
   15628:	00031420 	.word	0x00031420
   1562c:	0003143c 	.word	0x0003143c
   15630:	000352f6 	.word	0x000352f6
   15634:	000352c6 	.word	0x000352c6
   15638:	00032629 	.word	0x00032629
   1563c:	0003368c 	.word	0x0003368c
   15640:	0003561b 	.word	0x0003561b
   15644:	00031494 	.word	0x00031494
   15648:	00280018 	.word	0x00280018
   1564c:	00035640 	.word	0x00035640

00015650 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15650:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   15652:	4801      	ldr	r0, [pc, #4]	; (15658 <bt_conn_create_frag_timeout+0x8>)
   15654:	f7ff bd34 	b.w	150c0 <bt_conn_create_pdu_timeout>
   15658:	20008da4 	.word	0x20008da4

0001565c <create_frag>:
{
   1565c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15660:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15662:	f04f 33ff 	mov.w	r3, #4294967295
   15666:	f04f 32ff 	mov.w	r2, #4294967295
   1566a:	2000      	movs	r0, #0
{
   1566c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1566e:	f7ff ffef 	bl	15650 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15672:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   15674:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15676:	2b07      	cmp	r3, #7
   15678:	f04f 0600 	mov.w	r6, #0
   1567c:	d005      	beq.n	1568a <create_frag+0x2e>
		net_buf_unref(frag);
   1567e:	f005 ff6f 	bl	1b560 <net_buf_unref>
		return NULL;
   15682:	4635      	mov	r5, r6
}
   15684:	4628      	mov	r0, r5
   15686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1568a:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   1568c:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   15690:	4e0c      	ldr	r6, [pc, #48]	; (156c4 <create_frag+0x68>)
   15692:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15694:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   15698:	f018 fca1 	bl	2dfde <net_buf_simple_tailroom>
   1569c:	4580      	cmp	r8, r0
   1569e:	d20c      	bcs.n	156ba <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   156a0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   156a4:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   156a8:	4632      	mov	r2, r6
   156aa:	4638      	mov	r0, r7
   156ac:	f018 fc9f 	bl	2dfee <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   156b0:	4631      	mov	r1, r6
   156b2:	4620      	mov	r0, r4
   156b4:	f006 f83a 	bl	1b72c <net_buf_simple_pull>
   156b8:	e7e4      	b.n	15684 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   156ba:	4638      	mov	r0, r7
   156bc:	f018 fc8f 	bl	2dfde <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   156c0:	b286      	uxth	r6, r0
   156c2:	e7ef      	b.n	156a4 <create_frag+0x48>
   156c4:	20008000 	.word	0x20008000

000156c8 <bt_conn_process_tx>:
{
   156c8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   156ca:	7b43      	ldrb	r3, [r0, #13]
{
   156cc:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   156ce:	b95b      	cbnz	r3, 156e8 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   156d0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   156d4:	3004      	adds	r0, #4
   156d6:	f016 ff31 	bl	2c53c <atomic_and>
   156da:	0643      	lsls	r3, r0, #25
   156dc:	d504      	bpl.n	156e8 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   156de:	4620      	mov	r0, r4
}
   156e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   156e4:	f7ff b9ec 	b.w	14ac0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   156e8:	2200      	movs	r2, #0
   156ea:	2300      	movs	r3, #0
   156ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   156f0:	f018 fc60 	bl	2dfb4 <net_buf_get>
	BT_ASSERT(buf);
   156f4:	4605      	mov	r5, r0
   156f6:	b960      	cbnz	r0, 15712 <bt_conn_process_tx+0x4a>
   156f8:	f240 331a 	movw	r3, #794	; 0x31a
   156fc:	4a22      	ldr	r2, [pc, #136]	; (15788 <bt_conn_process_tx+0xc0>)
   156fe:	4923      	ldr	r1, [pc, #140]	; (1578c <bt_conn_process_tx+0xc4>)
   15700:	4823      	ldr	r0, [pc, #140]	; (15790 <bt_conn_process_tx+0xc8>)
   15702:	f014 ffc6 	bl	2a692 <assert_print>
   15706:	4040      	eors	r0, r0
   15708:	f380 8811 	msr	BASEPRI, r0
   1570c:	f04f 0003 	mov.w	r0, #3
   15710:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15712:	4e20      	ldr	r6, [pc, #128]	; (15794 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   15714:	8a2a      	ldrh	r2, [r5, #16]
   15716:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1571a:	429a      	cmp	r2, r3
   1571c:	d807      	bhi.n	1572e <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1571e:	2300      	movs	r3, #0
   15720:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15722:	4629      	mov	r1, r5
   15724:	4620      	mov	r0, r4
   15726:	f7ff f8e7 	bl	148f8 <send_frag>
	if (!send_buf(conn, buf)) {
   1572a:	b968      	cbnz	r0, 15748 <bt_conn_process_tx+0x80>
   1572c:	e005      	b.n	1573a <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   1572e:	4629      	mov	r1, r5
   15730:	4620      	mov	r0, r4
   15732:	f7ff ff93 	bl	1565c <create_frag>
	if (!frag) {
   15736:	4601      	mov	r1, r0
   15738:	b938      	cbnz	r0, 1574a <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   1573a:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1573c:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   1573e:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   15740:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   15742:	f005 ff0d 	bl	1b560 <net_buf_unref>
		if (tx) {
   15746:	b9ce      	cbnz	r6, 1577c <bt_conn_process_tx+0xb4>
}
   15748:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1574a:	2301      	movs	r3, #1
   1574c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1574e:	4620      	mov	r0, r4
   15750:	f7ff f8d2 	bl	148f8 <send_frag>
   15754:	2800      	cmp	r0, #0
   15756:	d0f0      	beq.n	1573a <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   15758:	8a2a      	ldrh	r2, [r5, #16]
   1575a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1575e:	429a      	cmp	r2, r3
   15760:	d802      	bhi.n	15768 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   15762:	2300      	movs	r3, #0
   15764:	2203      	movs	r2, #3
   15766:	e7dc      	b.n	15722 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   15768:	4629      	mov	r1, r5
   1576a:	4620      	mov	r0, r4
   1576c:	f7ff ff76 	bl	1565c <create_frag>
		if (!frag) {
   15770:	4601      	mov	r1, r0
   15772:	2800      	cmp	r0, #0
   15774:	d0e1      	beq.n	1573a <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15776:	2301      	movs	r3, #1
   15778:	461a      	mov	r2, r3
   1577a:	e7e8      	b.n	1574e <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   1577c:	4631      	mov	r1, r6
   1577e:	4620      	mov	r0, r4
}
   15780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   15784:	f7ff b892 	b.w	148ac <conn_tx_destroy>
   15788:	000352c6 	.word	0x000352c6
   1578c:	00036908 	.word	0x00036908
   15790:	00032629 	.word	0x00032629
   15794:	20008000 	.word	0x20008000

00015798 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   15798:	4b0b      	ldr	r3, [pc, #44]	; (157c8 <bt_conn_auth_cb_register+0x30>)
   1579a:	b158      	cbz	r0, 157b4 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   1579c:	681a      	ldr	r2, [r3, #0]
   1579e:	b962      	cbnz	r2, 157ba <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   157a0:	6902      	ldr	r2, [r0, #16]
   157a2:	b93a      	cbnz	r2, 157b4 <bt_conn_auth_cb_register+0x1c>
   157a4:	6802      	ldr	r2, [r0, #0]
   157a6:	b95a      	cbnz	r2, 157c0 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   157a8:	6842      	ldr	r2, [r0, #4]
   157aa:	b94a      	cbnz	r2, 157c0 <bt_conn_auth_cb_register+0x28>
   157ac:	6882      	ldr	r2, [r0, #8]
   157ae:	b93a      	cbnz	r2, 157c0 <bt_conn_auth_cb_register+0x28>
   157b0:	6942      	ldr	r2, [r0, #20]
   157b2:	b92a      	cbnz	r2, 157c0 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   157b4:	6018      	str	r0, [r3, #0]
		return 0;
   157b6:	2000      	movs	r0, #0
   157b8:	4770      	bx	lr
		return -EALREADY;
   157ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   157be:	4770      	bx	lr
		return -EINVAL;
   157c0:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   157c4:	4770      	bx	lr
   157c6:	bf00      	nop
   157c8:	20021600 	.word	0x20021600

000157cc <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   157cc:	b168      	cbz	r0, 157ea <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   157ce:	2300      	movs	r3, #0
   157d0:	60c3      	str	r3, [r0, #12]
	return list->tail;
   157d2:	4b07      	ldr	r3, [pc, #28]	; (157f0 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   157d4:	f100 020c 	add.w	r2, r0, #12
   157d8:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   157da:	b919      	cbnz	r1, 157e4 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   157dc:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   157e0:	2000      	movs	r0, #0
   157e2:	4770      	bx	lr
	parent->next = child;
   157e4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   157e6:	605a      	str	r2, [r3, #4]
}
   157e8:	e7fa      	b.n	157e0 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   157ea:	f06f 0015 	mvn.w	r0, #21
}
   157ee:	4770      	bx	lr
   157f0:	200215f8 	.word	0x200215f8

000157f4 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   157f4:	b910      	cbnz	r0, 157fc <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   157f6:	4802      	ldr	r0, [pc, #8]	; (15800 <bt_conn_lookup_index+0xc>)
   157f8:	f7ff bae8 	b.w	14dcc <bt_conn_ref>
}
   157fc:	2000      	movs	r0, #0
   157fe:	4770      	bx	lr
   15800:	20009da8 	.word	0x20009da8

00015804 <bt_conn_init>:

int bt_conn_init(void)
{
   15804:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   15806:	480a      	ldr	r0, [pc, #40]	; (15830 <bt_conn_init+0x2c>)
   15808:	f01a fcb9 	bl	3017e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1580c:	4909      	ldr	r1, [pc, #36]	; (15834 <bt_conn_init+0x30>)
   1580e:	4808      	ldr	r0, [pc, #32]	; (15830 <bt_conn_init+0x2c>)
   15810:	f01a fcc2 	bl	30198 <k_queue_append>
   15814:	4908      	ldr	r1, [pc, #32]	; (15838 <bt_conn_init+0x34>)
   15816:	4806      	ldr	r0, [pc, #24]	; (15830 <bt_conn_init+0x2c>)
   15818:	f01a fcbe 	bl	30198 <k_queue_append>
	}

	bt_att_init();
   1581c:	f001 f932 	bl	16a84 <bt_att_init>

	err = bt_smp_init();
   15820:	f004 fd80 	bl	1a324 <bt_smp_init>
	if (err) {
   15824:	4604      	mov	r4, r0
   15826:	b908      	cbnz	r0, 1582c <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   15828:	f016 fffd 	bl	2c826 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1582c:	4620      	mov	r0, r4
   1582e:	bd10      	pop	{r4, pc}
   15830:	20008cb8 	.word	0x20008cb8
   15834:	200215d4 	.word	0x200215d4
   15838:	200215e4 	.word	0x200215e4

0001583c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1583c:	b580      	push	{r7, lr}
   1583e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   15840:	b088      	sub	sp, #32
   15842:	466a      	mov	r2, sp
   15844:	4b06      	ldr	r3, [pc, #24]	; (15860 <l2cap_create_le_sig_pdu.part.0+0x24>)
   15846:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1584a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1584e:	2303      	movs	r3, #3
   15850:	4804      	ldr	r0, [pc, #16]	; (15864 <l2cap_create_le_sig_pdu.part.0+0x28>)
   15852:	f842 3f10 	str.w	r3, [r2, #16]!
   15856:	f016 ff4f 	bl	2c6f8 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   1585a:	2000      	movs	r0, #0
   1585c:	46bd      	mov	sp, r7
   1585e:	bd80      	pop	{r7, pc}
   15860:	000356e3 	.word	0x000356e3
   15864:	000314dc 	.word	0x000314dc

00015868 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   15868:	b580      	push	{r7, lr}
   1586a:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   1586c:	b088      	sub	sp, #32
   1586e:	466a      	mov	r2, sp
   15870:	4b07      	ldr	r3, [pc, #28]	; (15890 <l2cap_accept.part.0+0x28>)
   15872:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15876:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1587a:	2303      	movs	r3, #3
   1587c:	4805      	ldr	r0, [pc, #20]	; (15894 <l2cap_accept.part.0+0x2c>)
   1587e:	f842 3f10 	str.w	r3, [r2, #16]!
   15882:	f016 ff39 	bl	2c6f8 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   15886:	f06f 000b 	mvn.w	r0, #11
   1588a:	46bd      	mov	sp, r7
   1588c:	bd80      	pop	{r7, pc}
   1588e:	bf00      	nop
   15890:	0003570b 	.word	0x0003570b
   15894:	000314dc 	.word	0x000314dc

00015898 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   15898:	4b04      	ldr	r3, [pc, #16]	; (158ac <l2cap_accept+0x14>)
   1589a:	681a      	ldr	r2, [r3, #0]
   1589c:	b10a      	cbz	r2, 158a2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1589e:	f7ff bfe3 	b.w	15868 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   158a2:	4803      	ldr	r0, [pc, #12]	; (158b0 <l2cap_accept+0x18>)
   158a4:	6058      	str	r0, [r3, #4]
}
   158a6:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   158a8:	600b      	str	r3, [r1, #0]
}
   158aa:	4770      	bx	lr
   158ac:	20021604 	.word	0x20021604
   158b0:	00031f68 	.word	0x00031f68

000158b4 <bt_l2cap_connected>:
{
   158b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   158b6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   158b8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   158ba:	4d27      	ldr	r5, [pc, #156]	; (15958 <bt_l2cap_connected+0xa4>)
   158bc:	4f27      	ldr	r7, [pc, #156]	; (1595c <bt_l2cap_connected+0xa8>)
   158be:	42bd      	cmp	r5, r7
   158c0:	d946      	bls.n	15950 <bt_l2cap_connected+0x9c>
   158c2:	4927      	ldr	r1, [pc, #156]	; (15960 <bt_l2cap_connected+0xac>)
   158c4:	f240 1381 	movw	r3, #385	; 0x181
   158c8:	4a26      	ldr	r2, [pc, #152]	; (15964 <bt_l2cap_connected+0xb0>)
   158ca:	4827      	ldr	r0, [pc, #156]	; (15968 <bt_l2cap_connected+0xb4>)
   158cc:	f014 fee1 	bl	2a692 <assert_print>
   158d0:	4826      	ldr	r0, [pc, #152]	; (1596c <bt_l2cap_connected+0xb8>)
   158d2:	f014 fede 	bl	2a692 <assert_print>
   158d6:	f240 1181 	movw	r1, #385	; 0x181
   158da:	4822      	ldr	r0, [pc, #136]	; (15964 <bt_l2cap_connected+0xb0>)
   158dc:	f014 fed2 	bl	2a684 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   158e0:	4620      	mov	r0, r4
   158e2:	686b      	ldr	r3, [r5, #4]
   158e4:	a901      	add	r1, sp, #4
   158e6:	4798      	blx	r3
   158e8:	2800      	cmp	r0, #0
   158ea:	db2c      	blt.n	15946 <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   158ec:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   158ee:	882a      	ldrh	r2, [r5, #0]
   158f0:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   158f2:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   158f4:	68a8      	ldr	r0, [r5, #8]
   158f6:	f103 0210 	add.w	r2, r3, #16
   158fa:	e8d2 1fef 	ldaex	r1, [r2]
   158fe:	e8c2 6fec 	stlex	ip, r6, [r2]
   15902:	f1bc 0f00 	cmp.w	ip, #0
   15906:	d1f8      	bne.n	158fa <bt_l2cap_connected+0x46>
	parent->next = child;
   15908:	609e      	str	r6, [r3, #8]
	return list->tail;
   1590a:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1590c:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15910:	b9d9      	cbnz	r1, 1594a <bt_l2cap_connected+0x96>
	list->head = node;
   15912:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   15916:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   15918:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1591a:	9801      	ldr	r0, [sp, #4]
   1591c:	6843      	ldr	r3, [r0, #4]
   1591e:	681b      	ldr	r3, [r3, #0]
   15920:	b103      	cbz	r3, 15924 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   15922:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15924:	9b01      	ldr	r3, [sp, #4]
   15926:	3310      	adds	r3, #16
   15928:	e8d3 1fef 	ldaex	r1, [r3]
   1592c:	f041 0101 	orr.w	r1, r1, #1
   15930:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15934:	2a00      	cmp	r2, #0
   15936:	d1f7      	bne.n	15928 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   15938:	9801      	ldr	r0, [sp, #4]
   1593a:	6843      	ldr	r3, [r0, #4]
   1593c:	69db      	ldr	r3, [r3, #28]
   1593e:	b113      	cbz	r3, 15946 <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   15940:	f100 0110 	add.w	r1, r0, #16
   15944:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15946:	350c      	adds	r5, #12
   15948:	e7b9      	b.n	158be <bt_l2cap_connected+0xa>
	parent->next = child;
   1594a:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1594c:	65a2      	str	r2, [r4, #88]	; 0x58
}
   1594e:	e7e2      	b.n	15916 <bt_l2cap_connected+0x62>
   15950:	d3c6      	bcc.n	158e0 <bt_l2cap_connected+0x2c>
}
   15952:	b003      	add	sp, #12
   15954:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15956:	bf00      	nop
   15958:	000313fc 	.word	0x000313fc
   1595c:	00031420 	.word	0x00031420
   15960:	00035763 	.word	0x00035763
   15964:	00035732 	.word	0x00035732
   15968:	00032629 	.word	0x00032629
   1596c:	0003368c 	.word	0x0003368c

00015970 <l2cap_recv>:
{
   15970:	b5f0      	push	{r4, r5, r6, r7, lr}
   15972:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   15974:	8a0b      	ldrh	r3, [r1, #16]
{
   15976:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   15978:	2b03      	cmp	r3, #3
{
   1597a:	460d      	mov	r5, r1
   1597c:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1597e:	d80b      	bhi.n	15998 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   15980:	4b30      	ldr	r3, [pc, #192]	; (15a44 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15982:	617b      	str	r3, [r7, #20]
   15984:	2302      	movs	r3, #2
   15986:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1598a:	482f      	ldr	r0, [pc, #188]	; (15a48 <l2cap_recv+0xd8>)
   1598c:	613b      	str	r3, [r7, #16]
   1598e:	f107 0210 	add.w	r2, r7, #16
   15992:	f016 feb1 	bl	2c6f8 <z_log_msg_static_create.constprop.0>
		return 0;
   15996:	e019      	b.n	159cc <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   15998:	2104      	movs	r1, #4
   1599a:	f105 000c 	add.w	r0, r5, #12
   1599e:	f005 fee3 	bl	1b768 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   159a2:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   159a4:	8843      	ldrh	r3, [r0, #2]
   159a6:	4604      	mov	r4, r0
	if (buf->len != len) {
   159a8:	4299      	cmp	r1, r3
   159aa:	d013      	beq.n	159d4 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   159ac:	466c      	mov	r4, sp
   159ae:	b088      	sub	sp, #32
   159b0:	aa02      	add	r2, sp, #8
   159b2:	61d3      	str	r3, [r2, #28]
   159b4:	2304      	movs	r3, #4
   159b6:	4825      	ldr	r0, [pc, #148]	; (15a4c <l2cap_recv+0xdc>)
   159b8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   159bc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   159c0:	4821      	ldr	r0, [pc, #132]	; (15a48 <l2cap_recv+0xd8>)
   159c2:	f842 3f10 	str.w	r3, [r2, #16]!
   159c6:	f016 fe97 	bl	2c6f8 <z_log_msg_static_create.constprop.0>
   159ca:	46a5      	mov	sp, r4
}
   159cc:	2000      	movs	r0, #0
   159ce:	371c      	adds	r7, #28
   159d0:	46bd      	mov	sp, r7
   159d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   159d4:	7843      	ldrb	r3, [r0, #1]
   159d6:	b90b      	cbnz	r3, 159dc <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   159d8:	4b1d      	ldr	r3, [pc, #116]	; (15a50 <l2cap_recv+0xe0>)
   159da:	e7d2      	b.n	15982 <l2cap_recv+0x12>
	switch (hdr->code) {
   159dc:	7803      	ldrb	r3, [r0, #0]
   159de:	2b01      	cmp	r3, #1
   159e0:	d0f4      	beq.n	159cc <l2cap_recv+0x5c>
   159e2:	2b13      	cmp	r3, #19
   159e4:	d103      	bne.n	159ee <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   159e6:	2901      	cmp	r1, #1
   159e8:	d8f0      	bhi.n	159cc <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   159ea:	4b1a      	ldr	r3, [pc, #104]	; (15a54 <l2cap_recv+0xe4>)
   159ec:	e7c9      	b.n	15982 <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   159ee:	466d      	mov	r5, sp
   159f0:	b088      	sub	sp, #32
   159f2:	aa02      	add	r2, sp, #8
   159f4:	4918      	ldr	r1, [pc, #96]	; (15a58 <l2cap_recv+0xe8>)
   159f6:	4814      	ldr	r0, [pc, #80]	; (15a48 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   159f8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   159fc:	2303      	movs	r3, #3
   159fe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15a02:	f842 3f10 	str.w	r3, [r2, #16]!
   15a06:	f016 fe77 	bl	2c6f8 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15a0a:	2202      	movs	r2, #2
   15a0c:	46ad      	mov	sp, r5
   15a0e:	7861      	ldrb	r1, [r4, #1]
   15a10:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   15a12:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15a14:	f016 fe73 	bl	2c6fe <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15a18:	4604      	mov	r4, r0
   15a1a:	2800      	cmp	r0, #0
   15a1c:	d0d6      	beq.n	159cc <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   15a1e:	2102      	movs	r1, #2
   15a20:	300c      	adds	r0, #12
   15a22:	f005 febf 	bl	1b7a4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   15a26:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15a28:	4622      	mov	r2, r4
   15a2a:	7003      	strb	r3, [r0, #0]
   15a2c:	7043      	strb	r3, [r0, #1]
   15a2e:	2105      	movs	r1, #5
   15a30:	4628      	mov	r0, r5
   15a32:	9300      	str	r3, [sp, #0]
   15a34:	f016 fecc 	bl	2c7d0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   15a38:	2800      	cmp	r0, #0
   15a3a:	d0c7      	beq.n	159cc <l2cap_recv+0x5c>
		net_buf_unref(buf);
   15a3c:	4620      	mov	r0, r4
   15a3e:	f005 fd8f 	bl	1b560 <net_buf_unref>
   15a42:	e7c3      	b.n	159cc <l2cap_recv+0x5c>
   15a44:	0003578a 	.word	0x0003578a
   15a48:	000314dc 	.word	0x000314dc
   15a4c:	000357a8 	.word	0x000357a8
   15a50:	000357c9 	.word	0x000357c9
   15a54:	000357ea 	.word	0x000357ea
   15a58:	00035806 	.word	0x00035806

00015a5c <bt_l2cap_recv>:
{
   15a5c:	b5b0      	push	{r4, r5, r7, lr}
   15a5e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15a60:	8a0b      	ldrh	r3, [r1, #16]
{
   15a62:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   15a64:	2b03      	cmp	r3, #3
{
   15a66:	460c      	mov	r4, r1
   15a68:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   15a6a:	d810      	bhi.n	15a8e <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   15a6c:	4b17      	ldr	r3, [pc, #92]	; (15acc <bt_l2cap_recv+0x70>)
   15a6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a72:	617b      	str	r3, [r7, #20]
   15a74:	2302      	movs	r3, #2
   15a76:	4816      	ldr	r0, [pc, #88]	; (15ad0 <bt_l2cap_recv+0x74>)
   15a78:	613b      	str	r3, [r7, #16]
   15a7a:	f107 0210 	add.w	r2, r7, #16
   15a7e:	f016 fe3b 	bl	2c6f8 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   15a82:	4620      	mov	r0, r4
   15a84:	f005 fd6c 	bl	1b560 <net_buf_unref>
}
   15a88:	3718      	adds	r7, #24
   15a8a:	46bd      	mov	sp, r7
   15a8c:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15a8e:	2104      	movs	r1, #4
   15a90:	f104 000c 	add.w	r0, r4, #12
   15a94:	f005 fe68 	bl	1b768 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15a98:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   15a9a:	4628      	mov	r0, r5
   15a9c:	f016 feba 	bl	2c814 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15aa0:	b978      	cbnz	r0, 15ac2 <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   15aa2:	466d      	mov	r5, sp
   15aa4:	b088      	sub	sp, #32
   15aa6:	466a      	mov	r2, sp
   15aa8:	4b0a      	ldr	r3, [pc, #40]	; (15ad4 <bt_l2cap_recv+0x78>)
   15aaa:	4809      	ldr	r0, [pc, #36]	; (15ad0 <bt_l2cap_recv+0x74>)
   15aac:	e9c2 3105 	strd	r3, r1, [r2, #20]
   15ab0:	2303      	movs	r3, #3
   15ab2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15ab6:	f842 3f10 	str.w	r3, [r2, #16]!
   15aba:	f016 fe1d 	bl	2c6f8 <z_log_msg_static_create.constprop.0>
   15abe:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   15ac0:	e7df      	b.n	15a82 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   15ac2:	6843      	ldr	r3, [r0, #4]
   15ac4:	4621      	mov	r1, r4
   15ac6:	695b      	ldr	r3, [r3, #20]
   15ac8:	4798      	blx	r3
   15aca:	e7da      	b.n	15a82 <bt_l2cap_recv+0x26>
   15acc:	0003582e 	.word	0x0003582e
   15ad0:	000314dc 	.word	0x000314dc
   15ad4:	0003584b 	.word	0x0003584b

00015ad8 <bt_l2cap_update_conn_param>:
{
   15ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15ada:	4b17      	ldr	r3, [pc, #92]	; (15b38 <bt_l2cap_update_conn_param+0x60>)
{
   15adc:	460e      	mov	r6, r1
	ident++;
   15ade:	7819      	ldrb	r1, [r3, #0]
{
   15ae0:	4605      	mov	r5, r0
	ident++;
   15ae2:	3101      	adds	r1, #1
   15ae4:	b2c9      	uxtb	r1, r1
   15ae6:	2901      	cmp	r1, #1
   15ae8:	bf38      	it	cc
   15aea:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15aec:	2208      	movs	r2, #8
   15aee:	2012      	movs	r0, #18
	ident++;
   15af0:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15af2:	f016 fe04 	bl	2c6fe <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15af6:	4604      	mov	r4, r0
   15af8:	b1d0      	cbz	r0, 15b30 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   15afa:	2108      	movs	r1, #8
   15afc:	300c      	adds	r0, #12
   15afe:	f005 fe51 	bl	1b7a4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15b02:	8833      	ldrh	r3, [r6, #0]
   15b04:	4622      	mov	r2, r4
   15b06:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15b08:	8873      	ldrh	r3, [r6, #2]
   15b0a:	2105      	movs	r1, #5
   15b0c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15b0e:	88b3      	ldrh	r3, [r6, #4]
   15b10:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15b12:	88f3      	ldrh	r3, [r6, #6]
   15b14:	80c3      	strh	r3, [r0, #6]
   15b16:	2300      	movs	r3, #0
   15b18:	4628      	mov	r0, r5
   15b1a:	9300      	str	r3, [sp, #0]
   15b1c:	f016 fe58 	bl	2c7d0 <bt_l2cap_send_cb>
	if (err) {
   15b20:	4605      	mov	r5, r0
   15b22:	b110      	cbz	r0, 15b2a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   15b24:	4620      	mov	r0, r4
   15b26:	f005 fd1b 	bl	1b560 <net_buf_unref>
}
   15b2a:	4628      	mov	r0, r5
   15b2c:	b002      	add	sp, #8
   15b2e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15b30:	f06f 050b 	mvn.w	r5, #11
   15b34:	e7f9      	b.n	15b2a <bt_l2cap_update_conn_param+0x52>
   15b36:	bf00      	nop
   15b38:	200223f7 	.word	0x200223f7

00015b3c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15b3c:	2823      	cmp	r0, #35	; 0x23
   15b3e:	d81f      	bhi.n	15b80 <att_op_get_type+0x44>
   15b40:	281a      	cmp	r0, #26
   15b42:	d804      	bhi.n	15b4e <att_op_get_type+0x12>
   15b44:	1e43      	subs	r3, r0, #1
   15b46:	2b18      	cmp	r3, #24
   15b48:	d90e      	bls.n	15b68 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15b4a:	2006      	movs	r0, #6
   15b4c:	4770      	bx	lr
	switch (op) {
   15b4e:	f1a0 031b 	sub.w	r3, r0, #27
   15b52:	2b08      	cmp	r3, #8
   15b54:	d81e      	bhi.n	15b94 <att_op_get_type+0x58>
   15b56:	e8df f003 	tbb	[pc, r3]
   15b5a:	1d05      	.short	0x1d05
   15b5c:	191d231b 	.word	0x191d231b
   15b60:	1d25      	.short	0x1d25
   15b62:	05          	.byte	0x05
   15b63:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   15b64:	2003      	movs	r0, #3
   15b66:	4770      	bx	lr
   15b68:	2301      	movs	r3, #1
	switch (op) {
   15b6a:	4a0f      	ldr	r2, [pc, #60]	; (15ba8 <att_op_get_type+0x6c>)
   15b6c:	4083      	lsls	r3, r0
   15b6e:	401a      	ands	r2, r3
   15b70:	b9c2      	cbnz	r2, 15ba4 <att_op_get_type+0x68>
   15b72:	4a0e      	ldr	r2, [pc, #56]	; (15bac <att_op_get_type+0x70>)
   15b74:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   15b76:	2a00      	cmp	r2, #0
   15b78:	bf14      	ite	ne
   15b7a:	2001      	movne	r0, #1
   15b7c:	2006      	moveq	r0, #6
   15b7e:	4770      	bx	lr
	switch (op) {
   15b80:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   15b84:	2b52      	cmp	r3, #82	; 0x52
   15b86:	d105      	bne.n	15b94 <att_op_get_type+0x58>
		return ATT_COMMAND;
   15b88:	2000      	movs	r0, #0
}
   15b8a:	4770      	bx	lr
		return ATT_REQUEST;
   15b8c:	2001      	movs	r0, #1
   15b8e:	4770      	bx	lr
		return ATT_INDICATION;
   15b90:	2005      	movs	r0, #5
   15b92:	4770      	bx	lr
		return ATT_COMMAND;
   15b94:	f010 0f40 	tst.w	r0, #64	; 0x40
   15b98:	bf0c      	ite	eq
   15b9a:	2006      	moveq	r0, #6
   15b9c:	2000      	movne	r0, #0
   15b9e:	4770      	bx	lr
	switch (op) {
   15ba0:	2004      	movs	r0, #4
   15ba2:	4770      	bx	lr
		return ATT_RESPONSE;
   15ba4:	2002      	movs	r0, #2
   15ba6:	4770      	bx	lr
   15ba8:	028aaaaa 	.word	0x028aaaaa
   15bac:	01455554 	.word	0x01455554

00015bb0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15bb0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15bb2:	3804      	subs	r0, #4
   15bb4:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15bb6:	a901      	add	r1, sp, #4
   15bb8:	4802      	ldr	r0, [pc, #8]	; (15bc4 <bt_att_released+0x14>)
   15bba:	f00f f8b9 	bl	24d30 <k_mem_slab_free>
}
   15bbe:	b003      	add	sp, #12
   15bc0:	f85d fb04 	ldr.w	pc, [sp], #4
   15bc4:	20008a7c 	.word	0x20008a7c

00015bc8 <tx_meta_data_free>:
{
   15bc8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   15bca:	4604      	mov	r4, r0
   15bcc:	b948      	cbnz	r0, 15be2 <tx_meta_data_free+0x1a>
   15bce:	490a      	ldr	r1, [pc, #40]	; (15bf8 <tx_meta_data_free+0x30>)
   15bd0:	480a      	ldr	r0, [pc, #40]	; (15bfc <tx_meta_data_free+0x34>)
   15bd2:	23a6      	movs	r3, #166	; 0xa6
   15bd4:	4a0a      	ldr	r2, [pc, #40]	; (15c00 <tx_meta_data_free+0x38>)
   15bd6:	f014 fd5c 	bl	2a692 <assert_print>
   15bda:	21a6      	movs	r1, #166	; 0xa6
   15bdc:	4808      	ldr	r0, [pc, #32]	; (15c00 <tx_meta_data_free+0x38>)
   15bde:	f014 fd51 	bl	2a684 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   15be2:	2100      	movs	r1, #0
   15be4:	2214      	movs	r2, #20
   15be6:	f01a fce8 	bl	305ba <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   15bea:	4621      	mov	r1, r4
}
   15bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   15bf0:	4804      	ldr	r0, [pc, #16]	; (15c04 <tx_meta_data_free+0x3c>)
   15bf2:	f01a bad1 	b.w	30198 <k_queue_append>
   15bf6:	bf00      	nop
   15bf8:	000353d8 	.word	0x000353d8
   15bfc:	00032629 	.word	0x00032629
   15c00:	00035880 	.word	0x00035880
   15c04:	20008c9c 	.word	0x20008c9c

00015c08 <find_type_cb>:
{
   15c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c0c:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   15c0e:	f8d2 a000 	ldr.w	sl, [r2]
{
   15c12:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   15c14:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c18:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   15c1a:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c1c:	f642 0301 	movw	r3, #10241	; 0x2801
{
   15c20:	4680      	mov	r8, r0
   15c22:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c24:	6800      	ldr	r0, [r0, #0]
   15c26:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15c2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15c2c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   15c30:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c32:	f016 f91a 	bl	2be6a <bt_uuid_cmp>
   15c36:	2800      	cmp	r0, #0
   15c38:	d070      	beq.n	15d1c <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15c3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15c3e:	f8d8 0000 	ldr.w	r0, [r8]
   15c42:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15c46:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15c48:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   15c4c:	f016 f90d 	bl	2be6a <bt_uuid_cmp>
   15c50:	b138      	cbz	r0, 15c62 <find_type_cb+0x5a>
		if (data->group &&
   15c52:	68a3      	ldr	r3, [r4, #8]
   15c54:	b11b      	cbz	r3, 15c5e <find_type_cb+0x56>
   15c56:	885a      	ldrh	r2, [r3, #2]
   15c58:	42b2      	cmp	r2, r6
   15c5a:	d200      	bcs.n	15c5e <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   15c5c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15c5e:	2001      	movs	r0, #1
   15c60:	e009      	b.n	15c76 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15c62:	6861      	ldr	r1, [r4, #4]
   15c64:	4608      	mov	r0, r1
   15c66:	f016 fde9 	bl	2c83c <net_buf_frags_len>
   15c6a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15c6e:	1a1b      	subs	r3, r3, r0
   15c70:	2b03      	cmp	r3, #3
   15c72:	d804      	bhi.n	15c7e <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   15c74:	2000      	movs	r0, #0
}
   15c76:	3744      	adds	r7, #68	; 0x44
   15c78:	46bd      	mov	sp, r7
   15c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   15c7e:	4608      	mov	r0, r1
   15c80:	f005 fcca 	bl	1b618 <net_buf_frag_last>
   15c84:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15c86:	6860      	ldr	r0, [r4, #4]
   15c88:	f016 fdd8 	bl	2c83c <net_buf_frags_len>
   15c8c:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   15c90:	f105 090c 	add.w	r9, r5, #12
   15c94:	ebab 0b00 	sub.w	fp, fp, r0
   15c98:	4648      	mov	r0, r9
   15c9a:	f018 f9a0 	bl	2dfde <net_buf_simple_tailroom>
   15c9e:	4558      	cmp	r0, fp
   15ca0:	d93f      	bls.n	15d22 <find_type_cb+0x11a>
   15ca2:	6860      	ldr	r0, [r4, #4]
   15ca4:	f016 fdca 	bl	2c83c <net_buf_frags_len>
   15ca8:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15cac:	1a18      	subs	r0, r3, r0
	if (!len) {
   15cae:	b970      	cbnz	r0, 15cce <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15cb0:	6863      	ldr	r3, [r4, #4]
   15cb2:	7a98      	ldrb	r0, [r3, #10]
   15cb4:	f005 fa1a 	bl	1b0ec <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15cb8:	2200      	movs	r2, #0
   15cba:	2300      	movs	r3, #0
   15cbc:	f018 f975 	bl	2dfaa <net_buf_alloc_fixed>
		if (!frag) {
   15cc0:	4605      	mov	r5, r0
   15cc2:	2800      	cmp	r0, #0
   15cc4:	d0d6      	beq.n	15c74 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   15cc6:	4601      	mov	r1, r0
   15cc8:	6860      	ldr	r0, [r4, #4]
   15cca:	f005 fceb 	bl	1b6a4 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   15cce:	2300      	movs	r3, #0
   15cd0:	9300      	str	r3, [sp, #0]
   15cd2:	4641      	mov	r1, r8
   15cd4:	f8d8 a004 	ldr.w	sl, [r8, #4]
   15cd8:	2310      	movs	r3, #16
   15cda:	6878      	ldr	r0, [r7, #4]
   15cdc:	f107 0208 	add.w	r2, r7, #8
   15ce0:	47d0      	blx	sl
	if (read < 0) {
   15ce2:	f1b0 0800 	subs.w	r8, r0, #0
   15ce6:	db19      	blt.n	15d1c <find_type_cb+0x114>
	if (read != data->value_len) {
   15ce8:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15cea:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   15cec:	4542      	cmp	r2, r8
   15cee:	d03f      	beq.n	15d70 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15cf0:	4601      	mov	r1, r0
   15cf2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15cf6:	f016 f8e6 	bl	2bec6 <bt_uuid_create>
   15cfa:	b9b0      	cbnz	r0, 15d2a <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   15cfc:	466d      	mov	r5, sp
   15cfe:	b088      	sub	sp, #32
   15d00:	7c23      	ldrb	r3, [r4, #16]
   15d02:	aa02      	add	r2, sp, #8
   15d04:	491d      	ldr	r1, [pc, #116]	; (15d7c <find_type_cb+0x174>)
   15d06:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   15d0a:	2303      	movs	r3, #3
   15d0c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15d10:	481b      	ldr	r0, [pc, #108]	; (15d80 <find_type_cb+0x178>)
   15d12:	f842 3f10 	str.w	r3, [r2, #16]!
   15d16:	f016 fe80 	bl	2ca1a <z_log_msg_static_create.constprop.0>
   15d1a:	46ad      	mov	sp, r5
	data->group = NULL;
   15d1c:	2300      	movs	r3, #0
   15d1e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   15d20:	e79d      	b.n	15c5e <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   15d22:	4648      	mov	r0, r9
   15d24:	f018 f95b 	bl	2dfde <net_buf_simple_tailroom>
   15d28:	e7c1      	b.n	15cae <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   15d2a:	fa5f f288 	uxtb.w	r2, r8
   15d2e:	f107 0108 	add.w	r1, r7, #8
   15d32:	f107 0018 	add.w	r0, r7, #24
   15d36:	f016 f8c6 	bl	2bec6 <bt_uuid_create>
   15d3a:	b930      	cbnz	r0, 15d4a <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   15d3c:	466d      	mov	r5, sp
   15d3e:	b088      	sub	sp, #32
   15d40:	aa02      	add	r2, sp, #8
   15d42:	4b10      	ldr	r3, [pc, #64]	; (15d84 <find_type_cb+0x17c>)
   15d44:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15d48:	e7df      	b.n	15d0a <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15d4a:	f107 0118 	add.w	r1, r7, #24
   15d4e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15d52:	f016 f88a 	bl	2be6a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15d56:	2800      	cmp	r0, #0
   15d58:	d1e0      	bne.n	15d1c <find_type_cb+0x114>
	data->err = 0x00;
   15d5a:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   15d5c:	2104      	movs	r1, #4
   15d5e:	7463      	strb	r3, [r4, #17]
   15d60:	f105 000c 	add.w	r0, r5, #12
   15d64:	f005 fd1e 	bl	1b7a4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15d68:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15d6a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15d6c:	68a3      	ldr	r3, [r4, #8]
   15d6e:	e775      	b.n	15c5c <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   15d70:	f107 0108 	add.w	r1, r7, #8
   15d74:	f01a fbd7 	bl	30526 <memcmp>
   15d78:	e7ed      	b.n	15d56 <find_type_cb+0x14e>
   15d7a:	bf00      	nop
   15d7c:	000358af 	.word	0x000358af
   15d80:	0003148c 	.word	0x0003148c
   15d84:	000358ce 	.word	0x000358ce

00015d88 <chan_send>:
{
   15d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15d8c:	4606      	mov	r6, r0
   15d8e:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   15d90:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   15d94:	68cb      	ldr	r3, [r1, #12]
{
   15d96:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15d98:	2102      	movs	r1, #2
   15d9a:	3098      	adds	r0, #152	; 0x98
   15d9c:	f016 fd68 	bl	2c870 <atomic_test_bit>
   15da0:	2800      	cmp	r0, #0
   15da2:	d053      	beq.n	15e4c <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15da4:	781b      	ldrb	r3, [r3, #0]
   15da6:	2bd2      	cmp	r3, #210	; 0xd2
   15da8:	d11a      	bne.n	15de0 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   15daa:	6833      	ldr	r3, [r6, #0]
   15dac:	4621      	mov	r1, r4
   15dae:	6818      	ldr	r0, [r3, #0]
   15db0:	f017 fe0b 	bl	2d9ca <bt_smp_sign>
		if (err) {
   15db4:	4605      	mov	r5, r0
   15db6:	b198      	cbz	r0, 15de0 <chan_send+0x58>
			LOG_ERR("Error signing data");
   15db8:	4b26      	ldr	r3, [pc, #152]	; (15e54 <chan_send+0xcc>)
   15dba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15dbe:	9307      	str	r3, [sp, #28]
   15dc0:	2302      	movs	r3, #2
   15dc2:	4825      	ldr	r0, [pc, #148]	; (15e58 <chan_send+0xd0>)
   15dc4:	aa06      	add	r2, sp, #24
   15dc6:	9306      	str	r3, [sp, #24]
   15dc8:	f016 fe27 	bl	2ca1a <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   15dcc:	69a0      	ldr	r0, [r4, #24]
   15dce:	f7ff fefb 	bl	15bc8 <tx_meta_data_free>
			net_buf_unref(buf);
   15dd2:	4620      	mov	r0, r4
   15dd4:	f005 fbc4 	bl	1b560 <net_buf_unref>
}
   15dd8:	4628      	mov	r0, r5
   15dda:	b009      	add	sp, #36	; 0x24
   15ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15de0:	f104 000c 	add.w	r0, r4, #12
   15de4:	f018 f8f7 	bl	2dfd6 <net_buf_simple_headroom>
	state->len = buf->len;
   15de8:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   15dec:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15df0:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   15df2:	4607      	mov	r7, r0
   15df4:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   15df6:	68e3      	ldr	r3, [r4, #12]
   15df8:	7818      	ldrb	r0, [r3, #0]
   15dfa:	f7ff fe9f 	bl	15b3c <att_op_get_type>
   15dfe:	2805      	cmp	r0, #5
   15e00:	4605      	mov	r5, r0
	switch (op_type) {
   15e02:	d813      	bhi.n	15e2c <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15e04:	4b15      	ldr	r3, [pc, #84]	; (15e5c <chan_send+0xd4>)
   15e06:	4622      	mov	r2, r4
   15e08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15e0c:	2104      	movs	r1, #4
   15e0e:	4630      	mov	r0, r6
   15e10:	f8cd 9000 	str.w	r9, [sp]
   15e14:	f016 fcdc 	bl	2c7d0 <bt_l2cap_send_cb>
	if (err) {
   15e18:	4605      	mov	r5, r0
   15e1a:	2800      	cmp	r0, #0
   15e1c:	d0dc      	beq.n	15dd8 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   15e1e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15e20:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15e24:	fa13 f787 	uxtah	r7, r3, r7
   15e28:	60e7      	str	r7, [r4, #12]
}
   15e2a:	e7d5      	b.n	15dd8 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   15e2c:	f240 2357 	movw	r3, #599	; 0x257
   15e30:	4a0b      	ldr	r2, [pc, #44]	; (15e60 <chan_send+0xd8>)
   15e32:	490c      	ldr	r1, [pc, #48]	; (15e64 <chan_send+0xdc>)
   15e34:	480c      	ldr	r0, [pc, #48]	; (15e68 <chan_send+0xe0>)
   15e36:	f014 fc2c 	bl	2a692 <assert_print>
   15e3a:	4629      	mov	r1, r5
   15e3c:	480b      	ldr	r0, [pc, #44]	; (15e6c <chan_send+0xe4>)
   15e3e:	f014 fc28 	bl	2a692 <assert_print>
   15e42:	f240 2157 	movw	r1, #599	; 0x257
   15e46:	4806      	ldr	r0, [pc, #24]	; (15e60 <chan_send+0xd8>)
   15e48:	f014 fc1c 	bl	2a684 <assert_post_action>
		return -EINVAL;
   15e4c:	f06f 0515 	mvn.w	r5, #21
   15e50:	e7c2      	b.n	15dd8 <chan_send+0x50>
   15e52:	bf00      	nop
   15e54:	000358ed 	.word	0x000358ed
   15e58:	0003148c 	.word	0x0003148c
   15e5c:	00031f90 	.word	0x00031f90
   15e60:	00035880 	.word	0x00035880
   15e64:	00037ac9 	.word	0x00037ac9
   15e68:	00032629 	.word	0x00032629
   15e6c:	00035900 	.word	0x00035900

00015e70 <bt_att_chan_req_send>:
{
   15e70:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   15e72:	b958      	cbnz	r0, 15e8c <bt_att_chan_req_send+0x1c>
   15e74:	4919      	ldr	r1, [pc, #100]	; (15edc <bt_att_chan_req_send+0x6c>)
   15e76:	f44f 7346 	mov.w	r3, #792	; 0x318
   15e7a:	4a19      	ldr	r2, [pc, #100]	; (15ee0 <bt_att_chan_req_send+0x70>)
   15e7c:	4819      	ldr	r0, [pc, #100]	; (15ee4 <bt_att_chan_req_send+0x74>)
   15e7e:	f014 fc08 	bl	2a692 <assert_print>
   15e82:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   15e86:	4816      	ldr	r0, [pc, #88]	; (15ee0 <bt_att_chan_req_send+0x70>)
   15e88:	f014 fbfc 	bl	2a684 <assert_post_action>
   15e8c:	b949      	cbnz	r1, 15ea2 <bt_att_chan_req_send+0x32>
   15e8e:	4916      	ldr	r1, [pc, #88]	; (15ee8 <bt_att_chan_req_send+0x78>)
   15e90:	f240 3319 	movw	r3, #793	; 0x319
   15e94:	4a12      	ldr	r2, [pc, #72]	; (15ee0 <bt_att_chan_req_send+0x70>)
   15e96:	4813      	ldr	r0, [pc, #76]	; (15ee4 <bt_att_chan_req_send+0x74>)
   15e98:	f014 fbfb 	bl	2a692 <assert_print>
   15e9c:	f240 3119 	movw	r1, #793	; 0x319
   15ea0:	e7f1      	b.n	15e86 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   15ea2:	684a      	ldr	r2, [r1, #4]
   15ea4:	b94a      	cbnz	r2, 15eba <bt_att_chan_req_send+0x4a>
   15ea6:	4911      	ldr	r1, [pc, #68]	; (15eec <bt_att_chan_req_send+0x7c>)
   15ea8:	f240 331a 	movw	r3, #794	; 0x31a
   15eac:	4a0c      	ldr	r2, [pc, #48]	; (15ee0 <bt_att_chan_req_send+0x70>)
   15eae:	480d      	ldr	r0, [pc, #52]	; (15ee4 <bt_att_chan_req_send+0x74>)
   15eb0:	f014 fbef 	bl	2a692 <assert_print>
   15eb4:	f240 311a 	movw	r1, #794	; 0x31a
   15eb8:	e7e5      	b.n	15e86 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   15eba:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15ebe:	b14b      	cbz	r3, 15ed4 <bt_att_chan_req_send+0x64>
   15ec0:	490b      	ldr	r1, [pc, #44]	; (15ef0 <bt_att_chan_req_send+0x80>)
   15ec2:	f240 331b 	movw	r3, #795	; 0x31b
   15ec6:	4a06      	ldr	r2, [pc, #24]	; (15ee0 <bt_att_chan_req_send+0x70>)
   15ec8:	4806      	ldr	r0, [pc, #24]	; (15ee4 <bt_att_chan_req_send+0x74>)
   15eca:	f014 fbe2 	bl	2a692 <assert_print>
   15ece:	f240 311b 	movw	r1, #795	; 0x31b
   15ed2:	e7d8      	b.n	15e86 <bt_att_chan_req_send+0x16>
}
   15ed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   15ed8:	f016 bda2 	b.w	2ca20 <chan_req_send>
   15edc:	00035919 	.word	0x00035919
   15ee0:	00035880 	.word	0x00035880
   15ee4:	00032629 	.word	0x00032629
   15ee8:	0003592f 	.word	0x0003592f
   15eec:	0003591e 	.word	0x0003591e
   15ef0:	00035928 	.word	0x00035928

00015ef4 <att_get>:
{
   15ef4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15ef6:	7b43      	ldrb	r3, [r0, #13]
   15ef8:	2b07      	cmp	r3, #7
   15efa:	d00d      	beq.n	15f18 <att_get+0x24>
		LOG_WRN("Not connected");
   15efc:	4b18      	ldr	r3, [pc, #96]	; (15f60 <att_get+0x6c>)
   15efe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15f02:	9305      	str	r3, [sp, #20]
   15f04:	2302      	movs	r3, #2
   15f06:	aa04      	add	r2, sp, #16
   15f08:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
   15f0a:	4816      	ldr	r0, [pc, #88]	; (15f64 <att_get+0x70>)
   15f0c:	f016 fd85 	bl	2ca1a <z_log_msg_static_create.constprop.0>
		return NULL;
   15f10:	2000      	movs	r0, #0
}
   15f12:	b007      	add	sp, #28
   15f14:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   15f18:	2104      	movs	r1, #4
   15f1a:	f016 fc7b 	bl	2c814 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15f1e:	4603      	mov	r3, r0
   15f20:	b938      	cbnz	r0, 15f32 <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   15f22:	4b11      	ldr	r3, [pc, #68]	; (15f68 <att_get+0x74>)
   15f24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15f28:	9305      	str	r3, [sp, #20]
   15f2a:	2302      	movs	r3, #2
   15f2c:	aa04      	add	r2, sp, #16
   15f2e:	9304      	str	r3, [sp, #16]
   15f30:	e7eb      	b.n	15f0a <att_get+0x16>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   15f32:	2102      	movs	r1, #2
   15f34:	3094      	adds	r0, #148	; 0x94
   15f36:	f016 fc9b 	bl	2c870 <atomic_test_bit>
   15f3a:	b970      	cbnz	r0, 15f5a <att_get+0x66>
   15f3c:	490b      	ldr	r1, [pc, #44]	; (15f6c <att_get+0x78>)
   15f3e:	f640 332a 	movw	r3, #2858	; 0xb2a
   15f42:	4a0b      	ldr	r2, [pc, #44]	; (15f70 <att_get+0x7c>)
   15f44:	480b      	ldr	r0, [pc, #44]	; (15f74 <att_get+0x80>)
   15f46:	f014 fba4 	bl	2a692 <assert_print>
   15f4a:	480b      	ldr	r0, [pc, #44]	; (15f78 <att_get+0x84>)
   15f4c:	f014 fba1 	bl	2a692 <assert_print>
   15f50:	f640 312a 	movw	r1, #2858	; 0xb2a
   15f54:	4806      	ldr	r0, [pc, #24]	; (15f70 <att_get+0x7c>)
   15f56:	f014 fb95 	bl	2a684 <assert_post_action>
	return att_chan->att;
   15f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   15f5e:	e7d8      	b.n	15f12 <att_get+0x1e>
   15f60:	00035933 	.word	0x00035933
   15f64:	0003148c 	.word	0x0003148c
   15f68:	00035941 	.word	0x00035941
   15f6c:	0003595c 	.word	0x0003595c
   15f70:	00035880 	.word	0x00035880
   15f74:	00032629 	.word	0x00032629
   15f78:	0003598c 	.word	0x0003598c

00015f7c <bt_att_connected>:
{
   15f7c:	b510      	push	{r4, lr}
   15f7e:	4604      	mov	r4, r0
   15f80:	f100 0394 	add.w	r3, r0, #148	; 0x94
   15f84:	e8d3 1fef 	ldaex	r1, [r3]
   15f88:	f041 0104 	orr.w	r1, r1, #4
   15f8c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15f90:	2a00      	cmp	r2, #0
   15f92:	d1f7      	bne.n	15f84 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15f94:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   15f96:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15f98:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15f9a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   15f9c:	f016 fcaa 	bl	2c8f4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15fa0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   15fa4:	4903      	ldr	r1, [pc, #12]	; (15fb4 <bt_att_connected+0x38>)
   15fa6:	f00f ff7f 	bl	25ea8 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   15faa:	6820      	ldr	r0, [r4, #0]
}
   15fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   15fb0:	f002 bb54 	b.w	1865c <bt_gatt_connected>
   15fb4:	00016c85 	.word	0x00016c85

00015fb8 <read_group_cb>:
{
   15fb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15fbc:	f04f 0800 	mov.w	r8, #0
   15fc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   15fc4:	4605      	mov	r5, r0
   15fc6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15fc8:	6800      	ldr	r0, [r0, #0]
   15fca:	a902      	add	r1, sp, #8
{
   15fcc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   15fce:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15fd0:	f88d 8008 	strb.w	r8, [sp, #8]
   15fd4:	f8ad 300a 	strh.w	r3, [sp, #10]
   15fd8:	f015 ff47 	bl	2be6a <bt_uuid_cmp>
   15fdc:	b1a0      	cbz	r0, 16008 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15fde:	f642 0301 	movw	r3, #10241	; 0x2801
   15fe2:	6828      	ldr	r0, [r5, #0]
   15fe4:	a903      	add	r1, sp, #12
   15fe6:	f88d 800c 	strb.w	r8, [sp, #12]
   15fea:	f8ad 300e 	strh.w	r3, [sp, #14]
   15fee:	f015 ff3c 	bl	2be6a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15ff2:	b148      	cbz	r0, 16008 <read_group_cb+0x50>
		if (data->group &&
   15ff4:	6923      	ldr	r3, [r4, #16]
   15ff6:	b11b      	cbz	r3, 16000 <read_group_cb+0x48>
   15ff8:	885a      	ldrh	r2, [r3, #2]
   15ffa:	42b2      	cmp	r2, r6
   15ffc:	d200      	bcs.n	16000 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   15ffe:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16000:	2001      	movs	r0, #1
}
   16002:	b004      	add	sp, #16
   16004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16008:	6861      	ldr	r1, [r4, #4]
   1600a:	6828      	ldr	r0, [r5, #0]
   1600c:	f015 ff2d 	bl	2be6a <bt_uuid_cmp>
   16010:	b110      	cbz	r0, 16018 <read_group_cb+0x60>
		data->group = NULL;
   16012:	2300      	movs	r3, #0
   16014:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16016:	e7f3      	b.n	16000 <read_group_cb+0x48>
	if (data->rsp->len &&
   16018:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1601a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1601c:	781a      	ldrb	r2, [r3, #0]
   1601e:	b132      	cbz	r2, 1602e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16020:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   16022:	8a01      	ldrh	r1, [r0, #16]
   16024:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16026:	4293      	cmp	r3, r2
   16028:	da01      	bge.n	1602e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1602a:	2000      	movs	r0, #0
   1602c:	e7e9      	b.n	16002 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1602e:	2104      	movs	r1, #4
   16030:	300c      	adds	r0, #12
   16032:	f005 fbb7 	bl	1b7a4 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16036:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16038:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1603a:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1603c:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1603e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16040:	4b07      	ldr	r3, [pc, #28]	; (16060 <read_group_cb+0xa8>)
   16042:	9401      	str	r4, [sp, #4]
   16044:	9300      	str	r3, [sp, #0]
   16046:	4638      	mov	r0, r7
   16048:	2300      	movs	r3, #0
   1604a:	68a2      	ldr	r2, [r4, #8]
   1604c:	f016 fd29 	bl	2caa2 <att_chan_read>
	if (read < 0) {
   16050:	2800      	cmp	r0, #0
   16052:	dbea      	blt.n	1602a <read_group_cb+0x72>
	if (!data->group) {
   16054:	6920      	ldr	r0, [r4, #16]
   16056:	3800      	subs	r0, #0
   16058:	bf18      	it	ne
   1605a:	2001      	movne	r0, #1
   1605c:	e7d1      	b.n	16002 <read_group_cb+0x4a>
   1605e:	bf00      	nop
   16060:	0002c95b 	.word	0x0002c95b

00016064 <read_type_cb>:
{
   16064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16068:	6817      	ldr	r7, [r2, #0]
{
   1606a:	4605      	mov	r5, r0
   1606c:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1606e:	6800      	ldr	r0, [r0, #0]
   16070:	6851      	ldr	r1, [r2, #4]
{
   16072:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   16074:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16076:	f015 fef8 	bl	2be6a <bt_uuid_cmp>
   1607a:	4681      	mov	r9, r0
   1607c:	2800      	cmp	r0, #0
   1607e:	d13c      	bne.n	160fa <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16080:	4630      	mov	r0, r6
   16082:	2295      	movs	r2, #149	; 0x95
   16084:	4629      	mov	r1, r5
   16086:	f017 f9d0 	bl	2d42a <bt_gatt_check_perm>
   1608a:	4606      	mov	r6, r0
   1608c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1608e:	b140      	cbz	r0, 160a2 <read_type_cb+0x3e>
		if (data->rsp->len) {
   16090:	68e3      	ldr	r3, [r4, #12]
   16092:	781b      	ldrb	r3, [r3, #0]
   16094:	b10b      	cbz	r3, 1609a <read_type_cb+0x36>
			data->err = 0x00;
   16096:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1609a:	2000      	movs	r0, #0
}
   1609c:	b003      	add	sp, #12
   1609e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   160a2:	68a0      	ldr	r0, [r4, #8]
   160a4:	f005 fab8 	bl	1b618 <net_buf_frag_last>
   160a8:	2102      	movs	r1, #2
   160aa:	300c      	adds	r0, #12
   160ac:	f005 fb7a 	bl	1b7a4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   160b0:	4b13      	ldr	r3, [pc, #76]	; (16100 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   160b2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   160b4:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   160b8:	9300      	str	r3, [sp, #0]
   160ba:	9401      	str	r4, [sp, #4]
   160bc:	4633      	mov	r3, r6
   160be:	4629      	mov	r1, r5
   160c0:	4638      	mov	r0, r7
   160c2:	68a2      	ldr	r2, [r4, #8]
   160c4:	f016 fced 	bl	2caa2 <att_chan_read>
	if (read < 0) {
   160c8:	2800      	cmp	r0, #0
   160ca:	da07      	bge.n	160dc <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   160cc:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   160d0:	bf32      	itee	cc
   160d2:	200e      	movcc	r0, #14
		return -err;
   160d4:	4240      	negcs	r0, r0
   160d6:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   160d8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   160da:	e7de      	b.n	1609a <read_type_cb+0x36>
	if (!data->item) {
   160dc:	6923      	ldr	r3, [r4, #16]
   160de:	2b00      	cmp	r3, #0
   160e0:	d0db      	beq.n	1609a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   160e2:	68a0      	ldr	r0, [r4, #8]
   160e4:	f016 fbaa 	bl	2c83c <net_buf_frags_len>
   160e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   160ea:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   160ec:	68e3      	ldr	r3, [r4, #12]
   160ee:	781b      	ldrb	r3, [r3, #0]
   160f0:	4298      	cmp	r0, r3
   160f2:	bf94      	ite	ls
   160f4:	2000      	movls	r0, #0
   160f6:	2001      	movhi	r0, #1
   160f8:	e7d0      	b.n	1609c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   160fa:	2001      	movs	r0, #1
   160fc:	e7ce      	b.n	1609c <read_type_cb+0x38>
   160fe:	bf00      	nop
   16100:	0002c84d 	.word	0x0002c84d

00016104 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16108:	b082      	sub	sp, #8
   1610a:	af00      	add	r7, sp, #0
   1610c:	4604      	mov	r4, r0
   1610e:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16110:	2200      	movs	r2, #0
   16112:	2300      	movs	r3, #0
   16114:	4639      	mov	r1, r7
   16116:	483a      	ldr	r0, [pc, #232]	; (16200 <bt_att_accept+0xfc>)
   16118:	f00e fda0 	bl	24c5c <k_mem_slab_alloc>
   1611c:	4605      	mov	r5, r0
   1611e:	b1a8      	cbz	r0, 1614c <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   16120:	466d      	mov	r5, sp
   16122:	b088      	sub	sp, #32
   16124:	466a      	mov	r2, sp
   16126:	4b37      	ldr	r3, [pc, #220]	; (16204 <bt_att_accept+0x100>)
   16128:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1612c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16130:	2303      	movs	r3, #3
   16132:	4835      	ldr	r0, [pc, #212]	; (16208 <bt_att_accept+0x104>)
   16134:	f842 3f10 	str.w	r3, [r2, #16]!
   16138:	f016 fc6f 	bl	2ca1a <z_log_msg_static_create.constprop.0>
   1613c:	46ad      	mov	sp, r5
		return -ENOMEM;
   1613e:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   16142:	4628      	mov	r0, r5
   16144:	3708      	adds	r7, #8
   16146:	46bd      	mov	sp, r7
   16148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1614c:	f011 f950 	bl	273f0 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   16150:	4b2e      	ldr	r3, [pc, #184]	; (1620c <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   16152:	f8d7 8000 	ldr.w	r8, [r7]
   16156:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   16158:	6018      	str	r0, [r3, #0]
   1615a:	222c      	movs	r2, #44	; 0x2c
   1615c:	f108 0004 	add.w	r0, r8, #4
   16160:	f01a fa2b 	bl	305ba <memset>
	att->conn = conn;
   16164:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   16168:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1616a:	2200      	movs	r2, #0
	list->tail = NULL;
   1616c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   16170:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   16174:	2300      	movs	r3, #0
   16176:	4826      	ldr	r0, [pc, #152]	; (16210 <bt_att_accept+0x10c>)
   16178:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1617a:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1617c:	f00e fd6e 	bl	24c5c <k_mem_slab_alloc>
   16180:	4605      	mov	r5, r0
   16182:	b180      	cbz	r0, 161a6 <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   16184:	6823      	ldr	r3, [r4, #0]
   16186:	466c      	mov	r4, sp
   16188:	b088      	sub	sp, #32
   1618a:	466a      	mov	r2, sp
   1618c:	4921      	ldr	r1, [pc, #132]	; (16214 <bt_att_accept+0x110>)
   1618e:	481e      	ldr	r0, [pc, #120]	; (16208 <bt_att_accept+0x104>)
   16190:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16194:	2303      	movs	r3, #3
   16196:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1619a:	f842 3f10 	str.w	r3, [r2, #16]!
   1619e:	f016 fc3c 	bl	2ca1a <z_log_msg_static_create.constprop.0>
   161a2:	46a5      	mov	sp, r4
	if (!chan) {
   161a4:	e7cb      	b.n	1613e <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   161a6:	687b      	ldr	r3, [r7, #4]
   161a8:	4601      	mov	r1, r0
   161aa:	22f8      	movs	r2, #248	; 0xf8
   161ac:	4618      	mov	r0, r3
   161ae:	f01a fa04 	bl	305ba <memset>
	chan->chan.chan.ops = &ops;
   161b2:	4a19      	ldr	r2, [pc, #100]	; (16218 <bt_att_accept+0x114>)
   161b4:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   161b6:	30a0      	adds	r0, #160	; 0xa0
   161b8:	f019 ffe1 	bl	3017e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   161bc:	687b      	ldr	r3, [r7, #4]
   161be:	3398      	adds	r3, #152	; 0x98
   161c0:	e8d3 2fef 	ldaex	r2, [r3]
   161c4:	e8c3 5fe1 	stlex	r1, r5, [r3]
   161c8:	2900      	cmp	r1, #0
   161ca:	d1f9      	bne.n	161c0 <bt_att_accept+0xbc>
	chan->att = att;
   161cc:	687b      	ldr	r3, [r7, #4]
   161ce:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   161d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   161d2:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   161d6:	b91b      	cbnz	r3, 161e0 <bt_att_accept+0xdc>
   161d8:	f104 000c 	add.w	r0, r4, #12
   161dc:	f019 ffcf 	bl	3017e <z_impl_k_queue_init>
	return list->head;
   161e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   161e2:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   161e6:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   161ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   161ec:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   161ee:	b902      	cbnz	r2, 161f2 <bt_att_accept+0xee>
	list->tail = node;
   161f0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   161f2:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   161f4:	2b00      	cmp	r3, #0
   161f6:	d0a2      	beq.n	1613e <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   161f8:	3304      	adds	r3, #4
   161fa:	6033      	str	r3, [r6, #0]
	return 0;
   161fc:	e7a1      	b.n	16142 <bt_att_accept+0x3e>
   161fe:	bf00      	nop
   16200:	20008a5c 	.word	0x20008a5c
   16204:	000359a8 	.word	0x000359a8
   16208:	0003148c 	.word	0x0003148c
   1620c:	200216c0 	.word	0x200216c0
   16210:	20008a7c 	.word	0x20008a7c
   16214:	000359cd 	.word	0x000359cd
   16218:	200084e4 	.word	0x200084e4

0001621c <bt_att_chan_create_pdu>:
{
   1621c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   16220:	b086      	sub	sp, #24
   16222:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16224:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16226:	1c53      	adds	r3, r2, #1
   16228:	428b      	cmp	r3, r1
{
   1622a:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1622c:	d915      	bls.n	1625a <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1622e:	466c      	mov	r4, sp
   16230:	b088      	sub	sp, #32
   16232:	466a      	mov	r2, sp
   16234:	4829      	ldr	r0, [pc, #164]	; (162dc <bt_att_chan_create_pdu+0xc0>)
   16236:	61d3      	str	r3, [r2, #28]
   16238:	2304      	movs	r3, #4
   1623a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1623e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16242:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   16246:	4826      	ldr	r0, [pc, #152]	; (162e0 <bt_att_chan_create_pdu+0xc4>)
   16248:	f016 fbe7 	bl	2ca1a <z_log_msg_static_create.constprop.0>
   1624c:	46a5      	mov	sp, r4
		return NULL;
   1624e:	2400      	movs	r4, #0
}
   16250:	4620      	mov	r0, r4
   16252:	3718      	adds	r7, #24
   16254:	46bd      	mov	sp, r7
   16256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1625a:	4628      	mov	r0, r5
   1625c:	f7ff fc6e 	bl	15b3c <att_op_get_type>
   16260:	2802      	cmp	r0, #2
   16262:	d019      	beq.n	16298 <bt_att_chan_create_pdu+0x7c>
   16264:	2804      	cmp	r0, #4
   16266:	d017      	beq.n	16298 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   16268:	f04f 38ff 	mov.w	r8, #4294967295
   1626c:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   16270:	2100      	movs	r1, #0
   16272:	4642      	mov	r2, r8
   16274:	464b      	mov	r3, r9
   16276:	4608      	mov	r0, r1
   16278:	f016 faa7 	bl	2c7ca <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1627c:	4604      	mov	r4, r0
   1627e:	b980      	cbnz	r0, 162a2 <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   16280:	466c      	mov	r4, sp
   16282:	b088      	sub	sp, #32
   16284:	466a      	mov	r2, sp
   16286:	4b17      	ldr	r3, [pc, #92]	; (162e4 <bt_att_chan_create_pdu+0xc8>)
   16288:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1628c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   16290:	2303      	movs	r3, #3
   16292:	f842 3f10 	str.w	r3, [r2, #16]!
   16296:	e7d6      	b.n	16246 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   16298:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1629c:	f04f 0900 	mov.w	r9, #0
   162a0:	e7e6      	b.n	16270 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   162a2:	4811      	ldr	r0, [pc, #68]	; (162e8 <bt_att_chan_create_pdu+0xcc>)
   162a4:	4642      	mov	r2, r8
   162a6:	464b      	mov	r3, r9
   162a8:	f00f f910 	bl	254cc <z_impl_k_queue_get>
	if (!data) {
   162ac:	b970      	cbnz	r0, 162cc <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   162ae:	4b0f      	ldr	r3, [pc, #60]	; (162ec <bt_att_chan_create_pdu+0xd0>)
   162b0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   162b4:	617b      	str	r3, [r7, #20]
   162b6:	2302      	movs	r3, #2
   162b8:	4809      	ldr	r0, [pc, #36]	; (162e0 <bt_att_chan_create_pdu+0xc4>)
   162ba:	613b      	str	r3, [r7, #16]
   162bc:	f107 0210 	add.w	r2, r7, #16
   162c0:	f016 fbab 	bl	2ca1a <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   162c4:	4620      	mov	r0, r4
   162c6:	f005 f94b 	bl	1b560 <net_buf_unref>
		return NULL;
   162ca:	e7c0      	b.n	1624e <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   162cc:	61a0      	str	r0, [r4, #24]
   162ce:	2101      	movs	r1, #1
   162d0:	f104 000c 	add.w	r0, r4, #12
   162d4:	f005 fa66 	bl	1b7a4 <net_buf_simple_add>
	hdr->code = op;
   162d8:	7005      	strb	r5, [r0, #0]
	return buf;
   162da:	e7b9      	b.n	16250 <bt_att_chan_create_pdu+0x34>
   162dc:	000359f2 	.word	0x000359f2
   162e0:	0003148c 	.word	0x0003148c
   162e4:	000356e3 	.word	0x000356e3
   162e8:	20008c9c 	.word	0x20008c9c
   162ec:	00035a17 	.word	0x00035a17

000162f0 <bt_att_recv>:
{
   162f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162f4:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   162f6:	8a0b      	ldrh	r3, [r1, #16]
{
   162f8:	4682      	mov	sl, r0
   162fa:	460c      	mov	r4, r1
   162fc:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   162fe:	b97b      	cbnz	r3, 16320 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   16300:	4b4c      	ldr	r3, [pc, #304]	; (16434 <bt_att_recv+0x144>)
   16302:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16306:	617b      	str	r3, [r7, #20]
   16308:	2302      	movs	r3, #2
   1630a:	f107 0210 	add.w	r2, r7, #16
   1630e:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   16310:	4849      	ldr	r0, [pc, #292]	; (16438 <bt_att_recv+0x148>)
   16312:	f016 fb82 	bl	2ca1a <z_log_msg_static_create.constprop.0>
}
   16316:	2000      	movs	r0, #0
   16318:	371c      	adds	r7, #28
   1631a:	46bd      	mov	sp, r7
   1631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16320:	2101      	movs	r1, #1
   16322:	f104 000c 	add.w	r0, r4, #12
   16326:	f005 fa1f 	bl	1b768 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1632a:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1632e:	4605      	mov	r5, r0
   16330:	2b00      	cmp	r3, #0
   16332:	d0f0      	beq.n	16316 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16334:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   16336:	7801      	ldrb	r1, [r0, #0]
   16338:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1643c <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1633c:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   16340:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   16344:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   16348:	4288      	cmp	r0, r1
   1634a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1634e:	d114      	bne.n	1637a <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   16350:	f892 9002 	ldrb.w	r9, [r2, #2]
   16354:	f1b9 0f01 	cmp.w	r9, #1
   16358:	d131      	bne.n	163be <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1635a:	2100      	movs	r1, #0
   1635c:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   16360:	f016 fc45 	bl	2cbee <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   16364:	2800      	cmp	r0, #0
   16366:	d035      	beq.n	163d4 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   16368:	4b35      	ldr	r3, [pc, #212]	; (16440 <bt_att_recv+0x150>)
   1636a:	617b      	str	r3, [r7, #20]
   1636c:	2302      	movs	r3, #2
   1636e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16372:	613b      	str	r3, [r7, #16]
   16374:	f107 0210 	add.w	r2, r7, #16
   16378:	e7ca      	b.n	16310 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1637a:	3301      	adds	r3, #1
   1637c:	2b0e      	cmp	r3, #14
   1637e:	d1df      	bne.n	16340 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   16380:	466c      	mov	r4, sp
   16382:	b088      	sub	sp, #32
   16384:	466a      	mov	r2, sp
   16386:	4b2f      	ldr	r3, [pc, #188]	; (16444 <bt_att_recv+0x154>)
   16388:	482b      	ldr	r0, [pc, #172]	; (16438 <bt_att_recv+0x148>)
   1638a:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1638e:	2303      	movs	r3, #3
   16390:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16394:	f842 3f10 	str.w	r3, [r2, #16]!
   16398:	f016 fb3f 	bl	2ca1a <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1639c:	7829      	ldrb	r1, [r5, #0]
   1639e:	46a5      	mov	sp, r4
   163a0:	4608      	mov	r0, r1
   163a2:	f7ff fbcb 	bl	15b3c <att_op_get_type>
   163a6:	2800      	cmp	r0, #0
   163a8:	d0b5      	beq.n	16316 <bt_att_recv+0x26>
   163aa:	2805      	cmp	r0, #5
   163ac:	d0b3      	beq.n	16316 <bt_att_recv+0x26>
	if (!req) {
   163ae:	2900      	cmp	r1, #0
   163b0:	d0b1      	beq.n	16316 <bt_att_recv+0x26>
   163b2:	2306      	movs	r3, #6
   163b4:	2200      	movs	r2, #0
   163b6:	4630      	mov	r0, r6
   163b8:	f016 fd7d 	bl	2ceb6 <send_err_rsp.part.0>
   163bc:	e7ab      	b.n	16316 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   163be:	f1b9 0f05 	cmp.w	r9, #5
   163c2:	d107      	bne.n	163d4 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   163c4:	2101      	movs	r1, #1
   163c6:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   163ca:	f016 fc10 	bl	2cbee <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   163ce:	b108      	cbz	r0, 163d4 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   163d0:	4b1d      	ldr	r3, [pc, #116]	; (16448 <bt_att_recv+0x158>)
   163d2:	e7ca      	b.n	1636a <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   163d4:	44d8      	add	r8, fp
   163d6:	8a23      	ldrh	r3, [r4, #16]
   163d8:	f898 2001 	ldrb.w	r2, [r8, #1]
   163dc:	429a      	cmp	r2, r3
   163de:	d916      	bls.n	1640e <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   163e0:	46e9      	mov	r9, sp
   163e2:	b088      	sub	sp, #32
   163e4:	466a      	mov	r2, sp
   163e6:	7829      	ldrb	r1, [r5, #0]
   163e8:	2404      	movs	r4, #4
   163ea:	4818      	ldr	r0, [pc, #96]	; (1644c <bt_att_recv+0x15c>)
   163ec:	61d1      	str	r1, [r2, #28]
   163ee:	e9c2 0305 	strd	r0, r3, [r2, #20]
   163f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   163f6:	4810      	ldr	r0, [pc, #64]	; (16438 <bt_att_recv+0x148>)
   163f8:	f842 4f10 	str.w	r4, [r2, #16]!
   163fc:	f016 fb0d 	bl	2ca1a <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   16400:	f898 3002 	ldrb.w	r3, [r8, #2]
   16404:	46cd      	mov	sp, r9
   16406:	2b01      	cmp	r3, #1
   16408:	d185      	bne.n	16316 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   1640a:	4623      	mov	r3, r4
   1640c:	e00c      	b.n	16428 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   1640e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16412:	4621      	mov	r1, r4
   16414:	4630      	mov	r0, r6
   16416:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16418:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1641c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1641e:	f47f af7a 	bne.w	16316 <bt_att_recv+0x26>
   16422:	2800      	cmp	r0, #0
   16424:	f43f af77 	beq.w	16316 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16428:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1642a:	2900      	cmp	r1, #0
   1642c:	f43f af73 	beq.w	16316 <bt_att_recv+0x26>
   16430:	e7c0      	b.n	163b4 <bt_att_recv+0xc4>
   16432:	bf00      	nop
   16434:	00035a36 	.word	0x00035a36
   16438:	0003148c 	.word	0x0003148c
   1643c:	00031fa8 	.word	0x00031fa8
   16440:	00035a6b 	.word	0x00035a6b
   16444:	00035a51 	.word	0x00035a51
   16448:	00035a87 	.word	0x00035a87
   1644c:	00035aa6 	.word	0x00035aa6

00016450 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16450:	b5f0      	push	{r4, r5, r6, r7, lr}
   16452:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16454:	6803      	ldr	r3, [r0, #0]
   16456:	460d      	mov	r5, r1
   16458:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1645a:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1645c:	bf18      	it	ne
   1645e:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16460:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16462:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16464:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16466:	f017 f814 	bl	2d492 <bt_gatt_change_aware>
   1646a:	b948      	cbnz	r0, 16480 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1646c:	2105      	movs	r1, #5
   1646e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16472:	f016 fbbc 	bl	2cbee <atomic_test_and_set_bit>
   16476:	2800      	cmp	r0, #0
   16478:	d048      	beq.n	1650c <att_write_rsp.constprop.0+0xbc>
			return 0;
   1647a:	2000      	movs	r0, #0
}
   1647c:	b007      	add	sp, #28
   1647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   16480:	2e00      	cmp	r6, #0
   16482:	d045      	beq.n	16510 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   16484:	2218      	movs	r2, #24
   16486:	2100      	movs	r1, #0
   16488:	4668      	mov	r0, sp
   1648a:	f01a f896 	bl	305ba <memset>
	if (rsp) {
   1648e:	bb67      	cbnz	r7, 164ea <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   16490:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16492:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   16494:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16496:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   16498:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1649a:	2300      	movs	r3, #0
   1649c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   164a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164a2:	4a1c      	ldr	r2, [pc, #112]	; (16514 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   164a4:	9303      	str	r3, [sp, #12]
	data.len = len;
   164a6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   164aa:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   164ae:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   164b2:	2301      	movs	r3, #1
   164b4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164b8:	466b      	mov	r3, sp
   164ba:	f016 fa10 	bl	2c8de <bt_gatt_foreach_attr>
	if (data.err) {
   164be:	f89d 3014 	ldrb.w	r3, [sp, #20]
   164c2:	b1e3      	cbz	r3, 164fe <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   164c4:	2f00      	cmp	r7, #0
   164c6:	d0d8      	beq.n	1647a <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   164c8:	9b01      	ldr	r3, [sp, #4]
   164ca:	6998      	ldr	r0, [r3, #24]
   164cc:	f7ff fb7c 	bl	15bc8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   164d0:	9801      	ldr	r0, [sp, #4]
   164d2:	f005 f845 	bl	1b560 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   164d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   164da:	2d00      	cmp	r5, #0
   164dc:	d0cd      	beq.n	1647a <att_write_rsp.constprop.0+0x2a>
   164de:	4632      	mov	r2, r6
   164e0:	4629      	mov	r1, r5
   164e2:	4620      	mov	r0, r4
   164e4:	f016 fce7 	bl	2ceb6 <send_err_rsp.part.0>
   164e8:	e7c7      	b.n	1647a <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   164ea:	2200      	movs	r2, #0
   164ec:	4639      	mov	r1, r7
   164ee:	4620      	mov	r0, r4
   164f0:	f7ff fe94 	bl	1621c <bt_att_chan_create_pdu>
   164f4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   164f6:	2800      	cmp	r0, #0
   164f8:	d1ca      	bne.n	16490 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   164fa:	200e      	movs	r0, #14
   164fc:	e7be      	b.n	1647c <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   164fe:	9901      	ldr	r1, [sp, #4]
   16500:	2900      	cmp	r1, #0
   16502:	d0ba      	beq.n	1647a <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   16504:	4620      	mov	r0, r4
   16506:	f016 fabe 	bl	2ca86 <bt_att_chan_send_rsp>
   1650a:	e7b6      	b.n	1647a <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1650c:	2012      	movs	r0, #18
   1650e:	e7b5      	b.n	1647c <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16510:	2001      	movs	r0, #1
   16512:	e7b3      	b.n	1647c <att_write_rsp.constprop.0+0x2c>
   16514:	0002c87d 	.word	0x0002c87d

00016518 <bt_att_create_pdu>:
{
   16518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1651a:	af00      	add	r7, sp, #0
   1651c:	460e      	mov	r6, r1
   1651e:	4615      	mov	r5, r2
	att = att_get(conn);
   16520:	f7ff fce8 	bl	15ef4 <att_get>
	if (!att) {
   16524:	b1e0      	cbz	r0, 16560 <bt_att_create_pdu+0x48>
	return list->head;
   16526:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16528:	4618      	mov	r0, r3
   1652a:	b11b      	cbz	r3, 16534 <bt_att_create_pdu+0x1c>
	return node->next;
   1652c:	f850 39f0 	ldr.w	r3, [r0], #-240
   16530:	b103      	cbz	r3, 16534 <bt_att_create_pdu+0x1c>
   16532:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16534:	1c6c      	adds	r4, r5, #1
   16536:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16538:	b118      	cbz	r0, 16542 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1653a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1653c:	42a1      	cmp	r1, r4
   1653e:	d219      	bcs.n	16574 <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16540:	b983      	cbnz	r3, 16564 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   16542:	466d      	mov	r5, sp
   16544:	b088      	sub	sp, #32
   16546:	466a      	mov	r2, sp
   16548:	4b0e      	ldr	r3, [pc, #56]	; (16584 <bt_att_create_pdu+0x6c>)
   1654a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1654e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16552:	2303      	movs	r3, #3
   16554:	480c      	ldr	r0, [pc, #48]	; (16588 <bt_att_create_pdu+0x70>)
   16556:	f842 3f10 	str.w	r3, [r2, #16]!
   1655a:	f016 fa5e 	bl	2ca1a <z_log_msg_static_create.constprop.0>
   1655e:	46ad      	mov	sp, r5
		return NULL;
   16560:	2000      	movs	r0, #0
   16562:	e00b      	b.n	1657c <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16564:	4618      	mov	r0, r3
   16566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1656a:	b14b      	cbz	r3, 16580 <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1656c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1656e:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16570:	428a      	cmp	r2, r1
   16572:	d8f7      	bhi.n	16564 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   16574:	462a      	mov	r2, r5
   16576:	4631      	mov	r1, r6
   16578:	f7ff fe50 	bl	1621c <bt_att_chan_create_pdu>
}
   1657c:	46bd      	mov	sp, r7
   1657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16580:	4614      	mov	r4, r2
   16582:	e7da      	b.n	1653a <bt_att_create_pdu+0x22>
   16584:	00035ac5 	.word	0x00035ac5
   16588:	0003148c 	.word	0x0003148c

0001658c <att_read_group_req>:
{
   1658c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16590:	8a0e      	ldrh	r6, [r1, #16]
{
   16592:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   16594:	3e04      	subs	r6, #4
   16596:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   16598:	2e02      	cmp	r6, #2
{
   1659a:	4608      	mov	r0, r1
   1659c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1659e:	d001      	beq.n	165a4 <att_read_group_req+0x18>
   165a0:	2e10      	cmp	r6, #16
   165a2:	d16a      	bne.n	1667a <att_read_group_req+0xee>
   165a4:	2104      	movs	r1, #4
   165a6:	300c      	adds	r0, #12
   165a8:	f005 f8de 	bl	1b768 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   165ac:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   165b0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   165b2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   165b4:	1d01      	adds	r1, r0, #4
   165b6:	4632      	mov	r2, r6
   165b8:	4640      	mov	r0, r8
   165ba:	f015 fc84 	bl	2bec6 <bt_uuid_create>
   165be:	2800      	cmp	r0, #0
   165c0:	d05d      	beq.n	1667e <att_read_group_req+0xf2>
	if (!start || !end) {
   165c2:	2d00      	cmp	r5, #0
   165c4:	d03a      	beq.n	1663c <att_read_group_req+0xb0>
   165c6:	2600      	movs	r6, #0
   165c8:	2f00      	cmp	r7, #0
   165ca:	d036      	beq.n	1663a <att_read_group_req+0xae>
	if (start > end) {
   165cc:	42bd      	cmp	r5, r7
   165ce:	d835      	bhi.n	1663c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   165d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   165d4:	4640      	mov	r0, r8
   165d6:	a901      	add	r1, sp, #4
   165d8:	f88d 6004 	strb.w	r6, [sp, #4]
   165dc:	f8ad 3006 	strh.w	r3, [sp, #6]
   165e0:	f015 fc43 	bl	2be6a <bt_uuid_cmp>
   165e4:	bb70      	cbnz	r0, 16644 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   165e6:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   165e8:	2214      	movs	r2, #20
   165ea:	2100      	movs	r1, #0
   165ec:	a807      	add	r0, sp, #28
   165ee:	f019 ffe4 	bl	305ba <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   165f2:	2201      	movs	r2, #1
   165f4:	2111      	movs	r1, #17
   165f6:	4630      	mov	r0, r6
   165f8:	f7ff ff8e 	bl	16518 <bt_att_create_pdu>
   165fc:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   165fe:	2800      	cmp	r0, #0
   16600:	d03d      	beq.n	1667e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   16602:	2101      	movs	r1, #1
   16604:	300c      	adds	r0, #12
	data.uuid = uuid;
   16606:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1660a:	f005 f8cb 	bl	1b7a4 <net_buf_simple_add>
	data.rsp->len = 0U;
   1660e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16610:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16612:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   16614:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16616:	4a1b      	ldr	r2, [pc, #108]	; (16684 <att_read_group_req+0xf8>)
	data.group = NULL;
   16618:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1661a:	4628      	mov	r0, r5
   1661c:	ab07      	add	r3, sp, #28
   1661e:	f016 f95e 	bl	2c8de <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   16622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16624:	781b      	ldrb	r3, [r3, #0]
   16626:	bb1b      	cbnz	r3, 16670 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16628:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1662a:	6998      	ldr	r0, [r3, #24]
   1662c:	f7ff facc 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16630:	9809      	ldr	r0, [sp, #36]	; 0x24
   16632:	f004 ff95 	bl	1b560 <net_buf_unref>
	if (!req) {
   16636:	230a      	movs	r3, #10
   16638:	e001      	b.n	1663e <att_read_group_req+0xb2>
			*err = 0U;
   1663a:	463d      	mov	r5, r7
	if (!req) {
   1663c:	2301      	movs	r3, #1
   1663e:	462a      	mov	r2, r5
   16640:	2110      	movs	r1, #16
   16642:	e00e      	b.n	16662 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   16644:	f642 0301 	movw	r3, #10241	; 0x2801
   16648:	4640      	mov	r0, r8
   1664a:	a907      	add	r1, sp, #28
   1664c:	f88d 601c 	strb.w	r6, [sp, #28]
   16650:	f8ad 301e 	strh.w	r3, [sp, #30]
   16654:	f015 fc09 	bl	2be6a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16658:	2800      	cmp	r0, #0
   1665a:	d0c4      	beq.n	165e6 <att_read_group_req+0x5a>
	if (!req) {
   1665c:	2310      	movs	r3, #16
   1665e:	462a      	mov	r2, r5
   16660:	4619      	mov	r1, r3
   16662:	4620      	mov	r0, r4
   16664:	f016 fc27 	bl	2ceb6 <send_err_rsp.part.0>
		return 0;
   16668:	2000      	movs	r0, #0
}
   1666a:	b00c      	add	sp, #48	; 0x30
   1666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   16670:	4620      	mov	r0, r4
   16672:	9909      	ldr	r1, [sp, #36]	; 0x24
   16674:	f016 fa07 	bl	2ca86 <bt_att_chan_send_rsp>
	return 0;
   16678:	e7f6      	b.n	16668 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1667a:	2004      	movs	r0, #4
   1667c:	e7f5      	b.n	1666a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1667e:	200e      	movs	r0, #14
   16680:	e7f3      	b.n	1666a <att_read_group_req+0xde>
   16682:	bf00      	nop
   16684:	00015fb9 	.word	0x00015fb9

00016688 <att_read_mult_vl_req>:
{
   16688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1668c:	6846      	ldr	r6, [r0, #4]
{
   1668e:	4604      	mov	r4, r0
   16690:	460d      	mov	r5, r1
   16692:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16694:	2101      	movs	r1, #1
   16696:	4630      	mov	r0, r6
   16698:	f016 fefb 	bl	2d492 <bt_gatt_change_aware>
   1669c:	b950      	cbnz	r0, 166b4 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1669e:	2105      	movs	r1, #5
   166a0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   166a4:	f016 faa3 	bl	2cbee <atomic_test_and_set_bit>
   166a8:	2800      	cmp	r0, #0
   166aa:	d13b      	bne.n	16724 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   166ac:	2012      	movs	r0, #18
}
   166ae:	b005      	add	sp, #20
   166b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   166b4:	2210      	movs	r2, #16
   166b6:	2100      	movs	r1, #0
   166b8:	4668      	mov	r0, sp
   166ba:	f019 ff7e 	bl	305ba <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   166be:	2200      	movs	r2, #0
   166c0:	2121      	movs	r1, #33	; 0x21
   166c2:	4630      	mov	r0, r6
   166c4:	f7ff ff28 	bl	16518 <bt_att_create_pdu>
   166c8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   166ca:	b368      	cbz	r0, 16728 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   166cc:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   166d0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1672c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   166d4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   166d6:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   166da:	8a2b      	ldrh	r3, [r5, #16]
   166dc:	2b01      	cmp	r3, #1
   166de:	d804      	bhi.n	166ea <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   166e0:	4620      	mov	r0, r4
   166e2:	9902      	ldr	r1, [sp, #8]
   166e4:	f016 f9cf 	bl	2ca86 <bt_att_chan_send_rsp>
	return 0;
   166e8:	e01c      	b.n	16724 <att_read_mult_vl_req+0x9c>
   166ea:	4638      	mov	r0, r7
   166ec:	f017 fc6b 	bl	2dfc6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   166f0:	466b      	mov	r3, sp
   166f2:	464a      	mov	r2, r9
   166f4:	4601      	mov	r1, r0
   166f6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   166f8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   166fc:	f016 f8ef 	bl	2c8de <bt_gatt_foreach_attr>
		if (data.err) {
   16700:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16704:	2b00      	cmp	r3, #0
   16706:	d0e8      	beq.n	166da <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16708:	9b02      	ldr	r3, [sp, #8]
   1670a:	6998      	ldr	r0, [r3, #24]
   1670c:	f7ff fa5c 	bl	15bc8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16710:	9802      	ldr	r0, [sp, #8]
   16712:	f004 ff25 	bl	1b560 <net_buf_unref>
	if (!req) {
   16716:	4632      	mov	r2, r6
   16718:	2120      	movs	r1, #32
   1671a:	4620      	mov	r0, r4
   1671c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16720:	f016 fbc9 	bl	2ceb6 <send_err_rsp.part.0>
			return 0;
   16724:	2000      	movs	r0, #0
   16726:	e7c2      	b.n	166ae <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16728:	200e      	movs	r0, #14
   1672a:	e7c0      	b.n	166ae <att_read_mult_vl_req+0x26>
   1672c:	0002cc57 	.word	0x0002cc57

00016730 <att_read_mult_req>:
{
   16730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16734:	6846      	ldr	r6, [r0, #4]
{
   16736:	4604      	mov	r4, r0
   16738:	460d      	mov	r5, r1
   1673a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1673c:	2101      	movs	r1, #1
   1673e:	4630      	mov	r0, r6
   16740:	f016 fea7 	bl	2d492 <bt_gatt_change_aware>
   16744:	b950      	cbnz	r0, 1675c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16746:	2105      	movs	r1, #5
   16748:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1674c:	f016 fa4f 	bl	2cbee <atomic_test_and_set_bit>
   16750:	2800      	cmp	r0, #0
   16752:	d13b      	bne.n	167cc <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16754:	2012      	movs	r0, #18
}
   16756:	b005      	add	sp, #20
   16758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1675c:	2210      	movs	r2, #16
   1675e:	2100      	movs	r1, #0
   16760:	4668      	mov	r0, sp
   16762:	f019 ff2a 	bl	305ba <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16766:	2200      	movs	r2, #0
   16768:	210f      	movs	r1, #15
   1676a:	4630      	mov	r0, r6
   1676c:	f7ff fed4 	bl	16518 <bt_att_create_pdu>
   16770:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16772:	b368      	cbz	r0, 167d0 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16774:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16778:	f8df 9058 	ldr.w	r9, [pc, #88]	; 167d4 <att_read_mult_req+0xa4>
	data.chan = chan;
   1677c:	9400      	str	r4, [sp, #0]
   1677e:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   16782:	8a2b      	ldrh	r3, [r5, #16]
   16784:	2b01      	cmp	r3, #1
   16786:	d804      	bhi.n	16792 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16788:	4620      	mov	r0, r4
   1678a:	9902      	ldr	r1, [sp, #8]
   1678c:	f016 f97b 	bl	2ca86 <bt_att_chan_send_rsp>
	return 0;
   16790:	e01c      	b.n	167cc <att_read_mult_req+0x9c>
   16792:	4638      	mov	r0, r7
   16794:	f017 fc17 	bl	2dfc6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16798:	466b      	mov	r3, sp
   1679a:	464a      	mov	r2, r9
   1679c:	4601      	mov	r1, r0
   1679e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   167a0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   167a4:	f016 f89b 	bl	2c8de <bt_gatt_foreach_attr>
		if (data.err) {
   167a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   167ac:	2b00      	cmp	r3, #0
   167ae:	d0e8      	beq.n	16782 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   167b0:	9b02      	ldr	r3, [sp, #8]
   167b2:	6998      	ldr	r0, [r3, #24]
   167b4:	f7ff fa08 	bl	15bc8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   167b8:	9802      	ldr	r0, [sp, #8]
   167ba:	f004 fed1 	bl	1b560 <net_buf_unref>
	if (!req) {
   167be:	4632      	mov	r2, r6
   167c0:	210e      	movs	r1, #14
   167c2:	4620      	mov	r0, r4
   167c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   167c8:	f016 fb75 	bl	2ceb6 <send_err_rsp.part.0>
			return 0;
   167cc:	2000      	movs	r0, #0
   167ce:	e7c2      	b.n	16756 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   167d0:	200e      	movs	r0, #14
   167d2:	e7c0      	b.n	16756 <att_read_mult_req+0x26>
   167d4:	0002cc11 	.word	0x0002cc11

000167d8 <att_read_rsp>:
{
   167d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   167dc:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   167e0:	4604      	mov	r4, r0
   167e2:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   167e4:	4640      	mov	r0, r8
   167e6:	2101      	movs	r1, #1
{
   167e8:	4617      	mov	r7, r2
   167ea:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   167ec:	f016 fe51 	bl	2d492 <bt_gatt_change_aware>
   167f0:	b948      	cbnz	r0, 16806 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   167f2:	2105      	movs	r1, #5
   167f4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   167f8:	f016 f9f9 	bl	2cbee <atomic_test_and_set_bit>
   167fc:	bb78      	cbnz	r0, 1685e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   167fe:	2012      	movs	r0, #18
}
   16800:	b004      	add	sp, #16
   16802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   16806:	b38d      	cbz	r5, 1686c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   16808:	2210      	movs	r2, #16
   1680a:	2100      	movs	r1, #0
   1680c:	4668      	mov	r0, sp
   1680e:	f019 fed4 	bl	305ba <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16812:	2200      	movs	r2, #0
   16814:	4639      	mov	r1, r7
   16816:	4640      	mov	r0, r8
   16818:	f7ff fe7e 	bl	16518 <bt_att_create_pdu>
   1681c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1681e:	b338      	cbz	r0, 16870 <att_read_rsp+0x98>
	data.offset = offset;
   16820:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16824:	4629      	mov	r1, r5
	data.offset = offset;
   16826:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1682a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1682c:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1682e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16832:	4a10      	ldr	r2, [pc, #64]	; (16874 <att_read_rsp+0x9c>)
   16834:	466b      	mov	r3, sp
	data.chan = chan;
   16836:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16838:	f016 f851 	bl	2c8de <bt_gatt_foreach_attr>
	if (data.err) {
   1683c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16840:	b17b      	cbz	r3, 16862 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16842:	9b02      	ldr	r3, [sp, #8]
   16844:	6998      	ldr	r0, [r3, #24]
   16846:	f7ff f9bf 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1684a:	9802      	ldr	r0, [sp, #8]
   1684c:	f004 fe88 	bl	1b560 <net_buf_unref>
	if (!req) {
   16850:	462a      	mov	r2, r5
   16852:	4631      	mov	r1, r6
   16854:	4620      	mov	r0, r4
   16856:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1685a:	f016 fb2c 	bl	2ceb6 <send_err_rsp.part.0>
			return 0;
   1685e:	2000      	movs	r0, #0
   16860:	e7ce      	b.n	16800 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   16862:	4620      	mov	r0, r4
   16864:	9902      	ldr	r1, [sp, #8]
   16866:	f016 f90e 	bl	2ca86 <bt_att_chan_send_rsp>
	return 0;
   1686a:	e7f8      	b.n	1685e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1686c:	2001      	movs	r0, #1
   1686e:	e7c7      	b.n	16800 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   16870:	200e      	movs	r0, #14
   16872:	e7c5      	b.n	16800 <att_read_rsp+0x28>
   16874:	0002cc11 	.word	0x0002cc11

00016878 <att_read_type_req>:
{
   16878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1687c:	8a0d      	ldrh	r5, [r1, #16]
{
   1687e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   16880:	3d04      	subs	r5, #4
   16882:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   16884:	2d02      	cmp	r5, #2
{
   16886:	4608      	mov	r0, r1
   16888:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1688a:	d001      	beq.n	16890 <att_read_type_req+0x18>
   1688c:	2d10      	cmp	r5, #16
   1688e:	d150      	bne.n	16932 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   16890:	2104      	movs	r1, #4
   16892:	300c      	adds	r0, #12
   16894:	f004 ff68 	bl	1b768 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16898:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1689c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1689e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   168a0:	1d01      	adds	r1, r0, #4
   168a2:	462a      	mov	r2, r5
   168a4:	4640      	mov	r0, r8
   168a6:	f015 fb0e 	bl	2bec6 <bt_uuid_create>
   168aa:	b188      	cbz	r0, 168d0 <att_read_type_req+0x58>
	if (!start || !end) {
   168ac:	b19e      	cbz	r6, 168d6 <att_read_type_req+0x5e>
   168ae:	b18f      	cbz	r7, 168d4 <att_read_type_req+0x5c>
	if (start > end) {
   168b0:	42b7      	cmp	r7, r6
   168b2:	d310      	bcc.n	168d6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   168b4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   168b6:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   168b8:	2100      	movs	r1, #0
   168ba:	eb0d 0002 	add.w	r0, sp, r2
   168be:	f019 fe7c 	bl	305ba <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   168c2:	2201      	movs	r2, #1
   168c4:	2109      	movs	r1, #9
   168c6:	4628      	mov	r0, r5
   168c8:	f7ff fe26 	bl	16518 <bt_att_create_pdu>
   168cc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   168ce:	b960      	cbnz	r0, 168ea <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   168d0:	200e      	movs	r0, #14
   168d2:	e007      	b.n	168e4 <att_read_type_req+0x6c>
			*err = 0U;
   168d4:	463e      	mov	r6, r7
	if (!req) {
   168d6:	2301      	movs	r3, #1
   168d8:	4632      	mov	r2, r6
   168da:	2108      	movs	r1, #8
   168dc:	4620      	mov	r0, r4
   168de:	f016 faea 	bl	2ceb6 <send_err_rsp.part.0>
		return 0;
   168e2:	2000      	movs	r0, #0
}
   168e4:	b00c      	add	sp, #48	; 0x30
   168e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   168ea:	2101      	movs	r1, #1
   168ec:	300c      	adds	r0, #12
	data.uuid = uuid;
   168ee:	e9cd 4806 	strd	r4, r8, [sp, #24]
   168f2:	f004 ff57 	bl	1b7a4 <net_buf_simple_add>
	data.rsp->len = 0U;
   168f6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   168f8:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   168fa:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   168fc:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   168fe:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16900:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16904:	4630      	mov	r0, r6
   16906:	ab06      	add	r3, sp, #24
   16908:	4a0b      	ldr	r2, [pc, #44]	; (16938 <att_read_type_req+0xc0>)
   1690a:	f015 ffe8 	bl	2c8de <bt_gatt_foreach_attr>
	if (data.err) {
   1690e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16912:	b14b      	cbz	r3, 16928 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16914:	9b08      	ldr	r3, [sp, #32]
   16916:	6998      	ldr	r0, [r3, #24]
   16918:	f7ff f956 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1691c:	9808      	ldr	r0, [sp, #32]
   1691e:	f004 fe1f 	bl	1b560 <net_buf_unref>
	if (!req) {
   16922:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16926:	e7d7      	b.n	168d8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16928:	4620      	mov	r0, r4
   1692a:	9908      	ldr	r1, [sp, #32]
   1692c:	f016 f8ab 	bl	2ca86 <bt_att_chan_send_rsp>
	return 0;
   16930:	e7d7      	b.n	168e2 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   16932:	2004      	movs	r0, #4
   16934:	e7d6      	b.n	168e4 <att_read_type_req+0x6c>
   16936:	bf00      	nop
   16938:	00016065 	.word	0x00016065

0001693c <att_find_type_req>:
{
   1693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16940:	460f      	mov	r7, r1
   16942:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   16944:	2106      	movs	r1, #6
   16946:	b086      	sub	sp, #24
   16948:	f107 000c 	add.w	r0, r7, #12
   1694c:	f004 ff0c 	bl	1b768 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16950:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16952:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   16956:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   16958:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1695c:	b1c5      	cbz	r5, 16990 <att_find_type_req+0x54>
   1695e:	2300      	movs	r3, #0
   16960:	f1b8 0f00 	cmp.w	r8, #0
   16964:	d013      	beq.n	1698e <att_find_type_req+0x52>
	if (start > end) {
   16966:	4545      	cmp	r5, r8
   16968:	d812      	bhi.n	16990 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1696a:	f88d 3000 	strb.w	r3, [sp]
   1696e:	f88d 3004 	strb.w	r3, [sp, #4]
   16972:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16976:	4668      	mov	r0, sp
   16978:	a901      	add	r1, sp, #4
   1697a:	f8ad 2002 	strh.w	r2, [sp, #2]
   1697e:	f8ad 3006 	strh.w	r3, [sp, #6]
   16982:	f015 fa72 	bl	2be6a <bt_uuid_cmp>
   16986:	4606      	mov	r6, r0
   16988:	b160      	cbz	r0, 169a4 <att_find_type_req+0x68>
	if (!req) {
   1698a:	230a      	movs	r3, #10
   1698c:	e001      	b.n	16992 <att_find_type_req+0x56>
			*err = 0U;
   1698e:	4645      	mov	r5, r8
	if (!req) {
   16990:	2301      	movs	r3, #1
   16992:	462a      	mov	r2, r5
   16994:	2106      	movs	r1, #6
   16996:	4620      	mov	r0, r4
   16998:	f016 fa8d 	bl	2ceb6 <send_err_rsp.part.0>
		return 0;
   1699c:	2000      	movs	r0, #0
}
   1699e:	b006      	add	sp, #24
   169a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   169a4:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   169a8:	4601      	mov	r1, r0
   169aa:	2214      	movs	r2, #20
   169ac:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   169ae:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   169b0:	f019 fe03 	bl	305ba <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   169b4:	4632      	mov	r2, r6
   169b6:	2107      	movs	r1, #7
   169b8:	4650      	mov	r0, sl
   169ba:	f7ff fdad 	bl	16518 <bt_att_create_pdu>
   169be:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   169c0:	b1f8      	cbz	r0, 16a02 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   169c2:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   169c4:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   169c6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   169ca:	4628      	mov	r0, r5
   169cc:	ab01      	add	r3, sp, #4
   169ce:	4a0e      	ldr	r2, [pc, #56]	; (16a08 <att_find_type_req+0xcc>)
	data.value = value;
   169d0:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   169d4:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   169d6:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   169da:	f015 ff80 	bl	2c8de <bt_gatt_foreach_attr>
	if (data.err) {
   169de:	f89d 3015 	ldrb.w	r3, [sp, #21]
   169e2:	b14b      	cbz	r3, 169f8 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   169e4:	9b02      	ldr	r3, [sp, #8]
   169e6:	6998      	ldr	r0, [r3, #24]
   169e8:	f7ff f8ee 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   169ec:	9802      	ldr	r0, [sp, #8]
   169ee:	f004 fdb7 	bl	1b560 <net_buf_unref>
	if (!req) {
   169f2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   169f6:	e7cc      	b.n	16992 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   169f8:	4620      	mov	r0, r4
   169fa:	9902      	ldr	r1, [sp, #8]
   169fc:	f016 f843 	bl	2ca86 <bt_att_chan_send_rsp>
	return 0;
   16a00:	e7cc      	b.n	1699c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   16a02:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16a04:	e7cb      	b.n	1699e <att_find_type_req+0x62>
   16a06:	bf00      	nop
   16a08:	00015c09 	.word	0x00015c09

00016a0c <att_find_info_req>:
{
   16a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16a0e:	68cb      	ldr	r3, [r1, #12]
{
   16a10:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   16a12:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16a14:	885e      	ldrh	r6, [r3, #2]
{
   16a16:	b085      	sub	sp, #20
	if (!start || !end) {
   16a18:	b195      	cbz	r5, 16a40 <att_find_info_req+0x34>
   16a1a:	b186      	cbz	r6, 16a3e <att_find_info_req+0x32>
	if (start > end) {
   16a1c:	42b5      	cmp	r5, r6
   16a1e:	d80f      	bhi.n	16a40 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16a20:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   16a22:	2210      	movs	r2, #16
   16a24:	2100      	movs	r1, #0
   16a26:	4668      	mov	r0, sp
   16a28:	f019 fdc7 	bl	305ba <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16a2c:	2200      	movs	r2, #0
   16a2e:	2105      	movs	r1, #5
   16a30:	4638      	mov	r0, r7
   16a32:	f7ff fd71 	bl	16518 <bt_att_create_pdu>
   16a36:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16a38:	b958      	cbnz	r0, 16a52 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16a3a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16a3c:	e007      	b.n	16a4e <att_find_info_req+0x42>
			*err = 0U;
   16a3e:	4635      	mov	r5, r6
	if (!req) {
   16a40:	2301      	movs	r3, #1
   16a42:	462a      	mov	r2, r5
   16a44:	2104      	movs	r1, #4
   16a46:	4620      	mov	r0, r4
   16a48:	f016 fa35 	bl	2ceb6 <send_err_rsp.part.0>
		return 0;
   16a4c:	2000      	movs	r0, #0
}
   16a4e:	b005      	add	sp, #20
   16a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16a52:	466b      	mov	r3, sp
   16a54:	4631      	mov	r1, r6
   16a56:	4628      	mov	r0, r5
   16a58:	4a09      	ldr	r2, [pc, #36]	; (16a80 <att_find_info_req+0x74>)
	data.chan = chan;
   16a5a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16a5c:	f015 ff3f 	bl	2c8de <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16a60:	9b02      	ldr	r3, [sp, #8]
   16a62:	b943      	cbnz	r3, 16a76 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16a64:	9b01      	ldr	r3, [sp, #4]
   16a66:	6998      	ldr	r0, [r3, #24]
   16a68:	f7ff f8ae 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16a6c:	9801      	ldr	r0, [sp, #4]
   16a6e:	f004 fd77 	bl	1b560 <net_buf_unref>
	if (!req) {
   16a72:	230a      	movs	r3, #10
   16a74:	e7e5      	b.n	16a42 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   16a76:	4620      	mov	r0, r4
   16a78:	9901      	ldr	r1, [sp, #4]
   16a7a:	f016 f804 	bl	2ca86 <bt_att_chan_send_rsp>
	return 0;
   16a7e:	e7e5      	b.n	16a4c <att_find_info_req+0x40>
   16a80:	0002c97b 	.word	0x0002c97b

00016a84 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   16a84:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   16a86:	4c09      	ldr	r4, [pc, #36]	; (16aac <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16a88:	4d09      	ldr	r5, [pc, #36]	; (16ab0 <bt_att_init+0x2c>)
   16a8a:	4620      	mov	r0, r4
   16a8c:	f019 fb77 	bl	3017e <z_impl_k_queue_init>
   16a90:	4629      	mov	r1, r5
   16a92:	4620      	mov	r0, r4
   16a94:	f019 fb80 	bl	30198 <k_queue_append>
   16a98:	4620      	mov	r0, r4
   16a9a:	f105 0114 	add.w	r1, r5, #20
   16a9e:	f019 fb7b 	bl	30198 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   16aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   16aa6:	f000 bec5 	b.w	17834 <bt_gatt_init>
   16aaa:	bf00      	nop
   16aac:	20008c9c 	.word	0x20008c9c
   16ab0:	20021698 	.word	0x20021698

00016ab4 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   16ab4:	2300      	movs	r3, #0
{
   16ab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16ab8:	4605      	mov	r5, r0
   16aba:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16abc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   16abe:	f010 fc97 	bl	273f0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   16ac2:	4b0c      	ldr	r3, [pc, #48]	; (16af4 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16ac4:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   16ac6:	681b      	ldr	r3, [r3, #0]
   16ac8:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   16aca:	bf04      	itt	eq
   16acc:	2500      	moveq	r5, #0
   16ace:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16ad0:	462a      	mov	r2, r5
   16ad2:	4623      	mov	r3, r4
   16ad4:	4808      	ldr	r0, [pc, #32]	; (16af8 <bt_att_req_alloc+0x44>)
   16ad6:	f00e f8c1 	bl	24c5c <k_mem_slab_alloc>
   16ada:	4601      	mov	r1, r0
   16adc:	b940      	cbnz	r0, 16af0 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16ade:	9b01      	ldr	r3, [sp, #4]
   16ae0:	221c      	movs	r2, #28
   16ae2:	4618      	mov	r0, r3
   16ae4:	f019 fd69 	bl	305ba <memset>
   16ae8:	4603      	mov	r3, r0

	return req;
}
   16aea:	4618      	mov	r0, r3
   16aec:	b003      	add	sp, #12
   16aee:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16af0:	2300      	movs	r3, #0
   16af2:	e7fa      	b.n	16aea <bt_att_req_alloc+0x36>
   16af4:	200216c0 	.word	0x200216c0
   16af8:	20008adc 	.word	0x20008adc

00016afc <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16afc:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   16afe:	6883      	ldr	r3, [r0, #8]
{
   16b00:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   16b02:	b14b      	cbz	r3, 16b18 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   16b04:	6998      	ldr	r0, [r3, #24]
   16b06:	f7ff f85f 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(req->buf);
   16b0a:	9b01      	ldr	r3, [sp, #4]
   16b0c:	6898      	ldr	r0, [r3, #8]
   16b0e:	f004 fd27 	bl	1b560 <net_buf_unref>
		req->buf = NULL;
   16b12:	2200      	movs	r2, #0
   16b14:	9b01      	ldr	r3, [sp, #4]
   16b16:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16b18:	4803      	ldr	r0, [pc, #12]	; (16b28 <bt_att_req_free+0x2c>)
   16b1a:	a901      	add	r1, sp, #4
   16b1c:	f00e f908 	bl	24d30 <k_mem_slab_free>
}
   16b20:	b003      	add	sp, #12
   16b22:	f85d fb04 	ldr.w	pc, [sp], #4
   16b26:	bf00      	nop
   16b28:	20008adc 	.word	0x20008adc

00016b2c <att_handle_rsp>:
{
   16b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b30:	4604      	mov	r4, r0
   16b32:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   16b34:	30c0      	adds	r0, #192	; 0xc0
{
   16b36:	460e      	mov	r6, r1
   16b38:	4617      	mov	r7, r2
   16b3a:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16b3c:	f00f fad6 	bl	260ec <k_work_cancel_delayable>
	if (!chan->req) {
   16b40:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16b44:	b980      	cbnz	r0, 16b68 <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   16b46:	4b1a      	ldr	r3, [pc, #104]	; (16bb0 <att_handle_rsp+0x84>)
   16b48:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16b4c:	9307      	str	r3, [sp, #28]
   16b4e:	2302      	movs	r3, #2
   16b50:	4818      	ldr	r0, [pc, #96]	; (16bb4 <att_handle_rsp+0x88>)
   16b52:	aa06      	add	r2, sp, #24
   16b54:	9306      	str	r3, [sp, #24]
   16b56:	f015 ff60 	bl	2ca1a <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   16b5a:	6820      	ldr	r0, [r4, #0]
   16b5c:	f016 f8e3 	bl	2cd26 <att_req_send_process>
}
   16b60:	2000      	movs	r0, #0
   16b62:	b008      	add	sp, #32
   16b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   16b68:	4b13      	ldr	r3, [pc, #76]	; (16bb8 <att_handle_rsp+0x8c>)
   16b6a:	f04f 0800 	mov.w	r8, #0
   16b6e:	4298      	cmp	r0, r3
   16b70:	d102      	bne.n	16b78 <att_handle_rsp+0x4c>
		chan->req = NULL;
   16b72:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   16b76:	e7f0      	b.n	16b5a <att_handle_rsp+0x2e>
	func = chan->req->func;
   16b78:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   16b7c:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   16b80:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16b84:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   16b88:	f7ff ffb8 	bl	16afc <bt_att_req_free>
	att_req_send_process(chan->att);
   16b8c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   16b8e:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   16b92:	f016 f8c8 	bl	2cd26 <att_req_send_process>
	if (func) {
   16b96:	f1b9 0f00 	cmp.w	r9, #0
   16b9a:	d0e1      	beq.n	16b60 <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   16b9c:	6820      	ldr	r0, [r4, #0]
   16b9e:	f8cd a000 	str.w	sl, [sp]
   16ba2:	463b      	mov	r3, r7
   16ba4:	4632      	mov	r2, r6
   16ba6:	4629      	mov	r1, r5
   16ba8:	6800      	ldr	r0, [r0, #0]
   16baa:	47c8      	blx	r9
   16bac:	e7d8      	b.n	16b60 <att_handle_rsp+0x34>
   16bae:	bf00      	nop
   16bb0:	00035ae0 	.word	0x00035ae0
   16bb4:	0003148c 	.word	0x0003148c
   16bb8:	200216c4 	.word	0x200216c4

00016bbc <bt_att_disconnected>:
{
   16bbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   16bc0:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   16bc4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   16bc6:	2e00      	cmp	r6, #0
   16bc8:	d056      	beq.n	16c78 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16bca:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   16bce:	f106 0028 	add.w	r0, r6, #40	; 0x28
   16bd2:	f015 fff1 	bl	2cbb8 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16bd6:	1f27      	subs	r7, r4, #4
   16bd8:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   16bdc:	2200      	movs	r2, #0
   16bde:	2300      	movs	r3, #0
   16be0:	4640      	mov	r0, r8
   16be2:	f017 f9e7 	bl	2dfb4 <net_buf_get>
   16be6:	4605      	mov	r5, r0
   16be8:	bb28      	cbnz	r0, 16c36 <bt_att_disconnected+0x7a>
	if (chan->req) {
   16bea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16bee:	b12b      	cbz	r3, 16bfc <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16bf0:	4602      	mov	r2, r0
   16bf2:	4601      	mov	r1, r0
   16bf4:	230e      	movs	r3, #14
   16bf6:	4638      	mov	r0, r7
   16bf8:	f7ff ff98 	bl	16b2c <att_handle_rsp>
	chan->att = NULL;
   16bfc:	2300      	movs	r3, #0
   16bfe:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   16c02:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16c04:	2b00      	cmp	r3, #0
   16c06:	d137      	bne.n	16c78 <bt_att_disconnected+0xbc>
	att_reset(att);
   16c08:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16c0a:	9803      	ldr	r0, [sp, #12]
   16c0c:	2200      	movs	r2, #0
   16c0e:	2300      	movs	r3, #0
   16c10:	300c      	adds	r0, #12
   16c12:	f017 f9cf 	bl	2dfb4 <net_buf_get>
   16c16:	4605      	mov	r5, r0
   16c18:	b9a0      	cbnz	r0, 16c44 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   16c1a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16c1c:	6845      	ldr	r5, [r0, #4]
   16c1e:	b9c5      	cbnz	r5, 16c52 <bt_att_disconnected+0x96>
	att->conn = NULL;
   16c20:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   16c22:	a903      	add	r1, sp, #12
   16c24:	4816      	ldr	r0, [pc, #88]	; (16c80 <bt_att_disconnected+0xc4>)
   16c26:	f00e f883 	bl	24d30 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16c2a:	6820      	ldr	r0, [r4, #0]
}
   16c2c:	b004      	add	sp, #16
   16c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   16c32:	f001 bdd7 	b.w	187e4 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16c36:	69a8      	ldr	r0, [r5, #24]
   16c38:	f7fe ffc6 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(buf);
   16c3c:	4628      	mov	r0, r5
   16c3e:	f004 fc8f 	bl	1b560 <net_buf_unref>
   16c42:	e7cb      	b.n	16bdc <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16c44:	69a8      	ldr	r0, [r5, #24]
   16c46:	f7fe ffbf 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(buf);
   16c4a:	4628      	mov	r0, r5
   16c4c:	f004 fc88 	bl	1b560 <net_buf_unref>
   16c50:	e7db      	b.n	16c0a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16c52:	6882      	ldr	r2, [r0, #8]
	return node->next;
   16c54:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16c56:	4295      	cmp	r5, r2
	list->head = node;
   16c58:	6043      	str	r3, [r0, #4]
	list->tail = node;
   16c5a:	bf08      	it	eq
   16c5c:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   16c5e:	686e      	ldr	r6, [r5, #4]
   16c60:	b136      	cbz	r6, 16c70 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16c62:	69ab      	ldr	r3, [r5, #24]
   16c64:	210e      	movs	r1, #14
   16c66:	9300      	str	r3, [sp, #0]
   16c68:	2300      	movs	r3, #0
   16c6a:	6800      	ldr	r0, [r0, #0]
   16c6c:	461a      	mov	r2, r3
   16c6e:	47b0      	blx	r6
		bt_att_req_free(req);
   16c70:	4628      	mov	r0, r5
   16c72:	f7ff ff43 	bl	16afc <bt_att_req_free>
   16c76:	e7d0      	b.n	16c1a <bt_att_disconnected+0x5e>
}
   16c78:	b004      	add	sp, #16
   16c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16c7e:	bf00      	nop
   16c80:	20008a5c 	.word	0x20008a5c

00016c84 <att_timeout>:
{
   16c84:	b510      	push	{r4, lr}
   16c86:	4604      	mov	r4, r0
   16c88:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   16c8a:	4b08      	ldr	r3, [pc, #32]	; (16cac <att_timeout+0x28>)
   16c8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16c90:	9305      	str	r3, [sp, #20]
   16c92:	2302      	movs	r3, #2
   16c94:	4806      	ldr	r0, [pc, #24]	; (16cb0 <att_timeout+0x2c>)
   16c96:	aa04      	add	r2, sp, #16
   16c98:	9304      	str	r3, [sp, #16]
   16c9a:	f015 febe 	bl	2ca1a <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   16c9e:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   16ca2:	b006      	add	sp, #24
   16ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   16ca8:	f7ff bf88 	b.w	16bbc <bt_att_disconnected>
   16cac:	00035af7 	.word	0x00035af7
   16cb0:	0003148c 	.word	0x0003148c

00016cb4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   16cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cb6:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   16cb8:	b958      	cbnz	r0, 16cd2 <bt_att_send+0x1e>
   16cba:	4929      	ldr	r1, [pc, #164]	; (16d60 <bt_att_send+0xac>)
   16cbc:	f640 63a4 	movw	r3, #3748	; 0xea4
   16cc0:	4a28      	ldr	r2, [pc, #160]	; (16d64 <bt_att_send+0xb0>)
   16cc2:	4829      	ldr	r0, [pc, #164]	; (16d68 <bt_att_send+0xb4>)
   16cc4:	f013 fce5 	bl	2a692 <assert_print>
   16cc8:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   16ccc:	4825      	ldr	r0, [pc, #148]	; (16d64 <bt_att_send+0xb0>)
   16cce:	f013 fcd9 	bl	2a684 <assert_post_action>
   16cd2:	b949      	cbnz	r1, 16ce8 <bt_att_send+0x34>
   16cd4:	4925      	ldr	r1, [pc, #148]	; (16d6c <bt_att_send+0xb8>)
   16cd6:	f640 63a5 	movw	r3, #3749	; 0xea5
   16cda:	4a22      	ldr	r2, [pc, #136]	; (16d64 <bt_att_send+0xb0>)
   16cdc:	4822      	ldr	r0, [pc, #136]	; (16d68 <bt_att_send+0xb4>)
   16cde:	f013 fcd8 	bl	2a692 <assert_print>
   16ce2:	f640 61a5 	movw	r1, #3749	; 0xea5
   16ce6:	e7f1      	b.n	16ccc <bt_att_send+0x18>

	att = att_get(conn);
   16ce8:	f7ff f904 	bl	15ef4 <att_get>
	if (!att) {
   16cec:	4605      	mov	r5, r0
   16cee:	b940      	cbnz	r0, 16d02 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16cf0:	69a0      	ldr	r0, [r4, #24]
   16cf2:	f7fe ff69 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(buf);
   16cf6:	4620      	mov	r0, r4
   16cf8:	f004 fc32 	bl	1b560 <net_buf_unref>
		return -ENOTCONN;
   16cfc:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   16d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   16d02:	f100 060c 	add.w	r6, r0, #12
   16d06:	4621      	mov	r1, r4
   16d08:	4630      	mov	r0, r6
   16d0a:	f004 fc03 	bl	1b514 <net_buf_put>
	return list->head;
   16d0e:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16d10:	b14d      	cbz	r5, 16d26 <bt_att_send+0x72>
	return node->next;
   16d12:	f855 49f0 	ldr.w	r4, [r5], #-240
   16d16:	b104      	cbz	r4, 16d1a <bt_att_send+0x66>
   16d18:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   16d1a:	4631      	mov	r1, r6
   16d1c:	4628      	mov	r0, r5
   16d1e:	f015 fe99 	bl	2ca54 <process_queue>
		if (!err) {
   16d22:	4603      	mov	r3, r0
   16d24:	b980      	cbnz	r0, 16d48 <bt_att_send+0x94>
	return 0;
   16d26:	2000      	movs	r0, #0
   16d28:	e7ea      	b.n	16d00 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16d2a:	2103      	movs	r1, #3
   16d2c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16d30:	f015 fd9e 	bl	2c870 <atomic_test_bit>
   16d34:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   16d36:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16d3a:	f015 fd99 	bl	2c870 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   16d3e:	4287      	cmp	r7, r0
   16d40:	f06f 0301 	mvn.w	r3, #1
   16d44:	d107      	bne.n	16d56 <bt_att_send+0xa2>
   16d46:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16d48:	2c00      	cmp	r4, #0
   16d4a:	d0ec      	beq.n	16d26 <bt_att_send+0x72>
   16d4c:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   16d50:	b922      	cbnz	r2, 16d5c <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   16d52:	3302      	adds	r3, #2
   16d54:	d0e9      	beq.n	16d2a <bt_att_send+0x76>
{
   16d56:	4625      	mov	r5, r4
   16d58:	4614      	mov	r4, r2
   16d5a:	e7de      	b.n	16d1a <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16d5c:	3af0      	subs	r2, #240	; 0xf0
   16d5e:	e7f8      	b.n	16d52 <bt_att_send+0x9e>
   16d60:	00034b90 	.word	0x00034b90
   16d64:	00035880 	.word	0x00035880
   16d68:	00032629 	.word	0x00032629
   16d6c:	00036908 	.word	0x00036908

00016d70 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   16d70:	b510      	push	{r4, lr}
   16d72:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   16d74:	b958      	cbnz	r0, 16d8e <bt_att_req_send+0x1e>
   16d76:	4915      	ldr	r1, [pc, #84]	; (16dcc <bt_att_req_send+0x5c>)
   16d78:	f640 63ba 	movw	r3, #3770	; 0xeba
   16d7c:	4a14      	ldr	r2, [pc, #80]	; (16dd0 <bt_att_req_send+0x60>)
   16d7e:	4815      	ldr	r0, [pc, #84]	; (16dd4 <bt_att_req_send+0x64>)
   16d80:	f013 fc87 	bl	2a692 <assert_print>
   16d84:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   16d88:	4811      	ldr	r0, [pc, #68]	; (16dd0 <bt_att_req_send+0x60>)
   16d8a:	f013 fc7b 	bl	2a684 <assert_post_action>
   16d8e:	b949      	cbnz	r1, 16da4 <bt_att_req_send+0x34>
   16d90:	4911      	ldr	r1, [pc, #68]	; (16dd8 <bt_att_req_send+0x68>)
   16d92:	f640 63bb 	movw	r3, #3771	; 0xebb
   16d96:	4a0e      	ldr	r2, [pc, #56]	; (16dd0 <bt_att_req_send+0x60>)
   16d98:	480e      	ldr	r0, [pc, #56]	; (16dd4 <bt_att_req_send+0x64>)
   16d9a:	f013 fc7a 	bl	2a692 <assert_print>
   16d9e:	f640 61bb 	movw	r1, #3771	; 0xebb
   16da2:	e7f1      	b.n	16d88 <bt_att_req_send+0x18>

	att = att_get(conn);
   16da4:	f7ff f8a6 	bl	15ef4 <att_get>
	if (!att) {
   16da8:	b160      	cbz	r0, 16dc4 <bt_att_req_send+0x54>
	parent->next = child;
   16daa:	2300      	movs	r3, #0
   16dac:	6023      	str	r3, [r4, #0]
	return list->tail;
   16dae:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   16db0:	b92b      	cbnz	r3, 16dbe <bt_att_req_send+0x4e>
	list->head = node;
   16db2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   16db6:	f015 ffb6 	bl	2cd26 <att_req_send_process>

	return 0;
   16dba:	2000      	movs	r0, #0
}
   16dbc:	bd10      	pop	{r4, pc}
	parent->next = child;
   16dbe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16dc0:	6084      	str	r4, [r0, #8]
}
   16dc2:	e7f8      	b.n	16db6 <bt_att_req_send+0x46>
		return -ENOTCONN;
   16dc4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16dc8:	e7f8      	b.n	16dbc <bt_att_req_send+0x4c>
   16dca:	bf00      	nop
   16dcc:	00034b90 	.word	0x00034b90
   16dd0:	00035880 	.word	0x00035880
   16dd4:	00032629 	.word	0x00032629
   16dd8:	0003592f 	.word	0x0003592f

00016ddc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16ddc:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16dde:	4606      	mov	r6, r0
   16de0:	4d13      	ldr	r5, [pc, #76]	; (16e30 <find_cf_cfg+0x54>)
   16de2:	b140      	cbz	r0, 16df6 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16de4:	462a      	mov	r2, r5
   16de6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16dea:	1e6c      	subs	r4, r5, #1
   16dec:	f015 fc39 	bl	2c662 <bt_conn_is_peer_addr_le>
   16df0:	b198      	cbz	r0, 16e1a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16df2:	4620      	mov	r0, r4
   16df4:	e00c      	b.n	16e10 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16df6:	4628      	mov	r0, r5
   16df8:	490e      	ldr	r1, [pc, #56]	; (16e34 <find_cf_cfg+0x58>)
   16dfa:	f016 f9d2 	bl	2d1a2 <bt_addr_le_eq>
   16dfe:	b940      	cbnz	r0, 16e12 <find_cf_cfg+0x36>
   16e00:	490c      	ldr	r1, [pc, #48]	; (16e34 <find_cf_cfg+0x58>)
   16e02:	f105 0010 	add.w	r0, r5, #16
   16e06:	f016 f9cc 	bl	2d1a2 <bt_addr_le_eq>
   16e0a:	b120      	cbz	r0, 16e16 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e0c:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   16e10:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e12:	1e68      	subs	r0, r5, #1
   16e14:	e7fc      	b.n	16e10 <find_cf_cfg+0x34>
	return NULL;
   16e16:	2000      	movs	r0, #0
   16e18:	e7fa      	b.n	16e10 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16e1a:	4630      	mov	r0, r6
   16e1c:	7c21      	ldrb	r1, [r4, #16]
   16e1e:	f104 0211 	add.w	r2, r4, #17
   16e22:	f015 fc1e 	bl	2c662 <bt_conn_is_peer_addr_le>
   16e26:	2800      	cmp	r0, #0
   16e28:	d0f5      	beq.n	16e16 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e2a:	f104 0010 	add.w	r0, r4, #16
   16e2e:	e7ef      	b.n	16e10 <find_cf_cfg+0x34>
   16e30:	200216f9 	.word	0x200216f9
   16e34:	00034568 	.word	0x00034568

00016e38 <find_sc_cfg>:
{
   16e38:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16e3a:	4c0e      	ldr	r4, [pc, #56]	; (16e74 <find_sc_cfg+0x3c>)
{
   16e3c:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   16e3e:	7823      	ldrb	r3, [r4, #0]
{
   16e40:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16e42:	4283      	cmp	r3, r0
   16e44:	d00c      	beq.n	16e60 <find_sc_cfg+0x28>
   16e46:	7b23      	ldrb	r3, [r4, #12]
   16e48:	42ab      	cmp	r3, r5
   16e4a:	d110      	bne.n	16e6e <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16e4c:	4631      	mov	r1, r6
   16e4e:	480a      	ldr	r0, [pc, #40]	; (16e78 <find_sc_cfg+0x40>)
   16e50:	f016 f9a7 	bl	2d1a2 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16e54:	b158      	cbz	r0, 16e6e <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16e56:	2301      	movs	r3, #1
			return &sc_cfg[i];
   16e58:	220c      	movs	r2, #12
   16e5a:	fb02 4003 	mla	r0, r2, r3, r4
   16e5e:	e007      	b.n	16e70 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16e60:	1c60      	adds	r0, r4, #1
   16e62:	f016 f99e 	bl	2d1a2 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16e66:	2800      	cmp	r0, #0
   16e68:	d0ed      	beq.n	16e46 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16e6a:	2300      	movs	r3, #0
   16e6c:	e7f4      	b.n	16e58 <find_sc_cfg+0x20>
	return NULL;
   16e6e:	2000      	movs	r0, #0
}
   16e70:	bd70      	pop	{r4, r5, r6, pc}
   16e72:	bf00      	nop
   16e74:	20021b14 	.word	0x20021b14
   16e78:	20021b21 	.word	0x20021b21

00016e7c <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   16e7c:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   16e7e:	1c4a      	adds	r2, r1, #1
{
   16e80:	460c      	mov	r4, r1
		if (conn) {
   16e82:	b138      	cbz	r0, 16e94 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   16e84:	7809      	ldrb	r1, [r1, #0]
   16e86:	f015 fbec 	bl	2c662 <bt_conn_is_peer_addr_le>
   16e8a:	b108      	cbz	r0, 16e90 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   16e8c:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   16e8e:	bd10      	pop	{r4, pc}
	return NULL;
   16e90:	2000      	movs	r0, #0
   16e92:	e7fc      	b.n	16e8e <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16e94:	4610      	mov	r0, r2
   16e96:	4902      	ldr	r1, [pc, #8]	; (16ea0 <find_ccc_cfg+0x24>)
   16e98:	f016 f983 	bl	2d1a2 <bt_addr_le_eq>
   16e9c:	e7f5      	b.n	16e8a <find_ccc_cfg+0xe>
   16e9e:	bf00      	nop
   16ea0:	00034568 	.word	0x00034568

00016ea4 <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   16ea4:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   16ea6:	4c0e      	ldr	r4, [pc, #56]	; (16ee0 <find_cf_cfg_by_addr+0x3c>)
{
   16ea8:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
   16eaa:	7823      	ldrb	r3, [r4, #0]
{
   16eac:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   16eae:	4283      	cmp	r3, r0
   16eb0:	d00b      	beq.n	16eca <find_cf_cfg_by_addr+0x26>
   16eb2:	7c23      	ldrb	r3, [r4, #16]
   16eb4:	42b3      	cmp	r3, r6
   16eb6:	d110      	bne.n	16eda <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16eb8:	4628      	mov	r0, r5
   16eba:	490a      	ldr	r1, [pc, #40]	; (16ee4 <find_cf_cfg_by_addr+0x40>)
   16ebc:	f016 f971 	bl	2d1a2 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16ec0:	b158      	cbz	r0, 16eda <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16ec2:	2301      	movs	r3, #1
				return &cf_cfg[i];
   16ec4:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   16ec8:	e008      	b.n	16edc <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16eca:	4628      	mov	r0, r5
   16ecc:	1c61      	adds	r1, r4, #1
   16ece:	f016 f968 	bl	2d1a2 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16ed2:	2800      	cmp	r0, #0
   16ed4:	d0ed      	beq.n	16eb2 <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16ed6:	2300      	movs	r3, #0
   16ed8:	e7f4      	b.n	16ec4 <find_cf_cfg_by_addr+0x20>
			}
		}
	}

	return NULL;
   16eda:	2000      	movs	r0, #0
}
   16edc:	bd70      	pop	{r4, r5, r6, pc}
   16ede:	bf00      	nop
   16ee0:	200216f8 	.word	0x200216f8
   16ee4:	20021709 	.word	0x20021709

00016ee8 <ccc_load>:
{
   16ee8:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16eea:	4b20      	ldr	r3, [pc, #128]	; (16f6c <ccc_load+0x84>)
{
   16eec:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16eee:	6882      	ldr	r2, [r0, #8]
   16ef0:	429a      	cmp	r2, r3
   16ef2:	d10f      	bne.n	16f14 <ccc_load+0x2c>
	if (!load->entry) {
   16ef4:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   16ef6:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   16ef8:	b975      	cbnz	r5, 16f18 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   16efa:	7922      	ldrb	r2, [r4, #4]
   16efc:	4630      	mov	r0, r6
   16efe:	6821      	ldr	r1, [r4, #0]
   16f00:	f016 f957 	bl	2d1b2 <ccc_find_cfg>
	if (!cfg) {
   16f04:	4602      	mov	r2, r0
   16f06:	b128      	cbz	r0, 16f14 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16f08:	4919      	ldr	r1, [pc, #100]	; (16f70 <ccc_load+0x88>)
   16f0a:	3001      	adds	r0, #1
   16f0c:	f016 f977 	bl	2d1fe <bt_addr_le_copy>
	cfg->id = 0U;
   16f10:	7015      	strb	r5, [r2, #0]
	cfg->value = 0U;
   16f12:	8115      	strh	r5, [r2, #8]
		return BT_GATT_ITER_CONTINUE;
   16f14:	2001      	movs	r0, #1
}
   16f16:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   16f18:	68e0      	ldr	r0, [r4, #12]
   16f1a:	2800      	cmp	r0, #0
   16f1c:	d0fb      	beq.n	16f16 <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   16f1e:	882b      	ldrh	r3, [r5, #0]
   16f20:	428b      	cmp	r3, r1
   16f22:	d00a      	beq.n	16f3a <ccc_load+0x52>
		if (load->entry->handle < handle) {
   16f24:	d2f6      	bcs.n	16f14 <ccc_load+0x2c>
	load->count--;
   16f26:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   16f28:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   16f2a:	3801      	subs	r0, #1
	load->entry++;
   16f2c:	3304      	adds	r3, #4
	load->count--;
   16f2e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16f30:	3800      	subs	r0, #0
   16f32:	bf18      	it	ne
   16f34:	2001      	movne	r0, #1
	load->entry++;
   16f36:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16f38:	e7ed      	b.n	16f16 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   16f3a:	7922      	ldrb	r2, [r4, #4]
   16f3c:	4630      	mov	r0, r6
   16f3e:	6821      	ldr	r1, [r4, #0]
   16f40:	f016 f937 	bl	2d1b2 <ccc_find_cfg>
	if (!cfg) {
   16f44:	4602      	mov	r2, r0
   16f46:	b960      	cbnz	r0, 16f62 <ccc_load+0x7a>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   16f48:	4630      	mov	r0, r6
   16f4a:	4909      	ldr	r1, [pc, #36]	; (16f70 <ccc_load+0x88>)
   16f4c:	f016 f931 	bl	2d1b2 <ccc_find_cfg>
		if (!cfg) {
   16f50:	4602      	mov	r2, r0
   16f52:	2800      	cmp	r0, #0
   16f54:	d0e7      	beq.n	16f26 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   16f56:	6821      	ldr	r1, [r4, #0]
   16f58:	3001      	adds	r0, #1
   16f5a:	f016 f950 	bl	2d1fe <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   16f5e:	7923      	ldrb	r3, [r4, #4]
   16f60:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   16f62:	68a3      	ldr	r3, [r4, #8]
   16f64:	885b      	ldrh	r3, [r3, #2]
   16f66:	8113      	strh	r3, [r2, #8]
   16f68:	e7dd      	b.n	16f26 <ccc_load+0x3e>
   16f6a:	bf00      	nop
   16f6c:	000176a5 	.word	0x000176a5
   16f70:	00034568 	.word	0x00034568

00016f74 <read_ppcp>:
{
   16f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16f76:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16f78:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   16f7c:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16f7e:	4a06      	ldr	r2, [pc, #24]	; (16f98 <read_ppcp+0x24>)
   16f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   16f84:	2308      	movs	r3, #8
   16f86:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   16f8a:	9300      	str	r3, [sp, #0]
   16f8c:	446b      	add	r3, sp
   16f8e:	f016 f942 	bl	2d216 <bt_gatt_attr_read.constprop.0>
}
   16f92:	b005      	add	sp, #20
   16f94:	f85d fb04 	ldr.w	pc, [sp], #4
   16f98:	00280018 	.word	0x00280018

00016f9c <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   16f9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Invalid key");
   16f9e:	4b07      	ldr	r3, [pc, #28]	; (16fbc <ccc_set_direct.part.0+0x20>)
   16fa0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16fa4:	9305      	str	r3, [sp, #20]
   16fa6:	2302      	movs	r3, #2
   16fa8:	4805      	ldr	r0, [pc, #20]	; (16fc0 <ccc_set_direct.part.0+0x24>)
   16faa:	aa04      	add	r2, sp, #16
   16fac:	9304      	str	r3, [sp, #16]
   16fae:	f016 f9ba 	bl	2d326 <z_log_msg_static_create.constprop.0>
}
   16fb2:	f06f 0015 	mvn.w	r0, #21
   16fb6:	b007      	add	sp, #28
   16fb8:	f85d fb04 	ldr.w	pc, [sp], #4
   16fbc:	00035b0a 	.word	0x00035b0a
   16fc0:	000314ac 	.word	0x000314ac

00016fc4 <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   16fc4:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16fc6:	2108      	movs	r1, #8
   16fc8:	af00      	add	r7, sp, #0
   16fca:	480f      	ldr	r0, [pc, #60]	; (17008 <db_hash_commit+0x44>)
   16fcc:	f016 f901 	bl	2d1d2 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   16fd0:	2200      	movs	r2, #0
   16fd2:	2300      	movs	r3, #0
   16fd4:	480d      	ldr	r0, [pc, #52]	; (1700c <db_hash_commit+0x48>)
   16fd6:	f7fa fee5 	bl	11da4 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   16fda:	1e04      	subs	r4, r0, #0
   16fdc:	da11      	bge.n	17002 <db_hash_commit+0x3e>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   16fde:	466d      	mov	r5, sp
   16fe0:	b088      	sub	sp, #32
   16fe2:	466a      	mov	r2, sp
   16fe4:	4b0a      	ldr	r3, [pc, #40]	; (17010 <db_hash_commit+0x4c>)
   16fe6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16fea:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16fee:	2303      	movs	r3, #3
   16ff0:	4808      	ldr	r0, [pc, #32]	; (17014 <db_hash_commit+0x50>)
   16ff2:	f842 3f10 	str.w	r3, [r2, #16]!
   16ff6:	f016 f996 	bl	2d326 <z_log_msg_static_create.constprop.0>
   16ffa:	46ad      	mov	sp, r5
	}

	return err;
}
   16ffc:	4620      	mov	r0, r4
   16ffe:	46bd      	mov	sp, r7
   17000:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   17002:	2400      	movs	r4, #0
	return err;
   17004:	e7fa      	b.n	16ffc <db_hash_commit+0x38>
   17006:	bf00      	nop
   17008:	20009f70 	.word	0x20009f70
   1700c:	20009ec8 	.word	0x20009ec8
   17010:	00035b16 	.word	0x00035b16
   17014:	000314ac 	.word	0x000314ac

00017018 <sc_set>:
{
   17018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1701c:	b08b      	sub	sp, #44	; 0x2c
   1701e:	460e      	mov	r6, r1
   17020:	4690      	mov	r8, r2
   17022:	4699      	mov	r9, r3
	if (!name) {
   17024:	4604      	mov	r4, r0
{
   17026:	af00      	add	r7, sp, #0
	if (!name) {
   17028:	b988      	cbnz	r0, 1704e <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   1702a:	4b43      	ldr	r3, [pc, #268]	; (17138 <sc_set+0x120>)
   1702c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17030:	627b      	str	r3, [r7, #36]	; 0x24
   17032:	2302      	movs	r3, #2
   17034:	4841      	ldr	r0, [pc, #260]	; (1713c <sc_set+0x124>)
   17036:	623b      	str	r3, [r7, #32]
   17038:	f107 0220 	add.w	r2, r7, #32
   1703c:	f016 f973 	bl	2d326 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17040:	f06f 0515 	mvn.w	r5, #21
}
   17044:	4628      	mov	r0, r5
   17046:	372c      	adds	r7, #44	; 0x2c
   17048:	46bd      	mov	sp, r7
   1704a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1704e:	f107 0108 	add.w	r1, r7, #8
   17052:	f014 fee6 	bl	2be22 <bt_settings_decode_key>
	if (err) {
   17056:	4605      	mov	r5, r0
   17058:	b190      	cbz	r0, 17080 <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   1705a:	466d      	mov	r5, sp
   1705c:	b088      	sub	sp, #32
   1705e:	466a      	mov	r2, sp
   17060:	4b37      	ldr	r3, [pc, #220]	; (17140 <sc_set+0x128>)
   17062:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   17066:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1706a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1706e:	8393      	strh	r3, [r2, #28]
   17070:	4b34      	ldr	r3, [pc, #208]	; (17144 <sc_set+0x12c>)
   17072:	4832      	ldr	r0, [pc, #200]	; (1713c <sc_set+0x124>)
   17074:	f842 3f10 	str.w	r3, [r2, #16]!
   17078:	f016 f955 	bl	2d326 <z_log_msg_static_create.constprop.0>
   1707c:	46ad      	mov	sp, r5
		return -EINVAL;
   1707e:	e7df      	b.n	17040 <sc_set+0x28>
	settings_name_next(name, &next);
   17080:	4620      	mov	r0, r4
   17082:	1d39      	adds	r1, r7, #4
   17084:	f014 f927 	bl	2b2d6 <settings_name_next>
	if (!next) {
   17088:	6878      	ldr	r0, [r7, #4]
   1708a:	b1a0      	cbz	r0, 170b6 <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   1708c:	220a      	movs	r2, #10
   1708e:	4629      	mov	r1, r5
   17090:	f011 ffae 	bl	28ff0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   17094:	b178      	cbz	r0, 170b6 <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   17096:	466c      	mov	r4, sp
   17098:	b088      	sub	sp, #32
   1709a:	466a      	mov	r2, sp
   1709c:	4b2a      	ldr	r3, [pc, #168]	; (17148 <sc_set+0x130>)
   1709e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170a2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   170a6:	2303      	movs	r3, #3
   170a8:	4824      	ldr	r0, [pc, #144]	; (1713c <sc_set+0x124>)
   170aa:	f842 3f10 	str.w	r3, [r2, #16]!
   170ae:	f016 f93a 	bl	2d326 <z_log_msg_static_create.constprop.0>
   170b2:	46a5      	mov	sp, r4
			return -EINVAL;
   170b4:	e7c4      	b.n	17040 <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   170b6:	2000      	movs	r0, #0
   170b8:	f107 0108 	add.w	r1, r7, #8
   170bc:	f7ff febc 	bl	16e38 <find_sc_cfg>
	if (!cfg && len_rd) {
   170c0:	4604      	mov	r4, r0
   170c2:	bb98      	cbnz	r0, 1712c <sc_set+0x114>
   170c4:	2e00      	cmp	r6, #0
   170c6:	d0bd      	beq.n	17044 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   170c8:	4920      	ldr	r1, [pc, #128]	; (1714c <sc_set+0x134>)
   170ca:	f7ff feb5 	bl	16e38 <find_sc_cfg>
		if (!cfg) {
   170ce:	4604      	mov	r4, r0
   170d0:	b968      	cbnz	r0, 170ee <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   170d2:	4b1f      	ldr	r3, [pc, #124]	; (17150 <sc_set+0x138>)
   170d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   170d8:	627b      	str	r3, [r7, #36]	; 0x24
   170da:	2302      	movs	r3, #2
   170dc:	4817      	ldr	r0, [pc, #92]	; (1713c <sc_set+0x124>)
   170de:	623b      	str	r3, [r7, #32]
   170e0:	f107 0220 	add.w	r2, r7, #32
   170e4:	f016 f91f 	bl	2d326 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   170e8:	f06f 050b 	mvn.w	r5, #11
   170ec:	e7aa      	b.n	17044 <sc_set+0x2c>
		cfg->id = id;
   170ee:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   170f0:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   170f4:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   170f8:	f016 f881 	bl	2d1fe <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   170fc:	f104 0108 	add.w	r1, r4, #8
   17100:	2204      	movs	r2, #4
   17102:	4648      	mov	r0, r9
   17104:	47c0      	blx	r8
		if (len < 0) {
   17106:	1e04      	subs	r4, r0, #0
   17108:	da9c      	bge.n	17044 <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1710a:	466d      	mov	r5, sp
   1710c:	b088      	sub	sp, #32
   1710e:	466a      	mov	r2, sp
   17110:	4b10      	ldr	r3, [pc, #64]	; (17154 <sc_set+0x13c>)
   17112:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17116:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1711a:	2303      	movs	r3, #3
   1711c:	4807      	ldr	r0, [pc, #28]	; (1713c <sc_set+0x124>)
   1711e:	f842 3f10 	str.w	r3, [r2, #16]!
   17122:	f016 f900 	bl	2d326 <z_log_msg_static_create.constprop.0>
   17126:	46ad      	mov	sp, r5
			return len;
   17128:	4625      	mov	r5, r4
   1712a:	e78b      	b.n	17044 <sc_set+0x2c>
	if (len_rd) {
   1712c:	2e00      	cmp	r6, #0
   1712e:	d1e5      	bne.n	170fc <sc_set+0xe4>
   17130:	6006      	str	r6, [r0, #0]
   17132:	6046      	str	r6, [r0, #4]
   17134:	6086      	str	r6, [r0, #8]
   17136:	e785      	b.n	17044 <sc_set+0x2c>
   17138:	000345be 	.word	0x000345be
   1713c:	000314ac 	.word	0x000314ac
   17140:	00035b4a 	.word	0x00035b4a
   17144:	01000003 	.word	0x01000003
   17148:	00035b66 	.word	0x00035b66
   1714c:	00034568 	.word	0x00034568
   17150:	00035b81 	.word	0x00035b81
   17154:	00035ba3 	.word	0x00035ba3

00017158 <bt_gatt_clear_sc>:
{
   17158:	b5b0      	push	{r4, r5, r7, lr}
   1715a:	b08c      	sub	sp, #48	; 0x30
   1715c:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1715e:	f7ff fe6b 	bl	16e38 <find_sc_cfg>
	if (!cfg) {
   17162:	4604      	mov	r4, r0
   17164:	b320      	cbz	r0, 171b0 <bt_gatt_clear_sc+0x58>
		if (cfg->id) {
   17166:	4605      	mov	r5, r0
   17168:	f815 2b01 	ldrb.w	r2, [r5], #1
   1716c:	b322      	cbz	r2, 171b8 <bt_gatt_clear_sc+0x60>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1716e:	2104      	movs	r1, #4
   17170:	4638      	mov	r0, r7
   17172:	f013 f83e 	bl	2a1f2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   17176:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   17178:	1d38      	adds	r0, r7, #4
   1717a:	462b      	mov	r3, r5
   1717c:	2124      	movs	r1, #36	; 0x24
   1717e:	4a0f      	ldr	r2, [pc, #60]	; (171bc <bt_gatt_clear_sc+0x64>)
   17180:	f7fa fd56 	bl	11c30 <bt_settings_encode_key>
		err = settings_delete(key);
   17184:	1d38      	adds	r0, r7, #4
   17186:	f014 f87e 	bl	2b286 <settings_delete>
		if (err) {
   1718a:	b170      	cbz	r0, 171aa <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   1718c:	466d      	mov	r5, sp
   1718e:	b088      	sub	sp, #32
   17190:	aa02      	add	r2, sp, #8
   17192:	4b0b      	ldr	r3, [pc, #44]	; (171c0 <bt_gatt_clear_sc+0x68>)
   17194:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17198:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1719c:	2303      	movs	r3, #3
   1719e:	4809      	ldr	r0, [pc, #36]	; (171c4 <bt_gatt_clear_sc+0x6c>)
   171a0:	f842 3f10 	str.w	r3, [r2, #16]!
   171a4:	f016 f8bf 	bl	2d326 <z_log_msg_static_create.constprop.0>
   171a8:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   171aa:	4620      	mov	r0, r4
   171ac:	f016 f82e 	bl	2d20c <clear_sc_cfg>
}
   171b0:	2000      	movs	r0, #0
   171b2:	3728      	adds	r7, #40	; 0x28
   171b4:	46bd      	mov	sp, r7
   171b6:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   171b8:	9200      	str	r2, [sp, #0]
   171ba:	e7dd      	b.n	17178 <bt_gatt_clear_sc+0x20>
   171bc:	00035f54 	.word	0x00035f54
   171c0:	00035bc4 	.word	0x00035bc4
   171c4:	000314ac 	.word	0x000314ac

000171c8 <sc_clear>:
{
   171c8:	b5b0      	push	{r4, r5, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171ca:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   171ce:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171d0:	4629      	mov	r1, r5
   171d2:	7a00      	ldrb	r0, [r0, #8]
{
   171d4:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171d6:	f014 ffa4 	bl	2c122 <bt_addr_le_is_bonded>
   171da:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   171dc:	4629      	mov	r1, r5
   171de:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171e0:	b19b      	cbz	r3, 1720a <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   171e2:	f7ff ffb9 	bl	17158 <bt_gatt_clear_sc>
		if (err) {
   171e6:	b170      	cbz	r0, 17206 <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   171e8:	466c      	mov	r4, sp
   171ea:	b088      	sub	sp, #32
   171ec:	466a      	mov	r2, sp
   171ee:	4b0a      	ldr	r3, [pc, #40]	; (17218 <sc_clear+0x50>)
   171f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   171f4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   171f8:	2303      	movs	r3, #3
   171fa:	4808      	ldr	r0, [pc, #32]	; (1721c <sc_clear+0x54>)
   171fc:	f842 3f10 	str.w	r3, [r2, #16]!
   17200:	f016 f891 	bl	2d326 <z_log_msg_static_create.constprop.0>
   17204:	46a5      	mov	sp, r4
}
   17206:	46bd      	mov	sp, r7
   17208:	bdb0      	pop	{r4, r5, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1720a:	f7ff fe15 	bl	16e38 <find_sc_cfg>
		if (cfg) {
   1720e:	2800      	cmp	r0, #0
   17210:	d0f9      	beq.n	17206 <sc_clear+0x3e>
			clear_sc_cfg(cfg);
   17212:	f015 fffb 	bl	2d20c <clear_sc_cfg>
}
   17216:	e7f6      	b.n	17206 <sc_clear+0x3e>
   17218:	00035be1 	.word	0x00035be1
   1721c:	000314ac 	.word	0x000314ac

00017220 <sc_store>:
{
   17220:	b5b0      	push	{r4, r5, r7, lr}
   17222:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   17224:	4605      	mov	r5, r0
   17226:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1722a:	4604      	mov	r4, r0
   1722c:	af02      	add	r7, sp, #8
	if (cfg->id) {
   1722e:	b31a      	cbz	r2, 17278 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   17230:	2104      	movs	r1, #4
   17232:	4638      	mov	r0, r7
   17234:	f012 ffdd 	bl	2a1f2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   17238:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1723a:	2124      	movs	r1, #36	; 0x24
   1723c:	4a0f      	ldr	r2, [pc, #60]	; (1727c <sc_store+0x5c>)
   1723e:	1d38      	adds	r0, r7, #4
   17240:	462b      	mov	r3, r5
   17242:	f7fa fcf5 	bl	11c30 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   17246:	2204      	movs	r2, #4
   17248:	f104 0108 	add.w	r1, r4, #8
   1724c:	18b8      	adds	r0, r7, r2
   1724e:	f7f8 fda5 	bl	fd9c <settings_save_one>
	if (err) {
   17252:	b170      	cbz	r0, 17272 <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   17254:	466c      	mov	r4, sp
   17256:	b088      	sub	sp, #32
   17258:	aa02      	add	r2, sp, #8
   1725a:	4b09      	ldr	r3, [pc, #36]	; (17280 <sc_store+0x60>)
   1725c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17260:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17264:	2303      	movs	r3, #3
   17266:	4807      	ldr	r0, [pc, #28]	; (17284 <sc_store+0x64>)
   17268:	f842 3f10 	str.w	r3, [r2, #16]!
   1726c:	f016 f85b 	bl	2d326 <z_log_msg_static_create.constprop.0>
   17270:	46a5      	mov	sp, r4
}
   17272:	3728      	adds	r7, #40	; 0x28
   17274:	46bd      	mov	sp, r7
   17276:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   17278:	9200      	str	r2, [sp, #0]
   1727a:	e7de      	b.n	1723a <sc_store+0x1a>
   1727c:	00035f54 	.word	0x00035f54
   17280:	00035bf7 	.word	0x00035bf7
   17284:	000314ac 	.word	0x000314ac

00017288 <sc_save>:
{
   17288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1728c:	b086      	sub	sp, #24
   1728e:	4680      	mov	r8, r0
   17290:	460f      	mov	r7, r1
   17292:	4616      	mov	r6, r2
   17294:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17296:	f7ff fdcf 	bl	16e38 <find_sc_cfg>
	if (!cfg) {
   1729a:	4604      	mov	r4, r0
   1729c:	b9b0      	cbnz	r0, 172cc <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1729e:	4919      	ldr	r1, [pc, #100]	; (17304 <sc_save+0x7c>)
   172a0:	f7ff fdca 	bl	16e38 <find_sc_cfg>
		if (!cfg) {
   172a4:	4604      	mov	r4, r0
   172a6:	b960      	cbnz	r0, 172c2 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   172a8:	4b17      	ldr	r3, [pc, #92]	; (17308 <sc_save+0x80>)
   172aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   172ae:	9305      	str	r3, [sp, #20]
   172b0:	2302      	movs	r3, #2
   172b2:	4816      	ldr	r0, [pc, #88]	; (1730c <sc_save+0x84>)
   172b4:	aa04      	add	r2, sp, #16
   172b6:	9304      	str	r3, [sp, #16]
   172b8:	f016 f835 	bl	2d326 <z_log_msg_static_create.constprop.0>
}
   172bc:	b006      	add	sp, #24
   172be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   172c2:	4639      	mov	r1, r7
		cfg->id = id;
   172c4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   172c8:	f015 ff99 	bl	2d1fe <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   172cc:	8922      	ldrh	r2, [r4, #8]
   172ce:	8963      	ldrh	r3, [r4, #10]
   172d0:	b97a      	cbnz	r2, 172f2 <sc_save+0x6a>
   172d2:	b983      	cbnz	r3, 172f6 <sc_save+0x6e>
		cfg->data.start = start;
   172d4:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   172d6:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   172d8:	4621      	mov	r1, r4
   172da:	f811 0b01 	ldrb.w	r0, [r1], #1
   172de:	f014 ff20 	bl	2c122 <bt_addr_le_is_bonded>
   172e2:	2800      	cmp	r0, #0
   172e4:	d0ea      	beq.n	172bc <sc_save+0x34>
		sc_store(cfg);
   172e6:	4620      	mov	r0, r4
}
   172e8:	b006      	add	sp, #24
   172ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   172ee:	f7ff bf97 	b.w	17220 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   172f2:	4296      	cmp	r6, r2
   172f4:	d302      	bcc.n	172fc <sc_save+0x74>
   172f6:	429d      	cmp	r5, r3
   172f8:	d8ed      	bhi.n	172d6 <sc_save+0x4e>
   172fa:	e7df      	b.n	172bc <sc_save+0x34>
	if (*end < new_end) {
   172fc:	429d      	cmp	r5, r3
		*start = new_start;
   172fe:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   17300:	d9ea      	bls.n	172d8 <sc_save+0x50>
   17302:	e7e8      	b.n	172d6 <sc_save+0x4e>
   17304:	00034568 	.word	0x00034568
   17308:	00035c13 	.word	0x00035c13
   1730c:	000314ac 	.word	0x000314ac

00017310 <cf_write>:
{
   17310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17314:	b086      	sub	sp, #24
   17316:	461f      	mov	r7, r3
   17318:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1731c:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1731e:	2b01      	cmp	r3, #1
{
   17320:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   17322:	d83c      	bhi.n	1739e <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   17324:	443b      	add	r3, r7
   17326:	2b01      	cmp	r3, #1
   17328:	463d      	mov	r5, r7
   1732a:	dc3b      	bgt.n	173a4 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1732c:	f7ff fd56 	bl	16ddc <find_cf_cfg>
	if (!cfg) {
   17330:	4604      	mov	r4, r0
   17332:	b998      	cbnz	r0, 1735c <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   17334:	f7ff fd52 	bl	16ddc <find_cf_cfg>
	if (!cfg) {
   17338:	4604      	mov	r4, r0
   1733a:	b978      	cbnz	r0, 1735c <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1733c:	4b1c      	ldr	r3, [pc, #112]	; (173b0 <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1733e:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   17342:	9305      	str	r3, [sp, #20]
   17344:	2302      	movs	r3, #2
   17346:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1734a:	481a      	ldr	r0, [pc, #104]	; (173b4 <cf_write+0xa4>)
   1734c:	aa04      	add	r2, sp, #16
   1734e:	9304      	str	r3, [sp, #16]
   17350:	f015 ffe9 	bl	2d326 <z_log_msg_static_create.constprop.0>
}
   17354:	4628      	mov	r0, r5
   17356:	b006      	add	sp, #24
   17358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1735c:	b197      	cbz	r7, 17384 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   1735e:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17360:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   17362:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17366:	fa21 f003 	lsr.w	r0, r1, r3
   1736a:	07c7      	lsls	r7, r0, #31
   1736c:	d503      	bpl.n	17376 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1736e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17372:	07c0      	lsls	r0, r0, #31
   17374:	d519      	bpl.n	173aa <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17376:	3301      	adds	r3, #1
   17378:	2b03      	cmp	r3, #3
   1737a:	d1f4      	bne.n	17366 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1737c:	f002 0207 	and.w	r2, r2, #7
   17380:	4311      	orrs	r1, r2
   17382:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17384:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17388:	1c60      	adds	r0, r4, #1
   1738a:	f015 ff38 	bl	2d1fe <bt_addr_le_copy>
	cfg->id = conn->id;
   1738e:	4620      	mov	r0, r4
   17390:	7a33      	ldrb	r3, [r6, #8]
   17392:	2101      	movs	r1, #1
   17394:	f800 3b0c 	strb.w	r3, [r0], #12
   17398:	f015 ff1b 	bl	2d1d2 <atomic_or>
}
   1739c:	e7da      	b.n	17354 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1739e:	f06f 0506 	mvn.w	r5, #6
   173a2:	e7d7      	b.n	17354 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   173a4:	f06f 050c 	mvn.w	r5, #12
   173a8:	e7d4      	b.n	17354 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   173aa:	f06f 0512 	mvn.w	r5, #18
   173ae:	e7d1      	b.n	17354 <cf_write+0x44>
   173b0:	00035c32 	.word	0x00035c32
   173b4:	000314ac 	.word	0x000314ac

000173b8 <db_hash_store>:
{
   173b8:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   173ba:	2210      	movs	r2, #16
{
   173bc:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   173be:	490b      	ldr	r1, [pc, #44]	; (173ec <db_hash_store+0x34>)
   173c0:	480b      	ldr	r0, [pc, #44]	; (173f0 <db_hash_store+0x38>)
   173c2:	f7f8 fceb 	bl	fd9c <settings_save_one>
	if (err) {
   173c6:	b170      	cbz	r0, 173e6 <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   173c8:	466c      	mov	r4, sp
   173ca:	b088      	sub	sp, #32
   173cc:	466a      	mov	r2, sp
   173ce:	4b09      	ldr	r3, [pc, #36]	; (173f4 <db_hash_store+0x3c>)
   173d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   173d4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   173d8:	2303      	movs	r3, #3
   173da:	4807      	ldr	r0, [pc, #28]	; (173f8 <db_hash_store+0x40>)
   173dc:	f842 3f10 	str.w	r3, [r2, #16]!
   173e0:	f015 ffa1 	bl	2d326 <z_log_msg_static_create.constprop.0>
   173e4:	46a5      	mov	sp, r4
}
   173e6:	46bd      	mov	sp, r7
   173e8:	bd98      	pop	{r3, r4, r7, pc}
   173ea:	bf00      	nop
   173ec:	20009ea8 	.word	0x20009ea8
   173f0:	00035c5e 	.word	0x00035c5e
   173f4:	00035c66 	.word	0x00035c66
   173f8:	000314ac 	.word	0x000314ac

000173fc <db_hash_set>:
{
   173fc:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   173fe:	4618      	mov	r0, r3
{
   17400:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17402:	490d      	ldr	r1, [pc, #52]	; (17438 <db_hash_set+0x3c>)
   17404:	2210      	movs	r2, #16
{
   17406:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17408:	47a0      	blx	r4
	if (len < 0) {
   1740a:	1e04      	subs	r4, r0, #0
   1740c:	da11      	bge.n	17432 <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   1740e:	466d      	mov	r5, sp
   17410:	b088      	sub	sp, #32
   17412:	466a      	mov	r2, sp
   17414:	4b09      	ldr	r3, [pc, #36]	; (1743c <db_hash_set+0x40>)
   17416:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1741a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1741e:	2303      	movs	r3, #3
   17420:	4807      	ldr	r0, [pc, #28]	; (17440 <db_hash_set+0x44>)
   17422:	f842 3f10 	str.w	r3, [r2, #16]!
   17426:	f015 ff7e 	bl	2d326 <z_log_msg_static_create.constprop.0>
   1742a:	46ad      	mov	sp, r5
}
   1742c:	4620      	mov	r0, r4
   1742e:	46bd      	mov	sp, r7
   17430:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   17432:	2400      	movs	r4, #0
   17434:	e7fa      	b.n	1742c <db_hash_set+0x30>
   17436:	bf00      	nop
   17438:	20009eb8 	.word	0x20009eb8
   1743c:	00035ba3 	.word	0x00035ba3
   17440:	000314ac 	.word	0x000314ac

00017444 <clear_cf_cfg>:
{
   17444:	4602      	mov	r2, r0
   17446:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17448:	4907      	ldr	r1, [pc, #28]	; (17468 <clear_cf_cfg+0x24>)
   1744a:	3001      	adds	r0, #1
   1744c:	f015 fed7 	bl	2d1fe <bt_addr_le_copy>
   17450:	2300      	movs	r3, #0
   17452:	320c      	adds	r2, #12
   17454:	f802 3c04 	strb.w	r3, [r2, #-4]
   17458:	e8d2 1fef 	ldaex	r1, [r2]
   1745c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   17460:	2800      	cmp	r0, #0
   17462:	d1f9      	bne.n	17458 <clear_cf_cfg+0x14>
}
   17464:	bd08      	pop	{r3, pc}
   17466:	bf00      	nop
   17468:	00034568 	.word	0x00034568

0001746c <cf_set>:
{
   1746c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17470:	b08b      	sub	sp, #44	; 0x2c
   17472:	4689      	mov	r9, r1
   17474:	4616      	mov	r6, r2
   17476:	4698      	mov	r8, r3
	if (!name) {
   17478:	4604      	mov	r4, r0
{
   1747a:	af00      	add	r7, sp, #0
	if (!name) {
   1747c:	b988      	cbnz	r0, 174a2 <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   1747e:	4b42      	ldr	r3, [pc, #264]	; (17588 <cf_set+0x11c>)
   17480:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17484:	627b      	str	r3, [r7, #36]	; 0x24
   17486:	2302      	movs	r3, #2
   17488:	4840      	ldr	r0, [pc, #256]	; (1758c <cf_set+0x120>)
   1748a:	623b      	str	r3, [r7, #32]
   1748c:	f107 0220 	add.w	r2, r7, #32
   17490:	f015 ff49 	bl	2d326 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17494:	f06f 0515 	mvn.w	r5, #21
}
   17498:	4628      	mov	r0, r5
   1749a:	372c      	adds	r7, #44	; 0x2c
   1749c:	46bd      	mov	sp, r7
   1749e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   174a2:	f107 0108 	add.w	r1, r7, #8
   174a6:	f014 fcbc 	bl	2be22 <bt_settings_decode_key>
	if (err) {
   174aa:	4605      	mov	r5, r0
   174ac:	b190      	cbz	r0, 174d4 <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   174ae:	466d      	mov	r5, sp
   174b0:	b088      	sub	sp, #32
   174b2:	466a      	mov	r2, sp
   174b4:	4b36      	ldr	r3, [pc, #216]	; (17590 <cf_set+0x124>)
   174b6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   174ba:	e9c2 3405 	strd	r3, r4, [r2, #20]
   174be:	f44f 7300 	mov.w	r3, #512	; 0x200
   174c2:	8393      	strh	r3, [r2, #28]
   174c4:	4b33      	ldr	r3, [pc, #204]	; (17594 <cf_set+0x128>)
   174c6:	4831      	ldr	r0, [pc, #196]	; (1758c <cf_set+0x120>)
   174c8:	f842 3f10 	str.w	r3, [r2, #16]!
   174cc:	f015 ff2b 	bl	2d326 <z_log_msg_static_create.constprop.0>
   174d0:	46ad      	mov	sp, r5
		return -EINVAL;
   174d2:	e7df      	b.n	17494 <cf_set+0x28>
	settings_name_next(name, &next);
   174d4:	4620      	mov	r0, r4
   174d6:	1d39      	adds	r1, r7, #4
   174d8:	f013 fefd 	bl	2b2d6 <settings_name_next>
	if (!next) {
   174dc:	6878      	ldr	r0, [r7, #4]
   174de:	b1a0      	cbz	r0, 1750a <cf_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   174e0:	220a      	movs	r2, #10
   174e2:	4629      	mov	r1, r5
   174e4:	f011 fd84 	bl	28ff0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   174e8:	b178      	cbz	r0, 1750a <cf_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   174ea:	466c      	mov	r4, sp
   174ec:	b088      	sub	sp, #32
   174ee:	466a      	mov	r2, sp
   174f0:	4b29      	ldr	r3, [pc, #164]	; (17598 <cf_set+0x12c>)
   174f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   174f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   174fa:	2303      	movs	r3, #3
   174fc:	4823      	ldr	r0, [pc, #140]	; (1758c <cf_set+0x120>)
   174fe:	f842 3f10 	str.w	r3, [r2, #16]!
   17502:	f015 ff10 	bl	2d326 <z_log_msg_static_create.constprop.0>
   17506:	46a5      	mov	sp, r4
			return -EINVAL;
   17508:	e7c4      	b.n	17494 <cf_set+0x28>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1750a:	2000      	movs	r0, #0
   1750c:	f107 0108 	add.w	r1, r7, #8
   17510:	f7ff fcc8 	bl	16ea4 <find_cf_cfg_by_addr>
	if (!cfg) {
   17514:	4604      	mov	r4, r0
   17516:	b9c0      	cbnz	r0, 1754a <cf_set+0xde>
		cfg = find_cf_cfg(NULL);
   17518:	f7ff fc60 	bl	16ddc <find_cf_cfg>
		if (!cfg) {
   1751c:	4604      	mov	r4, r0
   1751e:	b968      	cbnz	r0, 1753c <cf_set+0xd0>
			LOG_ERR("Unable to restore CF: no cfg left");
   17520:	4b1e      	ldr	r3, [pc, #120]	; (1759c <cf_set+0x130>)
   17522:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17526:	627b      	str	r3, [r7, #36]	; 0x24
   17528:	2302      	movs	r3, #2
   1752a:	4818      	ldr	r0, [pc, #96]	; (1758c <cf_set+0x120>)
   1752c:	623b      	str	r3, [r7, #32]
   1752e:	f107 0220 	add.w	r2, r7, #32
   17532:	f015 fef8 	bl	2d326 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   17536:	f06f 050b 	mvn.w	r5, #11
   1753a:	e7ad      	b.n	17498 <cf_set+0x2c>
		cfg->id = id;
   1753c:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   1753e:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   17542:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   17546:	f015 fe5a 	bl	2d1fe <bt_addr_le_copy>
	if (len_rd) {
   1754a:	f1b9 0f00 	cmp.w	r9, #0
   1754e:	d017      	beq.n	17580 <cf_set+0x114>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   17550:	f104 0108 	add.w	r1, r4, #8
   17554:	2201      	movs	r2, #1
   17556:	4640      	mov	r0, r8
   17558:	47b0      	blx	r6
		if (len < 0) {
   1755a:	1e04      	subs	r4, r0, #0
   1755c:	da9c      	bge.n	17498 <cf_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1755e:	466d      	mov	r5, sp
   17560:	b088      	sub	sp, #32
   17562:	466a      	mov	r2, sp
   17564:	4b0e      	ldr	r3, [pc, #56]	; (175a0 <cf_set+0x134>)
   17566:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1756a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1756e:	2303      	movs	r3, #3
   17570:	4806      	ldr	r0, [pc, #24]	; (1758c <cf_set+0x120>)
   17572:	f842 3f10 	str.w	r3, [r2, #16]!
   17576:	f015 fed6 	bl	2d326 <z_log_msg_static_create.constprop.0>
   1757a:	46ad      	mov	sp, r5
			return len;
   1757c:	4625      	mov	r5, r4
   1757e:	e78b      	b.n	17498 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   17580:	4620      	mov	r0, r4
   17582:	f7ff ff5f 	bl	17444 <clear_cf_cfg>
   17586:	e787      	b.n	17498 <cf_set+0x2c>
   17588:	000345be 	.word	0x000345be
   1758c:	000314ac 	.word	0x000314ac
   17590:	00035b4a 	.word	0x00035b4a
   17594:	01000003 	.word	0x01000003
   17598:	00035b66 	.word	0x00035b66
   1759c:	00035c8c 	.word	0x00035c8c
   175a0:	00035ba3 	.word	0x00035ba3

000175a4 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   175a4:	b508      	push	{r3, lr}
   175a6:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   175a8:	6881      	ldr	r1, [r0, #8]
   175aa:	4a07      	ldr	r2, [pc, #28]	; (175c8 <remove_peer_from_attr+0x24>)
   175ac:	4291      	cmp	r1, r2
   175ae:	d109      	bne.n	175c4 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   175b0:	791a      	ldrb	r2, [r3, #4]
   175b2:	6819      	ldr	r1, [r3, #0]
   175b4:	68c0      	ldr	r0, [r0, #12]
   175b6:	f015 fdfc 	bl	2d1b2 <ccc_find_cfg>
	if (cfg) {
   175ba:	b118      	cbz	r0, 175c4 <remove_peer_from_attr+0x20>
   175bc:	2300      	movs	r3, #0
   175be:	6003      	str	r3, [r0, #0]
   175c0:	6043      	str	r3, [r0, #4]
   175c2:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   175c4:	2001      	movs	r0, #1
   175c6:	bd08      	pop	{r3, pc}
   175c8:	000176a5 	.word	0x000176a5

000175cc <ccc_save>:
{
   175cc:	b538      	push	{r3, r4, r5, lr}
   175ce:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   175d0:	4b0b      	ldr	r3, [pc, #44]	; (17600 <ccc_save+0x34>)
   175d2:	6882      	ldr	r2, [r0, #8]
{
   175d4:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   175d6:	429a      	cmp	r2, r3
   175d8:	d10f      	bne.n	175fa <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   175da:	7922      	ldrb	r2, [r4, #4]
   175dc:	6821      	ldr	r1, [r4, #0]
   175de:	68c0      	ldr	r0, [r0, #12]
   175e0:	f015 fde7 	bl	2d1b2 <ccc_find_cfg>
	if (!cfg) {
   175e4:	b148      	cbz	r0, 175fa <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   175e6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   175ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   175ee:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   175f0:	8901      	ldrh	r1, [r0, #8]
	save->count++;
   175f2:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
   175f4:	8151      	strh	r1, [r2, #10]
	save->count++;
   175f6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   175fa:	2001      	movs	r0, #1
   175fc:	bd38      	pop	{r3, r4, r5, pc}
   175fe:	bf00      	nop
   17600:	000176a5 	.word	0x000176a5

00017604 <disconnected_cb>:
{
   17604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17608:	4b23      	ldr	r3, [pc, #140]	; (17698 <disconnected_cb+0x94>)
{
   1760a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1760c:	6882      	ldr	r2, [r0, #8]
{
   1760e:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17610:	429a      	cmp	r2, r3
   17612:	d102      	bne.n	1761a <disconnected_cb+0x16>
	ccc = attr->user_data;
   17614:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   17616:	8963      	ldrh	r3, [r4, #10]
   17618:	bb33      	cbnz	r3, 17668 <disconnected_cb+0x64>
}
   1761a:	2001      	movs	r0, #1
   1761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   17620:	f7fd fbfc 	bl	14e1c <bt_conn_unref>
		ccc->value = 0U;
   17624:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   17626:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   17628:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1762a:	2b00      	cmp	r3, #0
   1762c:	d0f5      	beq.n	1761a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1762e:	4638      	mov	r0, r7
   17630:	4798      	blx	r3
   17632:	e7f2      	b.n	1761a <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17634:	f105 0890 	add.w	r8, r5, #144	; 0x90
   17638:	4641      	mov	r1, r8
   1763a:	7a28      	ldrb	r0, [r5, #8]
   1763c:	f014 fd71 	bl	2c122 <bt_addr_le_is_bonded>
   17640:	b968      	cbnz	r0, 1765e <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   17642:	4b16      	ldr	r3, [pc, #88]	; (1769c <disconnected_cb+0x98>)
   17644:	429c      	cmp	r4, r3
   17646:	d102      	bne.n	1764e <disconnected_cb+0x4a>
					sc_clear(conn);
   17648:	4628      	mov	r0, r5
   1764a:	f7ff fdbd 	bl	171c8 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1764e:	4630      	mov	r0, r6
   17650:	4913      	ldr	r1, [pc, #76]	; (176a0 <disconnected_cb+0x9c>)
   17652:	f015 fdd4 	bl	2d1fe <bt_addr_le_copy>
	cfg->id = 0U;
   17656:	2300      	movs	r3, #0
   17658:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1765a:	8123      	strh	r3, [r4, #8]
}
   1765c:	e7e2      	b.n	17624 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1765e:	4641      	mov	r1, r8
   17660:	4630      	mov	r0, r6
   17662:	f015 fdcc 	bl	2d1fe <bt_addr_le_copy>
   17666:	e7dd      	b.n	17624 <disconnected_cb+0x20>
		if (!cfg->value) {
   17668:	8923      	ldrh	r3, [r4, #8]
   1766a:	2b00      	cmp	r3, #0
   1766c:	d0da      	beq.n	17624 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1766e:	4626      	mov	r6, r4
   17670:	f816 1b01 	ldrb.w	r1, [r6], #1
   17674:	4628      	mov	r0, r5
   17676:	4632      	mov	r2, r6
   17678:	f014 fff3 	bl	2c662 <bt_conn_is_peer_addr_le>
   1767c:	2800      	cmp	r0, #0
   1767e:	d1d9      	bne.n	17634 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17680:	4631      	mov	r1, r6
   17682:	7820      	ldrb	r0, [r4, #0]
   17684:	f7fd fea6 	bl	153d4 <bt_conn_lookup_addr_le>
			if (tmp) {
   17688:	2800      	cmp	r0, #0
   1768a:	d0cb      	beq.n	17624 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1768c:	7b43      	ldrb	r3, [r0, #13]
   1768e:	2b07      	cmp	r3, #7
   17690:	d1c6      	bne.n	17620 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   17692:	f7fd fbc3 	bl	14e1c <bt_conn_unref>
	if (!value_used) {
   17696:	e7c0      	b.n	1761a <disconnected_cb+0x16>
   17698:	000176a5 	.word	0x000176a5
   1769c:	20008524 	.word	0x20008524
   176a0:	00034568 	.word	0x00034568

000176a4 <bt_gatt_attr_write_ccc>:
{
   176a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   176a8:	b086      	sub	sp, #24
   176aa:	461f      	mov	r7, r3
   176ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   176b0:	4605      	mov	r5, r0
   176b2:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   176b4:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   176b8:	2b00      	cmp	r3, #0
   176ba:	d16d      	bne.n	17798 <bt_gatt_attr_write_ccc+0xf4>
	if (!len || len > sizeof(uint16_t)) {
   176bc:	1e7b      	subs	r3, r7, #1
   176be:	2b01      	cmp	r3, #1
   176c0:	d86d      	bhi.n	1779e <bt_gatt_attr_write_ccc+0xfa>
	if (len < sizeof(uint16_t)) {
   176c2:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   176c4:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   176c6:	7816      	ldrb	r6, [r2, #0]
   176c8:	bf18      	it	ne
   176ca:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   176cc:	f7ff fbd6 	bl	16e7c <find_ccc_cfg>
	if (!cfg) {
   176d0:	4604      	mov	r4, r0
   176d2:	b9e8      	cbnz	r0, 17710 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
   176d4:	b91e      	cbnz	r6, 176de <bt_gatt_attr_write_ccc+0x3a>
			return len;
   176d6:	4638      	mov	r0, r7
}
   176d8:	b006      	add	sp, #24
   176da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   176de:	4649      	mov	r1, r9
   176e0:	f7ff fbcc 	bl	16e7c <find_ccc_cfg>
		if (!cfg) {
   176e4:	4604      	mov	r4, r0
   176e6:	b960      	cbnz	r0, 17702 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   176e8:	4b2e      	ldr	r3, [pc, #184]	; (177a4 <bt_gatt_attr_write_ccc+0x100>)
   176ea:	482f      	ldr	r0, [pc, #188]	; (177a8 <bt_gatt_attr_write_ccc+0x104>)
   176ec:	9305      	str	r3, [sp, #20]
   176ee:	2302      	movs	r3, #2
   176f0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   176f4:	aa04      	add	r2, sp, #16
   176f6:	9304      	str	r3, [sp, #16]
   176f8:	f015 fe15 	bl	2d326 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   176fc:	f06f 0010 	mvn.w	r0, #16
   17700:	e7ea      	b.n	176d8 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17702:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17706:	3001      	adds	r0, #1
   17708:	f015 fd79 	bl	2d1fe <bt_addr_le_copy>
		cfg->id = conn->id;
   1770c:	7a2b      	ldrb	r3, [r5, #8]
   1770e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17710:	f8d9 3010 	ldr.w	r3, [r9, #16]
   17714:	bba3      	cbnz	r3, 17780 <bt_gatt_attr_write_ccc+0xdc>
	value_changed = cfg->value != value;
   17716:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   1771a:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   1771c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   17720:	42b3      	cmp	r3, r6
   17722:	d003      	beq.n	1772c <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   17724:	4649      	mov	r1, r9
   17726:	4640      	mov	r0, r8
   17728:	f015 fcc5 	bl	2d0b6 <gatt_ccc_changed>
	if (value_changed) {
   1772c:	45b2      	cmp	sl, r6
   1772e:	d01e      	beq.n	1776e <bt_gatt_attr_write_ccc+0xca>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   17730:	4628      	mov	r0, r5
   17732:	f7fd fc9f 	bl	15074 <bt_conn_index>
   17736:	f8df 8074 	ldr.w	r8, [pc, #116]	; 177ac <bt_gatt_attr_write_ccc+0x108>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1773a:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   1773e:	429d      	cmp	r5, r3
   17740:	d015      	beq.n	1776e <bt_gatt_attr_write_ccc+0xca>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17742:	7a28      	ldrb	r0, [r5, #8]
   17744:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17748:	f014 fceb 	bl	2c122 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1774c:	b178      	cbz	r0, 1776e <bt_gatt_attr_write_ccc+0xca>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1774e:	4628      	mov	r0, r5
   17750:	f7fd fc90 	bl	15074 <bt_conn_index>
   17754:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   17756:	4628      	mov	r0, r5
   17758:	f7fd fb38 	bl	14dcc <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1775c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   17760:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   17764:	2300      	movs	r3, #0
   17766:	f108 0008 	add.w	r0, r8, #8
   1776a:	f00e fcb9 	bl	260e0 <k_work_reschedule>
	if (!value) {
   1776e:	2e00      	cmp	r6, #0
   17770:	d1b1      	bne.n	176d6 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17772:	490f      	ldr	r1, [pc, #60]	; (177b0 <bt_gatt_attr_write_ccc+0x10c>)
   17774:	1c60      	adds	r0, r4, #1
   17776:	f015 fd42 	bl	2d1fe <bt_addr_le_copy>
	cfg->id = 0U;
   1777a:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   1777c:	8126      	strh	r6, [r4, #8]
}
   1777e:	e7aa      	b.n	176d6 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   17780:	4632      	mov	r2, r6
   17782:	4641      	mov	r1, r8
   17784:	4628      	mov	r0, r5
   17786:	4798      	blx	r3
		if (write < 0) {
   17788:	2800      	cmp	r0, #0
   1778a:	dba5      	blt.n	176d8 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1778c:	3801      	subs	r0, #1
   1778e:	2801      	cmp	r0, #1
   17790:	d9c1      	bls.n	17716 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   17792:	f06f 000d 	mvn.w	r0, #13
   17796:	e79f      	b.n	176d8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17798:	f06f 0006 	mvn.w	r0, #6
   1779c:	e79c      	b.n	176d8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1779e:	f06f 000c 	mvn.w	r0, #12
   177a2:	e799      	b.n	176d8 <bt_gatt_attr_write_ccc+0x34>
   177a4:	00035cae 	.word	0x00035cae
   177a8:	000314ac 	.word	0x000314ac
   177ac:	20009e70 	.word	0x20009e70
   177b0:	00034568 	.word	0x00034568

000177b4 <sc_commit>:
{
   177b4:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   177b6:	f06f 0102 	mvn.w	r1, #2
   177ba:	4808      	ldr	r0, [pc, #32]	; (177dc <sc_commit+0x28>)
   177bc:	f015 fd14 	bl	2d1e8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   177c0:	4806      	ldr	r0, [pc, #24]	; (177dc <sc_commit+0x28>)
   177c2:	f015 fd03 	bl	2d1cc <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   177c6:	07c3      	lsls	r3, r0, #31
   177c8:	d505      	bpl.n	177d6 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   177ca:	f44f 72a4 	mov.w	r2, #328	; 0x148
   177ce:	2300      	movs	r3, #0
   177d0:	4803      	ldr	r0, [pc, #12]	; (177e0 <sc_commit+0x2c>)
   177d2:	f00e fc85 	bl	260e0 <k_work_reschedule>
}
   177d6:	2000      	movs	r0, #0
   177d8:	bd08      	pop	{r3, pc}
   177da:	bf00      	nop
   177dc:	20009f70 	.word	0x20009f70
   177e0:	20009f40 	.word	0x20009f40

000177e4 <sc_indicate_rsp>:
{
   177e4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   177e6:	f06f 0102 	mvn.w	r1, #2
   177ea:	4604      	mov	r4, r0
   177ec:	480f      	ldr	r0, [pc, #60]	; (1782c <sc_indicate_rsp+0x48>)
   177ee:	f015 fcfb 	bl	2d1e8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   177f2:	480e      	ldr	r0, [pc, #56]	; (1782c <sc_indicate_rsp+0x48>)
   177f4:	f015 fcea 	bl	2d1cc <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   177f8:	07c2      	lsls	r2, r0, #31
   177fa:	d504      	bpl.n	17806 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   177fc:	2200      	movs	r2, #0
   177fe:	2300      	movs	r3, #0
   17800:	480b      	ldr	r0, [pc, #44]	; (17830 <sc_indicate_rsp+0x4c>)
   17802:	f00e fc6d 	bl	260e0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   17806:	4620      	mov	r0, r4
   17808:	f015 fc28 	bl	2d05c <bt_att_fixed_chan_only>
   1780c:	b160      	cbz	r0, 17828 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1780e:	4620      	mov	r0, r4
   17810:	f7ff fae4 	bl	16ddc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   17814:	b140      	cbz	r0, 17828 <sc_indicate_rsp+0x44>
   17816:	7a03      	ldrb	r3, [r0, #8]
   17818:	07db      	lsls	r3, r3, #31
   1781a:	d505      	bpl.n	17828 <sc_indicate_rsp+0x44>
}
   1781c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17820:	2101      	movs	r1, #1
   17822:	300c      	adds	r0, #12
   17824:	f015 bcd5 	b.w	2d1d2 <atomic_or>
   17828:	bd10      	pop	{r4, pc}
   1782a:	bf00      	nop
   1782c:	20009f70 	.word	0x20009f70
   17830:	20009f40 	.word	0x20009f40

00017834 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17834:	2201      	movs	r2, #1
{
   17836:	b510      	push	{r4, lr}
   17838:	4b28      	ldr	r3, [pc, #160]	; (178dc <bt_gatt_init+0xa8>)
   1783a:	e8d3 1fef 	ldaex	r1, [r3]
   1783e:	2900      	cmp	r1, #0
   17840:	d103      	bne.n	1784a <bt_gatt_init+0x16>
   17842:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17846:	2800      	cmp	r0, #0
   17848:	d1f7      	bne.n	1783a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1784a:	d146      	bne.n	178da <bt_gatt_init+0xa6>
   1784c:	4b24      	ldr	r3, [pc, #144]	; (178e0 <bt_gatt_init+0xac>)
   1784e:	e8d3 1fef 	ldaex	r1, [r3]
   17852:	2900      	cmp	r1, #0
   17854:	d103      	bne.n	1785e <bt_gatt_init+0x2a>
   17856:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1785a:	2800      	cmp	r0, #0
   1785c:	d1f7      	bne.n	1784e <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1785e:	d120      	bne.n	178a2 <bt_gatt_init+0x6e>
   17860:	2000      	movs	r0, #0
   17862:	4920      	ldr	r1, [pc, #128]	; (178e4 <bt_gatt_init+0xb0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17864:	4a20      	ldr	r2, [pc, #128]	; (178e8 <bt_gatt_init+0xb4>)
   17866:	880b      	ldrh	r3, [r1, #0]
   17868:	4c20      	ldr	r4, [pc, #128]	; (178ec <bt_gatt_init+0xb8>)
   1786a:	42a2      	cmp	r2, r4
   1786c:	d916      	bls.n	1789c <bt_gatt_init+0x68>
   1786e:	b100      	cbz	r0, 17872 <bt_gatt_init+0x3e>
   17870:	800b      	strh	r3, [r1, #0]
   17872:	491f      	ldr	r1, [pc, #124]	; (178f0 <bt_gatt_init+0xbc>)
   17874:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   17878:	4a1e      	ldr	r2, [pc, #120]	; (178f4 <bt_gatt_init+0xc0>)
   1787a:	481f      	ldr	r0, [pc, #124]	; (178f8 <bt_gatt_init+0xc4>)
   1787c:	f012 ff09 	bl	2a692 <assert_print>
   17880:	481e      	ldr	r0, [pc, #120]	; (178fc <bt_gatt_init+0xc8>)
   17882:	f012 ff06 	bl	2a692 <assert_print>
   17886:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1788a:	481a      	ldr	r0, [pc, #104]	; (178f4 <bt_gatt_init+0xc0>)
   1788c:	f012 fefa 	bl	2a684 <assert_post_action>
		last_static_handle += svc->attr_count;
   17890:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17892:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   17894:	4403      	add	r3, r0
   17896:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17898:	2001      	movs	r0, #1
   1789a:	e7e6      	b.n	1786a <bt_gatt_init+0x36>
   1789c:	d3f8      	bcc.n	17890 <bt_gatt_init+0x5c>
   1789e:	b100      	cbz	r0, 178a2 <bt_gatt_init+0x6e>
   178a0:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   178a2:	2200      	movs	r2, #0
   178a4:	4b16      	ldr	r3, [pc, #88]	; (17900 <bt_gatt_init+0xcc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   178a6:	4917      	ldr	r1, [pc, #92]	; (17904 <bt_gatt_init+0xd0>)
   178a8:	4817      	ldr	r0, [pc, #92]	; (17908 <bt_gatt_init+0xd4>)
	list->tail = NULL;
   178aa:	e9c3 2200 	strd	r2, r2, [r3]
   178ae:	f00e fafb 	bl	25ea8 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   178b2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   178b6:	2300      	movs	r3, #0
   178b8:	4813      	ldr	r0, [pc, #76]	; (17908 <bt_gatt_init+0xd4>)
   178ba:	f7fa fa6d 	bl	11d98 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   178be:	4913      	ldr	r1, [pc, #76]	; (1790c <bt_gatt_init+0xd8>)
   178c0:	4813      	ldr	r0, [pc, #76]	; (17910 <bt_gatt_init+0xdc>)
   178c2:	f00e faf1 	bl	25ea8 <k_work_init_delayable>
   178c6:	2102      	movs	r1, #2
   178c8:	4812      	ldr	r0, [pc, #72]	; (17914 <bt_gatt_init+0xe0>)
   178ca:	f015 fc82 	bl	2d1d2 <atomic_or>
}
   178ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   178d2:	4911      	ldr	r1, [pc, #68]	; (17918 <bt_gatt_init+0xe4>)
   178d4:	4811      	ldr	r0, [pc, #68]	; (1791c <bt_gatt_init+0xe8>)
   178d6:	f00e bae7 	b.w	25ea8 <k_work_init_delayable>
}
   178da:	bd10      	pop	{r4, pc}
   178dc:	2002171c 	.word	0x2002171c
   178e0:	20021718 	.word	0x20021718
   178e4:	20021b2c 	.word	0x20021b2c
   178e8:	0003143c 	.word	0x0003143c
   178ec:	00031454 	.word	0x00031454
   178f0:	00035cff 	.word	0x00035cff
   178f4:	00035cc8 	.word	0x00035cc8
   178f8:	00032629 	.word	0x00032629
   178fc:	0003368c 	.word	0x0003368c
   17900:	20021720 	.word	0x20021720
   17904:	00017b8d 	.word	0x00017b8d
   17908:	20009ec8 	.word	0x20009ec8
   1790c:	00018171 	.word	0x00018171
   17910:	20009f40 	.word	0x20009f40
   17914:	20009f70 	.word	0x20009f70
   17918:	0002d4fb 	.word	0x0002d4fb
   1791c:	20009e78 	.word	0x20009e78

00017920 <bt_gatt_attr_get_handle>:
	if (!attr) {
   17920:	4603      	mov	r3, r0
{
   17922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17926:	b398      	cbz	r0, 17990 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   17928:	8a00      	ldrh	r0, [r0, #16]
   1792a:	bb88      	cbnz	r0, 17990 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   1792c:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1792e:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17932:	4919      	ldr	r1, [pc, #100]	; (17998 <bt_gatt_attr_get_handle+0x78>)
   17934:	f8df e064 	ldr.w	lr, [pc, #100]	; 1799c <bt_gatt_attr_get_handle+0x7c>
   17938:	4571      	cmp	r1, lr
   1793a:	d928      	bls.n	1798e <bt_gatt_attr_get_handle+0x6e>
   1793c:	4918      	ldr	r1, [pc, #96]	; (179a0 <bt_gatt_attr_get_handle+0x80>)
   1793e:	f240 635d 	movw	r3, #1629	; 0x65d
   17942:	4a18      	ldr	r2, [pc, #96]	; (179a4 <bt_gatt_attr_get_handle+0x84>)
   17944:	4818      	ldr	r0, [pc, #96]	; (179a8 <bt_gatt_attr_get_handle+0x88>)
   17946:	f012 fea4 	bl	2a692 <assert_print>
   1794a:	4818      	ldr	r0, [pc, #96]	; (179ac <bt_gatt_attr_get_handle+0x8c>)
   1794c:	f012 fea1 	bl	2a692 <assert_print>
   17950:	f240 615d 	movw	r1, #1629	; 0x65d
   17954:	4813      	ldr	r0, [pc, #76]	; (179a4 <bt_gatt_attr_get_handle+0x84>)
   17956:	f012 fe95 	bl	2a684 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1795a:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1795e:	42bb      	cmp	r3, r7
   17960:	d304      	bcc.n	1796c <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17962:	fb0c 7206 	mla	r2, ip, r6, r7
   17966:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17968:	4293      	cmp	r3, r2
   1796a:	d90e      	bls.n	1798a <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   1796c:	4434      	add	r4, r6
   1796e:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17970:	4614      	mov	r4, r2
   17972:	3108      	adds	r1, #8
   17974:	e7e0      	b.n	17938 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   17976:	fb0c 7805 	mla	r8, ip, r5, r7
   1797a:	4543      	cmp	r3, r8
   1797c:	d00a      	beq.n	17994 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1797e:	3501      	adds	r5, #1
   17980:	1962      	adds	r2, r4, r5
   17982:	42b5      	cmp	r5, r6
   17984:	b292      	uxth	r2, r2
   17986:	d1f6      	bne.n	17976 <bt_gatt_attr_get_handle+0x56>
   17988:	e7f2      	b.n	17970 <bt_gatt_attr_get_handle+0x50>
   1798a:	2500      	movs	r5, #0
   1798c:	e7f8      	b.n	17980 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1798e:	d3e4      	bcc.n	1795a <bt_gatt_attr_get_handle+0x3a>
}
   17990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17994:	4610      	mov	r0, r2
   17996:	e7fb      	b.n	17990 <bt_gatt_attr_get_handle+0x70>
   17998:	0003143c 	.word	0x0003143c
   1799c:	00031454 	.word	0x00031454
   179a0:	00035cf8 	.word	0x00035cf8
   179a4:	00035cc8 	.word	0x00035cc8
   179a8:	00032629 	.word	0x00032629
   179ac:	0003368c 	.word	0x0003368c

000179b0 <bt_gatt_foreach_attr_type>:
{
   179b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179b4:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   179b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   179ba:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   179be:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   179c0:	2d00      	cmp	r5, #0
   179c2:	bf08      	it	eq
   179c4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   179c6:	4b2b      	ldr	r3, [pc, #172]	; (17a74 <bt_gatt_foreach_attr_type+0xc4>)
{
   179c8:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   179ca:	881b      	ldrh	r3, [r3, #0]
{
   179cc:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   179ce:	4283      	cmp	r3, r0
   179d0:	d232      	bcs.n	17a38 <bt_gatt_foreach_attr_type+0x88>
}
   179d2:	b003      	add	sp, #12
   179d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   179d8:	4640      	mov	r0, r8
   179da:	5889      	ldr	r1, [r1, r2]
   179dc:	9301      	str	r3, [sp, #4]
   179de:	f014 fa44 	bl	2be6a <bt_uuid_cmp>
   179e2:	9b01      	ldr	r3, [sp, #4]
   179e4:	b190      	cbz	r0, 17a0c <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   179e6:	3401      	adds	r4, #1
   179e8:	f10a 0a01 	add.w	sl, sl, #1
   179ec:	b2a4      	uxth	r4, r4
   179ee:	6873      	ldr	r3, [r6, #4]
   179f0:	4553      	cmp	r3, sl
   179f2:	d92c      	bls.n	17a4e <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   179f4:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   179f6:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   179f8:	429c      	cmp	r4, r3
   179fa:	d8ea      	bhi.n	179d2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   179fc:	42bc      	cmp	r4, r7
   179fe:	d3f2      	bcc.n	179e6 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a00:	fb0b f20a 	mul.w	r2, fp, sl
   17a04:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17a06:	f1b8 0f00 	cmp.w	r8, #0
   17a0a:	d1e5      	bne.n	179d8 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   17a0c:	f1b9 0f00 	cmp.w	r9, #0
   17a10:	d10b      	bne.n	17a2a <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   17a12:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   17a14:	4618      	mov	r0, r3
	*num_matches -= 1;
   17a16:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17a18:	4621      	mov	r1, r4
   17a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17a1e:	4798      	blx	r3
	if (!*num_matches) {
   17a20:	2d00      	cmp	r5, #0
   17a22:	d0d6      	beq.n	179d2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a24:	2800      	cmp	r0, #0
   17a26:	d1de      	bne.n	179e6 <bt_gatt_foreach_attr_type+0x36>
   17a28:	e7d3      	b.n	179d2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17a2a:	68da      	ldr	r2, [r3, #12]
   17a2c:	4591      	cmp	r9, r2
   17a2e:	d1da      	bne.n	179e6 <bt_gatt_foreach_attr_type+0x36>
   17a30:	e7ef      	b.n	17a12 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17a32:	f04f 0a00 	mov.w	sl, #0
   17a36:	e7da      	b.n	179ee <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   17a38:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a3a:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a3e:	4e0e      	ldr	r6, [pc, #56]	; (17a78 <bt_gatt_foreach_attr_type+0xc8>)
   17a40:	e006      	b.n	17a50 <bt_gatt_foreach_attr_type+0xa0>
   17a42:	d2c6      	bcs.n	179d2 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   17a44:	6873      	ldr	r3, [r6, #4]
   17a46:	4423      	add	r3, r4
   17a48:	42bb      	cmp	r3, r7
   17a4a:	d2f2      	bcs.n	17a32 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   17a4c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a4e:	3608      	adds	r6, #8
   17a50:	4b0a      	ldr	r3, [pc, #40]	; (17a7c <bt_gatt_foreach_attr_type+0xcc>)
   17a52:	429e      	cmp	r6, r3
   17a54:	d9f5      	bls.n	17a42 <bt_gatt_foreach_attr_type+0x92>
   17a56:	490a      	ldr	r1, [pc, #40]	; (17a80 <bt_gatt_foreach_attr_type+0xd0>)
   17a58:	f240 7321 	movw	r3, #1825	; 0x721
   17a5c:	4a09      	ldr	r2, [pc, #36]	; (17a84 <bt_gatt_foreach_attr_type+0xd4>)
   17a5e:	480a      	ldr	r0, [pc, #40]	; (17a88 <bt_gatt_foreach_attr_type+0xd8>)
   17a60:	f012 fe17 	bl	2a692 <assert_print>
   17a64:	4809      	ldr	r0, [pc, #36]	; (17a8c <bt_gatt_foreach_attr_type+0xdc>)
   17a66:	f012 fe14 	bl	2a692 <assert_print>
   17a6a:	f240 7121 	movw	r1, #1825	; 0x721
   17a6e:	4805      	ldr	r0, [pc, #20]	; (17a84 <bt_gatt_foreach_attr_type+0xd4>)
   17a70:	f012 fe08 	bl	2a684 <assert_post_action>
   17a74:	20021b2c 	.word	0x20021b2c
   17a78:	0003143c 	.word	0x0003143c
   17a7c:	00031454 	.word	0x00031454
   17a80:	00035cf8 	.word	0x00035cf8
   17a84:	00035cc8 	.word	0x00035cc8
   17a88:	00032629 	.word	0x00032629
   17a8c:	0003368c 	.word	0x0003368c

00017a90 <db_hash_gen>:
{
   17a90:	b530      	push	{r4, r5, lr}
	uint8_t key[16] = {};
   17a92:	2400      	movs	r4, #0
{
   17a94:	b0cf      	sub	sp, #316	; 0x13c
   17a96:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17a98:	4669      	mov	r1, sp
   17a9a:	aa22      	add	r2, sp, #136	; 0x88
   17a9c:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   17a9e:	e9cd 4400 	strd	r4, r4, [sp]
   17aa2:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17aa6:	f013 fe45 	bl	2b734 <tc_cmac_setup>
   17aaa:	b958      	cbnz	r0, 17ac4 <db_hash_gen+0x34>
		LOG_ERR("Unable to setup AES CMAC");
   17aac:	4b16      	ldr	r3, [pc, #88]	; (17b08 <db_hash_gen+0x78>)
		LOG_ERR("Unable to calculate hash");
   17aae:	9309      	str	r3, [sp, #36]	; 0x24
   17ab0:	2302      	movs	r3, #2
   17ab2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17ab6:	4815      	ldr	r0, [pc, #84]	; (17b0c <db_hash_gen+0x7c>)
   17ab8:	aa08      	add	r2, sp, #32
   17aba:	9308      	str	r3, [sp, #32]
   17abc:	f015 fc33 	bl	2d326 <z_log_msg_static_create.constprop.0>
}
   17ac0:	b04f      	add	sp, #316	; 0x13c
   17ac2:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   17ac4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17ac8:	2001      	movs	r0, #1
   17aca:	4a11      	ldr	r2, [pc, #68]	; (17b10 <db_hash_gen+0x80>)
   17acc:	ab0a      	add	r3, sp, #40	; 0x28
   17ace:	f015 fca1 	bl	2d414 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   17ad2:	4810      	ldr	r0, [pc, #64]	; (17b14 <db_hash_gen+0x84>)
   17ad4:	a90a      	add	r1, sp, #40	; 0x28
   17ad6:	f013 fec2 	bl	2b85e <tc_cmac_final>
   17ada:	b908      	cbnz	r0, 17ae0 <db_hash_gen+0x50>
		LOG_ERR("Unable to calculate hash");
   17adc:	4b0e      	ldr	r3, [pc, #56]	; (17b18 <db_hash_gen+0x88>)
   17ade:	e7e6      	b.n	17aae <db_hash_gen+0x1e>
   17ae0:	4b0c      	ldr	r3, [pc, #48]	; (17b14 <db_hash_gen+0x84>)
   17ae2:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   17ae6:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17ae8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   17aec:	3401      	adds	r4, #1
   17aee:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17af0:	f803 0b01 	strb.w	r0, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17af4:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   17af6:	d1f6      	bne.n	17ae6 <db_hash_gen+0x56>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   17af8:	b10d      	cbz	r5, 17afe <db_hash_gen+0x6e>
		db_hash_store();
   17afa:	f7ff fc5d 	bl	173b8 <db_hash_store>
   17afe:	2104      	movs	r1, #4
   17b00:	4806      	ldr	r0, [pc, #24]	; (17b1c <db_hash_gen+0x8c>)
   17b02:	f015 fb66 	bl	2d1d2 <atomic_or>
   17b06:	e7db      	b.n	17ac0 <db_hash_gen+0x30>
   17b08:	00035d27 	.word	0x00035d27
   17b0c:	000314ac 	.word	0x000314ac
   17b10:	0002d0fd 	.word	0x0002d0fd
   17b14:	20009ea8 	.word	0x20009ea8
   17b18:	00035d40 	.word	0x00035d40
   17b1c:	20009f70 	.word	0x20009f70

00017b20 <db_hash_read>:
{
   17b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b24:	4916      	ldr	r1, [pc, #88]	; (17b80 <db_hash_read+0x60>)
{
   17b26:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b28:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17b2c:	4615      	mov	r5, r2
   17b2e:	461e      	mov	r6, r3
   17b30:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b34:	f00e fb34 	bl	261a0 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17b38:	4812      	ldr	r0, [pc, #72]	; (17b84 <db_hash_read+0x64>)
   17b3a:	f015 fb47 	bl	2d1cc <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17b3e:	0741      	lsls	r1, r0, #29
   17b40:	d402      	bmi.n	17b48 <db_hash_read+0x28>
		db_hash_gen(true);
   17b42:	2001      	movs	r0, #1
   17b44:	f7ff ffa4 	bl	17a90 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   17b48:	4620      	mov	r0, r4
   17b4a:	f7ff f947 	bl	16ddc <find_cf_cfg>
	if (cfg &&
   17b4e:	b168      	cbz	r0, 17b6c <db_hash_read+0x4c>
   17b50:	7a03      	ldrb	r3, [r0, #8]
   17b52:	07da      	lsls	r2, r3, #31
   17b54:	d50a      	bpl.n	17b6c <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   17b56:	f100 040c 	add.w	r4, r0, #12
   17b5a:	4620      	mov	r0, r4
   17b5c:	f015 fb36 	bl	2d1cc <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   17b60:	07c3      	lsls	r3, r0, #31
   17b62:	d403      	bmi.n	17b6c <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17b64:	2102      	movs	r1, #2
   17b66:	4620      	mov	r0, r4
   17b68:	f015 fb33 	bl	2d1d2 <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17b6c:	2310      	movs	r3, #16
   17b6e:	463a      	mov	r2, r7
   17b70:	9306      	str	r3, [sp, #24]
   17b72:	4631      	mov	r1, r6
   17b74:	4628      	mov	r0, r5
}
   17b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17b7a:	4b03      	ldr	r3, [pc, #12]	; (17b88 <db_hash_read+0x68>)
   17b7c:	f015 bb4b 	b.w	2d216 <bt_gatt_attr_read.constprop.0>
   17b80:	20009ef8 	.word	0x20009ef8
   17b84:	20009f70 	.word	0x20009f70
   17b88:	20009ea8 	.word	0x20009ea8

00017b8c <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17b8c:	f06f 0108 	mvn.w	r1, #8
{
   17b90:	b508      	push	{r3, lr}
   17b92:	4826      	ldr	r0, [pc, #152]	; (17c2c <db_hash_process+0xa0>)
   17b94:	f015 fb28 	bl	2d1e8 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   17b98:	0701      	lsls	r1, r0, #28
   17b9a:	d542      	bpl.n	17c22 <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17b9c:	4823      	ldr	r0, [pc, #140]	; (17c2c <db_hash_process+0xa0>)
   17b9e:	f015 fb15 	bl	2d1cc <atomic_get>
   17ba2:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17ba4:	075a      	lsls	r2, r3, #29
   17ba6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17baa:	d401      	bmi.n	17bb0 <db_hash_process+0x24>
			db_hash_gen(false);
   17bac:	f7ff ff70 	bl	17a90 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   17bb0:	2210      	movs	r2, #16
   17bb2:	491f      	ldr	r1, [pc, #124]	; (17c30 <db_hash_process+0xa4>)
   17bb4:	1888      	adds	r0, r1, r2
   17bb6:	f018 fcb6 	bl	30526 <memcmp>
   17bba:	b948      	cbnz	r0, 17bd0 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   17bbc:	481d      	ldr	r0, [pc, #116]	; (17c34 <db_hash_process+0xa8>)
   17bbe:	f00e fa95 	bl	260ec <k_work_cancel_delayable>
}
   17bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17bc6:	f06f 0101 	mvn.w	r1, #1
   17bca:	4818      	ldr	r0, [pc, #96]	; (17c2c <db_hash_process+0xa0>)
   17bcc:	f015 bb0c 	b.w	2d1e8 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17bd0:	2101      	movs	r1, #1
   17bd2:	4816      	ldr	r0, [pc, #88]	; (17c2c <db_hash_process+0xa0>)
   17bd4:	f015 fafd 	bl	2d1d2 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17bd8:	f010 0f01 	tst.w	r0, #1
   17bdc:	4b16      	ldr	r3, [pc, #88]	; (17c38 <db_hash_process+0xac>)
   17bde:	d110      	bne.n	17c02 <db_hash_process+0x76>
		gatt_sc.start = start;
   17be0:	4a16      	ldr	r2, [pc, #88]	; (17c3c <db_hash_process+0xb0>)
   17be2:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17be4:	4811      	ldr	r0, [pc, #68]	; (17c2c <db_hash_process+0xa0>)
   17be6:	f015 faf1 	bl	2d1cc <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   17bea:	0783      	lsls	r3, r0, #30
   17bec:	d405      	bmi.n	17bfa <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   17bee:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17bf2:	2300      	movs	r3, #0
   17bf4:	480f      	ldr	r0, [pc, #60]	; (17c34 <db_hash_process+0xa8>)
   17bf6:	f00e fa73 	bl	260e0 <k_work_reschedule>
}
   17bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   17bfe:	f7ff bbdb 	b.w	173b8 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   17c02:	8b1a      	ldrh	r2, [r3, #24]
   17c04:	8b58      	ldrh	r0, [r3, #26]
   17c06:	2a01      	cmp	r2, #1
   17c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c0c:	d805      	bhi.n	17c1a <db_hash_process+0x8e>
   17c0e:	4290      	cmp	r0, r2
   17c10:	d0f3      	beq.n	17bfa <db_hash_process+0x6e>
		*end = new_end;
   17c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c16:	835a      	strh	r2, [r3, #26]
   17c18:	e7e4      	b.n	17be4 <db_hash_process+0x58>
	if (*end < new_end) {
   17c1a:	4290      	cmp	r0, r2
		*start = new_start;
   17c1c:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   17c1e:	d0e1      	beq.n	17be4 <db_hash_process+0x58>
   17c20:	e7f7      	b.n	17c12 <db_hash_process+0x86>
	db_hash_gen(true);
   17c22:	2001      	movs	r0, #1
}
   17c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   17c28:	f7ff bf32 	b.w	17a90 <db_hash_gen>
   17c2c:	20009f70 	.word	0x20009f70
   17c30:	20009ea8 	.word	0x20009ea8
   17c34:	20009f40 	.word	0x20009f40
   17c38:	20009f20 	.word	0x20009f20
   17c3c:	ffff0001 	.word	0xffff0001

00017c40 <ccc_set_direct>:
{
   17c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c44:	b0b8      	sub	sp, #224	; 0xe0
   17c46:	af00      	add	r7, sp, #0
   17c48:	460c      	mov	r4, r1
   17c4a:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17c4c:	493f      	ldr	r1, [pc, #252]	; (17d4c <ccc_set_direct+0x10c>)
   17c4e:	463a      	mov	r2, r7
   17c50:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
{
   17c54:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17c56:	f013 fb1a 	bl	2b28e <settings_name_steq>
   17c5a:	b938      	cbnz	r0, 17c6c <ccc_set_direct+0x2c>
   17c5c:	f7ff f99e 	bl	16f9c <ccc_set_direct.part.0>
   17c60:	4605      	mov	r5, r0
}
   17c62:	4628      	mov	r0, r5
   17c64:	37e0      	adds	r7, #224	; 0xe0
   17c66:	46bd      	mov	sp, r7
   17c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   17c6c:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   17c6e:	1d39      	adds	r1, r7, #4
   17c70:	4630      	mov	r0, r6
   17c72:	f013 fb30 	bl	2b2d6 <settings_name_next>
		if (!name) {
   17c76:	b96e      	cbnz	r6, 17c94 <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   17c78:	4b35      	ldr	r3, [pc, #212]	; (17d50 <ccc_set_direct+0x110>)
   17c7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17c7e:	637b      	str	r3, [r7, #52]	; 0x34
   17c80:	2302      	movs	r3, #2
   17c82:	4834      	ldr	r0, [pc, #208]	; (17d54 <ccc_set_direct+0x114>)
   17c84:	633b      	str	r3, [r7, #48]	; 0x30
   17c86:	f107 0230 	add.w	r2, r7, #48	; 0x30
   17c8a:	f015 fb4c 	bl	2d326 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17c8e:	f06f 0415 	mvn.w	r4, #21
   17c92:	e049      	b.n	17d28 <ccc_set_direct+0xe8>
		} else if (!next) {
   17c94:	6878      	ldr	r0, [r7, #4]
   17c96:	b9c0      	cbnz	r0, 17cca <ccc_set_direct+0x8a>
			load.addr_with_id.id = BT_ID_DEFAULT;
   17c98:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   17c9a:	f107 0a08 	add.w	sl, r7, #8
   17c9e:	4651      	mov	r1, sl
   17ca0:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   17ca2:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   17ca4:	f014 f8bd 	bl	2be22 <bt_settings_decode_key>
		if (err) {
   17ca8:	4605      	mov	r5, r0
   17caa:	b320      	cbz	r0, 17cf6 <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   17cac:	466c      	mov	r4, sp
   17cae:	b088      	sub	sp, #32
   17cb0:	466a      	mov	r2, sp
   17cb2:	4b29      	ldr	r3, [pc, #164]	; (17d58 <ccc_set_direct+0x118>)
   17cb4:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   17cb8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   17cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
   17cc0:	8393      	strh	r3, [r2, #28]
   17cc2:	4b26      	ldr	r3, [pc, #152]	; (17d5c <ccc_set_direct+0x11c>)
   17cc4:	f842 3f10 	str.w	r3, [r2, #16]!
   17cc8:	e010      	b.n	17cec <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   17cca:	220a      	movs	r2, #10
   17ccc:	2100      	movs	r1, #0
   17cce:	f011 f98f 	bl	28ff0 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   17cd2:	2800      	cmp	r0, #0
   17cd4:	d0e0      	beq.n	17c98 <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   17cd6:	466c      	mov	r4, sp
   17cd8:	b088      	sub	sp, #32
   17cda:	466a      	mov	r2, sp
   17cdc:	4b20      	ldr	r3, [pc, #128]	; (17d60 <ccc_set_direct+0x120>)
   17cde:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17ce2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17ce6:	2303      	movs	r3, #3
   17ce8:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Unable to decode address %s", name);
   17cec:	4819      	ldr	r0, [pc, #100]	; (17d54 <ccc_set_direct+0x114>)
   17cee:	f015 fb1a 	bl	2d326 <z_log_msg_static_create.constprop.0>
   17cf2:	46a5      	mov	sp, r4
			return -EINVAL;
   17cf4:	e7cb      	b.n	17c8e <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   17cf6:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   17cfa:	b32c      	cbz	r4, 17d48 <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   17cfc:	22c0      	movs	r2, #192	; 0xc0
   17cfe:	4648      	mov	r0, r9
   17d00:	f107 0120 	add.w	r1, r7, #32
   17d04:	47c0      	blx	r8
			if (len < 0) {
   17d06:	1e04      	subs	r4, r0, #0
   17d08:	da10      	bge.n	17d2c <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   17d0a:	466d      	mov	r5, sp
   17d0c:	b088      	sub	sp, #32
   17d0e:	466a      	mov	r2, sp
   17d10:	4b14      	ldr	r3, [pc, #80]	; (17d64 <ccc_set_direct+0x124>)
   17d12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17d16:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17d1a:	2303      	movs	r3, #3
   17d1c:	480d      	ldr	r0, [pc, #52]	; (17d54 <ccc_set_direct+0x114>)
   17d1e:	f842 3f10 	str.w	r3, [r2, #16]!
   17d22:	f015 fb00 	bl	2d326 <z_log_msg_static_create.constprop.0>
   17d26:	46ad      	mov	sp, r5
			return -EINVAL;
   17d28:	4625      	mov	r5, r4
   17d2a:	e79a      	b.n	17c62 <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   17d2c:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   17d2e:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   17d32:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   17d36:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17d3a:	2001      	movs	r0, #1
   17d3c:	4a0a      	ldr	r2, [pc, #40]	; (17d68 <ccc_set_direct+0x128>)
   17d3e:	f107 0310 	add.w	r3, r7, #16
   17d42:	f015 fb67 	bl	2d414 <bt_gatt_foreach_attr>
	return 0;
   17d46:	e78c      	b.n	17c62 <ccc_set_direct+0x22>
   17d48:	4623      	mov	r3, r4
   17d4a:	e7f2      	b.n	17d32 <ccc_set_direct+0xf2>
   17d4c:	00035d59 	.word	0x00035d59
   17d50:	000345be 	.word	0x000345be
   17d54:	000314ac 	.word	0x000314ac
   17d58:	00035b4a 	.word	0x00035b4a
   17d5c:	01000003 	.word	0x01000003
   17d60:	00035b66 	.word	0x00035b66
   17d64:	00035ba3 	.word	0x00035ba3
   17d68:	00016ee9 	.word	0x00016ee9

00017d6c <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   17d6c:	2300      	movs	r3, #0
{
   17d6e:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   17d70:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   17d72:	f7ff fdd5 	bl	17920 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   17d76:	1c41      	adds	r1, r0, #1
   17d78:	b289      	uxth	r1, r1
   17d7a:	4608      	mov	r0, r1
   17d7c:	4a03      	ldr	r2, [pc, #12]	; (17d8c <bt_gatt_attr_next+0x20>)
   17d7e:	ab01      	add	r3, sp, #4
   17d80:	f015 fb48 	bl	2d414 <bt_gatt_foreach_attr>
}
   17d84:	9801      	ldr	r0, [sp, #4]
   17d86:	b003      	add	sp, #12
   17d88:	f85d fb04 	ldr.w	pc, [sp], #4
   17d8c:	0002d0b1 	.word	0x0002d0b1

00017d90 <bt_gatt_is_subscribed>:
{
   17d90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17d94:	460c      	mov	r4, r1
   17d96:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   17d98:	4605      	mov	r5, r0
   17d9a:	b970      	cbnz	r0, 17dba <bt_gatt_is_subscribed+0x2a>
   17d9c:	495b      	ldr	r1, [pc, #364]	; (17f0c <bt_gatt_is_subscribed+0x17c>)
   17d9e:	f640 434d 	movw	r3, #3149	; 0xc4d
   17da2:	4a5b      	ldr	r2, [pc, #364]	; (17f10 <bt_gatt_is_subscribed+0x180>)
   17da4:	485b      	ldr	r0, [pc, #364]	; (17f14 <bt_gatt_is_subscribed+0x184>)
   17da6:	f012 fc74 	bl	2a692 <assert_print>
   17daa:	485b      	ldr	r0, [pc, #364]	; (17f18 <bt_gatt_is_subscribed+0x188>)
   17dac:	f012 fc71 	bl	2a692 <assert_print>
   17db0:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   17db4:	4856      	ldr	r0, [pc, #344]	; (17f10 <bt_gatt_is_subscribed+0x180>)
   17db6:	f012 fc65 	bl	2a684 <assert_post_action>
   17dba:	b961      	cbnz	r1, 17dd6 <bt_gatt_is_subscribed+0x46>
   17dbc:	4957      	ldr	r1, [pc, #348]	; (17f1c <bt_gatt_is_subscribed+0x18c>)
   17dbe:	f640 434e 	movw	r3, #3150	; 0xc4e
   17dc2:	4a53      	ldr	r2, [pc, #332]	; (17f10 <bt_gatt_is_subscribed+0x180>)
   17dc4:	4853      	ldr	r0, [pc, #332]	; (17f14 <bt_gatt_is_subscribed+0x184>)
   17dc6:	f012 fc64 	bl	2a692 <assert_print>
   17dca:	4853      	ldr	r0, [pc, #332]	; (17f18 <bt_gatt_is_subscribed+0x188>)
   17dcc:	f012 fc61 	bl	2a692 <assert_print>
   17dd0:	f640 414e 	movw	r1, #3150	; 0xc4e
   17dd4:	e7ee      	b.n	17db4 <bt_gatt_is_subscribed+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   17dd6:	7b43      	ldrb	r3, [r0, #13]
   17dd8:	2b07      	cmp	r3, #7
   17dda:	d110      	bne.n	17dfe <bt_gatt_is_subscribed+0x6e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   17ddc:	2300      	movs	r3, #0
   17dde:	f88d 300c 	strb.w	r3, [sp, #12]
   17de2:	f642 0303 	movw	r3, #10243	; 0x2803
   17de6:	6820      	ldr	r0, [r4, #0]
   17de8:	a903      	add	r1, sp, #12
   17dea:	f8ad 300e 	strh.w	r3, [sp, #14]
   17dee:	f014 f83c 	bl	2be6a <bt_uuid_cmp>
   17df2:	b9d0      	cbnz	r0, 17e2a <bt_gatt_is_subscribed+0x9a>
		if (!(chrc->properties &
   17df4:	68e3      	ldr	r3, [r4, #12]
   17df6:	799b      	ldrb	r3, [r3, #6]
   17df8:	f013 0f30 	tst.w	r3, #48	; 0x30
   17dfc:	d103      	bne.n	17e06 <bt_gatt_is_subscribed+0x76>
		return false;
   17dfe:	2000      	movs	r0, #0
}
   17e00:	b004      	add	sp, #16
   17e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   17e06:	4620      	mov	r0, r4
   17e08:	f7ff ffb0 	bl	17d6c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17e0c:	4604      	mov	r4, r0
   17e0e:	b960      	cbnz	r0, 17e2a <bt_gatt_is_subscribed+0x9a>
   17e10:	4942      	ldr	r1, [pc, #264]	; (17f1c <bt_gatt_is_subscribed+0x18c>)
   17e12:	f640 435f 	movw	r3, #3167	; 0xc5f
   17e16:	4a3e      	ldr	r2, [pc, #248]	; (17f10 <bt_gatt_is_subscribed+0x180>)
   17e18:	483e      	ldr	r0, [pc, #248]	; (17f14 <bt_gatt_is_subscribed+0x184>)
   17e1a:	f012 fc3a 	bl	2a692 <assert_print>
   17e1e:	4840      	ldr	r0, [pc, #256]	; (17f20 <bt_gatt_is_subscribed+0x190>)
   17e20:	f012 fc37 	bl	2a692 <assert_print>
   17e24:	f640 415f 	movw	r1, #3167	; 0xc5f
   17e28:	e7c4      	b.n	17db4 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17e2a:	2300      	movs	r3, #0
   17e2c:	6820      	ldr	r0, [r4, #0]
   17e2e:	f88d 300c 	strb.w	r3, [sp, #12]
   17e32:	f642 1302 	movw	r3, #10498	; 0x2902
   17e36:	a903      	add	r1, sp, #12
   17e38:	f8ad 300e 	strh.w	r3, [sp, #14]
   17e3c:	f014 f815 	bl	2be6a <bt_uuid_cmp>
   17e40:	b188      	cbz	r0, 17e66 <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   17e42:	4620      	mov	r0, r4
   17e44:	f7ff ff92 	bl	17d6c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17e48:	4604      	mov	r4, r0
   17e4a:	b960      	cbnz	r0, 17e66 <bt_gatt_is_subscribed+0xd6>
   17e4c:	4933      	ldr	r1, [pc, #204]	; (17f1c <bt_gatt_is_subscribed+0x18c>)
   17e4e:	f640 4365 	movw	r3, #3173	; 0xc65
   17e52:	4a2f      	ldr	r2, [pc, #188]	; (17f10 <bt_gatt_is_subscribed+0x180>)
   17e54:	482f      	ldr	r0, [pc, #188]	; (17f14 <bt_gatt_is_subscribed+0x184>)
   17e56:	f012 fc1c 	bl	2a692 <assert_print>
   17e5a:	4831      	ldr	r0, [pc, #196]	; (17f20 <bt_gatt_is_subscribed+0x190>)
   17e5c:	f012 fc19 	bl	2a692 <assert_print>
   17e60:	f640 4165 	movw	r1, #3173	; 0xc65
   17e64:	e7a6      	b.n	17db4 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17e66:	2600      	movs	r6, #0
   17e68:	f642 1802 	movw	r8, #10498	; 0x2902
   17e6c:	6820      	ldr	r0, [r4, #0]
   17e6e:	4669      	mov	r1, sp
   17e70:	f88d 6000 	strb.w	r6, [sp]
   17e74:	f8ad 8002 	strh.w	r8, [sp, #2]
   17e78:	f013 fff7 	bl	2be6a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17e7c:	b9d8      	cbnz	r0, 17eb6 <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17e7e:	2300      	movs	r3, #0
   17e80:	6820      	ldr	r0, [r4, #0]
   17e82:	f88d 300c 	strb.w	r3, [sp, #12]
   17e86:	f642 1302 	movw	r3, #10498	; 0x2902
   17e8a:	a903      	add	r1, sp, #12
   17e8c:	f8ad 300e 	strh.w	r3, [sp, #14]
   17e90:	f013 ffeb 	bl	2be6a <bt_uuid_cmp>
   17e94:	2800      	cmp	r0, #0
   17e96:	d1b2      	bne.n	17dfe <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   17e98:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   17e9a:	4628      	mov	r0, r5
   17e9c:	4622      	mov	r2, r4
   17e9e:	f812 1b01 	ldrb.w	r1, [r2], #1
   17ea2:	f014 fbde 	bl	2c662 <bt_conn_is_peer_addr_le>
   17ea6:	2800      	cmp	r0, #0
   17ea8:	d0a9      	beq.n	17dfe <bt_gatt_is_subscribed+0x6e>
   17eaa:	8923      	ldrh	r3, [r4, #8]
   17eac:	421f      	tst	r7, r3
   17eae:	bf14      	ite	ne
   17eb0:	2001      	movne	r0, #1
   17eb2:	2000      	moveq	r0, #0
   17eb4:	e7a4      	b.n	17e00 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17eb6:	f642 0303 	movw	r3, #10243	; 0x2803
   17eba:	6820      	ldr	r0, [r4, #0]
   17ebc:	a901      	add	r1, sp, #4
   17ebe:	f88d 6004 	strb.w	r6, [sp, #4]
   17ec2:	f8ad 3006 	strh.w	r3, [sp, #6]
   17ec6:	f013 ffd0 	bl	2be6a <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17eca:	2800      	cmp	r0, #0
   17ecc:	d0d7      	beq.n	17e7e <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17ece:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17ed2:	6820      	ldr	r0, [r4, #0]
   17ed4:	a902      	add	r1, sp, #8
   17ed6:	f88d 6008 	strb.w	r6, [sp, #8]
   17eda:	f8ad 300a 	strh.w	r3, [sp, #10]
   17ede:	f013 ffc4 	bl	2be6a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17ee2:	2800      	cmp	r0, #0
   17ee4:	d0cb      	beq.n	17e7e <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17ee6:	f642 0301 	movw	r3, #10241	; 0x2801
   17eea:	6820      	ldr	r0, [r4, #0]
   17eec:	a903      	add	r1, sp, #12
   17eee:	f88d 600c 	strb.w	r6, [sp, #12]
   17ef2:	f8ad 300e 	strh.w	r3, [sp, #14]
   17ef6:	f013 ffb8 	bl	2be6a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17efa:	2800      	cmp	r0, #0
   17efc:	d0bf      	beq.n	17e7e <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   17efe:	4620      	mov	r0, r4
   17f00:	f7ff ff34 	bl	17d6c <bt_gatt_attr_next>
		if (!attr) {
   17f04:	4604      	mov	r4, r0
   17f06:	2800      	cmp	r0, #0
   17f08:	d1b0      	bne.n	17e6c <bt_gatt_is_subscribed+0xdc>
   17f0a:	e778      	b.n	17dfe <bt_gatt_is_subscribed+0x6e>
   17f0c:	00034b90 	.word	0x00034b90
   17f10:	00035cc8 	.word	0x00035cc8
   17f14:	00032629 	.word	0x00032629
   17f18:	00035d60 	.word	0x00035d60
   17f1c:	00035d75 	.word	0x00035d75
   17f20:	00035d7a 	.word	0x00035d7a

00017f24 <gatt_indicate>:
{
   17f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17f28:	4615      	mov	r5, r2
   17f2a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17f2c:	2294      	movs	r2, #148	; 0x94
   17f2e:	6869      	ldr	r1, [r5, #4]
{
   17f30:	b086      	sub	sp, #24
   17f32:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17f34:	f015 fa79 	bl	2d42a <bt_gatt_check_perm>
   17f38:	4680      	mov	r8, r0
   17f3a:	b178      	cbz	r0, 17f5c <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   17f3c:	4b36      	ldr	r3, [pc, #216]	; (18018 <gatt_indicate+0xf4>)
		return -EPERM;
   17f3e:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   17f42:	9305      	str	r3, [sp, #20]
   17f44:	2302      	movs	r3, #2
   17f46:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17f4a:	4834      	ldr	r0, [pc, #208]	; (1801c <gatt_indicate+0xf8>)
   17f4c:	aa04      	add	r2, sp, #16
   17f4e:	9304      	str	r3, [sp, #16]
   17f50:	f015 f9e9 	bl	2d326 <z_log_msg_static_create.constprop.0>
}
   17f54:	4628      	mov	r0, r5
   17f56:	b006      	add	sp, #24
   17f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   17f5c:	2202      	movs	r2, #2
   17f5e:	4630      	mov	r0, r6
   17f60:	6869      	ldr	r1, [r5, #4]
   17f62:	f7ff ff15 	bl	17d90 <bt_gatt_is_subscribed>
   17f66:	b960      	cbnz	r0, 17f82 <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   17f68:	4b2d      	ldr	r3, [pc, #180]	; (18020 <gatt_indicate+0xfc>)
   17f6a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17f6e:	9305      	str	r3, [sp, #20]
   17f70:	2302      	movs	r3, #2
   17f72:	482a      	ldr	r0, [pc, #168]	; (1801c <gatt_indicate+0xf8>)
   17f74:	aa04      	add	r2, sp, #16
   17f76:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   17f78:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   17f7c:	f015 f9d3 	bl	2d326 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17f80:	e7e8      	b.n	17f54 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17f82:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17f86:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17f88:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17f8a:	f7fe fd93 	bl	16ab4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17f8e:	3702      	adds	r7, #2
	if (!req) {
   17f90:	4604      	mov	r4, r0
   17f92:	b1d0      	cbz	r0, 17fca <gatt_indicate+0xa6>
	req->att_op = op;
   17f94:	211d      	movs	r1, #29
	req->func = func;
   17f96:	4b23      	ldr	r3, [pc, #140]	; (18024 <gatt_indicate+0x100>)
	req->len = len;
   17f98:	6147      	str	r7, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17f9a:	463a      	mov	r2, r7
	req->att_op = op;
   17f9c:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   17f9e:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   17fa2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17fa4:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17fa6:	4630      	mov	r0, r6
   17fa8:	f7fe fab6 	bl	16518 <bt_att_create_pdu>
	if (!buf) {
   17fac:	4607      	mov	r7, r0
   17fae:	b978      	cbnz	r0, 17fd0 <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   17fb0:	4b1d      	ldr	r3, [pc, #116]	; (18028 <gatt_indicate+0x104>)
   17fb2:	481a      	ldr	r0, [pc, #104]	; (1801c <gatt_indicate+0xf8>)
   17fb4:	9305      	str	r3, [sp, #20]
   17fb6:	2302      	movs	r3, #2
   17fb8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17fbc:	aa04      	add	r2, sp, #16
   17fbe:	9304      	str	r3, [sp, #16]
   17fc0:	f015 f9b1 	bl	2d326 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   17fc4:	4620      	mov	r0, r4
   17fc6:	f7fe fd99 	bl	16afc <bt_att_req_free>
		return -ENOMEM;
   17fca:	f06f 050b 	mvn.w	r5, #11
   17fce:	e7c1      	b.n	17f54 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   17fd0:	2301      	movs	r3, #1
   17fd2:	4642      	mov	r2, r8
   17fd4:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   17fd6:	f107 0a0c 	add.w	sl, r7, #12
   17fda:	f015 f862 	bl	2d0a2 <bt_att_set_tx_meta_data>
   17fde:	2102      	movs	r1, #2
   17fe0:	4650      	mov	r0, sl
   17fe2:	f003 fbdf 	bl	1b7a4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   17fe6:	4680      	mov	r8, r0
   17fe8:	f828 9b02 	strh.w	r9, [r8], #2
   17fec:	8aa9      	ldrh	r1, [r5, #20]
   17fee:	4650      	mov	r0, sl
   17ff0:	f003 fbd8 	bl	1b7a4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17ff4:	8aaa      	ldrh	r2, [r5, #20]
   17ff6:	6929      	ldr	r1, [r5, #16]
   17ff8:	4640      	mov	r0, r8
   17ffa:	f018 faa4 	bl	30546 <memcpy>
	err = bt_att_req_send(conn, req);
   17ffe:	4621      	mov	r1, r4
   18000:	4630      	mov	r0, r6
	req->buf = buf;
   18002:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   18004:	f7fe feb4 	bl	16d70 <bt_att_req_send>
	if (err) {
   18008:	4605      	mov	r5, r0
   1800a:	2800      	cmp	r0, #0
   1800c:	d0a2      	beq.n	17f54 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1800e:	4620      	mov	r0, r4
   18010:	f7fe fd74 	bl	16afc <bt_att_req_free>
   18014:	e79e      	b.n	17f54 <gatt_indicate+0x30>
   18016:	bf00      	nop
   18018:	00035d90 	.word	0x00035d90
   1801c:	000314ac 	.word	0x000314ac
   18020:	00035da6 	.word	0x00035da6
   18024:	0002d0cb 	.word	0x0002d0cb
   18028:	00035dd1 	.word	0x00035dd1

0001802c <bt_gatt_indicate>:
{
   1802c:	b530      	push	{r4, r5, lr}
   1802e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   18030:	460c      	mov	r4, r1
{
   18032:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   18034:	b971      	cbnz	r1, 18054 <bt_gatt_indicate+0x28>
   18036:	4946      	ldr	r1, [pc, #280]	; (18150 <bt_gatt_indicate+0x124>)
   18038:	f640 330d 	movw	r3, #2829	; 0xb0d
   1803c:	4a45      	ldr	r2, [pc, #276]	; (18154 <bt_gatt_indicate+0x128>)
   1803e:	4846      	ldr	r0, [pc, #280]	; (18158 <bt_gatt_indicate+0x12c>)
   18040:	f012 fb27 	bl	2a692 <assert_print>
   18044:	4845      	ldr	r0, [pc, #276]	; (1815c <bt_gatt_indicate+0x130>)
   18046:	f012 fb24 	bl	2a692 <assert_print>
   1804a:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1804e:	4841      	ldr	r0, [pc, #260]	; (18154 <bt_gatt_indicate+0x128>)
   18050:	f012 fb18 	bl	2a684 <assert_post_action>
   18054:	684b      	ldr	r3, [r1, #4]
   18056:	b973      	cbnz	r3, 18076 <bt_gatt_indicate+0x4a>
   18058:	680b      	ldr	r3, [r1, #0]
   1805a:	b963      	cbnz	r3, 18076 <bt_gatt_indicate+0x4a>
   1805c:	4940      	ldr	r1, [pc, #256]	; (18160 <bt_gatt_indicate+0x134>)
   1805e:	f640 330e 	movw	r3, #2830	; 0xb0e
   18062:	4a3c      	ldr	r2, [pc, #240]	; (18154 <bt_gatt_indicate+0x128>)
   18064:	483c      	ldr	r0, [pc, #240]	; (18158 <bt_gatt_indicate+0x12c>)
   18066:	f012 fb14 	bl	2a692 <assert_print>
   1806a:	483c      	ldr	r0, [pc, #240]	; (1815c <bt_gatt_indicate+0x130>)
   1806c:	f012 fb11 	bl	2a692 <assert_print>
   18070:	f640 310e 	movw	r1, #2830	; 0xb0e
   18074:	e7eb      	b.n	1804e <bt_gatt_indicate+0x22>
   18076:	483b      	ldr	r0, [pc, #236]	; (18164 <bt_gatt_indicate+0x138>)
   18078:	f015 f8a8 	bl	2d1cc <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1807c:	0742      	lsls	r2, r0, #29
   1807e:	d561      	bpl.n	18144 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18080:	b115      	cbz	r5, 18088 <bt_gatt_indicate+0x5c>
   18082:	7b6b      	ldrb	r3, [r5, #13]
   18084:	2b07      	cmp	r3, #7
   18086:	d160      	bne.n	1814a <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   18088:	6860      	ldr	r0, [r4, #4]
   1808a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1808c:	f7ff fc48 	bl	17920 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   18090:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18092:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   18096:	b33a      	cbz	r2, 180e8 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18098:	a905      	add	r1, sp, #20
   1809a:	9102      	str	r1, [sp, #8]
   1809c:	4932      	ldr	r1, [pc, #200]	; (18168 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   1809e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   180a0:	9101      	str	r1, [sp, #4]
   180a2:	2101      	movs	r1, #1
   180a4:	9100      	str	r1, [sp, #0]
   180a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   180aa:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   180ac:	f7ff fc80 	bl	179b0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   180b0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   180b2:	b91b      	cbnz	r3, 180bc <bt_gatt_indicate+0x90>
			return -ENOENT;
   180b4:	f06f 0001 	mvn.w	r0, #1
}
   180b8:	b00b      	add	sp, #44	; 0x2c
   180ba:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   180bc:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   180be:	9b05      	ldr	r3, [sp, #20]
   180c0:	a904      	add	r1, sp, #16
   180c2:	6818      	ldr	r0, [r3, #0]
   180c4:	2300      	movs	r3, #0
   180c6:	f88d 3010 	strb.w	r3, [sp, #16]
   180ca:	f642 0303 	movw	r3, #10243	; 0x2803
   180ce:	f8ad 3012 	strh.w	r3, [sp, #18]
   180d2:	f013 feca 	bl	2be6a <bt_uuid_cmp>
   180d6:	b970      	cbnz	r0, 180f6 <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   180d8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   180da:	68c3      	ldr	r3, [r0, #12]
   180dc:	799b      	ldrb	r3, [r3, #6]
   180de:	069b      	lsls	r3, r3, #26
   180e0:	d405      	bmi.n	180ee <bt_gatt_indicate+0xc2>
			return -EINVAL;
   180e2:	f06f 0015 	mvn.w	r0, #21
   180e6:	e7e7      	b.n	180b8 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   180e8:	2800      	cmp	r0, #0
   180ea:	d1e8      	bne.n	180be <bt_gatt_indicate+0x92>
   180ec:	e7e2      	b.n	180b4 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   180ee:	f015 f94a 	bl	2d386 <bt_gatt_attr_value_handle>
   180f2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   180f6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   180fa:	b13d      	cbz	r5, 1810c <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   180fc:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   180fe:	4601      	mov	r1, r0
   18100:	4622      	mov	r2, r4
   18102:	4628      	mov	r0, r5
		params->_ref = 1;
   18104:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   18106:	f7ff ff0d 	bl	17f24 <gatt_indicate>
   1810a:	e7d5      	b.n	180b8 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   1810c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   18110:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   18112:	2302      	movs	r3, #2
   18114:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18118:	f642 1302 	movw	r3, #10498	; 0x2902
   1811c:	f8ad 3012 	strh.w	r3, [sp, #18]
   18120:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   18122:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18124:	9302      	str	r3, [sp, #8]
   18126:	4b11      	ldr	r3, [pc, #68]	; (1816c <bt_gatt_indicate+0x140>)
   18128:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1812c:	9301      	str	r3, [sp, #4]
   1812e:	2301      	movs	r3, #1
   18130:	aa04      	add	r2, sp, #16
   18132:	9300      	str	r3, [sp, #0]
   18134:	462b      	mov	r3, r5
	data.ind_params = params;
   18136:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18138:	f88d 5010 	strb.w	r5, [sp, #16]
   1813c:	f7ff fc38 	bl	179b0 <bt_gatt_foreach_attr_type>
	return data.err;
   18140:	9807      	ldr	r0, [sp, #28]
   18142:	e7b9      	b.n	180b8 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   18144:	f06f 000a 	mvn.w	r0, #10
   18148:	e7b6      	b.n	180b8 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   1814a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1814e:	e7b3      	b.n	180b8 <bt_gatt_indicate+0x8c>
   18150:	00035df8 	.word	0x00035df8
   18154:	00035cc8 	.word	0x00035cc8
   18158:	00032629 	.word	0x00032629
   1815c:	00035dff 	.word	0x00035dff
   18160:	00035e15 	.word	0x00035e15
   18164:	200080cc 	.word	0x200080cc
   18168:	0002d0f1 	.word	0x0002d0f1
   1816c:	00018531 	.word	0x00018531

00018170 <sc_process>:
{
   18170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   18172:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   18176:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   18178:	f1a0 0720 	sub.w	r7, r0, #32
   1817c:	4628      	mov	r0, r5
   1817e:	f015 f825 	bl	2d1cc <atomic_get>
   18182:	0783      	lsls	r3, r0, #30
   18184:	f3c0 0640 	ubfx	r6, r0, #1, #1
   18188:	d50e      	bpl.n	181a8 <sc_process+0x38>
   1818a:	4919      	ldr	r1, [pc, #100]	; (181f0 <sc_process+0x80>)
   1818c:	f240 439a 	movw	r3, #1178	; 0x49a
   18190:	4a18      	ldr	r2, [pc, #96]	; (181f4 <sc_process+0x84>)
   18192:	4819      	ldr	r0, [pc, #100]	; (181f8 <sc_process+0x88>)
   18194:	f012 fa7d 	bl	2a692 <assert_print>
   18198:	4818      	ldr	r0, [pc, #96]	; (181fc <sc_process+0x8c>)
   1819a:	f012 fa7a 	bl	2a692 <assert_print>
   1819e:	f240 419a 	movw	r1, #1178	; 0x49a
   181a2:	4814      	ldr	r0, [pc, #80]	; (181f4 <sc_process+0x84>)
   181a4:	f012 fa6e 	bl	2a684 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   181a8:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   181ac:	f06f 0101 	mvn.w	r1, #1
   181b0:	4628      	mov	r0, r5
   181b2:	9301      	str	r3, [sp, #4]
   181b4:	f015 f818 	bl	2d1e8 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   181b8:	4b11      	ldr	r3, [pc, #68]	; (18200 <sc_process+0x90>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   181ba:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   181bc:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   181c0:	4b10      	ldr	r3, [pc, #64]	; (18204 <sc_process+0x94>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   181c2:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   181c4:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   181c8:	ab01      	add	r3, sp, #4
   181ca:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   181ce:	2304      	movs	r3, #4
	sc->start = 0U;
   181d0:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   181d4:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   181d8:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   181dc:	f7ff ff26 	bl	1802c <bt_gatt_indicate>
   181e0:	b918      	cbnz	r0, 181ea <sc_process+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   181e2:	2102      	movs	r1, #2
   181e4:	4628      	mov	r0, r5
   181e6:	f014 fff4 	bl	2d1d2 <atomic_or>
}
   181ea:	b003      	add	sp, #12
   181ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   181ee:	bf00      	nop
   181f0:	00035e32 	.word	0x00035e32
   181f4:	00035cc8 	.word	0x00035cc8
   181f8:	00032629 	.word	0x00032629
   181fc:	00035e63 	.word	0x00035e63
   18200:	00032040 	.word	0x00032040
   18204:	000177e5 	.word	0x000177e5

00018208 <update_ccc>:
{
   18208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1820c:	b089      	sub	sp, #36	; 0x24
   1820e:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   18210:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   18212:	4b3b      	ldr	r3, [pc, #236]	; (18300 <update_ccc+0xf8>)
   18214:	6882      	ldr	r2, [r0, #8]
{
   18216:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18218:	429a      	cmp	r2, r3
{
   1821a:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1821c:	d11f      	bne.n	1825e <update_ccc+0x56>
	ccc = attr->user_data;
   1821e:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   18220:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18222:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   18224:	b1db      	cbz	r3, 1825e <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18226:	4620      	mov	r0, r4
   18228:	7831      	ldrb	r1, [r6, #0]
   1822a:	f014 fa1a 	bl	2c662 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1822e:	b1b0      	cbz	r0, 1825e <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18230:	f44f 7295 	mov.w	r2, #298	; 0x12a
   18234:	4629      	mov	r1, r5
   18236:	4620      	mov	r0, r4
   18238:	f015 f8f7 	bl	2d42a <bt_gatt_check_perm>
		if (err) {
   1823c:	b330      	cbz	r0, 1828c <update_ccc+0x84>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1823e:	2803      	cmp	r0, #3
   18240:	d112      	bne.n	18268 <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   18242:	466c      	mov	r4, sp
   18244:	b088      	sub	sp, #32
   18246:	466a      	mov	r2, sp
   18248:	4b2e      	ldr	r3, [pc, #184]	; (18304 <update_ccc+0xfc>)
   1824a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1824e:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18252:	f842 0f10 	str.w	r0, [r2, #16]!
   18256:	482c      	ldr	r0, [pc, #176]	; (18308 <update_ccc+0x100>)
   18258:	f015 f865 	bl	2d326 <z_log_msg_static_create.constprop.0>
   1825c:	46a5      	mov	sp, r4
}
   1825e:	2001      	movs	r0, #1
   18260:	3724      	adds	r7, #36	; 0x24
   18262:	46bd      	mov	sp, r7
   18264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sec = BT_SECURITY_L2;
   18268:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1826a:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1826c:	bf0c      	ite	eq
   1826e:	f04f 0903 	moveq.w	r9, #3
   18272:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   18276:	f014 f9f2 	bl	2c65e <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1827a:	4581      	cmp	r9, r0
   1827c:	d906      	bls.n	1828c <update_ccc+0x84>
				if (data->sec < sec) {
   1827e:	f898 3004 	ldrb.w	r3, [r8, #4]
   18282:	454b      	cmp	r3, r9
   18284:	d2eb      	bcs.n	1825e <update_ccc+0x56>
					data->sec = sec;
   18286:	f888 9004 	strb.w	r9, [r8, #4]
   1828a:	e7e8      	b.n	1825e <update_ccc+0x56>
		gatt_ccc_changed(attr, ccc);
   1828c:	4631      	mov	r1, r6
   1828e:	4628      	mov	r0, r5
   18290:	f014 ff11 	bl	2d0b6 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   18294:	4b1d      	ldr	r3, [pc, #116]	; (1830c <update_ccc+0x104>)
   18296:	429e      	cmp	r6, r3
   18298:	d1e1      	bne.n	1825e <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1829a:	7a20      	ldrb	r0, [r4, #8]
   1829c:	f104 0190 	add.w	r1, r4, #144	; 0x90
   182a0:	f7fe fdca 	bl	16e38 <find_sc_cfg>
	if (!cfg) {
   182a4:	2800      	cmp	r0, #0
   182a6:	d0da      	beq.n	1825e <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   182a8:	8902      	ldrh	r2, [r0, #8]
   182aa:	8943      	ldrh	r3, [r0, #10]
   182ac:	ea52 0103 	orrs.w	r1, r2, r3
   182b0:	d0d5      	beq.n	1825e <update_ccc+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   182b2:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   182b4:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   182b6:	4620      	mov	r0, r4
   182b8:	f7fc fedc 	bl	15074 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   182bc:	2318      	movs	r3, #24
   182be:	4914      	ldr	r1, [pc, #80]	; (18310 <update_ccc+0x108>)
   182c0:	4a14      	ldr	r2, [pc, #80]	; (18314 <update_ccc+0x10c>)
   182c2:	fb03 1300 	mla	r3, r3, r0, r1
   182c6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   182c8:	4a13      	ldr	r2, [pc, #76]	; (18318 <update_ccc+0x110>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   182ca:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   182cc:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   182ce:	1d3a      	adds	r2, r7, #4
   182d0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   182d2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   182d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   182d8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   182dc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   182de:	4620      	mov	r0, r4
   182e0:	f7ff fea4 	bl	1802c <bt_gatt_indicate>
   182e4:	2800      	cmp	r0, #0
   182e6:	d0ba      	beq.n	1825e <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   182e8:	4b0c      	ldr	r3, [pc, #48]	; (1831c <update_ccc+0x114>)
   182ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   182ee:	61fb      	str	r3, [r7, #28]
   182f0:	2302      	movs	r3, #2
   182f2:	4805      	ldr	r0, [pc, #20]	; (18308 <update_ccc+0x100>)
   182f4:	61bb      	str	r3, [r7, #24]
   182f6:	f107 0218 	add.w	r2, r7, #24
   182fa:	f015 f814 	bl	2d326 <z_log_msg_static_create.constprop.0>
   182fe:	e7ae      	b.n	1825e <update_ccc+0x56>
   18300:	000176a5 	.word	0x000176a5
   18304:	00035e7e 	.word	0x00035e7e
   18308:	000314ac 	.word	0x000314ac
   1830c:	20008524 	.word	0x20008524
   18310:	200216e0 	.word	0x200216e0
   18314:	00032040 	.word	0x00032040
   18318:	0002d34b 	.word	0x0002d34b
   1831c:	00035e92 	.word	0x00035e92

00018320 <gatt_notify>:
{
   18320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18324:	4614      	mov	r4, r2
   18326:	4688      	mov	r8, r1
   18328:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1832a:	2294      	movs	r2, #148	; 0x94
   1832c:	6861      	ldr	r1, [r4, #4]
{
   1832e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18330:	f015 f87b 	bl	2d42a <bt_gatt_check_perm>
   18334:	b170      	cbz	r0, 18354 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   18336:	4b2b      	ldr	r3, [pc, #172]	; (183e4 <gatt_notify+0xc4>)
   18338:	482b      	ldr	r0, [pc, #172]	; (183e8 <gatt_notify+0xc8>)
   1833a:	9305      	str	r3, [sp, #20]
   1833c:	2302      	movs	r3, #2
   1833e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18342:	aa04      	add	r2, sp, #16
   18344:	9304      	str	r3, [sp, #16]
   18346:	f014 ffee 	bl	2d326 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1834a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1834e:	b007      	add	sp, #28
   18350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   18354:	2201      	movs	r2, #1
   18356:	4630      	mov	r0, r6
   18358:	6861      	ldr	r1, [r4, #4]
   1835a:	f7ff fd19 	bl	17d90 <bt_gatt_is_subscribed>
   1835e:	b960      	cbnz	r0, 1837a <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   18360:	4b22      	ldr	r3, [pc, #136]	; (183ec <gatt_notify+0xcc>)
   18362:	4821      	ldr	r0, [pc, #132]	; (183e8 <gatt_notify+0xc8>)
   18364:	9305      	str	r3, [sp, #20]
   18366:	2302      	movs	r3, #2
   18368:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1836c:	aa04      	add	r2, sp, #16
   1836e:	9304      	str	r3, [sp, #16]
   18370:	f014 ffd9 	bl	2d326 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   18374:	f06f 0015 	mvn.w	r0, #21
   18378:	e7e9      	b.n	1834e <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1837a:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1837c:	211b      	movs	r1, #27
   1837e:	4630      	mov	r0, r6
   18380:	3202      	adds	r2, #2
   18382:	f7fe f8c9 	bl	16518 <bt_att_create_pdu>
	if (!buf) {
   18386:	4605      	mov	r5, r0
   18388:	b960      	cbnz	r0, 183a4 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   1838a:	4b19      	ldr	r3, [pc, #100]	; (183f0 <gatt_notify+0xd0>)
   1838c:	4816      	ldr	r0, [pc, #88]	; (183e8 <gatt_notify+0xc8>)
   1838e:	9305      	str	r3, [sp, #20]
   18390:	2302      	movs	r3, #2
   18392:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18396:	aa04      	add	r2, sp, #16
   18398:	9304      	str	r3, [sp, #16]
   1839a:	f014 ffc4 	bl	2d326 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1839e:	f06f 000b 	mvn.w	r0, #11
   183a2:	e7d4      	b.n	1834e <gatt_notify+0x2e>
   183a4:	f100 090c 	add.w	r9, r0, #12
   183a8:	2102      	movs	r1, #2
   183aa:	4648      	mov	r0, r9
   183ac:	f003 f9fa 	bl	1b7a4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   183b0:	4607      	mov	r7, r0
   183b2:	f827 8b02 	strh.w	r8, [r7], #2
   183b6:	89a1      	ldrh	r1, [r4, #12]
   183b8:	4648      	mov	r0, r9
   183ba:	f003 f9f3 	bl	1b7a4 <net_buf_simple_add>
   183be:	89a2      	ldrh	r2, [r4, #12]
   183c0:	68a1      	ldr	r1, [r4, #8]
   183c2:	4638      	mov	r0, r7
   183c4:	f018 f8bf 	bl	30546 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   183c8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   183cc:	4628      	mov	r0, r5
   183ce:	2301      	movs	r3, #1
   183d0:	f014 fe67 	bl	2d0a2 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   183d4:	4629      	mov	r1, r5
   183d6:	4630      	mov	r0, r6
}
   183d8:	b007      	add	sp, #28
   183da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   183de:	f7fe bc69 	b.w	16cb4 <bt_att_send>
   183e2:	bf00      	nop
   183e4:	00035d90 	.word	0x00035d90
   183e8:	000314ac 	.word	0x000314ac
   183ec:	00035da6 	.word	0x00035da6
   183f0:	00035eaf 	.word	0x00035eaf

000183f4 <bt_gatt_notify_cb>:
{
   183f4:	b530      	push	{r4, r5, lr}
   183f6:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   183f8:	460c      	mov	r4, r1
{
   183fa:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   183fc:	b971      	cbnz	r1, 1841c <bt_gatt_notify_cb+0x28>
   183fe:	4944      	ldr	r1, [pc, #272]	; (18510 <bt_gatt_notify_cb+0x11c>)
   18400:	f640 232d 	movw	r3, #2605	; 0xa2d
   18404:	4a43      	ldr	r2, [pc, #268]	; (18514 <bt_gatt_notify_cb+0x120>)
   18406:	4844      	ldr	r0, [pc, #272]	; (18518 <bt_gatt_notify_cb+0x124>)
   18408:	f012 f943 	bl	2a692 <assert_print>
   1840c:	4843      	ldr	r0, [pc, #268]	; (1851c <bt_gatt_notify_cb+0x128>)
   1840e:	f012 f940 	bl	2a692 <assert_print>
   18412:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   18416:	483f      	ldr	r0, [pc, #252]	; (18514 <bt_gatt_notify_cb+0x120>)
   18418:	f012 f934 	bl	2a684 <assert_post_action>
   1841c:	684b      	ldr	r3, [r1, #4]
   1841e:	b973      	cbnz	r3, 1843e <bt_gatt_notify_cb+0x4a>
   18420:	680b      	ldr	r3, [r1, #0]
   18422:	b963      	cbnz	r3, 1843e <bt_gatt_notify_cb+0x4a>
   18424:	493e      	ldr	r1, [pc, #248]	; (18520 <bt_gatt_notify_cb+0x12c>)
   18426:	f640 232e 	movw	r3, #2606	; 0xa2e
   1842a:	4a3a      	ldr	r2, [pc, #232]	; (18514 <bt_gatt_notify_cb+0x120>)
   1842c:	483a      	ldr	r0, [pc, #232]	; (18518 <bt_gatt_notify_cb+0x124>)
   1842e:	f012 f930 	bl	2a692 <assert_print>
   18432:	483a      	ldr	r0, [pc, #232]	; (1851c <bt_gatt_notify_cb+0x128>)
   18434:	f012 f92d 	bl	2a692 <assert_print>
   18438:	f640 212e 	movw	r1, #2606	; 0xa2e
   1843c:	e7eb      	b.n	18416 <bt_gatt_notify_cb+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1843e:	4839      	ldr	r0, [pc, #228]	; (18524 <bt_gatt_notify_cb+0x130>)
   18440:	f014 fec4 	bl	2d1cc <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18444:	0742      	lsls	r2, r0, #29
   18446:	d55d      	bpl.n	18504 <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18448:	b115      	cbz	r5, 18450 <bt_gatt_notify_cb+0x5c>
   1844a:	7b6b      	ldrb	r3, [r5, #13]
   1844c:	2b07      	cmp	r3, #7
   1844e:	d15c      	bne.n	1850a <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   18450:	6860      	ldr	r0, [r4, #4]
   18452:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18454:	f7ff fa64 	bl	17920 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   18458:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1845a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1845e:	b33a      	cbz	r2, 184b0 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18460:	a905      	add	r1, sp, #20
   18462:	9102      	str	r1, [sp, #8]
   18464:	4930      	ldr	r1, [pc, #192]	; (18528 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   18466:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18468:	9101      	str	r1, [sp, #4]
   1846a:	2101      	movs	r1, #1
   1846c:	9100      	str	r1, [sp, #0]
   1846e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   18472:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18474:	f7ff fa9c 	bl	179b0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   18478:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1847a:	b91b      	cbnz	r3, 18484 <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   1847c:	f06f 0001 	mvn.w	r0, #1
}
   18480:	b00b      	add	sp, #44	; 0x2c
   18482:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   18484:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   18486:	9b05      	ldr	r3, [sp, #20]
   18488:	a904      	add	r1, sp, #16
   1848a:	6818      	ldr	r0, [r3, #0]
   1848c:	2300      	movs	r3, #0
   1848e:	f88d 3010 	strb.w	r3, [sp, #16]
   18492:	f642 0303 	movw	r3, #10243	; 0x2803
   18496:	f8ad 3012 	strh.w	r3, [sp, #18]
   1849a:	f013 fce6 	bl	2be6a <bt_uuid_cmp>
   1849e:	b970      	cbnz	r0, 184be <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   184a0:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   184a2:	68c3      	ldr	r3, [r0, #12]
   184a4:	799b      	ldrb	r3, [r3, #6]
   184a6:	06db      	lsls	r3, r3, #27
   184a8:	d405      	bmi.n	184b6 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   184aa:	f06f 0015 	mvn.w	r0, #21
   184ae:	e7e7      	b.n	18480 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   184b0:	2800      	cmp	r0, #0
   184b2:	d1e8      	bne.n	18486 <bt_gatt_notify_cb+0x92>
   184b4:	e7e2      	b.n	1847c <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   184b6:	f014 ff66 	bl	2d386 <bt_gatt_attr_value_handle>
   184ba:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   184be:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   184c2:	b12d      	cbz	r5, 184d0 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   184c4:	4601      	mov	r1, r0
   184c6:	4622      	mov	r2, r4
   184c8:	4628      	mov	r0, r5
   184ca:	f7ff ff29 	bl	18320 <gatt_notify>
   184ce:	e7d7      	b.n	18480 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   184d0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   184d4:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   184d8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   184da:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   184dc:	f8ad 2012 	strh.w	r2, [sp, #18]
   184e0:	aa05      	add	r2, sp, #20
   184e2:	9202      	str	r2, [sp, #8]
   184e4:	4a11      	ldr	r2, [pc, #68]	; (1852c <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   184e6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   184ea:	e9cd 3200 	strd	r3, r2, [sp]
   184ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   184f2:	462b      	mov	r3, r5
   184f4:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   184f6:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   184f8:	f88d 5010 	strb.w	r5, [sp, #16]
   184fc:	f7ff fa58 	bl	179b0 <bt_gatt_foreach_attr_type>
	return data.err;
   18500:	9807      	ldr	r0, [sp, #28]
   18502:	e7bd      	b.n	18480 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   18504:	f06f 000a 	mvn.w	r0, #10
   18508:	e7ba      	b.n	18480 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   1850a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1850e:	e7b7      	b.n	18480 <bt_gatt_notify_cb+0x8c>
   18510:	00035df8 	.word	0x00035df8
   18514:	00035cc8 	.word	0x00035cc8
   18518:	00032629 	.word	0x00032629
   1851c:	00035dff 	.word	0x00035dff
   18520:	00035e15 	.word	0x00035e15
   18524:	200080cc 	.word	0x200080cc
   18528:	0002d0f1 	.word	0x0002d0f1
   1852c:	00018531 	.word	0x00018531

00018530 <notify_cb>:
{
   18530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18534:	4b43      	ldr	r3, [pc, #268]	; (18644 <notify_cb+0x114>)
{
   18536:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18538:	6882      	ldr	r2, [r0, #8]
{
   1853a:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1853c:	429a      	cmp	r2, r3
{
   1853e:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   18540:	d004      	beq.n	1854c <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   18542:	2701      	movs	r7, #1
}
   18544:	4638      	mov	r0, r7
   18546:	b007      	add	sp, #28
   18548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   1854c:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1854e:	4b3e      	ldr	r3, [pc, #248]	; (18648 <notify_cb+0x118>)
   18550:	429e      	cmp	r6, r3
   18552:	d010      	beq.n	18576 <notify_cb+0x46>
		if (cfg->value != data->type) {
   18554:	8932      	ldrh	r2, [r6, #8]
   18556:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18558:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   1855a:	429a      	cmp	r2, r3
   1855c:	d1f1      	bne.n	18542 <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1855e:	7830      	ldrb	r0, [r6, #0]
   18560:	f7fc ff38 	bl	153d4 <bt_conn_lookup_addr_le>
		if (!conn) {
   18564:	4604      	mov	r4, r0
   18566:	2800      	cmp	r0, #0
   18568:	d0eb      	beq.n	18542 <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   1856a:	7b43      	ldrb	r3, [r0, #13]
   1856c:	2b07      	cmp	r3, #7
   1856e:	d026      	beq.n	185be <notify_cb+0x8e>
			bt_conn_unref(conn);
   18570:	f7fc fc54 	bl	14e1c <bt_conn_unref>
			continue;
   18574:	e7e5      	b.n	18542 <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18576:	f04f 0800 	mov.w	r8, #0
   1857a:	4c34      	ldr	r4, [pc, #208]	; (1864c <notify_cb+0x11c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1857c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 18650 <notify_cb+0x120>
   18580:	4649      	mov	r1, r9
   18582:	4620      	mov	r0, r4
   18584:	f014 fe0d 	bl	2d1a2 <bt_addr_le_eq>
   18588:	b978      	cbnz	r0, 185aa <notify_cb+0x7a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1858a:	2207      	movs	r2, #7
   1858c:	4621      	mov	r1, r4
   1858e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   18592:	f7fc ff69 	bl	15468 <bt_conn_lookup_state_le>
			if (!conn) {
   18596:	b978      	cbnz	r0, 185b8 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   18598:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1859a:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1859c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1859e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   185a2:	8853      	ldrh	r3, [r2, #2]
   185a4:	8812      	ldrh	r2, [r2, #0]
   185a6:	f7fe fe6f 	bl	17288 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   185aa:	340c      	adds	r4, #12
   185ac:	f1b8 0f00 	cmp.w	r8, #0
   185b0:	d1d0      	bne.n	18554 <notify_cb+0x24>
   185b2:	f04f 0801 	mov.w	r8, #1
   185b6:	e7e3      	b.n	18580 <notify_cb+0x50>
			bt_conn_unref(conn);
   185b8:	f7fc fc30 	bl	14e1c <bt_conn_unref>
   185bc:	e7f5      	b.n	185aa <notify_cb+0x7a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   185be:	6973      	ldr	r3, [r6, #20]
   185c0:	b123      	cbz	r3, 185cc <notify_cb+0x9c>
   185c2:	4639      	mov	r1, r7
   185c4:	4798      	blx	r3
   185c6:	b908      	cbnz	r0, 185cc <notify_cb+0x9c>
			bt_conn_unref(conn);
   185c8:	4620      	mov	r0, r4
   185ca:	e7d1      	b.n	18570 <notify_cb+0x40>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   185cc:	4639      	mov	r1, r7
   185ce:	2294      	movs	r2, #148	; 0x94
   185d0:	4620      	mov	r0, r4
   185d2:	f014 ff2a 	bl	2d42a <bt_gatt_check_perm>
   185d6:	4607      	mov	r7, r0
   185d8:	b150      	cbz	r0, 185f0 <notify_cb+0xc0>
			LOG_WRN("Link is not encrypted");
   185da:	4b1e      	ldr	r3, [pc, #120]	; (18654 <notify_cb+0x124>)
   185dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   185e0:	9305      	str	r3, [sp, #20]
   185e2:	2302      	movs	r3, #2
   185e4:	481c      	ldr	r0, [pc, #112]	; (18658 <notify_cb+0x128>)
   185e6:	aa04      	add	r2, sp, #16
   185e8:	9304      	str	r3, [sp, #16]
   185ea:	f014 fe9c 	bl	2d326 <z_log_msg_static_create.constprop.0>
   185ee:	e7eb      	b.n	185c8 <notify_cb+0x98>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   185f0:	89ab      	ldrh	r3, [r5, #12]
   185f2:	2b02      	cmp	r3, #2
   185f4:	d114      	bne.n	18620 <notify_cb+0xf0>
   185f6:	8933      	ldrh	r3, [r6, #8]
   185f8:	079a      	lsls	r2, r3, #30
   185fa:	d405      	bmi.n	18608 <notify_cb+0xd8>
		bt_conn_unref(conn);
   185fc:	4620      	mov	r0, r4
   185fe:	f7fc fc0d 	bl	14e1c <bt_conn_unref>
		data->err = 0;
   18602:	2300      	movs	r3, #0
   18604:	60ab      	str	r3, [r5, #8]
   18606:	e79c      	b.n	18542 <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   18608:	4620      	mov	r0, r4
   1860a:	692a      	ldr	r2, [r5, #16]
   1860c:	88a9      	ldrh	r1, [r5, #4]
   1860e:	f7ff fc89 	bl	17f24 <gatt_indicate>
			if (err == 0) {
   18612:	4606      	mov	r6, r0
   18614:	b978      	cbnz	r0, 18636 <notify_cb+0x106>
				data->ind_params->_ref++;
   18616:	692a      	ldr	r2, [r5, #16]
   18618:	7d93      	ldrb	r3, [r2, #22]
   1861a:	3301      	adds	r3, #1
   1861c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1861e:	e7ed      	b.n	185fc <notify_cb+0xcc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   18620:	2b01      	cmp	r3, #1
   18622:	d1eb      	bne.n	185fc <notify_cb+0xcc>
   18624:	8933      	ldrh	r3, [r6, #8]
   18626:	07db      	lsls	r3, r3, #31
   18628:	d5e8      	bpl.n	185fc <notify_cb+0xcc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1862a:	4620      	mov	r0, r4
   1862c:	692a      	ldr	r2, [r5, #16]
   1862e:	88a9      	ldrh	r1, [r5, #4]
   18630:	f7ff fe76 	bl	18320 <gatt_notify>
   18634:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   18636:	4620      	mov	r0, r4
   18638:	f7fc fbf0 	bl	14e1c <bt_conn_unref>
		if (err < 0) {
   1863c:	2e00      	cmp	r6, #0
   1863e:	db81      	blt.n	18544 <notify_cb+0x14>
   18640:	e7df      	b.n	18602 <notify_cb+0xd2>
   18642:	bf00      	nop
   18644:	000176a5 	.word	0x000176a5
   18648:	20008524 	.word	0x20008524
   1864c:	20021b15 	.word	0x20021b15
   18650:	00034568 	.word	0x00034568
   18654:	00035d90 	.word	0x00035d90
   18658:	000314ac 	.word	0x000314ac

0001865c <bt_gatt_connected>:
{
   1865c:	b5b0      	push	{r4, r5, r7, lr}
   1865e:	b08e      	sub	sp, #56	; 0x38
	data.sec = BT_SECURITY_L1;
   18660:	2301      	movs	r3, #1
{
   18662:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18664:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   18668:	4604      	mov	r4, r0
	data.conn = conn;
   1866a:	6078      	str	r0, [r7, #4]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1866c:	4629      	mov	r1, r5
   1866e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   18670:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18672:	f013 fd56 	bl	2c122 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   18676:	b198      	cbz	r0, 186a0 <bt_gatt_connected+0x44>
		if (conn->id) {
   18678:	7a22      	ldrb	r2, [r4, #8]
   1867a:	b3a2      	cbz	r2, 186e6 <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1867c:	2104      	movs	r1, #4
   1867e:	4638      	mov	r0, r7
   18680:	f011 fdb7 	bl	2a1f2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18684:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   18686:	2124      	movs	r1, #36	; 0x24
   18688:	4a18      	ldr	r2, [pc, #96]	; (186ec <bt_gatt_connected+0x90>)
   1868a:	f107 000c 	add.w	r0, r7, #12
   1868e:	462b      	mov	r3, r5
   18690:	f7f9 face 	bl	11c30 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   18694:	f107 020c 	add.w	r2, r7, #12
   18698:	4610      	mov	r0, r2
   1869a:	4915      	ldr	r1, [pc, #84]	; (186f0 <bt_gatt_connected+0x94>)
   1869c:	f7f7 fbde 	bl	fe5c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   186a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   186a4:	2001      	movs	r0, #1
   186a6:	4a13      	ldr	r2, [pc, #76]	; (186f4 <bt_gatt_connected+0x98>)
   186a8:	1d3b      	adds	r3, r7, #4
   186aa:	f014 feb3 	bl	2d414 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   186ae:	4620      	mov	r0, r4
   186b0:	f013 ffd5 	bl	2c65e <bt_conn_get_security>
   186b4:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   186b6:	4288      	cmp	r0, r1
   186b8:	d212      	bcs.n	186e0 <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   186ba:	4620      	mov	r0, r4
   186bc:	f013 ffa3 	bl	2c606 <bt_conn_set_security>
		if (err) {
   186c0:	b170      	cbz	r0, 186e0 <bt_gatt_connected+0x84>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   186c2:	466c      	mov	r4, sp
   186c4:	b088      	sub	sp, #32
   186c6:	aa02      	add	r2, sp, #8
   186c8:	4b0b      	ldr	r3, [pc, #44]	; (186f8 <bt_gatt_connected+0x9c>)
   186ca:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   186ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
   186d2:	2303      	movs	r3, #3
   186d4:	4809      	ldr	r0, [pc, #36]	; (186fc <bt_gatt_connected+0xa0>)
   186d6:	f842 3f10 	str.w	r3, [r2, #16]!
   186da:	f014 fe24 	bl	2d326 <z_log_msg_static_create.constprop.0>
   186de:	46a5      	mov	sp, r4
}
   186e0:	3730      	adds	r7, #48	; 0x30
   186e2:	46bd      	mov	sp, r7
   186e4:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   186e6:	9200      	str	r2, [sp, #0]
   186e8:	e7cd      	b.n	18686 <bt_gatt_connected+0x2a>
   186ea:	bf00      	nop
   186ec:	00035d5c 	.word	0x00035d5c
   186f0:	00017c41 	.word	0x00017c41
   186f4:	00018209 	.word	0x00018209
   186f8:	00035ed8 	.word	0x00035ed8
   186fc:	000314ac 	.word	0x000314ac

00018700 <bt_gatt_att_max_mtu_changed>:
{
   18700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18702:	4605      	mov	r5, r0
   18704:	460e      	mov	r6, r1
   18706:	4617      	mov	r7, r2
	return list->head;
   18708:	4b06      	ldr	r3, [pc, #24]	; (18724 <bt_gatt_att_max_mtu_changed+0x24>)
   1870a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1870c:	b14c      	cbz	r4, 18722 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1870e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18712:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   18714:	b11b      	cbz	r3, 1871e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   18716:	463a      	mov	r2, r7
   18718:	4631      	mov	r1, r6
   1871a:	4628      	mov	r0, r5
   1871c:	4798      	blx	r3
	return node->next;
   1871e:	6864      	ldr	r4, [r4, #4]
   18720:	e7f4      	b.n	1870c <bt_gatt_att_max_mtu_changed+0xc>
}
   18722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18724:	20021720 	.word	0x20021720

00018728 <bt_gatt_encrypt_change>:
{
   18728:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   1872a:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1872c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1872e:	466b      	mov	r3, sp
   18730:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18734:	4a03      	ldr	r2, [pc, #12]	; (18744 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   18736:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1873a:	f014 fe6b 	bl	2d414 <bt_gatt_foreach_attr>
}
   1873e:	b003      	add	sp, #12
   18740:	f85d fb04 	ldr.w	pc, [sp], #4
   18744:	00018209 	.word	0x00018209

00018748 <bt_gatt_store_ccc>:
	save.count = 0;
   18748:	2300      	movs	r3, #0
{
   1874a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1874c:	4604      	mov	r4, r0
   1874e:	b0c1      	sub	sp, #260	; 0x104
   18750:	af02      	add	r7, sp, #8
   18752:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   18754:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   18756:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1875a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1875e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18762:	2001      	movs	r0, #1
   18764:	4a1b      	ldr	r2, [pc, #108]	; (187d4 <bt_gatt_store_ccc+0x8c>)
   18766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1876a:	f014 fe53 	bl	2d414 <bt_gatt_foreach_attr>
	if (id) {
   1876e:	b364      	cbz	r4, 187ca <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   18770:	1d3e      	adds	r6, r7, #4
   18772:	4622      	mov	r2, r4
   18774:	2104      	movs	r1, #4
   18776:	4630      	mov	r0, r6
   18778:	f011 fd3b 	bl	2a1f2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1877c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1877e:	4a16      	ldr	r2, [pc, #88]	; (187d8 <bt_gatt_store_ccc+0x90>)
   18780:	462b      	mov	r3, r5
   18782:	2124      	movs	r1, #36	; 0x24
   18784:	f107 0008 	add.w	r0, r7, #8
   18788:	f7f9 fa52 	bl	11c30 <bt_settings_encode_key>
	if (save.count) {
   1878c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   18790:	b1ea      	cbz	r2, 187ce <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   18792:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   18794:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   18798:	f107 0008 	add.w	r0, r7, #8
   1879c:	f7f7 fafe 	bl	fd9c <settings_save_one>
	if (err) {
   187a0:	4604      	mov	r4, r0
   187a2:	b170      	cbz	r0, 187c2 <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   187a4:	466d      	mov	r5, sp
   187a6:	b088      	sub	sp, #32
   187a8:	aa02      	add	r2, sp, #8
   187aa:	4b0c      	ldr	r3, [pc, #48]	; (187dc <bt_gatt_store_ccc+0x94>)
   187ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   187b0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   187b4:	2303      	movs	r3, #3
   187b6:	480a      	ldr	r0, [pc, #40]	; (187e0 <bt_gatt_store_ccc+0x98>)
   187b8:	f842 3f10 	str.w	r3, [r2, #16]!
   187bc:	f014 fdb3 	bl	2d326 <z_log_msg_static_create.constprop.0>
   187c0:	46ad      	mov	sp, r5
}
   187c2:	4620      	mov	r0, r4
   187c4:	37fc      	adds	r7, #252	; 0xfc
   187c6:	46bd      	mov	sp, r7
   187c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   187ca:	9400      	str	r4, [sp, #0]
   187cc:	e7d7      	b.n	1877e <bt_gatt_store_ccc+0x36>
		str = NULL;
   187ce:	4611      	mov	r1, r2
   187d0:	e7e2      	b.n	18798 <bt_gatt_store_ccc+0x50>
   187d2:	bf00      	nop
   187d4:	000175cd 	.word	0x000175cd
   187d8:	00035d5c 	.word	0x00035d5c
   187dc:	00035f04 	.word	0x00035f04
   187e0:	000314ac 	.word	0x000314ac

000187e4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   187e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187e8:	4604      	mov	r4, r0
   187ea:	b08c      	sub	sp, #48	; 0x30
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   187ec:	4603      	mov	r3, r0
   187ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   187f2:	2001      	movs	r0, #1
   187f4:	4a3d      	ldr	r2, [pc, #244]	; (188ec <bt_gatt_disconnected+0x108>)
{
   187f6:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   187f8:	f014 fe0c 	bl	2d414 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   187fc:	4620      	mov	r0, r4
   187fe:	f7fc fc39 	bl	15074 <bt_conn_index>
	if (gatt_ccc_store.conn_list[index] != NULL) {
   18802:	4e3b      	ldr	r6, [pc, #236]	; (188f0 <bt_gatt_disconnected+0x10c>)
	uint8_t index = bt_conn_index(conn);
   18804:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   18806:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1880a:	b120      	cbz	r0, 18816 <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1880c:	f7fc fb06 	bl	14e1c <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   18810:	2300      	movs	r3, #0
   18812:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   18816:	4837      	ldr	r0, [pc, #220]	; (188f4 <bt_gatt_disconnected+0x110>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18818:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1881c:	f00d fc66 	bl	260ec <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18820:	4629      	mov	r1, r5
   18822:	7a20      	ldrb	r0, [r4, #8]
   18824:	f013 fc7d 	bl	2c122 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18828:	2800      	cmp	r0, #0
   1882a:	d038      	beq.n	1889e <bt_gatt_disconnected+0xba>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1882c:	4629      	mov	r1, r5
   1882e:	7a20      	ldrb	r0, [r4, #8]
   18830:	f7ff ff8a 	bl	18748 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   18834:	4620      	mov	r0, r4
   18836:	f7fe fad1 	bl	16ddc <find_cf_cfg>
	if (!cfg) {
   1883a:	4606      	mov	r6, r0
   1883c:	2800      	cmp	r0, #0
   1883e:	d04e      	beq.n	188de <bt_gatt_disconnected+0xfa>
		if (conn->id) {
   18840:	7a22      	ldrb	r2, [r4, #8]
		len = 0;
   18842:	f04f 0801 	mov.w	r8, #1
		str = (char *)cfg->data;
   18846:	3608      	adds	r6, #8
		if (conn->id) {
   18848:	b162      	cbz	r2, 18864 <bt_gatt_disconnected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1884a:	2104      	movs	r1, #4
   1884c:	4638      	mov	r0, r7
   1884e:	f011 fcd0 	bl	2a1f2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   18852:	462b      	mov	r3, r5
   18854:	2124      	movs	r1, #36	; 0x24
   18856:	4a28      	ldr	r2, [pc, #160]	; (188f8 <bt_gatt_disconnected+0x114>)
   18858:	9700      	str	r7, [sp, #0]
   1885a:	1d38      	adds	r0, r7, #4
   1885c:	f7f9 f9e8 	bl	11c30 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   18860:	7a23      	ldrb	r3, [r4, #8]
   18862:	b93b      	cbnz	r3, 18874 <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   18864:	2300      	movs	r3, #0
   18866:	2124      	movs	r1, #36	; 0x24
   18868:	9300      	str	r3, [sp, #0]
   1886a:	4a23      	ldr	r2, [pc, #140]	; (188f8 <bt_gatt_disconnected+0x114>)
   1886c:	462b      	mov	r3, r5
   1886e:	1d38      	adds	r0, r7, #4
   18870:	f7f9 f9de 	bl	11c30 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   18874:	4642      	mov	r2, r8
   18876:	4631      	mov	r1, r6
   18878:	1d38      	adds	r0, r7, #4
   1887a:	f7f7 fa8f 	bl	fd9c <settings_save_one>
	if (err) {
   1887e:	b170      	cbz	r0, 1889e <bt_gatt_disconnected+0xba>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   18880:	466e      	mov	r6, sp
   18882:	b088      	sub	sp, #32
   18884:	aa02      	add	r2, sp, #8
   18886:	4b1d      	ldr	r3, [pc, #116]	; (188fc <bt_gatt_disconnected+0x118>)
   18888:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1888c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18890:	2303      	movs	r3, #3
   18892:	481b      	ldr	r0, [pc, #108]	; (18900 <bt_gatt_disconnected+0x11c>)
   18894:	f842 3f10 	str.w	r3, [r2, #16]!
   18898:	f014 fd45 	bl	2d326 <z_log_msg_static_create.constprop.0>
   1889c:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1889e:	4629      	mov	r1, r5
   188a0:	7a20      	ldrb	r0, [r4, #8]
   188a2:	f013 fc3e 	bl	2c122 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   188a6:	b148      	cbz	r0, 188bc <bt_gatt_disconnected+0xd8>
		struct addr_with_id addr_with_id = {
   188a8:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   188ae:	723b      	strb	r3, [r7, #8]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188b0:	2001      	movs	r0, #1
   188b2:	4a14      	ldr	r2, [pc, #80]	; (18904 <bt_gatt_disconnected+0x120>)
		struct addr_with_id addr_with_id = {
   188b4:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188b6:	1d3b      	adds	r3, r7, #4
   188b8:	f014 fdac 	bl	2d414 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   188bc:	4620      	mov	r0, r4
   188be:	f7fe fa8d 	bl	16ddc <find_cf_cfg>
	if (!cfg) {
   188c2:	4606      	mov	r6, r0
   188c4:	b138      	cbz	r0, 188d6 <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   188c6:	4629      	mov	r1, r5
   188c8:	7a20      	ldrb	r0, [r4, #8]
   188ca:	f013 fc2a 	bl	2c122 <bt_addr_le_is_bonded>
   188ce:	b940      	cbnz	r0, 188e2 <bt_gatt_disconnected+0xfe>
		clear_cf_cfg(cfg);
   188d0:	4630      	mov	r0, r6
   188d2:	f7fe fdb7 	bl	17444 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   188d6:	3728      	adds	r7, #40	; 0x28
   188d8:	46bd      	mov	sp, r7
   188da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   188de:	4680      	mov	r8, r0
   188e0:	e7c0      	b.n	18864 <bt_gatt_disconnected+0x80>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   188e2:	4629      	mov	r1, r5
   188e4:	1c70      	adds	r0, r6, #1
   188e6:	f014 fc8a 	bl	2d1fe <bt_addr_le_copy>
}
   188ea:	e7f4      	b.n	188d6 <bt_gatt_disconnected+0xf2>
   188ec:	00017605 	.word	0x00017605
   188f0:	20009e70 	.word	0x20009e70
   188f4:	20009e78 	.word	0x20009e78
   188f8:	00035f4e 	.word	0x00035f4e
   188fc:	00035f22 	.word	0x00035f22
   18900:	000314ac 	.word	0x000314ac
   18904:	000175a5 	.word	0x000175a5

00018908 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   18908:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1890a:	4b05      	ldr	r3, [pc, #20]	; (18920 <smp_find+0x18>)
{
   1890c:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1890e:	4618      	mov	r0, r3
   18910:	f014 fe0c 	bl	2d52c <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   18914:	3b04      	subs	r3, #4
   18916:	2800      	cmp	r0, #0
}
   18918:	bf14      	ite	ne
   1891a:	4618      	movne	r0, r3
   1891c:	2000      	moveq	r0, #0
   1891e:	bd08      	pop	{r3, pc}
   18920:	20009f7c 	.word	0x20009f7c

00018924 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   18924:	4b08      	ldr	r3, [pc, #32]	; (18948 <latch_auth_cb+0x24>)
   18926:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1892a:	681a      	ldr	r2, [r3, #0]
   1892c:	4b07      	ldr	r3, [pc, #28]	; (1894c <latch_auth_cb+0x28>)
   1892e:	e8d0 1fef 	ldaex	r1, [r0]
   18932:	4299      	cmp	r1, r3
   18934:	d104      	bne.n	18940 <latch_auth_cb+0x1c>
   18936:	e8c0 2fec 	stlex	ip, r2, [r0]
   1893a:	f1bc 0f00 	cmp.w	ip, #0
   1893e:	d1f6      	bne.n	1892e <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18940:	e8d0 0faf 	lda	r0, [r0]
}
   18944:	4770      	bx	lr
   18946:	bf00      	nop
   18948:	20021600 	.word	0x20021600
   1894c:	20009f78 	.word	0x20009f78

00018950 <get_io_capa>:
{
   18950:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18952:	f7ff ffe7 	bl	18924 <latch_auth_cb>
	if (!smp_auth_cb) {
   18956:	4603      	mov	r3, r0
   18958:	b1c8      	cbz	r0, 1898e <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1895a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1895e:	b921      	cbnz	r1, 1896a <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   18960:	2a00      	cmp	r2, #0
   18962:	bf0c      	ite	eq
   18964:	2003      	moveq	r0, #3
   18966:	2002      	movne	r0, #2
   18968:	e010      	b.n	1898c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1896a:	b132      	cbz	r2, 1897a <get_io_capa+0x2a>
   1896c:	6883      	ldr	r3, [r0, #8]
   1896e:	b913      	cbnz	r3, 18976 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   18970:	4b09      	ldr	r3, [pc, #36]	; (18998 <get_io_capa+0x48>)
   18972:	781b      	ldrb	r3, [r3, #0]
   18974:	b933      	cbnz	r3, 18984 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   18976:	2004      	movs	r0, #4
   18978:	e008      	b.n	1898c <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1897a:	4907      	ldr	r1, [pc, #28]	; (18998 <get_io_capa+0x48>)
   1897c:	7808      	ldrb	r0, [r1, #0]
   1897e:	b128      	cbz	r0, 1898c <get_io_capa+0x3c>
   18980:	689b      	ldr	r3, [r3, #8]
   18982:	b933      	cbnz	r3, 18992 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   18984:	3a00      	subs	r2, #0
   18986:	bf18      	it	ne
   18988:	2201      	movne	r2, #1
   1898a:	0050      	lsls	r0, r2, #1
}
   1898c:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1898e:	2003      	movs	r0, #3
   18990:	e7fc      	b.n	1898c <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   18992:	2001      	movs	r0, #1
   18994:	e7fa      	b.n	1898c <get_io_capa+0x3c>
   18996:	bf00      	nop
   18998:	200223f8 	.word	0x200223f8

0001899c <get_auth>:
{
   1899c:	b510      	push	{r4, lr}
	if (sc_supported) {
   1899e:	4b0c      	ldr	r3, [pc, #48]	; (189d0 <get_auth+0x34>)
   189a0:	781b      	ldrb	r3, [r3, #0]
   189a2:	b17b      	cbz	r3, 189c4 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   189a4:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   189a8:	f7ff ffd2 	bl	18950 <get_io_capa>
	if (bondable) {
   189ac:	4b09      	ldr	r3, [pc, #36]	; (189d4 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   189ae:	2803      	cmp	r0, #3
	if (bondable) {
   189b0:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   189b2:	bf0c      	ite	eq
   189b4:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   189b8:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   189bc:	b12b      	cbz	r3, 189ca <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   189be:	f044 0001 	orr.w	r0, r4, #1
}
   189c2:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   189c4:	f001 0407 	and.w	r4, r1, #7
   189c8:	e7ee      	b.n	189a8 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   189ca:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   189ce:	e7f8      	b.n	189c2 <get_auth+0x26>
   189d0:	200223f8 	.word	0x200223f8
   189d4:	200089f6 	.word	0x200089f6

000189d8 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   189d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   189da:	4b06      	ldr	r3, [pc, #24]	; (189f4 <bt_smp_pkey_ready.part.0+0x1c>)
   189dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   189e0:	9305      	str	r3, [sp, #20]
   189e2:	2302      	movs	r3, #2
   189e4:	4804      	ldr	r0, [pc, #16]	; (189f8 <bt_smp_pkey_ready.part.0+0x20>)
   189e6:	aa04      	add	r2, sp, #16
   189e8:	9304      	str	r3, [sp, #16]
   189ea:	f014 fdf7 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   189ee:	b007      	add	sp, #28
   189f0:	f85d fb04 	ldr.w	pc, [sp], #4
   189f4:	00035f5f 	.word	0x00035f5f
   189f8:	000314fc 	.word	0x000314fc

000189fc <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   189fc:	b580      	push	{r7, lr}
   189fe:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   18a00:	b088      	sub	sp, #32
   18a02:	466a      	mov	r2, sp
   18a04:	4b07      	ldr	r3, [pc, #28]	; (18a24 <bt_smp_accept.part.0+0x28>)
   18a06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18a0a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18a0e:	2303      	movs	r3, #3
   18a10:	4805      	ldr	r0, [pc, #20]	; (18a28 <bt_smp_accept.part.0+0x2c>)
   18a12:	f842 3f10 	str.w	r3, [r2, #16]!
   18a16:	f014 fde1 	bl	2d5dc <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   18a1a:	f06f 000b 	mvn.w	r0, #11
   18a1e:	46bd      	mov	sp, r7
   18a20:	bd80      	pop	{r7, pc}
   18a22:	bf00      	nop
   18a24:	00035f78 	.word	0x00035f78
   18a28:	000314fc 	.word	0x000314fc

00018a2c <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   18a2c:	4b05      	ldr	r3, [pc, #20]	; (18a44 <bt_smp_accept+0x18>)
   18a2e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   18a32:	b10a      	cbz	r2, 18a38 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18a34:	f7ff bfe2 	b.w	189fc <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   18a38:	4803      	ldr	r0, [pc, #12]	; (18a48 <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   18a3a:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   18a3c:	6058      	str	r0, [r3, #4]
}
   18a3e:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   18a40:	600b      	str	r3, [r1, #0]
}
   18a42:	4770      	bx	lr
   18a44:	20009f78 	.word	0x20009f78
   18a48:	00032144 	.word	0x00032144

00018a4c <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   18a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   18a4e:	4b07      	ldr	r3, [pc, #28]	; (18a6c <smp_chan_get.part.0+0x20>)
   18a50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18a54:	9305      	str	r3, [sp, #20]
   18a56:	2302      	movs	r3, #2
   18a58:	4805      	ldr	r0, [pc, #20]	; (18a70 <smp_chan_get.part.0+0x24>)
   18a5a:	aa04      	add	r2, sp, #16
   18a5c:	9304      	str	r3, [sp, #16]
   18a5e:	f014 fdbd 	bl	2d5dc <z_log_msg_static_create.constprop.0>
}
   18a62:	2000      	movs	r0, #0
   18a64:	b007      	add	sp, #28
   18a66:	f85d fb04 	ldr.w	pc, [sp], #4
   18a6a:	bf00      	nop
   18a6c:	00035f9d 	.word	0x00035f9d
   18a70:	000314fc 	.word	0x000314fc

00018a74 <smp_init>:
{
   18a74:	b538      	push	{r3, r4, r5, lr}
   18a76:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   18a78:	22ec      	movs	r2, #236	; 0xec
   18a7a:	2100      	movs	r1, #0
   18a7c:	f017 fd9d 	bl	305ba <memset>
	if (bt_rand(smp->prnd, 16)) {
   18a80:	2110      	movs	r1, #16
   18a82:	f105 0027 	add.w	r0, r5, #39	; 0x27
   18a86:	f7fb fd49 	bl	1451c <bt_rand>
   18a8a:	4604      	mov	r4, r0
   18a8c:	b948      	cbnz	r0, 18aa2 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   18a8e:	2105      	movs	r1, #5
   18a90:	4628      	mov	r0, r5
   18a92:	f014 fdb1 	bl	2d5f8 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18a96:	f7fb fdf5 	bl	14684 <bt_pub_key_get>
   18a9a:	4b03      	ldr	r3, [pc, #12]	; (18aa8 <smp_init+0x34>)
   18a9c:	6018      	str	r0, [r3, #0]
}
   18a9e:	4620      	mov	r0, r4
   18aa0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18aa2:	2408      	movs	r4, #8
   18aa4:	e7fb      	b.n	18a9e <smp_init+0x2a>
   18aa6:	bf00      	nop
   18aa8:	20021728 	.word	0x20021728

00018aac <smp_dhkey_generate>:
{
   18aac:	b530      	push	{r4, r5, lr}
   18aae:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18ab0:	1d05      	adds	r5, r0, #4
   18ab2:	2108      	movs	r1, #8
   18ab4:	4628      	mov	r0, r5
{
   18ab6:	b087      	sub	sp, #28
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18ab8:	f014 fd9e 	bl	2d5f8 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   18abc:	490b      	ldr	r1, [pc, #44]	; (18aec <smp_dhkey_generate+0x40>)
   18abe:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18ac2:	f7fb fded 	bl	146a0 <bt_dh_key_gen>
	if (err) {
   18ac6:	b170      	cbz	r0, 18ae6 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18ac8:	2108      	movs	r1, #8
   18aca:	4628      	mov	r0, r5
   18acc:	f014 fd55 	bl	2d57a <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   18ad0:	4b07      	ldr	r3, [pc, #28]	; (18af0 <smp_dhkey_generate+0x44>)
   18ad2:	4808      	ldr	r0, [pc, #32]	; (18af4 <smp_dhkey_generate+0x48>)
   18ad4:	9305      	str	r3, [sp, #20]
   18ad6:	2302      	movs	r3, #2
   18ad8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18adc:	aa04      	add	r2, sp, #16
   18ade:	9304      	str	r3, [sp, #16]
   18ae0:	f014 fd7c 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18ae4:	2008      	movs	r0, #8
}
   18ae6:	b007      	add	sp, #28
   18ae8:	bd30      	pop	{r4, r5, pc}
   18aea:	bf00      	nop
   18aec:	0002d9d1 	.word	0x0002d9d1
   18af0:	00035fb8 	.word	0x00035fb8
   18af4:	000314fc 	.word	0x000314fc

00018af8 <smp_ident_info>:
{
   18af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18afa:	4605      	mov	r5, r0
   18afc:	460b      	mov	r3, r1
   18afe:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18b00:	210d      	movs	r1, #13
   18b02:	3004      	adds	r0, #4
   18b04:	f014 fd12 	bl	2d52c <atomic_test_bit>
   18b08:	b368      	cbz	r0, 18b66 <smp_ident_info+0x6e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   18b0a:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18b0c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   18b10:	2002      	movs	r0, #2
   18b12:	f103 0690 	add.w	r6, r3, #144	; 0x90
   18b16:	4632      	mov	r2, r6
   18b18:	7a19      	ldrb	r1, [r3, #8]
   18b1a:	f001 fd5b 	bl	1a5d4 <bt_keys_get_type>
		if (!keys) {
   18b1e:	b9b8      	cbnz	r0, 18b50 <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18b20:	4630      	mov	r0, r6
   18b22:	f7f8 ffaf 	bl	11a84 <bt_addr_le_str>
   18b26:	466c      	mov	r4, sp
   18b28:	b088      	sub	sp, #32
   18b2a:	466a      	mov	r2, sp
   18b2c:	4b11      	ldr	r3, [pc, #68]	; (18b74 <smp_ident_info+0x7c>)
   18b2e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18b32:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18b36:	f44f 7300 	mov.w	r3, #512	; 0x200
   18b3a:	8393      	strh	r3, [r2, #28]
   18b3c:	4b0e      	ldr	r3, [pc, #56]	; (18b78 <smp_ident_info+0x80>)
   18b3e:	480f      	ldr	r0, [pc, #60]	; (18b7c <smp_ident_info+0x84>)
   18b40:	f842 3f10 	str.w	r3, [r2, #16]!
   18b44:	f014 fd4a 	bl	2d5dc <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18b48:	2008      	movs	r0, #8
   18b4a:	46a5      	mov	sp, r4
}
   18b4c:	46bd      	mov	sp, r7
   18b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18b50:	4622      	mov	r2, r4
   18b52:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   18b56:	f104 0110 	add.w	r1, r4, #16
   18b5a:	f852 0b04 	ldr.w	r0, [r2], #4
   18b5e:	428a      	cmp	r2, r1
   18b60:	f843 0b04 	str.w	r0, [r3], #4
   18b64:	d1f9      	bne.n	18b5a <smp_ident_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   18b66:	4628      	mov	r0, r5
   18b68:	2109      	movs	r1, #9
   18b6a:	f014 fd45 	bl	2d5f8 <atomic_set_bit>
	return 0;
   18b6e:	2000      	movs	r0, #0
   18b70:	e7ec      	b.n	18b4c <smp_ident_info+0x54>
   18b72:	bf00      	nop
   18b74:	00035fd1 	.word	0x00035fd1
   18b78:	01000003 	.word	0x01000003
   18b7c:	000314fc 	.word	0x000314fc

00018b80 <smp_encrypt_info>:
{
   18b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b82:	4605      	mov	r5, r0
   18b84:	460b      	mov	r3, r1
   18b86:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18b88:	210d      	movs	r1, #13
   18b8a:	3004      	adds	r0, #4
   18b8c:	f014 fcce 	bl	2d52c <atomic_test_bit>
   18b90:	b368      	cbz	r0, 18bee <smp_encrypt_info+0x6e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   18b92:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18b94:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   18b98:	2004      	movs	r0, #4
   18b9a:	f103 0690 	add.w	r6, r3, #144	; 0x90
   18b9e:	4632      	mov	r2, r6
   18ba0:	7a19      	ldrb	r1, [r3, #8]
   18ba2:	f001 fd17 	bl	1a5d4 <bt_keys_get_type>
		if (!keys) {
   18ba6:	b9b8      	cbnz	r0, 18bd8 <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18ba8:	4630      	mov	r0, r6
   18baa:	f7f8 ff6b 	bl	11a84 <bt_addr_le_str>
   18bae:	466c      	mov	r4, sp
   18bb0:	b088      	sub	sp, #32
   18bb2:	466a      	mov	r2, sp
   18bb4:	4b11      	ldr	r3, [pc, #68]	; (18bfc <smp_encrypt_info+0x7c>)
   18bb6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18bba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
   18bc2:	8393      	strh	r3, [r2, #28]
   18bc4:	4b0e      	ldr	r3, [pc, #56]	; (18c00 <smp_encrypt_info+0x80>)
   18bc6:	480f      	ldr	r0, [pc, #60]	; (18c04 <smp_encrypt_info+0x84>)
   18bc8:	f842 3f10 	str.w	r3, [r2, #16]!
   18bcc:	f014 fd06 	bl	2d5dc <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18bd0:	2008      	movs	r0, #8
   18bd2:	46a5      	mov	sp, r4
}
   18bd4:	46bd      	mov	sp, r7
   18bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18bd8:	4622      	mov	r2, r4
   18bda:	f100 031a 	add.w	r3, r0, #26
   18bde:	f104 0110 	add.w	r1, r4, #16
   18be2:	f852 0b04 	ldr.w	r0, [r2], #4
   18be6:	428a      	cmp	r2, r1
   18be8:	f843 0b04 	str.w	r0, [r3], #4
   18bec:	d1f9      	bne.n	18be2 <smp_encrypt_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   18bee:	4628      	mov	r0, r5
   18bf0:	2107      	movs	r1, #7
   18bf2:	f014 fd01 	bl	2d5f8 <atomic_set_bit>
	return 0;
   18bf6:	2000      	movs	r0, #0
   18bf8:	e7ec      	b.n	18bd4 <smp_encrypt_info+0x54>
   18bfa:	bf00      	nop
   18bfc:	00035fd1 	.word	0x00035fd1
   18c00:	01000003 	.word	0x01000003
   18c04:	000314fc 	.word	0x000314fc

00018c08 <smp_send_pairing_confirm>:
{
   18c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c0a:	b083      	sub	sp, #12
	switch (smp->method) {
   18c0c:	7a04      	ldrb	r4, [r0, #8]
{
   18c0e:	4605      	mov	r5, r0
	switch (smp->method) {
   18c10:	2c02      	cmp	r4, #2
{
   18c12:	af02      	add	r7, sp, #8
	switch (smp->method) {
   18c14:	d823      	bhi.n	18c5e <smp_send_pairing_confirm+0x56>
   18c16:	b144      	cbz	r4, 18c2a <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18c18:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   18c1c:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   18c20:	40dc      	lsrs	r4, r3
   18c22:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   18c26:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   18c2a:	2103      	movs	r1, #3
   18c2c:	4628      	mov	r0, r5
   18c2e:	f014 fcf3 	bl	2d618 <smp_create_pdu.constprop.0>
	if (!buf) {
   18c32:	4606      	mov	r6, r0
   18c34:	b320      	cbz	r0, 18c80 <smp_send_pairing_confirm+0x78>
   18c36:	2110      	movs	r1, #16
   18c38:	300c      	adds	r0, #12
   18c3a:	f002 fdb3 	bl	1b7a4 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18c3e:	9000      	str	r0, [sp, #0]
   18c40:	4818      	ldr	r0, [pc, #96]	; (18ca4 <smp_send_pairing_confirm+0x9c>)
   18c42:	4623      	mov	r3, r4
   18c44:	6800      	ldr	r0, [r0, #0]
   18c46:	f105 0227 	add.w	r2, r5, #39	; 0x27
   18c4a:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18c4e:	f014 ff65 	bl	2db1c <bt_crypto_f4>
   18c52:	4604      	mov	r4, r0
   18c54:	b1d0      	cbz	r0, 18c8c <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   18c56:	4630      	mov	r0, r6
   18c58:	f002 fc82 	bl	1b560 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   18c5c:	e010      	b.n	18c80 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   18c5e:	2c03      	cmp	r4, #3
   18c60:	d012      	beq.n	18c88 <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18c62:	466d      	mov	r5, sp
   18c64:	b088      	sub	sp, #32
   18c66:	aa02      	add	r2, sp, #8
   18c68:	4b0f      	ldr	r3, [pc, #60]	; (18ca8 <smp_send_pairing_confirm+0xa0>)
   18c6a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (smp->method) {
   18c6e:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18c72:	2303      	movs	r3, #3
   18c74:	480d      	ldr	r0, [pc, #52]	; (18cac <smp_send_pairing_confirm+0xa4>)
   18c76:	f842 3f10 	str.w	r3, [r2, #16]!
   18c7a:	f014 fcaf 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   18c7e:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   18c80:	2008      	movs	r0, #8
}
   18c82:	3704      	adds	r7, #4
   18c84:	46bd      	mov	sp, r7
   18c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   18c88:	2400      	movs	r4, #0
   18c8a:	e7ce      	b.n	18c2a <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   18c8c:	4602      	mov	r2, r0
   18c8e:	4631      	mov	r1, r6
   18c90:	4628      	mov	r0, r5
   18c92:	f014 fc86 	bl	2d5a2 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18c96:	1d28      	adds	r0, r5, #4
   18c98:	4621      	mov	r1, r4
   18c9a:	f014 fc6e 	bl	2d57a <atomic_clear_bit>
	return 0;
   18c9e:	4620      	mov	r0, r4
   18ca0:	e7ef      	b.n	18c82 <smp_send_pairing_confirm+0x7a>
   18ca2:	bf00      	nop
   18ca4:	20021728 	.word	0x20021728
   18ca8:	00035feb 	.word	0x00035feb
   18cac:	000314fc 	.word	0x000314fc

00018cb0 <smp_public_key_periph>:
{
   18cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cb4:	b086      	sub	sp, #24
   18cb6:	4604      	mov	r4, r0
   18cb8:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18cba:	f7ff fe33 	bl	18924 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18cbe:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18cc0:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18cc2:	210e      	movs	r1, #14
   18cc4:	4628      	mov	r0, r5
   18cc6:	f014 fc31 	bl	2d52c <atomic_test_bit>
   18cca:	b9a0      	cbnz	r0, 18cf6 <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   18ccc:	4b54      	ldr	r3, [pc, #336]	; (18e20 <smp_public_key_periph+0x170>)
   18cce:	2220      	movs	r2, #32
   18cd0:	6819      	ldr	r1, [r3, #0]
   18cd2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18cd6:	f017 fc26 	bl	30526 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18cda:	b960      	cbnz	r0, 18cf6 <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   18cdc:	4b51      	ldr	r3, [pc, #324]	; (18e24 <smp_public_key_periph+0x174>)
   18cde:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18ce2:	617b      	str	r3, [r7, #20]
   18ce4:	2302      	movs	r3, #2
   18ce6:	4850      	ldr	r0, [pc, #320]	; (18e28 <smp_public_key_periph+0x178>)
   18ce8:	613b      	str	r3, [r7, #16]
   18cea:	f107 0210 	add.w	r2, r7, #16
   18cee:	f014 fc75 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18cf2:	2008      	movs	r0, #8
   18cf4:	e034      	b.n	18d60 <smp_public_key_periph+0xb0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   18cf6:	210c      	movs	r1, #12
   18cf8:	4620      	mov	r0, r4
   18cfa:	f014 fc8d 	bl	2d618 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18cfe:	4680      	mov	r8, r0
   18d00:	2800      	cmp	r0, #0
   18d02:	d0f6      	beq.n	18cf2 <smp_public_key_periph+0x42>
   18d04:	2140      	movs	r1, #64	; 0x40
   18d06:	300c      	adds	r0, #12
   18d08:	f002 fd4c 	bl	1b7a4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18d0c:	4b44      	ldr	r3, [pc, #272]	; (18e20 <smp_public_key_periph+0x170>)
   18d0e:	4602      	mov	r2, r0
   18d10:	681b      	ldr	r3, [r3, #0]
   18d12:	4601      	mov	r1, r0
   18d14:	f103 0020 	add.w	r0, r3, #32
   18d18:	f853 cb04 	ldr.w	ip, [r3], #4
   18d1c:	4283      	cmp	r3, r0
   18d1e:	f841 cb04 	str.w	ip, [r1], #4
   18d22:	d1f9      	bne.n	18d18 <smp_public_key_periph+0x68>
   18d24:	3220      	adds	r2, #32
   18d26:	f103 0120 	add.w	r1, r3, #32
   18d2a:	f853 0b04 	ldr.w	r0, [r3], #4
   18d2e:	428b      	cmp	r3, r1
   18d30:	f842 0b04 	str.w	r0, [r2], #4
   18d34:	d1f9      	bne.n	18d2a <smp_public_key_periph+0x7a>
	smp_send(smp, req_buf, NULL, NULL);
   18d36:	2200      	movs	r2, #0
   18d38:	4641      	mov	r1, r8
   18d3a:	4620      	mov	r0, r4
   18d3c:	f014 fc31 	bl	2d5a2 <smp_send.constprop.0>
	switch (smp->method) {
   18d40:	7a23      	ldrb	r3, [r4, #8]
   18d42:	2b05      	cmp	r3, #5
   18d44:	d85a      	bhi.n	18dfc <smp_public_key_periph+0x14c>
   18d46:	e8df f003 	tbb	[pc, r3]
   18d4a:	3b03      	.short	0x3b03
   18d4c:	5659030f 	.word	0x5659030f
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18d50:	2104      	movs	r1, #4
   18d52:	4620      	mov	r0, r4
   18d54:	f014 fc50 	bl	2d5f8 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   18d58:	f7ff ff56 	bl	18c08 <smp_send_pairing_confirm>
		if (err) {
   18d5c:	2800      	cmp	r0, #0
   18d5e:	d03e      	beq.n	18dde <smp_public_key_periph+0x12e>
}
   18d60:	3718      	adds	r7, #24
   18d62:	46bd      	mov	sp, r7
   18d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d68:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   18d6a:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d6e:	f7ff fdd9 	bl	18924 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18d72:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d74:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18d76:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   18d7a:	f7fb fbcf 	bl	1451c <bt_rand>
   18d7e:	2800      	cmp	r0, #0
   18d80:	d1b7      	bne.n	18cf2 <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   18d82:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18d86:	4a29      	ldr	r2, [pc, #164]	; (18e2c <smp_public_key_periph+0x17c>)
	smp->passkey_round = 0U;
   18d88:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   18d8c:	fbb3 f1f2 	udiv	r1, r3, r2
   18d90:	fb02 3311 	mls	r3, r2, r1, r3
   18d94:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   18d98:	b156      	cbz	r6, 18db0 <smp_public_key_periph+0x100>
   18d9a:	6833      	ldr	r3, [r6, #0]
   18d9c:	b143      	cbz	r3, 18db0 <smp_public_key_periph+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18d9e:	210b      	movs	r1, #11
   18da0:	4628      	mov	r0, r5
   18da2:	f014 fc29 	bl	2d5f8 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   18da6:	4640      	mov	r0, r8
   18da8:	6833      	ldr	r3, [r6, #0]
   18daa:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   18dae:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18db0:	2103      	movs	r1, #3
   18db2:	4620      	mov	r0, r4
   18db4:	f014 fc20 	bl	2d5f8 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18db8:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18dba:	f014 fc1d 	bl	2d5f8 <atomic_set_bit>
		break;
   18dbe:	e00e      	b.n	18dde <smp_public_key_periph+0x12e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18dc0:	4620      	mov	r0, r4
   18dc2:	2103      	movs	r1, #3
   18dc4:	f014 fc18 	bl	2d5f8 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18dc8:	210e      	movs	r1, #14
   18dca:	f014 fc15 	bl	2d5f8 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18dce:	4628      	mov	r0, r5
   18dd0:	210a      	movs	r1, #10
   18dd2:	f014 fc11 	bl	2d5f8 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   18dd6:	6873      	ldr	r3, [r6, #4]
   18dd8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18ddc:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   18dde:	4628      	mov	r0, r5
   18de0:	2107      	movs	r1, #7
   18de2:	f014 fc09 	bl	2d5f8 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18de6:	2008      	movs	r0, #8
   18de8:	f7ff fd8e 	bl	18908 <smp_find>
   18dec:	b9b0      	cbnz	r0, 18e1c <smp_public_key_periph+0x16c>
		return smp_dhkey_generate(smp);
   18dee:	4620      	mov	r0, r4
   18df0:	f7ff fe5c 	bl	18aac <smp_dhkey_generate>
   18df4:	e7b4      	b.n	18d60 <smp_public_key_periph+0xb0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18df6:	2104      	movs	r1, #4
   18df8:	4620      	mov	r0, r4
   18dfa:	e7de      	b.n	18dba <smp_public_key_periph+0x10a>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18dfc:	466c      	mov	r4, sp
   18dfe:	b088      	sub	sp, #32
   18e00:	466a      	mov	r2, sp
   18e02:	490b      	ldr	r1, [pc, #44]	; (18e30 <smp_public_key_periph+0x180>)
   18e04:	4808      	ldr	r0, [pc, #32]	; (18e28 <smp_public_key_periph+0x178>)
	switch (smp->method) {
   18e06:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18e0a:	2303      	movs	r3, #3
   18e0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18e10:	f842 3f10 	str.w	r3, [r2, #16]!
   18e14:	f014 fbe2 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   18e18:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   18e1a:	e76a      	b.n	18cf2 <smp_public_key_periph+0x42>
	return 0;
   18e1c:	2000      	movs	r0, #0
   18e1e:	e79f      	b.n	18d60 <smp_public_key_periph+0xb0>
   18e20:	20021728 	.word	0x20021728
   18e24:	00036007 	.word	0x00036007
   18e28:	000314fc 	.word	0x000314fc
   18e2c:	000f4240 	.word	0x000f4240
   18e30:	00035feb 	.word	0x00035feb

00018e34 <smp_public_key>:
{
   18e34:	b530      	push	{r4, r5, lr}
   18e36:	4604      	mov	r4, r0
   18e38:	460d      	mov	r5, r1
   18e3a:	b087      	sub	sp, #28
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18e3c:	f7ff fd72 	bl	18924 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18e40:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18e44:	4602      	mov	r2, r0
   18e46:	68eb      	ldr	r3, [r5, #12]
   18e48:	f103 0120 	add.w	r1, r3, #32
   18e4c:	f853 5b04 	ldr.w	r5, [r3], #4
   18e50:	428b      	cmp	r3, r1
   18e52:	f842 5b04 	str.w	r5, [r2], #4
   18e56:	d1f9      	bne.n	18e4c <smp_public_key+0x18>
   18e58:	f104 0277 	add.w	r2, r4, #119	; 0x77
   18e5c:	f103 0120 	add.w	r1, r3, #32
   18e60:	f853 5b04 	ldr.w	r5, [r3], #4
   18e64:	428b      	cmp	r3, r1
   18e66:	f842 5b04 	str.w	r5, [r2], #4
   18e6a:	d1f9      	bne.n	18e60 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18e6c:	f7fb fb74 	bl	14558 <bt_pub_key_is_debug>
   18e70:	b940      	cbnz	r0, 18e84 <smp_public_key+0x50>
	if (!sc_public_key) {
   18e72:	4b1c      	ldr	r3, [pc, #112]	; (18ee4 <smp_public_key+0xb0>)
   18e74:	681d      	ldr	r5, [r3, #0]
   18e76:	bb75      	cbnz	r5, 18ed6 <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   18e78:	1d20      	adds	r0, r4, #4
   18e7a:	2106      	movs	r1, #6
   18e7c:	f014 fbbc 	bl	2d5f8 <atomic_set_bit>
	return 0;
   18e80:	4628      	mov	r0, r5
		return 0;
   18e82:	e026      	b.n	18ed2 <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   18e84:	4b18      	ldr	r3, [pc, #96]	; (18ee8 <smp_public_key+0xb4>)
   18e86:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   18e8a:	9305      	str	r3, [sp, #20]
   18e8c:	2302      	movs	r3, #2
   18e8e:	4817      	ldr	r0, [pc, #92]	; (18eec <smp_public_key+0xb8>)
   18e90:	aa04      	add	r2, sp, #16
   18e92:	9304      	str	r3, [sp, #16]
   18e94:	f014 fba2 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18e98:	210e      	movs	r1, #14
   18e9a:	1d20      	adds	r0, r4, #4
   18e9c:	f014 fbac 	bl	2d5f8 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   18ea0:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   18ea4:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18ea8:	b933      	cbnz	r3, 18eb8 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18eaa:	7a28      	ldrb	r0, [r5, #8]
   18eac:	f105 0190 	add.w	r1, r5, #144	; 0x90
   18eb0:	f001 fa8e 	bl	1a3d0 <bt_keys_get_addr>
   18eb4:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   18eb8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18ebc:	2b00      	cmp	r3, #0
   18ebe:	d0d8      	beq.n	18e72 <smp_public_key+0x3e>
   18ec0:	89da      	ldrh	r2, [r3, #14]
   18ec2:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18ec6:	2a00      	cmp	r2, #0
   18ec8:	d0d3      	beq.n	18e72 <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18eca:	7b5b      	ldrb	r3, [r3, #13]
   18ecc:	079b      	lsls	r3, r3, #30
   18ece:	d4d0      	bmi.n	18e72 <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18ed0:	2003      	movs	r0, #3
}
   18ed2:	b007      	add	sp, #28
   18ed4:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   18ed6:	4620      	mov	r0, r4
}
   18ed8:	b007      	add	sp, #28
   18eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   18ede:	f7ff bee7 	b.w	18cb0 <smp_public_key_periph>
   18ee2:	bf00      	nop
   18ee4:	20021728 	.word	0x20021728
   18ee8:	00036022 	.word	0x00036022
   18eec:	000314fc 	.word	0x000314fc

00018ef0 <smp_pairing_req>:
{
   18ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18ef4:	b087      	sub	sp, #28
   18ef6:	460d      	mov	r5, r1
   18ef8:	af00      	add	r7, sp, #0
   18efa:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18efc:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f00:	f7ff fd10 	bl	18924 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   18f04:	f8d5 900c 	ldr.w	r9, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f08:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18f0a:	f899 3003 	ldrb.w	r3, [r9, #3]
   18f0e:	3b07      	subs	r3, #7
   18f10:	2b09      	cmp	r3, #9
   18f12:	d904      	bls.n	18f1e <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   18f14:	2006      	movs	r0, #6
}
   18f16:	371c      	adds	r7, #28
   18f18:	46bd      	mov	sp, r7
   18f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   18f1e:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   18f22:	b15b      	cbz	r3, 18f3c <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   18f24:	1d25      	adds	r5, r4, #4
   18f26:	210f      	movs	r1, #15
   18f28:	4628      	mov	r0, r5
   18f2a:	f014 faff 	bl	2d52c <atomic_test_bit>
   18f2e:	b980      	cbnz	r0, 18f52 <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   18f30:	4620      	mov	r0, r4
   18f32:	f7ff fd9f 	bl	18a74 <smp_init>
		if (ret) {
   18f36:	b160      	cbz	r0, 18f52 <smp_pairing_req+0x62>
			return ret;
   18f38:	b2c0      	uxtb	r0, r0
   18f3a:	e7ec      	b.n	18f16 <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18f3c:	7a30      	ldrb	r0, [r6, #8]
   18f3e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   18f42:	f001 fa45 	bl	1a3d0 <bt_keys_get_addr>
   18f46:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   18f4a:	2800      	cmp	r0, #0
   18f4c:	d1ea      	bne.n	18f24 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   18f4e:	2008      	movs	r0, #8
   18f50:	e7e1      	b.n	18f16 <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   18f52:	2301      	movs	r3, #1
   18f54:	7263      	strb	r3, [r4, #9]
   18f56:	f8d9 3000 	ldr.w	r3, [r9]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18f5a:	4620      	mov	r0, r4
   18f5c:	f8c4 300a 	str.w	r3, [r4, #10]
   18f60:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   18f64:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   18f66:	2302      	movs	r3, #2
   18f68:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18f6a:	f899 1002 	ldrb.w	r1, [r9, #2]
   18f6e:	f7ff fd15 	bl	1899c <get_auth>
   18f72:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   18f74:	4620      	mov	r0, r4
   18f76:	f7ff fceb 	bl	18950 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18f7a:	4bac      	ldr	r3, [pc, #688]	; (1922c <smp_pairing_req+0x33c>)
	rsp->io_capability = get_io_capa(smp);
   18f7c:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18f7e:	781b      	ldrb	r3, [r3, #0]
   18f80:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   18f82:	2310      	movs	r3, #16
   18f84:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   18f86:	f899 3004 	ldrb.w	r3, [r9, #4]
   18f8a:	f003 0303 	and.w	r3, r3, #3
   18f8e:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   18f90:	f899 3005 	ldrb.w	r3, [r9, #5]
   18f94:	f003 0301 	and.w	r3, r3, #1
   18f98:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   18f9a:	7ce3      	ldrb	r3, [r4, #19]
   18f9c:	071b      	lsls	r3, r3, #28
   18f9e:	d50d      	bpl.n	18fbc <smp_pairing_req+0xcc>
   18fa0:	f899 3002 	ldrb.w	r3, [r9, #2]
   18fa4:	0718      	lsls	r0, r3, #28
   18fa6:	d509      	bpl.n	18fbc <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   18fa8:	2105      	movs	r1, #5
   18faa:	4628      	mov	r0, r5
   18fac:	f014 fb24 	bl	2d5f8 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   18fb0:	7d63      	ldrb	r3, [r4, #21]
   18fb2:	f003 0302 	and.w	r3, r3, #2
   18fb6:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   18fb8:	2300      	movs	r3, #0
   18fba:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   18fbc:	7ce3      	ldrb	r3, [r4, #19]
   18fbe:	0699      	lsls	r1, r3, #26
   18fc0:	d507      	bpl.n	18fd2 <smp_pairing_req+0xe2>
   18fc2:	f899 3002 	ldrb.w	r3, [r9, #2]
   18fc6:	069a      	lsls	r2, r3, #26
   18fc8:	d503      	bpl.n	18fd2 <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   18fca:	2114      	movs	r1, #20
   18fcc:	4628      	mov	r0, r5
   18fce:	f014 fb13 	bl	2d5f8 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   18fd2:	7da3      	ldrb	r3, [r4, #22]
   18fd4:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   18fd8:	7d63      	ldrb	r3, [r4, #21]
   18fda:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   18fde:	7ce3      	ldrb	r3, [r4, #19]
   18fe0:	07db      	lsls	r3, r3, #31
   18fe2:	d507      	bpl.n	18ff4 <smp_pairing_req+0x104>
   18fe4:	f899 3002 	ldrb.w	r3, [r9, #2]
   18fe8:	07d8      	lsls	r0, r3, #31
   18fea:	d503      	bpl.n	18ff4 <smp_pairing_req+0x104>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   18fec:	210d      	movs	r1, #13
   18fee:	4628      	mov	r0, r5
   18ff0:	f014 fb02 	bl	2d5f8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   18ff4:	2103      	movs	r1, #3
   18ff6:	4628      	mov	r0, r5
   18ff8:	f014 fafe 	bl	2d5f8 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18ffc:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   18ffe:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19002:	f014 fa93 	bl	2d52c <atomic_test_bit>
   19006:	bb40      	cbnz	r0, 1905a <smp_pairing_req+0x16a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19008:	f1b9 0f04 	cmp.w	r9, #4
   1900c:	d845      	bhi.n	1909a <smp_pairing_req+0x1aa>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1900e:	7ae3      	ldrb	r3, [r4, #11]
   19010:	7ca2      	ldrb	r2, [r4, #18]
   19012:	4013      	ands	r3, r2
   19014:	07d9      	lsls	r1, r3, #31
   19016:	d43e      	bmi.n	19096 <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19018:	7b21      	ldrb	r1, [r4, #12]
   1901a:	7ce3      	ldrb	r3, [r4, #19]
   1901c:	4319      	orrs	r1, r3
   1901e:	f011 0104 	ands.w	r1, r1, #4
   19022:	d011      	beq.n	19048 <smp_pairing_req+0x158>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   19024:	4620      	mov	r0, r4
   19026:	f7ff fc93 	bl	18950 <get_io_capa>
   1902a:	4b81      	ldr	r3, [pc, #516]	; (19230 <smp_pairing_req+0x340>)
   1902c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   19030:	4499      	add	r9, r3
   19032:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   19036:	2904      	cmp	r1, #4
   19038:	d106      	bne.n	19048 <smp_pairing_req+0x158>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1903a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1903e:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   19040:	2b00      	cmp	r3, #0
   19042:	bf14      	ite	ne
   19044:	2101      	movne	r1, #1
   19046:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   19048:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1904a:	4620      	mov	r0, r4
   1904c:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   19050:	f014 fa72 	bl	2d538 <update_keys_check>
   19054:	bb18      	cbnz	r0, 1909e <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19056:	2003      	movs	r0, #3
   19058:	e75d      	b.n	18f16 <smp_pairing_req+0x26>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1905a:	7b23      	ldrb	r3, [r4, #12]
   1905c:	7ce0      	ldrb	r0, [r4, #19]
   1905e:	ea03 0200 	and.w	r2, r3, r0
   19062:	0712      	lsls	r2, r2, #28
   19064:	d506      	bpl.n	19074 <smp_pairing_req+0x184>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   19066:	7ae2      	ldrb	r2, [r4, #11]
   19068:	f894 c012 	ldrb.w	ip, [r4, #18]
   1906c:	ea42 020c 	orr.w	r2, r2, ip
   19070:	07d2      	lsls	r2, r2, #31
   19072:	d4e9      	bmi.n	19048 <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19074:	f1b9 0f04 	cmp.w	r9, #4
   19078:	d80f      	bhi.n	1909a <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1907a:	ea43 0100 	orr.w	r1, r3, r0
   1907e:	f011 0104 	ands.w	r1, r1, #4
   19082:	d0e1      	beq.n	19048 <smp_pairing_req+0x158>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   19084:	4620      	mov	r0, r4
   19086:	f7ff fc63 	bl	18950 <get_io_capa>
   1908a:	4b6a      	ldr	r3, [pc, #424]	; (19234 <smp_pairing_req+0x344>)
   1908c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   19090:	444b      	add	r3, r9
   19092:	5c19      	ldrb	r1, [r3, r0]
   19094:	e7d8      	b.n	19048 <smp_pairing_req+0x158>
		return LEGACY_OOB;
   19096:	2106      	movs	r1, #6
   19098:	e7d6      	b.n	19048 <smp_pairing_req+0x158>
		return JUST_WORKS;
   1909a:	2100      	movs	r1, #0
   1909c:	e7d4      	b.n	19048 <smp_pairing_req+0x158>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1909e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   190a2:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   190a4:	2b03      	cmp	r3, #3
   190a6:	d03e      	beq.n	19126 <smp_pairing_req+0x236>
   190a8:	d82c      	bhi.n	19104 <smp_pairing_req+0x214>
   190aa:	3b01      	subs	r3, #1
   190ac:	2b01      	cmp	r3, #1
   190ae:	f63f af4e 	bhi.w	18f4e <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   190b2:	2105      	movs	r1, #5
   190b4:	4628      	mov	r0, r5
   190b6:	f014 fa39 	bl	2d52c <atomic_test_bit>
   190ba:	2800      	cmp	r0, #0
   190bc:	f040 80c4 	bne.w	19248 <smp_pairing_req+0x358>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   190c0:	4620      	mov	r0, r4
   190c2:	f7ff fc2f 	bl	18924 <latch_auth_cb>
   190c6:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   190c8:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   190ca:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   190ce:	f7ff fc29 	bl	18924 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   190d2:	f109 0190 	add.w	r1, r9, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   190d6:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   190d8:	f899 0008 	ldrb.w	r0, [r9, #8]
   190dc:	f001 fa3e 	bl	1a55c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   190e0:	7a23      	ldrb	r3, [r4, #8]
   190e2:	b320      	cbz	r0, 1912e <smp_pairing_req+0x23e>
   190e4:	7b42      	ldrb	r2, [r0, #13]
   190e6:	07d2      	lsls	r2, r2, #31
   190e8:	d521      	bpl.n	1912e <smp_pairing_req+0x23e>
   190ea:	bb03      	cbnz	r3, 1912e <smp_pairing_req+0x23e>
		LOG_ERR("JustWorks failed, authenticated keys present");
   190ec:	4b52      	ldr	r3, [pc, #328]	; (19238 <smp_pairing_req+0x348>)
   190ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   190f2:	617b      	str	r3, [r7, #20]
   190f4:	2302      	movs	r3, #2
   190f6:	4851      	ldr	r0, [pc, #324]	; (1923c <smp_pairing_req+0x34c>)
   190f8:	613b      	str	r3, [r7, #16]
   190fa:	f107 0210 	add.w	r2, r7, #16
   190fe:	f014 fa6d 	bl	2d5dc <z_log_msg_static_create.constprop.0>
	if (ret) {
   19102:	e724      	b.n	18f4e <smp_pairing_req+0x5e>
	switch (sec) {
   19104:	2b04      	cmp	r3, #4
   19106:	f47f af22 	bne.w	18f4e <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1910a:	7d23      	ldrb	r3, [r4, #20]
   1910c:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1910e:	4293      	cmp	r3, r2
   19110:	bf28      	it	cs
   19112:	4613      	movcs	r3, r2
   19114:	2b10      	cmp	r3, #16
   19116:	f47f aefd 	bne.w	18f14 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1911a:	2105      	movs	r1, #5
   1911c:	4628      	mov	r0, r5
   1911e:	f014 fa05 	bl	2d52c <atomic_test_bit>
   19122:	2800      	cmp	r0, #0
   19124:	d097      	beq.n	19056 <smp_pairing_req+0x166>
		if (smp->method == JUST_WORKS) {
   19126:	7a23      	ldrb	r3, [r4, #8]
   19128:	2b00      	cmp	r3, #0
   1912a:	d1c2      	bne.n	190b2 <smp_pairing_req+0x1c2>
   1912c:	e793      	b.n	19056 <smp_pairing_req+0x166>
	switch (smp->method) {
   1912e:	2b06      	cmp	r3, #6
   19130:	d85f      	bhi.n	191f2 <smp_pairing_req+0x302>
   19132:	e8df f003 	tbb	[pc, r3]
   19136:	5617      	.short	0x5617
   19138:	5e5e5e2f 	.word	0x5e5e5e2f
   1913c:	04          	.byte	0x04
   1913d:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1913e:	2e00      	cmp	r6, #0
   19140:	d067      	beq.n	19212 <smp_pairing_req+0x322>
   19142:	68f3      	ldr	r3, [r6, #12]
   19144:	2b00      	cmp	r3, #0
   19146:	d064      	beq.n	19212 <smp_pairing_req+0x322>
			struct bt_conn_oob_info info = {
   19148:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1914a:	210a      	movs	r1, #10
   1914c:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1914e:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19150:	f014 fa52 	bl	2d5f8 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   19154:	4639      	mov	r1, r7
   19156:	68f3      	ldr	r3, [r6, #12]
   19158:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1915c:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1915e:	7a23      	ldrb	r3, [r4, #8]
   19160:	2b00      	cmp	r3, #0
   19162:	d158      	bne.n	19216 <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19164:	210f      	movs	r1, #15
   19166:	4628      	mov	r0, r5
   19168:	f014 f9e0 	bl	2d52c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1916c:	2800      	cmp	r0, #0
   1916e:	d152      	bne.n	19216 <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19170:	f1b8 0f00 	cmp.w	r8, #0
   19174:	d04f      	beq.n	19216 <smp_pairing_req+0x326>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   19176:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1917a:	2b00      	cmp	r3, #0
   1917c:	d04b      	beq.n	19216 <smp_pairing_req+0x326>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1917e:	4628      	mov	r0, r5
   19180:	210a      	movs	r1, #10
   19182:	f014 fa39 	bl	2d5f8 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   19186:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1918a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1918e:	4798      	blx	r3
		return 0;
   19190:	2000      	movs	r0, #0
   19192:	e6c0      	b.n	18f16 <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   19194:	2104      	movs	r1, #4
   19196:	4638      	mov	r0, r7
   19198:	f7fb f9c0 	bl	1451c <bt_rand>
   1919c:	2800      	cmp	r0, #0
   1919e:	f47f aed6 	bne.w	18f4e <smp_pairing_req+0x5e>
			passkey %= 1000000;
   191a2:	683b      	ldr	r3, [r7, #0]
   191a4:	4a26      	ldr	r2, [pc, #152]	; (19240 <smp_pairing_req+0x350>)
   191a6:	fbb3 f1f2 	udiv	r1, r3, r2
   191aa:	fb02 3311 	mls	r3, r2, r1, r3
   191ae:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   191b0:	b14e      	cbz	r6, 191c6 <smp_pairing_req+0x2d6>
   191b2:	6833      	ldr	r3, [r6, #0]
   191b4:	b13b      	cbz	r3, 191c6 <smp_pairing_req+0x2d6>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   191b6:	210b      	movs	r1, #11
   191b8:	4628      	mov	r0, r5
   191ba:	f014 fa1d 	bl	2d5f8 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   191be:	4648      	mov	r0, r9
   191c0:	6833      	ldr	r3, [r6, #0]
   191c2:	6839      	ldr	r1, [r7, #0]
   191c4:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   191c6:	683b      	ldr	r3, [r7, #0]
	dst[1] = val >> 8;
   191c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   191cc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   191d0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   191d2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   191d6:	0a1b      	lsrs	r3, r3, #8
   191d8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   191dc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   191e0:	e7bd      	b.n	1915e <smp_pairing_req+0x26e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   191e2:	4628      	mov	r0, r5
   191e4:	210a      	movs	r1, #10
   191e6:	f014 fa07 	bl	2d5f8 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   191ea:	4648      	mov	r0, r9
   191ec:	6873      	ldr	r3, [r6, #4]
   191ee:	4798      	blx	r3
	if (ret) {
   191f0:	e7b5      	b.n	1915e <smp_pairing_req+0x26e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   191f2:	466c      	mov	r4, sp
   191f4:	b088      	sub	sp, #32
   191f6:	466a      	mov	r2, sp
   191f8:	4912      	ldr	r1, [pc, #72]	; (19244 <smp_pairing_req+0x354>)
   191fa:	4810      	ldr	r0, [pc, #64]	; (1923c <smp_pairing_req+0x34c>)
	switch (smp->method) {
   191fc:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19200:	2303      	movs	r3, #3
   19202:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19206:	f842 3f10 	str.w	r3, [r2, #16]!
   1920a:	f014 f9e7 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   1920e:	46a5      	mov	sp, r4
	if (ret) {
   19210:	e69d      	b.n	18f4e <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   19212:	2002      	movs	r0, #2
   19214:	e67f      	b.n	18f16 <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   19216:	2103      	movs	r1, #3
   19218:	4620      	mov	r0, r4
   1921a:	f014 f9ed 	bl	2d5f8 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1921e:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   19220:	f014 f9ea 	bl	2d5f8 <atomic_set_bit>
	return send_pairing_rsp(smp);
   19224:	f014 fa17 	bl	2d656 <send_pairing_rsp>
   19228:	e675      	b.n	18f16 <smp_pairing_req+0x26>
   1922a:	bf00      	nop
   1922c:	200223f9 	.word	0x200223f9
   19230:	000363aa 	.word	0x000363aa
   19234:	00036391 	.word	0x00036391
   19238:	00036043 	.word	0x00036043
   1923c:	000314fc 	.word	0x000314fc
   19240:	000f4240 	.word	0x000f4240
   19244:	00035feb 	.word	0x00035feb
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   19248:	7a23      	ldrb	r3, [r4, #8]
   1924a:	b993      	cbnz	r3, 19272 <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1924c:	210f      	movs	r1, #15
   1924e:	4628      	mov	r0, r5
   19250:	f014 f96c 	bl	2d52c <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19254:	b968      	cbnz	r0, 19272 <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19256:	f1b8 0f00 	cmp.w	r8, #0
   1925a:	d00a      	beq.n	19272 <smp_pairing_req+0x382>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1925c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   19260:	b13b      	cbz	r3, 19272 <smp_pairing_req+0x382>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19262:	4628      	mov	r0, r5
   19264:	210a      	movs	r1, #10
   19266:	f014 f9c7 	bl	2d5f8 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1926a:	4630      	mov	r0, r6
   1926c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   19270:	e78d      	b.n	1918e <smp_pairing_req+0x29e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   19272:	210c      	movs	r1, #12
   19274:	4620      	mov	r0, r4
   19276:	e7d3      	b.n	19220 <smp_pairing_req+0x330>

00019278 <compute_and_check_and_send_periph_dhcheck>:
{
   19278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1927c:	4604      	mov	r4, r0
   1927e:	b096      	sub	sp, #88	; 0x58
   19280:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   19282:	f107 0520 	add.w	r5, r7, #32
   19286:	2210      	movs	r2, #16
   19288:	2100      	movs	r1, #0
   1928a:	4628      	mov	r0, r5
   1928c:	f017 f995 	bl	305ba <memset>
	switch (smp->method) {
   19290:	7a23      	ldrb	r3, [r4, #8]
   19292:	2b05      	cmp	r3, #5
   19294:	d83a      	bhi.n	1930c <compute_and_check_and_send_periph_dhcheck+0x94>
   19296:	e8df f003 	tbb	[pc, r3]
   1929a:	0306      	.short	0x0306
   1929c:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   192a0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   192a4:	623b      	str	r3, [r7, #32]
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   192a6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   192aa:	f104 0247 	add.w	r2, r4, #71	; 0x47
   192ae:	f104 08c7 	add.w	r8, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   192b2:	e9cd 8201 	strd	r8, r2, [sp, #4]
   192b6:	f104 0937 	add.w	r9, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   192ba:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   192be:	f104 0a27 	add.w	sl, r4, #39	; 0x27
   192c2:	9200      	str	r2, [sp, #0]
   192c4:	4649      	mov	r1, r9
   192c6:	4652      	mov	r2, sl
   192c8:	3397      	adds	r3, #151	; 0x97
   192ca:	f104 0097 	add.w	r0, r4, #151	; 0x97
   192ce:	f001 fb2f 	bl	1a930 <bt_crypto_f5>
   192d2:	b378      	cbz	r0, 19334 <compute_and_check_and_send_periph_dhcheck+0xbc>
		LOG_ERR("Calculate LTK failed");
   192d4:	4b4c      	ldr	r3, [pc, #304]	; (19408 <compute_and_check_and_send_periph_dhcheck+0x190>)
   192d6:	647b      	str	r3, [r7, #68]	; 0x44
   192d8:	2302      	movs	r3, #2
   192da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   192de:	484b      	ldr	r0, [pc, #300]	; (1940c <compute_and_check_and_send_periph_dhcheck+0x194>)
   192e0:	643b      	str	r3, [r7, #64]	; 0x40
   192e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   192e6:	f014 f979 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   192ea:	e01e      	b.n	1932a <compute_and_check_and_send_periph_dhcheck+0xb2>
		if (smp->oobd_remote) {
   192ec:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   192f0:	2b00      	cmp	r3, #0
   192f2:	d0d8      	beq.n	192a6 <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   192f4:	462e      	mov	r6, r5
   192f6:	f103 0c10 	add.w	ip, r3, #16
   192fa:	4632      	mov	r2, r6
   192fc:	6818      	ldr	r0, [r3, #0]
   192fe:	6859      	ldr	r1, [r3, #4]
   19300:	3308      	adds	r3, #8
   19302:	c203      	stmia	r2!, {r0, r1}
   19304:	4563      	cmp	r3, ip
   19306:	4616      	mov	r6, r2
   19308:	d1f7      	bne.n	192fa <compute_and_check_and_send_periph_dhcheck+0x82>
   1930a:	e7cc      	b.n	192a6 <compute_and_check_and_send_periph_dhcheck+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1930c:	466c      	mov	r4, sp
   1930e:	b088      	sub	sp, #32
   19310:	aa04      	add	r2, sp, #16
   19312:	493f      	ldr	r1, [pc, #252]	; (19410 <compute_and_check_and_send_periph_dhcheck+0x198>)
   19314:	483d      	ldr	r0, [pc, #244]	; (1940c <compute_and_check_and_send_periph_dhcheck+0x194>)
	switch (smp->method) {
   19316:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1931a:	2303      	movs	r3, #3
   1931c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19320:	f842 3f10 	str.w	r3, [r2, #16]!
   19324:	f014 f95a 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   19328:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1932a:	2008      	movs	r0, #8
}
   1932c:	3748      	adds	r7, #72	; 0x48
   1932e:	46bd      	mov	sp, r7
   19330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   19334:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   19338:	f107 0610 	add.w	r6, r7, #16
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1933c:	f103 0297 	add.w	r2, r3, #151	; 0x97
   19340:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   19342:	9301      	str	r3, [sp, #4]
   19344:	f104 0311 	add.w	r3, r4, #17
   19348:	9202      	str	r2, [sp, #8]
   1934a:	9300      	str	r3, [sp, #0]
   1934c:	464a      	mov	r2, r9
   1934e:	462b      	mov	r3, r5
   19350:	4651      	mov	r1, sl
   19352:	4640      	mov	r0, r8
   19354:	9603      	str	r6, [sp, #12]
   19356:	f014 fc06 	bl	2db66 <bt_crypto_f6>
   1935a:	b108      	cbz	r0, 19360 <compute_and_check_and_send_periph_dhcheck+0xe8>
		LOG_ERR("Calculate local DHKey check failed");
   1935c:	4b2d      	ldr	r3, [pc, #180]	; (19414 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   1935e:	e7ba      	b.n	192d6 <compute_and_check_and_send_periph_dhcheck+0x5e>
	if (smp->method == LE_SC_OOB) {
   19360:	7a23      	ldrb	r3, [r4, #8]
   19362:	2b05      	cmp	r3, #5
   19364:	d10e      	bne.n	19384 <compute_and_check_and_send_periph_dhcheck+0x10c>
		if (smp->oobd_local) {
   19366:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1936a:	b1f9      	cbz	r1, 193ac <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1936c:	460b      	mov	r3, r1
   1936e:	46ac      	mov	ip, r5
   19370:	f101 0e10 	add.w	lr, r1, #16
   19374:	4662      	mov	r2, ip
   19376:	6818      	ldr	r0, [r3, #0]
   19378:	6859      	ldr	r1, [r3, #4]
   1937a:	3308      	adds	r3, #8
   1937c:	c203      	stmia	r2!, {r0, r1}
   1937e:	4573      	cmp	r3, lr
   19380:	4694      	mov	ip, r2
   19382:	d1f7      	bne.n	19374 <compute_and_check_and_send_periph_dhcheck+0xfc>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   19384:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   19388:	4649      	mov	r1, r9
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1938a:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   1938e:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   19390:	9301      	str	r3, [sp, #4]
   19392:	f104 030a 	add.w	r3, r4, #10
   19396:	9202      	str	r2, [sp, #8]
   19398:	9300      	str	r3, [sp, #0]
   1939a:	4652      	mov	r2, sl
   1939c:	462b      	mov	r3, r5
   1939e:	4640      	mov	r0, r8
   193a0:	9703      	str	r7, [sp, #12]
   193a2:	f014 fbe0 	bl	2db66 <bt_crypto_f6>
   193a6:	b130      	cbz	r0, 193b6 <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   193a8:	4b1b      	ldr	r3, [pc, #108]	; (19418 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   193aa:	e794      	b.n	192d6 <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
   193ac:	2210      	movs	r2, #16
   193ae:	4628      	mov	r0, r5
   193b0:	f017 f903 	bl	305ba <memset>
   193b4:	e7e6      	b.n	19384 <compute_and_check_and_send_periph_dhcheck+0x10c>
	if (memcmp(smp->e, re, 16)) {
   193b6:	2210      	movs	r2, #16
   193b8:	4639      	mov	r1, r7
   193ba:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   193be:	f017 f8b2 	bl	30526 <memcmp>
   193c2:	b9f8      	cbnz	r0, 19404 <compute_and_check_and_send_periph_dhcheck+0x18c>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   193c4:	210d      	movs	r1, #13
   193c6:	4620      	mov	r0, r4
   193c8:	f014 f926 	bl	2d618 <smp_create_pdu.constprop.0>
	if (!buf) {
   193cc:	4680      	mov	r8, r0
   193ce:	2800      	cmp	r0, #0
   193d0:	d0ab      	beq.n	1932a <compute_and_check_and_send_periph_dhcheck+0xb2>
   193d2:	2110      	movs	r1, #16
   193d4:	300c      	adds	r0, #12
   193d6:	f002 f9e5 	bl	1b7a4 <net_buf_simple_add>
   193da:	4603      	mov	r3, r0
   193dc:	4632      	mov	r2, r6
   193de:	ca03      	ldmia	r2!, {r0, r1}
   193e0:	42aa      	cmp	r2, r5
   193e2:	6018      	str	r0, [r3, #0]
   193e4:	6059      	str	r1, [r3, #4]
   193e6:	4616      	mov	r6, r2
   193e8:	f103 0308 	add.w	r3, r3, #8
   193ec:	d1f6      	bne.n	193dc <compute_and_check_and_send_periph_dhcheck+0x164>
	smp_send(smp, buf, NULL, NULL);
   193ee:	2200      	movs	r2, #0
   193f0:	4641      	mov	r1, r8
   193f2:	4620      	mov	r0, r4
   193f4:	f014 f8d5 	bl	2d5a2 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   193f8:	1d20      	adds	r0, r4, #4
   193fa:	2101      	movs	r1, #1
   193fc:	f014 f8fc 	bl	2d5f8 <atomic_set_bit>
	return 0;
   19400:	2000      	movs	r0, #0
   19402:	e793      	b.n	1932c <compute_and_check_and_send_periph_dhcheck+0xb4>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   19404:	200b      	movs	r0, #11
   19406:	e791      	b.n	1932c <compute_and_check_and_send_periph_dhcheck+0xb4>
   19408:	00036070 	.word	0x00036070
   1940c:	000314fc 	.word	0x000314fc
   19410:	00035feb 	.word	0x00035feb
   19414:	00036085 	.word	0x00036085
   19418:	000360a8 	.word	0x000360a8

0001941c <bt_smp_connected>:
{
   1941c:	b538      	push	{r3, r4, r5, lr}
   1941e:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   19420:	4908      	ldr	r1, [pc, #32]	; (19444 <bt_smp_connected+0x28>)
   19422:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   19426:	3094      	adds	r0, #148	; 0x94
   19428:	f00c fd3e 	bl	25ea8 <k_work_init_delayable>
	smp_reset(smp);
   1942c:	4628      	mov	r0, r5
   1942e:	f014 f98c 	bl	2d74a <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19432:	4b05      	ldr	r3, [pc, #20]	; (19448 <bt_smp_connected+0x2c>)
   19434:	34c4      	adds	r4, #196	; 0xc4
   19436:	e8d4 2fef 	ldaex	r2, [r4]
   1943a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1943e:	2900      	cmp	r1, #0
   19440:	d1f9      	bne.n	19436 <bt_smp_connected+0x1a>
}
   19442:	bd38      	pop	{r3, r4, r5, pc}
   19444:	0001a14d 	.word	0x0001a14d
   19448:	20009f78 	.word	0x20009f78

0001944c <smp_pairing_confirm>:
{
   1944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1944e:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   19450:	68cd      	ldr	r5, [r1, #12]
{
   19452:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19454:	210b      	movs	r1, #11
   19456:	4630      	mov	r0, r6
{
   19458:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1945a:	f014 f88e 	bl	2d57a <atomic_clear_bit>
   1945e:	462b      	mov	r3, r5
   19460:	f104 0217 	add.w	r2, r4, #23
   19464:	f105 0110 	add.w	r1, r5, #16
   19468:	f853 0b04 	ldr.w	r0, [r3], #4
   1946c:	428b      	cmp	r3, r1
   1946e:	f842 0b04 	str.w	r0, [r2], #4
   19472:	d1f9      	bne.n	19468 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19474:	2105      	movs	r1, #5
   19476:	4630      	mov	r0, r6
   19478:	f014 f858 	bl	2d52c <atomic_test_bit>
   1947c:	b920      	cbnz	r0, 19488 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   1947e:	4620      	mov	r0, r4
   19480:	f014 f9d9 	bl	2d836 <legacy_pairing_confirm>
}
   19484:	46bd      	mov	sp, r7
   19486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   19488:	7a23      	ldrb	r3, [r4, #8]
   1948a:	2b01      	cmp	r3, #1
   1948c:	d008      	beq.n	194a0 <smp_pairing_confirm+0x54>
   1948e:	2b02      	cmp	r3, #2
   19490:	d112      	bne.n	194b8 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   19492:	2104      	movs	r1, #4
   19494:	4620      	mov	r0, r4
   19496:	f014 f8af 	bl	2d5f8 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1949a:	f7ff fbb5 	bl	18c08 <smp_send_pairing_confirm>
   1949e:	e7f1      	b.n	19484 <smp_pairing_confirm+0x38>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   194a0:	210a      	movs	r1, #10
   194a2:	4630      	mov	r0, r6
   194a4:	f014 f842 	bl	2d52c <atomic_test_bit>
   194a8:	2800      	cmp	r0, #0
   194aa:	d0f2      	beq.n	19492 <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   194ac:	4630      	mov	r0, r6
   194ae:	2100      	movs	r1, #0
   194b0:	f014 f8a2 	bl	2d5f8 <atomic_set_bit>
			return 0;
   194b4:	2000      	movs	r0, #0
   194b6:	e7e5      	b.n	19484 <smp_pairing_confirm+0x38>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   194b8:	466c      	mov	r4, sp
   194ba:	b088      	sub	sp, #32
   194bc:	466a      	mov	r2, sp
   194be:	4907      	ldr	r1, [pc, #28]	; (194dc <smp_pairing_confirm+0x90>)
   194c0:	4807      	ldr	r0, [pc, #28]	; (194e0 <smp_pairing_confirm+0x94>)
	switch (smp->method) {
   194c2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   194c6:	2303      	movs	r3, #3
   194c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   194cc:	f842 3f10 	str.w	r3, [r2, #16]!
   194d0:	f014 f884 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   194d4:	2008      	movs	r0, #8
   194d6:	46a5      	mov	sp, r4
   194d8:	e7d4      	b.n	19484 <smp_pairing_confirm+0x38>
   194da:	bf00      	nop
   194dc:	00035feb 	.word	0x00035feb
   194e0:	000314fc 	.word	0x000314fc

000194e4 <smp_pairing_random>:
{
   194e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194e8:	b08e      	sub	sp, #56	; 0x38
   194ea:	4604      	mov	r4, r0
   194ec:	af04      	add	r7, sp, #16
   194ee:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   194f0:	f7ff fa18 	bl	18924 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   194f4:	f104 0837 	add.w	r8, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   194f8:	4605      	mov	r5, r0
   194fa:	4642      	mov	r2, r8
   194fc:	68f3      	ldr	r3, [r6, #12]
   194fe:	f103 0110 	add.w	r1, r3, #16
   19502:	f853 0b04 	ldr.w	r0, [r3], #4
   19506:	428b      	cmp	r3, r1
   19508:	f842 0b04 	str.w	r0, [r2], #4
   1950c:	d1f9      	bne.n	19502 <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1950e:	1d26      	adds	r6, r4, #4
   19510:	2105      	movs	r1, #5
   19512:	4630      	mov	r0, r6
   19514:	f014 f80a 	bl	2d52c <atomic_test_bit>
   19518:	2800      	cmp	r0, #0
   1951a:	d150      	bne.n	195be <smp_pairing_random+0xda>
	struct bt_conn *conn = smp->chan.chan.conn;
   1951c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19520:	f104 0547 	add.w	r5, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   19524:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   19528:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1952a:	9201      	str	r2, [sp, #4]
   1952c:	9300      	str	r3, [sp, #0]
   1952e:	4641      	mov	r1, r8
   19530:	4628      	mov	r0, r5
   19532:	9702      	str	r7, [sp, #8]
   19534:	f104 0310 	add.w	r3, r4, #16
   19538:	f104 0209 	add.w	r2, r4, #9
   1953c:	f014 f920 	bl	2d780 <smp_c1>
	if (err) {
   19540:	bb18      	cbnz	r0, 1958a <smp_pairing_random+0xa6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   19542:	2210      	movs	r2, #16
   19544:	4639      	mov	r1, r7
   19546:	f104 0017 	add.w	r0, r4, #23
   1954a:	f016 ffec 	bl	30526 <memcmp>
   1954e:	2800      	cmp	r0, #0
   19550:	d176      	bne.n	19640 <smp_pairing_random+0x15c>
	memcpy(out, r2, 8);
   19552:	463b      	mov	r3, r7
   19554:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   19558:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return bt_encrypt_le(k, out, out);
   1955c:	463a      	mov	r2, r7
	memcpy(out, r2, 8);
   1955e:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   19560:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   19564:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   19568:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1956a:	4639      	mov	r1, r7
   1956c:	4628      	mov	r0, r5
   1956e:	f012 ff9e 	bl	2c4ae <bt_encrypt_le>
		if (err) {
   19572:	b178      	cbz	r0, 19594 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   19574:	4b63      	ldr	r3, [pc, #396]	; (19704 <smp_pairing_random+0x220>)
		LOG_ERR("Calculate confirm failed");
   19576:	627b      	str	r3, [r7, #36]	; 0x24
   19578:	2302      	movs	r3, #2
   1957a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1957e:	4862      	ldr	r0, [pc, #392]	; (19708 <smp_pairing_random+0x224>)
   19580:	623b      	str	r3, [r7, #32]
   19582:	f107 0220 	add.w	r2, r7, #32
   19586:	f014 f829 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1958a:	2008      	movs	r0, #8
}
   1958c:	3728      	adds	r7, #40	; 0x28
   1958e:	46bd      	mov	sp, r7
   19590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19594:	463b      	mov	r3, r7
   19596:	462a      	mov	r2, r5
   19598:	f107 0c10 	add.w	ip, r7, #16
   1959c:	461d      	mov	r5, r3
   1959e:	cd03      	ldmia	r5!, {r0, r1}
   195a0:	4565      	cmp	r5, ip
   195a2:	6010      	str	r0, [r2, #0]
   195a4:	6051      	str	r1, [r2, #4]
   195a6:	462b      	mov	r3, r5
   195a8:	f102 0208 	add.w	r2, r2, #8
   195ac:	d1f6      	bne.n	1959c <smp_pairing_random+0xb8>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   195ae:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   195b0:	4630      	mov	r0, r6
   195b2:	f014 f821 	bl	2d5f8 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   195b6:	4620      	mov	r0, r4
   195b8:	f014 f867 	bl	2d68a <smp_send_pairing_random>
   195bc:	e7e6      	b.n	1958c <smp_pairing_random+0xa8>
	switch (smp->method) {
   195be:	7a23      	ldrb	r3, [r4, #8]
   195c0:	2b05      	cmp	r3, #5
   195c2:	f200 808c 	bhi.w	196de <smp_pairing_random+0x1fa>
   195c6:	e8df f003 	tbb	[pc, r3]
   195ca:	201a      	.short	0x201a
   195cc:	618a0320 	.word	0x618a0320
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   195d0:	f107 0310 	add.w	r3, r7, #16
   195d4:	494d      	ldr	r1, [pc, #308]	; (1970c <smp_pairing_random+0x228>)
   195d6:	9300      	str	r3, [sp, #0]
   195d8:	4642      	mov	r2, r8
   195da:	6809      	ldr	r1, [r1, #0]
   195dc:	f104 0327 	add.w	r3, r4, #39	; 0x27
   195e0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   195e4:	f001 fa0c 	bl	1aa00 <bt_crypto_g2>
   195e8:	2800      	cmp	r0, #0
   195ea:	d1ce      	bne.n	1958a <smp_pairing_random+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   195ec:	210a      	movs	r1, #10
   195ee:	4630      	mov	r0, r6
   195f0:	f014 f802 	bl	2d5f8 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   195f4:	68ab      	ldr	r3, [r5, #8]
   195f6:	6939      	ldr	r1, [r7, #16]
   195f8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   195fc:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   195fe:	210d      	movs	r1, #13
   19600:	4620      	mov	r0, r4
   19602:	f013 fff9 	bl	2d5f8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19606:	2110      	movs	r1, #16
   19608:	e7d2      	b.n	195b0 <smp_pairing_random+0xcc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1960a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1960e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19612:	493e      	ldr	r1, [pc, #248]	; (1970c <smp_pairing_random+0x228>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19614:	40d3      	lsrs	r3, r2
   19616:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1961a:	9700      	str	r7, [sp, #0]
   1961c:	4642      	mov	r2, r8
   1961e:	6809      	ldr	r1, [r1, #0]
   19620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19624:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19628:	f014 fa78 	bl	2db1c <bt_crypto_f4>
   1962c:	b108      	cbz	r0, 19632 <smp_pairing_random+0x14e>
		LOG_ERR("Calculate confirm failed");
   1962e:	4b38      	ldr	r3, [pc, #224]	; (19710 <smp_pairing_random+0x22c>)
   19630:	e7a1      	b.n	19576 <smp_pairing_random+0x92>
	if (memcmp(smp->pcnf, cfm, 16)) {
   19632:	2210      	movs	r2, #16
   19634:	4639      	mov	r1, r7
   19636:	f104 0017 	add.w	r0, r4, #23
   1963a:	f016 ff74 	bl	30526 <memcmp>
   1963e:	b108      	cbz	r0, 19644 <smp_pairing_random+0x160>
		return BT_SMP_ERR_CONFIRM_FAILED;
   19640:	2004      	movs	r0, #4
   19642:	e7a3      	b.n	1958c <smp_pairing_random+0xa8>
		atomic_set_bit(smp->allowed_cmds,
   19644:	2103      	movs	r1, #3
   19646:	4620      	mov	r0, r4
   19648:	f013 ffd6 	bl	2d5f8 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1964c:	f014 f81d 	bl	2d68a <smp_send_pairing_random>
		if (err) {
   19650:	2800      	cmp	r0, #0
   19652:	d19b      	bne.n	1958c <smp_pairing_random+0xa8>
		smp->passkey_round++;
   19654:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   19658:	3301      	adds	r3, #1
   1965a:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1965c:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1965e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   19662:	d109      	bne.n	19678 <smp_pairing_random+0x194>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19664:	210d      	movs	r1, #13
   19666:	4620      	mov	r0, r4
   19668:	f013 ffc6 	bl	2d5f8 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1966c:	2110      	movs	r1, #16
   1966e:	4630      	mov	r0, r6
   19670:	f013 ffc2 	bl	2d5f8 <atomic_set_bit>
			return 0;
   19674:	2000      	movs	r0, #0
   19676:	e789      	b.n	1958c <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   19678:	2110      	movs	r1, #16
   1967a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1967e:	f7fa ff4d 	bl	1451c <bt_rand>
   19682:	3800      	subs	r0, #0
   19684:	bf18      	it	ne
   19686:	2001      	movne	r0, #1
   19688:	00c0      	lsls	r0, r0, #3
   1968a:	e77f      	b.n	1958c <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   1968c:	2110      	movs	r1, #16
   1968e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   19692:	f7fa ff43 	bl	1451c <bt_rand>
   19696:	2800      	cmp	r0, #0
   19698:	f47f af77 	bne.w	1958a <smp_pairing_random+0xa6>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1969c:	b37d      	cbz	r5, 196fe <smp_pairing_random+0x21a>
   1969e:	68eb      	ldr	r3, [r5, #12]
   196a0:	b36b      	cbz	r3, 196fe <smp_pairing_random+0x21a>
			struct bt_conn_oob_info info = {
   196a2:	4b1c      	ldr	r3, [pc, #112]	; (19714 <smp_pairing_random+0x230>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196a4:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   196a6:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   196a8:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   196aa:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196ac:	7ca3      	ldrb	r3, [r4, #18]
   196ae:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   196b2:	d412      	bmi.n	196da <smp_pairing_random+0x1f6>
   196b4:	2b00      	cmp	r3, #0
   196b6:	bf14      	ite	ne
   196b8:	2301      	movne	r3, #1
   196ba:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   196bc:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   196be:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   196c0:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
   196c2:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   196c6:	210c      	movs	r1, #12
   196c8:	f013 ff96 	bl	2d5f8 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   196cc:	68eb      	ldr	r3, [r5, #12]
   196ce:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   196d2:	f107 0110 	add.w	r1, r7, #16
   196d6:	4798      	blx	r3
			return 0;
   196d8:	e7cc      	b.n	19674 <smp_pairing_random+0x190>
		if (rsp_oob_present) {
   196da:	005b      	lsls	r3, r3, #1
   196dc:	e7ee      	b.n	196bc <smp_pairing_random+0x1d8>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   196de:	466c      	mov	r4, sp
   196e0:	b088      	sub	sp, #32
   196e2:	aa04      	add	r2, sp, #16
   196e4:	490c      	ldr	r1, [pc, #48]	; (19718 <smp_pairing_random+0x234>)
   196e6:	4808      	ldr	r0, [pc, #32]	; (19708 <smp_pairing_random+0x224>)
	switch (smp->method) {
   196e8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   196ec:	2303      	movs	r3, #3
   196ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   196f2:	f842 3f10 	str.w	r3, [r2, #16]!
   196f6:	f013 ff71 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   196fa:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   196fc:	e745      	b.n	1958a <smp_pairing_random+0xa6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   196fe:	2002      	movs	r0, #2
   19700:	e744      	b.n	1958c <smp_pairing_random+0xa8>
   19702:	bf00      	nop
   19704:	000360cc 	.word	0x000360cc
   19708:	000314fc 	.word	0x000314fc
   1970c:	20021728 	.word	0x20021728
   19710:	000360e1 	.word	0x000360e1
   19714:	000316c2 	.word	0x000316c2
   19718:	00035feb 	.word	0x00035feb

0001971c <bt_smp_start_security>:
{
   1971c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   19720:	78c6      	ldrb	r6, [r0, #3]
{
   19722:	4604      	mov	r4, r0
	switch (conn->role) {
   19724:	2e01      	cmp	r6, #1
   19726:	d005      	beq.n	19734 <bt_smp_start_security+0x18>
		return -EINVAL;
   19728:	f06f 0415 	mvn.w	r4, #21
}
   1972c:	4620      	mov	r0, r4
   1972e:	b003      	add	sp, #12
   19730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   19734:	f013 ff55 	bl	2d5e2 <smp_chan_get>
	if (!smp) {
   19738:	4605      	mov	r5, r0
   1973a:	2800      	cmp	r0, #0
   1973c:	f000 80ac 	beq.w	19898 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19740:	1d07      	adds	r7, r0, #4
   19742:	2104      	movs	r1, #4
   19744:	4638      	mov	r0, r7
   19746:	f013 fef1 	bl	2d52c <atomic_test_bit>
   1974a:	2800      	cmp	r0, #0
   1974c:	f040 80a7 	bne.w	1989e <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19750:	2103      	movs	r1, #3
   19752:	4638      	mov	r0, r7
   19754:	f013 feea 	bl	2d52c <atomic_test_bit>
   19758:	b110      	cbz	r0, 19760 <bt_smp_start_security+0x44>
		return -EBUSY;
   1975a:	f06f 040f 	mvn.w	r4, #15
   1975e:	e7e5      	b.n	1972c <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19760:	4631      	mov	r1, r6
   19762:	4638      	mov	r0, r7
   19764:	f013 fee2 	bl	2d52c <atomic_test_bit>
   19768:	2800      	cmp	r0, #0
   1976a:	d1f6      	bne.n	1975a <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1976c:	4628      	mov	r0, r5
   1976e:	f7ff f8d9 	bl	18924 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   19772:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19776:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   19778:	7a9b      	ldrb	r3, [r3, #10]
   1977a:	2b03      	cmp	r3, #3
   1977c:	d042      	beq.n	19804 <bt_smp_start_security+0xe8>
   1977e:	d832      	bhi.n	197e6 <bt_smp_start_security+0xca>
   19780:	3b01      	subs	r3, #1
   19782:	2b01      	cmp	r3, #1
   19784:	d948      	bls.n	19818 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   19786:	210b      	movs	r1, #11
   19788:	1d20      	adds	r0, r4, #4
   1978a:	f013 fecf 	bl	2d52c <atomic_test_bit>
   1978e:	2800      	cmp	r0, #0
   19790:	d1ca      	bne.n	19728 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   19792:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19796:	b983      	cbnz	r3, 197ba <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   19798:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1979c:	4632      	mov	r2, r6
   1979e:	2020      	movs	r0, #32
   197a0:	7a21      	ldrb	r1, [r4, #8]
   197a2:	f000 fe55 	bl	1a450 <bt_keys_find>
   197a6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   197aa:	b930      	cbnz	r0, 197ba <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   197ac:	4632      	mov	r2, r6
   197ae:	2004      	movs	r0, #4
   197b0:	7a21      	ldrb	r1, [r4, #8]
   197b2:	f000 fe4d 	bl	1a450 <bt_keys_find>
   197b6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   197ba:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   197be:	2b00      	cmp	r3, #0
   197c0:	d0b2      	beq.n	19728 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   197c2:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   197c4:	f012 0f24 	tst.w	r2, #36	; 0x24
   197c8:	d0ae      	beq.n	19728 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   197ca:	7aa1      	ldrb	r1, [r4, #10]
   197cc:	2902      	cmp	r1, #2
   197ce:	d923      	bls.n	19818 <bt_smp_start_security+0xfc>
   197d0:	7b58      	ldrb	r0, [r3, #13]
   197d2:	07c0      	lsls	r0, r0, #31
   197d4:	d5a8      	bpl.n	19728 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   197d6:	2903      	cmp	r1, #3
   197d8:	d01e      	beq.n	19818 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   197da:	0692      	lsls	r2, r2, #26
   197dc:	d5a4      	bpl.n	19728 <bt_smp_start_security+0xc>
   197de:	7b1b      	ldrb	r3, [r3, #12]
   197e0:	2b10      	cmp	r3, #16
   197e2:	d1a1      	bne.n	19728 <bt_smp_start_security+0xc>
   197e4:	e018      	b.n	19818 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   197e6:	2b04      	cmp	r3, #4
   197e8:	d1cd      	bne.n	19786 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   197ea:	4628      	mov	r0, r5
   197ec:	f7ff f8b0 	bl	18950 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   197f0:	2803      	cmp	r0, #3
   197f2:	d104      	bne.n	197fe <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   197f4:	2e00      	cmp	r6, #0
   197f6:	d0c6      	beq.n	19786 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   197f8:	68f3      	ldr	r3, [r6, #12]
   197fa:	2b00      	cmp	r3, #0
   197fc:	d0c3      	beq.n	19786 <bt_smp_start_security+0x6a>
   197fe:	4b29      	ldr	r3, [pc, #164]	; (198a4 <bt_smp_start_security+0x188>)
   19800:	781b      	ldrb	r3, [r3, #0]
   19802:	e007      	b.n	19814 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19804:	4628      	mov	r0, r5
   19806:	f7ff f8a3 	bl	18950 <get_io_capa>
   1980a:	2803      	cmp	r0, #3
   1980c:	d104      	bne.n	19818 <bt_smp_start_security+0xfc>
   1980e:	2e00      	cmp	r6, #0
   19810:	d0b9      	beq.n	19786 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   19812:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19814:	2b00      	cmp	r3, #0
   19816:	d0b6      	beq.n	19786 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   19818:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1981c:	b13b      	cbz	r3, 1982e <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1981e:	4628      	mov	r0, r5
   19820:	f7ff f928 	bl	18a74 <smp_init>
   19824:	4680      	mov	r8, r0
   19826:	b170      	cbz	r0, 19846 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   19828:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1982c:	e77e      	b.n	1972c <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1982e:	7a20      	ldrb	r0, [r4, #8]
   19830:	f104 0190 	add.w	r1, r4, #144	; 0x90
   19834:	f000 fdcc 	bl	1a3d0 <bt_keys_get_addr>
   19838:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   1983c:	2800      	cmp	r0, #0
   1983e:	d1ee      	bne.n	1981e <bt_smp_start_security+0x102>
			return -ENOMEM;
   19840:	f06f 040b 	mvn.w	r4, #11
   19844:	e772      	b.n	1972c <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   19846:	210b      	movs	r1, #11
   19848:	4628      	mov	r0, r5
   1984a:	f013 fee5 	bl	2d618 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1984e:	4606      	mov	r6, r0
   19850:	2800      	cmp	r0, #0
   19852:	d0e9      	beq.n	19828 <bt_smp_start_security+0x10c>
   19854:	2101      	movs	r1, #1
   19856:	300c      	adds	r0, #12
   19858:	f001 ffa4 	bl	1b7a4 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1985c:	2109      	movs	r1, #9
   1985e:	4681      	mov	r9, r0
   19860:	4628      	mov	r0, r5
   19862:	f7ff f89b 	bl	1899c <get_auth>
   19866:	4643      	mov	r3, r8
   19868:	f889 0000 	strb.w	r0, [r9]
   1986c:	4632      	mov	r2, r6
   1986e:	4620      	mov	r0, r4
   19870:	2106      	movs	r1, #6
   19872:	f8cd 8000 	str.w	r8, [sp]
   19876:	f012 ffab 	bl	2c7d0 <bt_l2cap_send_cb>
	if (err) {
   1987a:	4604      	mov	r4, r0
   1987c:	b118      	cbz	r0, 19886 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1987e:	4630      	mov	r0, r6
   19880:	f001 fe6e 	bl	1b560 <net_buf_unref>
		return err;
   19884:	e752      	b.n	1972c <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   19886:	4638      	mov	r0, r7
   19888:	210f      	movs	r1, #15
   1988a:	f013 feb5 	bl	2d5f8 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1988e:	2101      	movs	r1, #1
   19890:	4628      	mov	r0, r5
   19892:	f013 feb1 	bl	2d5f8 <atomic_set_bit>
	return 0;
   19896:	e749      	b.n	1972c <bt_smp_start_security+0x10>
		return -ENOTCONN;
   19898:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1989c:	e746      	b.n	1972c <bt_smp_start_security+0x10>
		return -EIO;
   1989e:	f06f 0404 	mvn.w	r4, #4
   198a2:	e743      	b.n	1972c <bt_smp_start_security+0x10>
   198a4:	200223f8 	.word	0x200223f8

000198a8 <smp_pairing_complete>:
{
   198a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198aa:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   198ac:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   198b0:	1d04      	adds	r4, r0, #4
	if (!status) {
   198b2:	bb61      	cbnz	r1, 1990e <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   198b4:	210d      	movs	r1, #13
   198b6:	4620      	mov	r0, r4
   198b8:	f013 fe38 	bl	2d52c <atomic_test_bit>
		if (bond_flag) {
   198bc:	4607      	mov	r7, r0
   198be:	b118      	cbz	r0, 198c8 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   198c0:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   198c4:	f000 ffbe 	bl	1a844 <bt_keys_store>
	return list->head;
   198c8:	4b36      	ldr	r3, [pc, #216]	; (199a4 <smp_pairing_complete+0xfc>)
   198ca:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   198cc:	b19b      	cbz	r3, 198f6 <smp_pairing_complete+0x4e>
	return node->next;
   198ce:	681c      	ldr	r4, [r3, #0]
   198d0:	b104      	cbz	r4, 198d4 <smp_pairing_complete+0x2c>
   198d2:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   198d4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   198d8:	b113      	cbz	r3, 198e0 <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   198da:	4639      	mov	r1, r7
   198dc:	4628      	mov	r0, r5
   198de:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   198e0:	b14c      	cbz	r4, 198f6 <smp_pairing_complete+0x4e>
   198e2:	4623      	mov	r3, r4
   198e4:	68e4      	ldr	r4, [r4, #12]
   198e6:	681b      	ldr	r3, [r3, #0]
   198e8:	b11c      	cbz	r4, 198f2 <smp_pairing_complete+0x4a>
   198ea:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   198ec:	2b00      	cmp	r3, #0
   198ee:	d1f4      	bne.n	198da <smp_pairing_complete+0x32>
   198f0:	e7f7      	b.n	198e2 <smp_pairing_complete+0x3a>
   198f2:	2b00      	cmp	r3, #0
   198f4:	d1f1      	bne.n	198da <smp_pairing_complete+0x32>
	smp_reset(smp);
   198f6:	4630      	mov	r0, r6
   198f8:	f013 ff27 	bl	2d74a <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   198fc:	7a6a      	ldrb	r2, [r5, #9]
   198fe:	7aab      	ldrb	r3, [r5, #10]
   19900:	429a      	cmp	r2, r3
   19902:	d04d      	beq.n	199a0 <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   19904:	4628      	mov	r0, r5
}
   19906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1990a:	f7ff bf07 	b.w	1971c <bt_smp_start_security>
	switch (smp_err) {
   1990e:	3901      	subs	r1, #1
   19910:	b2c9      	uxtb	r1, r1
   19912:	290e      	cmp	r1, #14
   19914:	bf96      	itet	ls
   19916:	4b24      	ldrls	r3, [pc, #144]	; (199a8 <smp_pairing_complete+0x100>)
	if (!status) {
   19918:	2709      	movhi	r7, #9
   1991a:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1991c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   19920:	b143      	cbz	r3, 19934 <smp_pairing_complete+0x8c>
   19922:	7b1b      	ldrb	r3, [r3, #12]
   19924:	bb33      	cbnz	r3, 19974 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   19926:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   1992a:	f000 fe77 	bl	1a61c <bt_keys_clear>
			conn->le.keys = NULL;
   1992e:	2300      	movs	r3, #0
   19930:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   19934:	2102      	movs	r1, #2
   19936:	4620      	mov	r0, r4
   19938:	f013 fdf8 	bl	2d52c <atomic_test_bit>
   1993c:	b948      	cbnz	r0, 19952 <smp_pairing_complete+0xaa>
	switch (err) {
   1993e:	2f07      	cmp	r7, #7
   19940:	bf94      	ite	ls
   19942:	4b1a      	ldrls	r3, [pc, #104]	; (199ac <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   19944:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   19946:	463a      	mov	r2, r7
   19948:	4628      	mov	r0, r5
   1994a:	bf98      	it	ls
   1994c:	5dd9      	ldrbls	r1, [r3, r7]
   1994e:	f7fb fce5 	bl	1531c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19952:	2103      	movs	r1, #3
   19954:	4620      	mov	r0, r4
   19956:	f013 fde9 	bl	2d52c <atomic_test_bit>
   1995a:	2800      	cmp	r0, #0
   1995c:	d0cb      	beq.n	198f6 <smp_pairing_complete+0x4e>
	return list->head;
   1995e:	4b11      	ldr	r3, [pc, #68]	; (199a4 <smp_pairing_complete+0xfc>)
   19960:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19962:	2b00      	cmp	r3, #0
   19964:	d0c7      	beq.n	198f6 <smp_pairing_complete+0x4e>
	return node->next;
   19966:	681c      	ldr	r4, [r3, #0]
   19968:	b104      	cbz	r4, 1996c <smp_pairing_complete+0xc4>
   1996a:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1996c:	f853 3c08 	ldr.w	r3, [r3, #-8]
   19970:	b94b      	cbnz	r3, 19986 <smp_pairing_complete+0xde>
   19972:	e00b      	b.n	1998c <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   19974:	2102      	movs	r1, #2
   19976:	4620      	mov	r0, r4
   19978:	f013 fdd8 	bl	2d52c <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1997c:	2800      	cmp	r0, #0
   1997e:	d1d2      	bne.n	19926 <smp_pairing_complete+0x7e>
   19980:	e7d8      	b.n	19934 <smp_pairing_complete+0x8c>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19982:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   19984:	b123      	cbz	r3, 19990 <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   19986:	4639      	mov	r1, r7
   19988:	4628      	mov	r0, r5
   1998a:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1998c:	2c00      	cmp	r4, #0
   1998e:	d0b2      	beq.n	198f6 <smp_pairing_complete+0x4e>
   19990:	4623      	mov	r3, r4
   19992:	68e4      	ldr	r4, [r4, #12]
   19994:	685b      	ldr	r3, [r3, #4]
   19996:	2c00      	cmp	r4, #0
   19998:	d1f3      	bne.n	19982 <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   1999a:	2b00      	cmp	r3, #0
   1999c:	d1f3      	bne.n	19986 <smp_pairing_complete+0xde>
   1999e:	e7aa      	b.n	198f6 <smp_pairing_complete+0x4e>
}
   199a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199a2:	bf00      	nop
   199a4:	200215f8 	.word	0x200215f8
   199a8:	00036382 	.word	0x00036382
   199ac:	00036371 	.word	0x00036371

000199b0 <smp_error>:
{
   199b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   199b2:	1d03      	adds	r3, r0, #4
{
   199b4:	4606      	mov	r6, r0
   199b6:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   199b8:	4618      	mov	r0, r3
   199ba:	2102      	movs	r1, #2
{
   199bc:	b089      	sub	sp, #36	; 0x24
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   199be:	f013 fdb5 	bl	2d52c <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   199c2:	4604      	mov	r4, r0
   199c4:	b120      	cbz	r0, 199d0 <smp_error+0x20>
   199c6:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   199ca:	fab4 f484 	clz	r4, r4
   199ce:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   199d0:	2103      	movs	r1, #3
   199d2:	4618      	mov	r0, r3
   199d4:	f013 fdaa 	bl	2d52c <atomic_test_bit>
   199d8:	b1b0      	cbz	r0, 19a08 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   199da:	4639      	mov	r1, r7
   199dc:	4630      	mov	r0, r6
   199de:	f7ff ff63 	bl	198a8 <smp_pairing_complete>
	if (remote_already_completed) {
   199e2:	b1f4      	cbz	r4, 19a22 <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   199e4:	4b1d      	ldr	r3, [pc, #116]	; (19a5c <smp_error+0xac>)
   199e6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   199ea:	9307      	str	r3, [sp, #28]
   199ec:	2302      	movs	r3, #2
   199ee:	481c      	ldr	r0, [pc, #112]	; (19a60 <smp_error+0xb0>)
   199f0:	aa06      	add	r2, sp, #24
   199f2:	9306      	str	r3, [sp, #24]
   199f4:	f013 fdf2 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   199f8:	2105      	movs	r1, #5
   199fa:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   199fe:	f012 fde2 	bl	2c5c6 <bt_conn_disconnect>
		return 0;
   19a02:	2000      	movs	r0, #0
}
   19a04:	b009      	add	sp, #36	; 0x24
   19a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19a08:	2101      	movs	r1, #1
   19a0a:	4618      	mov	r0, r3
   19a0c:	f013 fd8e 	bl	2d52c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19a10:	2800      	cmp	r0, #0
   19a12:	d1e2      	bne.n	199da <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19a14:	210f      	movs	r1, #15
   19a16:	4618      	mov	r0, r3
   19a18:	f013 fd88 	bl	2d52c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19a1c:	2800      	cmp	r0, #0
   19a1e:	d1dc      	bne.n	199da <smp_error+0x2a>
   19a20:	e7df      	b.n	199e2 <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   19a22:	2105      	movs	r1, #5
   19a24:	4630      	mov	r0, r6
   19a26:	f013 fdf7 	bl	2d618 <smp_create_pdu.constprop.0>
	if (!buf) {
   19a2a:	4605      	mov	r5, r0
   19a2c:	b190      	cbz	r0, 19a54 <smp_error+0xa4>
   19a2e:	2101      	movs	r1, #1
   19a30:	300c      	adds	r0, #12
   19a32:	f001 feb7 	bl	1b7a4 <net_buf_simple_add>
	rsp->reason = reason;
   19a36:	7007      	strb	r7, [r0, #0]
   19a38:	9400      	str	r4, [sp, #0]
   19a3a:	4623      	mov	r3, r4
   19a3c:	462a      	mov	r2, r5
   19a3e:	2106      	movs	r1, #6
   19a40:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19a44:	f012 fec4 	bl	2c7d0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   19a48:	2800      	cmp	r0, #0
   19a4a:	d0da      	beq.n	19a02 <smp_error+0x52>
		net_buf_unref(buf);
   19a4c:	4628      	mov	r0, r5
   19a4e:	f001 fd87 	bl	1b560 <net_buf_unref>
   19a52:	e7d6      	b.n	19a02 <smp_error+0x52>
		return -ENOBUFS;
   19a54:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19a58:	e7d4      	b.n	19a04 <smp_error+0x54>
   19a5a:	bf00      	nop
   19a5c:	000360fa 	.word	0x000360fa
   19a60:	000314fc 	.word	0x000314fc

00019a64 <bt_smp_recv>:
{
   19a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a68:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   19a6a:	8a0b      	ldrh	r3, [r1, #16]
{
   19a6c:	4680      	mov	r8, r0
   19a6e:	460d      	mov	r5, r1
   19a70:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   19a72:	b97b      	cbnz	r3, 19a94 <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   19a74:	4b44      	ldr	r3, [pc, #272]	; (19b88 <bt_smp_recv+0x124>)
   19a76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19a7a:	617b      	str	r3, [r7, #20]
   19a7c:	2302      	movs	r3, #2
   19a7e:	4843      	ldr	r0, [pc, #268]	; (19b8c <bt_smp_recv+0x128>)
   19a80:	613b      	str	r3, [r7, #16]
   19a82:	f107 0210 	add.w	r2, r7, #16
   19a86:	f013 fda9 	bl	2d5dc <z_log_msg_static_create.constprop.0>
}
   19a8a:	2000      	movs	r0, #0
   19a8c:	3718      	adds	r7, #24
   19a8e:	46bd      	mov	sp, r7
   19a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19a94:	2101      	movs	r1, #1
   19a96:	f105 000c 	add.w	r0, r5, #12
   19a9a:	f001 fe65 	bl	1b768 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19a9e:	2104      	movs	r1, #4
   19aa0:	4606      	mov	r6, r0
   19aa2:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   19aa6:	f013 fd41 	bl	2d52c <atomic_test_bit>
   19aaa:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   19aae:	7831      	ldrb	r1, [r6, #0]
   19ab0:	b178      	cbz	r0, 19ad2 <bt_smp_recv+0x6e>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   19ab2:	466c      	mov	r4, sp
   19ab4:	b088      	sub	sp, #32
   19ab6:	466a      	mov	r2, sp
   19ab8:	4b35      	ldr	r3, [pc, #212]	; (19b90 <bt_smp_recv+0x12c>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19aba:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19abe:	2303      	movs	r3, #3
   19ac0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19ac4:	4831      	ldr	r0, [pc, #196]	; (19b8c <bt_smp_recv+0x128>)
   19ac6:	f842 3f10 	str.w	r3, [r2, #16]!
   19aca:	f013 fd87 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   19ace:	46a5      	mov	sp, r4
		return 0;
   19ad0:	e7db      	b.n	19a8a <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   19ad2:	290e      	cmp	r1, #14
   19ad4:	d904      	bls.n	19ae0 <bt_smp_recv+0x7c>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19ad6:	466c      	mov	r4, sp
   19ad8:	b088      	sub	sp, #32
   19ada:	466a      	mov	r2, sp
   19adc:	4b2d      	ldr	r3, [pc, #180]	; (19b94 <bt_smp_recv+0x130>)
   19ade:	e7ec      	b.n	19aba <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   19ae0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19b98 <bt_smp_recv+0x134>
   19ae4:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   19ae8:	b99b      	cbnz	r3, 19b12 <bt_smp_recv+0xae>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   19aea:	466d      	mov	r5, sp
   19aec:	b088      	sub	sp, #32
   19aee:	466a      	mov	r2, sp
   19af0:	4b2a      	ldr	r3, [pc, #168]	; (19b9c <bt_smp_recv+0x138>)
   19af2:	4826      	ldr	r0, [pc, #152]	; (19b8c <bt_smp_recv+0x128>)
   19af4:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19af8:	2303      	movs	r3, #3
   19afa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19afe:	f842 3f10 	str.w	r3, [r2, #16]!
   19b02:	f013 fd6b 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   19b06:	2107      	movs	r1, #7
   19b08:	46ad      	mov	sp, r5
		smp_error(smp, err);
   19b0a:	4620      	mov	r0, r4
   19b0c:	f7ff ff50 	bl	199b0 <smp_error>
   19b10:	e7bb      	b.n	19a8a <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   19b12:	4620      	mov	r0, r4
   19b14:	f013 fe07 	bl	2d726 <atomic_test_and_clear_bit>
   19b18:	7833      	ldrb	r3, [r6, #0]
   19b1a:	b998      	cbnz	r0, 19b44 <bt_smp_recv+0xe0>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   19b1c:	466d      	mov	r5, sp
   19b1e:	b088      	sub	sp, #32
   19b20:	466a      	mov	r2, sp
   19b22:	491f      	ldr	r1, [pc, #124]	; (19ba0 <bt_smp_recv+0x13c>)
   19b24:	4819      	ldr	r0, [pc, #100]	; (19b8c <bt_smp_recv+0x128>)
   19b26:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19b2a:	2303      	movs	r3, #3
   19b2c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19b30:	f842 3f10 	str.w	r3, [r2, #16]!
   19b34:	f013 fd52 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   19b38:	7833      	ldrb	r3, [r6, #0]
   19b3a:	46ad      	mov	sp, r5
   19b3c:	2b05      	cmp	r3, #5
   19b3e:	d0a4      	beq.n	19a8a <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19b40:	2108      	movs	r1, #8
   19b42:	e7e2      	b.n	19b0a <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   19b44:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   19b48:	8a29      	ldrh	r1, [r5, #16]
   19b4a:	7912      	ldrb	r2, [r2, #4]
   19b4c:	428a      	cmp	r2, r1
   19b4e:	d011      	beq.n	19b74 <bt_smp_recv+0x110>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19b50:	466d      	mov	r5, sp
   19b52:	b088      	sub	sp, #32
   19b54:	466a      	mov	r2, sp
   19b56:	61d3      	str	r3, [r2, #28]
   19b58:	2304      	movs	r3, #4
   19b5a:	4812      	ldr	r0, [pc, #72]	; (19ba4 <bt_smp_recv+0x140>)
   19b5c:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19b60:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19b64:	4809      	ldr	r0, [pc, #36]	; (19b8c <bt_smp_recv+0x128>)
   19b66:	f842 3f10 	str.w	r3, [r2, #16]!
   19b6a:	f013 fd37 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   19b6e:	210a      	movs	r1, #10
   19b70:	46ad      	mov	sp, r5
   19b72:	e7ca      	b.n	19b0a <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   19b74:	4629      	mov	r1, r5
   19b76:	4620      	mov	r0, r4
   19b78:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   19b7c:	4798      	blx	r3
	if (err) {
   19b7e:	4601      	mov	r1, r0
   19b80:	2800      	cmp	r0, #0
   19b82:	d082      	beq.n	19a8a <bt_smp_recv+0x26>
   19b84:	e7c1      	b.n	19b0a <bt_smp_recv+0xa6>
   19b86:	bf00      	nop
   19b88:	00036152 	.word	0x00036152
   19b8c:	000314fc 	.word	0x000314fc
   19b90:	0003616d 	.word	0x0003616d
   19b94:	0003619e 	.word	0x0003619e
   19b98:	0003216c 	.word	0x0003216c
   19b9c:	000361c0 	.word	0x000361c0
   19ba0:	000361da 	.word	0x000361da
   19ba4:	00035aa6 	.word	0x00035aa6

00019ba8 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   19ba8:	4b0c      	ldr	r3, [pc, #48]	; (19bdc <bt_smp_pkey_ready+0x34>)
{
   19baa:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   19bac:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   19bae:	b918      	cbnz	r0, 19bb8 <bt_smp_pkey_ready+0x10>
}
   19bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19bb4:	f7fe bf10 	b.w	189d8 <bt_smp_pkey_ready.part.0>
	z_impl_k_sem_give(sem);
   19bb8:	4809      	ldr	r0, [pc, #36]	; (19be0 <bt_smp_pkey_ready+0x38>)
   19bba:	f00b fcf1 	bl	255a0 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19bbe:	4b09      	ldr	r3, [pc, #36]	; (19be4 <bt_smp_pkey_ready+0x3c>)
		err = smp_public_key_periph(smp);
   19bc0:	1f1c      	subs	r4, r3, #4
   19bc2:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   19bc6:	065b      	lsls	r3, r3, #25
   19bc8:	d507      	bpl.n	19bda <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   19bca:	4620      	mov	r0, r4
   19bcc:	f7ff f870 	bl	18cb0 <smp_public_key_periph>
		if (err) {
   19bd0:	4601      	mov	r1, r0
   19bd2:	b110      	cbz	r0, 19bda <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   19bd4:	4620      	mov	r0, r4
   19bd6:	f7ff feeb 	bl	199b0 <smp_error>
}
   19bda:	bd10      	pop	{r4, pc}
   19bdc:	20021728 	.word	0x20021728
   19be0:	20008c34 	.word	0x20008c34
   19be4:	20009f7c 	.word	0x20009f7c

00019be8 <smp_ident_addr_info>:
{
   19be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19bec:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19bee:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   19bf2:	f8d1 800c 	ldr.w	r8, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19bf6:	f023 0302 	bic.w	r3, r3, #2
   19bfa:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   19bfe:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19c02:	f898 3000 	ldrb.w	r3, [r8]
{
   19c06:	4604      	mov	r4, r0
   19c08:	af00      	add	r7, sp, #0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19c0a:	f106 0990 	add.w	r9, r6, #144	; 0x90
   19c0e:	b3ab      	cbz	r3, 19c7c <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   19c10:	f898 3006 	ldrb.w	r3, [r8, #6]
   19c14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19c18:	2bc0      	cmp	r3, #192	; 0xc0
   19c1a:	d02f      	beq.n	19c7c <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   19c1c:	4640      	mov	r0, r8
   19c1e:	f7f7 ff31 	bl	11a84 <bt_addr_le_str>
   19c22:	466e      	mov	r6, sp
   19c24:	b088      	sub	sp, #32
   19c26:	466c      	mov	r4, sp
   19c28:	f44f 7a00 	mov.w	sl, #512	; 0x200
   19c2c:	4625      	mov	r5, r4
   19c2e:	4b65      	ldr	r3, [pc, #404]	; (19dc4 <smp_ident_addr_info+0x1dc>)
   19c30:	f8df 8194 	ldr.w	r8, [pc, #404]	; 19dc8 <smp_ident_addr_info+0x1e0>
   19c34:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19c38:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19c3c:	f845 8f10 	str.w	r8, [r5, #16]!
   19c40:	462a      	mov	r2, r5
   19c42:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19c46:	4861      	ldr	r0, [pc, #388]	; (19dcc <smp_ident_addr_info+0x1e4>)
   19c48:	f013 fcc8 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19c4c:	4648      	mov	r0, r9
   19c4e:	46b5      	mov	sp, r6
   19c50:	f7f7 ff18 	bl	11a84 <bt_addr_le_str>
   19c54:	46a5      	mov	sp, r4
   19c56:	4b5e      	ldr	r3, [pc, #376]	; (19dd0 <smp_ident_addr_info+0x1e8>)
   19c58:	462a      	mov	r2, r5
   19c5a:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19c5e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19c62:	485a      	ldr	r0, [pc, #360]	; (19dcc <smp_ident_addr_info+0x1e4>)
   19c64:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19c68:	f8c4 8010 	str.w	r8, [r4, #16]
   19c6c:	f013 fcb6 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   19c70:	200a      	movs	r0, #10
   19c72:	46b5      	mov	sp, r6
}
   19c74:	3718      	adds	r7, #24
   19c76:	46bd      	mov	sp, r7
   19c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   19c7c:	2207      	movs	r2, #7
   19c7e:	4641      	mov	r1, r8
   19c80:	4648      	mov	r0, r9
   19c82:	f016 fc50 	bl	30526 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   19c86:	b168      	cbz	r0, 19ca4 <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   19c88:	4641      	mov	r1, r8
   19c8a:	7a30      	ldrb	r0, [r6, #8]
   19c8c:	f000 fc66 	bl	1a55c <bt_keys_find_addr>
		if (keys) {
   19c90:	4605      	mov	r5, r0
   19c92:	b138      	cbz	r0, 19ca4 <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   19c94:	4601      	mov	r1, r0
   19c96:	4620      	mov	r0, r4
   19c98:	f013 fc4e 	bl	2d538 <update_keys_check>
   19c9c:	b320      	cbz	r0, 19ce8 <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   19c9e:	4628      	mov	r0, r5
   19ca0:	f000 fcbc 	bl	1a61c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19ca4:	210d      	movs	r1, #13
   19ca6:	1d20      	adds	r0, r4, #4
   19ca8:	f013 fc40 	bl	2d52c <atomic_test_bit>
   19cac:	2800      	cmp	r0, #0
   19cae:	d078      	beq.n	19da2 <smp_ident_addr_info+0x1ba>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19cb0:	464a      	mov	r2, r9
   19cb2:	2002      	movs	r0, #2
   19cb4:	7a31      	ldrb	r1, [r6, #8]
   19cb6:	f000 fc8d 	bl	1a5d4 <bt_keys_get_type>
		if (!keys) {
   19cba:	4605      	mov	r5, r0
   19cbc:	b9b0      	cbnz	r0, 19cec <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19cbe:	4648      	mov	r0, r9
   19cc0:	f7f7 fee0 	bl	11a84 <bt_addr_le_str>
   19cc4:	466c      	mov	r4, sp
   19cc6:	b088      	sub	sp, #32
   19cc8:	466a      	mov	r2, sp
   19cca:	4b42      	ldr	r3, [pc, #264]	; (19dd4 <smp_ident_addr_info+0x1ec>)
   19ccc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19cd0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
   19cd8:	8393      	strh	r3, [r2, #28]
   19cda:	4b3b      	ldr	r3, [pc, #236]	; (19dc8 <smp_ident_addr_info+0x1e0>)
   19cdc:	483b      	ldr	r0, [pc, #236]	; (19dcc <smp_ident_addr_info+0x1e4>)
   19cde:	f842 3f10 	str.w	r3, [r2, #16]!
   19ce2:	f013 fc7b 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   19ce6:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   19ce8:	2008      	movs	r0, #8
   19cea:	e7c3      	b.n	19c74 <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19cec:	78f3      	ldrb	r3, [r6, #3]
   19cee:	bb9b      	cbnz	r3, 19d58 <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   19cf0:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19cf4:	781a      	ldrb	r2, [r3, #0]
   19cf6:	2a01      	cmp	r2, #1
   19cf8:	d11e      	bne.n	19d38 <smp_ident_addr_info+0x150>
		if (bt_addr_le_is_rpa(dst)) {
   19cfa:	799a      	ldrb	r2, [r3, #6]
   19cfc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19d00:	2a40      	cmp	r2, #64	; 0x40
   19d02:	d119      	bne.n	19d38 <smp_ident_addr_info+0x150>
   19d04:	f8d3 2001 	ldr.w	r2, [r3, #1]
   19d08:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   19d0c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   19d10:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19d12:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   19d16:	b17b      	cbz	r3, 19d38 <smp_ident_addr_info+0x150>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   19d18:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   19d1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19d20:	2bc0      	cmp	r3, #192	; 0xc0
   19d22:	d009      	beq.n	19d38 <smp_ident_addr_info+0x150>
				bt_addr_le_copy(&keys->addr, &req->addr);
   19d24:	4641      	mov	r1, r8
   19d26:	1c68      	adds	r0, r5, #1
   19d28:	f013 fc32 	bl	2d590 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   19d2c:	4648      	mov	r0, r9
   19d2e:	f013 fc2f 	bl	2d590 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   19d32:	4630      	mov	r0, r6
   19d34:	f7fb faac 	bl	15290 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   19d38:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19d3c:	079a      	lsls	r2, r3, #30
   19d3e:	d50e      	bpl.n	19d5e <smp_ident_addr_info+0x176>
   19d40:	4925      	ldr	r1, [pc, #148]	; (19dd8 <smp_ident_addr_info+0x1f0>)
   19d42:	f640 6363 	movw	r3, #3683	; 0xe63
   19d46:	4a25      	ldr	r2, [pc, #148]	; (19ddc <smp_ident_addr_info+0x1f4>)
   19d48:	4825      	ldr	r0, [pc, #148]	; (19de0 <smp_ident_addr_info+0x1f8>)
   19d4a:	f010 fca2 	bl	2a692 <assert_print>
   19d4e:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19d52:	4822      	ldr	r0, [pc, #136]	; (19ddc <smp_ident_addr_info+0x1f4>)
   19d54:	f010 fc96 	bl	2a684 <assert_post_action>
			dst = &conn->le.init_addr;
   19d58:	f106 0397 	add.w	r3, r6, #151	; 0x97
   19d5c:	e7ca      	b.n	19cf4 <smp_ident_addr_info+0x10c>
	conflict = bt_id_find_conflict(new_bond);
   19d5e:	4628      	mov	r0, r5
   19d60:	f7f9 fdf8 	bl	13954 <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   19d64:	b160      	cbz	r0, 19d80 <smp_ident_addr_info+0x198>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   19d66:	4b1f      	ldr	r3, [pc, #124]	; (19de4 <smp_ident_addr_info+0x1fc>)
   19d68:	4818      	ldr	r0, [pc, #96]	; (19dcc <smp_ident_addr_info+0x1e4>)
   19d6a:	617b      	str	r3, [r7, #20]
   19d6c:	2302      	movs	r3, #2
   19d6e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19d72:	613b      	str	r3, [r7, #16]
   19d74:	f107 0210 	add.w	r2, r7, #16
   19d78:	f013 fc30 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19d7c:	2003      	movs	r0, #3
   19d7e:	e779      	b.n	19c74 <smp_ident_addr_info+0x8c>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19d80:	4628      	mov	r0, r5
   19d82:	f7f9 fde7 	bl	13954 <bt_id_find_conflict>
   19d86:	b148      	cbz	r0, 19d9c <smp_ident_addr_info+0x1b4>
   19d88:	4917      	ldr	r1, [pc, #92]	; (19de8 <smp_ident_addr_info+0x200>)
   19d8a:	f640 637f 	movw	r3, #3711	; 0xe7f
   19d8e:	4a13      	ldr	r2, [pc, #76]	; (19ddc <smp_ident_addr_info+0x1f4>)
   19d90:	4813      	ldr	r0, [pc, #76]	; (19de0 <smp_ident_addr_info+0x1f8>)
   19d92:	f010 fc7e 	bl	2a692 <assert_print>
   19d96:	f640 617f 	movw	r1, #3711	; 0xe7f
   19d9a:	e7da      	b.n	19d52 <smp_ident_addr_info+0x16a>
	bt_id_add(new_bond);
   19d9c:	4628      	mov	r0, r5
   19d9e:	f7f9 fde9 	bl	13974 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19da2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19da6:	075b      	lsls	r3, r3, #29
   19da8:	d503      	bpl.n	19db2 <smp_ident_addr_info+0x1ca>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19daa:	210a      	movs	r1, #10
   19dac:	4620      	mov	r0, r4
   19dae:	f013 fc23 	bl	2d5f8 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19db2:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19db6:	b109      	cbz	r1, 19dbc <smp_ident_addr_info+0x1d4>
	return 0;
   19db8:	2000      	movs	r0, #0
   19dba:	e75b      	b.n	19c74 <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   19dbc:	4620      	mov	r0, r4
   19dbe:	f7ff fd73 	bl	198a8 <smp_pairing_complete>
   19dc2:	e7f9      	b.n	19db8 <smp_ident_addr_info+0x1d0>
   19dc4:	000361f5 	.word	0x000361f5
   19dc8:	01000003 	.word	0x01000003
   19dcc:	000314fc 	.word	0x000314fc
   19dd0:	000362dc 	.word	0x000362dc
   19dd4:	00035fd1 	.word	0x00035fd1
   19dd8:	00036238 	.word	0x00036238
   19ddc:	00036209 	.word	0x00036209
   19de0:	00032629 	.word	0x00032629
   19de4:	00036253 	.word	0x00036253
   19de8:	0003628e 	.word	0x0003628e

00019dec <smp_central_ident>:
{
   19dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19df0:	460b      	mov	r3, r1
   19df2:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19df4:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   19df8:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19dfa:	210d      	movs	r1, #13
   19dfc:	3004      	adds	r0, #4
   19dfe:	f013 fb95 	bl	2d52c <atomic_test_bit>
   19e02:	b358      	cbz	r0, 19e5c <smp_central_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19e04:	f108 0690 	add.w	r6, r8, #144	; 0x90
   19e08:	4632      	mov	r2, r6
   19e0a:	2004      	movs	r0, #4
   19e0c:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   19e10:	68dd      	ldr	r5, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19e12:	f000 fbdf 	bl	1a5d4 <bt_keys_get_type>
		if (!keys) {
   19e16:	b9c0      	cbnz	r0, 19e4a <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19e18:	4630      	mov	r0, r6
   19e1a:	f7f7 fe33 	bl	11a84 <bt_addr_le_str>
   19e1e:	466c      	mov	r4, sp
   19e20:	b088      	sub	sp, #32
   19e22:	466a      	mov	r2, sp
   19e24:	4b1a      	ldr	r3, [pc, #104]	; (19e90 <smp_central_ident+0xa4>)
   19e26:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19e2a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
   19e32:	8393      	strh	r3, [r2, #28]
   19e34:	4b17      	ldr	r3, [pc, #92]	; (19e94 <smp_central_ident+0xa8>)
   19e36:	4818      	ldr	r0, [pc, #96]	; (19e98 <smp_central_ident+0xac>)
   19e38:	f842 3f10 	str.w	r3, [r2, #16]!
   19e3c:	f013 fbce 	bl	2d5dc <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   19e40:	2008      	movs	r0, #8
   19e42:	46a5      	mov	sp, r4
}
   19e44:	46bd      	mov	sp, r7
   19e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e4a:	462a      	mov	r2, r5
   19e4c:	f832 3b02 	ldrh.w	r3, [r2], #2
   19e50:	8303      	strh	r3, [r0, #24]
   19e52:	f8d5 3002 	ldr.w	r3, [r5, #2]
   19e56:	6103      	str	r3, [r0, #16]
   19e58:	6853      	ldr	r3, [r2, #4]
   19e5a:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   19e5c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19e60:	f023 0201 	bic.w	r2, r3, #1
   19e64:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19e68:	079a      	lsls	r2, r3, #30
   19e6a:	d508      	bpl.n	19e7e <smp_central_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19e6c:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19e6e:	4620      	mov	r0, r4
   19e70:	f013 fbc2 	bl	2d5f8 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19e74:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19e78:	b129      	cbz	r1, 19e86 <smp_central_ident+0x9a>
	return 0;
   19e7a:	2000      	movs	r0, #0
   19e7c:	e7e2      	b.n	19e44 <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19e7e:	075b      	lsls	r3, r3, #29
   19e80:	d5f8      	bpl.n	19e74 <smp_central_ident+0x88>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19e82:	210a      	movs	r1, #10
   19e84:	e7f3      	b.n	19e6e <smp_central_ident+0x82>
		smp_pairing_complete(smp, 0);
   19e86:	4620      	mov	r0, r4
   19e88:	f7ff fd0e 	bl	198a8 <smp_pairing_complete>
   19e8c:	e7f5      	b.n	19e7a <smp_central_ident+0x8e>
   19e8e:	bf00      	nop
   19e90:	00035fd1 	.word	0x00035fd1
   19e94:	01000003 	.word	0x01000003
   19e98:	000314fc 	.word	0x000314fc

00019e9c <smp_pairing_failed>:
{
   19e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ea0:	460e      	mov	r6, r1
   19ea2:	af00      	add	r7, sp, #0
   19ea4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19ea6:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19eaa:	f7fe fd3b 	bl	18924 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   19eae:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19eb0:	46e9      	mov	r9, sp
   19eb2:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19eb4:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19eb6:	466a      	mov	r2, sp
   19eb8:	7833      	ldrb	r3, [r6, #0]
   19eba:	4914      	ldr	r1, [pc, #80]	; (19f0c <smp_pairing_failed+0x70>)
   19ebc:	4814      	ldr	r0, [pc, #80]	; (19f10 <smp_pairing_failed+0x74>)
   19ebe:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19ec2:	2303      	movs	r3, #3
   19ec4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19ec8:	f842 3f10 	str.w	r3, [r2, #16]!
   19ecc:	f013 fb86 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   19ed0:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19ed2:	f104 0904 	add.w	r9, r4, #4
   19ed6:	210a      	movs	r1, #10
   19ed8:	4648      	mov	r0, r9
   19eda:	f013 fc24 	bl	2d726 <atomic_test_and_clear_bit>
   19ede:	b140      	cbz	r0, 19ef2 <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19ee0:	b975      	cbnz	r5, 19f00 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   19ee2:	4620      	mov	r0, r4
   19ee4:	7831      	ldrb	r1, [r6, #0]
   19ee6:	f7ff fcdf 	bl	198a8 <smp_pairing_complete>
}
   19eea:	2000      	movs	r0, #0
   19eec:	46bd      	mov	sp, r7
   19eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   19ef2:	210b      	movs	r1, #11
   19ef4:	4648      	mov	r0, r9
   19ef6:	f013 fc16 	bl	2d726 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19efa:	2800      	cmp	r0, #0
   19efc:	d1f0      	bne.n	19ee0 <smp_pairing_failed+0x44>
   19efe:	e7f0      	b.n	19ee2 <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19f00:	692b      	ldr	r3, [r5, #16]
   19f02:	2b00      	cmp	r3, #0
   19f04:	d0ed      	beq.n	19ee2 <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   19f06:	4640      	mov	r0, r8
   19f08:	4798      	blx	r3
   19f0a:	e7ea      	b.n	19ee2 <smp_pairing_failed+0x46>
   19f0c:	000362ad 	.word	0x000362ad
   19f10:	000314fc 	.word	0x000314fc

00019f14 <bt_smp_encrypt_change>:
{
   19f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f18:	b08f      	sub	sp, #60	; 0x3c
	struct bt_conn *conn = chan->conn;
   19f1a:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f1c:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   19f20:	4604      	mov	r4, r0
   19f22:	4688      	mov	r8, r1
   19f24:	af00      	add	r7, sp, #0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f26:	2101      	movs	r1, #1
   19f28:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   19f2a:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f2e:	f013 fbfa 	bl	2d726 <atomic_test_and_clear_bit>
   19f32:	b338      	cbz	r0, 19f84 <bt_smp_encrypt_change+0x70>
	if (hci_status) {
   19f34:	f1b8 0f00 	cmp.w	r8, #0
   19f38:	d019      	beq.n	19f6e <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19f3a:	2103      	movs	r1, #3
   19f3c:	4630      	mov	r0, r6
   19f3e:	f013 faf5 	bl	2d52c <atomic_test_bit>
   19f42:	b1f8      	cbz	r0, 19f84 <bt_smp_encrypt_change+0x70>
			uint8_t smp_err = smp_err_get(
   19f44:	4640      	mov	r0, r8
   19f46:	f7f8 fee5 	bl	12d14 <bt_security_err_get>
	switch (auth_err) {
   19f4a:	3801      	subs	r0, #1
   19f4c:	b2c0      	uxtb	r0, r0
   19f4e:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   19f50:	bf8c      	ite	hi
   19f52:	2400      	movhi	r4, #0
   19f54:	4b75      	ldrls	r3, [pc, #468]	; (1a12c <bt_smp_encrypt_change+0x218>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19f56:	f04f 0102 	mov.w	r1, #2
   19f5a:	bf98      	it	ls
   19f5c:	5c1c      	ldrbls	r4, [r3, r0]
   19f5e:	4630      	mov	r0, r6
   19f60:	f013 fb4a 	bl	2d5f8 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   19f64:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   19f66:	4628      	mov	r0, r5
   19f68:	f7ff fc9e 	bl	198a8 <smp_pairing_complete>
   19f6c:	e00a      	b.n	19f84 <bt_smp_encrypt_change+0x70>
	if (!conn->encrypt) {
   19f6e:	f899 300b 	ldrb.w	r3, [r9, #11]
   19f72:	b13b      	cbz	r3, 19f84 <bt_smp_encrypt_change+0x70>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19f74:	2103      	movs	r1, #3
   19f76:	4630      	mov	r0, r6
   19f78:	f013 fad8 	bl	2d52c <atomic_test_bit>
   19f7c:	b930      	cbnz	r0, 19f8c <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   19f7e:	4628      	mov	r0, r5
   19f80:	f013 fbe3 	bl	2d74a <smp_reset>
}
   19f84:	373c      	adds	r7, #60	; 0x3c
   19f86:	46bd      	mov	sp, r7
   19f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19f8c:	2105      	movs	r1, #5
   19f8e:	4630      	mov	r0, r6
   19f90:	f013 facc 	bl	2d52c <atomic_test_bit>
   19f94:	b1b8      	cbz	r0, 19fc6 <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   19f96:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19f9a:	071a      	lsls	r2, r3, #28
   19f9c:	d507      	bpl.n	19fae <bt_smp_encrypt_change+0x9a>
   19f9e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19fa2:	071b      	lsls	r3, r3, #28
   19fa4:	d503      	bpl.n	19fae <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   19fa6:	2111      	movs	r1, #17
   19fa8:	4630      	mov	r0, r6
   19faa:	f013 fb25 	bl	2d5f8 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   19fae:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19fb2:	f023 0308 	bic.w	r3, r3, #8
   19fb6:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   19fba:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19fbe:	f023 0308 	bic.w	r3, r3, #8
   19fc2:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   19fc6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19fca:	07d8      	lsls	r0, r3, #31
   19fcc:	d522      	bpl.n	1a014 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   19fce:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19fd0:	4628      	mov	r0, r5
   19fd2:	f013 fb11 	bl	2d5f8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19fd6:	2102      	movs	r1, #2
   19fd8:	4630      	mov	r0, r6
   19fda:	f013 fb0d 	bl	2d5f8 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   19fde:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   19fe0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   19fe4:	b9f2      	cbnz	r2, 1a024 <bt_smp_encrypt_change+0x110>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   19fe6:	f103 0090 	add.w	r0, r3, #144	; 0x90
   19fea:	f7f7 fd4b 	bl	11a84 <bt_addr_le_str>
   19fee:	466c      	mov	r4, sp
   19ff0:	b088      	sub	sp, #32
   19ff2:	466a      	mov	r2, sp
   19ff4:	4b4e      	ldr	r3, [pc, #312]	; (1a130 <bt_smp_encrypt_change+0x21c>)
   19ff6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19ffa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a002:	8393      	strh	r3, [r2, #28]
   1a004:	4b4b      	ldr	r3, [pc, #300]	; (1a134 <bt_smp_encrypt_change+0x220>)
   1a006:	484c      	ldr	r0, [pc, #304]	; (1a138 <bt_smp_encrypt_change+0x224>)
   1a008:	f842 3f10 	str.w	r3, [r2, #16]!
   1a00c:	f013 fae6 	bl	2d5dc <z_log_msg_static_create.constprop.0>
   1a010:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1a012:	e7b7      	b.n	19f84 <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1a014:	0799      	lsls	r1, r3, #30
   1a016:	d501      	bpl.n	1a01c <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1a018:	2108      	movs	r1, #8
   1a01a:	e7d9      	b.n	19fd0 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1a01c:	075a      	lsls	r2, r3, #29
   1a01e:	d5da      	bpl.n	19fd6 <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a020:	210a      	movs	r1, #10
   1a022:	e7d5      	b.n	19fd0 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a024:	2105      	movs	r1, #5
   1a026:	f013 fa81 	bl	2d52c <atomic_test_bit>
   1a02a:	b9c0      	cbnz	r0, 1a05e <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1a02c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1a030:	07db      	lsls	r3, r3, #31
   1a032:	d514      	bpl.n	1a05e <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   1a034:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a036:	211a      	movs	r1, #26
   1a038:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
   1a03c:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a040:	f7fa fa6c 	bl	1451c <bt_rand>
   1a044:	4682      	mov	sl, r0
   1a046:	b178      	cbz	r0, 1a068 <bt_smp_encrypt_change+0x154>
			LOG_ERR("Unable to get random bytes");
   1a048:	4b3c      	ldr	r3, [pc, #240]	; (1a13c <bt_smp_encrypt_change+0x228>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1a04a:	617b      	str	r3, [r7, #20]
   1a04c:	2302      	movs	r3, #2
   1a04e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a052:	4839      	ldr	r0, [pc, #228]	; (1a138 <bt_smp_encrypt_change+0x224>)
   1a054:	613b      	str	r3, [r7, #16]
   1a056:	f107 0210 	add.w	r2, r7, #16
   1a05a:	f013 fabf 	bl	2d5dc <z_log_msg_static_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1a05e:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1a062:	2900      	cmp	r1, #0
   1a064:	d18e      	bne.n	19f84 <bt_smp_encrypt_change+0x70>
   1a066:	e77e      	b.n	19f66 <bt_smp_encrypt_change+0x52>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1a068:	2106      	movs	r1, #6
   1a06a:	4628      	mov	r0, r5
   1a06c:	f013 fad4 	bl	2d618 <smp_create_pdu.constprop.0>
		if (!buf) {
   1a070:	4681      	mov	r9, r0
   1a072:	b908      	cbnz	r0, 1a078 <bt_smp_encrypt_change+0x164>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1a074:	4b32      	ldr	r3, [pc, #200]	; (1a140 <bt_smp_encrypt_change+0x22c>)
   1a076:	e7e8      	b.n	1a04a <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   1a078:	2110      	movs	r1, #16
   1a07a:	300c      	adds	r0, #12
   1a07c:	f001 fb92 	bl	1b7a4 <net_buf_simple_add>
   1a080:	f898 200c 	ldrb.w	r2, [r8, #12]
   1a084:	f107 011c 	add.w	r1, r7, #28
   1a088:	4683      	mov	fp, r0
   1a08a:	f016 fa5c 	bl	30546 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1a08e:	f898 000c 	ldrb.w	r0, [r8, #12]
   1a092:	280f      	cmp	r0, #15
   1a094:	d805      	bhi.n	1a0a2 <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   1a096:	f1c0 0210 	rsb	r2, r0, #16
   1a09a:	4651      	mov	r1, sl
   1a09c:	4458      	add	r0, fp
   1a09e:	f016 fa8c 	bl	305ba <memset>
		smp_send(smp, buf, NULL, NULL);
   1a0a2:	4649      	mov	r1, r9
   1a0a4:	2200      	movs	r2, #0
   1a0a6:	4628      	mov	r0, r5
   1a0a8:	f013 fa7b 	bl	2d5a2 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1a0ac:	2107      	movs	r1, #7
   1a0ae:	4628      	mov	r0, r5
   1a0b0:	f013 fab2 	bl	2d618 <smp_create_pdu.constprop.0>
		if (!buf) {
   1a0b4:	4681      	mov	r9, r0
   1a0b6:	b908      	cbnz	r0, 1a0bc <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1a0b8:	4b22      	ldr	r3, [pc, #136]	; (1a144 <bt_smp_encrypt_change+0x230>)
   1a0ba:	e7c6      	b.n	1a04a <bt_smp_encrypt_change+0x136>
   1a0bc:	210a      	movs	r1, #10
   1a0be:	300c      	adds	r0, #12
   1a0c0:	f001 fb70 	bl	1b7a4 <net_buf_simple_add>
   1a0c4:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a0c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1a0ca:	ca03      	ldmia	r2!, {r0, r1}
   1a0cc:	f8c3 0002 	str.w	r0, [r3, #2]
   1a0d0:	f8c3 1006 	str.w	r1, [r3, #6]
   1a0d4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
		smp_send(smp, buf, smp_ident_sent, NULL);
   1a0d6:	4649      	mov	r1, r9
   1a0d8:	4628      	mov	r0, r5
   1a0da:	801a      	strh	r2, [r3, #0]
   1a0dc:	4a1a      	ldr	r2, [pc, #104]	; (1a148 <bt_smp_encrypt_change+0x234>)
   1a0de:	f013 fa60 	bl	2d5a2 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a0e2:	4630      	mov	r0, r6
   1a0e4:	210d      	movs	r1, #13
   1a0e6:	f013 fa21 	bl	2d52c <atomic_test_bit>
   1a0ea:	f107 062c 	add.w	r6, r7, #44	; 0x2c
   1a0ee:	2800      	cmp	r0, #0
   1a0f0:	d0b5      	beq.n	1a05e <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1a0f2:	2101      	movs	r1, #1
   1a0f4:	4640      	mov	r0, r8
   1a0f6:	f000 fa55 	bl	1a5a4 <bt_keys_add_type>
   1a0fa:	f107 031c 	add.w	r3, r7, #28
   1a0fe:	f108 0c4a 	add.w	ip, r8, #74	; 0x4a
   1a102:	461a      	mov	r2, r3
   1a104:	ca03      	ldmia	r2!, {r0, r1}
   1a106:	42b2      	cmp	r2, r6
   1a108:	f8cc 0000 	str.w	r0, [ip]
   1a10c:	f8cc 1004 	str.w	r1, [ip, #4]
   1a110:	4613      	mov	r3, r2
   1a112:	f10c 0c08 	add.w	ip, ip, #8
   1a116:	d1f4      	bne.n	1a102 <bt_smp_encrypt_change+0x1ee>
   1a118:	4633      	mov	r3, r6
   1a11a:	cb03      	ldmia	r3!, {r0, r1}
   1a11c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   1a11e:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   1a122:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   1a126:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   1a12a:	e798      	b.n	1a05e <bt_smp_encrypt_change+0x14a>
   1a12c:	00036379 	.word	0x00036379
   1a130:	000362cf 	.word	0x000362cf
   1a134:	01000003 	.word	0x01000003
   1a138:	000314fc 	.word	0x000314fc
   1a13c:	000362e4 	.word	0x000362e4
   1a140:	000362ff 	.word	0x000362ff
   1a144:	00036326 	.word	0x00036326
   1a148:	0001a189 	.word	0x0001a189

0001a14c <smp_timeout>:
{
   1a14c:	b510      	push	{r4, lr}
   1a14e:	4604      	mov	r4, r0
   1a150:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   1a152:	4b0b      	ldr	r3, [pc, #44]	; (1a180 <smp_timeout+0x34>)
   1a154:	aa04      	add	r2, sp, #16
   1a156:	9305      	str	r3, [sp, #20]
   1a158:	2302      	movs	r3, #2
   1a15a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a15e:	4809      	ldr	r0, [pc, #36]	; (1a184 <smp_timeout+0x38>)
   1a160:	9304      	str	r3, [sp, #16]
   1a162:	f013 fa3b 	bl	2d5dc <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1a166:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1a16a:	2108      	movs	r1, #8
   1a16c:	f7ff fb9c 	bl	198a8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a170:	2104      	movs	r1, #4
   1a172:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   1a176:	b006      	add	sp, #24
   1a178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a17c:	f013 ba3c 	b.w	2d5f8 <atomic_set_bit>
   1a180:	0003634e 	.word	0x0003634e
   1a184:	000314fc 	.word	0x000314fc

0001a188 <smp_ident_sent>:
{
   1a188:	b508      	push	{r3, lr}
	if (!err) {
   1a18a:	bb1a      	cbnz	r2, 1a1d4 <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a18c:	7883      	ldrb	r3, [r0, #2]
   1a18e:	2b01      	cmp	r3, #1
   1a190:	d120      	bne.n	1a1d4 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1a192:	2106      	movs	r1, #6
   1a194:	f012 fb35 	bl	2c802 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1a198:	b970      	cbnz	r0, 1a1b8 <smp_ident_sent+0x30>
   1a19a:	490f      	ldr	r1, [pc, #60]	; (1a1d8 <smp_ident_sent+0x50>)
   1a19c:	f240 2365 	movw	r3, #613	; 0x265
   1a1a0:	4a0e      	ldr	r2, [pc, #56]	; (1a1dc <smp_ident_sent+0x54>)
   1a1a2:	480f      	ldr	r0, [pc, #60]	; (1a1e0 <smp_ident_sent+0x58>)
   1a1a4:	f010 fa75 	bl	2a692 <assert_print>
   1a1a8:	480e      	ldr	r0, [pc, #56]	; (1a1e4 <smp_ident_sent+0x5c>)
   1a1aa:	f010 fa72 	bl	2a692 <assert_print>
   1a1ae:	f240 2165 	movw	r1, #613	; 0x265
   1a1b2:	480a      	ldr	r0, [pc, #40]	; (1a1dc <smp_ident_sent+0x54>)
   1a1b4:	f010 fa66 	bl	2a684 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1a1b8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1a1bc:	f023 0301 	bic.w	r3, r3, #1
   1a1c0:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1a1c4:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1a1c8:	b921      	cbnz	r1, 1a1d4 <smp_ident_sent+0x4c>
}
   1a1ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1a1ce:	38ec      	subs	r0, #236	; 0xec
   1a1d0:	f7ff bb6a 	b.w	198a8 <smp_pairing_complete>
}
   1a1d4:	bd08      	pop	{r3, pc}
   1a1d6:	bf00      	nop
   1a1d8:	00035919 	.word	0x00035919
   1a1dc:	00036209 	.word	0x00036209
   1a1e0:	00032629 	.word	0x00032629
   1a1e4:	0003635a 	.word	0x0003635a

0001a1e8 <bt_smp_update_keys>:
{
   1a1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1ec:	af00      	add	r7, sp, #0
   1a1ee:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1a1f0:	f013 f9f7 	bl	2d5e2 <smp_chan_get>
	if (!smp) {
   1a1f4:	4605      	mov	r5, r0
   1a1f6:	b360      	cbz	r0, 1a252 <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a1f8:	1d06      	adds	r6, r0, #4
   1a1fa:	2103      	movs	r1, #3
   1a1fc:	4630      	mov	r0, r6
   1a1fe:	f013 f995 	bl	2d52c <atomic_test_bit>
   1a202:	b330      	cbz	r0, 1a252 <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   1a204:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1a208:	b108      	cbz	r0, 1a20e <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1a20a:	f000 fa07 	bl	1a61c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a20e:	f104 0890 	add.w	r8, r4, #144	; 0x90
   1a212:	4641      	mov	r1, r8
   1a214:	7a20      	ldrb	r0, [r4, #8]
   1a216:	f000 f8db 	bl	1a3d0 <bt_keys_get_addr>
   1a21a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   1a21e:	b9d8      	cbnz	r0, 1a258 <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1a220:	4640      	mov	r0, r8
   1a222:	f7f7 fc2f 	bl	11a84 <bt_addr_le_str>
   1a226:	466c      	mov	r4, sp
   1a228:	b088      	sub	sp, #32
   1a22a:	466a      	mov	r2, sp
   1a22c:	4b3a      	ldr	r3, [pc, #232]	; (1a318 <bt_smp_update_keys+0x130>)
   1a22e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a232:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a236:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a23a:	8393      	strh	r3, [r2, #28]
   1a23c:	4b37      	ldr	r3, [pc, #220]	; (1a31c <bt_smp_update_keys+0x134>)
   1a23e:	4838      	ldr	r0, [pc, #224]	; (1a320 <bt_smp_update_keys+0x138>)
   1a240:	f842 3f10 	str.w	r3, [r2, #16]!
   1a244:	f013 f9ca 	bl	2d5dc <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a248:	2108      	movs	r1, #8
   1a24a:	46a5      	mov	sp, r4
   1a24c:	4628      	mov	r0, r5
   1a24e:	f7ff fbaf 	bl	199b0 <smp_error>
}
   1a252:	46bd      	mov	sp, r7
   1a254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1a258:	210e      	movs	r1, #14
   1a25a:	4630      	mov	r0, r6
   1a25c:	f013 f966 	bl	2d52c <atomic_test_bit>
   1a260:	b128      	cbz	r0, 1a26e <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1a262:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a266:	7b53      	ldrb	r3, [r2, #13]
   1a268:	f043 0302 	orr.w	r3, r3, #2
   1a26c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1a26e:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a270:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   1a274:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a276:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1a278:	d83a      	bhi.n	1a2f0 <bt_smp_update_keys+0x108>
   1a27a:	2a00      	cmp	r2, #0
   1a27c:	d03f      	beq.n	1a2fe <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1a27e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a282:	7b53      	ldrb	r3, [r2, #13]
   1a284:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a288:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1a28a:	7d2b      	ldrb	r3, [r5, #20]
   1a28c:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a28e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   1a292:	428b      	cmp	r3, r1
   1a294:	bf28      	it	cs
   1a296:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a298:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a29a:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a29c:	2105      	movs	r1, #5
   1a29e:	f013 f945 	bl	2d52c <atomic_test_bit>
   1a2a2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2a6:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a2a8:	b390      	cbz	r0, 1a310 <bt_smp_update_keys+0x128>
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2aa:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a2ae:	210d      	movs	r1, #13
   1a2b0:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2b2:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a2b4:	f013 f93a 	bl	2d52c <atomic_test_bit>
   1a2b8:	2800      	cmp	r0, #0
   1a2ba:	d0ca      	beq.n	1a252 <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1a2bc:	2120      	movs	r1, #32
   1a2be:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1a2c2:	f000 f96f 	bl	1a5a4 <bt_keys_add_type>
   1a2c6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1a2ca:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1a2ce:	331a      	adds	r3, #26
   1a2d0:	3557      	adds	r5, #87	; 0x57
   1a2d2:	f852 1b04 	ldr.w	r1, [r2], #4
   1a2d6:	42aa      	cmp	r2, r5
   1a2d8:	f843 1b04 	str.w	r1, [r3], #4
   1a2dc:	d1f9      	bne.n	1a2d2 <bt_smp_update_keys+0xea>
__ssp_bos_icheck3(memset, void *, int)
   1a2de:	2300      	movs	r3, #0
   1a2e0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a2e4:	6113      	str	r3, [r2, #16]
   1a2e6:	6153      	str	r3, [r2, #20]
   1a2e8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a2ec:	8313      	strh	r3, [r2, #24]
   1a2ee:	e7b0      	b.n	1a252 <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   1a2f0:	3a05      	subs	r2, #5
   1a2f2:	2a01      	cmp	r2, #1
   1a2f4:	d803      	bhi.n	1a2fe <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a2f6:	f043 0320 	orr.w	r3, r3, #32
   1a2fa:	734b      	strb	r3, [r1, #13]
   1a2fc:	e7bf      	b.n	1a27e <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1a2fe:	f023 0320 	bic.w	r3, r3, #32
   1a302:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a304:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a308:	7b53      	ldrb	r3, [r2, #13]
   1a30a:	f023 0301 	bic.w	r3, r3, #1
   1a30e:	e7bb      	b.n	1a288 <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1a310:	f022 0210 	bic.w	r2, r2, #16
   1a314:	735a      	strb	r2, [r3, #13]
   1a316:	e79c      	b.n	1a252 <bt_smp_update_keys+0x6a>
   1a318:	00035fd1 	.word	0x00035fd1
   1a31c:	01000003 	.word	0x01000003
   1a320:	000314fc 	.word	0x000314fc

0001a324 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1a324:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a326:	4b07      	ldr	r3, [pc, #28]	; (1a344 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1a328:	4807      	ldr	r0, [pc, #28]	; (1a348 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a32a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1a32e:	f003 0306 	and.w	r3, r3, #6
   1a332:	1f9a      	subs	r2, r3, #6
   1a334:	4253      	negs	r3, r2
   1a336:	4153      	adcs	r3, r2
   1a338:	4a04      	ldr	r2, [pc, #16]	; (1a34c <bt_smp_init+0x28>)
   1a33a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1a33c:	f7fa f918 	bl	14570 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1a340:	2000      	movs	r0, #0
   1a342:	bd08      	pop	{r3, pc}
   1a344:	20008000 	.word	0x20008000
   1a348:	20008554 	.word	0x20008554
   1a34c:	200223f8 	.word	0x200223f8

0001a350 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1a350:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a352:	b958      	cbnz	r0, 1a36c <id_add+0x1c>
   1a354:	4907      	ldr	r1, [pc, #28]	; (1a374 <id_add+0x24>)
   1a356:	4808      	ldr	r0, [pc, #32]	; (1a378 <id_add+0x28>)
   1a358:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1a35c:	4a07      	ldr	r2, [pc, #28]	; (1a37c <id_add+0x2c>)
   1a35e:	f010 f998 	bl	2a692 <assert_print>
   1a362:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1a366:	4805      	ldr	r0, [pc, #20]	; (1a37c <id_add+0x2c>)
   1a368:	f010 f98c 	bl	2a684 <assert_post_action>

	bt_id_add(keys);
}
   1a36c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1a370:	f7f9 bb00 	b.w	13974 <bt_id_add>
   1a374:	000363fa 	.word	0x000363fa
   1a378:	00032629 	.word	0x00032629
   1a37c:	000363ca 	.word	0x000363ca

0001a380 <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a380:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a382:	4c10      	ldr	r4, [pc, #64]	; (1a3c4 <bt_keys_get_addr.part.0+0x44>)
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a384:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a386:	f814 3b01 	ldrb.w	r3, [r4], #1
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a38a:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a38c:	4283      	cmp	r3, r0
   1a38e:	d007      	beq.n	1a3a0 <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1a390:	2207      	movs	r2, #7
   1a392:	490d      	ldr	r1, [pc, #52]	; (1a3c8 <bt_keys_get_addr.part.0+0x48>)
   1a394:	480d      	ldr	r0, [pc, #52]	; (1a3cc <bt_keys_get_addr.part.0+0x4c>)
   1a396:	f016 f8c6 	bl	30526 <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1a39a:	b148      	cbz	r0, 1a3b0 <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1a39c:	2000      	movs	r0, #0
}
   1a39e:	bd70      	pop	{r4, r5, r6, pc}
   1a3a0:	2207      	movs	r2, #7
   1a3a2:	4620      	mov	r0, r4
   1a3a4:	f016 f8bf 	bl	30526 <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3a8:	2800      	cmp	r0, #0
   1a3aa:	d1f1      	bne.n	1a390 <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1a3ac:	4805      	ldr	r0, [pc, #20]	; (1a3c4 <bt_keys_get_addr.part.0+0x44>)
   1a3ae:	e7f6      	b.n	1a39e <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1a3b0:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1a3b4:	682b      	ldr	r3, [r5, #0]
   1a3b6:	6023      	str	r3, [r4, #0]
   1a3b8:	88ab      	ldrh	r3, [r5, #4]
   1a3ba:	80a3      	strh	r3, [r4, #4]
   1a3bc:	79ab      	ldrb	r3, [r5, #6]
   1a3be:	71a3      	strb	r3, [r4, #6]
		return keys;
   1a3c0:	e7f4      	b.n	1a3ac <bt_keys_get_addr.part.0+0x2c>
   1a3c2:	bf00      	nop
   1a3c4:	2002172c 	.word	0x2002172c
   1a3c8:	00034568 	.word	0x00034568
   1a3cc:	2002172d 	.word	0x2002172d

0001a3d0 <bt_keys_get_addr>:
{
   1a3d0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a3d2:	b949      	cbnz	r1, 1a3e8 <bt_keys_get_addr+0x18>
   1a3d4:	4906      	ldr	r1, [pc, #24]	; (1a3f0 <bt_keys_get_addr+0x20>)
   1a3d6:	4807      	ldr	r0, [pc, #28]	; (1a3f4 <bt_keys_get_addr+0x24>)
   1a3d8:	2359      	movs	r3, #89	; 0x59
   1a3da:	4a07      	ldr	r2, [pc, #28]	; (1a3f8 <bt_keys_get_addr+0x28>)
   1a3dc:	f010 f959 	bl	2a692 <assert_print>
   1a3e0:	2159      	movs	r1, #89	; 0x59
   1a3e2:	4805      	ldr	r0, [pc, #20]	; (1a3f8 <bt_keys_get_addr+0x28>)
   1a3e4:	f010 f94e 	bl	2a684 <assert_post_action>
}
   1a3e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a3ec:	f7ff bfc8 	b.w	1a380 <bt_keys_get_addr.part.0>
   1a3f0:	0003640e 	.word	0x0003640e
   1a3f4:	00032629 	.word	0x00032629
   1a3f8:	000363ca 	.word	0x000363ca

0001a3fc <bt_keys_foreach_type>:
{
   1a3fc:	460b      	mov	r3, r1
   1a3fe:	b510      	push	{r4, lr}
   1a400:	4611      	mov	r1, r2
   1a402:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1a404:	b963      	cbnz	r3, 1a420 <bt_keys_foreach_type+0x24>
   1a406:	4909      	ldr	r1, [pc, #36]	; (1a42c <bt_keys_foreach_type+0x30>)
   1a408:	4809      	ldr	r0, [pc, #36]	; (1a430 <bt_keys_foreach_type+0x34>)
   1a40a:	23b3      	movs	r3, #179	; 0xb3
   1a40c:	4a09      	ldr	r2, [pc, #36]	; (1a434 <bt_keys_foreach_type+0x38>)
   1a40e:	f010 f940 	bl	2a692 <assert_print>
   1a412:	21b3      	movs	r1, #179	; 0xb3
   1a414:	4807      	ldr	r0, [pc, #28]	; (1a434 <bt_keys_foreach_type+0x38>)
   1a416:	f010 f935 	bl	2a684 <assert_post_action>
}
   1a41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1a41e:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1a420:	4805      	ldr	r0, [pc, #20]	; (1a438 <bt_keys_foreach_type+0x3c>)
   1a422:	89c2      	ldrh	r2, [r0, #14]
   1a424:	4222      	tst	r2, r4
   1a426:	d1f8      	bne.n	1a41a <bt_keys_foreach_type+0x1e>
}
   1a428:	bd10      	pop	{r4, pc}
   1a42a:	bf00      	nop
   1a42c:	00036422 	.word	0x00036422
   1a430:	00032629 	.word	0x00032629
   1a434:	000363ca 	.word	0x000363ca
   1a438:	2002172c 	.word	0x2002172c

0001a43c <keys_commit>:

static int keys_commit(void)
{
   1a43c:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1a43e:	2200      	movs	r2, #0
   1a440:	2002      	movs	r0, #2
   1a442:	4902      	ldr	r1, [pc, #8]	; (1a44c <keys_commit+0x10>)
   1a444:	f7ff ffda 	bl	1a3fc <bt_keys_foreach_type>
	}

	return 0;
}
   1a448:	2000      	movs	r0, #0
   1a44a:	bd08      	pop	{r3, pc}
   1a44c:	0001a351 	.word	0x0001a351

0001a450 <bt_keys_find>:
{
   1a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a452:	4605      	mov	r5, r0
   1a454:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a456:	4614      	mov	r4, r2
   1a458:	b9aa      	cbnz	r2, 1a486 <bt_keys_find+0x36>
   1a45a:	490f      	ldr	r1, [pc, #60]	; (1a498 <bt_keys_find+0x48>)
   1a45c:	480f      	ldr	r0, [pc, #60]	; (1a49c <bt_keys_find+0x4c>)
   1a45e:	23c0      	movs	r3, #192	; 0xc0
   1a460:	4a0f      	ldr	r2, [pc, #60]	; (1a4a0 <bt_keys_find+0x50>)
   1a462:	f010 f916 	bl	2a692 <assert_print>
   1a466:	21c0      	movs	r1, #192	; 0xc0
   1a468:	480d      	ldr	r0, [pc, #52]	; (1a4a0 <bt_keys_find+0x50>)
   1a46a:	f010 f90b 	bl	2a684 <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a46e:	b18a      	cbz	r2, 1a494 <bt_keys_find+0x44>
   1a470:	428e      	cmp	r6, r1
   1a472:	d10f      	bne.n	1a494 <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   1a474:	2207      	movs	r2, #7
   1a476:	4621      	mov	r1, r4
   1a478:	480a      	ldr	r0, [pc, #40]	; (1a4a4 <bt_keys_find+0x54>)
   1a47a:	f016 f854 	bl	30526 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a47e:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a480:	b918      	cbnz	r0, 1a48a <bt_keys_find+0x3a>
			return &key_pool[i];
   1a482:	4809      	ldr	r0, [pc, #36]	; (1a4a8 <bt_keys_find+0x58>)
   1a484:	e007      	b.n	1a496 <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a486:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a488:	4f07      	ldr	r7, [pc, #28]	; (1a4a8 <bt_keys_find+0x58>)
   1a48a:	89fa      	ldrh	r2, [r7, #14]
   1a48c:	7839      	ldrb	r1, [r7, #0]
   1a48e:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a490:	2b00      	cmp	r3, #0
   1a492:	d0ec      	beq.n	1a46e <bt_keys_find+0x1e>
	return NULL;
   1a494:	2000      	movs	r0, #0
}
   1a496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a498:	0003640e 	.word	0x0003640e
   1a49c:	00032629 	.word	0x00032629
   1a4a0:	000363ca 	.word	0x000363ca
   1a4a4:	2002172d 	.word	0x2002172d
   1a4a8:	2002172c 	.word	0x2002172c

0001a4ac <bt_keys_find_irk>:
{
   1a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4ae:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1a4b0:	460c      	mov	r4, r1
   1a4b2:	b949      	cbnz	r1, 1a4c8 <bt_keys_find_irk+0x1c>
   1a4b4:	4923      	ldr	r1, [pc, #140]	; (1a544 <bt_keys_find_irk+0x98>)
   1a4b6:	4824      	ldr	r0, [pc, #144]	; (1a548 <bt_keys_find_irk+0x9c>)
   1a4b8:	23e9      	movs	r3, #233	; 0xe9
   1a4ba:	4a24      	ldr	r2, [pc, #144]	; (1a54c <bt_keys_find_irk+0xa0>)
   1a4bc:	f010 f8e9 	bl	2a692 <assert_print>
   1a4c0:	21e9      	movs	r1, #233	; 0xe9
   1a4c2:	4822      	ldr	r0, [pc, #136]	; (1a54c <bt_keys_find_irk+0xa0>)
   1a4c4:	f010 f8de 	bl	2a684 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1a4c8:	780b      	ldrb	r3, [r1, #0]
   1a4ca:	2b01      	cmp	r3, #1
   1a4cc:	d001      	beq.n	1a4d2 <bt_keys_find_irk+0x26>
		return NULL;
   1a4ce:	2000      	movs	r0, #0
}
   1a4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1a4d2:	798b      	ldrb	r3, [r1, #6]
   1a4d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a4d8:	2b40      	cmp	r3, #64	; 0x40
   1a4da:	d1f8      	bne.n	1a4ce <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4dc:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a4de:	4d1c      	ldr	r5, [pc, #112]	; (1a550 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   1a4e0:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1a4e4:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1a4e6:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4e8:	f002 0202 	and.w	r2, r2, #2
   1a4ec:	b1db      	cbz	r3, 1a526 <bt_keys_find_irk+0x7a>
   1a4ee:	2300      	movs	r3, #0
   1a4f0:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1a4f2:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4f4:	f002 0202 	and.w	r2, r2, #2
   1a4f8:	2b00      	cmp	r3, #0
   1a4fa:	d1e8      	bne.n	1a4ce <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a4fc:	2a00      	cmp	r2, #0
   1a4fe:	d0e6      	beq.n	1a4ce <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   1a500:	42b1      	cmp	r1, r6
   1a502:	d1e4      	bne.n	1a4ce <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1a504:	1c67      	adds	r7, r4, #1
   1a506:	4639      	mov	r1, r7
   1a508:	4812      	ldr	r0, [pc, #72]	; (1a554 <bt_keys_find_irk+0xa8>)
   1a50a:	f011 fc61 	bl	2bdd0 <bt_rpa_irk_matches>
   1a50e:	2301      	movs	r3, #1
   1a510:	2800      	cmp	r0, #0
   1a512:	d0ed      	beq.n	1a4f0 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   1a514:	f8d4 3001 	ldr.w	r3, [r4, #1]
   1a518:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   1a51c:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   1a520:	4b0d      	ldr	r3, [pc, #52]	; (1a558 <bt_keys_find_irk+0xac>)
   1a522:	809a      	strh	r2, [r3, #4]
}
   1a524:	e00b      	b.n	1a53e <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a526:	2a00      	cmp	r2, #0
   1a528:	d0e2      	beq.n	1a4f0 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   1a52a:	42b0      	cmp	r0, r6
   1a52c:	d1e0      	bne.n	1a4f0 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1a52e:	2206      	movs	r2, #6
   1a530:	4639      	mov	r1, r7
   1a532:	1c60      	adds	r0, r4, #1
   1a534:	f015 fff7 	bl	30526 <memcmp>
   1a538:	2301      	movs	r3, #1
   1a53a:	2800      	cmp	r0, #0
   1a53c:	d1d2      	bne.n	1a4e4 <bt_keys_find_irk+0x38>
			return &key_pool[i];
   1a53e:	4804      	ldr	r0, [pc, #16]	; (1a550 <bt_keys_find_irk+0xa4>)
   1a540:	e7c6      	b.n	1a4d0 <bt_keys_find_irk+0x24>
   1a542:	bf00      	nop
   1a544:	0003640e 	.word	0x0003640e
   1a548:	00032629 	.word	0x00032629
   1a54c:	000363ca 	.word	0x000363ca
   1a550:	2002172c 	.word	0x2002172c
   1a554:	20021756 	.word	0x20021756
   1a558:	20021766 	.word	0x20021766

0001a55c <bt_keys_find_addr>:
{
   1a55c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a55e:	b959      	cbnz	r1, 1a578 <bt_keys_find_addr+0x1c>
   1a560:	490c      	ldr	r1, [pc, #48]	; (1a594 <bt_keys_find_addr+0x38>)
   1a562:	480d      	ldr	r0, [pc, #52]	; (1a598 <bt_keys_find_addr+0x3c>)
   1a564:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1a568:	4a0c      	ldr	r2, [pc, #48]	; (1a59c <bt_keys_find_addr+0x40>)
   1a56a:	f010 f892 	bl	2a692 <assert_print>
   1a56e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1a572:	480a      	ldr	r0, [pc, #40]	; (1a59c <bt_keys_find_addr+0x40>)
   1a574:	f010 f886 	bl	2a684 <assert_post_action>
		if (key_pool[i].id == id &&
   1a578:	4c09      	ldr	r4, [pc, #36]	; (1a5a0 <bt_keys_find_addr+0x44>)
   1a57a:	7823      	ldrb	r3, [r4, #0]
   1a57c:	4283      	cmp	r3, r0
   1a57e:	d104      	bne.n	1a58a <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   1a580:	2207      	movs	r2, #7
   1a582:	1c60      	adds	r0, r4, #1
   1a584:	f015 ffcf 	bl	30526 <memcmp>
   1a588:	b108      	cbz	r0, 1a58e <bt_keys_find_addr+0x32>
	return NULL;
   1a58a:	2000      	movs	r0, #0
}
   1a58c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a58e:	4620      	mov	r0, r4
   1a590:	e7fc      	b.n	1a58c <bt_keys_find_addr+0x30>
   1a592:	bf00      	nop
   1a594:	0003640e 	.word	0x0003640e
   1a598:	00032629 	.word	0x00032629
   1a59c:	000363ca 	.word	0x000363ca
   1a5a0:	2002172c 	.word	0x2002172c

0001a5a4 <bt_keys_add_type>:
{
   1a5a4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a5a6:	b958      	cbnz	r0, 1a5c0 <bt_keys_add_type+0x1c>
   1a5a8:	4907      	ldr	r1, [pc, #28]	; (1a5c8 <bt_keys_add_type+0x24>)
   1a5aa:	4808      	ldr	r0, [pc, #32]	; (1a5cc <bt_keys_add_type+0x28>)
   1a5ac:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1a5b0:	4a07      	ldr	r2, [pc, #28]	; (1a5d0 <bt_keys_add_type+0x2c>)
   1a5b2:	f010 f86e 	bl	2a692 <assert_print>
   1a5b6:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1a5ba:	4805      	ldr	r0, [pc, #20]	; (1a5d0 <bt_keys_add_type+0x2c>)
   1a5bc:	f010 f862 	bl	2a684 <assert_post_action>
	keys->keys |= type;
   1a5c0:	89c3      	ldrh	r3, [r0, #14]
   1a5c2:	4319      	orrs	r1, r3
   1a5c4:	81c1      	strh	r1, [r0, #14]
}
   1a5c6:	bd08      	pop	{r3, pc}
   1a5c8:	000363fa 	.word	0x000363fa
   1a5cc:	00032629 	.word	0x00032629
   1a5d0:	000363ca 	.word	0x000363ca

0001a5d4 <bt_keys_get_type>:
{
   1a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5d6:	4606      	mov	r6, r0
   1a5d8:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a5da:	4615      	mov	r5, r2
   1a5dc:	b94a      	cbnz	r2, 1a5f2 <bt_keys_get_type+0x1e>
   1a5de:	490c      	ldr	r1, [pc, #48]	; (1a610 <bt_keys_get_type+0x3c>)
   1a5e0:	480c      	ldr	r0, [pc, #48]	; (1a614 <bt_keys_get_type+0x40>)
   1a5e2:	23d2      	movs	r3, #210	; 0xd2
   1a5e4:	4a0c      	ldr	r2, [pc, #48]	; (1a618 <bt_keys_get_type+0x44>)
   1a5e6:	f010 f854 	bl	2a692 <assert_print>
   1a5ea:	21d2      	movs	r1, #210	; 0xd2
   1a5ec:	480a      	ldr	r0, [pc, #40]	; (1a618 <bt_keys_get_type+0x44>)
   1a5ee:	f010 f849 	bl	2a684 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1a5f2:	f7ff ff2d 	bl	1a450 <bt_keys_find>
	if (keys) {
   1a5f6:	4604      	mov	r4, r0
   1a5f8:	b940      	cbnz	r0, 1a60c <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   1a5fa:	4629      	mov	r1, r5
   1a5fc:	4638      	mov	r0, r7
   1a5fe:	f7ff fee7 	bl	1a3d0 <bt_keys_get_addr>
	if (!keys) {
   1a602:	4604      	mov	r4, r0
   1a604:	b110      	cbz	r0, 1a60c <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   1a606:	4631      	mov	r1, r6
   1a608:	f7ff ffcc 	bl	1a5a4 <bt_keys_add_type>
}
   1a60c:	4620      	mov	r0, r4
   1a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a610:	0003640e 	.word	0x0003640e
   1a614:	00032629 	.word	0x00032629
   1a618:	000363ca 	.word	0x000363ca

0001a61c <bt_keys_clear>:
{
   1a61c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a61e:	4604      	mov	r4, r0
{
   1a620:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a622:	b958      	cbnz	r0, 1a63c <bt_keys_clear+0x20>
   1a624:	4916      	ldr	r1, [pc, #88]	; (1a680 <bt_keys_clear+0x64>)
   1a626:	4817      	ldr	r0, [pc, #92]	; (1a684 <bt_keys_clear+0x68>)
   1a628:	f240 1331 	movw	r3, #305	; 0x131
   1a62c:	4a16      	ldr	r2, [pc, #88]	; (1a688 <bt_keys_clear+0x6c>)
   1a62e:	f010 f830 	bl	2a692 <assert_print>
   1a632:	f240 1131 	movw	r1, #305	; 0x131
   1a636:	4814      	ldr	r0, [pc, #80]	; (1a688 <bt_keys_clear+0x6c>)
   1a638:	f010 f824 	bl	2a684 <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a63c:	7a03      	ldrb	r3, [r0, #8]
   1a63e:	075b      	lsls	r3, r3, #29
   1a640:	d501      	bpl.n	1a646 <bt_keys_clear+0x2a>
		bt_id_del(keys);
   1a642:	f7f9 f9b1 	bl	139a8 <bt_id_del>
		if (keys->id) {
   1a646:	4625      	mov	r5, r4
   1a648:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a64c:	b1b2      	cbz	r2, 1a67c <bt_keys_clear+0x60>
			u8_to_dec(id, sizeof(id), keys->id);
   1a64e:	ae02      	add	r6, sp, #8
   1a650:	2104      	movs	r1, #4
   1a652:	4630      	mov	r0, r6
   1a654:	f00f fdcd 	bl	2a1f2 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a658:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a65a:	462b      	mov	r3, r5
   1a65c:	2124      	movs	r1, #36	; 0x24
   1a65e:	4a0b      	ldr	r2, [pc, #44]	; (1a68c <bt_keys_clear+0x70>)
   1a660:	a803      	add	r0, sp, #12
   1a662:	f7f7 fae5 	bl	11c30 <bt_settings_encode_key>
		settings_delete(key);
   1a666:	a803      	add	r0, sp, #12
   1a668:	f010 fe0d 	bl	2b286 <settings_delete>
   1a66c:	225c      	movs	r2, #92	; 0x5c
   1a66e:	2100      	movs	r1, #0
   1a670:	4620      	mov	r0, r4
}
   1a672:	b00c      	add	sp, #48	; 0x30
   1a674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a678:	f015 bf9f 	b.w	305ba <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a67c:	9200      	str	r2, [sp, #0]
   1a67e:	e7ec      	b.n	1a65a <bt_keys_clear+0x3e>
   1a680:	000363fa 	.word	0x000363fa
   1a684:	00032629 	.word	0x00032629
   1a688:	000363ca 	.word	0x000363ca
   1a68c:	000364d5 	.word	0x000364d5

0001a690 <keys_set>:
{
   1a690:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a692:	b099      	sub	sp, #100	; 0x64
   1a694:	4614      	mov	r4, r2
	if (!name) {
   1a696:	4606      	mov	r6, r0
{
   1a698:	af00      	add	r7, sp, #0
	if (!name) {
   1a69a:	b988      	cbnz	r0, 1a6c0 <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   1a69c:	4b60      	ldr	r3, [pc, #384]	; (1a820 <keys_set+0x190>)
   1a69e:	627b      	str	r3, [r7, #36]	; 0x24
   1a6a0:	2302      	movs	r3, #2
   1a6a2:	623b      	str	r3, [r7, #32]
   1a6a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a6a8:	4603      	mov	r3, r0
   1a6aa:	f107 0220 	add.w	r2, r7, #32
   1a6ae:	485d      	ldr	r0, [pc, #372]	; (1a824 <keys_set+0x194>)
   1a6b0:	f7f4 f8da 	bl	e868 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1a6b4:	f06f 0515 	mvn.w	r5, #21
}
   1a6b8:	4628      	mov	r0, r5
   1a6ba:	3764      	adds	r7, #100	; 0x64
   1a6bc:	46bd      	mov	sp, r7
   1a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1a6c0:	2250      	movs	r2, #80	; 0x50
   1a6c2:	4618      	mov	r0, r3
   1a6c4:	f107 0110 	add.w	r1, r7, #16
   1a6c8:	47a0      	blx	r4
	if (len < 0) {
   1a6ca:	1e04      	subs	r4, r0, #0
   1a6cc:	da10      	bge.n	1a6f0 <keys_set+0x60>
		LOG_ERR("Failed to read value (err %zd)", len);
   1a6ce:	466d      	mov	r5, sp
   1a6d0:	b088      	sub	sp, #32
   1a6d2:	466a      	mov	r2, sp
   1a6d4:	4b54      	ldr	r3, [pc, #336]	; (1a828 <keys_set+0x198>)
   1a6d6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a6da:	2303      	movs	r3, #3
   1a6dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1a6e0:	2300      	movs	r3, #0
   1a6e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a6e6:	484f      	ldr	r0, [pc, #316]	; (1a824 <keys_set+0x194>)
   1a6e8:	f7f4 f8be 	bl	e868 <z_impl_z_log_msg_static_create>
   1a6ec:	46ad      	mov	sp, r5
		return -EINVAL;
   1a6ee:	e7e1      	b.n	1a6b4 <keys_set+0x24>
	err = bt_settings_decode_key(name, &addr);
   1a6f0:	4630      	mov	r0, r6
   1a6f2:	f107 0108 	add.w	r1, r7, #8
   1a6f6:	f011 fb94 	bl	2be22 <bt_settings_decode_key>
	if (err) {
   1a6fa:	4605      	mov	r5, r0
   1a6fc:	b198      	cbz	r0, 1a726 <keys_set+0x96>
		LOG_ERR("Unable to decode address %s", name);
   1a6fe:	466c      	mov	r4, sp
   1a700:	b088      	sub	sp, #32
   1a702:	466a      	mov	r2, sp
   1a704:	4b49      	ldr	r3, [pc, #292]	; (1a82c <keys_set+0x19c>)
   1a706:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1a70a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a70e:	8393      	strh	r3, [r2, #28]
   1a710:	4b47      	ldr	r3, [pc, #284]	; (1a830 <keys_set+0x1a0>)
   1a712:	f842 3f10 	str.w	r3, [r2, #16]!
   1a716:	2300      	movs	r3, #0
   1a718:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a71c:	4841      	ldr	r0, [pc, #260]	; (1a824 <keys_set+0x194>)
   1a71e:	f7f4 f8a3 	bl	e868 <z_impl_z_log_msg_static_create>
   1a722:	46a5      	mov	sp, r4
			return -EINVAL;
   1a724:	e7c6      	b.n	1a6b4 <keys_set+0x24>
	settings_name_next(name, &next);
   1a726:	4630      	mov	r0, r6
   1a728:	1d39      	adds	r1, r7, #4
   1a72a:	f010 fdd4 	bl	2b2d6 <settings_name_next>
	if (!next) {
   1a72e:	6878      	ldr	r0, [r7, #4]
   1a730:	b188      	cbz	r0, 1a756 <keys_set+0xc6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a732:	220a      	movs	r2, #10
   1a734:	4629      	mov	r1, r5
   1a736:	f00e fc5b 	bl	28ff0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a73a:	b160      	cbz	r0, 1a756 <keys_set+0xc6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1a73c:	466c      	mov	r4, sp
   1a73e:	b088      	sub	sp, #32
   1a740:	466a      	mov	r2, sp
   1a742:	4b3c      	ldr	r3, [pc, #240]	; (1a834 <keys_set+0x1a4>)
   1a744:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a748:	2303      	movs	r3, #3
   1a74a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a74e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a752:	462b      	mov	r3, r5
   1a754:	e7e2      	b.n	1a71c <keys_set+0x8c>
	if (!len) {
   1a756:	bb1c      	cbnz	r4, 1a7a0 <keys_set+0x110>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1a758:	4621      	mov	r1, r4
   1a75a:	203f      	movs	r0, #63	; 0x3f
   1a75c:	f107 0208 	add.w	r2, r7, #8
   1a760:	f7ff fe76 	bl	1a450 <bt_keys_find>
		if (keys) {
   1a764:	b120      	cbz	r0, 1a770 <keys_set+0xe0>
   1a766:	225c      	movs	r2, #92	; 0x5c
   1a768:	4621      	mov	r1, r4
   1a76a:	f015 ff26 	bl	305ba <memset>
   1a76e:	e7a3      	b.n	1a6b8 <keys_set+0x28>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1a770:	f107 0008 	add.w	r0, r7, #8
   1a774:	f7f7 f986 	bl	11a84 <bt_addr_le_str>
   1a778:	466e      	mov	r6, sp
   1a77a:	b088      	sub	sp, #32
   1a77c:	466a      	mov	r2, sp
   1a77e:	4b2e      	ldr	r3, [pc, #184]	; (1a838 <keys_set+0x1a8>)
   1a780:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a784:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a788:	8393      	strh	r3, [r2, #28]
   1a78a:	4b29      	ldr	r3, [pc, #164]	; (1a830 <keys_set+0x1a0>)
   1a78c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a790:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1a794:	4623      	mov	r3, r4
   1a796:	4823      	ldr	r0, [pc, #140]	; (1a824 <keys_set+0x194>)
   1a798:	f7f4 f866 	bl	e868 <z_impl_z_log_msg_static_create>
   1a79c:	46b5      	mov	sp, r6
   1a79e:	e78b      	b.n	1a6b8 <keys_set+0x28>
	__ASSERT_NO_MSG(addr != NULL);
   1a7a0:	2000      	movs	r0, #0
   1a7a2:	f107 0108 	add.w	r1, r7, #8
   1a7a6:	f7ff fdeb 	bl	1a380 <bt_keys_get_addr.part.0>
	if (!keys) {
   1a7aa:	4606      	mov	r6, r0
   1a7ac:	b9c8      	cbnz	r0, 1a7e2 <keys_set+0x152>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1a7ae:	f107 0008 	add.w	r0, r7, #8
   1a7b2:	f7f7 f967 	bl	11a84 <bt_addr_le_str>
   1a7b6:	466c      	mov	r4, sp
   1a7b8:	b088      	sub	sp, #32
   1a7ba:	466a      	mov	r2, sp
   1a7bc:	4b1f      	ldr	r3, [pc, #124]	; (1a83c <keys_set+0x1ac>)
   1a7be:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a7c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a7c6:	8393      	strh	r3, [r2, #28]
   1a7c8:	4b19      	ldr	r3, [pc, #100]	; (1a830 <keys_set+0x1a0>)
   1a7ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7ce:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a7d2:	4633      	mov	r3, r6
   1a7d4:	4813      	ldr	r0, [pc, #76]	; (1a824 <keys_set+0x194>)
   1a7d6:	f7f4 f847 	bl	e868 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1a7da:	f06f 050b 	mvn.w	r5, #11
   1a7de:	46a5      	mov	sp, r4
   1a7e0:	e76a      	b.n	1a6b8 <keys_set+0x28>
	if (len != BT_KEYS_STORAGE_LEN) {
   1a7e2:	2c50      	cmp	r4, #80	; 0x50
   1a7e4:	d015      	beq.n	1a812 <keys_set+0x182>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1a7e6:	466d      	mov	r5, sp
   1a7e8:	b088      	sub	sp, #32
   1a7ea:	466a      	mov	r2, sp
   1a7ec:	4b14      	ldr	r3, [pc, #80]	; (1a840 <keys_set+0x1b0>)
   1a7ee:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a7f2:	2350      	movs	r3, #80	; 0x50
   1a7f4:	61d3      	str	r3, [r2, #28]
   1a7f6:	2304      	movs	r3, #4
   1a7f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7fc:	2300      	movs	r3, #0
   1a7fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a802:	4808      	ldr	r0, [pc, #32]	; (1a824 <keys_set+0x194>)
   1a804:	f7f4 f830 	bl	e868 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1a808:	4630      	mov	r0, r6
   1a80a:	46ad      	mov	sp, r5
   1a80c:	f7ff ff06 	bl	1a61c <bt_keys_clear>
			return -EINVAL;
   1a810:	e750      	b.n	1a6b4 <keys_set+0x24>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a812:	4622      	mov	r2, r4
   1a814:	f107 0110 	add.w	r1, r7, #16
   1a818:	300c      	adds	r0, #12
   1a81a:	f015 fe94 	bl	30546 <memcpy>
   1a81e:	e74b      	b.n	1a6b8 <keys_set+0x28>
   1a820:	000345be 	.word	0x000345be
   1a824:	000314d4 	.word	0x000314d4
   1a828:	00036436 	.word	0x00036436
   1a82c:	00035b4a 	.word	0x00035b4a
   1a830:	01000003 	.word	0x01000003
   1a834:	00035b66 	.word	0x00035b66
   1a838:	00036455 	.word	0x00036455
   1a83c:	00036478 	.word	0x00036478
   1a840:	00036497 	.word	0x00036497

0001a844 <bt_keys_store>:
{
   1a844:	b5b0      	push	{r4, r5, r7, lr}
   1a846:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a848:	4604      	mov	r4, r0
{
   1a84a:	af02      	add	r7, sp, #8
	__ASSERT_NO_MSG(keys != NULL);
   1a84c:	b958      	cbnz	r0, 1a866 <bt_keys_store+0x22>
   1a84e:	491c      	ldr	r1, [pc, #112]	; (1a8c0 <bt_keys_store+0x7c>)
   1a850:	481c      	ldr	r0, [pc, #112]	; (1a8c4 <bt_keys_store+0x80>)
   1a852:	f240 1355 	movw	r3, #341	; 0x155
   1a856:	4a1c      	ldr	r2, [pc, #112]	; (1a8c8 <bt_keys_store+0x84>)
   1a858:	f00f ff1b 	bl	2a692 <assert_print>
   1a85c:	f240 1155 	movw	r1, #341	; 0x155
   1a860:	4819      	ldr	r0, [pc, #100]	; (1a8c8 <bt_keys_store+0x84>)
   1a862:	f00f ff0f 	bl	2a684 <assert_post_action>
	if (keys->id) {
   1a866:	4605      	mov	r5, r0
   1a868:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a86c:	b332      	cbz	r2, 1a8bc <bt_keys_store+0x78>
		u8_to_dec(id, sizeof(id), keys->id);
   1a86e:	2104      	movs	r1, #4
   1a870:	4638      	mov	r0, r7
   1a872:	f00f fcbe 	bl	2a1f2 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a876:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a878:	462b      	mov	r3, r5
   1a87a:	2124      	movs	r1, #36	; 0x24
   1a87c:	4a13      	ldr	r2, [pc, #76]	; (1a8cc <bt_keys_store+0x88>)
   1a87e:	1d38      	adds	r0, r7, #4
   1a880:	f7f7 f9d6 	bl	11c30 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1a884:	f104 010c 	add.w	r1, r4, #12
   1a888:	2250      	movs	r2, #80	; 0x50
   1a88a:	1d38      	adds	r0, r7, #4
   1a88c:	f7f5 fa86 	bl	fd9c <settings_save_one>
	if (err) {
   1a890:	4604      	mov	r4, r0
   1a892:	b178      	cbz	r0, 1a8b4 <bt_keys_store+0x70>
		LOG_ERR("Failed to save keys (err %d)", err);
   1a894:	466d      	mov	r5, sp
   1a896:	b088      	sub	sp, #32
   1a898:	aa02      	add	r2, sp, #8
   1a89a:	4b0d      	ldr	r3, [pc, #52]	; (1a8d0 <bt_keys_store+0x8c>)
   1a89c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a8a0:	2303      	movs	r3, #3
   1a8a2:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8a6:	2300      	movs	r3, #0
   1a8a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a8ac:	4809      	ldr	r0, [pc, #36]	; (1a8d4 <bt_keys_store+0x90>)
   1a8ae:	f7f3 ffdb 	bl	e868 <z_impl_z_log_msg_static_create>
   1a8b2:	46ad      	mov	sp, r5
}
   1a8b4:	4620      	mov	r0, r4
   1a8b6:	3728      	adds	r7, #40	; 0x28
   1a8b8:	46bd      	mov	sp, r7
   1a8ba:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a8bc:	9200      	str	r2, [sp, #0]
   1a8be:	e7db      	b.n	1a878 <bt_keys_store+0x34>
   1a8c0:	000363fa 	.word	0x000363fa
   1a8c4:	00032629 	.word	0x00032629
   1a8c8:	000363ca 	.word	0x000363ca
   1a8cc:	000364d5 	.word	0x000364d5
   1a8d0:	000364b5 	.word	0x000364b5
   1a8d4:	000314d4 	.word	0x000314d4

0001a8d8 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a8d8:	4288      	cmp	r0, r1
{
   1a8da:	b510      	push	{r4, lr}
   1a8dc:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a8e0:	d911      	bls.n	1a906 <sys_memcpy_swap+0x2e>
   1a8e2:	188c      	adds	r4, r1, r2
   1a8e4:	42a0      	cmp	r0, r4
   1a8e6:	d211      	bcs.n	1a90c <sys_memcpy_swap+0x34>
   1a8e8:	490d      	ldr	r1, [pc, #52]	; (1a920 <sys_memcpy_swap+0x48>)
   1a8ea:	f240 2315 	movw	r3, #533	; 0x215
   1a8ee:	4a0d      	ldr	r2, [pc, #52]	; (1a924 <sys_memcpy_swap+0x4c>)
   1a8f0:	480d      	ldr	r0, [pc, #52]	; (1a928 <sys_memcpy_swap+0x50>)
   1a8f2:	f00f fece 	bl	2a692 <assert_print>
   1a8f6:	480d      	ldr	r0, [pc, #52]	; (1a92c <sys_memcpy_swap+0x54>)
   1a8f8:	f00f fecb 	bl	2a692 <assert_print>
   1a8fc:	f240 2115 	movw	r1, #533	; 0x215
   1a900:	4808      	ldr	r0, [pc, #32]	; (1a924 <sys_memcpy_swap+0x4c>)
   1a902:	f00f febf 	bl	2a684 <assert_post_action>
   1a906:	d0ef      	beq.n	1a8e8 <sys_memcpy_swap+0x10>
   1a908:	4299      	cmp	r1, r3
   1a90a:	e7ec      	b.n	1a8e6 <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1a90c:	3a01      	subs	r2, #1
   1a90e:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   1a910:	f811 2901 	ldrb.w	r2, [r1], #-1
   1a914:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   1a918:	4283      	cmp	r3, r0
   1a91a:	d1f9      	bne.n	1a910 <sys_memcpy_swap+0x38>
}
   1a91c:	bd10      	pop	{r4, pc}
   1a91e:	bf00      	nop
   1a920:	0003512f 	.word	0x0003512f
   1a924:	000350fd 	.word	0x000350fd
   1a928:	00032629 	.word	0x00032629
   1a92c:	00035186 	.word	0x00035186

0001a930 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1a930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a934:	b09a      	sub	sp, #104	; 0x68
   1a936:	4616      	mov	r6, r2
   1a938:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1a93c:	aa0c      	add	r2, sp, #48	; 0x30
{
   1a93e:	4684      	mov	ip, r0
   1a940:	468a      	mov	sl, r1
   1a942:	4690      	mov	r8, r2
   1a944:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   1a946:	4b2c      	ldr	r3, [pc, #176]	; (1a9f8 <bt_crypto_f5+0xc8>)
   1a948:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1a94c:	4614      	mov	r4, r2
   1a94e:	6818      	ldr	r0, [r3, #0]
   1a950:	6859      	ldr	r1, [r3, #4]
   1a952:	3308      	adds	r3, #8
   1a954:	c403      	stmia	r4!, {r0, r1}
   1a956:	4573      	cmp	r3, lr
   1a958:	4622      	mov	r2, r4
   1a95a:	d1f7      	bne.n	1a94c <bt_crypto_f5+0x1c>
   1a95c:	6818      	ldr	r0, [r3, #0]
   1a95e:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1a960:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   1a962:	6020      	str	r0, [r4, #0]
   1a964:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   1a966:	2220      	movs	r2, #32
   1a968:	a804      	add	r0, sp, #16
   1a96a:	f7ff ffb5 	bl	1a8d8 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1a96e:	466b      	mov	r3, sp
   1a970:	2220      	movs	r2, #32
   1a972:	4822      	ldr	r0, [pc, #136]	; (1a9fc <bt_crypto_f5+0xcc>)
   1a974:	a904      	add	r1, sp, #16
   1a976:	f013 f8b3 	bl	2dae0 <bt_crypto_aes_cmac>
	if (err) {
   1a97a:	4604      	mov	r4, r0
   1a97c:	bbc0      	cbnz	r0, 1a9f0 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1a97e:	2210      	movs	r2, #16
   1a980:	4651      	mov	r1, sl
   1a982:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1a986:	f7ff ffa7 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1a98a:	2210      	movs	r2, #16
   1a98c:	4631      	mov	r1, r6
   1a98e:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1a992:	f7ff ffa1 	bl	1a8d8 <sys_memcpy_swap>
	m[37] = a1->type;
   1a996:	4629      	mov	r1, r5
   1a998:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a99c:	2206      	movs	r2, #6
   1a99e:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   1a9a2:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a9a6:	f7ff ff97 	bl	1a8d8 <sys_memcpy_swap>
	m[44] = a2->type;
   1a9aa:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a9ac:	2206      	movs	r2, #6
	m[44] = a2->type;
   1a9ae:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a9b2:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   1a9b6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a9ba:	f7ff ff8d 	bl	1a8d8 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1a9be:	464b      	mov	r3, r9
   1a9c0:	2235      	movs	r2, #53	; 0x35
   1a9c2:	4641      	mov	r1, r8
   1a9c4:	4668      	mov	r0, sp
   1a9c6:	f013 f88b 	bl	2dae0 <bt_crypto_aes_cmac>
	if (err) {
   1a9ca:	4604      	mov	r4, r0
   1a9cc:	b980      	cbnz	r0, 1a9f0 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1a9ce:	4648      	mov	r0, r9
   1a9d0:	f013 f878 	bl	2dac4 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1a9d4:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1a9d6:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   1a9d8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1a9dc:	4641      	mov	r1, r8
   1a9de:	463b      	mov	r3, r7
   1a9e0:	4668      	mov	r0, sp
   1a9e2:	f013 f87d 	bl	2dae0 <bt_crypto_aes_cmac>
	if (err) {
   1a9e6:	4604      	mov	r4, r0
   1a9e8:	b910      	cbnz	r0, 1a9f0 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1a9ea:	4638      	mov	r0, r7
   1a9ec:	f013 f86a 	bl	2dac4 <sys_mem_swap.constprop.0>

	return 0;
}
   1a9f0:	4620      	mov	r0, r4
   1a9f2:	b01a      	add	sp, #104	; 0x68
   1a9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a9f8:	000316c4 	.word	0x000316c4
   1a9fc:	000364e2 	.word	0x000364e2

0001aa00 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1aa00:	b570      	push	{r4, r5, r6, lr}
   1aa02:	460e      	mov	r6, r1
   1aa04:	461d      	mov	r5, r3
   1aa06:	4614      	mov	r4, r2
   1aa08:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1aa0a:	4601      	mov	r1, r0
   1aa0c:	2220      	movs	r2, #32
   1aa0e:	a804      	add	r0, sp, #16
   1aa10:	f7ff ff62 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1aa14:	2220      	movs	r2, #32
   1aa16:	4631      	mov	r1, r6
   1aa18:	a80c      	add	r0, sp, #48	; 0x30
   1aa1a:	f7ff ff5d 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1aa1e:	2210      	movs	r2, #16
   1aa20:	4629      	mov	r1, r5
   1aa22:	a814      	add	r0, sp, #80	; 0x50
   1aa24:	f7ff ff58 	bl	1a8d8 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1aa28:	2210      	movs	r2, #16
   1aa2a:	4621      	mov	r1, r4
   1aa2c:	4668      	mov	r0, sp
   1aa2e:	f7ff ff53 	bl	1a8d8 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1aa32:	466b      	mov	r3, sp
   1aa34:	2250      	movs	r2, #80	; 0x50
   1aa36:	4618      	mov	r0, r3
   1aa38:	a904      	add	r1, sp, #16
   1aa3a:	f013 f851 	bl	2dae0 <bt_crypto_aes_cmac>
	if (err) {
   1aa3e:	b940      	cbnz	r0, 1aa52 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1aa40:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1aa42:	4a05      	ldr	r2, [pc, #20]	; (1aa58 <bt_crypto_g2+0x58>)
   1aa44:	ba1b      	rev	r3, r3
   1aa46:	fbb3 f1f2 	udiv	r1, r3, r2
   1aa4a:	fb02 3311 	mls	r3, r2, r1, r3
   1aa4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1aa50:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1aa52:	b018      	add	sp, #96	; 0x60
   1aa54:	bd70      	pop	{r4, r5, r6, pc}
   1aa56:	bf00      	nop
   1aa58:	000f4240 	.word	0x000f4240

0001aa5c <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
   1aa5c:	4b08      	ldr	r3, [pc, #32]	; (1aa80 <registry_find+0x24>)
{
   1aa5e:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
   1aa60:	6859      	ldr	r1, [r3, #4]
   1aa62:	b111      	cbz	r1, 1aa6a <registry_find+0xe>
   1aa64:	6819      	ldr	r1, [r3, #0]
   1aa66:	4288      	cmp	r0, r1
   1aa68:	d007      	beq.n	1aa7a <registry_find+0x1e>
   1aa6a:	68d8      	ldr	r0, [r3, #12]
   1aa6c:	b130      	cbz	r0, 1aa7c <registry_find+0x20>
   1aa6e:	6899      	ldr	r1, [r3, #8]
		struct registry_entry *ep = &registry[i];
   1aa70:	4804      	ldr	r0, [pc, #16]	; (1aa84 <registry_find+0x28>)
   1aa72:	428a      	cmp	r2, r1
   1aa74:	bf18      	it	ne
   1aa76:	2000      	movne	r0, #0
   1aa78:	4770      	bx	lr
   1aa7a:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
   1aa7c:	4770      	bx	lr
   1aa7e:	bf00      	nop
   1aa80:	20021788 	.word	0x20021788
   1aa84:	20021790 	.word	0x20021790

0001aa88 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   1aa88:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   1aa8a:	4804      	ldr	r0, [pc, #16]	; (1aa9c <fs_init+0x14>)
   1aa8c:	f015 fb64 	bl	30158 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1aa90:	4b03      	ldr	r3, [pc, #12]	; (1aaa0 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   1aa92:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   1aa94:	e9c3 3300 	strd	r3, r3, [r3]
   1aa98:	bd08      	pop	{r3, pc}
   1aa9a:	bf00      	nop
   1aa9c:	20021798 	.word	0x20021798
   1aaa0:	200217ac 	.word	0x200217ac

0001aaa4 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1aaa4:	4602      	mov	r2, r0
   1aaa6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1aaa8:	4801      	ldr	r0, [pc, #4]	; (1aab0 <k_mutex_lock.constprop.0.isra.0+0xc>)
   1aaaa:	f00a bb17 	b.w	250dc <z_impl_k_mutex_lock>
   1aaae:	bf00      	nop
   1aab0:	20021798 	.word	0x20021798

0001aab4 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1aab4:	4801      	ldr	r0, [pc, #4]	; (1aabc <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1aab6:	f00a bbe1 	b.w	2527c <z_impl_k_mutex_unlock>
   1aaba:	bf00      	nop
   1aabc:	20021798 	.word	0x20021798

0001aac0 <fs_register>:
{
   1aac0:	b538      	push	{r3, r4, r5, lr}
   1aac2:	4604      	mov	r4, r0
   1aac4:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
   1aac6:	f04f 30ff 	mov.w	r0, #4294967295
   1aaca:	f04f 31ff 	mov.w	r1, #4294967295
   1aace:	f7ff ffe9 	bl	1aaa4 <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
   1aad2:	4620      	mov	r0, r4
   1aad4:	f7ff ffc2 	bl	1aa5c <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   1aad8:	b108      	cbz	r0, 1aade <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
   1aada:	6843      	ldr	r3, [r0, #4]
   1aadc:	b97b      	cbnz	r3, 1aafe <fs_register+0x3e>
		if (ep->fstp == NULL) {
   1aade:	4b0b      	ldr	r3, [pc, #44]	; (1ab0c <fs_register+0x4c>)
   1aae0:	685a      	ldr	r2, [r3, #4]
   1aae2:	b112      	cbz	r2, 1aaea <fs_register+0x2a>
   1aae4:	68da      	ldr	r2, [r3, #12]
   1aae6:	b96a      	cbnz	r2, 1ab04 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   1aae8:	2201      	movs	r2, #1
			ep->type = type;
   1aaea:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			rv = 0;
   1aaee:	2400      	movs	r4, #0
			ep->fstp = fstp;
   1aaf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1aaf4:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
   1aaf6:	f7ff ffdd 	bl	1aab4 <k_mutex_unlock.constprop.0.isra.0>
}
   1aafa:	4620      	mov	r0, r4
   1aafc:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
   1aafe:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1ab02:	e7f8      	b.n	1aaf6 <fs_register+0x36>
	int rv = -ENOSPC;
   1ab04:	f06f 041b 	mvn.w	r4, #27
   1ab08:	e7f5      	b.n	1aaf6 <fs_register+0x36>
   1ab0a:	bf00      	nop
   1ab0c:	20021788 	.word	0x20021788

0001ab10 <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
   1ab10:	b138      	cbz	r0, 1ab22 <fs_impl_strip_prefix+0x12>
   1ab12:	b131      	cbz	r1, 1ab22 <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
   1ab14:	698b      	ldr	r3, [r1, #24]
   1ab16:	4418      	add	r0, r3
	return *path ? path : root;
   1ab18:	7802      	ldrb	r2, [r0, #0]
   1ab1a:	4b02      	ldr	r3, [pc, #8]	; (1ab24 <fs_impl_strip_prefix+0x14>)
   1ab1c:	2a00      	cmp	r2, #0
   1ab1e:	bf08      	it	eq
   1ab20:	4618      	moveq	r0, r3
}
   1ab22:	4770      	bx	lr
   1ab24:	00033835 	.word	0x00033835

0001ab28 <littlefs_init>:
	ARG_UNUSED(dev);
	static struct fs_mount_t *partitions[] = {
		DT_INST_FOREACH_STATUS_OKAY(REFERENCE_MOUNT)
	};

	int rc = fs_register(FS_LITTLEFS, &littlefs_fs);
   1ab28:	2001      	movs	r0, #1
   1ab2a:	4901      	ldr	r1, [pc, #4]	; (1ab30 <littlefs_init+0x8>)
   1ab2c:	f7ff bfc8 	b.w	1aac0 <fs_register>
   1ab30:	000321e4 	.word	0x000321e4

0001ab34 <release_file_data>:
{
   1ab34:	b510      	push	{r4, lr}
	struct lfs_file_data *fdp = fp->filep;
   1ab36:	6803      	ldr	r3, [r0, #0]
{
   1ab38:	4604      	mov	r4, r0
	if (fdp->config.buffer) {
   1ab3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1ab3c:	b11a      	cbz	r2, 1ab46 <release_file_data+0x12>
	k_heap_free(&file_cache_heap, buf);
   1ab3e:	6e19      	ldr	r1, [r3, #96]	; 0x60
   1ab40:	4804      	ldr	r0, [pc, #16]	; (1ab54 <release_file_data+0x20>)
   1ab42:	f00a f811 	bl	24b68 <k_heap_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
   1ab46:	4621      	mov	r1, r4
   1ab48:	4803      	ldr	r0, [pc, #12]	; (1ab58 <release_file_data+0x24>)
   1ab4a:	f00a f8f1 	bl	24d30 <k_mem_slab_free>
	fp->filep = NULL;
   1ab4e:	2300      	movs	r3, #0
   1ab50:	6023      	str	r3, [r4, #0]
}
   1ab52:	bd10      	pop	{r4, pc}
   1ab54:	20008b14 	.word	0x20008b14
   1ab58:	20008a9c 	.word	0x20008a9c

0001ab5c <lfs_to_errno>:
	if (error >= 0) {
   1ab5c:	2800      	cmp	r0, #0
   1ab5e:	da07      	bge.n	1ab70 <lfs_to_errno+0x14>
	switch (error) {
   1ab60:	3054      	adds	r0, #84	; 0x54
   1ab62:	2852      	cmp	r0, #82	; 0x52
   1ab64:	d802      	bhi.n	1ab6c <lfs_to_errno+0x10>
   1ab66:	4b03      	ldr	r3, [pc, #12]	; (1ab74 <lfs_to_errno+0x18>)
   1ab68:	5618      	ldrsb	r0, [r3, r0]
   1ab6a:	4770      	bx	lr
   1ab6c:	f06f 0004 	mvn.w	r0, #4
}
   1ab70:	4770      	bx	lr
   1ab72:	bf00      	nop
   1ab74:	000367c8 	.word	0x000367c8

0001ab78 <errno_to_lfs>:
	if (error >= 0) {
   1ab78:	2800      	cmp	r0, #0
   1ab7a:	da05      	bge.n	1ab88 <errno_to_lfs+0x10>
	switch (error) {
   1ab7c:	305a      	adds	r0, #90	; 0x5a
   1ab7e:	2858      	cmp	r0, #88	; 0x58
   1ab80:	d804      	bhi.n	1ab8c <errno_to_lfs+0x14>
   1ab82:	4b04      	ldr	r3, [pc, #16]	; (1ab94 <errno_to_lfs+0x1c>)
   1ab84:	5618      	ldrsb	r0, [r3, r0]
   1ab86:	4770      	bx	lr
		return LFS_ERR_OK;
   1ab88:	2000      	movs	r0, #0
   1ab8a:	4770      	bx	lr
	switch (error) {
   1ab8c:	f06f 0004 	mvn.w	r0, #4
}
   1ab90:	4770      	bx	lr
   1ab92:	bf00      	nop
   1ab94:	0003676f 	.word	0x0003676f

0001ab98 <littlefs_open>:
{
   1ab98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct fs_littlefs *fs = fp->mp->fs_data;
   1ab9c:	6843      	ldr	r3, [r0, #4]
{
   1ab9e:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   1aba0:	691e      	ldr	r6, [r3, #16]
{
   1aba2:	4688      	mov	r8, r1
   1aba4:	4615      	mov	r5, r2
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
   1aba6:	4601      	mov	r1, r0
   1aba8:	2200      	movs	r2, #0
   1abaa:	2300      	movs	r3, #0
   1abac:	4823      	ldr	r0, [pc, #140]	; (1ac3c <littlefs_open+0xa4>)
   1abae:	f00a f855 	bl	24c5c <k_mem_slab_alloc>
   1abb2:	4601      	mov	r1, r0
	if (ret != 0) {
   1abb4:	2800      	cmp	r0, #0
   1abb6:	d13e      	bne.n	1ac36 <littlefs_open+0x9e>
	struct lfs_file_data *fdp = fp->filep;
   1abb8:	6827      	ldr	r7, [r4, #0]
__ssp_bos_icheck3(memset, void *, int)
   1abba:	2264      	movs	r2, #100	; 0x64
   1abbc:	4638      	mov	r0, r7
   1abbe:	f015 fcfc 	bl	305ba <memset>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
   1abc2:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
	ret = k_heap_alloc(&file_cache_heap, size, K_NO_WAIT);
   1abc6:	2200      	movs	r2, #0
   1abc8:	2300      	movs	r3, #0
   1abca:	6a89      	ldr	r1, [r1, #40]	; 0x28
   1abcc:	481c      	ldr	r0, [pc, #112]	; (1ac40 <littlefs_open+0xa8>)
   1abce:	f015 fa87 	bl	300e0 <k_heap_alloc>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
   1abd2:	6638      	str	r0, [r7, #96]	; 0x60
	if (fdp->cache_block == NULL) {
   1abd4:	b360      	cbz	r0, 1ac30 <littlefs_open+0x98>
	fdp->config.buffer = fdp->cache_block;
   1abd6:	46b9      	mov	r9, r7
   1abd8:	f849 0f54 	str.w	r0, [r9, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
   1abdc:	6861      	ldr	r1, [r4, #4]
   1abde:	4640      	mov	r0, r8
   1abe0:	f7ff ff96 	bl	1ab10 <fs_impl_strip_prefix>
   1abe4:	4680      	mov	r8, r0
	fs_lock(fs);
   1abe6:	4630      	mov	r0, r6
   1abe8:	f013 f863 	bl	2dcb2 <fs_lock>
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   1abec:	0129      	lsls	r1, r5, #4
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   1abee:	01ab      	lsls	r3, r5, #6
   1abf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   1abf4:	f401 7180 	and.w	r1, r1, #256	; 0x100
   1abf8:	4319      	orrs	r1, r3
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   1abfa:	f005 0303 	and.w	r3, r5, #3
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
   1abfe:	430b      	orrs	r3, r1
   1ac00:	4642      	mov	r2, r8
   1ac02:	4639      	mov	r1, r7
   1ac04:	f8cd 9000 	str.w	r9, [sp]
   1ac08:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1ac0c:	f008 fe18 	bl	23840 <lfs_file_opencfg>
   1ac10:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1ac12:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1ac16:	f013 f853 	bl	2dcc0 <k_mutex_unlock.isra.0>
	if (ret < 0) {
   1ac1a:	2d00      	cmp	r5, #0
   1ac1c:	da02      	bge.n	1ac24 <littlefs_open+0x8c>
		release_file_data(fp);
   1ac1e:	4620      	mov	r0, r4
   1ac20:	f7ff ff88 	bl	1ab34 <release_file_data>
	return lfs_to_errno(ret);
   1ac24:	4628      	mov	r0, r5
}
   1ac26:	b003      	add	sp, #12
   1ac28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return lfs_to_errno(ret);
   1ac2c:	f7ff bf96 	b.w	1ab5c <lfs_to_errno>
		ret = -ENOMEM;
   1ac30:	f06f 050b 	mvn.w	r5, #11
   1ac34:	e7f3      	b.n	1ac1e <littlefs_open+0x86>
}
   1ac36:	b003      	add	sp, #12
   1ac38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ac3c:	20008a9c 	.word	0x20008a9c
   1ac40:	20008b14 	.word	0x20008b14

0001ac44 <littlefs_opendir>:
{
   1ac44:	b570      	push	{r4, r5, r6, lr}
	struct fs_littlefs *fs = dp->mp->fs_data;
   1ac46:	6843      	ldr	r3, [r0, #4]
{
   1ac48:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   1ac4a:	691e      	ldr	r6, [r3, #16]
{
   1ac4c:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
   1ac4e:	2200      	movs	r2, #0
   1ac50:	4601      	mov	r1, r0
   1ac52:	2300      	movs	r3, #0
   1ac54:	4814      	ldr	r0, [pc, #80]	; (1aca8 <littlefs_opendir+0x64>)
   1ac56:	f00a f801 	bl	24c5c <k_mem_slab_alloc>
   1ac5a:	4601      	mov	r1, r0
   1ac5c:	bb08      	cbnz	r0, 1aca2 <littlefs_opendir+0x5e>
   1ac5e:	2234      	movs	r2, #52	; 0x34
   1ac60:	6820      	ldr	r0, [r4, #0]
   1ac62:	f015 fcaa 	bl	305ba <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
   1ac66:	6861      	ldr	r1, [r4, #4]
   1ac68:	4628      	mov	r0, r5
   1ac6a:	f7ff ff51 	bl	1ab10 <fs_impl_strip_prefix>
   1ac6e:	4605      	mov	r5, r0
	fs_lock(fs);
   1ac70:	4630      	mov	r0, r6
   1ac72:	f013 f81e 	bl	2dcb2 <fs_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
   1ac76:	462a      	mov	r2, r5
   1ac78:	6821      	ldr	r1, [r4, #0]
   1ac7a:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1ac7e:	f008 ffeb 	bl	23c58 <lfs_dir_open>
   1ac82:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1ac84:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1ac88:	f013 f81a 	bl	2dcc0 <k_mutex_unlock.isra.0>
	if (ret < 0) {
   1ac8c:	2d00      	cmp	r5, #0
   1ac8e:	da03      	bge.n	1ac98 <littlefs_opendir+0x54>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   1ac90:	4621      	mov	r1, r4
   1ac92:	4805      	ldr	r0, [pc, #20]	; (1aca8 <littlefs_opendir+0x64>)
   1ac94:	f00a f84c 	bl	24d30 <k_mem_slab_free>
	return lfs_to_errno(ret);
   1ac98:	4628      	mov	r0, r5
}
   1ac9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   1ac9e:	f7ff bf5d 	b.w	1ab5c <lfs_to_errno>
}
   1aca2:	f06f 000b 	mvn.w	r0, #11
   1aca6:	bd70      	pop	{r4, r5, r6, pc}
   1aca8:	20008abc 	.word	0x20008abc

0001acac <littlefs_closedir>:
{
   1acac:	b570      	push	{r4, r5, r6, lr}
   1acae:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   1acb0:	6843      	ldr	r3, [r0, #4]
   1acb2:	691e      	ldr	r6, [r3, #16]
	fs_lock(fs);
   1acb4:	4630      	mov	r0, r6
   1acb6:	f012 fffc 	bl	2dcb2 <fs_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
   1acba:	6821      	ldr	r1, [r4, #0]
   1acbc:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1acc0:	f014 fe07 	bl	2f8d2 <lfs_dir_close>
   1acc4:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1acc6:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1acca:	f012 fff9 	bl	2dcc0 <k_mutex_unlock.isra.0>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   1acce:	4621      	mov	r1, r4
   1acd0:	4803      	ldr	r0, [pc, #12]	; (1ace0 <littlefs_closedir+0x34>)
   1acd2:	f00a f82d 	bl	24d30 <k_mem_slab_free>
	return lfs_to_errno(ret);
   1acd6:	4628      	mov	r0, r5
}
   1acd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   1acdc:	f7ff bf3e 	b.w	1ab5c <lfs_to_errno>
   1ace0:	20008abc 	.word	0x20008abc

0001ace4 <littlefs_unmount>:
{
   1ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fs->backend = NULL;
   1ace6:	2600      	movs	r6, #0
{
   1ace8:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
   1acea:	6904      	ldr	r4, [r0, #16]
{
   1acec:	af00      	add	r7, sp, #0
	fs_lock(fs);
   1acee:	4620      	mov	r0, r4
   1acf0:	f012 ffdf 	bl	2dcb2 <fs_lock>
	lfs_unmount(&fs->lfs);
   1acf4:	f104 0074 	add.w	r0, r4, #116	; 0x74
   1acf8:	f014 fdd4 	bl	2f8a4 <lfs_unmount>
		flash_area_close(fs->backend);
   1acfc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ad00:	f010 fa5b 	bl	2b1ba <flash_area_close>
	fs->backend = NULL;
   1ad04:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
	k_mutex_unlock(&fs->mutex);
   1ad08:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   1ad0c:	f012 ffd8 	bl	2dcc0 <k_mutex_unlock.isra.0>
	LOG_INF("%s unmounted", mountp->mnt_point);
   1ad10:	b088      	sub	sp, #32
   1ad12:	466a      	mov	r2, sp
   1ad14:	68eb      	ldr	r3, [r5, #12]
   1ad16:	4908      	ldr	r1, [pc, #32]	; (1ad38 <littlefs_unmount+0x54>)
   1ad18:	4808      	ldr	r0, [pc, #32]	; (1ad3c <littlefs_unmount+0x58>)
   1ad1a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ad1e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ad22:	8393      	strh	r3, [r2, #28]
   1ad24:	4b06      	ldr	r3, [pc, #24]	; (1ad40 <littlefs_unmount+0x5c>)
   1ad26:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1ad2a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad2e:	f012 ffbd 	bl	2dcac <z_log_msg_static_create.constprop.0>
}
   1ad32:	4630      	mov	r0, r6
   1ad34:	46bd      	mov	sp, r7
   1ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad38:	000364fc 	.word	0x000364fc
   1ad3c:	00031544 	.word	0x00031544
   1ad40:	01000003 	.word	0x01000003

0001ad44 <littlefs_mount>:
{
   1ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad48:	b08b      	sub	sp, #44	; 0x2c
	struct fs_littlefs *fs = mountp->fs_data;
   1ad4a:	6904      	ldr	r4, [r0, #16]
{
   1ad4c:	af00      	add	r7, sp, #0
	k_mutex_init(&fs->mutex);
   1ad4e:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
{
   1ad52:	4606      	mov	r6, r0
	k_mutex_init(&fs->mutex);
   1ad54:	603b      	str	r3, [r7, #0]
	return z_impl_k_mutex_init(mutex);
   1ad56:	4618      	mov	r0, r3
   1ad58:	f015 f9fe 	bl	30158 <z_impl_k_mutex_init>
	fs_lock(fs);
   1ad5c:	4620      	mov	r0, r4
   1ad5e:	f012 ffa8 	bl	2dcb2 <fs_lock>
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   1ad62:	466d      	mov	r5, sp
   1ad64:	b08a      	sub	sp, #40	; 0x28
   1ad66:	466a      	mov	r2, sp
	ret = littlefs_init_fs(fs, (uintptr_t)mountp->storage_dev, mountp->flags);
   1ad68:	f8d6 8014 	ldr.w	r8, [r6, #20]
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   1ad6c:	4bb6      	ldr	r3, [pc, #728]	; (1b048 <littlefs_mount+0x304>)
   1ad6e:	2105      	movs	r1, #5
   1ad70:	6153      	str	r3, [r2, #20]
   1ad72:	2302      	movs	r3, #2
   1ad74:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1ad78:	6213      	str	r3, [r2, #32]
   1ad7a:	2300      	movs	r3, #0
   1ad7c:	6253      	str	r3, [r2, #36]	; 0x24
   1ad7e:	2306      	movs	r3, #6
   1ad80:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   1ad84:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad88:	48b0      	ldr	r0, [pc, #704]	; (1b04c <littlefs_mount+0x308>)
   1ad8a:	f012 ff8f 	bl	2dcac <z_log_msg_static_create.constprop.0>
	if (fs->backend) {
   1ad8e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ad92:	46ad      	mov	sp, r5
   1ad94:	2b00      	cmp	r3, #0
   1ad96:	f040 819f 	bne.w	1b0d8 <littlefs_mount+0x394>
	ret = flash_area_open(area_id, fap);
   1ad9a:	f104 01ec 	add.w	r1, r4, #236	; 0xec
   1ad9e:	fa5f f088 	uxtb.w	r0, r8
   1ada2:	f7f4 ffa3 	bl	fcec <flash_area_open>
	if ((ret < 0) || (*fap == NULL)) {
   1ada6:	2800      	cmp	r0, #0
   1ada8:	db02      	blt.n	1adb0 <littlefs_mount+0x6c>
   1adaa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1adae:	b9a0      	cbnz	r0, 1adda <littlefs_mount+0x96>
		LOG_ERR("can't open flash area %d", area_id);
   1adb0:	466d      	mov	r5, sp
   1adb2:	b088      	sub	sp, #32
   1adb4:	466a      	mov	r2, sp
   1adb6:	4ba6      	ldr	r3, [pc, #664]	; (1b050 <littlefs_mount+0x30c>)
   1adb8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1adbc:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1adc0:	2303      	movs	r3, #3
   1adc2:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("can't get flash device: %s",
   1adc6:	48a1      	ldr	r0, [pc, #644]	; (1b04c <littlefs_mount+0x308>)
   1adc8:	f012 ff70 	bl	2dcac <z_log_msg_static_create.constprop.0>
   1adcc:	46ad      	mov	sp, r5
			ret = -EROFS;
   1adce:	f06f 0512 	mvn.w	r5, #18
		fs->backend = NULL;
   1add2:	2300      	movs	r3, #0
   1add4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1add8:	e115      	b.n	1b006 <littlefs_mount+0x2c2>
	dev = flash_area_get_device(*fap);
   1adda:	f010 fa2d 	bl	2b238 <flash_area_get_device>
	if (dev == NULL) {
   1adde:	b988      	cbnz	r0, 1ae04 <littlefs_mount+0xc0>
		LOG_ERR("can't get flash device: %s",
   1ade0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ade4:	b088      	sub	sp, #32
   1ade6:	68db      	ldr	r3, [r3, #12]
   1ade8:	466a      	mov	r2, sp
   1adea:	681b      	ldr	r3, [r3, #0]
   1adec:	4999      	ldr	r1, [pc, #612]	; (1b054 <littlefs_mount+0x310>)
   1adee:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1adf2:	f44f 7300 	mov.w	r3, #512	; 0x200
   1adf6:	8393      	strh	r3, [r2, #28]
   1adf8:	4b97      	ldr	r3, [pc, #604]	; (1b058 <littlefs_mount+0x314>)
   1adfa:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1adfe:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae02:	e7e0      	b.n	1adc6 <littlefs_mount+0x82>
	lfs_size_t read_size = lcp->read_size;
   1ae04:	6963      	ldr	r3, [r4, #20]
	lfs_size_t prog_size = lcp->prog_size;
   1ae06:	f8d4 9018 	ldr.w	r9, [r4, #24]
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   1ae0a:	2b00      	cmp	r3, #0
   1ae0c:	bf08      	it	eq
   1ae0e:	2310      	moveq	r3, #16
	lfs_size_t block_size = lcp->block_size;
   1ae10:	69e5      	ldr	r5, [r4, #28]
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
   1ae12:	f1b9 0f00 	cmp.w	r9, #0
   1ae16:	bf08      	it	eq
   1ae18:	f04f 0910 	moveq.w	r9, #16
		LOG_ERR("can't get flash device: %s",
   1ae1c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   1ae20:	60fb      	str	r3, [r7, #12]
	if (block_size == 0) {
   1ae22:	b9b5      	cbnz	r5, 1ae52 <littlefs_mount+0x10e>
	struct get_page_ctx ctx = {
   1ae24:	e9c7 0504 	strd	r0, r5, [r7, #16]
	const struct device *dev = flash_area_get_device(fa);
   1ae28:	f010 fa06 	bl	2b238 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
   1ae2c:	498b      	ldr	r1, [pc, #556]	; (1b05c <littlefs_mount+0x318>)
   1ae2e:	f107 0210 	add.w	r2, r7, #16
   1ae32:	f013 fa78 	bl	2e326 <flash_page_foreach>
	return ctx.max_size;
   1ae36:	697d      	ldr	r5, [r7, #20]
	if (block_size == 0) {
   1ae38:	b95d      	cbnz	r5, 1ae52 <littlefs_mount+0x10e>
		__ASSERT_NO_MSG(block_size != 0);
   1ae3a:	4989      	ldr	r1, [pc, #548]	; (1b060 <littlefs_mount+0x31c>)
   1ae3c:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1ae40:	4a88      	ldr	r2, [pc, #544]	; (1b064 <littlefs_mount+0x320>)
   1ae42:	4889      	ldr	r0, [pc, #548]	; (1b068 <littlefs_mount+0x324>)
   1ae44:	f00f fc25 	bl	2a692 <assert_print>
   1ae48:	f44f 7133 	mov.w	r1, #716	; 0x2cc
	__ASSERT((block_size % prog_size) == 0,
   1ae4c:	4885      	ldr	r0, [pc, #532]	; (1b064 <littlefs_mount+0x320>)
   1ae4e:	f00f fc19 	bl	2a684 <assert_post_action>
	int32_t block_cycles = lcp->block_cycles;
   1ae52:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
	if (block_cycles == 0) {
   1ae56:	f1ba 0f00 	cmp.w	sl, #0
   1ae5a:	d05b      	beq.n	1af14 <littlefs_mount+0x1d0>
	if (block_cycles <= 0) {
   1ae5c:	dc01      	bgt.n	1ae62 <littlefs_mount+0x11e>
		block_cycles = -1;
   1ae5e:	f04f 3aff 	mov.w	sl, #4294967295
		block_count = ((struct flash_area *)fs->backend)->fa_size
   1ae62:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
	lfs_size_t cache_size = lcp->cache_size;
   1ae66:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
			/ block_size;
   1ae6a:	6882      	ldr	r2, [r0, #8]
	lfs_size_t lookahead_size = lcp->lookahead_size;
   1ae6c:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
			/ block_size;
   1ae70:	fbb2 f3f5 	udiv	r3, r2, r5
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
   1ae74:	f1b8 0f00 	cmp.w	r8, #0
   1ae78:	bf08      	it	eq
   1ae7a:	f04f 0840 	moveq.w	r8, #64	; 0x40
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
   1ae7e:	f1bb 0f00 	cmp.w	fp, #0
   1ae82:	bf08      	it	eq
   1ae84:	f04f 0b20 	moveq.w	fp, #32
			/ block_size;
   1ae88:	607b      	str	r3, [r7, #4]
			flash_area_get_device((struct flash_area *)fs->backend);
   1ae8a:	f010 f9d5 	bl	2b238 <flash_area_get_device>
		LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
   1ae8e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   1ae92:	f8c7 d008 	str.w	sp, [r7, #8]
   1ae96:	b08c      	sub	sp, #48	; 0x30
   1ae98:	6851      	ldr	r1, [r2, #4]
   1ae9a:	6800      	ldr	r0, [r0, #0]
   1ae9c:	466a      	mov	r2, sp
   1ae9e:	61d1      	str	r1, [r2, #28]
   1aea0:	f44f 7100 	mov.w	r1, #512	; 0x200
   1aea4:	4b71      	ldr	r3, [pc, #452]	; (1b06c <littlefs_mount+0x328>)
   1aea6:	8591      	strh	r1, [r2, #44]	; 0x2c
   1aea8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1aeac:	4970      	ldr	r1, [pc, #448]	; (1b070 <littlefs_mount+0x32c>)
   1aeae:	687b      	ldr	r3, [r7, #4]
   1aeb0:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
   1aeb4:	e9c2 3508 	strd	r3, r5, [r2, #32]
   1aeb8:	4864      	ldr	r0, [pc, #400]	; (1b04c <littlefs_mount+0x308>)
   1aeba:	f842 1f10 	str.w	r1, [r2, #16]!
   1aebe:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   1aec2:	f012 fef3 	bl	2dcac <z_log_msg_static_create.constprop.0>
   1aec6:	f8d7 d008 	ldr.w	sp, [r7, #8]
		LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
   1aeca:	b08a      	sub	sp, #40	; 0x28
   1aecc:	466a      	mov	r2, sp
   1aece:	4969      	ldr	r1, [pc, #420]	; (1b074 <littlefs_mount+0x330>)
   1aed0:	68fb      	ldr	r3, [r7, #12]
   1aed2:	6151      	str	r1, [r2, #20]
   1aed4:	2106      	movs	r1, #6
   1aed6:	e9c2 3906 	strd	r3, r9, [r2, #24]
   1aeda:	e9c2 8b08 	strd	r8, fp, [r2, #32]
   1aede:	485b      	ldr	r0, [pc, #364]	; (1b04c <littlefs_mount+0x308>)
   1aee0:	f842 1f10 	str.w	r1, [r2, #16]!
   1aee4:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   1aee8:	f012 fee0 	bl	2dcac <z_log_msg_static_create.constprop.0>
	__ASSERT((block_size % prog_size) == 0,
   1aeec:	fbb5 f2f9 	udiv	r2, r5, r9
   1aef0:	fb09 5212 	mls	r2, r9, r2, r5
   1aef4:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1aef8:	b17a      	cbz	r2, 1af1a <littlefs_mount+0x1d6>
   1aefa:	495f      	ldr	r1, [pc, #380]	; (1b078 <littlefs_mount+0x334>)
   1aefc:	f240 3306 	movw	r3, #774	; 0x306
   1af00:	4a58      	ldr	r2, [pc, #352]	; (1b064 <littlefs_mount+0x320>)
   1af02:	4859      	ldr	r0, [pc, #356]	; (1b068 <littlefs_mount+0x324>)
   1af04:	f00f fbc5 	bl	2a692 <assert_print>
   1af08:	485c      	ldr	r0, [pc, #368]	; (1b07c <littlefs_mount+0x338>)
   1af0a:	f00f fbc2 	bl	2a692 <assert_print>
   1af0e:	f240 3106 	movw	r1, #774	; 0x306
   1af12:	e79b      	b.n	1ae4c <littlefs_mount+0x108>
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
   1af14:	f44f 7a00 	mov.w	sl, #512	; 0x200
   1af18:	e7a3      	b.n	1ae62 <littlefs_mount+0x11e>
	__ASSERT((block_size % cache_size) == 0,
   1af1a:	fbb5 f2f8 	udiv	r2, r5, r8
   1af1e:	fb08 5212 	mls	r2, r8, r2, r5
   1af22:	b162      	cbz	r2, 1af3e <littlefs_mount+0x1fa>
   1af24:	4956      	ldr	r1, [pc, #344]	; (1b080 <littlefs_mount+0x33c>)
   1af26:	f44f 7342 	mov.w	r3, #776	; 0x308
   1af2a:	4a4e      	ldr	r2, [pc, #312]	; (1b064 <littlefs_mount+0x320>)
   1af2c:	484e      	ldr	r0, [pc, #312]	; (1b068 <littlefs_mount+0x324>)
   1af2e:	f00f fbb0 	bl	2a692 <assert_print>
   1af32:	4854      	ldr	r0, [pc, #336]	; (1b084 <littlefs_mount+0x340>)
   1af34:	f00f fbad 	bl	2a692 <assert_print>
   1af38:	f44f 7142 	mov.w	r1, #776	; 0x308
   1af3c:	e786      	b.n	1ae4c <littlefs_mount+0x108>
	lcp->context = fs->backend;
   1af3e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   1af42:	6022      	str	r2, [r4, #0]
		__ASSERT((((struct flash_area *)fs->backend)->fa_size %
   1af44:	6892      	ldr	r2, [r2, #8]
   1af46:	fbb2 f1f5 	udiv	r1, r2, r5
   1af4a:	fb05 2211 	mls	r2, r5, r1, r2
   1af4e:	b162      	cbz	r2, 1af6a <littlefs_mount+0x226>
   1af50:	494d      	ldr	r1, [pc, #308]	; (1b088 <littlefs_mount+0x344>)
   1af52:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1af56:	4a43      	ldr	r2, [pc, #268]	; (1b064 <littlefs_mount+0x320>)
   1af58:	4843      	ldr	r0, [pc, #268]	; (1b068 <littlefs_mount+0x324>)
   1af5a:	f00f fb9a 	bl	2a692 <assert_print>
   1af5e:	484b      	ldr	r0, [pc, #300]	; (1b08c <littlefs_mount+0x348>)
   1af60:	f00f fb97 	bl	2a692 <assert_print>
   1af64:	f44f 7147 	mov.w	r1, #796	; 0x31c
   1af68:	e770      	b.n	1ae4c <littlefs_mount+0x108>
		lcp->read_size = read_size;
   1af6a:	68fb      	ldr	r3, [r7, #12]
		lcp->read = lfs_api_read;
   1af6c:	4a48      	ldr	r2, [pc, #288]	; (1b090 <littlefs_mount+0x34c>)
		lcp->prog_size = prog_size;
   1af6e:	e9c4 3905 	strd	r3, r9, [r4, #20]
		lcp->read = lfs_api_read;
   1af72:	6062      	str	r2, [r4, #4]
		lcp->sync = lfs_api_sync;
   1af74:	4b47      	ldr	r3, [pc, #284]	; (1b094 <littlefs_mount+0x350>)
		lcp->prog = lfs_api_prog;
   1af76:	4a48      	ldr	r2, [pc, #288]	; (1b098 <littlefs_mount+0x354>)
		lcp->sync = lfs_api_sync;
   1af78:	6123      	str	r3, [r4, #16]
		lcp->prog = lfs_api_prog;
   1af7a:	60a2      	str	r2, [r4, #8]
	lcp->block_count = block_count;
   1af7c:	687b      	ldr	r3, [r7, #4]
		lcp->erase = lfs_api_erase;
   1af7e:	4a47      	ldr	r2, [pc, #284]	; (1b09c <littlefs_mount+0x358>)
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1af80:	f104 0974 	add.w	r9, r4, #116	; 0x74
	lcp->block_size = block_size;
   1af84:	61e5      	str	r5, [r4, #28]
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1af86:	4621      	mov	r1, r4
   1af88:	4648      	mov	r0, r9
		lcp->lookahead_size = lookahead_size;
   1af8a:	e9c4 8b0a 	strd	r8, fp, [r4, #40]	; 0x28
	lcp->block_cycles = block_cycles;
   1af8e:	e9c4 3a08 	strd	r3, sl, [r4, #32]
		lcp->erase = lfs_api_erase;
   1af92:	60e2      	str	r2, [r4, #12]
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1af94:	f008 f9a2 	bl	232dc <lfs_mount>
	if (ret < 0 &&
   1af98:	1e05      	subs	r5, r0, #0
   1af9a:	f280 8089 	bge.w	1b0b0 <littlefs_mount+0x36c>
   1af9e:	f896 3020 	ldrb.w	r3, [r6, #32]
   1afa2:	07da      	lsls	r2, r3, #31
   1afa4:	f100 8084 	bmi.w	1b0b0 <littlefs_mount+0x36c>
		LOG_WRN("can't mount (LFS %d); formatting", ret);
   1afa8:	b088      	sub	sp, #32
   1afaa:	466a      	mov	r2, sp
   1afac:	f04f 0803 	mov.w	r8, #3
   1afb0:	4b3b      	ldr	r3, [pc, #236]	; (1b0a0 <littlefs_mount+0x35c>)
   1afb2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1afb6:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1afba:	4824      	ldr	r0, [pc, #144]	; (1b04c <littlefs_mount+0x308>)
   1afbc:	f842 8f10 	str.w	r8, [r2, #16]!
   1afc0:	f012 fe74 	bl	2dcac <z_log_msg_static_create.constprop.0>
		if ((mountp->flags & FS_MOUNT_FLAG_READ_ONLY) == 0) {
   1afc4:	f896 3020 	ldrb.w	r3, [r6, #32]
   1afc8:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1afcc:	079b      	lsls	r3, r3, #30
   1afce:	d422      	bmi.n	1b016 <littlefs_mount+0x2d2>
			ret = lfs_format(&fs->lfs, &fs->cfg);
   1afd0:	4621      	mov	r1, r4
   1afd2:	4648      	mov	r0, r9
   1afd4:	f008 f91e 	bl	23214 <lfs_format>
			if (ret < 0) {
   1afd8:	1e05      	subs	r5, r0, #0
   1afda:	da2a      	bge.n	1b032 <littlefs_mount+0x2ee>
				LOG_ERR("format failed (LFS %d)", ret);
   1afdc:	b088      	sub	sp, #32
   1afde:	466a      	mov	r2, sp
   1afe0:	4b30      	ldr	r3, [pc, #192]	; (1b0a4 <littlefs_mount+0x360>)
			LOG_ERR("remount after format failed (LFS %d)", ret);
   1afe2:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1afe6:	4819      	ldr	r0, [pc, #100]	; (1b04c <littlefs_mount+0x308>)
   1afe8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1afec:	f842 8f10 	str.w	r8, [r2, #16]!
   1aff0:	f012 fe5c 	bl	2dcac <z_log_msg_static_create.constprop.0>
			ret = lfs_to_errno(ret);
   1aff4:	4628      	mov	r0, r5
   1aff6:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1affa:	f7ff fdaf 	bl	1ab5c <lfs_to_errno>
   1affe:	4605      	mov	r5, r0
	if (ret < 0) {
   1b000:	2d00      	cmp	r5, #0
   1b002:	f6ff aee6 	blt.w	1add2 <littlefs_mount+0x8e>
	k_mutex_unlock(&fs->mutex);
   1b006:	6838      	ldr	r0, [r7, #0]
   1b008:	f012 fe5a 	bl	2dcc0 <k_mutex_unlock.isra.0>
}
   1b00c:	4628      	mov	r0, r5
   1b00e:	372c      	adds	r7, #44	; 0x2c
   1b010:	46bd      	mov	sp, r7
   1b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("can not format read-only system");
   1b016:	4b24      	ldr	r3, [pc, #144]	; (1b0a8 <littlefs_mount+0x364>)
   1b018:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b01c:	627b      	str	r3, [r7, #36]	; 0x24
   1b01e:	2302      	movs	r3, #2
   1b020:	480a      	ldr	r0, [pc, #40]	; (1b04c <littlefs_mount+0x308>)
   1b022:	623b      	str	r3, [r7, #32]
   1b024:	f107 0220 	add.w	r2, r7, #32
   1b028:	f012 fe40 	bl	2dcac <z_log_msg_static_create.constprop.0>
			ret = -EROFS;
   1b02c:	f06f 051d 	mvn.w	r5, #29
   1b030:	e6cf      	b.n	1add2 <littlefs_mount+0x8e>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
   1b032:	4621      	mov	r1, r4
   1b034:	4648      	mov	r0, r9
   1b036:	f008 f951 	bl	232dc <lfs_mount>
		if (ret < 0) {
   1b03a:	1e05      	subs	r5, r0, #0
   1b03c:	da38      	bge.n	1b0b0 <littlefs_mount+0x36c>
			LOG_ERR("remount after format failed (LFS %d)", ret);
   1b03e:	b088      	sub	sp, #32
   1b040:	466a      	mov	r2, sp
   1b042:	4b1a      	ldr	r3, [pc, #104]	; (1b0ac <littlefs_mount+0x368>)
   1b044:	e7cd      	b.n	1afe2 <littlefs_mount+0x29e>
   1b046:	bf00      	nop
   1b048:	00036509 	.word	0x00036509
   1b04c:	00031544 	.word	0x00031544
   1b050:	00036534 	.word	0x00036534
   1b054:	0003654d 	.word	0x0003654d
   1b058:	01000003 	.word	0x01000003
   1b05c:	0002dc0b 	.word	0x0002dc0b
   1b060:	00036593 	.word	0x00036593
   1b064:	00036568 	.word	0x00036568
   1b068:	00032629 	.word	0x00032629
   1b06c:	000365a3 	.word	0x000365a3
   1b070:	01000007 	.word	0x01000007
   1b074:	000365d6 	.word	0x000365d6
   1b078:	000365fb 	.word	0x000365fb
   1b07c:	00036619 	.word	0x00036619
   1b080:	00036645 	.word	0x00036645
   1b084:	00036664 	.word	0x00036664
   1b088:	0003668e 	.word	0x0003668e
   1b08c:	000366ce 	.word	0x000366ce
   1b090:	0002dc67 	.word	0x0002dc67
   1b094:	0002dc07 	.word	0x0002dc07
   1b098:	0002dc4b 	.word	0x0002dc4b
   1b09c:	0002dc37 	.word	0x0002dc37
   1b0a0:	000366fe 	.word	0x000366fe
   1b0a4:	0003674d 	.word	0x0003674d
   1b0a8:	0003671f 	.word	0x0003671f
   1b0ac:	0003673f 	.word	0x0003673f
	LOG_INF("%s mounted", mountp->mnt_point);
   1b0b0:	68f3      	ldr	r3, [r6, #12]
   1b0b2:	466e      	mov	r6, sp
   1b0b4:	b088      	sub	sp, #32
   1b0b6:	466a      	mov	r2, sp
   1b0b8:	4909      	ldr	r1, [pc, #36]	; (1b0e0 <littlefs_mount+0x39c>)
   1b0ba:	480a      	ldr	r0, [pc, #40]	; (1b0e4 <littlefs_mount+0x3a0>)
   1b0bc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b0c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b0c4:	8393      	strh	r3, [r2, #28]
   1b0c6:	4b08      	ldr	r3, [pc, #32]	; (1b0e8 <littlefs_mount+0x3a4>)
   1b0c8:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1b0cc:	f842 3f10 	str.w	r3, [r2, #16]!
   1b0d0:	f012 fdec 	bl	2dcac <z_log_msg_static_create.constprop.0>
   1b0d4:	46b5      	mov	sp, r6
   1b0d6:	e793      	b.n	1b000 <littlefs_mount+0x2bc>
		return -EBUSY;
   1b0d8:	f06f 050f 	mvn.w	r5, #15
   1b0dc:	e679      	b.n	1add2 <littlefs_mount+0x8e>
   1b0de:	bf00      	nop
   1b0e0:	00036764 	.word	0x00036764
   1b0e4:	00031544 	.word	0x00031544
   1b0e8:	01000003 	.word	0x01000003

0001b0ec <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b0ec:	2234      	movs	r2, #52	; 0x34
   1b0ee:	4b02      	ldr	r3, [pc, #8]	; (1b0f8 <net_buf_pool_get+0xc>)
   1b0f0:	fb02 3000 	mla	r0, r2, r0, r3
   1b0f4:	4770      	bx	lr
   1b0f6:	bf00      	nop
   1b0f8:	20008cd4 	.word	0x20008cd4

0001b0fc <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b0fc:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b0fe:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b100:	4b06      	ldr	r3, [pc, #24]	; (1b11c <net_buf_id+0x20>)
   1b102:	fb01 3302 	mla	r3, r1, r2, r3
   1b106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b10c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b10e:	331b      	adds	r3, #27
   1b110:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1b114:	fbb0 f0f3 	udiv	r0, r0, r3
   1b118:	4770      	bx	lr
   1b11a:	bf00      	nop
   1b11c:	20008cd4 	.word	0x20008cd4

0001b120 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b120:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b122:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b124:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b126:	4b09      	ldr	r3, [pc, #36]	; (1b14c <fixed_data_alloc+0x2c>)
   1b128:	fb04 3302 	mla	r3, r4, r2, r3
   1b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   1b12e:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b130:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b132:	681a      	ldr	r2, [r3, #0]
   1b134:	4294      	cmp	r4, r2
   1b136:	bf94      	ite	ls
   1b138:	600c      	strls	r4, [r1, #0]
   1b13a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b13c:	e9d3 5400 	ldrd	r5, r4, [r3]
   1b140:	f7ff ffdc 	bl	1b0fc <net_buf_id>
}
   1b144:	fb05 4000 	mla	r0, r5, r0, r4
   1b148:	bd38      	pop	{r3, r4, r5, pc}
   1b14a:	bf00      	nop
   1b14c:	20008cd4 	.word	0x20008cd4

0001b150 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b154:	b085      	sub	sp, #20
   1b156:	9103      	str	r1, [sp, #12]
   1b158:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b15a:	4619      	mov	r1, r3
   1b15c:	4610      	mov	r0, r2
{
   1b15e:	4692      	mov	sl, r2
   1b160:	4699      	mov	r9, r3
   1b162:	4690      	mov	r8, r2
   1b164:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b166:	f015 f8db 	bl	30320 <sys_clock_timeout_end_calc>
   1b16a:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1b16e:	b945      	cbnz	r5, 1b182 <net_buf_alloc_len+0x32>
   1b170:	4966      	ldr	r1, [pc, #408]	; (1b30c <net_buf_alloc_len+0x1bc>)
   1b172:	23f4      	movs	r3, #244	; 0xf4
   1b174:	4a66      	ldr	r2, [pc, #408]	; (1b310 <net_buf_alloc_len+0x1c0>)
   1b176:	4867      	ldr	r0, [pc, #412]	; (1b314 <net_buf_alloc_len+0x1c4>)
   1b178:	f00f fa8b 	bl	2a692 <assert_print>
   1b17c:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1b17e:	4864      	ldr	r0, [pc, #400]	; (1b310 <net_buf_alloc_len+0x1c0>)
   1b180:	e019      	b.n	1b1b6 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1b182:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1b186:	f04f 0320 	mov.w	r3, #32
   1b18a:	f3ef 8b11 	mrs	fp, BASEPRI
   1b18e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b192:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b196:	4630      	mov	r0, r6
   1b198:	f009 ff4a 	bl	25030 <z_spin_lock_valid>
   1b19c:	b968      	cbnz	r0, 1b1ba <net_buf_alloc_len+0x6a>
   1b19e:	2394      	movs	r3, #148	; 0x94
   1b1a0:	4a5d      	ldr	r2, [pc, #372]	; (1b318 <net_buf_alloc_len+0x1c8>)
   1b1a2:	495e      	ldr	r1, [pc, #376]	; (1b31c <net_buf_alloc_len+0x1cc>)
   1b1a4:	485b      	ldr	r0, [pc, #364]	; (1b314 <net_buf_alloc_len+0x1c4>)
   1b1a6:	f00f fa74 	bl	2a692 <assert_print>
   1b1aa:	4631      	mov	r1, r6
   1b1ac:	485c      	ldr	r0, [pc, #368]	; (1b320 <net_buf_alloc_len+0x1d0>)
   1b1ae:	f00f fa70 	bl	2a692 <assert_print>
   1b1b2:	2194      	movs	r1, #148	; 0x94
   1b1b4:	4858      	ldr	r0, [pc, #352]	; (1b318 <net_buf_alloc_len+0x1c8>)
   1b1b6:	f00f fa65 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b1ba:	4630      	mov	r0, r6
   1b1bc:	f009 ff54 	bl	25068 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1b1c0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1b1c2:	2b00      	cmp	r3, #0
   1b1c4:	d070      	beq.n	1b2a8 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1b1c6:	8c2a      	ldrh	r2, [r5, #32]
   1b1c8:	429a      	cmp	r2, r3
   1b1ca:	d94d      	bls.n	1b268 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1b1cc:	2200      	movs	r2, #0
   1b1ce:	2300      	movs	r3, #0
   1b1d0:	4628      	mov	r0, r5
   1b1d2:	f00a f97b 	bl	254cc <z_impl_k_queue_get>
			if (buf) {
   1b1d6:	4604      	mov	r4, r0
   1b1d8:	2800      	cmp	r0, #0
   1b1da:	d045      	beq.n	1b268 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b1dc:	4630      	mov	r0, r6
   1b1de:	f009 ff35 	bl	2504c <z_spin_unlock_valid>
   1b1e2:	b958      	cbnz	r0, 1b1fc <net_buf_alloc_len+0xac>
   1b1e4:	23c2      	movs	r3, #194	; 0xc2
   1b1e6:	4a4c      	ldr	r2, [pc, #304]	; (1b318 <net_buf_alloc_len+0x1c8>)
   1b1e8:	494e      	ldr	r1, [pc, #312]	; (1b324 <net_buf_alloc_len+0x1d4>)
   1b1ea:	484a      	ldr	r0, [pc, #296]	; (1b314 <net_buf_alloc_len+0x1c4>)
   1b1ec:	f00f fa51 	bl	2a692 <assert_print>
   1b1f0:	4631      	mov	r1, r6
   1b1f2:	484d      	ldr	r0, [pc, #308]	; (1b328 <net_buf_alloc_len+0x1d8>)
   1b1f4:	f00f fa4d 	bl	2a692 <assert_print>
   1b1f8:	21c2      	movs	r1, #194	; 0xc2
   1b1fa:	e7db      	b.n	1b1b4 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1b1fc:	f38b 8811 	msr	BASEPRI, fp
   1b200:	f3bf 8f6f 	isb	sy
	if (size) {
   1b204:	9d03      	ldr	r5, [sp, #12]
   1b206:	2d00      	cmp	r5, #0
   1b208:	d074      	beq.n	1b2f4 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b20a:	ea59 030a 	orrs.w	r3, r9, sl
   1b20e:	d012      	beq.n	1b236 <net_buf_alloc_len+0xe6>
   1b210:	f1b9 3fff 	cmp.w	r9, #4294967295
   1b214:	bf08      	it	eq
   1b216:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1b21a:	d00c      	beq.n	1b236 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1b21c:	f00c fcd6 	bl	27bcc <sys_clock_tick_get>
   1b220:	9b01      	ldr	r3, [sp, #4]
   1b222:	ebb3 0800 	subs.w	r8, r3, r0
   1b226:	9b02      	ldr	r3, [sp, #8]
   1b228:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1b22c:	2f00      	cmp	r7, #0
   1b22e:	bfbc      	itt	lt
   1b230:	f04f 0800 	movlt.w	r8, #0
   1b234:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b236:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b23a:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b23c:	4e3b      	ldr	r6, [pc, #236]	; (1b32c <net_buf_alloc_len+0x1dc>)
   1b23e:	4642      	mov	r2, r8
   1b240:	fb09 6303 	mla	r3, r9, r3, r6
   1b244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b246:	4620      	mov	r0, r4
   1b248:	681b      	ldr	r3, [r3, #0]
   1b24a:	a903      	add	r1, sp, #12
   1b24c:	f8d3 a000 	ldr.w	sl, [r3]
   1b250:	463b      	mov	r3, r7
   1b252:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1b254:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1b256:	2800      	cmp	r0, #0
   1b258:	d13c      	bne.n	1b2d4 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1b25a:	7aa0      	ldrb	r0, [r4, #10]
   1b25c:	4621      	mov	r1, r4
   1b25e:	fb00 6009 	mla	r0, r0, r9, r6
   1b262:	f014 ffa4 	bl	301ae <k_queue_prepend>
}
   1b266:	e030      	b.n	1b2ca <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1b268:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1b26a:	4630      	mov	r0, r6
   1b26c:	1e63      	subs	r3, r4, #1
   1b26e:	846b      	strh	r3, [r5, #34]	; 0x22
   1b270:	f009 feec 	bl	2504c <z_spin_unlock_valid>
   1b274:	2800      	cmp	r0, #0
   1b276:	d0b5      	beq.n	1b1e4 <net_buf_alloc_len+0x94>
   1b278:	f38b 8811 	msr	BASEPRI, fp
   1b27c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b280:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b284:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b286:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b288:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b28a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b28c:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b290:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1b294:	4b25      	ldr	r3, [pc, #148]	; (1b32c <net_buf_alloc_len+0x1dc>)
   1b296:	4a26      	ldr	r2, [pc, #152]	; (1b330 <net_buf_alloc_len+0x1e0>)
   1b298:	1aeb      	subs	r3, r5, r3
   1b29a:	109b      	asrs	r3, r3, #2
   1b29c:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1b29e:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1b2a0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1b2a4:	72e3      	strb	r3, [r4, #11]
		goto success;
   1b2a6:	e7ad      	b.n	1b204 <net_buf_alloc_len+0xb4>
   1b2a8:	4630      	mov	r0, r6
   1b2aa:	f009 fecf 	bl	2504c <z_spin_unlock_valid>
   1b2ae:	2800      	cmp	r0, #0
   1b2b0:	d098      	beq.n	1b1e4 <net_buf_alloc_len+0x94>
   1b2b2:	f38b 8811 	msr	BASEPRI, fp
   1b2b6:	f3bf 8f6f 	isb	sy
   1b2ba:	4652      	mov	r2, sl
   1b2bc:	464b      	mov	r3, r9
   1b2be:	4628      	mov	r0, r5
   1b2c0:	f00a f904 	bl	254cc <z_impl_k_queue_get>
	if (!buf) {
   1b2c4:	4604      	mov	r4, r0
   1b2c6:	2800      	cmp	r0, #0
   1b2c8:	d19c      	bne.n	1b204 <net_buf_alloc_len+0xb4>
		return NULL;
   1b2ca:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1b2cc:	4620      	mov	r0, r4
   1b2ce:	b005      	add	sp, #20
   1b2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1b2d4:	9b03      	ldr	r3, [sp, #12]
   1b2d6:	429d      	cmp	r5, r3
   1b2d8:	d90d      	bls.n	1b2f6 <net_buf_alloc_len+0x1a6>
   1b2da:	4916      	ldr	r1, [pc, #88]	; (1b334 <net_buf_alloc_len+0x1e4>)
   1b2dc:	f240 1355 	movw	r3, #341	; 0x155
   1b2e0:	4a0b      	ldr	r2, [pc, #44]	; (1b310 <net_buf_alloc_len+0x1c0>)
   1b2e2:	480c      	ldr	r0, [pc, #48]	; (1b314 <net_buf_alloc_len+0x1c4>)
   1b2e4:	f00f f9d5 	bl	2a692 <assert_print>
   1b2e8:	4813      	ldr	r0, [pc, #76]	; (1b338 <net_buf_alloc_len+0x1e8>)
   1b2ea:	f00f f9d2 	bl	2a692 <assert_print>
   1b2ee:	f240 1155 	movw	r1, #341	; 0x155
   1b2f2:	e744      	b.n	1b17e <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1b2f4:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1b2f6:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1b2f8:	2201      	movs	r2, #1
	buf->frags = NULL;
   1b2fa:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1b2fc:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1b2fe:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1b300:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1b302:	6963      	ldr	r3, [r4, #20]
   1b304:	8262      	strh	r2, [r4, #18]
   1b306:	60e3      	str	r3, [r4, #12]
}
   1b308:	e7e0      	b.n	1b2cc <net_buf_alloc_len+0x17c>
   1b30a:	bf00      	nop
   1b30c:	00036873 	.word	0x00036873
   1b310:	00036824 	.word	0x00036824
   1b314:	00032629 	.word	0x00032629
   1b318:	0003338d 	.word	0x0003338d
   1b31c:	000333e6 	.word	0x000333e6
   1b320:	000333fb 	.word	0x000333fb
   1b324:	000333ba 	.word	0x000333ba
   1b328:	000333d1 	.word	0x000333d1
   1b32c:	20008cd4 	.word	0x20008cd4
   1b330:	c4ec4ec5 	.word	0xc4ec4ec5
   1b334:	00036878 	.word	0x00036878
   1b338:	00036889 	.word	0x00036889

0001b33c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1b33c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b33e:	b958      	cbnz	r0, 1b358 <net_buf_simple_reserve+0x1c>
   1b340:	490d      	ldr	r1, [pc, #52]	; (1b378 <net_buf_simple_reserve+0x3c>)
   1b342:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1b346:	4a0d      	ldr	r2, [pc, #52]	; (1b37c <net_buf_simple_reserve+0x40>)
   1b348:	480d      	ldr	r0, [pc, #52]	; (1b380 <net_buf_simple_reserve+0x44>)
   1b34a:	f00f f9a2 	bl	2a692 <assert_print>
   1b34e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1b352:	480a      	ldr	r0, [pc, #40]	; (1b37c <net_buf_simple_reserve+0x40>)
   1b354:	f00f f996 	bl	2a684 <assert_post_action>
   1b358:	8883      	ldrh	r3, [r0, #4]
   1b35a:	b14b      	cbz	r3, 1b370 <net_buf_simple_reserve+0x34>
   1b35c:	4909      	ldr	r1, [pc, #36]	; (1b384 <net_buf_simple_reserve+0x48>)
   1b35e:	f240 13b9 	movw	r3, #441	; 0x1b9
   1b362:	4a06      	ldr	r2, [pc, #24]	; (1b37c <net_buf_simple_reserve+0x40>)
   1b364:	4806      	ldr	r0, [pc, #24]	; (1b380 <net_buf_simple_reserve+0x44>)
   1b366:	f00f f994 	bl	2a692 <assert_print>
   1b36a:	f240 11b9 	movw	r1, #441	; 0x1b9
   1b36e:	e7f0      	b.n	1b352 <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1b370:	6883      	ldr	r3, [r0, #8]
   1b372:	440b      	add	r3, r1
   1b374:	6003      	str	r3, [r0, #0]
}
   1b376:	bd08      	pop	{r3, pc}
   1b378:	00036908 	.word	0x00036908
   1b37c:	00036824 	.word	0x00036824
   1b380:	00032629 	.word	0x00032629
   1b384:	0003688c 	.word	0x0003688c

0001b388 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1b388:	b570      	push	{r4, r5, r6, lr}
   1b38a:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b38c:	4605      	mov	r5, r0
   1b38e:	b958      	cbnz	r0, 1b3a8 <net_buf_slist_put+0x20>
   1b390:	4928      	ldr	r1, [pc, #160]	; (1b434 <net_buf_slist_put+0xac>)
   1b392:	f240 13c5 	movw	r3, #453	; 0x1c5
   1b396:	4a28      	ldr	r2, [pc, #160]	; (1b438 <net_buf_slist_put+0xb0>)
   1b398:	4828      	ldr	r0, [pc, #160]	; (1b43c <net_buf_slist_put+0xb4>)
   1b39a:	f00f f97a 	bl	2a692 <assert_print>
   1b39e:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1b3a2:	4825      	ldr	r0, [pc, #148]	; (1b438 <net_buf_slist_put+0xb0>)
   1b3a4:	f00f f96e 	bl	2a684 <assert_post_action>
   1b3a8:	b949      	cbnz	r1, 1b3be <net_buf_slist_put+0x36>
   1b3aa:	4925      	ldr	r1, [pc, #148]	; (1b440 <net_buf_slist_put+0xb8>)
   1b3ac:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1b3b0:	4a21      	ldr	r2, [pc, #132]	; (1b438 <net_buf_slist_put+0xb0>)
   1b3b2:	4822      	ldr	r0, [pc, #136]	; (1b43c <net_buf_slist_put+0xb4>)
   1b3b4:	f00f f96d 	bl	2a692 <assert_print>
   1b3b8:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1b3bc:	e7f1      	b.n	1b3a2 <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1b3be:	f04f 0320 	mov.w	r3, #32
   1b3c2:	f3ef 8611 	mrs	r6, BASEPRI
   1b3c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3ce:	481d      	ldr	r0, [pc, #116]	; (1b444 <net_buf_slist_put+0xbc>)
   1b3d0:	f009 fe2e 	bl	25030 <z_spin_lock_valid>
   1b3d4:	b960      	cbnz	r0, 1b3f0 <net_buf_slist_put+0x68>
   1b3d6:	2394      	movs	r3, #148	; 0x94
   1b3d8:	4a1b      	ldr	r2, [pc, #108]	; (1b448 <net_buf_slist_put+0xc0>)
   1b3da:	491c      	ldr	r1, [pc, #112]	; (1b44c <net_buf_slist_put+0xc4>)
   1b3dc:	4817      	ldr	r0, [pc, #92]	; (1b43c <net_buf_slist_put+0xb4>)
   1b3de:	f00f f958 	bl	2a692 <assert_print>
   1b3e2:	4918      	ldr	r1, [pc, #96]	; (1b444 <net_buf_slist_put+0xbc>)
   1b3e4:	481a      	ldr	r0, [pc, #104]	; (1b450 <net_buf_slist_put+0xc8>)
   1b3e6:	f00f f954 	bl	2a692 <assert_print>
   1b3ea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b3ec:	4816      	ldr	r0, [pc, #88]	; (1b448 <net_buf_slist_put+0xc0>)
   1b3ee:	e7d9      	b.n	1b3a4 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1b3f0:	4814      	ldr	r0, [pc, #80]	; (1b444 <net_buf_slist_put+0xbc>)
   1b3f2:	f009 fe39 	bl	25068 <z_spin_lock_set_owner>
	parent->next = child;
   1b3f6:	2300      	movs	r3, #0
   1b3f8:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b3fa:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1b3fc:	b98b      	cbnz	r3, 1b422 <net_buf_slist_put+0x9a>
	list->head = node;
   1b3fe:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b402:	4810      	ldr	r0, [pc, #64]	; (1b444 <net_buf_slist_put+0xbc>)
   1b404:	f009 fe22 	bl	2504c <z_spin_unlock_valid>
   1b408:	b970      	cbnz	r0, 1b428 <net_buf_slist_put+0xa0>
   1b40a:	23c2      	movs	r3, #194	; 0xc2
   1b40c:	4a0e      	ldr	r2, [pc, #56]	; (1b448 <net_buf_slist_put+0xc0>)
   1b40e:	4911      	ldr	r1, [pc, #68]	; (1b454 <net_buf_slist_put+0xcc>)
   1b410:	480a      	ldr	r0, [pc, #40]	; (1b43c <net_buf_slist_put+0xb4>)
   1b412:	f00f f93e 	bl	2a692 <assert_print>
   1b416:	490b      	ldr	r1, [pc, #44]	; (1b444 <net_buf_slist_put+0xbc>)
   1b418:	480f      	ldr	r0, [pc, #60]	; (1b458 <net_buf_slist_put+0xd0>)
   1b41a:	f00f f93a 	bl	2a692 <assert_print>
   1b41e:	21c2      	movs	r1, #194	; 0xc2
   1b420:	e7e4      	b.n	1b3ec <net_buf_slist_put+0x64>
	parent->next = child;
   1b422:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b424:	606c      	str	r4, [r5, #4]
}
   1b426:	e7ec      	b.n	1b402 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1b428:	f386 8811 	msr	BASEPRI, r6
   1b42c:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1b430:	bd70      	pop	{r4, r5, r6, pc}
   1b432:	bf00      	nop
   1b434:	00034eee 	.word	0x00034eee
   1b438:	00036824 	.word	0x00036824
   1b43c:	00032629 	.word	0x00032629
   1b440:	00036908 	.word	0x00036908
   1b444:	200217b4 	.word	0x200217b4
   1b448:	0003338d 	.word	0x0003338d
   1b44c:	000333e6 	.word	0x000333e6
   1b450:	000333fb 	.word	0x000333fb
   1b454:	000333ba 	.word	0x000333ba
   1b458:	000333d1 	.word	0x000333d1

0001b45c <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1b45c:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b45e:	4604      	mov	r4, r0
   1b460:	b958      	cbnz	r0, 1b47a <net_buf_slist_get+0x1e>
   1b462:	4923      	ldr	r1, [pc, #140]	; (1b4f0 <net_buf_slist_get+0x94>)
   1b464:	4823      	ldr	r0, [pc, #140]	; (1b4f4 <net_buf_slist_get+0x98>)
   1b466:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1b46a:	4a23      	ldr	r2, [pc, #140]	; (1b4f8 <net_buf_slist_get+0x9c>)
   1b46c:	f00f f911 	bl	2a692 <assert_print>
   1b470:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1b474:	4820      	ldr	r0, [pc, #128]	; (1b4f8 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b476:	f00f f905 	bl	2a684 <assert_post_action>
	__asm__ volatile(
   1b47a:	f04f 0320 	mov.w	r3, #32
   1b47e:	f3ef 8611 	mrs	r6, BASEPRI
   1b482:	f383 8812 	msr	BASEPRI_MAX, r3
   1b486:	f3bf 8f6f 	isb	sy
   1b48a:	481c      	ldr	r0, [pc, #112]	; (1b4fc <net_buf_slist_get+0xa0>)
   1b48c:	f009 fdd0 	bl	25030 <z_spin_lock_valid>
   1b490:	b960      	cbnz	r0, 1b4ac <net_buf_slist_get+0x50>
   1b492:	2394      	movs	r3, #148	; 0x94
   1b494:	4a1a      	ldr	r2, [pc, #104]	; (1b500 <net_buf_slist_get+0xa4>)
   1b496:	491b      	ldr	r1, [pc, #108]	; (1b504 <net_buf_slist_get+0xa8>)
   1b498:	4816      	ldr	r0, [pc, #88]	; (1b4f4 <net_buf_slist_get+0x98>)
   1b49a:	f00f f8fa 	bl	2a692 <assert_print>
   1b49e:	4917      	ldr	r1, [pc, #92]	; (1b4fc <net_buf_slist_get+0xa0>)
   1b4a0:	4819      	ldr	r0, [pc, #100]	; (1b508 <net_buf_slist_get+0xac>)
   1b4a2:	f00f f8f6 	bl	2a692 <assert_print>
   1b4a6:	2194      	movs	r1, #148	; 0x94
   1b4a8:	4815      	ldr	r0, [pc, #84]	; (1b500 <net_buf_slist_get+0xa4>)
   1b4aa:	e7e4      	b.n	1b476 <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1b4ac:	4813      	ldr	r0, [pc, #76]	; (1b4fc <net_buf_slist_get+0xa0>)
   1b4ae:	f009 fddb 	bl	25068 <z_spin_lock_set_owner>
	return list->head;
   1b4b2:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1b4b4:	b12d      	cbz	r5, 1b4c2 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b4b6:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1b4b8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b4ba:	4295      	cmp	r5, r2
	list->head = node;
   1b4bc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1b4be:	bf08      	it	eq
   1b4c0:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b4c2:	480e      	ldr	r0, [pc, #56]	; (1b4fc <net_buf_slist_get+0xa0>)
   1b4c4:	f009 fdc2 	bl	2504c <z_spin_unlock_valid>
   1b4c8:	b958      	cbnz	r0, 1b4e2 <net_buf_slist_get+0x86>
   1b4ca:	23c2      	movs	r3, #194	; 0xc2
   1b4cc:	4a0c      	ldr	r2, [pc, #48]	; (1b500 <net_buf_slist_get+0xa4>)
   1b4ce:	490f      	ldr	r1, [pc, #60]	; (1b50c <net_buf_slist_get+0xb0>)
   1b4d0:	4808      	ldr	r0, [pc, #32]	; (1b4f4 <net_buf_slist_get+0x98>)
   1b4d2:	f00f f8de 	bl	2a692 <assert_print>
   1b4d6:	4909      	ldr	r1, [pc, #36]	; (1b4fc <net_buf_slist_get+0xa0>)
   1b4d8:	480d      	ldr	r0, [pc, #52]	; (1b510 <net_buf_slist_get+0xb4>)
   1b4da:	f00f f8da 	bl	2a692 <assert_print>
   1b4de:	21c2      	movs	r1, #194	; 0xc2
   1b4e0:	e7e2      	b.n	1b4a8 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1b4e2:	f386 8811 	msr	BASEPRI, r6
   1b4e6:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1b4ea:	4628      	mov	r0, r5
   1b4ec:	bd70      	pop	{r4, r5, r6, pc}
   1b4ee:	bf00      	nop
   1b4f0:	00034eee 	.word	0x00034eee
   1b4f4:	00032629 	.word	0x00032629
   1b4f8:	00036824 	.word	0x00036824
   1b4fc:	200217b4 	.word	0x200217b4
   1b500:	0003338d 	.word	0x0003338d
   1b504:	000333e6 	.word	0x000333e6
   1b508:	000333fb 	.word	0x000333fb
   1b50c:	000333ba 	.word	0x000333ba
   1b510:	000333d1 	.word	0x000333d1

0001b514 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1b514:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1b516:	b958      	cbnz	r0, 1b530 <net_buf_put+0x1c>
   1b518:	490d      	ldr	r1, [pc, #52]	; (1b550 <net_buf_put+0x3c>)
   1b51a:	f240 13df 	movw	r3, #479	; 0x1df
   1b51e:	4a0d      	ldr	r2, [pc, #52]	; (1b554 <net_buf_put+0x40>)
   1b520:	480d      	ldr	r0, [pc, #52]	; (1b558 <net_buf_put+0x44>)
   1b522:	f00f f8b6 	bl	2a692 <assert_print>
   1b526:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1b52a:	480a      	ldr	r0, [pc, #40]	; (1b554 <net_buf_put+0x40>)
   1b52c:	f00f f8aa 	bl	2a684 <assert_post_action>
   1b530:	b949      	cbnz	r1, 1b546 <net_buf_put+0x32>
   1b532:	490a      	ldr	r1, [pc, #40]	; (1b55c <net_buf_put+0x48>)
   1b534:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1b538:	4a06      	ldr	r2, [pc, #24]	; (1b554 <net_buf_put+0x40>)
   1b53a:	4807      	ldr	r0, [pc, #28]	; (1b558 <net_buf_put+0x44>)
   1b53c:	f00f f8a9 	bl	2a692 <assert_print>
   1b540:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1b544:	e7f1      	b.n	1b52a <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1b546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1b54a:	f014 be25 	b.w	30198 <k_queue_append>
   1b54e:	bf00      	nop
   1b550:	0003689b 	.word	0x0003689b
   1b554:	00036824 	.word	0x00036824
   1b558:	00032629 	.word	0x00032629
   1b55c:	00036908 	.word	0x00036908

0001b560 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1b560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1b564:	4605      	mov	r5, r0
   1b566:	b328      	cbz	r0, 1b5b4 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1b568:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1b56a:	f04f 0834 	mov.w	r8, #52	; 0x34
   1b56e:	4e1a      	ldr	r6, [pc, #104]	; (1b5d8 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1b570:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1b572:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1b574:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1b576:	3b01      	subs	r3, #1
   1b578:	b2db      	uxtb	r3, r3
   1b57a:	7223      	strb	r3, [r4, #8]
   1b57c:	b9c3      	cbnz	r3, 1b5b0 <net_buf_unref+0x50>
		if (buf->__buf) {
   1b57e:	6961      	ldr	r1, [r4, #20]
   1b580:	b159      	cbz	r1, 1b59a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1b582:	7a63      	ldrb	r3, [r4, #9]
   1b584:	07db      	lsls	r3, r3, #31
   1b586:	d407      	bmi.n	1b598 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b588:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1b58a:	4620      	mov	r0, r4
   1b58c:	fb08 6303 	mla	r3, r8, r3, r6
   1b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b592:	681b      	ldr	r3, [r3, #0]
   1b594:	689b      	ldr	r3, [r3, #8]
   1b596:	4798      	blx	r3
			buf->__buf = NULL;
   1b598:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1b59a:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1b59c:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1b59e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1b5a2:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1b5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b5a6:	b18b      	cbz	r3, 1b5cc <net_buf_unref+0x6c>
			pool->destroy(buf);
   1b5a8:	4620      	mov	r0, r4
   1b5aa:	4798      	blx	r3
	while (buf) {
   1b5ac:	2d00      	cmp	r5, #0
   1b5ae:	d1df      	bne.n	1b570 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1b5b4:	4909      	ldr	r1, [pc, #36]	; (1b5dc <net_buf_unref+0x7c>)
   1b5b6:	480a      	ldr	r0, [pc, #40]	; (1b5e0 <net_buf_unref+0x80>)
   1b5b8:	f240 13eb 	movw	r3, #491	; 0x1eb
   1b5bc:	4a09      	ldr	r2, [pc, #36]	; (1b5e4 <net_buf_unref+0x84>)
   1b5be:	f00f f868 	bl	2a692 <assert_print>
   1b5c2:	f240 11eb 	movw	r1, #491	; 0x1eb
   1b5c6:	4807      	ldr	r0, [pc, #28]	; (1b5e4 <net_buf_unref+0x84>)
   1b5c8:	f00f f85c 	bl	2a684 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1b5cc:	4621      	mov	r1, r4
   1b5ce:	fb00 6008 	mla	r0, r0, r8, r6
   1b5d2:	f014 fdec 	bl	301ae <k_queue_prepend>
}
   1b5d6:	e7e9      	b.n	1b5ac <net_buf_unref+0x4c>
   1b5d8:	20008cd4 	.word	0x20008cd4
   1b5dc:	00036908 	.word	0x00036908
   1b5e0:	00032629 	.word	0x00032629
   1b5e4:	00036824 	.word	0x00036824

0001b5e8 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1b5e8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b5ea:	b958      	cbnz	r0, 1b604 <net_buf_ref+0x1c>
   1b5ec:	4907      	ldr	r1, [pc, #28]	; (1b60c <net_buf_ref+0x24>)
   1b5ee:	4808      	ldr	r0, [pc, #32]	; (1b610 <net_buf_ref+0x28>)
   1b5f0:	f240 231a 	movw	r3, #538	; 0x21a
   1b5f4:	4a07      	ldr	r2, [pc, #28]	; (1b614 <net_buf_ref+0x2c>)
   1b5f6:	f00f f84c 	bl	2a692 <assert_print>
   1b5fa:	f240 211a 	movw	r1, #538	; 0x21a
   1b5fe:	4805      	ldr	r0, [pc, #20]	; (1b614 <net_buf_ref+0x2c>)
   1b600:	f00f f840 	bl	2a684 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b604:	7a02      	ldrb	r2, [r0, #8]
   1b606:	3201      	adds	r2, #1
   1b608:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1b60a:	bd08      	pop	{r3, pc}
   1b60c:	00036908 	.word	0x00036908
   1b610:	00032629 	.word	0x00032629
   1b614:	00036824 	.word	0x00036824

0001b618 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1b618:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b61a:	4603      	mov	r3, r0
   1b61c:	b958      	cbnz	r0, 1b636 <net_buf_frag_last+0x1e>
   1b61e:	4908      	ldr	r1, [pc, #32]	; (1b640 <net_buf_frag_last+0x28>)
   1b620:	4808      	ldr	r0, [pc, #32]	; (1b644 <net_buf_frag_last+0x2c>)
   1b622:	f240 2357 	movw	r3, #599	; 0x257
   1b626:	4a08      	ldr	r2, [pc, #32]	; (1b648 <net_buf_frag_last+0x30>)
   1b628:	f00f f833 	bl	2a692 <assert_print>
   1b62c:	f240 2157 	movw	r1, #599	; 0x257
   1b630:	4805      	ldr	r0, [pc, #20]	; (1b648 <net_buf_frag_last+0x30>)
   1b632:	f00f f827 	bl	2a684 <assert_post_action>

	while (buf->frags) {
   1b636:	4618      	mov	r0, r3
   1b638:	685b      	ldr	r3, [r3, #4]
   1b63a:	2b00      	cmp	r3, #0
   1b63c:	d1fb      	bne.n	1b636 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1b63e:	bd08      	pop	{r3, pc}
   1b640:	00036908 	.word	0x00036908
   1b644:	00032629 	.word	0x00032629
   1b648:	00036824 	.word	0x00036824

0001b64c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1b64c:	b570      	push	{r4, r5, r6, lr}
   1b64e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1b650:	4604      	mov	r4, r0
   1b652:	b958      	cbnz	r0, 1b66c <net_buf_frag_insert+0x20>
   1b654:	490f      	ldr	r1, [pc, #60]	; (1b694 <net_buf_frag_insert+0x48>)
   1b656:	f240 2362 	movw	r3, #610	; 0x262
   1b65a:	4a0f      	ldr	r2, [pc, #60]	; (1b698 <net_buf_frag_insert+0x4c>)
   1b65c:	480f      	ldr	r0, [pc, #60]	; (1b69c <net_buf_frag_insert+0x50>)
   1b65e:	f00f f818 	bl	2a692 <assert_print>
   1b662:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1b666:	480c      	ldr	r0, [pc, #48]	; (1b698 <net_buf_frag_insert+0x4c>)
   1b668:	f00f f80c 	bl	2a684 <assert_post_action>
   1b66c:	b949      	cbnz	r1, 1b682 <net_buf_frag_insert+0x36>
   1b66e:	490c      	ldr	r1, [pc, #48]	; (1b6a0 <net_buf_frag_insert+0x54>)
   1b670:	f240 2363 	movw	r3, #611	; 0x263
   1b674:	4a08      	ldr	r2, [pc, #32]	; (1b698 <net_buf_frag_insert+0x4c>)
   1b676:	4809      	ldr	r0, [pc, #36]	; (1b69c <net_buf_frag_insert+0x50>)
   1b678:	f00f f80b 	bl	2a692 <assert_print>
   1b67c:	f240 2163 	movw	r1, #611	; 0x263
   1b680:	e7f1      	b.n	1b666 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1b682:	6846      	ldr	r6, [r0, #4]
   1b684:	b11e      	cbz	r6, 1b68e <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1b686:	4608      	mov	r0, r1
   1b688:	f7ff ffc6 	bl	1b618 <net_buf_frag_last>
   1b68c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1b68e:	6065      	str	r5, [r4, #4]
}
   1b690:	bd70      	pop	{r4, r5, r6, pc}
   1b692:	bf00      	nop
   1b694:	000368a0 	.word	0x000368a0
   1b698:	00036824 	.word	0x00036824
   1b69c:	00032629 	.word	0x00032629
   1b6a0:	000368a7 	.word	0x000368a7

0001b6a4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1b6a4:	b538      	push	{r3, r4, r5, lr}
   1b6a6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1b6a8:	460c      	mov	r4, r1
   1b6aa:	b959      	cbnz	r1, 1b6c4 <net_buf_frag_add+0x20>
   1b6ac:	490c      	ldr	r1, [pc, #48]	; (1b6e0 <net_buf_frag_add+0x3c>)
   1b6ae:	480d      	ldr	r0, [pc, #52]	; (1b6e4 <net_buf_frag_add+0x40>)
   1b6b0:	f240 236e 	movw	r3, #622	; 0x26e
   1b6b4:	4a0c      	ldr	r2, [pc, #48]	; (1b6e8 <net_buf_frag_add+0x44>)
   1b6b6:	f00e ffec 	bl	2a692 <assert_print>
   1b6ba:	f240 216e 	movw	r1, #622	; 0x26e
   1b6be:	480a      	ldr	r0, [pc, #40]	; (1b6e8 <net_buf_frag_add+0x44>)
   1b6c0:	f00e ffe0 	bl	2a684 <assert_post_action>

	if (!head) {
   1b6c4:	b920      	cbnz	r0, 1b6d0 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1b6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1b6ca:	4608      	mov	r0, r1
   1b6cc:	f7ff bf8c 	b.w	1b5e8 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1b6d0:	f7ff ffa2 	bl	1b618 <net_buf_frag_last>
   1b6d4:	4621      	mov	r1, r4
   1b6d6:	f7ff ffb9 	bl	1b64c <net_buf_frag_insert>
}
   1b6da:	4628      	mov	r0, r5
   1b6dc:	bd38      	pop	{r3, r4, r5, pc}
   1b6de:	bf00      	nop
   1b6e0:	000368a7 	.word	0x000368a7
   1b6e4:	00032629 	.word	0x00032629
   1b6e8:	00036824 	.word	0x00036824

0001b6ec <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1b6ec:	b508      	push	{r3, lr}
   1b6ee:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1b6f0:	6800      	ldr	r0, [r0, #0]
   1b6f2:	689a      	ldr	r2, [r3, #8]
   1b6f4:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1b6f6:	4291      	cmp	r1, r2
   1b6f8:	d90b      	bls.n	1b712 <net_buf_simple_push+0x26>
   1b6fa:	4909      	ldr	r1, [pc, #36]	; (1b720 <net_buf_simple_push+0x34>)
   1b6fc:	4809      	ldr	r0, [pc, #36]	; (1b724 <net_buf_simple_push+0x38>)
   1b6fe:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1b702:	4a09      	ldr	r2, [pc, #36]	; (1b728 <net_buf_simple_push+0x3c>)
   1b704:	f00e ffc5 	bl	2a692 <assert_print>
   1b708:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1b70c:	4806      	ldr	r0, [pc, #24]	; (1b728 <net_buf_simple_push+0x3c>)
   1b70e:	f00e ffb9 	bl	2a684 <assert_post_action>
	buf->len += len;
   1b712:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1b714:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1b716:	4411      	add	r1, r2
	buf->data -= len;
   1b718:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1b71a:	8099      	strh	r1, [r3, #4]
}
   1b71c:	bd08      	pop	{r3, pc}
   1b71e:	bf00      	nop
   1b720:	000368bc 	.word	0x000368bc
   1b724:	00032629 	.word	0x00032629
   1b728:	00036824 	.word	0x00036824

0001b72c <net_buf_simple_pull>:
{
   1b72c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1b72e:	8882      	ldrh	r2, [r0, #4]
{
   1b730:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b732:	428a      	cmp	r2, r1
   1b734:	d20b      	bcs.n	1b74e <net_buf_simple_pull+0x22>
   1b736:	4909      	ldr	r1, [pc, #36]	; (1b75c <net_buf_simple_pull+0x30>)
   1b738:	4809      	ldr	r0, [pc, #36]	; (1b760 <net_buf_simple_pull+0x34>)
   1b73a:	f240 4352 	movw	r3, #1106	; 0x452
   1b73e:	4a09      	ldr	r2, [pc, #36]	; (1b764 <net_buf_simple_pull+0x38>)
   1b740:	f00e ffa7 	bl	2a692 <assert_print>
   1b744:	f240 4152 	movw	r1, #1106	; 0x452
   1b748:	4806      	ldr	r0, [pc, #24]	; (1b764 <net_buf_simple_pull+0x38>)
   1b74a:	f00e ff9b 	bl	2a684 <assert_post_action>
	buf->len -= len;
   1b74e:	1a52      	subs	r2, r2, r1
   1b750:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1b752:	6800      	ldr	r0, [r0, #0]
   1b754:	4408      	add	r0, r1
   1b756:	6018      	str	r0, [r3, #0]
}
   1b758:	bd08      	pop	{r3, pc}
   1b75a:	bf00      	nop
   1b75c:	000368ac 	.word	0x000368ac
   1b760:	00032629 	.word	0x00032629
   1b764:	00036824 	.word	0x00036824

0001b768 <net_buf_simple_pull_mem>:
{
   1b768:	b508      	push	{r3, lr}
   1b76a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b76c:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1b76e:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1b770:	428a      	cmp	r2, r1
   1b772:	d20b      	bcs.n	1b78c <net_buf_simple_pull_mem+0x24>
   1b774:	4908      	ldr	r1, [pc, #32]	; (1b798 <net_buf_simple_pull_mem+0x30>)
   1b776:	4809      	ldr	r0, [pc, #36]	; (1b79c <net_buf_simple_pull_mem+0x34>)
   1b778:	f240 435e 	movw	r3, #1118	; 0x45e
   1b77c:	4a08      	ldr	r2, [pc, #32]	; (1b7a0 <net_buf_simple_pull_mem+0x38>)
   1b77e:	f00e ff88 	bl	2a692 <assert_print>
   1b782:	f240 415e 	movw	r1, #1118	; 0x45e
   1b786:	4806      	ldr	r0, [pc, #24]	; (1b7a0 <net_buf_simple_pull_mem+0x38>)
   1b788:	f00e ff7c 	bl	2a684 <assert_post_action>
	buf->len -= len;
   1b78c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1b78e:	4401      	add	r1, r0
	buf->len -= len;
   1b790:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1b792:	6019      	str	r1, [r3, #0]
}
   1b794:	bd08      	pop	{r3, pc}
   1b796:	bf00      	nop
   1b798:	000368ac 	.word	0x000368ac
   1b79c:	00032629 	.word	0x00032629
   1b7a0:	00036824 	.word	0x00036824

0001b7a4 <net_buf_simple_add>:
{
   1b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1b7a6:	8885      	ldrh	r5, [r0, #4]
   1b7a8:	6803      	ldr	r3, [r0, #0]
   1b7aa:	460e      	mov	r6, r1
   1b7ac:	4604      	mov	r4, r0
   1b7ae:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1b7b0:	f012 fc15 	bl	2dfde <net_buf_simple_tailroom>
   1b7b4:	42b0      	cmp	r0, r6
   1b7b6:	d20b      	bcs.n	1b7d0 <net_buf_simple_add+0x2c>
   1b7b8:	4907      	ldr	r1, [pc, #28]	; (1b7d8 <net_buf_simple_add+0x34>)
   1b7ba:	4808      	ldr	r0, [pc, #32]	; (1b7dc <net_buf_simple_add+0x38>)
   1b7bc:	f240 3303 	movw	r3, #771	; 0x303
   1b7c0:	4a07      	ldr	r2, [pc, #28]	; (1b7e0 <net_buf_simple_add+0x3c>)
   1b7c2:	f00e ff66 	bl	2a692 <assert_print>
   1b7c6:	f240 3103 	movw	r1, #771	; 0x303
   1b7ca:	4805      	ldr	r0, [pc, #20]	; (1b7e0 <net_buf_simple_add+0x3c>)
   1b7cc:	f00e ff5a 	bl	2a684 <assert_post_action>
	buf->len += len;
   1b7d0:	4435      	add	r5, r6
   1b7d2:	80a5      	strh	r5, [r4, #4]
}
   1b7d4:	4638      	mov	r0, r7
   1b7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7d8:	000368e0 	.word	0x000368e0
   1b7dc:	00032629 	.word	0x00032629
   1b7e0:	00036824 	.word	0x00036824

0001b7e4 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1b7e4:	b508      	push	{r3, lr}
   1b7e6:	4804      	ldr	r0, [pc, #16]	; (1b7f8 <xoshiro128_initialize+0x14>)
   1b7e8:	f014 fc63 	bl	300b2 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1b7ec:	2800      	cmp	r0, #0
}
   1b7ee:	bf0c      	ite	eq
   1b7f0:	f06f 0012 	mvneq.w	r0, #18
   1b7f4:	2000      	movne	r0, #0
   1b7f6:	bd08      	pop	{r3, pc}
   1b7f8:	00030f54 	.word	0x00030f54

0001b7fc <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   1b7fc:	2813      	cmp	r0, #19
   1b7fe:	d80e      	bhi.n	1b81e <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   1b800:	4a08      	ldr	r2, [pc, #32]	; (1b824 <adc_gain_invert+0x28>)
   1b802:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1b806:	b153      	cbz	r3, 1b81e <adc_gain_invert+0x22>
   1b808:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   1b80c:	7852      	ldrb	r2, [r2, #1]
   1b80e:	b132      	cbz	r2, 1b81e <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   1b810:	6808      	ldr	r0, [r1, #0]
   1b812:	4343      	muls	r3, r0
   1b814:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   1b818:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1b81a:	600b      	str	r3, [r1, #0]
			rv = 0;
   1b81c:	4770      	bx	lr
	int rv = -EINVAL;
   1b81e:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1b822:	4770      	bx	lr
   1b824:	0003690c 	.word	0x0003690c

0001b828 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1b828:	2201      	movs	r2, #1
   1b82a:	4b05      	ldr	r3, [pc, #20]	; (1b840 <adc_context_start_sampling+0x18>)
   1b82c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1b830:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1b834:	b109      	cbz	r1, 1b83a <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b836:	60da      	str	r2, [r3, #12]
}
   1b838:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b83a:	601a      	str	r2, [r3, #0]
   1b83c:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1b83e:	4770      	bx	lr
   1b840:	4000e000 	.word	0x4000e000

0001b844 <adc_nrfx_channel_setup>:
{
   1b844:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1b846:	7908      	ldrb	r0, [r1, #4]
{
   1b848:	b086      	sub	sp, #24
	uint8_t channel_id = channel_cfg->channel_id;
   1b84a:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1b84e:	2c07      	cmp	r4, #7
   1b850:	d823      	bhi.n	1b89a <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->gain) {
   1b852:	780b      	ldrb	r3, [r1, #0]
   1b854:	2b0b      	cmp	r3, #11
   1b856:	d815      	bhi.n	1b884 <adc_nrfx_channel_setup+0x40>
   1b858:	e8df f003 	tbb	[pc, r3]
   1b85c:	07070707 	.word	0x07070707
   1b860:	14140614 	.word	0x14140614
   1b864:	1214100e 	.word	0x1214100e
		config.gain = NRF_SAADC_GAIN1_2;
   1b868:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   1b86a:	784a      	ldrb	r2, [r1, #1]
   1b86c:	2a03      	cmp	r2, #3
   1b86e:	d018      	beq.n	1b8a2 <adc_nrfx_channel_setup+0x5e>
   1b870:	2a04      	cmp	r2, #4
   1b872:	d028      	beq.n	1b8c6 <adc_nrfx_channel_setup+0x82>
		LOG_ERR("Selected ADC reference is not valid");
   1b874:	4b31      	ldr	r3, [pc, #196]	; (1b93c <adc_nrfx_channel_setup+0xf8>)
   1b876:	e006      	b.n	1b886 <adc_nrfx_channel_setup+0x42>
		config.gain = NRF_SAADC_GAIN1;
   1b878:	2305      	movs	r3, #5
		break;
   1b87a:	e7f6      	b.n	1b86a <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   1b87c:	2306      	movs	r3, #6
		break;
   1b87e:	e7f4      	b.n	1b86a <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   1b880:	2307      	movs	r3, #7
		break;
   1b882:	e7f2      	b.n	1b86a <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   1b884:	4b2e      	ldr	r3, [pc, #184]	; (1b940 <adc_nrfx_channel_setup+0xfc>)
   1b886:	9305      	str	r3, [sp, #20]
   1b888:	2302      	movs	r3, #2
   1b88a:	9304      	str	r3, [sp, #16]
   1b88c:	2300      	movs	r3, #0
   1b88e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b892:	482c      	ldr	r0, [pc, #176]	; (1b944 <adc_nrfx_channel_setup+0x100>)
   1b894:	aa04      	add	r2, sp, #16
   1b896:	f7f2 ffe7 	bl	e868 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1b89a:	f06f 0015 	mvn.w	r0, #21
}
   1b89e:	b006      	add	sp, #24
   1b8a0:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   1b8a2:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1b8a4:	f244 060a 	movw	r6, #16394	; 0x400a
   1b8a8:	884a      	ldrh	r2, [r1, #2]
   1b8aa:	42b2      	cmp	r2, r6
   1b8ac:	d03f      	beq.n	1b92e <adc_nrfx_channel_setup+0xea>
   1b8ae:	d80c      	bhi.n	1b8ca <adc_nrfx_channel_setup+0x86>
   1b8b0:	f244 0603 	movw	r6, #16387	; 0x4003
   1b8b4:	42b2      	cmp	r2, r6
   1b8b6:	d016      	beq.n	1b8e6 <adc_nrfx_channel_setup+0xa2>
   1b8b8:	f244 0605 	movw	r6, #16389	; 0x4005
   1b8bc:	42b2      	cmp	r2, r6
   1b8be:	d034      	beq.n	1b92a <adc_nrfx_channel_setup+0xe6>
   1b8c0:	b3aa      	cbz	r2, 1b92e <adc_nrfx_channel_setup+0xea>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1b8c2:	4b21      	ldr	r3, [pc, #132]	; (1b948 <adc_nrfx_channel_setup+0x104>)
   1b8c4:	e7df      	b.n	1b886 <adc_nrfx_channel_setup+0x42>
	nrf_saadc_channel_config_t config = {
   1b8c6:	2500      	movs	r5, #0
   1b8c8:	e7ec      	b.n	1b8a4 <adc_nrfx_channel_setup+0x60>
	switch (channel_cfg->acquisition_time) {
   1b8ca:	f244 0614 	movw	r6, #16404	; 0x4014
   1b8ce:	42b2      	cmp	r2, r6
   1b8d0:	d02f      	beq.n	1b932 <adc_nrfx_channel_setup+0xee>
   1b8d2:	f244 0628 	movw	r6, #16424	; 0x4028
   1b8d6:	42b2      	cmp	r2, r6
   1b8d8:	d02d      	beq.n	1b936 <adc_nrfx_channel_setup+0xf2>
   1b8da:	f244 060f 	movw	r6, #16399	; 0x400f
   1b8de:	42b2      	cmp	r2, r6
   1b8e0:	d1ef      	bne.n	1b8c2 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1b8e2:	2203      	movs	r2, #3
   1b8e4:	e000      	b.n	1b8e8 <adc_nrfx_channel_setup+0xa4>
	nrf_saadc_channel_config_t config = {
   1b8e6:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b8e8:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1b8ec:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b8ee:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   1b8f2:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b8f4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1b8f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1b8fc:	0122      	lsls	r2, r4, #4
   1b8fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b902:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1b906:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1b90a:	0123      	lsls	r3, r4, #4
   1b90c:	798a      	ldrb	r2, [r1, #6]
   1b90e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b912:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1b916:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1b91a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1b91e:	4b0b      	ldr	r3, [pc, #44]	; (1b94c <adc_nrfx_channel_setup+0x108>)
   1b920:	794a      	ldrb	r2, [r1, #5]
   1b922:	4423      	add	r3, r4
   1b924:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1b928:	e7b9      	b.n	1b89e <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
   1b92a:	2201      	movs	r2, #1
   1b92c:	e7dc      	b.n	1b8e8 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1b92e:	2202      	movs	r2, #2
   1b930:	e7da      	b.n	1b8e8 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1b932:	2204      	movs	r2, #4
   1b934:	e7d8      	b.n	1b8e8 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1b936:	2205      	movs	r2, #5
   1b938:	e7d6      	b.n	1b8e8 <adc_nrfx_channel_setup+0xa4>
   1b93a:	bf00      	nop
   1b93c:	00036953 	.word	0x00036953
   1b940:	00036934 	.word	0x00036934
   1b944:	0003147c 	.word	0x0003147c
   1b948:	00036977 	.word	0x00036977
   1b94c:	20008168 	.word	0x20008168

0001b950 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1b950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b954:	b088      	sub	sp, #32
   1b956:	460c      	mov	r4, r1
   1b958:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   1b95a:	f04f 33ff 	mov.w	r3, #4294967295
   1b95e:	f04f 32ff 	mov.w	r2, #4294967295
   1b962:	4876      	ldr	r0, [pc, #472]	; (1bb3c <adc_nrfx_read+0x1ec>)
   1b964:	f009 fe60 	bl	25628 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1b968:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1b96a:	1e73      	subs	r3, r6, #1
   1b96c:	2bfe      	cmp	r3, #254	; 0xfe
   1b96e:	d90c      	bls.n	1b98a <adc_nrfx_read+0x3a>
		LOG_ERR("Invalid selection of channels");
   1b970:	4b73      	ldr	r3, [pc, #460]	; (1bb40 <adc_nrfx_read+0x1f0>)
		LOG_ERR(
   1b972:	617b      	str	r3, [r7, #20]
   1b974:	2302      	movs	r3, #2
   1b976:	613b      	str	r3, [r7, #16]
   1b978:	2300      	movs	r3, #0
   1b97a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b97e:	4871      	ldr	r0, [pc, #452]	; (1bb44 <adc_nrfx_read+0x1f4>)
   1b980:	f107 0210 	add.w	r2, r7, #16
   1b984:	f7f2 ff70 	bl	e868 <z_impl_z_log_msg_static_create>
	if (error) {
   1b988:	e01b      	b.n	1b9c2 <adc_nrfx_read+0x72>
   1b98a:	2100      	movs	r1, #0
	active_channels = 0U;
   1b98c:	460a      	mov	r2, r1
    p_reg->CH[channel].PSELP = pselp;
   1b98e:	4d6e      	ldr	r5, [pc, #440]	; (1bb48 <adc_nrfx_read+0x1f8>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b990:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 1bb4c <adc_nrfx_read+0x1fc>
		if (selected_channels & BIT(channel_id)) {
   1b994:	fa26 f301 	lsr.w	r3, r6, r1
   1b998:	f013 0301 	ands.w	r3, r3, #1
   1b99c:	d040      	beq.n	1ba20 <adc_nrfx_read+0xd0>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b99e:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1b9a2:	b9c3      	cbnz	r3, 1b9d6 <adc_nrfx_read+0x86>
				LOG_ERR("Channel %u not configured",
   1b9a4:	466c      	mov	r4, sp
   1b9a6:	b088      	sub	sp, #32
   1b9a8:	aa02      	add	r2, sp, #8
   1b9aa:	4869      	ldr	r0, [pc, #420]	; (1bb50 <adc_nrfx_read+0x200>)
   1b9ac:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1b9b0:	2103      	movs	r1, #3
   1b9b2:	f842 1f10 	str.w	r1, [r2, #16]!
   1b9b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9ba:	4862      	ldr	r0, [pc, #392]	; (1bb44 <adc_nrfx_read+0x1f4>)
   1b9bc:	f7f2 ff54 	bl	e868 <z_impl_z_log_msg_static_create>
   1b9c0:	46a5      	mov	sp, r4
		return -EINVAL;
   1b9c2:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1b9c6:	485d      	ldr	r0, [pc, #372]	; (1bb3c <adc_nrfx_read+0x1ec>)
   1b9c8:	f009 fdea 	bl	255a0 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1b9cc:	4620      	mov	r0, r4
   1b9ce:	3718      	adds	r7, #24
   1b9d0:	46bd      	mov	sp, r7
   1b9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1b9d6:	f894 e011 	ldrb.w	lr, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1b9da:	eb05 1801 	add.w	r8, r5, r1, lsl #4
   1b9de:	f1be 0e00 	subs.w	lr, lr, #0
   1b9e2:	bf18      	it	ne
   1b9e4:	f04f 0e01 	movne.w	lr, #1
   1b9e8:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
			++active_channels;
   1b9ec:	3201      	adds	r2, #1
   1b9ee:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   1b9f2:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   1b9f6:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1b9fa:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1b9fe:	0100      	lsls	r0, r0, #4
   1ba00:	502b      	str	r3, [r5, r0]
   1ba02:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   1ba04:	3101      	adds	r1, #1
   1ba06:	2908      	cmp	r1, #8
   1ba08:	d1c4      	bne.n	1b994 <adc_nrfx_read+0x44>
	error = set_resolution(sequence);
   1ba0a:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   1ba0c:	f1a3 0108 	sub.w	r1, r3, #8
   1ba10:	2906      	cmp	r1, #6
   1ba12:	d816      	bhi.n	1ba42 <adc_nrfx_read+0xf2>
   1ba14:	e8df f001 	tbb	[pc, r1]
   1ba18:	15221520 	.word	0x15221520
   1ba1c:	1509      	.short	0x1509
   1ba1e:	13          	.byte	0x13
   1ba1f:	00          	.byte	0x00
   1ba20:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1ba24:	0100      	lsls	r0, r0, #4
   1ba26:	502b      	str	r3, [r5, r0]
}
   1ba28:	e7ec      	b.n	1ba04 <adc_nrfx_read+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1ba2a:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1ba2c:	4946      	ldr	r1, [pc, #280]	; (1bb48 <adc_nrfx_read+0x1f8>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1ba2e:	2a01      	cmp	r2, #1
   1ba30:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1ba34:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1ba36:	d913      	bls.n	1ba60 <adc_nrfx_read+0x110>
   1ba38:	b1a3      	cbz	r3, 1ba64 <adc_nrfx_read+0x114>
		LOG_ERR(
   1ba3a:	4b46      	ldr	r3, [pc, #280]	; (1bb54 <adc_nrfx_read+0x204>)
   1ba3c:	e799      	b.n	1b972 <adc_nrfx_read+0x22>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1ba3e:	2303      	movs	r3, #3
		break;
   1ba40:	e7f4      	b.n	1ba2c <adc_nrfx_read+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   1ba42:	466c      	mov	r4, sp
   1ba44:	b088      	sub	sp, #32
   1ba46:	aa02      	add	r2, sp, #8
   1ba48:	4943      	ldr	r1, [pc, #268]	; (1bb58 <adc_nrfx_read+0x208>)
	switch (sequence->oversampling) {
   1ba4a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Oversampling value %d is not valid",
   1ba4e:	2303      	movs	r3, #3
   1ba50:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba54:	2300      	movs	r3, #0
   1ba56:	e7ae      	b.n	1b9b6 <adc_nrfx_read+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1ba58:	2300      	movs	r3, #0
   1ba5a:	e7e7      	b.n	1ba2c <adc_nrfx_read+0xdc>
	switch (sequence->resolution) {
   1ba5c:	2301      	movs	r3, #1
   1ba5e:	e7e5      	b.n	1ba2c <adc_nrfx_read+0xdc>
	switch (sequence->oversampling) {
   1ba60:	2b08      	cmp	r3, #8
   1ba62:	d81b      	bhi.n	1ba9c <adc_nrfx_read+0x14c>
    p_reg->OVERSAMPLE = oversample;
   1ba64:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   1ba68:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1ba6a:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   1ba6c:	b9d9      	cbnz	r1, 1baa6 <adc_nrfx_read+0x156>
	if (sequence->buffer_size < needed_buffer_size) {
   1ba6e:	68e1      	ldr	r1, [r4, #12]
   1ba70:	4299      	cmp	r1, r3
   1ba72:	d21c      	bcs.n	1baae <adc_nrfx_read+0x15e>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1ba74:	466c      	mov	r4, sp
   1ba76:	b088      	sub	sp, #32
   1ba78:	aa02      	add	r2, sp, #8
   1ba7a:	61d3      	str	r3, [r2, #28]
   1ba7c:	2304      	movs	r3, #4
   1ba7e:	4837      	ldr	r0, [pc, #220]	; (1bb5c <adc_nrfx_read+0x20c>)
   1ba80:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1ba84:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba88:	2300      	movs	r3, #0
   1ba8a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ba8e:	482d      	ldr	r0, [pc, #180]	; (1bb44 <adc_nrfx_read+0x1f4>)
   1ba90:	f7f2 feea 	bl	e868 <z_impl_z_log_msg_static_create>
   1ba94:	46a5      	mov	sp, r4
		return -ENOMEM;
   1ba96:	f06f 040b 	mvn.w	r4, #11
   1ba9a:	e794      	b.n	1b9c6 <adc_nrfx_read+0x76>
		LOG_ERR("Oversampling value %d is not valid",
   1ba9c:	466c      	mov	r4, sp
   1ba9e:	b088      	sub	sp, #32
   1baa0:	aa02      	add	r2, sp, #8
   1baa2:	492f      	ldr	r1, [pc, #188]	; (1bb60 <adc_nrfx_read+0x210>)
   1baa4:	e7d1      	b.n	1ba4a <adc_nrfx_read+0xfa>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1baa6:	8989      	ldrh	r1, [r1, #12]
   1baa8:	fb01 3303 	mla	r3, r1, r3, r3
   1baac:	e7df      	b.n	1ba6e <adc_nrfx_read+0x11e>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1baae:	46a4      	mov	ip, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1bab0:	68a1      	ldr	r1, [r4, #8]
   1bab2:	4b25      	ldr	r3, [pc, #148]	; (1bb48 <adc_nrfx_read+0x1f8>)
   1bab4:	4d2b      	ldr	r5, [pc, #172]	; (1bb64 <adc_nrfx_read+0x214>)
   1bab6:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
   1baba:	f105 0674 	add.w	r6, r5, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   1babe:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   1bac2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1bac6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1bac8:	f8dc 3000 	ldr.w	r3, [ip]
   1bacc:	46ac      	mov	ip, r5
   1bace:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   1bad0:	2600      	movs	r6, #0
   1bad2:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   1bad4:	6823      	ldr	r3, [r4, #0]
   1bad6:	b36b      	cbz	r3, 1bb34 <adc_nrfx_read+0x1e4>
		ctx->options = *sequence->options;
   1bad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bada:	f105 0488 	add.w	r4, r5, #136	; 0x88
   1bade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1bae2:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   1bae4:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1bae8:	b320      	cbz	r0, 1bb34 <adc_nrfx_read+0x1e4>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1baea:	e8dc 3fef 	ldaex	r3, [ip]
   1baee:	e8cc 6fe2 	stlex	r2, r6, [ip]
   1baf2:	2a00      	cmp	r2, #0
   1baf4:	d1f9      	bne.n	1baea <adc_nrfx_read+0x19a>
   1baf6:	491c      	ldr	r1, [pc, #112]	; (1bb68 <adc_nrfx_read+0x218>)
   1baf8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1bafc:	468c      	mov	ip, r1
   1bafe:	4631      	mov	r1, r6
   1bb00:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1bb04:	2300      	movs	r3, #0
   1bb06:	fbe0 c104 	umlal	ip, r1, r0, r4
   1bb0a:	4a18      	ldr	r2, [pc, #96]	; (1bb6c <adc_nrfx_read+0x21c>)
   1bb0c:	4660      	mov	r0, ip
   1bb0e:	f7ed f9ef 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1bb12:	2200      	movs	r2, #0
   1bb14:	e9cd 0100 	strd	r0, r1, [sp]
   1bb18:	2300      	movs	r3, #0
   1bb1a:	f105 0008 	add.w	r0, r5, #8
   1bb1e:	f00c f951 	bl	27dc4 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1bb22:	f04f 32ff 	mov.w	r2, #4294967295
   1bb26:	f04f 33ff 	mov.w	r3, #4294967295
   1bb2a:	4811      	ldr	r0, [pc, #68]	; (1bb70 <adc_nrfx_read+0x220>)
   1bb2c:	f009 fd7c 	bl	25628 <z_impl_k_sem_take>
	return ctx->status;
   1bb30:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   1bb32:	e748      	b.n	1b9c6 <adc_nrfx_read+0x76>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1bb34:	480b      	ldr	r0, [pc, #44]	; (1bb64 <adc_nrfx_read+0x214>)
   1bb36:	f7ff fe77 	bl	1b828 <adc_context_start_sampling>
   1bb3a:	e7f2      	b.n	1bb22 <adc_nrfx_read+0x1d2>
   1bb3c:	200081a8 	.word	0x200081a8
   1bb40:	000369a2 	.word	0x000369a2
   1bb44:	0003147c 	.word	0x0003147c
   1bb48:	4000e000 	.word	0x4000e000
   1bb4c:	20008208 	.word	0x20008208
   1bb50:	000369c0 	.word	0x000369c0
   1bb54:	000369ff 	.word	0x000369ff
   1bb58:	000369da 	.word	0x000369da
   1bb5c:	00036a54 	.word	0x00036a54
   1bb60:	00036a31 	.word	0x00036a31
   1bb64:	20008168 	.word	0x20008168
   1bb68:	000f423f 	.word	0x000f423f
   1bb6c:	000f4240 	.word	0x000f4240
   1bb70:	200081c0 	.word	0x200081c0

0001bb74 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1bb74:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb76:	2400      	movs	r4, #0
   1bb78:	4b0d      	ldr	r3, [pc, #52]	; (1bbb0 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1bb7a:	200e      	movs	r0, #14
   1bb7c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1bb80:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1bb84:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1bb88:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1bb8c:	2212      	movs	r2, #18
   1bb8e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1bb92:	f7f4 ff2f 	bl	109f4 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bb96:	4622      	mov	r2, r4
   1bb98:	2101      	movs	r1, #1
   1bb9a:	200e      	movs	r0, #14
   1bb9c:	f7f4 ff5a 	bl	10a54 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1bba0:	4804      	ldr	r0, [pc, #16]	; (1bbb4 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1bba2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1bba4:	b913      	cbnz	r3, 1bbac <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1bba6:	3040      	adds	r0, #64	; 0x40
   1bba8:	f009 fcfa 	bl	255a0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1bbac:	2000      	movs	r0, #0
   1bbae:	bd10      	pop	{r4, pc}
   1bbb0:	4000e000 	.word	0x4000e000
   1bbb4:	20008168 	.word	0x20008168

0001bbb8 <saadc_irq_handler>:
{
   1bbb8:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bbba:	4b2d      	ldr	r3, [pc, #180]	; (1bc70 <saadc_irq_handler+0xb8>)
   1bbbc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1bbc0:	2a00      	cmp	r2, #0
   1bbc2:	d048      	beq.n	1bc56 <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bbc4:	2200      	movs	r2, #0
   1bbc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1bbca:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbce:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1bbd0:	4c28      	ldr	r4, [pc, #160]	; (1bc74 <saadc_irq_handler+0xbc>)
   1bbd2:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1bbd4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1bbd8:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1bbda:	4625      	mov	r5, r4
   1bbdc:	b3b3      	cbz	r3, 1bc4c <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   1bbde:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1bbe2:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1bbe6:	b133      	cbz	r3, 1bbf6 <saadc_irq_handler+0x3e>
			action = callback(dev,
   1bbe8:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1bbec:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1bbee:	2801      	cmp	r0, #1
   1bbf0:	d014      	beq.n	1bc1c <saadc_irq_handler+0x64>
   1bbf2:	2802      	cmp	r0, #2
   1bbf4:	d024      	beq.n	1bc40 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1bbf6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1bbfa:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1bbfe:	429a      	cmp	r2, r3
   1bc00:	d91e      	bls.n	1bc40 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1bc02:	3301      	adds	r3, #1
   1bc04:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1bc08:	4b19      	ldr	r3, [pc, #100]	; (1bc70 <saadc_irq_handler+0xb8>)
   1bc0a:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1bc0e:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1bc12:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1bc14:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1bc18:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1bc1c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1bc20:	b923      	cbnz	r3, 1bc2c <saadc_irq_handler+0x74>
}
   1bc22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1bc26:	4813      	ldr	r0, [pc, #76]	; (1bc74 <saadc_irq_handler+0xbc>)
   1bc28:	f7ff bdfe 	b.w	1b828 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1bc2c:	e8d5 3fef 	ldaex	r3, [r5]
   1bc30:	1e5a      	subs	r2, r3, #1
   1bc32:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1bc36:	2900      	cmp	r1, #0
   1bc38:	d1f8      	bne.n	1bc2c <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1bc3a:	2b01      	cmp	r3, #1
   1bc3c:	dcf1      	bgt.n	1bc22 <saadc_irq_handler+0x6a>
   1bc3e:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1bc40:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1bc44:	b113      	cbz	r3, 1bc4c <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   1bc46:	480c      	ldr	r0, [pc, #48]	; (1bc78 <saadc_irq_handler+0xc0>)
   1bc48:	f014 fb98 	bl	3037c <z_impl_k_timer_stop>
   1bc4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1bc50:	480a      	ldr	r0, [pc, #40]	; (1bc7c <saadc_irq_handler+0xc4>)
   1bc52:	f009 bca5 	b.w	255a0 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bc56:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1bc5a:	2900      	cmp	r1, #0
   1bc5c:	d0ef      	beq.n	1bc3e <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc5e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1bc62:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bc66:	2201      	movs	r2, #1
   1bc68:	609a      	str	r2, [r3, #8]
   1bc6a:	601a      	str	r2, [r3, #0]
   1bc6c:	605a      	str	r2, [r3, #4]
}
   1bc6e:	e7e6      	b.n	1bc3e <saadc_irq_handler+0x86>
   1bc70:	4000e000 	.word	0x4000e000
   1bc74:	20008168 	.word	0x20008168
   1bc78:	20008170 	.word	0x20008170
   1bc7c:	200081c0 	.word	0x200081c0

0001bc80 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1bc80:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bc82:	2340      	movs	r3, #64	; 0x40
{
   1bc84:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bc86:	490a      	ldr	r1, [pc, #40]	; (1bcb0 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bc88:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1bc8a:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bc8c:	1149      	asrs	r1, r1, #5
{
   1bc8e:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bc90:	4623      	mov	r3, r4
   1bc92:	4a08      	ldr	r2, [pc, #32]	; (1bcb4 <onoff_start+0x34>)
   1bc94:	4808      	ldr	r0, [pc, #32]	; (1bcb8 <onoff_start+0x38>)
   1bc96:	f012 f9e3 	bl	2e060 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1bc9a:	1e01      	subs	r1, r0, #0
   1bc9c:	da05      	bge.n	1bcaa <onoff_start+0x2a>
		notify(mgr, err);
   1bc9e:	4628      	mov	r0, r5
   1bca0:	4623      	mov	r3, r4
	}
}
   1bca2:	b003      	add	sp, #12
   1bca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1bca8:	4718      	bx	r3
}
   1bcaa:	b003      	add	sp, #12
   1bcac:	bd30      	pop	{r4, r5, pc}
   1bcae:	bf00      	nop
   1bcb0:	200217cc 	.word	0x200217cc
   1bcb4:	0002e0cf 	.word	0x0002e0cf
   1bcb8:	00030ef4 	.word	0x00030ef4

0001bcbc <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bcbc:	b2c9      	uxtb	r1, r1
   1bcbe:	2903      	cmp	r1, #3
{
   1bcc0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bcc2:	d909      	bls.n	1bcd8 <get_status+0x1c>
   1bcc4:	4909      	ldr	r1, [pc, #36]	; (1bcec <get_status+0x30>)
   1bcc6:	480a      	ldr	r0, [pc, #40]	; (1bcf0 <get_status+0x34>)
   1bcc8:	237a      	movs	r3, #122	; 0x7a
   1bcca:	4a0a      	ldr	r2, [pc, #40]	; (1bcf4 <get_status+0x38>)
   1bccc:	f00e fce1 	bl	2a692 <assert_print>
   1bcd0:	217a      	movs	r1, #122	; 0x7a
   1bcd2:	4808      	ldr	r0, [pc, #32]	; (1bcf4 <get_status+0x38>)
   1bcd4:	f00e fcd6 	bl	2a684 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1bcd8:	220c      	movs	r2, #12
   1bcda:	6903      	ldr	r3, [r0, #16]
   1bcdc:	fb01 3302 	mla	r3, r1, r2, r3
   1bce0:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   1bce4:	f000 0007 	and.w	r0, r0, #7
   1bce8:	bd08      	pop	{r3, pc}
   1bcea:	bf00      	nop
   1bcec:	00036ace 	.word	0x00036ace
   1bcf0:	00032629 	.word	0x00032629
   1bcf4:	00036a91 	.word	0x00036a91

0001bcf8 <stop>:
{
   1bcf8:	b570      	push	{r4, r5, r6, lr}
   1bcfa:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bcfc:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   1bcfe:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bd00:	d90b      	bls.n	1bd1a <stop+0x22>
   1bd02:	491a      	ldr	r1, [pc, #104]	; (1bd6c <stop+0x74>)
   1bd04:	481a      	ldr	r0, [pc, #104]	; (1bd70 <stop+0x78>)
   1bd06:	f240 135d 	movw	r3, #349	; 0x15d
   1bd0a:	4a1a      	ldr	r2, [pc, #104]	; (1bd74 <stop+0x7c>)
   1bd0c:	f00e fcc1 	bl	2a692 <assert_print>
   1bd10:	f240 115d 	movw	r1, #349	; 0x15d
   1bd14:	4817      	ldr	r0, [pc, #92]	; (1bd74 <stop+0x7c>)
   1bd16:	f00e fcb5 	bl	2a684 <assert_post_action>
	__asm__ volatile(
   1bd1a:	f04f 0420 	mov.w	r4, #32
   1bd1e:	f3ef 8511 	mrs	r5, BASEPRI
   1bd22:	f384 8812 	msr	BASEPRI_MAX, r4
   1bd26:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1bd2a:	260c      	movs	r6, #12
   1bd2c:	fb06 3401 	mla	r4, r6, r1, r3
   1bd30:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1bd34:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1bd38:	d008      	beq.n	1bd4c <stop+0x54>
   1bd3a:	42a2      	cmp	r2, r4
   1bd3c:	d006      	beq.n	1bd4c <stop+0x54>
	__asm__ volatile(
   1bd3e:	f385 8811 	msr	BASEPRI, r5
   1bd42:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1bd46:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bd4a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1bd4c:	2201      	movs	r2, #1
   1bd4e:	4371      	muls	r1, r6
   1bd50:	440b      	add	r3, r1
   1bd52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1bd56:	f385 8811 	msr	BASEPRI, r5
   1bd5a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1bd5e:	6843      	ldr	r3, [r0, #4]
   1bd60:	440b      	add	r3, r1
   1bd62:	685b      	ldr	r3, [r3, #4]
   1bd64:	4798      	blx	r3
	return 0;
   1bd66:	2000      	movs	r0, #0
   1bd68:	e7ef      	b.n	1bd4a <stop+0x52>
   1bd6a:	bf00      	nop
   1bd6c:	00036ace 	.word	0x00036ace
   1bd70:	00032629 	.word	0x00032629
   1bd74:	00036a91 	.word	0x00036a91

0001bd78 <onoff_stop>:
{
   1bd78:	b570      	push	{r4, r5, r6, lr}
   1bd7a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bd7c:	4906      	ldr	r1, [pc, #24]	; (1bd98 <onoff_stop+0x20>)
{
   1bd7e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1bd80:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bd82:	1149      	asrs	r1, r1, #5
   1bd84:	2240      	movs	r2, #64	; 0x40
   1bd86:	4805      	ldr	r0, [pc, #20]	; (1bd9c <onoff_stop+0x24>)
   1bd88:	f7ff ffb6 	bl	1bcf8 <stop>
	notify(mgr, res);
   1bd8c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bd8e:	4601      	mov	r1, r0
	notify(mgr, res);
   1bd90:	4620      	mov	r0, r4
}
   1bd92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1bd96:	4718      	bx	r3
   1bd98:	200217cc 	.word	0x200217cc
   1bd9c:	00030ef4 	.word	0x00030ef4

0001bda0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bda4:	2200      	movs	r2, #0
   1bda6:	2101      	movs	r1, #1
{
   1bda8:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bdaa:	2005      	movs	r0, #5
   1bdac:	f7f4 fe52 	bl	10a54 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1bdb0:	4811      	ldr	r0, [pc, #68]	; (1bdf8 <clk_init+0x58>)
   1bdb2:	f003 f813 	bl	1eddc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1bdb6:	4b11      	ldr	r3, [pc, #68]	; (1bdfc <clk_init+0x5c>)
   1bdb8:	4298      	cmp	r0, r3
   1bdba:	d119      	bne.n	1bdf0 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1bdbc:	f003 f832 	bl	1ee24 <nrfx_clock_enable>
   1bdc0:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1bdc2:	f04f 080c 	mov.w	r8, #12
   1bdc6:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bdc8:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1be00 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   1bdcc:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bdce:	4649      	mov	r1, r9
   1bdd0:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   1bdd4:	f00e fc18 	bl	2a608 <onoff_manager_init>
		if (err < 0) {
   1bdd8:	2800      	cmp	r0, #0
   1bdda:	db07      	blt.n	1bdec <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1bddc:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1bde0:	3401      	adds	r4, #1
   1bde2:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1bde4:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1bde8:	d1f0      	bne.n	1bdcc <clk_init+0x2c>
	}

	return 0;
   1bdea:	2000      	movs	r0, #0
}
   1bdec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1bdf0:	f06f 0004 	mvn.w	r0, #4
   1bdf4:	e7fa      	b.n	1bdec <clk_init+0x4c>
   1bdf6:	bf00      	nop
   1bdf8:	0001be3d 	.word	0x0001be3d
   1bdfc:	0bad0000 	.word	0x0bad0000
   1be00:	00032244 	.word	0x00032244

0001be04 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1be04:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1be06:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1be08:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1be0a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1be0c:	434b      	muls	r3, r1
   1be0e:	4809      	ldr	r0, [pc, #36]	; (1be34 <clkstarted_handle.constprop.0+0x30>)
   1be10:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1be12:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   1be14:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1be18:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1be1a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1be1e:	f012 f90c 	bl	2e03a <set_on_state>
	if (callback) {
   1be22:	b12d      	cbz	r5, 1be30 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1be24:	4632      	mov	r2, r6
   1be26:	462b      	mov	r3, r5
}
   1be28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1be2c:	4802      	ldr	r0, [pc, #8]	; (1be38 <clkstarted_handle.constprop.0+0x34>)
   1be2e:	4718      	bx	r3
}
   1be30:	bd70      	pop	{r4, r5, r6, pc}
   1be32:	bf00      	nop
   1be34:	200217cc 	.word	0x200217cc
   1be38:	00030ef4 	.word	0x00030ef4

0001be3c <clock_event_handler>:
{
   1be3c:	b508      	push	{r3, lr}
	switch (event) {
   1be3e:	2805      	cmp	r0, #5
   1be40:	d820      	bhi.n	1be84 <clock_event_handler+0x48>
   1be42:	e8df f000 	tbb	[pc, r0]
   1be46:	1103      	.short	0x1103
   1be48:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1be4c:	4b13      	ldr	r3, [pc, #76]	; (1be9c <clock_event_handler+0x60>)
   1be4e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1be52:	f010 0007 	ands.w	r0, r0, #7
   1be56:	d11f      	bne.n	1be98 <clock_event_handler+0x5c>
}
   1be58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1be5c:	f7ff bfd2 	b.w	1be04 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1be60:	2002      	movs	r0, #2
   1be62:	e7f9      	b.n	1be58 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   1be64:	2003      	movs	r0, #3
   1be66:	e7f7      	b.n	1be58 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1be68:	2001      	movs	r0, #1
   1be6a:	e7f5      	b.n	1be58 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   1be6c:	490c      	ldr	r1, [pc, #48]	; (1bea0 <clock_event_handler+0x64>)
   1be6e:	f240 236e 	movw	r3, #622	; 0x26e
   1be72:	4a0c      	ldr	r2, [pc, #48]	; (1bea4 <clock_event_handler+0x68>)
   1be74:	480c      	ldr	r0, [pc, #48]	; (1bea8 <clock_event_handler+0x6c>)
   1be76:	f00e fc0c 	bl	2a692 <assert_print>
   1be7a:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1be7e:	4809      	ldr	r0, [pc, #36]	; (1bea4 <clock_event_handler+0x68>)
   1be80:	f00e fc00 	bl	2a684 <assert_post_action>
   1be84:	4906      	ldr	r1, [pc, #24]	; (1bea0 <clock_event_handler+0x64>)
   1be86:	f240 2372 	movw	r3, #626	; 0x272
   1be8a:	4a06      	ldr	r2, [pc, #24]	; (1bea4 <clock_event_handler+0x68>)
   1be8c:	4806      	ldr	r0, [pc, #24]	; (1bea8 <clock_event_handler+0x6c>)
   1be8e:	f00e fc00 	bl	2a692 <assert_print>
   1be92:	f240 2172 	movw	r1, #626	; 0x272
   1be96:	e7f2      	b.n	1be7e <clock_event_handler+0x42>
}
   1be98:	bd08      	pop	{r3, pc}
   1be9a:	bf00      	nop
   1be9c:	200217cc 	.word	0x200217cc
   1bea0:	00037ac9 	.word	0x00037ac9
   1bea4:	00036a91 	.word	0x00036a91
   1bea8:	00032629 	.word	0x00032629

0001beac <generic_hfclk_start>:
{
   1beac:	b508      	push	{r3, lr}
	__asm__ volatile(
   1beae:	f04f 0320 	mov.w	r3, #32
   1beb2:	f3ef 8111 	mrs	r1, BASEPRI
   1beb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1beba:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1bebe:	4a11      	ldr	r2, [pc, #68]	; (1bf04 <generic_hfclk_start+0x58>)
   1bec0:	6813      	ldr	r3, [r2, #0]
   1bec2:	f043 0002 	orr.w	r0, r3, #2
   1bec6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1bec8:	07da      	lsls	r2, r3, #31
   1beca:	d408      	bmi.n	1bede <generic_hfclk_start+0x32>
	__asm__ volatile(
   1becc:	f381 8811 	msr	BASEPRI, r1
   1bed0:	f3bf 8f6f 	isb	sy
}
   1bed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1bed8:	2001      	movs	r0, #1
   1beda:	f002 bfcd 	b.w	1ee78 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bede:	4b0a      	ldr	r3, [pc, #40]	; (1bf08 <generic_hfclk_start+0x5c>)
   1bee0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bee4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1bee8:	07d3      	lsls	r3, r2, #31
   1beea:	d5ef      	bpl.n	1becc <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1beec:	4807      	ldr	r0, [pc, #28]	; (1bf0c <generic_hfclk_start+0x60>)
   1beee:	f012 f8a4 	bl	2e03a <set_on_state>
   1bef2:	f381 8811 	msr	BASEPRI, r1
   1bef6:	f3bf 8f6f 	isb	sy
}
   1befa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1befe:	2000      	movs	r0, #0
   1bf00:	f7ff bf80 	b.w	1be04 <clkstarted_handle.constprop.0>
   1bf04:	2002187c 	.word	0x2002187c
   1bf08:	40005000 	.word	0x40005000
   1bf0c:	20021854 	.word	0x20021854

0001bf10 <api_blocking_start>:
{
   1bf10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bf12:	2200      	movs	r2, #0
   1bf14:	2301      	movs	r3, #1
   1bf16:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bf1a:	ab04      	add	r3, sp, #16
   1bf1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bf20:	4a09      	ldr	r2, [pc, #36]	; (1bf48 <api_blocking_start+0x38>)
   1bf22:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bf24:	f8cd d000 	str.w	sp, [sp]
   1bf28:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bf2c:	f012 f8c8 	bl	2e0c0 <api_start>
	if (err < 0) {
   1bf30:	2800      	cmp	r0, #0
   1bf32:	db05      	blt.n	1bf40 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1bf34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1bf38:	2300      	movs	r3, #0
   1bf3a:	4668      	mov	r0, sp
   1bf3c:	f009 fb74 	bl	25628 <z_impl_k_sem_take>
}
   1bf40:	b007      	add	sp, #28
   1bf42:	f85d fb04 	ldr.w	pc, [sp], #4
   1bf46:	bf00      	nop
   1bf48:	0002e0ff 	.word	0x0002e0ff

0001bf4c <generic_hfclk_stop>:
{
   1bf4c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bf4e:	f04f 0320 	mov.w	r3, #32
   1bf52:	f3ef 8411 	mrs	r4, BASEPRI
   1bf56:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf5a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1bf5e:	4a07      	ldr	r2, [pc, #28]	; (1bf7c <generic_hfclk_stop+0x30>)
   1bf60:	6813      	ldr	r3, [r2, #0]
   1bf62:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1bf66:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1bf68:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1bf6a:	d402      	bmi.n	1bf72 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1bf6c:	2001      	movs	r0, #1
   1bf6e:	f003 f801 	bl	1ef74 <nrfx_clock_stop>
	__asm__ volatile(
   1bf72:	f384 8811 	msr	BASEPRI, r4
   1bf76:	f3bf 8f6f 	isb	sy
}
   1bf7a:	bd10      	pop	{r4, pc}
   1bf7c:	2002187c 	.word	0x2002187c

0001bf80 <z_nrf_clock_control_lf_on>:
{
   1bf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bf84:	2201      	movs	r2, #1
   1bf86:	4606      	mov	r6, r0
   1bf88:	4941      	ldr	r1, [pc, #260]	; (1c090 <z_nrf_clock_control_lf_on+0x110>)
   1bf8a:	e8d1 3fef 	ldaex	r3, [r1]
   1bf8e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1bf92:	2800      	cmp	r0, #0
   1bf94:	d1f9      	bne.n	1bf8a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1bf96:	b9a3      	cbnz	r3, 1bfc2 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1bf98:	493e      	ldr	r1, [pc, #248]	; (1c094 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1bf9a:	483f      	ldr	r0, [pc, #252]	; (1c098 <z_nrf_clock_control_lf_on+0x118>)
   1bf9c:	604b      	str	r3, [r1, #4]
   1bf9e:	60cb      	str	r3, [r1, #12]
   1bfa0:	608a      	str	r2, [r1, #8]
   1bfa2:	f7f1 f83b 	bl	d01c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1bfa6:	2800      	cmp	r0, #0
   1bfa8:	da0b      	bge.n	1bfc2 <z_nrf_clock_control_lf_on+0x42>
   1bfaa:	493c      	ldr	r1, [pc, #240]	; (1c09c <z_nrf_clock_control_lf_on+0x11c>)
   1bfac:	f44f 730c 	mov.w	r3, #560	; 0x230
   1bfb0:	4a3b      	ldr	r2, [pc, #236]	; (1c0a0 <z_nrf_clock_control_lf_on+0x120>)
   1bfb2:	483c      	ldr	r0, [pc, #240]	; (1c0a4 <z_nrf_clock_control_lf_on+0x124>)
   1bfb4:	f00e fb6d 	bl	2a692 <assert_print>
   1bfb8:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1bfbc:	4838      	ldr	r0, [pc, #224]	; (1c0a0 <z_nrf_clock_control_lf_on+0x120>)
   1bfbe:	f00e fb61 	bl	2a684 <assert_post_action>
	switch (start_mode) {
   1bfc2:	b35e      	cbz	r6, 1c01c <z_nrf_clock_control_lf_on+0x9c>
   1bfc4:	1e73      	subs	r3, r6, #1
   1bfc6:	2b01      	cmp	r3, #1
   1bfc8:	d858      	bhi.n	1c07c <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1bfca:	2e01      	cmp	r6, #1
   1bfcc:	d106      	bne.n	1bfdc <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1bfce:	4b36      	ldr	r3, [pc, #216]	; (1c0a8 <z_nrf_clock_control_lf_on+0x128>)
   1bfd0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1bfd4:	f003 0303 	and.w	r3, r3, #3
   1bfd8:	2b02      	cmp	r3, #2
   1bfda:	d01f      	beq.n	1c01c <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1bfdc:	f014 f8a0 	bl	30120 <k_is_in_isr>
   1bfe0:	4605      	mov	r5, r0
   1bfe2:	b9e8      	cbnz	r0, 1c020 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1bfe4:	4b31      	ldr	r3, [pc, #196]	; (1c0ac <z_nrf_clock_control_lf_on+0x12c>)
   1bfe6:	781b      	ldrb	r3, [r3, #0]
   1bfe8:	b1d3      	cbz	r3, 1c020 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1bfea:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1bfec:	4607      	mov	r7, r0
   1bfee:	4b2e      	ldr	r3, [pc, #184]	; (1c0a8 <z_nrf_clock_control_lf_on+0x128>)
   1bff0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1bff4:	4c2c      	ldr	r4, [pc, #176]	; (1c0a8 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bff6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1c0b0 <z_nrf_clock_control_lf_on+0x130>
   1bffa:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bffe:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c002:	03d2      	lsls	r2, r2, #15
   1c004:	d516      	bpl.n	1c034 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c006:	f003 0303 	and.w	r3, r3, #3
   1c00a:	2b02      	cmp	r3, #2
   1c00c:	d001      	beq.n	1c012 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c00e:	2e01      	cmp	r6, #1
   1c010:	d110      	bne.n	1c034 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1c012:	b375      	cbz	r5, 1c072 <z_nrf_clock_control_lf_on+0xf2>
   1c014:	f387 8811 	msr	BASEPRI, r7
   1c018:	f3bf 8f6f 	isb	sy
}
   1c01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c020:	f04f 0320 	mov.w	r3, #32
   1c024:	f3ef 8711 	mrs	r7, BASEPRI
   1c028:	f383 8812 	msr	BASEPRI_MAX, r3
   1c02c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c030:	2501      	movs	r5, #1
   1c032:	e7df      	b.n	1bff4 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c034:	b1c5      	cbz	r5, 1c068 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c036:	4638      	mov	r0, r7
   1c038:	f7f4 fc6c 	bl	10914 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c03c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c040:	b2db      	uxtb	r3, r3
   1c042:	2b01      	cmp	r3, #1
   1c044:	d1d9      	bne.n	1bffa <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c046:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c04a:	2a00      	cmp	r2, #0
   1c04c:	d0d5      	beq.n	1bffa <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c04e:	2200      	movs	r2, #0
   1c050:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c054:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c058:	2202      	movs	r2, #2
   1c05a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1c05e:	2220      	movs	r2, #32
   1c060:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c064:	60a3      	str	r3, [r4, #8]
}
   1c066:	e7c8      	b.n	1bffa <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1c068:	2100      	movs	r1, #0
   1c06a:	2021      	movs	r0, #33	; 0x21
   1c06c:	f00b f98c 	bl	27388 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c070:	e7e4      	b.n	1c03c <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1c072:	2202      	movs	r2, #2
   1c074:	4b0c      	ldr	r3, [pc, #48]	; (1c0a8 <z_nrf_clock_control_lf_on+0x128>)
   1c076:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c07a:	e7cf      	b.n	1c01c <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1c07c:	490d      	ldr	r1, [pc, #52]	; (1c0b4 <z_nrf_clock_control_lf_on+0x134>)
   1c07e:	f240 2342 	movw	r3, #578	; 0x242
   1c082:	4a07      	ldr	r2, [pc, #28]	; (1c0a0 <z_nrf_clock_control_lf_on+0x120>)
   1c084:	4807      	ldr	r0, [pc, #28]	; (1c0a4 <z_nrf_clock_control_lf_on+0x124>)
   1c086:	f00e fb04 	bl	2a692 <assert_print>
   1c08a:	f240 2142 	movw	r1, #578	; 0x242
   1c08e:	e795      	b.n	1bfbc <z_nrf_clock_control_lf_on+0x3c>
   1c090:	200217c8 	.word	0x200217c8
   1c094:	200217b8 	.word	0x200217b8
   1c098:	200217ec 	.word	0x200217ec
   1c09c:	0003383c 	.word	0x0003383c
   1c0a0:	00036a91 	.word	0x00036a91
   1c0a4:	00032629 	.word	0x00032629
   1c0a8:	40005000 	.word	0x40005000
   1c0ac:	20022827 	.word	0x20022827
   1c0b0:	e000e100 	.word	0xe000e100
   1c0b4:	00037ac9 	.word	0x00037ac9

0001c0b8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c0b8:	b508      	push	{r3, lr}
   1c0ba:	4807      	ldr	r0, [pc, #28]	; (1c0d8 <uart_console_init+0x20>)
   1c0bc:	f013 fff9 	bl	300b2 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1c0c0:	b138      	cbz	r0, 1c0d2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c0c2:	4806      	ldr	r0, [pc, #24]	; (1c0dc <uart_console_init+0x24>)
   1c0c4:	f7f5 fbf4 	bl	118b0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c0c8:	4804      	ldr	r0, [pc, #16]	; (1c0dc <uart_console_init+0x24>)
   1c0ca:	f7f0 fc25 	bl	c918 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c0ce:	2000      	movs	r0, #0
}
   1c0d0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c0d2:	f06f 0012 	mvn.w	r0, #18
   1c0d6:	e7fb      	b.n	1c0d0 <uart_console_init+0x18>
   1c0d8:	00030f84 	.word	0x00030f84
   1c0dc:	0001c0e1 	.word	0x0001c0e1

0001c0e0 <console_out>:
	if ('\n' == c) {
   1c0e0:	280a      	cmp	r0, #10
{
   1c0e2:	b538      	push	{r3, r4, r5, lr}
   1c0e4:	4604      	mov	r4, r0
   1c0e6:	4d07      	ldr	r5, [pc, #28]	; (1c104 <console_out+0x24>)
	if ('\n' == c) {
   1c0e8:	d104      	bne.n	1c0f4 <console_out+0x14>
	api->poll_out(dev, out_char);
   1c0ea:	68ab      	ldr	r3, [r5, #8]
   1c0ec:	210d      	movs	r1, #13
   1c0ee:	4628      	mov	r0, r5
   1c0f0:	69db      	ldr	r3, [r3, #28]
   1c0f2:	4798      	blx	r3
   1c0f4:	68ab      	ldr	r3, [r5, #8]
   1c0f6:	4803      	ldr	r0, [pc, #12]	; (1c104 <console_out+0x24>)
   1c0f8:	69db      	ldr	r3, [r3, #28]
   1c0fa:	b2e1      	uxtb	r1, r4
   1c0fc:	4798      	blx	r3
}
   1c0fe:	4620      	mov	r0, r4
   1c100:	bd38      	pop	{r3, r4, r5, pc}
   1c102:	bf00      	nop
   1c104:	00030f84 	.word	0x00030f84

0001c108 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c108:	b510      	push	{r4, lr}
	return port->data;
   1c10a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c10c:	b961      	cbnz	r1, 1c128 <gpio_nrfx_manage_callback+0x20>
   1c10e:	4920      	ldr	r1, [pc, #128]	; (1c190 <gpio_nrfx_manage_callback+0x88>)
   1c110:	232a      	movs	r3, #42	; 0x2a
   1c112:	4a20      	ldr	r2, [pc, #128]	; (1c194 <gpio_nrfx_manage_callback+0x8c>)
   1c114:	4820      	ldr	r0, [pc, #128]	; (1c198 <gpio_nrfx_manage_callback+0x90>)
   1c116:	f00e fabc 	bl	2a692 <assert_print>
   1c11a:	4820      	ldr	r0, [pc, #128]	; (1c19c <gpio_nrfx_manage_callback+0x94>)
   1c11c:	f00e fab9 	bl	2a692 <assert_print>
   1c120:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1c122:	481c      	ldr	r0, [pc, #112]	; (1c194 <gpio_nrfx_manage_callback+0x8c>)
   1c124:	f00e faae 	bl	2a684 <assert_post_action>
   1c128:	6848      	ldr	r0, [r1, #4]
   1c12a:	b950      	cbnz	r0, 1c142 <gpio_nrfx_manage_callback+0x3a>
   1c12c:	491c      	ldr	r1, [pc, #112]	; (1c1a0 <gpio_nrfx_manage_callback+0x98>)
   1c12e:	232b      	movs	r3, #43	; 0x2b
   1c130:	4a18      	ldr	r2, [pc, #96]	; (1c194 <gpio_nrfx_manage_callback+0x8c>)
   1c132:	4819      	ldr	r0, [pc, #100]	; (1c198 <gpio_nrfx_manage_callback+0x90>)
   1c134:	f00e faad 	bl	2a692 <assert_print>
   1c138:	481a      	ldr	r0, [pc, #104]	; (1c1a4 <gpio_nrfx_manage_callback+0x9c>)
   1c13a:	f00e faaa 	bl	2a692 <assert_print>
   1c13e:	212b      	movs	r1, #43	; 0x2b
   1c140:	e7ef      	b.n	1c122 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1c142:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c144:	b1f8      	cbz	r0, 1c186 <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c146:	4288      	cmp	r0, r1
   1c148:	d119      	bne.n	1c17e <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1c14a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1c14c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c14e:	42a1      	cmp	r1, r4
	list->head = node;
   1c150:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c152:	d100      	bne.n	1c156 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1c154:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c156:	2000      	movs	r0, #0
   1c158:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1c15a:	b12a      	cbz	r2, 1c168 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1c15c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c15e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c160:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c162:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c164:	b902      	cbnz	r2, 1c168 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1c166:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c168:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c16a:	e010      	b.n	1c18e <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c16c:	4281      	cmp	r1, r0
   1c16e:	d106      	bne.n	1c17e <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1c170:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1c172:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c174:	6898      	ldr	r0, [r3, #8]
   1c176:	4281      	cmp	r1, r0
   1c178:	d1ed      	bne.n	1c156 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1c17a:	609c      	str	r4, [r3, #8]
}
   1c17c:	e7eb      	b.n	1c156 <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1c17e:	4604      	mov	r4, r0
   1c180:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c182:	2800      	cmp	r0, #0
   1c184:	d1f2      	bne.n	1c16c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1c186:	2a00      	cmp	r2, #0
   1c188:	d1e8      	bne.n	1c15c <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1c18a:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1c18e:	bd10      	pop	{r4, pc}
   1c190:	00032be2 	.word	0x00032be2
   1c194:	00036b2c 	.word	0x00036b2c
   1c198:	00032629 	.word	0x00032629
   1c19c:	00036b68 	.word	0x00036b68
   1c1a0:	00036b77 	.word	0x00036b77
   1c1a4:	00036b89 	.word	0x00036b89

0001c1a8 <gpio_nrfx_pin_interrupt_configure>:
{
   1c1a8:	b530      	push	{r4, r5, lr}
	return port->config;
   1c1aa:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c1ac:	f001 041f 	and.w	r4, r1, #31
   1c1b0:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c1b2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c1b6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c1b8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c1bc:	d105      	bne.n	1c1ca <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c1be:	4620      	mov	r0, r4
   1c1c0:	f003 fa22 	bl	1f608 <nrfx_gpiote_trigger_disable>
		return 0;
   1c1c4:	2000      	movs	r0, #0
}
   1c1c6:	b005      	add	sp, #20
   1c1c8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c1ca:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c1cc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c1d0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c1d4:	d114      	bne.n	1c200 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c1da:	bf0c      	ite	eq
   1c1dc:	2304      	moveq	r3, #4
   1c1de:	2305      	movne	r3, #5
   1c1e0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c1e4:	2300      	movs	r3, #0
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	4619      	mov	r1, r3
   1c1ea:	aa02      	add	r2, sp, #8
   1c1ec:	f003 f816 	bl	1f21c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c1f0:	4b2a      	ldr	r3, [pc, #168]	; (1c29c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1c1f2:	4298      	cmp	r0, r3
   1c1f4:	d14f      	bne.n	1c296 <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c1f6:	2101      	movs	r1, #1
   1c1f8:	4620      	mov	r0, r4
   1c1fa:	f003 f99b 	bl	1f534 <nrfx_gpiote_trigger_enable>
	return 0;
   1c1fe:	e7e1      	b.n	1c1c4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c200:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c204:	d024      	beq.n	1c250 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1c206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c20a:	bf14      	ite	ne
   1c20c:	2301      	movne	r3, #1
   1c20e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c210:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c214:	6883      	ldr	r3, [r0, #8]
   1c216:	40cb      	lsrs	r3, r1
   1c218:	07d8      	lsls	r0, r3, #31
   1c21a:	d4e3      	bmi.n	1c1e4 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c21c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c220:	d1e0      	bne.n	1c1e4 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1c222:	0962      	lsrs	r2, r4, #5
   1c224:	f004 031f 	and.w	r3, r4, #31
   1c228:	d014      	beq.n	1c254 <gpio_nrfx_pin_interrupt_configure+0xac>
   1c22a:	2a01      	cmp	r2, #1
   1c22c:	d104      	bne.n	1c238 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1c22e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c232:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c234:	07d1      	lsls	r1, r2, #31
   1c236:	d414      	bmi.n	1c262 <gpio_nrfx_pin_interrupt_configure+0xba>
   1c238:	4919      	ldr	r1, [pc, #100]	; (1c2a0 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1c23a:	481a      	ldr	r0, [pc, #104]	; (1c2a4 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1c23c:	f240 2347 	movw	r3, #583	; 0x247
   1c240:	4a19      	ldr	r2, [pc, #100]	; (1c2a8 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1c242:	f00e fa26 	bl	2a692 <assert_print>
   1c246:	f240 2147 	movw	r1, #583	; 0x247
   1c24a:	4817      	ldr	r0, [pc, #92]	; (1c2a8 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1c24c:	f00e fa1a 	bl	2a684 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c250:	2303      	movs	r3, #3
   1c252:	e7dd      	b.n	1c210 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1c254:	f04f 32ff 	mov.w	r2, #4294967295
   1c258:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c25a:	07d2      	lsls	r2, r2, #31
   1c25c:	d5ec      	bpl.n	1c238 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1c25e:	4a13      	ldr	r2, [pc, #76]	; (1c2ac <gpio_nrfx_pin_interrupt_configure+0x104>)
   1c260:	e000      	b.n	1c264 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1c262:	4a13      	ldr	r2, [pc, #76]	; (1c2b0 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c264:	3380      	adds	r3, #128	; 0x80
   1c266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c26a:	07db      	lsls	r3, r3, #31
   1c26c:	d4ba      	bmi.n	1c1e4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c26e:	f10d 0507 	add.w	r5, sp, #7
   1c272:	4629      	mov	r1, r5
   1c274:	4620      	mov	r0, r4
   1c276:	f003 f8f7 	bl	1f468 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c27a:	4b0e      	ldr	r3, [pc, #56]	; (1c2b4 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1c27c:	4298      	cmp	r0, r3
   1c27e:	d001      	beq.n	1c284 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1c280:	9503      	str	r5, [sp, #12]
   1c282:	e7af      	b.n	1c1e4 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c284:	4628      	mov	r0, r5
   1c286:	f003 f94f 	bl	1f528 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c28a:	4b04      	ldr	r3, [pc, #16]	; (1c29c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1c28c:	4298      	cmp	r0, r3
   1c28e:	d0f7      	beq.n	1c280 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1c290:	f06f 000b 	mvn.w	r0, #11
   1c294:	e797      	b.n	1c1c6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c296:	f06f 0015 	mvn.w	r0, #21
   1c29a:	e794      	b.n	1c1c6 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c29c:	0bad0000 	.word	0x0bad0000
   1c2a0:	00036bd3 	.word	0x00036bd3
   1c2a4:	00032629 	.word	0x00032629
   1c2a8:	00036ba0 	.word	0x00036ba0
   1c2ac:	40842500 	.word	0x40842500
   1c2b0:	40842800 	.word	0x40842800
   1c2b4:	0bad0004 	.word	0x0bad0004

0001c2b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c2b8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c2ba:	f003 f925 	bl	1f508 <nrfx_gpiote_is_init>
   1c2be:	4604      	mov	r4, r0
   1c2c0:	b968      	cbnz	r0, 1c2de <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c2c2:	f003 f8f9 	bl	1f4b8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c2c6:	4b08      	ldr	r3, [pc, #32]	; (1c2e8 <gpio_nrfx_init+0x30>)
   1c2c8:	4298      	cmp	r0, r3
   1c2ca:	d10a      	bne.n	1c2e2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c2cc:	4621      	mov	r1, r4
   1c2ce:	4807      	ldr	r0, [pc, #28]	; (1c2ec <gpio_nrfx_init+0x34>)
   1c2d0:	f003 f8c4 	bl	1f45c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c2d4:	4622      	mov	r2, r4
   1c2d6:	2105      	movs	r1, #5
   1c2d8:	202f      	movs	r0, #47	; 0x2f
   1c2da:	f7f4 fbbb 	bl	10a54 <z_arm_irq_priority_set>
		return 0;
   1c2de:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c2e0:	bd10      	pop	{r4, pc}
		return -EIO;
   1c2e2:	f06f 0004 	mvn.w	r0, #4
   1c2e6:	e7fb      	b.n	1c2e0 <gpio_nrfx_init+0x28>
   1c2e8:	0bad0000 	.word	0x0bad0000
   1c2ec:	0001c2f1 	.word	0x0001c2f1

0001c2f0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c2f0:	0942      	lsrs	r2, r0, #5
{
   1c2f2:	4603      	mov	r3, r0
   1c2f4:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c2f6:	d002      	beq.n	1c2fe <nrfx_gpio_handler+0xe>
   1c2f8:	2a01      	cmp	r2, #1
   1c2fa:	d01e      	beq.n	1c33a <nrfx_gpio_handler+0x4a>
}
   1c2fc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c2fe:	4e14      	ldr	r6, [pc, #80]	; (1c350 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1c300:	6932      	ldr	r2, [r6, #16]
   1c302:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c304:	2900      	cmp	r1, #0
   1c306:	d0f9      	beq.n	1c2fc <nrfx_gpio_handler+0xc>
   1c308:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1c30a:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1c30e:	680c      	ldr	r4, [r1, #0]
   1c310:	409d      	lsls	r5, r3
   1c312:	2900      	cmp	r1, #0
   1c314:	d0f2      	beq.n	1c2fc <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1c316:	688a      	ldr	r2, [r1, #8]
   1c318:	402a      	ands	r2, r5
   1c31a:	d012      	beq.n	1c342 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1c31c:	684b      	ldr	r3, [r1, #4]
   1c31e:	b973      	cbnz	r3, 1c33e <nrfx_gpio_handler+0x4e>
   1c320:	490c      	ldr	r1, [pc, #48]	; (1c354 <nrfx_gpio_handler+0x64>)
   1c322:	234d      	movs	r3, #77	; 0x4d
   1c324:	4a0c      	ldr	r2, [pc, #48]	; (1c358 <nrfx_gpio_handler+0x68>)
   1c326:	480d      	ldr	r0, [pc, #52]	; (1c35c <nrfx_gpio_handler+0x6c>)
   1c328:	f00e f9b3 	bl	2a692 <assert_print>
   1c32c:	480c      	ldr	r0, [pc, #48]	; (1c360 <nrfx_gpio_handler+0x70>)
   1c32e:	f00e f9b0 	bl	2a692 <assert_print>
   1c332:	214d      	movs	r1, #77	; 0x4d
   1c334:	4808      	ldr	r0, [pc, #32]	; (1c358 <nrfx_gpio_handler+0x68>)
   1c336:	f00e f9a5 	bl	2a684 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c33a:	4e0a      	ldr	r6, [pc, #40]	; (1c364 <nrfx_gpio_handler+0x74>)
   1c33c:	e7e0      	b.n	1c300 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c33e:	4630      	mov	r0, r6
   1c340:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c342:	b11c      	cbz	r4, 1c34c <nrfx_gpio_handler+0x5c>
   1c344:	6823      	ldr	r3, [r4, #0]
   1c346:	4621      	mov	r1, r4
   1c348:	461c      	mov	r4, r3
   1c34a:	e7e2      	b.n	1c312 <nrfx_gpio_handler+0x22>
   1c34c:	4623      	mov	r3, r4
   1c34e:	e7fa      	b.n	1c346 <nrfx_gpio_handler+0x56>
   1c350:	00030f24 	.word	0x00030f24
   1c354:	00037902 	.word	0x00037902
   1c358:	00036b2c 	.word	0x00036b2c
   1c35c:	00032629 	.word	0x00032629
   1c360:	00036b89 	.word	0x00036b89
   1c364:	00030f0c 	.word	0x00030f0c

0001c368 <gpio_nrfx_pin_configure>:
{
   1c368:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c36c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c370:	f001 051f 	and.w	r5, r1, #31
   1c374:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1c378:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c37a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c37e:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c380:	4628      	mov	r0, r5
   1c382:	f10d 0103 	add.w	r1, sp, #3
   1c386:	f003 f86f 	bl	1f468 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c38a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c38e:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c390:	d115      	bne.n	1c3be <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c392:	4628      	mov	r0, r5
   1c394:	f003 f962 	bl	1f65c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c398:	4b48      	ldr	r3, [pc, #288]	; (1c4bc <gpio_nrfx_pin_configure+0x154>)
   1c39a:	429e      	cmp	r6, r3
   1c39c:	d170      	bne.n	1c480 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1c39e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c3a2:	f003 f8bb 	bl	1f51c <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c3a6:	42b0      	cmp	r0, r6
   1c3a8:	d06a      	beq.n	1c480 <gpio_nrfx_pin_configure+0x118>
   1c3aa:	4945      	ldr	r1, [pc, #276]	; (1c4c0 <gpio_nrfx_pin_configure+0x158>)
   1c3ac:	236a      	movs	r3, #106	; 0x6a
   1c3ae:	4a45      	ldr	r2, [pc, #276]	; (1c4c4 <gpio_nrfx_pin_configure+0x15c>)
   1c3b0:	4845      	ldr	r0, [pc, #276]	; (1c4c8 <gpio_nrfx_pin_configure+0x160>)
   1c3b2:	f00e f96e 	bl	2a692 <assert_print>
   1c3b6:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c3b8:	4842      	ldr	r0, [pc, #264]	; (1c4c4 <gpio_nrfx_pin_configure+0x15c>)
   1c3ba:	f00e f963 	bl	2a684 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c3be:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c3c0:	4628      	mov	r0, r5
   1c3c2:	4619      	mov	r1, r3
   1c3c4:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c3c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c3ca:	f002 ff27 	bl	1f21c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c3ce:	4b3b      	ldr	r3, [pc, #236]	; (1c4bc <gpio_nrfx_pin_configure+0x154>)
   1c3d0:	4298      	cmp	r0, r3
   1c3d2:	d004      	beq.n	1c3de <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1c3d4:	f06f 0015 	mvn.w	r0, #21
}
   1c3d8:	b004      	add	sp, #16
   1c3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c3de:	4286      	cmp	r6, r0
   1c3e0:	d10d      	bne.n	1c3fe <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1c3e2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c3e6:	f003 f899 	bl	1f51c <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c3ea:	42b0      	cmp	r0, r6
   1c3ec:	d007      	beq.n	1c3fe <gpio_nrfx_pin_configure+0x96>
   1c3ee:	4934      	ldr	r1, [pc, #208]	; (1c4c0 <gpio_nrfx_pin_configure+0x158>)
   1c3f0:	237c      	movs	r3, #124	; 0x7c
   1c3f2:	4a34      	ldr	r2, [pc, #208]	; (1c4c4 <gpio_nrfx_pin_configure+0x15c>)
   1c3f4:	4834      	ldr	r0, [pc, #208]	; (1c4c8 <gpio_nrfx_pin_configure+0x160>)
   1c3f6:	f00e f94c 	bl	2a692 <assert_print>
   1c3fa:	217c      	movs	r1, #124	; 0x7c
   1c3fc:	e7dc      	b.n	1c3b8 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1c3fe:	03a6      	lsls	r6, r4, #14
   1c400:	d54c      	bpl.n	1c49c <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c402:	f240 3306 	movw	r3, #774	; 0x306
   1c406:	4023      	ands	r3, r4
   1c408:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c40c:	d019      	beq.n	1c442 <gpio_nrfx_pin_configure+0xda>
   1c40e:	d80c      	bhi.n	1c42a <gpio_nrfx_pin_configure+0xc2>
   1c410:	2b06      	cmp	r3, #6
   1c412:	d017      	beq.n	1c444 <gpio_nrfx_pin_configure+0xdc>
   1c414:	d804      	bhi.n	1c420 <gpio_nrfx_pin_configure+0xb8>
   1c416:	b1ab      	cbz	r3, 1c444 <gpio_nrfx_pin_configure+0xdc>
   1c418:	2b02      	cmp	r3, #2
   1c41a:	d1db      	bne.n	1c3d4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1c41c:	2304      	movs	r3, #4
   1c41e:	e011      	b.n	1c444 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c424:	d1d6      	bne.n	1c3d4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1c426:	2301      	movs	r3, #1
   1c428:	e00c      	b.n	1c444 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c42a:	f240 2202 	movw	r2, #514	; 0x202
   1c42e:	4293      	cmp	r3, r2
   1c430:	d028      	beq.n	1c484 <gpio_nrfx_pin_configure+0x11c>
   1c432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c436:	d027      	beq.n	1c488 <gpio_nrfx_pin_configure+0x120>
   1c438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c43c:	d1ca      	bne.n	1c3d4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1c43e:	2302      	movs	r3, #2
   1c440:	e000      	b.n	1c444 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1c442:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c444:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c448:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c44c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c450:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c452:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1c456:	bf4c      	ite	mi
   1c458:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1c45a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c45e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c460:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c464:	d512      	bpl.n	1c48c <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c466:	2301      	movs	r3, #1
   1c468:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c46c:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1c46e:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c470:	2200      	movs	r2, #0
   1c472:	4628      	mov	r0, r5
   1c474:	a901      	add	r1, sp, #4
   1c476:	f002 ff79 	bl	1f36c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c47a:	4b10      	ldr	r3, [pc, #64]	; (1c4bc <gpio_nrfx_pin_configure+0x154>)
   1c47c:	4298      	cmp	r0, r3
   1c47e:	d1a9      	bne.n	1c3d4 <gpio_nrfx_pin_configure+0x6c>
   1c480:	2000      	movs	r0, #0
   1c482:	e7a9      	b.n	1c3d8 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1c484:	2305      	movs	r3, #5
   1c486:	e7dd      	b.n	1c444 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c488:	2303      	movs	r3, #3
   1c48a:	e7db      	b.n	1c444 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c48c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c48e:	bf41      	itttt	mi
   1c490:	2301      	movmi	r3, #1
   1c492:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1c496:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1c498:	60d3      	strmi	r3, [r2, #12]
}
   1c49a:	e7e9      	b.n	1c470 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1c49c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c49e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1c4a2:	bf4c      	ite	mi
   1c4a4:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1c4a6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c4aa:	461a      	mov	r2, r3
   1c4ac:	4628      	mov	r0, r5
   1c4ae:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1c4b0:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c4b4:	f002 feb2 	bl	1f21c <nrfx_gpiote_input_configure>
   1c4b8:	e7df      	b.n	1c47a <gpio_nrfx_pin_configure+0x112>
   1c4ba:	bf00      	nop
   1c4bc:	0bad0000 	.word	0x0bad0000
   1c4c0:	0003355b 	.word	0x0003355b
   1c4c4:	00036bf6 	.word	0x00036bf6
   1c4c8:	00032629 	.word	0x00032629

0001c4cc <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1c4cc:	4603      	mov	r3, r0
   1c4ce:	b510      	push	{r4, lr}
   1c4d0:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c4d2:	7919      	ldrb	r1, [r3, #4]
   1c4d4:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1c4d6:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c4d8:	fa03 f101 	lsl.w	r1, r3, r1
   1c4dc:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1c4de:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c4e0:	681b      	ldr	r3, [r3, #0]
   1c4e2:	4219      	tst	r1, r3
   1c4e4:	d10e      	bne.n	1c504 <gpio_pin_set_dt.isra.0+0x38>
   1c4e6:	490e      	ldr	r1, [pc, #56]	; (1c520 <gpio_pin_set_dt.isra.0+0x54>)
   1c4e8:	f240 533d 	movw	r3, #1341	; 0x53d
   1c4ec:	4a0d      	ldr	r2, [pc, #52]	; (1c524 <gpio_pin_set_dt.isra.0+0x58>)
   1c4ee:	480e      	ldr	r0, [pc, #56]	; (1c528 <gpio_pin_set_dt.isra.0+0x5c>)
   1c4f0:	f00e f8cf 	bl	2a692 <assert_print>
   1c4f4:	480d      	ldr	r0, [pc, #52]	; (1c52c <gpio_pin_set_dt.isra.0+0x60>)
   1c4f6:	f00e f8cc 	bl	2a692 <assert_print>
   1c4fa:	f240 513d 	movw	r1, #1341	; 0x53d
   1c4fe:	4809      	ldr	r0, [pc, #36]	; (1c524 <gpio_pin_set_dt.isra.0+0x58>)
   1c500:	f00e f8c0 	bl	2a684 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c504:	6823      	ldr	r3, [r4, #0]
   1c506:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1c508:	bf18      	it	ne
   1c50a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1c50e:	b122      	cbz	r2, 1c51a <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1c510:	6883      	ldr	r3, [r0, #8]
   1c512:	68db      	ldr	r3, [r3, #12]
}
   1c514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1c518:	4718      	bx	r3
   1c51a:	6883      	ldr	r3, [r0, #8]
   1c51c:	691b      	ldr	r3, [r3, #16]
   1c51e:	e7f9      	b.n	1c514 <gpio_pin_set_dt.isra.0+0x48>
   1c520:	000325eb 	.word	0x000325eb
   1c524:	000325ba 	.word	0x000325ba
   1c528:	00032629 	.word	0x00032629
   1c52c:	00032646 	.word	0x00032646

0001c530 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1c530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c534:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1c536:	6844      	ldr	r4, [r0, #4]
{
   1c538:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c53a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1c53c:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1c53e:	2100      	movs	r1, #0
   1c540:	4630      	mov	r0, r6
   1c542:	1d3a      	adds	r2, r7, #4
   1c544:	f012 f961 	bl	2e80a <pinctrl_lookup_state>
	if (ret < 0) {
   1c548:	2800      	cmp	r0, #0
   1c54a:	db32      	blt.n	1c5b2 <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1c54c:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c54e:	6832      	ldr	r2, [r6, #0]
   1c550:	7919      	ldrb	r1, [r3, #4]
   1c552:	6818      	ldr	r0, [r3, #0]
   1c554:	f012 f96c 	bl	2e830 <pinctrl_configure_pins>
	if (err < 0) {
   1c558:	2800      	cmp	r0, #0
   1c55a:	db2a      	blt.n	1c5b2 <spi_nrfx_init+0x82>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c55c:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1c55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c560:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c562:	68ac      	ldr	r4, [r5, #8]
   1c564:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1c568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1c56c:	429c      	cmp	r4, r3
   1c56e:	d304      	bcc.n	1c57a <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1c570:	4628      	mov	r0, r5
   1c572:	f011 fe2b 	bl	2e1cc <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1c576:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1c578:	e01b      	b.n	1c5b2 <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1c57a:	6820      	ldr	r0, [r4, #0]
   1c57c:	f013 fd99 	bl	300b2 <z_device_is_ready>
   1c580:	b9d8      	cbnz	r0, 1c5ba <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1c582:	6823      	ldr	r3, [r4, #0]
   1c584:	6819      	ldr	r1, [r3, #0]
   1c586:	7923      	ldrb	r3, [r4, #4]
   1c588:	466c      	mov	r4, sp
   1c58a:	b08a      	sub	sp, #40	; 0x28
   1c58c:	466a      	mov	r2, sp
   1c58e:	61d3      	str	r3, [r2, #28]
   1c590:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c594:	4833      	ldr	r0, [pc, #204]	; (1c664 <spi_nrfx_init+0x134>)
   1c596:	8413      	strh	r3, [r2, #32]
   1c598:	4b33      	ldr	r3, [pc, #204]	; (1c668 <spi_nrfx_init+0x138>)
   1c59a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c59e:	4833      	ldr	r0, [pc, #204]	; (1c66c <spi_nrfx_init+0x13c>)
   1c5a0:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c5a4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c5a8:	f011 fdeb 	bl	2e182 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1c5ac:	f06f 0012 	mvn.w	r0, #18
   1c5b0:	46a5      	mov	sp, r4
#endif
}
   1c5b2:	370c      	adds	r7, #12
   1c5b4:	46bd      	mov	sp, r7
   1c5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1c5ba:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1c5bc:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1c5be:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c5c0:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1c5c4:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1c5c6:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1c5ca:	e9d0 c901 	ldrd	ip, r9, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c5ce:	d10e      	bne.n	1c5ee <spi_nrfx_init+0xbe>
   1c5d0:	4927      	ldr	r1, [pc, #156]	; (1c670 <spi_nrfx_init+0x140>)
   1c5d2:	f240 23b7 	movw	r3, #695	; 0x2b7
   1c5d6:	4a27      	ldr	r2, [pc, #156]	; (1c674 <spi_nrfx_init+0x144>)
   1c5d8:	4827      	ldr	r0, [pc, #156]	; (1c678 <spi_nrfx_init+0x148>)
   1c5da:	f00e f85a 	bl	2a692 <assert_print>
   1c5de:	4827      	ldr	r0, [pc, #156]	; (1c67c <spi_nrfx_init+0x14c>)
   1c5e0:	f00e f857 	bl	2a692 <assert_print>
   1c5e4:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1c5e8:	4822      	ldr	r0, [pc, #136]	; (1c674 <spi_nrfx_init+0x144>)
   1c5ea:	f00e f84b 	bl	2a684 <assert_post_action>
   1c5ee:	f003 0206 	and.w	r2, r3, #6
   1c5f2:	2a04      	cmp	r2, #4
   1c5f4:	d109      	bne.n	1c60a <spi_nrfx_init+0xda>
   1c5f6:	4922      	ldr	r1, [pc, #136]	; (1c680 <spi_nrfx_init+0x150>)
   1c5f8:	f240 23bf 	movw	r3, #703	; 0x2bf
   1c5fc:	4a1d      	ldr	r2, [pc, #116]	; (1c674 <spi_nrfx_init+0x144>)
   1c5fe:	481e      	ldr	r0, [pc, #120]	; (1c678 <spi_nrfx_init+0x148>)
   1c600:	f00e f847 	bl	2a692 <assert_print>
   1c604:	f240 21bf 	movw	r1, #703	; 0x2bf
   1c608:	e7ee      	b.n	1c5e8 <spi_nrfx_init+0xb8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c60a:	f8dc c000 	ldr.w	ip, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c60e:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c610:	fa06 fe01 	lsl.w	lr, r6, r1
	return gpio_pin_configure(spec->port,
   1c614:	bf54      	ite	pl
   1c616:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c61a:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c61e:	ea1e 0f0c 	tst.w	lr, ip
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c626:	d10c      	bne.n	1c642 <spi_nrfx_init+0x112>
   1c628:	4916      	ldr	r1, [pc, #88]	; (1c684 <spi_nrfx_init+0x154>)
   1c62a:	f240 23d2 	movw	r3, #722	; 0x2d2
   1c62e:	4a11      	ldr	r2, [pc, #68]	; (1c674 <spi_nrfx_init+0x144>)
   1c630:	4811      	ldr	r0, [pc, #68]	; (1c678 <spi_nrfx_init+0x148>)
   1c632:	f00e f82e 	bl	2a692 <assert_print>
   1c636:	4814      	ldr	r0, [pc, #80]	; (1c688 <spi_nrfx_init+0x158>)
   1c638:	f00e f82b 	bl	2a692 <assert_print>
   1c63c:	f240 21d2 	movw	r1, #722	; 0x2d2
   1c640:	e7d2      	b.n	1c5e8 <spi_nrfx_init+0xb8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c642:	f8d8 c000 	ldr.w	ip, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c646:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c648:	bf4c      	ite	mi
   1c64a:	ea4c 030e 	orrmi.w	r3, ip, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c64e:	ea2c 030e 	bicpl.w	r3, ip, lr
   1c652:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
   1c656:	f8d9 3000 	ldr.w	r3, [r9]
   1c65a:	4798      	blx	r3
		if (ret < 0) {
   1c65c:	2800      	cmp	r0, #0
   1c65e:	dba8      	blt.n	1c5b2 <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c660:	3408      	adds	r4, #8
   1c662:	e77f      	b.n	1c564 <spi_nrfx_init+0x34>
   1c664:	00036c3a 	.word	0x00036c3a
   1c668:	01000004 	.word	0x01000004
   1c66c:	000315ac 	.word	0x000315ac
   1c670:	000328c2 	.word	0x000328c2
   1c674:	000325ba 	.word	0x000325ba
   1c678:	00032629 	.word	0x00032629
   1c67c:	000328fb 	.word	0x000328fb
   1c680:	000329bf 	.word	0x000329bf
   1c684:	000325eb 	.word	0x000325eb
   1c688:	00032646 	.word	0x00032646

0001c68c <transfer_next_chunk>:
{
   1c68c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1c68e:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c690:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1c692:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1c694:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1c696:	b98d      	cbnz	r5, 1c6bc <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1c698:	2b00      	cmp	r3, #0
   1c69a:	d137      	bne.n	1c70c <transfer_next_chunk+0x80>
	int error = 0;
   1c69c:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1c69e:	2200      	movs	r2, #0
   1c6a0:	4620      	mov	r0, r4
   1c6a2:	4611      	mov	r1, r2
   1c6a4:	f011 fd70 	bl	2e188 <_spi_context_cs_control>
	ctx->sync_status = status;
   1c6a8:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1c6aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c6ae:	f008 ff77 	bl	255a0 <z_impl_k_sem_give>
	dev_data->busy = false;
   1c6b2:	2300      	movs	r3, #0
   1c6b4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1c6b8:	b004      	add	sp, #16
   1c6ba:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1c6bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1c6be:	bb0b      	cbnz	r3, 1c704 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1c6c0:	bb39      	cbnz	r1, 1c712 <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1c6c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c6c6:	42aa      	cmp	r2, r5
   1c6c8:	bf28      	it	cs
   1c6ca:	462a      	movcs	r2, r5
   1c6cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1c6ce:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1c6d0:	9100      	str	r1, [sp, #0]
   1c6d2:	b11b      	cbz	r3, 1c6dc <transfer_next_chunk+0x50>
   1c6d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1c6d6:	2b00      	cmp	r3, #0
   1c6d8:	bf18      	it	ne
   1c6da:	4613      	movne	r3, r2
   1c6dc:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1c6de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c6e0:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1c6e2:	b11b      	cbz	r3, 1c6ec <transfer_next_chunk+0x60>
   1c6e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1c6e6:	2b00      	cmp	r3, #0
   1c6e8:	bf18      	it	ne
   1c6ea:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1c6ec:	2200      	movs	r2, #0
   1c6ee:	4669      	mov	r1, sp
   1c6f0:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1c6f2:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1c6f4:	f003 ff56 	bl	205a4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1c6f8:	4b0d      	ldr	r3, [pc, #52]	; (1c730 <transfer_next_chunk+0xa4>)
   1c6fa:	4298      	cmp	r0, r3
   1c6fc:	d0dc      	beq.n	1c6b8 <transfer_next_chunk+0x2c>
			error = -EIO;
   1c6fe:	f06f 0504 	mvn.w	r5, #4
   1c702:	e7cc      	b.n	1c69e <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1c704:	429d      	cmp	r5, r3
   1c706:	bf28      	it	cs
   1c708:	461d      	movcs	r5, r3
   1c70a:	e7d9      	b.n	1c6c0 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1c70c:	461d      	mov	r5, r3
   1c70e:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1c710:	e7d7      	b.n	1c6c2 <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1c712:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1c716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c71a:	d0d2      	beq.n	1c6c2 <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1c71c:	2d08      	cmp	r5, #8
   1c71e:	bf28      	it	cs
   1c720:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c722:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1c724:	462a      	mov	r2, r5
   1c726:	f013 ff0e 	bl	30546 <memcpy>
			tx_buf = dev_data->buffer;
   1c72a:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1c72c:	e7c9      	b.n	1c6c2 <transfer_next_chunk+0x36>
   1c72e:	bf00      	nop
   1c730:	0bad0000 	.word	0x0bad0000

0001c734 <event_handler>:
{
   1c734:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c736:	7803      	ldrb	r3, [r0, #0]
{
   1c738:	460c      	mov	r4, r1
   1c73a:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c73c:	2b00      	cmp	r3, #0
   1c73e:	d154      	bne.n	1c7ea <event_handler+0xb6>
	if (!ctx->tx_len) {
   1c740:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c742:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1c744:	b15b      	cbz	r3, 1c75e <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1c746:	429a      	cmp	r2, r3
   1c748:	d91e      	bls.n	1c788 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1c74a:	4b29      	ldr	r3, [pc, #164]	; (1c7f0 <event_handler+0xbc>)
   1c74c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c750:	9305      	str	r3, [sp, #20]
   1c752:	2302      	movs	r3, #2
   1c754:	4827      	ldr	r0, [pc, #156]	; (1c7f4 <event_handler+0xc0>)
   1c756:	aa04      	add	r2, sp, #16
   1c758:	9304      	str	r3, [sp, #16]
   1c75a:	f011 fd12 	bl	2e182 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1c75e:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c760:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1c762:	b15b      	cbz	r3, 1c77c <event_handler+0x48>
	if (len > ctx->rx_len) {
   1c764:	429a      	cmp	r2, r3
   1c766:	d927      	bls.n	1c7b8 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1c768:	4b21      	ldr	r3, [pc, #132]	; (1c7f0 <event_handler+0xbc>)
   1c76a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c76e:	9305      	str	r3, [sp, #20]
   1c770:	2302      	movs	r3, #2
   1c772:	4820      	ldr	r0, [pc, #128]	; (1c7f4 <event_handler+0xc0>)
   1c774:	aa04      	add	r2, sp, #16
   1c776:	9304      	str	r3, [sp, #16]
   1c778:	f011 fd03 	bl	2e182 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1c77c:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1c77e:	b006      	add	sp, #24
   1c780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1c784:	f7ff bf82 	b.w	1c68c <transfer_next_chunk>
	ctx->tx_len -= len;
   1c788:	1a9b      	subs	r3, r3, r2
   1c78a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1c78c:	b973      	cbnz	r3, 1c7ac <event_handler+0x78>
		++ctx->current_tx;
   1c78e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1c790:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1c794:	3308      	adds	r3, #8
   1c796:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1c798:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1c79a:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1c79e:	3b01      	subs	r3, #1
   1c7a0:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1c7a2:	3148      	adds	r1, #72	; 0x48
   1c7a4:	f011 fcda 	bl	2e15c <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1c7a8:	6560      	str	r0, [r4, #84]	; 0x54
   1c7aa:	e7d8      	b.n	1c75e <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1c7ac:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1c7ae:	2b00      	cmp	r3, #0
   1c7b0:	d0d5      	beq.n	1c75e <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1c7b2:	4413      	add	r3, r2
   1c7b4:	654b      	str	r3, [r1, #84]	; 0x54
   1c7b6:	e7d2      	b.n	1c75e <event_handler+0x2a>
	ctx->rx_len -= len;
   1c7b8:	1a9b      	subs	r3, r3, r2
   1c7ba:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1c7bc:	b97b      	cbnz	r3, 1c7de <event_handler+0xaa>
		++ctx->current_rx;
   1c7be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1c7c0:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1c7c4:	3308      	adds	r3, #8
   1c7c6:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1c7c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1c7ca:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1c7ce:	3b01      	subs	r3, #1
   1c7d0:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1c7d2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1c7d6:	f011 fcc1 	bl	2e15c <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1c7da:	65e0      	str	r0, [r4, #92]	; 0x5c
   1c7dc:	e7ce      	b.n	1c77c <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1c7de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c7e0:	2b00      	cmp	r3, #0
   1c7e2:	d0cb      	beq.n	1c77c <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1c7e4:	4413      	add	r3, r2
   1c7e6:	65e3      	str	r3, [r4, #92]	; 0x5c
   1c7e8:	e7c8      	b.n	1c77c <event_handler+0x48>
}
   1c7ea:	b006      	add	sp, #24
   1c7ec:	bd10      	pop	{r4, pc}
   1c7ee:	bf00      	nop
   1c7f0:	00036c5e 	.word	0x00036c5e
   1c7f4:	000315ac 	.word	0x000315ac

0001c7f8 <spi_nrfx_transceive>:
{
   1c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7fc:	b08b      	sub	sp, #44	; 0x2c
   1c7fe:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c800:	888b      	ldrh	r3, [r1, #4]
   1c802:	af00      	add	r7, sp, #0
   1c804:	049b      	lsls	r3, r3, #18
   1c806:	4680      	mov	r8, r0
   1c808:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1c80a:	6904      	ldr	r4, [r0, #16]
{
   1c80c:	60ba      	str	r2, [r7, #8]
   1c80e:	d438      	bmi.n	1c882 <spi_nrfx_transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   1c810:	f04f 32ff 	mov.w	r2, #4294967295
   1c814:	f04f 33ff 	mov.w	r3, #4294967295
   1c818:	f104 0010 	add.w	r0, r4, #16
   1c81c:	f008 ff04 	bl	25628 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1c820:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c822:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1c826:	f8d8 9010 	ldr.w	r9, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1c82a:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c82c:	60fb      	str	r3, [r7, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1c82e:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1c832:	607b      	str	r3, [r7, #4]
   1c834:	b123      	cbz	r3, 1c840 <spi_nrfx_transceive+0x48>
   1c836:	f8d9 3000 	ldr.w	r3, [r9]
   1c83a:	429e      	cmp	r6, r3
   1c83c:	f000 80e8 	beq.w	1ca10 <spi_nrfx_transceive+0x218>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1c840:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1c844:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1c848:	d022      	beq.n	1c890 <spi_nrfx_transceive+0x98>
		LOG_ERR("Half-duplex not supported");
   1c84a:	4ba8      	ldr	r3, [pc, #672]	; (1caec <spi_nrfx_transceive+0x2f4>)
		return -ENOTSUP;
   1c84c:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1c850:	627b      	str	r3, [r7, #36]	; 0x24
   1c852:	2302      	movs	r3, #2
   1c854:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c858:	48a5      	ldr	r0, [pc, #660]	; (1caf0 <spi_nrfx_transceive+0x2f8>)
   1c85a:	623b      	str	r3, [r7, #32]
   1c85c:	f107 0220 	add.w	r2, r7, #32
   1c860:	f011 fc8f 	bl	2e182 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1c864:	6823      	ldr	r3, [r4, #0]
   1c866:	889b      	ldrh	r3, [r3, #4]
   1c868:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1c86c:	d104      	bne.n	1c878 <spi_nrfx_transceive+0x80>
		ctx->owner = NULL;
   1c86e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1c870:	f104 0010 	add.w	r0, r4, #16
   1c874:	f008 fe94 	bl	255a0 <z_impl_k_sem_give>
}
   1c878:	4628      	mov	r0, r5
   1c87a:	372c      	adds	r7, #44	; 0x2c
   1c87c:	46bd      	mov	sp, r7
   1c87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c882:	69a3      	ldr	r3, [r4, #24]
   1c884:	2b00      	cmp	r3, #0
   1c886:	d1c3      	bne.n	1c810 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1c888:	6863      	ldr	r3, [r4, #4]
   1c88a:	4299      	cmp	r1, r3
   1c88c:	d1c0      	bne.n	1c810 <spi_nrfx_transceive+0x18>
   1c88e:	e7c8      	b.n	1c822 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1c890:	f01c 0f01 	tst.w	ip, #1
   1c894:	d016      	beq.n	1c8c4 <spi_nrfx_transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1c896:	466d      	mov	r5, sp
   1c898:	b088      	sub	sp, #32
   1c89a:	f8d8 3000 	ldr.w	r3, [r8]
   1c89e:	466a      	mov	r2, sp
   1c8a0:	4994      	ldr	r1, [pc, #592]	; (1caf4 <spi_nrfx_transceive+0x2fc>)
   1c8a2:	4893      	ldr	r0, [pc, #588]	; (1caf0 <spi_nrfx_transceive+0x2f8>)
   1c8a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c8a8:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c8ac:	8393      	strh	r3, [r2, #28]
   1c8ae:	4b92      	ldr	r3, [pc, #584]	; (1caf8 <spi_nrfx_transceive+0x300>)
   1c8b0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1c8b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8b8:	f011 fc63 	bl	2e182 <z_log_msg_static_create.constprop.0>
   1c8bc:	46ad      	mov	sp, r5
		return -EINVAL;
   1c8be:	f06f 0515 	mvn.w	r5, #21
   1c8c2:	e7cf      	b.n	1c864 <spi_nrfx_transceive+0x6c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1c8c4:	f01c 0f08 	tst.w	ip, #8
   1c8c8:	d00b      	beq.n	1c8e2 <spi_nrfx_transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
   1c8ca:	4b8c      	ldr	r3, [pc, #560]	; (1cafc <spi_nrfx_transceive+0x304>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1c8cc:	627b      	str	r3, [r7, #36]	; 0x24
   1c8ce:	2302      	movs	r3, #2
   1c8d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c8d4:	4886      	ldr	r0, [pc, #536]	; (1caf0 <spi_nrfx_transceive+0x2f8>)
   1c8d6:	623b      	str	r3, [r7, #32]
   1c8d8:	f107 0220 	add.w	r2, r7, #32
   1c8dc:	f011 fc51 	bl	2e182 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1c8e0:	e7ed      	b.n	1c8be <spi_nrfx_transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1c8e2:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1c8e6:	2b08      	cmp	r3, #8
   1c8e8:	d001      	beq.n	1c8ee <spi_nrfx_transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1c8ea:	4b85      	ldr	r3, [pc, #532]	; (1cb00 <spi_nrfx_transceive+0x308>)
   1c8ec:	e7ee      	b.n	1c8cc <spi_nrfx_transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
   1c8ee:	6833      	ldr	r3, [r6, #0]
   1c8f0:	603b      	str	r3, [r7, #0]
   1c8f2:	683a      	ldr	r2, [r7, #0]
   1c8f4:	4b83      	ldr	r3, [pc, #524]	; (1cb04 <spi_nrfx_transceive+0x30c>)
   1c8f6:	429a      	cmp	r2, r3
   1c8f8:	d801      	bhi.n	1c8fe <spi_nrfx_transceive+0x106>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1c8fa:	4b83      	ldr	r3, [pc, #524]	; (1cb08 <spi_nrfx_transceive+0x310>)
   1c8fc:	e7e6      	b.n	1c8cc <spi_nrfx_transceive+0xd4>
	if (max_freq > 16000000 &&
   1c8fe:	4b83      	ldr	r3, [pc, #524]	; (1cb0c <spi_nrfx_transceive+0x314>)
   1c900:	429d      	cmp	r5, r3
   1c902:	d906      	bls.n	1c912 <spi_nrfx_transceive+0x11a>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1c904:	4a82      	ldr	r2, [pc, #520]	; (1cb10 <spi_nrfx_transceive+0x318>)
   1c906:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1c90a:	f012 0f03 	tst.w	r2, #3
   1c90e:	bf18      	it	ne
   1c910:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1c912:	68fb      	ldr	r3, [r7, #12]
   1c914:	f107 0e10 	add.w	lr, r7, #16
   1c918:	f103 0b0c 	add.w	fp, r3, #12
   1c91c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1c920:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c924:	683b      	ldr	r3, [r7, #0]
	config = dev_config->def_config;
   1c926:	e89b 0003 	ldmia.w	fp, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c92a:	42ab      	cmp	r3, r5
   1c92c:	bf28      	it	cs
   1c92e:	462b      	movcs	r3, r5
   1c930:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1c932:	4b78      	ldr	r3, [pc, #480]	; (1cb14 <spi_nrfx_transceive+0x31c>)
	config = dev_config->def_config;
   1c934:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   1c938:	429d      	cmp	r5, r3
   1c93a:	d94b      	bls.n	1c9d4 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 500000) {
   1c93c:	4b76      	ldr	r3, [pc, #472]	; (1cb18 <spi_nrfx_transceive+0x320>)
   1c93e:	429d      	cmp	r5, r3
   1c940:	d94b      	bls.n	1c9da <spi_nrfx_transceive+0x1e2>
	} else if (frequency < 1000000) {
   1c942:	4b76      	ldr	r3, [pc, #472]	; (1cb1c <spi_nrfx_transceive+0x324>)
   1c944:	429d      	cmp	r5, r3
   1c946:	d94b      	bls.n	1c9e0 <spi_nrfx_transceive+0x1e8>
	} else if (frequency < 2000000) {
   1c948:	4b75      	ldr	r3, [pc, #468]	; (1cb20 <spi_nrfx_transceive+0x328>)
   1c94a:	429d      	cmp	r5, r3
   1c94c:	d94b      	bls.n	1c9e6 <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 4000000) {
   1c94e:	4b75      	ldr	r3, [pc, #468]	; (1cb24 <spi_nrfx_transceive+0x32c>)
   1c950:	429d      	cmp	r5, r3
   1c952:	d94b      	bls.n	1c9ec <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 8000000) {
   1c954:	4b74      	ldr	r3, [pc, #464]	; (1cb28 <spi_nrfx_transceive+0x330>)
   1c956:	429d      	cmp	r5, r3
   1c958:	d34b      	bcc.n	1c9f2 <spi_nrfx_transceive+0x1fa>
	} else if (frequency < 16000000) {
   1c95a:	4b6c      	ldr	r3, [pc, #432]	; (1cb0c <spi_nrfx_transceive+0x314>)
   1c95c:	429d      	cmp	r5, r3
   1c95e:	d34b      	bcc.n	1c9f8 <spi_nrfx_transceive+0x200>
		return NRF_SPIM_FREQ_16M;
   1c960:	4b72      	ldr	r3, [pc, #456]	; (1cb2c <spi_nrfx_transceive+0x334>)
   1c962:	429d      	cmp	r5, r3
   1c964:	bf2c      	ite	cs
   1c966:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1c96a:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c96e:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c972:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c974:	f00c 0304 	and.w	r3, ip, #4
   1c978:	d041      	beq.n	1c9fe <spi_nrfx_transceive+0x206>
			return NRF_SPIM_MODE_2;
   1c97a:	2b00      	cmp	r3, #0
   1c97c:	bf14      	ite	ne
   1c97e:	2303      	movne	r3, #3
   1c980:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1c982:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1c984:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1c986:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1c98a:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1c98e:	b12b      	cbz	r3, 1c99c <spi_nrfx_transceive+0x1a4>
		nrfx_spim_uninit(&dev_config->spim);
   1c990:	68f8      	ldr	r0, [r7, #12]
   1c992:	f003 fd9d 	bl	204d0 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1c996:	2300      	movs	r3, #0
   1c998:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1c99c:	464b      	mov	r3, r9
   1c99e:	4a64      	ldr	r2, [pc, #400]	; (1cb30 <spi_nrfx_transceive+0x338>)
   1c9a0:	68f8      	ldr	r0, [r7, #12]
   1c9a2:	f107 0110 	add.w	r1, r7, #16
   1c9a6:	f003 fc61 	bl	2026c <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1c9aa:	4b62      	ldr	r3, [pc, #392]	; (1cb34 <spi_nrfx_transceive+0x33c>)
   1c9ac:	4298      	cmp	r0, r3
   1c9ae:	d02a      	beq.n	1ca06 <spi_nrfx_transceive+0x20e>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1c9b0:	466d      	mov	r5, sp
   1c9b2:	b088      	sub	sp, #32
   1c9b4:	466a      	mov	r2, sp
   1c9b6:	4b60      	ldr	r3, [pc, #384]	; (1cb38 <spi_nrfx_transceive+0x340>)
   1c9b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c9bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c9c0:	2303      	movs	r3, #3
   1c9c2:	484b      	ldr	r0, [pc, #300]	; (1caf0 <spi_nrfx_transceive+0x2f8>)
   1c9c4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c9c8:	f011 fbdb 	bl	2e182 <z_log_msg_static_create.constprop.0>
   1c9cc:	46ad      	mov	sp, r5
		return -EIO;
   1c9ce:	f06f 0504 	mvn.w	r5, #4
   1c9d2:	e747      	b.n	1c864 <spi_nrfx_transceive+0x6c>
		return NRF_SPIM_FREQ_125K;
   1c9d4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1c9d8:	e7c9      	b.n	1c96e <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_250K;
   1c9da:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1c9de:	e7c6      	b.n	1c96e <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_500K;
   1c9e0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1c9e4:	e7c3      	b.n	1c96e <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_1M;
   1c9e6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c9ea:	e7c0      	b.n	1c96e <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_2M;
   1c9ec:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1c9f0:	e7bd      	b.n	1c96e <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_4M;
   1c9f2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1c9f6:	e7ba      	b.n	1c96e <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_8M;
   1c9f8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1c9fc:	e7b7      	b.n	1c96e <spi_nrfx_transceive+0x176>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1c9fe:	3b00      	subs	r3, #0
   1ca00:	bf18      	it	ne
   1ca02:	2301      	movne	r3, #1
   1ca04:	e7bd      	b.n	1c982 <spi_nrfx_transceive+0x18a>
	dev_data->initialized = true;
   1ca06:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1ca08:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1ca0c:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1ca10:	2301      	movs	r3, #1
   1ca12:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1ca16:	68bb      	ldr	r3, [r7, #8]
   1ca18:	2b00      	cmp	r3, #0
   1ca1a:	d154      	bne.n	1cac6 <spi_nrfx_transceive+0x2ce>
   1ca1c:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1ca1e:	2300      	movs	r3, #0
   1ca20:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1ca22:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1ca26:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1ca2a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1ca2e:	f011 fb95 	bl	2e15c <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1ca32:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1ca34:	f1ba 0f00 	cmp.w	sl, #0
   1ca38:	d14d      	bne.n	1cad6 <spi_nrfx_transceive+0x2de>
   1ca3a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1ca3e:	2300      	movs	r3, #0
   1ca40:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1ca42:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1ca46:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1ca4a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1ca4e:	f011 fb85 	bl	2e15c <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1ca52:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1ca54:	2101      	movs	r1, #1
   1ca56:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1ca58:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1ca5a:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1ca5c:	4620      	mov	r0, r4
   1ca5e:	f011 fb93 	bl	2e188 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1ca62:	4640      	mov	r0, r8
   1ca64:	f7ff fe12 	bl	1c68c <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1ca68:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1ca6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1ca6c:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1ca6e:	429d      	cmp	r5, r3
   1ca70:	bf38      	it	cc
   1ca72:	461d      	movcc	r5, r3
   1ca74:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1ca78:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1ca7a:	f858 3b28 	ldr.w	r3, [r8], #40
   1ca7e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1ca82:	681b      	ldr	r3, [r3, #0]
   1ca84:	4631      	mov	r1, r6
   1ca86:	fbb5 f5f3 	udiv	r5, r5, r3
   1ca8a:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1ca8e:	35c8      	adds	r5, #200	; 0xc8
   1ca90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ca94:	2300      	movs	r3, #0
   1ca96:	fbe5 010c 	umlal	r0, r1, r5, ip
   1ca9a:	f7ec fa29 	bl	8ef0 <__aeabi_uldivmod>
   1ca9e:	4602      	mov	r2, r0
   1caa0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1caa2:	4640      	mov	r0, r8
   1caa4:	f008 fdc0 	bl	25628 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1caa8:	b1e8      	cbz	r0, 1cae6 <spi_nrfx_transceive+0x2ee>
		LOG_ERR("Timeout waiting for transfer complete");
   1caaa:	4b24      	ldr	r3, [pc, #144]	; (1cb3c <spi_nrfx_transceive+0x344>)
   1caac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cab0:	627b      	str	r3, [r7, #36]	; 0x24
   1cab2:	2302      	movs	r3, #2
   1cab4:	480e      	ldr	r0, [pc, #56]	; (1caf0 <spi_nrfx_transceive+0x2f8>)
   1cab6:	623b      	str	r3, [r7, #32]
   1cab8:	f107 0220 	add.w	r2, r7, #32
   1cabc:	f011 fb61 	bl	2e182 <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1cac0:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1cac4:	e6ce      	b.n	1c864 <spi_nrfx_transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1cac6:	68bb      	ldr	r3, [r7, #8]
   1cac8:	681b      	ldr	r3, [r3, #0]
   1caca:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1cacc:	2b00      	cmp	r3, #0
   1cace:	d0a6      	beq.n	1ca1e <spi_nrfx_transceive+0x226>
   1cad0:	68bb      	ldr	r3, [r7, #8]
   1cad2:	685b      	ldr	r3, [r3, #4]
   1cad4:	e7a4      	b.n	1ca20 <spi_nrfx_transceive+0x228>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1cad6:	f8da 3000 	ldr.w	r3, [sl]
   1cada:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1cadc:	2b00      	cmp	r3, #0
   1cade:	d0ae      	beq.n	1ca3e <spi_nrfx_transceive+0x246>
   1cae0:	f8da 3004 	ldr.w	r3, [sl, #4]
   1cae4:	e7ac      	b.n	1ca40 <spi_nrfx_transceive+0x248>
	status = ctx->sync_status;
   1cae6:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1cae8:	e6bc      	b.n	1c864 <spi_nrfx_transceive+0x6c>
   1caea:	bf00      	nop
   1caec:	00036c7c 	.word	0x00036c7c
   1caf0:	000315ac 	.word	0x000315ac
   1caf4:	00036c96 	.word	0x00036c96
   1caf8:	01000003 	.word	0x01000003
   1cafc:	00036cb8 	.word	0x00036cb8
   1cb00:	00036cd7 	.word	0x00036cd7
   1cb04:	0001e847 	.word	0x0001e847
   1cb08:	00036d06 	.word	0x00036d06
   1cb0c:	00f42400 	.word	0x00f42400
   1cb10:	40005000 	.word	0x40005000
   1cb14:	0003d08f 	.word	0x0003d08f
   1cb18:	0007a11f 	.word	0x0007a11f
   1cb1c:	000f423f 	.word	0x000f423f
   1cb20:	001e847f 	.word	0x001e847f
   1cb24:	003d08ff 	.word	0x003d08ff
   1cb28:	007a1200 	.word	0x007a1200
   1cb2c:	01e84800 	.word	0x01e84800
   1cb30:	0001c735 	.word	0x0001c735
   1cb34:	0bad0000 	.word	0x0bad0000
   1cb38:	00036d37 	.word	0x00036d37
   1cb3c:	00036d5e 	.word	0x00036d5e

0001cb40 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1cb40:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1cb44:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1cb48:	280a      	cmp	r0, #10
   1cb4a:	bf9a      	itte	ls
   1cb4c:	4b02      	ldrls	r3, [pc, #8]	; (1cb58 <qspi_get_zephyr_ret_code+0x18>)
   1cb4e:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1cb52:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1cb56:	4770      	bx	lr
   1cb58:	000325a4 	.word	0x000325a4

0001cb5c <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1cb5c:	4b02      	ldr	r3, [pc, #8]	; (1cb68 <qspi_nor_pages_layout+0xc>)
   1cb5e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1cb60:	2301      	movs	r3, #1
   1cb62:	6013      	str	r3, [r2, #0]
}
   1cb64:	4770      	bx	lr
   1cb66:	bf00      	nop
   1cb68:	000323a8 	.word	0x000323a8

0001cb6c <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1cb6c:	4800      	ldr	r0, [pc, #0]	; (1cb70 <qspi_flash_get_parameters+0x4>)
   1cb6e:	4770      	bx	lr
   1cb70:	0003233c 	.word	0x0003233c

0001cb74 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1cb74:	4b05      	ldr	r3, [pc, #20]	; (1cb8c <qspi_wait_for_completion.isra.0+0x18>)
   1cb76:	4299      	cmp	r1, r3
   1cb78:	d106      	bne.n	1cb88 <qspi_wait_for_completion.isra.0+0x14>
   1cb7a:	f04f 32ff 	mov.w	r2, #4294967295
   1cb7e:	f04f 33ff 	mov.w	r3, #4294967295
   1cb82:	3030      	adds	r0, #48	; 0x30
   1cb84:	f008 bd50 	b.w	25628 <z_impl_k_sem_take>
}
   1cb88:	4770      	bx	lr
   1cb8a:	bf00      	nop
   1cb8c:	0bad0000 	.word	0x0bad0000

0001cb90 <qspi_device_init>:
{
   1cb90:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1cb92:	6905      	ldr	r5, [r0, #16]
{
   1cb94:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1cb96:	4e0f      	ldr	r6, [pc, #60]	; (1cbd4 <qspi_device_init+0x44>)
	qspi_lock(dev);
   1cb98:	4628      	mov	r0, r5
   1cb9a:	f011 fb41 	bl	2e220 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1cb9e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1cba2:	f011 fb35 	bl	2e210 <k_sem_give>
	if (!qspi_initialized) {
   1cba6:	7833      	ldrb	r3, [r6, #0]
   1cba8:	b98b      	cbnz	r3, 1cbce <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1cbaa:	462a      	mov	r2, r5
   1cbac:	490a      	ldr	r1, [pc, #40]	; (1cbd8 <qspi_device_init+0x48>)
   1cbae:	6860      	ldr	r0, [r4, #4]
   1cbb0:	f003 f8dc 	bl	1fd6c <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1cbb4:	f7ff ffc4 	bl	1cb40 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1cbb8:	fab0 f380 	clz	r3, r0
   1cbbc:	4605      	mov	r5, r0
   1cbbe:	095b      	lsrs	r3, r3, #5
   1cbc0:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1cbc2:	6920      	ldr	r0, [r4, #16]
   1cbc4:	3018      	adds	r0, #24
   1cbc6:	f011 fb23 	bl	2e210 <k_sem_give>
}
   1cbca:	4628      	mov	r0, r5
   1cbcc:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1cbce:	2500      	movs	r5, #0
   1cbd0:	e7f7      	b.n	1cbc2 <qspi_device_init+0x32>
   1cbd2:	bf00      	nop
   1cbd4:	20022402 	.word	0x20022402
   1cbd8:	0002e215 	.word	0x0002e215

0001cbdc <qspi_device_uninit>:
{
   1cbdc:	b538      	push	{r3, r4, r5, lr}
   1cbde:	4604      	mov	r4, r0
	qspi_lock(dev);
   1cbe0:	6900      	ldr	r0, [r0, #16]
   1cbe2:	f011 fb1d 	bl	2e220 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1cbe6:	6925      	ldr	r5, [r4, #16]
   1cbe8:	2200      	movs	r2, #0
   1cbea:	2300      	movs	r3, #0
   1cbec:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1cbf0:	f008 fd1a 	bl	25628 <z_impl_k_sem_take>
	if (last) {
   1cbf4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cbf6:	b94b      	cbnz	r3, 1cc0c <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1cbf8:	4d0a      	ldr	r5, [pc, #40]	; (1cc24 <qspi_device_uninit+0x48>)
   1cbfa:	f003 fa0b 	bl	20014 <nrfx_qspi_mem_busy_check>
   1cbfe:	42a8      	cmp	r0, r5
   1cc00:	d10a      	bne.n	1cc18 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1cc02:	f003 fa29 	bl	20058 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1cc06:	2200      	movs	r2, #0
   1cc08:	4b07      	ldr	r3, [pc, #28]	; (1cc28 <qspi_device_uninit+0x4c>)
   1cc0a:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1cc0c:	6920      	ldr	r0, [r4, #16]
}
   1cc0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1cc12:	3018      	adds	r0, #24
   1cc14:	f011 bafc 	b.w	2e210 <k_sem_give>
	return z_impl_k_sleep(timeout);
   1cc18:	2100      	movs	r1, #0
   1cc1a:	f240 6067 	movw	r0, #1639	; 0x667
   1cc1e:	f00a fbb3 	bl	27388 <z_impl_k_sleep>
   1cc22:	e7ea      	b.n	1cbfa <qspi_device_uninit+0x1e>
   1cc24:	0bad0000 	.word	0x0bad0000
   1cc28:	20022402 	.word	0x20022402

0001cc2c <qspi_send_cmd>:
{
   1cc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc2e:	b083      	sub	sp, #12
	if (cmd->tx_buf) {
   1cc30:	684c      	ldr	r4, [r1, #4]
{
   1cc32:	4605      	mov	r5, r0
   1cc34:	af00      	add	r7, sp, #0
	if (cmd->tx_buf) {
   1cc36:	b174      	cbz	r4, 1cc56 <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   1cc38:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1cc3c:	6888      	ldr	r0, [r1, #8]
   1cc3e:	b310      	cbz	r0, 1cc86 <qspi_send_cmd+0x5a>
		rx_len = cmd->rx_buf->len;
   1cc40:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1cc44:	b300      	cbz	r0, 1cc88 <qspi_send_cmd+0x5c>
   1cc46:	b1fb      	cbz	r3, 1cc88 <qspi_send_cmd+0x5c>
		if (rx_len != tx_len) {
   1cc48:	4298      	cmp	r0, r3
   1cc4a:	d006      	beq.n	1cc5a <qspi_send_cmd+0x2e>
		return -EINVAL;
   1cc4c:	f06f 0015 	mvn.w	r0, #21
}
   1cc50:	370c      	adds	r7, #12
   1cc52:	46bd      	mov	sp, r7
   1cc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1cc56:	4623      	mov	r3, r4
   1cc58:	e7f0      	b.n	1cc3c <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   1cc5a:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1cc5c:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1cc5e:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1cc60:	d915      	bls.n	1cc8e <qspi_send_cmd+0x62>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1cc62:	466c      	mov	r4, sp
   1cc64:	b088      	sub	sp, #32
   1cc66:	466a      	mov	r2, sp
   1cc68:	61d3      	str	r3, [r2, #28]
   1cc6a:	2304      	movs	r3, #4
   1cc6c:	4814      	ldr	r0, [pc, #80]	; (1ccc0 <qspi_send_cmd+0x94>)
   1cc6e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1cc72:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc76:	2300      	movs	r3, #0
   1cc78:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1cc7c:	4811      	ldr	r0, [pc, #68]	; (1ccc4 <qspi_send_cmd+0x98>)
   1cc7e:	f7f1 fdf3 	bl	e868 <z_impl_z_log_msg_static_create>
   1cc82:	46a5      	mov	sp, r4
		return -EINVAL;
   1cc84:	e7e2      	b.n	1cc4c <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   1cc86:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1cc88:	3301      	adds	r3, #1
   1cc8a:	4403      	add	r3, r0
   1cc8c:	e7e6      	b.n	1cc5c <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1cc8e:	707b      	strb	r3, [r7, #1]
   1cc90:	f240 1301 	movw	r3, #257	; 0x101
   1cc94:	807b      	strh	r3, [r7, #2]
   1cc96:	2300      	movs	r3, #0
	qspi_lock(dev);
   1cc98:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1cc9a:	713b      	strb	r3, [r7, #4]
   1cc9c:	7039      	strb	r1, [r7, #0]
   1cc9e:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   1cca0:	f011 fabe 	bl	2e220 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1cca4:	4621      	mov	r1, r4
   1cca6:	4632      	mov	r2, r6
   1cca8:	4638      	mov	r0, r7
   1ccaa:	f003 f951 	bl	1ff50 <nrfx_qspi_cinstr_xfer>
   1ccae:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1ccb0:	6928      	ldr	r0, [r5, #16]
   1ccb2:	3018      	adds	r0, #24
   1ccb4:	f011 faac 	bl	2e210 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1ccb8:	4620      	mov	r0, r4
   1ccba:	f7ff ff41 	bl	1cb40 <qspi_get_zephyr_ret_code>
   1ccbe:	e7c7      	b.n	1cc50 <qspi_send_cmd+0x24>
   1ccc0:	00036d9b 	.word	0x00036d9b
   1ccc4:	00031594 	.word	0x00031594

0001ccc8 <qspi_nor_init>:
{
   1ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1cccc:	2202      	movs	r2, #2
   1ccce:	b086      	sub	sp, #24
   1ccd0:	4b6a      	ldr	r3, [pc, #424]	; (1ce7c <qspi_nor_init+0x1b4>)
   1ccd2:	af00      	add	r7, sp, #0
   1ccd4:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1ccd8:	6843      	ldr	r3, [r0, #4]
{
   1ccda:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1ccdc:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1ccde:	2100      	movs	r1, #0
   1cce0:	4630      	mov	r0, r6
   1cce2:	f107 020c 	add.w	r2, r7, #12
   1cce6:	f011 fd90 	bl	2e80a <pinctrl_lookup_state>
	if (ret < 0) {
   1ccea:	1e04      	subs	r4, r0, #0
   1ccec:	db3a      	blt.n	1cd64 <qspi_nor_init+0x9c>
	return pinctrl_apply_state_direct(config, state);
   1ccee:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1ccf0:	6832      	ldr	r2, [r6, #0]
   1ccf2:	7919      	ldrb	r1, [r3, #4]
   1ccf4:	6818      	ldr	r0, [r3, #0]
   1ccf6:	f011 fd9b 	bl	2e830 <pinctrl_configure_pins>
	if (ret < 0) {
   1ccfa:	1e04      	subs	r4, r0, #0
   1ccfc:	db32      	blt.n	1cd64 <qspi_nor_init+0x9c>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1ccfe:	2200      	movs	r2, #0
   1cd00:	2101      	movs	r1, #1
   1cd02:	202b      	movs	r0, #43	; 0x2b
   1cd04:	f7f3 fea6 	bl	10a54 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1cd08:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1cd0a:	692a      	ldr	r2, [r5, #16]
   1cd0c:	4630      	mov	r0, r6
   1cd0e:	495c      	ldr	r1, [pc, #368]	; (1ce80 <qspi_nor_init+0x1b8>)
   1cd10:	f003 f82c 	bl	1fd6c <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1cd14:	f7ff ff14 	bl	1cb40 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1cd18:	1e04      	subs	r4, r0, #0
   1cd1a:	db23      	blt.n	1cd64 <qspi_nor_init+0x9c>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1cd1c:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1cd1e:	3b02      	subs	r3, #2
   1cd20:	2b01      	cmp	r3, #1
   1cd22:	d924      	bls.n	1cd6e <qspi_nor_init+0xa6>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1cd24:	f896 800a 	ldrb.w	r8, [r6, #10]
   1cd28:	f1a8 0803 	sub.w	r8, r8, #3
   1cd2c:	f1b8 0f01 	cmp.w	r8, #1
   1cd30:	bf8c      	ite	hi
   1cd32:	f04f 0800 	movhi.w	r8, #0
   1cd36:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1cd3a:	4628      	mov	r0, r5
   1cd3c:	f011 fa92 	bl	2e264 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1cd40:	1e04      	subs	r4, r0, #0
   1cd42:	da17      	bge.n	1cd74 <qspi_nor_init+0xac>
			LOG_ERR("RDSR failed: %d", ret);
   1cd44:	466d      	mov	r5, sp
   1cd46:	b088      	sub	sp, #32
   1cd48:	466a      	mov	r2, sp
   1cd4a:	4b4e      	ldr	r3, [pc, #312]	; (1ce84 <qspi_nor_init+0x1bc>)
   1cd4c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1cd50:	2303      	movs	r3, #3
   1cd52:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd56:	2300      	movs	r3, #0
   1cd58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cd5c:	484a      	ldr	r0, [pc, #296]	; (1ce88 <qspi_nor_init+0x1c0>)
   1cd5e:	f7f1 fd83 	bl	e868 <z_impl_z_log_msg_static_create>
   1cd62:	46ad      	mov	sp, r5
}
   1cd64:	4620      	mov	r0, r4
   1cd66:	3718      	adds	r7, #24
   1cd68:	46bd      	mov	sp, r7
   1cd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1cd6e:	f04f 0801 	mov.w	r8, #1
   1cd72:	e7e2      	b.n	1cd3a <qspi_nor_init+0x72>
		uint8_t sr = (uint8_t)ret;
   1cd74:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1cd76:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1cd7a:	45a0      	cmp	r8, r4
   1cd7c:	f107 0604 	add.w	r6, r7, #4
   1cd80:	d031      	beq.n	1cde6 <qspi_nor_init+0x11e>
	uint8_t sr_array[2] = {0};
   1cd82:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1cd84:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1cd88:	803b      	strh	r3, [r7, #0]
		sr_array[0] = sr_val;
   1cd8a:	703a      	strb	r2, [r7, #0]
	const struct qspi_buf sr_buf = {
   1cd8c:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1cd8e:	4628      	mov	r0, r5
	struct qspi_cmd cmd = {
   1cd90:	e9c7 2302 	strd	r2, r3, [r7, #8]
	const struct qspi_buf sr_buf = {
   1cd94:	607f      	str	r7, [r7, #4]
	struct qspi_cmd cmd = {
   1cd96:	617b      	str	r3, [r7, #20]
   1cd98:	733a      	strb	r2, [r7, #12]
   1cd9a:	613e      	str	r6, [r7, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1cd9c:	f107 010c 	add.w	r1, r7, #12
   1cda0:	f7ff ff44 	bl	1cc2c <qspi_send_cmd>
	if (ret == 0) {
   1cda4:	1e04      	subs	r4, r0, #0
   1cda6:	d017      	beq.n	1cdd8 <qspi_nor_init+0x110>
		if (ret < 0) {
   1cda8:	dadc      	bge.n	1cd64 <qspi_nor_init+0x9c>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1cdaa:	4a38      	ldr	r2, [pc, #224]	; (1ce8c <qspi_nor_init+0x1c4>)
   1cdac:	4b38      	ldr	r3, [pc, #224]	; (1ce90 <qspi_nor_init+0x1c8>)
   1cdae:	466d      	mov	r5, sp
   1cdb0:	b08a      	sub	sp, #40	; 0x28
   1cdb2:	f1b8 0f00 	cmp.w	r8, #0
   1cdb6:	bf18      	it	ne
   1cdb8:	4613      	movne	r3, r2
   1cdba:	466a      	mov	r2, sp
   1cdbc:	4935      	ldr	r1, [pc, #212]	; (1ce94 <qspi_nor_init+0x1cc>)
   1cdbe:	61d4      	str	r4, [r2, #28]
   1cdc0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1cdc4:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cdc8:	8413      	strh	r3, [r2, #32]
   1cdca:	4b33      	ldr	r3, [pc, #204]	; (1ce98 <qspi_nor_init+0x1d0>)
   1cdcc:	f842 3f10 	str.w	r3, [r2, #16]!
   1cdd0:	2300      	movs	r3, #0
   1cdd2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1cdd6:	e7c1      	b.n	1cd5c <qspi_nor_init+0x94>
		ret = qspi_rdsr(dev, 1);
   1cdd8:	4628      	mov	r0, r5
   1cdda:	f011 fa43 	bl	2e264 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1cdde:	1e04      	subs	r4, r0, #0
   1cde0:	dbe3      	blt.n	1cdaa <qspi_nor_init+0xe2>
   1cde2:	07e3      	lsls	r3, r4, #31
   1cde4:	d4f8      	bmi.n	1cdd8 <qspi_nor_init+0x110>
	qspi_device_uninit(dev);
   1cde6:	4628      	mov	r0, r5
   1cde8:	f7ff fef8 	bl	1cbdc <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1cdec:	2403      	movs	r4, #3
   1cdee:	2300      	movs	r3, #0
   1cdf0:	e9c7 4302 	strd	r4, r3, [r7, #8]
   1cdf4:	613b      	str	r3, [r7, #16]
   1cdf6:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1cdf8:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1cdfa:	607f      	str	r7, [r7, #4]
	const struct qspi_cmd cmd = {
   1cdfc:	733b      	strb	r3, [r7, #12]
   1cdfe:	617e      	str	r6, [r7, #20]
	int ret = qspi_device_init(dev);
   1ce00:	f7ff fec6 	bl	1cb90 <qspi_device_init>
	if (ret == 0) {
   1ce04:	4602      	mov	r2, r0
   1ce06:	b128      	cbz	r0, 1ce14 <qspi_nor_init+0x14c>
	qspi_device_uninit(dev);
   1ce08:	4628      	mov	r0, r5
   1ce0a:	f7ff fee7 	bl	1cbdc <qspi_device_uninit>
		return -ENODEV;
   1ce0e:	f06f 0412 	mvn.w	r4, #18
   1ce12:	e7a7      	b.n	1cd64 <qspi_nor_init+0x9c>
		ret = qspi_send_cmd(dev, &cmd, false);
   1ce14:	4628      	mov	r0, r5
   1ce16:	f107 010c 	add.w	r1, r7, #12
   1ce1a:	f7ff ff07 	bl	1cc2c <qspi_send_cmd>
   1ce1e:	4606      	mov	r6, r0
	qspi_device_uninit(dev);
   1ce20:	4628      	mov	r0, r5
   1ce22:	f7ff fedb 	bl	1cbdc <qspi_device_uninit>
	if (ret != 0) {
   1ce26:	2e00      	cmp	r6, #0
   1ce28:	d1f1      	bne.n	1ce0e <qspi_nor_init+0x146>
	const struct qspi_nor_config *qnc = dev->config;
   1ce2a:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1ce2c:	4622      	mov	r2, r4
   1ce2e:	4639      	mov	r1, r7
   1ce30:	f105 001c 	add.w	r0, r5, #28
   1ce34:	f013 fb77 	bl	30526 <memcmp>
   1ce38:	4604      	mov	r4, r0
   1ce3a:	2800      	cmp	r0, #0
   1ce3c:	d092      	beq.n	1cd64 <qspi_nor_init+0x9c>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1ce3e:	466c      	mov	r4, sp
   1ce40:	b08c      	sub	sp, #48	; 0x30
   1ce42:	466a      	mov	r2, sp
   1ce44:	f897 8000 	ldrb.w	r8, [r7]
   1ce48:	f897 e001 	ldrb.w	lr, [r7, #1]
   1ce4c:	f897 c002 	ldrb.w	ip, [r7, #2]
   1ce50:	7f28      	ldrb	r0, [r5, #28]
   1ce52:	7f69      	ldrb	r1, [r5, #29]
   1ce54:	7fab      	ldrb	r3, [r5, #30]
   1ce56:	62d3      	str	r3, [r2, #44]	; 0x2c
   1ce58:	2308      	movs	r3, #8
   1ce5a:	4d10      	ldr	r5, [pc, #64]	; (1ce9c <qspi_nor_init+0x1d4>)
   1ce5c:	e9c2 ec07 	strd	lr, ip, [r2, #28]
   1ce60:	e9c2 5805 	strd	r5, r8, [r2, #20]
   1ce64:	e9c2 0109 	strd	r0, r1, [r2, #36]	; 0x24
   1ce68:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce6c:	f244 0140 	movw	r1, #16448	; 0x4040
   1ce70:	4633      	mov	r3, r6
   1ce72:	4805      	ldr	r0, [pc, #20]	; (1ce88 <qspi_nor_init+0x1c0>)
   1ce74:	f7f1 fcf8 	bl	e868 <z_impl_z_log_msg_static_create>
   1ce78:	46a5      	mov	sp, r4
		return -ENODEV;
   1ce7a:	e7c8      	b.n	1ce0e <qspi_nor_init+0x146>
   1ce7c:	40005000 	.word	0x40005000
   1ce80:	0002e215 	.word	0x0002e215
   1ce84:	00036dc4 	.word	0x00036dc4
   1ce88:	00031594 	.word	0x00031594
   1ce8c:	000354d9 	.word	0x000354d9
   1ce90:	00036dbe 	.word	0x00036dbe
   1ce94:	00036dd4 	.word	0x00036dd4
   1ce98:	01000004 	.word	0x01000004
   1ce9c:	00036de5 	.word	0x00036de5

0001cea0 <qspi_nor_erase.part.0>:
static int qspi_nor_erase(const struct device *dev, off_t addr, size_t size)
   1cea0:	b580      	push	{r7, lr}
   1cea2:	af00      	add	r7, sp, #0
		LOG_ERR("erase error: address or size "
   1cea4:	b088      	sub	sp, #32
   1cea6:	466a      	mov	r2, sp
   1cea8:	4b08      	ldr	r3, [pc, #32]	; (1cecc <qspi_nor_erase.part.0+0x2c>)
   1ceaa:	61d1      	str	r1, [r2, #28]
   1ceac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ceb0:	2304      	movs	r3, #4
   1ceb2:	f842 3f10 	str.w	r3, [r2, #16]!
   1ceb6:	2300      	movs	r3, #0
   1ceb8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cebc:	4804      	ldr	r0, [pc, #16]	; (1ced0 <qspi_nor_erase.part.0+0x30>)
   1cebe:	f7f1 fcd3 	bl	e868 <z_impl_z_log_msg_static_create>
}
   1cec2:	f06f 0015 	mvn.w	r0, #21
   1cec6:	46bd      	mov	sp, r7
   1cec8:	bd80      	pop	{r7, pc}
   1ceca:	bf00      	nop
   1cecc:	00036e17 	.word	0x00036e17
   1ced0:	00031594 	.word	0x00031594

0001ced4 <qspi_nor_erase>:
{
   1ced4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1ced8:	1e0b      	subs	r3, r1, #0
{
   1ceda:	4606      	mov	r6, r0
   1cedc:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1cede:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1cee2:	af00      	add	r7, sp, #0
	if (addr < 0 ||
   1cee4:	db05      	blt.n	1cef2 <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   1cee6:	1899      	adds	r1, r3, r2
	if (addr < 0 ||
   1cee8:	f8da 2018 	ldr.w	r2, [sl, #24]
	    (addr + size) > params->size) {
   1ceec:	4699      	mov	r9, r3
	if (addr < 0 ||
   1ceee:	4291      	cmp	r1, r2
   1cef0:	d908      	bls.n	1cf04 <qspi_nor_erase+0x30>
   1cef2:	4629      	mov	r1, r5
   1cef4:	4618      	mov	r0, r3
   1cef6:	f7ff ffd3 	bl	1cea0 <qspi_nor_erase.part.0>
   1cefa:	4604      	mov	r4, r0
}
   1cefc:	4620      	mov	r0, r4
   1cefe:	46bd      	mov	sp, r7
   1cf00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1cf04:	f3c3 020b 	ubfx	r2, r3, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1cf08:	2d00      	cmp	r5, #0
   1cf0a:	f000 8081 	beq.w	1d010 <qspi_nor_erase+0x13c>
   1cf0e:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1cf12:	4313      	orrs	r3, r2
   1cf14:	d17c      	bne.n	1d010 <qspi_nor_erase+0x13c>
	rv = qspi_device_init(dev);
   1cf16:	f7ff fe3b 	bl	1cb90 <qspi_device_init>
	if (rv != 0) {
   1cf1a:	4604      	mov	r4, r0
   1cf1c:	bb60      	cbnz	r0, 1cf78 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   1cf1e:	6930      	ldr	r0, [r6, #16]
   1cf20:	f011 f985 	bl	2e22e <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1cf24:	4621      	mov	r1, r4
   1cf26:	4630      	mov	r0, r6
   1cf28:	f011 f987 	bl	2e23a <qspi_nor_write_protection_set>
	if (rv != 0) {
   1cf2c:	4604      	mov	r4, r0
   1cf2e:	bb00      	cbnz	r0, 1cf72 <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   1cf30:	6930      	ldr	r0, [r6, #16]
   1cf32:	f011 f975 	bl	2e220 <qspi_lock.isra.0>
		if (size == params->size) {
   1cf36:	f8da 3018 	ldr.w	r3, [sl, #24]
   1cf3a:	42ab      	cmp	r3, r5
   1cf3c:	d120      	bne.n	1cf80 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   1cf3e:	f011 fe2d 	bl	2eb9c <nrfx_qspi_chip_erase>
   1cf42:	46ab      	mov	fp, r5
   1cf44:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1cf46:	4641      	mov	r1, r8
   1cf48:	6930      	ldr	r0, [r6, #16]
   1cf4a:	f7ff fe13 	bl	1cb74 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1cf4e:	4b32      	ldr	r3, [pc, #200]	; (1d018 <qspi_nor_erase+0x144>)
   1cf50:	4598      	cmp	r8, r3
   1cf52:	d147      	bne.n	1cfe4 <qspi_nor_erase+0x110>
	while (size > 0) {
   1cf54:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   1cf58:	44d9      	add	r9, fp
	while (size > 0) {
   1cf5a:	d1ec      	bne.n	1cf36 <qspi_nor_erase+0x62>
	k_sem_give(&dev_data->sem);
   1cf5c:	6930      	ldr	r0, [r6, #16]
   1cf5e:	3018      	adds	r0, #24
   1cf60:	f011 f956 	bl	2e210 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1cf64:	2101      	movs	r1, #1
   1cf66:	4630      	mov	r0, r6
   1cf68:	f011 f967 	bl	2e23a <qspi_nor_write_protection_set>
   1cf6c:	2c00      	cmp	r4, #0
   1cf6e:	bf08      	it	eq
   1cf70:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1cf72:	6930      	ldr	r0, [r6, #16]
   1cf74:	f011 f94c 	bl	2e210 <k_sem_give>
	qspi_device_uninit(dev);
   1cf78:	4630      	mov	r0, r6
   1cf7a:	f7ff fe2f 	bl	1cbdc <qspi_device_uninit>
	return rv;
   1cf7e:	e7bd      	b.n	1cefc <qspi_nor_erase+0x28>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1cf80:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1cf84:	d30a      	bcc.n	1cf9c <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1cf86:	fa1f f389 	uxth.w	r3, r9
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1cf8a:	b953      	cbnz	r3, 1cfa2 <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1cf8c:	4649      	mov	r1, r9
   1cf8e:	2001      	movs	r0, #1
   1cf90:	f003 f8c4 	bl	2011c <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1cf94:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1cf98:	4680      	mov	r8, r0
			adj = QSPI_BLOCK_SIZE;
   1cf9a:	e7d4      	b.n	1cf46 <qspi_nor_erase+0x72>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1cf9c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1cfa0:	d309      	bcc.n	1cfb6 <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1cfa2:	f3c9 000b 	ubfx	r0, r9, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1cfa6:	b930      	cbnz	r0, 1cfb6 <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1cfa8:	4649      	mov	r1, r9
   1cfaa:	f003 f8b7 	bl	2011c <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1cfae:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1cfb2:	4680      	mov	r8, r0
			adj = QSPI_SECTOR_SIZE;
   1cfb4:	e7c7      	b.n	1cf46 <qspi_nor_erase+0x72>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1cfb6:	466c      	mov	r4, sp
   1cfb8:	b088      	sub	sp, #32
   1cfba:	466a      	mov	r2, sp
   1cfbc:	4b17      	ldr	r3, [pc, #92]	; (1d01c <qspi_nor_erase+0x148>)
   1cfbe:	61d5      	str	r5, [r2, #28]
   1cfc0:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1cfc4:	2304      	movs	r3, #4
   1cfc6:	f842 3f10 	str.w	r3, [r2, #16]!
   1cfca:	2300      	movs	r3, #0
   1cfcc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cfd0:	4813      	ldr	r0, [pc, #76]	; (1d020 <qspi_nor_erase+0x14c>)
   1cfd2:	f7f1 fc49 	bl	e868 <z_impl_z_log_msg_static_create>
		qspi_wait_for_completion(dev, res);
   1cfd6:	4913      	ldr	r1, [pc, #76]	; (1d024 <qspi_nor_erase+0x150>)
   1cfd8:	46a5      	mov	sp, r4
   1cfda:	6930      	ldr	r0, [r6, #16]
   1cfdc:	f7ff fdca 	bl	1cb74 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1cfe0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1d024 <qspi_nor_erase+0x150>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1cfe4:	466c      	mov	r4, sp
   1cfe6:	b088      	sub	sp, #32
   1cfe8:	466a      	mov	r2, sp
   1cfea:	4b0f      	ldr	r3, [pc, #60]	; (1d028 <qspi_nor_erase+0x154>)
   1cfec:	61d5      	str	r5, [r2, #28]
   1cfee:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1cff2:	2304      	movs	r3, #4
   1cff4:	f842 3f10 	str.w	r3, [r2, #16]!
   1cff8:	2300      	movs	r3, #0
   1cffa:	4809      	ldr	r0, [pc, #36]	; (1d020 <qspi_nor_erase+0x14c>)
   1cffc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d000:	f7f1 fc32 	bl	e868 <z_impl_z_log_msg_static_create>
			rv = qspi_get_zephyr_ret_code(res);
   1d004:	4640      	mov	r0, r8
   1d006:	46a5      	mov	sp, r4
   1d008:	f7ff fd9a 	bl	1cb40 <qspi_get_zephyr_ret_code>
   1d00c:	4604      	mov	r4, r0
			break;
   1d00e:	e7a5      	b.n	1cf5c <qspi_nor_erase+0x88>
		return -EINVAL;
   1d010:	f06f 0415 	mvn.w	r4, #21
   1d014:	e772      	b.n	1cefc <qspi_nor_erase+0x28>
   1d016:	bf00      	nop
   1d018:	0bad0000 	.word	0x0bad0000
   1d01c:	00036e61 	.word	0x00036e61
   1d020:	00031594 	.word	0x00031594
   1d024:	0bad0004 	.word	0x0bad0004
   1d028:	00036e7f 	.word	0x00036e7f

0001d02c <qspi_nor_write>:
{
   1d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d030:	b083      	sub	sp, #12
   1d032:	4605      	mov	r5, r0
   1d034:	4688      	mov	r8, r1
   1d036:	461e      	mov	r6, r3
	if (!src) {
   1d038:	4691      	mov	r9, r2
{
   1d03a:	af00      	add	r7, sp, #0
	if (!src) {
   1d03c:	b30a      	cbz	r2, 1d082 <qspi_nor_write+0x56>
	if ((size == 0)
   1d03e:	b303      	cbz	r3, 1d082 <qspi_nor_write+0x56>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1d040:	2b04      	cmp	r3, #4
   1d042:	d901      	bls.n	1d048 <qspi_nor_write+0x1c>
   1d044:	07b3      	lsls	r3, r6, #30
   1d046:	d11c      	bne.n	1d082 <qspi_nor_write+0x56>
	if ((addr % 4U) != 0) {
   1d048:	f018 0f03 	tst.w	r8, #3
   1d04c:	d119      	bne.n	1d082 <qspi_nor_write+0x56>
	if (addr < 0 ||
   1d04e:	f1b8 0f00 	cmp.w	r8, #0
	const struct qspi_nor_config *params = dev->config;
   1d052:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1d054:	db04      	blt.n	1d060 <qspi_nor_write+0x34>
   1d056:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1d058:	eb08 0306 	add.w	r3, r8, r6
	if (addr < 0 ||
   1d05c:	4293      	cmp	r3, r2
   1d05e:	d917      	bls.n	1d090 <qspi_nor_write+0x64>
		LOG_ERR("write error: address or size "
   1d060:	466c      	mov	r4, sp
   1d062:	b088      	sub	sp, #32
   1d064:	466a      	mov	r2, sp
   1d066:	4b42      	ldr	r3, [pc, #264]	; (1d170 <qspi_nor_write+0x144>)
   1d068:	61d6      	str	r6, [r2, #28]
   1d06a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1d06e:	2304      	movs	r3, #4
   1d070:	f842 3f10 	str.w	r3, [r2, #16]!
   1d074:	2300      	movs	r3, #0
   1d076:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d07a:	483e      	ldr	r0, [pc, #248]	; (1d174 <qspi_nor_write+0x148>)
   1d07c:	f7f1 fbf4 	bl	e868 <z_impl_z_log_msg_static_create>
   1d080:	46a5      	mov	sp, r4
		return -EINVAL;
   1d082:	f06f 0415 	mvn.w	r4, #21
}
   1d086:	4620      	mov	r0, r4
   1d088:	370c      	adds	r7, #12
   1d08a:	46bd      	mov	sp, r7
   1d08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1d090:	4628      	mov	r0, r5
   1d092:	f7ff fd7d 	bl	1cb90 <qspi_device_init>
	if (rc != 0) {
   1d096:	4604      	mov	r4, r0
   1d098:	2800      	cmp	r0, #0
   1d09a:	d160      	bne.n	1d15e <qspi_nor_write+0x132>
	qspi_trans_lock(dev);
   1d09c:	6928      	ldr	r0, [r5, #16]
   1d09e:	f011 f8c6 	bl	2e22e <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1d0a2:	4621      	mov	r1, r4
   1d0a4:	4628      	mov	r0, r5
   1d0a6:	f011 f8c8 	bl	2e23a <qspi_nor_write_protection_set>
   1d0aa:	4604      	mov	r4, r0
	qspi_lock(dev);
   1d0ac:	6928      	ldr	r0, [r5, #16]
   1d0ae:	f011 f8b7 	bl	2e220 <qspi_lock.isra.0>
	if (!res) {
   1d0b2:	2c00      	cmp	r4, #0
   1d0b4:	d140      	bne.n	1d138 <qspi_nor_write+0x10c>
		if (size < 4U) {
   1d0b6:	2e03      	cmp	r6, #3
   1d0b8:	d81c      	bhi.n	1d0f4 <qspi_nor_write+0xc8>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1d0ba:	2104      	movs	r1, #4
   1d0bc:	4642      	mov	r2, r8
   1d0be:	1878      	adds	r0, r7, r1
   1d0c0:	f011 fd69 	bl	2eb96 <nrfx_qspi_read>
   1d0c4:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1d0c6:	4601      	mov	r1, r0
   1d0c8:	6928      	ldr	r0, [r5, #16]
   1d0ca:	f7ff fd53 	bl	1cb74 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1d0ce:	4b2a      	ldr	r3, [pc, #168]	; (1d178 <qspi_nor_write+0x14c>)
   1d0d0:	429c      	cmp	r4, r3
   1d0d2:	d131      	bne.n	1d138 <qspi_nor_write+0x10c>
		memcpy(buf, sptr, slen);
   1d0d4:	4632      	mov	r2, r6
   1d0d6:	4649      	mov	r1, r9
   1d0d8:	1d38      	adds	r0, r7, #4
   1d0da:	f013 fa34 	bl	30546 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1d0de:	2104      	movs	r1, #4
   1d0e0:	4642      	mov	r2, r8
   1d0e2:	1878      	adds	r0, r7, r1
			res = nrfx_qspi_write(src, size, addr);
   1d0e4:	f011 fd54 	bl	2eb90 <nrfx_qspi_write>
   1d0e8:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1d0ea:	4601      	mov	r1, r0
   1d0ec:	6928      	ldr	r0, [r5, #16]
   1d0ee:	f7ff fd41 	bl	1cb74 <qspi_wait_for_completion.isra.0>
   1d0f2:	e021      	b.n	1d138 <qspi_nor_write+0x10c>
   1d0f4:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1d0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d0fc:	d033      	beq.n	1d166 <qspi_nor_write+0x13a>
			if (res == NRFX_SUCCESS) {
   1d0fe:	f8df b078 	ldr.w	fp, [pc, #120]	; 1d178 <qspi_nor_write+0x14c>
			size_t len = MIN(slen, sizeof(buf));
   1d102:	2e04      	cmp	r6, #4
   1d104:	46b2      	mov	sl, r6
   1d106:	bf28      	it	cs
   1d108:	f04f 0a04 	movcs.w	sl, #4
			memcpy(buf, sp, len);
   1d10c:	4649      	mov	r1, r9
   1d10e:	4652      	mov	r2, sl
   1d110:	1d38      	adds	r0, r7, #4
   1d112:	f013 fa18 	bl	30546 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1d116:	2104      	movs	r1, #4
   1d118:	4642      	mov	r2, r8
   1d11a:	1878      	adds	r0, r7, r1
   1d11c:	f011 fd38 	bl	2eb90 <nrfx_qspi_write>
   1d120:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1d122:	4601      	mov	r1, r0
   1d124:	6928      	ldr	r0, [r5, #16]
   1d126:	f7ff fd25 	bl	1cb74 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1d12a:	455c      	cmp	r4, fp
   1d12c:	d104      	bne.n	1d138 <qspi_nor_write+0x10c>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1d12e:	ebb6 060a 	subs.w	r6, r6, sl
				sp += len;
   1d132:	44d1      	add	r9, sl
				addr += len;
   1d134:	44d0      	add	r8, sl
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1d136:	d1e4      	bne.n	1d102 <qspi_nor_write+0xd6>
	k_sem_give(&dev_data->sem);
   1d138:	6928      	ldr	r0, [r5, #16]
   1d13a:	3018      	adds	r0, #24
   1d13c:	f011 f868 	bl	2e210 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1d140:	2101      	movs	r1, #1
   1d142:	4628      	mov	r0, r5
   1d144:	f011 f879 	bl	2e23a <qspi_nor_write_protection_set>
   1d148:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1d14a:	6928      	ldr	r0, [r5, #16]
   1d14c:	f011 f860 	bl	2e210 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1d150:	2c00      	cmp	r4, #0
   1d152:	bf14      	ite	ne
   1d154:	4620      	movne	r0, r4
   1d156:	4630      	moveq	r0, r6
   1d158:	f7ff fcf2 	bl	1cb40 <qspi_get_zephyr_ret_code>
   1d15c:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1d15e:	4628      	mov	r0, r5
   1d160:	f7ff fd3c 	bl	1cbdc <qspi_device_uninit>
	return rc;
   1d164:	e78f      	b.n	1d086 <qspi_nor_write+0x5a>
			res = nrfx_qspi_write(src, size, addr);
   1d166:	4642      	mov	r2, r8
   1d168:	4631      	mov	r1, r6
   1d16a:	4648      	mov	r0, r9
   1d16c:	e7ba      	b.n	1d0e4 <qspi_nor_write+0xb8>
   1d16e:	bf00      	nop
   1d170:	00036e9d 	.word	0x00036e9d
   1d174:	00031594 	.word	0x00031594
   1d178:	0bad0000 	.word	0x0bad0000

0001d17c <qspi_nor_read>:
{
   1d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d180:	b085      	sub	sp, #20
   1d182:	4681      	mov	r9, r0
   1d184:	460e      	mov	r6, r1
   1d186:	461c      	mov	r4, r3
	if (!dest) {
   1d188:	4690      	mov	r8, r2
{
   1d18a:	af00      	add	r7, sp, #0
	if (!dest) {
   1d18c:	b1d2      	cbz	r2, 1d1c4 <qspi_nor_read+0x48>
	if (!size) {
   1d18e:	2b00      	cmp	r3, #0
   1d190:	f000 80ac 	beq.w	1d2ec <qspi_nor_read+0x170>
	if (addr < 0 ||
   1d194:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1d196:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1d198:	db03      	blt.n	1d1a2 <qspi_nor_read+0x26>
   1d19a:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1d19c:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1d19e:	4293      	cmp	r3, r2
   1d1a0:	d917      	bls.n	1d1d2 <qspi_nor_read+0x56>
		LOG_ERR("read error: address or size "
   1d1a2:	466d      	mov	r5, sp
   1d1a4:	b088      	sub	sp, #32
   1d1a6:	466a      	mov	r2, sp
   1d1a8:	4b51      	ldr	r3, [pc, #324]	; (1d2f0 <qspi_nor_read+0x174>)
   1d1aa:	61d4      	str	r4, [r2, #28]
   1d1ac:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d1b0:	2304      	movs	r3, #4
   1d1b2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d1b6:	2300      	movs	r3, #0
   1d1b8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d1bc:	484d      	ldr	r0, [pc, #308]	; (1d2f4 <qspi_nor_read+0x178>)
   1d1be:	f7f1 fb53 	bl	e868 <z_impl_z_log_msg_static_create>
   1d1c2:	46ad      	mov	sp, r5
		return -EINVAL;
   1d1c4:	f06f 0515 	mvn.w	r5, #21
}
   1d1c8:	4628      	mov	r0, r5
   1d1ca:	3714      	adds	r7, #20
   1d1cc:	46bd      	mov	sp, r7
   1d1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1d1d2:	f7ff fcdd 	bl	1cb90 <qspi_device_init>
	if (rc != 0) {
   1d1d6:	4605      	mov	r5, r0
   1d1d8:	2800      	cmp	r0, #0
   1d1da:	f040 8081 	bne.w	1d2e0 <qspi_nor_read+0x164>
	qspi_lock(dev);
   1d1de:	4275      	negs	r5, r6
   1d1e0:	f005 0503 	and.w	r5, r5, #3
   1d1e4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d1e8:	f011 f81a 	bl	2e220 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1d1ec:	42a5      	cmp	r5, r4
   1d1ee:	bf28      	it	cs
   1d1f0:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1d1f2:	f1d8 0200 	rsbs	r2, r8, #0
   1d1f6:	f002 0203 	and.w	r2, r2, #3
   1d1fa:	f008 0303 	and.w	r3, r8, #3
   1d1fe:	bf58      	it	pl
   1d200:	4253      	negpl	r3, r2
   1d202:	425b      	negs	r3, r3
   1d204:	f003 0303 	and.w	r3, r3, #3
   1d208:	42a3      	cmp	r3, r4
   1d20a:	bf28      	it	cs
   1d20c:	4623      	movcs	r3, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1d20e:	1b62      	subs	r2, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1d210:	1ae4      	subs	r4, r4, r3
   1d212:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1d216:	f022 0a03 	bic.w	sl, r2, #3
	if (flash_middle > dest_middle) {
   1d21a:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1d21c:	bfc8      	it	gt
   1d21e:	46a2      	movgt	sl, r4
   1d220:	f002 0b03 	and.w	fp, r2, #3
   1d224:	bfc8      	it	gt
   1d226:	eba2 0b04 	subgt.w	fp, r2, r4
	if (flash_middle != 0) {
   1d22a:	f1ba 0f00 	cmp.w	sl, #0
   1d22e:	d01a      	beq.n	1d266 <qspi_nor_read+0xea>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1d230:	eb08 0203 	add.w	r2, r8, r3
   1d234:	e9c7 3200 	strd	r3, r2, [r7]
   1d238:	4651      	mov	r1, sl
   1d23a:	1972      	adds	r2, r6, r5
   1d23c:	6878      	ldr	r0, [r7, #4]
   1d23e:	f011 fcaa 	bl	2eb96 <nrfx_qspi_read>
   1d242:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d244:	4601      	mov	r1, r0
   1d246:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d24a:	f7ff fc93 	bl	1cb74 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d24e:	4a2a      	ldr	r2, [pc, #168]	; (1d2f8 <qspi_nor_read+0x17c>)
   1d250:	4294      	cmp	r4, r2
   1d252:	d13c      	bne.n	1d2ce <qspi_nor_read+0x152>
		if (flash_prefix != dest_prefix) {
   1d254:	683b      	ldr	r3, [r7, #0]
   1d256:	429d      	cmp	r5, r3
   1d258:	d005      	beq.n	1d266 <qspi_nor_read+0xea>
__ssp_bos_icheck3(memmove, void *, const void *)
   1d25a:	4652      	mov	r2, sl
   1d25c:	6879      	ldr	r1, [r7, #4]
   1d25e:	eb08 0005 	add.w	r0, r8, r5
   1d262:	f013 f990 	bl	30586 <memmove>
	if (flash_prefix != 0) {
   1d266:	b1c5      	cbz	r5, 1d29a <qspi_nor_read+0x11e>
				     (WORD_SIZE - flash_prefix));
   1d268:	f1c5 0304 	rsb	r3, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1d26c:	1af2      	subs	r2, r6, r3
   1d26e:	2104      	movs	r1, #4
   1d270:	f107 0008 	add.w	r0, r7, #8
   1d274:	607b      	str	r3, [r7, #4]
   1d276:	f011 fc8e 	bl	2eb96 <nrfx_qspi_read>
   1d27a:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d27c:	4601      	mov	r1, r0
   1d27e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d282:	f7ff fc77 	bl	1cb74 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d286:	4a1c      	ldr	r2, [pc, #112]	; (1d2f8 <qspi_nor_read+0x17c>)
   1d288:	4294      	cmp	r4, r2
   1d28a:	d120      	bne.n	1d2ce <qspi_nor_read+0x152>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d28c:	687b      	ldr	r3, [r7, #4]
   1d28e:	462a      	mov	r2, r5
   1d290:	3308      	adds	r3, #8
   1d292:	4640      	mov	r0, r8
   1d294:	19d9      	adds	r1, r3, r7
   1d296:	f013 f956 	bl	30546 <memcpy>
	if (flash_suffix != 0) {
   1d29a:	f1bb 0f00 	cmp.w	fp, #0
   1d29e:	d023      	beq.n	1d2e8 <qspi_nor_read+0x16c>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1d2a0:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1d2a2:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1d2a4:	4452      	add	r2, sl
   1d2a6:	1878      	adds	r0, r7, r1
   1d2a8:	f011 fc75 	bl	2eb96 <nrfx_qspi_read>
   1d2ac:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d2ae:	4601      	mov	r1, r0
   1d2b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d2b4:	f7ff fc5e 	bl	1cb74 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d2b8:	4b0f      	ldr	r3, [pc, #60]	; (1d2f8 <qspi_nor_read+0x17c>)
   1d2ba:	429c      	cmp	r4, r3
   1d2bc:	d107      	bne.n	1d2ce <qspi_nor_read+0x152>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1d2be:	eb0a 0005 	add.w	r0, sl, r5
   1d2c2:	465a      	mov	r2, fp
   1d2c4:	f107 0108 	add.w	r1, r7, #8
   1d2c8:	4440      	add	r0, r8
   1d2ca:	f013 f93c 	bl	30546 <memcpy>
	k_sem_give(&dev_data->sem);
   1d2ce:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d2d2:	3018      	adds	r0, #24
   1d2d4:	f010 ff9c 	bl	2e210 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1d2d8:	4620      	mov	r0, r4
   1d2da:	f7ff fc31 	bl	1cb40 <qspi_get_zephyr_ret_code>
   1d2de:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1d2e0:	4648      	mov	r0, r9
   1d2e2:	f7ff fc7b 	bl	1cbdc <qspi_device_uninit>
	return rc;
   1d2e6:	e76f      	b.n	1d1c8 <qspi_nor_read+0x4c>
	return res;
   1d2e8:	4c03      	ldr	r4, [pc, #12]	; (1d2f8 <qspi_nor_read+0x17c>)
   1d2ea:	e7f0      	b.n	1d2ce <qspi_nor_read+0x152>
		return 0;
   1d2ec:	461d      	mov	r5, r3
   1d2ee:	e76b      	b.n	1d1c8 <qspi_nor_read+0x4c>
   1d2f0:	00036ee7 	.word	0x00036ee7
   1d2f4:	00031594 	.word	0x00031594
   1d2f8:	0bad0000 	.word	0x0bad0000

0001d2fc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1d2fc:	4b02      	ldr	r3, [pc, #8]	; (1d308 <flash_nrf_pages_layout+0xc>)
   1d2fe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d300:	2301      	movs	r3, #1
   1d302:	6013      	str	r3, [r2, #0]
}
   1d304:	4770      	bx	lr
   1d306:	bf00      	nop
   1d308:	20021898 	.word	0x20021898

0001d30c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1d30c:	4800      	ldr	r0, [pc, #0]	; (1d310 <flash_nrf_get_parameters+0x4>)
   1d30e:	4770      	bx	lr
   1d310:	000323c4 	.word	0x000323c4

0001d314 <flash_nrf_read>:
{
   1d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d318:	460d      	mov	r5, r1
   1d31a:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1d31c:	4619      	mov	r1, r3
   1d31e:	4628      	mov	r0, r5
{
   1d320:	461e      	mov	r6, r3
   1d322:	4614      	mov	r4, r2
	if (is_regular_addr_valid(addr, len)) {
   1d324:	f010 ffb9 	bl	2e29a <is_regular_addr_valid>
   1d328:	4603      	mov	r3, r0
   1d32a:	b9a8      	cbnz	r0, 1d358 <flash_nrf_read+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d32c:	46e8      	mov	r8, sp
   1d32e:	b088      	sub	sp, #32
   1d330:	466c      	mov	r4, sp
   1d332:	4a10      	ldr	r2, [pc, #64]	; (1d374 <flash_nrf_read+0x60>)
   1d334:	2104      	movs	r1, #4
   1d336:	e9c4 2505 	strd	r2, r5, [r4, #20]
   1d33a:	4622      	mov	r2, r4
   1d33c:	61e6      	str	r6, [r4, #28]
   1d33e:	f842 1f10 	str.w	r1, [r2, #16]!
   1d342:	480d      	ldr	r0, [pc, #52]	; (1d378 <flash_nrf_read+0x64>)
   1d344:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d348:	f7f1 fa8e 	bl	e868 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d34c:	f06f 0015 	mvn.w	r0, #21
   1d350:	46c5      	mov	sp, r8
}
   1d352:	46bd      	mov	sp, r7
   1d354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!len) {
   1d358:	b156      	cbz	r6, 1d370 <flash_nrf_read+0x5c>
	if (addr < PM_APP_ADDRESS) {
   1d35a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1d35e:	4632      	mov	r2, r6
   1d360:	4629      	mov	r1, r5
   1d362:	4620      	mov	r0, r4
	if (addr < PM_APP_ADDRESS) {
   1d364:	da02      	bge.n	1d36c <flash_nrf_read+0x58>
		return soc_secure_mem_read(data, (void *)addr, len);
   1d366:	f00d fa96 	bl	2a896 <soc_secure_mem_read>
   1d36a:	e7f2      	b.n	1d352 <flash_nrf_read+0x3e>
   1d36c:	f013 f8eb 	bl	30546 <memcpy>
		return 0;
   1d370:	2000      	movs	r0, #0
   1d372:	e7ee      	b.n	1d352 <flash_nrf_read+0x3e>
   1d374:	00036f46 	.word	0x00036f46
   1d378:	00031524 	.word	0x00031524

0001d37c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1d37c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d37e:	2201      	movs	r2, #1
   1d380:	4806      	ldr	r0, [pc, #24]	; (1d39c <nrf_flash_init+0x20>)
   1d382:	4611      	mov	r1, r2
   1d384:	f012 ff1d 	bl	301c2 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d388:	f011 fbfc 	bl	2eb84 <nrfx_nvmc_flash_page_count_get>
   1d38c:	4c04      	ldr	r4, [pc, #16]	; (1d3a0 <nrf_flash_init+0x24>)
   1d38e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d390:	f011 fbf5 	bl	2eb7e <nrfx_nvmc_flash_page_size_get>
   1d394:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1d396:	2000      	movs	r0, #0
   1d398:	bd10      	pop	{r4, pc}
   1d39a:	bf00      	nop
   1d39c:	200218a0 	.word	0x200218a0
   1d3a0:	20021898 	.word	0x20021898

0001d3a4 <flash_nrf_erase>:
{
   1d3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3a8:	af00      	add	r7, sp, #0
   1d3aa:	460e      	mov	r6, r1
   1d3ac:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3ae:	f011 fbe6 	bl	2eb7e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1d3b2:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3b4:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1d3b6:	4630      	mov	r0, r6
   1d3b8:	f010 ff6f 	bl	2e29a <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d3bc:	46b0      	mov	r8, r6
	if (is_regular_addr_valid(addr, size)) {
   1d3be:	4603      	mov	r3, r0
   1d3c0:	b3b8      	cbz	r0, 1d432 <flash_nrf_erase+0x8e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d3c2:	fbb6 f3f5 	udiv	r3, r6, r5
   1d3c6:	fb05 6313 	mls	r3, r5, r3, r6
   1d3ca:	b923      	cbnz	r3, 1d3d6 <flash_nrf_erase+0x32>
   1d3cc:	fbb4 f3f5 	udiv	r3, r4, r5
   1d3d0:	fb05 4313 	mls	r3, r5, r3, r4
   1d3d4:	b19b      	cbz	r3, 1d3fe <flash_nrf_erase+0x5a>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1d3d6:	466d      	mov	r5, sp
   1d3d8:	b088      	sub	sp, #32
   1d3da:	466a      	mov	r2, sp
   1d3dc:	4b1a      	ldr	r3, [pc, #104]	; (1d448 <flash_nrf_erase+0xa4>)
   1d3de:	61d4      	str	r4, [r2, #28]
   1d3e0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d3e4:	2304      	movs	r3, #4
   1d3e6:	f842 3f10 	str.w	r3, [r2, #16]!
   1d3ea:	2300      	movs	r3, #0
   1d3ec:	4817      	ldr	r0, [pc, #92]	; (1d44c <flash_nrf_erase+0xa8>)
   1d3ee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d3f2:	f7f1 fa39 	bl	e868 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1d3f6:	f06f 0015 	mvn.w	r0, #21
   1d3fa:	46ad      	mov	sp, r5
		return -EINVAL;
   1d3fc:	e002      	b.n	1d404 <flash_nrf_erase+0x60>
		if (!n_pages) {
   1d3fe:	42ac      	cmp	r4, r5
   1d400:	d203      	bcs.n	1d40a <flash_nrf_erase+0x66>
			return 0;
   1d402:	2000      	movs	r0, #0
}
   1d404:	46bd      	mov	sp, r7
   1d406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
   1d40a:	f04f 32ff 	mov.w	r2, #4294967295
   1d40e:	f04f 33ff 	mov.w	r3, #4294967295
   1d412:	480f      	ldr	r0, [pc, #60]	; (1d450 <flash_nrf_erase+0xac>)
   1d414:	f008 f908 	bl	25628 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d418:	f011 fbb1 	bl	2eb7e <nrfx_nvmc_flash_page_size_get>
   1d41c:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1d41e:	4640      	mov	r0, r8
   1d420:	f002 faf4 	bl	1fa0c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1d424:	1b64      	subs	r4, r4, r5
   1d426:	44a8      	add	r8, r5
   1d428:	d1f9      	bne.n	1d41e <flash_nrf_erase+0x7a>
	z_impl_k_sem_give(sem);
   1d42a:	4809      	ldr	r0, [pc, #36]	; (1d450 <flash_nrf_erase+0xac>)
   1d42c:	f008 f8b8 	bl	255a0 <z_impl_k_sem_give>
}
   1d430:	e7e7      	b.n	1d402 <flash_nrf_erase+0x5e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d432:	466d      	mov	r5, sp
   1d434:	b088      	sub	sp, #32
   1d436:	466a      	mov	r2, sp
   1d438:	4906      	ldr	r1, [pc, #24]	; (1d454 <flash_nrf_erase+0xb0>)
   1d43a:	61d4      	str	r4, [r2, #28]
   1d43c:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1d440:	2104      	movs	r1, #4
   1d442:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1d446:	e7d1      	b.n	1d3ec <flash_nrf_erase+0x48>
   1d448:	00036f63 	.word	0x00036f63
   1d44c:	00031524 	.word	0x00031524
   1d450:	200218a0 	.word	0x200218a0
   1d454:	00036f46 	.word	0x00036f46

0001d458 <flash_nrf_write>:
{
   1d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d45c:	460e      	mov	r6, r1
   1d45e:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1d460:	4619      	mov	r1, r3
   1d462:	4630      	mov	r0, r6
{
   1d464:	461c      	mov	r4, r3
   1d466:	4690      	mov	r8, r2
	if (is_regular_addr_valid(addr, len)) {
   1d468:	f010 ff17 	bl	2e29a <is_regular_addr_valid>
   1d46c:	4603      	mov	r3, r0
   1d46e:	b9a0      	cbnz	r0, 1d49a <flash_nrf_write+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d470:	466d      	mov	r5, sp
   1d472:	b088      	sub	sp, #32
   1d474:	466a      	mov	r2, sp
   1d476:	4920      	ldr	r1, [pc, #128]	; (1d4f8 <flash_nrf_write+0xa0>)
   1d478:	61d4      	str	r4, [r2, #28]
   1d47a:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1d47e:	2104      	movs	r1, #4
   1d480:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1d484:	481d      	ldr	r0, [pc, #116]	; (1d4fc <flash_nrf_write+0xa4>)
   1d486:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d48a:	f7f1 f9ed 	bl	e868 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d48e:	f06f 0015 	mvn.w	r0, #21
   1d492:	46ad      	mov	sp, r5
}
   1d494:	46bd      	mov	sp, r7
   1d496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1d49a:	ea46 0504 	orr.w	r5, r6, r4
   1d49e:	f015 0503 	ands.w	r5, r5, #3
   1d4a2:	d00b      	beq.n	1d4bc <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d4a4:	466d      	mov	r5, sp
   1d4a6:	b088      	sub	sp, #32
   1d4a8:	466a      	mov	r2, sp
   1d4aa:	4b15      	ldr	r3, [pc, #84]	; (1d500 <flash_nrf_write+0xa8>)
   1d4ac:	61d4      	str	r4, [r2, #28]
   1d4ae:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d4b2:	2304      	movs	r3, #4
   1d4b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1d4b8:	2300      	movs	r3, #0
   1d4ba:	e7e3      	b.n	1d484 <flash_nrf_write+0x2c>
	if (!len) {
   1d4bc:	b1a4      	cbz	r4, 1d4e8 <flash_nrf_write+0x90>
	return z_impl_k_sem_take(sem, timeout);
   1d4be:	f04f 32ff 	mov.w	r2, #4294967295
   1d4c2:	f04f 33ff 	mov.w	r3, #4294967295
   1d4c6:	480f      	ldr	r0, [pc, #60]	; (1d504 <flash_nrf_write+0xac>)
   1d4c8:	f008 f8ae 	bl	25628 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1d4cc:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1d4d0:	42a5      	cmp	r5, r4
   1d4d2:	eb05 0006 	add.w	r0, r5, r6
   1d4d6:	d109      	bne.n	1d4ec <flash_nrf_write+0x94>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d4d8:	4a0b      	ldr	r2, [pc, #44]	; (1d508 <flash_nrf_write+0xb0>)
   1d4da:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d4de:	07db      	lsls	r3, r3, #31
   1d4e0:	d5fb      	bpl.n	1d4da <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   1d4e2:	4808      	ldr	r0, [pc, #32]	; (1d504 <flash_nrf_write+0xac>)
   1d4e4:	f008 f85c 	bl	255a0 <z_impl_k_sem_give>
	return ret;
   1d4e8:	2000      	movs	r0, #0
   1d4ea:	e7d3      	b.n	1d494 <flash_nrf_write+0x3c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d4ec:	f858 1005 	ldr.w	r1, [r8, r5]
   1d4f0:	f002 fabe 	bl	1fa70 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1d4f4:	3504      	adds	r5, #4
}
   1d4f6:	e7eb      	b.n	1d4d0 <flash_nrf_write+0x78>
   1d4f8:	00036f46 	.word	0x00036f46
   1d4fc:	00031524 	.word	0x00031524
   1d500:	00036f82 	.word	0x00036f82
   1d504:	200218a0 	.word	0x200218a0
   1d508:	40039000 	.word	0x40039000

0001d50c <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1d50c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d50e:	461d      	mov	r5, r3
	return config->uarte_regs;
   1d510:	6843      	ldr	r3, [r0, #4]
{
   1d512:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1d514:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d516:	f8d3 c000 	ldr.w	ip, [r3]
   1d51a:	f04f 0320 	mov.w	r3, #32
   1d51e:	f3ef 8711 	mrs	r7, BASEPRI
   1d522:	f383 8812 	msr	BASEPRI_MAX, r3
   1d526:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1d52a:	68e3      	ldr	r3, [r4, #12]
   1d52c:	68d8      	ldr	r0, [r3, #12]
   1d52e:	b138      	cbz	r0, 1d540 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1d530:	f387 8811 	msr	BASEPRI, r7
   1d534:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1d538:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1d53c:	b003      	add	sp, #12
   1d53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1d540:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1d542:	68e3      	ldr	r3, [r4, #12]
   1d544:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d54a:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1d54e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1d552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d556:	68e3      	ldr	r3, [r4, #12]
   1d558:	d111      	bne.n	1d57e <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1d55a:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1d55c:	68e3      	ldr	r3, [r4, #12]
   1d55e:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1d560:	4621      	mov	r1, r4
   1d562:	4630      	mov	r0, r6
   1d564:	f011 f881 	bl	2e66a <start_tx_locked>
   1d568:	f387 8811 	msr	BASEPRI, r7
   1d56c:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1d570:	7ae3      	ldrb	r3, [r4, #11]
   1d572:	2b01      	cmp	r3, #1
   1d574:	d101      	bne.n	1d57a <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1d576:	1c6b      	adds	r3, r5, #1
   1d578:	d106      	bne.n	1d588 <uarte_nrfx_tx+0x7c>
	return 0;
   1d57a:	2000      	movs	r0, #0
   1d57c:	e7de      	b.n	1d53c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1d57e:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1d580:	4620      	mov	r0, r4
   1d582:	f010 ffeb 	bl	2e55c <setup_tx_cache>
   1d586:	e7eb      	b.n	1d560 <uarte_nrfx_tx+0x54>
   1d588:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d58c:	2100      	movs	r1, #0
   1d58e:	480a      	ldr	r0, [pc, #40]	; (1d5b8 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1d590:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1d594:	2300      	movs	r3, #0
   1d596:	fbc5 0106 	smlal	r0, r1, r5, r6
   1d59a:	4a08      	ldr	r2, [pc, #32]	; (1d5bc <uarte_nrfx_tx+0xb0>)
   1d59c:	f7eb fca8 	bl	8ef0 <__aeabi_uldivmod>
   1d5a0:	68e4      	ldr	r4, [r4, #12]
   1d5a2:	4602      	mov	r2, r0
   1d5a4:	460b      	mov	r3, r1
   1d5a6:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1d5a8:	2000      	movs	r0, #0
   1d5aa:	2100      	movs	r1, #0
   1d5ac:	e9cd 0100 	strd	r0, r1, [sp]
   1d5b0:	4620      	mov	r0, r4
   1d5b2:	f00a fc07 	bl	27dc4 <z_impl_k_timer_start>
   1d5b6:	e7e0      	b.n	1d57a <uarte_nrfx_tx+0x6e>
   1d5b8:	000f423f 	.word	0x000f423f
   1d5bc:	000f4240 	.word	0x000f4240

0001d5c0 <uarte_nrfx_configure>:
{
   1d5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1d5c2:	794b      	ldrb	r3, [r1, #5]
   1d5c4:	2b01      	cmp	r3, #1
   1d5c6:	d029      	beq.n	1d61c <uarte_nrfx_configure+0x5c>
   1d5c8:	2b03      	cmp	r3, #3
   1d5ca:	d124      	bne.n	1d616 <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d5cc:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d5ce:	798b      	ldrb	r3, [r1, #6]
   1d5d0:	2b03      	cmp	r3, #3
   1d5d2:	d120      	bne.n	1d616 <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1d5d4:	79ce      	ldrb	r6, [r1, #7]
   1d5d6:	b10e      	cbz	r6, 1d5dc <uarte_nrfx_configure+0x1c>
   1d5d8:	2e01      	cmp	r6, #1
   1d5da:	d11c      	bne.n	1d616 <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1d5dc:	790a      	ldrb	r2, [r1, #4]
   1d5de:	2a01      	cmp	r2, #1
   1d5e0:	d01e      	beq.n	1d620 <uarte_nrfx_configure+0x60>
   1d5e2:	2a02      	cmp	r2, #2
   1d5e4:	d020      	beq.n	1d628 <uarte_nrfx_configure+0x68>
   1d5e6:	b9b2      	cbnz	r2, 1d616 <uarte_nrfx_configure+0x56>
   1d5e8:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d5ea:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d5ec:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1d5ee:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d5f2:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1d5f6:	d06e      	beq.n	1d6d6 <uarte_nrfx_configure+0x116>
   1d5f8:	d833      	bhi.n	1d662 <uarte_nrfx_configure+0xa2>
   1d5fa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d5fe:	d06d      	beq.n	1d6dc <uarte_nrfx_configure+0x11c>
   1d600:	d81c      	bhi.n	1d63c <uarte_nrfx_configure+0x7c>
   1d602:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d606:	d06b      	beq.n	1d6e0 <uarte_nrfx_configure+0x120>
   1d608:	d810      	bhi.n	1d62c <uarte_nrfx_configure+0x6c>
   1d60a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d60e:	d06a      	beq.n	1d6e6 <uarte_nrfx_configure+0x126>
   1d610:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d614:	d06a      	beq.n	1d6ec <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1d616:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d61a:	e05b      	b.n	1d6d4 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1d61c:	2700      	movs	r7, #0
   1d61e:	e7d6      	b.n	1d5ce <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1d620:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d624:	220e      	movs	r2, #14
   1d626:	e7e0      	b.n	1d5ea <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1d628:	2400      	movs	r4, #0
   1d62a:	e7fb      	b.n	1d624 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1d62c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d630:	d05f      	beq.n	1d6f2 <uarte_nrfx_configure+0x132>
   1d632:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d636:	d1ee      	bne.n	1d616 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d638:	4b38      	ldr	r3, [pc, #224]	; (1d71c <uarte_nrfx_configure+0x15c>)
   1d63a:	e03c      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d63c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d640:	d05a      	beq.n	1d6f8 <uarte_nrfx_configure+0x138>
   1d642:	d807      	bhi.n	1d654 <uarte_nrfx_configure+0x94>
   1d644:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d648:	d058      	beq.n	1d6fc <uarte_nrfx_configure+0x13c>
   1d64a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d64e:	d1e2      	bne.n	1d616 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d650:	4b33      	ldr	r3, [pc, #204]	; (1d720 <uarte_nrfx_configure+0x160>)
   1d652:	e030      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d654:	f647 2512 	movw	r5, #31250	; 0x7a12
   1d658:	42ab      	cmp	r3, r5
   1d65a:	d1dc      	bne.n	1d616 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d65c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d660:	e029      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d662:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d666:	d04b      	beq.n	1d700 <uarte_nrfx_configure+0x140>
   1d668:	d813      	bhi.n	1d692 <uarte_nrfx_configure+0xd2>
   1d66a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d66e:	d04a      	beq.n	1d706 <uarte_nrfx_configure+0x146>
   1d670:	d809      	bhi.n	1d686 <uarte_nrfx_configure+0xc6>
   1d672:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1d676:	42ab      	cmp	r3, r5
   1d678:	d047      	beq.n	1d70a <uarte_nrfx_configure+0x14a>
   1d67a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d67e:	d1ca      	bne.n	1d616 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d680:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d684:	e017      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d686:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d68a:	d1c4      	bne.n	1d616 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d68c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d690:	e011      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d692:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d696:	d03b      	beq.n	1d710 <uarte_nrfx_configure+0x150>
   1d698:	d808      	bhi.n	1d6ac <uarte_nrfx_configure+0xec>
   1d69a:	4d22      	ldr	r5, [pc, #136]	; (1d724 <uarte_nrfx_configure+0x164>)
   1d69c:	42ab      	cmp	r3, r5
   1d69e:	d03a      	beq.n	1d716 <uarte_nrfx_configure+0x156>
   1d6a0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d6a4:	d1b7      	bne.n	1d616 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d6a6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d6aa:	e004      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6ac:	4d1e      	ldr	r5, [pc, #120]	; (1d728 <uarte_nrfx_configure+0x168>)
   1d6ae:	42ab      	cmp	r3, r5
   1d6b0:	d1b1      	bne.n	1d616 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d6b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d6b6:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d6b8:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1d6bc:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1d6be:	433a      	orrs	r2, r7
   1d6c0:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1d6c2:	4334      	orrs	r4, r6
   1d6c4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d6c6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1d6ca:	1d2b      	adds	r3, r5, #4
   1d6cc:	c903      	ldmia	r1, {r0, r1}
   1d6ce:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1d6d2:	2000      	movs	r0, #0
}
   1d6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d6d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d6da:	e7ec      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d6dc:	4b13      	ldr	r3, [pc, #76]	; (1d72c <uarte_nrfx_configure+0x16c>)
   1d6de:	e7ea      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d6e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d6e4:	e7e7      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1d6e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d6ea:	e7e4      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6ec:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d6f0:	e7e1      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d6f2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d6f6:	e7de      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d6f8:	4b0d      	ldr	r3, [pc, #52]	; (1d730 <uarte_nrfx_configure+0x170>)
   1d6fa:	e7dc      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d6fc:	4b0d      	ldr	r3, [pc, #52]	; (1d734 <uarte_nrfx_configure+0x174>)
   1d6fe:	e7da      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d700:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d704:	e7d7      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d706:	4b0c      	ldr	r3, [pc, #48]	; (1d738 <uarte_nrfx_configure+0x178>)
   1d708:	e7d5      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d70a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d70e:	e7d2      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d710:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d714:	e7cf      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d716:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d71a:	e7cc      	b.n	1d6b6 <uarte_nrfx_configure+0xf6>
   1d71c:	0013b000 	.word	0x0013b000
   1d720:	004ea000 	.word	0x004ea000
   1d724:	0003d090 	.word	0x0003d090
   1d728:	000f4240 	.word	0x000f4240
   1d72c:	00275000 	.word	0x00275000
   1d730:	0075c000 	.word	0x0075c000
   1d734:	003af000 	.word	0x003af000
   1d738:	013a9000 	.word	0x013a9000

0001d73c <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d73c:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1d73e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1d742:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1d746:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1d748:	f8d9 4000 	ldr.w	r4, [r9]
static int uarte_instance_init(const struct device *dev,
   1d74c:	b087      	sub	sp, #28
   1d74e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1d752:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d754:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1d758:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1d75a:	466a      	mov	r2, sp
   1d75c:	4640      	mov	r0, r8
   1d75e:	f011 f854 	bl	2e80a <pinctrl_lookup_state>
	if (ret < 0) {
   1d762:	1e05      	subs	r5, r0, #0
   1d764:	db26      	blt.n	1d7b4 <uarte_instance_init.constprop.0+0x78>
	return pinctrl_apply_state_direct(config, state);
   1d766:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d768:	f8d8 2000 	ldr.w	r2, [r8]
   1d76c:	7919      	ldrb	r1, [r3, #4]
   1d76e:	6818      	ldr	r0, [r3, #0]
   1d770:	f011 f85e 	bl	2e830 <pinctrl_configure_pins>
	if (err < 0) {
   1d774:	1e05      	subs	r5, r0, #0
   1d776:	db1d      	blt.n	1d7b4 <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d778:	4638      	mov	r0, r7
   1d77a:	1d31      	adds	r1, r6, #4
   1d77c:	f7ff ff20 	bl	1d5c0 <uarte_nrfx_configure>
	if (err) {
   1d780:	4605      	mov	r5, r0
   1d782:	b9b8      	cbnz	r0, 1d7b4 <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d784:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d788:	0799      	lsls	r1, r3, #30
   1d78a:	d533      	bpl.n	1d7f4 <uarte_instance_init.constprop.0+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d78c:	f106 001c 	add.w	r0, r6, #28
   1d790:	f001 fc62 	bl	1f058 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d794:	4b4f      	ldr	r3, [pc, #316]	; (1d8d4 <uarte_instance_init.constprop.0+0x198>)
   1d796:	4298      	cmp	r0, r3
   1d798:	d010      	beq.n	1d7bc <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1d79a:	4b4f      	ldr	r3, [pc, #316]	; (1d8d8 <uarte_instance_init.constprop.0+0x19c>)
   1d79c:	9305      	str	r3, [sp, #20]
   1d79e:	2302      	movs	r3, #2
   1d7a0:	9304      	str	r3, [sp, #16]
   1d7a2:	462b      	mov	r3, r5
		return -EIO;
   1d7a4:	f06f 0504 	mvn.w	r5, #4
   1d7a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d7ac:	484b      	ldr	r0, [pc, #300]	; (1d8dc <uarte_instance_init.constprop.0+0x1a0>)
   1d7ae:	aa04      	add	r2, sp, #16
   1d7b0:	f7f1 f85a 	bl	e868 <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1d7b4:	4628      	mov	r0, r5
   1d7b6:	b007      	add	sp, #28
   1d7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d7bc:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1d7be:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d7c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d7c6:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1d7ca:	d10b      	bne.n	1d7e4 <uarte_instance_init.constprop.0+0xa8>
   1d7cc:	4944      	ldr	r1, [pc, #272]	; (1d8e0 <uarte_instance_init.constprop.0+0x1a4>)
   1d7ce:	4845      	ldr	r0, [pc, #276]	; (1d8e4 <uarte_instance_init.constprop.0+0x1a8>)
   1d7d0:	f240 234e 	movw	r3, #590	; 0x24e
   1d7d4:	4a44      	ldr	r2, [pc, #272]	; (1d8e8 <uarte_instance_init.constprop.0+0x1ac>)
   1d7d6:	f00c ff5c 	bl	2a692 <assert_print>
   1d7da:	f240 214e 	movw	r1, #590	; 0x24e
   1d7de:	4842      	ldr	r0, [pc, #264]	; (1d8e8 <uarte_instance_init.constprop.0+0x1ac>)
   1d7e0:	f00c ff50 	bl	2a684 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d7e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d7e8:	2301      	movs	r3, #1
   1d7ea:	7f32      	ldrb	r2, [r6, #28]
   1d7ec:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1d7ee:	4a3f      	ldr	r2, [pc, #252]	; (1d8ec <uarte_instance_init.constprop.0+0x1b0>)
   1d7f0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1d7f4:	68f3      	ldr	r3, [r6, #12]
   1d7f6:	2b00      	cmp	r3, #0
   1d7f8:	d059      	beq.n	1d8ae <uarte_instance_init.constprop.0+0x172>
    p_reg->INTENSET = mask;
   1d7fa:	2204      	movs	r2, #4
	return config->uarte_regs;
   1d7fc:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d7fe:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1d802:	681b      	ldr	r3, [r3, #0]
   1d804:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1d808:	2201      	movs	r2, #1
   1d80a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1d80e:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1d812:	4937      	ldr	r1, [pc, #220]	; (1d8f0 <uarte_instance_init.constprop.0+0x1b4>)
   1d814:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d818:	2108      	movs	r1, #8
   1d81a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d81e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d822:	b1a1      	cbz	r1, 1d84e <uarte_instance_init.constprop.0+0x112>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d824:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d826:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d82a:	b91a      	cbnz	r2, 1d834 <uarte_instance_init.constprop.0+0xf8>
   1d82c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1d830:	2a00      	cmp	r2, #0
   1d832:	d0f8      	beq.n	1d826 <uarte_instance_init.constprop.0+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d834:	2200      	movs	r2, #0
   1d836:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1d83a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1d83e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d842:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1d846:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1d84a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1d84e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d852:	2200      	movs	r2, #0
   1d854:	4927      	ldr	r1, [pc, #156]	; (1d8f4 <uarte_instance_init.constprop.0+0x1b8>)
   1d856:	3080      	adds	r0, #128	; 0x80
   1d858:	f012 fd84 	bl	30364 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1d85c:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1d860:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1d864:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d868:	2200      	movs	r2, #0
   1d86a:	4923      	ldr	r1, [pc, #140]	; (1d8f8 <uarte_instance_init.constprop.0+0x1bc>)
   1d86c:	3020      	adds	r0, #32
   1d86e:	f012 fd79 	bl	30364 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1d872:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1d876:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d87a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d87e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d880:	bf5c      	itt	pl
   1d882:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d886:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d88a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d88e:	06db      	lsls	r3, r3, #27
   1d890:	bf44      	itt	mi
   1d892:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d896:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d89a:	6973      	ldr	r3, [r6, #20]
   1d89c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d8a0:	2300      	movs	r3, #0
   1d8a2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8a6:	2301      	movs	r3, #1
   1d8a8:	60a3      	str	r3, [r4, #8]
   1d8aa:	60e3      	str	r3, [r4, #12]
	return 0;
   1d8ac:	e782      	b.n	1d7b4 <uarte_instance_init.constprop.0+0x78>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d8ae:	2308      	movs	r3, #8
   1d8b0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d8b4:	f899 3008 	ldrb.w	r3, [r9, #8]
   1d8b8:	2b00      	cmp	r3, #0
   1d8ba:	d1de      	bne.n	1d87a <uarte_instance_init.constprop.0+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d8bc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d8c0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d8c4:	69b3      	ldr	r3, [r6, #24]
   1d8c6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d8ca:	2301      	movs	r3, #1
   1d8cc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8d0:	6023      	str	r3, [r4, #0]
}
   1d8d2:	e7d2      	b.n	1d87a <uarte_instance_init.constprop.0+0x13e>
   1d8d4:	0bad0000 	.word	0x0bad0000
   1d8d8:	00036fc1 	.word	0x00036fc1
   1d8dc:	000315bc 	.word	0x000315bc
   1d8e0:	000334f4 	.word	0x000334f4
   1d8e4:	00032629 	.word	0x00032629
   1d8e8:	000334bc 	.word	0x000334bc
   1d8ec:	40017000 	.word	0x40017000
   1d8f0:	000a0210 	.word	0x000a0210
   1d8f4:	0002e6dd 	.word	0x0002e6dd
   1d8f8:	0002e7ad 	.word	0x0002e7ad

0001d8fc <uarte_nrfx_poll_out>:
{
   1d8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d900:	4604      	mov	r4, r0
   1d902:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1d904:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d906:	f012 fc0b 	bl	30120 <k_is_in_isr>
   1d90a:	b9b0      	cbnz	r0, 1d93a <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1d90c:	4b2a      	ldr	r3, [pc, #168]	; (1d9b8 <uarte_nrfx_poll_out+0xbc>)
   1d90e:	781b      	ldrb	r3, [r3, #0]
   1d910:	b19b      	cbz	r3, 1d93a <uarte_nrfx_poll_out+0x3e>
{
   1d912:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d914:	6860      	ldr	r0, [r4, #4]
   1d916:	f010 fe98 	bl	2e64a <is_tx_ready.isra.0>
   1d91a:	2800      	cmp	r0, #0
   1d91c:	d138      	bne.n	1d990 <uarte_nrfx_poll_out+0x94>
   1d91e:	2001      	movs	r0, #1
   1d920:	f011 f8b0 	bl	2ea84 <nrfx_busy_wait>
   1d924:	3f01      	subs	r7, #1
   1d926:	d1f5      	bne.n	1d914 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1d928:	2100      	movs	r1, #0
   1d92a:	2021      	movs	r0, #33	; 0x21
   1d92c:	f009 fd2c 	bl	27388 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d930:	e7ef      	b.n	1d912 <uarte_nrfx_poll_out+0x16>
   1d932:	f381 8811 	msr	BASEPRI, r1
   1d936:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d93a:	f04f 0320 	mov.w	r3, #32
   1d93e:	f3ef 8111 	mrs	r1, BASEPRI
   1d942:	f383 8812 	msr	BASEPRI_MAX, r3
   1d946:	f3bf 8f6f 	isb	sy
   1d94a:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1d94e:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1d950:	4640      	mov	r0, r8
   1d952:	f010 fe7a 	bl	2e64a <is_tx_ready.isra.0>
   1d956:	2800      	cmp	r0, #0
   1d958:	d0eb      	beq.n	1d932 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1d95a:	68eb      	ldr	r3, [r5, #12]
   1d95c:	b15b      	cbz	r3, 1d976 <uarte_nrfx_poll_out+0x7a>
   1d95e:	68da      	ldr	r2, [r3, #12]
   1d960:	b14a      	cbz	r2, 1d976 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1d962:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1d966:	2a00      	cmp	r2, #0
   1d968:	da05      	bge.n	1d976 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1d96a:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1d96e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1d972:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1d976:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1d978:	2201      	movs	r2, #1
	*data->char_out = c;
   1d97a:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1d97c:	4620      	mov	r0, r4
   1d97e:	6969      	ldr	r1, [r5, #20]
   1d980:	f010 fd0c 	bl	2e39c <tx_start>
	__asm__ volatile(
   1d984:	f387 8811 	msr	BASEPRI, r7
   1d988:	f3bf 8f6f 	isb	sy
}
   1d98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d990:	f04f 0320 	mov.w	r3, #32
   1d994:	f3ef 8111 	mrs	r1, BASEPRI
   1d998:	f383 8812 	msr	BASEPRI_MAX, r3
   1d99c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d9a0:	6860      	ldr	r0, [r4, #4]
   1d9a2:	460f      	mov	r7, r1
   1d9a4:	f010 fe51 	bl	2e64a <is_tx_ready.isra.0>
   1d9a8:	2800      	cmp	r0, #0
   1d9aa:	d1e4      	bne.n	1d976 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1d9ac:	f381 8811 	msr	BASEPRI, r1
   1d9b0:	f3bf 8f6f 	isb	sy
}
   1d9b4:	e7b8      	b.n	1d928 <uarte_nrfx_poll_out+0x2c>
   1d9b6:	bf00      	nop
   1d9b8:	20022827 	.word	0x20022827

0001d9bc <uarte_nrfx_rx_enable>:
{
   1d9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1d9c0:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1d9c4:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1d9c6:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1d9ca:	4605      	mov	r5, r0
   1d9cc:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1d9ce:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d9d0:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1d9d4:	b172      	cbz	r2, 1d9f4 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1d9d6:	4944      	ldr	r1, [pc, #272]	; (1dae8 <uarte_nrfx_rx_enable+0x12c>)
   1d9d8:	f240 337d 	movw	r3, #893	; 0x37d
   1d9dc:	4a43      	ldr	r2, [pc, #268]	; (1daec <uarte_nrfx_rx_enable+0x130>)
   1d9de:	4844      	ldr	r0, [pc, #272]	; (1daf0 <uarte_nrfx_rx_enable+0x134>)
   1d9e0:	f00c fe57 	bl	2a692 <assert_print>
   1d9e4:	4843      	ldr	r0, [pc, #268]	; (1daf4 <uarte_nrfx_rx_enable+0x138>)
   1d9e6:	f00c fe54 	bl	2a692 <assert_print>
   1d9ea:	f240 317d 	movw	r1, #893	; 0x37d
   1d9ee:	483f      	ldr	r0, [pc, #252]	; (1daec <uarte_nrfx_rx_enable+0x130>)
   1d9f0:	f00c fe48 	bl	2a684 <assert_post_action>
	if (data->async->rx_enabled) {
   1d9f4:	68e2      	ldr	r2, [r4, #12]
   1d9f6:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1d9fa:	2900      	cmp	r1, #0
   1d9fc:	d170      	bne.n	1dae0 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1d9fe:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1da02:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1da04:	bfca      	itet	gt
   1da06:	2205      	movgt	r2, #5
   1da08:	235c      	movle	r3, #92	; 0x5c
   1da0a:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1da0e:	68e2      	ldr	r2, [r4, #12]
   1da10:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1da12:	68e3      	ldr	r3, [r4, #12]
   1da14:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1da18:	68e3      	ldr	r3, [r4, #12]
   1da1a:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1da1c:	2300      	movs	r3, #0
   1da1e:	68e2      	ldr	r2, [r4, #12]
   1da20:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1da22:	68e2      	ldr	r2, [r4, #12]
   1da24:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1da26:	68e2      	ldr	r2, [r4, #12]
   1da28:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1da2a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1da2e:	06da      	lsls	r2, r3, #27
   1da30:	d523      	bpl.n	1da7a <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1da32:	68e1      	ldr	r1, [r4, #12]
   1da34:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1da38:	b1fe      	cbz	r6, 1da7a <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1da3a:	42be      	cmp	r6, r7
   1da3c:	bf28      	it	cs
   1da3e:	463e      	movcs	r6, r7
   1da40:	4640      	mov	r0, r8
   1da42:	4632      	mov	r2, r6
   1da44:	31c4      	adds	r1, #196	; 0xc4
   1da46:	f012 fd7e 	bl	30546 <memcpy>
			if (!len) {
   1da4a:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1da4c:	44b0      	add	r8, r6
			if (!len) {
   1da4e:	d114      	bne.n	1da7a <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1da50:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1da52:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1da54:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1da58:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1da5a:	1b9b      	subs	r3, r3, r6
   1da5c:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1da60:	f010 fccb 	bl	2e3fa <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1da64:	68e1      	ldr	r1, [r4, #12]
   1da66:	4628      	mov	r0, r5
   1da68:	3158      	adds	r1, #88	; 0x58
   1da6a:	f010 fcdf 	bl	2e42c <rx_buf_release>
				notify_rx_disable(dev);
   1da6e:	4628      	mov	r0, r5
   1da70:	f010 fcf4 	bl	2e45c <notify_rx_disable>
	return 0;
   1da74:	2000      	movs	r0, #0
}
   1da76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da7a:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1da7c:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1da80:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da84:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1da88:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1da8c:	2201      	movs	r2, #1
   1da8e:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1da92:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1da96:	68e3      	ldr	r3, [r4, #12]
   1da98:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1da9c:	f8da 3004 	ldr.w	r3, [sl, #4]
   1daa0:	06db      	lsls	r3, r3, #27
   1daa2:	d519      	bpl.n	1dad8 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1daa4:	f04f 0320 	mov.w	r3, #32
   1daa8:	f3ef 8111 	mrs	r1, BASEPRI
   1daac:	f383 8812 	msr	BASEPRI_MAX, r3
   1dab0:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1dab4:	692b      	ldr	r3, [r5, #16]
   1dab6:	68db      	ldr	r3, [r3, #12]
   1dab8:	b12b      	cbz	r3, 1dac6 <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1daba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1dabe:	f042 0202 	orr.w	r2, r2, #2
   1dac2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1dac6:	2208      	movs	r2, #8
	return config->uarte_regs;
   1dac8:	686b      	ldr	r3, [r5, #4]
   1daca:	681b      	ldr	r3, [r3, #0]
   1dacc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1dad0:	f381 8811 	msr	BASEPRI, r1
   1dad4:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dad8:	2301      	movs	r3, #1
   1dada:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1dade:	e7c9      	b.n	1da74 <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1dae0:	f06f 000f 	mvn.w	r0, #15
   1dae4:	e7c7      	b.n	1da76 <uarte_nrfx_rx_enable+0xba>
   1dae6:	bf00      	nop
   1dae8:	00037ac9 	.word	0x00037ac9
   1daec:	00036fe0 	.word	0x00036fe0
   1daf0:	00032629 	.word	0x00032629
   1daf4:	00037014 	.word	0x00037014

0001daf8 <uarte_nrfx_isr_async>:
{
   1daf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1dafc:	6843      	ldr	r3, [r0, #4]
{
   1dafe:	4604      	mov	r4, r0
	return config->uarte_regs;
   1db00:	681d      	ldr	r5, [r3, #0]
{
   1db02:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db04:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1db08:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1db0a:	b169      	cbz	r1, 1db28 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db0c:	2200      	movs	r2, #0
   1db0e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1db12:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1db16:	68da      	ldr	r2, [r3, #12]
   1db18:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1db1c:	3301      	adds	r3, #1
   1db1e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1db22:	b008      	add	sp, #32
   1db24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db28:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1db2c:	b323      	cbz	r3, 1db78 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db2e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1db32:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1db36:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1db38:	2214      	movs	r2, #20
	return config->uarte_regs;
   1db3a:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1db3c:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1db3e:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1db42:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1db46:	f012 fd38 	bl	305ba <memset>
   1db4a:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1db4c:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1db4e:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1db52:	f100 8103 	bmi.w	1dd5c <uarte_nrfx_isr_async+0x264>
   1db56:	07b3      	lsls	r3, r6, #30
   1db58:	f100 8102 	bmi.w	1dd60 <uarte_nrfx_isr_async+0x268>
   1db5c:	0777      	lsls	r7, r6, #29
   1db5e:	f100 8101 	bmi.w	1dd64 <uarte_nrfx_isr_async+0x26c>
   1db62:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1db66:	4620      	mov	r0, r4
   1db68:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1db6a:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1db6e:	f010 fc3d 	bl	2e3ec <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1db72:	4620      	mov	r0, r4
   1db74:	f010 fcd0 	bl	2e518 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db78:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1db7c:	b38b      	cbz	r3, 1dbe2 <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1db7e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1db82:	06d8      	lsls	r0, r3, #27
   1db84:	d52d      	bpl.n	1dbe2 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db86:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1db8a:	2201      	movs	r2, #1
   1db8c:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1db90:	6926      	ldr	r6, [r4, #16]
   1db92:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1db96:	6863      	ldr	r3, [r4, #4]
   1db98:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1db9a:	68f3      	ldr	r3, [r6, #12]
   1db9c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1dba0:	68f0      	ldr	r0, [r6, #12]
   1dba2:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1dba4:	f012 fbea 	bl	3037c <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1dba8:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1dbaa:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1dbae:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1dbb2:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1dbb6:	68f2      	ldr	r2, [r6, #12]
   1dbb8:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1dbba:	1a1b      	subs	r3, r3, r0
   1dbbc:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1dbbe:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1dbc0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1dbc4:	4408      	add	r0, r1
	if (rx_len > 0) {
   1dbc6:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1dbc8:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1dbca:	dd02      	ble.n	1dbd2 <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1dbcc:	4620      	mov	r0, r4
   1dbce:	f010 fc14 	bl	2e3fa <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1dbd2:	68f1      	ldr	r1, [r6, #12]
   1dbd4:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1dbd8:	2b00      	cmp	r3, #0
   1dbda:	f040 80c5 	bne.w	1dd68 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1dbde:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbe2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1dbe6:	b383      	cbz	r3, 1dc4a <uarte_nrfx_isr_async+0x152>
   1dbe8:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1dbec:	bb6e      	cbnz	r6, 1dc4a <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1dbee:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbf0:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1dbf4:	4631      	mov	r1, r6
   1dbf6:	a803      	add	r0, sp, #12
   1dbf8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1dbfc:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1dbfe:	f012 fcdc 	bl	305ba <memset>
   1dc02:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1dc04:	a903      	add	r1, sp, #12
   1dc06:	4620      	mov	r0, r4
	struct uart_event evt = {
   1dc08:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1dc0c:	f010 fbee 	bl	2e3ec <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1dc10:	68fb      	ldr	r3, [r7, #12]
   1dc12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1dc14:	1c51      	adds	r1, r2, #1
   1dc16:	d018      	beq.n	1dc4a <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1dc18:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1dc1a:	68ff      	ldr	r7, [r7, #12]
   1dc1c:	498e      	ldr	r1, [pc, #568]	; (1de58 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1dc1e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1dc20:	468e      	mov	lr, r1
   1dc22:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1dc26:	4631      	mov	r1, r6
   1dc28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1dc2c:	fbcc e100 	smlal	lr, r1, ip, r0
   1dc30:	2300      	movs	r3, #0
   1dc32:	4670      	mov	r0, lr
   1dc34:	4a89      	ldr	r2, [pc, #548]	; (1de5c <uarte_nrfx_isr_async+0x364>)
   1dc36:	f7eb f95b 	bl	8ef0 <__aeabi_uldivmod>
   1dc3a:	4602      	mov	r2, r0
   1dc3c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1dc3e:	e9cd 0100 	strd	r0, r1, [sp]
   1dc42:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1dc46:	f00a f8bd 	bl	27dc4 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc4a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1dc4e:	b333      	cbz	r3, 1dc9e <uarte_nrfx_isr_async+0x1a6>
   1dc50:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1dc54:	bb1e      	cbnz	r6, 1dc9e <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc56:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1dc5a:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1dc5c:	4620      	mov	r0, r4
   1dc5e:	68f9      	ldr	r1, [r7, #12]
   1dc60:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1dc64:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1dc66:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1dc6a:	f010 fbdf 	bl	2e42c <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1dc6e:	68f9      	ldr	r1, [r7, #12]
   1dc70:	4620      	mov	r0, r4
   1dc72:	3164      	adds	r1, #100	; 0x64
   1dc74:	f010 fbda 	bl	2e42c <rx_buf_release>
	if (data->async->rx_enabled) {
   1dc78:	68fb      	ldr	r3, [r7, #12]
   1dc7a:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1dc7e:	2a00      	cmp	r2, #0
   1dc80:	f000 80a3 	beq.w	1ddca <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1dc84:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dc88:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1dc8c:	06d8      	lsls	r0, r3, #27
   1dc8e:	d503      	bpl.n	1dc98 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1dc90:	2102      	movs	r1, #2
   1dc92:	4620      	mov	r0, r4
   1dc94:	f010 fcaf 	bl	2e5f6 <async_uart_release>
	notify_rx_disable(dev);
   1dc98:	4620      	mov	r0, r4
   1dc9a:	f010 fbdf 	bl	2e45c <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc9e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1dca2:	b1db      	cbz	r3, 1dcdc <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1dca4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1dca8:	05d9      	lsls	r1, r3, #23
   1dcaa:	d517      	bpl.n	1dcdc <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1dcac:	6863      	ldr	r3, [r4, #4]
   1dcae:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1dcb0:	f04f 0120 	mov.w	r1, #32
   1dcb4:	f3ef 8211 	mrs	r2, BASEPRI
   1dcb8:	f381 8812 	msr	BASEPRI_MAX, r1
   1dcbc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dcc0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dcc4:	b131      	cbz	r1, 1dcd4 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dcc6:	2100      	movs	r1, #0
   1dcc8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1dccc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dcd0:	2101      	movs	r1, #1
   1dcd2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1dcd4:	f382 8811 	msr	BASEPRI, r2
   1dcd8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dcdc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1dce0:	2b00      	cmp	r3, #0
   1dce2:	f43f af1e 	beq.w	1db22 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1dce6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1dcea:	025a      	lsls	r2, r3, #9
   1dcec:	f57f af19 	bpl.w	1db22 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1dcf0:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1dcf2:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dcf4:	e9d3 7300 	ldrd	r7, r3, [r3]
   1dcf8:	06db      	lsls	r3, r3, #27
   1dcfa:	d46b      	bmi.n	1ddd4 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1dcfc:	68eb      	ldr	r3, [r5, #12]
   1dcfe:	689b      	ldr	r3, [r3, #8]
   1dd00:	2b00      	cmp	r3, #0
   1dd02:	f43f af0e 	beq.w	1db22 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1dd06:	f04f 0320 	mov.w	r3, #32
   1dd0a:	f3ef 8211 	mrs	r2, BASEPRI
   1dd0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd12:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1dd16:	68eb      	ldr	r3, [r5, #12]
   1dd18:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1dd1c:	2900      	cmp	r1, #0
   1dd1e:	bfac      	ite	ge
   1dd20:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1dd24:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1dd28:	f382 8811 	msr	BASEPRI, r2
   1dd2c:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1dd30:	68eb      	ldr	r3, [r5, #12]
   1dd32:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1dd36:	2a00      	cmp	r2, #0
   1dd38:	d059      	beq.n	1ddee <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1dd3a:	f04f 0320 	mov.w	r3, #32
   1dd3e:	f3ef 8611 	mrs	r6, BASEPRI
   1dd42:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd46:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1dd4a:	4629      	mov	r1, r5
   1dd4c:	4620      	mov	r0, r4
   1dd4e:	f010 fc8c 	bl	2e66a <start_tx_locked>
	__asm__ volatile(
   1dd52:	f386 8811 	msr	BASEPRI, r6
   1dd56:	f3bf 8f6f 	isb	sy
				return;
   1dd5a:	e6e2      	b.n	1db22 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1dd5c:	2601      	movs	r6, #1
   1dd5e:	e702      	b.n	1db66 <uarte_nrfx_isr_async+0x6e>
   1dd60:	2602      	movs	r6, #2
   1dd62:	e700      	b.n	1db66 <uarte_nrfx_isr_async+0x6e>
   1dd64:	2604      	movs	r6, #4
   1dd66:	e6fe      	b.n	1db66 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1dd68:	4620      	mov	r0, r4
   1dd6a:	3158      	adds	r1, #88	; 0x58
   1dd6c:	f010 fb5e 	bl	2e42c <rx_buf_release>
	__asm__ volatile(
   1dd70:	f04f 0320 	mov.w	r3, #32
   1dd74:	f3ef 8111 	mrs	r1, BASEPRI
   1dd78:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd7c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1dd80:	68f3      	ldr	r3, [r6, #12]
   1dd82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1dd84:	b1f2      	cbz	r2, 1ddc4 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1dd86:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1dd88:	68f3      	ldr	r3, [r6, #12]
   1dd8a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1dd8c:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1dd8e:	2300      	movs	r3, #0
   1dd90:	68f2      	ldr	r2, [r6, #12]
   1dd92:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1dd94:	68f2      	ldr	r2, [r6, #12]
   1dd96:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1dd98:	68f2      	ldr	r2, [r6, #12]
   1dd9a:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1dda0:	b90b      	cbnz	r3, 1dda6 <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dda2:	2301      	movs	r3, #1
   1dda4:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1dda6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1ddaa:	f023 0320 	bic.w	r3, r3, #32
   1ddae:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1ddb2:	f381 8811 	msr	BASEPRI, r1
   1ddb6:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1ddba:	2200      	movs	r2, #0
   1ddbc:	68f3      	ldr	r3, [r6, #12]
   1ddbe:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1ddc2:	e70e      	b.n	1dbe2 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ddc4:	2301      	movs	r3, #1
   1ddc6:	607b      	str	r3, [r7, #4]
}
   1ddc8:	e7f3      	b.n	1ddb2 <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1ddca:	4611      	mov	r1, r2
   1ddcc:	6860      	ldr	r0, [r4, #4]
   1ddce:	f010 fbdd 	bl	2e58c <rx_flush.isra.0>
   1ddd2:	e759      	b.n	1dc88 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1ddd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1ddd8:	2101      	movs	r1, #1
   1ddda:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1ddde:	4620      	mov	r0, r4
   1dde0:	f010 fc09 	bl	2e5f6 <async_uart_release>
		if (!data->async->tx_size) {
   1dde4:	68eb      	ldr	r3, [r5, #12]
   1dde6:	68db      	ldr	r3, [r3, #12]
   1dde8:	2b00      	cmp	r3, #0
   1ddea:	d187      	bne.n	1dcfc <uarte_nrfx_isr_async+0x204>
   1ddec:	e699      	b.n	1db22 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1ddee:	6899      	ldr	r1, [r3, #8]
   1ddf0:	691a      	ldr	r2, [r3, #16]
   1ddf2:	4291      	cmp	r1, r2
   1ddf4:	d00c      	beq.n	1de10 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1ddf6:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1ddf8:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1ddfa:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1ddfc:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1ddfe:	d128      	bne.n	1de52 <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1de00:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1de02:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1de04:	f010 fbaa 	bl	2e55c <setup_tx_cache>
   1de08:	2800      	cmp	r0, #0
   1de0a:	d196      	bne.n	1dd3a <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1de0c:	68eb      	ldr	r3, [r5, #12]
   1de0e:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1de10:	68e8      	ldr	r0, [r5, #12]
   1de12:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1de14:	f012 fab2 	bl	3037c <z_impl_k_timer_stop>
	struct uart_event evt = {
   1de18:	2214      	movs	r2, #20
   1de1a:	2100      	movs	r1, #0
   1de1c:	a803      	add	r0, sp, #12
   1de1e:	f012 fbcc 	bl	305ba <memset>
		.data.tx.buf = data->async->tx_buf,
   1de22:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1de24:	4620      	mov	r0, r4
	struct uart_event evt = {
   1de26:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1de28:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1de2a:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1de2e:	68db      	ldr	r3, [r3, #12]
   1de30:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1de32:	bf1c      	itt	ne
   1de34:	2301      	movne	r3, #1
   1de36:	f88d 300c 	strbne.w	r3, [sp, #12]
   1de3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1de3e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1de42:	2300      	movs	r3, #0
   1de44:	68ea      	ldr	r2, [r5, #12]
   1de46:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1de48:	68ea      	ldr	r2, [r5, #12]
   1de4a:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1de4c:	f010 face 	bl	2e3ec <user_callback>
   1de50:	e667      	b.n	1db22 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1de52:	4616      	mov	r6, r2
   1de54:	e7dc      	b.n	1de10 <uarte_nrfx_isr_async+0x318>
   1de56:	bf00      	nop
   1de58:	000f423f 	.word	0x000f423f
   1de5c:	000f4240 	.word	0x000f4240

0001de60 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1de60:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1de62:	7e01      	ldrb	r1, [r0, #24]
   1de64:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1de66:	2902      	cmp	r1, #2
{
   1de68:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   1de6a:	d018      	beq.n	1de9e <bt_rpmsg_send+0x3e>
   1de6c:	2904      	cmp	r1, #4
   1de6e:	d015      	beq.n	1de9c <bt_rpmsg_send+0x3c>
   1de70:	b339      	cbz	r1, 1dec2 <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1de72:	466d      	mov	r5, sp
   1de74:	b088      	sub	sp, #32
   1de76:	466a      	mov	r2, sp
   1de78:	4b13      	ldr	r3, [pc, #76]	; (1dec8 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   1de7a:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1de7e:	2303      	movs	r3, #3
   1de80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1de84:	4811      	ldr	r0, [pc, #68]	; (1decc <bt_rpmsg_send+0x6c>)
   1de86:	f842 3f10 	str.w	r3, [r2, #16]!
   1de8a:	f010 fc93 	bl	2e7b4 <z_log_msg_static_create.constprop.0>
   1de8e:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   1de90:	4620      	mov	r0, r4
   1de92:	f7fd fb65 	bl	1b560 <net_buf_unref>
	return 0;
}
   1de96:	2000      	movs	r0, #0
   1de98:	46bd      	mov	sp, r7
   1de9a:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   1de9c:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1de9e:	f104 000c 	add.w	r0, r4, #12
   1dea2:	f010 f889 	bl	2dfb8 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1dea6:	8a22      	ldrh	r2, [r4, #16]
   1dea8:	68e1      	ldr	r1, [r4, #12]
   1deaa:	4809      	ldr	r0, [pc, #36]	; (1ded0 <bt_rpmsg_send+0x70>)
   1deac:	f7f1 fba6 	bl	f5fc <ipc_service_send>
	if (err < 0) {
   1deb0:	2800      	cmp	r0, #0
   1deb2:	daed      	bge.n	1de90 <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   1deb4:	466d      	mov	r5, sp
   1deb6:	b088      	sub	sp, #32
   1deb8:	466a      	mov	r2, sp
   1deba:	4b06      	ldr	r3, [pc, #24]	; (1ded4 <bt_rpmsg_send+0x74>)
   1debc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dec0:	e7dd      	b.n	1de7e <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   1dec2:	2101      	movs	r1, #1
   1dec4:	e7eb      	b.n	1de9e <bt_rpmsg_send+0x3e>
   1dec6:	bf00      	nop
   1dec8:	00037050 	.word	0x00037050
   1decc:	000314bc 	.word	0x000314bc
   1ded0:	200218b8 	.word	0x200218b8
   1ded4:	00037060 	.word	0x00037060

0001ded8 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1ded8:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1deda:	480c      	ldr	r0, [pc, #48]	; (1df0c <bt_rpmsg_init+0x34>)
{
   1dedc:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   1dede:	f7f5 faa7 	bl	13430 <bt_hci_driver_register>
	if (err < 0) {
   1dee2:	1e04      	subs	r4, r0, #0
   1dee4:	da0e      	bge.n	1df04 <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1dee6:	466d      	mov	r5, sp
   1dee8:	b088      	sub	sp, #32
   1deea:	466a      	mov	r2, sp
   1deec:	4b08      	ldr	r3, [pc, #32]	; (1df10 <bt_rpmsg_init+0x38>)
   1deee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1def2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1def6:	2303      	movs	r3, #3
   1def8:	4806      	ldr	r0, [pc, #24]	; (1df14 <bt_rpmsg_init+0x3c>)
   1defa:	f842 3f10 	str.w	r3, [r2, #16]!
   1defe:	f010 fc59 	bl	2e7b4 <z_log_msg_static_create.constprop.0>
   1df02:	46ad      	mov	sp, r5
	}

	return err;
}
   1df04:	4620      	mov	r0, r4
   1df06:	46bd      	mov	sp, r7
   1df08:	bdb0      	pop	{r4, r5, r7, pc}
   1df0a:	bf00      	nop
   1df0c:	00032468 	.word	0x00032468
   1df10:	00037078 	.word	0x00037078
   1df14:	000314bc 	.word	0x000314bc

0001df18 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1df18:	4801      	ldr	r0, [pc, #4]	; (1df20 <hci_ept_bound+0x8>)
   1df1a:	f007 bb41 	b.w	255a0 <z_impl_k_sem_give>
   1df1e:	bf00      	nop
   1df20:	20008bec 	.word	0x20008bec

0001df24 <bt_rpmsg_open>:
{
   1df24:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1df26:	481a      	ldr	r0, [pc, #104]	; (1df90 <bt_rpmsg_open+0x6c>)
{
   1df28:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   1df2a:	f7f1 fb07 	bl	f53c <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1df2e:	4604      	mov	r4, r0
   1df30:	b1a0      	cbz	r0, 1df5c <bt_rpmsg_open+0x38>
   1df32:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1df36:	d011      	beq.n	1df5c <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1df38:	466d      	mov	r5, sp
   1df3a:	b088      	sub	sp, #32
   1df3c:	466a      	mov	r2, sp
   1df3e:	4b15      	ldr	r3, [pc, #84]	; (1df94 <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   1df40:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1df44:	2303      	movs	r3, #3
   1df46:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1df4a:	4813      	ldr	r0, [pc, #76]	; (1df98 <bt_rpmsg_open+0x74>)
   1df4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1df50:	f010 fc30 	bl	2e7b4 <z_log_msg_static_create.constprop.0>
   1df54:	46ad      	mov	sp, r5
}
   1df56:	4620      	mov	r0, r4
   1df58:	46bd      	mov	sp, r7
   1df5a:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1df5c:	4a0f      	ldr	r2, [pc, #60]	; (1df9c <bt_rpmsg_open+0x78>)
   1df5e:	4910      	ldr	r1, [pc, #64]	; (1dfa0 <bt_rpmsg_open+0x7c>)
   1df60:	480b      	ldr	r0, [pc, #44]	; (1df90 <bt_rpmsg_open+0x6c>)
   1df62:	f7f1 fb19 	bl	f598 <ipc_service_register_endpoint>
	if (err) {
   1df66:	4604      	mov	r4, r0
   1df68:	b120      	cbz	r0, 1df74 <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   1df6a:	466d      	mov	r5, sp
   1df6c:	b088      	sub	sp, #32
   1df6e:	466a      	mov	r2, sp
   1df70:	4b0c      	ldr	r3, [pc, #48]	; (1dfa4 <bt_rpmsg_open+0x80>)
   1df72:	e7e5      	b.n	1df40 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   1df74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1df78:	2300      	movs	r3, #0
   1df7a:	480b      	ldr	r0, [pc, #44]	; (1dfa8 <bt_rpmsg_open+0x84>)
   1df7c:	f007 fb54 	bl	25628 <z_impl_k_sem_take>
	if (err) {
   1df80:	4604      	mov	r4, r0
   1df82:	2800      	cmp	r0, #0
   1df84:	d0e7      	beq.n	1df56 <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   1df86:	466d      	mov	r5, sp
   1df88:	b088      	sub	sp, #32
   1df8a:	466a      	mov	r2, sp
   1df8c:	4b07      	ldr	r3, [pc, #28]	; (1dfac <bt_rpmsg_open+0x88>)
   1df8e:	e7d7      	b.n	1df40 <bt_rpmsg_open+0x1c>
   1df90:	00030f9c 	.word	0x00030f9c
   1df94:	000370a2 	.word	0x000370a2
   1df98:	000314bc 	.word	0x000314bc
   1df9c:	20008674 	.word	0x20008674
   1dfa0:	200218b8 	.word	0x200218b8
   1dfa4:	000370d2 	.word	0x000370d2
   1dfa8:	20008bec 	.word	0x20008bec
   1dfac:	000370f6 	.word	0x000370f6

0001dfb0 <hci_ept_recv>:
{
   1dfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfb4:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   1dfb6:	f890 8000 	ldrb.w	r8, [r0]
{
   1dfba:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   1dfbc:	f1b8 0f04 	cmp.w	r8, #4
{
   1dfc0:	460c      	mov	r4, r1
   1dfc2:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   1dfc4:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1dfc8:	d00d      	beq.n	1dfe6 <hci_ept_recv+0x36>
   1dfca:	f1b8 0f05 	cmp.w	r8, #5
   1dfce:	f000 80a8 	beq.w	1e122 <hci_ept_recv+0x172>
   1dfd2:	f1b8 0f02 	cmp.w	r8, #2
   1dfd6:	f040 80cf 	bne.w	1e178 <hci_ept_recv+0x1c8>
	if (remaining < sizeof(hdr)) {
   1dfda:	2b03      	cmp	r3, #3
   1dfdc:	d86e      	bhi.n	1e0bc <hci_ept_recv+0x10c>
		LOG_ERR("Not enough data for ACL header");
   1dfde:	4b6e      	ldr	r3, [pc, #440]	; (1e198 <hci_ept_recv+0x1e8>)
		LOG_ERR("No available ACL buffers!");
   1dfe0:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1dfe4:	e005      	b.n	1dff2 <hci_ept_recv+0x42>
	if (remaining < sizeof(hdr)) {
   1dfe6:	2b01      	cmp	r3, #1
   1dfe8:	d80e      	bhi.n	1e008 <hci_ept_recv+0x58>
		LOG_ERR("Not enough data for event header");
   1dfea:	4b6c      	ldr	r3, [pc, #432]	; (1e19c <hci_ept_recv+0x1ec>)
		LOG_ERR("Event payload length is not correct");
   1dfec:	61fb      	str	r3, [r7, #28]
   1dfee:	2302      	movs	r3, #2
   1dff0:	61bb      	str	r3, [r7, #24]
   1dff2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dff6:	486a      	ldr	r0, [pc, #424]	; (1e1a0 <hci_ept_recv+0x1f0>)
   1dff8:	f107 0218 	add.w	r2, r7, #24
   1dffc:	f010 fbda 	bl	2e7b4 <z_log_msg_static_create.constprop.0>
}
   1e000:	3724      	adds	r7, #36	; 0x24
   1e002:	46bd      	mov	sp, r7
   1e004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1e008:	7843      	ldrb	r3, [r0, #1]
   1e00a:	2b3e      	cmp	r3, #62	; 0x3e
   1e00c:	d13c      	bne.n	1e088 <hci_ept_recv+0xd8>
		switch (subevt_type) {
   1e00e:	f890 a003 	ldrb.w	sl, [r0, #3]
   1e012:	f1aa 0302 	sub.w	r3, sl, #2
   1e016:	f1d3 0a00 	rsbs	sl, r3, #0
   1e01a:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1e01e:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1e022:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   1e024:	ebb4 2f13 	cmp.w	r4, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1e028:	80bb      	strh	r3, [r7, #4]
	if (remaining != hdr.len) {
   1e02a:	d133      	bne.n	1e094 <hci_ept_recv+0xe4>
   1e02c:	f1ba 0f00 	cmp.w	sl, #0
   1e030:	d02d      	beq.n	1e08e <hci_ept_recv+0xde>
   1e032:	f04f 0800 	mov.w	r8, #0
   1e036:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1e03a:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1e03e:	4642      	mov	r2, r8
   1e040:	464b      	mov	r3, r9
   1e042:	4651      	mov	r1, sl
   1e044:	7938      	ldrb	r0, [r7, #4]
   1e046:	f7f3 ff3d 	bl	11ec4 <bt_buf_get_evt>
		if (!buf) {
   1e04a:	4605      	mov	r5, r0
   1e04c:	b320      	cbz	r0, 1e098 <hci_ept_recv+0xe8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e04e:	f100 080c 	add.w	r8, r0, #12
   1e052:	2202      	movs	r2, #2
   1e054:	1d39      	adds	r1, r7, #4
   1e056:	4640      	mov	r0, r8
   1e058:	f00f ffc9 	bl	2dfee <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1e05c:	4640      	mov	r0, r8
   1e05e:	f00f ffbe 	bl	2dfde <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e062:	4284      	cmp	r4, r0
   1e064:	d926      	bls.n	1e0b4 <hci_ept_recv+0x104>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1e066:	466e      	mov	r6, sp
   1e068:	b088      	sub	sp, #32
   1e06a:	466a      	mov	r2, sp
   1e06c:	4b4d      	ldr	r3, [pc, #308]	; (1e1a4 <hci_ept_recv+0x1f4>)
   1e06e:	61d0      	str	r0, [r2, #28]
   1e070:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e074:	2304      	movs	r3, #4
   1e076:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e07a:	4849      	ldr	r0, [pc, #292]	; (1e1a0 <hci_ept_recv+0x1f0>)
   1e07c:	f842 3f10 	str.w	r3, [r2, #16]!
   1e080:	f010 fb98 	bl	2e7b4 <z_log_msg_static_create.constprop.0>
   1e084:	46b5      	mov	sp, r6
   1e086:	e038      	b.n	1e0fa <hci_ept_recv+0x14a>
			return false;
   1e088:	f04f 0a00 	mov.w	sl, #0
   1e08c:	e7c7      	b.n	1e01e <hci_ept_recv+0x6e>
   1e08e:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1e092:	e7d0      	b.n	1e036 <hci_ept_recv+0x86>
		LOG_ERR("Event payload length is not correct");
   1e094:	4b44      	ldr	r3, [pc, #272]	; (1e1a8 <hci_ept_recv+0x1f8>)
   1e096:	e7a9      	b.n	1dfec <hci_ept_recv+0x3c>
			if (discardable) {
   1e098:	f1ba 0f00 	cmp.w	sl, #0
   1e09c:	d1b0      	bne.n	1e000 <hci_ept_recv+0x50>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1e09e:	4b43      	ldr	r3, [pc, #268]	; (1e1ac <hci_ept_recv+0x1fc>)
   1e0a0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e0a4:	e9c7 b306 	strd	fp, r3, [r7, #24]
   1e0a8:	483d      	ldr	r0, [pc, #244]	; (1e1a0 <hci_ept_recv+0x1f0>)
   1e0aa:	f107 0218 	add.w	r2, r7, #24
   1e0ae:	f010 fb81 	bl	2e7b4 <z_log_msg_static_create.constprop.0>
	} while (!buf);
   1e0b2:	e7c4      	b.n	1e03e <hci_ept_recv+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e0b4:	4622      	mov	r2, r4
   1e0b6:	1cf1      	adds	r1, r6, #3
   1e0b8:	4640      	mov	r0, r8
   1e0ba:	e02c      	b.n	1e116 <hci_ept_recv+0x166>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1e0bc:	2200      	movs	r2, #0
   1e0be:	2300      	movs	r3, #0
   1e0c0:	2003      	movs	r0, #3
   1e0c2:	f7f3 feb1 	bl	11e28 <bt_buf_get_rx>
	if (buf) {
   1e0c6:	4605      	mov	r5, r0
   1e0c8:	b1d8      	cbz	r0, 1e102 <hci_ept_recv+0x152>
   1e0ca:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1e0cc:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1e0d0:	f100 090c 	add.w	r9, r0, #12
   1e0d4:	607b      	str	r3, [r7, #4]
   1e0d6:	4648      	mov	r0, r9
   1e0d8:	18b9      	adds	r1, r7, r2
   1e0da:	f00f ff88 	bl	2dfee <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1e0de:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1e0e0:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1e0e2:	429c      	cmp	r4, r3
   1e0e4:	d00f      	beq.n	1e106 <hci_ept_recv+0x156>
		LOG_ERR("ACL payload length is not correct");
   1e0e6:	4b32      	ldr	r3, [pc, #200]	; (1e1b0 <hci_ept_recv+0x200>)
   1e0e8:	e9c7 8306 	strd	r8, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   1e0ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e0f0:	482b      	ldr	r0, [pc, #172]	; (1e1a0 <hci_ept_recv+0x1f0>)
   1e0f2:	f107 0218 	add.w	r2, r7, #24
   1e0f6:	f010 fb5d 	bl	2e7b4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1e0fa:	4628      	mov	r0, r5
   1e0fc:	f7fd fa30 	bl	1b560 <net_buf_unref>
	if (buf) {
   1e100:	e77e      	b.n	1e000 <hci_ept_recv+0x50>
		LOG_ERR("No available ACL buffers!");
   1e102:	4b2c      	ldr	r3, [pc, #176]	; (1e1b4 <hci_ept_recv+0x204>)
   1e104:	e76c      	b.n	1dfe0 <hci_ept_recv+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1e106:	4648      	mov	r0, r9
   1e108:	f00f ff69 	bl	2dfde <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e10c:	4284      	cmp	r4, r0
   1e10e:	d8aa      	bhi.n	1e066 <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e110:	4622      	mov	r2, r4
   1e112:	4648      	mov	r0, r9
   1e114:	1d71      	adds	r1, r6, #5
   1e116:	f00f ff6a 	bl	2dfee <net_buf_simple_add_mem>
		bt_recv(buf);
   1e11a:	4628      	mov	r0, r5
   1e11c:	f7f5 f954 	bl	133c8 <bt_recv>
}
   1e120:	e76e      	b.n	1e000 <hci_ept_recv+0x50>
	if (remaining < sizeof(hdr)) {
   1e122:	2b03      	cmp	r3, #3
   1e124:	d801      	bhi.n	1e12a <hci_ept_recv+0x17a>
		LOG_ERR("Not enough data for ISO header");
   1e126:	4b24      	ldr	r3, [pc, #144]	; (1e1b8 <hci_ept_recv+0x208>)
   1e128:	e760      	b.n	1dfec <hci_ept_recv+0x3c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1e12a:	2200      	movs	r2, #0
   1e12c:	2300      	movs	r3, #0
   1e12e:	4640      	mov	r0, r8
   1e130:	f7f3 fe7a 	bl	11e28 <bt_buf_get_rx>
	if (buf) {
   1e134:	4605      	mov	r5, r0
   1e136:	b1a0      	cbz	r0, 1e162 <hci_ept_recv+0x1b2>
   1e138:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1e13a:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1e13e:	f100 080c 	add.w	r8, r0, #12
   1e142:	607b      	str	r3, [r7, #4]
   1e144:	4640      	mov	r0, r8
   1e146:	18b9      	adds	r1, r7, r2
   1e148:	f00f ff51 	bl	2dfee <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1e14c:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1e14e:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1e150:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1e154:	429c      	cmp	r4, r3
   1e156:	d006      	beq.n	1e166 <hci_ept_recv+0x1b6>
		LOG_ERR("ISO payload length is not correct");
   1e158:	4b18      	ldr	r3, [pc, #96]	; (1e1bc <hci_ept_recv+0x20c>)
   1e15a:	61fb      	str	r3, [r7, #28]
   1e15c:	2302      	movs	r3, #2
   1e15e:	61bb      	str	r3, [r7, #24]
   1e160:	e7c4      	b.n	1e0ec <hci_ept_recv+0x13c>
		LOG_ERR("No available ISO buffers!");
   1e162:	4b17      	ldr	r3, [pc, #92]	; (1e1c0 <hci_ept_recv+0x210>)
   1e164:	e742      	b.n	1dfec <hci_ept_recv+0x3c>
	return net_buf_simple_tailroom(&buf->b);
   1e166:	4640      	mov	r0, r8
   1e168:	f00f ff39 	bl	2dfde <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e16c:	4284      	cmp	r4, r0
   1e16e:	f63f af7a 	bhi.w	1e066 <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e172:	4622      	mov	r2, r4
   1e174:	1d71      	adds	r1, r6, #5
   1e176:	e79f      	b.n	1e0b8 <hci_ept_recv+0x108>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1e178:	466c      	mov	r4, sp
   1e17a:	b088      	sub	sp, #32
   1e17c:	466a      	mov	r2, sp
   1e17e:	4b11      	ldr	r3, [pc, #68]	; (1e1c4 <hci_ept_recv+0x214>)
   1e180:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   1e184:	e9c2 3805 	strd	r3, r8, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1e188:	2303      	movs	r3, #3
   1e18a:	4805      	ldr	r0, [pc, #20]	; (1e1a0 <hci_ept_recv+0x1f0>)
   1e18c:	f842 3f10 	str.w	r3, [r2, #16]!
   1e190:	f010 fb10 	bl	2e7b4 <z_log_msg_static_create.constprop.0>
   1e194:	46a5      	mov	sp, r4
   1e196:	e733      	b.n	1e000 <hci_ept_recv+0x50>
   1e198:	000371b3 	.word	0x000371b3
   1e19c:	00037116 	.word	0x00037116
   1e1a0:	000314bc 	.word	0x000314bc
   1e1a4:	00037190 	.word	0x00037190
   1e1a8:	00037137 	.word	0x00037137
   1e1ac:	0003715b 	.word	0x0003715b
   1e1b0:	000371ec 	.word	0x000371ec
   1e1b4:	000371d2 	.word	0x000371d2
   1e1b8:	0003720e 	.word	0x0003720e
   1e1bc:	00037247 	.word	0x00037247
   1e1c0:	0003722d 	.word	0x0003722d
   1e1c4:	00037269 	.word	0x00037269

0001e1c8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e1c8:	2301      	movs	r3, #1
   1e1ca:	4083      	lsls	r3, r0
{
   1e1cc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e1ce:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e1d0:	4a0b      	ldr	r2, [pc, #44]	; (1e200 <compare_int_lock+0x38>)
   1e1d2:	e8d2 1fef 	ldaex	r1, [r2]
   1e1d6:	ea01 0504 	and.w	r5, r1, r4
   1e1da:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1e1de:	2e00      	cmp	r6, #0
   1e1e0:	d1f7      	bne.n	1e1d2 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e1e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e1e6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1e1e8:	4806      	ldr	r0, [pc, #24]	; (1e204 <compare_int_lock+0x3c>)
   1e1ea:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1e1ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e1f2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e1f6:	420b      	tst	r3, r1
}
   1e1f8:	bf14      	ite	ne
   1e1fa:	2001      	movne	r0, #1
   1e1fc:	2000      	moveq	r0, #0
   1e1fe:	bd70      	pop	{r4, r5, r6, pc}
   1e200:	200218c8 	.word	0x200218c8
   1e204:	40015000 	.word	0x40015000

0001e208 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e20a:	491b      	ldr	r1, [pc, #108]	; (1e278 <sys_clock_timeout_handler+0x70>)
{
   1e20c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1e20e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e212:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1e214:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e218:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e21c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1e21e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e222:	d30f      	bcc.n	1e244 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e224:	f009 fc32 	bl	27a8c <sys_clock_announce>
    return p_reg->CC[ch];
   1e228:	00a3      	lsls	r3, r4, #2
   1e22a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e22e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1e232:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1e236:	4295      	cmp	r5, r2
   1e238:	d11d      	bne.n	1e276 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1e23a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e23e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1e242:	e012      	b.n	1e26a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e244:	4b0d      	ldr	r3, [pc, #52]	; (1e27c <sys_clock_timeout_handler+0x74>)
   1e246:	681b      	ldr	r3, [r3, #0]
   1e248:	0a1a      	lsrs	r2, r3, #8
   1e24a:	061b      	lsls	r3, r3, #24
   1e24c:	195e      	adds	r6, r3, r5
   1e24e:	4b0c      	ldr	r3, [pc, #48]	; (1e280 <sys_clock_timeout_handler+0x78>)
   1e250:	f142 0700 	adc.w	r7, r2, #0
   1e254:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e258:	f009 fc18 	bl	27a8c <sys_clock_announce>
    return p_reg->CC[ch];
   1e25c:	4a09      	ldr	r2, [pc, #36]	; (1e284 <sys_clock_timeout_handler+0x7c>)
   1e25e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1e262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1e266:	429d      	cmp	r5, r3
   1e268:	d105      	bne.n	1e276 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e26a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e26e:	4a05      	ldr	r2, [pc, #20]	; (1e284 <sys_clock_timeout_handler+0x7c>)
   1e270:	40a3      	lsls	r3, r4
   1e272:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1e276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e278:	2000a150 	.word	0x2000a150
   1e27c:	200218cc 	.word	0x200218cc
   1e280:	2000a158 	.word	0x2000a158
   1e284:	40015000 	.word	0x40015000

0001e288 <compare_int_unlock>:
	if (key) {
   1e288:	b1d9      	cbz	r1, 1e2c2 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1e28a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e28c:	4a0d      	ldr	r2, [pc, #52]	; (1e2c4 <compare_int_unlock+0x3c>)
   1e28e:	4083      	lsls	r3, r0
   1e290:	e8d2 cfef 	ldaex	ip, [r2]
   1e294:	ea4c 0c03 	orr.w	ip, ip, r3
   1e298:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1e29c:	2900      	cmp	r1, #0
   1e29e:	d1f7      	bne.n	1e290 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e2a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1e2a4:	4a08      	ldr	r2, [pc, #32]	; (1e2c8 <compare_int_unlock+0x40>)
   1e2a6:	4083      	lsls	r3, r0
   1e2a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e2ac:	4b07      	ldr	r3, [pc, #28]	; (1e2cc <compare_int_unlock+0x44>)
   1e2ae:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e2b2:	40c3      	lsrs	r3, r0
   1e2b4:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e2b6:	bf42      	ittt	mi
   1e2b8:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1e2bc:	4b04      	ldrmi	r3, [pc, #16]	; (1e2d0 <compare_int_unlock+0x48>)
   1e2be:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e2c2:	4770      	bx	lr
   1e2c4:	200218c8 	.word	0x200218c8
   1e2c8:	40015000 	.word	0x40015000
   1e2cc:	200218c0 	.word	0x200218c0
   1e2d0:	e000e100 	.word	0xe000e100

0001e2d4 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e2d4:	2801      	cmp	r0, #1
{
   1e2d6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e2d8:	d909      	bls.n	1e2ee <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1e2da:	4907      	ldr	r1, [pc, #28]	; (1e2f8 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1e2dc:	4807      	ldr	r0, [pc, #28]	; (1e2fc <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1e2de:	237c      	movs	r3, #124	; 0x7c
   1e2e0:	4a07      	ldr	r2, [pc, #28]	; (1e300 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1e2e2:	f00c f9d6 	bl	2a692 <assert_print>
   1e2e6:	217c      	movs	r1, #124	; 0x7c
   1e2e8:	4805      	ldr	r0, [pc, #20]	; (1e300 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1e2ea:	f00c f9cb 	bl	2a684 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1e2ee:	0083      	lsls	r3, r0, #2
}
   1e2f0:	4804      	ldr	r0, [pc, #16]	; (1e304 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1e2f2:	4418      	add	r0, r3
   1e2f4:	bd08      	pop	{r3, pc}
   1e2f6:	bf00      	nop
   1e2f8:	000372e4 	.word	0x000372e4
   1e2fc:	00032629 	.word	0x00032629
   1e300:	000372b3 	.word	0x000372b3
   1e304:	40015140 	.word	0x40015140

0001e308 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e308:	2801      	cmp	r0, #1
{
   1e30a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e30c:	d909      	bls.n	1e322 <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1e30e:	4907      	ldr	r1, [pc, #28]	; (1e32c <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1e310:	4807      	ldr	r0, [pc, #28]	; (1e330 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1e312:	2383      	movs	r3, #131	; 0x83
   1e314:	4a07      	ldr	r2, [pc, #28]	; (1e334 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1e316:	f00c f9bc 	bl	2a692 <assert_print>
   1e31a:	2183      	movs	r1, #131	; 0x83
   1e31c:	4805      	ldr	r0, [pc, #20]	; (1e334 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1e31e:	f00c f9b1 	bl	2a684 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1e322:	2800      	cmp	r0, #0
}
   1e324:	4804      	ldr	r0, [pc, #16]	; (1e338 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1e326:	bf08      	it	eq
   1e328:	2000      	moveq	r0, #0
   1e32a:	bd08      	pop	{r3, pc}
   1e32c:	000372e4 	.word	0x000372e4
   1e330:	00032629 	.word	0x00032629
   1e334:	000372b3 	.word	0x000372b3
   1e338:	40015044 	.word	0x40015044

0001e33c <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e33c:	2801      	cmp	r0, #1
{
   1e33e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e340:	d909      	bls.n	1e356 <z_nrf_rtc_timer_compare_read+0x1a>
   1e342:	4908      	ldr	r1, [pc, #32]	; (1e364 <z_nrf_rtc_timer_compare_read+0x28>)
   1e344:	4808      	ldr	r0, [pc, #32]	; (1e368 <z_nrf_rtc_timer_compare_read+0x2c>)
   1e346:	23b9      	movs	r3, #185	; 0xb9
   1e348:	4a08      	ldr	r2, [pc, #32]	; (1e36c <z_nrf_rtc_timer_compare_read+0x30>)
   1e34a:	f00c f9a2 	bl	2a692 <assert_print>
   1e34e:	21b9      	movs	r1, #185	; 0xb9
   1e350:	4806      	ldr	r0, [pc, #24]	; (1e36c <z_nrf_rtc_timer_compare_read+0x30>)
   1e352:	f00c f997 	bl	2a684 <assert_post_action>
    return p_reg->CC[ch];
   1e356:	4b06      	ldr	r3, [pc, #24]	; (1e370 <z_nrf_rtc_timer_compare_read+0x34>)
   1e358:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e35c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1e360:	bd08      	pop	{r3, pc}
   1e362:	bf00      	nop
   1e364:	000372e4 	.word	0x000372e4
   1e368:	00032629 	.word	0x00032629
   1e36c:	000372b3 	.word	0x000372b3
   1e370:	40015000 	.word	0x40015000

0001e374 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e374:	4b0d      	ldr	r3, [pc, #52]	; (1e3ac <z_nrf_rtc_timer_read+0x38>)
   1e376:	6818      	ldr	r0, [r3, #0]
   1e378:	0a01      	lsrs	r1, r0, #8
   1e37a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e37c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1e380:	4b0b      	ldr	r3, [pc, #44]	; (1e3b0 <z_nrf_rtc_timer_read+0x3c>)
   1e382:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e386:	1818      	adds	r0, r3, r0
   1e388:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e38c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e390:	d20a      	bcs.n	1e3a8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e392:	4b08      	ldr	r3, [pc, #32]	; (1e3b4 <z_nrf_rtc_timer_read+0x40>)
   1e394:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e398:	4290      	cmp	r0, r2
   1e39a:	eb71 0303 	sbcs.w	r3, r1, r3
   1e39e:	d203      	bcs.n	1e3a8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e3a0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e3a4:	f141 0100 	adc.w	r1, r1, #0
}
   1e3a8:	4770      	bx	lr
   1e3aa:	bf00      	nop
   1e3ac:	200218cc 	.word	0x200218cc
   1e3b0:	40015000 	.word	0x40015000
   1e3b4:	2000a158 	.word	0x2000a158

0001e3b8 <compare_set>:
{
   1e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3bc:	b085      	sub	sp, #20
   1e3be:	4614      	mov	r4, r2
   1e3c0:	461d      	mov	r5, r3
   1e3c2:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1e3c4:	f7ff ff00 	bl	1e1c8 <compare_int_lock>
   1e3c8:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e3ca:	f7ff ffd3 	bl	1e374 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e3ce:	42a0      	cmp	r0, r4
   1e3d0:	eb71 0305 	sbcs.w	r3, r1, r5
   1e3d4:	f080 8086 	bcs.w	1e4e4 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e3d8:	4b49      	ldr	r3, [pc, #292]	; (1e500 <compare_set+0x148>)
   1e3da:	1a20      	subs	r0, r4, r0
   1e3dc:	eb65 0101 	sbc.w	r1, r5, r1
   1e3e0:	4298      	cmp	r0, r3
   1e3e2:	f171 0100 	sbcs.w	r1, r1, #0
   1e3e6:	f080 8088 	bcs.w	1e4fa <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1e3ea:	4b46      	ldr	r3, [pc, #280]	; (1e504 <compare_set+0x14c>)
   1e3ec:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1e3f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e3f4:	429d      	cmp	r5, r3
   1e3f6:	bf08      	it	eq
   1e3f8:	4294      	cmpeq	r4, r2
   1e3fa:	d05e      	beq.n	1e4ba <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e3fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1e400:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e404:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1e406:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1e40a:	f06f 0101 	mvn.w	r1, #1
   1e40e:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e412:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1e416:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1e41a:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e41e:	40bb      	lsls	r3, r7
   1e420:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e424:	fa1f f888 	uxth.w	r8, r8
   1e428:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1e42c:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1e42e:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e432:	4b35      	ldr	r3, [pc, #212]	; (1e508 <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e434:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1e438:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e43c:	eba0 000a 	sub.w	r0, r0, sl
   1e440:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e444:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1e448:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1e44a:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1e44e:	d107      	bne.n	1e460 <compare_set+0xa8>
   1e450:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1e452:	2013      	movs	r0, #19
   1e454:	f011 ff60 	bl	30318 <z_impl_k_busy_wait>
   1e458:	f06f 0101 	mvn.w	r1, #1
   1e45c:	4b2a      	ldr	r3, [pc, #168]	; (1e508 <compare_set+0x150>)
   1e45e:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1e460:	eba1 000a 	sub.w	r0, r1, sl
   1e464:	4430      	add	r0, r6
   1e466:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e46a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e46e:	f04f 0000 	mov.w	r0, #0
   1e472:	f8c8 0000 	str.w	r0, [r8]
   1e476:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1e47a:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1e47c:	bf88      	it	hi
   1e47e:	eb0a 060b 	addhi.w	r6, sl, fp
   1e482:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e486:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1e48a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e48e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1e492:	bf88      	it	hi
   1e494:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1e498:	4582      	cmp	sl, r0
   1e49a:	d006      	beq.n	1e4aa <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1e49c:	1a08      	subs	r0, r1, r0
   1e49e:	4430      	add	r0, r6
   1e4a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1e4a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e4a8:	d81a      	bhi.n	1e4e0 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1e4aa:	1ab6      	subs	r6, r6, r2
   1e4ac:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1e4b0:	1936      	adds	r6, r6, r4
   1e4b2:	f145 0300 	adc.w	r3, r5, #0
   1e4b6:	4634      	mov	r4, r6
   1e4b8:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1e4ba:	4912      	ldr	r1, [pc, #72]	; (1e504 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1e4bc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1e4be:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1e4c2:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1e4c6:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1e4c8:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1e4ca:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1e4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e4ce:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1e4d0:	4638      	mov	r0, r7
   1e4d2:	9901      	ldr	r1, [sp, #4]
   1e4d4:	f7ff fed8 	bl	1e288 <compare_int_unlock>
}
   1e4d8:	4620      	mov	r0, r4
   1e4da:	b005      	add	sp, #20
   1e4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4e0:	4630      	mov	r0, r6
   1e4e2:	e7a9      	b.n	1e438 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1e4e4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e4e6:	4a09      	ldr	r2, [pc, #36]	; (1e50c <compare_set+0x154>)
   1e4e8:	40bb      	lsls	r3, r7
   1e4ea:	e8d2 0fef 	ldaex	r0, [r2]
   1e4ee:	4318      	orrs	r0, r3
   1e4f0:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1e4f4:	2900      	cmp	r1, #0
   1e4f6:	d0e0      	beq.n	1e4ba <compare_set+0x102>
   1e4f8:	e7f7      	b.n	1e4ea <compare_set+0x132>
			return -EINVAL;
   1e4fa:	f06f 0415 	mvn.w	r4, #21
   1e4fe:	e7e7      	b.n	1e4d0 <compare_set+0x118>
   1e500:	01000001 	.word	0x01000001
   1e504:	2000a130 	.word	0x2000a130
   1e508:	40015000 	.word	0x40015000
   1e50c:	200218c0 	.word	0x200218c0

0001e510 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e510:	2801      	cmp	r0, #1
{
   1e512:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e514:	d00b      	beq.n	1e52e <z_nrf_rtc_timer_set+0x1e>
   1e516:	4908      	ldr	r1, [pc, #32]	; (1e538 <z_nrf_rtc_timer_set+0x28>)
   1e518:	4808      	ldr	r0, [pc, #32]	; (1e53c <z_nrf_rtc_timer_set+0x2c>)
   1e51a:	f240 1353 	movw	r3, #339	; 0x153
   1e51e:	4a08      	ldr	r2, [pc, #32]	; (1e540 <z_nrf_rtc_timer_set+0x30>)
   1e520:	f00c f8b7 	bl	2a692 <assert_print>
   1e524:	f240 1153 	movw	r1, #339	; 0x153
   1e528:	4805      	ldr	r0, [pc, #20]	; (1e540 <z_nrf_rtc_timer_set+0x30>)
   1e52a:	f00c f8ab 	bl	2a684 <assert_post_action>
}
   1e52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1e532:	f7ff bf41 	b.w	1e3b8 <compare_set>
   1e536:	bf00      	nop
   1e538:	00037300 	.word	0x00037300
   1e53c:	00032629 	.word	0x00032629
   1e540:	000372b3 	.word	0x000372b3

0001e544 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e544:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1e546:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1e54a:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e54c:	f04f 30ff 	mov.w	r0, #4294967295
   1e550:	f04f 31ff 	mov.w	r1, #4294967295
   1e554:	4c19      	ldr	r4, [pc, #100]	; (1e5bc <sys_clock_driver_init+0x78>)
   1e556:	4b1a      	ldr	r3, [pc, #104]	; (1e5c0 <sys_clock_driver_init+0x7c>)
   1e558:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1e55c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1e560:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1e564:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1e568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1e56c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e56e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e572:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1e576:	4b13      	ldr	r3, [pc, #76]	; (1e5c4 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e578:	2101      	movs	r1, #1
   1e57a:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1e57e:	2015      	movs	r0, #21
   1e580:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e584:	462a      	mov	r2, r5
   1e586:	f7f2 fa65 	bl	10a54 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e58a:	2015      	movs	r0, #21
   1e58c:	f7f2 fa32 	bl	109f4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e590:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e592:	2203      	movs	r2, #3
   1e594:	60a3      	str	r3, [r4, #8]
   1e596:	6023      	str	r3, [r4, #0]
   1e598:	4b0b      	ldr	r3, [pc, #44]	; (1e5c8 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e59a:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1e59c:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1e59e:	4b0b      	ldr	r3, [pc, #44]	; (1e5cc <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e5a0:	4a0b      	ldr	r2, [pc, #44]	; (1e5d0 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1e5a2:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e5a4:	4b0b      	ldr	r3, [pc, #44]	; (1e5d4 <sys_clock_driver_init+0x90>)
   1e5a6:	9501      	str	r5, [sp, #4]
   1e5a8:	9300      	str	r3, [sp, #0]
   1e5aa:	2300      	movs	r3, #0
   1e5ac:	f7ff ff04 	bl	1e3b8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e5b0:	4630      	mov	r0, r6
   1e5b2:	f7fd fce5 	bl	1bf80 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e5b6:	4628      	mov	r0, r5
   1e5b8:	b002      	add	sp, #8
   1e5ba:	bd70      	pop	{r4, r5, r6, pc}
   1e5bc:	40015000 	.word	0x40015000
   1e5c0:	2000a130 	.word	0x2000a130
   1e5c4:	e000e100 	.word	0xe000e100
   1e5c8:	200218c8 	.word	0x200218c8
   1e5cc:	200218c4 	.word	0x200218c4
   1e5d0:	007fffff 	.word	0x007fffff
   1e5d4:	0001e209 	.word	0x0001e209

0001e5d8 <rtc_nrf_isr>:
{
   1e5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1e5dc:	4b3f      	ldr	r3, [pc, #252]	; (1e6dc <rtc_nrf_isr+0x104>)
   1e5de:	b085      	sub	sp, #20
   1e5e0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e5e4:	0792      	lsls	r2, r2, #30
   1e5e6:	d50b      	bpl.n	1e600 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e5e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e5ec:	b142      	cbz	r2, 1e600 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e5ee:	2200      	movs	r2, #0
   1e5f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1e5f4:	4a3a      	ldr	r2, [pc, #232]	; (1e6e0 <rtc_nrf_isr+0x108>)
   1e5f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e5fa:	6813      	ldr	r3, [r2, #0]
   1e5fc:	3301      	adds	r3, #1
   1e5fe:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e600:	4d38      	ldr	r5, [pc, #224]	; (1e6e4 <rtc_nrf_isr+0x10c>)
   1e602:	2400      	movs	r4, #0
   1e604:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e606:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1e60a:	4e34      	ldr	r6, [pc, #208]	; (1e6dc <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1e60c:	f04f 0320 	mov.w	r3, #32
   1e610:	f3ef 8211 	mrs	r2, BASEPRI
   1e614:	f383 8812 	msr	BASEPRI_MAX, r3
   1e618:	f3bf 8f6f 	isb	sy
   1e61c:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1e620:	fa0b f904 	lsl.w	r9, fp, r4
   1e624:	ea19 0f03 	tst.w	r9, r3
   1e628:	d10a      	bne.n	1e640 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1e62a:	f382 8811 	msr	BASEPRI, r2
   1e62e:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e632:	3510      	adds	r5, #16
   1e634:	b114      	cbz	r4, 1e63c <rtc_nrf_isr+0x64>
}
   1e636:	b005      	add	sp, #20
   1e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e63c:	2401      	movs	r4, #1
   1e63e:	e7e5      	b.n	1e60c <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e640:	2301      	movs	r3, #1
   1e642:	40a3      	lsls	r3, r4
   1e644:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e646:	4928      	ldr	r1, [pc, #160]	; (1e6e8 <rtc_nrf_isr+0x110>)
   1e648:	e8d1 0fef 	ldaex	r0, [r1]
   1e64c:	ea00 0c03 	and.w	ip, r0, r3
   1e650:	e8c1 cfee 	stlex	lr, ip, [r1]
   1e654:	f1be 0f00 	cmp.w	lr, #0
   1e658:	d1f6      	bne.n	1e648 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e65a:	4b24      	ldr	r3, [pc, #144]	; (1e6ec <rtc_nrf_isr+0x114>)
   1e65c:	00a1      	lsls	r1, r4, #2
   1e65e:	b918      	cbnz	r0, 1e668 <rtc_nrf_isr+0x90>
   1e660:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1e664:	2800      	cmp	r0, #0
   1e666:	d0e0      	beq.n	1e62a <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e668:	f04f 0a00 	mov.w	sl, #0
   1e66c:	f841 a003 	str.w	sl, [r1, r3]
   1e670:	58cb      	ldr	r3, [r1, r3]
   1e672:	f382 8811 	msr	BASEPRI, r2
   1e676:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1e67a:	f7ff fe7b 	bl	1e374 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1e67e:	f04f 0320 	mov.w	r3, #32
   1e682:	f3ef 8c11 	mrs	ip, BASEPRI
   1e686:	f383 8812 	msr	BASEPRI_MAX, r3
   1e68a:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1e68e:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1e692:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1e696:	4290      	cmp	r0, r2
   1e698:	4199      	sbcs	r1, r3
   1e69a:	d204      	bcs.n	1e6a6 <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1e69c:	f38c 8811 	msr	BASEPRI, ip
   1e6a0:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e6a4:	e7c5      	b.n	1e632 <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1e6a6:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6aa:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1e6ae:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6b0:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1e6b4:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6b8:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1e6bc:	4907      	ldr	r1, [pc, #28]	; (1e6dc <rtc_nrf_isr+0x104>)
   1e6be:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1e6c2:	f38c 8811 	msr	BASEPRI, ip
   1e6c6:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e6ca:	f1b8 0f00 	cmp.w	r8, #0
   1e6ce:	d0b0      	beq.n	1e632 <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1e6d0:	9903      	ldr	r1, [sp, #12]
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	9100      	str	r1, [sp, #0]
   1e6d6:	47c0      	blx	r8
   1e6d8:	e7ab      	b.n	1e632 <rtc_nrf_isr+0x5a>
   1e6da:	bf00      	nop
   1e6dc:	40015000 	.word	0x40015000
   1e6e0:	200218cc 	.word	0x200218cc
   1e6e4:	2000a130 	.word	0x2000a130
   1e6e8:	200218c0 	.word	0x200218c0
   1e6ec:	40015140 	.word	0x40015140

0001e6f0 <z_nrf_rtc_timer_chan_alloc>:
{
   1e6f0:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1e6f2:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1e6f4:	4b0c      	ldr	r3, [pc, #48]	; (1e728 <z_nrf_rtc_timer_chan_alloc+0x38>)
   1e6f6:	6818      	ldr	r0, [r3, #0]
   1e6f8:	b190      	cbz	r0, 1e720 <z_nrf_rtc_timer_chan_alloc+0x30>
   1e6fa:	fab0 f080 	clz	r0, r0
   1e6fe:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1e702:	fa04 f100 	lsl.w	r1, r4, r0
   1e706:	43c9      	mvns	r1, r1
   1e708:	e8d3 2fef 	ldaex	r2, [r3]
   1e70c:	ea02 0501 	and.w	r5, r2, r1
   1e710:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1e714:	2e00      	cmp	r6, #0
   1e716:	d1f7      	bne.n	1e708 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1e718:	40c2      	lsrs	r2, r0
   1e71a:	07d2      	lsls	r2, r2, #31
   1e71c:	d5eb      	bpl.n	1e6f6 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1e71e:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1e720:	f06f 000b 	mvn.w	r0, #11
   1e724:	e7fb      	b.n	1e71e <z_nrf_rtc_timer_chan_alloc+0x2e>
   1e726:	bf00      	nop
   1e728:	200218c4 	.word	0x200218c4

0001e72c <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e72c:	2801      	cmp	r0, #1
{
   1e72e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e730:	d00b      	beq.n	1e74a <z_nrf_rtc_timer_chan_free+0x1e>
   1e732:	490b      	ldr	r1, [pc, #44]	; (1e760 <z_nrf_rtc_timer_chan_free+0x34>)
   1e734:	480b      	ldr	r0, [pc, #44]	; (1e764 <z_nrf_rtc_timer_chan_free+0x38>)
   1e736:	f240 2321 	movw	r3, #545	; 0x221
   1e73a:	4a0b      	ldr	r2, [pc, #44]	; (1e768 <z_nrf_rtc_timer_chan_free+0x3c>)
   1e73c:	f00b ffa9 	bl	2a692 <assert_print>
   1e740:	f240 2121 	movw	r1, #545	; 0x221
   1e744:	4808      	ldr	r0, [pc, #32]	; (1e768 <z_nrf_rtc_timer_chan_free+0x3c>)
   1e746:	f00b ff9d 	bl	2a684 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e74a:	4b08      	ldr	r3, [pc, #32]	; (1e76c <z_nrf_rtc_timer_chan_free+0x40>)
   1e74c:	e8d3 1fef 	ldaex	r1, [r3]
   1e750:	f041 0102 	orr.w	r1, r1, #2
   1e754:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e758:	2a00      	cmp	r2, #0
   1e75a:	d1f7      	bne.n	1e74c <z_nrf_rtc_timer_chan_free+0x20>
}
   1e75c:	bd08      	pop	{r3, pc}
   1e75e:	bf00      	nop
   1e760:	00037300 	.word	0x00037300
   1e764:	00032629 	.word	0x00032629
   1e768:	000372b3 	.word	0x000372b3
   1e76c:	200218c4 	.word	0x200218c4

0001e770 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e770:	1c43      	adds	r3, r0, #1
{
   1e772:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e774:	d020      	beq.n	1e7b8 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e776:	2801      	cmp	r0, #1
   1e778:	dd20      	ble.n	1e7bc <sys_clock_set_timeout+0x4c>
   1e77a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e77e:	da1f      	bge.n	1e7c0 <sys_clock_set_timeout+0x50>
   1e780:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e782:	f7ff fdf7 	bl	1e374 <z_nrf_rtc_timer_read>
   1e786:	4b0f      	ldr	r3, [pc, #60]	; (1e7c4 <sys_clock_set_timeout+0x54>)
   1e788:	e9d3 1300 	ldrd	r1, r3, [r3]
   1e78c:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1e78e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1e792:	bf28      	it	cs
   1e794:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1e796:	480c      	ldr	r0, [pc, #48]	; (1e7c8 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e798:	3201      	adds	r2, #1
   1e79a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1e79c:	4282      	cmp	r2, r0
   1e79e:	bf28      	it	cs
   1e7a0:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1e7a2:	2000      	movs	r0, #0
   1e7a4:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e7a6:	4909      	ldr	r1, [pc, #36]	; (1e7cc <sys_clock_set_timeout+0x5c>)
   1e7a8:	9001      	str	r0, [sp, #4]
   1e7aa:	9100      	str	r1, [sp, #0]
   1e7ac:	f143 0300 	adc.w	r3, r3, #0
   1e7b0:	f7ff fe02 	bl	1e3b8 <compare_set>
}
   1e7b4:	b002      	add	sp, #8
   1e7b6:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e7b8:	4803      	ldr	r0, [pc, #12]	; (1e7c8 <sys_clock_set_timeout+0x58>)
   1e7ba:	e7e1      	b.n	1e780 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e7bc:	2400      	movs	r4, #0
   1e7be:	e7e0      	b.n	1e782 <sys_clock_set_timeout+0x12>
   1e7c0:	4c01      	ldr	r4, [pc, #4]	; (1e7c8 <sys_clock_set_timeout+0x58>)
   1e7c2:	e7de      	b.n	1e782 <sys_clock_set_timeout+0x12>
   1e7c4:	2000a150 	.word	0x2000a150
   1e7c8:	007fffff 	.word	0x007fffff
   1e7cc:	0001e209 	.word	0x0001e209

0001e7d0 <sys_clock_elapsed>:
{
   1e7d0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e7d2:	f7ff fdcf 	bl	1e374 <z_nrf_rtc_timer_read>
   1e7d6:	4b02      	ldr	r3, [pc, #8]	; (1e7e0 <sys_clock_elapsed+0x10>)
   1e7d8:	681b      	ldr	r3, [r3, #0]
}
   1e7da:	1ac0      	subs	r0, r0, r3
   1e7dc:	bd08      	pop	{r3, pc}
   1e7de:	bf00      	nop
   1e7e0:	2000a150 	.word	0x2000a150

0001e7e4 <nrf_gpio_pin_port_decode>:
{
   1e7e4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e7e6:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1e7e8:	095a      	lsrs	r2, r3, #5
   1e7ea:	d00d      	beq.n	1e808 <nrf_gpio_pin_port_decode+0x24>
   1e7ec:	2a01      	cmp	r2, #1
   1e7ee:	d013      	beq.n	1e818 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e7f0:	490e      	ldr	r1, [pc, #56]	; (1e82c <nrf_gpio_pin_port_decode+0x48>)
   1e7f2:	480f      	ldr	r0, [pc, #60]	; (1e830 <nrf_gpio_pin_port_decode+0x4c>)
   1e7f4:	f240 2347 	movw	r3, #583	; 0x247
   1e7f8:	4a0e      	ldr	r2, [pc, #56]	; (1e834 <nrf_gpio_pin_port_decode+0x50>)
   1e7fa:	f00b ff4a 	bl	2a692 <assert_print>
   1e7fe:	f240 2147 	movw	r1, #583	; 0x247
   1e802:	480c      	ldr	r0, [pc, #48]	; (1e834 <nrf_gpio_pin_port_decode+0x50>)
   1e804:	f00b ff3e 	bl	2a684 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1e808:	f04f 32ff 	mov.w	r2, #4294967295
   1e80c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e810:	07d9      	lsls	r1, r3, #31
   1e812:	d5ed      	bpl.n	1e7f0 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1e814:	4808      	ldr	r0, [pc, #32]	; (1e838 <nrf_gpio_pin_port_decode+0x54>)
   1e816:	e008      	b.n	1e82a <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1e818:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1e81c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e820:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e822:	07d2      	lsls	r2, r2, #31
   1e824:	d5e4      	bpl.n	1e7f0 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1e826:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1e828:	4804      	ldr	r0, [pc, #16]	; (1e83c <nrf_gpio_pin_port_decode+0x58>)
}
   1e82a:	bd08      	pop	{r3, pc}
   1e82c:	00036bd3 	.word	0x00036bd3
   1e830:	00032629 	.word	0x00032629
   1e834:	00036ba0 	.word	0x00036ba0
   1e838:	40842500 	.word	0x40842500
   1e83c:	40842800 	.word	0x40842800

0001e840 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1e840:	b510      	push	{r4, lr}
   1e842:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1e844:	6902      	ldr	r2, [r0, #16]
{
   1e846:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   1e848:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1e84c:	4925      	ldr	r1, [pc, #148]	; (1e8e4 <mbox_nrf_init+0xa4>)
   1e84e:	2000      	movs	r0, #0
   1e850:	f001 f806 	bl	1f860 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1e854:	2200      	movs	r2, #0
   1e856:	2101      	movs	r1, #1
   1e858:	202a      	movs	r0, #42	; 0x2a
   1e85a:	f7f2 f8fb 	bl	10a54 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1e85e:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1e860:	2284      	movs	r2, #132	; 0x84
   1e862:	2100      	movs	r1, #0
   1e864:	a807      	add	r0, sp, #28
   1e866:	f011 fea8 	bl	305ba <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1e86a:	6863      	ldr	r3, [r4, #4]
   1e86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e870:	d30a      	bcc.n	1e888 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1e872:	4b1d      	ldr	r3, [pc, #116]	; (1e8e8 <mbox_nrf_init+0xa8>)
   1e874:	9305      	str	r3, [sp, #20]
   1e876:	2302      	movs	r3, #2
   1e878:	9304      	str	r3, [sp, #16]
   1e87a:	2300      	movs	r3, #0
   1e87c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e880:	481a      	ldr	r0, [pc, #104]	; (1e8ec <mbox_nrf_init+0xac>)
   1e882:	aa04      	add	r2, sp, #16
   1e884:	f7ef fff0 	bl	e868 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1e888:	6823      	ldr	r3, [r4, #0]
   1e88a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e88e:	d30a      	bcc.n	1e8a6 <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1e890:	4b17      	ldr	r3, [pc, #92]	; (1e8f0 <mbox_nrf_init+0xb0>)
   1e892:	9305      	str	r3, [sp, #20]
   1e894:	2302      	movs	r3, #2
   1e896:	9304      	str	r3, [sp, #16]
   1e898:	2300      	movs	r3, #0
   1e89a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e89e:	4813      	ldr	r0, [pc, #76]	; (1e8ec <mbox_nrf_init+0xac>)
   1e8a0:	aa04      	add	r2, sp, #16
   1e8a2:	f7ef ffe1 	bl	e868 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   1e8a6:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1e8a8:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1e8aa:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8ac:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   1e8ae:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8b0:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1e8b2:	40d9      	lsrs	r1, r3
   1e8b4:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1e8b6:	bf44      	itt	mi
   1e8b8:	fa00 f103 	lslmi.w	r1, r0, r3
   1e8bc:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1e8c0:	6821      	ldr	r1, [r4, #0]
   1e8c2:	40d9      	lsrs	r1, r3
   1e8c4:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1e8c6:	bf48      	it	mi
   1e8c8:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8cc:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1e8d0:	bf48      	it	mi
   1e8d2:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8d4:	2b10      	cmp	r3, #16
   1e8d6:	d1ea      	bne.n	1e8ae <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   1e8d8:	a807      	add	r0, sp, #28
   1e8da:	f000 ffd9 	bl	1f890 <nrfx_ipc_config_load>

	return 0;
}
   1e8de:	2000      	movs	r0, #0
   1e8e0:	b028      	add	sp, #160	; 0xa0
   1e8e2:	bd10      	pop	{r4, pc}
   1e8e4:	0001e9e9 	.word	0x0001e9e9
   1e8e8:	0003731b 	.word	0x0003731b
   1e8ec:	0003155c 	.word	0x0003155c
   1e8f0:	00037347 	.word	0x00037347

0001e8f4 <mbox_nrf_set_enabled>:
{
   1e8f4:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e8f6:	290f      	cmp	r1, #15
{
   1e8f8:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1e8fa:	6905      	ldr	r5, [r0, #16]
{
   1e8fc:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e8fe:	d842      	bhi.n	1e986 <mbox_nrf_set_enabled+0x92>
   1e900:	6843      	ldr	r3, [r0, #4]
   1e902:	681b      	ldr	r3, [r3, #0]
   1e904:	40cb      	lsrs	r3, r1
   1e906:	07db      	lsls	r3, r3, #31
   1e908:	d53d      	bpl.n	1e986 <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1e90a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e90e:	40cb      	lsrs	r3, r1
   1e910:	f003 0301 	and.w	r3, r3, #1
   1e914:	b91a      	cbnz	r2, 1e91e <mbox_nrf_set_enabled+0x2a>
   1e916:	bb13      	cbnz	r3, 1e95e <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   1e918:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e91c:	e031      	b.n	1e982 <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1e91e:	2b00      	cmp	r3, #0
   1e920:	d1fa      	bne.n	1e918 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1e922:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1e926:	b94b      	cbnz	r3, 1e93c <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   1e928:	4a18      	ldr	r2, [pc, #96]	; (1e98c <mbox_nrf_set_enabled+0x98>)
   1e92a:	9205      	str	r2, [sp, #20]
   1e92c:	2202      	movs	r2, #2
   1e92e:	9204      	str	r2, [sp, #16]
   1e930:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e934:	4816      	ldr	r0, [pc, #88]	; (1e990 <mbox_nrf_set_enabled+0x9c>)
   1e936:	aa04      	add	r2, sp, #16
   1e938:	f7ef ff96 	bl	e868 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   1e93c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e940:	b913      	cbnz	r3, 1e948 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   1e942:	202a      	movs	r0, #42	; 0x2a
   1e944:	f7f2 f856 	bl	109f4 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1e948:	2201      	movs	r2, #1
   1e94a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e94e:	40a2      	lsls	r2, r4
   1e950:	4313      	orrs	r3, r2
   1e952:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1e956:	b2e0      	uxtb	r0, r4
   1e958:	f000 ffdc 	bl	1f914 <nrfx_ipc_receive_event_enable>
   1e95c:	e00a      	b.n	1e974 <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   1e95e:	b2c8      	uxtb	r0, r1
   1e960:	f000 fff6 	bl	1f950 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1e964:	2201      	movs	r2, #1
   1e966:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e96a:	40a2      	lsls	r2, r4
   1e96c:	ea23 0302 	bic.w	r3, r3, r2
   1e970:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1e974:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e978:	b913      	cbnz	r3, 1e980 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   1e97a:	202a      	movs	r0, #42	; 0x2a
   1e97c:	f7f2 f848 	bl	10a10 <arch_irq_disable>
	return 0;
   1e980:	2000      	movs	r0, #0
}
   1e982:	b007      	add	sp, #28
   1e984:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e986:	f06f 0015 	mvn.w	r0, #21
   1e98a:	e7fa      	b.n	1e982 <mbox_nrf_set_enabled+0x8e>
   1e98c:	00037373 	.word	0x00037373
   1e990:	0003155c 	.word	0x0003155c

0001e994 <mbox_nrf_send>:
{
   1e994:	b530      	push	{r4, r5, lr}
   1e996:	4605      	mov	r5, r0
   1e998:	460c      	mov	r4, r1
   1e99a:	b087      	sub	sp, #28
	if (msg) {
   1e99c:	b152      	cbz	r2, 1e9b4 <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   1e99e:	4b10      	ldr	r3, [pc, #64]	; (1e9e0 <mbox_nrf_send+0x4c>)
   1e9a0:	9305      	str	r3, [sp, #20]
   1e9a2:	2302      	movs	r3, #2
   1e9a4:	9304      	str	r3, [sp, #16]
   1e9a6:	2300      	movs	r3, #0
   1e9a8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e9ac:	480d      	ldr	r0, [pc, #52]	; (1e9e4 <mbox_nrf_send+0x50>)
   1e9ae:	aa04      	add	r2, sp, #16
   1e9b0:	f7ef ff5a 	bl	e868 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1e9b4:	2c0f      	cmp	r4, #15
   1e9b6:	d80f      	bhi.n	1e9d8 <mbox_nrf_send+0x44>
   1e9b8:	686b      	ldr	r3, [r5, #4]
   1e9ba:	685b      	ldr	r3, [r3, #4]
   1e9bc:	40e3      	lsrs	r3, r4
   1e9be:	07db      	lsls	r3, r3, #31
   1e9c0:	d50a      	bpl.n	1e9d8 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9c2:	2301      	movs	r3, #1
	return 0;
   1e9c4:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1e9c6:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9c8:	b2e4      	uxtb	r4, r4
   1e9ca:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1e9ce:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1e9d2:	6023      	str	r3, [r4, #0]
}
   1e9d4:	b007      	add	sp, #28
   1e9d6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e9d8:	f06f 0015 	mvn.w	r0, #21
   1e9dc:	e7fa      	b.n	1e9d4 <mbox_nrf_send+0x40>
   1e9de:	bf00      	nop
   1e9e0:	000373a3 	.word	0x000373a3
   1e9e4:	0003155c 	.word	0x0003155c

0001e9e8 <mbox_dispatcher>:
{
   1e9e8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1e9ea:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e9ee:	280f      	cmp	r0, #15
{
   1e9f0:	4604      	mov	r4, r0
   1e9f2:	460d      	mov	r5, r1
   1e9f4:	6873      	ldr	r3, [r6, #4]
   1e9f6:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e9f8:	d803      	bhi.n	1ea02 <mbox_dispatcher+0x1a>
   1e9fa:	681b      	ldr	r3, [r3, #0]
   1e9fc:	40c3      	lsrs	r3, r0
   1e9fe:	07db      	lsls	r3, r3, #31
   1ea00:	d40a      	bmi.n	1ea18 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   1ea02:	4b15      	ldr	r3, [pc, #84]	; (1ea58 <mbox_dispatcher+0x70>)
   1ea04:	9305      	str	r3, [sp, #20]
   1ea06:	2302      	movs	r3, #2
   1ea08:	9304      	str	r3, [sp, #16]
   1ea0a:	2300      	movs	r3, #0
   1ea0c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ea10:	4812      	ldr	r0, [pc, #72]	; (1ea5c <mbox_dispatcher+0x74>)
   1ea12:	aa04      	add	r2, sp, #16
   1ea14:	f7ef ff28 	bl	e868 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   1ea18:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1ea1c:	40e3      	lsrs	r3, r4
   1ea1e:	f013 0301 	ands.w	r3, r3, #1
   1ea22:	d109      	bne.n	1ea38 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   1ea24:	4a0e      	ldr	r2, [pc, #56]	; (1ea60 <mbox_dispatcher+0x78>)
   1ea26:	9205      	str	r2, [sp, #20]
   1ea28:	2202      	movs	r2, #2
   1ea2a:	9204      	str	r2, [sp, #16]
   1ea2c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ea30:	480a      	ldr	r0, [pc, #40]	; (1ea5c <mbox_dispatcher+0x74>)
   1ea32:	aa04      	add	r2, sp, #16
   1ea34:	f7ef ff18 	bl	e868 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   1ea38:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1ea3c:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1ea40:	b145      	cbz	r5, 1ea54 <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1ea42:	2300      	movs	r3, #0
   1ea44:	4621      	mov	r1, r4
   1ea46:	4630      	mov	r0, r6
   1ea48:	46ac      	mov	ip, r5
   1ea4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1ea4c:	b006      	add	sp, #24
   1ea4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1ea52:	4760      	bx	ip
}
   1ea54:	b006      	add	sp, #24
   1ea56:	bd70      	pop	{r4, r5, r6, pc}
   1ea58:	000373be 	.word	0x000373be
   1ea5c:	0003155c 	.word	0x0003155c
   1ea60:	000373da 	.word	0x000373da

0001ea64 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1ea64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1ea66:	f7ef fd99 	bl	e59c <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1ea6a:	4b07      	ldr	r3, [pc, #28]	; (1ea88 <k_sys_fatal_error_handler+0x24>)
   1ea6c:	9305      	str	r3, [sp, #20]
   1ea6e:	2302      	movs	r3, #2
   1ea70:	9304      	str	r3, [sp, #16]
   1ea72:	4806      	ldr	r0, [pc, #24]	; (1ea8c <k_sys_fatal_error_handler+0x28>)
   1ea74:	2300      	movs	r3, #0
   1ea76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ea7a:	aa04      	add	r2, sp, #16
   1ea7c:	f7ef fef4 	bl	e868 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1ea80:	2000      	movs	r0, #0
   1ea82:	f7f2 fc75 	bl	11370 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1ea86:	bf00      	nop
   1ea88:	00037424 	.word	0x00037424
   1ea8c:	0003151c 	.word	0x0003151c

0001ea90 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1ea90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea94:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1ea96:	4b15      	ldr	r3, [pc, #84]	; (1eaec <tfm_ns_interface_dispatch+0x5c>)
   1ea98:	4604      	mov	r4, r0
   1ea9a:	f893 8000 	ldrb.w	r8, [r3]
   1ea9e:	460d      	mov	r5, r1
   1eaa0:	4616      	mov	r6, r2
   1eaa2:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1eaa4:	f1b8 0f00 	cmp.w	r8, #0
   1eaa8:	d115      	bne.n	1ead6 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1eaaa:	4668      	mov	r0, sp
   1eaac:	f00d f943 	bl	2bd36 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1eab0:	463a      	mov	r2, r7
   1eab2:	4631      	mov	r1, r6
   1eab4:	4628      	mov	r0, r5
   1eab6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1eab8:	47a0      	blx	r4
   1eaba:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1eabc:	4668      	mov	r0, sp
   1eabe:	f00d f93b 	bl	2bd38 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1eac2:	f1b8 0f00 	cmp.w	r8, #0
   1eac6:	d002      	beq.n	1eace <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1eac8:	4809      	ldr	r0, [pc, #36]	; (1eaf0 <tfm_ns_interface_dispatch+0x60>)
   1eaca:	f006 fbd7 	bl	2527c <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1eace:	4620      	mov	r0, r4
   1ead0:	b022      	add	sp, #136	; 0x88
   1ead2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1ead6:	f04f 32ff 	mov.w	r2, #4294967295
   1eada:	f04f 33ff 	mov.w	r3, #4294967295
   1eade:	4804      	ldr	r0, [pc, #16]	; (1eaf0 <tfm_ns_interface_dispatch+0x60>)
   1eae0:	f006 fafc 	bl	250dc <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1eae4:	2800      	cmp	r0, #0
   1eae6:	d0e0      	beq.n	1eaaa <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1eae8:	241f      	movs	r4, #31
   1eaea:	e7f0      	b.n	1eace <tfm_ns_interface_dispatch+0x3e>
   1eaec:	20022827 	.word	0x20022827
   1eaf0:	20008b90 	.word	0x20008b90

0001eaf4 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1eaf4:	b530      	push	{r4, r5, lr}
   1eaf6:	b095      	sub	sp, #84	; 0x54
   1eaf8:	4605      	mov	r5, r0
   1eafa:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1eafc:	2230      	movs	r2, #48	; 0x30
   1eafe:	2100      	movs	r1, #0
   1eb00:	a808      	add	r0, sp, #32
   1eb02:	f011 fd5a 	bl	305ba <memset>
   1eb06:	233f      	movs	r3, #63	; 0x3f
   1eb08:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1eb0a:	ab07      	add	r3, sp, #28
   1eb0c:	9303      	str	r3, [sp, #12]
   1eb0e:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1eb10:	9406      	str	r4, [sp, #24]
   1eb12:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1eb16:	b154      	cbz	r4, 1eb2e <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1eb18:	2301      	movs	r3, #1
   1eb1a:	aa05      	add	r2, sp, #20
   1eb1c:	9200      	str	r2, [sp, #0]
   1eb1e:	2100      	movs	r1, #0
   1eb20:	4804      	ldr	r0, [pc, #16]	; (1eb34 <psa_generate_random+0x40>)
   1eb22:	9301      	str	r3, [sp, #4]
   1eb24:	aa03      	add	r2, sp, #12
   1eb26:	f000 f807 	bl	1eb38 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1eb2a:	b015      	add	sp, #84	; 0x54
   1eb2c:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1eb2e:	4620      	mov	r0, r4
   1eb30:	e7fb      	b.n	1eb2a <psa_generate_random+0x36>
   1eb32:	bf00      	nop
   1eb34:	40000100 	.word	0x40000100

0001eb38 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1eb38:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1eb3a:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1eb3e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1eb42:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1eb44:	d20d      	bcs.n	1eb62 <psa_call+0x2a>
        (type < INT16_MIN) ||
   1eb46:	ea43 0504 	orr.w	r5, r3, r4
   1eb4a:	2dff      	cmp	r5, #255	; 0xff
   1eb4c:	d809      	bhi.n	1eb62 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1eb4e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1eb52:	4613      	mov	r3, r2
   1eb54:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1eb58:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1eb5a:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1eb5c:	4803      	ldr	r0, [pc, #12]	; (1eb6c <psa_call+0x34>)
   1eb5e:	f7ff bf97 	b.w	1ea90 <tfm_ns_interface_dispatch>
}
   1eb62:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1eb66:	bc30      	pop	{r4, r5}
   1eb68:	4770      	bx	lr
   1eb6a:	bf00      	nop
   1eb6c:	00007c21 	.word	0x00007c21

0001eb70 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1eb70:	2300      	movs	r3, #0
{
   1eb72:	b507      	push	{r0, r1, r2, lr}
   1eb74:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1eb76:	9300      	str	r3, [sp, #0]
   1eb78:	4601      	mov	r1, r0
   1eb7a:	4803      	ldr	r0, [pc, #12]	; (1eb88 <psa_connect+0x18>)
   1eb7c:	f7ff ff88 	bl	1ea90 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1eb80:	b003      	add	sp, #12
   1eb82:	f85d fb04 	ldr.w	pc, [sp], #4
   1eb86:	bf00      	nop
   1eb88:	00007c19 	.word	0x00007c19

0001eb8c <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1eb8c:	2300      	movs	r3, #0
{
   1eb8e:	b507      	push	{r0, r1, r2, lr}
   1eb90:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1eb92:	461a      	mov	r2, r3
   1eb94:	9300      	str	r3, [sp, #0]
   1eb96:	4803      	ldr	r0, [pc, #12]	; (1eba4 <psa_close+0x18>)
   1eb98:	f7ff ff7a 	bl	1ea90 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1eb9c:	b003      	add	sp, #12
   1eb9e:	f85d fb04 	ldr.w	pc, [sp], #4
   1eba2:	bf00      	nop
   1eba4:	00007c11 	.word	0x00007c11

0001eba8 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1eba8:	4b04      	ldr	r3, [pc, #16]	; (1ebbc <SystemCoreClockUpdate+0x14>)
   1ebaa:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1ebae:	4b04      	ldr	r3, [pc, #16]	; (1ebc0 <SystemCoreClockUpdate+0x18>)
   1ebb0:	f002 0203 	and.w	r2, r2, #3
   1ebb4:	40d3      	lsrs	r3, r2
   1ebb6:	4a03      	ldr	r2, [pc, #12]	; (1ebc4 <SystemCoreClockUpdate+0x1c>)
   1ebb8:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1ebba:	4770      	bx	lr
   1ebbc:	40005000 	.word	0x40005000
   1ebc0:	07a12000 	.word	0x07a12000
   1ebc4:	20008694 	.word	0x20008694

0001ebc8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1ebc8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ebca:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1ebcc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1ebce:	fab2 f382 	clz	r3, r2
   1ebd2:	f1c3 031f 	rsb	r3, r3, #31
   1ebd6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ebd8:	fa05 f403 	lsl.w	r4, r5, r3
   1ebdc:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ebe0:	e8d0 6fef 	ldaex	r6, [r0]
   1ebe4:	4296      	cmp	r6, r2
   1ebe6:	d104      	bne.n	1ebf2 <nrfx_flag32_alloc+0x2a>
   1ebe8:	e8c0 4fec 	stlex	ip, r4, [r0]
   1ebec:	f1bc 0f00 	cmp.w	ip, #0
   1ebf0:	d1f6      	bne.n	1ebe0 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ebf2:	d1eb      	bne.n	1ebcc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1ebf4:	4801      	ldr	r0, [pc, #4]	; (1ebfc <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1ebf6:	700b      	strb	r3, [r1, #0]
}
   1ebf8:	bd70      	pop	{r4, r5, r6, pc}
   1ebfa:	bf00      	nop
   1ebfc:	0bad0000 	.word	0x0bad0000

0001ec00 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1ec00:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1ec02:	6803      	ldr	r3, [r0, #0]
   1ec04:	40cb      	lsrs	r3, r1
   1ec06:	07db      	lsls	r3, r3, #31
   1ec08:	d410      	bmi.n	1ec2c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1ec0a:	2301      	movs	r3, #1
   1ec0c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1ec0e:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1ec10:	ea43 0102 	orr.w	r1, r3, r2
   1ec14:	e8d0 4fef 	ldaex	r4, [r0]
   1ec18:	4294      	cmp	r4, r2
   1ec1a:	d104      	bne.n	1ec26 <nrfx_flag32_free+0x26>
   1ec1c:	e8c0 1fec 	stlex	ip, r1, [r0]
   1ec20:	f1bc 0f00 	cmp.w	ip, #0
   1ec24:	d1f6      	bne.n	1ec14 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ec26:	d1f2      	bne.n	1ec0e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1ec28:	4801      	ldr	r0, [pc, #4]	; (1ec30 <nrfx_flag32_free+0x30>)
}
   1ec2a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ec2c:	4801      	ldr	r0, [pc, #4]	; (1ec34 <nrfx_flag32_free+0x34>)
   1ec2e:	e7fc      	b.n	1ec2a <nrfx_flag32_free+0x2a>
   1ec30:	0bad0000 	.word	0x0bad0000
   1ec34:	0bad0004 	.word	0x0bad0004

0001ec38 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1ec38:	2200      	movs	r2, #0
{
   1ec3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ec3c:	4b62      	ldr	r3, [pc, #392]	; (1edc8 <clock_stop+0x190>)
    switch (domain)
   1ec3e:	2803      	cmp	r0, #3
   1ec40:	d838      	bhi.n	1ecb4 <clock_stop+0x7c>
   1ec42:	e8df f000 	tbb	[pc, r0]
   1ec46:	0d02      	.short	0x0d02
   1ec48:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1ec4a:	2102      	movs	r1, #2
   1ec4c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ec54:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec58:	2201      	movs	r2, #1
   1ec5a:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1ec5c:	2400      	movs	r4, #0
   1ec5e:	e009      	b.n	1ec74 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1ec60:	2101      	movs	r1, #1
   1ec62:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ec6a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1ec6e:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec72:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1ec74:	2301      	movs	r3, #1
   1ec76:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1ec7a:	2803      	cmp	r0, #3
   1ec7c:	f200 8093 	bhi.w	1eda6 <clock_stop+0x16e>
   1ec80:	e8df f000 	tbb	[pc, r0]
   1ec84:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1ec88:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ec8c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec90:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ec94:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec98:	2201      	movs	r2, #1
   1ec9a:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1ec9c:	e7de      	b.n	1ec5c <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1ec9e:	f44f 7180 	mov.w	r1, #256	; 0x100
   1eca2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eca6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ecaa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecae:	2201      	movs	r2, #1
   1ecb0:	61da      	str	r2, [r3, #28]
   1ecb2:	e7d3      	b.n	1ec5c <clock_stop+0x24>
            NRFX_ASSERT(0);
   1ecb4:	4945      	ldr	r1, [pc, #276]	; (1edcc <clock_stop+0x194>)
   1ecb6:	4846      	ldr	r0, [pc, #280]	; (1edd0 <clock_stop+0x198>)
   1ecb8:	23d8      	movs	r3, #216	; 0xd8
   1ecba:	4a46      	ldr	r2, [pc, #280]	; (1edd4 <clock_stop+0x19c>)
   1ecbc:	f00b fce9 	bl	2a692 <assert_print>
   1ecc0:	21d8      	movs	r1, #216	; 0xd8
   1ecc2:	4844      	ldr	r0, [pc, #272]	; (1edd4 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1ecc4:	f00b fcde 	bl	2a684 <assert_post_action>
    switch (domain)
   1ecc8:	f242 7510 	movw	r5, #10000	; 0x2710
   1eccc:	4e3e      	ldr	r6, [pc, #248]	; (1edc8 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ecce:	b194      	cbz	r4, 1ecf6 <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ecd0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ecd4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1ecd8:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ecda:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ecde:	03d9      	lsls	r1, r3, #15
   1ece0:	d507      	bpl.n	1ecf2 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1ece2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ece6:	2801      	cmp	r0, #1
   1ece8:	d103      	bne.n	1ecf2 <clock_stop+0xba>
   1ecea:	f00f fecb 	bl	2ea84 <nrfx_busy_wait>
   1ecee:	3d01      	subs	r5, #1
   1ecf0:	d1ed      	bne.n	1ecce <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1ecf2:	b002      	add	sp, #8
   1ecf4:	bd70      	pop	{r4, r5, r6, pc}
   1ecf6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ecfa:	03da      	lsls	r2, r3, #15
   1ecfc:	d5f9      	bpl.n	1ecf2 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1ecfe:	2001      	movs	r0, #1
   1ed00:	f00f fec0 	bl	2ea84 <nrfx_busy_wait>
   1ed04:	3d01      	subs	r5, #1
   1ed06:	d1f6      	bne.n	1ecf6 <clock_stop+0xbe>
   1ed08:	e7f3      	b.n	1ecf2 <clock_stop+0xba>
    switch (domain)
   1ed0a:	f242 7510 	movw	r5, #10000	; 0x2710
   1ed0e:	4e2e      	ldr	r6, [pc, #184]	; (1edc8 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ed10:	b18c      	cbz	r4, 1ed36 <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ed12:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed16:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1ed1a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ed1c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed20:	03db      	lsls	r3, r3, #15
   1ed22:	d5e6      	bpl.n	1ecf2 <clock_stop+0xba>
   1ed24:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ed28:	2801      	cmp	r0, #1
   1ed2a:	d1e2      	bne.n	1ecf2 <clock_stop+0xba>
   1ed2c:	f00f feaa 	bl	2ea84 <nrfx_busy_wait>
   1ed30:	3d01      	subs	r5, #1
   1ed32:	d1ed      	bne.n	1ed10 <clock_stop+0xd8>
   1ed34:	e7dd      	b.n	1ecf2 <clock_stop+0xba>
   1ed36:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed3a:	03d8      	lsls	r0, r3, #15
   1ed3c:	d5d9      	bpl.n	1ecf2 <clock_stop+0xba>
   1ed3e:	2001      	movs	r0, #1
   1ed40:	f00f fea0 	bl	2ea84 <nrfx_busy_wait>
   1ed44:	3d01      	subs	r5, #1
   1ed46:	d1f6      	bne.n	1ed36 <clock_stop+0xfe>
   1ed48:	e7d3      	b.n	1ecf2 <clock_stop+0xba>
    switch (domain)
   1ed4a:	f242 7510 	movw	r5, #10000	; 0x2710
   1ed4e:	4e1e      	ldr	r6, [pc, #120]	; (1edc8 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ed50:	b18c      	cbz	r4, 1ed76 <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1ed52:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ed56:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1ed5a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1ed5c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ed60:	03d9      	lsls	r1, r3, #15
   1ed62:	d5c6      	bpl.n	1ecf2 <clock_stop+0xba>
   1ed64:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ed68:	2801      	cmp	r0, #1
   1ed6a:	d1c2      	bne.n	1ecf2 <clock_stop+0xba>
   1ed6c:	f00f fe8a 	bl	2ea84 <nrfx_busy_wait>
   1ed70:	3d01      	subs	r5, #1
   1ed72:	d1ed      	bne.n	1ed50 <clock_stop+0x118>
   1ed74:	e7bd      	b.n	1ecf2 <clock_stop+0xba>
   1ed76:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ed7a:	03da      	lsls	r2, r3, #15
   1ed7c:	d5b9      	bpl.n	1ecf2 <clock_stop+0xba>
   1ed7e:	2001      	movs	r0, #1
   1ed80:	f00f fe80 	bl	2ea84 <nrfx_busy_wait>
   1ed84:	3d01      	subs	r5, #1
   1ed86:	d1f6      	bne.n	1ed76 <clock_stop+0x13e>
   1ed88:	e7b3      	b.n	1ecf2 <clock_stop+0xba>
    switch (domain)
   1ed8a:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1ed8e:	4e0e      	ldr	r6, [pc, #56]	; (1edc8 <clock_stop+0x190>)
   1ed90:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1ed94:	03db      	lsls	r3, r3, #15
   1ed96:	d5ac      	bpl.n	1ecf2 <clock_stop+0xba>
   1ed98:	b984      	cbnz	r4, 1edbc <clock_stop+0x184>
   1ed9a:	2001      	movs	r0, #1
   1ed9c:	f00f fe72 	bl	2ea84 <nrfx_busy_wait>
   1eda0:	3d01      	subs	r5, #1
   1eda2:	d1f5      	bne.n	1ed90 <clock_stop+0x158>
   1eda4:	e7a5      	b.n	1ecf2 <clock_stop+0xba>
            NRFX_ASSERT(0);
   1eda6:	4909      	ldr	r1, [pc, #36]	; (1edcc <clock_stop+0x194>)
   1eda8:	4809      	ldr	r0, [pc, #36]	; (1edd0 <clock_stop+0x198>)
   1edaa:	f240 3347 	movw	r3, #839	; 0x347
   1edae:	4a0a      	ldr	r2, [pc, #40]	; (1edd8 <clock_stop+0x1a0>)
   1edb0:	f00b fc6f 	bl	2a692 <assert_print>
   1edb4:	f240 3147 	movw	r1, #839	; 0x347
   1edb8:	4807      	ldr	r0, [pc, #28]	; (1edd8 <clock_stop+0x1a0>)
   1edba:	e783      	b.n	1ecc4 <clock_stop+0x8c>
   1edbc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1edc0:	2801      	cmp	r0, #1
   1edc2:	d0eb      	beq.n	1ed9c <clock_stop+0x164>
   1edc4:	e795      	b.n	1ecf2 <clock_stop+0xba>
   1edc6:	bf00      	nop
   1edc8:	40005000 	.word	0x40005000
   1edcc:	00037ac9 	.word	0x00037ac9
   1edd0:	00032629 	.word	0x00032629
   1edd4:	00037441 	.word	0x00037441
   1edd8:	0003747e 	.word	0x0003747e

0001eddc <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1eddc:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1edde:	b958      	cbnz	r0, 1edf8 <nrfx_clock_init+0x1c>
   1ede0:	490a      	ldr	r1, [pc, #40]	; (1ee0c <nrfx_clock_init+0x30>)
   1ede2:	480b      	ldr	r0, [pc, #44]	; (1ee10 <nrfx_clock_init+0x34>)
   1ede4:	f240 1315 	movw	r3, #277	; 0x115
   1ede8:	4a0a      	ldr	r2, [pc, #40]	; (1ee14 <nrfx_clock_init+0x38>)
   1edea:	f00b fc52 	bl	2a692 <assert_print>
   1edee:	f240 1115 	movw	r1, #277	; 0x115
   1edf2:	4808      	ldr	r0, [pc, #32]	; (1ee14 <nrfx_clock_init+0x38>)
   1edf4:	f00b fc46 	bl	2a684 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1edf8:	4b07      	ldr	r3, [pc, #28]	; (1ee18 <nrfx_clock_init+0x3c>)
   1edfa:	791a      	ldrb	r2, [r3, #4]
   1edfc:	b922      	cbnz	r2, 1ee08 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1edfe:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1ee00:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ee02:	4806      	ldr	r0, [pc, #24]	; (1ee1c <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1ee04:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ee06:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1ee08:	4805      	ldr	r0, [pc, #20]	; (1ee20 <nrfx_clock_init+0x44>)
    return err_code;
   1ee0a:	e7fc      	b.n	1ee06 <nrfx_clock_init+0x2a>
   1ee0c:	000374b2 	.word	0x000374b2
   1ee10:	00032629 	.word	0x00032629
   1ee14:	00037441 	.word	0x00037441
   1ee18:	20021958 	.word	0x20021958
   1ee1c:	0bad0000 	.word	0x0bad0000
   1ee20:	0bad000c 	.word	0x0bad000c

0001ee24 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1ee24:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1ee26:	4b0f      	ldr	r3, [pc, #60]	; (1ee64 <nrfx_clock_enable+0x40>)
   1ee28:	791b      	ldrb	r3, [r3, #4]
   1ee2a:	b95b      	cbnz	r3, 1ee44 <nrfx_clock_enable+0x20>
   1ee2c:	490e      	ldr	r1, [pc, #56]	; (1ee68 <nrfx_clock_enable+0x44>)
   1ee2e:	480f      	ldr	r0, [pc, #60]	; (1ee6c <nrfx_clock_enable+0x48>)
   1ee30:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1ee34:	4a0e      	ldr	r2, [pc, #56]	; (1ee70 <nrfx_clock_enable+0x4c>)
   1ee36:	f00b fc2c 	bl	2a692 <assert_print>
   1ee3a:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1ee3e:	480c      	ldr	r0, [pc, #48]	; (1ee70 <nrfx_clock_enable+0x4c>)
   1ee40:	f00b fc20 	bl	2a684 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1ee44:	2005      	movs	r0, #5
   1ee46:	f7f1 fdf7 	bl	10a38 <arch_irq_is_enabled>
   1ee4a:	b910      	cbnz	r0, 1ee52 <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1ee4c:	2005      	movs	r0, #5
   1ee4e:	f7f1 fdd1 	bl	109f4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ee52:	2201      	movs	r2, #1
   1ee54:	4b07      	ldr	r3, [pc, #28]	; (1ee74 <nrfx_clock_enable+0x50>)
   1ee56:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1ee5a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1ee5e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1ee62:	bd08      	pop	{r3, pc}
   1ee64:	20021958 	.word	0x20021958
   1ee68:	000374c0 	.word	0x000374c0
   1ee6c:	00032629 	.word	0x00032629
   1ee70:	00037441 	.word	0x00037441
   1ee74:	40005000 	.word	0x40005000

0001ee78 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1ee78:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1ee7a:	4b38      	ldr	r3, [pc, #224]	; (1ef5c <nrfx_clock_start+0xe4>)
   1ee7c:	791b      	ldrb	r3, [r3, #4]
   1ee7e:	b95b      	cbnz	r3, 1ee98 <nrfx_clock_start+0x20>
   1ee80:	4937      	ldr	r1, [pc, #220]	; (1ef60 <nrfx_clock_start+0xe8>)
   1ee82:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1ee86:	4a37      	ldr	r2, [pc, #220]	; (1ef64 <nrfx_clock_start+0xec>)
   1ee88:	4837      	ldr	r0, [pc, #220]	; (1ef68 <nrfx_clock_start+0xf0>)
   1ee8a:	f00b fc02 	bl	2a692 <assert_print>
   1ee8e:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1ee92:	4834      	ldr	r0, [pc, #208]	; (1ef64 <nrfx_clock_start+0xec>)
   1ee94:	f00b fbf6 	bl	2a684 <assert_post_action>
    switch (domain)
   1ee98:	4b34      	ldr	r3, [pc, #208]	; (1ef6c <nrfx_clock_start+0xf4>)
   1ee9a:	2803      	cmp	r0, #3
   1ee9c:	d853      	bhi.n	1ef46 <nrfx_clock_start+0xce>
   1ee9e:	e8df f000 	tbb	[pc, r0]
   1eea2:	3002      	.short	0x3002
   1eea4:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eea6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1eeaa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1eeae:	03c9      	lsls	r1, r1, #15
   1eeb0:	d511      	bpl.n	1eed6 <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eeb2:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1eeb6:	2b02      	cmp	r3, #2
   1eeb8:	d11c      	bne.n	1eef4 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1eeba:	4a2c      	ldr	r2, [pc, #176]	; (1ef6c <nrfx_clock_start+0xf4>)
   1eebc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eec0:	2300      	movs	r3, #0
   1eec2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1eec6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1eeca:	2302      	movs	r3, #2
   1eecc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eed0:	2301      	movs	r3, #1
   1eed2:	6093      	str	r3, [r2, #8]
}
   1eed4:	e00d      	b.n	1eef2 <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1eed6:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1eeda:	07d2      	lsls	r2, r2, #31
   1eedc:	d50f      	bpl.n	1eefe <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1eede:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1eee2:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1eee6:	3a01      	subs	r2, #1
   1eee8:	2a01      	cmp	r2, #1
   1eeea:	d805      	bhi.n	1eef8 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1eeec:	2202      	movs	r2, #2
   1eeee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1eef2:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1eef4:	2b01      	cmp	r3, #1
   1eef6:	d002      	beq.n	1eefe <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1eef8:	2000      	movs	r0, #0
   1eefa:	f7ff fe9d 	bl	1ec38 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1eefe:	2301      	movs	r3, #1
   1ef00:	e7db      	b.n	1eeba <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef02:	2200      	movs	r2, #0
   1ef04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ef08:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ef0c:	2201      	movs	r2, #1
   1ef0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef12:	601a      	str	r2, [r3, #0]
}
   1ef14:	e7ed      	b.n	1eef2 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef16:	2200      	movs	r2, #0
   1ef18:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ef1c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1ef20:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ef24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef28:	2201      	movs	r2, #1
   1ef2a:	621a      	str	r2, [r3, #32]
}
   1ef2c:	e7e1      	b.n	1eef2 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef2e:	2200      	movs	r2, #0
   1ef30:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ef34:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1ef38:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ef3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef40:	2201      	movs	r2, #1
   1ef42:	619a      	str	r2, [r3, #24]
}
   1ef44:	e7d5      	b.n	1eef2 <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1ef46:	490a      	ldr	r1, [pc, #40]	; (1ef70 <nrfx_clock_start+0xf8>)
   1ef48:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1ef4c:	4a05      	ldr	r2, [pc, #20]	; (1ef64 <nrfx_clock_start+0xec>)
   1ef4e:	4806      	ldr	r0, [pc, #24]	; (1ef68 <nrfx_clock_start+0xf0>)
   1ef50:	f00b fb9f 	bl	2a692 <assert_print>
   1ef54:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1ef58:	e79b      	b.n	1ee92 <nrfx_clock_start+0x1a>
   1ef5a:	bf00      	nop
   1ef5c:	20021958 	.word	0x20021958
   1ef60:	000374c0 	.word	0x000374c0
   1ef64:	00037441 	.word	0x00037441
   1ef68:	00032629 	.word	0x00032629
   1ef6c:	40005000 	.word	0x40005000
   1ef70:	00037ac9 	.word	0x00037ac9

0001ef74 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1ef74:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1ef76:	4b09      	ldr	r3, [pc, #36]	; (1ef9c <nrfx_clock_stop+0x28>)
   1ef78:	791b      	ldrb	r3, [r3, #4]
   1ef7a:	b95b      	cbnz	r3, 1ef94 <nrfx_clock_stop+0x20>
   1ef7c:	4908      	ldr	r1, [pc, #32]	; (1efa0 <nrfx_clock_stop+0x2c>)
   1ef7e:	4809      	ldr	r0, [pc, #36]	; (1efa4 <nrfx_clock_stop+0x30>)
   1ef80:	f240 13ad 	movw	r3, #429	; 0x1ad
   1ef84:	4a08      	ldr	r2, [pc, #32]	; (1efa8 <nrfx_clock_stop+0x34>)
   1ef86:	f00b fb84 	bl	2a692 <assert_print>
   1ef8a:	f240 11ad 	movw	r1, #429	; 0x1ad
   1ef8e:	4806      	ldr	r0, [pc, #24]	; (1efa8 <nrfx_clock_stop+0x34>)
   1ef90:	f00b fb78 	bl	2a684 <assert_post_action>
    clock_stop(domain);
}
   1ef94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1ef98:	f7ff be4e 	b.w	1ec38 <clock_stop>
   1ef9c:	20021958 	.word	0x20021958
   1efa0:	000374c0 	.word	0x000374c0
   1efa4:	00032629 	.word	0x00032629
   1efa8:	00037441 	.word	0x00037441

0001efac <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1efac:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1efae:	4b28      	ldr	r3, [pc, #160]	; (1f050 <nrfx_power_clock_irq_handler+0xa4>)
   1efb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1efb4:	b152      	cbz	r2, 1efcc <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1efb6:	2000      	movs	r0, #0
   1efb8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1efbc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1efc0:	2201      	movs	r2, #1
   1efc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1efc6:	4b23      	ldr	r3, [pc, #140]	; (1f054 <nrfx_power_clock_irq_handler+0xa8>)
   1efc8:	681b      	ldr	r3, [r3, #0]
   1efca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1efcc:	4b20      	ldr	r3, [pc, #128]	; (1f050 <nrfx_power_clock_irq_handler+0xa4>)
   1efce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1efd2:	b18a      	cbz	r2, 1eff8 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1efd4:	2200      	movs	r2, #0
   1efd6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1efda:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1efde:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1efe2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1efe6:	f002 0203 	and.w	r2, r2, #3
   1efea:	2a01      	cmp	r2, #1
   1efec:	f04f 0102 	mov.w	r1, #2
   1eff0:	d126      	bne.n	1f040 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1eff2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eff6:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1eff8:	4b15      	ldr	r3, [pc, #84]	; (1f050 <nrfx_power_clock_irq_handler+0xa4>)
   1effa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1effe:	b162      	cbz	r2, 1f01a <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f000:	2200      	movs	r2, #0
   1f002:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1f006:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1f00a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f00e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1f012:	4b10      	ldr	r3, [pc, #64]	; (1f054 <nrfx_power_clock_irq_handler+0xa8>)
   1f014:	2004      	movs	r0, #4
   1f016:	681b      	ldr	r3, [r3, #0]
   1f018:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f01a:	4b0d      	ldr	r3, [pc, #52]	; (1f050 <nrfx_power_clock_irq_handler+0xa4>)
   1f01c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1f020:	b1aa      	cbz	r2, 1f04e <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f022:	2200      	movs	r2, #0
   1f024:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1f028:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1f02c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f030:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1f034:	4b07      	ldr	r3, [pc, #28]	; (1f054 <nrfx_power_clock_irq_handler+0xa8>)
   1f036:	2005      	movs	r0, #5
    }
#endif
}
   1f038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1f03c:	681b      	ldr	r3, [r3, #0]
   1f03e:	4718      	bx	r3
   1f040:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f044:	4b03      	ldr	r3, [pc, #12]	; (1f054 <nrfx_power_clock_irq_handler+0xa8>)
   1f046:	2001      	movs	r0, #1
   1f048:	681b      	ldr	r3, [r3, #0]
   1f04a:	4798      	blx	r3
   1f04c:	e7d4      	b.n	1eff8 <nrfx_power_clock_irq_handler+0x4c>
}
   1f04e:	bd10      	pop	{r4, pc}
   1f050:	40005000 	.word	0x40005000
   1f054:	20021958 	.word	0x20021958

0001f058 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1f058:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1f05a:	4801      	ldr	r0, [pc, #4]	; (1f060 <nrfx_dppi_channel_alloc+0x8>)
   1f05c:	f7ff bdb4 	b.w	1ebc8 <nrfx_flag32_alloc>
   1f060:	20008698 	.word	0x20008698

0001f064 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1f064:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1f066:	4a04      	ldr	r2, [pc, #16]	; (1f078 <nrfx_dppi_channel_free+0x14>)
   1f068:	4083      	lsls	r3, r0
{
   1f06a:	4601      	mov	r1, r0
   1f06c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1f070:	4802      	ldr	r0, [pc, #8]	; (1f07c <nrfx_dppi_channel_free+0x18>)
   1f072:	f7ff bdc5 	b.w	1ec00 <nrfx_flag32_free>
   1f076:	bf00      	nop
   1f078:	40017000 	.word	0x40017000
   1f07c:	20008698 	.word	0x20008698

0001f080 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f080:	4b03      	ldr	r3, [pc, #12]	; (1f090 <pin_in_use_by_te+0x10>)
   1f082:	3008      	adds	r0, #8
   1f084:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f088:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f08c:	4770      	bx	lr
   1f08e:	bf00      	nop
   1f090:	2000869c 	.word	0x2000869c

0001f094 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f094:	4b04      	ldr	r3, [pc, #16]	; (1f0a8 <pin_has_trigger+0x14>)
   1f096:	3008      	adds	r0, #8
   1f098:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f09c:	f010 001c 	ands.w	r0, r0, #28
   1f0a0:	bf18      	it	ne
   1f0a2:	2001      	movne	r0, #1
   1f0a4:	4770      	bx	lr
   1f0a6:	bf00      	nop
   1f0a8:	2000869c 	.word	0x2000869c

0001f0ac <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f0ac:	4b03      	ldr	r3, [pc, #12]	; (1f0bc <pin_is_output+0x10>)
   1f0ae:	3008      	adds	r0, #8
   1f0b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0b4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f0b8:	4770      	bx	lr
   1f0ba:	bf00      	nop
   1f0bc:	2000869c 	.word	0x2000869c

0001f0c0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f0c0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0c2:	4c0d      	ldr	r4, [pc, #52]	; (1f0f8 <call_handler+0x38>)
   1f0c4:	f100 0308 	add.w	r3, r0, #8
   1f0c8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1f0cc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0ce:	05da      	lsls	r2, r3, #23
{
   1f0d0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0d2:	d507      	bpl.n	1f0e4 <call_handler+0x24>
   1f0d4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f0d8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f0dc:	6852      	ldr	r2, [r2, #4]
   1f0de:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f0e2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f0e4:	68a3      	ldr	r3, [r4, #8]
   1f0e6:	b12b      	cbz	r3, 1f0f4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f0e8:	4631      	mov	r1, r6
   1f0ea:	4628      	mov	r0, r5
   1f0ec:	68e2      	ldr	r2, [r4, #12]
    }
}
   1f0ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f0f2:	4718      	bx	r3
}
   1f0f4:	bd70      	pop	{r4, r5, r6, pc}
   1f0f6:	bf00      	nop
   1f0f8:	2000869c 	.word	0x2000869c

0001f0fc <release_handler>:
{
   1f0fc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f0fe:	4a18      	ldr	r2, [pc, #96]	; (1f160 <release_handler+0x64>)
   1f100:	3008      	adds	r0, #8
   1f102:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f106:	05d9      	lsls	r1, r3, #23
   1f108:	d51d      	bpl.n	1f146 <release_handler+0x4a>
   1f10a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f10e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f112:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f116:	2000      	movs	r0, #0
   1f118:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f11c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1f120:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f124:	d003      	beq.n	1f12e <release_handler+0x32>
   1f126:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f12a:	4299      	cmp	r1, r3
   1f12c:	d00b      	beq.n	1f146 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f12e:	3001      	adds	r0, #1
   1f130:	2830      	cmp	r0, #48	; 0x30
   1f132:	d1f3      	bne.n	1f11c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f134:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f136:	480b      	ldr	r0, [pc, #44]	; (1f164 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1f138:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f13c:	f7ff fd60 	bl	1ec00 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f140:	4b09      	ldr	r3, [pc, #36]	; (1f168 <release_handler+0x6c>)
   1f142:	4298      	cmp	r0, r3
   1f144:	d100      	bne.n	1f148 <release_handler+0x4c>
}
   1f146:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f148:	4908      	ldr	r1, [pc, #32]	; (1f16c <release_handler+0x70>)
   1f14a:	4809      	ldr	r0, [pc, #36]	; (1f170 <release_handler+0x74>)
   1f14c:	f44f 7399 	mov.w	r3, #306	; 0x132
   1f150:	4a08      	ldr	r2, [pc, #32]	; (1f174 <release_handler+0x78>)
   1f152:	f00b fa9e 	bl	2a692 <assert_print>
   1f156:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f15a:	4806      	ldr	r0, [pc, #24]	; (1f174 <release_handler+0x78>)
   1f15c:	f00b fa92 	bl	2a684 <assert_post_action>
   1f160:	2000869c 	.word	0x2000869c
   1f164:	20008710 	.word	0x20008710
   1f168:	0bad0000 	.word	0x0bad0000
   1f16c:	0003355b 	.word	0x0003355b
   1f170:	00032629 	.word	0x00032629
   1f174:	000374f3 	.word	0x000374f3

0001f178 <pin_handler_trigger_uninit>:
{
   1f178:	b538      	push	{r3, r4, r5, lr}
   1f17a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f17c:	f7ff ff80 	bl	1f080 <pin_in_use_by_te>
   1f180:	4c0b      	ldr	r4, [pc, #44]	; (1f1b0 <pin_handler_trigger_uninit+0x38>)
   1f182:	f102 0508 	add.w	r5, r2, #8
   1f186:	b160      	cbz	r0, 1f1a2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f188:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f18a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f18e:	0b5b      	lsrs	r3, r3, #13
   1f190:	009b      	lsls	r3, r3, #2
   1f192:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f196:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f19a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1f19e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1f1a2:	4610      	mov	r0, r2
   1f1a4:	f7ff ffaa 	bl	1f0fc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f1a8:	2300      	movs	r3, #0
   1f1aa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f1ae:	bd38      	pop	{r3, r4, r5, pc}
   1f1b0:	2000869c 	.word	0x2000869c

0001f1b4 <nrf_gpio_pin_port_decode>:
{
   1f1b4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1b6:	6802      	ldr	r2, [r0, #0]
{
   1f1b8:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1ba:	4610      	mov	r0, r2
   1f1bc:	f00f fc64 	bl	2ea88 <nrf_gpio_pin_present_check>
   1f1c0:	b958      	cbnz	r0, 1f1da <nrf_gpio_pin_port_decode+0x26>
   1f1c2:	4910      	ldr	r1, [pc, #64]	; (1f204 <nrf_gpio_pin_port_decode+0x50>)
   1f1c4:	f240 2347 	movw	r3, #583	; 0x247
   1f1c8:	4a0f      	ldr	r2, [pc, #60]	; (1f208 <nrf_gpio_pin_port_decode+0x54>)
   1f1ca:	4810      	ldr	r0, [pc, #64]	; (1f20c <nrf_gpio_pin_port_decode+0x58>)
   1f1cc:	f00b fa61 	bl	2a692 <assert_print>
   1f1d0:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1f1d4:	480c      	ldr	r0, [pc, #48]	; (1f208 <nrf_gpio_pin_port_decode+0x54>)
   1f1d6:	f00b fa55 	bl	2a684 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1f1da:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f1de:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1f1e0:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f1e2:	d00b      	beq.n	1f1fc <nrf_gpio_pin_port_decode+0x48>
   1f1e4:	2a01      	cmp	r2, #1
   1f1e6:	d00b      	beq.n	1f200 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1f1e8:	4909      	ldr	r1, [pc, #36]	; (1f210 <nrf_gpio_pin_port_decode+0x5c>)
   1f1ea:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1f1ee:	4a06      	ldr	r2, [pc, #24]	; (1f208 <nrf_gpio_pin_port_decode+0x54>)
   1f1f0:	4806      	ldr	r0, [pc, #24]	; (1f20c <nrf_gpio_pin_port_decode+0x58>)
   1f1f2:	f00b fa4e 	bl	2a692 <assert_print>
   1f1f6:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f1fa:	e7eb      	b.n	1f1d4 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1f1fc:	4805      	ldr	r0, [pc, #20]	; (1f214 <nrf_gpio_pin_port_decode+0x60>)
}
   1f1fe:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f200:	4805      	ldr	r0, [pc, #20]	; (1f218 <nrf_gpio_pin_port_decode+0x64>)
   1f202:	e7fc      	b.n	1f1fe <nrf_gpio_pin_port_decode+0x4a>
   1f204:	00036bd3 	.word	0x00036bd3
   1f208:	00036ba0 	.word	0x00036ba0
   1f20c:	00032629 	.word	0x00032629
   1f210:	00037ac9 	.word	0x00037ac9
   1f214:	40842500 	.word	0x40842500
   1f218:	40842800 	.word	0x40842800

0001f21c <nrfx_gpiote_input_configure>:
{
   1f21c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f21e:	4604      	mov	r4, r0
   1f220:	4617      	mov	r7, r2
   1f222:	461d      	mov	r5, r3
   1f224:	b085      	sub	sp, #20
    if (p_input_config)
   1f226:	b1d9      	cbz	r1, 1f260 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1f228:	f00f fc3f 	bl	2eaaa <pin_is_task_output>
   1f22c:	bb00      	cbnz	r0, 1f270 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f22e:	460b      	mov	r3, r1
   1f230:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f234:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f238:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f23c:	f10d 020f 	add.w	r2, sp, #15
   1f240:	f10d 010e 	add.w	r1, sp, #14
   1f244:	4620      	mov	r0, r4
   1f246:	f00f fc3b 	bl	2eac0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f24a:	4a44      	ldr	r2, [pc, #272]	; (1f35c <nrfx_gpiote_input_configure+0x140>)
   1f24c:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f250:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f254:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f258:	f043 0301 	orr.w	r3, r3, #1
   1f25c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f260:	b36f      	cbz	r7, 1f2be <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1f262:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f264:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f266:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f268:	f7ff ff20 	bl	1f0ac <pin_is_output>
   1f26c:	b110      	cbz	r0, 1f274 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1f26e:	b1da      	cbz	r2, 1f2a8 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1f270:	483b      	ldr	r0, [pc, #236]	; (1f360 <nrfx_gpiote_input_configure+0x144>)
   1f272:	e026      	b.n	1f2c2 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f274:	4839      	ldr	r0, [pc, #228]	; (1f35c <nrfx_gpiote_input_configure+0x140>)
   1f276:	f104 0c08 	add.w	ip, r4, #8
   1f27a:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1f27e:	f021 0120 	bic.w	r1, r1, #32
   1f282:	04c9      	lsls	r1, r1, #19
   1f284:	0cc9      	lsrs	r1, r1, #19
   1f286:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1f28a:	b16a      	cbz	r2, 1f2a8 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1f28c:	2e03      	cmp	r6, #3
   1f28e:	d8ef      	bhi.n	1f270 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f290:	687b      	ldr	r3, [r7, #4]
   1f292:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f294:	00ba      	lsls	r2, r7, #2
   1f296:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f29a:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1f29e:	b996      	cbnz	r6, 1f2c6 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1f2a0:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1f2a4:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f2a8:	4a2c      	ldr	r2, [pc, #176]	; (1f35c <nrfx_gpiote_input_configure+0x140>)
   1f2aa:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f2ae:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f2b2:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f2b6:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f2ba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f2be:	bb15      	cbnz	r5, 1f306 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1f2c0:	4828      	ldr	r0, [pc, #160]	; (1f364 <nrfx_gpiote_input_configure+0x148>)
}
   1f2c2:	b005      	add	sp, #20
   1f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f2c6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f2ca:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f2ce:	f023 0303 	bic.w	r3, r3, #3
   1f2d2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f2d6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1f2da:	f041 0120 	orr.w	r1, r1, #32
   1f2de:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1f2e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1f2e6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f2ea:	0223      	lsls	r3, r4, #8
   1f2ec:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f2f0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1f2f4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1f2f8:	ea43 030e 	orr.w	r3, r3, lr
   1f2fc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1f300:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1f304:	e7d0      	b.n	1f2a8 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1f306:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f308:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f30c:	f7ff fef6 	bl	1f0fc <release_handler>
    if (!handler)
   1f310:	2e00      	cmp	r6, #0
   1f312:	d0d5      	beq.n	1f2c0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f314:	4d11      	ldr	r5, [pc, #68]	; (1f35c <nrfx_gpiote_input_configure+0x140>)
   1f316:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f31a:	4296      	cmp	r6, r2
   1f31c:	d101      	bne.n	1f322 <nrfx_gpiote_input_configure+0x106>
   1f31e:	429f      	cmp	r7, r3
   1f320:	d019      	beq.n	1f356 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f322:	4811      	ldr	r0, [pc, #68]	; (1f368 <nrfx_gpiote_input_configure+0x14c>)
   1f324:	f10d 010f 	add.w	r1, sp, #15
   1f328:	f7ff fc4e 	bl	1ebc8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f32c:	4b0d      	ldr	r3, [pc, #52]	; (1f364 <nrfx_gpiote_input_configure+0x148>)
   1f32e:	4298      	cmp	r0, r3
   1f330:	d1c7      	bne.n	1f2c2 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1f332:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1f336:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f33a:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f33e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f340:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1f344:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f348:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f34c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f350:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1f354:	e7b4      	b.n	1f2c0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f356:	2200      	movs	r2, #0
   1f358:	e7ed      	b.n	1f336 <nrfx_gpiote_input_configure+0x11a>
   1f35a:	bf00      	nop
   1f35c:	2000869c 	.word	0x2000869c
   1f360:	0bad0004 	.word	0x0bad0004
   1f364:	0bad0000 	.word	0x0bad0000
   1f368:	20008710 	.word	0x20008710

0001f36c <nrfx_gpiote_output_configure>:
{
   1f36c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f36e:	4604      	mov	r4, r0
   1f370:	4615      	mov	r5, r2
   1f372:	b085      	sub	sp, #20
    if (p_config)
   1f374:	b321      	cbz	r1, 1f3c0 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f376:	f7ff fe99 	bl	1f0ac <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f37a:	b920      	cbnz	r0, 1f386 <nrfx_gpiote_output_configure+0x1a>
   1f37c:	4620      	mov	r0, r4
   1f37e:	f7ff fe7f 	bl	1f080 <pin_in_use_by_te>
   1f382:	2800      	cmp	r0, #0
   1f384:	d161      	bne.n	1f44a <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f386:	4620      	mov	r0, r4
   1f388:	f7ff fe84 	bl	1f094 <pin_has_trigger>
   1f38c:	b110      	cbz	r0, 1f394 <nrfx_gpiote_output_configure+0x28>
   1f38e:	784b      	ldrb	r3, [r1, #1]
   1f390:	2b01      	cmp	r3, #1
   1f392:	d05a      	beq.n	1f44a <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f394:	2301      	movs	r3, #1
   1f396:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f39a:	2300      	movs	r3, #0
   1f39c:	1c4a      	adds	r2, r1, #1
   1f39e:	e9cd 1300 	strd	r1, r3, [sp]
   1f3a2:	4620      	mov	r0, r4
   1f3a4:	1c8b      	adds	r3, r1, #2
   1f3a6:	f10d 010f 	add.w	r1, sp, #15
   1f3aa:	f00f fb89 	bl	2eac0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f3ae:	4a28      	ldr	r2, [pc, #160]	; (1f450 <nrfx_gpiote_output_configure+0xe4>)
   1f3b0:	f104 0108 	add.w	r1, r4, #8
   1f3b4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f3b8:	f043 0303 	orr.w	r3, r3, #3
   1f3bc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f3c0:	b915      	cbnz	r5, 1f3c8 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f3c2:	4824      	ldr	r0, [pc, #144]	; (1f454 <nrfx_gpiote_output_configure+0xe8>)
}
   1f3c4:	b005      	add	sp, #20
   1f3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f3c8:	4620      	mov	r0, r4
   1f3ca:	f7ff fe6f 	bl	1f0ac <pin_is_output>
        if (pin_is_input(pin))
   1f3ce:	2800      	cmp	r0, #0
   1f3d0:	d03b      	beq.n	1f44a <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1f3d2:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1f3d6:	2300      	movs	r3, #0
   1f3d8:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f3da:	4e1d      	ldr	r6, [pc, #116]	; (1f450 <nrfx_gpiote_output_configure+0xe4>)
   1f3dc:	f104 0708 	add.w	r7, r4, #8
   1f3e0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f3e4:	0089      	lsls	r1, r1, #2
   1f3e6:	f020 0020 	bic.w	r0, r0, #32
   1f3ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f3ee:	04c0      	lsls	r0, r0, #19
   1f3f0:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1f3f4:	0cc0      	lsrs	r0, r0, #19
   1f3f6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f3fa:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f3fe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f402:	786a      	ldrb	r2, [r5, #1]
   1f404:	2a00      	cmp	r2, #0
   1f406:	d0dc      	beq.n	1f3c2 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f408:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1f40c:	78ad      	ldrb	r5, [r5, #2]
   1f40e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1f412:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f416:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f41a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f41e:	0223      	lsls	r3, r4, #8
   1f420:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f424:	0412      	lsls	r2, r2, #16
   1f426:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f42a:	ea43 030e 	orr.w	r3, r3, lr
   1f42e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f430:	052a      	lsls	r2, r5, #20
   1f432:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f436:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f43a:	4313      	orrs	r3, r2
   1f43c:	f040 0020 	orr.w	r0, r0, #32
   1f440:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f444:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f448:	e7bb      	b.n	1f3c2 <nrfx_gpiote_output_configure+0x56>
{
   1f44a:	4803      	ldr	r0, [pc, #12]	; (1f458 <nrfx_gpiote_output_configure+0xec>)
   1f44c:	e7ba      	b.n	1f3c4 <nrfx_gpiote_output_configure+0x58>
   1f44e:	bf00      	nop
   1f450:	2000869c 	.word	0x2000869c
   1f454:	0bad0000 	.word	0x0bad0000
   1f458:	0bad0004 	.word	0x0bad0004

0001f45c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f45c:	4b01      	ldr	r3, [pc, #4]	; (1f464 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f45e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f462:	4770      	bx	lr
   1f464:	2000869c 	.word	0x2000869c

0001f468 <nrfx_gpiote_channel_get>:
{
   1f468:	4602      	mov	r2, r0
   1f46a:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1f46c:	b959      	cbnz	r1, 1f486 <nrfx_gpiote_channel_get+0x1e>
   1f46e:	490c      	ldr	r1, [pc, #48]	; (1f4a0 <nrfx_gpiote_channel_get+0x38>)
   1f470:	480c      	ldr	r0, [pc, #48]	; (1f4a4 <nrfx_gpiote_channel_get+0x3c>)
   1f472:	f240 2335 	movw	r3, #565	; 0x235
   1f476:	4a0c      	ldr	r2, [pc, #48]	; (1f4a8 <nrfx_gpiote_channel_get+0x40>)
   1f478:	f00b f90b 	bl	2a692 <assert_print>
   1f47c:	f240 2135 	movw	r1, #565	; 0x235
   1f480:	4809      	ldr	r0, [pc, #36]	; (1f4a8 <nrfx_gpiote_channel_get+0x40>)
   1f482:	f00b f8ff 	bl	2a684 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f486:	f7ff fdfb 	bl	1f080 <pin_in_use_by_te>
   1f48a:	b138      	cbz	r0, 1f49c <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f48c:	4b07      	ldr	r3, [pc, #28]	; (1f4ac <nrfx_gpiote_channel_get+0x44>)
   1f48e:	3208      	adds	r2, #8
   1f490:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1f494:	4806      	ldr	r0, [pc, #24]	; (1f4b0 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f496:	0b5b      	lsrs	r3, r3, #13
   1f498:	700b      	strb	r3, [r1, #0]
}
   1f49a:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f49c:	4805      	ldr	r0, [pc, #20]	; (1f4b4 <nrfx_gpiote_channel_get+0x4c>)
   1f49e:	e7fc      	b.n	1f49a <nrfx_gpiote_channel_get+0x32>
   1f4a0:	00037531 	.word	0x00037531
   1f4a4:	00032629 	.word	0x00032629
   1f4a8:	000374f3 	.word	0x000374f3
   1f4ac:	2000869c 	.word	0x2000869c
   1f4b0:	0bad0000 	.word	0x0bad0000
   1f4b4:	0bad0004 	.word	0x0bad0004

0001f4b8 <nrfx_gpiote_init>:
{
   1f4b8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f4ba:	4c0f      	ldr	r4, [pc, #60]	; (1f4f8 <nrfx_gpiote_init+0x40>)
   1f4bc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1f4c0:	b9bd      	cbnz	r5, 1f4f2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f4c2:	2260      	movs	r2, #96	; 0x60
   1f4c4:	4629      	mov	r1, r5
   1f4c6:	f104 0010 	add.w	r0, r4, #16
   1f4ca:	f011 f876 	bl	305ba <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f4ce:	202f      	movs	r0, #47	; 0x2f
   1f4d0:	f7f1 fa90 	bl	109f4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f4d4:	4b09      	ldr	r3, [pc, #36]	; (1f4fc <nrfx_gpiote_init+0x44>)
    return err_code;
   1f4d6:	480a      	ldr	r0, [pc, #40]	; (1f500 <nrfx_gpiote_init+0x48>)
   1f4d8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f4dc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f4e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f4e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f4e8:	2301      	movs	r3, #1
   1f4ea:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f4ee:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f4f0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f4f2:	4804      	ldr	r0, [pc, #16]	; (1f504 <nrfx_gpiote_init+0x4c>)
   1f4f4:	e7fc      	b.n	1f4f0 <nrfx_gpiote_init+0x38>
   1f4f6:	bf00      	nop
   1f4f8:	2000869c 	.word	0x2000869c
   1f4fc:	4002f000 	.word	0x4002f000
   1f500:	0bad0000 	.word	0x0bad0000
   1f504:	0bad0005 	.word	0x0bad0005

0001f508 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f508:	4b03      	ldr	r3, [pc, #12]	; (1f518 <nrfx_gpiote_is_init+0x10>)
   1f50a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1f50e:	3800      	subs	r0, #0
   1f510:	bf18      	it	ne
   1f512:	2001      	movne	r0, #1
   1f514:	4770      	bx	lr
   1f516:	bf00      	nop
   1f518:	2000869c 	.word	0x2000869c

0001f51c <nrfx_gpiote_channel_free>:
{
   1f51c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f51e:	4801      	ldr	r0, [pc, #4]	; (1f524 <nrfx_gpiote_channel_free+0x8>)
   1f520:	f7ff bb6e 	b.w	1ec00 <nrfx_flag32_free>
   1f524:	2000870c 	.word	0x2000870c

0001f528 <nrfx_gpiote_channel_alloc>:
{
   1f528:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f52a:	4801      	ldr	r0, [pc, #4]	; (1f530 <nrfx_gpiote_channel_alloc+0x8>)
   1f52c:	f7ff bb4c 	b.w	1ebc8 <nrfx_flag32_alloc>
   1f530:	2000870c 	.word	0x2000870c

0001f534 <nrfx_gpiote_trigger_enable>:
{
   1f534:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f536:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1f538:	f7ff fdac 	bl	1f094 <pin_has_trigger>
   1f53c:	b958      	cbnz	r0, 1f556 <nrfx_gpiote_trigger_enable+0x22>
   1f53e:	492b      	ldr	r1, [pc, #172]	; (1f5ec <nrfx_gpiote_trigger_enable+0xb8>)
   1f540:	f240 33df 	movw	r3, #991	; 0x3df
   1f544:	4a2a      	ldr	r2, [pc, #168]	; (1f5f0 <nrfx_gpiote_trigger_enable+0xbc>)
   1f546:	482b      	ldr	r0, [pc, #172]	; (1f5f4 <nrfx_gpiote_trigger_enable+0xc0>)
   1f548:	f00b f8a3 	bl	2a692 <assert_print>
   1f54c:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1f550:	4827      	ldr	r0, [pc, #156]	; (1f5f0 <nrfx_gpiote_trigger_enable+0xbc>)
   1f552:	f00b f897 	bl	2a684 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f556:	4620      	mov	r0, r4
   1f558:	f7ff fd92 	bl	1f080 <pin_in_use_by_te>
   1f55c:	4a26      	ldr	r2, [pc, #152]	; (1f5f8 <nrfx_gpiote_trigger_enable+0xc4>)
   1f55e:	f104 0508 	add.w	r5, r4, #8
   1f562:	b1e0      	cbz	r0, 1f59e <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1f564:	4620      	mov	r0, r4
   1f566:	f7ff fda1 	bl	1f0ac <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f56a:	b9c0      	cbnz	r0, 1f59e <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f56c:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1f570:	4c22      	ldr	r4, [pc, #136]	; (1f5fc <nrfx_gpiote_trigger_enable+0xc8>)
   1f572:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f574:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f576:	50e0      	str	r0, [r4, r3]
   1f578:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f57a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f57e:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f582:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1f586:	f040 0001 	orr.w	r0, r0, #1
   1f58a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1f58e:	b121      	cbz	r1, 1f59a <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f590:	2301      	movs	r3, #1
   1f592:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1f594:	4a1a      	ldr	r2, [pc, #104]	; (1f600 <nrfx_gpiote_trigger_enable+0xcc>)
   1f596:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f59a:	b003      	add	sp, #12
   1f59c:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1f59e:	b949      	cbnz	r1, 1f5b4 <nrfx_gpiote_trigger_enable+0x80>
   1f5a0:	4918      	ldr	r1, [pc, #96]	; (1f604 <nrfx_gpiote_trigger_enable+0xd0>)
   1f5a2:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1f5a6:	4a12      	ldr	r2, [pc, #72]	; (1f5f0 <nrfx_gpiote_trigger_enable+0xbc>)
   1f5a8:	4812      	ldr	r0, [pc, #72]	; (1f5f4 <nrfx_gpiote_trigger_enable+0xc0>)
   1f5aa:	f00b f872 	bl	2a692 <assert_print>
   1f5ae:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1f5b2:	e7cd      	b.n	1f550 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f5b4:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1f5b8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f5bc:	2b04      	cmp	r3, #4
   1f5be:	d011      	beq.n	1f5e4 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f5c0:	2b05      	cmp	r3, #5
   1f5c2:	d011      	beq.n	1f5e8 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f5c4:	a801      	add	r0, sp, #4
   1f5c6:	9401      	str	r4, [sp, #4]
   1f5c8:	f7ff fdf4 	bl	1f1b4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f5cc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f5ce:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f5d0:	40d9      	lsrs	r1, r3
   1f5d2:	f001 0101 	and.w	r1, r1, #1
   1f5d6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f5d8:	4620      	mov	r0, r4
}
   1f5da:	b003      	add	sp, #12
   1f5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f5e0:	f00f babb 	b.w	2eb5a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f5e4:	2103      	movs	r1, #3
   1f5e6:	e7f7      	b.n	1f5d8 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f5e8:	2102      	movs	r1, #2
   1f5ea:	e7f5      	b.n	1f5d8 <nrfx_gpiote_trigger_enable+0xa4>
   1f5ec:	0003753b 	.word	0x0003753b
   1f5f0:	000374f3 	.word	0x000374f3
   1f5f4:	00032629 	.word	0x00032629
   1f5f8:	2000869c 	.word	0x2000869c
   1f5fc:	4002f100 	.word	0x4002f100
   1f600:	4002f000 	.word	0x4002f000
   1f604:	00037550 	.word	0x00037550

0001f608 <nrfx_gpiote_trigger_disable>:
{
   1f608:	b508      	push	{r3, lr}
   1f60a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f60c:	f7ff fd38 	bl	1f080 <pin_in_use_by_te>
   1f610:	b1c8      	cbz	r0, 1f646 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1f612:	4610      	mov	r0, r2
   1f614:	f7ff fd4a 	bl	1f0ac <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f618:	b9a8      	cbnz	r0, 1f646 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f61a:	4b0e      	ldr	r3, [pc, #56]	; (1f654 <nrfx_gpiote_trigger_disable+0x4c>)
   1f61c:	3208      	adds	r2, #8
   1f61e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f622:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f624:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f626:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1f628:	490b      	ldr	r1, [pc, #44]	; (1f658 <nrfx_gpiote_trigger_disable+0x50>)
   1f62a:	009b      	lsls	r3, r3, #2
   1f62c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f630:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f634:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f638:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f63c:	f022 0203 	bic.w	r2, r2, #3
   1f640:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f644:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f646:	2100      	movs	r1, #0
}
   1f648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f64c:	4610      	mov	r0, r2
   1f64e:	f00f ba84 	b.w	2eb5a <nrf_gpio_cfg_sense_set>
   1f652:	bf00      	nop
   1f654:	2000869c 	.word	0x2000869c
   1f658:	4002f000 	.word	0x4002f000

0001f65c <nrfx_gpiote_pin_uninit>:
{
   1f65c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f65e:	4b10      	ldr	r3, [pc, #64]	; (1f6a0 <nrfx_gpiote_pin_uninit+0x44>)
   1f660:	f100 0208 	add.w	r2, r0, #8
   1f664:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1f668:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1f66a:	07db      	lsls	r3, r3, #31
   1f66c:	d516      	bpl.n	1f69c <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1f66e:	f7ff ffcb 	bl	1f608 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1f672:	4620      	mov	r0, r4
   1f674:	f7ff fd80 	bl	1f178 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f678:	a801      	add	r0, sp, #4
   1f67a:	9401      	str	r4, [sp, #4]
   1f67c:	f7ff fd9a 	bl	1f1b4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f680:	9b01      	ldr	r3, [sp, #4]
   1f682:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1f686:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1f68a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f68e:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f692:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1f696:	4803      	ldr	r0, [pc, #12]	; (1f6a4 <nrfx_gpiote_pin_uninit+0x48>)
}
   1f698:	b002      	add	sp, #8
   1f69a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f69c:	4802      	ldr	r0, [pc, #8]	; (1f6a8 <nrfx_gpiote_pin_uninit+0x4c>)
   1f69e:	e7fb      	b.n	1f698 <nrfx_gpiote_pin_uninit+0x3c>
   1f6a0:	2000869c 	.word	0x2000869c
   1f6a4:	0bad0000 	.word	0x0bad0000
   1f6a8:	0bad0004 	.word	0x0bad0004

0001f6ac <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1f6b0:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1f6b2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6b4:	4634      	mov	r4, r6
{
   1f6b6:	4b64      	ldr	r3, [pc, #400]	; (1f848 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1f6b8:	4864      	ldr	r0, [pc, #400]	; (1f84c <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f6ba:	4965      	ldr	r1, [pc, #404]	; (1f850 <nrfx_gpiote_irq_handler+0x1a4>)
{
   1f6bc:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f6be:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1f6c0:	b135      	cbz	r5, 1f6d0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1f6c2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1f6c6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6c8:	bf1e      	ittt	ne
   1f6ca:	601c      	strne	r4, [r3, #0]
   1f6cc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1f6ce:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f6d0:	3304      	adds	r3, #4
   1f6d2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1f6d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f6d8:	d1f1      	bne.n	1f6be <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f6da:	f8df a170 	ldr.w	sl, [pc, #368]	; 1f84c <nrfx_gpiote_irq_handler+0x1a0>
   1f6de:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1f6e2:	2b00      	cmp	r3, #0
   1f6e4:	f000 8093 	beq.w	1f80e <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1f6e8:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1f854 <nrfx_gpiote_irq_handler+0x1a8>
   1f6ec:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1f6f0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f6f2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1f6f6:	4b58      	ldr	r3, [pc, #352]	; (1f858 <nrfx_gpiote_irq_handler+0x1ac>)
   1f6f8:	6a1a      	ldr	r2, [r3, #32]
   1f6fa:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f6fc:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f6fe:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1f702:	f10d 0b10 	add.w	fp, sp, #16
   1f706:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1f70a:	9300      	str	r3, [sp, #0]
   1f70c:	e04a      	b.n	1f7a4 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1f70e:	fa94 f4a4 	rbit	r4, r4
   1f712:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1f716:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f718:	4a50      	ldr	r2, [pc, #320]	; (1f85c <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1f71a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f71c:	f104 0308 	add.w	r3, r4, #8
   1f720:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f724:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f726:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1f728:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1f72c:	fa03 f101 	lsl.w	r1, r3, r1
   1f730:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1f734:	08ba      	lsrs	r2, r7, #2
   1f736:	ea23 0301 	bic.w	r3, r3, r1
   1f73a:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f73e:	a803      	add	r0, sp, #12
   1f740:	9201      	str	r2, [sp, #4]
   1f742:	9403      	str	r4, [sp, #12]
   1f744:	f7ff fd36 	bl	1f1b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f748:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1f74a:	9a01      	ldr	r2, [sp, #4]
   1f74c:	3380      	adds	r3, #128	; 0x80
   1f74e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f752:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1f756:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f758:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f75a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1f75e:	d52b      	bpl.n	1f7b8 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1f760:	4639      	mov	r1, r7
   1f762:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f764:	b2dd      	uxtb	r5, r3
   1f766:	f7ff fcab 	bl	1f0c0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f76a:	a803      	add	r0, sp, #12
   1f76c:	9403      	str	r4, [sp, #12]
   1f76e:	f7ff fd21 	bl	1f1b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f772:	9b03      	ldr	r3, [sp, #12]
   1f774:	3380      	adds	r3, #128	; 0x80
   1f776:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f77a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f77e:	429d      	cmp	r5, r3
   1f780:	d107      	bne.n	1f792 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f782:	2100      	movs	r1, #0
   1f784:	4620      	mov	r0, r4
   1f786:	f00f f9e8 	bl	2eb5a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1f78a:	4629      	mov	r1, r5
   1f78c:	4620      	mov	r0, r4
   1f78e:	f00f f9e4 	bl	2eb5a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f792:	a803      	add	r0, sp, #12
   1f794:	9403      	str	r4, [sp, #12]
   1f796:	f7ff fd0d 	bl	1f1b4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1f79a:	2201      	movs	r2, #1
   1f79c:	9b03      	ldr	r3, [sp, #12]
   1f79e:	fa02 f303 	lsl.w	r3, r2, r3
   1f7a2:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1f7a4:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1f7a8:	2c00      	cmp	r4, #0
   1f7aa:	d1b0      	bne.n	1f70e <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f7ac:	f1b9 0f00 	cmp.w	r9, #0
   1f7b0:	d11d      	bne.n	1f7ee <nrfx_gpiote_irq_handler+0x142>
   1f7b2:	f04f 0901 	mov.w	r9, #1
   1f7b6:	e7a6      	b.n	1f706 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f7b8:	2b02      	cmp	r3, #2
   1f7ba:	d10c      	bne.n	1f7d6 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f7bc:	2103      	movs	r1, #3
   1f7be:	4620      	mov	r0, r4
   1f7c0:	f00f f9cb 	bl	2eb5a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f7c4:	f005 0305 	and.w	r3, r5, #5
   1f7c8:	2b01      	cmp	r3, #1
   1f7ca:	d1e2      	bne.n	1f792 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1f7cc:	4639      	mov	r1, r7
   1f7ce:	4620      	mov	r0, r4
   1f7d0:	f7ff fc76 	bl	1f0c0 <call_handler>
   1f7d4:	e7dd      	b.n	1f792 <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f7d6:	2102      	movs	r1, #2
   1f7d8:	4620      	mov	r0, r4
   1f7da:	9301      	str	r3, [sp, #4]
   1f7dc:	f00f f9bd 	bl	2eb5a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f7e0:	2d03      	cmp	r5, #3
   1f7e2:	d0f3      	beq.n	1f7cc <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f7e4:	9b01      	ldr	r3, [sp, #4]
   1f7e6:	2b03      	cmp	r3, #3
   1f7e8:	d1d3      	bne.n	1f792 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f7ea:	2d02      	cmp	r5, #2
   1f7ec:	e7ed      	b.n	1f7ca <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f7ee:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1f7f2:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1f7f6:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1f7fa:	4917      	ldr	r1, [pc, #92]	; (1f858 <nrfx_gpiote_irq_handler+0x1ac>)
   1f7fc:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f7fe:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1f802:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1f804:	4313      	orrs	r3, r2
   1f806:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f808:	620a      	str	r2, [r1, #32]
   1f80a:	f47f af78 	bne.w	1f6fe <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1f80e:	2401      	movs	r4, #1
    while (mask)
   1f810:	b916      	cbnz	r6, 1f818 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1f812:	b007      	add	sp, #28
   1f814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1f818:	fa96 f3a6 	rbit	r3, r6
   1f81c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1f820:	fa04 f203 	lsl.w	r2, r4, r3
   1f824:	009b      	lsls	r3, r3, #2
   1f826:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f82a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f82e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f832:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f836:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1f83a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1f83e:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f842:	f7ff fc3d 	bl	1f0c0 <call_handler>
   1f846:	e7e3      	b.n	1f810 <nrfx_gpiote_irq_handler+0x164>
   1f848:	4002f100 	.word	0x4002f100
   1f84c:	4002f000 	.word	0x4002f000
   1f850:	4002f120 	.word	0x4002f120
   1f854:	40842500 	.word	0x40842500
   1f858:	40842800 	.word	0x40842800
   1f85c:	2000869c 	.word	0x2000869c

0001f860 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1f860:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f862:	4c08      	ldr	r4, [pc, #32]	; (1f884 <nrfx_ipc_init+0x24>)
{
   1f864:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f866:	7923      	ldrb	r3, [r4, #4]
{
   1f868:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f86a:	b943      	cbnz	r3, 1f87e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1f86c:	202a      	movs	r0, #42	; 0x2a
   1f86e:	f7f1 f8c1 	bl	109f4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f872:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1f874:	4804      	ldr	r0, [pc, #16]	; (1f888 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f876:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1f878:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1f87a:	60a5      	str	r5, [r4, #8]
}
   1f87c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1f87e:	4803      	ldr	r0, [pc, #12]	; (1f88c <nrfx_ipc_init+0x2c>)
   1f880:	e7fc      	b.n	1f87c <nrfx_ipc_init+0x1c>
   1f882:	bf00      	nop
   1f884:	20021960 	.word	0x20021960
   1f888:	0bad0000 	.word	0x0bad0000
   1f88c:	0bad000c 	.word	0x0bad000c

0001f890 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1f890:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1f892:	b948      	cbnz	r0, 1f8a8 <nrfx_ipc_config_load+0x18>
   1f894:	4919      	ldr	r1, [pc, #100]	; (1f8fc <nrfx_ipc_config_load+0x6c>)
   1f896:	2345      	movs	r3, #69	; 0x45
   1f898:	4a19      	ldr	r2, [pc, #100]	; (1f900 <nrfx_ipc_config_load+0x70>)
   1f89a:	481a      	ldr	r0, [pc, #104]	; (1f904 <nrfx_ipc_config_load+0x74>)
   1f89c:	f00a fef9 	bl	2a692 <assert_print>
   1f8a0:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f8a2:	4817      	ldr	r0, [pc, #92]	; (1f900 <nrfx_ipc_config_load+0x70>)
   1f8a4:	f00a feee 	bl	2a684 <assert_post_action>
   1f8a8:	4b17      	ldr	r3, [pc, #92]	; (1f908 <nrfx_ipc_config_load+0x78>)
   1f8aa:	791b      	ldrb	r3, [r3, #4]
   1f8ac:	2b01      	cmp	r3, #1
   1f8ae:	d007      	beq.n	1f8c0 <nrfx_ipc_config_load+0x30>
   1f8b0:	4916      	ldr	r1, [pc, #88]	; (1f90c <nrfx_ipc_config_load+0x7c>)
   1f8b2:	2346      	movs	r3, #70	; 0x46
   1f8b4:	4a12      	ldr	r2, [pc, #72]	; (1f900 <nrfx_ipc_config_load+0x70>)
   1f8b6:	4813      	ldr	r0, [pc, #76]	; (1f904 <nrfx_ipc_config_load+0x74>)
   1f8b8:	f00a feeb 	bl	2a692 <assert_print>
   1f8bc:	2146      	movs	r1, #70	; 0x46
   1f8be:	e7f0      	b.n	1f8a2 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f8c0:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1f8c2:	4a13      	ldr	r2, [pc, #76]	; (1f910 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1f8c4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1f8c8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f8cc:	3301      	adds	r3, #1
   1f8ce:	2b10      	cmp	r3, #16
   1f8d0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1f8d4:	d1f6      	bne.n	1f8c4 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f8d6:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1f8d8:	4a0d      	ldr	r2, [pc, #52]	; (1f910 <nrfx_ipc_config_load+0x80>)
   1f8da:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1f8de:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1f8e2:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f8e6:	3301      	adds	r3, #1
   1f8e8:	2b10      	cmp	r3, #16
   1f8ea:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1f8ee:	d1f6      	bne.n	1f8de <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1f8f0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1f8f4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f8f8:	bd38      	pop	{r3, r4, r5, pc}
   1f8fa:	bf00      	nop
   1f8fc:	000375a2 	.word	0x000375a2
   1f900:	00037567 	.word	0x00037567
   1f904:	00032629 	.word	0x00032629
   1f908:	20021960 	.word	0x20021960
   1f90c:	000375ab 	.word	0x000375ab
   1f910:	4002a000 	.word	0x4002a000

0001f914 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1f914:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f916:	4b09      	ldr	r3, [pc, #36]	; (1f93c <nrfx_ipc_receive_event_enable+0x28>)
   1f918:	791b      	ldrb	r3, [r3, #4]
   1f91a:	2b01      	cmp	r3, #1
   1f91c:	d009      	beq.n	1f932 <nrfx_ipc_receive_event_enable+0x1e>
   1f91e:	4908      	ldr	r1, [pc, #32]	; (1f940 <nrfx_ipc_receive_event_enable+0x2c>)
   1f920:	4808      	ldr	r0, [pc, #32]	; (1f944 <nrfx_ipc_receive_event_enable+0x30>)
   1f922:	236b      	movs	r3, #107	; 0x6b
   1f924:	4a08      	ldr	r2, [pc, #32]	; (1f948 <nrfx_ipc_receive_event_enable+0x34>)
   1f926:	f00a feb4 	bl	2a692 <assert_print>
   1f92a:	216b      	movs	r1, #107	; 0x6b
   1f92c:	4806      	ldr	r0, [pc, #24]	; (1f948 <nrfx_ipc_receive_event_enable+0x34>)
   1f92e:	f00a fea9 	bl	2a684 <assert_post_action>
   1f932:	4a06      	ldr	r2, [pc, #24]	; (1f94c <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1f934:	4083      	lsls	r3, r0
   1f936:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f93a:	bd08      	pop	{r3, pc}
   1f93c:	20021960 	.word	0x20021960
   1f940:	000375ab 	.word	0x000375ab
   1f944:	00032629 	.word	0x00032629
   1f948:	00037567 	.word	0x00037567
   1f94c:	4002a000 	.word	0x4002a000

0001f950 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1f950:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f952:	4b09      	ldr	r3, [pc, #36]	; (1f978 <nrfx_ipc_receive_event_disable+0x28>)
   1f954:	791b      	ldrb	r3, [r3, #4]
   1f956:	2b01      	cmp	r3, #1
   1f958:	d009      	beq.n	1f96e <nrfx_ipc_receive_event_disable+0x1e>
   1f95a:	4908      	ldr	r1, [pc, #32]	; (1f97c <nrfx_ipc_receive_event_disable+0x2c>)
   1f95c:	4808      	ldr	r0, [pc, #32]	; (1f980 <nrfx_ipc_receive_event_disable+0x30>)
   1f95e:	2371      	movs	r3, #113	; 0x71
   1f960:	4a08      	ldr	r2, [pc, #32]	; (1f984 <nrfx_ipc_receive_event_disable+0x34>)
   1f962:	f00a fe96 	bl	2a692 <assert_print>
   1f966:	2171      	movs	r1, #113	; 0x71
   1f968:	4806      	ldr	r0, [pc, #24]	; (1f984 <nrfx_ipc_receive_event_disable+0x34>)
   1f96a:	f00a fe8b 	bl	2a684 <assert_post_action>
    p_reg->INTENCLR = mask;
   1f96e:	4a06      	ldr	r2, [pc, #24]	; (1f988 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1f970:	4083      	lsls	r3, r0
   1f972:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1f976:	bd08      	pop	{r3, pc}
   1f978:	20021960 	.word	0x20021960
   1f97c:	000375ab 	.word	0x000375ab
   1f980:	00032629 	.word	0x00032629
   1f984:	00037567 	.word	0x00037567
   1f988:	4002a000 	.word	0x4002a000

0001f98c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1f98e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f990:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1f992:	4b12      	ldr	r3, [pc, #72]	; (1f9dc <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1f994:	4d12      	ldr	r5, [pc, #72]	; (1f9e0 <nrfx_ipc_irq_handler+0x54>)
   1f996:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1f99a:	b904      	cbnz	r4, 1f99e <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1f99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1f99e:	fa94 f0a4 	rbit	r0, r4
   1f9a2:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1f9a6:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1f9aa:	280f      	cmp	r0, #15
   1f9ac:	ea24 0403 	bic.w	r4, r4, r3
   1f9b0:	dd0b      	ble.n	1f9ca <nrfx_ipc_irq_handler+0x3e>
   1f9b2:	490c      	ldr	r1, [pc, #48]	; (1f9e4 <nrfx_ipc_irq_handler+0x58>)
   1f9b4:	480c      	ldr	r0, [pc, #48]	; (1f9e8 <nrfx_ipc_irq_handler+0x5c>)
   1f9b6:	f240 13e7 	movw	r3, #487	; 0x1e7
   1f9ba:	4a0c      	ldr	r2, [pc, #48]	; (1f9ec <nrfx_ipc_irq_handler+0x60>)
   1f9bc:	f00a fe69 	bl	2a692 <assert_print>
   1f9c0:	f240 11e7 	movw	r1, #487	; 0x1e7
   1f9c4:	4809      	ldr	r0, [pc, #36]	; (1f9ec <nrfx_ipc_irq_handler+0x60>)
   1f9c6:	f00a fe5d 	bl	2a684 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9ca:	4b09      	ldr	r3, [pc, #36]	; (1f9f0 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1f9cc:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9ce:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1f9d0:	682b      	ldr	r3, [r5, #0]
   1f9d2:	2b00      	cmp	r3, #0
   1f9d4:	d0e1      	beq.n	1f99a <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1f9d6:	68a9      	ldr	r1, [r5, #8]
   1f9d8:	4798      	blx	r3
   1f9da:	e7de      	b.n	1f99a <nrfx_ipc_irq_handler+0xe>
   1f9dc:	4002a000 	.word	0x4002a000
   1f9e0:	20021960 	.word	0x20021960
   1f9e4:	000334b1 	.word	0x000334b1
   1f9e8:	00032629 	.word	0x00032629
   1f9ec:	0003347f 	.word	0x0003347f
   1f9f0:	4002a100 	.word	0x4002a100

0001f9f4 <nvmc_word_write>:
   1f9f4:	4a04      	ldr	r2, [pc, #16]	; (1fa08 <nvmc_word_write+0x14>)
   1f9f6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1f9fa:	07db      	lsls	r3, r3, #31
   1f9fc:	d5fb      	bpl.n	1f9f6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1f9fe:	6001      	str	r1, [r0, #0]
   1fa00:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1fa04:	4770      	bx	lr
   1fa06:	bf00      	nop
   1fa08:	40039000 	.word	0x40039000

0001fa0c <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa0c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1fa10:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa12:	d30b      	bcc.n	1fa2c <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1fa14:	4910      	ldr	r1, [pc, #64]	; (1fa58 <nrfx_nvmc_page_erase+0x4c>)
   1fa16:	4811      	ldr	r0, [pc, #68]	; (1fa5c <nrfx_nvmc_page_erase+0x50>)
   1fa18:	f44f 7383 	mov.w	r3, #262	; 0x106
   1fa1c:	4a10      	ldr	r2, [pc, #64]	; (1fa60 <nrfx_nvmc_page_erase+0x54>)
   1fa1e:	f00a fe38 	bl	2a692 <assert_print>
   1fa22:	f44f 7183 	mov.w	r1, #262	; 0x106
   1fa26:	480e      	ldr	r0, [pc, #56]	; (1fa60 <nrfx_nvmc_page_erase+0x54>)
   1fa28:	f00a fe2c 	bl	2a684 <assert_post_action>
    return !(addr % flash_page_size_get());
   1fa2c:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1fa30:	b97b      	cbnz	r3, 1fa52 <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1fa32:	2202      	movs	r2, #2
   1fa34:	4b0b      	ldr	r3, [pc, #44]	; (1fa64 <nrfx_nvmc_page_erase+0x58>)
   1fa36:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1fa3a:	f04f 32ff 	mov.w	r2, #4294967295
   1fa3e:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1fa40:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fa44:	07d2      	lsls	r2, r2, #31
   1fa46:	d5fb      	bpl.n	1fa40 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1fa48:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1fa4a:	4807      	ldr	r0, [pc, #28]	; (1fa68 <nrfx_nvmc_page_erase+0x5c>)
   1fa4c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1fa50:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1fa52:	4806      	ldr	r0, [pc, #24]	; (1fa6c <nrfx_nvmc_page_erase+0x60>)
   1fa54:	e7fc      	b.n	1fa50 <nrfx_nvmc_page_erase+0x44>
   1fa56:	bf00      	nop
   1fa58:	00037634 	.word	0x00037634
   1fa5c:	00032629 	.word	0x00032629
   1fa60:	000375d8 	.word	0x000375d8
   1fa64:	40039000 	.word	0x40039000
   1fa68:	0bad0000 	.word	0x0bad0000
   1fa6c:	0bad000a 	.word	0x0bad000a

0001fa70 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa70:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1fa74:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa76:	d30b      	bcc.n	1fa90 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1fa78:	4910      	ldr	r1, [pc, #64]	; (1fabc <nrfx_nvmc_word_write+0x4c>)
   1fa7a:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1fa7e:	4a10      	ldr	r2, [pc, #64]	; (1fac0 <nrfx_nvmc_word_write+0x50>)
   1fa80:	4810      	ldr	r0, [pc, #64]	; (1fac4 <nrfx_nvmc_word_write+0x54>)
   1fa82:	f00a fe06 	bl	2a692 <assert_print>
   1fa86:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1fa8a:	480d      	ldr	r0, [pc, #52]	; (1fac0 <nrfx_nvmc_word_write+0x50>)
   1fa8c:	f00a fdfa 	bl	2a684 <assert_post_action>
   1fa90:	f010 0403 	ands.w	r4, r0, #3
   1fa94:	d009      	beq.n	1faaa <nrfx_nvmc_word_write+0x3a>
   1fa96:	490c      	ldr	r1, [pc, #48]	; (1fac8 <nrfx_nvmc_word_write+0x58>)
   1fa98:	f240 1395 	movw	r3, #405	; 0x195
   1fa9c:	4a08      	ldr	r2, [pc, #32]	; (1fac0 <nrfx_nvmc_word_write+0x50>)
   1fa9e:	4809      	ldr	r0, [pc, #36]	; (1fac4 <nrfx_nvmc_word_write+0x54>)
   1faa0:	f00a fdf7 	bl	2a692 <assert_print>
   1faa4:	f240 1195 	movw	r1, #405	; 0x195
   1faa8:	e7ef      	b.n	1fa8a <nrfx_nvmc_word_write+0x1a>
   1faaa:	2301      	movs	r3, #1
   1faac:	4d07      	ldr	r5, [pc, #28]	; (1facc <nrfx_nvmc_word_write+0x5c>)
   1faae:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1fab2:	f7ff ff9f 	bl	1f9f4 <nvmc_word_write>
   1fab6:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1faba:	bd38      	pop	{r3, r4, r5, pc}
   1fabc:	0003764e 	.word	0x0003764e
   1fac0:	000375d8 	.word	0x000375d8
   1fac4:	00032629 	.word	0x00032629
   1fac8:	00037668 	.word	0x00037668
   1facc:	40039000 	.word	0x40039000

0001fad0 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1fad0:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1fad2:	4d43      	ldr	r5, [pc, #268]	; (1fbe0 <qspi_xfer+0x110>)
   1fad4:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1fad8:	b94c      	cbnz	r4, 1faee <qspi_xfer+0x1e>
   1fada:	4942      	ldr	r1, [pc, #264]	; (1fbe4 <qspi_xfer+0x114>)
   1fadc:	2368      	movs	r3, #104	; 0x68
   1fade:	4a42      	ldr	r2, [pc, #264]	; (1fbe8 <qspi_xfer+0x118>)
   1fae0:	4842      	ldr	r0, [pc, #264]	; (1fbec <qspi_xfer+0x11c>)
   1fae2:	f00a fdd6 	bl	2a692 <assert_print>
   1fae6:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1fae8:	483f      	ldr	r0, [pc, #252]	; (1fbe8 <qspi_xfer+0x118>)
   1faea:	f00a fdcb 	bl	2a684 <assert_post_action>
   1faee:	b938      	cbnz	r0, 1fb00 <qspi_xfer+0x30>
   1faf0:	493f      	ldr	r1, [pc, #252]	; (1fbf0 <qspi_xfer+0x120>)
   1faf2:	2369      	movs	r3, #105	; 0x69
   1faf4:	4a3c      	ldr	r2, [pc, #240]	; (1fbe8 <qspi_xfer+0x118>)
   1faf6:	483d      	ldr	r0, [pc, #244]	; (1fbec <qspi_xfer+0x11c>)
   1faf8:	f00a fdcb 	bl	2a692 <assert_print>
   1fafc:	2169      	movs	r1, #105	; 0x69
   1fafe:	e7f3      	b.n	1fae8 <qspi_xfer+0x18>
   1fb00:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1fb04:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1fb08:	d165      	bne.n	1fbd6 <qspi_xfer+0x106>
   1fb0a:	0786      	lsls	r6, r0, #30
   1fb0c:	d163      	bne.n	1fbd6 <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1fb0e:	2c01      	cmp	r4, #1
   1fb10:	d001      	beq.n	1fb16 <qspi_xfer+0x46>
   1fb12:	429c      	cmp	r4, r3
   1fb14:	d161      	bne.n	1fbda <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1fb16:	682c      	ldr	r4, [r5, #0]
   1fb18:	bb04      	cbnz	r4, 1fb5c <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fb1a:	2b02      	cmp	r3, #2
   1fb1c:	4b35      	ldr	r3, [pc, #212]	; (1fbf4 <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1fb1e:	bf0b      	itete	eq
   1fb20:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1fb24:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fb28:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fb2c:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1fb30:	bf0b      	itete	eq
   1fb32:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1fb36:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1fb3a:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1fb3c:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fb3e:	2100      	movs	r1, #0
   1fb40:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fb44:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1fb48:	2201      	movs	r2, #1
   1fb4a:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1fb4e:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fb50:	4a28      	ldr	r2, [pc, #160]	; (1fbf4 <qspi_xfer+0x124>)
   1fb52:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1fb56:	2b00      	cmp	r3, #0
   1fb58:	d0fb      	beq.n	1fb52 <qspi_xfer+0x82>
   1fb5a:	e00d      	b.n	1fb78 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1fb5c:	68ae      	ldr	r6, [r5, #8]
   1fb5e:	4c25      	ldr	r4, [pc, #148]	; (1fbf4 <qspi_xfer+0x124>)
   1fb60:	b166      	cbz	r6, 1fb7c <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fb62:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1fb64:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1fb66:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1fb68:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fb6a:	d12d      	bne.n	1fbc8 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1fb6c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fb70:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1fb74:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1fb78:	481f      	ldr	r0, [pc, #124]	; (1fbf8 <qspi_xfer+0x128>)
}
   1fb7a:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fb7c:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1fb7e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1fb82:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1fb84:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1fb86:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1fb88:	bf0c      	ite	eq
   1fb8a:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1fb8e:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fb92:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fb96:	bf0b      	itete	eq
   1fb98:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fb9c:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1fba0:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1fba4:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1fba8:	bf08      	it	eq
   1fbaa:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fbac:	4911      	ldr	r1, [pc, #68]	; (1fbf4 <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1fbae:	bf18      	it	ne
   1fbb0:	2304      	movne	r3, #4
   1fbb2:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1fbb6:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fbb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fbbc:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1fbc0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fbc4:	601a      	str	r2, [r3, #0]
}
   1fbc6:	e7d7      	b.n	1fb78 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1fbc8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fbcc:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1fbd0:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1fbd4:	e7d0      	b.n	1fb78 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1fbd6:	4809      	ldr	r0, [pc, #36]	; (1fbfc <qspi_xfer+0x12c>)
   1fbd8:	e7cf      	b.n	1fb7a <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1fbda:	4809      	ldr	r0, [pc, #36]	; (1fc00 <qspi_xfer+0x130>)
   1fbdc:	e7cd      	b.n	1fb7a <qspi_xfer+0xaa>
   1fbde:	bf00      	nop
   1fbe0:	2002196c 	.word	0x2002196c
   1fbe4:	000376cd 	.word	0x000376cd
   1fbe8:	00037691 	.word	0x00037691
   1fbec:	00032629 	.word	0x00032629
   1fbf0:	000376f9 	.word	0x000376f9
   1fbf4:	4002b000 	.word	0x4002b000
   1fbf8:	0bad0000 	.word	0x0bad0000
   1fbfc:	0bad000a 	.word	0x0bad000a
   1fc00:	0bad000b 	.word	0x0bad000b

0001fc04 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1fc04:	b538      	push	{r3, r4, r5, lr}
   1fc06:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fc08:	4d06      	ldr	r5, [pc, #24]	; (1fc24 <qspi_ready_wait+0x20>)
   1fc0a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1fc0e:	b933      	cbnz	r3, 1fc1e <qspi_ready_wait+0x1a>
   1fc10:	200a      	movs	r0, #10
   1fc12:	f00e ff37 	bl	2ea84 <nrfx_busy_wait>
   1fc16:	3c01      	subs	r4, #1
   1fc18:	d1f7      	bne.n	1fc0a <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1fc1a:	4803      	ldr	r0, [pc, #12]	; (1fc28 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1fc1c:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1fc1e:	4803      	ldr	r0, [pc, #12]	; (1fc2c <qspi_ready_wait+0x28>)
   1fc20:	e7fc      	b.n	1fc1c <qspi_ready_wait+0x18>
   1fc22:	bf00      	nop
   1fc24:	4002b000 	.word	0x4002b000
   1fc28:	0bad0007 	.word	0x0bad0007
   1fc2c:	0bad0000 	.word	0x0bad0000

0001fc30 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1fc30:	4b08      	ldr	r3, [pc, #32]	; (1fc54 <qspi_event_xfer_handle.constprop.0+0x24>)
   1fc32:	689a      	ldr	r2, [r3, #8]
   1fc34:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1fc36:	691a      	ldr	r2, [r3, #16]
   1fc38:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1fc3a:	699a      	ldr	r2, [r3, #24]
   1fc3c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1fc3e:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1fc40:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1fc42:	b132      	cbz	r2, 1fc52 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1fc44:	695a      	ldr	r2, [r3, #20]
   1fc46:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1fc48:	69da      	ldr	r2, [r3, #28]
   1fc4a:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1fc4c:	2200      	movs	r2, #0
   1fc4e:	60da      	str	r2, [r3, #12]
   1fc50:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1fc52:	4770      	bx	lr
   1fc54:	2002196c 	.word	0x2002196c

0001fc58 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1fc58:	b508      	push	{r3, lr}
    switch (port)
   1fc5a:	0943      	lsrs	r3, r0, #5
   1fc5c:	d00d      	beq.n	1fc7a <nrf_gpio_cfg.constprop.0+0x22>
   1fc5e:	2b01      	cmp	r3, #1
   1fc60:	d01e      	beq.n	1fca0 <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc62:	4914      	ldr	r1, [pc, #80]	; (1fcb4 <nrf_gpio_cfg.constprop.0+0x5c>)
   1fc64:	4814      	ldr	r0, [pc, #80]	; (1fcb8 <nrf_gpio_cfg.constprop.0+0x60>)
   1fc66:	f240 2347 	movw	r3, #583	; 0x247
   1fc6a:	4a14      	ldr	r2, [pc, #80]	; (1fcbc <nrf_gpio_cfg.constprop.0+0x64>)
   1fc6c:	f00a fd11 	bl	2a692 <assert_print>
   1fc70:	f240 2147 	movw	r1, #583	; 0x247
   1fc74:	4811      	ldr	r0, [pc, #68]	; (1fcbc <nrf_gpio_cfg.constprop.0+0x64>)
   1fc76:	f00a fd05 	bl	2a684 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1fc7a:	f04f 33ff 	mov.w	r3, #4294967295
   1fc7e:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc80:	07da      	lsls	r2, r3, #31
   1fc82:	d5ee      	bpl.n	1fc62 <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1fc84:	4a0e      	ldr	r2, [pc, #56]	; (1fcc0 <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1fc86:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1fc8a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1fc8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1fc92:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1fc96:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1fc9a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1fc9e:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1fca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1fca4:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1fca8:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcaa:	07db      	lsls	r3, r3, #31
   1fcac:	d5d9      	bpl.n	1fc62 <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1fcae:	4a05      	ldr	r2, [pc, #20]	; (1fcc4 <nrf_gpio_cfg.constprop.0+0x6c>)
   1fcb0:	e7e9      	b.n	1fc86 <nrf_gpio_cfg.constprop.0+0x2e>
   1fcb2:	bf00      	nop
   1fcb4:	00036bd3 	.word	0x00036bd3
   1fcb8:	00032629 	.word	0x00032629
   1fcbc:	00036ba0 	.word	0x00036ba0
   1fcc0:	40842500 	.word	0x40842500
   1fcc4:	40842800 	.word	0x40842800

0001fcc8 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1fcc8:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1fcca:	4b0e      	ldr	r3, [pc, #56]	; (1fd04 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1fccc:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1fcce:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1fcd2:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1fcd6:	2807      	cmp	r0, #7
   1fcd8:	d813      	bhi.n	1fd02 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1fcda:	e8df f000 	tbb	[pc, r0]
   1fcde:	0f11      	.short	0x0f11
   1fce0:	080a0b0d 	.word	0x080a0b0d
   1fce4:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1fce6:	0e10      	lsrs	r0, r2, #24
   1fce8:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1fcea:	0c10      	lsrs	r0, r2, #16
   1fcec:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1fcee:	0a10      	lsrs	r0, r2, #8
   1fcf0:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1fcf2:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1fcf4:	0e1a      	lsrs	r2, r3, #24
   1fcf6:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1fcf8:	0c1a      	lsrs	r2, r3, #16
   1fcfa:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1fcfc:	0a1a      	lsrs	r2, r3, #8
   1fcfe:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1fd00:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1fd02:	bd10      	pop	{r4, pc}
   1fd04:	4002b000 	.word	0x4002b000

0001fd08 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1fd08:	3802      	subs	r0, #2
   1fd0a:	2807      	cmp	r0, #7
   1fd0c:	d81f      	bhi.n	1fd4e <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1fd0e:	e8df f000 	tbb	[pc, r0]
   1fd12:	2729      	.short	0x2729
   1fd14:	21231125 	.word	0x21231125
   1fd18:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1fd1a:	79cb      	ldrb	r3, [r1, #7]
   1fd1c:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1fd1e:	798a      	ldrb	r2, [r1, #6]
   1fd20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1fd24:	794a      	ldrb	r2, [r1, #5]
   1fd26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1fd2a:	790a      	ldrb	r2, [r1, #4]
   1fd2c:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1fd2e:	4a0e      	ldr	r2, [pc, #56]	; (1fd68 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1fd30:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1fd34:	78cb      	ldrb	r3, [r1, #3]
   1fd36:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1fd38:	788a      	ldrb	r2, [r1, #2]
   1fd3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1fd3e:	784a      	ldrb	r2, [r1, #1]
   1fd40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1fd44:	780a      	ldrb	r2, [r1, #0]
   1fd46:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1fd48:	4a07      	ldr	r2, [pc, #28]	; (1fd68 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1fd4a:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1fd4e:	4770      	bx	lr
    switch (length)
   1fd50:	2300      	movs	r3, #0
   1fd52:	e7e4      	b.n	1fd1e <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1fd54:	2300      	movs	r3, #0
   1fd56:	e7e5      	b.n	1fd24 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1fd58:	2300      	movs	r3, #0
   1fd5a:	e7e6      	b.n	1fd2a <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1fd5c:	2300      	movs	r3, #0
   1fd5e:	e7eb      	b.n	1fd38 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1fd60:	2300      	movs	r3, #0
   1fd62:	e7ec      	b.n	1fd3e <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1fd64:	2300      	movs	r3, #0
   1fd66:	e7ed      	b.n	1fd44 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1fd68:	4002b000 	.word	0x4002b000

0001fd6c <nrfx_qspi_init>:
{
   1fd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd6e:	460d      	mov	r5, r1
   1fd70:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1fd72:	4604      	mov	r4, r0
   1fd74:	b958      	cbnz	r0, 1fd8e <nrfx_qspi_init+0x22>
   1fd76:	496e      	ldr	r1, [pc, #440]	; (1ff30 <nrfx_qspi_init+0x1c4>)
   1fd78:	486e      	ldr	r0, [pc, #440]	; (1ff34 <nrfx_qspi_init+0x1c8>)
   1fd7a:	f44f 7388 	mov.w	r3, #272	; 0x110
   1fd7e:	4a6e      	ldr	r2, [pc, #440]	; (1ff38 <nrfx_qspi_init+0x1cc>)
   1fd80:	f00a fc87 	bl	2a692 <assert_print>
   1fd84:	f44f 7188 	mov.w	r1, #272	; 0x110
   1fd88:	486b      	ldr	r0, [pc, #428]	; (1ff38 <nrfx_qspi_init+0x1cc>)
   1fd8a:	f00a fc7b 	bl	2a684 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1fd8e:	4f6b      	ldr	r7, [pc, #428]	; (1ff3c <nrfx_qspi_init+0x1d0>)
   1fd90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1fd94:	2b00      	cmp	r3, #0
   1fd96:	f040 80c6 	bne.w	1ff26 <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1fd9a:	7cc2      	ldrb	r2, [r0, #19]
   1fd9c:	b112      	cbz	r2, 1fda4 <nrfx_qspi_init+0x38>
   1fd9e:	7d03      	ldrb	r3, [r0, #20]
   1fda0:	2b00      	cmp	r3, #0
   1fda2:	d170      	bne.n	1fe86 <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fda4:	7920      	ldrb	r0, [r4, #4]
   1fda6:	28ff      	cmp	r0, #255	; 0xff
   1fda8:	f000 80bf 	beq.w	1ff2a <nrfx_qspi_init+0x1be>
   1fdac:	7963      	ldrb	r3, [r4, #5]
   1fdae:	2bff      	cmp	r3, #255	; 0xff
   1fdb0:	f000 80bb 	beq.w	1ff2a <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fdb4:	79a3      	ldrb	r3, [r4, #6]
   1fdb6:	2bff      	cmp	r3, #255	; 0xff
   1fdb8:	f000 80b7 	beq.w	1ff2a <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1fdbc:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fdbe:	29ff      	cmp	r1, #255	; 0xff
   1fdc0:	f000 80b3 	beq.w	1ff2a <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1fdc4:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1fdc6:	f8df c178 	ldr.w	ip, [pc, #376]	; 1ff40 <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1fdca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1fdce:	4563      	cmp	r3, ip
   1fdd0:	f040 80ab 	bne.w	1ff2a <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1fdd4:	290e      	cmp	r1, #14
   1fdd6:	f040 80a8 	bne.w	1ff2a <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fdda:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1fddc:	2bff      	cmp	r3, #255	; 0xff
   1fdde:	d002      	beq.n	1fde6 <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fde0:	2b0f      	cmp	r3, #15
   1fde2:	f040 80a2 	bne.w	1ff2a <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fde6:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1fde8:	2bff      	cmp	r3, #255	; 0xff
   1fdea:	d002      	beq.n	1fdf2 <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fdec:	2b10      	cmp	r3, #16
   1fdee:	f040 809c 	bne.w	1ff2a <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1fdf2:	b9d2      	cbnz	r2, 1fe2a <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1fdf4:	2103      	movs	r1, #3
   1fdf6:	f7ff ff2f 	bl	1fc58 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1fdfa:	2103      	movs	r1, #3
   1fdfc:	7960      	ldrb	r0, [r4, #5]
   1fdfe:	f7ff ff2b 	bl	1fc58 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1fe02:	2103      	movs	r1, #3
   1fe04:	79a0      	ldrb	r0, [r4, #6]
   1fe06:	f7ff ff27 	bl	1fc58 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1fe0a:	79e0      	ldrb	r0, [r4, #7]
   1fe0c:	2103      	movs	r1, #3
   1fe0e:	f7ff ff23 	bl	1fc58 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1fe12:	7a20      	ldrb	r0, [r4, #8]
   1fe14:	28ff      	cmp	r0, #255	; 0xff
   1fe16:	d002      	beq.n	1fe1e <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1fe18:	2103      	movs	r1, #3
   1fe1a:	f7ff ff1d 	bl	1fc58 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1fe1e:	7a60      	ldrb	r0, [r4, #9]
   1fe20:	28ff      	cmp	r0, #255	; 0xff
   1fe22:	d002      	beq.n	1fe2a <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1fe24:	2103      	movs	r1, #3
   1fe26:	f7ff ff17 	bl	1fc58 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1fe2a:	7d23      	ldrb	r3, [r4, #20]
   1fe2c:	bb5b      	cbnz	r3, 1fe86 <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1fe2e:	7923      	ldrb	r3, [r4, #4]
   1fe30:	2bff      	cmp	r3, #255	; 0xff
   1fe32:	bf14      	ite	ne
   1fe34:	461a      	movne	r2, r3
   1fe36:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe3a:	4b42      	ldr	r3, [pc, #264]	; (1ff44 <nrfx_qspi_init+0x1d8>)
   1fe3c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1fe40:	7962      	ldrb	r2, [r4, #5]
   1fe42:	2aff      	cmp	r2, #255	; 0xff
   1fe44:	bf08      	it	eq
   1fe46:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe4a:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1fe4e:	79a2      	ldrb	r2, [r4, #6]
   1fe50:	2aff      	cmp	r2, #255	; 0xff
   1fe52:	bf08      	it	eq
   1fe54:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe58:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1fe5c:	79e2      	ldrb	r2, [r4, #7]
   1fe5e:	2aff      	cmp	r2, #255	; 0xff
   1fe60:	bf08      	it	eq
   1fe62:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe66:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1fe6a:	7a22      	ldrb	r2, [r4, #8]
   1fe6c:	2aff      	cmp	r2, #255	; 0xff
   1fe6e:	bf08      	it	eq
   1fe70:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe74:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1fe78:	7a62      	ldrb	r2, [r4, #9]
   1fe7a:	2aff      	cmp	r2, #255	; 0xff
   1fe7c:	bf08      	it	eq
   1fe7e:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe82:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1fe86:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1fe88:	4a2e      	ldr	r2, [pc, #184]	; (1ff44 <nrfx_qspi_init+0x1d8>)
   1fe8a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1fe8e:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1fe90:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1fe92:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1fe94:	019b      	lsls	r3, r3, #6
   1fe96:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1fe9a:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1fe9c:	7b61      	ldrb	r1, [r4, #13]
   1fe9e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1fea2:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1fea6:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1fea8:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1feac:	bbb1      	cbnz	r1, 1ff1c <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1feae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1feb2:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1feb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1feba:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1febe:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1fec2:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1fec4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1fec8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1fecc:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1fece:	7be1      	ldrb	r1, [r4, #15]
   1fed0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1fed4:	7c21      	ldrb	r1, [r4, #16]
   1fed6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1feda:	7c61      	ldrb	r1, [r4, #17]
   1fedc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1fee0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1fee4:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1fee6:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1feea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1feee:	2301      	movs	r3, #1
   1fef0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1fef4:	b115      	cbz	r5, 1fefc <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1fef6:	202b      	movs	r0, #43	; 0x2b
   1fef8:	f7f0 fd7c 	bl	109f4 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1fefc:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1fefe:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1ff00:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1ff04:	4b0f      	ldr	r3, [pc, #60]	; (1ff44 <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ff06:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1ff0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff0e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff12:	601a      	str	r2, [r3, #0]
}
   1ff14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1ff18:	f7ff be74 	b.w	1fc04 <qspi_ready_wait>
        regval &= ~(1 << 17);
   1ff1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1ff20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ff24:	e7c5      	b.n	1feb2 <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1ff26:	4808      	ldr	r0, [pc, #32]	; (1ff48 <nrfx_qspi_init+0x1dc>)
}
   1ff28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ff2a:	4808      	ldr	r0, [pc, #32]	; (1ff4c <nrfx_qspi_init+0x1e0>)
   1ff2c:	e7fc      	b.n	1ff28 <nrfx_qspi_init+0x1bc>
   1ff2e:	bf00      	nop
   1ff30:	000375a2 	.word	0x000375a2
   1ff34:	00032629 	.word	0x00032629
   1ff38:	00037691 	.word	0x00037691
   1ff3c:	2002196c 	.word	0x2002196c
   1ff40:	000d1211 	.word	0x000d1211
   1ff44:	4002b000 	.word	0x4002b000
   1ff48:	0bad0005 	.word	0x0bad0005
   1ff4c:	0bad0004 	.word	0x0bad0004

0001ff50 <nrfx_qspi_cinstr_xfer>:
{
   1ff50:	b570      	push	{r4, r5, r6, lr}
   1ff52:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ff54:	4a26      	ldr	r2, [pc, #152]	; (1fff0 <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1ff56:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ff58:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1ff5c:	b95a      	cbnz	r2, 1ff76 <nrfx_qspi_cinstr_xfer+0x26>
   1ff5e:	4925      	ldr	r1, [pc, #148]	; (1fff4 <nrfx_qspi_cinstr_xfer+0xa4>)
   1ff60:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1ff64:	4a24      	ldr	r2, [pc, #144]	; (1fff8 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ff66:	4825      	ldr	r0, [pc, #148]	; (1fffc <nrfx_qspi_cinstr_xfer+0xac>)
   1ff68:	f00a fb93 	bl	2a692 <assert_print>
   1ff6c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1ff70:	4821      	ldr	r0, [pc, #132]	; (1fff8 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ff72:	f00a fb87 	bl	2a684 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1ff76:	2a01      	cmp	r2, #1
   1ff78:	d137      	bne.n	1ffea <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff7a:	2200      	movs	r2, #0
   1ff7c:	4e20      	ldr	r6, [pc, #128]	; (20000 <nrfx_qspi_cinstr_xfer+0xb0>)
   1ff7e:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1ff82:	b111      	cbz	r1, 1ff8a <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1ff84:	7840      	ldrb	r0, [r0, #1]
   1ff86:	f7ff febf 	bl	1fd08 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1ff8a:	2301      	movs	r3, #1
   1ff8c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ff90:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ff92:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ff94:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ff96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1ff9a:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ff9c:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1ff9e:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ffa0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1ffa4:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1ffa6:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1ffaa:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1ffac:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1ffb0:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1ffb4:	f7ff fe26 	bl	1fc04 <qspi_ready_wait>
   1ffb8:	4b12      	ldr	r3, [pc, #72]	; (20004 <nrfx_qspi_cinstr_xfer+0xb4>)
   1ffba:	4298      	cmp	r0, r3
   1ffbc:	d10b      	bne.n	1ffd6 <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1ffbe:	792b      	ldrb	r3, [r5, #4]
   1ffc0:	b993      	cbnz	r3, 1ffe8 <nrfx_qspi_cinstr_xfer+0x98>
   1ffc2:	4911      	ldr	r1, [pc, #68]	; (20008 <nrfx_qspi_cinstr_xfer+0xb8>)
   1ffc4:	f240 136b 	movw	r3, #363	; 0x16b
   1ffc8:	4a0b      	ldr	r2, [pc, #44]	; (1fff8 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ffca:	480c      	ldr	r0, [pc, #48]	; (1fffc <nrfx_qspi_cinstr_xfer+0xac>)
   1ffcc:	f00a fb61 	bl	2a692 <assert_print>
   1ffd0:	f240 116b 	movw	r1, #363	; 0x16b
   1ffd4:	e7cc      	b.n	1ff70 <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ffd6:	2300      	movs	r3, #0
   1ffd8:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1ffdc:	b11c      	cbz	r4, 1ffe6 <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1ffde:	4621      	mov	r1, r4
   1ffe0:	7868      	ldrb	r0, [r5, #1]
   1ffe2:	f7ff fe71 	bl	1fcc8 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1ffe6:	4809      	ldr	r0, [pc, #36]	; (2000c <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1ffe8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1ffea:	4809      	ldr	r0, [pc, #36]	; (20010 <nrfx_qspi_cinstr_xfer+0xc0>)
   1ffec:	e7fc      	b.n	1ffe8 <nrfx_qspi_cinstr_xfer+0x98>
   1ffee:	bf00      	nop
   1fff0:	2002196c 	.word	0x2002196c
   1fff4:	000376cd 	.word	0x000376cd
   1fff8:	00037691 	.word	0x00037691
   1fffc:	00032629 	.word	0x00032629
   20000:	4002b000 	.word	0x4002b000
   20004:	0bad0007 	.word	0x0bad0007
   20008:	00037711 	.word	0x00037711
   2000c:	0bad0000 	.word	0x0bad0000
   20010:	0bad000b 	.word	0x0bad000b

00020014 <nrfx_qspi_mem_busy_check>:
{
   20014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   20016:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   20018:	4a0c      	ldr	r2, [pc, #48]	; (2004c <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   2001a:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   2001c:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   2001e:	f10d 0207 	add.w	r2, sp, #7
   20022:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   20024:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   20028:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   2002c:	f7ff ff90 	bl	1ff50 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   20030:	4b07      	ldr	r3, [pc, #28]	; (20050 <nrfx_qspi_mem_busy_check+0x3c>)
   20032:	4298      	cmp	r0, r3
   20034:	d106      	bne.n	20044 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   20036:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   2003a:	f013 0f01 	tst.w	r3, #1
   2003e:	4b05      	ldr	r3, [pc, #20]	; (20054 <nrfx_qspi_mem_busy_check+0x40>)
   20040:	bf18      	it	ne
   20042:	4618      	movne	r0, r3
}
   20044:	b005      	add	sp, #20
   20046:	f85d fb04 	ldr.w	pc, [sp], #4
   2004a:	bf00      	nop
   2004c:	01000205 	.word	0x01000205
   20050:	0bad0000 	.word	0x0bad0000
   20054:	0bad000b 	.word	0x0bad000b

00020058 <nrfx_qspi_uninit>:
{
   20058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2005c:	4e29      	ldr	r6, [pc, #164]	; (20104 <nrfx_qspi_uninit+0xac>)
   2005e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   20062:	b95b      	cbnz	r3, 2007c <nrfx_qspi_uninit+0x24>
   20064:	4928      	ldr	r1, [pc, #160]	; (20108 <nrfx_qspi_uninit+0xb0>)
   20066:	4829      	ldr	r0, [pc, #164]	; (2010c <nrfx_qspi_uninit+0xb4>)
   20068:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   2006c:	4a28      	ldr	r2, [pc, #160]	; (20110 <nrfx_qspi_uninit+0xb8>)
   2006e:	f00a fb10 	bl	2a692 <assert_print>
   20072:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   20076:	4826      	ldr	r0, [pc, #152]	; (20110 <nrfx_qspi_uninit+0xb8>)
   20078:	f00a fb04 	bl	2a684 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   2007c:	202b      	movs	r0, #43	; 0x2b
   2007e:	f7f0 fcc7 	bl	10a10 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   20082:	4b24      	ldr	r3, [pc, #144]	; (20114 <nrfx_qspi_uninit+0xbc>)
   20084:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   20088:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   2008c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   20090:	bf04      	itt	eq
   20092:	4a21      	ldreq	r2, [pc, #132]	; (20118 <nrfx_qspi_uninit+0xc0>)
   20094:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   20098:	2201      	movs	r2, #1
   2009a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2009e:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   200a0:	2200      	movs	r2, #0
   200a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   200a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   200aa:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   200ae:	bb22      	cbnz	r2, 200fa <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   200b0:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   200b4:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   200b8:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   200ba:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   200be:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   200c2:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   200c6:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   200ca:	f00e fd5e 	bl	2eb8a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   200ce:	fa5f f089 	uxtb.w	r0, r9
   200d2:	f00e fd5a 	bl	2eb8a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   200d6:	fa5f f088 	uxtb.w	r0, r8
   200da:	f00e fd56 	bl	2eb8a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   200de:	b2f8      	uxtb	r0, r7
   200e0:	f00e fd53 	bl	2eb8a <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   200e4:	b2e8      	uxtb	r0, r5
   200e6:	28ff      	cmp	r0, #255	; 0xff
   200e8:	b2e4      	uxtb	r4, r4
   200ea:	d001      	beq.n	200f0 <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   200ec:	f00e fd4d 	bl	2eb8a <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   200f0:	2cff      	cmp	r4, #255	; 0xff
   200f2:	d002      	beq.n	200fa <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   200f4:	4620      	mov	r0, r4
   200f6:	f00e fd48 	bl	2eb8a <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   200fa:	2300      	movs	r3, #0
   200fc:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   20100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20104:	2002196c 	.word	0x2002196c
   20108:	000376cd 	.word	0x000376cd
   2010c:	00032629 	.word	0x00032629
   20110:	00037691 	.word	0x00037691
   20114:	4002b000 	.word	0x4002b000
   20118:	00030100 	.word	0x00030100

0002011c <nrfx_qspi_erase>:
{
   2011c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2011e:	4a1a      	ldr	r2, [pc, #104]	; (20188 <nrfx_qspi_erase+0x6c>)
   20120:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   20124:	b95b      	cbnz	r3, 2013e <nrfx_qspi_erase+0x22>
   20126:	4919      	ldr	r1, [pc, #100]	; (2018c <nrfx_qspi_erase+0x70>)
   20128:	4819      	ldr	r0, [pc, #100]	; (20190 <nrfx_qspi_erase+0x74>)
   2012a:	f44f 730a 	mov.w	r3, #552	; 0x228
   2012e:	4a19      	ldr	r2, [pc, #100]	; (20194 <nrfx_qspi_erase+0x78>)
   20130:	f00a faaf 	bl	2a692 <assert_print>
   20134:	f44f 710a 	mov.w	r1, #552	; 0x228
   20138:	4816      	ldr	r0, [pc, #88]	; (20194 <nrfx_qspi_erase+0x78>)
   2013a:	f00a faa3 	bl	2a684 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   2013e:	078c      	lsls	r4, r1, #30
   20140:	d11e      	bne.n	20180 <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   20142:	6814      	ldr	r4, [r2, #0]
   20144:	b10c      	cbz	r4, 2014a <nrfx_qspi_erase+0x2e>
   20146:	2b01      	cmp	r3, #1
   20148:	d11c      	bne.n	20184 <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   2014a:	2304      	movs	r3, #4
   2014c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   20150:	4b11      	ldr	r3, [pc, #68]	; (20198 <nrfx_qspi_erase+0x7c>)
   20152:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20156:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   20158:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2015c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20160:	2101      	movs	r1, #1
   20162:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   20164:	6810      	ldr	r0, [r2, #0]
   20166:	b940      	cbnz	r0, 2017a <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20168:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2016c:	2900      	cmp	r1, #0
   2016e:	d0fb      	beq.n	20168 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   20170:	2301      	movs	r3, #1
   20172:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   20176:	4809      	ldr	r0, [pc, #36]	; (2019c <nrfx_qspi_erase+0x80>)
}
   20178:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   2017a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   2017e:	e7fa      	b.n	20176 <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   20180:	4807      	ldr	r0, [pc, #28]	; (201a0 <nrfx_qspi_erase+0x84>)
   20182:	e7f9      	b.n	20178 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   20184:	4807      	ldr	r0, [pc, #28]	; (201a4 <nrfx_qspi_erase+0x88>)
   20186:	e7f7      	b.n	20178 <nrfx_qspi_erase+0x5c>
   20188:	2002196c 	.word	0x2002196c
   2018c:	000376cd 	.word	0x000376cd
   20190:	00032629 	.word	0x00032629
   20194:	00037691 	.word	0x00037691
   20198:	4002b000 	.word	0x4002b000
   2019c:	0bad0000 	.word	0x0bad0000
   201a0:	0bad000a 	.word	0x0bad000a
   201a4:	0bad000b 	.word	0x0bad000b

000201a8 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   201a8:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   201aa:	4b17      	ldr	r3, [pc, #92]	; (20208 <nrfx_qspi_irq_handler+0x60>)
   201ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   201b0:	b1e2      	cbz	r2, 201ec <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201b2:	2200      	movs	r2, #0
    switch (m_cb.state)
   201b4:	4c15      	ldr	r4, [pc, #84]	; (2020c <nrfx_qspi_irq_handler+0x64>)
   201b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   201ba:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   201be:	2a03      	cmp	r2, #3
   201c0:	d015      	beq.n	201ee <nrfx_qspi_irq_handler+0x46>
   201c2:	2a04      	cmp	r2, #4
   201c4:	d015      	beq.n	201f2 <nrfx_qspi_irq_handler+0x4a>
   201c6:	2a02      	cmp	r2, #2
   201c8:	d104      	bne.n	201d4 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   201ca:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   201cc:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   201d0:	f7ff fd2e 	bl	1fc30 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   201d4:	68a3      	ldr	r3, [r4, #8]
   201d6:	b913      	cbnz	r3, 201de <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   201d8:	2301      	movs	r3, #1
   201da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   201de:	e9d4 3100 	ldrd	r3, r1, [r4]
   201e2:	2000      	movs	r0, #0
   201e4:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   201e6:	2300      	movs	r3, #0
   201e8:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   201ec:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   201ee:	2302      	movs	r3, #2
   201f0:	e7ec      	b.n	201cc <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   201f2:	2203      	movs	r2, #3
   201f4:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   201f8:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   201fc:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   201fe:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   20202:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   20206:	e7e5      	b.n	201d4 <nrfx_qspi_irq_handler+0x2c>
   20208:	4002b000 	.word	0x4002b000
   2020c:	2002196c 	.word	0x2002196c

00020210 <nrf_gpio_pin_port_decode>:
{
   20210:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20212:	6803      	ldr	r3, [r0, #0]
    switch (port)
   20214:	095a      	lsrs	r2, r3, #5
   20216:	d00d      	beq.n	20234 <nrf_gpio_pin_port_decode+0x24>
   20218:	2a01      	cmp	r2, #1
   2021a:	d013      	beq.n	20244 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2021c:	490e      	ldr	r1, [pc, #56]	; (20258 <nrf_gpio_pin_port_decode+0x48>)
   2021e:	480f      	ldr	r0, [pc, #60]	; (2025c <nrf_gpio_pin_port_decode+0x4c>)
   20220:	f240 2347 	movw	r3, #583	; 0x247
   20224:	4a0e      	ldr	r2, [pc, #56]	; (20260 <nrf_gpio_pin_port_decode+0x50>)
   20226:	f00a fa34 	bl	2a692 <assert_print>
   2022a:	f240 2147 	movw	r1, #583	; 0x247
   2022e:	480c      	ldr	r0, [pc, #48]	; (20260 <nrf_gpio_pin_port_decode+0x50>)
   20230:	f00a fa28 	bl	2a684 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   20234:	f04f 32ff 	mov.w	r2, #4294967295
   20238:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2023c:	07d9      	lsls	r1, r3, #31
   2023e:	d5ed      	bpl.n	2021c <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   20240:	4808      	ldr	r0, [pc, #32]	; (20264 <nrf_gpio_pin_port_decode+0x54>)
   20242:	e008      	b.n	20256 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   20244:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   20248:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2024c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2024e:	07d2      	lsls	r2, r2, #31
   20250:	d5e4      	bpl.n	2021c <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   20252:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   20254:	4804      	ldr	r0, [pc, #16]	; (20268 <nrf_gpio_pin_port_decode+0x58>)
}
   20256:	bd08      	pop	{r3, pc}
   20258:	00036bd3 	.word	0x00036bd3
   2025c:	00032629 	.word	0x00032629
   20260:	00036ba0 	.word	0x00036ba0
   20264:	40842500 	.word	0x40842500
   20268:	40842800 	.word	0x40842800

0002026c <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   2026c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20270:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   20272:	460c      	mov	r4, r1
   20274:	b959      	cbnz	r1, 2028e <nrfx_spim_init+0x22>
   20276:	498d      	ldr	r1, [pc, #564]	; (204ac <nrfx_spim_init+0x240>)
   20278:	488d      	ldr	r0, [pc, #564]	; (204b0 <nrfx_spim_init+0x244>)
   2027a:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   2027e:	4a8d      	ldr	r2, [pc, #564]	; (204b4 <nrfx_spim_init+0x248>)
   20280:	f00a fa07 	bl	2a692 <assert_print>
   20284:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   20288:	488a      	ldr	r0, [pc, #552]	; (204b4 <nrfx_spim_init+0x248>)
   2028a:	f00a f9fb 	bl	2a684 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2028e:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   20290:	4d89      	ldr	r5, [pc, #548]	; (204b8 <nrfx_spim_init+0x24c>)
   20292:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   20296:	7f09      	ldrb	r1, [r1, #28]
   20298:	2900      	cmp	r1, #0
   2029a:	f040 8100 	bne.w	2049e <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   2029e:	2f00      	cmp	r7, #0
   202a0:	f040 80ff 	bne.w	204a2 <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   202a4:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202a8:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   202aa:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202ac:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   202b0:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202b2:	d027      	beq.n	20304 <nrfx_spim_init+0x98>
   202b4:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   202b8:	d124      	bne.n	20304 <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   202ba:	b119      	cbz	r1, 202c4 <nrfx_spim_init+0x58>
   202bc:	7d20      	ldrb	r0, [r4, #20]
   202be:	2800      	cmp	r0, #0
   202c0:	f040 80d5 	bne.w	2046e <nrfx_spim_init+0x202>
   202c4:	487d      	ldr	r0, [pc, #500]	; (204bc <nrfx_spim_init+0x250>)
   202c6:	4581      	cmp	r9, r0
   202c8:	d11c      	bne.n	20304 <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   202ca:	7820      	ldrb	r0, [r4, #0]
   202cc:	28ff      	cmp	r0, #255	; 0xff
   202ce:	d002      	beq.n	202d6 <nrfx_spim_init+0x6a>
   202d0:	2808      	cmp	r0, #8
   202d2:	f040 80e8 	bne.w	204a6 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   202d6:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   202d8:	28ff      	cmp	r0, #255	; 0xff
   202da:	d002      	beq.n	202e2 <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   202dc:	280b      	cmp	r0, #11
   202de:	f040 80e2 	bne.w	204a6 <nrfx_spim_init+0x23a>
   202e2:	2eff      	cmp	r6, #255	; 0xff
   202e4:	d002      	beq.n	202ec <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   202e6:	2e0c      	cmp	r6, #12
   202e8:	f040 80dd 	bne.w	204a6 <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   202ec:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   202ee:	28ff      	cmp	r0, #255	; 0xff
   202f0:	d002      	beq.n	202f8 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   202f2:	2809      	cmp	r0, #9
   202f4:	f040 80d7 	bne.w	204a6 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   202f8:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   202fa:	28ff      	cmp	r0, #255	; 0xff
   202fc:	d002      	beq.n	20304 <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   202fe:	280a      	cmp	r0, #10
   20300:	f040 80d1 	bne.w	204a6 <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   20304:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   20308:	7fab      	ldrb	r3, [r5, #30]
   2030a:	f361 0300 	bfi	r3, r1, #0, #1
   2030e:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   20310:	7922      	ldrb	r2, [r4, #4]
   20312:	b2db      	uxtb	r3, r3
   20314:	f362 0341 	bfi	r3, r2, #1, #1
   20318:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   2031a:	7c62      	ldrb	r2, [r4, #17]
   2031c:	b2db      	uxtb	r3, r3
   2031e:	f362 0382 	bfi	r3, r2, #2, #1
   20322:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   20324:	78e3      	ldrb	r3, [r4, #3]
   20326:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   20328:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2032a:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   2032e:	2b00      	cmp	r3, #0
   20330:	d142      	bne.n	203b8 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   20332:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   20334:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   20336:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   2033a:	7b23      	ldrb	r3, [r4, #12]
   2033c:	bf08      	it	eq
   2033e:	2703      	moveq	r7, #3
   20340:	2b01      	cmp	r3, #1
   20342:	f200 8096 	bhi.w	20472 <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   20346:	f00e fc2d 	bl	2eba4 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   2034a:	2300      	movs	r3, #0
   2034c:	9700      	str	r7, [sp, #0]
   2034e:	7820      	ldrb	r0, [r4, #0]
   20350:	461a      	mov	r2, r3
   20352:	2101      	movs	r1, #1
   20354:	f00e fc4e 	bl	2ebf4 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   20358:	7860      	ldrb	r0, [r4, #1]
   2035a:	28ff      	cmp	r0, #255	; 0xff
   2035c:	d008      	beq.n	20370 <nrfx_spim_init+0x104>
   2035e:	f00e fc21 	bl	2eba4 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   20362:	2201      	movs	r2, #1
   20364:	9700      	str	r7, [sp, #0]
   20366:	2300      	movs	r3, #0
   20368:	4611      	mov	r1, r2
   2036a:	7860      	ldrb	r0, [r4, #1]
   2036c:	f00e fc42 	bl	2ebf4 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   20370:	78a0      	ldrb	r0, [r4, #2]
   20372:	28ff      	cmp	r0, #255	; 0xff
   20374:	d005      	beq.n	20382 <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   20376:	2200      	movs	r2, #0
   20378:	9700      	str	r7, [sp, #0]
   2037a:	4611      	mov	r1, r2
   2037c:	7ba3      	ldrb	r3, [r4, #14]
   2037e:	f00e fc39 	bl	2ebf4 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   20382:	78e0      	ldrb	r0, [r4, #3]
   20384:	28ff      	cmp	r0, #255	; 0xff
   20386:	d00b      	beq.n	203a0 <nrfx_spim_init+0x134>
    if (value == 0)
   20388:	7923      	ldrb	r3, [r4, #4]
   2038a:	2b00      	cmp	r3, #0
   2038c:	d074      	beq.n	20478 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   2038e:	f00e fc09 	bl	2eba4 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   20392:	2201      	movs	r2, #1
   20394:	9700      	str	r7, [sp, #0]
   20396:	2300      	movs	r3, #0
   20398:	4611      	mov	r1, r2
   2039a:	78e0      	ldrb	r0, [r4, #3]
   2039c:	f00e fc2a 	bl	2ebf4 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   203a0:	7be0      	ldrb	r0, [r4, #15]
   203a2:	28ff      	cmp	r0, #255	; 0xff
   203a4:	d008      	beq.n	203b8 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   203a6:	f00e fc09 	bl	2ebbc <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   203aa:	2201      	movs	r2, #1
   203ac:	9700      	str	r7, [sp, #0]
   203ae:	2300      	movs	r3, #0
   203b0:	4611      	mov	r1, r2
   203b2:	7be0      	ldrb	r0, [r4, #15]
   203b4:	f00e fc1e 	bl	2ebf4 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   203b8:	7d23      	ldrb	r3, [r4, #20]
   203ba:	bb6b      	cbnz	r3, 20418 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   203bc:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   203be:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   203c0:	2bff      	cmp	r3, #255	; 0xff
   203c2:	bf18      	it	ne
   203c4:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   203c6:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   203c8:	bf08      	it	eq
   203ca:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   203ce:	2bff      	cmp	r3, #255	; 0xff
   203d0:	bf08      	it	eq
   203d2:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   203d6:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   203da:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   203de:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   203e2:	f898 3004 	ldrb.w	r3, [r8, #4]
   203e6:	b9bb      	cbnz	r3, 20418 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   203e8:	78e3      	ldrb	r3, [r4, #3]
   203ea:	2bff      	cmp	r3, #255	; 0xff
   203ec:	d047      	beq.n	2047e <nrfx_spim_init+0x212>
   203ee:	7c62      	ldrb	r2, [r4, #17]
   203f0:	2a00      	cmp	r2, #0
   203f2:	d044      	beq.n	2047e <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   203f4:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   203f6:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   203f8:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   203fc:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   20400:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   20404:	f898 3004 	ldrb.w	r3, [r8, #4]
   20408:	b933      	cbnz	r3, 20418 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   2040a:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   2040c:	2bff      	cmp	r3, #255	; 0xff
   2040e:	bf08      	it	eq
   20410:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   20414:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   20418:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   2041a:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   2041e:	68a3      	ldr	r3, [r4, #8]
   20420:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   20424:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   20426:	7b22      	ldrb	r2, [r4, #12]
   20428:	3b00      	subs	r3, #0
   2042a:	bf18      	it	ne
   2042c:	2301      	movne	r3, #1
    switch (spi_mode)
   2042e:	2a02      	cmp	r2, #2
   20430:	d02f      	beq.n	20492 <nrfx_spim_init+0x226>
   20432:	2a03      	cmp	r2, #3
   20434:	d030      	beq.n	20498 <nrfx_spim_init+0x22c>
   20436:	2a01      	cmp	r2, #1
   20438:	d101      	bne.n	2043e <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   2043a:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   2043e:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   20442:	79a3      	ldrb	r3, [r4, #6]
   20444:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   20448:	2307      	movs	r3, #7
   2044a:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   2044e:	682b      	ldr	r3, [r5, #0]
   20450:	b12b      	cbz	r3, 2045e <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   20452:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   20456:	f340 3007 	sbfx	r0, r0, #12, #8
   2045a:	f7f0 facb 	bl	109f4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   2045e:	2300      	movs	r3, #0
   20460:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20462:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   20464:	4816      	ldr	r0, [pc, #88]	; (204c0 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20466:	772b      	strb	r3, [r5, #28]
}
   20468:	b003      	add	sp, #12
   2046a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   2046e:	4601      	mov	r1, r0
   20470:	e748      	b.n	20304 <nrfx_spim_init+0x98>
   20472:	f00e fba3 	bl	2ebbc <nrf_gpio_pin_set>
   20476:	e768      	b.n	2034a <nrfx_spim_init+0xde>
   20478:	f00e fba0 	bl	2ebbc <nrf_gpio_pin_set>
   2047c:	e789      	b.n	20392 <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   2047e:	f04f 33ff 	mov.w	r3, #4294967295
   20482:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   20486:	2300      	movs	r3, #0
   20488:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   2048c:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   20490:	e7b8      	b.n	20404 <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   20492:	f043 0304 	orr.w	r3, r3, #4
        break;
   20496:	e7d2      	b.n	2043e <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   20498:	f043 0306 	orr.w	r3, r3, #6
        break;
   2049c:	e7cf      	b.n	2043e <nrfx_spim_init+0x1d2>
        return err_code;
   2049e:	4809      	ldr	r0, [pc, #36]	; (204c4 <nrfx_spim_init+0x258>)
   204a0:	e7e2      	b.n	20468 <nrfx_spim_init+0x1fc>
        return err_code;
   204a2:	4809      	ldr	r0, [pc, #36]	; (204c8 <nrfx_spim_init+0x25c>)
   204a4:	e7e0      	b.n	20468 <nrfx_spim_init+0x1fc>
            return err_code;
   204a6:	4809      	ldr	r0, [pc, #36]	; (204cc <nrfx_spim_init+0x260>)
   204a8:	e7de      	b.n	20468 <nrfx_spim_init+0x1fc>
   204aa:	bf00      	nop
   204ac:	000375a2 	.word	0x000375a2
   204b0:	00032629 	.word	0x00032629
   204b4:	00037723 	.word	0x00037723
   204b8:	200219a0 	.word	0x200219a0
   204bc:	4000a000 	.word	0x4000a000
   204c0:	0bad0000 	.word	0x0bad0000
   204c4:	0bad0005 	.word	0x0bad0005
   204c8:	0bad0003 	.word	0x0bad0003
   204cc:	0bad0004 	.word	0x0bad0004

000204d0 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   204d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   204d4:	4d2e      	ldr	r5, [pc, #184]	; (20590 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   204d6:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   204da:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   204dc:	ea4f 1648 	mov.w	r6, r8, lsl #5
   204e0:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   204e4:	f898 301c 	ldrb.w	r3, [r8, #28]
   204e8:	b95b      	cbnz	r3, 20502 <nrfx_spim_uninit+0x32>
   204ea:	492a      	ldr	r1, [pc, #168]	; (20594 <nrfx_spim_uninit+0xc4>)
   204ec:	482a      	ldr	r0, [pc, #168]	; (20598 <nrfx_spim_uninit+0xc8>)
   204ee:	f240 230f 	movw	r3, #527	; 0x20f
   204f2:	4a2a      	ldr	r2, [pc, #168]	; (2059c <nrfx_spim_uninit+0xcc>)
   204f4:	f00a f8cd 	bl	2a692 <assert_print>
   204f8:	f240 210f 	movw	r1, #527	; 0x20f
   204fc:	4827      	ldr	r0, [pc, #156]	; (2059c <nrfx_spim_uninit+0xcc>)
   204fe:	f00a f8c1 	bl	2a684 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   20502:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   20504:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   20506:	b1cb      	cbz	r3, 2053c <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   20508:	f344 3007 	sbfx	r0, r4, #12, #8
   2050c:	f7f0 fa80 	bl	10a10 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   20510:	4b23      	ldr	r3, [pc, #140]	; (205a0 <nrfx_spim_uninit+0xd0>)
   20512:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   20516:	f898 301d 	ldrb.w	r3, [r8, #29]
   2051a:	b17b      	cbz	r3, 2053c <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2051c:	2301      	movs	r3, #1
   2051e:	f04f 0864 	mov.w	r8, #100	; 0x64
   20522:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20524:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   20528:	b92b      	cbnz	r3, 20536 <nrfx_spim_uninit+0x66>
   2052a:	2001      	movs	r0, #1
   2052c:	f00e faaa 	bl	2ea84 <nrfx_busy_wait>
   20530:	f1b8 0801 	subs.w	r8, r8, #1
   20534:	d1f6      	bne.n	20524 <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   20536:	2200      	movs	r2, #0
   20538:	19ab      	adds	r3, r5, r6
   2053a:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   2053c:	2300      	movs	r3, #0
   2053e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   20542:	19ab      	adds	r3, r5, r6
   20544:	7f9b      	ldrb	r3, [r3, #30]
   20546:	07db      	lsls	r3, r3, #31
   20548:	d41b      	bmi.n	20582 <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   2054a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   2054e:	f00e fb70 	bl	2ec32 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   20552:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   20556:	f00e fb6c 	bl	2ec32 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   2055a:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   2055e:	f00e fb68 	bl	2ec32 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   20562:	793b      	ldrb	r3, [r7, #4]
   20564:	b91b      	cbnz	r3, 2056e <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   20566:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   2056a:	f00e fb62 	bl	2ec32 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2056e:	19ab      	adds	r3, r5, r6
   20570:	7fd8      	ldrb	r0, [r3, #31]
   20572:	28ff      	cmp	r0, #255	; 0xff
   20574:	d005      	beq.n	20582 <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   20576:	2300      	movs	r3, #0
   20578:	2201      	movs	r2, #1
   2057a:	4619      	mov	r1, r3
   2057c:	9300      	str	r3, [sp, #0]
   2057e:	f00e fb39 	bl	2ebf4 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   20582:	2300      	movs	r3, #0
   20584:	4435      	add	r5, r6
   20586:	772b      	strb	r3, [r5, #28]
}
   20588:	b002      	add	sp, #8
   2058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2058e:	bf00      	nop
   20590:	200219a0 	.word	0x200219a0
   20594:	0003775f 	.word	0x0003775f
   20598:	00032629 	.word	0x00032629
   2059c:	00037723 	.word	0x00037723
   205a0:	00080152 	.word	0x00080152

000205a4 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   205a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   205a8:	4e60      	ldr	r6, [pc, #384]	; (2072c <nrfx_spim_xfer+0x188>)
   205aa:	7903      	ldrb	r3, [r0, #4]
{
   205ac:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   205ae:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   205b2:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   205b6:	4607      	mov	r7, r0
   205b8:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   205ba:	b95a      	cbnz	r2, 205d4 <nrfx_spim_xfer+0x30>
   205bc:	495c      	ldr	r1, [pc, #368]	; (20730 <nrfx_spim_xfer+0x18c>)
   205be:	f240 23de 	movw	r3, #734	; 0x2de
   205c2:	4a5c      	ldr	r2, [pc, #368]	; (20734 <nrfx_spim_xfer+0x190>)
   205c4:	485c      	ldr	r0, [pc, #368]	; (20738 <nrfx_spim_xfer+0x194>)
   205c6:	f00a f864 	bl	2a692 <assert_print>
   205ca:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   205ce:	4859      	ldr	r0, [pc, #356]	; (20734 <nrfx_spim_xfer+0x190>)
   205d0:	f00a f858 	bl	2a684 <assert_post_action>
   205d4:	680a      	ldr	r2, [r1, #0]
   205d6:	b95a      	cbnz	r2, 205f0 <nrfx_spim_xfer+0x4c>
   205d8:	684a      	ldr	r2, [r1, #4]
   205da:	b14a      	cbz	r2, 205f0 <nrfx_spim_xfer+0x4c>
   205dc:	4957      	ldr	r1, [pc, #348]	; (2073c <nrfx_spim_xfer+0x198>)
   205de:	f240 23df 	movw	r3, #735	; 0x2df
   205e2:	4a54      	ldr	r2, [pc, #336]	; (20734 <nrfx_spim_xfer+0x190>)
   205e4:	4854      	ldr	r0, [pc, #336]	; (20738 <nrfx_spim_xfer+0x194>)
   205e6:	f00a f854 	bl	2a692 <assert_print>
   205ea:	f240 21df 	movw	r1, #735	; 0x2df
   205ee:	e7ee      	b.n	205ce <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   205f0:	68a2      	ldr	r2, [r4, #8]
   205f2:	b96a      	cbnz	r2, 20610 <nrfx_spim_xfer+0x6c>
   205f4:	68e2      	ldr	r2, [r4, #12]
   205f6:	2a00      	cmp	r2, #0
   205f8:	f000 8094 	beq.w	20724 <nrfx_spim_xfer+0x180>
   205fc:	4950      	ldr	r1, [pc, #320]	; (20740 <nrfx_spim_xfer+0x19c>)
   205fe:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   20602:	4a4c      	ldr	r2, [pc, #304]	; (20734 <nrfx_spim_xfer+0x190>)
   20604:	484c      	ldr	r0, [pc, #304]	; (20738 <nrfx_spim_xfer+0x194>)
   20606:	f00a f844 	bl	2a692 <assert_print>
   2060a:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   2060e:	e7de      	b.n	205ce <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   20610:	b93b      	cbnz	r3, 20622 <nrfx_spim_xfer+0x7e>
   20612:	68e3      	ldr	r3, [r4, #12]
   20614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   20618:	d203      	bcs.n	20622 <nrfx_spim_xfer+0x7e>
   2061a:	6863      	ldr	r3, [r4, #4]
   2061c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   20620:	d309      	bcc.n	20636 <nrfx_spim_xfer+0x92>
   20622:	4948      	ldr	r1, [pc, #288]	; (20744 <nrfx_spim_xfer+0x1a0>)
   20624:	f240 23e1 	movw	r3, #737	; 0x2e1
   20628:	4a42      	ldr	r2, [pc, #264]	; (20734 <nrfx_spim_xfer+0x190>)
   2062a:	4843      	ldr	r0, [pc, #268]	; (20738 <nrfx_spim_xfer+0x194>)
   2062c:	f00a f831 	bl	2a692 <assert_print>
   20630:	f240 21e1 	movw	r1, #737	; 0x2e1
   20634:	e7cb      	b.n	205ce <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   20636:	f015 0908 	ands.w	r9, r5, #8
   2063a:	d00f      	beq.n	2065c <nrfx_spim_xfer+0xb8>
   2063c:	7fb3      	ldrb	r3, [r6, #30]
   2063e:	075b      	lsls	r3, r3, #29
   20640:	d40c      	bmi.n	2065c <nrfx_spim_xfer+0xb8>
   20642:	7ff3      	ldrb	r3, [r6, #31]
   20644:	2bff      	cmp	r3, #255	; 0xff
   20646:	d009      	beq.n	2065c <nrfx_spim_xfer+0xb8>
   20648:	493f      	ldr	r1, [pc, #252]	; (20748 <nrfx_spim_xfer+0x1a4>)
   2064a:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   2064e:	4a39      	ldr	r2, [pc, #228]	; (20734 <nrfx_spim_xfer+0x190>)
   20650:	4839      	ldr	r0, [pc, #228]	; (20738 <nrfx_spim_xfer+0x194>)
   20652:	f00a f81e 	bl	2a692 <assert_print>
   20656:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   2065a:	e7b8      	b.n	205ce <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2065c:	7f73      	ldrb	r3, [r6, #29]
   2065e:	2b00      	cmp	r3, #0
   20660:	d15e      	bne.n	20720 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   20662:	6833      	ldr	r3, [r6, #0]
   20664:	b123      	cbz	r3, 20670 <nrfx_spim_xfer+0xcc>
   20666:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   2066a:	bf04      	itt	eq
   2066c:	2301      	moveq	r3, #1
   2066e:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   20670:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 2074c <nrfx_spim_xfer+0x1a8>
   20674:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   20678:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   2067c:	2101      	movs	r1, #1
   2067e:	4640      	mov	r0, r8
   20680:	f00e faa8 	bl	2ebd4 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   20684:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   20686:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   20688:	b121      	cbz	r1, 20694 <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2068a:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   2068e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   20692:	d106      	bne.n	206a2 <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   20694:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   20696:	b14a      	cbz	r2, 206ac <nrfx_spim_xfer+0x108>
   20698:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2069c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   206a0:	d004      	beq.n	206ac <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   206a2:	2300      	movs	r3, #0
        return err_code;
   206a4:	482a      	ldr	r0, [pc, #168]	; (20750 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   206a6:	7773      	strb	r3, [r6, #29]
}
   206a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   206ac:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   206ae:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   206b2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   206b6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   206ba:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   206be:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   206c2:	2200      	movs	r2, #0
   206c4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   206c8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   206cc:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   206d0:	bf18      	it	ne
   206d2:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   206d4:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   206d8:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   206dc:	bf18      	it	ne
   206de:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   206e0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   206e4:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   206e6:	f1b9 0f00 	cmp.w	r9, #0
   206ea:	d006      	beq.n	206fa <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   206ec:	b96a      	cbnz	r2, 2070a <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   206ee:	2100      	movs	r1, #0
   206f0:	4640      	mov	r0, r8
   206f2:	f00e fa6f 	bl	2ebd4 <set_ss_pin_state>
    return err_code;
   206f6:	4817      	ldr	r0, [pc, #92]	; (20754 <nrfx_spim_xfer+0x1b0>)
   206f8:	e7d6      	b.n	206a8 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   206fa:	2101      	movs	r1, #1
   206fc:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   206fe:	b922      	cbnz	r2, 2070a <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20700:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   20704:	2a00      	cmp	r2, #0
   20706:	d0fb      	beq.n	20700 <nrfx_spim_xfer+0x15c>
   20708:	e7f1      	b.n	206ee <nrfx_spim_xfer+0x14a>
    if (!enable)
   2070a:	f015 0f04 	tst.w	r5, #4
   2070e:	f04f 0240 	mov.w	r2, #64	; 0x40
   20712:	d002      	beq.n	2071a <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   20714:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20718:	e7ed      	b.n	206f6 <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   2071a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2071e:	e7ea      	b.n	206f6 <nrfx_spim_xfer+0x152>
        return err_code;
   20720:	480d      	ldr	r0, [pc, #52]	; (20758 <nrfx_spim_xfer+0x1b4>)
   20722:	e7c1      	b.n	206a8 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   20724:	2b00      	cmp	r3, #0
   20726:	f43f af78 	beq.w	2061a <nrfx_spim_xfer+0x76>
   2072a:	e77a      	b.n	20622 <nrfx_spim_xfer+0x7e>
   2072c:	200219a0 	.word	0x200219a0
   20730:	0003775f 	.word	0x0003775f
   20734:	00037723 	.word	0x00037723
   20738:	00032629 	.word	0x00032629
   2073c:	0003778b 	.word	0x0003778b
   20740:	000377d2 	.word	0x000377d2
   20744:	00037819 	.word	0x00037819
   20748:	000378bd 	.word	0x000378bd
   2074c:	200219ac 	.word	0x200219ac
   20750:	0bad000a 	.word	0x0bad000a
   20754:	0bad0000 	.word	0x0bad0000
   20758:	0bad000b 	.word	0x0bad000b

0002075c <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   2075c:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2075e:	4b13      	ldr	r3, [pc, #76]	; (207ac <nrfx_spim_4_irq_handler+0x50>)
   20760:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   20764:	b302      	cbz	r2, 207a8 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20766:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   20768:	4c11      	ldr	r4, [pc, #68]	; (207b0 <nrfx_spim_4_irq_handler+0x54>)
   2076a:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   2076e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   20772:	6823      	ldr	r3, [r4, #0]
   20774:	b95b      	cbnz	r3, 2078e <nrfx_spim_4_irq_handler+0x32>
   20776:	490f      	ldr	r1, [pc, #60]	; (207b4 <nrfx_spim_4_irq_handler+0x58>)
   20778:	480f      	ldr	r0, [pc, #60]	; (207b8 <nrfx_spim_4_irq_handler+0x5c>)
   2077a:	f240 333b 	movw	r3, #827	; 0x33b
   2077e:	4a0f      	ldr	r2, [pc, #60]	; (207bc <nrfx_spim_4_irq_handler+0x60>)
   20780:	f009 ff87 	bl	2a692 <assert_print>
   20784:	f240 313b 	movw	r1, #827	; 0x33b
   20788:	480c      	ldr	r0, [pc, #48]	; (207bc <nrfx_spim_4_irq_handler+0x60>)
   2078a:	f009 ff7b 	bl	2a684 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   2078e:	4629      	mov	r1, r5
   20790:	4620      	mov	r0, r4
   20792:	f00e fa1f 	bl	2ebd4 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   20796:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   2079a:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   2079c:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2079e:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   207a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   207a6:	4718      	bx	r3
}
   207a8:	bd70      	pop	{r4, r5, r6, pc}
   207aa:	bf00      	nop
   207ac:	4000a000 	.word	0x4000a000
   207b0:	200219a0 	.word	0x200219a0
   207b4:	00037900 	.word	0x00037900
   207b8:	00032629 	.word	0x00032629
   207bc:	00037723 	.word	0x00037723

000207c0 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   207c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207c4:	460e      	mov	r6, r1
   207c6:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   207c8:	4d0c      	ldr	r5, [pc, #48]	; (207fc <metal_generic_dev_open+0x3c>)
   207ca:	f855 4f18 	ldr.w	r4, [r5, #24]!
   207ce:	42ac      	cmp	r4, r5
   207d0:	d103      	bne.n	207da <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   207d2:	f06f 0012 	mvn.w	r0, #18
   207d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   207da:	4631      	mov	r1, r6
   207dc:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   207e0:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   207e4:	f7e8 fdc5 	bl	9372 <strcmp>
   207e8:	b930      	cbnz	r0, 207f8 <metal_generic_dev_open+0x38>
			*device = dev;
   207ea:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   207ee:	4640      	mov	r0, r8
}
   207f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   207f4:	f00e bb22 	b.w	2ee3c <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   207f8:	6824      	ldr	r4, [r4, #0]
   207fa:	e7e8      	b.n	207ce <metal_generic_dev_open+0xe>
   207fc:	200219c0 	.word	0x200219c0

00020800 <metal_bus_unregister>:
{
   20800:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   20802:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   20806:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   20808:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   2080a:	f100 0324 	add.w	r3, r0, #36	; 0x24
   2080e:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   20810:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   20814:	6843      	ldr	r3, [r0, #4]
{
   20816:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   20818:	b103      	cbz	r3, 2081c <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   2081a:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   2081c:	4b05      	ldr	r3, [pc, #20]	; (20834 <metal_bus_unregister+0x34>)
   2081e:	781a      	ldrb	r2, [r3, #0]
   20820:	2a06      	cmp	r2, #6
   20822:	d905      	bls.n	20830 <metal_bus_unregister+0x30>
   20824:	685b      	ldr	r3, [r3, #4]
   20826:	b11b      	cbz	r3, 20830 <metal_bus_unregister+0x30>
   20828:	2007      	movs	r0, #7
   2082a:	6822      	ldr	r2, [r4, #0]
   2082c:	4902      	ldr	r1, [pc, #8]	; (20838 <metal_bus_unregister+0x38>)
   2082e:	4798      	blx	r3
}
   20830:	2000      	movs	r0, #0
   20832:	bd10      	pop	{r4, pc}
   20834:	200219c0 	.word	0x200219c0
   20838:	00037923 	.word	0x00037923

0002083c <metal_bus_find>:
{
   2083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20840:	4607      	mov	r7, r0
   20842:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   20844:	4e0b      	ldr	r6, [pc, #44]	; (20874 <metal_bus_find+0x38>)
   20846:	f856 4f08 	ldr.w	r4, [r6, #8]!
   2084a:	42b4      	cmp	r4, r6
   2084c:	d102      	bne.n	20854 <metal_bus_find+0x18>
	return -ENOENT;
   2084e:	f06f 0001 	mvn.w	r0, #1
   20852:	e00a      	b.n	2086a <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   20854:	4639      	mov	r1, r7
   20856:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   2085a:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   2085e:	f7e8 fd88 	bl	9372 <strcmp>
   20862:	b920      	cbnz	r0, 2086e <metal_bus_find+0x32>
   20864:	b11d      	cbz	r5, 2086e <metal_bus_find+0x32>
			*result = bus;
   20866:	f8c5 8000 	str.w	r8, [r5]
}
   2086a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   2086e:	6824      	ldr	r4, [r4, #0]
   20870:	e7eb      	b.n	2084a <metal_bus_find+0xe>
   20872:	bf00      	nop
   20874:	200219c0 	.word	0x200219c0

00020878 <metal_bus_register>:
{
   20878:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   2087a:	4604      	mov	r4, r0
   2087c:	b910      	cbnz	r0, 20884 <metal_bus_register+0xc>
		return -EINVAL;
   2087e:	f06f 0015 	mvn.w	r0, #21
}
   20882:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   20884:	6800      	ldr	r0, [r0, #0]
   20886:	2800      	cmp	r0, #0
   20888:	d0f9      	beq.n	2087e <metal_bus_register+0x6>
   2088a:	f7e8 fd7c 	bl	9386 <strlen>
   2088e:	2800      	cmp	r0, #0
   20890:	d0f5      	beq.n	2087e <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   20892:	2100      	movs	r1, #0
   20894:	6820      	ldr	r0, [r4, #0]
   20896:	f7ff ffd1 	bl	2083c <metal_bus_find>
   2089a:	b1c8      	cbz	r0, 208d0 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   2089c:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   208a0:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   208a4:	4b0c      	ldr	r3, [pc, #48]	; (208d8 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   208a6:	f104 0224 	add.w	r2, r4, #36	; 0x24
   208aa:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   208ac:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   208b0:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   208b2:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   208b4:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   208b6:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   208b8:	781a      	ldrb	r2, [r3, #0]
   208ba:	2a06      	cmp	r2, #6
   208bc:	d901      	bls.n	208c2 <metal_bus_register+0x4a>
   208be:	685b      	ldr	r3, [r3, #4]
   208c0:	b90b      	cbnz	r3, 208c6 <metal_bus_register+0x4e>
	return 0;
   208c2:	2000      	movs	r0, #0
   208c4:	e7dd      	b.n	20882 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   208c6:	2007      	movs	r0, #7
   208c8:	6822      	ldr	r2, [r4, #0]
   208ca:	4904      	ldr	r1, [pc, #16]	; (208dc <metal_bus_register+0x64>)
   208cc:	4798      	blx	r3
   208ce:	e7f8      	b.n	208c2 <metal_bus_register+0x4a>
		return -EEXIST;
   208d0:	f06f 0010 	mvn.w	r0, #16
   208d4:	e7d5      	b.n	20882 <metal_bus_register+0xa>
   208d6:	bf00      	nop
   208d8:	200219c0 	.word	0x200219c0
   208dc:	00037925 	.word	0x00037925

000208e0 <metal_device_close>:
	metal_assert(device && device->bus);
   208e0:	4601      	mov	r1, r0
{
   208e2:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   208e4:	b108      	cbz	r0, 208ea <metal_device_close+0xa>
   208e6:	6840      	ldr	r0, [r0, #4]
   208e8:	b948      	cbnz	r0, 208fe <metal_device_close+0x1e>
   208ea:	4908      	ldr	r1, [pc, #32]	; (2090c <metal_device_close+0x2c>)
   208ec:	4808      	ldr	r0, [pc, #32]	; (20910 <metal_device_close+0x30>)
   208ee:	2351      	movs	r3, #81	; 0x51
   208f0:	4a08      	ldr	r2, [pc, #32]	; (20914 <metal_device_close+0x34>)
   208f2:	f009 fece 	bl	2a692 <assert_print>
   208f6:	2151      	movs	r1, #81	; 0x51
   208f8:	4806      	ldr	r0, [pc, #24]	; (20914 <metal_device_close+0x34>)
   208fa:	f009 fec3 	bl	2a684 <assert_post_action>
	if (device->bus->ops.dev_close)
   208fe:	68c3      	ldr	r3, [r0, #12]
   20900:	b113      	cbz	r3, 20908 <metal_device_close+0x28>
}
   20902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   20906:	4718      	bx	r3
}
   20908:	bd10      	pop	{r4, pc}
   2090a:	bf00      	nop
   2090c:	0003796f 	.word	0x0003796f
   20910:	00032629 	.word	0x00032629
   20914:	00037938 	.word	0x00037938

00020918 <metal_register_generic_device>:
{
   20918:	b510      	push	{r4, lr}
   2091a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   2091c:	6800      	ldr	r0, [r0, #0]
   2091e:	b910      	cbnz	r0, 20926 <metal_register_generic_device+0xe>
		return -EINVAL;
   20920:	f06f 0015 	mvn.w	r0, #21
}
   20924:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   20926:	f7e8 fd2e 	bl	9386 <strlen>
   2092a:	2800      	cmp	r0, #0
   2092c:	d0f8      	beq.n	20920 <metal_register_generic_device+0x8>
   2092e:	68a3      	ldr	r3, [r4, #8]
   20930:	2b01      	cmp	r3, #1
   20932:	d8f5      	bhi.n	20920 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   20934:	4b06      	ldr	r3, [pc, #24]	; (20950 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   20936:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   2093a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   2093c:	4b05      	ldr	r3, [pc, #20]	; (20954 <metal_register_generic_device+0x3c>)
   2093e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   20940:	f103 0018 	add.w	r0, r3, #24
   20944:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   20946:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   20948:	61d9      	str	r1, [r3, #28]
	return 0;
   2094a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   2094c:	6011      	str	r1, [r2, #0]
}
   2094e:	e7e9      	b.n	20924 <metal_register_generic_device+0xc>
   20950:	20008718 	.word	0x20008718
   20954:	200219c0 	.word	0x200219c0

00020958 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   20958:	4b0e      	ldr	r3, [pc, #56]	; (20994 <metal_init+0x3c>)
{
   2095a:	b510      	push	{r4, lr}
   2095c:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   2095e:	2220      	movs	r2, #32
   20960:	2100      	movs	r1, #0
   20962:	4618      	mov	r0, r3
   20964:	f00f fe29 	bl	305ba <memset>

	_metal.common.log_handler   = params->log_handler;
   20968:	6822      	ldr	r2, [r4, #0]
   2096a:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   2096c:	4602      	mov	r2, r0
   2096e:	7921      	ldrb	r1, [r4, #4]
   20970:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   20974:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   20978:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   2097c:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   20980:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   20984:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   20988:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   2098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   2098e:	f000 b80f 	b.w	209b0 <metal_sys_init>
   20992:	bf00      	nop
   20994:	200219c0 	.word	0x200219c0

00020998 <metal_finish>:

void metal_finish(void)
{
   20998:	b508      	push	{r3, lr}
	metal_sys_finish();
   2099a:	f000 f811 	bl	209c0 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   2099e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   209a2:	2220      	movs	r2, #32
   209a4:	2100      	movs	r1, #0
   209a6:	4801      	ldr	r0, [pc, #4]	; (209ac <metal_finish+0x14>)
   209a8:	f00f be07 	b.w	305ba <memset>
   209ac:	200219c0 	.word	0x200219c0

000209b0 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   209b0:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   209b2:	4802      	ldr	r0, [pc, #8]	; (209bc <metal_sys_init+0xc>)
   209b4:	f7ff ff60 	bl	20878 <metal_bus_register>
	return 0;
}
   209b8:	2000      	movs	r0, #0
   209ba:	bd08      	pop	{r3, pc}
   209bc:	20008718 	.word	0x20008718

000209c0 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   209c0:	4801      	ldr	r0, [pc, #4]	; (209c8 <metal_sys_finish+0x8>)
   209c2:	f7ff bf1d 	b.w	20800 <metal_bus_unregister>
   209c6:	bf00      	nop
   209c8:	20008718 	.word	0x20008718

000209cc <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   209cc:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   209ce:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   209d0:	2b06      	cmp	r3, #6
{
   209d2:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   209d4:	bf88      	it	hi
   209d6:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   209d8:	4b09      	ldr	r3, [pc, #36]	; (20a00 <metal_zephyr_log_handler+0x34>)
{
   209da:	ac05      	add	r4, sp, #20
   209dc:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   209e0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   209e4:	4807      	ldr	r0, [pc, #28]	; (20a04 <metal_zephyr_log_handler+0x38>)
   209e6:	f009 fc92 	bl	2a30e <printk>

	va_start(args, format);
	vprintk(format, args);
   209ea:	4621      	mov	r1, r4
   209ec:	4628      	mov	r0, r5
	va_start(args, format);
   209ee:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   209f0:	f7eb ff98 	bl	c924 <vprintk>
	va_end(args);
}
   209f4:	b002      	add	sp, #8
   209f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   209fa:	b003      	add	sp, #12
   209fc:	4770      	bx	lr
   209fe:	bf00      	nop
   20a00:	000324a4 	.word	0x000324a4
   20a04:	000327dc 	.word	0x000327dc

00020a08 <lfs_dir_traverse_filter>:
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
   20a08:	4a18      	ldr	r2, [pc, #96]	; (20a6c <lfs_dir_traverse_filter+0x64>)
   20a0a:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
        lfs_tag_t tag, const void *buffer) {
   20a0e:	b530      	push	{r4, r5, lr}
            : LFS_MKTAG(0x700, 0x3ff, 0);
   20a10:	4c17      	ldr	r4, [pc, #92]	; (20a70 <lfs_dir_traverse_filter+0x68>)
   20a12:	bf18      	it	ne
   20a14:	4614      	movne	r4, r2

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
   20a16:	6803      	ldr	r3, [r0, #0]
   20a18:	ea83 0501 	eor.w	r5, r3, r1
   20a1c:	4225      	tst	r5, r4
   20a1e:	d00d      	beq.n	20a3c <lfs_dir_traverse_filter+0x34>
    return ((int32_t)(tag << 22) >> 22) == -1;
   20a20:	f343 0409 	sbfx	r4, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
   20a24:	3401      	adds	r4, #1
   20a26:	d009      	beq.n	20a3c <lfs_dir_traverse_filter+0x34>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
   20a28:	ea01 0402 	and.w	r4, r1, r2
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
   20a2c:	4a11      	ldr	r2, [pc, #68]	; (20a74 <lfs_dir_traverse_filter+0x6c>)
   20a2e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   20a30:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   20a34:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
   20a38:	4294      	cmp	r4, r2
   20a3a:	d103      	bne.n	20a44 <lfs_dir_traverse_filter+0x3c>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
   20a3c:	2300      	movs	r3, #0
   20a3e:	6003      	str	r3, [r0, #0]
        return true;
   20a40:	2001      	movs	r0, #1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
}
   20a42:	bd30      	pop	{r4, r5, pc}
    return (tag & 0x70000000) >> 20;
   20a44:	0d0a      	lsrs	r2, r1, #20
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   20a46:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
   20a4a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   20a4e:	d105      	bne.n	20a5c <lfs_dir_traverse_filter+0x54>
   20a50:	f3c3 2489 	ubfx	r4, r3, #10, #10
   20a54:	f3c1 2189 	ubfx	r1, r1, #10, #10
   20a58:	428c      	cmp	r4, r1
   20a5a:	d201      	bcs.n	20a60 <lfs_dir_traverse_filter+0x58>
    return false;
   20a5c:	2000      	movs	r0, #0
   20a5e:	e7f0      	b.n	20a42 <lfs_dir_traverse_filter+0x3a>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   20a60:	b252      	sxtb	r2, r2
   20a62:	eb03 2382 	add.w	r3, r3, r2, lsl #10
   20a66:	6003      	str	r3, [r0, #0]
   20a68:	e7f8      	b.n	20a5c <lfs_dir_traverse_filter+0x54>
   20a6a:	bf00      	nop
   20a6c:	7ffffc00 	.word	0x7ffffc00
   20a70:	700ffc00 	.word	0x700ffc00
   20a74:	000ffc00 	.word	0x000ffc00

00020a78 <lfs_fs_preporphans>:
    return LFS_ERR_NOENT;
}
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
   20a78:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
   20a7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
   20a7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
   20a80:	b96a      	cbnz	r2, 20a9e <lfs_fs_preporphans+0x26>
   20a82:	2900      	cmp	r1, #0
   20a84:	da0b      	bge.n	20a9e <lfs_fs_preporphans+0x26>
   20a86:	490c      	ldr	r1, [pc, #48]	; (20ab8 <lfs_fs_preporphans+0x40>)
   20a88:	480c      	ldr	r0, [pc, #48]	; (20abc <lfs_fs_preporphans+0x44>)
   20a8a:	f241 1354 	movw	r3, #4436	; 0x1154
   20a8e:	4a0c      	ldr	r2, [pc, #48]	; (20ac0 <lfs_fs_preporphans+0x48>)
   20a90:	f009 fdff 	bl	2a692 <assert_print>
   20a94:	f241 1154 	movw	r1, #4436	; 0x1154
   20a98:	4809      	ldr	r0, [pc, #36]	; (20ac0 <lfs_fs_preporphans+0x48>)
   20a9a:	f009 fdf3 	bl	2a684 <assert_post_action>
    lfs->gstate.tag += orphans;
   20a9e:	4419      	add	r1, r3
    return tag & 0x000003ff;
   20aa0:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
   20aa4:	3b00      	subs	r3, #0
   20aa6:	bf18      	it	ne
   20aa8:	2301      	movne	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   20aaa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   20aae:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
   20ab2:	6301      	str	r1, [r0, #48]	; 0x30
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));

    return 0;
}
   20ab4:	2000      	movs	r0, #0
   20ab6:	bd08      	pop	{r3, pc}
   20ab8:	00037a43 	.word	0x00037a43
   20abc:	00032629 	.word	0x00032629
   20ac0:	00037a1d 	.word	0x00037a1d

00020ac4 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   20ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ac8:	4617      	mov	r7, r2
    if (block >= lfs->cfg->block_count ||
   20aca:	6e82      	ldr	r2, [r0, #104]	; 0x68
        void *buffer, lfs_size_t size) {
   20acc:	b087      	sub	sp, #28
   20ace:	468a      	mov	sl, r1
   20ad0:	e9dd 4811 	ldrd	r4, r8, [sp, #68]	; 0x44
    if (block >= lfs->cfg->block_count ||
   20ad4:	9910      	ldr	r1, [sp, #64]	; 0x40
        void *buffer, lfs_size_t size) {
   20ad6:	9304      	str	r3, [sp, #16]
    if (block >= lfs->cfg->block_count ||
   20ad8:	6a13      	ldr	r3, [r2, #32]
        void *buffer, lfs_size_t size) {
   20ada:	4681      	mov	r9, r0
    if (block >= lfs->cfg->block_count ||
   20adc:	428b      	cmp	r3, r1
        void *buffer, lfs_size_t size) {
   20ade:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   20ae0:	f240 80bc 	bls.w	20c5c <lfs_bd_read+0x198>
   20ae4:	69d2      	ldr	r2, [r2, #28]
            off+size > lfs->cfg->block_size) {
   20ae6:	19a3      	adds	r3, r4, r6
    if (block >= lfs->cfg->block_count ||
   20ae8:	4293      	cmp	r3, r2
   20aea:	f200 80b7 	bhi.w	20c5c <lfs_bd_read+0x198>
	return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment)
{
	return lfs_aligndown(a + alignment-1, alignment);
   20aee:	9b04      	ldr	r3, [sp, #16]
   20af0:	3b01      	subs	r3, #1
   20af2:	9305      	str	r3, [sp, #20]
    while (size > 0) {
   20af4:	b30e      	cbz	r6, 20b3a <lfs_bd_read+0x76>
        if (pcache && block == pcache->block &&
   20af6:	f1ba 0f00 	cmp.w	sl, #0
   20afa:	d03e      	beq.n	20b7a <lfs_bd_read+0xb6>
   20afc:	f8da 3000 	ldr.w	r3, [sl]
   20b00:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20b02:	429a      	cmp	r2, r3
   20b04:	d139      	bne.n	20b7a <lfs_bd_read+0xb6>
                off < pcache->off + pcache->size) {
   20b06:	e9da 5301 	ldrd	r5, r3, [sl, #4]
   20b0a:	eb05 0b03 	add.w	fp, r5, r3
        if (pcache && block == pcache->block &&
   20b0e:	45a3      	cmp	fp, r4
   20b10:	d933      	bls.n	20b7a <lfs_bd_read+0xb6>
            if (off >= pcache->off) {
   20b12:	42a5      	cmp	r5, r4
   20b14:	d813      	bhi.n	20b3e <lfs_bd_read+0x7a>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   20b16:	ebab 0b04 	sub.w	fp, fp, r4
	return (a < b) ? a : b;
   20b1a:	45b3      	cmp	fp, r6
   20b1c:	bf28      	it	cs
   20b1e:	46b3      	movcs	fp, r6
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   20b20:	f8da 100c 	ldr.w	r1, [sl, #12]
   20b24:	1b65      	subs	r5, r4, r5
   20b26:	4640      	mov	r0, r8
   20b28:	465a      	mov	r2, fp
   20b2a:	4429      	add	r1, r5
   20b2c:	f00f fd0b 	bl	30546 <memcpy>
    while (size > 0) {
   20b30:	ebb6 060b 	subs.w	r6, r6, fp
                data += diff;
   20b34:	44d8      	add	r8, fp
                off += diff;
   20b36:	445c      	add	r4, fp
    while (size > 0) {
   20b38:	d1e0      	bne.n	20afc <lfs_bd_read+0x38>
    return 0;
   20b3a:	2000      	movs	r0, #0
   20b3c:	e08b      	b.n	20c56 <lfs_bd_read+0x192>
            diff = lfs_min(diff, pcache->off-off);
   20b3e:	1b2d      	subs	r5, r5, r4
   20b40:	42b5      	cmp	r5, r6
   20b42:	bf28      	it	cs
   20b44:	4635      	movcs	r5, r6
        if (block == rcache->block &&
   20b46:	683b      	ldr	r3, [r7, #0]
   20b48:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20b4a:	429a      	cmp	r2, r3
   20b4c:	d11b      	bne.n	20b86 <lfs_bd_read+0xc2>
                off < rcache->off + rcache->size) {
   20b4e:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
   20b52:	440b      	add	r3, r1
        if (block == rcache->block &&
   20b54:	429c      	cmp	r4, r3
   20b56:	d216      	bcs.n	20b86 <lfs_bd_read+0xc2>
            if (off >= rcache->off) {
   20b58:	428c      	cmp	r4, r1
   20b5a:	d310      	bcc.n	20b7e <lfs_bd_read+0xba>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   20b5c:	1b1b      	subs	r3, r3, r4
   20b5e:	429d      	cmp	r5, r3
   20b60:	bf28      	it	cs
   20b62:	461d      	movcs	r5, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   20b64:	68fb      	ldr	r3, [r7, #12]
   20b66:	1a61      	subs	r1, r4, r1
   20b68:	4640      	mov	r0, r8
   20b6a:	462a      	mov	r2, r5
   20b6c:	4419      	add	r1, r3
   20b6e:	f00f fcea 	bl	30546 <memcpy>
                data += diff;
   20b72:	44a8      	add	r8, r5
                off += diff;
   20b74:	442c      	add	r4, r5
                size -= diff;
   20b76:	1b76      	subs	r6, r6, r5
                continue;
   20b78:	e7bc      	b.n	20af4 <lfs_bd_read+0x30>
   20b7a:	4635      	mov	r5, r6
   20b7c:	e7e3      	b.n	20b46 <lfs_bd_read+0x82>
            diff = lfs_min(diff, rcache->off-off);
   20b7e:	1b09      	subs	r1, r1, r4
   20b80:	428d      	cmp	r5, r1
   20b82:	bf28      	it	cs
   20b84:	460d      	movcs	r5, r1
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   20b86:	9b04      	ldr	r3, [sp, #16]
   20b88:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
   20b8c:	42b3      	cmp	r3, r6
   20b8e:	d81e      	bhi.n	20bce <lfs_bd_read+0x10a>
   20b90:	6943      	ldr	r3, [r0, #20]
   20b92:	fbb4 f2f3 	udiv	r2, r4, r3
   20b96:	fb03 4212 	mls	r2, r3, r2, r4
   20b9a:	b9c2      	cbnz	r2, 20bce <lfs_bd_read+0x10a>
   20b9c:	42b3      	cmp	r3, r6
   20b9e:	d816      	bhi.n	20bce <lfs_bd_read+0x10a>
	return a - (a % alignment);
   20ba0:	fbb5 f2f3 	udiv	r2, r5, r3
   20ba4:	fb03 5312 	mls	r3, r3, r2, r5
   20ba8:	eba5 0b03 	sub.w	fp, r5, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   20bac:	f8cd b000 	str.w	fp, [sp]
   20bb0:	9303      	str	r3, [sp, #12]
   20bb2:	6843      	ldr	r3, [r0, #4]
   20bb4:	4622      	mov	r2, r4
   20bb6:	469c      	mov	ip, r3
   20bb8:	9910      	ldr	r1, [sp, #64]	; 0x40
   20bba:	4643      	mov	r3, r8
   20bbc:	47e0      	blx	ip
            if (err) {
   20bbe:	2800      	cmp	r0, #0
   20bc0:	d149      	bne.n	20c56 <lfs_bd_read+0x192>
            size -= diff;
   20bc2:	9b03      	ldr	r3, [sp, #12]
            data += diff;
   20bc4:	44d8      	add	r8, fp
            size -= diff;
   20bc6:	1b5b      	subs	r3, r3, r5
            off += diff;
   20bc8:	445c      	add	r4, fp
            size -= diff;
   20bca:	441e      	add	r6, r3
            continue;
   20bcc:	e792      	b.n	20af4 <lfs_bd_read+0x30>
        LFS_ASSERT(block < lfs->cfg->block_count);
   20bce:	6a03      	ldr	r3, [r0, #32]
   20bd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20bd2:	429a      	cmp	r2, r3
   20bd4:	d309      	bcc.n	20bea <lfs_bd_read+0x126>
   20bd6:	4923      	ldr	r1, [pc, #140]	; (20c64 <lfs_bd_read+0x1a0>)
   20bd8:	236f      	movs	r3, #111	; 0x6f
   20bda:	4a23      	ldr	r2, [pc, #140]	; (20c68 <lfs_bd_read+0x1a4>)
   20bdc:	4823      	ldr	r0, [pc, #140]	; (20c6c <lfs_bd_read+0x1a8>)
   20bde:	f009 fd58 	bl	2a692 <assert_print>
   20be2:	216f      	movs	r1, #111	; 0x6f
        LFS_ASSERT(err <= 0);
   20be4:	4820      	ldr	r0, [pc, #128]	; (20c68 <lfs_bd_read+0x1a4>)
   20be6:	f009 fd4d 	bl	2a684 <assert_post_action>
        rcache->block = block;
   20bea:	9b10      	ldr	r3, [sp, #64]	; 0x40
	return lfs_aligndown(a + alignment-1, alignment);
   20bec:	9905      	ldr	r1, [sp, #20]
   20bee:	603b      	str	r3, [r7, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   20bf0:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
	return a - (a % alignment);
   20bf4:	695a      	ldr	r2, [r3, #20]
   20bf6:	fbb4 f3f2 	udiv	r3, r4, r2
   20bfa:	fb02 4313 	mls	r3, r2, r3, r4
   20bfe:	1ae2      	subs	r2, r4, r3
   20c00:	607a      	str	r2, [r7, #4]
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   20c02:	f8d9 5068 	ldr.w	r5, [r9, #104]	; 0x68
        rcache->size = lfs_min(
   20c06:	1b1b      	subs	r3, r3, r4
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   20c08:	f8d5 c014 	ldr.w	ip, [r5, #20]
	return lfs_aligndown(a + alignment-1, alignment);
   20c0c:	eb01 000c 	add.w	r0, r1, ip
   20c10:	4420      	add	r0, r4
	return a - (a % alignment);
   20c12:	fbb0 f1fc 	udiv	r1, r0, ip
   20c16:	fb0c 0111 	mls	r1, ip, r1, r0
   20c1a:	1a40      	subs	r0, r0, r1
	return (a < b) ? a : b;
   20c1c:	69e9      	ldr	r1, [r5, #28]
        rcache->size = lfs_min(
   20c1e:	4288      	cmp	r0, r1
   20c20:	bf94      	ite	ls
   20c22:	181b      	addls	r3, r3, r0
   20c24:	185b      	addhi	r3, r3, r1
   20c26:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20c28:	428b      	cmp	r3, r1
   20c2a:	bf28      	it	cs
   20c2c:	460b      	movcs	r3, r1
   20c2e:	60bb      	str	r3, [r7, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   20c30:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
   20c34:	9300      	str	r3, [sp, #0]
   20c36:	6845      	ldr	r5, [r0, #4]
   20c38:	68fb      	ldr	r3, [r7, #12]
   20c3a:	9910      	ldr	r1, [sp, #64]	; 0x40
   20c3c:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
   20c3e:	2800      	cmp	r0, #0
   20c40:	dd07      	ble.n	20c52 <lfs_bd_read+0x18e>
   20c42:	490b      	ldr	r1, [pc, #44]	; (20c70 <lfs_bd_read+0x1ac>)
   20c44:	237a      	movs	r3, #122	; 0x7a
   20c46:	4a08      	ldr	r2, [pc, #32]	; (20c68 <lfs_bd_read+0x1a4>)
   20c48:	4808      	ldr	r0, [pc, #32]	; (20c6c <lfs_bd_read+0x1a8>)
   20c4a:	f009 fd22 	bl	2a692 <assert_print>
   20c4e:	217a      	movs	r1, #122	; 0x7a
   20c50:	e7c8      	b.n	20be4 <lfs_bd_read+0x120>
        if (err) {
   20c52:	f43f af50 	beq.w	20af6 <lfs_bd_read+0x32>
}
   20c56:	b007      	add	sp, #28
   20c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
   20c5c:	f06f 0053 	mvn.w	r0, #83	; 0x53
   20c60:	e7f9      	b.n	20c56 <lfs_bd_read+0x192>
   20c62:	bf00      	nop
   20c64:	00037d31 	.word	0x00037d31
   20c68:	00037a1d 	.word	0x00037a1d
   20c6c:	00032629 	.word	0x00032629
   20c70:	00037a75 	.word	0x00037a75

00020c74 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   20c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c78:	4606      	mov	r6, r0
   20c7a:	b087      	sub	sp, #28
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20c7c:	303c      	adds	r0, #60	; 0x3c
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   20c7e:	4691      	mov	r9, r2
   20c80:	460f      	mov	r7, r1
   20c82:	469a      	mov	sl, r3
    lfs_tag_t ntag = dir->etag;
   20c84:	e9d1 8303 	ldrd	r8, r3, [r1, #12]
   20c88:	9305      	str	r3, [sp, #20]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20c8a:	f00e f90c 	bl	2eea6 <lfs_gstate_hasmovehere>
    return (tag & 0x000ffc00) >> 10;
   20c8e:	f3c9 2b89 	ubfx	fp, r9, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20c92:	4604      	mov	r4, r0
   20c94:	b158      	cbz	r0, 20cae <lfs_dir_getslice+0x3a>
   20c96:	f1bb 0f00 	cmp.w	fp, #0
   20c9a:	d078      	beq.n	20d8e <lfs_dir_getslice+0x11a>
    return (tag & 0x000ffc00) >> 10;
   20c9c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        gdiff -= LFS_MKTAG(0, 1, 0);
   20c9e:	4c3d      	ldr	r4, [pc, #244]	; (20d94 <lfs_dir_getslice+0x120>)
            lfs_tag_id(gmask) != 0 &&
   20ca0:	f3c3 2289 	ubfx	r2, r3, #10, #10
   20ca4:	f3ca 2389 	ubfx	r3, sl, #10, #10
        gdiff -= LFS_MKTAG(0, 1, 0);
   20ca8:	429a      	cmp	r2, r3
   20caa:	bf88      	it	hi
   20cac:	2400      	movhi	r4, #0
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
   20cae:	9d05      	ldr	r5, [sp, #20]
   20cb0:	4628      	mov	r0, r5
   20cb2:	f00e f8e0 	bl	2ee76 <lfs_tag_dsize>
   20cb6:	1d03      	adds	r3, r0, #4
   20cb8:	4543      	cmp	r3, r8
   20cba:	d834      	bhi.n	20d26 <lfs_dir_getslice+0xb2>
        int err = lfs_bd_read(lfs,
   20cbc:	2304      	movs	r3, #4
        off -= lfs_tag_dsize(ntag);
   20cbe:	eba8 0800 	sub.w	r8, r8, r0
        int err = lfs_bd_read(lfs,
   20cc2:	9303      	str	r3, [sp, #12]
   20cc4:	ab05      	add	r3, sp, #20
   20cc6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   20cca:	683b      	ldr	r3, [r7, #0]
   20ccc:	4632      	mov	r2, r6
   20cce:	9300      	str	r3, [sp, #0]
   20cd0:	2100      	movs	r1, #0
   20cd2:	2304      	movs	r3, #4
   20cd4:	4630      	mov	r0, r6
   20cd6:	f7ff fef5 	bl	20ac4 <lfs_bd_read>
        if (err) {
   20cda:	bb30      	cbnz	r0, 20d2a <lfs_dir_getslice+0xb6>
static inline uint32_t lfs_frombe32(uint32_t a)
{
#if defined(CONFIG_BIG_ENDIAN)
	return a;
#elif !defined(LFS_NO_INTRINSICS)
	return __builtin_bswap32(a);
   20cdc:	9b05      	ldr	r3, [sp, #20]
   20cde:	ba1b      	rev	r3, r3
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
   20ce0:	406b      	eors	r3, r5
   20ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   20ce6:	9305      	str	r3, [sp, #20]
        if (lfs_tag_id(gmask) != 0 &&
   20ce8:	f1bb 0f00 	cmp.w	fp, #0
   20cec:	d023      	beq.n	20d36 <lfs_dir_getslice+0xc2>
    return (tag & 0x70000000) >> 20;
   20cee:	0d2a      	lsrs	r2, r5, #20
        if (lfs_tag_id(gmask) != 0 &&
   20cf0:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
   20cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   20cf8:	d11d      	bne.n	20d36 <lfs_dir_getslice+0xc2>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
   20cfa:	ebaa 0304 	sub.w	r3, sl, r4
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   20cfe:	f3c3 2089 	ubfx	r0, r3, #10, #10
   20d02:	f3c5 2189 	ubfx	r1, r5, #10, #10
   20d06:	4288      	cmp	r0, r1
   20d08:	d315      	bcc.n	20d36 <lfs_dir_getslice+0xc2>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
   20d0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   20d0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   20d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   20d16:	f023 0303 	bic.w	r3, r3, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
   20d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   20d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   20d22:	42ab      	cmp	r3, r5
   20d24:	d104      	bne.n	20d30 <lfs_dir_getslice+0xbc>
                return LFS_ERR_NOENT;
   20d26:	f06f 0001 	mvn.w	r0, #1
}
   20d2a:	b007      	add	sp, #28
   20d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   20d30:	b252      	sxtb	r2, r2
   20d32:	eb04 2482 	add.w	r4, r4, r2, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
   20d36:	ebaa 0104 	sub.w	r1, sl, r4
   20d3a:	4069      	eors	r1, r5
   20d3c:	ea11 0109 	ands.w	r1, r1, r9
   20d40:	d1b5      	bne.n	20cae <lfs_dir_getslice+0x3a>
    return ((int32_t)(tag << 22) >> 22) == -1;
   20d42:	f345 0309 	sbfx	r3, r5, #0, #10
            if (lfs_tag_isdelete(tag)) {
   20d46:	3301      	adds	r3, #1
   20d48:	d0ed      	beq.n	20d26 <lfs_dir_getslice+0xb2>
	return (a < b) ? a : b;
   20d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    return tag & 0x000003ff;
   20d4c:	f3c5 0909 	ubfx	r9, r5, #0, #10
   20d50:	4599      	cmp	r9, r3
   20d52:	bf28      	it	cs
   20d54:	4699      	movcs	r9, r3
            err = lfs_bd_read(lfs,
   20d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20d58:	f8cd 900c 	str.w	r9, [sp, #12]
   20d5c:	9302      	str	r3, [sp, #8]
   20d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20d60:	4632      	mov	r2, r6
   20d62:	3304      	adds	r3, #4
   20d64:	4443      	add	r3, r8
   20d66:	9301      	str	r3, [sp, #4]
   20d68:	683b      	ldr	r3, [r7, #0]
   20d6a:	4630      	mov	r0, r6
   20d6c:	9300      	str	r3, [sp, #0]
   20d6e:	464b      	mov	r3, r9
   20d70:	f7ff fea8 	bl	20ac4 <lfs_bd_read>
            if (err) {
   20d74:	2800      	cmp	r0, #0
   20d76:	d1d8      	bne.n	20d2a <lfs_dir_getslice+0xb6>
__ssp_bos_icheck3(memset, void *, int)
   20d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20d7a:	4601      	mov	r1, r0
   20d7c:	eba3 0209 	sub.w	r2, r3, r9
   20d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20d82:	eb03 0009 	add.w	r0, r3, r9
   20d86:	f00f fc18 	bl	305ba <memset>
            return tag + gdiff;
   20d8a:	1960      	adds	r0, r4, r5
   20d8c:	e7cd      	b.n	20d2a <lfs_dir_getslice+0xb6>
    lfs_stag_t gdiff = 0;
   20d8e:	465c      	mov	r4, fp
   20d90:	e78d      	b.n	20cae <lfs_dir_getslice+0x3a>
   20d92:	bf00      	nop
   20d94:	fffffc00 	.word	0xfffffc00

00020d98 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
   20d98:	b530      	push	{r4, r5, lr}
   20d9a:	b087      	sub	sp, #28
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   20d9c:	ad03      	add	r5, sp, #12
        lfs_gstate_t *gstate) {
   20d9e:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   20da0:	4b08      	ldr	r3, [pc, #32]	; (20dc4 <lfs_dir_getgstate+0x2c>)
   20da2:	4a09      	ldr	r2, [pc, #36]	; (20dc8 <lfs_dir_getgstate+0x30>)
   20da4:	9500      	str	r5, [sp, #0]
   20da6:	f00e f8d3 	bl	2ef50 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
   20daa:	2800      	cmp	r0, #0
   20dac:	da04      	bge.n	20db8 <lfs_dir_getgstate+0x20>
   20dae:	1c83      	adds	r3, r0, #2
   20db0:	d100      	bne.n	20db4 <lfs_dir_getgstate+0x1c>
    return 0;
   20db2:	2000      	movs	r0, #0
}
   20db4:	b007      	add	sp, #28
   20db6:	bd30      	pop	{r4, r5, pc}
        lfs_gstate_xor(gstate, &temp);
   20db8:	4629      	mov	r1, r5
   20dba:	4620      	mov	r0, r4
   20dbc:	f00e f865 	bl	2ee8a <lfs_gstate_xor>
   20dc0:	e7f7      	b.n	20db2 <lfs_dir_getgstate+0x1a>
   20dc2:	bf00      	nop
   20dc4:	7ff0000c 	.word	0x7ff0000c
   20dc8:	7ff00000 	.word	0x7ff00000

00020dcc <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
   20dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
        strcpy(info->name, "/");
   20dce:	f103 0c08 	add.w	ip, r3, #8
        uint16_t id, struct lfs_info *info) {
   20dd2:	461c      	mov	r4, r3
    if (id == 0x3ff) {
   20dd4:	f240 33ff 	movw	r3, #1023	; 0x3ff
   20dd8:	429a      	cmp	r2, r3
        uint16_t id, struct lfs_info *info) {
   20dda:	4605      	mov	r5, r0
   20ddc:	460e      	mov	r6, r1
   20dde:	b085      	sub	sp, #20
    if (id == 0x3ff) {
   20de0:	d107      	bne.n	20df2 <lfs_dir_getinfo+0x26>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   20de2:	4b1a      	ldr	r3, [pc, #104]	; (20e4c <lfs_dir_getinfo+0x80>)
   20de4:	881b      	ldrh	r3, [r3, #0]
   20de6:	8123      	strh	r3, [r4, #8]
        info->type = LFS_TYPE_DIR;
   20de8:	2302      	movs	r3, #2
   20dea:	7023      	strb	r3, [r4, #0]
        return 0;
   20dec:	2000      	movs	r0, #0
}
   20dee:	b005      	add	sp, #20
   20df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
   20df2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   20df4:	0297      	lsls	r7, r2, #10
   20df6:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
   20df8:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   20dfc:	f8cd c000 	str.w	ip, [sp]
   20e00:	4a13      	ldr	r2, [pc, #76]	; (20e50 <lfs_dir_getinfo+0x84>)
   20e02:	f00e f8a5 	bl	2ef50 <lfs_dir_get>
    if (tag < 0) {
   20e06:	2800      	cmp	r0, #0
   20e08:	dbf1      	blt.n	20dee <lfs_dir_getinfo+0x22>
    return (tag & 0x7ff00000) >> 20;
   20e0a:	0d00      	lsrs	r0, r0, #20
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   20e0c:	ab02      	add	r3, sp, #8
    info->type = lfs_tag_type3(tag);
   20e0e:	7020      	strb	r0, [r4, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   20e10:	9300      	str	r3, [sp, #0]
   20e12:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
   20e16:	4631      	mov	r1, r6
   20e18:	4628      	mov	r0, r5
   20e1a:	4a0e      	ldr	r2, [pc, #56]	; (20e54 <lfs_dir_getinfo+0x88>)
   20e1c:	f043 0308 	orr.w	r3, r3, #8
   20e20:	f00e f896 	bl	2ef50 <lfs_dir_get>
    if (tag < 0) {
   20e24:	2800      	cmp	r0, #0
   20e26:	dbe2      	blt.n	20dee <lfs_dir_getinfo+0x22>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   20e28:	f240 2302 	movw	r3, #514	; 0x202
   20e2c:	ebb3 5f10 	cmp.w	r3, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
   20e30:	ea4f 5210 	mov.w	r2, r0, lsr #20
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   20e34:	d102      	bne.n	20e3c <lfs_dir_getinfo+0x70>
        info->size = ctz.size;
   20e36:	9b03      	ldr	r3, [sp, #12]
   20e38:	6063      	str	r3, [r4, #4]
   20e3a:	e7d7      	b.n	20dec <lfs_dir_getinfo+0x20>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   20e3c:	f240 2301 	movw	r3, #513	; 0x201
   20e40:	429a      	cmp	r2, r3
   20e42:	d1d3      	bne.n	20dec <lfs_dir_getinfo+0x20>
    return tag & 0x000003ff;
   20e44:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
   20e48:	6060      	str	r0, [r4, #4]
   20e4a:	e7cf      	b.n	20dec <lfs_dir_getinfo+0x20>
   20e4c:	00033835 	.word	0x00033835
   20e50:	780ffc00 	.word	0x780ffc00
   20e54:	700ffc00 	.word	0x700ffc00

00020e58 <lfs_dir_traverse.constprop.0>:
static int lfs_dir_traverse(lfs_t *lfs,
   20e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned sp = 0;
   20e5c:	2600      	movs	r6, #0
static int lfs_dir_traverse(lfs_t *lfs,
   20e5e:	4689      	mov	r9, r1
    unsigned sp = 0;
   20e60:	46b0      	mov	r8, r6
static int lfs_dir_traverse(lfs_t *lfs,
   20e62:	b0ab      	sub	sp, #172	; 0xac
   20e64:	9304      	str	r3, [sp, #16]
   20e66:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
   20e6a:	f8bd b0dc 	ldrh.w	fp, [sp, #220]	; 0xdc
   20e6e:	f9bd a0e4 	ldrsh.w	sl, [sp, #228]	; 0xe4
   20e72:	9006      	str	r0, [sp, #24]
   20e74:	9305      	str	r3, [sp, #20]
            if (off+lfs_tag_dsize(ptag) < dir->off) {
   20e76:	9804      	ldr	r0, [sp, #16]
   20e78:	f00d fffd 	bl	2ee76 <lfs_tag_dsize>
   20e7c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20e80:	1887      	adds	r7, r0, r2
   20e82:	429f      	cmp	r7, r3
   20e84:	d23a      	bcs.n	20efc <lfs_dir_traverse.constprop.0+0xa4>
                int err = lfs_bd_read(lfs,
   20e86:	2304      	movs	r3, #4
   20e88:	9303      	str	r3, [sp, #12]
   20e8a:	ab09      	add	r3, sp, #36	; 0x24
   20e8c:	e9cd 7301 	strd	r7, r3, [sp, #4]
   20e90:	9a06      	ldr	r2, [sp, #24]
   20e92:	f8d9 3000 	ldr.w	r3, [r9]
   20e96:	2100      	movs	r1, #0
   20e98:	9300      	str	r3, [sp, #0]
   20e9a:	4610      	mov	r0, r2
   20e9c:	2304      	movs	r3, #4
   20e9e:	f7ff fe11 	bl	20ac4 <lfs_bd_read>
                if (err) {
   20ea2:	2800      	cmp	r0, #0
   20ea4:	f040 8125 	bne.w	210f2 <lfs_dir_traverse.constprop.0+0x29a>
	return __builtin_bswap32(a);
   20ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
   20eaa:	9a04      	ldr	r2, [sp, #16]
   20eac:	ba1b      	rev	r3, r3
   20eae:	405a      	eors	r2, r3
   20eb0:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
   20eb4:	9309      	str	r3, [sp, #36]	; 0x24
   20eb6:	9304      	str	r3, [sp, #16]
                disk.block = dir->pair[0];
   20eb8:	f8d9 3000 	ldr.w	r3, [r9]
                buffer = &disk;
   20ebc:	ad0a      	add	r5, sp, #40	; 0x28
                disk.block = dir->pair[0];
   20ebe:	930a      	str	r3, [sp, #40]	; 0x28
                disk.off = off+sizeof(lfs_tag_t);
   20ec0:	1d3b      	adds	r3, r7, #4
   20ec2:	930b      	str	r3, [sp, #44]	; 0x2c
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
   20ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
   20ec6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   20ec8:	ea81 0208 	eor.w	r2, r1, r8
   20ecc:	401a      	ands	r2, r3
   20ece:	4b8a      	ldr	r3, [pc, #552]	; (210f8 <lfs_dir_traverse.constprop.0+0x2a0>)
   20ed0:	401a      	ands	r2, r3
   20ed2:	d159      	bne.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
            if (lfs_tag_id(tmask) != 0) {
   20ed4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   20ed6:	f3c3 2389 	ubfx	r3, r3, #10, #10
   20eda:	2b00      	cmp	r3, #0
   20edc:	f000 80af 	beq.w	2103e <lfs_dir_traverse.constprop.0+0x1e6>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
   20ee0:	2e02      	cmp	r6, #2
   20ee2:	d91b      	bls.n	20f1c <lfs_dir_traverse.constprop.0+0xc4>
   20ee4:	4985      	ldr	r1, [pc, #532]	; (210fc <lfs_dir_traverse.constprop.0+0x2a4>)
   20ee6:	4886      	ldr	r0, [pc, #536]	; (21100 <lfs_dir_traverse.constprop.0+0x2a8>)
   20ee8:	f44f 7355 	mov.w	r3, #852	; 0x354
   20eec:	4a85      	ldr	r2, [pc, #532]	; (21104 <lfs_dir_traverse.constprop.0+0x2ac>)
   20eee:	f009 fbd0 	bl	2a692 <assert_print>
   20ef2:	f44f 7155 	mov.w	r1, #852	; 0x354
   20ef6:	4883      	ldr	r0, [pc, #524]	; (21104 <lfs_dir_traverse.constprop.0+0x2ac>)
   20ef8:	f009 fbc4 	bl	2a684 <assert_post_action>
            } else if (attrcount > 0) {
   20efc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   20efe:	2b00      	cmp	r3, #0
   20f00:	f340 80f5 	ble.w	210ee <lfs_dir_traverse.constprop.0+0x296>
                tag = attrs[0].tag;
   20f04:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   20f06:	4617      	mov	r7, r2
   20f08:	681b      	ldr	r3, [r3, #0]
   20f0a:	9309      	str	r3, [sp, #36]	; 0x24
                buffer = attrs[0].buffer;
   20f0c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   20f0e:	685d      	ldr	r5, [r3, #4]
                attrs += 1;
   20f10:	3308      	adds	r3, #8
   20f12:	9334      	str	r3, [sp, #208]	; 0xd0
                attrcount -= 1;
   20f14:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   20f16:	3b01      	subs	r3, #1
   20f18:	9335      	str	r3, [sp, #212]	; 0xd4
   20f1a:	e7d3      	b.n	20ec4 <lfs_dir_traverse.constprop.0+0x6c>
                stack[sp] = (struct lfs_dir_traverse){
   20f1c:	243c      	movs	r4, #60	; 0x3c
   20f1e:	4374      	muls	r4, r6
   20f20:	9804      	ldr	r0, [sp, #16]
   20f22:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   20f26:	446b      	add	r3, sp
   20f28:	f843 0c70 	str.w	r0, [r3, #-112]
   20f2c:	9834      	ldr	r0, [sp, #208]	; 0xd0
   20f2e:	f823 bc5c 	strh.w	fp, [r3, #-92]
   20f32:	f843 0c6c 	str.w	r0, [r3, #-108]
   20f36:	9835      	ldr	r0, [sp, #212]	; 0xd4
   20f38:	f823 ac58 	strh.w	sl, [r3, #-88]
   20f3c:	f843 0c68 	str.w	r0, [r3, #-104]
   20f40:	9836      	ldr	r0, [sp, #216]	; 0xd8
                diff = 0;
   20f42:	4692      	mov	sl, r2
                stack[sp] = (struct lfs_dir_traverse){
   20f44:	e943 0819 	strd	r0, r8, [r3, #-100]	; 0x64
                begin = 0;
   20f48:	4693      	mov	fp, r2
                ttag = 0;
   20f4a:	4690      	mov	r8, r2
                stack[sp] = (struct lfs_dir_traverse){
   20f4c:	9805      	ldr	r0, [sp, #20]
   20f4e:	f843 5c48 	str.w	r5, [r3, #-72]
   20f52:	f823 0c5a 	strh.w	r0, [r3, #-90]
   20f56:	983a      	ldr	r0, [sp, #232]	; 0xe8
   20f58:	e943 971e 	strd	r9, r7, [r3, #-120]	; 0x78
   20f5c:	f843 0c54 	str.w	r0, [r3, #-84]
   20f60:	983b      	ldr	r0, [sp, #236]	; 0xec
                sp += 1;
   20f62:	3601      	adds	r6, #1
                stack[sp] = (struct lfs_dir_traverse){
   20f64:	e943 0114 	strd	r0, r1, [r3, #-80]	; 0x50
   20f68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   20f6c:	3b44      	subs	r3, #68	; 0x44
   20f6e:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
   20f72:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   20f76:	eb0d 0403 	add.w	r4, sp, r3
   20f7a:	f1a4 034c 	sub.w	r3, r4, #76	; 0x4c
   20f7e:	933b      	str	r3, [sp, #236]	; 0xec
                cb = lfs_dir_traverse_filter;
   20f80:	4b61      	ldr	r3, [pc, #388]	; (21108 <lfs_dir_traverse.constprop.0+0x2b0>)
                tmask = 0;
   20f82:	9236      	str	r2, [sp, #216]	; 0xd8
                cb = lfs_dir_traverse_filter;
   20f84:	933a      	str	r3, [sp, #232]	; 0xe8
                end = 0;
   20f86:	9205      	str	r2, [sp, #20]
            off = 0;
   20f88:	463a      	mov	r2, r7
   20f8a:	e774      	b.n	20e76 <lfs_dir_traverse.constprop.0+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
   20f8c:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
   20f90:	d11c      	bne.n	20fcc <lfs_dir_traverse.constprop.0+0x174>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   20f92:	2400      	movs	r4, #0
   20f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return tag & 0x000003ff;
   20f96:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   20f9a:	4294      	cmp	r4, r2
   20f9c:	d2f4      	bcs.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
   20f9e:	68a9      	ldr	r1, [r5, #8]
   20fa0:	f3c3 2389 	ubfx	r3, r3, #10, #10
   20fa4:	4453      	add	r3, sl
   20fa6:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
   20faa:	782b      	ldrb	r3, [r5, #0]
   20fac:	686a      	ldr	r2, [r5, #4]
   20fae:	f503 7340 	add.w	r3, r3, #768	; 0x300
   20fb2:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
   20fb6:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
   20fba:	4798      	blx	r3
                if (res < 0) {
   20fbc:	2800      	cmp	r0, #0
   20fbe:	f2c0 8098 	blt.w	210f2 <lfs_dir_traverse.constprop.0+0x29a>
                if (res) {
   20fc2:	f105 050c 	add.w	r5, r5, #12
   20fc6:	d1df      	bne.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   20fc8:	3401      	adds	r4, #1
   20fca:	e7e3      	b.n	20f94 <lfs_dir_traverse.constprop.0+0x13c>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
   20fcc:	eb03 218a 	add.w	r1, r3, sl, lsl #10
   20fd0:	462a      	mov	r2, r5
   20fd2:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
   20fd6:	4798      	blx	r3
            if (res < 0) {
   20fd8:	2800      	cmp	r0, #0
   20fda:	f2c0 808a 	blt.w	210f2 <lfs_dir_traverse.constprop.0+0x29a>
            if (res) {
   20fde:	d0d3      	beq.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
    if (sp > 0) {
   20fe0:	2e00      	cmp	r6, #0
   20fe2:	f000 8086 	beq.w	210f2 <lfs_dir_traverse.constprop.0+0x29a>
        dir         = stack[sp-1].dir;
   20fe6:	233c      	movs	r3, #60	; 0x3c
   20fe8:	aa2a      	add	r2, sp, #168	; 0xa8
   20fea:	3e01      	subs	r6, #1
   20fec:	fb03 2306 	mla	r3, r3, r6, r2
        ptag        = stack[sp-1].ptag;
   20ff0:	f853 2c70 	ldr.w	r2, [r3, #-112]
        disk        = stack[sp-1].disk;
   20ff4:	e953 0111 	ldrd	r0, r1, [r3, #-68]	; 0x44
        ptag        = stack[sp-1].ptag;
   20ff8:	9204      	str	r2, [sp, #16]
        attrs       = stack[sp-1].attrs;
   20ffa:	f853 2c6c 	ldr.w	r2, [r3, #-108]
        ttag        = stack[sp-1].ttag;
   20ffe:	f853 8c60 	ldr.w	r8, [r3, #-96]
        attrs       = stack[sp-1].attrs;
   21002:	9234      	str	r2, [sp, #208]	; 0xd0
        attrcount   = stack[sp-1].attrcount;
   21004:	f853 2c68 	ldr.w	r2, [r3, #-104]
        begin       = stack[sp-1].begin;
   21008:	f833 bc5c 	ldrh.w	fp, [r3, #-92]
        attrcount   = stack[sp-1].attrcount;
   2100c:	9235      	str	r2, [sp, #212]	; 0xd4
        tmask       = stack[sp-1].tmask;
   2100e:	f853 2c64 	ldr.w	r2, [r3, #-100]
        diff        = stack[sp-1].diff;
   21012:	f933 ac58 	ldrsh.w	sl, [r3, #-88]
        tmask       = stack[sp-1].tmask;
   21016:	9236      	str	r2, [sp, #216]	; 0xd8
        end         = stack[sp-1].end;
   21018:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
        buffer      = stack[sp-1].buffer;
   2101c:	f853 5c48 	ldr.w	r5, [r3, #-72]
        end         = stack[sp-1].end;
   21020:	9205      	str	r2, [sp, #20]
        cb          = stack[sp-1].cb;
   21022:	f853 2c54 	ldr.w	r2, [r3, #-84]
        off         = stack[sp-1].off;
   21026:	e953 971e 	ldrd	r9, r7, [r3, #-120]	; 0x78
        cb          = stack[sp-1].cb;
   2102a:	923a      	str	r2, [sp, #232]	; 0xe8
        data        = stack[sp-1].data;
   2102c:	f853 2c50 	ldr.w	r2, [r3, #-80]
   21030:	923b      	str	r2, [sp, #236]	; 0xec
        tag         = stack[sp-1].tag;
   21032:	f853 2c4c 	ldr.w	r2, [r3, #-76]
   21036:	9209      	str	r2, [sp, #36]	; 0x24
        disk        = stack[sp-1].disk;
   21038:	aa0a      	add	r2, sp, #40	; 0x28
   2103a:	e882 0003 	stmia.w	r2, {r0, r1}
        if (lfs_tag_id(tmask) != 0 &&
   2103e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   21040:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (lfs_tag_id(tmask) != 0 &&
   21042:	f3c2 2289 	ubfx	r2, r2, #10, #10
   21046:	b132      	cbz	r2, 21056 <lfs_dir_traverse.constprop.0+0x1fe>
    return (tag & 0x000ffc00) >> 10;
   21048:	f3c3 2289 	ubfx	r2, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
   2104c:	455a      	cmp	r2, fp
   2104e:	d39b      	bcc.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   21050:	9905      	ldr	r1, [sp, #20]
   21052:	428a      	cmp	r2, r1
   21054:	d298      	bcs.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
    return (tag & 0x7ff00000) >> 20;
   21056:	f3c3 520a 	ubfx	r2, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
   2105a:	2a00      	cmp	r2, #0
   2105c:	d094      	beq.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
   2105e:	f240 1101 	movw	r1, #257	; 0x101
   21062:	428a      	cmp	r2, r1
   21064:	d192      	bne.n	20f8c <lfs_dir_traverse.constprop.0+0x134>
            if (cb == lfs_dir_traverse_filter) {
   21066:	4a28      	ldr	r2, [pc, #160]	; (21108 <lfs_dir_traverse.constprop.0+0x2b0>)
   21068:	9307      	str	r3, [sp, #28]
   2106a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   2106c:	4293      	cmp	r3, r2
   2106e:	d08b      	beq.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
            stack[sp] = (struct lfs_dir_traverse){
   21070:	223c      	movs	r2, #60	; 0x3c
   21072:	ab2a      	add	r3, sp, #168	; 0xa8
   21074:	fb02 3406 	mla	r4, r2, r6, r3
   21078:	2100      	movs	r1, #0
   2107a:	f1a4 0078 	sub.w	r0, r4, #120	; 0x78
   2107e:	f00f fa9c 	bl	305ba <memset>
   21082:	9b04      	ldr	r3, [sp, #16]
   21084:	f824 bc5c 	strh.w	fp, [r4, #-92]
   21088:	f844 3c70 	str.w	r3, [r4, #-112]
   2108c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   2108e:	f824 ac58 	strh.w	sl, [r4, #-88]
   21092:	f844 3c6c 	str.w	r3, [r4, #-108]
   21096:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   21098:	e944 971e 	strd	r9, r7, [r4, #-120]	; 0x78
   2109c:	f844 3c68 	str.w	r3, [r4, #-104]
   210a0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
            dir = buffer;
   210a2:	46a9      	mov	r9, r5
            stack[sp] = (struct lfs_dir_traverse){
   210a4:	e944 3819 	strd	r3, r8, [r4, #-100]	; 0x64
   210a8:	9b05      	ldr	r3, [sp, #20]
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
   210aa:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
            stack[sp] = (struct lfs_dir_traverse){
   210ae:	f824 3c5a 	strh.w	r3, [r4, #-90]
   210b2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
            off = 0;
   210b4:	2700      	movs	r7, #0
            stack[sp] = (struct lfs_dir_traverse){
   210b6:	f844 3c54 	str.w	r3, [r4, #-84]
   210ba:	9b3b      	ldr	r3, [sp, #236]	; 0xec
            sp += 1;
   210bc:	3601      	adds	r6, #1
            stack[sp] = (struct lfs_dir_traverse){
   210be:	f844 3c50 	str.w	r3, [r4, #-80]
            uint16_t fromid = lfs_tag_size(tag);
   210c2:	9b07      	ldr	r3, [sp, #28]
   210c4:	f3c3 0b09 	ubfx	fp, r3, #0, #10
    return (tag & 0x000ffc00) >> 10;
   210c8:	f3c3 2389 	ubfx	r3, r3, #10, #10
            diff = toid-fromid+diff;
   210cc:	eba3 030b 	sub.w	r3, r3, fp
   210d0:	4453      	add	r3, sl
   210d2:	fa0f fa83 	sxth.w	sl, r3
            attrcount = 0;
   210d6:	2300      	movs	r3, #0
            end = fromid+1;
   210d8:	f10b 0201 	add.w	r2, fp, #1
   210dc:	9205      	str	r2, [sp, #20]
            attrcount = 0;
   210de:	4a0b      	ldr	r2, [pc, #44]	; (2110c <lfs_dir_traverse.constprop.0+0x2b4>)
            attrs = NULL;
   210e0:	9334      	str	r3, [sp, #208]	; 0xd0
            attrcount = 0;
   210e2:	e9cd 3235 	strd	r3, r2, [sp, #212]	; 0xd4
            ptag = 0xffffffff;
   210e6:	f04f 33ff 	mov.w	r3, #4294967295
   210ea:	9304      	str	r3, [sp, #16]
   210ec:	e74c      	b.n	20f88 <lfs_dir_traverse.constprop.0+0x130>
                res = 0;
   210ee:	2000      	movs	r0, #0
   210f0:	e776      	b.n	20fe0 <lfs_dir_traverse.constprop.0+0x188>
}
   210f2:	b02b      	add	sp, #172	; 0xac
   210f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210f8:	7ff00000 	.word	0x7ff00000
   210fc:	00037a7e 	.word	0x00037a7e
   21100:	00032629 	.word	0x00032629
   21104:	00037a1d 	.word	0x00037a1d
   21108:	00020a09 	.word	0x00020a09
   2110c:	600ffc00 	.word	0x600ffc00

00021110 <lfs_dir_getread.constprop.0>:
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21114:	4698      	mov	r8, r3
   21116:	b085      	sub	sp, #20
    if (off+size > lfs->cfg->block_size) {
   21118:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   2111a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2111c:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if (off+size > lfs->cfg->block_size) {
   2111e:	69db      	ldr	r3, [r3, #28]
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21120:	4615      	mov	r5, r2
    if (off+size > lfs->cfg->block_size) {
   21122:	19a2      	adds	r2, r4, r6
   21124:	429a      	cmp	r2, r3
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21126:	4607      	mov	r7, r0
   21128:	468b      	mov	fp, r1
    if (off+size > lfs->cfg->block_size) {
   2112a:	d84e      	bhi.n	211ca <lfs_dir_getread.constprop.0+0xba>
        rcache->block = LFS_BLOCK_INLINE;
   2112c:	f06f 0a01 	mvn.w	sl, #1
    while (size > 0) {
   21130:	2e00      	cmp	r6, #0
   21132:	d048      	beq.n	211c6 <lfs_dir_getread.constprop.0+0xb6>
	return lfs_aligndown(a + alignment-1, alignment);
   21134:	f108 39ff 	add.w	r9, r8, #4294967295
        if (rcache->block == LFS_BLOCK_INLINE &&
   21138:	682b      	ldr	r3, [r5, #0]
   2113a:	68e8      	ldr	r0, [r5, #12]
   2113c:	3302      	adds	r3, #2
   2113e:	d118      	bne.n	21172 <lfs_dir_getread.constprop.0+0x62>
                off < rcache->off + rcache->size) {
   21140:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
   21144:	440b      	add	r3, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
   21146:	42a3      	cmp	r3, r4
   21148:	d913      	bls.n	21172 <lfs_dir_getread.constprop.0+0x62>
            if (off >= rcache->off) {
   2114a:	42a1      	cmp	r1, r4
   2114c:	d811      	bhi.n	21172 <lfs_dir_getread.constprop.0+0x62>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   2114e:	eba3 0904 	sub.w	r9, r3, r4
	return (a < b) ? a : b;
   21152:	45b1      	cmp	r9, r6
   21154:	bf28      	it	cs
   21156:	46b1      	movcs	r9, r6
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   21158:	1a61      	subs	r1, r4, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2115a:	4401      	add	r1, r0
   2115c:	464a      	mov	r2, r9
   2115e:	9810      	ldr	r0, [sp, #64]	; 0x40
   21160:	f00f f9f1 	bl	30546 <memcpy>
                data += diff;
   21164:	9b10      	ldr	r3, [sp, #64]	; 0x40
                off += diff;
   21166:	444c      	add	r4, r9
                data += diff;
   21168:	444b      	add	r3, r9
   2116a:	9310      	str	r3, [sp, #64]	; 0x40
                size -= diff;
   2116c:	eba6 0609 	sub.w	r6, r6, r9
                continue;
   21170:	e7de      	b.n	21130 <lfs_dir_getread.constprop.0+0x20>
        rcache->block = LFS_BLOCK_INLINE;
   21172:	f8c5 a000 	str.w	sl, [r5]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   21176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	return a - (a % alignment);
   21178:	695b      	ldr	r3, [r3, #20]
   2117a:	fbb4 f2f3 	udiv	r2, r4, r3
   2117e:	fb03 4212 	mls	r2, r3, r2, r4
   21182:	1aa2      	subs	r2, r4, r2
   21184:	606a      	str	r2, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   21186:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
   2118a:	f8dc e014 	ldr.w	lr, [ip, #20]
	return lfs_aligndown(a + alignment-1, alignment);
   2118e:	eb09 030e 	add.w	r3, r9, lr
   21192:	4423      	add	r3, r4
	return a - (a % alignment);
   21194:	fbb3 f1fe 	udiv	r1, r3, lr
   21198:	fb0e 3111 	mls	r1, lr, r1, r3
   2119c:	1a5b      	subs	r3, r3, r1
	return (a < b) ? a : b;
   2119e:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
   211a2:	428b      	cmp	r3, r1
   211a4:	bf28      	it	cs
   211a6:	460b      	movcs	r3, r1
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   211a8:	4659      	mov	r1, fp
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   211aa:	60ab      	str	r3, [r5, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   211ac:	e9cd 0301 	strd	r0, r3, [sp, #4]
   211b0:	9200      	str	r2, [sp, #0]
   211b2:	4638      	mov	r0, r7
   211b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   211b6:	4a06      	ldr	r2, [pc, #24]	; (211d0 <lfs_dir_getread.constprop.0+0xc0>)
   211b8:	f7ff fd5c 	bl	20c74 <lfs_dir_getslice>
        if (err < 0) {
   211bc:	2800      	cmp	r0, #0
   211be:	dabb      	bge.n	21138 <lfs_dir_getread.constprop.0+0x28>
}
   211c0:	b005      	add	sp, #20
   211c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   211c6:	4630      	mov	r0, r6
   211c8:	e7fa      	b.n	211c0 <lfs_dir_getread.constprop.0+0xb0>
        return LFS_ERR_CORRUPT;
   211ca:	f06f 0053 	mvn.w	r0, #83	; 0x53
   211ce:	e7f7      	b.n	211c0 <lfs_dir_getread.constprop.0+0xb0>
   211d0:	fff7fc00 	.word	0xfff7fc00

000211d4 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   211d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211d8:	b093      	sub	sp, #76	; 0x4c
   211da:	af04      	add	r7, sp, #16
   211dc:	4615      	mov	r5, r2
   211de:	603b      	str	r3, [r7, #0]
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   211e0:	6813      	ldr	r3, [r2, #0]
   211e2:	6e82      	ldr	r2, [r0, #104]	; 0x68
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   211e4:	4680      	mov	r8, r0
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   211e6:	6a12      	ldr	r2, [r2, #32]
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   211e8:	460c      	mov	r4, r1
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   211ea:	4293      	cmp	r3, r2
   211ec:	f080 821d 	bcs.w	2162a <lfs_dir_fetchmatch+0x456>
   211f0:	6869      	ldr	r1, [r5, #4]
   211f2:	428a      	cmp	r2, r1
   211f4:	f240 8219 	bls.w	2162a <lfs_dir_fetchmatch+0x456>
    uint32_t revs[2] = {0, 0};
   211f8:	2100      	movs	r1, #0
        int err = lfs_bd_read(lfs,
   211fa:	f04f 0904 	mov.w	r9, #4
   211fe:	f107 0220 	add.w	r2, r7, #32
    uint32_t revs[2] = {0, 0};
   21202:	e9c7 1108 	strd	r1, r1, [r7, #32]
        int err = lfs_bd_read(lfs,
   21206:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2120a:	9300      	str	r3, [sp, #0]
   2120c:	4602      	mov	r2, r0
   2120e:	464b      	mov	r3, r9
   21210:	f8cd 900c 	str.w	r9, [sp, #12]
   21214:	f7ff fc56 	bl	20ac4 <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   21218:	4606      	mov	r6, r0
   2121a:	b118      	cbz	r0, 21224 <lfs_dir_fetchmatch+0x50>
   2121c:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21220:	f040 81b5 	bne.w	2158e <lfs_dir_fetchmatch+0x3ba>
        int err = lfs_bd_read(lfs,
   21224:	f8cd 900c 	str.w	r9, [sp, #12]
   21228:	f04f 0900 	mov.w	r9, #0
   2122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   21230:	9302      	str	r3, [sp, #8]
   21232:	f8cd 9004 	str.w	r9, [sp, #4]
   21236:	686b      	ldr	r3, [r5, #4]
   21238:	4642      	mov	r2, r8
   2123a:	9300      	str	r3, [sp, #0]
   2123c:	4649      	mov	r1, r9
   2123e:	2304      	movs	r3, #4
   21240:	4640      	mov	r0, r8
   21242:	f7ff fc3f 	bl	20ac4 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
   21246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        if (err && err != LFS_ERR_CORRUPT) {
   21248:	4606      	mov	r6, r0
   2124a:	2800      	cmp	r0, #0
   2124c:	d04c      	beq.n	212e8 <lfs_dir_fetchmatch+0x114>
   2124e:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21252:	f040 819c 	bne.w	2158e <lfs_dir_fetchmatch+0x3ba>
   21256:	4649      	mov	r1, r9
    dir->pair[0] = pair[(r+0)%2];
   21258:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    lfs_stag_t besttag = -1;
   2125c:	f04f 36ff 	mov.w	r6, #4294967295
    dir->pair[0] = pair[(r+0)%2];
   21260:	6023      	str	r3, [r4, #0]
    dir->pair[1] = pair[(r+1)%2];
   21262:	f081 0301 	eor.w	r3, r1, #1
   21266:	607b      	str	r3, [r7, #4]
   21268:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   2126c:	6063      	str	r3, [r4, #4]
    dir->rev = revs[(r+0)%2];
   2126e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   21272:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   21276:	f851 3c18 	ldr.w	r3, [r1, #-24]
   2127a:	60a3      	str	r3, [r4, #8]
    dir->off = 0; // nonzero = found some commits
   2127c:	2300      	movs	r3, #0
   2127e:	60e3      	str	r3, [r4, #12]
   21280:	2302      	movs	r3, #2
   21282:	60bb      	str	r3, [r7, #8]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   21284:	f04f 35ff 	mov.w	r5, #4294967295
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   21288:	2204      	movs	r2, #4
   2128a:	4628      	mov	r0, r5
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   2128c:	e9c7 550a 	strd	r5, r5, [r7, #40]	; 0x28
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   21290:	f104 0108 	add.w	r1, r4, #8
   21294:	f002 fd8a 	bl	23dac <lfs_crc>
        bool tempsplit = false;
   21298:	2300      	movs	r3, #0
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   2129a:	46b1      	mov	r9, r6
        lfs_tag_t ptag = 0xffffffff;
   2129c:	46aa      	mov	sl, r5
        uint16_t tempcount = 0;
   2129e:	e9c7 3303 	strd	r3, r3, [r7, #12]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212a2:	61b8      	str	r0, [r7, #24]
        lfs_off_t off = 0;
   212a4:	617b      	str	r3, [r7, #20]
            off += lfs_tag_dsize(ptag);
   212a6:	4650      	mov	r0, sl
   212a8:	f00d fde5 	bl	2ee76 <lfs_tag_dsize>
            int err = lfs_bd_read(lfs,
   212ac:	2204      	movs	r2, #4
            off += lfs_tag_dsize(ptag);
   212ae:	697b      	ldr	r3, [r7, #20]
            int err = lfs_bd_read(lfs,
   212b0:	f107 0b1c 	add.w	fp, r7, #28
            off += lfs_tag_dsize(ptag);
   212b4:	4403      	add	r3, r0
   212b6:	617b      	str	r3, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
   212b8:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
            int err = lfs_bd_read(lfs,
   212bc:	9203      	str	r2, [sp, #12]
   212be:	f8cd b008 	str.w	fp, [sp, #8]
   212c2:	697a      	ldr	r2, [r7, #20]
   212c4:	2100      	movs	r1, #0
   212c6:	9201      	str	r2, [sp, #4]
   212c8:	6822      	ldr	r2, [r4, #0]
   212ca:	4640      	mov	r0, r8
   212cc:	9200      	str	r2, [sp, #0]
   212ce:	69db      	ldr	r3, [r3, #28]
   212d0:	4642      	mov	r2, r8
   212d2:	f7ff fbf7 	bl	20ac4 <lfs_bd_read>
            if (err) {
   212d6:	4605      	mov	r5, r0
   212d8:	b180      	cbz	r0, 212fc <lfs_dir_fetchmatch+0x128>
                if (err == LFS_ERR_CORRUPT) {
   212da:	f110 0f54 	cmn.w	r0, #84	; 0x54
   212de:	f040 8155 	bne.w	2158c <lfs_dir_fetchmatch+0x3b8>
                    dir->erased = false;
   212e2:	2300      	movs	r3, #0
                        dir->erased = false;
   212e4:	75a3      	strb	r3, [r4, #22]
                        break;
   212e6:	e02d      	b.n	21344 <lfs_dir_fetchmatch+0x170>
	return (int)(unsigned int)(a - b);
   212e8:	6a3a      	ldr	r2, [r7, #32]
   212ea:	1a9b      	subs	r3, r3, r2
        if (err != LFS_ERR_CORRUPT &&
   212ec:	2b00      	cmp	r3, #0
   212ee:	bfd4      	ite	le
   212f0:	2100      	movle	r1, #0
   212f2:	2101      	movgt	r1, #1
   212f4:	e7b0      	b.n	21258 <lfs_dir_fetchmatch+0x84>
   212f6:	2301      	movs	r3, #1
   212f8:	60bb      	str	r3, [r7, #8]
   212fa:	e7c3      	b.n	21284 <lfs_dir_fetchmatch+0xb0>
            crc = lfs_crc(crc, &tag, sizeof(tag));
   212fc:	4659      	mov	r1, fp
   212fe:	2204      	movs	r2, #4
   21300:	69b8      	ldr	r0, [r7, #24]
   21302:	f002 fd53 	bl	23dac <lfs_crc>
	return __builtin_bswap32(a);
   21306:	69fb      	ldr	r3, [r7, #28]
   21308:	61b8      	str	r0, [r7, #24]
   2130a:	ba1b      	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
   2130c:	ea8a 0b03 	eor.w	fp, sl, r3
            if (!lfs_tag_isvalid(tag)) {
   21310:	f1bb 0f00 	cmp.w	fp, #0
            tag = lfs_frombe32(tag) ^ ptag;
   21314:	f8c7 b01c 	str.w	fp, [r7, #28]
            if (!lfs_tag_isvalid(tag)) {
   21318:	da3e      	bge.n	21398 <lfs_dir_fetchmatch+0x1c4>
    return (tag & 0x70000000) >> 20;
   2131a:	ea4f 5a1a 	mov.w	sl, sl, lsr #20
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   2131e:	f40a 6ae0 	and.w	sl, sl, #1792	; 0x700
   21322:	f5ba 6fa0 	cmp.w	sl, #1280	; 0x500
                        dir->off % lfs->cfg->prog_size == 0);
   21326:	68e3      	ldr	r3, [r4, #12]
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   21328:	d109      	bne.n	2133e <lfs_dir_fetchmatch+0x16a>
                        dir->off % lfs->cfg->prog_size == 0);
   2132a:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
   2132e:	6992      	ldr	r2, [r2, #24]
   21330:	fbb3 f1f2 	udiv	r1, r3, r2
   21334:	fb02 3311 	mls	r3, r2, r1, r3
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   21338:	fab3 f583 	clz	r5, r3
   2133c:	096d      	lsrs	r5, r5, #5
   2133e:	f005 0501 	and.w	r5, r5, #1
   21342:	75a5      	strb	r5, [r4, #22]
        if (dir->off > 0) {
   21344:	68e3      	ldr	r3, [r4, #12]
   21346:	2b00      	cmp	r3, #0
   21348:	f000 8147 	beq.w	215da <lfs_dir_fetchmatch+0x406>
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
   2134c:	4621      	mov	r1, r4
   2134e:	f108 003c 	add.w	r0, r8, #60	; 0x3c
   21352:	f00d fda8 	bl	2eea6 <lfs_gstate_hasmovehere>
   21356:	2800      	cmp	r0, #0
   21358:	f000 8131 	beq.w	215be <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
   2135c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
   21360:	f3c6 2289 	ubfx	r2, r6, #10, #10
   21364:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
   21368:	429a      	cmp	r2, r3
   2136a:	f040 8115 	bne.w	21598 <lfs_dir_fetchmatch+0x3c4>
            if (id) {
   2136e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   21370:	f046 4300 	orr.w	r3, r6, #2147483648	; 0x80000000
            if (id) {
   21374:	b13a      	cbz	r2, 21386 <lfs_dir_fetchmatch+0x1b2>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   21376:	8aa1      	ldrh	r1, [r4, #20]
   21378:	f3c3 2289 	ubfx	r2, r3, #10, #10
	return (a < b) ? a : b;
   2137c:	428a      	cmp	r2, r1
   2137e:	bf28      	it	cs
   21380:	460a      	movcs	r2, r1
   21382:	6e79      	ldr	r1, [r7, #100]	; 0x64
   21384:	800a      	strh	r2, [r1, #0]
            } else if (lfs_tag_id(besttag) < dir->count) {
   21386:	8aa2      	ldrh	r2, [r4, #20]
   21388:	f3c3 2389 	ubfx	r3, r3, #10, #10
                return LFS_ERR_NOENT;
   2138c:	429a      	cmp	r2, r3
   2138e:	bf94      	ite	ls
   21390:	2600      	movls	r6, #0
   21392:	f06f 0601 	mvnhi.w	r6, #1
   21396:	e0fa      	b.n	2158e <lfs_dir_fetchmatch+0x3ba>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
   21398:	4658      	mov	r0, fp
   2139a:	f00d fd6c 	bl	2ee76 <lfs_tag_dsize>
   2139e:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
   213a2:	697a      	ldr	r2, [r7, #20]
   213a4:	69db      	ldr	r3, [r3, #28]
   213a6:	4410      	add	r0, r2
   213a8:	4298      	cmp	r0, r3
   213aa:	d89a      	bhi.n	212e2 <lfs_dir_fetchmatch+0x10e>
    return (tag & 0x70000000) >> 20;
   213ac:	ea4f 521b 	mov.w	r2, fp, lsr #20
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   213b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   213b4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
                err = lfs_bd_read(lfs,
   213b8:	6821      	ldr	r1, [r4, #0]
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   213ba:	f040 8090 	bne.w	214de <lfs_dir_fetchmatch+0x30a>
                err = lfs_bd_read(lfs,
   213be:	2204      	movs	r2, #4
   213c0:	9203      	str	r2, [sp, #12]
   213c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
   213c6:	9202      	str	r2, [sp, #8]
   213c8:	697a      	ldr	r2, [r7, #20]
   213ca:	4640      	mov	r0, r8
   213cc:	3204      	adds	r2, #4
   213ce:	e9cd 1200 	strd	r1, r2, [sp]
   213d2:	4629      	mov	r1, r5
   213d4:	4642      	mov	r2, r8
   213d6:	f7ff fb75 	bl	20ac4 <lfs_bd_read>
                if (err) {
   213da:	4605      	mov	r5, r0
   213dc:	b130      	cbz	r0, 213ec <lfs_dir_fetchmatch+0x218>
                    if (err == LFS_ERR_CORRUPT) {
   213de:	f110 0f54 	cmn.w	r0, #84	; 0x54
   213e2:	f040 80d3 	bne.w	2158c <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   213e6:	f04f 0300 	mov.w	r3, #0
   213ea:	e77b      	b.n	212e4 <lfs_dir_fetchmatch+0x110>
                if (crc != dcrc) {
   213ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   213ee:	69bb      	ldr	r3, [r7, #24]
   213f0:	429a      	cmp	r2, r3
   213f2:	d1f8      	bne.n	213e6 <lfs_dir_fetchmatch+0x212>
    return (tag & 0x0ff00000) >> 20;
   213f4:	69fb      	ldr	r3, [r7, #28]
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   213f6:	2204      	movs	r2, #4
    return (tag & 0x0ff00000) >> 20;
   213f8:	0d1b      	lsrs	r3, r3, #20
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   213fa:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
   213fe:	f107 0118 	add.w	r1, r7, #24
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
   21402:	ea8b 7bc3 	eor.w	fp, fp, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   21406:	f002 fcd1 	bl	23dac <lfs_crc>
   2140a:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
                dir->off = off + lfs_tag_dsize(tag);
   2140e:	69f8      	ldr	r0, [r7, #28]
   21410:	f00d fd31 	bl	2ee76 <lfs_tag_dsize>
   21414:	697b      	ldr	r3, [r7, #20]
   21416:	4418      	add	r0, r3
                dir->count = tempcount;
   21418:	693b      	ldr	r3, [r7, #16]
                dir->etag = ptag;
   2141a:	e9c4 0b03 	strd	r0, fp, [r4, #12]
                dir->count = tempcount;
   2141e:	82a3      	strh	r3, [r4, #20]
                dir->tail[0] = temptail[0];
   21420:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21422:	61a3      	str	r3, [r4, #24]
                dir->tail[1] = temptail[1];
   21424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21426:	61e3      	str	r3, [r4, #28]
                dir->split = tempsplit;
   21428:	68fb      	ldr	r3, [r7, #12]
   2142a:	75e3      	strb	r3, [r4, #23]
                crc = 0xffffffff;
   2142c:	f04f 33ff 	mov.w	r3, #4294967295
   21430:	61bb      	str	r3, [r7, #24]
                continue;
   21432:	464b      	mov	r3, r9
   21434:	464e      	mov	r6, r9
   21436:	46da      	mov	sl, fp
   21438:	4699      	mov	r9, r3
   2143a:	e734      	b.n	212a6 <lfs_dir_fetchmatch+0xd2>
                crc = lfs_crc(crc, &dat, 1);
   2143c:	2201      	movs	r2, #1
   2143e:	69b8      	ldr	r0, [r7, #24]
   21440:	f107 0130 	add.w	r1, r7, #48	; 0x30
   21444:	f002 fcb2 	bl	23dac <lfs_crc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21448:	f10a 0a01 	add.w	sl, sl, #1
                crc = lfs_crc(crc, &dat, 1);
   2144c:	61b8      	str	r0, [r7, #24]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   2144e:	69f8      	ldr	r0, [r7, #28]
   21450:	f00d fd11 	bl	2ee76 <lfs_tag_dsize>
   21454:	4550      	cmp	r0, sl
                err = lfs_bd_read(lfs,
   21456:	6823      	ldr	r3, [r4, #0]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21458:	d91a      	bls.n	21490 <lfs_dir_fetchmatch+0x2bc>
                err = lfs_bd_read(lfs,
   2145a:	2101      	movs	r1, #1
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   2145c:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
                err = lfs_bd_read(lfs,
   21460:	9103      	str	r1, [sp, #12]
   21462:	f107 0130 	add.w	r1, r7, #48	; 0x30
   21466:	9102      	str	r1, [sp, #8]
   21468:	6979      	ldr	r1, [r7, #20]
   2146a:	4640      	mov	r0, r8
   2146c:	4451      	add	r1, sl
   2146e:	e9cd 3100 	strd	r3, r1, [sp]
   21472:	2100      	movs	r1, #0
   21474:	69d3      	ldr	r3, [r2, #28]
   21476:	4642      	mov	r2, r8
   21478:	f7ff fb24 	bl	20ac4 <lfs_bd_read>
                if (err) {
   2147c:	4605      	mov	r5, r0
   2147e:	2800      	cmp	r0, #0
   21480:	d0dc      	beq.n	2143c <lfs_dir_fetchmatch+0x268>
                    if (err == LFS_ERR_CORRUPT) {
   21482:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21486:	f040 8081 	bne.w	2158c <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   2148a:	f04f 0300 	mov.w	r3, #0
   2148e:	75a3      	strb	r3, [r4, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   21490:	69fb      	ldr	r3, [r7, #28]
                err = lfs_bd_read(lfs,
   21492:	6820      	ldr	r0, [r4, #0]
    return (tag & 0x70000000) >> 20;
   21494:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   21496:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
   2149a:	d123      	bne.n	214e4 <lfs_dir_fetchmatch+0x310>
                if (lfs_tag_id(tag) >= tempcount) {
   2149c:	693a      	ldr	r2, [r7, #16]
    return (tag & 0x000ffc00) >> 10;
   2149e:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
   214a2:	429a      	cmp	r2, r3
   214a4:	d801      	bhi.n	214aa <lfs_dir_fetchmatch+0x2d6>
                    tempcount = lfs_tag_id(tag) + 1;
   214a6:	3301      	adds	r3, #1
   214a8:	613b      	str	r3, [r7, #16]
            if ((fmask & tag) == (fmask & ftag)) {
   214aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   214ac:	69f9      	ldr	r1, [r7, #28]
                        dir->pair[0], off+sizeof(tag)});
   214ae:	6823      	ldr	r3, [r4, #0]
            if ((fmask & tag) == (fmask & ftag)) {
   214b0:	ea81 0a02 	eor.w	sl, r1, r2
   214b4:	683a      	ldr	r2, [r7, #0]
   214b6:	ea1a 0a02 	ands.w	sl, sl, r2
   214ba:	d151      	bne.n	21560 <lfs_dir_fetchmatch+0x38c>
                int res = cb(data, tag, &(struct lfs_diskoff){
   214bc:	633b      	str	r3, [r7, #48]	; 0x30
                        dir->pair[0], off+sizeof(tag)});
   214be:	697b      	ldr	r3, [r7, #20]
                int res = cb(data, tag, &(struct lfs_diskoff){
   214c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
                        dir->pair[0], off+sizeof(tag)});
   214c4:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
   214c6:	637b      	str	r3, [r7, #52]	; 0x34
   214c8:	e9d7 301a 	ldrd	r3, r0, [r7, #104]	; 0x68
   214cc:	4798      	blx	r3
                if (res < 0) {
   214ce:	1e05      	subs	r5, r0, #0
   214d0:	da43      	bge.n	2155a <lfs_dir_fetchmatch+0x386>
                    if (res == LFS_ERR_CORRUPT) {
   214d2:	f115 0f54 	cmn.w	r5, #84	; 0x54
   214d6:	d159      	bne.n	2158c <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   214d8:	f884 a016 	strb.w	sl, [r4, #22]
                        break;
   214dc:	e732      	b.n	21344 <lfs_dir_fetchmatch+0x170>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   214de:	f04f 0a04 	mov.w	sl, #4
   214e2:	e7b4      	b.n	2144e <lfs_dir_fetchmatch+0x27a>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
   214e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   214e8:	d11d      	bne.n	21526 <lfs_dir_fetchmatch+0x352>
                tempcount += lfs_tag_splice(tag);
   214ea:	6938      	ldr	r0, [r7, #16]
    return (int8_t)lfs_tag_chunk(tag);
   214ec:	b251      	sxtb	r1, r2
                tempcount += lfs_tag_splice(tag);
   214ee:	fa40 f282 	sxtab	r2, r0, r2
   214f2:	b292      	uxth	r2, r2
   214f4:	613a      	str	r2, [r7, #16]
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   214f6:	4a4e      	ldr	r2, [pc, #312]	; (21630 <lfs_dir_fetchmatch+0x45c>)
   214f8:	ea09 0202 	and.w	r2, r9, r2
   214fc:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   21500:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   21504:	4293      	cmp	r3, r2
   21506:	d102      	bne.n	2150e <lfs_dir_fetchmatch+0x33a>
                    tempbesttag |= 0x80000000;
   21508:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
   2150c:	e7cd      	b.n	214aa <lfs_dir_fetchmatch+0x2d6>
                } else if (tempbesttag != -1 &&
   2150e:	f1b9 3fff 	cmp.w	r9, #4294967295
   21512:	d0ca      	beq.n	214aa <lfs_dir_fetchmatch+0x2d6>
   21514:	f3c3 2389 	ubfx	r3, r3, #10, #10
   21518:	f3c9 2289 	ubfx	r2, r9, #10, #10
   2151c:	4293      	cmp	r3, r2
   2151e:	d8c4      	bhi.n	214aa <lfs_dir_fetchmatch+0x2d6>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   21520:	eb09 2981 	add.w	r9, r9, r1, lsl #10
   21524:	e7c1      	b.n	214aa <lfs_dir_fetchmatch+0x2d6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
   21526:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
   2152a:	d1be      	bne.n	214aa <lfs_dir_fetchmatch+0x2d6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
   2152c:	f002 0301 	and.w	r3, r2, #1
                err = lfs_bd_read(lfs,
   21530:	2208      	movs	r2, #8
                tempsplit = (lfs_tag_chunk(tag) & 1);
   21532:	60fb      	str	r3, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   21534:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
                err = lfs_bd_read(lfs,
   21538:	9203      	str	r2, [sp, #12]
   2153a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   2153e:	9202      	str	r2, [sp, #8]
   21540:	697a      	ldr	r2, [r7, #20]
   21542:	2100      	movs	r1, #0
   21544:	3204      	adds	r2, #4
   21546:	e9cd 0200 	strd	r0, r2, [sp]
   2154a:	4642      	mov	r2, r8
   2154c:	4640      	mov	r0, r8
   2154e:	69db      	ldr	r3, [r3, #28]
   21550:	f7ff fab8 	bl	20ac4 <lfs_bd_read>
                    if (err == LFS_ERR_CORRUPT) {
   21554:	3054      	adds	r0, #84	; 0x54
   21556:	d1a8      	bne.n	214aa <lfs_dir_fetchmatch+0x2d6>
   21558:	e6c3      	b.n	212e2 <lfs_dir_fetchmatch+0x10e>
                    tempbesttag = tag;
   2155a:	69fb      	ldr	r3, [r7, #28]
                if (res == LFS_CMP_EQ) {
   2155c:	d103      	bne.n	21566 <lfs_dir_fetchmatch+0x392>
                    tempbesttag = tag;
   2155e:	4699      	mov	r9, r3
   21560:	464b      	mov	r3, r9
   21562:	46b1      	mov	r9, r6
   21564:	e766      	b.n	21434 <lfs_dir_fetchmatch+0x260>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
   21566:	4a33      	ldr	r2, [pc, #204]	; (21634 <lfs_dir_fetchmatch+0x460>)
   21568:	ea89 0103 	eor.w	r1, r9, r3
   2156c:	400a      	ands	r2, r1
   2156e:	b152      	cbz	r2, 21586 <lfs_dir_fetchmatch+0x3b2>
                } else if (res == LFS_CMP_GT &&
   21570:	2d02      	cmp	r5, #2
   21572:	d1f5      	bne.n	21560 <lfs_dir_fetchmatch+0x38c>
   21574:	f3c9 2289 	ubfx	r2, r9, #10, #10
   21578:	f3c3 2189 	ubfx	r1, r3, #10, #10
   2157c:	428a      	cmp	r2, r1
   2157e:	d3ef      	bcc.n	21560 <lfs_dir_fetchmatch+0x38c>
                    tempbesttag = tag | 0x80000000;
   21580:	f043 4900 	orr.w	r9, r3, #2147483648	; 0x80000000
   21584:	e7ec      	b.n	21560 <lfs_dir_fetchmatch+0x38c>
                    tempbesttag = -1;
   21586:	f04f 39ff 	mov.w	r9, #4294967295
   2158a:	e7e9      	b.n	21560 <lfs_dir_fetchmatch+0x38c>
                return err;
   2158c:	462e      	mov	r6, r5
}
   2158e:	4630      	mov	r0, r6
   21590:	373c      	adds	r7, #60	; 0x3c
   21592:	46bd      	mov	sp, r7
   21594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                } else if (besttag != -1 &&
   21598:	1c71      	adds	r1, r6, #1
   2159a:	d10c      	bne.n	215b6 <lfs_dir_fetchmatch+0x3e2>
            if (id) {
   2159c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2159e:	b13b      	cbz	r3, 215b0 <lfs_dir_fetchmatch+0x3dc>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   215a0:	f240 32ff 	movw	r2, #1023	; 0x3ff
   215a4:	8aa3      	ldrh	r3, [r4, #20]
   215a6:	4293      	cmp	r3, r2
   215a8:	bf28      	it	cs
   215aa:	4613      	movcs	r3, r2
   215ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   215ae:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
   215b0:	f04f 33ff 	mov.w	r3, #4294967295
   215b4:	e6e7      	b.n	21386 <lfs_dir_fetchmatch+0x1b2>
                } else if (besttag != -1 &&
   215b6:	429a      	cmp	r2, r3
                    besttag -= LFS_MKTAG(0, 1, 0);
   215b8:	bf88      	it	hi
   215ba:	f5a6 6680 	subhi.w	r6, r6, #1024	; 0x400
            if (id) {
   215be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   215c0:	4633      	mov	r3, r6
            if (id) {
   215c2:	b13a      	cbz	r2, 215d4 <lfs_dir_fetchmatch+0x400>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   215c4:	8aa1      	ldrh	r1, [r4, #20]
   215c6:	f3c6 2289 	ubfx	r2, r6, #10, #10
   215ca:	428a      	cmp	r2, r1
   215cc:	bf28      	it	cs
   215ce:	460a      	movcs	r2, r1
   215d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
   215d2:	800a      	strh	r2, [r1, #0]
            if (lfs_tag_isvalid(besttag)) {
   215d4:	2e00      	cmp	r6, #0
   215d6:	dada      	bge.n	2158e <lfs_dir_fetchmatch+0x3ba>
   215d8:	e6d5      	b.n	21386 <lfs_dir_fetchmatch+0x1b2>
        dir->rev = revs[(r+1)%2];
   215da:	6878      	ldr	r0, [r7, #4]
   215dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
   215e0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   215e4:	f852 2c18 	ldr.w	r2, [r2, #-24]
    pair[0] = pair[1];
   215e8:	e9d4 3100 	ldrd	r3, r1, [r4]
        dir->rev = revs[(r+1)%2];
   215ec:	60a2      	str	r2, [r4, #8]
    for (int i = 0; i < 2; i++) {
   215ee:	68ba      	ldr	r2, [r7, #8]
    pair[1] = t;
   215f0:	e9c4 1300 	strd	r1, r3, [r4]
    for (int i = 0; i < 2; i++) {
   215f4:	2a01      	cmp	r2, #1
   215f6:	f47f ae7e 	bne.w	212f6 <lfs_dir_fetchmatch+0x122>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
   215fa:	466c      	mov	r4, sp
   215fc:	b08c      	sub	sp, #48	; 0x30
   215fe:	aa04      	add	r2, sp, #16
   21600:	480d      	ldr	r0, [pc, #52]	; (21638 <lfs_dir_fetchmatch+0x464>)
   21602:	6253      	str	r3, [r2, #36]	; 0x24
   21604:	6150      	str	r0, [r2, #20]
   21606:	f44f 7300 	mov.w	r3, #512	; 0x200
   2160a:	480c      	ldr	r0, [pc, #48]	; (2163c <lfs_dir_fetchmatch+0x468>)
   2160c:	8513      	strh	r3, [r2, #40]	; 0x28
   2160e:	6190      	str	r0, [r2, #24]
   21610:	f240 40d2 	movw	r0, #1234	; 0x4d2
   21614:	4b0a      	ldr	r3, [pc, #40]	; (21640 <lfs_dir_fetchmatch+0x46c>)
   21616:	e9c2 0107 	strd	r0, r1, [r2, #28]
   2161a:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   2161e:	4809      	ldr	r0, [pc, #36]	; (21644 <lfs_dir_fetchmatch+0x470>)
   21620:	f842 3f10 	str.w	r3, [r2, #16]!
   21624:	f00d fd0d 	bl	2f042 <z_log_msg_static_create.constprop.0>
   21628:	46a5      	mov	sp, r4
        return LFS_ERR_CORRUPT;
   2162a:	f06f 0653 	mvn.w	r6, #83	; 0x53
   2162e:	e7ae      	b.n	2158e <lfs_dir_fetchmatch+0x3ba>
   21630:	000ffc00 	.word	0x000ffc00
   21634:	7ffffc00 	.word	0x7ffffc00
   21638:	00037a85 	.word	0x00037a85
   2163c:	00037a1d 	.word	0x00037a1d
   21640:	01000006 	.word	0x01000006
   21644:	00031544 	.word	0x00031544

00021648 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
   21648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    parent->tail[1] = 1;
   2164c:	2301      	movs	r3, #1
   2164e:	2400      	movs	r4, #0
        lfs_mdir_t *parent) {
   21650:	4605      	mov	r5, r0
   21652:	460e      	mov	r6, r1
   21654:	4692      	mov	sl, r2
    parent->tail[1] = 1;
   21656:	e9c2 4306 	strd	r4, r3, [r2, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   2165a:	4f17      	ldr	r7, [pc, #92]	; (216b8 <lfs_fs_parent+0x70>)
   2165c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 216bc <lfs_fs_parent+0x74>
   21660:	f8df 905c 	ldr.w	r9, [pc, #92]	; 216c0 <lfs_fs_parent+0x78>
        lfs_mdir_t *parent) {
   21664:	b088      	sub	sp, #32
    while (!lfs_pair_isnull(parent->tail)) {
   21666:	f10a 0218 	add.w	r2, sl, #24
   2166a:	4610      	mov	r0, r2
   2166c:	f00d fbe8 	bl	2ee40 <lfs_pair_isnull>
   21670:	b110      	cbz	r0, 21678 <lfs_fs_parent+0x30>
    return LFS_ERR_NOENT;
   21672:	f06f 0001 	mvn.w	r0, #1
   21676:	e018      	b.n	216aa <lfs_fs_parent+0x62>
        if (cycle >= lfs->cfg->block_count/2) {
   21678:	6eab      	ldr	r3, [r5, #104]	; 0x68
   2167a:	6a1b      	ldr	r3, [r3, #32]
   2167c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   21680:	d216      	bcs.n	216b0 <lfs_fs_parent+0x68>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   21682:	6833      	ldr	r3, [r6, #0]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   21684:	4651      	mov	r1, sl
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   21686:	9306      	str	r3, [sp, #24]
   21688:	6873      	ldr	r3, [r6, #4]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   2168a:	e9cd 8000 	strd	r8, r0, [sp]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   2168e:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   21690:	ab05      	add	r3, sp, #20
   21692:	e9cd 7302 	strd	r7, r3, [sp, #8]
   21696:	4628      	mov	r0, r5
   21698:	464b      	mov	r3, r9
        cycle += 1;
   2169a:	3401      	adds	r4, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   2169c:	9505      	str	r5, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   2169e:	f7ff fd99 	bl	211d4 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
   216a2:	2800      	cmp	r0, #0
   216a4:	d0df      	beq.n	21666 <lfs_fs_parent+0x1e>
   216a6:	1c83      	adds	r3, r0, #2
   216a8:	d0dd      	beq.n	21666 <lfs_fs_parent+0x1e>
}
   216aa:	b008      	add	sp, #32
   216ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LFS_ERR_CORRUPT;
   216b0:	f06f 0053 	mvn.w	r0, #83	; 0x53
   216b4:	e7f9      	b.n	216aa <lfs_fs_parent+0x62>
   216b6:	bf00      	nop
   216b8:	0002ef69 	.word	0x0002ef69
   216bc:	20000008 	.word	0x20000008
   216c0:	7ff003ff 	.word	0x7ff003ff

000216c4 <lfs_dir_find>:
        const char **path, uint16_t *id) {
   216c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216c8:	b08d      	sub	sp, #52	; 0x34
   216ca:	4681      	mov	r9, r0
   216cc:	4688      	mov	r8, r1
    const char *name = *path;
   216ce:	6816      	ldr	r6, [r2, #0]
        const char **path, uint16_t *id) {
   216d0:	9206      	str	r2, [sp, #24]
    if (id) {
   216d2:	9305      	str	r3, [sp, #20]
   216d4:	b11b      	cbz	r3, 216de <lfs_dir_find+0x1a>
        *id = 0x3ff;
   216d6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   216da:	9a05      	ldr	r2, [sp, #20]
   216dc:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
   216de:	f8d9 3020 	ldr.w	r3, [r9, #32]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
   216e2:	4c44      	ldr	r4, [pc, #272]	; (217f4 <lfs_dir_find+0x130>)
    dir->tail[0] = lfs->root[0];
   216e4:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
   216e8:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   216ec:	f8c8 301c 	str.w	r3, [r8, #28]
        name += strspn(name, "/");
   216f0:	4630      	mov	r0, r6
   216f2:	4941      	ldr	r1, [pc, #260]	; (217f8 <lfs_dir_find+0x134>)
   216f4:	f00f f8e0 	bl	308b8 <strspn>
   216f8:	1835      	adds	r5, r6, r0
        lfs_size_t namelen = strcspn(name, "/");
   216fa:	4628      	mov	r0, r5
   216fc:	493e      	ldr	r1, [pc, #248]	; (217f8 <lfs_dir_find+0x134>)
   216fe:	f00f f899 	bl	30834 <strcspn>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   21702:	2801      	cmp	r0, #1
        lfs_size_t namelen = strcspn(name, "/");
   21704:	4607      	mov	r7, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   21706:	eb05 0600 	add.w	r6, r5, r0
   2170a:	d123      	bne.n	21754 <lfs_dir_find+0x90>
   2170c:	4602      	mov	r2, r0
   2170e:	493b      	ldr	r1, [pc, #236]	; (217fc <lfs_dir_find+0x138>)
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   21710:	4628      	mov	r0, r5
   21712:	f00e ff08 	bl	30526 <memcmp>
   21716:	2800      	cmp	r0, #0
   21718:	d0ea      	beq.n	216f0 <lfs_dir_find+0x2c>
        const char *suffix = name + namelen;
   2171a:	46b2      	mov	sl, r6
        int depth = 1;
   2171c:	f04f 0b01 	mov.w	fp, #1
            suffix += strspn(suffix, "/");
   21720:	4650      	mov	r0, sl
   21722:	4935      	ldr	r1, [pc, #212]	; (217f8 <lfs_dir_find+0x134>)
   21724:	f00f f8c8 	bl	308b8 <strspn>
   21728:	4482      	add	sl, r0
            sufflen = strcspn(suffix, "/");
   2172a:	4650      	mov	r0, sl
   2172c:	4932      	ldr	r1, [pc, #200]	; (217f8 <lfs_dir_find+0x134>)
   2172e:	f00f f881 	bl	30834 <strcspn>
            if (sufflen == 0) {
   21732:	4602      	mov	r2, r0
   21734:	b1b8      	cbz	r0, 21766 <lfs_dir_find+0xa2>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
   21736:	2802      	cmp	r0, #2
   21738:	d111      	bne.n	2175e <lfs_dir_find+0x9a>
   2173a:	9007      	str	r0, [sp, #28]
   2173c:	4930      	ldr	r1, [pc, #192]	; (21800 <lfs_dir_find+0x13c>)
   2173e:	4650      	mov	r0, sl
   21740:	f00e fef1 	bl	30526 <memcmp>
   21744:	9a07      	ldr	r2, [sp, #28]
   21746:	b950      	cbnz	r0, 2175e <lfs_dir_find+0x9a>
                if (depth == 0) {
   21748:	f1bb 0b01 	subs.w	fp, fp, #1
   2174c:	d109      	bne.n	21762 <lfs_dir_find+0x9e>
                    name = suffix + sufflen;
   2174e:	f10a 0602 	add.w	r6, sl, #2
                    goto nextname;
   21752:	e7cd      	b.n	216f0 <lfs_dir_find+0x2c>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   21754:	2802      	cmp	r0, #2
   21756:	d1e0      	bne.n	2171a <lfs_dir_find+0x56>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   21758:	4602      	mov	r2, r0
   2175a:	4929      	ldr	r1, [pc, #164]	; (21800 <lfs_dir_find+0x13c>)
   2175c:	e7d8      	b.n	21710 <lfs_dir_find+0x4c>
                depth += 1;
   2175e:	f10b 0b01 	add.w	fp, fp, #1
            suffix += sufflen;
   21762:	4492      	add	sl, r2
            suffix += strspn(suffix, "/");
   21764:	e7dc      	b.n	21720 <lfs_dir_find+0x5c>
        if (name[0] == '\0') {
   21766:	782b      	ldrb	r3, [r5, #0]
   21768:	2b00      	cmp	r3, #0
   2176a:	d03c      	beq.n	217e6 <lfs_dir_find+0x122>
        *path = name;
   2176c:	9b06      	ldr	r3, [sp, #24]
   2176e:	601d      	str	r5, [r3, #0]
    return (tag & 0x7ff00000) >> 20;
   21770:	0d23      	lsrs	r3, r4, #20
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   21772:	2b02      	cmp	r3, #2
   21774:	d13b      	bne.n	217ee <lfs_dir_find+0x12a>
        if (lfs_tag_id(tag) != 0x3ff) {
   21776:	f240 33ff 	movw	r3, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   2177a:	f3c4 2489 	ubfx	r4, r4, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
   2177e:	429c      	cmp	r4, r3
   21780:	f108 0a18 	add.w	sl, r8, #24
   21784:	d123      	bne.n	217ce <lfs_dir_find+0x10a>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   21786:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
                    (strchr(name, '/') == NULL) ? id : NULL,
   2178a:	212f      	movs	r1, #47	; 0x2f
   2178c:	4628      	mov	r0, r5
   2178e:	f00f f83c 	bl	3080a <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   21792:	2800      	cmp	r0, #0
   21794:	9b05      	ldr	r3, [sp, #20]
   21796:	bf18      	it	ne
   21798:	2300      	movne	r3, #0
   2179a:	4a1a      	ldr	r2, [pc, #104]	; (21804 <lfs_dir_find+0x140>)
   2179c:	4641      	mov	r1, r8
   2179e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   217a2:	4648      	mov	r0, r9
   217a4:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
   217a8:	4652      	mov	r2, sl
   217aa:	f8cd b00c 	str.w	fp, [sp, #12]
   217ae:	9700      	str	r7, [sp, #0]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
   217b0:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
   217b4:	970b      	str	r7, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   217b6:	f7ff fd0d 	bl	211d4 <lfs_dir_fetchmatch>
            if (tag < 0) {
   217ba:	1e04      	subs	r4, r0, #0
   217bc:	db13      	blt.n	217e6 <lfs_dir_find+0x122>
            if (tag) {
   217be:	d197      	bne.n	216f0 <lfs_dir_find+0x2c>
            if (!dir->split) {
   217c0:	f898 3017 	ldrb.w	r3, [r8, #23]
   217c4:	2b00      	cmp	r3, #0
   217c6:	d1e0      	bne.n	2178a <lfs_dir_find+0xc6>
                return LFS_ERR_NOENT;
   217c8:	f06f 0401 	mvn.w	r4, #1
   217cc:	e00b      	b.n	217e6 <lfs_dir_find+0x122>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   217ce:	4b0e      	ldr	r3, [pc, #56]	; (21808 <lfs_dir_find+0x144>)
   217d0:	4641      	mov	r1, r8
   217d2:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
   217d6:	4648      	mov	r0, r9
   217d8:	4a0c      	ldr	r2, [pc, #48]	; (2180c <lfs_dir_find+0x148>)
   217da:	f8cd a000 	str.w	sl, [sp]
   217de:	f00d fbb7 	bl	2ef50 <lfs_dir_get>
            if (res < 0) {
   217e2:	1e04      	subs	r4, r0, #0
   217e4:	dacf      	bge.n	21786 <lfs_dir_find+0xc2>
}
   217e6:	4620      	mov	r0, r4
   217e8:	b00d      	add	sp, #52	; 0x34
   217ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOTDIR;
   217ee:	f06f 0413 	mvn.w	r4, #19
   217f2:	e7f8      	b.n	217e6 <lfs_dir_find+0x122>
   217f4:	002ffc00 	.word	0x002ffc00
   217f8:	00033835 	.word	0x00033835
   217fc:	00037ab0 	.word	0x00037ab0
   21800:	00037aaf 	.word	0x00037aaf
   21804:	0002f009 	.word	0x0002f009
   21808:	20000008 	.word	0x20000008
   2180c:	700ffc00 	.word	0x700ffc00

00021810 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
   21810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21814:	4690      	mov	r8, r2
    if (file->pos >= file->ctz.size) {
   21816:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   21818:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        void *buffer, lfs_size_t size) {
   2181a:	4607      	mov	r7, r0
    if (file->pos >= file->ctz.size) {
   2181c:	42b2      	cmp	r2, r6
        void *buffer, lfs_size_t size) {
   2181e:	460c      	mov	r4, r1
   21820:	b085      	sub	sp, #20
    if (file->pos >= file->ctz.size) {
   21822:	d25c      	bcs.n	218de <lfs_file_flushedread+0xce>
    size = lfs_min(size, file->ctz.size - file->pos);
   21824:	1ab6      	subs	r6, r6, r2
   21826:	429e      	cmp	r6, r3
   21828:	bf28      	it	cs
   2182a:	461e      	movcs	r6, r3
    nsize = size;
   2182c:	46b1      	mov	r9, r6
            int err = lfs_dir_getread(lfs, &file->m,
   2182e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 218e4 <lfs_file_flushedread+0xd4>
   21832:	f101 0a40 	add.w	sl, r1, #64	; 0x40
    while (nsize > 0) {
   21836:	f1b9 0f00 	cmp.w	r9, #0
   2183a:	d101      	bne.n	21840 <lfs_file_flushedread+0x30>
    return size;
   2183c:	4630      	mov	r0, r6
   2183e:	e018      	b.n	21872 <lfs_file_flushedread+0x62>
        if (!(file->flags & LFS_F_READING) ||
   21840:	6b22      	ldr	r2, [r4, #48]	; 0x30
   21842:	0351      	lsls	r1, r2, #13
   21844:	d504      	bpl.n	21850 <lfs_file_flushedread+0x40>
                file->off == lfs->cfg->block_size) {
   21846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
        if (!(file->flags & LFS_F_READING) ||
   21848:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   2184a:	69db      	ldr	r3, [r3, #28]
   2184c:	4299      	cmp	r1, r3
   2184e:	d11b      	bne.n	21888 <lfs_file_flushedread+0x78>
            if (!(file->flags & LFS_F_INLINE)) {
   21850:	02d2      	lsls	r2, r2, #11
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   21852:	6b63      	ldr	r3, [r4, #52]	; 0x34
            if (!(file->flags & LFS_F_INLINE)) {
   21854:	d410      	bmi.n	21878 <lfs_file_flushedread+0x68>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   21856:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   2185a:	9202      	str	r2, [sp, #8]
   2185c:	f104 0238 	add.w	r2, r4, #56	; 0x38
   21860:	e9cd 3200 	strd	r3, r2, [sp]
   21864:	4651      	mov	r1, sl
   21866:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2186a:	4638      	mov	r0, r7
   2186c:	f00d fc3f 	bl	2f0ee <lfs_ctz_find.constprop.0>
                if (err) {
   21870:	b130      	cbz	r0, 21880 <lfs_file_flushedread+0x70>
}
   21872:	b005      	add	sp, #20
   21874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                file->block = LFS_BLOCK_INLINE;
   21878:	f06f 0201 	mvn.w	r2, #1
                file->off = file->pos;
   2187c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            file->flags |= LFS_F_READING;
   21880:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   21886:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   21888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2188a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   2188c:	69db      	ldr	r3, [r3, #28]
        if (file->flags & LFS_F_INLINE) {
   2188e:	6b21      	ldr	r1, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   21890:	1a9d      	subs	r5, r3, r2
   21892:	454d      	cmp	r5, r9
   21894:	bf28      	it	cs
   21896:	464d      	movcs	r5, r9
        if (file->flags & LFS_F_INLINE) {
   21898:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
            int err = lfs_dir_getread(lfs, &file->m,
   2189c:	e9cd 8502 	strd	r8, r5, [sp, #8]
   218a0:	9201      	str	r2, [sp, #4]
        if (file->flags & LFS_F_INLINE) {
   218a2:	d015      	beq.n	218d0 <lfs_file_flushedread+0xc0>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   218a4:	88a2      	ldrh	r2, [r4, #4]
            int err = lfs_dir_getread(lfs, &file->m,
   218a6:	4638      	mov	r0, r7
   218a8:	ea4b 2282 	orr.w	r2, fp, r2, lsl #10
   218ac:	9200      	str	r2, [sp, #0]
   218ae:	f104 0108 	add.w	r1, r4, #8
   218b2:	4652      	mov	r2, sl
   218b4:	f7ff fc2c 	bl	21110 <lfs_dir_getread.constprop.0>
            if (err) {
   218b8:	2800      	cmp	r0, #0
   218ba:	d1da      	bne.n	21872 <lfs_file_flushedread+0x62>
        file->pos += diff;
   218bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
        data += diff;
   218be:	44a8      	add	r8, r5
        file->pos += diff;
   218c0:	442b      	add	r3, r5
   218c2:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   218c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        nsize -= diff;
   218c6:	eba9 0905 	sub.w	r9, r9, r5
        file->off += diff;
   218ca:	442b      	add	r3, r5
   218cc:	63e3      	str	r3, [r4, #60]	; 0x3c
        nsize -= diff;
   218ce:	e7b2      	b.n	21836 <lfs_file_flushedread+0x26>
            int err = lfs_bd_read(lfs,
   218d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   218d2:	4638      	mov	r0, r7
   218d4:	9200      	str	r2, [sp, #0]
   218d6:	4652      	mov	r2, sl
   218d8:	f7ff f8f4 	bl	20ac4 <lfs_bd_read>
   218dc:	e7ec      	b.n	218b8 <lfs_file_flushedread+0xa8>
        return 0;
   218de:	2000      	movs	r0, #0
   218e0:	e7c7      	b.n	21872 <lfs_file_flushedread+0x62>
   218e2:	bf00      	nop
   218e4:	20100000 	.word	0x20100000

000218e8 <lfs_fs_rawtraverse>:
        bool includeorphans) {
   218e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218ec:	b091      	sub	sp, #68	; 0x44
   218ee:	4604      	mov	r4, r0
   218f0:	460d      	mov	r5, r1
   218f2:	4616      	mov	r6, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
   218f4:	2100      	movs	r1, #0
   218f6:	221c      	movs	r2, #28
   218f8:	a808      	add	r0, sp, #32
        bool includeorphans) {
   218fa:	9305      	str	r3, [sp, #20]
    lfs_mdir_t dir = {.tail = {0, 1}};
   218fc:	f00e fe5d 	bl	305ba <memset>
   21900:	2301      	movs	r3, #1
    lfs_block_t cycle = 0;
   21902:	f04f 0800 	mov.w	r8, #0
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   21906:	f240 2902 	movw	r9, #514	; 0x202
    lfs_mdir_t dir = {.tail = {0, 1}};
   2190a:	930f      	str	r3, [sp, #60]	; 0x3c
    while (!lfs_pair_isnull(dir.tail)) {
   2190c:	a80e      	add	r0, sp, #56	; 0x38
   2190e:	f00d fa97 	bl	2ee40 <lfs_pair_isnull>
   21912:	b120      	cbz	r0, 2191e <lfs_fs_rawtraverse+0x36>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   21914:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   21916:	2f00      	cmp	r7, #0
   21918:	d155      	bne.n	219c6 <lfs_fs_rawtraverse+0xde>
    return 0;
   2191a:	4638      	mov	r0, r7
   2191c:	e041      	b.n	219a2 <lfs_fs_rawtraverse+0xba>
        if (cycle >= lfs->cfg->block_count/2) {
   2191e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21920:	6a1b      	ldr	r3, [r3, #32]
   21922:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
   21926:	d27b      	bcs.n	21a20 <lfs_fs_rawtraverse+0x138>
            int err = cb(data, dir.tail[i]);
   21928:	4630      	mov	r0, r6
   2192a:	990e      	ldr	r1, [sp, #56]	; 0x38
        cycle += 1;
   2192c:	f108 0801 	add.w	r8, r8, #1
            int err = cb(data, dir.tail[i]);
   21930:	47a8      	blx	r5
            if (err) {
   21932:	2800      	cmp	r0, #0
   21934:	d135      	bne.n	219a2 <lfs_fs_rawtraverse+0xba>
            int err = cb(data, dir.tail[i]);
   21936:	4630      	mov	r0, r6
   21938:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2193a:	47a8      	blx	r5
            if (err) {
   2193c:	bb88      	cbnz	r0, 219a2 <lfs_fs_rawtraverse+0xba>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
   2193e:	4620      	mov	r0, r4
   21940:	aa0e      	add	r2, sp, #56	; 0x38
   21942:	a908      	add	r1, sp, #32
   21944:	f00d fb80 	bl	2f048 <lfs_dir_fetch>
        if (err) {
   21948:	bb58      	cbnz	r0, 219a2 <lfs_fs_rawtraverse+0xba>
   2194a:	4607      	mov	r7, r0
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   2194c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 21a28 <lfs_fs_rawtraverse+0x140>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   21950:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 21a2c <lfs_fs_rawtraverse+0x144>
        for (uint16_t id = 0; id < dir.count; id++) {
   21954:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   21958:	b2bb      	uxth	r3, r7
   2195a:	429a      	cmp	r2, r3
   2195c:	d9d6      	bls.n	2190c <lfs_fs_rawtraverse+0x24>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   2195e:	aa06      	add	r2, sp, #24
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   21960:	ea0a 2387 	and.w	r3, sl, r7, lsl #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   21964:	9200      	str	r2, [sp, #0]
   21966:	4620      	mov	r0, r4
   21968:	4a31      	ldr	r2, [pc, #196]	; (21a30 <lfs_fs_rawtraverse+0x148>)
   2196a:	ea43 030b 	orr.w	r3, r3, fp
   2196e:	a908      	add	r1, sp, #32
   21970:	f00d faee 	bl	2ef50 <lfs_dir_get>
            if (tag < 0) {
   21974:	2800      	cmp	r0, #0
   21976:	da03      	bge.n	21980 <lfs_fs_rawtraverse+0x98>
                if (tag == LFS_ERR_NOENT) {
   21978:	1c83      	adds	r3, r0, #2
   2197a:	d112      	bne.n	219a2 <lfs_fs_rawtraverse+0xba>
        for (uint16_t id = 0; id < dir.count; id++) {
   2197c:	3701      	adds	r7, #1
   2197e:	e7e9      	b.n	21954 <lfs_fs_rawtraverse+0x6c>
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   21980:	ebb9 5f10 	cmp.w	r9, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
   21984:	ea4f 5310 	mov.w	r3, r0, lsr #20
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   21988:	d10e      	bne.n	219a8 <lfs_fs_rawtraverse+0xc0>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
   2198a:	9b07      	ldr	r3, [sp, #28]
   2198c:	4622      	mov	r2, r4
   2198e:	9300      	str	r3, [sp, #0]
   21990:	2100      	movs	r1, #0
   21992:	4620      	mov	r0, r4
   21994:	e9cd 5601 	strd	r5, r6, [sp, #4]
   21998:	9b06      	ldr	r3, [sp, #24]
   2199a:	f00d fbf1 	bl	2f180 <lfs_ctz_traverse>
                    if (err) {
   2199e:	2800      	cmp	r0, #0
   219a0:	d0ec      	beq.n	2197c <lfs_fs_rawtraverse+0x94>
}
   219a2:	b011      	add	sp, #68	; 0x44
   219a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (includeorphans &&
   219a8:	9a05      	ldr	r2, [sp, #20]
   219aa:	2a00      	cmp	r2, #0
   219ac:	d0e6      	beq.n	2197c <lfs_fs_rawtraverse+0x94>
   219ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   219b2:	d1e3      	bne.n	2197c <lfs_fs_rawtraverse+0x94>
                    err = cb(data, (&ctz.head)[i]);
   219b4:	4630      	mov	r0, r6
   219b6:	9906      	ldr	r1, [sp, #24]
   219b8:	47a8      	blx	r5
                    if (err) {
   219ba:	2800      	cmp	r0, #0
   219bc:	d1f1      	bne.n	219a2 <lfs_fs_rawtraverse+0xba>
                    err = cb(data, (&ctz.head)[i]);
   219be:	4630      	mov	r0, r6
   219c0:	9907      	ldr	r1, [sp, #28]
   219c2:	47a8      	blx	r5
   219c4:	e7eb      	b.n	2199e <lfs_fs_rawtraverse+0xb6>
        if (f->type != LFS_TYPE_REG) {
   219c6:	79bb      	ldrb	r3, [r7, #6]
   219c8:	2b01      	cmp	r3, #1
   219ca:	d001      	beq.n	219d0 <lfs_fs_rawtraverse+0xe8>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   219cc:	683f      	ldr	r7, [r7, #0]
   219ce:	e7a2      	b.n	21916 <lfs_fs_rawtraverse+0x2e>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
   219d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   219d2:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
   219d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   219da:	d013      	beq.n	21a04 <lfs_fs_rawtraverse+0x11c>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
   219dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   219de:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
   219e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   219e6:	d1f1      	bne.n	219cc <lfs_fs_rawtraverse+0xe4>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   219e8:	e9cd 5601 	strd	r5, r6, [sp, #4]
   219ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   219ee:	4622      	mov	r2, r4
   219f0:	9300      	str	r3, [sp, #0]
   219f2:	4620      	mov	r0, r4
   219f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   219f6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   219fa:	f00d fbc1 	bl	2f180 <lfs_ctz_traverse>
            if (err) {
   219fe:	2800      	cmp	r0, #0
   21a00:	d0e4      	beq.n	219cc <lfs_fs_rawtraverse+0xe4>
   21a02:	e7ce      	b.n	219a2 <lfs_fs_rawtraverse+0xba>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   21a04:	e9cd 5601 	strd	r5, r6, [sp, #4]
   21a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21a0a:	4622      	mov	r2, r4
   21a0c:	9300      	str	r3, [sp, #0]
   21a0e:	4620      	mov	r0, r4
   21a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21a12:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21a16:	f00d fbb3 	bl	2f180 <lfs_ctz_traverse>
            if (err) {
   21a1a:	2800      	cmp	r0, #0
   21a1c:	d0de      	beq.n	219dc <lfs_fs_rawtraverse+0xf4>
   21a1e:	e7c0      	b.n	219a2 <lfs_fs_rawtraverse+0xba>
            return LFS_ERR_CORRUPT;
   21a20:	f06f 0053 	mvn.w	r0, #83	; 0x53
   21a24:	e7bd      	b.n	219a2 <lfs_fs_rawtraverse+0xba>
   21a26:	bf00      	nop
   21a28:	03fffc00 	.word	0x03fffc00
   21a2c:	20000008 	.word	0x20000008
   21a30:	700ffc00 	.word	0x700ffc00

00021a34 <lfs_fs_rawsize>:
    *size += 1;
    return 0;
}

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
    lfs_size_t size = 0;
   21a34:	2300      	movs	r3, #0
static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
   21a36:	b507      	push	{r0, r1, r2, lr}
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
   21a38:	4904      	ldr	r1, [pc, #16]	; (21a4c <lfs_fs_rawsize+0x18>)
   21a3a:	aa01      	add	r2, sp, #4
    lfs_size_t size = 0;
   21a3c:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
   21a3e:	f7ff ff53 	bl	218e8 <lfs_fs_rawtraverse>
    if (err) {
   21a42:	b900      	cbnz	r0, 21a46 <lfs_fs_rawsize+0x12>
        return err;
    }

    return size;
   21a44:	9801      	ldr	r0, [sp, #4]
}
   21a46:	b003      	add	sp, #12
   21a48:	f85d fb04 	ldr.w	pc, [sp], #4
   21a4c:	0002ef1b 	.word	0x0002ef1b

00021a50 <lfs_bd_erase.isra.0>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   21a50:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
   21a52:	6a02      	ldr	r2, [r0, #32]
   21a54:	428a      	cmp	r2, r1
   21a56:	d80b      	bhi.n	21a70 <lfs_bd_erase.isra.0+0x20>
   21a58:	490d      	ldr	r1, [pc, #52]	; (21a90 <lfs_bd_erase.isra.0+0x40>)
   21a5a:	f240 1303 	movw	r3, #259	; 0x103
   21a5e:	4a0d      	ldr	r2, [pc, #52]	; (21a94 <lfs_bd_erase.isra.0+0x44>)
   21a60:	480d      	ldr	r0, [pc, #52]	; (21a98 <lfs_bd_erase.isra.0+0x48>)
   21a62:	f008 fe16 	bl	2a692 <assert_print>
   21a66:	f240 1103 	movw	r1, #259	; 0x103
    LFS_ASSERT(err <= 0);
   21a6a:	480a      	ldr	r0, [pc, #40]	; (21a94 <lfs_bd_erase.isra.0+0x44>)
   21a6c:	f008 fe0a 	bl	2a684 <assert_post_action>
    int err = lfs->cfg->erase(lfs->cfg, block);
   21a70:	68c3      	ldr	r3, [r0, #12]
   21a72:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
   21a74:	2800      	cmp	r0, #0
   21a76:	dd09      	ble.n	21a8c <lfs_bd_erase.isra.0+0x3c>
   21a78:	4908      	ldr	r1, [pc, #32]	; (21a9c <lfs_bd_erase.isra.0+0x4c>)
   21a7a:	f240 1305 	movw	r3, #261	; 0x105
   21a7e:	4a05      	ldr	r2, [pc, #20]	; (21a94 <lfs_bd_erase.isra.0+0x44>)
   21a80:	4805      	ldr	r0, [pc, #20]	; (21a98 <lfs_bd_erase.isra.0+0x48>)
   21a82:	f008 fe06 	bl	2a692 <assert_print>
   21a86:	f240 1105 	movw	r1, #261	; 0x105
   21a8a:	e7ee      	b.n	21a6a <lfs_bd_erase.isra.0+0x1a>
}
   21a8c:	bd08      	pop	{r3, pc}
   21a8e:	bf00      	nop
   21a90:	00037d31 	.word	0x00037d31
   21a94:	00037a1d 	.word	0x00037a1d
   21a98:	00032629 	.word	0x00032629
   21a9c:	00037a75 	.word	0x00037a75

00021aa0 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   21aa0:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
   21aa2:	6681      	str	r1, [r0, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->read_size != 0);
   21aa4:	694d      	ldr	r5, [r1, #20]
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   21aa6:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->read_size != 0);
   21aa8:	b95d      	cbnz	r5, 21ac2 <lfs_init+0x22>
   21aaa:	4988      	ldr	r1, [pc, #544]	; (21ccc <lfs_init+0x22c>)
   21aac:	f640 734e 	movw	r3, #3918	; 0xf4e
   21ab0:	4a87      	ldr	r2, [pc, #540]	; (21cd0 <lfs_init+0x230>)
   21ab2:	4888      	ldr	r0, [pc, #544]	; (21cd4 <lfs_init+0x234>)
   21ab4:	f008 fded 	bl	2a692 <assert_print>
   21ab8:	f640 714e 	movw	r1, #3918	; 0xf4e
    LFS_ASSERT(lfs->cfg->prog_size != 0);
   21abc:	4884      	ldr	r0, [pc, #528]	; (21cd0 <lfs_init+0x230>)
   21abe:	f008 fde1 	bl	2a684 <assert_post_action>
   21ac2:	698a      	ldr	r2, [r1, #24]
   21ac4:	b94a      	cbnz	r2, 21ada <lfs_init+0x3a>
   21ac6:	4984      	ldr	r1, [pc, #528]	; (21cd8 <lfs_init+0x238>)
   21ac8:	f640 734f 	movw	r3, #3919	; 0xf4f
   21acc:	4a80      	ldr	r2, [pc, #512]	; (21cd0 <lfs_init+0x230>)
   21ace:	4881      	ldr	r0, [pc, #516]	; (21cd4 <lfs_init+0x234>)
   21ad0:	f008 fddf 	bl	2a692 <assert_print>
   21ad4:	f640 714f 	movw	r1, #3919	; 0xf4f
   21ad8:	e7f0      	b.n	21abc <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
   21ada:	6a88      	ldr	r0, [r1, #40]	; 0x28
   21adc:	b948      	cbnz	r0, 21af2 <lfs_init+0x52>
   21ade:	497f      	ldr	r1, [pc, #508]	; (21cdc <lfs_init+0x23c>)
   21ae0:	f44f 6375 	mov.w	r3, #3920	; 0xf50
   21ae4:	4a7a      	ldr	r2, [pc, #488]	; (21cd0 <lfs_init+0x230>)
   21ae6:	487b      	ldr	r0, [pc, #492]	; (21cd4 <lfs_init+0x234>)
   21ae8:	f008 fdd3 	bl	2a692 <assert_print>
   21aec:	f44f 6175 	mov.w	r1, #3920	; 0xf50
   21af0:	e7e4      	b.n	21abc <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
   21af2:	fbb0 f3f5 	udiv	r3, r0, r5
   21af6:	fb05 0313 	mls	r3, r5, r3, r0
   21afa:	b14b      	cbz	r3, 21b10 <lfs_init+0x70>
   21afc:	4978      	ldr	r1, [pc, #480]	; (21ce0 <lfs_init+0x240>)
   21afe:	f640 7354 	movw	r3, #3924	; 0xf54
   21b02:	4a73      	ldr	r2, [pc, #460]	; (21cd0 <lfs_init+0x230>)
   21b04:	4873      	ldr	r0, [pc, #460]	; (21cd4 <lfs_init+0x234>)
   21b06:	f008 fdc4 	bl	2a692 <assert_print>
   21b0a:	f640 7154 	movw	r1, #3924	; 0xf54
   21b0e:	e7d5      	b.n	21abc <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
   21b10:	fbb0 f3f2 	udiv	r3, r0, r2
   21b14:	fb02 0313 	mls	r3, r2, r3, r0
   21b18:	b14b      	cbz	r3, 21b2e <lfs_init+0x8e>
   21b1a:	4972      	ldr	r1, [pc, #456]	; (21ce4 <lfs_init+0x244>)
   21b1c:	f640 7355 	movw	r3, #3925	; 0xf55
   21b20:	4a6b      	ldr	r2, [pc, #428]	; (21cd0 <lfs_init+0x230>)
   21b22:	486c      	ldr	r0, [pc, #432]	; (21cd4 <lfs_init+0x234>)
   21b24:	f008 fdb5 	bl	2a692 <assert_print>
   21b28:	f640 7155 	movw	r1, #3925	; 0xf55
   21b2c:	e7c6      	b.n	21abc <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
   21b2e:	69ca      	ldr	r2, [r1, #28]
   21b30:	fbb2 f3f0 	udiv	r3, r2, r0
   21b34:	fb00 2313 	mls	r3, r0, r3, r2
   21b38:	b14b      	cbz	r3, 21b4e <lfs_init+0xae>
   21b3a:	496b      	ldr	r1, [pc, #428]	; (21ce8 <lfs_init+0x248>)
   21b3c:	f640 7356 	movw	r3, #3926	; 0xf56
   21b40:	4a63      	ldr	r2, [pc, #396]	; (21cd0 <lfs_init+0x230>)
   21b42:	4864      	ldr	r0, [pc, #400]	; (21cd4 <lfs_init+0x234>)
   21b44:	f008 fda5 	bl	2a692 <assert_print>
   21b48:	f640 7156 	movw	r1, #3926	; 0xf56
   21b4c:	e7b6      	b.n	21abc <lfs_init+0x1c>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
   21b4e:	f04f 33ff 	mov.w	r3, #4294967295
   21b52:	f1a2 0508 	sub.w	r5, r2, #8
   21b56:	fbb3 f3f5 	udiv	r3, r3, r5
	return 32 - __builtin_clz(a-1);
   21b5a:	3b01      	subs	r3, #1
   21b5c:	fab3 f383 	clz	r3, r3
   21b60:	f1c3 0320 	rsb	r3, r3, #32
   21b64:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   21b68:	d209      	bcs.n	21b7e <lfs_init+0xde>
   21b6a:	4960      	ldr	r1, [pc, #384]	; (21cec <lfs_init+0x24c>)
   21b6c:	f640 7359 	movw	r3, #3929	; 0xf59
   21b70:	4a57      	ldr	r2, [pc, #348]	; (21cd0 <lfs_init+0x230>)
   21b72:	4858      	ldr	r0, [pc, #352]	; (21cd4 <lfs_init+0x234>)
   21b74:	f008 fd8d 	bl	2a692 <assert_print>
   21b78:	f640 7159 	movw	r1, #3929	; 0xf59
   21b7c:	e79e      	b.n	21abc <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
   21b7e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   21b80:	b94b      	cbnz	r3, 21b96 <lfs_init+0xf6>
   21b82:	495b      	ldr	r1, [pc, #364]	; (21cf0 <lfs_init+0x250>)
   21b84:	f640 7362 	movw	r3, #3938	; 0xf62
   21b88:	4a51      	ldr	r2, [pc, #324]	; (21cd0 <lfs_init+0x230>)
   21b8a:	4852      	ldr	r0, [pc, #328]	; (21cd4 <lfs_init+0x234>)
   21b8c:	f008 fd81 	bl	2a692 <assert_print>
   21b90:	f640 7162 	movw	r1, #3938	; 0xf62
   21b94:	e792      	b.n	21abc <lfs_init+0x1c>
    if (lfs->cfg->read_buffer) {
   21b96:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   21b98:	b1d3      	cbz	r3, 21bd0 <lfs_init+0x130>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   21b9a:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
   21b9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   21ba0:	b30a      	cbz	r2, 21be6 <lfs_init+0x146>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   21ba2:	61e2      	str	r2, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
   21ba4:	4621      	mov	r1, r4
   21ba6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   21ba8:	f00d fb23 	bl	2f1f2 <lfs_cache_zero.isra.0>
    lfs_cache_zero(lfs, &lfs->pcache);
   21bac:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   21bae:	f104 0110 	add.w	r1, r4, #16
   21bb2:	f00d fb1e 	bl	2f1f2 <lfs_cache_zero.isra.0>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
   21bb6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21bb8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   21bba:	b9d8      	cbnz	r0, 21bf4 <lfs_init+0x154>
   21bbc:	494d      	ldr	r1, [pc, #308]	; (21cf4 <lfs_init+0x254>)
   21bbe:	f44f 6378 	mov.w	r3, #3968	; 0xf80
   21bc2:	4a43      	ldr	r2, [pc, #268]	; (21cd0 <lfs_init+0x230>)
   21bc4:	4843      	ldr	r0, [pc, #268]	; (21cd4 <lfs_init+0x234>)
   21bc6:	f008 fd64 	bl	2a692 <assert_print>
   21bca:	f44f 6178 	mov.w	r1, #3968	; 0xf80
   21bce:	e775      	b.n	21abc <lfs_init+0x1c>
/* Allocate memory, only used if buffers are not provided to littlefs */
/* Note, memory must be 64-bit aligned */
static inline void *lfs_malloc(size_t size)
{
#ifndef LFS_NO_MALLOC
	return malloc(size);
   21bd0:	f006 fd5c 	bl	2868c <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   21bd4:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   21bd6:	2800      	cmp	r0, #0
   21bd8:	d1e0      	bne.n	21b9c <lfs_init+0xfc>
    lfs_deinit(lfs);
   21bda:	4620      	mov	r0, r4
   21bdc:	f00d f9a2 	bl	2ef24 <lfs_deinit>
    return err;
   21be0:	f06f 000b 	mvn.w	r0, #11
   21be4:	e071      	b.n	21cca <lfs_init+0x22a>
   21be6:	6a98      	ldr	r0, [r3, #40]	; 0x28
   21be8:	f006 fd50 	bl	2868c <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   21bec:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   21bee:	2800      	cmp	r0, #0
   21bf0:	d1d8      	bne.n	21ba4 <lfs_init+0x104>
   21bf2:	e7f2      	b.n	21bda <lfs_init+0x13a>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
   21bf4:	0741      	lsls	r1, r0, #29
   21bf6:	d102      	bne.n	21bfe <lfs_init+0x15e>
   21bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   21bfa:	079a      	lsls	r2, r3, #30
   21bfc:	d009      	beq.n	21c12 <lfs_init+0x172>
   21bfe:	493e      	ldr	r1, [pc, #248]	; (21cf8 <lfs_init+0x258>)
   21c00:	f640 7381 	movw	r3, #3969	; 0xf81
   21c04:	4a32      	ldr	r2, [pc, #200]	; (21cd0 <lfs_init+0x230>)
   21c06:	4833      	ldr	r0, [pc, #204]	; (21cd4 <lfs_init+0x234>)
   21c08:	f008 fd43 	bl	2a692 <assert_print>
   21c0c:	f640 7181 	movw	r1, #3969	; 0xf81
   21c10:	e754      	b.n	21abc <lfs_init+0x1c>
    if (lfs->cfg->lookahead_buffer) {
   21c12:	b173      	cbz	r3, 21c32 <lfs_init+0x192>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   21c14:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
   21c16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   21c1a:	2aff      	cmp	r2, #255	; 0xff
   21c1c:	d90f      	bls.n	21c3e <lfs_init+0x19e>
   21c1e:	4937      	ldr	r1, [pc, #220]	; (21cfc <lfs_init+0x25c>)
   21c20:	f640 738e 	movw	r3, #3982	; 0xf8e
   21c24:	4a2a      	ldr	r2, [pc, #168]	; (21cd0 <lfs_init+0x230>)
   21c26:	482b      	ldr	r0, [pc, #172]	; (21cd4 <lfs_init+0x234>)
   21c28:	f008 fd33 	bl	2a692 <assert_print>
   21c2c:	f640 718e 	movw	r1, #3982	; 0xf8e
   21c30:	e744      	b.n	21abc <lfs_init+0x1c>
   21c32:	f006 fd2b 	bl	2868c <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   21c36:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   21c38:	2800      	cmp	r0, #0
   21c3a:	d1ec      	bne.n	21c16 <lfs_init+0x176>
   21c3c:	e7cd      	b.n	21bda <lfs_init+0x13a>
        lfs->name_max = LFS_NAME_MAX;
   21c3e:	2a00      	cmp	r2, #0
   21c40:	bf08      	it	eq
   21c42:	22ff      	moveq	r2, #255	; 0xff
   21c44:	66e2      	str	r2, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
   21c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21c48:	2a00      	cmp	r2, #0
   21c4a:	da09      	bge.n	21c60 <lfs_init+0x1c0>
   21c4c:	492c      	ldr	r1, [pc, #176]	; (21d00 <lfs_init+0x260>)
   21c4e:	f640 7394 	movw	r3, #3988	; 0xf94
   21c52:	4a1f      	ldr	r2, [pc, #124]	; (21cd0 <lfs_init+0x230>)
   21c54:	481f      	ldr	r0, [pc, #124]	; (21cd4 <lfs_init+0x234>)
   21c56:	f008 fd1c 	bl	2a692 <assert_print>
   21c5a:	f640 7194 	movw	r1, #3988	; 0xf94
   21c5e:	e72d      	b.n	21abc <lfs_init+0x1c>
        lfs->file_max = LFS_FILE_MAX;
   21c60:	bf08      	it	eq
   21c62:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
   21c66:	f240 31fe 	movw	r1, #1022	; 0x3fe
   21c6a:	6722      	str	r2, [r4, #112]	; 0x70
   21c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   21c6e:	428a      	cmp	r2, r1
   21c70:	d909      	bls.n	21c86 <lfs_init+0x1e6>
   21c72:	4924      	ldr	r1, [pc, #144]	; (21d04 <lfs_init+0x264>)
   21c74:	f640 739a 	movw	r3, #3994	; 0xf9a
   21c78:	4a15      	ldr	r2, [pc, #84]	; (21cd0 <lfs_init+0x230>)
   21c7a:	4816      	ldr	r0, [pc, #88]	; (21cd4 <lfs_init+0x234>)
   21c7c:	f008 fd09 	bl	2a692 <assert_print>
   21c80:	f640 719a 	movw	r1, #3994	; 0xf9a
   21c84:	e71a      	b.n	21abc <lfs_init+0x1c>
        lfs->attr_max = LFS_ATTR_MAX;
   21c86:	2a00      	cmp	r2, #0
   21c88:	bf08      	it	eq
   21c8a:	460a      	moveq	r2, r1
   21c8c:	6762      	str	r2, [r4, #116]	; 0x74
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
   21c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   21c90:	69db      	ldr	r3, [r3, #28]
   21c92:	429a      	cmp	r2, r3
   21c94:	d909      	bls.n	21caa <lfs_init+0x20a>
   21c96:	491c      	ldr	r1, [pc, #112]	; (21d08 <lfs_init+0x268>)
   21c98:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   21c9c:	4a0c      	ldr	r2, [pc, #48]	; (21cd0 <lfs_init+0x230>)
   21c9e:	480d      	ldr	r0, [pc, #52]	; (21cd4 <lfs_init+0x234>)
   21ca0:	f008 fcf7 	bl	2a692 <assert_print>
   21ca4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   21ca8:	e708      	b.n	21abc <lfs_init+0x1c>
    lfs->mlist = NULL;
   21caa:	2000      	movs	r0, #0
    lfs->root[0] = LFS_BLOCK_NULL;
   21cac:	f04f 33ff 	mov.w	r3, #4294967295
    lfs->seed = 0;
   21cb0:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
    lfs->root[1] = LFS_BLOCK_NULL;
   21cb4:	e9c4 3308 	strd	r3, r3, [r4, #32]
    lfs->gdisk = (lfs_gstate_t){0};
   21cb8:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
    lfs->gstate = (lfs_gstate_t){0};
   21cbc:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
    lfs->gdelta = (lfs_gstate_t){0};
   21cc0:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
    lfs->gdisk = (lfs_gstate_t){0};
   21cc4:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   21cc6:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   21cc8:	6520      	str	r0, [r4, #80]	; 0x50
}
   21cca:	bd38      	pop	{r3, r4, r5, pc}
   21ccc:	00037ab2 	.word	0x00037ab2
   21cd0:	00037a1d 	.word	0x00037a1d
   21cd4:	00032629 	.word	0x00032629
   21cd8:	00037acb 	.word	0x00037acb
   21cdc:	00037ae4 	.word	0x00037ae4
   21ce0:	00037afe 	.word	0x00037afe
   21ce4:	00037b2e 	.word	0x00037b2e
   21ce8:	00037b5e 	.word	0x00037b5e
   21cec:	00037b8f 	.word	0x00037b8f
   21cf0:	00037bdb 	.word	0x00037bdb
   21cf4:	00037bf7 	.word	0x00037bf7
   21cf8:	00037c14 	.word	0x00037c14
   21cfc:	00037c68 	.word	0x00037c68
   21d00:	00037c82 	.word	0x00037c82
   21d04:	00037ca3 	.word	0x00037ca3
   21d08:	00037cbe 	.word	0x00037cbe

00021d0c <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21d10:	460d      	mov	r5, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d12:	6809      	ldr	r1, [r1, #0]
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d14:	4698      	mov	r8, r3
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d16:	1ccb      	adds	r3, r1, #3
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d18:	4606      	mov	r6, r0
   21d1a:	4617      	mov	r7, r2
   21d1c:	b085      	sub	sp, #20
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d1e:	d903      	bls.n	21d28 <lfs_bd_flush+0x1c>
    return 0;
   21d20:	2000      	movs	r0, #0
}
   21d22:	b005      	add	sp, #20
   21d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
   21d28:	6e80      	ldr	r0, [r0, #104]	; 0x68
   21d2a:	6a03      	ldr	r3, [r0, #32]
   21d2c:	4299      	cmp	r1, r3
   21d2e:	d309      	bcc.n	21d44 <lfs_bd_flush+0x38>
   21d30:	491f      	ldr	r1, [pc, #124]	; (21db0 <lfs_bd_flush+0xa4>)
   21d32:	23a2      	movs	r3, #162	; 0xa2
   21d34:	4a1f      	ldr	r2, [pc, #124]	; (21db4 <lfs_bd_flush+0xa8>)
   21d36:	4820      	ldr	r0, [pc, #128]	; (21db8 <lfs_bd_flush+0xac>)
   21d38:	f008 fcab 	bl	2a692 <assert_print>
   21d3c:	21a2      	movs	r1, #162	; 0xa2
        LFS_ASSERT(err <= 0);
   21d3e:	481d      	ldr	r0, [pc, #116]	; (21db4 <lfs_bd_flush+0xa8>)
   21d40:	f008 fca0 	bl	2a684 <assert_post_action>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   21d44:	6982      	ldr	r2, [r0, #24]
	return lfs_aligndown(a + alignment-1, alignment);
   21d46:	68ac      	ldr	r4, [r5, #8]
   21d48:	4414      	add	r4, r2
   21d4a:	3c01      	subs	r4, #1
	return a - (a % alignment);
   21d4c:	fbb4 f3f2 	udiv	r3, r4, r2
   21d50:	fb02 4313 	mls	r3, r2, r3, r4
   21d54:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   21d56:	9400      	str	r4, [sp, #0]
   21d58:	f8d0 9008 	ldr.w	r9, [r0, #8]
   21d5c:	68eb      	ldr	r3, [r5, #12]
   21d5e:	686a      	ldr	r2, [r5, #4]
   21d60:	47c8      	blx	r9
        LFS_ASSERT(err <= 0);
   21d62:	2800      	cmp	r0, #0
   21d64:	dd07      	ble.n	21d76 <lfs_bd_flush+0x6a>
   21d66:	4915      	ldr	r1, [pc, #84]	; (21dbc <lfs_bd_flush+0xb0>)
   21d68:	23a6      	movs	r3, #166	; 0xa6
   21d6a:	4a12      	ldr	r2, [pc, #72]	; (21db4 <lfs_bd_flush+0xa8>)
   21d6c:	4812      	ldr	r0, [pc, #72]	; (21db8 <lfs_bd_flush+0xac>)
   21d6e:	f008 fc90 	bl	2a692 <assert_print>
   21d72:	21a6      	movs	r1, #166	; 0xa6
   21d74:	e7e3      	b.n	21d3e <lfs_bd_flush+0x32>
        if (err) {
   21d76:	d1d4      	bne.n	21d22 <lfs_bd_flush+0x16>
        if (validate) {
   21d78:	f1b8 0f00 	cmp.w	r8, #0
   21d7c:	d104      	bne.n	21d88 <lfs_bd_flush+0x7c>
        lfs_cache_zero(lfs, pcache);
   21d7e:	4629      	mov	r1, r5
   21d80:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   21d82:	f00d fa36 	bl	2f1f2 <lfs_cache_zero.isra.0>
   21d86:	e7cb      	b.n	21d20 <lfs_bd_flush+0x14>
    rcache->block = LFS_BLOCK_NULL;
   21d88:	f04f 33ff 	mov.w	r3, #4294967295
   21d8c:	603b      	str	r3, [r7, #0]
            int res = lfs_bd_cmp(lfs,
   21d8e:	9402      	str	r4, [sp, #8]
   21d90:	68eb      	ldr	r3, [r5, #12]
   21d92:	4622      	mov	r2, r4
   21d94:	9301      	str	r3, [sp, #4]
   21d96:	686b      	ldr	r3, [r5, #4]
   21d98:	4639      	mov	r1, r7
   21d9a:	9300      	str	r3, [sp, #0]
   21d9c:	4630      	mov	r0, r6
   21d9e:	682b      	ldr	r3, [r5, #0]
   21da0:	f00d f900 	bl	2efa4 <lfs_bd_cmp.constprop.0>
            if (res < 0) {
   21da4:	2800      	cmp	r0, #0
   21da6:	dbbc      	blt.n	21d22 <lfs_bd_flush+0x16>
            if (res != LFS_CMP_EQ) {
   21da8:	d0e9      	beq.n	21d7e <lfs_bd_flush+0x72>
                return LFS_ERR_CORRUPT;
   21daa:	f06f 0053 	mvn.w	r0, #83	; 0x53
   21dae:	e7b8      	b.n	21d22 <lfs_bd_flush+0x16>
   21db0:	00037ced 	.word	0x00037ced
   21db4:	00037a1d 	.word	0x00037a1d
   21db8:	00032629 	.word	0x00032629
   21dbc:	00037a75 	.word	0x00037a75

00021dc0 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   21dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21dc4:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
   21dc8:	f118 0f02 	cmn.w	r8, #2
        const void *buffer, lfs_size_t size) {
   21dcc:	4692      	mov	sl, r2
   21dce:	4606      	mov	r6, r0
   21dd0:	460c      	mov	r4, r1
   21dd2:	4699      	mov	r9, r3
   21dd4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
   21dd6:	6e82      	ldr	r2, [r0, #104]	; 0x68
   21dd8:	d00c      	beq.n	21df4 <lfs_bd_prog+0x34>
   21dda:	6a13      	ldr	r3, [r2, #32]
   21ddc:	4543      	cmp	r3, r8
   21dde:	d809      	bhi.n	21df4 <lfs_bd_prog+0x34>
   21de0:	4930      	ldr	r1, [pc, #192]	; (21ea4 <lfs_bd_prog+0xe4>)
   21de2:	23d7      	movs	r3, #215	; 0xd7
   21de4:	4a30      	ldr	r2, [pc, #192]	; (21ea8 <lfs_bd_prog+0xe8>)
   21de6:	4831      	ldr	r0, [pc, #196]	; (21eac <lfs_bd_prog+0xec>)
   21de8:	f008 fc53 	bl	2a692 <assert_print>
   21dec:	21d7      	movs	r1, #215	; 0xd7
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
   21dee:	482e      	ldr	r0, [pc, #184]	; (21ea8 <lfs_bd_prog+0xe8>)
   21df0:	f008 fc48 	bl	2a684 <assert_post_action>
   21df4:	69d2      	ldr	r2, [r2, #28]
   21df6:	19eb      	adds	r3, r5, r7
   21df8:	4293      	cmp	r3, r2
   21dfa:	d804      	bhi.n	21e06 <lfs_bd_prog+0x46>
        pcache->size = 0;
   21dfc:	f04f 0b00 	mov.w	fp, #0
    while (size > 0) {
   21e00:	b9f7      	cbnz	r7, 21e40 <lfs_bd_prog+0x80>
    return 0;
   21e02:	4638      	mov	r0, r7
   21e04:	e04b      	b.n	21e9e <lfs_bd_prog+0xde>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
   21e06:	492a      	ldr	r1, [pc, #168]	; (21eb0 <lfs_bd_prog+0xf0>)
   21e08:	23d8      	movs	r3, #216	; 0xd8
   21e0a:	4a27      	ldr	r2, [pc, #156]	; (21ea8 <lfs_bd_prog+0xe8>)
   21e0c:	4827      	ldr	r0, [pc, #156]	; (21eac <lfs_bd_prog+0xec>)
   21e0e:	f008 fc40 	bl	2a692 <assert_print>
   21e12:	21d8      	movs	r1, #216	; 0xd8
   21e14:	e7eb      	b.n	21dee <lfs_bd_prog+0x2e>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
   21e16:	3301      	adds	r3, #1
   21e18:	d007      	beq.n	21e2a <lfs_bd_prog+0x6a>
   21e1a:	4926      	ldr	r1, [pc, #152]	; (21eb4 <lfs_bd_prog+0xf4>)
   21e1c:	23f5      	movs	r3, #245	; 0xf5
   21e1e:	4a22      	ldr	r2, [pc, #136]	; (21ea8 <lfs_bd_prog+0xe8>)
   21e20:	4822      	ldr	r0, [pc, #136]	; (21eac <lfs_bd_prog+0xec>)
   21e22:	f008 fc36 	bl	2a692 <assert_print>
   21e26:	21f5      	movs	r1, #245	; 0xf5
   21e28:	e7e1      	b.n	21dee <lfs_bd_prog+0x2e>
        pcache->block = block;
   21e2a:	f8c4 8000 	str.w	r8, [r4]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   21e2e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   21e30:	699a      	ldr	r2, [r3, #24]
   21e32:	fbb5 f3f2 	udiv	r3, r5, r2
   21e36:	fb02 5313 	mls	r3, r2, r3, r5
   21e3a:	1aeb      	subs	r3, r5, r3
        pcache->size = 0;
   21e3c:	e9c4 3b01 	strd	r3, fp, [r4, #4]
        if (block == pcache->block &&
   21e40:	6823      	ldr	r3, [r4, #0]
   21e42:	4543      	cmp	r3, r8
   21e44:	d1e7      	bne.n	21e16 <lfs_bd_prog+0x56>
                off >= pcache->off &&
   21e46:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   21e48:	42a8      	cmp	r0, r5
   21e4a:	d8e4      	bhi.n	21e16 <lfs_bd_prog+0x56>
                off < pcache->off + lfs->cfg->cache_size) {
   21e4c:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   21e4e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   21e50:	4402      	add	r2, r0
                off >= pcache->off &&
   21e52:	42aa      	cmp	r2, r5
   21e54:	d9df      	bls.n	21e16 <lfs_bd_prog+0x56>
            lfs_size_t diff = lfs_min(size,
   21e56:	1b52      	subs	r2, r2, r5
	return (a < b) ? a : b;
   21e58:	42ba      	cmp	r2, r7
   21e5a:	bf28      	it	cs
   21e5c:	463a      	movcs	r2, r7
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   21e5e:	68e3      	ldr	r3, [r4, #12]
   21e60:	1a28      	subs	r0, r5, r0
   21e62:	4418      	add	r0, r3
   21e64:	990e      	ldr	r1, [sp, #56]	; 0x38
   21e66:	9201      	str	r2, [sp, #4]
   21e68:	f00e fb6d 	bl	30546 <memcpy>
            data += diff;
   21e6c:	9a01      	ldr	r2, [sp, #4]
   21e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            off += diff;
   21e70:	4415      	add	r5, r2
            data += diff;
   21e72:	4413      	add	r3, r2
   21e74:	930e      	str	r3, [sp, #56]	; 0x38
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   21e76:	6863      	ldr	r3, [r4, #4]
            size -= diff;
   21e78:	1abf      	subs	r7, r7, r2
	return (a > b) ? a : b;
   21e7a:	68a2      	ldr	r2, [r4, #8]
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   21e7c:	1aeb      	subs	r3, r5, r3
   21e7e:	4293      	cmp	r3, r2
   21e80:	bf38      	it	cc
   21e82:	4613      	movcc	r3, r2
   21e84:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   21e86:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   21e88:	6a92      	ldr	r2, [r2, #40]	; 0x28
   21e8a:	429a      	cmp	r2, r3
   21e8c:	d1b8      	bne.n	21e00 <lfs_bd_prog+0x40>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21e8e:	464b      	mov	r3, r9
   21e90:	4652      	mov	r2, sl
   21e92:	4621      	mov	r1, r4
   21e94:	4630      	mov	r0, r6
   21e96:	f7ff ff39 	bl	21d0c <lfs_bd_flush>
                if (err) {
   21e9a:	2800      	cmp	r0, #0
   21e9c:	d0b0      	beq.n	21e00 <lfs_bd_prog+0x40>
}
   21e9e:	b003      	add	sp, #12
   21ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ea4:	00037d13 	.word	0x00037d13
   21ea8:	00037a1d 	.word	0x00037a1d
   21eac:	00032629 	.word	0x00032629
   21eb0:	00037d4f 	.word	0x00037d4f
   21eb4:	00037d72 	.word	0x00037d72

00021eb8 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lfs->cfg->prog_size);
   21ebc:	6e83      	ldr	r3, [r0, #104]	; 0x68
	return lfs_aligndown(a + alignment-1, alignment);
   21ebe:	684e      	ldr	r6, [r1, #4]
   21ec0:	699a      	ldr	r2, [r3, #24]
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21ec2:	4680      	mov	r8, r0
   21ec4:	4416      	add	r6, r2
   21ec6:	3607      	adds	r6, #7
	return a - (a % alignment);
   21ec8:	fbb6 f3f2 	udiv	r3, r6, r2
   21ecc:	fb02 6313 	mls	r3, r2, r3, r6
   21ed0:	1af6      	subs	r6, r6, r3
    uint32_t crc1 = 0;
   21ed2:	2300      	movs	r3, #0
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21ed4:	460d      	mov	r5, r1
   21ed6:	b08b      	sub	sp, #44	; 0x2c
    lfs_off_t off1 = 0;
   21ed8:	469b      	mov	fp, r3
    uint32_t crc1 = 0;
   21eda:	9305      	str	r3, [sp, #20]
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   21edc:	f1a6 0308 	sub.w	r3, r6, #8
   21ee0:	9304      	str	r3, [sp, #16]
    while (commit->off < end) {
   21ee2:	686b      	ldr	r3, [r5, #4]
   21ee4:	42b3      	cmp	r3, r6
   21ee6:	d31d      	bcc.n	21f24 <lfs_dir_commitcrc+0x6c>
    rcache->block = LFS_BLOCK_NULL;
   21ee8:	4641      	mov	r1, r8
   21eea:	f04f 33ff 	mov.w	r3, #4294967295
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21eee:	4642      	mov	r2, r8
    rcache->block = LFS_BLOCK_NULL;
   21ef0:	f841 3b10 	str.w	r3, [r1], #16
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21ef4:	4640      	mov	r0, r8
   21ef6:	2300      	movs	r3, #0
   21ef8:	f7ff ff08 	bl	21d0c <lfs_bd_flush>
    if (err) {
   21efc:	4604      	mov	r4, r0
   21efe:	2800      	cmp	r0, #0
   21f00:	f040 80bf 	bne.w	22082 <lfs_dir_commitcrc+0x1ca>
    err = lfs->cfg->sync(lfs->cfg);
   21f04:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
   21f08:	6903      	ldr	r3, [r0, #16]
   21f0a:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
   21f0c:	1e04      	subs	r4, r0, #0
   21f0e:	dd75      	ble.n	21ffc <lfs_dir_commitcrc+0x144>
   21f10:	495f      	ldr	r1, [pc, #380]	; (22090 <lfs_dir_commitcrc+0x1d8>)
   21f12:	4860      	ldr	r0, [pc, #384]	; (22094 <lfs_dir_commitcrc+0x1dc>)
   21f14:	23cc      	movs	r3, #204	; 0xcc
   21f16:	4a60      	ldr	r2, [pc, #384]	; (22098 <lfs_dir_commitcrc+0x1e0>)
   21f18:	f008 fbbb 	bl	2a692 <assert_print>
   21f1c:	21cc      	movs	r1, #204	; 0xcc
   21f1e:	485e      	ldr	r0, [pc, #376]	; (22098 <lfs_dir_commitcrc+0x1e0>)
   21f20:	f008 fbb0 	bl	2a684 <assert_post_action>
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   21f24:	f240 32fe 	movw	r2, #1022	; 0x3fe
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   21f28:	f103 0a04 	add.w	sl, r3, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   21f2c:	eba6 030a 	sub.w	r3, r6, sl
   21f30:	4293      	cmp	r3, r2
   21f32:	bf94      	ite	ls
   21f34:	eb0a 0703 	addls.w	r7, sl, r3
   21f38:	eb0a 0702 	addhi.w	r7, sl, r2
        if (noff < end) {
   21f3c:	42b7      	cmp	r7, r6
   21f3e:	d203      	bcs.n	21f48 <lfs_dir_commitcrc+0x90>
	return (a < b) ? a : b;
   21f40:	9b04      	ldr	r3, [sp, #16]
   21f42:	429f      	cmp	r7, r3
   21f44:	bf28      	it	cs
   21f46:	461f      	movcs	r7, r3
        lfs_tag_t tag = 0xffffffff;
   21f48:	f04f 33ff 	mov.w	r3, #4294967295
   21f4c:	9307      	str	r3, [sp, #28]
        int err = lfs_bd_read(lfs,
   21f4e:	2304      	movs	r3, #4
   21f50:	aa07      	add	r2, sp, #28
   21f52:	e9cd 7201 	strd	r7, r2, [sp, #4]
   21f56:	9303      	str	r3, [sp, #12]
   21f58:	682a      	ldr	r2, [r5, #0]
   21f5a:	2100      	movs	r1, #0
   21f5c:	9200      	str	r2, [sp, #0]
   21f5e:	4640      	mov	r0, r8
   21f60:	4642      	mov	r2, r8
   21f62:	f7fe fdaf 	bl	20ac4 <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   21f66:	4604      	mov	r4, r0
   21f68:	b118      	cbz	r0, 21f72 <lfs_dir_commitcrc+0xba>
   21f6a:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21f6e:	f040 8088 	bne.w	22082 <lfs_dir_commitcrc+0x1ca>
	return __builtin_bswap32(a);
   21f72:	9b07      	ldr	r3, [sp, #28]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21f74:	eba7 070a 	sub.w	r7, r7, sl
   21f78:	ba1b      	rev	r3, r3
        bool reset = ~lfs_frombe32(tag) >> 31;
   21f7a:	ea6f 0903 	mvn.w	r9, r3
   21f7e:	ea4f 73d9 	mov.w	r3, r9, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   21f86:	ea47 5703 	orr.w	r7, r7, r3, lsl #20
   21f8a:	f447 277f 	orr.w	r7, r7, #1044480	; 0xff000
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21f8e:	68ab      	ldr	r3, [r5, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21f90:	f447 6740 	orr.w	r7, r7, #3072	; 0xc00
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21f94:	ac08      	add	r4, sp, #32
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21f96:	9707      	str	r7, [sp, #28]
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21f98:	405f      	eors	r7, r3
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21f9a:	4621      	mov	r1, r4
   21f9c:	2204      	movs	r2, #4
   21f9e:	68e8      	ldr	r0, [r5, #12]
   21fa0:	ba3f      	rev	r7, r7
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21fa2:	9708      	str	r7, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21fa4:	f001 ff02 	bl	23dac <lfs_crc>
        err = lfs_bd_prog(lfs,
   21fa8:	2308      	movs	r3, #8
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21faa:	60e8      	str	r0, [r5, #12]
        err = lfs_bd_prog(lfs,
   21fac:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21fb0:	686b      	ldr	r3, [r5, #4]
        footer[1] = lfs_tole32(commit->crc);
   21fb2:	9009      	str	r0, [sp, #36]	; 0x24
        err = lfs_bd_prog(lfs,
   21fb4:	9301      	str	r3, [sp, #4]
   21fb6:	682b      	ldr	r3, [r5, #0]
   21fb8:	4642      	mov	r2, r8
   21fba:	9300      	str	r3, [sp, #0]
   21fbc:	4640      	mov	r0, r8
   21fbe:	2300      	movs	r3, #0
   21fc0:	f108 0110 	add.w	r1, r8, #16
   21fc4:	f7ff fefc 	bl	21dc0 <lfs_bd_prog>
        if (err) {
   21fc8:	4604      	mov	r4, r0
   21fca:	2800      	cmp	r0, #0
   21fcc:	d159      	bne.n	22082 <lfs_dir_commitcrc+0x1ca>
            off1 = commit->off + sizeof(uint32_t);
   21fce:	6869      	ldr	r1, [r5, #4]
        if (off1 == 0) {
   21fd0:	f1bb 0f00 	cmp.w	fp, #0
   21fd4:	d103      	bne.n	21fde <lfs_dir_commitcrc+0x126>
            crc1 = commit->crc;
   21fd6:	68eb      	ldr	r3, [r5, #12]
            off1 = commit->off + sizeof(uint32_t);
   21fd8:	f101 0b04 	add.w	fp, r1, #4
            crc1 = commit->crc;
   21fdc:	9305      	str	r3, [sp, #20]
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   21fde:	9a07      	ldr	r2, [sp, #28]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   21fe0:	f009 4900 	and.w	r9, r9, #2147483648	; 0x80000000
    return tag & 0x000003ff;
   21fe4:	f3c2 0309 	ubfx	r3, r2, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   21fe8:	3304      	adds	r3, #4
   21fea:	440b      	add	r3, r1
   21fec:	606b      	str	r3, [r5, #4]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   21fee:	f04f 33ff 	mov.w	r3, #4294967295
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   21ff2:	ea89 0202 	eor.w	r2, r9, r2
   21ff6:	60aa      	str	r2, [r5, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   21ff8:	60eb      	str	r3, [r5, #12]
   21ffa:	e772      	b.n	21ee2 <lfs_dir_commitcrc+0x2a>
    if (err) {
   21ffc:	d141      	bne.n	22082 <lfs_dir_commitcrc+0x1ca>
    while (off < end) {
   21ffe:	46da      	mov	sl, fp
    lfs_off_t off = commit->begin;
   22000:	692f      	ldr	r7, [r5, #16]
    while (off < end) {
   22002:	42b7      	cmp	r7, r6
   22004:	d23d      	bcs.n	22082 <lfs_dir_commitcrc+0x1ca>
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   22006:	f10a 0304 	add.w	r3, sl, #4
        uint32_t crc = 0xffffffff;
   2200a:	f04f 39ff 	mov.w	r9, #4294967295
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   2200e:	9304      	str	r3, [sp, #16]
   22010:	e01a      	b.n	22048 <lfs_dir_commitcrc+0x190>
            if (i == off1 && crc != crc1) {
   22012:	45bb      	cmp	fp, r7
   22014:	d102      	bne.n	2201c <lfs_dir_commitcrc+0x164>
   22016:	9b05      	ldr	r3, [sp, #20]
   22018:	454b      	cmp	r3, r9
   2201a:	d12f      	bne.n	2207c <lfs_dir_commitcrc+0x1c4>
            err = lfs_bd_read(lfs,
   2201c:	2301      	movs	r3, #1
   2201e:	9303      	str	r3, [sp, #12]
   22020:	ab08      	add	r3, sp, #32
   22022:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22026:	682b      	ldr	r3, [r5, #0]
   22028:	4642      	mov	r2, r8
   2202a:	9300      	str	r3, [sp, #0]
   2202c:	9b04      	ldr	r3, [sp, #16]
   2202e:	2100      	movs	r1, #0
   22030:	4640      	mov	r0, r8
   22032:	1bdb      	subs	r3, r3, r7
   22034:	f7fe fd46 	bl	20ac4 <lfs_bd_read>
            if (err) {
   22038:	bb10      	cbnz	r0, 22080 <lfs_dir_commitcrc+0x1c8>
            crc = lfs_crc(crc, &dat, 1);
   2203a:	4648      	mov	r0, r9
   2203c:	2201      	movs	r2, #1
   2203e:	a908      	add	r1, sp, #32
   22040:	f001 feb4 	bl	23dac <lfs_crc>
   22044:	4681      	mov	r9, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   22046:	3701      	adds	r7, #1
   22048:	9b04      	ldr	r3, [sp, #16]
   2204a:	42bb      	cmp	r3, r7
   2204c:	d8e1      	bhi.n	22012 <lfs_dir_commitcrc+0x15a>
        if (crc != 0) {
   2204e:	f1b9 0f00 	cmp.w	r9, #0
   22052:	d11a      	bne.n	2208a <lfs_dir_commitcrc+0x1d2>
        off = lfs_min(end - noff, 0x3fe) + noff;
   22054:	f240 33fe 	movw	r3, #1022	; 0x3fe
   22058:	eba6 020a 	sub.w	r2, r6, sl
   2205c:	429a      	cmp	r2, r3
   2205e:	bf94      	ite	ls
   22060:	eb0a 0702 	addls.w	r7, sl, r2
   22064:	eb0a 0703 	addhi.w	r7, sl, r3
        if (off < end) {
   22068:	42b7      	cmp	r7, r6
   2206a:	d204      	bcs.n	22076 <lfs_dir_commitcrc+0x1be>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   2206c:	f1a6 0308 	sub.w	r3, r6, #8
	return (a < b) ? a : b;
   22070:	429f      	cmp	r7, r3
   22072:	bf28      	it	cs
   22074:	461f      	movcs	r7, r3
        noff = off + sizeof(uint32_t);
   22076:	f107 0a04 	add.w	sl, r7, #4
   2207a:	e7c2      	b.n	22002 <lfs_dir_commitcrc+0x14a>
                return LFS_ERR_CORRUPT;
   2207c:	f06f 0053 	mvn.w	r0, #83	; 0x53
   22080:	4604      	mov	r4, r0
}
   22082:	4620      	mov	r0, r4
   22084:	b00b      	add	sp, #44	; 0x2c
   22086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_CORRUPT;
   2208a:	f06f 0453 	mvn.w	r4, #83	; 0x53
   2208e:	e7f8      	b.n	22082 <lfs_dir_commitcrc+0x1ca>
   22090:	00037a75 	.word	0x00037a75
   22094:	00032629 	.word	0x00032629
   22098:	00037a1d 	.word	0x00037a1d

0002209c <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
   2209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220a0:	4604      	mov	r4, r0
   220a2:	460d      	mov	r5, r1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   220a4:	2601      	movs	r6, #1
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
   220a6:	af00      	add	r7, sp, #0
        while (lfs->free.i != lfs->free.size) {
   220a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   220aa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   220ac:	6e22      	ldr	r2, [r4, #96]	; 0x60
   220ae:	4299      	cmp	r1, r3
   220b0:	d11d      	bne.n	220ee <lfs_alloc+0x52>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   220b2:	6d61      	ldr	r1, [r4, #84]	; 0x54
   220b4:	440b      	add	r3, r1
        if (lfs->free.ack == 0) {
   220b6:	2a00      	cmp	r2, #0
   220b8:	d149      	bne.n	2214e <lfs_alloc+0xb2>
            LFS_ERROR("No more free space %"PRIu32,
   220ba:	466c      	mov	r4, sp
   220bc:	b08a      	sub	sp, #40	; 0x28
   220be:	466a      	mov	r2, sp
   220c0:	4936      	ldr	r1, [pc, #216]	; (2219c <lfs_alloc+0x100>)
   220c2:	4837      	ldr	r0, [pc, #220]	; (221a0 <lfs_alloc+0x104>)
   220c4:	6151      	str	r1, [r2, #20]
   220c6:	4937      	ldr	r1, [pc, #220]	; (221a4 <lfs_alloc+0x108>)
   220c8:	6191      	str	r1, [r2, #24]
   220ca:	f240 214d 	movw	r1, #589	; 0x24d
   220ce:	e9c2 1307 	strd	r1, r3, [r2, #28]
   220d2:	f44f 7300 	mov.w	r3, #512	; 0x200
   220d6:	8493      	strh	r3, [r2, #36]	; 0x24
   220d8:	4b33      	ldr	r3, [pc, #204]	; (221a8 <lfs_alloc+0x10c>)
   220da:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   220de:	f842 3f10 	str.w	r3, [r2, #16]!
   220e2:	f00c ffae 	bl	2f042 <z_log_msg_static_create.constprop.0>
            return LFS_ERR_NOSPC;
   220e6:	f06f 001b 	mvn.w	r0, #27
   220ea:	46a5      	mov	sp, r4
   220ec:	e026      	b.n	2213c <lfs_alloc+0xa0>
            lfs->free.i += 1;
   220ee:	1c48      	adds	r0, r1, #1
   220f0:	65e0      	str	r0, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
   220f2:	3a01      	subs	r2, #1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   220f4:	6e60      	ldr	r0, [r4, #100]	; 0x64
            lfs->free.ack -= 1;
   220f6:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   220f8:	ea4f 1c51 	mov.w	ip, r1, lsr #5
   220fc:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
   22100:	f001 021f 	and.w	r2, r1, #31
   22104:	fa06 f202 	lsl.w	r2, r6, r2
   22108:	4202      	tst	r2, r0
   2210a:	d1ce      	bne.n	220aa <lfs_alloc+0xe>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   2210c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2210e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   22110:	6a12      	ldr	r2, [r2, #32]
   22112:	440b      	add	r3, r1
   22114:	fbb3 f1f2 	udiv	r1, r3, r2
   22118:	fb02 3311 	mls	r3, r2, r1, r3
   2211c:	602b      	str	r3, [r5, #0]
                            & (1U << (lfs->free.i % 32)))) {
   2211e:	2501      	movs	r5, #1
                while (lfs->free.i != lfs->free.size &&
   22120:	6da6      	ldr	r6, [r4, #88]	; 0x58
   22122:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22124:	42b3      	cmp	r3, r6
   22126:	d036      	beq.n	22196 <lfs_alloc+0xfa>
                        (lfs->free.buffer[lfs->free.i / 32]
   22128:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2212a:	095a      	lsrs	r2, r3, #5
                            & (1U << (lfs->free.i % 32)))) {
   2212c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   22130:	f003 001f 	and.w	r0, r3, #31
   22134:	fa05 f000 	lsl.w	r0, r5, r0
                while (lfs->free.i != lfs->free.size &&
   22138:	4010      	ands	r0, r2
   2213a:	d102      	bne.n	22142 <lfs_alloc+0xa6>
}
   2213c:	46bd      	mov	sp, r7
   2213e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    lfs->free.i += 1;
   22142:	3301      	adds	r3, #1
   22144:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
   22146:	6e23      	ldr	r3, [r4, #96]	; 0x60
   22148:	3b01      	subs	r3, #1
   2214a:	6623      	str	r3, [r4, #96]	; 0x60
   2214c:	e7e9      	b.n	22122 <lfs_alloc+0x86>
                % lfs->cfg->block_count;
   2214e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
        lfs->free.i = 0;
   22150:	f04f 0800 	mov.w	r8, #0
                % lfs->cfg->block_count;
   22154:	6a08      	ldr	r0, [r1, #32]
   22156:	fbb3 fcf0 	udiv	ip, r3, r0
   2215a:	fb00 331c 	mls	r3, r0, ip, r3
        lfs->free.off = (lfs->free.off + lfs->free.size)
   2215e:	6563      	str	r3, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   22160:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        lfs->free.i = 0;
   22162:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   22166:	00db      	lsls	r3, r3, #3
   22168:	4293      	cmp	r3, r2
   2216a:	bf94      	ite	ls
   2216c:	65a3      	strls	r3, [r4, #88]	; 0x58
   2216e:	65a2      	strhi	r2, [r4, #88]	; 0x58
__ssp_bos_icheck3(memset, void *, int)
   22170:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   22172:	6e60      	ldr	r0, [r4, #100]	; 0x64
   22174:	4641      	mov	r1, r8
   22176:	f00e fa20 	bl	305ba <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
   2217a:	2301      	movs	r3, #1
   2217c:	4622      	mov	r2, r4
   2217e:	4620      	mov	r0, r4
   22180:	490a      	ldr	r1, [pc, #40]	; (221ac <lfs_alloc+0x110>)
   22182:	f7ff fbb1 	bl	218e8 <lfs_fs_rawtraverse>
        if (err) {
   22186:	2800      	cmp	r0, #0
   22188:	d08e      	beq.n	220a8 <lfs_alloc+0xc>
    lfs->free.i = 0;
   2218a:	e9c4 8816 	strd	r8, r8, [r4, #88]	; 0x58
    lfs->free.ack = lfs->cfg->block_count;
   2218e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   22190:	6a1b      	ldr	r3, [r3, #32]
   22192:	6623      	str	r3, [r4, #96]	; 0x60
}
   22194:	e7d2      	b.n	2213c <lfs_alloc+0xa0>
                return 0;
   22196:	2000      	movs	r0, #0
   22198:	e7d0      	b.n	2213c <lfs_alloc+0xa0>
   2219a:	bf00      	nop
   2219c:	00037d95 	.word	0x00037d95
   221a0:	00031544 	.word	0x00031544
   221a4:	00037a1d 	.word	0x00037a1d
   221a8:	01000005 	.word	0x01000005
   221ac:	0002eed3 	.word	0x0002eed3

000221b0 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
   221b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221b4:	4604      	mov	r4, r0
   221b6:	460d      	mov	r5, r1
   221b8:	b087      	sub	sp, #28
        int err = lfs_alloc(lfs, &nblock);
   221ba:	4620      	mov	r0, r4
   221bc:	a905      	add	r1, sp, #20
   221be:	f7ff ff6d 	bl	2209c <lfs_alloc>
        if (err) {
   221c2:	4606      	mov	r6, r0
   221c4:	b958      	cbnz	r0, 221de <lfs_file_relocate+0x2e>
        err = lfs_bd_erase(lfs, nblock);
   221c6:	f8dd 8014 	ldr.w	r8, [sp, #20]
   221ca:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   221cc:	4641      	mov	r1, r8
   221ce:	f7ff fc3f 	bl	21a50 <lfs_bd_erase.isra.0>
        if (err) {
   221d2:	4606      	mov	r6, r0
   221d4:	2800      	cmp	r0, #0
   221d6:	d053      	beq.n	22280 <lfs_file_relocate+0xd0>
            if (err == LFS_ERR_CORRUPT) {
   221d8:	f110 0f54 	cmn.w	r0, #84	; 0x54
   221dc:	d056      	beq.n	2228c <lfs_file_relocate+0xdc>
}
   221de:	4630      	mov	r0, r6
   221e0:	b007      	add	sp, #28
   221e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (file->flags & LFS_F_INLINE) {
   221e6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   221e8:	f10d 0a13 	add.w	sl, sp, #19
   221ec:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
                err = lfs_dir_getread(lfs, &file->m,
   221f0:	e9cd 7a01 	strd	r7, sl, [sp, #4]
   221f4:	eba3 0307 	sub.w	r3, r3, r7
   221f8:	f8cd 900c 	str.w	r9, [sp, #12]
            if (file->flags & LFS_F_INLINE) {
   221fc:	d01c      	beq.n	22238 <lfs_file_relocate+0x88>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   221fe:	88aa      	ldrh	r2, [r5, #4]
                err = lfs_dir_getread(lfs, &file->m,
   22200:	4924      	ldr	r1, [pc, #144]	; (22294 <lfs_file_relocate+0xe4>)
   22202:	4620      	mov	r0, r4
   22204:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
   22208:	9200      	str	r2, [sp, #0]
   2220a:	f105 0108 	add.w	r1, r5, #8
   2220e:	465a      	mov	r2, fp
   22210:	f7fe ff7e 	bl	21110 <lfs_dir_getread.constprop.0>
                if (err) {
   22214:	b970      	cbnz	r0, 22234 <lfs_file_relocate+0x84>
            err = lfs_bd_prog(lfs,
   22216:	2301      	movs	r3, #1
   22218:	4622      	mov	r2, r4
   2221a:	4620      	mov	r0, r4
   2221c:	e9cd a902 	strd	sl, r9, [sp, #8]
   22220:	e9cd 8700 	strd	r8, r7, [sp]
   22224:	f104 0110 	add.w	r1, r4, #16
   22228:	f7ff fdca 	bl	21dc0 <lfs_bd_prog>
            if (err) {
   2222c:	b160      	cbz	r0, 22248 <lfs_file_relocate+0x98>
                if (err == LFS_ERR_CORRUPT) {
   2222e:	f110 0f54 	cmn.w	r0, #84	; 0x54
   22232:	d02b      	beq.n	2228c <lfs_file_relocate+0xdc>
                    return err;
   22234:	4606      	mov	r6, r0
   22236:	e7d2      	b.n	221de <lfs_file_relocate+0x2e>
                err = lfs_bd_read(lfs,
   22238:	6baa      	ldr	r2, [r5, #56]	; 0x38
   2223a:	4659      	mov	r1, fp
   2223c:	9200      	str	r2, [sp, #0]
   2223e:	4620      	mov	r0, r4
   22240:	4622      	mov	r2, r4
   22242:	f7fe fc3f 	bl	20ac4 <lfs_bd_read>
   22246:	e7e5      	b.n	22214 <lfs_file_relocate+0x64>
        for (lfs_off_t i = 0; i < file->off; i++) {
   22248:	3701      	adds	r7, #1
   2224a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2224c:	42bb      	cmp	r3, r7
   2224e:	d8ca      	bhi.n	221e6 <lfs_file_relocate+0x36>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
   22250:	6ea3      	ldr	r3, [r4, #104]	; 0x68
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22252:	69e1      	ldr	r1, [r4, #28]
   22254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   22256:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   22258:	f00e f975 	bl	30546 <memcpy>
        file->cache.block = lfs->pcache.block;
   2225c:	6923      	ldr	r3, [r4, #16]
        lfs_cache_zero(lfs, &lfs->pcache);
   2225e:	f104 0110 	add.w	r1, r4, #16
        file->cache.block = lfs->pcache.block;
   22262:	642b      	str	r3, [r5, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
   22264:	6963      	ldr	r3, [r4, #20]
   22266:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
   22268:	69a3      	ldr	r3, [r4, #24]
   2226a:	64ab      	str	r3, [r5, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
   2226c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2226e:	f00c ffc0 	bl	2f1f2 <lfs_cache_zero.isra.0>
        file->flags |= LFS_F_WRITING;
   22272:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        file->block = nblock;
   22274:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
   22278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2227c:	632b      	str	r3, [r5, #48]	; 0x30
        return 0;
   2227e:	e7ae      	b.n	221de <lfs_file_relocate+0x2e>
        for (lfs_off_t i = 0; i < file->off; i++) {
   22280:	4607      	mov	r7, r0
   22282:	f04f 0901 	mov.w	r9, #1
                err = lfs_dir_getread(lfs, &file->m,
   22286:	f105 0b40 	add.w	fp, r5, #64	; 0x40
   2228a:	e7de      	b.n	2224a <lfs_file_relocate+0x9a>
    rcache->block = LFS_BLOCK_NULL;
   2228c:	f04f 33ff 	mov.w	r3, #4294967295
   22290:	6123      	str	r3, [r4, #16]
   22292:	e792      	b.n	221ba <lfs_file_relocate+0xa>
   22294:	20100000 	.word	0x20100000

00022298 <lfs_file_rawwrite>:
        const void *buffer, lfs_size_t size) {
   22298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2229c:	461e      	mov	r6, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   2229e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
   222a0:	4617      	mov	r7, r2
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   222a2:	079a      	lsls	r2, r3, #30
        const void *buffer, lfs_size_t size) {
   222a4:	4605      	mov	r5, r0
   222a6:	460c      	mov	r4, r1
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   222a8:	d40b      	bmi.n	222c2 <lfs_file_rawwrite+0x2a>
   222aa:	4925      	ldr	r1, [pc, #148]	; (22340 <lfs_file_rawwrite+0xa8>)
   222ac:	4825      	ldr	r0, [pc, #148]	; (22344 <lfs_file_rawwrite+0xac>)
   222ae:	f640 535d 	movw	r3, #3421	; 0xd5d
   222b2:	4a25      	ldr	r2, [pc, #148]	; (22348 <lfs_file_rawwrite+0xb0>)
   222b4:	f008 f9ed 	bl	2a692 <assert_print>
   222b8:	f640 515d 	movw	r1, #3421	; 0xd5d
   222bc:	4822      	ldr	r0, [pc, #136]	; (22348 <lfs_file_rawwrite+0xb0>)
   222be:	f008 f9e1 	bl	2a684 <assert_post_action>
    if (file->flags & LFS_F_READING) {
   222c2:	035a      	lsls	r2, r3, #13
   222c4:	d419      	bmi.n	222fa <lfs_file_rawwrite+0x62>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   222c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   222c8:	050b      	lsls	r3, r1, #20
   222ca:	d41d      	bmi.n	22308 <lfs_file_rawwrite+0x70>
    if (file->pos + size > lfs->file_max) {
   222cc:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
   222d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   222d2:	eb08 0206 	add.w	r2, r8, r6
   222d6:	429a      	cmp	r2, r3
   222d8:	d82f      	bhi.n	2233a <lfs_file_rawwrite+0xa2>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   222da:	f411 3900 	ands.w	r9, r1, #131072	; 0x20000
   222de:	d019      	beq.n	22314 <lfs_file_rawwrite+0x7c>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
   222e0:	4633      	mov	r3, r6
   222e2:	463a      	mov	r2, r7
   222e4:	4621      	mov	r1, r4
   222e6:	4628      	mov	r0, r5
   222e8:	f00d f846 	bl	2f378 <lfs_file_flushedwrite>
    if (nsize < 0) {
   222ec:	2800      	cmp	r0, #0
   222ee:	db08      	blt.n	22302 <lfs_file_rawwrite+0x6a>
    file->flags &= ~LFS_F_ERRED;
   222f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   222f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   222f6:	6323      	str	r3, [r4, #48]	; 0x30
    return nsize;
   222f8:	e003      	b.n	22302 <lfs_file_rawwrite+0x6a>
        int err = lfs_file_flush(lfs, file);
   222fa:	f00d f974 	bl	2f5e6 <lfs_file_flush>
        if (err) {
   222fe:	2800      	cmp	r0, #0
   22300:	d0e1      	beq.n	222c6 <lfs_file_rawwrite+0x2e>
}
   22302:	b003      	add	sp, #12
   22304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   22308:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2230a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2230c:	4293      	cmp	r3, r2
        file->pos = file->ctz.size;
   2230e:	bf88      	it	hi
   22310:	6363      	strhi	r3, [r4, #52]	; 0x34
   22312:	e7db      	b.n	222cc <lfs_file_rawwrite+0x34>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   22314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22316:	4598      	cmp	r8, r3
   22318:	d9e2      	bls.n	222e0 <lfs_file_rawwrite+0x48>
        file->pos = file->ctz.size;
   2231a:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   2231c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2231e:	4598      	cmp	r8, r3
   22320:	d9de      	bls.n	222e0 <lfs_file_rawwrite+0x48>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
   22322:	2301      	movs	r3, #1
   22324:	4621      	mov	r1, r4
   22326:	4628      	mov	r0, r5
   22328:	f10d 0207 	add.w	r2, sp, #7
   2232c:	f88d 9007 	strb.w	r9, [sp, #7]
   22330:	f00d f822 	bl	2f378 <lfs_file_flushedwrite>
            if (res < 0) {
   22334:	2800      	cmp	r0, #0
   22336:	daf1      	bge.n	2231c <lfs_file_rawwrite+0x84>
   22338:	e7e3      	b.n	22302 <lfs_file_rawwrite+0x6a>
        return LFS_ERR_FBIG;
   2233a:	f06f 001a 	mvn.w	r0, #26
   2233e:	e7e0      	b.n	22302 <lfs_file_rawwrite+0x6a>
   22340:	00037db2 	.word	0x00037db2
   22344:	00032629 	.word	0x00032629
   22348:	00037a1d 	.word	0x00037a1d

0002234c <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22350:	b099      	sub	sp, #100	; 0x64
   22352:	af08      	add	r7, sp, #32
   22354:	e9c7 3201 	strd	r3, r2, [r7, #4]
   22358:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   2235c:	688a      	ldr	r2, [r1, #8]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2235e:	60fb      	str	r3, [r7, #12]
    return (lfs->cfg->block_cycles > 0
   22360:	6e83      	ldr	r3, [r0, #104]	; 0x68
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   22362:	4604      	mov	r4, r0
    return (lfs->cfg->block_cycles > 0
   22364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   22366:	460d      	mov	r5, r1
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   22368:	2b00      	cmp	r3, #0
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2236a:	f8b7 906c 	ldrh.w	r9, [r7, #108]	; 0x6c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   2236e:	f102 0201 	add.w	r2, r2, #1
   22372:	dd58      	ble.n	22426 <lfs_dir_compact+0xda>
   22374:	3301      	adds	r3, #1
   22376:	f043 0301 	orr.w	r3, r3, #1
   2237a:	fbb2 f1f3 	udiv	r1, r2, r3
   2237e:	fb03 2311 	mls	r3, r3, r1, r2
   22382:	2b00      	cmp	r3, #0
   22384:	d14f      	bne.n	22426 <lfs_dir_compact+0xda>
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   22386:	2601      	movs	r6, #1
   22388:	4628      	mov	r0, r5
    dir->rev += 1;
   2238a:	60aa      	str	r2, [r5, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   2238c:	62bb      	str	r3, [r7, #40]	; 0x28
   2238e:	62fe      	str	r6, [r7, #44]	; 0x2c
   22390:	f107 0128 	add.w	r1, r7, #40	; 0x28
   22394:	f00c fd5e 	bl	2ee54 <lfs_pair_cmp>
   22398:	b9c8      	cbnz	r0, 223ce <lfs_dir_compact+0x82>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   2239a:	46b0      	mov	r8, r6
    bool relocated = false;
   2239c:	2600      	movs	r6, #0
            struct lfs_commit commit = {
   2239e:	2300      	movs	r3, #0
   223a0:	f04f 32ff 	mov.w	r2, #4294967295
                .block = dir->pair[1],
   223a4:	6869      	ldr	r1, [r5, #4]
            struct lfs_commit commit = {
   223a6:	e9c7 320b 	strd	r3, r2, [r7, #44]	; 0x2c
   223aa:	e9c7 230d 	strd	r2, r3, [r7, #52]	; 0x34
                .end = (lfs->cfg->metadata_max ?
   223ae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
            struct lfs_commit commit = {
   223b0:	62b9      	str	r1, [r7, #40]	; 0x28
                .end = (lfs->cfg->metadata_max ?
   223b2:	6c83      	ldr	r3, [r0, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   223b4:	2b00      	cmp	r3, #0
   223b6:	d03d      	beq.n	22434 <lfs_dir_compact+0xe8>
   223b8:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
   223ba:	63fb      	str	r3, [r7, #60]	; 0x3c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
   223bc:	f7ff fb48 	bl	21a50 <lfs_bd_erase.isra.0>
            if (err) {
   223c0:	2800      	cmp	r0, #0
   223c2:	d039      	beq.n	22438 <lfs_dir_compact+0xec>
                if (err == LFS_ERR_CORRUPT) {
   223c4:	f110 0f54 	cmn.w	r0, #84	; 0x54
   223c8:	f040 80da 	bne.w	22580 <lfs_dir_compact+0x234>
                    goto relocate;
   223cc:	4646      	mov	r6, r8
    rcache->block = LFS_BLOCK_NULL;
   223ce:	f04f 33ff 	mov.w	r3, #4294967295
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   223d2:	f04f 0800 	mov.w	r8, #0
   223d6:	f04f 0a01 	mov.w	sl, #1
   223da:	4628      	mov	r0, r5
   223dc:	e9c7 8a0a 	strd	r8, sl, [r7, #40]	; 0x28
    rcache->block = LFS_BLOCK_NULL;
   223e0:	6123      	str	r3, [r4, #16]
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   223e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   223e6:	f00c fd35 	bl	2ee54 <lfs_pair_cmp>
   223ea:	2800      	cmp	r0, #0
   223ec:	f040 80cc 	bne.w	22588 <lfs_dir_compact+0x23c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
   223f0:	466c      	mov	r4, sp
   223f2:	b08a      	sub	sp, #40	; 0x28
   223f4:	686b      	ldr	r3, [r5, #4]
   223f6:	aa08      	add	r2, sp, #32
   223f8:	496a      	ldr	r1, [pc, #424]	; (225a4 <lfs_dir_compact+0x258>)
   223fa:	486b      	ldr	r0, [pc, #428]	; (225a8 <lfs_dir_compact+0x25c>)
   223fc:	6151      	str	r1, [r2, #20]
   223fe:	496b      	ldr	r1, [pc, #428]	; (225ac <lfs_dir_compact+0x260>)
   22400:	6191      	str	r1, [r2, #24]
   22402:	f240 7169 	movw	r1, #1897	; 0x769
   22406:	e9c2 1307 	strd	r1, r3, [r2, #28]
   2240a:	f44f 7300 	mov.w	r3, #512	; 0x200
   2240e:	8493      	strh	r3, [r2, #36]	; 0x24
   22410:	4b67      	ldr	r3, [pc, #412]	; (225b0 <lfs_dir_compact+0x264>)
   22412:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   22416:	f842 3f10 	str.w	r3, [r2, #16]!
   2241a:	f00c fe12 	bl	2f042 <z_log_msg_static_create.constprop.0>
   2241e:	46a5      	mov	sp, r4
            return LFS_ERR_NOSPC;
   22420:	f06f 001b 	mvn.w	r0, #27
   22424:	e0ac      	b.n	22580 <lfs_dir_compact+0x234>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   22426:	f04f 0800 	mov.w	r8, #0
    dir->rev += 1;
   2242a:	60aa      	str	r2, [r5, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   2242c:	e7b6      	b.n	2239c <lfs_dir_compact+0x50>
        tired = false;
   2242e:	4680      	mov	r8, r0
        relocated = true;
   22430:	4656      	mov	r6, sl
   22432:	e7b4      	b.n	2239e <lfs_dir_compact+0x52>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   22434:	69c3      	ldr	r3, [r0, #28]
   22436:	e7bf      	b.n	223b8 <lfs_dir_compact+0x6c>
            err = lfs_dir_commitprog(lfs, &commit,
   22438:	f107 0a28 	add.w	sl, r7, #40	; 0x28
   2243c:	2304      	movs	r3, #4
   2243e:	4651      	mov	r1, sl
   22440:	4620      	mov	r0, r4
   22442:	f105 0208 	add.w	r2, r5, #8
   22446:	f00c fedf 	bl	2f208 <lfs_dir_commitprog>
            if (err) {
   2244a:	2800      	cmp	r0, #0
   2244c:	d1ba      	bne.n	223c4 <lfs_dir_compact+0x78>
            err = lfs_dir_traverse(lfs,
   2244e:	f107 0314 	add.w	r3, r7, #20
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   22452:	e9c7 4a05 	strd	r4, sl, [r7, #20]
            err = lfs_dir_traverse(lfs,
   22456:	9307      	str	r3, [sp, #28]
   22458:	4b56      	ldr	r3, [pc, #344]	; (225b4 <lfs_dir_compact+0x268>)
   2245a:	4602      	mov	r2, r0
   2245c:	9306      	str	r3, [sp, #24]
   2245e:	f1c9 0300 	rsb	r3, r9, #0
   22462:	b21b      	sxth	r3, r3
   22464:	9305      	str	r3, [sp, #20]
   22466:	68fb      	ldr	r3, [r7, #12]
   22468:	4620      	mov	r0, r4
   2246a:	e9cd 9303 	strd	r9, r3, [sp, #12]
   2246e:	4b52      	ldr	r3, [pc, #328]	; (225b8 <lfs_dir_compact+0x26c>)
   22470:	9302      	str	r3, [sp, #8]
   22472:	687b      	ldr	r3, [r7, #4]
   22474:	9301      	str	r3, [sp, #4]
   22476:	68bb      	ldr	r3, [r7, #8]
   22478:	9300      	str	r3, [sp, #0]
   2247a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2247c:	f04f 33ff 	mov.w	r3, #4294967295
   22480:	f7fe fcea 	bl	20e58 <lfs_dir_traverse.constprop.0>
            if (err) {
   22484:	2800      	cmp	r0, #0
   22486:	d19d      	bne.n	223c4 <lfs_dir_compact+0x78>
            if (!lfs_pair_isnull(dir->tail)) {
   22488:	f105 0118 	add.w	r1, r5, #24
   2248c:	4608      	mov	r0, r1
   2248e:	f00c fcd7 	bl	2ee40 <lfs_pair_isnull>
   22492:	b960      	cbnz	r0, 224ae <lfs_dir_compact+0x162>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   22494:	7dea      	ldrb	r2, [r5, #23]
                err = lfs_dir_commitattr(lfs, &commit,
   22496:	460b      	mov	r3, r1
   22498:	4948      	ldr	r1, [pc, #288]	; (225bc <lfs_dir_compact+0x270>)
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   2249a:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
   2249e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
   224a2:	4620      	mov	r0, r4
   224a4:	4651      	mov	r1, sl
   224a6:	f00c fece 	bl	2f246 <lfs_dir_commitattr>
                if (err) {
   224aa:	2800      	cmp	r0, #0
   224ac:	d18a      	bne.n	223c4 <lfs_dir_compact+0x78>
            lfs_gstate_t delta = {0};
   224ae:	2300      	movs	r3, #0
   224b0:	e9c7 3307 	strd	r3, r3, [r7, #28]
   224b4:	627b      	str	r3, [r7, #36]	; 0x24
            if (!relocated) {
   224b6:	b95e      	cbnz	r6, 224d0 <lfs_dir_compact+0x184>
                lfs_gstate_xor(&delta, &lfs->gdisk);
   224b8:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   224bc:	f107 001c 	add.w	r0, r7, #28
   224c0:	f00c fce3 	bl	2ee8a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
   224c4:	f104 0130 	add.w	r1, r4, #48	; 0x30
   224c8:	f107 001c 	add.w	r0, r7, #28
   224cc:	f00c fcdd 	bl	2ee8a <lfs_gstate_xor>
            lfs_gstate_xor(&delta, &lfs->gdelta);
   224d0:	f104 0b48 	add.w	fp, r4, #72	; 0x48
   224d4:	4659      	mov	r1, fp
   224d6:	f107 001c 	add.w	r0, r7, #28
   224da:	f00c fcd6 	bl	2ee8a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   224de:	69fb      	ldr	r3, [r7, #28]
            err = lfs_dir_getgstate(lfs, dir, &delta);
   224e0:	4629      	mov	r1, r5
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   224e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   224e6:	f023 0303 	bic.w	r3, r3, #3
            err = lfs_dir_getgstate(lfs, dir, &delta);
   224ea:	4620      	mov	r0, r4
   224ec:	f107 021c 	add.w	r2, r7, #28
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   224f0:	61fb      	str	r3, [r7, #28]
            err = lfs_dir_getgstate(lfs, dir, &delta);
   224f2:	f7fe fc51 	bl	20d98 <lfs_dir_getgstate>
            if (err) {
   224f6:	2800      	cmp	r0, #0
   224f8:	d142      	bne.n	22580 <lfs_dir_compact+0x234>
        if (((uint32_t*)a)[i] != 0) {
   224fa:	e9d7 3207 	ldrd	r3, r2, [r7, #28]
   224fe:	4313      	orrs	r3, r2
   22500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22502:	4313      	orrs	r3, r2
   22504:	d009      	beq.n	2251a <lfs_dir_compact+0x1ce>
                err = lfs_dir_commitattr(lfs, &commit,
   22506:	4651      	mov	r1, sl
   22508:	4620      	mov	r0, r4
   2250a:	4a2d      	ldr	r2, [pc, #180]	; (225c0 <lfs_dir_compact+0x274>)
   2250c:	f107 031c 	add.w	r3, r7, #28
   22510:	f00c fe99 	bl	2f246 <lfs_dir_commitattr>
                if (err) {
   22514:	2800      	cmp	r0, #0
   22516:	f47f af55 	bne.w	223c4 <lfs_dir_compact+0x78>
            err = lfs_dir_commitcrc(lfs, &commit);
   2251a:	4651      	mov	r1, sl
   2251c:	4620      	mov	r0, r4
   2251e:	f7ff fccb 	bl	21eb8 <lfs_dir_commitcrc>
            if (err) {
   22522:	2800      	cmp	r0, #0
   22524:	f47f af4e 	bne.w	223c4 <lfs_dir_compact+0x78>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
   22528:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2252a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2252c:	699a      	ldr	r2, [r3, #24]
   2252e:	fbb1 f3f2 	udiv	r3, r1, r2
   22532:	fb02 1313 	mls	r3, r2, r3, r1
   22536:	b15b      	cbz	r3, 22550 <lfs_dir_compact+0x204>
   22538:	4922      	ldr	r1, [pc, #136]	; (225c4 <lfs_dir_compact+0x278>)
   2253a:	4823      	ldr	r0, [pc, #140]	; (225c8 <lfs_dir_compact+0x27c>)
   2253c:	f240 7352 	movw	r3, #1874	; 0x752
   22540:	4a1a      	ldr	r2, [pc, #104]	; (225ac <lfs_dir_compact+0x260>)
   22542:	f008 f8a6 	bl	2a692 <assert_print>
   22546:	f240 7152 	movw	r1, #1874	; 0x752
   2254a:	4818      	ldr	r0, [pc, #96]	; (225ac <lfs_dir_compact+0x260>)
   2254c:	f008 f89a 	bl	2a684 <assert_post_action>
    pair[0] = pair[1];
   22550:	e9d5 2000 	ldrd	r2, r0, [r5]
    pair[1] = t;
   22554:	e9c5 0200 	strd	r0, r2, [r5]
            dir->count = end - begin;
   22558:	68fa      	ldr	r2, [r7, #12]
            dir->off = commit.off;
   2255a:	60e9      	str	r1, [r5, #12]
            dir->count = end - begin;
   2255c:	eba2 0909 	sub.w	r9, r2, r9
            dir->etag = commit.ptag;
   22560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
            dir->count = end - begin;
   22562:	f8a5 9014 	strh.w	r9, [r5, #20]
            dir->etag = commit.ptag;
   22566:	612a      	str	r2, [r5, #16]
            lfs->gdelta = (lfs_gstate_t){0};
   22568:	64a3      	str	r3, [r4, #72]	; 0x48
   2256a:	e9cb 3301 	strd	r3, r3, [fp, #4]
            if (!relocated) {
   2256e:	b936      	cbnz	r6, 2257e <lfs_dir_compact+0x232>
                lfs->gdisk = lfs->gstate;
   22570:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   22574:	3430      	adds	r4, #48	; 0x30
   22576:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   2257a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
   2257e:	4630      	mov	r0, r6
}
   22580:	3744      	adds	r7, #68	; 0x44
   22582:	46bd      	mov	sp, r7
   22584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int err = lfs_alloc(lfs, &dir->pair[1]);
   22588:	4620      	mov	r0, r4
   2258a:	1d29      	adds	r1, r5, #4
   2258c:	f7ff fd86 	bl	2209c <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
   22590:	2800      	cmp	r0, #0
   22592:	f43f af4c 	beq.w	2242e <lfs_dir_compact+0xe2>
   22596:	f110 0f1c 	cmn.w	r0, #28
   2259a:	d1f1      	bne.n	22580 <lfs_dir_compact+0x234>
   2259c:	2e00      	cmp	r6, #0
   2259e:	f43f af3f 	beq.w	22420 <lfs_dir_compact+0xd4>
   225a2:	e6fc      	b.n	2239e <lfs_dir_compact+0x52>
   225a4:	00037e05 	.word	0x00037e05
   225a8:	00031544 	.word	0x00031544
   225ac:	00037a1d 	.word	0x00037a1d
   225b0:	01000005 	.word	0x01000005
   225b4:	0002f2f1 	.word	0x0002f2f1
   225b8:	400ffc00 	.word	0x400ffc00
   225bc:	000ffc08 	.word	0x000ffc08
   225c0:	7ffffc0c 	.word	0x7ffffc0c
   225c4:	00037ddf 	.word	0x00037ddf
   225c8:	00032629 	.word	0x00032629

000225cc <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
   225cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   225d0:	f240 4cff 	movw	ip, #1279	; 0x4ff
        lfs_mdir_t *pdir) {
   225d4:	460d      	mov	r5, r1
   225d6:	469b      	mov	fp, r3
    bool hasdelete = false;
   225d8:	2100      	movs	r1, #0
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   225da:	f240 4401 	movw	r4, #1025	; 0x401
        lfs_mdir_t *pdir) {
   225de:	b097      	sub	sp, #92	; 0x5c
   225e0:	af08      	add	r7, sp, #32
   225e2:	607a      	str	r2, [r7, #4]
   225e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   225e6:	f8d7 8064 	ldr.w	r8, [r7, #100]	; 0x64
   225ea:	4606      	mov	r6, r0
   225ec:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    for (int i = 0; i < attrcount; i++) {
   225f0:	4298      	cmp	r0, r3
   225f2:	f040 809d 	bne.w	22730 <lfs_dir_relocatingcommit+0x164>
    if (hasdelete && dir->count == 0) {
   225f6:	2900      	cmp	r1, #0
   225f8:	f040 80ca 	bne.w	22790 <lfs_dir_relocatingcommit+0x1c4>
    if (dir->erased) {
   225fc:	7dab      	ldrb	r3, [r5, #22]
   225fe:	2b00      	cmp	r3, #0
   22600:	f040 80ed 	bne.w	227de <lfs_dir_relocatingcommit+0x212>
    rcache->block = LFS_BLOCK_NULL;
   22604:	f04f 33ff 	mov.w	r3, #4294967295
   22608:	6133      	str	r3, [r6, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
   2260a:	f8b5 9014 	ldrh.w	r9, [r5, #20]
        lfs_size_t split = begin;
   2260e:	f04f 0800 	mov.w	r8, #0
        while (end - split > 1) {
   22612:	eba9 0a08 	sub.w	sl, r9, r8
   22616:	f1ba 0f01 	cmp.w	sl, #1
   2261a:	f200 81a0 	bhi.w	2295e <lfs_dir_relocatingcommit+0x392>
        if (split == begin) {
   2261e:	f1b8 0f00 	cmp.w	r8, #0
   22622:	d02b      	beq.n	2267c <lfs_dir_relocatingcommit+0xb0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   22624:	fa1f f888 	uxth.w	r8, r8
   22628:	e9cd 8901 	strd	r8, r9, [sp, #4]
   2262c:	9500      	str	r5, [sp, #0]
   2262e:	465a      	mov	r2, fp
   22630:	4629      	mov	r1, r5
   22632:	4630      	mov	r0, r6
   22634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22636:	f00d f841 	bl	2f6bc <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
   2263a:	4604      	mov	r4, r0
   2263c:	2800      	cmp	r0, #0
   2263e:	f000 818c 	beq.w	2295a <lfs_dir_relocatingcommit+0x38e>
   22642:	f110 0f1c 	cmn.w	r0, #28
   22646:	d16f      	bne.n	22728 <lfs_dir_relocatingcommit+0x15c>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
   22648:	e9d5 1300 	ldrd	r1, r3, [r5]
   2264c:	466c      	mov	r4, sp
   2264e:	b08c      	sub	sp, #48	; 0x30
   22650:	aa08      	add	r2, sp, #32
   22652:	48a3      	ldr	r0, [pc, #652]	; (228e0 <lfs_dir_relocatingcommit+0x314>)
   22654:	6253      	str	r3, [r2, #36]	; 0x24
   22656:	6150      	str	r0, [r2, #20]
   22658:	f44f 7300 	mov.w	r3, #512	; 0x200
   2265c:	48a1      	ldr	r0, [pc, #644]	; (228e4 <lfs_dir_relocatingcommit+0x318>)
   2265e:	8513      	strh	r3, [r2, #40]	; 0x28
   22660:	6190      	str	r0, [r2, #24]
   22662:	f240 70b3 	movw	r0, #1971	; 0x7b3
   22666:	4ba0      	ldr	r3, [pc, #640]	; (228e8 <lfs_dir_relocatingcommit+0x31c>)
   22668:	e9c2 0107 	strd	r0, r1, [r2, #28]
   2266c:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   22670:	489e      	ldr	r0, [pc, #632]	; (228ec <lfs_dir_relocatingcommit+0x320>)
   22672:	f842 3f10 	str.w	r3, [r2, #16]!
   22676:	f00c fce4 	bl	2f042 <z_log_msg_static_create.constprop.0>
   2267a:	46a5      	mov	sp, r4
    return (lfs->cfg->block_cycles > 0
   2267c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2267e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   22680:	2a00      	cmp	r2, #0
   22682:	dd45      	ble.n	22710 <lfs_dir_relocatingcommit+0x144>
   22684:	68ab      	ldr	r3, [r5, #8]
   22686:	3201      	adds	r2, #1
   22688:	3301      	adds	r3, #1
   2268a:	f042 0201 	orr.w	r2, r2, #1
   2268e:	fbb3 f1f2 	udiv	r1, r3, r2
   22692:	fb02 3311 	mls	r3, r2, r1, r3
   22696:	2b00      	cmp	r3, #0
   22698:	d13a      	bne.n	22710 <lfs_dir_relocatingcommit+0x144>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   2269a:	623b      	str	r3, [r7, #32]
   2269c:	2301      	movs	r3, #1
   2269e:	4628      	mov	r0, r5
   226a0:	627b      	str	r3, [r7, #36]	; 0x24
   226a2:	f107 0120 	add.w	r1, r7, #32
   226a6:	f00c fbd5 	bl	2ee54 <lfs_pair_cmp>
   226aa:	4680      	mov	r8, r0
   226ac:	bb80      	cbnz	r0, 22710 <lfs_dir_relocatingcommit+0x144>
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
   226ae:	4630      	mov	r0, r6
   226b0:	f7ff f9c0 	bl	21a34 <lfs_fs_rawsize>
        if (size < 0) {
   226b4:	1e04      	subs	r4, r0, #0
   226b6:	f2c0 8086 	blt.w	227c6 <lfs_dir_relocatingcommit+0x1fa>
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
   226ba:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   226bc:	6a1b      	ldr	r3, [r3, #32]
   226be:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   226c2:	d225      	bcs.n	22710 <lfs_dir_relocatingcommit+0x144>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   226c4:	e9cd 8901 	strd	r8, r9, [sp, #4]
   226c8:	9500      	str	r5, [sp, #0]
   226ca:	465a      	mov	r2, fp
   226cc:	4629      	mov	r1, r5
   226ce:	4630      	mov	r0, r6
   226d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   226d2:	f00c fff3 	bl	2f6bc <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
   226d6:	4604      	mov	r4, r0
   226d8:	2800      	cmp	r0, #0
   226da:	f000 817c 	beq.w	229d6 <lfs_dir_relocatingcommit+0x40a>
   226de:	f110 0f1c 	cmn.w	r0, #28
   226e2:	d121      	bne.n	22728 <lfs_dir_relocatingcommit+0x15c>
                LFS_WARN("Unable to expand superblock");
   226e4:	466c      	mov	r4, sp
   226e6:	b08a      	sub	sp, #40	; 0x28
   226e8:	aa08      	add	r2, sp, #32
   226ea:	4b81      	ldr	r3, [pc, #516]	; (228f0 <lfs_dir_relocatingcommit+0x324>)
   226ec:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   226f0:	6153      	str	r3, [r2, #20]
   226f2:	4b7c      	ldr	r3, [pc, #496]	; (228e4 <lfs_dir_relocatingcommit+0x318>)
   226f4:	487d      	ldr	r0, [pc, #500]	; (228ec <lfs_dir_relocatingcommit+0x320>)
   226f6:	6193      	str	r3, [r2, #24]
   226f8:	f240 73d1 	movw	r3, #2001	; 0x7d1
   226fc:	61d3      	str	r3, [r2, #28]
   226fe:	f44f 7300 	mov.w	r3, #512	; 0x200
   22702:	8413      	strh	r3, [r2, #32]
   22704:	4b7b      	ldr	r3, [pc, #492]	; (228f4 <lfs_dir_relocatingcommit+0x328>)
   22706:	f842 3f10 	str.w	r3, [r2, #16]!
   2270a:	f00c fc9a 	bl	2f042 <z_log_msg_static_create.constprop.0>
   2270e:	46a5      	mov	sp, r4
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
   22710:	2300      	movs	r3, #0
   22712:	e9cd 5300 	strd	r5, r3, [sp]
   22716:	f8cd 9008 	str.w	r9, [sp, #8]
   2271a:	465a      	mov	r2, fp
   2271c:	4629      	mov	r1, r5
   2271e:	4630      	mov	r0, r6
   22720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22722:	f7ff fe13 	bl	2234c <lfs_dir_compact>
   22726:	4604      	mov	r4, r0
    if (state < 0) {
   22728:	2c00      	cmp	r4, #0
   2272a:	f280 80fd 	bge.w	22928 <lfs_dir_relocatingcommit+0x35c>
   2272e:	e04a      	b.n	227c6 <lfs_dir_relocatingcommit+0x1fa>
    return (tag & 0x7ff00000) >> 20;
   22730:	681a      	ldr	r2, [r3, #0]
   22732:	ea4f 5e12 	mov.w	lr, r2, lsr #20
   22736:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   2273a:	42a2      	cmp	r2, r4
   2273c:	d104      	bne.n	22748 <lfs_dir_relocatingcommit+0x17c>
            dir->count += 1;
   2273e:	8aaa      	ldrh	r2, [r5, #20]
   22740:	3201      	adds	r2, #1
   22742:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
   22744:	3308      	adds	r3, #8
   22746:	e753      	b.n	225f0 <lfs_dir_relocatingcommit+0x24>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   22748:	4562      	cmp	r2, ip
   2274a:	d111      	bne.n	22770 <lfs_dir_relocatingcommit+0x1a4>
            LFS_ASSERT(dir->count > 0);
   2274c:	8aaa      	ldrh	r2, [r5, #20]
   2274e:	b95a      	cbnz	r2, 22768 <lfs_dir_relocatingcommit+0x19c>
   22750:	4969      	ldr	r1, [pc, #420]	; (228f8 <lfs_dir_relocatingcommit+0x32c>)
   22752:	f240 73e9 	movw	r3, #2025	; 0x7e9
   22756:	4a63      	ldr	r2, [pc, #396]	; (228e4 <lfs_dir_relocatingcommit+0x318>)
   22758:	4868      	ldr	r0, [pc, #416]	; (228fc <lfs_dir_relocatingcommit+0x330>)
   2275a:	f007 ff9a 	bl	2a692 <assert_print>
   2275e:	f240 71e9 	movw	r1, #2025	; 0x7e9
        LFS_ASSERT(pdir);
   22762:	4860      	ldr	r0, [pc, #384]	; (228e4 <lfs_dir_relocatingcommit+0x318>)
   22764:	f007 ff8e 	bl	2a684 <assert_post_action>
            dir->count -= 1;
   22768:	3a01      	subs	r2, #1
            hasdelete = true;
   2276a:	2101      	movs	r1, #1
            dir->count -= 1;
   2276c:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
   2276e:	e7e9      	b.n	22744 <lfs_dir_relocatingcommit+0x178>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
   22770:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
   22774:	f5be 6fc0 	cmp.w	lr, #1536	; 0x600
   22778:	d1e4      	bne.n	22744 <lfs_dir_relocatingcommit+0x178>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
   2277a:	685a      	ldr	r2, [r3, #4]
   2277c:	6812      	ldr	r2, [r2, #0]
   2277e:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
   22780:	685a      	ldr	r2, [r3, #4]
   22782:	6852      	ldr	r2, [r2, #4]
   22784:	61ea      	str	r2, [r5, #28]
    return (tag & 0x0ff00000) >> 20;
   22786:	681a      	ldr	r2, [r3, #0]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
   22788:	f3c2 5200 	ubfx	r2, r2, #20, #1
   2278c:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
   2278e:	e7d9      	b.n	22744 <lfs_dir_relocatingcommit+0x178>
    if (hasdelete && dir->count == 0) {
   22790:	8aab      	ldrh	r3, [r5, #20]
   22792:	2b00      	cmp	r3, #0
   22794:	f47f af32 	bne.w	225fc <lfs_dir_relocatingcommit+0x30>
        LFS_ASSERT(pdir);
   22798:	f1b8 0f00 	cmp.w	r8, #0
   2279c:	d109      	bne.n	227b2 <lfs_dir_relocatingcommit+0x1e6>
   2279e:	4958      	ldr	r1, [pc, #352]	; (22900 <lfs_dir_relocatingcommit+0x334>)
   227a0:	f240 73f6 	movw	r3, #2038	; 0x7f6
   227a4:	4a4f      	ldr	r2, [pc, #316]	; (228e4 <lfs_dir_relocatingcommit+0x318>)
   227a6:	4855      	ldr	r0, [pc, #340]	; (228fc <lfs_dir_relocatingcommit+0x330>)
   227a8:	f007 ff73 	bl	2a692 <assert_print>
   227ac:	f240 71f6 	movw	r1, #2038	; 0x7f6
   227b0:	e7d7      	b.n	22762 <lfs_dir_relocatingcommit+0x196>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
   227b2:	4642      	mov	r2, r8
   227b4:	4629      	mov	r1, r5
   227b6:	4630      	mov	r0, r6
   227b8:	f00c fc53 	bl	2f062 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   227bc:	4604      	mov	r4, r0
   227be:	b138      	cbz	r0, 227d0 <lfs_dir_relocatingcommit+0x204>
   227c0:	1c83      	adds	r3, r0, #2
   227c2:	f43f af1b 	beq.w	225fc <lfs_dir_relocatingcommit+0x30>
}
   227c6:	4620      	mov	r0, r4
   227c8:	373c      	adds	r7, #60	; 0x3c
   227ca:	46bd      	mov	sp, r7
   227cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err != LFS_ERR_NOENT && pdir->split) {
   227d0:	f898 3017 	ldrb.w	r3, [r8, #23]
   227d4:	2b00      	cmp	r3, #0
   227d6:	f43f af11 	beq.w	225fc <lfs_dir_relocatingcommit+0x30>
            state = LFS_OK_DROPPED;
   227da:	2402      	movs	r4, #2
   227dc:	e0a4      	b.n	22928 <lfs_dir_relocatingcommit+0x35c>
        struct lfs_commit commit = {
   227de:	f04f 31ff 	mov.w	r1, #4294967295
   227e2:	682b      	ldr	r3, [r5, #0]
            .off = dir->off,
   227e4:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
   227e6:	623b      	str	r3, [r7, #32]
   227e8:	e9c7 120b 	strd	r1, r2, [r7, #44]	; 0x2c
            .ptag = dir->etag,
   227ec:	692b      	ldr	r3, [r5, #16]
            .end = (lfs->cfg->metadata_max ?
   227ee:	6eb0      	ldr	r0, [r6, #104]	; 0x68
        struct lfs_commit commit = {
   227f0:	627a      	str	r2, [r7, #36]	; 0x24
   227f2:	62bb      	str	r3, [r7, #40]	; 0x28
            .end = (lfs->cfg->metadata_max ?
   227f4:	6c81      	ldr	r1, [r0, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   227f6:	b309      	cbz	r1, 2283c <lfs_dir_relocatingcommit+0x270>
   227f8:	3908      	subs	r1, #8
        struct lfs_commit commit = {
   227fa:	6379      	str	r1, [r7, #52]	; 0x34
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   227fc:	f107 0820 	add.w	r8, r7, #32
        int err = lfs_dir_traverse(lfs,
   22800:	f107 010c 	add.w	r1, r7, #12
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   22804:	60fe      	str	r6, [r7, #12]
   22806:	f8c7 8010 	str.w	r8, [r7, #16]
        int err = lfs_dir_traverse(lfs,
   2280a:	9107      	str	r1, [sp, #28]
   2280c:	493d      	ldr	r1, [pc, #244]	; (22904 <lfs_dir_relocatingcommit+0x338>)
   2280e:	4630      	mov	r0, r6
   22810:	9106      	str	r1, [sp, #24]
   22812:	2100      	movs	r1, #0
   22814:	e9cd 1104 	strd	r1, r1, [sp, #16]
   22818:	e9cd 1102 	strd	r1, r1, [sp, #8]
   2281c:	6e39      	ldr	r1, [r7, #96]	; 0x60
   2281e:	e9cd b100 	strd	fp, r1, [sp]
   22822:	4629      	mov	r1, r5
   22824:	f7fe fb18 	bl	20e58 <lfs_dir_traverse.constprop.0>
        if (err) {
   22828:	4604      	mov	r4, r0
   2282a:	b148      	cbz	r0, 22840 <lfs_dir_relocatingcommit+0x274>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
   2282c:	f114 0f1c 	cmn.w	r4, #28
   22830:	f43f aee8 	beq.w	22604 <lfs_dir_relocatingcommit+0x38>
   22834:	f114 0f54 	cmn.w	r4, #84	; 0x54
   22838:	d1c5      	bne.n	227c6 <lfs_dir_relocatingcommit+0x1fa>
   2283a:	e6e3      	b.n	22604 <lfs_dir_relocatingcommit+0x38>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   2283c:	69c1      	ldr	r1, [r0, #28]
   2283e:	e7db      	b.n	227f8 <lfs_dir_relocatingcommit+0x22c>
        lfs_gstate_xor(&delta, &lfs->gstate);
   22840:	f106 0930 	add.w	r9, r6, #48	; 0x30
   22844:	4649      	mov	r1, r9
        lfs_gstate_t delta = {0};
   22846:	e9c7 0005 	strd	r0, r0, [r7, #20]
   2284a:	61f8      	str	r0, [r7, #28]
        lfs_gstate_xor(&delta, &lfs->gstate);
   2284c:	f107 0014 	add.w	r0, r7, #20
   22850:	f00c fb1b 	bl	2ee8a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
   22854:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   22858:	4619      	mov	r1, r3
   2285a:	f107 0014 	add.w	r0, r7, #20
        lfs_gstate_xor(&delta, &lfs->gdelta);
   2285e:	f106 0a48 	add.w	sl, r6, #72	; 0x48
        lfs_gstate_xor(&delta, &lfs->gdisk);
   22862:	603b      	str	r3, [r7, #0]
   22864:	f00c fb11 	bl	2ee8a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
   22868:	4651      	mov	r1, sl
   2286a:	f107 0014 	add.w	r0, r7, #20
   2286e:	f00c fb0c 	bl	2ee8a <lfs_gstate_xor>
        if (((uint32_t*)a)[i] != 0) {
   22872:	e9d7 2106 	ldrd	r2, r1, [r7, #24]
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   22876:	697b      	ldr	r3, [r7, #20]
        if (((uint32_t*)a)[i] != 0) {
   22878:	430a      	orrs	r2, r1
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2287a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   2287e:	f023 0303 	bic.w	r3, r3, #3
        if (((uint32_t*)a)[i] != 0) {
   22882:	431a      	orrs	r2, r3
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   22884:	617b      	str	r3, [r7, #20]
        if (((uint32_t*)a)[i] != 0) {
   22886:	d012      	beq.n	228ae <lfs_dir_relocatingcommit+0x2e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
   22888:	4629      	mov	r1, r5
   2288a:	4630      	mov	r0, r6
   2288c:	f107 0214 	add.w	r2, r7, #20
   22890:	f7fe fa82 	bl	20d98 <lfs_dir_getgstate>
            if (err) {
   22894:	4604      	mov	r4, r0
   22896:	2800      	cmp	r0, #0
   22898:	d195      	bne.n	227c6 <lfs_dir_relocatingcommit+0x1fa>
            err = lfs_dir_commitattr(lfs, &commit,
   2289a:	4641      	mov	r1, r8
   2289c:	4630      	mov	r0, r6
   2289e:	4a1a      	ldr	r2, [pc, #104]	; (22908 <lfs_dir_relocatingcommit+0x33c>)
   228a0:	f107 0314 	add.w	r3, r7, #20
   228a4:	f00c fccf 	bl	2f246 <lfs_dir_commitattr>
            if (err) {
   228a8:	4604      	mov	r4, r0
   228aa:	2800      	cmp	r0, #0
   228ac:	d1be      	bne.n	2282c <lfs_dir_relocatingcommit+0x260>
        err = lfs_dir_commitcrc(lfs, &commit);
   228ae:	4641      	mov	r1, r8
   228b0:	4630      	mov	r0, r6
   228b2:	f7ff fb01 	bl	21eb8 <lfs_dir_commitcrc>
        if (err) {
   228b6:	4604      	mov	r4, r0
   228b8:	2800      	cmp	r0, #0
   228ba:	d1b7      	bne.n	2282c <lfs_dir_relocatingcommit+0x260>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
   228bc:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   228be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   228c0:	6991      	ldr	r1, [r2, #24]
   228c2:	fbb3 f2f1 	udiv	r2, r3, r1
   228c6:	fb01 3212 	mls	r2, r1, r2, r3
   228ca:	b30a      	cbz	r2, 22910 <lfs_dir_relocatingcommit+0x344>
   228cc:	490f      	ldr	r1, [pc, #60]	; (2290c <lfs_dir_relocatingcommit+0x340>)
   228ce:	f44f 6304 	mov.w	r3, #2112	; 0x840
   228d2:	4a04      	ldr	r2, [pc, #16]	; (228e4 <lfs_dir_relocatingcommit+0x318>)
   228d4:	4809      	ldr	r0, [pc, #36]	; (228fc <lfs_dir_relocatingcommit+0x330>)
   228d6:	f007 fedc 	bl	2a692 <assert_print>
   228da:	f44f 6104 	mov.w	r1, #2112	; 0x840
   228de:	e740      	b.n	22762 <lfs_dir_relocatingcommit+0x196>
   228e0:	00037e46 	.word	0x00037e46
   228e4:	00037a1d 	.word	0x00037a1d
   228e8:	01000006 	.word	0x01000006
   228ec:	00031544 	.word	0x00031544
   228f0:	00037e6a 	.word	0x00037e6a
   228f4:	01000004 	.word	0x01000004
   228f8:	00037e32 	.word	0x00037e32
   228fc:	00032629 	.word	0x00032629
   22900:	00037e41 	.word	0x00037e41
   22904:	0002f2f1 	.word	0x0002f2f1
   22908:	7ffffc0c 	.word	0x7ffffc0c
   2290c:	00037ddf 	.word	0x00037ddf
        dir->off = commit.off;
   22910:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
   22912:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22914:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
   22916:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   2291a:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
   2291e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
   22922:	64b4      	str	r4, [r6, #72]	; 0x48
   22924:	e9ca 4401 	strd	r4, r4, [sl, #4]
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
   22928:	687b      	ldr	r3, [r7, #4]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2292a:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
   2292e:	681b      	ldr	r3, [r3, #0]
   22930:	623b      	str	r3, [r7, #32]
   22932:	687b      	ldr	r3, [r7, #4]
   22934:	685b      	ldr	r3, [r3, #4]
   22936:	627b      	str	r3, [r7, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22938:	f1b8 0f00 	cmp.w	r8, #0
   2293c:	f43f af43 	beq.w	227c6 <lfs_dir_relocatingcommit+0x1fa>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
   22940:	f108 0908 	add.w	r9, r8, #8
   22944:	4648      	mov	r0, r9
   22946:	f107 0120 	add.w	r1, r7, #32
   2294a:	f00c fa83 	bl	2ee54 <lfs_pair_cmp>
   2294e:	4682      	mov	sl, r0
   22950:	2800      	cmp	r0, #0
   22952:	d042      	beq.n	229da <lfs_dir_relocatingcommit+0x40e>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22954:	f8d8 8000 	ldr.w	r8, [r8]
   22958:	e7ee      	b.n	22938 <lfs_dir_relocatingcommit+0x36c>
            end = split;
   2295a:	46c1      	mov	r9, r8
   2295c:	e657      	b.n	2260e <lfs_dir_relocatingcommit+0x42>
            lfs_size_t size = 0;
   2295e:	2300      	movs	r3, #0
   22960:	623b      	str	r3, [r7, #32]
            int err = lfs_dir_traverse(lfs,
   22962:	f107 0320 	add.w	r3, r7, #32
   22966:	9307      	str	r3, [sp, #28]
   22968:	4b4b      	ldr	r3, [pc, #300]	; (22a98 <lfs_dir_relocatingcommit+0x4cc>)
   2296a:	fa1f f288 	uxth.w	r2, r8
   2296e:	9306      	str	r3, [sp, #24]
   22970:	4253      	negs	r3, r2
   22972:	b21b      	sxth	r3, r3
   22974:	e9cd 9304 	strd	r9, r3, [sp, #16]
   22978:	4b48      	ldr	r3, [pc, #288]	; (22a9c <lfs_dir_relocatingcommit+0x4d0>)
   2297a:	9203      	str	r2, [sp, #12]
   2297c:	9302      	str	r3, [sp, #8]
   2297e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22980:	2200      	movs	r2, #0
   22982:	e9cd b300 	strd	fp, r3, [sp]
   22986:	4629      	mov	r1, r5
   22988:	f04f 33ff 	mov.w	r3, #4294967295
   2298c:	4630      	mov	r0, r6
   2298e:	f7fe fa63 	bl	20e58 <lfs_dir_traverse.constprop.0>
            if (err) {
   22992:	4604      	mov	r4, r0
   22994:	2800      	cmp	r0, #0
   22996:	f47f aec7 	bne.w	22728 <lfs_dir_relocatingcommit+0x15c>
            if (end - split < 0xff
   2299a:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
   2299e:	d815      	bhi.n	229cc <lfs_dir_relocatingcommit+0x400>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229a0:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   229a2:	69da      	ldr	r2, [r3, #28]
                            (lfs->cfg->metadata_max
   229a4:	6c98      	ldr	r0, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229a6:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
   229aa:	b190      	cbz	r0, 229d2 <lfs_dir_relocatingcommit+0x406>
   229ac:	0842      	lsrs	r2, r0, #1
                            lfs->cfg->prog_size))) {
   229ae:	6998      	ldr	r0, [r3, #24]
	return lfs_aligndown(a + alignment-1, alignment);
   229b0:	1e43      	subs	r3, r0, #1
   229b2:	4413      	add	r3, r2
	return a - (a % alignment);
   229b4:	fbb3 f2f0 	udiv	r2, r3, r0
   229b8:	fb00 3212 	mls	r2, r0, r2, r3
   229bc:	1a9b      	subs	r3, r3, r2
	return (a < b) ? a : b;
   229be:	428b      	cmp	r3, r1
   229c0:	bf28      	it	cs
   229c2:	460b      	movcs	r3, r1
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229c4:	6a3a      	ldr	r2, [r7, #32]
   229c6:	4293      	cmp	r3, r2
   229c8:	f4bf ae29 	bcs.w	2261e <lfs_dir_relocatingcommit+0x52>
            split = split + ((end - split) / 2);
   229cc:	eb08 085a 	add.w	r8, r8, sl, lsr #1
   229d0:	e61f      	b.n	22612 <lfs_dir_relocatingcommit+0x46>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229d2:	0852      	lsrs	r2, r2, #1
   229d4:	e7eb      	b.n	229ae <lfs_dir_relocatingcommit+0x3e2>
                end = begin;
   229d6:	4681      	mov	r9, r0
   229d8:	e69a      	b.n	22710 <lfs_dir_relocatingcommit+0x144>
            d->m = *dir;
   229da:	46cc      	mov	ip, r9
   229dc:	46ae      	mov	lr, r5
   229de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   229e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   229e6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   229ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
   229ee:	687b      	ldr	r3, [r7, #4]
   229f0:	4599      	cmp	r9, r3
   229f2:	d008      	beq.n	22a06 <lfs_dir_relocatingcommit+0x43a>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   229f4:	f240 41ff 	movw	r1, #1279	; 0x4ff
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   229f8:	f240 4001 	movw	r0, #1025	; 0x401
                for (int i = 0; i < attrcount; i++) {
   229fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
                            d->id == lfs_tag_id(attrs[i].tag)) {
   229fe:	f8b8 3004 	ldrh.w	r3, [r8, #4]
                for (int i = 0; i < attrcount; i++) {
   22a02:	4592      	cmp	sl, r2
   22a04:	d117      	bne.n	22a36 <lfs_dir_relocatingcommit+0x46a>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a06:	f108 0a20 	add.w	sl, r8, #32
            while (d->id >= d->m.count && d->m.split) {
   22a0a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   22a0e:	f8b8 201c 	ldrh.w	r2, [r8, #28]
   22a12:	4293      	cmp	r3, r2
   22a14:	d39e      	bcc.n	22954 <lfs_dir_relocatingcommit+0x388>
   22a16:	f898 101f 	ldrb.w	r1, [r8, #31]
   22a1a:	2900      	cmp	r1, #0
   22a1c:	d09a      	beq.n	22954 <lfs_dir_relocatingcommit+0x388>
                d->id -= d->m.count;
   22a1e:	1a9b      	subs	r3, r3, r2
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a20:	4649      	mov	r1, r9
   22a22:	4652      	mov	r2, sl
   22a24:	4630      	mov	r0, r6
                d->id -= d->m.count;
   22a26:	f8a8 3004 	strh.w	r3, [r8, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a2a:	f00c fb0d 	bl	2f048 <lfs_dir_fetch>
                if (err) {
   22a2e:	2800      	cmp	r0, #0
   22a30:	d0eb      	beq.n	22a0a <lfs_dir_relocatingcommit+0x43e>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a32:	4604      	mov	r4, r0
   22a34:	e6c7      	b.n	227c6 <lfs_dir_relocatingcommit+0x1fa>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a36:	f85b 203a 	ldr.w	r2, [fp, sl, lsl #3]
    return (tag & 0x7ff00000) >> 20;
   22a3a:	f3c2 5c0a 	ubfx	ip, r2, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a3e:	458c      	cmp	ip, r1
   22a40:	d118      	bne.n	22a74 <lfs_dir_relocatingcommit+0x4a8>
    return (tag & 0x000ffc00) >> 10;
   22a42:	f3c2 2289 	ubfx	r2, r2, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a46:	429a      	cmp	r2, r3
   22a48:	d106      	bne.n	22a58 <lfs_dir_relocatingcommit+0x48c>
                        d->m.pair[0] = LFS_BLOCK_NULL;
   22a4a:	f04f 33ff 	mov.w	r3, #4294967295
                        d->m.pair[1] = LFS_BLOCK_NULL;
   22a4e:	e9c8 3302 	strd	r3, r3, [r8, #8]
                for (int i = 0; i < attrcount; i++) {
   22a52:	f10a 0a01 	add.w	sl, sl, #1
   22a56:	e7d1      	b.n	229fc <lfs_dir_relocatingcommit+0x430>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a58:	d2fb      	bcs.n	22a52 <lfs_dir_relocatingcommit+0x486>
                        d->id -= 1;
   22a5a:	3b01      	subs	r3, #1
   22a5c:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
   22a60:	f898 3006 	ldrb.w	r3, [r8, #6]
   22a64:	2b02      	cmp	r3, #2
   22a66:	d1f4      	bne.n	22a52 <lfs_dir_relocatingcommit+0x486>
                            ((lfs_dir_t*)d)->pos -= 1;
   22a68:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   22a6c:	3b01      	subs	r3, #1
                            ((lfs_dir_t*)d)->pos += 1;
   22a6e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
   22a72:	e7ee      	b.n	22a52 <lfs_dir_relocatingcommit+0x486>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   22a74:	4584      	cmp	ip, r0
   22a76:	d1ec      	bne.n	22a52 <lfs_dir_relocatingcommit+0x486>
   22a78:	f3c2 2289 	ubfx	r2, r2, #10, #10
   22a7c:	429a      	cmp	r2, r3
   22a7e:	d8e8      	bhi.n	22a52 <lfs_dir_relocatingcommit+0x486>
                        d->id += 1;
   22a80:	3301      	adds	r3, #1
   22a82:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
   22a86:	f898 3006 	ldrb.w	r3, [r8, #6]
   22a8a:	2b02      	cmp	r3, #2
   22a8c:	d1e1      	bne.n	22a52 <lfs_dir_relocatingcommit+0x486>
                            ((lfs_dir_t*)d)->pos += 1;
   22a8e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   22a92:	3301      	adds	r3, #1
   22a94:	e7eb      	b.n	22a6e <lfs_dir_relocatingcommit+0x4a2>
   22a96:	bf00      	nop
   22a98:	0002ef07 	.word	0x0002ef07
   22a9c:	400ffc00 	.word	0x400ffc00

00022aa0 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
   22aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22aa4:	4605      	mov	r5, r0
   22aa6:	4688      	mov	r8, r1
   22aa8:	4691      	mov	r9, r2
   22aaa:	469a      	mov	sl, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22aac:	6a86      	ldr	r6, [r0, #40]	; 0x28
        const struct lfs_mattr *attrs, int attrcount) {
   22aae:	b09d      	sub	sp, #116	; 0x74
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22ab0:	2e00      	cmp	r6, #0
   22ab2:	d160      	bne.n	22b76 <lfs_dir_orphaningcommit+0xd6>
    lfs_mdir_t ldir = *dir;
   22ab4:	4646      	mov	r6, r8
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22ab6:	f8d8 3000 	ldr.w	r3, [r8]
    lfs_mdir_t ldir = *dir;
   22aba:	ac0c      	add	r4, sp, #48	; 0x30
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22abc:	9304      	str	r3, [sp, #16]
   22abe:	f8d8 3004 	ldr.w	r3, [r8, #4]
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22ac2:	af0c      	add	r7, sp, #48	; 0x30
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22ac4:	9305      	str	r3, [sp, #20]
    lfs_mdir_t ldir = *dir;
   22ac6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   22aca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22ace:	ae14      	add	r6, sp, #80	; 0x50
    lfs_mdir_t ldir = *dir;
   22ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22ad4:	464b      	mov	r3, r9
   22ad6:	4642      	mov	r2, r8
   22ad8:	4639      	mov	r1, r7
   22ada:	4628      	mov	r0, r5
   22adc:	e9cd a600 	strd	sl, r6, [sp]
   22ae0:	f7ff fd74 	bl	225cc <lfs_dir_relocatingcommit>
    if (state < 0) {
   22ae4:	1e04      	subs	r4, r0, #0
   22ae6:	db72      	blt.n	22bce <lfs_dir_orphaningcommit+0x12e>
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
   22ae8:	4640      	mov	r0, r8
   22aea:	a904      	add	r1, sp, #16
   22aec:	f00c f9b2 	bl	2ee54 <lfs_pair_cmp>
   22af0:	b948      	cbnz	r0, 22b06 <lfs_dir_orphaningcommit+0x66>
        *dir = ldir;
   22af2:	46c4      	mov	ip, r8
   22af4:	46be      	mov	lr, r7
   22af6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22afa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22afe:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22b02:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
   22b06:	2c02      	cmp	r4, #2
   22b08:	d12c      	bne.n	22b64 <lfs_dir_orphaningcommit+0xc4>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
   22b0a:	4641      	mov	r1, r8
   22b0c:	4628      	mov	r0, r5
   22b0e:	f105 0248 	add.w	r2, r5, #72	; 0x48
   22b12:	f7fe f941 	bl	20d98 <lfs_dir_getgstate>
        if (err) {
   22b16:	4604      	mov	r4, r0
   22b18:	2800      	cmp	r0, #0
   22b1a:	d158      	bne.n	22bce <lfs_dir_orphaningcommit+0x12e>
        lpair[0] = pdir.pair[0];
   22b1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b1e:	f898 2017 	ldrb.w	r2, [r8, #23]
        lpair[0] = pdir.pair[0];
   22b22:	9304      	str	r3, [sp, #16]
        lpair[1] = pdir.pair[1];
   22b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b26:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
        lpair[1] = pdir.pair[1];
   22b2a:	9305      	str	r3, [sp, #20]
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b2c:	4ba6      	ldr	r3, [pc, #664]	; (22dc8 <lfs_dir_orphaningcommit+0x328>)
   22b2e:	9001      	str	r0, [sp, #4]
   22b30:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   22b34:	9308      	str	r3, [sp, #32]
        lfs_pair_tole32(dir->tail);
   22b36:	f108 0318 	add.w	r3, r8, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b3a:	9309      	str	r3, [sp, #36]	; 0x24
   22b3c:	2301      	movs	r3, #1
   22b3e:	4631      	mov	r1, r6
   22b40:	9300      	str	r3, [sp, #0]
   22b42:	4628      	mov	r0, r5
   22b44:	ab08      	add	r3, sp, #32
   22b46:	aa04      	add	r2, sp, #16
   22b48:	f7ff fd40 	bl	225cc <lfs_dir_relocatingcommit>
        if (state < 0) {
   22b4c:	1e04      	subs	r4, r0, #0
   22b4e:	db3e      	blt.n	22bce <lfs_dir_orphaningcommit+0x12e>
        ldir = pdir;
   22b50:	46bc      	mov	ip, r7
   22b52:	46b6      	mov	lr, r6
   22b54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22b58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22b5c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22b60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b64:	2300      	movs	r3, #0
   22b66:	9302      	str	r3, [sp, #8]
    while (state == LFS_OK_RELOCATED) {
   22b68:	2c01      	cmp	r4, #1
   22b6a:	f040 8124 	bne.w	22db6 <lfs_dir_orphaningcommit+0x316>
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22b6e:	f105 0320 	add.w	r3, r5, #32
   22b72:	9303      	str	r3, [sp, #12]
   22b74:	e091      	b.n	22c9a <lfs_dir_orphaningcommit+0x1fa>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   22b76:	f106 0008 	add.w	r0, r6, #8
   22b7a:	4540      	cmp	r0, r8
   22b7c:	d101      	bne.n	22b82 <lfs_dir_orphaningcommit+0xe2>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22b7e:	6836      	ldr	r6, [r6, #0]
   22b80:	e796      	b.n	22ab0 <lfs_dir_orphaningcommit+0x10>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   22b82:	4641      	mov	r1, r8
   22b84:	f00c f966 	bl	2ee54 <lfs_pair_cmp>
   22b88:	2800      	cmp	r0, #0
   22b8a:	d1f8      	bne.n	22b7e <lfs_dir_orphaningcommit+0xde>
   22b8c:	79b3      	ldrb	r3, [r6, #6]
   22b8e:	2b01      	cmp	r3, #1
   22b90:	d1f5      	bne.n	22b7e <lfs_dir_orphaningcommit+0xde>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   22b92:	6b33      	ldr	r3, [r6, #48]	; 0x30
   22b94:	02da      	lsls	r2, r3, #11
   22b96:	d5f2      	bpl.n	22b7e <lfs_dir_orphaningcommit+0xde>
                f->ctz.size > lfs->cfg->cache_size) {
   22b98:	6eab      	ldr	r3, [r5, #104]	; 0x68
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   22b9a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   22b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22b9e:	429a      	cmp	r2, r3
   22ba0:	d9ed      	bls.n	22b7e <lfs_dir_orphaningcommit+0xde>
    file->off = file->pos;
   22ba2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    int err = lfs_file_relocate(lfs, file);
   22ba4:	4631      	mov	r1, r6
    file->off = file->pos;
   22ba6:	63f3      	str	r3, [r6, #60]	; 0x3c
    lfs->free.ack = lfs->cfg->block_count;
   22ba8:	6eab      	ldr	r3, [r5, #104]	; 0x68
    int err = lfs_file_relocate(lfs, file);
   22baa:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   22bac:	6a1b      	ldr	r3, [r3, #32]
   22bae:	662b      	str	r3, [r5, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
   22bb0:	f7ff fafe 	bl	221b0 <lfs_file_relocate>
    if (err) {
   22bb4:	4604      	mov	r4, r0
   22bb6:	b950      	cbnz	r0, 22bce <lfs_dir_orphaningcommit+0x12e>
    file->flags &= ~LFS_F_INLINE;
   22bb8:	6b33      	ldr	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
   22bba:	4631      	mov	r1, r6
    file->flags &= ~LFS_F_INLINE;
   22bbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
            err = lfs_file_flush(lfs, f);
   22bc0:	4628      	mov	r0, r5
    file->flags &= ~LFS_F_INLINE;
   22bc2:	6333      	str	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
   22bc4:	f00c fd0f 	bl	2f5e6 <lfs_file_flush>
            if (err) {
   22bc8:	4604      	mov	r4, r0
   22bca:	2800      	cmp	r0, #0
   22bcc:	d0d7      	beq.n	22b7e <lfs_dir_orphaningcommit+0xde>
}
   22bce:	4620      	mov	r0, r4
   22bd0:	b01d      	add	sp, #116	; 0x74
   22bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
   22bd6:	f10b 0108 	add.w	r1, fp, #8
   22bda:	a804      	add	r0, sp, #16
   22bdc:	f00c f93a 	bl	2ee54 <lfs_pair_cmp>
   22be0:	b908      	cbnz	r0, 22be6 <lfs_dir_orphaningcommit+0x146>
                d->m.pair[1] = ldir.pair[1];
   22be2:	e9cb 4202 	strd	r4, r2, [fp, #8]
            if (d->type == LFS_TYPE_DIR &&
   22be6:	f89b 1006 	ldrb.w	r1, [fp, #6]
   22bea:	2902      	cmp	r1, #2
   22bec:	d107      	bne.n	22bfe <lfs_dir_orphaningcommit+0x15e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
   22bee:	f10b 012c 	add.w	r1, fp, #44	; 0x2c
   22bf2:	a804      	add	r0, sp, #16
   22bf4:	f00c f92e 	bl	2ee54 <lfs_pair_cmp>
            if (d->type == LFS_TYPE_DIR &&
   22bf8:	b908      	cbnz	r0, 22bfe <lfs_dir_orphaningcommit+0x15e>
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
   22bfa:	e9cb 420b 	strd	r4, r2, [fp, #44]	; 0x2c
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22bfe:	f8db b000 	ldr.w	fp, [fp]
   22c02:	e055      	b.n	22cb0 <lfs_dir_orphaningcommit+0x210>
            int err = lfs_fs_preporphans(lfs, +1);
   22c04:	2101      	movs	r1, #1
   22c06:	4628      	mov	r0, r5
   22c08:	f7fd ff36 	bl	20a78 <lfs_fs_preporphans>
            if (err) {
   22c0c:	4604      	mov	r4, r0
   22c0e:	2800      	cmp	r0, #0
   22c10:	d1dd      	bne.n	22bce <lfs_dir_orphaningcommit+0x12e>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22c12:	4631      	mov	r1, r6
   22c14:	f105 0030 	add.w	r0, r5, #48	; 0x30
   22c18:	f00c f945 	bl	2eea6 <lfs_gstate_hasmovehere>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c1c:	e9dd a914 	ldrd	sl, r9, [sp, #80]	; 0x50
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22c20:	b1c0      	cbz	r0, 22c54 <lfs_dir_orphaningcommit+0x1b4>
                moveid = lfs_tag_id(lfs->gstate.tag);
   22c22:	6b29      	ldr	r1, [r5, #48]	; 0x30
                if (moveid < lfs_tag_id(tag)) {
   22c24:	f3c8 2389 	ubfx	r3, r8, #10, #10
    return (tag & 0x000ffc00) >> 10;
   22c28:	f3c1 2289 	ubfx	r2, r1, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22c2c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   22c30:	f421 01ff 	bic.w	r1, r1, #8355840	; 0x7f8000
   22c34:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
                if (moveid < lfs_tag_id(tag)) {
   22c38:	429a      	cmp	r2, r3
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22c3a:	e9c5 1b0c 	strd	r1, fp, [r5, #48]	; 0x30
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22c3e:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
                if (moveid < lfs_tag_id(tag)) {
   22c42:	d25d      	bcs.n	22d00 <lfs_dir_orphaningcommit+0x260>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c44:	e9cd a906 	strd	sl, r9, [sp, #24]
                    tag -= LFS_MKTAG(0, 1, 0);
   22c48:	f5a8 6380 	sub.w	r3, r8, #1024	; 0x400
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22c4c:	495f      	ldr	r1, [pc, #380]	; (22dcc <lfs_dir_orphaningcommit+0x32c>)
   22c4e:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
   22c52:	e003      	b.n	22c5c <lfs_dir_orphaningcommit+0x1bc>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c54:	e9cd a906 	strd	sl, r9, [sp, #24]
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22c58:	4643      	mov	r3, r8
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22c5a:	2200      	movs	r2, #0
   22c5c:	9208      	str	r2, [sp, #32]
   22c5e:	2200      	movs	r2, #0
   22c60:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   22c64:	2302      	movs	r3, #2
   22c66:	9201      	str	r2, [sp, #4]
   22c68:	9300      	str	r3, [sp, #0]
   22c6a:	4631      	mov	r1, r6
   22c6c:	4628      	mov	r0, r5
   22c6e:	ab08      	add	r3, sp, #32
   22c70:	aa06      	add	r2, sp, #24
   22c72:	970b      	str	r7, [sp, #44]	; 0x2c
   22c74:	f7ff fcaa 	bl	225cc <lfs_dir_relocatingcommit>
            if (state < 0) {
   22c78:	1e04      	subs	r4, r0, #0
   22c7a:	dba8      	blt.n	22bce <lfs_dir_orphaningcommit+0x12e>
            if (state == LFS_OK_RELOCATED) {
   22c7c:	2c01      	cmp	r4, #1
   22c7e:	d147      	bne.n	22d10 <lfs_dir_orphaningcommit+0x270>
                ldir = pdir;
   22c80:	46bc      	mov	ip, r7
   22c82:	46b6      	mov	lr, r6
   22c84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22c88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22c8c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22c90:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                lpair[1] = ppair[1];
   22c94:	e9cd a904 	strd	sl, r9, [sp, #16]
                orphans = true;
   22c98:	9402      	str	r4, [sp, #8]
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22c9a:	9903      	ldr	r1, [sp, #12]
   22c9c:	a804      	add	r0, sp, #16
   22c9e:	f00c f8d9 	bl	2ee54 <lfs_pair_cmp>
                d->m.pair[1] = ldir.pair[1];
   22ca2:	e9dd 420c 	ldrd	r4, r2, [sp, #48]	; 0x30
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22ca6:	b908      	cbnz	r0, 22cac <lfs_dir_orphaningcommit+0x20c>
            lfs->root[1] = ldir.pair[1];
   22ca8:	e9c5 4208 	strd	r4, r2, [r5, #32]
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22cac:	f8d5 b028 	ldr.w	fp, [r5, #40]	; 0x28
   22cb0:	f1bb 0f00 	cmp.w	fp, #0
   22cb4:	d18f      	bne.n	22bd6 <lfs_dir_orphaningcommit+0x136>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22cb6:	4632      	mov	r2, r6
   22cb8:	4628      	mov	r0, r5
   22cba:	a904      	add	r1, sp, #16
   22cbc:	f7fe fcc4 	bl	21648 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
   22cc0:	f1b0 0800 	subs.w	r8, r0, #0
   22cc4:	da9e      	bge.n	22c04 <lfs_dir_orphaningcommit+0x164>
   22cc6:	f118 0f02 	cmn.w	r8, #2
   22cca:	d17a      	bne.n	22dc2 <lfs_dir_orphaningcommit+0x322>
        bool hasparent = (tag != LFS_ERR_NOENT);
   22ccc:	46d9      	mov	r9, fp
        int err = lfs_fs_pred(lfs, lpair, &pdir);
   22cce:	4632      	mov	r2, r6
   22cd0:	4628      	mov	r0, r5
   22cd2:	a904      	add	r1, sp, #16
   22cd4:	f00c f9c5 	bl	2f062 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   22cd8:	4604      	mov	r4, r0
   22cda:	b1e0      	cbz	r0, 22d16 <lfs_dir_orphaningcommit+0x276>
   22cdc:	1c83      	adds	r3, r0, #2
   22cde:	f47f af76 	bne.w	22bce <lfs_dir_orphaningcommit+0x12e>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
   22ce2:	f118 0f02 	cmn.w	r8, #2
   22ce6:	d066      	beq.n	22db6 <lfs_dir_orphaningcommit+0x316>
   22ce8:	4939      	ldr	r1, [pc, #228]	; (22dd0 <lfs_dir_orphaningcommit+0x330>)
   22cea:	483a      	ldr	r0, [pc, #232]	; (22dd4 <lfs_dir_orphaningcommit+0x334>)
   22cec:	f640 131a 	movw	r3, #2330	; 0x91a
   22cf0:	4a39      	ldr	r2, [pc, #228]	; (22dd8 <lfs_dir_orphaningcommit+0x338>)
   22cf2:	f007 fcce 	bl	2a692 <assert_print>
   22cf6:	f640 111a 	movw	r1, #2330	; 0x91a
   22cfa:	4837      	ldr	r0, [pc, #220]	; (22dd8 <lfs_dir_orphaningcommit+0x338>)
   22cfc:	f007 fcc2 	bl	2a684 <assert_post_action>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22d00:	f240 33ff 	movw	r3, #1023	; 0x3ff
   22d04:	429a      	cmp	r2, r3
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22d06:	e9cd a906 	strd	sl, r9, [sp, #24]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22d0a:	d0a5      	beq.n	22c58 <lfs_dir_orphaningcommit+0x1b8>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22d0c:	4643      	mov	r3, r8
   22d0e:	e79d      	b.n	22c4c <lfs_dir_orphaningcommit+0x1ac>
        bool hasparent = (tag != LFS_ERR_NOENT);
   22d10:	f04f 0901 	mov.w	r9, #1
   22d14:	e7db      	b.n	22cce <lfs_dir_orphaningcommit+0x22e>
    return tag & 0x000003ff;
   22d16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   22d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
   22d1c:	bb6b      	cbnz	r3, 22d7a <lfs_dir_orphaningcommit+0x2da>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22d1e:	4631      	mov	r1, r6
   22d20:	f105 0030 	add.w	r0, r5, #48	; 0x30
   22d24:	f00c f8bf 	bl	2eea6 <lfs_gstate_hasmovehere>
            lpair[0] = pdir.pair[0];
   22d28:	e9dd 4114 	ldrd	r4, r1, [sp, #80]	; 0x50
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22d2c:	bb70      	cbnz	r0, 22d8c <lfs_dir_orphaningcommit+0x2ec>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22d2e:	2300      	movs	r3, #0
   22d30:	9308      	str	r3, [sp, #32]
   22d32:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
            lpair[1] = pdir.pair[1];
   22d36:	e9cd 4104 	strd	r4, r1, [sp, #16]
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22d3a:	4923      	ldr	r1, [pc, #140]	; (22dc8 <lfs_dir_orphaningcommit+0x328>)
   22d3c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   22d40:	ea41 5303 	orr.w	r3, r1, r3, lsl #20
   22d44:	2200      	movs	r2, #0
   22d46:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
   22d4a:	2302      	movs	r3, #2
   22d4c:	9209      	str	r2, [sp, #36]	; 0x24
   22d4e:	9201      	str	r2, [sp, #4]
   22d50:	9300      	str	r3, [sp, #0]
   22d52:	4631      	mov	r1, r6
   22d54:	4628      	mov	r0, r5
   22d56:	ab08      	add	r3, sp, #32
   22d58:	aa04      	add	r2, sp, #16
   22d5a:	f7ff fc37 	bl	225cc <lfs_dir_relocatingcommit>
            if (state < 0) {
   22d5e:	1e04      	subs	r4, r0, #0
   22d60:	f6ff af35 	blt.w	22bce <lfs_dir_orphaningcommit+0x12e>
            ldir = pdir;
   22d64:	46bc      	mov	ip, r7
   22d66:	46b6      	mov	lr, r6
   22d68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22d6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22d70:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22d74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   22d78:	e6f6      	b.n	22b68 <lfs_dir_orphaningcommit+0xc8>
                err = lfs_fs_preporphans(lfs, -hasparent);
   22d7a:	4628      	mov	r0, r5
   22d7c:	f1c9 0100 	rsb	r1, r9, #0
   22d80:	f7fd fe7a 	bl	20a78 <lfs_fs_preporphans>
                if (err) {
   22d84:	4604      	mov	r4, r0
   22d86:	2800      	cmp	r0, #0
   22d88:	d0c9      	beq.n	22d1e <lfs_dir_orphaningcommit+0x27e>
   22d8a:	e720      	b.n	22bce <lfs_dir_orphaningcommit+0x12e>
                moveid = lfs_tag_id(lfs->gstate.tag);
   22d8c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
   22d8e:	f3c2 2389 	ubfx	r3, r2, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22d92:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   22d96:	f422 02ff 	bic.w	r2, r2, #8355840	; 0x7f8000
   22d9a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
   22d9e:	632a      	str	r2, [r5, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22da0:	2200      	movs	r2, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22da2:	e9c5 220d 	strd	r2, r2, [r5, #52]	; 0x34
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22da6:	f240 32ff 	movw	r2, #1023	; 0x3ff
   22daa:	4293      	cmp	r3, r2
   22dac:	d0bf      	beq.n	22d2e <lfs_dir_orphaningcommit+0x28e>
   22dae:	4a07      	ldr	r2, [pc, #28]	; (22dcc <lfs_dir_orphaningcommit+0x32c>)
   22db0:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   22db4:	e7bc      	b.n	22d30 <lfs_dir_orphaningcommit+0x290>
    return orphans ? LFS_OK_ORPHANED : 0;
   22db6:	9b02      	ldr	r3, [sp, #8]
   22db8:	2b00      	cmp	r3, #0
   22dba:	bf0c      	ite	eq
   22dbc:	2400      	moveq	r4, #0
   22dbe:	2403      	movne	r4, #3
   22dc0:	e705      	b.n	22bce <lfs_dir_orphaningcommit+0x12e>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22dc2:	4644      	mov	r4, r8
   22dc4:	e703      	b.n	22bce <lfs_dir_orphaningcommit+0x12e>
   22dc6:	bf00      	nop
   22dc8:	000ffc08 	.word	0x000ffc08
   22dcc:	4ff00000 	.word	0x4ff00000
   22dd0:	00037e8d 	.word	0x00037e8d
   22dd4:	00032629 	.word	0x00032629
   22dd8:	00037a1d 	.word	0x00037a1d

00022ddc <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22de0:	4604      	mov	r4, r0
    return tag & 0x000003ff;
   22de2:	6b00      	ldr	r0, [r0, #48]	; 0x30
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22de4:	460f      	mov	r7, r1
    return tag & 0x000003ff;
   22de6:	f3c0 0009 	ubfx	r0, r0, #0, #10
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22dea:	b0a1      	sub	sp, #132	; 0x84
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
   22dec:	2800      	cmp	r0, #0
   22dee:	f000 8095 	beq.w	22f1c <lfs_fs_deorphan+0x140>
    int8_t found = 0;
   22df2:	2500      	movs	r5, #0
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
   22df4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 22f24 <lfs_fs_deorphan+0x148>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22df8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 22f28 <lfs_fs_deorphan+0x14c>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
   22dfc:	221c      	movs	r2, #28
   22dfe:	2100      	movs	r1, #0
   22e00:	a808      	add	r0, sp, #32
   22e02:	f00d fbda 	bl	305ba <memset>
   22e06:	2301      	movs	r3, #1
   22e08:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   22e0c:	930f      	str	r3, [sp, #60]	; 0x3c
        while (!lfs_pair_isnull(pdir.tail)) {
   22e0e:	a80e      	add	r0, sp, #56	; 0x38
   22e10:	f00c f816 	bl	2ee40 <lfs_pair_isnull>
   22e14:	b160      	cbz	r0, 22e30 <lfs_fs_deorphan+0x54>
   22e16:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    return lfs_fs_preporphans(lfs, -lfs_min(
   22e1a:	4620      	mov	r0, r4
   22e1c:	42a9      	cmp	r1, r5
   22e1e:	bf28      	it	cs
   22e20:	4629      	movcs	r1, r5
   22e22:	4249      	negs	r1, r1
   22e24:	b249      	sxtb	r1, r1
}
   22e26:	b021      	add	sp, #132	; 0x84
   22e28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return lfs_fs_preporphans(lfs, -lfs_min(
   22e2c:	f7fd be24 	b.w	20a78 <lfs_fs_preporphans>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
   22e30:	4620      	mov	r0, r4
   22e32:	aa0e      	add	r2, sp, #56	; 0x38
   22e34:	a910      	add	r1, sp, #64	; 0x40
   22e36:	f00c f907 	bl	2f048 <lfs_dir_fetch>
            if (err) {
   22e3a:	2800      	cmp	r0, #0
   22e3c:	d16e      	bne.n	22f1c <lfs_fs_deorphan+0x140>
            if (!pdir.split) {
   22e3e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   22e42:	2b00      	cmp	r3, #0
   22e44:	d15f      	bne.n	22f06 <lfs_fs_deorphan+0x12a>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
   22e46:	4620      	mov	r0, r4
   22e48:	aa18      	add	r2, sp, #96	; 0x60
   22e4a:	a90e      	add	r1, sp, #56	; 0x38
   22e4c:	f7fe fbfc 	bl	21648 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
   22e50:	2800      	cmp	r0, #0
   22e52:	da22      	bge.n	22e9a <lfs_fs_deorphan+0xbe>
   22e54:	1c83      	adds	r3, r0, #2
   22e56:	d161      	bne.n	22f1c <lfs_fs_deorphan+0x140>
                if (tag == LFS_ERR_NOENT && powerloss) {
   22e58:	2f00      	cmp	r7, #0
   22e5a:	d054      	beq.n	22f06 <lfs_fs_deorphan+0x12a>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
   22e5c:	4620      	mov	r0, r4
   22e5e:	f104 0248 	add.w	r2, r4, #72	; 0x48
   22e62:	a910      	add	r1, sp, #64	; 0x40
   22e64:	f7fd ff98 	bl	20d98 <lfs_dir_getgstate>
                    if (err) {
   22e68:	2800      	cmp	r0, #0
   22e6a:	d157      	bne.n	22f1c <lfs_fs_deorphan+0x140>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22e6c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   22e70:	4b2e      	ldr	r3, [pc, #184]	; (22f2c <lfs_fs_deorphan+0x150>)
   22e72:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
   22e76:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   22e7a:	9304      	str	r3, [sp, #16]
   22e7c:	ab16      	add	r3, sp, #88	; 0x58
   22e7e:	9305      	str	r3, [sp, #20]
   22e80:	2301      	movs	r3, #1
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22e82:	4620      	mov	r0, r4
   22e84:	aa04      	add	r2, sp, #16
   22e86:	a908      	add	r1, sp, #32
   22e88:	f7ff fe0a 	bl	22aa0 <lfs_dir_orphaningcommit>
                        if (state < 0) {
   22e8c:	2800      	cmp	r0, #0
   22e8e:	db45      	blt.n	22f1c <lfs_fs_deorphan+0x140>
                        found += 1;
   22e90:	3501      	adds	r5, #1
                        if (state == LFS_OK_ORPHANED) {
   22e92:	2803      	cmp	r0, #3
                        found += 1;
   22e94:	b26d      	sxtb	r5, r5
                        if (state == LFS_OK_ORPHANED) {
   22e96:	d1ba      	bne.n	22e0e <lfs_fs_deorphan+0x32>
   22e98:	e7b0      	b.n	22dfc <lfs_fs_deorphan+0x20>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
   22e9a:	ae02      	add	r6, sp, #8
   22e9c:	4603      	mov	r3, r0
   22e9e:	4642      	mov	r2, r8
   22ea0:	4620      	mov	r0, r4
   22ea2:	9600      	str	r6, [sp, #0]
   22ea4:	a918      	add	r1, sp, #96	; 0x60
   22ea6:	f00c f853 	bl	2ef50 <lfs_dir_get>
                    if (state < 0) {
   22eaa:	2800      	cmp	r0, #0
   22eac:	db36      	blt.n	22f1c <lfs_fs_deorphan+0x140>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   22eae:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
   22eb2:	9902      	ldr	r1, [sp, #8]
   22eb4:	4299      	cmp	r1, r3
   22eb6:	d102      	bne.n	22ebe <lfs_fs_deorphan+0xe2>
   22eb8:	9803      	ldr	r0, [sp, #12]
   22eba:	4290      	cmp	r0, r2
   22ebc:	d023      	beq.n	22f06 <lfs_fs_deorphan+0x12a>
   22ebe:	4291      	cmp	r1, r2
   22ec0:	d102      	bne.n	22ec8 <lfs_fs_deorphan+0xec>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
   22ec2:	9a03      	ldr	r2, [sp, #12]
   22ec4:	4293      	cmp	r3, r2
   22ec6:	d01e      	beq.n	22f06 <lfs_fs_deorphan+0x12a>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22ec8:	a908      	add	r1, sp, #32
   22eca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22ece:	f00b ffea 	bl	2eea6 <lfs_gstate_hasmovehere>
   22ed2:	b938      	cbnz	r0, 22ee4 <lfs_fs_deorphan+0x108>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22ed4:	2300      	movs	r3, #0
   22ed6:	9304      	str	r3, [sp, #16]
   22ed8:	2300      	movs	r3, #0
   22eda:	9607      	str	r6, [sp, #28]
   22edc:	e9cd 3905 	strd	r3, r9, [sp, #20]
   22ee0:	2302      	movs	r3, #2
   22ee2:	e7ce      	b.n	22e82 <lfs_fs_deorphan+0xa6>
                            moveid = lfs_tag_id(lfs->gstate.tag);
   22ee4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22ee6:	4b12      	ldr	r3, [pc, #72]	; (22f30 <lfs_fs_deorphan+0x154>)
    return (tag & 0x000ffc00) >> 10;
   22ee8:	f3c1 2289 	ubfx	r2, r1, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22eec:	400b      	ands	r3, r1
   22eee:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22ef0:	2300      	movs	r3, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22ef2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22ef6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   22efa:	429a      	cmp	r2, r3
   22efc:	d0ea      	beq.n	22ed4 <lfs_fs_deorphan+0xf8>
   22efe:	4b0d      	ldr	r3, [pc, #52]	; (22f34 <lfs_fs_deorphan+0x158>)
   22f00:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   22f04:	e7e7      	b.n	22ed6 <lfs_fs_deorphan+0xfa>
            pdir = dir;
   22f06:	ae08      	add	r6, sp, #32
   22f08:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   22f0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   22f10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22f12:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   22f16:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   22f1a:	e778      	b.n	22e0e <lfs_fs_deorphan+0x32>
}
   22f1c:	b021      	add	sp, #132	; 0x84
   22f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22f22:	bf00      	nop
   22f24:	7ffffc00 	.word	0x7ffffc00
   22f28:	600ffc08 	.word	0x600ffc08
   22f2c:	000ffc08 	.word	0x000ffc08
   22f30:	800003ff 	.word	0x800003ff
   22f34:	4ff00000 	.word	0x4ff00000

00022f38 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f38:	b510      	push	{r4, lr}
    return (tag & 0x70000000) >> 20;
   22f3a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f3c:	4604      	mov	r4, r0
    return (tag & 0x70000000) >> 20;
   22f3e:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   22f40:	f413 6fe0 	tst.w	r3, #1792	; 0x700
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f44:	b08a      	sub	sp, #40	; 0x28
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   22f46:	d106      	bne.n	22f56 <lfs_fs_forceconsistency+0x1e>
    err = lfs_fs_deorphan(lfs, true);
   22f48:	2101      	movs	r1, #1
   22f4a:	4620      	mov	r0, r4
}
   22f4c:	b00a      	add	sp, #40	; 0x28
   22f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = lfs_fs_deorphan(lfs, true);
   22f52:	f7ff bf43 	b.w	22ddc <lfs_fs_deorphan>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   22f56:	f100 0240 	add.w	r2, r0, #64	; 0x40
   22f5a:	a902      	add	r1, sp, #8
   22f5c:	f00c f874 	bl	2f048 <lfs_dir_fetch>
    if (err) {
   22f60:	b9a8      	cbnz	r0, 22f8e <lfs_fs_forceconsistency+0x56>
    return (tag & 0x000ffc00) >> 10;
   22f62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f64:	6b21      	ldr	r1, [r4, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
   22f66:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f6a:	4b0a      	ldr	r3, [pc, #40]	; (22f94 <lfs_fs_forceconsistency+0x5c>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22f6c:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f6e:	400b      	ands	r3, r1
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22f70:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   22f74:	4b08      	ldr	r3, [pc, #32]	; (22f98 <lfs_fs_forceconsistency+0x60>)
   22f76:	a902      	add	r1, sp, #8
   22f78:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   22f7c:	e9cd 3000 	strd	r3, r0, [sp]
   22f80:	466a      	mov	r2, sp
   22f82:	2301      	movs	r3, #1
   22f84:	4620      	mov	r0, r4
   22f86:	f00c fc1c 	bl	2f7c2 <lfs_dir_commit>
    if (err) {
   22f8a:	2800      	cmp	r0, #0
   22f8c:	d0dc      	beq.n	22f48 <lfs_fs_forceconsistency+0x10>
}
   22f8e:	b00a      	add	sp, #40	; 0x28
   22f90:	bd10      	pop	{r4, pc}
   22f92:	bf00      	nop
   22f94:	800003ff 	.word	0x800003ff
   22f98:	4ff00000 	.word	0x4ff00000

00022f9c <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   22f9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22f9e:	4614      	mov	r4, r2
   22fa0:	460e      	mov	r6, r1
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   22fa2:	f100 0248 	add.w	r2, r0, #72	; 0x48
   22fa6:	4621      	mov	r1, r4
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   22fa8:	4605      	mov	r5, r0
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   22faa:	f7fd fef5 	bl	20d98 <lfs_dir_getgstate>
    if (err) {
   22fae:	b970      	cbnz	r0, 22fce <lfs_dir_drop+0x32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   22fb0:	7de2      	ldrb	r2, [r4, #23]
   22fb2:	4b08      	ldr	r3, [pc, #32]	; (22fd4 <lfs_dir_drop+0x38>)
   22fb4:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
   22fb8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   22fbc:	9300      	str	r3, [sp, #0]
    lfs_pair_tole32(tail->tail);
   22fbe:	3418      	adds	r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   22fc0:	2301      	movs	r3, #1
   22fc2:	466a      	mov	r2, sp
   22fc4:	4631      	mov	r1, r6
   22fc6:	4628      	mov	r0, r5
   22fc8:	9401      	str	r4, [sp, #4]
   22fca:	f00c fbfa 	bl	2f7c2 <lfs_dir_commit>
}
   22fce:	b002      	add	sp, #8
   22fd0:	bd70      	pop	{r4, r5, r6, pc}
   22fd2:	bf00      	nop
   22fd4:	000ffc08 	.word	0x000ffc08

00022fd8 <lfs_file_rawopencfg>:
        const struct lfs_file_config *cfg) {
   22fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   22fdc:	f013 0f02 	tst.w	r3, #2
        const struct lfs_file_config *cfg) {
   22fe0:	b08a      	sub	sp, #40	; 0x28
   22fe2:	4606      	mov	r6, r0
   22fe4:	460d      	mov	r5, r1
   22fe6:	4699      	mov	r9, r3
   22fe8:	9203      	str	r2, [sp, #12]
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   22fea:	d136      	bne.n	2305a <lfs_file_rawopencfg+0x82>
    file->pos = 0;
   22fec:	f04f 0800 	mov.w	r8, #0
    file->cfg = cfg;
   22ff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   22ff2:	f105 0708 	add.w	r7, r5, #8
    file->cfg = cfg;
   22ff6:	652b      	str	r3, [r5, #80]	; 0x50
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   22ff8:	4639      	mov	r1, r7
   22ffa:	4630      	mov	r0, r6
    file->flags = flags;
   22ffc:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
    file->pos = 0;
   23000:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
    file->off = 0;
   23004:	f8c5 803c 	str.w	r8, [r5, #60]	; 0x3c
    file->cache.buffer = NULL;
   23008:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   2300c:	1d2b      	adds	r3, r5, #4
   2300e:	aa03      	add	r2, sp, #12
   23010:	f7fe fb58 	bl	216c4 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
   23014:	1e04      	subs	r4, r0, #0
   23016:	da29      	bge.n	2306c <lfs_file_rawopencfg+0x94>
   23018:	1ca3      	adds	r3, r4, #2
   2301a:	d115      	bne.n	23048 <lfs_file_rawopencfg+0x70>
   2301c:	f240 33ff 	movw	r3, #1023	; 0x3ff
   23020:	88aa      	ldrh	r2, [r5, #4]
   23022:	429a      	cmp	r2, r3
   23024:	d010      	beq.n	23048 <lfs_file_rawopencfg+0x70>
    file->type = LFS_TYPE_REG;
   23026:	2301      	movs	r3, #1
   23028:	71ab      	strb	r3, [r5, #6]
    mlist->next = lfs->mlist;
   2302a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if (!(flags & LFS_O_CREAT)) {
   2302c:	f419 7f80 	tst.w	r9, #256	; 0x100
    mlist->next = lfs->mlist;
   23030:	602b      	str	r3, [r5, #0]
    lfs->mlist = mlist;
   23032:	62b5      	str	r5, [r6, #40]	; 0x28
        if (!(flags & LFS_O_CREAT)) {
   23034:	d008      	beq.n	23048 <lfs_file_rawopencfg+0x70>
        lfs_size_t nlen = strlen(path);
   23036:	9c03      	ldr	r4, [sp, #12]
   23038:	4620      	mov	r0, r4
   2303a:	f7e6 f9a4 	bl	9386 <strlen>
        if (nlen > lfs->name_max) {
   2303e:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   23040:	4283      	cmp	r3, r0
   23042:	d21e      	bcs.n	23082 <lfs_file_rawopencfg+0xaa>
            err = LFS_ERR_NAMETOOLONG;
   23044:	f06f 0423 	mvn.w	r4, #35	; 0x23
    file->flags |= LFS_F_ERRED;
   23048:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
   2304a:	4629      	mov	r1, r5
    file->flags |= LFS_F_ERRED;
   2304c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    lfs_file_rawclose(lfs, file);
   23050:	4630      	mov	r0, r6
    file->flags |= LFS_F_ERRED;
   23052:	632b      	str	r3, [r5, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
   23054:	f00c fc0d 	bl	2f872 <lfs_file_rawclose>
    return err;
   23058:	e004      	b.n	23064 <lfs_file_rawopencfg+0x8c>
        int err = lfs_fs_forceconsistency(lfs);
   2305a:	f7ff ff6d 	bl	22f38 <lfs_fs_forceconsistency>
        if (err) {
   2305e:	4604      	mov	r4, r0
   23060:	2800      	cmp	r0, #0
   23062:	d0c3      	beq.n	22fec <lfs_file_rawopencfg+0x14>
}
   23064:	4620      	mov	r0, r4
   23066:	b00a      	add	sp, #40	; 0x28
   23068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    file->type = LFS_TYPE_REG;
   2306c:	2301      	movs	r3, #1
   2306e:	71ab      	strb	r3, [r5, #6]
    mlist->next = lfs->mlist;
   23070:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    } else if (flags & LFS_O_EXCL) {
   23072:	f419 7f00 	tst.w	r9, #512	; 0x200
    mlist->next = lfs->mlist;
   23076:	602b      	str	r3, [r5, #0]
    lfs->mlist = mlist;
   23078:	62b5      	str	r5, [r6, #40]	; 0x28
    } else if (flags & LFS_O_EXCL) {
   2307a:	d03b      	beq.n	230f4 <lfs_file_rawopencfg+0x11c>
        err = LFS_ERR_EXIST;
   2307c:	f06f 0410 	mvn.w	r4, #16
   23080:	e7e2      	b.n	23048 <lfs_file_rawopencfg+0x70>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   23082:	88ab      	ldrh	r3, [r5, #4]
   23084:	4a5f      	ldr	r2, [pc, #380]	; (23204 <lfs_file_rawopencfg+0x22c>)
   23086:	f8df 9180 	ldr.w	r9, [pc, #384]	; 23208 <lfs_file_rawopencfg+0x230>
   2308a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   2308e:	ea42 2283 	orr.w	r2, r2, r3, lsl #10
   23092:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   23096:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
   2309a:	e9cd 0406 	strd	r0, r4, [sp, #24]
   2309e:	e9cd 2804 	strd	r2, r8, [sp, #16]
   230a2:	e9cd 3808 	strd	r3, r8, [sp, #32]
   230a6:	4639      	mov	r1, r7
   230a8:	2303      	movs	r3, #3
   230aa:	4630      	mov	r0, r6
   230ac:	aa04      	add	r2, sp, #16
   230ae:	f00c fb88 	bl	2f7c2 <lfs_dir_commit>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
   230b2:	f110 0f1c 	cmn.w	r0, #28
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   230b6:	4604      	mov	r4, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
   230b8:	d0c4      	beq.n	23044 <lfs_file_rawopencfg+0x6c>
        if (err) {
   230ba:	2800      	cmp	r0, #0
   230bc:	d1c4      	bne.n	23048 <lfs_file_rawopencfg+0x70>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
   230be:	464c      	mov	r4, r9
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   230c0:	f04f 0800 	mov.w	r8, #0
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   230c4:	f04f 090c 	mov.w	r9, #12
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   230c8:	f8df a140 	ldr.w	sl, [pc, #320]	; 2320c <lfs_file_rawopencfg+0x234>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   230cc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   230ce:	689a      	ldr	r2, [r3, #8]
   230d0:	4542      	cmp	r2, r8
   230d2:	d830      	bhi.n	23136 <lfs_file_rawopencfg+0x15e>
    if (file->cfg->buffer) {
   230d4:	681b      	ldr	r3, [r3, #0]
   230d6:	2b00      	cmp	r3, #0
   230d8:	d05d      	beq.n	23196 <lfs_file_rawopencfg+0x1be>
        file->cache.buffer = file->cfg->buffer;
   230da:	64eb      	str	r3, [r5, #76]	; 0x4c
    lfs_cache_zero(lfs, &file->cache);
   230dc:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   230de:	f105 0140 	add.w	r1, r5, #64	; 0x40
   230e2:	f00c f886 	bl	2f1f2 <lfs_cache_zero.isra.0>
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   230e6:	f240 2301 	movw	r3, #513	; 0x201
   230ea:	ebb3 5f14 	cmp.w	r3, r4, lsr #20
   230ee:	d05c      	beq.n	231aa <lfs_file_rawopencfg+0x1d2>
    return 0;
   230f0:	2400      	movs	r4, #0
   230f2:	e7b7      	b.n	23064 <lfs_file_rawopencfg+0x8c>
    return (tag & 0x7ff00000) >> 20;
   230f4:	0d24      	lsrs	r4, r4, #20
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
   230f6:	2c01      	cmp	r4, #1
   230f8:	d17e      	bne.n	231f8 <lfs_file_rawopencfg+0x220>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   230fa:	88ab      	ldrh	r3, [r5, #4]
    } else if (flags & LFS_O_TRUNC) {
   230fc:	f419 6f80 	tst.w	r9, #1024	; 0x400
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   23100:	ea4f 2383 	mov.w	r3, r3, lsl #10
    } else if (flags & LFS_O_TRUNC) {
   23104:	d008      	beq.n	23118 <lfs_file_rawopencfg+0x140>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   23106:	f043 5400 	orr.w	r4, r3, #536870912	; 0x20000000
        file->flags |= LFS_F_DIRTY;
   2310a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   2310c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
   23110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   23114:	632b      	str	r3, [r5, #48]	; 0x30
   23116:	e7d3      	b.n	230c0 <lfs_file_rawopencfg+0xe8>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
   23118:	f105 0228 	add.w	r2, r5, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
   2311c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   23120:	9200      	str	r2, [sp, #0]
   23122:	4639      	mov	r1, r7
   23124:	4630      	mov	r0, r6
   23126:	4a3a      	ldr	r2, [pc, #232]	; (23210 <lfs_file_rawopencfg+0x238>)
   23128:	f043 0308 	orr.w	r3, r3, #8
   2312c:	f00b ff10 	bl	2ef50 <lfs_dir_get>
        if (tag < 0) {
   23130:	1e04      	subs	r4, r0, #0
   23132:	dac5      	bge.n	230c0 <lfs_file_rawopencfg+0xe8>
   23134:	e788      	b.n	23048 <lfs_file_rawopencfg+0x70>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
   23136:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   23138:	07d0      	lsls	r0, r2, #31
   2313a:	d406      	bmi.n	2314a <lfs_file_rawopencfg+0x172>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   2313c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   2313e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23140:	0799      	lsls	r1, r3, #30
   23142:	d41d      	bmi.n	23180 <lfs_file_rawopencfg+0x1a8>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   23144:	f108 0801 	add.w	r8, r8, #1
   23148:	e7c0      	b.n	230cc <lfs_file_rawopencfg+0xf4>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   2314a:	fb09 f208 	mul.w	r2, r9, r8
   2314e:	6858      	ldr	r0, [r3, #4]
   23150:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   23154:	1881      	adds	r1, r0, r2
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   23156:	688b      	ldr	r3, [r1, #8]
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   23158:	5c82      	ldrb	r2, [r0, r2]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2315a:	6849      	ldr	r1, [r1, #4]
   2315c:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   23160:	f502 7240 	add.w	r2, r2, #768	; 0x300
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   23164:	9100      	str	r1, [sp, #0]
   23166:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   2316a:	4639      	mov	r1, r7
   2316c:	4652      	mov	r2, sl
   2316e:	4630      	mov	r0, r6
   23170:	f00b feee 	bl	2ef50 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
   23174:	2800      	cmp	r0, #0
   23176:	dae1      	bge.n	2313c <lfs_file_rawopencfg+0x164>
   23178:	1c83      	adds	r3, r0, #2
   2317a:	d0df      	beq.n	2313c <lfs_file_rawopencfg+0x164>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2317c:	4604      	mov	r4, r0
   2317e:	e763      	b.n	23048 <lfs_file_rawopencfg+0x70>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   23180:	6852      	ldr	r2, [r2, #4]
   23182:	fb09 2208 	mla	r2, r9, r8, r2
   23186:	6891      	ldr	r1, [r2, #8]
   23188:	6f72      	ldr	r2, [r6, #116]	; 0x74
   2318a:	4291      	cmp	r1, r2
   2318c:	d837      	bhi.n	231fe <lfs_file_rawopencfg+0x226>
            file->flags |= LFS_F_DIRTY;
   2318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   23192:	632b      	str	r3, [r5, #48]	; 0x30
   23194:	e7d6      	b.n	23144 <lfs_file_rawopencfg+0x16c>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
   23196:	6eb3      	ldr	r3, [r6, #104]	; 0x68
	return malloc(size);
   23198:	6a98      	ldr	r0, [r3, #40]	; 0x28
   2319a:	f005 fa77 	bl	2868c <malloc>
   2319e:	64e8      	str	r0, [r5, #76]	; 0x4c
        if (!file->cache.buffer) {
   231a0:	2800      	cmp	r0, #0
   231a2:	d19b      	bne.n	230dc <lfs_file_rawopencfg+0x104>
            err = LFS_ERR_NOMEM;
   231a4:	f06f 040b 	mvn.w	r4, #11
   231a8:	e74e      	b.n	23048 <lfs_file_rawopencfg+0x70>
        file->flags |= LFS_F_INLINE;
   231aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        file->ctz.head = LFS_BLOCK_INLINE;
   231ac:	f06f 0201 	mvn.w	r2, #1
        file->flags |= LFS_F_INLINE;
   231b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   231b4:	632b      	str	r3, [r5, #48]	; 0x30
        file->cache.off = 0;
   231b6:	2300      	movs	r3, #0
   231b8:	f3c4 0409 	ubfx	r4, r4, #0, #10
        file->ctz.head = LFS_BLOCK_INLINE;
   231bc:	62aa      	str	r2, [r5, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
   231be:	62ec      	str	r4, [r5, #44]	; 0x2c
        file->cache.block = file->ctz.head;
   231c0:	642a      	str	r2, [r5, #64]	; 0x40
        file->cache.off = 0;
   231c2:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
   231c4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   231c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   231c8:	64aa      	str	r2, [r5, #72]	; 0x48
        if (file->ctz.size > 0) {
   231ca:	2c00      	cmp	r4, #0
   231cc:	d090      	beq.n	230f0 <lfs_file_rawopencfg+0x118>
	return (a < b) ? a : b;
   231ce:	f240 33fe 	movw	r3, #1022	; 0x3fe
   231d2:	4293      	cmp	r3, r2
   231d4:	bf28      	it	cs
   231d6:	4613      	movcs	r3, r2
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   231d8:	88a9      	ldrh	r1, [r5, #4]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   231da:	6cea      	ldr	r2, [r5, #76]	; 0x4c
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   231dc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   231e0:	9200      	str	r2, [sp, #0]
   231e2:	4639      	mov	r1, r7
   231e4:	4630      	mov	r0, r6
   231e6:	4a0a      	ldr	r2, [pc, #40]	; (23210 <lfs_file_rawopencfg+0x238>)
   231e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   231ec:	f00b feb0 	bl	2ef50 <lfs_dir_get>
            if (res < 0) {
   231f0:	1e04      	subs	r4, r0, #0
   231f2:	f6bf af7d 	bge.w	230f0 <lfs_file_rawopencfg+0x118>
   231f6:	e727      	b.n	23048 <lfs_file_rawopencfg+0x70>
        err = LFS_ERR_ISDIR;
   231f8:	f06f 0414 	mvn.w	r4, #20
   231fc:	e724      	b.n	23048 <lfs_file_rawopencfg+0x70>
                err = LFS_ERR_NOSPC;
   231fe:	f06f 041b 	mvn.w	r4, #27
   23202:	e721      	b.n	23048 <lfs_file_rawopencfg+0x70>
   23204:	40100000 	.word	0x40100000
   23208:	20100000 	.word	0x20100000
   2320c:	7ffffc00 	.word	0x7ffffc00
   23210:	700ffc00 	.word	0x700ffc00

00023214 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
   23214:	b530      	push	{r4, r5, lr}
   23216:	b097      	sub	sp, #92	; 0x5c
   23218:	4605      	mov	r5, r0
        err = lfs_init(lfs, cfg);
   2321a:	f7fe fc41 	bl	21aa0 <lfs_init>
        if (err) {
   2321e:	4604      	mov	r4, r0
   23220:	2800      	cmp	r0, #0
   23222:	d14f      	bne.n	232c4 <lfs_format+0xb0>
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
   23224:	6eab      	ldr	r3, [r5, #104]	; 0x68
__ssp_bos_icheck3(memset, void *, int)
   23226:	4601      	mov	r1, r0
   23228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2322a:	6e68      	ldr	r0, [r5, #100]	; 0x64
   2322c:	f00d f9c5 	bl	305ba <memset>
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   23230:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs->free.off = 0;
   23232:	656c      	str	r4, [r5, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   23234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23236:	6a19      	ldr	r1, [r3, #32]
   23238:	00d2      	lsls	r2, r2, #3
   2323a:	428a      	cmp	r2, r1
   2323c:	bf94      	ite	ls
   2323e:	65aa      	strls	r2, [r5, #88]	; 0x58
   23240:	65a9      	strhi	r1, [r5, #88]	; 0x58
        lfs->free.i = 0;
   23242:	65ec      	str	r4, [r5, #92]	; 0x5c
    lfs->free.ack = lfs->cfg->block_count;
   23244:	6a1b      	ldr	r3, [r3, #32]
        err = lfs_dir_alloc(lfs, &root);
   23246:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   23248:	662b      	str	r3, [r5, #96]	; 0x60
        err = lfs_dir_alloc(lfs, &root);
   2324a:	a90e      	add	r1, sp, #56	; 0x38
   2324c:	f00c f856 	bl	2f2fc <lfs_dir_alloc>
        if (err) {
   23250:	4604      	mov	r4, r0
   23252:	2800      	cmp	r0, #0
   23254:	d133      	bne.n	232be <lfs_format+0xaa>
        lfs_superblock_t superblock = {
   23256:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   2325a:	9302      	str	r3, [sp, #8]
            .block_size  = lfs->cfg->block_size,
   2325c:	6eab      	ldr	r3, [r5, #104]	; 0x68
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   2325e:	a90e      	add	r1, sp, #56	; 0x38
        lfs_superblock_t superblock = {
   23260:	69da      	ldr	r2, [r3, #28]
   23262:	6a1b      	ldr	r3, [r3, #32]
   23264:	9203      	str	r2, [sp, #12]
   23266:	9304      	str	r3, [sp, #16]
   23268:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   2326a:	aa08      	add	r2, sp, #32
        lfs_superblock_t superblock = {
   2326c:	9305      	str	r3, [sp, #20]
   2326e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   23270:	9306      	str	r3, [sp, #24]
   23272:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   23274:	9307      	str	r3, [sp, #28]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   23276:	4b15      	ldr	r3, [pc, #84]	; (232cc <lfs_format+0xb8>)
   23278:	e9cd 3008 	strd	r3, r0, [sp, #32]
   2327c:	4b14      	ldr	r3, [pc, #80]	; (232d0 <lfs_format+0xbc>)
   2327e:	4628      	mov	r0, r5
   23280:	930a      	str	r3, [sp, #40]	; 0x28
   23282:	4b14      	ldr	r3, [pc, #80]	; (232d4 <lfs_format+0xc0>)
   23284:	930b      	str	r3, [sp, #44]	; 0x2c
   23286:	4b14      	ldr	r3, [pc, #80]	; (232d8 <lfs_format+0xc4>)
   23288:	930c      	str	r3, [sp, #48]	; 0x30
   2328a:	ab02      	add	r3, sp, #8
   2328c:	930d      	str	r3, [sp, #52]	; 0x34
   2328e:	2303      	movs	r3, #3
   23290:	f00c fa97 	bl	2f7c2 <lfs_dir_commit>
        if (err) {
   23294:	4604      	mov	r4, r0
   23296:	b990      	cbnz	r0, 232be <lfs_format+0xaa>
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   23298:	4603      	mov	r3, r0
   2329a:	4602      	mov	r2, r0
        root.erased = false;
   2329c:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   232a0:	a90e      	add	r1, sp, #56	; 0x38
   232a2:	4628      	mov	r0, r5
   232a4:	f00c fa8d 	bl	2f7c2 <lfs_dir_commit>
        if (err) {
   232a8:	4604      	mov	r4, r0
   232aa:	b940      	cbnz	r0, 232be <lfs_format+0xaa>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
   232ac:	2301      	movs	r3, #1
   232ae:	9000      	str	r0, [sp, #0]
   232b0:	466a      	mov	r2, sp
   232b2:	4628      	mov	r0, r5
   232b4:	a90e      	add	r1, sp, #56	; 0x38
   232b6:	9301      	str	r3, [sp, #4]
   232b8:	f00b fec6 	bl	2f048 <lfs_dir_fetch>
   232bc:	4604      	mov	r4, r0
    lfs_deinit(lfs);
   232be:	4628      	mov	r0, r5
   232c0:	f00b fe30 	bl	2ef24 <lfs_deinit>
    err = lfs_rawformat(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
   232c4:	4620      	mov	r0, r4
   232c6:	b017      	add	sp, #92	; 0x5c
   232c8:	bd30      	pop	{r4, r5, pc}
   232ca:	bf00      	nop
   232cc:	40100000 	.word	0x40100000
   232d0:	0ff00008 	.word	0x0ff00008
   232d4:	0003681b 	.word	0x0003681b
   232d8:	20100018 	.word	0x20100018

000232dc <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
   232dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   232e0:	b096      	sub	sp, #88	; 0x58
   232e2:	af04      	add	r7, sp, #16
   232e4:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
   232e6:	f7fe fbdb 	bl	21aa0 <lfs_init>
    if (err) {
   232ea:	4605      	mov	r5, r0
   232ec:	bb90      	cbnz	r0, 23354 <lfs_mount+0x78>
    lfs_mdir_t dir = {.tail = {0, 1}};
   232ee:	4601      	mov	r1, r0
   232f0:	221c      	movs	r2, #28
   232f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
   232f6:	f00d f960 	bl	305ba <memset>
   232fa:	2301      	movs	r3, #1
    lfs_block_t cycle = 0;
   232fc:	462e      	mov	r6, r5
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   232fe:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 234d8 <lfs_mount+0x1fc>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   23302:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 234dc <lfs_mount+0x200>
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   23306:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 234e0 <lfs_mount+0x204>
    lfs_mdir_t dir = {.tail = {0, 1}};
   2330a:	647b      	str	r3, [r7, #68]	; 0x44
    while (!lfs_pair_isnull(dir.tail)) {
   2330c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   23310:	f00b fd96 	bl	2ee40 <lfs_pair_isnull>
   23314:	b318      	cbz	r0, 2335e <lfs_mount+0x82>
    if (lfs_pair_isnull(lfs->root)) {
   23316:	f104 0020 	add.w	r0, r4, #32
   2331a:	f00b fd91 	bl	2ee40 <lfs_pair_isnull>
   2331e:	4603      	mov	r3, r0
   23320:	2800      	cmp	r0, #0
   23322:	f040 80d5 	bne.w	234d0 <lfs_mount+0x1f4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   23326:	6b22      	ldr	r2, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   23328:	f104 063c 	add.w	r6, r4, #60	; 0x3c
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   2332c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   23330:	6322      	str	r2, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   23332:	f104 0230 	add.w	r2, r4, #48	; 0x30
   23336:	ca07      	ldmia	r2, {r0, r1, r2}
   23338:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
   2333c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   2333e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   23340:	6a08      	ldr	r0, [r1, #32]
    lfs->free.i = 0;
   23342:	65e3      	str	r3, [r4, #92]	; 0x5c
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
   23344:	fbb2 f6f0 	udiv	r6, r2, r0
   23348:	fb00 2216 	mls	r2, r0, r6, r2
    lfs->free.size = 0;
   2334c:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    lfs->free.ack = lfs->cfg->block_count;
   23350:	6a0b      	ldr	r3, [r1, #32]
   23352:	6623      	str	r3, [r4, #96]	; 0x60
    err = lfs_rawmount(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
   23354:	4628      	mov	r0, r5
   23356:	3748      	adds	r7, #72	; 0x48
   23358:	46bd      	mov	sp, r7
   2335a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (cycle >= lfs->cfg->block_count/2) {
   2335e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   23360:	6a1b      	ldr	r3, [r3, #32]
   23362:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
   23366:	f080 80b0 	bcs.w	234ca <lfs_mount+0x1ee>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   2336a:	2308      	movs	r3, #8
   2336c:	60fb      	str	r3, [r7, #12]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   2336e:	1d3b      	adds	r3, r7, #4
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   23370:	e9c7 4801 	strd	r4, r8, [r7, #4]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   23374:	e9cd 9302 	strd	r9, r3, [sp, #8]
   23378:	4b5a      	ldr	r3, [pc, #360]	; (234e4 <lfs_mount+0x208>)
   2337a:	9001      	str	r0, [sp, #4]
   2337c:	9300      	str	r3, [sp, #0]
   2337e:	4620      	mov	r0, r4
   23380:	4b59      	ldr	r3, [pc, #356]	; (234e8 <lfs_mount+0x20c>)
   23382:	f107 0240 	add.w	r2, r7, #64	; 0x40
   23386:	f107 0128 	add.w	r1, r7, #40	; 0x28
   2338a:	f7fd ff23 	bl	211d4 <lfs_dir_fetchmatch>
        if (tag < 0) {
   2338e:	2800      	cmp	r0, #0
        cycle += 1;
   23390:	f106 0601 	add.w	r6, r6, #1
        if (tag < 0) {
   23394:	db49      	blt.n	2342a <lfs_mount+0x14e>
        if (tag && !lfs_tag_isdelete(tag)) {
   23396:	f000 808d 	beq.w	234b4 <lfs_mount+0x1d8>
    return ((int32_t)(tag << 22) >> 22) == -1;
   2339a:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
   2339e:	3001      	adds	r0, #1
   233a0:	f000 8088 	beq.w	234b4 <lfs_mount+0x1d8>
            lfs->root[0] = dir.pair[0];
   233a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233a6:	4620      	mov	r0, r4
            lfs->root[0] = dir.pair[0];
   233a8:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
   233aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233ac:	4a4e      	ldr	r2, [pc, #312]	; (234e8 <lfs_mount+0x20c>)
            lfs->root[1] = dir.pair[1];
   233ae:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233b0:	f107 0310 	add.w	r3, r7, #16
   233b4:	9300      	str	r3, [sp, #0]
   233b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   233ba:	4653      	mov	r3, sl
   233bc:	f00b fdc8 	bl	2ef50 <lfs_dir_get>
            if (tag < 0) {
   233c0:	2800      	cmp	r0, #0
   233c2:	db32      	blt.n	2342a <lfs_mount+0x14e>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
   233c4:	693b      	ldr	r3, [r7, #16]
   233c6:	0c19      	lsrs	r1, r3, #16
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   233c8:	2902      	cmp	r1, #2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
   233ca:	b29a      	uxth	r2, r3
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   233cc:	d100      	bne.n	233d0 <lfs_mount+0xf4>
   233ce:	b16a      	cbz	r2, 233ec <lfs_mount+0x110>
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
   233d0:	466d      	mov	r5, sp
   233d2:	b08c      	sub	sp, #48	; 0x30
   233d4:	aa04      	add	r2, sp, #16
   233d6:	4845      	ldr	r0, [pc, #276]	; (234ec <lfs_mount+0x210>)
   233d8:	b29b      	uxth	r3, r3
   233da:	6150      	str	r0, [r2, #20]
   233dc:	4844      	ldr	r0, [pc, #272]	; (234f0 <lfs_mount+0x214>)
   233de:	6190      	str	r0, [r2, #24]
   233e0:	f241 003b 	movw	r0, #4155	; 0x103b
   233e4:	e9c2 0107 	strd	r0, r1, [r2, #28]
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
   233e8:	6253      	str	r3, [r2, #36]	; 0x24
   233ea:	e010      	b.n	2340e <lfs_mount+0x132>
            if (superblock.name_max) {
   233ec:	69fb      	ldr	r3, [r7, #28]
   233ee:	b313      	cbz	r3, 23436 <lfs_mount+0x15a>
                if (superblock.name_max > lfs->name_max) {
   233f0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   233f2:	428b      	cmp	r3, r1
   233f4:	d91e      	bls.n	23434 <lfs_mount+0x158>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
   233f6:	466d      	mov	r5, sp
   233f8:	b08c      	sub	sp, #48	; 0x30
   233fa:	aa04      	add	r2, sp, #16
   233fc:	483d      	ldr	r0, [pc, #244]	; (234f4 <lfs_mount+0x218>)
   233fe:	6150      	str	r0, [r2, #20]
   23400:	483b      	ldr	r0, [pc, #236]	; (234f0 <lfs_mount+0x214>)
   23402:	6190      	str	r0, [r2, #24]
   23404:	f241 0044 	movw	r0, #4164	; 0x1044
   23408:	e9c2 0307 	strd	r0, r3, [r2, #28]
   2340c:	6251      	str	r1, [r2, #36]	; 0x24
   2340e:	f44f 7300 	mov.w	r3, #512	; 0x200
   23412:	8513      	strh	r3, [r2, #40]	; 0x28
   23414:	4b38      	ldr	r3, [pc, #224]	; (234f8 <lfs_mount+0x21c>)
   23416:	4839      	ldr	r0, [pc, #228]	; (234fc <lfs_mount+0x220>)
   23418:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   2341c:	f842 3f10 	str.w	r3, [r2, #16]!
   23420:	f00b fe0f 	bl	2f042 <z_log_msg_static_create.constprop.0>
                err = LFS_ERR_INVAL;
   23424:	f06f 0015 	mvn.w	r0, #21
   23428:	46ad      	mov	sp, r5
            goto cleanup;
   2342a:	4605      	mov	r5, r0
    lfs_rawunmount(lfs);
   2342c:	4620      	mov	r0, r4
   2342e:	f00c fa39 	bl	2f8a4 <lfs_unmount>
    return err;
   23432:	e78f      	b.n	23354 <lfs_mount+0x78>
                lfs->name_max = superblock.name_max;
   23434:	66e3      	str	r3, [r4, #108]	; 0x6c
            if (superblock.file_max) {
   23436:	6a3b      	ldr	r3, [r7, #32]
   23438:	b16b      	cbz	r3, 23456 <lfs_mount+0x17a>
                if (superblock.file_max > lfs->file_max) {
   2343a:	6f21      	ldr	r1, [r4, #112]	; 0x70
   2343c:	428b      	cmp	r3, r1
   2343e:	d909      	bls.n	23454 <lfs_mount+0x178>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
   23440:	466d      	mov	r5, sp
   23442:	b08c      	sub	sp, #48	; 0x30
   23444:	aa04      	add	r2, sp, #16
   23446:	482e      	ldr	r0, [pc, #184]	; (23500 <lfs_mount+0x224>)
   23448:	6150      	str	r0, [r2, #20]
   2344a:	4829      	ldr	r0, [pc, #164]	; (234f0 <lfs_mount+0x214>)
   2344c:	6190      	str	r0, [r2, #24]
   2344e:	f241 004f 	movw	r0, #4175	; 0x104f
   23452:	e7d9      	b.n	23408 <lfs_mount+0x12c>
                lfs->file_max = superblock.file_max;
   23454:	6723      	str	r3, [r4, #112]	; 0x70
            if (superblock.attr_max) {
   23456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23458:	b16b      	cbz	r3, 23476 <lfs_mount+0x19a>
                if (superblock.attr_max > lfs->attr_max) {
   2345a:	6f61      	ldr	r1, [r4, #116]	; 0x74
   2345c:	428b      	cmp	r3, r1
   2345e:	d909      	bls.n	23474 <lfs_mount+0x198>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
   23460:	466d      	mov	r5, sp
   23462:	b08c      	sub	sp, #48	; 0x30
   23464:	aa04      	add	r2, sp, #16
   23466:	4827      	ldr	r0, [pc, #156]	; (23504 <lfs_mount+0x228>)
   23468:	6150      	str	r0, [r2, #20]
   2346a:	4821      	ldr	r0, [pc, #132]	; (234f0 <lfs_mount+0x214>)
   2346c:	6190      	str	r0, [r2, #24]
   2346e:	f241 005a 	movw	r0, #4186	; 0x105a
   23472:	e7c9      	b.n	23408 <lfs_mount+0x12c>
                lfs->attr_max = superblock.attr_max;
   23474:	6763      	str	r3, [r4, #116]	; 0x74
            if (superblock.block_count != lfs->cfg->block_count) {
   23476:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   23478:	69bb      	ldr	r3, [r7, #24]
   2347a:	6a11      	ldr	r1, [r2, #32]
   2347c:	428b      	cmp	r3, r1
   2347e:	d009      	beq.n	23494 <lfs_mount+0x1b8>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
   23480:	466d      	mov	r5, sp
   23482:	b08c      	sub	sp, #48	; 0x30
   23484:	aa04      	add	r2, sp, #16
   23486:	4820      	ldr	r0, [pc, #128]	; (23508 <lfs_mount+0x22c>)
   23488:	6150      	str	r0, [r2, #20]
   2348a:	4819      	ldr	r0, [pc, #100]	; (234f0 <lfs_mount+0x214>)
   2348c:	6190      	str	r0, [r2, #24]
   2348e:	f241 0064 	movw	r0, #4196	; 0x1064
   23492:	e7b9      	b.n	23408 <lfs_mount+0x12c>
            if (superblock.block_size != lfs->cfg->block_size) {
   23494:	69d2      	ldr	r2, [r2, #28]
   23496:	6979      	ldr	r1, [r7, #20]
   23498:	4291      	cmp	r1, r2
   2349a:	d00b      	beq.n	234b4 <lfs_mount+0x1d8>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
   2349c:	466d      	mov	r5, sp
   2349e:	b08c      	sub	sp, #48	; 0x30
   234a0:	aa04      	add	r2, sp, #16
   234a2:	491a      	ldr	r1, [pc, #104]	; (2350c <lfs_mount+0x230>)
   234a4:	6151      	str	r1, [r2, #20]
   234a6:	4912      	ldr	r1, [pc, #72]	; (234f0 <lfs_mount+0x214>)
   234a8:	6191      	str	r1, [r2, #24]
   234aa:	f241 016b 	movw	r1, #4203	; 0x106b
   234ae:	e9c2 1307 	strd	r1, r3, [r2, #28]
   234b2:	e799      	b.n	233e8 <lfs_mount+0x10c>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
   234b4:	4620      	mov	r0, r4
   234b6:	f104 0230 	add.w	r2, r4, #48	; 0x30
   234ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
   234be:	f7fd fc6b 	bl	20d98 <lfs_dir_getgstate>
        if (err) {
   234c2:	2800      	cmp	r0, #0
   234c4:	f43f af22 	beq.w	2330c <lfs_mount+0x30>
   234c8:	e7af      	b.n	2342a <lfs_mount+0x14e>
            err = LFS_ERR_CORRUPT;
   234ca:	f06f 0053 	mvn.w	r0, #83	; 0x53
   234ce:	e7ac      	b.n	2342a <lfs_mount+0x14e>
        err = LFS_ERR_INVAL;
   234d0:	f06f 0515 	mvn.w	r5, #21
   234d4:	e7aa      	b.n	2342c <lfs_mount+0x150>
   234d6:	bf00      	nop
   234d8:	0003681b 	.word	0x0003681b
   234dc:	0002f009 	.word	0x0002f009
   234e0:	20100018 	.word	0x20100018
   234e4:	0ff00008 	.word	0x0ff00008
   234e8:	7ffffc00 	.word	0x7ffffc00
   234ec:	00037eb2 	.word	0x00037eb2
   234f0:	00037a1d 	.word	0x00037a1d
   234f4:	00037ed2 	.word	0x00037ed2
   234f8:	01000006 	.word	0x01000006
   234fc:	00031544 	.word	0x00031544
   23500:	00037ef8 	.word	0x00037ef8
   23504:	00037f1e 	.word	0x00037f1e
   23508:	00037f44 	.word	0x00037f44
   2350c:	00037f6a 	.word	0x00037f6a

00023510 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
   23510:	b5f0      	push	{r4, r5, r6, r7, lr}
   23512:	b099      	sub	sp, #100	; 0x64
   23514:	4604      	mov	r4, r0
   23516:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
   23518:	f7ff fd0e 	bl	22f38 <lfs_fs_forceconsistency>
    if (err) {
   2351c:	2800      	cmp	r0, #0
   2351e:	d15d      	bne.n	235dc <lfs_remove+0xcc>
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   23520:	4603      	mov	r3, r0
   23522:	aa03      	add	r2, sp, #12
   23524:	4620      	mov	r0, r4
   23526:	a906      	add	r1, sp, #24
   23528:	f7fe f8cc 	bl	216c4 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   2352c:	2800      	cmp	r0, #0
   2352e:	db55      	blt.n	235dc <lfs_remove+0xcc>
   23530:	f240 32ff 	movw	r2, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   23534:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   23538:	4293      	cmp	r3, r2
   2353a:	d051      	beq.n	235e0 <lfs_remove+0xd0>
    dir.next = lfs->mlist;
   2353c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return (tag & 0x7ff00000) >> 20;
   2353e:	0d05      	lsrs	r5, r0, #20
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   23540:	2d02      	cmp	r5, #2
    dir.next = lfs->mlist;
   23542:	920e      	str	r2, [sp, #56]	; 0x38
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
   23544:	ea4f 2783 	mov.w	r7, r3, lsl #10
   23548:	ae04      	add	r6, sp, #16
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   2354a:	d121      	bne.n	23590 <lfs_remove+0x80>
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
   2354c:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
   23550:	4620      	mov	r0, r4
   23552:	4a25      	ldr	r2, [pc, #148]	; (235e8 <lfs_remove+0xd8>)
   23554:	9600      	str	r6, [sp, #0]
   23556:	f043 0308 	orr.w	r3, r3, #8
   2355a:	a906      	add	r1, sp, #24
   2355c:	f00b fcf8 	bl	2ef50 <lfs_dir_get>
        if (res < 0) {
   23560:	2800      	cmp	r0, #0
   23562:	db3b      	blt.n	235dc <lfs_remove+0xcc>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
   23564:	4632      	mov	r2, r6
   23566:	4620      	mov	r0, r4
   23568:	a910      	add	r1, sp, #64	; 0x40
   2356a:	f00b fd6d 	bl	2f048 <lfs_dir_fetch>
        if (err) {
   2356e:	2800      	cmp	r0, #0
   23570:	d134      	bne.n	235dc <lfs_remove+0xcc>
        if (dir.m.count > 0 || dir.m.split) {
   23572:	9b15      	ldr	r3, [sp, #84]	; 0x54
   23574:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
   23578:	d12e      	bne.n	235d8 <lfs_remove+0xc8>
        err = lfs_fs_preporphans(lfs, +1);
   2357a:	2101      	movs	r1, #1
   2357c:	4620      	mov	r0, r4
   2357e:	f7fd fa7b 	bl	20a78 <lfs_fs_preporphans>
        if (err) {
   23582:	bb58      	cbnz	r0, 235dc <lfs_remove+0xcc>
        lfs->mlist = &dir;
   23584:	ab0e      	add	r3, sp, #56	; 0x38
        dir.type = 0;
   23586:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
        dir.id = 0;
   2358a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
        lfs->mlist = &dir;
   2358e:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   23590:	2300      	movs	r3, #0
   23592:	f047 479f 	orr.w	r7, r7, #1333788672	; 0x4f800000
   23596:	9305      	str	r3, [sp, #20]
   23598:	4632      	mov	r2, r6
   2359a:	2301      	movs	r3, #1
   2359c:	4620      	mov	r0, r4
   2359e:	f447 07e0 	orr.w	r7, r7, #7340032	; 0x700000
   235a2:	a906      	add	r1, sp, #24
   235a4:	9704      	str	r7, [sp, #16]
   235a6:	f00c f90c 	bl	2f7c2 <lfs_dir_commit>
    if (err) {
   235aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        lfs->mlist = dir.next;
   235ac:	62a3      	str	r3, [r4, #40]	; 0x28
    if (err) {
   235ae:	b9a8      	cbnz	r0, 235dc <lfs_remove+0xcc>
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   235b0:	2d02      	cmp	r5, #2
   235b2:	d113      	bne.n	235dc <lfs_remove+0xcc>
        err = lfs_fs_preporphans(lfs, -1);
   235b4:	f04f 31ff 	mov.w	r1, #4294967295
   235b8:	4620      	mov	r0, r4
   235ba:	f7fd fa5d 	bl	20a78 <lfs_fs_preporphans>
        if (err) {
   235be:	b968      	cbnz	r0, 235dc <lfs_remove+0xcc>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
   235c0:	4620      	mov	r0, r4
   235c2:	aa06      	add	r2, sp, #24
   235c4:	a910      	add	r1, sp, #64	; 0x40
   235c6:	f00b fd4c 	bl	2f062 <lfs_fs_pred>
        if (err) {
   235ca:	b938      	cbnz	r0, 235dc <lfs_remove+0xcc>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
   235cc:	4620      	mov	r0, r4
   235ce:	aa10      	add	r2, sp, #64	; 0x40
   235d0:	a906      	add	r1, sp, #24
   235d2:	f7ff fce3 	bl	22f9c <lfs_dir_drop>
        if (err) {
   235d6:	e001      	b.n	235dc <lfs_remove+0xcc>
            return LFS_ERR_NOTEMPTY;
   235d8:	f06f 0026 	mvn.w	r0, #38	; 0x26
    err = lfs_rawremove(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   235dc:	b019      	add	sp, #100	; 0x64
   235de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
   235e0:	f06f 0015 	mvn.w	r0, #21
    return err;
   235e4:	e7fa      	b.n	235dc <lfs_remove+0xcc>
   235e6:	bf00      	nop
   235e8:	700ffc00 	.word	0x700ffc00

000235ec <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
   235ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235f0:	b0af      	sub	sp, #188	; 0xbc
   235f2:	4605      	mov	r5, r0
   235f4:	e9cd 1206 	strd	r1, r2, [sp, #24]
    int err = lfs_fs_forceconsistency(lfs);
   235f8:	f7ff fc9e 	bl	22f38 <lfs_fs_forceconsistency>
    if (err) {
   235fc:	4603      	mov	r3, r0
   235fe:	2800      	cmp	r0, #0
   23600:	f040 8110 	bne.w	23824 <lfs_rename+0x238>
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
   23604:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   23608:	4649      	mov	r1, r9
   2360a:	4628      	mov	r0, r5
   2360c:	aa06      	add	r2, sp, #24
   2360e:	f7fe f859 	bl	216c4 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   23612:	1e06      	subs	r6, r0, #0
   23614:	f2c0 8108 	blt.w	23828 <lfs_rename+0x23c>
    return (tag & 0x000ffc00) >> 10;
   23618:	f240 37ff 	movw	r7, #1023	; 0x3ff
   2361c:	f3c6 2889 	ubfx	r8, r6, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   23620:	45b8      	cmp	r8, r7
   23622:	d105      	bne.n	23630 <lfs_rename+0x44>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
   23624:	f06f 0415 	mvn.w	r4, #21
    err = lfs_rawrename(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23628:	4620      	mov	r0, r4
   2362a:	b02f      	add	sp, #188	; 0xbc
   2362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
   23630:	4628      	mov	r0, r5
   23632:	f10d 0316 	add.w	r3, sp, #22
   23636:	aa07      	add	r2, sp, #28
   23638:	a912      	add	r1, sp, #72	; 0x48
   2363a:	f7fe f843 	bl	216c4 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   2363e:	1e04      	subs	r4, r0, #0
   23640:	db13      	blt.n	2366a <lfs_rename+0x7e>
   23642:	f3c4 2389 	ubfx	r3, r4, #10, #10
   23646:	42bb      	cmp	r3, r7
   23648:	d0ec      	beq.n	23624 <lfs_rename+0x38>
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   2364a:	4648      	mov	r0, r9
   2364c:	a912      	add	r1, sp, #72	; 0x48
   2364e:	f00b fc01 	bl	2ee54 <lfs_pair_cmp>
    prevdir.next = lfs->mlist;
   23652:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   23654:	4607      	mov	r7, r0
    prevdir.next = lfs->mlist;
   23656:	931a      	str	r3, [sp, #104]	; 0x68
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   23658:	0d33      	lsrs	r3, r6, #20
   2365a:	ebb3 5f14 	cmp.w	r3, r4, lsr #20
    return (tag & 0x7ff00000) >> 20;
   2365e:	ea4f 5214 	mov.w	r2, r4, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   23662:	d031      	beq.n	236c8 <lfs_rename+0xdc>
        return LFS_ERR_ISDIR;
   23664:	f06f 0414 	mvn.w	r4, #20
    return err;
   23668:	e7de      	b.n	23628 <lfs_rename+0x3c>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   2366a:	1ca1      	adds	r1, r4, #2
   2366c:	d1dc      	bne.n	23628 <lfs_rename+0x3c>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
   2366e:	f8bd a016 	ldrh.w	sl, [sp, #22]
   23672:	45ba      	cmp	sl, r7
   23674:	d0d8      	beq.n	23628 <lfs_rename+0x3c>
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   23676:	a912      	add	r1, sp, #72	; 0x48
   23678:	4648      	mov	r0, r9
   2367a:	f00b fbeb 	bl	2ee54 <lfs_pair_cmp>
    prevdir.next = lfs->mlist;
   2367e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   23680:	4607      	mov	r7, r0
        lfs_size_t nlen = strlen(newpath);
   23682:	9807      	ldr	r0, [sp, #28]
    prevdir.next = lfs->mlist;
   23684:	931a      	str	r3, [sp, #104]	; 0x68
        lfs_size_t nlen = strlen(newpath);
   23686:	f7e5 fe7e 	bl	9386 <strlen>
        if (nlen > lfs->name_max) {
   2368a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   2368c:	4298      	cmp	r0, r3
   2368e:	d902      	bls.n	23696 <lfs_rename+0xaa>
            return LFS_ERR_NAMETOOLONG;
   23690:	f06f 0423 	mvn.w	r4, #35	; 0x23
   23694:	e7c8      	b.n	23628 <lfs_rename+0x3c>
        if (samepair && newid <= newoldid) {
   23696:	b18f      	cbz	r7, 236bc <lfs_rename+0xd0>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   23698:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   2369a:	4b64      	ldr	r3, [pc, #400]	; (2382c <lfs_rename+0x240>)
   2369c:	4013      	ands	r3, r2
   2369e:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
   236a2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   236a6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   236aa:	632b      	str	r3, [r5, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   236ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   236ae:	1ca2      	adds	r2, r4, #2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   236b0:	636b      	str	r3, [r5, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   236b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236b4:	63ab      	str	r3, [r5, #56]	; 0x38
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   236b6:	d13b      	bne.n	23730 <lfs_rename+0x144>
   236b8:	4642      	mov	r2, r8
   236ba:	e003      	b.n	236c4 <lfs_rename+0xd8>
        if (samepair && newid <= newoldid) {
   236bc:	45d0      	cmp	r8, sl
   236be:	d3fb      	bcc.n	236b8 <lfs_rename+0xcc>
            newoldid += 1;
   236c0:	f108 0201 	add.w	r2, r8, #1
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   236c4:	2300      	movs	r3, #0
   236c6:	e039      	b.n	2373c <lfs_rename+0x150>
    } else if (samepair && newid == newoldid) {
   236c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   236cc:	b348      	cbz	r0, 23722 <lfs_rename+0x136>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   236ce:	2a02      	cmp	r2, #2
   236d0:	d1e2      	bne.n	23698 <lfs_rename+0xac>
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
   236d2:	4a57      	ldr	r2, [pc, #348]	; (23830 <lfs_rename+0x244>)
   236d4:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   236d8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   236dc:	4628      	mov	r0, r5
   236de:	4a55      	ldr	r2, [pc, #340]	; (23834 <lfs_rename+0x248>)
   236e0:	f8cd a000 	str.w	sl, [sp]
   236e4:	a912      	add	r1, sp, #72	; 0x48
   236e6:	f00b fc33 	bl	2ef50 <lfs_dir_get>
        if (res < 0) {
   236ea:	2800      	cmp	r0, #0
   236ec:	db5e      	blt.n	237ac <lfs_rename+0x1c0>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
   236ee:	4652      	mov	r2, sl
   236f0:	4628      	mov	r0, r5
   236f2:	a91c      	add	r1, sp, #112	; 0x70
   236f4:	f00b fca8 	bl	2f048 <lfs_dir_fetch>
        if (err) {
   236f8:	2800      	cmp	r0, #0
   236fa:	d157      	bne.n	237ac <lfs_rename+0x1c0>
        if (prevdir.m.count > 0 || prevdir.m.split) {
   236fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   236fe:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
   23702:	d151      	bne.n	237a8 <lfs_rename+0x1bc>
        err = lfs_fs_preporphans(lfs, +1);
   23704:	2101      	movs	r1, #1
   23706:	4628      	mov	r0, r5
   23708:	f7fd f9b6 	bl	20a78 <lfs_fs_preporphans>
        if (err) {
   2370c:	2800      	cmp	r0, #0
   2370e:	d14d      	bne.n	237ac <lfs_rename+0x1c0>
        lfs->mlist = &prevdir;
   23710:	ab1a      	add	r3, sp, #104	; 0x68
        prevdir.type = 0;
   23712:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
        prevdir.id = 0;
   23716:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
        lfs->mlist = &prevdir;
   2371a:	62ab      	str	r3, [r5, #40]	; 0x28
    if (!samepair) {
   2371c:	2f00      	cmp	r7, #0
   2371e:	d1bb      	bne.n	23698 <lfs_rename+0xac>
   23720:	e005      	b.n	2372e <lfs_rename+0x142>
    } else if (samepair && newid == newoldid) {
   23722:	4598      	cmp	r8, r3
   23724:	d101      	bne.n	2372a <lfs_rename+0x13e>
        return 0;
   23726:	2400      	movs	r4, #0
   23728:	e77e      	b.n	23628 <lfs_rename+0x3c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   2372a:	2a02      	cmp	r2, #2
   2372c:	d0d1      	beq.n	236d2 <lfs_rename+0xe6>
            return LFS_ERR_NOTEMPTY;
   2372e:	2700      	movs	r7, #0
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   23730:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23734:	4b40      	ldr	r3, [pc, #256]	; (23838 <lfs_rename+0x24c>)
   23736:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   2373a:	4642      	mov	r2, r8
   2373c:	f04f 0a00 	mov.w	sl, #0
   23740:	9324      	str	r3, [sp, #144]	; 0x90
   23742:	493e      	ldr	r1, [pc, #248]	; (2383c <lfs_rename+0x250>)
   23744:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   23748:	0d36      	lsrs	r6, r6, #20
   2374a:	0536      	lsls	r6, r6, #20
   2374c:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
   23750:	ea4f 2b83 	mov.w	fp, r3, lsl #10
   23754:	ea46 2683 	orr.w	r6, r6, r3, lsl #10
   23758:	9b07      	ldr	r3, [sp, #28]
   2375a:	e9cd 1a26 	strd	r1, sl, [sp, #152]	; 0x98
   2375e:	4618      	mov	r0, r3
   23760:	9302      	str	r3, [sp, #8]
   23762:	9203      	str	r2, [sp, #12]
   23764:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
   23768:	f7e5 fe0d 	bl	9386 <strlen>
   2376c:	9b02      	ldr	r3, [sp, #8]
   2376e:	4306      	orrs	r6, r0
   23770:	9329      	str	r3, [sp, #164]	; 0xa4
   23772:	ea4b 0308 	orr.w	r3, fp, r8
   23776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2377a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2377e:	e9cd 392a 	strd	r3, r9, [sp, #168]	; 0xa8
   23782:	9628      	str	r6, [sp, #160]	; 0xa0
   23784:	b9a7      	cbnz	r7, 237b0 <lfs_rename+0x1c4>
   23786:	4b2c      	ldr	r3, [pc, #176]	; (23838 <lfs_rename+0x24c>)
   23788:	9a03      	ldr	r2, [sp, #12]
   2378a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   2378e:	932c      	str	r3, [sp, #176]	; 0xb0
   23790:	2300      	movs	r3, #0
   23792:	4628      	mov	r0, r5
   23794:	932d      	str	r3, [sp, #180]	; 0xb4
   23796:	aa24      	add	r2, sp, #144	; 0x90
   23798:	2305      	movs	r3, #5
   2379a:	a912      	add	r1, sp, #72	; 0x48
   2379c:	f00c f811 	bl	2f7c2 <lfs_dir_commit>
    if (err) {
   237a0:	b140      	cbz	r0, 237b4 <lfs_rename+0x1c8>
        lfs->mlist = prevdir.next;
   237a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   237a4:	62ab      	str	r3, [r5, #40]	; 0x28
   237a6:	e001      	b.n	237ac <lfs_rename+0x1c0>
            return LFS_ERR_NOTEMPTY;
   237a8:	f06f 0026 	mvn.w	r0, #38	; 0x26
        return err;
   237ac:	4604      	mov	r4, r0
   237ae:	e73b      	b.n	23628 <lfs_rename+0x3c>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   237b0:	4653      	mov	r3, sl
   237b2:	e7ec      	b.n	2378e <lfs_rename+0x1a2>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   237b4:	b1b7      	cbz	r7, 237e4 <lfs_rename+0x1f8>
   237b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
   237b8:	0d13      	lsrs	r3, r2, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   237ba:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   237be:	d011      	beq.n	237e4 <lfs_rename+0x1f8>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   237c0:	4b1a      	ldr	r3, [pc, #104]	; (2382c <lfs_rename+0x240>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   237c2:	63a8      	str	r0, [r5, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   237c4:	4013      	ands	r3, r2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   237c6:	e9c5 300c 	strd	r3, r0, [r5, #48]	; 0x30
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   237ca:	4b1b      	ldr	r3, [pc, #108]	; (23838 <lfs_rename+0x24c>)
   237cc:	4649      	mov	r1, r9
   237ce:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
   237d2:	e9cd 3008 	strd	r3, r0, [sp, #32]
   237d6:	aa08      	add	r2, sp, #32
   237d8:	2301      	movs	r3, #1
   237da:	4628      	mov	r0, r5
   237dc:	f00b fff1 	bl	2f7c2 <lfs_dir_commit>
        if (err) {
   237e0:	2800      	cmp	r0, #0
   237e2:	d1de      	bne.n	237a2 <lfs_rename+0x1b6>
    lfs->mlist = prevdir.next;
   237e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   237e6:	62ab      	str	r3, [r5, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
   237e8:	1ca3      	adds	r3, r4, #2
   237ea:	d09c      	beq.n	23726 <lfs_rename+0x13a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   237ec:	f3c4 540a 	ubfx	r4, r4, #20, #11
   237f0:	2c02      	cmp	r4, #2
   237f2:	d198      	bne.n	23726 <lfs_rename+0x13a>
        err = lfs_fs_preporphans(lfs, -1);
   237f4:	f04f 31ff 	mov.w	r1, #4294967295
   237f8:	4628      	mov	r0, r5
   237fa:	f7fd f93d 	bl	20a78 <lfs_fs_preporphans>
        if (err) {
   237fe:	4604      	mov	r4, r0
   23800:	2800      	cmp	r0, #0
   23802:	f47f af11 	bne.w	23628 <lfs_rename+0x3c>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
   23806:	4628      	mov	r0, r5
   23808:	aa12      	add	r2, sp, #72	; 0x48
   2380a:	a91c      	add	r1, sp, #112	; 0x70
   2380c:	f00b fc29 	bl	2f062 <lfs_fs_pred>
        if (err) {
   23810:	4604      	mov	r4, r0
   23812:	2800      	cmp	r0, #0
   23814:	f47f af08 	bne.w	23628 <lfs_rename+0x3c>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
   23818:	4628      	mov	r0, r5
   2381a:	aa1c      	add	r2, sp, #112	; 0x70
   2381c:	a912      	add	r1, sp, #72	; 0x48
   2381e:	f7ff fbbd 	bl	22f9c <lfs_dir_drop>
   23822:	e7c3      	b.n	237ac <lfs_rename+0x1c0>
   23824:	4604      	mov	r4, r0
   23826:	e6ff      	b.n	23628 <lfs_rename+0x3c>
   23828:	4634      	mov	r4, r6
   2382a:	e6fd      	b.n	23628 <lfs_rename+0x3c>
   2382c:	800003ff 	.word	0x800003ff
   23830:	20000008 	.word	0x20000008
   23834:	700ffc00 	.word	0x700ffc00
   23838:	4ff00000 	.word	0x4ff00000
   2383c:	40100000 	.word	0x40100000

00023840 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
   23840:	b510      	push	{r4, lr}
   23842:	4604      	mov	r4, r0
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23844:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23846:	f00b fb3c 	bl	2eec2 <lfs_mlist_isopen>
   2384a:	b158      	cbz	r0, 23864 <lfs_file_opencfg+0x24>
   2384c:	4908      	ldr	r1, [pc, #32]	; (23870 <lfs_file_opencfg+0x30>)
   2384e:	4809      	ldr	r0, [pc, #36]	; (23874 <lfs_file_opencfg+0x34>)
   23850:	f241 5383 	movw	r3, #5507	; 0x1583
   23854:	4a08      	ldr	r2, [pc, #32]	; (23878 <lfs_file_opencfg+0x38>)
   23856:	f006 ff1c 	bl	2a692 <assert_print>
   2385a:	f241 5183 	movw	r1, #5507	; 0x1583
   2385e:	4806      	ldr	r0, [pc, #24]	; (23878 <lfs_file_opencfg+0x38>)
   23860:	f006 ff10 	bl	2a684 <assert_post_action>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
   23864:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
   2386a:	f7ff bbb5 	b.w	22fd8 <lfs_file_rawopencfg>
   2386e:	bf00      	nop
   23870:	00037f8f 	.word	0x00037f8f
   23874:	00032629 	.word	0x00032629
   23878:	00037a1d 	.word	0x00037a1d

0002387c <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   2387c:	b508      	push	{r3, lr}
   2387e:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23880:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23882:	f00b fb1e 	bl	2eec2 <lfs_mlist_isopen>
   23886:	b958      	cbnz	r0, 238a0 <lfs_file_close+0x24>
   23888:	4908      	ldr	r1, [pc, #32]	; (238ac <lfs_file_close+0x30>)
   2388a:	4809      	ldr	r0, [pc, #36]	; (238b0 <lfs_file_close+0x34>)
   2388c:	f241 5392 	movw	r3, #5522	; 0x1592
   23890:	4a08      	ldr	r2, [pc, #32]	; (238b4 <lfs_file_close+0x38>)
   23892:	f006 fefe 	bl	2a692 <assert_print>
   23896:	f241 5192 	movw	r1, #5522	; 0x1592
   2389a:	4806      	ldr	r0, [pc, #24]	; (238b4 <lfs_file_close+0x38>)
   2389c:	f006 fef2 	bl	2a684 <assert_post_action>

    err = lfs_file_rawclose(lfs, file);
   238a0:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   238a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_rawclose(lfs, file);
   238a6:	f00b bfe4 	b.w	2f872 <lfs_file_rawclose>
   238aa:	bf00      	nop
   238ac:	00037f90 	.word	0x00037f90
   238b0:	00032629 	.word	0x00032629
   238b4:	00037a1d 	.word	0x00037a1d

000238b8 <lfs_file_sync>:

#ifndef LFS_READONLY
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   238b8:	b508      	push	{r3, lr}
   238ba:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_sync(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   238bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   238be:	f00b fb00 	bl	2eec2 <lfs_mlist_isopen>
   238c2:	b958      	cbnz	r0, 238dc <lfs_file_sync+0x24>
   238c4:	4908      	ldr	r1, [pc, #32]	; (238e8 <lfs_file_sync+0x30>)
   238c6:	4809      	ldr	r0, [pc, #36]	; (238ec <lfs_file_sync+0x34>)
   238c8:	f241 53a2 	movw	r3, #5538	; 0x15a2
   238cc:	4a08      	ldr	r2, [pc, #32]	; (238f0 <lfs_file_sync+0x38>)
   238ce:	f006 fee0 	bl	2a692 <assert_print>
   238d2:	f241 51a2 	movw	r1, #5538	; 0x15a2
   238d6:	4806      	ldr	r0, [pc, #24]	; (238f0 <lfs_file_sync+0x38>)
   238d8:	f006 fed4 	bl	2a684 <assert_post_action>

    err = lfs_file_rawsync(lfs, file);
   238dc:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_sync -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   238de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_rawsync(lfs, file);
   238e2:	f00b bf7c 	b.w	2f7de <lfs_file_rawsync>
   238e6:	bf00      	nop
   238e8:	00037f90 	.word	0x00037f90
   238ec:	00032629 	.word	0x00032629
   238f0:	00037a1d 	.word	0x00037a1d

000238f4 <lfs_file_read>:
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
   238f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   238f8:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   238fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
        void *buffer, lfs_size_t size) {
   238fc:	460d      	mov	r5, r1
   238fe:	4616      	mov	r6, r2
   23900:	461f      	mov	r7, r3
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23902:	f00b fade 	bl	2eec2 <lfs_mlist_isopen>
   23906:	b958      	cbnz	r0, 23920 <lfs_file_read+0x2c>
   23908:	4914      	ldr	r1, [pc, #80]	; (2395c <lfs_file_read+0x68>)
   2390a:	f241 53b4 	movw	r3, #5556	; 0x15b4
   2390e:	4a14      	ldr	r2, [pc, #80]	; (23960 <lfs_file_read+0x6c>)
   23910:	4814      	ldr	r0, [pc, #80]	; (23964 <lfs_file_read+0x70>)
   23912:	f006 febe 	bl	2a692 <assert_print>
   23916:	f241 51b4 	movw	r1, #5556	; 0x15b4
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
   2391a:	4811      	ldr	r0, [pc, #68]	; (23960 <lfs_file_read+0x6c>)
   2391c:	f006 feb2 	bl	2a684 <assert_post_action>
   23920:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   23922:	07da      	lsls	r2, r3, #31
   23924:	d409      	bmi.n	2393a <lfs_file_read+0x46>
   23926:	4910      	ldr	r1, [pc, #64]	; (23968 <lfs_file_read+0x74>)
   23928:	f640 43f2 	movw	r3, #3314	; 0xcf2
   2392c:	4a0c      	ldr	r2, [pc, #48]	; (23960 <lfs_file_read+0x6c>)
   2392e:	480d      	ldr	r0, [pc, #52]	; (23964 <lfs_file_read+0x70>)
   23930:	f006 feaf 	bl	2a692 <assert_print>
   23934:	f640 41f2 	movw	r1, #3314	; 0xcf2
   23938:	e7ef      	b.n	2391a <lfs_file_read+0x26>
    if (file->flags & LFS_F_WRITING) {
   2393a:	039b      	lsls	r3, r3, #14
   2393c:	d407      	bmi.n	2394e <lfs_file_read+0x5a>
    return lfs_file_flushedread(lfs, file, buffer, size);
   2393e:	463b      	mov	r3, r7
   23940:	4632      	mov	r2, r6
   23942:	4629      	mov	r1, r5
   23944:	4620      	mov	r0, r4
    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   23946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lfs_file_flushedread(lfs, file, buffer, size);
   2394a:	f7fd bf61 	b.w	21810 <lfs_file_flushedread>
        int err = lfs_file_flush(lfs, file);
   2394e:	4620      	mov	r0, r4
   23950:	f00b fe49 	bl	2f5e6 <lfs_file_flush>
        if (err) {
   23954:	2800      	cmp	r0, #0
   23956:	d0f2      	beq.n	2393e <lfs_file_read+0x4a>
}
   23958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2395c:	00037f90 	.word	0x00037f90
   23960:	00037a1d 	.word	0x00037a1d
   23964:	00032629 	.word	0x00032629
   23968:	00037fc6 	.word	0x00037fc6

0002396c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
   2396c:	b510      	push	{r4, lr}
   2396e:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23970:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23972:	f00b faa6 	bl	2eec2 <lfs_mlist_isopen>
   23976:	b958      	cbnz	r0, 23990 <lfs_file_write+0x24>
   23978:	4908      	ldr	r1, [pc, #32]	; (2399c <lfs_file_write+0x30>)
   2397a:	4809      	ldr	r0, [pc, #36]	; (239a0 <lfs_file_write+0x34>)
   2397c:	f241 53c6 	movw	r3, #5574	; 0x15c6
   23980:	4a08      	ldr	r2, [pc, #32]	; (239a4 <lfs_file_write+0x38>)
   23982:	f006 fe86 	bl	2a692 <assert_print>
   23986:	f241 51c6 	movw	r1, #5574	; 0x15c6
   2398a:	4806      	ldr	r0, [pc, #24]	; (239a4 <lfs_file_write+0x38>)
   2398c:	f006 fe7a 	bl	2a684 <assert_post_action>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
   23990:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   23992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
   23996:	f7fe bc7f 	b.w	22298 <lfs_file_rawwrite>
   2399a:	bf00      	nop
   2399c:	00037f90 	.word	0x00037f90
   239a0:	00032629 	.word	0x00032629
   239a4:	00037a1d 	.word	0x00037a1d

000239a8 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
   239a8:	b510      	push	{r4, lr}
   239aa:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   239ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
   239ae:	f00b fa88 	bl	2eec2 <lfs_mlist_isopen>
   239b2:	b958      	cbnz	r0, 239cc <lfs_file_seek+0x24>
   239b4:	4908      	ldr	r1, [pc, #32]	; (239d8 <lfs_file_seek+0x30>)
   239b6:	4809      	ldr	r0, [pc, #36]	; (239dc <lfs_file_seek+0x34>)
   239b8:	f241 53d8 	movw	r3, #5592	; 0x15d8
   239bc:	4a08      	ldr	r2, [pc, #32]	; (239e0 <lfs_file_seek+0x38>)
   239be:	f006 fe68 	bl	2a692 <assert_print>
   239c2:	f241 51d8 	movw	r1, #5592	; 0x15d8
   239c6:	4806      	ldr	r0, [pc, #24]	; (239e0 <lfs_file_seek+0x38>)
   239c8:	f006 fe5c 	bl	2a684 <assert_post_action>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
   239cc:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   239ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
   239d2:	f00b bead 	b.w	2f730 <lfs_file_rawseek>
   239d6:	bf00      	nop
   239d8:	00037f90 	.word	0x00037f90
   239dc:	00032629 	.word	0x00032629
   239e0:	00037a1d 	.word	0x00037a1d

000239e4 <lfs_file_truncate>:

#ifndef LFS_READONLY
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   239e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239e8:	4605      	mov	r5, r0
   239ea:	b086      	sub	sp, #24
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_truncate(%p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   239ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   239ee:	460c      	mov	r4, r1
   239f0:	4616      	mov	r6, r2
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   239f2:	f00b fa66 	bl	2eec2 <lfs_mlist_isopen>
   239f6:	b958      	cbnz	r0, 23a10 <lfs_file_truncate+0x2c>
   239f8:	4933      	ldr	r1, [pc, #204]	; (23ac8 <lfs_file_truncate+0xe4>)
   239fa:	f241 53e9 	movw	r3, #5609	; 0x15e9
   239fe:	4a33      	ldr	r2, [pc, #204]	; (23acc <lfs_file_truncate+0xe8>)
   23a00:	4833      	ldr	r0, [pc, #204]	; (23ad0 <lfs_file_truncate+0xec>)
   23a02:	f006 fe46 	bl	2a692 <assert_print>
   23a06:	f241 51e9 	movw	r1, #5609	; 0x15e9
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   23a0a:	4830      	ldr	r0, [pc, #192]	; (23acc <lfs_file_truncate+0xe8>)
   23a0c:	f006 fe3a 	bl	2a684 <assert_post_action>
   23a10:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   23a12:	0791      	lsls	r1, r2, #30
   23a14:	d409      	bmi.n	23a2a <lfs_file_truncate+0x46>
   23a16:	492f      	ldr	r1, [pc, #188]	; (23ad4 <lfs_file_truncate+0xf0>)
   23a18:	f640 53c8 	movw	r3, #3528	; 0xdc8
   23a1c:	4a2b      	ldr	r2, [pc, #172]	; (23acc <lfs_file_truncate+0xe8>)
   23a1e:	482c      	ldr	r0, [pc, #176]	; (23ad0 <lfs_file_truncate+0xec>)
   23a20:	f006 fe37 	bl	2a692 <assert_print>
   23a24:	f640 51c8 	movw	r1, #3528	; 0xdc8
   23a28:	e7ef      	b.n	23a0a <lfs_file_truncate+0x26>
    if (size > LFS_FILE_MAX) {
   23a2a:	2e00      	cmp	r6, #0
   23a2c:	db49      	blt.n	23ac2 <lfs_file_truncate+0xde>
    if (file->flags & LFS_F_WRITING) {
   23a2e:	0392      	lsls	r2, r2, #14
    lfs_off_t pos = file->pos;
   23a30:	6b67      	ldr	r7, [r4, #52]	; 0x34
        return lfs_max(file->pos, file->ctz.size);
   23a32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (file->flags & LFS_F_WRITING) {
   23a34:	d502      	bpl.n	23a3c <lfs_file_truncate+0x58>
	return (a > b) ? a : b;
   23a36:	42bb      	cmp	r3, r7
   23a38:	bf38      	it	cc
   23a3a:	463b      	movcc	r3, r7
    if (size < oldsize) {
   23a3c:	429e      	cmp	r6, r3
   23a3e:	d224      	bcs.n	23a8a <lfs_file_truncate+0xa6>
        int err = lfs_file_flush(lfs, file);
   23a40:	4621      	mov	r1, r4
   23a42:	4628      	mov	r0, r5
   23a44:	f00b fdcf 	bl	2f5e6 <lfs_file_flush>
        if (err) {
   23a48:	bbc0      	cbnz	r0, 23abc <lfs_file_truncate+0xd8>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   23a4a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   23a4e:	9302      	str	r3, [sp, #8]
   23a50:	f104 0338 	add.w	r3, r4, #56	; 0x38
   23a54:	e9cd 6300 	strd	r6, r3, [sp]
   23a58:	4628      	mov	r0, r5
   23a5a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   23a5e:	f104 0140 	add.w	r1, r4, #64	; 0x40
   23a62:	f00b fb44 	bl	2f0ee <lfs_ctz_find.constprop.0>
        if (err) {
   23a66:	bb48      	cbnz	r0, 23abc <lfs_file_truncate+0xd8>
        file->ctz.head = file->block;
   23a68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        file->pos = size;
   23a6a:	6366      	str	r6, [r4, #52]	; 0x34
        file->ctz.size = size;
   23a6c:	e9c4 360a 	strd	r3, r6, [r4, #40]	; 0x28
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   23a70:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23a72:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   23a76:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_rawseek(lfs, file, pos, LFS_SEEK_SET);
   23a78:	2300      	movs	r3, #0
   23a7a:	463a      	mov	r2, r7
   23a7c:	4621      	mov	r1, r4
   23a7e:	4628      	mov	r0, r5
   23a80:	f00b fe56 	bl	2f730 <lfs_file_rawseek>
    if (res < 0) {
   23a84:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   23a88:	e018      	b.n	23abc <lfs_file_truncate+0xd8>
    } else if (size > oldsize) {
   23a8a:	d9f5      	bls.n	23a78 <lfs_file_truncate+0x94>
        lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_END);
   23a8c:	2302      	movs	r3, #2
   23a8e:	2200      	movs	r2, #0
   23a90:	4621      	mov	r1, r4
   23a92:	4628      	mov	r0, r5
   23a94:	f00b fe4c 	bl	2f730 <lfs_file_rawseek>
        if (res < 0) {
   23a98:	2800      	cmp	r0, #0
   23a9a:	db0f      	blt.n	23abc <lfs_file_truncate+0xd8>
            res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
   23a9c:	f04f 0800 	mov.w	r8, #0
        while (file->pos < size) {
   23aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23aa2:	429e      	cmp	r6, r3
   23aa4:	d9e8      	bls.n	23a78 <lfs_file_truncate+0x94>
            res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
   23aa6:	2301      	movs	r3, #1
   23aa8:	4621      	mov	r1, r4
   23aaa:	4628      	mov	r0, r5
   23aac:	f10d 0217 	add.w	r2, sp, #23
   23ab0:	f88d 8017 	strb.w	r8, [sp, #23]
   23ab4:	f7fe fbf0 	bl	22298 <lfs_file_rawwrite>
            if (res < 0) {
   23ab8:	2800      	cmp	r0, #0
   23aba:	daf1      	bge.n	23aa0 <lfs_file_truncate+0xbc>
    err = lfs_file_rawtruncate(lfs, file, size);

    LFS_TRACE("lfs_file_truncate -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23abc:	b006      	add	sp, #24
   23abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_INVAL;
   23ac2:	f06f 0015 	mvn.w	r0, #21
    return err;
   23ac6:	e7f9      	b.n	23abc <lfs_file_truncate+0xd8>
   23ac8:	00037f90 	.word	0x00037f90
   23acc:	00037a1d 	.word	0x00037a1d
   23ad0:	00032629 	.word	0x00032629
   23ad4:	00037db2 	.word	0x00037db2

00023ad8 <lfs_file_tell>:
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
   23ad8:	b508      	push	{r3, lr}
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23ada:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23adc:	f00b f9f1 	bl	2eec2 <lfs_mlist_isopen>
   23ae0:	b958      	cbnz	r0, 23afa <lfs_file_tell+0x22>
   23ae2:	4907      	ldr	r1, [pc, #28]	; (23b00 <lfs_file_tell+0x28>)
   23ae4:	4807      	ldr	r0, [pc, #28]	; (23b04 <lfs_file_tell+0x2c>)
   23ae6:	f241 53f9 	movw	r3, #5625	; 0x15f9
   23aea:	4a07      	ldr	r2, [pc, #28]	; (23b08 <lfs_file_tell+0x30>)
   23aec:	f006 fdd1 	bl	2a692 <assert_print>
   23af0:	f241 51f9 	movw	r1, #5625	; 0x15f9
   23af4:	4804      	ldr	r0, [pc, #16]	; (23b08 <lfs_file_tell+0x30>)
   23af6:	f006 fdc5 	bl	2a684 <assert_post_action>
    lfs_soff_t res = lfs_file_rawtell(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   23afa:	6b48      	ldr	r0, [r1, #52]	; 0x34
   23afc:	bd08      	pop	{r3, pc}
   23afe:	bf00      	nop
   23b00:	00037f90 	.word	0x00037f90
   23b04:	00032629 	.word	0x00032629
   23b08:	00037a1d 	.word	0x00037a1d

00023b0c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
   23b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23b10:	b0a6      	sub	sp, #152	; 0x98
   23b12:	4605      	mov	r5, r0
   23b14:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
   23b16:	f7ff fa0f 	bl	22f38 <lfs_fs_forceconsistency>
    if (err) {
   23b1a:	b980      	cbnz	r0, 23b3e <lfs_mkdir+0x32>
    cwd.next = lfs->mlist;
   23b1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   23b1e:	4628      	mov	r0, r5
    cwd.next = lfs->mlist;
   23b20:	931c      	str	r3, [sp, #112]	; 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   23b22:	aa01      	add	r2, sp, #4
   23b24:	f10d 0302 	add.w	r3, sp, #2
   23b28:	a91e      	add	r1, sp, #120	; 0x78
   23b2a:	f7fd fdcb 	bl	216c4 <lfs_dir_find>
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
   23b2e:	1c83      	adds	r3, r0, #2
   23b30:	d108      	bne.n	23b44 <lfs_mkdir+0x38>
   23b32:	f240 33ff 	movw	r3, #1023	; 0x3ff
   23b36:	f8bd 7002 	ldrh.w	r7, [sp, #2]
   23b3a:	429f      	cmp	r7, r3
   23b3c:	d107      	bne.n	23b4e <lfs_mkdir+0x42>
    err = lfs_rawmkdir(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23b3e:	b026      	add	sp, #152	; 0x98
   23b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return (err < 0) ? err : LFS_ERR_EXIST;
   23b44:	2800      	cmp	r0, #0
   23b46:	bfa8      	it	ge
   23b48:	f06f 0010 	mvnge.w	r0, #16
   23b4c:	e7f7      	b.n	23b3e <lfs_mkdir+0x32>
    lfs_size_t nlen = strlen(path);
   23b4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   23b52:	4640      	mov	r0, r8
   23b54:	f7e5 fc17 	bl	9386 <strlen>
    if (nlen > lfs->name_max) {
   23b58:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    lfs_size_t nlen = strlen(path);
   23b5a:	4606      	mov	r6, r0
    if (nlen > lfs->name_max) {
   23b5c:	4298      	cmp	r0, r3
   23b5e:	d871      	bhi.n	23c44 <lfs_mkdir+0x138>
    lfs->free.ack = lfs->cfg->block_count;
   23b60:	6eab      	ldr	r3, [r5, #104]	; 0x68
    err = lfs_dir_alloc(lfs, &dir);
   23b62:	ac04      	add	r4, sp, #16
    lfs->free.ack = lfs->cfg->block_count;
   23b64:	6a1b      	ldr	r3, [r3, #32]
    err = lfs_dir_alloc(lfs, &dir);
   23b66:	4621      	mov	r1, r4
   23b68:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   23b6a:	662b      	str	r3, [r5, #96]	; 0x60
    err = lfs_dir_alloc(lfs, &dir);
   23b6c:	f00b fbc6 	bl	2f2fc <lfs_dir_alloc>
    if (err) {
   23b70:	2800      	cmp	r0, #0
   23b72:	d1e4      	bne.n	23b3e <lfs_mkdir+0x32>
    lfs_mdir_t pred = cwd.m;
   23b74:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   23b78:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
   23b7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   23b80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   23b84:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   23b88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
   23b8c:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
   23b90:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   23b94:	2b00      	cmp	r3, #0
   23b96:	d14d      	bne.n	23c34 <lfs_mkdir+0x128>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
   23b98:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 23c4c <lfs_mkdir+0x140>
   23b9c:	2301      	movs	r3, #1
   23b9e:	4621      	mov	r1, r4
   23ba0:	4628      	mov	r0, r5
   23ba2:	aa02      	add	r2, sp, #8
   23ba4:	e9cd 9a02 	strd	r9, sl, [sp, #8]
   23ba8:	f00b fe0b 	bl	2f7c2 <lfs_dir_commit>
    if (err) {
   23bac:	2800      	cmp	r0, #0
   23bae:	d1c6      	bne.n	23b3e <lfs_mkdir+0x32>
    if (cwd.m.split) {
   23bb0:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
   23bb4:	b1f3      	cbz	r3, 23bf4 <lfs_mkdir+0xe8>
        err = lfs_fs_preporphans(lfs, +1);
   23bb6:	2101      	movs	r1, #1
   23bb8:	4628      	mov	r0, r5
   23bba:	f7fc ff5d 	bl	20a78 <lfs_fs_preporphans>
        if (err) {
   23bbe:	2800      	cmp	r0, #0
   23bc0:	d1bd      	bne.n	23b3e <lfs_mkdir+0x32>
        lfs->mlist = &cwd;
   23bc2:	ab1c      	add	r3, sp, #112	; 0x70
        cwd.type = 0;
   23bc4:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
        cwd.id = 0;
   23bc8:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
        lfs->mlist = &cwd;
   23bcc:	62ab      	str	r3, [r5, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
   23bce:	4628      	mov	r0, r5
   23bd0:	2301      	movs	r3, #1
   23bd2:	aa14      	add	r2, sp, #80	; 0x50
   23bd4:	a90c      	add	r1, sp, #48	; 0x30
   23bd6:	e9cd 9414 	strd	r9, r4, [sp, #80]	; 0x50
   23bda:	f00b fdf2 	bl	2f7c2 <lfs_dir_commit>
        if (err) {
   23bde:	9b1c      	ldr	r3, [sp, #112]	; 0x70
            lfs->mlist = cwd.next;
   23be0:	62ab      	str	r3, [r5, #40]	; 0x28
        if (err) {
   23be2:	2800      	cmp	r0, #0
   23be4:	d1ab      	bne.n	23b3e <lfs_mkdir+0x32>
        err = lfs_fs_preporphans(lfs, -1);
   23be6:	f04f 31ff 	mov.w	r1, #4294967295
   23bea:	4628      	mov	r0, r5
   23bec:	f7fc ff44 	bl	20a78 <lfs_fs_preporphans>
        if (err) {
   23bf0:	2800      	cmp	r0, #0
   23bf2:	d1a4      	bne.n	23b3e <lfs_mkdir+0x32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
   23bf4:	4b16      	ldr	r3, [pc, #88]	; (23c50 <lfs_mkdir+0x144>)
   23bf6:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
   23bfa:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
   23bfe:	9314      	str	r3, [sp, #80]	; 0x50
   23c00:	2300      	movs	r3, #0
   23c02:	9315      	str	r3, [sp, #84]	; 0x54
   23c04:	4b13      	ldr	r3, [pc, #76]	; (23c54 <lfs_mkdir+0x148>)
   23c06:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
   23c0a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
   23c0e:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
   23c12:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
   23c16:	4628      	mov	r0, r5
   23c18:	2b00      	cmp	r3, #0
   23c1a:	4b0c      	ldr	r3, [pc, #48]	; (23c4c <lfs_mkdir+0x140>)
   23c1c:	bf18      	it	ne
   23c1e:	2300      	movne	r3, #0
   23c20:	aa14      	add	r2, sp, #80	; 0x50
   23c22:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   23c26:	a91e      	add	r1, sp, #120	; 0x78
   23c28:	2304      	movs	r3, #4
   23c2a:	e9cd 6816 	strd	r6, r8, [sp, #88]	; 0x58
   23c2e:	f00b fdc8 	bl	2f7c2 <lfs_dir_commit>
    if (err) {
   23c32:	e784      	b.n	23b3e <lfs_mkdir+0x32>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
   23c34:	4652      	mov	r2, sl
   23c36:	4628      	mov	r0, r5
   23c38:	a90c      	add	r1, sp, #48	; 0x30
   23c3a:	f00b fa05 	bl	2f048 <lfs_dir_fetch>
        if (err) {
   23c3e:	2800      	cmp	r0, #0
   23c40:	d0a6      	beq.n	23b90 <lfs_mkdir+0x84>
   23c42:	e77c      	b.n	23b3e <lfs_mkdir+0x32>
        return LFS_ERR_NAMETOOLONG;
   23c44:	f06f 0023 	mvn.w	r0, #35	; 0x23
    return err;
   23c48:	e779      	b.n	23b3e <lfs_mkdir+0x32>
   23c4a:	bf00      	nop
   23c4c:	600ffc08 	.word	0x600ffc08
   23c50:	40100000 	.word	0x40100000
   23c54:	20000008 	.word	0x20000008

00023c58 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   23c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c5a:	4605      	mov	r5, r0
   23c5c:	b087      	sub	sp, #28
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
   23c5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23c60:	f00b f92f 	bl	2eec2 <lfs_mlist_isopen>
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   23c64:	460c      	mov	r4, r1
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
   23c66:	4603      	mov	r3, r0
   23c68:	b158      	cbz	r0, 23c82 <lfs_dir_open+0x2a>
   23c6a:	4923      	ldr	r1, [pc, #140]	; (23cf8 <lfs_dir_open+0xa0>)
   23c6c:	4823      	ldr	r0, [pc, #140]	; (23cfc <lfs_dir_open+0xa4>)
   23c6e:	f241 6335 	movw	r3, #5685	; 0x1635
   23c72:	4a23      	ldr	r2, [pc, #140]	; (23d00 <lfs_dir_open+0xa8>)
   23c74:	f006 fd0d 	bl	2a692 <assert_print>
   23c78:	f241 6135 	movw	r1, #5685	; 0x1635
   23c7c:	4820      	ldr	r0, [pc, #128]	; (23d00 <lfs_dir_open+0xa8>)
   23c7e:	f006 fd01 	bl	2a684 <assert_post_action>
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
   23c82:	f101 0608 	add.w	r6, r1, #8
   23c86:	9203      	str	r2, [sp, #12]
   23c88:	4631      	mov	r1, r6
   23c8a:	4628      	mov	r0, r5
   23c8c:	aa03      	add	r2, sp, #12
   23c8e:	f7fd fd19 	bl	216c4 <lfs_dir_find>
    if (tag < 0) {
   23c92:	2800      	cmp	r0, #0
   23c94:	db2a      	blt.n	23cec <lfs_dir_open+0x94>
    return (tag & 0x7ff00000) >> 20;
   23c96:	0d03      	lsrs	r3, r0, #20
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   23c98:	2b02      	cmp	r3, #2
   23c9a:	d129      	bne.n	23cf0 <lfs_dir_open+0x98>
    if (lfs_tag_id(tag) == 0x3ff) {
   23c9c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   23ca0:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
   23ca4:	4293      	cmp	r3, r2
   23ca6:	af04      	add	r7, sp, #16
   23ca8:	d115      	bne.n	23cd6 <lfs_dir_open+0x7e>
        pair[0] = lfs->root[0];
   23caa:	6a2b      	ldr	r3, [r5, #32]
   23cac:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
   23cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23cb0:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
   23cb2:	463a      	mov	r2, r7
   23cb4:	4631      	mov	r1, r6
   23cb6:	4628      	mov	r0, r5
   23cb8:	f00b f9c6 	bl	2f048 <lfs_dir_fetch>
    if (err) {
   23cbc:	b9b0      	cbnz	r0, 23cec <lfs_dir_open+0x94>
    dir->head[0] = dir->m.pair[0];
   23cbe:	68a3      	ldr	r3, [r4, #8]
    dir->id = 0;
   23cc0:	80a0      	strh	r0, [r4, #4]
    dir->head[0] = dir->m.pair[0];
   23cc2:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
   23cc4:	68e3      	ldr	r3, [r4, #12]
    dir->pos = 0;
   23cc6:	62a0      	str	r0, [r4, #40]	; 0x28
    dir->head[1] = dir->m.pair[1];
   23cc8:	6323      	str	r3, [r4, #48]	; 0x30
    dir->type = LFS_TYPE_DIR;
   23cca:	2302      	movs	r3, #2
   23ccc:	71a3      	strb	r3, [r4, #6]
    mlist->next = lfs->mlist;
   23cce:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23cd0:	6023      	str	r3, [r4, #0]
    lfs->mlist = mlist;
   23cd2:	62ac      	str	r4, [r5, #40]	; 0x28
    return 0;
   23cd4:	e00a      	b.n	23cec <lfs_dir_open+0x94>
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
   23cd6:	4a0b      	ldr	r2, [pc, #44]	; (23d04 <lfs_dir_open+0xac>)
   23cd8:	4631      	mov	r1, r6
   23cda:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   23cde:	4628      	mov	r0, r5
   23ce0:	4a09      	ldr	r2, [pc, #36]	; (23d08 <lfs_dir_open+0xb0>)
   23ce2:	9700      	str	r7, [sp, #0]
   23ce4:	f00b f934 	bl	2ef50 <lfs_dir_get>
        if (res < 0) {
   23ce8:	2800      	cmp	r0, #0
   23cea:	dae2      	bge.n	23cb2 <lfs_dir_open+0x5a>
    err = lfs_dir_rawopen(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23cec:	b007      	add	sp, #28
   23cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LFS_ERR_NOTDIR;
   23cf0:	f06f 0013 	mvn.w	r0, #19
    return err;
   23cf4:	e7fa      	b.n	23cec <lfs_dir_open+0x94>
   23cf6:	bf00      	nop
   23cf8:	00037ff3 	.word	0x00037ff3
   23cfc:	00032629 	.word	0x00032629
   23d00:	00037a1d 	.word	0x00037a1d
   23d04:	20000008 	.word	0x20000008
   23d08:	700ffc00 	.word	0x700ffc00

00023d0c <lfs_dir_read>:
    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
   23d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d10:	4690      	mov	r8, r2
   23d12:	460c      	mov	r4, r1
   23d14:	4605      	mov	r5, r0
   23d16:	f44f 7284 	mov.w	r2, #264	; 0x108
   23d1a:	2100      	movs	r1, #0
   23d1c:	4640      	mov	r0, r8
   23d1e:	f00c fc4c 	bl	305ba <memset>
    if (dir->pos == 0) {
   23d22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23d24:	b963      	cbnz	r3, 23d40 <lfs_dir_read+0x34>
        info->type = LFS_TYPE_DIR;
   23d26:	2302      	movs	r3, #2
   23d28:	f888 3000 	strb.w	r3, [r8]
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   23d2c:	4b1d      	ldr	r3, [pc, #116]	; (23da4 <lfs_dir_read+0x98>)
   23d2e:	881b      	ldrh	r3, [r3, #0]
   23d30:	f8a8 3008 	strh.w	r3, [r8, #8]
        return true;
   23d34:	2001      	movs	r0, #1
        dir->pos += 1;
   23d36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23d38:	3301      	adds	r3, #1
   23d3a:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_rawread(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (dir->pos == 1) {
   23d40:	2b01      	cmp	r3, #1
   23d42:	d01d      	beq.n	23d80 <lfs_dir_read+0x74>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   23d44:	f104 0720 	add.w	r7, r4, #32
   23d48:	f104 0608 	add.w	r6, r4, #8
        if (dir->id == dir->m.count) {
   23d4c:	88a2      	ldrh	r2, [r4, #4]
   23d4e:	8ba3      	ldrh	r3, [r4, #28]
   23d50:	429a      	cmp	r2, r3
   23d52:	d10a      	bne.n	23d6a <lfs_dir_read+0x5e>
            if (!dir->m.split) {
   23d54:	7fe0      	ldrb	r0, [r4, #31]
   23d56:	2800      	cmp	r0, #0
   23d58:	d0f0      	beq.n	23d3c <lfs_dir_read+0x30>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   23d5a:	463a      	mov	r2, r7
   23d5c:	4631      	mov	r1, r6
   23d5e:	4628      	mov	r0, r5
   23d60:	f00b f972 	bl	2f048 <lfs_dir_fetch>
            if (err) {
   23d64:	2800      	cmp	r0, #0
   23d66:	d1e9      	bne.n	23d3c <lfs_dir_read+0x30>
            dir->id = 0;
   23d68:	80a0      	strh	r0, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
   23d6a:	4643      	mov	r3, r8
   23d6c:	4631      	mov	r1, r6
   23d6e:	4628      	mov	r0, r5
   23d70:	88a2      	ldrh	r2, [r4, #4]
   23d72:	f7fd f82b 	bl	20dcc <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
   23d76:	b970      	cbnz	r0, 23d96 <lfs_dir_read+0x8a>
        dir->id += 1;
   23d78:	88a3      	ldrh	r3, [r4, #4]
   23d7a:	3301      	adds	r3, #1
   23d7c:	80a3      	strh	r3, [r4, #4]
    dir->pos += 1;
   23d7e:	e7d9      	b.n	23d34 <lfs_dir_read+0x28>
        info->type = LFS_TYPE_DIR;
   23d80:	4643      	mov	r3, r8
   23d82:	2202      	movs	r2, #2
   23d84:	f803 2b08 	strb.w	r2, [r3], #8
   23d88:	4a07      	ldr	r2, [pc, #28]	; (23da8 <lfs_dir_read+0x9c>)
   23d8a:	8811      	ldrh	r1, [r2, #0]
   23d8c:	7892      	ldrb	r2, [r2, #2]
   23d8e:	f8a8 1008 	strh.w	r1, [r8, #8]
   23d92:	709a      	strb	r2, [r3, #2]
   23d94:	e7ce      	b.n	23d34 <lfs_dir_read+0x28>
        if (err && err != LFS_ERR_NOENT) {
   23d96:	1c83      	adds	r3, r0, #2
   23d98:	d1d0      	bne.n	23d3c <lfs_dir_read+0x30>
        dir->id += 1;
   23d9a:	88a3      	ldrh	r3, [r4, #4]
   23d9c:	3301      	adds	r3, #1
   23d9e:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
   23da0:	e7d4      	b.n	23d4c <lfs_dir_read+0x40>
   23da2:	bf00      	nop
   23da4:	00037ab0 	.word	0x00037ab0
   23da8:	00037aaf 	.word	0x00037aaf

00023dac <lfs_crc>:
 * use for LittleFS.
 */

/* Software CRC implementation with small lookup table */
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size)
{
   23dac:	b530      	push	{r4, r5, lr}
	};

	const uint8_t *data = buffer;

	for (size_t i = 0; i < size; i++) {
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   23dae:	4d0c      	ldr	r5, [pc, #48]	; (23de0 <lfs_crc+0x34>)
   23db0:	440a      	add	r2, r1
	for (size_t i = 0; i < size; i++) {
   23db2:	4291      	cmp	r1, r2
   23db4:	d100      	bne.n	23db8 <lfs_crc+0xc>
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
	}

	return crc;
}
   23db6:	bd30      	pop	{r4, r5, pc}
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   23db8:	f811 3b01 	ldrb.w	r3, [r1], #1
   23dbc:	ea83 0400 	eor.w	r4, r3, r0
   23dc0:	f004 040f 	and.w	r4, r4, #15
   23dc4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
   23dc8:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
   23dcc:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
   23dd0:	f003 030f 	and.w	r3, r3, #15
   23dd4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   23dd8:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
	for (size_t i = 0; i < size; i++) {
   23ddc:	e7e9      	b.n	23db2 <lfs_crc+0x6>
   23dde:	bf00      	nop
   23de0:	000324c4 	.word	0x000324c4

00023de4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   23de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23de8:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   23dea:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   23dec:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   23dee:	4293      	cmp	r3, r2
{
   23df0:	4617      	mov	r7, r2
   23df2:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   23df4:	d341      	bcc.n	23e7a <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   23df6:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   23df8:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   23dfc:	42bd      	cmp	r5, r7
   23dfe:	d103      	bne.n	23e08 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   23e00:	2000      	movs	r0, #0
}
   23e02:	b007      	add	sp, #28
   23e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   23e08:	fb0b f805 	mul.w	r8, fp, r5
   23e0c:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   23e10:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   23e12:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   23e16:	1d23      	adds	r3, r4, #4
   23e18:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   23e1a:	b9ca      	cbnz	r2, 23e50 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   23e1c:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   23e1e:	6861      	ldr	r1, [r4, #4]
   23e20:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   23e22:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   23e26:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   23e28:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   23e2a:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   23e2e:	1e5c      	subs	r4, r3, #1
   23e30:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   23e34:	425b      	negs	r3, r3
   23e36:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   23e3a:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   23e3c:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   23e40:	6884      	ldr	r4, [r0, #8]
   23e42:	3306      	adds	r3, #6
   23e44:	42a1      	cmp	r1, r4
   23e46:	bf28      	it	cs
   23e48:	f04f 31ff 	movcs.w	r1, #4294967295
   23e4c:	f00a ffc2 	bl	2edd4 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   23e50:	f859 3008 	ldr.w	r3, [r9, r8]
   23e54:	4630      	mov	r0, r6
   23e56:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   23e58:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   23e5a:	b2a9      	uxth	r1, r5
   23e5c:	6a1b      	ldr	r3, [r3, #32]
   23e5e:	9301      	str	r3, [sp, #4]
   23e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23e62:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   23e66:	9300      	str	r3, [sp, #0]
   23e68:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   23e6c:	9b05      	ldr	r3, [sp, #20]
   23e6e:	f00b fd82 	bl	2f976 <virtqueue_create>
		if (ret)
   23e72:	2800      	cmp	r0, #0
   23e74:	d1c5      	bne.n	23e02 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   23e76:	3501      	adds	r5, #1
   23e78:	e7c0      	b.n	23dfc <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   23e7a:	4801      	ldr	r0, [pc, #4]	; (23e80 <virtio_create_virtqueues+0x9c>)
   23e7c:	e7c1      	b.n	23e02 <virtio_create_virtqueues+0x1e>
   23e7e:	bf00      	nop
   23e80:	fffff440 	.word	0xfffff440

00023e84 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   23e84:	b510      	push	{r4, lr}
	if (vq) {
   23e86:	4604      	mov	r4, r0
   23e88:	b190      	cbz	r0, 23eb0 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   23e8a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   23e8c:	8943      	ldrh	r3, [r0, #10]
   23e8e:	429a      	cmp	r2, r3
   23e90:	d009      	beq.n	23ea6 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   23e92:	4b08      	ldr	r3, [pc, #32]	; (23eb4 <virtqueue_free+0x30>)
   23e94:	781a      	ldrb	r2, [r3, #0]
   23e96:	2a03      	cmp	r2, #3
   23e98:	d905      	bls.n	23ea6 <virtqueue_free+0x22>
   23e9a:	685b      	ldr	r3, [r3, #4]
   23e9c:	b11b      	cbz	r3, 23ea6 <virtqueue_free+0x22>
   23e9e:	6842      	ldr	r2, [r0, #4]
   23ea0:	4905      	ldr	r1, [pc, #20]	; (23eb8 <virtqueue_free+0x34>)
   23ea2:	2004      	movs	r0, #4
   23ea4:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   23ea6:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   23ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23eac:	f00c bb21 	b.w	304f2 <k_free>
   23eb0:	bd10      	pop	{r4, pc}
   23eb2:	bf00      	nop
   23eb4:	200219c0 	.word	0x200219c0
   23eb8:	00038029 	.word	0x00038029

00023ebc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   23ebc:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   23ebe:	8944      	ldrh	r4, [r0, #10]
   23ec0:	428c      	cmp	r4, r1
   23ec2:	d912      	bls.n	23eea <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   23ec4:	6a03      	ldr	r3, [r0, #32]
   23ec6:	3c01      	subs	r4, #1
   23ec8:	885d      	ldrh	r5, [r3, #2]
   23eca:	402c      	ands	r4, r5
   23ecc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   23ed0:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   23ed2:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   23ed4:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   23ed8:	6a02      	ldr	r2, [r0, #32]
   23eda:	8853      	ldrh	r3, [r2, #2]
   23edc:	3301      	adds	r3, #1
   23ede:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   23ee0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   23ee2:	3301      	adds	r3, #1
   23ee4:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   23ee6:	2000      	movs	r0, #0
}
   23ee8:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   23eea:	4801      	ldr	r0, [pc, #4]	; (23ef0 <virtqueue_add_consumed_buffer+0x34>)
   23eec:	e7fc      	b.n	23ee8 <virtqueue_add_consumed_buffer+0x2c>
   23eee:	bf00      	nop
   23ef0:	fffff441 	.word	0xfffff441

00023ef4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   23ef4:	b470      	push	{r4, r5, r6}
   23ef6:	9e03      	ldr	r6, [sp, #12]
   23ef8:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   23efa:	b158      	cbz	r0, 23f14 <rpmsg_send_offchannel_raw+0x20>
   23efc:	6a00      	ldr	r0, [r0, #32]
   23efe:	b148      	cbz	r0, 23f14 <rpmsg_send_offchannel_raw+0x20>
   23f00:	b143      	cbz	r3, 23f14 <rpmsg_send_offchannel_raw+0x20>
   23f02:	3401      	adds	r4, #1
   23f04:	d006      	beq.n	23f14 <rpmsg_send_offchannel_raw+0x20>
   23f06:	2e00      	cmp	r6, #0
   23f08:	db04      	blt.n	23f14 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   23f0a:	6f84      	ldr	r4, [r0, #120]	; 0x78
   23f0c:	b114      	cbz	r4, 23f14 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   23f0e:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   23f10:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   23f12:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   23f14:	4801      	ldr	r0, [pc, #4]	; (23f1c <rpmsg_send_offchannel_raw+0x28>)
}
   23f16:	bc70      	pop	{r4, r5, r6}
   23f18:	4770      	bx	lr
   23f1a:	bf00      	nop
   23f1c:	fffff82d 	.word	0xfffff82d

00023f20 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   23f20:	b470      	push	{r4, r5, r6}
   23f22:	9e03      	ldr	r6, [sp, #12]
   23f24:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   23f26:	b160      	cbz	r0, 23f42 <rpmsg_send_offchannel_nocopy+0x22>
   23f28:	6a00      	ldr	r0, [r0, #32]
   23f2a:	b150      	cbz	r0, 23f42 <rpmsg_send_offchannel_nocopy+0x22>
   23f2c:	b14b      	cbz	r3, 23f42 <rpmsg_send_offchannel_nocopy+0x22>
   23f2e:	3401      	adds	r4, #1
   23f30:	d007      	beq.n	23f42 <rpmsg_send_offchannel_nocopy+0x22>
   23f32:	2e00      	cmp	r6, #0
   23f34:	db05      	blt.n	23f42 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   23f36:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   23f3a:	b114      	cbz	r4, 23f42 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   23f3c:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   23f3e:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   23f40:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   23f42:	4801      	ldr	r0, [pc, #4]	; (23f48 <rpmsg_send_offchannel_nocopy+0x28>)
}
   23f44:	bc70      	pop	{r4, r5, r6}
   23f46:	4770      	bx	lr
   23f48:	fffff82d 	.word	0xfffff82d

00023f4c <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   23f4c:	b570      	push	{r4, r5, r6, lr}
   23f4e:	460c      	mov	r4, r1
   23f50:	4611      	mov	r1, r2
   23f52:	4605      	mov	r5, r0
   23f54:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   23f56:	4b0c      	ldr	r3, [pc, #48]	; (23f88 <rpmsg_register_endpoint+0x3c>)
   23f58:	2220      	movs	r2, #32
   23f5a:	2900      	cmp	r1, #0
   23f5c:	bf08      	it	eq
   23f5e:	4619      	moveq	r1, r3
   23f60:	4620      	mov	r0, r4
   23f62:	f00c fc8a 	bl	3087a <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   23f66:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   23f68:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   23f6a:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   23f6c:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   23f6e:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   23f70:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   23f72:	9b06      	ldr	r3, [sp, #24]
   23f74:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   23f76:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   23f78:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   23f7c:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   23f80:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   23f82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   23f84:	6013      	str	r3, [r2, #0]
}
   23f86:	bd70      	pop	{r4, r5, r6, pc}
   23f88:	0003688b 	.word	0x0003688b

00023f8c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   23f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23f90:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   23f94:	460d      	mov	r5, r1
   23f96:	4692      	mov	sl, r2
   23f98:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   23f9a:	4606      	mov	r6, r0
   23f9c:	2800      	cmp	r0, #0
   23f9e:	d06c      	beq.n	2407a <rpmsg_create_ept+0xee>
   23fa0:	2900      	cmp	r1, #0
   23fa2:	d06a      	beq.n	2407a <rpmsg_create_ept+0xee>
   23fa4:	f1b9 0f00 	cmp.w	r9, #0
   23fa8:	d067      	beq.n	2407a <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   23faa:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   23fae:	4640      	mov	r0, r8
   23fb0:	f00b fe4a 	bl	2fc48 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   23fb4:	1c78      	adds	r0, r7, #1
   23fb6:	d140      	bne.n	2403a <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   23fb8:	6cac      	ldr	r4, [r5, #72]	; 0x48
   23fba:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   23fbe:	f014 0401 	ands.w	r4, r4, #1
   23fc2:	d00b      	beq.n	23fdc <rpmsg_create_ept+0x50>
	for (bit = start;
   23fc4:	2400      	movs	r4, #0
	     bit++)
   23fc6:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   23fc8:	2c80      	cmp	r4, #128	; 0x80
   23fca:	d054      	beq.n	24076 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   23fcc:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   23fce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   23fd2:	f004 011f 	and.w	r1, r4, #31
   23fd6:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   23fd8:	07d1      	lsls	r1, r2, #31
   23fda:	d4f4      	bmi.n	23fc6 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   23fdc:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   23fde:	0960      	lsrs	r0, r4, #5
   23fe0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   23fe4:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   23fe8:	f004 041f 	and.w	r4, r4, #31
   23fec:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   23fee:	430a      	orrs	r2, r1
   23ff0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   23ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23ff6:	4652      	mov	r2, sl
   23ff8:	e9cd 9301 	strd	r9, r3, [sp, #4]
   23ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23ffe:	4631      	mov	r1, r6
   24000:	9300      	str	r3, [sp, #0]
   24002:	4628      	mov	r0, r5
   24004:	463b      	mov	r3, r7
   24006:	f7ff ffa1 	bl	23f4c <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   2400a:	4640      	mov	r0, r8
   2400c:	f001 fac8 	bl	255a0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   24010:	7834      	ldrb	r4, [r6, #0]
   24012:	b174      	cbz	r4, 24032 <rpmsg_create_ept+0xa6>
   24014:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   24018:	b15c      	cbz	r4, 24032 <rpmsg_create_ept+0xa6>
   2401a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2401c:	3301      	adds	r3, #1
   2401e:	d12e      	bne.n	2407e <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   24020:	2100      	movs	r1, #0
   24022:	4630      	mov	r0, r6
   24024:	f00b fe3f 	bl	2fca6 <rpmsg_send_ns_message>

	if (status)
   24028:	4604      	mov	r4, r0
   2402a:	b110      	cbz	r0, 24032 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   2402c:	4630      	mov	r0, r6
   2402e:	f00b fe11 	bl	2fc54 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   24032:	4620      	mov	r0, r4
   24034:	b004      	add	sp, #16
   24036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   2403a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   2403e:	d3d9      	bcc.n	23ff4 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   24040:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   24044:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   24046:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   2404a:	d80f      	bhi.n	2406c <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   2404c:	0958      	lsrs	r0, r3, #5
   2404e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   24052:	f003 031f 	and.w	r3, r3, #31
   24056:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   2405a:	07d2      	lsls	r2, r2, #31
   2405c:	d40b      	bmi.n	24076 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2405e:	2201      	movs	r2, #1
   24060:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24064:	4323      	orrs	r3, r4
   24066:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   2406a:	e7c3      	b.n	23ff4 <rpmsg_create_ept+0x68>
   2406c:	4c05      	ldr	r4, [pc, #20]	; (24084 <rpmsg_create_ept+0xf8>)
   2406e:	4640      	mov	r0, r8
   24070:	f001 fa96 	bl	255a0 <z_impl_k_sem_give>
}
   24074:	e7dd      	b.n	24032 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   24076:	4c04      	ldr	r4, [pc, #16]	; (24088 <rpmsg_create_ept+0xfc>)
   24078:	e7f9      	b.n	2406e <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   2407a:	4c02      	ldr	r4, [pc, #8]	; (24084 <rpmsg_create_ept+0xf8>)
   2407c:	e7d9      	b.n	24032 <rpmsg_create_ept+0xa6>
   2407e:	2400      	movs	r4, #0
   24080:	e7d7      	b.n	24032 <rpmsg_create_ept+0xa6>
   24082:	bf00      	nop
   24084:	fffff82d 	.word	0xfffff82d
   24088:	fffff829 	.word	0xfffff829

0002408c <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   2408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   24090:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   24094:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   24098:	2300      	movs	r3, #0
{
   2409a:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   2409c:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   2409e:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   240a2:	2310      	movs	r3, #16
	rp_hdr.src = src;
   240a4:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   240a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   240aa:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   240ac:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   240b0:	f8ad 501c 	strh.w	r5, [sp, #28]
   240b4:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   240b6:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   240b8:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   240bc:	42b1      	cmp	r1, r6
   240be:	bf28      	it	cs
   240c0:	f04f 31ff 	movcs.w	r1, #4294967295
   240c4:	eb0d 0203 	add.w	r2, sp, r3
   240c8:	f00a fe4a 	bl	2ed60 <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   240cc:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   240ce:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   240d0:	d00b      	beq.n	240ea <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   240d2:	4924      	ldr	r1, [pc, #144]	; (24164 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   240d4:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   240d8:	4a23      	ldr	r2, [pc, #140]	; (24168 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   240da:	4824      	ldr	r0, [pc, #144]	; (2416c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   240dc:	f006 fad9 	bl	2a692 <assert_print>
   240e0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   240e4:	4820      	ldr	r0, [pc, #128]	; (24168 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   240e6:	f006 facd 	bl	2a684 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   240ea:	f104 0658 	add.w	r6, r4, #88	; 0x58
   240ee:	4630      	mov	r0, r6
   240f0:	f00b fe69 	bl	2fdc6 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   240f4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   240f8:	699b      	ldr	r3, [r3, #24]
   240fa:	b9d3      	cbnz	r3, 24132 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   240fc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   24100:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   24104:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24108:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   2410a:	b9cb      	cbnz	r3, 24140 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   2410c:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   24110:	f8cd 8000 	str.w	r8, [sp]
   24114:	2201      	movs	r2, #1
   24116:	a902      	add	r1, sp, #8
   24118:	f00b fc5a 	bl	2f9d0 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   2411c:	b1b0      	cbz	r0, 2414c <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   2411e:	4914      	ldr	r1, [pc, #80]	; (24170 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   24120:	f240 13b9 	movw	r3, #441	; 0x1b9
   24124:	4a10      	ldr	r2, [pc, #64]	; (24168 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   24126:	4811      	ldr	r0, [pc, #68]	; (2416c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   24128:	f006 fab3 	bl	2a692 <assert_print>
   2412c:	f240 11b9 	movw	r1, #441	; 0x1b9
   24130:	e7d8      	b.n	240e4 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   24132:	4639      	mov	r1, r7
   24134:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24138:	f00b fce0 	bl	2fafc <virtqueue_get_buffer_length>
   2413c:	4602      	mov	r2, r0
   2413e:	e7df      	b.n	24100 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   24140:	2b01      	cmp	r3, #1
   24142:	d103      	bne.n	2414c <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   24144:	4639      	mov	r1, r7
   24146:	f7ff feb9 	bl	23ebc <virtqueue_add_consumed_buffer>
   2414a:	e7e7      	b.n	2411c <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   2414c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24150:	f00b fd2b 	bl	2fbaa <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   24154:	4630      	mov	r0, r6
   24156:	f00b fe34 	bl	2fdc2 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   2415a:	4628      	mov	r0, r5
   2415c:	b008      	add	sp, #32
   2415e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24162:	bf00      	nop
   24164:	0003808e 	.word	0x0003808e
   24168:	0003804b 	.word	0x0003804b
   2416c:	00032629 	.word	0x00032629
   24170:	000380a7 	.word	0x000380a7

00024174 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   24174:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   24178:	6803      	ldr	r3, [r0, #0]
   2417a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   2417c:	f107 0658 	add.w	r6, r7, #88	; 0x58
   24180:	4630      	mov	r0, r6
   24182:	f00b fe20 	bl	2fdc6 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   24186:	4638      	mov	r0, r7
   24188:	f10d 020a 	add.w	r2, sp, #10
   2418c:	a903      	add	r1, sp, #12
   2418e:	f00b fe8d 	bl	2feac <rpmsg_virtio_get_rx_buffer>
   24192:	4604      	mov	r4, r0
   24194:	4630      	mov	r0, r6
   24196:	f00b fe14 	bl	2fdc2 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   2419a:	2c00      	cmp	r4, #0
   2419c:	d04f      	beq.n	2423e <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   2419e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   241a2:	4630      	mov	r0, r6
   241a4:	60a3      	str	r3, [r4, #8]
   241a6:	f00b fe0e 	bl	2fdc6 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   241aa:	f04f 33ff 	mov.w	r3, #4294967295
   241ae:	2100      	movs	r1, #0
   241b0:	4638      	mov	r0, r7
   241b2:	6862      	ldr	r2, [r4, #4]
   241b4:	f00b fdab 	bl	2fd0e <rpmsg_get_endpoint>
   241b8:	4605      	mov	r5, r0
   241ba:	4630      	mov	r0, r6
   241bc:	f00b fe01 	bl	2fdc2 <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   241c0:	b1ed      	cbz	r5, 241fe <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   241c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   241c4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   241c6:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   241c8:	bf08      	it	eq
   241ca:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   241cc:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   241ce:	bf08      	it	eq
   241d0:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   241d2:	6823      	ldr	r3, [r4, #0]
   241d4:	89a2      	ldrh	r2, [r4, #12]
   241d6:	9100      	str	r1, [sp, #0]
   241d8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   241dc:	f104 0110 	add.w	r1, r4, #16
   241e0:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   241e2:	2800      	cmp	r0, #0
   241e4:	da0b      	bge.n	241fe <rpmsg_virtio_rx_callback+0x8a>
   241e6:	4917      	ldr	r1, [pc, #92]	; (24244 <rpmsg_virtio_rx_callback+0xd0>)
   241e8:	4817      	ldr	r0, [pc, #92]	; (24248 <rpmsg_virtio_rx_callback+0xd4>)
   241ea:	f240 2343 	movw	r3, #579	; 0x243
   241ee:	4a17      	ldr	r2, [pc, #92]	; (2424c <rpmsg_virtio_rx_callback+0xd8>)
   241f0:	f006 fa4f 	bl	2a692 <assert_print>
   241f4:	f240 2143 	movw	r1, #579	; 0x243
   241f8:	4814      	ldr	r0, [pc, #80]	; (2424c <rpmsg_virtio_rx_callback+0xd8>)
   241fa:	f006 fa43 	bl	2a684 <assert_post_action>
   241fe:	4630      	mov	r0, r6
   24200:	f00b fde1 	bl	2fdc6 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   24204:	68a3      	ldr	r3, [r4, #8]
   24206:	2b00      	cmp	r3, #0
   24208:	db06      	blt.n	24218 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2420a:	4621      	mov	r1, r4
   2420c:	4638      	mov	r0, r7
   2420e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   24212:	9a03      	ldr	r2, [sp, #12]
   24214:	f00b fe61 	bl	2feda <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   24218:	4638      	mov	r0, r7
   2421a:	f10d 020a 	add.w	r2, sp, #10
   2421e:	a903      	add	r1, sp, #12
   24220:	f00b fe44 	bl	2feac <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   24224:	4604      	mov	r4, r0
   24226:	b118      	cbz	r0, 24230 <rpmsg_virtio_rx_callback+0xbc>
   24228:	4630      	mov	r0, r6
   2422a:	f00b fdca 	bl	2fdc2 <k_sem_give>
	while (rp_hdr) {
   2422e:	e7b6      	b.n	2419e <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   24230:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   24234:	f00b fcb9 	bl	2fbaa <virtqueue_kick>
   24238:	4630      	mov	r0, r6
   2423a:	f00b fdc2 	bl	2fdc2 <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   2423e:	b004      	add	sp, #16
   24240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24244:	000380b3 	.word	0x000380b3
   24248:	00032629 	.word	0x00032629
   2424c:	0003804b 	.word	0x0003804b

00024250 <rpmsg_virtio_send_offchannel_raw>:
{
   24250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24254:	b085      	sub	sp, #20
   24256:	460f      	mov	r7, r1
   24258:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   2425a:	a903      	add	r1, sp, #12
   2425c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   2425e:	4606      	mov	r6, r0
   24260:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   24262:	f00b fe85 	bl	2ff70 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   24266:	4604      	mov	r4, r0
   24268:	b350      	cbz	r0, 242c0 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   2426a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2426c:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   2426e:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   24272:	429d      	cmp	r5, r3
   24274:	bfa8      	it	ge
   24276:	461d      	movge	r5, r3
   24278:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   2427a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   2427e:	1a61      	subs	r1, r4, r1
   24280:	4561      	cmp	r1, ip
   24282:	bf28      	it	cs
   24284:	f04f 31ff 	movcs.w	r1, #4294967295
   24288:	462b      	mov	r3, r5
   2428a:	464a      	mov	r2, r9
   2428c:	f00a fd68 	bl	2ed60 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   24290:	4285      	cmp	r5, r0
   24292:	d00b      	beq.n	242ac <rpmsg_virtio_send_offchannel_raw+0x5c>
   24294:	490b      	ldr	r1, [pc, #44]	; (242c4 <rpmsg_virtio_send_offchannel_raw+0x74>)
   24296:	480c      	ldr	r0, [pc, #48]	; (242c8 <rpmsg_virtio_send_offchannel_raw+0x78>)
   24298:	f240 2303 	movw	r3, #515	; 0x203
   2429c:	4a0b      	ldr	r2, [pc, #44]	; (242cc <rpmsg_virtio_send_offchannel_raw+0x7c>)
   2429e:	f006 f9f8 	bl	2a692 <assert_print>
   242a2:	f240 2103 	movw	r1, #515	; 0x203
   242a6:	4809      	ldr	r0, [pc, #36]	; (242cc <rpmsg_virtio_send_offchannel_raw+0x7c>)
   242a8:	f006 f9ec 	bl	2a684 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   242ac:	4623      	mov	r3, r4
   242ae:	4642      	mov	r2, r8
   242b0:	4639      	mov	r1, r7
   242b2:	4630      	mov	r0, r6
   242b4:	9500      	str	r5, [sp, #0]
   242b6:	f7ff fee9 	bl	2408c <rpmsg_virtio_send_offchannel_nocopy>
}
   242ba:	b005      	add	sp, #20
   242bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   242c0:	4803      	ldr	r0, [pc, #12]	; (242d0 <rpmsg_virtio_send_offchannel_raw+0x80>)
   242c2:	e7fa      	b.n	242ba <rpmsg_virtio_send_offchannel_raw+0x6a>
   242c4:	000380bf 	.word	0x000380bf
   242c8:	00032629 	.word	0x00032629
   242cc:	0003804b 	.word	0x0003804b
   242d0:	fffff82e 	.word	0xfffff82e

000242d4 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   242d4:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   242d6:	4604      	mov	r4, r0
   242d8:	b1e0      	cbz	r0, 24314 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   242da:	f100 0558 	add.w	r5, r0, #88	; 0x58
   242de:	4628      	mov	r0, r5
   242e0:	f00b fd71 	bl	2fdc6 <__metal_mutex_acquire>
   242e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   242e8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   242ea:	b953      	cbnz	r3, 24302 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   242ec:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   242f0:	3c10      	subs	r4, #16
	if (length <= 0) {
   242f2:	2c00      	cmp	r4, #0
   242f4:	dc00      	bgt.n	242f8 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   242f6:	4c08      	ldr	r4, [pc, #32]	; (24318 <rpmsg_virtio_get_buffer_size+0x44>)
   242f8:	4628      	mov	r0, r5
   242fa:	f00b fd62 	bl	2fdc2 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   242fe:	4620      	mov	r0, r4
   24300:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   24302:	2b01      	cmp	r3, #1
   24304:	d1f7      	bne.n	242f6 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   24306:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   2430a:	f00b fc85 	bl	2fc18 <virtqueue_get_desc_size>
   2430e:	f1a0 0410 	sub.w	r4, r0, #16
   24312:	e7ee      	b.n	242f2 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   24314:	4c01      	ldr	r4, [pc, #4]	; (2431c <rpmsg_virtio_get_buffer_size+0x48>)
   24316:	e7f2      	b.n	242fe <rpmsg_virtio_get_buffer_size+0x2a>
   24318:	fffff82e 	.word	0xfffff82e
   2431c:	fffff82d 	.word	0xfffff82d

00024320 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   24320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24324:	b08a      	sub	sp, #40	; 0x28
   24326:	460d      	mov	r5, r1
   24328:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   2432c:	4690      	mov	r8, r2
   2432e:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   24330:	4604      	mov	r4, r0
   24332:	b920      	cbnz	r0, 2433e <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   24334:	4f81      	ldr	r7, [pc, #516]	; (2453c <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   24336:	4638      	mov	r0, r7
   24338:	b00a      	add	sp, #40	; 0x28
   2433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   2433e:	2900      	cmp	r1, #0
   24340:	d0f8      	beq.n	24334 <rpmsg_init_vdev_with_config+0x14>
   24342:	2b00      	cmp	r3, #0
   24344:	d0f6      	beq.n	24334 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   24346:	2294      	movs	r2, #148	; 0x94
   24348:	2100      	movs	r1, #0
   2434a:	f00c f936 	bl	305ba <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2434e:	2201      	movs	r2, #1
   24350:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24354:	4611      	mov	r1, r2
   24356:	f00b ff34 	bl	301c2 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   2435a:	4b79      	ldr	r3, [pc, #484]	; (24540 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   2435c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   24360:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   24364:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   24366:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   24368:	4b76      	ldr	r3, [pc, #472]	; (24544 <rpmsg_init_vdev_with_config+0x224>)
   2436a:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   2436c:	4b76      	ldr	r3, [pc, #472]	; (24548 <rpmsg_init_vdev_with_config+0x228>)
   2436e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   24372:	4b76      	ldr	r3, [pc, #472]	; (2454c <rpmsg_init_vdev_with_config+0x22c>)
   24374:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   24378:	4b75      	ldr	r3, [pc, #468]	; (24550 <rpmsg_init_vdev_with_config+0x230>)
   2437a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   2437e:	4b75      	ldr	r3, [pc, #468]	; (24554 <rpmsg_init_vdev_with_config+0x234>)
   24380:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   24384:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24388:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   2438c:	f1b8 0f00 	cmp.w	r8, #0
   24390:	d16e      	bne.n	24470 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   24392:	2f00      	cmp	r7, #0
   24394:	d0ce      	beq.n	24334 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   24396:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   2439a:	f104 0394 	add.w	r3, r4, #148	; 0x94
   2439e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   243a2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   243a6:	6a03      	ldr	r3, [r0, #32]
   243a8:	689b      	ldr	r3, [r3, #8]
   243aa:	4798      	blx	r3
   243ac:	2300      	movs	r3, #0
   243ae:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   243b0:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   243b4:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   243b6:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   243ba:	f1b8 0f00 	cmp.w	r8, #0
   243be:	d16d      	bne.n	2449c <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   243c0:	7a3b      	ldrb	r3, [r7, #8]
   243c2:	2b00      	cmp	r3, #0
   243c4:	d068      	beq.n	24498 <rpmsg_init_vdev_with_config+0x178>
   243c6:	f109 030c 	add.w	r3, r9, #12
   243ca:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   243ce:	f1b9 0f00 	cmp.w	r9, #0
   243d2:	d0af      	beq.n	24334 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   243d4:	f8d9 2008 	ldr.w	r2, [r9, #8]
   243d8:	2a00      	cmp	r2, #0
   243da:	f000 80ad 	beq.w	24538 <rpmsg_init_vdev_with_config+0x218>
   243de:	689b      	ldr	r3, [r3, #8]
   243e0:	2b00      	cmp	r3, #0
   243e2:	f000 80a9 	beq.w	24538 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   243e6:	4b5c      	ldr	r3, [pc, #368]	; (24558 <rpmsg_init_vdev_with_config+0x238>)
   243e8:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   243ea:	4b5c      	ldr	r3, [pc, #368]	; (2455c <rpmsg_init_vdev_with_config+0x23c>)
   243ec:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   243ee:	4b5c      	ldr	r3, [pc, #368]	; (24560 <rpmsg_init_vdev_with_config+0x240>)
   243f0:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   243f2:	4b5c      	ldr	r3, [pc, #368]	; (24564 <rpmsg_init_vdev_with_config+0x244>)
   243f4:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   243f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   243f8:	681b      	ldr	r3, [r3, #0]
   243fa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   243fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24400:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   24402:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   24406:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   2440a:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   2440e:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   24410:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   24414:	9300      	str	r3, [sp, #0]
   24416:	2202      	movs	r2, #2
   24418:	2100      	movs	r1, #0
   2441a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   2441e:	ab04      	add	r3, sp, #16
   24420:	f7ff fce0 	bl	23de4 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   24424:	4607      	mov	r7, r0
   24426:	2800      	cmp	r0, #0
   24428:	d185      	bne.n	24336 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   2442a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   2442e:	f00b fb8e 	bl	2fb4e <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   24432:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24434:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   24436:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   24438:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2443a:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   2443c:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   2443e:	f1b8 0f00 	cmp.w	r8, #0
   24442:	d161      	bne.n	24508 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24444:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   24446:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2444a:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   2444c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   24450:	895b      	ldrh	r3, [r3, #10]
   24452:	4553      	cmp	r3, sl
   24454:	d834      	bhi.n	244c0 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   24456:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   2445a:	e9c4 4400 	strd	r4, r4, [r4]
   2445e:	2b00      	cmp	r3, #0
   24460:	d159      	bne.n	24516 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   24462:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   24466:	2104      	movs	r1, #4
   24468:	6a03      	ldr	r3, [r0, #32]
   2446a:	685b      	ldr	r3, [r3, #4]
   2446c:	4798      	blx	r3
}
   2446e:	e762      	b.n	24336 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   24470:	f1b8 0f01 	cmp.w	r8, #1
   24474:	d195      	bne.n	243a2 <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   24476:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2447a:	6a03      	ldr	r3, [r0, #32]
   2447c:	681b      	ldr	r3, [r3, #0]
   2447e:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   24480:	0642      	lsls	r2, r0, #25
   24482:	d506      	bpl.n	24492 <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   24484:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   24488:	2100      	movs	r1, #0
   2448a:	6a03      	ldr	r3, [r0, #32]
   2448c:	685b      	ldr	r3, [r3, #4]
   2448e:	4798      	blx	r3
}
   24490:	e7f1      	b.n	24476 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   24492:	0743      	lsls	r3, r0, #29
   24494:	d5ef      	bpl.n	24476 <rpmsg_init_vdev_with_config+0x156>
   24496:	e784      	b.n	243a2 <rpmsg_init_vdev_with_config+0x82>
   24498:	464b      	mov	r3, r9
   2449a:	e796      	b.n	243ca <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   2449c:	f1b8 0f01 	cmp.w	r8, #1
   244a0:	d1b1      	bne.n	24406 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   244a2:	4b2e      	ldr	r3, [pc, #184]	; (2455c <rpmsg_init_vdev_with_config+0x23c>)
   244a4:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   244a6:	4b2c      	ldr	r3, [pc, #176]	; (24558 <rpmsg_init_vdev_with_config+0x238>)
   244a8:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   244aa:	4b2e      	ldr	r3, [pc, #184]	; (24564 <rpmsg_init_vdev_with_config+0x244>)
   244ac:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   244ae:	4b2c      	ldr	r3, [pc, #176]	; (24560 <rpmsg_init_vdev_with_config+0x240>)
   244b0:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   244b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   244b4:	699b      	ldr	r3, [r3, #24]
   244b6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   244ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   244bc:	681b      	ldr	r3, [r3, #0]
   244be:	e7a0      	b.n	24402 <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   244c0:	4648      	mov	r0, r9
   244c2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   244c6:	f00b fd44 	bl	2ff52 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   244ca:	4605      	mov	r5, r0
   244cc:	b1c8      	cbz	r0, 24502 <rpmsg_init_vdev_with_config+0x1e2>
   244ce:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   244d0:	9008      	str	r0, [sp, #32]
   244d2:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   244d4:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   244d6:	2200      	movs	r2, #0
   244d8:	4281      	cmp	r1, r0
   244da:	bf28      	it	cs
   244dc:	f04f 31ff 	movcs.w	r1, #4294967295
   244e0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   244e4:	4630      	mov	r0, r6
   244e6:	f00a fc75 	bl	2edd4 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   244ea:	9500      	str	r5, [sp, #0]
   244ec:	2301      	movs	r3, #1
   244ee:	2200      	movs	r2, #0
   244f0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   244f4:	a908      	add	r1, sp, #32
   244f6:	f00b fa6b 	bl	2f9d0 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   244fa:	b918      	cbnz	r0, 24504 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   244fc:	f10a 0a01 	add.w	sl, sl, #1
   24500:	e7a4      	b.n	2444c <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   24502:	4819      	ldr	r0, [pc, #100]	; (24568 <rpmsg_init_vdev_with_config+0x248>)
   24504:	4607      	mov	r7, r0
   24506:	e716      	b.n	24336 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   24508:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   2450c:	e9c4 4400 	strd	r4, r4, [r4]
   24510:	2b00      	cmp	r3, #0
   24512:	f43f af10 	beq.w	24336 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   24516:	2300      	movs	r3, #0
   24518:	9302      	str	r3, [sp, #8]
   2451a:	4b14      	ldr	r3, [pc, #80]	; (2456c <rpmsg_init_vdev_with_config+0x24c>)
   2451c:	4620      	mov	r0, r4
   2451e:	9301      	str	r3, [sp, #4]
   24520:	2335      	movs	r3, #53	; 0x35
   24522:	4a13      	ldr	r2, [pc, #76]	; (24570 <rpmsg_init_vdev_with_config+0x250>)
   24524:	9300      	str	r3, [sp, #0]
   24526:	f104 0108 	add.w	r1, r4, #8
   2452a:	f7ff fd0f 	bl	23f4c <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   2452e:	f1b8 0f00 	cmp.w	r8, #0
   24532:	f47f af00 	bne.w	24336 <rpmsg_init_vdev_with_config+0x16>
   24536:	e794      	b.n	24462 <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   24538:	4f0b      	ldr	r7, [pc, #44]	; (24568 <rpmsg_init_vdev_with_config+0x248>)
   2453a:	e6fc      	b.n	24336 <rpmsg_init_vdev_with_config+0x16>
   2453c:	fffff82d 	.word	0xfffff82d
   24540:	00024251 	.word	0x00024251
   24544:	0002fdb3 	.word	0x0002fdb3
   24548:	0002ff13 	.word	0x0002ff13
   2454c:	0002ff71 	.word	0x0002ff71
   24550:	0002408d 	.word	0x0002408d
   24554:	0002fdd3 	.word	0x0002fdd3
   24558:	000380cd 	.word	0x000380cd
   2455c:	000380d3 	.word	0x000380d3
   24560:	00024175 	.word	0x00024175
   24564:	0002fdc1 	.word	0x0002fdc1
   24568:	fffff82e 	.word	0xfffff82e
   2456c:	0002fe15 	.word	0x0002fe15
   24570:	000380d9 	.word	0x000380d9

00024574 <rpmsg_init_vdev>:
{
   24574:	b5f0      	push	{r4, r5, r6, r7, lr}
   24576:	4605      	mov	r5, r0
   24578:	460e      	mov	r6, r1
   2457a:	4617      	mov	r7, r2
   2457c:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   2457e:	4a07      	ldr	r2, [pc, #28]	; (2459c <rpmsg_init_vdev+0x28>)
   24580:	ac03      	add	r4, sp, #12
   24582:	ca07      	ldmia	r2, {r0, r1, r2}
   24584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   24588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2458a:	4631      	mov	r1, r6
   2458c:	9200      	str	r2, [sp, #0]
   2458e:	4628      	mov	r0, r5
   24590:	463a      	mov	r2, r7
   24592:	9401      	str	r4, [sp, #4]
   24594:	f7ff fec4 	bl	24320 <rpmsg_init_vdev_with_config>
}
   24598:	b007      	add	sp, #28
   2459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2459c:	00031698 	.word	0x00031698

000245a0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   245a0:	2203      	movs	r2, #3
   245a2:	4b11      	ldr	r3, [pc, #68]	; (245e8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   245a4:	4911      	ldr	r1, [pc, #68]	; (245ec <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   245a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   245a8:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   245aa:	4a11      	ldr	r2, [pc, #68]	; (245f0 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   245ac:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   245ae:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   245b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   245b4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   245b6:	2200      	movs	r2, #0
   245b8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   245ba:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   245bc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   245be:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   245c0:	490c      	ldr	r1, [pc, #48]	; (245f4 <_DoInit+0x54>)
   245c2:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   245c4:	2110      	movs	r1, #16
   245c6:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   245c8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   245ca:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   245cc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   245ce:	4a0a      	ldr	r2, [pc, #40]	; (245f8 <_DoInit+0x58>)
   245d0:	6812      	ldr	r2, [r2, #0]
   245d2:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   245d6:	4a09      	ldr	r2, [pc, #36]	; (245fc <_DoInit+0x5c>)
   245d8:	6810      	ldr	r0, [r2, #0]
   245da:	8892      	ldrh	r2, [r2, #4]
   245dc:	6018      	str	r0, [r3, #0]
   245de:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   245e0:	2220      	movs	r2, #32
   245e2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   245e4:	4770      	bx	lr
   245e6:	bf00      	nop
   245e8:	200219e0 	.word	0x200219e0
   245ec:	000380dc 	.word	0x000380dc
   245f0:	20022427 	.word	0x20022427
   245f4:	20022417 	.word	0x20022417
   245f8:	000380e5 	.word	0x000380e5
   245fc:	000380e9 	.word	0x000380e9

00024600 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   24604:	f04f 0b18 	mov.w	fp, #24
   24608:	4f20      	ldr	r7, [pc, #128]	; (2468c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2460a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   2460c:	fb0b 7200 	mla	r2, fp, r0, r7
   24610:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   24612:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24614:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24616:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24618:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2461a:	d831      	bhi.n	24680 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   2461c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   24620:	ebaa 0905 	sub.w	r9, sl, r5
   24624:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   24628:	4294      	cmp	r4, r2
   2462a:	d811      	bhi.n	24650 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2462c:	2318      	movs	r3, #24
   2462e:	fb06 3303 	mla	r3, r6, r3, r3
   24632:	443b      	add	r3, r7
   24634:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24636:	4622      	mov	r2, r4
   24638:	4641      	mov	r1, r8
   2463a:	4428      	add	r0, r5
   2463c:	f00b ff83 	bl	30546 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   24640:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   24642:	2318      	movs	r3, #24
      return 1;
   24644:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   24646:	fb03 7306 	mla	r3, r3, r6, r7
   2464a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   2464c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   24650:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   24652:	429c      	cmp	r4, r3
   24654:	d818      	bhi.n	24688 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24656:	fb00 bb0b 	mla	fp, r0, fp, fp
   2465a:	44bb      	add	fp, r7
   2465c:	f8db 0004 	ldr.w	r0, [fp, #4]
   24660:	464a      	mov	r2, r9
   24662:	4428      	add	r0, r5
   24664:	442c      	add	r4, r5
   24666:	f00b ff6e 	bl	30546 <memcpy>
      if (NumBytes) {
   2466a:	ebb4 040a 	subs.w	r4, r4, sl
   2466e:	d0e8      	beq.n	24642 <SEGGER_RTT_WriteSkipNoLock+0x42>
   24670:	4622      	mov	r2, r4
   24672:	f8db 0004 	ldr.w	r0, [fp, #4]
   24676:	eb08 0109 	add.w	r1, r8, r9
   2467a:	f00b ff64 	bl	30546 <memcpy>
      return 1;
   2467e:	e7e0      	b.n	24642 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   24680:	3b01      	subs	r3, #1
   24682:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   24684:	42a3      	cmp	r3, r4
   24686:	d2d1      	bcs.n	2462c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   24688:	2000      	movs	r0, #0
   2468a:	e7df      	b.n	2464c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   2468c:	200219e0 	.word	0x200219e0

00024690 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   24690:	2218      	movs	r2, #24
   24692:	4b03      	ldr	r3, [pc, #12]	; (246a0 <SEGGER_RTT_HasDataUp+0x10>)
   24694:	fb02 3300 	mla	r3, r2, r0, r3
   24698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   2469a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   2469c:	1a80      	subs	r0, r0, r2
   2469e:	4770      	bx	lr
   246a0:	200219e0 	.word	0x200219e0

000246a4 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   246a4:	f04f 32ff 	mov.w	r2, #4294967295
   246a8:	f04f 33ff 	mov.w	r3, #4294967295
   246ac:	4801      	ldr	r0, [pc, #4]	; (246b4 <zephyr_rtt_mutex_lock+0x10>)
   246ae:	f000 bd15 	b.w	250dc <z_impl_k_mutex_lock>
   246b2:	bf00      	nop
   246b4:	20008b68 	.word	0x20008b68

000246b8 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   246b8:	4801      	ldr	r0, [pc, #4]	; (246c0 <zephyr_rtt_mutex_unlock+0x8>)
   246ba:	f000 bddf 	b.w	2527c <z_impl_k_mutex_unlock>
   246be:	bf00      	nop
   246c0:	20008b68 	.word	0x20008b68

000246c4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   246c4:	4b01      	ldr	r3, [pc, #4]	; (246cc <z_impl_z_errno+0x8>)
   246c6:	6898      	ldr	r0, [r3, #8]
}
   246c8:	3064      	adds	r0, #100	; 0x64
   246ca:	4770      	bx	lr
   246cc:	20021a88 	.word	0x20021a88

000246d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   246d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   246d4:	b086      	sub	sp, #24
   246d6:	4604      	mov	r4, r0
   246d8:	460e      	mov	r6, r1
   246da:	af00      	add	r7, sp, #0
	__asm__ volatile(
   246dc:	f04f 0320 	mov.w	r3, #32
   246e0:	f3ef 8811 	mrs	r8, BASEPRI
   246e4:	f383 8812 	msr	BASEPRI_MAX, r3
   246e8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   246ec:	f002 fe80 	bl	273f0 <z_impl_z_current_get>
   246f0:	2c04      	cmp	r4, #4
   246f2:	bf98      	it	ls
   246f4:	4b34      	ldrls	r3, [pc, #208]	; (247c8 <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   246f6:	46e9      	mov	r9, sp
   246f8:	b08a      	sub	sp, #40	; 0x28
   246fa:	4605      	mov	r5, r0
   246fc:	466a      	mov	r2, sp
   246fe:	bf94      	ite	ls
   24700:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   24704:	4b31      	ldrhi	r3, [pc, #196]	; (247cc <z_fatal_error+0xfc>)
   24706:	61d3      	str	r3, [r2, #28]
   24708:	f240 3301 	movw	r3, #769	; 0x301
   2470c:	f04f 0a00 	mov.w	sl, #0
   24710:	8493      	strh	r3, [r2, #36]	; 0x24
   24712:	492f      	ldr	r1, [pc, #188]	; (247d0 <z_fatal_error+0x100>)
   24714:	4b2f      	ldr	r3, [pc, #188]	; (247d4 <z_fatal_error+0x104>)
   24716:	e9c2 1405 	strd	r1, r4, [r2, #20]
   2471a:	f8c2 a020 	str.w	sl, [r2, #32]
   2471e:	f842 3f10 	str.w	r3, [r2, #16]!
   24722:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   24726:	4653      	mov	r3, sl
   24728:	482b      	ldr	r0, [pc, #172]	; (247d8 <z_fatal_error+0x108>)
   2472a:	f7ea f89d 	bl	e868 <z_impl_z_log_msg_static_create>
   2472e:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24730:	b17e      	cbz	r6, 24752 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   24732:	69f3      	ldr	r3, [r6, #28]
   24734:	f3c3 0308 	ubfx	r3, r3, #0, #9
   24738:	b15b      	cbz	r3, 24752 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   2473a:	4b28      	ldr	r3, [pc, #160]	; (247dc <z_fatal_error+0x10c>)
   2473c:	617b      	str	r3, [r7, #20]
   2473e:	2302      	movs	r3, #2
   24740:	613b      	str	r3, [r7, #16]
   24742:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   24746:	4653      	mov	r3, sl
   24748:	4823      	ldr	r0, [pc, #140]	; (247d8 <z_fatal_error+0x108>)
   2474a:	f107 0210 	add.w	r2, r7, #16
   2474e:	f7ea f88b 	bl	e868 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   24752:	b12d      	cbz	r5, 24760 <z_fatal_error+0x90>
   24754:	4628      	mov	r0, r5
   24756:	f00b fcec 	bl	30132 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2475a:	b108      	cbz	r0, 24760 <z_fatal_error+0x90>
   2475c:	7803      	ldrb	r3, [r0, #0]
   2475e:	b903      	cbnz	r3, 24762 <z_fatal_error+0x92>
		thread_name = "unknown";
   24760:	481f      	ldr	r0, [pc, #124]	; (247e0 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   24762:	46e9      	mov	r9, sp
   24764:	b08a      	sub	sp, #40	; 0x28
   24766:	466a      	mov	r2, sp
   24768:	4b1e      	ldr	r3, [pc, #120]	; (247e4 <z_fatal_error+0x114>)
   2476a:	61d0      	str	r0, [r2, #28]
   2476c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   24770:	f240 3301 	movw	r3, #769	; 0x301
   24774:	8413      	strh	r3, [r2, #32]
   24776:	4b1c      	ldr	r3, [pc, #112]	; (247e8 <z_fatal_error+0x118>)
   24778:	f842 3f10 	str.w	r3, [r2, #16]!
   2477c:	2300      	movs	r3, #0
   2477e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   24782:	4815      	ldr	r0, [pc, #84]	; (247d8 <z_fatal_error+0x108>)
   24784:	f7ea f870 	bl	e868 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   24788:	4631      	mov	r1, r6
   2478a:	46cd      	mov	sp, r9
   2478c:	4620      	mov	r0, r4
   2478e:	f7fa f969 	bl	1ea64 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   24792:	2c04      	cmp	r4, #4
   24794:	d10c      	bne.n	247b0 <z_fatal_error+0xe0>
   24796:	4915      	ldr	r1, [pc, #84]	; (247ec <z_fatal_error+0x11c>)
   24798:	2393      	movs	r3, #147	; 0x93
   2479a:	4a15      	ldr	r2, [pc, #84]	; (247f0 <z_fatal_error+0x120>)
   2479c:	4815      	ldr	r0, [pc, #84]	; (247f4 <z_fatal_error+0x124>)
   2479e:	f005 ff78 	bl	2a692 <assert_print>
   247a2:	4815      	ldr	r0, [pc, #84]	; (247f8 <z_fatal_error+0x128>)
   247a4:	f005 ff75 	bl	2a692 <assert_print>
   247a8:	2193      	movs	r1, #147	; 0x93
   247aa:	4811      	ldr	r0, [pc, #68]	; (247f0 <z_fatal_error+0x120>)
   247ac:	f005 ff6a 	bl	2a684 <assert_post_action>
	__asm__ volatile(
   247b0:	f388 8811 	msr	BASEPRI, r8
   247b4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   247b8:	4628      	mov	r0, r5
   247ba:	f7ec fe23 	bl	11404 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   247be:	3718      	adds	r7, #24
   247c0:	46bd      	mov	sp, r7
   247c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   247c6:	bf00      	nop
   247c8:	00032508 	.word	0x00032508
   247cc:	000380f0 	.word	0x000380f0
   247d0:	00038106 	.word	0x00038106
   247d4:	01000005 	.word	0x01000005
   247d8:	0003157c 	.word	0x0003157c
   247dc:	0003812e 	.word	0x0003812e
   247e0:	000380fe 	.word	0x000380fe
   247e4:	0003814f 	.word	0x0003814f
   247e8:	01000004 	.word	0x01000004
   247ec:	00038189 	.word	0x00038189
   247f0:	00038167 	.word	0x00038167
   247f4:	00032629 	.word	0x00032629
   247f8:	000381a6 	.word	0x000381a6

000247fc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   247fc:	4b0f      	ldr	r3, [pc, #60]	; (2483c <z_sys_init_run_level+0x40>)
{
   247fe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24800:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   24804:	3001      	adds	r0, #1
   24806:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2480a:	42a6      	cmp	r6, r4
   2480c:	d800      	bhi.n	24810 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2480e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   24810:	e9d4 3500 	ldrd	r3, r5, [r4]
   24814:	4628      	mov	r0, r5
   24816:	4798      	blx	r3
		if (dev != NULL) {
   24818:	b16d      	cbz	r5, 24836 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   2481a:	b138      	cbz	r0, 2482c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2481c:	2800      	cmp	r0, #0
   2481e:	bfb8      	it	lt
   24820:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   24822:	28ff      	cmp	r0, #255	; 0xff
   24824:	bfa8      	it	ge
   24826:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   24828:	68eb      	ldr	r3, [r5, #12]
   2482a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2482c:	68ea      	ldr	r2, [r5, #12]
   2482e:	7853      	ldrb	r3, [r2, #1]
   24830:	f043 0301 	orr.w	r3, r3, #1
   24834:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24836:	3408      	adds	r4, #8
   24838:	e7e7      	b.n	2480a <z_sys_init_run_level+0xe>
   2483a:	bf00      	nop
   2483c:	0003251c 	.word	0x0003251c

00024840 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   24840:	2201      	movs	r2, #1
{
   24842:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   24844:	4b09      	ldr	r3, [pc, #36]	; (2486c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24846:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   24848:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2484a:	f7ff ffd7 	bl	247fc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2484e:	f003 fed7 	bl	28600 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   24852:	2004      	movs	r0, #4
   24854:	f7ff ffd2 	bl	247fc <z_sys_init_run_level>

	z_init_static_threads();
   24858:	f000 fb66 	bl	24f28 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   2485c:	f7e7 f82c 	bl	b8b8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24860:	4a03      	ldr	r2, [pc, #12]	; (24870 <bg_thread_main+0x30>)
   24862:	7b13      	ldrb	r3, [r2, #12]
   24864:	f023 0301 	bic.w	r3, r3, #1
   24868:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2486a:	bd08      	pop	{r3, pc}
   2486c:	20022827 	.word	0x20022827
   24870:	2000a1e8 	.word	0x2000a1e8

00024874 <z_bss_zero>:
{
   24874:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   24876:	4803      	ldr	r0, [pc, #12]	; (24884 <z_bss_zero+0x10>)
   24878:	4a03      	ldr	r2, [pc, #12]	; (24888 <z_bss_zero+0x14>)
   2487a:	2100      	movs	r1, #0
   2487c:	1a12      	subs	r2, r2, r0
   2487e:	f00b fc23 	bl	300c8 <z_early_memset>
}
   24882:	bd08      	pop	{r3, pc}
   24884:	20008e40 	.word	0x20008e40
   24888:	20022828 	.word	0x20022828

0002488c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   2488c:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2488e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   24890:	4e13      	ldr	r6, [pc, #76]	; (248e0 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   24892:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   24894:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   24898:	2300      	movs	r3, #0
{
   2489a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2489c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   248a0:	220f      	movs	r2, #15
   248a2:	9301      	str	r3, [sp, #4]
   248a4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248a8:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   248aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248ae:	4d0d      	ldr	r5, [pc, #52]	; (248e4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   248b0:	490d      	ldr	r1, [pc, #52]	; (248e8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248b2:	fb03 5500 	mla	r5, r3, r0, r5
{
   248b6:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   248b8:	fb02 1100 	mla	r1, r2, r0, r1
   248bc:	4b0b      	ldr	r3, [pc, #44]	; (248ec <z_init_cpu+0x60>)
   248be:	4630      	mov	r0, r6
   248c0:	9500      	str	r5, [sp, #0]
   248c2:	f000 fa97 	bl	24df4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   248c6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   248c8:	752c      	strb	r4, [r5, #20]
   248ca:	f023 0304 	bic.w	r3, r3, #4
   248ce:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   248d0:	4b07      	ldr	r3, [pc, #28]	; (248f0 <z_init_cpu+0x64>)
   248d2:	3401      	adds	r4, #1
   248d4:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   248d8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   248da:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   248dc:	b006      	add	sp, #24
   248de:	bd70      	pop	{r4, r5, r6, pc}
   248e0:	2000a160 	.word	0x2000a160
   248e4:	20021a88 	.word	0x20021a88
   248e8:	20033eb0 	.word	0x20033eb0
   248ec:	00025079 	.word	0x00025079
   248f0:	200336b0 	.word	0x200336b0

000248f4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   248f4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   248f6:	2000      	movs	r0, #0
{
   248f8:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   248fa:	f7ff ff7f 	bl	247fc <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   248fe:	4b2f      	ldr	r3, [pc, #188]	; (249bc <z_cstart+0xc8>)
	uint32_t msp =
   24900:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   24904:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   24908:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2490c:	2400      	movs	r4, #0
   2490e:	23e0      	movs	r3, #224	; 0xe0
   24910:	4d2b      	ldr	r5, [pc, #172]	; (249c0 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   24912:	4e2c      	ldr	r6, [pc, #176]	; (249c4 <z_cstart+0xd0>)
   24914:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   24918:	77ec      	strb	r4, [r5, #31]
   2491a:	762c      	strb	r4, [r5, #24]
   2491c:	766c      	strb	r4, [r5, #25]
   2491e:	76ac      	strb	r4, [r5, #26]
   24920:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24924:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24926:	4f28      	ldr	r7, [pc, #160]	; (249c8 <z_cstart+0xd4>)
   24928:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2492c:	626b      	str	r3, [r5, #36]	; 0x24
   2492e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24932:	f7ec fccb 	bl	112cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24936:	f7eb ffd9 	bl	108ec <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2493a:	f04f 33ff 	mov.w	r3, #4294967295
   2493e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24940:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24942:	f7ec ff3f 	bl	117c4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24946:	f7ec fd73 	bl	11430 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2494a:	f7e9 fd83 	bl	e454 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2494e:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   24952:	ad06      	add	r5, sp, #24
   24954:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   24956:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   2495a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   2495e:	f003 fe31 	bl	285c4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   24962:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24964:	f00b fba4 	bl	300b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   24968:	2001      	movs	r0, #1
   2496a:	f7ff ff47 	bl	247fc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2496e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   24970:	4d16      	ldr	r5, [pc, #88]	; (249cc <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24972:	f7ff ff43 	bl	247fc <z_sys_init_run_level>
	z_sched_init();
   24976:	f002 fbc1 	bl	270fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2497a:	4b15      	ldr	r3, [pc, #84]	; (249d0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   2497c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2497e:	9305      	str	r3, [sp, #20]
   24980:	2301      	movs	r3, #1
   24982:	4914      	ldr	r1, [pc, #80]	; (249d4 <z_cstart+0xe0>)
   24984:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24988:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2498c:	4628      	mov	r0, r5
   2498e:	463b      	mov	r3, r7
   24990:	e9cd 4401 	strd	r4, r4, [sp, #4]
   24994:	9400      	str	r4, [sp, #0]
   24996:	f000 fa2d 	bl	24df4 <z_setup_new_thread>
   2499a:	4606      	mov	r6, r0
   2499c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   2499e:	4628      	mov	r0, r5
   249a0:	f022 0204 	bic.w	r2, r2, #4
   249a4:	736a      	strb	r2, [r5, #13]
   249a6:	f001 fd81 	bl	264ac <z_ready_thread>
	z_init_cpu(0);
   249aa:	4620      	mov	r0, r4
   249ac:	f7ff ff6e 	bl	2488c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   249b0:	463a      	mov	r2, r7
   249b2:	4631      	mov	r1, r6
   249b4:	4628      	mov	r0, r5
   249b6:	f7ec f919 	bl	10bec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   249ba:	bf00      	nop
   249bc:	200336b0 	.word	0x200336b0
   249c0:	e000ed00 	.word	0xe000ed00
   249c4:	20021a88 	.word	0x20021a88
   249c8:	00024841 	.word	0x00024841
   249cc:	2000a1e8 	.word	0x2000a1e8
   249d0:	00038225 	.word	0x00038225
   249d4:	20033ff0 	.word	0x20033ff0

000249d8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   249d8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   249da:	4c0d      	ldr	r4, [pc, #52]	; (24a10 <statics_init+0x38>)
   249dc:	4d0d      	ldr	r5, [pc, #52]	; (24a14 <statics_init+0x3c>)
   249de:	42ac      	cmp	r4, r5
   249e0:	d913      	bls.n	24a0a <statics_init+0x32>
   249e2:	490d      	ldr	r1, [pc, #52]	; (24a18 <statics_init+0x40>)
   249e4:	2318      	movs	r3, #24
   249e6:	4a0d      	ldr	r2, [pc, #52]	; (24a1c <statics_init+0x44>)
   249e8:	480d      	ldr	r0, [pc, #52]	; (24a20 <statics_init+0x48>)
   249ea:	f005 fe52 	bl	2a692 <assert_print>
   249ee:	480d      	ldr	r0, [pc, #52]	; (24a24 <statics_init+0x4c>)
   249f0:	f005 fe4f 	bl	2a692 <assert_print>
   249f4:	2118      	movs	r1, #24
   249f6:	4809      	ldr	r0, [pc, #36]	; (24a1c <statics_init+0x44>)
   249f8:	f005 fe44 	bl	2a684 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   249fc:	4620      	mov	r0, r4
   249fe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   24a02:	f00b fb65 	bl	300d0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24a06:	3418      	adds	r4, #24
   24a08:	e7e9      	b.n	249de <statics_init+0x6>
   24a0a:	d3f7      	bcc.n	249fc <statics_init+0x24>
		}
	}
	return 0;
}
   24a0c:	2000      	movs	r0, #0
   24a0e:	bd38      	pop	{r3, r4, r5, pc}
   24a10:	20008afc 	.word	0x20008afc
   24a14:	20008b2c 	.word	0x20008b2c
   24a18:	0003824f 	.word	0x0003824f
   24a1c:	0003822d 	.word	0x0003822d
   24a20:	00032629 	.word	0x00032629
   24a24:	0003368c 	.word	0x0003368c

00024a28 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   24a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a2c:	b085      	sub	sp, #20
   24a2e:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   24a32:	4680      	mov	r8, r0
   24a34:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a36:	4648      	mov	r0, r9
   24a38:	4659      	mov	r1, fp
{
   24a3a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a3c:	f00b fc70 	bl	30320 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24a40:	f1bb 3fff 	cmp.w	fp, #4294967295
   24a44:	bf08      	it	eq
   24a46:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a4a:	4606      	mov	r6, r0
   24a4c:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24a4e:	bf04      	itt	eq
   24a50:	f04f 36ff 	moveq.w	r6, #4294967295
   24a54:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24a58:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   24a5c:	f04f 0320 	mov.w	r3, #32
   24a60:	f3ef 8511 	mrs	r5, BASEPRI
   24a64:	f383 8812 	msr	BASEPRI_MAX, r3
   24a68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a6c:	4620      	mov	r0, r4
   24a6e:	f000 fadf 	bl	25030 <z_spin_lock_valid>
   24a72:	b960      	cbnz	r0, 24a8e <k_heap_aligned_alloc+0x66>
   24a74:	2394      	movs	r3, #148	; 0x94
   24a76:	4a33      	ldr	r2, [pc, #204]	; (24b44 <k_heap_aligned_alloc+0x11c>)
   24a78:	4933      	ldr	r1, [pc, #204]	; (24b48 <k_heap_aligned_alloc+0x120>)
   24a7a:	4834      	ldr	r0, [pc, #208]	; (24b4c <k_heap_aligned_alloc+0x124>)
   24a7c:	f005 fe09 	bl	2a692 <assert_print>
   24a80:	4621      	mov	r1, r4
   24a82:	4833      	ldr	r0, [pc, #204]	; (24b50 <k_heap_aligned_alloc+0x128>)
   24a84:	f005 fe05 	bl	2a692 <assert_print>
   24a88:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a8a:	482e      	ldr	r0, [pc, #184]	; (24b44 <k_heap_aligned_alloc+0x11c>)
   24a8c:	e031      	b.n	24af2 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   24a8e:	4620      	mov	r0, r4
   24a90:	f000 faea 	bl	25068 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24a94:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24a98:	b113      	cbz	r3, 24aa0 <k_heap_aligned_alloc+0x78>
   24a9a:	ea5b 0909 	orrs.w	r9, fp, r9
   24a9e:	d11d      	bne.n	24adc <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24aa0:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24aa4:	4652      	mov	r2, sl
   24aa6:	4640      	mov	r0, r8
   24aa8:	9903      	ldr	r1, [sp, #12]
   24aaa:	f7e7 ffa5 	bl	c9f8 <sys_heap_aligned_alloc>
   24aae:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   24ab0:	f003 f88c 	bl	27bcc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24ab4:	f1b9 0f00 	cmp.w	r9, #0
   24ab8:	d01d      	beq.n	24af6 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24aba:	4620      	mov	r0, r4
   24abc:	f000 fac6 	bl	2504c <z_spin_unlock_valid>
   24ac0:	2800      	cmp	r0, #0
   24ac2:	d137      	bne.n	24b34 <k_heap_aligned_alloc+0x10c>
   24ac4:	23c2      	movs	r3, #194	; 0xc2
   24ac6:	4a1f      	ldr	r2, [pc, #124]	; (24b44 <k_heap_aligned_alloc+0x11c>)
   24ac8:	4922      	ldr	r1, [pc, #136]	; (24b54 <k_heap_aligned_alloc+0x12c>)
   24aca:	4820      	ldr	r0, [pc, #128]	; (24b4c <k_heap_aligned_alloc+0x124>)
   24acc:	f005 fde1 	bl	2a692 <assert_print>
   24ad0:	4621      	mov	r1, r4
   24ad2:	4821      	ldr	r0, [pc, #132]	; (24b58 <k_heap_aligned_alloc+0x130>)
   24ad4:	f005 fddd 	bl	2a692 <assert_print>
   24ad8:	21c2      	movs	r1, #194	; 0xc2
   24ada:	e7d6      	b.n	24a8a <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24adc:	491f      	ldr	r1, [pc, #124]	; (24b5c <k_heap_aligned_alloc+0x134>)
   24ade:	234c      	movs	r3, #76	; 0x4c
   24ae0:	4a1f      	ldr	r2, [pc, #124]	; (24b60 <k_heap_aligned_alloc+0x138>)
   24ae2:	481a      	ldr	r0, [pc, #104]	; (24b4c <k_heap_aligned_alloc+0x124>)
   24ae4:	f005 fdd5 	bl	2a692 <assert_print>
   24ae8:	481e      	ldr	r0, [pc, #120]	; (24b64 <k_heap_aligned_alloc+0x13c>)
   24aea:	f005 fdd2 	bl	2a692 <assert_print>
   24aee:	214c      	movs	r1, #76	; 0x4c
   24af0:	481b      	ldr	r0, [pc, #108]	; (24b60 <k_heap_aligned_alloc+0x138>)
   24af2:	f005 fdc7 	bl	2a684 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   24af6:	1a30      	subs	r0, r6, r0
   24af8:	eb67 0101 	sbc.w	r1, r7, r1
   24afc:	2801      	cmp	r0, #1
   24afe:	f171 0300 	sbcs.w	r3, r1, #0
   24b02:	dbda      	blt.n	24aba <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24b04:	e9cd 0100 	strd	r0, r1, [sp]
   24b08:	465a      	mov	r2, fp
   24b0a:	4629      	mov	r1, r5
   24b0c:	4620      	mov	r0, r4
   24b0e:	f002 f827 	bl	26b60 <z_pend_curr>
   24b12:	f04f 0320 	mov.w	r3, #32
   24b16:	f3ef 8511 	mrs	r5, BASEPRI
   24b1a:	f383 8812 	msr	BASEPRI_MAX, r3
   24b1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b22:	4620      	mov	r0, r4
   24b24:	f000 fa84 	bl	25030 <z_spin_lock_valid>
   24b28:	2800      	cmp	r0, #0
   24b2a:	d0a3      	beq.n	24a74 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   24b2c:	4620      	mov	r0, r4
   24b2e:	f000 fa9b 	bl	25068 <z_spin_lock_set_owner>
	return k;
   24b32:	e7b7      	b.n	24aa4 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   24b34:	f385 8811 	msr	BASEPRI, r5
   24b38:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24b3c:	4648      	mov	r0, r9
   24b3e:	b005      	add	sp, #20
   24b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b44:	0003338d 	.word	0x0003338d
   24b48:	000333e6 	.word	0x000333e6
   24b4c:	00032629 	.word	0x00032629
   24b50:	000333fb 	.word	0x000333fb
   24b54:	000333ba 	.word	0x000333ba
   24b58:	000333d1 	.word	0x000333d1
   24b5c:	00038265 	.word	0x00038265
   24b60:	0003822d 	.word	0x0003822d
   24b64:	00036889 	.word	0x00036889

00024b68 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b6a:	4605      	mov	r5, r0
   24b6c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24b6e:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   24b72:	f04f 0320 	mov.w	r3, #32
   24b76:	f3ef 8711 	mrs	r7, BASEPRI
   24b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   24b7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b82:	4620      	mov	r0, r4
   24b84:	f000 fa54 	bl	25030 <z_spin_lock_valid>
   24b88:	b968      	cbnz	r0, 24ba6 <k_heap_free+0x3e>
   24b8a:	2394      	movs	r3, #148	; 0x94
   24b8c:	4a19      	ldr	r2, [pc, #100]	; (24bf4 <k_heap_free+0x8c>)
   24b8e:	491a      	ldr	r1, [pc, #104]	; (24bf8 <k_heap_free+0x90>)
   24b90:	481a      	ldr	r0, [pc, #104]	; (24bfc <k_heap_free+0x94>)
   24b92:	f005 fd7e 	bl	2a692 <assert_print>
   24b96:	4621      	mov	r1, r4
   24b98:	4819      	ldr	r0, [pc, #100]	; (24c00 <k_heap_free+0x98>)
   24b9a:	f005 fd7a 	bl	2a692 <assert_print>
   24b9e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ba0:	4814      	ldr	r0, [pc, #80]	; (24bf4 <k_heap_free+0x8c>)
   24ba2:	f005 fd6f 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   24ba6:	4620      	mov	r0, r4
   24ba8:	f000 fa5e 	bl	25068 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   24bac:	4628      	mov	r0, r5
   24bae:	4631      	mov	r1, r6
   24bb0:	f7e7 fedc 	bl	c96c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24bb4:	f105 000c 	add.w	r0, r5, #12
   24bb8:	f00b fb98 	bl	302ec <z_unpend_all>
   24bbc:	b128      	cbz	r0, 24bca <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   24bbe:	4639      	mov	r1, r7
   24bc0:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24bc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   24bc6:	f001 bcfd 	b.w	265c4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bca:	4620      	mov	r0, r4
   24bcc:	f000 fa3e 	bl	2504c <z_spin_unlock_valid>
   24bd0:	b958      	cbnz	r0, 24bea <k_heap_free+0x82>
   24bd2:	23c2      	movs	r3, #194	; 0xc2
   24bd4:	4a07      	ldr	r2, [pc, #28]	; (24bf4 <k_heap_free+0x8c>)
   24bd6:	490b      	ldr	r1, [pc, #44]	; (24c04 <k_heap_free+0x9c>)
   24bd8:	4808      	ldr	r0, [pc, #32]	; (24bfc <k_heap_free+0x94>)
   24bda:	f005 fd5a 	bl	2a692 <assert_print>
   24bde:	4621      	mov	r1, r4
   24be0:	4809      	ldr	r0, [pc, #36]	; (24c08 <k_heap_free+0xa0>)
   24be2:	f005 fd56 	bl	2a692 <assert_print>
   24be6:	21c2      	movs	r1, #194	; 0xc2
   24be8:	e7da      	b.n	24ba0 <k_heap_free+0x38>
	__asm__ volatile(
   24bea:	f387 8811 	msr	BASEPRI, r7
   24bee:	f3bf 8f6f 	isb	sy
}
   24bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24bf4:	0003338d 	.word	0x0003338d
   24bf8:	000333e6 	.word	0x000333e6
   24bfc:	00032629 	.word	0x00032629
   24c00:	000333fb 	.word	0x000333fb
   24c04:	000333ba 	.word	0x000333ba
   24c08:	000333d1 	.word	0x000333d1

00024c0c <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   24c0c:	2000      	movs	r0, #0
{
   24c0e:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c10:	4c0c      	ldr	r4, [pc, #48]	; (24c44 <init_mem_slab_module+0x38>)
   24c12:	4d0d      	ldr	r5, [pc, #52]	; (24c48 <init_mem_slab_module+0x3c>)
   24c14:	42ac      	cmp	r4, r5
   24c16:	d913      	bls.n	24c40 <init_mem_slab_module+0x34>
   24c18:	490c      	ldr	r1, [pc, #48]	; (24c4c <init_mem_slab_module+0x40>)
   24c1a:	233d      	movs	r3, #61	; 0x3d
   24c1c:	4a0c      	ldr	r2, [pc, #48]	; (24c50 <init_mem_slab_module+0x44>)
   24c1e:	480d      	ldr	r0, [pc, #52]	; (24c54 <init_mem_slab_module+0x48>)
   24c20:	f005 fd37 	bl	2a692 <assert_print>
   24c24:	480c      	ldr	r0, [pc, #48]	; (24c58 <init_mem_slab_module+0x4c>)
   24c26:	f005 fd34 	bl	2a692 <assert_print>
   24c2a:	213d      	movs	r1, #61	; 0x3d
   24c2c:	4808      	ldr	r0, [pc, #32]	; (24c50 <init_mem_slab_module+0x44>)
   24c2e:	f005 fd29 	bl	2a684 <assert_post_action>
		rc = create_free_list(slab);
   24c32:	4620      	mov	r0, r4
   24c34:	f00b fa5e 	bl	300f4 <create_free_list>
		if (rc < 0) {
   24c38:	2800      	cmp	r0, #0
   24c3a:	db02      	blt.n	24c42 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c3c:	3420      	adds	r4, #32
   24c3e:	e7e9      	b.n	24c14 <init_mem_slab_module+0x8>
   24c40:	d3f7      	bcc.n	24c32 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   24c42:	bd38      	pop	{r3, r4, r5, pc}
   24c44:	20008a5c 	.word	0x20008a5c
   24c48:	20008afc 	.word	0x20008afc
   24c4c:	000382d0 	.word	0x000382d0
   24c50:	000382ab 	.word	0x000382ab
   24c54:	00032629 	.word	0x00032629
   24c58:	0003368c 	.word	0x0003368c

00024c5c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24c60:	4604      	mov	r4, r0
   24c62:	460e      	mov	r6, r1
   24c64:	4690      	mov	r8, r2
   24c66:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24c68:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24c6c:	f04f 0320 	mov.w	r3, #32
   24c70:	f3ef 8911 	mrs	r9, BASEPRI
   24c74:	f383 8812 	msr	BASEPRI_MAX, r3
   24c78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c7c:	4628      	mov	r0, r5
   24c7e:	f000 f9d7 	bl	25030 <z_spin_lock_valid>
   24c82:	b968      	cbnz	r0, 24ca0 <k_mem_slab_alloc+0x44>
   24c84:	2394      	movs	r3, #148	; 0x94
   24c86:	4a23      	ldr	r2, [pc, #140]	; (24d14 <k_mem_slab_alloc+0xb8>)
   24c88:	4923      	ldr	r1, [pc, #140]	; (24d18 <k_mem_slab_alloc+0xbc>)
   24c8a:	4824      	ldr	r0, [pc, #144]	; (24d1c <k_mem_slab_alloc+0xc0>)
   24c8c:	f005 fd01 	bl	2a692 <assert_print>
   24c90:	4629      	mov	r1, r5
   24c92:	4823      	ldr	r0, [pc, #140]	; (24d20 <k_mem_slab_alloc+0xc4>)
   24c94:	f005 fcfd 	bl	2a692 <assert_print>
   24c98:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c9a:	481e      	ldr	r0, [pc, #120]	; (24d14 <k_mem_slab_alloc+0xb8>)
   24c9c:	f005 fcf2 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   24ca0:	4628      	mov	r0, r5
   24ca2:	f000 f9e1 	bl	25068 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24ca6:	69a3      	ldr	r3, [r4, #24]
   24ca8:	b1b3      	cbz	r3, 24cd8 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   24caa:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   24cac:	681b      	ldr	r3, [r3, #0]
   24cae:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   24cb0:	69e3      	ldr	r3, [r4, #28]
   24cb2:	3301      	adds	r3, #1
   24cb4:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24cb6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24cb8:	4628      	mov	r0, r5
   24cba:	f000 f9c7 	bl	2504c <z_spin_unlock_valid>
   24cbe:	bb18      	cbnz	r0, 24d08 <k_mem_slab_alloc+0xac>
   24cc0:	23c2      	movs	r3, #194	; 0xc2
   24cc2:	4a14      	ldr	r2, [pc, #80]	; (24d14 <k_mem_slab_alloc+0xb8>)
   24cc4:	4917      	ldr	r1, [pc, #92]	; (24d24 <k_mem_slab_alloc+0xc8>)
   24cc6:	4815      	ldr	r0, [pc, #84]	; (24d1c <k_mem_slab_alloc+0xc0>)
   24cc8:	f005 fce3 	bl	2a692 <assert_print>
   24ccc:	4629      	mov	r1, r5
   24cce:	4816      	ldr	r0, [pc, #88]	; (24d28 <k_mem_slab_alloc+0xcc>)
   24cd0:	f005 fcdf 	bl	2a692 <assert_print>
   24cd4:	21c2      	movs	r1, #194	; 0xc2
   24cd6:	e7e0      	b.n	24c9a <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24cd8:	ea58 0207 	orrs.w	r2, r8, r7
   24cdc:	d103      	bne.n	24ce6 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   24cde:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   24ce2:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   24ce4:	e7e8      	b.n	24cb8 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24ce6:	4622      	mov	r2, r4
   24ce8:	4649      	mov	r1, r9
   24cea:	4628      	mov	r0, r5
   24cec:	e9cd 8700 	strd	r8, r7, [sp]
   24cf0:	f001 ff36 	bl	26b60 <z_pend_curr>
		if (result == 0) {
   24cf4:	4604      	mov	r4, r0
   24cf6:	b918      	cbnz	r0, 24d00 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   24cf8:	4b0c      	ldr	r3, [pc, #48]	; (24d2c <k_mem_slab_alloc+0xd0>)
   24cfa:	689b      	ldr	r3, [r3, #8]
   24cfc:	695b      	ldr	r3, [r3, #20]
   24cfe:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   24d00:	4620      	mov	r0, r4
   24d02:	b003      	add	sp, #12
   24d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   24d08:	f389 8811 	msr	BASEPRI, r9
   24d0c:	f3bf 8f6f 	isb	sy
	return result;
   24d10:	e7f6      	b.n	24d00 <k_mem_slab_alloc+0xa4>
   24d12:	bf00      	nop
   24d14:	0003338d 	.word	0x0003338d
   24d18:	000333e6 	.word	0x000333e6
   24d1c:	00032629 	.word	0x00032629
   24d20:	000333fb 	.word	0x000333fb
   24d24:	000333ba 	.word	0x000333ba
   24d28:	000333d1 	.word	0x000333d1
   24d2c:	20021a88 	.word	0x20021a88

00024d30 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d34:	4604      	mov	r4, r0
   24d36:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24d38:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24d3c:	f04f 0320 	mov.w	r3, #32
   24d40:	f3ef 8711 	mrs	r7, BASEPRI
   24d44:	f383 8812 	msr	BASEPRI_MAX, r3
   24d48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d4c:	4628      	mov	r0, r5
   24d4e:	f000 f96f 	bl	25030 <z_spin_lock_valid>
   24d52:	b968      	cbnz	r0, 24d70 <k_mem_slab_free+0x40>
   24d54:	2394      	movs	r3, #148	; 0x94
   24d56:	4a21      	ldr	r2, [pc, #132]	; (24ddc <k_mem_slab_free+0xac>)
   24d58:	4921      	ldr	r1, [pc, #132]	; (24de0 <k_mem_slab_free+0xb0>)
   24d5a:	4822      	ldr	r0, [pc, #136]	; (24de4 <k_mem_slab_free+0xb4>)
   24d5c:	f005 fc99 	bl	2a692 <assert_print>
   24d60:	4629      	mov	r1, r5
   24d62:	4821      	ldr	r0, [pc, #132]	; (24de8 <k_mem_slab_free+0xb8>)
   24d64:	f005 fc95 	bl	2a692 <assert_print>
   24d68:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d6a:	481c      	ldr	r0, [pc, #112]	; (24ddc <k_mem_slab_free+0xac>)
   24d6c:	f005 fc8a 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   24d70:	4628      	mov	r0, r5
   24d72:	f000 f979 	bl	25068 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24d76:	f8d4 8018 	ldr.w	r8, [r4, #24]
   24d7a:	f1b8 0f00 	cmp.w	r8, #0
   24d7e:	d10f      	bne.n	24da0 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24d80:	4620      	mov	r0, r4
   24d82:	f002 f96b 	bl	2705c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   24d86:	b158      	cbz	r0, 24da0 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24d88:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   24d8a:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24d8e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   24d90:	f001 fb8c 	bl	264ac <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24d94:	4639      	mov	r1, r7
   24d96:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   24d9c:	f001 bc12 	b.w	265c4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   24da0:	6833      	ldr	r3, [r6, #0]
   24da2:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24da4:	4628      	mov	r0, r5
   24da6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24da8:	6833      	ldr	r3, [r6, #0]
   24daa:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   24dac:	69e3      	ldr	r3, [r4, #28]
   24dae:	3b01      	subs	r3, #1
   24db0:	61e3      	str	r3, [r4, #28]
   24db2:	f000 f94b 	bl	2504c <z_spin_unlock_valid>
   24db6:	b958      	cbnz	r0, 24dd0 <k_mem_slab_free+0xa0>
   24db8:	23c2      	movs	r3, #194	; 0xc2
   24dba:	4a08      	ldr	r2, [pc, #32]	; (24ddc <k_mem_slab_free+0xac>)
   24dbc:	490b      	ldr	r1, [pc, #44]	; (24dec <k_mem_slab_free+0xbc>)
   24dbe:	4809      	ldr	r0, [pc, #36]	; (24de4 <k_mem_slab_free+0xb4>)
   24dc0:	f005 fc67 	bl	2a692 <assert_print>
   24dc4:	4629      	mov	r1, r5
   24dc6:	480a      	ldr	r0, [pc, #40]	; (24df0 <k_mem_slab_free+0xc0>)
   24dc8:	f005 fc63 	bl	2a692 <assert_print>
   24dcc:	21c2      	movs	r1, #194	; 0xc2
   24dce:	e7cc      	b.n	24d6a <k_mem_slab_free+0x3a>
	__asm__ volatile(
   24dd0:	f387 8811 	msr	BASEPRI, r7
   24dd4:	f3bf 8f6f 	isb	sy
}
   24dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24ddc:	0003338d 	.word	0x0003338d
   24de0:	000333e6 	.word	0x000333e6
   24de4:	00032629 	.word	0x00032629
   24de8:	000333fb 	.word	0x000333fb
   24dec:	000333ba 	.word	0x000333ba
   24df0:	000333d1 	.word	0x000333d1

00024df4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   24df6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   24df8:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   24dfa:	2e0f      	cmp	r6, #15
   24dfc:	d12a      	bne.n	24e54 <z_setup_new_thread+0x60>
   24dfe:	4821      	ldr	r0, [pc, #132]	; (24e84 <z_setup_new_thread+0x90>)
   24e00:	4283      	cmp	r3, r0
   24e02:	d12b      	bne.n	24e5c <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   24e04:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24e08:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   24e0c:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   24e0e:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   24e10:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24e12:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24e14:	3207      	adds	r2, #7
   24e16:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   24e1a:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   24e1e:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   24e20:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   24e24:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   24e26:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   24e2a:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   24e2c:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   24e2e:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24e30:	9202      	str	r2, [sp, #8]
   24e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24e34:	4620      	mov	r0, r4
   24e36:	9201      	str	r2, [sp, #4]
   24e38:	9a08      	ldr	r2, [sp, #32]
   24e3a:	9200      	str	r2, [sp, #0]
   24e3c:	4632      	mov	r2, r6
   24e3e:	f7eb feb5 	bl	10bac <arch_new_thread>
	if (!_current) {
   24e42:	4b11      	ldr	r3, [pc, #68]	; (24e88 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   24e44:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   24e46:	689b      	ldr	r3, [r3, #8]
   24e48:	b103      	cbz	r3, 24e4c <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   24e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   24e4c:	4630      	mov	r0, r6
   24e4e:	6763      	str	r3, [r4, #116]	; 0x74
   24e50:	b004      	add	sp, #16
   24e52:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   24e54:	f106 0010 	add.w	r0, r6, #16
   24e58:	281e      	cmp	r0, #30
   24e5a:	d9d3      	bls.n	24e04 <z_setup_new_thread+0x10>
   24e5c:	f44f 7306 	mov.w	r3, #536	; 0x218
   24e60:	4a0a      	ldr	r2, [pc, #40]	; (24e8c <z_setup_new_thread+0x98>)
   24e62:	490b      	ldr	r1, [pc, #44]	; (24e90 <z_setup_new_thread+0x9c>)
   24e64:	480b      	ldr	r0, [pc, #44]	; (24e94 <z_setup_new_thread+0xa0>)
   24e66:	f005 fc14 	bl	2a692 <assert_print>
   24e6a:	4631      	mov	r1, r6
   24e6c:	480a      	ldr	r0, [pc, #40]	; (24e98 <z_setup_new_thread+0xa4>)
   24e6e:	f06f 030f 	mvn.w	r3, #15
   24e72:	220e      	movs	r2, #14
   24e74:	f005 fc0d 	bl	2a692 <assert_print>
   24e78:	f44f 7106 	mov.w	r1, #536	; 0x218
   24e7c:	4803      	ldr	r0, [pc, #12]	; (24e8c <z_setup_new_thread+0x98>)
   24e7e:	f005 fc01 	bl	2a684 <assert_post_action>
   24e82:	bf00      	nop
   24e84:	00025079 	.word	0x00025079
   24e88:	20021a88 	.word	0x20021a88
   24e8c:	000382ed 	.word	0x000382ed
   24e90:	00038310 	.word	0x00038310
   24e94:	00032629 	.word	0x00032629
   24e98:	00038390 	.word	0x00038390

00024e9c <z_impl_k_thread_create>:
{
   24e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24e9e:	b087      	sub	sp, #28
   24ea0:	4604      	mov	r4, r0
   24ea2:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   24ea6:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   24eaa:	b175      	cbz	r5, 24eca <z_impl_k_thread_create+0x2e>
   24eac:	4919      	ldr	r1, [pc, #100]	; (24f14 <z_impl_k_thread_create+0x78>)
   24eae:	f240 2387 	movw	r3, #647	; 0x287
   24eb2:	4a19      	ldr	r2, [pc, #100]	; (24f18 <z_impl_k_thread_create+0x7c>)
   24eb4:	4819      	ldr	r0, [pc, #100]	; (24f1c <z_impl_k_thread_create+0x80>)
   24eb6:	f005 fbec 	bl	2a692 <assert_print>
   24eba:	4819      	ldr	r0, [pc, #100]	; (24f20 <z_impl_k_thread_create+0x84>)
   24ebc:	f005 fbe9 	bl	2a692 <assert_print>
   24ec0:	f240 2187 	movw	r1, #647	; 0x287
   24ec4:	4814      	ldr	r0, [pc, #80]	; (24f18 <z_impl_k_thread_create+0x7c>)
   24ec6:	f005 fbdd 	bl	2a684 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24eca:	9505      	str	r5, [sp, #20]
   24ecc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   24ece:	9504      	str	r5, [sp, #16]
   24ed0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   24ed2:	9503      	str	r5, [sp, #12]
   24ed4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24ed6:	9502      	str	r5, [sp, #8]
   24ed8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   24eda:	9501      	str	r5, [sp, #4]
   24edc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24ede:	9500      	str	r5, [sp, #0]
   24ee0:	f7ff ff88 	bl	24df4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24ee4:	f1b6 3fff 	cmp.w	r6, #4294967295
   24ee8:	bf08      	it	eq
   24eea:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   24eee:	d005      	beq.n	24efc <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24ef0:	ea56 0307 	orrs.w	r3, r6, r7
   24ef4:	d105      	bne.n	24f02 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   24ef6:	4620      	mov	r0, r4
   24ef8:	f001 fba6 	bl	26648 <z_sched_start>
}
   24efc:	4620      	mov	r0, r4
   24efe:	b007      	add	sp, #28
   24f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24f02:	463a      	mov	r2, r7
   24f04:	4633      	mov	r3, r6
   24f06:	4907      	ldr	r1, [pc, #28]	; (24f24 <z_impl_k_thread_create+0x88>)
   24f08:	f104 0018 	add.w	r0, r4, #24
   24f0c:	f002 fc16 	bl	2773c <z_add_timeout>
   24f10:	e7f4      	b.n	24efc <z_impl_k_thread_create+0x60>
   24f12:	bf00      	nop
   24f14:	000383c1 	.word	0x000383c1
   24f18:	000382ed 	.word	0x000382ed
   24f1c:	00032629 	.word	0x00032629
   24f20:	000383d3 	.word	0x000383d3
   24f24:	00026f15 	.word	0x00026f15

00024f28 <z_init_static_threads>:
{
   24f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24f2c:	4c39      	ldr	r4, [pc, #228]	; (25014 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   24f2e:	4d3a      	ldr	r5, [pc, #232]	; (25018 <z_init_static_threads+0xf0>)
{
   24f30:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   24f32:	42ac      	cmp	r4, r5
   24f34:	4626      	mov	r6, r4
   24f36:	d92a      	bls.n	24f8e <z_init_static_threads+0x66>
   24f38:	4938      	ldr	r1, [pc, #224]	; (2501c <z_init_static_threads+0xf4>)
   24f3a:	f240 23ee 	movw	r3, #750	; 0x2ee
   24f3e:	4a38      	ldr	r2, [pc, #224]	; (25020 <z_init_static_threads+0xf8>)
   24f40:	4838      	ldr	r0, [pc, #224]	; (25024 <z_init_static_threads+0xfc>)
   24f42:	f005 fba6 	bl	2a692 <assert_print>
   24f46:	4838      	ldr	r0, [pc, #224]	; (25028 <z_init_static_threads+0x100>)
   24f48:	f005 fba3 	bl	2a692 <assert_print>
   24f4c:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   24f50:	4833      	ldr	r0, [pc, #204]	; (25020 <z_init_static_threads+0xf8>)
   24f52:	f005 fb97 	bl	2a684 <assert_post_action>
		z_setup_new_thread(
   24f56:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24f5a:	9305      	str	r3, [sp, #20]
   24f5c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24f60:	9304      	str	r3, [sp, #16]
   24f62:	f854 3c14 	ldr.w	r3, [r4, #-20]
   24f66:	9303      	str	r3, [sp, #12]
   24f68:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24f6c:	9302      	str	r3, [sp, #8]
   24f6e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   24f72:	9301      	str	r3, [sp, #4]
   24f74:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24f78:	9300      	str	r3, [sp, #0]
   24f7a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   24f7e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   24f82:	f7ff ff37 	bl	24df4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24f86:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24f8a:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   24f8c:	e7d1      	b.n	24f32 <z_init_static_threads+0xa>
   24f8e:	42ae      	cmp	r6, r5
   24f90:	f104 0430 	add.w	r4, r4, #48	; 0x30
   24f94:	d3df      	bcc.n	24f56 <z_init_static_threads+0x2e>
	k_sched_lock();
   24f96:	f001 fba9 	bl	266ec <k_sched_lock>
   24f9a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   24f9e:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   24fa2:	4c1c      	ldr	r4, [pc, #112]	; (25014 <z_init_static_threads+0xec>)
   24fa4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2502c <z_init_static_threads+0x104>
   24fa8:	42ac      	cmp	r4, r5
   24faa:	d92c      	bls.n	25006 <z_init_static_threads+0xde>
   24fac:	491b      	ldr	r1, [pc, #108]	; (2501c <z_init_static_threads+0xf4>)
   24fae:	f240 330d 	movw	r3, #781	; 0x30d
   24fb2:	4a1b      	ldr	r2, [pc, #108]	; (25020 <z_init_static_threads+0xf8>)
   24fb4:	481b      	ldr	r0, [pc, #108]	; (25024 <z_init_static_threads+0xfc>)
   24fb6:	f005 fb6c 	bl	2a692 <assert_print>
   24fba:	481b      	ldr	r0, [pc, #108]	; (25028 <z_init_static_threads+0x100>)
   24fbc:	f005 fb69 	bl	2a692 <assert_print>
   24fc0:	f240 310d 	movw	r1, #781	; 0x30d
   24fc4:	e7c4      	b.n	24f50 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24fc8:	1c5a      	adds	r2, r3, #1
   24fca:	d00d      	beq.n	24fe8 <z_init_static_threads+0xc0>
   24fcc:	2100      	movs	r1, #0
   24fce:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   24fd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24fd4:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24fd8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   24fdc:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24fe0:	d104      	bne.n	24fec <z_init_static_threads+0xc4>
	z_sched_start(thread);
   24fe2:	4640      	mov	r0, r8
   24fe4:	f001 fb30 	bl	26648 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   24fe8:	3430      	adds	r4, #48	; 0x30
   24fea:	e7dd      	b.n	24fa8 <z_init_static_threads+0x80>
   24fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24ff0:	2300      	movs	r3, #0
   24ff2:	f7e3 ff7d 	bl	8ef0 <__aeabi_uldivmod>
   24ff6:	4602      	mov	r2, r0
   24ff8:	460b      	mov	r3, r1
   24ffa:	f108 0018 	add.w	r0, r8, #24
   24ffe:	4649      	mov	r1, r9
   25000:	f002 fb9c 	bl	2773c <z_add_timeout>
   25004:	e7f0      	b.n	24fe8 <z_init_static_threads+0xc0>
   25006:	d3de      	bcc.n	24fc6 <z_init_static_threads+0x9e>
}
   25008:	b007      	add	sp, #28
   2500a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2500e:	f001 bbd9 	b.w	267c4 <k_sched_unlock>
   25012:	bf00      	nop
   25014:	00031254 	.word	0x00031254
   25018:	000313a4 	.word	0x000313a4
   2501c:	000383f8 	.word	0x000383f8
   25020:	000382ed 	.word	0x000382ed
   25024:	00032629 	.word	0x00032629
   25028:	0003368c 	.word	0x0003368c
   2502c:	00026f15 	.word	0x00026f15

00025030 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   25030:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   25032:	b138      	cbz	r0, 25044 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   25034:	4b04      	ldr	r3, [pc, #16]	; (25048 <z_spin_lock_valid+0x18>)
   25036:	f000 0003 	and.w	r0, r0, #3
   2503a:	7d1b      	ldrb	r3, [r3, #20]
   2503c:	1ac0      	subs	r0, r0, r3
   2503e:	bf18      	it	ne
   25040:	2001      	movne	r0, #1
   25042:	4770      	bx	lr
			return false;
		}
	}
	return true;
   25044:	2001      	movs	r0, #1
}
   25046:	4770      	bx	lr
   25048:	20021a88 	.word	0x20021a88

0002504c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2504c:	4a05      	ldr	r2, [pc, #20]	; (25064 <z_spin_unlock_valid+0x18>)
{
   2504e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   25050:	7d11      	ldrb	r1, [r2, #20]
   25052:	6892      	ldr	r2, [r2, #8]
   25054:	430a      	orrs	r2, r1
   25056:	6801      	ldr	r1, [r0, #0]
   25058:	2000      	movs	r0, #0
   2505a:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   2505c:	bf04      	itt	eq
   2505e:	6018      	streq	r0, [r3, #0]
	return true;
   25060:	2001      	moveq	r0, #1
}
   25062:	4770      	bx	lr
   25064:	20021a88 	.word	0x20021a88

00025068 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   25068:	4b02      	ldr	r3, [pc, #8]	; (25074 <z_spin_lock_set_owner+0xc>)
   2506a:	7d1a      	ldrb	r2, [r3, #20]
   2506c:	689b      	ldr	r3, [r3, #8]
   2506e:	4313      	orrs	r3, r2
   25070:	6003      	str	r3, [r0, #0]
}
   25072:	4770      	bx	lr
   25074:	20021a88 	.word	0x20021a88

00025078 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   25078:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2507a:	4c13      	ldr	r4, [pc, #76]	; (250c8 <idle+0x50>)
   2507c:	68a3      	ldr	r3, [r4, #8]
   2507e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   25082:	2b00      	cmp	r3, #0
   25084:	db10      	blt.n	250a8 <idle+0x30>
   25086:	4d11      	ldr	r5, [pc, #68]	; (250cc <idle+0x54>)
	__asm__ volatile(
   25088:	f04f 0220 	mov.w	r2, #32
   2508c:	f3ef 8311 	mrs	r3, BASEPRI
   25090:	f382 8812 	msr	BASEPRI_MAX, r2
   25094:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   25098:	f002 fc62 	bl	27960 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2509c:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2509e:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   250a0:	b963      	cbnz	r3, 250bc <idle+0x44>
	arch_cpu_idle();
   250a2:	f7eb fc29 	bl	108f8 <arch_cpu_idle>
}
   250a6:	e7ef      	b.n	25088 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   250a8:	4909      	ldr	r1, [pc, #36]	; (250d0 <idle+0x58>)
   250aa:	480a      	ldr	r0, [pc, #40]	; (250d4 <idle+0x5c>)
   250ac:	2327      	movs	r3, #39	; 0x27
   250ae:	4a0a      	ldr	r2, [pc, #40]	; (250d8 <idle+0x60>)
   250b0:	f005 faef 	bl	2a692 <assert_print>
   250b4:	2127      	movs	r1, #39	; 0x27
   250b6:	4808      	ldr	r0, [pc, #32]	; (250d8 <idle+0x60>)
   250b8:	f005 fae4 	bl	2a684 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   250bc:	f7eb f954 	bl	10368 <pm_system_suspend>
   250c0:	2800      	cmp	r0, #0
   250c2:	d1e1      	bne.n	25088 <idle+0x10>
   250c4:	e7ed      	b.n	250a2 <idle+0x2a>
   250c6:	bf00      	nop
   250c8:	20021a88 	.word	0x20021a88
   250cc:	20022827 	.word	0x20022827
   250d0:	00038446 	.word	0x00038446
   250d4:	00032629 	.word	0x00032629
   250d8:	00038425 	.word	0x00038425

000250dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   250dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   250e0:	4604      	mov	r4, r0
   250e2:	4617      	mov	r7, r2
   250e4:	461e      	mov	r6, r3
   250e6:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   250ea:	b165      	cbz	r5, 25106 <z_impl_k_mutex_lock+0x2a>
   250ec:	4958      	ldr	r1, [pc, #352]	; (25250 <z_impl_k_mutex_lock+0x174>)
   250ee:	2365      	movs	r3, #101	; 0x65
   250f0:	4a58      	ldr	r2, [pc, #352]	; (25254 <z_impl_k_mutex_lock+0x178>)
   250f2:	4859      	ldr	r0, [pc, #356]	; (25258 <z_impl_k_mutex_lock+0x17c>)
   250f4:	f005 facd 	bl	2a692 <assert_print>
   250f8:	4858      	ldr	r0, [pc, #352]	; (2525c <z_impl_k_mutex_lock+0x180>)
   250fa:	f005 faca 	bl	2a692 <assert_print>
   250fe:	2165      	movs	r1, #101	; 0x65
   25100:	4854      	ldr	r0, [pc, #336]	; (25254 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25102:	f005 fabf 	bl	2a684 <assert_post_action>
   25106:	f04f 0320 	mov.w	r3, #32
   2510a:	f3ef 8811 	mrs	r8, BASEPRI
   2510e:	f383 8812 	msr	BASEPRI_MAX, r3
   25112:	f3bf 8f6f 	isb	sy
   25116:	4852      	ldr	r0, [pc, #328]	; (25260 <z_impl_k_mutex_lock+0x184>)
   25118:	f7ff ff8a 	bl	25030 <z_spin_lock_valid>
   2511c:	b960      	cbnz	r0, 25138 <z_impl_k_mutex_lock+0x5c>
   2511e:	2394      	movs	r3, #148	; 0x94
   25120:	4a50      	ldr	r2, [pc, #320]	; (25264 <z_impl_k_mutex_lock+0x188>)
   25122:	4951      	ldr	r1, [pc, #324]	; (25268 <z_impl_k_mutex_lock+0x18c>)
   25124:	484c      	ldr	r0, [pc, #304]	; (25258 <z_impl_k_mutex_lock+0x17c>)
   25126:	f005 fab4 	bl	2a692 <assert_print>
   2512a:	494d      	ldr	r1, [pc, #308]	; (25260 <z_impl_k_mutex_lock+0x184>)
   2512c:	484f      	ldr	r0, [pc, #316]	; (2526c <z_impl_k_mutex_lock+0x190>)
   2512e:	f005 fab0 	bl	2a692 <assert_print>
   25132:	2194      	movs	r1, #148	; 0x94
   25134:	484b      	ldr	r0, [pc, #300]	; (25264 <z_impl_k_mutex_lock+0x188>)
   25136:	e7e4      	b.n	25102 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   25138:	4849      	ldr	r0, [pc, #292]	; (25260 <z_impl_k_mutex_lock+0x184>)
   2513a:	f7ff ff95 	bl	25068 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2513e:	68e3      	ldr	r3, [r4, #12]
   25140:	4a4b      	ldr	r2, [pc, #300]	; (25270 <z_impl_k_mutex_lock+0x194>)
   25142:	b19b      	cbz	r3, 2516c <z_impl_k_mutex_lock+0x90>
   25144:	68a0      	ldr	r0, [r4, #8]
   25146:	6891      	ldr	r1, [r2, #8]
   25148:	4288      	cmp	r0, r1
   2514a:	d027      	beq.n	2519c <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2514c:	ea57 0306 	orrs.w	r3, r7, r6
   25150:	d12c      	bne.n	251ac <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25152:	4843      	ldr	r0, [pc, #268]	; (25260 <z_impl_k_mutex_lock+0x184>)
   25154:	f7ff ff7a 	bl	2504c <z_spin_unlock_valid>
   25158:	b1a0      	cbz	r0, 25184 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   2515a:	f388 8811 	msr	BASEPRI, r8
   2515e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   25162:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25166:	b002      	add	sp, #8
   25168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2516c:	6891      	ldr	r1, [r2, #8]
   2516e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   25172:	3301      	adds	r3, #1
   25174:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   25176:	6893      	ldr	r3, [r2, #8]
   25178:	4839      	ldr	r0, [pc, #228]	; (25260 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2517a:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2517c:	60a3      	str	r3, [r4, #8]
   2517e:	f7ff ff65 	bl	2504c <z_spin_unlock_valid>
   25182:	b968      	cbnz	r0, 251a0 <z_impl_k_mutex_lock+0xc4>
   25184:	23c2      	movs	r3, #194	; 0xc2
   25186:	4a37      	ldr	r2, [pc, #220]	; (25264 <z_impl_k_mutex_lock+0x188>)
   25188:	493a      	ldr	r1, [pc, #232]	; (25274 <z_impl_k_mutex_lock+0x198>)
   2518a:	4833      	ldr	r0, [pc, #204]	; (25258 <z_impl_k_mutex_lock+0x17c>)
   2518c:	f005 fa81 	bl	2a692 <assert_print>
   25190:	4933      	ldr	r1, [pc, #204]	; (25260 <z_impl_k_mutex_lock+0x184>)
   25192:	4839      	ldr	r0, [pc, #228]	; (25278 <z_impl_k_mutex_lock+0x19c>)
   25194:	f005 fa7d 	bl	2a692 <assert_print>
   25198:	21c2      	movs	r1, #194	; 0xc2
   2519a:	e7cb      	b.n	25134 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   2519c:	6921      	ldr	r1, [r4, #16]
   2519e:	e7e8      	b.n	25172 <z_impl_k_mutex_lock+0x96>
   251a0:	f388 8811 	msr	BASEPRI, r8
   251a4:	f3bf 8f6f 	isb	sy
		return 0;
   251a8:	2000      	movs	r0, #0
   251aa:	e7dc      	b.n	25166 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   251ac:	f991 100e 	ldrsb.w	r1, [r1, #14]
   251b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   251b4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   251b8:	4299      	cmp	r1, r3
   251ba:	bfa8      	it	ge
   251bc:	4619      	movge	r1, r3
   251be:	4291      	cmp	r1, r2
   251c0:	bfb8      	it	lt
   251c2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   251c4:	428b      	cmp	r3, r1
   251c6:	dd02      	ble.n	251ce <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   251c8:	f00a ffbe 	bl	30148 <adjust_owner_prio.isra.0>
   251cc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   251ce:	4622      	mov	r2, r4
   251d0:	4641      	mov	r1, r8
   251d2:	e9cd 7600 	strd	r7, r6, [sp]
   251d6:	4822      	ldr	r0, [pc, #136]	; (25260 <z_impl_k_mutex_lock+0x184>)
   251d8:	f001 fcc2 	bl	26b60 <z_pend_curr>
	if (got_mutex == 0) {
   251dc:	2800      	cmp	r0, #0
   251de:	d0e3      	beq.n	251a8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   251e0:	f04f 0320 	mov.w	r3, #32
   251e4:	f3ef 8611 	mrs	r6, BASEPRI
   251e8:	f383 8812 	msr	BASEPRI_MAX, r3
   251ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251f0:	481b      	ldr	r0, [pc, #108]	; (25260 <z_impl_k_mutex_lock+0x184>)
   251f2:	f7ff ff1d 	bl	25030 <z_spin_lock_valid>
   251f6:	2800      	cmp	r0, #0
   251f8:	d091      	beq.n	2511e <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   251fa:	4819      	ldr	r0, [pc, #100]	; (25260 <z_impl_k_mutex_lock+0x184>)
   251fc:	f7ff ff34 	bl	25068 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   25200:	68a0      	ldr	r0, [r4, #8]
   25202:	b1c0      	cbz	r0, 25236 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   25204:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   25206:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25208:	429c      	cmp	r4, r3
   2520a:	d00a      	beq.n	25222 <z_impl_k_mutex_lock+0x146>
   2520c:	b14b      	cbz	r3, 25222 <z_impl_k_mutex_lock+0x146>
   2520e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   25212:	4299      	cmp	r1, r3
   25214:	bfa8      	it	ge
   25216:	4619      	movge	r1, r3
   25218:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2521c:	4299      	cmp	r1, r3
   2521e:	bfb8      	it	lt
   25220:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   25222:	f00a ff91 	bl	30148 <adjust_owner_prio.isra.0>
   25226:	b130      	cbz	r0, 25236 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   25228:	4631      	mov	r1, r6
   2522a:	480d      	ldr	r0, [pc, #52]	; (25260 <z_impl_k_mutex_lock+0x184>)
   2522c:	f001 f9ca 	bl	265c4 <z_reschedule>
	return -EAGAIN;
   25230:	f06f 000a 	mvn.w	r0, #10
   25234:	e797      	b.n	25166 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   25236:	2d00      	cmp	r5, #0
   25238:	d1f6      	bne.n	25228 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2523a:	4809      	ldr	r0, [pc, #36]	; (25260 <z_impl_k_mutex_lock+0x184>)
   2523c:	f7ff ff06 	bl	2504c <z_spin_unlock_valid>
   25240:	2800      	cmp	r0, #0
   25242:	d09f      	beq.n	25184 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   25244:	f386 8811 	msr	BASEPRI, r6
   25248:	f3bf 8f6f 	isb	sy
   2524c:	e7f0      	b.n	25230 <z_impl_k_mutex_lock+0x154>
   2524e:	bf00      	nop
   25250:	000383c1 	.word	0x000383c1
   25254:	0003846e 	.word	0x0003846e
   25258:	00032629 	.word	0x00032629
   2525c:	00038490 	.word	0x00038490
   25260:	20021ab0 	.word	0x20021ab0
   25264:	0003338d 	.word	0x0003338d
   25268:	000333e6 	.word	0x000333e6
   2526c:	000333fb 	.word	0x000333fb
   25270:	20021a88 	.word	0x20021a88
   25274:	000333ba 	.word	0x000333ba
   25278:	000333d1 	.word	0x000333d1

0002527c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2527c:	b570      	push	{r4, r5, r6, lr}
   2527e:	4604      	mov	r4, r0
   25280:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   25284:	b166      	cbz	r6, 252a0 <z_impl_k_mutex_unlock+0x24>
   25286:	4938      	ldr	r1, [pc, #224]	; (25368 <z_impl_k_mutex_unlock+0xec>)
   25288:	23cd      	movs	r3, #205	; 0xcd
   2528a:	4a38      	ldr	r2, [pc, #224]	; (2536c <z_impl_k_mutex_unlock+0xf0>)
   2528c:	4838      	ldr	r0, [pc, #224]	; (25370 <z_impl_k_mutex_unlock+0xf4>)
   2528e:	f005 fa00 	bl	2a692 <assert_print>
   25292:	4838      	ldr	r0, [pc, #224]	; (25374 <z_impl_k_mutex_unlock+0xf8>)
   25294:	f005 f9fd 	bl	2a692 <assert_print>
   25298:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2529a:	4834      	ldr	r0, [pc, #208]	; (2536c <z_impl_k_mutex_unlock+0xf0>)
   2529c:	f005 f9f2 	bl	2a684 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   252a0:	6883      	ldr	r3, [r0, #8]
   252a2:	2b00      	cmp	r3, #0
   252a4:	d059      	beq.n	2535a <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   252a6:	4a34      	ldr	r2, [pc, #208]	; (25378 <z_impl_k_mutex_unlock+0xfc>)
   252a8:	6892      	ldr	r2, [r2, #8]
   252aa:	4293      	cmp	r3, r2
   252ac:	d158      	bne.n	25360 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   252ae:	68c3      	ldr	r3, [r0, #12]
   252b0:	b93b      	cbnz	r3, 252c2 <z_impl_k_mutex_unlock+0x46>
   252b2:	4932      	ldr	r1, [pc, #200]	; (2537c <z_impl_k_mutex_unlock+0x100>)
   252b4:	23e5      	movs	r3, #229	; 0xe5
   252b6:	4a2d      	ldr	r2, [pc, #180]	; (2536c <z_impl_k_mutex_unlock+0xf0>)
   252b8:	482d      	ldr	r0, [pc, #180]	; (25370 <z_impl_k_mutex_unlock+0xf4>)
   252ba:	f005 f9ea 	bl	2a692 <assert_print>
   252be:	21e5      	movs	r1, #229	; 0xe5
   252c0:	e7eb      	b.n	2529a <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   252c2:	2b01      	cmp	r3, #1
   252c4:	d003      	beq.n	252ce <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   252c6:	3b01      	subs	r3, #1
   252c8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   252ca:	2000      	movs	r0, #0
}
   252cc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   252ce:	f04f 0320 	mov.w	r3, #32
   252d2:	f3ef 8511 	mrs	r5, BASEPRI
   252d6:	f383 8812 	msr	BASEPRI_MAX, r3
   252da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   252de:	4828      	ldr	r0, [pc, #160]	; (25380 <z_impl_k_mutex_unlock+0x104>)
   252e0:	f7ff fea6 	bl	25030 <z_spin_lock_valid>
   252e4:	b960      	cbnz	r0, 25300 <z_impl_k_mutex_unlock+0x84>
   252e6:	2394      	movs	r3, #148	; 0x94
   252e8:	4a26      	ldr	r2, [pc, #152]	; (25384 <z_impl_k_mutex_unlock+0x108>)
   252ea:	4927      	ldr	r1, [pc, #156]	; (25388 <z_impl_k_mutex_unlock+0x10c>)
   252ec:	4820      	ldr	r0, [pc, #128]	; (25370 <z_impl_k_mutex_unlock+0xf4>)
   252ee:	f005 f9d0 	bl	2a692 <assert_print>
   252f2:	4923      	ldr	r1, [pc, #140]	; (25380 <z_impl_k_mutex_unlock+0x104>)
   252f4:	4825      	ldr	r0, [pc, #148]	; (2538c <z_impl_k_mutex_unlock+0x110>)
   252f6:	f005 f9cc 	bl	2a692 <assert_print>
   252fa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   252fc:	4821      	ldr	r0, [pc, #132]	; (25384 <z_impl_k_mutex_unlock+0x108>)
   252fe:	e7cd      	b.n	2529c <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   25300:	481f      	ldr	r0, [pc, #124]	; (25380 <z_impl_k_mutex_unlock+0x104>)
   25302:	f7ff feb1 	bl	25068 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   25306:	6921      	ldr	r1, [r4, #16]
   25308:	68a0      	ldr	r0, [r4, #8]
   2530a:	f00a ff1d 	bl	30148 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2530e:	4620      	mov	r0, r4
   25310:	f001 fea4 	bl	2705c <z_unpend_first_thread>
	mutex->owner = new_owner;
   25314:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   25316:	b150      	cbz	r0, 2532e <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   25318:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2531c:	6122      	str	r2, [r4, #16]
   2531e:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   25320:	f001 f8c4 	bl	264ac <z_ready_thread>
		z_reschedule(&lock, key);
   25324:	4629      	mov	r1, r5
   25326:	4816      	ldr	r0, [pc, #88]	; (25380 <z_impl_k_mutex_unlock+0x104>)
   25328:	f001 f94c 	bl	265c4 <z_reschedule>
   2532c:	e7cd      	b.n	252ca <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   2532e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25330:	4813      	ldr	r0, [pc, #76]	; (25380 <z_impl_k_mutex_unlock+0x104>)
   25332:	f7ff fe8b 	bl	2504c <z_spin_unlock_valid>
   25336:	b958      	cbnz	r0, 25350 <z_impl_k_mutex_unlock+0xd4>
   25338:	23c2      	movs	r3, #194	; 0xc2
   2533a:	4a12      	ldr	r2, [pc, #72]	; (25384 <z_impl_k_mutex_unlock+0x108>)
   2533c:	4914      	ldr	r1, [pc, #80]	; (25390 <z_impl_k_mutex_unlock+0x114>)
   2533e:	480c      	ldr	r0, [pc, #48]	; (25370 <z_impl_k_mutex_unlock+0xf4>)
   25340:	f005 f9a7 	bl	2a692 <assert_print>
   25344:	490e      	ldr	r1, [pc, #56]	; (25380 <z_impl_k_mutex_unlock+0x104>)
   25346:	4813      	ldr	r0, [pc, #76]	; (25394 <z_impl_k_mutex_unlock+0x118>)
   25348:	f005 f9a3 	bl	2a692 <assert_print>
   2534c:	21c2      	movs	r1, #194	; 0xc2
   2534e:	e7d5      	b.n	252fc <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   25350:	f385 8811 	msr	BASEPRI, r5
   25354:	f3bf 8f6f 	isb	sy
   25358:	e7b7      	b.n	252ca <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   2535a:	f06f 0015 	mvn.w	r0, #21
   2535e:	e7b5      	b.n	252cc <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   25360:	f04f 30ff 	mov.w	r0, #4294967295
   25364:	e7b2      	b.n	252cc <z_impl_k_mutex_unlock+0x50>
   25366:	bf00      	nop
   25368:	000383c1 	.word	0x000383c1
   2536c:	0003846e 	.word	0x0003846e
   25370:	00032629 	.word	0x00032629
   25374:	00038490 	.word	0x00038490
   25378:	20021a88 	.word	0x20021a88
   2537c:	000384b5 	.word	0x000384b5
   25380:	20021ab0 	.word	0x20021ab0
   25384:	0003338d 	.word	0x0003338d
   25388:	000333e6 	.word	0x000333e6
   2538c:	000333fb 	.word	0x000333fb
   25390:	000333ba 	.word	0x000333ba
   25394:	000333d1 	.word	0x000333d1

00025398 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   25398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2539c:	4604      	mov	r4, r0
   2539e:	460e      	mov	r6, r1
   253a0:	4690      	mov	r8, r2
   253a2:	4699      	mov	r9, r3
   253a4:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   253a8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   253ac:	f04f 0320 	mov.w	r3, #32
   253b0:	f3ef 8711 	mrs	r7, BASEPRI
   253b4:	f383 8812 	msr	BASEPRI_MAX, r3
   253b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   253bc:	4628      	mov	r0, r5
   253be:	f7ff fe37 	bl	25030 <z_spin_lock_valid>
   253c2:	b968      	cbnz	r0, 253e0 <queue_insert+0x48>
   253c4:	2394      	movs	r3, #148	; 0x94
   253c6:	4a3b      	ldr	r2, [pc, #236]	; (254b4 <queue_insert+0x11c>)
   253c8:	493b      	ldr	r1, [pc, #236]	; (254b8 <queue_insert+0x120>)
   253ca:	483c      	ldr	r0, [pc, #240]	; (254bc <queue_insert+0x124>)
   253cc:	f005 f961 	bl	2a692 <assert_print>
   253d0:	4629      	mov	r1, r5
   253d2:	483b      	ldr	r0, [pc, #236]	; (254c0 <queue_insert+0x128>)
   253d4:	f005 f95d 	bl	2a692 <assert_print>
   253d8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   253da:	4836      	ldr	r0, [pc, #216]	; (254b4 <queue_insert+0x11c>)
   253dc:	f005 f952 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   253e0:	4628      	mov	r0, r5
   253e2:	f7ff fe41 	bl	25068 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   253e6:	f1ba 0f00 	cmp.w	sl, #0
   253ea:	d000      	beq.n	253ee <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   253ec:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   253ee:	f104 000c 	add.w	r0, r4, #12
   253f2:	f001 fe33 	bl	2705c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   253f6:	b158      	cbz	r0, 25410 <queue_insert+0x78>
   253f8:	2300      	movs	r3, #0
   253fa:	f8c0 8014 	str.w	r8, [r0, #20]
   253fe:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   25400:	f001 f854 	bl	264ac <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   25404:	4628      	mov	r0, r5
   25406:	4639      	mov	r1, r7
   25408:	f001 f8dc 	bl	265c4 <z_reschedule>
		return 0;
   2540c:	2000      	movs	r0, #0
   2540e:	e01c      	b.n	2544a <queue_insert+0xb2>
	if (alloc) {
   25410:	f1b9 0f00 	cmp.w	r9, #0
   25414:	d02b      	beq.n	2546e <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   25416:	2108      	movs	r1, #8
   25418:	f003 f8da 	bl	285d0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2541c:	b9b8      	cbnz	r0, 2544e <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2541e:	4628      	mov	r0, r5
   25420:	f7ff fe14 	bl	2504c <z_spin_unlock_valid>
   25424:	b958      	cbnz	r0, 2543e <queue_insert+0xa6>
   25426:	23c2      	movs	r3, #194	; 0xc2
   25428:	4a22      	ldr	r2, [pc, #136]	; (254b4 <queue_insert+0x11c>)
   2542a:	4926      	ldr	r1, [pc, #152]	; (254c4 <queue_insert+0x12c>)
   2542c:	4823      	ldr	r0, [pc, #140]	; (254bc <queue_insert+0x124>)
   2542e:	f005 f930 	bl	2a692 <assert_print>
   25432:	4629      	mov	r1, r5
   25434:	4824      	ldr	r0, [pc, #144]	; (254c8 <queue_insert+0x130>)
   25436:	f005 f92c 	bl	2a692 <assert_print>
   2543a:	21c2      	movs	r1, #194	; 0xc2
   2543c:	e7cd      	b.n	253da <queue_insert+0x42>
	__asm__ volatile(
   2543e:	f387 8811 	msr	BASEPRI, r7
   25442:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   25446:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   2544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2544e:	2201      	movs	r2, #1
		anode->data = data;
   25450:	f8c0 8004 	str.w	r8, [r0, #4]
   25454:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25456:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25458:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2545c:	b95e      	cbnz	r6, 25476 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2545e:	6822      	ldr	r2, [r4, #0]
   25460:	430a      	orrs	r2, r1
   25462:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25464:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   25466:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25468:	b96a      	cbnz	r2, 25486 <queue_insert+0xee>
	list->tail = node;
   2546a:	6060      	str	r0, [r4, #4]
}
   2546c:	e00b      	b.n	25486 <queue_insert+0xee>
}
   2546e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   25470:	f8c8 9000 	str.w	r9, [r8]
}
   25474:	e7ef      	b.n	25456 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25476:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25478:	2a03      	cmp	r2, #3
   2547a:	d810      	bhi.n	2549e <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2547c:	6001      	str	r1, [r0, #0]
	return list->tail;
   2547e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   25480:	b939      	cbnz	r1, 25492 <queue_insert+0xfa>
	list->head = node;
   25482:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25486:	2104      	movs	r1, #4
   25488:	f104 0014 	add.w	r0, r4, #20
   2548c:	f00b f81e 	bl	304cc <z_handle_obj_poll_events>
   25490:	e7b8      	b.n	25404 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25492:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25494:	f002 0203 	and.w	r2, r2, #3
   25498:	4302      	orrs	r2, r0
   2549a:	600a      	str	r2, [r1, #0]
   2549c:	e7e5      	b.n	2546a <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2549e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   254a2:	430a      	orrs	r2, r1
   254a4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   254a6:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   254a8:	f002 0203 	and.w	r2, r2, #3
   254ac:	ea40 0302 	orr.w	r3, r0, r2
   254b0:	6033      	str	r3, [r6, #0]
}
   254b2:	e7e8      	b.n	25486 <queue_insert+0xee>
   254b4:	0003338d 	.word	0x0003338d
   254b8:	000333e6 	.word	0x000333e6
   254bc:	00032629 	.word	0x00032629
   254c0:	000333fb 	.word	0x000333fb
   254c4:	000333ba 	.word	0x000333ba
   254c8:	000333d1 	.word	0x000333d1

000254cc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   254cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   254d0:	4606      	mov	r6, r0
   254d2:	4691      	mov	r9, r2
   254d4:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   254d6:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   254da:	f04f 0320 	mov.w	r3, #32
   254de:	f3ef 8811 	mrs	r8, BASEPRI
   254e2:	f383 8812 	msr	BASEPRI_MAX, r3
   254e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254ea:	4628      	mov	r0, r5
   254ec:	f7ff fda0 	bl	25030 <z_spin_lock_valid>
   254f0:	b968      	cbnz	r0, 2550e <z_impl_k_queue_get+0x42>
   254f2:	2394      	movs	r3, #148	; 0x94
   254f4:	4a23      	ldr	r2, [pc, #140]	; (25584 <z_impl_k_queue_get+0xb8>)
   254f6:	4924      	ldr	r1, [pc, #144]	; (25588 <z_impl_k_queue_get+0xbc>)
   254f8:	4824      	ldr	r0, [pc, #144]	; (2558c <z_impl_k_queue_get+0xc0>)
   254fa:	f005 f8ca 	bl	2a692 <assert_print>
   254fe:	4629      	mov	r1, r5
   25500:	4823      	ldr	r0, [pc, #140]	; (25590 <z_impl_k_queue_get+0xc4>)
   25502:	f005 f8c6 	bl	2a692 <assert_print>
   25506:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25508:	481e      	ldr	r0, [pc, #120]	; (25584 <z_impl_k_queue_get+0xb8>)
   2550a:	f005 f8bb 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   2550e:	4628      	mov	r0, r5
   25510:	f7ff fdaa 	bl	25068 <z_spin_lock_set_owner>
	return list->head;
   25514:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25516:	b1ec      	cbz	r4, 25554 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25518:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2551a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2551c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25520:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25522:	4620      	mov	r0, r4
   25524:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   25528:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2552a:	bf08      	it	eq
   2552c:	6073      	streq	r3, [r6, #4]
   2552e:	f00a fe1a 	bl	30166 <z_queue_node_peek>
   25532:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25534:	4628      	mov	r0, r5
   25536:	f7ff fd89 	bl	2504c <z_spin_unlock_valid>
   2553a:	b9d8      	cbnz	r0, 25574 <z_impl_k_queue_get+0xa8>
   2553c:	23c2      	movs	r3, #194	; 0xc2
   2553e:	4a11      	ldr	r2, [pc, #68]	; (25584 <z_impl_k_queue_get+0xb8>)
   25540:	4914      	ldr	r1, [pc, #80]	; (25594 <z_impl_k_queue_get+0xc8>)
   25542:	4812      	ldr	r0, [pc, #72]	; (2558c <z_impl_k_queue_get+0xc0>)
   25544:	f005 f8a5 	bl	2a692 <assert_print>
   25548:	4629      	mov	r1, r5
   2554a:	4813      	ldr	r0, [pc, #76]	; (25598 <z_impl_k_queue_get+0xcc>)
   2554c:	f005 f8a1 	bl	2a692 <assert_print>
   25550:	21c2      	movs	r1, #194	; 0xc2
   25552:	e7d9      	b.n	25508 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25554:	ea59 0307 	orrs.w	r3, r9, r7
   25558:	d0ec      	beq.n	25534 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2555a:	4641      	mov	r1, r8
   2555c:	4628      	mov	r0, r5
   2555e:	e9cd 9700 	strd	r9, r7, [sp]
   25562:	f106 020c 	add.w	r2, r6, #12
   25566:	f001 fafb 	bl	26b60 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   2556a:	b938      	cbnz	r0, 2557c <z_impl_k_queue_get+0xb0>
   2556c:	4b0b      	ldr	r3, [pc, #44]	; (2559c <z_impl_k_queue_get+0xd0>)
   2556e:	689b      	ldr	r3, [r3, #8]
   25570:	695c      	ldr	r4, [r3, #20]
   25572:	e003      	b.n	2557c <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   25574:	f388 8811 	msr	BASEPRI, r8
   25578:	f3bf 8f6f 	isb	sy
}
   2557c:	4620      	mov	r0, r4
   2557e:	b003      	add	sp, #12
   25580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25584:	0003338d 	.word	0x0003338d
   25588:	000333e6 	.word	0x000333e6
   2558c:	00032629 	.word	0x00032629
   25590:	000333fb 	.word	0x000333fb
   25594:	000333ba 	.word	0x000333ba
   25598:	000333d1 	.word	0x000333d1
   2559c:	20021a88 	.word	0x20021a88

000255a0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   255a0:	b538      	push	{r3, r4, r5, lr}
   255a2:	4604      	mov	r4, r0
	__asm__ volatile(
   255a4:	f04f 0320 	mov.w	r3, #32
   255a8:	f3ef 8511 	mrs	r5, BASEPRI
   255ac:	f383 8812 	msr	BASEPRI_MAX, r3
   255b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   255b4:	4817      	ldr	r0, [pc, #92]	; (25614 <z_impl_k_sem_give+0x74>)
   255b6:	f7ff fd3b 	bl	25030 <z_spin_lock_valid>
   255ba:	b968      	cbnz	r0, 255d8 <z_impl_k_sem_give+0x38>
   255bc:	2394      	movs	r3, #148	; 0x94
   255be:	4a16      	ldr	r2, [pc, #88]	; (25618 <z_impl_k_sem_give+0x78>)
   255c0:	4916      	ldr	r1, [pc, #88]	; (2561c <z_impl_k_sem_give+0x7c>)
   255c2:	4817      	ldr	r0, [pc, #92]	; (25620 <z_impl_k_sem_give+0x80>)
   255c4:	f005 f865 	bl	2a692 <assert_print>
   255c8:	4912      	ldr	r1, [pc, #72]	; (25614 <z_impl_k_sem_give+0x74>)
   255ca:	4816      	ldr	r0, [pc, #88]	; (25624 <z_impl_k_sem_give+0x84>)
   255cc:	f005 f861 	bl	2a692 <assert_print>
   255d0:	2194      	movs	r1, #148	; 0x94
   255d2:	4811      	ldr	r0, [pc, #68]	; (25618 <z_impl_k_sem_give+0x78>)
   255d4:	f005 f856 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   255d8:	480e      	ldr	r0, [pc, #56]	; (25614 <z_impl_k_sem_give+0x74>)
   255da:	f7ff fd45 	bl	25068 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   255de:	4620      	mov	r0, r4
   255e0:	f001 fd3c 	bl	2705c <z_unpend_first_thread>

	if (thread != NULL) {
   255e4:	b148      	cbz	r0, 255fa <z_impl_k_sem_give+0x5a>
   255e6:	2200      	movs	r2, #0
   255e8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   255ea:	f000 ff5f 	bl	264ac <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   255ee:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   255f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   255f4:	4807      	ldr	r0, [pc, #28]	; (25614 <z_impl_k_sem_give+0x74>)
   255f6:	f000 bfe5 	b.w	265c4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   255fa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   255fe:	429a      	cmp	r2, r3
   25600:	bf18      	it	ne
   25602:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25604:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25606:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25608:	f104 0010 	add.w	r0, r4, #16
   2560c:	f00a ff5e 	bl	304cc <z_handle_obj_poll_events>
}
   25610:	e7ed      	b.n	255ee <z_impl_k_sem_give+0x4e>
   25612:	bf00      	nop
   25614:	20021ab4 	.word	0x20021ab4
   25618:	0003338d 	.word	0x0003338d
   2561c:	000333e6 	.word	0x000333e6
   25620:	00032629 	.word	0x00032629
   25624:	000333fb 	.word	0x000333fb

00025628 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2562a:	4604      	mov	r4, r0
   2562c:	4616      	mov	r6, r2
   2562e:	461d      	mov	r5, r3
   25630:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   25634:	b17b      	cbz	r3, 25656 <z_impl_k_sem_take+0x2e>
   25636:	ea52 0305 	orrs.w	r3, r2, r5
   2563a:	d00c      	beq.n	25656 <z_impl_k_sem_take+0x2e>
   2563c:	492d      	ldr	r1, [pc, #180]	; (256f4 <z_impl_k_sem_take+0xcc>)
   2563e:	2379      	movs	r3, #121	; 0x79
   25640:	4a2d      	ldr	r2, [pc, #180]	; (256f8 <z_impl_k_sem_take+0xd0>)
   25642:	482e      	ldr	r0, [pc, #184]	; (256fc <z_impl_k_sem_take+0xd4>)
   25644:	f005 f825 	bl	2a692 <assert_print>
   25648:	482d      	ldr	r0, [pc, #180]	; (25700 <z_impl_k_sem_take+0xd8>)
   2564a:	f005 f822 	bl	2a692 <assert_print>
   2564e:	2179      	movs	r1, #121	; 0x79
   25650:	4829      	ldr	r0, [pc, #164]	; (256f8 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25652:	f005 f817 	bl	2a684 <assert_post_action>
   25656:	f04f 0320 	mov.w	r3, #32
   2565a:	f3ef 8711 	mrs	r7, BASEPRI
   2565e:	f383 8812 	msr	BASEPRI_MAX, r3
   25662:	f3bf 8f6f 	isb	sy
   25666:	4827      	ldr	r0, [pc, #156]	; (25704 <z_impl_k_sem_take+0xdc>)
   25668:	f7ff fce2 	bl	25030 <z_spin_lock_valid>
   2566c:	b960      	cbnz	r0, 25688 <z_impl_k_sem_take+0x60>
   2566e:	2394      	movs	r3, #148	; 0x94
   25670:	4a25      	ldr	r2, [pc, #148]	; (25708 <z_impl_k_sem_take+0xe0>)
   25672:	4926      	ldr	r1, [pc, #152]	; (2570c <z_impl_k_sem_take+0xe4>)
   25674:	4821      	ldr	r0, [pc, #132]	; (256fc <z_impl_k_sem_take+0xd4>)
   25676:	f005 f80c 	bl	2a692 <assert_print>
   2567a:	4922      	ldr	r1, [pc, #136]	; (25704 <z_impl_k_sem_take+0xdc>)
   2567c:	4824      	ldr	r0, [pc, #144]	; (25710 <z_impl_k_sem_take+0xe8>)
   2567e:	f005 f808 	bl	2a692 <assert_print>
   25682:	2194      	movs	r1, #148	; 0x94
   25684:	4820      	ldr	r0, [pc, #128]	; (25708 <z_impl_k_sem_take+0xe0>)
   25686:	e7e4      	b.n	25652 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   25688:	481e      	ldr	r0, [pc, #120]	; (25704 <z_impl_k_sem_take+0xdc>)
   2568a:	f7ff fced 	bl	25068 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2568e:	68a3      	ldr	r3, [r4, #8]
   25690:	b1c3      	cbz	r3, 256c4 <z_impl_k_sem_take+0x9c>
		sem->count--;
   25692:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25694:	481b      	ldr	r0, [pc, #108]	; (25704 <z_impl_k_sem_take+0xdc>)
   25696:	60a3      	str	r3, [r4, #8]
   25698:	f7ff fcd8 	bl	2504c <z_spin_unlock_valid>
   2569c:	b958      	cbnz	r0, 256b6 <z_impl_k_sem_take+0x8e>
   2569e:	23c2      	movs	r3, #194	; 0xc2
   256a0:	4a19      	ldr	r2, [pc, #100]	; (25708 <z_impl_k_sem_take+0xe0>)
   256a2:	491c      	ldr	r1, [pc, #112]	; (25714 <z_impl_k_sem_take+0xec>)
   256a4:	4815      	ldr	r0, [pc, #84]	; (256fc <z_impl_k_sem_take+0xd4>)
   256a6:	f004 fff4 	bl	2a692 <assert_print>
   256aa:	4916      	ldr	r1, [pc, #88]	; (25704 <z_impl_k_sem_take+0xdc>)
   256ac:	481a      	ldr	r0, [pc, #104]	; (25718 <z_impl_k_sem_take+0xf0>)
   256ae:	f004 fff0 	bl	2a692 <assert_print>
   256b2:	21c2      	movs	r1, #194	; 0xc2
   256b4:	e7e6      	b.n	25684 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   256b6:	f387 8811 	msr	BASEPRI, r7
   256ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   256be:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   256c0:	b003      	add	sp, #12
   256c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   256c4:	ea56 0305 	orrs.w	r3, r6, r5
   256c8:	d10b      	bne.n	256e2 <z_impl_k_sem_take+0xba>
   256ca:	480e      	ldr	r0, [pc, #56]	; (25704 <z_impl_k_sem_take+0xdc>)
   256cc:	f7ff fcbe 	bl	2504c <z_spin_unlock_valid>
   256d0:	2800      	cmp	r0, #0
   256d2:	d0e4      	beq.n	2569e <z_impl_k_sem_take+0x76>
   256d4:	f387 8811 	msr	BASEPRI, r7
   256d8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   256dc:	f06f 000f 	mvn.w	r0, #15
   256e0:	e7ee      	b.n	256c0 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   256e2:	4622      	mov	r2, r4
   256e4:	4639      	mov	r1, r7
   256e6:	e9cd 6500 	strd	r6, r5, [sp]
   256ea:	4806      	ldr	r0, [pc, #24]	; (25704 <z_impl_k_sem_take+0xdc>)
   256ec:	f001 fa38 	bl	26b60 <z_pend_curr>
	return ret;
   256f0:	e7e6      	b.n	256c0 <z_impl_k_sem_take+0x98>
   256f2:	bf00      	nop
   256f4:	000384ec 	.word	0x000384ec
   256f8:	000384cc 	.word	0x000384cc
   256fc:	00032629 	.word	0x00032629
   25700:	00036889 	.word	0x00036889
   25704:	20021ab4 	.word	0x20021ab4
   25708:	0003338d 	.word	0x0003338d
   2570c:	000333e6 	.word	0x000333e6
   25710:	000333fb 	.word	0x000333fb
   25714:	000333ba 	.word	0x000333ba
   25718:	000333d1 	.word	0x000333d1

0002571c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2571c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2571e:	2400      	movs	r4, #0
   25720:	4b08      	ldr	r3, [pc, #32]	; (25744 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25722:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   25726:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25728:	ab02      	add	r3, sp, #8
   2572a:	9300      	str	r3, [sp, #0]
   2572c:	4906      	ldr	r1, [pc, #24]	; (25748 <k_sys_work_q_init+0x2c>)
   2572e:	f04f 33ff 	mov.w	r3, #4294967295
   25732:	4806      	ldr	r0, [pc, #24]	; (2574c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25734:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25738:	f000 fac0 	bl	25cbc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2573c:	4620      	mov	r0, r4
   2573e:	b004      	add	sp, #16
   25740:	bd10      	pop	{r4, pc}
   25742:	bf00      	nop
   25744:	0003853a 	.word	0x0003853a
   25748:	200343f0 	.word	0x200343f0
   2574c:	2000a270 	.word	0x2000a270

00025750 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25754:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25756:	4e6e      	ldr	r6, [pc, #440]	; (25910 <work_queue_main+0x1c0>)
	return list->head;
   25758:	4f6e      	ldr	r7, [pc, #440]	; (25914 <work_queue_main+0x1c4>)
   2575a:	b085      	sub	sp, #20
	__asm__ volatile(
   2575c:	f04f 0320 	mov.w	r3, #32
   25760:	f3ef 8811 	mrs	r8, BASEPRI
   25764:	f383 8812 	msr	BASEPRI_MAX, r3
   25768:	f3bf 8f6f 	isb	sy
   2576c:	4630      	mov	r0, r6
   2576e:	f7ff fc5f 	bl	25030 <z_spin_lock_valid>
   25772:	b968      	cbnz	r0, 25790 <work_queue_main+0x40>
   25774:	2394      	movs	r3, #148	; 0x94
   25776:	4a68      	ldr	r2, [pc, #416]	; (25918 <work_queue_main+0x1c8>)
   25778:	4968      	ldr	r1, [pc, #416]	; (2591c <work_queue_main+0x1cc>)
   2577a:	4869      	ldr	r0, [pc, #420]	; (25920 <work_queue_main+0x1d0>)
   2577c:	f004 ff89 	bl	2a692 <assert_print>
   25780:	4963      	ldr	r1, [pc, #396]	; (25910 <work_queue_main+0x1c0>)
   25782:	4868      	ldr	r0, [pc, #416]	; (25924 <work_queue_main+0x1d4>)
   25784:	f004 ff85 	bl	2a692 <assert_print>
   25788:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2578a:	4863      	ldr	r0, [pc, #396]	; (25918 <work_queue_main+0x1c8>)
   2578c:	f004 ff7a 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   25790:	4630      	mov	r0, r6
   25792:	f7ff fc69 	bl	25068 <z_spin_lock_set_owner>
   25796:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   2579a:	b9ad      	cbnz	r5, 257c8 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2579c:	2102      	movs	r1, #2
   2579e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   257a2:	f00a fd1e 	bl	301e2 <flag_test_and_clear>
   257a6:	2800      	cmp	r0, #0
   257a8:	d135      	bne.n	25816 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   257aa:	2300      	movs	r3, #0
   257ac:	f04f 32ff 	mov.w	r2, #4294967295
   257b0:	9302      	str	r3, [sp, #8]
   257b2:	f04f 33ff 	mov.w	r3, #4294967295
   257b6:	4641      	mov	r1, r8
   257b8:	e9cd 2300 	strd	r2, r3, [sp]
   257bc:	4630      	mov	r0, r6
   257be:	f104 0290 	add.w	r2, r4, #144	; 0x90
   257c2:	f001 ff41 	bl	27648 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   257c6:	e7c9      	b.n	2575c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   257c8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   257cc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   257ce:	4295      	cmp	r5, r2
	list->tail = node;
   257d0:	bf08      	it	eq
   257d2:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   257d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   257da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   257de:	4630      	mov	r0, r6
   257e0:	f043 0302 	orr.w	r3, r3, #2
   257e4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   257e8:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   257ea:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   257ee:	f023 0304 	bic.w	r3, r3, #4
   257f2:	f043 0301 	orr.w	r3, r3, #1
   257f6:	60eb      	str	r3, [r5, #12]
   257f8:	f7ff fc28 	bl	2504c <z_spin_unlock_valid>
   257fc:	b9a8      	cbnz	r0, 2582a <work_queue_main+0xda>
   257fe:	23c2      	movs	r3, #194	; 0xc2
   25800:	4a45      	ldr	r2, [pc, #276]	; (25918 <work_queue_main+0x1c8>)
   25802:	4949      	ldr	r1, [pc, #292]	; (25928 <work_queue_main+0x1d8>)
   25804:	4846      	ldr	r0, [pc, #280]	; (25920 <work_queue_main+0x1d0>)
   25806:	f004 ff44 	bl	2a692 <assert_print>
   2580a:	4941      	ldr	r1, [pc, #260]	; (25910 <work_queue_main+0x1c0>)
   2580c:	4847      	ldr	r0, [pc, #284]	; (2592c <work_queue_main+0x1dc>)
   2580e:	f004 ff40 	bl	2a692 <assert_print>
   25812:	21c2      	movs	r1, #194	; 0xc2
   25814:	e7b9      	b.n	2578a <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25816:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2581a:	2200      	movs	r2, #0
   2581c:	2101      	movs	r1, #1
   2581e:	4628      	mov	r0, r5
   25820:	f001 feb4 	bl	2758c <z_sched_wake>
   25824:	2800      	cmp	r0, #0
   25826:	d1f8      	bne.n	2581a <work_queue_main+0xca>
   25828:	e7bf      	b.n	257aa <work_queue_main+0x5a>
	__asm__ volatile(
   2582a:	f388 8811 	msr	BASEPRI, r8
   2582e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   25832:	f1b9 0f00 	cmp.w	r9, #0
   25836:	d10a      	bne.n	2584e <work_queue_main+0xfe>
   25838:	493d      	ldr	r1, [pc, #244]	; (25930 <work_queue_main+0x1e0>)
   2583a:	4839      	ldr	r0, [pc, #228]	; (25920 <work_queue_main+0x1d0>)
   2583c:	f240 239b 	movw	r3, #667	; 0x29b
   25840:	4a3c      	ldr	r2, [pc, #240]	; (25934 <work_queue_main+0x1e4>)
   25842:	f004 ff26 	bl	2a692 <assert_print>
   25846:	f240 219b 	movw	r1, #667	; 0x29b
   2584a:	483a      	ldr	r0, [pc, #232]	; (25934 <work_queue_main+0x1e4>)
   2584c:	e79e      	b.n	2578c <work_queue_main+0x3c>
		handler(work);
   2584e:	4628      	mov	r0, r5
   25850:	47c8      	blx	r9
	__asm__ volatile(
   25852:	f04f 0320 	mov.w	r3, #32
   25856:	f3ef 8a11 	mrs	sl, BASEPRI
   2585a:	f383 8812 	msr	BASEPRI_MAX, r3
   2585e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25862:	4630      	mov	r0, r6
   25864:	f7ff fbe4 	bl	25030 <z_spin_lock_valid>
   25868:	2800      	cmp	r0, #0
   2586a:	d083      	beq.n	25774 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   2586c:	4630      	mov	r0, r6
   2586e:	f7ff fbfb 	bl	25068 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   25872:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25874:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   25876:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2587a:	d417      	bmi.n	258ac <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   2587c:	60ea      	str	r2, [r5, #12]
   2587e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25882:	4630      	mov	r0, r6
   25884:	f023 0302 	bic.w	r3, r3, #2
   25888:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   2588c:	f3c3 2500 	ubfx	r5, r3, #8, #1
   25890:	f7ff fbdc 	bl	2504c <z_spin_unlock_valid>
   25894:	2800      	cmp	r0, #0
   25896:	d0b2      	beq.n	257fe <work_queue_main+0xae>
	__asm__ volatile(
   25898:	f38a 8811 	msr	BASEPRI, sl
   2589c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   258a0:	2d00      	cmp	r5, #0
   258a2:	f47f af5b 	bne.w	2575c <work_queue_main+0xc>
	z_impl_k_yield();
   258a6:	f001 fc35 	bl	27114 <z_impl_k_yield>
}
   258aa:	e757      	b.n	2575c <work_queue_main+0xc>
	return list->head;
   258ac:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   258ae:	f023 0303 	bic.w	r3, r3, #3
   258b2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   258b4:	2800      	cmp	r0, #0
   258b6:	d0e2      	beq.n	2587e <work_queue_main+0x12e>
	return node->next;
   258b8:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   258bc:	46c3      	mov	fp, r8
	return node->next;
   258be:	f8d0 9000 	ldr.w	r9, [r0]
   258c2:	2800      	cmp	r0, #0
   258c4:	d0db      	beq.n	2587e <work_queue_main+0x12e>
		if (wc->work == work) {
   258c6:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   258c8:	4602      	mov	r2, r0
		if (wc->work == work) {
   258ca:	429d      	cmp	r5, r3
   258cc:	d10d      	bne.n	258ea <work_queue_main+0x19a>
   258ce:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   258d0:	f1b8 0f00 	cmp.w	r8, #0
   258d4:	d112      	bne.n	258fc <work_queue_main+0x1ac>
   258d6:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   258d8:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   258da:	4283      	cmp	r3, r0
   258dc:	d100      	bne.n	258e0 <work_queue_main+0x190>
	list->tail = node;
   258de:	607a      	str	r2, [r7, #4]
	parent->next = child;
   258e0:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   258e4:	f7ff fe5c 	bl	255a0 <z_impl_k_sem_give>
}
   258e8:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   258ea:	f1b9 0f00 	cmp.w	r9, #0
   258ee:	d00d      	beq.n	2590c <work_queue_main+0x1bc>
	return node->next;
   258f0:	f8d9 3000 	ldr.w	r3, [r9]
   258f4:	4648      	mov	r0, r9
   258f6:	4690      	mov	r8, r2
   258f8:	4699      	mov	r9, r3
   258fa:	e7e2      	b.n	258c2 <work_queue_main+0x172>
	parent->next = child;
   258fc:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   25900:	687b      	ldr	r3, [r7, #4]
   25902:	4283      	cmp	r3, r0
	list->tail = node;
   25904:	bf08      	it	eq
   25906:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   2590a:	e7e9      	b.n	258e0 <work_queue_main+0x190>
   2590c:	464b      	mov	r3, r9
   2590e:	e7f1      	b.n	258f4 <work_queue_main+0x1a4>
   25910:	20021ac0 	.word	0x20021ac0
   25914:	20021ab8 	.word	0x20021ab8
   25918:	0003338d 	.word	0x0003338d
   2591c:	000333e6 	.word	0x000333e6
   25920:	00032629 	.word	0x00032629
   25924:	000333fb 	.word	0x000333fb
   25928:	000333ba 	.word	0x000333ba
   2592c:	000333d1 	.word	0x000333d1
   25930:	00038564 	.word	0x00038564
   25934:	00038543 	.word	0x00038543

00025938 <cancel_sync_locked>:
{
   25938:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2593a:	68c3      	ldr	r3, [r0, #12]
{
   2593c:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   2593e:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   25942:	079b      	lsls	r3, r3, #30
{
   25944:	460c      	mov	r4, r1
	if (ret) {
   25946:	d50d      	bpl.n	25964 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25948:	2201      	movs	r2, #1
   2594a:	2100      	movs	r1, #0
   2594c:	f104 0008 	add.w	r0, r4, #8
   25950:	f00a fc37 	bl	301c2 <z_impl_k_sem_init>
	parent->next = child;
   25954:	2300      	movs	r3, #0
   25956:	6023      	str	r3, [r4, #0]
	return list->tail;
   25958:	4b05      	ldr	r3, [pc, #20]	; (25970 <cancel_sync_locked+0x38>)
	canceler->work = work;
   2595a:	6065      	str	r5, [r4, #4]
   2595c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2595e:	b91a      	cbnz	r2, 25968 <cancel_sync_locked+0x30>
	list->head = node;
   25960:	e9c3 4400 	strd	r4, r4, [r3]
}
   25964:	4630      	mov	r0, r6
   25966:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   25968:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2596a:	605c      	str	r4, [r3, #4]
}
   2596c:	e7fa      	b.n	25964 <cancel_sync_locked+0x2c>
   2596e:	bf00      	nop
   25970:	20021ab8 	.word	0x20021ab8

00025974 <submit_to_queue_locked>:
{
   25974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   25976:	68c3      	ldr	r3, [r0, #12]
{
   25978:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2597a:	079a      	lsls	r2, r3, #30
{
   2597c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2597e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   25982:	d439      	bmi.n	259f8 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25984:	075b      	lsls	r3, r3, #29
   25986:	d425      	bmi.n	259d4 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   25988:	680b      	ldr	r3, [r1, #0]
   2598a:	b90b      	cbnz	r3, 25990 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2598c:	6883      	ldr	r3, [r0, #8]
   2598e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   25990:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25992:	07dd      	lsls	r5, r3, #31
   25994:	d521      	bpl.n	259da <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   25996:	68a3      	ldr	r3, [r4, #8]
   25998:	b95b      	cbnz	r3, 259b2 <submit_to_queue_locked+0x3e>
   2599a:	4928      	ldr	r1, [pc, #160]	; (25a3c <submit_to_queue_locked+0xc8>)
   2599c:	4828      	ldr	r0, [pc, #160]	; (25a40 <submit_to_queue_locked+0xcc>)
   2599e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   259a2:	4a28      	ldr	r2, [pc, #160]	; (25a44 <submit_to_queue_locked+0xd0>)
   259a4:	f004 fe75 	bl	2a692 <assert_print>
   259a8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   259ac:	4825      	ldr	r0, [pc, #148]	; (25a44 <submit_to_queue_locked+0xd0>)
   259ae:	f004 fe69 	bl	2a684 <assert_post_action>
			ret = 2;
   259b2:	2602      	movs	r6, #2
			*queuep = work->queue;
   259b4:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   259b6:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   259b8:	2d00      	cmp	r5, #0
   259ba:	d03c      	beq.n	25a36 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   259bc:	4b22      	ldr	r3, [pc, #136]	; (25a48 <submit_to_queue_locked+0xd4>)
   259be:	689b      	ldr	r3, [r3, #8]
   259c0:	42ab      	cmp	r3, r5
   259c2:	d00c      	beq.n	259de <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   259c4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   259c8:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   259ca:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   259ce:	d416      	bmi.n	259fe <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   259d0:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   259d4:	2300      	movs	r3, #0
   259d6:	603b      	str	r3, [r7, #0]
	return ret;
   259d8:	e027      	b.n	25a2a <submit_to_queue_locked+0xb6>
		ret = 1;
   259da:	2601      	movs	r6, #1
   259dc:	e7eb      	b.n	259b6 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   259de:	f00a fb9f 	bl	30120 <k_is_in_isr>
   259e2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   259e6:	2800      	cmp	r0, #0
   259e8:	d1ee      	bne.n	259c8 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   259ea:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   259ec:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   259f0:	d5ee      	bpl.n	259d0 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   259f2:	b152      	cbz	r2, 25a0a <submit_to_queue_locked+0x96>
   259f4:	075b      	lsls	r3, r3, #29
   259f6:	d408      	bmi.n	25a0a <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   259f8:	f06f 060f 	mvn.w	r6, #15
   259fc:	e7ea      	b.n	259d4 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   259fe:	2a00      	cmp	r2, #0
   25a00:	d1fa      	bne.n	259f8 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   25a02:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   25a06:	2b00      	cmp	r3, #0
   25a08:	d1f6      	bne.n	259f8 <submit_to_queue_locked+0x84>
	parent->next = child;
   25a0a:	2300      	movs	r3, #0
   25a0c:	6023      	str	r3, [r4, #0]
	return list->tail;
   25a0e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   25a12:	b963      	cbnz	r3, 25a2e <submit_to_queue_locked+0xba>
	list->head = node;
   25a14:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   25a18:	4628      	mov	r0, r5
   25a1a:	f00a fbfb 	bl	30214 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25a1e:	68e3      	ldr	r3, [r4, #12]
   25a20:	f043 0304 	orr.w	r3, r3, #4
   25a24:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25a26:	683b      	ldr	r3, [r7, #0]
   25a28:	60a3      	str	r3, [r4, #8]
}
   25a2a:	4630      	mov	r0, r6
   25a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25a2e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25a30:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   25a34:	e7f0      	b.n	25a18 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   25a36:	f06f 0615 	mvn.w	r6, #21
   25a3a:	e7cb      	b.n	259d4 <submit_to_queue_locked+0x60>
   25a3c:	0003857b 	.word	0x0003857b
   25a40:	00032629 	.word	0x00032629
   25a44:	00038543 	.word	0x00038543
   25a48:	20021a88 	.word	0x20021a88

00025a4c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   25a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25a4e:	4604      	mov	r4, r0
	__asm__ volatile(
   25a50:	f04f 0320 	mov.w	r3, #32
   25a54:	f3ef 8511 	mrs	r5, BASEPRI
   25a58:	f383 8812 	msr	BASEPRI_MAX, r3
   25a5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a60:	481c      	ldr	r0, [pc, #112]	; (25ad4 <work_timeout+0x88>)
   25a62:	f7ff fae5 	bl	25030 <z_spin_lock_valid>
   25a66:	b968      	cbnz	r0, 25a84 <work_timeout+0x38>
   25a68:	2394      	movs	r3, #148	; 0x94
   25a6a:	4a1b      	ldr	r2, [pc, #108]	; (25ad8 <work_timeout+0x8c>)
   25a6c:	491b      	ldr	r1, [pc, #108]	; (25adc <work_timeout+0x90>)
   25a6e:	481c      	ldr	r0, [pc, #112]	; (25ae0 <work_timeout+0x94>)
   25a70:	f004 fe0f 	bl	2a692 <assert_print>
   25a74:	4917      	ldr	r1, [pc, #92]	; (25ad4 <work_timeout+0x88>)
   25a76:	481b      	ldr	r0, [pc, #108]	; (25ae4 <work_timeout+0x98>)
   25a78:	f004 fe0b 	bl	2a692 <assert_print>
   25a7c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a7e:	4816      	ldr	r0, [pc, #88]	; (25ad8 <work_timeout+0x8c>)
   25a80:	f004 fe00 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   25a84:	4813      	ldr	r0, [pc, #76]	; (25ad4 <work_timeout+0x88>)
   25a86:	f7ff faef 	bl	25068 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   25a8a:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25a8c:	2103      	movs	r1, #3
   25a8e:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   25a90:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25a92:	f1a4 0610 	sub.w	r6, r4, #16
   25a96:	f00a fba4 	bl	301e2 <flag_test_and_clear>
   25a9a:	b128      	cbz	r0, 25aa8 <work_timeout+0x5c>
		queue = dw->queue;
   25a9c:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   25a9e:	4630      	mov	r0, r6
   25aa0:	a901      	add	r1, sp, #4
		queue = dw->queue;
   25aa2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25aa4:	f7ff ff66 	bl	25974 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25aa8:	480a      	ldr	r0, [pc, #40]	; (25ad4 <work_timeout+0x88>)
   25aaa:	f7ff facf 	bl	2504c <z_spin_unlock_valid>
   25aae:	b958      	cbnz	r0, 25ac8 <work_timeout+0x7c>
   25ab0:	23c2      	movs	r3, #194	; 0xc2
   25ab2:	4a09      	ldr	r2, [pc, #36]	; (25ad8 <work_timeout+0x8c>)
   25ab4:	490c      	ldr	r1, [pc, #48]	; (25ae8 <work_timeout+0x9c>)
   25ab6:	480a      	ldr	r0, [pc, #40]	; (25ae0 <work_timeout+0x94>)
   25ab8:	f004 fdeb 	bl	2a692 <assert_print>
   25abc:	4905      	ldr	r1, [pc, #20]	; (25ad4 <work_timeout+0x88>)
   25abe:	480b      	ldr	r0, [pc, #44]	; (25aec <work_timeout+0xa0>)
   25ac0:	f004 fde7 	bl	2a692 <assert_print>
   25ac4:	21c2      	movs	r1, #194	; 0xc2
   25ac6:	e7da      	b.n	25a7e <work_timeout+0x32>
	__asm__ volatile(
   25ac8:	f385 8811 	msr	BASEPRI, r5
   25acc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   25ad0:	b002      	add	sp, #8
   25ad2:	bd70      	pop	{r4, r5, r6, pc}
   25ad4:	20021ac0 	.word	0x20021ac0
   25ad8:	0003338d 	.word	0x0003338d
   25adc:	000333e6 	.word	0x000333e6
   25ae0:	00032629 	.word	0x00032629
   25ae4:	000333fb 	.word	0x000333fb
   25ae8:	000333ba 	.word	0x000333ba
   25aec:	000333d1 	.word	0x000333d1

00025af0 <k_work_init>:
{
   25af0:	b538      	push	{r3, r4, r5, lr}
   25af2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   25af4:	4604      	mov	r4, r0
   25af6:	b948      	cbnz	r0, 25b0c <k_work_init+0x1c>
   25af8:	490c      	ldr	r1, [pc, #48]	; (25b2c <k_work_init+0x3c>)
   25afa:	2389      	movs	r3, #137	; 0x89
   25afc:	4a0c      	ldr	r2, [pc, #48]	; (25b30 <k_work_init+0x40>)
   25afe:	480d      	ldr	r0, [pc, #52]	; (25b34 <k_work_init+0x44>)
   25b00:	f004 fdc7 	bl	2a692 <assert_print>
   25b04:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   25b06:	480a      	ldr	r0, [pc, #40]	; (25b30 <k_work_init+0x40>)
   25b08:	f004 fdbc 	bl	2a684 <assert_post_action>
   25b0c:	b939      	cbnz	r1, 25b1e <k_work_init+0x2e>
   25b0e:	490a      	ldr	r1, [pc, #40]	; (25b38 <k_work_init+0x48>)
   25b10:	238a      	movs	r3, #138	; 0x8a
   25b12:	4a07      	ldr	r2, [pc, #28]	; (25b30 <k_work_init+0x40>)
   25b14:	4807      	ldr	r0, [pc, #28]	; (25b34 <k_work_init+0x44>)
   25b16:	f004 fdbc 	bl	2a692 <assert_print>
   25b1a:	218a      	movs	r1, #138	; 0x8a
   25b1c:	e7f3      	b.n	25b06 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25b1e:	2210      	movs	r2, #16
   25b20:	2100      	movs	r1, #0
   25b22:	f00a fd4a 	bl	305ba <memset>
   25b26:	6065      	str	r5, [r4, #4]
}
   25b28:	bd38      	pop	{r3, r4, r5, pc}
   25b2a:	bf00      	nop
   25b2c:	0003861a 	.word	0x0003861a
   25b30:	00038543 	.word	0x00038543
   25b34:	00032629 	.word	0x00032629
   25b38:	00038564 	.word	0x00038564

00025b3c <k_work_busy_get>:
{
   25b3c:	b538      	push	{r3, r4, r5, lr}
   25b3e:	4604      	mov	r4, r0
	__asm__ volatile(
   25b40:	f04f 0320 	mov.w	r3, #32
   25b44:	f3ef 8511 	mrs	r5, BASEPRI
   25b48:	f383 8812 	msr	BASEPRI_MAX, r3
   25b4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b50:	4816      	ldr	r0, [pc, #88]	; (25bac <k_work_busy_get+0x70>)
   25b52:	f7ff fa6d 	bl	25030 <z_spin_lock_valid>
   25b56:	b968      	cbnz	r0, 25b74 <k_work_busy_get+0x38>
   25b58:	2394      	movs	r3, #148	; 0x94
   25b5a:	4a15      	ldr	r2, [pc, #84]	; (25bb0 <k_work_busy_get+0x74>)
   25b5c:	4915      	ldr	r1, [pc, #84]	; (25bb4 <k_work_busy_get+0x78>)
   25b5e:	4816      	ldr	r0, [pc, #88]	; (25bb8 <k_work_busy_get+0x7c>)
   25b60:	f004 fd97 	bl	2a692 <assert_print>
   25b64:	4911      	ldr	r1, [pc, #68]	; (25bac <k_work_busy_get+0x70>)
   25b66:	4815      	ldr	r0, [pc, #84]	; (25bbc <k_work_busy_get+0x80>)
   25b68:	f004 fd93 	bl	2a692 <assert_print>
   25b6c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b6e:	4810      	ldr	r0, [pc, #64]	; (25bb0 <k_work_busy_get+0x74>)
   25b70:	f004 fd88 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   25b74:	480d      	ldr	r0, [pc, #52]	; (25bac <k_work_busy_get+0x70>)
   25b76:	f7ff fa77 	bl	25068 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   25b7a:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b7c:	480b      	ldr	r0, [pc, #44]	; (25bac <k_work_busy_get+0x70>)
   25b7e:	f004 040f 	and.w	r4, r4, #15
   25b82:	f7ff fa63 	bl	2504c <z_spin_unlock_valid>
   25b86:	b958      	cbnz	r0, 25ba0 <k_work_busy_get+0x64>
   25b88:	23c2      	movs	r3, #194	; 0xc2
   25b8a:	4a09      	ldr	r2, [pc, #36]	; (25bb0 <k_work_busy_get+0x74>)
   25b8c:	490c      	ldr	r1, [pc, #48]	; (25bc0 <k_work_busy_get+0x84>)
   25b8e:	480a      	ldr	r0, [pc, #40]	; (25bb8 <k_work_busy_get+0x7c>)
   25b90:	f004 fd7f 	bl	2a692 <assert_print>
   25b94:	4905      	ldr	r1, [pc, #20]	; (25bac <k_work_busy_get+0x70>)
   25b96:	480b      	ldr	r0, [pc, #44]	; (25bc4 <k_work_busy_get+0x88>)
   25b98:	f004 fd7b 	bl	2a692 <assert_print>
   25b9c:	21c2      	movs	r1, #194	; 0xc2
   25b9e:	e7e6      	b.n	25b6e <k_work_busy_get+0x32>
	__asm__ volatile(
   25ba0:	f385 8811 	msr	BASEPRI, r5
   25ba4:	f3bf 8f6f 	isb	sy
}
   25ba8:	4620      	mov	r0, r4
   25baa:	bd38      	pop	{r3, r4, r5, pc}
   25bac:	20021ac0 	.word	0x20021ac0
   25bb0:	0003338d 	.word	0x0003338d
   25bb4:	000333e6 	.word	0x000333e6
   25bb8:	00032629 	.word	0x00032629
   25bbc:	000333fb 	.word	0x000333fb
   25bc0:	000333ba 	.word	0x000333ba
   25bc4:	000333d1 	.word	0x000333d1

00025bc8 <z_work_submit_to_queue>:
{
   25bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   25bca:	460c      	mov	r4, r1
{
   25bcc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   25bce:	b959      	cbnz	r1, 25be8 <z_work_submit_to_queue+0x20>
   25bd0:	4921      	ldr	r1, [pc, #132]	; (25c58 <z_work_submit_to_queue+0x90>)
   25bd2:	4822      	ldr	r0, [pc, #136]	; (25c5c <z_work_submit_to_queue+0x94>)
   25bd4:	f44f 73ba 	mov.w	r3, #372	; 0x174
   25bd8:	4a21      	ldr	r2, [pc, #132]	; (25c60 <z_work_submit_to_queue+0x98>)
   25bda:	f004 fd5a 	bl	2a692 <assert_print>
   25bde:	f44f 71ba 	mov.w	r1, #372	; 0x174
   25be2:	481f      	ldr	r0, [pc, #124]	; (25c60 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25be4:	f004 fd4e 	bl	2a684 <assert_post_action>
	__asm__ volatile(
   25be8:	f04f 0320 	mov.w	r3, #32
   25bec:	f3ef 8511 	mrs	r5, BASEPRI
   25bf0:	f383 8812 	msr	BASEPRI_MAX, r3
   25bf4:	f3bf 8f6f 	isb	sy
   25bf8:	481a      	ldr	r0, [pc, #104]	; (25c64 <z_work_submit_to_queue+0x9c>)
   25bfa:	f7ff fa19 	bl	25030 <z_spin_lock_valid>
   25bfe:	b960      	cbnz	r0, 25c1a <z_work_submit_to_queue+0x52>
   25c00:	2394      	movs	r3, #148	; 0x94
   25c02:	4a19      	ldr	r2, [pc, #100]	; (25c68 <z_work_submit_to_queue+0xa0>)
   25c04:	4919      	ldr	r1, [pc, #100]	; (25c6c <z_work_submit_to_queue+0xa4>)
   25c06:	4815      	ldr	r0, [pc, #84]	; (25c5c <z_work_submit_to_queue+0x94>)
   25c08:	f004 fd43 	bl	2a692 <assert_print>
   25c0c:	4915      	ldr	r1, [pc, #84]	; (25c64 <z_work_submit_to_queue+0x9c>)
   25c0e:	4818      	ldr	r0, [pc, #96]	; (25c70 <z_work_submit_to_queue+0xa8>)
   25c10:	f004 fd3f 	bl	2a692 <assert_print>
   25c14:	2194      	movs	r1, #148	; 0x94
   25c16:	4814      	ldr	r0, [pc, #80]	; (25c68 <z_work_submit_to_queue+0xa0>)
   25c18:	e7e4      	b.n	25be4 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   25c1a:	4812      	ldr	r0, [pc, #72]	; (25c64 <z_work_submit_to_queue+0x9c>)
   25c1c:	f7ff fa24 	bl	25068 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   25c20:	4620      	mov	r0, r4
   25c22:	a901      	add	r1, sp, #4
   25c24:	f7ff fea6 	bl	25974 <submit_to_queue_locked>
   25c28:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c2a:	480e      	ldr	r0, [pc, #56]	; (25c64 <z_work_submit_to_queue+0x9c>)
   25c2c:	f7ff fa0e 	bl	2504c <z_spin_unlock_valid>
   25c30:	b958      	cbnz	r0, 25c4a <z_work_submit_to_queue+0x82>
   25c32:	23c2      	movs	r3, #194	; 0xc2
   25c34:	4a0c      	ldr	r2, [pc, #48]	; (25c68 <z_work_submit_to_queue+0xa0>)
   25c36:	490f      	ldr	r1, [pc, #60]	; (25c74 <z_work_submit_to_queue+0xac>)
   25c38:	4808      	ldr	r0, [pc, #32]	; (25c5c <z_work_submit_to_queue+0x94>)
   25c3a:	f004 fd2a 	bl	2a692 <assert_print>
   25c3e:	4909      	ldr	r1, [pc, #36]	; (25c64 <z_work_submit_to_queue+0x9c>)
   25c40:	480d      	ldr	r0, [pc, #52]	; (25c78 <z_work_submit_to_queue+0xb0>)
   25c42:	f004 fd26 	bl	2a692 <assert_print>
   25c46:	21c2      	movs	r1, #194	; 0xc2
   25c48:	e7e5      	b.n	25c16 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   25c4a:	f385 8811 	msr	BASEPRI, r5
   25c4e:	f3bf 8f6f 	isb	sy
}
   25c52:	4620      	mov	r0, r4
   25c54:	b003      	add	sp, #12
   25c56:	bd30      	pop	{r4, r5, pc}
   25c58:	0003861a 	.word	0x0003861a
   25c5c:	00032629 	.word	0x00032629
   25c60:	00038543 	.word	0x00038543
   25c64:	20021ac0 	.word	0x20021ac0
   25c68:	0003338d 	.word	0x0003338d
   25c6c:	000333e6 	.word	0x000333e6
   25c70:	000333fb 	.word	0x000333fb
   25c74:	000333ba 	.word	0x000333ba
   25c78:	000333d1 	.word	0x000333d1

00025c7c <k_work_submit>:
{
   25c7c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   25c7e:	4801      	ldr	r0, [pc, #4]	; (25c84 <k_work_submit+0x8>)
   25c80:	f00a bb02 	b.w	30288 <k_work_submit_to_queue>
   25c84:	2000a270 	.word	0x2000a270

00025c88 <k_work_queue_init>:
{
   25c88:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   25c8a:	b958      	cbnz	r0, 25ca4 <k_work_queue_init+0x1c>
   25c8c:	4908      	ldr	r1, [pc, #32]	; (25cb0 <k_work_queue_init+0x28>)
   25c8e:	4809      	ldr	r0, [pc, #36]	; (25cb4 <k_work_queue_init+0x2c>)
   25c90:	f240 23b9 	movw	r3, #697	; 0x2b9
   25c94:	4a08      	ldr	r2, [pc, #32]	; (25cb8 <k_work_queue_init+0x30>)
   25c96:	f004 fcfc 	bl	2a692 <assert_print>
   25c9a:	f240 21b9 	movw	r1, #697	; 0x2b9
   25c9e:	4806      	ldr	r0, [pc, #24]	; (25cb8 <k_work_queue_init+0x30>)
   25ca0:	f004 fcf0 	bl	2a684 <assert_post_action>
	*queue = (struct k_work_q) {
   25ca4:	22a8      	movs	r2, #168	; 0xa8
   25ca6:	2100      	movs	r1, #0
   25ca8:	f00a fc87 	bl	305ba <memset>
}
   25cac:	bd08      	pop	{r3, pc}
   25cae:	bf00      	nop
   25cb0:	00038581 	.word	0x00038581
   25cb4:	00032629 	.word	0x00032629
   25cb8:	00038543 	.word	0x00038543

00025cbc <k_work_queue_start>:
{
   25cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   25cbe:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   25cc0:	4604      	mov	r4, r0
{
   25cc2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   25cc4:	b958      	cbnz	r0, 25cde <k_work_queue_start+0x22>
   25cc6:	492b      	ldr	r1, [pc, #172]	; (25d74 <k_work_queue_start+0xb8>)
   25cc8:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   25ccc:	4a2a      	ldr	r2, [pc, #168]	; (25d78 <k_work_queue_start+0xbc>)
   25cce:	482b      	ldr	r0, [pc, #172]	; (25d7c <k_work_queue_start+0xc0>)
   25cd0:	f004 fcdf 	bl	2a692 <assert_print>
   25cd4:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   25cd8:	4827      	ldr	r0, [pc, #156]	; (25d78 <k_work_queue_start+0xbc>)
   25cda:	f004 fcd3 	bl	2a684 <assert_post_action>
   25cde:	b949      	cbnz	r1, 25cf4 <k_work_queue_start+0x38>
   25ce0:	4927      	ldr	r1, [pc, #156]	; (25d80 <k_work_queue_start+0xc4>)
   25ce2:	f240 23c9 	movw	r3, #713	; 0x2c9
   25ce6:	4a24      	ldr	r2, [pc, #144]	; (25d78 <k_work_queue_start+0xbc>)
   25ce8:	4824      	ldr	r0, [pc, #144]	; (25d7c <k_work_queue_start+0xc0>)
   25cea:	f004 fcd2 	bl	2a692 <assert_print>
   25cee:	f240 21c9 	movw	r1, #713	; 0x2c9
   25cf2:	e7f1      	b.n	25cd8 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   25cf4:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   25cf8:	f010 0001 	ands.w	r0, r0, #1
   25cfc:	d009      	beq.n	25d12 <k_work_queue_start+0x56>
   25cfe:	4921      	ldr	r1, [pc, #132]	; (25d84 <k_work_queue_start+0xc8>)
   25d00:	f240 23ca 	movw	r3, #714	; 0x2ca
   25d04:	4a1c      	ldr	r2, [pc, #112]	; (25d78 <k_work_queue_start+0xbc>)
   25d06:	481d      	ldr	r0, [pc, #116]	; (25d7c <k_work_queue_start+0xc0>)
   25d08:	f004 fcc3 	bl	2a692 <assert_print>
   25d0c:	f240 21ca 	movw	r1, #714	; 0x2ca
   25d10:	e7e2      	b.n	25cd8 <k_work_queue_start+0x1c>
	list->tail = NULL;
   25d12:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   25d16:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   25d1a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   25d1e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   25d22:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   25d26:	b31d      	cbz	r5, 25d70 <k_work_queue_start+0xb4>
   25d28:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   25d2a:	2800      	cmp	r0, #0
   25d2c:	f240 1001 	movw	r0, #257	; 0x101
   25d30:	bf08      	it	eq
   25d32:	2001      	moveq	r0, #1
	*flagp = flags;
   25d34:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25d38:	2000      	movs	r0, #0
   25d3a:	f04f 36ff 	mov.w	r6, #4294967295
   25d3e:	f04f 37ff 	mov.w	r7, #4294967295
   25d42:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25d46:	e9cd 0001 	strd	r0, r0, [sp, #4]
   25d4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   25d4e:	4620      	mov	r0, r4
   25d50:	4b0d      	ldr	r3, [pc, #52]	; (25d88 <k_work_queue_start+0xcc>)
   25d52:	9400      	str	r4, [sp, #0]
   25d54:	f7ff f8a2 	bl	24e9c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   25d58:	b125      	cbz	r5, 25d64 <k_work_queue_start+0xa8>
   25d5a:	6829      	ldr	r1, [r5, #0]
   25d5c:	b111      	cbz	r1, 25d64 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   25d5e:	4620      	mov	r0, r4
   25d60:	f00a f9e4 	bl	3012c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25d64:	4620      	mov	r0, r4
}
   25d66:	b009      	add	sp, #36	; 0x24
   25d68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25d6c:	f00a b9e3 	b.w	30136 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25d70:	2001      	movs	r0, #1
   25d72:	e7df      	b.n	25d34 <k_work_queue_start+0x78>
   25d74:	000385d9 	.word	0x000385d9
   25d78:	00038543 	.word	0x00038543
   25d7c:	00032629 	.word	0x00032629
   25d80:	000385df 	.word	0x000385df
   25d84:	000385e5 	.word	0x000385e5
   25d88:	00025751 	.word	0x00025751

00025d8c <k_work_queue_drain>:
{
   25d8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   25d8e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   25d90:	4604      	mov	r4, r0
   25d92:	b958      	cbnz	r0, 25dac <k_work_queue_drain+0x20>
   25d94:	493a      	ldr	r1, [pc, #232]	; (25e80 <k_work_queue_drain+0xf4>)
   25d96:	f240 23ed 	movw	r3, #749	; 0x2ed
   25d9a:	4a3a      	ldr	r2, [pc, #232]	; (25e84 <k_work_queue_drain+0xf8>)
   25d9c:	483a      	ldr	r0, [pc, #232]	; (25e88 <k_work_queue_drain+0xfc>)
   25d9e:	f004 fc78 	bl	2a692 <assert_print>
   25da2:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   25da6:	4837      	ldr	r0, [pc, #220]	; (25e84 <k_work_queue_drain+0xf8>)
   25da8:	f004 fc6c 	bl	2a684 <assert_post_action>
   25dac:	f00a f9b8 	bl	30120 <k_is_in_isr>
   25db0:	b148      	cbz	r0, 25dc6 <k_work_queue_drain+0x3a>
   25db2:	4936      	ldr	r1, [pc, #216]	; (25e8c <k_work_queue_drain+0x100>)
   25db4:	f240 23ee 	movw	r3, #750	; 0x2ee
   25db8:	4a32      	ldr	r2, [pc, #200]	; (25e84 <k_work_queue_drain+0xf8>)
   25dba:	4833      	ldr	r0, [pc, #204]	; (25e88 <k_work_queue_drain+0xfc>)
   25dbc:	f004 fc69 	bl	2a692 <assert_print>
   25dc0:	f240 21ee 	movw	r1, #750	; 0x2ee
   25dc4:	e7ef      	b.n	25da6 <k_work_queue_drain+0x1a>
	__asm__ volatile(
   25dc6:	f04f 0320 	mov.w	r3, #32
   25dca:	f3ef 8611 	mrs	r6, BASEPRI
   25dce:	f383 8812 	msr	BASEPRI_MAX, r3
   25dd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25dd6:	482e      	ldr	r0, [pc, #184]	; (25e90 <k_work_queue_drain+0x104>)
   25dd8:	f7ff f92a 	bl	25030 <z_spin_lock_valid>
   25ddc:	b960      	cbnz	r0, 25df8 <k_work_queue_drain+0x6c>
   25dde:	2394      	movs	r3, #148	; 0x94
   25de0:	4a2c      	ldr	r2, [pc, #176]	; (25e94 <k_work_queue_drain+0x108>)
   25de2:	492d      	ldr	r1, [pc, #180]	; (25e98 <k_work_queue_drain+0x10c>)
   25de4:	4828      	ldr	r0, [pc, #160]	; (25e88 <k_work_queue_drain+0xfc>)
   25de6:	f004 fc54 	bl	2a692 <assert_print>
   25dea:	4929      	ldr	r1, [pc, #164]	; (25e90 <k_work_queue_drain+0x104>)
   25dec:	482b      	ldr	r0, [pc, #172]	; (25e9c <k_work_queue_drain+0x110>)
   25dee:	f004 fc50 	bl	2a692 <assert_print>
   25df2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25df4:	4827      	ldr	r0, [pc, #156]	; (25e94 <k_work_queue_drain+0x108>)
   25df6:	e7d7      	b.n	25da8 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   25df8:	4825      	ldr	r0, [pc, #148]	; (25e90 <k_work_queue_drain+0x104>)
   25dfa:	f7ff f935 	bl	25068 <z_spin_lock_set_owner>
	return *flagp;
   25dfe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   25e02:	f013 0f06 	tst.w	r3, #6
   25e06:	d11d      	bne.n	25e44 <k_work_queue_drain+0xb8>
	    || plug
   25e08:	b1b5      	cbz	r5, 25e38 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   25e0a:	f043 030c 	orr.w	r3, r3, #12
   25e0e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   25e12:	4620      	mov	r0, r4
   25e14:	f00a f9fe 	bl	30214 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   25e18:	2300      	movs	r3, #0
   25e1a:	f04f 32ff 	mov.w	r2, #4294967295
   25e1e:	9302      	str	r3, [sp, #8]
   25e20:	f04f 33ff 	mov.w	r3, #4294967295
   25e24:	4631      	mov	r1, r6
   25e26:	e9cd 2300 	strd	r2, r3, [sp]
   25e2a:	4819      	ldr	r0, [pc, #100]	; (25e90 <k_work_queue_drain+0x104>)
   25e2c:	f104 0298 	add.w	r2, r4, #152	; 0x98
   25e30:	f001 fc0a 	bl	27648 <z_sched_wait>
}
   25e34:	b004      	add	sp, #16
   25e36:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   25e38:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   25e3c:	b14d      	cbz	r5, 25e52 <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   25e3e:	f043 0304 	orr.w	r3, r3, #4
   25e42:	e7e4      	b.n	25e0e <k_work_queue_drain+0x82>
   25e44:	f043 0204 	orr.w	r2, r3, #4
   25e48:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   25e4c:	2d00      	cmp	r5, #0
   25e4e:	d0e0      	beq.n	25e12 <k_work_queue_drain+0x86>
   25e50:	e7db      	b.n	25e0a <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e52:	480f      	ldr	r0, [pc, #60]	; (25e90 <k_work_queue_drain+0x104>)
   25e54:	f7ff f8fa 	bl	2504c <z_spin_unlock_valid>
   25e58:	b958      	cbnz	r0, 25e72 <k_work_queue_drain+0xe6>
   25e5a:	23c2      	movs	r3, #194	; 0xc2
   25e5c:	4a0d      	ldr	r2, [pc, #52]	; (25e94 <k_work_queue_drain+0x108>)
   25e5e:	4910      	ldr	r1, [pc, #64]	; (25ea0 <k_work_queue_drain+0x114>)
   25e60:	4809      	ldr	r0, [pc, #36]	; (25e88 <k_work_queue_drain+0xfc>)
   25e62:	f004 fc16 	bl	2a692 <assert_print>
   25e66:	490a      	ldr	r1, [pc, #40]	; (25e90 <k_work_queue_drain+0x104>)
   25e68:	480e      	ldr	r0, [pc, #56]	; (25ea4 <k_work_queue_drain+0x118>)
   25e6a:	f004 fc12 	bl	2a692 <assert_print>
   25e6e:	21c2      	movs	r1, #194	; 0xc2
   25e70:	e7c0      	b.n	25df4 <k_work_queue_drain+0x68>
	__asm__ volatile(
   25e72:	f386 8811 	msr	BASEPRI, r6
   25e76:	f3bf 8f6f 	isb	sy
	int ret = 0;
   25e7a:	4628      	mov	r0, r5
	return ret;
   25e7c:	e7da      	b.n	25e34 <k_work_queue_drain+0xa8>
   25e7e:	bf00      	nop
   25e80:	000385d9 	.word	0x000385d9
   25e84:	00038543 	.word	0x00038543
   25e88:	00032629 	.word	0x00032629
   25e8c:	000355c0 	.word	0x000355c0
   25e90:	20021ac0 	.word	0x20021ac0
   25e94:	0003338d 	.word	0x0003338d
   25e98:	000333e6 	.word	0x000333e6
   25e9c:	000333fb 	.word	0x000333fb
   25ea0:	000333ba 	.word	0x000333ba
   25ea4:	000333d1 	.word	0x000333d1

00025ea8 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   25ea8:	b538      	push	{r3, r4, r5, lr}
   25eaa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   25eac:	4604      	mov	r4, r0
   25eae:	b958      	cbnz	r0, 25ec8 <k_work_init_delayable+0x20>
   25eb0:	490f      	ldr	r1, [pc, #60]	; (25ef0 <k_work_init_delayable+0x48>)
   25eb2:	f44f 7350 	mov.w	r3, #832	; 0x340
   25eb6:	4a0f      	ldr	r2, [pc, #60]	; (25ef4 <k_work_init_delayable+0x4c>)
   25eb8:	480f      	ldr	r0, [pc, #60]	; (25ef8 <k_work_init_delayable+0x50>)
   25eba:	f004 fbea 	bl	2a692 <assert_print>
   25ebe:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   25ec2:	480c      	ldr	r0, [pc, #48]	; (25ef4 <k_work_init_delayable+0x4c>)
   25ec4:	f004 fbde 	bl	2a684 <assert_post_action>
   25ec8:	b949      	cbnz	r1, 25ede <k_work_init_delayable+0x36>
   25eca:	490c      	ldr	r1, [pc, #48]	; (25efc <k_work_init_delayable+0x54>)
   25ecc:	f240 3341 	movw	r3, #833	; 0x341
   25ed0:	4a08      	ldr	r2, [pc, #32]	; (25ef4 <k_work_init_delayable+0x4c>)
   25ed2:	4809      	ldr	r0, [pc, #36]	; (25ef8 <k_work_init_delayable+0x50>)
   25ed4:	f004 fbdd 	bl	2a692 <assert_print>
   25ed8:	f240 3141 	movw	r1, #833	; 0x341
   25edc:	e7f1      	b.n	25ec2 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   25ede:	2230      	movs	r2, #48	; 0x30
   25ee0:	2100      	movs	r1, #0
   25ee2:	f00a fb6a 	bl	305ba <memset>
   25ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
   25eea:	6065      	str	r5, [r4, #4]
   25eec:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   25eee:	bd38      	pop	{r3, r4, r5, pc}
   25ef0:	00038619 	.word	0x00038619
   25ef4:	00038543 	.word	0x00038543
   25ef8:	00032629 	.word	0x00032629
   25efc:	00038564 	.word	0x00038564

00025f00 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   25f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25f02:	4616      	mov	r6, r2
   25f04:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   25f06:	460c      	mov	r4, r1
{
   25f08:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   25f0a:	b959      	cbnz	r1, 25f24 <k_work_schedule_for_queue+0x24>
   25f0c:	492d      	ldr	r1, [pc, #180]	; (25fc4 <k_work_schedule_for_queue+0xc4>)
   25f0e:	482e      	ldr	r0, [pc, #184]	; (25fc8 <k_work_schedule_for_queue+0xc8>)
   25f10:	f240 33b7 	movw	r3, #951	; 0x3b7
   25f14:	4a2d      	ldr	r2, [pc, #180]	; (25fcc <k_work_schedule_for_queue+0xcc>)
   25f16:	f004 fbbc 	bl	2a692 <assert_print>
   25f1a:	f240 31b7 	movw	r1, #951	; 0x3b7
   25f1e:	482b      	ldr	r0, [pc, #172]	; (25fcc <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f20:	f004 fbb0 	bl	2a684 <assert_post_action>
	__asm__ volatile(
   25f24:	f04f 0320 	mov.w	r3, #32
   25f28:	f3ef 8711 	mrs	r7, BASEPRI
   25f2c:	f383 8812 	msr	BASEPRI_MAX, r3
   25f30:	f3bf 8f6f 	isb	sy
   25f34:	4826      	ldr	r0, [pc, #152]	; (25fd0 <k_work_schedule_for_queue+0xd0>)
   25f36:	f7ff f87b 	bl	25030 <z_spin_lock_valid>
   25f3a:	b960      	cbnz	r0, 25f56 <k_work_schedule_for_queue+0x56>
   25f3c:	2394      	movs	r3, #148	; 0x94
   25f3e:	4a25      	ldr	r2, [pc, #148]	; (25fd4 <k_work_schedule_for_queue+0xd4>)
   25f40:	4925      	ldr	r1, [pc, #148]	; (25fd8 <k_work_schedule_for_queue+0xd8>)
   25f42:	4821      	ldr	r0, [pc, #132]	; (25fc8 <k_work_schedule_for_queue+0xc8>)
   25f44:	f004 fba5 	bl	2a692 <assert_print>
   25f48:	4921      	ldr	r1, [pc, #132]	; (25fd0 <k_work_schedule_for_queue+0xd0>)
   25f4a:	4824      	ldr	r0, [pc, #144]	; (25fdc <k_work_schedule_for_queue+0xdc>)
   25f4c:	f004 fba1 	bl	2a692 <assert_print>
   25f50:	2194      	movs	r1, #148	; 0x94
   25f52:	4820      	ldr	r0, [pc, #128]	; (25fd4 <k_work_schedule_for_queue+0xd4>)
   25f54:	e7e4      	b.n	25f20 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   25f56:	481e      	ldr	r0, [pc, #120]	; (25fd0 <k_work_schedule_for_queue+0xd0>)
   25f58:	f7ff f886 	bl	25068 <z_spin_lock_set_owner>
	return *flagp;
   25f5c:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25f5e:	f013 0f0e 	tst.w	r3, #14
   25f62:	d125      	bne.n	25fb0 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25f64:	ea55 0206 	orrs.w	r2, r5, r6
   25f68:	d114      	bne.n	25f94 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   25f6a:	4620      	mov	r0, r4
   25f6c:	a901      	add	r1, sp, #4
   25f6e:	f7ff fd01 	bl	25974 <submit_to_queue_locked>
   25f72:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25f74:	4816      	ldr	r0, [pc, #88]	; (25fd0 <k_work_schedule_for_queue+0xd0>)
   25f76:	f7ff f869 	bl	2504c <z_spin_unlock_valid>
   25f7a:	b9d8      	cbnz	r0, 25fb4 <k_work_schedule_for_queue+0xb4>
   25f7c:	23c2      	movs	r3, #194	; 0xc2
   25f7e:	4a15      	ldr	r2, [pc, #84]	; (25fd4 <k_work_schedule_for_queue+0xd4>)
   25f80:	4917      	ldr	r1, [pc, #92]	; (25fe0 <k_work_schedule_for_queue+0xe0>)
   25f82:	4811      	ldr	r0, [pc, #68]	; (25fc8 <k_work_schedule_for_queue+0xc8>)
   25f84:	f004 fb85 	bl	2a692 <assert_print>
   25f88:	4911      	ldr	r1, [pc, #68]	; (25fd0 <k_work_schedule_for_queue+0xd0>)
   25f8a:	4816      	ldr	r0, [pc, #88]	; (25fe4 <k_work_schedule_for_queue+0xe4>)
   25f8c:	f004 fb81 	bl	2a692 <assert_print>
   25f90:	21c2      	movs	r1, #194	; 0xc2
   25f92:	e7de      	b.n	25f52 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   25f94:	f043 0308 	orr.w	r3, r3, #8
   25f98:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   25f9a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25f9c:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   25fa0:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25fa2:	4632      	mov	r2, r6
   25fa4:	462b      	mov	r3, r5
   25fa6:	4910      	ldr	r1, [pc, #64]	; (25fe8 <k_work_schedule_for_queue+0xe8>)
   25fa8:	f001 fbc8 	bl	2773c <z_add_timeout>
	return ret;
   25fac:	2401      	movs	r4, #1
   25fae:	e7e1      	b.n	25f74 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   25fb0:	2400      	movs	r4, #0
   25fb2:	e7df      	b.n	25f74 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   25fb4:	f387 8811 	msr	BASEPRI, r7
   25fb8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25fbc:	4620      	mov	r0, r4
   25fbe:	b003      	add	sp, #12
   25fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25fc2:	bf00      	nop
   25fc4:	00038619 	.word	0x00038619
   25fc8:	00032629 	.word	0x00032629
   25fcc:	00038543 	.word	0x00038543
   25fd0:	20021ac0 	.word	0x20021ac0
   25fd4:	0003338d 	.word	0x0003338d
   25fd8:	000333e6 	.word	0x000333e6
   25fdc:	000333fb 	.word	0x000333fb
   25fe0:	000333ba 	.word	0x000333ba
   25fe4:	000333d1 	.word	0x000333d1
   25fe8:	00025a4d 	.word	0x00025a4d

00025fec <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   25fec:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   25fee:	4801      	ldr	r0, [pc, #4]	; (25ff4 <k_work_schedule+0x8>)
   25ff0:	f7ff bf86 	b.w	25f00 <k_work_schedule_for_queue>
   25ff4:	2000a270 	.word	0x2000a270

00025ff8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25ffa:	4616      	mov	r6, r2
   25ffc:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   25ffe:	460c      	mov	r4, r1
{
   26000:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   26002:	b959      	cbnz	r1, 2601c <k_work_reschedule_for_queue+0x24>
   26004:	492c      	ldr	r1, [pc, #176]	; (260b8 <k_work_reschedule_for_queue+0xc0>)
   26006:	482d      	ldr	r0, [pc, #180]	; (260bc <k_work_reschedule_for_queue+0xc4>)
   26008:	f240 33db 	movw	r3, #987	; 0x3db
   2600c:	4a2c      	ldr	r2, [pc, #176]	; (260c0 <k_work_reschedule_for_queue+0xc8>)
   2600e:	f004 fb40 	bl	2a692 <assert_print>
   26012:	f240 31db 	movw	r1, #987	; 0x3db
   26016:	482a      	ldr	r0, [pc, #168]	; (260c0 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26018:	f004 fb34 	bl	2a684 <assert_post_action>
	__asm__ volatile(
   2601c:	f04f 0320 	mov.w	r3, #32
   26020:	f3ef 8711 	mrs	r7, BASEPRI
   26024:	f383 8812 	msr	BASEPRI_MAX, r3
   26028:	f3bf 8f6f 	isb	sy
   2602c:	4825      	ldr	r0, [pc, #148]	; (260c4 <k_work_reschedule_for_queue+0xcc>)
   2602e:	f7fe ffff 	bl	25030 <z_spin_lock_valid>
   26032:	b960      	cbnz	r0, 2604e <k_work_reschedule_for_queue+0x56>
   26034:	2394      	movs	r3, #148	; 0x94
   26036:	4a24      	ldr	r2, [pc, #144]	; (260c8 <k_work_reschedule_for_queue+0xd0>)
   26038:	4924      	ldr	r1, [pc, #144]	; (260cc <k_work_reschedule_for_queue+0xd4>)
   2603a:	4820      	ldr	r0, [pc, #128]	; (260bc <k_work_reschedule_for_queue+0xc4>)
   2603c:	f004 fb29 	bl	2a692 <assert_print>
   26040:	4920      	ldr	r1, [pc, #128]	; (260c4 <k_work_reschedule_for_queue+0xcc>)
   26042:	4823      	ldr	r0, [pc, #140]	; (260d0 <k_work_reschedule_for_queue+0xd8>)
   26044:	f004 fb25 	bl	2a692 <assert_print>
   26048:	2194      	movs	r1, #148	; 0x94
   2604a:	481f      	ldr	r0, [pc, #124]	; (260c8 <k_work_reschedule_for_queue+0xd0>)
   2604c:	e7e4      	b.n	26018 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2604e:	481d      	ldr	r0, [pc, #116]	; (260c4 <k_work_reschedule_for_queue+0xcc>)
   26050:	f7ff f80a 	bl	25068 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   26054:	4620      	mov	r0, r4
   26056:	f00a f8cf 	bl	301f8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2605a:	ea55 0306 	orrs.w	r3, r5, r6
   2605e:	d114      	bne.n	2608a <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   26060:	4620      	mov	r0, r4
   26062:	a901      	add	r1, sp, #4
   26064:	f7ff fc86 	bl	25974 <submit_to_queue_locked>
   26068:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2606a:	4816      	ldr	r0, [pc, #88]	; (260c4 <k_work_reschedule_for_queue+0xcc>)
   2606c:	f7fe ffee 	bl	2504c <z_spin_unlock_valid>
   26070:	b9d0      	cbnz	r0, 260a8 <k_work_reschedule_for_queue+0xb0>
   26072:	23c2      	movs	r3, #194	; 0xc2
   26074:	4a14      	ldr	r2, [pc, #80]	; (260c8 <k_work_reschedule_for_queue+0xd0>)
   26076:	4917      	ldr	r1, [pc, #92]	; (260d4 <k_work_reschedule_for_queue+0xdc>)
   26078:	4810      	ldr	r0, [pc, #64]	; (260bc <k_work_reschedule_for_queue+0xc4>)
   2607a:	f004 fb0a 	bl	2a692 <assert_print>
   2607e:	4911      	ldr	r1, [pc, #68]	; (260c4 <k_work_reschedule_for_queue+0xcc>)
   26080:	4815      	ldr	r0, [pc, #84]	; (260d8 <k_work_reschedule_for_queue+0xe0>)
   26082:	f004 fb06 	bl	2a692 <assert_print>
   26086:	21c2      	movs	r1, #194	; 0xc2
   26088:	e7df      	b.n	2604a <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   2608a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2608c:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   26090:	f043 0308 	orr.w	r3, r3, #8
   26094:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   26096:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26098:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   2609a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2609c:	490f      	ldr	r1, [pc, #60]	; (260dc <k_work_reschedule_for_queue+0xe4>)
   2609e:	462b      	mov	r3, r5
   260a0:	f001 fb4c 	bl	2773c <z_add_timeout>
	return ret;
   260a4:	2401      	movs	r4, #1
   260a6:	e7e0      	b.n	2606a <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   260a8:	f387 8811 	msr	BASEPRI, r7
   260ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   260b0:	4620      	mov	r0, r4
   260b2:	b003      	add	sp, #12
   260b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   260b6:	bf00      	nop
   260b8:	00038619 	.word	0x00038619
   260bc:	00032629 	.word	0x00032629
   260c0:	00038543 	.word	0x00038543
   260c4:	20021ac0 	.word	0x20021ac0
   260c8:	0003338d 	.word	0x0003338d
   260cc:	000333e6 	.word	0x000333e6
   260d0:	000333fb 	.word	0x000333fb
   260d4:	000333ba 	.word	0x000333ba
   260d8:	000333d1 	.word	0x000333d1
   260dc:	00025a4d 	.word	0x00025a4d

000260e0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   260e0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   260e2:	4801      	ldr	r0, [pc, #4]	; (260e8 <k_work_reschedule+0x8>)
   260e4:	f7ff bf88 	b.w	25ff8 <k_work_reschedule_for_queue>
   260e8:	2000a270 	.word	0x2000a270

000260ec <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   260ec:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   260ee:	4604      	mov	r4, r0
   260f0:	b958      	cbnz	r0, 2610a <k_work_cancel_delayable+0x1e>
   260f2:	4922      	ldr	r1, [pc, #136]	; (2617c <k_work_cancel_delayable+0x90>)
   260f4:	4822      	ldr	r0, [pc, #136]	; (26180 <k_work_cancel_delayable+0x94>)
   260f6:	f240 33fd 	movw	r3, #1021	; 0x3fd
   260fa:	4a22      	ldr	r2, [pc, #136]	; (26184 <k_work_cancel_delayable+0x98>)
   260fc:	f004 fac9 	bl	2a692 <assert_print>
   26100:	f240 31fd 	movw	r1, #1021	; 0x3fd
   26104:	481f      	ldr	r0, [pc, #124]	; (26184 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26106:	f004 fabd 	bl	2a684 <assert_post_action>
	__asm__ volatile(
   2610a:	f04f 0320 	mov.w	r3, #32
   2610e:	f3ef 8511 	mrs	r5, BASEPRI
   26112:	f383 8812 	msr	BASEPRI_MAX, r3
   26116:	f3bf 8f6f 	isb	sy
   2611a:	481b      	ldr	r0, [pc, #108]	; (26188 <k_work_cancel_delayable+0x9c>)
   2611c:	f7fe ff88 	bl	25030 <z_spin_lock_valid>
   26120:	b960      	cbnz	r0, 2613c <k_work_cancel_delayable+0x50>
   26122:	2394      	movs	r3, #148	; 0x94
   26124:	4a19      	ldr	r2, [pc, #100]	; (2618c <k_work_cancel_delayable+0xa0>)
   26126:	491a      	ldr	r1, [pc, #104]	; (26190 <k_work_cancel_delayable+0xa4>)
   26128:	4815      	ldr	r0, [pc, #84]	; (26180 <k_work_cancel_delayable+0x94>)
   2612a:	f004 fab2 	bl	2a692 <assert_print>
   2612e:	4916      	ldr	r1, [pc, #88]	; (26188 <k_work_cancel_delayable+0x9c>)
   26130:	4818      	ldr	r0, [pc, #96]	; (26194 <k_work_cancel_delayable+0xa8>)
   26132:	f004 faae 	bl	2a692 <assert_print>
   26136:	2194      	movs	r1, #148	; 0x94
   26138:	4814      	ldr	r0, [pc, #80]	; (2618c <k_work_cancel_delayable+0xa0>)
   2613a:	e7e4      	b.n	26106 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   2613c:	4812      	ldr	r0, [pc, #72]	; (26188 <k_work_cancel_delayable+0x9c>)
   2613e:	f7fe ff93 	bl	25068 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   26142:	4620      	mov	r0, r4
   26144:	f00a f858 	bl	301f8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26148:	4620      	mov	r0, r4
   2614a:	f00a f86a 	bl	30222 <cancel_async_locked>
   2614e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26150:	480d      	ldr	r0, [pc, #52]	; (26188 <k_work_cancel_delayable+0x9c>)
   26152:	f7fe ff7b 	bl	2504c <z_spin_unlock_valid>
   26156:	b958      	cbnz	r0, 26170 <k_work_cancel_delayable+0x84>
   26158:	23c2      	movs	r3, #194	; 0xc2
   2615a:	4a0c      	ldr	r2, [pc, #48]	; (2618c <k_work_cancel_delayable+0xa0>)
   2615c:	490e      	ldr	r1, [pc, #56]	; (26198 <k_work_cancel_delayable+0xac>)
   2615e:	4808      	ldr	r0, [pc, #32]	; (26180 <k_work_cancel_delayable+0x94>)
   26160:	f004 fa97 	bl	2a692 <assert_print>
   26164:	4908      	ldr	r1, [pc, #32]	; (26188 <k_work_cancel_delayable+0x9c>)
   26166:	480d      	ldr	r0, [pc, #52]	; (2619c <k_work_cancel_delayable+0xb0>)
   26168:	f004 fa93 	bl	2a692 <assert_print>
   2616c:	21c2      	movs	r1, #194	; 0xc2
   2616e:	e7e3      	b.n	26138 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   26170:	f385 8811 	msr	BASEPRI, r5
   26174:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   26178:	4620      	mov	r0, r4
   2617a:	bd38      	pop	{r3, r4, r5, pc}
   2617c:	00038619 	.word	0x00038619
   26180:	00032629 	.word	0x00032629
   26184:	00038543 	.word	0x00038543
   26188:	20021ac0 	.word	0x20021ac0
   2618c:	0003338d 	.word	0x0003338d
   26190:	000333e6 	.word	0x000333e6
   26194:	000333fb 	.word	0x000333fb
   26198:	000333ba 	.word	0x000333ba
   2619c:	000333d1 	.word	0x000333d1

000261a0 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   261a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261a4:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   261a6:	4605      	mov	r5, r0
   261a8:	b958      	cbnz	r0, 261c2 <k_work_cancel_delayable_sync+0x22>
   261aa:	493a      	ldr	r1, [pc, #232]	; (26294 <k_work_cancel_delayable_sync+0xf4>)
   261ac:	f240 430e 	movw	r3, #1038	; 0x40e
   261b0:	4a39      	ldr	r2, [pc, #228]	; (26298 <k_work_cancel_delayable_sync+0xf8>)
   261b2:	483a      	ldr	r0, [pc, #232]	; (2629c <k_work_cancel_delayable_sync+0xfc>)
   261b4:	f004 fa6d 	bl	2a692 <assert_print>
   261b8:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   261bc:	4836      	ldr	r0, [pc, #216]	; (26298 <k_work_cancel_delayable_sync+0xf8>)
   261be:	f004 fa61 	bl	2a684 <assert_post_action>
   261c2:	b949      	cbnz	r1, 261d8 <k_work_cancel_delayable_sync+0x38>
   261c4:	4936      	ldr	r1, [pc, #216]	; (262a0 <k_work_cancel_delayable_sync+0x100>)
   261c6:	f240 430f 	movw	r3, #1039	; 0x40f
   261ca:	4a33      	ldr	r2, [pc, #204]	; (26298 <k_work_cancel_delayable_sync+0xf8>)
   261cc:	4833      	ldr	r0, [pc, #204]	; (2629c <k_work_cancel_delayable_sync+0xfc>)
   261ce:	f004 fa60 	bl	2a692 <assert_print>
   261d2:	f240 410f 	movw	r1, #1039	; 0x40f
   261d6:	e7f1      	b.n	261bc <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   261d8:	f009 ffa2 	bl	30120 <k_is_in_isr>
   261dc:	4604      	mov	r4, r0
   261de:	b148      	cbz	r0, 261f4 <k_work_cancel_delayable_sync+0x54>
   261e0:	4930      	ldr	r1, [pc, #192]	; (262a4 <k_work_cancel_delayable_sync+0x104>)
   261e2:	f44f 6382 	mov.w	r3, #1040	; 0x410
   261e6:	4a2c      	ldr	r2, [pc, #176]	; (26298 <k_work_cancel_delayable_sync+0xf8>)
   261e8:	482c      	ldr	r0, [pc, #176]	; (2629c <k_work_cancel_delayable_sync+0xfc>)
   261ea:	f004 fa52 	bl	2a692 <assert_print>
   261ee:	f44f 6182 	mov.w	r1, #1040	; 0x410
   261f2:	e7e3      	b.n	261bc <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   261f4:	f04f 0320 	mov.w	r3, #32
   261f8:	f3ef 8811 	mrs	r8, BASEPRI
   261fc:	f383 8812 	msr	BASEPRI_MAX, r3
   26200:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26204:	4828      	ldr	r0, [pc, #160]	; (262a8 <k_work_cancel_delayable_sync+0x108>)
   26206:	f7fe ff13 	bl	25030 <z_spin_lock_valid>
   2620a:	b960      	cbnz	r0, 26226 <k_work_cancel_delayable_sync+0x86>
   2620c:	2394      	movs	r3, #148	; 0x94
   2620e:	4a27      	ldr	r2, [pc, #156]	; (262ac <k_work_cancel_delayable_sync+0x10c>)
   26210:	4927      	ldr	r1, [pc, #156]	; (262b0 <k_work_cancel_delayable_sync+0x110>)
   26212:	4822      	ldr	r0, [pc, #136]	; (2629c <k_work_cancel_delayable_sync+0xfc>)
   26214:	f004 fa3d 	bl	2a692 <assert_print>
   26218:	4923      	ldr	r1, [pc, #140]	; (262a8 <k_work_cancel_delayable_sync+0x108>)
   2621a:	4826      	ldr	r0, [pc, #152]	; (262b4 <k_work_cancel_delayable_sync+0x114>)
   2621c:	f004 fa39 	bl	2a692 <assert_print>
   26220:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26222:	4822      	ldr	r0, [pc, #136]	; (262ac <k_work_cancel_delayable_sync+0x10c>)
   26224:	e7cb      	b.n	261be <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   26226:	4820      	ldr	r0, [pc, #128]	; (262a8 <k_work_cancel_delayable_sync+0x108>)
   26228:	f7fe ff1e 	bl	25068 <z_spin_lock_set_owner>
	return *flagp;
   2622c:	68eb      	ldr	r3, [r5, #12]
   2622e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   26232:	2b00      	cmp	r3, #0
   26234:	bf14      	ite	ne
   26236:	2701      	movne	r7, #1
   26238:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2623a:	d00a      	beq.n	26252 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   2623c:	4628      	mov	r0, r5
   2623e:	f009 ffdb 	bl	301f8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26242:	4628      	mov	r0, r5
   26244:	f009 ffed 	bl	30222 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   26248:	4631      	mov	r1, r6
   2624a:	4628      	mov	r0, r5
   2624c:	f7ff fb74 	bl	25938 <cancel_sync_locked>
   26250:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26252:	4815      	ldr	r0, [pc, #84]	; (262a8 <k_work_cancel_delayable_sync+0x108>)
   26254:	f7fe fefa 	bl	2504c <z_spin_unlock_valid>
   26258:	b958      	cbnz	r0, 26272 <k_work_cancel_delayable_sync+0xd2>
   2625a:	23c2      	movs	r3, #194	; 0xc2
   2625c:	4a13      	ldr	r2, [pc, #76]	; (262ac <k_work_cancel_delayable_sync+0x10c>)
   2625e:	4916      	ldr	r1, [pc, #88]	; (262b8 <k_work_cancel_delayable_sync+0x118>)
   26260:	480e      	ldr	r0, [pc, #56]	; (2629c <k_work_cancel_delayable_sync+0xfc>)
   26262:	f004 fa16 	bl	2a692 <assert_print>
   26266:	4910      	ldr	r1, [pc, #64]	; (262a8 <k_work_cancel_delayable_sync+0x108>)
   26268:	4814      	ldr	r0, [pc, #80]	; (262bc <k_work_cancel_delayable_sync+0x11c>)
   2626a:	f004 fa12 	bl	2a692 <assert_print>
   2626e:	21c2      	movs	r1, #194	; 0xc2
   26270:	e7d7      	b.n	26222 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   26272:	f388 8811 	msr	BASEPRI, r8
   26276:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2627a:	b13c      	cbz	r4, 2628c <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   2627c:	f04f 32ff 	mov.w	r2, #4294967295
   26280:	f04f 33ff 	mov.w	r3, #4294967295
   26284:	f106 0008 	add.w	r0, r6, #8
   26288:	f7ff f9ce 	bl	25628 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2628c:	4638      	mov	r0, r7
   2628e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26292:	bf00      	nop
   26294:	00038619 	.word	0x00038619
   26298:	00038543 	.word	0x00038543
   2629c:	00032629 	.word	0x00032629
   262a0:	000385c5 	.word	0x000385c5
   262a4:	000355c0 	.word	0x000355c0
   262a8:	20021ac0 	.word	0x20021ac0
   262ac:	0003338d 	.word	0x0003338d
   262b0:	000333e6 	.word	0x000333e6
   262b4:	000333fb 	.word	0x000333fb
   262b8:	000333ba 	.word	0x000333ba
   262bc:	000333d1 	.word	0x000333d1

000262c0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   262c0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   262c2:	4d07      	ldr	r5, [pc, #28]	; (262e0 <z_reset_time_slice+0x20>)
   262c4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   262c6:	b154      	cbz	r4, 262de <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   262c8:	f7f8 fa82 	bl	1e7d0 <sys_clock_elapsed>
   262cc:	4b05      	ldr	r3, [pc, #20]	; (262e4 <z_reset_time_slice+0x24>)
   262ce:	4404      	add	r4, r0
   262d0:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   262d2:	6828      	ldr	r0, [r5, #0]
   262d4:	2100      	movs	r1, #0
	}
}
   262d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   262da:	f001 bb87 	b.w	279ec <z_set_timeout_expiry>
}
   262de:	bd38      	pop	{r3, r4, r5, pc}
   262e0:	20021acc 	.word	0x20021acc
   262e4:	20021a88 	.word	0x20021a88

000262e8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   262e8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   262ea:	4d14      	ldr	r5, [pc, #80]	; (2633c <update_cache+0x54>)
   262ec:	462b      	mov	r3, r5
   262ee:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   262f2:	429c      	cmp	r4, r3
   262f4:	d000      	beq.n	262f8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   262f6:	b904      	cbnz	r4, 262fa <update_cache+0x12>
   262f8:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   262fa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   262fc:	b9a8      	cbnz	r0, 2632a <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   262fe:	b963      	cbnz	r3, 2631a <update_cache+0x32>
   26300:	490f      	ldr	r1, [pc, #60]	; (26340 <update_cache+0x58>)
   26302:	2389      	movs	r3, #137	; 0x89
   26304:	4a0f      	ldr	r2, [pc, #60]	; (26344 <update_cache+0x5c>)
   26306:	4810      	ldr	r0, [pc, #64]	; (26348 <update_cache+0x60>)
   26308:	f004 f9c3 	bl	2a692 <assert_print>
   2630c:	480f      	ldr	r0, [pc, #60]	; (2634c <update_cache+0x64>)
   2630e:	f004 f9c0 	bl	2a692 <assert_print>
   26312:	2189      	movs	r1, #137	; 0x89
   26314:	480b      	ldr	r0, [pc, #44]	; (26344 <update_cache+0x5c>)
   26316:	f004 f9b5 	bl	2a684 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2631a:	7b5a      	ldrb	r2, [r3, #13]
   2631c:	06d2      	lsls	r2, r2, #27
   2631e:	d104      	bne.n	2632a <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   26320:	69a2      	ldr	r2, [r4, #24]
   26322:	b912      	cbnz	r2, 2632a <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   26324:	89da      	ldrh	r2, [r3, #14]
   26326:	2a7f      	cmp	r2, #127	; 0x7f
   26328:	d805      	bhi.n	26336 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2632a:	429c      	cmp	r4, r3
   2632c:	d002      	beq.n	26334 <update_cache+0x4c>
			z_reset_time_slice(thread);
   2632e:	4620      	mov	r0, r4
   26330:	f7ff ffc6 	bl	262c0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   26334:	4623      	mov	r3, r4
   26336:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   26338:	bd38      	pop	{r3, r4, r5, pc}
   2633a:	bf00      	nop
   2633c:	20021a88 	.word	0x20021a88
   26340:	00038650 	.word	0x00038650
   26344:	0003862e 	.word	0x0003862e
   26348:	00032629 	.word	0x00032629
   2634c:	00036889 	.word	0x00036889

00026350 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   26350:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   26352:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   26356:	7b42      	ldrb	r2, [r0, #13]
   26358:	2b00      	cmp	r3, #0
   2635a:	db38      	blt.n	263ce <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2635c:	06d3      	lsls	r3, r2, #27
   2635e:	d136      	bne.n	263ce <ready_thread+0x7e>
	return node->next != NULL;
   26360:	6983      	ldr	r3, [r0, #24]
   26362:	2b00      	cmp	r3, #0
   26364:	d133      	bne.n	263ce <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   26366:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2636a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2636c:	4a18      	ldr	r2, [pc, #96]	; (263d0 <ready_thread+0x80>)
   2636e:	4290      	cmp	r0, r2
   26370:	d109      	bne.n	26386 <ready_thread+0x36>
   26372:	4918      	ldr	r1, [pc, #96]	; (263d4 <ready_thread+0x84>)
   26374:	4818      	ldr	r0, [pc, #96]	; (263d8 <ready_thread+0x88>)
   26376:	23ba      	movs	r3, #186	; 0xba
   26378:	4a18      	ldr	r2, [pc, #96]	; (263dc <ready_thread+0x8c>)
   2637a:	f004 f98a 	bl	2a692 <assert_print>
   2637e:	21ba      	movs	r1, #186	; 0xba
   26380:	4816      	ldr	r0, [pc, #88]	; (263dc <ready_thread+0x8c>)
   26382:	f004 f97f 	bl	2a684 <assert_post_action>
	return list->head == list;
   26386:	4916      	ldr	r1, [pc, #88]	; (263e0 <ready_thread+0x90>)
   26388:	460a      	mov	r2, r1
   2638a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2638e:	4294      	cmp	r4, r2
   26390:	bf18      	it	ne
   26392:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   26394:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26396:	b923      	cbnz	r3, 263a2 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   26398:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   2639c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2639e:	6248      	str	r0, [r1, #36]	; 0x24
}
   263a0:	e00c      	b.n	263bc <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   263a2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   263a6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   263aa:	42b5      	cmp	r5, r6
   263ac:	d00b      	beq.n	263c6 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   263ae:	42ae      	cmp	r6, r5
   263b0:	dd09      	ble.n	263c6 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   263b2:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   263b4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   263b8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   263ba:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   263bc:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   263be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   263c2:	f7ff bf91 	b.w	262e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   263c6:	42a3      	cmp	r3, r4
   263c8:	d0e6      	beq.n	26398 <ready_thread+0x48>
   263ca:	681b      	ldr	r3, [r3, #0]
   263cc:	e7e3      	b.n	26396 <ready_thread+0x46>
}
   263ce:	bd70      	pop	{r4, r5, r6, pc}
   263d0:	2000a160 	.word	0x2000a160
   263d4:	00038677 	.word	0x00038677
   263d8:	00032629 	.word	0x00032629
   263dc:	0003862e 	.word	0x0003862e
   263e0:	20021a88 	.word	0x20021a88

000263e4 <k_sched_time_slice_set>:
{
   263e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   263e6:	4604      	mov	r4, r0
   263e8:	460d      	mov	r5, r1
	__asm__ volatile(
   263ea:	f04f 0320 	mov.w	r3, #32
   263ee:	f3ef 8711 	mrs	r7, BASEPRI
   263f2:	f383 8812 	msr	BASEPRI_MAX, r3
   263f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263fa:	4822      	ldr	r0, [pc, #136]	; (26484 <k_sched_time_slice_set+0xa0>)
   263fc:	f7fe fe18 	bl	25030 <z_spin_lock_valid>
   26400:	b968      	cbnz	r0, 2641e <k_sched_time_slice_set+0x3a>
   26402:	2394      	movs	r3, #148	; 0x94
   26404:	4a20      	ldr	r2, [pc, #128]	; (26488 <k_sched_time_slice_set+0xa4>)
   26406:	4921      	ldr	r1, [pc, #132]	; (2648c <k_sched_time_slice_set+0xa8>)
   26408:	4821      	ldr	r0, [pc, #132]	; (26490 <k_sched_time_slice_set+0xac>)
   2640a:	f004 f942 	bl	2a692 <assert_print>
   2640e:	491d      	ldr	r1, [pc, #116]	; (26484 <k_sched_time_slice_set+0xa0>)
   26410:	4820      	ldr	r0, [pc, #128]	; (26494 <k_sched_time_slice_set+0xb0>)
   26412:	f004 f93e 	bl	2a692 <assert_print>
   26416:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26418:	481b      	ldr	r0, [pc, #108]	; (26488 <k_sched_time_slice_set+0xa4>)
   2641a:	f004 f933 	bl	2a684 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2641e:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   26420:	4818      	ldr	r0, [pc, #96]	; (26484 <k_sched_time_slice_set+0xa0>)
   26422:	f7fe fe21 	bl	25068 <z_spin_lock_set_owner>
   26426:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2642a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2642e:	4631      	mov	r1, r6
   26430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26434:	2300      	movs	r3, #0
   26436:	fbe4 010c 	umlal	r0, r1, r4, ip
   2643a:	f7e2 fd59 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2643e:	42b4      	cmp	r4, r6
   26440:	dd02      	ble.n	26448 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   26442:	2802      	cmp	r0, #2
   26444:	bfb8      	it	lt
   26446:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26448:	4a13      	ldr	r2, [pc, #76]	; (26498 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   2644a:	4b14      	ldr	r3, [pc, #80]	; (2649c <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2644c:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   2644e:	4a14      	ldr	r2, [pc, #80]	; (264a0 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   26450:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   26452:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   26454:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   26456:	f7ff ff33 	bl	262c0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2645a:	480a      	ldr	r0, [pc, #40]	; (26484 <k_sched_time_slice_set+0xa0>)
   2645c:	f7fe fdf6 	bl	2504c <z_spin_unlock_valid>
   26460:	b958      	cbnz	r0, 2647a <k_sched_time_slice_set+0x96>
   26462:	23c2      	movs	r3, #194	; 0xc2
   26464:	4a08      	ldr	r2, [pc, #32]	; (26488 <k_sched_time_slice_set+0xa4>)
   26466:	490f      	ldr	r1, [pc, #60]	; (264a4 <k_sched_time_slice_set+0xc0>)
   26468:	4809      	ldr	r0, [pc, #36]	; (26490 <k_sched_time_slice_set+0xac>)
   2646a:	f004 f912 	bl	2a692 <assert_print>
   2646e:	4905      	ldr	r1, [pc, #20]	; (26484 <k_sched_time_slice_set+0xa0>)
   26470:	480d      	ldr	r0, [pc, #52]	; (264a8 <k_sched_time_slice_set+0xc4>)
   26472:	f004 f90e 	bl	2a692 <assert_print>
   26476:	21c2      	movs	r1, #194	; 0xc2
   26478:	e7ce      	b.n	26418 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   2647a:	f387 8811 	msr	BASEPRI, r7
   2647e:	f3bf 8f6f 	isb	sy
}
   26482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26484:	20021ad0 	.word	0x20021ad0
   26488:	0003338d 	.word	0x0003338d
   2648c:	000333e6 	.word	0x000333e6
   26490:	00032629 	.word	0x00032629
   26494:	000333fb 	.word	0x000333fb
   26498:	20021acc 	.word	0x20021acc
   2649c:	20021a88 	.word	0x20021a88
   264a0:	20021ac8 	.word	0x20021ac8
   264a4:	000333ba 	.word	0x000333ba
   264a8:	000333d1 	.word	0x000333d1

000264ac <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   264ac:	b538      	push	{r3, r4, r5, lr}
   264ae:	4604      	mov	r4, r0
	__asm__ volatile(
   264b0:	f04f 0320 	mov.w	r3, #32
   264b4:	f3ef 8511 	mrs	r5, BASEPRI
   264b8:	f383 8812 	msr	BASEPRI_MAX, r3
   264bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   264c0:	4816      	ldr	r0, [pc, #88]	; (2651c <z_ready_thread+0x70>)
   264c2:	f7fe fdb5 	bl	25030 <z_spin_lock_valid>
   264c6:	b968      	cbnz	r0, 264e4 <z_ready_thread+0x38>
   264c8:	2394      	movs	r3, #148	; 0x94
   264ca:	4a15      	ldr	r2, [pc, #84]	; (26520 <z_ready_thread+0x74>)
   264cc:	4915      	ldr	r1, [pc, #84]	; (26524 <z_ready_thread+0x78>)
   264ce:	4816      	ldr	r0, [pc, #88]	; (26528 <z_ready_thread+0x7c>)
   264d0:	f004 f8df 	bl	2a692 <assert_print>
   264d4:	4911      	ldr	r1, [pc, #68]	; (2651c <z_ready_thread+0x70>)
   264d6:	4815      	ldr	r0, [pc, #84]	; (2652c <z_ready_thread+0x80>)
   264d8:	f004 f8db 	bl	2a692 <assert_print>
   264dc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264de:	4810      	ldr	r0, [pc, #64]	; (26520 <z_ready_thread+0x74>)
   264e0:	f004 f8d0 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   264e4:	480d      	ldr	r0, [pc, #52]	; (2651c <z_ready_thread+0x70>)
   264e6:	f7fe fdbf 	bl	25068 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   264ea:	4620      	mov	r0, r4
   264ec:	f7ff ff30 	bl	26350 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264f0:	480a      	ldr	r0, [pc, #40]	; (2651c <z_ready_thread+0x70>)
   264f2:	f7fe fdab 	bl	2504c <z_spin_unlock_valid>
   264f6:	b958      	cbnz	r0, 26510 <z_ready_thread+0x64>
   264f8:	23c2      	movs	r3, #194	; 0xc2
   264fa:	4a09      	ldr	r2, [pc, #36]	; (26520 <z_ready_thread+0x74>)
   264fc:	490c      	ldr	r1, [pc, #48]	; (26530 <z_ready_thread+0x84>)
   264fe:	480a      	ldr	r0, [pc, #40]	; (26528 <z_ready_thread+0x7c>)
   26500:	f004 f8c7 	bl	2a692 <assert_print>
   26504:	4905      	ldr	r1, [pc, #20]	; (2651c <z_ready_thread+0x70>)
   26506:	480b      	ldr	r0, [pc, #44]	; (26534 <z_ready_thread+0x88>)
   26508:	f004 f8c3 	bl	2a692 <assert_print>
   2650c:	21c2      	movs	r1, #194	; 0xc2
   2650e:	e7e6      	b.n	264de <z_ready_thread+0x32>
	__asm__ volatile(
   26510:	f385 8811 	msr	BASEPRI, r5
   26514:	f3bf 8f6f 	isb	sy
		}
	}
}
   26518:	bd38      	pop	{r3, r4, r5, pc}
   2651a:	bf00      	nop
   2651c:	20021ad0 	.word	0x20021ad0
   26520:	0003338d 	.word	0x0003338d
   26524:	000333e6 	.word	0x000333e6
   26528:	00032629 	.word	0x00032629
   2652c:	000333fb 	.word	0x000333fb
   26530:	000333ba 	.word	0x000333ba
   26534:	000333d1 	.word	0x000333d1

00026538 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   26538:	b538      	push	{r3, r4, r5, lr}
   2653a:	4604      	mov	r4, r0
	__asm__ volatile(
   2653c:	f04f 0320 	mov.w	r3, #32
   26540:	f3ef 8511 	mrs	r5, BASEPRI
   26544:	f383 8812 	msr	BASEPRI_MAX, r3
   26548:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2654c:	4816      	ldr	r0, [pc, #88]	; (265a8 <z_unpend_thread_no_timeout+0x70>)
   2654e:	f7fe fd6f 	bl	25030 <z_spin_lock_valid>
   26552:	b968      	cbnz	r0, 26570 <z_unpend_thread_no_timeout+0x38>
   26554:	2394      	movs	r3, #148	; 0x94
   26556:	4a15      	ldr	r2, [pc, #84]	; (265ac <z_unpend_thread_no_timeout+0x74>)
   26558:	4915      	ldr	r1, [pc, #84]	; (265b0 <z_unpend_thread_no_timeout+0x78>)
   2655a:	4816      	ldr	r0, [pc, #88]	; (265b4 <z_unpend_thread_no_timeout+0x7c>)
   2655c:	f004 f899 	bl	2a692 <assert_print>
   26560:	4911      	ldr	r1, [pc, #68]	; (265a8 <z_unpend_thread_no_timeout+0x70>)
   26562:	4815      	ldr	r0, [pc, #84]	; (265b8 <z_unpend_thread_no_timeout+0x80>)
   26564:	f004 f895 	bl	2a692 <assert_print>
   26568:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2656a:	4810      	ldr	r0, [pc, #64]	; (265ac <z_unpend_thread_no_timeout+0x74>)
   2656c:	f004 f88a 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   26570:	480d      	ldr	r0, [pc, #52]	; (265a8 <z_unpend_thread_no_timeout+0x70>)
   26572:	f7fe fd79 	bl	25068 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   26576:	4620      	mov	r0, r4
   26578:	f000 fc62 	bl	26e40 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2657c:	480a      	ldr	r0, [pc, #40]	; (265a8 <z_unpend_thread_no_timeout+0x70>)
   2657e:	f7fe fd65 	bl	2504c <z_spin_unlock_valid>
   26582:	b958      	cbnz	r0, 2659c <z_unpend_thread_no_timeout+0x64>
   26584:	23c2      	movs	r3, #194	; 0xc2
   26586:	4a09      	ldr	r2, [pc, #36]	; (265ac <z_unpend_thread_no_timeout+0x74>)
   26588:	490c      	ldr	r1, [pc, #48]	; (265bc <z_unpend_thread_no_timeout+0x84>)
   2658a:	480a      	ldr	r0, [pc, #40]	; (265b4 <z_unpend_thread_no_timeout+0x7c>)
   2658c:	f004 f881 	bl	2a692 <assert_print>
   26590:	4905      	ldr	r1, [pc, #20]	; (265a8 <z_unpend_thread_no_timeout+0x70>)
   26592:	480b      	ldr	r0, [pc, #44]	; (265c0 <z_unpend_thread_no_timeout+0x88>)
   26594:	f004 f87d 	bl	2a692 <assert_print>
   26598:	21c2      	movs	r1, #194	; 0xc2
   2659a:	e7e6      	b.n	2656a <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   2659c:	f385 8811 	msr	BASEPRI, r5
   265a0:	f3bf 8f6f 	isb	sy
	}
}
   265a4:	bd38      	pop	{r3, r4, r5, pc}
   265a6:	bf00      	nop
   265a8:	20021ad0 	.word	0x20021ad0
   265ac:	0003338d 	.word	0x0003338d
   265b0:	000333e6 	.word	0x000333e6
   265b4:	00032629 	.word	0x00032629
   265b8:	000333fb 	.word	0x000333fb
   265bc:	000333ba 	.word	0x000333ba
   265c0:	000333d1 	.word	0x000333d1

000265c4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   265c4:	b570      	push	{r4, r5, r6, lr}
   265c6:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   265c8:	460d      	mov	r5, r1
   265ca:	b9e9      	cbnz	r1, 26608 <z_reschedule+0x44>
   265cc:	f3ef 8605 	mrs	r6, IPSR
   265d0:	b9d6      	cbnz	r6, 26608 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   265d2:	4b18      	ldr	r3, [pc, #96]	; (26634 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   265d4:	69da      	ldr	r2, [r3, #28]
   265d6:	689b      	ldr	r3, [r3, #8]
   265d8:	429a      	cmp	r2, r3
   265da:	d015      	beq.n	26608 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265dc:	f7fe fd36 	bl	2504c <z_spin_unlock_valid>
   265e0:	b968      	cbnz	r0, 265fe <z_reschedule+0x3a>
   265e2:	23e1      	movs	r3, #225	; 0xe1
   265e4:	4a14      	ldr	r2, [pc, #80]	; (26638 <z_reschedule+0x74>)
   265e6:	4915      	ldr	r1, [pc, #84]	; (2663c <z_reschedule+0x78>)
   265e8:	4815      	ldr	r0, [pc, #84]	; (26640 <z_reschedule+0x7c>)
   265ea:	f004 f852 	bl	2a692 <assert_print>
   265ee:	4621      	mov	r1, r4
   265f0:	4814      	ldr	r0, [pc, #80]	; (26644 <z_reschedule+0x80>)
   265f2:	f004 f84e 	bl	2a692 <assert_print>
   265f6:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265f8:	480f      	ldr	r0, [pc, #60]	; (26638 <z_reschedule+0x74>)
   265fa:	f004 f843 	bl	2a684 <assert_post_action>
	ret = arch_swap(key);
   265fe:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   26600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26604:	f7ea ba78 	b.w	10af8 <arch_swap>
   26608:	4620      	mov	r0, r4
   2660a:	f7fe fd1f 	bl	2504c <z_spin_unlock_valid>
   2660e:	b958      	cbnz	r0, 26628 <z_reschedule+0x64>
   26610:	23c2      	movs	r3, #194	; 0xc2
   26612:	4a09      	ldr	r2, [pc, #36]	; (26638 <z_reschedule+0x74>)
   26614:	4909      	ldr	r1, [pc, #36]	; (2663c <z_reschedule+0x78>)
   26616:	480a      	ldr	r0, [pc, #40]	; (26640 <z_reschedule+0x7c>)
   26618:	f004 f83b 	bl	2a692 <assert_print>
   2661c:	4621      	mov	r1, r4
   2661e:	4809      	ldr	r0, [pc, #36]	; (26644 <z_reschedule+0x80>)
   26620:	f004 f837 	bl	2a692 <assert_print>
   26624:	21c2      	movs	r1, #194	; 0xc2
   26626:	e7e7      	b.n	265f8 <z_reschedule+0x34>
   26628:	f385 8811 	msr	BASEPRI, r5
   2662c:	f3bf 8f6f 	isb	sy
   26630:	bd70      	pop	{r4, r5, r6, pc}
   26632:	bf00      	nop
   26634:	20021a88 	.word	0x20021a88
   26638:	0003338d 	.word	0x0003338d
   2663c:	000333ba 	.word	0x000333ba
   26640:	00032629 	.word	0x00032629
   26644:	000333d1 	.word	0x000333d1

00026648 <z_sched_start>:
{
   26648:	b538      	push	{r3, r4, r5, lr}
   2664a:	4604      	mov	r4, r0
	__asm__ volatile(
   2664c:	f04f 0320 	mov.w	r3, #32
   26650:	f3ef 8511 	mrs	r5, BASEPRI
   26654:	f383 8812 	msr	BASEPRI_MAX, r3
   26658:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2665c:	481c      	ldr	r0, [pc, #112]	; (266d0 <z_sched_start+0x88>)
   2665e:	f7fe fce7 	bl	25030 <z_spin_lock_valid>
   26662:	b968      	cbnz	r0, 26680 <z_sched_start+0x38>
   26664:	2394      	movs	r3, #148	; 0x94
   26666:	4a1b      	ldr	r2, [pc, #108]	; (266d4 <z_sched_start+0x8c>)
   26668:	491b      	ldr	r1, [pc, #108]	; (266d8 <z_sched_start+0x90>)
   2666a:	481c      	ldr	r0, [pc, #112]	; (266dc <z_sched_start+0x94>)
   2666c:	f004 f811 	bl	2a692 <assert_print>
   26670:	4917      	ldr	r1, [pc, #92]	; (266d0 <z_sched_start+0x88>)
   26672:	481b      	ldr	r0, [pc, #108]	; (266e0 <z_sched_start+0x98>)
   26674:	f004 f80d 	bl	2a692 <assert_print>
   26678:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2667a:	4816      	ldr	r0, [pc, #88]	; (266d4 <z_sched_start+0x8c>)
   2667c:	f004 f802 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   26680:	4813      	ldr	r0, [pc, #76]	; (266d0 <z_sched_start+0x88>)
   26682:	f7fe fcf1 	bl	25068 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   26686:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   26688:	075a      	lsls	r2, r3, #29
   2668a:	d414      	bmi.n	266b6 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2668c:	4810      	ldr	r0, [pc, #64]	; (266d0 <z_sched_start+0x88>)
   2668e:	f7fe fcdd 	bl	2504c <z_spin_unlock_valid>
   26692:	b958      	cbnz	r0, 266ac <z_sched_start+0x64>
   26694:	23c2      	movs	r3, #194	; 0xc2
   26696:	4a0f      	ldr	r2, [pc, #60]	; (266d4 <z_sched_start+0x8c>)
   26698:	4912      	ldr	r1, [pc, #72]	; (266e4 <z_sched_start+0x9c>)
   2669a:	4810      	ldr	r0, [pc, #64]	; (266dc <z_sched_start+0x94>)
   2669c:	f003 fff9 	bl	2a692 <assert_print>
   266a0:	490b      	ldr	r1, [pc, #44]	; (266d0 <z_sched_start+0x88>)
   266a2:	4811      	ldr	r0, [pc, #68]	; (266e8 <z_sched_start+0xa0>)
   266a4:	f003 fff5 	bl	2a692 <assert_print>
   266a8:	21c2      	movs	r1, #194	; 0xc2
   266aa:	e7e6      	b.n	2667a <z_sched_start+0x32>
	__asm__ volatile(
   266ac:	f385 8811 	msr	BASEPRI, r5
   266b0:	f3bf 8f6f 	isb	sy
}
   266b4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   266b6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   266ba:	4620      	mov	r0, r4
   266bc:	7363      	strb	r3, [r4, #13]
   266be:	f7ff fe47 	bl	26350 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   266c2:	4629      	mov	r1, r5
}
   266c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   266c8:	4801      	ldr	r0, [pc, #4]	; (266d0 <z_sched_start+0x88>)
   266ca:	f7ff bf7b 	b.w	265c4 <z_reschedule>
   266ce:	bf00      	nop
   266d0:	20021ad0 	.word	0x20021ad0
   266d4:	0003338d 	.word	0x0003338d
   266d8:	000333e6 	.word	0x000333e6
   266dc:	00032629 	.word	0x00032629
   266e0:	000333fb 	.word	0x000333fb
   266e4:	000333ba 	.word	0x000333ba
   266e8:	000333d1 	.word	0x000333d1

000266ec <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   266ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   266ee:	f04f 0320 	mov.w	r3, #32
   266f2:	f3ef 8411 	mrs	r4, BASEPRI
   266f6:	f383 8812 	msr	BASEPRI_MAX, r3
   266fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   266fe:	4825      	ldr	r0, [pc, #148]	; (26794 <k_sched_lock+0xa8>)
   26700:	f7fe fc96 	bl	25030 <z_spin_lock_valid>
   26704:	b960      	cbnz	r0, 26720 <k_sched_lock+0x34>
   26706:	2394      	movs	r3, #148	; 0x94
   26708:	4a23      	ldr	r2, [pc, #140]	; (26798 <k_sched_lock+0xac>)
   2670a:	4924      	ldr	r1, [pc, #144]	; (2679c <k_sched_lock+0xb0>)
   2670c:	4824      	ldr	r0, [pc, #144]	; (267a0 <k_sched_lock+0xb4>)
   2670e:	f003 ffc0 	bl	2a692 <assert_print>
   26712:	4920      	ldr	r1, [pc, #128]	; (26794 <k_sched_lock+0xa8>)
   26714:	4823      	ldr	r0, [pc, #140]	; (267a4 <k_sched_lock+0xb8>)
   26716:	f003 ffbc 	bl	2a692 <assert_print>
   2671a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2671c:	481e      	ldr	r0, [pc, #120]	; (26798 <k_sched_lock+0xac>)
   2671e:	e010      	b.n	26742 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   26720:	481c      	ldr	r0, [pc, #112]	; (26794 <k_sched_lock+0xa8>)
   26722:	f7fe fca1 	bl	25068 <z_spin_lock_set_owner>
   26726:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2672a:	b163      	cbz	r3, 26746 <k_sched_lock+0x5a>
   2672c:	491e      	ldr	r1, [pc, #120]	; (267a8 <k_sched_lock+0xbc>)
   2672e:	23fd      	movs	r3, #253	; 0xfd
   26730:	4a1e      	ldr	r2, [pc, #120]	; (267ac <k_sched_lock+0xc0>)
   26732:	481b      	ldr	r0, [pc, #108]	; (267a0 <k_sched_lock+0xb4>)
   26734:	f003 ffad 	bl	2a692 <assert_print>
   26738:	481d      	ldr	r0, [pc, #116]	; (267b0 <k_sched_lock+0xc4>)
   2673a:	f003 ffaa 	bl	2a692 <assert_print>
   2673e:	21fd      	movs	r1, #253	; 0xfd
   26740:	481a      	ldr	r0, [pc, #104]	; (267ac <k_sched_lock+0xc0>)
   26742:	f003 ff9f 	bl	2a684 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   26746:	4b1b      	ldr	r3, [pc, #108]	; (267b4 <k_sched_lock+0xc8>)
   26748:	689a      	ldr	r2, [r3, #8]
   2674a:	7bd3      	ldrb	r3, [r2, #15]
   2674c:	2b01      	cmp	r3, #1
   2674e:	d10a      	bne.n	26766 <k_sched_lock+0x7a>
   26750:	4919      	ldr	r1, [pc, #100]	; (267b8 <k_sched_lock+0xcc>)
   26752:	23fe      	movs	r3, #254	; 0xfe
   26754:	4a15      	ldr	r2, [pc, #84]	; (267ac <k_sched_lock+0xc0>)
   26756:	4812      	ldr	r0, [pc, #72]	; (267a0 <k_sched_lock+0xb4>)
   26758:	f003 ff9b 	bl	2a692 <assert_print>
   2675c:	4814      	ldr	r0, [pc, #80]	; (267b0 <k_sched_lock+0xc4>)
   2675e:	f003 ff98 	bl	2a692 <assert_print>
   26762:	21fe      	movs	r1, #254	; 0xfe
   26764:	e7ec      	b.n	26740 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   26766:	3b01      	subs	r3, #1
   26768:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2676a:	480a      	ldr	r0, [pc, #40]	; (26794 <k_sched_lock+0xa8>)
   2676c:	f7fe fc6e 	bl	2504c <z_spin_unlock_valid>
   26770:	b958      	cbnz	r0, 2678a <k_sched_lock+0x9e>
   26772:	23c2      	movs	r3, #194	; 0xc2
   26774:	4a08      	ldr	r2, [pc, #32]	; (26798 <k_sched_lock+0xac>)
   26776:	4911      	ldr	r1, [pc, #68]	; (267bc <k_sched_lock+0xd0>)
   26778:	4809      	ldr	r0, [pc, #36]	; (267a0 <k_sched_lock+0xb4>)
   2677a:	f003 ff8a 	bl	2a692 <assert_print>
   2677e:	4905      	ldr	r1, [pc, #20]	; (26794 <k_sched_lock+0xa8>)
   26780:	480f      	ldr	r0, [pc, #60]	; (267c0 <k_sched_lock+0xd4>)
   26782:	f003 ff86 	bl	2a692 <assert_print>
   26786:	21c2      	movs	r1, #194	; 0xc2
   26788:	e7c8      	b.n	2671c <k_sched_lock+0x30>
	__asm__ volatile(
   2678a:	f384 8811 	msr	BASEPRI, r4
   2678e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   26792:	bd10      	pop	{r4, pc}
   26794:	20021ad0 	.word	0x20021ad0
   26798:	0003338d 	.word	0x0003338d
   2679c:	000333e6 	.word	0x000333e6
   267a0:	00032629 	.word	0x00032629
   267a4:	000333fb 	.word	0x000333fb
   267a8:	000383c1 	.word	0x000383c1
   267ac:	00038698 	.word	0x00038698
   267b0:	00036889 	.word	0x00036889
   267b4:	20021a88 	.word	0x20021a88
   267b8:	000386c3 	.word	0x000386c3
   267bc:	000333ba 	.word	0x000333ba
   267c0:	000333d1 	.word	0x000333d1

000267c4 <k_sched_unlock>:

void k_sched_unlock(void)
{
   267c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   267c6:	f04f 0320 	mov.w	r3, #32
   267ca:	f3ef 8411 	mrs	r4, BASEPRI
   267ce:	f383 8812 	msr	BASEPRI_MAX, r3
   267d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   267d6:	4829      	ldr	r0, [pc, #164]	; (2687c <k_sched_unlock+0xb8>)
   267d8:	f7fe fc2a 	bl	25030 <z_spin_lock_valid>
   267dc:	b960      	cbnz	r0, 267f8 <k_sched_unlock+0x34>
   267de:	2394      	movs	r3, #148	; 0x94
   267e0:	4a27      	ldr	r2, [pc, #156]	; (26880 <k_sched_unlock+0xbc>)
   267e2:	4928      	ldr	r1, [pc, #160]	; (26884 <k_sched_unlock+0xc0>)
   267e4:	4828      	ldr	r0, [pc, #160]	; (26888 <k_sched_unlock+0xc4>)
   267e6:	f003 ff54 	bl	2a692 <assert_print>
   267ea:	4924      	ldr	r1, [pc, #144]	; (2687c <k_sched_unlock+0xb8>)
   267ec:	4827      	ldr	r0, [pc, #156]	; (2688c <k_sched_unlock+0xc8>)
   267ee:	f003 ff50 	bl	2a692 <assert_print>
   267f2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   267f4:	4822      	ldr	r0, [pc, #136]	; (26880 <k_sched_unlock+0xbc>)
   267f6:	e013      	b.n	26820 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   267f8:	4820      	ldr	r0, [pc, #128]	; (2687c <k_sched_unlock+0xb8>)
   267fa:	f7fe fc35 	bl	25068 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   267fe:	4b24      	ldr	r3, [pc, #144]	; (26890 <k_sched_unlock+0xcc>)
   26800:	689a      	ldr	r2, [r3, #8]
   26802:	7bd3      	ldrb	r3, [r2, #15]
   26804:	b973      	cbnz	r3, 26824 <k_sched_unlock+0x60>
   26806:	4923      	ldr	r1, [pc, #140]	; (26894 <k_sched_unlock+0xd0>)
   26808:	f240 33e7 	movw	r3, #999	; 0x3e7
   2680c:	4a22      	ldr	r2, [pc, #136]	; (26898 <k_sched_unlock+0xd4>)
   2680e:	481e      	ldr	r0, [pc, #120]	; (26888 <k_sched_unlock+0xc4>)
   26810:	f003 ff3f 	bl	2a692 <assert_print>
   26814:	4821      	ldr	r0, [pc, #132]	; (2689c <k_sched_unlock+0xd8>)
   26816:	f003 ff3c 	bl	2a692 <assert_print>
   2681a:	f240 31e7 	movw	r1, #999	; 0x3e7
   2681e:	481e      	ldr	r0, [pc, #120]	; (26898 <k_sched_unlock+0xd4>)
   26820:	f003 ff30 	bl	2a684 <assert_post_action>
   26824:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   26828:	b160      	cbz	r0, 26844 <k_sched_unlock+0x80>
   2682a:	491d      	ldr	r1, [pc, #116]	; (268a0 <k_sched_unlock+0xdc>)
   2682c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26830:	4a19      	ldr	r2, [pc, #100]	; (26898 <k_sched_unlock+0xd4>)
   26832:	4815      	ldr	r0, [pc, #84]	; (26888 <k_sched_unlock+0xc4>)
   26834:	f003 ff2d 	bl	2a692 <assert_print>
   26838:	4818      	ldr	r0, [pc, #96]	; (2689c <k_sched_unlock+0xd8>)
   2683a:	f003 ff2a 	bl	2a692 <assert_print>
   2683e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   26842:	e7ec      	b.n	2681e <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   26844:	3301      	adds	r3, #1
   26846:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26848:	f7ff fd4e 	bl	262e8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2684c:	480b      	ldr	r0, [pc, #44]	; (2687c <k_sched_unlock+0xb8>)
   2684e:	f7fe fbfd 	bl	2504c <z_spin_unlock_valid>
   26852:	b958      	cbnz	r0, 2686c <k_sched_unlock+0xa8>
   26854:	23c2      	movs	r3, #194	; 0xc2
   26856:	4a0a      	ldr	r2, [pc, #40]	; (26880 <k_sched_unlock+0xbc>)
   26858:	4912      	ldr	r1, [pc, #72]	; (268a4 <k_sched_unlock+0xe0>)
   2685a:	480b      	ldr	r0, [pc, #44]	; (26888 <k_sched_unlock+0xc4>)
   2685c:	f003 ff19 	bl	2a692 <assert_print>
   26860:	4906      	ldr	r1, [pc, #24]	; (2687c <k_sched_unlock+0xb8>)
   26862:	4811      	ldr	r0, [pc, #68]	; (268a8 <k_sched_unlock+0xe4>)
   26864:	f003 ff15 	bl	2a692 <assert_print>
   26868:	21c2      	movs	r1, #194	; 0xc2
   2686a:	e7c3      	b.n	267f4 <k_sched_unlock+0x30>
	__asm__ volatile(
   2686c:	f384 8811 	msr	BASEPRI, r4
   26870:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   26874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   26878:	f009 bd2e 	b.w	302d8 <z_reschedule_unlocked>
   2687c:	20021ad0 	.word	0x20021ad0
   26880:	0003338d 	.word	0x0003338d
   26884:	000333e6 	.word	0x000333e6
   26888:	00032629 	.word	0x00032629
   2688c:	000333fb 	.word	0x000333fb
   26890:	20021a88 	.word	0x20021a88
   26894:	000386f4 	.word	0x000386f4
   26898:	0003862e 	.word	0x0003862e
   2689c:	00036889 	.word	0x00036889
   268a0:	000383c1 	.word	0x000383c1
   268a4:	000333ba 	.word	0x000333ba
   268a8:	000333d1 	.word	0x000333d1

000268ac <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   268ac:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   268ae:	4b0b      	ldr	r3, [pc, #44]	; (268dc <z_priq_dumb_remove+0x30>)
   268b0:	4299      	cmp	r1, r3
   268b2:	d10b      	bne.n	268cc <z_priq_dumb_remove+0x20>
   268b4:	490a      	ldr	r1, [pc, #40]	; (268e0 <z_priq_dumb_remove+0x34>)
   268b6:	480b      	ldr	r0, [pc, #44]	; (268e4 <z_priq_dumb_remove+0x38>)
   268b8:	f240 4373 	movw	r3, #1139	; 0x473
   268bc:	4a0a      	ldr	r2, [pc, #40]	; (268e8 <z_priq_dumb_remove+0x3c>)
   268be:	f003 fee8 	bl	2a692 <assert_print>
   268c2:	f240 4173 	movw	r1, #1139	; 0x473
   268c6:	4808      	ldr	r0, [pc, #32]	; (268e8 <z_priq_dumb_remove+0x3c>)
   268c8:	f003 fedc 	bl	2a684 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   268cc:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   268d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   268d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   268d4:	2300      	movs	r3, #0
	node->prev = NULL;
   268d6:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   268da:	bd08      	pop	{r3, pc}
   268dc:	2000a160 	.word	0x2000a160
   268e0:	00038677 	.word	0x00038677
   268e4:	00032629 	.word	0x00032629
   268e8:	0003862e 	.word	0x0003862e

000268ec <move_thread_to_end_of_prio_q>:
{
   268ec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   268ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   268f2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   268f4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   268f6:	7b43      	ldrb	r3, [r0, #13]
   268f8:	da06      	bge.n	26908 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   268fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   268fe:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26900:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26902:	481d      	ldr	r0, [pc, #116]	; (26978 <move_thread_to_end_of_prio_q+0x8c>)
   26904:	f7ff ffd2 	bl	268ac <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26908:	7b63      	ldrb	r3, [r4, #13]
   2690a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2690e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26910:	4b1a      	ldr	r3, [pc, #104]	; (2697c <move_thread_to_end_of_prio_q+0x90>)
   26912:	429c      	cmp	r4, r3
   26914:	d109      	bne.n	2692a <move_thread_to_end_of_prio_q+0x3e>
   26916:	491a      	ldr	r1, [pc, #104]	; (26980 <move_thread_to_end_of_prio_q+0x94>)
   26918:	481a      	ldr	r0, [pc, #104]	; (26984 <move_thread_to_end_of_prio_q+0x98>)
   2691a:	23ba      	movs	r3, #186	; 0xba
   2691c:	4a1a      	ldr	r2, [pc, #104]	; (26988 <move_thread_to_end_of_prio_q+0x9c>)
   2691e:	f003 feb8 	bl	2a692 <assert_print>
   26922:	21ba      	movs	r1, #186	; 0xba
   26924:	4818      	ldr	r0, [pc, #96]	; (26988 <move_thread_to_end_of_prio_q+0x9c>)
   26926:	f003 fead 	bl	2a684 <assert_post_action>
	return list->head == list;
   2692a:	4a18      	ldr	r2, [pc, #96]	; (2698c <move_thread_to_end_of_prio_q+0xa0>)
   2692c:	4611      	mov	r1, r2
   2692e:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   26932:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26934:	428b      	cmp	r3, r1
   26936:	bf08      	it	eq
   26938:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2693a:	b923      	cbnz	r3, 26946 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   2693c:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   26940:	6004      	str	r4, [r0, #0]
	list->tail = node;
   26942:	6254      	str	r4, [r2, #36]	; 0x24
}
   26944:	e00c      	b.n	26960 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   26946:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2694a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2694e:	42b5      	cmp	r5, r6
   26950:	d00e      	beq.n	26970 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26952:	42ae      	cmp	r6, r5
   26954:	dd0c      	ble.n	26970 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   26956:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   26958:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2695c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2695e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   26960:	6890      	ldr	r0, [r2, #8]
   26962:	1b03      	subs	r3, r0, r4
   26964:	4258      	negs	r0, r3
   26966:	4158      	adcs	r0, r3
}
   26968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2696c:	f7ff bcbc 	b.w	262e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26970:	4298      	cmp	r0, r3
   26972:	d0e3      	beq.n	2693c <move_thread_to_end_of_prio_q+0x50>
   26974:	681b      	ldr	r3, [r3, #0]
   26976:	e7e0      	b.n	2693a <move_thread_to_end_of_prio_q+0x4e>
   26978:	20021aa8 	.word	0x20021aa8
   2697c:	2000a160 	.word	0x2000a160
   26980:	00038677 	.word	0x00038677
   26984:	00032629 	.word	0x00032629
   26988:	0003862e 	.word	0x0003862e
   2698c:	20021a88 	.word	0x20021a88

00026990 <z_time_slice>:
{
   26990:	b570      	push	{r4, r5, r6, lr}
   26992:	4605      	mov	r5, r0
	__asm__ volatile(
   26994:	f04f 0320 	mov.w	r3, #32
   26998:	f3ef 8611 	mrs	r6, BASEPRI
   2699c:	f383 8812 	msr	BASEPRI_MAX, r3
   269a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   269a4:	4829      	ldr	r0, [pc, #164]	; (26a4c <z_time_slice+0xbc>)
   269a6:	f7fe fb43 	bl	25030 <z_spin_lock_valid>
   269aa:	b968      	cbnz	r0, 269c8 <z_time_slice+0x38>
   269ac:	2394      	movs	r3, #148	; 0x94
   269ae:	4a28      	ldr	r2, [pc, #160]	; (26a50 <z_time_slice+0xc0>)
   269b0:	4928      	ldr	r1, [pc, #160]	; (26a54 <z_time_slice+0xc4>)
   269b2:	4829      	ldr	r0, [pc, #164]	; (26a58 <z_time_slice+0xc8>)
   269b4:	f003 fe6d 	bl	2a692 <assert_print>
   269b8:	4924      	ldr	r1, [pc, #144]	; (26a4c <z_time_slice+0xbc>)
   269ba:	4828      	ldr	r0, [pc, #160]	; (26a5c <z_time_slice+0xcc>)
   269bc:	f003 fe69 	bl	2a692 <assert_print>
   269c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269c2:	4823      	ldr	r0, [pc, #140]	; (26a50 <z_time_slice+0xc0>)
   269c4:	f003 fe5e 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   269c8:	4820      	ldr	r0, [pc, #128]	; (26a4c <z_time_slice+0xbc>)
   269ca:	f7fe fb4d 	bl	25068 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   269ce:	4b24      	ldr	r3, [pc, #144]	; (26a60 <z_time_slice+0xd0>)
   269d0:	4a24      	ldr	r2, [pc, #144]	; (26a64 <z_time_slice+0xd4>)
   269d2:	689c      	ldr	r4, [r3, #8]
   269d4:	6811      	ldr	r1, [r2, #0]
   269d6:	428c      	cmp	r4, r1
   269d8:	d112      	bne.n	26a00 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   269da:	4620      	mov	r0, r4
   269dc:	f7ff fc70 	bl	262c0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269e0:	481a      	ldr	r0, [pc, #104]	; (26a4c <z_time_slice+0xbc>)
   269e2:	f7fe fb33 	bl	2504c <z_spin_unlock_valid>
   269e6:	bb58      	cbnz	r0, 26a40 <z_time_slice+0xb0>
   269e8:	23c2      	movs	r3, #194	; 0xc2
   269ea:	4a19      	ldr	r2, [pc, #100]	; (26a50 <z_time_slice+0xc0>)
   269ec:	491e      	ldr	r1, [pc, #120]	; (26a68 <z_time_slice+0xd8>)
   269ee:	481a      	ldr	r0, [pc, #104]	; (26a58 <z_time_slice+0xc8>)
   269f0:	f003 fe4f 	bl	2a692 <assert_print>
   269f4:	4915      	ldr	r1, [pc, #84]	; (26a4c <z_time_slice+0xbc>)
   269f6:	481d      	ldr	r0, [pc, #116]	; (26a6c <z_time_slice+0xdc>)
   269f8:	f003 fe4b 	bl	2a692 <assert_print>
   269fc:	21c2      	movs	r1, #194	; 0xc2
   269fe:	e7e0      	b.n	269c2 <z_time_slice+0x32>
	pending_current = NULL;
   26a00:	2100      	movs	r1, #0
   26a02:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   26a04:	4a1a      	ldr	r2, [pc, #104]	; (26a70 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   26a06:	6812      	ldr	r2, [r2, #0]
   26a08:	b1c2      	cbz	r2, 26a3c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   26a0a:	89e2      	ldrh	r2, [r4, #14]
   26a0c:	2a7f      	cmp	r2, #127	; 0x7f
   26a0e:	d815      	bhi.n	26a3c <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   26a10:	7b62      	ldrb	r2, [r4, #13]
   26a12:	06d2      	lsls	r2, r2, #27
   26a14:	d112      	bne.n	26a3c <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26a16:	4a17      	ldr	r2, [pc, #92]	; (26a74 <z_time_slice+0xe4>)
   26a18:	f994 100e 	ldrsb.w	r1, [r4, #14]
   26a1c:	6812      	ldr	r2, [r2, #0]
   26a1e:	4291      	cmp	r1, r2
   26a20:	db0c      	blt.n	26a3c <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   26a22:	4a15      	ldr	r2, [pc, #84]	; (26a78 <z_time_slice+0xe8>)
   26a24:	4294      	cmp	r4, r2
   26a26:	d009      	beq.n	26a3c <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   26a28:	691a      	ldr	r2, [r3, #16]
   26a2a:	42aa      	cmp	r2, r5
   26a2c:	dc03      	bgt.n	26a36 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   26a2e:	4620      	mov	r0, r4
   26a30:	f7ff ff5c 	bl	268ec <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   26a34:	e7d1      	b.n	269da <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   26a36:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   26a38:	611a      	str	r2, [r3, #16]
   26a3a:	e7d1      	b.n	269e0 <z_time_slice+0x50>
   26a3c:	2200      	movs	r2, #0
   26a3e:	e7fb      	b.n	26a38 <z_time_slice+0xa8>
	__asm__ volatile(
   26a40:	f386 8811 	msr	BASEPRI, r6
   26a44:	f3bf 8f6f 	isb	sy
}
   26a48:	bd70      	pop	{r4, r5, r6, pc}
   26a4a:	bf00      	nop
   26a4c:	20021ad0 	.word	0x20021ad0
   26a50:	0003338d 	.word	0x0003338d
   26a54:	000333e6 	.word	0x000333e6
   26a58:	00032629 	.word	0x00032629
   26a5c:	000333fb 	.word	0x000333fb
   26a60:	20021a88 	.word	0x20021a88
   26a64:	20021ac4 	.word	0x20021ac4
   26a68:	000333ba 	.word	0x000333ba
   26a6c:	000333d1 	.word	0x000333d1
   26a70:	20021acc 	.word	0x20021acc
   26a74:	20021ac8 	.word	0x20021ac8
   26a78:	2000a160 	.word	0x2000a160

00026a7c <unready_thread>:
{
   26a7c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   26a7e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   26a82:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   26a84:	2a00      	cmp	r2, #0
   26a86:	7b43      	ldrb	r3, [r0, #13]
   26a88:	da06      	bge.n	26a98 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26a8e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26a90:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26a92:	4806      	ldr	r0, [pc, #24]	; (26aac <unready_thread+0x30>)
   26a94:	f7ff ff0a 	bl	268ac <z_priq_dumb_remove>
	update_cache(thread == _current);
   26a98:	4b05      	ldr	r3, [pc, #20]	; (26ab0 <unready_thread+0x34>)
   26a9a:	6898      	ldr	r0, [r3, #8]
   26a9c:	1b03      	subs	r3, r0, r4
   26a9e:	4258      	negs	r0, r3
   26aa0:	4158      	adcs	r0, r3
}
   26aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   26aa6:	f7ff bc1f 	b.w	262e8 <update_cache>
   26aaa:	bf00      	nop
   26aac:	20021aa8 	.word	0x20021aa8
   26ab0:	20021a88 	.word	0x20021a88

00026ab4 <add_to_waitq_locked>:
{
   26ab4:	b538      	push	{r3, r4, r5, lr}
   26ab6:	4604      	mov	r4, r0
   26ab8:	460d      	mov	r5, r1
	unready_thread(thread);
   26aba:	f7ff ffdf 	bl	26a7c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26abe:	7b63      	ldrb	r3, [r4, #13]
   26ac0:	f043 0302 	orr.w	r3, r3, #2
   26ac4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26ac6:	b34d      	cbz	r5, 26b1c <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26ac8:	4b15      	ldr	r3, [pc, #84]	; (26b20 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   26aca:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26acc:	429c      	cmp	r4, r3
   26ace:	d109      	bne.n	26ae4 <add_to_waitq_locked+0x30>
   26ad0:	4914      	ldr	r1, [pc, #80]	; (26b24 <add_to_waitq_locked+0x70>)
   26ad2:	4815      	ldr	r0, [pc, #84]	; (26b28 <add_to_waitq_locked+0x74>)
   26ad4:	23ba      	movs	r3, #186	; 0xba
   26ad6:	4a15      	ldr	r2, [pc, #84]	; (26b2c <add_to_waitq_locked+0x78>)
   26ad8:	f003 fddb 	bl	2a692 <assert_print>
   26adc:	21ba      	movs	r1, #186	; 0xba
   26ade:	4813      	ldr	r0, [pc, #76]	; (26b2c <add_to_waitq_locked+0x78>)
   26ae0:	f003 fdd0 	bl	2a684 <assert_post_action>
	return list->head == list;
   26ae4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26ae6:	429d      	cmp	r5, r3
   26ae8:	d109      	bne.n	26afe <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   26aea:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   26aec:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   26af0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26af2:	606c      	str	r4, [r5, #4]
}
   26af4:	e012      	b.n	26b1c <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   26af6:	686a      	ldr	r2, [r5, #4]
   26af8:	4293      	cmp	r3, r2
   26afa:	d0f6      	beq.n	26aea <add_to_waitq_locked+0x36>
   26afc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26afe:	2b00      	cmp	r3, #0
   26b00:	d0f3      	beq.n	26aea <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   26b02:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26b06:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   26b0a:	428a      	cmp	r2, r1
   26b0c:	d0f3      	beq.n	26af6 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26b0e:	4291      	cmp	r1, r2
   26b10:	ddf1      	ble.n	26af6 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   26b12:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26b14:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26b18:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26b1a:	605c      	str	r4, [r3, #4]
}
   26b1c:	bd38      	pop	{r3, r4, r5, pc}
   26b1e:	bf00      	nop
   26b20:	2000a160 	.word	0x2000a160
   26b24:	00038677 	.word	0x00038677
   26b28:	00032629 	.word	0x00032629
   26b2c:	0003862e 	.word	0x0003862e

00026b30 <pend_locked>:
{
   26b30:	b570      	push	{r4, r5, r6, lr}
   26b32:	4615      	mov	r5, r2
   26b34:	461c      	mov	r4, r3
   26b36:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   26b38:	f7ff ffbc 	bl	26ab4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26b3c:	f1b4 3fff 	cmp.w	r4, #4294967295
   26b40:	bf08      	it	eq
   26b42:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   26b46:	d008      	beq.n	26b5a <pend_locked+0x2a>
   26b48:	462a      	mov	r2, r5
   26b4a:	4623      	mov	r3, r4
   26b4c:	f106 0018 	add.w	r0, r6, #24
   26b50:	4902      	ldr	r1, [pc, #8]	; (26b5c <pend_locked+0x2c>)
}
   26b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26b56:	f000 bdf1 	b.w	2773c <z_add_timeout>
   26b5a:	bd70      	pop	{r4, r5, r6, pc}
   26b5c:	00026f15 	.word	0x00026f15

00026b60 <z_pend_curr>:
{
   26b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26b64:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   26b68:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 26c20 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26b6c:	4c2d      	ldr	r4, [pc, #180]	; (26c24 <z_pend_curr+0xc4>)
{
   26b6e:	4617      	mov	r7, r2
	pending_current = _current;
   26b70:	4b2d      	ldr	r3, [pc, #180]	; (26c28 <z_pend_curr+0xc8>)
   26b72:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26b76:	42a0      	cmp	r0, r4
{
   26b78:	4605      	mov	r5, r0
   26b7a:	460e      	mov	r6, r1
	pending_current = _current;
   26b7c:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26b7e:	d10b      	bne.n	26b98 <z_pend_curr+0x38>
   26b80:	492a      	ldr	r1, [pc, #168]	; (26c2c <z_pend_curr+0xcc>)
   26b82:	482b      	ldr	r0, [pc, #172]	; (26c30 <z_pend_curr+0xd0>)
   26b84:	f240 334e 	movw	r3, #846	; 0x34e
   26b88:	4a2a      	ldr	r2, [pc, #168]	; (26c34 <z_pend_curr+0xd4>)
   26b8a:	f003 fd82 	bl	2a692 <assert_print>
   26b8e:	f240 314e 	movw	r1, #846	; 0x34e
   26b92:	4828      	ldr	r0, [pc, #160]	; (26c34 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b94:	f003 fd76 	bl	2a684 <assert_post_action>
	__asm__ volatile(
   26b98:	f04f 0220 	mov.w	r2, #32
   26b9c:	f3ef 8311 	mrs	r3, BASEPRI
   26ba0:	f382 8812 	msr	BASEPRI_MAX, r2
   26ba4:	f3bf 8f6f 	isb	sy
   26ba8:	4620      	mov	r0, r4
   26baa:	f7fe fa41 	bl	25030 <z_spin_lock_valid>
   26bae:	b960      	cbnz	r0, 26bca <z_pend_curr+0x6a>
   26bb0:	2394      	movs	r3, #148	; 0x94
   26bb2:	4a21      	ldr	r2, [pc, #132]	; (26c38 <z_pend_curr+0xd8>)
   26bb4:	4921      	ldr	r1, [pc, #132]	; (26c3c <z_pend_curr+0xdc>)
   26bb6:	481e      	ldr	r0, [pc, #120]	; (26c30 <z_pend_curr+0xd0>)
   26bb8:	f003 fd6b 	bl	2a692 <assert_print>
   26bbc:	4621      	mov	r1, r4
   26bbe:	4820      	ldr	r0, [pc, #128]	; (26c40 <z_pend_curr+0xe0>)
   26bc0:	f003 fd67 	bl	2a692 <assert_print>
   26bc4:	2194      	movs	r1, #148	; 0x94
   26bc6:	481c      	ldr	r0, [pc, #112]	; (26c38 <z_pend_curr+0xd8>)
   26bc8:	e7e4      	b.n	26b94 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   26bca:	4620      	mov	r0, r4
   26bcc:	f7fe fa4c 	bl	25068 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   26bd0:	f8da 0008 	ldr.w	r0, [sl, #8]
   26bd4:	4642      	mov	r2, r8
   26bd6:	464b      	mov	r3, r9
   26bd8:	4639      	mov	r1, r7
   26bda:	f7ff ffa9 	bl	26b30 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26bde:	4628      	mov	r0, r5
   26be0:	f7fe fa34 	bl	2504c <z_spin_unlock_valid>
   26be4:	b958      	cbnz	r0, 26bfe <z_pend_curr+0x9e>
   26be6:	4917      	ldr	r1, [pc, #92]	; (26c44 <z_pend_curr+0xe4>)
   26be8:	23e1      	movs	r3, #225	; 0xe1
   26bea:	4a13      	ldr	r2, [pc, #76]	; (26c38 <z_pend_curr+0xd8>)
   26bec:	4810      	ldr	r0, [pc, #64]	; (26c30 <z_pend_curr+0xd0>)
   26bee:	f003 fd50 	bl	2a692 <assert_print>
   26bf2:	4629      	mov	r1, r5
   26bf4:	4814      	ldr	r0, [pc, #80]	; (26c48 <z_pend_curr+0xe8>)
   26bf6:	f003 fd4c 	bl	2a692 <assert_print>
   26bfa:	21e1      	movs	r1, #225	; 0xe1
   26bfc:	e7e3      	b.n	26bc6 <z_pend_curr+0x66>
   26bfe:	4620      	mov	r0, r4
   26c00:	f7fe fa24 	bl	2504c <z_spin_unlock_valid>
   26c04:	b938      	cbnz	r0, 26c16 <z_pend_curr+0xb6>
   26c06:	490f      	ldr	r1, [pc, #60]	; (26c44 <z_pend_curr+0xe4>)
   26c08:	23e1      	movs	r3, #225	; 0xe1
   26c0a:	4a0b      	ldr	r2, [pc, #44]	; (26c38 <z_pend_curr+0xd8>)
   26c0c:	4808      	ldr	r0, [pc, #32]	; (26c30 <z_pend_curr+0xd0>)
   26c0e:	f003 fd40 	bl	2a692 <assert_print>
   26c12:	4621      	mov	r1, r4
   26c14:	e7ee      	b.n	26bf4 <z_pend_curr+0x94>
   26c16:	4630      	mov	r0, r6
}
   26c18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c1c:	f7e9 bf6c 	b.w	10af8 <arch_swap>
   26c20:	20021a88 	.word	0x20021a88
   26c24:	20021ad0 	.word	0x20021ad0
   26c28:	20021ac4 	.word	0x20021ac4
   26c2c:	00038725 	.word	0x00038725
   26c30:	00032629 	.word	0x00032629
   26c34:	0003862e 	.word	0x0003862e
   26c38:	0003338d 	.word	0x0003338d
   26c3c:	000333e6 	.word	0x000333e6
   26c40:	000333fb 	.word	0x000333fb
   26c44:	000333ba 	.word	0x000333ba
   26c48:	000333d1 	.word	0x000333d1

00026c4c <z_set_prio>:
{
   26c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26c50:	4604      	mov	r4, r0
   26c52:	460e      	mov	r6, r1
   26c54:	f04f 0320 	mov.w	r3, #32
   26c58:	f3ef 8911 	mrs	r9, BASEPRI
   26c5c:	f383 8812 	msr	BASEPRI_MAX, r3
   26c60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26c64:	4837      	ldr	r0, [pc, #220]	; (26d44 <z_set_prio+0xf8>)
   26c66:	f7fe f9e3 	bl	25030 <z_spin_lock_valid>
   26c6a:	4607      	mov	r7, r0
   26c6c:	b960      	cbnz	r0, 26c88 <z_set_prio+0x3c>
   26c6e:	2394      	movs	r3, #148	; 0x94
   26c70:	4a35      	ldr	r2, [pc, #212]	; (26d48 <z_set_prio+0xfc>)
   26c72:	4936      	ldr	r1, [pc, #216]	; (26d4c <z_set_prio+0x100>)
   26c74:	4836      	ldr	r0, [pc, #216]	; (26d50 <z_set_prio+0x104>)
   26c76:	f003 fd0c 	bl	2a692 <assert_print>
   26c7a:	4932      	ldr	r1, [pc, #200]	; (26d44 <z_set_prio+0xf8>)
   26c7c:	4835      	ldr	r0, [pc, #212]	; (26d54 <z_set_prio+0x108>)
   26c7e:	f003 fd08 	bl	2a692 <assert_print>
   26c82:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c84:	4830      	ldr	r0, [pc, #192]	; (26d48 <z_set_prio+0xfc>)
   26c86:	e021      	b.n	26ccc <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   26c88:	482e      	ldr	r0, [pc, #184]	; (26d44 <z_set_prio+0xf8>)
   26c8a:	f7fe f9ed 	bl	25068 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   26c8e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   26c90:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26c92:	06da      	lsls	r2, r3, #27
   26c94:	d11c      	bne.n	26cd0 <z_set_prio+0x84>
	return node->next != NULL;
   26c96:	69a5      	ldr	r5, [r4, #24]
   26c98:	b9d5      	cbnz	r5, 26cd0 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   26c9a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 26d58 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26ca2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26ca4:	4621      	mov	r1, r4
   26ca6:	4640      	mov	r0, r8
   26ca8:	f7ff fe00 	bl	268ac <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26cac:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   26cae:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   26cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26cb4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26cb6:	4b29      	ldr	r3, [pc, #164]	; (26d5c <z_set_prio+0x110>)
   26cb8:	429c      	cmp	r4, r3
   26cba:	d11b      	bne.n	26cf4 <z_set_prio+0xa8>
   26cbc:	4928      	ldr	r1, [pc, #160]	; (26d60 <z_set_prio+0x114>)
   26cbe:	4824      	ldr	r0, [pc, #144]	; (26d50 <z_set_prio+0x104>)
   26cc0:	23ba      	movs	r3, #186	; 0xba
   26cc2:	4a28      	ldr	r2, [pc, #160]	; (26d64 <z_set_prio+0x118>)
   26cc4:	f003 fce5 	bl	2a692 <assert_print>
   26cc8:	21ba      	movs	r1, #186	; 0xba
   26cca:	4826      	ldr	r0, [pc, #152]	; (26d64 <z_set_prio+0x118>)
   26ccc:	f003 fcda 	bl	2a684 <assert_post_action>
   26cd0:	2700      	movs	r7, #0
			thread->base.prio = prio;
   26cd2:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26cd4:	481b      	ldr	r0, [pc, #108]	; (26d44 <z_set_prio+0xf8>)
   26cd6:	f7fe f9b9 	bl	2504c <z_spin_unlock_valid>
   26cda:	bb58      	cbnz	r0, 26d34 <z_set_prio+0xe8>
   26cdc:	23c2      	movs	r3, #194	; 0xc2
   26cde:	4a1a      	ldr	r2, [pc, #104]	; (26d48 <z_set_prio+0xfc>)
   26ce0:	4921      	ldr	r1, [pc, #132]	; (26d68 <z_set_prio+0x11c>)
   26ce2:	481b      	ldr	r0, [pc, #108]	; (26d50 <z_set_prio+0x104>)
   26ce4:	f003 fcd5 	bl	2a692 <assert_print>
   26ce8:	4916      	ldr	r1, [pc, #88]	; (26d44 <z_set_prio+0xf8>)
   26cea:	4820      	ldr	r0, [pc, #128]	; (26d6c <z_set_prio+0x120>)
   26cec:	f003 fcd1 	bl	2a692 <assert_print>
   26cf0:	21c2      	movs	r1, #194	; 0xc2
   26cf2:	e7c7      	b.n	26c84 <z_set_prio+0x38>
	return list->head == list;
   26cf4:	4643      	mov	r3, r8
   26cf6:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26cfa:	4542      	cmp	r2, r8
   26cfc:	bf18      	it	ne
   26cfe:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   26d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26d02:	b925      	cbnz	r5, 26d0e <z_set_prio+0xc2>
	node->prev = tail;
   26d04:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   26d08:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26d0a:	625c      	str	r4, [r3, #36]	; 0x24
}
   26d0c:	e00a      	b.n	26d24 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   26d0e:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   26d12:	428e      	cmp	r6, r1
   26d14:	d00a      	beq.n	26d2c <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26d16:	42b1      	cmp	r1, r6
   26d18:	dd08      	ble.n	26d2c <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   26d1a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   26d1c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   26d20:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26d22:	606c      	str	r4, [r5, #4]
			update_cache(1);
   26d24:	2001      	movs	r0, #1
   26d26:	f7ff fadf 	bl	262e8 <update_cache>
   26d2a:	e7d3      	b.n	26cd4 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   26d2c:	42aa      	cmp	r2, r5
   26d2e:	d0e9      	beq.n	26d04 <z_set_prio+0xb8>
   26d30:	682d      	ldr	r5, [r5, #0]
   26d32:	e7e6      	b.n	26d02 <z_set_prio+0xb6>
	__asm__ volatile(
   26d34:	f389 8811 	msr	BASEPRI, r9
   26d38:	f3bf 8f6f 	isb	sy
}
   26d3c:	4638      	mov	r0, r7
   26d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26d42:	bf00      	nop
   26d44:	20021ad0 	.word	0x20021ad0
   26d48:	0003338d 	.word	0x0003338d
   26d4c:	000333e6 	.word	0x000333e6
   26d50:	00032629 	.word	0x00032629
   26d54:	000333fb 	.word	0x000333fb
   26d58:	20021aa8 	.word	0x20021aa8
   26d5c:	2000a160 	.word	0x2000a160
   26d60:	00038677 	.word	0x00038677
   26d64:	0003862e 	.word	0x0003862e
   26d68:	000333ba 	.word	0x000333ba
   26d6c:	000333d1 	.word	0x000333d1

00026d70 <z_impl_k_thread_suspend>:
{
   26d70:	b570      	push	{r4, r5, r6, lr}
   26d72:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26d74:	3018      	adds	r0, #24
   26d76:	f000 fda7 	bl	278c8 <z_abort_timeout>
	__asm__ volatile(
   26d7a:	f04f 0320 	mov.w	r3, #32
   26d7e:	f3ef 8611 	mrs	r6, BASEPRI
   26d82:	f383 8812 	msr	BASEPRI_MAX, r3
   26d86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d8a:	4824      	ldr	r0, [pc, #144]	; (26e1c <z_impl_k_thread_suspend+0xac>)
   26d8c:	f7fe f950 	bl	25030 <z_spin_lock_valid>
   26d90:	b968      	cbnz	r0, 26dae <z_impl_k_thread_suspend+0x3e>
   26d92:	2394      	movs	r3, #148	; 0x94
   26d94:	4a22      	ldr	r2, [pc, #136]	; (26e20 <z_impl_k_thread_suspend+0xb0>)
   26d96:	4923      	ldr	r1, [pc, #140]	; (26e24 <z_impl_k_thread_suspend+0xb4>)
   26d98:	4823      	ldr	r0, [pc, #140]	; (26e28 <z_impl_k_thread_suspend+0xb8>)
   26d9a:	f003 fc7a 	bl	2a692 <assert_print>
   26d9e:	491f      	ldr	r1, [pc, #124]	; (26e1c <z_impl_k_thread_suspend+0xac>)
   26da0:	4822      	ldr	r0, [pc, #136]	; (26e2c <z_impl_k_thread_suspend+0xbc>)
   26da2:	f003 fc76 	bl	2a692 <assert_print>
   26da6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26da8:	481d      	ldr	r0, [pc, #116]	; (26e20 <z_impl_k_thread_suspend+0xb0>)
   26daa:	f003 fc6b 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   26dae:	481b      	ldr	r0, [pc, #108]	; (26e1c <z_impl_k_thread_suspend+0xac>)
   26db0:	f7fe f95a 	bl	25068 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   26db4:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   26db8:	7b63      	ldrb	r3, [r4, #13]
   26dba:	2a00      	cmp	r2, #0
   26dbc:	da06      	bge.n	26dcc <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26dc2:	4621      	mov	r1, r4
   26dc4:	481a      	ldr	r0, [pc, #104]	; (26e30 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26dc6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26dc8:	f7ff fd70 	bl	268ac <z_priq_dumb_remove>
		update_cache(thread == _current);
   26dcc:	4d19      	ldr	r5, [pc, #100]	; (26e34 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26dce:	7b63      	ldrb	r3, [r4, #13]
   26dd0:	68a8      	ldr	r0, [r5, #8]
   26dd2:	f043 0310 	orr.w	r3, r3, #16
   26dd6:	7363      	strb	r3, [r4, #13]
   26dd8:	1b03      	subs	r3, r0, r4
   26dda:	4258      	negs	r0, r3
   26ddc:	4158      	adcs	r0, r3
   26dde:	f7ff fa83 	bl	262e8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26de2:	480e      	ldr	r0, [pc, #56]	; (26e1c <z_impl_k_thread_suspend+0xac>)
   26de4:	f7fe f932 	bl	2504c <z_spin_unlock_valid>
   26de8:	b958      	cbnz	r0, 26e02 <z_impl_k_thread_suspend+0x92>
   26dea:	23c2      	movs	r3, #194	; 0xc2
   26dec:	4a0c      	ldr	r2, [pc, #48]	; (26e20 <z_impl_k_thread_suspend+0xb0>)
   26dee:	4912      	ldr	r1, [pc, #72]	; (26e38 <z_impl_k_thread_suspend+0xc8>)
   26df0:	480d      	ldr	r0, [pc, #52]	; (26e28 <z_impl_k_thread_suspend+0xb8>)
   26df2:	f003 fc4e 	bl	2a692 <assert_print>
   26df6:	4909      	ldr	r1, [pc, #36]	; (26e1c <z_impl_k_thread_suspend+0xac>)
   26df8:	4810      	ldr	r0, [pc, #64]	; (26e3c <z_impl_k_thread_suspend+0xcc>)
   26dfa:	f003 fc4a 	bl	2a692 <assert_print>
   26dfe:	21c2      	movs	r1, #194	; 0xc2
   26e00:	e7d2      	b.n	26da8 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   26e02:	f386 8811 	msr	BASEPRI, r6
   26e06:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   26e0a:	68ab      	ldr	r3, [r5, #8]
   26e0c:	42a3      	cmp	r3, r4
   26e0e:	d103      	bne.n	26e18 <z_impl_k_thread_suspend+0xa8>
}
   26e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   26e14:	f009 ba60 	b.w	302d8 <z_reschedule_unlocked>
}
   26e18:	bd70      	pop	{r4, r5, r6, pc}
   26e1a:	bf00      	nop
   26e1c:	20021ad0 	.word	0x20021ad0
   26e20:	0003338d 	.word	0x0003338d
   26e24:	000333e6 	.word	0x000333e6
   26e28:	00032629 	.word	0x00032629
   26e2c:	000333fb 	.word	0x000333fb
   26e30:	20021aa8 	.word	0x20021aa8
   26e34:	20021a88 	.word	0x20021a88
   26e38:	000333ba 	.word	0x000333ba
   26e3c:	000333d1 	.word	0x000333d1

00026e40 <unpend_thread_no_timeout>:
{
   26e40:	b510      	push	{r4, lr}
   26e42:	4604      	mov	r4, r0
   26e44:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   26e46:	b958      	cbnz	r0, 26e60 <unpend_thread_no_timeout+0x20>
   26e48:	490a      	ldr	r1, [pc, #40]	; (26e74 <unpend_thread_no_timeout+0x34>)
   26e4a:	480b      	ldr	r0, [pc, #44]	; (26e78 <unpend_thread_no_timeout+0x38>)
   26e4c:	f240 23d6 	movw	r3, #726	; 0x2d6
   26e50:	4a0a      	ldr	r2, [pc, #40]	; (26e7c <unpend_thread_no_timeout+0x3c>)
   26e52:	f003 fc1e 	bl	2a692 <assert_print>
   26e56:	f240 21d6 	movw	r1, #726	; 0x2d6
   26e5a:	4808      	ldr	r0, [pc, #32]	; (26e7c <unpend_thread_no_timeout+0x3c>)
   26e5c:	f003 fc12 	bl	2a684 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26e60:	4621      	mov	r1, r4
   26e62:	f7ff fd23 	bl	268ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26e66:	7b63      	ldrb	r3, [r4, #13]
   26e68:	f023 0302 	bic.w	r3, r3, #2
   26e6c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26e6e:	2300      	movs	r3, #0
   26e70:	60a3      	str	r3, [r4, #8]
}
   26e72:	bd10      	pop	{r4, pc}
   26e74:	0003875c 	.word	0x0003875c
   26e78:	00032629 	.word	0x00032629
   26e7c:	0003862e 	.word	0x0003862e

00026e80 <z_unpend_thread>:
{
   26e80:	b538      	push	{r3, r4, r5, lr}
   26e82:	4604      	mov	r4, r0
	__asm__ volatile(
   26e84:	f04f 0320 	mov.w	r3, #32
   26e88:	f3ef 8511 	mrs	r5, BASEPRI
   26e8c:	f383 8812 	msr	BASEPRI_MAX, r3
   26e90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26e94:	4818      	ldr	r0, [pc, #96]	; (26ef8 <z_unpend_thread+0x78>)
   26e96:	f7fe f8cb 	bl	25030 <z_spin_lock_valid>
   26e9a:	b968      	cbnz	r0, 26eb8 <z_unpend_thread+0x38>
   26e9c:	2394      	movs	r3, #148	; 0x94
   26e9e:	4a17      	ldr	r2, [pc, #92]	; (26efc <z_unpend_thread+0x7c>)
   26ea0:	4917      	ldr	r1, [pc, #92]	; (26f00 <z_unpend_thread+0x80>)
   26ea2:	4818      	ldr	r0, [pc, #96]	; (26f04 <z_unpend_thread+0x84>)
   26ea4:	f003 fbf5 	bl	2a692 <assert_print>
   26ea8:	4913      	ldr	r1, [pc, #76]	; (26ef8 <z_unpend_thread+0x78>)
   26eaa:	4817      	ldr	r0, [pc, #92]	; (26f08 <z_unpend_thread+0x88>)
   26eac:	f003 fbf1 	bl	2a692 <assert_print>
   26eb0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26eb2:	4812      	ldr	r0, [pc, #72]	; (26efc <z_unpend_thread+0x7c>)
   26eb4:	f003 fbe6 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   26eb8:	480f      	ldr	r0, [pc, #60]	; (26ef8 <z_unpend_thread+0x78>)
   26eba:	f7fe f8d5 	bl	25068 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   26ebe:	4620      	mov	r0, r4
   26ec0:	f7ff ffbe 	bl	26e40 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ec4:	480c      	ldr	r0, [pc, #48]	; (26ef8 <z_unpend_thread+0x78>)
   26ec6:	f7fe f8c1 	bl	2504c <z_spin_unlock_valid>
   26eca:	b958      	cbnz	r0, 26ee4 <z_unpend_thread+0x64>
   26ecc:	23c2      	movs	r3, #194	; 0xc2
   26ece:	4a0b      	ldr	r2, [pc, #44]	; (26efc <z_unpend_thread+0x7c>)
   26ed0:	490e      	ldr	r1, [pc, #56]	; (26f0c <z_unpend_thread+0x8c>)
   26ed2:	480c      	ldr	r0, [pc, #48]	; (26f04 <z_unpend_thread+0x84>)
   26ed4:	f003 fbdd 	bl	2a692 <assert_print>
   26ed8:	4907      	ldr	r1, [pc, #28]	; (26ef8 <z_unpend_thread+0x78>)
   26eda:	480d      	ldr	r0, [pc, #52]	; (26f10 <z_unpend_thread+0x90>)
   26edc:	f003 fbd9 	bl	2a692 <assert_print>
   26ee0:	21c2      	movs	r1, #194	; 0xc2
   26ee2:	e7e6      	b.n	26eb2 <z_unpend_thread+0x32>
	__asm__ volatile(
   26ee4:	f385 8811 	msr	BASEPRI, r5
   26ee8:	f3bf 8f6f 	isb	sy
   26eec:	f104 0018 	add.w	r0, r4, #24
}
   26ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26ef4:	f000 bce8 	b.w	278c8 <z_abort_timeout>
   26ef8:	20021ad0 	.word	0x20021ad0
   26efc:	0003338d 	.word	0x0003338d
   26f00:	000333e6 	.word	0x000333e6
   26f04:	00032629 	.word	0x00032629
   26f08:	000333fb 	.word	0x000333fb
   26f0c:	000333ba 	.word	0x000333ba
   26f10:	000333d1 	.word	0x000333d1

00026f14 <z_thread_timeout>:
{
   26f14:	b570      	push	{r4, r5, r6, lr}
   26f16:	4604      	mov	r4, r0
	__asm__ volatile(
   26f18:	f04f 0320 	mov.w	r3, #32
   26f1c:	f3ef 8611 	mrs	r6, BASEPRI
   26f20:	f383 8812 	msr	BASEPRI_MAX, r3
   26f24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f28:	481f      	ldr	r0, [pc, #124]	; (26fa8 <z_thread_timeout+0x94>)
   26f2a:	f7fe f881 	bl	25030 <z_spin_lock_valid>
   26f2e:	b968      	cbnz	r0, 26f4c <z_thread_timeout+0x38>
   26f30:	2394      	movs	r3, #148	; 0x94
   26f32:	4a1e      	ldr	r2, [pc, #120]	; (26fac <z_thread_timeout+0x98>)
   26f34:	491e      	ldr	r1, [pc, #120]	; (26fb0 <z_thread_timeout+0x9c>)
   26f36:	481f      	ldr	r0, [pc, #124]	; (26fb4 <z_thread_timeout+0xa0>)
   26f38:	f003 fbab 	bl	2a692 <assert_print>
   26f3c:	491a      	ldr	r1, [pc, #104]	; (26fa8 <z_thread_timeout+0x94>)
   26f3e:	481e      	ldr	r0, [pc, #120]	; (26fb8 <z_thread_timeout+0xa4>)
   26f40:	f003 fba7 	bl	2a692 <assert_print>
   26f44:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f46:	4819      	ldr	r0, [pc, #100]	; (26fac <z_thread_timeout+0x98>)
   26f48:	f003 fb9c 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   26f4c:	4816      	ldr	r0, [pc, #88]	; (26fa8 <z_thread_timeout+0x94>)
   26f4e:	f7fe f88b 	bl	25068 <z_spin_lock_set_owner>
		if (!killed) {
   26f52:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26f56:	f013 0f28 	tst.w	r3, #40	; 0x28
   26f5a:	d110      	bne.n	26f7e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   26f5c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   26f60:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   26f64:	b113      	cbz	r3, 26f6c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   26f66:	4628      	mov	r0, r5
   26f68:	f7ff ff6a 	bl	26e40 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26f6c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   26f70:	4628      	mov	r0, r5
   26f72:	f023 0314 	bic.w	r3, r3, #20
   26f76:	f804 3c0b 	strb.w	r3, [r4, #-11]
   26f7a:	f7ff f9e9 	bl	26350 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f7e:	480a      	ldr	r0, [pc, #40]	; (26fa8 <z_thread_timeout+0x94>)
   26f80:	f7fe f864 	bl	2504c <z_spin_unlock_valid>
   26f84:	b958      	cbnz	r0, 26f9e <z_thread_timeout+0x8a>
   26f86:	23c2      	movs	r3, #194	; 0xc2
   26f88:	4a08      	ldr	r2, [pc, #32]	; (26fac <z_thread_timeout+0x98>)
   26f8a:	490c      	ldr	r1, [pc, #48]	; (26fbc <z_thread_timeout+0xa8>)
   26f8c:	4809      	ldr	r0, [pc, #36]	; (26fb4 <z_thread_timeout+0xa0>)
   26f8e:	f003 fb80 	bl	2a692 <assert_print>
   26f92:	4905      	ldr	r1, [pc, #20]	; (26fa8 <z_thread_timeout+0x94>)
   26f94:	480a      	ldr	r0, [pc, #40]	; (26fc0 <z_thread_timeout+0xac>)
   26f96:	f003 fb7c 	bl	2a692 <assert_print>
   26f9a:	21c2      	movs	r1, #194	; 0xc2
   26f9c:	e7d3      	b.n	26f46 <z_thread_timeout+0x32>
	__asm__ volatile(
   26f9e:	f386 8811 	msr	BASEPRI, r6
   26fa2:	f3bf 8f6f 	isb	sy
}
   26fa6:	bd70      	pop	{r4, r5, r6, pc}
   26fa8:	20021ad0 	.word	0x20021ad0
   26fac:	0003338d 	.word	0x0003338d
   26fb0:	000333e6 	.word	0x000333e6
   26fb4:	00032629 	.word	0x00032629
   26fb8:	000333fb 	.word	0x000333fb
   26fbc:	000333ba 	.word	0x000333ba
   26fc0:	000333d1 	.word	0x000333d1

00026fc4 <z_unpend1_no_timeout>:
{
   26fc4:	b570      	push	{r4, r5, r6, lr}
   26fc6:	4605      	mov	r5, r0
	__asm__ volatile(
   26fc8:	f04f 0320 	mov.w	r3, #32
   26fcc:	f3ef 8611 	mrs	r6, BASEPRI
   26fd0:	f383 8812 	msr	BASEPRI_MAX, r3
   26fd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26fd8:	4819      	ldr	r0, [pc, #100]	; (27040 <z_unpend1_no_timeout+0x7c>)
   26fda:	f7fe f829 	bl	25030 <z_spin_lock_valid>
   26fde:	b968      	cbnz	r0, 26ffc <z_unpend1_no_timeout+0x38>
   26fe0:	2394      	movs	r3, #148	; 0x94
   26fe2:	4a18      	ldr	r2, [pc, #96]	; (27044 <z_unpend1_no_timeout+0x80>)
   26fe4:	4918      	ldr	r1, [pc, #96]	; (27048 <z_unpend1_no_timeout+0x84>)
   26fe6:	4819      	ldr	r0, [pc, #100]	; (2704c <z_unpend1_no_timeout+0x88>)
   26fe8:	f003 fb53 	bl	2a692 <assert_print>
   26fec:	4914      	ldr	r1, [pc, #80]	; (27040 <z_unpend1_no_timeout+0x7c>)
   26fee:	4818      	ldr	r0, [pc, #96]	; (27050 <z_unpend1_no_timeout+0x8c>)
   26ff0:	f003 fb4f 	bl	2a692 <assert_print>
   26ff4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ff6:	4813      	ldr	r0, [pc, #76]	; (27044 <z_unpend1_no_timeout+0x80>)
   26ff8:	f003 fb44 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   26ffc:	4810      	ldr	r0, [pc, #64]	; (27040 <z_unpend1_no_timeout+0x7c>)
   26ffe:	f7fe f833 	bl	25068 <z_spin_lock_set_owner>
	return list->head == list;
   27002:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27004:	42a5      	cmp	r5, r4
   27006:	d013      	beq.n	27030 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   27008:	b114      	cbz	r4, 27010 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2700a:	4620      	mov	r0, r4
   2700c:	f7ff ff18 	bl	26e40 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27010:	480b      	ldr	r0, [pc, #44]	; (27040 <z_unpend1_no_timeout+0x7c>)
   27012:	f7fe f81b 	bl	2504c <z_spin_unlock_valid>
   27016:	b968      	cbnz	r0, 27034 <z_unpend1_no_timeout+0x70>
   27018:	23c2      	movs	r3, #194	; 0xc2
   2701a:	4a0a      	ldr	r2, [pc, #40]	; (27044 <z_unpend1_no_timeout+0x80>)
   2701c:	490d      	ldr	r1, [pc, #52]	; (27054 <z_unpend1_no_timeout+0x90>)
   2701e:	480b      	ldr	r0, [pc, #44]	; (2704c <z_unpend1_no_timeout+0x88>)
   27020:	f003 fb37 	bl	2a692 <assert_print>
   27024:	4906      	ldr	r1, [pc, #24]	; (27040 <z_unpend1_no_timeout+0x7c>)
   27026:	480c      	ldr	r0, [pc, #48]	; (27058 <z_unpend1_no_timeout+0x94>)
   27028:	f003 fb33 	bl	2a692 <assert_print>
   2702c:	21c2      	movs	r1, #194	; 0xc2
   2702e:	e7e2      	b.n	26ff6 <z_unpend1_no_timeout+0x32>
   27030:	2400      	movs	r4, #0
   27032:	e7ed      	b.n	27010 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   27034:	f386 8811 	msr	BASEPRI, r6
   27038:	f3bf 8f6f 	isb	sy
}
   2703c:	4620      	mov	r0, r4
   2703e:	bd70      	pop	{r4, r5, r6, pc}
   27040:	20021ad0 	.word	0x20021ad0
   27044:	0003338d 	.word	0x0003338d
   27048:	000333e6 	.word	0x000333e6
   2704c:	00032629 	.word	0x00032629
   27050:	000333fb 	.word	0x000333fb
   27054:	000333ba 	.word	0x000333ba
   27058:	000333d1 	.word	0x000333d1

0002705c <z_unpend_first_thread>:
{
   2705c:	b570      	push	{r4, r5, r6, lr}
   2705e:	4605      	mov	r5, r0
	__asm__ volatile(
   27060:	f04f 0320 	mov.w	r3, #32
   27064:	f3ef 8611 	mrs	r6, BASEPRI
   27068:	f383 8812 	msr	BASEPRI_MAX, r3
   2706c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27070:	481b      	ldr	r0, [pc, #108]	; (270e0 <z_unpend_first_thread+0x84>)
   27072:	f7fd ffdd 	bl	25030 <z_spin_lock_valid>
   27076:	b968      	cbnz	r0, 27094 <z_unpend_first_thread+0x38>
   27078:	2394      	movs	r3, #148	; 0x94
   2707a:	4a1a      	ldr	r2, [pc, #104]	; (270e4 <z_unpend_first_thread+0x88>)
   2707c:	491a      	ldr	r1, [pc, #104]	; (270e8 <z_unpend_first_thread+0x8c>)
   2707e:	481b      	ldr	r0, [pc, #108]	; (270ec <z_unpend_first_thread+0x90>)
   27080:	f003 fb07 	bl	2a692 <assert_print>
   27084:	4916      	ldr	r1, [pc, #88]	; (270e0 <z_unpend_first_thread+0x84>)
   27086:	481a      	ldr	r0, [pc, #104]	; (270f0 <z_unpend_first_thread+0x94>)
   27088:	f003 fb03 	bl	2a692 <assert_print>
   2708c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2708e:	4815      	ldr	r0, [pc, #84]	; (270e4 <z_unpend_first_thread+0x88>)
   27090:	f003 faf8 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   27094:	4812      	ldr	r0, [pc, #72]	; (270e0 <z_unpend_first_thread+0x84>)
   27096:	f7fd ffe7 	bl	25068 <z_spin_lock_set_owner>
	return list->head == list;
   2709a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2709c:	42a5      	cmp	r5, r4
   2709e:	d017      	beq.n	270d0 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   270a0:	b134      	cbz	r4, 270b0 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   270a2:	4620      	mov	r0, r4
   270a4:	f7ff fecc 	bl	26e40 <unpend_thread_no_timeout>
   270a8:	f104 0018 	add.w	r0, r4, #24
   270ac:	f000 fc0c 	bl	278c8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270b0:	480b      	ldr	r0, [pc, #44]	; (270e0 <z_unpend_first_thread+0x84>)
   270b2:	f7fd ffcb 	bl	2504c <z_spin_unlock_valid>
   270b6:	b968      	cbnz	r0, 270d4 <z_unpend_first_thread+0x78>
   270b8:	23c2      	movs	r3, #194	; 0xc2
   270ba:	4a0a      	ldr	r2, [pc, #40]	; (270e4 <z_unpend_first_thread+0x88>)
   270bc:	490d      	ldr	r1, [pc, #52]	; (270f4 <z_unpend_first_thread+0x98>)
   270be:	480b      	ldr	r0, [pc, #44]	; (270ec <z_unpend_first_thread+0x90>)
   270c0:	f003 fae7 	bl	2a692 <assert_print>
   270c4:	4906      	ldr	r1, [pc, #24]	; (270e0 <z_unpend_first_thread+0x84>)
   270c6:	480c      	ldr	r0, [pc, #48]	; (270f8 <z_unpend_first_thread+0x9c>)
   270c8:	f003 fae3 	bl	2a692 <assert_print>
   270cc:	21c2      	movs	r1, #194	; 0xc2
   270ce:	e7de      	b.n	2708e <z_unpend_first_thread+0x32>
   270d0:	2400      	movs	r4, #0
   270d2:	e7ed      	b.n	270b0 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   270d4:	f386 8811 	msr	BASEPRI, r6
   270d8:	f3bf 8f6f 	isb	sy
}
   270dc:	4620      	mov	r0, r4
   270de:	bd70      	pop	{r4, r5, r6, pc}
   270e0:	20021ad0 	.word	0x20021ad0
   270e4:	0003338d 	.word	0x0003338d
   270e8:	000333e6 	.word	0x000333e6
   270ec:	00032629 	.word	0x00032629
   270f0:	000333fb 	.word	0x000333fb
   270f4:	000333ba 	.word	0x000333ba
   270f8:	000333d1 	.word	0x000333d1

000270fc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   270fc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   270fe:	4b04      	ldr	r3, [pc, #16]	; (27110 <z_sched_init+0x14>)
   27100:	4608      	mov	r0, r1
   27102:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   27106:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2710a:	f7ff b96b 	b.w	263e4 <k_sched_time_slice_set>
   2710e:	bf00      	nop
   27110:	20021a88 	.word	0x20021a88

00027114 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   27114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27116:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2711a:	b16b      	cbz	r3, 27138 <z_impl_k_yield+0x24>
   2711c:	493c      	ldr	r1, [pc, #240]	; (27210 <z_impl_k_yield+0xfc>)
   2711e:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   27122:	4a3c      	ldr	r2, [pc, #240]	; (27214 <z_impl_k_yield+0x100>)
   27124:	483c      	ldr	r0, [pc, #240]	; (27218 <z_impl_k_yield+0x104>)
   27126:	f003 fab4 	bl	2a692 <assert_print>
   2712a:	483c      	ldr	r0, [pc, #240]	; (2721c <z_impl_k_yield+0x108>)
   2712c:	f003 fab1 	bl	2a692 <assert_print>
   27130:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27134:	4837      	ldr	r0, [pc, #220]	; (27214 <z_impl_k_yield+0x100>)
   27136:	e017      	b.n	27168 <z_impl_k_yield+0x54>
	__asm__ volatile(
   27138:	f04f 0320 	mov.w	r3, #32
   2713c:	f3ef 8611 	mrs	r6, BASEPRI
   27140:	f383 8812 	msr	BASEPRI_MAX, r3
   27144:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27148:	4835      	ldr	r0, [pc, #212]	; (27220 <z_impl_k_yield+0x10c>)
   2714a:	f7fd ff71 	bl	25030 <z_spin_lock_valid>
   2714e:	b968      	cbnz	r0, 2716c <z_impl_k_yield+0x58>
   27150:	2394      	movs	r3, #148	; 0x94
   27152:	4a34      	ldr	r2, [pc, #208]	; (27224 <z_impl_k_yield+0x110>)
   27154:	4934      	ldr	r1, [pc, #208]	; (27228 <z_impl_k_yield+0x114>)
   27156:	4830      	ldr	r0, [pc, #192]	; (27218 <z_impl_k_yield+0x104>)
   27158:	f003 fa9b 	bl	2a692 <assert_print>
   2715c:	4930      	ldr	r1, [pc, #192]	; (27220 <z_impl_k_yield+0x10c>)
   2715e:	4833      	ldr	r0, [pc, #204]	; (2722c <z_impl_k_yield+0x118>)
   27160:	f003 fa97 	bl	2a692 <assert_print>
   27164:	2194      	movs	r1, #148	; 0x94
   27166:	482f      	ldr	r0, [pc, #188]	; (27224 <z_impl_k_yield+0x110>)
   27168:	f003 fa8c 	bl	2a684 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2716c:	4c30      	ldr	r4, [pc, #192]	; (27230 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   2716e:	482c      	ldr	r0, [pc, #176]	; (27220 <z_impl_k_yield+0x10c>)
   27170:	f7fd ff7a 	bl	25068 <z_spin_lock_set_owner>
   27174:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   27176:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2717a:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2717c:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2717e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27182:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27184:	f7ff fb92 	bl	268ac <z_priq_dumb_remove>
	}
	queue_thread(_current);
   27188:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2718a:	7b5a      	ldrb	r2, [r3, #13]
   2718c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   27190:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27192:	4a28      	ldr	r2, [pc, #160]	; (27234 <z_impl_k_yield+0x120>)
   27194:	4293      	cmp	r3, r2
   27196:	d107      	bne.n	271a8 <z_impl_k_yield+0x94>
   27198:	4927      	ldr	r1, [pc, #156]	; (27238 <z_impl_k_yield+0x124>)
   2719a:	23ba      	movs	r3, #186	; 0xba
   2719c:	4a1d      	ldr	r2, [pc, #116]	; (27214 <z_impl_k_yield+0x100>)
   2719e:	481e      	ldr	r0, [pc, #120]	; (27218 <z_impl_k_yield+0x104>)
   271a0:	f003 fa77 	bl	2a692 <assert_print>
   271a4:	21ba      	movs	r1, #186	; 0xba
   271a6:	e7c5      	b.n	27134 <z_impl_k_yield+0x20>
	return list->head == list;
   271a8:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   271aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   271ac:	42aa      	cmp	r2, r5
   271ae:	bf08      	it	eq
   271b0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   271b2:	b922      	cbnz	r2, 271be <z_impl_k_yield+0xaa>
	node->prev = tail;
   271b4:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   271b8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   271ba:	6263      	str	r3, [r4, #36]	; 0x24
}
   271bc:	e00c      	b.n	271d8 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   271be:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   271c2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   271c6:	42b8      	cmp	r0, r7
   271c8:	d019      	beq.n	271fe <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   271ca:	4287      	cmp	r7, r0
   271cc:	dd17      	ble.n	271fe <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   271ce:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   271d0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   271d4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   271d6:	6053      	str	r3, [r2, #4]
	update_cache(1);
   271d8:	2001      	movs	r0, #1
   271da:	f7ff f885 	bl	262e8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   271de:	4810      	ldr	r0, [pc, #64]	; (27220 <z_impl_k_yield+0x10c>)
   271e0:	f7fd ff34 	bl	2504c <z_spin_unlock_valid>
   271e4:	b978      	cbnz	r0, 27206 <z_impl_k_yield+0xf2>
   271e6:	23e1      	movs	r3, #225	; 0xe1
   271e8:	4a0e      	ldr	r2, [pc, #56]	; (27224 <z_impl_k_yield+0x110>)
   271ea:	4914      	ldr	r1, [pc, #80]	; (2723c <z_impl_k_yield+0x128>)
   271ec:	480a      	ldr	r0, [pc, #40]	; (27218 <z_impl_k_yield+0x104>)
   271ee:	f003 fa50 	bl	2a692 <assert_print>
   271f2:	490b      	ldr	r1, [pc, #44]	; (27220 <z_impl_k_yield+0x10c>)
   271f4:	4812      	ldr	r0, [pc, #72]	; (27240 <z_impl_k_yield+0x12c>)
   271f6:	f003 fa4c 	bl	2a692 <assert_print>
   271fa:	21e1      	movs	r1, #225	; 0xe1
   271fc:	e7b3      	b.n	27166 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   271fe:	428a      	cmp	r2, r1
   27200:	d0d8      	beq.n	271b4 <z_impl_k_yield+0xa0>
   27202:	6812      	ldr	r2, [r2, #0]
   27204:	e7d5      	b.n	271b2 <z_impl_k_yield+0x9e>
   27206:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   27208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2720c:	f7e9 bc74 	b.w	10af8 <arch_swap>
   27210:	000383c1 	.word	0x000383c1
   27214:	0003862e 	.word	0x0003862e
   27218:	00032629 	.word	0x00032629
   2721c:	00036889 	.word	0x00036889
   27220:	20021ad0 	.word	0x20021ad0
   27224:	0003338d 	.word	0x0003338d
   27228:	000333e6 	.word	0x000333e6
   2722c:	000333fb 	.word	0x000333fb
   27230:	20021a88 	.word	0x20021a88
   27234:	2000a160 	.word	0x2000a160
   27238:	00038677 	.word	0x00038677
   2723c:	000333ba 	.word	0x000333ba
   27240:	000333d1 	.word	0x000333d1

00027244 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   27244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27248:	4605      	mov	r5, r0
   2724a:	460e      	mov	r6, r1
   2724c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27250:	b16b      	cbz	r3, 2726e <z_tick_sleep+0x2a>
   27252:	493f      	ldr	r1, [pc, #252]	; (27350 <z_tick_sleep+0x10c>)
   27254:	f240 538c 	movw	r3, #1420	; 0x58c
   27258:	4a3e      	ldr	r2, [pc, #248]	; (27354 <z_tick_sleep+0x110>)
   2725a:	483f      	ldr	r0, [pc, #252]	; (27358 <z_tick_sleep+0x114>)
   2725c:	f003 fa19 	bl	2a692 <assert_print>
   27260:	483e      	ldr	r0, [pc, #248]	; (2735c <z_tick_sleep+0x118>)
   27262:	f003 fa16 	bl	2a692 <assert_print>
   27266:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2726a:	483a      	ldr	r0, [pc, #232]	; (27354 <z_tick_sleep+0x110>)
   2726c:	e025      	b.n	272ba <z_tick_sleep+0x76>
	if (ticks == 0) {
   2726e:	ea50 0301 	orrs.w	r3, r0, r1
   27272:	d103      	bne.n	2727c <z_tick_sleep+0x38>
	z_impl_k_yield();
   27274:	f7ff ff4e 	bl	27114 <z_impl_k_yield>
		return 0;
   27278:	2000      	movs	r0, #0
   2727a:	e066      	b.n	2734a <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   2727c:	1c82      	adds	r2, r0, #2
   2727e:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   27282:	db1c      	blt.n	272be <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   27284:	f009 f842 	bl	3030c <sys_clock_tick_get_32>
   27288:	182c      	adds	r4, r5, r0
   2728a:	f04f 0320 	mov.w	r3, #32
   2728e:	f3ef 8811 	mrs	r8, BASEPRI
   27292:	f383 8812 	msr	BASEPRI_MAX, r3
   27296:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2729a:	4831      	ldr	r0, [pc, #196]	; (27360 <z_tick_sleep+0x11c>)
   2729c:	f7fd fec8 	bl	25030 <z_spin_lock_valid>
   272a0:	b988      	cbnz	r0, 272c6 <z_tick_sleep+0x82>
   272a2:	2394      	movs	r3, #148	; 0x94
   272a4:	4a2f      	ldr	r2, [pc, #188]	; (27364 <z_tick_sleep+0x120>)
   272a6:	4930      	ldr	r1, [pc, #192]	; (27368 <z_tick_sleep+0x124>)
   272a8:	482b      	ldr	r0, [pc, #172]	; (27358 <z_tick_sleep+0x114>)
   272aa:	f003 f9f2 	bl	2a692 <assert_print>
   272ae:	492c      	ldr	r1, [pc, #176]	; (27360 <z_tick_sleep+0x11c>)
   272b0:	482e      	ldr	r0, [pc, #184]	; (2736c <z_tick_sleep+0x128>)
   272b2:	f003 f9ee 	bl	2a692 <assert_print>
   272b6:	2194      	movs	r1, #148	; 0x94
   272b8:	482a      	ldr	r0, [pc, #168]	; (27364 <z_tick_sleep+0x120>)
   272ba:	f003 f9e3 	bl	2a684 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   272be:	f06f 0401 	mvn.w	r4, #1
   272c2:	1a24      	subs	r4, r4, r0
   272c4:	e7e1      	b.n	2728a <z_tick_sleep+0x46>
	pending_current = _current;
   272c6:	4f2a      	ldr	r7, [pc, #168]	; (27370 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   272c8:	4825      	ldr	r0, [pc, #148]	; (27360 <z_tick_sleep+0x11c>)
   272ca:	f7fd fecd 	bl	25068 <z_spin_lock_set_owner>
   272ce:	68b8      	ldr	r0, [r7, #8]
   272d0:	4b28      	ldr	r3, [pc, #160]	; (27374 <z_tick_sleep+0x130>)
   272d2:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   272d4:	f7ff fbd2 	bl	26a7c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   272d8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   272da:	462a      	mov	r2, r5
   272dc:	4633      	mov	r3, r6
   272de:	3018      	adds	r0, #24
   272e0:	4925      	ldr	r1, [pc, #148]	; (27378 <z_tick_sleep+0x134>)
   272e2:	f000 fa2b 	bl	2773c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   272e6:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   272e8:	481d      	ldr	r0, [pc, #116]	; (27360 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   272ea:	7b53      	ldrb	r3, [r2, #13]
   272ec:	f043 0310 	orr.w	r3, r3, #16
   272f0:	7353      	strb	r3, [r2, #13]
   272f2:	f7fd feab 	bl	2504c <z_spin_unlock_valid>
   272f6:	b958      	cbnz	r0, 27310 <z_tick_sleep+0xcc>
   272f8:	23e1      	movs	r3, #225	; 0xe1
   272fa:	4a1a      	ldr	r2, [pc, #104]	; (27364 <z_tick_sleep+0x120>)
   272fc:	491f      	ldr	r1, [pc, #124]	; (2737c <z_tick_sleep+0x138>)
   272fe:	4816      	ldr	r0, [pc, #88]	; (27358 <z_tick_sleep+0x114>)
   27300:	f003 f9c7 	bl	2a692 <assert_print>
   27304:	4916      	ldr	r1, [pc, #88]	; (27360 <z_tick_sleep+0x11c>)
   27306:	481e      	ldr	r0, [pc, #120]	; (27380 <z_tick_sleep+0x13c>)
   27308:	f003 f9c3 	bl	2a692 <assert_print>
   2730c:	21e1      	movs	r1, #225	; 0xe1
   2730e:	e7d3      	b.n	272b8 <z_tick_sleep+0x74>
   27310:	4640      	mov	r0, r8
   27312:	f7e9 fbf1 	bl	10af8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   27316:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   27318:	7b5b      	ldrb	r3, [r3, #13]
   2731a:	06db      	lsls	r3, r3, #27
   2731c:	d50c      	bpl.n	27338 <z_tick_sleep+0xf4>
   2731e:	4919      	ldr	r1, [pc, #100]	; (27384 <z_tick_sleep+0x140>)
   27320:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   27324:	4a0b      	ldr	r2, [pc, #44]	; (27354 <z_tick_sleep+0x110>)
   27326:	480c      	ldr	r0, [pc, #48]	; (27358 <z_tick_sleep+0x114>)
   27328:	f003 f9b3 	bl	2a692 <assert_print>
   2732c:	480b      	ldr	r0, [pc, #44]	; (2735c <z_tick_sleep+0x118>)
   2732e:	f003 f9b0 	bl	2a692 <assert_print>
   27332:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   27336:	e798      	b.n	2726a <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27338:	f008 ffe8 	bl	3030c <sys_clock_tick_get_32>
   2733c:	1a20      	subs	r0, r4, r0
   2733e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   27342:	2801      	cmp	r0, #1
   27344:	f173 0300 	sbcs.w	r3, r3, #0
   27348:	db96      	blt.n	27278 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   2734a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2734e:	bf00      	nop
   27350:	000383c1 	.word	0x000383c1
   27354:	0003862e 	.word	0x0003862e
   27358:	00032629 	.word	0x00032629
   2735c:	00036889 	.word	0x00036889
   27360:	20021ad0 	.word	0x20021ad0
   27364:	0003338d 	.word	0x0003338d
   27368:	000333e6 	.word	0x000333e6
   2736c:	000333fb 	.word	0x000333fb
   27370:	20021a88 	.word	0x20021a88
   27374:	20021ac4 	.word	0x20021ac4
   27378:	00026f15 	.word	0x00026f15
   2737c:	000333ba 	.word	0x000333ba
   27380:	000333d1 	.word	0x000333d1
   27384:	00038773 	.word	0x00038773

00027388 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   27388:	b508      	push	{r3, lr}
   2738a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2738e:	b173      	cbz	r3, 273ae <z_impl_k_sleep+0x26>
   27390:	4912      	ldr	r1, [pc, #72]	; (273dc <z_impl_k_sleep+0x54>)
   27392:	f240 53b7 	movw	r3, #1463	; 0x5b7
   27396:	4a12      	ldr	r2, [pc, #72]	; (273e0 <z_impl_k_sleep+0x58>)
   27398:	4812      	ldr	r0, [pc, #72]	; (273e4 <z_impl_k_sleep+0x5c>)
   2739a:	f003 f97a 	bl	2a692 <assert_print>
   2739e:	4812      	ldr	r0, [pc, #72]	; (273e8 <z_impl_k_sleep+0x60>)
   273a0:	f003 f977 	bl	2a692 <assert_print>
   273a4:	f240 51b7 	movw	r1, #1463	; 0x5b7
   273a8:	480d      	ldr	r0, [pc, #52]	; (273e0 <z_impl_k_sleep+0x58>)
   273aa:	f003 f96b 	bl	2a684 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   273ae:	f1b1 3fff 	cmp.w	r1, #4294967295
   273b2:	bf08      	it	eq
   273b4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   273b8:	d106      	bne.n	273c8 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   273ba:	4b0c      	ldr	r3, [pc, #48]	; (273ec <z_impl_k_sleep+0x64>)
   273bc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   273be:	f7ff fcd7 	bl	26d70 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   273c2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   273c6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   273c8:	f7ff ff3c 	bl	27244 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   273cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   273d0:	fb80 0303 	smull	r0, r3, r0, r3
   273d4:	0bc0      	lsrs	r0, r0, #15
   273d6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   273da:	e7f4      	b.n	273c6 <z_impl_k_sleep+0x3e>
   273dc:	000383c1 	.word	0x000383c1
   273e0:	0003862e 	.word	0x0003862e
   273e4:	00032629 	.word	0x00032629
   273e8:	00036889 	.word	0x00036889
   273ec:	20021a88 	.word	0x20021a88

000273f0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   273f0:	4b01      	ldr	r3, [pc, #4]	; (273f8 <z_impl_z_current_get+0x8>)
   273f2:	6898      	ldr	r0, [r3, #8]
   273f4:	4770      	bx	lr
   273f6:	bf00      	nop
   273f8:	20021a88 	.word	0x20021a88

000273fc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   273fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27400:	4604      	mov	r4, r0
   27402:	f04f 0320 	mov.w	r3, #32
   27406:	f3ef 8611 	mrs	r6, BASEPRI
   2740a:	f383 8812 	msr	BASEPRI_MAX, r3
   2740e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27412:	4851      	ldr	r0, [pc, #324]	; (27558 <z_thread_abort+0x15c>)
   27414:	f7fd fe0c 	bl	25030 <z_spin_lock_valid>
   27418:	b968      	cbnz	r0, 27436 <z_thread_abort+0x3a>
   2741a:	2394      	movs	r3, #148	; 0x94
   2741c:	4a4f      	ldr	r2, [pc, #316]	; (2755c <z_thread_abort+0x160>)
   2741e:	4950      	ldr	r1, [pc, #320]	; (27560 <z_thread_abort+0x164>)
   27420:	4850      	ldr	r0, [pc, #320]	; (27564 <z_thread_abort+0x168>)
   27422:	f003 f936 	bl	2a692 <assert_print>
   27426:	494c      	ldr	r1, [pc, #304]	; (27558 <z_thread_abort+0x15c>)
   27428:	484f      	ldr	r0, [pc, #316]	; (27568 <z_thread_abort+0x16c>)
   2742a:	f003 f932 	bl	2a692 <assert_print>
   2742e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27430:	484a      	ldr	r0, [pc, #296]	; (2755c <z_thread_abort+0x160>)
   27432:	f003 f927 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   27436:	4848      	ldr	r0, [pc, #288]	; (27558 <z_thread_abort+0x15c>)
   27438:	f7fd fe16 	bl	25068 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2743c:	7b23      	ldrb	r3, [r4, #12]
   2743e:	07d9      	lsls	r1, r3, #31
   27440:	d522      	bpl.n	27488 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27442:	4845      	ldr	r0, [pc, #276]	; (27558 <z_thread_abort+0x15c>)
   27444:	f7fd fe02 	bl	2504c <z_spin_unlock_valid>
   27448:	b958      	cbnz	r0, 27462 <z_thread_abort+0x66>
   2744a:	23c2      	movs	r3, #194	; 0xc2
   2744c:	4a43      	ldr	r2, [pc, #268]	; (2755c <z_thread_abort+0x160>)
   2744e:	4947      	ldr	r1, [pc, #284]	; (2756c <z_thread_abort+0x170>)
   27450:	4844      	ldr	r0, [pc, #272]	; (27564 <z_thread_abort+0x168>)
   27452:	f003 f91e 	bl	2a692 <assert_print>
   27456:	4940      	ldr	r1, [pc, #256]	; (27558 <z_thread_abort+0x15c>)
   27458:	4845      	ldr	r0, [pc, #276]	; (27570 <z_thread_abort+0x174>)
   2745a:	f003 f91a 	bl	2a692 <assert_print>
   2745e:	21c2      	movs	r1, #194	; 0xc2
   27460:	e7e6      	b.n	27430 <z_thread_abort+0x34>
	__asm__ volatile(
   27462:	f386 8811 	msr	BASEPRI, r6
   27466:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   2746a:	f240 63c3 	movw	r3, #1731	; 0x6c3
   2746e:	4a41      	ldr	r2, [pc, #260]	; (27574 <z_thread_abort+0x178>)
   27470:	4941      	ldr	r1, [pc, #260]	; (27578 <z_thread_abort+0x17c>)
   27472:	483c      	ldr	r0, [pc, #240]	; (27564 <z_thread_abort+0x168>)
   27474:	f003 f90d 	bl	2a692 <assert_print>
   27478:	4621      	mov	r1, r4
   2747a:	4840      	ldr	r0, [pc, #256]	; (2757c <z_thread_abort+0x180>)
   2747c:	f003 f909 	bl	2a692 <assert_print>
   27480:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   27484:	483b      	ldr	r0, [pc, #236]	; (27574 <z_thread_abort+0x178>)
   27486:	e7d4      	b.n	27432 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   27488:	7b63      	ldrb	r3, [r4, #13]
   2748a:	071a      	lsls	r2, r3, #28
   2748c:	d50a      	bpl.n	274a4 <z_thread_abort+0xa8>
   2748e:	4832      	ldr	r0, [pc, #200]	; (27558 <z_thread_abort+0x15c>)
   27490:	f7fd fddc 	bl	2504c <z_spin_unlock_valid>
   27494:	2800      	cmp	r0, #0
   27496:	d0d8      	beq.n	2744a <z_thread_abort+0x4e>
   27498:	f386 8811 	msr	BASEPRI, r6
   2749c:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   274a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   274a4:	f023 0220 	bic.w	r2, r3, #32
   274a8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   274ac:	09d2      	lsrs	r2, r2, #7
   274ae:	d12c      	bne.n	2750a <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   274b0:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   274b2:	68a3      	ldr	r3, [r4, #8]
   274b4:	b113      	cbz	r3, 274bc <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   274b6:	4620      	mov	r0, r4
   274b8:	f7ff fcc2 	bl	26e40 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   274bc:	f104 0018 	add.w	r0, r4, #24
   274c0:	f000 fa02 	bl	278c8 <z_abort_timeout>
   274c4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   274c8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   274cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   274ce:	42bd      	cmp	r5, r7
   274d0:	d000      	beq.n	274d4 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   274d2:	bb25      	cbnz	r5, 2751e <z_thread_abort+0x122>
		update_cache(1);
   274d4:	2001      	movs	r0, #1
   274d6:	f7fe ff07 	bl	262e8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   274da:	4b29      	ldr	r3, [pc, #164]	; (27580 <z_thread_abort+0x184>)
   274dc:	689b      	ldr	r3, [r3, #8]
   274de:	42a3      	cmp	r3, r4
   274e0:	d1d5      	bne.n	2748e <z_thread_abort+0x92>
   274e2:	f3ef 8305 	mrs	r3, IPSR
   274e6:	2b00      	cmp	r3, #0
   274e8:	d1d1      	bne.n	2748e <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   274ea:	481b      	ldr	r0, [pc, #108]	; (27558 <z_thread_abort+0x15c>)
   274ec:	f7fd fdae 	bl	2504c <z_spin_unlock_valid>
   274f0:	bb10      	cbnz	r0, 27538 <z_thread_abort+0x13c>
   274f2:	23e1      	movs	r3, #225	; 0xe1
   274f4:	4a19      	ldr	r2, [pc, #100]	; (2755c <z_thread_abort+0x160>)
   274f6:	491d      	ldr	r1, [pc, #116]	; (2756c <z_thread_abort+0x170>)
   274f8:	481a      	ldr	r0, [pc, #104]	; (27564 <z_thread_abort+0x168>)
   274fa:	f003 f8ca 	bl	2a692 <assert_print>
   274fe:	4916      	ldr	r1, [pc, #88]	; (27558 <z_thread_abort+0x15c>)
   27500:	481b      	ldr	r0, [pc, #108]	; (27570 <z_thread_abort+0x174>)
   27502:	f003 f8c6 	bl	2a692 <assert_print>
   27506:	21e1      	movs	r1, #225	; 0xe1
   27508:	e792      	b.n	27430 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2750a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2750e:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   27512:	4621      	mov	r1, r4
   27514:	481b      	ldr	r0, [pc, #108]	; (27584 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27516:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27518:	f7ff f9c8 	bl	268ac <z_priq_dumb_remove>
}
   2751c:	e7c9      	b.n	274b2 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   2751e:	4628      	mov	r0, r5
   27520:	f7ff fc8e 	bl	26e40 <unpend_thread_no_timeout>
   27524:	f105 0018 	add.w	r0, r5, #24
   27528:	f000 f9ce 	bl	278c8 <z_abort_timeout>
		ready_thread(thread);
   2752c:	4628      	mov	r0, r5
   2752e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   27532:	f7fe ff0d 	bl	26350 <ready_thread>
   27536:	e7c9      	b.n	274cc <z_thread_abort+0xd0>
   27538:	4630      	mov	r0, r6
   2753a:	f7e9 fadd 	bl	10af8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   2753e:	490e      	ldr	r1, [pc, #56]	; (27578 <z_thread_abort+0x17c>)
   27540:	f240 63f2 	movw	r3, #1778	; 0x6f2
   27544:	4a0b      	ldr	r2, [pc, #44]	; (27574 <z_thread_abort+0x178>)
   27546:	4807      	ldr	r0, [pc, #28]	; (27564 <z_thread_abort+0x168>)
   27548:	f003 f8a3 	bl	2a692 <assert_print>
   2754c:	480e      	ldr	r0, [pc, #56]	; (27588 <z_thread_abort+0x18c>)
   2754e:	f003 f8a0 	bl	2a692 <assert_print>
   27552:	f240 61f2 	movw	r1, #1778	; 0x6f2
   27556:	e795      	b.n	27484 <z_thread_abort+0x88>
   27558:	20021ad0 	.word	0x20021ad0
   2755c:	0003338d 	.word	0x0003338d
   27560:	000333e6 	.word	0x000333e6
   27564:	00032629 	.word	0x00032629
   27568:	000333fb 	.word	0x000333fb
   2756c:	000333ba 	.word	0x000333ba
   27570:	000333d1 	.word	0x000333d1
   27574:	0003862e 	.word	0x0003862e
   27578:	00037ac9 	.word	0x00037ac9
   2757c:	000387b3 	.word	0x000387b3
   27580:	20021a88 	.word	0x20021a88
   27584:	20021aa8 	.word	0x20021aa8
   27588:	000387d2 	.word	0x000387d2

0002758c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2758c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27590:	4606      	mov	r6, r0
   27592:	4688      	mov	r8, r1
   27594:	4617      	mov	r7, r2
	__asm__ volatile(
   27596:	f04f 0320 	mov.w	r3, #32
   2759a:	f3ef 8911 	mrs	r9, BASEPRI
   2759e:	f383 8812 	msr	BASEPRI_MAX, r3
   275a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   275a6:	4821      	ldr	r0, [pc, #132]	; (2762c <z_sched_wake+0xa0>)
   275a8:	f7fd fd42 	bl	25030 <z_spin_lock_valid>
   275ac:	4605      	mov	r5, r0
   275ae:	b968      	cbnz	r0, 275cc <z_sched_wake+0x40>
   275b0:	2394      	movs	r3, #148	; 0x94
   275b2:	4a1f      	ldr	r2, [pc, #124]	; (27630 <z_sched_wake+0xa4>)
   275b4:	491f      	ldr	r1, [pc, #124]	; (27634 <z_sched_wake+0xa8>)
   275b6:	4820      	ldr	r0, [pc, #128]	; (27638 <z_sched_wake+0xac>)
   275b8:	f003 f86b 	bl	2a692 <assert_print>
   275bc:	491b      	ldr	r1, [pc, #108]	; (2762c <z_sched_wake+0xa0>)
   275be:	481f      	ldr	r0, [pc, #124]	; (2763c <z_sched_wake+0xb0>)
   275c0:	f003 f867 	bl	2a692 <assert_print>
   275c4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275c6:	481a      	ldr	r0, [pc, #104]	; (27630 <z_sched_wake+0xa4>)
   275c8:	f003 f85c 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   275cc:	4817      	ldr	r0, [pc, #92]	; (2762c <z_sched_wake+0xa0>)
   275ce:	f7fd fd4b 	bl	25068 <z_spin_lock_set_owner>
	return list->head == list;
   275d2:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   275d4:	42a6      	cmp	r6, r4
   275d6:	d01d      	beq.n	27614 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   275d8:	b1f4      	cbz	r4, 27618 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   275da:	4620      	mov	r0, r4
   275dc:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   275e0:	6167      	str	r7, [r4, #20]
   275e2:	f7ff fc2d 	bl	26e40 <unpend_thread_no_timeout>
   275e6:	f104 0018 	add.w	r0, r4, #24
   275ea:	f000 f96d 	bl	278c8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   275ee:	4620      	mov	r0, r4
   275f0:	f7fe feae 	bl	26350 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275f4:	480d      	ldr	r0, [pc, #52]	; (2762c <z_sched_wake+0xa0>)
   275f6:	f7fd fd29 	bl	2504c <z_spin_unlock_valid>
   275fa:	b978      	cbnz	r0, 2761c <z_sched_wake+0x90>
   275fc:	23c2      	movs	r3, #194	; 0xc2
   275fe:	4a0c      	ldr	r2, [pc, #48]	; (27630 <z_sched_wake+0xa4>)
   27600:	490f      	ldr	r1, [pc, #60]	; (27640 <z_sched_wake+0xb4>)
   27602:	480d      	ldr	r0, [pc, #52]	; (27638 <z_sched_wake+0xac>)
   27604:	f003 f845 	bl	2a692 <assert_print>
   27608:	4908      	ldr	r1, [pc, #32]	; (2762c <z_sched_wake+0xa0>)
   2760a:	480e      	ldr	r0, [pc, #56]	; (27644 <z_sched_wake+0xb8>)
   2760c:	f003 f841 	bl	2a692 <assert_print>
   27610:	21c2      	movs	r1, #194	; 0xc2
   27612:	e7d8      	b.n	275c6 <z_sched_wake+0x3a>
	bool ret = false;
   27614:	2500      	movs	r5, #0
   27616:	e7ed      	b.n	275f4 <z_sched_wake+0x68>
   27618:	4625      	mov	r5, r4
   2761a:	e7eb      	b.n	275f4 <z_sched_wake+0x68>
	__asm__ volatile(
   2761c:	f389 8811 	msr	BASEPRI, r9
   27620:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   27624:	4628      	mov	r0, r5
   27626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2762a:	bf00      	nop
   2762c:	20021ad0 	.word	0x20021ad0
   27630:	0003338d 	.word	0x0003338d
   27634:	000333e6 	.word	0x000333e6
   27638:	00032629 	.word	0x00032629
   2763c:	000333fb 	.word	0x000333fb
   27640:	000333ba 	.word	0x000333ba
   27644:	000333d1 	.word	0x000333d1

00027648 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   27648:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2764a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2764e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27650:	e9cd 6700 	strd	r6, r7, [sp]
   27654:	f7ff fa84 	bl	26b60 <z_pend_curr>

	if (data != NULL) {
   27658:	b11c      	cbz	r4, 27662 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2765a:	4b03      	ldr	r3, [pc, #12]	; (27668 <z_sched_wait+0x20>)
   2765c:	689b      	ldr	r3, [r3, #8]
   2765e:	695b      	ldr	r3, [r3, #20]
   27660:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   27662:	b002      	add	sp, #8
   27664:	bdd0      	pop	{r4, r6, r7, pc}
   27666:	bf00      	nop
   27668:	20021a88 	.word	0x20021a88

0002766c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2766c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2766e:	4806      	ldr	r0, [pc, #24]	; (27688 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   27670:	4a06      	ldr	r2, [pc, #24]	; (2768c <z_data_copy+0x20>)
   27672:	4907      	ldr	r1, [pc, #28]	; (27690 <z_data_copy+0x24>)
   27674:	1a12      	subs	r2, r2, r0
   27676:	f008 fd29 	bl	300cc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2767a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2767e:	4a05      	ldr	r2, [pc, #20]	; (27694 <z_data_copy+0x28>)
   27680:	4905      	ldr	r1, [pc, #20]	; (27698 <z_data_copy+0x2c>)
   27682:	4806      	ldr	r0, [pc, #24]	; (2769c <z_data_copy+0x30>)
   27684:	f008 bd22 	b.w	300cc <z_early_memcpy>
   27688:	20008000 	.word	0x20008000
   2768c:	20008e40 	.word	0x20008e40
   27690:	00038df4 	.word	0x00038df4
   27694:	00000000 	.word	0x00000000
   27698:	00038df4 	.word	0x00038df4
   2769c:	20008000 	.word	0x20008000

000276a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   276a0:	4b03      	ldr	r3, [pc, #12]	; (276b0 <elapsed+0x10>)
   276a2:	681b      	ldr	r3, [r3, #0]
   276a4:	b90b      	cbnz	r3, 276aa <elapsed+0xa>
   276a6:	f7f7 b893 	b.w	1e7d0 <sys_clock_elapsed>
}
   276aa:	2000      	movs	r0, #0
   276ac:	4770      	bx	lr
   276ae:	bf00      	nop
   276b0:	20021ad4 	.word	0x20021ad4

000276b4 <next_timeout>:

static int32_t next_timeout(void)
{
   276b4:	b510      	push	{r4, lr}
	return list->head == list;
   276b6:	4b11      	ldr	r3, [pc, #68]	; (276fc <next_timeout+0x48>)
   276b8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276ba:	429c      	cmp	r4, r3
   276bc:	d10a      	bne.n	276d4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   276be:	f7ff ffef 	bl	276a0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   276c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   276c6:	4b0e      	ldr	r3, [pc, #56]	; (27700 <next_timeout+0x4c>)
   276c8:	691b      	ldr	r3, [r3, #16]
   276ca:	b113      	cbz	r3, 276d2 <next_timeout+0x1e>
   276cc:	4298      	cmp	r0, r3
   276ce:	bfa8      	it	ge
   276d0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   276d2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   276d4:	f7ff ffe4 	bl	276a0 <elapsed>
	if ((to == NULL) ||
   276d8:	2c00      	cmp	r4, #0
   276da:	d0f2      	beq.n	276c2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   276dc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   276e0:	1a1b      	subs	r3, r3, r0
   276e2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   276e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   276ea:	f172 0100 	sbcs.w	r1, r2, #0
   276ee:	dae8      	bge.n	276c2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   276f0:	2a00      	cmp	r2, #0
   276f2:	bfac      	ite	ge
   276f4:	4618      	movge	r0, r3
   276f6:	2000      	movlt	r0, #0
   276f8:	e7e5      	b.n	276c6 <next_timeout+0x12>
   276fa:	bf00      	nop
   276fc:	20008744 	.word	0x20008744
   27700:	20021a88 	.word	0x20021a88

00027704 <remove_timeout>:
{
   27704:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27706:	b170      	cbz	r0, 27726 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   27708:	4b0b      	ldr	r3, [pc, #44]	; (27738 <remove_timeout+0x34>)
   2770a:	685b      	ldr	r3, [r3, #4]
   2770c:	4298      	cmp	r0, r3
   2770e:	d00a      	beq.n	27726 <remove_timeout+0x22>
   27710:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   27712:	b143      	cbz	r3, 27726 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   27714:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   27718:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2771c:	1912      	adds	r2, r2, r4
   2771e:	eb41 0105 	adc.w	r1, r1, r5
   27722:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   27726:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2772a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2772c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2772e:	2300      	movs	r3, #0
	node->prev = NULL;
   27730:	e9c0 3300 	strd	r3, r3, [r0]
}
   27734:	bd30      	pop	{r4, r5, pc}
   27736:	bf00      	nop
   27738:	20008744 	.word	0x20008744

0002773c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2773c:	f1b3 3fff 	cmp.w	r3, #4294967295
   27740:	bf08      	it	eq
   27742:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   27746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2774a:	4604      	mov	r4, r0
   2774c:	4692      	mov	sl, r2
   2774e:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27750:	f000 809e 	beq.w	27890 <z_add_timeout+0x154>
	return node->next != NULL;
   27754:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   27756:	b166      	cbz	r6, 27772 <z_add_timeout+0x36>
   27758:	494e      	ldr	r1, [pc, #312]	; (27894 <z_add_timeout+0x158>)
   2775a:	2363      	movs	r3, #99	; 0x63
   2775c:	4a4e      	ldr	r2, [pc, #312]	; (27898 <z_add_timeout+0x15c>)
   2775e:	484f      	ldr	r0, [pc, #316]	; (2789c <z_add_timeout+0x160>)
   27760:	f002 ff97 	bl	2a692 <assert_print>
   27764:	484e      	ldr	r0, [pc, #312]	; (278a0 <z_add_timeout+0x164>)
   27766:	f002 ff94 	bl	2a692 <assert_print>
   2776a:	2163      	movs	r1, #99	; 0x63
   2776c:	484a      	ldr	r0, [pc, #296]	; (27898 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2776e:	f002 ff89 	bl	2a684 <assert_post_action>
	to->fn = fn;
   27772:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   27774:	f04f 0320 	mov.w	r3, #32
   27778:	f3ef 8711 	mrs	r7, BASEPRI
   2777c:	f383 8812 	msr	BASEPRI_MAX, r3
   27780:	f3bf 8f6f 	isb	sy
   27784:	4847      	ldr	r0, [pc, #284]	; (278a4 <z_add_timeout+0x168>)
   27786:	f7fd fc53 	bl	25030 <z_spin_lock_valid>
   2778a:	b960      	cbnz	r0, 277a6 <z_add_timeout+0x6a>
   2778c:	2394      	movs	r3, #148	; 0x94
   2778e:	4a46      	ldr	r2, [pc, #280]	; (278a8 <z_add_timeout+0x16c>)
   27790:	4946      	ldr	r1, [pc, #280]	; (278ac <z_add_timeout+0x170>)
   27792:	4842      	ldr	r0, [pc, #264]	; (2789c <z_add_timeout+0x160>)
   27794:	f002 ff7d 	bl	2a692 <assert_print>
   27798:	4942      	ldr	r1, [pc, #264]	; (278a4 <z_add_timeout+0x168>)
   2779a:	4845      	ldr	r0, [pc, #276]	; (278b0 <z_add_timeout+0x174>)
   2779c:	f002 ff79 	bl	2a692 <assert_print>
   277a0:	2194      	movs	r1, #148	; 0x94
   277a2:	4841      	ldr	r0, [pc, #260]	; (278a8 <z_add_timeout+0x16c>)
   277a4:	e7e3      	b.n	2776e <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   277a6:	483f      	ldr	r0, [pc, #252]	; (278a4 <z_add_timeout+0x168>)
   277a8:	f7fd fc5e 	bl	25068 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   277ac:	f1ba 3fff 	cmp.w	sl, #4294967295
   277b0:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   277b4:	da23      	bge.n	277fe <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   277b6:	f06f 0301 	mvn.w	r3, #1
   277ba:	493e      	ldr	r1, [pc, #248]	; (278b4 <z_add_timeout+0x178>)
   277bc:	e9d1 2000 	ldrd	r2, r0, [r1]
   277c0:	1a9b      	subs	r3, r3, r2
   277c2:	f04f 32ff 	mov.w	r2, #4294967295
   277c6:	eb62 0000 	sbc.w	r0, r2, r0
   277ca:	ebb3 030a 	subs.w	r3, r3, sl
   277ce:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   277d2:	2b01      	cmp	r3, #1
   277d4:	f170 0200 	sbcs.w	r2, r0, #0
   277d8:	da01      	bge.n	277de <z_add_timeout+0xa2>
   277da:	2301      	movs	r3, #1
   277dc:	4630      	mov	r0, r6
   277de:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   277e2:	4b35      	ldr	r3, [pc, #212]	; (278b8 <z_add_timeout+0x17c>)
   277e4:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   277e6:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   277ea:	429a      	cmp	r2, r3
   277ec:	bf18      	it	ne
   277ee:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   277f0:	b986      	cbnz	r6, 27814 <z_add_timeout+0xd8>
	node->prev = tail;
   277f2:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   277f6:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   277fa:	605c      	str	r4, [r3, #4]
}
   277fc:	e01c      	b.n	27838 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   277fe:	f7ff ff4f 	bl	276a0 <elapsed>
   27802:	f11a 0801 	adds.w	r8, sl, #1
   27806:	f145 0500 	adc.w	r5, r5, #0
   2780a:	eb18 0300 	adds.w	r3, r8, r0
   2780e:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   27812:	e7e4      	b.n	277de <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   27814:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   27818:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   2781c:	428a      	cmp	r2, r1
   2781e:	eb70 0e05 	sbcs.w	lr, r0, r5
   27822:	da28      	bge.n	27876 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   27824:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   27826:	6872      	ldr	r2, [r6, #4]
   27828:	eb65 0500 	sbc.w	r5, r5, r0
   2782c:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   27830:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   27834:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27836:	6074      	str	r4, [r6, #4]
	return list->head == list;
   27838:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2783a:	429a      	cmp	r2, r3
   2783c:	d00b      	beq.n	27856 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2783e:	4294      	cmp	r4, r2
   27840:	d109      	bne.n	27856 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   27842:	f7ff ff37 	bl	276b4 <next_timeout>

			if (next_time == 0 ||
   27846:	b118      	cbz	r0, 27850 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   27848:	4b1c      	ldr	r3, [pc, #112]	; (278bc <z_add_timeout+0x180>)
			if (next_time == 0 ||
   2784a:	691b      	ldr	r3, [r3, #16]
   2784c:	4283      	cmp	r3, r0
   2784e:	d002      	beq.n	27856 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   27850:	2100      	movs	r1, #0
   27852:	f7f6 ff8d 	bl	1e770 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27856:	4813      	ldr	r0, [pc, #76]	; (278a4 <z_add_timeout+0x168>)
   27858:	f7fd fbf8 	bl	2504c <z_spin_unlock_valid>
   2785c:	b9a0      	cbnz	r0, 27888 <z_add_timeout+0x14c>
   2785e:	23c2      	movs	r3, #194	; 0xc2
   27860:	4a11      	ldr	r2, [pc, #68]	; (278a8 <z_add_timeout+0x16c>)
   27862:	4917      	ldr	r1, [pc, #92]	; (278c0 <z_add_timeout+0x184>)
   27864:	480d      	ldr	r0, [pc, #52]	; (2789c <z_add_timeout+0x160>)
   27866:	f002 ff14 	bl	2a692 <assert_print>
   2786a:	490e      	ldr	r1, [pc, #56]	; (278a4 <z_add_timeout+0x168>)
   2786c:	4815      	ldr	r0, [pc, #84]	; (278c4 <z_add_timeout+0x188>)
   2786e:	f002 ff10 	bl	2a692 <assert_print>
   27872:	21c2      	movs	r1, #194	; 0xc2
   27874:	e795      	b.n	277a2 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   27876:	1a52      	subs	r2, r2, r1
   27878:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2787c:	4566      	cmp	r6, ip
   2787e:	e9c4 2004 	strd	r2, r0, [r4, #16]
   27882:	d0b6      	beq.n	277f2 <z_add_timeout+0xb6>
   27884:	6836      	ldr	r6, [r6, #0]
   27886:	e7b3      	b.n	277f0 <z_add_timeout+0xb4>
	__asm__ volatile(
   27888:	f387 8811 	msr	BASEPRI, r7
   2788c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   27890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27894:	00038818 	.word	0x00038818
   27898:	000387f4 	.word	0x000387f4
   2789c:	00032629 	.word	0x00032629
   278a0:	00036889 	.word	0x00036889
   278a4:	20021ad8 	.word	0x20021ad8
   278a8:	0003338d 	.word	0x0003338d
   278ac:	000333e6 	.word	0x000333e6
   278b0:	000333fb 	.word	0x000333fb
   278b4:	2000a318 	.word	0x2000a318
   278b8:	20008744 	.word	0x20008744
   278bc:	20021a88 	.word	0x20021a88
   278c0:	000333ba 	.word	0x000333ba
   278c4:	000333d1 	.word	0x000333d1

000278c8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   278c8:	b538      	push	{r3, r4, r5, lr}
   278ca:	4604      	mov	r4, r0
	__asm__ volatile(
   278cc:	f04f 0320 	mov.w	r3, #32
   278d0:	f3ef 8511 	mrs	r5, BASEPRI
   278d4:	f383 8812 	msr	BASEPRI_MAX, r3
   278d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   278dc:	4819      	ldr	r0, [pc, #100]	; (27944 <z_abort_timeout+0x7c>)
   278de:	f7fd fba7 	bl	25030 <z_spin_lock_valid>
   278e2:	b968      	cbnz	r0, 27900 <z_abort_timeout+0x38>
   278e4:	2394      	movs	r3, #148	; 0x94
   278e6:	4a18      	ldr	r2, [pc, #96]	; (27948 <z_abort_timeout+0x80>)
   278e8:	4918      	ldr	r1, [pc, #96]	; (2794c <z_abort_timeout+0x84>)
   278ea:	4819      	ldr	r0, [pc, #100]	; (27950 <z_abort_timeout+0x88>)
   278ec:	f002 fed1 	bl	2a692 <assert_print>
   278f0:	4914      	ldr	r1, [pc, #80]	; (27944 <z_abort_timeout+0x7c>)
   278f2:	4818      	ldr	r0, [pc, #96]	; (27954 <z_abort_timeout+0x8c>)
   278f4:	f002 fecd 	bl	2a692 <assert_print>
   278f8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   278fa:	4813      	ldr	r0, [pc, #76]	; (27948 <z_abort_timeout+0x80>)
   278fc:	f002 fec2 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   27900:	4810      	ldr	r0, [pc, #64]	; (27944 <z_abort_timeout+0x7c>)
   27902:	f7fd fbb1 	bl	25068 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   27906:	6823      	ldr	r3, [r4, #0]
   27908:	b19b      	cbz	r3, 27932 <z_abort_timeout+0x6a>
			remove_timeout(to);
   2790a:	4620      	mov	r0, r4
   2790c:	f7ff fefa 	bl	27704 <remove_timeout>
			ret = 0;
   27910:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27912:	480c      	ldr	r0, [pc, #48]	; (27944 <z_abort_timeout+0x7c>)
   27914:	f7fd fb9a 	bl	2504c <z_spin_unlock_valid>
   27918:	b970      	cbnz	r0, 27938 <z_abort_timeout+0x70>
   2791a:	23c2      	movs	r3, #194	; 0xc2
   2791c:	4a0a      	ldr	r2, [pc, #40]	; (27948 <z_abort_timeout+0x80>)
   2791e:	490e      	ldr	r1, [pc, #56]	; (27958 <z_abort_timeout+0x90>)
   27920:	480b      	ldr	r0, [pc, #44]	; (27950 <z_abort_timeout+0x88>)
   27922:	f002 feb6 	bl	2a692 <assert_print>
   27926:	4907      	ldr	r1, [pc, #28]	; (27944 <z_abort_timeout+0x7c>)
   27928:	480c      	ldr	r0, [pc, #48]	; (2795c <z_abort_timeout+0x94>)
   2792a:	f002 feb2 	bl	2a692 <assert_print>
   2792e:	21c2      	movs	r1, #194	; 0xc2
   27930:	e7e3      	b.n	278fa <z_abort_timeout+0x32>
	int ret = -EINVAL;
   27932:	f06f 0415 	mvn.w	r4, #21
   27936:	e7ec      	b.n	27912 <z_abort_timeout+0x4a>
	__asm__ volatile(
   27938:	f385 8811 	msr	BASEPRI, r5
   2793c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   27940:	4620      	mov	r0, r4
   27942:	bd38      	pop	{r3, r4, r5, pc}
   27944:	20021ad8 	.word	0x20021ad8
   27948:	0003338d 	.word	0x0003338d
   2794c:	000333e6 	.word	0x000333e6
   27950:	00032629 	.word	0x00032629
   27954:	000333fb 	.word	0x000333fb
   27958:	000333ba 	.word	0x000333ba
   2795c:	000333d1 	.word	0x000333d1

00027960 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   27960:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27962:	f04f 0320 	mov.w	r3, #32
   27966:	f3ef 8511 	mrs	r5, BASEPRI
   2796a:	f383 8812 	msr	BASEPRI_MAX, r3
   2796e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27972:	4817      	ldr	r0, [pc, #92]	; (279d0 <z_get_next_timeout_expiry+0x70>)
   27974:	f7fd fb5c 	bl	25030 <z_spin_lock_valid>
   27978:	b968      	cbnz	r0, 27996 <z_get_next_timeout_expiry+0x36>
   2797a:	2394      	movs	r3, #148	; 0x94
   2797c:	4a15      	ldr	r2, [pc, #84]	; (279d4 <z_get_next_timeout_expiry+0x74>)
   2797e:	4916      	ldr	r1, [pc, #88]	; (279d8 <z_get_next_timeout_expiry+0x78>)
   27980:	4816      	ldr	r0, [pc, #88]	; (279dc <z_get_next_timeout_expiry+0x7c>)
   27982:	f002 fe86 	bl	2a692 <assert_print>
   27986:	4912      	ldr	r1, [pc, #72]	; (279d0 <z_get_next_timeout_expiry+0x70>)
   27988:	4815      	ldr	r0, [pc, #84]	; (279e0 <z_get_next_timeout_expiry+0x80>)
   2798a:	f002 fe82 	bl	2a692 <assert_print>
   2798e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27990:	4810      	ldr	r0, [pc, #64]	; (279d4 <z_get_next_timeout_expiry+0x74>)
   27992:	f002 fe77 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   27996:	480e      	ldr	r0, [pc, #56]	; (279d0 <z_get_next_timeout_expiry+0x70>)
   27998:	f7fd fb66 	bl	25068 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2799c:	f7ff fe8a 	bl	276b4 <next_timeout>
   279a0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   279a2:	480b      	ldr	r0, [pc, #44]	; (279d0 <z_get_next_timeout_expiry+0x70>)
   279a4:	f7fd fb52 	bl	2504c <z_spin_unlock_valid>
   279a8:	b958      	cbnz	r0, 279c2 <z_get_next_timeout_expiry+0x62>
   279aa:	23c2      	movs	r3, #194	; 0xc2
   279ac:	4a09      	ldr	r2, [pc, #36]	; (279d4 <z_get_next_timeout_expiry+0x74>)
   279ae:	490d      	ldr	r1, [pc, #52]	; (279e4 <z_get_next_timeout_expiry+0x84>)
   279b0:	480a      	ldr	r0, [pc, #40]	; (279dc <z_get_next_timeout_expiry+0x7c>)
   279b2:	f002 fe6e 	bl	2a692 <assert_print>
   279b6:	4906      	ldr	r1, [pc, #24]	; (279d0 <z_get_next_timeout_expiry+0x70>)
   279b8:	480b      	ldr	r0, [pc, #44]	; (279e8 <z_get_next_timeout_expiry+0x88>)
   279ba:	f002 fe6a 	bl	2a692 <assert_print>
   279be:	21c2      	movs	r1, #194	; 0xc2
   279c0:	e7e6      	b.n	27990 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   279c2:	f385 8811 	msr	BASEPRI, r5
   279c6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   279ca:	4620      	mov	r0, r4
   279cc:	bd38      	pop	{r3, r4, r5, pc}
   279ce:	bf00      	nop
   279d0:	20021ad8 	.word	0x20021ad8
   279d4:	0003338d 	.word	0x0003338d
   279d8:	000333e6 	.word	0x000333e6
   279dc:	00032629 	.word	0x00032629
   279e0:	000333fb 	.word	0x000333fb
   279e4:	000333ba 	.word	0x000333ba
   279e8:	000333d1 	.word	0x000333d1

000279ec <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   279ec:	b570      	push	{r4, r5, r6, lr}
   279ee:	4604      	mov	r4, r0
   279f0:	460d      	mov	r5, r1
	__asm__ volatile(
   279f2:	f04f 0320 	mov.w	r3, #32
   279f6:	f3ef 8611 	mrs	r6, BASEPRI
   279fa:	f383 8812 	msr	BASEPRI_MAX, r3
   279fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27a02:	481b      	ldr	r0, [pc, #108]	; (27a70 <z_set_timeout_expiry+0x84>)
   27a04:	f7fd fb14 	bl	25030 <z_spin_lock_valid>
   27a08:	b968      	cbnz	r0, 27a26 <z_set_timeout_expiry+0x3a>
   27a0a:	2394      	movs	r3, #148	; 0x94
   27a0c:	4a19      	ldr	r2, [pc, #100]	; (27a74 <z_set_timeout_expiry+0x88>)
   27a0e:	491a      	ldr	r1, [pc, #104]	; (27a78 <z_set_timeout_expiry+0x8c>)
   27a10:	481a      	ldr	r0, [pc, #104]	; (27a7c <z_set_timeout_expiry+0x90>)
   27a12:	f002 fe3e 	bl	2a692 <assert_print>
   27a16:	4916      	ldr	r1, [pc, #88]	; (27a70 <z_set_timeout_expiry+0x84>)
   27a18:	4819      	ldr	r0, [pc, #100]	; (27a80 <z_set_timeout_expiry+0x94>)
   27a1a:	f002 fe3a 	bl	2a692 <assert_print>
   27a1e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a20:	4814      	ldr	r0, [pc, #80]	; (27a74 <z_set_timeout_expiry+0x88>)
   27a22:	f002 fe2f 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   27a26:	4812      	ldr	r0, [pc, #72]	; (27a70 <z_set_timeout_expiry+0x84>)
   27a28:	f7fd fb1e 	bl	25068 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   27a2c:	f7ff fe42 	bl	276b4 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   27a30:	2801      	cmp	r0, #1
   27a32:	dd07      	ble.n	27a44 <z_set_timeout_expiry+0x58>
   27a34:	42a0      	cmp	r0, r4
   27a36:	db05      	blt.n	27a44 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   27a38:	42a0      	cmp	r0, r4
   27a3a:	4629      	mov	r1, r5
   27a3c:	bfa8      	it	ge
   27a3e:	4620      	movge	r0, r4
   27a40:	f7f6 fe96 	bl	1e770 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a44:	480a      	ldr	r0, [pc, #40]	; (27a70 <z_set_timeout_expiry+0x84>)
   27a46:	f7fd fb01 	bl	2504c <z_spin_unlock_valid>
   27a4a:	b958      	cbnz	r0, 27a64 <z_set_timeout_expiry+0x78>
   27a4c:	23c2      	movs	r3, #194	; 0xc2
   27a4e:	4a09      	ldr	r2, [pc, #36]	; (27a74 <z_set_timeout_expiry+0x88>)
   27a50:	490c      	ldr	r1, [pc, #48]	; (27a84 <z_set_timeout_expiry+0x98>)
   27a52:	480a      	ldr	r0, [pc, #40]	; (27a7c <z_set_timeout_expiry+0x90>)
   27a54:	f002 fe1d 	bl	2a692 <assert_print>
   27a58:	4905      	ldr	r1, [pc, #20]	; (27a70 <z_set_timeout_expiry+0x84>)
   27a5a:	480b      	ldr	r0, [pc, #44]	; (27a88 <z_set_timeout_expiry+0x9c>)
   27a5c:	f002 fe19 	bl	2a692 <assert_print>
   27a60:	21c2      	movs	r1, #194	; 0xc2
   27a62:	e7dd      	b.n	27a20 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   27a64:	f386 8811 	msr	BASEPRI, r6
   27a68:	f3bf 8f6f 	isb	sy
		}
	}
}
   27a6c:	bd70      	pop	{r4, r5, r6, pc}
   27a6e:	bf00      	nop
   27a70:	20021ad8 	.word	0x20021ad8
   27a74:	0003338d 	.word	0x0003338d
   27a78:	000333e6 	.word	0x000333e6
   27a7c:	00032629 	.word	0x00032629
   27a80:	000333fb 	.word	0x000333fb
   27a84:	000333ba 	.word	0x000333ba
   27a88:	000333d1 	.word	0x000333d1

00027a8c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   27a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27a90:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   27a92:	f7fe ff7d 	bl	26990 <z_time_slice>
	__asm__ volatile(
   27a96:	f04f 0320 	mov.w	r3, #32
   27a9a:	f3ef 8711 	mrs	r7, BASEPRI
   27a9e:	f383 8812 	msr	BASEPRI_MAX, r3
   27aa2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27aa6:	483f      	ldr	r0, [pc, #252]	; (27ba4 <sys_clock_announce+0x118>)
   27aa8:	f7fd fac2 	bl	25030 <z_spin_lock_valid>
   27aac:	b968      	cbnz	r0, 27aca <sys_clock_announce+0x3e>
   27aae:	2394      	movs	r3, #148	; 0x94
   27ab0:	4a3d      	ldr	r2, [pc, #244]	; (27ba8 <sys_clock_announce+0x11c>)
   27ab2:	493e      	ldr	r1, [pc, #248]	; (27bac <sys_clock_announce+0x120>)
   27ab4:	483e      	ldr	r0, [pc, #248]	; (27bb0 <sys_clock_announce+0x124>)
   27ab6:	f002 fdec 	bl	2a692 <assert_print>
   27aba:	493a      	ldr	r1, [pc, #232]	; (27ba4 <sys_clock_announce+0x118>)
   27abc:	483d      	ldr	r0, [pc, #244]	; (27bb4 <sys_clock_announce+0x128>)
   27abe:	f002 fde8 	bl	2a692 <assert_print>
   27ac2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ac4:	4838      	ldr	r0, [pc, #224]	; (27ba8 <sys_clock_announce+0x11c>)
   27ac6:	f002 fddd 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   27aca:	4836      	ldr	r0, [pc, #216]	; (27ba4 <sys_clock_announce+0x118>)
   27acc:	f7fd facc 	bl	25068 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   27ad0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 27bb8 <sys_clock_announce+0x12c>
	return list->head == list;
   27ad4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 27bbc <sys_clock_announce+0x130>
   27ad8:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   27adc:	4a38      	ldr	r2, [pc, #224]	; (27bc0 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27ade:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   27ae0:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   27ae4:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   27ae8:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27aec:	d00b      	beq.n	27b06 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   27aee:	b155      	cbz	r5, 27b06 <sys_clock_announce+0x7a>
   27af0:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   27af4:	42b4      	cmp	r4, r6
   27af6:	eb71 0e00 	sbcs.w	lr, r1, r0
   27afa:	da1c      	bge.n	27b36 <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   27afc:	1b36      	subs	r6, r6, r4
   27afe:	eb60 0001 	sbc.w	r0, r0, r1
   27b02:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   27b06:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   27b08:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   27b0c:	eb4c 0101 	adc.w	r1, ip, r1
   27b10:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   27b14:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   27b18:	f7ff fdcc 	bl	276b4 <next_timeout>
   27b1c:	4621      	mov	r1, r4
   27b1e:	f7f6 fe27 	bl	1e770 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b22:	4820      	ldr	r0, [pc, #128]	; (27ba4 <sys_clock_announce+0x118>)
   27b24:	f7fd fa92 	bl	2504c <z_spin_unlock_valid>
   27b28:	b1a8      	cbz	r0, 27b56 <sys_clock_announce+0xca>
	__asm__ volatile(
   27b2a:	f387 8811 	msr	BASEPRI, r7
   27b2e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   27b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   27b36:	18f3      	adds	r3, r6, r3
   27b38:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   27b3c:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   27b40:	2200      	movs	r2, #0
   27b42:	2300      	movs	r3, #0
		remove_timeout(t);
   27b44:	4628      	mov	r0, r5
		t->dticks = 0;
   27b46:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   27b4a:	f7ff fddb 	bl	27704 <remove_timeout>
   27b4e:	4815      	ldr	r0, [pc, #84]	; (27ba4 <sys_clock_announce+0x118>)
   27b50:	f7fd fa7c 	bl	2504c <z_spin_unlock_valid>
   27b54:	b958      	cbnz	r0, 27b6e <sys_clock_announce+0xe2>
   27b56:	23c2      	movs	r3, #194	; 0xc2
   27b58:	4a13      	ldr	r2, [pc, #76]	; (27ba8 <sys_clock_announce+0x11c>)
   27b5a:	491a      	ldr	r1, [pc, #104]	; (27bc4 <sys_clock_announce+0x138>)
   27b5c:	4814      	ldr	r0, [pc, #80]	; (27bb0 <sys_clock_announce+0x124>)
   27b5e:	f002 fd98 	bl	2a692 <assert_print>
   27b62:	4910      	ldr	r1, [pc, #64]	; (27ba4 <sys_clock_announce+0x118>)
   27b64:	4818      	ldr	r0, [pc, #96]	; (27bc8 <sys_clock_announce+0x13c>)
   27b66:	f002 fd94 	bl	2a692 <assert_print>
   27b6a:	21c2      	movs	r1, #194	; 0xc2
   27b6c:	e7aa      	b.n	27ac4 <sys_clock_announce+0x38>
   27b6e:	f387 8811 	msr	BASEPRI, r7
   27b72:	f3bf 8f6f 	isb	sy
		t->fn(t);
   27b76:	4628      	mov	r0, r5
   27b78:	68ab      	ldr	r3, [r5, #8]
   27b7a:	4798      	blx	r3
	__asm__ volatile(
   27b7c:	f04f 0320 	mov.w	r3, #32
   27b80:	f3ef 8711 	mrs	r7, BASEPRI
   27b84:	f383 8812 	msr	BASEPRI_MAX, r3
   27b88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27b8c:	4805      	ldr	r0, [pc, #20]	; (27ba4 <sys_clock_announce+0x118>)
   27b8e:	f7fd fa4f 	bl	25030 <z_spin_lock_valid>
   27b92:	2800      	cmp	r0, #0
   27b94:	d08b      	beq.n	27aae <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   27b96:	4803      	ldr	r0, [pc, #12]	; (27ba4 <sys_clock_announce+0x118>)
   27b98:	f7fd fa66 	bl	25068 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   27b9c:	f8d8 4000 	ldr.w	r4, [r8]
   27ba0:	1ba4      	subs	r4, r4, r6
   27ba2:	e799      	b.n	27ad8 <sys_clock_announce+0x4c>
   27ba4:	20021ad8 	.word	0x20021ad8
   27ba8:	0003338d 	.word	0x0003338d
   27bac:	000333e6 	.word	0x000333e6
   27bb0:	00032629 	.word	0x00032629
   27bb4:	000333fb 	.word	0x000333fb
   27bb8:	20021ad4 	.word	0x20021ad4
   27bbc:	20008744 	.word	0x20008744
   27bc0:	2000a318 	.word	0x2000a318
   27bc4:	000333ba 	.word	0x000333ba
   27bc8:	000333d1 	.word	0x000333d1

00027bcc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   27bcc:	b570      	push	{r4, r5, r6, lr}
   27bce:	f04f 0320 	mov.w	r3, #32
   27bd2:	f3ef 8611 	mrs	r6, BASEPRI
   27bd6:	f383 8812 	msr	BASEPRI_MAX, r3
   27bda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27bde:	481a      	ldr	r0, [pc, #104]	; (27c48 <sys_clock_tick_get+0x7c>)
   27be0:	f7fd fa26 	bl	25030 <z_spin_lock_valid>
   27be4:	b968      	cbnz	r0, 27c02 <sys_clock_tick_get+0x36>
   27be6:	2394      	movs	r3, #148	; 0x94
   27be8:	4a18      	ldr	r2, [pc, #96]	; (27c4c <sys_clock_tick_get+0x80>)
   27bea:	4919      	ldr	r1, [pc, #100]	; (27c50 <sys_clock_tick_get+0x84>)
   27bec:	4819      	ldr	r0, [pc, #100]	; (27c54 <sys_clock_tick_get+0x88>)
   27bee:	f002 fd50 	bl	2a692 <assert_print>
   27bf2:	4915      	ldr	r1, [pc, #84]	; (27c48 <sys_clock_tick_get+0x7c>)
   27bf4:	4818      	ldr	r0, [pc, #96]	; (27c58 <sys_clock_tick_get+0x8c>)
   27bf6:	f002 fd4c 	bl	2a692 <assert_print>
   27bfa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27bfc:	4813      	ldr	r0, [pc, #76]	; (27c4c <sys_clock_tick_get+0x80>)
   27bfe:	f002 fd41 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   27c02:	4811      	ldr	r0, [pc, #68]	; (27c48 <sys_clock_tick_get+0x7c>)
   27c04:	f7fd fa30 	bl	25068 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   27c08:	f7ff fd4a 	bl	276a0 <elapsed>
   27c0c:	4a13      	ldr	r2, [pc, #76]	; (27c5c <sys_clock_tick_get+0x90>)
   27c0e:	e9d2 4500 	ldrd	r4, r5, [r2]
   27c12:	1904      	adds	r4, r0, r4
   27c14:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c18:	480b      	ldr	r0, [pc, #44]	; (27c48 <sys_clock_tick_get+0x7c>)
   27c1a:	f7fd fa17 	bl	2504c <z_spin_unlock_valid>
   27c1e:	b958      	cbnz	r0, 27c38 <sys_clock_tick_get+0x6c>
   27c20:	23c2      	movs	r3, #194	; 0xc2
   27c22:	4a0a      	ldr	r2, [pc, #40]	; (27c4c <sys_clock_tick_get+0x80>)
   27c24:	490e      	ldr	r1, [pc, #56]	; (27c60 <sys_clock_tick_get+0x94>)
   27c26:	480b      	ldr	r0, [pc, #44]	; (27c54 <sys_clock_tick_get+0x88>)
   27c28:	f002 fd33 	bl	2a692 <assert_print>
   27c2c:	4906      	ldr	r1, [pc, #24]	; (27c48 <sys_clock_tick_get+0x7c>)
   27c2e:	480d      	ldr	r0, [pc, #52]	; (27c64 <sys_clock_tick_get+0x98>)
   27c30:	f002 fd2f 	bl	2a692 <assert_print>
   27c34:	21c2      	movs	r1, #194	; 0xc2
   27c36:	e7e1      	b.n	27bfc <sys_clock_tick_get+0x30>
	__asm__ volatile(
   27c38:	f386 8811 	msr	BASEPRI, r6
   27c3c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   27c40:	4620      	mov	r0, r4
   27c42:	4629      	mov	r1, r5
   27c44:	bd70      	pop	{r4, r5, r6, pc}
   27c46:	bf00      	nop
   27c48:	20021ad8 	.word	0x20021ad8
   27c4c:	0003338d 	.word	0x0003338d
   27c50:	000333e6 	.word	0x000333e6
   27c54:	00032629 	.word	0x00032629
   27c58:	000333fb 	.word	0x000333fb
   27c5c:	2000a318 	.word	0x2000a318
   27c60:	000333ba 	.word	0x000333ba
   27c64:	000333d1 	.word	0x000333d1

00027c68 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   27c68:	b570      	push	{r4, r5, r6, lr}
   27c6a:	4604      	mov	r4, r0
	__asm__ volatile(
   27c6c:	f04f 0320 	mov.w	r3, #32
   27c70:	f3ef 8511 	mrs	r5, BASEPRI
   27c74:	f383 8812 	msr	BASEPRI_MAX, r3
   27c78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27c7c:	4849      	ldr	r0, [pc, #292]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27c7e:	f7fd f9d7 	bl	25030 <z_spin_lock_valid>
   27c82:	b968      	cbnz	r0, 27ca0 <z_timer_expiration_handler+0x38>
   27c84:	2394      	movs	r3, #148	; 0x94
   27c86:	4a48      	ldr	r2, [pc, #288]	; (27da8 <z_timer_expiration_handler+0x140>)
   27c88:	4948      	ldr	r1, [pc, #288]	; (27dac <z_timer_expiration_handler+0x144>)
   27c8a:	4849      	ldr	r0, [pc, #292]	; (27db0 <z_timer_expiration_handler+0x148>)
   27c8c:	f002 fd01 	bl	2a692 <assert_print>
   27c90:	4944      	ldr	r1, [pc, #272]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27c92:	4848      	ldr	r0, [pc, #288]	; (27db4 <z_timer_expiration_handler+0x14c>)
   27c94:	f002 fcfd 	bl	2a692 <assert_print>
   27c98:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c9a:	4843      	ldr	r0, [pc, #268]	; (27da8 <z_timer_expiration_handler+0x140>)
   27c9c:	f002 fcf2 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   27ca0:	4840      	ldr	r0, [pc, #256]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27ca2:	f7fd f9e1 	bl	25068 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27ca6:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   27caa:	3301      	adds	r3, #1
   27cac:	f142 0200 	adc.w	r2, r2, #0
   27cb0:	2b02      	cmp	r3, #2
   27cb2:	f172 0200 	sbcs.w	r2, r2, #0
   27cb6:	d322      	bcc.n	27cfe <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   27cb8:	f008 fb2c 	bl	30314 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   27cbc:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   27cc0:	3001      	adds	r0, #1
   27cc2:	f141 0100 	adc.w	r1, r1, #0
   27cc6:	18c0      	adds	r0, r0, r3
   27cc8:	eb41 0102 	adc.w	r1, r1, r2
   27ccc:	2801      	cmp	r0, #1
   27cce:	f171 0100 	sbcs.w	r1, r1, #0
   27cd2:	db29      	blt.n	27d28 <z_timer_expiration_handler+0xc0>
   27cd4:	f008 fb1e 	bl	30314 <z_impl_k_uptime_ticks>
   27cd8:	3001      	adds	r0, #1
   27cda:	f141 0300 	adc.w	r3, r1, #0
   27cde:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   27ce2:	1880      	adds	r0, r0, r2
   27ce4:	f06f 0201 	mvn.w	r2, #1
   27ce8:	eb43 0301 	adc.w	r3, r3, r1
   27cec:	f04f 31ff 	mov.w	r1, #4294967295
   27cf0:	1a12      	subs	r2, r2, r0
   27cf2:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27cf6:	4620      	mov	r0, r4
   27cf8:	492f      	ldr	r1, [pc, #188]	; (27db8 <z_timer_expiration_handler+0x150>)
   27cfa:	f7ff fd1f 	bl	2773c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   27cfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27d00:	3301      	adds	r3, #1
   27d02:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   27d04:	6a23      	ldr	r3, [r4, #32]
   27d06:	b35b      	cbz	r3, 27d60 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d08:	4826      	ldr	r0, [pc, #152]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27d0a:	f7fd f99f 	bl	2504c <z_spin_unlock_valid>
   27d0e:	b980      	cbnz	r0, 27d32 <z_timer_expiration_handler+0xca>
   27d10:	23c2      	movs	r3, #194	; 0xc2
   27d12:	4a25      	ldr	r2, [pc, #148]	; (27da8 <z_timer_expiration_handler+0x140>)
   27d14:	4929      	ldr	r1, [pc, #164]	; (27dbc <z_timer_expiration_handler+0x154>)
   27d16:	4826      	ldr	r0, [pc, #152]	; (27db0 <z_timer_expiration_handler+0x148>)
   27d18:	f002 fcbb 	bl	2a692 <assert_print>
   27d1c:	4921      	ldr	r1, [pc, #132]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27d1e:	4828      	ldr	r0, [pc, #160]	; (27dc0 <z_timer_expiration_handler+0x158>)
   27d20:	f002 fcb7 	bl	2a692 <assert_print>
   27d24:	21c2      	movs	r1, #194	; 0xc2
   27d26:	e7b8      	b.n	27c9a <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   27d28:	f06f 0201 	mvn.w	r2, #1
   27d2c:	f04f 33ff 	mov.w	r3, #4294967295
   27d30:	e7e1      	b.n	27cf6 <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   27d32:	f385 8811 	msr	BASEPRI, r5
   27d36:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   27d3a:	4620      	mov	r0, r4
   27d3c:	6a23      	ldr	r3, [r4, #32]
   27d3e:	4798      	blx	r3
	__asm__ volatile(
   27d40:	f04f 0320 	mov.w	r3, #32
   27d44:	f3ef 8511 	mrs	r5, BASEPRI
   27d48:	f383 8812 	msr	BASEPRI_MAX, r3
   27d4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d50:	4814      	ldr	r0, [pc, #80]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27d52:	f7fd f96d 	bl	25030 <z_spin_lock_valid>
   27d56:	2800      	cmp	r0, #0
   27d58:	d094      	beq.n	27c84 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   27d5a:	4812      	ldr	r0, [pc, #72]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27d5c:	f7fd f984 	bl	25068 <z_spin_lock_set_owner>
	return list->head == list;
   27d60:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d64:	42a6      	cmp	r6, r4
   27d66:	d000      	beq.n	27d6a <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   27d68:	b94e      	cbnz	r6, 27d7e <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d6a:	480e      	ldr	r0, [pc, #56]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27d6c:	f7fd f96e 	bl	2504c <z_spin_unlock_valid>
   27d70:	2800      	cmp	r0, #0
   27d72:	d0cd      	beq.n	27d10 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   27d74:	f385 8811 	msr	BASEPRI, r5
   27d78:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   27d7c:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   27d7e:	4630      	mov	r0, r6
   27d80:	f7fe fbda 	bl	26538 <z_unpend_thread_no_timeout>
   27d84:	2300      	movs	r3, #0
   27d86:	4807      	ldr	r0, [pc, #28]	; (27da4 <z_timer_expiration_handler+0x13c>)
   27d88:	67f3      	str	r3, [r6, #124]	; 0x7c
   27d8a:	f7fd f95f 	bl	2504c <z_spin_unlock_valid>
   27d8e:	2800      	cmp	r0, #0
   27d90:	d0be      	beq.n	27d10 <z_timer_expiration_handler+0xa8>
   27d92:	f385 8811 	msr	BASEPRI, r5
   27d96:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   27d9a:	4630      	mov	r0, r6
}
   27d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   27da0:	f7fe bb84 	b.w	264ac <z_ready_thread>
   27da4:	20021adc 	.word	0x20021adc
   27da8:	0003338d 	.word	0x0003338d
   27dac:	000333e6 	.word	0x000333e6
   27db0:	00032629 	.word	0x00032629
   27db4:	000333fb 	.word	0x000333fb
   27db8:	00027c69 	.word	0x00027c69
   27dbc:	000333ba 	.word	0x000333ba
   27dc0:	000333d1 	.word	0x000333d1

00027dc4 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
   27dc8:	bf08      	it	eq
   27dca:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   27dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27dd2:	4619      	mov	r1, r3
   27dd4:	4605      	mov	r5, r0
   27dd6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   27dda:	4614      	mov	r4, r2
   27ddc:	4691      	mov	r9, r2
   27dde:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27de0:	d037      	beq.n	27e52 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   27de2:	f1b0 3fff 	cmp.w	r0, #4294967295
   27de6:	bf08      	it	eq
   27de8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   27dec:	4637      	mov	r7, r6
   27dee:	4682      	mov	sl, r0
   27df0:	d011      	beq.n	27e16 <z_impl_k_timer_start+0x52>
   27df2:	ea50 0306 	orrs.w	r3, r0, r6
   27df6:	d00e      	beq.n	27e16 <z_impl_k_timer_start+0x52>
   27df8:	1c72      	adds	r2, r6, #1
   27dfa:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   27dfe:	db0a      	blt.n	27e16 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   27e00:	2e02      	cmp	r6, #2
   27e02:	4684      	mov	ip, r0
   27e04:	f170 0000 	sbcs.w	r0, r0, #0
   27e08:	bfbc      	itt	lt
   27e0a:	2702      	movlt	r7, #2
   27e0c:	f04f 0c00 	movlt.w	ip, #0
   27e10:	3f01      	subs	r7, #1
   27e12:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   27e16:	1c63      	adds	r3, r4, #1
   27e18:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   27e1c:	db0a      	blt.n	27e34 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   27e1e:	2c01      	cmp	r4, #1
   27e20:	f171 0300 	sbcs.w	r3, r1, #0
   27e24:	4622      	mov	r2, r4
   27e26:	bfbc      	itt	lt
   27e28:	2201      	movlt	r2, #1
   27e2a:	2100      	movlt	r1, #0
   27e2c:	f112 39ff 	adds.w	r9, r2, #4294967295
   27e30:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   27e34:	4628      	mov	r0, r5
   27e36:	f7ff fd47 	bl	278c8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   27e3a:	2300      	movs	r3, #0
	timer->period = period;
   27e3c:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   27e40:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27e42:	464a      	mov	r2, r9
   27e44:	4643      	mov	r3, r8
   27e46:	4628      	mov	r0, r5
		     duration);
}
   27e48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27e4c:	4902      	ldr	r1, [pc, #8]	; (27e58 <z_impl_k_timer_start+0x94>)
   27e4e:	f7ff bc75 	b.w	2773c <z_add_timeout>
}
   27e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27e56:	bf00      	nop
   27e58:	00027c69 	.word	0x00027c69

00027e5c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   27e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   27e60:	2600      	movs	r6, #0
{
   27e62:	4688      	mov	r8, r1
   27e64:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   27e66:	4604      	mov	r4, r0
	int events_registered = 0;
   27e68:	4637      	mov	r7, r6
	event->poller = NULL;
   27e6a:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27e6c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 2802c <register_events+0x1d0>
{
   27e70:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   27e72:	4546      	cmp	r6, r8
   27e74:	db03      	blt.n	27e7e <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   27e76:	4638      	mov	r0, r7
   27e78:	b003      	add	sp, #12
   27e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   27e7e:	f04f 0320 	mov.w	r3, #32
   27e82:	f3ef 8b11 	mrs	fp, BASEPRI
   27e86:	f383 8812 	msr	BASEPRI_MAX, r3
   27e8a:	f3bf 8f6f 	isb	sy
   27e8e:	4648      	mov	r0, r9
   27e90:	f7fd f8ce 	bl	25030 <z_spin_lock_valid>
   27e94:	b960      	cbnz	r0, 27eb0 <register_events+0x54>
   27e96:	2394      	movs	r3, #148	; 0x94
   27e98:	4a65      	ldr	r2, [pc, #404]	; (28030 <register_events+0x1d4>)
   27e9a:	4966      	ldr	r1, [pc, #408]	; (28034 <register_events+0x1d8>)
   27e9c:	4866      	ldr	r0, [pc, #408]	; (28038 <register_events+0x1dc>)
   27e9e:	f002 fbf8 	bl	2a692 <assert_print>
   27ea2:	4962      	ldr	r1, [pc, #392]	; (2802c <register_events+0x1d0>)
   27ea4:	4865      	ldr	r0, [pc, #404]	; (2803c <register_events+0x1e0>)
   27ea6:	f002 fbf4 	bl	2a692 <assert_print>
   27eaa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27eac:	4860      	ldr	r0, [pc, #384]	; (28030 <register_events+0x1d4>)
   27eae:	e060      	b.n	27f72 <register_events+0x116>
	z_spin_lock_set_owner(l);
   27eb0:	4648      	mov	r0, r9
   27eb2:	f7fd f8d9 	bl	25068 <z_spin_lock_set_owner>
	switch (event->type) {
   27eb6:	7b63      	ldrb	r3, [r4, #13]
   27eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27ebc:	2b08      	cmp	r3, #8
   27ebe:	d84a      	bhi.n	27f56 <register_events+0xfa>
   27ec0:	e8df f003 	tbb	[pc, r3]
   27ec4:	49053d2b 	.word	0x49053d2b
   27ec8:	49494927 	.word	0x49494927
   27ecc:	43          	.byte	0x43
   27ecd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   27ece:	6923      	ldr	r3, [r4, #16]
   27ed0:	689b      	ldr	r3, [r3, #8]
   27ed2:	b313      	cbz	r3, 27f1a <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27ed4:	2302      	movs	r3, #2
	event->state |= state;
   27ed6:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   27ed8:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   27edc:	f3c2 3186 	ubfx	r1, r2, #14, #7
   27ee0:	430b      	orrs	r3, r1
   27ee2:	f363 3294 	bfi	r2, r3, #14, #7
   27ee6:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   27ee8:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27eec:	4648      	mov	r0, r9
   27eee:	f7fd f8ad 	bl	2504c <z_spin_unlock_valid>
   27ef2:	3414      	adds	r4, #20
   27ef4:	2800      	cmp	r0, #0
   27ef6:	f040 8092 	bne.w	2801e <register_events+0x1c2>
   27efa:	23c2      	movs	r3, #194	; 0xc2
   27efc:	4a4c      	ldr	r2, [pc, #304]	; (28030 <register_events+0x1d4>)
   27efe:	4950      	ldr	r1, [pc, #320]	; (28040 <register_events+0x1e4>)
   27f00:	484d      	ldr	r0, [pc, #308]	; (28038 <register_events+0x1dc>)
   27f02:	f002 fbc6 	bl	2a692 <assert_print>
   27f06:	4949      	ldr	r1, [pc, #292]	; (2802c <register_events+0x1d0>)
   27f08:	484e      	ldr	r0, [pc, #312]	; (28044 <register_events+0x1e8>)
   27f0a:	f002 fbc2 	bl	2a692 <assert_print>
   27f0e:	21c2      	movs	r1, #194	; 0xc2
   27f10:	e7cc      	b.n	27eac <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   27f12:	6923      	ldr	r3, [r4, #16]
   27f14:	681b      	ldr	r3, [r3, #0]
   27f16:	2b00      	cmp	r3, #0
   27f18:	d12d      	bne.n	27f76 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   27f1a:	9b01      	ldr	r3, [sp, #4]
   27f1c:	2b00      	cmp	r3, #0
   27f1e:	d1e5      	bne.n	27eec <register_events+0x90>
   27f20:	782b      	ldrb	r3, [r5, #0]
   27f22:	2b00      	cmp	r3, #0
   27f24:	d0e2      	beq.n	27eec <register_events+0x90>
	switch (event->type) {
   27f26:	7b63      	ldrb	r3, [r4, #13]
   27f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27f2c:	2b08      	cmp	r3, #8
   27f2e:	d86b      	bhi.n	28008 <register_events+0x1ac>
   27f30:	e8df f003 	tbb	[pc, r3]
   27f34:	6a234935 	.word	0x6a234935
   27f38:	6a6a6a38 	.word	0x6a6a6a38
   27f3c:	59          	.byte	0x59
   27f3d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   27f3e:	6923      	ldr	r3, [r4, #16]
   27f40:	689b      	ldr	r3, [r3, #8]
   27f42:	2b00      	cmp	r3, #0
   27f44:	d0e9      	beq.n	27f1a <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   27f46:	2301      	movs	r3, #1
   27f48:	e7c5      	b.n	27ed6 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   27f4a:	6923      	ldr	r3, [r4, #16]
   27f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27f4e:	2b00      	cmp	r3, #0
   27f50:	d0e3      	beq.n	27f1a <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   27f52:	2310      	movs	r3, #16
   27f54:	e7bf      	b.n	27ed6 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   27f56:	2363      	movs	r3, #99	; 0x63
   27f58:	4a3b      	ldr	r2, [pc, #236]	; (28048 <register_events+0x1ec>)
   27f5a:	493c      	ldr	r1, [pc, #240]	; (2804c <register_events+0x1f0>)
   27f5c:	4836      	ldr	r0, [pc, #216]	; (28038 <register_events+0x1dc>)
   27f5e:	f002 fb98 	bl	2a692 <assert_print>
   27f62:	7b61      	ldrb	r1, [r4, #13]
   27f64:	483a      	ldr	r0, [pc, #232]	; (28050 <register_events+0x1f4>)
   27f66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   27f6a:	f002 fb92 	bl	2a692 <assert_print>
   27f6e:	2163      	movs	r1, #99	; 0x63
   27f70:	4835      	ldr	r0, [pc, #212]	; (28048 <register_events+0x1ec>)
   27f72:	f002 fb87 	bl	2a684 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27f76:	2304      	movs	r3, #4
   27f78:	e7ad      	b.n	27ed6 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   27f7a:	6920      	ldr	r0, [r4, #16]
   27f7c:	b950      	cbnz	r0, 27f94 <register_events+0x138>
   27f7e:	4935      	ldr	r1, [pc, #212]	; (28054 <register_events+0x1f8>)
   27f80:	238d      	movs	r3, #141	; 0x8d
   27f82:	4a31      	ldr	r2, [pc, #196]	; (28048 <register_events+0x1ec>)
   27f84:	482c      	ldr	r0, [pc, #176]	; (28038 <register_events+0x1dc>)
   27f86:	f002 fb84 	bl	2a692 <assert_print>
   27f8a:	4833      	ldr	r0, [pc, #204]	; (28058 <register_events+0x1fc>)
   27f8c:	f002 fb81 	bl	2a692 <assert_print>
   27f90:	218d      	movs	r1, #141	; 0x8d
   27f92:	e7ed      	b.n	27f70 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   27f94:	462a      	mov	r2, r5
   27f96:	4621      	mov	r1, r4
   27f98:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   27f9a:	f008 fa0c 	bl	303b6 <add_event>
	event->poller = poller;
   27f9e:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   27fa0:	3701      	adds	r7, #1
   27fa2:	e7a3      	b.n	27eec <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27fa4:	6920      	ldr	r0, [r4, #16]
   27fa6:	b950      	cbnz	r0, 27fbe <register_events+0x162>
   27fa8:	492c      	ldr	r1, [pc, #176]	; (2805c <register_events+0x200>)
   27faa:	2391      	movs	r3, #145	; 0x91
   27fac:	4a26      	ldr	r2, [pc, #152]	; (28048 <register_events+0x1ec>)
   27fae:	4822      	ldr	r0, [pc, #136]	; (28038 <register_events+0x1dc>)
   27fb0:	f002 fb6f 	bl	2a692 <assert_print>
   27fb4:	482a      	ldr	r0, [pc, #168]	; (28060 <register_events+0x204>)
   27fb6:	f002 fb6c 	bl	2a692 <assert_print>
   27fba:	2191      	movs	r1, #145	; 0x91
   27fbc:	e7d8      	b.n	27f70 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   27fbe:	462a      	mov	r2, r5
   27fc0:	4621      	mov	r1, r4
   27fc2:	3014      	adds	r0, #20
   27fc4:	e7e9      	b.n	27f9a <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27fc6:	6920      	ldr	r0, [r4, #16]
   27fc8:	b950      	cbnz	r0, 27fe0 <register_events+0x184>
   27fca:	4926      	ldr	r1, [pc, #152]	; (28064 <register_events+0x208>)
   27fcc:	2395      	movs	r3, #149	; 0x95
   27fce:	4a1e      	ldr	r2, [pc, #120]	; (28048 <register_events+0x1ec>)
   27fd0:	4819      	ldr	r0, [pc, #100]	; (28038 <register_events+0x1dc>)
   27fd2:	f002 fb5e 	bl	2a692 <assert_print>
   27fd6:	4824      	ldr	r0, [pc, #144]	; (28068 <register_events+0x20c>)
   27fd8:	f002 fb5b 	bl	2a692 <assert_print>
   27fdc:	2195      	movs	r1, #149	; 0x95
   27fde:	e7c7      	b.n	27f70 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   27fe0:	462a      	mov	r2, r5
   27fe2:	4621      	mov	r1, r4
   27fe4:	e7d9      	b.n	27f9a <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   27fe6:	6920      	ldr	r0, [r4, #16]
   27fe8:	b950      	cbnz	r0, 28000 <register_events+0x1a4>
   27fea:	4920      	ldr	r1, [pc, #128]	; (2806c <register_events+0x210>)
   27fec:	2399      	movs	r3, #153	; 0x99
   27fee:	4a16      	ldr	r2, [pc, #88]	; (28048 <register_events+0x1ec>)
   27ff0:	4811      	ldr	r0, [pc, #68]	; (28038 <register_events+0x1dc>)
   27ff2:	f002 fb4e 	bl	2a692 <assert_print>
   27ff6:	481e      	ldr	r0, [pc, #120]	; (28070 <register_events+0x214>)
   27ff8:	f002 fb4b 	bl	2a692 <assert_print>
   27ffc:	2199      	movs	r1, #153	; 0x99
   27ffe:	e7b7      	b.n	27f70 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   28000:	462a      	mov	r2, r5
   28002:	4621      	mov	r1, r4
   28004:	3028      	adds	r0, #40	; 0x28
   28006:	e7c8      	b.n	27f9a <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   28008:	4910      	ldr	r1, [pc, #64]	; (2804c <register_events+0x1f0>)
   2800a:	23a6      	movs	r3, #166	; 0xa6
   2800c:	4a0e      	ldr	r2, [pc, #56]	; (28048 <register_events+0x1ec>)
   2800e:	480a      	ldr	r0, [pc, #40]	; (28038 <register_events+0x1dc>)
   28010:	f002 fb3f 	bl	2a692 <assert_print>
   28014:	4817      	ldr	r0, [pc, #92]	; (28074 <register_events+0x218>)
   28016:	f002 fb3c 	bl	2a692 <assert_print>
   2801a:	21a6      	movs	r1, #166	; 0xa6
   2801c:	e7a8      	b.n	27f70 <register_events+0x114>
	__asm__ volatile(
   2801e:	f38b 8811 	msr	BASEPRI, fp
   28022:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   28026:	3601      	adds	r6, #1
   28028:	e723      	b.n	27e72 <register_events+0x16>
   2802a:	bf00      	nop
   2802c:	20021ae0 	.word	0x20021ae0
   28030:	0003338d 	.word	0x0003338d
   28034:	000333e6 	.word	0x000333e6
   28038:	00032629 	.word	0x00032629
   2803c:	000333fb 	.word	0x000333fb
   28040:	000333ba 	.word	0x000333ba
   28044:	000333d1 	.word	0x000333d1
   28048:	00038838 	.word	0x00038838
   2804c:	00037ac9 	.word	0x00037ac9
   28050:	00038859 	.word	0x00038859
   28054:	00038876 	.word	0x00038876
   28058:	00038890 	.word	0x00038890
   2805c:	000388a5 	.word	0x000388a5
   28060:	000388c1 	.word	0x000388c1
   28064:	000388d2 	.word	0x000388d2
   28068:	000388ef 	.word	0x000388ef
   2806c:	00038906 	.word	0x00038906
   28070:	00038921 	.word	0x00038921
   28074:	0003893a 	.word	0x0003893a

00028078 <clear_event_registrations>:
{
   28078:	2314      	movs	r3, #20
   2807a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2807e:	4615      	mov	r5, r2
	while (num_events--) {
   28080:	460c      	mov	r4, r1
	event->poller = NULL;
   28082:	2600      	movs	r6, #0
   28084:	fb03 0001 	mla	r0, r3, r1, r0
   28088:	4f4b      	ldr	r7, [pc, #300]	; (281b8 <clear_event_registrations+0x140>)
	while (num_events--) {
   2808a:	b90c      	cbnz	r4, 28090 <clear_event_registrations+0x18>
}
   2808c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   28090:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   28094:	f1a0 0814 	sub.w	r8, r0, #20
   28098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   2809c:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   280a0:	2b08      	cmp	r3, #8
   280a2:	d842      	bhi.n	2812a <clear_event_registrations+0xb2>
   280a4:	e8df f003 	tbb	[pc, r3]
   280a8:	41052555 	.word	0x41052555
   280ac:	41414116 	.word	0x41414116
   280b0:	33          	.byte	0x33
   280b1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   280b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   280b6:	2b00      	cmp	r3, #0
   280b8:	d142      	bne.n	28140 <clear_event_registrations+0xc8>
   280ba:	4940      	ldr	r1, [pc, #256]	; (281bc <clear_event_registrations+0x144>)
   280bc:	23b6      	movs	r3, #182	; 0xb6
   280be:	4a40      	ldr	r2, [pc, #256]	; (281c0 <clear_event_registrations+0x148>)
   280c0:	4840      	ldr	r0, [pc, #256]	; (281c4 <clear_event_registrations+0x14c>)
   280c2:	f002 fae6 	bl	2a692 <assert_print>
   280c6:	4840      	ldr	r0, [pc, #256]	; (281c8 <clear_event_registrations+0x150>)
   280c8:	f002 fae3 	bl	2a692 <assert_print>
   280cc:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   280ce:	483c      	ldr	r0, [pc, #240]	; (281c0 <clear_event_registrations+0x148>)
   280d0:	f002 fad8 	bl	2a684 <assert_post_action>
   280d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   280d8:	2b00      	cmp	r3, #0
   280da:	d131      	bne.n	28140 <clear_event_registrations+0xc8>
   280dc:	493b      	ldr	r1, [pc, #236]	; (281cc <clear_event_registrations+0x154>)
   280de:	23ba      	movs	r3, #186	; 0xba
   280e0:	4a37      	ldr	r2, [pc, #220]	; (281c0 <clear_event_registrations+0x148>)
   280e2:	4838      	ldr	r0, [pc, #224]	; (281c4 <clear_event_registrations+0x14c>)
   280e4:	f002 fad5 	bl	2a692 <assert_print>
   280e8:	4839      	ldr	r0, [pc, #228]	; (281d0 <clear_event_registrations+0x158>)
   280ea:	f002 fad2 	bl	2a692 <assert_print>
   280ee:	21ba      	movs	r1, #186	; 0xba
   280f0:	e7ed      	b.n	280ce <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   280f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   280f6:	bb1b      	cbnz	r3, 28140 <clear_event_registrations+0xc8>
   280f8:	4936      	ldr	r1, [pc, #216]	; (281d4 <clear_event_registrations+0x15c>)
   280fa:	23be      	movs	r3, #190	; 0xbe
   280fc:	4a30      	ldr	r2, [pc, #192]	; (281c0 <clear_event_registrations+0x148>)
   280fe:	4831      	ldr	r0, [pc, #196]	; (281c4 <clear_event_registrations+0x14c>)
   28100:	f002 fac7 	bl	2a692 <assert_print>
   28104:	4834      	ldr	r0, [pc, #208]	; (281d8 <clear_event_registrations+0x160>)
   28106:	f002 fac4 	bl	2a692 <assert_print>
   2810a:	21be      	movs	r1, #190	; 0xbe
   2810c:	e7df      	b.n	280ce <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2810e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   28112:	b9ab      	cbnz	r3, 28140 <clear_event_registrations+0xc8>
   28114:	4931      	ldr	r1, [pc, #196]	; (281dc <clear_event_registrations+0x164>)
   28116:	23c2      	movs	r3, #194	; 0xc2
   28118:	4a29      	ldr	r2, [pc, #164]	; (281c0 <clear_event_registrations+0x148>)
   2811a:	482a      	ldr	r0, [pc, #168]	; (281c4 <clear_event_registrations+0x14c>)
   2811c:	f002 fab9 	bl	2a692 <assert_print>
   28120:	482f      	ldr	r0, [pc, #188]	; (281e0 <clear_event_registrations+0x168>)
   28122:	f002 fab6 	bl	2a692 <assert_print>
   28126:	21c2      	movs	r1, #194	; 0xc2
   28128:	e7d1      	b.n	280ce <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   2812a:	492e      	ldr	r1, [pc, #184]	; (281e4 <clear_event_registrations+0x16c>)
   2812c:	23cf      	movs	r3, #207	; 0xcf
   2812e:	4a24      	ldr	r2, [pc, #144]	; (281c0 <clear_event_registrations+0x148>)
   28130:	4824      	ldr	r0, [pc, #144]	; (281c4 <clear_event_registrations+0x14c>)
   28132:	f002 faae 	bl	2a692 <assert_print>
   28136:	482c      	ldr	r0, [pc, #176]	; (281e8 <clear_event_registrations+0x170>)
   28138:	f002 faab 	bl	2a692 <assert_print>
   2813c:	21cf      	movs	r1, #207	; 0xcf
   2813e:	e7c6      	b.n	280ce <clear_event_registrations+0x56>
	return node->next != NULL;
   28140:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   28144:	b12b      	cbz	r3, 28152 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   28146:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2814a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2814c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2814e:	e940 6605 	strd	r6, r6, [r0, #-20]
   28152:	4638      	mov	r0, r7
   28154:	f7fc ff7a 	bl	2504c <z_spin_unlock_valid>
   28158:	b960      	cbnz	r0, 28174 <clear_event_registrations+0xfc>
   2815a:	23c2      	movs	r3, #194	; 0xc2
   2815c:	4a23      	ldr	r2, [pc, #140]	; (281ec <clear_event_registrations+0x174>)
   2815e:	4924      	ldr	r1, [pc, #144]	; (281f0 <clear_event_registrations+0x178>)
   28160:	4818      	ldr	r0, [pc, #96]	; (281c4 <clear_event_registrations+0x14c>)
   28162:	f002 fa96 	bl	2a692 <assert_print>
   28166:	4914      	ldr	r1, [pc, #80]	; (281b8 <clear_event_registrations+0x140>)
   28168:	4822      	ldr	r0, [pc, #136]	; (281f4 <clear_event_registrations+0x17c>)
   2816a:	f002 fa92 	bl	2a692 <assert_print>
   2816e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28170:	481e      	ldr	r0, [pc, #120]	; (281ec <clear_event_registrations+0x174>)
   28172:	e7ad      	b.n	280d0 <clear_event_registrations+0x58>
   28174:	f385 8811 	msr	BASEPRI, r5
   28178:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2817c:	f04f 0320 	mov.w	r3, #32
   28180:	f3ef 8511 	mrs	r5, BASEPRI
   28184:	f383 8812 	msr	BASEPRI_MAX, r3
   28188:	f3bf 8f6f 	isb	sy
   2818c:	4638      	mov	r0, r7
   2818e:	f7fc ff4f 	bl	25030 <z_spin_lock_valid>
   28192:	3c01      	subs	r4, #1
   28194:	b958      	cbnz	r0, 281ae <clear_event_registrations+0x136>
   28196:	2394      	movs	r3, #148	; 0x94
   28198:	4a14      	ldr	r2, [pc, #80]	; (281ec <clear_event_registrations+0x174>)
   2819a:	4917      	ldr	r1, [pc, #92]	; (281f8 <clear_event_registrations+0x180>)
   2819c:	4809      	ldr	r0, [pc, #36]	; (281c4 <clear_event_registrations+0x14c>)
   2819e:	f002 fa78 	bl	2a692 <assert_print>
   281a2:	4905      	ldr	r1, [pc, #20]	; (281b8 <clear_event_registrations+0x140>)
   281a4:	4815      	ldr	r0, [pc, #84]	; (281fc <clear_event_registrations+0x184>)
   281a6:	f002 fa74 	bl	2a692 <assert_print>
   281aa:	2194      	movs	r1, #148	; 0x94
   281ac:	e7e0      	b.n	28170 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   281ae:	4638      	mov	r0, r7
   281b0:	f7fc ff5a 	bl	25068 <z_spin_lock_set_owner>
	return k;
   281b4:	4640      	mov	r0, r8
   281b6:	e768      	b.n	2808a <clear_event_registrations+0x12>
   281b8:	20021ae0 	.word	0x20021ae0
   281bc:	00038876 	.word	0x00038876
   281c0:	00038838 	.word	0x00038838
   281c4:	00032629 	.word	0x00032629
   281c8:	00038890 	.word	0x00038890
   281cc:	000388a5 	.word	0x000388a5
   281d0:	000388c1 	.word	0x000388c1
   281d4:	000388d2 	.word	0x000388d2
   281d8:	000388ef 	.word	0x000388ef
   281dc:	00038906 	.word	0x00038906
   281e0:	00038921 	.word	0x00038921
   281e4:	00037ac9 	.word	0x00037ac9
   281e8:	0003893a 	.word	0x0003893a
   281ec:	0003338d 	.word	0x0003338d
   281f0:	000333ba 	.word	0x000333ba
   281f4:	000333d1 	.word	0x000333d1
   281f8:	000333e6 	.word	0x000333e6
   281fc:	000333fb 	.word	0x000333fb

00028200 <k_poll_event_init>:
{
   28200:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   28202:	b162      	cbz	r2, 2821e <k_poll_event_init+0x1e>
   28204:	4917      	ldr	r1, [pc, #92]	; (28264 <k_poll_event_init+0x64>)
   28206:	232d      	movs	r3, #45	; 0x2d
   28208:	4a17      	ldr	r2, [pc, #92]	; (28268 <k_poll_event_init+0x68>)
   2820a:	4818      	ldr	r0, [pc, #96]	; (2826c <k_poll_event_init+0x6c>)
   2820c:	f002 fa41 	bl	2a692 <assert_print>
   28210:	4817      	ldr	r0, [pc, #92]	; (28270 <k_poll_event_init+0x70>)
   28212:	f002 fa3e 	bl	2a692 <assert_print>
   28216:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   28218:	4813      	ldr	r0, [pc, #76]	; (28268 <k_poll_event_init+0x68>)
   2821a:	f002 fa33 	bl	2a684 <assert_post_action>
   2821e:	293f      	cmp	r1, #63	; 0x3f
   28220:	d90a      	bls.n	28238 <k_poll_event_init+0x38>
   28222:	4914      	ldr	r1, [pc, #80]	; (28274 <k_poll_event_init+0x74>)
   28224:	232f      	movs	r3, #47	; 0x2f
   28226:	4a10      	ldr	r2, [pc, #64]	; (28268 <k_poll_event_init+0x68>)
   28228:	4810      	ldr	r0, [pc, #64]	; (2826c <k_poll_event_init+0x6c>)
   2822a:	f002 fa32 	bl	2a692 <assert_print>
   2822e:	4812      	ldr	r0, [pc, #72]	; (28278 <k_poll_event_init+0x78>)
   28230:	f002 fa2f 	bl	2a692 <assert_print>
   28234:	212f      	movs	r1, #47	; 0x2f
   28236:	e7ef      	b.n	28218 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   28238:	b953      	cbnz	r3, 28250 <k_poll_event_init+0x50>
   2823a:	4910      	ldr	r1, [pc, #64]	; (2827c <k_poll_event_init+0x7c>)
   2823c:	2330      	movs	r3, #48	; 0x30
   2823e:	4a0a      	ldr	r2, [pc, #40]	; (28268 <k_poll_event_init+0x68>)
   28240:	480a      	ldr	r0, [pc, #40]	; (2826c <k_poll_event_init+0x6c>)
   28242:	f002 fa26 	bl	2a692 <assert_print>
   28246:	480e      	ldr	r0, [pc, #56]	; (28280 <k_poll_event_init+0x80>)
   28248:	f002 fa23 	bl	2a692 <assert_print>
   2824c:	2130      	movs	r1, #48	; 0x30
   2824e:	e7e3      	b.n	28218 <k_poll_event_init+0x18>
	event->poller = NULL;
   28250:	6082      	str	r2, [r0, #8]
	event->type = type;
   28252:	0209      	lsls	r1, r1, #8
   28254:	7b02      	ldrb	r2, [r0, #12]
   28256:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2825a:	4311      	orrs	r1, r2
	event->obj = obj;
   2825c:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   28260:	bd08      	pop	{r3, pc}
   28262:	bf00      	nop
   28264:	00038950 	.word	0x00038950
   28268:	00038838 	.word	0x00038838
   2826c:	00032629 	.word	0x00032629
   28270:	00038970 	.word	0x00038970
   28274:	00038996 	.word	0x00038996
   28278:	000389ba 	.word	0x000389ba
   2827c:	000389ca 	.word	0x000389ca
   28280:	000389dd 	.word	0x000389dd

00028284 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   28284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28288:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2828a:	4b5c      	ldr	r3, [pc, #368]	; (283fc <z_impl_k_poll+0x178>)
{
   2828c:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   2828e:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   28292:	2301      	movs	r3, #1
{
   28294:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   28296:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   2829a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2829e:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   282a2:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   282a6:	f1bb 0f00 	cmp.w	fp, #0
   282aa:	d00e      	beq.n	282ca <z_impl_k_poll+0x46>
   282ac:	4954      	ldr	r1, [pc, #336]	; (28400 <z_impl_k_poll+0x17c>)
   282ae:	f240 132d 	movw	r3, #301	; 0x12d
   282b2:	4a54      	ldr	r2, [pc, #336]	; (28404 <z_impl_k_poll+0x180>)
   282b4:	4854      	ldr	r0, [pc, #336]	; (28408 <z_impl_k_poll+0x184>)
   282b6:	f002 f9ec 	bl	2a692 <assert_print>
   282ba:	4854      	ldr	r0, [pc, #336]	; (2840c <z_impl_k_poll+0x188>)
   282bc:	f002 f9e9 	bl	2a692 <assert_print>
   282c0:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   282c4:	484f      	ldr	r0, [pc, #316]	; (28404 <z_impl_k_poll+0x180>)
   282c6:	f002 f9dd 	bl	2a684 <assert_post_action>
   282ca:	b960      	cbnz	r0, 282e6 <z_impl_k_poll+0x62>
   282cc:	4950      	ldr	r1, [pc, #320]	; (28410 <z_impl_k_poll+0x18c>)
   282ce:	f44f 7397 	mov.w	r3, #302	; 0x12e
   282d2:	4a4c      	ldr	r2, [pc, #304]	; (28404 <z_impl_k_poll+0x180>)
   282d4:	484c      	ldr	r0, [pc, #304]	; (28408 <z_impl_k_poll+0x184>)
   282d6:	f002 f9dc 	bl	2a692 <assert_print>
   282da:	484e      	ldr	r0, [pc, #312]	; (28414 <z_impl_k_poll+0x190>)
   282dc:	f002 f9d9 	bl	2a692 <assert_print>
   282e0:	f44f 7197 	mov.w	r1, #302	; 0x12e
   282e4:	e7ee      	b.n	282c4 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   282e6:	2900      	cmp	r1, #0
   282e8:	da0c      	bge.n	28304 <z_impl_k_poll+0x80>
   282ea:	494b      	ldr	r1, [pc, #300]	; (28418 <z_impl_k_poll+0x194>)
   282ec:	f240 132f 	movw	r3, #303	; 0x12f
   282f0:	4a44      	ldr	r2, [pc, #272]	; (28404 <z_impl_k_poll+0x180>)
   282f2:	4845      	ldr	r0, [pc, #276]	; (28408 <z_impl_k_poll+0x184>)
   282f4:	f002 f9cd 	bl	2a692 <assert_print>
   282f8:	4848      	ldr	r0, [pc, #288]	; (2841c <z_impl_k_poll+0x198>)
   282fa:	f002 f9ca 	bl	2a692 <assert_print>
   282fe:	f240 112f 	movw	r1, #303	; 0x12f
   28302:	e7df      	b.n	282c4 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   28304:	ea57 0306 	orrs.w	r3, r7, r6
   28308:	bf0c      	ite	eq
   2830a:	2301      	moveq	r3, #1
   2830c:	2300      	movne	r3, #0
   2830e:	f7ff fda5 	bl	27e5c <register_events>
   28312:	4681      	mov	r9, r0
   28314:	f04f 0320 	mov.w	r3, #32
   28318:	f3ef 8a11 	mrs	sl, BASEPRI
   2831c:	f383 8812 	msr	BASEPRI_MAX, r3
   28320:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28324:	483e      	ldr	r0, [pc, #248]	; (28420 <z_impl_k_poll+0x19c>)
   28326:	f7fc fe83 	bl	25030 <z_spin_lock_valid>
   2832a:	b960      	cbnz	r0, 28346 <z_impl_k_poll+0xc2>
   2832c:	2394      	movs	r3, #148	; 0x94
   2832e:	4a3d      	ldr	r2, [pc, #244]	; (28424 <z_impl_k_poll+0x1a0>)
   28330:	493d      	ldr	r1, [pc, #244]	; (28428 <z_impl_k_poll+0x1a4>)
   28332:	4835      	ldr	r0, [pc, #212]	; (28408 <z_impl_k_poll+0x184>)
   28334:	f002 f9ad 	bl	2a692 <assert_print>
   28338:	4939      	ldr	r1, [pc, #228]	; (28420 <z_impl_k_poll+0x19c>)
   2833a:	483c      	ldr	r0, [pc, #240]	; (2842c <z_impl_k_poll+0x1a8>)
   2833c:	f002 f9a9 	bl	2a692 <assert_print>
   28340:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28342:	4838      	ldr	r0, [pc, #224]	; (28424 <z_impl_k_poll+0x1a0>)
   28344:	e7bf      	b.n	282c6 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   28346:	4836      	ldr	r0, [pc, #216]	; (28420 <z_impl_k_poll+0x19c>)
   28348:	f7fc fe8e 	bl	25068 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2834c:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   28350:	b9e4      	cbnz	r4, 2838c <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   28352:	4628      	mov	r0, r5
   28354:	4652      	mov	r2, sl
   28356:	4649      	mov	r1, r9
   28358:	f7ff fe8e 	bl	28078 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2835c:	4830      	ldr	r0, [pc, #192]	; (28420 <z_impl_k_poll+0x19c>)
   2835e:	f7fc fe75 	bl	2504c <z_spin_unlock_valid>
   28362:	b958      	cbnz	r0, 2837c <z_impl_k_poll+0xf8>
   28364:	23c2      	movs	r3, #194	; 0xc2
   28366:	4a2f      	ldr	r2, [pc, #188]	; (28424 <z_impl_k_poll+0x1a0>)
   28368:	4931      	ldr	r1, [pc, #196]	; (28430 <z_impl_k_poll+0x1ac>)
   2836a:	4827      	ldr	r0, [pc, #156]	; (28408 <z_impl_k_poll+0x184>)
   2836c:	f002 f991 	bl	2a692 <assert_print>
   28370:	492b      	ldr	r1, [pc, #172]	; (28420 <z_impl_k_poll+0x19c>)
   28372:	4830      	ldr	r0, [pc, #192]	; (28434 <z_impl_k_poll+0x1b0>)
   28374:	f002 f98d 	bl	2a692 <assert_print>
   28378:	21c2      	movs	r1, #194	; 0xc2
   2837a:	e7e2      	b.n	28342 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   2837c:	f38a 8811 	msr	BASEPRI, sl
   28380:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   28384:	4620      	mov	r0, r4
   28386:	b003      	add	sp, #12
   28388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2838c:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   28390:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28394:	d10b      	bne.n	283ae <z_impl_k_poll+0x12a>
   28396:	4822      	ldr	r0, [pc, #136]	; (28420 <z_impl_k_poll+0x19c>)
   28398:	f7fc fe58 	bl	2504c <z_spin_unlock_valid>
   2839c:	2800      	cmp	r0, #0
   2839e:	d0e1      	beq.n	28364 <z_impl_k_poll+0xe0>
   283a0:	f38a 8811 	msr	BASEPRI, sl
   283a4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   283a8:	f06f 040a 	mvn.w	r4, #10
   283ac:	e7ea      	b.n	28384 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   283ae:	4651      	mov	r1, sl
   283b0:	e9cd 7600 	strd	r7, r6, [sp]
   283b4:	4a20      	ldr	r2, [pc, #128]	; (28438 <z_impl_k_poll+0x1b4>)
   283b6:	481a      	ldr	r0, [pc, #104]	; (28420 <z_impl_k_poll+0x19c>)
   283b8:	f7fe fbd2 	bl	26b60 <z_pend_curr>
   283bc:	4604      	mov	r4, r0
	__asm__ volatile(
   283be:	f04f 0320 	mov.w	r3, #32
   283c2:	f3ef 8611 	mrs	r6, BASEPRI
   283c6:	f383 8812 	msr	BASEPRI_MAX, r3
   283ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   283ce:	4814      	ldr	r0, [pc, #80]	; (28420 <z_impl_k_poll+0x19c>)
   283d0:	f7fc fe2e 	bl	25030 <z_spin_lock_valid>
   283d4:	2800      	cmp	r0, #0
   283d6:	d0a9      	beq.n	2832c <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   283d8:	4811      	ldr	r0, [pc, #68]	; (28420 <z_impl_k_poll+0x19c>)
   283da:	f7fc fe45 	bl	25068 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   283de:	4628      	mov	r0, r5
   283e0:	4632      	mov	r2, r6
   283e2:	4649      	mov	r1, r9
   283e4:	f7ff fe48 	bl	28078 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   283e8:	480d      	ldr	r0, [pc, #52]	; (28420 <z_impl_k_poll+0x19c>)
   283ea:	f7fc fe2f 	bl	2504c <z_spin_unlock_valid>
   283ee:	2800      	cmp	r0, #0
   283f0:	d0b8      	beq.n	28364 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   283f2:	f386 8811 	msr	BASEPRI, r6
   283f6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   283fa:	e7c3      	b.n	28384 <z_impl_k_poll+0x100>
   283fc:	20021a88 	.word	0x20021a88
   28400:	000383c1 	.word	0x000383c1
   28404:	00038838 	.word	0x00038838
   28408:	00032629 	.word	0x00032629
   2840c:	00036889 	.word	0x00036889
   28410:	000389f7 	.word	0x000389f7
   28414:	00038a0d 	.word	0x00038a0d
   28418:	00038a1c 	.word	0x00038a1c
   2841c:	00038a2c 	.word	0x00038a2c
   28420:	20021ae0 	.word	0x20021ae0
   28424:	0003338d 	.word	0x0003338d
   28428:	000333e6 	.word	0x000333e6
   2842c:	000333fb 	.word	0x000333fb
   28430:	000333ba 	.word	0x000333ba
   28434:	000333d1 	.word	0x000333d1
   28438:	2000874c 	.word	0x2000874c

0002843c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2843c:	b570      	push	{r4, r5, r6, lr}
   2843e:	4604      	mov	r4, r0
   28440:	460d      	mov	r5, r1
	__asm__ volatile(
   28442:	f04f 0320 	mov.w	r3, #32
   28446:	f3ef 8611 	mrs	r6, BASEPRI
   2844a:	f383 8812 	msr	BASEPRI_MAX, r3
   2844e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28452:	4820      	ldr	r0, [pc, #128]	; (284d4 <z_impl_k_poll_signal_raise+0x98>)
   28454:	f7fc fdec 	bl	25030 <z_spin_lock_valid>
   28458:	b968      	cbnz	r0, 28476 <z_impl_k_poll_signal_raise+0x3a>
   2845a:	2394      	movs	r3, #148	; 0x94
   2845c:	4a1e      	ldr	r2, [pc, #120]	; (284d8 <z_impl_k_poll_signal_raise+0x9c>)
   2845e:	491f      	ldr	r1, [pc, #124]	; (284dc <z_impl_k_poll_signal_raise+0xa0>)
   28460:	481f      	ldr	r0, [pc, #124]	; (284e0 <z_impl_k_poll_signal_raise+0xa4>)
   28462:	f002 f916 	bl	2a692 <assert_print>
   28466:	491b      	ldr	r1, [pc, #108]	; (284d4 <z_impl_k_poll_signal_raise+0x98>)
   28468:	481e      	ldr	r0, [pc, #120]	; (284e4 <z_impl_k_poll_signal_raise+0xa8>)
   2846a:	f002 f912 	bl	2a692 <assert_print>
   2846e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28470:	4819      	ldr	r0, [pc, #100]	; (284d8 <z_impl_k_poll_signal_raise+0x9c>)
   28472:	f002 f907 	bl	2a684 <assert_post_action>
	z_spin_lock_set_owner(l);
   28476:	4817      	ldr	r0, [pc, #92]	; (284d4 <z_impl_k_poll_signal_raise+0x98>)
   28478:	f7fc fdf6 	bl	25068 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   2847c:	2101      	movs	r1, #1
	return list->head == list;
   2847e:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   28480:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   28482:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   28484:	60a1      	str	r1, [r4, #8]
   28486:	d10f      	bne.n	284a8 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28488:	4812      	ldr	r0, [pc, #72]	; (284d4 <z_impl_k_poll_signal_raise+0x98>)
   2848a:	f7fc fddf 	bl	2504c <z_spin_unlock_valid>
   2848e:	b9d8      	cbnz	r0, 284c8 <z_impl_k_poll_signal_raise+0x8c>
   28490:	23c2      	movs	r3, #194	; 0xc2
   28492:	4a11      	ldr	r2, [pc, #68]	; (284d8 <z_impl_k_poll_signal_raise+0x9c>)
   28494:	4914      	ldr	r1, [pc, #80]	; (284e8 <z_impl_k_poll_signal_raise+0xac>)
   28496:	4812      	ldr	r0, [pc, #72]	; (284e0 <z_impl_k_poll_signal_raise+0xa4>)
   28498:	f002 f8fb 	bl	2a692 <assert_print>
   2849c:	490d      	ldr	r1, [pc, #52]	; (284d4 <z_impl_k_poll_signal_raise+0x98>)
   2849e:	4813      	ldr	r0, [pc, #76]	; (284ec <z_impl_k_poll_signal_raise+0xb0>)
   284a0:	f002 f8f7 	bl	2a692 <assert_print>
   284a4:	21c2      	movs	r1, #194	; 0xc2
   284a6:	e7e3      	b.n	28470 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   284a8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   284ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   284ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   284b0:	2300      	movs	r3, #0
	node->prev = NULL;
   284b2:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   284b6:	f007 ffaf 	bl	30418 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   284ba:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   284bc:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   284be:	4805      	ldr	r0, [pc, #20]	; (284d4 <z_impl_k_poll_signal_raise+0x98>)
   284c0:	f7fe f880 	bl	265c4 <z_reschedule>
	return rc;
}
   284c4:	4620      	mov	r0, r4
   284c6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   284c8:	f386 8811 	msr	BASEPRI, r6
   284cc:	f3bf 8f6f 	isb	sy
		return 0;
   284d0:	2400      	movs	r4, #0
   284d2:	e7f7      	b.n	284c4 <z_impl_k_poll_signal_raise+0x88>
   284d4:	20021ae0 	.word	0x20021ae0
   284d8:	0003338d 	.word	0x0003338d
   284dc:	000333e6 	.word	0x000333e6
   284e0:	00032629 	.word	0x00032629
   284e4:	000333fb 	.word	0x000333fb
   284e8:	000333ba 	.word	0x000333ba
   284ec:	000333d1 	.word	0x000333d1

000284f0 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   284f0:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   284f2:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   284f6:	4606      	mov	r6, r0
   284f8:	460d      	mov	r5, r1
   284fa:	d220      	bcs.n	2853e <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   284fc:	f04f 0800 	mov.w	r8, #0
   28500:	f04f 0900 	mov.w	r9, #0
   28504:	f041 0104 	orr.w	r1, r1, #4
   28508:	e9cd 8900 	strd	r8, r9, [sp]
   2850c:	f7fc fa8c 	bl	24a28 <k_heap_aligned_alloc>
	if (mem == NULL) {
   28510:	4604      	mov	r4, r0
   28512:	b1a0      	cbz	r0, 2853e <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   28514:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   28518:	b195      	cbz	r5, 28540 <z_heap_aligned_alloc+0x50>
   2851a:	1e6b      	subs	r3, r5, #1
   2851c:	421c      	tst	r4, r3
   2851e:	d00f      	beq.n	28540 <z_heap_aligned_alloc+0x50>
   28520:	2325      	movs	r3, #37	; 0x25
   28522:	4a09      	ldr	r2, [pc, #36]	; (28548 <z_heap_aligned_alloc+0x58>)
   28524:	4909      	ldr	r1, [pc, #36]	; (2854c <z_heap_aligned_alloc+0x5c>)
   28526:	480a      	ldr	r0, [pc, #40]	; (28550 <z_heap_aligned_alloc+0x60>)
   28528:	f002 f8b3 	bl	2a692 <assert_print>
   2852c:	4621      	mov	r1, r4
   2852e:	4809      	ldr	r0, [pc, #36]	; (28554 <z_heap_aligned_alloc+0x64>)
   28530:	462a      	mov	r2, r5
   28532:	f002 f8ae 	bl	2a692 <assert_print>
   28536:	2125      	movs	r1, #37	; 0x25
   28538:	4803      	ldr	r0, [pc, #12]	; (28548 <z_heap_aligned_alloc+0x58>)
   2853a:	f002 f8a3 	bl	2a684 <assert_post_action>
		return NULL;
   2853e:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   28540:	4620      	mov	r0, r4
   28542:	b002      	add	sp, #8
   28544:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   28548:	00038a39 	.word	0x00038a39
   2854c:	00038a5d 	.word	0x00038a5d
   28550:	00032629 	.word	0x00032629
   28554:	00038a8f 	.word	0x00038a8f

00028558 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   28558:	2803      	cmp	r0, #3
{
   2855a:	460a      	mov	r2, r1
   2855c:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   2855e:	d901      	bls.n	28564 <k_aligned_alloc+0xc>
   28560:	0783      	lsls	r3, r0, #30
   28562:	d00c      	beq.n	2857e <k_aligned_alloc+0x26>
   28564:	4910      	ldr	r1, [pc, #64]	; (285a8 <k_aligned_alloc+0x50>)
   28566:	2342      	movs	r3, #66	; 0x42
   28568:	4a10      	ldr	r2, [pc, #64]	; (285ac <k_aligned_alloc+0x54>)
   2856a:	4811      	ldr	r0, [pc, #68]	; (285b0 <k_aligned_alloc+0x58>)
   2856c:	f002 f891 	bl	2a692 <assert_print>
   28570:	4810      	ldr	r0, [pc, #64]	; (285b4 <k_aligned_alloc+0x5c>)
   28572:	f002 f88e 	bl	2a692 <assert_print>
   28576:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   28578:	480c      	ldr	r0, [pc, #48]	; (285ac <k_aligned_alloc+0x54>)
   2857a:	f002 f883 	bl	2a684 <assert_post_action>
   2857e:	1e43      	subs	r3, r0, #1
   28580:	4203      	tst	r3, r0
   28582:	d00a      	beq.n	2859a <k_aligned_alloc+0x42>
   28584:	490c      	ldr	r1, [pc, #48]	; (285b8 <k_aligned_alloc+0x60>)
   28586:	2346      	movs	r3, #70	; 0x46
   28588:	4a08      	ldr	r2, [pc, #32]	; (285ac <k_aligned_alloc+0x54>)
   2858a:	4809      	ldr	r0, [pc, #36]	; (285b0 <k_aligned_alloc+0x58>)
   2858c:	f002 f881 	bl	2a692 <assert_print>
   28590:	480a      	ldr	r0, [pc, #40]	; (285bc <k_aligned_alloc+0x64>)
   28592:	f002 f87e 	bl	2a692 <assert_print>
   28596:	2146      	movs	r1, #70	; 0x46
   28598:	e7ee      	b.n	28578 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2859a:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   2859c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   285a0:	4807      	ldr	r0, [pc, #28]	; (285c0 <k_aligned_alloc+0x68>)
   285a2:	f7ff bfa5 	b.w	284f0 <z_heap_aligned_alloc>
   285a6:	bf00      	nop
   285a8:	00038ab7 	.word	0x00038ab7
   285ac:	00038a39 	.word	0x00038a39
   285b0:	00032629 	.word	0x00032629
   285b4:	00038af4 	.word	0x00038af4
   285b8:	000331f7 	.word	0x000331f7
   285bc:	00033212 	.word	0x00033212
   285c0:	20008afc 	.word	0x20008afc

000285c4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   285c4:	4b01      	ldr	r3, [pc, #4]	; (285cc <k_thread_system_pool_assign+0x8>)
   285c6:	6743      	str	r3, [r0, #116]	; 0x74
}
   285c8:	4770      	bx	lr
   285ca:	bf00      	nop
   285cc:	20008afc 	.word	0x20008afc

000285d0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   285d0:	b538      	push	{r3, r4, r5, lr}
   285d2:	4604      	mov	r4, r0
   285d4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   285d6:	f007 fda3 	bl	30120 <k_is_in_isr>
   285da:	b920      	cbnz	r0, 285e6 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   285dc:	4b06      	ldr	r3, [pc, #24]	; (285f8 <z_thread_aligned_alloc+0x28>)
   285de:	689b      	ldr	r3, [r3, #8]
   285e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   285e2:	b90b      	cbnz	r3, 285e8 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   285e4:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   285e6:	4b05      	ldr	r3, [pc, #20]	; (285fc <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   285e8:	462a      	mov	r2, r5
   285ea:	4621      	mov	r1, r4
   285ec:	4618      	mov	r0, r3
}
   285ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   285f2:	f7ff bf7d 	b.w	284f0 <z_heap_aligned_alloc>
   285f6:	bf00      	nop
   285f8:	20021a88 	.word	0x20021a88
   285fc:	20008afc 	.word	0x20008afc

00028600 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   28600:	4801      	ldr	r0, [pc, #4]	; (28608 <boot_banner+0x8>)
   28602:	f001 be84 	b.w	2a30e <printk>
   28606:	bf00      	nop
   28608:	00038b21 	.word	0x00038b21

0002860c <log>:
   2860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2860e:	4604      	mov	r4, r0
   28610:	460d      	mov	r5, r1
   28612:	f7e1 f999 	bl	9948 <__ieee754_log>
   28616:	4b17      	ldr	r3, [pc, #92]	; (28674 <log+0x68>)
   28618:	4606      	mov	r6, r0
   2861a:	460f      	mov	r7, r1
   2861c:	f993 3000 	ldrsb.w	r3, [r3]
   28620:	3301      	adds	r3, #1
   28622:	d01a      	beq.n	2865a <log+0x4e>
   28624:	4622      	mov	r2, r4
   28626:	462b      	mov	r3, r5
   28628:	4620      	mov	r0, r4
   2862a:	4629      	mov	r1, r5
   2862c:	f7e0 fd02 	bl	9034 <__aeabi_dcmpun>
   28630:	b998      	cbnz	r0, 2865a <log+0x4e>
   28632:	2200      	movs	r2, #0
   28634:	2300      	movs	r3, #0
   28636:	4620      	mov	r0, r4
   28638:	4629      	mov	r1, r5
   2863a:	f7e0 fcf1 	bl	9020 <__aeabi_dcmpgt>
   2863e:	b960      	cbnz	r0, 2865a <log+0x4e>
   28640:	2200      	movs	r2, #0
   28642:	2300      	movs	r3, #0
   28644:	4620      	mov	r0, r4
   28646:	4629      	mov	r1, r5
   28648:	f7e0 fcc2 	bl	8fd0 <__aeabi_dcmpeq>
   2864c:	b140      	cbz	r0, 28660 <log+0x54>
   2864e:	f003 fbbd 	bl	2bdcc <__errno>
   28652:	2600      	movs	r6, #0
   28654:	2322      	movs	r3, #34	; 0x22
   28656:	4f08      	ldr	r7, [pc, #32]	; (28678 <log+0x6c>)
   28658:	6003      	str	r3, [r0, #0]
   2865a:	4630      	mov	r0, r6
   2865c:	4639      	mov	r1, r7
   2865e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28660:	f003 fbb4 	bl	2bdcc <__errno>
   28664:	2321      	movs	r3, #33	; 0x21
   28666:	6003      	str	r3, [r0, #0]
   28668:	4804      	ldr	r0, [pc, #16]	; (2867c <log+0x70>)
   2866a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2866e:	f000 b807 	b.w	28680 <nan>
   28672:	bf00      	nop
   28674:	200089f7 	.word	0x200089f7
   28678:	fff00000 	.word	0xfff00000
   2867c:	0003688b 	.word	0x0003688b

00028680 <nan>:
   28680:	2000      	movs	r0, #0
   28682:	4901      	ldr	r1, [pc, #4]	; (28688 <nan+0x8>)
   28684:	4770      	bx	lr
   28686:	bf00      	nop
   28688:	7ff80000 	.word	0x7ff80000

0002868c <malloc>:
   2868c:	4b02      	ldr	r3, [pc, #8]	; (28698 <malloc+0xc>)
   2868e:	4601      	mov	r1, r0
   28690:	6818      	ldr	r0, [r3, #0]
   28692:	f000 b855 	b.w	28740 <_malloc_r>
   28696:	bf00      	nop
   28698:	20008754 	.word	0x20008754

0002869c <free>:
   2869c:	4b02      	ldr	r3, [pc, #8]	; (286a8 <free+0xc>)
   2869e:	4601      	mov	r1, r0
   286a0:	6818      	ldr	r0, [r3, #0]
   286a2:	f000 b803 	b.w	286ac <_free_r>
   286a6:	bf00      	nop
   286a8:	20008754 	.word	0x20008754

000286ac <_free_r>:
   286ac:	b538      	push	{r3, r4, r5, lr}
   286ae:	4605      	mov	r5, r0
   286b0:	2900      	cmp	r1, #0
   286b2:	d041      	beq.n	28738 <_free_r+0x8c>
   286b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   286b8:	1f0c      	subs	r4, r1, #4
   286ba:	2b00      	cmp	r3, #0
   286bc:	bfb8      	it	lt
   286be:	18e4      	addlt	r4, r4, r3
   286c0:	f000 fd94 	bl	291ec <__malloc_lock>
   286c4:	4a1d      	ldr	r2, [pc, #116]	; (2873c <_free_r+0x90>)
   286c6:	6813      	ldr	r3, [r2, #0]
   286c8:	b933      	cbnz	r3, 286d8 <_free_r+0x2c>
   286ca:	6063      	str	r3, [r4, #4]
   286cc:	6014      	str	r4, [r2, #0]
   286ce:	4628      	mov	r0, r5
   286d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   286d4:	f000 bd90 	b.w	291f8 <__malloc_unlock>
   286d8:	42a3      	cmp	r3, r4
   286da:	d908      	bls.n	286ee <_free_r+0x42>
   286dc:	6820      	ldr	r0, [r4, #0]
   286de:	1821      	adds	r1, r4, r0
   286e0:	428b      	cmp	r3, r1
   286e2:	bf01      	itttt	eq
   286e4:	6819      	ldreq	r1, [r3, #0]
   286e6:	685b      	ldreq	r3, [r3, #4]
   286e8:	1809      	addeq	r1, r1, r0
   286ea:	6021      	streq	r1, [r4, #0]
   286ec:	e7ed      	b.n	286ca <_free_r+0x1e>
   286ee:	461a      	mov	r2, r3
   286f0:	685b      	ldr	r3, [r3, #4]
   286f2:	b10b      	cbz	r3, 286f8 <_free_r+0x4c>
   286f4:	42a3      	cmp	r3, r4
   286f6:	d9fa      	bls.n	286ee <_free_r+0x42>
   286f8:	6811      	ldr	r1, [r2, #0]
   286fa:	1850      	adds	r0, r2, r1
   286fc:	42a0      	cmp	r0, r4
   286fe:	d10b      	bne.n	28718 <_free_r+0x6c>
   28700:	6820      	ldr	r0, [r4, #0]
   28702:	4401      	add	r1, r0
   28704:	1850      	adds	r0, r2, r1
   28706:	6011      	str	r1, [r2, #0]
   28708:	4283      	cmp	r3, r0
   2870a:	d1e0      	bne.n	286ce <_free_r+0x22>
   2870c:	6818      	ldr	r0, [r3, #0]
   2870e:	685b      	ldr	r3, [r3, #4]
   28710:	4408      	add	r0, r1
   28712:	6053      	str	r3, [r2, #4]
   28714:	6010      	str	r0, [r2, #0]
   28716:	e7da      	b.n	286ce <_free_r+0x22>
   28718:	d902      	bls.n	28720 <_free_r+0x74>
   2871a:	230c      	movs	r3, #12
   2871c:	602b      	str	r3, [r5, #0]
   2871e:	e7d6      	b.n	286ce <_free_r+0x22>
   28720:	6820      	ldr	r0, [r4, #0]
   28722:	1821      	adds	r1, r4, r0
   28724:	428b      	cmp	r3, r1
   28726:	bf02      	ittt	eq
   28728:	6819      	ldreq	r1, [r3, #0]
   2872a:	685b      	ldreq	r3, [r3, #4]
   2872c:	1809      	addeq	r1, r1, r0
   2872e:	6063      	str	r3, [r4, #4]
   28730:	bf08      	it	eq
   28732:	6021      	streq	r1, [r4, #0]
   28734:	6054      	str	r4, [r2, #4]
   28736:	e7ca      	b.n	286ce <_free_r+0x22>
   28738:	bd38      	pop	{r3, r4, r5, pc}
   2873a:	bf00      	nop
   2873c:	20021ae8 	.word	0x20021ae8

00028740 <_malloc_r>:
   28740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28742:	1ccd      	adds	r5, r1, #3
   28744:	4606      	mov	r6, r0
   28746:	f025 0503 	bic.w	r5, r5, #3
   2874a:	3508      	adds	r5, #8
   2874c:	2d0c      	cmp	r5, #12
   2874e:	bf38      	it	cc
   28750:	250c      	movcc	r5, #12
   28752:	2d00      	cmp	r5, #0
   28754:	db01      	blt.n	2875a <_malloc_r+0x1a>
   28756:	42a9      	cmp	r1, r5
   28758:	d903      	bls.n	28762 <_malloc_r+0x22>
   2875a:	230c      	movs	r3, #12
   2875c:	6033      	str	r3, [r6, #0]
   2875e:	2000      	movs	r0, #0
   28760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28762:	f000 fd43 	bl	291ec <__malloc_lock>
   28766:	4921      	ldr	r1, [pc, #132]	; (287ec <_malloc_r+0xac>)
   28768:	680a      	ldr	r2, [r1, #0]
   2876a:	4614      	mov	r4, r2
   2876c:	b99c      	cbnz	r4, 28796 <_malloc_r+0x56>
   2876e:	4f20      	ldr	r7, [pc, #128]	; (287f0 <_malloc_r+0xb0>)
   28770:	683b      	ldr	r3, [r7, #0]
   28772:	b923      	cbnz	r3, 2877e <_malloc_r+0x3e>
   28774:	4621      	mov	r1, r4
   28776:	4630      	mov	r0, r6
   28778:	f000 fbb8 	bl	28eec <_sbrk_r>
   2877c:	6038      	str	r0, [r7, #0]
   2877e:	4629      	mov	r1, r5
   28780:	4630      	mov	r0, r6
   28782:	f000 fbb3 	bl	28eec <_sbrk_r>
   28786:	1c43      	adds	r3, r0, #1
   28788:	d123      	bne.n	287d2 <_malloc_r+0x92>
   2878a:	230c      	movs	r3, #12
   2878c:	4630      	mov	r0, r6
   2878e:	6033      	str	r3, [r6, #0]
   28790:	f000 fd32 	bl	291f8 <__malloc_unlock>
   28794:	e7e3      	b.n	2875e <_malloc_r+0x1e>
   28796:	6823      	ldr	r3, [r4, #0]
   28798:	1b5b      	subs	r3, r3, r5
   2879a:	d417      	bmi.n	287cc <_malloc_r+0x8c>
   2879c:	2b0b      	cmp	r3, #11
   2879e:	d903      	bls.n	287a8 <_malloc_r+0x68>
   287a0:	6023      	str	r3, [r4, #0]
   287a2:	441c      	add	r4, r3
   287a4:	6025      	str	r5, [r4, #0]
   287a6:	e004      	b.n	287b2 <_malloc_r+0x72>
   287a8:	6863      	ldr	r3, [r4, #4]
   287aa:	42a2      	cmp	r2, r4
   287ac:	bf0c      	ite	eq
   287ae:	600b      	streq	r3, [r1, #0]
   287b0:	6053      	strne	r3, [r2, #4]
   287b2:	4630      	mov	r0, r6
   287b4:	f000 fd20 	bl	291f8 <__malloc_unlock>
   287b8:	f104 000b 	add.w	r0, r4, #11
   287bc:	1d23      	adds	r3, r4, #4
   287be:	f020 0007 	bic.w	r0, r0, #7
   287c2:	1ac2      	subs	r2, r0, r3
   287c4:	bf1c      	itt	ne
   287c6:	1a1b      	subne	r3, r3, r0
   287c8:	50a3      	strne	r3, [r4, r2]
   287ca:	e7c9      	b.n	28760 <_malloc_r+0x20>
   287cc:	4622      	mov	r2, r4
   287ce:	6864      	ldr	r4, [r4, #4]
   287d0:	e7cc      	b.n	2876c <_malloc_r+0x2c>
   287d2:	1cc4      	adds	r4, r0, #3
   287d4:	f024 0403 	bic.w	r4, r4, #3
   287d8:	42a0      	cmp	r0, r4
   287da:	d0e3      	beq.n	287a4 <_malloc_r+0x64>
   287dc:	1a21      	subs	r1, r4, r0
   287de:	4630      	mov	r0, r6
   287e0:	f000 fb84 	bl	28eec <_sbrk_r>
   287e4:	3001      	adds	r0, #1
   287e6:	d1dd      	bne.n	287a4 <_malloc_r+0x64>
   287e8:	e7cf      	b.n	2878a <_malloc_r+0x4a>
   287ea:	bf00      	nop
   287ec:	20021ae8 	.word	0x20021ae8
   287f0:	20021ae4 	.word	0x20021ae4

000287f4 <_printf_float>:
   287f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   287f8:	b091      	sub	sp, #68	; 0x44
   287fa:	460c      	mov	r4, r1
   287fc:	4616      	mov	r6, r2
   287fe:	461f      	mov	r7, r3
   28800:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   28804:	4605      	mov	r5, r0
   28806:	f000 fced 	bl	291e4 <_localeconv_r>
   2880a:	6803      	ldr	r3, [r0, #0]
   2880c:	4618      	mov	r0, r3
   2880e:	9308      	str	r3, [sp, #32]
   28810:	f7e0 fdb9 	bl	9386 <strlen>
   28814:	2300      	movs	r3, #0
   28816:	9009      	str	r0, [sp, #36]	; 0x24
   28818:	930e      	str	r3, [sp, #56]	; 0x38
   2881a:	f8d8 3000 	ldr.w	r3, [r8]
   2881e:	f894 a018 	ldrb.w	sl, [r4, #24]
   28822:	3307      	adds	r3, #7
   28824:	f8d4 b000 	ldr.w	fp, [r4]
   28828:	f023 0307 	bic.w	r3, r3, #7
   2882c:	f103 0208 	add.w	r2, r3, #8
   28830:	f8c8 2000 	str.w	r2, [r8]
   28834:	f04f 32ff 	mov.w	r2, #4294967295
   28838:	e9d3 8900 	ldrd	r8, r9, [r3]
   2883c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   28840:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   28844:	930b      	str	r3, [sp, #44]	; 0x2c
   28846:	4b9d      	ldr	r3, [pc, #628]	; (28abc <_printf_float+0x2c8>)
   28848:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2884c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   28850:	f7e0 fbf0 	bl	9034 <__aeabi_dcmpun>
   28854:	bb70      	cbnz	r0, 288b4 <_printf_float+0xc0>
   28856:	f04f 32ff 	mov.w	r2, #4294967295
   2885a:	4b98      	ldr	r3, [pc, #608]	; (28abc <_printf_float+0x2c8>)
   2885c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   28860:	f7e0 fbca 	bl	8ff8 <__aeabi_dcmple>
   28864:	bb30      	cbnz	r0, 288b4 <_printf_float+0xc0>
   28866:	2200      	movs	r2, #0
   28868:	2300      	movs	r3, #0
   2886a:	4640      	mov	r0, r8
   2886c:	4649      	mov	r1, r9
   2886e:	f7e0 fbb9 	bl	8fe4 <__aeabi_dcmplt>
   28872:	b110      	cbz	r0, 2887a <_printf_float+0x86>
   28874:	232d      	movs	r3, #45	; 0x2d
   28876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2887a:	4a91      	ldr	r2, [pc, #580]	; (28ac0 <_printf_float+0x2cc>)
   2887c:	4b91      	ldr	r3, [pc, #580]	; (28ac4 <_printf_float+0x2d0>)
   2887e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   28882:	bf94      	ite	ls
   28884:	4690      	movls	r8, r2
   28886:	4698      	movhi	r8, r3
   28888:	2303      	movs	r3, #3
   2888a:	f04f 0900 	mov.w	r9, #0
   2888e:	6123      	str	r3, [r4, #16]
   28890:	f02b 0304 	bic.w	r3, fp, #4
   28894:	6023      	str	r3, [r4, #0]
   28896:	4633      	mov	r3, r6
   28898:	aa0f      	add	r2, sp, #60	; 0x3c
   2889a:	4621      	mov	r1, r4
   2889c:	4628      	mov	r0, r5
   2889e:	9700      	str	r7, [sp, #0]
   288a0:	f007 ff41 	bl	30726 <_printf_common>
   288a4:	3001      	adds	r0, #1
   288a6:	f040 8099 	bne.w	289dc <_printf_float+0x1e8>
   288aa:	f04f 30ff 	mov.w	r0, #4294967295
   288ae:	b011      	add	sp, #68	; 0x44
   288b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288b4:	4642      	mov	r2, r8
   288b6:	464b      	mov	r3, r9
   288b8:	4640      	mov	r0, r8
   288ba:	4649      	mov	r1, r9
   288bc:	f7e0 fbba 	bl	9034 <__aeabi_dcmpun>
   288c0:	b140      	cbz	r0, 288d4 <_printf_float+0xe0>
   288c2:	464b      	mov	r3, r9
   288c4:	4a80      	ldr	r2, [pc, #512]	; (28ac8 <_printf_float+0x2d4>)
   288c6:	2b00      	cmp	r3, #0
   288c8:	bfbc      	itt	lt
   288ca:	232d      	movlt	r3, #45	; 0x2d
   288cc:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   288d0:	4b7e      	ldr	r3, [pc, #504]	; (28acc <_printf_float+0x2d8>)
   288d2:	e7d4      	b.n	2887e <_printf_float+0x8a>
   288d4:	6863      	ldr	r3, [r4, #4]
   288d6:	1c5a      	adds	r2, r3, #1
   288d8:	d129      	bne.n	2892e <_printf_float+0x13a>
   288da:	2306      	movs	r3, #6
   288dc:	6063      	str	r3, [r4, #4]
   288de:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   288e2:	2200      	movs	r2, #0
   288e4:	4628      	mov	r0, r5
   288e6:	6023      	str	r3, [r4, #0]
   288e8:	9206      	str	r2, [sp, #24]
   288ea:	aa0e      	add	r2, sp, #56	; 0x38
   288ec:	e9cd a204 	strd	sl, r2, [sp, #16]
   288f0:	aa0d      	add	r2, sp, #52	; 0x34
   288f2:	9203      	str	r2, [sp, #12]
   288f4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   288f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   288fc:	6863      	ldr	r3, [r4, #4]
   288fe:	4642      	mov	r2, r8
   28900:	9300      	str	r3, [sp, #0]
   28902:	464b      	mov	r3, r9
   28904:	f007 fe6f 	bl	305e6 <__cvt>
   28908:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   2890c:	4680      	mov	r8, r0
   2890e:	990d      	ldr	r1, [sp, #52]	; 0x34
   28910:	d115      	bne.n	2893e <_printf_float+0x14a>
   28912:	1ccb      	adds	r3, r1, #3
   28914:	db3b      	blt.n	2898e <_printf_float+0x19a>
   28916:	6863      	ldr	r3, [r4, #4]
   28918:	4299      	cmp	r1, r3
   2891a:	dc38      	bgt.n	2898e <_printf_float+0x19a>
   2891c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2891e:	4299      	cmp	r1, r3
   28920:	db55      	blt.n	289ce <_printf_float+0x1da>
   28922:	6823      	ldr	r3, [r4, #0]
   28924:	6121      	str	r1, [r4, #16]
   28926:	07d8      	lsls	r0, r3, #31
   28928:	d545      	bpl.n	289b6 <_printf_float+0x1c2>
   2892a:	1c4b      	adds	r3, r1, #1
   2892c:	e042      	b.n	289b4 <_printf_float+0x1c0>
   2892e:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   28932:	2a47      	cmp	r2, #71	; 0x47
   28934:	d1d3      	bne.n	288de <_printf_float+0xea>
   28936:	2b00      	cmp	r3, #0
   28938:	d1d1      	bne.n	288de <_printf_float+0xea>
   2893a:	2301      	movs	r3, #1
   2893c:	e7ce      	b.n	288dc <_printf_float+0xe8>
   2893e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   28942:	d107      	bne.n	28954 <_printf_float+0x160>
   28944:	1cc8      	adds	r0, r1, #3
   28946:	db25      	blt.n	28994 <_printf_float+0x1a0>
   28948:	6863      	ldr	r3, [r4, #4]
   2894a:	428b      	cmp	r3, r1
   2894c:	db22      	blt.n	28994 <_printf_float+0x1a0>
   2894e:	f04f 0a67 	mov.w	sl, #103	; 0x67
   28952:	e7e3      	b.n	2891c <_printf_float+0x128>
   28954:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   28958:	d81f      	bhi.n	2899a <_printf_float+0x1a6>
   2895a:	3901      	subs	r1, #1
   2895c:	4652      	mov	r2, sl
   2895e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   28962:	910d      	str	r1, [sp, #52]	; 0x34
   28964:	f007 fea6 	bl	306b4 <__exponent>
   28968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2896a:	4681      	mov	r9, r0
   2896c:	1813      	adds	r3, r2, r0
   2896e:	2a01      	cmp	r2, #1
   28970:	6123      	str	r3, [r4, #16]
   28972:	dc02      	bgt.n	2897a <_printf_float+0x186>
   28974:	6822      	ldr	r2, [r4, #0]
   28976:	07d2      	lsls	r2, r2, #31
   28978:	d501      	bpl.n	2897e <_printf_float+0x18a>
   2897a:	3301      	adds	r3, #1
   2897c:	6123      	str	r3, [r4, #16]
   2897e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   28982:	2b00      	cmp	r3, #0
   28984:	d087      	beq.n	28896 <_printf_float+0xa2>
   28986:	232d      	movs	r3, #45	; 0x2d
   28988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2898c:	e783      	b.n	28896 <_printf_float+0xa2>
   2898e:	f04f 0a65 	mov.w	sl, #101	; 0x65
   28992:	e7e2      	b.n	2895a <_printf_float+0x166>
   28994:	f04f 0a45 	mov.w	sl, #69	; 0x45
   28998:	e7df      	b.n	2895a <_printf_float+0x166>
   2899a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2899e:	d1bd      	bne.n	2891c <_printf_float+0x128>
   289a0:	2900      	cmp	r1, #0
   289a2:	6863      	ldr	r3, [r4, #4]
   289a4:	dd0b      	ble.n	289be <_printf_float+0x1ca>
   289a6:	6121      	str	r1, [r4, #16]
   289a8:	b913      	cbnz	r3, 289b0 <_printf_float+0x1bc>
   289aa:	6822      	ldr	r2, [r4, #0]
   289ac:	07d0      	lsls	r0, r2, #31
   289ae:	d502      	bpl.n	289b6 <_printf_float+0x1c2>
   289b0:	3301      	adds	r3, #1
   289b2:	440b      	add	r3, r1
   289b4:	6123      	str	r3, [r4, #16]
   289b6:	f04f 0900 	mov.w	r9, #0
   289ba:	65a1      	str	r1, [r4, #88]	; 0x58
   289bc:	e7df      	b.n	2897e <_printf_float+0x18a>
   289be:	b913      	cbnz	r3, 289c6 <_printf_float+0x1d2>
   289c0:	6822      	ldr	r2, [r4, #0]
   289c2:	07d2      	lsls	r2, r2, #31
   289c4:	d501      	bpl.n	289ca <_printf_float+0x1d6>
   289c6:	3302      	adds	r3, #2
   289c8:	e7f4      	b.n	289b4 <_printf_float+0x1c0>
   289ca:	2301      	movs	r3, #1
   289cc:	e7f2      	b.n	289b4 <_printf_float+0x1c0>
   289ce:	2900      	cmp	r1, #0
   289d0:	bfd4      	ite	le
   289d2:	f1c1 0202 	rsble	r2, r1, #2
   289d6:	2201      	movgt	r2, #1
   289d8:	4413      	add	r3, r2
   289da:	e7eb      	b.n	289b4 <_printf_float+0x1c0>
   289dc:	6823      	ldr	r3, [r4, #0]
   289de:	055a      	lsls	r2, r3, #21
   289e0:	d407      	bmi.n	289f2 <_printf_float+0x1fe>
   289e2:	6923      	ldr	r3, [r4, #16]
   289e4:	4642      	mov	r2, r8
   289e6:	4631      	mov	r1, r6
   289e8:	4628      	mov	r0, r5
   289ea:	47b8      	blx	r7
   289ec:	3001      	adds	r0, #1
   289ee:	d12b      	bne.n	28a48 <_printf_float+0x254>
   289f0:	e75b      	b.n	288aa <_printf_float+0xb6>
   289f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   289f6:	f240 80dc 	bls.w	28bb2 <_printf_float+0x3be>
   289fa:	2200      	movs	r2, #0
   289fc:	2300      	movs	r3, #0
   289fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   28a02:	f7e0 fae5 	bl	8fd0 <__aeabi_dcmpeq>
   28a06:	2800      	cmp	r0, #0
   28a08:	d033      	beq.n	28a72 <_printf_float+0x27e>
   28a0a:	2301      	movs	r3, #1
   28a0c:	4a30      	ldr	r2, [pc, #192]	; (28ad0 <_printf_float+0x2dc>)
   28a0e:	4631      	mov	r1, r6
   28a10:	4628      	mov	r0, r5
   28a12:	47b8      	blx	r7
   28a14:	3001      	adds	r0, #1
   28a16:	f43f af48 	beq.w	288aa <_printf_float+0xb6>
   28a1a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   28a1e:	4543      	cmp	r3, r8
   28a20:	db02      	blt.n	28a28 <_printf_float+0x234>
   28a22:	6823      	ldr	r3, [r4, #0]
   28a24:	07d8      	lsls	r0, r3, #31
   28a26:	d50f      	bpl.n	28a48 <_printf_float+0x254>
   28a28:	4631      	mov	r1, r6
   28a2a:	4628      	mov	r0, r5
   28a2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28a30:	47b8      	blx	r7
   28a32:	3001      	adds	r0, #1
   28a34:	f43f af39 	beq.w	288aa <_printf_float+0xb6>
   28a38:	f04f 0900 	mov.w	r9, #0
   28a3c:	f108 38ff 	add.w	r8, r8, #4294967295
   28a40:	f104 0a1a 	add.w	sl, r4, #26
   28a44:	45c8      	cmp	r8, r9
   28a46:	dc09      	bgt.n	28a5c <_printf_float+0x268>
   28a48:	6823      	ldr	r3, [r4, #0]
   28a4a:	079b      	lsls	r3, r3, #30
   28a4c:	f100 8102 	bmi.w	28c54 <_printf_float+0x460>
   28a50:	68e0      	ldr	r0, [r4, #12]
   28a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   28a54:	4298      	cmp	r0, r3
   28a56:	bfb8      	it	lt
   28a58:	4618      	movlt	r0, r3
   28a5a:	e728      	b.n	288ae <_printf_float+0xba>
   28a5c:	2301      	movs	r3, #1
   28a5e:	4652      	mov	r2, sl
   28a60:	4631      	mov	r1, r6
   28a62:	4628      	mov	r0, r5
   28a64:	47b8      	blx	r7
   28a66:	3001      	adds	r0, #1
   28a68:	f43f af1f 	beq.w	288aa <_printf_float+0xb6>
   28a6c:	f109 0901 	add.w	r9, r9, #1
   28a70:	e7e8      	b.n	28a44 <_printf_float+0x250>
   28a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28a74:	2b00      	cmp	r3, #0
   28a76:	dc38      	bgt.n	28aea <_printf_float+0x2f6>
   28a78:	2301      	movs	r3, #1
   28a7a:	4a15      	ldr	r2, [pc, #84]	; (28ad0 <_printf_float+0x2dc>)
   28a7c:	4631      	mov	r1, r6
   28a7e:	4628      	mov	r0, r5
   28a80:	47b8      	blx	r7
   28a82:	3001      	adds	r0, #1
   28a84:	f43f af11 	beq.w	288aa <_printf_float+0xb6>
   28a88:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   28a8c:	ea59 0303 	orrs.w	r3, r9, r3
   28a90:	d102      	bne.n	28a98 <_printf_float+0x2a4>
   28a92:	6823      	ldr	r3, [r4, #0]
   28a94:	07d9      	lsls	r1, r3, #31
   28a96:	d5d7      	bpl.n	28a48 <_printf_float+0x254>
   28a98:	4631      	mov	r1, r6
   28a9a:	4628      	mov	r0, r5
   28a9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28aa0:	47b8      	blx	r7
   28aa2:	3001      	adds	r0, #1
   28aa4:	f43f af01 	beq.w	288aa <_printf_float+0xb6>
   28aa8:	f04f 0a00 	mov.w	sl, #0
   28aac:	f104 0b1a 	add.w	fp, r4, #26
   28ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28ab2:	425b      	negs	r3, r3
   28ab4:	4553      	cmp	r3, sl
   28ab6:	dc0d      	bgt.n	28ad4 <_printf_float+0x2e0>
   28ab8:	464b      	mov	r3, r9
   28aba:	e793      	b.n	289e4 <_printf_float+0x1f0>
   28abc:	7fefffff 	.word	0x7fefffff
   28ac0:	00038c54 	.word	0x00038c54
   28ac4:	00033890 	.word	0x00033890
   28ac8:	00038c58 	.word	0x00038c58
   28acc:	00038c5c 	.word	0x00038c5c
   28ad0:	00037ac9 	.word	0x00037ac9
   28ad4:	2301      	movs	r3, #1
   28ad6:	465a      	mov	r2, fp
   28ad8:	4631      	mov	r1, r6
   28ada:	4628      	mov	r0, r5
   28adc:	47b8      	blx	r7
   28ade:	3001      	adds	r0, #1
   28ae0:	f43f aee3 	beq.w	288aa <_printf_float+0xb6>
   28ae4:	f10a 0a01 	add.w	sl, sl, #1
   28ae8:	e7e2      	b.n	28ab0 <_printf_float+0x2bc>
   28aea:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28aec:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   28af0:	4553      	cmp	r3, sl
   28af2:	bfa8      	it	ge
   28af4:	4653      	movge	r3, sl
   28af6:	2b00      	cmp	r3, #0
   28af8:	4699      	mov	r9, r3
   28afa:	dc36      	bgt.n	28b6a <_printf_float+0x376>
   28afc:	f04f 0b00 	mov.w	fp, #0
   28b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   28b04:	f104 021a 	add.w	r2, r4, #26
   28b08:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28b0a:	930a      	str	r3, [sp, #40]	; 0x28
   28b0c:	eba3 0309 	sub.w	r3, r3, r9
   28b10:	455b      	cmp	r3, fp
   28b12:	dc31      	bgt.n	28b78 <_printf_float+0x384>
   28b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b16:	459a      	cmp	sl, r3
   28b18:	dc3a      	bgt.n	28b90 <_printf_float+0x39c>
   28b1a:	6823      	ldr	r3, [r4, #0]
   28b1c:	07da      	lsls	r2, r3, #31
   28b1e:	d437      	bmi.n	28b90 <_printf_float+0x39c>
   28b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b22:	ebaa 0903 	sub.w	r9, sl, r3
   28b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28b28:	ebaa 0303 	sub.w	r3, sl, r3
   28b2c:	4599      	cmp	r9, r3
   28b2e:	bfa8      	it	ge
   28b30:	4699      	movge	r9, r3
   28b32:	f1b9 0f00 	cmp.w	r9, #0
   28b36:	dc33      	bgt.n	28ba0 <_printf_float+0x3ac>
   28b38:	f04f 0800 	mov.w	r8, #0
   28b3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   28b40:	f104 0b1a 	add.w	fp, r4, #26
   28b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b46:	ebaa 0303 	sub.w	r3, sl, r3
   28b4a:	eba3 0309 	sub.w	r3, r3, r9
   28b4e:	4543      	cmp	r3, r8
   28b50:	f77f af7a 	ble.w	28a48 <_printf_float+0x254>
   28b54:	2301      	movs	r3, #1
   28b56:	465a      	mov	r2, fp
   28b58:	4631      	mov	r1, r6
   28b5a:	4628      	mov	r0, r5
   28b5c:	47b8      	blx	r7
   28b5e:	3001      	adds	r0, #1
   28b60:	f43f aea3 	beq.w	288aa <_printf_float+0xb6>
   28b64:	f108 0801 	add.w	r8, r8, #1
   28b68:	e7ec      	b.n	28b44 <_printf_float+0x350>
   28b6a:	4642      	mov	r2, r8
   28b6c:	4631      	mov	r1, r6
   28b6e:	4628      	mov	r0, r5
   28b70:	47b8      	blx	r7
   28b72:	3001      	adds	r0, #1
   28b74:	d1c2      	bne.n	28afc <_printf_float+0x308>
   28b76:	e698      	b.n	288aa <_printf_float+0xb6>
   28b78:	2301      	movs	r3, #1
   28b7a:	4631      	mov	r1, r6
   28b7c:	4628      	mov	r0, r5
   28b7e:	920a      	str	r2, [sp, #40]	; 0x28
   28b80:	47b8      	blx	r7
   28b82:	3001      	adds	r0, #1
   28b84:	f43f ae91 	beq.w	288aa <_printf_float+0xb6>
   28b88:	f10b 0b01 	add.w	fp, fp, #1
   28b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28b8e:	e7bb      	b.n	28b08 <_printf_float+0x314>
   28b90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28b94:	4631      	mov	r1, r6
   28b96:	4628      	mov	r0, r5
   28b98:	47b8      	blx	r7
   28b9a:	3001      	adds	r0, #1
   28b9c:	d1c0      	bne.n	28b20 <_printf_float+0x32c>
   28b9e:	e684      	b.n	288aa <_printf_float+0xb6>
   28ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28ba2:	464b      	mov	r3, r9
   28ba4:	4631      	mov	r1, r6
   28ba6:	4628      	mov	r0, r5
   28ba8:	4442      	add	r2, r8
   28baa:	47b8      	blx	r7
   28bac:	3001      	adds	r0, #1
   28bae:	d1c3      	bne.n	28b38 <_printf_float+0x344>
   28bb0:	e67b      	b.n	288aa <_printf_float+0xb6>
   28bb2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   28bb6:	f1ba 0f01 	cmp.w	sl, #1
   28bba:	dc01      	bgt.n	28bc0 <_printf_float+0x3cc>
   28bbc:	07db      	lsls	r3, r3, #31
   28bbe:	d536      	bpl.n	28c2e <_printf_float+0x43a>
   28bc0:	2301      	movs	r3, #1
   28bc2:	4642      	mov	r2, r8
   28bc4:	4631      	mov	r1, r6
   28bc6:	4628      	mov	r0, r5
   28bc8:	47b8      	blx	r7
   28bca:	3001      	adds	r0, #1
   28bcc:	f43f ae6d 	beq.w	288aa <_printf_float+0xb6>
   28bd0:	4631      	mov	r1, r6
   28bd2:	4628      	mov	r0, r5
   28bd4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28bd8:	47b8      	blx	r7
   28bda:	3001      	adds	r0, #1
   28bdc:	f43f ae65 	beq.w	288aa <_printf_float+0xb6>
   28be0:	2200      	movs	r2, #0
   28be2:	2300      	movs	r3, #0
   28be4:	f10a 3aff 	add.w	sl, sl, #4294967295
   28be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   28bec:	f7e0 f9f0 	bl	8fd0 <__aeabi_dcmpeq>
   28bf0:	b9c0      	cbnz	r0, 28c24 <_printf_float+0x430>
   28bf2:	4653      	mov	r3, sl
   28bf4:	f108 0201 	add.w	r2, r8, #1
   28bf8:	4631      	mov	r1, r6
   28bfa:	4628      	mov	r0, r5
   28bfc:	47b8      	blx	r7
   28bfe:	3001      	adds	r0, #1
   28c00:	d10c      	bne.n	28c1c <_printf_float+0x428>
   28c02:	e652      	b.n	288aa <_printf_float+0xb6>
   28c04:	2301      	movs	r3, #1
   28c06:	465a      	mov	r2, fp
   28c08:	4631      	mov	r1, r6
   28c0a:	4628      	mov	r0, r5
   28c0c:	47b8      	blx	r7
   28c0e:	3001      	adds	r0, #1
   28c10:	f43f ae4b 	beq.w	288aa <_printf_float+0xb6>
   28c14:	f108 0801 	add.w	r8, r8, #1
   28c18:	45d0      	cmp	r8, sl
   28c1a:	dbf3      	blt.n	28c04 <_printf_float+0x410>
   28c1c:	464b      	mov	r3, r9
   28c1e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   28c22:	e6e0      	b.n	289e6 <_printf_float+0x1f2>
   28c24:	f04f 0800 	mov.w	r8, #0
   28c28:	f104 0b1a 	add.w	fp, r4, #26
   28c2c:	e7f4      	b.n	28c18 <_printf_float+0x424>
   28c2e:	2301      	movs	r3, #1
   28c30:	4642      	mov	r2, r8
   28c32:	e7e1      	b.n	28bf8 <_printf_float+0x404>
   28c34:	2301      	movs	r3, #1
   28c36:	464a      	mov	r2, r9
   28c38:	4631      	mov	r1, r6
   28c3a:	4628      	mov	r0, r5
   28c3c:	47b8      	blx	r7
   28c3e:	3001      	adds	r0, #1
   28c40:	f43f ae33 	beq.w	288aa <_printf_float+0xb6>
   28c44:	f108 0801 	add.w	r8, r8, #1
   28c48:	68e3      	ldr	r3, [r4, #12]
   28c4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   28c4c:	1a5b      	subs	r3, r3, r1
   28c4e:	4543      	cmp	r3, r8
   28c50:	dcf0      	bgt.n	28c34 <_printf_float+0x440>
   28c52:	e6fd      	b.n	28a50 <_printf_float+0x25c>
   28c54:	f04f 0800 	mov.w	r8, #0
   28c58:	f104 0919 	add.w	r9, r4, #25
   28c5c:	e7f4      	b.n	28c48 <_printf_float+0x454>
   28c5e:	bf00      	nop

00028c60 <_printf_i>:
   28c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   28c64:	7e0f      	ldrb	r7, [r1, #24]
   28c66:	4691      	mov	r9, r2
   28c68:	4680      	mov	r8, r0
   28c6a:	460c      	mov	r4, r1
   28c6c:	2f78      	cmp	r7, #120	; 0x78
   28c6e:	469a      	mov	sl, r3
   28c70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   28c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
   28c76:	d807      	bhi.n	28c88 <_printf_i+0x28>
   28c78:	2f62      	cmp	r7, #98	; 0x62
   28c7a:	d80a      	bhi.n	28c92 <_printf_i+0x32>
   28c7c:	2f00      	cmp	r7, #0
   28c7e:	f000 80e0 	beq.w	28e42 <_printf_i+0x1e2>
   28c82:	2f58      	cmp	r7, #88	; 0x58
   28c84:	f000 80bb 	beq.w	28dfe <_printf_i+0x19e>
   28c88:	f104 0642 	add.w	r6, r4, #66	; 0x42
   28c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   28c90:	e03a      	b.n	28d08 <_printf_i+0xa8>
   28c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   28c96:	2b15      	cmp	r3, #21
   28c98:	d8f6      	bhi.n	28c88 <_printf_i+0x28>
   28c9a:	a101      	add	r1, pc, #4	; (adr r1, 28ca0 <_printf_i+0x40>)
   28c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   28ca0:	00028cf9 	.word	0x00028cf9
   28ca4:	00028d0d 	.word	0x00028d0d
   28ca8:	00028c89 	.word	0x00028c89
   28cac:	00028c89 	.word	0x00028c89
   28cb0:	00028c89 	.word	0x00028c89
   28cb4:	00028c89 	.word	0x00028c89
   28cb8:	00028d0d 	.word	0x00028d0d
   28cbc:	00028c89 	.word	0x00028c89
   28cc0:	00028c89 	.word	0x00028c89
   28cc4:	00028c89 	.word	0x00028c89
   28cc8:	00028c89 	.word	0x00028c89
   28ccc:	00028e29 	.word	0x00028e29
   28cd0:	00028d9d 	.word	0x00028d9d
   28cd4:	00028ddf 	.word	0x00028ddf
   28cd8:	00028c89 	.word	0x00028c89
   28cdc:	00028c89 	.word	0x00028c89
   28ce0:	00028e4b 	.word	0x00028e4b
   28ce4:	00028c89 	.word	0x00028c89
   28ce8:	00028d9d 	.word	0x00028d9d
   28cec:	00028c89 	.word	0x00028c89
   28cf0:	00028c89 	.word	0x00028c89
   28cf4:	00028de7 	.word	0x00028de7
   28cf8:	682b      	ldr	r3, [r5, #0]
   28cfa:	f104 0642 	add.w	r6, r4, #66	; 0x42
   28cfe:	1d1a      	adds	r2, r3, #4
   28d00:	681b      	ldr	r3, [r3, #0]
   28d02:	602a      	str	r2, [r5, #0]
   28d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   28d08:	2301      	movs	r3, #1
   28d0a:	e0ab      	b.n	28e64 <_printf_i+0x204>
   28d0c:	6823      	ldr	r3, [r4, #0]
   28d0e:	6829      	ldr	r1, [r5, #0]
   28d10:	061f      	lsls	r7, r3, #24
   28d12:	f101 0004 	add.w	r0, r1, #4
   28d16:	6028      	str	r0, [r5, #0]
   28d18:	d501      	bpl.n	28d1e <_printf_i+0xbe>
   28d1a:	680d      	ldr	r5, [r1, #0]
   28d1c:	e003      	b.n	28d26 <_printf_i+0xc6>
   28d1e:	065e      	lsls	r6, r3, #25
   28d20:	d5fb      	bpl.n	28d1a <_printf_i+0xba>
   28d22:	f9b1 5000 	ldrsh.w	r5, [r1]
   28d26:	2d00      	cmp	r5, #0
   28d28:	6861      	ldr	r1, [r4, #4]
   28d2a:	da7a      	bge.n	28e22 <_printf_i+0x1c2>
   28d2c:	202d      	movs	r0, #45	; 0x2d
   28d2e:	2900      	cmp	r1, #0
   28d30:	60a1      	str	r1, [r4, #8]
   28d32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   28d36:	da2d      	bge.n	28d94 <_printf_i+0x134>
   28d38:	426d      	negs	r5, r5
   28d3a:	485e      	ldr	r0, [pc, #376]	; (28eb4 <_printf_i+0x254>)
   28d3c:	230a      	movs	r3, #10
   28d3e:	4616      	mov	r6, r2
   28d40:	fbb5 f1f3 	udiv	r1, r5, r3
   28d44:	fb03 5711 	mls	r7, r3, r1, r5
   28d48:	5dc7      	ldrb	r7, [r0, r7]
   28d4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
   28d4e:	462f      	mov	r7, r5
   28d50:	460d      	mov	r5, r1
   28d52:	42bb      	cmp	r3, r7
   28d54:	d9f4      	bls.n	28d40 <_printf_i+0xe0>
   28d56:	2b08      	cmp	r3, #8
   28d58:	d10b      	bne.n	28d72 <_printf_i+0x112>
   28d5a:	6823      	ldr	r3, [r4, #0]
   28d5c:	07df      	lsls	r7, r3, #31
   28d5e:	d508      	bpl.n	28d72 <_printf_i+0x112>
   28d60:	6923      	ldr	r3, [r4, #16]
   28d62:	6861      	ldr	r1, [r4, #4]
   28d64:	4299      	cmp	r1, r3
   28d66:	bfde      	ittt	le
   28d68:	2330      	movle	r3, #48	; 0x30
   28d6a:	f806 3c01 	strble.w	r3, [r6, #-1]
   28d6e:	f106 36ff 	addle.w	r6, r6, #4294967295
   28d72:	1b92      	subs	r2, r2, r6
   28d74:	6122      	str	r2, [r4, #16]
   28d76:	464b      	mov	r3, r9
   28d78:	aa03      	add	r2, sp, #12
   28d7a:	4621      	mov	r1, r4
   28d7c:	4640      	mov	r0, r8
   28d7e:	f8cd a000 	str.w	sl, [sp]
   28d82:	f007 fcd0 	bl	30726 <_printf_common>
   28d86:	3001      	adds	r0, #1
   28d88:	d171      	bne.n	28e6e <_printf_i+0x20e>
   28d8a:	f04f 30ff 	mov.w	r0, #4294967295
   28d8e:	b004      	add	sp, #16
   28d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28d94:	f023 0304 	bic.w	r3, r3, #4
   28d98:	6023      	str	r3, [r4, #0]
   28d9a:	e7cd      	b.n	28d38 <_printf_i+0xd8>
   28d9c:	682b      	ldr	r3, [r5, #0]
   28d9e:	6820      	ldr	r0, [r4, #0]
   28da0:	1d19      	adds	r1, r3, #4
   28da2:	6029      	str	r1, [r5, #0]
   28da4:	0605      	lsls	r5, r0, #24
   28da6:	d501      	bpl.n	28dac <_printf_i+0x14c>
   28da8:	681d      	ldr	r5, [r3, #0]
   28daa:	e002      	b.n	28db2 <_printf_i+0x152>
   28dac:	0641      	lsls	r1, r0, #25
   28dae:	d5fb      	bpl.n	28da8 <_printf_i+0x148>
   28db0:	881d      	ldrh	r5, [r3, #0]
   28db2:	2f6f      	cmp	r7, #111	; 0x6f
   28db4:	483f      	ldr	r0, [pc, #252]	; (28eb4 <_printf_i+0x254>)
   28db6:	bf14      	ite	ne
   28db8:	230a      	movne	r3, #10
   28dba:	2308      	moveq	r3, #8
   28dbc:	2100      	movs	r1, #0
   28dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   28dc2:	6866      	ldr	r6, [r4, #4]
   28dc4:	2e00      	cmp	r6, #0
   28dc6:	60a6      	str	r6, [r4, #8]
   28dc8:	dbb9      	blt.n	28d3e <_printf_i+0xde>
   28dca:	6821      	ldr	r1, [r4, #0]
   28dcc:	f021 0104 	bic.w	r1, r1, #4
   28dd0:	6021      	str	r1, [r4, #0]
   28dd2:	2d00      	cmp	r5, #0
   28dd4:	d1b3      	bne.n	28d3e <_printf_i+0xde>
   28dd6:	2e00      	cmp	r6, #0
   28dd8:	d1b1      	bne.n	28d3e <_printf_i+0xde>
   28dda:	4616      	mov	r6, r2
   28ddc:	e7bb      	b.n	28d56 <_printf_i+0xf6>
   28dde:	6823      	ldr	r3, [r4, #0]
   28de0:	f043 0320 	orr.w	r3, r3, #32
   28de4:	6023      	str	r3, [r4, #0]
   28de6:	2778      	movs	r7, #120	; 0x78
   28de8:	4833      	ldr	r0, [pc, #204]	; (28eb8 <_printf_i+0x258>)
   28dea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   28dee:	6829      	ldr	r1, [r5, #0]
   28df0:	6823      	ldr	r3, [r4, #0]
   28df2:	1d0e      	adds	r6, r1, #4
   28df4:	602e      	str	r6, [r5, #0]
   28df6:	061e      	lsls	r6, r3, #24
   28df8:	d503      	bpl.n	28e02 <_printf_i+0x1a2>
   28dfa:	680d      	ldr	r5, [r1, #0]
   28dfc:	e004      	b.n	28e08 <_printf_i+0x1a8>
   28dfe:	482d      	ldr	r0, [pc, #180]	; (28eb4 <_printf_i+0x254>)
   28e00:	e7f3      	b.n	28dea <_printf_i+0x18a>
   28e02:	065d      	lsls	r5, r3, #25
   28e04:	d5f9      	bpl.n	28dfa <_printf_i+0x19a>
   28e06:	880d      	ldrh	r5, [r1, #0]
   28e08:	07d9      	lsls	r1, r3, #31
   28e0a:	bf44      	itt	mi
   28e0c:	f043 0320 	orrmi.w	r3, r3, #32
   28e10:	6023      	strmi	r3, [r4, #0]
   28e12:	b10d      	cbz	r5, 28e18 <_printf_i+0x1b8>
   28e14:	2310      	movs	r3, #16
   28e16:	e7d1      	b.n	28dbc <_printf_i+0x15c>
   28e18:	6823      	ldr	r3, [r4, #0]
   28e1a:	f023 0320 	bic.w	r3, r3, #32
   28e1e:	6023      	str	r3, [r4, #0]
   28e20:	e7f8      	b.n	28e14 <_printf_i+0x1b4>
   28e22:	4824      	ldr	r0, [pc, #144]	; (28eb4 <_printf_i+0x254>)
   28e24:	230a      	movs	r3, #10
   28e26:	e7cc      	b.n	28dc2 <_printf_i+0x162>
   28e28:	682b      	ldr	r3, [r5, #0]
   28e2a:	6826      	ldr	r6, [r4, #0]
   28e2c:	1d18      	adds	r0, r3, #4
   28e2e:	6961      	ldr	r1, [r4, #20]
   28e30:	6028      	str	r0, [r5, #0]
   28e32:	0635      	lsls	r5, r6, #24
   28e34:	681b      	ldr	r3, [r3, #0]
   28e36:	d501      	bpl.n	28e3c <_printf_i+0x1dc>
   28e38:	6019      	str	r1, [r3, #0]
   28e3a:	e002      	b.n	28e42 <_printf_i+0x1e2>
   28e3c:	0670      	lsls	r0, r6, #25
   28e3e:	d5fb      	bpl.n	28e38 <_printf_i+0x1d8>
   28e40:	8019      	strh	r1, [r3, #0]
   28e42:	2300      	movs	r3, #0
   28e44:	4616      	mov	r6, r2
   28e46:	6123      	str	r3, [r4, #16]
   28e48:	e795      	b.n	28d76 <_printf_i+0x116>
   28e4a:	682b      	ldr	r3, [r5, #0]
   28e4c:	2100      	movs	r1, #0
   28e4e:	1d1a      	adds	r2, r3, #4
   28e50:	602a      	str	r2, [r5, #0]
   28e52:	681e      	ldr	r6, [r3, #0]
   28e54:	6862      	ldr	r2, [r4, #4]
   28e56:	4630      	mov	r0, r6
   28e58:	f007 fb57 	bl	3050a <memchr>
   28e5c:	b108      	cbz	r0, 28e62 <_printf_i+0x202>
   28e5e:	1b80      	subs	r0, r0, r6
   28e60:	6060      	str	r0, [r4, #4]
   28e62:	6863      	ldr	r3, [r4, #4]
   28e64:	6123      	str	r3, [r4, #16]
   28e66:	2300      	movs	r3, #0
   28e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   28e6c:	e783      	b.n	28d76 <_printf_i+0x116>
   28e6e:	6923      	ldr	r3, [r4, #16]
   28e70:	4632      	mov	r2, r6
   28e72:	4649      	mov	r1, r9
   28e74:	4640      	mov	r0, r8
   28e76:	47d0      	blx	sl
   28e78:	3001      	adds	r0, #1
   28e7a:	d086      	beq.n	28d8a <_printf_i+0x12a>
   28e7c:	6823      	ldr	r3, [r4, #0]
   28e7e:	079b      	lsls	r3, r3, #30
   28e80:	d414      	bmi.n	28eac <_printf_i+0x24c>
   28e82:	68e0      	ldr	r0, [r4, #12]
   28e84:	9b03      	ldr	r3, [sp, #12]
   28e86:	4298      	cmp	r0, r3
   28e88:	bfb8      	it	lt
   28e8a:	4618      	movlt	r0, r3
   28e8c:	e77f      	b.n	28d8e <_printf_i+0x12e>
   28e8e:	2301      	movs	r3, #1
   28e90:	4632      	mov	r2, r6
   28e92:	4649      	mov	r1, r9
   28e94:	4640      	mov	r0, r8
   28e96:	47d0      	blx	sl
   28e98:	3001      	adds	r0, #1
   28e9a:	f43f af76 	beq.w	28d8a <_printf_i+0x12a>
   28e9e:	3501      	adds	r5, #1
   28ea0:	68e3      	ldr	r3, [r4, #12]
   28ea2:	9903      	ldr	r1, [sp, #12]
   28ea4:	1a5b      	subs	r3, r3, r1
   28ea6:	42ab      	cmp	r3, r5
   28ea8:	dcf1      	bgt.n	28e8e <_printf_i+0x22e>
   28eaa:	e7ea      	b.n	28e82 <_printf_i+0x222>
   28eac:	2500      	movs	r5, #0
   28eae:	f104 0619 	add.w	r6, r4, #25
   28eb2:	e7f5      	b.n	28ea0 <_printf_i+0x240>
   28eb4:	00038c60 	.word	0x00038c60
   28eb8:	00038c71 	.word	0x00038c71

00028ebc <iprintf>:
   28ebc:	b40f      	push	{r0, r1, r2, r3}
   28ebe:	4b0a      	ldr	r3, [pc, #40]	; (28ee8 <iprintf+0x2c>)
   28ec0:	b513      	push	{r0, r1, r4, lr}
   28ec2:	681c      	ldr	r4, [r3, #0]
   28ec4:	b124      	cbz	r4, 28ed0 <iprintf+0x14>
   28ec6:	69a3      	ldr	r3, [r4, #24]
   28ec8:	b913      	cbnz	r3, 28ed0 <iprintf+0x14>
   28eca:	4620      	mov	r0, r4
   28ecc:	f000 f8fa 	bl	290c4 <__sinit>
   28ed0:	ab05      	add	r3, sp, #20
   28ed2:	9a04      	ldr	r2, [sp, #16]
   28ed4:	68a1      	ldr	r1, [r4, #8]
   28ed6:	4620      	mov	r0, r4
   28ed8:	9301      	str	r3, [sp, #4]
   28eda:	f000 fcb1 	bl	29840 <_vfiprintf_r>
   28ede:	b002      	add	sp, #8
   28ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28ee4:	b004      	add	sp, #16
   28ee6:	4770      	bx	lr
   28ee8:	20008754 	.word	0x20008754

00028eec <_sbrk_r>:
   28eec:	b538      	push	{r3, r4, r5, lr}
   28eee:	2300      	movs	r3, #0
   28ef0:	4d05      	ldr	r5, [pc, #20]	; (28f08 <_sbrk_r+0x1c>)
   28ef2:	4604      	mov	r4, r0
   28ef4:	4608      	mov	r0, r1
   28ef6:	602b      	str	r3, [r5, #0]
   28ef8:	f7e8 fd14 	bl	11924 <_sbrk>
   28efc:	1c43      	adds	r3, r0, #1
   28efe:	d102      	bne.n	28f06 <_sbrk_r+0x1a>
   28f00:	682b      	ldr	r3, [r5, #0]
   28f02:	b103      	cbz	r3, 28f06 <_sbrk_r+0x1a>
   28f04:	6023      	str	r3, [r4, #0]
   28f06:	bd38      	pop	{r3, r4, r5, pc}
   28f08:	20021aec 	.word	0x20021aec

00028f0c <_strtoul_l.constprop.0>:
   28f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f10:	4686      	mov	lr, r0
   28f12:	460d      	mov	r5, r1
   28f14:	4e35      	ldr	r6, [pc, #212]	; (28fec <_strtoul_l.constprop.0+0xe0>)
   28f16:	4628      	mov	r0, r5
   28f18:	f815 4b01 	ldrb.w	r4, [r5], #1
   28f1c:	5d37      	ldrb	r7, [r6, r4]
   28f1e:	f017 0708 	ands.w	r7, r7, #8
   28f22:	d1f8      	bne.n	28f16 <_strtoul_l.constprop.0+0xa>
   28f24:	2c2d      	cmp	r4, #45	; 0x2d
   28f26:	d126      	bne.n	28f76 <_strtoul_l.constprop.0+0x6a>
   28f28:	782c      	ldrb	r4, [r5, #0]
   28f2a:	2701      	movs	r7, #1
   28f2c:	1c85      	adds	r5, r0, #2
   28f2e:	bb3b      	cbnz	r3, 28f80 <_strtoul_l.constprop.0+0x74>
   28f30:	2c30      	cmp	r4, #48	; 0x30
   28f32:	d032      	beq.n	28f9a <_strtoul_l.constprop.0+0x8e>
   28f34:	230a      	movs	r3, #10
   28f36:	f04f 38ff 	mov.w	r8, #4294967295
   28f3a:	2600      	movs	r6, #0
   28f3c:	fbb8 f8f3 	udiv	r8, r8, r3
   28f40:	fb03 f908 	mul.w	r9, r3, r8
   28f44:	4630      	mov	r0, r6
   28f46:	ea6f 0909 	mvn.w	r9, r9
   28f4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   28f4e:	f1bc 0f09 	cmp.w	ip, #9
   28f52:	d829      	bhi.n	28fa8 <_strtoul_l.constprop.0+0x9c>
   28f54:	4664      	mov	r4, ip
   28f56:	42a3      	cmp	r3, r4
   28f58:	dd37      	ble.n	28fca <_strtoul_l.constprop.0+0xbe>
   28f5a:	f1b6 3fff 	cmp.w	r6, #4294967295
   28f5e:	d007      	beq.n	28f70 <_strtoul_l.constprop.0+0x64>
   28f60:	4580      	cmp	r8, r0
   28f62:	d32f      	bcc.n	28fc4 <_strtoul_l.constprop.0+0xb8>
   28f64:	d101      	bne.n	28f6a <_strtoul_l.constprop.0+0x5e>
   28f66:	45a1      	cmp	r9, r4
   28f68:	db2c      	blt.n	28fc4 <_strtoul_l.constprop.0+0xb8>
   28f6a:	fb00 4003 	mla	r0, r0, r3, r4
   28f6e:	2601      	movs	r6, #1
   28f70:	f815 4b01 	ldrb.w	r4, [r5], #1
   28f74:	e7e9      	b.n	28f4a <_strtoul_l.constprop.0+0x3e>
   28f76:	2c2b      	cmp	r4, #43	; 0x2b
   28f78:	bf04      	itt	eq
   28f7a:	782c      	ldrbeq	r4, [r5, #0]
   28f7c:	1c85      	addeq	r5, r0, #2
   28f7e:	e7d6      	b.n	28f2e <_strtoul_l.constprop.0+0x22>
   28f80:	2b10      	cmp	r3, #16
   28f82:	d1d8      	bne.n	28f36 <_strtoul_l.constprop.0+0x2a>
   28f84:	2c30      	cmp	r4, #48	; 0x30
   28f86:	d1d6      	bne.n	28f36 <_strtoul_l.constprop.0+0x2a>
   28f88:	7828      	ldrb	r0, [r5, #0]
   28f8a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   28f8e:	2858      	cmp	r0, #88	; 0x58
   28f90:	d1d1      	bne.n	28f36 <_strtoul_l.constprop.0+0x2a>
   28f92:	786c      	ldrb	r4, [r5, #1]
   28f94:	2310      	movs	r3, #16
   28f96:	3502      	adds	r5, #2
   28f98:	e7cd      	b.n	28f36 <_strtoul_l.constprop.0+0x2a>
   28f9a:	782b      	ldrb	r3, [r5, #0]
   28f9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28fa0:	2b58      	cmp	r3, #88	; 0x58
   28fa2:	d0f6      	beq.n	28f92 <_strtoul_l.constprop.0+0x86>
   28fa4:	2308      	movs	r3, #8
   28fa6:	e7c6      	b.n	28f36 <_strtoul_l.constprop.0+0x2a>
   28fa8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   28fac:	f1bc 0f19 	cmp.w	ip, #25
   28fb0:	d801      	bhi.n	28fb6 <_strtoul_l.constprop.0+0xaa>
   28fb2:	3c37      	subs	r4, #55	; 0x37
   28fb4:	e7cf      	b.n	28f56 <_strtoul_l.constprop.0+0x4a>
   28fb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   28fba:	f1bc 0f19 	cmp.w	ip, #25
   28fbe:	d804      	bhi.n	28fca <_strtoul_l.constprop.0+0xbe>
   28fc0:	3c57      	subs	r4, #87	; 0x57
   28fc2:	e7c8      	b.n	28f56 <_strtoul_l.constprop.0+0x4a>
   28fc4:	f04f 36ff 	mov.w	r6, #4294967295
   28fc8:	e7d2      	b.n	28f70 <_strtoul_l.constprop.0+0x64>
   28fca:	1c73      	adds	r3, r6, #1
   28fcc:	d106      	bne.n	28fdc <_strtoul_l.constprop.0+0xd0>
   28fce:	2322      	movs	r3, #34	; 0x22
   28fd0:	4630      	mov	r0, r6
   28fd2:	f8ce 3000 	str.w	r3, [lr]
   28fd6:	b932      	cbnz	r2, 28fe6 <_strtoul_l.constprop.0+0xda>
   28fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28fdc:	b107      	cbz	r7, 28fe0 <_strtoul_l.constprop.0+0xd4>
   28fde:	4240      	negs	r0, r0
   28fe0:	2a00      	cmp	r2, #0
   28fe2:	d0f9      	beq.n	28fd8 <_strtoul_l.constprop.0+0xcc>
   28fe4:	b106      	cbz	r6, 28fe8 <_strtoul_l.constprop.0+0xdc>
   28fe6:	1e69      	subs	r1, r5, #1
   28fe8:	6011      	str	r1, [r2, #0]
   28fea:	e7f5      	b.n	28fd8 <_strtoul_l.constprop.0+0xcc>
   28fec:	00038b54 	.word	0x00038b54

00028ff0 <strtoul>:
   28ff0:	4613      	mov	r3, r2
   28ff2:	460a      	mov	r2, r1
   28ff4:	4601      	mov	r1, r0
   28ff6:	4802      	ldr	r0, [pc, #8]	; (29000 <strtoul+0x10>)
   28ff8:	6800      	ldr	r0, [r0, #0]
   28ffa:	f7ff bf87 	b.w	28f0c <_strtoul_l.constprop.0>
   28ffe:	bf00      	nop
   29000:	20008754 	.word	0x20008754

00029004 <__assert_func>:
   29004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29006:	4614      	mov	r4, r2
   29008:	461a      	mov	r2, r3
   2900a:	4b09      	ldr	r3, [pc, #36]	; (29030 <__assert_func+0x2c>)
   2900c:	4605      	mov	r5, r0
   2900e:	681b      	ldr	r3, [r3, #0]
   29010:	68d8      	ldr	r0, [r3, #12]
   29012:	b954      	cbnz	r4, 2902a <__assert_func+0x26>
   29014:	4b07      	ldr	r3, [pc, #28]	; (29034 <__assert_func+0x30>)
   29016:	461c      	mov	r4, r3
   29018:	9100      	str	r1, [sp, #0]
   2901a:	4907      	ldr	r1, [pc, #28]	; (29038 <__assert_func+0x34>)
   2901c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   29020:	462b      	mov	r3, r5
   29022:	f000 f8cd 	bl	291c0 <fiprintf>
   29026:	f007 fded 	bl	30c04 <abort>
   2902a:	4b04      	ldr	r3, [pc, #16]	; (2903c <__assert_func+0x38>)
   2902c:	e7f4      	b.n	29018 <__assert_func+0x14>
   2902e:	bf00      	nop
   29030:	20008754 	.word	0x20008754
   29034:	0003688b 	.word	0x0003688b
   29038:	00038c8f 	.word	0x00038c8f
   2903c:	00038c82 	.word	0x00038c82

00029040 <std>:
   29040:	2300      	movs	r3, #0
   29042:	b510      	push	{r4, lr}
   29044:	4604      	mov	r4, r0
   29046:	6083      	str	r3, [r0, #8]
   29048:	8181      	strh	r1, [r0, #12]
   2904a:	4619      	mov	r1, r3
   2904c:	6643      	str	r3, [r0, #100]	; 0x64
   2904e:	81c2      	strh	r2, [r0, #14]
   29050:	2208      	movs	r2, #8
   29052:	6183      	str	r3, [r0, #24]
   29054:	e9c0 3300 	strd	r3, r3, [r0]
   29058:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2905c:	305c      	adds	r0, #92	; 0x5c
   2905e:	f007 faac 	bl	305ba <memset>
   29062:	4b05      	ldr	r3, [pc, #20]	; (29078 <std+0x38>)
   29064:	6224      	str	r4, [r4, #32]
   29066:	6263      	str	r3, [r4, #36]	; 0x24
   29068:	4b04      	ldr	r3, [pc, #16]	; (2907c <std+0x3c>)
   2906a:	62a3      	str	r3, [r4, #40]	; 0x28
   2906c:	4b04      	ldr	r3, [pc, #16]	; (29080 <std+0x40>)
   2906e:	62e3      	str	r3, [r4, #44]	; 0x2c
   29070:	4b04      	ldr	r3, [pc, #16]	; (29084 <std+0x44>)
   29072:	6323      	str	r3, [r4, #48]	; 0x30
   29074:	bd10      	pop	{r4, pc}
   29076:	bf00      	nop
   29078:	00030b7f 	.word	0x00030b7f
   2907c:	00030ba1 	.word	0x00030ba1
   29080:	00030bd9 	.word	0x00030bd9
   29084:	00030bfd 	.word	0x00030bfd

00029088 <_cleanup_r>:
   29088:	4901      	ldr	r1, [pc, #4]	; (29090 <_cleanup_r+0x8>)
   2908a:	f007 bcc8 	b.w	30a1e <_fwalk_reent>
   2908e:	bf00      	nop
   29090:	00029c59 	.word	0x00029c59

00029094 <__sfp_lock_acquire>:
   29094:	4801      	ldr	r0, [pc, #4]	; (2909c <__sfp_lock_acquire+0x8>)
   29096:	f7e8 bc89 	b.w	119ac <__retarget_lock_acquire_recursive>
   2909a:	bf00      	nop
   2909c:	20008b40 	.word	0x20008b40

000290a0 <__sfp_lock_release>:
   290a0:	4801      	ldr	r0, [pc, #4]	; (290a8 <__sfp_lock_release+0x8>)
   290a2:	f7e8 bc9f 	b.w	119e4 <__retarget_lock_release_recursive>
   290a6:	bf00      	nop
   290a8:	20008b40 	.word	0x20008b40

000290ac <__sinit_lock_acquire>:
   290ac:	4801      	ldr	r0, [pc, #4]	; (290b4 <__sinit_lock_acquire+0x8>)
   290ae:	f7e8 bc7d 	b.w	119ac <__retarget_lock_acquire_recursive>
   290b2:	bf00      	nop
   290b4:	20008b54 	.word	0x20008b54

000290b8 <__sinit_lock_release>:
   290b8:	4801      	ldr	r0, [pc, #4]	; (290c0 <__sinit_lock_release+0x8>)
   290ba:	f7e8 bc93 	b.w	119e4 <__retarget_lock_release_recursive>
   290be:	bf00      	nop
   290c0:	20008b54 	.word	0x20008b54

000290c4 <__sinit>:
   290c4:	b510      	push	{r4, lr}
   290c6:	4604      	mov	r4, r0
   290c8:	f7ff fff0 	bl	290ac <__sinit_lock_acquire>
   290cc:	69a3      	ldr	r3, [r4, #24]
   290ce:	b11b      	cbz	r3, 290d8 <__sinit+0x14>
   290d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   290d4:	f7ff bff0 	b.w	290b8 <__sinit_lock_release>
   290d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   290dc:	6523      	str	r3, [r4, #80]	; 0x50
   290de:	4620      	mov	r0, r4
   290e0:	4b12      	ldr	r3, [pc, #72]	; (2912c <__sinit+0x68>)
   290e2:	4a13      	ldr	r2, [pc, #76]	; (29130 <__sinit+0x6c>)
   290e4:	681b      	ldr	r3, [r3, #0]
   290e6:	62a2      	str	r2, [r4, #40]	; 0x28
   290e8:	42a3      	cmp	r3, r4
   290ea:	bf04      	itt	eq
   290ec:	2301      	moveq	r3, #1
   290ee:	61a3      	streq	r3, [r4, #24]
   290f0:	f000 f820 	bl	29134 <__sfp>
   290f4:	6060      	str	r0, [r4, #4]
   290f6:	4620      	mov	r0, r4
   290f8:	f000 f81c 	bl	29134 <__sfp>
   290fc:	60a0      	str	r0, [r4, #8]
   290fe:	4620      	mov	r0, r4
   29100:	f000 f818 	bl	29134 <__sfp>
   29104:	2200      	movs	r2, #0
   29106:	2104      	movs	r1, #4
   29108:	60e0      	str	r0, [r4, #12]
   2910a:	6860      	ldr	r0, [r4, #4]
   2910c:	f7ff ff98 	bl	29040 <std>
   29110:	2201      	movs	r2, #1
   29112:	2109      	movs	r1, #9
   29114:	68a0      	ldr	r0, [r4, #8]
   29116:	f7ff ff93 	bl	29040 <std>
   2911a:	2202      	movs	r2, #2
   2911c:	2112      	movs	r1, #18
   2911e:	68e0      	ldr	r0, [r4, #12]
   29120:	f7ff ff8e 	bl	29040 <std>
   29124:	2301      	movs	r3, #1
   29126:	61a3      	str	r3, [r4, #24]
   29128:	e7d2      	b.n	290d0 <__sinit+0xc>
   2912a:	bf00      	nop
   2912c:	00032534 	.word	0x00032534
   29130:	00029089 	.word	0x00029089

00029134 <__sfp>:
   29134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29136:	4607      	mov	r7, r0
   29138:	f7ff ffac 	bl	29094 <__sfp_lock_acquire>
   2913c:	4b1e      	ldr	r3, [pc, #120]	; (291b8 <__sfp+0x84>)
   2913e:	681e      	ldr	r6, [r3, #0]
   29140:	69b3      	ldr	r3, [r6, #24]
   29142:	b913      	cbnz	r3, 2914a <__sfp+0x16>
   29144:	4630      	mov	r0, r6
   29146:	f7ff ffbd 	bl	290c4 <__sinit>
   2914a:	3648      	adds	r6, #72	; 0x48
   2914c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   29150:	3b01      	subs	r3, #1
   29152:	d503      	bpl.n	2915c <__sfp+0x28>
   29154:	6833      	ldr	r3, [r6, #0]
   29156:	b30b      	cbz	r3, 2919c <__sfp+0x68>
   29158:	6836      	ldr	r6, [r6, #0]
   2915a:	e7f7      	b.n	2914c <__sfp+0x18>
   2915c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   29160:	b9d5      	cbnz	r5, 29198 <__sfp+0x64>
   29162:	4b16      	ldr	r3, [pc, #88]	; (291bc <__sfp+0x88>)
   29164:	f104 0058 	add.w	r0, r4, #88	; 0x58
   29168:	6665      	str	r5, [r4, #100]	; 0x64
   2916a:	60e3      	str	r3, [r4, #12]
   2916c:	f7e8 fbee 	bl	1194c <__retarget_lock_init_recursive>
   29170:	f7ff ff96 	bl	290a0 <__sfp_lock_release>
   29174:	2208      	movs	r2, #8
   29176:	4629      	mov	r1, r5
   29178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2917c:	6025      	str	r5, [r4, #0]
   2917e:	61a5      	str	r5, [r4, #24]
   29180:	e9c4 5501 	strd	r5, r5, [r4, #4]
   29184:	e9c4 5504 	strd	r5, r5, [r4, #16]
   29188:	f007 fa17 	bl	305ba <memset>
   2918c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   29190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   29194:	4620      	mov	r0, r4
   29196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29198:	3468      	adds	r4, #104	; 0x68
   2919a:	e7d9      	b.n	29150 <__sfp+0x1c>
   2919c:	2104      	movs	r1, #4
   2919e:	4638      	mov	r0, r7
   291a0:	f007 fc27 	bl	309f2 <__sfmoreglue>
   291a4:	4604      	mov	r4, r0
   291a6:	6030      	str	r0, [r6, #0]
   291a8:	2800      	cmp	r0, #0
   291aa:	d1d5      	bne.n	29158 <__sfp+0x24>
   291ac:	f7ff ff78 	bl	290a0 <__sfp_lock_release>
   291b0:	230c      	movs	r3, #12
   291b2:	603b      	str	r3, [r7, #0]
   291b4:	e7ee      	b.n	29194 <__sfp+0x60>
   291b6:	bf00      	nop
   291b8:	00032534 	.word	0x00032534
   291bc:	ffff0001 	.word	0xffff0001

000291c0 <fiprintf>:
   291c0:	b40e      	push	{r1, r2, r3}
   291c2:	b503      	push	{r0, r1, lr}
   291c4:	ab03      	add	r3, sp, #12
   291c6:	4601      	mov	r1, r0
   291c8:	4805      	ldr	r0, [pc, #20]	; (291e0 <fiprintf+0x20>)
   291ca:	f853 2b04 	ldr.w	r2, [r3], #4
   291ce:	6800      	ldr	r0, [r0, #0]
   291d0:	9301      	str	r3, [sp, #4]
   291d2:	f000 fb35 	bl	29840 <_vfiprintf_r>
   291d6:	b002      	add	sp, #8
   291d8:	f85d eb04 	ldr.w	lr, [sp], #4
   291dc:	b003      	add	sp, #12
   291de:	4770      	bx	lr
   291e0:	20008754 	.word	0x20008754

000291e4 <_localeconv_r>:
   291e4:	4800      	ldr	r0, [pc, #0]	; (291e8 <_localeconv_r+0x4>)
   291e6:	4770      	bx	lr
   291e8:	200088a8 	.word	0x200088a8

000291ec <__malloc_lock>:
   291ec:	4801      	ldr	r0, [pc, #4]	; (291f4 <__malloc_lock+0x8>)
   291ee:	f7e8 bbdd 	b.w	119ac <__retarget_lock_acquire_recursive>
   291f2:	bf00      	nop
   291f4:	20008b2c 	.word	0x20008b2c

000291f8 <__malloc_unlock>:
   291f8:	4801      	ldr	r0, [pc, #4]	; (29200 <__malloc_unlock+0x8>)
   291fa:	f7e8 bbf3 	b.w	119e4 <__retarget_lock_release_recursive>
   291fe:	bf00      	nop
   29200:	20008b2c 	.word	0x20008b2c

00029204 <_Balloc>:
   29204:	b570      	push	{r4, r5, r6, lr}
   29206:	6a46      	ldr	r6, [r0, #36]	; 0x24
   29208:	4604      	mov	r4, r0
   2920a:	460d      	mov	r5, r1
   2920c:	b976      	cbnz	r6, 2922c <_Balloc+0x28>
   2920e:	2010      	movs	r0, #16
   29210:	f7ff fa3c 	bl	2868c <malloc>
   29214:	4602      	mov	r2, r0
   29216:	6260      	str	r0, [r4, #36]	; 0x24
   29218:	b920      	cbnz	r0, 29224 <_Balloc+0x20>
   2921a:	4b18      	ldr	r3, [pc, #96]	; (2927c <_Balloc+0x78>)
   2921c:	2166      	movs	r1, #102	; 0x66
   2921e:	4818      	ldr	r0, [pc, #96]	; (29280 <_Balloc+0x7c>)
   29220:	f7ff fef0 	bl	29004 <__assert_func>
   29224:	e9c0 6601 	strd	r6, r6, [r0, #4]
   29228:	6006      	str	r6, [r0, #0]
   2922a:	60c6      	str	r6, [r0, #12]
   2922c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2922e:	68f3      	ldr	r3, [r6, #12]
   29230:	b183      	cbz	r3, 29254 <_Balloc+0x50>
   29232:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29234:	68db      	ldr	r3, [r3, #12]
   29236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2923a:	b9b8      	cbnz	r0, 2926c <_Balloc+0x68>
   2923c:	2101      	movs	r1, #1
   2923e:	4620      	mov	r0, r4
   29240:	fa01 f605 	lsl.w	r6, r1, r5
   29244:	1d72      	adds	r2, r6, #5
   29246:	0092      	lsls	r2, r2, #2
   29248:	f007 f9bf 	bl	305ca <_calloc_r>
   2924c:	b160      	cbz	r0, 29268 <_Balloc+0x64>
   2924e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   29252:	e00e      	b.n	29272 <_Balloc+0x6e>
   29254:	2221      	movs	r2, #33	; 0x21
   29256:	2104      	movs	r1, #4
   29258:	4620      	mov	r0, r4
   2925a:	f007 f9b6 	bl	305ca <_calloc_r>
   2925e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29260:	60f0      	str	r0, [r6, #12]
   29262:	68db      	ldr	r3, [r3, #12]
   29264:	2b00      	cmp	r3, #0
   29266:	d1e4      	bne.n	29232 <_Balloc+0x2e>
   29268:	2000      	movs	r0, #0
   2926a:	bd70      	pop	{r4, r5, r6, pc}
   2926c:	6802      	ldr	r2, [r0, #0]
   2926e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   29272:	2300      	movs	r3, #0
   29274:	e9c0 3303 	strd	r3, r3, [r0, #12]
   29278:	e7f7      	b.n	2926a <_Balloc+0x66>
   2927a:	bf00      	nop
   2927c:	00038ccb 	.word	0x00038ccb
   29280:	00038d67 	.word	0x00038d67

00029284 <_Bfree>:
   29284:	b570      	push	{r4, r5, r6, lr}
   29286:	6a46      	ldr	r6, [r0, #36]	; 0x24
   29288:	4605      	mov	r5, r0
   2928a:	460c      	mov	r4, r1
   2928c:	b976      	cbnz	r6, 292ac <_Bfree+0x28>
   2928e:	2010      	movs	r0, #16
   29290:	f7ff f9fc 	bl	2868c <malloc>
   29294:	4602      	mov	r2, r0
   29296:	6268      	str	r0, [r5, #36]	; 0x24
   29298:	b920      	cbnz	r0, 292a4 <_Bfree+0x20>
   2929a:	4b09      	ldr	r3, [pc, #36]	; (292c0 <_Bfree+0x3c>)
   2929c:	218a      	movs	r1, #138	; 0x8a
   2929e:	4809      	ldr	r0, [pc, #36]	; (292c4 <_Bfree+0x40>)
   292a0:	f7ff feb0 	bl	29004 <__assert_func>
   292a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   292a8:	6006      	str	r6, [r0, #0]
   292aa:	60c6      	str	r6, [r0, #12]
   292ac:	b13c      	cbz	r4, 292be <_Bfree+0x3a>
   292ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   292b0:	6862      	ldr	r2, [r4, #4]
   292b2:	68db      	ldr	r3, [r3, #12]
   292b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   292b8:	6021      	str	r1, [r4, #0]
   292ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   292be:	bd70      	pop	{r4, r5, r6, pc}
   292c0:	00038ccb 	.word	0x00038ccb
   292c4:	00038d67 	.word	0x00038d67

000292c8 <__multadd>:
   292c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   292cc:	f101 0c14 	add.w	ip, r1, #20
   292d0:	4607      	mov	r7, r0
   292d2:	460c      	mov	r4, r1
   292d4:	461e      	mov	r6, r3
   292d6:	690d      	ldr	r5, [r1, #16]
   292d8:	2000      	movs	r0, #0
   292da:	f8dc 3000 	ldr.w	r3, [ip]
   292de:	3001      	adds	r0, #1
   292e0:	b299      	uxth	r1, r3
   292e2:	4285      	cmp	r5, r0
   292e4:	fb02 6101 	mla	r1, r2, r1, r6
   292e8:	ea4f 4613 	mov.w	r6, r3, lsr #16
   292ec:	ea4f 4311 	mov.w	r3, r1, lsr #16
   292f0:	b289      	uxth	r1, r1
   292f2:	fb02 3306 	mla	r3, r2, r6, r3
   292f6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   292fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
   292fe:	f84c 1b04 	str.w	r1, [ip], #4
   29302:	dcea      	bgt.n	292da <__multadd+0x12>
   29304:	b30e      	cbz	r6, 2934a <__multadd+0x82>
   29306:	68a3      	ldr	r3, [r4, #8]
   29308:	42ab      	cmp	r3, r5
   2930a:	dc19      	bgt.n	29340 <__multadd+0x78>
   2930c:	6861      	ldr	r1, [r4, #4]
   2930e:	4638      	mov	r0, r7
   29310:	3101      	adds	r1, #1
   29312:	f7ff ff77 	bl	29204 <_Balloc>
   29316:	4680      	mov	r8, r0
   29318:	b928      	cbnz	r0, 29326 <__multadd+0x5e>
   2931a:	4602      	mov	r2, r0
   2931c:	4b0c      	ldr	r3, [pc, #48]	; (29350 <__multadd+0x88>)
   2931e:	21b5      	movs	r1, #181	; 0xb5
   29320:	480c      	ldr	r0, [pc, #48]	; (29354 <__multadd+0x8c>)
   29322:	f7ff fe6f 	bl	29004 <__assert_func>
   29326:	6922      	ldr	r2, [r4, #16]
   29328:	f104 010c 	add.w	r1, r4, #12
   2932c:	300c      	adds	r0, #12
   2932e:	3202      	adds	r2, #2
   29330:	0092      	lsls	r2, r2, #2
   29332:	f007 f908 	bl	30546 <memcpy>
   29336:	4621      	mov	r1, r4
   29338:	4644      	mov	r4, r8
   2933a:	4638      	mov	r0, r7
   2933c:	f7ff ffa2 	bl	29284 <_Bfree>
   29340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   29344:	3501      	adds	r5, #1
   29346:	615e      	str	r6, [r3, #20]
   29348:	6125      	str	r5, [r4, #16]
   2934a:	4620      	mov	r0, r4
   2934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29350:	00038d56 	.word	0x00038d56
   29354:	00038d67 	.word	0x00038d67

00029358 <__i2b>:
   29358:	b510      	push	{r4, lr}
   2935a:	460c      	mov	r4, r1
   2935c:	2101      	movs	r1, #1
   2935e:	f7ff ff51 	bl	29204 <_Balloc>
   29362:	4602      	mov	r2, r0
   29364:	b928      	cbnz	r0, 29372 <__i2b+0x1a>
   29366:	4b05      	ldr	r3, [pc, #20]	; (2937c <__i2b+0x24>)
   29368:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2936c:	4804      	ldr	r0, [pc, #16]	; (29380 <__i2b+0x28>)
   2936e:	f7ff fe49 	bl	29004 <__assert_func>
   29372:	2301      	movs	r3, #1
   29374:	6144      	str	r4, [r0, #20]
   29376:	6103      	str	r3, [r0, #16]
   29378:	bd10      	pop	{r4, pc}
   2937a:	bf00      	nop
   2937c:	00038d56 	.word	0x00038d56
   29380:	00038d67 	.word	0x00038d67

00029384 <__multiply>:
   29384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29388:	4614      	mov	r4, r2
   2938a:	690a      	ldr	r2, [r1, #16]
   2938c:	460f      	mov	r7, r1
   2938e:	b085      	sub	sp, #20
   29390:	6923      	ldr	r3, [r4, #16]
   29392:	429a      	cmp	r2, r3
   29394:	bfa2      	ittt	ge
   29396:	4623      	movge	r3, r4
   29398:	460c      	movge	r4, r1
   2939a:	461f      	movge	r7, r3
   2939c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   293a0:	68a3      	ldr	r3, [r4, #8]
   293a2:	f8d7 9010 	ldr.w	r9, [r7, #16]
   293a6:	6861      	ldr	r1, [r4, #4]
   293a8:	eb0a 0609 	add.w	r6, sl, r9
   293ac:	42b3      	cmp	r3, r6
   293ae:	bfb8      	it	lt
   293b0:	3101      	addlt	r1, #1
   293b2:	f7ff ff27 	bl	29204 <_Balloc>
   293b6:	b930      	cbnz	r0, 293c6 <__multiply+0x42>
   293b8:	4602      	mov	r2, r0
   293ba:	4b45      	ldr	r3, [pc, #276]	; (294d0 <__multiply+0x14c>)
   293bc:	f240 115d 	movw	r1, #349	; 0x15d
   293c0:	4844      	ldr	r0, [pc, #272]	; (294d4 <__multiply+0x150>)
   293c2:	f7ff fe1f 	bl	29004 <__assert_func>
   293c6:	f100 0514 	add.w	r5, r0, #20
   293ca:	2200      	movs	r2, #0
   293cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   293d0:	462b      	mov	r3, r5
   293d2:	4543      	cmp	r3, r8
   293d4:	d321      	bcc.n	2941a <__multiply+0x96>
   293d6:	f107 0114 	add.w	r1, r7, #20
   293da:	f104 0214 	add.w	r2, r4, #20
   293de:	f104 0715 	add.w	r7, r4, #21
   293e2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   293e6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   293ea:	9302      	str	r3, [sp, #8]
   293ec:	1b13      	subs	r3, r2, r4
   293ee:	3b15      	subs	r3, #21
   293f0:	f023 0303 	bic.w	r3, r3, #3
   293f4:	3304      	adds	r3, #4
   293f6:	42ba      	cmp	r2, r7
   293f8:	bf38      	it	cc
   293fa:	2304      	movcc	r3, #4
   293fc:	9301      	str	r3, [sp, #4]
   293fe:	9b02      	ldr	r3, [sp, #8]
   29400:	9103      	str	r1, [sp, #12]
   29402:	428b      	cmp	r3, r1
   29404:	d80c      	bhi.n	29420 <__multiply+0x9c>
   29406:	2e00      	cmp	r6, #0
   29408:	dd03      	ble.n	29412 <__multiply+0x8e>
   2940a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   2940e:	2b00      	cmp	r3, #0
   29410:	d05b      	beq.n	294ca <__multiply+0x146>
   29412:	6106      	str	r6, [r0, #16]
   29414:	b005      	add	sp, #20
   29416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2941a:	f843 2b04 	str.w	r2, [r3], #4
   2941e:	e7d8      	b.n	293d2 <__multiply+0x4e>
   29420:	f8b1 a000 	ldrh.w	sl, [r1]
   29424:	f1ba 0f00 	cmp.w	sl, #0
   29428:	d024      	beq.n	29474 <__multiply+0xf0>
   2942a:	f104 0e14 	add.w	lr, r4, #20
   2942e:	46a9      	mov	r9, r5
   29430:	f04f 0c00 	mov.w	ip, #0
   29434:	f85e 7b04 	ldr.w	r7, [lr], #4
   29438:	f8d9 3000 	ldr.w	r3, [r9]
   2943c:	fa1f fb87 	uxth.w	fp, r7
   29440:	4572      	cmp	r2, lr
   29442:	b29b      	uxth	r3, r3
   29444:	ea4f 4717 	mov.w	r7, r7, lsr #16
   29448:	fb0a 330b 	mla	r3, sl, fp, r3
   2944c:	4463      	add	r3, ip
   2944e:	f8d9 c000 	ldr.w	ip, [r9]
   29452:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   29456:	fb0a c707 	mla	r7, sl, r7, ip
   2945a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   2945e:	b29b      	uxth	r3, r3
   29460:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   29464:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   29468:	f849 3b04 	str.w	r3, [r9], #4
   2946c:	d8e2      	bhi.n	29434 <__multiply+0xb0>
   2946e:	9b01      	ldr	r3, [sp, #4]
   29470:	f845 c003 	str.w	ip, [r5, r3]
   29474:	9b03      	ldr	r3, [sp, #12]
   29476:	3104      	adds	r1, #4
   29478:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2947c:	f1b9 0f00 	cmp.w	r9, #0
   29480:	d021      	beq.n	294c6 <__multiply+0x142>
   29482:	682b      	ldr	r3, [r5, #0]
   29484:	f104 0c14 	add.w	ip, r4, #20
   29488:	46ae      	mov	lr, r5
   2948a:	f04f 0a00 	mov.w	sl, #0
   2948e:	f8bc b000 	ldrh.w	fp, [ip]
   29492:	b29b      	uxth	r3, r3
   29494:	f8be 7002 	ldrh.w	r7, [lr, #2]
   29498:	fb09 770b 	mla	r7, r9, fp, r7
   2949c:	4457      	add	r7, sl
   2949e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   294a2:	f84e 3b04 	str.w	r3, [lr], #4
   294a6:	f85c 3b04 	ldr.w	r3, [ip], #4
   294aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   294ae:	f8be 3000 	ldrh.w	r3, [lr]
   294b2:	4562      	cmp	r2, ip
   294b4:	fb09 330a 	mla	r3, r9, sl, r3
   294b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   294bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   294c0:	d8e5      	bhi.n	2948e <__multiply+0x10a>
   294c2:	9f01      	ldr	r7, [sp, #4]
   294c4:	51eb      	str	r3, [r5, r7]
   294c6:	3504      	adds	r5, #4
   294c8:	e799      	b.n	293fe <__multiply+0x7a>
   294ca:	3e01      	subs	r6, #1
   294cc:	e79b      	b.n	29406 <__multiply+0x82>
   294ce:	bf00      	nop
   294d0:	00038d56 	.word	0x00038d56
   294d4:	00038d67 	.word	0x00038d67

000294d8 <__pow5mult>:
   294d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   294dc:	4615      	mov	r5, r2
   294de:	f012 0203 	ands.w	r2, r2, #3
   294e2:	4607      	mov	r7, r0
   294e4:	460e      	mov	r6, r1
   294e6:	d007      	beq.n	294f8 <__pow5mult+0x20>
   294e8:	3a01      	subs	r2, #1
   294ea:	4c25      	ldr	r4, [pc, #148]	; (29580 <__pow5mult+0xa8>)
   294ec:	2300      	movs	r3, #0
   294ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   294f2:	f7ff fee9 	bl	292c8 <__multadd>
   294f6:	4606      	mov	r6, r0
   294f8:	10ad      	asrs	r5, r5, #2
   294fa:	d03d      	beq.n	29578 <__pow5mult+0xa0>
   294fc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   294fe:	b97c      	cbnz	r4, 29520 <__pow5mult+0x48>
   29500:	2010      	movs	r0, #16
   29502:	f7ff f8c3 	bl	2868c <malloc>
   29506:	4602      	mov	r2, r0
   29508:	6278      	str	r0, [r7, #36]	; 0x24
   2950a:	b928      	cbnz	r0, 29518 <__pow5mult+0x40>
   2950c:	4b1d      	ldr	r3, [pc, #116]	; (29584 <__pow5mult+0xac>)
   2950e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   29512:	481d      	ldr	r0, [pc, #116]	; (29588 <__pow5mult+0xb0>)
   29514:	f7ff fd76 	bl	29004 <__assert_func>
   29518:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2951c:	6004      	str	r4, [r0, #0]
   2951e:	60c4      	str	r4, [r0, #12]
   29520:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   29524:	f8d8 4008 	ldr.w	r4, [r8, #8]
   29528:	b94c      	cbnz	r4, 2953e <__pow5mult+0x66>
   2952a:	f240 2171 	movw	r1, #625	; 0x271
   2952e:	4638      	mov	r0, r7
   29530:	f7ff ff12 	bl	29358 <__i2b>
   29534:	2300      	movs	r3, #0
   29536:	4604      	mov	r4, r0
   29538:	f8c8 0008 	str.w	r0, [r8, #8]
   2953c:	6003      	str	r3, [r0, #0]
   2953e:	f04f 0900 	mov.w	r9, #0
   29542:	07eb      	lsls	r3, r5, #31
   29544:	d50a      	bpl.n	2955c <__pow5mult+0x84>
   29546:	4631      	mov	r1, r6
   29548:	4622      	mov	r2, r4
   2954a:	4638      	mov	r0, r7
   2954c:	f7ff ff1a 	bl	29384 <__multiply>
   29550:	4680      	mov	r8, r0
   29552:	4631      	mov	r1, r6
   29554:	4638      	mov	r0, r7
   29556:	4646      	mov	r6, r8
   29558:	f7ff fe94 	bl	29284 <_Bfree>
   2955c:	106d      	asrs	r5, r5, #1
   2955e:	d00b      	beq.n	29578 <__pow5mult+0xa0>
   29560:	6820      	ldr	r0, [r4, #0]
   29562:	b938      	cbnz	r0, 29574 <__pow5mult+0x9c>
   29564:	4622      	mov	r2, r4
   29566:	4621      	mov	r1, r4
   29568:	4638      	mov	r0, r7
   2956a:	f7ff ff0b 	bl	29384 <__multiply>
   2956e:	6020      	str	r0, [r4, #0]
   29570:	f8c0 9000 	str.w	r9, [r0]
   29574:	4604      	mov	r4, r0
   29576:	e7e4      	b.n	29542 <__pow5mult+0x6a>
   29578:	4630      	mov	r0, r6
   2957a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2957e:	bf00      	nop
   29580:	00032598 	.word	0x00032598
   29584:	00038ccb 	.word	0x00038ccb
   29588:	00038d67 	.word	0x00038d67

0002958c <__lshift>:
   2958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29590:	460c      	mov	r4, r1
   29592:	4607      	mov	r7, r0
   29594:	4691      	mov	r9, r2
   29596:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2959a:	6923      	ldr	r3, [r4, #16]
   2959c:	6849      	ldr	r1, [r1, #4]
   2959e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   295a2:	68a3      	ldr	r3, [r4, #8]
   295a4:	f108 0601 	add.w	r6, r8, #1
   295a8:	42b3      	cmp	r3, r6
   295aa:	db0b      	blt.n	295c4 <__lshift+0x38>
   295ac:	4638      	mov	r0, r7
   295ae:	f7ff fe29 	bl	29204 <_Balloc>
   295b2:	4605      	mov	r5, r0
   295b4:	b948      	cbnz	r0, 295ca <__lshift+0x3e>
   295b6:	4602      	mov	r2, r0
   295b8:	4b28      	ldr	r3, [pc, #160]	; (2965c <__lshift+0xd0>)
   295ba:	f240 11d9 	movw	r1, #473	; 0x1d9
   295be:	4828      	ldr	r0, [pc, #160]	; (29660 <__lshift+0xd4>)
   295c0:	f7ff fd20 	bl	29004 <__assert_func>
   295c4:	3101      	adds	r1, #1
   295c6:	005b      	lsls	r3, r3, #1
   295c8:	e7ee      	b.n	295a8 <__lshift+0x1c>
   295ca:	2300      	movs	r3, #0
   295cc:	f100 0114 	add.w	r1, r0, #20
   295d0:	f100 0210 	add.w	r2, r0, #16
   295d4:	4618      	mov	r0, r3
   295d6:	4553      	cmp	r3, sl
   295d8:	db33      	blt.n	29642 <__lshift+0xb6>
   295da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   295de:	f104 0314 	add.w	r3, r4, #20
   295e2:	6920      	ldr	r0, [r4, #16]
   295e4:	f019 091f 	ands.w	r9, r9, #31
   295e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   295ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   295f0:	d02b      	beq.n	2964a <__lshift+0xbe>
   295f2:	f1c9 0e20 	rsb	lr, r9, #32
   295f6:	468a      	mov	sl, r1
   295f8:	2200      	movs	r2, #0
   295fa:	6818      	ldr	r0, [r3, #0]
   295fc:	fa00 f009 	lsl.w	r0, r0, r9
   29600:	4310      	orrs	r0, r2
   29602:	f84a 0b04 	str.w	r0, [sl], #4
   29606:	f853 2b04 	ldr.w	r2, [r3], #4
   2960a:	459c      	cmp	ip, r3
   2960c:	fa22 f20e 	lsr.w	r2, r2, lr
   29610:	d8f3      	bhi.n	295fa <__lshift+0x6e>
   29612:	ebac 0304 	sub.w	r3, ip, r4
   29616:	f104 0015 	add.w	r0, r4, #21
   2961a:	3b15      	subs	r3, #21
   2961c:	f023 0303 	bic.w	r3, r3, #3
   29620:	3304      	adds	r3, #4
   29622:	4584      	cmp	ip, r0
   29624:	bf38      	it	cc
   29626:	2304      	movcc	r3, #4
   29628:	50ca      	str	r2, [r1, r3]
   2962a:	b10a      	cbz	r2, 29630 <__lshift+0xa4>
   2962c:	f108 0602 	add.w	r6, r8, #2
   29630:	3e01      	subs	r6, #1
   29632:	4638      	mov	r0, r7
   29634:	4621      	mov	r1, r4
   29636:	612e      	str	r6, [r5, #16]
   29638:	f7ff fe24 	bl	29284 <_Bfree>
   2963c:	4628      	mov	r0, r5
   2963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29642:	3301      	adds	r3, #1
   29644:	f842 0f04 	str.w	r0, [r2, #4]!
   29648:	e7c5      	b.n	295d6 <__lshift+0x4a>
   2964a:	3904      	subs	r1, #4
   2964c:	f853 2b04 	ldr.w	r2, [r3], #4
   29650:	459c      	cmp	ip, r3
   29652:	f841 2f04 	str.w	r2, [r1, #4]!
   29656:	d8f9      	bhi.n	2964c <__lshift+0xc0>
   29658:	e7ea      	b.n	29630 <__lshift+0xa4>
   2965a:	bf00      	nop
   2965c:	00038d56 	.word	0x00038d56
   29660:	00038d67 	.word	0x00038d67

00029664 <__mdiff>:
   29664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29668:	4689      	mov	r9, r1
   2966a:	4606      	mov	r6, r0
   2966c:	4611      	mov	r1, r2
   2966e:	4614      	mov	r4, r2
   29670:	4648      	mov	r0, r9
   29672:	f007 fa42 	bl	30afa <__mcmp>
   29676:	1e05      	subs	r5, r0, #0
   29678:	d112      	bne.n	296a0 <__mdiff+0x3c>
   2967a:	4629      	mov	r1, r5
   2967c:	4630      	mov	r0, r6
   2967e:	f7ff fdc1 	bl	29204 <_Balloc>
   29682:	4602      	mov	r2, r0
   29684:	b928      	cbnz	r0, 29692 <__mdiff+0x2e>
   29686:	4b40      	ldr	r3, [pc, #256]	; (29788 <__mdiff+0x124>)
   29688:	f240 2132 	movw	r1, #562	; 0x232
   2968c:	483f      	ldr	r0, [pc, #252]	; (2978c <__mdiff+0x128>)
   2968e:	f7ff fcb9 	bl	29004 <__assert_func>
   29692:	2301      	movs	r3, #1
   29694:	e9c0 3504 	strd	r3, r5, [r0, #16]
   29698:	4610      	mov	r0, r2
   2969a:	b003      	add	sp, #12
   2969c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296a0:	bfbc      	itt	lt
   296a2:	464b      	movlt	r3, r9
   296a4:	46a1      	movlt	r9, r4
   296a6:	4630      	mov	r0, r6
   296a8:	bfb8      	it	lt
   296aa:	2501      	movlt	r5, #1
   296ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
   296b0:	bfb4      	ite	lt
   296b2:	461c      	movlt	r4, r3
   296b4:	2500      	movge	r5, #0
   296b6:	f7ff fda5 	bl	29204 <_Balloc>
   296ba:	4602      	mov	r2, r0
   296bc:	b918      	cbnz	r0, 296c6 <__mdiff+0x62>
   296be:	4b32      	ldr	r3, [pc, #200]	; (29788 <__mdiff+0x124>)
   296c0:	f44f 7110 	mov.w	r1, #576	; 0x240
   296c4:	e7e2      	b.n	2968c <__mdiff+0x28>
   296c6:	f8d9 7010 	ldr.w	r7, [r9, #16]
   296ca:	f104 0e14 	add.w	lr, r4, #20
   296ce:	6926      	ldr	r6, [r4, #16]
   296d0:	f100 0b14 	add.w	fp, r0, #20
   296d4:	60c5      	str	r5, [r0, #12]
   296d6:	f109 0514 	add.w	r5, r9, #20
   296da:	f109 0310 	add.w	r3, r9, #16
   296de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   296e2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   296e6:	46d9      	mov	r9, fp
   296e8:	f04f 0c00 	mov.w	ip, #0
   296ec:	9301      	str	r3, [sp, #4]
   296ee:	9b01      	ldr	r3, [sp, #4]
   296f0:	f85e 0b04 	ldr.w	r0, [lr], #4
   296f4:	f853 af04 	ldr.w	sl, [r3, #4]!
   296f8:	b281      	uxth	r1, r0
   296fa:	4576      	cmp	r6, lr
   296fc:	9301      	str	r3, [sp, #4]
   296fe:	fa1f f38a 	uxth.w	r3, sl
   29702:	ea4f 4010 	mov.w	r0, r0, lsr #16
   29706:	eba3 0301 	sub.w	r3, r3, r1
   2970a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   2970e:	4463      	add	r3, ip
   29710:	eb00 4023 	add.w	r0, r0, r3, asr #16
   29714:	b29b      	uxth	r3, r3
   29716:	ea4f 4c20 	mov.w	ip, r0, asr #16
   2971a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   2971e:	f849 3b04 	str.w	r3, [r9], #4
   29722:	d8e4      	bhi.n	296ee <__mdiff+0x8a>
   29724:	1b33      	subs	r3, r6, r4
   29726:	3415      	adds	r4, #21
   29728:	3b15      	subs	r3, #21
   2972a:	f023 0303 	bic.w	r3, r3, #3
   2972e:	3304      	adds	r3, #4
   29730:	42a6      	cmp	r6, r4
   29732:	bf38      	it	cc
   29734:	2304      	movcc	r3, #4
   29736:	441d      	add	r5, r3
   29738:	445b      	add	r3, fp
   2973a:	462c      	mov	r4, r5
   2973c:	461e      	mov	r6, r3
   2973e:	4544      	cmp	r4, r8
   29740:	d30e      	bcc.n	29760 <__mdiff+0xfc>
   29742:	f108 0103 	add.w	r1, r8, #3
   29746:	1b49      	subs	r1, r1, r5
   29748:	3d03      	subs	r5, #3
   2974a:	f021 0103 	bic.w	r1, r1, #3
   2974e:	45a8      	cmp	r8, r5
   29750:	bf38      	it	cc
   29752:	2100      	movcc	r1, #0
   29754:	440b      	add	r3, r1
   29756:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2975a:	b199      	cbz	r1, 29784 <__mdiff+0x120>
   2975c:	6117      	str	r7, [r2, #16]
   2975e:	e79b      	b.n	29698 <__mdiff+0x34>
   29760:	f854 1b04 	ldr.w	r1, [r4], #4
   29764:	46e6      	mov	lr, ip
   29766:	fa1f fc81 	uxth.w	ip, r1
   2976a:	0c08      	lsrs	r0, r1, #16
   2976c:	4471      	add	r1, lr
   2976e:	44f4      	add	ip, lr
   29770:	b289      	uxth	r1, r1
   29772:	eb00 402c 	add.w	r0, r0, ip, asr #16
   29776:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   2977a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   2977e:	f846 1b04 	str.w	r1, [r6], #4
   29782:	e7dc      	b.n	2973e <__mdiff+0xda>
   29784:	3f01      	subs	r7, #1
   29786:	e7e6      	b.n	29756 <__mdiff+0xf2>
   29788:	00038d56 	.word	0x00038d56
   2978c:	00038d67 	.word	0x00038d67

00029790 <__d2b>:
   29790:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   29794:	2101      	movs	r1, #1
   29796:	4690      	mov	r8, r2
   29798:	4699      	mov	r9, r3
   2979a:	9e08      	ldr	r6, [sp, #32]
   2979c:	f7ff fd32 	bl	29204 <_Balloc>
   297a0:	4604      	mov	r4, r0
   297a2:	b930      	cbnz	r0, 297b2 <__d2b+0x22>
   297a4:	4602      	mov	r2, r0
   297a6:	4b24      	ldr	r3, [pc, #144]	; (29838 <__d2b+0xa8>)
   297a8:	f240 310a 	movw	r1, #778	; 0x30a
   297ac:	4823      	ldr	r0, [pc, #140]	; (2983c <__d2b+0xac>)
   297ae:	f7ff fc29 	bl	29004 <__assert_func>
   297b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
   297b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
   297ba:	b10d      	cbz	r5, 297c0 <__d2b+0x30>
   297bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   297c0:	9301      	str	r3, [sp, #4]
   297c2:	f1b8 0300 	subs.w	r3, r8, #0
   297c6:	d024      	beq.n	29812 <__d2b+0x82>
   297c8:	4668      	mov	r0, sp
   297ca:	9300      	str	r3, [sp, #0]
   297cc:	f007 f968 	bl	30aa0 <__lo0bits>
   297d0:	e9dd 1200 	ldrd	r1, r2, [sp]
   297d4:	b1d8      	cbz	r0, 2980e <__d2b+0x7e>
   297d6:	f1c0 0320 	rsb	r3, r0, #32
   297da:	fa02 f303 	lsl.w	r3, r2, r3
   297de:	40c2      	lsrs	r2, r0
   297e0:	430b      	orrs	r3, r1
   297e2:	9201      	str	r2, [sp, #4]
   297e4:	6163      	str	r3, [r4, #20]
   297e6:	9b01      	ldr	r3, [sp, #4]
   297e8:	2b00      	cmp	r3, #0
   297ea:	61a3      	str	r3, [r4, #24]
   297ec:	bf0c      	ite	eq
   297ee:	2201      	moveq	r2, #1
   297f0:	2202      	movne	r2, #2
   297f2:	6122      	str	r2, [r4, #16]
   297f4:	b1ad      	cbz	r5, 29822 <__d2b+0x92>
   297f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   297fa:	4405      	add	r5, r0
   297fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   29800:	6035      	str	r5, [r6, #0]
   29802:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29804:	6018      	str	r0, [r3, #0]
   29806:	4620      	mov	r0, r4
   29808:	b002      	add	sp, #8
   2980a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2980e:	6161      	str	r1, [r4, #20]
   29810:	e7e9      	b.n	297e6 <__d2b+0x56>
   29812:	a801      	add	r0, sp, #4
   29814:	f007 f944 	bl	30aa0 <__lo0bits>
   29818:	9b01      	ldr	r3, [sp, #4]
   2981a:	3020      	adds	r0, #32
   2981c:	2201      	movs	r2, #1
   2981e:	6163      	str	r3, [r4, #20]
   29820:	e7e7      	b.n	297f2 <__d2b+0x62>
   29822:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   29826:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2982a:	6030      	str	r0, [r6, #0]
   2982c:	6918      	ldr	r0, [r3, #16]
   2982e:	f007 f915 	bl	30a5c <__hi0bits>
   29832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   29836:	e7e4      	b.n	29802 <__d2b+0x72>
   29838:	00038d56 	.word	0x00038d56
   2983c:	00038d67 	.word	0x00038d67

00029840 <_vfiprintf_r>:
   29840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29844:	460d      	mov	r5, r1
   29846:	b09d      	sub	sp, #116	; 0x74
   29848:	4614      	mov	r4, r2
   2984a:	4698      	mov	r8, r3
   2984c:	4606      	mov	r6, r0
   2984e:	b118      	cbz	r0, 29858 <_vfiprintf_r+0x18>
   29850:	6983      	ldr	r3, [r0, #24]
   29852:	b90b      	cbnz	r3, 29858 <_vfiprintf_r+0x18>
   29854:	f7ff fc36 	bl	290c4 <__sinit>
   29858:	4b87      	ldr	r3, [pc, #540]	; (29a78 <_vfiprintf_r+0x238>)
   2985a:	429d      	cmp	r5, r3
   2985c:	d11b      	bne.n	29896 <_vfiprintf_r+0x56>
   2985e:	6875      	ldr	r5, [r6, #4]
   29860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   29862:	07d9      	lsls	r1, r3, #31
   29864:	d405      	bmi.n	29872 <_vfiprintf_r+0x32>
   29866:	89ab      	ldrh	r3, [r5, #12]
   29868:	059a      	lsls	r2, r3, #22
   2986a:	d402      	bmi.n	29872 <_vfiprintf_r+0x32>
   2986c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2986e:	f7e8 f89d 	bl	119ac <__retarget_lock_acquire_recursive>
   29872:	89ab      	ldrh	r3, [r5, #12]
   29874:	071b      	lsls	r3, r3, #28
   29876:	d501      	bpl.n	2987c <_vfiprintf_r+0x3c>
   29878:	692b      	ldr	r3, [r5, #16]
   2987a:	b9eb      	cbnz	r3, 298b8 <_vfiprintf_r+0x78>
   2987c:	4629      	mov	r1, r5
   2987e:	4630      	mov	r0, r6
   29880:	f000 f96e 	bl	29b60 <__swsetup_r>
   29884:	b1c0      	cbz	r0, 298b8 <_vfiprintf_r+0x78>
   29886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   29888:	07dc      	lsls	r4, r3, #31
   2988a:	d50e      	bpl.n	298aa <_vfiprintf_r+0x6a>
   2988c:	f04f 30ff 	mov.w	r0, #4294967295
   29890:	b01d      	add	sp, #116	; 0x74
   29892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29896:	4b79      	ldr	r3, [pc, #484]	; (29a7c <_vfiprintf_r+0x23c>)
   29898:	429d      	cmp	r5, r3
   2989a:	d101      	bne.n	298a0 <_vfiprintf_r+0x60>
   2989c:	68b5      	ldr	r5, [r6, #8]
   2989e:	e7df      	b.n	29860 <_vfiprintf_r+0x20>
   298a0:	4b77      	ldr	r3, [pc, #476]	; (29a80 <_vfiprintf_r+0x240>)
   298a2:	429d      	cmp	r5, r3
   298a4:	bf08      	it	eq
   298a6:	68f5      	ldreq	r5, [r6, #12]
   298a8:	e7da      	b.n	29860 <_vfiprintf_r+0x20>
   298aa:	89ab      	ldrh	r3, [r5, #12]
   298ac:	0598      	lsls	r0, r3, #22
   298ae:	d4ed      	bmi.n	2988c <_vfiprintf_r+0x4c>
   298b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   298b2:	f7e8 f897 	bl	119e4 <__retarget_lock_release_recursive>
   298b6:	e7e9      	b.n	2988c <_vfiprintf_r+0x4c>
   298b8:	2300      	movs	r3, #0
   298ba:	f8cd 800c 	str.w	r8, [sp, #12]
   298be:	f04f 0901 	mov.w	r9, #1
   298c2:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 29a84 <_vfiprintf_r+0x244>
   298c6:	9309      	str	r3, [sp, #36]	; 0x24
   298c8:	2320      	movs	r3, #32
   298ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   298ce:	2330      	movs	r3, #48	; 0x30
   298d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   298d4:	4623      	mov	r3, r4
   298d6:	469a      	mov	sl, r3
   298d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   298dc:	b10a      	cbz	r2, 298e2 <_vfiprintf_r+0xa2>
   298de:	2a25      	cmp	r2, #37	; 0x25
   298e0:	d1f9      	bne.n	298d6 <_vfiprintf_r+0x96>
   298e2:	ebba 0b04 	subs.w	fp, sl, r4
   298e6:	d00b      	beq.n	29900 <_vfiprintf_r+0xc0>
   298e8:	465b      	mov	r3, fp
   298ea:	4622      	mov	r2, r4
   298ec:	4629      	mov	r1, r5
   298ee:	4630      	mov	r0, r6
   298f0:	f007 f933 	bl	30b5a <__sfputs_r>
   298f4:	3001      	adds	r0, #1
   298f6:	f000 80a6 	beq.w	29a46 <_vfiprintf_r+0x206>
   298fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   298fc:	445a      	add	r2, fp
   298fe:	9209      	str	r2, [sp, #36]	; 0x24
   29900:	f89a 3000 	ldrb.w	r3, [sl]
   29904:	2b00      	cmp	r3, #0
   29906:	f000 809e 	beq.w	29a46 <_vfiprintf_r+0x206>
   2990a:	2300      	movs	r3, #0
   2990c:	f04f 32ff 	mov.w	r2, #4294967295
   29910:	f10a 0a01 	add.w	sl, sl, #1
   29914:	9304      	str	r3, [sp, #16]
   29916:	9307      	str	r3, [sp, #28]
   29918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2991c:	931a      	str	r3, [sp, #104]	; 0x68
   2991e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   29922:	4654      	mov	r4, sl
   29924:	2205      	movs	r2, #5
   29926:	4857      	ldr	r0, [pc, #348]	; (29a84 <_vfiprintf_r+0x244>)
   29928:	f814 1b01 	ldrb.w	r1, [r4], #1
   2992c:	f006 fded 	bl	3050a <memchr>
   29930:	9b04      	ldr	r3, [sp, #16]
   29932:	b9d0      	cbnz	r0, 2996a <_vfiprintf_r+0x12a>
   29934:	06d9      	lsls	r1, r3, #27
   29936:	bf44      	itt	mi
   29938:	2220      	movmi	r2, #32
   2993a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2993e:	071a      	lsls	r2, r3, #28
   29940:	bf44      	itt	mi
   29942:	222b      	movmi	r2, #43	; 0x2b
   29944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   29948:	f89a 2000 	ldrb.w	r2, [sl]
   2994c:	2a2a      	cmp	r2, #42	; 0x2a
   2994e:	d014      	beq.n	2997a <_vfiprintf_r+0x13a>
   29950:	9a07      	ldr	r2, [sp, #28]
   29952:	4654      	mov	r4, sl
   29954:	2000      	movs	r0, #0
   29956:	f04f 0c0a 	mov.w	ip, #10
   2995a:	4621      	mov	r1, r4
   2995c:	f811 3b01 	ldrb.w	r3, [r1], #1
   29960:	3b30      	subs	r3, #48	; 0x30
   29962:	2b09      	cmp	r3, #9
   29964:	d94a      	bls.n	299fc <_vfiprintf_r+0x1bc>
   29966:	b970      	cbnz	r0, 29986 <_vfiprintf_r+0x146>
   29968:	e014      	b.n	29994 <_vfiprintf_r+0x154>
   2996a:	eba0 0008 	sub.w	r0, r0, r8
   2996e:	46a2      	mov	sl, r4
   29970:	fa09 f000 	lsl.w	r0, r9, r0
   29974:	4318      	orrs	r0, r3
   29976:	9004      	str	r0, [sp, #16]
   29978:	e7d3      	b.n	29922 <_vfiprintf_r+0xe2>
   2997a:	9a03      	ldr	r2, [sp, #12]
   2997c:	1d11      	adds	r1, r2, #4
   2997e:	6812      	ldr	r2, [r2, #0]
   29980:	2a00      	cmp	r2, #0
   29982:	9103      	str	r1, [sp, #12]
   29984:	db01      	blt.n	2998a <_vfiprintf_r+0x14a>
   29986:	9207      	str	r2, [sp, #28]
   29988:	e004      	b.n	29994 <_vfiprintf_r+0x154>
   2998a:	4252      	negs	r2, r2
   2998c:	f043 0302 	orr.w	r3, r3, #2
   29990:	9207      	str	r2, [sp, #28]
   29992:	9304      	str	r3, [sp, #16]
   29994:	7823      	ldrb	r3, [r4, #0]
   29996:	2b2e      	cmp	r3, #46	; 0x2e
   29998:	d10a      	bne.n	299b0 <_vfiprintf_r+0x170>
   2999a:	7863      	ldrb	r3, [r4, #1]
   2999c:	2b2a      	cmp	r3, #42	; 0x2a
   2999e:	d132      	bne.n	29a06 <_vfiprintf_r+0x1c6>
   299a0:	9b03      	ldr	r3, [sp, #12]
   299a2:	3402      	adds	r4, #2
   299a4:	1d1a      	adds	r2, r3, #4
   299a6:	681b      	ldr	r3, [r3, #0]
   299a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   299ac:	9203      	str	r2, [sp, #12]
   299ae:	9305      	str	r3, [sp, #20]
   299b0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 29a88 <_vfiprintf_r+0x248>
   299b4:	2203      	movs	r2, #3
   299b6:	7821      	ldrb	r1, [r4, #0]
   299b8:	4650      	mov	r0, sl
   299ba:	f006 fda6 	bl	3050a <memchr>
   299be:	b138      	cbz	r0, 299d0 <_vfiprintf_r+0x190>
   299c0:	eba0 000a 	sub.w	r0, r0, sl
   299c4:	2240      	movs	r2, #64	; 0x40
   299c6:	9b04      	ldr	r3, [sp, #16]
   299c8:	3401      	adds	r4, #1
   299ca:	4082      	lsls	r2, r0
   299cc:	4313      	orrs	r3, r2
   299ce:	9304      	str	r3, [sp, #16]
   299d0:	f814 1b01 	ldrb.w	r1, [r4], #1
   299d4:	2206      	movs	r2, #6
   299d6:	482d      	ldr	r0, [pc, #180]	; (29a8c <_vfiprintf_r+0x24c>)
   299d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   299dc:	f006 fd95 	bl	3050a <memchr>
   299e0:	2800      	cmp	r0, #0
   299e2:	d03f      	beq.n	29a64 <_vfiprintf_r+0x224>
   299e4:	4b2a      	ldr	r3, [pc, #168]	; (29a90 <_vfiprintf_r+0x250>)
   299e6:	bb1b      	cbnz	r3, 29a30 <_vfiprintf_r+0x1f0>
   299e8:	9b03      	ldr	r3, [sp, #12]
   299ea:	3307      	adds	r3, #7
   299ec:	f023 0307 	bic.w	r3, r3, #7
   299f0:	3308      	adds	r3, #8
   299f2:	9303      	str	r3, [sp, #12]
   299f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   299f6:	443b      	add	r3, r7
   299f8:	9309      	str	r3, [sp, #36]	; 0x24
   299fa:	e76b      	b.n	298d4 <_vfiprintf_r+0x94>
   299fc:	fb0c 3202 	mla	r2, ip, r2, r3
   29a00:	460c      	mov	r4, r1
   29a02:	2001      	movs	r0, #1
   29a04:	e7a9      	b.n	2995a <_vfiprintf_r+0x11a>
   29a06:	2300      	movs	r3, #0
   29a08:	3401      	adds	r4, #1
   29a0a:	f04f 0c0a 	mov.w	ip, #10
   29a0e:	4619      	mov	r1, r3
   29a10:	9305      	str	r3, [sp, #20]
   29a12:	4620      	mov	r0, r4
   29a14:	f810 2b01 	ldrb.w	r2, [r0], #1
   29a18:	3a30      	subs	r2, #48	; 0x30
   29a1a:	2a09      	cmp	r2, #9
   29a1c:	d903      	bls.n	29a26 <_vfiprintf_r+0x1e6>
   29a1e:	2b00      	cmp	r3, #0
   29a20:	d0c6      	beq.n	299b0 <_vfiprintf_r+0x170>
   29a22:	9105      	str	r1, [sp, #20]
   29a24:	e7c4      	b.n	299b0 <_vfiprintf_r+0x170>
   29a26:	fb0c 2101 	mla	r1, ip, r1, r2
   29a2a:	4604      	mov	r4, r0
   29a2c:	2301      	movs	r3, #1
   29a2e:	e7f0      	b.n	29a12 <_vfiprintf_r+0x1d2>
   29a30:	ab03      	add	r3, sp, #12
   29a32:	462a      	mov	r2, r5
   29a34:	a904      	add	r1, sp, #16
   29a36:	4630      	mov	r0, r6
   29a38:	9300      	str	r3, [sp, #0]
   29a3a:	4b16      	ldr	r3, [pc, #88]	; (29a94 <_vfiprintf_r+0x254>)
   29a3c:	f7fe feda 	bl	287f4 <_printf_float>
   29a40:	4607      	mov	r7, r0
   29a42:	1c78      	adds	r0, r7, #1
   29a44:	d1d6      	bne.n	299f4 <_vfiprintf_r+0x1b4>
   29a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   29a48:	07d9      	lsls	r1, r3, #31
   29a4a:	d405      	bmi.n	29a58 <_vfiprintf_r+0x218>
   29a4c:	89ab      	ldrh	r3, [r5, #12]
   29a4e:	059a      	lsls	r2, r3, #22
   29a50:	d402      	bmi.n	29a58 <_vfiprintf_r+0x218>
   29a52:	6da8      	ldr	r0, [r5, #88]	; 0x58
   29a54:	f7e7 ffc6 	bl	119e4 <__retarget_lock_release_recursive>
   29a58:	89ab      	ldrh	r3, [r5, #12]
   29a5a:	065b      	lsls	r3, r3, #25
   29a5c:	f53f af16 	bmi.w	2988c <_vfiprintf_r+0x4c>
   29a60:	9809      	ldr	r0, [sp, #36]	; 0x24
   29a62:	e715      	b.n	29890 <_vfiprintf_r+0x50>
   29a64:	ab03      	add	r3, sp, #12
   29a66:	462a      	mov	r2, r5
   29a68:	a904      	add	r1, sp, #16
   29a6a:	4630      	mov	r0, r6
   29a6c:	9300      	str	r3, [sp, #0]
   29a6e:	4b09      	ldr	r3, [pc, #36]	; (29a94 <_vfiprintf_r+0x254>)
   29a70:	f7ff f8f6 	bl	28c60 <_printf_i>
   29a74:	e7e4      	b.n	29a40 <_vfiprintf_r+0x200>
   29a76:	bf00      	nop
   29a78:	00032578 	.word	0x00032578
   29a7c:	00032558 	.word	0x00032558
   29a80:	00032538 	.word	0x00032538
   29a84:	00038ddc 	.word	0x00038ddc
   29a88:	00038de2 	.word	0x00038de2
   29a8c:	00038de6 	.word	0x00038de6
   29a90:	000287f5 	.word	0x000287f5
   29a94:	00030b5b 	.word	0x00030b5b

00029a98 <__swbuf_r>:
   29a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a9a:	460e      	mov	r6, r1
   29a9c:	4614      	mov	r4, r2
   29a9e:	4605      	mov	r5, r0
   29aa0:	b118      	cbz	r0, 29aaa <__swbuf_r+0x12>
   29aa2:	6983      	ldr	r3, [r0, #24]
   29aa4:	b90b      	cbnz	r3, 29aaa <__swbuf_r+0x12>
   29aa6:	f7ff fb0d 	bl	290c4 <__sinit>
   29aaa:	4b21      	ldr	r3, [pc, #132]	; (29b30 <__swbuf_r+0x98>)
   29aac:	429c      	cmp	r4, r3
   29aae:	d110      	bne.n	29ad2 <__swbuf_r+0x3a>
   29ab0:	686c      	ldr	r4, [r5, #4]
   29ab2:	69a3      	ldr	r3, [r4, #24]
   29ab4:	60a3      	str	r3, [r4, #8]
   29ab6:	89a3      	ldrh	r3, [r4, #12]
   29ab8:	071a      	lsls	r2, r3, #28
   29aba:	d501      	bpl.n	29ac0 <__swbuf_r+0x28>
   29abc:	6923      	ldr	r3, [r4, #16]
   29abe:	b993      	cbnz	r3, 29ae6 <__swbuf_r+0x4e>
   29ac0:	4621      	mov	r1, r4
   29ac2:	4628      	mov	r0, r5
   29ac4:	f000 f84c 	bl	29b60 <__swsetup_r>
   29ac8:	b168      	cbz	r0, 29ae6 <__swbuf_r+0x4e>
   29aca:	f04f 37ff 	mov.w	r7, #4294967295
   29ace:	4638      	mov	r0, r7
   29ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29ad2:	4b18      	ldr	r3, [pc, #96]	; (29b34 <__swbuf_r+0x9c>)
   29ad4:	429c      	cmp	r4, r3
   29ad6:	d101      	bne.n	29adc <__swbuf_r+0x44>
   29ad8:	68ac      	ldr	r4, [r5, #8]
   29ada:	e7ea      	b.n	29ab2 <__swbuf_r+0x1a>
   29adc:	4b16      	ldr	r3, [pc, #88]	; (29b38 <__swbuf_r+0xa0>)
   29ade:	429c      	cmp	r4, r3
   29ae0:	bf08      	it	eq
   29ae2:	68ec      	ldreq	r4, [r5, #12]
   29ae4:	e7e5      	b.n	29ab2 <__swbuf_r+0x1a>
   29ae6:	6923      	ldr	r3, [r4, #16]
   29ae8:	b2f6      	uxtb	r6, r6
   29aea:	6820      	ldr	r0, [r4, #0]
   29aec:	4637      	mov	r7, r6
   29aee:	1ac0      	subs	r0, r0, r3
   29af0:	6963      	ldr	r3, [r4, #20]
   29af2:	4283      	cmp	r3, r0
   29af4:	dc05      	bgt.n	29b02 <__swbuf_r+0x6a>
   29af6:	4621      	mov	r1, r4
   29af8:	4628      	mov	r0, r5
   29afa:	f000 f8ad 	bl	29c58 <_fflush_r>
   29afe:	2800      	cmp	r0, #0
   29b00:	d1e3      	bne.n	29aca <__swbuf_r+0x32>
   29b02:	68a3      	ldr	r3, [r4, #8]
   29b04:	3001      	adds	r0, #1
   29b06:	3b01      	subs	r3, #1
   29b08:	60a3      	str	r3, [r4, #8]
   29b0a:	6823      	ldr	r3, [r4, #0]
   29b0c:	1c5a      	adds	r2, r3, #1
   29b0e:	6022      	str	r2, [r4, #0]
   29b10:	701e      	strb	r6, [r3, #0]
   29b12:	6963      	ldr	r3, [r4, #20]
   29b14:	4283      	cmp	r3, r0
   29b16:	d004      	beq.n	29b22 <__swbuf_r+0x8a>
   29b18:	89a3      	ldrh	r3, [r4, #12]
   29b1a:	07db      	lsls	r3, r3, #31
   29b1c:	d5d7      	bpl.n	29ace <__swbuf_r+0x36>
   29b1e:	2e0a      	cmp	r6, #10
   29b20:	d1d5      	bne.n	29ace <__swbuf_r+0x36>
   29b22:	4621      	mov	r1, r4
   29b24:	4628      	mov	r0, r5
   29b26:	f000 f897 	bl	29c58 <_fflush_r>
   29b2a:	2800      	cmp	r0, #0
   29b2c:	d0cf      	beq.n	29ace <__swbuf_r+0x36>
   29b2e:	e7cc      	b.n	29aca <__swbuf_r+0x32>
   29b30:	00032578 	.word	0x00032578
   29b34:	00032558 	.word	0x00032558
   29b38:	00032538 	.word	0x00032538

00029b3c <_write_r>:
   29b3c:	b538      	push	{r3, r4, r5, lr}
   29b3e:	4604      	mov	r4, r0
   29b40:	4d06      	ldr	r5, [pc, #24]	; (29b5c <_write_r+0x20>)
   29b42:	4608      	mov	r0, r1
   29b44:	4611      	mov	r1, r2
   29b46:	2200      	movs	r2, #0
   29b48:	602a      	str	r2, [r5, #0]
   29b4a:	461a      	mov	r2, r3
   29b4c:	f002 f927 	bl	2bd9e <_write>
   29b50:	1c43      	adds	r3, r0, #1
   29b52:	d102      	bne.n	29b5a <_write_r+0x1e>
   29b54:	682b      	ldr	r3, [r5, #0]
   29b56:	b103      	cbz	r3, 29b5a <_write_r+0x1e>
   29b58:	6023      	str	r3, [r4, #0]
   29b5a:	bd38      	pop	{r3, r4, r5, pc}
   29b5c:	20021aec 	.word	0x20021aec

00029b60 <__swsetup_r>:
   29b60:	4b31      	ldr	r3, [pc, #196]	; (29c28 <__swsetup_r+0xc8>)
   29b62:	b570      	push	{r4, r5, r6, lr}
   29b64:	681d      	ldr	r5, [r3, #0]
   29b66:	4606      	mov	r6, r0
   29b68:	460c      	mov	r4, r1
   29b6a:	b125      	cbz	r5, 29b76 <__swsetup_r+0x16>
   29b6c:	69ab      	ldr	r3, [r5, #24]
   29b6e:	b913      	cbnz	r3, 29b76 <__swsetup_r+0x16>
   29b70:	4628      	mov	r0, r5
   29b72:	f7ff faa7 	bl	290c4 <__sinit>
   29b76:	4b2d      	ldr	r3, [pc, #180]	; (29c2c <__swsetup_r+0xcc>)
   29b78:	429c      	cmp	r4, r3
   29b7a:	d10e      	bne.n	29b9a <__swsetup_r+0x3a>
   29b7c:	686c      	ldr	r4, [r5, #4]
   29b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29b82:	071a      	lsls	r2, r3, #28
   29b84:	d42c      	bmi.n	29be0 <__swsetup_r+0x80>
   29b86:	06dd      	lsls	r5, r3, #27
   29b88:	d411      	bmi.n	29bae <__swsetup_r+0x4e>
   29b8a:	2209      	movs	r2, #9
   29b8c:	6032      	str	r2, [r6, #0]
   29b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29b92:	f04f 30ff 	mov.w	r0, #4294967295
   29b96:	81a3      	strh	r3, [r4, #12]
   29b98:	e03d      	b.n	29c16 <__swsetup_r+0xb6>
   29b9a:	4b25      	ldr	r3, [pc, #148]	; (29c30 <__swsetup_r+0xd0>)
   29b9c:	429c      	cmp	r4, r3
   29b9e:	d101      	bne.n	29ba4 <__swsetup_r+0x44>
   29ba0:	68ac      	ldr	r4, [r5, #8]
   29ba2:	e7ec      	b.n	29b7e <__swsetup_r+0x1e>
   29ba4:	4b23      	ldr	r3, [pc, #140]	; (29c34 <__swsetup_r+0xd4>)
   29ba6:	429c      	cmp	r4, r3
   29ba8:	bf08      	it	eq
   29baa:	68ec      	ldreq	r4, [r5, #12]
   29bac:	e7e7      	b.n	29b7e <__swsetup_r+0x1e>
   29bae:	0758      	lsls	r0, r3, #29
   29bb0:	d512      	bpl.n	29bd8 <__swsetup_r+0x78>
   29bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29bb4:	b141      	cbz	r1, 29bc8 <__swsetup_r+0x68>
   29bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29bba:	4299      	cmp	r1, r3
   29bbc:	d002      	beq.n	29bc4 <__swsetup_r+0x64>
   29bbe:	4630      	mov	r0, r6
   29bc0:	f7fe fd74 	bl	286ac <_free_r>
   29bc4:	2300      	movs	r3, #0
   29bc6:	6363      	str	r3, [r4, #52]	; 0x34
   29bc8:	89a3      	ldrh	r3, [r4, #12]
   29bca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29bce:	81a3      	strh	r3, [r4, #12]
   29bd0:	2300      	movs	r3, #0
   29bd2:	6063      	str	r3, [r4, #4]
   29bd4:	6923      	ldr	r3, [r4, #16]
   29bd6:	6023      	str	r3, [r4, #0]
   29bd8:	89a3      	ldrh	r3, [r4, #12]
   29bda:	f043 0308 	orr.w	r3, r3, #8
   29bde:	81a3      	strh	r3, [r4, #12]
   29be0:	6923      	ldr	r3, [r4, #16]
   29be2:	b94b      	cbnz	r3, 29bf8 <__swsetup_r+0x98>
   29be4:	89a3      	ldrh	r3, [r4, #12]
   29be6:	f403 7320 	and.w	r3, r3, #640	; 0x280
   29bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   29bee:	d003      	beq.n	29bf8 <__swsetup_r+0x98>
   29bf0:	4621      	mov	r1, r4
   29bf2:	4630      	mov	r0, r6
   29bf4:	f000 f87e 	bl	29cf4 <__smakebuf_r>
   29bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29bfc:	f013 0201 	ands.w	r2, r3, #1
   29c00:	d00a      	beq.n	29c18 <__swsetup_r+0xb8>
   29c02:	2200      	movs	r2, #0
   29c04:	60a2      	str	r2, [r4, #8]
   29c06:	6962      	ldr	r2, [r4, #20]
   29c08:	4252      	negs	r2, r2
   29c0a:	61a2      	str	r2, [r4, #24]
   29c0c:	6922      	ldr	r2, [r4, #16]
   29c0e:	b942      	cbnz	r2, 29c22 <__swsetup_r+0xc2>
   29c10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   29c14:	d1bb      	bne.n	29b8e <__swsetup_r+0x2e>
   29c16:	bd70      	pop	{r4, r5, r6, pc}
   29c18:	0799      	lsls	r1, r3, #30
   29c1a:	bf58      	it	pl
   29c1c:	6962      	ldrpl	r2, [r4, #20]
   29c1e:	60a2      	str	r2, [r4, #8]
   29c20:	e7f4      	b.n	29c0c <__swsetup_r+0xac>
   29c22:	2000      	movs	r0, #0
   29c24:	e7f7      	b.n	29c16 <__swsetup_r+0xb6>
   29c26:	bf00      	nop
   29c28:	20008754 	.word	0x20008754
   29c2c:	00032578 	.word	0x00032578
   29c30:	00032558 	.word	0x00032558
   29c34:	00032538 	.word	0x00032538

00029c38 <_close_r>:
   29c38:	b538      	push	{r3, r4, r5, lr}
   29c3a:	2300      	movs	r3, #0
   29c3c:	4d05      	ldr	r5, [pc, #20]	; (29c54 <_close_r+0x1c>)
   29c3e:	4604      	mov	r4, r0
   29c40:	4608      	mov	r0, r1
   29c42:	602b      	str	r3, [r5, #0]
   29c44:	f002 f8af 	bl	2bda6 <_close>
   29c48:	1c43      	adds	r3, r0, #1
   29c4a:	d102      	bne.n	29c52 <_close_r+0x1a>
   29c4c:	682b      	ldr	r3, [r5, #0]
   29c4e:	b103      	cbz	r3, 29c52 <_close_r+0x1a>
   29c50:	6023      	str	r3, [r4, #0]
   29c52:	bd38      	pop	{r3, r4, r5, pc}
   29c54:	20021aec 	.word	0x20021aec

00029c58 <_fflush_r>:
   29c58:	b538      	push	{r3, r4, r5, lr}
   29c5a:	690b      	ldr	r3, [r1, #16]
   29c5c:	4605      	mov	r5, r0
   29c5e:	460c      	mov	r4, r1
   29c60:	b913      	cbnz	r3, 29c68 <_fflush_r+0x10>
   29c62:	2500      	movs	r5, #0
   29c64:	4628      	mov	r0, r5
   29c66:	bd38      	pop	{r3, r4, r5, pc}
   29c68:	b118      	cbz	r0, 29c72 <_fflush_r+0x1a>
   29c6a:	6983      	ldr	r3, [r0, #24]
   29c6c:	b90b      	cbnz	r3, 29c72 <_fflush_r+0x1a>
   29c6e:	f7ff fa29 	bl	290c4 <__sinit>
   29c72:	4b14      	ldr	r3, [pc, #80]	; (29cc4 <_fflush_r+0x6c>)
   29c74:	429c      	cmp	r4, r3
   29c76:	d11b      	bne.n	29cb0 <_fflush_r+0x58>
   29c78:	686c      	ldr	r4, [r5, #4]
   29c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29c7e:	2b00      	cmp	r3, #0
   29c80:	d0ef      	beq.n	29c62 <_fflush_r+0xa>
   29c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29c84:	07d0      	lsls	r0, r2, #31
   29c86:	d404      	bmi.n	29c92 <_fflush_r+0x3a>
   29c88:	0599      	lsls	r1, r3, #22
   29c8a:	d402      	bmi.n	29c92 <_fflush_r+0x3a>
   29c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29c8e:	f7e7 fe8d 	bl	119ac <__retarget_lock_acquire_recursive>
   29c92:	4628      	mov	r0, r5
   29c94:	4621      	mov	r1, r4
   29c96:	f006 ffbc 	bl	30c12 <__sflush_r>
   29c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29c9c:	4605      	mov	r5, r0
   29c9e:	07da      	lsls	r2, r3, #31
   29ca0:	d4e0      	bmi.n	29c64 <_fflush_r+0xc>
   29ca2:	89a3      	ldrh	r3, [r4, #12]
   29ca4:	059b      	lsls	r3, r3, #22
   29ca6:	d4dd      	bmi.n	29c64 <_fflush_r+0xc>
   29ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29caa:	f7e7 fe9b 	bl	119e4 <__retarget_lock_release_recursive>
   29cae:	e7d9      	b.n	29c64 <_fflush_r+0xc>
   29cb0:	4b05      	ldr	r3, [pc, #20]	; (29cc8 <_fflush_r+0x70>)
   29cb2:	429c      	cmp	r4, r3
   29cb4:	d101      	bne.n	29cba <_fflush_r+0x62>
   29cb6:	68ac      	ldr	r4, [r5, #8]
   29cb8:	e7df      	b.n	29c7a <_fflush_r+0x22>
   29cba:	4b04      	ldr	r3, [pc, #16]	; (29ccc <_fflush_r+0x74>)
   29cbc:	429c      	cmp	r4, r3
   29cbe:	bf08      	it	eq
   29cc0:	68ec      	ldreq	r4, [r5, #12]
   29cc2:	e7da      	b.n	29c7a <_fflush_r+0x22>
   29cc4:	00032578 	.word	0x00032578
   29cc8:	00032558 	.word	0x00032558
   29ccc:	00032538 	.word	0x00032538

00029cd0 <_lseek_r>:
   29cd0:	b538      	push	{r3, r4, r5, lr}
   29cd2:	4604      	mov	r4, r0
   29cd4:	4d06      	ldr	r5, [pc, #24]	; (29cf0 <_lseek_r+0x20>)
   29cd6:	4608      	mov	r0, r1
   29cd8:	4611      	mov	r1, r2
   29cda:	2200      	movs	r2, #0
   29cdc:	602a      	str	r2, [r5, #0]
   29cde:	461a      	mov	r2, r3
   29ce0:	f002 f864 	bl	2bdac <_lseek>
   29ce4:	1c43      	adds	r3, r0, #1
   29ce6:	d102      	bne.n	29cee <_lseek_r+0x1e>
   29ce8:	682b      	ldr	r3, [r5, #0]
   29cea:	b103      	cbz	r3, 29cee <_lseek_r+0x1e>
   29cec:	6023      	str	r3, [r4, #0]
   29cee:	bd38      	pop	{r3, r4, r5, pc}
   29cf0:	20021aec 	.word	0x20021aec

00029cf4 <__smakebuf_r>:
   29cf4:	898b      	ldrh	r3, [r1, #12]
   29cf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29cf8:	079d      	lsls	r5, r3, #30
   29cfa:	4606      	mov	r6, r0
   29cfc:	460c      	mov	r4, r1
   29cfe:	d507      	bpl.n	29d10 <__smakebuf_r+0x1c>
   29d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
   29d04:	6023      	str	r3, [r4, #0]
   29d06:	6123      	str	r3, [r4, #16]
   29d08:	2301      	movs	r3, #1
   29d0a:	6163      	str	r3, [r4, #20]
   29d0c:	b003      	add	sp, #12
   29d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29d10:	ab01      	add	r3, sp, #4
   29d12:	466a      	mov	r2, sp
   29d14:	f006 fffc 	bl	30d10 <__swhatbuf_r>
   29d18:	9f00      	ldr	r7, [sp, #0]
   29d1a:	4605      	mov	r5, r0
   29d1c:	4630      	mov	r0, r6
   29d1e:	4639      	mov	r1, r7
   29d20:	f7fe fd0e 	bl	28740 <_malloc_r>
   29d24:	b948      	cbnz	r0, 29d3a <__smakebuf_r+0x46>
   29d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29d2a:	059a      	lsls	r2, r3, #22
   29d2c:	d4ee      	bmi.n	29d0c <__smakebuf_r+0x18>
   29d2e:	f023 0303 	bic.w	r3, r3, #3
   29d32:	f043 0302 	orr.w	r3, r3, #2
   29d36:	81a3      	strh	r3, [r4, #12]
   29d38:	e7e2      	b.n	29d00 <__smakebuf_r+0xc>
   29d3a:	4b0d      	ldr	r3, [pc, #52]	; (29d70 <__smakebuf_r+0x7c>)
   29d3c:	62b3      	str	r3, [r6, #40]	; 0x28
   29d3e:	89a3      	ldrh	r3, [r4, #12]
   29d40:	6020      	str	r0, [r4, #0]
   29d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29d46:	81a3      	strh	r3, [r4, #12]
   29d48:	9b01      	ldr	r3, [sp, #4]
   29d4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
   29d4e:	b15b      	cbz	r3, 29d68 <__smakebuf_r+0x74>
   29d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29d54:	4630      	mov	r0, r6
   29d56:	f000 f84b 	bl	29df0 <_isatty_r>
   29d5a:	b128      	cbz	r0, 29d68 <__smakebuf_r+0x74>
   29d5c:	89a3      	ldrh	r3, [r4, #12]
   29d5e:	f023 0303 	bic.w	r3, r3, #3
   29d62:	f043 0301 	orr.w	r3, r3, #1
   29d66:	81a3      	strh	r3, [r4, #12]
   29d68:	89a3      	ldrh	r3, [r4, #12]
   29d6a:	431d      	orrs	r5, r3
   29d6c:	81a5      	strh	r5, [r4, #12]
   29d6e:	e7cd      	b.n	29d0c <__smakebuf_r+0x18>
   29d70:	00029089 	.word	0x00029089

00029d74 <_read_r>:
   29d74:	b538      	push	{r3, r4, r5, lr}
   29d76:	4604      	mov	r4, r0
   29d78:	4d06      	ldr	r5, [pc, #24]	; (29d94 <_read_r+0x20>)
   29d7a:	4608      	mov	r0, r1
   29d7c:	4611      	mov	r1, r2
   29d7e:	2200      	movs	r2, #0
   29d80:	602a      	str	r2, [r5, #0]
   29d82:	461a      	mov	r2, r3
   29d84:	f002 f807 	bl	2bd96 <_read>
   29d88:	1c43      	adds	r3, r0, #1
   29d8a:	d102      	bne.n	29d92 <_read_r+0x1e>
   29d8c:	682b      	ldr	r3, [r5, #0]
   29d8e:	b103      	cbz	r3, 29d92 <_read_r+0x1e>
   29d90:	6023      	str	r3, [r4, #0]
   29d92:	bd38      	pop	{r3, r4, r5, pc}
   29d94:	20021aec 	.word	0x20021aec

00029d98 <raise>:
   29d98:	4b02      	ldr	r3, [pc, #8]	; (29da4 <raise+0xc>)
   29d9a:	4601      	mov	r1, r0
   29d9c:	6818      	ldr	r0, [r3, #0]
   29d9e:	f006 bfee 	b.w	30d7e <_raise_r>
   29da2:	bf00      	nop
   29da4:	20008754 	.word	0x20008754

00029da8 <_kill_r>:
   29da8:	b538      	push	{r3, r4, r5, lr}
   29daa:	2300      	movs	r3, #0
   29dac:	4d06      	ldr	r5, [pc, #24]	; (29dc8 <_kill_r+0x20>)
   29dae:	4604      	mov	r4, r0
   29db0:	4608      	mov	r0, r1
   29db2:	4611      	mov	r1, r2
   29db4:	602b      	str	r3, [r5, #0]
   29db6:	f002 f800 	bl	2bdba <_kill>
   29dba:	1c43      	adds	r3, r0, #1
   29dbc:	d102      	bne.n	29dc4 <_kill_r+0x1c>
   29dbe:	682b      	ldr	r3, [r5, #0]
   29dc0:	b103      	cbz	r3, 29dc4 <_kill_r+0x1c>
   29dc2:	6023      	str	r3, [r4, #0]
   29dc4:	bd38      	pop	{r3, r4, r5, pc}
   29dc6:	bf00      	nop
   29dc8:	20021aec 	.word	0x20021aec

00029dcc <_fstat_r>:
   29dcc:	b538      	push	{r3, r4, r5, lr}
   29dce:	2300      	movs	r3, #0
   29dd0:	4d06      	ldr	r5, [pc, #24]	; (29dec <_fstat_r+0x20>)
   29dd2:	4604      	mov	r4, r0
   29dd4:	4608      	mov	r0, r1
   29dd6:	4611      	mov	r1, r2
   29dd8:	602b      	str	r3, [r5, #0]
   29dda:	f001 fff2 	bl	2bdc2 <_fstat>
   29dde:	1c43      	adds	r3, r0, #1
   29de0:	d102      	bne.n	29de8 <_fstat_r+0x1c>
   29de2:	682b      	ldr	r3, [r5, #0]
   29de4:	b103      	cbz	r3, 29de8 <_fstat_r+0x1c>
   29de6:	6023      	str	r3, [r4, #0]
   29de8:	bd38      	pop	{r3, r4, r5, pc}
   29dea:	bf00      	nop
   29dec:	20021aec 	.word	0x20021aec

00029df0 <_isatty_r>:
   29df0:	b538      	push	{r3, r4, r5, lr}
   29df2:	2300      	movs	r3, #0
   29df4:	4d05      	ldr	r5, [pc, #20]	; (29e0c <_isatty_r+0x1c>)
   29df6:	4604      	mov	r4, r0
   29df8:	4608      	mov	r0, r1
   29dfa:	602b      	str	r3, [r5, #0]
   29dfc:	f001 ffd8 	bl	2bdb0 <_isatty>
   29e00:	1c43      	adds	r3, r0, #1
   29e02:	d102      	bne.n	29e0a <_isatty_r+0x1a>
   29e04:	682b      	ldr	r3, [r5, #0]
   29e06:	b103      	cbz	r3, 29e0a <_isatty_r+0x1a>
   29e08:	6023      	str	r3, [r4, #0]
   29e0a:	bd38      	pop	{r3, r4, r5, pc}
   29e0c:	20021aec 	.word	0x20021aec

00029e10 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   29e10:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   29e12:	f7fd faed 	bl	273f0 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   29e16:	f7fe fbd5 	bl	285c4 <k_thread_system_pool_assign>
    return 0;
}
   29e1a:	2000      	movs	r0, #0
   29e1c:	bd08      	pop	{r3, pc}

00029e1e <uart_cb_2>:
}
   29e1e:	4770      	bx	lr

00029e20 <z_log_msg_static_create.constprop.0>:
   29e20:	2300      	movs	r3, #0
   29e22:	f7e4 bd21 	b.w	e868 <z_impl_z_log_msg_static_create>

00029e26 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   29e26:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   29e28:	6883      	ldr	r3, [r0, #8]
   29e2a:	2228      	movs	r2, #40	; 0x28
   29e2c:	68dc      	ldr	r4, [r3, #12]
   29e2e:	2332      	movs	r3, #50	; 0x32
   29e30:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   29e32:	bc10      	pop	{r4}
   29e34:	4760      	bx	ip

00029e36 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   29e36:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   29e38:	6883      	ldr	r3, [r0, #8]
   29e3a:	685c      	ldr	r4, [r3, #4]
   29e3c:	f04f 33ff 	mov.w	r3, #4294967295
   29e40:	46a4      	mov	ip, r4
}
   29e42:	bc10      	pop	{r4}
   29e44:	4760      	bx	ip

00029e46 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   29e46:	f7fb bbef 	b.w	25628 <z_impl_k_sem_take>

00029e4a <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   29e4a:	6883      	ldr	r3, [r0, #8]
   29e4c:	69db      	ldr	r3, [r3, #28]
   29e4e:	b10b      	cbz	r3, 29e54 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   29e50:	2201      	movs	r2, #1
   29e52:	4718      	bx	r3
}
   29e54:	4770      	bx	lr

00029e56 <send_protobuf>:
void send_protobuf(void){
   29e56:	b510      	push	{r4, lr}
   29e58:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
    buf_proto=send_array_dd_v0(); 
   29e5c:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   29e60:	4620      	mov	r0, r4
   29e62:	f7e1 ff01 	bl	bc68 <send_array_dd_v0>
    send_bluetooth(buf_proto);
   29e66:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   29e6a:	f240 72cc 	movw	r2, #1996	; 0x7cc
   29e6e:	4668      	mov	r0, sp
   29e70:	f006 fb69 	bl	30546 <memcpy>
   29e74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29e78:	f7e1 fb74 	bl	b564 <send_bluetooth>
}
   29e7c:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   29e80:	bd10      	pop	{r4, pc}

00029e82 <error>:
{
   29e82:	b508      	push	{r3, lr}
	turn_off_all_leds();
   29e84:	f7e1 fcce 	bl	b824 <turn_off_all_leds>
	return z_impl_k_sleep(timeout);
   29e88:	2100      	movs	r1, #0
   29e8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29e8e:	f7fd fa7b 	bl	27388 <z_impl_k_sleep>
	while (true) {
   29e92:	e7f9      	b.n	29e88 <error+0x6>

00029e94 <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   29e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   29e96:	6806      	ldr	r6, [r0, #0]
   29e98:	8902      	ldrh	r2, [r0, #8]
   29e9a:	8a33      	ldrh	r3, [r6, #16]
   29e9c:	429a      	cmp	r2, r3
   29e9e:	d271      	bcs.n	29f84 <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29ea0:	6831      	ldr	r1, [r6, #0]
   29ea2:	8942      	ldrh	r2, [r0, #10]
   29ea4:	0093      	lsls	r3, r2, #2
   29ea6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   29eaa:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29eae:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   29eb2:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29eb4:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29eb6:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   29eba:	d01f      	beq.n	29efc <load_descriptor_values+0x68>
   29ebc:	2902      	cmp	r1, #2
   29ebe:	d02a      	beq.n	29f16 <load_descriptor_values+0x82>
   29ec0:	2900      	cmp	r1, #0
   29ec2:	d135      	bne.n	29f30 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   29ec4:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   29ec8:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   29ecc:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   29ed0:	0f12      	lsrs	r2, r2, #28
   29ed2:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   29ed4:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   29ed6:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29eda:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   29edc:	2a00      	cmp	r2, #0
   29ede:	d134      	bne.n	29f4a <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   29ee0:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   29ee2:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   29ee4:	f004 040e 	and.w	r4, r4, #14
   29ee8:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   29eea:	bf11      	iteee	ne
   29eec:	2300      	movne	r3, #0
   29eee:	89c2      	ldrheq	r2, [r0, #14]
   29ef0:	6873      	ldreq	r3, [r6, #4]
   29ef2:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   29ef6:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   29ef8:	2001      	movs	r0, #1
}
   29efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29efc:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   29efe:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f02:	4419      	add	r1, r3
   29f04:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   29f06:	0f0b      	lsrs	r3, r1, #28
   29f08:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   29f0c:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   29f0e:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   29f10:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   29f14:	e7dd      	b.n	29ed2 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f16:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   29f18:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f1c:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29f1e:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f22:	0a1a      	lsrs	r2, r3, #8
   29f24:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   29f28:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   29f2a:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   29f2c:	898a      	ldrh	r2, [r1, #12]
            break;
   29f2e:	e7d0      	b.n	29ed2 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f30:	6832      	ldr	r2, [r6, #0]
   29f32:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29f34:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f38:	0a19      	lsrs	r1, r3, #8
   29f3a:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   29f3e:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f42:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   29f44:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   29f46:	b25b      	sxtb	r3, r3
            break;
   29f48:	e7c3      	b.n	29ed2 <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   29f4a:	443a      	add	r2, r7
   29f4c:	6182      	str	r2, [r0, #24]
        if (size_offset)
   29f4e:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   29f52:	b123      	cbz	r3, 29f5e <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   29f54:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29f56:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   29f58:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29f5a:	d109      	bne.n	29f70 <load_descriptor_values+0xdc>
   29f5c:	e00f      	b.n	29f7e <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   29f5e:	f004 0530 	and.w	r5, r4, #48	; 0x30
   29f62:	2d20      	cmp	r5, #32
   29f64:	d1f7      	bne.n	29f56 <load_descriptor_values+0xc2>
   29f66:	2c3f      	cmp	r4, #63	; 0x3f
   29f68:	d804      	bhi.n	29f74 <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   29f6a:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   29f6e:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   29f70:	61c2      	str	r2, [r0, #28]
   29f72:	e7b7      	b.n	29ee4 <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   29f74:	2980      	cmp	r1, #128	; 0x80
   29f76:	d1fa      	bne.n	29f6e <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   29f78:	f100 0314 	add.w	r3, r0, #20
   29f7c:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   29f7e:	6813      	ldr	r3, [r2, #0]
   29f80:	61c3      	str	r3, [r0, #28]
   29f82:	e7af      	b.n	29ee4 <load_descriptor_values+0x50>
        return false;
   29f84:	2000      	movs	r0, #0
   29f86:	e7b8      	b.n	29efa <load_descriptor_values+0x66>

00029f88 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   29f88:	8903      	ldrh	r3, [r0, #8]
{
   29f8a:	b510      	push	{r4, lr}
    iter->index++;
   29f8c:	3301      	adds	r3, #1
   29f8e:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   29f90:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   29f92:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   29f94:	8a0a      	ldrh	r2, [r1, #16]
   29f96:	429a      	cmp	r2, r3
   29f98:	d803      	bhi.n	29fa2 <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   29f9a:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   29f9c:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   29fa0:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   29fa2:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29fa4:	680b      	ldr	r3, [r1, #0]
   29fa6:	8942      	ldrh	r2, [r0, #10]
   29fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   29fac:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   29fae:	f001 0103 	and.w	r1, r1, #3
   29fb2:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   29fb6:	440a      	add	r2, r1
   29fb8:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   29fba:	8982      	ldrh	r2, [r0, #12]
   29fbc:	f003 0130 	and.w	r1, r3, #48	; 0x30
   29fc0:	2900      	cmp	r1, #0
   29fc2:	bf08      	it	eq
   29fc4:	3201      	addeq	r2, #1
   29fc6:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   29fc8:	89c2      	ldrh	r2, [r0, #14]
   29fca:	f003 030e 	and.w	r3, r3, #14
   29fce:	2b08      	cmp	r3, #8
   29fd0:	bf08      	it	eq
   29fd2:	3201      	addeq	r2, #1
   29fd4:	81c2      	strh	r2, [r0, #14]
}
   29fd6:	e7e3      	b.n	29fa0 <advance_iterator+0x18>

00029fd8 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   29fd8:	b570      	push	{r4, r5, r6, lr}
   29fda:	4604      	mov	r4, r0
   29fdc:	460e      	mov	r6, r1
   29fde:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   29fe0:	2100      	movs	r1, #0
   29fe2:	2220      	movs	r2, #32
   29fe4:	3008      	adds	r0, #8
   29fe6:	f006 fae8 	bl	305ba <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   29fea:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   29fee:	4620      	mov	r0, r4
}
   29ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   29ff4:	f7ff bf4e 	b.w	29e94 <load_descriptor_values>

00029ff8 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   29ff8:	b538      	push	{r3, r4, r5, lr}
   29ffa:	460c      	mov	r4, r1
   29ffc:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   29ffe:	680b      	ldr	r3, [r1, #0]
   2a000:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   2a002:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   2a004:	681b      	ldr	r3, [r3, #0]
   2a006:	0a1b      	lsrs	r3, r3, #8
   2a008:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a00c:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a00e:	bf14      	ite	ne
   2a010:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   2a012:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   2a014:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a016:	f7ff ffdf 	bl	29fd8 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   2a01a:	622c      	str	r4, [r5, #32]
    return status;
}
   2a01c:	bd38      	pop	{r3, r4, r5, pc}

0002a01e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   2a01e:	b510      	push	{r4, lr}
   2a020:	4604      	mov	r4, r0
    advance_iterator(iter);
   2a022:	f7ff ffb1 	bl	29f88 <advance_iterator>
    (void)load_descriptor_values(iter);
   2a026:	f7ff ff35 	bl	29e94 <load_descriptor_values>
    return iter->index != 0;
   2a02a:	8920      	ldrh	r0, [r4, #8]
}
   2a02c:	3800      	subs	r0, #0
   2a02e:	bf18      	it	ne
   2a030:	2001      	movne	r0, #1
   2a032:	bd10      	pop	{r4, pc}

0002a034 <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   2a034:	f7ff bfd0 	b.w	29fd8 <pb_field_iter_begin>

0002a038 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   2a038:	f7ff bfde 	b.w	29ff8 <pb_field_iter_begin_extension>

0002a03c <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   2a03c:	b410      	push	{r4}
   2a03e:	460b      	mov	r3, r1
   2a040:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   2a042:	8a52      	ldrh	r2, [r2, #18]
   2a044:	2a08      	cmp	r2, #8
   2a046:	d10e      	bne.n	2a066 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   2a048:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   2a04a:	b162      	cbz	r2, 2a066 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   2a04c:	b128      	cbz	r0, 2a05a <pb_default_field_callback+0x1e>
   2a04e:	6814      	ldr	r4, [r2, #0]
   2a050:	b11c      	cbz	r4, 2a05a <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   2a052:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a054:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   2a056:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a058:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   2a05a:	b123      	cbz	r3, 2a066 <pb_default_field_callback+0x2a>
   2a05c:	6814      	ldr	r4, [r2, #0]
   2a05e:	b114      	cbz	r4, 2a066 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a060:	4618      	mov	r0, r3
   2a062:	3204      	adds	r2, #4
   2a064:	e7f6      	b.n	2a054 <pb_default_field_callback+0x18>
}
   2a066:	2001      	movs	r0, #1
   2a068:	bc10      	pop	{r4}
   2a06a:	4770      	bx	lr

0002a06c <buf_write>:
{
   2a06c:	4603      	mov	r3, r0
   2a06e:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   2a070:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   2a072:	1884      	adds	r4, r0, r2
   2a074:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a076:	f006 fa66 	bl	30546 <memcpy>
}
   2a07a:	2001      	movs	r0, #1
   2a07c:	bd10      	pop	{r4, pc}

0002a07e <pb_encode_varint>:
{
   2a07e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   2a080:	2a80      	cmp	r2, #128	; 0x80
{
   2a082:	b085      	sub	sp, #20
    if (value <= 0x7F)
   2a084:	f173 0100 	sbcs.w	r1, r3, #0
{
   2a088:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   2a08a:	b2d4      	uxtb	r4, r2
   2a08c:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2a08e:	d206      	bcs.n	2a09e <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   2a090:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   2a092:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   2a096:	f7e1 ff57 	bl	bf48 <pb_write>
}
   2a09a:	b005      	add	sp, #20
   2a09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2a09e:	09d5      	lsrs	r5, r2, #7
   2a0a0:	4608      	mov	r0, r1
    size_t i = 0;
   2a0a2:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   2a0a4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a0a8:	ea53 0c05 	orrs.w	ip, r3, r5
   2a0ac:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2a0ae:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   2a0b2:	d108      	bne.n	2a0c6 <pb_encode_varint+0x48>
   2a0b4:	463a      	mov	r2, r7
    buffer[i++] = byte;
   2a0b6:	f102 0310 	add.w	r3, r2, #16
   2a0ba:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2a0bc:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2a0be:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   2a0c2:	3201      	adds	r2, #1
   2a0c4:	e7e7      	b.n	2a096 <pb_encode_varint+0x18>
        byte |= 0x80;
   2a0c6:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a0ca:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   2a0cc:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   2a0d0:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   2a0d4:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   2a0d8:	d1e6      	bne.n	2a0a8 <pb_encode_varint+0x2a>
    if (high)
   2a0da:	2b00      	cmp	r3, #0
   2a0dc:	d0eb      	beq.n	2a0b6 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2a0de:	0118      	lsls	r0, r3, #4
   2a0e0:	f000 0070 	and.w	r0, r0, #112	; 0x70
   2a0e4:	4304      	orrs	r4, r0
        high >>= 3;
   2a0e6:	08db      	lsrs	r3, r3, #3
        while (high)
   2a0e8:	2b00      	cmp	r3, #0
   2a0ea:	d0e4      	beq.n	2a0b6 <pb_encode_varint+0x38>
            byte |= 0x80;
   2a0ec:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   2a0f0:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   2a0f2:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   2a0f6:	3201      	adds	r2, #1
   2a0f8:	09db      	lsrs	r3, r3, #7
   2a0fa:	e7f5      	b.n	2a0e8 <pb_encode_varint+0x6a>

0002a0fc <pb_encode_svarint>:
    if (value < 0)
   2a0fc:	1892      	adds	r2, r2, r2
   2a0fe:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   2a102:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   2a106:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   2a10a:	f7ff bfb8 	b.w	2a07e <pb_encode_varint>

0002a10e <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   2a10e:	2204      	movs	r2, #4
   2a110:	f7e1 bf1a 	b.w	bf48 <pb_write>

0002a114 <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   2a114:	2208      	movs	r2, #8
   2a116:	f7e1 bf17 	b.w	bf48 <pb_write>

0002a11a <pb_encode_tag>:
{
   2a11a:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   2a11c:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   2a120:	0f5b      	lsrs	r3, r3, #29
   2a122:	f7ff bfac 	b.w	2a07e <pb_encode_varint>

0002a126 <pb_encode_string>:
{
   2a126:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a128:	2300      	movs	r3, #0
{
   2a12a:	4604      	mov	r4, r0
   2a12c:	460d      	mov	r5, r1
   2a12e:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a130:	f7ff ffa5 	bl	2a07e <pb_encode_varint>
   2a134:	b130      	cbz	r0, 2a144 <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   2a136:	4632      	mov	r2, r6
   2a138:	4629      	mov	r1, r5
   2a13a:	4620      	mov	r0, r4
}
   2a13c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   2a140:	f7e1 bf02 	b.w	bf48 <pb_write>
}
   2a144:	bd70      	pop	{r4, r5, r6, pc}

0002a146 <cbpprintf_external>:
{
   2a146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a14a:	4606      	mov	r6, r0
   2a14c:	460d      	mov	r5, r1
   2a14e:	4617      	mov	r7, r2
	if (buf == NULL) {
   2a150:	4698      	mov	r8, r3
   2a152:	b32b      	cbz	r3, 2a1a0 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   2a154:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a158:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a15c:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a160:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a162:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a164:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a168:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a16c:	441c      	add	r4, r3
   2a16e:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2a170:	45ca      	cmp	sl, r9
   2a172:	d309      	bcc.n	2a188 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2a174:	4639      	mov	r1, r7
   2a176:	4630      	mov	r0, r6
   2a178:	46ac      	mov	ip, r5
   2a17a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a17e:	f108 0308 	add.w	r3, r8, #8
}
   2a182:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2a186:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2a188:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2a18c:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2a190:	4620      	mov	r0, r4
		*ps = s;
   2a192:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2a196:	f7df f8f6 	bl	9386 <strlen>
   2a19a:	3001      	adds	r0, #1
   2a19c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a19e:	e7e7      	b.n	2a170 <cbpprintf_external+0x2a>
}
   2a1a0:	f06f 0015 	mvn.w	r0, #21
   2a1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a1a8 <is_ptr>:
{
   2a1a8:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2a1aa:	2500      	movs	r5, #0
{
   2a1ac:	4602      	mov	r2, r0
	bool mod = false;
   2a1ae:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2a1b0:	4614      	mov	r4, r2
   2a1b2:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a1b6:	b90b      	cbnz	r3, 2a1bc <is_ptr+0x14>
					return false;
   2a1b8:	4618      	mov	r0, r3
   2a1ba:	e009      	b.n	2a1d0 <is_ptr+0x28>
		if (mod) {
   2a1bc:	b198      	cbz	r0, 2a1e6 <is_ptr+0x3e>
			if (cnt == n) {
   2a1be:	428d      	cmp	r5, r1
   2a1c0:	d107      	bne.n	2a1d2 <is_ptr+0x2a>
				if (c == 'p') {
   2a1c2:	2b70      	cmp	r3, #112	; 0x70
   2a1c4:	d004      	beq.n	2a1d0 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2a1c6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2a1ca:	2a3a      	cmp	r2, #58	; 0x3a
   2a1cc:	d80b      	bhi.n	2a1e6 <is_ptr+0x3e>
					return false;
   2a1ce:	2000      	movs	r0, #0
}
   2a1d0:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2a1d2:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2a1d6:	2e3a      	cmp	r6, #58	; 0x3a
   2a1d8:	d805      	bhi.n	2a1e6 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2a1da:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2a1dc:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2a1de:	1c94      	adds	r4, r2, #2
   2a1e0:	2b00      	cmp	r3, #0
   2a1e2:	d0e9      	beq.n	2a1b8 <is_ptr+0x10>
   2a1e4:	2000      	movs	r0, #0
		if (c == '%') {
   2a1e6:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   2a1e8:	4622      	mov	r2, r4
			mod = !mod;
   2a1ea:	bf08      	it	eq
   2a1ec:	f080 0001 	eoreq.w	r0, r0, #1
   2a1f0:	e7de      	b.n	2a1b0 <is_ptr+0x8>

0002a1f2 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2a1f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2a1f4:	2364      	movs	r3, #100	; 0x64
{
   2a1f6:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2a1f8:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2a1fa:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2a1fc:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   2a1fe:	b969      	cbnz	r1, 2a21c <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   2a200:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2a202:	429a      	cmp	r2, r3
   2a204:	fbb2 f4f3 	udiv	r4, r2, r3
   2a208:	d20c      	bcs.n	2a224 <u8_to_dec+0x32>
   2a20a:	2b01      	cmp	r3, #1
   2a20c:	d00a      	beq.n	2a224 <u8_to_dec+0x32>
   2a20e:	b948      	cbnz	r0, 2a224 <u8_to_dec+0x32>
		value -= digit * divisor;
   2a210:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   2a214:	240a      	movs	r4, #10
   2a216:	fbb3 f3f4 	udiv	r3, r3, r4
   2a21a:	b2d2      	uxtb	r2, r2
	while (buflen > 0 && divisor > 0) {
   2a21c:	3e01      	subs	r6, #1
   2a21e:	d1f0      	bne.n	2a202 <u8_to_dec+0x10>
		*buf = '\0';
   2a220:	702e      	strb	r6, [r5, #0]
	return num_digits;
   2a222:	e7ed      	b.n	2a200 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   2a224:	3430      	adds	r4, #48	; 0x30
   2a226:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   2a22a:	fbb2 f4f3 	udiv	r4, r2, r3
   2a22e:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   2a232:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   2a236:	3901      	subs	r1, #1
			num_digits++;
   2a238:	3001      	adds	r0, #1
			buflen--;
   2a23a:	b2c9      	uxtb	r1, r1
			num_digits++;
   2a23c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2a23e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2a240:	b2db      	uxtb	r3, r3
   2a242:	e7dc      	b.n	2a1fe <u8_to_dec+0xc>

0002a244 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2a244:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2a248:	b2db      	uxtb	r3, r3
   2a24a:	2b09      	cmp	r3, #9
   2a24c:	d802      	bhi.n	2a254 <char2hex+0x10>
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2a24e:	2000      	movs	r0, #0
		*x = c - '0';
   2a250:	700b      	strb	r3, [r1, #0]
   2a252:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2a254:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2a258:	2b05      	cmp	r3, #5
   2a25a:	d802      	bhi.n	2a262 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2a25c:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2a25e:	b2c3      	uxtb	r3, r0
   2a260:	e7f5      	b.n	2a24e <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   2a262:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2a266:	2b05      	cmp	r3, #5
   2a268:	d801      	bhi.n	2a26e <char2hex+0x2a>
		*x = c - 'A' + 10;
   2a26a:	3837      	subs	r0, #55	; 0x37
   2a26c:	e7f7      	b.n	2a25e <char2hex+0x1a>
		return -EINVAL;
   2a26e:	f06f 0015 	mvn.w	r0, #21
}
   2a272:	4770      	bx	lr

0002a274 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2a274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a276:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2a278:	f001 0001 	and.w	r0, r1, #1
   2a27c:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   2a280:	429e      	cmp	r6, r3
   2a282:	ea4f 0751 	mov.w	r7, r1, lsr #1
   2a286:	d903      	bls.n	2a290 <hex2bin+0x1c>
		return 0;
   2a288:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2a28a:	4630      	mov	r0, r6
   2a28c:	b003      	add	sp, #12
   2a28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2a290:	b158      	cbz	r0, 2a2aa <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2a292:	7828      	ldrb	r0, [r5, #0]
   2a294:	f10d 0107 	add.w	r1, sp, #7
   2a298:	f7ff ffd4 	bl	2a244 <char2hex>
   2a29c:	2800      	cmp	r0, #0
   2a29e:	dbf3      	blt.n	2a288 <hex2bin+0x14>
		buf[0] = dec;
   2a2a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   2a2a4:	3501      	adds	r5, #1
		buf[0] = dec;
   2a2a6:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a2aa:	3501      	adds	r5, #1
   2a2ac:	4417      	add	r7, r2
   2a2ae:	42ba      	cmp	r2, r7
   2a2b0:	d0eb      	beq.n	2a28a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2a2b2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2a2b6:	f10d 0107 	add.w	r1, sp, #7
   2a2ba:	f7ff ffc3 	bl	2a244 <char2hex>
   2a2be:	2800      	cmp	r0, #0
   2a2c0:	dbe2      	blt.n	2a288 <hex2bin+0x14>
		buf[i] = dec << 4;
   2a2c2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2a2c6:	0124      	lsls	r4, r4, #4
   2a2c8:	b2e4      	uxtb	r4, r4
   2a2ca:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2a2cc:	f815 0b02 	ldrb.w	r0, [r5], #2
   2a2d0:	f7ff ffb8 	bl	2a244 <char2hex>
   2a2d4:	2800      	cmp	r0, #0
   2a2d6:	dbd7      	blt.n	2a288 <hex2bin+0x14>
		buf[i] += dec;
   2a2d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a2dc:	441c      	add	r4, r3
   2a2de:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a2e2:	e7e4      	b.n	2a2ae <hex2bin+0x3a>

0002a2e4 <arch_printk_char_out>:
}
   2a2e4:	2000      	movs	r0, #0
   2a2e6:	4770      	bx	lr

0002a2e8 <str_out>:
{
   2a2e8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a2ea:	688a      	ldr	r2, [r1, #8]
   2a2ec:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a2ee:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a2f0:	b114      	cbz	r4, 2a2f8 <str_out+0x10>
   2a2f2:	684b      	ldr	r3, [r1, #4]
   2a2f4:	4293      	cmp	r3, r2
   2a2f6:	dc01      	bgt.n	2a2fc <str_out+0x14>
		ctx->count++;
   2a2f8:	608d      	str	r5, [r1, #8]
}
   2a2fa:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a2fc:	3b01      	subs	r3, #1
   2a2fe:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a300:	bf08      	it	eq
   2a302:	2200      	moveq	r2, #0
   2a304:	608d      	str	r5, [r1, #8]
   2a306:	bf0c      	ite	eq
   2a308:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a30a:	54a0      	strbne	r0, [r4, r2]
   2a30c:	e7f5      	b.n	2a2fa <str_out+0x12>

0002a30e <printk>:
{
   2a30e:	b40f      	push	{r0, r1, r2, r3}
   2a310:	b507      	push	{r0, r1, r2, lr}
   2a312:	a904      	add	r1, sp, #16
   2a314:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a318:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a31a:	f7e2 fb03 	bl	c924 <vprintk>
}
   2a31e:	b003      	add	sp, #12
   2a320:	f85d eb04 	ldr.w	lr, [sp], #4
   2a324:	b004      	add	sp, #16
   2a326:	4770      	bx	lr

0002a328 <snprintk>:
{
   2a328:	b40c      	push	{r2, r3}
   2a32a:	b507      	push	{r0, r1, r2, lr}
   2a32c:	ab04      	add	r3, sp, #16
   2a32e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a332:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a334:	f7e2 fb04 	bl	c940 <vsnprintk>
}
   2a338:	b003      	add	sp, #12
   2a33a:	f85d eb04 	ldr.w	lr, [sp], #4
   2a33e:	b002      	add	sp, #8
   2a340:	4770      	bx	lr

0002a342 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a342:	4604      	mov	r4, r0
   2a344:	b508      	push	{r3, lr}
   2a346:	4608      	mov	r0, r1
   2a348:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a34a:	461a      	mov	r2, r3
   2a34c:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a34e:	f7fd f84f 	bl	273f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a352:	f7e7 f857 	bl	11404 <z_impl_k_thread_abort>

0002a356 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2a356:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a35a:	8840      	ldrh	r0, [r0, #2]
}
   2a35c:	0840      	lsrs	r0, r0, #1
   2a35e:	4770      	bx	lr

0002a360 <free_list_add>:
{
   2a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a362:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a364:	f7ff fff7 	bl	2a356 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a368:	fab0 f080 	clz	r0, r0
   2a36c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2a374:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2a378:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2a37a:	1d17      	adds	r7, r2, #4
{
   2a37c:	460c      	mov	r4, r1
   2a37e:	3206      	adds	r2, #6
   2a380:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2a382:	b956      	cbnz	r6, 2a39a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a384:	2101      	movs	r1, #1
   2a386:	fa01 f000 	lsl.w	r0, r1, r0
   2a38a:	68d9      	ldr	r1, [r3, #12]
   2a38c:	4301      	orrs	r1, r0
   2a38e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a390:	f8cc 4010 	str.w	r4, [ip, #16]
   2a394:	53dd      	strh	r5, [r3, r7]
   2a396:	529d      	strh	r5, [r3, r2]
}
   2a398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a39a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a39c:	3104      	adds	r1, #4
   2a39e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a3a0:	53d8      	strh	r0, [r3, r7]
   2a3a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a3a6:	529e      	strh	r6, [r3, r2]
   2a3a8:	80c5      	strh	r5, [r0, #6]
   2a3aa:	525d      	strh	r5, [r3, r1]
   2a3ac:	e7f4      	b.n	2a398 <free_list_add+0x38>

0002a3ae <free_list_remove_bidx>:
{
   2a3ae:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a3b0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a3b4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a3b6:	4299      	cmp	r1, r3
   2a3b8:	f102 0104 	add.w	r1, r2, #4
   2a3bc:	d10a      	bne.n	2a3d4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a3be:	2301      	movs	r3, #1
   2a3c0:	fa03 f202 	lsl.w	r2, r3, r2
   2a3c4:	68c3      	ldr	r3, [r0, #12]
   2a3c6:	ea23 0302 	bic.w	r3, r3, r2
   2a3ca:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a3cc:	2300      	movs	r3, #0
   2a3ce:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a3d2:	bd10      	pop	{r4, pc}
   2a3d4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a3d6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a3da:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2a3de:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a3e2:	80cb      	strh	r3, [r1, #6]
   2a3e4:	8082      	strh	r2, [r0, #4]
}
   2a3e6:	e7f4      	b.n	2a3d2 <free_list_remove_bidx+0x24>

0002a3e8 <free_list_remove>:
{
   2a3e8:	b508      	push	{r3, lr}
   2a3ea:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a3ec:	f7ff ffb3 	bl	2a356 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a3f0:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2a3f4:	4618      	mov	r0, r3
}
   2a3f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2a3fa:	f1c2 021f 	rsb	r2, r2, #31
   2a3fe:	f7ff bfd6 	b.w	2a3ae <free_list_remove_bidx>

0002a402 <alloc_chunk>:
{
   2a402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a406:	fab1 f581 	clz	r5, r1
   2a40a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2a40e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2a412:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2a416:	4603      	mov	r3, r0
   2a418:	460e      	mov	r6, r1
	if (b->next) {
   2a41a:	b1c2      	cbz	r2, 2a44e <alloc_chunk+0x4c>
   2a41c:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2a41e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2a422:	4618      	mov	r0, r3
   2a424:	4621      	mov	r1, r4
   2a426:	f7ff ff96 	bl	2a356 <chunk_size>
   2a42a:	42b0      	cmp	r0, r6
   2a42c:	d306      	bcc.n	2a43c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2a42e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2a430:	4618      	mov	r0, r3
   2a432:	f7ff ffbc 	bl	2a3ae <free_list_remove_bidx>
}
   2a436:	4620      	mov	r0, r4
   2a438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2a43c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2a440:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2a442:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2a444:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2a448:	d001      	beq.n	2a44e <alloc_chunk+0x4c>
   2a44a:	4282      	cmp	r2, r0
   2a44c:	d1e7      	bne.n	2a41e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a44e:	f04f 34ff 	mov.w	r4, #4294967295
   2a452:	f1c5 0220 	rsb	r2, r5, #32
   2a456:	4094      	lsls	r4, r2
   2a458:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2a45a:	4014      	ands	r4, r2
   2a45c:	d0eb      	beq.n	2a436 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2a45e:	fa94 f2a4 	rbit	r2, r4
   2a462:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a466:	1d11      	adds	r1, r2, #4
   2a468:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a46c:	4621      	mov	r1, r4
   2a46e:	e7df      	b.n	2a430 <alloc_chunk+0x2e>

0002a470 <merge_chunks>:
{
   2a470:	b538      	push	{r3, r4, r5, lr}
   2a472:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a474:	f7ff ff6f 	bl	2a356 <chunk_size>
{
   2a478:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a47a:	4604      	mov	r4, r0
   2a47c:	4611      	mov	r1, r2
   2a47e:	4618      	mov	r0, r3
   2a480:	f7ff ff69 	bl	2a356 <chunk_size>
   2a484:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a486:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2a488:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a48c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2a48e:	4618      	mov	r0, r3
   2a490:	f7ff ff61 	bl	2a356 <chunk_size>
	void *cmem = &buf[c];
   2a494:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a496:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2a49a:	bd38      	pop	{r3, r4, r5, pc}

0002a49c <split_chunks>:
{
   2a49c:	b538      	push	{r3, r4, r5, lr}
   2a49e:	460c      	mov	r4, r1
   2a4a0:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2a4a2:	f7ff ff58 	bl	2a356 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2a4a6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2a4a8:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2a4aa:	4405      	add	r5, r0
   2a4ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a4b0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a4b2:	8060      	strh	r0, [r4, #2]
   2a4b4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a4b8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2a4ba:	8044      	strh	r4, [r0, #2]
   2a4bc:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2a4c0:	4618      	mov	r0, r3
   2a4c2:	4611      	mov	r1, r2
   2a4c4:	f7ff ff47 	bl	2a356 <chunk_size>
	void *cmem = &buf[c];
   2a4c8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a4ca:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2a4ce:	bd38      	pop	{r3, r4, r5, pc}

0002a4d0 <free_chunk>:
{
   2a4d0:	b538      	push	{r3, r4, r5, lr}
   2a4d2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2a4d4:	f7ff ff3f 	bl	2a356 <chunk_size>
   2a4d8:	460c      	mov	r4, r1
   2a4da:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2a4dc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a4e0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a4e2:	07da      	lsls	r2, r3, #31
   2a4e4:	d40a      	bmi.n	2a4fc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2a4e6:	4628      	mov	r0, r5
   2a4e8:	f7ff ff7e 	bl	2a3e8 <free_list_remove>
	return c + chunk_size(h, c);
   2a4ec:	4621      	mov	r1, r4
   2a4ee:	4628      	mov	r0, r5
   2a4f0:	f7ff ff31 	bl	2a356 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2a4f4:	1822      	adds	r2, r4, r0
   2a4f6:	4628      	mov	r0, r5
   2a4f8:	f7ff ffba 	bl	2a470 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2a4fc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a500:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2a502:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a506:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a508:	07db      	lsls	r3, r3, #31
   2a50a:	d40c      	bmi.n	2a526 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2a50c:	4628      	mov	r0, r5
   2a50e:	f7ff ff6b 	bl	2a3e8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2a512:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2a516:	4622      	mov	r2, r4
   2a518:	1a61      	subs	r1, r4, r1
   2a51a:	4628      	mov	r0, r5
   2a51c:	f7ff ffa8 	bl	2a470 <merge_chunks>
   2a520:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a524:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2a526:	4621      	mov	r1, r4
   2a528:	4628      	mov	r0, r5
}
   2a52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2a52e:	f7ff bf17 	b.w	2a360 <free_list_add>

0002a532 <sys_heap_alloc>:
{
   2a532:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2a534:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a536:	b909      	cbnz	r1, 2a53c <sys_heap_alloc+0xa>
		return NULL;
   2a538:	2000      	movs	r0, #0
}
   2a53a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a53c:	68ab      	ldr	r3, [r5, #8]
   2a53e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2a542:	d9f9      	bls.n	2a538 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a544:	310b      	adds	r1, #11
   2a546:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a548:	4621      	mov	r1, r4
   2a54a:	4628      	mov	r0, r5
   2a54c:	f7ff ff59 	bl	2a402 <alloc_chunk>
	if (c == 0U) {
   2a550:	4606      	mov	r6, r0
   2a552:	2800      	cmp	r0, #0
   2a554:	d0f0      	beq.n	2a538 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2a556:	4601      	mov	r1, r0
   2a558:	4628      	mov	r0, r5
   2a55a:	f7ff fefc 	bl	2a356 <chunk_size>
   2a55e:	42a0      	cmp	r0, r4
   2a560:	d907      	bls.n	2a572 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2a562:	4628      	mov	r0, r5
   2a564:	1932      	adds	r2, r6, r4
   2a566:	f7ff ff99 	bl	2a49c <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a56a:	4611      	mov	r1, r2
   2a56c:	4628      	mov	r0, r5
   2a56e:	f7ff fef7 	bl	2a360 <free_list_add>
	void *cmem = &buf[c];
   2a572:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a576:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a578:	8853      	ldrh	r3, [r2, #2]
   2a57a:	3004      	adds	r0, #4
   2a57c:	f043 0301 	orr.w	r3, r3, #1
   2a580:	8053      	strh	r3, [r2, #2]
	return mem;
   2a582:	e7da      	b.n	2a53a <sys_heap_alloc+0x8>

0002a584 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a584:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2a586:	f013 0307 	ands.w	r3, r3, #7
   2a58a:	d105      	bne.n	2a598 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a58c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2a58e:	2b00      	cmp	r3, #0
   2a590:	bf0c      	ite	eq
   2a592:	2000      	moveq	r0, #0
   2a594:	2003      	movne	r0, #3
   2a596:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a598:	2b02      	cmp	r3, #2
   2a59a:	d105      	bne.n	2a5a8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a59c:	8bc0      	ldrh	r0, [r0, #30]
   2a59e:	fab0 f080 	clz	r0, r0
   2a5a2:	0940      	lsrs	r0, r0, #5
   2a5a4:	0080      	lsls	r0, r0, #2
   2a5a6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a5a8:	2b01      	cmp	r3, #1
   2a5aa:	d105      	bne.n	2a5b8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a5ac:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2a5ae:	2b00      	cmp	r3, #0
   2a5b0:	bf0c      	ite	eq
   2a5b2:	2000      	moveq	r0, #0
   2a5b4:	2005      	movne	r0, #5
   2a5b6:	4770      	bx	lr
	int evt = EVT_NOP;
   2a5b8:	2000      	movs	r0, #0
}
   2a5ba:	4770      	bx	lr

0002a5bc <validate_args>:
{
   2a5bc:	b510      	push	{r4, lr}
   2a5be:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a5c0:	b100      	cbz	r0, 2a5c4 <validate_args+0x8>
   2a5c2:	b911      	cbnz	r1, 2a5ca <validate_args+0xe>
		return -EINVAL;
   2a5c4:	f06f 0015 	mvn.w	r0, #21
}
   2a5c8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2a5ca:	1d08      	adds	r0, r1, #4
   2a5cc:	f000 f82f 	bl	2a62e <sys_notify_validate>
	if ((rv == 0)
   2a5d0:	2800      	cmp	r0, #0
   2a5d2:	d1f9      	bne.n	2a5c8 <validate_args+0xc>
	    && ((cli->notify.flags
   2a5d4:	68a3      	ldr	r3, [r4, #8]
   2a5d6:	2b03      	cmp	r3, #3
   2a5d8:	d9f6      	bls.n	2a5c8 <validate_args+0xc>
   2a5da:	e7f3      	b.n	2a5c4 <validate_args+0x8>

0002a5dc <notify_one>:
{
   2a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a5e0:	460d      	mov	r5, r1
   2a5e2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a5e4:	4619      	mov	r1, r3
   2a5e6:	1d28      	adds	r0, r5, #4
{
   2a5e8:	4690      	mov	r8, r2
   2a5ea:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a5ec:	f7e2 fdae 	bl	d14c <sys_notify_finalize>
	if (cb) {
   2a5f0:	4604      	mov	r4, r0
   2a5f2:	b138      	cbz	r0, 2a604 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2a5f4:	4633      	mov	r3, r6
   2a5f6:	4642      	mov	r2, r8
   2a5f8:	4629      	mov	r1, r5
   2a5fa:	4638      	mov	r0, r7
   2a5fc:	46a4      	mov	ip, r4
}
   2a5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2a602:	4760      	bx	ip
}
   2a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a608 <onoff_manager_init>:
{
   2a608:	b538      	push	{r3, r4, r5, lr}
   2a60a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2a60c:	4605      	mov	r5, r0
   2a60e:	b158      	cbz	r0, 2a628 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2a610:	b151      	cbz	r1, 2a628 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2a612:	680b      	ldr	r3, [r1, #0]
   2a614:	b143      	cbz	r3, 2a628 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2a616:	684b      	ldr	r3, [r1, #4]
   2a618:	b133      	cbz	r3, 2a628 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a61a:	2220      	movs	r2, #32
   2a61c:	2100      	movs	r1, #0
   2a61e:	f005 ffcc 	bl	305ba <memset>
	return 0;
   2a622:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a624:	612c      	str	r4, [r5, #16]
}
   2a626:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2a628:	f06f 0015 	mvn.w	r0, #21
   2a62c:	e7fb      	b.n	2a626 <onoff_manager_init+0x1e>

0002a62e <sys_notify_validate>:
	if (notify == NULL) {
   2a62e:	4603      	mov	r3, r0
   2a630:	b140      	cbz	r0, 2a644 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a632:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2a634:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2a638:	2a02      	cmp	r2, #2
   2a63a:	d006      	beq.n	2a64a <sys_notify_validate+0x1c>
   2a63c:	2a03      	cmp	r2, #3
   2a63e:	d004      	beq.n	2a64a <sys_notify_validate+0x1c>
   2a640:	2a01      	cmp	r2, #1
   2a642:	d005      	beq.n	2a650 <sys_notify_validate+0x22>
   2a644:	f06f 0015 	mvn.w	r0, #21
}
   2a648:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2a64a:	681a      	ldr	r2, [r3, #0]
   2a64c:	2a00      	cmp	r2, #0
   2a64e:	d0f9      	beq.n	2a644 <sys_notify_validate+0x16>
		notify->result = 0;
   2a650:	2000      	movs	r0, #0
   2a652:	6098      	str	r0, [r3, #8]
   2a654:	4770      	bx	lr

0002a656 <outs>:
{
   2a656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a65a:	4607      	mov	r7, r0
   2a65c:	4688      	mov	r8, r1
   2a65e:	4615      	mov	r5, r2
   2a660:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a662:	4614      	mov	r4, r2
   2a664:	42b4      	cmp	r4, r6
   2a666:	d305      	bcc.n	2a674 <outs+0x1e>
   2a668:	b10e      	cbz	r6, 2a66e <outs+0x18>
	return (int)count;
   2a66a:	1b60      	subs	r0, r4, r5
   2a66c:	e008      	b.n	2a680 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a66e:	7823      	ldrb	r3, [r4, #0]
   2a670:	2b00      	cmp	r3, #0
   2a672:	d0fa      	beq.n	2a66a <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2a674:	4641      	mov	r1, r8
   2a676:	f814 0b01 	ldrb.w	r0, [r4], #1
   2a67a:	47b8      	blx	r7
		if (rc < 0) {
   2a67c:	2800      	cmp	r0, #0
   2a67e:	daf1      	bge.n	2a664 <outs+0xe>
}
   2a680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a684 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2a684:	4040      	eors	r0, r0
   2a686:	f380 8811 	msr	BASEPRI, r0
   2a68a:	f04f 0004 	mov.w	r0, #4
   2a68e:	df02      	svc	2
}
   2a690:	4770      	bx	lr

0002a692 <assert_print>:

void assert_print(const char *fmt, ...)
{
   2a692:	b40f      	push	{r0, r1, r2, r3}
   2a694:	b507      	push	{r0, r1, r2, lr}
   2a696:	a904      	add	r1, sp, #16
   2a698:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2a69c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2a69e:	f7e2 f941 	bl	c924 <vprintk>

	va_end(ap);
}
   2a6a2:	b003      	add	sp, #12
   2a6a4:	f85d eb04 	ldr.w	lr, [sp], #4
   2a6a8:	b004      	add	sp, #16
   2a6aa:	4770      	bx	lr

0002a6ac <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2a6ac:	68c3      	ldr	r3, [r0, #12]
   2a6ae:	6802      	ldr	r2, [r0, #0]
   2a6b0:	4293      	cmp	r3, r2
   2a6b2:	d904      	bls.n	2a6be <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   2a6b4:	3b01      	subs	r3, #1
   2a6b6:	1a9a      	subs	r2, r3, r2
		return false;
   2a6b8:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a6ba:	600a      	str	r2, [r1, #0]
}
   2a6bc:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a6be:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   2a6c0:	b913      	cbnz	r3, 2a6c8 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a6c2:	3801      	subs	r0, #1
   2a6c4:	1a82      	subs	r2, r0, r2
		return false;
   2a6c6:	e7f7      	b.n	2a6b8 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   2a6c8:	1a82      	subs	r2, r0, r2
	return true;
   2a6ca:	2001      	movs	r0, #1
   2a6cc:	e7f5      	b.n	2a6ba <free_space+0xe>

0002a6ce <get_usage>:
{
   2a6ce:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2a6d0:	a901      	add	r1, sp, #4
{
   2a6d2:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2a6d4:	f7ff ffea 	bl	2a6ac <free_space>
   2a6d8:	b120      	cbz	r0, 2a6e4 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2a6da:	9b01      	ldr	r3, [sp, #4]
   2a6dc:	68e2      	ldr	r2, [r4, #12]
   2a6de:	3b01      	subs	r3, #1
   2a6e0:	4413      	add	r3, r2
   2a6e2:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   2a6e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a6e6:	9b01      	ldr	r3, [sp, #4]
   2a6e8:	1ac0      	subs	r0, r0, r3
}
   2a6ea:	3801      	subs	r0, #1
   2a6ec:	b002      	add	sp, #8
   2a6ee:	bd10      	pop	{r4, pc}

0002a6f0 <idx_inc>:
{
   2a6f0:	b510      	push	{r4, lr}
   2a6f2:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2a6f4:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2a6f6:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2a6f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2a6fa:	07d2      	lsls	r2, r2, #31
   2a6fc:	d502      	bpl.n	2a704 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2a6fe:	3b01      	subs	r3, #1
   2a700:	4018      	ands	r0, r3
}
   2a702:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2a704:	4298      	cmp	r0, r3
   2a706:	bf28      	it	cs
   2a708:	1ac0      	subcs	r0, r0, r3
   2a70a:	e7fa      	b.n	2a702 <idx_inc+0x12>

0002a70c <add_skip_item>:
{
   2a70c:	b538      	push	{r3, r4, r5, lr}
   2a70e:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a710:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   2a712:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a714:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2a716:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a71a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a71e:	6801      	ldr	r1, [r0, #0]
   2a720:	462a      	mov	r2, r5
{
   2a722:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a724:	f7ff ffe4 	bl	2a6f0 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2a728:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a72a:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2a72c:	462a      	mov	r2, r5
   2a72e:	4620      	mov	r0, r4
   2a730:	f7ff ffde 	bl	2a6f0 <idx_inc>
   2a734:	6060      	str	r0, [r4, #4]
}
   2a736:	bd38      	pop	{r3, r4, r5, pc}

0002a738 <max_utilization_update>:
{
   2a738:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2a73a:	6903      	ldr	r3, [r0, #16]
{
   2a73c:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2a73e:	075b      	lsls	r3, r3, #29
   2a740:	d506      	bpl.n	2a750 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2a742:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2a744:	f7ff ffc3 	bl	2a6ce <get_usage>
   2a748:	4285      	cmp	r5, r0
   2a74a:	bf2c      	ite	cs
   2a74c:	62a5      	strcs	r5, [r4, #40]	; 0x28
   2a74e:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   2a750:	bd38      	pop	{r3, r4, r5, pc}

0002a752 <drop_item_locked>:
{
   2a752:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a756:	461f      	mov	r7, r3
	*user_packet = false;
   2a758:	2300      	movs	r3, #0
   2a75a:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2a75c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2a760:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   2a764:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   2a766:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   2a76a:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   2a76c:	f003 0303 	and.w	r3, r3, #3
   2a770:	2b02      	cmp	r3, #2
{
   2a772:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2a774:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2a778:	d103      	bne.n	2a782 <drop_item_locked+0x30>
		return item->skip.len;
   2a77a:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2a77e:	08ad      	lsrs	r5, r5, #2
   2a780:	d12e      	bne.n	2a7e0 <drop_item_locked+0x8e>
   2a782:	4630      	mov	r0, r6
   2a784:	69e3      	ldr	r3, [r4, #28]
   2a786:	4798      	blx	r3
   2a788:	4605      	mov	r5, r0
	} else if (allow_drop) {
   2a78a:	f1b8 0f00 	cmp.w	r8, #0
   2a78e:	d038      	beq.n	2a802 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   2a790:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   2a794:	079b      	lsls	r3, r3, #30
   2a796:	d531      	bpl.n	2a7fc <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   2a798:	4620      	mov	r0, r4
   2a79a:	f10b 0101 	add.w	r1, fp, #1
   2a79e:	f7ff ffb5 	bl	2a70c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2a7a2:	6861      	ldr	r1, [r4, #4]
   2a7a4:	462a      	mov	r2, r5
   2a7a6:	4620      	mov	r0, r4
   2a7a8:	f7ff ffa2 	bl	2a6f0 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a7ac:	6821      	ldr	r1, [r4, #0]
   2a7ae:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2a7b0:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a7b2:	4620      	mov	r0, r4
   2a7b4:	f7ff ff9c 	bl	2a6f0 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a7b8:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a7ba:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a7bc:	68e1      	ldr	r1, [r4, #12]
   2a7be:	4620      	mov	r0, r4
   2a7c0:	f7ff ff96 	bl	2a6f0 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2a7c4:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   2a7c6:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2a7ca:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2a7ce:	f002 0203 	and.w	r2, r2, #3
   2a7d2:	2a02      	cmp	r2, #2
   2a7d4:	d10e      	bne.n	2a7f4 <drop_item_locked+0xa2>
		return item->skip.len;
   2a7d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   2a7da:	089b      	lsrs	r3, r3, #2
   2a7dc:	d00a      	beq.n	2a7f4 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   2a7de:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a7e0:	68e1      	ldr	r1, [r4, #12]
   2a7e2:	462a      	mov	r2, r5
   2a7e4:	4620      	mov	r0, r4
   2a7e6:	f7ff ff83 	bl	2a6f0 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2a7ea:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   2a7ee:	4630      	mov	r0, r6
   2a7f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   2a7f4:	4630      	mov	r0, r6
   2a7f6:	69e3      	ldr	r3, [r4, #28]
   2a7f8:	4798      	blx	r3
   2a7fa:	4405      	add	r5, r0
			*user_packet = true;
   2a7fc:	2301      	movs	r3, #1
   2a7fe:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   2a800:	e7ee      	b.n	2a7e0 <drop_item_locked+0x8e>
		item = NULL;
   2a802:	4646      	mov	r6, r8
	return item;
   2a804:	e7f3      	b.n	2a7ee <drop_item_locked+0x9c>

0002a806 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2a806:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2a80a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2a80c:	bf88      	it	hi
   2a80e:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   2a810:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2a812:	1e18      	subs	r0, r3, #0
   2a814:	bf18      	it	ne
   2a816:	2001      	movne	r0, #1
   2a818:	4770      	bx	lr

0002a81a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2a81a:	4770      	bx	lr

0002a81c <nordicsemi_nrf53_init>:
{
   2a81c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a81e:	f04f 0320 	mov.w	r3, #32
   2a822:	f3ef 8511 	mrs	r5, BASEPRI
   2a826:	f383 8812 	msr	BASEPRI_MAX, r3
   2a82a:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   2a82e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   2a832:	2401      	movs	r4, #1
   2a834:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   2a836:	4621      	mov	r1, r4
   2a838:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2a83c:	2021      	movs	r0, #33	; 0x21
   2a83e:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   2a842:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   2a846:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   2a84a:	f7e3 fc79 	bl	e140 <soc_secure_gpio_pin_mcu_select>
   2a84e:	4621      	mov	r1, r4
   2a850:	2020      	movs	r0, #32
   2a852:	f7e3 fc75 	bl	e140 <soc_secure_gpio_pin_mcu_select>
   2a856:	4621      	mov	r1, r4
   2a858:	200b      	movs	r0, #11
   2a85a:	f7e3 fc71 	bl	e140 <soc_secure_gpio_pin_mcu_select>
   2a85e:	4621      	mov	r1, r4
   2a860:	200a      	movs	r0, #10
   2a862:	f7e3 fc6d 	bl	e140 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   2a866:	f385 8811 	msr	BASEPRI, r5
   2a86a:	f3bf 8f6f 	isb	sy
}
   2a86e:	2000      	movs	r0, #0
   2a870:	bd38      	pop	{r3, r4, r5, pc}

0002a872 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2a872:	2806      	cmp	r0, #6
   2a874:	d108      	bne.n	2a888 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2a876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a87a:	2201      	movs	r2, #1
   2a87c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a880:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a884:	bf20      	wfe
    while (true)
   2a886:	e7fd      	b.n	2a884 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2a888:	4770      	bx	lr

0002a88a <pm_state_exit_post_ops>:
   2a88a:	2300      	movs	r3, #0
   2a88c:	f383 8811 	msr	BASEPRI, r3
   2a890:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a894:	4770      	bx	lr

0002a896 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   2a896:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2a898:	ab01      	add	r3, sp, #4
   2a89a:	f004 f8bf 	bl	2ea1c <tfm_platform_mem_read>

	switch (status) {
   2a89e:	2802      	cmp	r0, #2
   2a8a0:	d00a      	beq.n	2a8b8 <soc_secure_mem_read+0x22>
   2a8a2:	2803      	cmp	r0, #3
   2a8a4:	d00b      	beq.n	2a8be <soc_secure_mem_read+0x28>
   2a8a6:	b968      	cbnz	r0, 2a8c4 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2a8a8:	9801      	ldr	r0, [sp, #4]
   2a8aa:	3800      	subs	r0, #0
   2a8ac:	bf18      	it	ne
   2a8ae:	2001      	movne	r0, #1
   2a8b0:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   2a8b2:	b003      	add	sp, #12
   2a8b4:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2a8b8:	f06f 0015 	mvn.w	r0, #21
   2a8bc:	e7f9      	b.n	2a8b2 <soc_secure_mem_read+0x1c>
	switch (status) {
   2a8be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a8c2:	e7f6      	b.n	2a8b2 <soc_secure_mem_read+0x1c>
		return -EPERM;
   2a8c4:	f04f 30ff 	mov.w	r0, #4294967295
   2a8c8:	e7f3      	b.n	2a8b2 <soc_secure_mem_read+0x1c>

0002a8ca <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   2a8ca:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2a8cc:	075b      	lsls	r3, r3, #29
   2a8ce:	d40b      	bmi.n	2a8e8 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2a8d0:	6803      	ldr	r3, [r0, #0]
   2a8d2:	8842      	ldrh	r2, [r0, #2]
   2a8d4:	f3c3 2349 	ubfx	r3, r3, #9, #10
   2a8d8:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   2a8dc:	1898      	adds	r0, r3, r2
   2a8de:	3017      	adds	r0, #23
   2a8e0:	f020 0007 	bic.w	r0, r0, #7
   2a8e4:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   2a8e6:	4770      	bx	lr
	return 0;
   2a8e8:	2000      	movs	r0, #0
}
   2a8ea:	4770      	bx	lr

0002a8ec <dummy_timestamp>:
}
   2a8ec:	2000      	movs	r0, #0
   2a8ee:	4770      	bx	lr

0002a8f0 <default_get_timestamp>:
   2a8f0:	f003 bf87 	b.w	2e802 <sys_clock_cycle_get_32>

0002a8f4 <atomic_inc>:
{
   2a8f4:	4603      	mov	r3, r0
}
   2a8f6:	e8d3 0fef 	ldaex	r0, [r3]
   2a8fa:	1c42      	adds	r2, r0, #1
   2a8fc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2a900:	2900      	cmp	r1, #0
   2a902:	d1f8      	bne.n	2a8f6 <atomic_inc+0x2>
   2a904:	4770      	bx	lr

0002a906 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2a906:	2001      	movs	r0, #1
   2a908:	f7e3 bd44 	b.w	e394 <z_log_dropped>

0002a90c <z_log_get_tag>:
}
   2a90c:	2000      	movs	r0, #0
   2a90e:	4770      	bx	lr

0002a910 <z_cbprintf_cpy>:
{
   2a910:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2a912:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2a916:	1b9b      	subs	r3, r3, r6
   2a918:	428b      	cmp	r3, r1
{
   2a91a:	460c      	mov	r4, r1
   2a91c:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2a91e:	d30a      	bcc.n	2a936 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2a920:	6813      	ldr	r3, [r2, #0]
   2a922:	460a      	mov	r2, r1
   2a924:	4601      	mov	r1, r0
   2a926:	1998      	adds	r0, r3, r6
   2a928:	f005 fe0d 	bl	30546 <memcpy>
	return len;
   2a92c:	4620      	mov	r0, r4
	desc->off += len;
   2a92e:	68ab      	ldr	r3, [r5, #8]
   2a930:	4423      	add	r3, r4
   2a932:	60ab      	str	r3, [r5, #8]
}
   2a934:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2a936:	f06f 001b 	mvn.w	r0, #27
   2a93a:	e7fb      	b.n	2a934 <z_cbprintf_cpy+0x24>

0002a93c <z_log_msg_finalize>:
{
   2a93c:	b570      	push	{r4, r5, r6, lr}
   2a93e:	460e      	mov	r6, r1
   2a940:	4615      	mov	r5, r2
   2a942:	4619      	mov	r1, r3
	if (!msg) {
   2a944:	4604      	mov	r4, r0
   2a946:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2a94a:	b918      	cbnz	r0, 2a954 <z_log_msg_finalize+0x18>
}
   2a94c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2a950:	f7e3 bd20 	b.w	e394 <z_log_dropped>
	if (data) {
   2a954:	b12b      	cbz	r3, 2a962 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2a956:	3010      	adds	r0, #16
   2a958:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2a95c:	4418      	add	r0, r3
   2a95e:	f005 fdf2 	bl	30546 <memcpy>
	msg->hdr.source = source;
   2a962:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2a966:	4620      	mov	r0, r4
}
   2a968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2a96c:	f7e3 bf36 	b.w	e7dc <z_log_msg_commit>

0002a970 <buffer_write>:
{
   2a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a972:	4606      	mov	r6, r0
   2a974:	460d      	mov	r5, r1
   2a976:	4614      	mov	r4, r2
   2a978:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2a97a:	4621      	mov	r1, r4
   2a97c:	4628      	mov	r0, r5
   2a97e:	463a      	mov	r2, r7
   2a980:	47b0      	blx	r6
	} while (len != 0);
   2a982:	1a24      	subs	r4, r4, r0
		buf += processed;
   2a984:	4405      	add	r5, r0
	} while (len != 0);
   2a986:	d1f8      	bne.n	2a97a <buffer_write+0xa>
}
   2a988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a98a <cbvprintf>:
{
   2a98a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2a98c:	2400      	movs	r4, #0
   2a98e:	9400      	str	r4, [sp, #0]
   2a990:	f7e2 fc80 	bl	d294 <z_cbvprintf_impl>
}
   2a994:	b002      	add	sp, #8
   2a996:	bd10      	pop	{r4, pc}

0002a998 <log_output_flush>:
{
   2a998:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2a99a:	6842      	ldr	r2, [r0, #4]
{
   2a99c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2a99e:	e9d2 2300 	ldrd	r2, r3, [r2]
   2a9a2:	6881      	ldr	r1, [r0, #8]
   2a9a4:	6800      	ldr	r0, [r0, #0]
   2a9a6:	f7ff ffe3 	bl	2a970 <buffer_write>
	output->control_block->offset = 0;
   2a9aa:	2200      	movs	r2, #0
   2a9ac:	6863      	ldr	r3, [r4, #4]
   2a9ae:	601a      	str	r2, [r3, #0]
}
   2a9b0:	bd10      	pop	{r4, pc}

0002a9b2 <cr_out_func>:
	if (c == '\n') {
   2a9b2:	280a      	cmp	r0, #10
{
   2a9b4:	b538      	push	{r3, r4, r5, lr}
   2a9b6:	4604      	mov	r4, r0
   2a9b8:	460d      	mov	r5, r1
	if (c == '\n') {
   2a9ba:	d102      	bne.n	2a9c2 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2a9bc:	200d      	movs	r0, #13
   2a9be:	f7e3 ffd9 	bl	e974 <out_func>
	out_func(c, ctx);
   2a9c2:	4629      	mov	r1, r5
   2a9c4:	4620      	mov	r0, r4
   2a9c6:	f7e3 ffd5 	bl	e974 <out_func>
}
   2a9ca:	2000      	movs	r0, #0
   2a9cc:	bd38      	pop	{r3, r4, r5, pc}

0002a9ce <nvs_flash_rd>:
{
   2a9ce:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2a9d0:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a9d2:	8984      	ldrh	r4, [r0, #12]
   2a9d4:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2a9d6:	fa16 f181 	uxtah	r1, r6, r1
   2a9da:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2a9de:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   2a9e0:	6884      	ldr	r4, [r0, #8]
   2a9e2:	6824      	ldr	r4, [r4, #0]
   2a9e4:	46a4      	mov	ip, r4
}
   2a9e6:	bc70      	pop	{r4, r5, r6}
   2a9e8:	4760      	bx	ip

0002a9ea <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2a9ea:	680b      	ldr	r3, [r1, #0]
   2a9ec:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2a9f0:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2a9f2:	89c0      	ldrh	r0, [r0, #14]
   2a9f4:	0c1a      	lsrs	r2, r3, #16
   2a9f6:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2a9fa:	bf04      	itt	eq
   2a9fc:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2aa00:	600b      	streq	r3, [r1, #0]
}
   2aa02:	4770      	bx	lr

0002aa04 <nvs_flash_block_cmp>:
{
   2aa04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2aa08:	4681      	mov	r9, r0
   2aa0a:	460e      	mov	r6, r1
   2aa0c:	4617      	mov	r7, r2
   2aa0e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2aa12:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa14:	681d      	ldr	r5, [r3, #0]
   2aa16:	426d      	negs	r5, r5
	block_size =
   2aa18:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2aa1c:	b91c      	cbnz	r4, 2aa26 <nvs_flash_block_cmp+0x22>
	return 0;
   2aa1e:	4620      	mov	r0, r4
}
   2aa20:	b009      	add	sp, #36	; 0x24
   2aa22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aa26:	42ac      	cmp	r4, r5
   2aa28:	46a0      	mov	r8, r4
   2aa2a:	bf28      	it	cs
   2aa2c:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2aa2e:	466a      	mov	r2, sp
   2aa30:	4643      	mov	r3, r8
   2aa32:	4631      	mov	r1, r6
   2aa34:	4648      	mov	r0, r9
   2aa36:	f7ff ffca 	bl	2a9ce <nvs_flash_rd>
		if (rc) {
   2aa3a:	2800      	cmp	r0, #0
   2aa3c:	d1f0      	bne.n	2aa20 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2aa3e:	4642      	mov	r2, r8
   2aa40:	4669      	mov	r1, sp
   2aa42:	4638      	mov	r0, r7
   2aa44:	f005 fd6f 	bl	30526 <memcmp>
		if (rc) {
   2aa48:	b920      	cbnz	r0, 2aa54 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2aa4a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2aa4e:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2aa50:	4447      	add	r7, r8
   2aa52:	e7e3      	b.n	2aa1c <nvs_flash_block_cmp+0x18>
			return 1;
   2aa54:	2001      	movs	r0, #1
   2aa56:	e7e3      	b.n	2aa20 <nvs_flash_block_cmp+0x1c>

0002aa58 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa58:	4601      	mov	r1, r0
{
   2aa5a:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa5c:	2207      	movs	r2, #7
{
   2aa5e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aa60:	20ff      	movs	r0, #255	; 0xff
   2aa62:	f7e2 fb9f 	bl	d1a4 <crc8_ccitt>
	entry->crc8 = crc8;
   2aa66:	71e0      	strb	r0, [r4, #7]
}
   2aa68:	bd10      	pop	{r4, pc}

0002aa6a <nvs_flash_cmp_const>:
{
   2aa6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa6e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2aa72:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa74:	681d      	ldr	r5, [r3, #0]
{
   2aa76:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa78:	426d      	negs	r5, r5
	block_size =
   2aa7a:	f005 0520 	and.w	r5, r5, #32
{
   2aa7e:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2aa80:	4668      	mov	r0, sp
{
   2aa82:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2aa84:	462a      	mov	r2, r5
   2aa86:	f005 fd98 	bl	305ba <memset>
	while (len) {
   2aa8a:	b91c      	cbnz	r4, 2aa94 <nvs_flash_cmp_const+0x2a>
	return 0;
   2aa8c:	4620      	mov	r0, r4
}
   2aa8e:	b008      	add	sp, #32
   2aa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aa94:	42ac      	cmp	r4, r5
   2aa96:	46a0      	mov	r8, r4
   2aa98:	bf28      	it	cs
   2aa9a:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2aa9c:	466a      	mov	r2, sp
   2aa9e:	4643      	mov	r3, r8
   2aaa0:	4631      	mov	r1, r6
   2aaa2:	4638      	mov	r0, r7
   2aaa4:	f7ff ffae 	bl	2aa04 <nvs_flash_block_cmp>
		if (rc) {
   2aaa8:	2800      	cmp	r0, #0
   2aaaa:	d1f0      	bne.n	2aa8e <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2aaac:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2aab0:	4446      	add	r6, r8
   2aab2:	e7ea      	b.n	2aa8a <nvs_flash_cmp_const+0x20>

0002aab4 <nvs_flash_erase_sector>:
{
   2aab4:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2aab6:	8982      	ldrh	r2, [r0, #12]
   2aab8:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2aaba:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2aabc:	0c09      	lsrs	r1, r1, #16
{
   2aabe:	4604      	mov	r4, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2aac0:	fb02 3101 	mla	r1, r2, r1, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2aac4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   2aac6:	042d      	lsls	r5, r5, #16
	rc = api->erase(dev, offset, size);
   2aac8:	6883      	ldr	r3, [r0, #8]
   2aaca:	689b      	ldr	r3, [r3, #8]
   2aacc:	4798      	blx	r3
	if (rc) {
   2aace:	b950      	cbnz	r0, 2aae6 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2aad0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2aad2:	4629      	mov	r1, r5
   2aad4:	4620      	mov	r0, r4
   2aad6:	89a3      	ldrh	r3, [r4, #12]
   2aad8:	7912      	ldrb	r2, [r2, #4]
   2aada:	f7ff ffc6 	bl	2aa6a <nvs_flash_cmp_const>
		rc = -ENXIO;
   2aade:	2800      	cmp	r0, #0
   2aae0:	bf18      	it	ne
   2aae2:	f06f 0005 	mvnne.w	r0, #5
}
   2aae6:	bd38      	pop	{r3, r4, r5, pc}

0002aae8 <z_log_msg_static_create.constprop.0>:
   2aae8:	2300      	movs	r3, #0
   2aaea:	f7e3 bebd 	b.w	e868 <z_impl_z_log_msg_static_create>

0002aaee <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2aaee:	7803      	ldrb	r3, [r0, #0]
   2aaf0:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2aaf2:	bf81      	itttt	hi
   2aaf4:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2aaf8:	18c9      	addhi	r1, r1, r3
   2aafa:	425b      	neghi	r3, r3
   2aafc:	4019      	andhi	r1, r3
}
   2aafe:	4608      	mov	r0, r1
   2ab00:	4770      	bx	lr

0002ab02 <nvs_ate_valid>:
{
   2ab02:	b570      	push	{r4, r5, r6, lr}
   2ab04:	460c      	mov	r4, r1
   2ab06:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab08:	2108      	movs	r1, #8
   2ab0a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ab0c:	f7ff ffef 	bl	2aaee <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ab10:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab12:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ab14:	4621      	mov	r1, r4
   2ab16:	20ff      	movs	r0, #255	; 0xff
   2ab18:	f7e2 fb44 	bl	d1a4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2ab1c:	79e3      	ldrb	r3, [r4, #7]
   2ab1e:	4283      	cmp	r3, r0
   2ab20:	d107      	bne.n	2ab32 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2ab22:	89aa      	ldrh	r2, [r5, #12]
   2ab24:	8863      	ldrh	r3, [r4, #2]
   2ab26:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2ab28:	4283      	cmp	r3, r0
   2ab2a:	bf2c      	ite	cs
   2ab2c:	2000      	movcs	r0, #0
   2ab2e:	2001      	movcc	r0, #1
}
   2ab30:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2ab32:	2000      	movs	r0, #0
   2ab34:	e7fc      	b.n	2ab30 <nvs_ate_valid+0x2e>

0002ab36 <nvs_close_ate_valid>:
{
   2ab36:	b538      	push	{r3, r4, r5, lr}
   2ab38:	4605      	mov	r5, r0
   2ab3a:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2ab3c:	f7ff ffe1 	bl	2ab02 <nvs_ate_valid>
   2ab40:	b1a0      	cbz	r0, 2ab6c <nvs_close_ate_valid+0x36>
   2ab42:	88a0      	ldrh	r0, [r4, #4]
   2ab44:	b998      	cbnz	r0, 2ab6e <nvs_close_ate_valid+0x38>
   2ab46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ab4a:	8822      	ldrh	r2, [r4, #0]
   2ab4c:	429a      	cmp	r2, r3
   2ab4e:	d10d      	bne.n	2ab6c <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab50:	2108      	movs	r1, #8
   2ab52:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2ab54:	f7ff ffcb 	bl	2aaee <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2ab58:	8862      	ldrh	r2, [r4, #2]
   2ab5a:	89ab      	ldrh	r3, [r5, #12]
   2ab5c:	1a9b      	subs	r3, r3, r2
   2ab5e:	fbb3 f2f0 	udiv	r2, r3, r0
   2ab62:	fb02 3010 	mls	r0, r2, r0, r3
   2ab66:	fab0 f080 	clz	r0, r0
   2ab6a:	0940      	lsrs	r0, r0, #5
}
   2ab6c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2ab6e:	2000      	movs	r0, #0
   2ab70:	e7fc      	b.n	2ab6c <nvs_close_ate_valid+0x36>

0002ab72 <nvs_prev_ate>:
{
   2ab72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ab74:	4604      	mov	r4, r0
   2ab76:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab78:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ab7a:	2108      	movs	r1, #8
   2ab7c:	f7ff ffb7 	bl	2aaee <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ab80:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab82:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ab84:	6829      	ldr	r1, [r5, #0]
   2ab86:	4620      	mov	r0, r4
   2ab88:	f7ff ff21 	bl	2a9ce <nvs_flash_rd>
	if (rc) {
   2ab8c:	4606      	mov	r6, r0
   2ab8e:	2800      	cmp	r0, #0
   2ab90:	d136      	bne.n	2ac00 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2ab92:	682b      	ldr	r3, [r5, #0]
   2ab94:	443b      	add	r3, r7
   2ab96:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2ab98:	89a2      	ldrh	r2, [r4, #12]
   2ab9a:	b299      	uxth	r1, r3
   2ab9c:	1bd2      	subs	r2, r2, r7
   2ab9e:	4291      	cmp	r1, r2
   2aba0:	d12e      	bne.n	2ac00 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2aba2:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2aba4:	bf09      	itett	eq
   2aba6:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   2aba8:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2abac:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2abb0:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2abb4:	4620      	mov	r0, r4
   2abb6:	2308      	movs	r3, #8
   2abb8:	466a      	mov	r2, sp
   2abba:	6029      	str	r1, [r5, #0]
   2abbc:	f7ff ff07 	bl	2a9ce <nvs_flash_rd>
	if (rc) {
   2abc0:	b9e8      	cbnz	r0, 2abfe <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2abc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2abc4:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2abc6:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2abc8:	f813 1b01 	ldrb.w	r1, [r3], #1
   2abcc:	428a      	cmp	r2, r1
   2abce:	d10c      	bne.n	2abea <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2abd0:	3001      	adds	r0, #1
   2abd2:	2808      	cmp	r0, #8
   2abd4:	d1f8      	bne.n	2abc8 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2abd6:	6863      	ldr	r3, [r4, #4]
   2abd8:	e005      	b.n	2abe6 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2abda:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2abdc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2abe0:	0c1b      	lsrs	r3, r3, #16
   2abe2:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2abe4:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2abe6:	602b      	str	r3, [r5, #0]
		return 0;
   2abe8:	e00a      	b.n	2ac00 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2abea:	4669      	mov	r1, sp
   2abec:	4620      	mov	r0, r4
   2abee:	f7ff ffa2 	bl	2ab36 <nvs_close_ate_valid>
   2abf2:	2800      	cmp	r0, #0
   2abf4:	d1f1      	bne.n	2abda <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2abf6:	4629      	mov	r1, r5
   2abf8:	4620      	mov	r0, r4
   2abfa:	f7e4 f94b 	bl	ee94 <nvs_recover_last_ate>
   2abfe:	4606      	mov	r6, r0
}
   2ac00:	4630      	mov	r0, r6
   2ac02:	b003      	add	sp, #12
   2ac04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ac06 <nvs_flash_al_wrt>:
{
   2ac06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ac0a:	4607      	mov	r7, r0
   2ac0c:	4690      	mov	r8, r2
	if (!len) {
   2ac0e:	461e      	mov	r6, r3
{
   2ac10:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   2ac12:	b91b      	cbnz	r3, 2ac1c <nvs_flash_al_wrt+0x16>
		return 0;
   2ac14:	2000      	movs	r0, #0
}
   2ac16:	b009      	add	sp, #36	; 0x24
   2ac18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2ac1c:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ac1e:	8983      	ldrh	r3, [r0, #12]
   2ac20:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2ac22:	fa14 f181 	uxtah	r1, r4, r1
   2ac26:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ac2c:	681d      	ldr	r5, [r3, #0]
   2ac2e:	426d      	negs	r5, r5
	if (blen > 0) {
   2ac30:	4035      	ands	r5, r6
   2ac32:	d00c      	beq.n	2ac4e <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2ac34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2ac36:	6883      	ldr	r3, [r0, #8]
   2ac38:	4621      	mov	r1, r4
   2ac3a:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2ac3e:	462b      	mov	r3, r5
   2ac40:	47c8      	blx	r9
		if (rc) {
   2ac42:	2800      	cmp	r0, #0
   2ac44:	d1e7      	bne.n	2ac16 <nvs_flash_al_wrt+0x10>
	if (len) {
   2ac46:	1b76      	subs	r6, r6, r5
   2ac48:	d0e4      	beq.n	2ac14 <nvs_flash_al_wrt+0xe>
		offset += blen;
   2ac4a:	442c      	add	r4, r5
		data8 += blen;
   2ac4c:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2ac4e:	2320      	movs	r3, #32
   2ac50:	4632      	mov	r2, r6
   2ac52:	4641      	mov	r1, r8
   2ac54:	4668      	mov	r0, sp
   2ac56:	f005 fc83 	bl	30560 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2ac5a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   2ac5c:	eb0d 0006 	add.w	r0, sp, r6
   2ac60:	682a      	ldr	r2, [r5, #0]
   2ac62:	7929      	ldrb	r1, [r5, #4]
   2ac64:	1b92      	subs	r2, r2, r6
   2ac66:	f005 fca8 	bl	305ba <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2ac6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2ac6c:	682b      	ldr	r3, [r5, #0]
   2ac6e:	6882      	ldr	r2, [r0, #8]
   2ac70:	4621      	mov	r1, r4
   2ac72:	6855      	ldr	r5, [r2, #4]
   2ac74:	466a      	mov	r2, sp
   2ac76:	47a8      	blx	r5
	return rc;
   2ac78:	e7cd      	b.n	2ac16 <nvs_flash_al_wrt+0x10>

0002ac7a <nvs_flash_ate_wrt>:
{
   2ac7a:	b510      	push	{r4, lr}
   2ac7c:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ac7e:	2308      	movs	r3, #8
   2ac80:	6841      	ldr	r1, [r0, #4]
{
   2ac82:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ac84:	f7ff ffbf 	bl	2ac06 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ac88:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ac8a:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ac8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ac8e:	f7ff ff2e 	bl	2aaee <nvs_al_size.isra.0>
   2ac92:	6863      	ldr	r3, [r4, #4]
   2ac94:	1a1b      	subs	r3, r3, r0
   2ac96:	6063      	str	r3, [r4, #4]
}
   2ac98:	4610      	mov	r0, r2
   2ac9a:	bd10      	pop	{r4, pc}

0002ac9c <nvs_add_gc_done_ate>:
	gc_done_ate.id = 0xffff;
   2ac9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   2aca0:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2aca2:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2aca6:	2300      	movs	r3, #0
{
   2aca8:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2acaa:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2acae:	6883      	ldr	r3, [r0, #8]
	nvs_ate_crc8_update(&gc_done_ate);
   2acb0:	4668      	mov	r0, sp
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2acb2:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2acb6:	f7ff fecf 	bl	2aa58 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2acba:	4669      	mov	r1, sp
   2acbc:	4620      	mov	r0, r4
   2acbe:	f7ff ffdc 	bl	2ac7a <nvs_flash_ate_wrt>
}
   2acc2:	b002      	add	sp, #8
   2acc4:	bd10      	pop	{r4, pc}

0002acc6 <nvs_gc>:
{
   2acc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2acca:	2108      	movs	r1, #8
{
   2accc:	b095      	sub	sp, #84	; 0x54
   2acce:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2acd0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2acd2:	f7ff ff0c 	bl	2aaee <nvs_al_size.isra.0>
   2acd6:	4605      	mov	r5, r0
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2acd8:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
   2acda:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2acdc:	0c1b      	lsrs	r3, r3, #16
   2acde:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   2ace0:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ace2:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2ace4:	f7ff fe81 	bl	2a9ea <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2ace8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2acec:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2acee:	aa06      	add	r2, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2acf0:	445e      	add	r6, fp
   2acf2:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2acf4:	2308      	movs	r3, #8
   2acf6:	4631      	mov	r1, r6
   2acf8:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2acfa:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2acfc:	f7ff fe67 	bl	2a9ce <nvs_flash_rd>
	if (rc < 0) {
   2ad00:	1e02      	subs	r2, r0, #0
   2ad02:	f2c0 80a9 	blt.w	2ae58 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2ad06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ad08:	aa06      	add	r2, sp, #24
   2ad0a:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ad0c:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2ad0e:	f812 0b01 	ldrb.w	r0, [r2], #1
   2ad12:	4281      	cmp	r1, r0
   2ad14:	f040 808f 	bne.w	2ae36 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ad18:	3301      	adds	r3, #1
   2ad1a:	2b08      	cmp	r3, #8
   2ad1c:	d1f7      	bne.n	2ad0e <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2ad1e:	68a3      	ldr	r3, [r4, #8]
   2ad20:	6862      	ldr	r2, [r4, #4]
   2ad22:	442b      	add	r3, r5
   2ad24:	429a      	cmp	r2, r3
   2ad26:	d27e      	bcs.n	2ae26 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2ad28:	4659      	mov	r1, fp
   2ad2a:	4620      	mov	r0, r4
   2ad2c:	f7ff fec2 	bl	2aab4 <nvs_flash_erase_sector>
   2ad30:	4602      	mov	r2, r0
	if (rc) {
   2ad32:	e091      	b.n	2ae58 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   2ad34:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   2ad38:	0c36      	lsrs	r6, r6, #16
   2ad3a:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2ad3c:	441e      	add	r6, r3
   2ad3e:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2ad40:	aa08      	add	r2, sp, #32
   2ad42:	4620      	mov	r0, r4
   2ad44:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   2ad46:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2ad4a:	f7ff ff12 	bl	2ab72 <nvs_prev_ate>
		if (rc) {
   2ad4e:	4602      	mov	r2, r0
   2ad50:	2800      	cmp	r0, #0
   2ad52:	f040 8081 	bne.w	2ae58 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2ad56:	4620      	mov	r0, r4
   2ad58:	a908      	add	r1, sp, #32
   2ad5a:	f7ff fed2 	bl	2ab02 <nvs_ate_valid>
   2ad5e:	b918      	cbnz	r0, 2ad68 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2ad60:	9b01      	ldr	r3, [sp, #4]
   2ad62:	459a      	cmp	sl, r3
   2ad64:	d1ec      	bne.n	2ad40 <nvs_gc+0x7a>
   2ad66:	e7da      	b.n	2ad1e <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2ad68:	6863      	ldr	r3, [r4, #4]
   2ad6a:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2ad6c:	aa0a      	add	r2, sp, #40	; 0x28
   2ad6e:	4620      	mov	r0, r4
   2ad70:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   2ad72:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2ad74:	f7ff fefd 	bl	2ab72 <nvs_prev_ate>
			if (rc) {
   2ad78:	4602      	mov	r2, r0
   2ad7a:	2800      	cmp	r0, #0
   2ad7c:	d16c      	bne.n	2ae58 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2ad7e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2ad82:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2ad86:	429a      	cmp	r2, r3
   2ad88:	d027      	beq.n	2adda <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2ad8a:	6862      	ldr	r2, [r4, #4]
   2ad8c:	9b05      	ldr	r3, [sp, #20]
   2ad8e:	429a      	cmp	r2, r3
   2ad90:	d1ec      	bne.n	2ad6c <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2ad92:	4556      	cmp	r6, sl
   2ad94:	d1e4      	bne.n	2ad60 <nvs_gc+0x9a>
   2ad96:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2ad9a:	2b00      	cmp	r3, #0
   2ad9c:	d0e0      	beq.n	2ad60 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2ad9e:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2ada2:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2ada6:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2ada8:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2adaa:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
   2adac:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2adae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2adb2:	f7ff fe51 	bl	2aa58 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2adb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2adb8:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2adbc:	681e      	ldr	r6, [r3, #0]
   2adbe:	4276      	negs	r6, r6
	block_size =
   2adc0:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2adc4:	f1b9 0f00 	cmp.w	r9, #0
   2adc8:	d10e      	bne.n	2ade8 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2adca:	4620      	mov	r0, r4
   2adcc:	a908      	add	r1, sp, #32
   2adce:	f7ff ff54 	bl	2ac7a <nvs_flash_ate_wrt>
			if (rc) {
   2add2:	4602      	mov	r2, r0
   2add4:	2800      	cmp	r0, #0
   2add6:	d0c3      	beq.n	2ad60 <nvs_gc+0x9a>
   2add8:	e03e      	b.n	2ae58 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2adda:	4620      	mov	r0, r4
   2addc:	a90a      	add	r1, sp, #40	; 0x28
   2adde:	f7ff fe90 	bl	2ab02 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2ade2:	2800      	cmp	r0, #0
   2ade4:	d0d1      	beq.n	2ad8a <nvs_gc+0xc4>
   2ade6:	e7d4      	b.n	2ad92 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2ade8:	454e      	cmp	r6, r9
   2adea:	46b0      	mov	r8, r6
   2adec:	bf28      	it	cs
   2adee:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2adf0:	aa0c      	add	r2, sp, #48	; 0x30
   2adf2:	4643      	mov	r3, r8
   2adf4:	4639      	mov	r1, r7
   2adf6:	4620      	mov	r0, r4
   2adf8:	f7ff fde9 	bl	2a9ce <nvs_flash_rd>
		if (rc) {
   2adfc:	4602      	mov	r2, r0
   2adfe:	bb58      	cbnz	r0, 2ae58 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2ae00:	4643      	mov	r3, r8
   2ae02:	68a1      	ldr	r1, [r4, #8]
   2ae04:	aa0c      	add	r2, sp, #48	; 0x30
   2ae06:	4620      	mov	r0, r4
   2ae08:	f7ff fefd 	bl	2ac06 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2ae0c:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2ae0e:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2ae10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ae12:	f7ff fe6c 	bl	2aaee <nvs_al_size.isra.0>
   2ae16:	68a3      	ldr	r3, [r4, #8]
   2ae18:	4403      	add	r3, r0
   2ae1a:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2ae1c:	b9e2      	cbnz	r2, 2ae58 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2ae1e:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2ae22:	4447      	add	r7, r8
   2ae24:	e7ce      	b.n	2adc4 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   2ae26:	4620      	mov	r0, r4
   2ae28:	f7ff ff38 	bl	2ac9c <nvs_add_gc_done_ate>
		if (rc) {
   2ae2c:	4602      	mov	r2, r0
   2ae2e:	2800      	cmp	r0, #0
   2ae30:	f43f af7a 	beq.w	2ad28 <nvs_gc+0x62>
   2ae34:	e010      	b.n	2ae58 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   2ae36:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ae38:	4620      	mov	r0, r4
   2ae3a:	a906      	add	r1, sp, #24
	stop_addr = gc_addr - ate_size;
   2ae3c:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ae3e:	f7ff fe7a 	bl	2ab36 <nvs_close_ate_valid>
   2ae42:	2800      	cmp	r0, #0
   2ae44:	f47f af76 	bne.w	2ad34 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2ae48:	4620      	mov	r0, r4
   2ae4a:	a904      	add	r1, sp, #16
   2ae4c:	f7e4 f822 	bl	ee94 <nvs_recover_last_ate>
		if (rc) {
   2ae50:	4602      	mov	r2, r0
   2ae52:	2800      	cmp	r0, #0
   2ae54:	f43f af74 	beq.w	2ad40 <nvs_gc+0x7a>
}
   2ae58:	4610      	mov	r0, r2
   2ae5a:	b015      	add	sp, #84	; 0x54
   2ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ae60 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2ae60:	2300      	movs	r3, #0
   2ae62:	461a      	mov	r2, r3
   2ae64:	f7e4 ba20 	b.w	f2a8 <nvs_write>

0002ae68 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2ae68:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2ae6a:	2400      	movs	r4, #0
   2ae6c:	9400      	str	r4, [sp, #0]
   2ae6e:	f7e4 faf7 	bl	f460 <nvs_read_hist>
	return rc;
}
   2ae72:	b002      	add	sp, #8
   2ae74:	bd10      	pop	{r4, pc}

0002ae76 <z_log_msg_static_create.constprop.0>:
   2ae76:	2300      	movs	r3, #0
   2ae78:	f7e3 bcf6 	b.w	e868 <z_impl_z_log_msg_static_create>

0002ae7c <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2ae7c:	6903      	ldr	r3, [r0, #16]
}
   2ae7e:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   2ae82:	4770      	bx	lr

0002ae84 <drop_tx_buffer>:
}
   2ae84:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ae88:	4770      	bx	lr

0002ae8a <release_rx_buffer>:
{
   2ae8a:	4608      	mov	r0, r1
   2ae8c:	b508      	push	{r3, lr}
   2ae8e:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2ae90:	b118      	cbz	r0, 2ae9a <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   2ae92:	f004 ff29 	bl	2fce8 <rpmsg_release_rx_buffer>
	return 0;
   2ae96:	2000      	movs	r0, #0
}
   2ae98:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2ae9a:	f06f 0001 	mvn.w	r0, #1
   2ae9e:	e7fb      	b.n	2ae98 <release_rx_buffer+0xe>

0002aea0 <hold_rx_buffer>:
{
   2aea0:	4608      	mov	r0, r1
   2aea2:	b508      	push	{r3, lr}
   2aea4:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2aea6:	b118      	cbz	r0, 2aeb0 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   2aea8:	f004 ff16 	bl	2fcd8 <rpmsg_hold_rx_buffer>
	return 0;
   2aeac:	2000      	movs	r0, #0
}
   2aeae:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2aeb0:	f06f 0001 	mvn.w	r0, #1
   2aeb4:	e7fb      	b.n	2aeae <hold_rx_buffer+0xe>

0002aeb6 <send_nocopy>:
{
   2aeb6:	b513      	push	{r0, r1, r4, lr}
   2aeb8:	4604      	mov	r4, r0
   2aeba:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aebc:	6921      	ldr	r1, [r4, #16]
   2aebe:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   2aec2:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   2aec6:	2902      	cmp	r1, #2
   2aec8:	d109      	bne.n	2aede <send_nocopy+0x28>
	if (len == 0) {
   2aeca:	b15b      	cbz	r3, 2aee4 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   2aecc:	b168      	cbz	r0, 2aeea <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2aece:	9300      	str	r3, [sp, #0]
   2aed0:	4613      	mov	r3, r2
   2aed2:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2aed6:	f7f9 f823 	bl	23f20 <rpmsg_send_offchannel_nocopy>
}
   2aeda:	b002      	add	sp, #8
   2aedc:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2aede:	f06f 000f 	mvn.w	r0, #15
   2aee2:	e7fa      	b.n	2aeda <send_nocopy+0x24>
		return -EBADMSG;
   2aee4:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   2aee8:	e7f7      	b.n	2aeda <send_nocopy+0x24>
		return -ENOENT;
   2aeea:	f06f 0001 	mvn.w	r0, #1
   2aeee:	e7f4      	b.n	2aeda <send_nocopy+0x24>

0002aef0 <get_tx_buffer>:
{
   2aef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aef4:	461c      	mov	r4, r3
   2aef6:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   2aefa:	4616      	mov	r6, r2
   2aefc:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2aefe:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2af00:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2af02:	b339      	cbz	r1, 2af54 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   2af04:	b34a      	cbz	r2, 2af5a <get_tx_buffer+0x6a>
   2af06:	b344      	cbz	r4, 2af5a <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   2af08:	1c6a      	adds	r2, r5, #1
   2af0a:	f143 0300 	adc.w	r3, r3, #0
   2af0e:	2a02      	cmp	r2, #2
   2af10:	f173 0300 	sbcs.w	r3, r3, #0
   2af14:	d224      	bcs.n	2af60 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   2af16:	6822      	ldr	r2, [r4, #0]
   2af18:	b142      	cbz	r2, 2af2c <get_tx_buffer+0x3c>
   2af1a:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   2af1e:	429a      	cmp	r2, r3
   2af20:	d904      	bls.n	2af2c <get_tx_buffer+0x3c>
		return -ENOMEM;
   2af22:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   2af26:	6023      	str	r3, [r4, #0]
}
   2af28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2af2c:	ea05 0908 	and.w	r9, r5, r8
   2af30:	f109 0301 	add.w	r3, r9, #1
   2af34:	425a      	negs	r2, r3
   2af36:	415a      	adcs	r2, r3
   2af38:	4621      	mov	r1, r4
   2af3a:	4638      	mov	r0, r7
   2af3c:	f004 fedd 	bl	2fcfa <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2af40:	b988      	cbnz	r0, 2af66 <get_tx_buffer+0x76>
   2af42:	f1b8 3fff 	cmp.w	r8, #4294967295
   2af46:	bf08      	it	eq
   2af48:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2af4c:	d0f0      	beq.n	2af30 <get_tx_buffer+0x40>
		return -ENOBUFS;
   2af4e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2af52:	e7e9      	b.n	2af28 <get_tx_buffer+0x38>
		return -ENOENT;
   2af54:	f06f 0001 	mvn.w	r0, #1
   2af58:	e7e6      	b.n	2af28 <get_tx_buffer+0x38>
		return -EINVAL;
   2af5a:	f06f 0015 	mvn.w	r0, #21
   2af5e:	e7e3      	b.n	2af28 <get_tx_buffer+0x38>
		return -ENOTSUP;
   2af60:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2af64:	e7e0      	b.n	2af28 <get_tx_buffer+0x38>
	(*r_data) = payload;
   2af66:	6030      	str	r0, [r6, #0]
	return 0;
   2af68:	2000      	movs	r0, #0
   2af6a:	e7dd      	b.n	2af28 <get_tx_buffer+0x38>

0002af6c <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2af6c:	f004 bf0a 	b.w	2fd84 <rpmsg_destroy_ept>

0002af70 <get_ept_slot_with_name>:
{
   2af70:	b538      	push	{r3, r4, r5, lr}
   2af72:	460d      	mov	r5, r1
   2af74:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   2af76:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2af7a:	4628      	mov	r0, r5
   2af7c:	f7de f9f9 	bl	9372 <strcmp>
   2af80:	b130      	cbz	r0, 2af90 <get_ept_slot_with_name+0x20>
   2af82:	4628      	mov	r0, r5
   2af84:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2af88:	f7de f9f3 	bl	9372 <strcmp>
   2af8c:	b920      	cbnz	r0, 2af98 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2af8e:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   2af90:	2370      	movs	r3, #112	; 0x70
   2af92:	fb03 4000 	mla	r0, r3, r0, r4
}
   2af96:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   2af98:	2000      	movs	r0, #0
   2af9a:	e7fc      	b.n	2af96 <get_ept_slot_with_name+0x26>

0002af9c <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2af9c:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   2afa0:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   2afa4:	f005 b970 	b.w	30288 <k_work_submit_to_queue>

0002afa8 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2afa8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   2afac:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2afb0:	3b00      	subs	r3, #0
   2afb2:	bf18      	it	ne
   2afb4:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   2afb6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2afba:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2afbe:	f004 be3d 	b.w	2fc3c <virtqueue_notification>

0002afc2 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   2afc2:	68cb      	ldr	r3, [r1, #12]
   2afc4:	b133      	cbz	r3, 2afd4 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   2afc6:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   2afc8:	6883      	ldr	r3, [r0, #8]
   2afca:	681b      	ldr	r3, [r3, #0]
   2afcc:	b113      	cbz	r3, 2afd4 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2afce:	2200      	movs	r2, #0
   2afd0:	6909      	ldr	r1, [r1, #16]
   2afd2:	4718      	bx	r3
}
   2afd4:	4770      	bx	lr

0002afd6 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2afd6:	f7fa b951 	b.w	2527c <z_impl_k_mutex_unlock>

0002afda <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2afda:	e8d0 3fef 	ldaex	r3, [r0]
   2afde:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2afe2:	2a00      	cmp	r2, #0
   2afe4:	d1f9      	bne.n	2afda <atomic_set.isra.0>
}
   2afe6:	4770      	bx	lr

0002afe8 <backend_init>:
{
   2afe8:	b510      	push	{r4, lr}
	data->role = conf->role;
   2afea:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2afec:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2afee:	681b      	ldr	r3, [r3, #0]
   2aff0:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   2aff4:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   2aff8:	f005 f8ae 	bl	30158 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2affc:	2100      	movs	r1, #0
   2affe:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   2b002:	f7ff ffea 	bl	2afda <atomic_set.isra.0>
}
   2b006:	4608      	mov	r0, r1
   2b008:	bd10      	pop	{r4, pc}

0002b00a <ns_bind_cb>:
{
   2b00a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b00e:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2b010:	460d      	mov	r5, r1
   2b012:	b379      	cbz	r1, 2b074 <ns_bind_cb+0x6a>
   2b014:	780b      	ldrb	r3, [r1, #0]
   2b016:	b36b      	cbz	r3, 2b074 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   2b018:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   2b01c:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2b020:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2b022:	f04f 32ff 	mov.w	r2, #4294967295
   2b026:	f04f 33ff 	mov.w	r3, #4294967295
   2b02a:	4620      	mov	r0, r4
   2b02c:	f7fa f856 	bl	250dc <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2b030:	462a      	mov	r2, r5
   2b032:	4640      	mov	r0, r8
   2b034:	a901      	add	r1, sp, #4
   2b036:	f7e4 fb4b 	bl	f6d0 <get_ept>
	if (rpmsg_ept == NULL) {
   2b03a:	9e01      	ldr	r6, [sp, #4]
   2b03c:	b92e      	cbnz	r6, 2b04a <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b03e:	4620      	mov	r0, r4
}
   2b040:	b002      	add	sp, #8
   2b042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b046:	f7ff bfc6 	b.w	2afd6 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   2b04a:	b158      	cbz	r0, 2b064 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b04c:	4620      	mov	r0, r4
   2b04e:	f7ff ffc2 	bl	2afd6 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2b052:	463b      	mov	r3, r7
   2b054:	462a      	mov	r2, r5
   2b056:	4631      	mov	r1, r6
   2b058:	4640      	mov	r0, r8
}
   2b05a:	b002      	add	sp, #8
   2b05c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2b060:	f7e4 bb14 	b.w	f68c <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2b064:	2220      	movs	r2, #32
   2b066:	4629      	mov	r1, r5
   2b068:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2b06c:	f005 fc05 	bl	3087a <strncpy>
		rpmsg_ept->dest = dest;
   2b070:	6637      	str	r7, [r6, #96]	; 0x60
   2b072:	e7e4      	b.n	2b03e <ns_bind_cb+0x34>
}
   2b074:	b002      	add	sp, #8
   2b076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b07a <ept_cb>:
{
   2b07a:	b510      	push	{r4, lr}
   2b07c:	4608      	mov	r0, r1
   2b07e:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   2b080:	4611      	mov	r1, r2
   2b082:	b952      	cbnz	r2, 2b09a <ept_cb+0x20>
		if (!ept->bound) {
   2b084:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2b088:	b92a      	cbnz	r2, 2b096 <ept_cb+0x1c>
			ept->bound = true;
   2b08a:	2201      	movs	r2, #1
			bound_cb(ept);
   2b08c:	4618      	mov	r0, r3
			ept->bound = true;
   2b08e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   2b092:	f7e4 fc6f 	bl	f974 <bound_cb>
}
   2b096:	2000      	movs	r0, #0
   2b098:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2b09a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2b09c:	6854      	ldr	r4, [r2, #4]
   2b09e:	2c00      	cmp	r4, #0
   2b0a0:	d0f9      	beq.n	2b096 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   2b0a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2b0a4:	47a0      	blx	r4
   2b0a6:	e7f6      	b.n	2b096 <ept_cb+0x1c>

0002b0a8 <deregister_ept>:
{
   2b0a8:	b510      	push	{r4, lr}
   2b0aa:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b0ac:	6903      	ldr	r3, [r0, #16]
   2b0ae:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   2b0b2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   2b0b6:	2b02      	cmp	r3, #2
   2b0b8:	d10a      	bne.n	2b0d0 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2b0ba:	b161      	cbz	r1, 2b0d6 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2b0bc:	4608      	mov	r0, r1
   2b0be:	f004 fe61 	bl	2fd84 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   2b0c2:	2270      	movs	r2, #112	; 0x70
   2b0c4:	2100      	movs	r1, #0
   2b0c6:	4620      	mov	r0, r4
   2b0c8:	f005 fa77 	bl	305ba <memset>
	return 0;
   2b0cc:	2000      	movs	r0, #0
}
   2b0ce:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2b0d0:	f06f 000f 	mvn.w	r0, #15
   2b0d4:	e7fb      	b.n	2b0ce <deregister_ept+0x26>
		return -ENOENT;
   2b0d6:	f06f 0001 	mvn.w	r0, #1
   2b0da:	e7f8      	b.n	2b0ce <deregister_ept+0x26>

0002b0dc <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2b0dc:	f004 be52 	b.w	2fd84 <rpmsg_destroy_ept>

0002b0e0 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2b0e0:	b538      	push	{r3, r4, r5, lr}
   2b0e2:	460d      	mov	r5, r1
	if (!instance) {
   2b0e4:	4604      	mov	r4, r0
   2b0e6:	b160      	cbz	r0, 2b102 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   2b0e8:	30e0      	adds	r0, #224	; 0xe0
   2b0ea:	f004 ffcc 	bl	30086 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2b0ee:	b10d      	cbz	r5, 2b0f4 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2b0f0:	2000      	movs	r0, #0
}
   2b0f2:	bd38      	pop	{r3, r4, r5, pc}
   2b0f4:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   2b0f8:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   2b0fc:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2b100:	e7f6      	b.n	2b0f0 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2b102:	f06f 0015 	mvn.w	r0, #21
   2b106:	e7f4      	b.n	2b0f2 <ipc_rpmsg_deinit+0x12>

0002b108 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   2b108:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   2b10a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2b10e:	b113      	cbz	r3, 2b116 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2b110:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2b114:	4718      	bx	r3
}
   2b116:	4770      	bx	lr

0002b118 <virtio_set_features>:
}
   2b118:	4770      	bx	lr

0002b11a <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   2b11a:	6983      	ldr	r3, [r0, #24]
   2b11c:	b913      	cbnz	r3, 2b124 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2b11e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b122:	7019      	strb	r1, [r3, #0]
}
   2b124:	4770      	bx	lr

0002b126 <virtio_get_features>:
}
   2b126:	2001      	movs	r0, #1
   2b128:	4770      	bx	lr

0002b12a <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2b12a:	6983      	ldr	r3, [r0, #24]
   2b12c:	2b01      	cmp	r3, #1
   2b12e:	d104      	bne.n	2b13a <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2b130:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b134:	7818      	ldrb	r0, [r3, #0]
   2b136:	b2c0      	uxtb	r0, r0
   2b138:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2b13a:	2004      	movs	r0, #4
}
   2b13c:	4770      	bx	lr

0002b13e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2b13e:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2b140:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   2b142:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   2b144:	4620      	mov	r0, r4
   2b146:	f005 f9db 	bl	30500 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2b14a:	4605      	mov	r5, r0
   2b14c:	b118      	cbz	r0, 2b156 <virtqueue_allocate+0x18>
   2b14e:	4622      	mov	r2, r4
   2b150:	2100      	movs	r1, #0
   2b152:	f005 fa32 	bl	305ba <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   2b156:	4628      	mov	r0, r5
   2b158:	bd38      	pop	{r3, r4, r5, pc}

0002b15a <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2b15a:	b538      	push	{r3, r4, r5, lr}
   2b15c:	4604      	mov	r4, r0
   2b15e:	2230      	movs	r2, #48	; 0x30
   2b160:	2100      	movs	r1, #0
   2b162:	f005 fa2a 	bl	305ba <memset>
   2b166:	2218      	movs	r2, #24
   2b168:	2100      	movs	r1, #0
   2b16a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2b16e:	f005 fa24 	bl	305ba <memset>
   2b172:	2218      	movs	r2, #24
   2b174:	2100      	movs	r1, #0
   2b176:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2b17a:	f005 fa1e 	bl	305ba <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2b17e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2b182:	f7f8 fe7f 	bl	23e84 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   2b186:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2b18a:	f7f8 fe7b 	bl	23e84 <virtqueue_free>
	vr->shm_io = 0;
   2b18e:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   2b190:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   2b194:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2b198:	f7f5 fba2 	bl	208e0 <metal_device_close>
	metal_finish();
   2b19c:	f7f5 fbfc 	bl	20998 <metal_finish>
	if (io->ops.close)
   2b1a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   2b1a2:	f104 0540 	add.w	r5, r4, #64	; 0x40
   2b1a6:	b10b      	cbz	r3, 2b1ac <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   2b1a8:	4628      	mov	r0, r5
   2b1aa:	4798      	blx	r3
   2b1ac:	2238      	movs	r2, #56	; 0x38
   2b1ae:	2100      	movs	r1, #0
   2b1b0:	4628      	mov	r0, r5
   2b1b2:	f005 fa02 	bl	305ba <memset>

	return 0;
}
   2b1b6:	2000      	movs	r0, #0
   2b1b8:	bd38      	pop	{r3, r4, r5, pc}

0002b1ba <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2b1ba:	4770      	bx	lr

0002b1bc <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   2b1bc:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   2b1be:	b430      	push	{r4, r5}
   2b1c0:	4604      	mov	r4, r0
   2b1c2:	4618      	mov	r0, r3
   2b1c4:	db0b      	blt.n	2b1de <flash_area_read+0x22>
   2b1c6:	68a5      	ldr	r5, [r4, #8]
   2b1c8:	4408      	add	r0, r1
   2b1ca:	42a8      	cmp	r0, r5
   2b1cc:	d807      	bhi.n	2b1de <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
   2b1ce:	68e0      	ldr	r0, [r4, #12]
   2b1d0:	6864      	ldr	r4, [r4, #4]
   2b1d2:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   2b1d4:	6884      	ldr	r4, [r0, #8]
   2b1d6:	6824      	ldr	r4, [r4, #0]
   2b1d8:	46a4      	mov	ip, r4
}
   2b1da:	bc30      	pop	{r4, r5}
   2b1dc:	4760      	bx	ip
   2b1de:	f06f 0015 	mvn.w	r0, #21
   2b1e2:	bc30      	pop	{r4, r5}
   2b1e4:	4770      	bx	lr

0002b1e6 <flash_area_write>:
   2b1e6:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   2b1e8:	b430      	push	{r4, r5}
   2b1ea:	4604      	mov	r4, r0
   2b1ec:	4618      	mov	r0, r3
   2b1ee:	db0b      	blt.n	2b208 <flash_area_write+0x22>
   2b1f0:	68a5      	ldr	r5, [r4, #8]
   2b1f2:	4408      	add	r0, r1
   2b1f4:	42a8      	cmp	r0, r5
   2b1f6:	d807      	bhi.n	2b208 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
   2b1f8:	68e0      	ldr	r0, [r4, #12]
   2b1fa:	6864      	ldr	r4, [r4, #4]
   2b1fc:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   2b1fe:	6884      	ldr	r4, [r0, #8]
   2b200:	6864      	ldr	r4, [r4, #4]
   2b202:	46a4      	mov	ip, r4
}
   2b204:	bc30      	pop	{r4, r5}
   2b206:	4760      	bx	ip
   2b208:	f06f 0015 	mvn.w	r0, #21
   2b20c:	bc30      	pop	{r4, r5}
   2b20e:	4770      	bx	lr

0002b210 <flash_area_erase>:
   2b210:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   2b212:	4603      	mov	r3, r0
   2b214:	b410      	push	{r4}
   2b216:	4610      	mov	r0, r2
   2b218:	db0a      	blt.n	2b230 <flash_area_erase+0x20>
   2b21a:	689c      	ldr	r4, [r3, #8]
   2b21c:	4408      	add	r0, r1
   2b21e:	42a0      	cmp	r0, r4
   2b220:	d806      	bhi.n	2b230 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
   2b222:	68d8      	ldr	r0, [r3, #12]
   2b224:	685b      	ldr	r3, [r3, #4]
   2b226:	4419      	add	r1, r3
	rc = api->erase(dev, offset, size);
   2b228:	6883      	ldr	r3, [r0, #8]
}
   2b22a:	bc10      	pop	{r4}
   2b22c:	689b      	ldr	r3, [r3, #8]
   2b22e:	4718      	bx	r3
   2b230:	f06f 0015 	mvn.w	r0, #21
   2b234:	bc10      	pop	{r4}
   2b236:	4770      	bx	lr

0002b238 <flash_area_get_device>:
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return fa->fa_dev;
}
   2b238:	68c0      	ldr	r0, [r0, #12]
   2b23a:	4770      	bx	lr

0002b23c <get_sectors_cb>:
{
   2b23c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2b23e:	684c      	ldr	r4, [r1, #4]
   2b240:	6803      	ldr	r3, [r0, #0]
   2b242:	42a3      	cmp	r3, r4
   2b244:	d201      	bcs.n	2b24a <get_sectors_cb+0xe>
		*bail_value = true;
   2b246:	2001      	movs	r0, #1
}
   2b248:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2b24a:	688a      	ldr	r2, [r1, #8]
   2b24c:	4422      	add	r2, r4
   2b24e:	4293      	cmp	r3, r2
   2b250:	d301      	bcc.n	2b256 <get_sectors_cb+0x1a>
		*bail_value = false;
   2b252:	2000      	movs	r0, #0
   2b254:	e7f8      	b.n	2b248 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   2b256:	694e      	ldr	r6, [r1, #20]
   2b258:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2b25c:	42b5      	cmp	r5, r6
   2b25e:	d303      	bcc.n	2b268 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2b260:	f06f 030b 	mvn.w	r3, #11
   2b264:	618b      	str	r3, [r1, #24]
		return true;
   2b266:	e7f4      	b.n	2b252 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2b268:	1b1b      	subs	r3, r3, r4
   2b26a:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2b26e:	6843      	ldr	r3, [r0, #4]
   2b270:	6908      	ldr	r0, [r1, #16]
   2b272:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2b276:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   2b278:	690b      	ldr	r3, [r1, #16]
   2b27a:	3301      	adds	r3, #1
   2b27c:	610b      	str	r3, [r1, #16]
	return true;
   2b27e:	e7e2      	b.n	2b246 <get_sectors_cb+0xa>

0002b280 <settings_load>:
	return settings_load_subtree(NULL);
   2b280:	2000      	movs	r0, #0
   2b282:	f7e4 bdc5 	b.w	fe10 <settings_load_subtree>

0002b286 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2b286:	2200      	movs	r2, #0
   2b288:	4611      	mov	r1, r2
   2b28a:	f7e4 bd87 	b.w	fd9c <settings_save_one>

0002b28e <settings_name_steq>:
{
   2b28e:	4603      	mov	r3, r0
   2b290:	b510      	push	{r4, lr}
   2b292:	4608      	mov	r0, r1
	if (next) {
   2b294:	b10a      	cbz	r2, 2b29a <settings_name_steq+0xc>
		*next = NULL;
   2b296:	2100      	movs	r1, #0
   2b298:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2b29a:	b153      	cbz	r3, 2b2b2 <settings_name_steq+0x24>
   2b29c:	b1d0      	cbz	r0, 2b2d4 <settings_name_steq+0x46>
   2b29e:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2b2a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b2a4:	b180      	cbz	r0, 2b2c8 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2b2a6:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b2aa:	42a0      	cmp	r0, r4
   2b2ac:	d101      	bne.n	2b2b2 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b2ae:	283d      	cmp	r0, #61	; 0x3d
   2b2b0:	d1f6      	bne.n	2b2a0 <settings_name_steq+0x12>
		return 0;
   2b2b2:	2000      	movs	r0, #0
   2b2b4:	e00e      	b.n	2b2d4 <settings_name_steq+0x46>
			*next = name + 1;
   2b2b6:	3301      	adds	r3, #1
   2b2b8:	6013      	str	r3, [r2, #0]
   2b2ba:	e00a      	b.n	2b2d2 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2b2bc:	283d      	cmp	r0, #61	; 0x3d
   2b2be:	d008      	beq.n	2b2d2 <settings_name_steq+0x44>
   2b2c0:	fab0 f080 	clz	r0, r0
   2b2c4:	0940      	lsrs	r0, r0, #5
   2b2c6:	e005      	b.n	2b2d4 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2b2c8:	7818      	ldrb	r0, [r3, #0]
   2b2ca:	282f      	cmp	r0, #47	; 0x2f
   2b2cc:	d1f6      	bne.n	2b2bc <settings_name_steq+0x2e>
		if (next) {
   2b2ce:	2a00      	cmp	r2, #0
   2b2d0:	d1f1      	bne.n	2b2b6 <settings_name_steq+0x28>
		return 1;
   2b2d2:	2001      	movs	r0, #1
}
   2b2d4:	bd10      	pop	{r4, pc}

0002b2d6 <settings_name_next>:
{
   2b2d6:	b510      	push	{r4, lr}
	if (next) {
   2b2d8:	b109      	cbz	r1, 2b2de <settings_name_next+0x8>
		*next = NULL;
   2b2da:	2300      	movs	r3, #0
   2b2dc:	600b      	str	r3, [r1, #0]
	if (!name) {
   2b2de:	b158      	cbz	r0, 2b2f8 <settings_name_next+0x22>
   2b2e0:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2b2e2:	781a      	ldrb	r2, [r3, #0]
   2b2e4:	461c      	mov	r4, r3
   2b2e6:	3301      	adds	r3, #1
   2b2e8:	b12a      	cbz	r2, 2b2f6 <settings_name_next+0x20>
   2b2ea:	2a3d      	cmp	r2, #61	; 0x3d
   2b2ec:	d003      	beq.n	2b2f6 <settings_name_next+0x20>
   2b2ee:	2a2f      	cmp	r2, #47	; 0x2f
   2b2f0:	d1f7      	bne.n	2b2e2 <settings_name_next+0xc>
		if (next) {
   2b2f2:	b101      	cbz	r1, 2b2f6 <settings_name_next+0x20>
			*next = name + 1;
   2b2f4:	600b      	str	r3, [r1, #0]
   2b2f6:	1a20      	subs	r0, r4, r0
}
   2b2f8:	bd10      	pop	{r4, pc}

0002b2fa <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2b2fa:	3008      	adds	r0, #8
   2b2fc:	4770      	bx	lr

0002b2fe <settings_nvs_read_fn>:
{
   2b2fe:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b300:	4613      	mov	r3, r2
{
   2b302:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b304:	460a      	mov	r2, r1
   2b306:	8881      	ldrh	r1, [r0, #4]
   2b308:	6800      	ldr	r0, [r0, #0]
   2b30a:	f7ff fdad 	bl	2ae68 <nvs_read>
}
   2b30e:	42a0      	cmp	r0, r4
   2b310:	bfa8      	it	ge
   2b312:	4620      	movge	r0, r4
   2b314:	bd10      	pop	{r4, pc}

0002b316 <settings_nvs_save>:
{
   2b316:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b31a:	b097      	sub	sp, #92	; 0x5c
   2b31c:	4604      	mov	r4, r0
   2b31e:	469a      	mov	sl, r3
	if (!name) {
   2b320:	4689      	mov	r9, r1
{
   2b322:	9201      	str	r2, [sp, #4]
	if (!name) {
   2b324:	2900      	cmp	r1, #0
   2b326:	d07e      	beq.n	2b426 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   2b328:	b1da      	cbz	r2, 2b362 <settings_nvs_save+0x4c>
   2b32a:	faba f78a 	clz	r7, sl
   2b32e:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2b330:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b332:	f104 0b08 	add.w	fp, r4, #8
	name_id = cf->last_name_id + 1;
   2b336:	3501      	adds	r5, #1
   2b338:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2b33a:	46a8      	mov	r8, r5
		name_id--;
   2b33c:	1e6e      	subs	r6, r5, #1
   2b33e:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2b340:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2b344:	d029      	beq.n	2b39a <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b346:	234a      	movs	r3, #74	; 0x4a
   2b348:	4631      	mov	r1, r6
   2b34a:	4658      	mov	r0, fp
   2b34c:	aa03      	add	r2, sp, #12
   2b34e:	f7ff fd8b 	bl	2ae68 <nvs_read>
		if (rc < 0) {
   2b352:	2800      	cmp	r0, #0
   2b354:	da07      	bge.n	2b366 <settings_nvs_save+0x50>
		name_id--;
   2b356:	f110 0f02 	cmn.w	r0, #2
   2b35a:	bf08      	it	eq
   2b35c:	46b0      	moveq	r8, r6
   2b35e:	4635      	mov	r5, r6
   2b360:	e7ec      	b.n	2b33c <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2b362:	2701      	movs	r7, #1
   2b364:	e7e4      	b.n	2b330 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2b366:	f100 0358 	add.w	r3, r0, #88	; 0x58
   2b36a:	eb0d 0003 	add.w	r0, sp, r3
   2b36e:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   2b370:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   2b372:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2b376:	4648      	mov	r0, r9
   2b378:	f7dd fffb 	bl	9372 <strcmp>
   2b37c:	2800      	cmp	r0, #0
   2b37e:	d1ee      	bne.n	2b35e <settings_nvs_save+0x48>
		if (!delete) {
   2b380:	b32f      	cbz	r7, 2b3ce <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   2b382:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2b384:	42b3      	cmp	r3, r6
   2b386:	d00b      	beq.n	2b3a0 <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2b388:	4631      	mov	r1, r6
   2b38a:	4658      	mov	r0, fp
   2b38c:	f7ff fd68 	bl	2ae60 <nvs_delete>
		if (rc >= 0) {
   2b390:	2800      	cmp	r0, #0
   2b392:	da12      	bge.n	2b3ba <settings_nvs_save+0xa4>
}
   2b394:	b017      	add	sp, #92	; 0x5c
   2b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2b39a:	b3b7      	cbz	r7, 2b40a <settings_nvs_save+0xf4>
			return 0;
   2b39c:	2000      	movs	r0, #0
   2b39e:	e7f9      	b.n	2b394 <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2b3a0:	4622      	mov	r2, r4
   2b3a2:	1e73      	subs	r3, r6, #1
   2b3a4:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2b3a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b3ac:	2302      	movs	r3, #2
   2b3ae:	4658      	mov	r0, fp
   2b3b0:	f7e3 ff7a 	bl	f2a8 <nvs_write>
			if (rc < 0) {
   2b3b4:	2800      	cmp	r0, #0
   2b3b6:	dae7      	bge.n	2b388 <settings_nvs_save+0x72>
   2b3b8:	e7ec      	b.n	2b394 <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2b3ba:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2b3be:	313f      	adds	r1, #63	; 0x3f
   2b3c0:	4658      	mov	r0, fp
   2b3c2:	b289      	uxth	r1, r1
   2b3c4:	f7ff fd4c 	bl	2ae60 <nvs_delete>
	if (rc < 0) {
   2b3c8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2b3cc:	e7e2      	b.n	2b394 <settings_nvs_save+0x7e>
		name_id--;
   2b3ce:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2b3d0:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2b3d4:	d02a      	beq.n	2b42c <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2b3d6:	f104 0508 	add.w	r5, r4, #8
   2b3da:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2b3de:	4653      	mov	r3, sl
   2b3e0:	4628      	mov	r0, r5
   2b3e2:	9a01      	ldr	r2, [sp, #4]
   2b3e4:	b289      	uxth	r1, r1
   2b3e6:	f7e3 ff5f 	bl	f2a8 <nvs_write>
	if (rc < 0) {
   2b3ea:	2800      	cmp	r0, #0
   2b3ec:	dbd2      	blt.n	2b394 <settings_nvs_save+0x7e>
	if (write_name) {
   2b3ee:	b977      	cbnz	r7, 2b40e <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2b3f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2b3f2:	4543      	cmp	r3, r8
   2b3f4:	d2d2      	bcs.n	2b39c <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2b3f6:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b3f8:	2302      	movs	r3, #2
   2b3fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b3fe:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   2b400:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b404:	f7e3 ff50 	bl	f2a8 <nvs_write>
   2b408:	e7de      	b.n	2b3c8 <settings_nvs_save+0xb2>
	write_name = true;
   2b40a:	2701      	movs	r7, #1
   2b40c:	e7e0      	b.n	2b3d0 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2b40e:	4648      	mov	r0, r9
   2b410:	f7dd ffb9 	bl	9386 <strlen>
   2b414:	464a      	mov	r2, r9
   2b416:	4603      	mov	r3, r0
   2b418:	4641      	mov	r1, r8
   2b41a:	4628      	mov	r0, r5
   2b41c:	f7e3 ff44 	bl	f2a8 <nvs_write>
		if (rc < 0) {
   2b420:	2800      	cmp	r0, #0
   2b422:	dae5      	bge.n	2b3f0 <settings_nvs_save+0xda>
   2b424:	e7b6      	b.n	2b394 <settings_nvs_save+0x7e>
		return -EINVAL;
   2b426:	f06f 0015 	mvn.w	r0, #21
   2b42a:	e7b3      	b.n	2b394 <settings_nvs_save+0x7e>
		return -ENOMEM;
   2b42c:	f06f 000b 	mvn.w	r0, #11
   2b430:	e7b0      	b.n	2b394 <settings_nvs_save+0x7e>

0002b432 <settings_nvs_backend_init>:
{
   2b432:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   2b434:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   2b436:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   2b438:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   2b43a:	b1c3      	cbz	r3, 2b46e <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2b43c:	f100 0608 	add.w	r6, r0, #8
   2b440:	4630      	mov	r0, r6
   2b442:	f7e3 fd59 	bl	eef8 <nvs_mount>
	if (rc) {
   2b446:	4605      	mov	r5, r0
   2b448:	b970      	cbnz	r0, 2b468 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2b44a:	2302      	movs	r3, #2
   2b44c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b450:	4630      	mov	r0, r6
   2b452:	f10d 0206 	add.w	r2, sp, #6
   2b456:	f7ff fd07 	bl	2ae68 <nvs_read>
	if (rc < 0) {
   2b45a:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2b45c:	bfb4      	ite	lt
   2b45e:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   2b462:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   2b466:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2b468:	4628      	mov	r0, r5
   2b46a:	b002      	add	sp, #8
   2b46c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2b46e:	f06f 0512 	mvn.w	r5, #18
   2b472:	e7f9      	b.n	2b468 <settings_nvs_backend_init+0x36>

0002b474 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2b474:	b538      	push	{r3, r4, r5, lr}
   2b476:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2b478:	42ab      	cmp	r3, r5
{
   2b47a:	4611      	mov	r1, r2
   2b47c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2b47e:	d804      	bhi.n	2b48a <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b480:	461a      	mov	r2, r3
   2b482:	f005 f860 	bl	30546 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2b486:	4620      	mov	r0, r4
   2b488:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2b48a:	2400      	movs	r4, #0
   2b48c:	e7fb      	b.n	2b486 <_copy+0x12>

0002b48e <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2b48e:	f005 b894 	b.w	305ba <memset>

0002b492 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2b492:	09c3      	lsrs	r3, r0, #7
   2b494:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2b498:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2b49c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2b4a0:	b2c0      	uxtb	r0, r0
   2b4a2:	4770      	bx	lr

0002b4a4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2b4a4:	78cb      	ldrb	r3, [r1, #3]
   2b4a6:	7802      	ldrb	r2, [r0, #0]
   2b4a8:	4053      	eors	r3, r2
   2b4aa:	7003      	strb	r3, [r0, #0]
   2b4ac:	884b      	ldrh	r3, [r1, #2]
   2b4ae:	7842      	ldrb	r2, [r0, #1]
   2b4b0:	4053      	eors	r3, r2
   2b4b2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2b4b4:	680a      	ldr	r2, [r1, #0]
   2b4b6:	7883      	ldrb	r3, [r0, #2]
   2b4b8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b4bc:	7083      	strb	r3, [r0, #2]
   2b4be:	680a      	ldr	r2, [r1, #0]
   2b4c0:	78c3      	ldrb	r3, [r0, #3]
   2b4c2:	4053      	eors	r3, r2
   2b4c4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2b4c6:	79cb      	ldrb	r3, [r1, #7]
   2b4c8:	7902      	ldrb	r2, [r0, #4]
   2b4ca:	4053      	eors	r3, r2
   2b4cc:	7103      	strb	r3, [r0, #4]
   2b4ce:	88cb      	ldrh	r3, [r1, #6]
   2b4d0:	7942      	ldrb	r2, [r0, #5]
   2b4d2:	4053      	eors	r3, r2
   2b4d4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2b4d6:	684a      	ldr	r2, [r1, #4]
   2b4d8:	7983      	ldrb	r3, [r0, #6]
   2b4da:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b4de:	7183      	strb	r3, [r0, #6]
   2b4e0:	684a      	ldr	r2, [r1, #4]
   2b4e2:	79c3      	ldrb	r3, [r0, #7]
   2b4e4:	4053      	eors	r3, r2
   2b4e6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2b4e8:	7acb      	ldrb	r3, [r1, #11]
   2b4ea:	7a02      	ldrb	r2, [r0, #8]
   2b4ec:	4053      	eors	r3, r2
   2b4ee:	7203      	strb	r3, [r0, #8]
   2b4f0:	7a42      	ldrb	r2, [r0, #9]
   2b4f2:	894b      	ldrh	r3, [r1, #10]
   2b4f4:	4053      	eors	r3, r2
   2b4f6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2b4f8:	688a      	ldr	r2, [r1, #8]
   2b4fa:	7a83      	ldrb	r3, [r0, #10]
   2b4fc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b500:	7283      	strb	r3, [r0, #10]
   2b502:	688a      	ldr	r2, [r1, #8]
   2b504:	7ac3      	ldrb	r3, [r0, #11]
   2b506:	4053      	eors	r3, r2
   2b508:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2b50a:	7bcb      	ldrb	r3, [r1, #15]
   2b50c:	7b02      	ldrb	r2, [r0, #12]
   2b50e:	4053      	eors	r3, r2
   2b510:	7303      	strb	r3, [r0, #12]
   2b512:	89cb      	ldrh	r3, [r1, #14]
   2b514:	7b42      	ldrb	r2, [r0, #13]
   2b516:	4053      	eors	r3, r2
   2b518:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2b51a:	68ca      	ldr	r2, [r1, #12]
   2b51c:	7b83      	ldrb	r3, [r0, #14]
   2b51e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b522:	7383      	strb	r3, [r0, #14]
   2b524:	68ca      	ldr	r2, [r1, #12]
   2b526:	7bc3      	ldrb	r3, [r0, #15]
   2b528:	4053      	eors	r3, r2
   2b52a:	73c3      	strb	r3, [r0, #15]
}
   2b52c:	4770      	bx	lr

0002b52e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2b52e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b530:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b532:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b534:	f88d 2000 	strb.w	r2, [sp]
   2b538:	7942      	ldrb	r2, [r0, #5]
   2b53a:	f88d 2001 	strb.w	r2, [sp, #1]
   2b53e:	7a82      	ldrb	r2, [r0, #10]
   2b540:	f88d 2002 	strb.w	r2, [sp, #2]
   2b544:	7bc2      	ldrb	r2, [r0, #15]
   2b546:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2b54a:	7902      	ldrb	r2, [r0, #4]
   2b54c:	f88d 2004 	strb.w	r2, [sp, #4]
   2b550:	7a42      	ldrb	r2, [r0, #9]
   2b552:	f88d 2005 	strb.w	r2, [sp, #5]
   2b556:	7b82      	ldrb	r2, [r0, #14]
   2b558:	f88d 2006 	strb.w	r2, [sp, #6]
   2b55c:	78c2      	ldrb	r2, [r0, #3]
   2b55e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2b562:	7a02      	ldrb	r2, [r0, #8]
   2b564:	f88d 2008 	strb.w	r2, [sp, #8]
   2b568:	7b42      	ldrb	r2, [r0, #13]
   2b56a:	f88d 2009 	strb.w	r2, [sp, #9]
   2b56e:	7882      	ldrb	r2, [r0, #2]
   2b570:	f88d 200a 	strb.w	r2, [sp, #10]
   2b574:	79c2      	ldrb	r2, [r0, #7]
   2b576:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b57a:	7b02      	ldrb	r2, [r0, #12]
   2b57c:	f88d 200c 	strb.w	r2, [sp, #12]
   2b580:	7842      	ldrb	r2, [r0, #1]
   2b582:	f88d 200d 	strb.w	r2, [sp, #13]
   2b586:	7982      	ldrb	r2, [r0, #6]
   2b588:	f88d 200e 	strb.w	r2, [sp, #14]
   2b58c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b590:	2310      	movs	r3, #16
   2b592:	466a      	mov	r2, sp
   2b594:	4619      	mov	r1, r3
   2b596:	f7ff ff6d 	bl	2b474 <_copy>
}
   2b59a:	b005      	add	sp, #20
   2b59c:	f85d fb04 	ldr.w	pc, [sp], #4

0002b5a0 <mult_row_column>:
{
   2b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5a2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b5a4:	7808      	ldrb	r0, [r1, #0]
{
   2b5a6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b5a8:	f7ff ff73 	bl	2b492 <_double_byte>
   2b5ac:	4605      	mov	r5, r0
   2b5ae:	7860      	ldrb	r0, [r4, #1]
   2b5b0:	f7ff ff6f 	bl	2b492 <_double_byte>
   2b5b4:	78a2      	ldrb	r2, [r4, #2]
   2b5b6:	7863      	ldrb	r3, [r4, #1]
   2b5b8:	4053      	eors	r3, r2
   2b5ba:	78e2      	ldrb	r2, [r4, #3]
   2b5bc:	4053      	eors	r3, r2
   2b5be:	405d      	eors	r5, r3
   2b5c0:	4068      	eors	r0, r5
   2b5c2:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b5c4:	7860      	ldrb	r0, [r4, #1]
   2b5c6:	7827      	ldrb	r7, [r4, #0]
   2b5c8:	f7ff ff63 	bl	2b492 <_double_byte>
   2b5cc:	4605      	mov	r5, r0
   2b5ce:	78a0      	ldrb	r0, [r4, #2]
   2b5d0:	f7ff ff5f 	bl	2b492 <_double_byte>
   2b5d4:	78a3      	ldrb	r3, [r4, #2]
   2b5d6:	405f      	eors	r7, r3
   2b5d8:	78e3      	ldrb	r3, [r4, #3]
   2b5da:	405f      	eors	r7, r3
   2b5dc:	407d      	eors	r5, r7
   2b5de:	4068      	eors	r0, r5
   2b5e0:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b5e2:	7863      	ldrb	r3, [r4, #1]
   2b5e4:	7827      	ldrb	r7, [r4, #0]
   2b5e6:	78a0      	ldrb	r0, [r4, #2]
   2b5e8:	405f      	eors	r7, r3
   2b5ea:	f7ff ff52 	bl	2b492 <_double_byte>
   2b5ee:	4605      	mov	r5, r0
   2b5f0:	78e0      	ldrb	r0, [r4, #3]
   2b5f2:	f7ff ff4e 	bl	2b492 <_double_byte>
   2b5f6:	78e3      	ldrb	r3, [r4, #3]
   2b5f8:	405f      	eors	r7, r3
   2b5fa:	407d      	eors	r5, r7
   2b5fc:	4068      	eors	r0, r5
   2b5fe:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b600:	7820      	ldrb	r0, [r4, #0]
   2b602:	f7ff ff46 	bl	2b492 <_double_byte>
   2b606:	7862      	ldrb	r2, [r4, #1]
   2b608:	7823      	ldrb	r3, [r4, #0]
   2b60a:	4053      	eors	r3, r2
   2b60c:	78a2      	ldrb	r2, [r4, #2]
   2b60e:	4053      	eors	r3, r2
   2b610:	ea80 0503 	eor.w	r5, r0, r3
   2b614:	78e0      	ldrb	r0, [r4, #3]
   2b616:	f7ff ff3c 	bl	2b492 <_double_byte>
   2b61a:	b2ed      	uxtb	r5, r5
   2b61c:	4045      	eors	r5, r0
   2b61e:	70f5      	strb	r5, [r6, #3]
}
   2b620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b622 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b622:	b570      	push	{r4, r5, r6, lr}
   2b624:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b626:	4605      	mov	r5, r0
{
   2b628:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2b62a:	2800      	cmp	r0, #0
   2b62c:	d049      	beq.n	2b6c2 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b62e:	2900      	cmp	r1, #0
   2b630:	d049      	beq.n	2b6c6 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b632:	2a00      	cmp	r2, #0
   2b634:	d049      	beq.n	2b6ca <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b636:	2310      	movs	r3, #16
   2b638:	460a      	mov	r2, r1
   2b63a:	4668      	mov	r0, sp
   2b63c:	4619      	mov	r1, r3
   2b63e:	f7ff ff19 	bl	2b474 <_copy>
	add_round_key(state, s->words);
   2b642:	4621      	mov	r1, r4
   2b644:	4668      	mov	r0, sp
   2b646:	f7ff ff2d 	bl	2b4a4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b64a:	3410      	adds	r4, #16
   2b64c:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b650:	4668      	mov	r0, sp
   2b652:	f7e4 ffd5 	bl	10600 <sub_bytes>
		shift_rows(state);
   2b656:	4668      	mov	r0, sp
   2b658:	f7ff ff69 	bl	2b52e <shift_rows>
	mult_row_column(t, s);
   2b65c:	4669      	mov	r1, sp
   2b65e:	a804      	add	r0, sp, #16
   2b660:	f7ff ff9e 	bl	2b5a0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b664:	a901      	add	r1, sp, #4
   2b666:	a805      	add	r0, sp, #20
   2b668:	f7ff ff9a 	bl	2b5a0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b66c:	a902      	add	r1, sp, #8
   2b66e:	a806      	add	r0, sp, #24
   2b670:	f7ff ff96 	bl	2b5a0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b674:	a903      	add	r1, sp, #12
   2b676:	a807      	add	r0, sp, #28
   2b678:	f7ff ff92 	bl	2b5a0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b67c:	2310      	movs	r3, #16
   2b67e:	4668      	mov	r0, sp
   2b680:	4619      	mov	r1, r3
   2b682:	eb0d 0203 	add.w	r2, sp, r3
   2b686:	f7ff fef5 	bl	2b474 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b68a:	4621      	mov	r1, r4
   2b68c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b68e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b690:	f7ff ff08 	bl	2b4a4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b694:	42b4      	cmp	r4, r6
   2b696:	d1db      	bne.n	2b650 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b698:	f7e4 ffb2 	bl	10600 <sub_bytes>
	shift_rows(state);
   2b69c:	4668      	mov	r0, sp
   2b69e:	f7ff ff46 	bl	2b52e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b6a2:	4621      	mov	r1, r4
   2b6a4:	4668      	mov	r0, sp
   2b6a6:	f7ff fefd 	bl	2b4a4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b6aa:	2310      	movs	r3, #16
   2b6ac:	466a      	mov	r2, sp
   2b6ae:	4619      	mov	r1, r3
   2b6b0:	4628      	mov	r0, r5
   2b6b2:	f7ff fedf 	bl	2b474 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b6b6:	4668      	mov	r0, sp
   2b6b8:	2210      	movs	r2, #16
   2b6ba:	2100      	movs	r1, #0
   2b6bc:	f7ff fee7 	bl	2b48e <_set>

	return TC_CRYPTO_SUCCESS;
   2b6c0:	2001      	movs	r0, #1
}
   2b6c2:	b008      	add	sp, #32
   2b6c4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b6c6:	4608      	mov	r0, r1
   2b6c8:	e7fb      	b.n	2b6c2 <tc_aes_encrypt+0xa0>
   2b6ca:	4610      	mov	r0, r2
   2b6cc:	e7f9      	b.n	2b6c2 <tc_aes_encrypt+0xa0>

0002b6ce <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b6ce:	460a      	mov	r2, r1
{
   2b6d0:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b6d2:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2b6d6:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b6d8:	2b00      	cmp	r3, #0
   2b6da:	bfac      	ite	ge
   2b6dc:	2300      	movge	r3, #0
   2b6de:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b6e0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b6e4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b6e8:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b6ea:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b6ee:	d002      	beq.n	2b6f6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b6f0:	7813      	ldrb	r3, [r2, #0]
   2b6f2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b6f4:	e7f4      	b.n	2b6e0 <gf_double+0x12>
	}
}
   2b6f6:	bd10      	pop	{r4, pc}

0002b6f8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b6f8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b6fa:	b120      	cbz	r0, 2b706 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b6fc:	2258      	movs	r2, #88	; 0x58
   2b6fe:	2100      	movs	r1, #0
   2b700:	f7ff fec5 	bl	2b48e <_set>
   2b704:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b706:	bd08      	pop	{r3, pc}

0002b708 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b708:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b70a:	4604      	mov	r4, r0
   2b70c:	b188      	cbz	r0, 2b732 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b70e:	2210      	movs	r2, #16
   2b710:	2100      	movs	r1, #0
   2b712:	f7ff febc 	bl	2b48e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b716:	2210      	movs	r2, #16
   2b718:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b71c:	2100      	movs	r1, #0
   2b71e:	f7ff feb6 	bl	2b48e <_set>
	s->leftover_offset = 0;
   2b722:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b724:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2b726:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2b728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b72c:	2001      	movs	r0, #1
   2b72e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2b732:	bd10      	pop	{r4, pc}

0002b734 <tc_cmac_setup>:
{
   2b734:	b570      	push	{r4, r5, r6, lr}
   2b736:	4604      	mov	r4, r0
   2b738:	460d      	mov	r5, r1
   2b73a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b73c:	b310      	cbz	r0, 2b784 <tc_cmac_setup+0x50>
   2b73e:	b311      	cbz	r1, 2b786 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b740:	2258      	movs	r2, #88	; 0x58
   2b742:	2100      	movs	r1, #0
   2b744:	f7ff fea3 	bl	2b48e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b748:	4629      	mov	r1, r5
   2b74a:	4630      	mov	r0, r6
	s->sched = sched;
   2b74c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b74e:	f7e4 ff63 	bl	10618 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b752:	2210      	movs	r2, #16
   2b754:	2100      	movs	r1, #0
   2b756:	4620      	mov	r0, r4
   2b758:	f7ff fe99 	bl	2b48e <_set>
	gf_double (s->K1, s->iv);
   2b75c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b760:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b762:	4621      	mov	r1, r4
   2b764:	4620      	mov	r0, r4
   2b766:	f7ff ff5c 	bl	2b622 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b76a:	4621      	mov	r1, r4
   2b76c:	4628      	mov	r0, r5
   2b76e:	f7ff ffae 	bl	2b6ce <gf_double>
	gf_double (s->K2, s->K1);
   2b772:	4629      	mov	r1, r5
   2b774:	f104 0020 	add.w	r0, r4, #32
   2b778:	f7ff ffa9 	bl	2b6ce <gf_double>
	tc_cmac_init(s);
   2b77c:	4620      	mov	r0, r4
   2b77e:	f7ff ffc3 	bl	2b708 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b782:	2001      	movs	r0, #1
}
   2b784:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b786:	4608      	mov	r0, r1
   2b788:	e7fc      	b.n	2b784 <tc_cmac_setup+0x50>

0002b78a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b78e:	460e      	mov	r6, r1
   2b790:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b792:	4604      	mov	r4, r0
   2b794:	2800      	cmp	r0, #0
   2b796:	d060      	beq.n	2b85a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b798:	b1fa      	cbz	r2, 2b7da <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b79a:	2900      	cmp	r1, #0
   2b79c:	d05d      	beq.n	2b85a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b79e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b7a2:	ea53 0102 	orrs.w	r1, r3, r2
   2b7a6:	d058      	beq.n	2b85a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b7a8:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b7aa:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b7ae:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b7b2:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b7b6:	f1b8 0f00 	cmp.w	r8, #0
   2b7ba:	d02c      	beq.n	2b816 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b7bc:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b7c0:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b7c4:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b7c6:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b7c8:	d20a      	bcs.n	2b7e0 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b7ca:	462b      	mov	r3, r5
   2b7cc:	4632      	mov	r2, r6
   2b7ce:	4629      	mov	r1, r5
   2b7d0:	f7ff fe50 	bl	2b474 <_copy>
			s->leftover_offset += data_length;
   2b7d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b7d6:	442b      	add	r3, r5
   2b7d8:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b7da:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b7e0:	463b      	mov	r3, r7
   2b7e2:	4632      	mov	r2, r6
   2b7e4:	4639      	mov	r1, r7
   2b7e6:	f7ff fe45 	bl	2b474 <_copy>
		s->leftover_offset = 0;
   2b7ea:	2300      	movs	r3, #0
   2b7ec:	3d10      	subs	r5, #16
   2b7ee:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b7f0:	4445      	add	r5, r8
		data += remaining_space;
   2b7f2:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b7f4:	1e63      	subs	r3, r4, #1
   2b7f6:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b7fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b7fe:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b802:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b804:	ea82 0200 	eor.w	r2, r2, r0
   2b808:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b80a:	d1f6      	bne.n	2b7fa <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b80c:	4621      	mov	r1, r4
   2b80e:	4620      	mov	r0, r4
   2b810:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b812:	f7ff ff06 	bl	2b622 <tc_aes_encrypt>
   2b816:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b81a:	2d10      	cmp	r5, #16
   2b81c:	d80a      	bhi.n	2b834 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b81e:	2d00      	cmp	r5, #0
   2b820:	d0db      	beq.n	2b7da <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b822:	462b      	mov	r3, r5
   2b824:	4632      	mov	r2, r6
   2b826:	4629      	mov	r1, r5
   2b828:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b82c:	f7ff fe22 	bl	2b474 <_copy>
		s->leftover_offset = data_length;
   2b830:	6465      	str	r5, [r4, #68]	; 0x44
   2b832:	e7d2      	b.n	2b7da <tc_cmac_update+0x50>
   2b834:	1e63      	subs	r3, r4, #1
   2b836:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b838:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b83c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b840:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b842:	ea82 0200 	eor.w	r2, r2, r0
   2b846:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b848:	d1f6      	bne.n	2b838 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b84a:	4621      	mov	r1, r4
   2b84c:	4620      	mov	r0, r4
   2b84e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b850:	f7ff fee7 	bl	2b622 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b854:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b856:	3d10      	subs	r5, #16
   2b858:	e7df      	b.n	2b81a <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2b85a:	2000      	movs	r0, #0
   2b85c:	e7be      	b.n	2b7dc <tc_cmac_update+0x52>

0002b85e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2b85e:	b570      	push	{r4, r5, r6, lr}
   2b860:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b862:	4605      	mov	r5, r0
   2b864:	b1f0      	cbz	r0, 2b8a4 <tc_cmac_final+0x46>
   2b866:	b371      	cbz	r1, 2b8c6 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b868:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b86a:	2a10      	cmp	r2, #16
   2b86c:	d11b      	bne.n	2b8a6 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b86e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b870:	1e63      	subs	r3, r4, #1
   2b872:	3901      	subs	r1, #1
   2b874:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b878:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b87c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b880:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b882:	ea82 0206 	eor.w	r2, r2, r6
   2b886:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2b88a:	ea82 0206 	eor.w	r2, r2, r6
   2b88e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b890:	d1f2      	bne.n	2b878 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2b892:	4621      	mov	r1, r4
   2b894:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b896:	4628      	mov	r0, r5
   2b898:	f7ff fec3 	bl	2b622 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2b89c:	4620      	mov	r0, r4
   2b89e:	f7ff ff2b 	bl	2b6f8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2b8a2:	2001      	movs	r0, #1
}
   2b8a4:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2b8a6:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2b8aa:	2100      	movs	r1, #0
   2b8ac:	f1c2 0210 	rsb	r2, r2, #16
   2b8b0:	4420      	add	r0, r4
   2b8b2:	f7ff fdec 	bl	2b48e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b8b6:	2280      	movs	r2, #128	; 0x80
   2b8b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2b8ba:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b8be:	4423      	add	r3, r4
   2b8c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2b8c4:	e7d4      	b.n	2b870 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2b8c6:	4608      	mov	r0, r1
   2b8c8:	e7ec      	b.n	2b8a4 <tc_cmac_final+0x46>

0002b8ca <tc_sha256_update>:
{
   2b8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b8cc:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2b8ce:	b110      	cbz	r0, 2b8d6 <tc_sha256_update+0xc>
   2b8d0:	b1f9      	cbz	r1, 2b912 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2b8d2:	b90a      	cbnz	r2, 2b8d8 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2b8d4:	2001      	movs	r0, #1
}
   2b8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2b8d8:	2700      	movs	r7, #0
   2b8da:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2b8dc:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   2b8e0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2b8e2:	1c5a      	adds	r2, r3, #1
   2b8e4:	6682      	str	r2, [r0, #104]	; 0x68
   2b8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b8ea:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b8ec:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2b8ee:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b8f2:	d90b      	bls.n	2b90c <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   2b8f4:	4631      	mov	r1, r6
   2b8f6:	f7e4 fee3 	bl	106c0 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2b8fa:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2b8fe:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2b902:	f142 0200 	adc.w	r2, r2, #0
   2b906:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2b90a:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2b90c:	42a5      	cmp	r5, r4
   2b90e:	d1e7      	bne.n	2b8e0 <tc_sha256_update+0x16>
   2b910:	e7e0      	b.n	2b8d4 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2b912:	4608      	mov	r0, r1
   2b914:	e7df      	b.n	2b8d6 <tc_sha256_update+0xc>

0002b916 <tc_sha256_final>:
{
   2b916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b918:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2b91a:	4605      	mov	r5, r0
   2b91c:	2800      	cmp	r0, #0
   2b91e:	d054      	beq.n	2b9ca <tc_sha256_final+0xb4>
   2b920:	2900      	cmp	r1, #0
   2b922:	d053      	beq.n	2b9cc <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2b924:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2b926:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2b92a:	00d8      	lsls	r0, r3, #3
   2b92c:	1812      	adds	r2, r2, r0
   2b92e:	f141 0100 	adc.w	r1, r1, #0
   2b932:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b936:	2280      	movs	r2, #128	; 0x80
   2b938:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b93a:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b93c:	4423      	add	r3, r4
   2b93e:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2b940:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2b948:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b94c:	d90a      	bls.n	2b964 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2b94e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2b952:	4639      	mov	r1, r7
   2b954:	4430      	add	r0, r6
   2b956:	f7ff fd9a 	bl	2b48e <_set>
		compress(s->iv, s->leftover);
   2b95a:	4631      	mov	r1, r6
   2b95c:	4620      	mov	r0, r4
   2b95e:	f7e4 feaf 	bl	106c0 <compress>
		s->leftover_offset = 0;
   2b962:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2b964:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2b966:	2100      	movs	r1, #0
   2b968:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2b96c:	4430      	add	r0, r6
   2b96e:	f7ff fd8e 	bl	2b48e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b972:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2b974:	4631      	mov	r1, r6
   2b976:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b978:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2b97a:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b97c:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2b97e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b982:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b986:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2b988:	0e1b      	lsrs	r3, r3, #24
   2b98a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2b98e:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b990:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2b994:	f7e4 fe94 	bl	106c0 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b998:	1d2b      	adds	r3, r5, #4
   2b99a:	1f21      	subs	r1, r4, #4
   2b99c:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2b99e:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b9a2:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2b9a4:	0e10      	lsrs	r0, r2, #24
   2b9a6:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2b9aa:	0c10      	lsrs	r0, r2, #16
   2b9ac:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2b9b0:	0a10      	lsrs	r0, r2, #8
   2b9b2:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2b9b6:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b9ba:	42ab      	cmp	r3, r5
   2b9bc:	d1ef      	bne.n	2b99e <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2b9be:	4620      	mov	r0, r4
   2b9c0:	2270      	movs	r2, #112	; 0x70
   2b9c2:	2100      	movs	r1, #0
   2b9c4:	f7ff fd63 	bl	2b48e <_set>
	return TC_CRYPTO_SUCCESS;
   2b9c8:	2001      	movs	r0, #1
}
   2b9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b9cc:	4608      	mov	r0, r1
   2b9ce:	e7fc      	b.n	2b9ca <tc_sha256_final+0xb4>

0002b9d0 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2b9d0:	b530      	push	{r4, r5, lr}
   2b9d2:	1e43      	subs	r3, r0, #1
   2b9d4:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2b9d6:	42a9      	cmp	r1, r5
   2b9d8:	d106      	bne.n	2b9e8 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2b9da:	2136      	movs	r1, #54	; 0x36
   2b9dc:	245c      	movs	r4, #92	; 0x5c
   2b9de:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2b9e0:	1a13      	subs	r3, r2, r0
   2b9e2:	2b3f      	cmp	r3, #63	; 0x3f
   2b9e4:	d90c      	bls.n	2ba00 <rekey+0x30>
	}
}
   2b9e6:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   2b9e8:	780c      	ldrb	r4, [r1, #0]
   2b9ea:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   2b9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2b9f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b9f6:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   2b9fa:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2b9fe:	e7ea      	b.n	2b9d6 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2ba00:	f802 1b01 	strb.w	r1, [r2], #1
   2ba04:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2ba08:	e7ea      	b.n	2b9e0 <rekey+0x10>

0002ba0a <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2ba0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ba0c:	460e      	mov	r6, r1
   2ba0e:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2ba10:	4605      	mov	r5, r0
{
   2ba12:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2ba14:	b1b8      	cbz	r0, 2ba46 <tc_hmac_set_key+0x3c>
   2ba16:	b341      	cbz	r1, 2ba6a <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2ba18:	b34a      	cbz	r2, 2ba6e <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2ba1a:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2ba1c:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2ba20:	d813      	bhi.n	2ba4a <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2ba22:	a810      	add	r0, sp, #64	; 0x40
   2ba24:	f7e4 ff36 	bl	10894 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2ba28:	4622      	mov	r2, r4
   2ba2a:	4669      	mov	r1, sp
   2ba2c:	a810      	add	r0, sp, #64	; 0x40
   2ba2e:	f7ff ff4c 	bl	2b8ca <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2ba32:	a910      	add	r1, sp, #64	; 0x40
   2ba34:	a834      	add	r0, sp, #208	; 0xd0
   2ba36:	f7ff ff6e 	bl	2b916 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2ba3a:	4622      	mov	r2, r4
   2ba3c:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2ba3e:	4638      	mov	r0, r7
   2ba40:	f7ff ffc6 	bl	2b9d0 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2ba44:	2001      	movs	r0, #1
}
   2ba46:	b04d      	add	sp, #308	; 0x134
   2ba48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2ba4a:	f7e4 ff23 	bl	10894 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2ba4e:	4622      	mov	r2, r4
   2ba50:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2ba52:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2ba56:	4628      	mov	r0, r5
   2ba58:	f7ff ff37 	bl	2b8ca <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2ba5c:	4629      	mov	r1, r5
   2ba5e:	4620      	mov	r0, r4
   2ba60:	f7ff ff59 	bl	2b916 <tc_sha256_final>
		rekey(ctx->key,
   2ba64:	2220      	movs	r2, #32
   2ba66:	4621      	mov	r1, r4
   2ba68:	e7e9      	b.n	2ba3e <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2ba6a:	4608      	mov	r0, r1
   2ba6c:	e7eb      	b.n	2ba46 <tc_hmac_set_key+0x3c>
   2ba6e:	4610      	mov	r0, r2
   2ba70:	e7e9      	b.n	2ba46 <tc_hmac_set_key+0x3c>

0002ba72 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2ba72:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2ba74:	4604      	mov	r4, r0
   2ba76:	b140      	cbz	r0, 2ba8a <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2ba78:	f7e4 ff0c 	bl	10894 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2ba7c:	2240      	movs	r2, #64	; 0x40
   2ba7e:	4620      	mov	r0, r4
   2ba80:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2ba84:	f7ff ff21 	bl	2b8ca <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2ba88:	2001      	movs	r0, #1
}
   2ba8a:	bd10      	pop	{r4, pc}

0002ba8c <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2ba8c:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2ba8e:	b110      	cbz	r0, 2ba96 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2ba90:	f7ff ff1b 	bl	2b8ca <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2ba94:	2001      	movs	r0, #1
}
   2ba96:	bd08      	pop	{r3, pc}

0002ba98 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2ba98:	b570      	push	{r4, r5, r6, lr}
   2ba9a:	460e      	mov	r6, r1
   2ba9c:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2ba9e:	4605      	mov	r5, r0
   2baa0:	b1f0      	cbz	r0, 2bae0 <tc_hmac_final+0x48>
   2baa2:	2920      	cmp	r1, #32
   2baa4:	d11c      	bne.n	2bae0 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2baa6:	b1ea      	cbz	r2, 2bae4 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2baa8:	4611      	mov	r1, r2
   2baaa:	f7ff ff34 	bl	2b916 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2baae:	4620      	mov	r0, r4
   2bab0:	f7e4 fef0 	bl	10894 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2bab4:	2240      	movs	r2, #64	; 0x40
   2bab6:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2baba:	4620      	mov	r0, r4
   2babc:	f7ff ff05 	bl	2b8ca <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2bac0:	4632      	mov	r2, r6
   2bac2:	4629      	mov	r1, r5
   2bac4:	4620      	mov	r0, r4
   2bac6:	f7ff ff00 	bl	2b8ca <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2baca:	4621      	mov	r1, r4
   2bacc:	4628      	mov	r0, r5
   2bace:	f7ff ff22 	bl	2b916 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2bad2:	4620      	mov	r0, r4
   2bad4:	22f0      	movs	r2, #240	; 0xf0
   2bad6:	2100      	movs	r1, #0
   2bad8:	f7ff fcd9 	bl	2b48e <_set>

	return TC_CRYPTO_SUCCESS;
   2badc:	2001      	movs	r0, #1
}
   2bade:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2bae0:	2000      	movs	r0, #0
   2bae2:	e7fc      	b.n	2bade <tc_hmac_final+0x46>
   2bae4:	4610      	mov	r0, r2
   2bae6:	e7fa      	b.n	2bade <tc_hmac_final+0x46>

0002bae8 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2bae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2baec:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2baee:	f04f 0b01 	mov.w	fp, #1
{
   2baf2:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2baf4:	2300      	movs	r3, #0
{
   2baf6:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2baf8:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2bafc:	4631      	mov	r1, r6
{
   2bafe:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb00:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   2bb02:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2bb06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2bb0a:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bb0e:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb12:	f7ff ff7a 	bl	2ba0a <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2bb16:	4620      	mov	r0, r4
   2bb18:	f7ff ffab 	bl	2ba72 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bb1c:	2220      	movs	r2, #32
   2bb1e:	4629      	mov	r1, r5
   2bb20:	4620      	mov	r0, r4
   2bb22:	f7ff ffb3 	bl	2ba8c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2bb26:	465a      	mov	r2, fp
   2bb28:	4620      	mov	r0, r4
   2bb2a:	f10d 0106 	add.w	r1, sp, #6
   2bb2e:	f7ff ffad 	bl	2ba8c <tc_hmac_update>

	if (data && datalen)
   2bb32:	f1b8 0f00 	cmp.w	r8, #0
   2bb36:	d007      	beq.n	2bb48 <update+0x60>
   2bb38:	f1b9 0f00 	cmp.w	r9, #0
   2bb3c:	d004      	beq.n	2bb48 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2bb3e:	464a      	mov	r2, r9
   2bb40:	4641      	mov	r1, r8
   2bb42:	4620      	mov	r0, r4
   2bb44:	f7ff ffa2 	bl	2ba8c <tc_hmac_update>
	if (additional_data && additional_datalen)
   2bb48:	b13f      	cbz	r7, 2bb5a <update+0x72>
   2bb4a:	f1ba 0f00 	cmp.w	sl, #0
   2bb4e:	d004      	beq.n	2bb5a <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2bb50:	4652      	mov	r2, sl
   2bb52:	4639      	mov	r1, r7
   2bb54:	4620      	mov	r0, r4
   2bb56:	f7ff ff99 	bl	2ba8c <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2bb5a:	4622      	mov	r2, r4
   2bb5c:	2120      	movs	r1, #32
   2bb5e:	4630      	mov	r0, r6
   2bb60:	f7ff ff9a 	bl	2ba98 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb64:	2220      	movs	r2, #32
   2bb66:	4631      	mov	r1, r6
   2bb68:	4620      	mov	r0, r4
   2bb6a:	f7ff ff4e 	bl	2ba0a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2bb6e:	4620      	mov	r0, r4
   2bb70:	f7ff ff7f 	bl	2ba72 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bb74:	2220      	movs	r2, #32
   2bb76:	4629      	mov	r1, r5
   2bb78:	4620      	mov	r0, r4
   2bb7a:	f7ff ff87 	bl	2ba8c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bb7e:	4622      	mov	r2, r4
   2bb80:	2120      	movs	r1, #32
   2bb82:	4628      	mov	r0, r5
   2bb84:	f7ff ff88 	bl	2ba98 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2bb88:	f1b8 0f00 	cmp.w	r8, #0
   2bb8c:	d03a      	beq.n	2bc04 <update+0x11c>
   2bb8e:	f1b9 0f00 	cmp.w	r9, #0
   2bb92:	d037      	beq.n	2bc04 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb94:	2220      	movs	r2, #32
   2bb96:	4631      	mov	r1, r6
   2bb98:	4620      	mov	r0, r4
   2bb9a:	f7ff ff36 	bl	2ba0a <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2bb9e:	4620      	mov	r0, r4
   2bba0:	f7ff ff67 	bl	2ba72 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bba4:	2220      	movs	r2, #32
   2bba6:	4629      	mov	r1, r5
   2bba8:	4620      	mov	r0, r4
   2bbaa:	f7ff ff6f 	bl	2ba8c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2bbae:	2201      	movs	r2, #1
   2bbb0:	f10d 0107 	add.w	r1, sp, #7
   2bbb4:	4620      	mov	r0, r4
   2bbb6:	f7ff ff69 	bl	2ba8c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2bbba:	464a      	mov	r2, r9
   2bbbc:	4641      	mov	r1, r8
   2bbbe:	4620      	mov	r0, r4
   2bbc0:	f7ff ff64 	bl	2ba8c <tc_hmac_update>
	if (additional_data && additional_datalen)
   2bbc4:	b13f      	cbz	r7, 2bbd6 <update+0xee>
   2bbc6:	f1ba 0f00 	cmp.w	sl, #0
   2bbca:	d004      	beq.n	2bbd6 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2bbcc:	4652      	mov	r2, sl
   2bbce:	4639      	mov	r1, r7
   2bbd0:	4620      	mov	r0, r4
   2bbd2:	f7ff ff5b 	bl	2ba8c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2bbd6:	4622      	mov	r2, r4
   2bbd8:	2120      	movs	r1, #32
   2bbda:	4630      	mov	r0, r6
   2bbdc:	f7ff ff5c 	bl	2ba98 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bbe0:	2220      	movs	r2, #32
   2bbe2:	4631      	mov	r1, r6
   2bbe4:	4620      	mov	r0, r4
   2bbe6:	f7ff ff10 	bl	2ba0a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2bbea:	4620      	mov	r0, r4
   2bbec:	f7ff ff41 	bl	2ba72 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bbf0:	2220      	movs	r2, #32
   2bbf2:	4629      	mov	r1, r5
   2bbf4:	4620      	mov	r0, r4
   2bbf6:	f7ff ff49 	bl	2ba8c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bbfa:	4622      	mov	r2, r4
   2bbfc:	2120      	movs	r1, #32
   2bbfe:	4628      	mov	r0, r5
   2bc00:	f7ff ff4a 	bl	2ba98 <tc_hmac_final>
}
   2bc04:	b003      	add	sp, #12
   2bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bc0a <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2bc0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bc0c:	460c      	mov	r4, r1
   2bc0e:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2bc10:	4605      	mov	r5, r0
   2bc12:	b1b0      	cbz	r0, 2bc42 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2bc14:	b1b9      	cbz	r1, 2bc46 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2bc16:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2bc18:	2220      	movs	r2, #32
   2bc1a:	2100      	movs	r1, #0
   2bc1c:	30f0      	adds	r0, #240	; 0xf0
   2bc1e:	f7ff fc36 	bl	2b48e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2bc22:	2220      	movs	r2, #32
   2bc24:	2101      	movs	r1, #1
   2bc26:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2bc2a:	f7ff fc30 	bl	2b48e <_set>
	update(prng, personalization, plen, 0, 0);
   2bc2e:	4628      	mov	r0, r5
   2bc30:	4633      	mov	r3, r6
   2bc32:	463a      	mov	r2, r7
   2bc34:	4621      	mov	r1, r4
   2bc36:	9600      	str	r6, [sp, #0]
   2bc38:	f7ff ff56 	bl	2bae8 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2bc3c:	2001      	movs	r0, #1
	prng->countdown = 0;
   2bc3e:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2bc42:	b003      	add	sp, #12
   2bc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2bc46:	4608      	mov	r0, r1
   2bc48:	e7fb      	b.n	2bc42 <tc_hmac_prng_init+0x38>

0002bc4a <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2bc4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bc4c:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2bc4e:	4605      	mov	r5, r0
   2bc50:	b180      	cbz	r0, 2bc74 <tc_hmac_prng_reseed+0x2a>
   2bc52:	b179      	cbz	r1, 2bc74 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2bc54:	2a1f      	cmp	r2, #31
   2bc56:	d90d      	bls.n	2bc74 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2bc58:	b153      	cbz	r3, 2bc70 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2bc5a:	b16c      	cbz	r4, 2bc78 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2bc5c:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2bc5e:	f7ff ff43 	bl	2bae8 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2bc62:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2bc66:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2bc68:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2bc6c:	b003      	add	sp, #12
   2bc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2bc70:	9300      	str	r3, [sp, #0]
   2bc72:	e7f4      	b.n	2bc5e <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2bc74:	2000      	movs	r0, #0
   2bc76:	e7f9      	b.n	2bc6c <tc_hmac_prng_reseed+0x22>
   2bc78:	4620      	mov	r0, r4
   2bc7a:	e7f7      	b.n	2bc6c <tc_hmac_prng_reseed+0x22>

0002bc7c <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2bc7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2bc80:	460d      	mov	r5, r1
   2bc82:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2bc84:	4680      	mov	r8, r0
   2bc86:	b3d8      	cbz	r0, 2bd00 <tc_hmac_prng_generate+0x84>
   2bc88:	b3d2      	cbz	r2, 2bd00 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2bc8a:	1e4b      	subs	r3, r1, #1
   2bc8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2bc90:	d236      	bcs.n	2bd00 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2bc92:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2bc96:	b3ab      	cbz	r3, 2bd04 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2bc98:	3b01      	subs	r3, #1
   2bc9a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bc9e:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bca2:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bca6:	2220      	movs	r2, #32
   2bca8:	4649      	mov	r1, r9
   2bcaa:	4620      	mov	r0, r4
   2bcac:	f7ff fead 	bl	2ba0a <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2bcb0:	4620      	mov	r0, r4
   2bcb2:	f7ff fede 	bl	2ba72 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bcb6:	2220      	movs	r2, #32
   2bcb8:	4639      	mov	r1, r7
   2bcba:	4620      	mov	r0, r4
   2bcbc:	f7ff fee6 	bl	2ba8c <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bcc0:	4622      	mov	r2, r4
   2bcc2:	2120      	movs	r1, #32
   2bcc4:	4638      	mov	r0, r7
   2bcc6:	f7ff fee7 	bl	2ba98 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2bcca:	2d20      	cmp	r5, #32
   2bccc:	462e      	mov	r6, r5
   2bcce:	bf28      	it	cs
   2bcd0:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2bcd2:	4640      	mov	r0, r8
   2bcd4:	4633      	mov	r3, r6
   2bcd6:	463a      	mov	r2, r7
   2bcd8:	4631      	mov	r1, r6
   2bcda:	f7ff fbcb 	bl	2b474 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2bcde:	2d20      	cmp	r5, #32
   2bce0:	bf38      	it	cc
   2bce2:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2bce4:	3d20      	subs	r5, #32
		out += bufferlen;
   2bce6:	44b0      	add	r8, r6
	while (outlen != 0) {
   2bce8:	d1dd      	bne.n	2bca6 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2bcea:	4620      	mov	r0, r4
   2bcec:	462b      	mov	r3, r5
   2bcee:	462a      	mov	r2, r5
   2bcf0:	4629      	mov	r1, r5
   2bcf2:	9500      	str	r5, [sp, #0]
   2bcf4:	f7ff fef8 	bl	2bae8 <update>

	return TC_CRYPTO_SUCCESS;
   2bcf8:	2001      	movs	r0, #1
}
   2bcfa:	b003      	add	sp, #12
   2bcfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2bd00:	2000      	movs	r0, #0
   2bd02:	e7fa      	b.n	2bcfa <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2bd04:	f04f 30ff 	mov.w	r0, #4294967295
   2bd08:	e7f7      	b.n	2bcfa <tc_hmac_prng_generate+0x7e>

0002bd0a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2bd0a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2bd0c:	6800      	ldr	r0, [r0, #0]
   2bd0e:	f7e4 be0b 	b.w	10928 <z_arm_fatal_error>

0002bd12 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2bd12:	2100      	movs	r1, #0
   2bd14:	2001      	movs	r0, #1
   2bd16:	f7e4 be07 	b.w	10928 <z_arm_fatal_error>

0002bd1a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2bd1a:	b508      	push	{r3, lr}
	handler();
   2bd1c:	f7e4 fecc 	bl	10ab8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2bd20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2bd24:	f7e4 bf96 	b.w	10c54 <z_arm_exc_exit>

0002bd28 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2bd28:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2bd2a:	f383 880b 	msr	PSPLIM, r3
}
   2bd2e:	4770      	bx	lr

0002bd30 <z_log_msg_static_create.constprop.0>:
   2bd30:	2300      	movs	r3, #0
   2bd32:	f7e2 bd99 	b.w	e868 <z_impl_z_log_msg_static_create>

0002bd36 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2bd36:	4770      	bx	lr

0002bd38 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2bd38:	4770      	bx	lr

0002bd3a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2bd3a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2bd3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2bd42:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2bd44:	bf08      	it	eq
   2bd46:	f06f 0015 	mvneq.w	r0, #21
   2bd4a:	4770      	bx	lr

0002bd4c <mpu_configure_region>:
{
   2bd4c:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2bd4e:	890a      	ldrh	r2, [r1, #8]
   2bd50:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2bd52:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2bd54:	684c      	ldr	r4, [r1, #4]
   2bd56:	f002 021f 	and.w	r2, r2, #31
{
   2bd5a:	b085      	sub	sp, #20
   2bd5c:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2bd60:	9300      	str	r3, [sp, #0]
   2bd62:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2bd66:	f023 031f 	bic.w	r3, r3, #31
   2bd6a:	1e62      	subs	r2, r4, #1
   2bd6c:	4413      	add	r3, r2
   2bd6e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2bd72:	2807      	cmp	r0, #7
   2bd74:	9303      	str	r3, [sp, #12]
   2bd76:	d904      	bls.n	2bd82 <mpu_configure_region+0x36>
}
   2bd78:	b005      	add	sp, #20
   2bd7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2bd7e:	f7e5 bb8d 	b.w	1149c <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   2bd82:	4669      	mov	r1, sp
   2bd84:	f7e5 fb70 	bl	11468 <region_init>
}
   2bd88:	b005      	add	sp, #20
   2bd8a:	bd30      	pop	{r4, r5, pc}

0002bd8c <_stdout_hook_default>:
}
   2bd8c:	f04f 30ff 	mov.w	r0, #4294967295
   2bd90:	4770      	bx	lr

0002bd92 <_stdin_hook_default>:
}
   2bd92:	2000      	movs	r0, #0
   2bd94:	4770      	bx	lr

0002bd96 <_read>:
{
   2bd96:	4608      	mov	r0, r1
   2bd98:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2bd9a:	f7e5 bd8f 	b.w	118bc <z_impl_zephyr_read_stdin>

0002bd9e <_write>:
{
   2bd9e:	4608      	mov	r0, r1
   2bda0:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2bda2:	f7e5 bd9f 	b.w	118e4 <z_impl_zephyr_write_stdout>

0002bda6 <_close>:
int _close(int file)
   2bda6:	f04f 30ff 	mov.w	r0, #4294967295
   2bdaa:	4770      	bx	lr

0002bdac <_lseek>:
}
   2bdac:	2000      	movs	r0, #0
   2bdae:	4770      	bx	lr

0002bdb0 <_isatty>:
}
   2bdb0:	2802      	cmp	r0, #2
   2bdb2:	bfcc      	ite	gt
   2bdb4:	2000      	movgt	r0, #0
   2bdb6:	2001      	movle	r0, #1
   2bdb8:	4770      	bx	lr

0002bdba <_kill>:
}
   2bdba:	2000      	movs	r0, #0
   2bdbc:	4770      	bx	lr

0002bdbe <_getpid>:
}
   2bdbe:	2000      	movs	r0, #0
   2bdc0:	4770      	bx	lr

0002bdc2 <_fstat>:
	st->st_mode = S_IFCHR;
   2bdc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2bdc6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2bdc8:	604b      	str	r3, [r1, #4]
}
   2bdca:	4770      	bx	lr

0002bdcc <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2bdcc:	f7f8 bc7a 	b.w	246c4 <z_impl_z_errno>

0002bdd0 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2bdd0:	b530      	push	{r4, r5, lr}
   2bdd2:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   2bdd4:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   2bdd8:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2bdda:	794b      	ldrb	r3, [r1, #5]
   2bddc:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   2bde0:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   2bde2:	220d      	movs	r2, #13
   2bde4:	2100      	movs	r1, #0
   2bde6:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   2bdea:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   2bdee:	f004 fbe4 	bl	305ba <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2bdf2:	aa02      	add	r2, sp, #8
   2bdf4:	4611      	mov	r1, r2
   2bdf6:	4628      	mov	r0, r5
   2bdf8:	f000 fb59 	bl	2c4ae <bt_encrypt_le>
	if (err) {
   2bdfc:	b110      	cbz	r0, 2be04 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   2bdfe:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2be00:	b007      	add	sp, #28
   2be02:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   2be04:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   2be06:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   2be08:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   2be0c:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   2be0e:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   2be10:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   2be12:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2be16:	f004 fb86 	bl	30526 <memcmp>
   2be1a:	fab0 f080 	clz	r0, r0
   2be1e:	0940      	lsrs	r0, r0, #5
   2be20:	e7ee      	b.n	2be00 <bt_rpa_irk_matches+0x30>

0002be22 <bt_settings_decode_key>:
{
   2be22:	b570      	push	{r4, r5, r6, lr}
   2be24:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2be26:	2100      	movs	r1, #0
{
   2be28:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2be2a:	f7ff fa54 	bl	2b2d6 <settings_name_next>
   2be2e:	280d      	cmp	r0, #13
   2be30:	d118      	bne.n	2be64 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2be32:	7b23      	ldrb	r3, [r4, #12]
   2be34:	2b30      	cmp	r3, #48	; 0x30
   2be36:	d013      	beq.n	2be60 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2be38:	2b31      	cmp	r3, #49	; 0x31
   2be3a:	d113      	bne.n	2be64 <bt_settings_decode_key+0x42>
   2be3c:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2be3e:	f805 3b06 	strb.w	r3, [r5], #6
   2be42:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2be46:	462a      	mov	r2, r5
   2be48:	4620      	mov	r0, r4
   2be4a:	2301      	movs	r3, #1
   2be4c:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2be4e:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2be50:	f7fe fa10 	bl	2a274 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2be54:	42b4      	cmp	r4, r6
   2be56:	f105 35ff 	add.w	r5, r5, #4294967295
   2be5a:	d1f4      	bne.n	2be46 <bt_settings_decode_key+0x24>
	return 0;
   2be5c:	2000      	movs	r0, #0
}
   2be5e:	bd70      	pop	{r4, r5, r6, pc}
   2be60:	2300      	movs	r3, #0
   2be62:	e7ec      	b.n	2be3e <bt_settings_decode_key+0x1c>
		return -EINVAL;
   2be64:	f06f 0015 	mvn.w	r0, #21
   2be68:	e7f9      	b.n	2be5e <bt_settings_decode_key+0x3c>

0002be6a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2be6a:	b510      	push	{r4, lr}
   2be6c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2be6e:	7801      	ldrb	r1, [r0, #0]
   2be70:	7822      	ldrb	r2, [r4, #0]
{
   2be72:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2be74:	428a      	cmp	r2, r1
   2be76:	d00f      	beq.n	2be98 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2be78:	4669      	mov	r1, sp
   2be7a:	f7e5 ff99 	bl	11db0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2be7e:	4620      	mov	r0, r4
   2be80:	a905      	add	r1, sp, #20
   2be82:	f7e5 ff95 	bl	11db0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2be86:	2210      	movs	r2, #16
   2be88:	f10d 0115 	add.w	r1, sp, #21
   2be8c:	f10d 0001 	add.w	r0, sp, #1
   2be90:	f004 fb49 	bl	30526 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2be94:	b00a      	add	sp, #40	; 0x28
   2be96:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2be98:	2a01      	cmp	r2, #1
   2be9a:	d006      	beq.n	2beaa <bt_uuid_cmp+0x40>
   2be9c:	2a02      	cmp	r2, #2
   2be9e:	d007      	beq.n	2beb0 <bt_uuid_cmp+0x46>
   2bea0:	b972      	cbnz	r2, 2bec0 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2bea2:	8840      	ldrh	r0, [r0, #2]
   2bea4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2bea6:	1ac0      	subs	r0, r0, r3
   2bea8:	e7f4      	b.n	2be94 <bt_uuid_cmp+0x2a>
   2beaa:	6840      	ldr	r0, [r0, #4]
   2beac:	6863      	ldr	r3, [r4, #4]
   2beae:	e7fa      	b.n	2bea6 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2beb0:	2210      	movs	r2, #16
   2beb2:	1c61      	adds	r1, r4, #1
   2beb4:	3001      	adds	r0, #1
}
   2beb6:	b00a      	add	sp, #40	; 0x28
   2beb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bebc:	f004 bb33 	b.w	30526 <memcmp>
	switch (u1->type) {
   2bec0:	f06f 0015 	mvn.w	r0, #21
   2bec4:	e7e6      	b.n	2be94 <bt_uuid_cmp+0x2a>

0002bec6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2bec6:	2a04      	cmp	r2, #4
   2bec8:	d00a      	beq.n	2bee0 <bt_uuid_create+0x1a>
   2beca:	2a10      	cmp	r2, #16
   2becc:	d00d      	beq.n	2beea <bt_uuid_create+0x24>
   2bece:	2a02      	cmp	r2, #2
   2bed0:	f04f 0300 	mov.w	r3, #0
   2bed4:	d115      	bne.n	2bf02 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2bed6:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2bed8:	880b      	ldrh	r3, [r1, #0]
   2beda:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2bedc:	2001      	movs	r0, #1
   2bede:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2bee0:	2301      	movs	r3, #1
   2bee2:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2bee4:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2bee6:	6043      	str	r3, [r0, #4]
		break;
   2bee8:	e7f8      	b.n	2bedc <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2beea:	2302      	movs	r3, #2
   2beec:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bef0:	f101 0310 	add.w	r3, r1, #16
   2bef4:	f851 2b04 	ldr.w	r2, [r1], #4
   2bef8:	4299      	cmp	r1, r3
   2befa:	f840 2b04 	str.w	r2, [r0], #4
   2befe:	d1f9      	bne.n	2bef4 <bt_uuid_create+0x2e>
   2bf00:	e7ec      	b.n	2bedc <bt_uuid_create+0x16>
	switch (data_len) {
   2bf02:	4618      	mov	r0, r3
}
   2bf04:	4770      	bx	lr

0002bf06 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2bf06:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2bf08:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2bf0a:	2106      	movs	r1, #6
{
   2bf0c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2bf0e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2bf12:	f7e8 fb03 	bl	1451c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2bf16:	b918      	cbnz	r0, 2bf20 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2bf18:	79a3      	ldrb	r3, [r4, #6]
   2bf1a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2bf1e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2bf20:	bd10      	pop	{r4, pc}

0002bf22 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2bf22:	280f      	cmp	r0, #15
   2bf24:	d807      	bhi.n	2bf36 <bt_hci_evt_get_flags+0x14>
   2bf26:	280d      	cmp	r0, #13
   2bf28:	d80b      	bhi.n	2bf42 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2bf2a:	2805      	cmp	r0, #5
   2bf2c:	bf08      	it	eq
   2bf2e:	2003      	moveq	r0, #3
   2bf30:	bf18      	it	ne
   2bf32:	2002      	movne	r0, #2
   2bf34:	4770      	bx	lr
	switch (evt) {
   2bf36:	2813      	cmp	r0, #19
   2bf38:	d003      	beq.n	2bf42 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2bf3a:	281a      	cmp	r0, #26
   2bf3c:	bf08      	it	eq
   2bf3e:	2001      	moveq	r0, #1
   2bf40:	e7f6      	b.n	2bf30 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2bf42:	2001      	movs	r0, #1
	}
}
   2bf44:	4770      	bx	lr

0002bf46 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2bf46:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2bf4a:	b183      	cbz	r3, 2bf6e <update_sec_level+0x28>
   2bf4c:	7b5a      	ldrb	r2, [r3, #13]
   2bf4e:	07d1      	lsls	r1, r2, #31
   2bf50:	d50d      	bpl.n	2bf6e <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2bf52:	06d2      	lsls	r2, r2, #27
   2bf54:	d50d      	bpl.n	2bf72 <update_sec_level+0x2c>
   2bf56:	7b1b      	ldrb	r3, [r3, #12]
   2bf58:	2b10      	cmp	r3, #16
   2bf5a:	bf14      	ite	ne
   2bf5c:	2303      	movne	r3, #3
   2bf5e:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2bf60:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2bf62:	7a80      	ldrb	r0, [r0, #10]
}
   2bf64:	4298      	cmp	r0, r3
   2bf66:	bf8c      	ite	hi
   2bf68:	2000      	movhi	r0, #0
   2bf6a:	2001      	movls	r0, #1
   2bf6c:	4770      	bx	lr
   2bf6e:	2302      	movs	r3, #2
   2bf70:	e7f6      	b.n	2bf60 <update_sec_level+0x1a>
   2bf72:	2303      	movs	r3, #3
   2bf74:	e7f4      	b.n	2bf60 <update_sec_level+0x1a>

0002bf76 <hci_vendor_event>:
}
   2bf76:	4770      	bx	lr

0002bf78 <atomic_or>:
{
   2bf78:	4603      	mov	r3, r0
   2bf7a:	b510      	push	{r4, lr}
}
   2bf7c:	e8d3 0fef 	ldaex	r0, [r3]
   2bf80:	ea40 0201 	orr.w	r2, r0, r1
   2bf84:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2bf88:	2c00      	cmp	r4, #0
   2bf8a:	d1f7      	bne.n	2bf7c <atomic_or+0x4>
   2bf8c:	bd10      	pop	{r4, pc}

0002bf8e <bt_addr_copy>:
   2bf8e:	680b      	ldr	r3, [r1, #0]
   2bf90:	6003      	str	r3, [r0, #0]
   2bf92:	888b      	ldrh	r3, [r1, #4]
   2bf94:	8083      	strh	r3, [r0, #4]
}
   2bf96:	4770      	bx	lr

0002bf98 <bt_addr_le_copy>:
   2bf98:	680b      	ldr	r3, [r1, #0]
   2bf9a:	6003      	str	r3, [r0, #0]
   2bf9c:	888b      	ldrh	r3, [r1, #4]
   2bf9e:	8083      	strh	r3, [r0, #4]
   2bfa0:	798b      	ldrb	r3, [r1, #6]
   2bfa2:	7183      	strb	r3, [r0, #6]
}
   2bfa4:	4770      	bx	lr

0002bfa6 <z_log_msg_static_create.constprop.0>:
   2bfa6:	2300      	movs	r3, #0
   2bfa8:	f7e2 bc5e 	b.w	e868 <z_impl_z_log_msg_static_create>

0002bfac <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bfac:	e8d0 3fef 	ldaex	r3, [r0]
   2bfb0:	400b      	ands	r3, r1
   2bfb2:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2bfb6:	2a00      	cmp	r2, #0
   2bfb8:	d1f8      	bne.n	2bfac <atomic_and.isra.0>
}
   2bfba:	4770      	bx	lr

0002bfbc <sys_put_le64>:
	dst[1] = val >> 8;
   2bfbc:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2bfc0:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2bfc2:	2300      	movs	r3, #0
   2bfc4:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2bfc6:	0e00      	lsrs	r0, r0, #24
   2bfc8:	70d0      	strb	r0, [r2, #3]
   2bfca:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2bfce:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2bfd0:	7093      	strb	r3, [r2, #2]
   2bfd2:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2bfd4:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2bfd6:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2bfd8:	71d1      	strb	r1, [r2, #7]
}
   2bfda:	4770      	bx	lr

0002bfdc <bt_hci_disconnect>:
{
   2bfdc:	b570      	push	{r4, r5, r6, lr}
   2bfde:	4606      	mov	r6, r0
   2bfe0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2bfe2:	f240 4006 	movw	r0, #1030	; 0x406
   2bfe6:	2103      	movs	r1, #3
   2bfe8:	f7e6 fbd2 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   2bfec:	4604      	mov	r4, r0
   2bfee:	b168      	cbz	r0, 2c00c <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2bff0:	2103      	movs	r1, #3
   2bff2:	300c      	adds	r0, #12
   2bff4:	f7ef fbd6 	bl	1b7a4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2bff8:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2bffa:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2bffc:	4621      	mov	r1, r4
}
   2bffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c002:	2200      	movs	r2, #0
   2c004:	f240 4006 	movw	r0, #1030	; 0x406
   2c008:	f7e6 bc10 	b.w	1282c <bt_hci_cmd_send_sync>
}
   2c00c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c010:	bd70      	pop	{r4, r5, r6, pc}

0002c012 <bt_le_set_data_len>:
{
   2c012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c014:	4607      	mov	r7, r0
   2c016:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c018:	f242 0022 	movw	r0, #8226	; 0x2022
   2c01c:	2106      	movs	r1, #6
{
   2c01e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c020:	f7e6 fbb6 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   2c024:	4604      	mov	r4, r0
   2c026:	b178      	cbz	r0, 2c048 <bt_le_set_data_len+0x36>
   2c028:	2106      	movs	r1, #6
   2c02a:	300c      	adds	r0, #12
   2c02c:	f7ef fbba 	bl	1b7a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c030:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2c032:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c034:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2c036:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c038:	4621      	mov	r1, r4
}
   2c03a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c03e:	2200      	movs	r2, #0
   2c040:	f242 0022 	movw	r0, #8226	; 0x2022
   2c044:	f7e6 bbf2 	b.w	1282c <bt_hci_cmd_send_sync>
}
   2c048:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c04e <bt_le_set_phy>:
{
   2c04e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c052:	4681      	mov	r9, r0
   2c054:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c056:	f242 0032 	movw	r0, #8242	; 0x2032
   2c05a:	2107      	movs	r1, #7
{
   2c05c:	4617      	mov	r7, r2
   2c05e:	461e      	mov	r6, r3
   2c060:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c064:	f7e6 fb94 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   2c068:	4605      	mov	r5, r0
   2c06a:	b1a0      	cbz	r0, 2c096 <bt_le_set_phy+0x48>
   2c06c:	2107      	movs	r1, #7
   2c06e:	300c      	adds	r0, #12
   2c070:	f7ef fb98 	bl	1b7a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c074:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   2c078:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c07c:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2c07e:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2c080:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2c082:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c086:	4629      	mov	r1, r5
}
   2c088:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c08c:	2200      	movs	r2, #0
   2c08e:	f242 0032 	movw	r0, #8242	; 0x2032
   2c092:	f7e6 bbcb 	b.w	1282c <bt_hci_cmd_send_sync>
}
   2c096:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c09e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2c09e:	68c0      	ldr	r0, [r0, #12]
   2c0a0:	f7e6 bc94 	b.w	129cc <bt_hci_le_enh_conn_complete>

0002c0a4 <bt_le_conn_params_valid>:
{
   2c0a4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2c0a6:	8803      	ldrh	r3, [r0, #0]
   2c0a8:	8842      	ldrh	r2, [r0, #2]
   2c0aa:	4293      	cmp	r3, r2
   2c0ac:	d819      	bhi.n	2c0e2 <bt_le_conn_params_valid+0x3e>
   2c0ae:	2b05      	cmp	r3, #5
   2c0b0:	d917      	bls.n	2c0e2 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2c0b2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2c0b6:	d814      	bhi.n	2c0e2 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2c0b8:	8883      	ldrh	r3, [r0, #4]
   2c0ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2c0be:	d210      	bcs.n	2c0e2 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c0c0:	f640 4476 	movw	r4, #3190	; 0xc76
   2c0c4:	88c0      	ldrh	r0, [r0, #6]
   2c0c6:	f1a0 010a 	sub.w	r1, r0, #10
   2c0ca:	b289      	uxth	r1, r1
   2c0cc:	42a1      	cmp	r1, r4
   2c0ce:	d808      	bhi.n	2c0e2 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2c0d0:	3301      	adds	r3, #1
   2c0d2:	b29b      	uxth	r3, r3
   2c0d4:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c0d6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2c0da:	bf34      	ite	cc
   2c0dc:	2001      	movcc	r0, #1
   2c0de:	2000      	movcs	r0, #0
}
   2c0e0:	bd10      	pop	{r4, pc}
		return false;
   2c0e2:	2000      	movs	r0, #0
   2c0e4:	e7fc      	b.n	2c0e0 <bt_le_conn_params_valid+0x3c>

0002c0e6 <le_conn_param_neg_reply>:
{
   2c0e6:	b570      	push	{r4, r5, r6, lr}
   2c0e8:	4606      	mov	r6, r0
   2c0ea:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2c0ec:	f242 0021 	movw	r0, #8225	; 0x2021
   2c0f0:	2103      	movs	r1, #3
   2c0f2:	f7e6 fb4d 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   2c0f6:	4604      	mov	r4, r0
   2c0f8:	b918      	cbnz	r0, 2c102 <le_conn_param_neg_reply+0x1c>
}
   2c0fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c0fe:	f7e5 bf59 	b.w	11fb4 <le_conn_param_neg_reply.part.0>
   2c102:	2103      	movs	r1, #3
   2c104:	300c      	adds	r0, #12
   2c106:	f7ef fb4d 	bl	1b7a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2c10a:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2c10c:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c10e:	4621      	mov	r1, r4
}
   2c110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c114:	f242 0021 	movw	r0, #8225	; 0x2021
   2c118:	f7e6 bebe 	b.w	12e98 <bt_hci_cmd_send>

0002c11c <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2c11c:	f240 3041 	movw	r0, #833	; 0x341
   2c120:	4770      	bx	lr

0002c122 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2c122:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2c124:	f7ee fa1a 	bl	1a55c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2c128:	b118      	cbz	r0, 2c132 <bt_addr_le_is_bonded+0x10>
   2c12a:	89c0      	ldrh	r0, [r0, #14]
   2c12c:	3800      	subs	r0, #0
   2c12e:	bf18      	it	ne
   2c130:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2c132:	bd08      	pop	{r3, pc}

0002c134 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2c134:	2207      	movs	r2, #7
{
   2c136:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2c138:	f004 f9f5 	bl	30526 <memcmp>
}
   2c13c:	fab0 f080 	clz	r0, r0
   2c140:	0940      	lsrs	r0, r0, #5
   2c142:	bd08      	pop	{r3, pc}

0002c144 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c144:	e8d0 0faf 	lda	r0, [r0]
}
   2c148:	4770      	bx	lr

0002c14a <bt_addr_copy>:
   2c14a:	680b      	ldr	r3, [r1, #0]
   2c14c:	6003      	str	r3, [r0, #0]
   2c14e:	888b      	ldrh	r3, [r1, #4]
   2c150:	8083      	strh	r3, [r0, #4]
}
   2c152:	4770      	bx	lr

0002c154 <bt_addr_le_copy>:
   2c154:	680b      	ldr	r3, [r1, #0]
   2c156:	6003      	str	r3, [r0, #0]
   2c158:	888b      	ldrh	r3, [r1, #4]
   2c15a:	8083      	strh	r3, [r0, #4]
   2c15c:	798b      	ldrb	r3, [r1, #6]
   2c15e:	7183      	strb	r3, [r0, #6]
}
   2c160:	4770      	bx	lr

0002c162 <hci_id_add>:
{
   2c162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c164:	460f      	mov	r7, r1
   2c166:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2c168:	bb30      	cbnz	r0, 2c1b8 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2c16a:	2127      	movs	r1, #39	; 0x27
   2c16c:	f242 0027 	movw	r0, #8231	; 0x2027
   2c170:	f7e6 fb0e 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   2c174:	4605      	mov	r5, r0
   2c176:	b310      	cbz	r0, 2c1be <hci_id_add+0x5c>
   2c178:	2127      	movs	r1, #39	; 0x27
   2c17a:	300c      	adds	r0, #12
   2c17c:	f7ef fb12 	bl	1b7a4 <net_buf_simple_add>
   2c180:	4622      	mov	r2, r4
   2c182:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2c184:	4639      	mov	r1, r7
   2c186:	f7ff ffe5 	bl	2c154 <bt_addr_le_copy>
   2c18a:	1dc3      	adds	r3, r0, #7
   2c18c:	f104 0110 	add.w	r1, r4, #16
   2c190:	f852 0b04 	ldr.w	r0, [r2], #4
   2c194:	428a      	cmp	r2, r1
   2c196:	f843 0b04 	str.w	r0, [r3], #4
   2c19a:	d1f9      	bne.n	2c190 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2c19c:	2210      	movs	r2, #16
   2c19e:	2100      	movs	r1, #0
   2c1a0:	f106 0017 	add.w	r0, r6, #23
   2c1a4:	f004 fa09 	bl	305ba <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c1a8:	4629      	mov	r1, r5
}
   2c1aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c1ae:	2200      	movs	r2, #0
   2c1b0:	f242 0027 	movw	r0, #8231	; 0x2027
   2c1b4:	f7e6 bb3a 	b.w	1282c <bt_hci_cmd_send_sync>
		return -EINVAL;
   2c1b8:	f06f 0015 	mvn.w	r0, #21
}
   2c1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2c1be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c1c2:	e7fb      	b.n	2c1bc <hci_id_add+0x5a>

0002c1c4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c1c4:	7a03      	ldrb	r3, [r0, #8]
{
   2c1c6:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c1c8:	075b      	lsls	r3, r3, #29
   2c1ca:	d505      	bpl.n	2c1d8 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2c1cc:	4601      	mov	r1, r0
   2c1ce:	322a      	adds	r2, #42	; 0x2a
   2c1d0:	f811 0b01 	ldrb.w	r0, [r1], #1
   2c1d4:	f7ff bfc5 	b.w	2c162 <hci_id_add>
}
   2c1d8:	4770      	bx	lr

0002c1da <z_log_msg_static_create.constprop.0>:
   2c1da:	2300      	movs	r3, #0
   2c1dc:	f7e2 bb44 	b.w	e868 <z_impl_z_log_msg_static_create>

0002c1e0 <addr_res_enable>:
{
   2c1e0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c1e2:	2101      	movs	r1, #1
{
   2c1e4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c1e6:	f242 002d 	movw	r0, #8237	; 0x202d
   2c1ea:	f7e6 fad1 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   2c1ee:	4604      	mov	r4, r0
   2c1f0:	b158      	cbz	r0, 2c20a <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2c1f2:	4629      	mov	r1, r5
   2c1f4:	300c      	adds	r0, #12
   2c1f6:	f001 ff06 	bl	2e006 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c1fa:	4621      	mov	r1, r4
}
   2c1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c200:	2200      	movs	r2, #0
   2c202:	f242 002d 	movw	r0, #8237	; 0x202d
   2c206:	f7e6 bb11 	b.w	1282c <bt_hci_cmd_send_sync>
}
   2c20a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c20e:	bd38      	pop	{r3, r4, r5, pc}

0002c210 <adv_unpause_enabled>:
{
   2c210:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c212:	f100 0310 	add.w	r3, r0, #16
   2c216:	e8d3 2fef 	ldaex	r2, [r3]
   2c21a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2c21e:	e8c3 1fe4 	stlex	r4, r1, [r3]
   2c222:	2c00      	cmp	r4, #0
   2c224:	d1f7      	bne.n	2c216 <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2c226:	0413      	lsls	r3, r2, #16
   2c228:	d503      	bpl.n	2c232 <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   2c22a:	2101      	movs	r1, #1
}
   2c22c:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2c22e:	f000 b939 	b.w	2c4a4 <bt_le_adv_set_enable>
}
   2c232:	bc10      	pop	{r4}
   2c234:	4770      	bx	lr

0002c236 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c236:	f100 0210 	add.w	r2, r0, #16
{
   2c23a:	b508      	push	{r3, lr}
   2c23c:	4603      	mov	r3, r0
   2c23e:	4610      	mov	r0, r2
   2c240:	f7ff ff80 	bl	2c144 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c244:	0601      	lsls	r1, r0, #24
   2c246:	d50d      	bpl.n	2c264 <adv_pause_enabled+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c248:	e8d2 0fef 	ldaex	r0, [r2]
   2c24c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   2c250:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2c254:	2900      	cmp	r1, #0
   2c256:	d1f7      	bne.n	2c248 <adv_pause_enabled+0x12>
		bt_le_adv_set_enable(adv, false);
   2c258:	4618      	mov	r0, r3
}
   2c25a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   2c25e:	2100      	movs	r1, #0
   2c260:	f000 b920 	b.w	2c4a4 <bt_le_adv_set_enable>
}
   2c264:	bd08      	pop	{r3, pc}

0002c266 <bt_lookup_id_addr>:
{
   2c266:	b510      	push	{r4, lr}
   2c268:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2c26a:	b930      	cbnz	r0, 2c27a <bt_lookup_id_addr+0x14>
   2c26c:	b119      	cbz	r1, 2c276 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2c26e:	f7ee f91d 	bl	1a4ac <bt_keys_find_irk>
		if (keys) {
   2c272:	b100      	cbz	r0, 2c276 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2c274:	1c44      	adds	r4, r0, #1
}
   2c276:	4620      	mov	r0, r4
   2c278:	bd10      	pop	{r4, pc}
		return NULL;
   2c27a:	2400      	movs	r4, #0
   2c27c:	e7fb      	b.n	2c276 <bt_lookup_id_addr+0x10>

0002c27e <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2c27e:	b118      	cbz	r0, 2c288 <bt_id_set_adv_random_addr+0xa>
   2c280:	b111      	cbz	r1, 2c288 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2c282:	4608      	mov	r0, r1
   2c284:	f7e7 ba0a 	b.w	1369c <set_random_address>
}
   2c288:	f06f 0015 	mvn.w	r0, #21
   2c28c:	4770      	bx	lr

0002c28e <bt_id_set_adv_private_addr>:
{
   2c28e:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2c290:	4604      	mov	r4, r0
   2c292:	b180      	cbz	r0, 2c2b6 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2c294:	2106      	movs	r1, #6
   2c296:	4668      	mov	r0, sp
   2c298:	f7e8 f940 	bl	1451c <bt_rand>
	if (err) {
   2c29c:	b948      	cbnz	r0, 2c2b2 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2c29e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2a2:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2c2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2a8:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   2c2aa:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2ae:	f7ff ffe6 	bl	2c27e <bt_id_set_adv_random_addr>
}
   2c2b2:	b002      	add	sp, #8
   2c2b4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2c2b6:	f06f 0015 	mvn.w	r0, #21
   2c2ba:	e7fa      	b.n	2c2b2 <bt_id_set_adv_private_addr+0x24>

0002c2bc <bt_id_adv_random_addr_check>:
}
   2c2bc:	3800      	subs	r0, #0
   2c2be:	bf18      	it	ne
   2c2c0:	2001      	movne	r0, #1
   2c2c2:	4770      	bx	lr

0002c2c4 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2c2c4:	7a03      	ldrb	r3, [r0, #8]
   2c2c6:	07d9      	lsls	r1, r3, #31
   2c2c8:	d504      	bpl.n	2c2d4 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2c2ca:	f023 0301 	bic.w	r3, r3, #1
   2c2ce:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2c2d0:	f7e7 bb50 	b.w	13974 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2c2d4:	0799      	lsls	r1, r3, #30
   2c2d6:	d504      	bpl.n	2c2e2 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2c2d8:	f023 0302 	bic.w	r3, r3, #2
   2c2dc:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2c2de:	f7e7 bb63 	b.w	139a8 <bt_id_del>
}
   2c2e2:	4770      	bx	lr

0002c2e4 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2c2e4:	2000      	movs	r0, #0
   2c2e6:	4770      	bx	lr

0002c2e8 <get_adv_channel_map>:
{
   2c2e8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2c2ea:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2c2ee:	bf0c      	ite	eq
   2c2f0:	2007      	moveq	r0, #7
   2c2f2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2c2f4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2c2f6:	bf48      	it	mi
   2c2f8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2c2fc:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2c2fe:	bf48      	it	mi
   2c300:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2c304:	4770      	bx	lr

0002c306 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c306:	e8d0 0faf 	lda	r0, [r0]
}
   2c30a:	4770      	bx	lr

0002c30c <atomic_and>:
{
   2c30c:	4603      	mov	r3, r0
   2c30e:	b510      	push	{r4, lr}
}
   2c310:	e8d3 0fef 	ldaex	r0, [r3]
   2c314:	ea00 0201 	and.w	r2, r0, r1
   2c318:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2c31c:	2c00      	cmp	r4, #0
   2c31e:	d1f7      	bne.n	2c310 <atomic_and+0x4>
   2c320:	bd10      	pop	{r4, pc}

0002c322 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c322:	680b      	ldr	r3, [r1, #0]
   2c324:	6003      	str	r3, [r0, #0]
   2c326:	888b      	ldrh	r3, [r1, #4]
   2c328:	8083      	strh	r3, [r0, #4]
   2c32a:	798b      	ldrb	r3, [r1, #6]
   2c32c:	7183      	strb	r3, [r0, #6]
   2c32e:	4770      	bx	lr

0002c330 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c330:	2301      	movs	r3, #1
{
   2c332:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c334:	fa03 f101 	lsl.w	r1, r3, r1
{
   2c338:	4604      	mov	r4, r0
	if (val) {
   2c33a:	b142      	cbz	r2, 2c34e <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c33c:	e8d4 3fef 	ldaex	r3, [r4]
   2c340:	430b      	orrs	r3, r1
   2c342:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2c346:	2a00      	cmp	r2, #0
   2c348:	d1f8      	bne.n	2c33c <atomic_set_bit_to+0xc>
	}
}
   2c34a:	bc10      	pop	{r4}
   2c34c:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c34e:	43c9      	mvns	r1, r1
}
   2c350:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c352:	f7ff bfdb 	b.w	2c30c <atomic_and>

0002c356 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2c356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c35a:	b087      	sub	sp, #28
   2c35c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2c360:	4605      	mov	r5, r0
   2c362:	460c      	mov	r4, r1
   2c364:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2c366:	2100      	movs	r1, #0
   2c368:	2210      	movs	r2, #16
   2c36a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2c36c:	461f      	mov	r7, r3
   2c36e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2c372:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   2c376:	f004 f920 	bl	305ba <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2c37a:	b9ce      	cbnz	r6, 2c3b0 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   2c37c:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2c380:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2c382:	f242 0008 	movw	r0, #8200	; 0x2008
   2c386:	a902      	add	r1, sp, #8
   2c388:	f7e7 fd4a 	bl	13e20 <hci_set_ad>
		if (err) {
   2c38c:	4604      	mov	r4, r0
   2c38e:	b958      	cbnz	r0, 2c3a8 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   2c390:	f1ba 0f00 	cmp.w	sl, #0
   2c394:	d13a      	bne.n	2c40c <le_adv_update.constprop.0+0xb6>
   2c396:	3510      	adds	r5, #16
   2c398:	e8d5 3fef 	ldaex	r3, [r5]
   2c39c:	f043 0304 	orr.w	r3, r3, #4
   2c3a0:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2c3a4:	2a00      	cmp	r2, #0
   2c3a6:	d1f7      	bne.n	2c398 <le_adv_update.constprop.0+0x42>
}
   2c3a8:	4620      	mov	r0, r4
   2c3aa:	b007      	add	sp, #28
   2c3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2c3b0:	f7e7 f922 	bl	135f8 <bt_get_name>
   2c3b4:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2c3b6:	b9e4      	cbnz	r4, 2c3f2 <le_adv_update.constprop.0+0x9c>
   2c3b8:	bb37      	cbnz	r7, 2c408 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   2c3ba:	4658      	mov	r0, fp
   2c3bc:	f7dc ffe3 	bl	9386 <strlen>
   2c3c0:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2c3c2:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2c3c4:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2c3c8:	f88d 3000 	strb.w	r3, [sp]
   2c3cc:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   2c3d0:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2c3d4:	d1d4      	bne.n	2c380 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2c3d6:	2202      	movs	r2, #2
			d[1].data = &data;
   2c3d8:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2c3dc:	9605      	str	r6, [sp, #20]
			d_len = 2;
   2c3de:	e7d0      	b.n	2c382 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c3e0:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2c3e4:	3a08      	subs	r2, #8
   2c3e6:	2a01      	cmp	r2, #1
   2c3e8:	d924      	bls.n	2c434 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2c3ea:	3301      	adds	r3, #1
   2c3ec:	4598      	cmp	r8, r3
   2c3ee:	d1f7      	bne.n	2c3e0 <le_adv_update.constprop.0+0x8a>
   2c3f0:	e7e2      	b.n	2c3b8 <le_adv_update.constprop.0+0x62>
   2c3f2:	2300      	movs	r3, #0
   2c3f4:	e7fa      	b.n	2c3ec <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c3f6:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2c3fa:	3a08      	subs	r2, #8
   2c3fc:	2a01      	cmp	r2, #1
   2c3fe:	d919      	bls.n	2c434 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2c400:	3301      	adds	r3, #1
   2c402:	4599      	cmp	r9, r3
   2c404:	d1f7      	bne.n	2c3f6 <le_adv_update.constprop.0+0xa0>
   2c406:	e7d8      	b.n	2c3ba <le_adv_update.constprop.0+0x64>
   2c408:	2300      	movs	r3, #0
   2c40a:	e7fa      	b.n	2c402 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   2c40c:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   2c40e:	2e02      	cmp	r6, #2
			d[1].len = 1;
   2c410:	bf08      	it	eq
   2c412:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c414:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   2c418:	bf08      	it	eq
   2c41a:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c41c:	a902      	add	r1, sp, #8
			d[1].data = &data;
   2c41e:	bf08      	it	eq
   2c420:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2c424:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c428:	f7e7 fcfa 	bl	13e20 <hci_set_ad>
		if (err) {
   2c42c:	2800      	cmp	r0, #0
   2c42e:	d0b2      	beq.n	2c396 <le_adv_update.constprop.0+0x40>
   2c430:	4604      	mov	r4, r0
   2c432:	e7b9      	b.n	2c3a8 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   2c434:	f06f 0415 	mvn.w	r4, #21
   2c438:	e7b6      	b.n	2c3a8 <le_adv_update.constprop.0+0x52>

0002c43a <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2c43a:	6843      	ldr	r3, [r0, #4]
   2c43c:	f013 0008 	ands.w	r0, r3, #8
   2c440:	d00a      	beq.n	2c458 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2c442:	035a      	lsls	r2, r3, #13
   2c444:	d407      	bmi.n	2c456 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2c446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2c44a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2c44e:	bf14      	ite	ne
   2c450:	2002      	movne	r0, #2
   2c452:	2001      	moveq	r0, #1
   2c454:	4770      	bx	lr
   2c456:	2001      	movs	r0, #1
}
   2c458:	4770      	bx	lr

0002c45a <bt_le_adv_set_enable_legacy>:
{
   2c45a:	b570      	push	{r4, r5, r6, lr}
   2c45c:	4606      	mov	r6, r0
   2c45e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2c460:	f242 000a 	movw	r0, #8202	; 0x200a
   2c464:	2101      	movs	r1, #1
{
   2c466:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2c468:	f7e6 f992 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   2c46c:	4604      	mov	r4, r0
   2c46e:	b1b0      	cbz	r0, 2c49e <bt_le_adv_set_enable_legacy+0x44>
   2c470:	300c      	adds	r0, #12
	if (enable) {
   2c472:	b195      	cbz	r5, 2c49a <bt_le_adv_set_enable_legacy+0x40>
   2c474:	2101      	movs	r1, #1
   2c476:	f001 fdc6 	bl	2e006 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2c47a:	4620      	mov	r0, r4
   2c47c:	f106 0210 	add.w	r2, r6, #16
   2c480:	a903      	add	r1, sp, #12
   2c482:	2307      	movs	r3, #7
   2c484:	9500      	str	r5, [sp, #0]
   2c486:	f7e6 f971 	bl	1276c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2c48a:	2200      	movs	r2, #0
   2c48c:	4621      	mov	r1, r4
   2c48e:	f242 000a 	movw	r0, #8202	; 0x200a
   2c492:	f7e6 f9cb 	bl	1282c <bt_hci_cmd_send_sync>
}
   2c496:	b006      	add	sp, #24
   2c498:	bd70      	pop	{r4, r5, r6, pc}
   2c49a:	4629      	mov	r1, r5
   2c49c:	e7eb      	b.n	2c476 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2c49e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c4a2:	e7f8      	b.n	2c496 <bt_le_adv_set_enable_legacy+0x3c>

0002c4a4 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c4a4:	f7ff bfd9 	b.w	2c45a <bt_le_adv_set_enable_legacy>

0002c4a8 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2c4a8:	3018      	adds	r0, #24
   2c4aa:	f7f9 be1f 	b.w	260ec <k_work_cancel_delayable>

0002c4ae <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2c4ae:	b530      	push	{r4, r5, lr}
   2c4b0:	460d      	mov	r5, r1
   2c4b2:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2c4b4:	4601      	mov	r1, r0
{
   2c4b6:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2c4b8:	b310      	cbz	r0, 2c500 <bt_encrypt_le+0x52>
   2c4ba:	b30d      	cbz	r5, 2c500 <bt_encrypt_le+0x52>
   2c4bc:	b302      	cbz	r2, 2c500 <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   2c4be:	4668      	mov	r0, sp
   2c4c0:	f7e7 ffa2 	bl	14408 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2c4c4:	4669      	mov	r1, sp
   2c4c6:	a804      	add	r0, sp, #16
   2c4c8:	f7e4 f8a6 	bl	10618 <tc_aes128_set_encrypt_key>
   2c4cc:	b1c0      	cbz	r0, 2c500 <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   2c4ce:	4629      	mov	r1, r5
   2c4d0:	4668      	mov	r0, sp
   2c4d2:	f7e7 ff99 	bl	14408 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2c4d6:	4669      	mov	r1, sp
   2c4d8:	4620      	mov	r0, r4
   2c4da:	aa04      	add	r2, sp, #16
   2c4dc:	f7ff f8a1 	bl	2b622 <tc_aes_encrypt>
   2c4e0:	b170      	cbz	r0, 2c500 <bt_encrypt_le+0x52>
   2c4e2:	1e63      	subs	r3, r4, #1
   2c4e4:	f104 0210 	add.w	r2, r4, #16
   2c4e8:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2c4ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c4ee:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2c4f2:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c4f4:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2c4f6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2c4f8:	d1f7      	bne.n	2c4ea <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   2c4fa:	2000      	movs	r0, #0
}
   2c4fc:	b031      	add	sp, #196	; 0xc4
   2c4fe:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c500:	f06f 0015 	mvn.w	r0, #21
   2c504:	e7fa      	b.n	2c4fc <bt_encrypt_le+0x4e>

0002c506 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c506:	2200      	movs	r2, #0
	return list->head;
   2c508:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c50a:	b90b      	cbnz	r3, 2c510 <sys_slist_find_and_remove+0xa>
   2c50c:	4618      	mov	r0, r3
   2c50e:	4770      	bx	lr
   2c510:	428b      	cmp	r3, r1
   2c512:	d110      	bne.n	2c536 <sys_slist_find_and_remove+0x30>
	return node->next;
   2c514:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c516:	b942      	cbnz	r2, 2c52a <sys_slist_find_and_remove+0x24>
   2c518:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2c51a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c51c:	4291      	cmp	r1, r2
   2c51e:	d100      	bne.n	2c522 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2c520:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2c522:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c524:	2001      	movs	r0, #1
	parent->next = child;
   2c526:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c528:	4770      	bx	lr
	parent->next = child;
   2c52a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c52c:	6843      	ldr	r3, [r0, #4]
   2c52e:	4299      	cmp	r1, r3
	list->tail = node;
   2c530:	bf08      	it	eq
   2c532:	6042      	streq	r2, [r0, #4]
}
   2c534:	e7f5      	b.n	2c522 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2c536:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c538:	681b      	ldr	r3, [r3, #0]
   2c53a:	e7e6      	b.n	2c50a <sys_slist_find_and_remove+0x4>

0002c53c <atomic_and>:
{
   2c53c:	4603      	mov	r3, r0
   2c53e:	b510      	push	{r4, lr}
}
   2c540:	e8d3 0fef 	ldaex	r0, [r3]
   2c544:	ea00 0201 	and.w	r2, r0, r1
   2c548:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2c54c:	2c00      	cmp	r4, #0
   2c54e:	d1f7      	bne.n	2c540 <atomic_and+0x4>
   2c550:	bd10      	pop	{r4, pc}

0002c552 <z_log_msg_static_create.constprop.0>:
   2c552:	2300      	movs	r3, #0
   2c554:	f7e2 b988 	b.w	e868 <z_impl_z_log_msg_static_create>

0002c558 <tx_complete_work>:
	tx_notify(conn);
   2c558:	3828      	subs	r0, #40	; 0x28
   2c55a:	f7e8 b977 	b.w	1484c <tx_notify>

0002c55e <bt_conn_reset_rx_state>:
{
   2c55e:	b510      	push	{r4, lr}
   2c560:	4604      	mov	r4, r0
	if (!conn->rx) {
   2c562:	6900      	ldr	r0, [r0, #16]
   2c564:	b118      	cbz	r0, 2c56e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2c566:	f7ee fffb 	bl	1b560 <net_buf_unref>
	conn->rx = NULL;
   2c56a:	2300      	movs	r3, #0
   2c56c:	6123      	str	r3, [r4, #16]
}
   2c56e:	bd10      	pop	{r4, pc}

0002c570 <conn_lookup_handle>:
{
   2c570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c574:	4607      	mov	r7, r0
   2c576:	460e      	mov	r6, r1
   2c578:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2c57a:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c57c:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2c580:	42b4      	cmp	r4, r6
   2c582:	d103      	bne.n	2c58c <conn_lookup_handle+0x1c>
	return NULL;
   2c584:	2300      	movs	r3, #0
}
   2c586:	4618      	mov	r0, r3
   2c588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c58c:	fb09 7004 	mla	r0, r9, r4, r7
   2c590:	f7e8 fc1c 	bl	14dcc <bt_conn_ref>
   2c594:	4603      	mov	r3, r0
		if (!conn) {
   2c596:	b158      	cbz	r0, 2c5b0 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2c598:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2c59a:	2d01      	cmp	r5, #1
   2c59c:	d002      	beq.n	2c5a4 <conn_lookup_handle+0x34>
   2c59e:	3d07      	subs	r5, #7
   2c5a0:	2d01      	cmp	r5, #1
   2c5a2:	d803      	bhi.n	2c5ac <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2c5a4:	881a      	ldrh	r2, [r3, #0]
   2c5a6:	4542      	cmp	r2, r8
   2c5a8:	d0ed      	beq.n	2c586 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2c5aa:	4618      	mov	r0, r3
   2c5ac:	f7e8 fc36 	bl	14e1c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2c5b0:	3401      	adds	r4, #1
   2c5b2:	e7e5      	b.n	2c580 <conn_lookup_handle+0x10>

0002c5b4 <bt_conn_connected>:
{
   2c5b4:	b510      	push	{r4, lr}
   2c5b6:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2c5b8:	f7e9 f97c 	bl	158b4 <bt_l2cap_connected>
	notify_connected(conn);
   2c5bc:	4620      	mov	r0, r4
}
   2c5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2c5c2:	f7e8 b90d 	b.w	147e0 <notify_connected>

0002c5c6 <bt_conn_disconnect>:
{
   2c5c6:	b510      	push	{r4, lr}
	switch (conn->state) {
   2c5c8:	7b43      	ldrb	r3, [r0, #13]
{
   2c5ca:	4604      	mov	r4, r0
	switch (conn->state) {
   2c5cc:	3b02      	subs	r3, #2
   2c5ce:	2b06      	cmp	r3, #6
   2c5d0:	d816      	bhi.n	2c600 <bt_conn_disconnect+0x3a>
   2c5d2:	e8df f003 	tbb	[pc, r3]
   2c5d6:	1504      	.short	0x1504
   2c5d8:	0b091515 	.word	0x0b091515
   2c5dc:	09          	.byte	0x09
   2c5dd:	00          	.byte	0x00
		conn->err = reason;
   2c5de:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c5e0:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2c5e2:	4620      	mov	r0, r4
   2c5e4:	f7e8 fc52 	bl	14e8c <bt_conn_set_state>
{
   2c5e8:	2000      	movs	r0, #0
}
   2c5ea:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   2c5ec:	8800      	ldrh	r0, [r0, #0]
   2c5ee:	f7ff fcf5 	bl	2bfdc <bt_hci_disconnect>
	if (err) {
   2c5f2:	2800      	cmp	r0, #0
   2c5f4:	d1f9      	bne.n	2c5ea <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2c5f6:	7b63      	ldrb	r3, [r4, #13]
   2c5f8:	2b07      	cmp	r3, #7
   2c5fa:	d1f5      	bne.n	2c5e8 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2c5fc:	2108      	movs	r1, #8
   2c5fe:	e7f0      	b.n	2c5e2 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2c600:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c604:	e7f1      	b.n	2c5ea <bt_conn_disconnect+0x24>

0002c606 <bt_conn_set_security>:
{
   2c606:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2c608:	7b43      	ldrb	r3, [r0, #13]
{
   2c60a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2c60c:	2b07      	cmp	r3, #7
{
   2c60e:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2c610:	d122      	bne.n	2c658 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2c612:	7a43      	ldrb	r3, [r0, #9]
   2c614:	428b      	cmp	r3, r1
   2c616:	d215      	bcs.n	2c644 <bt_conn_set_security+0x3e>
   2c618:	7a83      	ldrb	r3, [r0, #10]
   2c61a:	428b      	cmp	r3, r1
   2c61c:	d212      	bcs.n	2c644 <bt_conn_set_security+0x3e>
	if (val) {
   2c61e:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2c620:	f100 0004 	add.w	r0, r0, #4
   2c624:	d510      	bpl.n	2c648 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c626:	e8d0 3fef 	ldaex	r3, [r0]
   2c62a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2c62e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2c632:	2a00      	cmp	r2, #0
   2c634:	d1f7      	bne.n	2c626 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2c636:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   2c63a:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2c63c:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2c63e:	f7ed f86d 	bl	1971c <bt_smp_start_security>
	if (err) {
   2c642:	b930      	cbnz	r0, 2c652 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   2c644:	2000      	movs	r0, #0
}
   2c646:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c648:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2c64c:	f7ff ff76 	bl	2c53c <atomic_and>
   2c650:	e7f1      	b.n	2c636 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   2c652:	7a63      	ldrb	r3, [r4, #9]
   2c654:	72a3      	strb	r3, [r4, #10]
   2c656:	e7f6      	b.n	2c646 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   2c658:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c65c:	e7f3      	b.n	2c646 <bt_conn_set_security+0x40>

0002c65e <bt_conn_get_security>:
}
   2c65e:	7a40      	ldrb	r0, [r0, #9]
   2c660:	4770      	bx	lr

0002c662 <bt_conn_is_peer_addr_le>:
{
   2c662:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2c664:	7a03      	ldrb	r3, [r0, #8]
{
   2c666:	4604      	mov	r4, r0
	if (id != conn->id) {
   2c668:	428b      	cmp	r3, r1
{
   2c66a:	4615      	mov	r5, r2
	if (id != conn->id) {
   2c66c:	d115      	bne.n	2c69a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2c66e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2c672:	2207      	movs	r2, #7
   2c674:	4628      	mov	r0, r5
   2c676:	f003 ff56 	bl	30526 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2c67a:	b180      	cbz	r0, 2c69e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c67c:	78e3      	ldrb	r3, [r4, #3]
   2c67e:	2207      	movs	r2, #7
   2c680:	b943      	cbnz	r3, 2c694 <bt_conn_is_peer_addr_le+0x32>
   2c682:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2c686:	4628      	mov	r0, r5
   2c688:	f003 ff4d 	bl	30526 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2c68c:	fab0 f080 	clz	r0, r0
   2c690:	0940      	lsrs	r0, r0, #5
}
   2c692:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2c694:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2c698:	e7f5      	b.n	2c686 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2c69a:	2000      	movs	r0, #0
   2c69c:	e7f9      	b.n	2c692 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2c69e:	2001      	movs	r0, #1
   2c6a0:	e7f7      	b.n	2c692 <bt_conn_is_peer_addr_le+0x30>

0002c6a2 <bt_conn_get_dst>:
}
   2c6a2:	3090      	adds	r0, #144	; 0x90
   2c6a4:	4770      	bx	lr

0002c6a6 <bt_conn_le_conn_update>:
{
   2c6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c6a8:	4607      	mov	r7, r0
   2c6aa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2c6ac:	f242 0013 	movw	r0, #8211	; 0x2013
   2c6b0:	210e      	movs	r1, #14
   2c6b2:	f7e6 f86d 	bl	12790 <bt_hci_cmd_create>
	if (!buf) {
   2c6b6:	4606      	mov	r6, r0
   2c6b8:	b1d0      	cbz	r0, 2c6f0 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2c6ba:	210e      	movs	r1, #14
   2c6bc:	300c      	adds	r0, #12
   2c6be:	f7ef f871 	bl	1b7a4 <net_buf_simple_add>
   2c6c2:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2c6c4:	220e      	movs	r2, #14
   2c6c6:	2100      	movs	r1, #0
   2c6c8:	f003 ff77 	bl	305ba <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c6cc:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c6ce:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c6d0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c6d2:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c6d4:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c6d6:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c6d8:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c6da:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c6de:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2c6e0:	88ab      	ldrh	r3, [r5, #4]
   2c6e2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2c6e4:	88eb      	ldrh	r3, [r5, #6]
   2c6e6:	8123      	strh	r3, [r4, #8]
}
   2c6e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c6ec:	f7e6 b89e 	b.w	1282c <bt_hci_cmd_send_sync>
}
   2c6f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c6f6 <l2cap_connected>:
}
   2c6f6:	4770      	bx	lr

0002c6f8 <z_log_msg_static_create.constprop.0>:
   2c6f8:	2300      	movs	r3, #0
   2c6fa:	f7e2 b8b5 	b.w	e868 <z_impl_z_log_msg_static_create>

0002c6fe <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2c6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c700:	4605      	mov	r5, r0
   2c702:	460f      	mov	r7, r1
   2c704:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2c706:	2300      	movs	r3, #0
   2c708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2c70c:	2104      	movs	r1, #4
   2c70e:	2000      	movs	r0, #0
   2c710:	f7e8 fcd6 	bl	150c0 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2c714:	4604      	mov	r4, r0
   2c716:	b920      	cbnz	r0, 2c722 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2c718:	4628      	mov	r0, r5
}
   2c71a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c71e:	f7e9 b88d 	b.w	1583c <l2cap_create_le_sig_pdu.part.0>
   2c722:	2104      	movs	r1, #4
   2c724:	300c      	adds	r0, #12
   2c726:	f7ef f83d 	bl	1b7a4 <net_buf_simple_add>
	hdr->code = code;
   2c72a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2c72c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2c72e:	8046      	strh	r6, [r0, #2]
}
   2c730:	4620      	mov	r0, r4
   2c732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c734 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2c734:	4770      	bx	lr

0002c736 <bt_l2cap_chan_del>:
{
   2c736:	b570      	push	{r4, r5, r6, lr}
   2c738:	4604      	mov	r4, r0
	if (!chan->conn) {
   2c73a:	e9d0 3500 	ldrd	r3, r5, [r0]
   2c73e:	b123      	cbz	r3, 2c74a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2c740:	686b      	ldr	r3, [r5, #4]
   2c742:	b103      	cbz	r3, 2c746 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2c744:	4798      	blx	r3
	chan->conn = NULL;
   2c746:	2300      	movs	r3, #0
   2c748:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2c74a:	68e3      	ldr	r3, [r4, #12]
   2c74c:	b10b      	cbz	r3, 2c752 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2c74e:	4620      	mov	r0, r4
   2c750:	4798      	blx	r3
	if (ops->released) {
   2c752:	6a2b      	ldr	r3, [r5, #32]
   2c754:	b11b      	cbz	r3, 2c75e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2c756:	4620      	mov	r0, r4
}
   2c758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2c75c:	4718      	bx	r3
}
   2c75e:	bd70      	pop	{r4, r5, r6, pc}

0002c760 <bt_l2cap_disconnected>:
{
   2c760:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c762:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c764:	b130      	cbz	r0, 2c774 <bt_l2cap_disconnected+0x14>
	return node->next;
   2c766:	f850 4908 	ldr.w	r4, [r0], #-8
   2c76a:	b104      	cbz	r4, 2c76e <bt_l2cap_disconnected+0xe>
   2c76c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2c76e:	f7ff ffe2 	bl	2c736 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c772:	b904      	cbnz	r4, 2c776 <bt_l2cap_disconnected+0x16>
}
   2c774:	bd38      	pop	{r3, r4, r5, pc}
   2c776:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c778:	b12d      	cbz	r5, 2c786 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2c77a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c77c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2c77e:	f7ff ffda 	bl	2c736 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c782:	462c      	mov	r4, r5
   2c784:	e7f7      	b.n	2c776 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2c786:	4620      	mov	r0, r4
}
   2c788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2c78c:	f7ff bfd3 	b.w	2c736 <bt_l2cap_chan_del>

0002c790 <bt_l2cap_security_changed>:
{
   2c790:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c792:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2c794:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c796:	b1bb      	cbz	r3, 2c7c8 <bt_l2cap_security_changed+0x38>
   2c798:	4618      	mov	r0, r3
	return node->next;
   2c79a:	f850 4908 	ldr.w	r4, [r0], #-8
   2c79e:	b104      	cbz	r4, 2c7a2 <bt_l2cap_security_changed+0x12>
   2c7a0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c7a2:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2c7a6:	689b      	ldr	r3, [r3, #8]
   2c7a8:	b10b      	cbz	r3, 2c7ae <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2c7aa:	4629      	mov	r1, r5
   2c7ac:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7ae:	b15c      	cbz	r4, 2c7c8 <bt_l2cap_security_changed+0x38>
   2c7b0:	4620      	mov	r0, r4
   2c7b2:	68a4      	ldr	r4, [r4, #8]
   2c7b4:	6843      	ldr	r3, [r0, #4]
   2c7b6:	b124      	cbz	r4, 2c7c2 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2c7b8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7ba:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c7bc:	2b00      	cmp	r3, #0
   2c7be:	d1f4      	bne.n	2c7aa <bt_l2cap_security_changed+0x1a>
   2c7c0:	e7f6      	b.n	2c7b0 <bt_l2cap_security_changed+0x20>
   2c7c2:	689b      	ldr	r3, [r3, #8]
   2c7c4:	2b00      	cmp	r3, #0
   2c7c6:	d1f0      	bne.n	2c7aa <bt_l2cap_security_changed+0x1a>
}
   2c7c8:	bd38      	pop	{r3, r4, r5, pc}

0002c7ca <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2c7ca:	3104      	adds	r1, #4
   2c7cc:	f7e8 bc78 	b.w	150c0 <bt_conn_create_pdu_timeout>

0002c7d0 <bt_l2cap_send_cb>:
{
   2c7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c7d4:	4614      	mov	r4, r2
   2c7d6:	4605      	mov	r5, r0
   2c7d8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2c7da:	f102 000c 	add.w	r0, r2, #12
   2c7de:	2104      	movs	r1, #4
   2c7e0:	461e      	mov	r6, r3
   2c7e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2c7e6:	f7ee ff81 	bl	1b6ec <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c7ea:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2c7ec:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c7ee:	3a04      	subs	r2, #4
   2c7f0:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c7f2:	4643      	mov	r3, r8
   2c7f4:	4632      	mov	r2, r6
   2c7f6:	4621      	mov	r1, r4
   2c7f8:	4628      	mov	r0, r5
}
   2c7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c7fe:	f7e8 ba45 	b.w	14c8c <bt_conn_send_cb>

0002c802 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2c802:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c804:	b128      	cbz	r0, 2c812 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c806:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c808:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c80a:	428b      	cmp	r3, r1
   2c80c:	d001      	beq.n	2c812 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   2c80e:	6880      	ldr	r0, [r0, #8]
   2c810:	e7f8      	b.n	2c804 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2c812:	4770      	bx	lr

0002c814 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2c814:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c816:	b128      	cbz	r0, 2c824 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c818:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c81a:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c81c:	428b      	cmp	r3, r1
   2c81e:	d001      	beq.n	2c824 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   2c820:	6880      	ldr	r0, [r0, #8]
   2c822:	e7f8      	b.n	2c816 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2c824:	4770      	bx	lr

0002c826 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2c826:	4770      	bx	lr

0002c828 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2c828:	4603      	mov	r3, r0
	return list->head;
   2c82a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2c82c:	b128      	cbz	r0, 2c83a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c82e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2c830:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c832:	4288      	cmp	r0, r1
	list->head = node;
   2c834:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2c836:	bf08      	it	eq
   2c838:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2c83a:	4770      	bx	lr

0002c83c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2c83c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2c83e:	2000      	movs	r0, #0

	while (buf) {
   2c840:	b903      	cbnz	r3, 2c844 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2c842:	4770      	bx	lr
		bytes += buf->len;
   2c844:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2c846:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2c848:	4410      	add	r0, r2
		buf = buf->frags;
   2c84a:	e7f9      	b.n	2c840 <net_buf_frags_len+0x4>

0002c84c <attr_read_type_cb>:
{
   2c84c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2c84e:	68d4      	ldr	r4, [r2, #12]
   2c850:	3102      	adds	r1, #2
   2c852:	7823      	ldrb	r3, [r4, #0]
   2c854:	b913      	cbnz	r3, 2c85c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2c856:	7021      	strb	r1, [r4, #0]
	return true;
   2c858:	2001      	movs	r0, #1
}
   2c85a:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2c85c:	428b      	cmp	r3, r1
   2c85e:	d0fb      	beq.n	2c858 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2c860:	8a03      	ldrh	r3, [r0, #16]
   2c862:	3b02      	subs	r3, #2
   2c864:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2c866:	2000      	movs	r0, #0
   2c868:	6110      	str	r0, [r2, #16]
		return false;
   2c86a:	e7f6      	b.n	2c85a <attr_read_type_cb+0xe>

0002c86c <att_prepare_write_req>:
}
   2c86c:	2006      	movs	r0, #6
   2c86e:	4770      	bx	lr

0002c870 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c870:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c874:	4108      	asrs	r0, r1
}
   2c876:	f000 0001 	and.w	r0, r0, #1
   2c87a:	4770      	bx	lr

0002c87c <write_cb>:
{
   2c87c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c87e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c880:	4601      	mov	r1, r0
{
   2c882:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c884:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2c888:	6820      	ldr	r0, [r4, #0]
   2c88a:	f000 fdce 	bl	2d42a <bt_gatt_check_perm>
   2c88e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2c890:	bb00      	cbnz	r0, 2c8d4 <write_cb+0x58>
	if (!data->req) {
   2c892:	7a23      	ldrb	r3, [r4, #8]
   2c894:	b1b3      	cbz	r3, 2c8c4 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2c896:	f1a3 0218 	sub.w	r2, r3, #24
   2c89a:	4253      	negs	r3, r2
   2c89c:	4153      	adcs	r3, r2
   2c89e:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2c8a0:	9301      	str	r3, [sp, #4]
   2c8a2:	8a63      	ldrh	r3, [r4, #18]
   2c8a4:	4629      	mov	r1, r5
   2c8a6:	9300      	str	r3, [sp, #0]
   2c8a8:	68ae      	ldr	r6, [r5, #8]
   2c8aa:	8a23      	ldrh	r3, [r4, #16]
   2c8ac:	68e2      	ldr	r2, [r4, #12]
   2c8ae:	6820      	ldr	r0, [r4, #0]
   2c8b0:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2c8b2:	2800      	cmp	r0, #0
   2c8b4:	db08      	blt.n	2c8c8 <write_cb+0x4c>
   2c8b6:	8a23      	ldrh	r3, [r4, #16]
   2c8b8:	4298      	cmp	r0, r3
   2c8ba:	d10e      	bne.n	2c8da <write_cb+0x5e>
	data->err = 0U;
   2c8bc:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2c8be:	2001      	movs	r0, #1
	data->err = 0U;
   2c8c0:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2c8c2:	e008      	b.n	2c8d6 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2c8c4:	2302      	movs	r3, #2
   2c8c6:	e7eb      	b.n	2c8a0 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2c8c8:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2c8cc:	d305      	bcc.n	2c8da <write_cb+0x5e>
		return -err;
   2c8ce:	4240      	negs	r0, r0
   2c8d0:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2c8d2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2c8d4:	2000      	movs	r0, #0
}
   2c8d6:	b002      	add	sp, #8
   2c8d8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2c8da:	200e      	movs	r0, #14
   2c8dc:	e7f9      	b.n	2c8d2 <write_cb+0x56>

0002c8de <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2c8de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c8e0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c8e4:	2300      	movs	r3, #0
   2c8e6:	461a      	mov	r2, r3
   2c8e8:	9300      	str	r3, [sp, #0]
   2c8ea:	f7eb f861 	bl	179b0 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2c8ee:	b005      	add	sp, #20
   2c8f0:	f85d fb04 	ldr.w	pc, [sp], #4

0002c8f4 <att_chan_mtu_updated>:
{
   2c8f4:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2c8f6:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2c8f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c8fa:	b352      	cbz	r2, 2c952 <att_chan_mtu_updated+0x5e>
	return node->next;
   2c8fc:	6813      	ldr	r3, [r2, #0]
   2c8fe:	b103      	cbz	r3, 2c902 <att_chan_mtu_updated+0xe>
   2c900:	3bf0      	subs	r3, #240	; 0xf0
   2c902:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   2c906:	2200      	movs	r2, #0
   2c908:	4611      	mov	r1, r2
   2c90a:	e000      	b.n	2c90e <att_chan_mtu_updated+0x1a>
   2c90c:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   2c90e:	4284      	cmp	r4, r0
   2c910:	d007      	beq.n	2c922 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c912:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c914:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c916:	42b1      	cmp	r1, r6
   2c918:	bf38      	it	cc
   2c91a:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c91c:	42a2      	cmp	r2, r4
   2c91e:	bf38      	it	cc
   2c920:	4622      	movcc	r2, r4
   2c922:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c924:	b12b      	cbz	r3, 2c932 <att_chan_mtu_updated+0x3e>
   2c926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2c92a:	2b00      	cmp	r3, #0
   2c92c:	d1ee      	bne.n	2c90c <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2c92e:	4284      	cmp	r4, r0
   2c930:	d1ef      	bne.n	2c912 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c932:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2c934:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c936:	428b      	cmp	r3, r1
   2c938:	d801      	bhi.n	2c93e <att_chan_mtu_updated+0x4a>
   2c93a:	4290      	cmp	r0, r2
   2c93c:	d90b      	bls.n	2c956 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c93e:	4282      	cmp	r2, r0
   2c940:	bf38      	it	cc
   2c942:	4602      	movcc	r2, r0
   2c944:	4299      	cmp	r1, r3
   2c946:	6828      	ldr	r0, [r5, #0]
   2c948:	bf38      	it	cc
   2c94a:	4619      	movcc	r1, r3
}
   2c94c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c94e:	f7eb bed7 	b.w	18700 <bt_gatt_att_max_mtu_changed>
   2c952:	4611      	mov	r1, r2
   2c954:	e7ed      	b.n	2c932 <att_chan_mtu_updated+0x3e>
}
   2c956:	bc70      	pop	{r4, r5, r6}
   2c958:	4770      	bx	lr

0002c95a <attr_read_group_cb>:
	if (!data->rsp->len) {
   2c95a:	68d0      	ldr	r0, [r2, #12]
   2c95c:	3104      	adds	r1, #4
   2c95e:	7803      	ldrb	r3, [r0, #0]
   2c960:	b913      	cbnz	r3, 2c968 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2c962:	7001      	strb	r1, [r0, #0]
	return true;
   2c964:	2001      	movs	r0, #1
   2c966:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2c968:	428b      	cmp	r3, r1
   2c96a:	d0fb      	beq.n	2c964 <attr_read_group_cb+0xa>
		data->group = NULL;
   2c96c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2c96e:	6891      	ldr	r1, [r2, #8]
   2c970:	8a0b      	ldrh	r3, [r1, #16]
   2c972:	3b04      	subs	r3, #4
   2c974:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2c976:	6110      	str	r0, [r2, #16]
}
   2c978:	4770      	bx	lr

0002c97a <find_info_cb>:
{
   2c97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2c97c:	6893      	ldr	r3, [r2, #8]
{
   2c97e:	4605      	mov	r5, r0
   2c980:	460f      	mov	r7, r1
   2c982:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c984:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   2c986:	b963      	cbnz	r3, 2c9a2 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2c988:	6850      	ldr	r0, [r2, #4]
   2c98a:	2101      	movs	r1, #1
   2c98c:	300c      	adds	r0, #12
   2c98e:	f7ee ff09 	bl	1b7a4 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2c992:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2c994:	682b      	ldr	r3, [r5, #0]
   2c996:	781b      	ldrb	r3, [r3, #0]
   2c998:	2b00      	cmp	r3, #0
   2c99a:	bf14      	ite	ne
   2c99c:	2302      	movne	r3, #2
   2c99e:	2301      	moveq	r3, #1
   2c9a0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2c9a2:	68a3      	ldr	r3, [r4, #8]
   2c9a4:	781b      	ldrb	r3, [r3, #0]
   2c9a6:	2b01      	cmp	r3, #1
   2c9a8:	d003      	beq.n	2c9b2 <find_info_cb+0x38>
   2c9aa:	2b02      	cmp	r3, #2
   2c9ac:	d019      	beq.n	2c9e2 <find_info_cb+0x68>
   2c9ae:	2000      	movs	r0, #0
   2c9b0:	e016      	b.n	2c9e0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2c9b2:	682b      	ldr	r3, [r5, #0]
   2c9b4:	781b      	ldrb	r3, [r3, #0]
   2c9b6:	2b00      	cmp	r3, #0
   2c9b8:	d1f9      	bne.n	2c9ae <find_info_cb+0x34>
   2c9ba:	6860      	ldr	r0, [r4, #4]
   2c9bc:	2104      	movs	r1, #4
   2c9be:	300c      	adds	r0, #12
   2c9c0:	f7ee fef0 	bl	1b7a4 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2c9c4:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2c9c6:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2c9c8:	682a      	ldr	r2, [r5, #0]
   2c9ca:	68e3      	ldr	r3, [r4, #12]
   2c9cc:	8852      	ldrh	r2, [r2, #2]
   2c9ce:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2c9d0:	6863      	ldr	r3, [r4, #4]
   2c9d2:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2c9d4:	8a1b      	ldrh	r3, [r3, #16]
   2c9d6:	1ac0      	subs	r0, r0, r3
   2c9d8:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2c9da:	bf94      	ite	ls
   2c9dc:	2000      	movls	r0, #0
   2c9de:	2001      	movhi	r0, #1
}
   2c9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2c9e2:	682b      	ldr	r3, [r5, #0]
   2c9e4:	781b      	ldrb	r3, [r3, #0]
   2c9e6:	2b02      	cmp	r3, #2
   2c9e8:	d1e1      	bne.n	2c9ae <find_info_cb+0x34>
   2c9ea:	6860      	ldr	r0, [r4, #4]
   2c9ec:	2112      	movs	r1, #18
   2c9ee:	300c      	adds	r0, #12
   2c9f0:	f7ee fed8 	bl	1b7a4 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2c9f4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2c9f6:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c9f8:	682b      	ldr	r3, [r5, #0]
   2c9fa:	68e2      	ldr	r2, [r4, #12]
   2c9fc:	1c59      	adds	r1, r3, #1
   2c9fe:	3202      	adds	r2, #2
   2ca00:	3311      	adds	r3, #17
   2ca02:	f851 0b04 	ldr.w	r0, [r1], #4
   2ca06:	4299      	cmp	r1, r3
   2ca08:	f842 0b04 	str.w	r0, [r2], #4
   2ca0c:	d1f9      	bne.n	2ca02 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2ca0e:	6863      	ldr	r3, [r4, #4]
   2ca10:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2ca12:	8a1b      	ldrh	r3, [r3, #16]
   2ca14:	1ac0      	subs	r0, r0, r3
   2ca16:	2812      	cmp	r0, #18
   2ca18:	e7df      	b.n	2c9da <find_info_cb+0x60>

0002ca1a <z_log_msg_static_create.constprop.0>:
   2ca1a:	2300      	movs	r3, #0
   2ca1c:	f7e1 bf24 	b.w	e868 <z_impl_z_log_msg_static_create>

0002ca20 <chan_req_send>:
{
   2ca20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca22:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ca24:	6888      	ldr	r0, [r1, #8]
   2ca26:	f7ff ff09 	bl	2c83c <net_buf_frags_len>
   2ca2a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2ca2c:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ca2e:	4283      	cmp	r3, r0
   2ca30:	d30d      	bcc.n	2ca4e <chan_req_send+0x2e>
	req->buf = NULL;
   2ca32:	2600      	movs	r6, #0
	chan->req = req;
   2ca34:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   2ca38:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   2ca3a:	4628      	mov	r0, r5
	req->buf = NULL;
   2ca3c:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2ca3e:	4639      	mov	r1, r7
   2ca40:	f7e9 f9a2 	bl	15d88 <chan_send>
	if (err) {
   2ca44:	b110      	cbz	r0, 2ca4c <chan_req_send+0x2c>
		req->buf = buf;
   2ca46:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2ca48:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   2ca4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ca4e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ca52:	e7fb      	b.n	2ca4c <chan_req_send+0x2c>

0002ca54 <process_queue>:
{
   2ca54:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2ca56:	2200      	movs	r2, #0
{
   2ca58:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2ca5a:	2300      	movs	r3, #0
   2ca5c:	4608      	mov	r0, r1
{
   2ca5e:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2ca60:	f001 faa8 	bl	2dfb4 <net_buf_get>
	if (buf) {
   2ca64:	4605      	mov	r5, r0
   2ca66:	b158      	cbz	r0, 2ca80 <process_queue+0x2c>
	return chan_send(chan, buf);
   2ca68:	4601      	mov	r1, r0
   2ca6a:	4620      	mov	r0, r4
   2ca6c:	f7e9 f98c 	bl	15d88 <chan_send>
		if (err) {
   2ca70:	4604      	mov	r4, r0
   2ca72:	b118      	cbz	r0, 2ca7c <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2ca74:	4629      	mov	r1, r5
   2ca76:	4630      	mov	r0, r6
   2ca78:	f003 fb99 	bl	301ae <k_queue_prepend>
}
   2ca7c:	4620      	mov	r0, r4
   2ca7e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2ca80:	f06f 0401 	mvn.w	r4, #1
   2ca84:	e7fa      	b.n	2ca7c <process_queue+0x28>

0002ca86 <bt_att_chan_send_rsp>:
{
   2ca86:	b538      	push	{r3, r4, r5, lr}
   2ca88:	4604      	mov	r4, r0
   2ca8a:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2ca8c:	f7e9 f97c 	bl	15d88 <chan_send>
	if (err) {
   2ca90:	b130      	cbz	r0, 2caa0 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2ca92:	4629      	mov	r1, r5
   2ca94:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2ca98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2ca9c:	f7ee bd3a 	b.w	1b514 <net_buf_put>
}
   2caa0:	bd38      	pop	{r3, r4, r5, pc}

0002caa2 <att_chan_read>:
{
   2caa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2caa6:	4680      	mov	r8, r0
   2caa8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2caaa:	4610      	mov	r0, r2
{
   2caac:	4699      	mov	r9, r3
   2caae:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2cab0:	f7ff fec4 	bl	2c83c <net_buf_frags_len>
   2cab4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   2cab8:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2caba:	4283      	cmp	r3, r0
   2cabc:	d97a      	bls.n	2cbb4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2cabe:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2cac2:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2cac4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2cac6:	f7ee fda7 	bl	1b618 <net_buf_frag_last>
	size_t len, total = 0;
   2caca:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2cace:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2cad0:	4630      	mov	r0, r6
   2cad2:	f7ff feb3 	bl	2c83c <net_buf_frags_len>
   2cad6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2cada:	f105 070c 	add.w	r7, r5, #12
   2cade:	1a24      	subs	r4, r4, r0
   2cae0:	4638      	mov	r0, r7
   2cae2:	f001 fa7c 	bl	2dfde <net_buf_simple_tailroom>
   2cae6:	4284      	cmp	r4, r0
   2cae8:	d211      	bcs.n	2cb0e <att_chan_read+0x6c>
   2caea:	4630      	mov	r0, r6
   2caec:	f7ff fea6 	bl	2c83c <net_buf_frags_len>
   2caf0:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2caf4:	1a24      	subs	r4, r4, r0
		if (!len) {
   2caf6:	bb34      	cbnz	r4, 2cb46 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2caf8:	7ab0      	ldrb	r0, [r6, #10]
   2cafa:	f7ee faf7 	bl	1b0ec <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2cafe:	2200      	movs	r2, #0
   2cb00:	2300      	movs	r3, #0
   2cb02:	f001 fa52 	bl	2dfaa <net_buf_alloc_fixed>
			if (!frag) {
   2cb06:	4605      	mov	r5, r0
   2cb08:	b930      	cbnz	r0, 2cb18 <att_chan_read+0x76>
	return total;
   2cb0a:	4657      	mov	r7, sl
   2cb0c:	e02c      	b.n	2cb68 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2cb0e:	4638      	mov	r0, r7
   2cb10:	f001 fa65 	bl	2dfde <net_buf_simple_tailroom>
   2cb14:	4604      	mov	r4, r0
   2cb16:	e7ee      	b.n	2caf6 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2cb18:	4601      	mov	r1, r0
   2cb1a:	4630      	mov	r0, r6
   2cb1c:	f7ee fdc2 	bl	1b6a4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2cb20:	4630      	mov	r0, r6
   2cb22:	f7ff fe8b 	bl	2c83c <net_buf_frags_len>
   2cb26:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb2a:	f105 070c 	add.w	r7, r5, #12
   2cb2e:	1a24      	subs	r4, r4, r0
   2cb30:	4638      	mov	r0, r7
   2cb32:	f001 fa54 	bl	2dfde <net_buf_simple_tailroom>
   2cb36:	4284      	cmp	r4, r0
   2cb38:	d21a      	bcs.n	2cb70 <att_chan_read+0xce>
   2cb3a:	4630      	mov	r0, r6
   2cb3c:	f7ff fe7e 	bl	2c83c <net_buf_frags_len>
   2cb40:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb44:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2cb46:	68e9      	ldr	r1, [r5, #12]
   2cb48:	8a2a      	ldrh	r2, [r5, #16]
   2cb4a:	f8cd 9000 	str.w	r9, [sp]
   2cb4e:	f8db 7004 	ldr.w	r7, [fp, #4]
   2cb52:	440a      	add	r2, r1
   2cb54:	9803      	ldr	r0, [sp, #12]
   2cb56:	4659      	mov	r1, fp
   2cb58:	b2a3      	uxth	r3, r4
   2cb5a:	47b8      	blx	r7
		if (read < 0) {
   2cb5c:	1e07      	subs	r7, r0, #0
   2cb5e:	da0c      	bge.n	2cb7a <att_chan_read+0xd8>
				return total;
   2cb60:	f1ba 0f00 	cmp.w	sl, #0
   2cb64:	bf18      	it	ne
   2cb66:	4657      	movne	r7, sl
}
   2cb68:	4638      	mov	r0, r7
   2cb6a:	b005      	add	sp, #20
   2cb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb70:	4638      	mov	r0, r7
   2cb72:	f001 fa34 	bl	2dfde <net_buf_simple_tailroom>
   2cb76:	4604      	mov	r4, r0
   2cb78:	e7e5      	b.n	2cb46 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2cb7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cb7c:	b993      	cbnz	r3, 2cba4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2cb7e:	4639      	mov	r1, r7
   2cb80:	f105 000c 	add.w	r0, r5, #12
   2cb84:	f7ee fe0e 	bl	1b7a4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cb88:	4630      	mov	r0, r6
   2cb8a:	f7ff fe57 	bl	2c83c <net_buf_frags_len>
   2cb8e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2cb92:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cb94:	4283      	cmp	r3, r0
		total += read;
   2cb96:	44ba      	add	sl, r7
		offset += read;
   2cb98:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cb9c:	d9b5      	bls.n	2cb0a <att_chan_read+0x68>
   2cb9e:	42a7      	cmp	r7, r4
   2cba0:	d096      	beq.n	2cad0 <att_chan_read+0x2e>
   2cba2:	e7b2      	b.n	2cb0a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2cba4:	4639      	mov	r1, r7
   2cba6:	4628      	mov	r0, r5
   2cba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2cbaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cbac:	4798      	blx	r3
   2cbae:	2800      	cmp	r0, #0
   2cbb0:	d1e5      	bne.n	2cb7e <att_chan_read+0xdc>
   2cbb2:	e7aa      	b.n	2cb0a <att_chan_read+0x68>
		return 0;
   2cbb4:	2700      	movs	r7, #0
   2cbb6:	e7d7      	b.n	2cb68 <att_chan_read+0xc6>

0002cbb8 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cbb8:	2200      	movs	r2, #0
	return list->head;
   2cbba:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cbbc:	b903      	cbnz	r3, 2cbc0 <sys_slist_find_and_remove.isra.0+0x8>
   2cbbe:	4770      	bx	lr
   2cbc0:	428b      	cmp	r3, r1
   2cbc2:	d10f      	bne.n	2cbe4 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2cbc4:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbc6:	b93a      	cbnz	r2, 2cbd8 <sys_slist_find_and_remove.isra.0+0x20>
   2cbc8:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2cbca:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbcc:	4291      	cmp	r1, r2
   2cbce:	d100      	bne.n	2cbd2 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2cbd0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2cbd2:	2300      	movs	r3, #0
   2cbd4:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbd6:	4770      	bx	lr
	parent->next = child;
   2cbd8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cbda:	6843      	ldr	r3, [r0, #4]
   2cbdc:	4299      	cmp	r1, r3
	list->tail = node;
   2cbde:	bf08      	it	eq
   2cbe0:	6042      	streq	r2, [r0, #4]
}
   2cbe2:	e7f6      	b.n	2cbd2 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2cbe4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cbe6:	681b      	ldr	r3, [r3, #0]
   2cbe8:	e7e8      	b.n	2cbbc <sys_slist_find_and_remove.isra.0+0x4>

0002cbea <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2cbea:	2006      	movs	r0, #6
   2cbec:	4770      	bx	lr

0002cbee <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cbee:	2301      	movs	r3, #1
{
   2cbf0:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cbf2:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cbf6:	e8d0 3fef 	ldaex	r3, [r0]
   2cbfa:	ea43 0201 	orr.w	r2, r3, r1
   2cbfe:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2cc02:	2c00      	cmp	r4, #0
   2cc04:	d1f7      	bne.n	2cbf6 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2cc06:	4219      	tst	r1, r3
}
   2cc08:	bf14      	ite	ne
   2cc0a:	2001      	movne	r0, #1
   2cc0c:	2000      	moveq	r0, #0
   2cc0e:	bd10      	pop	{r4, pc}

0002cc10 <read_cb>:
{
   2cc10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   2cc12:	2300      	movs	r3, #0
{
   2cc14:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2cc16:	6816      	ldr	r6, [r2, #0]
{
   2cc18:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2cc1a:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc1c:	4629      	mov	r1, r5
	data->err = 0x00;
   2cc1e:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc20:	2295      	movs	r2, #149	; 0x95
   2cc22:	f000 fc02 	bl	2d42a <bt_gatt_check_perm>
   2cc26:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2cc28:	b980      	cbnz	r0, 2cc4c <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2cc2a:	e9cd 0000 	strd	r0, r0, [sp]
   2cc2e:	4629      	mov	r1, r5
   2cc30:	4630      	mov	r0, r6
   2cc32:	88a3      	ldrh	r3, [r4, #4]
   2cc34:	68a2      	ldr	r2, [r4, #8]
   2cc36:	f7ff ff34 	bl	2caa2 <att_chan_read>
	if (ret < 0) {
   2cc3a:	2800      	cmp	r0, #0
   2cc3c:	da09      	bge.n	2cc52 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2cc3e:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2cc42:	bf32      	itee	cc
   2cc44:	200e      	movcc	r0, #14
		return -err;
   2cc46:	4240      	negcs	r0, r0
   2cc48:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   2cc4a:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2cc4c:	2000      	movs	r0, #0
}
   2cc4e:	b002      	add	sp, #8
   2cc50:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2cc52:	2001      	movs	r0, #1
   2cc54:	e7fb      	b.n	2cc4e <read_cb+0x3e>

0002cc56 <read_vl_cb>:
{
   2cc56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   2cc5a:	2300      	movs	r3, #0
{
   2cc5c:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2cc5e:	f8d2 8000 	ldr.w	r8, [r2]
{
   2cc62:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2cc64:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc68:	4631      	mov	r1, r6
	data->err = 0x00;
   2cc6a:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc6c:	2295      	movs	r2, #149	; 0x95
   2cc6e:	f000 fbdc 	bl	2d42a <bt_gatt_check_perm>
   2cc72:	4605      	mov	r5, r0
   2cc74:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2cc76:	b9e0      	cbnz	r0, 2ccb2 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2cc78:	68a0      	ldr	r0, [r4, #8]
   2cc7a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2cc7e:	8a02      	ldrh	r2, [r0, #16]
   2cc80:	1a9b      	subs	r3, r3, r2
   2cc82:	2b01      	cmp	r3, #1
   2cc84:	dd15      	ble.n	2ccb2 <read_vl_cb+0x5c>
   2cc86:	2102      	movs	r1, #2
   2cc88:	300c      	adds	r0, #12
   2cc8a:	f7ee fd8b 	bl	1b7a4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2cc8e:	e9cd 5500 	strd	r5, r5, [sp]
   2cc92:	4607      	mov	r7, r0
   2cc94:	88a3      	ldrh	r3, [r4, #4]
   2cc96:	4631      	mov	r1, r6
   2cc98:	4640      	mov	r0, r8
   2cc9a:	68a2      	ldr	r2, [r4, #8]
   2cc9c:	f7ff ff01 	bl	2caa2 <att_chan_read>
	if (read < 0) {
   2cca0:	1e03      	subs	r3, r0, #0
   2cca2:	da0a      	bge.n	2ccba <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2cca4:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2cca8:	bf32      	itee	cc
   2ccaa:	230e      	movcc	r3, #14
		return -err;
   2ccac:	425b      	negcs	r3, r3
   2ccae:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2ccb0:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2ccb2:	2000      	movs	r0, #0
}
   2ccb4:	b002      	add	sp, #8
   2ccb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   2ccba:	2001      	movs	r0, #1
	rsp->len = read;
   2ccbc:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2ccbe:	e7f9      	b.n	2ccb4 <read_vl_cb+0x5e>

0002ccc0 <bt_att_sent>:
{
   2ccc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ccc2:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   2ccc4:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2ccc8:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ccca:	f100 0394 	add.w	r3, r0, #148	; 0x94
   2ccce:	e8d3 1fef 	ldaex	r1, [r3]
   2ccd2:	f021 0110 	bic.w	r1, r1, #16
   2ccd6:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2ccda:	2a00      	cmp	r2, #0
   2ccdc:	d1f7      	bne.n	2ccce <bt_att_sent+0xe>
	if (!att) {
   2ccde:	b30c      	cbz	r4, 2cd24 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2cce0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2cce4:	b98b      	cbnz	r3, 2cd0a <bt_att_sent+0x4a>
   2cce6:	6863      	ldr	r3, [r4, #4]
   2cce8:	b17b      	cbz	r3, 2cd0a <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2ccea:	1d20      	adds	r0, r4, #4
   2ccec:	f7ff fd9c 	bl	2c828 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2ccf0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2ccf2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2ccf4:	4638      	mov	r0, r7
   2ccf6:	f7ff fe93 	bl	2ca20 <chan_req_send>
   2ccfa:	2800      	cmp	r0, #0
   2ccfc:	da12      	bge.n	2cd24 <bt_att_sent+0x64>
	return list->head;
   2ccfe:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2cd00:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cd02:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2cd04:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cd06:	b903      	cbnz	r3, 2cd0a <bt_att_sent+0x4a>
	list->tail = node;
   2cd08:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2cd0a:	4638      	mov	r0, r7
   2cd0c:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   2cd10:	f7ff fea0 	bl	2ca54 <process_queue>
	if (!err) {
   2cd14:	b130      	cbz	r0, 2cd24 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   2cd16:	4638      	mov	r0, r7
   2cd18:	f104 010c 	add.w	r1, r4, #12
}
   2cd1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2cd20:	f7ff be98 	b.w	2ca54 <process_queue>
}
   2cd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cd26 <att_req_send_process>:
{
   2cd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2cd2a:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2cd2c:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cd2e:	2c00      	cmp	r4, #0
   2cd30:	d03b      	beq.n	2cdaa <att_req_send_process+0x84>
	return node->next;
   2cd32:	f854 69f0 	ldr.w	r6, [r4], #-240
   2cd36:	b106      	cbz	r6, 2cd3a <att_req_send_process+0x14>
   2cd38:	3ef0      	subs	r6, #240	; 0xf0
{
   2cd3a:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   2cd3c:	f108 0704 	add.w	r7, r8, #4
{
   2cd40:	461d      	mov	r5, r3
   2cd42:	e013      	b.n	2cd6c <att_req_send_process+0x46>
		if (!req && prev &&
   2cd44:	b1c3      	cbz	r3, 2cd78 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2cd46:	2103      	movs	r1, #3
   2cd48:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2cd4c:	f7ff fd90 	bl	2c870 <atomic_test_bit>
   2cd50:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2cd52:	f103 0098 	add.w	r0, r3, #152	; 0x98
   2cd56:	f7ff fd8b 	bl	2c870 <atomic_test_bit>
		if (!req && prev &&
   2cd5a:	4282      	cmp	r2, r0
   2cd5c:	d10c      	bne.n	2cd78 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cd5e:	b326      	cbz	r6, 2cdaa <att_req_send_process+0x84>
   2cd60:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   2cd64:	b102      	cbz	r2, 2cd68 <att_req_send_process+0x42>
   2cd66:	3af0      	subs	r2, #240	; 0xf0
{
   2cd68:	4634      	mov	r4, r6
   2cd6a:	4616      	mov	r6, r2
		if (chan->req) {
   2cd6c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2cd70:	2a00      	cmp	r2, #0
   2cd72:	d1f4      	bne.n	2cd5e <att_req_send_process+0x38>
		if (!req && prev &&
   2cd74:	2d00      	cmp	r5, #0
   2cd76:	d0e5      	beq.n	2cd44 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2cd78:	4638      	mov	r0, r7
   2cd7a:	f7ff fd55 	bl	2c828 <sys_slist_get>
	if (node) {
   2cd7e:	4605      	mov	r5, r0
   2cd80:	b908      	cbnz	r0, 2cd86 <att_req_send_process+0x60>
   2cd82:	4623      	mov	r3, r4
   2cd84:	e7eb      	b.n	2cd5e <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2cd86:	4601      	mov	r1, r0
   2cd88:	4620      	mov	r0, r4
   2cd8a:	f7e9 f871 	bl	15e70 <bt_att_chan_req_send>
   2cd8e:	2800      	cmp	r0, #0
   2cd90:	da0b      	bge.n	2cdaa <att_req_send_process+0x84>
	return list->head;
   2cd92:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2cd96:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cd98:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2cd9c:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cda0:	2b00      	cmp	r3, #0
   2cda2:	d1ee      	bne.n	2cd82 <att_req_send_process+0x5c>
	list->tail = node;
   2cda4:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2cda8:	e7eb      	b.n	2cd82 <att_req_send_process+0x5c>
}
   2cdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cdae <bt_att_status>:
{
   2cdae:	b538      	push	{r3, r4, r5, lr}
   2cdb0:	4605      	mov	r5, r0
   2cdb2:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2cdb4:	2100      	movs	r1, #0
   2cdb6:	f7ff fd5b 	bl	2c870 <atomic_test_bit>
   2cdba:	b1c0      	cbz	r0, 2cdee <bt_att_status+0x40>
	if (!chan->att) {
   2cdbc:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2cdc0:	b1a8      	cbz	r0, 2cdee <bt_att_status+0x40>
	if (chan->req) {
   2cdc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2cdc6:	b993      	cbnz	r3, 2cdee <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2cdc8:	3004      	adds	r0, #4
   2cdca:	f7ff fd2d 	bl	2c828 <sys_slist_get>
	if (!node) {
   2cdce:	4604      	mov	r4, r0
   2cdd0:	b168      	cbz	r0, 2cdee <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2cdd2:	4601      	mov	r1, r0
   2cdd4:	1f28      	subs	r0, r5, #4
   2cdd6:	f7e9 f84b 	bl	15e70 <bt_att_chan_req_send>
   2cdda:	2800      	cmp	r0, #0
   2cddc:	da07      	bge.n	2cdee <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2cdde:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2cde2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2cde4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cde6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2cde8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cdea:	b902      	cbnz	r2, 2cdee <bt_att_status+0x40>
	list->tail = node;
   2cdec:	609c      	str	r4, [r3, #8]
}
   2cdee:	bd38      	pop	{r3, r4, r5, pc}

0002cdf0 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2cdf0:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2cdf2:	6883      	ldr	r3, [r0, #8]
   2cdf4:	699b      	ldr	r3, [r3, #24]
   2cdf6:	b10b      	cbz	r3, 2cdfc <att_sent+0xc>
		chan->ops->sent(chan);
   2cdf8:	3004      	adds	r0, #4
   2cdfa:	4718      	bx	r3
}
   2cdfc:	4770      	bx	lr

0002cdfe <att_tx_complete>:
{
   2cdfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ce02:	4606      	mov	r6, r0
   2ce04:	460d      	mov	r5, r1
	if (!err) {
   2ce06:	4614      	mov	r4, r2
   2ce08:	b122      	cbz	r2, 2ce14 <att_tx_complete+0x16>
}
   2ce0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2ce0e:	4608      	mov	r0, r1
   2ce10:	f7e8 beda 	b.w	15bc8 <tx_meta_data_free>
		att_sent(conn, user_data);
   2ce14:	f7ff ffec 	bl	2cdf0 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2ce18:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   2ce1a:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2ce1c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2ce20:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2ce24:	f7e8 fed0 	bl	15bc8 <tx_meta_data_free>
	if (!err && func) {
   2ce28:	b92f      	cbnz	r7, 2ce36 <att_tx_complete+0x38>
}
   2ce2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2ce2e:	4649      	mov	r1, r9
   2ce30:	4630      	mov	r0, r6
   2ce32:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2ce34:	3401      	adds	r4, #1
   2ce36:	b2a3      	uxth	r3, r4
   2ce38:	4543      	cmp	r3, r8
   2ce3a:	d3f8      	bcc.n	2ce2e <att_tx_complete+0x30>
   2ce3c:	e7f5      	b.n	2ce2a <att_tx_complete+0x2c>

0002ce3e <att_req_sent>:
{
   2ce3e:	b510      	push	{r4, lr}
   2ce40:	460c      	mov	r4, r1
	if (!err) {
   2ce42:	b90a      	cbnz	r2, 2ce48 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2ce44:	f7ff ffd4 	bl	2cdf0 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2ce48:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2ce4a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2ce4e:	b12b      	cbz	r3, 2ce5c <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2ce50:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ce54:	2300      	movs	r3, #0
   2ce56:	30c0      	adds	r0, #192	; 0xc0
   2ce58:	f7f9 f942 	bl	260e0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2ce5c:	4620      	mov	r0, r4
}
   2ce5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2ce62:	f7e8 beb1 	b.w	15bc8 <tx_meta_data_free>

0002ce66 <att_cfm_sent>:
{
   2ce66:	b510      	push	{r4, lr}
   2ce68:	460c      	mov	r4, r1
	if (!err) {
   2ce6a:	b90a      	cbnz	r2, 2ce70 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2ce6c:	f7ff ffc0 	bl	2cdf0 <att_sent>
   2ce70:	6823      	ldr	r3, [r4, #0]
   2ce72:	3398      	adds	r3, #152	; 0x98
   2ce74:	e8d3 1fef 	ldaex	r1, [r3]
   2ce78:	f021 0102 	bic.w	r1, r1, #2
   2ce7c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2ce80:	2a00      	cmp	r2, #0
   2ce82:	d1f7      	bne.n	2ce74 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2ce84:	4620      	mov	r0, r4
}
   2ce86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2ce8a:	f7e8 be9d 	b.w	15bc8 <tx_meta_data_free>

0002ce8e <att_rsp_sent>:
{
   2ce8e:	b510      	push	{r4, lr}
   2ce90:	460c      	mov	r4, r1
	if (!err) {
   2ce92:	b90a      	cbnz	r2, 2ce98 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2ce94:	f7ff ffac 	bl	2cdf0 <att_sent>
   2ce98:	6823      	ldr	r3, [r4, #0]
   2ce9a:	3398      	adds	r3, #152	; 0x98
   2ce9c:	e8d3 1fef 	ldaex	r1, [r3]
   2cea0:	f021 0101 	bic.w	r1, r1, #1
   2cea4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2cea8:	2a00      	cmp	r2, #0
   2ceaa:	d1f7      	bne.n	2ce9c <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   2ceac:	4620      	mov	r0, r4
}
   2ceae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2ceb2:	f7e8 be89 	b.w	15bc8 <tx_meta_data_free>

0002ceb6 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2ceb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ceba:	4688      	mov	r8, r1
   2cebc:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2cebe:	2101      	movs	r1, #1
   2cec0:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2cec2:	4605      	mov	r5, r0
   2cec4:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2cec6:	f7e9 f9a9 	bl	1621c <bt_att_chan_create_pdu>
	if (!buf) {
   2ceca:	4604      	mov	r4, r0
   2cecc:	b170      	cbz	r0, 2ceec <send_err_rsp.part.0+0x36>
   2cece:	2104      	movs	r1, #4
   2ced0:	300c      	adds	r0, #12
   2ced2:	f7ee fc67 	bl	1b7a4 <net_buf_simple_add>
	rsp->request = req;
   2ced6:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2ceda:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2cede:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2cee0:	4621      	mov	r1, r4
   2cee2:	4628      	mov	r0, r5
}
   2cee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2cee8:	f7ff bdcd 	b.w	2ca86 <bt_att_chan_send_rsp>
}
   2ceec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cef0 <att_write_req>:
{
   2cef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cef2:	460c      	mov	r4, r1
   2cef4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2cef6:	f101 000c 	add.w	r0, r1, #12
   2cefa:	f001 f864 	bl	2dfc6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2cefe:	8a22      	ldrh	r2, [r4, #16]
   2cf00:	4603      	mov	r3, r0
   2cf02:	9201      	str	r2, [sp, #4]
   2cf04:	68e2      	ldr	r2, [r4, #12]
   2cf06:	2112      	movs	r1, #18
   2cf08:	9200      	str	r2, [sp, #0]
   2cf0a:	4628      	mov	r0, r5
   2cf0c:	2213      	movs	r2, #19
   2cf0e:	f7e9 fa9f 	bl	16450 <att_write_rsp.constprop.0>
}
   2cf12:	b003      	add	sp, #12
   2cf14:	bd30      	pop	{r4, r5, pc}

0002cf16 <att_write_cmd>:
{
   2cf16:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cf18:	460c      	mov	r4, r1
   2cf1a:	4605      	mov	r5, r0
   2cf1c:	f101 000c 	add.w	r0, r1, #12
   2cf20:	f001 f851 	bl	2dfc6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2cf24:	8a22      	ldrh	r2, [r4, #16]
   2cf26:	4603      	mov	r3, r0
   2cf28:	9201      	str	r2, [sp, #4]
   2cf2a:	68e2      	ldr	r2, [r4, #12]
   2cf2c:	4628      	mov	r0, r5
   2cf2e:	9200      	str	r2, [sp, #0]
   2cf30:	2200      	movs	r2, #0
   2cf32:	4611      	mov	r1, r2
   2cf34:	f7e9 fa8c 	bl	16450 <att_write_rsp.constprop.0>
}
   2cf38:	b003      	add	sp, #12
   2cf3a:	bd30      	pop	{r4, r5, pc}

0002cf3c <att_read_blob_req>:
{
   2cf3c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2cf3e:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2cf40:	210c      	movs	r1, #12
   2cf42:	8813      	ldrh	r3, [r2, #0]
   2cf44:	8852      	ldrh	r2, [r2, #2]
   2cf46:	9200      	str	r2, [sp, #0]
   2cf48:	220d      	movs	r2, #13
   2cf4a:	f7e9 fc45 	bl	167d8 <att_read_rsp>
}
   2cf4e:	b003      	add	sp, #12
   2cf50:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf54 <att_read_req>:
{
   2cf54:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cf56:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2cf58:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cf5a:	210a      	movs	r1, #10
   2cf5c:	881b      	ldrh	r3, [r3, #0]
   2cf5e:	9200      	str	r2, [sp, #0]
   2cf60:	220b      	movs	r2, #11
   2cf62:	f7e9 fc39 	bl	167d8 <att_read_rsp>
}
   2cf66:	b003      	add	sp, #12
   2cf68:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf6c <att_mtu_req>:
{
   2cf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cf6e:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2cf70:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2cf74:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cf76:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2cf78:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cf7a:	f7ff fc79 	bl	2c870 <atomic_test_bit>
   2cf7e:	4604      	mov	r4, r0
   2cf80:	b9f0      	cbnz	r0, 2cfc0 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2cf82:	68db      	ldr	r3, [r3, #12]
   2cf84:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2cf86:	2e16      	cmp	r6, #22
   2cf88:	d91c      	bls.n	2cfc4 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2cf8a:	4638      	mov	r0, r7
   2cf8c:	2202      	movs	r2, #2
   2cf8e:	f7e9 fac3 	bl	16518 <bt_att_create_pdu>
	if (!pdu) {
   2cf92:	4607      	mov	r7, r0
   2cf94:	b1c0      	cbz	r0, 2cfc8 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2cf96:	2102      	movs	r1, #2
   2cf98:	300c      	adds	r0, #12
   2cf9a:	f7ee fc03 	bl	1b7a4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cf9e:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2cfa0:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cfa2:	7003      	strb	r3, [r0, #0]
   2cfa4:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2cfa6:	4628      	mov	r0, r5
   2cfa8:	f7ff fd6d 	bl	2ca86 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cfac:	2e41      	cmp	r6, #65	; 0x41
   2cfae:	bf28      	it	cs
   2cfb0:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2cfb2:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cfb4:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2cfb6:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2cfb8:	f7ff fc9c 	bl	2c8f4 <att_chan_mtu_updated>
	return 0;
   2cfbc:	4620      	mov	r0, r4
}
   2cfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2cfc0:	2006      	movs	r0, #6
   2cfc2:	e7fc      	b.n	2cfbe <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2cfc4:	2004      	movs	r0, #4
   2cfc6:	e7fa      	b.n	2cfbe <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2cfc8:	200e      	movs	r0, #14
   2cfca:	e7f8      	b.n	2cfbe <att_mtu_req+0x52>

0002cfcc <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2cfcc:	8a0a      	ldrh	r2, [r1, #16]
   2cfce:	2300      	movs	r3, #0
   2cfd0:	68c9      	ldr	r1, [r1, #12]
   2cfd2:	f7e9 bdab 	b.w	16b2c <att_handle_rsp>

0002cfd6 <bt_att_encrypt_change>:
{
   2cfd6:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2cfd8:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2cfda:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2cfde:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2cfe0:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   2cfe4:	2b00      	cmp	r3, #0
   2cfe6:	d038      	beq.n	2d05a <bt_att_encrypt_change+0x84>
	if (hci_status) {
   2cfe8:	b141      	cbz	r1, 2cffc <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   2cfea:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2cfee:	2b00      	cmp	r3, #0
   2cff0:	d033      	beq.n	2d05a <bt_att_encrypt_change+0x84>
   2cff2:	7c1b      	ldrb	r3, [r3, #16]
   2cff4:	07da      	lsls	r2, r3, #31
   2cff6:	d530      	bpl.n	2d05a <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   2cff8:	2305      	movs	r3, #5
   2cffa:	e021      	b.n	2d040 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2cffc:	4628      	mov	r0, r5
   2cffe:	f7eb fb93 	bl	18728 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2d002:	7a6b      	ldrb	r3, [r5, #9]
   2d004:	2b01      	cmp	r3, #1
   2d006:	d028      	beq.n	2d05a <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2d008:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2d00c:	b32d      	cbz	r5, 2d05a <bt_att_encrypt_change+0x84>
   2d00e:	7c2b      	ldrb	r3, [r5, #16]
   2d010:	07db      	lsls	r3, r3, #31
   2d012:	d522      	bpl.n	2d05a <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2d014:	68eb      	ldr	r3, [r5, #12]
   2d016:	2b00      	cmp	r3, #0
   2d018:	d0ee      	beq.n	2cff8 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2d01a:	4630      	mov	r0, r6
   2d01c:	696a      	ldr	r2, [r5, #20]
   2d01e:	7c69      	ldrb	r1, [r5, #17]
   2d020:	f7e9 f8fc 	bl	1621c <bt_att_chan_create_pdu>
	if (!buf) {
   2d024:	4604      	mov	r4, r0
   2d026:	b150      	cbz	r0, 2d03e <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2d028:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2d02c:	68eb      	ldr	r3, [r5, #12]
   2d02e:	4798      	blx	r3
   2d030:	b168      	cbz	r0, 2d04e <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2d032:	69a0      	ldr	r0, [r4, #24]
   2d034:	f7e8 fdc8 	bl	15bc8 <tx_meta_data_free>
		net_buf_unref(buf);
   2d038:	4620      	mov	r0, r4
   2d03a:	f7ee fa91 	bl	1b560 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2d03e:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2d040:	2200      	movs	r2, #0
   2d042:	4630      	mov	r0, r6
}
   2d044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2d048:	4611      	mov	r1, r2
   2d04a:	f7e9 bd6f 	b.w	16b2c <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2d04e:	4621      	mov	r1, r4
   2d050:	4630      	mov	r0, r6
   2d052:	f7e8 fe99 	bl	15d88 <chan_send>
   2d056:	2800      	cmp	r0, #0
   2d058:	d1eb      	bne.n	2d032 <bt_att_encrypt_change+0x5c>
}
   2d05a:	bd70      	pop	{r4, r5, r6, pc}

0002d05c <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2d05c:	2001      	movs	r0, #1
   2d05e:	4770      	bx	lr

0002d060 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2d060:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2d062:	f7e8 ff47 	bl	15ef4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2d066:	b178      	cbz	r0, 2d088 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2d068:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d06a:	b16b      	cbz	r3, 2d088 <bt_att_clear_out_of_sync_sent+0x28>
   2d06c:	3bf0      	subs	r3, #240	; 0xf0
   2d06e:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2d072:	e8d2 0fef 	ldaex	r0, [r2]
   2d076:	f020 0020 	bic.w	r0, r0, #32
   2d07a:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2d07e:	2900      	cmp	r1, #0
   2d080:	d1f7      	bne.n	2d072 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2d082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2d086:	e7f0      	b.n	2d06a <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2d088:	bd08      	pop	{r3, pc}

0002d08a <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2d08a:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2d08c:	2104      	movs	r1, #4
   2d08e:	f7ff fbc1 	bl	2c814 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2d092:	b128      	cbz	r0, 2d0a0 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2d094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2d098:	2105      	movs	r1, #5
   2d09a:	3094      	adds	r0, #148	; 0x94
   2d09c:	f7ff bbe8 	b.w	2c870 <atomic_test_bit>
}
   2d0a0:	bd08      	pop	{r3, pc}

0002d0a2 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2d0a2:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2d0a4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2d0a8:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   2d0aa:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2d0ac:	8082      	strh	r2, [r0, #4]
}
   2d0ae:	4770      	bx	lr

0002d0b0 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2d0b0:	6010      	str	r0, [r2, #0]
}
   2d0b2:	2000      	movs	r0, #0
   2d0b4:	4770      	bx	lr

0002d0b6 <gatt_ccc_changed>:
{
   2d0b6:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2d0b8:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2d0ba:	895a      	ldrh	r2, [r3, #10]
   2d0bc:	428a      	cmp	r2, r1
   2d0be:	d003      	beq.n	2d0c8 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2d0c0:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2d0c2:	68db      	ldr	r3, [r3, #12]
   2d0c4:	b103      	cbz	r3, 2d0c8 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2d0c6:	4718      	bx	r3
}
   2d0c8:	4770      	bx	lr

0002d0ca <gatt_indicate_rsp>:
{
   2d0ca:	b510      	push	{r4, lr}
   2d0cc:	9c02      	ldr	r4, [sp, #8]
   2d0ce:	460a      	mov	r2, r1
	if (params->func) {
   2d0d0:	68a3      	ldr	r3, [r4, #8]
   2d0d2:	b10b      	cbz	r3, 2d0d8 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2d0d4:	4621      	mov	r1, r4
   2d0d6:	4798      	blx	r3
	params->_ref--;
   2d0d8:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d0da:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2d0dc:	3b01      	subs	r3, #1
   2d0de:	b2db      	uxtb	r3, r3
   2d0e0:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d0e2:	b122      	cbz	r2, 2d0ee <gatt_indicate_rsp+0x24>
   2d0e4:	b91b      	cbnz	r3, 2d0ee <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2d0e6:	4620      	mov	r0, r4
}
   2d0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2d0ec:	4710      	bx	r2
}
   2d0ee:	bd10      	pop	{r4, pc}

0002d0f0 <match_uuid>:
	data->attr = attr;
   2d0f0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2d0f2:	8091      	strh	r1, [r2, #4]
}
   2d0f4:	2000      	movs	r0, #0
   2d0f6:	4770      	bx	lr

0002d0f8 <ccc_set_cb>:
}
   2d0f8:	2000      	movs	r0, #0
   2d0fa:	4770      	bx	lr

0002d0fc <gen_hash_m>:
{
   2d0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d0fe:	6807      	ldr	r7, [r0, #0]
{
   2d100:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d102:	783d      	ldrb	r5, [r7, #0]
{
   2d104:	4614      	mov	r4, r2
   2d106:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d108:	b9dd      	cbnz	r5, 2d142 <gen_hash_m+0x46>
	switch (u16->val) {
   2d10a:	887b      	ldrh	r3, [r7, #2]
   2d10c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2d110:	d004      	beq.n	2d11c <gen_hash_m+0x20>
   2d112:	d810      	bhi.n	2d136 <gen_hash_m+0x3a>
   2d114:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2d118:	2b03      	cmp	r3, #3
   2d11a:	d812      	bhi.n	2d142 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2d11c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d120:	2202      	movs	r2, #2
   2d122:	4620      	mov	r0, r4
   2d124:	f10d 010a 	add.w	r1, sp, #10
   2d128:	f7fe fb2f 	bl	2b78a <tc_cmac_update>
   2d12c:	b968      	cbnz	r0, 2d14a <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2d12e:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2d132:	65a2      	str	r2, [r4, #88]	; 0x58
   2d134:	e006      	b.n	2d144 <gen_hash_m+0x48>
	switch (u16->val) {
   2d136:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2d13a:	33ff      	adds	r3, #255	; 0xff
   2d13c:	b29b      	uxth	r3, r3
   2d13e:	2b04      	cmp	r3, #4
   2d140:	d91e      	bls.n	2d180 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2d142:	2501      	movs	r5, #1
}
   2d144:	4628      	mov	r0, r5
   2d146:	b009      	add	sp, #36	; 0x24
   2d148:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2d14a:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d14c:	2202      	movs	r2, #2
   2d14e:	4620      	mov	r0, r4
   2d150:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2d154:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d158:	f7fe fb17 	bl	2b78a <tc_cmac_update>
   2d15c:	2800      	cmp	r0, #0
   2d15e:	d0e6      	beq.n	2d12e <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2d160:	2000      	movs	r0, #0
   2d162:	9000      	str	r0, [sp, #0]
   2d164:	aa03      	add	r2, sp, #12
   2d166:	2313      	movs	r3, #19
   2d168:	4631      	mov	r1, r6
   2d16a:	6877      	ldr	r7, [r6, #4]
   2d16c:	47b8      	blx	r7
		if (len < 0) {
   2d16e:	1e02      	subs	r2, r0, #0
   2d170:	dbdf      	blt.n	2d132 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2d172:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d174:	4620      	mov	r0, r4
   2d176:	f7fe fb08 	bl	2b78a <tc_cmac_update>
   2d17a:	2800      	cmp	r0, #0
   2d17c:	d1e1      	bne.n	2d142 <gen_hash_m+0x46>
   2d17e:	e7d6      	b.n	2d12e <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2d180:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d184:	2202      	movs	r2, #2
   2d186:	4620      	mov	r0, r4
   2d188:	f10d 010a 	add.w	r1, sp, #10
   2d18c:	f7fe fafd 	bl	2b78a <tc_cmac_update>
   2d190:	2800      	cmp	r0, #0
   2d192:	d0cc      	beq.n	2d12e <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2d194:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d196:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2d198:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d19c:	f10d 010a 	add.w	r1, sp, #10
   2d1a0:	e7e8      	b.n	2d174 <gen_hash_m+0x78>

0002d1a2 <bt_addr_le_eq>:
   2d1a2:	2207      	movs	r2, #7
{
   2d1a4:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2d1a6:	f003 f9be 	bl	30526 <memcmp>
}
   2d1aa:	fab0 f080 	clz	r0, r0
   2d1ae:	0940      	lsrs	r0, r0, #5
   2d1b0:	bd08      	pop	{r3, pc}

0002d1b2 <ccc_find_cfg>:
{
   2d1b2:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2d1b4:	7803      	ldrb	r3, [r0, #0]
{
   2d1b6:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2d1b8:	4293      	cmp	r3, r2
   2d1ba:	d105      	bne.n	2d1c8 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2d1bc:	3001      	adds	r0, #1
   2d1be:	f7ff fff0 	bl	2d1a2 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2d1c2:	b108      	cbz	r0, 2d1c8 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2d1c4:	4620      	mov	r0, r4
}
   2d1c6:	bd10      	pop	{r4, pc}
	return NULL;
   2d1c8:	2000      	movs	r0, #0
   2d1ca:	e7fc      	b.n	2d1c6 <ccc_find_cfg+0x14>

0002d1cc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d1cc:	e8d0 0faf 	lda	r0, [r0]
}
   2d1d0:	4770      	bx	lr

0002d1d2 <atomic_or>:
{
   2d1d2:	4603      	mov	r3, r0
   2d1d4:	b510      	push	{r4, lr}
}
   2d1d6:	e8d3 0fef 	ldaex	r0, [r3]
   2d1da:	ea40 0201 	orr.w	r2, r0, r1
   2d1de:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d1e2:	2c00      	cmp	r4, #0
   2d1e4:	d1f7      	bne.n	2d1d6 <atomic_or+0x4>
   2d1e6:	bd10      	pop	{r4, pc}

0002d1e8 <atomic_and>:
{
   2d1e8:	4603      	mov	r3, r0
   2d1ea:	b510      	push	{r4, lr}
}
   2d1ec:	e8d3 0fef 	ldaex	r0, [r3]
   2d1f0:	ea00 0201 	and.w	r2, r0, r1
   2d1f4:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d1f8:	2c00      	cmp	r4, #0
   2d1fa:	d1f7      	bne.n	2d1ec <atomic_and+0x4>
   2d1fc:	bd10      	pop	{r4, pc}

0002d1fe <bt_addr_le_copy>:
   2d1fe:	680b      	ldr	r3, [r1, #0]
   2d200:	6003      	str	r3, [r0, #0]
   2d202:	888b      	ldrh	r3, [r1, #4]
   2d204:	8083      	strh	r3, [r0, #4]
   2d206:	798b      	ldrb	r3, [r1, #6]
   2d208:	7183      	strb	r3, [r0, #6]
}
   2d20a:	4770      	bx	lr

0002d20c <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2d20c:	2300      	movs	r3, #0
   2d20e:	6003      	str	r3, [r0, #0]
   2d210:	6043      	str	r3, [r0, #4]
   2d212:	6083      	str	r3, [r0, #8]
}
   2d214:	4770      	bx	lr

0002d216 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2d216:	b538      	push	{r3, r4, r5, lr}
   2d218:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2d21c:	4615      	mov	r5, r2
	if (offset > value_len) {
   2d21e:	4294      	cmp	r4, r2
   2d220:	d30a      	bcc.n	2d238 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   2d222:	1aa4      	subs	r4, r4, r2
   2d224:	428c      	cmp	r4, r1
   2d226:	bfa8      	it	ge
   2d228:	460c      	movge	r4, r1
   2d22a:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d22c:	4622      	mov	r2, r4
   2d22e:	1959      	adds	r1, r3, r5
   2d230:	f003 f989 	bl	30546 <memcpy>
}
   2d234:	4620      	mov	r0, r4
   2d236:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d238:	f06f 0406 	mvn.w	r4, #6
   2d23c:	e7fa      	b.n	2d234 <bt_gatt_attr_read.constprop.0+0x1e>

0002d23e <bt_gatt_attr_read_ccc>:
{
   2d23e:	b530      	push	{r4, r5, lr}
   2d240:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   2d242:	68c9      	ldr	r1, [r1, #12]
{
   2d244:	4614      	mov	r4, r2
   2d246:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2d248:	f7e9 fe18 	bl	16e7c <find_ccc_cfg>
	if (cfg) {
   2d24c:	b100      	cbz	r0, 2d250 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2d24e:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2d250:	2302      	movs	r3, #2
   2d252:	f8ad 000e 	strh.w	r0, [sp, #14]
   2d256:	9300      	str	r3, [sp, #0]
   2d258:	4629      	mov	r1, r5
   2d25a:	4620      	mov	r0, r4
   2d25c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d260:	f10d 030e 	add.w	r3, sp, #14
   2d264:	f7ff ffd7 	bl	2d216 <bt_gatt_attr_read.constprop.0>
}
   2d268:	b005      	add	sp, #20
   2d26a:	bd30      	pop	{r4, r5, pc}

0002d26c <bt_gatt_attr_read_service>:
{
   2d26c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d26e:	460c      	mov	r4, r1
   2d270:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2d272:	68e3      	ldr	r3, [r4, #12]
{
   2d274:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2d276:	781c      	ldrb	r4, [r3, #0]
{
   2d278:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2d27c:	b13c      	cbz	r4, 2d28e <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d27e:	2410      	movs	r4, #16
   2d280:	3301      	adds	r3, #1
   2d282:	9406      	str	r4, [sp, #24]
}
   2d284:	b004      	add	sp, #16
   2d286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d28a:	f7ff bfc4 	b.w	2d216 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2d28e:	885b      	ldrh	r3, [r3, #2]
   2d290:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d294:	2302      	movs	r3, #2
   2d296:	9300      	str	r3, [sp, #0]
   2d298:	f10d 030e 	add.w	r3, sp, #14
   2d29c:	f7ff ffbb 	bl	2d216 <bt_gatt_attr_read.constprop.0>
}
   2d2a0:	b004      	add	sp, #16
   2d2a2:	bd10      	pop	{r4, pc}

0002d2a4 <cf_read>:
{
   2d2a4:	b530      	push	{r4, r5, lr}
   2d2a6:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2d2a8:	2300      	movs	r3, #0
{
   2d2aa:	b085      	sub	sp, #20
   2d2ac:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2d2ae:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2d2b2:	f7e9 fd93 	bl	16ddc <find_cf_cfg>
	if (cfg) {
   2d2b6:	b110      	cbz	r0, 2d2be <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2d2b8:	7a03      	ldrb	r3, [r0, #8]
   2d2ba:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2d2be:	2301      	movs	r3, #1
   2d2c0:	4629      	mov	r1, r5
   2d2c2:	9300      	str	r3, [sp, #0]
   2d2c4:	4620      	mov	r0, r4
   2d2c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d2ca:	ab03      	add	r3, sp, #12
   2d2cc:	f7ff ffa3 	bl	2d216 <bt_gatt_attr_read.constprop.0>
}
   2d2d0:	b005      	add	sp, #20
   2d2d2:	bd30      	pop	{r4, r5, pc}

0002d2d4 <read_name>:
{
   2d2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d2d8:	4614      	mov	r4, r2
   2d2da:	461d      	mov	r5, r3
   2d2dc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2d2e0:	f7e6 f98a 	bl	135f8 <bt_get_name>
   2d2e4:	4606      	mov	r6, r0
				 strlen(name));
   2d2e6:	f7dc f84e 	bl	9386 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d2ea:	b280      	uxth	r0, r0
   2d2ec:	9006      	str	r0, [sp, #24]
   2d2ee:	4633      	mov	r3, r6
   2d2f0:	463a      	mov	r2, r7
   2d2f2:	4629      	mov	r1, r5
   2d2f4:	4620      	mov	r0, r4
}
   2d2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d2fa:	f7ff bf8c 	b.w	2d216 <bt_gatt_attr_read.constprop.0>

0002d2fe <read_appearance>:
{
   2d2fe:	b530      	push	{r4, r5, lr}
   2d300:	b085      	sub	sp, #20
   2d302:	4614      	mov	r4, r2
   2d304:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d306:	f7fe ff09 	bl	2c11c <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d30a:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d30c:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d310:	9300      	str	r3, [sp, #0]
   2d312:	4629      	mov	r1, r5
   2d314:	4620      	mov	r0, r4
   2d316:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d31a:	f10d 030e 	add.w	r3, sp, #14
   2d31e:	f7ff ff7a 	bl	2d216 <bt_gatt_attr_read.constprop.0>
}
   2d322:	b005      	add	sp, #20
   2d324:	bd30      	pop	{r4, r5, pc}

0002d326 <z_log_msg_static_create.constprop.0>:
   2d326:	2300      	movs	r3, #0
   2d328:	f7e1 ba9e 	b.w	e868 <z_impl_z_log_msg_static_create>

0002d32c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2d32c:	2a02      	cmp	r2, #2
{
   2d32e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2d330:	d108      	bne.n	2d344 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2d332:	2300      	movs	r3, #0
   2d334:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2d338:	461a      	mov	r2, r3
   2d33a:	7a00      	ldrb	r0, [r0, #8]
   2d33c:	f7e9 ffa4 	bl	17288 <sc_save>
}
   2d340:	2002      	movs	r0, #2
   2d342:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2d344:	f7e9 ff40 	bl	171c8 <sc_clear>
   2d348:	e7fa      	b.n	2d340 <sc_ccc_cfg_write+0x14>

0002d34a <sc_restore_rsp>:
{
   2d34a:	b538      	push	{r3, r4, r5, lr}
   2d34c:	4604      	mov	r4, r0
   2d34e:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2d350:	f7ff fe84 	bl	2d05c <bt_att_fixed_chan_only>
   2d354:	b150      	cbz	r0, 2d36c <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2d356:	4620      	mov	r0, r4
   2d358:	f7e9 fd40 	bl	16ddc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2d35c:	b130      	cbz	r0, 2d36c <sc_restore_rsp+0x22>
   2d35e:	7a03      	ldrb	r3, [r0, #8]
   2d360:	07db      	lsls	r3, r3, #31
   2d362:	d503      	bpl.n	2d36c <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d364:	2101      	movs	r1, #1
   2d366:	300c      	adds	r0, #12
   2d368:	f7ff ff33 	bl	2d1d2 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2d36c:	b955      	cbnz	r5, 2d384 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2d36e:	7a20      	ldrb	r0, [r4, #8]
   2d370:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2d374:	f7e9 fd60 	bl	16e38 <find_sc_cfg>
		if (sc_cfg) {
   2d378:	b120      	cbz	r0, 2d384 <sc_restore_rsp+0x3a>
__ssp_bos_icheck3(memset, void *, int)
   2d37a:	6085      	str	r5, [r0, #8]
}
   2d37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2d380:	f7e9 bf4e 	b.w	17220 <sc_store>
}
   2d384:	bd38      	pop	{r3, r4, r5, pc}

0002d386 <bt_gatt_attr_value_handle>:
{
   2d386:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d388:	4604      	mov	r4, r0
   2d38a:	b910      	cbnz	r0, 2d392 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2d38c:	2000      	movs	r0, #0
}
   2d38e:	b002      	add	sp, #8
   2d390:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d392:	2300      	movs	r3, #0
   2d394:	f88d 3004 	strb.w	r3, [sp, #4]
   2d398:	f642 0303 	movw	r3, #10243	; 0x2803
   2d39c:	6800      	ldr	r0, [r0, #0]
   2d39e:	a901      	add	r1, sp, #4
   2d3a0:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d3a4:	f7fe fd61 	bl	2be6a <bt_uuid_cmp>
   2d3a8:	2800      	cmp	r0, #0
   2d3aa:	d1ef      	bne.n	2d38c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2d3ac:	68e3      	ldr	r3, [r4, #12]
   2d3ae:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2d3b0:	2800      	cmp	r0, #0
   2d3b2:	d1ec      	bne.n	2d38e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2d3b4:	4620      	mov	r0, r4
   2d3b6:	f7ea fab3 	bl	17920 <bt_gatt_attr_get_handle>
   2d3ba:	3001      	adds	r0, #1
   2d3bc:	b280      	uxth	r0, r0
	return handle;
   2d3be:	e7e6      	b.n	2d38e <bt_gatt_attr_value_handle+0x8>

0002d3c0 <bt_gatt_attr_read_chrc>:
{
   2d3c0:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2d3c2:	68cc      	ldr	r4, [r1, #12]
{
   2d3c4:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2d3c6:	79a3      	ldrb	r3, [r4, #6]
{
   2d3c8:	b088      	sub	sp, #32
   2d3ca:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2d3cc:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2d3d0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2d3d2:	f7ff ffd8 	bl	2d386 <bt_gatt_attr_value_handle>
   2d3d6:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2d3da:	6824      	ldr	r4, [r4, #0]
   2d3dc:	7823      	ldrb	r3, [r4, #0]
   2d3de:	b96b      	cbnz	r3, 2d3fc <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2d3e0:	8863      	ldrh	r3, [r4, #2]
   2d3e2:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2d3e6:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2d3e8:	9300      	str	r3, [sp, #0]
   2d3ea:	4631      	mov	r1, r6
   2d3ec:	4628      	mov	r0, r5
   2d3ee:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2d3f2:	ab03      	add	r3, sp, #12
   2d3f4:	f7ff ff0f 	bl	2d216 <bt_gatt_attr_read.constprop.0>
}
   2d3f8:	b008      	add	sp, #32
   2d3fa:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2d3fc:	1c63      	adds	r3, r4, #1
   2d3fe:	f10d 020f 	add.w	r2, sp, #15
   2d402:	3411      	adds	r4, #17
   2d404:	f853 1b04 	ldr.w	r1, [r3], #4
   2d408:	42a3      	cmp	r3, r4
   2d40a:	f842 1b04 	str.w	r1, [r2], #4
   2d40e:	d1f9      	bne.n	2d404 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2d410:	2313      	movs	r3, #19
   2d412:	e7e9      	b.n	2d3e8 <bt_gatt_attr_read_chrc+0x28>

0002d414 <bt_gatt_foreach_attr>:
{
   2d414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2d416:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2d41a:	2300      	movs	r3, #0
   2d41c:	461a      	mov	r2, r3
   2d41e:	9300      	str	r3, [sp, #0]
   2d420:	f7ea fac6 	bl	179b0 <bt_gatt_foreach_attr_type>
}
   2d424:	b005      	add	sp, #20
   2d426:	f85d fb04 	ldr.w	pc, [sp], #4

0002d42a <bt_gatt_check_perm>:
{
   2d42a:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2d42c:	07d4      	lsls	r4, r2, #31
{
   2d42e:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d430:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2d432:	d504      	bpl.n	2d43e <bt_gatt_check_perm+0x14>
   2d434:	f013 0f95 	tst.w	r3, #149	; 0x95
   2d438:	d027      	beq.n	2d48a <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d43a:	6848      	ldr	r0, [r1, #4]
   2d43c:	b328      	cbz	r0, 2d48a <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2d43e:	0790      	lsls	r0, r2, #30
   2d440:	d504      	bpl.n	2d44c <bt_gatt_check_perm+0x22>
   2d442:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2d446:	d022      	beq.n	2d48e <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2d448:	6889      	ldr	r1, [r1, #8]
   2d44a:	b301      	cbz	r1, 2d48e <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2d44c:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2d450:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2d454:	d007      	beq.n	2d466 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2d456:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2d45a:	b90b      	cbnz	r3, 2d460 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2d45c:	2005      	movs	r0, #5
}
   2d45e:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2d460:	7b5b      	ldrb	r3, [r3, #13]
   2d462:	06db      	lsls	r3, r3, #27
   2d464:	d5fa      	bpl.n	2d45c <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2d466:	f014 0f30 	tst.w	r4, #48	; 0x30
   2d46a:	d108      	bne.n	2d47e <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2d46c:	f014 000c 	ands.w	r0, r4, #12
   2d470:	d0f5      	beq.n	2d45e <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2d472:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2d474:	2b00      	cmp	r3, #0
   2d476:	bf14      	ite	ne
   2d478:	2000      	movne	r0, #0
   2d47a:	200f      	moveq	r0, #15
   2d47c:	e7ef      	b.n	2d45e <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2d47e:	4628      	mov	r0, r5
   2d480:	f7ff f8ed 	bl	2c65e <bt_conn_get_security>
   2d484:	2802      	cmp	r0, #2
   2d486:	d8f1      	bhi.n	2d46c <bt_gatt_check_perm+0x42>
   2d488:	e7e8      	b.n	2d45c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2d48a:	2002      	movs	r0, #2
   2d48c:	e7e7      	b.n	2d45e <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2d48e:	2003      	movs	r0, #3
   2d490:	e7e5      	b.n	2d45e <bt_gatt_check_perm+0x34>

0002d492 <bt_gatt_change_aware>:
{
   2d492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d494:	4605      	mov	r5, r0
   2d496:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2d498:	f7e9 fca0 	bl	16ddc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2d49c:	b1d0      	cbz	r0, 2d4d4 <bt_gatt_change_aware+0x42>
   2d49e:	7a03      	ldrb	r3, [r0, #8]
   2d4a0:	07db      	lsls	r3, r3, #31
   2d4a2:	d517      	bpl.n	2d4d4 <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2d4a4:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d4a8:	4620      	mov	r0, r4
   2d4aa:	f7ff fe8f 	bl	2d1cc <atomic_get>
   2d4ae:	f010 0601 	ands.w	r6, r0, #1
   2d4b2:	d10f      	bne.n	2d4d4 <bt_gatt_change_aware+0x42>
	if (!req) {
   2d4b4:	b17f      	cbz	r7, 2d4d6 <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d4b6:	f06f 0102 	mvn.w	r1, #2
   2d4ba:	4620      	mov	r0, r4
   2d4bc:	f7ff fe94 	bl	2d1e8 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d4c0:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2d4c4:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d4c6:	d008      	beq.n	2d4da <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   2d4c8:	f7ff fdca 	bl	2d060 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d4cc:	2101      	movs	r1, #1
   2d4ce:	4620      	mov	r0, r4
   2d4d0:	f7ff fe7f 	bl	2d1d2 <atomic_or>
		return true;
   2d4d4:	2601      	movs	r6, #1
}
   2d4d6:	4630      	mov	r0, r6
   2d4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2d4da:	f7ff fdbf 	bl	2d05c <bt_att_fixed_chan_only>
   2d4de:	2800      	cmp	r0, #0
   2d4e0:	d0f9      	beq.n	2d4d6 <bt_gatt_change_aware+0x44>
   2d4e2:	4628      	mov	r0, r5
   2d4e4:	f7ff fdd1 	bl	2d08a <bt_att_out_of_sync_sent_on_fixed>
   2d4e8:	2800      	cmp	r0, #0
   2d4ea:	d0f4      	beq.n	2d4d6 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d4ec:	f06f 0102 	mvn.w	r1, #2
   2d4f0:	4620      	mov	r0, r4
   2d4f2:	f7ff fe79 	bl	2d1e8 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2d4f6:	4628      	mov	r0, r5
   2d4f8:	e7e6      	b.n	2d4c8 <bt_gatt_change_aware+0x36>

0002d4fa <ccc_delayed_store>:
{
   2d4fa:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2d4fc:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2d500:	4605      	mov	r5, r0
		if (!conn) {
   2d502:	b184      	cbz	r4, 2d526 <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2d504:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2d508:	4631      	mov	r1, r6
   2d50a:	7a20      	ldrb	r0, [r4, #8]
   2d50c:	f7fe fe09 	bl	2c122 <bt_addr_le_is_bonded>
   2d510:	b148      	cbz	r0, 2d526 <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   2d512:	2300      	movs	r3, #0
   2d514:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2d518:	4631      	mov	r1, r6
   2d51a:	7a20      	ldrb	r0, [r4, #8]
   2d51c:	f7eb f914 	bl	18748 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2d520:	4620      	mov	r0, r4
   2d522:	f7e7 fc7b 	bl	14e1c <bt_conn_unref>
}
   2d526:	bd70      	pop	{r4, r5, r6, pc}

0002d528 <smp_pairing_rsp>:
}
   2d528:	2007      	movs	r0, #7
   2d52a:	4770      	bx	lr

0002d52c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d52c:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d530:	4108      	asrs	r0, r1
}
   2d532:	f000 0001 	and.w	r0, r0, #1
   2d536:	4770      	bx	lr

0002d538 <update_keys_check>:
{
   2d538:	4603      	mov	r3, r0
   2d53a:	b510      	push	{r4, lr}
	if (!keys ||
   2d53c:	b1d9      	cbz	r1, 2d576 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2d53e:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2d540:	f010 0f24 	tst.w	r0, #36	; 0x24
   2d544:	d017      	beq.n	2d576 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2d546:	7d1a      	ldrb	r2, [r3, #20]
   2d548:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2d54a:	7b09      	ldrb	r1, [r1, #12]
   2d54c:	42a2      	cmp	r2, r4
   2d54e:	bf28      	it	cs
   2d550:	4622      	movcs	r2, r4
   2d552:	4291      	cmp	r1, r2
   2d554:	d901      	bls.n	2d55a <update_keys_check+0x22>
			return false;
   2d556:	2000      	movs	r0, #0
}
   2d558:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2d55a:	0682      	lsls	r2, r0, #26
   2d55c:	d404      	bmi.n	2d568 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2d55e:	7a18      	ldrb	r0, [r3, #8]
   2d560:	3800      	subs	r0, #0
   2d562:	bf18      	it	ne
   2d564:	2001      	movne	r0, #1
   2d566:	e7f7      	b.n	2d558 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2d568:	2105      	movs	r1, #5
   2d56a:	1d18      	adds	r0, r3, #4
   2d56c:	f7ff ffde 	bl	2d52c <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2d570:	2800      	cmp	r0, #0
   2d572:	d1f4      	bne.n	2d55e <update_keys_check+0x26>
   2d574:	e7ef      	b.n	2d556 <update_keys_check+0x1e>
	return true;
   2d576:	2001      	movs	r0, #1
   2d578:	e7ee      	b.n	2d558 <update_keys_check+0x20>

0002d57a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d57a:	2301      	movs	r3, #1
   2d57c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d57e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d580:	e8d0 2fef 	ldaex	r2, [r0]
   2d584:	401a      	ands	r2, r3
   2d586:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2d58a:	2900      	cmp	r1, #0
   2d58c:	d1f8      	bne.n	2d580 <atomic_clear_bit+0x6>
}
   2d58e:	4770      	bx	lr

0002d590 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d590:	680b      	ldr	r3, [r1, #0]
   2d592:	6003      	str	r3, [r0, #0]
   2d594:	888b      	ldrh	r3, [r1, #4]
   2d596:	8083      	strh	r3, [r0, #4]
   2d598:	798b      	ldrb	r3, [r1, #6]
   2d59a:	7183      	strb	r3, [r0, #6]
   2d59c:	4770      	bx	lr

0002d59e <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2d59e:	2007      	movs	r0, #7
   2d5a0:	4770      	bx	lr

0002d5a2 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2d5a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d5a4:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d5a6:	2200      	movs	r2, #0
   2d5a8:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2d5aa:	4604      	mov	r4, r0
   2d5ac:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d5ae:	460a      	mov	r2, r1
   2d5b0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2d5b4:	2106      	movs	r1, #6
   2d5b6:	f7ff f90b 	bl	2c7d0 <bt_l2cap_send_cb>
   2d5ba:	b128      	cbz	r0, 2d5c8 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2d5bc:	4628      	mov	r0, r5
}
   2d5be:	b003      	add	sp, #12
   2d5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2d5c4:	f7ed bfcc 	b.w	1b560 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d5c8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d5cc:	2300      	movs	r3, #0
   2d5ce:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   2d5d2:	b003      	add	sp, #12
   2d5d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d5d8:	f7f8 bd82 	b.w	260e0 <k_work_reschedule>

0002d5dc <z_log_msg_static_create.constprop.0>:
   2d5dc:	2300      	movs	r3, #0
   2d5de:	f7e1 b943 	b.w	e868 <z_impl_z_log_msg_static_create>

0002d5e2 <smp_chan_get>:
{
   2d5e2:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2d5e4:	2106      	movs	r1, #6
   2d5e6:	f7ff f915 	bl	2c814 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2d5ea:	b918      	cbnz	r0, 2d5f4 <smp_chan_get+0x12>
}
   2d5ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2d5f0:	f7eb ba2c 	b.w	18a4c <smp_chan_get.part.0>
   2d5f4:	38ec      	subs	r0, #236	; 0xec
   2d5f6:	bd08      	pop	{r3, pc}

0002d5f8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d5f8:	2301      	movs	r3, #1
   2d5fa:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d5fc:	e8d0 2fef 	ldaex	r2, [r0]
   2d600:	431a      	orrs	r2, r3
   2d602:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2d606:	2900      	cmp	r1, #0
   2d608:	d1f8      	bne.n	2d5fc <atomic_set_bit+0x4>
}
   2d60a:	4770      	bx	lr

0002d60c <smp_keypress_notif>:
{
   2d60c:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2d60e:	210e      	movs	r1, #14
   2d610:	f7ff fff2 	bl	2d5f8 <atomic_set_bit>
}
   2d614:	2000      	movs	r0, #0
   2d616:	bd08      	pop	{r3, pc}

0002d618 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2d618:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d61a:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2d61c:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d61e:	4628      	mov	r0, r5
   2d620:	2104      	movs	r1, #4
   2d622:	f7ff ff83 	bl	2d52c <atomic_test_bit>
   2d626:	b168      	cbz	r0, 2d644 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2d628:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d62a:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2d62c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d62e:	4608      	mov	r0, r1
   2d630:	f7ff f8cb 	bl	2c7ca <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2d634:	4604      	mov	r4, r0
   2d636:	b940      	cbnz	r0, 2d64a <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2d638:	2104      	movs	r1, #4
   2d63a:	4628      	mov	r0, r5
   2d63c:	f7ff ffdc 	bl	2d5f8 <atomic_set_bit>
}
   2d640:	4620      	mov	r0, r4
   2d642:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2d644:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d648:	e7ef      	b.n	2d62a <smp_create_pdu.constprop.0+0x12>
   2d64a:	2101      	movs	r1, #1
   2d64c:	300c      	adds	r0, #12
   2d64e:	f7ee f8a9 	bl	1b7a4 <net_buf_simple_add>
	hdr->code = op;
   2d652:	7006      	strb	r6, [r0, #0]
	return buf;
   2d654:	e7f4      	b.n	2d640 <smp_create_pdu.constprop.0+0x28>

0002d656 <send_pairing_rsp>:
{
   2d656:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2d658:	2102      	movs	r1, #2
{
   2d65a:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2d65c:	f7ff ffdc 	bl	2d618 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2d660:	4605      	mov	r5, r0
   2d662:	b180      	cbz	r0, 2d686 <send_pairing_rsp+0x30>
   2d664:	2106      	movs	r1, #6
   2d666:	300c      	adds	r0, #12
   2d668:	f7ee f89c 	bl	1b7a4 <net_buf_simple_add>
   2d66c:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   2d670:	2200      	movs	r2, #0
   2d672:	6003      	str	r3, [r0, #0]
   2d674:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2d678:	4629      	mov	r1, r5
   2d67a:	8083      	strh	r3, [r0, #4]
   2d67c:	4620      	mov	r0, r4
   2d67e:	f7ff ff90 	bl	2d5a2 <smp_send.constprop.0>
	return 0;
   2d682:	2000      	movs	r0, #0
}
   2d684:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d686:	2008      	movs	r0, #8
   2d688:	e7fc      	b.n	2d684 <send_pairing_rsp+0x2e>

0002d68a <smp_send_pairing_random>:
{
   2d68a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d68c:	2104      	movs	r1, #4
{
   2d68e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d690:	f7ff ffc2 	bl	2d618 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2d694:	4605      	mov	r5, r0
   2d696:	b1a0      	cbz	r0, 2d6c2 <smp_send_pairing_random+0x38>
   2d698:	2110      	movs	r1, #16
   2d69a:	300c      	adds	r0, #12
   2d69c:	f7ee f882 	bl	1b7a4 <net_buf_simple_add>
   2d6a0:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2d6a4:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2d6a8:	f853 1b04 	ldr.w	r1, [r3], #4
   2d6ac:	4293      	cmp	r3, r2
   2d6ae:	f840 1b04 	str.w	r1, [r0], #4
   2d6b2:	d1f9      	bne.n	2d6a8 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2d6b4:	4620      	mov	r0, r4
   2d6b6:	2200      	movs	r2, #0
   2d6b8:	4629      	mov	r1, r5
   2d6ba:	f7ff ff72 	bl	2d5a2 <smp_send.constprop.0>
	return 0;
   2d6be:	2000      	movs	r0, #0
}
   2d6c0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d6c2:	2008      	movs	r0, #8
   2d6c4:	e7fc      	b.n	2d6c0 <smp_send_pairing_random+0x36>

0002d6c6 <smp_dhkey_check>:
{
   2d6c6:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2d6c8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   2d6cc:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2d6ce:	78db      	ldrb	r3, [r3, #3]
   2d6d0:	2b01      	cmp	r3, #1
   2d6d2:	d119      	bne.n	2d708 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2d6d4:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2d6d6:	1d06      	adds	r6, r0, #4
   2d6d8:	2110      	movs	r1, #16
   2d6da:	4630      	mov	r0, r6
   2d6dc:	f7ff ff4d 	bl	2d57a <atomic_clear_bit>
   2d6e0:	462b      	mov	r3, r5
   2d6e2:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2d6e6:	f105 0110 	add.w	r1, r5, #16
   2d6ea:	f853 0b04 	ldr.w	r0, [r3], #4
   2d6ee:	428b      	cmp	r3, r1
   2d6f0:	f842 0b04 	str.w	r0, [r2], #4
   2d6f4:	d1f9      	bne.n	2d6ea <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2d6f6:	2107      	movs	r1, #7
   2d6f8:	4630      	mov	r0, r6
   2d6fa:	f7ff ff17 	bl	2d52c <atomic_test_bit>
   2d6fe:	b128      	cbz	r0, 2d70c <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2d700:	2109      	movs	r1, #9
   2d702:	4630      	mov	r0, r6
   2d704:	f7ff ff78 	bl	2d5f8 <atomic_set_bit>
}
   2d708:	2000      	movs	r0, #0
   2d70a:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d70c:	210a      	movs	r1, #10
   2d70e:	4630      	mov	r0, r6
   2d710:	f7ff ff0c 	bl	2d52c <atomic_test_bit>
   2d714:	2800      	cmp	r0, #0
   2d716:	d1f3      	bne.n	2d700 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2d718:	4620      	mov	r0, r4
}
   2d71a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2d71e:	f7eb bdab 	b.w	19278 <compute_and_check_and_send_periph_dhcheck>

0002d722 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2d722:	2007      	movs	r0, #7
   2d724:	4770      	bx	lr

0002d726 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d726:	2301      	movs	r3, #1
   2d728:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d72c:	43ca      	mvns	r2, r1
{
   2d72e:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d730:	e8d0 3fef 	ldaex	r3, [r0]
   2d734:	ea03 0402 	and.w	r4, r3, r2
   2d738:	e8c0 4fe5 	stlex	r5, r4, [r0]
   2d73c:	2d00      	cmp	r5, #0
   2d73e:	d1f7      	bne.n	2d730 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2d740:	4219      	tst	r1, r3
}
   2d742:	bf14      	ite	ne
   2d744:	2001      	movne	r0, #1
   2d746:	2000      	moveq	r0, #0
   2d748:	bd30      	pop	{r4, r5, pc}

0002d74a <smp_reset>:
{
   2d74a:	b538      	push	{r3, r4, r5, lr}
   2d74c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d74e:	2500      	movs	r5, #0
   2d750:	1d03      	adds	r3, r0, #4
   2d752:	e8d3 2fef 	ldaex	r2, [r3]
   2d756:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2d75a:	2900      	cmp	r1, #0
   2d75c:	d1f9      	bne.n	2d752 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2d75e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2d762:	f7f8 fcc3 	bl	260ec <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2d766:	7225      	strb	r5, [r4, #8]
   2d768:	e8d4 3fef 	ldaex	r3, [r4]
   2d76c:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2d770:	2a00      	cmp	r2, #0
   2d772:	d1f9      	bne.n	2d768 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2d774:	4620      	mov	r0, r4
}
   2d776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2d77a:	2101      	movs	r1, #1
   2d77c:	f7ff bf3c 	b.w	2d5f8 <atomic_set_bit>

0002d780 <smp_c1>:
{
   2d780:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d782:	b089      	sub	sp, #36	; 0x24
   2d784:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2d788:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2d78a:	7830      	ldrb	r0, [r6, #0]
{
   2d78c:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2d78e:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2d792:	7838      	ldrb	r0, [r7, #0]
   2d794:	f101 0c10 	add.w	ip, r1, #16
   2d798:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2d79c:	6810      	ldr	r0, [r2, #0]
   2d79e:	f8cd 0002 	str.w	r0, [sp, #2]
   2d7a2:	8890      	ldrh	r0, [r2, #4]
   2d7a4:	7992      	ldrb	r2, [r2, #6]
   2d7a6:	f8ad 0006 	strh.w	r0, [sp, #6]
   2d7aa:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2d7ae:	681a      	ldr	r2, [r3, #0]
   2d7b0:	4668      	mov	r0, sp
   2d7b2:	f8cd 2009 	str.w	r2, [sp, #9]
   2d7b6:	889a      	ldrh	r2, [r3, #4]
   2d7b8:	799b      	ldrb	r3, [r3, #6]
   2d7ba:	f8ad 200d 	strh.w	r2, [sp, #13]
   2d7be:	4622      	mov	r2, r4
   2d7c0:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   2d7c4:	f811 3b01 	ldrb.w	r3, [r1], #1
   2d7c8:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   2d7cc:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   2d7ce:	ea83 030e 	eor.w	r3, r3, lr
   2d7d2:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2d7d6:	d1f5      	bne.n	2d7c4 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2d7d8:	4622      	mov	r2, r4
   2d7da:	4621      	mov	r1, r4
   2d7dc:	4628      	mov	r0, r5
   2d7de:	f7fe fe66 	bl	2c4ae <bt_encrypt_le>
	if (err) {
   2d7e2:	4603      	mov	r3, r0
   2d7e4:	bb28      	cbnz	r0, 2d832 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   2d7e6:	9307      	str	r3, [sp, #28]
   2d7e8:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   2d7ea:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2d7ee:	f8d7 0001 	ldr.w	r0, [r7, #1]
   2d7f2:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2d7f6:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2d7fa:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   2d7fc:	f8cd 2016 	str.w	r2, [sp, #22]
   2d800:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   2d804:	f104 0010 	add.w	r0, r4, #16
   2d808:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   2d80c:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   2d80e:	f813 2b01 	ldrb.w	r2, [r3], #1
   2d812:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   2d816:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   2d818:	ea82 0206 	eor.w	r2, r2, r6
   2d81c:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   2d820:	d1f5      	bne.n	2d80e <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   2d822:	4622      	mov	r2, r4
   2d824:	4621      	mov	r1, r4
   2d826:	4628      	mov	r0, r5
}
   2d828:	b009      	add	sp, #36	; 0x24
   2d82a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2d82e:	f7fe be3e 	b.w	2c4ae <bt_encrypt_le>
}
   2d832:	b009      	add	sp, #36	; 0x24
   2d834:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d836 <legacy_pairing_confirm>:
{
   2d836:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d838:	1d07      	adds	r7, r0, #4
{
   2d83a:	4604      	mov	r4, r0
   2d83c:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d83e:	210a      	movs	r1, #10
   2d840:	4638      	mov	r0, r7
   2d842:	f7ff fe73 	bl	2d52c <atomic_test_bit>
   2d846:	bb88      	cbnz	r0, 2d8ac <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2d848:	2104      	movs	r1, #4
   2d84a:	4620      	mov	r0, r4
   2d84c:	f7ff fed4 	bl	2d5f8 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2d850:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2d852:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2d856:	f7ff fedf 	bl	2d618 <smp_create_pdu.constprop.0>
	if (!buf) {
   2d85a:	4605      	mov	r5, r0
   2d85c:	b1c0      	cbz	r0, 2d890 <legacy_pairing_confirm+0x5a>
   2d85e:	2110      	movs	r1, #16
   2d860:	300c      	adds	r0, #12
   2d862:	f7ed ff9f 	bl	1b7a4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2d866:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   2d86a:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2d86c:	9002      	str	r0, [sp, #8]
   2d86e:	9301      	str	r3, [sp, #4]
   2d870:	9600      	str	r6, [sp, #0]
   2d872:	f104 0310 	add.w	r3, r4, #16
   2d876:	f104 0209 	add.w	r2, r4, #9
   2d87a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2d87e:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2d882:	f7ff ff7d 	bl	2d780 <smp_c1>
   2d886:	4606      	mov	r6, r0
   2d888:	b128      	cbz	r0, 2d896 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2d88a:	4628      	mov	r0, r5
   2d88c:	f7ed fe68 	bl	1b560 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2d890:	2008      	movs	r0, #8
}
   2d892:	b005      	add	sp, #20
   2d894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2d896:	4602      	mov	r2, r0
   2d898:	4629      	mov	r1, r5
   2d89a:	4620      	mov	r0, r4
   2d89c:	f7ff fe81 	bl	2d5a2 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2d8a0:	4631      	mov	r1, r6
   2d8a2:	4638      	mov	r0, r7
   2d8a4:	f7ff fe69 	bl	2d57a <atomic_clear_bit>
	return 0;
   2d8a8:	2000      	movs	r0, #0
   2d8aa:	e7f2      	b.n	2d892 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2d8ac:	2100      	movs	r1, #0
   2d8ae:	4638      	mov	r0, r7
   2d8b0:	f7ff fea2 	bl	2d5f8 <atomic_set_bit>
	return 0;
   2d8b4:	e7f8      	b.n	2d8a8 <legacy_pairing_confirm+0x72>

0002d8b6 <bt_smp_request_ltk>:
{
   2d8b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d8ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2d8bc:	4604      	mov	r4, r0
   2d8be:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2d8c2:	f7ff fe8e 	bl	2d5e2 <smp_chan_get>
	if (!smp) {
   2d8c6:	4605      	mov	r5, r0
   2d8c8:	2800      	cmp	r0, #0
   2d8ca:	d07c      	beq.n	2d9c6 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2d8cc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d8d0:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2d8d2:	f1b8 0f00 	cmp.w	r8, #0
   2d8d6:	d128      	bne.n	2d92a <bt_smp_request_ltk+0x74>
   2d8d8:	e9dd 3200 	ldrd	r3, r2, [sp]
   2d8dc:	4313      	orrs	r3, r2
   2d8de:	d124      	bne.n	2d92a <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d8e0:	2103      	movs	r1, #3
   2d8e2:	4630      	mov	r0, r6
   2d8e4:	f7ff fe22 	bl	2d52c <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2d8e8:	b1f8      	cbz	r0, 2d92a <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2d8ea:	2101      	movs	r1, #1
   2d8ec:	4630      	mov	r0, r6
   2d8ee:	f7ff fe1d 	bl	2d52c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d8f2:	b1d0      	cbz	r0, 2d92a <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2d8f4:	7d2c      	ldrb	r4, [r5, #20]
   2d8f6:	7b6b      	ldrb	r3, [r5, #13]
   2d8f8:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2d8fc:	429c      	cmp	r4, r3
   2d8fe:	bf28      	it	cs
   2d900:	461c      	movcs	r4, r3
   2d902:	4622      	mov	r2, r4
   2d904:	4638      	mov	r0, r7
   2d906:	f002 fe1e 	bl	30546 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2d90a:	2c0f      	cmp	r4, #15
   2d90c:	d805      	bhi.n	2d91a <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   2d90e:	4641      	mov	r1, r8
   2d910:	f1c4 0210 	rsb	r2, r4, #16
   2d914:	1938      	adds	r0, r7, r4
   2d916:	f002 fe50 	bl	305ba <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2d91a:	4630      	mov	r0, r6
   2d91c:	2101      	movs	r1, #1
   2d91e:	f7ff fe6b 	bl	2d5f8 <atomic_set_bit>
		return true;
   2d922:	2001      	movs	r0, #1
}
   2d924:	b002      	add	sp, #8
   2d926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2d92a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   2d92e:	b983      	cbnz	r3, 2d952 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2d930:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2d934:	4642      	mov	r2, r8
   2d936:	2020      	movs	r0, #32
   2d938:	7a21      	ldrb	r1, [r4, #8]
   2d93a:	f7ec fd89 	bl	1a450 <bt_keys_find>
   2d93e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   2d942:	b930      	cbnz	r0, 2d952 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2d944:	4642      	mov	r2, r8
   2d946:	2001      	movs	r0, #1
   2d948:	7a21      	ldrb	r1, [r4, #8]
   2d94a:	f7ec fd81 	bl	1a450 <bt_keys_find>
   2d94e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2d952:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d956:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2d95a:	f1b8 0f00 	cmp.w	r8, #0
   2d95e:	d10c      	bne.n	2d97a <bt_smp_request_ltk+0xc4>
   2d960:	e9dd 3200 	ldrd	r3, r2, [sp]
   2d964:	4313      	orrs	r3, r2
   2d966:	d108      	bne.n	2d97a <bt_smp_request_ltk+0xc4>
   2d968:	b300      	cbz	r0, 2d9ac <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d96a:	89c3      	ldrh	r3, [r0, #14]
   2d96c:	069a      	lsls	r2, r3, #26
   2d96e:	d505      	bpl.n	2d97c <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2d970:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d972:	f100 011a 	add.w	r1, r0, #26
   2d976:	4622      	mov	r2, r4
   2d978:	e7c4      	b.n	2d904 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d97a:	b1b8      	cbz	r0, 2d9ac <bt_smp_request_ltk+0xf6>
   2d97c:	89c3      	ldrh	r3, [r0, #14]
   2d97e:	07db      	lsls	r3, r3, #31
   2d980:	d514      	bpl.n	2d9ac <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d982:	2208      	movs	r2, #8
   2d984:	4669      	mov	r1, sp
   2d986:	3040      	adds	r0, #64	; 0x40
   2d988:	f002 fdcd 	bl	30526 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d98c:	b970      	cbnz	r0, 2d9ac <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2d98e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   2d992:	2202      	movs	r2, #2
   2d994:	a908      	add	r1, sp, #32
   2d996:	3048      	adds	r0, #72	; 0x48
   2d998:	f002 fdc5 	bl	30526 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d99c:	4680      	mov	r8, r0
   2d99e:	b928      	cbnz	r0, 2d9ac <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2d9a0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   2d9a4:	7b0c      	ldrb	r4, [r1, #12]
   2d9a6:	314a      	adds	r1, #74	; 0x4a
   2d9a8:	4622      	mov	r2, r4
   2d9aa:	e7ab      	b.n	2d904 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2d9ac:	210f      	movs	r1, #15
   2d9ae:	4630      	mov	r0, r6
   2d9b0:	f7ff fdbc 	bl	2d52c <atomic_test_bit>
   2d9b4:	b120      	cbz	r0, 2d9c0 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2d9b6:	2202      	movs	r2, #2
   2d9b8:	2106      	movs	r1, #6
   2d9ba:	4620      	mov	r0, r4
   2d9bc:	f7e7 fcae 	bl	1531c <bt_conn_security_changed>
	smp_reset(smp);
   2d9c0:	4628      	mov	r0, r5
   2d9c2:	f7ff fec2 	bl	2d74a <smp_reset>
		return false;
   2d9c6:	2000      	movs	r0, #0
   2d9c8:	e7ac      	b.n	2d924 <bt_smp_request_ltk+0x6e>

0002d9ca <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2d9ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d9ce:	4770      	bx	lr

0002d9d0 <bt_smp_dhkey_ready>:
{
   2d9d0:	b570      	push	{r4, r5, r6, lr}
   2d9d2:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2d9d4:	2008      	movs	r0, #8
   2d9d6:	f7ea ff97 	bl	18908 <smp_find>
	if (smp) {
   2d9da:	4605      	mov	r5, r0
   2d9dc:	b1e0      	cbz	r0, 2da18 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2d9de:	1d06      	adds	r6, r0, #4
   2d9e0:	2108      	movs	r1, #8
   2d9e2:	4630      	mov	r0, r6
   2d9e4:	f7ff fdc9 	bl	2d57a <atomic_clear_bit>
	if (!dhkey) {
   2d9e8:	b3bc      	cbz	r4, 2da5a <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2d9ea:	2107      	movs	r1, #7
   2d9ec:	f7ff fdc5 	bl	2d57a <atomic_clear_bit>
   2d9f0:	4623      	mov	r3, r4
   2d9f2:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2d9f6:	f104 0120 	add.w	r1, r4, #32
   2d9fa:	f853 0b04 	ldr.w	r0, [r3], #4
   2d9fe:	428b      	cmp	r3, r1
   2da00:	f842 0b04 	str.w	r0, [r2], #4
   2da04:	d1f9      	bne.n	2d9fa <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2da06:	210a      	movs	r1, #10
   2da08:	4630      	mov	r0, r6
   2da0a:	f7ff fd8f 	bl	2d52c <atomic_test_bit>
   2da0e:	b170      	cbz	r0, 2da2e <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da10:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da12:	4630      	mov	r0, r6
   2da14:	f7ff fdf0 	bl	2d5f8 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2da18:	2007      	movs	r0, #7
   2da1a:	f7ea ff75 	bl	18908 <smp_find>
		if (smp) {
   2da1e:	4604      	mov	r4, r0
   2da20:	b1e8      	cbz	r0, 2da5e <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2da22:	f7eb f843 	bl	18aac <smp_dhkey_generate>
			if (err) {
   2da26:	4601      	mov	r1, r0
   2da28:	b1c8      	cbz	r0, 2da5e <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2da2a:	4620      	mov	r0, r4
   2da2c:	e012      	b.n	2da54 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2da2e:	2110      	movs	r1, #16
   2da30:	4630      	mov	r0, r6
   2da32:	f7ff fd7b 	bl	2d52c <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da36:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2da38:	2800      	cmp	r0, #0
   2da3a:	d1ea      	bne.n	2da12 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2da3c:	4630      	mov	r0, r6
   2da3e:	f7ff fd75 	bl	2d52c <atomic_test_bit>
   2da42:	2800      	cmp	r0, #0
   2da44:	d0e8      	beq.n	2da18 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2da46:	4628      	mov	r0, r5
   2da48:	f7eb fc16 	bl	19278 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2da4c:	4601      	mov	r1, r0
   2da4e:	2800      	cmp	r0, #0
   2da50:	d0e2      	beq.n	2da18 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2da52:	4628      	mov	r0, r5
   2da54:	f7eb ffac 	bl	199b0 <smp_error>
   2da58:	e7de      	b.n	2da18 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2da5a:	210b      	movs	r1, #11
   2da5c:	e7f9      	b.n	2da52 <bt_smp_dhkey_ready+0x82>
}
   2da5e:	bd70      	pop	{r4, r5, r6, pc}

0002da60 <bt_smp_disconnected>:
{
   2da60:	b570      	push	{r4, r5, r6, lr}
   2da62:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2da64:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2da68:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2da6c:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2da6e:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   2da72:	f7f8 fb3b 	bl	260ec <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2da76:	2103      	movs	r1, #3
   2da78:	4620      	mov	r0, r4
   2da7a:	f7ff fd57 	bl	2d52c <atomic_test_bit>
   2da7e:	b1a0      	cbz	r0, 2daaa <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2da80:	2108      	movs	r1, #8
   2da82:	4630      	mov	r0, r6
   2da84:	f7eb ff10 	bl	198a8 <smp_pairing_complete>
	if (keys) {
   2da88:	b13d      	cbz	r5, 2da9a <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2da8a:	89eb      	ldrh	r3, [r5, #14]
   2da8c:	b113      	cbz	r3, 2da94 <bt_smp_disconnected+0x34>
   2da8e:	7b6b      	ldrb	r3, [r5, #13]
   2da90:	079b      	lsls	r3, r3, #30
   2da92:	d502      	bpl.n	2da9a <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2da94:	4628      	mov	r0, r5
   2da96:	f7ec fdc1 	bl	1a61c <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2da9a:	4630      	mov	r0, r6
}
   2da9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2daa0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   2daa4:	2100      	movs	r1, #0
   2daa6:	f002 bd88 	b.w	305ba <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2daaa:	2101      	movs	r1, #1
   2daac:	4620      	mov	r0, r4
   2daae:	f7ff fd3d 	bl	2d52c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2dab2:	2800      	cmp	r0, #0
   2dab4:	d1e4      	bne.n	2da80 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2dab6:	210f      	movs	r1, #15
   2dab8:	4620      	mov	r0, r4
   2daba:	f7ff fd37 	bl	2d52c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2dabe:	2800      	cmp	r0, #0
   2dac0:	d1de      	bne.n	2da80 <bt_smp_disconnected+0x20>
   2dac2:	e7e1      	b.n	2da88 <bt_smp_disconnected+0x28>

0002dac4 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2dac4:	b510      	push	{r4, lr}
   2dac6:	1e43      	subs	r3, r0, #1
   2dac8:	f100 0210 	add.w	r2, r0, #16
   2dacc:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2dace:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2dad2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2dad6:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2dad8:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2dada:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2dadc:	d1f7      	bne.n	2dace <sys_mem_swap.constprop.0+0xa>
	}
}
   2dade:	bd10      	pop	{r4, pc}

0002dae0 <bt_crypto_aes_cmac>:
{
   2dae0:	b570      	push	{r4, r5, r6, lr}
   2dae2:	b0c2      	sub	sp, #264	; 0x108
   2dae4:	460d      	mov	r5, r1
   2dae6:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2dae8:	4601      	mov	r1, r0
   2daea:	aa16      	add	r2, sp, #88	; 0x58
   2daec:	4668      	mov	r0, sp
{
   2daee:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2daf0:	f7fd fe20 	bl	2b734 <tc_cmac_setup>
   2daf4:	b918      	cbnz	r0, 2dafe <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2daf6:	f06f 0004 	mvn.w	r0, #4
}
   2dafa:	b042      	add	sp, #264	; 0x108
   2dafc:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2dafe:	4632      	mov	r2, r6
   2db00:	4629      	mov	r1, r5
   2db02:	4668      	mov	r0, sp
   2db04:	f7fd fe41 	bl	2b78a <tc_cmac_update>
   2db08:	2800      	cmp	r0, #0
   2db0a:	d0f4      	beq.n	2daf6 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2db0c:	4669      	mov	r1, sp
   2db0e:	4620      	mov	r0, r4
   2db10:	f7fd fea5 	bl	2b85e <tc_cmac_final>
   2db14:	2800      	cmp	r0, #0
   2db16:	d0ee      	beq.n	2daf6 <bt_crypto_aes_cmac+0x16>
	return 0;
   2db18:	2000      	movs	r0, #0
   2db1a:	e7ee      	b.n	2dafa <bt_crypto_aes_cmac+0x1a>

0002db1c <bt_crypto_f4>:
{
   2db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2db1e:	460e      	mov	r6, r1
   2db20:	4614      	mov	r4, r2
   2db22:	461d      	mov	r5, r3
   2db24:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2db26:	4601      	mov	r1, r0
   2db28:	2220      	movs	r2, #32
   2db2a:	a805      	add	r0, sp, #20
{
   2db2c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2db2e:	f7ec fed3 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2db32:	2220      	movs	r2, #32
   2db34:	4631      	mov	r1, r6
   2db36:	a80d      	add	r0, sp, #52	; 0x34
   2db38:	f7ec fece 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2db3c:	4621      	mov	r1, r4
   2db3e:	2210      	movs	r2, #16
   2db40:	a801      	add	r0, sp, #4
	m[64] = z;
   2db42:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2db46:	f7ec fec7 	bl	1a8d8 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2db4a:	463b      	mov	r3, r7
   2db4c:	2241      	movs	r2, #65	; 0x41
   2db4e:	a905      	add	r1, sp, #20
   2db50:	a801      	add	r0, sp, #4
   2db52:	f7ff ffc5 	bl	2dae0 <bt_crypto_aes_cmac>
	if (err) {
   2db56:	4604      	mov	r4, r0
   2db58:	b910      	cbnz	r0, 2db60 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2db5a:	4638      	mov	r0, r7
   2db5c:	f7ff ffb2 	bl	2dac4 <sys_mem_swap.constprop.0>
}
   2db60:	4620      	mov	r0, r4
   2db62:	b017      	add	sp, #92	; 0x5c
   2db64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002db66 <bt_crypto_f6>:
{
   2db66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2db6a:	4616      	mov	r6, r2
   2db6c:	461d      	mov	r5, r3
   2db6e:	b097      	sub	sp, #92	; 0x5c
   2db70:	4604      	mov	r4, r0
   2db72:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2db76:	2210      	movs	r2, #16
   2db78:	a805      	add	r0, sp, #20
{
   2db7a:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2db7c:	f7ec feac 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2db80:	2210      	movs	r2, #16
   2db82:	4631      	mov	r1, r6
   2db84:	a809      	add	r0, sp, #36	; 0x24
   2db86:	f7ec fea7 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2db8a:	2210      	movs	r2, #16
   2db8c:	4629      	mov	r1, r5
   2db8e:	a80d      	add	r0, sp, #52	; 0x34
   2db90:	f7ec fea2 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2db94:	2203      	movs	r2, #3
   2db96:	991e      	ldr	r1, [sp, #120]	; 0x78
   2db98:	a811      	add	r0, sp, #68	; 0x44
   2db9a:	f7ec fe9d 	bl	1a8d8 <sys_memcpy_swap>
	m[51] = a1->type;
   2db9e:	4649      	mov	r1, r9
   2dba0:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   2dba4:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2dba8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2dbac:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dbae:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2dbb0:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dbb2:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   2dbb4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dbb8:	f7ec fe8e 	bl	1a8d8 <sys_memcpy_swap>
	m[58] = a2->type;
   2dbbc:	4641      	mov	r1, r8
   2dbbe:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dbc2:	2206      	movs	r2, #6
	m[58] = a2->type;
   2dbc4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2dbc8:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dbcc:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2dbd0:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2dbd4:	888b      	ldrh	r3, [r1, #4]
   2dbd6:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dbda:	f7ec fe7d 	bl	1a8d8 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2dbde:	4621      	mov	r1, r4
   2dbe0:	2210      	movs	r2, #16
   2dbe2:	a801      	add	r0, sp, #4
   2dbe4:	f7ec fe78 	bl	1a8d8 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2dbe8:	463b      	mov	r3, r7
   2dbea:	2241      	movs	r2, #65	; 0x41
   2dbec:	a905      	add	r1, sp, #20
   2dbee:	a801      	add	r0, sp, #4
   2dbf0:	f7ff ff76 	bl	2dae0 <bt_crypto_aes_cmac>
	if (err) {
   2dbf4:	4604      	mov	r4, r0
   2dbf6:	b910      	cbnz	r0, 2dbfe <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2dbf8:	4638      	mov	r0, r7
   2dbfa:	f7ff ff63 	bl	2dac4 <sys_mem_swap.constprop.0>
}
   2dbfe:	4620      	mov	r0, r4
   2dc00:	b017      	add	sp, #92	; 0x5c
   2dc02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002dc06 <lfs_api_sync>:
}
   2dc06:	2000      	movs	r0, #0
   2dc08:	4770      	bx	lr

0002dc0a <get_page_cb>:
{
   2dc0a:	b530      	push	{r4, r5, lr}
	size_t area_start = ctx->area->fa_off;
   2dc0c:	680d      	ldr	r5, [r1, #0]
	size_t info_end = info_start + info->size - 1U;
   2dc0e:	e9d0 4200 	ldrd	r4, r2, [r0]
	size_t area_start = ctx->area->fa_off;
   2dc12:	6868      	ldr	r0, [r5, #4]
	size_t info_end = info_start + info->size - 1U;
   2dc14:	1e53      	subs	r3, r2, #1
   2dc16:	4423      	add	r3, r4
	if (info_end < area_start) {
   2dc18:	4283      	cmp	r3, r0
   2dc1a:	d308      	bcc.n	2dc2e <get_page_cb+0x24>
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   2dc1c:	68ab      	ldr	r3, [r5, #8]
   2dc1e:	3b01      	subs	r3, #1
   2dc20:	4403      	add	r3, r0
	if (info_start > area_end) {
   2dc22:	429c      	cmp	r4, r3
   2dc24:	d805      	bhi.n	2dc32 <get_page_cb+0x28>
	if (info->size > ctx->max_size) {
   2dc26:	684b      	ldr	r3, [r1, #4]
   2dc28:	429a      	cmp	r2, r3
		ctx->max_size = info->size;
   2dc2a:	bf88      	it	hi
   2dc2c:	604a      	strhi	r2, [r1, #4]
		return true;
   2dc2e:	2001      	movs	r0, #1
}
   2dc30:	bd30      	pop	{r4, r5, pc}
		return false;
   2dc32:	2000      	movs	r0, #0
   2dc34:	e7fc      	b.n	2dc30 <get_page_cb+0x26>

0002dc36 <lfs_api_erase>:
{
   2dc36:	b508      	push	{r3, lr}
	int rc = flash_area_erase(fa, offset, c->block_size);
   2dc38:	69c2      	ldr	r2, [r0, #28]
   2dc3a:	6800      	ldr	r0, [r0, #0]
   2dc3c:	4351      	muls	r1, r2
   2dc3e:	f7fd fae7 	bl	2b210 <flash_area_erase>
}
   2dc42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return errno_to_lfs(rc);
   2dc46:	f7ec bf97 	b.w	1ab78 <errno_to_lfs>

0002dc4a <lfs_api_prog>:
{
   2dc4a:	b538      	push	{r3, r4, r5, lr}
   2dc4c:	4614      	mov	r4, r2
	size_t offset = block * c->block_size + off;
   2dc4e:	69c5      	ldr	r5, [r0, #28]
{
   2dc50:	461a      	mov	r2, r3
	int rc = flash_area_write(fa, offset, buffer, size);
   2dc52:	fb05 4101 	mla	r1, r5, r1, r4
   2dc56:	9b04      	ldr	r3, [sp, #16]
   2dc58:	6800      	ldr	r0, [r0, #0]
   2dc5a:	f7fd fac4 	bl	2b1e6 <flash_area_write>
}
   2dc5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return errno_to_lfs(rc);
   2dc62:	f7ec bf89 	b.w	1ab78 <errno_to_lfs>

0002dc66 <lfs_api_read>:
{
   2dc66:	b538      	push	{r3, r4, r5, lr}
   2dc68:	4614      	mov	r4, r2
	size_t offset = block * c->block_size + off;
   2dc6a:	69c5      	ldr	r5, [r0, #28]
{
   2dc6c:	461a      	mov	r2, r3
	int rc = flash_area_read(fa, offset, buffer, size);
   2dc6e:	fb05 4101 	mla	r1, r5, r1, r4
   2dc72:	9b04      	ldr	r3, [sp, #16]
   2dc74:	6800      	ldr	r0, [r0, #0]
   2dc76:	f7fd faa1 	bl	2b1bc <flash_area_read>
}
   2dc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return errno_to_lfs(rc);
   2dc7e:	f7ec bf7b 	b.w	1ab78 <errno_to_lfs>

0002dc82 <info_to_dirent>:
{
   2dc82:	b510      	push	{r4, lr}
   2dc84:	460c      	mov	r4, r1
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   2dc86:	7803      	ldrb	r3, [r0, #0]
   2dc88:	1e9a      	subs	r2, r3, #2
   2dc8a:	4253      	negs	r3, r2
   2dc8c:	4153      	adcs	r3, r2
   2dc8e:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   2dc90:	6843      	ldr	r3, [r0, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2dc92:	f240 1201 	movw	r2, #257	; 0x101
   2dc96:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
   2dc9a:	f100 0108 	add.w	r1, r0, #8
   2dc9e:	1c60      	adds	r0, r4, #1
   2dca0:	f002 fdeb 	bl	3087a <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   2dca4:	2300      	movs	r3, #0
   2dca6:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   2dcaa:	bd10      	pop	{r4, pc}

0002dcac <z_log_msg_static_create.constprop.0>:
   2dcac:	2300      	movs	r3, #0
   2dcae:	f7e0 bddb 	b.w	e868 <z_impl_z_log_msg_static_create>

0002dcb2 <fs_lock>:
   2dcb2:	f04f 32ff 	mov.w	r2, #4294967295
   2dcb6:	f04f 33ff 	mov.w	r3, #4294967295
   2dcba:	30f0      	adds	r0, #240	; 0xf0
   2dcbc:	f7f7 ba0e 	b.w	250dc <z_impl_k_mutex_lock>

0002dcc0 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2dcc0:	f7f7 badc 	b.w	2527c <z_impl_k_mutex_unlock>

0002dcc4 <littlefs_read>:
{
   2dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dcc6:	460e      	mov	r6, r1
   2dcc8:	4617      	mov	r7, r2
   2dcca:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dccc:	6843      	ldr	r3, [r0, #4]
   2dcce:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dcd0:	4628      	mov	r0, r5
   2dcd2:	f7ff ffee 	bl	2dcb2 <fs_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   2dcd6:	463b      	mov	r3, r7
   2dcd8:	4632      	mov	r2, r6
   2dcda:	6821      	ldr	r1, [r4, #0]
   2dcdc:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dce0:	f7f5 fe08 	bl	238f4 <lfs_file_read>
   2dce4:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dce6:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dcea:	f7ff ffe9 	bl	2dcc0 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dcee:	4620      	mov	r0, r4
}
   2dcf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dcf4:	f7ec bf32 	b.w	1ab5c <lfs_to_errno>

0002dcf8 <littlefs_write>:
{
   2dcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dcfa:	460e      	mov	r6, r1
   2dcfc:	4617      	mov	r7, r2
   2dcfe:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd00:	6843      	ldr	r3, [r0, #4]
   2dd02:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd04:	4628      	mov	r0, r5
   2dd06:	f7ff ffd4 	bl	2dcb2 <fs_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   2dd0a:	463b      	mov	r3, r7
   2dd0c:	4632      	mov	r2, r6
   2dd0e:	6821      	ldr	r1, [r4, #0]
   2dd10:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd14:	f7f5 fe2a 	bl	2396c <lfs_file_write>
   2dd18:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd1a:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd1e:	f7ff ffcf 	bl	2dcc0 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dd22:	4620      	mov	r0, r4
}
   2dd24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dd28:	f7ec bf18 	b.w	1ab5c <lfs_to_errno>

0002dd2c <littlefs_seek>:
{
   2dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd2e:	460e      	mov	r6, r1
   2dd30:	4617      	mov	r7, r2
   2dd32:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd34:	6843      	ldr	r3, [r0, #4]
   2dd36:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd38:	4628      	mov	r0, r5
   2dd3a:	f7ff ffba 	bl	2dcb2 <fs_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   2dd3e:	463b      	mov	r3, r7
   2dd40:	4632      	mov	r2, r6
   2dd42:	6821      	ldr	r1, [r4, #0]
   2dd44:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd48:	f7f5 fe2e 	bl	239a8 <lfs_file_seek>
   2dd4c:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd4e:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd52:	f7ff ffb5 	bl	2dcc0 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dd56:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
   2dd5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dd5e:	f7ec befd 	b.w	1ab5c <lfs_to_errno>

0002dd62 <littlefs_tell>:
{
   2dd62:	b538      	push	{r3, r4, r5, lr}
   2dd64:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd66:	6843      	ldr	r3, [r0, #4]
   2dd68:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd6a:	4628      	mov	r0, r5
   2dd6c:	f7ff ffa1 	bl	2dcb2 <fs_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   2dd70:	6821      	ldr	r1, [r4, #0]
   2dd72:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd76:	f7f5 feaf 	bl	23ad8 <lfs_file_tell>
   2dd7a:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd7c:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd80:	f7ff ff9e 	bl	2dcc0 <k_mutex_unlock.isra.0>
}
   2dd84:	4620      	mov	r0, r4
   2dd86:	bd38      	pop	{r3, r4, r5, pc}

0002dd88 <littlefs_truncate>:
{
   2dd88:	b570      	push	{r4, r5, r6, lr}
   2dd8a:	460e      	mov	r6, r1
   2dd8c:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd8e:	6843      	ldr	r3, [r0, #4]
   2dd90:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd92:	4628      	mov	r0, r5
   2dd94:	f7ff ff8d 	bl	2dcb2 <fs_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   2dd98:	4632      	mov	r2, r6
   2dd9a:	6821      	ldr	r1, [r4, #0]
   2dd9c:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dda0:	f7f5 fe20 	bl	239e4 <lfs_file_truncate>
   2dda4:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dda6:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2ddaa:	f7ff ff89 	bl	2dcc0 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2ddae:	4620      	mov	r0, r4
}
   2ddb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2ddb4:	f7ec bed2 	b.w	1ab5c <lfs_to_errno>

0002ddb8 <littlefs_sync>:
{
   2ddb8:	b538      	push	{r3, r4, r5, lr}
   2ddba:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2ddbc:	6843      	ldr	r3, [r0, #4]
   2ddbe:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2ddc0:	4628      	mov	r0, r5
   2ddc2:	f7ff ff76 	bl	2dcb2 <fs_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   2ddc6:	6821      	ldr	r1, [r4, #0]
   2ddc8:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2ddcc:	f7f5 fd74 	bl	238b8 <lfs_file_sync>
   2ddd0:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2ddd2:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2ddd6:	f7ff ff73 	bl	2dcc0 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2ddda:	4620      	mov	r0, r4
}
   2dddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2dde0:	f7ec bebc 	b.w	1ab5c <lfs_to_errno>

0002dde4 <littlefs_close>:
{
   2dde4:	b570      	push	{r4, r5, r6, lr}
   2dde6:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dde8:	6843      	ldr	r3, [r0, #4]
   2ddea:	691e      	ldr	r6, [r3, #16]
	fs_lock(fs);
   2ddec:	4630      	mov	r0, r6
   2ddee:	f7ff ff60 	bl	2dcb2 <fs_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   2ddf2:	6821      	ldr	r1, [r4, #0]
   2ddf4:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2ddf8:	f7f5 fd40 	bl	2387c <lfs_file_close>
   2ddfc:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   2ddfe:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2de02:	f7ff ff5d 	bl	2dcc0 <k_mutex_unlock.isra.0>
	release_file_data(fp);
   2de06:	4620      	mov	r0, r4
   2de08:	f7ec fe94 	bl	1ab34 <release_file_data>
	return lfs_to_errno(ret);
   2de0c:	4628      	mov	r0, r5
}
   2de0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2de12:	f7ec bea3 	b.w	1ab5c <lfs_to_errno>

0002de16 <littlefs_readdir>:
{
   2de16:	b570      	push	{r4, r5, r6, lr}
   2de18:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   2de1a:	6843      	ldr	r3, [r0, #4]
{
   2de1c:	b0c2      	sub	sp, #264	; 0x108
	struct fs_littlefs *fs = dp->mp->fs_data;
   2de1e:	691e      	ldr	r6, [r3, #16]
{
   2de20:	460d      	mov	r5, r1
	fs_lock(fs);
   2de22:	4630      	mov	r0, r6
   2de24:	f7ff ff45 	bl	2dcb2 <fs_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   2de28:	6821      	ldr	r1, [r4, #0]
   2de2a:	466a      	mov	r2, sp
   2de2c:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2de30:	f7f5 ff6c 	bl	23d0c <lfs_dir_read>
   2de34:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2de36:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2de3a:	f7ff ff41 	bl	2dcc0 <k_mutex_unlock.isra.0>
	if (ret > 0) {
   2de3e:	2c00      	cmp	r4, #0
   2de40:	dd0a      	ble.n	2de58 <littlefs_readdir+0x42>
		info_to_dirent(&info, entry);
   2de42:	4629      	mov	r1, r5
   2de44:	4668      	mov	r0, sp
   2de46:	f7ff ff1c 	bl	2dc82 <info_to_dirent>
		ret = 0;
   2de4a:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   2de4c:	4620      	mov	r0, r4
}
   2de4e:	b042      	add	sp, #264	; 0x108
   2de50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2de54:	f7ec be82 	b.w	1ab5c <lfs_to_errno>
	} else if (ret == 0) {
   2de58:	d1f8      	bne.n	2de4c <littlefs_readdir+0x36>
		entry->name[0] = 0;
   2de5a:	706c      	strb	r4, [r5, #1]
   2de5c:	e7f5      	b.n	2de4a <littlefs_readdir+0x34>

0002de5e <littlefs_unlink>:
{
   2de5e:	b538      	push	{r3, r4, r5, lr}
   2de60:	4603      	mov	r3, r0
   2de62:	4608      	mov	r0, r1
	path = fs_impl_strip_prefix(path, mountp);
   2de64:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2de66:	691d      	ldr	r5, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   2de68:	f7ec fe52 	bl	1ab10 <fs_impl_strip_prefix>
   2de6c:	4604      	mov	r4, r0
	fs_lock(fs);
   2de6e:	4628      	mov	r0, r5
   2de70:	f7ff ff1f 	bl	2dcb2 <fs_lock>
	int ret = lfs_remove(&fs->lfs, path);
   2de74:	4621      	mov	r1, r4
   2de76:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2de7a:	f7f5 fb49 	bl	23510 <lfs_remove>
   2de7e:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2de80:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2de84:	f7ff ff1c 	bl	2dcc0 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2de88:	4620      	mov	r0, r4
}
   2de8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2de8e:	f7ec be65 	b.w	1ab5c <lfs_to_errno>

0002de92 <littlefs_rename>:
{
   2de92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de94:	4604      	mov	r4, r0
   2de96:	4608      	mov	r0, r1
	from = fs_impl_strip_prefix(from, mountp);
   2de98:	4621      	mov	r1, r4
{
   2de9a:	4617      	mov	r7, r2
	struct fs_littlefs *fs = mountp->fs_data;
   2de9c:	6925      	ldr	r5, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   2de9e:	f7ec fe37 	bl	1ab10 <fs_impl_strip_prefix>
	to = fs_impl_strip_prefix(to, mountp);
   2dea2:	4621      	mov	r1, r4
	from = fs_impl_strip_prefix(from, mountp);
   2dea4:	4606      	mov	r6, r0
	to = fs_impl_strip_prefix(to, mountp);
   2dea6:	4638      	mov	r0, r7
   2dea8:	f7ec fe32 	bl	1ab10 <fs_impl_strip_prefix>
   2deac:	4604      	mov	r4, r0
	fs_lock(fs);
   2deae:	4628      	mov	r0, r5
   2deb0:	f7ff feff 	bl	2dcb2 <fs_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   2deb4:	4622      	mov	r2, r4
   2deb6:	4631      	mov	r1, r6
   2deb8:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2debc:	f7f5 fb96 	bl	235ec <lfs_rename>
   2dec0:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dec2:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dec6:	f7ff fefb 	bl	2dcc0 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2deca:	4620      	mov	r0, r4
}
   2decc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2ded0:	f7ec be44 	b.w	1ab5c <lfs_to_errno>

0002ded4 <littlefs_mkdir>:
{
   2ded4:	b538      	push	{r3, r4, r5, lr}
   2ded6:	4603      	mov	r3, r0
   2ded8:	4608      	mov	r0, r1
	path = fs_impl_strip_prefix(path, mountp);
   2deda:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2dedc:	691d      	ldr	r5, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   2dede:	f7ec fe17 	bl	1ab10 <fs_impl_strip_prefix>
   2dee2:	4604      	mov	r4, r0
	fs_lock(fs);
   2dee4:	4628      	mov	r0, r5
   2dee6:	f7ff fee4 	bl	2dcb2 <fs_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   2deea:	4621      	mov	r1, r4
   2deec:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2def0:	f7f5 fe0c 	bl	23b0c <lfs_mkdir>
   2def4:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2def6:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2defa:	f7ff fee1 	bl	2dcc0 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2defe:	4620      	mov	r0, r4
}
   2df00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2df04:	f7ec be2a 	b.w	1ab5c <lfs_to_errno>

0002df08 <littlefs_stat>:
{
   2df08:	4603      	mov	r3, r0
   2df0a:	b570      	push	{r4, r5, r6, lr}
   2df0c:	4608      	mov	r0, r1
   2df0e:	b0c2      	sub	sp, #264	; 0x108
	path = fs_impl_strip_prefix(path, mountp);
   2df10:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2df12:	691e      	ldr	r6, [r3, #16]
{
   2df14:	4615      	mov	r5, r2
	path = fs_impl_strip_prefix(path, mountp);
   2df16:	f7ec fdfb 	bl	1ab10 <fs_impl_strip_prefix>
   2df1a:	4604      	mov	r4, r0
	fs_lock(fs);
   2df1c:	4630      	mov	r0, r6
   2df1e:	f7ff fec8 	bl	2dcb2 <fs_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   2df22:	4621      	mov	r1, r4
   2df24:	466a      	mov	r2, sp
   2df26:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2df2a:	f001 fcbd 	bl	2f8a8 <lfs_stat>
   2df2e:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2df30:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2df34:	f7ff fec4 	bl	2dcc0 <k_mutex_unlock.isra.0>
	if (ret >= 0) {
   2df38:	2c00      	cmp	r4, #0
   2df3a:	db04      	blt.n	2df46 <littlefs_stat+0x3e>
		info_to_dirent(&info, entry);
   2df3c:	4629      	mov	r1, r5
   2df3e:	4668      	mov	r0, sp
   2df40:	f7ff fe9f 	bl	2dc82 <info_to_dirent>
		ret = 0;
   2df44:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   2df46:	4620      	mov	r0, r4
}
   2df48:	b042      	add	sp, #264	; 0x108
   2df4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2df4e:	f7ec be05 	b.w	1ab5c <lfs_to_errno>

0002df52 <littlefs_statvfs>:
{
   2df52:	4603      	mov	r3, r0
   2df54:	b570      	push	{r4, r5, r6, lr}
   2df56:	4614      	mov	r4, r2
	struct fs_littlefs *fs = mountp->fs_data;
   2df58:	691e      	ldr	r6, [r3, #16]
{
   2df5a:	4608      	mov	r0, r1
	stat->f_bsize = lfs->cfg->prog_size;
   2df5c:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
	path = fs_impl_strip_prefix(path, mountp);
   2df60:	4619      	mov	r1, r3
	stat->f_bsize = lfs->cfg->prog_size;
   2df62:	6992      	ldr	r2, [r2, #24]
   2df64:	6022      	str	r2, [r4, #0]
	stat->f_frsize = lfs->cfg->block_size;
   2df66:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
   2df6a:	69d2      	ldr	r2, [r2, #28]
   2df6c:	6062      	str	r2, [r4, #4]
	stat->f_blocks = lfs->cfg->block_count;
   2df6e:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
   2df72:	6a12      	ldr	r2, [r2, #32]
   2df74:	60a2      	str	r2, [r4, #8]
	path = fs_impl_strip_prefix(path, mountp);
   2df76:	f7ec fdcb 	bl	1ab10 <fs_impl_strip_prefix>
	fs_lock(fs);
   2df7a:	4630      	mov	r0, r6
   2df7c:	f7ff fe99 	bl	2dcb2 <fs_lock>
	ssize_t ret = lfs_fs_size(lfs);
   2df80:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2df84:	f001 fcb2 	bl	2f8ec <lfs_fs_size>
   2df88:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   2df8a:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2df8e:	f7ff fe97 	bl	2dcc0 <k_mutex_unlock.isra.0>
	if (ret >= 0) {
   2df92:	2d00      	cmp	r5, #0
		stat->f_bfree = stat->f_blocks - ret;
   2df94:	bfa1      	itttt	ge
   2df96:	68a3      	ldrge	r3, [r4, #8]
   2df98:	1b5b      	subge	r3, r3, r5
		ret = 0;
   2df9a:	2500      	movge	r5, #0
		stat->f_bfree = stat->f_blocks - ret;
   2df9c:	60e3      	strge	r3, [r4, #12]
	return lfs_to_errno(ret);
   2df9e:	4628      	mov	r0, r5
}
   2dfa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2dfa4:	f7ec bdda 	b.w	1ab5c <lfs_to_errno>

0002dfa8 <fixed_data_unref>:
}
   2dfa8:	4770      	bx	lr

0002dfaa <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2dfaa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2dfac:	6849      	ldr	r1, [r1, #4]
   2dfae:	6809      	ldr	r1, [r1, #0]
   2dfb0:	f7ed b8ce 	b.w	1b150 <net_buf_alloc_len>

0002dfb4 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2dfb4:	f7f7 ba8a 	b.w	254cc <z_impl_k_queue_get>

0002dfb8 <net_buf_simple_push_u8>:
{
   2dfb8:	b510      	push	{r4, lr}
   2dfba:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2dfbc:	2101      	movs	r1, #1
   2dfbe:	f7ed fb95 	bl	1b6ec <net_buf_simple_push>
	*data = val;
   2dfc2:	7004      	strb	r4, [r0, #0]
}
   2dfc4:	bd10      	pop	{r4, pc}

0002dfc6 <net_buf_simple_pull_le16>:
{
   2dfc6:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2dfc8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2dfca:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2dfcc:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2dfce:	f7ed fbad 	bl	1b72c <net_buf_simple_pull>
}
   2dfd2:	4620      	mov	r0, r4
   2dfd4:	bd10      	pop	{r4, pc}

0002dfd6 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2dfd6:	6802      	ldr	r2, [r0, #0]
   2dfd8:	6880      	ldr	r0, [r0, #8]
}
   2dfda:	1a10      	subs	r0, r2, r0
   2dfdc:	4770      	bx	lr

0002dfde <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2dfde:	8883      	ldrh	r3, [r0, #4]
   2dfe0:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2dfe2:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2dfe4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2dfe6:	6803      	ldr	r3, [r0, #0]
   2dfe8:	1a5b      	subs	r3, r3, r1
}
   2dfea:	1ad0      	subs	r0, r2, r3
   2dfec:	4770      	bx	lr

0002dfee <net_buf_simple_add_mem>:
{
   2dfee:	b538      	push	{r3, r4, r5, lr}
   2dff0:	460d      	mov	r5, r1
   2dff2:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2dff4:	4611      	mov	r1, r2
   2dff6:	f7ed fbd5 	bl	1b7a4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2dffa:	4622      	mov	r2, r4
   2dffc:	4629      	mov	r1, r5
}
   2dffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e002:	f002 baa0 	b.w	30546 <memcpy>

0002e006 <net_buf_simple_add_u8>:
{
   2e006:	b510      	push	{r4, lr}
   2e008:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2e00a:	2101      	movs	r1, #1
   2e00c:	f7ed fbca 	bl	1b7a4 <net_buf_simple_add>
	*u8 = val;
   2e010:	7004      	strb	r4, [r0, #0]
}
   2e012:	bd10      	pop	{r4, pc}

0002e014 <adc_context_on_timer_expired>:
{
   2e014:	b410      	push	{r4}
   2e016:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2e018:	3808      	subs	r0, #8
   2e01a:	e8d0 2fef 	ldaex	r2, [r0]
   2e01e:	1c51      	adds	r1, r2, #1
   2e020:	e8c0 1fe4 	stlex	r4, r1, [r0]
   2e024:	2c00      	cmp	r4, #0
   2e026:	d1f8      	bne.n	2e01a <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2e028:	b912      	cbnz	r2, 2e030 <adc_context_on_timer_expired+0x1c>
}
   2e02a:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2e02c:	f7ed bbfc 	b.w	1b828 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2e030:	f06f 020f 	mvn.w	r2, #15
}
   2e034:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2e036:	669a      	str	r2, [r3, #104]	; 0x68
}
   2e038:	4770      	bx	lr

0002e03a <set_on_state>:
	__asm__ volatile(
   2e03a:	f04f 0320 	mov.w	r3, #32
   2e03e:	f3ef 8211 	mrs	r2, BASEPRI
   2e042:	f383 8812 	msr	BASEPRI_MAX, r3
   2e046:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2e04a:	6803      	ldr	r3, [r0, #0]
   2e04c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e050:	f043 0302 	orr.w	r3, r3, #2
   2e054:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2e056:	f382 8811 	msr	BASEPRI, r2
   2e05a:	f3bf 8f6f 	isb	sy
}
   2e05e:	4770      	bx	lr

0002e060 <async_start>:
{
   2e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e062:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2e064:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2e066:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2e068:	f04f 0520 	mov.w	r5, #32
   2e06c:	f3ef 8611 	mrs	r6, BASEPRI
   2e070:	f385 8812 	msr	BASEPRI_MAX, r5
   2e074:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e078:	250c      	movs	r5, #12
   2e07a:	4369      	muls	r1, r5
   2e07c:	440c      	add	r4, r1
   2e07e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2e082:	f005 0c07 	and.w	ip, r5, #7
   2e086:	f1bc 0f01 	cmp.w	ip, #1
   2e08a:	d10c      	bne.n	2e0a6 <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2e08c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   2e090:	f386 8811 	msr	BASEPRI, r6
   2e094:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2e098:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   2e09c:	6843      	ldr	r3, [r0, #4]
   2e09e:	585b      	ldr	r3, [r3, r1]
   2e0a0:	4798      	blx	r3
	return 0;
   2e0a2:	2000      	movs	r0, #0
}
   2e0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2e0a6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2e0aa:	42af      	cmp	r7, r5
   2e0ac:	f386 8811 	msr	BASEPRI, r6
   2e0b0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2e0b4:	bf0c      	ite	eq
   2e0b6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2e0ba:	f04f 30ff 	movne.w	r0, #4294967295
   2e0be:	e7f1      	b.n	2e0a4 <async_start+0x44>

0002e0c0 <api_start>:
{
   2e0c0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2e0c2:	2480      	movs	r4, #128	; 0x80
   2e0c4:	9400      	str	r4, [sp, #0]
   2e0c6:	f7ff ffcb 	bl	2e060 <async_start>
}
   2e0ca:	b002      	add	sp, #8
   2e0cc:	bd10      	pop	{r4, pc}

0002e0ce <onoff_started_callback>:
	return &data->mgr[type];
   2e0ce:	6900      	ldr	r0, [r0, #16]
   2e0d0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2e0d2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2e0d6:	2100      	movs	r1, #0
   2e0d8:	4710      	bx	r2

0002e0da <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2e0da:	2003      	movs	r0, #3
   2e0dc:	f7f0 becc 	b.w	1ee78 <nrfx_clock_start>

0002e0e0 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2e0e0:	2002      	movs	r0, #2
   2e0e2:	f7f0 bec9 	b.w	1ee78 <nrfx_clock_start>

0002e0e6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2e0e6:	2000      	movs	r0, #0
   2e0e8:	f7f0 bec6 	b.w	1ee78 <nrfx_clock_start>

0002e0ec <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2e0ec:	2003      	movs	r0, #3
   2e0ee:	f7f0 bf41 	b.w	1ef74 <nrfx_clock_stop>

0002e0f2 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2e0f2:	2002      	movs	r0, #2
   2e0f4:	f7f0 bf3e 	b.w	1ef74 <nrfx_clock_stop>

0002e0f8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e0f8:	2000      	movs	r0, #0
   2e0fa:	f7f0 bf3b 	b.w	1ef74 <nrfx_clock_stop>

0002e0fe <blocking_start_callback>:
{
   2e0fe:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e100:	f7f7 ba4e 	b.w	255a0 <z_impl_k_sem_give>

0002e104 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e104:	2280      	movs	r2, #128	; 0x80
   2e106:	f7ed bdf7 	b.w	1bcf8 <stop>

0002e10a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e10a:	6843      	ldr	r3, [r0, #4]
}
   2e10c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e10e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2e110:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2e112:	600b      	str	r3, [r1, #0]
}
   2e114:	4770      	bx	lr

0002e116 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e116:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2e118:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e11c:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2e11e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2e122:	6098      	str	r0, [r3, #8]
}
   2e124:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e126:	60d9      	str	r1, [r3, #12]
   2e128:	4770      	bx	lr

0002e12a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e12a:	6843      	ldr	r3, [r0, #4]
}
   2e12c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e12e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2e130:	6099      	str	r1, [r3, #8]
}
   2e132:	4770      	bx	lr

0002e134 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e134:	6843      	ldr	r3, [r0, #4]
}
   2e136:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e138:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2e13a:	60d9      	str	r1, [r3, #12]
}
   2e13c:	4770      	bx	lr

0002e13e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e13e:	6843      	ldr	r3, [r0, #4]
   2e140:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2e142:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2e144:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2e148:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2e14a:	6090      	str	r0, [r2, #8]
}
   2e14c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e14e:	60d3      	str	r3, [r2, #12]
   2e150:	4770      	bx	lr

0002e152 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2e152:	2200      	movs	r2, #0
   2e154:	2101      	movs	r1, #1
   2e156:	200a      	movs	r0, #10
   2e158:	f7e2 bc7c 	b.w	10a54 <z_arm_irq_priority_set>

0002e15c <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2e15c:	b510      	push	{r4, lr}
	while (*count) {
   2e15e:	680b      	ldr	r3, [r1, #0]
   2e160:	b913      	cbnz	r3, 2e168 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2e162:	4618      	mov	r0, r3
	*buf_len = 0;
   2e164:	6013      	str	r3, [r2, #0]
	return NULL;
   2e166:	e005      	b.n	2e174 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2e168:	6803      	ldr	r3, [r0, #0]
   2e16a:	685c      	ldr	r4, [r3, #4]
   2e16c:	b11c      	cbz	r4, 2e176 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2e16e:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2e170:	6803      	ldr	r3, [r0, #0]
   2e172:	6818      	ldr	r0, [r3, #0]
}
   2e174:	bd10      	pop	{r4, pc}
		++(*current);
   2e176:	3308      	adds	r3, #8
   2e178:	6003      	str	r3, [r0, #0]
		--(*count);
   2e17a:	680b      	ldr	r3, [r1, #0]
   2e17c:	3b01      	subs	r3, #1
   2e17e:	600b      	str	r3, [r1, #0]
   2e180:	e7ed      	b.n	2e15e <spi_context_get_next_buf.constprop.0+0x2>

0002e182 <z_log_msg_static_create.constprop.0>:
   2e182:	2300      	movs	r3, #0
   2e184:	f7e0 bb70 	b.w	e868 <z_impl_z_log_msg_static_create>

0002e188 <_spi_context_cs_control>:
{
   2e188:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2e18a:	6803      	ldr	r3, [r0, #0]
{
   2e18c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2e18e:	b1e3      	cbz	r3, 2e1ca <_spi_context_cs_control+0x42>
   2e190:	6898      	ldr	r0, [r3, #8]
   2e192:	b1d0      	cbz	r0, 2e1ca <_spi_context_cs_control+0x42>
   2e194:	6805      	ldr	r5, [r0, #0]
   2e196:	b1c5      	cbz	r5, 2e1ca <_spi_context_cs_control+0x42>
		if (on) {
   2e198:	b149      	cbz	r1, 2e1ae <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2e19a:	2101      	movs	r1, #1
   2e19c:	f7ee f996 	bl	1c4cc <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2e1a0:	6823      	ldr	r3, [r4, #0]
   2e1a2:	689b      	ldr	r3, [r3, #8]
   2e1a4:	6898      	ldr	r0, [r3, #8]
}
   2e1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2e1aa:	f002 b8b5 	b.w	30318 <z_impl_k_busy_wait>
			if (!force_off &&
   2e1ae:	b912      	cbnz	r2, 2e1b6 <_spi_context_cs_control+0x2e>
   2e1b0:	889b      	ldrh	r3, [r3, #4]
   2e1b2:	04db      	lsls	r3, r3, #19
   2e1b4:	d409      	bmi.n	2e1ca <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2e1b6:	6880      	ldr	r0, [r0, #8]
   2e1b8:	f002 f8ae 	bl	30318 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2e1bc:	6823      	ldr	r3, [r4, #0]
   2e1be:	2100      	movs	r1, #0
   2e1c0:	6898      	ldr	r0, [r3, #8]
}
   2e1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2e1c6:	f7ee b981 	b.w	1c4cc <gpio_pin_set_dt.isra.0>
}
   2e1ca:	bd38      	pop	{r3, r4, r5, pc}

0002e1cc <spi_context_unlock_unconditionally>:
{
   2e1cc:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2e1ce:	2201      	movs	r2, #1
   2e1d0:	2100      	movs	r1, #0
{
   2e1d2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2e1d4:	f7ff ffd8 	bl	2e188 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2e1d8:	69a3      	ldr	r3, [r4, #24]
   2e1da:	b933      	cbnz	r3, 2e1ea <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2e1dc:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2e1de:	f104 0010 	add.w	r0, r4, #16
}
   2e1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e1e6:	f7f7 b9db 	b.w	255a0 <z_impl_k_sem_give>
   2e1ea:	bd10      	pop	{r4, pc}

0002e1ec <spi_nrfx_release>:
{
   2e1ec:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2e1ee:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2e1f0:	6803      	ldr	r3, [r0, #0]
   2e1f2:	428b      	cmp	r3, r1
   2e1f4:	d106      	bne.n	2e204 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2e1f6:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2e1fa:	b934      	cbnz	r4, 2e20a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2e1fc:	f7ff ffe6 	bl	2e1cc <spi_context_unlock_unconditionally>
	return 0;
   2e200:	4620      	mov	r0, r4
}
   2e202:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2e204:	f06f 0015 	mvn.w	r0, #21
   2e208:	e7fb      	b.n	2e202 <spi_nrfx_release+0x16>
		return -EBUSY;
   2e20a:	f06f 000f 	mvn.w	r0, #15
   2e20e:	e7f8      	b.n	2e202 <spi_nrfx_release+0x16>

0002e210 <k_sem_give>:
   2e210:	f7f7 b9c6 	b.w	255a0 <z_impl_k_sem_give>

0002e214 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2e214:	b918      	cbnz	r0, 2e21e <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2e216:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2e21a:	f7ff bff9 	b.w	2e210 <k_sem_give>
}
   2e21e:	4770      	bx	lr

0002e220 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2e220:	f04f 32ff 	mov.w	r2, #4294967295
   2e224:	f04f 33ff 	mov.w	r3, #4294967295
   2e228:	3018      	adds	r0, #24
   2e22a:	f7f7 b9fd 	b.w	25628 <z_impl_k_sem_take>

0002e22e <qspi_trans_lock.isra.0>:
   2e22e:	f04f 32ff 	mov.w	r2, #4294967295
   2e232:	f04f 33ff 	mov.w	r3, #4294967295
   2e236:	f7f7 b9f7 	b.w	25628 <z_impl_k_sem_take>

0002e23a <qspi_nor_write_protection_set>:
{
   2e23a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2e23c:	2200      	movs	r2, #0
   2e23e:	4291      	cmp	r1, r2
   2e240:	bf0c      	ite	eq
   2e242:	2306      	moveq	r3, #6
   2e244:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e246:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2e248:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2e24c:	9203      	str	r2, [sp, #12]
   2e24e:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e252:	f7ee fceb 	bl	1cc2c <qspi_send_cmd>
		ret = -EIO;
   2e256:	2800      	cmp	r0, #0
}
   2e258:	bf18      	it	ne
   2e25a:	f06f 0004 	mvnne.w	r0, #4
   2e25e:	b005      	add	sp, #20
   2e260:	f85d fb04 	ldr.w	pc, [sp], #4

0002e264 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2e264:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2e266:	23ff      	movs	r3, #255	; 0xff
   2e268:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2e26c:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2e270:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2e272:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2e274:	2301      	movs	r3, #1
   2e276:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2e27a:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e27c:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2e27e:	f88d 300c 	strb.w	r3, [sp, #12]
   2e282:	ab01      	add	r3, sp, #4
   2e284:	9204      	str	r2, [sp, #16]
   2e286:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e288:	f7ee fcd0 	bl	1cc2c <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2e28c:	2800      	cmp	r0, #0
   2e28e:	bfa8      	it	ge
   2e290:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2e294:	b007      	add	sp, #28
   2e296:	f85d fb04 	ldr.w	pc, [sp], #4

0002e29a <is_regular_addr_valid>:
{
   2e29a:	b538      	push	{r3, r4, r5, lr}
   2e29c:	4605      	mov	r5, r0
   2e29e:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2e2a0:	f000 fc6a 	bl	2eb78 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2e2a4:	2d00      	cmp	r5, #0
   2e2a6:	db07      	blt.n	2e2b8 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2e2a8:	42a8      	cmp	r0, r5
   2e2aa:	d905      	bls.n	2e2b8 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2e2ac:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2e2ae:	4284      	cmp	r4, r0
   2e2b0:	bf8c      	ite	hi
   2e2b2:	2000      	movhi	r0, #0
   2e2b4:	2001      	movls	r0, #1
}
   2e2b6:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2e2b8:	2000      	movs	r0, #0
   2e2ba:	e7fc      	b.n	2e2b6 <is_regular_addr_valid+0x1c>

0002e2bc <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2e2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e2be:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2e2c0:	2300      	movs	r3, #0
{
   2e2c2:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2e2c4:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2e2c6:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2e2c8:	60a3      	str	r3, [r4, #8]
{
   2e2ca:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2e2cc:	6913      	ldr	r3, [r2, #16]
   2e2ce:	4669      	mov	r1, sp
   2e2d0:	aa01      	add	r2, sp, #4
   2e2d2:	4798      	blx	r3

	while (layout_size--) {
   2e2d4:	9b01      	ldr	r3, [sp, #4]
   2e2d6:	1e5a      	subs	r2, r3, #1
   2e2d8:	9201      	str	r2, [sp, #4]
   2e2da:	b91b      	cbnz	r3, 2e2e4 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2e2dc:	f06f 0015 	mvn.w	r0, #21
}
   2e2e0:	b003      	add	sp, #12
   2e2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2e2e4:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2e2e6:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2e2e8:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2e2ea:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2e2ec:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2e2ee:	b985      	cbnz	r5, 2e312 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2e2f0:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2e2f2:	f8d0 c000 	ldr.w	ip, [r0]
   2e2f6:	4563      	cmp	r3, ip
   2e2f8:	bf28      	it	cs
   2e2fa:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2e2fc:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2e300:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2e302:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2e304:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2e306:	6802      	ldr	r2, [r0, #0]
   2e308:	429a      	cmp	r2, r3
   2e30a:	d806      	bhi.n	2e31a <flash_get_page_info+0x5e>
		layout++;
   2e30c:	3008      	adds	r0, #8
   2e30e:	9000      	str	r0, [sp, #0]
   2e310:	e7e0      	b.n	2e2d4 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2e312:	1a6b      	subs	r3, r5, r1
   2e314:	fbb3 f3f7 	udiv	r3, r3, r7
   2e318:	e7eb      	b.n	2e2f2 <flash_get_page_info+0x36>
			return 0;
   2e31a:	2000      	movs	r0, #0
   2e31c:	e7e0      	b.n	2e2e0 <flash_get_page_info+0x24>

0002e31e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2e31e:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2e320:	2200      	movs	r2, #0
   2e322:	f7ff bfcb 	b.w	2e2bc <flash_get_page_info>

0002e326 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2e326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   2e32a:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   2e32c:	6883      	ldr	r3, [r0, #8]
{
   2e32e:	b086      	sub	sp, #24
   2e330:	4688      	mov	r8, r1
   2e332:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2e334:	691b      	ldr	r3, [r3, #16]
   2e336:	aa02      	add	r2, sp, #8
   2e338:	a901      	add	r1, sp, #4
   2e33a:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   2e33c:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2e33e:	4625      	mov	r5, r4
   2e340:	9b02      	ldr	r3, [sp, #8]
   2e342:	42ab      	cmp	r3, r5
   2e344:	d802      	bhi.n	2e34c <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2e346:	b006      	add	sp, #24
   2e348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2e34c:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   2e34e:	9f01      	ldr	r7, [sp, #4]
   2e350:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   2e354:	687b      	ldr	r3, [r7, #4]
   2e356:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e358:	683a      	ldr	r2, [r7, #0]
   2e35a:	eb0a 0306 	add.w	r3, sl, r6
   2e35e:	42b2      	cmp	r2, r6
   2e360:	d802      	bhi.n	2e368 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2e362:	469a      	mov	sl, r3
   2e364:	3501      	adds	r5, #1
   2e366:	e7eb      	b.n	2e340 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2e368:	4649      	mov	r1, r9
			page_info.start_offset = off;
   2e36a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2e36c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2e36e:	a803      	add	r0, sp, #12
   2e370:	47c0      	blx	r8
   2e372:	2800      	cmp	r0, #0
   2e374:	d0e7      	beq.n	2e346 <flash_page_foreach+0x20>
			off += page_info.size;
   2e376:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e378:	3601      	adds	r6, #1
			off += page_info.size;
   2e37a:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2e37c:	e7ec      	b.n	2e358 <flash_page_foreach+0x32>

0002e37e <uarte_nrfx_config_get>:
{
   2e37e:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2e380:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2e382:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2e386:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e38a:	2000      	movs	r0, #0
   2e38c:	4770      	bx	lr

0002e38e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2e38e:	6843      	ldr	r3, [r0, #4]
   2e390:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e392:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e396:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e39a:	4770      	bx	lr

0002e39c <tx_start>:
{
   2e39c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2e39e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2e3a0:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e3a2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e3a6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e3aa:	2200      	movs	r2, #0
   2e3ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2e3b0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2e3b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2e3b8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e3bc:	6862      	ldr	r2, [r4, #4]
   2e3be:	06d2      	lsls	r2, r2, #27
   2e3c0:	d511      	bpl.n	2e3e6 <tx_start+0x4a>
	if (data->async) {
   2e3c2:	6902      	ldr	r2, [r0, #16]
   2e3c4:	68d2      	ldr	r2, [r2, #12]
   2e3c6:	b12a      	cbz	r2, 2e3d4 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2e3c8:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2e3cc:	f041 0101 	orr.w	r1, r1, #1
   2e3d0:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2e3d4:	2108      	movs	r1, #8
	return config->uarte_regs;
   2e3d6:	6842      	ldr	r2, [r0, #4]
   2e3d8:	6812      	ldr	r2, [r2, #0]
   2e3da:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2e3de:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2e3e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e3e6:	2201      	movs	r2, #1
   2e3e8:	609a      	str	r2, [r3, #8]
}
   2e3ea:	bd10      	pop	{r4, pc}

0002e3ec <user_callback>:
	if (data->async->user_callback) {
   2e3ec:	6903      	ldr	r3, [r0, #16]
   2e3ee:	68da      	ldr	r2, [r3, #12]
   2e3f0:	6813      	ldr	r3, [r2, #0]
   2e3f2:	b10b      	cbz	r3, 2e3f8 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2e3f4:	6852      	ldr	r2, [r2, #4]
   2e3f6:	4718      	bx	r3
}
   2e3f8:	4770      	bx	lr

0002e3fa <notify_uart_rx_rdy>:
{
   2e3fa:	b570      	push	{r4, r5, r6, lr}
   2e3fc:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2e3fe:	6906      	ldr	r6, [r0, #16]
{
   2e400:	4604      	mov	r4, r0
   2e402:	460d      	mov	r5, r1
	struct uart_event evt = {
   2e404:	2214      	movs	r2, #20
   2e406:	2100      	movs	r1, #0
   2e408:	a801      	add	r0, sp, #4
   2e40a:	f002 f8d6 	bl	305ba <memset>
   2e40e:	2302      	movs	r3, #2
   2e410:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2e414:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2e416:	4620      	mov	r0, r4
	struct uart_event evt = {
   2e418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e41a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2e41c:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2e41e:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2e422:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2e424:	f7ff ffe2 	bl	2e3ec <user_callback>
}
   2e428:	b006      	add	sp, #24
   2e42a:	bd70      	pop	{r4, r5, r6, pc}

0002e42c <rx_buf_release>:
{
   2e42c:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2e42e:	680e      	ldr	r6, [r1, #0]
{
   2e430:	4605      	mov	r5, r0
   2e432:	460c      	mov	r4, r1
   2e434:	b086      	sub	sp, #24
	if (*buf) {
   2e436:	b17e      	cbz	r6, 2e458 <rx_buf_release+0x2c>
		struct uart_event evt = {
   2e438:	2214      	movs	r2, #20
   2e43a:	2100      	movs	r1, #0
   2e43c:	a801      	add	r0, sp, #4
   2e43e:	f002 f8bc 	bl	305ba <memset>
   2e442:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2e444:	4628      	mov	r0, r5
   2e446:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2e44a:	f88d 3004 	strb.w	r3, [sp, #4]
   2e44e:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2e450:	f7ff ffcc 	bl	2e3ec <user_callback>
		*buf = NULL;
   2e454:	2300      	movs	r3, #0
   2e456:	6023      	str	r3, [r4, #0]
}
   2e458:	b006      	add	sp, #24
   2e45a:	bd70      	pop	{r4, r5, r6, pc}

0002e45c <notify_rx_disable>:
{
   2e45c:	b510      	push	{r4, lr}
   2e45e:	b086      	sub	sp, #24
   2e460:	4604      	mov	r4, r0
	struct uart_event evt = {
   2e462:	2214      	movs	r2, #20
   2e464:	2100      	movs	r1, #0
   2e466:	a801      	add	r0, sp, #4
   2e468:	f002 f8a7 	bl	305ba <memset>
   2e46c:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2e46e:	4620      	mov	r0, r4
   2e470:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2e472:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2e476:	f7ff ffb9 	bl	2e3ec <user_callback>
}
   2e47a:	b006      	add	sp, #24
   2e47c:	bd10      	pop	{r4, pc}

0002e47e <uarte_nrfx_rx_buf_rsp>:
{
   2e47e:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2e480:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e482:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e484:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2e486:	f04f 0020 	mov.w	r0, #32
   2e48a:	f3ef 8611 	mrs	r6, BASEPRI
   2e48e:	f380 8812 	msr	BASEPRI_MAX, r0
   2e492:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2e496:	68ec      	ldr	r4, [r5, #12]
   2e498:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e49a:	b198      	cbz	r0, 2e4c4 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2e49c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2e49e:	b9a0      	cbnz	r0, 2e4ca <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2e4a0:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2e4a2:	68ec      	ldr	r4, [r5, #12]
   2e4a4:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e4a6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2e4aa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2e4ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2e4b2:	f042 0220 	orr.w	r2, r2, #32
   2e4b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2e4ba:	f386 8811 	msr	BASEPRI, r6
   2e4be:	f3bf 8f6f 	isb	sy
}
   2e4c2:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2e4c4:	f06f 000c 	mvn.w	r0, #12
   2e4c8:	e7f7      	b.n	2e4ba <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2e4ca:	f06f 000f 	mvn.w	r0, #15
   2e4ce:	e7f4      	b.n	2e4ba <uarte_nrfx_rx_buf_rsp+0x3c>

0002e4d0 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2e4d0:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2e4d2:	68d8      	ldr	r0, [r3, #12]
   2e4d4:	b120      	cbz	r0, 2e4e0 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2e4d6:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2e4d8:	68db      	ldr	r3, [r3, #12]
	return 0;
   2e4da:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2e4dc:	605a      	str	r2, [r3, #4]
	return 0;
   2e4de:	4770      	bx	lr
		return -ENOTSUP;
   2e4e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2e4e4:	4770      	bx	lr

0002e4e6 <uarte_nrfx_poll_in>:
{
   2e4e6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2e4e8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2e4ea:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2e4ec:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2e4ee:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2e4f0:	b960      	cbnz	r0, 2e50c <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e4f2:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e4f6:	b164      	cbz	r4, 2e512 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2e4f8:	6992      	ldr	r2, [r2, #24]
   2e4fa:	7812      	ldrb	r2, [r2, #0]
   2e4fc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e4fe:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e502:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e506:	2201      	movs	r2, #1
   2e508:	601a      	str	r2, [r3, #0]
}
   2e50a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2e50c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e510:	e7fb      	b.n	2e50a <uarte_nrfx_poll_in+0x24>
		return -1;
   2e512:	f04f 30ff 	mov.w	r0, #4294967295
   2e516:	e7f8      	b.n	2e50a <uarte_nrfx_poll_in+0x24>

0002e518 <uarte_nrfx_rx_disable>:
{
   2e518:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e51a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e51c:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e51e:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2e520:	68eb      	ldr	r3, [r5, #12]
   2e522:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e524:	b1ba      	cbz	r2, 2e556 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2e526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2e528:	b153      	cbz	r3, 2e540 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2e52a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2e52e:	f023 0320 	bic.w	r3, r3, #32
   2e532:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e536:	2300      	movs	r3, #0
   2e538:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2e53c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2e540:	68e8      	ldr	r0, [r5, #12]
   2e542:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2e544:	f001 ff1a 	bl	3037c <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2e548:	2000      	movs	r0, #0
   2e54a:	68eb      	ldr	r3, [r5, #12]
   2e54c:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e550:	2301      	movs	r3, #1
   2e552:	6063      	str	r3, [r4, #4]
}
   2e554:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e556:	f06f 000d 	mvn.w	r0, #13
   2e55a:	e7fb      	b.n	2e554 <uarte_nrfx_rx_disable+0x3c>

0002e55c <setup_tx_cache>:
{
   2e55c:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2e55e:	68c3      	ldr	r3, [r0, #12]
   2e560:	68da      	ldr	r2, [r3, #12]
   2e562:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2e564:	1a52      	subs	r2, r2, r1
   2e566:	d00f      	beq.n	2e588 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2e568:	2a08      	cmp	r2, #8
   2e56a:	bf28      	it	cs
   2e56c:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2e56e:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2e570:	68c3      	ldr	r3, [r0, #12]
   2e572:	6999      	ldr	r1, [r3, #24]
   2e574:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2e576:	68c3      	ldr	r3, [r0, #12]
   2e578:	6898      	ldr	r0, [r3, #8]
   2e57a:	69d9      	ldr	r1, [r3, #28]
   2e57c:	4401      	add	r1, r0
   2e57e:	6998      	ldr	r0, [r3, #24]
   2e580:	f001 ffe1 	bl	30546 <memcpy>
	return true;
   2e584:	2001      	movs	r0, #1
}
   2e586:	bd08      	pop	{r3, pc}
		return false;
   2e588:	4610      	mov	r0, r2
   2e58a:	e7fc      	b.n	2e586 <setup_tx_cache+0x2a>

0002e58c <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e58c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2e58e:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e590:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2e592:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2e594:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2e598:	b1f1      	cbz	r1, 2e5d8 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2e59a:	2100      	movs	r1, #0
   2e59c:	4618      	mov	r0, r3
   2e59e:	f002 f80c 	bl	305ba <memset>
   2e5a2:	4603      	mov	r3, r0
   2e5a4:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e5a6:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5aa:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e5ac:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2e5ae:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5b2:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2e5b6:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e5ba:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e5bc:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e5c0:	2800      	cmp	r0, #0
   2e5c2:	d0fb      	beq.n	2e5bc <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5c4:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2e5c8:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2e5cc:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2e5d0:	b92b      	cbnz	r3, 2e5de <rx_flush.isra.0+0x52>
			return rx_amount;
   2e5d2:	b2c0      	uxtb	r0, r0
}
   2e5d4:	b002      	add	sp, #8
   2e5d6:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2e5d8:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2e5da:	4669      	mov	r1, sp
   2e5dc:	e7e3      	b.n	2e5a6 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2e5de:	4285      	cmp	r5, r0
   2e5e0:	d1f7      	bne.n	2e5d2 <rx_flush.isra.0+0x46>
   2e5e2:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2e5e4:	4293      	cmp	r3, r2
   2e5e6:	d101      	bne.n	2e5ec <rx_flush.isra.0+0x60>
	return 0;
   2e5e8:	2000      	movs	r0, #0
   2e5ea:	e7f3      	b.n	2e5d4 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2e5ec:	f813 1b01 	ldrb.w	r1, [r3], #1
   2e5f0:	2900      	cmp	r1, #0
   2e5f2:	d0f7      	beq.n	2e5e4 <rx_flush.isra.0+0x58>
   2e5f4:	e7ed      	b.n	2e5d2 <rx_flush.isra.0+0x46>

0002e5f6 <async_uart_release>:
{
   2e5f6:	b570      	push	{r4, r5, r6, lr}
   2e5f8:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2e5fa:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2e5fc:	f04f 0320 	mov.w	r3, #32
   2e600:	f3ef 8611 	mrs	r6, BASEPRI
   2e604:	f383 8812 	msr	BASEPRI_MAX, r3
   2e608:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2e60c:	68d0      	ldr	r0, [r2, #12]
   2e60e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2e612:	ea23 0301 	bic.w	r3, r3, r1
   2e616:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2e61a:	68d5      	ldr	r5, [r2, #12]
   2e61c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2e620:	b973      	cbnz	r3, 2e640 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2e622:	2902      	cmp	r1, #2
   2e624:	d107      	bne.n	2e636 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2e626:	2205      	movs	r2, #5
   2e628:	6860      	ldr	r0, [r4, #4]
   2e62a:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2e62e:	f7ff ffad 	bl	2e58c <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2e632:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e636:	2200      	movs	r2, #0
	return config->uarte_regs;
   2e638:	6863      	ldr	r3, [r4, #4]
   2e63a:	681b      	ldr	r3, [r3, #0]
   2e63c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2e640:	f386 8811 	msr	BASEPRI, r6
   2e644:	f3bf 8f6f 	isb	sy
}
   2e648:	bd70      	pop	{r4, r5, r6, pc}

0002e64a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2e64a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2e64c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e64e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e652:	b940      	cbnz	r0, 2e666 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e654:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e656:	079b      	lsls	r3, r3, #30
   2e658:	d406      	bmi.n	2e668 <is_tx_ready.isra.0+0x1e>
   2e65a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2e65e:	3800      	subs	r0, #0
   2e660:	bf18      	it	ne
   2e662:	2001      	movne	r0, #1
   2e664:	4770      	bx	lr
   2e666:	2001      	movs	r0, #1
}
   2e668:	4770      	bx	lr

0002e66a <start_tx_locked>:
{
   2e66a:	b510      	push	{r4, lr}
   2e66c:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2e66e:	6840      	ldr	r0, [r0, #4]
   2e670:	f7ff ffeb 	bl	2e64a <is_tx_ready.isra.0>
   2e674:	68cb      	ldr	r3, [r1, #12]
   2e676:	b918      	cbnz	r0, 2e680 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2e678:	2201      	movs	r2, #1
   2e67a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2e67e:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2e680:	2200      	movs	r2, #0
   2e682:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2e686:	f04f 32ff 	mov.w	r2, #4294967295
   2e68a:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e68c:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2e68e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e692:	68cb      	ldr	r3, [r1, #12]
}
   2e694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e698:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2e69c:	f7ff be7e 	b.w	2e39c <tx_start>

0002e6a0 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2e6a0:	b510      	push	{r4, lr}
   2e6a2:	4604      	mov	r4, r0
   2e6a4:	2200      	movs	r2, #0
   2e6a6:	2101      	movs	r1, #1
   2e6a8:	200b      	movs	r0, #11
   2e6aa:	f7e2 f9d3 	bl	10a54 <z_arm_irq_priority_set>
   2e6ae:	200b      	movs	r0, #11
   2e6b0:	f7e2 f9a0 	bl	109f4 <arch_irq_enable>
   2e6b4:	4620      	mov	r0, r4
   2e6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e6ba:	f7ef b83f 	b.w	1d73c <uarte_instance_init.constprop.0>

0002e6be <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2e6be:	b510      	push	{r4, lr}
   2e6c0:	4604      	mov	r4, r0
   2e6c2:	2200      	movs	r2, #0
   2e6c4:	2101      	movs	r1, #1
   2e6c6:	2008      	movs	r0, #8
   2e6c8:	f7e2 f9c4 	bl	10a54 <z_arm_irq_priority_set>
   2e6cc:	2008      	movs	r0, #8
   2e6ce:	f7e2 f991 	bl	109f4 <arch_irq_enable>
   2e6d2:	4620      	mov	r0, r4
   2e6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e6d8:	f7ef b830 	b.w	1d73c <uarte_instance_init.constprop.0>

0002e6dc <rx_timeout>:
{
   2e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2e6de:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2e6e0:	68e3      	ldr	r3, [r4, #12]
   2e6e2:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2e6e6:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2e6ea:	bb13      	cbnz	r3, 2e732 <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2e6ec:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2e6ee:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2e6f0:	6873      	ldr	r3, [r6, #4]
   2e6f2:	681b      	ldr	r3, [r3, #0]
   2e6f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2e6f8:	68e3      	ldr	r3, [r4, #12]
   2e6fa:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2e6fe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2e700:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2e702:	bf1f      	itttt	ne
   2e704:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2e706:	68e3      	ldrne	r3, [r4, #12]
   2e708:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2e70a:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2e70c:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2e70e:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2e712:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2e714:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2e716:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2e718:	da0c      	bge.n	2e734 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2e71a:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2e71e:	68e3      	ldr	r3, [r4, #12]
   2e720:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2e724:	4281      	cmp	r1, r0
   2e726:	d80b      	bhi.n	2e740 <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2e728:	2210      	movs	r2, #16
	return config->uarte_regs;
   2e72a:	6873      	ldr	r3, [r6, #4]
   2e72c:	681b      	ldr	r3, [r3, #0]
   2e72e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2e734:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2e738:	eb02 0c01 	add.w	ip, r2, r1
   2e73c:	4584      	cmp	ip, r0
   2e73e:	d904      	bls.n	2e74a <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2e740:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2e742:	2d00      	cmp	r5, #0
   2e744:	ddf0      	ble.n	2e728 <rx_timeout+0x4c>
		clipped = true;
   2e746:	2701      	movs	r7, #1
   2e748:	e005      	b.n	2e756 <rx_timeout+0x7a>
	if (len > 0) {
   2e74a:	2a00      	cmp	r2, #0
   2e74c:	d0ec      	beq.n	2e728 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2e74e:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2e752:	428a      	cmp	r2, r1
   2e754:	da12      	bge.n	2e77c <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2e756:	4629      	mov	r1, r5
   2e758:	4630      	mov	r0, r6
   2e75a:	f7ff fe4e 	bl	2e3fa <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2e75e:	68e2      	ldr	r2, [r4, #12]
   2e760:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2e762:	442b      	add	r3, r5
   2e764:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2e766:	68e2      	ldr	r2, [r4, #12]
   2e768:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2e76a:	442b      	add	r3, r5
   2e76c:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2e76e:	2f00      	cmp	r7, #0
   2e770:	d0da      	beq.n	2e728 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2e772:	68e0      	ldr	r0, [r4, #12]
   2e774:	3080      	adds	r0, #128	; 0x80
   2e776:	f001 fe01 	bl	3037c <z_impl_k_timer_stop>
}
   2e77a:	e7d5      	b.n	2e728 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2e77c:	1a52      	subs	r2, r2, r1
   2e77e:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2e780:	e7d2      	b.n	2e728 <rx_timeout+0x4c>

0002e782 <uarte_nrfx_tx_abort>:
{
   2e782:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e784:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e786:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2e788:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2e78a:	68da      	ldr	r2, [r3, #12]
   2e78c:	6891      	ldr	r1, [r2, #8]
   2e78e:	b151      	cbz	r1, 2e7a6 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2e790:	2400      	movs	r4, #0
   2e792:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2e796:	68d8      	ldr	r0, [r3, #12]
   2e798:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2e79a:	f001 fdef 	bl	3037c <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e79e:	2301      	movs	r3, #1
	return 0;
   2e7a0:	4620      	mov	r0, r4
   2e7a2:	60eb      	str	r3, [r5, #12]
}
   2e7a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e7a6:	f06f 000d 	mvn.w	r0, #13
   2e7aa:	e7fb      	b.n	2e7a4 <uarte_nrfx_tx_abort+0x22>

0002e7ac <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2e7ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2e7ae:	6818      	ldr	r0, [r3, #0]
   2e7b0:	f7ff bfe7 	b.w	2e782 <uarte_nrfx_tx_abort>

0002e7b4 <z_log_msg_static_create.constprop.0>:
   2e7b4:	2300      	movs	r3, #0
   2e7b6:	f7e0 b857 	b.w	e868 <z_impl_z_log_msg_static_create>

0002e7ba <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e7ba:	2000      	movs	r0, #0
   2e7bc:	4770      	bx	lr

0002e7be <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e7be:	b538      	push	{r3, r4, r5, lr}
   2e7c0:	460c      	mov	r4, r1
   2e7c2:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e7c4:	f7e4 ff10 	bl	135e8 <bt_is_ready>
   2e7c8:	b128      	cbz	r0, 2e7d6 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e7ca:	4629      	mov	r1, r5
   2e7cc:	4620      	mov	r0, r4
}
   2e7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2e7d2:	f7e4 b8cf 	b.w	12974 <bt_hci_le_rand>
}
   2e7d6:	f06f 000a 	mvn.w	r0, #10
   2e7da:	bd38      	pop	{r3, r4, r5, pc}

0002e7dc <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2e7dc:	4608      	mov	r0, r1
   2e7de:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2e7e0:	4611      	mov	r1, r2
   2e7e2:	f7f0 f987 	bl	1eaf4 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2e7e6:	2800      	cmp	r0, #0
	}

	return 0;
}
   2e7e8:	bf18      	it	ne
   2e7ea:	f06f 0004 	mvnne.w	r0, #4
   2e7ee:	bd08      	pop	{r3, pc}

0002e7f0 <entropy_psa_crypto_rng_init>:
{
   2e7f0:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2e7f2:	f000 f911 	bl	2ea18 <psa_crypto_init>
		return -EIO;
   2e7f6:	2800      	cmp	r0, #0
}
   2e7f8:	bf18      	it	ne
   2e7fa:	f06f 0004 	mvnne.w	r0, #4
   2e7fe:	bd08      	pop	{r3, pc}

0002e800 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e800:	4770      	bx	lr

0002e802 <sys_clock_cycle_get_32>:
{
   2e802:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2e804:	f7ef fdb6 	bl	1e374 <z_nrf_rtc_timer_read>
}
   2e808:	bd08      	pop	{r3, pc}

0002e80a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e80a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2e80c:	6843      	ldr	r3, [r0, #4]
   2e80e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e810:	7a05      	ldrb	r5, [r0, #8]
   2e812:	6844      	ldr	r4, [r0, #4]
   2e814:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e818:	42a3      	cmp	r3, r4
   2e81a:	d302      	bcc.n	2e822 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2e81c:	f06f 0001 	mvn.w	r0, #1
}
   2e820:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2e822:	795c      	ldrb	r4, [r3, #5]
   2e824:	428c      	cmp	r4, r1
   2e826:	d001      	beq.n	2e82c <pinctrl_lookup_state+0x22>
		(*state)++;
   2e828:	3308      	adds	r3, #8
   2e82a:	e7f0      	b.n	2e80e <pinctrl_lookup_state+0x4>
			return 0;
   2e82c:	2000      	movs	r0, #0
   2e82e:	e7f7      	b.n	2e820 <pinctrl_lookup_state+0x16>

0002e830 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e834:	4615      	mov	r5, r2
   2e836:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e838:	f04f 0901 	mov.w	r9, #1
   2e83c:	b085      	sub	sp, #20
   2e83e:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e842:	45d0      	cmp	r8, sl
   2e844:	d103      	bne.n	2e84e <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2e846:	2000      	movs	r0, #0
}
   2e848:	b005      	add	sp, #20
   2e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e84e:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2e852:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e856:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2e85a:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2e85c:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2e860:	bf08      	it	eq
   2e862:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2e866:	2b22      	cmp	r3, #34	; 0x22
   2e868:	f200 8091 	bhi.w	2e98e <pinctrl_configure_pins+0x15e>
   2e86c:	e8df f003 	tbb	[pc, r3]
   2e870:	38231e12 	.word	0x38231e12
   2e874:	8f383426 	.word	0x8f383426
   2e878:	3b8f8f8f 	.word	0x3b8f8f8f
   2e87c:	8f8f8f65 	.word	0x8f8f8f65
   2e880:	8f8f8f8f 	.word	0x8f8f8f8f
   2e884:	71688f8f 	.word	0x71688f8f
   2e888:	8f8f7774 	.word	0x8f8f7774
   2e88c:	83807a8f 	.word	0x83807a8f
   2e890:	8986      	.short	0x8986
   2e892:	8c          	.byte	0x8c
   2e893:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2e894:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e898:	a803      	add	r0, sp, #12
   2e89a:	9403      	str	r4, [sp, #12]
   2e89c:	f7ef ffa2 	bl	1e7e4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e8a0:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2e8a2:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e8a4:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2e8a8:	6083      	str	r3, [r0, #8]
   2e8aa:	e002      	b.n	2e8b2 <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   2e8ac:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e8b0:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   2e8b2:	46b3      	mov	fp, r6
   2e8b4:	e01e      	b.n	2e8f4 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   2e8b6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2e8ba:	e7ed      	b.n	2e898 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e8bc:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2e8be:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e8c2:	a803      	add	r0, sp, #12
   2e8c4:	9403      	str	r4, [sp, #12]
   2e8c6:	f7ef ff8d 	bl	1e7e4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e8ca:	9b03      	ldr	r3, [sp, #12]
   2e8cc:	f04f 0b01 	mov.w	fp, #1
   2e8d0:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2e8d4:	60c3      	str	r3, [r0, #12]
   2e8d6:	e00d      	b.n	2e8f4 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2e8d8:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2e8dc:	2601      	movs	r6, #1
   2e8de:	e7f0      	b.n	2e8c2 <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2e8e0:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2e8e4:	e7e4      	b.n	2e8b0 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2e8e6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2e8ea:	2f00      	cmp	r7, #0
   2e8ec:	d1e0      	bne.n	2e8b0 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e8ee:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   2e8f0:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e8f2:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e8f4:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e8f8:	a803      	add	r0, sp, #12
   2e8fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e8fe:	2a00      	cmp	r2, #0
   2e900:	bf1c      	itt	ne
   2e902:	2601      	movne	r6, #1
   2e904:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e908:	9301      	str	r3, [sp, #4]
   2e90a:	9403      	str	r4, [sp, #12]
   2e90c:	f7ef ff6a 	bl	1e7e4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e910:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e912:	9b01      	ldr	r3, [sp, #4]
   2e914:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e918:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e91c:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2e920:	023b      	lsls	r3, r7, #8
   2e922:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2e926:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e92a:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2e92e:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2e930:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2e934:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e938:	e783      	b.n	2e842 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2e93a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2e93e:	e7d4      	b.n	2e8ea <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2e940:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2e944:	f8da 3000 	ldr.w	r3, [sl]
   2e948:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2e94c:	2b00      	cmp	r3, #0
   2e94e:	d0c5      	beq.n	2e8dc <pinctrl_configure_pins+0xac>
   2e950:	e7a2      	b.n	2e898 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2e952:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2e956:	e7f5      	b.n	2e944 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2e958:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2e95c:	e7f2      	b.n	2e944 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2e95e:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2e962:	e7ef      	b.n	2e944 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2e964:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e968:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e96a:	f04f 0b00 	mov.w	fp, #0
   2e96e:	e7c1      	b.n	2e8f4 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2e970:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2e974:	e790      	b.n	2e898 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2e976:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2e97a:	e7f5      	b.n	2e968 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2e97c:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2e980:	e7f2      	b.n	2e968 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2e982:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2e986:	e7ef      	b.n	2e968 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2e988:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2e98c:	e7ec      	b.n	2e968 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2e98e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e992:	e759      	b.n	2e848 <pinctrl_configure_pins+0x18>

0002e994 <mbox_nrf_register_callback>:
{
   2e994:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2e996:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2e998:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2e99a:	bf9f      	itttt	ls
   2e99c:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2e9a0:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2e9a4:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2e9a6:	2000      	movls	r0, #0
		return -EINVAL;
   2e9a8:	bf88      	it	hi
   2e9aa:	f06f 0015 	mvnhi.w	r0, #21
}
   2e9ae:	bd10      	pop	{r4, pc}

0002e9b0 <mbox_nrf_mtu_get>:
}
   2e9b0:	2000      	movs	r0, #0
   2e9b2:	4770      	bx	lr

0002e9b4 <mbox_nrf_max_channels_get>:
}
   2e9b4:	2010      	movs	r0, #16
   2e9b6:	4770      	bx	lr

0002e9b8 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2e9b8:	2000      	movs	r0, #0
   2e9ba:	4770      	bx	lr

0002e9bc <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2e9bc:	2300      	movs	r3, #0
{
   2e9be:	b570      	push	{r4, r5, r6, lr}
   2e9c0:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2e9c2:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2e9c6:	ab03      	add	r3, sp, #12
   2e9c8:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2e9ca:	2304      	movs	r3, #4
{
   2e9cc:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2e9ce:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2e9d0:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2e9d2:	b169      	cbz	r1, 2e9f0 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2e9d4:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2e9d6:	680b      	ldr	r3, [r1, #0]
   2e9d8:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2e9da:	684b      	ldr	r3, [r1, #4]
   2e9dc:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2e9de:	2101      	movs	r1, #1
   2e9e0:	2041      	movs	r0, #65	; 0x41
   2e9e2:	f7f0 f8c5 	bl	1eb70 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2e9e6:	1e05      	subs	r5, r0, #0
   2e9e8:	dc04      	bgt.n	2e9f4 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2e9ea:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2e9ec:	b008      	add	sp, #32
   2e9ee:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2e9f0:	2601      	movs	r6, #1
   2e9f2:	e7f4      	b.n	2e9de <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2e9f4:	1e23      	subs	r3, r4, #0
   2e9f6:	bf18      	it	ne
   2e9f8:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2e9fa:	2100      	movs	r1, #0
   2e9fc:	e9cd 4300 	strd	r4, r3, [sp]
   2ea00:	aa04      	add	r2, sp, #16
   2ea02:	4633      	mov	r3, r6
   2ea04:	f7f0 f898 	bl	1eb38 <psa_call>
   2ea08:	4604      	mov	r4, r0
    psa_close(handle);
   2ea0a:	4628      	mov	r0, r5
   2ea0c:	f7f0 f8be 	bl	1eb8c <psa_close>
    if (status < PSA_SUCCESS) {
   2ea10:	2c00      	cmp	r4, #0
   2ea12:	dbea      	blt.n	2e9ea <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2ea14:	4620      	mov	r0, r4
   2ea16:	e7e9      	b.n	2e9ec <tfm_platform_ioctl+0x30>

0002ea18 <psa_crypto_init>:
}
   2ea18:	2000      	movs	r0, #0
   2ea1a:	4770      	bx	lr

0002ea1c <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2ea1c:	b510      	push	{r4, lr}
   2ea1e:	b088      	sub	sp, #32
   2ea20:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2ea22:	ab05      	add	r3, sp, #20
   2ea24:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2ea26:	230c      	movs	r3, #12
   2ea28:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2ea2a:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2ea2c:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2ea30:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2ea34:	eb0d 0103 	add.w	r1, sp, r3
   2ea38:	aa03      	add	r2, sp, #12
   2ea3a:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   2ea3c:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2ea40:	f7ff ffbc 	bl	2e9bc <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2ea44:	9b00      	ldr	r3, [sp, #0]
   2ea46:	6023      	str	r3, [r4, #0]

	return ret;
}
   2ea48:	b008      	add	sp, #32
   2ea4a:	bd10      	pop	{r4, pc}

0002ea4c <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2ea4c:	2300      	movs	r3, #0
{
   2ea4e:	b510      	push	{r4, lr}
   2ea50:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2ea52:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   2ea56:	ab05      	add	r3, sp, #20
   2ea58:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2ea5a:	230c      	movs	r3, #12
   2ea5c:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2ea5e:	2304      	movs	r3, #4
{
   2ea60:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2ea62:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2ea64:	aa03      	add	r2, sp, #12
   2ea66:	eb0d 0103 	add.w	r1, sp, r3
   2ea6a:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   2ea6c:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2ea6e:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2ea72:	f7ff ffa3 	bl	2e9bc <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2ea76:	9b00      	ldr	r3, [sp, #0]
   2ea78:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2ea7a:	b008      	add	sp, #32
   2ea7c:	bd10      	pop	{r4, pc}

0002ea7e <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2ea7e:	f7f0 b893 	b.w	1eba8 <SystemCoreClockUpdate>

0002ea82 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2ea82:	4700      	bx	r0

0002ea84 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2ea84:	f001 bc48 	b.w	30318 <z_impl_k_busy_wait>

0002ea88 <nrf_gpio_pin_present_check>:
    switch (port)
   2ea88:	0943      	lsrs	r3, r0, #5
   2ea8a:	d00b      	beq.n	2eaa4 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2ea8c:	2b01      	cmp	r3, #1
   2ea8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ea92:	bf18      	it	ne
   2ea94:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2ea96:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2ea9a:	fa23 f000 	lsr.w	r0, r3, r0
}
   2ea9e:	f000 0001 	and.w	r0, r0, #1
   2eaa2:	4770      	bx	lr
    switch (port)
   2eaa4:	f04f 33ff 	mov.w	r3, #4294967295
   2eaa8:	e7f5      	b.n	2ea96 <nrf_gpio_pin_present_check+0xe>

0002eaaa <pin_is_task_output>:
{
   2eaaa:	b508      	push	{r3, lr}
   2eaac:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2eaae:	f7f0 fafd 	bl	1f0ac <pin_is_output>
   2eab2:	b110      	cbz	r0, 2eaba <pin_is_task_output+0x10>
   2eab4:	4610      	mov	r0, r2
   2eab6:	f7f0 fae3 	bl	1f080 <pin_in_use_by_te>
}
   2eaba:	f000 0001 	and.w	r0, r0, #1
   2eabe:	bd08      	pop	{r3, pc}

0002eac0 <nrf_gpio_reconfigure>:
{
   2eac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2eac4:	4617      	mov	r7, r2
   2eac6:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2eaca:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2eacc:	a801      	add	r0, sp, #4
{
   2eace:	460c      	mov	r4, r1
   2ead0:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ead2:	f7f0 fb6f 	bl	1f1b4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ead6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2ead8:	1e39      	subs	r1, r7, #0
   2eada:	bf18      	it	ne
   2eadc:	2101      	movne	r1, #1
   2eade:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eae2:	1e23      	subs	r3, r4, #0
   2eae4:	bf18      	it	ne
   2eae6:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eae8:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eaea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eaee:	bf14      	ite	ne
   2eaf0:	210c      	movne	r1, #12
   2eaf2:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2eaf4:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2eaf6:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2eafa:	bf14      	ite	ne
   2eafc:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   2eb00:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2eb02:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eb06:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2eb0a:	bf14      	ite	ne
   2eb0c:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2eb10:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2eb12:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eb16:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2eb18:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2eb1c:	b104      	cbz	r4, 2eb20 <nrf_gpio_reconfigure+0x60>
   2eb1e:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2eb20:	b10f      	cbz	r7, 2eb26 <nrf_gpio_reconfigure+0x66>
   2eb22:	783f      	ldrb	r7, [r7, #0]
   2eb24:	007f      	lsls	r7, r7, #1
   2eb26:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2eb28:	b10e      	cbz	r6, 2eb2e <nrf_gpio_reconfigure+0x6e>
   2eb2a:	7836      	ldrb	r6, [r6, #0]
   2eb2c:	00b6      	lsls	r6, r6, #2
   2eb2e:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2eb30:	b18d      	cbz	r5, 2eb56 <nrf_gpio_reconfigure+0x96>
   2eb32:	7829      	ldrb	r1, [r5, #0]
   2eb34:	0209      	lsls	r1, r1, #8
   2eb36:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2eb38:	f1b8 0f00 	cmp.w	r8, #0
   2eb3c:	d003      	beq.n	2eb46 <nrf_gpio_reconfigure+0x86>
   2eb3e:	f898 8000 	ldrb.w	r8, [r8]
   2eb42:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2eb46:	4321      	orrs	r1, r4
   2eb48:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2eb4c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2eb50:	b002      	add	sp, #8
   2eb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2eb56:	4629      	mov	r1, r5
   2eb58:	e7ed      	b.n	2eb36 <nrf_gpio_reconfigure+0x76>

0002eb5a <nrf_gpio_cfg_sense_set>:
{
   2eb5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2eb5c:	f10d 030f 	add.w	r3, sp, #15
   2eb60:	9301      	str	r3, [sp, #4]
   2eb62:	2300      	movs	r3, #0
{
   2eb64:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2eb68:	461a      	mov	r2, r3
   2eb6a:	4619      	mov	r1, r3
   2eb6c:	9300      	str	r3, [sp, #0]
   2eb6e:	f7ff ffa7 	bl	2eac0 <nrf_gpio_reconfigure>
}
   2eb72:	b005      	add	sp, #20
   2eb74:	f85d fb04 	ldr.w	pc, [sp], #4

0002eb78 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2eb78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2eb7c:	4770      	bx	lr

0002eb7e <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2eb7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2eb82:	4770      	bx	lr

0002eb84 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2eb84:	f44f 7080 	mov.w	r0, #256	; 0x100
   2eb88:	4770      	bx	lr

0002eb8a <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   2eb8a:	2100      	movs	r1, #0
   2eb8c:	f7f1 b864 	b.w	1fc58 <nrf_gpio_cfg.constprop.0>

0002eb90 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2eb90:	2302      	movs	r3, #2
   2eb92:	f7f0 bf9d 	b.w	1fad0 <qspi_xfer>

0002eb96 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2eb96:	2303      	movs	r3, #3
   2eb98:	f7f0 bf9a 	b.w	1fad0 <qspi_xfer>

0002eb9c <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2eb9c:	2100      	movs	r1, #0
   2eb9e:	2002      	movs	r0, #2
   2eba0:	f7f1 babc 	b.w	2011c <nrfx_qspi_erase>

0002eba4 <nrf_gpio_pin_clear>:
{
   2eba4:	b507      	push	{r0, r1, r2, lr}
   2eba6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2eba8:	a801      	add	r0, sp, #4
   2ebaa:	f7f1 fb31 	bl	20210 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2ebae:	2301      	movs	r3, #1
   2ebb0:	9a01      	ldr	r2, [sp, #4]
   2ebb2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2ebb4:	60c3      	str	r3, [r0, #12]
}
   2ebb6:	b003      	add	sp, #12
   2ebb8:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebbc <nrf_gpio_pin_set>:
{
   2ebbc:	b507      	push	{r0, r1, r2, lr}
   2ebbe:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ebc0:	a801      	add	r0, sp, #4
   2ebc2:	f7f1 fb25 	bl	20210 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ebc6:	2301      	movs	r3, #1
   2ebc8:	9a01      	ldr	r2, [sp, #4]
   2ebca:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2ebcc:	6083      	str	r3, [r0, #8]
}
   2ebce:	b003      	add	sp, #12
   2ebd0:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebd4 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   2ebd4:	7f83      	ldrb	r3, [r0, #30]
   2ebd6:	075a      	lsls	r2, r3, #29
   2ebd8:	d40b      	bmi.n	2ebf2 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ebda:	7fc0      	ldrb	r0, [r0, #31]
   2ebdc:	28ff      	cmp	r0, #255	; 0xff
   2ebde:	d008      	beq.n	2ebf2 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   2ebe0:	079b      	lsls	r3, r3, #30
   2ebe2:	bf58      	it	pl
   2ebe4:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2ebe8:	b909      	cbnz	r1, 2ebee <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   2ebea:	f7ff bfdb 	b.w	2eba4 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2ebee:	f7ff bfe5 	b.w	2ebbc <nrf_gpio_pin_set>
}
   2ebf2:	4770      	bx	lr

0002ebf4 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2ebf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ebf8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ebfa:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2ebfc:	4698      	mov	r8, r3
   2ebfe:	460f      	mov	r7, r1
   2ec00:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec02:	f7f1 fb05 	bl	20210 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec06:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2ec08:	f89d 4020 	ldrb.w	r4, [sp, #32]
   2ec0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2ec10:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec12:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ec16:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   2ec1a:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec1e:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ec22:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2ec26:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   2ec28:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   2ec2c:	b002      	add	sp, #8
   2ec2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ec32 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2ec32:	1c43      	adds	r3, r0, #1
{
   2ec34:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2ec36:	d005      	beq.n	2ec44 <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   2ec38:	2300      	movs	r3, #0
   2ec3a:	2201      	movs	r2, #1
   2ec3c:	4619      	mov	r1, r3
   2ec3e:	9300      	str	r3, [sp, #0]
   2ec40:	f7ff ffd8 	bl	2ebf4 <nrf_gpio_cfg.constprop.0>
}
   2ec44:	b003      	add	sp, #12
   2ec46:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec4a <metal_device_open>:
{
   2ec4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ec4c:	460c      	mov	r4, r1
   2ec4e:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2ec50:	4606      	mov	r6, r0
   2ec52:	b918      	cbnz	r0, 2ec5c <metal_device_open+0x12>
		return -EINVAL;
   2ec54:	f06f 0015 	mvn.w	r0, #21
}
   2ec58:	b002      	add	sp, #8
   2ec5a:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2ec5c:	f7da fb93 	bl	9386 <strlen>
   2ec60:	2800      	cmp	r0, #0
   2ec62:	d0f7      	beq.n	2ec54 <metal_device_open+0xa>
   2ec64:	2c00      	cmp	r4, #0
   2ec66:	d0f5      	beq.n	2ec54 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   2ec68:	4620      	mov	r0, r4
   2ec6a:	f7da fb8c 	bl	9386 <strlen>
   2ec6e:	2800      	cmp	r0, #0
   2ec70:	d0f0      	beq.n	2ec54 <metal_device_open+0xa>
   2ec72:	2d00      	cmp	r5, #0
   2ec74:	d0ee      	beq.n	2ec54 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   2ec76:	4630      	mov	r0, r6
   2ec78:	a901      	add	r1, sp, #4
   2ec7a:	f7f1 fddf 	bl	2083c <metal_bus_find>
	if (error)
   2ec7e:	2800      	cmp	r0, #0
   2ec80:	d1ea      	bne.n	2ec58 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2ec82:	9801      	ldr	r0, [sp, #4]
   2ec84:	6883      	ldr	r3, [r0, #8]
   2ec86:	b12b      	cbz	r3, 2ec94 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2ec88:	462a      	mov	r2, r5
   2ec8a:	4621      	mov	r1, r4
}
   2ec8c:	b002      	add	sp, #8
   2ec8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2ec92:	4718      	bx	r3
		return -ENODEV;
   2ec94:	f06f 0012 	mvn.w	r0, #18
   2ec98:	e7de      	b.n	2ec58 <metal_device_open+0xe>

0002ec9a <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   2ec9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ec9e:	b089      	sub	sp, #36	; 0x24
   2eca0:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2eca2:	4604      	mov	r4, r0
   2eca4:	4689      	mov	r9, r1
   2eca6:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   2eca8:	2100      	movs	r1, #0
   2ecaa:	2220      	movs	r2, #32
   2ecac:	4668      	mov	r0, sp
{
   2ecae:	461f      	mov	r7, r3
   2ecb0:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2ecb2:	f001 fc82 	bl	305ba <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   2ecb6:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   2ecb8:	bf97      	itett	ls
   2ecba:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   2ecbc:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   2ecc0:	40b3      	lslls	r3, r6
   2ecc2:	f103 33ff 	addls.w	r3, r3, #4294967295
   2ecc6:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   2ecc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   2ecca:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   2ecce:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   2ecd2:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   2ecd4:	3418      	adds	r4, #24
   2ecd6:	b145      	cbz	r5, 2ecea <metal_io_init+0x50>
   2ecd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2ecda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2ecdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2ece0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   2ece4:	b009      	add	sp, #36	; 0x24
   2ece6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   2ecea:	466d      	mov	r5, sp
   2ecec:	e7f4      	b.n	2ecd8 <metal_io_init+0x3e>

0002ecee <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2ecee:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ecf0:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ecf2:	1c66      	adds	r6, r4, #1
   2ecf4:	d031      	beq.n	2ed5a <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ecf6:	6885      	ldr	r5, [r0, #8]
   2ecf8:	42a9      	cmp	r1, r5
   2ecfa:	d22e      	bcs.n	2ed5a <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   2ecfc:	1864      	adds	r4, r4, r1
   2ecfe:	d02c      	beq.n	2ed5a <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ed00:	185e      	adds	r6, r3, r1
   2ed02:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2ed04:	bf88      	it	hi
   2ed06:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2ed08:	6a05      	ldr	r5, [r0, #32]
   2ed0a:	b135      	cbz	r5, 2ed1a <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   2ed0c:	9300      	str	r3, [sp, #0]
   2ed0e:	2305      	movs	r3, #5
   2ed10:	47a8      	blx	r5
   2ed12:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2ed14:	4618      	mov	r0, r3
   2ed16:	b002      	add	sp, #8
   2ed18:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   2ed1a:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2ed1e:	4619      	mov	r1, r3
   2ed20:	1aa4      	subs	r4, r4, r2
   2ed22:	1910      	adds	r0, r2, r4
   2ed24:	b119      	cbz	r1, 2ed2e <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   2ed26:	ea40 0502 	orr.w	r5, r0, r2
   2ed2a:	07ad      	lsls	r5, r5, #30
   2ed2c:	d10a      	bne.n	2ed44 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2ed2e:	2903      	cmp	r1, #3
   2ed30:	dc0d      	bgt.n	2ed4e <metal_io_block_read+0x60>
   2ed32:	3801      	subs	r0, #1
   2ed34:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   2ed36:	428a      	cmp	r2, r1
   2ed38:	d0ec      	beq.n	2ed14 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   2ed3a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   2ed3e:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2ed42:	e7f8      	b.n	2ed36 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   2ed44:	7800      	ldrb	r0, [r0, #0]
			len--;
   2ed46:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   2ed48:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   2ed4c:	e7e9      	b.n	2ed22 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2ed4e:	f850 4b04 	ldr.w	r4, [r0], #4
   2ed52:	3904      	subs	r1, #4
   2ed54:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   2ed58:	e7e9      	b.n	2ed2e <metal_io_block_read+0x40>
		return -ERANGE;
   2ed5a:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2ed5e:	e7d9      	b.n	2ed14 <metal_io_block_read+0x26>

0002ed60 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2ed60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ed62:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ed64:	1c65      	adds	r5, r4, #1
   2ed66:	d032      	beq.n	2edce <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ed68:	6885      	ldr	r5, [r0, #8]
   2ed6a:	42a9      	cmp	r1, r5
   2ed6c:	d22f      	bcs.n	2edce <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2ed6e:	1864      	adds	r4, r4, r1
   2ed70:	d02d      	beq.n	2edce <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ed72:	185e      	adds	r6, r3, r1
   2ed74:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2ed76:	bf88      	it	hi
   2ed78:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2ed7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2ed7c:	b1cd      	cbz	r5, 2edb2 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2ed7e:	9300      	str	r3, [sp, #0]
   2ed80:	2305      	movs	r3, #5
   2ed82:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2ed84:	b002      	add	sp, #8
   2ed86:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2ed88:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   2ed8c:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2ed8e:	7005      	strb	r5, [r0, #0]
			len--;
   2ed90:	4615      	mov	r5, r2
   2ed92:	18a0      	adds	r0, r4, r2
		while ( len && (
   2ed94:	b119      	cbz	r1, 2ed9e <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   2ed96:	ea40 0602 	orr.w	r6, r0, r2
   2ed9a:	07b6      	lsls	r6, r6, #30
   2ed9c:	d1f4      	bne.n	2ed88 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ed9e:	2903      	cmp	r1, #3
   2eda0:	dc0a      	bgt.n	2edb8 <metal_io_block_write+0x58>
   2eda2:	3d01      	subs	r5, #1
   2eda4:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   2eda6:	4288      	cmp	r0, r1
   2eda8:	d10c      	bne.n	2edc4 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2edaa:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2edae:	4618      	mov	r0, r3
   2edb0:	e7e8      	b.n	2ed84 <metal_io_block_write+0x24>
   2edb2:	4619      	mov	r1, r3
   2edb4:	1aa4      	subs	r4, r4, r2
   2edb6:	e7eb      	b.n	2ed90 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2edb8:	f855 2b04 	ldr.w	r2, [r5], #4
   2edbc:	3904      	subs	r1, #4
   2edbe:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2edc2:	e7ec      	b.n	2ed9e <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2edc4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   2edc8:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   2edcc:	e7eb      	b.n	2eda6 <metal_io_block_write+0x46>
		return -ERANGE;
   2edce:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2edd2:	e7d7      	b.n	2ed84 <metal_io_block_write+0x24>

0002edd4 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2edd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2edd6:	6804      	ldr	r4, [r0, #0]
   2edd8:	461d      	mov	r5, r3
		: NULL);
   2edda:	1c66      	adds	r6, r4, #1
   2eddc:	d02b      	beq.n	2ee36 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2edde:	6883      	ldr	r3, [r0, #8]
   2ede0:	4299      	cmp	r1, r3
   2ede2:	d228      	bcs.n	2ee36 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2ede4:	1864      	adds	r4, r4, r1
   2ede6:	d026      	beq.n	2ee36 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ede8:	186e      	adds	r6, r5, r1
   2edea:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2edec:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2edee:	bf88      	it	hi
   2edf0:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2edf2:	b12e      	cbz	r6, 2ee00 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   2edf4:	2305      	movs	r3, #5
   2edf6:	9500      	str	r5, [sp, #0]
   2edf8:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2edfa:	4628      	mov	r0, r5
}
   2edfc:	b002      	add	sp, #8
   2edfe:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   2ee00:	4621      	mov	r1, r4
   2ee02:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2ee04:	b94b      	cbnz	r3, 2ee1a <metal_io_block_set+0x46>
   2ee06:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   2ee08:	4299      	cmp	r1, r3
   2ee0a:	d111      	bne.n	2ee30 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   2ee0c:	f3bf 8f5b 	dmb	ish
   2ee10:	e7f3      	b.n	2edfa <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   2ee12:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2ee16:	3b01      	subs	r3, #1
   2ee18:	e7f4      	b.n	2ee04 <metal_io_block_set+0x30>
   2ee1a:	0788      	lsls	r0, r1, #30
   2ee1c:	d1f9      	bne.n	2ee12 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2ee1e:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2ee22:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ee24:	2b03      	cmp	r3, #3
   2ee26:	ddee      	ble.n	2ee06 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   2ee28:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ee2c:	3b04      	subs	r3, #4
   2ee2e:	e7f9      	b.n	2ee24 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2ee30:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2ee34:	e7e8      	b.n	2ee08 <metal_io_block_set+0x34>
		return -ERANGE;
   2ee36:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2ee3a:	e7df      	b.n	2edfc <metal_io_block_set+0x28>

0002ee3c <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2ee3c:	2000      	movs	r0, #0
   2ee3e:	4770      	bx	lr

0002ee40 <lfs_pair_isnull>:
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   2ee40:	6803      	ldr	r3, [r0, #0]
   2ee42:	3301      	adds	r3, #1
   2ee44:	d004      	beq.n	2ee50 <lfs_pair_isnull+0x10>
   2ee46:	6840      	ldr	r0, [r0, #4]
   2ee48:	1c43      	adds	r3, r0, #1
   2ee4a:	4258      	negs	r0, r3
   2ee4c:	4158      	adcs	r0, r3
   2ee4e:	4770      	bx	lr
   2ee50:	2001      	movs	r0, #1
}
   2ee52:	4770      	bx	lr

0002ee54 <lfs_pair_cmp>:
        const lfs_block_t pairb[2]) {
   2ee54:	b510      	push	{r4, lr}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   2ee56:	6804      	ldr	r4, [r0, #0]
   2ee58:	680b      	ldr	r3, [r1, #0]
   2ee5a:	429c      	cmp	r4, r3
   2ee5c:	d009      	beq.n	2ee72 <lfs_pair_cmp+0x1e>
   2ee5e:	6840      	ldr	r0, [r0, #4]
   2ee60:	6849      	ldr	r1, [r1, #4]
   2ee62:	4288      	cmp	r0, r1
   2ee64:	d005      	beq.n	2ee72 <lfs_pair_cmp+0x1e>
   2ee66:	428c      	cmp	r4, r1
   2ee68:	d003      	beq.n	2ee72 <lfs_pair_cmp+0x1e>
   2ee6a:	1a18      	subs	r0, r3, r0
   2ee6c:	bf18      	it	ne
   2ee6e:	2001      	movne	r0, #1
}
   2ee70:	bd10      	pop	{r4, pc}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   2ee72:	2000      	movs	r0, #0
   2ee74:	e7fc      	b.n	2ee70 <lfs_pair_cmp+0x1c>

0002ee76 <lfs_tag_dsize>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   2ee76:	f340 0309 	sbfx	r3, r0, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   2ee7a:	f1b3 3fff 	cmp.w	r3, #4294967295
   2ee7e:	bf08      	it	eq
   2ee80:	3001      	addeq	r0, #1
    return tag & 0x000003ff;
   2ee82:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
   2ee86:	3004      	adds	r0, #4
   2ee88:	4770      	bx	lr

0002ee8a <lfs_gstate_xor>:
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
   2ee8a:	b510      	push	{r4, lr}
   2ee8c:	1f03      	subs	r3, r0, #4
   2ee8e:	3904      	subs	r1, #4
   2ee90:	3008      	adds	r0, #8
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   2ee92:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2ee96:	f851 4f04 	ldr.w	r4, [r1, #4]!
    for (int i = 0; i < 3; i++) {
   2ee9a:	4283      	cmp	r3, r0
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   2ee9c:	ea82 0204 	eor.w	r2, r2, r4
   2eea0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
   2eea2:	d1f6      	bne.n	2ee92 <lfs_gstate_xor+0x8>
}
   2eea4:	bd10      	pop	{r4, pc}

0002eea6 <lfs_gstate_hasmovehere>:
        const lfs_block_t *pair) {
   2eea6:	b508      	push	{r3, lr}
    return (tag & 0x70000000) >> 20;
   2eea8:	6803      	ldr	r3, [r0, #0]
        const lfs_block_t *pair) {
   2eeaa:	4602      	mov	r2, r0
    return (tag & 0x70000000) >> 20;
   2eeac:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   2eeae:	f413 60e0 	ands.w	r0, r3, #1792	; 0x700
   2eeb2:	d005      	beq.n	2eec0 <lfs_gstate_hasmovehere+0x1a>
   2eeb4:	1d10      	adds	r0, r2, #4
   2eeb6:	f7ff ffcd 	bl	2ee54 <lfs_pair_cmp>
   2eeba:	fab0 f080 	clz	r0, r0
   2eebe:	0940      	lsrs	r0, r0, #5
}
   2eec0:	bd08      	pop	{r3, pc}

0002eec2 <lfs_mlist_isopen>:
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
   2eec2:	b900      	cbnz	r0, 2eec6 <lfs_mlist_isopen+0x4>
   2eec4:	4770      	bx	lr
        if (*p == (struct lfs_mlist*)node) {
   2eec6:	4288      	cmp	r0, r1
   2eec8:	d001      	beq.n	2eece <lfs_mlist_isopen+0xc>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
   2eeca:	6800      	ldr	r0, [r0, #0]
   2eecc:	e7f9      	b.n	2eec2 <lfs_mlist_isopen>
            return true;
   2eece:	2001      	movs	r0, #1
}
   2eed0:	4770      	bx	lr

0002eed2 <lfs_alloc_lookahead>:
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
   2eed2:	b510      	push	{r4, lr}
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   2eed4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2eed6:	6a1a      	ldr	r2, [r3, #32]
   2eed8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2eeda:	1ad3      	subs	r3, r2, r3
   2eedc:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->free.off)
   2eede:	fbb1 f3f2 	udiv	r3, r1, r2
   2eee2:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   2eee6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2eee8:	428b      	cmp	r3, r1
   2eeea:	d90a      	bls.n	2ef02 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   2eeec:	2201      	movs	r2, #1
   2eeee:	6e40      	ldr	r0, [r0, #100]	; 0x64
   2eef0:	094c      	lsrs	r4, r1, #5
   2eef2:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   2eef6:	f001 011f 	and.w	r1, r1, #31
   2eefa:	408a      	lsls	r2, r1
   2eefc:	4313      	orrs	r3, r2
   2eefe:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
}
   2ef02:	2000      	movs	r0, #0
   2ef04:	bd10      	pop	{r4, pc}

0002ef06 <lfs_dir_commit_size>:
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
   2ef06:	4602      	mov	r2, r0
   2ef08:	b508      	push	{r3, lr}
    *size += lfs_tag_dsize(tag);
   2ef0a:	4608      	mov	r0, r1
   2ef0c:	f7ff ffb3 	bl	2ee76 <lfs_tag_dsize>
   2ef10:	6813      	ldr	r3, [r2, #0]
   2ef12:	4403      	add	r3, r0
   2ef14:	6013      	str	r3, [r2, #0]
}
   2ef16:	2000      	movs	r0, #0
   2ef18:	bd08      	pop	{r3, pc}

0002ef1a <lfs_fs_size_count>:
    *size += 1;
   2ef1a:	6803      	ldr	r3, [r0, #0]
   2ef1c:	3301      	adds	r3, #1
   2ef1e:	6003      	str	r3, [r0, #0]
}
   2ef20:	2000      	movs	r0, #0
   2ef22:	4770      	bx	lr

0002ef24 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
   2ef24:	b510      	push	{r4, lr}
    if (!lfs->cfg->read_buffer) {
   2ef26:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_deinit(lfs_t *lfs) {
   2ef28:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   2ef2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2ef2c:	b913      	cbnz	r3, 2ef34 <lfs_deinit+0x10>

/* Deallocate memory, only used if buffers are not provided to littlefs */
static inline void lfs_free(void *p)
{
#ifndef LFS_NO_MALLOC
	free(p);
   2ef2e:	68c0      	ldr	r0, [r0, #12]
   2ef30:	f7f9 fbb4 	bl	2869c <free>
    if (!lfs->cfg->prog_buffer) {
   2ef34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2ef36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2ef38:	b913      	cbnz	r3, 2ef40 <lfs_deinit+0x1c>
   2ef3a:	69e0      	ldr	r0, [r4, #28]
   2ef3c:	f7f9 fbae 	bl	2869c <free>
    if (!lfs->cfg->lookahead_buffer) {
   2ef40:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2ef42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2ef44:	b913      	cbnz	r3, 2ef4c <lfs_deinit+0x28>
   2ef46:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2ef48:	f7f9 fba8 	bl	2869c <free>
}
   2ef4c:	2000      	movs	r0, #0
   2ef4e:	bd10      	pop	{r4, pc}

0002ef50 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   2ef50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return tag & 0x000003ff;
   2ef52:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   2ef56:	9402      	str	r4, [sp, #8]
   2ef58:	9c06      	ldr	r4, [sp, #24]
   2ef5a:	9401      	str	r4, [sp, #4]
   2ef5c:	2400      	movs	r4, #0
   2ef5e:	9400      	str	r4, [sp, #0]
   2ef60:	f7f1 fe88 	bl	20c74 <lfs_dir_getslice>
}
   2ef64:	b004      	add	sp, #16
   2ef66:	bd10      	pop	{r4, pc}

0002ef68 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   2ef68:	b530      	push	{r4, r5, lr}
   2ef6a:	4613      	mov	r3, r2
   2ef6c:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   2ef6e:	6802      	ldr	r2, [r0, #0]
    int err = lfs_bd_read(lfs,
   2ef70:	2008      	movs	r0, #8
        lfs_tag_t tag, const void *buffer) {
   2ef72:	b087      	sub	sp, #28
    int err = lfs_bd_read(lfs,
   2ef74:	ad04      	add	r5, sp, #16
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   2ef76:	6e91      	ldr	r1, [r2, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   2ef78:	9003      	str	r0, [sp, #12]
   2ef7a:	9502      	str	r5, [sp, #8]
   2ef7c:	6858      	ldr	r0, [r3, #4]
   2ef7e:	9001      	str	r0, [sp, #4]
   2ef80:	681b      	ldr	r3, [r3, #0]
   2ef82:	4610      	mov	r0, r2
   2ef84:	9300      	str	r3, [sp, #0]
   2ef86:	69cb      	ldr	r3, [r1, #28]
   2ef88:	f102 0110 	add.w	r1, r2, #16
   2ef8c:	f7f1 fd9a 	bl	20ac4 <lfs_bd_read>
    if (err) {
   2ef90:	b930      	cbnz	r0, 2efa0 <lfs_fs_parent_match+0x38>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   2ef92:	4628      	mov	r0, r5
   2ef94:	1d21      	adds	r1, r4, #4
   2ef96:	f7ff ff5d 	bl	2ee54 <lfs_pair_cmp>
   2ef9a:	3800      	subs	r0, #0
   2ef9c:	bf18      	it	ne
   2ef9e:	2001      	movne	r0, #1
}
   2efa0:	b007      	add	sp, #28
   2efa2:	bd30      	pop	{r4, r5, pc}

0002efa4 <lfs_bd_cmp.constprop.0>:
static int lfs_bd_cmp(lfs_t *lfs,
   2efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efa8:	4607      	mov	r7, r0
   2efaa:	4688      	mov	r8, r1
   2efac:	4691      	mov	r9, r2
   2efae:	469a      	mov	sl, r3
    for (lfs_off_t i = 0; i < size; i += diff) {
   2efb0:	2400      	movs	r4, #0
static int lfs_bd_cmp(lfs_t *lfs,
   2efb2:	b087      	sub	sp, #28
   2efb4:	9e12      	ldr	r6, [sp, #72]	; 0x48
        int res = lfs_bd_read(lfs,
   2efb6:	f10d 0b10 	add.w	fp, sp, #16
    for (lfs_off_t i = 0; i < size; i += diff) {
   2efba:	42a6      	cmp	r6, r4
   2efbc:	d801      	bhi.n	2efc2 <lfs_bd_cmp.constprop.0+0x1e>
    return LFS_CMP_EQ;
   2efbe:	2000      	movs	r0, #0
   2efc0:	e01b      	b.n	2effa <lfs_bd_cmp.constprop.0+0x56>
        diff = lfs_min(size-i, sizeof(dat));
   2efc2:	1b35      	subs	r5, r6, r4
	return (a < b) ? a : b;
   2efc4:	2d08      	cmp	r5, #8
   2efc6:	bf28      	it	cs
   2efc8:	2508      	movcs	r5, #8
        int res = lfs_bd_read(lfs,
   2efca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2efcc:	4642      	mov	r2, r8
   2efce:	18e3      	adds	r3, r4, r3
   2efd0:	e9cd a300 	strd	sl, r3, [sp]
   2efd4:	2100      	movs	r1, #0
   2efd6:	4638      	mov	r0, r7
   2efd8:	e9cd b502 	strd	fp, r5, [sp, #8]
   2efdc:	eba9 0304 	sub.w	r3, r9, r4
   2efe0:	f7f1 fd70 	bl	20ac4 <lfs_bd_read>
        if (res) {
   2efe4:	b948      	cbnz	r0, 2effa <lfs_bd_cmp.constprop.0+0x56>
        res = memcmp(dat, data + i, diff);
   2efe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2efe8:	462a      	mov	r2, r5
   2efea:	4658      	mov	r0, fp
   2efec:	1919      	adds	r1, r3, r4
   2efee:	f001 fa9a 	bl	30526 <memcmp>
        if (res) {
   2eff2:	2800      	cmp	r0, #0
   2eff4:	d004      	beq.n	2f000 <lfs_bd_cmp.constprop.0+0x5c>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
   2eff6:	da05      	bge.n	2f004 <lfs_bd_cmp.constprop.0+0x60>
   2eff8:	2001      	movs	r0, #1
}
   2effa:	b007      	add	sp, #28
   2effc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (lfs_off_t i = 0; i < size; i += diff) {
   2f000:	442c      	add	r4, r5
   2f002:	e7da      	b.n	2efba <lfs_bd_cmp.constprop.0+0x16>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
   2f004:	2002      	movs	r0, #2
   2f006:	e7f8      	b.n	2effa <lfs_bd_cmp.constprop.0+0x56>

0002f008 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   2f008:	b530      	push	{r4, r5, lr}
   2f00a:	4613      	mov	r3, r2
   2f00c:	6882      	ldr	r2, [r0, #8]
    return tag & 0x000003ff;
   2f00e:	f3c1 0509 	ubfx	r5, r1, #0, #10
   2f012:	42aa      	cmp	r2, r5
   2f014:	bf28      	it	cs
   2f016:	462a      	movcs	r2, r5
        lfs_tag_t tag, const void *buffer) {
   2f018:	b085      	sub	sp, #20
    int res = lfs_bd_cmp(lfs,
   2f01a:	9202      	str	r2, [sp, #8]
   2f01c:	6841      	ldr	r1, [r0, #4]
        lfs_tag_t tag, const void *buffer) {
   2f01e:	4604      	mov	r4, r0
    int res = lfs_bd_cmp(lfs,
   2f020:	9101      	str	r1, [sp, #4]
   2f022:	6859      	ldr	r1, [r3, #4]
   2f024:	9100      	str	r1, [sp, #0]
   2f026:	6801      	ldr	r1, [r0, #0]
   2f028:	681b      	ldr	r3, [r3, #0]
   2f02a:	4608      	mov	r0, r1
   2f02c:	f7ff ffba 	bl	2efa4 <lfs_bd_cmp.constprop.0>
    if (res != LFS_CMP_EQ) {
   2f030:	b928      	cbnz	r0, 2f03e <lfs_dir_find_match+0x36>
    if (name->size != lfs_tag_size(tag)) {
   2f032:	68a3      	ldr	r3, [r4, #8]
   2f034:	42ab      	cmp	r3, r5
   2f036:	d002      	beq.n	2f03e <lfs_dir_find_match+0x36>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   2f038:	bf34      	ite	cc
   2f03a:	2001      	movcc	r0, #1
   2f03c:	2002      	movcs	r0, #2
}
   2f03e:	b005      	add	sp, #20
   2f040:	bd30      	pop	{r4, r5, pc}

0002f042 <z_log_msg_static_create.constprop.0>:
   2f042:	2300      	movs	r3, #0
   2f044:	f7df bc10 	b.w	e868 <z_impl_z_log_msg_static_create>

0002f048 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   2f048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   2f04a:	2300      	movs	r3, #0
   2f04c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2f050:	9301      	str	r3, [sp, #4]
   2f052:	f04f 33ff 	mov.w	r3, #4294967295
   2f056:	9300      	str	r3, [sp, #0]
   2f058:	f7f2 f8bc 	bl	211d4 <lfs_dir_fetchmatch>
}
   2f05c:	b005      	add	sp, #20
   2f05e:	f85d fb04 	ldr.w	pc, [sp], #4

0002f062 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   2f062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdir->tail[1] = 1;
   2f066:	2301      	movs	r3, #1
   2f068:	2400      	movs	r4, #0
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   2f06a:	4606      	mov	r6, r0
   2f06c:	4688      	mov	r8, r1
   2f06e:	4615      	mov	r5, r2
    pdir->tail[1] = 1;
   2f070:	e9c2 4306 	strd	r4, r3, [r2, #24]
    while (!lfs_pair_isnull(pdir->tail)) {
   2f074:	f102 0718 	add.w	r7, r2, #24
   2f078:	4638      	mov	r0, r7
   2f07a:	f7ff fee1 	bl	2ee40 <lfs_pair_isnull>
   2f07e:	b110      	cbz	r0, 2f086 <lfs_fs_pred+0x24>
    return LFS_ERR_NOENT;
   2f080:	f06f 0001 	mvn.w	r0, #1
   2f084:	e011      	b.n	2f0aa <lfs_fs_pred+0x48>
        if (cycle >= lfs->cfg->block_count/2) {
   2f086:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f088:	6a1b      	ldr	r3, [r3, #32]
   2f08a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2f08e:	d20e      	bcs.n	2f0ae <lfs_fs_pred+0x4c>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
   2f090:	4641      	mov	r1, r8
   2f092:	4638      	mov	r0, r7
        cycle += 1;
   2f094:	3401      	adds	r4, #1
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
   2f096:	f7ff fedd 	bl	2ee54 <lfs_pair_cmp>
   2f09a:	b130      	cbz	r0, 2f0aa <lfs_fs_pred+0x48>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   2f09c:	463a      	mov	r2, r7
   2f09e:	4629      	mov	r1, r5
   2f0a0:	4630      	mov	r0, r6
   2f0a2:	f7ff ffd1 	bl	2f048 <lfs_dir_fetch>
        if (err) {
   2f0a6:	2800      	cmp	r0, #0
   2f0a8:	d0e6      	beq.n	2f078 <lfs_fs_pred+0x16>
}
   2f0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LFS_ERR_CORRUPT;
   2f0ae:	f06f 0053 	mvn.w	r0, #83	; 0x53
   2f0b2:	e7fa      	b.n	2f0aa <lfs_fs_pred+0x48>

0002f0b4 <lfs_ctz_index.isra.0>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   2f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   2f0b6:	69c6      	ldr	r6, [r0, #28]
    lfs_off_t size = *off;
   2f0b8:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   2f0ba:	3e08      	subs	r6, #8
    if (i == 0) {
   2f0bc:	42b5      	cmp	r5, r6
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   2f0be:	460f      	mov	r7, r1
    if (i == 0) {
   2f0c0:	d313      	bcc.n	2f0ea <lfs_ctz_index.isra.0+0x36>
    lfs_off_t i = size / b;
   2f0c2:	fbb5 f0f6 	udiv	r0, r5, r6
	return __builtin_popcount(a);
   2f0c6:	3801      	subs	r0, #1
   2f0c8:	f7d9 fff2 	bl	90b0 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   2f0cc:	1c84      	adds	r4, r0, #2
   2f0ce:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
   2f0d2:	fbb4 f4f6 	udiv	r4, r4, r6
   2f0d6:	4620      	mov	r0, r4
   2f0d8:	f7d9 ffea 	bl	90b0 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
   2f0dc:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
    return i;
   2f0e0:	4620      	mov	r0, r4
    *off = size - b*i - 4*lfs_popc(i);
   2f0e2:	fb04 5516 	mls	r5, r4, r6, r5
   2f0e6:	603d      	str	r5, [r7, #0]
}
   2f0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   2f0ea:	2000      	movs	r0, #0
   2f0ec:	e7fc      	b.n	2f0e8 <lfs_ctz_index.isra.0+0x34>

0002f0ee <lfs_ctz_find.constprop.0>:
static int lfs_ctz_find(lfs_t *lfs,
   2f0ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f0f2:	b089      	sub	sp, #36	; 0x24
   2f0f4:	4606      	mov	r6, r0
   2f0f6:	460f      	mov	r7, r1
   2f0f8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   2f0fc:	9205      	str	r2, [sp, #20]
    if (size == 0) {
   2f0fe:	b94b      	cbnz	r3, 2f114 <lfs_ctz_find.constprop.0+0x26>
        *block = LFS_BLOCK_NULL;
   2f100:	f04f 32ff 	mov.w	r2, #4294967295
   2f104:	f8c8 2000 	str.w	r2, [r8]
        return 0;
   2f108:	2000      	movs	r0, #0
    *off = pos;
   2f10a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2f10c:	6013      	str	r3, [r2, #0]
}
   2f10e:	b009      	add	sp, #36	; 0x24
   2f110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f114:	6e84      	ldr	r4, [r0, #104]	; 0x68
   2f116:	3b01      	subs	r3, #1
   2f118:	a907      	add	r1, sp, #28
   2f11a:	4620      	mov	r0, r4
   2f11c:	9307      	str	r3, [sp, #28]
   2f11e:	f7ff ffc9 	bl	2f0b4 <lfs_ctz_index.isra.0>
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f122:	a912      	add	r1, sp, #72	; 0x48
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f124:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f126:	4620      	mov	r0, r4
   2f128:	f7ff ffc4 	bl	2f0b4 <lfs_ctz_index.isra.0>
        int err = lfs_bd_read(lfs,
   2f12c:	f04f 0a04 	mov.w	sl, #4
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f130:	4681      	mov	r9, r0
        int err = lfs_bd_read(lfs,
   2f132:	f10d 0b14 	add.w	fp, sp, #20
    while (current > target) {
   2f136:	45a9      	cmp	r9, r5
        int err = lfs_bd_read(lfs,
   2f138:	9a05      	ldr	r2, [sp, #20]
    while (current > target) {
   2f13a:	d303      	bcc.n	2f144 <lfs_ctz_find.constprop.0+0x56>
    *off = pos;
   2f13c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    *block = head;
   2f13e:	f8c8 2000 	str.w	r2, [r8]
    return 0;
   2f142:	e7e1      	b.n	2f108 <lfs_ctz_find.constprop.0+0x1a>
	return __builtin_ctz(a);
   2f144:	fa95 f3a5 	rbit	r3, r5
                lfs_npw2(current-target+1) - 1,
   2f148:	eba5 0409 	sub.w	r4, r5, r9
	return 32 - __builtin_clz(a-1);
   2f14c:	fab4 f484 	clz	r4, r4
	return __builtin_ctz(a);
   2f150:	fab3 f383 	clz	r3, r3
        lfs_size_t skip = lfs_min(
   2f154:	f1c4 041f 	rsb	r4, r4, #31
	return (a < b) ? a : b;
   2f158:	429c      	cmp	r4, r3
   2f15a:	bf28      	it	cs
   2f15c:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   2f15e:	00a3      	lsls	r3, r4, #2
   2f160:	e9cd 2300 	strd	r2, r3, [sp]
   2f164:	2100      	movs	r1, #0
   2f166:	2304      	movs	r3, #4
   2f168:	463a      	mov	r2, r7
   2f16a:	4630      	mov	r0, r6
   2f16c:	e9cd ba02 	strd	fp, sl, [sp, #8]
   2f170:	f7f1 fca8 	bl	20ac4 <lfs_bd_read>
        if (err) {
   2f174:	2800      	cmp	r0, #0
   2f176:	d1ca      	bne.n	2f10e <lfs_ctz_find.constprop.0+0x20>
        current -= 1 << skip;
   2f178:	2301      	movs	r3, #1
   2f17a:	40a3      	lsls	r3, r4
   2f17c:	1aed      	subs	r5, r5, r3
   2f17e:	e7da      	b.n	2f136 <lfs_ctz_find.constprop.0+0x48>

0002f180 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   2f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f184:	b089      	sub	sp, #36	; 0x24
   2f186:	4607      	mov	r7, r0
   2f188:	e9dd 0a12 	ldrd	r0, sl, [sp, #72]	; 0x48
   2f18c:	4688      	mov	r8, r1
   2f18e:	4691      	mov	r9, r2
   2f190:	461e      	mov	r6, r3
    if (size == 0) {
   2f192:	b1e0      	cbz	r0, 2f1ce <lfs_ctz_traverse+0x4e>
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f194:	3801      	subs	r0, #1
   2f196:	9005      	str	r0, [sp, #20]
   2f198:	a905      	add	r1, sp, #20
   2f19a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   2f19c:	f7ff ff8a 	bl	2f0b4 <lfs_ctz_index.isra.0>
   2f1a0:	4604      	mov	r4, r0
        err = lfs_bd_read(lfs,
   2f1a2:	f10d 0b18 	add.w	fp, sp, #24
        int err = cb(data, head);
   2f1a6:	4631      	mov	r1, r6
   2f1a8:	9814      	ldr	r0, [sp, #80]	; 0x50
   2f1aa:	47d0      	blx	sl
        if (err) {
   2f1ac:	b978      	cbnz	r0, 2f1ce <lfs_ctz_traverse+0x4e>
        if (index == 0) {
   2f1ae:	b174      	cbz	r4, 2f1ce <lfs_ctz_traverse+0x4e>
        int count = 2 - (index & 1);
   2f1b0:	f004 0501 	and.w	r5, r4, #1
   2f1b4:	f1c5 0302 	rsb	r3, r5, #2
        err = lfs_bd_read(lfs,
   2f1b8:	009b      	lsls	r3, r3, #2
   2f1ba:	e9cd 6000 	strd	r6, r0, [sp]
   2f1be:	464a      	mov	r2, r9
   2f1c0:	4641      	mov	r1, r8
   2f1c2:	4638      	mov	r0, r7
   2f1c4:	e9cd b302 	strd	fp, r3, [sp, #8]
   2f1c8:	f7f1 fc7c 	bl	20ac4 <lfs_bd_read>
        if (err) {
   2f1cc:	b110      	cbz	r0, 2f1d4 <lfs_ctz_traverse+0x54>
}
   2f1ce:	b009      	add	sp, #36	; 0x24
   2f1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = cb(data, heads[i]);
   2f1d4:	9906      	ldr	r1, [sp, #24]
        for (int i = 0; i < count-1; i++) {
   2f1d6:	b925      	cbnz	r5, 2f1e2 <lfs_ctz_traverse+0x62>
            err = cb(data, heads[i]);
   2f1d8:	9814      	ldr	r0, [sp, #80]	; 0x50
   2f1da:	47d0      	blx	sl
            if (err) {
   2f1dc:	2800      	cmp	r0, #0
   2f1de:	d1f6      	bne.n	2f1ce <lfs_ctz_traverse+0x4e>
        for (int i = 0; i < count-1; i++) {
   2f1e0:	2001      	movs	r0, #1
        head = heads[count-1];
   2f1e2:	ab08      	add	r3, sp, #32
   2f1e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        index -= count;
   2f1e8:	3d02      	subs	r5, #2
        head = heads[count-1];
   2f1ea:	f850 6c08 	ldr.w	r6, [r0, #-8]
        index -= count;
   2f1ee:	442c      	add	r4, r5
    while (true) {
   2f1f0:	e7d9      	b.n	2f1a6 <lfs_ctz_traverse+0x26>

0002f1f2 <lfs_cache_zero.isra.0>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
   2f1f2:	b510      	push	{r4, lr}
   2f1f4:	460c      	mov	r4, r1
   2f1f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2f1f8:	21ff      	movs	r1, #255	; 0xff
   2f1fa:	68e0      	ldr	r0, [r4, #12]
   2f1fc:	f001 f9dd 	bl	305ba <memset>
    pcache->block = LFS_BLOCK_NULL;
   2f200:	f04f 33ff 	mov.w	r3, #4294967295
   2f204:	6023      	str	r3, [r4, #0]
}
   2f206:	bd10      	pop	{r4, pc}

0002f208 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   2f208:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f20a:	b085      	sub	sp, #20
    int err = lfs_bd_prog(lfs,
   2f20c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        const void *buffer, lfs_size_t size) {
   2f210:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
   2f212:	684b      	ldr	r3, [r1, #4]
        const void *buffer, lfs_size_t size) {
   2f214:	460c      	mov	r4, r1
    int err = lfs_bd_prog(lfs,
   2f216:	9301      	str	r3, [sp, #4]
   2f218:	680b      	ldr	r3, [r1, #0]
        const void *buffer, lfs_size_t size) {
   2f21a:	4617      	mov	r7, r2
    int err = lfs_bd_prog(lfs,
   2f21c:	9300      	str	r3, [sp, #0]
   2f21e:	4602      	mov	r2, r0
   2f220:	2300      	movs	r3, #0
   2f222:	f100 0110 	add.w	r1, r0, #16
   2f226:	f7f2 fdcb 	bl	21dc0 <lfs_bd_prog>
    if (err) {
   2f22a:	4606      	mov	r6, r0
   2f22c:	b940      	cbnz	r0, 2f240 <lfs_dir_commitprog+0x38>
    commit->crc = lfs_crc(commit->crc, buffer, size);
   2f22e:	462a      	mov	r2, r5
   2f230:	4639      	mov	r1, r7
   2f232:	68e0      	ldr	r0, [r4, #12]
   2f234:	f7f4 fdba 	bl	23dac <lfs_crc>
    commit->off += size;
   2f238:	6863      	ldr	r3, [r4, #4]
    commit->crc = lfs_crc(commit->crc, buffer, size);
   2f23a:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   2f23c:	442b      	add	r3, r5
   2f23e:	6063      	str	r3, [r4, #4]
}
   2f240:	4630      	mov	r0, r6
   2f242:	b005      	add	sp, #20
   2f244:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f246 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   2f246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f24a:	4606      	mov	r6, r0
   2f24c:	b087      	sub	sp, #28
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f24e:	4610      	mov	r0, r2
        lfs_tag_t tag, const void *buffer) {
   2f250:	4699      	mov	r9, r3
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f252:	f7ff fe10 	bl	2ee76 <lfs_tag_dsize>
    if (commit->off + dsize > commit->end) {
   2f256:	684b      	ldr	r3, [r1, #4]
        lfs_tag_t tag, const void *buffer) {
   2f258:	4693      	mov	fp, r2
    if (commit->off + dsize > commit->end) {
   2f25a:	694a      	ldr	r2, [r1, #20]
   2f25c:	4403      	add	r3, r0
   2f25e:	4293      	cmp	r3, r2
        lfs_tag_t tag, const void *buffer) {
   2f260:	460c      	mov	r4, r1
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f262:	4680      	mov	r8, r0
    if (commit->off + dsize > commit->end) {
   2f264:	d841      	bhi.n	2f2ea <lfs_dir_commitattr+0xa4>
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   2f266:	688b      	ldr	r3, [r1, #8]
   2f268:	f02b 4a00 	bic.w	sl, fp, #2147483648	; 0x80000000
   2f26c:	ea8a 0303 	eor.w	r3, sl, r3
	return __builtin_bswap32(a);
   2f270:	ba1b      	rev	r3, r3
   2f272:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   2f274:	4630      	mov	r0, r6
   2f276:	2304      	movs	r3, #4
   2f278:	aa05      	add	r2, sp, #20
   2f27a:	f7ff ffc5 	bl	2f208 <lfs_dir_commitprog>
    if (err) {
   2f27e:	4605      	mov	r5, r0
   2f280:	bb78      	cbnz	r0, 2f2e2 <lfs_dir_commitattr+0x9c>
    if (!(tag & 0x80000000)) {
   2f282:	f1bb 0f00 	cmp.w	fp, #0
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   2f286:	f1a8 0704 	sub.w	r7, r8, #4
    if (!(tag & 0x80000000)) {
   2f28a:	da20      	bge.n	2f2ce <lfs_dir_commitattr+0x88>
            err = lfs_bd_read(lfs,
   2f28c:	f10d 0b13 	add.w	fp, sp, #19
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   2f290:	b32f      	cbz	r7, 2f2de <lfs_dir_commitattr+0x98>
            err = lfs_bd_read(lfs,
   2f292:	2301      	movs	r3, #1
   2f294:	e9cd b302 	strd	fp, r3, [sp, #8]
   2f298:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2f29c:	4632      	mov	r2, r6
   2f29e:	3b04      	subs	r3, #4
   2f2a0:	4443      	add	r3, r8
   2f2a2:	1bdb      	subs	r3, r3, r7
   2f2a4:	9301      	str	r3, [sp, #4]
   2f2a6:	f8d9 3000 	ldr.w	r3, [r9]
   2f2aa:	2100      	movs	r1, #0
   2f2ac:	9300      	str	r3, [sp, #0]
   2f2ae:	4630      	mov	r0, r6
   2f2b0:	463b      	mov	r3, r7
   2f2b2:	f7f1 fc07 	bl	20ac4 <lfs_bd_read>
            if (err) {
   2f2b6:	b940      	cbnz	r0, 2f2ca <lfs_dir_commitattr+0x84>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   2f2b8:	2301      	movs	r3, #1
   2f2ba:	465a      	mov	r2, fp
   2f2bc:	4621      	mov	r1, r4
   2f2be:	4630      	mov	r0, r6
   2f2c0:	f7ff ffa2 	bl	2f208 <lfs_dir_commitprog>
            if (err) {
   2f2c4:	3f01      	subs	r7, #1
   2f2c6:	2800      	cmp	r0, #0
   2f2c8:	d0e2      	beq.n	2f290 <lfs_dir_commitattr+0x4a>
   2f2ca:	4605      	mov	r5, r0
   2f2cc:	e009      	b.n	2f2e2 <lfs_dir_commitattr+0x9c>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   2f2ce:	463b      	mov	r3, r7
   2f2d0:	464a      	mov	r2, r9
   2f2d2:	4621      	mov	r1, r4
   2f2d4:	4630      	mov	r0, r6
   2f2d6:	f7ff ff97 	bl	2f208 <lfs_dir_commitprog>
        if (err) {
   2f2da:	2800      	cmp	r0, #0
   2f2dc:	d1f5      	bne.n	2f2ca <lfs_dir_commitattr+0x84>
    commit->ptag = tag & 0x7fffffff;
   2f2de:	f8c4 a008 	str.w	sl, [r4, #8]
}
   2f2e2:	4628      	mov	r0, r5
   2f2e4:	b007      	add	sp, #28
   2f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_NOSPC;
   2f2ea:	f06f 051b 	mvn.w	r5, #27
   2f2ee:	e7f8      	b.n	2f2e2 <lfs_dir_commitattr+0x9c>

0002f2f0 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   2f2f0:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   2f2f2:	460a      	mov	r2, r1
   2f2f4:	e9d0 0100 	ldrd	r0, r1, [r0]
   2f2f8:	f7ff bfa5 	b.w	2f246 <lfs_dir_commitattr>

0002f2fc <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   2f2fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2f2fe:	460c      	mov	r4, r1
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f300:	3104      	adds	r1, #4
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   2f302:	4606      	mov	r6, r0
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f304:	f7f2 feca 	bl	2209c <lfs_alloc>
        if (err) {
   2f308:	4605      	mov	r5, r0
   2f30a:	bb80      	cbnz	r0, 2f36e <lfs_dir_alloc+0x72>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f30c:	4621      	mov	r1, r4
   2f30e:	4630      	mov	r0, r6
   2f310:	f7f2 fec4 	bl	2209c <lfs_alloc>
        if (err) {
   2f314:	4605      	mov	r5, r0
   2f316:	bb50      	cbnz	r0, 2f36e <lfs_dir_alloc+0x72>
    dir->rev = 0;
   2f318:	4622      	mov	r2, r4
    int err = lfs_bd_read(lfs,
   2f31a:	2304      	movs	r3, #4
    dir->rev = 0;
   2f31c:	f842 0f08 	str.w	r0, [r2, #8]!
    int err = lfs_bd_read(lfs,
   2f320:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f324:	9001      	str	r0, [sp, #4]
   2f326:	6822      	ldr	r2, [r4, #0]
   2f328:	4601      	mov	r1, r0
   2f32a:	9200      	str	r2, [sp, #0]
   2f32c:	4630      	mov	r0, r6
   2f32e:	4632      	mov	r2, r6
   2f330:	f7f1 fbc8 	bl	20ac4 <lfs_bd_read>
    if (err && err != LFS_ERR_CORRUPT) {
   2f334:	b110      	cbz	r0, 2f33c <lfs_dir_alloc+0x40>
   2f336:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f33a:	d11b      	bne.n	2f374 <lfs_dir_alloc+0x78>
    if (lfs->cfg->block_cycles > 0) {
   2f33c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f33e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2f340:	2a00      	cmp	r2, #0
   2f342:	dd0b      	ble.n	2f35c <lfs_dir_alloc+0x60>
	return lfs_aligndown(a + alignment-1, alignment);
   2f344:	68a3      	ldr	r3, [r4, #8]
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
   2f346:	3201      	adds	r2, #1
   2f348:	f042 0201 	orr.w	r2, r2, #1
   2f34c:	3b01      	subs	r3, #1
   2f34e:	4413      	add	r3, r2
	return a - (a % alignment);
   2f350:	fbb3 f1f2 	udiv	r1, r3, r2
   2f354:	fb02 3211 	mls	r2, r2, r1, r3
   2f358:	1a9b      	subs	r3, r3, r2
   2f35a:	60a3      	str	r3, [r4, #8]
    dir->etag = 0xffffffff;
   2f35c:	f04f 33ff 	mov.w	r3, #4294967295
   2f360:	2204      	movs	r2, #4
   2f362:	e9c4 2303 	strd	r2, r3, [r4, #12]
    dir->count = 0;
   2f366:	2200      	movs	r2, #0
    dir->tail[0] = LFS_BLOCK_NULL;
   2f368:	e9c4 2305 	strd	r2, r3, [r4, #20]
    dir->tail[1] = LFS_BLOCK_NULL;
   2f36c:	61e3      	str	r3, [r4, #28]
}
   2f36e:	4628      	mov	r0, r5
   2f370:	b004      	add	sp, #16
   2f372:	bd70      	pop	{r4, r5, r6, pc}
   2f374:	4605      	mov	r5, r0
   2f376:	e7fa      	b.n	2f36e <lfs_dir_alloc+0x72>

0002f378 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
   2f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f37c:	b091      	sub	sp, #68	; 0x44
   2f37e:	e9cd 2307 	strd	r2, r3, [sp, #28]
    if ((file->flags & LFS_F_INLINE) &&
   2f382:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
   2f384:	4606      	mov	r6, r0
    if ((file->flags & LFS_F_INLINE) &&
   2f386:	02d8      	lsls	r0, r3, #11
        const void *buffer, lfs_size_t size) {
   2f388:	460d      	mov	r5, r1
    if ((file->flags & LFS_F_INLINE) &&
   2f38a:	d52c      	bpl.n	2f3e6 <lfs_file_flushedwrite+0x6e>
            lfs_max(file->pos+nsize, file->ctz.size) >
   2f38c:	9b08      	ldr	r3, [sp, #32]
   2f38e:	6b48      	ldr	r0, [r1, #52]	; 0x34
                lfs->cfg->cache_size,
   2f390:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            lfs_max(file->pos+nsize, file->ctz.size) >
   2f392:	18c1      	adds	r1, r0, r3
	return (a > b) ? a : b;
   2f394:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                lfs->cfg->cache_size,
   2f396:	6a94      	ldr	r4, [r2, #40]	; 0x28
   2f398:	4299      	cmp	r1, r3
   2f39a:	bf38      	it	cc
   2f39c:	4619      	movcc	r1, r3
                (lfs->cfg->metadata_max ?
   2f39e:	6c93      	ldr	r3, [r2, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
   2f3a0:	b1e3      	cbz	r3, 2f3dc <lfs_file_flushedwrite+0x64>
	return (a < b) ? a : b;
   2f3a2:	f240 32fe 	movw	r2, #1022	; 0x3fe
   2f3a6:	42a2      	cmp	r2, r4
   2f3a8:	bf28      	it	cs
   2f3aa:	4622      	movcs	r2, r4
   2f3ac:	08db      	lsrs	r3, r3, #3
   2f3ae:	4293      	cmp	r3, r2
   2f3b0:	bf28      	it	cs
   2f3b2:	4613      	movcs	r3, r2
    if ((file->flags & LFS_F_INLINE) &&
   2f3b4:	428b      	cmp	r3, r1
   2f3b6:	d216      	bcs.n	2f3e6 <lfs_file_flushedwrite+0x6e>
    file->off = file->pos;
   2f3b8:	63e8      	str	r0, [r5, #60]	; 0x3c
    lfs->free.ack = lfs->cfg->block_count;
   2f3ba:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    int err = lfs_file_relocate(lfs, file);
   2f3bc:	4629      	mov	r1, r5
    lfs->free.ack = lfs->cfg->block_count;
   2f3be:	6a1b      	ldr	r3, [r3, #32]
    int err = lfs_file_relocate(lfs, file);
   2f3c0:	4630      	mov	r0, r6
    lfs->free.ack = lfs->cfg->block_count;
   2f3c2:	6633      	str	r3, [r6, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
   2f3c4:	f7f2 fef4 	bl	221b0 <lfs_file_relocate>
    if (err) {
   2f3c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f3ca:	4604      	mov	r4, r0
   2f3cc:	b140      	cbz	r0, 2f3e0 <lfs_file_flushedwrite+0x68>
                file->flags |= LFS_F_ERRED;
   2f3ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2f3d2:	632b      	str	r3, [r5, #48]	; 0x30
}
   2f3d4:	4620      	mov	r0, r4
   2f3d6:	b011      	add	sp, #68	; 0x44
   2f3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lfs_min(0x3fe, lfs_min(
   2f3dc:	69d3      	ldr	r3, [r2, #28]
   2f3de:	e7e0      	b.n	2f3a2 <lfs_file_flushedwrite+0x2a>
    file->flags &= ~LFS_F_INLINE;
   2f3e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2f3e4:	632b      	str	r3, [r5, #48]	; 0x30
            for (lfs_off_t i = 0; i < skips; i++) {
   2f3e6:	9b08      	ldr	r3, [sp, #32]
   2f3e8:	9305      	str	r3, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2f3ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
   2f3ee:	9304      	str	r3, [sp, #16]
    while (nsize > 0) {
   2f3f0:	9b05      	ldr	r3, [sp, #20]
   2f3f2:	b90b      	cbnz	r3, 2f3f8 <lfs_file_flushedwrite+0x80>
    return size;
   2f3f4:	9c08      	ldr	r4, [sp, #32]
   2f3f6:	e7ed      	b.n	2f3d4 <lfs_file_flushedwrite+0x5c>
        if (!(file->flags & LFS_F_WRITING) ||
   2f3f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f3fa:	0399      	lsls	r1, r3, #14
   2f3fc:	d50c      	bpl.n	2f418 <lfs_file_flushedwrite+0xa0>
                file->off == lfs->cfg->block_size) {
   2f3fe:	6eb2      	ldr	r2, [r6, #104]	; 0x68
        if (!(file->flags & LFS_F_WRITING) ||
   2f400:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   2f402:	69d2      	ldr	r2, [r2, #28]
   2f404:	4291      	cmp	r1, r2
   2f406:	f040 80a6 	bne.w	2f556 <lfs_file_flushedwrite+0x1de>
            if (!(file->flags & LFS_F_INLINE)) {
   2f40a:	02da      	lsls	r2, r3, #11
   2f40c:	d51e      	bpl.n	2f44c <lfs_file_flushedwrite+0xd4>
                file->block = LFS_BLOCK_INLINE;
   2f40e:	f06f 0301 	mvn.w	r3, #1
   2f412:	63ab      	str	r3, [r5, #56]	; 0x38
                file->off = file->pos;
   2f414:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f416:	e03c      	b.n	2f492 <lfs_file_flushedwrite+0x11a>
            if (!(file->flags & LFS_F_INLINE)) {
   2f418:	02db      	lsls	r3, r3, #11
   2f41a:	d4f8      	bmi.n	2f40e <lfs_file_flushedwrite+0x96>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   2f41c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f41e:	b1ab      	cbz	r3, 2f44c <lfs_file_flushedwrite+0xd4>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2f420:	f105 023c 	add.w	r2, r5, #60	; 0x3c
   2f424:	9202      	str	r2, [sp, #8]
   2f426:	3b01      	subs	r3, #1
   2f428:	f105 0238 	add.w	r2, r5, #56	; 0x38
   2f42c:	9201      	str	r2, [sp, #4]
   2f42e:	9300      	str	r3, [sp, #0]
   2f430:	4630      	mov	r0, r6
   2f432:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
   2f436:	9904      	ldr	r1, [sp, #16]
   2f438:	f7ff fe59 	bl	2f0ee <lfs_ctz_find.constprop.0>
                    if (err) {
   2f43c:	4604      	mov	r4, r0
   2f43e:	b108      	cbz	r0, 2f444 <lfs_file_flushedwrite+0xcc>
                file->flags |= LFS_F_ERRED;
   2f440:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f442:	e7c4      	b.n	2f3ce <lfs_file_flushedwrite+0x56>
                    lfs_cache_zero(lfs, &file->cache);
   2f444:	9904      	ldr	r1, [sp, #16]
   2f446:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   2f448:	f7ff fed3 	bl	2f1f2 <lfs_cache_zero.isra.0>
    lfs->free.ack = lfs->cfg->block_count;
   2f44c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f44e:	6a1b      	ldr	r3, [r3, #32]
   2f450:	6633      	str	r3, [r6, #96]	; 0x60
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   2f452:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2f454:	9309      	str	r3, [sp, #36]	; 0x24
   2f456:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f458:	9306      	str	r3, [sp, #24]
            lfs_size_t noff = size - 1;
   2f45a:	3b01      	subs	r3, #1
   2f45c:	930b      	str	r3, [sp, #44]	; 0x2c
        int err = lfs_alloc(lfs, &nblock);
   2f45e:	4630      	mov	r0, r6
   2f460:	a90d      	add	r1, sp, #52	; 0x34
   2f462:	f7f2 fe1b 	bl	2209c <lfs_alloc>
        if (err) {
   2f466:	4604      	mov	r4, r0
   2f468:	2800      	cmp	r0, #0
   2f46a:	d1e9      	bne.n	2f440 <lfs_file_flushedwrite+0xc8>
            err = lfs_bd_erase(lfs, nblock);
   2f46c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   2f470:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   2f472:	4649      	mov	r1, r9
   2f474:	f7f2 faec 	bl	21a50 <lfs_bd_erase.isra.0>
            if (err) {
   2f478:	4604      	mov	r4, r0
   2f47a:	b130      	cbz	r0, 2f48a <lfs_file_flushedwrite+0x112>
                    if (err == LFS_ERR_CORRUPT) {
   2f47c:	f114 0f54 	cmn.w	r4, #84	; 0x54
   2f480:	d1de      	bne.n	2f440 <lfs_file_flushedwrite+0xc8>
    rcache->block = LFS_BLOCK_NULL;
   2f482:	f04f 33ff 	mov.w	r3, #4294967295
   2f486:	642b      	str	r3, [r5, #64]	; 0x40
   2f488:	e7e9      	b.n	2f45e <lfs_file_flushedwrite+0xe6>
            if (size == 0) {
   2f48a:	9b06      	ldr	r3, [sp, #24]
   2f48c:	b91b      	cbnz	r3, 2f496 <lfs_file_flushedwrite+0x11e>
                *block = nblock;
   2f48e:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
                file->off = file->pos;
   2f492:	63eb      	str	r3, [r5, #60]	; 0x3c
   2f494:	e05b      	b.n	2f54e <lfs_file_flushedwrite+0x1d6>
            lfs_size_t noff = size - 1;
   2f496:	6eb7      	ldr	r7, [r6, #104]	; 0x68
   2f498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   2f49a:	4638      	mov	r0, r7
   2f49c:	a90e      	add	r1, sp, #56	; 0x38
            lfs_size_t noff = size - 1;
   2f49e:	930e      	str	r3, [sp, #56]	; 0x38
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   2f4a0:	f7ff fe08 	bl	2f0b4 <lfs_ctz_index.isra.0>
            noff = noff + 1;
   2f4a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f4a6:	f103 0801 	add.w	r8, r3, #1
            if (noff != lfs->cfg->block_size) {
   2f4aa:	69fb      	ldr	r3, [r7, #28]
            noff = noff + 1;
   2f4ac:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
            if (noff != lfs->cfg->block_size) {
   2f4b0:	4598      	cmp	r8, r3
   2f4b2:	d173      	bne.n	2f59c <lfs_file_flushedwrite+0x224>
            index += 1;
   2f4b4:	3001      	adds	r0, #1
	return __builtin_ctz(a);
   2f4b6:	fa90 fba0 	rbit	fp, r0
   2f4ba:	fabb fb8b 	clz	fp, fp
            for (lfs_off_t i = 0; i < skips; i++) {
   2f4be:	46a0      	mov	r8, r4
            lfs_block_t nhead = head;
   2f4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
            lfs_size_t skips = lfs_ctz(index) + 1;
   2f4c2:	f10b 0a01 	add.w	sl, fp, #1
            lfs_block_t nhead = head;
   2f4c6:	930f      	str	r3, [sp, #60]	; 0x3c
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   2f4c8:	af0f      	add	r7, sp, #60	; 0x3c
   2f4ca:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2f4ce:	930a      	str	r3, [sp, #40]	; 0x28
   2f4d0:	2304      	movs	r3, #4
   2f4d2:	e9cd 7302 	strd	r7, r3, [sp, #8]
   2f4d6:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2f4da:	e9cd 9300 	strd	r9, r3, [sp]
   2f4de:	4632      	mov	r2, r6
   2f4e0:	2301      	movs	r3, #1
   2f4e2:	4630      	mov	r0, r6
   2f4e4:	9904      	ldr	r1, [sp, #16]
   2f4e6:	f7f2 fc6b 	bl	21dc0 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   2f4ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                if (err) {
   2f4ec:	4604      	mov	r4, r0
   2f4ee:	2800      	cmp	r0, #0
   2f4f0:	d1c4      	bne.n	2f47c <lfs_file_flushedwrite+0x104>
                if (i != skips-1) {
   2f4f2:	45c3      	cmp	fp, r8
   2f4f4:	d157      	bne.n	2f5a6 <lfs_file_flushedwrite+0x22e>
            for (lfs_off_t i = 0; i < skips; i++) {
   2f4f6:	f108 0801 	add.w	r8, r8, #1
   2f4fa:	45c2      	cmp	sl, r8
   2f4fc:	d8e5      	bhi.n	2f4ca <lfs_file_flushedwrite+0x152>
            *block = nblock;
   2f4fe:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
            *off = 4*skips;
   2f502:	ea4f 038a 	mov.w	r3, sl, lsl #2
   2f506:	e7c4      	b.n	2f492 <lfs_file_flushedwrite+0x11a>
                    err = lfs_bd_read(lfs,
   2f508:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2f50a:	4632      	mov	r2, r6
   2f50c:	9300      	str	r3, [sp, #0]
   2f50e:	2100      	movs	r1, #0
   2f510:	4630      	mov	r0, r6
   2f512:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   2f516:	f8cd a004 	str.w	sl, [sp, #4]
   2f51a:	eba8 030a 	sub.w	r3, r8, sl
   2f51e:	f7f1 fad1 	bl	20ac4 <lfs_bd_read>
                    if (err) {
   2f522:	4604      	mov	r4, r0
   2f524:	2800      	cmp	r0, #0
   2f526:	d18b      	bne.n	2f440 <lfs_file_flushedwrite+0xc8>
                    err = lfs_bd_prog(lfs,
   2f528:	2301      	movs	r3, #1
   2f52a:	4632      	mov	r2, r6
   2f52c:	4630      	mov	r0, r6
   2f52e:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   2f532:	e9cd 9a00 	strd	r9, sl, [sp]
   2f536:	9904      	ldr	r1, [sp, #16]
   2f538:	f7f2 fc42 	bl	21dc0 <lfs_bd_prog>
                    if (err) {
   2f53c:	4604      	mov	r4, r0
   2f53e:	2800      	cmp	r0, #0
   2f540:	d19c      	bne.n	2f47c <lfs_file_flushedwrite+0x104>
                for (lfs_off_t i = 0; i < noff; i++) {
   2f542:	f10a 0a01 	add.w	sl, sl, #1
   2f546:	45d0      	cmp	r8, sl
   2f548:	d8de      	bhi.n	2f508 <lfs_file_flushedwrite+0x190>
                *off = noff;
   2f54a:	e9c5 980e 	strd	r9, r8, [r5, #56]	; 0x38
            file->flags |= LFS_F_WRITING;
   2f54e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f554:	632b      	str	r3, [r5, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   2f556:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f558:	69df      	ldr	r7, [r3, #28]
   2f55a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f55c:	1aff      	subs	r7, r7, r3
	return (a < b) ? a : b;
   2f55e:	9b05      	ldr	r3, [sp, #20]
   2f560:	429f      	cmp	r7, r3
   2f562:	bf28      	it	cs
   2f564:	461f      	movcs	r7, r3
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   2f566:	9b07      	ldr	r3, [sp, #28]
   2f568:	9703      	str	r7, [sp, #12]
   2f56a:	9302      	str	r3, [sp, #8]
   2f56c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f56e:	4632      	mov	r2, r6
   2f570:	9301      	str	r3, [sp, #4]
   2f572:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2f574:	4630      	mov	r0, r6
   2f576:	9300      	str	r3, [sp, #0]
   2f578:	9904      	ldr	r1, [sp, #16]
   2f57a:	2301      	movs	r3, #1
   2f57c:	f7f2 fc20 	bl	21dc0 <lfs_bd_prog>
            if (err) {
   2f580:	4604      	mov	r4, r0
   2f582:	b300      	cbz	r0, 2f5c6 <lfs_file_flushedwrite+0x24e>
                if (err == LFS_ERR_CORRUPT) {
   2f584:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f588:	f47f af5a 	bne.w	2f440 <lfs_file_flushedwrite+0xc8>
            err = lfs_file_relocate(lfs, file);
   2f58c:	4629      	mov	r1, r5
   2f58e:	4630      	mov	r0, r6
   2f590:	f7f2 fe0e 	bl	221b0 <lfs_file_relocate>
            if (err) {
   2f594:	4604      	mov	r4, r0
   2f596:	2800      	cmp	r0, #0
   2f598:	d0e5      	beq.n	2f566 <lfs_file_flushedwrite+0x1ee>
   2f59a:	e751      	b.n	2f440 <lfs_file_flushedwrite+0xc8>
                for (lfs_off_t i = 0; i < noff; i++) {
   2f59c:	46a2      	mov	sl, r4
                    err = lfs_bd_read(lfs,
   2f59e:	f04f 0b01 	mov.w	fp, #1
   2f5a2:	af0f      	add	r7, sp, #60	; 0x3c
   2f5a4:	e7cf      	b.n	2f546 <lfs_file_flushedwrite+0x1ce>
                    err = lfs_bd_read(lfs,
   2f5a6:	2204      	movs	r2, #4
   2f5a8:	e9cd 7202 	strd	r7, r2, [sp, #8]
   2f5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2f5ae:	4601      	mov	r1, r0
   2f5b0:	e9cd 3200 	strd	r3, r2, [sp]
   2f5b4:	4630      	mov	r0, r6
   2f5b6:	2304      	movs	r3, #4
   2f5b8:	4632      	mov	r2, r6
   2f5ba:	f7f1 fa83 	bl	20ac4 <lfs_bd_read>
                    if (err) {
   2f5be:	4604      	mov	r4, r0
   2f5c0:	2800      	cmp	r0, #0
   2f5c2:	d098      	beq.n	2f4f6 <lfs_file_flushedwrite+0x17e>
   2f5c4:	e73c      	b.n	2f440 <lfs_file_flushedwrite+0xc8>
        file->pos += diff;
   2f5c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f5c8:	443b      	add	r3, r7
   2f5ca:	636b      	str	r3, [r5, #52]	; 0x34
        file->off += diff;
   2f5cc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f5ce:	443b      	add	r3, r7
   2f5d0:	63eb      	str	r3, [r5, #60]	; 0x3c
        data += diff;
   2f5d2:	9b07      	ldr	r3, [sp, #28]
   2f5d4:	443b      	add	r3, r7
   2f5d6:	9307      	str	r3, [sp, #28]
        nsize -= diff;
   2f5d8:	9b05      	ldr	r3, [sp, #20]
   2f5da:	1bdb      	subs	r3, r3, r7
   2f5dc:	9305      	str	r3, [sp, #20]
    lfs->free.ack = lfs->cfg->block_count;
   2f5de:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f5e0:	6a1b      	ldr	r3, [r3, #32]
   2f5e2:	6633      	str	r3, [r6, #96]	; 0x60
}
   2f5e4:	e704      	b.n	2f3f0 <lfs_file_flushedwrite+0x78>

0002f5e6 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f5e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (file->flags & LFS_F_READING) {
   2f5e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f5ea:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
   2f5ec:	0359      	lsls	r1, r3, #13
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f5ee:	4605      	mov	r5, r0
   2f5f0:	b097      	sub	sp, #92	; 0x5c
    if (file->flags & LFS_F_READING) {
   2f5f2:	d508      	bpl.n	2f606 <lfs_file_flush+0x20>
        if (!(file->flags & LFS_F_INLINE)) {
   2f5f4:	02da      	lsls	r2, r3, #11
    rcache->block = LFS_BLOCK_NULL;
   2f5f6:	bf58      	it	pl
   2f5f8:	f04f 32ff 	movpl.w	r2, #4294967295
        file->flags &= ~LFS_F_READING;
   2f5fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    rcache->block = LFS_BLOCK_NULL;
   2f600:	bf58      	it	pl
   2f602:	6422      	strpl	r2, [r4, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
   2f604:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
   2f606:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2f608:	038b      	lsls	r3, r1, #14
   2f60a:	d402      	bmi.n	2f612 <lfs_file_flush+0x2c>
    return 0;
   2f60c:	2000      	movs	r0, #0
}
   2f60e:	b017      	add	sp, #92	; 0x5c
   2f610:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!(file->flags & LFS_F_INLINE)) {
   2f612:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
        lfs_off_t pos = file->pos;
   2f616:	6b66      	ldr	r6, [r4, #52]	; 0x34
                .ctz.size = file->ctz.size,
   2f618:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        if (!(file->flags & LFS_F_INLINE)) {
   2f61a:	d13f      	bne.n	2f69c <lfs_file_flush+0xb6>
            lfs_file_t orig = {
   2f61c:	2254      	movs	r2, #84	; 0x54
   2f61e:	a801      	add	r0, sp, #4
   2f620:	f000 ffcb 	bl	305ba <memset>
   2f624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2f626:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
   2f62a:	2301      	movs	r3, #1
   2f62c:	af11      	add	r7, sp, #68	; 0x44
   2f62e:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
   2f632:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2f636:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
   2f63a:	f04f 37ff 	mov.w	r7, #4294967295
   2f63e:	602f      	str	r7, [r5, #0]
            while (file->pos < file->ctz.size) {
   2f640:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2f642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2f644:	429a      	cmp	r2, r3
   2f646:	d312      	bcc.n	2f66e <lfs_file_flush+0x88>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
   2f648:	f104 0740 	add.w	r7, r4, #64	; 0x40
   2f64c:	2301      	movs	r3, #1
   2f64e:	462a      	mov	r2, r5
   2f650:	4639      	mov	r1, r7
   2f652:	4628      	mov	r0, r5
   2f654:	f7f2 fb5a 	bl	21d0c <lfs_bd_flush>
                if (err) {
   2f658:	b320      	cbz	r0, 2f6a4 <lfs_file_flush+0xbe>
                    if (err == LFS_ERR_CORRUPT) {
   2f65a:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f65e:	d1d6      	bne.n	2f60e <lfs_file_flush+0x28>
                err = lfs_file_relocate(lfs, file);
   2f660:	4621      	mov	r1, r4
   2f662:	4628      	mov	r0, r5
   2f664:	f7f2 fda4 	bl	221b0 <lfs_file_relocate>
                if (err) {
   2f668:	2800      	cmp	r0, #0
   2f66a:	d0ef      	beq.n	2f64c <lfs_file_flush+0x66>
   2f66c:	e7cf      	b.n	2f60e <lfs_file_flush+0x28>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
   2f66e:	2301      	movs	r3, #1
   2f670:	4628      	mov	r0, r5
   2f672:	f10d 0203 	add.w	r2, sp, #3
   2f676:	a901      	add	r1, sp, #4
   2f678:	f7f2 f8ca 	bl	21810 <lfs_file_flushedread>
                if (res < 0) {
   2f67c:	2800      	cmp	r0, #0
   2f67e:	dbc6      	blt.n	2f60e <lfs_file_flush+0x28>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
   2f680:	2301      	movs	r3, #1
   2f682:	4621      	mov	r1, r4
   2f684:	4628      	mov	r0, r5
   2f686:	f10d 0203 	add.w	r2, sp, #3
   2f68a:	f7ff fe75 	bl	2f378 <lfs_file_flushedwrite>
                if (res < 0) {
   2f68e:	2800      	cmp	r0, #0
   2f690:	dbbd      	blt.n	2f60e <lfs_file_flush+0x28>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
   2f692:	682b      	ldr	r3, [r5, #0]
   2f694:	3301      	adds	r3, #1
   2f696:	d0d3      	beq.n	2f640 <lfs_file_flush+0x5a>
    rcache->block = LFS_BLOCK_NULL;
   2f698:	9711      	str	r7, [sp, #68]	; 0x44
   2f69a:	e7d0      	b.n	2f63e <lfs_file_flush+0x58>
            file->pos = lfs_max(file->pos, file->ctz.size);
   2f69c:	42be      	cmp	r6, r7
   2f69e:	bf2c      	ite	cs
   2f6a0:	6366      	strcs	r6, [r4, #52]	; 0x34
   2f6a2:	6367      	strcc	r7, [r4, #52]	; 0x34
        file->ctz.head = file->block;
   2f6a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2f6a6:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
   2f6a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2f6aa:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
   2f6ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f6ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
   2f6b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        file->pos = pos;
   2f6b6:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
   2f6ba:	e7a7      	b.n	2f60c <lfs_file_flush+0x26>

0002f6bc <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   2f6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f6c0:	b08d      	sub	sp, #52	; 0x34
   2f6c2:	460c      	mov	r4, r1
    int err = lfs_dir_alloc(lfs, &tail);
   2f6c4:	a904      	add	r1, sp, #16
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   2f6c6:	4605      	mov	r5, r0
   2f6c8:	4617      	mov	r7, r2
   2f6ca:	4698      	mov	r8, r3
   2f6cc:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
    int err = lfs_dir_alloc(lfs, &tail);
   2f6d0:	f7ff fe14 	bl	2f2fc <lfs_dir_alloc>
    if (err) {
   2f6d4:	4606      	mov	r6, r0
   2f6d6:	bb28      	cbnz	r0, 2f724 <lfs_dir_split+0x68>
    tail.split = dir->split;
   2f6d8:	7de3      	ldrb	r3, [r4, #23]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f6da:	463a      	mov	r2, r7
    tail.split = dir->split;
   2f6dc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   2f6e0:	69a3      	ldr	r3, [r4, #24]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f6e2:	4628      	mov	r0, r5
    tail.tail[0] = dir->tail[0];
   2f6e4:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   2f6e6:	69e3      	ldr	r3, [r4, #28]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f6e8:	a904      	add	r1, sp, #16
    tail.tail[1] = dir->tail[1];
   2f6ea:	930b      	str	r3, [sp, #44]	; 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f6ec:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2f6f0:	e9cd 9301 	strd	r9, r3, [sp, #4]
   2f6f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2f6f6:	9300      	str	r3, [sp, #0]
   2f6f8:	4643      	mov	r3, r8
   2f6fa:	f7f2 fe27 	bl	2234c <lfs_dir_compact>
    if (res < 0) {
   2f6fe:	2800      	cmp	r0, #0
   2f700:	db14      	blt.n	2f72c <lfs_dir_split+0x70>
    dir->split = true;
   2f702:	2301      	movs	r3, #1
    dir->tail[0] = tail.pair[0];
   2f704:	9f04      	ldr	r7, [sp, #16]
    dir->tail[1] = tail.pair[1];
   2f706:	9a05      	ldr	r2, [sp, #20]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   2f708:	4620      	mov	r0, r4
    dir->tail[0] = tail.pair[0];
   2f70a:	61a7      	str	r7, [r4, #24]
    dir->tail[1] = tail.pair[1];
   2f70c:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   2f70e:	75e3      	strb	r3, [r4, #23]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   2f710:	f105 0120 	add.w	r1, r5, #32
   2f714:	f7ff fb9e 	bl	2ee54 <lfs_pair_cmp>
   2f718:	b920      	cbnz	r0, 2f724 <lfs_dir_split+0x68>
   2f71a:	f1b9 0f00 	cmp.w	r9, #0
   2f71e:	d101      	bne.n	2f724 <lfs_dir_split+0x68>
        lfs->root[1] = tail.pair[1];
   2f720:	e9c5 7208 	strd	r7, r2, [r5, #32]
}
   2f724:	4630      	mov	r0, r6
   2f726:	b00d      	add	sp, #52	; 0x34
   2f728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f72c:	4606      	mov	r6, r0
   2f72e:	e7f9      	b.n	2f724 <lfs_dir_split+0x68>

0002f730 <lfs_file_rawseek>:
        lfs_soff_t off, int whence) {
   2f730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f734:	4606      	mov	r6, r0
   2f736:	460d      	mov	r5, r1
   2f738:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
   2f73a:	6b48      	ldr	r0, [r1, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   2f73c:	b11b      	cbz	r3, 2f746 <lfs_file_rawseek+0x16>
    } else if (whence == LFS_SEEK_CUR) {
   2f73e:	2b01      	cmp	r3, #1
   2f740:	d126      	bne.n	2f790 <lfs_file_rawseek+0x60>
        if ((lfs_soff_t)file->pos + off < 0) {
   2f742:	1884      	adds	r4, r0, r2
        if (res < 0) {
   2f744:	d429      	bmi.n	2f79a <lfs_file_rawseek+0x6a>
    if (npos > lfs->file_max) {
   2f746:	6f33      	ldr	r3, [r6, #112]	; 0x70
   2f748:	42a3      	cmp	r3, r4
   2f74a:	d326      	bcc.n	2f79a <lfs_file_rawseek+0x6a>
    if (file->pos == npos) {
   2f74c:	4284      	cmp	r4, r0
   2f74e:	d01c      	beq.n	2f78a <lfs_file_rawseek+0x5a>
        !(file->flags & LFS_F_WRITING)
   2f750:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    if (
   2f752:	039b      	lsls	r3, r3, #14
   2f754:	d42d      	bmi.n	2f7b2 <lfs_file_rawseek+0x82>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
   2f756:	f8d6 8068 	ldr.w	r8, [r6, #104]	; 0x68
   2f75a:	4669      	mov	r1, sp
   2f75c:	9000      	str	r0, [sp, #0]
   2f75e:	4640      	mov	r0, r8
   2f760:	f7ff fca8 	bl	2f0b4 <lfs_ctz_index.isra.0>
        int nindex = lfs_ctz_index(lfs, &noff);
   2f764:	a901      	add	r1, sp, #4
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
   2f766:	4607      	mov	r7, r0
        int nindex = lfs_ctz_index(lfs, &noff);
   2f768:	4640      	mov	r0, r8
        lfs_off_t noff = npos;
   2f76a:	9401      	str	r4, [sp, #4]
        int nindex = lfs_ctz_index(lfs, &noff);
   2f76c:	f7ff fca2 	bl	2f0b4 <lfs_ctz_index.isra.0>
        if (oindex == nindex
   2f770:	4287      	cmp	r7, r0
   2f772:	d11e      	bne.n	2f7b2 <lfs_file_rawseek+0x82>
                && noff >= file->cache.off
   2f774:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   2f776:	9a01      	ldr	r2, [sp, #4]
   2f778:	4293      	cmp	r3, r2
   2f77a:	d81a      	bhi.n	2f7b2 <lfs_file_rawseek+0x82>
                && noff < file->cache.off + file->cache.size) {
   2f77c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   2f77e:	440b      	add	r3, r1
   2f780:	429a      	cmp	r2, r3
   2f782:	d216      	bcs.n	2f7b2 <lfs_file_rawseek+0x82>
            file->pos = npos;
   2f784:	636c      	str	r4, [r5, #52]	; 0x34
            file->off = noff;
   2f786:	63ea      	str	r2, [r5, #60]	; 0x3c
    return npos;
   2f788:	4620      	mov	r0, r4
}
   2f78a:	b002      	add	sp, #8
   2f78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (whence == LFS_SEEK_END) {
   2f790:	2b02      	cmp	r3, #2
   2f792:	d005      	beq.n	2f7a0 <lfs_file_rawseek+0x70>
    if (npos > lfs->file_max) {
   2f794:	6f33      	ldr	r3, [r6, #112]	; 0x70
   2f796:	4298      	cmp	r0, r3
   2f798:	d9f7      	bls.n	2f78a <lfs_file_rawseek+0x5a>
            return LFS_ERR_INVAL;
   2f79a:	f06f 0015 	mvn.w	r0, #21
   2f79e:	e7f4      	b.n	2f78a <lfs_file_rawseek+0x5a>
    if (file->flags & LFS_F_WRITING) {
   2f7a0:	e9d1 320b 	ldrd	r3, r2, [r1, #44]	; 0x2c
   2f7a4:	0392      	lsls	r2, r2, #14
   2f7a6:	d502      	bpl.n	2f7ae <lfs_file_rawseek+0x7e>
	return (a > b) ? a : b;
   2f7a8:	4283      	cmp	r3, r0
   2f7aa:	bf38      	it	cc
   2f7ac:	4603      	movcc	r3, r0
        if (res < 0) {
   2f7ae:	18e4      	adds	r4, r4, r3
   2f7b0:	e7c8      	b.n	2f744 <lfs_file_rawseek+0x14>
    int err = lfs_file_flush(lfs, file);
   2f7b2:	4629      	mov	r1, r5
   2f7b4:	4630      	mov	r0, r6
   2f7b6:	f7ff ff16 	bl	2f5e6 <lfs_file_flush>
    if (err) {
   2f7ba:	2800      	cmp	r0, #0
   2f7bc:	d1e5      	bne.n	2f78a <lfs_file_rawseek+0x5a>
    file->pos = npos;
   2f7be:	636c      	str	r4, [r5, #52]	; 0x34
   2f7c0:	e7e2      	b.n	2f788 <lfs_file_rawseek+0x58>

0002f7c2 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
   2f7c2:	b510      	push	{r4, lr}
   2f7c4:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
   2f7c6:	f7f3 f96b 	bl	22aa0 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
   2f7ca:	2800      	cmp	r0, #0
   2f7cc:	db06      	blt.n	2f7dc <lfs_dir_commit+0x1a>
    if (orphans) {
   2f7ce:	d005      	beq.n	2f7dc <lfs_dir_commit+0x1a>
        int err = lfs_fs_deorphan(lfs, false);
   2f7d0:	4620      	mov	r0, r4
}
   2f7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        int err = lfs_fs_deorphan(lfs, false);
   2f7d6:	2100      	movs	r1, #0
   2f7d8:	f7f3 bb00 	b.w	22ddc <lfs_fs_deorphan>
}
   2f7dc:	bd10      	pop	{r4, pc}

0002f7de <lfs_file_rawsync>:
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f7de:	b570      	push	{r4, r5, r6, lr}
    if (file->flags & LFS_F_ERRED) {
   2f7e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f7e2:	4605      	mov	r5, r0
    if (file->flags & LFS_F_ERRED) {
   2f7e4:	031e      	lsls	r6, r3, #12
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f7e6:	460c      	mov	r4, r1
   2f7e8:	b086      	sub	sp, #24
    if (file->flags & LFS_F_ERRED) {
   2f7ea:	d440      	bmi.n	2f86e <lfs_file_rawsync+0x90>
    int err = lfs_file_flush(lfs, file);
   2f7ec:	f7ff fefb 	bl	2f5e6 <lfs_file_flush>
    if (err) {
   2f7f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2f7f2:	b120      	cbz	r0, 2f7fe <lfs_file_rawsync+0x20>
        file->flags |= LFS_F_ERRED;
   2f7f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   2f7f8:	6322      	str	r2, [r4, #48]	; 0x30
}
   2f7fa:	b006      	add	sp, #24
   2f7fc:	bd70      	pop	{r4, r5, r6, pc}
    if ((file->flags & LFS_F_DIRTY) &&
   2f7fe:	03d1      	lsls	r1, r2, #15
   2f800:	d535      	bpl.n	2f86e <lfs_file_rawsync+0x90>
            !lfs_pair_isnull(file->m.pair)) {
   2f802:	f104 0608 	add.w	r6, r4, #8
   2f806:	4630      	mov	r0, r6
   2f808:	f7ff fb1a 	bl	2ee40 <lfs_pair_isnull>
    if ((file->flags & LFS_F_DIRTY) &&
   2f80c:	2800      	cmp	r0, #0
   2f80e:	d12e      	bne.n	2f86e <lfs_file_rawsync+0x90>
        if (file->flags & LFS_F_INLINE) {
   2f810:	02d3      	lsls	r3, r2, #11
            ctz = file->ctz;
   2f812:	bf5f      	itttt	pl
   2f814:	466b      	movpl	r3, sp
   2f816:	e9d4 010a 	ldrdpl	r0, r1, [r4, #40]	; 0x28
            size = sizeof(ctz);
   2f81a:	2208      	movpl	r2, #8
            ctz = file->ctz;
   2f81c:	e9c3 0100 	strdpl	r0, r1, [r3]
            type = LFS_TYPE_INLINESTRUCT;
   2f820:	bf4c      	ite	mi
   2f822:	f240 2001 	movwmi	r0, #513	; 0x201
            type = LFS_TYPE_CTZSTRUCT;
   2f826:	f240 2002 	movwpl	r0, #514	; 0x202
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f82a:	88a1      	ldrh	r1, [r4, #4]
            size = file->ctz.size;
   2f82c:	bf44      	itt	mi
   2f82e:	6ae2      	ldrmi	r2, [r4, #44]	; 0x2c
            buffer = file->cache.buffer;
   2f830:	6ce3      	ldrmi	r3, [r4, #76]	; 0x4c
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f832:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
   2f836:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
   2f83a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f83e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2f840:	4628      	mov	r0, r5
   2f842:	6893      	ldr	r3, [r2, #8]
   2f844:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
   2f848:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   2f84c:	9304      	str	r3, [sp, #16]
   2f84e:	6853      	ldr	r3, [r2, #4]
   2f850:	4631      	mov	r1, r6
   2f852:	9305      	str	r3, [sp, #20]
   2f854:	aa02      	add	r2, sp, #8
   2f856:	2302      	movs	r3, #2
   2f858:	f7ff ffb3 	bl	2f7c2 <lfs_dir_commit>
        if (err) {
   2f85c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f85e:	b118      	cbz	r0, 2f868 <lfs_file_rawsync+0x8a>
            file->flags |= LFS_F_ERRED;
   2f860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2f864:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   2f866:	e7c8      	b.n	2f7fa <lfs_file_rawsync+0x1c>
        file->flags &= ~LFS_F_DIRTY;
   2f868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2f86c:	6323      	str	r3, [r4, #48]	; 0x30
        return 0;
   2f86e:	2000      	movs	r0, #0
   2f870:	e7c3      	b.n	2f7fa <lfs_file_rawsync+0x1c>

0002f872 <lfs_file_rawclose>:
static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
   2f872:	b570      	push	{r4, r5, r6, lr}
   2f874:	4605      	mov	r5, r0
   2f876:	460c      	mov	r4, r1
    int err = lfs_file_rawsync(lfs, file);
   2f878:	f7ff ffb1 	bl	2f7de <lfs_file_rawsync>
   2f87c:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f87e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2f880:	f105 0228 	add.w	r2, r5, #40	; 0x28
   2f884:	b11b      	cbz	r3, 2f88e <lfs_file_rawclose+0x1c>
        if (*p == mlist) {
   2f886:	429c      	cmp	r4, r3
            *p = (*p)->next;
   2f888:	6819      	ldr	r1, [r3, #0]
        if (*p == mlist) {
   2f88a:	d108      	bne.n	2f89e <lfs_file_rawclose+0x2c>
            *p = (*p)->next;
   2f88c:	6011      	str	r1, [r2, #0]
    if (!file->cfg->buffer) {
   2f88e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2f890:	681b      	ldr	r3, [r3, #0]
   2f892:	b913      	cbnz	r3, 2f89a <lfs_file_rawclose+0x28>
	free(p);
   2f894:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2f896:	f7f8 ff01 	bl	2869c <free>
}
   2f89a:	4630      	mov	r0, r6
   2f89c:	bd70      	pop	{r4, r5, r6, pc}
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f89e:	461a      	mov	r2, r3
            *p = (*p)->next;
   2f8a0:	460b      	mov	r3, r1
   2f8a2:	e7ef      	b.n	2f884 <lfs_file_rawclose+0x12>

0002f8a4 <lfs_unmount>:
    return lfs_deinit(lfs);
   2f8a4:	f7ff bb3e 	b.w	2ef24 <lfs_deinit>

0002f8a8 <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   2f8a8:	b530      	push	{r4, r5, lr}
   2f8aa:	b08b      	sub	sp, #44	; 0x2c
   2f8ac:	9101      	str	r1, [sp, #4]
   2f8ae:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   2f8b0:	2300      	movs	r3, #0
   2f8b2:	aa01      	add	r2, sp, #4
   2f8b4:	a902      	add	r1, sp, #8
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   2f8b6:	4604      	mov	r4, r0
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   2f8b8:	f7f1 ff04 	bl	216c4 <lfs_dir_find>
    if (tag < 0) {
   2f8bc:	2800      	cmp	r0, #0
   2f8be:	db06      	blt.n	2f8ce <lfs_stat+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   2f8c0:	f3c0 2289 	ubfx	r2, r0, #10, #10
   2f8c4:	462b      	mov	r3, r5
   2f8c6:	4620      	mov	r0, r4
   2f8c8:	a902      	add	r1, sp, #8
   2f8ca:	f7f1 fa7f 	bl	20dcc <lfs_dir_getinfo>
}
   2f8ce:	b00b      	add	sp, #44	; 0x2c
   2f8d0:	bd30      	pop	{r4, r5, pc}

0002f8d2 <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f8d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2f8d4:	f100 0228 	add.w	r2, r0, #40	; 0x28
   2f8d8:	b11b      	cbz	r3, 2f8e2 <lfs_dir_close+0x10>
        if (*p == mlist) {
   2f8da:	4299      	cmp	r1, r3
            *p = (*p)->next;
   2f8dc:	6818      	ldr	r0, [r3, #0]
        if (*p == mlist) {
   2f8de:	d102      	bne.n	2f8e6 <lfs_dir_close+0x14>
            *p = (*p)->next;
   2f8e0:	6010      	str	r0, [r2, #0]
}
   2f8e2:	2000      	movs	r0, #0
   2f8e4:	4770      	bx	lr
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f8e6:	461a      	mov	r2, r3
            *p = (*p)->next;
   2f8e8:	4603      	mov	r3, r0
   2f8ea:	e7f5      	b.n	2f8d8 <lfs_dir_close+0x6>

0002f8ec <lfs_fs_size>:
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);

    lfs_ssize_t res = lfs_fs_rawsize(lfs);
   2f8ec:	f7f2 b8a2 	b.w	21a34 <lfs_fs_rawsize>

0002f8f0 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2f8f0:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2f8f2:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2f8f4:	4602      	mov	r2, r0
   2f8f6:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2f8f8:	b984      	cbnz	r4, 2f91c <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   2f8fa:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   2f8fc:	291f      	cmp	r1, #31
   2f8fe:	bf98      	it	ls
   2f900:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2f904:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2f906:	b161      	cbz	r1, 2f922 <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   2f908:	6880      	ldr	r0, [r0, #8]
   2f90a:	4283      	cmp	r3, r0
   2f90c:	d209      	bcs.n	2f922 <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2f90e:	6910      	ldr	r0, [r2, #16]
   2f910:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2f912:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2f916:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2f918:	bc10      	pop	{r4}
   2f91a:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2f91c:	4623      	mov	r3, r4
}
   2f91e:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2f920:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2f922:	f04f 30ff 	mov.w	r0, #4294967295
   2f926:	e7f7      	b.n	2f918 <metal_io_phys+0x28>

0002f928 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2f928:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   2f92a:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   2f92c:	4605      	mov	r5, r0
   2f92e:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2f930:	b9e3      	cbnz	r3, 2f96c <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2f932:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2f934:	1c62      	adds	r2, r4, #1
   2f936:	bf09      	itett	eq
   2f938:	6843      	ldreq	r3, [r0, #4]
   2f93a:	400c      	andne	r4, r1
   2f93c:	681c      	ldreq	r4, [r3, #0]
   2f93e:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2f940:	4621      	mov	r1, r4
   2f942:	4628      	mov	r0, r5
   2f944:	f7ff ffd4 	bl	2f8f0 <metal_io_phys>
   2f948:	4286      	cmp	r6, r0
   2f94a:	d007      	beq.n	2f95c <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   2f94c:	692b      	ldr	r3, [r5, #16]
   2f94e:	3301      	adds	r3, #1
   2f950:	441c      	add	r4, r3
		} while (offset < io->size);
   2f952:	68ab      	ldr	r3, [r5, #8]
   2f954:	429c      	cmp	r4, r3
   2f956:	d3f3      	bcc.n	2f940 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   2f958:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2f95c:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2f95e:	1c43      	adds	r3, r0, #1
   2f960:	d007      	beq.n	2f972 <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2f962:	68ab      	ldr	r3, [r5, #8]
   2f964:	42a3      	cmp	r3, r4
   2f966:	d904      	bls.n	2f972 <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   2f968:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   2f96a:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2f96c:	4798      	blx	r3
   2f96e:	4604      	mov	r4, r0
   2f970:	e7f4      	b.n	2f95c <metal_io_phys_to_virt+0x34>
		: NULL);
   2f972:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2f974:	e7f9      	b.n	2f96a <metal_io_phys_to_virt+0x42>

0002f976 <virtqueue_create>:
{
   2f976:	b530      	push	{r4, r5, lr}
   2f978:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   2f97a:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2f97e:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2f980:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2f982:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   2f984:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   2f986:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   2f988:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2f98a:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   2f98c:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2f98e:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2f992:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   2f996:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2f99a:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2f99c:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2f99e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2f9a2:	1c6a      	adds	r2, r5, #1
   2f9a4:	4413      	add	r3, r2
   2f9a6:	426d      	negs	r5, r5
   2f9a8:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2f9aa:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2f9ac:	6983      	ldr	r3, [r0, #24]
   2f9ae:	b953      	cbnz	r3, 2f9c6 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2f9b0:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2f9b2:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   2f9b4:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   2f9b6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   2f9ba:	db06      	blt.n	2f9ca <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2f9bc:	2300      	movs	r3, #0
   2f9be:	7393      	strb	r3, [r2, #14]
   2f9c0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2f9c4:	73d3      	strb	r3, [r2, #15]
}
   2f9c6:	2000      	movs	r0, #0
   2f9c8:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   2f9ca:	3301      	adds	r3, #1
   2f9cc:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2f9ce:	e7f0      	b.n	2f9b2 <virtqueue_create+0x3c>

0002f9d0 <virtqueue_add_buffer>:
{
   2f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   2f9d4:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   2f9d8:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2f9da:	4655      	mov	r5, sl
   2f9dc:	2600      	movs	r6, #0
{
   2f9de:	b085      	sub	sp, #20
	needed = readable + writable;
   2f9e0:	eb02 0803 	add.w	r8, r2, r3
{
   2f9e4:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2f9e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2f9e8:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   2f9ec:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2f9f0:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2f9f2:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   2f9f6:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2f9fa:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2f9fc:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2f9fe:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2fa00:	45b0      	cmp	r8, r6
   2fa02:	dc1a      	bgt.n	2fa3a <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   2fa04:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   2fa06:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2fa08:	eba3 030b 	sub.w	r3, r3, fp
   2fa0c:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2fa0e:	69e3      	ldr	r3, [r4, #28]
   2fa10:	8961      	ldrh	r1, [r4, #10]
   2fa12:	885a      	ldrh	r2, [r3, #2]
   2fa14:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2fa16:	400a      	ands	r2, r1
   2fa18:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2fa1c:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2fa20:	f3bf 8f5b 	dmb	ish
}
   2fa24:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   2fa26:	69e2      	ldr	r2, [r4, #28]
   2fa28:	8853      	ldrh	r3, [r2, #2]
   2fa2a:	3301      	adds	r3, #1
   2fa2c:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2fa2e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2fa30:	3301      	adds	r3, #1
   2fa32:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2fa34:	b005      	add	sp, #20
   2fa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   2fa3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2fa3c:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fa3e:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2fa42:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2fa46:	9302      	str	r3, [sp, #8]
   2fa48:	6803      	ldr	r3, [r0, #0]
   2fa4a:	9203      	str	r2, [sp, #12]
   2fa4c:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2fa4e:	6883      	ldr	r3, [r0, #8]
   2fa50:	3708      	adds	r7, #8
   2fa52:	4299      	cmp	r1, r3
   2fa54:	bf28      	it	cs
   2fa56:	f04f 31ff 	movcs.w	r1, #4294967295
   2fa5a:	f7ff ff49 	bl	2f8f0 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2fa5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2fa62:	5098      	str	r0, [r3, r2]
   2fa64:	2200      	movs	r2, #0
   2fa66:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   2fa68:	f857 2c08 	ldr.w	r2, [r7, #-8]
   2fa6c:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2fa6e:	9a01      	ldr	r2, [sp, #4]
   2fa70:	4296      	cmp	r6, r2
   2fa72:	bfac      	ite	ge
   2fa74:	2200      	movge	r2, #0
   2fa76:	2201      	movlt	r2, #1
		if (i >= readable)
   2fa78:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   2fa7a:	bfd8      	it	le
   2fa7c:	f042 0202 	orrle.w	r2, r2, #2
   2fa80:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2fa82:	3601      	adds	r6, #1
   2fa84:	89ed      	ldrh	r5, [r5, #14]
   2fa86:	e7bb      	b.n	2fa00 <virtqueue_add_buffer+0x30>

0002fa88 <virtqueue_get_buffer>:
{
   2fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2fa8a:	b350      	cbz	r0, 2fae2 <virtqueue_get_buffer+0x5a>
   2fa8c:	6a05      	ldr	r5, [r0, #32]
   2fa8e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2fa90:	886b      	ldrh	r3, [r5, #2]
   2fa92:	42a3      	cmp	r3, r4
   2fa94:	d030      	beq.n	2faf8 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2fa96:	1c63      	adds	r3, r4, #1
   2fa98:	85c3      	strh	r3, [r0, #46]	; 0x2e
   2fa9a:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2fa9c:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2faa0:	3b01      	subs	r3, #1
   2faa2:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2faa4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2faa8:	686b      	ldr	r3, [r5, #4]
   2faaa:	b29e      	uxth	r6, r3
	if (len)
   2faac:	b109      	cbz	r1, 2fab2 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2faae:	68ad      	ldr	r5, [r5, #8]
   2fab0:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2fab2:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2fab6:	b29b      	uxth	r3, r3
   2fab8:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2fabc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2fac0:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2fac2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2fac4:	442f      	add	r7, r5
	dxp->ndescs--;
   2fac6:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2fac8:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2faca:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2facc:	898d      	ldrh	r5, [r1, #12]
   2face:	076f      	lsls	r7, r5, #29
   2fad0:	d50e      	bpl.n	2faf0 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2fad2:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2fad4:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2fad6:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2fad8:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2fada:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2fadc:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2fade:	b102      	cbz	r2, 2fae2 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2fae0:	8014      	strh	r4, [r2, #0]
}
   2fae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2fae4:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2fae6:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2fae8:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2faea:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2faee:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2faf0:	898d      	ldrh	r5, [r1, #12]
   2faf2:	07ed      	lsls	r5, r5, #31
   2faf4:	d4f6      	bmi.n	2fae4 <virtqueue_get_buffer+0x5c>
   2faf6:	e7ec      	b.n	2fad2 <virtqueue_get_buffer+0x4a>
		return NULL;
   2faf8:	2000      	movs	r0, #0
   2fafa:	e7f2      	b.n	2fae2 <virtqueue_get_buffer+0x5a>

0002fafc <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2fafc:	6983      	ldr	r3, [r0, #24]
   2fafe:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2fb02:	6898      	ldr	r0, [r3, #8]
   2fb04:	4770      	bx	lr

0002fb06 <virtqueue_get_available_buffer>:
{
   2fb06:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2fb08:	f3bf 8f5b 	dmb	ish
{
   2fb0c:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb0e:	69c1      	ldr	r1, [r0, #28]
{
   2fb10:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb12:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2fb14:	884a      	ldrh	r2, [r1, #2]
{
   2fb16:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb18:	429a      	cmp	r2, r3
   2fb1a:	d016      	beq.n	2fb4a <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2fb1c:	1c5a      	adds	r2, r3, #1
   2fb1e:	8602      	strh	r2, [r0, #48]	; 0x30
   2fb20:	8942      	ldrh	r2, [r0, #10]
   2fb22:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2fb24:	4013      	ands	r3, r2
   2fb26:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2fb2a:	888a      	ldrh	r2, [r1, #4]
   2fb2c:	802a      	strh	r2, [r5, #0]
   2fb2e:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2fb30:	6982      	ldr	r2, [r0, #24]
   2fb32:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2fb34:	58d1      	ldr	r1, [r2, r3]
   2fb36:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2fb38:	f7ff fef6 	bl	2f928 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2fb3c:	882a      	ldrh	r2, [r5, #0]
   2fb3e:	69a3      	ldr	r3, [r4, #24]
   2fb40:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2fb44:	689b      	ldr	r3, [r3, #8]
   2fb46:	6033      	str	r3, [r6, #0]
}
   2fb48:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2fb4a:	2000      	movs	r0, #0
   2fb4c:	e7fc      	b.n	2fb48 <virtqueue_get_available_buffer+0x42>

0002fb4e <virtqueue_disable_cb>:
{
   2fb4e:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fb50:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fb52:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fb54:	6912      	ldr	r2, [r2, #16]
   2fb56:	0092      	lsls	r2, r2, #2
   2fb58:	d517      	bpl.n	2fb8a <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fb5a:	b943      	cbnz	r3, 2fb6e <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2fb5c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2fb5e:	69c2      	ldr	r2, [r0, #28]
   2fb60:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2fb62:	8944      	ldrh	r4, [r0, #10]
   2fb64:	3b01      	subs	r3, #1
   2fb66:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   2fb68:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2fb6c:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fb6e:	6803      	ldr	r3, [r0, #0]
   2fb70:	699b      	ldr	r3, [r3, #24]
   2fb72:	2b01      	cmp	r3, #1
   2fb74:	d108      	bne.n	2fb88 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2fb76:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   2fb78:	6a02      	ldr	r2, [r0, #32]
   2fb7a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2fb7c:	8940      	ldrh	r0, [r0, #10]
   2fb7e:	3b01      	subs	r3, #1
   2fb80:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2fb82:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2fb86:	8093      	strh	r3, [r2, #4]
}
   2fb88:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fb8a:	b923      	cbnz	r3, 2fb96 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2fb8c:	69c2      	ldr	r2, [r0, #28]
   2fb8e:	8813      	ldrh	r3, [r2, #0]
   2fb90:	f043 0301 	orr.w	r3, r3, #1
   2fb94:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fb96:	6803      	ldr	r3, [r0, #0]
   2fb98:	699b      	ldr	r3, [r3, #24]
   2fb9a:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2fb9c:	bf01      	itttt	eq
   2fb9e:	6a02      	ldreq	r2, [r0, #32]
   2fba0:	8813      	ldrheq	r3, [r2, #0]
   2fba2:	f043 0301 	orreq.w	r3, r3, #1
   2fba6:	8013      	strheq	r3, [r2, #0]
}
   2fba8:	e7ee      	b.n	2fb88 <virtqueue_disable_cb+0x3a>

0002fbaa <virtqueue_kick>:
{
   2fbaa:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2fbac:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fbb0:	6803      	ldr	r3, [r0, #0]
{
   2fbb2:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fbb4:	691a      	ldr	r2, [r3, #16]
   2fbb6:	699b      	ldr	r3, [r3, #24]
   2fbb8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2fbbc:	d01a      	beq.n	2fbf4 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fbbe:	b97b      	cbnz	r3, 2fbe0 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2fbc0:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2fbc2:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   2fbc4:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2fbc6:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2fbc8:	3b01      	subs	r3, #1
   2fbca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2fbce:	8892      	ldrh	r2, [r2, #4]
   2fbd0:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2fbd2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2fbd4:	b29b      	uxth	r3, r3
   2fbd6:	429a      	cmp	r2, r3
   2fbd8:	d814      	bhi.n	2fc04 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   2fbda:	2300      	movs	r3, #0
   2fbdc:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2fbde:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fbe0:	2b01      	cmp	r3, #1
   2fbe2:	d1fa      	bne.n	2fbda <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   2fbe4:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2fbe6:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   2fbe8:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2fbea:	6941      	ldr	r1, [r0, #20]
   2fbec:	3b01      	subs	r3, #1
   2fbee:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2fbf2:	e7ec      	b.n	2fbce <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fbf4:	b963      	cbnz	r3, 2fc10 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   2fbf6:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   2fbf8:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2fbfa:	43db      	mvns	r3, r3
   2fbfc:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2fc00:	2b00      	cmp	r3, #0
   2fc02:	d0ea      	beq.n	2fbda <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2fc04:	6923      	ldr	r3, [r4, #16]
   2fc06:	2b00      	cmp	r3, #0
   2fc08:	d0e7      	beq.n	2fbda <virtqueue_kick+0x30>
		vq->notify(vq);
   2fc0a:	4620      	mov	r0, r4
   2fc0c:	4798      	blx	r3
   2fc0e:	e7e4      	b.n	2fbda <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fc10:	2b01      	cmp	r3, #1
   2fc12:	d1e2      	bne.n	2fbda <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2fc14:	69c3      	ldr	r3, [r0, #28]
   2fc16:	e7ef      	b.n	2fbf8 <virtqueue_kick+0x4e>

0002fc18 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fc18:	69c3      	ldr	r3, [r0, #28]
   2fc1a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2fc1c:	8859      	ldrh	r1, [r3, #2]
   2fc1e:	4291      	cmp	r1, r2
   2fc20:	d00a      	beq.n	2fc38 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2fc22:	8941      	ldrh	r1, [r0, #10]
   2fc24:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2fc26:	400a      	ands	r2, r1
   2fc28:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2fc2c:	889a      	ldrh	r2, [r3, #4]
   2fc2e:	6983      	ldr	r3, [r0, #24]
   2fc30:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2fc34:	6898      	ldr	r0, [r3, #8]
	return len;
   2fc36:	4770      	bx	lr
		return 0;
   2fc38:	2000      	movs	r0, #0
}
   2fc3a:	4770      	bx	lr

0002fc3c <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2fc3c:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2fc40:	68c3      	ldr	r3, [r0, #12]
   2fc42:	b103      	cbz	r3, 2fc46 <virtqueue_notification+0xa>
		vq->callback(vq);
   2fc44:	4718      	bx	r3
}
   2fc46:	4770      	bx	lr

0002fc48 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2fc48:	f04f 32ff 	mov.w	r2, #4294967295
   2fc4c:	f04f 33ff 	mov.w	r3, #4294967295
   2fc50:	f7f5 bcea 	b.w	25628 <z_impl_k_sem_take>

0002fc54 <rpmsg_unregister_endpoint>:
{
   2fc54:	b570      	push	{r4, r5, r6, lr}
   2fc56:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2fc58:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2fc5a:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2fc5e:	4630      	mov	r0, r6
   2fc60:	f7ff fff2 	bl	2fc48 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2fc64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2fc66:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   2fc6a:	2b7f      	cmp	r3, #127	; 0x7f
   2fc6c:	d80b      	bhi.n	2fc86 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2fc6e:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2fc70:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2fc72:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2fc74:	f003 031f 	and.w	r3, r3, #31
   2fc78:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2fc7a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2fc7e:	ea23 0302 	bic.w	r3, r3, r2
   2fc82:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   2fc86:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2fc8a:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2fc8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   2fc8e:	f104 0334 	add.w	r3, r4, #52	; 0x34
   2fc92:	6011      	str	r1, [r2, #0]
	node->next = node;
   2fc94:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2fc98:	2300      	movs	r3, #0
   2fc9a:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2fc9c:	4630      	mov	r0, r6
}
   2fc9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2fca2:	f7f5 bc7d 	b.w	255a0 <z_impl_k_sem_give>

0002fca6 <rpmsg_send_ns_message>:
{
   2fca6:	b530      	push	{r4, r5, lr}
   2fca8:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   2fcaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   2fcac:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2fcae:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2fcb0:	2220      	movs	r2, #32
   2fcb2:	4601      	mov	r1, r0
   2fcb4:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2fcb6:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2fcb8:	f000 fddf 	bl	3087a <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2fcbc:	2328      	movs	r3, #40	; 0x28
   2fcbe:	2201      	movs	r2, #1
   2fcc0:	4629      	mov	r1, r5
   2fcc2:	e9cd 3200 	strd	r3, r2, [sp]
   2fcc6:	4620      	mov	r0, r4
   2fcc8:	2235      	movs	r2, #53	; 0x35
   2fcca:	ab02      	add	r3, sp, #8
   2fccc:	f7f4 f912 	bl	23ef4 <rpmsg_send_offchannel_raw>
}
   2fcd0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2fcd4:	b00d      	add	sp, #52	; 0x34
   2fcd6:	bd30      	pop	{r4, r5, pc}

0002fcd8 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2fcd8:	b128      	cbz	r0, 2fce6 <rpmsg_hold_rx_buffer+0xe>
   2fcda:	6a00      	ldr	r0, [r0, #32]
   2fcdc:	b118      	cbz	r0, 2fce6 <rpmsg_hold_rx_buffer+0xe>
   2fcde:	b111      	cbz	r1, 2fce6 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2fce0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2fce2:	b103      	cbz	r3, 2fce6 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2fce4:	4718      	bx	r3
}
   2fce6:	4770      	bx	lr

0002fce8 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2fce8:	b130      	cbz	r0, 2fcf8 <rpmsg_release_rx_buffer+0x10>
   2fcea:	6a00      	ldr	r0, [r0, #32]
   2fcec:	b120      	cbz	r0, 2fcf8 <rpmsg_release_rx_buffer+0x10>
   2fcee:	b119      	cbz	r1, 2fcf8 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2fcf0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2fcf4:	b103      	cbz	r3, 2fcf8 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2fcf6:	4718      	bx	r3
}
   2fcf8:	4770      	bx	lr

0002fcfa <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   2fcfa:	b130      	cbz	r0, 2fd0a <rpmsg_get_tx_payload_buffer+0x10>
   2fcfc:	6a00      	ldr	r0, [r0, #32]
   2fcfe:	b120      	cbz	r0, 2fd0a <rpmsg_get_tx_payload_buffer+0x10>
   2fd00:	b119      	cbz	r1, 2fd0a <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2fd02:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   2fd06:	b103      	cbz	r3, 2fd0a <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2fd08:	4718      	bx	r3
}
   2fd0a:	2000      	movs	r0, #0
   2fd0c:	4770      	bx	lr

0002fd0e <rpmsg_get_endpoint>:
{
   2fd0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fd12:	4606      	mov	r6, r0
   2fd14:	4688      	mov	r8, r1
   2fd16:	4617      	mov	r7, r2
   2fd18:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2fd1a:	6804      	ldr	r4, [r0, #0]
   2fd1c:	42a6      	cmp	r6, r4
   2fd1e:	d101      	bne.n	2fd24 <rpmsg_get_endpoint+0x16>
	return NULL;
   2fd20:	2500      	movs	r5, #0
   2fd22:	e023      	b.n	2fd6c <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd24:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fd26:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd2a:	d002      	beq.n	2fd32 <rpmsg_get_endpoint+0x24>
   2fd2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2fd2e:	42bb      	cmp	r3, r7
   2fd30:	d01c      	beq.n	2fd6c <rpmsg_get_endpoint+0x5e>
		if (name)
   2fd32:	f1b8 0f00 	cmp.w	r8, #0
   2fd36:	d101      	bne.n	2fd3c <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   2fd38:	6824      	ldr	r4, [r4, #0]
   2fd3a:	e7ef      	b.n	2fd1c <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   2fd3c:	2220      	movs	r2, #32
   2fd3e:	4641      	mov	r1, r8
   2fd40:	4628      	mov	r0, r5
   2fd42:	f000 fd88 	bl	30856 <strncmp>
		if (!name || !name_match)
   2fd46:	2800      	cmp	r0, #0
   2fd48:	d1f6      	bne.n	2fd38 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2fd4a:	f1b9 3fff 	cmp.w	r9, #4294967295
   2fd4e:	d002      	beq.n	2fd56 <rpmsg_get_endpoint+0x48>
   2fd50:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2fd52:	454b      	cmp	r3, r9
   2fd54:	d00a      	beq.n	2fd6c <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2fd56:	1c7b      	adds	r3, r7, #1
   2fd58:	d00b      	beq.n	2fd72 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2fd5a:	6824      	ldr	r4, [r4, #0]
   2fd5c:	42b4      	cmp	r4, r6
   2fd5e:	d0df      	beq.n	2fd20 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd60:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fd64:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd68:	429f      	cmp	r7, r3
   2fd6a:	d1e7      	bne.n	2fd3c <rpmsg_get_endpoint+0x2e>
}
   2fd6c:	4628      	mov	r0, r5
   2fd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2fd72:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2fd74:	3301      	adds	r3, #1
   2fd76:	d0f9      	beq.n	2fd6c <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2fd78:	6824      	ldr	r4, [r4, #0]
   2fd7a:	42b4      	cmp	r4, r6
   2fd7c:	d0d0      	beq.n	2fd20 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fd7e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd82:	e7d6      	b.n	2fd32 <rpmsg_get_endpoint+0x24>

0002fd84 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2fd84:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2fd86:	4604      	mov	r4, r0
   2fd88:	b190      	cbz	r0, 2fdb0 <rpmsg_destroy_ept+0x2c>
   2fd8a:	6a03      	ldr	r3, [r0, #32]
   2fd8c:	b183      	cbz	r3, 2fdb0 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2fd8e:	7802      	ldrb	r2, [r0, #0]
   2fd90:	b14a      	cbz	r2, 2fda6 <rpmsg_destroy_ept+0x22>
   2fd92:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2fd96:	b133      	cbz	r3, 2fda6 <rpmsg_destroy_ept+0x22>
   2fd98:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2fd9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2fd9e:	d302      	bcc.n	2fda6 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2fda0:	2101      	movs	r1, #1
   2fda2:	f7ff ff80 	bl	2fca6 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2fda6:	4620      	mov	r0, r4
}
   2fda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2fdac:	f7ff bf52 	b.w	2fc54 <rpmsg_unregister_endpoint>
}
   2fdb0:	bd10      	pop	{r4, pc}

0002fdb2 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2fdb2:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2fdb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2fdba:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2fdbe:	4770      	bx	lr

0002fdc0 <rpmsg_virtio_tx_callback>:
}
   2fdc0:	4770      	bx	lr

0002fdc2 <k_sem_give>:
   2fdc2:	f7f5 bbed 	b.w	255a0 <z_impl_k_sem_give>

0002fdc6 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2fdc6:	f04f 32ff 	mov.w	r2, #4294967295
   2fdca:	f04f 33ff 	mov.w	r3, #4294967295
   2fdce:	f7f5 bc2b 	b.w	25628 <z_impl_k_sem_take>

0002fdd2 <rpmsg_virtio_release_tx_buffer>:
{
   2fdd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fdd4:	460c      	mov	r4, r1
   2fdd6:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2fdd8:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2fddc:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2fde0:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2fde2:	b2b6      	uxth	r6, r6
   2fde4:	f7ff ffef 	bl	2fdc6 <__metal_mutex_acquire>
	r_desc->idx = idx;
   2fde8:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   2fdec:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2fdf0:	f1a4 0310 	sub.w	r3, r4, #16
   2fdf4:	f844 2c0c 	str.w	r2, [r4, #-12]
   2fdf8:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   2fdfc:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2fe00:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   2fe04:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   2fe08:	4638      	mov	r0, r7
   2fe0a:	6013      	str	r3, [r2, #0]
   2fe0c:	f7ff ffd9 	bl	2fdc2 <k_sem_give>
}
   2fe10:	2000      	movs	r0, #0
   2fe12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fe14 <rpmsg_virtio_ns_callback>:
{
   2fe14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   2fe18:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   2fe1a:	2a28      	cmp	r2, #40	; 0x28
{
   2fe1c:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2fe1e:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2fe22:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2fe24:	d126      	bne.n	2fe74 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fe26:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2fe28:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fe2a:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   2fe2c:	42a1      	cmp	r1, r4
   2fe2e:	bf28      	it	cs
   2fe30:	f04f 31ff 	movcs.w	r1, #4294967295
   2fe34:	2320      	movs	r3, #32
   2fe36:	466a      	mov	r2, sp
   2fe38:	f7fe ff59 	bl	2ecee <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2fe3c:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   2fe40:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2fe44:	4630      	mov	r0, r6
   2fe46:	f7ff ffbe 	bl	2fdc6 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2fe4a:	4643      	mov	r3, r8
   2fe4c:	f04f 32ff 	mov.w	r2, #4294967295
   2fe50:	4669      	mov	r1, sp
   2fe52:	4628      	mov	r0, r5
   2fe54:	f7ff ff5b 	bl	2fd0e <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2fe5a:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2fe5c:	07db      	lsls	r3, r3, #31
   2fe5e:	d519      	bpl.n	2fe94 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   2fe60:	b960      	cbnz	r0, 2fe7c <rpmsg_virtio_ns_callback+0x68>
   2fe62:	4630      	mov	r0, r6
   2fe64:	f7ff ffad 	bl	2fdc2 <k_sem_give>
		if (rdev->ns_unbind_cb)
   2fe68:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2fe6a:	b11b      	cbz	r3, 2fe74 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   2fe6c:	4642      	mov	r2, r8
   2fe6e:	4669      	mov	r1, sp
   2fe70:	4628      	mov	r0, r5
   2fe72:	4798      	blx	r3
}
   2fe74:	2000      	movs	r0, #0
   2fe76:	b008      	add	sp, #32
   2fe78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2fe7c:	f04f 33ff 	mov.w	r3, #4294967295
   2fe80:	6283      	str	r3, [r0, #40]	; 0x28
   2fe82:	4630      	mov	r0, r6
   2fe84:	f7ff ff9d 	bl	2fdc2 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2fe88:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fe8a:	2b00      	cmp	r3, #0
   2fe8c:	d0ec      	beq.n	2fe68 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2fe8e:	4620      	mov	r0, r4
   2fe90:	4798      	blx	r3
   2fe92:	e7e9      	b.n	2fe68 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   2fe94:	b920      	cbnz	r0, 2fea0 <rpmsg_virtio_ns_callback+0x8c>
   2fe96:	4630      	mov	r0, r6
   2fe98:	f7ff ff93 	bl	2fdc2 <k_sem_give>
			if (rdev->ns_bind_cb)
   2fe9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2fe9e:	e7e4      	b.n	2fe6a <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2fea0:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2fea4:	4630      	mov	r0, r6
   2fea6:	f7ff ff8c 	bl	2fdc2 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2feaa:	e7e3      	b.n	2fe74 <rpmsg_virtio_ns_callback+0x60>

0002feac <rpmsg_virtio_get_rx_buffer>:
{
   2feac:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2feae:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2feb2:	4613      	mov	r3, r2
   2feb4:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2feb6:	b925      	cbnz	r5, 2fec2 <rpmsg_virtio_get_rx_buffer+0x16>
}
   2feb8:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2feba:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2febe:	f7ff bde3 	b.w	2fa88 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2fec2:	2d01      	cmp	r5, #1
   2fec4:	d106      	bne.n	2fed4 <rpmsg_virtio_get_rx_buffer+0x28>
}
   2fec6:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2fec8:	460a      	mov	r2, r1
   2feca:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2fece:	4619      	mov	r1, r3
   2fed0:	f7ff be19 	b.w	2fb06 <virtqueue_get_available_buffer>
}
   2fed4:	2000      	movs	r0, #0
   2fed6:	bc30      	pop	{r4, r5}
   2fed8:	4770      	bx	lr

0002feda <rpmsg_virtio_return_buffer>:
{
   2feda:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2fedc:	460c      	mov	r4, r1
   2fede:	4619      	mov	r1, r3
   2fee0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2fee4:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2fee6:	b95d      	cbnz	r5, 2ff00 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2fee8:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2feea:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2feee:	2301      	movs	r3, #1
   2fef0:	462a      	mov	r2, r5
   2fef2:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2fef6:	a902      	add	r1, sp, #8
   2fef8:	f7ff fd6a 	bl	2f9d0 <virtqueue_add_buffer>
}
   2fefc:	b004      	add	sp, #16
   2fefe:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2ff00:	2d01      	cmp	r5, #1
   2ff02:	d1fb      	bne.n	2fefc <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2ff04:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   2ff08:	b004      	add	sp, #16
   2ff0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2ff0e:	f7f3 bfd5 	b.w	23ebc <virtqueue_add_consumed_buffer>

0002ff12 <rpmsg_virtio_release_rx_buffer>:
{
   2ff12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ff14:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2ff16:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2ff1a:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2ff1e:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2ff20:	b2b6      	uxth	r6, r6
{
   2ff22:	460d      	mov	r5, r1
   2ff24:	f7ff ff4f 	bl	2fdc6 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2ff28:	4631      	mov	r1, r6
   2ff2a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2ff2e:	f7ff fde5 	bl	2fafc <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2ff32:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2ff34:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2ff36:	f1a5 0110 	sub.w	r1, r5, #16
   2ff3a:	4620      	mov	r0, r4
   2ff3c:	f7ff ffcd 	bl	2feda <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   2ff40:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2ff44:	f7ff fe31 	bl	2fbaa <virtqueue_kick>
   2ff48:	4638      	mov	r0, r7
}
   2ff4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ff4e:	f7ff bf38 	b.w	2fdc2 <k_sem_give>

0002ff52 <rpmsg_virtio_shm_pool_get_buffer>:
{
   2ff52:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   2ff54:	b148      	cbz	r0, 2ff6a <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2ff56:	b149      	cbz	r1, 2ff6c <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2ff58:	6843      	ldr	r3, [r0, #4]
   2ff5a:	428b      	cmp	r3, r1
   2ff5c:	d306      	bcc.n	2ff6c <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2ff5e:	6882      	ldr	r2, [r0, #8]
   2ff60:	6804      	ldr	r4, [r0, #0]
   2ff62:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   2ff64:	1a5b      	subs	r3, r3, r1
   2ff66:	6043      	str	r3, [r0, #4]
	return buffer;
   2ff68:	18a0      	adds	r0, r4, r2
}
   2ff6a:	bd10      	pop	{r4, pc}
		return NULL;
   2ff6c:	2000      	movs	r0, #0
   2ff6e:	e7fc      	b.n	2ff6a <rpmsg_virtio_shm_pool_get_buffer+0x18>

0002ff70 <rpmsg_virtio_get_tx_payload_buffer>:
{
   2ff70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2ff74:	4605      	mov	r5, r0
   2ff76:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2ff7a:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2ff7c:	6a03      	ldr	r3, [r0, #32]
   2ff7e:	4617      	mov	r7, r2
   2ff80:	681b      	ldr	r3, [r3, #0]
   2ff82:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2ff84:	0743      	lsls	r3, r0, #29
   2ff86:	d403      	bmi.n	2ff90 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2ff88:	2000      	movs	r0, #0
}
   2ff8a:	b002      	add	sp, #8
   2ff8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2ff90:	f643 2398 	movw	r3, #15000	; 0x3a98
   2ff94:	2f00      	cmp	r7, #0
   2ff96:	bf18      	it	ne
   2ff98:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2ff9a:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2ff9e:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2ffa2:	4640      	mov	r0, r8
   2ffa4:	f7ff ff0f 	bl	2fdc6 <__metal_mutex_acquire>
	return list->next == list;
   2ffa8:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   2ffac:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2ffb0:	4554      	cmp	r4, sl
   2ffb2:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2ffb6:	d025      	beq.n	30004 <CONFIG_FLASH_LOAD_SIZE+0x4>
	if (node) {
   2ffb8:	b324      	cbz	r4, 30004 <CONFIG_FLASH_LOAD_SIZE+0x4>
	node->next->prev = node->prev;
   2ffba:	e9d4 2300 	ldrd	r2, r3, [r4]
   2ffbe:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2ffc0:	6822      	ldr	r2, [r4, #0]
   2ffc2:	601a      	str	r2, [r3, #0]
	node->next = node;
   2ffc4:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   2ffc8:	f1b9 0f00 	cmp.w	r9, #0
   2ffcc:	d10e      	bne.n	2ffec <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   2ffce:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2ffd2:	6033      	str	r3, [r6, #0]
   2ffd4:	4640      	mov	r0, r8
   2ffd6:	f7ff fef4 	bl	2fdc2 <k_sem_give>
	rp_hdr->reserved = idx;
   2ffda:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2ffde:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2ffe2:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   2ffe4:	6833      	ldr	r3, [r6, #0]
   2ffe6:	3b10      	subs	r3, #16
   2ffe8:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2ffea:	e7ce      	b.n	2ff8a <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   2ffec:	f1b9 0f01 	cmp.w	r9, #1
   2fff0:	d1f0      	bne.n	2ffd4 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   2fff2:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2fff4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   2fff8:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2fffc:	f7ff fd7e 	bl	2fafc <virtqueue_get_buffer_length>
   30000:	6030      	str	r0, [r6, #0]
   30002:	e7e7      	b.n	2ffd4 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   30004:	f1b9 0f00 	cmp.w	r9, #0
   30008:	d12a      	bne.n	30060 <CONFIG_FLASH_LOAD_SIZE+0x60>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   3000a:	4631      	mov	r1, r6
   3000c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30010:	f10d 0206 	add.w	r2, sp, #6
   30014:	f7ff fd38 	bl	2fa88 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   30018:	4604      	mov	r4, r0
   3001a:	2800      	cmp	r0, #0
   3001c:	d1da      	bne.n	2ffd4 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   3001e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   30022:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   30024:	b953      	cbnz	r3, 3003c <CONFIG_FLASH_LOAD_SIZE+0x3c>
   30026:	4640      	mov	r0, r8
   30028:	f7ff fecb 	bl	2fdc2 <k_sem_give>
		if (rp_hdr || !tick_count)
   3002c:	2f00      	cmp	r7, #0
   3002e:	d0ab      	beq.n	2ff88 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   30030:	2021      	movs	r0, #33	; 0x21
   30032:	2100      	movs	r1, #0
   30034:	f7f7 f9a8 	bl	27388 <z_impl_k_sleep>
		tick_count--;
   30038:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   3003a:	e7b2      	b.n	2ffa2 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   3003c:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   30040:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   30044:	f7ff ff85 	bl	2ff52 <rpmsg_virtio_shm_pool_get_buffer>
   30048:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   3004a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   3004e:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   30052:	6033      	str	r3, [r6, #0]
   30054:	4640      	mov	r0, r8
   30056:	f7ff feb4 	bl	2fdc2 <k_sem_give>
		if (rp_hdr || !tick_count)
   3005a:	2c00      	cmp	r4, #0
   3005c:	d0e6      	beq.n	3002c <CONFIG_FLASH_LOAD_SIZE+0x2c>
   3005e:	e7bc      	b.n	2ffda <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   30060:	f1b9 0f01 	cmp.w	r9, #1
   30064:	d1df      	bne.n	30026 <CONFIG_FLASH_LOAD_SIZE+0x26>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   30066:	4632      	mov	r2, r6
   30068:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   3006c:	f10d 0106 	add.w	r1, sp, #6
   30070:	f7ff fd49 	bl	2fb06 <virtqueue_get_available_buffer>
   30074:	4604      	mov	r4, r0
   30076:	e7ed      	b.n	30054 <CONFIG_FLASH_LOAD_SIZE+0x54>

00030078 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   30078:	b120      	cbz	r0, 30084 <rpmsg_virtio_init_shm_pool+0xc>
   3007a:	b119      	cbz	r1, 30084 <rpmsg_virtio_init_shm_pool+0xc>
   3007c:	b112      	cbz	r2, 30084 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   3007e:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   30082:	6001      	str	r1, [r0, #0]
}
   30084:	4770      	bx	lr

00030086 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   30086:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   30088:	4604      	mov	r4, r0
   3008a:	b918      	cbnz	r0, 30094 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   3008c:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   3008e:	3834      	subs	r0, #52	; 0x34
   30090:	f7ff fe78 	bl	2fd84 <rpmsg_destroy_ept>
	return list->next == list;
   30094:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   30096:	4284      	cmp	r4, r0
   30098:	d1f9      	bne.n	3008e <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   3009a:	2300      	movs	r3, #0
		rvdev->svq = 0;
   3009c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   300a0:	e7f4      	b.n	3008c <rpmsg_deinit_vdev+0x6>

000300a2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   300a2:	f7f4 ba7d 	b.w	245a0 <_DoInit>

000300a6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   300a6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   300a8:	f7ff fffb 	bl	300a2 <SEGGER_RTT_Init>

	return 0;
}
   300ac:	2000      	movs	r0, #0
   300ae:	bd08      	pop	{r3, pc}

000300b0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   300b0:	4770      	bx	lr

000300b2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   300b2:	b140      	cbz	r0, 300c6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   300b4:	68c3      	ldr	r3, [r0, #12]
   300b6:	7858      	ldrb	r0, [r3, #1]
   300b8:	f010 0001 	ands.w	r0, r0, #1
   300bc:	bf1e      	ittt	ne
   300be:	7818      	ldrbne	r0, [r3, #0]
   300c0:	fab0 f080 	clzne	r0, r0
   300c4:	0940      	lsrne	r0, r0, #5
}
   300c6:	4770      	bx	lr

000300c8 <z_early_memset>:
   300c8:	f000 ba77 	b.w	305ba <memset>

000300cc <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   300cc:	f000 ba3b 	b.w	30546 <memcpy>

000300d0 <k_heap_init>:
{
   300d0:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   300d2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   300d6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   300da:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   300dc:	f7dc bd0e 	b.w	cafc <sys_heap_init>

000300e0 <k_heap_alloc>:
{
   300e0:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   300e2:	e9cd 2300 	strd	r2, r3, [sp]
   300e6:	460a      	mov	r2, r1
   300e8:	2104      	movs	r1, #4
   300ea:	f7f4 fc9d 	bl	24a28 <k_heap_aligned_alloc>
}
   300ee:	b003      	add	sp, #12
   300f0:	f85d fb04 	ldr.w	pc, [sp], #4

000300f4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   300f4:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   300f8:	4313      	orrs	r3, r2
   300fa:	f013 0303 	ands.w	r3, r3, #3
   300fe:	d10c      	bne.n	3011a <create_free_list+0x26>
	slab->free_list = NULL;
   30100:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   30102:	68c1      	ldr	r1, [r0, #12]
   30104:	4299      	cmp	r1, r3
   30106:	d801      	bhi.n	3010c <create_free_list+0x18>
	return 0;
   30108:	2000      	movs	r0, #0
   3010a:	4770      	bx	lr
		*(char **)p = slab->free_list;
   3010c:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3010e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   30110:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   30112:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   30114:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   30116:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   30118:	e7f3      	b.n	30102 <create_free_list+0xe>
		return -EINVAL;
   3011a:	f06f 0015 	mvn.w	r0, #21
}
   3011e:	4770      	bx	lr

00030120 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30120:	f3ef 8005 	mrs	r0, IPSR
}
   30124:	3800      	subs	r0, #0
   30126:	bf18      	it	ne
   30128:	2001      	movne	r0, #1
   3012a:	4770      	bx	lr

0003012c <z_impl_k_thread_name_set>:
}
   3012c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   30130:	4770      	bx	lr

00030132 <k_thread_name_get>:
}
   30132:	2000      	movs	r0, #0
   30134:	4770      	bx	lr

00030136 <z_impl_k_thread_start>:
	z_sched_start(thread);
   30136:	f7f6 ba87 	b.w	26648 <z_sched_start>

0003013a <z_pm_save_idle_exit>:
{
   3013a:	b508      	push	{r3, lr}
	pm_system_resume();
   3013c:	f7e0 f8dc 	bl	102f8 <pm_system_resume>
}
   30140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   30144:	f7fe bb5c 	b.w	2e800 <sys_clock_idle_exit>

00030148 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   30148:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3014c:	428b      	cmp	r3, r1
   3014e:	d001      	beq.n	30154 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   30150:	f7f6 bd7c 	b.w	26c4c <z_set_prio>
}
   30154:	2000      	movs	r0, #0
   30156:	4770      	bx	lr

00030158 <z_impl_k_mutex_init>:
{
   30158:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3015a:	2000      	movs	r0, #0
   3015c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   30160:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   30164:	4770      	bx	lr

00030166 <z_queue_node_peek>:
{
   30166:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   30168:	4604      	mov	r4, r0
   3016a:	b130      	cbz	r0, 3017a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3016c:	6802      	ldr	r2, [r0, #0]
   3016e:	0793      	lsls	r3, r2, #30
   30170:	d003      	beq.n	3017a <z_queue_node_peek+0x14>
		ret = anode->data;
   30172:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   30174:	b109      	cbz	r1, 3017a <z_queue_node_peek+0x14>
			k_free(anode);
   30176:	f000 f9bc 	bl	304f2 <k_free>
}
   3017a:	4620      	mov	r0, r4
   3017c:	bd10      	pop	{r4, pc}

0003017e <z_impl_k_queue_init>:
	list->head = NULL;
   3017e:	2300      	movs	r3, #0
	list->tail = NULL;
   30180:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   30184:	6083      	str	r3, [r0, #8]
   30186:	f100 030c 	add.w	r3, r0, #12
   3018a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   3018e:	f100 0314 	add.w	r3, r0, #20
   30192:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   30196:	4770      	bx	lr

00030198 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   30198:	2301      	movs	r3, #1
{
   3019a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3019c:	9300      	str	r3, [sp, #0]
   3019e:	2300      	movs	r3, #0
{
   301a0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   301a2:	4619      	mov	r1, r3
   301a4:	f7f5 f8f8 	bl	25398 <queue_insert>
}
   301a8:	b003      	add	sp, #12
   301aa:	f85d fb04 	ldr.w	pc, [sp], #4

000301ae <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   301ae:	2300      	movs	r3, #0
{
   301b0:	b507      	push	{r0, r1, r2, lr}
   301b2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   301b4:	9300      	str	r3, [sp, #0]
   301b6:	4619      	mov	r1, r3
   301b8:	f7f5 f8ee 	bl	25398 <queue_insert>
}
   301bc:	b003      	add	sp, #12
   301be:	f85d fb04 	ldr.w	pc, [sp], #4

000301c2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   301c2:	b15a      	cbz	r2, 301dc <z_impl_k_sem_init+0x1a>
   301c4:	428a      	cmp	r2, r1
   301c6:	d309      	bcc.n	301dc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   301c8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   301cc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   301d0:	e9c0 0000 	strd	r0, r0, [r0]
   301d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   301d8:	2000      	movs	r0, #0
   301da:	4770      	bx	lr
		return -EINVAL;
   301dc:	f06f 0015 	mvn.w	r0, #21
}
   301e0:	4770      	bx	lr

000301e2 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   301e2:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   301e4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   301e6:	408b      	lsls	r3, r1
   301e8:	ea22 0303 	bic.w	r3, r2, r3
   301ec:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   301ee:	fa22 f001 	lsr.w	r0, r2, r1
}
   301f2:	f000 0001 	and.w	r0, r0, #1
   301f6:	4770      	bx	lr

000301f8 <unschedule_locked>:
{
   301f8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   301fa:	2103      	movs	r1, #3
{
   301fc:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   301fe:	300c      	adds	r0, #12
   30200:	f7ff ffef 	bl	301e2 <flag_test_and_clear>
   30204:	4604      	mov	r4, r0
   30206:	b118      	cbz	r0, 30210 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   30208:	f105 0010 	add.w	r0, r5, #16
   3020c:	f7f7 fb5c 	bl	278c8 <z_abort_timeout>
}
   30210:	4620      	mov	r0, r4
   30212:	bd38      	pop	{r3, r4, r5, pc}

00030214 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   30214:	b120      	cbz	r0, 30220 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   30216:	2200      	movs	r2, #0
   30218:	3090      	adds	r0, #144	; 0x90
   3021a:	4611      	mov	r1, r2
   3021c:	f7f7 b9b6 	b.w	2758c <z_sched_wake>
}
   30220:	4770      	bx	lr

00030222 <cancel_async_locked>:
{
   30222:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   30224:	68c3      	ldr	r3, [r0, #12]
{
   30226:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30228:	f3c3 0640 	ubfx	r6, r3, #1, #1
   3022c:	079b      	lsls	r3, r3, #30
   3022e:	d416      	bmi.n	3025e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   30230:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   30232:	2102      	movs	r1, #2
   30234:	300c      	adds	r0, #12
   30236:	f7ff ffd4 	bl	301e2 <flag_test_and_clear>
   3023a:	b180      	cbz	r0, 3025e <cancel_async_locked+0x3c>
	return list->head;
   3023c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30240:	b16a      	cbz	r2, 3025e <cancel_async_locked+0x3c>
   30242:	4294      	cmp	r4, r2
   30244:	d11d      	bne.n	30282 <cancel_async_locked+0x60>
	return node->next;
   30246:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   30248:	b99e      	cbnz	r6, 30272 <cancel_async_locked+0x50>
   3024a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   3024e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   30252:	429c      	cmp	r4, r3
   30254:	d101      	bne.n	3025a <cancel_async_locked+0x38>
	list->tail = node;
   30256:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   3025a:	2300      	movs	r3, #0
   3025c:	6023      	str	r3, [r4, #0]
	return *flagp;
   3025e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   30260:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   30264:	bf1e      	ittt	ne
   30266:	f043 0302 	orrne.w	r3, r3, #2
   3026a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3026c:	f040 0002 	orrne.w	r0, r0, #2
}
   30270:	bd70      	pop	{r4, r5, r6, pc}
   30272:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   30274:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   30278:	4294      	cmp	r4, r2
	list->tail = node;
   3027a:	bf08      	it	eq
   3027c:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   30280:	e7eb      	b.n	3025a <cancel_async_locked+0x38>
	return node->next;
   30282:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30284:	6812      	ldr	r2, [r2, #0]
   30286:	e7db      	b.n	30240 <cancel_async_locked+0x1e>

00030288 <k_work_submit_to_queue>:
{
   30288:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   3028a:	f7f5 fc9d 	bl	25bc8 <z_work_submit_to_queue>
	if (ret > 0) {
   3028e:	1e04      	subs	r4, r0, #0
   30290:	dd09      	ble.n	302a6 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   30292:	f04f 0320 	mov.w	r3, #32
   30296:	f3ef 8011 	mrs	r0, BASEPRI
   3029a:	f383 8812 	msr	BASEPRI_MAX, r3
   3029e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   302a2:	f000 f80d 	bl	302c0 <z_reschedule_irqlock>
}
   302a6:	4620      	mov	r0, r4
   302a8:	bd10      	pop	{r4, pc}

000302aa <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   302aa:	f7f5 bc47 	b.w	25b3c <k_work_busy_get>

000302ae <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   302ae:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   302b2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   302b6:	4283      	cmp	r3, r0
		return b2 - b1;
   302b8:	bf14      	ite	ne
   302ba:	1ac0      	subne	r0, r0, r3
	return 0;
   302bc:	2000      	moveq	r0, #0
}
   302be:	4770      	bx	lr

000302c0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   302c0:	4603      	mov	r3, r0
   302c2:	b920      	cbnz	r0, 302ce <z_reschedule_irqlock+0xe>
   302c4:	f3ef 8205 	mrs	r2, IPSR
   302c8:	b90a      	cbnz	r2, 302ce <z_reschedule_irqlock+0xe>
   302ca:	f7e0 bc15 	b.w	10af8 <arch_swap>
	__asm__ volatile(
   302ce:	f383 8811 	msr	BASEPRI, r3
   302d2:	f3bf 8f6f 	isb	sy
}
   302d6:	4770      	bx	lr

000302d8 <z_reschedule_unlocked>:
	__asm__ volatile(
   302d8:	f04f 0320 	mov.w	r3, #32
   302dc:	f3ef 8011 	mrs	r0, BASEPRI
   302e0:	f383 8812 	msr	BASEPRI_MAX, r3
   302e4:	f3bf 8f6f 	isb	sy
   302e8:	f7ff bfea 	b.w	302c0 <z_reschedule_irqlock>

000302ec <z_unpend_all>:
{
   302ec:	b538      	push	{r3, r4, r5, lr}
   302ee:	4605      	mov	r5, r0
	int need_sched = 0;
   302f0:	2000      	movs	r0, #0
	return list->head == list;
   302f2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   302f4:	42a5      	cmp	r5, r4
   302f6:	d000      	beq.n	302fa <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   302f8:	b904      	cbnz	r4, 302fc <z_unpend_all+0x10>
}
   302fa:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   302fc:	4620      	mov	r0, r4
   302fe:	f7f6 fdbf 	bl	26e80 <z_unpend_thread>
		z_ready_thread(thread);
   30302:	4620      	mov	r0, r4
   30304:	f7f6 f8d2 	bl	264ac <z_ready_thread>
		need_sched = 1;
   30308:	2001      	movs	r0, #1
   3030a:	e7f2      	b.n	302f2 <z_unpend_all+0x6>

0003030c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3030c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3030e:	f7f7 fc5d 	bl	27bcc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   30312:	bd08      	pop	{r3, pc}

00030314 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   30314:	f7f7 bc5a 	b.w	27bcc <sys_clock_tick_get>

00030318 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   30318:	b108      	cbz	r0, 3031e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3031a:	f7dd bd95 	b.w	de48 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3031e:	4770      	bx	lr

00030320 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30320:	f1b1 3fff 	cmp.w	r1, #4294967295
   30324:	bf08      	it	eq
   30326:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   3032a:	b538      	push	{r3, r4, r5, lr}
   3032c:	460c      	mov	r4, r1
   3032e:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30330:	d014      	beq.n	3035c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   30332:	4308      	orrs	r0, r1
   30334:	d103      	bne.n	3033e <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   30336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   3033a:	f7f7 bc47 	b.w	27bcc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3033e:	f06f 0001 	mvn.w	r0, #1
   30342:	f04f 33ff 	mov.w	r3, #4294967295
   30346:	1b40      	subs	r0, r0, r5
   30348:	eb63 0101 	sbc.w	r1, r3, r1
   3034c:	2900      	cmp	r1, #0
   3034e:	da04      	bge.n	3035a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   30350:	f7f7 fc3c 	bl	27bcc <sys_clock_tick_get>
   30354:	1940      	adds	r0, r0, r5
   30356:	eb41 0104 	adc.w	r1, r1, r4
}
   3035a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   3035c:	f04f 30ff 	mov.w	r0, #4294967295
   30360:	4601      	mov	r1, r0
   30362:	e7fa      	b.n	3035a <sys_clock_timeout_end_calc+0x3a>

00030364 <k_timer_init>:
	timer->status = 0U;
   30364:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   30366:	e9c0 1208 	strd	r1, r2, [r0, #32]
   3036a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   3036e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   30372:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   30376:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   30378:	6343      	str	r3, [r0, #52]	; 0x34
}
   3037a:	4770      	bx	lr

0003037c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3037c:	b510      	push	{r4, lr}
   3037e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   30380:	f7f7 faa2 	bl	278c8 <z_abort_timeout>

	if (inactive) {
   30384:	b9b0      	cbnz	r0, 303b4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   30386:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30388:	b10b      	cbz	r3, 3038e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3038a:	4620      	mov	r0, r4
   3038c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3038e:	f104 0018 	add.w	r0, r4, #24
   30392:	f7f6 fe17 	bl	26fc4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   30396:	b168      	cbz	r0, 303b4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   30398:	f7f6 f888 	bl	264ac <z_ready_thread>
   3039c:	f04f 0320 	mov.w	r3, #32
   303a0:	f3ef 8011 	mrs	r0, BASEPRI
   303a4:	f383 8812 	msr	BASEPRI_MAX, r3
   303a8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   303ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   303b0:	f7ff bf86 	b.w	302c0 <z_reschedule_irqlock>
   303b4:	bd10      	pop	{r4, pc}

000303b6 <add_event>:
{
   303b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   303b8:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   303ba:	e9d0 1300 	ldrd	r1, r3, [r0]
   303be:	4288      	cmp	r0, r1
   303c0:	4604      	mov	r4, r0
   303c2:	d105      	bne.n	303d0 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   303c4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   303c6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   303ca:	601d      	str	r5, [r3, #0]
	list->tail = node;
   303cc:	6065      	str	r5, [r4, #4]
   303ce:	e01d      	b.n	3040c <add_event+0x56>
	if ((pending == NULL) ||
   303d0:	2b00      	cmp	r3, #0
   303d2:	d0f7      	beq.n	303c4 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   303d4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   303d6:	b100      	cbz	r0, 303da <add_event+0x24>
   303d8:	3860      	subs	r0, #96	; 0x60
   303da:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   303de:	4639      	mov	r1, r7
   303e0:	f7ff ff65 	bl	302ae <z_sched_prio_cmp>
	if ((pending == NULL) ||
   303e4:	2800      	cmp	r0, #0
   303e6:	dced      	bgt.n	303c4 <add_event+0xe>
	return list->head == list;
   303e8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   303ea:	42b4      	cmp	r4, r6
   303ec:	d0ea      	beq.n	303c4 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   303ee:	2e00      	cmp	r6, #0
   303f0:	d0e8      	beq.n	303c4 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   303f2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   303f4:	b101      	cbz	r1, 303f8 <add_event+0x42>
   303f6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   303f8:	4638      	mov	r0, r7
   303fa:	f7ff ff58 	bl	302ae <z_sched_prio_cmp>
   303fe:	2800      	cmp	r0, #0
   30400:	dd05      	ble.n	3040e <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   30402:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   30404:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   30408:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3040a:	6075      	str	r5, [r6, #4]
}
   3040c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3040e:	6863      	ldr	r3, [r4, #4]
   30410:	429e      	cmp	r6, r3
   30412:	d0d7      	beq.n	303c4 <add_event+0xe>
   30414:	6836      	ldr	r6, [r6, #0]
   30416:	e7ea      	b.n	303ee <add_event+0x38>

00030418 <signal_poll_event>:
{
   30418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   3041c:	6884      	ldr	r4, [r0, #8]
{
   3041e:	4605      	mov	r5, r0
   30420:	460e      	mov	r6, r1
	if (poller != NULL) {
   30422:	b144      	cbz	r4, 30436 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   30424:	7863      	ldrb	r3, [r4, #1]
   30426:	2b01      	cmp	r3, #1
   30428:	d12e      	bne.n	30488 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   3042a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   3042e:	f013 0302 	ands.w	r3, r3, #2
   30432:	d10a      	bne.n	3044a <signal_poll_event+0x32>
		poller->is_polling = false;
   30434:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   30436:	2000      	movs	r0, #0
	event->state |= state;
   30438:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   3043a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   3043c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   30440:	4316      	orrs	r6, r2
   30442:	f366 3394 	bfi	r3, r6, #14, #7
   30446:	60eb      	str	r3, [r5, #12]
	return retcode;
   30448:	e03e      	b.n	304c8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   3044a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   3044e:	f1b3 3fff 	cmp.w	r3, #4294967295
   30452:	bf08      	it	eq
   30454:	f112 0f02 	cmneq.w	r2, #2
   30458:	d032      	beq.n	304c0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3045a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   3045e:	4640      	mov	r0, r8
   30460:	f7f6 fd0e 	bl	26e80 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   30464:	2e08      	cmp	r6, #8
   30466:	bf0c      	ite	eq
   30468:	f06f 0303 	mvneq.w	r3, #3
   3046c:	2300      	movne	r3, #0
   3046e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   30470:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   30474:	06db      	lsls	r3, r3, #27
   30476:	d109      	bne.n	3048c <signal_poll_event+0x74>
   30478:	f854 7c48 	ldr.w	r7, [r4, #-72]
   3047c:	b937      	cbnz	r7, 3048c <signal_poll_event+0x74>
	z_ready_thread(thread);
   3047e:	4640      	mov	r0, r8
   30480:	f7f6 f814 	bl	264ac <z_ready_thread>
		poller->is_polling = false;
   30484:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   30486:	e7d6      	b.n	30436 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   30488:	2b02      	cmp	r3, #2
   3048a:	d001      	beq.n	30490 <signal_poll_event+0x78>
		poller->is_polling = false;
   3048c:	2300      	movs	r3, #0
   3048e:	e7d1      	b.n	30434 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   30490:	7823      	ldrb	r3, [r4, #0]
   30492:	2b00      	cmp	r3, #0
   30494:	d0cf      	beq.n	30436 <signal_poll_event+0x1e>
   30496:	f854 7c04 	ldr.w	r7, [r4, #-4]
   3049a:	2f00      	cmp	r7, #0
   3049c:	d0f2      	beq.n	30484 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   3049e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   304a2:	f1a4 0914 	sub.w	r9, r4, #20
   304a6:	f104 0014 	add.w	r0, r4, #20
   304aa:	f7f7 fa0d 	bl	278c8 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   304ae:	4649      	mov	r1, r9
   304b0:	4638      	mov	r0, r7
		twork->poll_result = 0;
   304b2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   304b6:	f7f5 fb87 	bl	25bc8 <z_work_submit_to_queue>
		poller->is_polling = false;
   304ba:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   304be:	e7ba      	b.n	30436 <signal_poll_event+0x1e>
		poller->is_polling = false;
   304c0:	2300      	movs	r3, #0
		return -EAGAIN;
   304c2:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   304c6:	7023      	strb	r3, [r4, #0]
}
   304c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000304cc <z_handle_obj_poll_events>:
{
   304cc:	4603      	mov	r3, r0
	return list->head == list;
   304ce:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   304d0:	4283      	cmp	r3, r0
   304d2:	d008      	beq.n	304e6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   304d4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   304d8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   304da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   304dc:	2300      	movs	r3, #0
	node->prev = NULL;
   304de:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   304e2:	f7ff bf99 	b.w	30418 <signal_poll_event>
}
   304e6:	4770      	bx	lr

000304e8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   304e8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   304ea:	e9c0 0000 	strd	r0, r0, [r0]
   304ee:	6083      	str	r3, [r0, #8]
}
   304f0:	4770      	bx	lr

000304f2 <k_free>:
	if (ptr != NULL) {
   304f2:	b120      	cbz	r0, 304fe <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   304f4:	1f01      	subs	r1, r0, #4
   304f6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   304fa:	f7f4 bb35 	b.w	24b68 <k_heap_free>
}
   304fe:	4770      	bx	lr

00030500 <k_malloc>:
{
   30500:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   30502:	2004      	movs	r0, #4
   30504:	f7f8 b828 	b.w	28558 <k_aligned_alloc>

00030508 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   30508:	4770      	bx	lr

0003050a <memchr>:
   3050a:	b2c9      	uxtb	r1, r1
   3050c:	4603      	mov	r3, r0
   3050e:	4402      	add	r2, r0
   30510:	b510      	push	{r4, lr}
   30512:	4293      	cmp	r3, r2
   30514:	4618      	mov	r0, r3
   30516:	d101      	bne.n	3051c <memchr+0x12>
   30518:	2000      	movs	r0, #0
   3051a:	e003      	b.n	30524 <memchr+0x1a>
   3051c:	7804      	ldrb	r4, [r0, #0]
   3051e:	3301      	adds	r3, #1
   30520:	428c      	cmp	r4, r1
   30522:	d1f6      	bne.n	30512 <memchr+0x8>
   30524:	bd10      	pop	{r4, pc}

00030526 <memcmp>:
   30526:	3901      	subs	r1, #1
   30528:	4402      	add	r2, r0
   3052a:	b510      	push	{r4, lr}
   3052c:	4290      	cmp	r0, r2
   3052e:	d101      	bne.n	30534 <memcmp+0xe>
   30530:	2000      	movs	r0, #0
   30532:	e005      	b.n	30540 <memcmp+0x1a>
   30534:	7803      	ldrb	r3, [r0, #0]
   30536:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   3053a:	42a3      	cmp	r3, r4
   3053c:	d001      	beq.n	30542 <memcmp+0x1c>
   3053e:	1b18      	subs	r0, r3, r4
   30540:	bd10      	pop	{r4, pc}
   30542:	3001      	adds	r0, #1
   30544:	e7f2      	b.n	3052c <memcmp+0x6>

00030546 <memcpy>:
   30546:	440a      	add	r2, r1
   30548:	1e43      	subs	r3, r0, #1
   3054a:	4291      	cmp	r1, r2
   3054c:	d100      	bne.n	30550 <memcpy+0xa>
   3054e:	4770      	bx	lr
   30550:	b510      	push	{r4, lr}
   30552:	f811 4b01 	ldrb.w	r4, [r1], #1
   30556:	4291      	cmp	r1, r2
   30558:	f803 4f01 	strb.w	r4, [r3, #1]!
   3055c:	d1f9      	bne.n	30552 <memcpy+0xc>
   3055e:	bd10      	pop	{r4, pc}

00030560 <__memcpy_chk>:
   30560:	429a      	cmp	r2, r3
   30562:	b508      	push	{r3, lr}
   30564:	d901      	bls.n	3056a <__memcpy_chk+0xa>
   30566:	f7e1 fa55 	bl	11a14 <__chk_fail>
   3056a:	4281      	cmp	r1, r0
   3056c:	d804      	bhi.n	30578 <__memcpy_chk+0x18>
   3056e:	188b      	adds	r3, r1, r2
   30570:	4298      	cmp	r0, r3
   30572:	d3f8      	bcc.n	30566 <__memcpy_chk+0x6>
   30574:	4281      	cmp	r1, r0
   30576:	d102      	bne.n	3057e <__memcpy_chk+0x1e>
   30578:	1883      	adds	r3, r0, r2
   3057a:	4299      	cmp	r1, r3
   3057c:	d3f3      	bcc.n	30566 <__memcpy_chk+0x6>
   3057e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30582:	f7ff bfe0 	b.w	30546 <memcpy>

00030586 <memmove>:
   30586:	4288      	cmp	r0, r1
   30588:	b510      	push	{r4, lr}
   3058a:	eb01 0402 	add.w	r4, r1, r2
   3058e:	d902      	bls.n	30596 <memmove+0x10>
   30590:	4284      	cmp	r4, r0
   30592:	4623      	mov	r3, r4
   30594:	d807      	bhi.n	305a6 <memmove+0x20>
   30596:	1e43      	subs	r3, r0, #1
   30598:	42a1      	cmp	r1, r4
   3059a:	d008      	beq.n	305ae <memmove+0x28>
   3059c:	f811 2b01 	ldrb.w	r2, [r1], #1
   305a0:	f803 2f01 	strb.w	r2, [r3, #1]!
   305a4:	e7f8      	b.n	30598 <memmove+0x12>
   305a6:	4402      	add	r2, r0
   305a8:	4601      	mov	r1, r0
   305aa:	428a      	cmp	r2, r1
   305ac:	d100      	bne.n	305b0 <memmove+0x2a>
   305ae:	bd10      	pop	{r4, pc}
   305b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   305b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   305b8:	e7f7      	b.n	305aa <memmove+0x24>

000305ba <memset>:
   305ba:	4402      	add	r2, r0
   305bc:	4603      	mov	r3, r0
   305be:	4293      	cmp	r3, r2
   305c0:	d100      	bne.n	305c4 <memset+0xa>
   305c2:	4770      	bx	lr
   305c4:	f803 1b01 	strb.w	r1, [r3], #1
   305c8:	e7f9      	b.n	305be <memset+0x4>

000305ca <_calloc_r>:
   305ca:	b538      	push	{r3, r4, r5, lr}
   305cc:	fb02 f501 	mul.w	r5, r2, r1
   305d0:	4629      	mov	r1, r5
   305d2:	f7f8 f8b5 	bl	28740 <_malloc_r>
   305d6:	4604      	mov	r4, r0
   305d8:	b118      	cbz	r0, 305e2 <_calloc_r+0x18>
   305da:	462a      	mov	r2, r5
   305dc:	2100      	movs	r1, #0
   305de:	f7ff ffec 	bl	305ba <memset>
   305e2:	4620      	mov	r0, r4
   305e4:	bd38      	pop	{r3, r4, r5, pc}

000305e6 <__cvt>:
   305e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   305ea:	b089      	sub	sp, #36	; 0x24
   305ec:	2b00      	cmp	r3, #0
   305ee:	461d      	mov	r5, r3
   305f0:	4614      	mov	r4, r2
   305f2:	bfba      	itte	lt
   305f4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   305f8:	4614      	movlt	r4, r2
   305fa:	2300      	movge	r3, #0
   305fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   305fe:	bfbc      	itt	lt
   30600:	461d      	movlt	r5, r3
   30602:	232d      	movlt	r3, #45	; 0x2d
   30604:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   30608:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   3060c:	f028 0a20 	bic.w	sl, r8, #32
   30610:	7013      	strb	r3, [r2, #0]
   30612:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   30616:	d005      	beq.n	30624 <__cvt+0x3e>
   30618:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   3061c:	d100      	bne.n	30620 <__cvt+0x3a>
   3061e:	3601      	adds	r6, #1
   30620:	2302      	movs	r3, #2
   30622:	e000      	b.n	30626 <__cvt+0x40>
   30624:	2303      	movs	r3, #3
   30626:	aa07      	add	r2, sp, #28
   30628:	9204      	str	r2, [sp, #16]
   3062a:	aa06      	add	r2, sp, #24
   3062c:	e9cd 3600 	strd	r3, r6, [sp]
   30630:	e9cd 9202 	strd	r9, r2, [sp, #8]
   30634:	462b      	mov	r3, r5
   30636:	4622      	mov	r2, r4
   30638:	f7d9 fb36 	bl	9ca8 <_dtoa_r>
   3063c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   30640:	4607      	mov	r7, r0
   30642:	d119      	bne.n	30678 <__cvt+0x92>
   30644:	f01b 0f01 	tst.w	fp, #1
   30648:	d00e      	beq.n	30668 <__cvt+0x82>
   3064a:	eb07 0806 	add.w	r8, r7, r6
   3064e:	2200      	movs	r2, #0
   30650:	2300      	movs	r3, #0
   30652:	4620      	mov	r0, r4
   30654:	4629      	mov	r1, r5
   30656:	f7d8 fcbb 	bl	8fd0 <__aeabi_dcmpeq>
   3065a:	b108      	cbz	r0, 30660 <__cvt+0x7a>
   3065c:	f8cd 801c 	str.w	r8, [sp, #28]
   30660:	2230      	movs	r2, #48	; 0x30
   30662:	9b07      	ldr	r3, [sp, #28]
   30664:	4543      	cmp	r3, r8
   30666:	d321      	bcc.n	306ac <__cvt+0xc6>
   30668:	9b07      	ldr	r3, [sp, #28]
   3066a:	4638      	mov	r0, r7
   3066c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   3066e:	1bdb      	subs	r3, r3, r7
   30670:	6013      	str	r3, [r2, #0]
   30672:	b009      	add	sp, #36	; 0x24
   30674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30678:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3067c:	d0e2      	beq.n	30644 <__cvt+0x5e>
   3067e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   30682:	eb00 0806 	add.w	r8, r0, r6
   30686:	d1e2      	bne.n	3064e <__cvt+0x68>
   30688:	7803      	ldrb	r3, [r0, #0]
   3068a:	2b30      	cmp	r3, #48	; 0x30
   3068c:	d10a      	bne.n	306a4 <__cvt+0xbe>
   3068e:	2200      	movs	r2, #0
   30690:	2300      	movs	r3, #0
   30692:	4620      	mov	r0, r4
   30694:	4629      	mov	r1, r5
   30696:	f7d8 fc9b 	bl	8fd0 <__aeabi_dcmpeq>
   3069a:	b918      	cbnz	r0, 306a4 <__cvt+0xbe>
   3069c:	f1c6 0601 	rsb	r6, r6, #1
   306a0:	f8c9 6000 	str.w	r6, [r9]
   306a4:	f8d9 3000 	ldr.w	r3, [r9]
   306a8:	4498      	add	r8, r3
   306aa:	e7d0      	b.n	3064e <__cvt+0x68>
   306ac:	1c59      	adds	r1, r3, #1
   306ae:	9107      	str	r1, [sp, #28]
   306b0:	701a      	strb	r2, [r3, #0]
   306b2:	e7d6      	b.n	30662 <__cvt+0x7c>

000306b4 <__exponent>:
   306b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   306b6:	2900      	cmp	r1, #0
   306b8:	7002      	strb	r2, [r0, #0]
   306ba:	bfba      	itte	lt
   306bc:	4249      	neglt	r1, r1
   306be:	232d      	movlt	r3, #45	; 0x2d
   306c0:	232b      	movge	r3, #43	; 0x2b
   306c2:	2909      	cmp	r1, #9
   306c4:	7043      	strb	r3, [r0, #1]
   306c6:	dd28      	ble.n	3071a <__exponent+0x66>
   306c8:	f10d 0307 	add.w	r3, sp, #7
   306cc:	270a      	movs	r7, #10
   306ce:	461d      	mov	r5, r3
   306d0:	461a      	mov	r2, r3
   306d2:	3b01      	subs	r3, #1
   306d4:	fbb1 f6f7 	udiv	r6, r1, r7
   306d8:	fb07 1416 	mls	r4, r7, r6, r1
   306dc:	3430      	adds	r4, #48	; 0x30
   306de:	f802 4c01 	strb.w	r4, [r2, #-1]
   306e2:	460c      	mov	r4, r1
   306e4:	4631      	mov	r1, r6
   306e6:	2c63      	cmp	r4, #99	; 0x63
   306e8:	dcf2      	bgt.n	306d0 <__exponent+0x1c>
   306ea:	3130      	adds	r1, #48	; 0x30
   306ec:	1e94      	subs	r4, r2, #2
   306ee:	f803 1c01 	strb.w	r1, [r3, #-1]
   306f2:	1c41      	adds	r1, r0, #1
   306f4:	4623      	mov	r3, r4
   306f6:	42ab      	cmp	r3, r5
   306f8:	d30a      	bcc.n	30710 <__exponent+0x5c>
   306fa:	f10d 0309 	add.w	r3, sp, #9
   306fe:	1a9b      	subs	r3, r3, r2
   30700:	42ac      	cmp	r4, r5
   30702:	bf88      	it	hi
   30704:	2300      	movhi	r3, #0
   30706:	3302      	adds	r3, #2
   30708:	4403      	add	r3, r0
   3070a:	1a18      	subs	r0, r3, r0
   3070c:	b003      	add	sp, #12
   3070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30710:	f813 6b01 	ldrb.w	r6, [r3], #1
   30714:	f801 6f01 	strb.w	r6, [r1, #1]!
   30718:	e7ed      	b.n	306f6 <__exponent+0x42>
   3071a:	2330      	movs	r3, #48	; 0x30
   3071c:	3130      	adds	r1, #48	; 0x30
   3071e:	7083      	strb	r3, [r0, #2]
   30720:	1d03      	adds	r3, r0, #4
   30722:	70c1      	strb	r1, [r0, #3]
   30724:	e7f1      	b.n	3070a <__exponent+0x56>

00030726 <_printf_common>:
   30726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3072a:	4616      	mov	r6, r2
   3072c:	4698      	mov	r8, r3
   3072e:	688a      	ldr	r2, [r1, #8]
   30730:	4607      	mov	r7, r0
   30732:	690b      	ldr	r3, [r1, #16]
   30734:	460c      	mov	r4, r1
   30736:	f8dd 9020 	ldr.w	r9, [sp, #32]
   3073a:	4293      	cmp	r3, r2
   3073c:	bfb8      	it	lt
   3073e:	4613      	movlt	r3, r2
   30740:	6033      	str	r3, [r6, #0]
   30742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   30746:	b10a      	cbz	r2, 3074c <_printf_common+0x26>
   30748:	3301      	adds	r3, #1
   3074a:	6033      	str	r3, [r6, #0]
   3074c:	6823      	ldr	r3, [r4, #0]
   3074e:	0699      	lsls	r1, r3, #26
   30750:	bf42      	ittt	mi
   30752:	6833      	ldrmi	r3, [r6, #0]
   30754:	3302      	addmi	r3, #2
   30756:	6033      	strmi	r3, [r6, #0]
   30758:	6825      	ldr	r5, [r4, #0]
   3075a:	f015 0506 	ands.w	r5, r5, #6
   3075e:	d106      	bne.n	3076e <_printf_common+0x48>
   30760:	f104 0a19 	add.w	sl, r4, #25
   30764:	68e3      	ldr	r3, [r4, #12]
   30766:	6832      	ldr	r2, [r6, #0]
   30768:	1a9b      	subs	r3, r3, r2
   3076a:	42ab      	cmp	r3, r5
   3076c:	dc2b      	bgt.n	307c6 <_printf_common+0xa0>
   3076e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   30772:	6822      	ldr	r2, [r4, #0]
   30774:	3b00      	subs	r3, #0
   30776:	bf18      	it	ne
   30778:	2301      	movne	r3, #1
   3077a:	0692      	lsls	r2, r2, #26
   3077c:	d430      	bmi.n	307e0 <_printf_common+0xba>
   3077e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   30782:	4641      	mov	r1, r8
   30784:	4638      	mov	r0, r7
   30786:	47c8      	blx	r9
   30788:	3001      	adds	r0, #1
   3078a:	d023      	beq.n	307d4 <_printf_common+0xae>
   3078c:	6823      	ldr	r3, [r4, #0]
   3078e:	341a      	adds	r4, #26
   30790:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   30794:	f003 0306 	and.w	r3, r3, #6
   30798:	2b04      	cmp	r3, #4
   3079a:	bf0a      	itet	eq
   3079c:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   307a0:	2500      	movne	r5, #0
   307a2:	6833      	ldreq	r3, [r6, #0]
   307a4:	f04f 0600 	mov.w	r6, #0
   307a8:	bf08      	it	eq
   307aa:	1aed      	subeq	r5, r5, r3
   307ac:	f854 3c12 	ldr.w	r3, [r4, #-18]
   307b0:	bf08      	it	eq
   307b2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   307b6:	4293      	cmp	r3, r2
   307b8:	bfc4      	itt	gt
   307ba:	1a9b      	subgt	r3, r3, r2
   307bc:	18ed      	addgt	r5, r5, r3
   307be:	42b5      	cmp	r5, r6
   307c0:	d11a      	bne.n	307f8 <_printf_common+0xd2>
   307c2:	2000      	movs	r0, #0
   307c4:	e008      	b.n	307d8 <_printf_common+0xb2>
   307c6:	2301      	movs	r3, #1
   307c8:	4652      	mov	r2, sl
   307ca:	4641      	mov	r1, r8
   307cc:	4638      	mov	r0, r7
   307ce:	47c8      	blx	r9
   307d0:	3001      	adds	r0, #1
   307d2:	d103      	bne.n	307dc <_printf_common+0xb6>
   307d4:	f04f 30ff 	mov.w	r0, #4294967295
   307d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   307dc:	3501      	adds	r5, #1
   307de:	e7c1      	b.n	30764 <_printf_common+0x3e>
   307e0:	18e1      	adds	r1, r4, r3
   307e2:	1c5a      	adds	r2, r3, #1
   307e4:	2030      	movs	r0, #48	; 0x30
   307e6:	3302      	adds	r3, #2
   307e8:	4422      	add	r2, r4
   307ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   307ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   307f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   307f6:	e7c2      	b.n	3077e <_printf_common+0x58>
   307f8:	2301      	movs	r3, #1
   307fa:	4622      	mov	r2, r4
   307fc:	4641      	mov	r1, r8
   307fe:	4638      	mov	r0, r7
   30800:	47c8      	blx	r9
   30802:	3001      	adds	r0, #1
   30804:	d0e6      	beq.n	307d4 <_printf_common+0xae>
   30806:	3601      	adds	r6, #1
   30808:	e7d9      	b.n	307be <_printf_common+0x98>

0003080a <strchr>:
   3080a:	b2c9      	uxtb	r1, r1
   3080c:	4603      	mov	r3, r0
   3080e:	4618      	mov	r0, r3
   30810:	f813 2b01 	ldrb.w	r2, [r3], #1
   30814:	b112      	cbz	r2, 3081c <strchr+0x12>
   30816:	428a      	cmp	r2, r1
   30818:	d1f9      	bne.n	3080e <strchr+0x4>
   3081a:	4770      	bx	lr
   3081c:	2900      	cmp	r1, #0
   3081e:	bf18      	it	ne
   30820:	2000      	movne	r0, #0
   30822:	4770      	bx	lr

00030824 <strcpy>:
   30824:	4603      	mov	r3, r0
   30826:	f811 2b01 	ldrb.w	r2, [r1], #1
   3082a:	f803 2b01 	strb.w	r2, [r3], #1
   3082e:	2a00      	cmp	r2, #0
   30830:	d1f9      	bne.n	30826 <strcpy+0x2>
   30832:	4770      	bx	lr

00030834 <strcspn>:
   30834:	4603      	mov	r3, r0
   30836:	b570      	push	{r4, r5, r6, lr}
   30838:	461e      	mov	r6, r3
   3083a:	f813 4b01 	ldrb.w	r4, [r3], #1
   3083e:	b144      	cbz	r4, 30852 <strcspn+0x1e>
   30840:	1e4a      	subs	r2, r1, #1
   30842:	e001      	b.n	30848 <strcspn+0x14>
   30844:	42a5      	cmp	r5, r4
   30846:	d004      	beq.n	30852 <strcspn+0x1e>
   30848:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   3084c:	2d00      	cmp	r5, #0
   3084e:	d1f9      	bne.n	30844 <strcspn+0x10>
   30850:	e7f2      	b.n	30838 <strcspn+0x4>
   30852:	1a30      	subs	r0, r6, r0
   30854:	bd70      	pop	{r4, r5, r6, pc}

00030856 <strncmp>:
   30856:	b510      	push	{r4, lr}
   30858:	b16a      	cbz	r2, 30876 <strncmp+0x20>
   3085a:	3901      	subs	r1, #1
   3085c:	1884      	adds	r4, r0, r2
   3085e:	f810 2b01 	ldrb.w	r2, [r0], #1
   30862:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   30866:	429a      	cmp	r2, r3
   30868:	d103      	bne.n	30872 <strncmp+0x1c>
   3086a:	42a0      	cmp	r0, r4
   3086c:	d001      	beq.n	30872 <strncmp+0x1c>
   3086e:	2a00      	cmp	r2, #0
   30870:	d1f5      	bne.n	3085e <strncmp+0x8>
   30872:	1ad0      	subs	r0, r2, r3
   30874:	bd10      	pop	{r4, pc}
   30876:	4610      	mov	r0, r2
   30878:	e7fc      	b.n	30874 <strncmp+0x1e>

0003087a <strncpy>:
   3087a:	3901      	subs	r1, #1
   3087c:	4603      	mov	r3, r0
   3087e:	b510      	push	{r4, lr}
   30880:	b132      	cbz	r2, 30890 <strncpy+0x16>
   30882:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   30886:	3a01      	subs	r2, #1
   30888:	f803 4b01 	strb.w	r4, [r3], #1
   3088c:	2c00      	cmp	r4, #0
   3088e:	d1f7      	bne.n	30880 <strncpy+0x6>
   30890:	441a      	add	r2, r3
   30892:	2100      	movs	r1, #0
   30894:	4293      	cmp	r3, r2
   30896:	d100      	bne.n	3089a <strncpy+0x20>
   30898:	bd10      	pop	{r4, pc}
   3089a:	f803 1b01 	strb.w	r1, [r3], #1
   3089e:	e7f9      	b.n	30894 <strncpy+0x1a>

000308a0 <strnlen>:
   308a0:	4602      	mov	r2, r0
   308a2:	4401      	add	r1, r0
   308a4:	b510      	push	{r4, lr}
   308a6:	428a      	cmp	r2, r1
   308a8:	4613      	mov	r3, r2
   308aa:	d003      	beq.n	308b4 <strnlen+0x14>
   308ac:	781c      	ldrb	r4, [r3, #0]
   308ae:	3201      	adds	r2, #1
   308b0:	2c00      	cmp	r4, #0
   308b2:	d1f8      	bne.n	308a6 <strnlen+0x6>
   308b4:	1a18      	subs	r0, r3, r0
   308b6:	bd10      	pop	{r4, pc}

000308b8 <strspn>:
   308b8:	4603      	mov	r3, r0
   308ba:	b570      	push	{r4, r5, r6, lr}
   308bc:	461e      	mov	r6, r3
   308be:	f813 4b01 	ldrb.w	r4, [r3], #1
   308c2:	b13c      	cbz	r4, 308d4 <strspn+0x1c>
   308c4:	1e4a      	subs	r2, r1, #1
   308c6:	e001      	b.n	308cc <strspn+0x14>
   308c8:	42a5      	cmp	r5, r4
   308ca:	d0f7      	beq.n	308bc <strspn+0x4>
   308cc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   308d0:	2d00      	cmp	r5, #0
   308d2:	d1f9      	bne.n	308c8 <strspn+0x10>
   308d4:	1a30      	subs	r0, r6, r0
   308d6:	bd70      	pop	{r4, r5, r6, pc}

000308d8 <quorem>:
   308d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   308dc:	6903      	ldr	r3, [r0, #16]
   308de:	4607      	mov	r7, r0
   308e0:	690c      	ldr	r4, [r1, #16]
   308e2:	42a3      	cmp	r3, r4
   308e4:	f2c0 8083 	blt.w	309ee <quorem+0x116>
   308e8:	3c01      	subs	r4, #1
   308ea:	f100 0514 	add.w	r5, r0, #20
   308ee:	f101 0814 	add.w	r8, r1, #20
   308f2:	00a3      	lsls	r3, r4, #2
   308f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   308f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   308fc:	9300      	str	r3, [sp, #0]
   308fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   30902:	9301      	str	r3, [sp, #4]
   30904:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   30908:	3301      	adds	r3, #1
   3090a:	429a      	cmp	r2, r3
   3090c:	fbb2 f6f3 	udiv	r6, r2, r3
   30910:	d331      	bcc.n	30976 <quorem+0x9e>
   30912:	f04f 0a00 	mov.w	sl, #0
   30916:	46c4      	mov	ip, r8
   30918:	46ae      	mov	lr, r5
   3091a:	46d3      	mov	fp, sl
   3091c:	f85c 3b04 	ldr.w	r3, [ip], #4
   30920:	b298      	uxth	r0, r3
   30922:	45e1      	cmp	r9, ip
   30924:	ea4f 4313 	mov.w	r3, r3, lsr #16
   30928:	fb06 a000 	mla	r0, r6, r0, sl
   3092c:	ea4f 4210 	mov.w	r2, r0, lsr #16
   30930:	b280      	uxth	r0, r0
   30932:	fb06 2303 	mla	r3, r6, r3, r2
   30936:	f8de 2000 	ldr.w	r2, [lr]
   3093a:	b292      	uxth	r2, r2
   3093c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   30940:	eba2 0200 	sub.w	r2, r2, r0
   30944:	b29b      	uxth	r3, r3
   30946:	f8de 0000 	ldr.w	r0, [lr]
   3094a:	445a      	add	r2, fp
   3094c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   30950:	b292      	uxth	r2, r2
   30952:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   30956:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   3095a:	ea4f 4b23 	mov.w	fp, r3, asr #16
   3095e:	f84e 2b04 	str.w	r2, [lr], #4
   30962:	d2db      	bcs.n	3091c <quorem+0x44>
   30964:	9b00      	ldr	r3, [sp, #0]
   30966:	58eb      	ldr	r3, [r5, r3]
   30968:	b92b      	cbnz	r3, 30976 <quorem+0x9e>
   3096a:	9b01      	ldr	r3, [sp, #4]
   3096c:	3b04      	subs	r3, #4
   3096e:	429d      	cmp	r5, r3
   30970:	461a      	mov	r2, r3
   30972:	d330      	bcc.n	309d6 <quorem+0xfe>
   30974:	613c      	str	r4, [r7, #16]
   30976:	4638      	mov	r0, r7
   30978:	f000 f8bf 	bl	30afa <__mcmp>
   3097c:	2800      	cmp	r0, #0
   3097e:	db26      	blt.n	309ce <quorem+0xf6>
   30980:	4629      	mov	r1, r5
   30982:	2000      	movs	r0, #0
   30984:	f858 2b04 	ldr.w	r2, [r8], #4
   30988:	f8d1 c000 	ldr.w	ip, [r1]
   3098c:	fa1f fe82 	uxth.w	lr, r2
   30990:	45c1      	cmp	r9, r8
   30992:	fa1f f38c 	uxth.w	r3, ip
   30996:	ea4f 4212 	mov.w	r2, r2, lsr #16
   3099a:	eba3 030e 	sub.w	r3, r3, lr
   3099e:	4403      	add	r3, r0
   309a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   309a4:	b29b      	uxth	r3, r3
   309a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   309aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   309ae:	ea4f 4022 	mov.w	r0, r2, asr #16
   309b2:	f841 3b04 	str.w	r3, [r1], #4
   309b6:	d2e5      	bcs.n	30984 <quorem+0xac>
   309b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   309bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   309c0:	b922      	cbnz	r2, 309cc <quorem+0xf4>
   309c2:	3b04      	subs	r3, #4
   309c4:	429d      	cmp	r5, r3
   309c6:	461a      	mov	r2, r3
   309c8:	d30b      	bcc.n	309e2 <quorem+0x10a>
   309ca:	613c      	str	r4, [r7, #16]
   309cc:	3601      	adds	r6, #1
   309ce:	4630      	mov	r0, r6
   309d0:	b003      	add	sp, #12
   309d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   309d6:	6812      	ldr	r2, [r2, #0]
   309d8:	3b04      	subs	r3, #4
   309da:	2a00      	cmp	r2, #0
   309dc:	d1ca      	bne.n	30974 <quorem+0x9c>
   309de:	3c01      	subs	r4, #1
   309e0:	e7c5      	b.n	3096e <quorem+0x96>
   309e2:	6812      	ldr	r2, [r2, #0]
   309e4:	3b04      	subs	r3, #4
   309e6:	2a00      	cmp	r2, #0
   309e8:	d1ef      	bne.n	309ca <quorem+0xf2>
   309ea:	3c01      	subs	r4, #1
   309ec:	e7ea      	b.n	309c4 <quorem+0xec>
   309ee:	2000      	movs	r0, #0
   309f0:	e7ee      	b.n	309d0 <quorem+0xf8>

000309f2 <__sfmoreglue>:
   309f2:	b570      	push	{r4, r5, r6, lr}
   309f4:	2368      	movs	r3, #104	; 0x68
   309f6:	1e4d      	subs	r5, r1, #1
   309f8:	460e      	mov	r6, r1
   309fa:	435d      	muls	r5, r3
   309fc:	f105 0174 	add.w	r1, r5, #116	; 0x74
   30a00:	f7f7 fe9e 	bl	28740 <_malloc_r>
   30a04:	4604      	mov	r4, r0
   30a06:	b140      	cbz	r0, 30a1a <__sfmoreglue+0x28>
   30a08:	2100      	movs	r1, #0
   30a0a:	f105 0268 	add.w	r2, r5, #104	; 0x68
   30a0e:	e9c0 1600 	strd	r1, r6, [r0]
   30a12:	300c      	adds	r0, #12
   30a14:	60a0      	str	r0, [r4, #8]
   30a16:	f7ff fdd0 	bl	305ba <memset>
   30a1a:	4620      	mov	r0, r4
   30a1c:	bd70      	pop	{r4, r5, r6, pc}

00030a1e <_fwalk_reent>:
   30a1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30a22:	4606      	mov	r6, r0
   30a24:	4688      	mov	r8, r1
   30a26:	f100 0448 	add.w	r4, r0, #72	; 0x48
   30a2a:	2700      	movs	r7, #0
   30a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   30a30:	f1b9 0901 	subs.w	r9, r9, #1
   30a34:	d505      	bpl.n	30a42 <_fwalk_reent+0x24>
   30a36:	6824      	ldr	r4, [r4, #0]
   30a38:	2c00      	cmp	r4, #0
   30a3a:	d1f7      	bne.n	30a2c <_fwalk_reent+0xe>
   30a3c:	4638      	mov	r0, r7
   30a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30a42:	89ab      	ldrh	r3, [r5, #12]
   30a44:	2b01      	cmp	r3, #1
   30a46:	d907      	bls.n	30a58 <_fwalk_reent+0x3a>
   30a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   30a4c:	3301      	adds	r3, #1
   30a4e:	d003      	beq.n	30a58 <_fwalk_reent+0x3a>
   30a50:	4629      	mov	r1, r5
   30a52:	4630      	mov	r0, r6
   30a54:	47c0      	blx	r8
   30a56:	4307      	orrs	r7, r0
   30a58:	3568      	adds	r5, #104	; 0x68
   30a5a:	e7e9      	b.n	30a30 <_fwalk_reent+0x12>

00030a5c <__hi0bits>:
   30a5c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   30a60:	4603      	mov	r3, r0
   30a62:	bf36      	itet	cc
   30a64:	0403      	lslcc	r3, r0, #16
   30a66:	2000      	movcs	r0, #0
   30a68:	2010      	movcc	r0, #16
   30a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   30a6e:	bf3c      	itt	cc
   30a70:	021b      	lslcc	r3, r3, #8
   30a72:	3008      	addcc	r0, #8
   30a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   30a78:	bf3c      	itt	cc
   30a7a:	011b      	lslcc	r3, r3, #4
   30a7c:	3004      	addcc	r0, #4
   30a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   30a82:	d303      	bcc.n	30a8c <__hi0bits+0x30>
   30a84:	2b00      	cmp	r3, #0
   30a86:	db0a      	blt.n	30a9e <__hi0bits+0x42>
   30a88:	3001      	adds	r0, #1
   30a8a:	4770      	bx	lr
   30a8c:	009b      	lsls	r3, r3, #2
   30a8e:	d501      	bpl.n	30a94 <__hi0bits+0x38>
   30a90:	3002      	adds	r0, #2
   30a92:	4770      	bx	lr
   30a94:	005b      	lsls	r3, r3, #1
   30a96:	d501      	bpl.n	30a9c <__hi0bits+0x40>
   30a98:	3003      	adds	r0, #3
   30a9a:	4770      	bx	lr
   30a9c:	2020      	movs	r0, #32
   30a9e:	4770      	bx	lr

00030aa0 <__lo0bits>:
   30aa0:	6803      	ldr	r3, [r0, #0]
   30aa2:	4602      	mov	r2, r0
   30aa4:	f013 0007 	ands.w	r0, r3, #7
   30aa8:	d00b      	beq.n	30ac2 <__lo0bits+0x22>
   30aaa:	07d9      	lsls	r1, r3, #31
   30aac:	d421      	bmi.n	30af2 <__lo0bits+0x52>
   30aae:	0798      	lsls	r0, r3, #30
   30ab0:	bf47      	ittee	mi
   30ab2:	085b      	lsrmi	r3, r3, #1
   30ab4:	2001      	movmi	r0, #1
   30ab6:	089b      	lsrpl	r3, r3, #2
   30ab8:	2002      	movpl	r0, #2
   30aba:	bf4c      	ite	mi
   30abc:	6013      	strmi	r3, [r2, #0]
   30abe:	6013      	strpl	r3, [r2, #0]
   30ac0:	4770      	bx	lr
   30ac2:	b299      	uxth	r1, r3
   30ac4:	b909      	cbnz	r1, 30aca <__lo0bits+0x2a>
   30ac6:	0c1b      	lsrs	r3, r3, #16
   30ac8:	2010      	movs	r0, #16
   30aca:	b2d9      	uxtb	r1, r3
   30acc:	b909      	cbnz	r1, 30ad2 <__lo0bits+0x32>
   30ace:	3008      	adds	r0, #8
   30ad0:	0a1b      	lsrs	r3, r3, #8
   30ad2:	0719      	lsls	r1, r3, #28
   30ad4:	bf04      	itt	eq
   30ad6:	091b      	lsreq	r3, r3, #4
   30ad8:	3004      	addeq	r0, #4
   30ada:	0799      	lsls	r1, r3, #30
   30adc:	bf04      	itt	eq
   30ade:	089b      	lsreq	r3, r3, #2
   30ae0:	3002      	addeq	r0, #2
   30ae2:	07d9      	lsls	r1, r3, #31
   30ae4:	d403      	bmi.n	30aee <__lo0bits+0x4e>
   30ae6:	085b      	lsrs	r3, r3, #1
   30ae8:	f100 0001 	add.w	r0, r0, #1
   30aec:	d003      	beq.n	30af6 <__lo0bits+0x56>
   30aee:	6013      	str	r3, [r2, #0]
   30af0:	4770      	bx	lr
   30af2:	2000      	movs	r0, #0
   30af4:	4770      	bx	lr
   30af6:	2020      	movs	r0, #32
   30af8:	4770      	bx	lr

00030afa <__mcmp>:
   30afa:	4603      	mov	r3, r0
   30afc:	690a      	ldr	r2, [r1, #16]
   30afe:	6900      	ldr	r0, [r0, #16]
   30b00:	1a80      	subs	r0, r0, r2
   30b02:	b530      	push	{r4, r5, lr}
   30b04:	d10e      	bne.n	30b24 <__mcmp+0x2a>
   30b06:	3314      	adds	r3, #20
   30b08:	3114      	adds	r1, #20
   30b0a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   30b0e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   30b12:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   30b16:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   30b1a:	4295      	cmp	r5, r2
   30b1c:	d003      	beq.n	30b26 <__mcmp+0x2c>
   30b1e:	d205      	bcs.n	30b2c <__mcmp+0x32>
   30b20:	f04f 30ff 	mov.w	r0, #4294967295
   30b24:	bd30      	pop	{r4, r5, pc}
   30b26:	42a3      	cmp	r3, r4
   30b28:	d3f3      	bcc.n	30b12 <__mcmp+0x18>
   30b2a:	e7fb      	b.n	30b24 <__mcmp+0x2a>
   30b2c:	2001      	movs	r0, #1
   30b2e:	e7f9      	b.n	30b24 <__mcmp+0x2a>

00030b30 <__sfputc_r>:
   30b30:	6893      	ldr	r3, [r2, #8]
   30b32:	3b01      	subs	r3, #1
   30b34:	2b00      	cmp	r3, #0
   30b36:	6093      	str	r3, [r2, #8]
   30b38:	b410      	push	{r4}
   30b3a:	da07      	bge.n	30b4c <__sfputc_r+0x1c>
   30b3c:	6994      	ldr	r4, [r2, #24]
   30b3e:	42a3      	cmp	r3, r4
   30b40:	db01      	blt.n	30b46 <__sfputc_r+0x16>
   30b42:	290a      	cmp	r1, #10
   30b44:	d102      	bne.n	30b4c <__sfputc_r+0x1c>
   30b46:	bc10      	pop	{r4}
   30b48:	f7f8 bfa6 	b.w	29a98 <__swbuf_r>
   30b4c:	6813      	ldr	r3, [r2, #0]
   30b4e:	1c58      	adds	r0, r3, #1
   30b50:	6010      	str	r0, [r2, #0]
   30b52:	4608      	mov	r0, r1
   30b54:	7019      	strb	r1, [r3, #0]
   30b56:	bc10      	pop	{r4}
   30b58:	4770      	bx	lr

00030b5a <__sfputs_r>:
   30b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30b5c:	4606      	mov	r6, r0
   30b5e:	460f      	mov	r7, r1
   30b60:	4614      	mov	r4, r2
   30b62:	18d5      	adds	r5, r2, r3
   30b64:	42ac      	cmp	r4, r5
   30b66:	d101      	bne.n	30b6c <__sfputs_r+0x12>
   30b68:	2000      	movs	r0, #0
   30b6a:	e007      	b.n	30b7c <__sfputs_r+0x22>
   30b6c:	463a      	mov	r2, r7
   30b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   30b72:	4630      	mov	r0, r6
   30b74:	f7ff ffdc 	bl	30b30 <__sfputc_r>
   30b78:	1c43      	adds	r3, r0, #1
   30b7a:	d1f3      	bne.n	30b64 <__sfputs_r+0xa>
   30b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030b7e <__sread>:
   30b7e:	b510      	push	{r4, lr}
   30b80:	460c      	mov	r4, r1
   30b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30b86:	f7f9 f8f5 	bl	29d74 <_read_r>
   30b8a:	2800      	cmp	r0, #0
   30b8c:	bfab      	itete	ge
   30b8e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   30b90:	89a3      	ldrhlt	r3, [r4, #12]
   30b92:	181b      	addge	r3, r3, r0
   30b94:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   30b98:	bfac      	ite	ge
   30b9a:	6563      	strge	r3, [r4, #84]	; 0x54
   30b9c:	81a3      	strhlt	r3, [r4, #12]
   30b9e:	bd10      	pop	{r4, pc}

00030ba0 <__swrite>:
   30ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30ba4:	461f      	mov	r7, r3
   30ba6:	898b      	ldrh	r3, [r1, #12]
   30ba8:	4605      	mov	r5, r0
   30baa:	460c      	mov	r4, r1
   30bac:	05db      	lsls	r3, r3, #23
   30bae:	4616      	mov	r6, r2
   30bb0:	d505      	bpl.n	30bbe <__swrite+0x1e>
   30bb2:	2302      	movs	r3, #2
   30bb4:	2200      	movs	r2, #0
   30bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30bba:	f7f9 f889 	bl	29cd0 <_lseek_r>
   30bbe:	89a3      	ldrh	r3, [r4, #12]
   30bc0:	4632      	mov	r2, r6
   30bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   30bc6:	4628      	mov	r0, r5
   30bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   30bcc:	81a3      	strh	r3, [r4, #12]
   30bce:	463b      	mov	r3, r7
   30bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30bd4:	f7f8 bfb2 	b.w	29b3c <_write_r>

00030bd8 <__sseek>:
   30bd8:	b510      	push	{r4, lr}
   30bda:	460c      	mov	r4, r1
   30bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30be0:	f7f9 f876 	bl	29cd0 <_lseek_r>
   30be4:	1c43      	adds	r3, r0, #1
   30be6:	89a3      	ldrh	r3, [r4, #12]
   30be8:	bf15      	itete	ne
   30bea:	6560      	strne	r0, [r4, #84]	; 0x54
   30bec:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   30bf0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   30bf4:	81a3      	strheq	r3, [r4, #12]
   30bf6:	bf18      	it	ne
   30bf8:	81a3      	strhne	r3, [r4, #12]
   30bfa:	bd10      	pop	{r4, pc}

00030bfc <__sclose>:
   30bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30c00:	f7f9 b81a 	b.w	29c38 <_close_r>

00030c04 <abort>:
   30c04:	2006      	movs	r0, #6
   30c06:	b508      	push	{r3, lr}
   30c08:	f7f9 f8c6 	bl	29d98 <raise>
   30c0c:	2001      	movs	r0, #1
   30c0e:	f7e0 fe81 	bl	11914 <_exit>

00030c12 <__sflush_r>:
   30c12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   30c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30c18:	0717      	lsls	r7, r2, #28
   30c1a:	4605      	mov	r5, r0
   30c1c:	460c      	mov	r4, r1
   30c1e:	d456      	bmi.n	30cce <__sflush_r+0xbc>
   30c20:	684b      	ldr	r3, [r1, #4]
   30c22:	2b00      	cmp	r3, #0
   30c24:	dc02      	bgt.n	30c2c <__sflush_r+0x1a>
   30c26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   30c28:	2b00      	cmp	r3, #0
   30c2a:	dd3d      	ble.n	30ca8 <__sflush_r+0x96>
   30c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   30c2e:	2e00      	cmp	r6, #0
   30c30:	d03a      	beq.n	30ca8 <__sflush_r+0x96>
   30c32:	2300      	movs	r3, #0
   30c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   30c38:	682f      	ldr	r7, [r5, #0]
   30c3a:	6a21      	ldr	r1, [r4, #32]
   30c3c:	602b      	str	r3, [r5, #0]
   30c3e:	d025      	beq.n	30c8c <__sflush_r+0x7a>
   30c40:	6d62      	ldr	r2, [r4, #84]	; 0x54
   30c42:	89a3      	ldrh	r3, [r4, #12]
   30c44:	0758      	lsls	r0, r3, #29
   30c46:	d505      	bpl.n	30c54 <__sflush_r+0x42>
   30c48:	6863      	ldr	r3, [r4, #4]
   30c4a:	1ad2      	subs	r2, r2, r3
   30c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   30c4e:	b10b      	cbz	r3, 30c54 <__sflush_r+0x42>
   30c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
   30c52:	1ad2      	subs	r2, r2, r3
   30c54:	6a21      	ldr	r1, [r4, #32]
   30c56:	2300      	movs	r3, #0
   30c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   30c5a:	4628      	mov	r0, r5
   30c5c:	47b0      	blx	r6
   30c5e:	1c41      	adds	r1, r0, #1
   30c60:	d024      	beq.n	30cac <__sflush_r+0x9a>
   30c62:	2300      	movs	r3, #0
   30c64:	6063      	str	r3, [r4, #4]
   30c66:	6923      	ldr	r3, [r4, #16]
   30c68:	6023      	str	r3, [r4, #0]
   30c6a:	89a3      	ldrh	r3, [r4, #12]
   30c6c:	04da      	lsls	r2, r3, #19
   30c6e:	d500      	bpl.n	30c72 <__sflush_r+0x60>
   30c70:	6560      	str	r0, [r4, #84]	; 0x54
   30c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
   30c74:	602f      	str	r7, [r5, #0]
   30c76:	b1b9      	cbz	r1, 30ca8 <__sflush_r+0x96>
   30c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
   30c7c:	4299      	cmp	r1, r3
   30c7e:	d002      	beq.n	30c86 <__sflush_r+0x74>
   30c80:	4628      	mov	r0, r5
   30c82:	f7f7 fd13 	bl	286ac <_free_r>
   30c86:	2300      	movs	r3, #0
   30c88:	6363      	str	r3, [r4, #52]	; 0x34
   30c8a:	e00d      	b.n	30ca8 <__sflush_r+0x96>
   30c8c:	2301      	movs	r3, #1
   30c8e:	4628      	mov	r0, r5
   30c90:	47b0      	blx	r6
   30c92:	1c46      	adds	r6, r0, #1
   30c94:	4602      	mov	r2, r0
   30c96:	d1d4      	bne.n	30c42 <__sflush_r+0x30>
   30c98:	682b      	ldr	r3, [r5, #0]
   30c9a:	2b00      	cmp	r3, #0
   30c9c:	d0d1      	beq.n	30c42 <__sflush_r+0x30>
   30c9e:	2b1d      	cmp	r3, #29
   30ca0:	d001      	beq.n	30ca6 <__sflush_r+0x94>
   30ca2:	2b16      	cmp	r3, #22
   30ca4:	d129      	bne.n	30cfa <__sflush_r+0xe8>
   30ca6:	602f      	str	r7, [r5, #0]
   30ca8:	2000      	movs	r0, #0
   30caa:	e02d      	b.n	30d08 <__sflush_r+0xf6>
   30cac:	682a      	ldr	r2, [r5, #0]
   30cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30cb2:	b142      	cbz	r2, 30cc6 <__sflush_r+0xb4>
   30cb4:	2a1d      	cmp	r2, #29
   30cb6:	d001      	beq.n	30cbc <__sflush_r+0xaa>
   30cb8:	2a16      	cmp	r2, #22
   30cba:	d120      	bne.n	30cfe <__sflush_r+0xec>
   30cbc:	2300      	movs	r3, #0
   30cbe:	6063      	str	r3, [r4, #4]
   30cc0:	6923      	ldr	r3, [r4, #16]
   30cc2:	6023      	str	r3, [r4, #0]
   30cc4:	e7d5      	b.n	30c72 <__sflush_r+0x60>
   30cc6:	6062      	str	r2, [r4, #4]
   30cc8:	6922      	ldr	r2, [r4, #16]
   30cca:	6022      	str	r2, [r4, #0]
   30ccc:	e7ce      	b.n	30c6c <__sflush_r+0x5a>
   30cce:	690f      	ldr	r7, [r1, #16]
   30cd0:	2f00      	cmp	r7, #0
   30cd2:	d0e9      	beq.n	30ca8 <__sflush_r+0x96>
   30cd4:	0793      	lsls	r3, r2, #30
   30cd6:	680e      	ldr	r6, [r1, #0]
   30cd8:	600f      	str	r7, [r1, #0]
   30cda:	bf0c      	ite	eq
   30cdc:	694b      	ldreq	r3, [r1, #20]
   30cde:	2300      	movne	r3, #0
   30ce0:	1bf6      	subs	r6, r6, r7
   30ce2:	608b      	str	r3, [r1, #8]
   30ce4:	2e00      	cmp	r6, #0
   30ce6:	dddf      	ble.n	30ca8 <__sflush_r+0x96>
   30ce8:	4633      	mov	r3, r6
   30cea:	463a      	mov	r2, r7
   30cec:	6a21      	ldr	r1, [r4, #32]
   30cee:	4628      	mov	r0, r5
   30cf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   30cf4:	47e0      	blx	ip
   30cf6:	2800      	cmp	r0, #0
   30cf8:	dc07      	bgt.n	30d0a <__sflush_r+0xf8>
   30cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   30d02:	f04f 30ff 	mov.w	r0, #4294967295
   30d06:	81a3      	strh	r3, [r4, #12]
   30d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30d0a:	4407      	add	r7, r0
   30d0c:	1a36      	subs	r6, r6, r0
   30d0e:	e7e9      	b.n	30ce4 <__sflush_r+0xd2>

00030d10 <__swhatbuf_r>:
   30d10:	b570      	push	{r4, r5, r6, lr}
   30d12:	460c      	mov	r4, r1
   30d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30d18:	b096      	sub	sp, #88	; 0x58
   30d1a:	4615      	mov	r5, r2
   30d1c:	2900      	cmp	r1, #0
   30d1e:	461e      	mov	r6, r3
   30d20:	da0c      	bge.n	30d3c <__swhatbuf_r+0x2c>
   30d22:	89a3      	ldrh	r3, [r4, #12]
   30d24:	2100      	movs	r1, #0
   30d26:	f013 0f80 	tst.w	r3, #128	; 0x80
   30d2a:	bf14      	ite	ne
   30d2c:	2340      	movne	r3, #64	; 0x40
   30d2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   30d32:	2000      	movs	r0, #0
   30d34:	6031      	str	r1, [r6, #0]
   30d36:	602b      	str	r3, [r5, #0]
   30d38:	b016      	add	sp, #88	; 0x58
   30d3a:	bd70      	pop	{r4, r5, r6, pc}
   30d3c:	466a      	mov	r2, sp
   30d3e:	f7f9 f845 	bl	29dcc <_fstat_r>
   30d42:	2800      	cmp	r0, #0
   30d44:	dbed      	blt.n	30d22 <__swhatbuf_r+0x12>
   30d46:	9901      	ldr	r1, [sp, #4]
   30d48:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   30d4c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   30d50:	4259      	negs	r1, r3
   30d52:	4159      	adcs	r1, r3
   30d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
   30d58:	e7eb      	b.n	30d32 <__swhatbuf_r+0x22>

00030d5a <__ascii_mbtowc>:
   30d5a:	b082      	sub	sp, #8
   30d5c:	b901      	cbnz	r1, 30d60 <__ascii_mbtowc+0x6>
   30d5e:	a901      	add	r1, sp, #4
   30d60:	b142      	cbz	r2, 30d74 <__ascii_mbtowc+0x1a>
   30d62:	b14b      	cbz	r3, 30d78 <__ascii_mbtowc+0x1e>
   30d64:	7813      	ldrb	r3, [r2, #0]
   30d66:	600b      	str	r3, [r1, #0]
   30d68:	7812      	ldrb	r2, [r2, #0]
   30d6a:	1e10      	subs	r0, r2, #0
   30d6c:	bf18      	it	ne
   30d6e:	2001      	movne	r0, #1
   30d70:	b002      	add	sp, #8
   30d72:	4770      	bx	lr
   30d74:	4610      	mov	r0, r2
   30d76:	e7fb      	b.n	30d70 <__ascii_mbtowc+0x16>
   30d78:	f06f 0001 	mvn.w	r0, #1
   30d7c:	e7f8      	b.n	30d70 <__ascii_mbtowc+0x16>

00030d7e <_raise_r>:
   30d7e:	291f      	cmp	r1, #31
   30d80:	b538      	push	{r3, r4, r5, lr}
   30d82:	4605      	mov	r5, r0
   30d84:	460c      	mov	r4, r1
   30d86:	d904      	bls.n	30d92 <_raise_r+0x14>
   30d88:	2316      	movs	r3, #22
   30d8a:	6003      	str	r3, [r0, #0]
   30d8c:	f04f 30ff 	mov.w	r0, #4294967295
   30d90:	bd38      	pop	{r3, r4, r5, pc}
   30d92:	6c42      	ldr	r2, [r0, #68]	; 0x44
   30d94:	b112      	cbz	r2, 30d9c <_raise_r+0x1e>
   30d96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   30d9a:	b94b      	cbnz	r3, 30db0 <_raise_r+0x32>
   30d9c:	4628      	mov	r0, r5
   30d9e:	f000 f816 	bl	30dce <_getpid_r>
   30da2:	4622      	mov	r2, r4
   30da4:	4601      	mov	r1, r0
   30da6:	4628      	mov	r0, r5
   30da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30dac:	f7f8 bffc 	b.w	29da8 <_kill_r>
   30db0:	2b01      	cmp	r3, #1
   30db2:	d00a      	beq.n	30dca <_raise_r+0x4c>
   30db4:	1c59      	adds	r1, r3, #1
   30db6:	d103      	bne.n	30dc0 <_raise_r+0x42>
   30db8:	2316      	movs	r3, #22
   30dba:	6003      	str	r3, [r0, #0]
   30dbc:	2001      	movs	r0, #1
   30dbe:	e7e7      	b.n	30d90 <_raise_r+0x12>
   30dc0:	2100      	movs	r1, #0
   30dc2:	4620      	mov	r0, r4
   30dc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   30dc8:	4798      	blx	r3
   30dca:	2000      	movs	r0, #0
   30dcc:	e7e0      	b.n	30d90 <_raise_r+0x12>

00030dce <_getpid_r>:
   30dce:	f7fa bff6 	b.w	2bdbe <_getpid>

00030dd2 <__ascii_wctomb>:
   30dd2:	4603      	mov	r3, r0
   30dd4:	4608      	mov	r0, r1
   30dd6:	b141      	cbz	r1, 30dea <__ascii_wctomb+0x18>
   30dd8:	2aff      	cmp	r2, #255	; 0xff
   30dda:	d904      	bls.n	30de6 <__ascii_wctomb+0x14>
   30ddc:	228a      	movs	r2, #138	; 0x8a
   30dde:	f04f 30ff 	mov.w	r0, #4294967295
   30de2:	601a      	str	r2, [r3, #0]
   30de4:	4770      	bx	lr
   30de6:	2001      	movs	r0, #1
   30de8:	700a      	strb	r2, [r1, #0]
   30dea:	4770      	bx	lr
