
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	d8 36 03 20 11 0b 01 00 63 5f 02 00 e5 0a 01 00     .6. ....c_......
    8010:	e5 0a 01 00 e5 0a 01 00 e5 0a 01 00 e5 0a 01 00     ................
	...
    802c:	c9 03 01 00 e5 0a 01 00 00 00 00 00 69 03 01 00     ............i...
    803c:	e5 0a 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8050:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8060:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8070:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8080:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8090:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    80a0:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    80b0:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    80c0:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    80d0:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    80e0:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    80f0:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8100:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8110:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8120:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8130:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8140:	51 04 01 00 51 04 01 00 51 04 01 00 51 04 01 00     Q...Q...Q...Q...
    8150:	51 04 01 00                                         Q...

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b857 	b.w	8f20 <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f915 	bl	90b0 <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f908 	bl	90b0 <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f8f7 	bl	90b0 <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f8e9 	bl	90b0 <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b80c 	b.w	8f20 <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f8ce 	bl	90b0 <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_idiv0>:
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop

00008f24 <__gedf2>:
    8f24:	f04f 3cff 	mov.w	ip, #4294967295
    8f28:	e006      	b.n	8f38 <__cmpdf2+0x4>
    8f2a:	bf00      	nop

00008f2c <__ledf2>:
    8f2c:	f04f 0c01 	mov.w	ip, #1
    8f30:	e002      	b.n	8f38 <__cmpdf2+0x4>
    8f32:	bf00      	nop

00008f34 <__cmpdf2>:
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f48:	bf18      	it	ne
    8f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f4e:	d01b      	beq.n	8f88 <__cmpdf2+0x54>
    8f50:	b001      	add	sp, #4
    8f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f56:	bf0c      	ite	eq
    8f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f5c:	ea91 0f03 	teqne	r1, r3
    8f60:	bf02      	ittt	eq
    8f62:	ea90 0f02 	teqeq	r0, r2
    8f66:	2000      	moveq	r0, #0
    8f68:	4770      	bxeq	lr
    8f6a:	f110 0f00 	cmn.w	r0, #0
    8f6e:	ea91 0f03 	teq	r1, r3
    8f72:	bf58      	it	pl
    8f74:	4299      	cmppl	r1, r3
    8f76:	bf08      	it	eq
    8f78:	4290      	cmpeq	r0, r2
    8f7a:	bf2c      	ite	cs
    8f7c:	17d8      	asrcs	r0, r3, #31
    8f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f82:	f040 0001 	orr.w	r0, r0, #1
    8f86:	4770      	bx	lr
    8f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f90:	d102      	bne.n	8f98 <__cmpdf2+0x64>
    8f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f96:	d107      	bne.n	8fa8 <__cmpdf2+0x74>
    8f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fa0:	d1d6      	bne.n	8f50 <__cmpdf2+0x1c>
    8fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fa6:	d0d3      	beq.n	8f50 <__cmpdf2+0x1c>
    8fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__aeabi_cdrcmple>:
    8fb0:	4684      	mov	ip, r0
    8fb2:	4610      	mov	r0, r2
    8fb4:	4662      	mov	r2, ip
    8fb6:	468c      	mov	ip, r1
    8fb8:	4619      	mov	r1, r3
    8fba:	4663      	mov	r3, ip
    8fbc:	e000      	b.n	8fc0 <__aeabi_cdcmpeq>
    8fbe:	bf00      	nop

00008fc0 <__aeabi_cdcmpeq>:
    8fc0:	b501      	push	{r0, lr}
    8fc2:	f7ff ffb7 	bl	8f34 <__cmpdf2>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf48      	it	mi
    8fca:	f110 0f00 	cmnmi.w	r0, #0
    8fce:	bd01      	pop	{r0, pc}

00008fd0 <__aeabi_dcmpeq>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff fff4 	bl	8fc0 <__aeabi_cdcmpeq>
    8fd8:	bf0c      	ite	eq
    8fda:	2001      	moveq	r0, #1
    8fdc:	2000      	movne	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmplt>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffea 	bl	8fc0 <__aeabi_cdcmpeq>
    8fec:	bf34      	ite	cc
    8fee:	2001      	movcc	r0, #1
    8ff0:	2000      	movcs	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmple>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffe0 	bl	8fc0 <__aeabi_cdcmpeq>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpge>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffce 	bl	8fb0 <__aeabi_cdrcmple>
    9014:	bf94      	ite	ls
    9016:	2001      	movls	r0, #1
    9018:	2000      	movhi	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpgt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffc4 	bl	8fb0 <__aeabi_cdrcmple>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__udivmoddi4>:
    90b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90b4:	4686      	mov	lr, r0
    90b6:	468c      	mov	ip, r1
    90b8:	4608      	mov	r0, r1
    90ba:	9e08      	ldr	r6, [sp, #32]
    90bc:	4615      	mov	r5, r2
    90be:	4674      	mov	r4, lr
    90c0:	4619      	mov	r1, r3
    90c2:	2b00      	cmp	r3, #0
    90c4:	f040 80c1 	bne.w	924a <__udivmoddi4+0x19a>
    90c8:	4285      	cmp	r5, r0
    90ca:	fab2 f282 	clz	r2, r2
    90ce:	d945      	bls.n	915c <__udivmoddi4+0xac>
    90d0:	b14a      	cbz	r2, 90e6 <__udivmoddi4+0x36>
    90d2:	f1c2 0320 	rsb	r3, r2, #32
    90d6:	fa00 fc02 	lsl.w	ip, r0, r2
    90da:	4095      	lsls	r5, r2
    90dc:	4094      	lsls	r4, r2
    90de:	fa2e f303 	lsr.w	r3, lr, r3
    90e2:	ea43 0c0c 	orr.w	ip, r3, ip
    90e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    90ea:	b2a8      	uxth	r0, r5
    90ec:	0c23      	lsrs	r3, r4, #16
    90ee:	fbbc f8fe 	udiv	r8, ip, lr
    90f2:	fb0e cc18 	mls	ip, lr, r8, ip
    90f6:	fb08 f900 	mul.w	r9, r8, r0
    90fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    90fe:	4599      	cmp	r9, r3
    9100:	d928      	bls.n	9154 <__udivmoddi4+0xa4>
    9102:	18eb      	adds	r3, r5, r3
    9104:	f108 37ff 	add.w	r7, r8, #4294967295
    9108:	d204      	bcs.n	9114 <__udivmoddi4+0x64>
    910a:	4599      	cmp	r9, r3
    910c:	d902      	bls.n	9114 <__udivmoddi4+0x64>
    910e:	f1a8 0702 	sub.w	r7, r8, #2
    9112:	442b      	add	r3, r5
    9114:	eba3 0309 	sub.w	r3, r3, r9
    9118:	b2a4      	uxth	r4, r4
    911a:	fbb3 fcfe 	udiv	ip, r3, lr
    911e:	fb0e 331c 	mls	r3, lr, ip, r3
    9122:	fb0c f000 	mul.w	r0, ip, r0
    9126:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    912a:	42a0      	cmp	r0, r4
    912c:	d914      	bls.n	9158 <__udivmoddi4+0xa8>
    912e:	192c      	adds	r4, r5, r4
    9130:	f10c 33ff 	add.w	r3, ip, #4294967295
    9134:	d204      	bcs.n	9140 <__udivmoddi4+0x90>
    9136:	42a0      	cmp	r0, r4
    9138:	d902      	bls.n	9140 <__udivmoddi4+0x90>
    913a:	f1ac 0302 	sub.w	r3, ip, #2
    913e:	442c      	add	r4, r5
    9140:	1a24      	subs	r4, r4, r0
    9142:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9146:	b11e      	cbz	r6, 9150 <__udivmoddi4+0xa0>
    9148:	40d4      	lsrs	r4, r2
    914a:	2300      	movs	r3, #0
    914c:	6034      	str	r4, [r6, #0]
    914e:	6073      	str	r3, [r6, #4]
    9150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9154:	4647      	mov	r7, r8
    9156:	e7dd      	b.n	9114 <__udivmoddi4+0x64>
    9158:	4663      	mov	r3, ip
    915a:	e7f1      	b.n	9140 <__udivmoddi4+0x90>
    915c:	bb92      	cbnz	r2, 91c4 <__udivmoddi4+0x114>
    915e:	1b43      	subs	r3, r0, r5
    9160:	2101      	movs	r1, #1
    9162:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9166:	b2af      	uxth	r7, r5
    9168:	0c20      	lsrs	r0, r4, #16
    916a:	fbb3 fcfe 	udiv	ip, r3, lr
    916e:	fb0e 331c 	mls	r3, lr, ip, r3
    9172:	fb0c f807 	mul.w	r8, ip, r7
    9176:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    917a:	4598      	cmp	r8, r3
    917c:	d961      	bls.n	9242 <__udivmoddi4+0x192>
    917e:	18eb      	adds	r3, r5, r3
    9180:	f10c 30ff 	add.w	r0, ip, #4294967295
    9184:	d204      	bcs.n	9190 <__udivmoddi4+0xe0>
    9186:	4598      	cmp	r8, r3
    9188:	d902      	bls.n	9190 <__udivmoddi4+0xe0>
    918a:	f1ac 0002 	sub.w	r0, ip, #2
    918e:	442b      	add	r3, r5
    9190:	eba3 0308 	sub.w	r3, r3, r8
    9194:	b2a4      	uxth	r4, r4
    9196:	fbb3 fcfe 	udiv	ip, r3, lr
    919a:	fb0e 331c 	mls	r3, lr, ip, r3
    919e:	fb0c f707 	mul.w	r7, ip, r7
    91a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91a6:	42a7      	cmp	r7, r4
    91a8:	d94d      	bls.n	9246 <__udivmoddi4+0x196>
    91aa:	192c      	adds	r4, r5, r4
    91ac:	f10c 33ff 	add.w	r3, ip, #4294967295
    91b0:	d204      	bcs.n	91bc <__udivmoddi4+0x10c>
    91b2:	42a7      	cmp	r7, r4
    91b4:	d902      	bls.n	91bc <__udivmoddi4+0x10c>
    91b6:	f1ac 0302 	sub.w	r3, ip, #2
    91ba:	442c      	add	r4, r5
    91bc:	1be4      	subs	r4, r4, r7
    91be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91c2:	e7c0      	b.n	9146 <__udivmoddi4+0x96>
    91c4:	f1c2 0320 	rsb	r3, r2, #32
    91c8:	4095      	lsls	r5, r2
    91ca:	4094      	lsls	r4, r2
    91cc:	fa20 f103 	lsr.w	r1, r0, r3
    91d0:	fa2e f303 	lsr.w	r3, lr, r3
    91d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91d8:	4090      	lsls	r0, r2
    91da:	b2af      	uxth	r7, r5
    91dc:	4303      	orrs	r3, r0
    91de:	fbb1 fcfe 	udiv	ip, r1, lr
    91e2:	fb0e 101c 	mls	r0, lr, ip, r1
    91e6:	0c19      	lsrs	r1, r3, #16
    91e8:	fb0c f807 	mul.w	r8, ip, r7
    91ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91f0:	4588      	cmp	r8, r1
    91f2:	d922      	bls.n	923a <__udivmoddi4+0x18a>
    91f4:	1869      	adds	r1, r5, r1
    91f6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91fa:	d204      	bcs.n	9206 <__udivmoddi4+0x156>
    91fc:	4588      	cmp	r8, r1
    91fe:	d902      	bls.n	9206 <__udivmoddi4+0x156>
    9200:	f1ac 0002 	sub.w	r0, ip, #2
    9204:	4429      	add	r1, r5
    9206:	eba1 0108 	sub.w	r1, r1, r8
    920a:	b29b      	uxth	r3, r3
    920c:	fbb1 fcfe 	udiv	ip, r1, lr
    9210:	fb0e 111c 	mls	r1, lr, ip, r1
    9214:	fb0c f707 	mul.w	r7, ip, r7
    9218:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    921c:	429f      	cmp	r7, r3
    921e:	d90e      	bls.n	923e <__udivmoddi4+0x18e>
    9220:	18eb      	adds	r3, r5, r3
    9222:	f10c 31ff 	add.w	r1, ip, #4294967295
    9226:	d204      	bcs.n	9232 <__udivmoddi4+0x182>
    9228:	429f      	cmp	r7, r3
    922a:	d902      	bls.n	9232 <__udivmoddi4+0x182>
    922c:	f1ac 0102 	sub.w	r1, ip, #2
    9230:	442b      	add	r3, r5
    9232:	1bdb      	subs	r3, r3, r7
    9234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9238:	e793      	b.n	9162 <__udivmoddi4+0xb2>
    923a:	4660      	mov	r0, ip
    923c:	e7e3      	b.n	9206 <__udivmoddi4+0x156>
    923e:	4661      	mov	r1, ip
    9240:	e7f7      	b.n	9232 <__udivmoddi4+0x182>
    9242:	4660      	mov	r0, ip
    9244:	e7a4      	b.n	9190 <__udivmoddi4+0xe0>
    9246:	4663      	mov	r3, ip
    9248:	e7b8      	b.n	91bc <__udivmoddi4+0x10c>
    924a:	4283      	cmp	r3, r0
    924c:	d906      	bls.n	925c <__udivmoddi4+0x1ac>
    924e:	b916      	cbnz	r6, 9256 <__udivmoddi4+0x1a6>
    9250:	2100      	movs	r1, #0
    9252:	4608      	mov	r0, r1
    9254:	e77c      	b.n	9150 <__udivmoddi4+0xa0>
    9256:	e9c6 e000 	strd	lr, r0, [r6]
    925a:	e7f9      	b.n	9250 <__udivmoddi4+0x1a0>
    925c:	fab3 f783 	clz	r7, r3
    9260:	b98f      	cbnz	r7, 9286 <__udivmoddi4+0x1d6>
    9262:	4283      	cmp	r3, r0
    9264:	d301      	bcc.n	926a <__udivmoddi4+0x1ba>
    9266:	4572      	cmp	r2, lr
    9268:	d808      	bhi.n	927c <__udivmoddi4+0x1cc>
    926a:	ebbe 0402 	subs.w	r4, lr, r2
    926e:	eb60 0303 	sbc.w	r3, r0, r3
    9272:	2001      	movs	r0, #1
    9274:	469c      	mov	ip, r3
    9276:	b91e      	cbnz	r6, 9280 <__udivmoddi4+0x1d0>
    9278:	2100      	movs	r1, #0
    927a:	e769      	b.n	9150 <__udivmoddi4+0xa0>
    927c:	4638      	mov	r0, r7
    927e:	e7fa      	b.n	9276 <__udivmoddi4+0x1c6>
    9280:	e9c6 4c00 	strd	r4, ip, [r6]
    9284:	e7f8      	b.n	9278 <__udivmoddi4+0x1c8>
    9286:	f1c7 0c20 	rsb	ip, r7, #32
    928a:	40bb      	lsls	r3, r7
    928c:	fa0e f507 	lsl.w	r5, lr, r7
    9290:	fa22 f40c 	lsr.w	r4, r2, ip
    9294:	fa2e f10c 	lsr.w	r1, lr, ip
    9298:	40ba      	lsls	r2, r7
    929a:	431c      	orrs	r4, r3
    929c:	fa20 f30c 	lsr.w	r3, r0, ip
    92a0:	40b8      	lsls	r0, r7
    92a2:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92a6:	4301      	orrs	r1, r0
    92a8:	fa1f fe84 	uxth.w	lr, r4
    92ac:	fbb3 f8f9 	udiv	r8, r3, r9
    92b0:	fb09 3018 	mls	r0, r9, r8, r3
    92b4:	0c0b      	lsrs	r3, r1, #16
    92b6:	fb08 fa0e 	mul.w	sl, r8, lr
    92ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92be:	459a      	cmp	sl, r3
    92c0:	d940      	bls.n	9344 <__udivmoddi4+0x294>
    92c2:	18e3      	adds	r3, r4, r3
    92c4:	f108 30ff 	add.w	r0, r8, #4294967295
    92c8:	d204      	bcs.n	92d4 <__udivmoddi4+0x224>
    92ca:	459a      	cmp	sl, r3
    92cc:	d902      	bls.n	92d4 <__udivmoddi4+0x224>
    92ce:	f1a8 0002 	sub.w	r0, r8, #2
    92d2:	4423      	add	r3, r4
    92d4:	eba3 030a 	sub.w	r3, r3, sl
    92d8:	b289      	uxth	r1, r1
    92da:	fbb3 f8f9 	udiv	r8, r3, r9
    92de:	fb09 3318 	mls	r3, r9, r8, r3
    92e2:	fb08 fe0e 	mul.w	lr, r8, lr
    92e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    92ea:	458e      	cmp	lr, r1
    92ec:	d92c      	bls.n	9348 <__udivmoddi4+0x298>
    92ee:	1861      	adds	r1, r4, r1
    92f0:	f108 33ff 	add.w	r3, r8, #4294967295
    92f4:	d204      	bcs.n	9300 <__udivmoddi4+0x250>
    92f6:	458e      	cmp	lr, r1
    92f8:	d902      	bls.n	9300 <__udivmoddi4+0x250>
    92fa:	f1a8 0302 	sub.w	r3, r8, #2
    92fe:	4421      	add	r1, r4
    9300:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9304:	eba1 010e 	sub.w	r1, r1, lr
    9308:	fba0 9802 	umull	r9, r8, r0, r2
    930c:	4541      	cmp	r1, r8
    930e:	46ce      	mov	lr, r9
    9310:	4643      	mov	r3, r8
    9312:	d302      	bcc.n	931a <__udivmoddi4+0x26a>
    9314:	d106      	bne.n	9324 <__udivmoddi4+0x274>
    9316:	454d      	cmp	r5, r9
    9318:	d204      	bcs.n	9324 <__udivmoddi4+0x274>
    931a:	3801      	subs	r0, #1
    931c:	ebb9 0e02 	subs.w	lr, r9, r2
    9320:	eb68 0304 	sbc.w	r3, r8, r4
    9324:	2e00      	cmp	r6, #0
    9326:	d0a7      	beq.n	9278 <__udivmoddi4+0x1c8>
    9328:	ebb5 020e 	subs.w	r2, r5, lr
    932c:	eb61 0103 	sbc.w	r1, r1, r3
    9330:	fa01 fc0c 	lsl.w	ip, r1, ip
    9334:	fa22 f307 	lsr.w	r3, r2, r7
    9338:	40f9      	lsrs	r1, r7
    933a:	ea4c 0303 	orr.w	r3, ip, r3
    933e:	e9c6 3100 	strd	r3, r1, [r6]
    9342:	e799      	b.n	9278 <__udivmoddi4+0x1c8>
    9344:	4640      	mov	r0, r8
    9346:	e7c5      	b.n	92d4 <__udivmoddi4+0x224>
    9348:	4643      	mov	r3, r8
    934a:	e7d9      	b.n	9300 <__udivmoddi4+0x250>

0000934c <strcmp>:
    934c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9350:	f811 3b01 	ldrb.w	r3, [r1], #1
    9354:	2a01      	cmp	r2, #1
    9356:	bf28      	it	cs
    9358:	429a      	cmpcs	r2, r3
    935a:	d0f7      	beq.n	934c <strcmp>
    935c:	1ad0      	subs	r0, r2, r3
    935e:	4770      	bx	lr

00009360 <strlen>:
    9360:	4603      	mov	r3, r0
    9362:	f813 2b01 	ldrb.w	r2, [r3], #1
    9366:	2a00      	cmp	r2, #0
    9368:	d1fb      	bne.n	9362 <strlen+0x2>
    936a:	1a18      	subs	r0, r3, r0
    936c:	3801      	subs	r0, #1
    936e:	4770      	bx	lr

00009370 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9372:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9374:	f7ff f842 	bl	83fc <__aeabi_i2d>
    9378:	a325      	add	r3, pc, #148	; (adr r3, 9410 <ntc_temperature+0xa0>)
    937a:	e9d3 2300 	ldrd	r2, r3, [r3]
    937e:	f7ff f8a7 	bl	84d0 <__aeabi_dmul>
    9382:	f7ff fab7 	bl	88f4 <__aeabi_d2f>
    9386:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9388:	1e63      	subs	r3, r4, #1
    938a:	b2db      	uxtb	r3, r3
    938c:	2b02      	cmp	r3, #2
    938e:	bf96      	itet	ls
    9390:	4a27      	ldrls	r2, [pc, #156]	; (9430 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9392:	2000      	movhi	r0, #0
    9394:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9398:	4629      	mov	r1, r5
    939a:	f7ff fc09 	bl	8bb0 <__aeabi_fmul>
    939e:	f7ff f83f 	bl	8420 <__aeabi_f2d>
    93a2:	4606      	mov	r6, r0
    93a4:	4628      	mov	r0, r5
    93a6:	460f      	mov	r7, r1
    93a8:	f7ff f83a 	bl	8420 <__aeabi_f2d>
    93ac:	4602      	mov	r2, r0
    93ae:	460b      	mov	r3, r1
    93b0:	2000      	movs	r0, #0
    93b2:	4920      	ldr	r1, [pc, #128]	; (9434 <ntc_temperature+0xc4>)
    93b4:	f7fe fed4 	bl	8160 <__aeabi_dsub>
    93b8:	4602      	mov	r2, r0
    93ba:	460b      	mov	r3, r1
    93bc:	4630      	mov	r0, r6
    93be:	4639      	mov	r1, r7
    93c0:	f7ff f9b0 	bl	8724 <__aeabi_ddiv>
    93c4:	f7ff fa96 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    93c8:	491b      	ldr	r1, [pc, #108]	; (9438 <ntc_temperature+0xc8>)
    93ca:	f7ff fca5 	bl	8d18 <__aeabi_fdiv>
    93ce:	f7ff f827 	bl	8420 <__aeabi_f2d>
    93d2:	f019 fdeb 	bl	22fac <log>
    93d6:	a310      	add	r3, pc, #64	; (adr r3, 9418 <ntc_temperature+0xa8>)
    93d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    93dc:	f7ff f9a2 	bl	8724 <__aeabi_ddiv>
    93e0:	a30f      	add	r3, pc, #60	; (adr r3, 9420 <ntc_temperature+0xb0>)
    93e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    93e6:	f7fe febd 	bl	8164 <__adddf3>
    93ea:	4602      	mov	r2, r0
    93ec:	460b      	mov	r3, r1
    93ee:	2000      	movs	r0, #0
    93f0:	4912      	ldr	r1, [pc, #72]	; (943c <ntc_temperature+0xcc>)
    93f2:	f7ff f997 	bl	8724 <__aeabi_ddiv>
    93f6:	f7ff fa7d 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    93fa:	f7ff f811 	bl	8420 <__aeabi_f2d>
    93fe:	a30a      	add	r3, pc, #40	; (adr r3, 9428 <ntc_temperature+0xb8>)
    9400:	e9d3 2300 	ldrd	r2, r3, [r3]
    9404:	f7fe feac 	bl	8160 <__aeabi_dsub>
    9408:	f7ff fa74 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    940e:	bf00      	nop
    9410:	3a66a002 	.word	0x3a66a002
    9414:	3f2ccdb3 	.word	0x3f2ccdb3
    9418:	00000000 	.word	0x00000000
    941c:	40af0200 	.word	0x40af0200
    9420:	dcb5db83 	.word	0xdcb5db83
    9424:	3f6b79e1 	.word	0x3f6b79e1
    9428:	66666666 	.word	0x66666666
    942c:	40711266 	.word	0x40711266
    9430:	0002ad40 	.word	0x0002ad40
    9434:	40080000 	.word	0x40080000
    9438:	461c4000 	.word	0x461c4000
    943c:	3ff00000 	.word	0x3ff00000

00009440 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9440:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9442:	4d64      	ldr	r5, [pc, #400]	; (95d4 <bt_init+0x194>)
{
    9444:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9446:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    944a:	6899      	ldr	r1, [r3, #8]
    944c:	f011 0101 	ands.w	r1, r1, #1
    9450:	d11a      	bne.n	9488 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9452:	f640 4003 	movw	r0, #3075	; 0xc03
    9456:	aa05      	add	r2, sp, #20
    9458:	f008 fc46 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
    945c:	4604      	mov	r4, r0
    945e:	2800      	cmp	r0, #0
    9460:	f040 80b5 	bne.w	95ce <bt_init+0x18e>
		hci_reset_complete(rsp);
    9464:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9466:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9468:	781b      	ldrb	r3, [r3, #0]
    946a:	b95b      	cbnz	r3, 9484 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    946c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9470:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9474:	f002 0209 	and.w	r2, r2, #9
    9478:	e8d3 1fef 	ldaex	r1, [r3]
    947c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9480:	2c00      	cmp	r4, #0
    9482:	d1f9      	bne.n	9478 <bt_init+0x38>
		net_buf_unref(rsp);
    9484:	f00f fffe 	bl	19484 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9488:	2100      	movs	r1, #0
    948a:	f241 0003 	movw	r0, #4099	; 0x1003
    948e:	aa05      	add	r2, sp, #20
    9490:	f008 fc2a 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    9494:	4604      	mov	r4, r0
    9496:	2800      	cmp	r0, #0
    9498:	f040 8099 	bne.w	95ce <bt_init+0x18e>
	read_local_features_complete(rsp);
    949c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    949e:	4e4e      	ldr	r6, [pc, #312]	; (95d8 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94a0:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94a2:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94a6:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94aa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94ac:	4618      	mov	r0, r3
    94ae:	f00f ffe9 	bl	19484 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    94b2:	4621      	mov	r1, r4
    94b4:	f241 0001 	movw	r0, #4097	; 0x1001
    94b8:	aa05      	add	r2, sp, #20
    94ba:	f008 fc15 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    94be:	4604      	mov	r4, r0
    94c0:	2800      	cmp	r0, #0
    94c2:	f040 8084 	bne.w	95ce <bt_init+0x18e>
	read_local_ver_complete(rsp);
    94c6:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    94c8:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    94ca:	785a      	ldrb	r2, [r3, #1]
    94cc:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    94d0:	885a      	ldrh	r2, [r3, #2]
    94d2:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    94d6:	791a      	ldrb	r2, [r3, #4]
    94d8:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    94dc:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    94e0:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    94e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    94e8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    94ec:	f00f ffca 	bl	19484 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    94f0:	4621      	mov	r1, r4
    94f2:	f241 0002 	movw	r0, #4098	; 0x1002
    94f6:	aa05      	add	r2, sp, #20
    94f8:	f008 fbf6 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    94fc:	4604      	mov	r4, r0
    94fe:	2800      	cmp	r0, #0
    9500:	d165      	bne.n	95ce <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    9502:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    9504:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    9506:	1c53      	adds	r3, r2, #1
    9508:	3241      	adds	r2, #65	; 0x41
    950a:	4634      	mov	r4, r6
    950c:	6818      	ldr	r0, [r3, #0]
    950e:	6859      	ldr	r1, [r3, #4]
    9510:	3308      	adds	r3, #8
    9512:	c403      	stmia	r4!, {r0, r1}
    9514:	4293      	cmp	r3, r2
    9516:	4626      	mov	r6, r4
    9518:	d1f7      	bne.n	950a <bt_init+0xca>
	net_buf_unref(rsp);
    951a:	4638      	mov	r0, r7
    951c:	f00f ffb2 	bl	19484 <net_buf_unref>
		err = prng_init();
    9520:	f00a fa06 	bl	13930 <prng_init>
		if (err) {
    9524:	4604      	mov	r4, r0
    9526:	2800      	cmp	r0, #0
    9528:	d151      	bne.n	95ce <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    952a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    952e:	f013 0320 	ands.w	r3, r3, #32
    9532:	d118      	bne.n	9566 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    9534:	4a29      	ldr	r2, [pc, #164]	; (95dc <bt_init+0x19c>)
    9536:	492a      	ldr	r1, [pc, #168]	; (95e0 <bt_init+0x1a0>)
    9538:	e9cd 3201 	strd	r3, r2, [sp, #4]
    953c:	9300      	str	r3, [sp, #0]
    953e:	2202      	movs	r2, #2
    9540:	f01c fe47 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9544:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    9548:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    954c:	d14c      	bne.n	95e8 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    954e:	4a25      	ldr	r2, [pc, #148]	; (95e4 <bt_init+0x1a4>)
    9550:	4618      	mov	r0, r3
    9552:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9556:	4922      	ldr	r1, [pc, #136]	; (95e0 <bt_init+0x1a0>)
    9558:	2201      	movs	r2, #1
    955a:	9300      	str	r3, [sp, #0]
    955c:	f01c fe39 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9560:	f06f 0412 	mvn.w	r4, #18
    9564:	e033      	b.n	95ce <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9566:	2107      	movs	r1, #7
    9568:	f640 4033 	movw	r0, #3123	; 0xc33
    956c:	f008 fb6e 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
    9570:	4606      	mov	r6, r0
    9572:	2800      	cmp	r0, #0
    9574:	f000 8140 	beq.w	97f8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9578:	2107      	movs	r1, #7
    957a:	300c      	adds	r0, #12
    957c:	f010 f8a4 	bl	196c8 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9580:	2345      	movs	r3, #69	; 0x45
    9582:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9584:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9586:	f8c0 4002 	str.w	r4, [r0, #2]
    958a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    958c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    958e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9590:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9592:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9594:	4631      	mov	r1, r6
    9596:	f640 4033 	movw	r0, #3123	; 0xc33
    959a:	f008 fba5 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    959e:	4604      	mov	r4, r0
    95a0:	b9a8      	cbnz	r0, 95ce <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95a2:	2101      	movs	r1, #1
    95a4:	f640 4031 	movw	r0, #3121	; 0xc31
    95a8:	f008 fb50 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
    95ac:	4606      	mov	r6, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	f000 8122 	beq.w	97f8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    95b4:	2101      	movs	r1, #1
    95b6:	300c      	adds	r0, #12
    95b8:	f01e fc87 	bl	27eca <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    95bc:	4622      	mov	r2, r4
    95be:	4631      	mov	r1, r6
    95c0:	f640 4031 	movw	r0, #3121	; 0xc31
    95c4:	f008 fb90 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    95c8:	4604      	mov	r4, r0
    95ca:	2800      	cmp	r0, #0
    95cc:	d0ba      	beq.n	9544 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    95ce:	4620      	mov	r0, r4
    95d0:	b007      	add	sp, #28
    95d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95d4:	20008000 	.word	0x20008000
    95d8:	20008070 	.word	0x20008070
    95dc:	0002de8a 	.word	0x0002de8a
    95e0:	0002a990 	.word	0x0002a990
    95e4:	0002deb8 	.word	0x0002deb8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    95e8:	2100      	movs	r1, #0
    95ea:	f242 0003 	movw	r0, #8195	; 0x2003
    95ee:	aa05      	add	r2, sp, #20
    95f0:	f008 fb7a 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    95f4:	4604      	mov	r4, r0
    95f6:	2800      	cmp	r0, #0
    95f8:	d1e9      	bne.n	95ce <bt_init+0x18e>
	read_le_features_complete(rsp);
    95fa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    95fc:	4ebe      	ldr	r6, [pc, #760]	; (98f8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    95fe:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9600:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9604:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9608:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    960a:	4618      	mov	r0, r3
    960c:	f00f ff3a 	bl	19484 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9610:	4621      	mov	r1, r4
    9612:	f242 0002 	movw	r0, #8194	; 0x2002
    9616:	aa05      	add	r2, sp, #20
    9618:	f008 fb66 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
    961c:	4604      	mov	r4, r0
    961e:	2800      	cmp	r0, #0
    9620:	d1d5      	bne.n	95ce <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    9622:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9624:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9626:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    962a:	b291      	uxth	r1, r2
    962c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    9630:	b129      	cbz	r1, 963e <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9632:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9634:	4611      	mov	r1, r2
    9636:	f106 0028 	add.w	r0, r6, #40	; 0x28
    963a:	f01f fffe 	bl	2963a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    963e:	4620      	mov	r0, r4
    9640:	f00f ff20 	bl	19484 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9644:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    9648:	f016 0620 	ands.w	r6, r6, #32
    964c:	d118      	bne.n	9680 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    964e:	2102      	movs	r1, #2
    9650:	f640 406d 	movw	r0, #3181	; 0xc6d
    9654:	f008 fafa 	bl	11c4c <bt_hci_cmd_create>
		if (!buf) {
    9658:	4604      	mov	r4, r0
    965a:	2800      	cmp	r0, #0
    965c:	f000 80cc 	beq.w	97f8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9660:	2102      	movs	r1, #2
    9662:	300c      	adds	r0, #12
    9664:	f010 f830 	bl	196c8 <net_buf_simple_add>
		cp_le->le = 0x01;
    9668:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    966a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    966c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    966e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9670:	4632      	mov	r2, r6
    9672:	f640 406d 	movw	r0, #3181	; 0xc6d
    9676:	f008 fb37 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
    967a:	4604      	mov	r4, r0
    967c:	2800      	cmp	r0, #0
    967e:	d1a6      	bne.n	95ce <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9680:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9684:	071f      	lsls	r7, r3, #28
    9686:	d512      	bpl.n	96ae <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9688:	2100      	movs	r1, #0
    968a:	f242 001c 	movw	r0, #8220	; 0x201c
    968e:	aa05      	add	r2, sp, #20
    9690:	f008 fb2a 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
    9694:	4604      	mov	r4, r0
    9696:	2800      	cmp	r0, #0
    9698:	d199      	bne.n	95ce <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    969a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    969c:	68c3      	ldr	r3, [r0, #12]
    969e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96a2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96a6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96aa:	f00f feeb 	bl	19484 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    96ae:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    96b2:	069e      	lsls	r6, r3, #26
    96b4:	d524      	bpl.n	9700 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    96b6:	f10d 0112 	add.w	r1, sp, #18
    96ba:	a804      	add	r0, sp, #16
    96bc:	f008 fb8a 	bl	11dd4 <hci_le_read_max_data_len>
		if (err) {
    96c0:	4604      	mov	r4, r0
    96c2:	2800      	cmp	r0, #0
    96c4:	d183      	bne.n	95ce <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96c6:	2104      	movs	r1, #4
    96c8:	f242 0024 	movw	r0, #8228	; 0x2024
    96cc:	f008 fabe 	bl	11c4c <bt_hci_cmd_create>
		if (!buf) {
    96d0:	4606      	mov	r6, r0
    96d2:	2800      	cmp	r0, #0
    96d4:	f000 8090 	beq.w	97f8 <bt_init+0x3b8>
    96d8:	2104      	movs	r1, #4
    96da:	300c      	adds	r0, #12
    96dc:	f00f fff4 	bl	196c8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96e4:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96ec:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96ee:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f0:	f242 0024 	movw	r0, #8228	; 0x2024
    96f4:	f008 faf8 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
    96f8:	4604      	mov	r4, r0
    96fa:	2800      	cmp	r0, #0
    96fc:	f47f af67 	bne.w	95ce <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9700:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9704:	065c      	lsls	r4, r3, #25
    9706:	d510      	bpl.n	972a <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9708:	2100      	movs	r1, #0
    970a:	f242 002a 	movw	r0, #8234	; 0x202a
    970e:	aa05      	add	r2, sp, #20
    9710:	f008 faea 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
    9714:	4604      	mov	r4, r0
    9716:	2800      	cmp	r0, #0
    9718:	f47f af59 	bne.w	95ce <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    971c:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    971e:	68c3      	ldr	r3, [r0, #12]
    9720:	785b      	ldrb	r3, [r3, #1]
    9722:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    9726:	f00f fead 	bl	19484 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    972a:	2108      	movs	r1, #8
    972c:	f242 0001 	movw	r0, #8193	; 0x2001
    9730:	f008 fa8c 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
    9734:	4604      	mov	r4, r0
    9736:	2800      	cmp	r0, #0
    9738:	d05e      	beq.n	97f8 <bt_init+0x3b8>
    973a:	2108      	movs	r1, #8
    973c:	300c      	adds	r0, #12
    973e:	f00f ffc3 	bl	196c8 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    9742:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9746:	f240 2302 	movw	r3, #514	; 0x202
    974a:	f011 0f40 	tst.w	r1, #64	; 0x40
    974e:	bf08      	it	eq
    9750:	2303      	moveq	r3, #3
    9752:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9754:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9756:	bf4c      	ite	mi
    9758:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    975c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9760:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9762:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9766:	bf48      	it	mi
    9768:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    976c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9770:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9774:	bf18      	it	ne
    9776:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    977a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    977e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9780:	bf48      	it	mi
    9782:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9786:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9788:	bf08      	it	eq
    978a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    978e:	2100      	movs	r1, #0
    9790:	f01c fd36 	bl	26200 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9794:	4621      	mov	r1, r4
    9796:	2200      	movs	r2, #0
    9798:	f242 0001 	movw	r0, #8193	; 0x2001
    979c:	f008 faa4 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    97a0:	4604      	mov	r4, r0
    97a2:	2800      	cmp	r0, #0
    97a4:	f47f af13 	bne.w	95ce <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    97ac:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97b0:	069e      	lsls	r6, r3, #26
    97b2:	d424      	bmi.n	97fe <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    97b4:	b9c9      	cbnz	r1, 97ea <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    97b6:	f241 0005 	movw	r0, #4101	; 0x1005
    97ba:	aa05      	add	r2, sp, #20
    97bc:	f008 fa94 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    97c0:	4604      	mov	r4, r0
    97c2:	2800      	cmp	r0, #0
    97c4:	f47f af03 	bne.w	95ce <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    97c8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    97cc:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    97ce:	b94b      	cbnz	r3, 97e4 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    97d0:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    97d2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    97d6:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    97da:	889a      	ldrh	r2, [r3, #4]
    97dc:	4847      	ldr	r0, [pc, #284]	; (98fc <bt_init+0x4bc>)
    97de:	4611      	mov	r1, r2
    97e0:	f01f ff2b 	bl	2963a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    97e4:	4620      	mov	r0, r4
    97e6:	f00f fe4d 	bl	19484 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    97ea:	2108      	movs	r1, #8
    97ec:	f640 4001 	movw	r0, #3073	; 0xc01
    97f0:	f008 fa2c 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
    97f4:	4604      	mov	r4, r0
    97f6:	b980      	cbnz	r0, 981a <bt_init+0x3da>
		return -ENOBUFS;
    97f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    97fc:	e6e7      	b.n	95ce <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    97fe:	2900      	cmp	r1, #0
    9800:	d1f3      	bne.n	97ea <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9802:	4b3f      	ldr	r3, [pc, #252]	; (9900 <bt_init+0x4c0>)
    9804:	2201      	movs	r2, #1
    9806:	e9cd 0301 	strd	r0, r3, [sp, #4]
    980a:	493e      	ldr	r1, [pc, #248]	; (9904 <bt_init+0x4c4>)
    980c:	4603      	mov	r3, r0
    980e:	9000      	str	r0, [sp, #0]
    9810:	f01c fcdf 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    9814:	f06f 0404 	mvn.w	r4, #4
    9818:	e6d9      	b.n	95ce <bt_init+0x18e>
    981a:	2108      	movs	r1, #8
    981c:	300c      	adds	r0, #12
    981e:	f00f ff53 	bl	196c8 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9822:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9826:	4602      	mov	r2, r0
    9828:	07d9      	lsls	r1, r3, #31
    982a:	d41c      	bmi.n	9866 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    982c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    9830:	4835      	ldr	r0, [pc, #212]	; (9908 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    9832:	f01c fce5 	bl	26200 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9836:	4621      	mov	r1, r4
    9838:	2200      	movs	r2, #0
    983a:	f640 4001 	movw	r0, #3073	; 0xc01
    983e:	f008 fa53 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    9842:	4604      	mov	r4, r0
    9844:	2800      	cmp	r0, #0
    9846:	f47f aec2 	bne.w	95ce <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    984a:	4601      	mov	r1, r0
    984c:	aa05      	add	r2, sp, #20
    984e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9852:	f008 fa49 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    9856:	4606      	mov	r6, r0
    9858:	b148      	cbz	r0, 986e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    985a:	4b2c      	ldr	r3, [pc, #176]	; (990c <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    985c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9860:	9400      	str	r4, [sp, #0]
    9862:	4623      	mov	r3, r4
    9864:	e013      	b.n	988e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9866:	a122      	add	r1, pc, #136	; (adr r1, 98f0 <bt_init+0x4b0>)
    9868:	e9d1 0100 	ldrd	r0, r1, [r1]
    986c:	e7e1      	b.n	9832 <bt_init+0x3f2>
	net_buf_unref(rsp);
    986e:	9805      	ldr	r0, [sp, #20]
    9870:	f00f fe08 	bl	19484 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9874:	4631      	mov	r1, r6
    9876:	f64f 4002 	movw	r0, #64514	; 0xfc02
    987a:	aa05      	add	r2, sp, #20
    987c:	f008 fa34 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
    9880:	4604      	mov	r4, r0
    9882:	b1c0      	cbz	r0, 98b6 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9884:	4b22      	ldr	r3, [pc, #136]	; (9910 <bt_init+0x4d0>)
    9886:	9600      	str	r6, [sp, #0]
    9888:	e9cd 6301 	strd	r6, r3, [sp, #4]
    988c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    988e:	2202      	movs	r2, #2
    9890:	4618      	mov	r0, r3
    9892:	491c      	ldr	r1, [pc, #112]	; (9904 <bt_init+0x4c4>)
    9894:	f01c fc9d 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9898:	f009 fcca 	bl	13230 <bt_id_init>
	if (err) {
    989c:	4604      	mov	r4, r0
    989e:	2800      	cmp	r0, #0
    98a0:	f47f ae95 	bne.w	95ce <bt_init+0x18e>
		err = bt_conn_init();
    98a4:	f00b f9aa 	bl	14bfc <bt_conn_init>
		if (err) {
    98a8:	4604      	mov	r4, r0
    98aa:	2800      	cmp	r0, #0
    98ac:	f47f ae8f 	bne.w	95ce <bt_init+0x18e>
	bt_finalize_init();
    98b0:	f009 f80e 	bl	128d0 <bt_finalize_init>
	return 0;
    98b4:	e68b      	b.n	95ce <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    98b6:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    98b8:	68c3      	ldr	r3, [r0, #12]
    98ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    98be:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    98c2:	f00f fddf 	bl	19484 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    98c6:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    98ca:	075b      	lsls	r3, r3, #29
    98cc:	d5e4      	bpl.n	9898 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    98ce:	4621      	mov	r1, r4
    98d0:	f64f 4003 	movw	r0, #64515	; 0xfc03
    98d4:	aa05      	add	r2, sp, #20
    98d6:	f008 fa07 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
    98da:	b108      	cbz	r0, 98e0 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    98dc:	4b0d      	ldr	r3, [pc, #52]	; (9914 <bt_init+0x4d4>)
    98de:	e7bd      	b.n	985c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    98e0:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    98e2:	68c3      	ldr	r3, [r0, #12]
    98e4:	785b      	ldrb	r3, [r3, #1]
    98e6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    98ea:	f00f fdcb 	bl	19484 <net_buf_unref>
    98ee:	e7d3      	b.n	9898 <bt_init+0x458>
    98f0:	02008890 	.word	0x02008890
    98f4:	20008000 	.word	0x20008000
    98f8:	200080d0 	.word	0x200080d0
    98fc:	20008100 	.word	0x20008100
    9900:	0002dedc 	.word	0x0002dedc
    9904:	0002a990 	.word	0x0002a990
    9908:	02008810 	.word	0x02008810
    990c:	0002deff 	.word	0x0002deff
    9910:	0002df23 	.word	0x0002df23
    9914:	0002df4c 	.word	0x0002df4c

00009918 <__ieee754_log>:
    9918:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    991c:	4602      	mov	r2, r0
    991e:	460b      	mov	r3, r1
    9920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9924:	460d      	mov	r5, r1
    9926:	b087      	sub	sp, #28
    9928:	da24      	bge.n	9974 <__ieee754_log+0x5c>
    992a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    992e:	4304      	orrs	r4, r0
    9930:	d108      	bne.n	9944 <__ieee754_log+0x2c>
    9932:	2200      	movs	r2, #0
    9934:	2300      	movs	r3, #0
    9936:	2000      	movs	r0, #0
    9938:	49c9      	ldr	r1, [pc, #804]	; (9c60 <__ieee754_log+0x348>)
    993a:	f7fe fef3 	bl	8724 <__aeabi_ddiv>
    993e:	b007      	add	sp, #28
    9940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9944:	2900      	cmp	r1, #0
    9946:	da04      	bge.n	9952 <__ieee754_log+0x3a>
    9948:	f7fe fc0a 	bl	8160 <__aeabi_dsub>
    994c:	2200      	movs	r2, #0
    994e:	2300      	movs	r3, #0
    9950:	e7f3      	b.n	993a <__ieee754_log+0x22>
    9952:	2200      	movs	r2, #0
    9954:	4bc3      	ldr	r3, [pc, #780]	; (9c64 <__ieee754_log+0x34c>)
    9956:	f7fe fdbb 	bl	84d0 <__aeabi_dmul>
    995a:	460b      	mov	r3, r1
    995c:	460d      	mov	r5, r1
    995e:	4602      	mov	r2, r0
    9960:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9964:	48c0      	ldr	r0, [pc, #768]	; (9c68 <__ieee754_log+0x350>)
    9966:	4285      	cmp	r5, r0
    9968:	dd06      	ble.n	9978 <__ieee754_log+0x60>
    996a:	4610      	mov	r0, r2
    996c:	4619      	mov	r1, r3
    996e:	f7fe fbf9 	bl	8164 <__adddf3>
    9972:	e7e4      	b.n	993e <__ieee754_log+0x26>
    9974:	2100      	movs	r1, #0
    9976:	e7f5      	b.n	9964 <__ieee754_log+0x4c>
    9978:	152c      	asrs	r4, r5, #20
    997a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    997e:	4610      	mov	r0, r2
    9980:	2200      	movs	r2, #0
    9982:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9986:	440c      	add	r4, r1
    9988:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    998c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9990:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9994:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9998:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    999c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    99a0:	ea41 0305 	orr.w	r3, r1, r5
    99a4:	4619      	mov	r1, r3
    99a6:	4bb1      	ldr	r3, [pc, #708]	; (9c6c <__ieee754_log+0x354>)
    99a8:	f7fe fbda 	bl	8160 <__aeabi_dsub>
    99ac:	1cab      	adds	r3, r5, #2
    99ae:	4682      	mov	sl, r0
    99b0:	468b      	mov	fp, r1
    99b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    99b6:	2200      	movs	r2, #0
    99b8:	2b02      	cmp	r3, #2
    99ba:	dc53      	bgt.n	9a64 <__ieee754_log+0x14c>
    99bc:	2300      	movs	r3, #0
    99be:	f7ff fb07 	bl	8fd0 <__aeabi_dcmpeq>
    99c2:	b1d0      	cbz	r0, 99fa <__ieee754_log+0xe2>
    99c4:	2c00      	cmp	r4, #0
    99c6:	f000 8120 	beq.w	9c0a <__ieee754_log+0x2f2>
    99ca:	4620      	mov	r0, r4
    99cc:	f7fe fd16 	bl	83fc <__aeabi_i2d>
    99d0:	4606      	mov	r6, r0
    99d2:	460f      	mov	r7, r1
    99d4:	a38e      	add	r3, pc, #568	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    99d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    99da:	f7fe fd79 	bl	84d0 <__aeabi_dmul>
    99de:	4604      	mov	r4, r0
    99e0:	460d      	mov	r5, r1
    99e2:	4630      	mov	r0, r6
    99e4:	4639      	mov	r1, r7
    99e6:	a38c      	add	r3, pc, #560	; (adr r3, 9c18 <__ieee754_log+0x300>)
    99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ec:	f7fe fd70 	bl	84d0 <__aeabi_dmul>
    99f0:	4602      	mov	r2, r0
    99f2:	460b      	mov	r3, r1
    99f4:	4620      	mov	r0, r4
    99f6:	4629      	mov	r1, r5
    99f8:	e7b9      	b.n	996e <__ieee754_log+0x56>
    99fa:	a389      	add	r3, pc, #548	; (adr r3, 9c20 <__ieee754_log+0x308>)
    99fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a00:	4650      	mov	r0, sl
    9a02:	4659      	mov	r1, fp
    9a04:	f7fe fd64 	bl	84d0 <__aeabi_dmul>
    9a08:	4602      	mov	r2, r0
    9a0a:	460b      	mov	r3, r1
    9a0c:	2000      	movs	r0, #0
    9a0e:	4998      	ldr	r1, [pc, #608]	; (9c70 <__ieee754_log+0x358>)
    9a10:	f7fe fba6 	bl	8160 <__aeabi_dsub>
    9a14:	4606      	mov	r6, r0
    9a16:	460f      	mov	r7, r1
    9a18:	4652      	mov	r2, sl
    9a1a:	465b      	mov	r3, fp
    9a1c:	4650      	mov	r0, sl
    9a1e:	4659      	mov	r1, fp
    9a20:	f7fe fd56 	bl	84d0 <__aeabi_dmul>
    9a24:	4602      	mov	r2, r0
    9a26:	460b      	mov	r3, r1
    9a28:	4630      	mov	r0, r6
    9a2a:	4639      	mov	r1, r7
    9a2c:	f7fe fd50 	bl	84d0 <__aeabi_dmul>
    9a30:	4606      	mov	r6, r0
    9a32:	460f      	mov	r7, r1
    9a34:	b914      	cbnz	r4, 9a3c <__ieee754_log+0x124>
    9a36:	4632      	mov	r2, r6
    9a38:	463b      	mov	r3, r7
    9a3a:	e0a0      	b.n	9b7e <__ieee754_log+0x266>
    9a3c:	4620      	mov	r0, r4
    9a3e:	f7fe fcdd 	bl	83fc <__aeabi_i2d>
    9a42:	4680      	mov	r8, r0
    9a44:	4689      	mov	r9, r1
    9a46:	a372      	add	r3, pc, #456	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9a48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a4c:	f7fe fd40 	bl	84d0 <__aeabi_dmul>
    9a50:	4604      	mov	r4, r0
    9a52:	460d      	mov	r5, r1
    9a54:	4640      	mov	r0, r8
    9a56:	4649      	mov	r1, r9
    9a58:	a36f      	add	r3, pc, #444	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a5e:	f7fe fd37 	bl	84d0 <__aeabi_dmul>
    9a62:	e0a5      	b.n	9bb0 <__ieee754_log+0x298>
    9a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a68:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9a6c:	f7fe fb7a 	bl	8164 <__adddf3>
    9a70:	4602      	mov	r2, r0
    9a72:	460b      	mov	r3, r1
    9a74:	4650      	mov	r0, sl
    9a76:	4659      	mov	r1, fp
    9a78:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9a7c:	f7fe fe52 	bl	8724 <__aeabi_ddiv>
    9a80:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9a84:	3551      	adds	r5, #81	; 0x51
    9a86:	e9cd 0100 	strd	r0, r1, [sp]
    9a8a:	4620      	mov	r0, r4
    9a8c:	4335      	orrs	r5, r6
    9a8e:	f7fe fcb5 	bl	83fc <__aeabi_i2d>
    9a92:	e9dd 2300 	ldrd	r2, r3, [sp]
    9a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9a9a:	4610      	mov	r0, r2
    9a9c:	4619      	mov	r1, r3
    9a9e:	f7fe fd17 	bl	84d0 <__aeabi_dmul>
    9aa2:	4602      	mov	r2, r0
    9aa4:	460b      	mov	r3, r1
    9aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9aaa:	f7fe fd11 	bl	84d0 <__aeabi_dmul>
    9aae:	4680      	mov	r8, r0
    9ab0:	4689      	mov	r9, r1
    9ab2:	a35d      	add	r3, pc, #372	; (adr r3, 9c28 <__ieee754_log+0x310>)
    9ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ab8:	f7fe fd0a 	bl	84d0 <__aeabi_dmul>
    9abc:	a35c      	add	r3, pc, #368	; (adr r3, 9c30 <__ieee754_log+0x318>)
    9abe:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ac2:	f7fe fb4f 	bl	8164 <__adddf3>
    9ac6:	4642      	mov	r2, r8
    9ac8:	464b      	mov	r3, r9
    9aca:	f7fe fd01 	bl	84d0 <__aeabi_dmul>
    9ace:	a35a      	add	r3, pc, #360	; (adr r3, 9c38 <__ieee754_log+0x320>)
    9ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ad4:	f7fe fb46 	bl	8164 <__adddf3>
    9ad8:	4642      	mov	r2, r8
    9ada:	464b      	mov	r3, r9
    9adc:	f7fe fcf8 	bl	84d0 <__aeabi_dmul>
    9ae0:	a357      	add	r3, pc, #348	; (adr r3, 9c40 <__ieee754_log+0x328>)
    9ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ae6:	f7fe fb3d 	bl	8164 <__adddf3>
    9aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9aee:	f7fe fcef 	bl	84d0 <__aeabi_dmul>
    9af2:	a355      	add	r3, pc, #340	; (adr r3, 9c48 <__ieee754_log+0x330>)
    9af4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9afc:	4640      	mov	r0, r8
    9afe:	4649      	mov	r1, r9
    9b00:	f7fe fce6 	bl	84d0 <__aeabi_dmul>
    9b04:	a352      	add	r3, pc, #328	; (adr r3, 9c50 <__ieee754_log+0x338>)
    9b06:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b0a:	f7fe fb2b 	bl	8164 <__adddf3>
    9b0e:	4642      	mov	r2, r8
    9b10:	464b      	mov	r3, r9
    9b12:	f7fe fcdd 	bl	84d0 <__aeabi_dmul>
    9b16:	a350      	add	r3, pc, #320	; (adr r3, 9c58 <__ieee754_log+0x340>)
    9b18:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b1c:	f7fe fb22 	bl	8164 <__adddf3>
    9b20:	4642      	mov	r2, r8
    9b22:	464b      	mov	r3, r9
    9b24:	f7fe fcd4 	bl	84d0 <__aeabi_dmul>
    9b28:	4602      	mov	r2, r0
    9b2a:	460b      	mov	r3, r1
    9b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9b30:	f7fe fb18 	bl	8164 <__adddf3>
    9b34:	2d00      	cmp	r5, #0
    9b36:	4680      	mov	r8, r0
    9b38:	4689      	mov	r9, r1
    9b3a:	dd48      	ble.n	9bce <__ieee754_log+0x2b6>
    9b3c:	2200      	movs	r2, #0
    9b3e:	4b4c      	ldr	r3, [pc, #304]	; (9c70 <__ieee754_log+0x358>)
    9b40:	4650      	mov	r0, sl
    9b42:	4659      	mov	r1, fp
    9b44:	f7fe fcc4 	bl	84d0 <__aeabi_dmul>
    9b48:	4652      	mov	r2, sl
    9b4a:	465b      	mov	r3, fp
    9b4c:	f7fe fcc0 	bl	84d0 <__aeabi_dmul>
    9b50:	4602      	mov	r2, r0
    9b52:	460b      	mov	r3, r1
    9b54:	4606      	mov	r6, r0
    9b56:	460f      	mov	r7, r1
    9b58:	4640      	mov	r0, r8
    9b5a:	4649      	mov	r1, r9
    9b5c:	f7fe fb02 	bl	8164 <__adddf3>
    9b60:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b64:	f7fe fcb4 	bl	84d0 <__aeabi_dmul>
    9b68:	4680      	mov	r8, r0
    9b6a:	4689      	mov	r9, r1
    9b6c:	b964      	cbnz	r4, 9b88 <__ieee754_log+0x270>
    9b6e:	4602      	mov	r2, r0
    9b70:	460b      	mov	r3, r1
    9b72:	4630      	mov	r0, r6
    9b74:	4639      	mov	r1, r7
    9b76:	f7fe faf3 	bl	8160 <__aeabi_dsub>
    9b7a:	4602      	mov	r2, r0
    9b7c:	460b      	mov	r3, r1
    9b7e:	4650      	mov	r0, sl
    9b80:	4659      	mov	r1, fp
    9b82:	f7fe faed 	bl	8160 <__aeabi_dsub>
    9b86:	e6da      	b.n	993e <__ieee754_log+0x26>
    9b88:	a321      	add	r3, pc, #132	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9b92:	f7fe fc9d 	bl	84d0 <__aeabi_dmul>
    9b96:	4604      	mov	r4, r0
    9b98:	460d      	mov	r5, r1
    9b9a:	a31f      	add	r3, pc, #124	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9ba4:	f7fe fc94 	bl	84d0 <__aeabi_dmul>
    9ba8:	4642      	mov	r2, r8
    9baa:	464b      	mov	r3, r9
    9bac:	f7fe fada 	bl	8164 <__adddf3>
    9bb0:	4602      	mov	r2, r0
    9bb2:	460b      	mov	r3, r1
    9bb4:	4630      	mov	r0, r6
    9bb6:	4639      	mov	r1, r7
    9bb8:	f7fe fad2 	bl	8160 <__aeabi_dsub>
    9bbc:	4652      	mov	r2, sl
    9bbe:	465b      	mov	r3, fp
    9bc0:	f7fe face 	bl	8160 <__aeabi_dsub>
    9bc4:	4602      	mov	r2, r0
    9bc6:	460b      	mov	r3, r1
    9bc8:	4620      	mov	r0, r4
    9bca:	4629      	mov	r1, r5
    9bcc:	e7d9      	b.n	9b82 <__ieee754_log+0x26a>
    9bce:	4602      	mov	r2, r0
    9bd0:	460b      	mov	r3, r1
    9bd2:	4650      	mov	r0, sl
    9bd4:	4659      	mov	r1, fp
    9bd6:	f7fe fac3 	bl	8160 <__aeabi_dsub>
    9bda:	e9dd 2300 	ldrd	r2, r3, [sp]
    9bde:	f7fe fc77 	bl	84d0 <__aeabi_dmul>
    9be2:	4606      	mov	r6, r0
    9be4:	460f      	mov	r7, r1
    9be6:	2c00      	cmp	r4, #0
    9be8:	f43f af25 	beq.w	9a36 <__ieee754_log+0x11e>
    9bec:	a308      	add	r3, pc, #32	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9bee:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bf6:	f7fe fc6b 	bl	84d0 <__aeabi_dmul>
    9bfa:	4604      	mov	r4, r0
    9bfc:	460d      	mov	r5, r1
    9bfe:	a306      	add	r3, pc, #24	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9c00:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c08:	e729      	b.n	9a5e <__ieee754_log+0x146>
    9c0a:	2000      	movs	r0, #0
    9c0c:	2100      	movs	r1, #0
    9c0e:	e696      	b.n	993e <__ieee754_log+0x26>
    9c10:	fee00000 	.word	0xfee00000
    9c14:	3fe62e42 	.word	0x3fe62e42
    9c18:	35793c76 	.word	0x35793c76
    9c1c:	3dea39ef 	.word	0x3dea39ef
    9c20:	55555555 	.word	0x55555555
    9c24:	3fd55555 	.word	0x3fd55555
    9c28:	df3e5244 	.word	0xdf3e5244
    9c2c:	3fc2f112 	.word	0x3fc2f112
    9c30:	96cb03de 	.word	0x96cb03de
    9c34:	3fc74664 	.word	0x3fc74664
    9c38:	94229359 	.word	0x94229359
    9c3c:	3fd24924 	.word	0x3fd24924
    9c40:	55555593 	.word	0x55555593
    9c44:	3fe55555 	.word	0x3fe55555
    9c48:	d078c69f 	.word	0xd078c69f
    9c4c:	3fc39a09 	.word	0x3fc39a09
    9c50:	1d8e78af 	.word	0x1d8e78af
    9c54:	3fcc71c5 	.word	0x3fcc71c5
    9c58:	9997fa04 	.word	0x9997fa04
    9c5c:	3fd99999 	.word	0x3fd99999
    9c60:	c3500000 	.word	0xc3500000
    9c64:	43500000 	.word	0x43500000
    9c68:	7fefffff 	.word	0x7fefffff
    9c6c:	3ff00000 	.word	0x3ff00000
    9c70:	3fe00000 	.word	0x3fe00000
    9c74:	00000000 	.word	0x00000000

00009c78 <_dtoa_r>:
    9c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c7c:	4614      	mov	r4, r2
    9c7e:	b097      	sub	sp, #92	; 0x5c
    9c80:	461d      	mov	r5, r3
    9c82:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9c84:	4683      	mov	fp, r0
    9c86:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9c88:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9c8c:	b97f      	cbnz	r7, 9cae <_dtoa_r+0x36>
    9c8e:	2010      	movs	r0, #16
    9c90:	f019 f9cc 	bl	2302c <malloc>
    9c94:	4602      	mov	r2, r0
    9c96:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9c9a:	b920      	cbnz	r0, 9ca6 <_dtoa_r+0x2e>
    9c9c:	4ba2      	ldr	r3, [pc, #648]	; (9f28 <_dtoa_r+0x2b0>)
    9c9e:	21ea      	movs	r1, #234	; 0xea
    9ca0:	48a2      	ldr	r0, [pc, #648]	; (9f2c <_dtoa_r+0x2b4>)
    9ca2:	f019 fe2f 	bl	23904 <__assert_func>
    9ca6:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9caa:	6007      	str	r7, [r0, #0]
    9cac:	60c7      	str	r7, [r0, #12]
    9cae:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cb2:	6819      	ldr	r1, [r3, #0]
    9cb4:	b159      	cbz	r1, 9cce <_dtoa_r+0x56>
    9cb6:	685a      	ldr	r2, [r3, #4]
    9cb8:	2301      	movs	r3, #1
    9cba:	4658      	mov	r0, fp
    9cbc:	4093      	lsls	r3, r2
    9cbe:	604a      	str	r2, [r1, #4]
    9cc0:	608b      	str	r3, [r1, #8]
    9cc2:	f019 ff5f 	bl	23b84 <_Bfree>
    9cc6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cca:	2200      	movs	r2, #0
    9ccc:	601a      	str	r2, [r3, #0]
    9cce:	1e2b      	subs	r3, r5, #0
    9cd0:	bfb7      	itett	lt
    9cd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9cd6:	2300      	movge	r3, #0
    9cd8:	2201      	movlt	r2, #1
    9cda:	9305      	strlt	r3, [sp, #20]
    9cdc:	bfa8      	it	ge
    9cde:	6033      	strge	r3, [r6, #0]
    9ce0:	9f05      	ldr	r7, [sp, #20]
    9ce2:	4b93      	ldr	r3, [pc, #588]	; (9f30 <_dtoa_r+0x2b8>)
    9ce4:	bfb8      	it	lt
    9ce6:	6032      	strlt	r2, [r6, #0]
    9ce8:	43bb      	bics	r3, r7
    9cea:	d119      	bne.n	9d20 <_dtoa_r+0xa8>
    9cec:	f242 730f 	movw	r3, #9999	; 0x270f
    9cf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9cf2:	6013      	str	r3, [r2, #0]
    9cf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9cf8:	4323      	orrs	r3, r4
    9cfa:	f000 85e0 	beq.w	a8be <_dtoa_r+0xc46>
    9cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d00:	b953      	cbnz	r3, 9d18 <_dtoa_r+0xa0>
    9d02:	4b8c      	ldr	r3, [pc, #560]	; (9f34 <_dtoa_r+0x2bc>)
    9d04:	e021      	b.n	9d4a <_dtoa_r+0xd2>
    9d06:	4b8c      	ldr	r3, [pc, #560]	; (9f38 <_dtoa_r+0x2c0>)
    9d08:	9308      	str	r3, [sp, #32]
    9d0a:	3308      	adds	r3, #8
    9d0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d0e:	6013      	str	r3, [r2, #0]
    9d10:	9808      	ldr	r0, [sp, #32]
    9d12:	b017      	add	sp, #92	; 0x5c
    9d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d18:	4b86      	ldr	r3, [pc, #536]	; (9f34 <_dtoa_r+0x2bc>)
    9d1a:	9308      	str	r3, [sp, #32]
    9d1c:	3303      	adds	r3, #3
    9d1e:	e7f5      	b.n	9d0c <_dtoa_r+0x94>
    9d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d2c:	2200      	movs	r2, #0
    9d2e:	2300      	movs	r3, #0
    9d30:	f7ff f94e 	bl	8fd0 <__aeabi_dcmpeq>
    9d34:	4680      	mov	r8, r0
    9d36:	b150      	cbz	r0, 9d4e <_dtoa_r+0xd6>
    9d38:	2301      	movs	r3, #1
    9d3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d3c:	6013      	str	r3, [r2, #0]
    9d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d40:	b113      	cbz	r3, 9d48 <_dtoa_r+0xd0>
    9d42:	4b7e      	ldr	r3, [pc, #504]	; (9f3c <_dtoa_r+0x2c4>)
    9d44:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d46:	6013      	str	r3, [r2, #0]
    9d48:	4b7d      	ldr	r3, [pc, #500]	; (9f40 <_dtoa_r+0x2c8>)
    9d4a:	9308      	str	r3, [sp, #32]
    9d4c:	e7e0      	b.n	9d10 <_dtoa_r+0x98>
    9d4e:	ab14      	add	r3, sp, #80	; 0x50
    9d50:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9d54:	4658      	mov	r0, fp
    9d56:	9301      	str	r3, [sp, #4]
    9d58:	ab15      	add	r3, sp, #84	; 0x54
    9d5a:	9300      	str	r3, [sp, #0]
    9d5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9d60:	f01a f996 	bl	24090 <__d2b>
    9d64:	9003      	str	r0, [sp, #12]
    9d66:	2e00      	cmp	r6, #0
    9d68:	d078      	beq.n	9e5c <_dtoa_r+0x1e4>
    9d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d6c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9d70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9d78:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9d7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9d84:	4619      	mov	r1, r3
    9d86:	2200      	movs	r2, #0
    9d88:	4b6e      	ldr	r3, [pc, #440]	; (9f44 <_dtoa_r+0x2cc>)
    9d8a:	f7fe f9e9 	bl	8160 <__aeabi_dsub>
    9d8e:	a360      	add	r3, pc, #384	; (adr r3, 9f10 <_dtoa_r+0x298>)
    9d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d94:	f7fe fb9c 	bl	84d0 <__aeabi_dmul>
    9d98:	a35f      	add	r3, pc, #380	; (adr r3, 9f18 <_dtoa_r+0x2a0>)
    9d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d9e:	f7fe f9e1 	bl	8164 <__adddf3>
    9da2:	4604      	mov	r4, r0
    9da4:	460d      	mov	r5, r1
    9da6:	4630      	mov	r0, r6
    9da8:	f7fe fb28 	bl	83fc <__aeabi_i2d>
    9dac:	a35c      	add	r3, pc, #368	; (adr r3, 9f20 <_dtoa_r+0x2a8>)
    9dae:	e9d3 2300 	ldrd	r2, r3, [r3]
    9db2:	f7fe fb8d 	bl	84d0 <__aeabi_dmul>
    9db6:	4602      	mov	r2, r0
    9db8:	460b      	mov	r3, r1
    9dba:	4620      	mov	r0, r4
    9dbc:	4629      	mov	r1, r5
    9dbe:	f7fe f9d1 	bl	8164 <__adddf3>
    9dc2:	4604      	mov	r4, r0
    9dc4:	460d      	mov	r5, r1
    9dc6:	f7ff f94b 	bl	9060 <__aeabi_d2iz>
    9dca:	2200      	movs	r2, #0
    9dcc:	4607      	mov	r7, r0
    9dce:	2300      	movs	r3, #0
    9dd0:	4620      	mov	r0, r4
    9dd2:	4629      	mov	r1, r5
    9dd4:	f7ff f906 	bl	8fe4 <__aeabi_dcmplt>
    9dd8:	b140      	cbz	r0, 9dec <_dtoa_r+0x174>
    9dda:	4638      	mov	r0, r7
    9ddc:	f7fe fb0e 	bl	83fc <__aeabi_i2d>
    9de0:	4622      	mov	r2, r4
    9de2:	462b      	mov	r3, r5
    9de4:	f7ff f8f4 	bl	8fd0 <__aeabi_dcmpeq>
    9de8:	b900      	cbnz	r0, 9dec <_dtoa_r+0x174>
    9dea:	3f01      	subs	r7, #1
    9dec:	2f16      	cmp	r7, #22
    9dee:	d854      	bhi.n	9e9a <_dtoa_r+0x222>
    9df0:	4b55      	ldr	r3, [pc, #340]	; (9f48 <_dtoa_r+0x2d0>)
    9df2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dfe:	f7ff f8f1 	bl	8fe4 <__aeabi_dcmplt>
    9e02:	2800      	cmp	r0, #0
    9e04:	d04b      	beq.n	9e9e <_dtoa_r+0x226>
    9e06:	3f01      	subs	r7, #1
    9e08:	2300      	movs	r3, #0
    9e0a:	9312      	str	r3, [sp, #72]	; 0x48
    9e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e0e:	1b9b      	subs	r3, r3, r6
    9e10:	1e5a      	subs	r2, r3, #1
    9e12:	bf4c      	ite	mi
    9e14:	f1c3 0301 	rsbmi	r3, r3, #1
    9e18:	2300      	movpl	r3, #0
    9e1a:	920a      	str	r2, [sp, #40]	; 0x28
    9e1c:	bf45      	ittet	mi
    9e1e:	9306      	strmi	r3, [sp, #24]
    9e20:	2300      	movmi	r3, #0
    9e22:	9306      	strpl	r3, [sp, #24]
    9e24:	930a      	strmi	r3, [sp, #40]	; 0x28
    9e26:	2f00      	cmp	r7, #0
    9e28:	db3b      	blt.n	9ea2 <_dtoa_r+0x22a>
    9e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e2c:	970f      	str	r7, [sp, #60]	; 0x3c
    9e2e:	443b      	add	r3, r7
    9e30:	930a      	str	r3, [sp, #40]	; 0x28
    9e32:	2300      	movs	r3, #0
    9e34:	930b      	str	r3, [sp, #44]	; 0x2c
    9e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e38:	2b09      	cmp	r3, #9
    9e3a:	f200 8089 	bhi.w	9f50 <_dtoa_r+0x2d8>
    9e3e:	2b05      	cmp	r3, #5
    9e40:	bfc5      	ittet	gt
    9e42:	3b04      	subgt	r3, #4
    9e44:	2400      	movgt	r4, #0
    9e46:	2401      	movle	r4, #1
    9e48:	9320      	strgt	r3, [sp, #128]	; 0x80
    9e4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e4c:	3b02      	subs	r3, #2
    9e4e:	2b03      	cmp	r3, #3
    9e50:	f200 8089 	bhi.w	9f66 <_dtoa_r+0x2ee>
    9e54:	e8df f003 	tbb	[pc, r3]
    9e58:	59383a2d 	.word	0x59383a2d
    9e5c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9e60:	441e      	add	r6, r3
    9e62:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9e66:	2b20      	cmp	r3, #32
    9e68:	bfc9      	itett	gt
    9e6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9e6e:	f1c3 0320 	rsble	r3, r3, #32
    9e72:	409f      	lslgt	r7, r3
    9e74:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9e78:	bfd8      	it	le
    9e7a:	fa04 f003 	lslle.w	r0, r4, r3
    9e7e:	f106 36ff 	add.w	r6, r6, #4294967295
    9e82:	bfc4      	itt	gt
    9e84:	fa24 f303 	lsrgt.w	r3, r4, r3
    9e88:	ea47 0003 	orrgt.w	r0, r7, r3
    9e8c:	f7fe faa6 	bl	83dc <__aeabi_ui2d>
    9e90:	2201      	movs	r2, #1
    9e92:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9e96:	9213      	str	r2, [sp, #76]	; 0x4c
    9e98:	e774      	b.n	9d84 <_dtoa_r+0x10c>
    9e9a:	2301      	movs	r3, #1
    9e9c:	e7b5      	b.n	9e0a <_dtoa_r+0x192>
    9e9e:	9012      	str	r0, [sp, #72]	; 0x48
    9ea0:	e7b4      	b.n	9e0c <_dtoa_r+0x194>
    9ea2:	9b06      	ldr	r3, [sp, #24]
    9ea4:	1bdb      	subs	r3, r3, r7
    9ea6:	9306      	str	r3, [sp, #24]
    9ea8:	427b      	negs	r3, r7
    9eaa:	930b      	str	r3, [sp, #44]	; 0x2c
    9eac:	2300      	movs	r3, #0
    9eae:	930f      	str	r3, [sp, #60]	; 0x3c
    9eb0:	e7c1      	b.n	9e36 <_dtoa_r+0x1be>
    9eb2:	2300      	movs	r3, #0
    9eb4:	930e      	str	r3, [sp, #56]	; 0x38
    9eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eb8:	2b00      	cmp	r3, #0
    9eba:	dc57      	bgt.n	9f6c <_dtoa_r+0x2f4>
    9ebc:	2301      	movs	r3, #1
    9ebe:	4699      	mov	r9, r3
    9ec0:	461a      	mov	r2, r3
    9ec2:	9309      	str	r3, [sp, #36]	; 0x24
    9ec4:	9221      	str	r2, [sp, #132]	; 0x84
    9ec6:	e00c      	b.n	9ee2 <_dtoa_r+0x26a>
    9ec8:	2301      	movs	r3, #1
    9eca:	e7f3      	b.n	9eb4 <_dtoa_r+0x23c>
    9ecc:	2300      	movs	r3, #0
    9ece:	930e      	str	r3, [sp, #56]	; 0x38
    9ed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ed2:	18fb      	adds	r3, r7, r3
    9ed4:	f103 0901 	add.w	r9, r3, #1
    9ed8:	9309      	str	r3, [sp, #36]	; 0x24
    9eda:	464b      	mov	r3, r9
    9edc:	2b01      	cmp	r3, #1
    9ede:	bfb8      	it	lt
    9ee0:	2301      	movlt	r3, #1
    9ee2:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9ee6:	2100      	movs	r1, #0
    9ee8:	2204      	movs	r2, #4
    9eea:	f102 0514 	add.w	r5, r2, #20
    9eee:	429d      	cmp	r5, r3
    9ef0:	d940      	bls.n	9f74 <_dtoa_r+0x2fc>
    9ef2:	6041      	str	r1, [r0, #4]
    9ef4:	4658      	mov	r0, fp
    9ef6:	f019 fe05 	bl	23b04 <_Balloc>
    9efa:	9008      	str	r0, [sp, #32]
    9efc:	2800      	cmp	r0, #0
    9efe:	d13c      	bne.n	9f7a <_dtoa_r+0x302>
    9f00:	4b12      	ldr	r3, [pc, #72]	; (9f4c <_dtoa_r+0x2d4>)
    9f02:	4602      	mov	r2, r0
    9f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9f08:	e6ca      	b.n	9ca0 <_dtoa_r+0x28>
    9f0a:	2301      	movs	r3, #1
    9f0c:	e7df      	b.n	9ece <_dtoa_r+0x256>
    9f0e:	bf00      	nop
    9f10:	636f4361 	.word	0x636f4361
    9f14:	3fd287a7 	.word	0x3fd287a7
    9f18:	8b60c8b3 	.word	0x8b60c8b3
    9f1c:	3fc68a28 	.word	0x3fc68a28
    9f20:	509f79fb 	.word	0x509f79fb
    9f24:	3fd34413 	.word	0x3fd34413
    9f28:	00031362 	.word	0x00031362
    9f2c:	00031438 	.word	0x00031438
    9f30:	7ff00000 	.word	0x7ff00000
    9f34:	00031434 	.word	0x00031434
    9f38:	0003142b 	.word	0x0003142b
    9f3c:	000311d3 	.word	0x000311d3
    9f40:	000311d2 	.word	0x000311d2
    9f44:	3ff80000 	.word	0x3ff80000
    9f48:	0002ab90 	.word	0x0002ab90
    9f4c:	000314ac 	.word	0x000314ac
    9f50:	2401      	movs	r4, #1
    9f52:	2300      	movs	r3, #0
    9f54:	940e      	str	r4, [sp, #56]	; 0x38
    9f56:	9320      	str	r3, [sp, #128]	; 0x80
    9f58:	f04f 33ff 	mov.w	r3, #4294967295
    9f5c:	2200      	movs	r2, #0
    9f5e:	4699      	mov	r9, r3
    9f60:	9309      	str	r3, [sp, #36]	; 0x24
    9f62:	2312      	movs	r3, #18
    9f64:	e7ae      	b.n	9ec4 <_dtoa_r+0x24c>
    9f66:	2301      	movs	r3, #1
    9f68:	930e      	str	r3, [sp, #56]	; 0x38
    9f6a:	e7f5      	b.n	9f58 <_dtoa_r+0x2e0>
    9f6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f6e:	4699      	mov	r9, r3
    9f70:	9309      	str	r3, [sp, #36]	; 0x24
    9f72:	e7b6      	b.n	9ee2 <_dtoa_r+0x26a>
    9f74:	3101      	adds	r1, #1
    9f76:	0052      	lsls	r2, r2, #1
    9f78:	e7b7      	b.n	9eea <_dtoa_r+0x272>
    9f7a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9f7e:	f1b9 0f0e 	cmp.w	r9, #14
    9f82:	9a08      	ldr	r2, [sp, #32]
    9f84:	601a      	str	r2, [r3, #0]
    9f86:	d86f      	bhi.n	a068 <_dtoa_r+0x3f0>
    9f88:	2c00      	cmp	r4, #0
    9f8a:	d06d      	beq.n	a068 <_dtoa_r+0x3f0>
    9f8c:	2f00      	cmp	r7, #0
    9f8e:	dd36      	ble.n	9ffe <_dtoa_r+0x386>
    9f90:	f007 020f 	and.w	r2, r7, #15
    9f94:	4ba0      	ldr	r3, [pc, #640]	; (a218 <_dtoa_r+0x5a0>)
    9f96:	05f8      	lsls	r0, r7, #23
    9f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
    9fa0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9fa4:	ea4f 1427 	mov.w	r4, r7, asr #4
    9fa8:	d517      	bpl.n	9fda <_dtoa_r+0x362>
    9faa:	4b9c      	ldr	r3, [pc, #624]	; (a21c <_dtoa_r+0x5a4>)
    9fac:	f004 040f 	and.w	r4, r4, #15
    9fb0:	f04f 0803 	mov.w	r8, #3
    9fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9fbc:	f7fe fbb2 	bl	8724 <__aeabi_ddiv>
    9fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fc4:	4d95      	ldr	r5, [pc, #596]	; (a21c <_dtoa_r+0x5a4>)
    9fc6:	b95c      	cbnz	r4, 9fe0 <_dtoa_r+0x368>
    9fc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9fd0:	f7fe fba8 	bl	8724 <__aeabi_ddiv>
    9fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fd8:	e02b      	b.n	a032 <_dtoa_r+0x3ba>
    9fda:	f04f 0802 	mov.w	r8, #2
    9fde:	e7f1      	b.n	9fc4 <_dtoa_r+0x34c>
    9fe0:	07e1      	lsls	r1, r4, #31
    9fe2:	d509      	bpl.n	9ff8 <_dtoa_r+0x380>
    9fe4:	f108 0801 	add.w	r8, r8, #1
    9fe8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9fec:	e9d5 2300 	ldrd	r2, r3, [r5]
    9ff0:	f7fe fa6e 	bl	84d0 <__aeabi_dmul>
    9ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9ff8:	1064      	asrs	r4, r4, #1
    9ffa:	3508      	adds	r5, #8
    9ffc:	e7e3      	b.n	9fc6 <_dtoa_r+0x34e>
    9ffe:	f000 8107 	beq.w	a210 <_dtoa_r+0x598>
    a002:	427c      	negs	r4, r7
    a004:	4b84      	ldr	r3, [pc, #528]	; (a218 <_dtoa_r+0x5a0>)
    a006:	4d85      	ldr	r5, [pc, #532]	; (a21c <_dtoa_r+0x5a4>)
    a008:	f04f 0802 	mov.w	r8, #2
    a00c:	f004 020f 	and.w	r2, r4, #15
    a010:	1124      	asrs	r4, r4, #4
    a012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a01e:	f7fe fa57 	bl	84d0 <__aeabi_dmul>
    a022:	2300      	movs	r3, #0
    a024:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a028:	2c00      	cmp	r4, #0
    a02a:	f040 80e5 	bne.w	a1f8 <_dtoa_r+0x580>
    a02e:	2b00      	cmp	r3, #0
    a030:	d1d0      	bne.n	9fd4 <_dtoa_r+0x35c>
    a032:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a034:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a038:	2b00      	cmp	r3, #0
    a03a:	f000 814c 	beq.w	a2d6 <_dtoa_r+0x65e>
    a03e:	2200      	movs	r2, #0
    a040:	4b77      	ldr	r3, [pc, #476]	; (a220 <_dtoa_r+0x5a8>)
    a042:	4620      	mov	r0, r4
    a044:	4629      	mov	r1, r5
    a046:	f7fe ffcd 	bl	8fe4 <__aeabi_dcmplt>
    a04a:	2800      	cmp	r0, #0
    a04c:	f000 8143 	beq.w	a2d6 <_dtoa_r+0x65e>
    a050:	f1b9 0f00 	cmp.w	r9, #0
    a054:	f000 813f 	beq.w	a2d6 <_dtoa_r+0x65e>
    a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a05a:	2b00      	cmp	r3, #0
    a05c:	f300 80e4 	bgt.w	a228 <_dtoa_r+0x5b0>
    a060:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a064:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a068:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a06a:	2b00      	cmp	r3, #0
    a06c:	db02      	blt.n	a074 <_dtoa_r+0x3fc>
    a06e:	2f0e      	cmp	r7, #14
    a070:	f340 8242 	ble.w	a4f8 <_dtoa_r+0x880>
    a074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a076:	2a00      	cmp	r2, #0
    a078:	f040 8267 	bne.w	a54a <_dtoa_r+0x8d2>
    a07c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a07e:	2500      	movs	r5, #0
    a080:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a084:	f1b8 0f00 	cmp.w	r8, #0
    a088:	d00d      	beq.n	a0a6 <_dtoa_r+0x42e>
    a08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a08c:	2b00      	cmp	r3, #0
    a08e:	dd0a      	ble.n	a0a6 <_dtoa_r+0x42e>
    a090:	4543      	cmp	r3, r8
    a092:	9a06      	ldr	r2, [sp, #24]
    a094:	bfa8      	it	ge
    a096:	4643      	movge	r3, r8
    a098:	1ad2      	subs	r2, r2, r3
    a09a:	eba8 0803 	sub.w	r8, r8, r3
    a09e:	9206      	str	r2, [sp, #24]
    a0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0a2:	1ad3      	subs	r3, r2, r3
    a0a4:	930a      	str	r3, [sp, #40]	; 0x28
    a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0a8:	b30b      	cbz	r3, a0ee <_dtoa_r+0x476>
    a0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	f000 82a6 	beq.w	a5fe <_dtoa_r+0x986>
    a0b2:	2c00      	cmp	r4, #0
    a0b4:	f000 82a1 	beq.w	a5fa <_dtoa_r+0x982>
    a0b8:	4629      	mov	r1, r5
    a0ba:	4622      	mov	r2, r4
    a0bc:	4658      	mov	r0, fp
    a0be:	f019 fe8b 	bl	23dd8 <__pow5mult>
    a0c2:	9a03      	ldr	r2, [sp, #12]
    a0c4:	4601      	mov	r1, r0
    a0c6:	4605      	mov	r5, r0
    a0c8:	4658      	mov	r0, fp
    a0ca:	f019 fddb 	bl	23c84 <__multiply>
    a0ce:	9903      	ldr	r1, [sp, #12]
    a0d0:	4606      	mov	r6, r0
    a0d2:	4658      	mov	r0, fp
    a0d4:	f019 fd56 	bl	23b84 <_Bfree>
    a0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0da:	1b1b      	subs	r3, r3, r4
    a0dc:	930b      	str	r3, [sp, #44]	; 0x2c
    a0de:	f000 8291 	beq.w	a604 <_dtoa_r+0x98c>
    a0e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a0e4:	4631      	mov	r1, r6
    a0e6:	4658      	mov	r0, fp
    a0e8:	f019 fe76 	bl	23dd8 <__pow5mult>
    a0ec:	9003      	str	r0, [sp, #12]
    a0ee:	2101      	movs	r1, #1
    a0f0:	4658      	mov	r0, fp
    a0f2:	f019 fdb1 	bl	23c58 <__i2b>
    a0f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0f8:	4604      	mov	r4, r0
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	f000 8284 	beq.w	a608 <_dtoa_r+0x990>
    a100:	461a      	mov	r2, r3
    a102:	4601      	mov	r1, r0
    a104:	4658      	mov	r0, fp
    a106:	f019 fe67 	bl	23dd8 <__pow5mult>
    a10a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a10c:	4604      	mov	r4, r0
    a10e:	2b01      	cmp	r3, #1
    a110:	dc03      	bgt.n	a11a <_dtoa_r+0x4a2>
    a112:	9b04      	ldr	r3, [sp, #16]
    a114:	2b00      	cmp	r3, #0
    a116:	f000 827c 	beq.w	a612 <_dtoa_r+0x99a>
    a11a:	2600      	movs	r6, #0
    a11c:	6923      	ldr	r3, [r4, #16]
    a11e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a122:	6918      	ldr	r0, [r3, #16]
    a124:	f01f fef3 	bl	29f0e <__hi0bits>
    a128:	f1c0 0020 	rsb	r0, r0, #32
    a12c:	960f      	str	r6, [sp, #60]	; 0x3c
    a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a130:	4418      	add	r0, r3
    a132:	f010 001f 	ands.w	r0, r0, #31
    a136:	f000 8291 	beq.w	a65c <_dtoa_r+0x9e4>
    a13a:	f1c0 0320 	rsb	r3, r0, #32
    a13e:	2b04      	cmp	r3, #4
    a140:	f340 8281 	ble.w	a646 <_dtoa_r+0x9ce>
    a144:	f1c0 001c 	rsb	r0, r0, #28
    a148:	9b06      	ldr	r3, [sp, #24]
    a14a:	4403      	add	r3, r0
    a14c:	4480      	add	r8, r0
    a14e:	9306      	str	r3, [sp, #24]
    a150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a152:	4403      	add	r3, r0
    a154:	930a      	str	r3, [sp, #40]	; 0x28
    a156:	9b06      	ldr	r3, [sp, #24]
    a158:	2b00      	cmp	r3, #0
    a15a:	dd05      	ble.n	a168 <_dtoa_r+0x4f0>
    a15c:	461a      	mov	r2, r3
    a15e:	9903      	ldr	r1, [sp, #12]
    a160:	4658      	mov	r0, fp
    a162:	f019 fe93 	bl	23e8c <__lshift>
    a166:	9003      	str	r0, [sp, #12]
    a168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a16a:	2b00      	cmp	r3, #0
    a16c:	dd05      	ble.n	a17a <_dtoa_r+0x502>
    a16e:	4621      	mov	r1, r4
    a170:	461a      	mov	r2, r3
    a172:	4658      	mov	r0, fp
    a174:	f019 fe8a 	bl	23e8c <__lshift>
    a178:	4604      	mov	r4, r0
    a17a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a17c:	2b00      	cmp	r3, #0
    a17e:	f000 8276 	beq.w	a66e <_dtoa_r+0x9f6>
    a182:	4621      	mov	r1, r4
    a184:	9803      	ldr	r0, [sp, #12]
    a186:	f01f ff11 	bl	29fac <__mcmp>
    a18a:	2800      	cmp	r0, #0
    a18c:	f280 826f 	bge.w	a66e <_dtoa_r+0x9f6>
    a190:	2300      	movs	r3, #0
    a192:	220a      	movs	r2, #10
    a194:	9903      	ldr	r1, [sp, #12]
    a196:	4658      	mov	r0, fp
    a198:	f019 fd16 	bl	23bc8 <__multadd>
    a19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a19e:	1e7e      	subs	r6, r7, #1
    a1a0:	9003      	str	r0, [sp, #12]
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	f000 825c 	beq.w	a660 <_dtoa_r+0x9e8>
    a1a8:	2300      	movs	r3, #0
    a1aa:	4629      	mov	r1, r5
    a1ac:	220a      	movs	r2, #10
    a1ae:	4658      	mov	r0, fp
    a1b0:	f019 fd0a 	bl	23bc8 <__multadd>
    a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1b6:	4605      	mov	r5, r0
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	dc03      	bgt.n	a1c4 <_dtoa_r+0x54c>
    a1bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1be:	2b02      	cmp	r3, #2
    a1c0:	f300 825e 	bgt.w	a680 <_dtoa_r+0xa08>
    a1c4:	f1b8 0f00 	cmp.w	r8, #0
    a1c8:	dd05      	ble.n	a1d6 <_dtoa_r+0x55e>
    a1ca:	4629      	mov	r1, r5
    a1cc:	4642      	mov	r2, r8
    a1ce:	4658      	mov	r0, fp
    a1d0:	f019 fe5c 	bl	23e8c <__lshift>
    a1d4:	4605      	mov	r5, r0
    a1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1d8:	2b00      	cmp	r3, #0
    a1da:	f000 82d0 	beq.w	a77e <_dtoa_r+0xb06>
    a1de:	6869      	ldr	r1, [r5, #4]
    a1e0:	4658      	mov	r0, fp
    a1e2:	f019 fc8f 	bl	23b04 <_Balloc>
    a1e6:	4607      	mov	r7, r0
    a1e8:	2800      	cmp	r0, #0
    a1ea:	f040 827f 	bne.w	a6ec <_dtoa_r+0xa74>
    a1ee:	4b0d      	ldr	r3, [pc, #52]	; (a224 <_dtoa_r+0x5ac>)
    a1f0:	4602      	mov	r2, r0
    a1f2:	f240 21ea 	movw	r1, #746	; 0x2ea
    a1f6:	e553      	b.n	9ca0 <_dtoa_r+0x28>
    a1f8:	07e2      	lsls	r2, r4, #31
    a1fa:	d506      	bpl.n	a20a <_dtoa_r+0x592>
    a1fc:	f108 0801 	add.w	r8, r8, #1
    a200:	e9d5 2300 	ldrd	r2, r3, [r5]
    a204:	f7fe f964 	bl	84d0 <__aeabi_dmul>
    a208:	2301      	movs	r3, #1
    a20a:	1064      	asrs	r4, r4, #1
    a20c:	3508      	adds	r5, #8
    a20e:	e70b      	b.n	a028 <_dtoa_r+0x3b0>
    a210:	f04f 0802 	mov.w	r8, #2
    a214:	e70d      	b.n	a032 <_dtoa_r+0x3ba>
    a216:	bf00      	nop
    a218:	0002ab90 	.word	0x0002ab90
    a21c:	0002ab68 	.word	0x0002ab68
    a220:	3ff00000 	.word	0x3ff00000
    a224:	000314ac 	.word	0x000314ac
    a228:	4620      	mov	r0, r4
    a22a:	2200      	movs	r2, #0
    a22c:	4bac      	ldr	r3, [pc, #688]	; (a4e0 <_dtoa_r+0x868>)
    a22e:	4629      	mov	r1, r5
    a230:	f7fe f94e 	bl	84d0 <__aeabi_dmul>
    a234:	1e7e      	subs	r6, r7, #1
    a236:	f108 0801 	add.w	r8, r8, #1
    a23a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a23c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a240:	4640      	mov	r0, r8
    a242:	f7fe f8db 	bl	83fc <__aeabi_i2d>
    a246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a24a:	f7fe f941 	bl	84d0 <__aeabi_dmul>
    a24e:	4ba5      	ldr	r3, [pc, #660]	; (a4e4 <_dtoa_r+0x86c>)
    a250:	2200      	movs	r2, #0
    a252:	f7fd ff87 	bl	8164 <__adddf3>
    a256:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a25a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a25e:	9311      	str	r3, [sp, #68]	; 0x44
    a260:	2c00      	cmp	r4, #0
    a262:	d13b      	bne.n	a2dc <_dtoa_r+0x664>
    a264:	2200      	movs	r2, #0
    a266:	4ba0      	ldr	r3, [pc, #640]	; (a4e8 <_dtoa_r+0x870>)
    a268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a26c:	f7fd ff78 	bl	8160 <__aeabi_dsub>
    a270:	4602      	mov	r2, r0
    a272:	460b      	mov	r3, r1
    a274:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a278:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a27c:	f7fe fed0 	bl	9020 <__aeabi_dcmpgt>
    a280:	2800      	cmp	r0, #0
    a282:	f040 8157 	bne.w	a534 <_dtoa_r+0x8bc>
    a286:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a292:	f7fe fea7 	bl	8fe4 <__aeabi_dcmplt>
    a296:	2800      	cmp	r0, #0
    a298:	f43f aee2 	beq.w	a060 <_dtoa_r+0x3e8>
    a29c:	2400      	movs	r4, #0
    a29e:	4625      	mov	r5, r4
    a2a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a2a2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a2a6:	43de      	mvns	r6, r3
    a2a8:	f04f 0800 	mov.w	r8, #0
    a2ac:	4621      	mov	r1, r4
    a2ae:	4658      	mov	r0, fp
    a2b0:	f019 fc68 	bl	23b84 <_Bfree>
    a2b4:	2d00      	cmp	r5, #0
    a2b6:	f000 80a9 	beq.w	a40c <_dtoa_r+0x794>
    a2ba:	f1b8 0f00 	cmp.w	r8, #0
    a2be:	d005      	beq.n	a2cc <_dtoa_r+0x654>
    a2c0:	45a8      	cmp	r8, r5
    a2c2:	d003      	beq.n	a2cc <_dtoa_r+0x654>
    a2c4:	4641      	mov	r1, r8
    a2c6:	4658      	mov	r0, fp
    a2c8:	f019 fc5c 	bl	23b84 <_Bfree>
    a2cc:	4629      	mov	r1, r5
    a2ce:	4658      	mov	r0, fp
    a2d0:	f019 fc58 	bl	23b84 <_Bfree>
    a2d4:	e09a      	b.n	a40c <_dtoa_r+0x794>
    a2d6:	463e      	mov	r6, r7
    a2d8:	464c      	mov	r4, r9
    a2da:	e7b1      	b.n	a240 <_dtoa_r+0x5c8>
    a2dc:	4b83      	ldr	r3, [pc, #524]	; (a4ec <_dtoa_r+0x874>)
    a2de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a2e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a2e6:	9b08      	ldr	r3, [sp, #32]
    a2e8:	441c      	add	r4, r3
    a2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	d04a      	beq.n	a386 <_dtoa_r+0x70e>
    a2f0:	4602      	mov	r2, r0
    a2f2:	460b      	mov	r3, r1
    a2f4:	2000      	movs	r0, #0
    a2f6:	497e      	ldr	r1, [pc, #504]	; (a4f0 <_dtoa_r+0x878>)
    a2f8:	f7fe fa14 	bl	8724 <__aeabi_ddiv>
    a2fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a300:	f7fd ff2e 	bl	8160 <__aeabi_dsub>
    a304:	f8dd a020 	ldr.w	sl, [sp, #32]
    a308:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a310:	f7fe fea6 	bl	9060 <__aeabi_d2iz>
    a314:	4605      	mov	r5, r0
    a316:	f7fe f871 	bl	83fc <__aeabi_i2d>
    a31a:	4602      	mov	r2, r0
    a31c:	3530      	adds	r5, #48	; 0x30
    a31e:	460b      	mov	r3, r1
    a320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a324:	f7fd ff1c 	bl	8160 <__aeabi_dsub>
    a328:	f80a 5b01 	strb.w	r5, [sl], #1
    a32c:	4602      	mov	r2, r0
    a32e:	460b      	mov	r3, r1
    a330:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a338:	f7fe fe72 	bl	9020 <__aeabi_dcmpgt>
    a33c:	2800      	cmp	r0, #0
    a33e:	d165      	bne.n	a40c <_dtoa_r+0x794>
    a340:	2000      	movs	r0, #0
    a342:	496c      	ldr	r1, [pc, #432]	; (a4f4 <_dtoa_r+0x87c>)
    a344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a348:	f7fd ff0a 	bl	8160 <__aeabi_dsub>
    a34c:	4602      	mov	r2, r0
    a34e:	460b      	mov	r3, r1
    a350:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a354:	f7fe fe64 	bl	9020 <__aeabi_dcmpgt>
    a358:	2800      	cmp	r0, #0
    a35a:	f040 810d 	bne.w	a578 <_dtoa_r+0x900>
    a35e:	45a2      	cmp	sl, r4
    a360:	f000 80ea 	beq.w	a538 <_dtoa_r+0x8c0>
    a364:	2200      	movs	r2, #0
    a366:	4b5e      	ldr	r3, [pc, #376]	; (a4e0 <_dtoa_r+0x868>)
    a368:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a36c:	f7fe f8b0 	bl	84d0 <__aeabi_dmul>
    a370:	2200      	movs	r2, #0
    a372:	4b5b      	ldr	r3, [pc, #364]	; (a4e0 <_dtoa_r+0x868>)
    a374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a37c:	f7fe f8a8 	bl	84d0 <__aeabi_dmul>
    a380:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a384:	e7c2      	b.n	a30c <_dtoa_r+0x694>
    a386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a38a:	f7fe f8a1 	bl	84d0 <__aeabi_dmul>
    a38e:	46a0      	mov	r8, r4
    a390:	f8dd a020 	ldr.w	sl, [sp, #32]
    a394:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a39c:	f7fe fe60 	bl	9060 <__aeabi_d2iz>
    a3a0:	4605      	mov	r5, r0
    a3a2:	f7fe f82b 	bl	83fc <__aeabi_i2d>
    a3a6:	4602      	mov	r2, r0
    a3a8:	3530      	adds	r5, #48	; 0x30
    a3aa:	460b      	mov	r3, r1
    a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3b0:	f7fd fed6 	bl	8160 <__aeabi_dsub>
    a3b4:	f80a 5b01 	strb.w	r5, [sl], #1
    a3b8:	4602      	mov	r2, r0
    a3ba:	460b      	mov	r3, r1
    a3bc:	45a2      	cmp	sl, r4
    a3be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a3c2:	f04f 0200 	mov.w	r2, #0
    a3c6:	d123      	bne.n	a410 <_dtoa_r+0x798>
    a3c8:	4b49      	ldr	r3, [pc, #292]	; (a4f0 <_dtoa_r+0x878>)
    a3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a3ce:	f7fd fec9 	bl	8164 <__adddf3>
    a3d2:	4602      	mov	r2, r0
    a3d4:	460b      	mov	r3, r1
    a3d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3da:	f7fe fe21 	bl	9020 <__aeabi_dcmpgt>
    a3de:	2800      	cmp	r0, #0
    a3e0:	f040 80ca 	bne.w	a578 <_dtoa_r+0x900>
    a3e4:	2000      	movs	r0, #0
    a3e6:	4942      	ldr	r1, [pc, #264]	; (a4f0 <_dtoa_r+0x878>)
    a3e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a3ec:	f7fd feb8 	bl	8160 <__aeabi_dsub>
    a3f0:	4602      	mov	r2, r0
    a3f2:	460b      	mov	r3, r1
    a3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3f8:	f7fe fdf4 	bl	8fe4 <__aeabi_dcmplt>
    a3fc:	b170      	cbz	r0, a41c <_dtoa_r+0x7a4>
    a3fe:	46c2      	mov	sl, r8
    a400:	f108 38ff 	add.w	r8, r8, #4294967295
    a404:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a408:	2b30      	cmp	r3, #48	; 0x30
    a40a:	d0f8      	beq.n	a3fe <_dtoa_r+0x786>
    a40c:	4637      	mov	r7, r6
    a40e:	e055      	b.n	a4bc <_dtoa_r+0x844>
    a410:	4b33      	ldr	r3, [pc, #204]	; (a4e0 <_dtoa_r+0x868>)
    a412:	f7fe f85d 	bl	84d0 <__aeabi_dmul>
    a416:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a41a:	e7bd      	b.n	a398 <_dtoa_r+0x720>
    a41c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a420:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a424:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a426:	2b00      	cmp	r3, #0
    a428:	f6ff ae28 	blt.w	a07c <_dtoa_r+0x404>
    a42c:	2f0e      	cmp	r7, #14
    a42e:	f73f ae25 	bgt.w	a07c <_dtoa_r+0x404>
    a432:	4b2e      	ldr	r3, [pc, #184]	; (a4ec <_dtoa_r+0x874>)
    a434:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a438:	e9d3 3400 	ldrd	r3, r4, [r3]
    a43c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a440:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a442:	2b00      	cmp	r3, #0
    a444:	da02      	bge.n	a44c <_dtoa_r+0x7d4>
    a446:	f1b9 0f00 	cmp.w	r9, #0
    a44a:	d064      	beq.n	a516 <_dtoa_r+0x89e>
    a44c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a458:	4620      	mov	r0, r4
    a45a:	4629      	mov	r1, r5
    a45c:	f7fe f962 	bl	8724 <__aeabi_ddiv>
    a460:	f7fe fdfe 	bl	9060 <__aeabi_d2iz>
    a464:	4606      	mov	r6, r0
    a466:	f7fd ffc9 	bl	83fc <__aeabi_i2d>
    a46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a46e:	f7fe f82f 	bl	84d0 <__aeabi_dmul>
    a472:	4602      	mov	r2, r0
    a474:	4620      	mov	r0, r4
    a476:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a47a:	460b      	mov	r3, r1
    a47c:	4629      	mov	r1, r5
    a47e:	f7fd fe6f 	bl	8160 <__aeabi_dsub>
    a482:	f80a 4b01 	strb.w	r4, [sl], #1
    a486:	9c08      	ldr	r4, [sp, #32]
    a488:	4602      	mov	r2, r0
    a48a:	460b      	mov	r3, r1
    a48c:	ebaa 0404 	sub.w	r4, sl, r4
    a490:	45a1      	cmp	r9, r4
    a492:	f040 8082 	bne.w	a59a <_dtoa_r+0x922>
    a496:	f7fd fe65 	bl	8164 <__adddf3>
    a49a:	4604      	mov	r4, r0
    a49c:	460d      	mov	r5, r1
    a49e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4a2:	f7fe fdbd 	bl	9020 <__aeabi_dcmpgt>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d165      	bne.n	a576 <_dtoa_r+0x8fe>
    a4aa:	4620      	mov	r0, r4
    a4ac:	4629      	mov	r1, r5
    a4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4b2:	f7fe fd8d 	bl	8fd0 <__aeabi_dcmpeq>
    a4b6:	b108      	cbz	r0, a4bc <_dtoa_r+0x844>
    a4b8:	07f3      	lsls	r3, r6, #31
    a4ba:	d45c      	bmi.n	a576 <_dtoa_r+0x8fe>
    a4bc:	9903      	ldr	r1, [sp, #12]
    a4be:	4658      	mov	r0, fp
    a4c0:	f019 fb60 	bl	23b84 <_Bfree>
    a4c4:	2300      	movs	r3, #0
    a4c6:	3701      	adds	r7, #1
    a4c8:	f88a 3000 	strb.w	r3, [sl]
    a4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4ce:	601f      	str	r7, [r3, #0]
    a4d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	f43f ac1c 	beq.w	9d10 <_dtoa_r+0x98>
    a4d8:	f8c3 a000 	str.w	sl, [r3]
    a4dc:	e418      	b.n	9d10 <_dtoa_r+0x98>
    a4de:	bf00      	nop
    a4e0:	40240000 	.word	0x40240000
    a4e4:	401c0000 	.word	0x401c0000
    a4e8:	40140000 	.word	0x40140000
    a4ec:	0002ab90 	.word	0x0002ab90
    a4f0:	3fe00000 	.word	0x3fe00000
    a4f4:	3ff00000 	.word	0x3ff00000
    a4f8:	4ba2      	ldr	r3, [pc, #648]	; (a784 <_dtoa_r+0xb0c>)
    a4fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a4fe:	e9d3 3400 	ldrd	r3, r4, [r3]
    a502:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a506:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a508:	2b00      	cmp	r3, #0
    a50a:	da9f      	bge.n	a44c <_dtoa_r+0x7d4>
    a50c:	f1b9 0f00 	cmp.w	r9, #0
    a510:	dc9c      	bgt.n	a44c <_dtoa_r+0x7d4>
    a512:	f47f aec3 	bne.w	a29c <_dtoa_r+0x624>
    a516:	2200      	movs	r2, #0
    a518:	4b9b      	ldr	r3, [pc, #620]	; (a788 <_dtoa_r+0xb10>)
    a51a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a51e:	f7fd ffd7 	bl	84d0 <__aeabi_dmul>
    a522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a526:	f7fe fd71 	bl	900c <__aeabi_dcmpge>
    a52a:	4604      	mov	r4, r0
    a52c:	2800      	cmp	r0, #0
    a52e:	f47f aeb5 	bne.w	a29c <_dtoa_r+0x624>
    a532:	463e      	mov	r6, r7
    a534:	4625      	mov	r5, r4
    a536:	e0b4      	b.n	a6a2 <_dtoa_r+0xa2a>
    a538:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a53c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a540:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a542:	2b00      	cmp	r3, #0
    a544:	db01      	blt.n	a54a <_dtoa_r+0x8d2>
    a546:	2f0e      	cmp	r7, #14
    a548:	ddd6      	ble.n	a4f8 <_dtoa_r+0x880>
    a54a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a54c:	2a01      	cmp	r2, #1
    a54e:	dc36      	bgt.n	a5be <_dtoa_r+0x946>
    a550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a552:	b382      	cbz	r2, a5b6 <_dtoa_r+0x93e>
    a554:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a558:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a55a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a55e:	9a06      	ldr	r2, [sp, #24]
    a560:	2101      	movs	r1, #1
    a562:	4658      	mov	r0, fp
    a564:	441a      	add	r2, r3
    a566:	9206      	str	r2, [sp, #24]
    a568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a56a:	441a      	add	r2, r3
    a56c:	920a      	str	r2, [sp, #40]	; 0x28
    a56e:	f019 fb73 	bl	23c58 <__i2b>
    a572:	4605      	mov	r5, r0
    a574:	e586      	b.n	a084 <_dtoa_r+0x40c>
    a576:	463e      	mov	r6, r7
    a578:	4653      	mov	r3, sl
    a57a:	469a      	mov	sl, r3
    a57c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a580:	2a39      	cmp	r2, #57	; 0x39
    a582:	d106      	bne.n	a592 <_dtoa_r+0x91a>
    a584:	9a08      	ldr	r2, [sp, #32]
    a586:	429a      	cmp	r2, r3
    a588:	d1f7      	bne.n	a57a <_dtoa_r+0x902>
    a58a:	2230      	movs	r2, #48	; 0x30
    a58c:	9908      	ldr	r1, [sp, #32]
    a58e:	3601      	adds	r6, #1
    a590:	700a      	strb	r2, [r1, #0]
    a592:	781a      	ldrb	r2, [r3, #0]
    a594:	3201      	adds	r2, #1
    a596:	701a      	strb	r2, [r3, #0]
    a598:	e738      	b.n	a40c <_dtoa_r+0x794>
    a59a:	2200      	movs	r2, #0
    a59c:	4b7b      	ldr	r3, [pc, #492]	; (a78c <_dtoa_r+0xb14>)
    a59e:	f7fd ff97 	bl	84d0 <__aeabi_dmul>
    a5a2:	2200      	movs	r2, #0
    a5a4:	2300      	movs	r3, #0
    a5a6:	4604      	mov	r4, r0
    a5a8:	460d      	mov	r5, r1
    a5aa:	f7fe fd11 	bl	8fd0 <__aeabi_dcmpeq>
    a5ae:	2800      	cmp	r0, #0
    a5b0:	f43f af50 	beq.w	a454 <_dtoa_r+0x7dc>
    a5b4:	e782      	b.n	a4bc <_dtoa_r+0x844>
    a5b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a5bc:	e7cc      	b.n	a558 <_dtoa_r+0x8e0>
    a5be:	f109 34ff 	add.w	r4, r9, #4294967295
    a5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5c4:	42a3      	cmp	r3, r4
    a5c6:	db08      	blt.n	a5da <_dtoa_r+0x962>
    a5c8:	f1b9 0f00 	cmp.w	r9, #0
    a5cc:	eba3 0404 	sub.w	r4, r3, r4
    a5d0:	db0e      	blt.n	a5f0 <_dtoa_r+0x978>
    a5d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5d6:	464b      	mov	r3, r9
    a5d8:	e7c1      	b.n	a55e <_dtoa_r+0x8e6>
    a5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a5de:	1ae3      	subs	r3, r4, r3
    a5e0:	940b      	str	r4, [sp, #44]	; 0x2c
    a5e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5e6:	2400      	movs	r4, #0
    a5e8:	441a      	add	r2, r3
    a5ea:	464b      	mov	r3, r9
    a5ec:	920f      	str	r2, [sp, #60]	; 0x3c
    a5ee:	e7b6      	b.n	a55e <_dtoa_r+0x8e6>
    a5f0:	9b06      	ldr	r3, [sp, #24]
    a5f2:	eba3 0809 	sub.w	r8, r3, r9
    a5f6:	2300      	movs	r3, #0
    a5f8:	e7b1      	b.n	a55e <_dtoa_r+0x8e6>
    a5fa:	9e03      	ldr	r6, [sp, #12]
    a5fc:	e571      	b.n	a0e2 <_dtoa_r+0x46a>
    a5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a600:	9903      	ldr	r1, [sp, #12]
    a602:	e570      	b.n	a0e6 <_dtoa_r+0x46e>
    a604:	9603      	str	r6, [sp, #12]
    a606:	e572      	b.n	a0ee <_dtoa_r+0x476>
    a608:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a60a:	2b01      	cmp	r3, #1
    a60c:	dc17      	bgt.n	a63e <_dtoa_r+0x9c6>
    a60e:	9b04      	ldr	r3, [sp, #16]
    a610:	b9ab      	cbnz	r3, a63e <_dtoa_r+0x9c6>
    a612:	9b05      	ldr	r3, [sp, #20]
    a614:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a618:	b99b      	cbnz	r3, a642 <_dtoa_r+0x9ca>
    a61a:	9b05      	ldr	r3, [sp, #20]
    a61c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a620:	0d36      	lsrs	r6, r6, #20
    a622:	0536      	lsls	r6, r6, #20
    a624:	b136      	cbz	r6, a634 <_dtoa_r+0x9bc>
    a626:	9b06      	ldr	r3, [sp, #24]
    a628:	2601      	movs	r6, #1
    a62a:	3301      	adds	r3, #1
    a62c:	9306      	str	r3, [sp, #24]
    a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a630:	3301      	adds	r3, #1
    a632:	930a      	str	r3, [sp, #40]	; 0x28
    a634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a636:	2b00      	cmp	r3, #0
    a638:	f47f ad70 	bne.w	a11c <_dtoa_r+0x4a4>
    a63c:	960f      	str	r6, [sp, #60]	; 0x3c
    a63e:	2001      	movs	r0, #1
    a640:	e575      	b.n	a12e <_dtoa_r+0x4b6>
    a642:	2600      	movs	r6, #0
    a644:	e7f6      	b.n	a634 <_dtoa_r+0x9bc>
    a646:	f43f ad86 	beq.w	a156 <_dtoa_r+0x4de>
    a64a:	331c      	adds	r3, #28
    a64c:	9a06      	ldr	r2, [sp, #24]
    a64e:	441a      	add	r2, r3
    a650:	4498      	add	r8, r3
    a652:	9206      	str	r2, [sp, #24]
    a654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a656:	441a      	add	r2, r3
    a658:	920a      	str	r2, [sp, #40]	; 0x28
    a65a:	e57c      	b.n	a156 <_dtoa_r+0x4de>
    a65c:	4603      	mov	r3, r0
    a65e:	e7f4      	b.n	a64a <_dtoa_r+0x9d2>
    a660:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a662:	2b00      	cmp	r3, #0
    a664:	dc2b      	bgt.n	a6be <_dtoa_r+0xa46>
    a666:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a668:	2b02      	cmp	r3, #2
    a66a:	dc09      	bgt.n	a680 <_dtoa_r+0xa08>
    a66c:	e027      	b.n	a6be <_dtoa_r+0xa46>
    a66e:	f1b9 0f00 	cmp.w	r9, #0
    a672:	dc1d      	bgt.n	a6b0 <_dtoa_r+0xa38>
    a674:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a676:	2b02      	cmp	r3, #2
    a678:	dd1a      	ble.n	a6b0 <_dtoa_r+0xa38>
    a67a:	463e      	mov	r6, r7
    a67c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a682:	2b00      	cmp	r3, #0
    a684:	f47f ae0c 	bne.w	a2a0 <_dtoa_r+0x628>
    a688:	4621      	mov	r1, r4
    a68a:	2205      	movs	r2, #5
    a68c:	4658      	mov	r0, fp
    a68e:	f019 fa9b 	bl	23bc8 <__multadd>
    a692:	4601      	mov	r1, r0
    a694:	4604      	mov	r4, r0
    a696:	9803      	ldr	r0, [sp, #12]
    a698:	f01f fc88 	bl	29fac <__mcmp>
    a69c:	2800      	cmp	r0, #0
    a69e:	f77f adff 	ble.w	a2a0 <_dtoa_r+0x628>
    a6a2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6a6:	2331      	movs	r3, #49	; 0x31
    a6a8:	3601      	adds	r6, #1
    a6aa:	f80a 3b01 	strb.w	r3, [sl], #1
    a6ae:	e5fb      	b.n	a2a8 <_dtoa_r+0x630>
    a6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6b2:	463e      	mov	r6, r7
    a6b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	f47f ad83 	bne.w	a1c4 <_dtoa_r+0x54c>
    a6be:	9f08      	ldr	r7, [sp, #32]
    a6c0:	4621      	mov	r1, r4
    a6c2:	9803      	ldr	r0, [sp, #12]
    a6c4:	f01f fb53 	bl	29d6e <quorem>
    a6c8:	9b08      	ldr	r3, [sp, #32]
    a6ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a6d0:	f807 9b01 	strb.w	r9, [r7], #1
    a6d4:	1afb      	subs	r3, r7, r3
    a6d6:	429a      	cmp	r2, r3
    a6d8:	f340 80cb 	ble.w	a872 <_dtoa_r+0xbfa>
    a6dc:	2300      	movs	r3, #0
    a6de:	220a      	movs	r2, #10
    a6e0:	9903      	ldr	r1, [sp, #12]
    a6e2:	4658      	mov	r0, fp
    a6e4:	f019 fa70 	bl	23bc8 <__multadd>
    a6e8:	9003      	str	r0, [sp, #12]
    a6ea:	e7e9      	b.n	a6c0 <_dtoa_r+0xa48>
    a6ec:	692a      	ldr	r2, [r5, #16]
    a6ee:	f105 010c 	add.w	r1, r5, #12
    a6f2:	300c      	adds	r0, #12
    a6f4:	3202      	adds	r2, #2
    a6f6:	0092      	lsls	r2, r2, #2
    a6f8:	f01f f953 	bl	299a2 <memcpy>
    a6fc:	2201      	movs	r2, #1
    a6fe:	4639      	mov	r1, r7
    a700:	4658      	mov	r0, fp
    a702:	f019 fbc3 	bl	23e8c <__lshift>
    a706:	9b08      	ldr	r3, [sp, #32]
    a708:	46a8      	mov	r8, r5
    a70a:	4605      	mov	r5, r0
    a70c:	f103 0a01 	add.w	sl, r3, #1
    a710:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a714:	4413      	add	r3, r2
    a716:	930a      	str	r3, [sp, #40]	; 0x28
    a718:	9b04      	ldr	r3, [sp, #16]
    a71a:	f003 0301 	and.w	r3, r3, #1
    a71e:	930b      	str	r3, [sp, #44]	; 0x2c
    a720:	f10a 33ff 	add.w	r3, sl, #4294967295
    a724:	4621      	mov	r1, r4
    a726:	9803      	ldr	r0, [sp, #12]
    a728:	9306      	str	r3, [sp, #24]
    a72a:	f01f fb20 	bl	29d6e <quorem>
    a72e:	4641      	mov	r1, r8
    a730:	9009      	str	r0, [sp, #36]	; 0x24
    a732:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a736:	9803      	ldr	r0, [sp, #12]
    a738:	f01f fc38 	bl	29fac <__mcmp>
    a73c:	462a      	mov	r2, r5
    a73e:	4621      	mov	r1, r4
    a740:	4607      	mov	r7, r0
    a742:	4658      	mov	r0, fp
    a744:	f019 fc0e 	bl	23f64 <__mdiff>
    a748:	68c2      	ldr	r2, [r0, #12]
    a74a:	4601      	mov	r1, r0
    a74c:	b302      	cbz	r2, a790 <_dtoa_r+0xb18>
    a74e:	4658      	mov	r0, fp
    a750:	f019 fa18 	bl	23b84 <_Bfree>
    a754:	2f00      	cmp	r7, #0
    a756:	da3a      	bge.n	a7ce <_dtoa_r+0xb56>
    a758:	2201      	movs	r2, #1
    a75a:	9903      	ldr	r1, [sp, #12]
    a75c:	4658      	mov	r0, fp
    a75e:	f019 fb95 	bl	23e8c <__lshift>
    a762:	4621      	mov	r1, r4
    a764:	9003      	str	r0, [sp, #12]
    a766:	f01f fc21 	bl	29fac <__mcmp>
    a76a:	2800      	cmp	r0, #0
    a76c:	dc03      	bgt.n	a776 <_dtoa_r+0xafe>
    a76e:	d129      	bne.n	a7c4 <_dtoa_r+0xb4c>
    a770:	f019 0f01 	tst.w	r9, #1
    a774:	d026      	beq.n	a7c4 <_dtoa_r+0xb4c>
    a776:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a77a:	d11d      	bne.n	a7b8 <_dtoa_r+0xb40>
    a77c:	e032      	b.n	a7e4 <_dtoa_r+0xb6c>
    a77e:	4628      	mov	r0, r5
    a780:	e7c1      	b.n	a706 <_dtoa_r+0xa8e>
    a782:	bf00      	nop
    a784:	0002ab90 	.word	0x0002ab90
    a788:	40140000 	.word	0x40140000
    a78c:	40240000 	.word	0x40240000
    a790:	900e      	str	r0, [sp, #56]	; 0x38
    a792:	9803      	ldr	r0, [sp, #12]
    a794:	f01f fc0a 	bl	29fac <__mcmp>
    a798:	990e      	ldr	r1, [sp, #56]	; 0x38
    a79a:	900c      	str	r0, [sp, #48]	; 0x30
    a79c:	4658      	mov	r0, fp
    a79e:	f019 f9f1 	bl	23b84 <_Bfree>
    a7a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7a4:	bb5a      	cbnz	r2, a7fe <_dtoa_r+0xb86>
    a7a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7a8:	b953      	cbnz	r3, a7c0 <_dtoa_r+0xb48>
    a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7ac:	b943      	cbnz	r3, a7c0 <_dtoa_r+0xb48>
    a7ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7b2:	d017      	beq.n	a7e4 <_dtoa_r+0xb6c>
    a7b4:	2f00      	cmp	r7, #0
    a7b6:	dd05      	ble.n	a7c4 <_dtoa_r+0xb4c>
    a7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a7be:	e001      	b.n	a7c4 <_dtoa_r+0xb4c>
    a7c0:	2f00      	cmp	r7, #0
    a7c2:	da2a      	bge.n	a81a <_dtoa_r+0xba2>
    a7c4:	f8dd a018 	ldr.w	sl, [sp, #24]
    a7c8:	f80a 9b01 	strb.w	r9, [sl], #1
    a7cc:	e56e      	b.n	a2ac <_dtoa_r+0x634>
    a7ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7d0:	433b      	orrs	r3, r7
    a7d2:	d104      	bne.n	a7de <_dtoa_r+0xb66>
    a7d4:	9b04      	ldr	r3, [sp, #16]
    a7d6:	f003 0301 	and.w	r3, r3, #1
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d0bc      	beq.n	a758 <_dtoa_r+0xae0>
    a7de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7e2:	d136      	bne.n	a852 <_dtoa_r+0xbda>
    a7e4:	9f06      	ldr	r7, [sp, #24]
    a7e6:	2339      	movs	r3, #57	; 0x39
    a7e8:	f807 3b01 	strb.w	r3, [r7], #1
    a7ec:	46ba      	mov	sl, r7
    a7ee:	3f01      	subs	r7, #1
    a7f0:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a7f4:	2b39      	cmp	r3, #57	; 0x39
    a7f6:	d05a      	beq.n	a8ae <_dtoa_r+0xc36>
    a7f8:	3301      	adds	r3, #1
    a7fa:	703b      	strb	r3, [r7, #0]
    a7fc:	e556      	b.n	a2ac <_dtoa_r+0x634>
    a7fe:	2f00      	cmp	r7, #0
    a800:	db06      	blt.n	a810 <_dtoa_r+0xb98>
    a802:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a804:	433b      	orrs	r3, r7
    a806:	d106      	bne.n	a816 <_dtoa_r+0xb9e>
    a808:	9b04      	ldr	r3, [sp, #16]
    a80a:	f003 0301 	and.w	r3, r3, #1
    a80e:	b913      	cbnz	r3, a816 <_dtoa_r+0xb9e>
    a810:	2a00      	cmp	r2, #0
    a812:	dca1      	bgt.n	a758 <_dtoa_r+0xae0>
    a814:	e7d6      	b.n	a7c4 <_dtoa_r+0xb4c>
    a816:	2a00      	cmp	r2, #0
    a818:	dce1      	bgt.n	a7de <_dtoa_r+0xb66>
    a81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a81c:	4657      	mov	r7, sl
    a81e:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a822:	4553      	cmp	r3, sl
    a824:	d02e      	beq.n	a884 <_dtoa_r+0xc0c>
    a826:	2300      	movs	r3, #0
    a828:	220a      	movs	r2, #10
    a82a:	9903      	ldr	r1, [sp, #12]
    a82c:	4658      	mov	r0, fp
    a82e:	f019 f9cb 	bl	23bc8 <__multadd>
    a832:	45a8      	cmp	r8, r5
    a834:	9003      	str	r0, [sp, #12]
    a836:	f04f 0300 	mov.w	r3, #0
    a83a:	f04f 020a 	mov.w	r2, #10
    a83e:	4641      	mov	r1, r8
    a840:	4658      	mov	r0, fp
    a842:	d10b      	bne.n	a85c <_dtoa_r+0xbe4>
    a844:	f019 f9c0 	bl	23bc8 <__multadd>
    a848:	4680      	mov	r8, r0
    a84a:	4605      	mov	r5, r0
    a84c:	f10a 0a01 	add.w	sl, sl, #1
    a850:	e766      	b.n	a720 <_dtoa_r+0xaa8>
    a852:	f8dd a018 	ldr.w	sl, [sp, #24]
    a856:	f109 0901 	add.w	r9, r9, #1
    a85a:	e7b5      	b.n	a7c8 <_dtoa_r+0xb50>
    a85c:	f019 f9b4 	bl	23bc8 <__multadd>
    a860:	4629      	mov	r1, r5
    a862:	4680      	mov	r8, r0
    a864:	2300      	movs	r3, #0
    a866:	220a      	movs	r2, #10
    a868:	4658      	mov	r0, fp
    a86a:	f019 f9ad 	bl	23bc8 <__multadd>
    a86e:	4605      	mov	r5, r0
    a870:	e7ec      	b.n	a84c <_dtoa_r+0xbd4>
    a872:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a874:	f04f 0800 	mov.w	r8, #0
    a878:	2b00      	cmp	r3, #0
    a87a:	bfcc      	ite	gt
    a87c:	461f      	movgt	r7, r3
    a87e:	2701      	movle	r7, #1
    a880:	9b08      	ldr	r3, [sp, #32]
    a882:	441f      	add	r7, r3
    a884:	2201      	movs	r2, #1
    a886:	9903      	ldr	r1, [sp, #12]
    a888:	4658      	mov	r0, fp
    a88a:	f019 faff 	bl	23e8c <__lshift>
    a88e:	4621      	mov	r1, r4
    a890:	9003      	str	r0, [sp, #12]
    a892:	f01f fb8b 	bl	29fac <__mcmp>
    a896:	2800      	cmp	r0, #0
    a898:	dca8      	bgt.n	a7ec <_dtoa_r+0xb74>
    a89a:	d102      	bne.n	a8a2 <_dtoa_r+0xc2a>
    a89c:	f019 0f01 	tst.w	r9, #1
    a8a0:	d1a4      	bne.n	a7ec <_dtoa_r+0xb74>
    a8a2:	46ba      	mov	sl, r7
    a8a4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a8a8:	2b30      	cmp	r3, #48	; 0x30
    a8aa:	d0fa      	beq.n	a8a2 <_dtoa_r+0xc2a>
    a8ac:	e4fe      	b.n	a2ac <_dtoa_r+0x634>
    a8ae:	9b08      	ldr	r3, [sp, #32]
    a8b0:	42bb      	cmp	r3, r7
    a8b2:	d19b      	bne.n	a7ec <_dtoa_r+0xb74>
    a8b4:	2331      	movs	r3, #49	; 0x31
    a8b6:	9a08      	ldr	r2, [sp, #32]
    a8b8:	3601      	adds	r6, #1
    a8ba:	7013      	strb	r3, [r2, #0]
    a8bc:	e4f6      	b.n	a2ac <_dtoa_r+0x634>
    a8be:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	f47f aa20 	bne.w	9d06 <_dtoa_r+0x8e>
    a8c6:	4b01      	ldr	r3, [pc, #4]	; (a8cc <_dtoa_r+0xc54>)
    a8c8:	f7ff ba3f 	b.w	9d4a <_dtoa_r+0xd2>
    a8cc:	0003142b 	.word	0x0003142b

0000a8d0 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a8d0:	4603      	mov	r3, r0
    a8d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8d4:	2401      	movs	r4, #1
    a8d6:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a8d8:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8da:	409c      	lsls	r4, r3
    a8dc:	6843      	ldr	r3, [r0, #4]
    a8de:	681b      	ldr	r3, [r3, #0]
    a8e0:	421c      	tst	r4, r3
    a8e2:	d10e      	bne.n	a902 <gpio_pin_get_dt+0x32>
    a8e4:	490e      	ldr	r1, [pc, #56]	; (a920 <gpio_pin_get_dt+0x50>)
    a8e6:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a8ea:	4a0e      	ldr	r2, [pc, #56]	; (a924 <gpio_pin_get_dt+0x54>)
    a8ec:	480e      	ldr	r0, [pc, #56]	; (a928 <gpio_pin_get_dt+0x58>)
    a8ee:	f01a faf2 	bl	24ed6 <assert_print>
    a8f2:	480e      	ldr	r0, [pc, #56]	; (a92c <gpio_pin_get_dt+0x5c>)
    a8f4:	f01a faef 	bl	24ed6 <assert_print>
    a8f8:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a8fc:	4809      	ldr	r0, [pc, #36]	; (a924 <gpio_pin_get_dt+0x54>)
    a8fe:	f01a fae3 	bl	24ec8 <assert_post_action>
	const struct gpio_driver_data *const data =
    a902:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a904:	6883      	ldr	r3, [r0, #8]
    a906:	a901      	add	r1, sp, #4
    a908:	685b      	ldr	r3, [r3, #4]
    a90a:	4798      	blx	r3
	if (ret == 0) {
    a90c:	b930      	cbnz	r0, a91c <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a90e:	682a      	ldr	r2, [r5, #0]
    a910:	9b01      	ldr	r3, [sp, #4]
    a912:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a914:	4223      	tst	r3, r4
    a916:	bf14      	ite	ne
    a918:	2001      	movne	r0, #1
    a91a:	2000      	moveq	r0, #0
}
    a91c:	b003      	add	sp, #12
    a91e:	bd30      	pop	{r4, r5, pc}
    a920:	0002b8fb 	.word	0x0002b8fb
    a924:	0002b8ca 	.word	0x0002b8ca
    a928:	0002b939 	.word	0x0002b939
    a92c:	0002b956 	.word	0x0002b956

0000a930 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
}

// DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    a930:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a932:	f01d fee4 	bl	286fe <sys_clock_cycle_get_32>
    a936:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a938:	4804      	ldr	r0, [pc, #16]	; (a94c <digital_0_call_back+0x1c>)
    a93a:	f01a f90a 	bl	24b52 <printk>
	if (digital_value[0] <= DIGITAL_0_LIMIT)
    a93e:	4a04      	ldr	r2, [pc, #16]	; (a950 <digital_0_call_back+0x20>)
    a940:	8813      	ldrh	r3, [r2, #0]
		digital_value[0]++;
    a942:	8813      	ldrh	r3, [r2, #0]
    a944:	3301      	adds	r3, #1
    a946:	b21b      	sxth	r3, r3
    a948:	8013      	strh	r3, [r2, #0]
}
    a94a:	bd08      	pop	{r3, pc}
    a94c:	0002b968 	.word	0x0002b968
    a950:	2002156c 	.word	0x2002156c

0000a954 <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    a954:	b508      	push	{r3, lr}
    a956:	f01d fed2 	bl	286fe <sys_clock_cycle_get_32>
    a95a:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a95c:	4804      	ldr	r0, [pc, #16]	; (a970 <digital_1_call_back+0x1c>)
    a95e:	f01a f8f8 	bl	24b52 <printk>
	if (digital_value[1] <= DIGITAL_0_LIMIT)
    a962:	4a04      	ldr	r2, [pc, #16]	; (a974 <digital_1_call_back+0x20>)
    a964:	8853      	ldrh	r3, [r2, #2]
		digital_value[1]++;
    a966:	8853      	ldrh	r3, [r2, #2]
    a968:	3301      	adds	r3, #1
    a96a:	b21b      	sxth	r3, r3
    a96c:	8053      	strh	r3, [r2, #2]
}
    a96e:	bd08      	pop	{r3, pc}
    a970:	0002b983 	.word	0x0002b983
    a974:	2002156c 	.word	0x2002156c

0000a978 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    a978:	b508      	push	{r3, lr}
    a97a:	f01d fec0 	bl	286fe <sys_clock_cycle_get_32>
    a97e:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a980:	4804      	ldr	r0, [pc, #16]	; (a994 <digital_2_call_back+0x1c>)
    a982:	f01a f8e6 	bl	24b52 <printk>
	if (digital_value[2] <= DIGITAL_0_LIMIT)
    a986:	4a04      	ldr	r2, [pc, #16]	; (a998 <digital_2_call_back+0x20>)
    a988:	8893      	ldrh	r3, [r2, #4]
		digital_value[2]++;
    a98a:	8893      	ldrh	r3, [r2, #4]
    a98c:	3301      	adds	r3, #1
    a98e:	b21b      	sxth	r3, r3
    a990:	8093      	strh	r3, [r2, #4]
}
    a992:	bd08      	pop	{r3, pc}
    a994:	0002b99e 	.word	0x0002b99e
    a998:	2002156c 	.word	0x2002156c

0000a99c <shoot_minute_save_thread>:
}

// THREADS

void shoot_minute_save_thread(void)
{
    a99c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// each one minute this thread will shot.
	uint64_t actual_time = k_uptime_get() / 1000;
    a9a0:	f019 febd 	bl	2471e <k_uptime_get>
    a9a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a9a8:	2300      	movs	r3, #0
    a9aa:	f7fe fa51 	bl	8e50 <__aeabi_ldivmod>
	signed int h, m, s, last_minute;
	h = (actual_time / 3600);
    a9ae:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    a9b2:	2300      	movs	r3, #0
	uint64_t actual_time = k_uptime_get() / 1000;
    a9b4:	460d      	mov	r5, r1
    a9b6:	4606      	mov	r6, r0
	h = (actual_time / 3600);
    a9b8:	f7fe fa9a 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time - (3600 * h)) / 60;
    a9bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    a9c0:	fb03 f100 	mul.w	r1, r3, r0
    a9c4:	1a70      	subs	r0, r6, r1
    a9c6:	f04f 023c 	mov.w	r2, #60	; 0x3c
    a9ca:	f04f 0300 	mov.w	r3, #0
    a9ce:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    a9d2:	f7fe fa8d 	bl	8ef0 <__aeabi_uldivmod>
    a9d6:	4607      	mov	r7, r0
			if (h == 24)
			{
				h = 0;
			} // only up to 23:59:59h
			  // START RUN THE MINUTE ROUTINE
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    a9d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; aa4c <shoot_minute_save_thread+0xb0>
		m = (actual_time - (3600 * h)) / 60;
    a9dc:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
		actual_time = k_uptime_get() / 1000;
    a9e0:	f019 fe9d 	bl	2471e <k_uptime_get>
    a9e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a9e8:	2300      	movs	r3, #0
    a9ea:	f7fe fa31 	bl	8e50 <__aeabi_ldivmod>
		h = (actual_time / 3600);
    a9ee:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    a9f2:	2300      	movs	r3, #0
		actual_time = k_uptime_get() / 1000;
    a9f4:	4604      	mov	r4, r0
    a9f6:	4688      	mov	r8, r1
		h = (actual_time / 3600);
    a9f8:	f7fe fa7a 	bl	8ef0 <__aeabi_uldivmod>
		m = (actual_time - (3600 * h)) / 60;
    a9fc:	fb0a f600 	mul.w	r6, sl, r0
		h = (actual_time / 3600);
    aa00:	4605      	mov	r5, r0
		m = (actual_time - (3600 * h)) / 60;
    aa02:	1ba0      	subs	r0, r4, r6
    aa04:	f04f 023c 	mov.w	r2, #60	; 0x3c
    aa08:	eb68 71e6 	sbc.w	r1, r8, r6, asr #31
    aa0c:	2300      	movs	r3, #0
    aa0e:	f7fe fa6f 	bl	8ef0 <__aeabi_uldivmod>
		if (m == (last_minute + 1))
    aa12:	1c7a      	adds	r2, r7, #1
    aa14:	4282      	cmp	r2, r0
    aa16:	d1e3      	bne.n	a9e0 <shoot_minute_save_thread+0x44>
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    aa18:	233c      	movs	r3, #60	; 0x3c
				last_minute = -1;
    aa1a:	2a3b      	cmp	r2, #59	; 0x3b
    aa1c:	bf14      	ite	ne
    aa1e:	4617      	movne	r7, r2
    aa20:	f04f 37ff 	moveq.w	r7, #4294967295
		s = (actual_time - (3600 * h) - (m * 60));
    aa24:	1ba4      	subs	r4, r4, r6
				h = 0;
    aa26:	2d18      	cmp	r5, #24
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    aa28:	fb03 4312 	mls	r3, r3, r2, r4
    aa2c:	bf14      	ite	ne
    aa2e:	4629      	movne	r1, r5
    aa30:	2100      	moveq	r1, #0
    aa32:	4648      	mov	r0, r9
    aa34:	f01a f88d 	bl	24b52 <printk>

			feed_circular_buffer();
    aa38:	f001 fa56 	bl	bee8 <feed_circular_buffer>
			print_current_position_cb(C_Buffer_Current_Position);
    aa3c:	4b04      	ldr	r3, [pc, #16]	; (aa50 <shoot_minute_save_thread+0xb4>)
    aa3e:	6818      	ldr	r0, [r3, #0]
    aa40:	f001 fb8c 	bl	c15c <print_current_position_cb>
			printk(" \n");
    aa44:	4803      	ldr	r0, [pc, #12]	; (aa54 <shoot_minute_save_thread+0xb8>)
    aa46:	f01a f884 	bl	24b52 <printk>
    aa4a:	e7c7      	b.n	a9dc <shoot_minute_save_thread+0x40>
    aa4c:	0002b9b9 	.word	0x0002b9b9
    aa50:	20020f54 	.word	0x20020f54
    aa54:	0002c323 	.word	0x0002c323

0000aa58 <uart_2_work_handler>:
{
    aa58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf2 = k_malloc(sizeof(*buf2)); // SIZE IS 92 BYTES
    aa5a:	2088      	movs	r0, #136	; 0x88
    aa5c:	f01e ff8c 	bl	29978 <k_malloc>
    aa60:	4603      	mov	r3, r0
	if (buf2)
    aa62:	b148      	cbz	r0, aa78 <uart_2_work_handler+0x20>
		buf2->len = 0;
    aa64:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    aa66:	1d01      	adds	r1, r0, #4
		buf2->len = 0;
    aa68:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    aa6c:	480b      	ldr	r0, [pc, #44]	; (aa9c <uart_2_work_handler+0x44>)
}
    aa6e:	b005      	add	sp, #20
    aa70:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    aa74:	f019 be70 	b.w	24758 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    aa78:	4a09      	ldr	r2, [pc, #36]	; (aaa0 <uart_2_work_handler+0x48>)
    aa7a:	9000      	str	r0, [sp, #0]
    aa7c:	e9cd 0201 	strd	r0, r2, [sp, #4]
    aa80:	4908      	ldr	r1, [pc, #32]	; (aaa4 <uart_2_work_handler+0x4c>)
    aa82:	2202      	movs	r2, #2
    aa84:	f019 fe59 	bl	2473a <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    aa88:	f240 6267 	movw	r2, #1639	; 0x667
    aa8c:	2300      	movs	r3, #0
    aa8e:	4806      	ldr	r0, [pc, #24]	; (aaa8 <uart_2_work_handler+0x50>)
}
    aa90:	b005      	add	sp, #20
    aa92:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    aa96:	f015 bff3 	b.w	20a80 <k_work_reschedule>
    aa9a:	bf00      	nop
    aa9c:	0002a418 	.word	0x0002a418
    aaa0:	0002b9e9 	.word	0x0002b9e9
    aaa4:	0002aa50 	.word	0x0002aa50
    aaa8:	200091b0 	.word	0x200091b0

0000aaac <uart_work_handler>:
{
    aaac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    aaae:	2088      	movs	r0, #136	; 0x88
    aab0:	f01e ff62 	bl	29978 <k_malloc>
    aab4:	4603      	mov	r3, r0
	if (buf)
    aab6:	b148      	cbz	r0, aacc <uart_work_handler+0x20>
		buf->len = 0;
    aab8:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aaba:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    aabc:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aac0:	480b      	ldr	r0, [pc, #44]	; (aaf0 <uart_work_handler+0x44>)
}
    aac2:	b005      	add	sp, #20
    aac4:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aac8:	f019 be46 	b.w	24758 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_1 receive buffer");
    aacc:	4a09      	ldr	r2, [pc, #36]	; (aaf4 <uart_work_handler+0x48>)
    aace:	9000      	str	r0, [sp, #0]
    aad0:	e9cd 0201 	strd	r0, r2, [sp, #4]
    aad4:	4908      	ldr	r1, [pc, #32]	; (aaf8 <uart_work_handler+0x4c>)
    aad6:	2202      	movs	r2, #2
    aad8:	f019 fe2f 	bl	2473a <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aadc:	f240 6267 	movw	r2, #1639	; 0x667
    aae0:	2300      	movs	r3, #0
    aae2:	4806      	ldr	r0, [pc, #24]	; (aafc <uart_work_handler+0x50>)
}
    aae4:	b005      	add	sp, #20
    aae6:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aaea:	f015 bfc9 	b.w	20a80 <k_work_reschedule>
    aaee:	bf00      	nop
    aaf0:	0002a430 	.word	0x0002a430
    aaf4:	0002ba14 	.word	0x0002ba14
    aaf8:	0002aa50 	.word	0x0002aa50
    aafc:	200091e0 	.word	0x200091e0

0000ab00 <button3_thread>:
		print_current_position_cb_new(0);
	}
}

void button3_thread(void)
{
    ab00:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	while (1)
	{
		i = 0;
		k_sem_take(&button_3, K_FOREVER);
    ab02:	4e09      	ldr	r6, [pc, #36]	; (ab28 <button3_thread+0x28>)
		while (i <= C_Buffer_Current_Position)
    ab04:	4d09      	ldr	r5, [pc, #36]	; (ab2c <button3_thread+0x2c>)
		k_sem_take(&button_3, K_FOREVER);
    ab06:	f04f 32ff 	mov.w	r2, #4294967295
    ab0a:	f04f 33ff 	mov.w	r3, #4294967295
    ab0e:	4630      	mov	r0, r6
    ab10:	f019 fe32 	bl	24778 <k_sem_take.constprop.0.isra.0>
		i = 0;
    ab14:	2400      	movs	r4, #0
		{
			print_current_position_cb(i);
    ab16:	4620      	mov	r0, r4
    ab18:	f001 fb20 	bl	c15c <print_current_position_cb>
		while (i <= C_Buffer_Current_Position)
    ab1c:	682b      	ldr	r3, [r5, #0]
			i++;
    ab1e:	3401      	adds	r4, #1
		while (i <= C_Buffer_Current_Position)
    ab20:	42a3      	cmp	r3, r4
    ab22:	d3f0      	bcc.n	ab06 <button3_thread+0x6>
    ab24:	e7f7      	b.n	ab16 <button3_thread+0x16>
    ab26:	bf00      	nop
    ab28:	20008ae8 	.word	0x20008ae8
    ab2c:	20020f54 	.word	0x20020f54

0000ab30 <button4_thread>:
		}
	}
}

void button4_thread(void)
{
    ab30:	b570      	push	{r4, r5, r6, lr}
    ab32:	b086      	sub	sp, #24
	// print ISADORA PENATI FERREIRA
	char Name[] = "ISADORA PENATI FERREIRA";
    ab34:	466a      	mov	r2, sp
    ab36:	4615      	mov	r5, r2
    ab38:	4b0c      	ldr	r3, [pc, #48]	; (ab6c <button4_thread+0x3c>)
    ab3a:	f103 0618 	add.w	r6, r3, #24
    ab3e:	4614      	mov	r4, r2
    ab40:	6818      	ldr	r0, [r3, #0]
    ab42:	6859      	ldr	r1, [r3, #4]
    ab44:	3308      	adds	r3, #8
    ab46:	c403      	stmia	r4!, {r0, r1}
    ab48:	42b3      	cmp	r3, r6
    ab4a:	4622      	mov	r2, r4
    ab4c:	d1f7      	bne.n	ab3e <button4_thread+0xe>
	*(packet_data+7) = 0x20;//SPACE
	*/

	while (1)
	{
		k_sem_take(&button_test, K_FOREVER);
    ab4e:	4c08      	ldr	r4, [pc, #32]	; (ab70 <button4_thread+0x40>)
    ab50:	4620      	mov	r0, r4
    ab52:	f04f 32ff 	mov.w	r2, #4294967295
    ab56:	f04f 33ff 	mov.w	r3, #4294967295
    ab5a:	f019 fe0d 	bl	24778 <k_sem_take.constprop.0.isra.0>
		bt_nus_send(NULL, Name, size);
    ab5e:	2218      	movs	r2, #24
    ab60:	4629      	mov	r1, r5
    ab62:	2000      	movs	r0, #0
    ab64:	f005 f95a 	bl	fe1c <bt_nus_send>
	while (1)
    ab68:	e7f2      	b.n	ab50 <button4_thread+0x20>
    ab6a:	bf00      	nop
    ab6c:	0002ba3f 	.word	0x0002ba3f
    ab70:	20008b00 	.word	0x20008b00

0000ab74 <write_memory_thread>:
{
    ab74:	b510      	push	{r4, lr}
		k_sem_take(&save_memory, K_FOREVER);
    ab76:	4c07      	ldr	r4, [pc, #28]	; (ab94 <write_memory_thread+0x20>)
    ab78:	4620      	mov	r0, r4
    ab7a:	f04f 32ff 	mov.w	r2, #4294967295
    ab7e:	f04f 33ff 	mov.w	r3, #4294967295
    ab82:	f019 fdf9 	bl	24778 <k_sem_take.constprop.0.isra.0>
		flash_button2_counter();
    ab86:	f001 f8ff 	bl	bd88 <flash_button2_counter>
		print_current_position_cb_new(0);
    ab8a:	2000      	movs	r0, #0
    ab8c:	f001 fb3c 	bl	c208 <print_current_position_cb_new>
	while (1)
    ab90:	e7f2      	b.n	ab78 <write_memory_thread+0x4>
    ab92:	bf00      	nop
    ab94:	20008b30 	.word	0x20008b30

0000ab98 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    ab98:	4603      	mov	r3, r0
    ab9a:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    ab9c:	6800      	ldr	r0, [r0, #0]
    ab9e:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aba0:	2301      	movs	r3, #1
    aba2:	6845      	ldr	r5, [r0, #4]
    aba4:	408b      	lsls	r3, r1
    aba6:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    aba8:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    abaa:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    abac:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    abae:	d10e      	bne.n	abce <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    abb0:	490e      	ldr	r1, [pc, #56]	; (abec <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    abb2:	f44f 731d 	mov.w	r3, #628	; 0x274
    abb6:	4a0e      	ldr	r2, [pc, #56]	; (abf0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    abb8:	480e      	ldr	r0, [pc, #56]	; (abf4 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    abba:	f01a f98c 	bl	24ed6 <assert_print>
    abbe:	480e      	ldr	r0, [pc, #56]	; (abf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    abc0:	f01a f989 	bl	24ed6 <assert_print>
    abc4:	f44f 711d 	mov.w	r1, #628	; 0x274
    abc8:	4809      	ldr	r0, [pc, #36]	; (abf0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    abca:	f01a f97d 	bl	24ec8 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    abce:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    abd0:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    abd2:	6994      	ldr	r4, [r2, #24]
    abd4:	bf18      	it	ne
    abd6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    abda:	46a4      	mov	ip, r4
}
    abdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    abe0:	bf08      	it	eq
    abe2:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    abe6:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    abea:	4760      	bx	ip
    abec:	0002b8fb 	.word	0x0002b8fb
    abf0:	0002b8ca 	.word	0x0002b8ca
    abf4:	0002b939 	.word	0x0002b939
    abf8:	0002b956 	.word	0x0002b956

0000abfc <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    abfc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    abfe:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ac00:	b08a      	sub	sp, #40	; 0x28
    ac02:	4604      	mov	r4, r0
    ac04:	460e      	mov	r6, r1
    ac06:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ac08:	2b03      	cmp	r3, #3
    ac0a:	d820      	bhi.n	ac4e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ac0c:	e8df f003 	tbb	[pc, r3]
    ac10:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ac14:	4911      	ldr	r1, [pc, #68]	; (ac5c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ac16:	4628      	mov	r0, r5
    ac18:	f01f f832 	bl	29c80 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ac1c:	9505      	str	r5, [sp, #20]
    ac1e:	7863      	ldrb	r3, [r4, #1]
    ac20:	211e      	movs	r1, #30
    ac22:	9304      	str	r3, [sp, #16]
    ac24:	78a3      	ldrb	r3, [r4, #2]
    ac26:	4630      	mov	r0, r6
    ac28:	9303      	str	r3, [sp, #12]
    ac2a:	78e3      	ldrb	r3, [r4, #3]
    ac2c:	4a0c      	ldr	r2, [pc, #48]	; (ac60 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ac2e:	9302      	str	r3, [sp, #8]
    ac30:	7923      	ldrb	r3, [r4, #4]
    ac32:	9301      	str	r3, [sp, #4]
    ac34:	7963      	ldrb	r3, [r4, #5]
    ac36:	9300      	str	r3, [sp, #0]
    ac38:	79a3      	ldrb	r3, [r4, #6]
    ac3a:	f019 ff97 	bl	24b6c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ac3e:	b00a      	add	sp, #40	; 0x28
    ac40:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ac42:	4908      	ldr	r1, [pc, #32]	; (ac64 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    ac44:	e7e7      	b.n	ac16 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    ac46:	4908      	ldr	r1, [pc, #32]	; (ac68 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    ac48:	e7e5      	b.n	ac16 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    ac4a:	4908      	ldr	r1, [pc, #32]	; (ac6c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    ac4c:	e7e3      	b.n	ac16 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ac4e:	210a      	movs	r1, #10
    ac50:	4628      	mov	r0, r5
    ac52:	4a07      	ldr	r2, [pc, #28]	; (ac70 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    ac54:	f019 ff8a 	bl	24b6c <snprintk>
		break;
    ac58:	e7e0      	b.n	ac1c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    ac5a:	bf00      	nop
    ac5c:	0002ba57 	.word	0x0002ba57
    ac60:	0002ba79 	.word	0x0002ba79
    ac64:	0002ba5e 	.word	0x0002ba5e
    ac68:	0002ba65 	.word	0x0002ba65
    ac6c:	0002ba6f 	.word	0x0002ba6f
    ac70:	0002f26f 	.word	0x0002f26f

0000ac74 <security_changed>:
{
    ac74:	b570      	push	{r4, r5, r6, lr}
    ac76:	4614      	mov	r4, r2
    ac78:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac7a:	ae06      	add	r6, sp, #24
{
    ac7c:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac7e:	f01b fe52 	bl	26926 <bt_conn_get_dst>
    ac82:	4631      	mov	r1, r6
    ac84:	f7ff ffba 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err)
    ac88:	b96c      	cbnz	r4, aca6 <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    ac8a:	4b0e      	ldr	r3, [pc, #56]	; (acc4 <security_changed+0x50>)
    ac8c:	2203      	movs	r2, #3
    ac8e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ac92:	4620      	mov	r0, r4
    ac94:	4623      	mov	r3, r4
    ac96:	e9cd 6503 	strd	r6, r5, [sp, #12]
    ac9a:	490b      	ldr	r1, [pc, #44]	; (acc8 <security_changed+0x54>)
    ac9c:	9400      	str	r4, [sp, #0]
    ac9e:	f019 fd4c 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    aca2:	b00e      	add	sp, #56	; 0x38
    aca4:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    aca6:	4b09      	ldr	r3, [pc, #36]	; (accc <security_changed+0x58>)
    aca8:	2202      	movs	r2, #2
    acaa:	9302      	str	r3, [sp, #8]
    acac:	2300      	movs	r3, #0
    acae:	e9cd 5404 	strd	r5, r4, [sp, #16]
    acb2:	4618      	mov	r0, r3
    acb4:	e9cd 3300 	strd	r3, r3, [sp]
    acb8:	4903      	ldr	r1, [pc, #12]	; (acc8 <security_changed+0x54>)
    acba:	9603      	str	r6, [sp, #12]
    acbc:	f019 fd3d 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    acc0:	e7ef      	b.n	aca2 <security_changed+0x2e>
    acc2:	bf00      	nop
    acc4:	0002ba9c 	.word	0x0002ba9c
    acc8:	0002aa50 	.word	0x0002aa50
    accc:	0002baba 	.word	0x0002baba

0000acd0 <pairing_failed>:
{
    acd0:	b530      	push	{r4, r5, lr}
    acd2:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acd4:	ad06      	add	r5, sp, #24
{
    acd6:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acd8:	f01b fe25 	bl	26926 <bt_conn_get_dst>
    acdc:	4629      	mov	r1, r5
    acde:	f7ff ff8d 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    ace2:	4b07      	ldr	r3, [pc, #28]	; (ad00 <pairing_failed+0x30>)
    ace4:	2203      	movs	r2, #3
    ace6:	9302      	str	r3, [sp, #8]
    ace8:	2300      	movs	r3, #0
    acea:	e9cd 5403 	strd	r5, r4, [sp, #12]
    acee:	4618      	mov	r0, r3
    acf0:	e9cd 3300 	strd	r3, r3, [sp]
    acf4:	4903      	ldr	r1, [pc, #12]	; (ad04 <pairing_failed+0x34>)
    acf6:	f019 fd20 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    acfa:	b00f      	add	sp, #60	; 0x3c
    acfc:	bd30      	pop	{r4, r5, pc}
    acfe:	bf00      	nop
    ad00:	0002bade 	.word	0x0002bade
    ad04:	0002aa50 	.word	0x0002aa50

0000ad08 <pairing_complete>:
{
    ad08:	b530      	push	{r4, r5, lr}
    ad0a:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad0c:	ad06      	add	r5, sp, #24
{
    ad0e:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad10:	f01b fe09 	bl	26926 <bt_conn_get_dst>
    ad14:	4629      	mov	r1, r5
    ad16:	f7ff ff71 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    ad1a:	4b07      	ldr	r3, [pc, #28]	; (ad38 <pairing_complete+0x30>)
    ad1c:	2203      	movs	r2, #3
    ad1e:	9302      	str	r3, [sp, #8]
    ad20:	2300      	movs	r3, #0
    ad22:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ad26:	4618      	mov	r0, r3
    ad28:	e9cd 3300 	strd	r3, r3, [sp]
    ad2c:	4903      	ldr	r1, [pc, #12]	; (ad3c <pairing_complete+0x34>)
    ad2e:	f019 fd04 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    ad32:	b00f      	add	sp, #60	; 0x3c
    ad34:	bd30      	pop	{r4, r5, pc}
    ad36:	bf00      	nop
    ad38:	0002bb01 	.word	0x0002bb01
    ad3c:	0002aa50 	.word	0x0002aa50

0000ad40 <auth_cancel>:
{
    ad40:	b510      	push	{r4, lr}
    ad42:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad44:	ac04      	add	r4, sp, #16
    ad46:	f01b fdee 	bl	26926 <bt_conn_get_dst>
    ad4a:	4621      	mov	r1, r4
    ad4c:	f7ff ff56 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    ad50:	4b06      	ldr	r3, [pc, #24]	; (ad6c <auth_cancel+0x2c>)
    ad52:	2203      	movs	r2, #3
    ad54:	9302      	str	r3, [sp, #8]
    ad56:	2300      	movs	r3, #0
    ad58:	4905      	ldr	r1, [pc, #20]	; (ad70 <auth_cancel+0x30>)
    ad5a:	4618      	mov	r0, r3
    ad5c:	e9cd 3300 	strd	r3, r3, [sp]
    ad60:	9403      	str	r4, [sp, #12]
    ad62:	f019 fcea 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    ad66:	b00c      	add	sp, #48	; 0x30
    ad68:	bd10      	pop	{r4, pc}
    ad6a:	bf00      	nop
    ad6c:	0002bb23 	.word	0x0002bb23
    ad70:	0002aa50 	.word	0x0002aa50

0000ad74 <auth_passkey_display>:
{
    ad74:	b530      	push	{r4, r5, lr}
    ad76:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad78:	ad06      	add	r5, sp, #24
{
    ad7a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad7c:	f01b fdd3 	bl	26926 <bt_conn_get_dst>
    ad80:	4629      	mov	r1, r5
    ad82:	f7ff ff3b 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad86:	4b07      	ldr	r3, [pc, #28]	; (ada4 <auth_passkey_display+0x30>)
    ad88:	2203      	movs	r2, #3
    ad8a:	9302      	str	r3, [sp, #8]
    ad8c:	2300      	movs	r3, #0
    ad8e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ad92:	4618      	mov	r0, r3
    ad94:	e9cd 3300 	strd	r3, r3, [sp]
    ad98:	4903      	ldr	r1, [pc, #12]	; (ada8 <auth_passkey_display+0x34>)
    ad9a:	f019 fcce 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    ad9e:	b00f      	add	sp, #60	; 0x3c
    ada0:	bd30      	pop	{r4, r5, pc}
    ada2:	bf00      	nop
    ada4:	0002bb39 	.word	0x0002bb39
    ada8:	0002aa50 	.word	0x0002aa50

0000adac <auth_passkey_confirm>:
{
    adac:	b570      	push	{r4, r5, r6, lr}
    adae:	b08e      	sub	sp, #56	; 0x38
    adb0:	460c      	mov	r4, r1
    adb2:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    adb4:	f009 fa24 	bl	14200 <bt_conn_ref>
    adb8:	4b11      	ldr	r3, [pc, #68]	; (ae00 <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    adba:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    adbc:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    adbe:	4628      	mov	r0, r5
    adc0:	f01b fdb1 	bl	26926 <bt_conn_get_dst>
    adc4:	4631      	mov	r1, r6
    adc6:	f7ff ff19 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    adca:	e9cd 6403 	strd	r6, r4, [sp, #12]
    adce:	2400      	movs	r4, #0
    add0:	4d0c      	ldr	r5, [pc, #48]	; (ae04 <auth_passkey_confirm+0x58>)
    add2:	4b0d      	ldr	r3, [pc, #52]	; (ae08 <auth_passkey_confirm+0x5c>)
    add4:	4629      	mov	r1, r5
    add6:	4620      	mov	r0, r4
    add8:	9302      	str	r3, [sp, #8]
    adda:	2203      	movs	r2, #3
    addc:	4623      	mov	r3, r4
    adde:	e9cd 4400 	strd	r4, r4, [sp]
    ade2:	f019 fcaa 	bl	2473a <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    ade6:	4b09      	ldr	r3, [pc, #36]	; (ae0c <auth_passkey_confirm+0x60>)
    ade8:	2203      	movs	r2, #3
    adea:	e9cd 4301 	strd	r4, r3, [sp, #4]
    adee:	4629      	mov	r1, r5
    adf0:	4623      	mov	r3, r4
    adf2:	4620      	mov	r0, r4
    adf4:	9400      	str	r4, [sp, #0]
    adf6:	f019 fca0 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    adfa:	b00e      	add	sp, #56	; 0x38
    adfc:	bd70      	pop	{r4, r5, r6, pc}
    adfe:	bf00      	nop
    ae00:	20009dd4 	.word	0x20009dd4
    ae04:	0002aa50 	.word	0x0002aa50
    ae08:	0002bb39 	.word	0x0002bb39
    ae0c:	0002bb4e 	.word	0x0002bb4e

0000ae10 <bt_receive_cb>:
{
    ae10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ae14:	2400      	movs	r4, #0
{
    ae16:	4605      	mov	r5, r0
    ae18:	b088      	sub	sp, #32
    ae1a:	460f      	mov	r7, r1
    ae1c:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ae1e:	4621      	mov	r1, r4
    ae20:	221a      	movs	r2, #26
    ae22:	a801      	add	r0, sp, #4
    ae24:	9400      	str	r4, [sp, #0]
    ae26:	f01e fdf6 	bl	29a16 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    ae2a:	4628      	mov	r0, r5
    ae2c:	f01b fd7b 	bl	26926 <bt_conn_get_dst>
    ae30:	4669      	mov	r1, sp
    ae32:	f7ff fee3 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    ae36:	4669      	mov	r1, sp
    ae38:	481f      	ldr	r0, [pc, #124]	; (aeb8 <bt_receive_cb+0xa8>)
    ae3a:	f018 fd07 	bl	2384c <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae3e:	f8df 807c 	ldr.w	r8, [pc, #124]	; aebc <bt_receive_cb+0xac>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ae42:	f8df 907c 	ldr.w	r9, [pc, #124]	; aec0 <bt_receive_cb+0xb0>
	for (uint16_t pos = 0; pos != len;)
    ae46:	42b4      	cmp	r4, r6
    ae48:	d007      	beq.n	ae5a <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    ae4a:	2088      	movs	r0, #136	; 0x88
    ae4c:	f01e fd94 	bl	29978 <k_malloc>
		if (!tx)
    ae50:	4605      	mov	r5, r0
    ae52:	b928      	cbnz	r0, ae60 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    ae54:	481b      	ldr	r0, [pc, #108]	; (aec4 <bt_receive_cb+0xb4>)
    ae56:	f018 fcf9 	bl	2384c <iprintf>
}
    ae5a:	b008      	add	sp, #32
    ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size)
    ae60:	1b32      	subs	r2, r6, r4
    ae62:	2a81      	cmp	r2, #129	; 0x81
			tx->len = tx_data_size;
    ae64:	bf8c      	ite	hi
    ae66:	2281      	movhi	r2, #129	; 0x81
			tx->len = (len - pos);
    ae68:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    ae6a:	f100 0a04 	add.w	sl, r0, #4
    ae6e:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ae72:	1939      	adds	r1, r7, r4
    ae74:	4650      	mov	r0, sl
    ae76:	f01e fd94 	bl	299a2 <memcpy>
		pos += tx->len;
    ae7a:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
    ae7e:	441c      	add	r4, r3
    ae80:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r'))
    ae82:	42a6      	cmp	r6, r4
    ae84:	d10a      	bne.n	ae9c <bt_receive_cb+0x8c>
    ae86:	19ba      	adds	r2, r7, r6
    ae88:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    ae8c:	2a0d      	cmp	r2, #13
    ae8e:	d105      	bne.n	ae9c <bt_receive_cb+0x8c>
			tx->data[tx->len] = '\n';
    ae90:	210a      	movs	r1, #10
    ae92:	18ea      	adds	r2, r5, r3
			tx->len++;
    ae94:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    ae96:	7111      	strb	r1, [r2, #4]
			tx->len++;
    ae98:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae9c:	4651      	mov	r1, sl
    ae9e:	4640      	mov	r0, r8
    aea0:	f8b5 2086 	ldrh.w	r2, [r5, #134]	; 0x86
    aea4:	f019 fc60 	bl	24768 <uart_tx.constprop.0>
		if (err)
    aea8:	2800      	cmp	r0, #0
    aeaa:	d0cc      	beq.n	ae46 <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    aeac:	4629      	mov	r1, r5
    aeae:	4648      	mov	r0, r9
    aeb0:	f01e fbae 	bl	29610 <k_queue_append>
    aeb4:	e7c7      	b.n	ae46 <bt_receive_cb+0x36>
    aeb6:	bf00      	nop
    aeb8:	0002bb7d 	.word	0x0002bb7d
    aebc:	0002a430 	.word	0x0002a430
    aec0:	20008bb0 	.word	0x20008bb0
    aec4:	0002bb94 	.word	0x0002bb94

0000aec8 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    aec8:	4603      	mov	r3, r0
    aeca:	b510      	push	{r4, lr}
    aecc:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aece:	7919      	ldrb	r1, [r3, #4]
    aed0:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    aed2:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aed4:	fa03 f101 	lsl.w	r1, r3, r1
    aed8:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    aeda:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aedc:	681b      	ldr	r3, [r3, #0]
    aede:	4219      	tst	r1, r3
    aee0:	d10e      	bne.n	af00 <gpio_pin_set_dt.isra.0+0x38>
    aee2:	490e      	ldr	r1, [pc, #56]	; (af1c <gpio_pin_set_dt.isra.0+0x54>)
    aee4:	f240 533d 	movw	r3, #1341	; 0x53d
    aee8:	4a0d      	ldr	r2, [pc, #52]	; (af20 <gpio_pin_set_dt.isra.0+0x58>)
    aeea:	480e      	ldr	r0, [pc, #56]	; (af24 <gpio_pin_set_dt.isra.0+0x5c>)
    aeec:	f019 fff3 	bl	24ed6 <assert_print>
    aef0:	480d      	ldr	r0, [pc, #52]	; (af28 <gpio_pin_set_dt.isra.0+0x60>)
    aef2:	f019 fff0 	bl	24ed6 <assert_print>
    aef6:	f240 513d 	movw	r1, #1341	; 0x53d
    aefa:	4809      	ldr	r0, [pc, #36]	; (af20 <gpio_pin_set_dt.isra.0+0x58>)
    aefc:	f019 ffe4 	bl	24ec8 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    af00:	6823      	ldr	r3, [r4, #0]
    af02:	4219      	tst	r1, r3
    af04:	d003      	beq.n	af0e <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    af06:	b122      	cbz	r2, af12 <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    af08:	6883      	ldr	r3, [r0, #8]
    af0a:	691b      	ldr	r3, [r3, #16]
    af0c:	e003      	b.n	af16 <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    af0e:	2a00      	cmp	r2, #0
    af10:	d0fa      	beq.n	af08 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    af12:	6883      	ldr	r3, [r0, #8]
    af14:	68db      	ldr	r3, [r3, #12]
}
    af16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    af1a:	4718      	bx	r3
    af1c:	0002b8fb 	.word	0x0002b8fb
    af20:	0002b8ca 	.word	0x0002b8ca
    af24:	0002b939 	.word	0x0002b939
    af28:	0002b956 	.word	0x0002b956

0000af2c <button_pressed_1>:
{
    af2c:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    af2e:	4807      	ldr	r0, [pc, #28]	; (af4c <button_pressed_1+0x20>)
    af30:	f015 f806 	bl	1ff40 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    af34:	2101      	movs	r1, #1
    af36:	4806      	ldr	r0, [pc, #24]	; (af50 <button_pressed_1+0x24>)
    af38:	f7ff ffc6 	bl	aec8 <gpio_pin_set_dt.isra.0>
    af3c:	f01d fbdf 	bl	286fe <sys_clock_cycle_get_32>
}
    af40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    af44:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    af46:	4803      	ldr	r0, [pc, #12]	; (af54 <button_pressed_1+0x28>)
    af48:	f019 be03 	b.w	24b52 <printk>
    af4c:	20008b60 	.word	0x20008b60
    af50:	0002ace8 	.word	0x0002ace8
    af54:	0002bbbf 	.word	0x0002bbbf

0000af58 <connected>:
{
    af58:	b570      	push	{r4, r5, r6, lr}
    af5a:	4605      	mov	r5, r0
	if (err)
    af5c:	460c      	mov	r4, r1
{
    af5e:	b08c      	sub	sp, #48	; 0x30
	if (err)
    af60:	b161      	cbz	r1, af7c <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    af62:	4b14      	ldr	r3, [pc, #80]	; (afb4 <connected+0x5c>)
    af64:	9103      	str	r1, [sp, #12]
    af66:	9302      	str	r3, [sp, #8]
    af68:	2300      	movs	r3, #0
    af6a:	2201      	movs	r2, #1
    af6c:	4618      	mov	r0, r3
    af6e:	e9cd 3300 	strd	r3, r3, [sp]
    af72:	4911      	ldr	r1, [pc, #68]	; (afb8 <connected+0x60>)
    af74:	f019 fbe1 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    af78:	b00c      	add	sp, #48	; 0x30
    af7a:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    af7c:	ae04      	add	r6, sp, #16
    af7e:	f01b fcd2 	bl	26926 <bt_conn_get_dst>
    af82:	4631      	mov	r1, r6
    af84:	f7ff fe3a 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    af88:	4b0c      	ldr	r3, [pc, #48]	; (afbc <connected+0x64>)
    af8a:	2203      	movs	r2, #3
    af8c:	4620      	mov	r0, r4
    af8e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    af92:	4909      	ldr	r1, [pc, #36]	; (afb8 <connected+0x60>)
    af94:	4623      	mov	r3, r4
    af96:	9603      	str	r6, [sp, #12]
    af98:	9400      	str	r4, [sp, #0]
    af9a:	f019 fbce 	bl	2473a <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    af9e:	4628      	mov	r0, r5
    afa0:	f009 f92e 	bl	14200 <bt_conn_ref>
    afa4:	4b06      	ldr	r3, [pc, #24]	; (afc0 <connected+0x68>)
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    afa6:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    afa8:	6018      	str	r0, [r3, #0]
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    afaa:	4806      	ldr	r0, [pc, #24]	; (afc4 <connected+0x6c>)
    afac:	f7ff ff8c 	bl	aec8 <gpio_pin_set_dt.isra.0>
    afb0:	e7e2      	b.n	af78 <connected+0x20>
    afb2:	bf00      	nop
    afb4:	0002bbd7 	.word	0x0002bbd7
    afb8:	0002aa50 	.word	0x0002aa50
    afbc:	0002bbf2 	.word	0x0002bbf2
    afc0:	20009dd8 	.word	0x20009dd8
    afc4:	0002ad00 	.word	0x0002ad00

0000afc8 <disconnected>:
{
    afc8:	b530      	push	{r4, r5, lr}
    afca:	460c      	mov	r4, r1
    afcc:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    afce:	ad06      	add	r5, sp, #24
    afd0:	f01b fca9 	bl	26926 <bt_conn_get_dst>
    afd4:	4629      	mov	r1, r5
    afd6:	f7ff fe11 	bl	abfc <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afda:	e9cd 5403 	strd	r5, r4, [sp, #12]
    afde:	2400      	movs	r4, #0
    afe0:	4b0d      	ldr	r3, [pc, #52]	; (b018 <disconnected+0x50>)
	if (auth_conn)
    afe2:	4d0e      	ldr	r5, [pc, #56]	; (b01c <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afe4:	4620      	mov	r0, r4
    afe6:	9302      	str	r3, [sp, #8]
    afe8:	2203      	movs	r2, #3
    afea:	4623      	mov	r3, r4
    afec:	e9cd 4400 	strd	r4, r4, [sp]
    aff0:	490b      	ldr	r1, [pc, #44]	; (b020 <disconnected+0x58>)
    aff2:	f019 fba2 	bl	2473a <z_log_msg_runtime_create.constprop.0>
	if (auth_conn)
    aff6:	6828      	ldr	r0, [r5, #0]
    aff8:	b110      	cbz	r0, b000 <disconnected+0x38>
		bt_conn_unref(auth_conn);
    affa:	f009 f929 	bl	14250 <bt_conn_unref>
		auth_conn = NULL;
    affe:	602c      	str	r4, [r5, #0]
	if (current_conn)
    b000:	4c08      	ldr	r4, [pc, #32]	; (b024 <disconnected+0x5c>)
    b002:	6820      	ldr	r0, [r4, #0]
    b004:	b130      	cbz	r0, b014 <disconnected+0x4c>
		bt_conn_unref(current_conn);
    b006:	f009 f923 	bl	14250 <bt_conn_unref>
		current_conn = NULL;
    b00a:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    b00c:	4806      	ldr	r0, [pc, #24]	; (b028 <disconnected+0x60>)
		current_conn = NULL;
    b00e:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    b010:	f7ff ff5a 	bl	aec8 <gpio_pin_set_dt.isra.0>
}
    b014:	b00f      	add	sp, #60	; 0x3c
    b016:	bd30      	pop	{r4, r5, pc}
    b018:	0002bbff 	.word	0x0002bbff
    b01c:	20009dd4 	.word	0x20009dd4
    b020:	0002aa50 	.word	0x0002aa50
    b024:	20009dd8 	.word	0x20009dd8
    b028:	0002ad00 	.word	0x0002ad00

0000b02c <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    b02c:	4603      	mov	r3, r0
    b02e:	b570      	push	{r4, r5, r6, lr}
    b030:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    b032:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    b034:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    b036:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    b038:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b03a:	f002 0430 	and.w	r4, r2, #48	; 0x30
    b03e:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    b040:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    b042:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b046:	d10e      	bne.n	b066 <gpio_pin_configure_dt.isra.0+0x3a>
    b048:	4925      	ldr	r1, [pc, #148]	; (b0e0 <gpio_pin_configure_dt.isra.0+0xb4>)
    b04a:	f240 23b7 	movw	r3, #695	; 0x2b7
    b04e:	4a25      	ldr	r2, [pc, #148]	; (b0e4 <gpio_pin_configure_dt.isra.0+0xb8>)
    b050:	4825      	ldr	r0, [pc, #148]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xbc>)
    b052:	f019 ff40 	bl	24ed6 <assert_print>
    b056:	4825      	ldr	r0, [pc, #148]	; (b0ec <gpio_pin_configure_dt.isra.0+0xc0>)
    b058:	f019 ff3d 	bl	24ed6 <assert_print>
    b05c:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    b060:	4820      	ldr	r0, [pc, #128]	; (b0e4 <gpio_pin_configure_dt.isra.0+0xb8>)
    b062:	f019 ff31 	bl	24ec8 <assert_post_action>
    b066:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    b06a:	2c02      	cmp	r4, #2
    b06c:	d10c      	bne.n	b088 <gpio_pin_configure_dt.isra.0+0x5c>
    b06e:	4920      	ldr	r1, [pc, #128]	; (b0f0 <gpio_pin_configure_dt.isra.0+0xc4>)
    b070:	f240 23bb 	movw	r3, #699	; 0x2bb
    b074:	4a1b      	ldr	r2, [pc, #108]	; (b0e4 <gpio_pin_configure_dt.isra.0+0xb8>)
    b076:	481c      	ldr	r0, [pc, #112]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xbc>)
    b078:	f019 ff2d 	bl	24ed6 <assert_print>
    b07c:	481d      	ldr	r0, [pc, #116]	; (b0f4 <gpio_pin_configure_dt.isra.0+0xc8>)
    b07e:	f019 ff2a 	bl	24ed6 <assert_print>
    b082:	f240 21bb 	movw	r1, #699	; 0x2bb
    b086:	e7eb      	b.n	b060 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    b088:	f002 0406 	and.w	r4, r2, #6
    b08c:	2c04      	cmp	r4, #4
    b08e:	d109      	bne.n	b0a4 <gpio_pin_configure_dt.isra.0+0x78>
    b090:	4919      	ldr	r1, [pc, #100]	; (b0f8 <gpio_pin_configure_dt.isra.0+0xcc>)
    b092:	f240 23bf 	movw	r3, #703	; 0x2bf
    b096:	4a13      	ldr	r2, [pc, #76]	; (b0e4 <gpio_pin_configure_dt.isra.0+0xb8>)
    b098:	4813      	ldr	r0, [pc, #76]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xbc>)
    b09a:	f019 ff1c 	bl	24ed6 <assert_print>
    b09e:	f240 21bf 	movw	r1, #703	; 0x2bf
    b0a2:	e7dd      	b.n	b060 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b0a4:	2401      	movs	r4, #1
    b0a6:	681b      	ldr	r3, [r3, #0]
    b0a8:	408c      	lsls	r4, r1
    b0aa:	421c      	tst	r4, r3
    b0ac:	d10c      	bne.n	b0c8 <gpio_pin_configure_dt.isra.0+0x9c>
    b0ae:	4913      	ldr	r1, [pc, #76]	; (b0fc <gpio_pin_configure_dt.isra.0+0xd0>)
    b0b0:	f240 23d2 	movw	r3, #722	; 0x2d2
    b0b4:	4a0b      	ldr	r2, [pc, #44]	; (b0e4 <gpio_pin_configure_dt.isra.0+0xb8>)
    b0b6:	480c      	ldr	r0, [pc, #48]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xbc>)
    b0b8:	f019 ff0d 	bl	24ed6 <assert_print>
    b0bc:	4810      	ldr	r0, [pc, #64]	; (b100 <gpio_pin_configure_dt.isra.0+0xd4>)
    b0be:	f019 ff0a 	bl	24ed6 <assert_print>
    b0c2:	f240 21d2 	movw	r1, #722	; 0x2d2
    b0c6:	e7cb      	b.n	b060 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0c8:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b0ca:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0ce:	bf14      	ite	ne
    b0d0:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b0d2:	43a3      	biceq	r3, r4
    b0d4:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    b0d6:	6833      	ldr	r3, [r6, #0]
}
    b0d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    b0dc:	4718      	bx	r3
    b0de:	bf00      	nop
    b0e0:	0002bc1c 	.word	0x0002bc1c
    b0e4:	0002b8ca 	.word	0x0002b8ca
    b0e8:	0002b939 	.word	0x0002b939
    b0ec:	0002bc55 	.word	0x0002bc55
    b0f0:	0002bc92 	.word	0x0002bc92
    b0f4:	0002bcc7 	.word	0x0002bcc7
    b0f8:	0002bd19 	.word	0x0002bd19
    b0fc:	0002b8fb 	.word	0x0002b8fb
    b100:	0002b956 	.word	0x0002b956

0000b104 <adc_thread>:
	}
	// k_free(packet_data);
}

void adc_thread(void)
{
    b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b108:	4e36      	ldr	r6, [pc, #216]	; (b1e4 <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b10a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b1e8 <adc_thread+0xe4>
    b10e:	b085      	sub	sp, #20
	int err;

	while (1)
	{
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    b110:	4c36      	ldr	r4, [pc, #216]	; (b1ec <adc_thread+0xe8>)
    b112:	2700      	movs	r7, #0
    b114:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
			k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id] = buf_adc;
    b116:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b1f0 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b11a:	7963      	ldrb	r3, [r4, #5]
    b11c:	b13b      	cbz	r3, b12e <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b11e:	2301      	movs	r3, #1
    b120:	7922      	ldrb	r2, [r4, #4]
    b122:	4093      	lsls	r3, r2
    b124:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b126:	7c23      	ldrb	r3, [r4, #16]
    b128:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b12a:	7c63      	ldrb	r3, [r4, #17]
    b12c:	7473      	strb	r3, [r6, #17]
    b12e:	f04f 32ff 	mov.w	r2, #4294967295
    b132:	f04f 33ff 	mov.w	r3, #4294967295
    b136:	4650      	mov	r0, sl
    b138:	f014 fca0 	bl	1fa7c <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b13c:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b13e:	68ab      	ldr	r3, [r5, #8]
    b140:	4631      	mov	r1, r6
    b142:	4628      	mov	r0, r5
    b144:	685b      	ldr	r3, [r3, #4]
    b146:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id] = buf_adc;
    b148:	7922      	ldrb	r2, [r4, #4]
    b14a:	f9b8 1000 	ldrsh.w	r1, [r8]
    b14e:	4b29      	ldr	r3, [pc, #164]	; (b1f4 <adc_thread+0xf0>)
    b150:	9201      	str	r2, [sp, #4]
    b152:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

			if (flag == 1)
    b156:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b1f8 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b15a:	4650      	mov	r0, sl
    b15c:	f014 fd5e 	bl	1fc1c <z_impl_k_mutex_unlock>
    b160:	f8d9 3000 	ldr.w	r3, [r9]
    b164:	9a01      	ldr	r2, [sp, #4]
    b166:	2b01      	cmp	r3, #1
    b168:	d12d      	bne.n	b1c6 <adc_thread+0xc2>
			{
				printk("- %s, channel %d: ", adc_channels[i].dev->name, adc_channels[i].channel_id);
    b16a:	6829      	ldr	r1, [r5, #0]
    b16c:	4823      	ldr	r0, [pc, #140]	; (b1fc <adc_thread+0xf8>)
    b16e:	f019 fcf0 	bl	24b52 <printk>
				printk("%" PRId16, buf_adc);
    b172:	f9b8 1000 	ldrsh.w	r1, [r8]
    b176:	4822      	ldr	r0, [pc, #136]	; (b200 <adc_thread+0xfc>)
    b178:	f019 fceb 	bl	24b52 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b17c:	7963      	ldrb	r3, [r4, #5]
				val_mv = buf_adc;
    b17e:	f9b8 5000 	ldrsh.w	r5, [r8]
    b182:	b1e3      	cbz	r3, b1be <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b184:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b186:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b188:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b18c:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b18e:	bf0a      	itet	eq
    b190:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b192:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b194:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b196:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b198:	bf08      	it	eq
    b19a:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b19c:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b19e:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b1a0:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b1a2:	bf44      	itt	mi
    b1a4:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b1a8:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b1aa:	79a0      	ldrb	r0, [r4, #6]
    b1ac:	a903      	add	r1, sp, #12
    b1ae:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b1b0:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b1b2:	f00e fab5 	bl	19720 <adc_gain_invert>
	if (ret == 0) {
    b1b6:	b910      	cbnz	r0, b1be <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b1b8:	9d03      	ldr	r5, [sp, #12]
    b1ba:	9b01      	ldr	r3, [sp, #4]
    b1bc:	411d      	asrs	r5, r3
				adc_raw_to_millivolts_dt(&adc_channels[i], &val_mv);
				printk(" = %" PRId32 " mV\n", val_mv);
    b1be:	4629      	mov	r1, r5
    b1c0:	4810      	ldr	r0, [pc, #64]	; (b204 <adc_thread+0x100>)
    b1c2:	f019 fcc6 	bl	24b52 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    b1c6:	3701      	adds	r7, #1
    b1c8:	2f06      	cmp	r7, #6
    b1ca:	f104 0414 	add.w	r4, r4, #20
    b1ce:	d1a4      	bne.n	b11a <adc_thread+0x16>
			}
		}
		flag = 0;
    b1d0:	2300      	movs	r3, #0
		k_sleep(K_MSEC(100));
    b1d2:	f640 40cd 	movw	r0, #3277	; 0xccd
    b1d6:	2100      	movs	r1, #0
		flag = 0;
    b1d8:	f8c9 3000 	str.w	r3, [r9]
		k_sleep(K_MSEC(100));
    b1dc:	f019 fad4 	bl	24788 <k_sleep.isra.0>
	{
    b1e0:	e796      	b.n	b110 <adc_thread+0xc>
    b1e2:	bf00      	nop
    b1e4:	200083e4 	.word	0x200083e4
    b1e8:	20009e20 	.word	0x20009e20
    b1ec:	0002ac70 	.word	0x0002ac70
    b1f0:	2002158c 	.word	0x2002158c
    b1f4:	2002157c 	.word	0x2002157c
    b1f8:	20009e1c 	.word	0x20009e1c
    b1fc:	0002bd4c 	.word	0x0002bd4c
    b200:	0002bd5f 	.word	0x0002bd5f
    b204:	0002bd63 	.word	0x0002bd63

0000b208 <uart_cb>:
{
    b208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type)
    b20a:	780b      	ldrb	r3, [r1, #0]
    b20c:	2b05      	cmp	r3, #5
    b20e:	d829      	bhi.n	b264 <uart_cb+0x5c>
    b210:	e8df f003 	tbb	[pc, r3]
    b214:	6b2c9503 	.word	0x6b2c9503
    b218:	4984      	.short	0x4984
		if ((evt->data.tx.len == 0) ||
    b21a:	688b      	ldr	r3, [r1, #8]
    b21c:	b313      	cbz	r3, b264 <uart_cb+0x5c>
			(!evt->data.tx.buf))
    b21e:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    b220:	b300      	cbz	r0, b264 <uart_cb+0x5c>
		if (aborted_buf)
    b222:	4a51      	ldr	r2, [pc, #324]	; (b368 <uart_cb+0x160>)
    b224:	6813      	ldr	r3, [r2, #0]
    b226:	b1fb      	cbz	r3, b268 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    b228:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    b22a:	2300      	movs	r3, #0
    b22c:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    b22e:	4a4f      	ldr	r2, [pc, #316]	; (b36c <uart_cb+0x164>)
    b230:	6013      	str	r3, [r2, #0]
		k_free(buf);
    b232:	f01e fb9a 	bl	2996a <k_free>
	return z_impl_k_queue_get(queue, timeout);
    b236:	2200      	movs	r2, #0
    b238:	2300      	movs	r3, #0
    b23a:	484d      	ldr	r0, [pc, #308]	; (b370 <uart_cb+0x168>)
    b23c:	f014 fe16 	bl	1fe6c <z_impl_k_queue_get>
		if (!buf)
    b240:	b180      	cbz	r0, b264 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS))
    b242:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
    b246:	1d01      	adds	r1, r0, #4
    b248:	484a      	ldr	r0, [pc, #296]	; (b374 <uart_cb+0x16c>)
    b24a:	f019 fa8d 	bl	24768 <uart_tx.constprop.0>
    b24e:	b148      	cbz	r0, b264 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    b250:	4b49      	ldr	r3, [pc, #292]	; (b378 <uart_cb+0x170>)
    b252:	2202      	movs	r2, #2
    b254:	9302      	str	r3, [sp, #8]
    b256:	2300      	movs	r3, #0
    b258:	4618      	mov	r0, r3
    b25a:	e9cd 3300 	strd	r3, r3, [sp]
    b25e:	4947      	ldr	r1, [pc, #284]	; (b37c <uart_cb+0x174>)
			LOG_WRN("Not able to allocate UART receive buffer");
    b260:	f019 fa6b 	bl	2473a <z_log_msg_runtime_create.constprop.0>
}
    b264:	b004      	add	sp, #16
    b266:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data);
    b268:	3804      	subs	r0, #4
    b26a:	e7e2      	b.n	b232 <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b26c:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    b26e:	68cb      	ldr	r3, [r1, #12]
    b270:	f8b2 0082 	ldrh.w	r0, [r2, #130]	; 0x82
    b274:	4403      	add	r3, r0
		if (disable_req)
    b276:	4842      	ldr	r0, [pc, #264]	; (b380 <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
    b278:	b29b      	uxth	r3, r3
    b27a:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		if (disable_req)
    b27e:	7802      	ldrb	r2, [r0, #0]
    b280:	2a00      	cmp	r2, #0
    b282:	d1ef      	bne.n	b264 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    b284:	684a      	ldr	r2, [r1, #4]
    b286:	4413      	add	r3, r2
    b288:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b28c:	2b0a      	cmp	r3, #10
    b28e:	d001      	beq.n	b294 <uart_cb+0x8c>
    b290:	2b0d      	cmp	r3, #13
    b292:	d1e7      	bne.n	b264 <uart_cb+0x5c>
			disable_req = true;
    b294:	2301      	movs	r3, #1
    b296:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    b298:	4836      	ldr	r0, [pc, #216]	; (b374 <uart_cb+0x16c>)
    b29a:	6883      	ldr	r3, [r0, #8]
    b29c:	695b      	ldr	r3, [r3, #20]
}
    b29e:	b004      	add	sp, #16
    b2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2a4:	4718      	bx	r3
		disable_req = false;
    b2a6:	2400      	movs	r4, #0
    b2a8:	4b35      	ldr	r3, [pc, #212]	; (b380 <uart_cb+0x178>)
		buf = k_malloc(sizeof(*buf));
    b2aa:	2088      	movs	r0, #136	; 0x88
		disable_req = false;
    b2ac:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    b2ae:	f01e fb63 	bl	29978 <k_malloc>
    b2b2:	4603      	mov	r3, r0
		if (buf)
    b2b4:	b140      	cbz	r0, b2c8 <uart_cb+0xc0>
			buf->len = 0;
    b2b6:	f8a0 4086 	strh.w	r4, [r0, #134]	; 0x86
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b2ba:	1d01      	adds	r1, r0, #4
    b2bc:	482d      	ldr	r0, [pc, #180]	; (b374 <uart_cb+0x16c>)
}
    b2be:	b004      	add	sp, #16
    b2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b2c4:	f019 ba48 	b.w	24758 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    b2c8:	4a2e      	ldr	r2, [pc, #184]	; (b384 <uart_cb+0x17c>)
    b2ca:	9000      	str	r0, [sp, #0]
    b2cc:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b2d0:	492a      	ldr	r1, [pc, #168]	; (b37c <uart_cb+0x174>)
    b2d2:	2202      	movs	r2, #2
    b2d4:	f019 fa31 	bl	2473a <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b2d8:	f240 6267 	movw	r2, #1639	; 0x667
    b2dc:	2300      	movs	r3, #0
    b2de:	482a      	ldr	r0, [pc, #168]	; (b388 <uart_cb+0x180>)
}
    b2e0:	b004      	add	sp, #16
    b2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b2e6:	f015 bbcb 	b.w	20a80 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    b2ea:	2088      	movs	r0, #136	; 0x88
    b2ec:	f01e fb44 	bl	29978 <k_malloc>
    b2f0:	4603      	mov	r3, r0
		if (buf)
    b2f2:	b160      	cbz	r0, b30e <uart_cb+0x106>
			buf->len = 0;
    b2f4:	2200      	movs	r2, #0
    b2f6:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
	return api->rx_buf_rsp(dev, buf, len);
    b2fa:	481e      	ldr	r0, [pc, #120]	; (b374 <uart_cb+0x16c>)
    b2fc:	1d19      	adds	r1, r3, #4
    b2fe:	6882      	ldr	r2, [r0, #8]
    b300:	6914      	ldr	r4, [r2, #16]
    b302:	2282      	movs	r2, #130	; 0x82
    b304:	4623      	mov	r3, r4
}
    b306:	b004      	add	sp, #16
    b308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b30c:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    b30e:	4a1d      	ldr	r2, [pc, #116]	; (b384 <uart_cb+0x17c>)
    b310:	491a      	ldr	r1, [pc, #104]	; (b37c <uart_cb+0x174>)
    b312:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b316:	9000      	str	r0, [sp, #0]
    b318:	2202      	movs	r2, #2
    b31a:	e7a1      	b.n	b260 <uart_cb+0x58>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    b31c:	684b      	ldr	r3, [r1, #4]
    b31e:	1f19      	subs	r1, r3, #4
		if (buf->len > 0)
    b320:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
    b324:	b12b      	cbz	r3, b332 <uart_cb+0x12a>
			k_fifo_put(&fifo_uart_rx_data, buf);
    b326:	4819      	ldr	r0, [pc, #100]	; (b38c <uart_cb+0x184>)
}
    b328:	b004      	add	sp, #16
    b32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    b32e:	f01e b96f 	b.w	29610 <k_queue_append>
			k_free(buf);
    b332:	4608      	mov	r0, r1
}
    b334:	b004      	add	sp, #16
    b336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    b33a:	f01e bb16 	b.w	2996a <k_free>
		if (!aborted_buf)
    b33e:	4a0a      	ldr	r2, [pc, #40]	; (b368 <uart_cb+0x160>)
    b340:	6813      	ldr	r3, [r2, #0]
    b342:	b90b      	cbnz	r3, b348 <uart_cb+0x140>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    b344:	684b      	ldr	r3, [r1, #4]
    b346:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    b348:	4808      	ldr	r0, [pc, #32]	; (b36c <uart_cb+0x164>)
    b34a:	688b      	ldr	r3, [r1, #8]
    b34c:	6801      	ldr	r1, [r0, #0]
    b34e:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    b350:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    b352:	6003      	str	r3, [r0, #0]
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    b354:	f8b1 2082 	ldrh.w	r2, [r1, #130]	; 0x82
    b358:	4806      	ldr	r0, [pc, #24]	; (b374 <uart_cb+0x16c>)
    b35a:	1ad2      	subs	r2, r2, r3
    b35c:	4419      	add	r1, r3
}
    b35e:	b004      	add	sp, #16
    b360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    b364:	f019 ba00 	b.w	24768 <uart_tx.constprop.0>
    b368:	20009dcc 	.word	0x20009dcc
    b36c:	20009dc8 	.word	0x20009dc8
    b370:	20008bb0 	.word	0x20008bb0
    b374:	0002a430 	.word	0x0002a430
    b378:	0002bd6d 	.word	0x0002bd6d
    b37c:	0002aa50 	.word	0x0002aa50
    b380:	2002178a 	.word	0x2002178a
    b384:	0002bd8b 	.word	0x0002bd8b
    b388:	200091e0 	.word	0x200091e0
    b38c:	20008b94 	.word	0x20008b94

0000b390 <button_pressed_4>:
{
    b390:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b392:	4805      	ldr	r0, [pc, #20]	; (b3a8 <button_pressed_4+0x18>)
    b394:	f014 fdd4 	bl	1ff40 <z_impl_k_sem_give>
    b398:	f01d f9b1 	bl	286fe <sys_clock_cycle_get_32>
}
    b39c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3a0:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b3a2:	4802      	ldr	r0, [pc, #8]	; (b3ac <button_pressed_4+0x1c>)
    b3a4:	f019 bbd5 	b.w	24b52 <printk>
    b3a8:	20008b00 	.word	0x20008b00
    b3ac:	0002bdb4 	.word	0x0002bdb4

0000b3b0 <button_pressed_3>:
{
    b3b0:	b508      	push	{r3, lr}
    b3b2:	4805      	ldr	r0, [pc, #20]	; (b3c8 <button_pressed_3+0x18>)
    b3b4:	f014 fdc4 	bl	1ff40 <z_impl_k_sem_give>
    b3b8:	f01d f9a1 	bl	286fe <sys_clock_cycle_get_32>
}
    b3bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3c0:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b3c2:	4802      	ldr	r0, [pc, #8]	; (b3cc <button_pressed_3+0x1c>)
    b3c4:	f019 bbc5 	b.w	24b52 <printk>
    b3c8:	20008ae8 	.word	0x20008ae8
    b3cc:	0002bdcc 	.word	0x0002bdcc

0000b3d0 <button_pressed_2>:
{
    b3d0:	b508      	push	{r3, lr}
    b3d2:	4807      	ldr	r0, [pc, #28]	; (b3f0 <button_pressed_2+0x20>)
    b3d4:	f014 fdb4 	bl	1ff40 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b3d8:	2101      	movs	r1, #1
    b3da:	4806      	ldr	r0, [pc, #24]	; (b3f4 <button_pressed_2+0x24>)
    b3dc:	f7ff fd74 	bl	aec8 <gpio_pin_set_dt.isra.0>
    b3e0:	f01d f98d 	bl	286fe <sys_clock_cycle_get_32>
}
    b3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3e8:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b3ea:	4803      	ldr	r0, [pc, #12]	; (b3f8 <button_pressed_2+0x28>)
    b3ec:	f019 bbb1 	b.w	24b52 <printk>
    b3f0:	20008b30 	.word	0x20008b30
    b3f4:	0002acf0 	.word	0x0002acf0
    b3f8:	0002bde4 	.word	0x0002bde4

0000b3fc <gnss_write_thread>:
	}
}

void gnss_write_thread(void)
{
    b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b400:	b09b      	sub	sp, #108	; 0x6c

    uint8_t debug = ON;
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;

	uint64_t time = k_uptime_get();
    b402:	f019 f98c 	bl	2471e <k_uptime_get>
	uint8_t state = 0, pkt_init = 0;

	static uint8_t buffer[BUFF_SIZE];

    const char nmea_id[10] = "$GPGGA";
    b406:	4b6e      	ldr	r3, [pc, #440]	; (b5c0 <gnss_write_thread+0x1c4>)
    b408:	4f6e      	ldr	r7, [pc, #440]	; (b5c4 <gnss_write_thread+0x1c8>)
    b40a:	889a      	ldrh	r2, [r3, #4]
    b40c:	6818      	ldr	r0, [r3, #0]
    b40e:	799b      	ldrb	r3, [r3, #6]
    b410:	f8ad 2010 	strh.w	r2, [sp, #16]
    b414:	f88d 3012 	strb.w	r3, [sp, #18]
    b418:	2300      	movs	r3, #0
    b41a:	f8ad 3013 	strh.w	r3, [sp, #19]
    b41e:	f88d 3015 	strb.w	r3, [sp, #21]
    char *field[20];
    char *ret;
    char *token;
    char marker[2]="\n";
    b422:	230a      	movs	r3, #10
    b424:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    b428:	f8ad 3008 	strh.w	r3, [sp, #8]
    //marker[0]=0x0d;

	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    b42c:	2220      	movs	r2, #32
    char marker[2]="\n";
    b42e:	463b      	mov	r3, r7
    const char nmea_id[10] = "$GPGGA";
    b430:	9003      	str	r0, [sp, #12]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    b432:	3c01      	subs	r4, #1
    b434:	f803 2b01 	strb.w	r2, [r3], #1
    b438:	d1fb      	bne.n	b432 <gnss_write_thread+0x36>
	i = 0;

	struct uart_data_t *buf2a;
	buf2a = k_malloc(sizeof(*buf2a));
    b43a:	2088      	movs	r0, #136	; 0x88
    b43c:	f01e fa9c 	bl	29978 <k_malloc>
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;
    b440:	46a1      	mov	r9, r4
	uint8_t state = 0, pkt_init = 0;
    b442:	4626      	mov	r6, r4
    b444:	4625      	mov	r5, r4
	return z_impl_k_queue_get(queue, timeout);
    b446:	f8df 8180 	ldr.w	r8, [pc, #384]	; b5c8 <gnss_write_thread+0x1cc>
    b44a:	f04f 32ff 	mov.w	r2, #4294967295
    b44e:	f04f 33ff 	mov.w	r3, #4294967295
    b452:	4640      	mov	r0, r8
    b454:	f014 fd0a 	bl	1fe6c <z_impl_k_queue_get>
    b458:	4683      	mov	fp, r0
	z_impl_k_queue_init(queue);
    b45a:	4640      	mov	r0, r8
    b45c:	f01e f8cb 	bl	295f6 <z_impl_k_queue_init>
		/* Wait indefinitely for data  */
		
		buf2a = k_fifo_get(&fifo_uart2_rx_data, K_FOREVER);
		k_fifo_init(&fifo_uart2_rx_data);

		if (buf2a->len > 0)
    b460:	f8bb a086 	ldrh.w	sl, [fp, #134]	; 0x86
    b464:	f1ba 0f00 	cmp.w	sl, #0
    b468:	d01f      	beq.n	b4aa <gnss_write_thread+0xae>
		{
			k = (buf2a->len);
    b46a:	46d1      	mov	r9, sl

			i = 0;
			index = 0;
			
           
			while (i < k && pkt_init == 0)
    b46c:	b9ee      	cbnz	r6, b4aa <gnss_write_thread+0xae>
			index = 0;
    b46e:	4632      	mov	r2, r6
			i = 0;
    b470:	4630      	mov	r0, r6
    b472:	f10b 0c03 	add.w	ip, fp, #3
			{
				// printf("%02X ",buf2a->data[i]);
				switch (buf2a->data[i])
    b476:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    b47a:	2b52      	cmp	r3, #82	; 0x52
    b47c:	d806      	bhi.n	b48c <gnss_write_thread+0x90>
    b47e:	2b46      	cmp	r3, #70	; 0x46
    b480:	d854      	bhi.n	b52c <gnss_write_thread+0x130>
    b482:	2b24      	cmp	r3, #36	; 0x24
    b484:	d072      	beq.n	b56c <gnss_write_thread+0x170>
    b486:	2b43      	cmp	r3, #67	; 0x43
    b488:	f000 8085 	beq.w	b596 <gnss_write_thread+0x19a>
						state = 6;
					    index = i - 5;
					}
					break;
				}
				i++;
    b48c:	3001      	adds	r0, #1
			while (i < k && pkt_init == 0)
    b48e:	4550      	cmp	r0, sl
    b490:	d3f1      	bcc.n	b476 <gnss_write_thread+0x7a>
			}

            

			if (state == 6 && pkt_init == 0)
    b492:	2d06      	cmp	r5, #6
    b494:	d109      	bne.n	b4aa <gnss_write_thread+0xae>
			{
				printf("BEGIN:\n");
    b496:	484d      	ldr	r0, [pc, #308]	; (b5cc <gnss_write_thread+0x1d0>)
    b498:	9201      	str	r2, [sp, #4]
    b49a:	f018 f9d7 	bl	2384c <iprintf>
				while (index < k)
    b49e:	9a01      	ldr	r2, [sp, #4]
				{
					//if(debug)printf("%c", buf2a->data[index]);
					if (buf2a->data[index]!=0x0D) {
    b4a0:	f10b 0b04 	add.w	fp, fp, #4
				while (index < k)
    b4a4:	4552      	cmp	r2, sl
    b4a6:	d37b      	bcc.n	b5a0 <gnss_write_thread+0x1a4>
						bfcnt++;
					}
					index++;
				}
				
				pkt_init=1;
    b4a8:	2601      	movs	r6, #1
	return z_impl_k_queue_get(queue, timeout);
    b4aa:	f04f 33ff 	mov.w	r3, #4294967295
    b4ae:	f04f 32ff 	mov.w	r2, #4294967295
    b4b2:	4640      	mov	r0, r8
    b4b4:	f014 fcda 	bl	1fe6c <z_impl_k_queue_get>
		}

		buf2a = k_fifo_get(&fifo_uart2_rx_data, K_FOREVER);
		//k_fifo_init(&fifo_uart2_rx_data);

		if (buf2a->len > 0)
    b4b8:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d0c4      	beq.n	b44a <gnss_write_thread+0x4e>
		{


			if ((pkt_init >= 1) && (bfcnt < BUFF_SIZE)  )
    b4c0:	b16e      	cbz	r6, b4de <gnss_write_thread+0xe2>
    b4c2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    b4c6:	d20d      	bcs.n	b4e4 <gnss_write_thread+0xe8>
    b4c8:	f109 0203 	add.w	r2, r9, #3
    b4cc:	1cc3      	adds	r3, r0, #3
    b4ce:	4410      	add	r0, r2
			{
				index = 0;
				
				while ((index < k)  && (bfcnt < BUFF_SIZE))
    b4d0:	4283      	cmp	r3, r0
    b4d2:	d002      	beq.n	b4da <gnss_write_thread+0xde>
    b4d4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    b4d8:	d16a      	bne.n	b5b0 <gnss_write_thread+0x1b4>
						buffer[bfcnt] = buf2a->data[index];
						bfcnt++;
					}
					index++;
				}
				pkt_init++;
    b4da:	3601      	adds	r6, #1
    b4dc:	b2f6      	uxtb	r6, r6
			}

			if (bfcnt >= BUFF_SIZE - 1)
    b4de:	f5b4 7fef 	cmp.w	r4, #478	; 0x1de
    b4e2:	d9b2      	bls.n	b44a <gnss_write_thread+0x4e>
                while(index < bfcnt ){
					//printf("%c",buffer[index]);
				   	index++;
				}

   				ret = strstr(buffer, nmea_id);
    b4e4:	a903      	add	r1, sp, #12
    b4e6:	4837      	ldr	r0, [pc, #220]	; (b5c4 <gnss_write_thread+0x1c8>)
    b4e8:	f01e fc03 	bl	29cf2 <strstr>
   				//printf("The substring is: %s\n", ret);
   				token = strtok(ret, marker);
    b4ec:	a902      	add	r1, sp, #8
    b4ee:	f018 f9d5 	bl	2389c <strtok>
   				//printf("%s\n", token );
   				i=parse_comma_delimited_str(token, field, 20);
    b4f2:	2214      	movs	r2, #20
    b4f4:	a906      	add	r1, sp, #24
    b4f6:	f019 f979 	bl	247ec <parse_comma_delimited_str>
				//if (i==14)debug_print_fields(i,field);
				if (i==14){
    b4fa:	280e      	cmp	r0, #14
    b4fc:	d10b      	bne.n	b516 <gnss_write_thread+0x11a>
				  printf("TimeStamp  :%s\r\n",field[1]);	
    b4fe:	9907      	ldr	r1, [sp, #28]
    b500:	4833      	ldr	r0, [pc, #204]	; (b5d0 <gnss_write_thread+0x1d4>)
    b502:	f018 f9a3 	bl	2384c <iprintf>
                  printf("Latitude  N:%s\r\n",field[2]);
    b506:	9908      	ldr	r1, [sp, #32]
    b508:	4832      	ldr	r0, [pc, #200]	; (b5d4 <gnss_write_thread+0x1d8>)
    b50a:	f018 f99f 	bl	2384c <iprintf>
                  printf("Longitude E:%s\r\n",field[4]);
    b50e:	990a      	ldr	r1, [sp, #40]	; 0x28
    b510:	4831      	ldr	r0, [pc, #196]	; (b5d8 <gnss_write_thread+0x1dc>)
    b512:	f018 f99b 	bl	2384c <iprintf>
				pkt_init=1;
    b516:	463b      	mov	r3, r7
    b518:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
			    }
				index = 0;
				pkt_init = 0;
				bfcnt = 0;
				state = 0;
				while (index < BUFF_SIZE)buffer[index++] = 0x20;//space
    b51c:	2220      	movs	r2, #32
    b51e:	3c01      	subs	r4, #1
    b520:	f803 2b01 	strb.w	r2, [r3], #1
    b524:	d1fb      	bne.n	b51e <gnss_write_thread+0x122>
				pkt_init = 0;
    b526:	4626      	mov	r6, r4
				state = 0;
    b528:	4625      	mov	r5, r4
    b52a:	e78e      	b.n	b44a <gnss_write_thread+0x4e>
				switch (buf2a->data[i])
    b52c:	3b47      	subs	r3, #71	; 0x47
    b52e:	2b0b      	cmp	r3, #11
    b530:	d8ac      	bhi.n	b48c <gnss_write_thread+0x90>
    b532:	f20f 0e08 	addw	lr, pc, #8
    b536:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    b53a:	bf00      	nop
    b53c:	0000b577 	.word	0x0000b577
    b540:	0000b48d 	.word	0x0000b48d
    b544:	0000b48d 	.word	0x0000b48d
    b548:	0000b48d 	.word	0x0000b48d
    b54c:	0000b48d 	.word	0x0000b48d
    b550:	0000b48d 	.word	0x0000b48d
    b554:	0000b58f 	.word	0x0000b58f
    b558:	0000b48d 	.word	0x0000b48d
    b55c:	0000b48d 	.word	0x0000b48d
    b560:	0000b57f 	.word	0x0000b57f
    b564:	0000b48d 	.word	0x0000b48d
    b568:	0000b587 	.word	0x0000b587
					if (state == 0)state = 1;
    b56c:	2d01      	cmp	r5, #1
    b56e:	bf38      	it	cc
    b570:	2501      	movcc	r5, #1
    b572:	b2ed      	uxtb	r5, r5
    b574:	e78a      	b.n	b48c <gnss_write_thread+0x90>
					if (state == 1)state = 2;
    b576:	2d01      	cmp	r5, #1
    b578:	bf08      	it	eq
    b57a:	2502      	moveq	r5, #2
    b57c:	e786      	b.n	b48c <gnss_write_thread+0x90>
					if (state == 2)state = 3;
    b57e:	2d02      	cmp	r5, #2
    b580:	bf08      	it	eq
    b582:	2503      	moveq	r5, #3
    b584:	e782      	b.n	b48c <gnss_write_thread+0x90>
					if (state == 3)state = 4;
    b586:	2d03      	cmp	r5, #3
    b588:	bf08      	it	eq
    b58a:	2504      	moveq	r5, #4
    b58c:	e77e      	b.n	b48c <gnss_write_thread+0x90>
					if (state == 4)state = 5;
    b58e:	2d04      	cmp	r5, #4
    b590:	bf08      	it	eq
    b592:	2505      	moveq	r5, #5
    b594:	e77a      	b.n	b48c <gnss_write_thread+0x90>
					if (state == 5){
    b596:	2d05      	cmp	r5, #5
						state = 6;
    b598:	bf04      	itt	eq
    b59a:	2506      	moveq	r5, #6
					    index = i - 5;
    b59c:	1f42      	subeq	r2, r0, #5
    b59e:	e775      	b.n	b48c <gnss_write_thread+0x90>
					if (buf2a->data[index]!=0x0D) {
    b5a0:	f81b 3002 	ldrb.w	r3, [fp, r2]
					index++;
    b5a4:	3201      	adds	r2, #1
					if (buf2a->data[index]!=0x0D) {
    b5a6:	2b0d      	cmp	r3, #13
						buffer[bfcnt] = buf2a->data[index];
    b5a8:	bf1c      	itt	ne
    b5aa:	553b      	strbne	r3, [r7, r4]
						bfcnt++;
    b5ac:	3401      	addne	r4, #1
					index++;
    b5ae:	e779      	b.n	b4a4 <gnss_write_thread+0xa8>
					if (buf2a->data[index]!=0x0D) {
    b5b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    b5b4:	2a0d      	cmp	r2, #13
						buffer[bfcnt] = buf2a->data[index];
    b5b6:	bf1c      	itt	ne
    b5b8:	553a      	strbne	r2, [r7, r4]
						bfcnt++;
    b5ba:	3401      	addne	r4, #1
					index++;
    b5bc:	e788      	b.n	b4d0 <gnss_write_thread+0xd4>
    b5be:	bf00      	nop
    b5c0:	0002aaa0 	.word	0x0002aaa0
    b5c4:	200215aa 	.word	0x200215aa
    b5c8:	20008b78 	.word	0x20008b78
    b5cc:	0002bdfc 	.word	0x0002bdfc
    b5d0:	0002be04 	.word	0x0002be04
    b5d4:	0002be15 	.word	0x0002be15
    b5d8:	0002be26 	.word	0x0002be26

0000b5dc <ble_write_thread>:
{
    b5dc:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    b5de:	f04f 32ff 	mov.w	r2, #4294967295
    b5e2:	f04f 33ff 	mov.w	r3, #4294967295
    b5e6:	480d      	ldr	r0, [pc, #52]	; (b61c <ble_write_thread+0x40>)
    b5e8:	f019 f8c6 	bl	24778 <k_sem_take.constprop.0.isra.0>
    b5ec:	4d0c      	ldr	r5, [pc, #48]	; (b620 <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    b5ee:	4e0d      	ldr	r6, [pc, #52]	; (b624 <ble_write_thread+0x48>)
    b5f0:	f04f 32ff 	mov.w	r2, #4294967295
    b5f4:	f04f 33ff 	mov.w	r3, #4294967295
    b5f8:	4628      	mov	r0, r5
    b5fa:	f014 fc37 	bl	1fe6c <z_impl_k_queue_get>
    b5fe:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len))
    b600:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
    b604:	1d01      	adds	r1, r0, #4
    b606:	2000      	movs	r0, #0
    b608:	f004 fc08 	bl	fe1c <bt_nus_send>
    b60c:	b110      	cbz	r0, b614 <ble_write_thread+0x38>
			printk("Falha aqui- Failed to send data over BLE connection");
    b60e:	4630      	mov	r0, r6
    b610:	f019 fa9f 	bl	24b52 <printk>
		k_free(buf);
    b614:	4620      	mov	r0, r4
    b616:	f01e f9a8 	bl	2996a <k_free>
	{
    b61a:	e7e9      	b.n	b5f0 <ble_write_thread+0x14>
    b61c:	20008ad0 	.word	0x20008ad0
    b620:	20008b94 	.word	0x20008b94
    b624:	0002be37 	.word	0x0002be37

0000b628 <uart_cb_2>:
{
    b628:	b510      	push	{r4, lr}
	switch (evt->type)
    b62a:	780b      	ldrb	r3, [r1, #0]
    b62c:	3b02      	subs	r3, #2
    b62e:	2b03      	cmp	r3, #3
    b630:	d80a      	bhi.n	b648 <uart_cb_2+0x20>
    b632:	e8df f003 	tbb	[pc, r3]
    b636:	1f02      	.short	0x1f02
    b638:	0a2e      	.short	0x0a2e
		buf2 = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b63a:	684a      	ldr	r2, [r1, #4]
		buf2->len += evt->data.rx.len;
    b63c:	68cb      	ldr	r3, [r1, #12]
    b63e:	f8b2 1082 	ldrh.w	r1, [r2, #130]	; 0x82
    b642:	440b      	add	r3, r1
    b644:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
}
    b648:	bd10      	pop	{r4, pc}
		buf2 = k_malloc(sizeof(*buf2)); // THE SIZE IS 92 BYTES
    b64a:	2088      	movs	r0, #136	; 0x88
    b64c:	f01e f994 	bl	29978 <k_malloc>
		if (buf2)
    b650:	b140      	cbz	r0, b664 <uart_cb_2+0x3c>
			buf2->len = 0;
    b652:	2300      	movs	r3, #0
    b654:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b658:	1d01      	adds	r1, r0, #4
}
    b65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b65e:	4816      	ldr	r0, [pc, #88]	; (b6b8 <uart_cb_2+0x90>)
    b660:	f019 b87a 	b.w	24758 <uart_rx_enable.constprop.0>
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b664:	f240 6267 	movw	r2, #1639	; 0x667
}
    b668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b66c:	2300      	movs	r3, #0
    b66e:	4813      	ldr	r0, [pc, #76]	; (b6bc <uart_cb_2+0x94>)
    b670:	f015 ba06 	b.w	20a80 <k_work_reschedule>
		buf2 = k_malloc(sizeof(*buf2));
    b674:	2088      	movs	r0, #136	; 0x88
    b676:	f01e f97f 	bl	29978 <k_malloc>
		buf2->len = 0;
    b67a:	2300      	movs	r3, #0
		buf2 = k_malloc(sizeof(*buf2));
    b67c:	4601      	mov	r1, r0
		buf2->len = 0;
    b67e:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
    b682:	480d      	ldr	r0, [pc, #52]	; (b6b8 <uart_cb_2+0x90>)
    b684:	2282      	movs	r2, #130	; 0x82
}
    b686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b68a:	6883      	ldr	r3, [r0, #8]
    b68c:	3104      	adds	r1, #4
    b68e:	691b      	ldr	r3, [r3, #16]
    b690:	4718      	bx	r3
		buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data);
    b692:	684c      	ldr	r4, [r1, #4]
		if (buf2->len > 0)
    b694:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
    b698:	2b00      	cmp	r3, #0
    b69a:	d0d5      	beq.n	b648 <uart_cb_2+0x20>
		buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data);
    b69c:	3c04      	subs	r4, #4
			blink(LED3, 2);
    b69e:	2102      	movs	r1, #2
    b6a0:	4807      	ldr	r0, [pc, #28]	; (b6c0 <uart_cb_2+0x98>)
    b6a2:	f019 f873 	bl	2478c <blink>
			k_fifo_put(&fifo_uart2_rx_data, buf2);
    b6a6:	4621      	mov	r1, r4
    b6a8:	4806      	ldr	r0, [pc, #24]	; (b6c4 <uart_cb_2+0x9c>)
    b6aa:	f01d ffb1 	bl	29610 <k_queue_append>
			k_free(buf2);
    b6ae:	4620      	mov	r0, r4
}
    b6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf2);
    b6b4:	f01e b959 	b.w	2996a <k_free>
    b6b8:	0002a418 	.word	0x0002a418
    b6bc:	200091b0 	.word	0x200091b0
    b6c0:	0002acf0 	.word	0x0002acf0
    b6c4:	20008b78 	.word	0x20008b78

0000b6c8 <flash_init>:
{
    b6c8:	b570      	push	{r4, r5, r6, lr}
	fs.flash_device = NVS_PARTITION_DEVICE;
    b6ca:	4833      	ldr	r0, [pc, #204]	; (b798 <flash_init+0xd0>)
    b6cc:	4c33      	ldr	r4, [pc, #204]	; (b79c <flash_init+0xd4>)
    b6ce:	62a0      	str	r0, [r4, #40]	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b6d0:	f01d ff25 	bl	2951e <z_device_is_ready>
	if (!device_is_ready(fs.flash_device))
    b6d4:	b930      	cbnz	r0, b6e4 <flash_init+0x1c>
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    b6d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b6d8:	4831      	ldr	r0, [pc, #196]	; (b7a0 <flash_init+0xd8>)
    b6da:	6819      	ldr	r1, [r3, #0]
}
    b6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    b6e0:	f019 ba37 	b.w	24b52 <printk>
	fs.offset = NVS_PARTITION_OFFSET;
    b6e4:	2100      	movs	r1, #0
	rc = flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info);
    b6e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	fs.offset = NVS_PARTITION_OFFSET;
    b6e8:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    b6ea:	4d2e      	ldr	r5, [pc, #184]	; (b7a4 <flash_init+0xdc>)
    b6ec:	462a      	mov	r2, r5
    b6ee:	f01c fdb4 	bl	2825a <z_impl_flash_get_page_info_by_offs>
	if (rc)
    b6f2:	b120      	cbz	r0, b6fe <flash_init+0x36>
		printk("Unable to get page info\n");
    b6f4:	482c      	ldr	r0, [pc, #176]	; (b7a8 <flash_init+0xe0>)
}
    b6f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash Init failed\n");
    b6fa:	f019 ba2a 	b.w	24b52 <printk>
	fs.sector_size = info.size;
    b6fe:	686b      	ldr	r3, [r5, #4]
	rc = nvs_mount(&fs);
    b700:	4620      	mov	r0, r4
	fs.sector_size = info.size;
    b702:	81a3      	strh	r3, [r4, #12]
	fs.sector_count = 2048U; // NUMBER OF SECTORS total 0X800000 BYTES
    b704:	f44f 6300 	mov.w	r3, #2048	; 0x800
    b708:	81e3      	strh	r3, [r4, #14]
	rc = nvs_mount(&fs);
    b70a:	f003 fad9 	bl	ecc0 <nvs_mount>
	if (rc)
    b70e:	b108      	cbz	r0, b714 <flash_init+0x4c>
		printk("Flash Init failed\n");
    b710:	4826      	ldr	r0, [pc, #152]	; (b7ac <flash_init+0xe4>)
    b712:	e7f0      	b.n	b6f6 <flash_init+0x2e>
	rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    b714:	4d26      	ldr	r5, [pc, #152]	; (b7b0 <flash_init+0xe8>)
    b716:	2304      	movs	r3, #4
    b718:	462a      	mov	r2, r5
    b71a:	2101      	movs	r1, #1
    b71c:	4620      	mov	r0, r4
    b71e:	f019 fe07 	bl	25330 <nvs_read>
	if (rc > 0)
    b722:	2800      	cmp	r0, #0
    b724:	dd21      	ble.n	b76a <flash_init+0xa2>
		printk("Id: %d, button2_counter: %d\n",
    b726:	2101      	movs	r1, #1
    b728:	682a      	ldr	r2, [r5, #0]
    b72a:	4822      	ldr	r0, [pc, #136]	; (b7b4 <flash_init+0xec>)
    b72c:	f019 fa11 	bl	24b52 <printk>
	rc = nvs_read(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    b730:	4c21      	ldr	r4, [pc, #132]	; (b7b8 <flash_init+0xf0>)
    b732:	2304      	movs	r3, #4
    b734:	4622      	mov	r2, r4
    b736:	2102      	movs	r1, #2
    b738:	4818      	ldr	r0, [pc, #96]	; (b79c <flash_init+0xd4>)
    b73a:	f019 fdf9 	bl	25330 <nvs_read>
	if (rc > 0)
    b73e:	2800      	cmp	r0, #0
    b740:	dd1e      	ble.n	b780 <flash_init+0xb8>
		printk("Id: %d, Current Position: %d\n",
    b742:	6822      	ldr	r2, [r4, #0]
    b744:	2102      	movs	r1, #2
    b746:	481d      	ldr	r0, [pc, #116]	; (b7bc <flash_init+0xf4>)
    b748:	f019 fa03 	bl	24b52 <printk>
		if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS)
    b74c:	4b1c      	ldr	r3, [pc, #112]	; (b7c0 <flash_init+0xf8>)
    b74e:	681a      	ldr	r2, [r3, #0]
    b750:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
			C_Buffer_Free_Position = C_Buffer_Current_Position + 1;
    b754:	bf3e      	ittt	cc
    b756:	6822      	ldrcc	r2, [r4, #0]
    b758:	3201      	addcc	r2, #1
    b75a:	601a      	strcc	r2, [r3, #0]
		if (C_Buffer_Free_Position == CIRCULAR_BUFFER_ELEMENTS)
    b75c:	681a      	ldr	r2, [r3, #0]
    b75e:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
    b762:	d101      	bne.n	b768 <flash_init+0xa0>
			C_Buffer_Free_Position = 0;
    b764:	2200      	movs	r2, #0
    b766:	601a      	str	r2, [r3, #0]
}
    b768:	bd70      	pop	{r4, r5, r6, pc}
		printk("No Reboot counter found, adding it at id %d\n",
    b76a:	2101      	movs	r1, #1
    b76c:	4815      	ldr	r0, [pc, #84]	; (b7c4 <flash_init+0xfc>)
    b76e:	f019 f9f0 	bl	24b52 <printk>
		(void)nvs_write(&fs, BOOT_POSITION, &button2_counter,
    b772:	2304      	movs	r3, #4
    b774:	462a      	mov	r2, r5
    b776:	2101      	movs	r1, #1
    b778:	4620      	mov	r0, r4
    b77a:	f003 fc73 	bl	f064 <nvs_write>
    b77e:	e7d7      	b.n	b730 <flash_init+0x68>
		printk("Current Position counter found, adding it at id %d\n",
    b780:	2102      	movs	r1, #2
    b782:	4811      	ldr	r0, [pc, #68]	; (b7c8 <flash_init+0x100>)
    b784:	f019 f9e5 	bl	24b52 <printk>
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    b788:	4622      	mov	r2, r4
}
    b78a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    b78e:	2304      	movs	r3, #4
    b790:	2102      	movs	r1, #2
    b792:	4802      	ldr	r0, [pc, #8]	; (b79c <flash_init+0xd4>)
    b794:	f003 bc66 	b.w	f064 <nvs_write>
    b798:	0002a4c0 	.word	0x0002a4c0
    b79c:	20009dec 	.word	0x20009dec
    b7a0:	0002be6b 	.word	0x0002be6b
    b7a4:	20009de0 	.word	0x20009de0
    b7a8:	0002be89 	.word	0x0002be89
    b7ac:	0002bea2 	.word	0x0002bea2
    b7b0:	20009ddc 	.word	0x20009ddc
    b7b4:	0002beb5 	.word	0x0002beb5
    b7b8:	20020f54 	.word	0x20020f54
    b7bc:	0002beff 	.word	0x0002beff
    b7c0:	20020f58 	.word	0x20020f58
    b7c4:	0002bed2 	.word	0x0002bed2
    b7c8:	0002bf1d 	.word	0x0002bf1d

0000b7cc <send_bluetooth>:
{
    b7cc:	b084      	sub	sp, #16
    b7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7d2:	ac06      	add	r4, sp, #24
    b7d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b7d8:	203d      	movs	r0, #61	; 0x3d
	uint32_t comprimento = buf.len;
    b7da:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b7de:	f01e f8cb 	bl	29978 <k_malloc>
	int k = 0;
    b7e2:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b7e4:	4605      	mov	r5, r0
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b7e6:	f8df 8054 	ldr.w	r8, [pc, #84]	; b83c <send_bluetooth+0x70>
	while (k < comprimento - 1)
    b7ea:	1e77      	subs	r7, r6, #1
    b7ec:	42a7      	cmp	r7, r4
    b7ee:	d91d      	bls.n	b82c <send_bluetooth+0x60>
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    b7f0:	42b4      	cmp	r4, r6
    b7f2:	d301      	bcc.n	b7f8 <send_bluetooth+0x2c>
    b7f4:	2200      	movs	r2, #0
    b7f6:	e00f      	b.n	b818 <send_bluetooth+0x4c>
    b7f8:	2200      	movs	r2, #0
    b7fa:	1e6b      	subs	r3, r5, #1
			data[small_pkt] = buf.data[k];
    b7fc:	f104 0118 	add.w	r1, r4, #24
    b800:	4469      	add	r1, sp
			small_pkt++;
    b802:	3201      	adds	r2, #1
			*(packet_data + small_pkt) = buf.data[k];
    b804:	7909      	ldrb	r1, [r1, #4]
			small_pkt++;
    b806:	b292      	uxth	r2, r2
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    b808:	2a3d      	cmp	r2, #61	; 0x3d
			*(packet_data + small_pkt) = buf.data[k];
    b80a:	f803 1f01 	strb.w	r1, [r3, #1]!
			k++;
    b80e:	f104 0401 	add.w	r4, r4, #1
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    b812:	d001      	beq.n	b818 <send_bluetooth+0x4c>
    b814:	42a6      	cmp	r6, r4
    b816:	d8f1      	bhi.n	b7fc <send_bluetooth+0x30>
		if (bt_nus_send(NULL, packet_data, small_pkt))
    b818:	4629      	mov	r1, r5
    b81a:	2000      	movs	r0, #0
    b81c:	f004 fafe 	bl	fe1c <bt_nus_send>
    b820:	2800      	cmp	r0, #0
    b822:	d0e3      	beq.n	b7ec <send_bluetooth+0x20>
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b824:	4640      	mov	r0, r8
    b826:	f019 f994 	bl	24b52 <printk>
    b82a:	e7df      	b.n	b7ec <send_bluetooth+0x20>
	k_free(packet_data);
    b82c:	4628      	mov	r0, r5
    b82e:	f01e f89c 	bl	2996a <k_free>
}
    b832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b836:	2000      	movs	r0, #0
    b838:	b004      	add	sp, #16
    b83a:	4770      	bx	lr
    b83c:	0002bf51 	.word	0x0002bf51

0000b840 <send_protobuf_thread>:
{
    b840:	b510      	push	{r4, lr}
		k_sem_take(&send_proto, K_FOREVER);
    b842:	4c05      	ldr	r4, [pc, #20]	; (b858 <send_protobuf_thread+0x18>)
    b844:	f04f 32ff 	mov.w	r2, #4294967295
    b848:	f04f 33ff 	mov.w	r3, #4294967295
    b84c:	4620      	mov	r0, r4
    b84e:	f018 ff93 	bl	24778 <k_sem_take.constprop.0.isra.0>
		send_protobuf();
    b852:	f018 ffac 	bl	247ae <send_protobuf>
	while (1)
    b856:	e7f5      	b.n	b844 <send_protobuf_thread+0x4>
    b858:	20008b60 	.word	0x20008b60

0000b85c <configure_all_buttons>:
{
    b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b85e:	4c30      	ldr	r4, [pc, #192]	; (b920 <configure_all_buttons+0xc4>)
    b860:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b864:	4620      	mov	r0, r4
    b866:	f7ff fbe1 	bl	b02c <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    b86a:	4620      	mov	r0, r4
    b86c:	f7ff f994 	bl	ab98 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b870:	492c      	ldr	r1, [pc, #176]	; (b924 <configure_all_buttons+0xc8>)
    b872:	4b2d      	ldr	r3, [pc, #180]	; (b928 <configure_all_buttons+0xcc>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b874:	4c2d      	ldr	r4, [pc, #180]	; (b92c <configure_all_buttons+0xd0>)
    b876:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b878:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b87c:	4620      	mov	r0, r4
    b87e:	608b      	str	r3, [r1, #8]
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b880:	4d2b      	ldr	r5, [pc, #172]	; (b930 <configure_all_buttons+0xd4>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b882:	f018 ff7b 	bl	2477c <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b886:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b888:	4f2a      	ldr	r7, [pc, #168]	; (b934 <configure_all_buttons+0xd8>)
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b88a:	2217      	movs	r2, #23
    b88c:	4631      	mov	r1, r6
    b88e:	4628      	mov	r0, r5
    b890:	f019 f95f 	bl	24b52 <printk>
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b894:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b898:	4638      	mov	r0, r7
    b89a:	f7ff fbc7 	bl	b02c <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    b89e:	4638      	mov	r0, r7
    b8a0:	f7ff f97a 	bl	ab98 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b8a4:	4924      	ldr	r1, [pc, #144]	; (b938 <configure_all_buttons+0xdc>)
    b8a6:	4b25      	ldr	r3, [pc, #148]	; (b93c <configure_all_buttons+0xe0>)
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b8a8:	4620      	mov	r0, r4
    b8aa:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b8ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b8b0:	4f23      	ldr	r7, [pc, #140]	; (b940 <configure_all_buttons+0xe4>)
    b8b2:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b8b4:	f018 ff62 	bl	2477c <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b8b8:	2218      	movs	r2, #24
    b8ba:	4631      	mov	r1, r6
    b8bc:	4628      	mov	r0, r5
    b8be:	f019 f948 	bl	24b52 <printk>
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b8c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b8c6:	4638      	mov	r0, r7
    b8c8:	f7ff fbb0 	bl	b02c <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON3_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    b8cc:	4638      	mov	r0, r7
    b8ce:	f7ff f963 	bl	ab98 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b8d2:	491c      	ldr	r1, [pc, #112]	; (b944 <configure_all_buttons+0xe8>)
    b8d4:	4b1c      	ldr	r3, [pc, #112]	; (b948 <configure_all_buttons+0xec>)
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b8d6:	4620      	mov	r0, r4
    b8d8:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b8da:	f44f 7380 	mov.w	r3, #256	; 0x100
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b8de:	4f1b      	ldr	r7, [pc, #108]	; (b94c <configure_all_buttons+0xf0>)
    b8e0:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b8e2:	f018 ff4b 	bl	2477c <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b8e6:	2208      	movs	r2, #8
    b8e8:	4631      	mov	r1, r6
    b8ea:	4628      	mov	r0, r5
    b8ec:	f019 f931 	bl	24b52 <printk>
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b8f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b8f4:	4638      	mov	r0, r7
    b8f6:	f7ff fb99 	bl	b02c <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON4_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    b8fa:	4638      	mov	r0, r7
    b8fc:	f7ff f94c 	bl	ab98 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b900:	4913      	ldr	r1, [pc, #76]	; (b950 <configure_all_buttons+0xf4>)
    b902:	4b14      	ldr	r3, [pc, #80]	; (b954 <configure_all_buttons+0xf8>)
	gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b904:	4620      	mov	r0, r4
    b906:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b908:	f44f 7300 	mov.w	r3, #512	; 0x200
    b90c:	608b      	str	r3, [r1, #8]
    b90e:	f018 ff35 	bl	2477c <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b912:	4631      	mov	r1, r6
    b914:	4628      	mov	r0, r5
}
    b916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b91a:	2209      	movs	r2, #9
    b91c:	f019 b919 	b.w	24b52 <printk>
    b920:	0002ad38 	.word	0x0002ad38
    b924:	20009e7c 	.word	0x20009e7c
    b928:	0000af2d 	.word	0x0000af2d
    b92c:	0002a3d0 	.word	0x0002a3d0
    b930:	0002bf75 	.word	0x0002bf75
    b934:	0002ad30 	.word	0x0002ad30
    b938:	20009e70 	.word	0x20009e70
    b93c:	0000b3d1 	.word	0x0000b3d1
    b940:	0002ad28 	.word	0x0002ad28
    b944:	20009e64 	.word	0x20009e64
    b948:	0000b3b1 	.word	0x0000b3b1
    b94c:	0002ad20 	.word	0x0002ad20
    b950:	20009e58 	.word	0x20009e58
    b954:	0000b391 	.word	0x0000b391

0000b958 <configure_digital_inputs>:
{
    b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    b95a:	4c2e      	ldr	r4, [pc, #184]	; (ba14 <configure_digital_inputs+0xbc>)
    b95c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b960:	4620      	mov	r0, r4
    b962:	f7ff fb63 	bl	b02c <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 4 Value:%d \n", gpio_pin_get_dt(DIG_0_ADR));
    b966:	4620      	mov	r0, r4
    b968:	f7fe ffb2 	bl	a8d0 <gpio_pin_get_dt>
    b96c:	4601      	mov	r1, r0
    b96e:	482a      	ldr	r0, [pc, #168]	; (ba18 <configure_digital_inputs+0xc0>)
    b970:	f019 f8ef 	bl	24b52 <printk>
	gpio_pin_interrupt_configure_dt(DIG_0_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    b974:	4620      	mov	r0, r4
    b976:	f7ff f90f 	bl	ab98 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b97a:	4928      	ldr	r1, [pc, #160]	; (ba1c <configure_digital_inputs+0xc4>)
    b97c:	4b28      	ldr	r3, [pc, #160]	; (ba20 <configure_digital_inputs+0xc8>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    b97e:	4c29      	ldr	r4, [pc, #164]	; (ba24 <configure_digital_inputs+0xcc>)
    b980:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b982:	2310      	movs	r3, #16
    b984:	4620      	mov	r0, r4
    b986:	608b      	str	r3, [r1, #8]
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b988:	4d27      	ldr	r5, [pc, #156]	; (ba28 <configure_digital_inputs+0xd0>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    b98a:	f018 fef7 	bl	2477c <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b98e:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b990:	4f26      	ldr	r7, [pc, #152]	; (ba2c <configure_digital_inputs+0xd4>)
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b992:	2204      	movs	r2, #4
    b994:	4631      	mov	r1, r6
    b996:	4628      	mov	r0, r5
    b998:	f019 f8db 	bl	24b52 <printk>
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b99c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b9a0:	4638      	mov	r0, r7
    b9a2:	f7ff fb43 	bl	b02c <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 5 Value:%d \n", gpio_pin_get_dt(DIG_1_ADR));
    b9a6:	4638      	mov	r0, r7
    b9a8:	f7fe ff92 	bl	a8d0 <gpio_pin_get_dt>
    b9ac:	4601      	mov	r1, r0
    b9ae:	4820      	ldr	r0, [pc, #128]	; (ba30 <configure_digital_inputs+0xd8>)
    b9b0:	f019 f8cf 	bl	24b52 <printk>
	gpio_pin_interrupt_configure_dt(DIG_1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    b9b4:	4638      	mov	r0, r7
    b9b6:	f7ff f8ef 	bl	ab98 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b9ba:	491e      	ldr	r1, [pc, #120]	; (ba34 <configure_digital_inputs+0xdc>)
    b9bc:	4b1e      	ldr	r3, [pc, #120]	; (ba38 <configure_digital_inputs+0xe0>)
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b9be:	4f1f      	ldr	r7, [pc, #124]	; (ba3c <configure_digital_inputs+0xe4>)
    b9c0:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b9c2:	2320      	movs	r3, #32
	gpio_add_callback(DIG_1.port, DIG_1_CB);
    b9c4:	4620      	mov	r0, r4
    b9c6:	608b      	str	r3, [r1, #8]
    b9c8:	f018 fed8 	bl	2477c <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b9cc:	2205      	movs	r2, #5
    b9ce:	4631      	mov	r1, r6
    b9d0:	4628      	mov	r0, r5
    b9d2:	f019 f8be 	bl	24b52 <printk>
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b9d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b9da:	4638      	mov	r0, r7
    b9dc:	f7ff fb26 	bl	b02c <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 6 Value:%d \n", gpio_pin_get_dt(DIG_2_ADR));
    b9e0:	4638      	mov	r0, r7
    b9e2:	f7fe ff75 	bl	a8d0 <gpio_pin_get_dt>
    b9e6:	4601      	mov	r1, r0
    b9e8:	4815      	ldr	r0, [pc, #84]	; (ba40 <configure_digital_inputs+0xe8>)
    b9ea:	f019 f8b2 	bl	24b52 <printk>
	gpio_pin_interrupt_configure_dt(DIG_2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    b9ee:	4638      	mov	r0, r7
    b9f0:	f7ff f8d2 	bl	ab98 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b9f4:	4913      	ldr	r1, [pc, #76]	; (ba44 <configure_digital_inputs+0xec>)
    b9f6:	4b14      	ldr	r3, [pc, #80]	; (ba48 <configure_digital_inputs+0xf0>)
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    b9f8:	4620      	mov	r0, r4
    b9fa:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b9fc:	2340      	movs	r3, #64	; 0x40
    b9fe:	608b      	str	r3, [r1, #8]
    ba00:	f018 febc 	bl	2477c <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    ba04:	4631      	mov	r1, r6
    ba06:	4628      	mov	r0, r5
}
    ba08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    ba0c:	2206      	movs	r2, #6
    ba0e:	f019 b8a0 	b.w	24b52 <printk>
    ba12:	bf00      	nop
    ba14:	0002ad18 	.word	0x0002ad18
    ba18:	0002bf91 	.word	0x0002bf91
    ba1c:	20009e4c 	.word	0x20009e4c
    ba20:	0000a931 	.word	0x0000a931
    ba24:	0002a3b8 	.word	0x0002a3b8
    ba28:	0002bfa9 	.word	0x0002bfa9
    ba2c:	0002ad10 	.word	0x0002ad10
    ba30:	0002bfcc 	.word	0x0002bfcc
    ba34:	20009e40 	.word	0x20009e40
    ba38:	0000a955 	.word	0x0000a955
    ba3c:	0002ad08 	.word	0x0002ad08
    ba40:	0002bfe4 	.word	0x0002bfe4
    ba44:	20009e34 	.word	0x20009e34
    ba48:	0000a979 	.word	0x0000a979

0000ba4c <configure_led>:
{
    ba4c:	b508      	push	{r3, lr}
	gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    ba4e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    ba52:	480a      	ldr	r0, [pc, #40]	; (ba7c <configure_led+0x30>)
    ba54:	f7ff faea 	bl	b02c <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    ba58:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    ba5c:	4808      	ldr	r0, [pc, #32]	; (ba80 <configure_led+0x34>)
    ba5e:	f7ff fae5 	bl	b02c <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    ba62:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    ba66:	4807      	ldr	r0, [pc, #28]	; (ba84 <configure_led+0x38>)
    ba68:	f7ff fae0 	bl	b02c <gpio_pin_configure_dt.isra.0>
}
    ba6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    ba70:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    ba74:	4804      	ldr	r0, [pc, #16]	; (ba88 <configure_led+0x3c>)
    ba76:	f7ff bad9 	b.w	b02c <gpio_pin_configure_dt.isra.0>
    ba7a:	bf00      	nop
    ba7c:	0002ad00 	.word	0x0002ad00
    ba80:	0002acf8 	.word	0x0002acf8
    ba84:	0002acf0 	.word	0x0002acf0
    ba88:	0002ace8 	.word	0x0002ace8

0000ba8c <turn_off_all_leds>:
{
    ba8c:	b508      	push	{r3, lr}
	gpio_pin_set_dt(LED1, OFF);
    ba8e:	2100      	movs	r1, #0
    ba90:	4808      	ldr	r0, [pc, #32]	; (bab4 <turn_off_all_leds+0x28>)
    ba92:	f7ff fa19 	bl	aec8 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED2, OFF);
    ba96:	2100      	movs	r1, #0
    ba98:	4807      	ldr	r0, [pc, #28]	; (bab8 <turn_off_all_leds+0x2c>)
    ba9a:	f7ff fa15 	bl	aec8 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED3, OFF);
    ba9e:	2100      	movs	r1, #0
    baa0:	4806      	ldr	r0, [pc, #24]	; (babc <turn_off_all_leds+0x30>)
    baa2:	f7ff fa11 	bl	aec8 <gpio_pin_set_dt.isra.0>
}
    baa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_set_dt(LED4, OFF);
    baaa:	2100      	movs	r1, #0
    baac:	4804      	ldr	r0, [pc, #16]	; (bac0 <turn_off_all_leds+0x34>)
    baae:	f7ff ba0b 	b.w	aec8 <gpio_pin_set_dt.isra.0>
    bab2:	bf00      	nop
    bab4:	0002ad00 	.word	0x0002ad00
    bab8:	0002acf8 	.word	0x0002acf8
    babc:	0002acf0 	.word	0x0002acf0
    bac0:	0002ace8 	.word	0x0002ace8

0000bac4 <configure_adc>:
{
    bac4:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bac6:	2500      	movs	r5, #0
    bac8:	4c12      	ldr	r4, [pc, #72]	; (bb14 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev))
    baca:	f854 0c06 	ldr.w	r0, [r4, #-6]
    bace:	f01d fd26 	bl	2951e <z_device_is_ready>
    bad2:	b920      	cbnz	r0, bade <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    bad4:	4810      	ldr	r0, [pc, #64]	; (bb18 <configure_adc+0x54>)
}
    bad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    bada:	f019 b83a 	b.w	24b52 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    bade:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    bae2:	b16b      	cbz	r3, bb00 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    bae4:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    bae8:	6883      	ldr	r3, [r0, #8]
    baea:	4621      	mov	r1, r4
    baec:	681b      	ldr	r3, [r3, #0]
    baee:	4798      	blx	r3
		if (err < 0)
    baf0:	1e02      	subs	r2, r0, #0
    baf2:	da08      	bge.n	bb06 <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    baf4:	4629      	mov	r1, r5
}
    baf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    bafa:	4808      	ldr	r0, [pc, #32]	; (bb1c <configure_adc+0x58>)
    bafc:	f019 b829 	b.w	24b52 <printk>
		return -ENOTSUP;
    bb00:	f06f 0285 	mvn.w	r2, #133	; 0x85
    bb04:	e7f6      	b.n	baf4 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bb06:	3501      	adds	r5, #1
    bb08:	2d06      	cmp	r5, #6
    bb0a:	f104 0414 	add.w	r4, r4, #20
    bb0e:	d1dc      	bne.n	baca <configure_adc+0x6>
}
    bb10:	bd38      	pop	{r3, r4, r5, pc}
    bb12:	bf00      	nop
    bb14:	0002ac76 	.word	0x0002ac76
    bb18:	0002bffc 	.word	0x0002bffc
    bb1c:	0002c01d 	.word	0x0002c01d

0000bb20 <main>:
{
    bb20:	b570      	push	{r4, r5, r6, lr}
    bb22:	b08c      	sub	sp, #48	; 0x30
	return z_impl_k_mutex_init(mutex);
    bb24:	4868      	ldr	r0, [pc, #416]	; (bcc8 <main+0x1a8>)
    bb26:	f01d fd53 	bl	295d0 <z_impl_k_mutex_init>
	configure_led();
    bb2a:	f7ff ff8f 	bl	ba4c <configure_led>
	turn_off_all_leds();
    bb2e:	f7ff ffad 	bl	ba8c <turn_off_all_leds>
	configure_all_buttons();
    bb32:	f7ff fe93 	bl	b85c <configure_all_buttons>
	configure_digital_inputs();
    bb36:	f7ff ff0f 	bl	b958 <configure_digital_inputs>
	configure_adc();
    bb3a:	f7ff ffc3 	bl	bac4 <configure_adc>
    bb3e:	4d63      	ldr	r5, [pc, #396]	; (bccc <main+0x1ac>)
    bb40:	4628      	mov	r0, r5
    bb42:	f01d fcec 	bl	2951e <z_device_is_ready>
	if (!device_is_ready(uart))
    bb46:	b1d8      	cbz	r0, bb80 <main+0x60>
	rx = k_malloc(sizeof(*rx));
    bb48:	2088      	movs	r0, #136	; 0x88
    bb4a:	f01d ff15 	bl	29978 <k_malloc>
	if (rx)
    bb4e:	4604      	mov	r4, r0
    bb50:	b1b0      	cbz	r0, bb80 <main+0x60>
		rx->len = 0;
    bb52:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    bb54:	495e      	ldr	r1, [pc, #376]	; (bcd0 <main+0x1b0>)
		rx->len = 0;
    bb56:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
	k_work_init_delayable(&uart_work, uart_work_handler);
    bb5a:	485e      	ldr	r0, [pc, #376]	; (bcd4 <main+0x1b4>)
    bb5c:	f014 fe74 	bl	20848 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    bb60:	68ab      	ldr	r3, [r5, #8]
    bb62:	681b      	ldr	r3, [r3, #0]
    bb64:	b973      	cbnz	r3, bb84 <main+0x64>
		k_free(rx);
    bb66:	4620      	mov	r0, r4
    bb68:	f01d feff 	bl	2996a <k_free>
		LOG_ERR("Cannot initialize UART callback");
    bb6c:	4b5a      	ldr	r3, [pc, #360]	; (bcd8 <main+0x1b8>)
    bb6e:	2201      	movs	r2, #1
    bb70:	9302      	str	r3, [sp, #8]
    bb72:	2300      	movs	r3, #0
    bb74:	4959      	ldr	r1, [pc, #356]	; (bcdc <main+0x1bc>)
    bb76:	4618      	mov	r0, r3
    bb78:	e9cd 3300 	strd	r3, r3, [sp]
    bb7c:	f018 fddd 	bl	2473a <z_log_msg_runtime_create.constprop.0>
		error();
    bb80:	f018 fe2b 	bl	247da <error>
	return api->callback_set(dev, callback, user_data);
    bb84:	4632      	mov	r2, r6
    bb86:	4628      	mov	r0, r5
    bb88:	4955      	ldr	r1, [pc, #340]	; (bce0 <main+0x1c0>)
    bb8a:	4798      	blx	r3
	if (err)
    bb8c:	2800      	cmp	r0, #0
    bb8e:	d1ea      	bne.n	bb66 <main+0x46>
	tx = k_malloc(sizeof(*tx));
    bb90:	2088      	movs	r0, #136	; 0x88
    bb92:	f01d fef1 	bl	29978 <k_malloc>
	if (tx)
    bb96:	4606      	mov	r6, r0
    bb98:	2800      	cmp	r0, #0
    bb9a:	d0f1      	beq.n	bb80 <main+0x60>
		pos = snprintf(tx->data, sizeof(tx->data),
    bb9c:	1d03      	adds	r3, r0, #4
    bb9e:	4618      	mov	r0, r3
    bba0:	4950      	ldr	r1, [pc, #320]	; (bce4 <main+0x1c4>)
    bba2:	f01e f86d 	bl	29c80 <strcpy>
		tx->len = pos;
    bba6:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bba8:	4601      	mov	r1, r0
		tx->len = pos;
    bbaa:	f8a6 2086 	strh.w	r2, [r6, #134]	; 0x86
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bbae:	4628      	mov	r0, r5
    bbb0:	f018 fdda 	bl	24768 <uart_tx.constprop.0>
	if (err)
    bbb4:	4601      	mov	r1, r0
    bbb6:	b118      	cbz	r0, bbc0 <main+0xa0>
		printf("Cannot display welcome message (err: %d)", err);
    bbb8:	484b      	ldr	r0, [pc, #300]	; (bce8 <main+0x1c8>)
    bbba:	f017 fe47 	bl	2384c <iprintf>
	if (err)
    bbbe:	e7df      	b.n	bb80 <main+0x60>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_WAIT_FOR_RX);
    bbc0:	1d21      	adds	r1, r4, #4
    bbc2:	4628      	mov	r0, r5
    bbc4:	f018 fdc8 	bl	24758 <uart_rx_enable.constprop.0>
	if (err)
    bbc8:	4604      	mov	r4, r0
    bbca:	2800      	cmp	r0, #0
    bbcc:	d1d8      	bne.n	bb80 <main+0x60>
	buf_extra = k_malloc(sizeof(*buf_extra));
    bbce:	2088      	movs	r0, #136	; 0x88
    bbd0:	f01d fed2 	bl	29978 <k_malloc>
    bbd4:	4b45      	ldr	r3, [pc, #276]	; (bcec <main+0x1cc>)
    bbd6:	6018      	str	r0, [r3, #0]
    bbd8:	4e45      	ldr	r6, [pc, #276]	; (bcf0 <main+0x1d0>)
    bbda:	4630      	mov	r0, r6
    bbdc:	f01d fc9f 	bl	2951e <z_device_is_ready>
	if (!device_is_ready(uart_2))
    bbe0:	2800      	cmp	r0, #0
    bbe2:	d0cd      	beq.n	bb80 <main+0x60>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    bbe4:	2088      	movs	r0, #136	; 0x88
    bbe6:	f01d fec7 	bl	29978 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    bbea:	4942      	ldr	r1, [pc, #264]	; (bcf4 <main+0x1d4>)
	rx_uart2->len = 0;
    bbec:	f8a0 4086 	strh.w	r4, [r0, #134]	; 0x86
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    bbf0:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    bbf2:	4841      	ldr	r0, [pc, #260]	; (bcf8 <main+0x1d8>)
    bbf4:	f014 fe28 	bl	20848 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    bbf8:	68b3      	ldr	r3, [r6, #8]
    bbfa:	681b      	ldr	r3, [r3, #0]
    bbfc:	b11b      	cbz	r3, bc06 <main+0xe6>
	return api->callback_set(dev, callback, user_data);
    bbfe:	4622      	mov	r2, r4
    bc00:	4630      	mov	r0, r6
    bc02:	493e      	ldr	r1, [pc, #248]	; (bcfc <main+0x1dc>)
    bc04:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), UART_WAIT_FOR_RX);
    bc06:	483a      	ldr	r0, [pc, #232]	; (bcf0 <main+0x1d0>)
    bc08:	1d29      	adds	r1, r5, #4
    bc0a:	f018 fda5 	bl	24758 <uart_rx_enable.constprop.0>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    bc0e:	483c      	ldr	r0, [pc, #240]	; (bd00 <main+0x1e0>)
    bc10:	f008 ffbe 	bl	14b90 <bt_conn_auth_cb_register>
		if (err)
    bc14:	b128      	cbz	r0, bc22 <main+0x102>
			printk("Failed to register authorization callbacks.\n");
    bc16:	483b      	ldr	r0, [pc, #236]	; (bd04 <main+0x1e4>)
}
    bc18:	b00c      	add	sp, #48	; 0x30
    bc1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    bc1e:	f018 bf98 	b.w	24b52 <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    bc22:	4839      	ldr	r0, [pc, #228]	; (bd08 <main+0x1e8>)
    bc24:	f008 ffce 	bl	14bc4 <bt_conn_auth_info_cb_register>
		if (err)
    bc28:	b108      	cbz	r0, bc2e <main+0x10e>
			printk("Failed to register authorization info callbacks.\n");
    bc2a:	4838      	ldr	r0, [pc, #224]	; (bd0c <main+0x1ec>)
    bc2c:	e7f4      	b.n	bc18 <main+0xf8>
	err = bt_enable(NULL);
    bc2e:	f006 fe61 	bl	128f4 <bt_enable>
	if (err)
    bc32:	2800      	cmp	r0, #0
    bc34:	d1a4      	bne.n	bb80 <main+0x60>
	printf("Bluetooth initialized \n\r");
    bc36:	4836      	ldr	r0, [pc, #216]	; (bd10 <main+0x1f0>)
    bc38:	f017 fe08 	bl	2384c <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    bc3c:	4835      	ldr	r0, [pc, #212]	; (bd14 <main+0x1f4>)
    bc3e:	f017 fe05 	bl	2384c <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    bc42:	4835      	ldr	r0, [pc, #212]	; (bd18 <main+0x1f8>)
    bc44:	f017 fe02 	bl	2384c <iprintf>
	z_impl_k_sem_give(sem);
    bc48:	4834      	ldr	r0, [pc, #208]	; (bd1c <main+0x1fc>)
    bc4a:	f014 f979 	bl	1ff40 <z_impl_k_sem_give>
	err = bt_nus_init(&nus_cb);
    bc4e:	4834      	ldr	r0, [pc, #208]	; (bd20 <main+0x200>)
    bc50:	f004 f8d8 	bl	fe04 <bt_nus_init>
	if (err)
    bc54:	4601      	mov	r1, r0
    bc56:	b128      	cbz	r0, bc64 <main+0x144>
		printf("Failed to initialize UART service (err: %d)", err);
    bc58:	4832      	ldr	r0, [pc, #200]	; (bd24 <main+0x204>)
}
    bc5a:	b00c      	add	sp, #48	; 0x30
    bc5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    bc60:	f017 bdf4 	b.w	2384c <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    bc64:	4d30      	ldr	r5, [pc, #192]	; (bd28 <main+0x208>)
    bc66:	ac07      	add	r4, sp, #28
    bc68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    bc6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    bc6c:	682b      	ldr	r3, [r5, #0]
    bc6e:	2501      	movs	r5, #1
    bc70:	6023      	str	r3, [r4, #0]
    bc72:	2202      	movs	r2, #2
    bc74:	4b2d      	ldr	r3, [pc, #180]	; (bd2c <main+0x20c>)
    bc76:	492e      	ldr	r1, [pc, #184]	; (bd30 <main+0x210>)
    bc78:	9500      	str	r5, [sp, #0]
    bc7a:	a807      	add	r0, sp, #28
    bc7c:	f007 fd2e 	bl	136dc <bt_le_adv_start>
	if (err)
    bc80:	4604      	mov	r4, r0
    bc82:	b128      	cbz	r0, bc90 <main+0x170>
		printf("Advertising failed to start (err %d)", err);
    bc84:	4601      	mov	r1, r0
    bc86:	482b      	ldr	r0, [pc, #172]	; (bd34 <main+0x214>)
    bc88:	f017 fde0 	bl	2384c <iprintf>
}
    bc8c:	b00c      	add	sp, #48	; 0x30
    bc8e:	bd70      	pop	{r4, r5, r6, pc}
	flag = 1; // print ad values once
    bc90:	4b29      	ldr	r3, [pc, #164]	; (bd38 <main+0x218>)
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    bc92:	f242 6067 	movw	r0, #9831	; 0x2667
    bc96:	2100      	movs	r1, #0
    bc98:	601d      	str	r5, [r3, #0]
    bc9a:	f018 fd75 	bl	24788 <k_sleep.isra.0>
	flash_init();
    bc9e:	f7ff fd13 	bl	b6c8 <flash_init>
    bca2:	4e26      	ldr	r6, [pc, #152]	; (bd3c <main+0x21c>)
    bca4:	ad05      	add	r5, sp, #20
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    bca6:	3401      	adds	r4, #1
    bca8:	e896 0003 	ldmia.w	r6, {r0, r1}
    bcac:	e885 0003 	stmia.w	r5, {r0, r1}
	gpio_pin_set_dt(&led, value);
    bcb0:	4628      	mov	r0, r5
    bcb2:	f004 0101 	and.w	r1, r4, #1
    bcb6:	f7ff f907 	bl	aec8 <gpio_pin_set_dt.isra.0>
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    bcba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bcbe:	2100      	movs	r1, #0
    bcc0:	f018 fd62 	bl	24788 <k_sleep.isra.0>
	for (;;)
    bcc4:	e7ef      	b.n	bca6 <main+0x186>
    bcc6:	bf00      	nop
    bcc8:	20009e20 	.word	0x20009e20
    bccc:	0002a430 	.word	0x0002a430
    bcd0:	0000aaad 	.word	0x0000aaad
    bcd4:	200091e0 	.word	0x200091e0
    bcd8:	0002c03f 	.word	0x0002c03f
    bcdc:	0002aa50 	.word	0x0002aa50
    bce0:	0000b209 	.word	0x0000b209
    bce4:	0002c05f 	.word	0x0002c05f
    bce8:	0002c086 	.word	0x0002c086
    bcec:	20009dd0 	.word	0x20009dd0
    bcf0:	0002a418 	.word	0x0002a418
    bcf4:	0000aa59 	.word	0x0000aa59
    bcf8:	200091b0 	.word	0x200091b0
    bcfc:	0000b629 	.word	0x0000b629
    bd00:	200083cc 	.word	0x200083cc
    bd04:	0002c0af 	.word	0x0002c0af
    bd08:	200083bc 	.word	0x200083bc
    bd0c:	0002c0dc 	.word	0x0002c0dc
    bd10:	0002c10e 	.word	0x0002c10e
    bd14:	0002c127 	.word	0x0002c127
    bd18:	0002c148 	.word	0x0002c148
    bd1c:	20008ad0 	.word	0x20008ad0
    bd20:	200083b0 	.word	0x200083b0
    bd24:	0002c171 	.word	0x0002c171
    bd28:	0002aaac 	.word	0x0002aaac
    bd2c:	0002ac58 	.word	0x0002ac58
    bd30:	0002ac60 	.word	0x0002ac60
    bd34:	0002c19d 	.word	0x0002c19d
    bd38:	20009e1c 	.word	0x20009e1c
    bd3c:	0002acf8 	.word	0x0002acf8

0000bd40 <adc_raw_to_millivolts_dt.constprop.0.isra.0>:
	if (!spec->channel_cfg_dt_node_exists) {
    bd40:	4b10      	ldr	r3, [pc, #64]	; (bd84 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x44>)
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    bd42:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    bd44:	795a      	ldrb	r2, [r3, #5]
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    bd46:	4605      	mov	r5, r0
	if (!spec->channel_cfg_dt_node_exists) {
    bd48:	b1d2      	cbz	r2, bd80 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bd4a:	79da      	ldrb	r2, [r3, #7]
	resolution = spec->resolution;
    bd4c:	7c1c      	ldrb	r4, [r3, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bd4e:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
    bd50:	bf09      	itett	eq
    bd52:	681a      	ldreq	r2, [r3, #0]
		vref_mv = spec->vref_mv;
    bd54:	89d9      	ldrhne	r1, [r3, #14]
	return api->ref_internal;
    bd56:	6892      	ldreq	r2, [r2, #8]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bd58:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
    bd5a:	7a9a      	ldrb	r2, [r3, #10]
    bd5c:	0692      	lsls	r2, r2, #26
	int32_t adc_mv = *valp * ref_mv;
    bd5e:	6802      	ldr	r2, [r0, #0]
		resolution -= 1U;
    bd60:	bf48      	it	mi
    bd62:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int32_t adc_mv = *valp * ref_mv;
    bd66:	fb01 f202 	mul.w	r2, r1, r2
	int ret = adc_gain_invert(gain, &adc_mv);
    bd6a:	7998      	ldrb	r0, [r3, #6]
    bd6c:	a901      	add	r1, sp, #4
		resolution -= 1U;
    bd6e:	bf48      	it	mi
    bd70:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    bd72:	9201      	str	r2, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    bd74:	f00d fcd4 	bl	19720 <adc_gain_invert>
	if (ret == 0) {
    bd78:	b910      	cbnz	r0, bd80 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
		*valp = (adc_mv >> resolution);
    bd7a:	9b01      	ldr	r3, [sp, #4]
    bd7c:	4123      	asrs	r3, r4
    bd7e:	602b      	str	r3, [r5, #0]
}
    bd80:	b003      	add	sp, #12
    bd82:	bd30      	pop	{r4, r5, pc}
    bd84:	0002ac70 	.word	0x0002ac70

0000bd88 <flash_button2_counter>:
void flash_button2_counter(void){
    bd88:	b510      	push	{r4, lr}
    button2_counter++;
    bd8a:	4c0d      	ldr	r4, [pc, #52]	; (bdc0 <flash_button2_counter+0x38>)
	(void)nvs_write(
    bd8c:	2101      	movs	r1, #1
    button2_counter++;
    bd8e:	6823      	ldr	r3, [r4, #0]
	(void)nvs_write(
    bd90:	4622      	mov	r2, r4
    button2_counter++;
    bd92:	3301      	adds	r3, #1
    bd94:	6023      	str	r3, [r4, #0]
	(void)nvs_write(
    bd96:	480b      	ldr	r0, [pc, #44]	; (bdc4 <flash_button2_counter+0x3c>)
    bd98:	2304      	movs	r3, #4
    bd9a:	f003 f963 	bl	f064 <nvs_write>
    rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    bd9e:	2304      	movs	r3, #4
    bda0:	4622      	mov	r2, r4
    bda2:	2101      	movs	r1, #1
    bda4:	4807      	ldr	r0, [pc, #28]	; (bdc4 <flash_button2_counter+0x3c>)
    bda6:	f019 fac3 	bl	25330 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    bdaa:	2800      	cmp	r0, #0
    bdac:	dd06      	ble.n	bdbc <flash_button2_counter+0x34>
		printk("Id: %d, button2_counter: %d\n",
    bdae:	6822      	ldr	r2, [r4, #0]
    bdb0:	2101      	movs	r1, #1
}
    bdb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Id: %d, button2_counter: %d\n",
    bdb6:	4804      	ldr	r0, [pc, #16]	; (bdc8 <flash_button2_counter+0x40>)
    bdb8:	f018 becb 	b.w	24b52 <printk>
}
    bdbc:	bd10      	pop	{r4, pc}
    bdbe:	bf00      	nop
    bdc0:	20009ddc 	.word	0x20009ddc
    bdc4:	20009dec 	.word	0x20009dec
    bdc8:	0002beb5 	.word	0x0002beb5

0000bdcc <time_stamp_function>:
uint32_t time_stamp_function(void){
    bdcc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    bdce:	f01d fcdd 	bl	2978c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    bdd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bdd6:	fba0 0302 	umull	r0, r3, r0, r2
    bdda:	fb02 3101 	mla	r1, r2, r1, r3
    bdde:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    bde0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bde4:	2300      	movs	r3, #0
    bde6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    bdea:	0bc9      	lsrs	r1, r1, #15
    bdec:	f7fd f830 	bl	8e50 <__aeabi_ldivmod>
    bdf0:	4603      	mov	r3, r0
}
    bdf2:	4801      	ldr	r0, [pc, #4]	; (bdf8 <time_stamp_function+0x2c>)
    bdf4:	4418      	add	r0, r3
    bdf6:	bd08      	pop	{r3, pc}
    bdf8:	61cf9980 	.word	0x61cf9980

0000bdfc <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    bdfc:	b538      	push	{r3, r4, r5, lr}
    bdfe:	460d      	mov	r5, r1
    be00:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    be02:	f7ff ffe3 	bl	bdcc <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    be06:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    be08:	4b04      	ldr	r3, [pc, #16]	; (be1c <values_of_digital_sensor+0x20>)
    be0a:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    be0e:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    be12:	e9c4 0200 	strd	r0, r2, [r4]
}
    be16:	4620      	mov	r0, r4
    be18:	bd38      	pop	{r3, r4, r5, pc}
    be1a:	bf00      	nop
    be1c:	2002156c 	.word	0x2002156c

0000be20 <read_memory>:
_Circular_Buffer read_memory(uint32_t Pos){
    be20:	b570      	push	{r4, r5, r6, lr}
    be22:	4606      	mov	r6, r0
    be24:	460d      	mov	r5, r1
    buf = k_malloc(size);
    be26:	2040      	movs	r0, #64	; 0x40
    be28:	f01d fda6 	bl	29978 <k_malloc>
    uint16_t Id= Pos + BASE_DATA_BUFFER;
    be2c:	f505 717a 	add.w	r1, r5, #1000	; 0x3e8
    err=nvs_read(&fs, Id, buf, size);
    be30:	4602      	mov	r2, r0
    be32:	2340      	movs	r3, #64	; 0x40
    buf = k_malloc(size);
    be34:	4604      	mov	r4, r0
    err=nvs_read(&fs, Id, buf, size);
    be36:	b289      	uxth	r1, r1
    be38:	4809      	ldr	r0, [pc, #36]	; (be60 <read_memory+0x40>)
    be3a:	f019 fa79 	bl	25330 <nvs_read>
    return *buf;
    be3e:	4635      	mov	r5, r6
    printf("Result read=%d bytes\n",err);
    be40:	b281      	uxth	r1, r0
    be42:	4808      	ldr	r0, [pc, #32]	; (be64 <read_memory+0x44>)
    be44:	f017 fd02 	bl	2384c <iprintf>
    return *buf;
    be48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    be4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    be4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    be4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    be50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    be52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    be54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    be58:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    be5c:	4630      	mov	r0, r6
    be5e:	bd70      	pop	{r4, r5, r6, pc}
    be60:	20009dec 	.word	0x20009dec
    be64:	0002c265 	.word	0x0002c265

0000be68 <save_memory>:
void save_memory(uint32_t Pos){
    be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    printf("Size of structure=%d bytes\n",size);
    be6a:	2140      	movs	r1, #64	; 0x40
void save_memory(uint32_t Pos){
    be6c:	4606      	mov	r6, r0
    printf("Size of structure=%d bytes\n",size);
    be6e:	4818      	ldr	r0, [pc, #96]	; (bed0 <save_memory+0x68>)
    be70:	f017 fcec 	bl	2384c <iprintf>
    buf = k_malloc(size);
    be74:	2040      	movs	r0, #64	; 0x40
    be76:	f01d fd7f 	bl	29978 <k_malloc>
    *buf=C_Buffer[Pos];
    be7a:	4605      	mov	r5, r0
    buf = k_malloc(size);
    be7c:	4607      	mov	r7, r0
    *buf=C_Buffer[Pos];
    be7e:	4c15      	ldr	r4, [pc, #84]	; (bed4 <save_memory+0x6c>)
    be80:	eb04 1486 	add.w	r4, r4, r6, lsl #6
    be84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    be86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    be88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    be8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    be8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    be8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    be90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    err=nvs_write(&fs, id, buf,size);
    be94:	4c10      	ldr	r4, [pc, #64]	; (bed8 <save_memory+0x70>)
    *buf=C_Buffer[Pos];
    be96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    printf("Position %d\n",Pos); 
    be9a:	4631      	mov	r1, r6
    be9c:	480f      	ldr	r0, [pc, #60]	; (bedc <save_memory+0x74>)
    be9e:	f017 fcd5 	bl	2384c <iprintf>
    uint16_t id= Pos + BASE_DATA_BUFFER;
    bea2:	f506 717a 	add.w	r1, r6, #1000	; 0x3e8
    err=nvs_write(&fs, id, buf,size);
    bea6:	463a      	mov	r2, r7
    bea8:	2340      	movs	r3, #64	; 0x40
    beaa:	4620      	mov	r0, r4
    beac:	b289      	uxth	r1, r1
    beae:	f003 f8d9 	bl	f064 <nvs_write>
    printf("Result=%d bytes saved\n",err);
    beb2:	b281      	uxth	r1, r0
    beb4:	480a      	ldr	r0, [pc, #40]	; (bee0 <save_memory+0x78>)
    beb6:	f017 fcc9 	bl	2384c <iprintf>
    (void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    beba:	2304      	movs	r3, #4
    bebc:	4620      	mov	r0, r4
    bebe:	2102      	movs	r1, #2
    bec0:	4a08      	ldr	r2, [pc, #32]	; (bee4 <save_memory+0x7c>)
    bec2:	f003 f8cf 	bl	f064 <nvs_write>
    k_free(buf);
    bec6:	4638      	mov	r0, r7
}
    bec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    k_free(buf);
    becc:	f01d bd4d 	b.w	2996a <k_free>
    bed0:	0002c27b 	.word	0x0002c27b
    bed4:	2000a754 	.word	0x2000a754
    bed8:	20009dec 	.word	0x20009dec
    bedc:	0002c297 	.word	0x0002c297
    bee0:	0002c2a4 	.word	0x0002c2a4
    bee4:	20020f54 	.word	0x20020f54

0000bee8 <feed_circular_buffer>:
void feed_circular_buffer(void){
    bee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    beec:	4d31      	ldr	r5, [pc, #196]	; (bfb4 <feed_circular_buffer+0xcc>)
    beee:	4b32      	ldr	r3, [pc, #200]	; (bfb8 <feed_circular_buffer+0xd0>)
    bef0:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bef2:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bef6:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bef8:	d259      	bcs.n	bfae <feed_circular_buffer+0xc6>
  gnss_return_value.timestamp=time_stamp_function();
    befa:	f7ff ff67 	bl	bdcc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    befe:	f04f 0800 	mov.w	r8, #0
    bf02:	4c2e      	ldr	r4, [pc, #184]	; (bfbc <feed_circular_buffer+0xd4>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bf04:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bf06:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bf0a:	e9c6 8802 	strd	r8, r8, [r6, #8]
    bf0e:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    bf10:	f7ff ff5c 	bl	bdcc <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    bf14:	4e2a      	ldr	r6, [pc, #168]	; (bfc0 <feed_circular_buffer+0xd8>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bf16:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    bf1a:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bf1e:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bf20:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    bf24:	f7ff ff52 	bl	bdcc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    bf28:	682b      	ldr	r3, [r5, #0]
    bf2a:	8872      	ldrh	r2, [r6, #2]
    bf2c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bf30:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    bf32:	f7ff ff4b 	bl	bdcc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    bf36:	682b      	ldr	r3, [r5, #0]
    bf38:	88b2      	ldrh	r2, [r6, #4]
    bf3a:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bf3e:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    bf40:	f7ff ff44 	bl	bdcc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    bf44:	682b      	ldr	r3, [r5, #0]
    bf46:	88f2      	ldrh	r2, [r6, #6]
    bf48:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bf4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    bf4e:	f7ff ff3d 	bl	bdcc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    bf52:	682b      	ldr	r3, [r5, #0]
    bf54:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bf58:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    bf5a:	f7ff ff37 	bl	bdcc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    bf5e:	682b      	ldr	r3, [r5, #0]
    bf60:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bf64:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    bf66:	f7ff ff31 	bl	bdcc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bf6a:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bf6c:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bf6e:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bf72:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bf74:	4638      	mov	r0, r7
    bf76:	f7ff ff41 	bl	bdfc <values_of_digital_sensor>
    bf7a:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bf7e:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bf80:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bf82:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bf86:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bf8a:	3438      	adds	r4, #56	; 0x38
    bf8c:	2101      	movs	r1, #1
    bf8e:	4638      	mov	r0, r7
    bf90:	f7ff ff34 	bl	bdfc <values_of_digital_sensor>
    bf94:	e897 0003 	ldmia.w	r7, {r0, r1}
    bf98:	e884 0003 	stmia.w	r4, {r0, r1}
     save_memory(C_Buffer_Free_Position);
    bf9c:	6828      	ldr	r0, [r5, #0]
    bf9e:	f7ff ff63 	bl	be68 <save_memory>
     C_Buffer_Free_Position++;
    bfa2:	682b      	ldr	r3, [r5, #0]
    bfa4:	3301      	adds	r3, #1
    bfa6:	602b      	str	r3, [r5, #0]
}
    bfa8:	b002      	add	sp, #8
    bfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfae:	2300      	movs	r3, #0
    bfb0:	e7f9      	b.n	bfa6 <feed_circular_buffer+0xbe>
    bfb2:	bf00      	nop
    bfb4:	20020f58 	.word	0x20020f58
    bfb8:	20020f54 	.word	0x20020f54
    bfbc:	2000a754 	.word	0x2000a754
    bfc0:	2002157c 	.word	0x2002157c

0000bfc4 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    bfc6:	4b1c      	ldr	r3, [pc, #112]	; (c038 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    bfc8:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    bfca:	6818      	ldr	r0, [r3, #0]
    bfcc:	889b      	ldrh	r3, [r3, #4]
    bfce:	9000      	str	r0, [sp, #0]
    bfd0:	2218      	movs	r2, #24
    bfd2:	2100      	movs	r1, #0
    bfd4:	f10d 0006 	add.w	r0, sp, #6
    bfd8:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    bfdc:	2601      	movs	r6, #1
   char tag[30]="10203";
    bfde:	f01d fd1a 	bl	29a16 <memset>
     msg.positions.timestamp=1;
    bfe2:	2300      	movs	r3, #0
    msg.timestamp=0;
    bfe4:	4c15      	ldr	r4, [pc, #84]	; (c03c <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    bfe6:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    bfe8:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    bfec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bff0:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    bff2:	4b13      	ldr	r3, [pc, #76]	; (c040 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bff4:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    bff6:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    bff8:	230b      	movs	r3, #11
    bffa:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    bffc:	4b11      	ldr	r3, [pc, #68]	; (c044 <fill_fields_to_test+0x80>)
    bffe:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    c000:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    c002:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    c004:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    c006:	7766      	strb	r6, [r4, #29]
    c008:	f104 001e 	add.w	r0, r4, #30
    c00c:	f01d fe38 	bl	29c80 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    c010:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    c014:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    c018:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    c01c:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    c01e:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    c022:	f7fc fd71 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    c026:	3501      	adds	r5, #1
    c028:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    c02a:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    c02c:	f104 0424 	add.w	r4, r4, #36	; 0x24
    c030:	d1e6      	bne.n	c000 <fill_fields_to_test+0x3c>
}
    c032:	4802      	ldr	r0, [pc, #8]	; (c03c <fill_fields_to_test+0x78>)
    c034:	b009      	add	sp, #36	; 0x24
    c036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c038:	0002ab08 	.word	0x0002ab08
    c03c:	2000a664 	.word	0x2000a664
    c040:	40400000 	.word	0x40400000
    c044:	41400000 	.word	0x41400000

0000c048 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    c048:	b5f0      	push	{r4, r5, r6, r7, lr}
    c04a:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    c04e:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    c050:	f7ff ffb8 	bl	bfc4 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    c054:	2202      	movs	r2, #2
    c056:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    c05a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    c05e:	4a3a      	ldr	r2, [pc, #232]	; (c148 <send_array_dd_v0+0x100>)
    c060:	ae0c      	add	r6, sp, #48	; 0x30
    c062:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    c064:	4631      	mov	r1, r6
    c066:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    c068:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    c06a:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    c06c:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    c06e:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    c070:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    c072:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    c074:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    c076:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    c078:	f101 010c 	add.w	r1, r1, #12
    c07c:	d1f8      	bne.n	c070 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    c07e:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    c080:	6958      	ldr	r0, [r3, #20]
    c082:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    c084:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    c086:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    c088:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    c08c:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    c090:	f101 0108 	add.w	r1, r1, #8
    c094:	d1f6      	bne.n	c084 <send_array_dd_v0+0x3c>
    c096:	f103 051e 	add.w	r5, r3, #30
    c09a:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    c09e:	f855 3c06 	ldr.w	r3, [r5, #-6]
    c0a2:	4629      	mov	r1, r5
    c0a4:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    c0a8:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    c0ac:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    c0b0:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    c0b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    c0b8:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    c0bc:	f01d fde0 	bl	29c80 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    c0c0:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    c0c2:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    c0c4:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    c0c8:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    c0ca:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    c0ce:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    c0d2:	4633      	mov	r3, r6
    c0d4:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    c0d8:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    c0da:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    c0dc:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    c0e0:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    c0e4:	f103 0308 	add.w	r3, r3, #8
    c0e8:	d1f6      	bne.n	c0d8 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    c0ea:	3524      	adds	r5, #36	; 0x24
    c0ec:	42a5      	cmp	r5, r4
    c0ee:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    c0f2:	d1d4      	bne.n	c09e <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    c0f4:	466c      	mov	r4, sp
    c0f6:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    c0fa:	4668      	mov	r0, sp
    c0fc:	4913      	ldr	r1, [pc, #76]	; (c14c <send_array_dd_v0+0x104>)
    c0fe:	ad07      	add	r5, sp, #28
    c100:	f000 f950 	bl	c3a4 <pb_ostream_from_buffer>
    c104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c108:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    c10a:	4911      	ldr	r1, [pc, #68]	; (c150 <send_array_dd_v0+0x108>)
    c10c:	aa0c      	add	r2, sp, #48	; 0x30
    c10e:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    c110:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    c112:	f000 fbc7 	bl	c8a4 <pb_encode>
   int j=0;
    c116:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    c118:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    c11a:	490c      	ldr	r1, [pc, #48]	; (c14c <send_array_dd_v0+0x104>)
    c11c:	4a0d      	ldr	r2, [pc, #52]	; (c154 <send_array_dd_v0+0x10c>)
    c11e:	4283      	cmp	r3, r0
    c120:	d10b      	bne.n	c13a <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    c122:	490d      	ldr	r1, [pc, #52]	; (c158 <send_array_dd_v0+0x110>)
    return function_return;
    c124:	f240 72dc 	movw	r2, #2012	; 0x7dc
    c128:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    c12a:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    c12e:	f01d fc38 	bl	299a2 <memcpy>
}
    c132:	4638      	mov	r0, r7
    c134:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    c138:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    c13a:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    c13e:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    c140:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    c144:	e7eb      	b.n	c11e <send_array_dd_v0+0xd6>
    c146:	bf00      	nop
    c148:	0012d687 	.word	0x0012d687
    c14c:	2002178b 	.word	0x2002178b
    c150:	0002ad4c 	.word	0x0002ad4c
    c154:	20009e8b 	.word	0x20009e8b
    c158:	20009e88 	.word	0x20009e88

0000c15c <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    c15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c160:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c162:	4d23      	ldr	r5, [pc, #140]	; (c1f0 <print_current_position_cb+0x94>)
void print_current_position_cb(uint32_t pos){
    c164:	b085      	sub	sp, #20
    printf("\n\n####Position %d #####\n",pos);
    c166:	4601      	mov	r1, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c168:	ea4f 1884 	mov.w	r8, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    c16c:	4821      	ldr	r0, [pc, #132]	; (c1f4 <print_current_position_cb+0x98>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c16e:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    c172:	f017 fb6b 	bl	2384c <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c176:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    c17a:	6863      	ldr	r3, [r4, #4]
    c17c:	481e      	ldr	r0, [pc, #120]	; (c1f8 <print_current_position_cb+0x9c>)
    c17e:	f017 fb65 	bl	2384c <iprintf>
    val_mv = C_Buffer[pos].analog.value;
    c182:	6963      	ldr	r3, [r4, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    c184:	a803      	add	r0, sp, #12
    val_mv = C_Buffer[pos].analog.value;
    c186:	9303      	str	r3, [sp, #12]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    c188:	f7ff fdda 	bl	bd40 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    c18c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    c190:	9b03      	ldr	r3, [sp, #12]
    c192:	481a      	ldr	r0, [pc, #104]	; (c1fc <print_current_position_cb+0xa0>)
    c194:	f017 fb5a 	bl	2384c <iprintf>
    int i=0;
    c198:	2600      	movs	r6, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c19a:	f8df 9064 	ldr.w	r9, [pc, #100]	; c200 <print_current_position_cb+0xa4>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    c19e:	1c77      	adds	r7, r6, #1
    c1a0:	8ba0      	ldrh	r0, [r4, #28]
    c1a2:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c1a4:	f8d4 a018 	ldr.w	sl, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    c1a8:	f9b4 b01c 	ldrsh.w	fp, [r4, #28]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    c1ac:	f7fd f8e0 	bl	9370 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c1b0:	f7fc f936 	bl	8420 <__aeabi_f2d>
    c1b4:	465b      	mov	r3, fp
    c1b6:	e9cd 0100 	strd	r0, r1, [sp]
    c1ba:	4652      	mov	r2, sl
    c1bc:	4631      	mov	r1, r6
    c1be:	4648      	mov	r0, r9
    c1c0:	f017 fb44 	bl	2384c <iprintf>
    while (i<3){
    c1c4:	2f03      	cmp	r7, #3
      i++;
    c1c6:	463e      	mov	r6, r7
    while (i<3){
    c1c8:	f104 0408 	add.w	r4, r4, #8
    c1cc:	d1e7      	bne.n	c19e <print_current_position_cb+0x42>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    c1ce:	4445      	add	r5, r8
    c1d0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    c1d4:	2100      	movs	r1, #0
    c1d6:	480b      	ldr	r0, [pc, #44]	; (c204 <print_current_position_cb+0xa8>)
    c1d8:	f017 fb38 	bl	2384c <iprintf>
    c1dc:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    c1e0:	2101      	movs	r1, #1
    c1e2:	4808      	ldr	r0, [pc, #32]	; (c204 <print_current_position_cb+0xa8>)
}
    c1e4:	b005      	add	sp, #20
    c1e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    c1ea:	f017 bb2f 	b.w	2384c <iprintf>
    c1ee:	bf00      	nop
    c1f0:	2000a754 	.word	0x2000a754
    c1f4:	0002c2bb 	.word	0x0002c2bb
    c1f8:	0002c2d4 	.word	0x0002c2d4
    c1fc:	0002c300 	.word	0x0002c300
    c200:	0002c326 	.word	0x0002c326
    c204:	0002c34c 	.word	0x0002c34c

0000c208 <print_current_position_cb_new>:
void print_current_position_cb_new(uint32_t pos){
    c208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c20c:	4607      	mov	r7, r0
    c20e:	b094      	sub	sp, #80	; 0x50
   C_Buffer = k_malloc(size);
    c210:	2040      	movs	r0, #64	; 0x40
    c212:	f01d fbb1 	bl	29978 <k_malloc>
    c216:	4606      	mov	r6, r0
   *C_Buffer=read_memory(pos);
    c218:	4635      	mov	r5, r6
    c21a:	4639      	mov	r1, r7
    c21c:	a802      	add	r0, sp, #8
    c21e:	ac02      	add	r4, sp, #8
    c220:	f7ff fdfe 	bl	be20 <read_memory>
    c224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c22a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c22c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c22e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c230:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c234:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    printf("\n\n####Position %d #####\n",pos);
    c238:	4639      	mov	r1, r7
    c23a:	4821      	ldr	r0, [pc, #132]	; (c2c0 <print_current_position_cb_new+0xb8>)
    c23c:	f017 fb06 	bl	2384c <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c240:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
    c244:	6873      	ldr	r3, [r6, #4]
    c246:	481f      	ldr	r0, [pc, #124]	; (c2c4 <print_current_position_cb_new+0xbc>)
    c248:	f017 fb00 	bl	2384c <iprintf>
    val_mv = C_Buffer->analog.value;
    c24c:	6973      	ldr	r3, [r6, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    c24e:	a813      	add	r0, sp, #76	; 0x4c
    val_mv = C_Buffer->analog.value;
    c250:	9313      	str	r3, [sp, #76]	; 0x4c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    c252:	f7ff fd75 	bl	bd40 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    c256:	e9d6 1204 	ldrd	r1, r2, [r6, #16]
    c25a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c25c:	481a      	ldr	r0, [pc, #104]	; (c2c8 <print_current_position_cb_new+0xc0>)
    c25e:	f017 faf5 	bl	2384c <iprintf>
    while (i<3){
    c262:	4634      	mov	r4, r6
    int i=0;
    c264:	2500      	movs	r5, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c266:	f8df 8064 	ldr.w	r8, [pc, #100]	; c2cc <print_current_position_cb_new+0xc4>
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    c26a:	1c6f      	adds	r7, r5, #1
    c26c:	8ba0      	ldrh	r0, [r4, #28]
    c26e:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c270:	f8d4 9018 	ldr.w	r9, [r4, #24]
      C_Buffer->ntc[i].value,
    c274:	f9b4 a01c 	ldrsh.w	sl, [r4, #28]
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    c278:	f7fd f87a 	bl	9370 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c27c:	f7fc f8d0 	bl	8420 <__aeabi_f2d>
    c280:	4653      	mov	r3, sl
    c282:	e9cd 0100 	strd	r0, r1, [sp]
    c286:	464a      	mov	r2, r9
    c288:	4629      	mov	r1, r5
    c28a:	4640      	mov	r0, r8
    c28c:	f017 fade 	bl	2384c <iprintf>
    while (i<3){
    c290:	2f03      	cmp	r7, #3
      i++;
    c292:	463d      	mov	r5, r7
    while (i<3){
    c294:	f104 0408 	add.w	r4, r4, #8
    c298:	d1e7      	bne.n	c26a <print_current_position_cb_new+0x62>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    c29a:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
    c29e:	2100      	movs	r1, #0
    c2a0:	480b      	ldr	r0, [pc, #44]	; (c2d0 <print_current_position_cb_new+0xc8>)
    c2a2:	f017 fad3 	bl	2384c <iprintf>
    c2a6:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
    c2aa:	2101      	movs	r1, #1
    c2ac:	4808      	ldr	r0, [pc, #32]	; (c2d0 <print_current_position_cb_new+0xc8>)
    c2ae:	f017 facd 	bl	2384c <iprintf>
 k_free(C_Buffer);
    c2b2:	4630      	mov	r0, r6
}
    c2b4:	b014      	add	sp, #80	; 0x50
    c2b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 k_free(C_Buffer);
    c2ba:	f01d bb56 	b.w	2996a <k_free>
    c2be:	bf00      	nop
    c2c0:	0002c2bb 	.word	0x0002c2bb
    c2c4:	0002c2d4 	.word	0x0002c2d4
    c2c8:	0002c300 	.word	0x0002c300
    c2cc:	0002c326 	.word	0x0002c326
    c2d0:	0002c34c 	.word	0x0002c34c

0000c2d4 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    c2d4:	b500      	push	{lr}
    pb_type_t type = field->type;
    c2d6:	7d83      	ldrb	r3, [r0, #22]
{
    c2d8:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    c2da:	2b3f      	cmp	r3, #63	; 0x3f
{
    c2dc:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    c2de:	d849      	bhi.n	c374 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    c2e0:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    c2e4:	d01c      	beq.n	c320 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    c2e6:	2820      	cmp	r0, #32
    c2e8:	d102      	bne.n	c2f0 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    c2ea:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    c2ec:	8818      	ldrh	r0, [r3, #0]
    c2ee:	e006      	b.n	c2fe <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    c2f0:	2830      	cmp	r0, #48	; 0x30
    c2f2:	d0fa      	beq.n	c2ea <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    c2f4:	2810      	cmp	r0, #16
    c2f6:	d106      	bne.n	c306 <pb_check_proto3_default_value+0x32>
    c2f8:	6a0a      	ldr	r2, [r1, #32]
    c2fa:	b122      	cbz	r2, c306 <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    c2fc:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    c2fe:	fab0 f080 	clz	r0, r0
    c302:	0940      	lsrs	r0, r0, #5
    c304:	e00c      	b.n	c320 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    c306:	680a      	ldr	r2, [r1, #0]
    c308:	6890      	ldr	r0, [r2, #8]
    c30a:	b980      	cbnz	r0, c32e <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    c30c:	f003 020f 	and.w	r2, r3, #15
    c310:	2a05      	cmp	r2, #5
    c312:	d80e      	bhi.n	c332 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    c314:	69cb      	ldr	r3, [r1, #28]
    c316:	8a4a      	ldrh	r2, [r1, #18]
    c318:	441a      	add	r2, r3
    c31a:	4293      	cmp	r3, r2
    c31c:	d103      	bne.n	c326 <pb_check_proto3_default_value+0x52>
            return true;
    c31e:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    c320:	b00b      	add	sp, #44	; 0x2c
    c322:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    c326:	f813 1b01 	ldrb.w	r1, [r3], #1
    c32a:	2900      	cmp	r1, #0
    c32c:	d0f5      	beq.n	c31a <pb_check_proto3_default_value+0x46>
            return false;
    c32e:	2000      	movs	r0, #0
    c330:	e7f6      	b.n	c320 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    c332:	2a06      	cmp	r2, #6
    c334:	d101      	bne.n	c33a <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    c336:	69cb      	ldr	r3, [r1, #28]
    c338:	e7d8      	b.n	c2ec <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    c33a:	2a07      	cmp	r2, #7
    c33c:	d102      	bne.n	c344 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    c33e:	69cb      	ldr	r3, [r1, #28]
    c340:	7818      	ldrb	r0, [r3, #0]
    c342:	e7dc      	b.n	c2fe <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    c344:	2a0b      	cmp	r2, #11
    c346:	d101      	bne.n	c34c <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    c348:	8a48      	ldrh	r0, [r1, #18]
    c34a:	e7d8      	b.n	c2fe <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    c34c:	f003 030e 	and.w	r3, r3, #14
    c350:	2b08      	cmp	r3, #8
    c352:	d1e5      	bne.n	c320 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    c354:	69ca      	ldr	r2, [r1, #28]
    c356:	4668      	mov	r0, sp
    c358:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c35a:	f018 fafd 	bl	24958 <pb_field_iter_begin>
    c35e:	2800      	cmp	r0, #0
    c360:	d0dd      	beq.n	c31e <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    c362:	4668      	mov	r0, sp
    c364:	f7ff ffb6 	bl	c2d4 <pb_check_proto3_default_value>
    c368:	2800      	cmp	r0, #0
    c36a:	d0d9      	beq.n	c320 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    c36c:	4668      	mov	r0, sp
    c36e:	f018 fb16 	bl	2499e <pb_field_iter_next>
    c372:	e7f4      	b.n	c35e <pb_check_proto3_default_value+0x8a>
    c374:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    c378:	2a80      	cmp	r2, #128	; 0x80
    c37a:	d101      	bne.n	c380 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    c37c:	69c0      	ldr	r0, [r0, #28]
    c37e:	e7be      	b.n	c2fe <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    c380:	2a40      	cmp	r2, #64	; 0x40
    c382:	d1d4      	bne.n	c32e <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    c384:	f003 030f 	and.w	r3, r3, #15
    c388:	2b0a      	cmp	r3, #10
    c38a:	d102      	bne.n	c392 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c38c:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    c38e:	6818      	ldr	r0, [r3, #0]
    c390:	e7b5      	b.n	c2fe <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    c392:	6803      	ldr	r3, [r0, #0]
    c394:	4a02      	ldr	r2, [pc, #8]	; (c3a0 <pb_check_proto3_default_value+0xcc>)
    c396:	68d8      	ldr	r0, [r3, #12]
    c398:	4290      	cmp	r0, r2
    c39a:	d1b0      	bne.n	c2fe <pb_check_proto3_default_value+0x2a>
    c39c:	e7f6      	b.n	c38c <pb_check_proto3_default_value+0xb8>
    c39e:	bf00      	nop
    c3a0:	000249bd 	.word	0x000249bd

0000c3a4 <pb_ostream_from_buffer>:
    return stream;
    c3a4:	6082      	str	r2, [r0, #8]
    c3a6:	2200      	movs	r2, #0
{
    c3a8:	b510      	push	{r4, lr}
    return stream;
    c3aa:	4c03      	ldr	r4, [pc, #12]	; (c3b8 <pb_ostream_from_buffer+0x14>)
    c3ac:	e9c0 2203 	strd	r2, r2, [r0, #12]
    c3b0:	e9c0 4100 	strd	r4, r1, [r0]
}
    c3b4:	bd10      	pop	{r4, pc}
    c3b6:	bf00      	nop
    c3b8:	000249ed 	.word	0x000249ed

0000c3bc <pb_write>:
{
    c3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3be:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    c3c0:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    c3c2:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    c3c4:	b19a      	cbz	r2, c3ee <pb_write+0x32>
    c3c6:	6806      	ldr	r6, [r0, #0]
    c3c8:	b18e      	cbz	r6, c3ee <pb_write+0x32>
    c3ca:	18d3      	adds	r3, r2, r3
    c3cc:	d202      	bcs.n	c3d4 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    c3ce:	6887      	ldr	r7, [r0, #8]
    c3d0:	429f      	cmp	r7, r3
    c3d2:	d207      	bcs.n	c3e4 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    c3d4:	6923      	ldr	r3, [r4, #16]
    c3d6:	4a08      	ldr	r2, [pc, #32]	; (c3f8 <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    c3d8:	2b00      	cmp	r3, #0
    c3da:	bf08      	it	eq
    c3dc:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    c3de:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    c3e0:	6123      	str	r3, [r4, #16]
}
    c3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    c3e4:	47b0      	blx	r6
    c3e6:	b910      	cbnz	r0, c3ee <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    c3e8:	6923      	ldr	r3, [r4, #16]
    c3ea:	4a04      	ldr	r2, [pc, #16]	; (c3fc <pb_write+0x40>)
    c3ec:	e7f4      	b.n	c3d8 <pb_write+0x1c>
    stream->bytes_written += count;
    c3ee:	68e3      	ldr	r3, [r4, #12]
    return true;
    c3f0:	2001      	movs	r0, #1
    stream->bytes_written += count;
    c3f2:	442b      	add	r3, r5
    c3f4:	60e3      	str	r3, [r4, #12]
    return true;
    c3f6:	e7f4      	b.n	c3e2 <pb_write+0x26>
    c3f8:	0002c36e 	.word	0x0002c36e
    c3fc:	0002c37a 	.word	0x0002c37a

0000c400 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    c400:	b410      	push	{r4}
    c402:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    c404:	8a4b      	ldrh	r3, [r1, #18]
    c406:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    c40a:	2c02      	cmp	r4, #2
    c40c:	d117      	bne.n	c43e <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    c40e:	2b01      	cmp	r3, #1
    c410:	d105      	bne.n	c41e <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    c412:	69cb      	ldr	r3, [r1, #28]
    c414:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    c416:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    c418:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    c41a:	f018 baf0 	b.w	249fe <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    c41e:	2b02      	cmp	r3, #2
    c420:	d102      	bne.n	c428 <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    c422:	69cb      	ldr	r3, [r1, #28]
    c424:	881a      	ldrh	r2, [r3, #0]
    c426:	e7f6      	b.n	c416 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    c428:	2b04      	cmp	r3, #4
    c42a:	d102      	bne.n	c432 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    c42c:	69cb      	ldr	r3, [r1, #28]
    c42e:	681a      	ldr	r2, [r3, #0]
    c430:	e7f1      	b.n	c416 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    c432:	2b08      	cmp	r3, #8
    c434:	d11f      	bne.n	c476 <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    c436:	69cb      	ldr	r3, [r1, #28]
    c438:	e9d3 2300 	ldrd	r2, r3, [r3]
    c43c:	e7ec      	b.n	c418 <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    c43e:	2b01      	cmp	r3, #1
    c440:	d108      	bne.n	c454 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    c442:	69cb      	ldr	r3, [r1, #28]
    c444:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    c448:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    c44a:	2c03      	cmp	r4, #3
    c44c:	d1e4      	bne.n	c418 <pb_enc_varint+0x18>
}
    c44e:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    c450:	f018 bb14 	b.w	24a7c <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    c454:	2b02      	cmp	r3, #2
    c456:	d103      	bne.n	c460 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    c458:	69cb      	ldr	r3, [r1, #28]
    c45a:	f9b3 2000 	ldrsh.w	r2, [r3]
    c45e:	e7f3      	b.n	c448 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    c460:	2b04      	cmp	r3, #4
    c462:	d102      	bne.n	c46a <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    c464:	69cb      	ldr	r3, [r1, #28]
    c466:	681a      	ldr	r2, [r3, #0]
    c468:	e7ee      	b.n	c448 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    c46a:	2b08      	cmp	r3, #8
    c46c:	d103      	bne.n	c476 <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    c46e:	69cb      	ldr	r3, [r1, #28]
    c470:	e9d3 2300 	ldrd	r2, r3, [r3]
    c474:	e7e9      	b.n	c44a <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    c476:	6903      	ldr	r3, [r0, #16]
    c478:	4a03      	ldr	r2, [pc, #12]	; (c488 <pb_enc_varint+0x88>)
    c47a:	2b00      	cmp	r3, #0
    c47c:	bf08      	it	eq
    c47e:	4613      	moveq	r3, r2
    c480:	6103      	str	r3, [r0, #16]
}
    c482:	bc10      	pop	{r4}
    c484:	2000      	movs	r0, #0
    c486:	4770      	bx	lr
    c488:	0002c383 	.word	0x0002c383

0000c48c <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    c48c:	8a4a      	ldrh	r2, [r1, #18]
    c48e:	2a04      	cmp	r2, #4
    c490:	d102      	bne.n	c498 <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    c492:	69c9      	ldr	r1, [r1, #28]
    c494:	f018 bafb 	b.w	24a8e <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    c498:	2a08      	cmp	r2, #8
    c49a:	d102      	bne.n	c4a2 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    c49c:	69c9      	ldr	r1, [r1, #28]
    c49e:	f018 baf9 	b.w	24a94 <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    c4a2:	6902      	ldr	r2, [r0, #16]
    c4a4:	4903      	ldr	r1, [pc, #12]	; (c4b4 <pb_enc_fixed+0x28>)
    c4a6:	2a00      	cmp	r2, #0
    c4a8:	bf08      	it	eq
    c4aa:	460a      	moveq	r2, r1
    c4ac:	6102      	str	r2, [r0, #16]
    }
}
    c4ae:	2000      	movs	r0, #0
    c4b0:	4770      	bx	lr
    c4b2:	bf00      	nop
    c4b4:	0002c383 	.word	0x0002c383

0000c4b8 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    c4b8:	7d8a      	ldrb	r2, [r1, #22]
{
    c4ba:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    c4bc:	f002 020f 	and.w	r2, r2, #15
    c4c0:	2a0b      	cmp	r2, #11
    c4c2:	d811      	bhi.n	c4e8 <pb_encode_tag_for_field+0x30>
    c4c4:	e8df f002 	tbb	[pc, r2]
    c4c8:	0c0c0c0c 	.word	0x0c0c0c0c
    c4cc:	0a0a060e 	.word	0x0a0a060e
    c4d0:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    c4d4:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    c4d6:	8a1a      	ldrh	r2, [r3, #16]
    c4d8:	f018 badf 	b.w	24a9a <pb_encode_tag>
            wiretype = PB_WT_STRING;
    c4dc:	2102      	movs	r1, #2
            break;
    c4de:	e7fa      	b.n	c4d6 <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    c4e0:	2100      	movs	r1, #0
    c4e2:	e7f8      	b.n	c4d6 <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    c4e4:	2105      	movs	r1, #5
    c4e6:	e7f6      	b.n	c4d6 <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    c4e8:	6903      	ldr	r3, [r0, #16]
    c4ea:	4a03      	ldr	r2, [pc, #12]	; (c4f8 <pb_encode_tag_for_field+0x40>)
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	bf08      	it	eq
    c4f0:	4613      	moveq	r3, r2
    c4f2:	6103      	str	r3, [r0, #16]
}
    c4f4:	2000      	movs	r0, #0
    c4f6:	4770      	bx	lr
    c4f8:	0002c395 	.word	0x0002c395

0000c4fc <pb_encode_submessage>:
{
    c4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c500:	460e      	mov	r6, r1
    c502:	4617      	mov	r7, r2
    c504:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c506:	2214      	movs	r2, #20
    c508:	2100      	movs	r1, #0
{
    c50a:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c50c:	a801      	add	r0, sp, #4
    c50e:	f01d fa82 	bl	29a16 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    c512:	463a      	mov	r2, r7
    c514:	4631      	mov	r1, r6
    c516:	a801      	add	r0, sp, #4
    c518:	f000 f9c4 	bl	c8a4 <pb_encode>
    c51c:	b910      	cbnz	r0, c524 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    c51e:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    c520:	6123      	str	r3, [r4, #16]
    c522:	e008      	b.n	c536 <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c524:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    c528:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c52a:	4643      	mov	r3, r8
    c52c:	462a      	mov	r2, r5
    c52e:	4620      	mov	r0, r4
    c530:	f018 fa65 	bl	249fe <pb_encode_varint>
    c534:	b918      	cbnz	r0, c53e <pb_encode_submessage+0x42>
        return false;
    c536:	2000      	movs	r0, #0
}
    c538:	b006      	add	sp, #24
    c53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    c53e:	6821      	ldr	r1, [r4, #0]
    c540:	b921      	cbnz	r1, c54c <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    c542:	462a      	mov	r2, r5
    c544:	4620      	mov	r0, r4
    c546:	f7ff ff39 	bl	c3bc <pb_write>
    c54a:	e7f5      	b.n	c538 <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    c54c:	68e3      	ldr	r3, [r4, #12]
    c54e:	68a2      	ldr	r2, [r4, #8]
    c550:	442b      	add	r3, r5
    c552:	4293      	cmp	r3, r2
    c554:	d905      	bls.n	c562 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    c556:	6923      	ldr	r3, [r4, #16]
    c558:	4a0e      	ldr	r2, [pc, #56]	; (c594 <pb_encode_submessage+0x98>)
    c55a:	2b00      	cmp	r3, #0
    c55c:	bf08      	it	eq
    c55e:	4613      	moveq	r3, r2
    c560:	e7de      	b.n	c520 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    c562:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    c564:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    c566:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    c568:	a801      	add	r0, sp, #4
    c56a:	4631      	mov	r1, r6
    substream.max_size = size;
    c56c:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    c570:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    c574:	f000 f996 	bl	c8a4 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    c578:	9a04      	ldr	r2, [sp, #16]
    c57a:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    c57c:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    c57e:	4413      	add	r3, r2
    c580:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    c582:	9b02      	ldr	r3, [sp, #8]
    c584:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    c586:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    c588:	d101      	bne.n	c58e <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    c58a:	6123      	str	r3, [r4, #16]
    c58c:	e7d4      	b.n	c538 <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    c58e:	4a02      	ldr	r2, [pc, #8]	; (c598 <pb_encode_submessage+0x9c>)
    c590:	e7e3      	b.n	c55a <pb_encode_submessage+0x5e>
    c592:	bf00      	nop
    c594:	0002c36e 	.word	0x0002c36e
    c598:	0002c3a8 	.word	0x0002c3a8

0000c59c <encode_basic_field>:
{
    c59c:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    c59e:	69cb      	ldr	r3, [r1, #28]
{
    c5a0:	4604      	mov	r4, r0
    c5a2:	460d      	mov	r5, r1
    if (!field->pData)
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d07f      	beq.n	c6a8 <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    c5a8:	f7ff ff86 	bl	c4b8 <pb_encode_tag_for_field>
    c5ac:	2800      	cmp	r0, #0
    c5ae:	d073      	beq.n	c698 <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    c5b0:	7da8      	ldrb	r0, [r5, #22]
    c5b2:	f000 030f 	and.w	r3, r0, #15
    c5b6:	2b0b      	cmp	r3, #11
    c5b8:	d873      	bhi.n	c6a2 <encode_basic_field+0x106>
    c5ba:	e8df f003 	tbb	[pc, r3]
    c5be:	1106      	.short	0x1106
    c5c0:	17171111 	.word	0x17171111
    c5c4:	5252351d 	.word	0x5252351d
    c5c8:	6f72      	.short	0x6f72
        if (p[i] != 0)
    c5ca:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    c5cc:	4620      	mov	r0, r4
}
    c5ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    c5d2:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    c5d4:	2300      	movs	r3, #0
    c5d6:	3a00      	subs	r2, #0
    c5d8:	bf18      	it	ne
    c5da:	2201      	movne	r2, #1
    c5dc:	f018 ba0f 	b.w	249fe <pb_encode_varint>
            return pb_enc_varint(stream, field);
    c5e0:	4629      	mov	r1, r5
    c5e2:	4620      	mov	r0, r4
}
    c5e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    c5e8:	f7ff bf0a 	b.w	c400 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    c5ec:	4629      	mov	r1, r5
    c5ee:	4620      	mov	r0, r4
}
    c5f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    c5f4:	f7ff bf4a 	b.w	c48c <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    c5f8:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    c5fa:	b909      	cbnz	r1, c600 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    c5fc:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    c5fe:	e00e      	b.n	c61e <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c600:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c602:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c604:	d80a      	bhi.n	c61c <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c606:	8a6b      	ldrh	r3, [r5, #18]
    c608:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c60a:	4293      	cmp	r3, r2
    c60c:	d206      	bcs.n	c61c <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    c60e:	6923      	ldr	r3, [r4, #16]
    c610:	4a26      	ldr	r2, [pc, #152]	; (c6ac <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    c612:	2b00      	cmp	r3, #0
    c614:	bf08      	it	eq
    c616:	4613      	moveq	r3, r2
    c618:	6123      	str	r3, [r4, #16]
    c61a:	e03d      	b.n	c698 <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    c61c:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c61e:	4620      	mov	r0, r4
}
    c620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c624:	f018 ba3f 	b.w	24aa6 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c628:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    c62c:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    c62e:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    c630:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c632:	d00e      	beq.n	c652 <encode_basic_field+0xb6>
        if (max_size == 0)
    c634:	b913      	cbnz	r3, c63c <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    c636:	6923      	ldr	r3, [r4, #16]
    c638:	4a1d      	ldr	r2, [pc, #116]	; (c6b0 <encode_basic_field+0x114>)
    c63a:	e7ea      	b.n	c612 <encode_basic_field+0x76>
        max_size -= 1;
    c63c:	3b01      	subs	r3, #1
    if (str == NULL)
    c63e:	2900      	cmp	r1, #0
    c640:	d0dc      	beq.n	c5fc <encode_basic_field+0x60>
    size_t size = 0;
    c642:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    c644:	429a      	cmp	r2, r3
    c646:	5c88      	ldrb	r0, [r1, r2]
    c648:	d006      	beq.n	c658 <encode_basic_field+0xbc>
    c64a:	2800      	cmp	r0, #0
    c64c:	d0e7      	beq.n	c61e <encode_basic_field+0x82>
            size++;
    c64e:	3201      	adds	r2, #1
            p++;
    c650:	e7f8      	b.n	c644 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    c652:	f04f 33ff 	mov.w	r3, #4294967295
    c656:	e7f2      	b.n	c63e <encode_basic_field+0xa2>
        if (*p != '\0')
    c658:	2800      	cmp	r0, #0
    c65a:	d0e0      	beq.n	c61e <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    c65c:	6923      	ldr	r3, [r4, #16]
    c65e:	4a15      	ldr	r2, [pc, #84]	; (c6b4 <encode_basic_field+0x118>)
    c660:	e7d7      	b.n	c612 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    c662:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c664:	b912      	cbnz	r2, c66c <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    c666:	6923      	ldr	r3, [r4, #16]
    c668:	4a13      	ldr	r2, [pc, #76]	; (c6b8 <encode_basic_field+0x11c>)
    c66a:	e7d2      	b.n	c612 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c66c:	2b09      	cmp	r3, #9
    c66e:	d006      	beq.n	c67e <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c670:	4620      	mov	r0, r4
    c672:	69ea      	ldr	r2, [r5, #28]
    c674:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    c676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c67a:	f7ff bf3f 	b.w	c4fc <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c67e:	6a2a      	ldr	r2, [r5, #32]
    c680:	2a00      	cmp	r2, #0
    c682:	d0f5      	beq.n	c670 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    c684:	f852 3c08 	ldr.w	r3, [r2, #-8]
    c688:	2b00      	cmp	r3, #0
    c68a:	d0f1      	beq.n	c670 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    c68c:	4629      	mov	r1, r5
    c68e:	4620      	mov	r0, r4
    c690:	3a04      	subs	r2, #4
    c692:	4798      	blx	r3
    c694:	2800      	cmp	r0, #0
    c696:	d1eb      	bne.n	c670 <encode_basic_field+0xd4>
        return false;
    c698:	2000      	movs	r0, #0
}
    c69a:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c69c:	8a6a      	ldrh	r2, [r5, #18]
    c69e:	69e9      	ldr	r1, [r5, #28]
    c6a0:	e7bd      	b.n	c61e <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    c6a2:	6923      	ldr	r3, [r4, #16]
    c6a4:	4a05      	ldr	r2, [pc, #20]	; (c6bc <encode_basic_field+0x120>)
    c6a6:	e7b4      	b.n	c612 <encode_basic_field+0x76>
        return true;
    c6a8:	2001      	movs	r0, #1
    c6aa:	e7f6      	b.n	c69a <encode_basic_field+0xfe>
    c6ac:	0002c3bc 	.word	0x0002c3bc
    c6b0:	0002c3d0 	.word	0x0002c3d0
    c6b4:	0002c3e3 	.word	0x0002c3e3
    c6b8:	0002c3f7 	.word	0x0002c3f7
    c6bc:	0002c395 	.word	0x0002c395

0000c6c0 <encode_field>:
{
    c6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c6c4:	7d8b      	ldrb	r3, [r1, #22]
{
    c6c6:	4605      	mov	r5, r0
    c6c8:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c6cc:	2a30      	cmp	r2, #48	; 0x30
{
    c6ce:	460c      	mov	r4, r1
    c6d0:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c6d2:	d112      	bne.n	c6fa <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    c6d4:	6a0b      	ldr	r3, [r1, #32]
    c6d6:	881a      	ldrh	r2, [r3, #0]
    c6d8:	8a0b      	ldrh	r3, [r1, #16]
    c6da:	429a      	cmp	r2, r3
    c6dc:	d114      	bne.n	c708 <encode_field+0x48>
    if (!field->pData)
    c6de:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c6e0:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    c6e2:	b9ea      	cbnz	r2, c720 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c6e4:	f013 0f30 	tst.w	r3, #48	; 0x30
    c6e8:	d10e      	bne.n	c708 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    c6ea:	692b      	ldr	r3, [r5, #16]
    c6ec:	4a69      	ldr	r2, [pc, #420]	; (c894 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	bf08      	it	eq
    c6f2:	4613      	moveq	r3, r2
    c6f4:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c6f6:	2000      	movs	r0, #0
    c6f8:	e007      	b.n	c70a <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    c6fa:	2a10      	cmp	r2, #16
    c6fc:	d1ef      	bne.n	c6de <encode_field+0x1e>
        if (field->pSize)
    c6fe:	6a0a      	ldr	r2, [r1, #32]
    c700:	b132      	cbz	r2, c710 <encode_field+0x50>
        if (p[i] != 0)
    c702:	7813      	ldrb	r3, [r2, #0]
    c704:	2b00      	cmp	r3, #0
    c706:	d1ea      	bne.n	c6de <encode_field+0x1e>
            return true;
    c708:	2001      	movs	r0, #1
}
    c70a:	b007      	add	sp, #28
    c70c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    c710:	2b3f      	cmp	r3, #63	; 0x3f
    c712:	d8e4      	bhi.n	c6de <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    c714:	4608      	mov	r0, r1
    c716:	f7ff fddd 	bl	c2d4 <pb_check_proto3_default_value>
    c71a:	2800      	cmp	r0, #0
    c71c:	d0df      	beq.n	c6de <encode_field+0x1e>
    c71e:	e7f3      	b.n	c708 <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    c720:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    c724:	2a40      	cmp	r2, #64	; 0x40
    c726:	d10c      	bne.n	c742 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    c728:	6823      	ldr	r3, [r4, #0]
    c72a:	68db      	ldr	r3, [r3, #12]
    c72c:	2b00      	cmp	r3, #0
    c72e:	d0eb      	beq.n	c708 <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    c730:	4622      	mov	r2, r4
    c732:	4629      	mov	r1, r5
    c734:	2000      	movs	r0, #0
    c736:	4798      	blx	r3
    c738:	2800      	cmp	r0, #0
    c73a:	d1e5      	bne.n	c708 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    c73c:	692b      	ldr	r3, [r5, #16]
    c73e:	4a56      	ldr	r2, [pc, #344]	; (c898 <encode_field+0x1d8>)
    c740:	e7d5      	b.n	c6ee <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    c742:	f003 0130 	and.w	r1, r3, #48	; 0x30
    c746:	2920      	cmp	r1, #32
    c748:	f040 809d 	bne.w	c886 <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c74c:	6a21      	ldr	r1, [r4, #32]
    c74e:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c750:	2e00      	cmp	r6, #0
    c752:	d0d9      	beq.n	c708 <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c754:	2a80      	cmp	r2, #128	; 0x80
    c756:	d120      	bne.n	c79a <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c758:	f003 030f 	and.w	r3, r3, #15
    c75c:	2b05      	cmp	r3, #5
    c75e:	d85e      	bhi.n	c81e <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c760:	2102      	movs	r1, #2
    c762:	4628      	mov	r0, r5
    c764:	8a22      	ldrh	r2, [r4, #16]
    c766:	f018 f998 	bl	24a9a <pb_encode_tag>
    c76a:	2800      	cmp	r0, #0
    c76c:	d0c3      	beq.n	c6f6 <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c76e:	7da3      	ldrb	r3, [r4, #22]
    c770:	f003 030f 	and.w	r3, r3, #15
    c774:	2b04      	cmp	r3, #4
    c776:	d116      	bne.n	c7a6 <encode_field+0xe6>
            size = 4 * (size_t)count;
    c778:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c77a:	463a      	mov	r2, r7
    c77c:	2300      	movs	r3, #0
    c77e:	4628      	mov	r0, r5
    c780:	f018 f93d 	bl	249fe <pb_encode_varint>
    c784:	2800      	cmp	r0, #0
    c786:	d0b6      	beq.n	c6f6 <encode_field+0x36>
        if (stream->callback == NULL)
    c788:	6829      	ldr	r1, [r5, #0]
    c78a:	bb79      	cbnz	r1, c7ec <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c78c:	463a      	mov	r2, r7
    c78e:	4628      	mov	r0, r5
}
    c790:	b007      	add	sp, #28
    c792:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c796:	f7ff be11 	b.w	c3bc <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c79a:	8aa2      	ldrh	r2, [r4, #20]
    c79c:	42b2      	cmp	r2, r6
    c79e:	d2db      	bcs.n	c758 <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c7a0:	692b      	ldr	r3, [r5, #16]
    c7a2:	4a3e      	ldr	r2, [pc, #248]	; (c89c <encode_field+0x1dc>)
    c7a4:	e7a3      	b.n	c6ee <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c7a6:	2b05      	cmp	r3, #5
    c7a8:	d101      	bne.n	c7ae <encode_field+0xee>
            size = 8 * (size_t)count;
    c7aa:	00f7      	lsls	r7, r6, #3
    c7ac:	e7e5      	b.n	c77a <encode_field+0xba>
            void *pData_orig = field->pData;
    c7ae:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c7b0:	2214      	movs	r2, #20
    c7b2:	2100      	movs	r1, #0
    c7b4:	a801      	add	r0, sp, #4
    c7b6:	f01d f92e 	bl	29a16 <memset>
            void *pData_orig = field->pData;
    c7ba:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c7be:	4621      	mov	r1, r4
    c7c0:	a801      	add	r0, sp, #4
    c7c2:	f7ff fe1d 	bl	c400 <pb_enc_varint>
    c7c6:	b928      	cbnz	r0, c7d4 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c7c8:	692b      	ldr	r3, [r5, #16]
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d192      	bne.n	c6f4 <encode_field+0x34>
    c7ce:	9b05      	ldr	r3, [sp, #20]
    c7d0:	4a33      	ldr	r2, [pc, #204]	; (c8a0 <encode_field+0x1e0>)
    c7d2:	e78c      	b.n	c6ee <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c7d4:	69e3      	ldr	r3, [r4, #28]
    c7d6:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c7d8:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c7da:	4413      	add	r3, r2
    c7dc:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c7de:	b2bb      	uxth	r3, r7
    c7e0:	429e      	cmp	r6, r3
    c7e2:	d8ec      	bhi.n	c7be <encode_field+0xfe>
            size = sizestream.bytes_written;
    c7e4:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c7e6:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c7ea:	e7c6      	b.n	c77a <encode_field+0xba>
    c7ec:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c7ee:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c7f0:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c7f2:	f003 030e 	and.w	r3, r3, #14
    c7f6:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c7f8:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c7fa:	d10d      	bne.n	c818 <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c7fc:	f7ff fe46 	bl	c48c <pb_enc_fixed>
    c800:	2800      	cmp	r0, #0
    c802:	f43f af78 	beq.w	c6f6 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c806:	69e3      	ldr	r3, [r4, #28]
    c808:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c80a:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c80c:	4413      	add	r3, r2
    c80e:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c810:	b2bb      	uxth	r3, r7
    c812:	429e      	cmp	r6, r3
    c814:	d8eb      	bhi.n	c7ee <encode_field+0x12e>
    c816:	e777      	b.n	c708 <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c818:	f7ff fdf2 	bl	c400 <pb_enc_varint>
    c81c:	e7f0      	b.n	c800 <encode_field+0x140>
    c81e:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c822:	7da3      	ldrb	r3, [r4, #22]
    c824:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c828:	2b86      	cmp	r3, #134	; 0x86
    c82a:	d127      	bne.n	c87c <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c82c:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c82e:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c830:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c834:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c836:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c83a:	f1b9 0f00 	cmp.w	r9, #0
    c83e:	d11a      	bne.n	c876 <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c840:	f7ff fe3a 	bl	c4b8 <pb_encode_tag_for_field>
    c844:	b908      	cbnz	r0, c84a <encode_field+0x18a>
                field->pData = pData_orig;
    c846:	61e7      	str	r7, [r4, #28]
                if (!status)
    c848:	e755      	b.n	c6f6 <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c84a:	2201      	movs	r2, #1
    c84c:	4628      	mov	r0, r5
    c84e:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c850:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c854:	f7ff fdb2 	bl	c3bc <pb_write>
                field->pData = pData_orig;
    c858:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c85a:	2800      	cmp	r0, #0
    c85c:	f43f af4b 	beq.w	c6f6 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c860:	69e3      	ldr	r3, [r4, #28]
    c862:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c864:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c868:	4413      	add	r3, r2
    c86a:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c86c:	fa1f f388 	uxth.w	r3, r8
    c870:	429e      	cmp	r6, r3
    c872:	d8d6      	bhi.n	c822 <encode_field+0x162>
    c874:	e748      	b.n	c708 <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c876:	f7ff fe91 	bl	c59c <encode_basic_field>
    c87a:	e7ed      	b.n	c858 <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c87c:	4621      	mov	r1, r4
    c87e:	4628      	mov	r0, r5
    c880:	f7ff fe8c 	bl	c59c <encode_basic_field>
    c884:	e7e9      	b.n	c85a <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c886:	4621      	mov	r1, r4
    c888:	4628      	mov	r0, r5
}
    c88a:	b007      	add	sp, #28
    c88c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c890:	f7ff be84 	b.w	c59c <encode_basic_field>
    c894:	0002c410 	.word	0x0002c410
    c898:	0002c427 	.word	0x0002c427
    c89c:	0002c436 	.word	0x0002c436
    c8a0:	0002c44e 	.word	0x0002c44e

0000c8a4 <pb_encode>:
{
    c8a4:	b530      	push	{r4, r5, lr}
    c8a6:	b095      	sub	sp, #84	; 0x54
    c8a8:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c8aa:	4668      	mov	r0, sp
    c8ac:	f018 f882 	bl	249b4 <pb_field_iter_begin_const>
    c8b0:	b370      	cbz	r0, c910 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c8b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c8b6:	f003 030f 	and.w	r3, r3, #15
    c8ba:	2b0a      	cmp	r3, #10
    c8bc:	d121      	bne.n	c902 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c8be:	9b07      	ldr	r3, [sp, #28]
    c8c0:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c8c2:	b91d      	cbnz	r5, c8cc <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c8c4:	4668      	mov	r0, sp
    c8c6:	f018 f86a 	bl	2499e <pb_field_iter_next>
    c8ca:	e7f1      	b.n	c8b0 <pb_encode+0xc>
        if (extension->type->encode)
    c8cc:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c8ce:	4629      	mov	r1, r5
        if (extension->type->encode)
    c8d0:	685b      	ldr	r3, [r3, #4]
    c8d2:	b123      	cbz	r3, c8de <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c8d4:	4620      	mov	r0, r4
    c8d6:	4798      	blx	r3
        if (!status)
    c8d8:	b158      	cbz	r0, c8f2 <pb_encode+0x4e>
        extension = extension->next;
    c8da:	68ad      	ldr	r5, [r5, #8]
    c8dc:	e7f1      	b.n	c8c2 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c8de:	a80a      	add	r0, sp, #40	; 0x28
    c8e0:	f018 f86a 	bl	249b8 <pb_field_iter_begin_extension_const>
    c8e4:	b940      	cbnz	r0, c8f8 <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c8e6:	6923      	ldr	r3, [r4, #16]
    c8e8:	4a0a      	ldr	r2, [pc, #40]	; (c914 <pb_encode+0x70>)
    c8ea:	2b00      	cmp	r3, #0
    c8ec:	bf08      	it	eq
    c8ee:	4613      	moveq	r3, r2
    c8f0:	6123      	str	r3, [r4, #16]
                return false;
    c8f2:	2000      	movs	r0, #0
}
    c8f4:	b015      	add	sp, #84	; 0x54
    c8f6:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c8f8:	4620      	mov	r0, r4
    c8fa:	a90a      	add	r1, sp, #40	; 0x28
    c8fc:	f7ff fee0 	bl	c6c0 <encode_field>
    c900:	e7ea      	b.n	c8d8 <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c902:	4669      	mov	r1, sp
    c904:	4620      	mov	r0, r4
    c906:	f7ff fedb 	bl	c6c0 <encode_field>
    c90a:	2800      	cmp	r0, #0
    c90c:	d1da      	bne.n	c8c4 <pb_encode+0x20>
    c90e:	e7f0      	b.n	c8f2 <pb_encode+0x4e>
        return true; /* Empty message type */
    c910:	2001      	movs	r0, #1
    c912:	e7ef      	b.n	c8f4 <pb_encode+0x50>
    c914:	0002c455 	.word	0x0002c455

0000c918 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    c918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c91c:	b091      	sub	sp, #68	; 0x44
    c91e:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    c920:	f002 0304 	and.w	r3, r2, #4
    c924:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    c926:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    c92a:	3301      	adds	r3, #1
    c92c:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    c92e:	0783      	lsls	r3, r0, #30
{
    c930:	4605      	mov	r5, r0
    c932:	460e      	mov	r6, r1
    c934:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    c938:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    c93a:	f040 81fe 	bne.w	cd3a <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    c93e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    c940:	b130      	cbz	r0, c950 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    c942:	2907      	cmp	r1, #7
    c944:	d809      	bhi.n	c95a <cbvprintf_package+0x42>
		return -ENOSPC;
    c946:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    c94a:	b011      	add	sp, #68	; 0x44
    c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    c950:	f001 0607 	and.w	r6, r1, #7
    c954:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    c956:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    c95a:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    c95e:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    c962:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    c964:	4647      	mov	r7, r8
	s = fmt--;
    c966:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    c968:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    c96c:	4643      	mov	r3, r8
	size = sizeof(char *);
    c96e:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    c970:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    c974:	b10d      	cbz	r5, c97a <cbvprintf_package+0x62>
				*(const char **)buf = s;
    c976:	9800      	ldr	r0, [sp, #0]
    c978:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c97a:	9804      	ldr	r0, [sp, #16]
    c97c:	2800      	cmp	r0, #0
    c97e:	f300 80e1 	bgt.w	cb44 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c982:	489c      	ldr	r0, [pc, #624]	; (cbf4 <cbvprintf_package+0x2dc>)
    c984:	f8dd c000 	ldr.w	ip, [sp]
    c988:	4584      	cmp	ip, r0
    c98a:	d303      	bcc.n	c994 <cbvprintf_package+0x7c>
    c98c:	489a      	ldr	r0, [pc, #616]	; (cbf8 <cbvprintf_package+0x2e0>)
    c98e:	4584      	cmp	ip, r0
    c990:	f0c0 80d8 	bcc.w	cb44 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c994:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c998:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c99c:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c9a0:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c9a4:	f000 80e9 	beq.w	cb7a <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c9a8:	f04f 0c00 	mov.w	ip, #0
    c9ac:	e0d3      	b.n	cb56 <cbvprintf_package+0x23e>
			switch (*fmt) {
    c9ae:	287a      	cmp	r0, #122	; 0x7a
    c9b0:	d864      	bhi.n	ca7c <cbvprintf_package+0x164>
    c9b2:	284b      	cmp	r0, #75	; 0x4b
    c9b4:	d80f      	bhi.n	c9d6 <cbvprintf_package+0xbe>
    c9b6:	2847      	cmp	r0, #71	; 0x47
    c9b8:	d860      	bhi.n	ca7c <cbvprintf_package+0x164>
    c9ba:	2829      	cmp	r0, #41	; 0x29
    c9bc:	d82f      	bhi.n	ca1e <cbvprintf_package+0x106>
    c9be:	2825      	cmp	r0, #37	; 0x25
    c9c0:	d05b      	beq.n	ca7a <cbvprintf_package+0x162>
    c9c2:	d85b      	bhi.n	ca7c <cbvprintf_package+0x164>
    c9c4:	2820      	cmp	r0, #32
    c9c6:	d07f      	beq.n	cac8 <cbvprintf_package+0x1b0>
    c9c8:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    c9cc:	f1d9 0300 	rsbs	r3, r9, #0
    c9d0:	eb43 0309 	adc.w	r3, r3, r9
    c9d4:	e078      	b.n	cac8 <cbvprintf_package+0x1b0>
    c9d6:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    c9da:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    c9de:	d84d      	bhi.n	ca7c <cbvprintf_package+0x164>
    c9e0:	e8df f00e 	tbb	[pc, lr]
    c9e4:	4c4c4c72 	.word	0x4c4c4c72
    c9e8:	4c4c4c4c 	.word	0x4c4c4c4c
    c9ec:	4c4c4c4c 	.word	0x4c4c4c4c
    c9f0:	4c4c4c4e 	.word	0x4c4c4c4e
    c9f4:	4c4c4c4c 	.word	0x4c4c4c4c
    c9f8:	4e4c5c4c 	.word	0x4e4c5c4c
    c9fc:	5c5c5c4e 	.word	0x5c5c5c4e
    ca00:	4c6f4e72 	.word	0x4c6f4e72
    ca04:	4e184c72 	.word	0x4e184c72
    ca08:	814c4c18 	.word	0x814c4c18
    ca0c:	4c4c4e7e 	.word	0x4c4c4e7e
    ca10:	4c4e      	.short	0x4c4e
    ca12:	7e          	.byte	0x7e
    ca13:	00          	.byte	0x00
    ca14:	2000      	movs	r0, #0
    ca16:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    ca18:	f04f 0b04 	mov.w	fp, #4
    ca1c:	e03c      	b.n	ca98 <cbvprintf_package+0x180>
			switch (*fmt) {
    ca1e:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    ca22:	2001      	movs	r0, #1
    ca24:	fa5f fe8e 	uxtb.w	lr, lr
    ca28:	fa00 fe0e 	lsl.w	lr, r0, lr
    ca2c:	f64f 70da 	movw	r0, #65498	; 0xffda
    ca30:	ea1e 0f00 	tst.w	lr, r0
    ca34:	d148      	bne.n	cac8 <cbvprintf_package+0x1b0>
    ca36:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    ca3a:	d12f      	bne.n	ca9c <cbvprintf_package+0x184>
    ca3c:	f01e 0301 	ands.w	r3, lr, #1
    ca40:	d042      	beq.n	cac8 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    ca42:	3c01      	subs	r4, #1
    ca44:	445c      	add	r4, fp
    ca46:	f1cb 0e00 	rsb	lr, fp, #0
    ca4a:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    ca4e:	2d00      	cmp	r5, #0
    ca50:	d05e      	beq.n	cb10 <cbvprintf_package+0x1f8>
    ca52:	ebaa 0e05 	sub.w	lr, sl, r5
    ca56:	44a6      	add	lr, r4
    ca58:	4576      	cmp	r6, lr
    ca5a:	f4ff af74 	bcc.w	c946 <cbvprintf_package+0x2e>
		if (is_str_arg) {
    ca5e:	2800      	cmp	r0, #0
    ca60:	d168      	bne.n	cb34 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    ca62:	f1ba 0f04 	cmp.w	sl, #4
    ca66:	d143      	bne.n	caf0 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    ca68:	46e1      	mov	r9, ip
    ca6a:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    ca6e:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    ca70:	46cc      	mov	ip, r9
    ca72:	f04f 0a04 	mov.w	sl, #4
    ca76:	3404      	adds	r4, #4
    ca78:	e026      	b.n	cac8 <cbvprintf_package+0x1b0>
				arg_idx--;
    ca7a:	3a01      	subs	r2, #1
				parsing = false;
    ca7c:	2300      	movs	r3, #0
				continue;
    ca7e:	e023      	b.n	cac8 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    ca80:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    ca84:	2b6c      	cmp	r3, #108	; 0x6c
    ca86:	d130      	bne.n	caea <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    ca88:	2000      	movs	r0, #0
    ca8a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    ca8e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    ca90:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    ca92:	d1c1      	bne.n	ca18 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    ca94:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    ca98:	46da      	mov	sl, fp
    ca9a:	e7d2      	b.n	ca42 <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    ca9c:	f10c 0907 	add.w	r9, ip, #7
    caa0:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    caa4:	3407      	adds	r4, #7
    caa6:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    caaa:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    caae:	b135      	cbz	r5, cabe <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    cab0:	9805      	ldr	r0, [sp, #20]
    cab2:	4420      	add	r0, r4
    cab4:	42b0      	cmp	r0, r6
    cab6:	f63f af46 	bhi.w	c946 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    caba:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    cabe:	2300      	movs	r3, #0
				buf += size;
    cac0:	3408      	adds	r4, #8
			switch (*fmt) {
    cac2:	f04f 0b08 	mov.w	fp, #8
    cac6:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    cac8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    cacc:	2800      	cmp	r0, #0
    cace:	f000 80bc 	beq.w	cc4a <cbvprintf_package+0x332>
			if (!parsing) {
    cad2:	2b00      	cmp	r3, #0
    cad4:	f47f af6b 	bne.w	c9ae <cbvprintf_package+0x96>
				if (*fmt == '%') {
    cad8:	2825      	cmp	r0, #37	; 0x25
    cada:	d1f5      	bne.n	cac8 <cbvprintf_package+0x1b0>
					parsing = true;
    cadc:	2301      	movs	r3, #1
					arg_idx++;
    cade:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    cae0:	f04f 0b04 	mov.w	fp, #4
    cae4:	e7ef      	b.n	cac6 <cbvprintf_package+0x1ae>
			switch (*fmt) {
    cae6:	4618      	mov	r0, r3
    cae8:	e795      	b.n	ca16 <cbvprintf_package+0xfe>
    caea:	2000      	movs	r0, #0
				parsing = false;
    caec:	4603      	mov	r3, r0
    caee:	e7a8      	b.n	ca42 <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    caf0:	f1ba 0f08 	cmp.w	sl, #8
    caf4:	f040 809b 	bne.w	cc2e <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    caf8:	f10c 0907 	add.w	r9, ip, #7
    cafc:	f029 0c07 	bic.w	ip, r9, #7
    cb00:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    cb04:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    cb08:	f04f 0a08 	mov.w	sl, #8
    cb0c:	3408      	adds	r4, #8
    cb0e:	e7db      	b.n	cac8 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    cb10:	b980      	cbnz	r0, cb34 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    cb12:	f1ba 0f04 	cmp.w	sl, #4
    cb16:	d102      	bne.n	cb1e <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    cb18:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    cb1c:	e7a8      	b.n	ca70 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    cb1e:	f1ba 0f08 	cmp.w	sl, #8
    cb22:	f040 8084 	bne.w	cc2e <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    cb26:	f10c 0907 	add.w	r9, ip, #7
    cb2a:	f029 0907 	bic.w	r9, r9, #7
    cb2e:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    cb32:	e7e9      	b.n	cb08 <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    cb34:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    cb36:	9804      	ldr	r0, [sp, #16]
    cb38:	3801      	subs	r0, #1
    cb3a:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    cb3c:	f859 0b04 	ldr.w	r0, [r9], #4
    cb40:	9000      	str	r0, [sp, #0]
    cb42:	e717      	b.n	c974 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    cb44:	9802      	ldr	r0, [sp, #8]
    cb46:	0780      	lsls	r0, r0, #30
    cb48:	d548      	bpl.n	cbdc <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    cb4a:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    cb4e:	eba4 0e05 	sub.w	lr, r4, r5
    cb52:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    cb56:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    cb5a:	d31d      	bcc.n	cb98 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    cb5c:	4927      	ldr	r1, [pc, #156]	; (cbfc <cbvprintf_package+0x2e4>)
    cb5e:	f240 237b 	movw	r3, #635	; 0x27b
    cb62:	4a27      	ldr	r2, [pc, #156]	; (cc00 <cbvprintf_package+0x2e8>)
    cb64:	4827      	ldr	r0, [pc, #156]	; (cc04 <cbvprintf_package+0x2ec>)
    cb66:	f018 f9b6 	bl	24ed6 <assert_print>
    cb6a:	4827      	ldr	r0, [pc, #156]	; (cc08 <cbvprintf_package+0x2f0>)
    cb6c:	f018 f9b3 	bl	24ed6 <assert_print>
    cb70:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    cb74:	4822      	ldr	r0, [pc, #136]	; (cc00 <cbvprintf_package+0x2e8>)
    cb76:	f018 f9a7 	bl	24ec8 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    cb7a:	2f0f      	cmp	r7, #15
    cb7c:	d80e      	bhi.n	cb9c <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    cb7e:	2d00      	cmp	r5, #0
    cb80:	d046      	beq.n	cc10 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    cb82:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    cb86:	44ec      	add	ip, sp
    cb88:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    cb8c:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    cb90:	9803      	ldr	r0, [sp, #12]
    cb92:	3001      	adds	r0, #1
    cb94:	9003      	str	r0, [sp, #12]
    cb96:	e020      	b.n	cbda <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    cb98:	2f0f      	cmp	r7, #15
    cb9a:	d90c      	bls.n	cbb6 <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    cb9c:	4917      	ldr	r1, [pc, #92]	; (cbfc <cbvprintf_package+0x2e4>)
    cb9e:	f44f 7320 	mov.w	r3, #640	; 0x280
    cba2:	4a17      	ldr	r2, [pc, #92]	; (cc00 <cbvprintf_package+0x2e8>)
    cba4:	4817      	ldr	r0, [pc, #92]	; (cc04 <cbvprintf_package+0x2ec>)
    cba6:	f018 f996 	bl	24ed6 <assert_print>
    cbaa:	4818      	ldr	r0, [pc, #96]	; (cc0c <cbvprintf_package+0x2f4>)
    cbac:	f018 f993 	bl	24ed6 <assert_print>
    cbb0:	f44f 7120 	mov.w	r1, #640	; 0x280
    cbb4:	e7de      	b.n	cb74 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    cbb6:	b1bd      	cbz	r5, cbe8 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    cbb8:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    cbbc:	44ee      	add	lr, sp
    cbbe:	b2c0      	uxtb	r0, r0
    cbc0:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    cbc4:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    cbc8:	f1bc 0f00 	cmp.w	ip, #0
    cbcc:	d0e0      	beq.n	cb90 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    cbce:	f060 007f 	orn	r0, r0, #127	; 0x7f
    cbd2:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    cbd6:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    cbda:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    cbdc:	f1c5 0008 	rsb	r0, r5, #8
    cbe0:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    cbe2:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    cbe4:	9005      	str	r0, [sp, #20]
    cbe6:	e76f      	b.n	cac8 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    cbe8:	f1bc 0f00 	cmp.w	ip, #0
    cbec:	d010      	beq.n	cc10 <cbvprintf_package+0x2f8>
					len += 1;
    cbee:	3601      	adds	r6, #1
    cbf0:	e7f3      	b.n	cbda <cbvprintf_package+0x2c2>
    cbf2:	bf00      	nop
    cbf4:	0002a2a8 	.word	0x0002a2a8
    cbf8:	0003154c 	.word	0x0003154c
    cbfc:	000311d2 	.word	0x000311d2
    cc00:	0002c467 	.word	0x0002c467
    cc04:	0002b939 	.word	0x0002b939
    cc08:	0002c495 	.word	0x0002c495
    cc0c:	0002c4b6 	.word	0x0002c4b6
				} else if (rws_pos_en) {
    cc10:	9801      	ldr	r0, [sp, #4]
					len += 2;
    cc12:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    cc14:	2800      	cmp	r0, #0
    cc16:	d1e0      	bne.n	cbda <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    cc18:	9800      	ldr	r0, [sp, #0]
    cc1a:	e9cd 3106 	strd	r3, r1, [sp, #24]
    cc1e:	9205      	str	r2, [sp, #20]
    cc20:	f7fc fb9e 	bl	9360 <strlen>
    cc24:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    cc28:	9a05      	ldr	r2, [sp, #20]
    cc2a:	4406      	add	r6, r0
    cc2c:	e7d5      	b.n	cbda <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    cc2e:	f240 23c5 	movw	r3, #709	; 0x2c5
    cc32:	4a43      	ldr	r2, [pc, #268]	; (cd40 <cbvprintf_package+0x428>)
    cc34:	4943      	ldr	r1, [pc, #268]	; (cd44 <cbvprintf_package+0x42c>)
    cc36:	4844      	ldr	r0, [pc, #272]	; (cd48 <cbvprintf_package+0x430>)
    cc38:	f018 f94d 	bl	24ed6 <assert_print>
    cc3c:	4651      	mov	r1, sl
    cc3e:	4843      	ldr	r0, [pc, #268]	; (cd4c <cbvprintf_package+0x434>)
    cc40:	f018 f949 	bl	24ed6 <assert_print>
    cc44:	f240 21c5 	movw	r1, #709	; 0x2c5
    cc48:	e794      	b.n	cb74 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    cc4a:	1b63      	subs	r3, r4, r5
    cc4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    cc50:	d30c      	bcc.n	cc6c <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    cc52:	493c      	ldr	r1, [pc, #240]	; (cd44 <cbvprintf_package+0x42c>)
    cc54:	f240 23d1 	movw	r3, #721	; 0x2d1
    cc58:	4a39      	ldr	r2, [pc, #228]	; (cd40 <cbvprintf_package+0x428>)
    cc5a:	483b      	ldr	r0, [pc, #236]	; (cd48 <cbvprintf_package+0x430>)
    cc5c:	f018 f93b 	bl	24ed6 <assert_print>
    cc60:	483b      	ldr	r0, [pc, #236]	; (cd50 <cbvprintf_package+0x438>)
    cc62:	f018 f938 	bl	24ed6 <assert_print>
    cc66:	f240 21d1 	movw	r1, #721	; 0x2d1
    cc6a:	e783      	b.n	cb74 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    cc6c:	b91d      	cbnz	r5, cc76 <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    cc6e:	f1a6 0408 	sub.w	r4, r6, #8
    cc72:	18e0      	adds	r0, r4, r3
    cc74:	e669      	b.n	c94a <cbvprintf_package+0x32>
	if (rws_pos_en) {
    cc76:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    cc78:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    cc7a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    cc7c:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    cc7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    cc82:	b1c2      	cbz	r2, ccb6 <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    cc84:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    cc86:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    cc8a:	f1b8 0f00 	cmp.w	r8, #0
    cc8e:	d005      	beq.n	cc9c <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    cc90:	2200      	movs	r2, #0
    cc92:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    cc94:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    cc98:	4297      	cmp	r7, r2
    cc9a:	d10e      	bne.n	ccba <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    cc9c:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    cca0:	f1c5 0301 	rsb	r3, r5, #1
    cca4:	f10d 0920 	add.w	r9, sp, #32
    cca8:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    ccaa:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    ccae:	4557      	cmp	r7, sl
    ccb0:	d112      	bne.n	ccd8 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    ccb2:	1b60      	subs	r0, r4, r5
    ccb4:	e649      	b.n	c94a <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    ccb6:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    ccb8:	e7e5      	b.n	cc86 <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    ccba:	f810 3b01 	ldrb.w	r3, [r0], #1
    ccbe:	0619      	lsls	r1, r3, #24
    ccc0:	d508      	bpl.n	ccd4 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    ccc2:	eb04 0e0c 	add.w	lr, r4, ip
    ccc6:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    ccc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    cccc:	f4ff ae3b 	bcc.w	c946 <cbvprintf_package+0x2e>
			*buf++ = pos;
    ccd0:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    ccd4:	3201      	adds	r2, #1
    ccd6:	e7df      	b.n	cc98 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    ccd8:	f1b8 0f00 	cmp.w	r8, #0
    ccdc:	d003      	beq.n	cce6 <cbvprintf_package+0x3ce>
    ccde:	f999 2000 	ldrsb.w	r2, [r9]
    cce2:	2a00      	cmp	r2, #0
    cce4:	db17      	blt.n	cd16 <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    cce6:	9b01      	ldr	r3, [sp, #4]
    cce8:	b1d3      	cbz	r3, cd20 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    ccea:	f81a 200b 	ldrb.w	r2, [sl, fp]
    ccee:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    ccf2:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    ccf4:	9b02      	ldr	r3, [sp, #8]
    ccf6:	1898      	adds	r0, r3, r2
    ccf8:	4420      	add	r0, r4
    ccfa:	4286      	cmp	r6, r0
    ccfc:	f4ff ae23 	bcc.w	c946 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    cd00:	f899 0000 	ldrb.w	r0, [r9]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    cd04:	9900      	ldr	r1, [sp, #0]
    cd06:	f804 0b01 	strb.w	r0, [r4], #1
    cd0a:	4620      	mov	r0, r4
    cd0c:	9203      	str	r2, [sp, #12]
    cd0e:	f01c fe48 	bl	299a2 <memcpy>
		buf += size;
    cd12:	9a03      	ldr	r2, [sp, #12]
    cd14:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    cd16:	f10a 0a01 	add.w	sl, sl, #1
    cd1a:	f109 0901 	add.w	r9, r9, #1
    cd1e:	e7c6      	b.n	ccae <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    cd20:	f899 2000 	ldrb.w	r2, [r9]
    cd24:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    cd28:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    cd2a:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    cd2c:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    cd2e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    cd32:	f7fc fb15 	bl	9360 <strlen>
    cd36:	1c42      	adds	r2, r0, #1
    cd38:	e7dc      	b.n	ccf4 <cbvprintf_package+0x3dc>
		return -EFAULT;
    cd3a:	f06f 000d 	mvn.w	r0, #13
    cd3e:	e604      	b.n	c94a <cbvprintf_package+0x32>
    cd40:	0002c467 	.word	0x0002c467
    cd44:	000311d2 	.word	0x000311d2
    cd48:	0002b939 	.word	0x0002b939
    cd4c:	0002c4d0 	.word	0x0002c4d0
    cd50:	0002c4e5 	.word	0x0002c4e5

0000cd54 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    cd54:	4b01      	ldr	r3, [pc, #4]	; (cd5c <char_out+0x8>)
    cd56:	681b      	ldr	r3, [r3, #0]
    cd58:	4718      	bx	r3
    cd5a:	bf00      	nop
    cd5c:	200083f8 	.word	0x200083f8

0000cd60 <__printk_hook_install>:
	_char_out = fn;
    cd60:	4b01      	ldr	r3, [pc, #4]	; (cd68 <__printk_hook_install+0x8>)
    cd62:	6018      	str	r0, [r3, #0]
}
    cd64:	4770      	bx	lr
    cd66:	bf00      	nop
    cd68:	200083f8 	.word	0x200083f8

0000cd6c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    cd6c:	b507      	push	{r0, r1, r2, lr}
    cd6e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    cd70:	2100      	movs	r1, #0
    cd72:	4602      	mov	r2, r0
    cd74:	9100      	str	r1, [sp, #0]
    cd76:	4803      	ldr	r0, [pc, #12]	; (cd84 <vprintk+0x18>)
    cd78:	f000 fcb0 	bl	d6dc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    cd7c:	b003      	add	sp, #12
    cd7e:	f85d fb04 	ldr.w	pc, [sp], #4
    cd82:	bf00      	nop
    cd84:	0000cd55 	.word	0x0000cd55

0000cd88 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    cd88:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    cd8a:	2500      	movs	r5, #0
{
    cd8c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    cd8e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    cd92:	4604      	mov	r4, r0
    cd94:	9500      	str	r5, [sp, #0]
    cd96:	a903      	add	r1, sp, #12
    cd98:	4805      	ldr	r0, [pc, #20]	; (cdb0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    cd9a:	9505      	str	r5, [sp, #20]
    cd9c:	f000 fc9e 	bl	d6dc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    cda0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    cda4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    cda6:	bfb8      	it	lt
    cda8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    cdaa:	b007      	add	sp, #28
    cdac:	bd30      	pop	{r4, r5, pc}
    cdae:	bf00      	nop
    cdb0:	00024b2d 	.word	0x00024b2d

0000cdb4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    cdb4:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    cdb6:	460c      	mov	r4, r1
    cdb8:	2900      	cmp	r1, #0
    cdba:	d034      	beq.n	ce26 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    cdbc:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cdbe:	1f0b      	subs	r3, r1, #4
    cdc0:	1a9b      	subs	r3, r3, r2
    cdc2:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    cdc4:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    cdc8:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    cdca:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    cdcc:	07e8      	lsls	r0, r5, #31
    cdce:	d40d      	bmi.n	cdec <sys_heap_free+0x38>
    cdd0:	23af      	movs	r3, #175	; 0xaf
    cdd2:	4a15      	ldr	r2, [pc, #84]	; (ce28 <sys_heap_free+0x74>)
    cdd4:	4915      	ldr	r1, [pc, #84]	; (ce2c <sys_heap_free+0x78>)
    cdd6:	4816      	ldr	r0, [pc, #88]	; (ce30 <sys_heap_free+0x7c>)
    cdd8:	f018 f87d 	bl	24ed6 <assert_print>
    cddc:	4621      	mov	r1, r4
    cdde:	4815      	ldr	r0, [pc, #84]	; (ce34 <sys_heap_free+0x80>)
    cde0:	f018 f879 	bl	24ed6 <assert_print>
    cde4:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    cde6:	4810      	ldr	r0, [pc, #64]	; (ce28 <sys_heap_free+0x74>)
    cde8:	f018 f86e 	bl	24ec8 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    cdec:	4610      	mov	r0, r2
    cdee:	f017 fed4 	bl	24b9a <chunk_size>
    cdf2:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    cdf4:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    cdf8:	1b80      	subs	r0, r0, r6
    cdfa:	4281      	cmp	r1, r0
    cdfc:	d00b      	beq.n	ce16 <sys_heap_free+0x62>
    cdfe:	23b7      	movs	r3, #183	; 0xb7
    ce00:	4a09      	ldr	r2, [pc, #36]	; (ce28 <sys_heap_free+0x74>)
    ce02:	490d      	ldr	r1, [pc, #52]	; (ce38 <sys_heap_free+0x84>)
    ce04:	480a      	ldr	r0, [pc, #40]	; (ce30 <sys_heap_free+0x7c>)
    ce06:	f018 f866 	bl	24ed6 <assert_print>
    ce0a:	4621      	mov	r1, r4
    ce0c:	480b      	ldr	r0, [pc, #44]	; (ce3c <sys_heap_free+0x88>)
    ce0e:	f018 f862 	bl	24ed6 <assert_print>
    ce12:	21b7      	movs	r1, #183	; 0xb7
    ce14:	e7e7      	b.n	cde6 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    ce16:	f025 0501 	bic.w	r5, r5, #1
    ce1a:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    ce1c:	4610      	mov	r0, r2
}
    ce1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    ce22:	f017 bf77 	b.w	24d14 <free_chunk>
}
    ce26:	bd70      	pop	{r4, r5, r6, pc}
    ce28:	0002c50d 	.word	0x0002c50d
    ce2c:	0002c52e 	.word	0x0002c52e
    ce30:	0002b939 	.word	0x0002b939
    ce34:	0002c53f 	.word	0x0002c53f
    ce38:	0002c577 	.word	0x0002c577
    ce3c:	0002c59d 	.word	0x0002c59d

0000ce40 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    ce40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce44:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    ce46:	400b      	ands	r3, r1
{
    ce48:	460f      	mov	r7, r1
    ce4a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    ce4c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    ce4e:	d010      	beq.n	ce72 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    ce50:	f1c1 0900 	rsb	r9, r1, #0
    ce54:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    ce58:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ce5a:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    ce5c:	2a04      	cmp	r2, #4
    ce5e:	bf28      	it	cs
    ce60:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ce62:	4219      	tst	r1, r3
    ce64:	d10c      	bne.n	ce80 <sys_heap_aligned_alloc+0x40>
    ce66:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    ce68:	b9e4      	cbnz	r4, cea4 <sys_heap_aligned_alloc+0x64>
		return NULL;
    ce6a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ce6c:	4628      	mov	r0, r5
    ce6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ce72:	2904      	cmp	r1, #4
    ce74:	d813      	bhi.n	ce9e <sys_heap_aligned_alloc+0x5e>
}
    ce76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ce7a:	4611      	mov	r1, r2
    ce7c:	f017 bf7b 	b.w	24d76 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ce80:	492c      	ldr	r1, [pc, #176]	; (cf34 <sys_heap_aligned_alloc+0xf4>)
    ce82:	f44f 73a2 	mov.w	r3, #324	; 0x144
    ce86:	4a2c      	ldr	r2, [pc, #176]	; (cf38 <sys_heap_aligned_alloc+0xf8>)
    ce88:	482c      	ldr	r0, [pc, #176]	; (cf3c <sys_heap_aligned_alloc+0xfc>)
    ce8a:	f018 f824 	bl	24ed6 <assert_print>
    ce8e:	482c      	ldr	r0, [pc, #176]	; (cf40 <sys_heap_aligned_alloc+0x100>)
    ce90:	f018 f821 	bl	24ed6 <assert_print>
    ce94:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ce98:	4827      	ldr	r0, [pc, #156]	; (cf38 <sys_heap_aligned_alloc+0xf8>)
    ce9a:	f018 f815 	bl	24ec8 <assert_post_action>
		rew = 0;
    ce9e:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    cea0:	2204      	movs	r2, #4
    cea2:	e7e1      	b.n	ce68 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    cea4:	68b3      	ldr	r3, [r6, #8]
    cea6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ceaa:	d9de      	bls.n	ce6a <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ceac:	f104 010b 	add.w	r1, r4, #11
    ceb0:	4439      	add	r1, r7
    ceb2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ceb4:	4630      	mov	r0, r6
    ceb6:	08c9      	lsrs	r1, r1, #3
    ceb8:	f017 fec5 	bl	24c46 <alloc_chunk>
	if (c0 == 0) {
    cebc:	4680      	mov	r8, r0
    cebe:	2800      	cmp	r0, #0
    cec0:	d0d3      	beq.n	ce6a <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    cec2:	f109 0504 	add.w	r5, r9, #4
    cec6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    ceca:	1e7b      	subs	r3, r7, #1
    cecc:	4435      	add	r5, r6
    cece:	441d      	add	r5, r3
    ced0:	427f      	negs	r7, r7
    ced2:	403d      	ands	r5, r7
    ced4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ced8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ceda:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cedc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cede:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cee0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    cee4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    cee6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ceea:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ceee:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    cef2:	d208      	bcs.n	cf06 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    cef4:	4601      	mov	r1, r0
    cef6:	463a      	mov	r2, r7
    cef8:	4630      	mov	r0, r6
    cefa:	f017 fef1 	bl	24ce0 <split_chunks>
		free_list_add(h, c0);
    cefe:	4641      	mov	r1, r8
    cf00:	4630      	mov	r0, r6
    cf02:	f017 fe4f 	bl	24ba4 <free_list_add>
	return c + chunk_size(h, c);
    cf06:	4639      	mov	r1, r7
    cf08:	4630      	mov	r0, r6
    cf0a:	f017 fe46 	bl	24b9a <chunk_size>
    cf0e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    cf10:	4284      	cmp	r4, r0
    cf12:	d207      	bcs.n	cf24 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    cf14:	4630      	mov	r0, r6
    cf16:	4622      	mov	r2, r4
    cf18:	f017 fee2 	bl	24ce0 <split_chunks>
		free_list_add(h, c_end);
    cf1c:	4621      	mov	r1, r4
    cf1e:	4630      	mov	r0, r6
    cf20:	f017 fe40 	bl	24ba4 <free_list_add>
	void *cmem = &buf[c];
    cf24:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cf28:	8873      	ldrh	r3, [r6, #2]
    cf2a:	f043 0301 	orr.w	r3, r3, #1
    cf2e:	8073      	strh	r3, [r6, #2]
    cf30:	e79c      	b.n	ce6c <sys_heap_aligned_alloc+0x2c>
    cf32:	bf00      	nop
    cf34:	0002c5d9 	.word	0x0002c5d9
    cf38:	0002c50d 	.word	0x0002c50d
    cf3c:	0002b939 	.word	0x0002b939
    cf40:	0002c5f4 	.word	0x0002c5f4

0000cf44 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cf44:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf4a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cf4c:	d30e      	bcc.n	cf6c <sys_heap_init+0x28>
    cf4e:	493a      	ldr	r1, [pc, #232]	; (d038 <sys_heap_init+0xf4>)
    cf50:	f240 13eb 	movw	r3, #491	; 0x1eb
    cf54:	4a39      	ldr	r2, [pc, #228]	; (d03c <sys_heap_init+0xf8>)
    cf56:	483a      	ldr	r0, [pc, #232]	; (d040 <sys_heap_init+0xfc>)
    cf58:	f017 ffbd 	bl	24ed6 <assert_print>
    cf5c:	4839      	ldr	r0, [pc, #228]	; (d044 <sys_heap_init+0x100>)
    cf5e:	f017 ffba 	bl	24ed6 <assert_print>
    cf62:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    cf66:	4835      	ldr	r0, [pc, #212]	; (d03c <sys_heap_init+0xf8>)
    cf68:	f017 ffae 	bl	24ec8 <assert_post_action>
    cf6c:	2a04      	cmp	r2, #4
    cf6e:	d80c      	bhi.n	cf8a <sys_heap_init+0x46>
    cf70:	4935      	ldr	r1, [pc, #212]	; (d048 <sys_heap_init+0x104>)
    cf72:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    cf76:	4a31      	ldr	r2, [pc, #196]	; (d03c <sys_heap_init+0xf8>)
    cf78:	4831      	ldr	r0, [pc, #196]	; (d040 <sys_heap_init+0xfc>)
    cf7a:	f017 ffac 	bl	24ed6 <assert_print>
    cf7e:	4833      	ldr	r0, [pc, #204]	; (d04c <sys_heap_init+0x108>)
    cf80:	f017 ffa9 	bl	24ed6 <assert_print>
    cf84:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    cf88:	e7ed      	b.n	cf66 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    cf8a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cf8c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cf8e:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cf90:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cf94:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cf98:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cf9a:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cf9c:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cfa0:	d80c      	bhi.n	cfbc <sys_heap_init+0x78>
    cfa2:	492b      	ldr	r1, [pc, #172]	; (d050 <sys_heap_init+0x10c>)
    cfa4:	f240 13fb 	movw	r3, #507	; 0x1fb
    cfa8:	4a24      	ldr	r2, [pc, #144]	; (d03c <sys_heap_init+0xf8>)
    cfaa:	4825      	ldr	r0, [pc, #148]	; (d040 <sys_heap_init+0xfc>)
    cfac:	f017 ff93 	bl	24ed6 <assert_print>
    cfb0:	4826      	ldr	r0, [pc, #152]	; (d04c <sys_heap_init+0x108>)
    cfb2:	f017 ff90 	bl	24ed6 <assert_print>
    cfb6:	f240 11fb 	movw	r1, #507	; 0x1fb
    cfba:	e7d4      	b.n	cf66 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cfbc:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    cfc0:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cfc2:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cfc4:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cfc8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    cfcc:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cfce:	3107      	adds	r1, #7
    cfd0:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cfd2:	1c4d      	adds	r5, r1, #1
    cfd4:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    cfd6:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    cfd8:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cfda:	d90c      	bls.n	cff6 <sys_heap_init+0xb2>
    cfdc:	491d      	ldr	r1, [pc, #116]	; (d054 <sys_heap_init+0x110>)
    cfde:	f44f 7303 	mov.w	r3, #524	; 0x20c
    cfe2:	4a16      	ldr	r2, [pc, #88]	; (d03c <sys_heap_init+0xf8>)
    cfe4:	4816      	ldr	r0, [pc, #88]	; (d040 <sys_heap_init+0xfc>)
    cfe6:	f017 ff76 	bl	24ed6 <assert_print>
    cfea:	4818      	ldr	r0, [pc, #96]	; (d04c <sys_heap_init+0x108>)
    cfec:	f017 ff73 	bl	24ed6 <assert_print>
    cff0:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cff4:	e7b7      	b.n	cf66 <sys_heap_init+0x22>
    cff6:	f100 050c 	add.w	r5, r0, #12
    cffa:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cffe:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    d002:	42b5      	cmp	r5, r6
    d004:	d1fb      	bne.n	cffe <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    d006:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    d008:	f045 0501 	orr.w	r5, r5, #1
    d00c:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    d00e:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    d010:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    d014:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    d016:	8004      	strh	r4, [r0, #0]
    d018:	8077      	strh	r7, [r6, #2]
    d01a:	1886      	adds	r6, r0, r2
    d01c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    d020:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    d024:	8074      	strh	r4, [r6, #2]
    d026:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    d028:	885a      	ldrh	r2, [r3, #2]
    d02a:	f042 0201 	orr.w	r2, r2, #1
    d02e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    d030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    d034:	f017 bdb6 	b.w	24ba4 <free_list_add>
    d038:	0002c611 	.word	0x0002c611
    d03c:	0002c50d 	.word	0x0002c50d
    d040:	0002b939 	.word	0x0002b939
    d044:	0002c627 	.word	0x0002c627
    d048:	0002c63e 	.word	0x0002c63e
    d04c:	0002c65f 	.word	0x0002c65f
    d050:	0002c678 	.word	0x0002c678
    d054:	0002c6a1 	.word	0x0002c6a1

0000d058 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    d058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d05c:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d05e:	8ba3      	ldrh	r3, [r4, #28]
{
    d060:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    d062:	0719      	lsls	r1, r3, #28
{
    d064:	4615      	mov	r5, r2
	if (processing) {
    d066:	d412      	bmi.n	d08e <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    d068:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d06a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    d06e:	d164      	bne.n	d13a <process_event+0xe2>
			evt = process_recheck(mgr);
    d070:	4620      	mov	r0, r4
    d072:	f017 fea9 	bl	24dc8 <process_recheck>
		}

		if (evt == EVT_NOP) {
    d076:	b188      	cbz	r0, d09c <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    d078:	3801      	subs	r0, #1
    d07a:	2804      	cmp	r0, #4
    d07c:	f200 8134 	bhi.w	d2e8 <process_event+0x290>
    d080:	e8df f010 	tbh	[pc, r0, lsl #1]
    d084:	0132005b 	.word	0x0132005b
    d088:	00d10081 	.word	0x00d10081
    d08c:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    d08e:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    d090:	bf0c      	ite	eq
    d092:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    d096:	f043 0120 	orrne.w	r1, r3, #32
    d09a:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    d09c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d09e:	4620      	mov	r0, r4
    d0a0:	f012 fca4 	bl	1f9ec <z_spin_unlock_valid>
    d0a4:	2800      	cmp	r0, #0
    d0a6:	f040 819b 	bne.w	d3e0 <process_event+0x388>
    d0aa:	4998      	ldr	r1, [pc, #608]	; (d30c <process_event+0x2b4>)
    d0ac:	23c2      	movs	r3, #194	; 0xc2
    d0ae:	4a98      	ldr	r2, [pc, #608]	; (d310 <process_event+0x2b8>)
    d0b0:	4898      	ldr	r0, [pc, #608]	; (d314 <process_event+0x2bc>)
    d0b2:	f017 ff10 	bl	24ed6 <assert_print>
    d0b6:	4621      	mov	r1, r4
    d0b8:	e0b0      	b.n	d21c <process_event+0x1c4>
    d0ba:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    d0be:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    d0c0:	2801      	cmp	r0, #1
    d0c2:	d81e      	bhi.n	d102 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    d0c4:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    d0c6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    d0c8:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    d0ca:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    d0ce:	d114      	bne.n	d0fa <process_event+0xa2>
		*clients = mgr->clients;
    d0d0:	463a      	mov	r2, r7
    d0d2:	e003      	b.n	d0dc <process_event+0x84>
				mgr->refs += 1U;
    d0d4:	8be0      	ldrh	r0, [r4, #30]
    d0d6:	3001      	adds	r0, #1
    d0d8:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    d0da:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    d0dc:	2a00      	cmp	r2, #0
    d0de:	d1f9      	bne.n	d0d4 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d0e0:	f023 0307 	bic.w	r3, r3, #7
    d0e4:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    d0e8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d0ea:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    d0ec:	f017 fe6c 	bl	24dc8 <process_recheck>
    d0f0:	b390      	cbz	r0, d158 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    d0f2:	f042 0220 	orr.w	r2, r2, #32
    d0f6:	83a2      	strh	r2, [r4, #28]
    d0f8:	e02e      	b.n	d158 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d0fa:	f023 0307 	bic.w	r3, r3, #7
    d0fe:	b29a      	uxth	r2, r3
}
    d100:	e7f2      	b.n	d0e8 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    d102:	2a04      	cmp	r2, #4
    d104:	d133      	bne.n	d16e <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d106:	f023 0307 	bic.w	r3, r3, #7
    d10a:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    d10c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d10e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    d110:	f017 fe5a 	bl	24dc8 <process_recheck>
    d114:	b110      	cbz	r0, d11c <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    d116:	f042 0220 	orr.w	r2, r2, #32
    d11a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d11c:	8ba3      	ldrh	r3, [r4, #28]
    d11e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    d122:	4589      	cmp	r9, r1
    d124:	f040 80ea 	bne.w	d2fc <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    d128:	8ba1      	ldrh	r1, [r4, #28]
    d12a:	06ca      	lsls	r2, r1, #27
    d12c:	f140 814f 	bpl.w	d3ce <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    d130:	f021 0310 	bic.w	r3, r1, #16
    d134:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    d136:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    d13a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d13e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    d140:	f1b8 0f00 	cmp.w	r8, #0
    d144:	dab9      	bge.n	d0ba <process_event+0x62>
	list->head = NULL;
    d146:	2200      	movs	r2, #0
		*clients = mgr->clients;
    d148:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d14a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    d14e:	e9c4 2200 	strd	r2, r2, [r4]
    d152:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    d156:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d158:	8ba3      	ldrh	r3, [r4, #28]
    d15a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    d15e:	4589      	cmp	r9, r1
    d160:	f040 80cd 	bne.w	d2fe <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    d164:	2f00      	cmp	r7, #0
    d166:	d0df      	beq.n	d128 <process_event+0xd0>
    d168:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d16a:	46b2      	mov	sl, r6
    d16c:	e044      	b.n	d1f8 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    d16e:	496a      	ldr	r1, [pc, #424]	; (d318 <process_event+0x2c0>)
    d170:	f240 131b 	movw	r3, #283	; 0x11b
    d174:	4a69      	ldr	r2, [pc, #420]	; (d31c <process_event+0x2c4>)
    d176:	4867      	ldr	r0, [pc, #412]	; (d314 <process_event+0x2bc>)
    d178:	f017 fead 	bl	24ed6 <assert_print>
    d17c:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    d180:	4866      	ldr	r0, [pc, #408]	; (d31c <process_event+0x2c4>)
    d182:	f017 fea1 	bl	24ec8 <assert_post_action>
    d186:	b149      	cbz	r1, d19c <process_event+0x144>
    d188:	4965      	ldr	r1, [pc, #404]	; (d320 <process_event+0x2c8>)
    d18a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    d18e:	4a63      	ldr	r2, [pc, #396]	; (d31c <process_event+0x2c4>)
    d190:	4860      	ldr	r0, [pc, #384]	; (d314 <process_event+0x2bc>)
    d192:	f017 fea0 	bl	24ed6 <assert_print>
    d196:	f44f 71ab 	mov.w	r1, #342	; 0x156
    d19a:	e7f1      	b.n	d180 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    d19c:	6823      	ldr	r3, [r4, #0]
    d19e:	b94b      	cbnz	r3, d1b4 <process_event+0x15c>
    d1a0:	4960      	ldr	r1, [pc, #384]	; (d324 <process_event+0x2cc>)
    d1a2:	f240 1357 	movw	r3, #343	; 0x157
    d1a6:	4a5d      	ldr	r2, [pc, #372]	; (d31c <process_event+0x2c4>)
    d1a8:	485a      	ldr	r0, [pc, #360]	; (d314 <process_event+0x2bc>)
    d1aa:	f017 fe94 	bl	24ed6 <assert_print>
    d1ae:	f240 1157 	movw	r1, #343	; 0x157
    d1b2:	e7e5      	b.n	d180 <process_event+0x128>
			transit = mgr->transitions->start;
    d1b4:	6923      	ldr	r3, [r4, #16]
    d1b6:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    d1b8:	b94e      	cbnz	r6, d1ce <process_event+0x176>
    d1ba:	495b      	ldr	r1, [pc, #364]	; (d328 <process_event+0x2d0>)
    d1bc:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    d1c0:	4a56      	ldr	r2, [pc, #344]	; (d31c <process_event+0x2c4>)
    d1c2:	4854      	ldr	r0, [pc, #336]	; (d314 <process_event+0x2bc>)
    d1c4:	f017 fe87 	bl	24ed6 <assert_print>
    d1c8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    d1cc:	e7d8      	b.n	d180 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    d1ce:	460f      	mov	r7, r1
		res = 0;
    d1d0:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d1d2:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d1d6:	8ba3      	ldrh	r3, [r4, #28]
    d1d8:	f023 0307 	bic.w	r3, r3, #7
    d1dc:	f043 0306 	orr.w	r3, r3, #6
    d1e0:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    d1e2:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    d1e4:	68a2      	ldr	r2, [r4, #8]
    d1e6:	2a00      	cmp	r2, #0
    d1e8:	f040 808b 	bne.w	d302 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    d1ec:	2f00      	cmp	r7, #0
    d1ee:	f040 808b 	bne.w	d308 <process_event+0x2b0>
		    || (transit != NULL)) {
    d1f2:	2e00      	cmp	r6, #0
    d1f4:	d098      	beq.n	d128 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d1f6:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    d1f8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    d1fc:	f104 0b14 	add.w	fp, r4, #20
    d200:	4658      	mov	r0, fp
			mgr->flags = flags;
    d202:	83a3      	strh	r3, [r4, #28]
    d204:	f012 fbf2 	bl	1f9ec <z_spin_unlock_valid>
    d208:	2800      	cmp	r0, #0
    d20a:	f040 8097 	bne.w	d33c <process_event+0x2e4>
    d20e:	493f      	ldr	r1, [pc, #252]	; (d30c <process_event+0x2b4>)
    d210:	23c2      	movs	r3, #194	; 0xc2
    d212:	4a3f      	ldr	r2, [pc, #252]	; (d310 <process_event+0x2b8>)
    d214:	483f      	ldr	r0, [pc, #252]	; (d314 <process_event+0x2bc>)
    d216:	f017 fe5e 	bl	24ed6 <assert_print>
    d21a:	4659      	mov	r1, fp
    d21c:	4843      	ldr	r0, [pc, #268]	; (d32c <process_event+0x2d4>)
    d21e:	f017 fe5a 	bl	24ed6 <assert_print>
    d222:	21c2      	movs	r1, #194	; 0xc2
    d224:	e0ae      	b.n	d384 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    d226:	2902      	cmp	r1, #2
    d228:	d009      	beq.n	d23e <process_event+0x1e6>
    d22a:	4941      	ldr	r1, [pc, #260]	; (d330 <process_event+0x2d8>)
    d22c:	f240 135d 	movw	r3, #349	; 0x15d
    d230:	4a3a      	ldr	r2, [pc, #232]	; (d31c <process_event+0x2c4>)
    d232:	4838      	ldr	r0, [pc, #224]	; (d314 <process_event+0x2bc>)
    d234:	f017 fe4f 	bl	24ed6 <assert_print>
    d238:	f240 115d 	movw	r1, #349	; 0x15d
    d23c:	e7a0      	b.n	d180 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    d23e:	8be7      	ldrh	r7, [r4, #30]
    d240:	b14f      	cbz	r7, d256 <process_event+0x1fe>
    d242:	493c      	ldr	r1, [pc, #240]	; (d334 <process_event+0x2dc>)
    d244:	f44f 73af 	mov.w	r3, #350	; 0x15e
    d248:	4a34      	ldr	r2, [pc, #208]	; (d31c <process_event+0x2c4>)
    d24a:	4832      	ldr	r0, [pc, #200]	; (d314 <process_event+0x2bc>)
    d24c:	f017 fe43 	bl	24ed6 <assert_print>
    d250:	f44f 71af 	mov.w	r1, #350	; 0x15e
    d254:	e794      	b.n	d180 <process_event+0x128>
			transit = mgr->transitions->stop;
    d256:	6923      	ldr	r3, [r4, #16]
    d258:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    d25a:	b94e      	cbnz	r6, d270 <process_event+0x218>
    d25c:	4932      	ldr	r1, [pc, #200]	; (d328 <process_event+0x2d0>)
    d25e:	f240 1361 	movw	r3, #353	; 0x161
    d262:	4a2e      	ldr	r2, [pc, #184]	; (d31c <process_event+0x2c4>)
    d264:	482b      	ldr	r0, [pc, #172]	; (d314 <process_event+0x2bc>)
    d266:	f017 fe36 	bl	24ed6 <assert_print>
    d26a:	f240 1161 	movw	r1, #353	; 0x161
    d26e:	e787      	b.n	d180 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d270:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    d272:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d274:	f023 0307 	bic.w	r3, r3, #7
    d278:	f043 0304 	orr.w	r3, r3, #4
    d27c:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d27e:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d282:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d284:	e7ae      	b.n	d1e4 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d286:	2901      	cmp	r1, #1
    d288:	d009      	beq.n	d29e <process_event+0x246>
    d28a:	492b      	ldr	r1, [pc, #172]	; (d338 <process_event+0x2e0>)
    d28c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    d290:	4a22      	ldr	r2, [pc, #136]	; (d31c <process_event+0x2c4>)
    d292:	4820      	ldr	r0, [pc, #128]	; (d314 <process_event+0x2bc>)
    d294:	f017 fe1f 	bl	24ed6 <assert_print>
    d298:	f44f 71b2 	mov.w	r1, #356	; 0x164
    d29c:	e770      	b.n	d180 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    d29e:	6823      	ldr	r3, [r4, #0]
    d2a0:	b94b      	cbnz	r3, d2b6 <process_event+0x25e>
    d2a2:	4920      	ldr	r1, [pc, #128]	; (d324 <process_event+0x2cc>)
    d2a4:	f240 1365 	movw	r3, #357	; 0x165
    d2a8:	4a1c      	ldr	r2, [pc, #112]	; (d31c <process_event+0x2c4>)
    d2aa:	481a      	ldr	r0, [pc, #104]	; (d314 <process_event+0x2bc>)
    d2ac:	f017 fe13 	bl	24ed6 <assert_print>
    d2b0:	f240 1165 	movw	r1, #357	; 0x165
    d2b4:	e764      	b.n	d180 <process_event+0x128>
			transit = mgr->transitions->reset;
    d2b6:	6923      	ldr	r3, [r4, #16]
    d2b8:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    d2ba:	b94e      	cbnz	r6, d2d0 <process_event+0x278>
    d2bc:	491a      	ldr	r1, [pc, #104]	; (d328 <process_event+0x2d0>)
    d2be:	f44f 73b4 	mov.w	r3, #360	; 0x168
    d2c2:	4a16      	ldr	r2, [pc, #88]	; (d31c <process_event+0x2c4>)
    d2c4:	4813      	ldr	r0, [pc, #76]	; (d314 <process_event+0x2bc>)
    d2c6:	f017 fe06 	bl	24ed6 <assert_print>
    d2ca:	f44f 71b4 	mov.w	r1, #360	; 0x168
    d2ce:	e757      	b.n	d180 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    d2d0:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d2d2:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    d2d4:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d2d6:	f023 0307 	bic.w	r3, r3, #7
    d2da:	f043 0305 	orr.w	r3, r3, #5
    d2de:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d2e0:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    d2e4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d2e6:	e77d      	b.n	d1e4 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    d2e8:	490b      	ldr	r1, [pc, #44]	; (d318 <process_event+0x2c0>)
    d2ea:	f240 136b 	movw	r3, #363	; 0x16b
    d2ee:	4a0b      	ldr	r2, [pc, #44]	; (d31c <process_event+0x2c4>)
    d2f0:	4808      	ldr	r0, [pc, #32]	; (d314 <process_event+0x2bc>)
    d2f2:	f017 fdf0 	bl	24ed6 <assert_print>
    d2f6:	f240 116b 	movw	r1, #363	; 0x16b
    d2fa:	e741      	b.n	d180 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    d2fc:	2700      	movs	r7, #0
    d2fe:	2600      	movs	r6, #0
    d300:	e770      	b.n	d1e4 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d302:	f04f 0a01 	mov.w	sl, #1
    d306:	e777      	b.n	d1f8 <process_event+0x1a0>
    d308:	4692      	mov	sl, r2
    d30a:	e775      	b.n	d1f8 <process_event+0x1a0>
    d30c:	0002c79c 	.word	0x0002c79c
    d310:	0002c76f 	.word	0x0002c76f
    d314:	0002b939 	.word	0x0002b939
    d318:	000311d2 	.word	0x000311d2
    d31c:	0002c6cc 	.word	0x0002c6cc
    d320:	0002c6ee 	.word	0x0002c6ee
    d324:	0002c6fa 	.word	0x0002c6fa
    d328:	0002c71d 	.word	0x0002c71d
    d32c:	0002c7b3 	.word	0x0002c7b3
    d330:	0002c734 	.word	0x0002c734
    d334:	0002c74a 	.word	0x0002c74a
    d338:	0002c759 	.word	0x0002c759
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    d33c:	f385 8811 	msr	BASEPRI, r5
    d340:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    d344:	f1ba 0f00 	cmp.w	sl, #0
    d348:	d11e      	bne.n	d388 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    d34a:	2f00      	cmp	r7, #0
    d34c:	d12f      	bne.n	d3ae <process_event+0x356>
			if (transit != NULL) {
    d34e:	b116      	cbz	r6, d356 <process_event+0x2fe>
				transit(mgr, transition_complete);
    d350:	4620      	mov	r0, r4
    d352:	4926      	ldr	r1, [pc, #152]	; (d3ec <process_event+0x394>)
    d354:	47b0      	blx	r6
	__asm__ volatile(
    d356:	f04f 0320 	mov.w	r3, #32
    d35a:	f3ef 8511 	mrs	r5, BASEPRI
    d35e:	f383 8812 	msr	BASEPRI_MAX, r3
    d362:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d366:	4658      	mov	r0, fp
    d368:	f012 fb32 	bl	1f9d0 <z_spin_lock_valid>
    d36c:	bb38      	cbnz	r0, d3be <process_event+0x366>
    d36e:	2394      	movs	r3, #148	; 0x94
    d370:	4a1f      	ldr	r2, [pc, #124]	; (d3f0 <process_event+0x398>)
    d372:	4920      	ldr	r1, [pc, #128]	; (d3f4 <process_event+0x39c>)
    d374:	4820      	ldr	r0, [pc, #128]	; (d3f8 <process_event+0x3a0>)
    d376:	f017 fdae 	bl	24ed6 <assert_print>
    d37a:	4659      	mov	r1, fp
    d37c:	481f      	ldr	r0, [pc, #124]	; (d3fc <process_event+0x3a4>)
    d37e:	f017 fdaa 	bl	24ed6 <assert_print>
    d382:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d384:	481a      	ldr	r0, [pc, #104]	; (d3f0 <process_event+0x398>)
    d386:	e6fc      	b.n	d182 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    d388:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d38a:	2900      	cmp	r1, #0
    d38c:	d0dd      	beq.n	d34a <process_event+0x2f2>
	return node->next;
    d38e:	680d      	ldr	r5, [r1, #0]
    d390:	2900      	cmp	r1, #0
    d392:	d0da      	beq.n	d34a <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    d394:	4643      	mov	r3, r8
    d396:	464a      	mov	r2, r9
    d398:	4620      	mov	r0, r4
    d39a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    d39e:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d3a0:	b11d      	cbz	r5, d3aa <process_event+0x352>
    d3a2:	682b      	ldr	r3, [r5, #0]
    d3a4:	4629      	mov	r1, r5
    d3a6:	461d      	mov	r5, r3
    d3a8:	e7f2      	b.n	d390 <process_event+0x338>
    d3aa:	462b      	mov	r3, r5
    d3ac:	e7fa      	b.n	d3a4 <process_event+0x34c>
    d3ae:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    d3b0:	4643      	mov	r3, r8
    d3b2:	464a      	mov	r2, r9
    d3b4:	4620      	mov	r0, r4
    d3b6:	683f      	ldr	r7, [r7, #0]
    d3b8:	f017 fd32 	bl	24e20 <notify_one>
    d3bc:	e7c5      	b.n	d34a <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    d3be:	4658      	mov	r0, fp
    d3c0:	f012 fb22 	bl	1fa08 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    d3c4:	8ba3      	ldrh	r3, [r4, #28]
    d3c6:	f023 0308 	bic.w	r3, r3, #8
    d3ca:	83a3      	strh	r3, [r4, #28]
    d3cc:	e6ac      	b.n	d128 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    d3ce:	068b      	lsls	r3, r1, #26
    d3d0:	f57f ae64 	bpl.w	d09c <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    d3d4:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    d3d8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    d3da:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    d3de:	e647      	b.n	d070 <process_event+0x18>
	__asm__ volatile(
    d3e0:	f385 8811 	msr	BASEPRI, r5
    d3e4:	f3bf 8f6f 	isb	sy
}
    d3e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3ec:	0000d401 	.word	0x0000d401
    d3f0:	0002c76f 	.word	0x0002c76f
    d3f4:	0002c7c8 	.word	0x0002c7c8
    d3f8:	0002b939 	.word	0x0002b939
    d3fc:	0002c7dd 	.word	0x0002c7dd

0000d400 <transition_complete>:
{
    d400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d402:	4604      	mov	r4, r0
    d404:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d406:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    d40a:	f04f 0320 	mov.w	r3, #32
    d40e:	f3ef 8711 	mrs	r7, BASEPRI
    d412:	f383 8812 	msr	BASEPRI_MAX, r3
    d416:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d41a:	4630      	mov	r0, r6
    d41c:	f012 fad8 	bl	1f9d0 <z_spin_lock_valid>
    d420:	b968      	cbnz	r0, d43e <transition_complete+0x3e>
    d422:	2394      	movs	r3, #148	; 0x94
    d424:	4a0b      	ldr	r2, [pc, #44]	; (d454 <transition_complete+0x54>)
    d426:	490c      	ldr	r1, [pc, #48]	; (d458 <transition_complete+0x58>)
    d428:	480c      	ldr	r0, [pc, #48]	; (d45c <transition_complete+0x5c>)
    d42a:	f017 fd54 	bl	24ed6 <assert_print>
    d42e:	4631      	mov	r1, r6
    d430:	480b      	ldr	r0, [pc, #44]	; (d460 <transition_complete+0x60>)
    d432:	f017 fd50 	bl	24ed6 <assert_print>
    d436:	2194      	movs	r1, #148	; 0x94
    d438:	4806      	ldr	r0, [pc, #24]	; (d454 <transition_complete+0x54>)
    d43a:	f017 fd45 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
    d43e:	4630      	mov	r0, r6
    d440:	f012 fae2 	bl	1fa08 <z_spin_lock_set_owner>
	mgr->last_res = res;
    d444:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    d446:	463a      	mov	r2, r7
    d448:	4620      	mov	r0, r4
}
    d44a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    d44e:	2101      	movs	r1, #1
    d450:	f7ff be02 	b.w	d058 <process_event>
    d454:	0002c76f 	.word	0x0002c76f
    d458:	0002c7c8 	.word	0x0002c7c8
    d45c:	0002b939 	.word	0x0002b939
    d460:	0002c7dd 	.word	0x0002c7dd

0000d464 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d468:	4604      	mov	r4, r0
    d46a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d46c:	f017 fcc8 	bl	24e00 <validate_args>

	if (rv < 0) {
    d470:	1e05      	subs	r5, r0, #0
    d472:	db67      	blt.n	d544 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d474:	f104 0914 	add.w	r9, r4, #20
    d478:	f04f 0320 	mov.w	r3, #32
    d47c:	f3ef 8a11 	mrs	sl, BASEPRI
    d480:	f383 8812 	msr	BASEPRI_MAX, r3
    d484:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d488:	4648      	mov	r0, r9
    d48a:	f012 faa1 	bl	1f9d0 <z_spin_lock_valid>
    d48e:	4680      	mov	r8, r0
    d490:	b960      	cbnz	r0, d4ac <onoff_request+0x48>
    d492:	2394      	movs	r3, #148	; 0x94
    d494:	4a37      	ldr	r2, [pc, #220]	; (d574 <onoff_request+0x110>)
    d496:	4938      	ldr	r1, [pc, #224]	; (d578 <onoff_request+0x114>)
    d498:	4838      	ldr	r0, [pc, #224]	; (d57c <onoff_request+0x118>)
    d49a:	f017 fd1c 	bl	24ed6 <assert_print>
    d49e:	4649      	mov	r1, r9
    d4a0:	4837      	ldr	r0, [pc, #220]	; (d580 <onoff_request+0x11c>)
    d4a2:	f017 fd18 	bl	24ed6 <assert_print>
    d4a6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d4a8:	4832      	ldr	r0, [pc, #200]	; (d574 <onoff_request+0x110>)
    d4aa:	e040      	b.n	d52e <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d4ac:	4648      	mov	r0, r9
    d4ae:	f012 faab 	bl	1fa08 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d4b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d4b6:	8be3      	ldrh	r3, [r4, #30]
    d4b8:	8ba6      	ldrh	r6, [r4, #28]
    d4ba:	4293      	cmp	r3, r2
    d4bc:	f006 0607 	and.w	r6, r6, #7
    d4c0:	d043      	beq.n	d54a <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d4c2:	2e02      	cmp	r6, #2
    d4c4:	d113      	bne.n	d4ee <onoff_request+0x8a>
	rv = state;
    d4c6:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d4c8:	3301      	adds	r3, #1
    d4ca:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d4cc:	4648      	mov	r0, r9
    d4ce:	f012 fa8d 	bl	1f9ec <z_spin_unlock_valid>
    d4d2:	2800      	cmp	r0, #0
    d4d4:	d13f      	bne.n	d556 <onoff_request+0xf2>
    d4d6:	23c2      	movs	r3, #194	; 0xc2
    d4d8:	4a26      	ldr	r2, [pc, #152]	; (d574 <onoff_request+0x110>)
    d4da:	492a      	ldr	r1, [pc, #168]	; (d584 <onoff_request+0x120>)
    d4dc:	4827      	ldr	r0, [pc, #156]	; (d57c <onoff_request+0x118>)
    d4de:	f017 fcfa 	bl	24ed6 <assert_print>
    d4e2:	4649      	mov	r1, r9
    d4e4:	4828      	ldr	r0, [pc, #160]	; (d588 <onoff_request+0x124>)
    d4e6:	f017 fcf6 	bl	24ed6 <assert_print>
    d4ea:	21c2      	movs	r1, #194	; 0xc2
    d4ec:	e7dc      	b.n	d4a8 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d4ee:	2e06      	cmp	r6, #6
    d4f0:	d813      	bhi.n	d51a <onoff_request+0xb6>
    d4f2:	e8df f006 	tbb	[pc, r6]
    d4f6:	2d09      	.short	0x2d09
    d4f8:	04091212 	.word	0x04091212
    d4fc:	09          	.byte	0x09
    d4fd:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d4fe:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d502:	f04f 0800 	mov.w	r8, #0
    d506:	e7e1      	b.n	d4cc <onoff_request+0x68>
	parent->next = child;
    d508:	2300      	movs	r3, #0
    d50a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d50c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d50e:	b983      	cbnz	r3, d532 <onoff_request+0xce>
	list->head = node;
    d510:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d514:	b186      	cbz	r6, d538 <onoff_request+0xd4>
	rv = state;
    d516:	4635      	mov	r5, r6
    d518:	e7f3      	b.n	d502 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d51a:	491c      	ldr	r1, [pc, #112]	; (d58c <onoff_request+0x128>)
    d51c:	4817      	ldr	r0, [pc, #92]	; (d57c <onoff_request+0x118>)
    d51e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d522:	4a1b      	ldr	r2, [pc, #108]	; (d590 <onoff_request+0x12c>)
    d524:	f017 fcd7 	bl	24ed6 <assert_print>
    d528:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d52c:	4818      	ldr	r0, [pc, #96]	; (d590 <onoff_request+0x12c>)
    d52e:	f017 fccb 	bl	24ec8 <assert_post_action>
	parent->next = child;
    d532:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d534:	6067      	str	r7, [r4, #4]
}
    d536:	e7ed      	b.n	d514 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d538:	4652      	mov	r2, sl
    d53a:	2102      	movs	r1, #2
    d53c:	4620      	mov	r0, r4
    d53e:	f7ff fd8b 	bl	d058 <process_event>
    d542:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d544:	4628      	mov	r0, r5
    d546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d54a:	f06f 050a 	mvn.w	r5, #10
    d54e:	e7d8      	b.n	d502 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d550:	f06f 0504 	mvn.w	r5, #4
    d554:	e7d5      	b.n	d502 <onoff_request+0x9e>
	__asm__ volatile(
    d556:	f38a 8811 	msr	BASEPRI, sl
    d55a:	f3bf 8f6f 	isb	sy
		if (notify) {
    d55e:	f1b8 0f00 	cmp.w	r8, #0
    d562:	d0ef      	beq.n	d544 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d564:	2300      	movs	r3, #0
    d566:	4632      	mov	r2, r6
    d568:	4639      	mov	r1, r7
    d56a:	4620      	mov	r0, r4
    d56c:	f017 fc58 	bl	24e20 <notify_one>
    d570:	e7e8      	b.n	d544 <onoff_request+0xe0>
    d572:	bf00      	nop
    d574:	0002c76f 	.word	0x0002c76f
    d578:	0002c7c8 	.word	0x0002c7c8
    d57c:	0002b939 	.word	0x0002b939
    d580:	0002c7dd 	.word	0x0002c7dd
    d584:	0002c79c 	.word	0x0002c79c
    d588:	0002c7b3 	.word	0x0002c7b3
    d58c:	0002c759 	.word	0x0002c759
    d590:	0002c6cc 	.word	0x0002c6cc

0000d594 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d594:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d596:	6842      	ldr	r2, [r0, #4]
    d598:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d59a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d59e:	2a02      	cmp	r2, #2
	notify->result = res;
    d5a0:	6081      	str	r1, [r0, #8]
	switch (method) {
    d5a2:	d00a      	beq.n	d5ba <sys_notify_finalize+0x26>
    d5a4:	2a03      	cmp	r2, #3
    d5a6:	f04f 0100 	mov.w	r1, #0
    d5aa:	d003      	beq.n	d5b4 <sys_notify_finalize+0x20>
    d5ac:	2a01      	cmp	r2, #1
    d5ae:	d10a      	bne.n	d5c6 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d5b0:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d5b2:	e006      	b.n	d5c2 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d5b4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d5b6:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d5b8:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d5ba:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d5bc:	2200      	movs	r2, #0
    d5be:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d5c0:	b958      	cbnz	r0, d5da <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d5c2:	2000      	movs	r0, #0
    d5c4:	e7f8      	b.n	d5b8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d5c6:	4906      	ldr	r1, [pc, #24]	; (d5e0 <sys_notify_finalize+0x4c>)
    d5c8:	4806      	ldr	r0, [pc, #24]	; (d5e4 <sys_notify_finalize+0x50>)
    d5ca:	2345      	movs	r3, #69	; 0x45
    d5cc:	4a06      	ldr	r2, [pc, #24]	; (d5e8 <sys_notify_finalize+0x54>)
    d5ce:	f017 fc82 	bl	24ed6 <assert_print>
    d5d2:	2145      	movs	r1, #69	; 0x45
    d5d4:	4804      	ldr	r0, [pc, #16]	; (d5e8 <sys_notify_finalize+0x54>)
    d5d6:	f017 fc77 	bl	24ec8 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d5da:	f015 fbff 	bl	22ddc <z_impl_k_poll_signal_raise>
    d5de:	e7f0      	b.n	d5c2 <sys_notify_finalize+0x2e>
    d5e0:	000311d2 	.word	0x000311d2
    d5e4:	0002b939 	.word	0x0002b939
    d5e8:	0002c7f5 	.word	0x0002c7f5

0000d5ec <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    d5ec:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d5ee:	4c09      	ldr	r4, [pc, #36]	; (d614 <crc8_ccitt+0x28>)
    d5f0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    d5f2:	4291      	cmp	r1, r2
    d5f4:	d100      	bne.n	d5f8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    d5f6:	bd10      	pop	{r4, pc}
		val ^= p[i];
    d5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
    d5fc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d5fe:	0903      	lsrs	r3, r0, #4
    d600:	5ce3      	ldrb	r3, [r4, r3]
    d602:	0100      	lsls	r0, r0, #4
    d604:	b2c0      	uxtb	r0, r0
    d606:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d608:	0918      	lsrs	r0, r3, #4
    d60a:	5c20      	ldrb	r0, [r4, r0]
    d60c:	011b      	lsls	r3, r3, #4
    d60e:	b2db      	uxtb	r3, r3
    d610:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    d612:	e7ee      	b.n	d5f2 <crc8_ccitt+0x6>
    d614:	0002c818 	.word	0x0002c818

0000d618 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d618:	b5f0      	push	{r4, r5, r6, r7, lr}
    d61a:	4602      	mov	r2, r0
    d61c:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    d61e:	270a      	movs	r7, #10
	size_t val = 0;
    d620:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    d622:	4e07      	ldr	r6, [pc, #28]	; (d640 <extract_decimal+0x28>)
    d624:	460b      	mov	r3, r1
    d626:	781c      	ldrb	r4, [r3, #0]
    d628:	3101      	adds	r1, #1
    d62a:	5d35      	ldrb	r5, [r6, r4]
    d62c:	076d      	lsls	r5, r5, #29
    d62e:	d401      	bmi.n	d634 <extract_decimal+0x1c>
	}
	*str = sp;
    d630:	6013      	str	r3, [r2, #0]
	return val;
}
    d632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d634:	fb07 4300 	mla	r3, r7, r0, r4
    d638:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d63c:	e7f2      	b.n	d624 <extract_decimal+0xc>
    d63e:	bf00      	nop
    d640:	00031234 	.word	0x00031234

0000d644 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d648:	4615      	mov	r5, r2
    d64a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    d64c:	78d3      	ldrb	r3, [r2, #3]
    d64e:	4a22      	ldr	r2, [pc, #136]	; (d6d8 <encode_uint+0x94>)
	switch (specifier) {
    d650:	2b6f      	cmp	r3, #111	; 0x6f
    d652:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d656:	4680      	mov	r8, r0
    d658:	460f      	mov	r7, r1
    d65a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d65e:	d029      	beq.n	d6b4 <encode_uint+0x70>
    d660:	d824      	bhi.n	d6ac <encode_uint+0x68>
		return 10;
    d662:	2b58      	cmp	r3, #88	; 0x58
    d664:	bf0c      	ite	eq
    d666:	2610      	moveq	r6, #16
    d668:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d66a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d66e:	4632      	mov	r2, r6
    d670:	2300      	movs	r3, #0
    d672:	4640      	mov	r0, r8
    d674:	4639      	mov	r1, r7
    d676:	f7fb fc3b 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d67a:	2a09      	cmp	r2, #9
    d67c:	b2d4      	uxtb	r4, r2
    d67e:	d81e      	bhi.n	d6be <encode_uint+0x7a>
    d680:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d682:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d684:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d686:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d68a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d68e:	d301      	bcc.n	d694 <encode_uint+0x50>
    d690:	45d1      	cmp	r9, sl
    d692:	d811      	bhi.n	d6b8 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d694:	782b      	ldrb	r3, [r5, #0]
    d696:	069b      	lsls	r3, r3, #26
    d698:	d505      	bpl.n	d6a6 <encode_uint+0x62>
		if (radix == 8) {
    d69a:	2e08      	cmp	r6, #8
    d69c:	d115      	bne.n	d6ca <encode_uint+0x86>
			conv->altform_0 = true;
    d69e:	78ab      	ldrb	r3, [r5, #2]
    d6a0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d6a4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d6a6:	4648      	mov	r0, r9
    d6a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d6ac:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d6b0:	2b70      	cmp	r3, #112	; 0x70
    d6b2:	e7d7      	b.n	d664 <encode_uint+0x20>
	switch (specifier) {
    d6b4:	2608      	movs	r6, #8
    d6b6:	e7d8      	b.n	d66a <encode_uint+0x26>
		value /= radix;
    d6b8:	4680      	mov	r8, r0
    d6ba:	460f      	mov	r7, r1
    d6bc:	e7d7      	b.n	d66e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d6be:	f1bb 0f01 	cmp.w	fp, #1
    d6c2:	bf0c      	ite	eq
    d6c4:	3437      	addeq	r4, #55	; 0x37
    d6c6:	3457      	addne	r4, #87	; 0x57
    d6c8:	e7db      	b.n	d682 <encode_uint+0x3e>
		} else if (radix == 16) {
    d6ca:	2e10      	cmp	r6, #16
    d6cc:	d1eb      	bne.n	d6a6 <encode_uint+0x62>
			conv->altform_0c = true;
    d6ce:	78ab      	ldrb	r3, [r5, #2]
    d6d0:	f043 0310 	orr.w	r3, r3, #16
    d6d4:	e7e6      	b.n	d6a4 <encode_uint+0x60>
    d6d6:	bf00      	nop
    d6d8:	00031234 	.word	0x00031234

0000d6dc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6e0:	4682      	mov	sl, r0
    d6e2:	4617      	mov	r7, r2
    d6e4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d6e6:	2500      	movs	r5, #0
{
    d6e8:	b097      	sub	sp, #92	; 0x5c
    d6ea:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d6ec:	7838      	ldrb	r0, [r7, #0]
    d6ee:	b908      	cbnz	r0, d6f4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d6f0:	4628      	mov	r0, r5
    d6f2:	e349      	b.n	dd88 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    d6f4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    d6f6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d6f8:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d6fa:	d006      	beq.n	d70a <z_cbvprintf_impl+0x2e>
			OUTC('%');
    d6fc:	9903      	ldr	r1, [sp, #12]
    d6fe:	47d0      	blx	sl
    d700:	2800      	cmp	r0, #0
    d702:	f2c0 8341 	blt.w	dd88 <z_cbvprintf_impl+0x6ac>
    d706:	3501      	adds	r5, #1
		if (bps == NULL) {
    d708:	e1f0      	b.n	daec <z_cbvprintf_impl+0x410>
		} state = {
    d70a:	2218      	movs	r2, #24
    d70c:	2100      	movs	r1, #0
    d70e:	a810      	add	r0, sp, #64	; 0x40
    d710:	f01c f981 	bl	29a16 <memset>
	if (*sp == '%') {
    d714:	787b      	ldrb	r3, [r7, #1]
    d716:	2b25      	cmp	r3, #37	; 0x25
    d718:	f000 80a3 	beq.w	d862 <z_cbvprintf_impl+0x186>
    d71c:	2300      	movs	r3, #0
    d71e:	4698      	mov	r8, r3
    d720:	469e      	mov	lr, r3
    d722:	469c      	mov	ip, r3
    d724:	4618      	mov	r0, r3
    d726:	1c79      	adds	r1, r7, #1
    d728:	460e      	mov	r6, r1
		switch (*sp) {
    d72a:	f811 2b01 	ldrb.w	r2, [r1], #1
    d72e:	2a2b      	cmp	r2, #43	; 0x2b
    d730:	f000 80c6 	beq.w	d8c0 <z_cbvprintf_impl+0x1e4>
    d734:	f200 80bd 	bhi.w	d8b2 <z_cbvprintf_impl+0x1d6>
    d738:	2a20      	cmp	r2, #32
    d73a:	f000 80c4 	beq.w	d8c6 <z_cbvprintf_impl+0x1ea>
    d73e:	2a23      	cmp	r2, #35	; 0x23
    d740:	f000 80c4 	beq.w	d8cc <z_cbvprintf_impl+0x1f0>
    d744:	b12b      	cbz	r3, d752 <z_cbvprintf_impl+0x76>
    d746:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d74a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d74e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d752:	f1b8 0f00 	cmp.w	r8, #0
    d756:	d005      	beq.n	d764 <z_cbvprintf_impl+0x88>
    d758:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d75c:	f043 0320 	orr.w	r3, r3, #32
    d760:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d764:	f1be 0f00 	cmp.w	lr, #0
    d768:	d005      	beq.n	d776 <z_cbvprintf_impl+0x9a>
    d76a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d76e:	f043 0310 	orr.w	r3, r3, #16
    d772:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d776:	f1bc 0f00 	cmp.w	ip, #0
    d77a:	d005      	beq.n	d788 <z_cbvprintf_impl+0xac>
    d77c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d780:	f043 0308 	orr.w	r3, r3, #8
    d784:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d788:	b128      	cbz	r0, d796 <z_cbvprintf_impl+0xba>
    d78a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d78e:	f043 0304 	orr.w	r3, r3, #4
    d792:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d796:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d79a:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d79e:	2944      	cmp	r1, #68	; 0x44
    d7a0:	d103      	bne.n	d7aa <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d7a2:	f36f 1386 	bfc	r3, #6, #1
    d7a6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d7aa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d7ae:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d7b4:	9609      	str	r6, [sp, #36]	; 0x24
    d7b6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d7ba:	f040 808c 	bne.w	d8d6 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d7be:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d7c2:	f043 0301 	orr.w	r3, r3, #1
    d7c6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d7ca:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d7cc:	781a      	ldrb	r2, [r3, #0]
    d7ce:	2a2e      	cmp	r2, #46	; 0x2e
    d7d0:	bf0c      	ite	eq
    d7d2:	2101      	moveq	r1, #1
    d7d4:	2100      	movne	r1, #0
    d7d6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d7da:	f361 0241 	bfi	r2, r1, #1, #1
    d7de:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d7e2:	d10c      	bne.n	d7fe <z_cbvprintf_impl+0x122>
	++sp;
    d7e4:	1c5a      	adds	r2, r3, #1
    d7e6:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d7e8:	785a      	ldrb	r2, [r3, #1]
    d7ea:	2a2a      	cmp	r2, #42	; 0x2a
    d7ec:	f040 8083 	bne.w	d8f6 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d7f0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d7f4:	3302      	adds	r3, #2
		conv->prec_star = true;
    d7f6:	f042 0204 	orr.w	r2, r2, #4
    d7fa:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d7fe:	781a      	ldrb	r2, [r3, #0]
    d800:	2a6c      	cmp	r2, #108	; 0x6c
    d802:	f000 80a4 	beq.w	d94e <z_cbvprintf_impl+0x272>
    d806:	f200 8086 	bhi.w	d916 <z_cbvprintf_impl+0x23a>
    d80a:	2a68      	cmp	r2, #104	; 0x68
    d80c:	f000 808c 	beq.w	d928 <z_cbvprintf_impl+0x24c>
    d810:	2a6a      	cmp	r2, #106	; 0x6a
    d812:	f000 80a5 	beq.w	d960 <z_cbvprintf_impl+0x284>
    d816:	2a4c      	cmp	r2, #76	; 0x4c
    d818:	f000 80aa 	beq.w	d970 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d81c:	461a      	mov	r2, r3
    d81e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d822:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d824:	9204      	str	r2, [sp, #16]
    d826:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d82a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d82e:	f200 8117 	bhi.w	da60 <z_cbvprintf_impl+0x384>
    d832:	2b6d      	cmp	r3, #109	; 0x6d
    d834:	f200 80a9 	bhi.w	d98a <z_cbvprintf_impl+0x2ae>
    d838:	2b69      	cmp	r3, #105	; 0x69
    d83a:	f200 8111 	bhi.w	da60 <z_cbvprintf_impl+0x384>
    d83e:	2b57      	cmp	r3, #87	; 0x57
    d840:	f200 80be 	bhi.w	d9c0 <z_cbvprintf_impl+0x2e4>
    d844:	2b41      	cmp	r3, #65	; 0x41
    d846:	d003      	beq.n	d850 <z_cbvprintf_impl+0x174>
    d848:	3b45      	subs	r3, #69	; 0x45
    d84a:	2b02      	cmp	r3, #2
    d84c:	f200 8108 	bhi.w	da60 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d850:	2204      	movs	r2, #4
    d852:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d856:	f362 0302 	bfi	r3, r2, #0, #3
    d85a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d85e:	2301      	movs	r3, #1
			break;
    d860:	e0ca      	b.n	d9f8 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d862:	1cba      	adds	r2, r7, #2
    d864:	9204      	str	r2, [sp, #16]
    d866:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d86a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d86e:	07da      	lsls	r2, r3, #31
    d870:	f140 80fd 	bpl.w	da6e <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d874:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d878:	f1b9 0f00 	cmp.w	r9, #0
    d87c:	da07      	bge.n	d88e <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d87e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d882:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d886:	f042 0204 	orr.w	r2, r2, #4
    d88a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d88e:	075e      	lsls	r6, r3, #29
    d890:	f140 80f6 	bpl.w	da80 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d894:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d898:	f1bb 0f00 	cmp.w	fp, #0
    d89c:	f280 80f5 	bge.w	da8a <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d8a0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d8a4:	f36f 0341 	bfc	r3, #1, #1
    d8a8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d8ac:	f04f 3bff 	mov.w	fp, #4294967295
    d8b0:	e0eb      	b.n	da8a <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d8b2:	2a2d      	cmp	r2, #45	; 0x2d
    d8b4:	d00d      	beq.n	d8d2 <z_cbvprintf_impl+0x1f6>
    d8b6:	2a30      	cmp	r2, #48	; 0x30
    d8b8:	f47f af44 	bne.w	d744 <z_cbvprintf_impl+0x68>
    d8bc:	2301      	movs	r3, #1
	} while (loop);
    d8be:	e733      	b.n	d728 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d8c0:	f04f 0c01 	mov.w	ip, #1
    d8c4:	e730      	b.n	d728 <z_cbvprintf_impl+0x4c>
    d8c6:	f04f 0e01 	mov.w	lr, #1
    d8ca:	e72d      	b.n	d728 <z_cbvprintf_impl+0x4c>
    d8cc:	f04f 0801 	mov.w	r8, #1
    d8d0:	e72a      	b.n	d728 <z_cbvprintf_impl+0x4c>
    d8d2:	2001      	movs	r0, #1
    d8d4:	e728      	b.n	d728 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d8d6:	a809      	add	r0, sp, #36	; 0x24
    d8d8:	f7ff fe9e 	bl	d618 <extract_decimal>
	if (sp != wp) {
    d8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d8de:	42b3      	cmp	r3, r6
    d8e0:	f43f af74 	beq.w	d7cc <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d8e4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d8e8:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d8ea:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d8ec:	f360 0241 	bfi	r2, r0, #1, #1
    d8f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d8f4:	e76a      	b.n	d7cc <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d8f6:	a809      	add	r0, sp, #36	; 0x24
    d8f8:	f7ff fe8e 	bl	d618 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d8fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d900:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d902:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d906:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d90a:	f362 0341 	bfi	r3, r2, #1, #1
    d90e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d912:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d914:	e773      	b.n	d7fe <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d916:	2a74      	cmp	r2, #116	; 0x74
    d918:	d026      	beq.n	d968 <z_cbvprintf_impl+0x28c>
    d91a:	2a7a      	cmp	r2, #122	; 0x7a
    d91c:	f47f af7e 	bne.w	d81c <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d920:	2106      	movs	r1, #6
    d922:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d926:	e00c      	b.n	d942 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d928:	785a      	ldrb	r2, [r3, #1]
    d92a:	2a68      	cmp	r2, #104	; 0x68
    d92c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d930:	d106      	bne.n	d940 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d932:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d934:	f361 02c6 	bfi	r2, r1, #3, #4
    d938:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d93c:	3302      	adds	r3, #2
    d93e:	e76d      	b.n	d81c <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d940:	2102      	movs	r1, #2
    d942:	f361 02c6 	bfi	r2, r1, #3, #4
    d946:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d94a:	3301      	adds	r3, #1
    d94c:	e766      	b.n	d81c <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d94e:	785a      	ldrb	r2, [r3, #1]
    d950:	2a6c      	cmp	r2, #108	; 0x6c
    d952:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d956:	d101      	bne.n	d95c <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d958:	2104      	movs	r1, #4
    d95a:	e7eb      	b.n	d934 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d95c:	2103      	movs	r1, #3
    d95e:	e7f0      	b.n	d942 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d960:	2105      	movs	r1, #5
    d962:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d966:	e7ec      	b.n	d942 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d968:	2107      	movs	r1, #7
    d96a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d96e:	e7e8      	b.n	d942 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d970:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d974:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d978:	f022 0202 	bic.w	r2, r2, #2
    d97c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d980:	f042 0202 	orr.w	r2, r2, #2
    d984:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d988:	e7df      	b.n	d94a <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d98a:	3b6e      	subs	r3, #110	; 0x6e
    d98c:	b2d9      	uxtb	r1, r3
    d98e:	2301      	movs	r3, #1
    d990:	408b      	lsls	r3, r1
    d992:	f240 4182 	movw	r1, #1154	; 0x482
    d996:	420b      	tst	r3, r1
    d998:	d138      	bne.n	da0c <z_cbvprintf_impl+0x330>
    d99a:	f013 0f24 	tst.w	r3, #36	; 0x24
    d99e:	d152      	bne.n	da46 <z_cbvprintf_impl+0x36a>
    d9a0:	07d8      	lsls	r0, r3, #31
    d9a2:	d55d      	bpl.n	da60 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d9a4:	2103      	movs	r1, #3
    d9a6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d9aa:	f361 0302 	bfi	r3, r1, #0, #3
    d9ae:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d9b2:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d9b6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d9ba:	424b      	negs	r3, r1
    d9bc:	414b      	adcs	r3, r1
    d9be:	e01b      	b.n	d9f8 <z_cbvprintf_impl+0x31c>
    d9c0:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d9c2:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d9c6:	b2c9      	uxtb	r1, r1
    d9c8:	fa00 f101 	lsl.w	r1, r0, r1
    d9cc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d9d0:	f47f af3e 	bne.w	d850 <z_cbvprintf_impl+0x174>
    d9d4:	f640 0601 	movw	r6, #2049	; 0x801
    d9d8:	4231      	tst	r1, r6
    d9da:	d11d      	bne.n	da18 <z_cbvprintf_impl+0x33c>
    d9dc:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d9e0:	d03e      	beq.n	da60 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d9e2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d9e6:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d9ea:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d9ee:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d9f0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d9f4:	d034      	beq.n	da60 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d9f6:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d9f8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d9fc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    da00:	430b      	orrs	r3, r1
    da02:	f363 0241 	bfi	r2, r3, #1, #1
    da06:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    da0a:	e72e      	b.n	d86a <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    da0c:	2102      	movs	r1, #2
    da0e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    da12:	f361 0302 	bfi	r3, r1, #0, #3
    da16:	e7e8      	b.n	d9ea <z_cbvprintf_impl+0x30e>
    da18:	2002      	movs	r0, #2
    da1a:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    da1e:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    da22:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    da26:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    da28:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    da2c:	bf02      	ittt	eq
    da2e:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    da32:	f041 0101 	orreq.w	r1, r1, #1
    da36:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    da3a:	2b63      	cmp	r3, #99	; 0x63
    da3c:	d1db      	bne.n	d9f6 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    da3e:	1e13      	subs	r3, r2, #0
    da40:	bf18      	it	ne
    da42:	2301      	movne	r3, #1
    da44:	e7d8      	b.n	d9f8 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    da46:	2103      	movs	r1, #3
    da48:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    da4c:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    da50:	f361 0302 	bfi	r3, r1, #0, #3
    da54:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    da58:	bf14      	ite	ne
    da5a:	2301      	movne	r3, #1
    da5c:	2300      	moveq	r3, #0
    da5e:	e7cb      	b.n	d9f8 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    da60:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    da64:	f043 0301 	orr.w	r3, r3, #1
    da68:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    da6c:	e7c3      	b.n	d9f6 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    da6e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    da72:	2a00      	cmp	r2, #0
		int width = -1;
    da74:	bfac      	ite	ge
    da76:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    da7a:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    da7e:	e706      	b.n	d88e <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    da80:	0798      	lsls	r0, r3, #30
    da82:	f57f af13 	bpl.w	d8ac <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    da86:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    da8a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    da8c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    da90:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    da94:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    da98:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    da9c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    da9e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    daa2:	d133      	bne.n	db0c <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    daa4:	1ecb      	subs	r3, r1, #3
    daa6:	2b04      	cmp	r3, #4
    daa8:	d804      	bhi.n	dab4 <z_cbvprintf_impl+0x3d8>
    daaa:	e8df f003 	tbb	[pc, r3]
    daae:	4621      	.short	0x4621
    dab0:	2146      	.short	0x2146
    dab2:	21          	.byte	0x21
    dab3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    dab4:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    dab6:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    dab8:	ea4f 72e3 	mov.w	r2, r3, asr #31
    dabc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    dac0:	d11c      	bne.n	dafc <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    dac2:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    dac6:	17da      	asrs	r2, r3, #31
    dac8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    dacc:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    dace:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    dad2:	f013 0603 	ands.w	r6, r3, #3
    dad6:	d050      	beq.n	db7a <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    dad8:	463a      	mov	r2, r7
    dada:	4650      	mov	r0, sl
    dadc:	9b04      	ldr	r3, [sp, #16]
    dade:	9903      	ldr	r1, [sp, #12]
    dae0:	f017 f9db 	bl	24e9a <outs>
    dae4:	2800      	cmp	r0, #0
    dae6:	f2c0 814f 	blt.w	dd88 <z_cbvprintf_impl+0x6ac>
    daea:	4405      	add	r5, r0
			continue;
    daec:	9f04      	ldr	r7, [sp, #16]
    daee:	e5fd      	b.n	d6ec <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    daf0:	f854 3b04 	ldr.w	r3, [r4], #4
    daf4:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    daf6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    dafa:	e7e8      	b.n	dace <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    dafc:	2902      	cmp	r1, #2
    dafe:	d1e5      	bne.n	dacc <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    db00:	b21a      	sxth	r2, r3
    db02:	f343 33c0 	sbfx	r3, r3, #15, #1
    db06:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    db0a:	e7df      	b.n	dacc <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    db0c:	2b02      	cmp	r3, #2
    db0e:	d124      	bne.n	db5a <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    db10:	1ecb      	subs	r3, r1, #3
    db12:	2b04      	cmp	r3, #4
    db14:	d804      	bhi.n	db20 <z_cbvprintf_impl+0x444>
    db16:	e8df f003 	tbb	[pc, r3]
    db1a:	1018      	.short	0x1018
    db1c:	1810      	.short	0x1810
    db1e:	18          	.byte	0x18
    db1f:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    db20:	2901      	cmp	r1, #1
    db22:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    db26:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    db2a:	d014      	beq.n	db56 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    db2c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    db2e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    db32:	d1cc      	bne.n	dace <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    db34:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    db36:	9310      	str	r3, [sp, #64]	; 0x40
    db38:	e7c9      	b.n	dace <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    db3a:	3407      	adds	r4, #7
    db3c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    db40:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    db44:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    db48:	e7c1      	b.n	dace <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    db4a:	f854 3b04 	ldr.w	r3, [r4], #4
    db4e:	9310      	str	r3, [sp, #64]	; 0x40
    db50:	2300      	movs	r3, #0
    db52:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    db54:	e7bb      	b.n	dace <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    db56:	b2db      	uxtb	r3, r3
    db58:	e7cd      	b.n	daf6 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    db5a:	2b04      	cmp	r3, #4
    db5c:	d108      	bne.n	db70 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    db5e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    db60:	f024 0407 	bic.w	r4, r4, #7
    db64:	e9d4 2300 	ldrd	r2, r3, [r4]
    db68:	3408      	adds	r4, #8
    db6a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    db6e:	e7ae      	b.n	dace <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    db70:	2b03      	cmp	r3, #3
    db72:	d1ac      	bne.n	dace <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    db74:	f854 3b04 	ldr.w	r3, [r4], #4
    db78:	e7dd      	b.n	db36 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    db7a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    db7e:	2878      	cmp	r0, #120	; 0x78
    db80:	d8b4      	bhi.n	daec <z_cbvprintf_impl+0x410>
    db82:	2862      	cmp	r0, #98	; 0x62
    db84:	d81c      	bhi.n	dbc0 <z_cbvprintf_impl+0x4e4>
    db86:	2825      	cmp	r0, #37	; 0x25
    db88:	f43f adb8 	beq.w	d6fc <z_cbvprintf_impl+0x20>
    db8c:	2858      	cmp	r0, #88	; 0x58
    db8e:	d1ad      	bne.n	daec <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    db90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    db94:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    db98:	9300      	str	r3, [sp, #0]
    db9a:	aa12      	add	r2, sp, #72	; 0x48
    db9c:	ab0a      	add	r3, sp, #40	; 0x28
    db9e:	f7ff fd51 	bl	d644 <encode_uint>
			if (precision >= 0) {
    dba2:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    dba6:	4607      	mov	r7, r0
			if (precision >= 0) {
    dba8:	f280 8097 	bge.w	dcda <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    dbac:	2f00      	cmp	r7, #0
    dbae:	d09d      	beq.n	daec <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    dbb0:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    dbb4:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    dbb8:	2e00      	cmp	r6, #0
    dbba:	d04e      	beq.n	dc5a <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    dbbc:	3001      	adds	r0, #1
    dbbe:	e04c      	b.n	dc5a <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    dbc0:	3863      	subs	r0, #99	; 0x63
    dbc2:	2815      	cmp	r0, #21
    dbc4:	d892      	bhi.n	daec <z_cbvprintf_impl+0x410>
    dbc6:	a201      	add	r2, pc, #4	; (adr r2, dbcc <z_cbvprintf_impl+0x4f0>)
    dbc8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    dbcc:	0000dc4b 	.word	0x0000dc4b
    dbd0:	0000dcb1 	.word	0x0000dcb1
    dbd4:	0000daed 	.word	0x0000daed
    dbd8:	0000daed 	.word	0x0000daed
    dbdc:	0000daed 	.word	0x0000daed
    dbe0:	0000daed 	.word	0x0000daed
    dbe4:	0000dcb1 	.word	0x0000dcb1
    dbe8:	0000daed 	.word	0x0000daed
    dbec:	0000daed 	.word	0x0000daed
    dbf0:	0000daed 	.word	0x0000daed
    dbf4:	0000daed 	.word	0x0000daed
    dbf8:	0000dd39 	.word	0x0000dd39
    dbfc:	0000dcd5 	.word	0x0000dcd5
    dc00:	0000dcfb 	.word	0x0000dcfb
    dc04:	0000daed 	.word	0x0000daed
    dc08:	0000daed 	.word	0x0000daed
    dc0c:	0000dc25 	.word	0x0000dc25
    dc10:	0000daed 	.word	0x0000daed
    dc14:	0000dcd5 	.word	0x0000dcd5
    dc18:	0000daed 	.word	0x0000daed
    dc1c:	0000daed 	.word	0x0000daed
    dc20:	0000dcd5 	.word	0x0000dcd5
			if (precision >= 0) {
    dc24:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    dc28:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    dc2a:	db0a      	blt.n	dc42 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    dc2c:	4659      	mov	r1, fp
    dc2e:	4638      	mov	r0, r7
    dc30:	f01c f853 	bl	29cda <strnlen>
			bpe = bps + len;
    dc34:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    dc38:	2f00      	cmp	r7, #0
    dc3a:	f43f af57 	beq.w	daec <z_cbvprintf_impl+0x410>
		char sign = 0;
    dc3e:	2600      	movs	r6, #0
    dc40:	e00b      	b.n	dc5a <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    dc42:	4638      	mov	r0, r7
    dc44:	f7fb fb8c 	bl	9360 <strlen>
    dc48:	e7f4      	b.n	dc34 <z_cbvprintf_impl+0x558>
		char sign = 0;
    dc4a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    dc4c:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    dc4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    dc50:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    dc54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    dc58:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    dc5a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    dc5e:	f013 0210 	ands.w	r2, r3, #16
    dc62:	9205      	str	r2, [sp, #20]
    dc64:	f000 8083 	beq.w	dd6e <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    dc68:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    dc6a:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    dc6c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    dc70:	bf48      	it	mi
    dc72:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    dc74:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    dc76:	bf48      	it	mi
    dc78:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    dc7a:	f1b9 0f00 	cmp.w	r9, #0
    dc7e:	f340 8090 	ble.w	dda2 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    dc82:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    dc86:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    dc8a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    dc8e:	0750      	lsls	r0, r2, #29
    dc90:	9306      	str	r3, [sp, #24]
    dc92:	f100 8086 	bmi.w	dda2 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    dc96:	0651      	lsls	r1, r2, #25
    dc98:	d579      	bpl.n	dd8e <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    dc9a:	b13e      	cbz	r6, dcac <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    dc9c:	4630      	mov	r0, r6
    dc9e:	9903      	ldr	r1, [sp, #12]
    dca0:	47d0      	blx	sl
    dca2:	2800      	cmp	r0, #0
    dca4:	db70      	blt.n	dd88 <z_cbvprintf_impl+0x6ac>
    dca6:	9b06      	ldr	r3, [sp, #24]
    dca8:	3501      	adds	r5, #1
    dcaa:	461e      	mov	r6, r3
					pad = '0';
    dcac:	2230      	movs	r2, #48	; 0x30
    dcae:	e06f      	b.n	dd90 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    dcb0:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    dcb2:	bf5a      	itte	pl
    dcb4:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    dcb8:	015e      	lslpl	r6, r3, #5
				sign = '+';
    dcba:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    dcbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	f6bf af65 	bge.w	db90 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    dcc6:	4252      	negs	r2, r2
    dcc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    dccc:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    dcce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    dcd2:	e75d      	b.n	db90 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    dcd4:	2600      	movs	r6, #0
    dcd6:	e75b      	b.n	db90 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    dcd8:	2600      	movs	r6, #0
				conv->flag_zero = false;
    dcda:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    dcde:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    dce2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    dce4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    dce8:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    dcea:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    dcee:	f67f af5d 	bls.w	dbac <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    dcf2:	ebab 0303 	sub.w	r3, fp, r3
    dcf6:	9313      	str	r3, [sp, #76]	; 0x4c
    dcf8:	e758      	b.n	dbac <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    dcfa:	9810      	ldr	r0, [sp, #64]	; 0x40
    dcfc:	b380      	cbz	r0, dd60 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    dcfe:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    dd02:	ab0a      	add	r3, sp, #40	; 0x28
    dd04:	2100      	movs	r1, #0
    dd06:	f8cd 8000 	str.w	r8, [sp]
    dd0a:	aa12      	add	r2, sp, #72	; 0x48
    dd0c:	f7ff fc9a 	bl	d644 <encode_uint>
				conv->altform_0c = true;
    dd10:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    dd14:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    dd18:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    dd1c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    dd20:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    dd24:	4607      	mov	r7, r0
				conv->altform_0c = true;
    dd26:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    dd2a:	dad5      	bge.n	dcd8 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    dd2c:	2800      	cmp	r0, #0
    dd2e:	f43f aedd 	beq.w	daec <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    dd32:	eba8 0000 	sub.w	r0, r8, r0
    dd36:	e782      	b.n	dc3e <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    dd38:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    dd3a:	2907      	cmp	r1, #7
    dd3c:	f63f aed6 	bhi.w	daec <z_cbvprintf_impl+0x410>
    dd40:	e8df f001 	tbb	[pc, r1]
    dd44:	0c06040c 	.word	0x0c06040c
    dd48:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    dd4c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    dd4e:	e6cd      	b.n	daec <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    dd50:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    dd52:	e6cb      	b.n	daec <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    dd54:	17ea      	asrs	r2, r5, #31
    dd56:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    dd5a:	e6c7      	b.n	daec <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    dd5c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    dd5e:	e6c5      	b.n	daec <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    dd60:	f8df 80bc 	ldr.w	r8, [pc, #188]	; de20 <z_cbvprintf_impl+0x744>
		char sign = 0;
    dd64:	4606      	mov	r6, r0
    dd66:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    dd6a:	2005      	movs	r0, #5
    dd6c:	e775      	b.n	dc5a <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    dd6e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    dd70:	bf48      	it	mi
    dd72:	3001      	addmi	r0, #1
    dd74:	e779      	b.n	dc6a <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    dd76:	4610      	mov	r0, r2
    dd78:	9307      	str	r3, [sp, #28]
    dd7a:	9206      	str	r2, [sp, #24]
    dd7c:	9903      	ldr	r1, [sp, #12]
    dd7e:	47d0      	blx	sl
    dd80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    dd84:	2800      	cmp	r0, #0
    dd86:	da04      	bge.n	dd92 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    dd88:	b017      	add	sp, #92	; 0x5c
    dd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    dd8e:	2220      	movs	r2, #32
					pad = '0';
    dd90:	464b      	mov	r3, r9
				while (width-- > 0) {
    dd92:	4619      	mov	r1, r3
    dd94:	2900      	cmp	r1, #0
    dd96:	f103 33ff 	add.w	r3, r3, #4294967295
    dd9a:	dcec      	bgt.n	dd76 <z_cbvprintf_impl+0x69a>
    dd9c:	444d      	add	r5, r9
    dd9e:	4699      	mov	r9, r3
    dda0:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    dda2:	b12e      	cbz	r6, ddb0 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    dda4:	4630      	mov	r0, r6
    dda6:	9903      	ldr	r1, [sp, #12]
    dda8:	47d0      	blx	sl
    ddaa:	2800      	cmp	r0, #0
    ddac:	dbec      	blt.n	dd88 <z_cbvprintf_impl+0x6ac>
    ddae:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ddb0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ddb4:	06da      	lsls	r2, r3, #27
    ddb6:	d401      	bmi.n	ddbc <z_cbvprintf_impl+0x6e0>
    ddb8:	071b      	lsls	r3, r3, #28
    ddba:	d505      	bpl.n	ddc8 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    ddbc:	2030      	movs	r0, #48	; 0x30
    ddbe:	9903      	ldr	r1, [sp, #12]
    ddc0:	47d0      	blx	sl
    ddc2:	2800      	cmp	r0, #0
    ddc4:	dbe0      	blt.n	dd88 <z_cbvprintf_impl+0x6ac>
    ddc6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ddc8:	9b05      	ldr	r3, [sp, #20]
    ddca:	b133      	cbz	r3, ddda <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    ddcc:	9903      	ldr	r1, [sp, #12]
    ddce:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    ddd2:	47d0      	blx	sl
    ddd4:	2800      	cmp	r0, #0
    ddd6:	dbd7      	blt.n	dd88 <z_cbvprintf_impl+0x6ac>
    ddd8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ddda:	44ab      	add	fp, r5
    dddc:	e005      	b.n	ddea <z_cbvprintf_impl+0x70e>
				OUTC('0');
    ddde:	2030      	movs	r0, #48	; 0x30
    dde0:	9903      	ldr	r1, [sp, #12]
    dde2:	47d0      	blx	sl
    dde4:	2800      	cmp	r0, #0
    dde6:	dbcf      	blt.n	dd88 <z_cbvprintf_impl+0x6ac>
    dde8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ddea:	ebab 0305 	sub.w	r3, fp, r5
    ddee:	2b00      	cmp	r3, #0
    ddf0:	dcf5      	bgt.n	ddde <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    ddf2:	4643      	mov	r3, r8
    ddf4:	463a      	mov	r2, r7
    ddf6:	4650      	mov	r0, sl
    ddf8:	9903      	ldr	r1, [sp, #12]
    ddfa:	f017 f84e 	bl	24e9a <outs>
    ddfe:	2800      	cmp	r0, #0
    de00:	dbc2      	blt.n	dd88 <z_cbvprintf_impl+0x6ac>
    de02:	4405      	add	r5, r0
		while (width > 0) {
    de04:	44a9      	add	r9, r5
    de06:	eba9 0305 	sub.w	r3, r9, r5
    de0a:	2b00      	cmp	r3, #0
    de0c:	f77f ae6e 	ble.w	daec <z_cbvprintf_impl+0x410>
			OUTC(' ');
    de10:	2020      	movs	r0, #32
    de12:	9903      	ldr	r1, [sp, #12]
    de14:	47d0      	blx	sl
    de16:	2800      	cmp	r0, #0
    de18:	dbb6      	blt.n	dd88 <z_cbvprintf_impl+0x6ac>
    de1a:	3501      	adds	r5, #1
			--width;
    de1c:	e7f3      	b.n	de06 <z_cbvprintf_impl+0x72a>
    de1e:	bf00      	nop
    de20:	0002c82d 	.word	0x0002c82d

0000de24 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    de24:	b148      	cbz	r0, de3a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    de26:	4b05      	ldr	r3, [pc, #20]	; (de3c <arch_busy_wait+0x18>)
    de28:	4a05      	ldr	r2, [pc, #20]	; (de40 <arch_busy_wait+0x1c>)
    de2a:	681b      	ldr	r3, [r3, #0]
    de2c:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    de30:	4358      	muls	r0, r3
    de32:	4b04      	ldr	r3, [pc, #16]	; (de44 <arch_busy_wait+0x20>)
    de34:	f043 0301 	orr.w	r3, r3, #1
    de38:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    de3a:	4770      	bx	lr
    de3c:	20008684 	.word	0x20008684
    de40:	000f4240 	.word	0x000f4240
    de44:	0002ab60 	.word	0x0002ab60

0000de48 <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    de48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    de4a:	ab0b      	add	r3, sp, #44	; 0x2c
    de4c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    de4e:	9303      	str	r3, [sp, #12]
    de50:	4b05      	ldr	r3, [pc, #20]	; (de68 <z_log_msg_runtime_create.constprop.0+0x20>)
    de52:	2201      	movs	r2, #1
    de54:	9302      	str	r3, [sp, #8]
    de56:	2300      	movs	r3, #0
    de58:	4618      	mov	r0, r3
    de5a:	e9cd 3300 	strd	r3, r3, [sp]
    de5e:	f000 fb09 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    de62:	b007      	add	sp, #28
    de64:	f85d fb04 	ldr.w	pc, [sp], #4
    de68:	0002c832 	.word	0x0002c832

0000de6c <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    de6c:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    de6e:	b570      	push	{r4, r5, r6, lr}
    de70:	4605      	mov	r5, r0
    de72:	461e      	mov	r6, r3
    de74:	4608      	mov	r0, r1
    de76:	d90b      	bls.n	de90 <ppi_ipc_to_rtc.isra.0+0x24>
    de78:	491d      	ldr	r1, [pc, #116]	; (def0 <ppi_ipc_to_rtc.isra.0+0x84>)
    de7a:	481e      	ldr	r0, [pc, #120]	; (def4 <ppi_ipc_to_rtc.isra.0+0x88>)
    de7c:	f240 13e7 	movw	r3, #487	; 0x1e7
    de80:	4a1d      	ldr	r2, [pc, #116]	; (def8 <ppi_ipc_to_rtc.isra.0+0x8c>)
    de82:	f017 f828 	bl	24ed6 <assert_print>
    de86:	f240 11e7 	movw	r1, #487	; 0x1e7
    de8a:	481b      	ldr	r0, [pc, #108]	; (def8 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    de8c:	f017 f81c 	bl	24ec8 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    de90:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    de92:	f00e f917 	bl	1c0c4 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    de96:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    de9a:	b1ae      	cbz	r6, dec8 <ppi_ipc_to_rtc.isra.0+0x5c>
    de9c:	b950      	cbnz	r0, deb4 <ppi_ipc_to_rtc.isra.0+0x48>
    de9e:	4917      	ldr	r1, [pc, #92]	; (defc <ppi_ipc_to_rtc.isra.0+0x90>)
    dea0:	f240 234e 	movw	r3, #590	; 0x24e
    dea4:	4a16      	ldr	r2, [pc, #88]	; (df00 <ppi_ipc_to_rtc.isra.0+0x94>)
    dea6:	4813      	ldr	r0, [pc, #76]	; (def4 <ppi_ipc_to_rtc.isra.0+0x88>)
    dea8:	f017 f815 	bl	24ed6 <assert_print>
    deac:	f240 214e 	movw	r1, #590	; 0x24e
    deb0:	4813      	ldr	r0, [pc, #76]	; (df00 <ppi_ipc_to_rtc.isra.0+0x94>)
    deb2:	e7eb      	b.n	de8c <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    deb4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    deb8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    debc:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    dec0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    dec4:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    dec6:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    dec8:	b948      	cbnz	r0, dede <ppi_ipc_to_rtc.isra.0+0x72>
    deca:	490c      	ldr	r1, [pc, #48]	; (defc <ppi_ipc_to_rtc.isra.0+0x90>)
    decc:	f240 2363 	movw	r3, #611	; 0x263
    ded0:	4a0b      	ldr	r2, [pc, #44]	; (df00 <ppi_ipc_to_rtc.isra.0+0x94>)
    ded2:	4808      	ldr	r0, [pc, #32]	; (def4 <ppi_ipc_to_rtc.isra.0+0x88>)
    ded4:	f016 ffff 	bl	24ed6 <assert_print>
    ded8:	f240 2163 	movw	r1, #611	; 0x263
    dedc:	e7e8      	b.n	deb0 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    dede:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    dee2:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    dee6:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    deea:	6016      	str	r6, [r2, #0]
    deec:	e7eb      	b.n	dec6 <ppi_ipc_to_rtc.isra.0+0x5a>
    deee:	bf00      	nop
    def0:	0002c88c 	.word	0x0002c88c
    def4:	0002b939 	.word	0x0002b939
    def8:	0002c85a 	.word	0x0002c85a
    defc:	0002c8cf 	.word	0x0002c8cf
    df00:	0002c897 	.word	0x0002c897

0000df04 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    df04:	b570      	push	{r4, r5, r6, lr}
    df06:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    df08:	a805      	add	r0, sp, #20
    df0a:	f00e ff8f 	bl	1ce2c <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    df0e:	4b25      	ldr	r3, [pc, #148]	; (dfa4 <sync_rtc_setup+0xa0>)
    df10:	4298      	cmp	r0, r3
    df12:	d143      	bne.n	df9c <sync_rtc_setup+0x98>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    df14:	f00e faca 	bl	1c4ac <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    df18:	1e04      	subs	r4, r0, #0
    df1a:	da0f      	bge.n	df3c <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    df1c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    df20:	f00e ff8a 	bl	1ce38 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    df24:	4b20      	ldr	r3, [pc, #128]	; (dfa8 <sync_rtc_setup+0xa4>)
    df26:	2201      	movs	r2, #1
    df28:	9302      	str	r3, [sp, #8]
    df2a:	2300      	movs	r3, #0
    df2c:	491f      	ldr	r1, [pc, #124]	; (dfac <sync_rtc_setup+0xa8>)
    df2e:	4618      	mov	r0, r3
    df30:	e9cd 3300 	strd	r3, r3, [sp]
    df34:	9403      	str	r4, [sp, #12]
    df36:	f7ff ff87 	bl	de48 <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    df3a:	e02c      	b.n	df96 <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    df3c:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    df40:	4d1b      	ldr	r5, [pc, #108]	; (dfb0 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    df42:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    df46:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    df48:	f8ad 3016 	strh.w	r3, [sp, #22]
    df4c:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    df4e:	9b05      	ldr	r3, [sp, #20]
    df50:	b914      	cbnz	r4, df58 <sync_rtc_setup+0x54>
		return -ENOSYS;
    df52:	f06f 0457 	mvn.w	r4, #87	; 0x57
    df56:	e7e5      	b.n	df24 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    df58:	2108      	movs	r1, #8
    df5a:	4628      	mov	r0, r5
    df5c:	4a15      	ldr	r2, [pc, #84]	; (dfb4 <sync_rtc_setup+0xb0>)
    df5e:	47a0      	blx	r4
	if (err < 0) {
    df60:	1e04      	subs	r4, r0, #0
    df62:	dbdf      	blt.n	df24 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    df64:	6933      	ldr	r3, [r6, #16]
    df66:	2b00      	cmp	r3, #0
    df68:	d0f3      	beq.n	df52 <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    df6a:	2201      	movs	r2, #1
    df6c:	2108      	movs	r1, #8
    df6e:	4628      	mov	r0, r5
    df70:	4798      	blx	r3
	if (rv < 0) {
    df72:	1e04      	subs	r4, r0, #0
    df74:	dbd6      	blt.n	df24 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    df76:	2301      	movs	r3, #1
    df78:	f89d 0014 	ldrb.w	r0, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    df7c:	4a0e      	ldr	r2, [pc, #56]	; (dfb8 <sync_rtc_setup+0xb4>)
    df7e:	fa03 f100 	lsl.w	r1, r3, r0
    df82:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    df86:	f89d 2017 	ldrb.w	r2, [sp, #23]
    df8a:	f89d 1015 	ldrb.w	r1, [sp, #21]
    df8e:	f7ff ff6d 	bl	de6c <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    df92:	2c00      	cmp	r4, #0
    df94:	d1c6      	bne.n	df24 <sync_rtc_setup+0x20>
}
    df96:	4620      	mov	r0, r4
    df98:	b006      	add	sp, #24
    df9a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    df9c:	f06f 0412 	mvn.w	r4, #18
    dfa0:	e7c0      	b.n	df24 <sync_rtc_setup+0x20>
    dfa2:	bf00      	nop
    dfa4:	0bad0000 	.word	0x0bad0000
    dfa8:	0002c832 	.word	0x0002c832
    dfac:	0002aa78 	.word	0x0002aa78
    dfb0:	0002a490 	.word	0x0002a490
    dfb4:	0000e06d 	.word	0x0000e06d
    dfb8:	40017000 	.word	0x40017000

0000dfbc <rtc_cb>:
{
    dfbc:	b570      	push	{r4, r5, r6, lr}
    dfbe:	9e04      	ldr	r6, [sp, #16]
    dfc0:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    dfc4:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    dfc6:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dfca:	4630      	mov	r0, r6
    dfcc:	f00e f860 	bl	1c090 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    dfd0:	2c0f      	cmp	r4, #15
    dfd2:	d90b      	bls.n	dfec <rtc_cb+0x30>
    dfd4:	491b      	ldr	r1, [pc, #108]	; (e044 <rtc_cb+0x88>)
    dfd6:	481c      	ldr	r0, [pc, #112]	; (e048 <rtc_cb+0x8c>)
    dfd8:	f240 13e1 	movw	r3, #481	; 0x1e1
    dfdc:	4a1b      	ldr	r2, [pc, #108]	; (e04c <rtc_cb+0x90>)
    dfde:	f016 ff7a 	bl	24ed6 <assert_print>
    dfe2:	f240 11e1 	movw	r1, #481	; 0x1e1
    dfe6:	4819      	ldr	r0, [pc, #100]	; (e04c <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    dfe8:	f016 ff6e 	bl	24ec8 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    dfec:	00a4      	lsls	r4, r4, #2
    dfee:	b2e4      	uxtb	r4, r4
    dff0:	b950      	cbnz	r0, e008 <rtc_cb+0x4c>
    dff2:	4917      	ldr	r1, [pc, #92]	; (e050 <rtc_cb+0x94>)
    dff4:	4814      	ldr	r0, [pc, #80]	; (e048 <rtc_cb+0x8c>)
    dff6:	f44f 7317 	mov.w	r3, #604	; 0x25c
    dffa:	4a16      	ldr	r2, [pc, #88]	; (e054 <rtc_cb+0x98>)
    dffc:	f016 ff6b 	bl	24ed6 <assert_print>
    e000:	f44f 7117 	mov.w	r1, #604	; 0x25c
    e004:	4813      	ldr	r0, [pc, #76]	; (e054 <rtc_cb+0x98>)
    e006:	e7ef      	b.n	dfe8 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    e008:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    e00a:	4b13      	ldr	r3, [pc, #76]	; (e058 <rtc_cb+0x9c>)
    e00c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    e010:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    e012:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    e014:	4a11      	ldr	r2, [pc, #68]	; (e05c <rtc_cb+0xa0>)
    e016:	40ab      	lsls	r3, r5
    e018:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    e01c:	4630      	mov	r0, r6
    e01e:	f00e fa63 	bl	1c4e8 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    e022:	4628      	mov	r0, r5
    e024:	f00e ff08 	bl	1ce38 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    e028:	4b0d      	ldr	r3, [pc, #52]	; (e060 <rtc_cb+0xa4>)
    e02a:	4298      	cmp	r0, r3
    e02c:	d008      	beq.n	e040 <rtc_cb+0x84>
    e02e:	490d      	ldr	r1, [pc, #52]	; (e064 <rtc_cb+0xa8>)
    e030:	4805      	ldr	r0, [pc, #20]	; (e048 <rtc_cb+0x8c>)
    e032:	2374      	movs	r3, #116	; 0x74
    e034:	4a0c      	ldr	r2, [pc, #48]	; (e068 <rtc_cb+0xac>)
    e036:	f016 ff4e 	bl	24ed6 <assert_print>
    e03a:	2174      	movs	r1, #116	; 0x74
    e03c:	480a      	ldr	r0, [pc, #40]	; (e068 <rtc_cb+0xac>)
    e03e:	e7d3      	b.n	dfe8 <rtc_cb+0x2c>
}
    e040:	bd70      	pop	{r4, r5, r6, pc}
    e042:	bf00      	nop
    e044:	0002c88c 	.word	0x0002c88c
    e048:	0002b939 	.word	0x0002b939
    e04c:	0002c85a 	.word	0x0002c85a
    e050:	0002c8d3 	.word	0x0002c8d3
    e054:	0002c897 	.word	0x0002c897
    e058:	4002a080 	.word	0x4002a080
    e05c:	40017000 	.word	0x40017000
    e060:	0bad0000 	.word	0x0bad0000
    e064:	0002c90e 	.word	0x0002c90e
    e068:	0002c8d7 	.word	0x0002c8d7

0000e06c <mbox_callback>:
{
    e06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e070:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    e072:	6883      	ldr	r3, [r0, #8]
    e074:	691b      	ldr	r3, [r3, #16]
    e076:	b94b      	cbnz	r3, e08c <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    e078:	4927      	ldr	r1, [pc, #156]	; (e118 <mbox_callback+0xac>)
    e07a:	4828      	ldr	r0, [pc, #160]	; (e11c <mbox_callback+0xb0>)
    e07c:	23ca      	movs	r3, #202	; 0xca
    e07e:	4a28      	ldr	r2, [pc, #160]	; (e120 <mbox_callback+0xb4>)
    e080:	f016 ff29 	bl	24ed6 <assert_print>
    e084:	21ca      	movs	r1, #202	; 0xca
    e086:	4826      	ldr	r0, [pc, #152]	; (e120 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    e088:	f016 ff1e 	bl	24ec8 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    e08c:	2200      	movs	r2, #0
    e08e:	4798      	blx	r3
    e090:	4606      	mov	r6, r0
    e092:	2800      	cmp	r0, #0
    e094:	d1f0      	bne.n	e078 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e096:	f3c4 2907 	ubfx	r9, r4, #8, #8
    e09a:	4648      	mov	r0, r9
    e09c:	f00e f82c 	bl	1c0f8 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    e0a0:	fa5f f884 	uxtb.w	r8, r4
    e0a4:	4633      	mov	r3, r6
    e0a6:	4649      	mov	r1, r9
    e0a8:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e0aa:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    e0ac:	4640      	mov	r0, r8
    e0ae:	f7ff fedd 	bl	de6c <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    e0b2:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    e0b6:	4648      	mov	r0, r9
    e0b8:	f00d ffea 	bl	1c090 <z_nrf_rtc_timer_compare_evt_address_get>
    e0bc:	2d0f      	cmp	r5, #15
    e0be:	d90a      	bls.n	e0d6 <mbox_callback+0x6a>
    e0c0:	4918      	ldr	r1, [pc, #96]	; (e124 <mbox_callback+0xb8>)
    e0c2:	4816      	ldr	r0, [pc, #88]	; (e11c <mbox_callback+0xb0>)
    e0c4:	f240 13e1 	movw	r3, #481	; 0x1e1
    e0c8:	4a17      	ldr	r2, [pc, #92]	; (e128 <mbox_callback+0xbc>)
    e0ca:	f016 ff04 	bl	24ed6 <assert_print>
    e0ce:	f240 11e1 	movw	r1, #481	; 0x1e1
    e0d2:	4815      	ldr	r0, [pc, #84]	; (e128 <mbox_callback+0xbc>)
    e0d4:	e7d8      	b.n	e088 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e0d6:	4a15      	ldr	r2, [pc, #84]	; (e12c <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e0d8:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e0da:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    e0dc:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e0e0:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    e0e2:	b950      	cbnz	r0, e0fa <mbox_callback+0x8e>
    e0e4:	4912      	ldr	r1, [pc, #72]	; (e130 <mbox_callback+0xc4>)
    e0e6:	480d      	ldr	r0, [pc, #52]	; (e11c <mbox_callback+0xb0>)
    e0e8:	f44f 7312 	mov.w	r3, #584	; 0x248
    e0ec:	4a11      	ldr	r2, [pc, #68]	; (e134 <mbox_callback+0xc8>)
    e0ee:	f016 fef2 	bl	24ed6 <assert_print>
    e0f2:	f44f 7112 	mov.w	r1, #584	; 0x248
    e0f6:	480f      	ldr	r0, [pc, #60]	; (e134 <mbox_callback+0xc8>)
    e0f8:	e7c6      	b.n	e088 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    e0fa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    e0fe:	4b0e      	ldr	r3, [pc, #56]	; (e138 <mbox_callback+0xcc>)
    e100:	f107 0232 	add.w	r2, r7, #50	; 0x32
    e104:	9300      	str	r3, [sp, #0]
    e106:	4648      	mov	r0, r9
    e108:	4633      	mov	r3, r6
    e10a:	9401      	str	r4, [sp, #4]
    e10c:	0052      	lsls	r2, r2, #1
    e10e:	f00e f8dd 	bl	1c2cc <z_nrf_rtc_timer_set>
}
    e112:	b003      	add	sp, #12
    e114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e118:	0002c922 	.word	0x0002c922
    e11c:	0002b939 	.word	0x0002b939
    e120:	0002c8d7 	.word	0x0002c8d7
    e124:	0002c88c 	.word	0x0002c88c
    e128:	0002c85a 	.word	0x0002c85a
    e12c:	4002a080 	.word	0x4002a080
    e130:	0002c8d3 	.word	0x0002c8d3
    e134:	0002c897 	.word	0x0002c897
    e138:	0000dfbd 	.word	0x0000dfbd

0000e13c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e13c:	f01a bc2d 	b.w	2899a <SystemInit>

0000e140 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    e140:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    e142:	aa01      	add	r2, sp, #4
    e144:	f01a fc10 	bl	28968 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    e148:	4604      	mov	r4, r0
    e14a:	b168      	cbz	r0, e168 <soc_secure_gpio_pin_mcu_select+0x28>
    e14c:	2316      	movs	r3, #22
    e14e:	4a0e      	ldr	r2, [pc, #56]	; (e188 <soc_secure_gpio_pin_mcu_select+0x48>)
    e150:	490e      	ldr	r1, [pc, #56]	; (e18c <soc_secure_gpio_pin_mcu_select+0x4c>)
    e152:	480f      	ldr	r0, [pc, #60]	; (e190 <soc_secure_gpio_pin_mcu_select+0x50>)
    e154:	f016 febf 	bl	24ed6 <assert_print>
    e158:	4621      	mov	r1, r4
    e15a:	480e      	ldr	r0, [pc, #56]	; (e194 <soc_secure_gpio_pin_mcu_select+0x54>)
    e15c:	f016 febb 	bl	24ed6 <assert_print>
    e160:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    e162:	4809      	ldr	r0, [pc, #36]	; (e188 <soc_secure_gpio_pin_mcu_select+0x48>)
    e164:	f016 feb0 	bl	24ec8 <assert_post_action>
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	b15b      	cbz	r3, e184 <soc_secure_gpio_pin_mcu_select+0x44>
    e16c:	2317      	movs	r3, #23
    e16e:	4a06      	ldr	r2, [pc, #24]	; (e188 <soc_secure_gpio_pin_mcu_select+0x48>)
    e170:	4909      	ldr	r1, [pc, #36]	; (e198 <soc_secure_gpio_pin_mcu_select+0x58>)
    e172:	4807      	ldr	r0, [pc, #28]	; (e190 <soc_secure_gpio_pin_mcu_select+0x50>)
    e174:	f016 feaf 	bl	24ed6 <assert_print>
    e178:	9901      	ldr	r1, [sp, #4]
    e17a:	4808      	ldr	r0, [pc, #32]	; (e19c <soc_secure_gpio_pin_mcu_select+0x5c>)
    e17c:	f016 feab 	bl	24ed6 <assert_print>
    e180:	2117      	movs	r1, #23
    e182:	e7ee      	b.n	e162 <soc_secure_gpio_pin_mcu_select+0x22>
}
    e184:	b002      	add	sp, #8
    e186:	bd10      	pop	{r4, pc}
    e188:	0002c934 	.word	0x0002c934
    e18c:	0002c96e 	.word	0x0002c96e
    e190:	0002b939 	.word	0x0002b939
    e194:	0002c98e 	.word	0x0002c98e
    e198:	0002c9a8 	.word	0x0002c9a8
    e19c:	0002c9b4 	.word	0x0002c9b4

0000e1a0 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    e1a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e1a4:	f8df a0fc 	ldr.w	sl, [pc, #252]	; e2a4 <z_log_init.isra.0+0x104>
    e1a8:	4f3f      	ldr	r7, [pc, #252]	; (e2a8 <z_log_init.isra.0+0x108>)
    e1aa:	4681      	mov	r9, r0
    e1ac:	ebaa 0307 	sub.w	r3, sl, r7

	if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e1b0:	2b9f      	cmp	r3, #159	; 0x9f
static uint32_t z_log_init(bool blocking, bool can_sleep)
    e1b2:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e1b4:	d90b      	bls.n	e1ce <z_log_init.isra.0+0x2e>
    e1b6:	493d      	ldr	r1, [pc, #244]	; (e2ac <z_log_init.isra.0+0x10c>)
    e1b8:	f240 1315 	movw	r3, #277	; 0x115
    e1bc:	4a3c      	ldr	r2, [pc, #240]	; (e2b0 <z_log_init.isra.0+0x110>)
    e1be:	483d      	ldr	r0, [pc, #244]	; (e2b4 <z_log_init.isra.0+0x114>)
    e1c0:	f016 fe89 	bl	24ed6 <assert_print>
    e1c4:	f240 1115 	movw	r1, #277	; 0x115
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e1c8:	4839      	ldr	r0, [pc, #228]	; (e2b0 <z_log_init.isra.0+0x110>)
    e1ca:	f016 fe7d 	bl	24ec8 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    e1ce:	483a      	ldr	r0, [pc, #232]	; (e2b8 <z_log_init.isra.0+0x118>)
    e1d0:	f016 feea 	bl	24fa8 <atomic_inc>
    e1d4:	4606      	mov	r6, r0
    e1d6:	2800      	cmp	r0, #0
    e1d8:	d134      	bne.n	e244 <z_log_init.isra.0+0xa4>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e1da:	463c      	mov	r4, r7
	uint32_t mask = 0;
    e1dc:	4605      	mov	r5, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    e1de:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e1e2:	4554      	cmp	r4, sl
    e1e4:	d927      	bls.n	e236 <z_log_init.isra.0+0x96>
    e1e6:	4935      	ldr	r1, [pc, #212]	; (e2bc <z_log_init.isra.0+0x11c>)
    e1e8:	f44f 7391 	mov.w	r3, #290	; 0x122
    e1ec:	4a30      	ldr	r2, [pc, #192]	; (e2b0 <z_log_init.isra.0+0x110>)
    e1ee:	4831      	ldr	r0, [pc, #196]	; (e2b4 <z_log_init.isra.0+0x114>)
    e1f0:	f016 fe71 	bl	24ed6 <assert_print>
    e1f4:	4832      	ldr	r0, [pc, #200]	; (e2c0 <z_log_init.isra.0+0x120>)
    e1f6:	f016 fe6e 	bl	24ed6 <assert_print>
    e1fa:	f44f 7191 	mov.w	r1, #290	; 0x122
    e1fe:	e7e3      	b.n	e1c8 <z_log_init.isra.0+0x28>
		if (backend->autostart) {
    e200:	7b23      	ldrb	r3, [r4, #12]
    e202:	b173      	cbz	r3, e222 <z_log_init.isra.0+0x82>
	if (backend->api->init) {
    e204:	6823      	ldr	r3, [r4, #0]
    e206:	68db      	ldr	r3, [r3, #12]
    e208:	b10b      	cbz	r3, e20e <z_log_init.isra.0+0x6e>
		backend->api->init(backend);
    e20a:	4620      	mov	r0, r4
    e20c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    e20e:	6823      	ldr	r3, [r4, #0]
    e210:	691b      	ldr	r3, [r3, #16]
    e212:	b943      	cbnz	r3, e226 <z_log_init.isra.0+0x86>
				log_backend_enable(backend,
    e214:	6863      	ldr	r3, [r4, #4]
    e216:	2204      	movs	r2, #4
    e218:	4620      	mov	r0, r4
    e21a:	6819      	ldr	r1, [r3, #0]
    e21c:	f000 f904 	bl	e428 <log_backend_enable>
			}

			i++;
    e220:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e222:	3410      	adds	r4, #16
    e224:	e7dd      	b.n	e1e2 <z_log_init.isra.0+0x42>
		return backend->api->is_ready(backend);
    e226:	4620      	mov	r0, r4
    e228:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    e22a:	2800      	cmp	r0, #0
    e22c:	d0f2      	beq.n	e214 <z_log_init.isra.0+0x74>
				mask |= BIT(i);
    e22e:	fa0b f306 	lsl.w	r3, fp, r6
    e232:	431d      	orrs	r5, r3
    e234:	e7f4      	b.n	e220 <z_log_init.isra.0+0x80>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e236:	d3e3      	bcc.n	e200 <z_log_init.isra.0+0x60>
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    e238:	f1b9 0f00 	cmp.w	r9, #0
    e23c:	d002      	beq.n	e244 <z_log_init.isra.0+0xa4>
		mask_cpy &= ~BIT(i);
    e23e:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    e242:	b90d      	cbnz	r5, e248 <z_log_init.isra.0+0xa8>
			}
		}
	}

	return mask;
}
    e244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e248:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    e24a:	fa95 f4a5 	rbit	r4, r5
    e24e:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    e252:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e256:	0126      	lsls	r6, r4, #4
    e258:	eb07 1404 	add.w	r4, r7, r4, lsl #4
		mask_cpy &= ~BIT(i);
    e25c:	ea6f 0b03 	mvn.w	fp, r3
    e260:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e264:	7b23      	ldrb	r3, [r4, #12]
    e266:	b15b      	cbz	r3, e280 <z_log_init.isra.0+0xe0>
	if (backend->api->is_ready != NULL) {
    e268:	59bb      	ldr	r3, [r7, r6]
    e26a:	691b      	ldr	r3, [r3, #16]
    e26c:	b9a3      	cbnz	r3, e298 <z_log_init.isra.0+0xf8>
					   backend->cb->ctx,
    e26e:	443e      	add	r6, r7
			log_backend_enable(backend,
    e270:	6873      	ldr	r3, [r6, #4]
    e272:	2204      	movs	r2, #4
    e274:	4620      	mov	r0, r4
    e276:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    e278:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    e27c:	f000 f8d4 	bl	e428 <log_backend_enable>
	while (mask_cpy) {
    e280:	2d00      	cmp	r5, #0
    e282:	d1e2      	bne.n	e24a <z_log_init.isra.0+0xaa>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    e284:	f1b8 0f00 	cmp.w	r8, #0
    e288:	d004      	beq.n	e294 <z_log_init.isra.0+0xf4>
	return z_impl_k_sleep(timeout);
    e28a:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e28e:	2100      	movs	r1, #0
    e290:	f013 fd4a 	bl	21d28 <z_impl_k_sleep>
    e294:	464d      	mov	r5, r9
    e296:	e7d4      	b.n	e242 <z_log_init.isra.0+0xa2>
		return backend->api->is_ready(backend);
    e298:	4620      	mov	r0, r4
    e29a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e29c:	2800      	cmp	r0, #0
    e29e:	d1ef      	bne.n	e280 <z_log_init.isra.0+0xe0>
    e2a0:	e7e5      	b.n	e26e <z_log_init.isra.0+0xce>
    e2a2:	bf00      	nop
    e2a4:	0002aa98 	.word	0x0002aa98
    e2a8:	0002aa88 	.word	0x0002aa88
    e2ac:	0002c9fb 	.word	0x0002c9fb
    e2b0:	0002c9ce 	.word	0x0002c9ce
    e2b4:	0002b939 	.word	0x0002b939
    e2b8:	20020f64 	.word	0x20020f64
    e2bc:	0002ca1f 	.word	0x0002ca1f
    e2c0:	0002ca40 	.word	0x0002ca40

0000e2c4 <log_format_func_t_get>:
}
    e2c4:	4b01      	ldr	r3, [pc, #4]	; (e2cc <log_format_func_t_get+0x8>)
    e2c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e2ca:	4770      	bx	lr
    e2cc:	0002af64 	.word	0x0002af64

0000e2d0 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    e2d0:	b508      	push	{r3, lr}
    e2d2:	4603      	mov	r3, r0
    e2d4:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    e2d6:	b12b      	cbz	r3, e2e4 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    e2d8:	4a04      	ldr	r2, [pc, #16]	; (e2ec <log_set_timestamp_func+0x1c>)
    e2da:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    e2dc:	f000 faec 	bl	e8b8 <log_output_timestamp_freq_set>
	}

	return 0;
    e2e0:	2000      	movs	r0, #0
}
    e2e2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e2e4:	f06f 0015 	mvn.w	r0, #21
    e2e8:	e7fb      	b.n	e2e2 <log_set_timestamp_func+0x12>
    e2ea:	bf00      	nop
    e2ec:	200083fc 	.word	0x200083fc

0000e2f0 <log_core_init>:
	panic_mode = false;
    e2f0:	2300      	movs	r3, #0
    e2f2:	4a04      	ldr	r2, [pc, #16]	; (e304 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    e2f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    e2f8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    e2fa:	4a03      	ldr	r2, [pc, #12]	; (e308 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    e2fc:	4803      	ldr	r0, [pc, #12]	; (e30c <log_core_init+0x1c>)
	dropped_cnt = 0;
    e2fe:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    e300:	f7ff bfe6 	b.w	e2d0 <log_set_timestamp_func>
    e304:	20021f5e 	.word	0x20021f5e
    e308:	20020f5c 	.word	0x20020f5c
    e30c:	00024fa5 	.word	0x00024fa5

0000e310 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    e310:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    e312:	4d13      	ldr	r5, [pc, #76]	; (e360 <z_impl_log_panic+0x50>)
    e314:	7829      	ldrb	r1, [r5, #0]
    e316:	bb09      	cbnz	r1, e35c <z_impl_log_panic+0x4c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    e318:	2001      	movs	r0, #1
    e31a:	f7ff ff41 	bl	e1a0 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e31e:	4c11      	ldr	r4, [pc, #68]	; (e364 <z_impl_log_panic+0x54>)
    e320:	4e11      	ldr	r6, [pc, #68]	; (e368 <z_impl_log_panic+0x58>)
    e322:	42b4      	cmp	r4, r6
    e324:	d917      	bls.n	e356 <z_impl_log_panic+0x46>
    e326:	4911      	ldr	r1, [pc, #68]	; (e36c <z_impl_log_panic+0x5c>)
    e328:	f44f 73c2 	mov.w	r3, #388	; 0x184
    e32c:	4a10      	ldr	r2, [pc, #64]	; (e370 <z_impl_log_panic+0x60>)
    e32e:	4811      	ldr	r0, [pc, #68]	; (e374 <z_impl_log_panic+0x64>)
    e330:	f016 fdd1 	bl	24ed6 <assert_print>
    e334:	4810      	ldr	r0, [pc, #64]	; (e378 <z_impl_log_panic+0x68>)
    e336:	f016 fdce 	bl	24ed6 <assert_print>
    e33a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    e33e:	480c      	ldr	r0, [pc, #48]	; (e370 <z_impl_log_panic+0x60>)
    e340:	f016 fdc2 	bl	24ec8 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e344:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e346:	795b      	ldrb	r3, [r3, #5]
    e348:	b11b      	cbz	r3, e352 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    e34a:	6823      	ldr	r3, [r4, #0]
    e34c:	4620      	mov	r0, r4
    e34e:	689b      	ldr	r3, [r3, #8]
    e350:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e352:	3410      	adds	r4, #16
    e354:	e7e5      	b.n	e322 <z_impl_log_panic+0x12>
    e356:	d3f5      	bcc.n	e344 <z_impl_log_panic+0x34>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    e358:	2301      	movs	r3, #1
    e35a:	702b      	strb	r3, [r5, #0]
}
    e35c:	bd70      	pop	{r4, r5, r6, pc}
    e35e:	bf00      	nop
    e360:	20021f5e 	.word	0x20021f5e
    e364:	0002aa88 	.word	0x0002aa88
    e368:	0002aa98 	.word	0x0002aa98
    e36c:	0002ca1f 	.word	0x0002ca1f
    e370:	0002c9ce 	.word	0x0002c9ce
    e374:	0002b939 	.word	0x0002b939
    e378:	0002ca40 	.word	0x0002ca40

0000e37c <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    e37c:	b510      	push	{r4, lr}
    e37e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    e380:	4806      	ldr	r0, [pc, #24]	; (e39c <z_log_dropped+0x20>)
    e382:	f016 fe11 	bl	24fa8 <atomic_inc>
	if (buffered) {
    e386:	b13c      	cbz	r4, e398 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e388:	4b05      	ldr	r3, [pc, #20]	; (e3a0 <z_log_dropped+0x24>)
    e38a:	e8d3 1fef 	ldaex	r1, [r3]
    e38e:	3901      	subs	r1, #1
    e390:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e394:	2a00      	cmp	r2, #0
    e396:	d1f8      	bne.n	e38a <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    e398:	bd10      	pop	{r4, pc}
    e39a:	bf00      	nop
    e39c:	20020f5c 	.word	0x20020f5c
    e3a0:	20020f60 	.word	0x20020f60

0000e3a4 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    e3a4:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    e3a6:	4b12      	ldr	r3, [pc, #72]	; (e3f0 <z_log_msg_commit+0x4c>)
{
    e3a8:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    e3aa:	681b      	ldr	r3, [r3, #0]
    e3ac:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e3ae:	4c11      	ldr	r4, [pc, #68]	; (e3f4 <z_log_msg_commit+0x50>)
    e3b0:	4e11      	ldr	r6, [pc, #68]	; (e3f8 <z_log_msg_commit+0x54>)
	msg->hdr.timestamp = timestamp_func();
    e3b2:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e3b4:	42b4      	cmp	r4, r6
    e3b6:	d918      	bls.n	e3ea <z_log_msg_commit+0x46>
    e3b8:	4910      	ldr	r1, [pc, #64]	; (e3fc <z_log_msg_commit+0x58>)
    e3ba:	f240 13c1 	movw	r3, #449	; 0x1c1
    e3be:	4a10      	ldr	r2, [pc, #64]	; (e400 <z_log_msg_commit+0x5c>)
    e3c0:	4810      	ldr	r0, [pc, #64]	; (e404 <z_log_msg_commit+0x60>)
    e3c2:	f016 fd88 	bl	24ed6 <assert_print>
    e3c6:	4810      	ldr	r0, [pc, #64]	; (e408 <z_log_msg_commit+0x64>)
    e3c8:	f016 fd85 	bl	24ed6 <assert_print>
    e3cc:	f240 11c1 	movw	r1, #449	; 0x1c1
    e3d0:	480b      	ldr	r0, [pc, #44]	; (e400 <z_log_msg_commit+0x5c>)
    e3d2:	f016 fd79 	bl	24ec8 <assert_post_action>
	return backend->cb->active;
    e3d6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    e3d8:	795b      	ldrb	r3, [r3, #5]
    e3da:	b123      	cbz	r3, e3e6 <z_log_msg_commit+0x42>
	backend->api->process(backend, msg);
    e3dc:	6823      	ldr	r3, [r4, #0]
    e3de:	4629      	mov	r1, r5
    e3e0:	4620      	mov	r0, r4
    e3e2:	681b      	ldr	r3, [r3, #0]
    e3e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e3e6:	3410      	adds	r4, #16
    e3e8:	e7e4      	b.n	e3b4 <z_log_msg_commit+0x10>
    e3ea:	d3f4      	bcc.n	e3d6 <z_log_msg_commit+0x32>
	msg_commit(&log_buffer, msg);
}
    e3ec:	bd70      	pop	{r4, r5, r6, pc}
    e3ee:	bf00      	nop
    e3f0:	200083fc 	.word	0x200083fc
    e3f4:	0002aa88 	.word	0x0002aa88
    e3f8:	0002aa98 	.word	0x0002aa98
    e3fc:	0002ca1f 	.word	0x0002ca1f
    e400:	0002c9ce 	.word	0x0002c9ce
    e404:	0002b939 	.word	0x0002b939
    e408:	0002ca40 	.word	0x0002ca40

0000e40c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    e40c:	4a04      	ldr	r2, [pc, #16]	; (e420 <log_source_name_get+0x14>)
    e40e:	4b05      	ldr	r3, [pc, #20]	; (e424 <log_source_name_get+0x18>)
    e410:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    e412:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    e416:	bf34      	ite	cc
    e418:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    e41c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    e41e:	4770      	bx	lr
    e420:	0002a930 	.word	0x0002a930
    e424:	0002aa88 	.word	0x0002aa88

0000e428 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e428:	4b0e      	ldr	r3, [pc, #56]	; (e464 <log_backend_enable+0x3c>)
{
    e42a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    e42c:	1ac3      	subs	r3, r0, r3
    e42e:	111b      	asrs	r3, r3, #4
    e430:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    e432:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    e434:	b948      	cbnz	r0, e44a <log_backend_enable+0x22>
    e436:	490c      	ldr	r1, [pc, #48]	; (e468 <log_backend_enable+0x40>)
    e438:	480c      	ldr	r0, [pc, #48]	; (e46c <log_backend_enable+0x44>)
    e43a:	23de      	movs	r3, #222	; 0xde
    e43c:	4a0c      	ldr	r2, [pc, #48]	; (e470 <log_backend_enable+0x48>)
    e43e:	f016 fd4a 	bl	24ed6 <assert_print>
    e442:	21de      	movs	r1, #222	; 0xde
    e444:	480a      	ldr	r0, [pc, #40]	; (e470 <log_backend_enable+0x48>)
    e446:	f016 fd3f 	bl	24ec8 <assert_post_action>
	backend->cb->id = id;
    e44a:	6844      	ldr	r4, [r0, #4]
    e44c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    e44e:	6843      	ldr	r3, [r0, #4]
    e450:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    e452:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    e454:	6843      	ldr	r3, [r0, #4]
    e456:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    e458:	6843      	ldr	r3, [r0, #4]
    e45a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    e45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    e460:	f016 bdb2 	b.w	24fc8 <z_log_notify_backend_enabled>
    e464:	0002aa88 	.word	0x0002aa88
    e468:	0002cae3 	.word	0x0002cae3
    e46c:	0002b939 	.word	0x0002b939
    e470:	0002caab 	.word	0x0002caab

0000e474 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e478:	b085      	sub	sp, #20
    e47a:	af02      	add	r7, sp, #8
    e47c:	4604      	mov	r4, r0
    e47e:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    e482:	460e      	mov	r6, r1
    e484:	4693      	mov	fp, r2
    e486:	4698      	mov	r8, r3
    e488:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    e48a:	f1ba 0f00 	cmp.w	sl, #0
    e48e:	d015      	beq.n	e4bc <z_impl_z_log_msg_runtime_vcreate+0x48>
		va_list ap2;

		va_copy(ap2, ap);
    e490:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    e494:	f8cd 9000 	str.w	r9, [sp]
    e498:	2110      	movs	r1, #16
    e49a:	4653      	mov	r3, sl
    e49c:	2000      	movs	r0, #0
    e49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e4a0:	f7fe fa3a 	bl	c918 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    e4a4:	1e01      	subs	r1, r0, #0
    e4a6:	da0a      	bge.n	e4be <z_impl_z_log_msg_runtime_vcreate+0x4a>
    e4a8:	491f      	ldr	r1, [pc, #124]	; (e528 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e4aa:	2368      	movs	r3, #104	; 0x68
    e4ac:	4a1f      	ldr	r2, [pc, #124]	; (e52c <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e4ae:	4820      	ldr	r0, [pc, #128]	; (e530 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    e4b0:	f016 fd11 	bl	24ed6 <assert_print>
    e4b4:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    e4b6:	481d      	ldr	r0, [pc, #116]	; (e52c <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e4b8:	f016 fd06 	bl	24ec8 <assert_post_action>
		plen = 0;
    e4bc:	4651      	mov	r1, sl
	struct log_msg_desc desc =
    e4be:	4a1d      	ldr	r2, [pc, #116]	; (e534 <z_impl_z_log_msg_runtime_vcreate+0xc0>)
    e4c0:	f004 0407 	and.w	r4, r4, #7
    e4c4:	f00b 0b07 	and.w	fp, fp, #7
    e4c8:	00e4      	lsls	r4, r4, #3
    e4ca:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    e4ce:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    e4d2:	4314      	orrs	r4, r2
    e4d4:	4a18      	ldr	r2, [pc, #96]	; (e538 <z_impl_z_log_msg_runtime_vcreate+0xc4>)
    e4d6:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    e4da:	3517      	adds	r5, #23
    e4dc:	440d      	add	r5, r1
		msg = alloca(msg_wlen * sizeof(int));
    e4de:	f025 0507 	bic.w	r5, r5, #7
    e4e2:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    e4e6:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    e4e8:	ad02      	add	r5, sp, #8
	if (pkg && fmt) {
    e4ea:	f1ba 0f00 	cmp.w	sl, #0
    e4ee:	d011      	beq.n	e514 <z_impl_z_log_msg_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    e4f0:	f8cd 9000 	str.w	r9, [sp]
    e4f4:	4653      	mov	r3, sl
    e4f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e4f8:	f105 0010 	add.w	r0, r5, #16
    e4fc:	f7fe fa0c 	bl	c918 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    e500:	2800      	cmp	r0, #0
    e502:	da07      	bge.n	e514 <z_impl_z_log_msg_runtime_vcreate+0xa0>
    e504:	4908      	ldr	r1, [pc, #32]	; (e528 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e506:	2382      	movs	r3, #130	; 0x82
    e508:	4a08      	ldr	r2, [pc, #32]	; (e52c <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e50a:	4809      	ldr	r0, [pc, #36]	; (e530 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    e50c:	f016 fce3 	bl	24ed6 <assert_print>
    e510:	2182      	movs	r1, #130	; 0x82
    e512:	e7d0      	b.n	e4b6 <z_impl_z_log_msg_runtime_vcreate+0x42>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    e514:	4643      	mov	r3, r8
    e516:	4622      	mov	r2, r4
    e518:	4631      	mov	r1, r6
    e51a:	4628      	mov	r0, r5
    e51c:	f016 fd57 	bl	24fce <z_log_msg_finalize>
	}
}
    e520:	370c      	adds	r7, #12
    e522:	46bd      	mov	sp, r7
    e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e528:	0002cb2f 	.word	0x0002cb2f
    e52c:	0002cb03 	.word	0x0002cb03
    e530:	0002b939 	.word	0x0002b939
    e534:	0007fe00 	.word	0x0007fe00
    e538:	7ff80000 	.word	0x7ff80000

0000e53c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    e53c:	b40e      	push	{r1, r2, r3}
    e53e:	b503      	push	{r0, r1, lr}
    e540:	ab03      	add	r3, sp, #12
    e542:	f853 2b04 	ldr.w	r2, [r3], #4
    e546:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e548:	4804      	ldr	r0, [pc, #16]	; (e55c <print_formatted+0x20>)
	va_start(args, fmt);
    e54a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e54c:	f016 fd82 	bl	25054 <cbvprintf>
	va_end(args);

	return length;
}
    e550:	b002      	add	sp, #8
    e552:	f85d eb04 	ldr.w	lr, [sp], #4
    e556:	b003      	add	sp, #12
    e558:	4770      	bx	lr
    e55a:	bf00      	nop
    e55c:	00025003 	.word	0x00025003

0000e560 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e560:	06ca      	lsls	r2, r1, #27
    e562:	d405      	bmi.n	e570 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e564:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    e566:	bf4c      	ite	mi
    e568:	4902      	ldrmi	r1, [pc, #8]	; (e574 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    e56a:	4903      	ldrpl	r1, [pc, #12]	; (e578 <newline_print+0x18>)
    e56c:	f7ff bfe6 	b.w	e53c <print_formatted>
	}
}
    e570:	4770      	bx	lr
    e572:	bf00      	nop
    e574:	0002f576 	.word	0x0002f576
    e578:	0002c083 	.word	0x0002c083

0000e57c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e580:	b089      	sub	sp, #36	; 0x24
    e582:	469a      	mov	sl, r3
    e584:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    e588:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    e58c:	9305      	str	r3, [sp, #20]
    e58e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e590:	4604      	mov	r4, r0
    e592:	460d      	mov	r5, r1
    e594:	9e16      	ldr	r6, [sp, #88]	; 0x58
    e596:	9206      	str	r2, [sp, #24]
    e598:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    e59a:	f1bb 0f00 	cmp.w	fp, #0
    e59e:	f000 8085 	beq.w	e6ac <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    e5a2:	f006 0308 	and.w	r3, r6, #8
    e5a6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    e5a8:	f016 fd0f 	bl	24fca <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    e5ac:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    e5b0:	4602      	mov	r2, r0
    e5b2:	2800      	cmp	r0, #0
    e5b4:	d049      	beq.n	e64a <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    e5b6:	4620      	mov	r0, r4
    e5b8:	498c      	ldr	r1, [pc, #560]	; (e7ec <log_output_process+0x270>)
    e5ba:	f7ff ffbf 	bl	e53c <print_formatted>
    e5be:	4680      	mov	r8, r0
	if (stamp) {
    e5c0:	f1b9 0f00 	cmp.w	r9, #0
    e5c4:	d008      	beq.n	e5d8 <log_output_process+0x5c>
	if (!format) {
    e5c6:	f016 0f44 	tst.w	r6, #68	; 0x44
    e5ca:	d140      	bne.n	e64e <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    e5cc:	462a      	mov	r2, r5
    e5ce:	4620      	mov	r0, r4
    e5d0:	4987      	ldr	r1, [pc, #540]	; (e7f0 <log_output_process+0x274>)
    e5d2:	f7ff ffb3 	bl	e53c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    e5d6:	4480      	add	r8, r0
	if (color) {
    e5d8:	f006 0301 	and.w	r3, r6, #1
    e5dc:	b153      	cbz	r3, e5f4 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    e5de:	4b85      	ldr	r3, [pc, #532]	; (e7f4 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    e5e0:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    e5e2:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    e5e6:	4b84      	ldr	r3, [pc, #528]	; (e7f8 <log_output_process+0x27c>)
    e5e8:	4984      	ldr	r1, [pc, #528]	; (e7fc <log_output_process+0x280>)
    e5ea:	2a00      	cmp	r2, #0
    e5ec:	bf08      	it	eq
    e5ee:	461a      	moveq	r2, r3
    e5f0:	f7ff ffa4 	bl	e53c <print_formatted>
	if (level_on) {
    e5f4:	f006 0308 	and.w	r3, r6, #8
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d054      	beq.n	e6a6 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    e5fc:	4b80      	ldr	r3, [pc, #512]	; (e800 <log_output_process+0x284>)
    e5fe:	4620      	mov	r0, r4
    e600:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    e604:	497f      	ldr	r1, [pc, #508]	; (e804 <log_output_process+0x288>)
    e606:	f7ff ff99 	bl	e53c <print_formatted>
    e60a:	4605      	mov	r5, r0
	if (domain) {
    e60c:	9b06      	ldr	r3, [sp, #24]
    e60e:	b12b      	cbz	r3, e61c <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    e610:	461a      	mov	r2, r3
    e612:	4620      	mov	r0, r4
    e614:	497c      	ldr	r1, [pc, #496]	; (e808 <log_output_process+0x28c>)
    e616:	f7ff ff91 	bl	e53c <print_formatted>
    e61a:	4405      	add	r5, r0
	if (source) {
    e61c:	f1ba 0f00 	cmp.w	sl, #0
    e620:	d005      	beq.n	e62e <log_output_process+0xb2>
		total += print_formatted(output,
    e622:	4652      	mov	r2, sl
    e624:	4620      	mov	r0, r4
    e626:	4979      	ldr	r1, [pc, #484]	; (e80c <log_output_process+0x290>)
    e628:	f7ff ff88 	bl	e53c <print_formatted>
    e62c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    e62e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    e630:	2f00      	cmp	r7, #0
    e632:	d149      	bne.n	e6c8 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    e634:	9b04      	ldr	r3, [sp, #16]
    e636:	2b00      	cmp	r3, #0
    e638:	d160      	bne.n	e6fc <log_output_process+0x180>
	if (color) {
    e63a:	07f3      	lsls	r3, r6, #31
    e63c:	f100 80cf 	bmi.w	e7de <log_output_process+0x262>
	newline_print(output, flags);
    e640:	4631      	mov	r1, r6
    e642:	4620      	mov	r0, r4
    e644:	f7ff ff8c 	bl	e560 <newline_print>
}
    e648:	e0c3      	b.n	e7d2 <log_output_process+0x256>
	uint32_t length = 0U;
    e64a:	4680      	mov	r8, r0
    e64c:	e7b8      	b.n	e5c0 <log_output_process+0x44>
	} else if (freq != 0U) {
    e64e:	4b70      	ldr	r3, [pc, #448]	; (e810 <log_output_process+0x294>)
    e650:	6818      	ldr	r0, [r3, #0]
    e652:	2800      	cmp	r0, #0
    e654:	d0bf      	beq.n	e5d6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    e656:	4b6f      	ldr	r3, [pc, #444]	; (e814 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    e658:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    e65c:	681b      	ldr	r3, [r3, #0]
    e65e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    e662:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    e666:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    e66a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    e66e:	fb09 f505 	mul.w	r5, r9, r5
    e672:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e676:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    e67a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    e67e:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e682:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    e686:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e68a:	fb09 f505 	mul.w	r5, r9, r5
    e68e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    e692:	fb0c 1113 	mls	r1, ip, r3, r1
    e696:	4620      	mov	r0, r4
    e698:	9100      	str	r1, [sp, #0]
    e69a:	e9cd e501 	strd	lr, r5, [sp, #4]
    e69e:	495e      	ldr	r1, [pc, #376]	; (e818 <log_output_process+0x29c>)
    e6a0:	f7ff ff4c 	bl	e53c <print_formatted>
    e6a4:	e797      	b.n	e5d6 <log_output_process+0x5a>
	int total = 0;
    e6a6:	f006 0508 	and.w	r5, r6, #8
    e6aa:	e7af      	b.n	e60c <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e6ac:	f1ba 0f01 	cmp.w	sl, #1
    e6b0:	d106      	bne.n	e6c0 <log_output_process+0x144>
	if (package) {
    e6b2:	b9ef      	cbnz	r7, e6f0 <log_output_process+0x174>
	if (data_len) {
    e6b4:	9b04      	ldr	r3, [sp, #16]
    e6b6:	2b00      	cmp	r3, #0
    e6b8:	f000 808b 	beq.w	e7d2 <log_output_process+0x256>
		prefix_offset = 0;
    e6bc:	2500      	movs	r5, #0
    e6be:	e01d      	b.n	e6fc <log_output_process+0x180>
	if (package) {
    e6c0:	2f00      	cmp	r7, #0
    e6c2:	d0f7      	beq.n	e6b4 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e6c4:	4855      	ldr	r0, [pc, #340]	; (e81c <log_output_process+0x2a0>)
    e6c6:	e014      	b.n	e6f2 <log_output_process+0x176>
		cb = out_func;
    e6c8:	4855      	ldr	r0, [pc, #340]	; (e820 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    e6ca:	463b      	mov	r3, r7
    e6cc:	4622      	mov	r2, r4
    e6ce:	4955      	ldr	r1, [pc, #340]	; (e824 <log_output_process+0x2a8>)
    e6d0:	f016 f9f9 	bl	24ac6 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    e6d4:	2800      	cmp	r0, #0
    e6d6:	da0e      	bge.n	e6f6 <log_output_process+0x17a>
    e6d8:	4953      	ldr	r1, [pc, #332]	; (e828 <log_output_process+0x2ac>)
    e6da:	4854      	ldr	r0, [pc, #336]	; (e82c <log_output_process+0x2b0>)
    e6dc:	f44f 7300 	mov.w	r3, #512	; 0x200
    e6e0:	4a53      	ldr	r2, [pc, #332]	; (e830 <log_output_process+0x2b4>)
    e6e2:	f016 fbf8 	bl	24ed6 <assert_print>
    e6e6:	f44f 7100 	mov.w	r1, #512	; 0x200
    e6ea:	4851      	ldr	r0, [pc, #324]	; (e830 <log_output_process+0x2b4>)
    e6ec:	f016 fbec 	bl	24ec8 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e6f0:	484b      	ldr	r0, [pc, #300]	; (e820 <log_output_process+0x2a4>)
		prefix_offset = 0;
    e6f2:	465d      	mov	r5, fp
    e6f4:	e7e9      	b.n	e6ca <log_output_process+0x14e>
	if (data_len) {
    e6f6:	9b04      	ldr	r3, [sp, #16]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	d066      	beq.n	e7ca <log_output_process+0x24e>
		print_formatted(output, " ");
    e6fc:	f8df 8134 	ldr.w	r8, [pc, #308]	; e834 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    e700:	f8df 9134 	ldr.w	r9, [pc, #308]	; e838 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e704:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    e706:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e708:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    e70a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e70c:	bf28      	it	cs
    e70e:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    e710:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    e714:	f7ff ff24 	bl	e560 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    e718:	4555      	cmp	r5, sl
    e71a:	dc43      	bgt.n	e7a4 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    e71c:	9b05      	ldr	r3, [sp, #20]
    e71e:	4649      	mov	r1, r9
    e720:	4620      	mov	r0, r4
    e722:	781a      	ldrb	r2, [r3, #0]
    e724:	f7ff ff0a 	bl	e53c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e728:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    e72c:	f01a 0f07 	tst.w	sl, #7
    e730:	d103      	bne.n	e73a <log_output_process+0x1be>
			print_formatted(output, " ");
    e732:	4641      	mov	r1, r8
    e734:	4620      	mov	r0, r4
    e736:	f7ff ff01 	bl	e53c <print_formatted>
		if (i < length) {
    e73a:	4557      	cmp	r7, sl
    e73c:	d939      	bls.n	e7b2 <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    e73e:	9b05      	ldr	r3, [sp, #20]
    e740:	4649      	mov	r1, r9
    e742:	4620      	mov	r0, r4
    e744:	f813 200a 	ldrb.w	r2, [r3, sl]
    e748:	f7ff fef8 	bl	e53c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e74c:	f10a 0a01 	add.w	sl, sl, #1
    e750:	f1ba 0f10 	cmp.w	sl, #16
    e754:	d1ea      	bne.n	e72c <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e756:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    e75a:	4620      	mov	r0, r4
    e75c:	4937      	ldr	r1, [pc, #220]	; (e83c <log_output_process+0x2c0>)
    e75e:	f7ff feed 	bl	e53c <print_formatted>
		if (i < length) {
    e762:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    e764:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    e766:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    e768:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    e76a:	4b35      	ldr	r3, [pc, #212]	; (e840 <log_output_process+0x2c4>)
    e76c:	5c99      	ldrb	r1, [r3, r2]
    e76e:	f011 0f97 	tst.w	r1, #151	; 0x97
    e772:	bf08      	it	eq
    e774:	222e      	moveq	r2, #46	; 0x2e
    e776:	4933      	ldr	r1, [pc, #204]	; (e844 <log_output_process+0x2c8>)
    e778:	f7ff fee0 	bl	e53c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e77c:	f10a 0a01 	add.w	sl, sl, #1
    e780:	f1ba 0f10 	cmp.w	sl, #16
    e784:	d01a      	beq.n	e7bc <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    e786:	f01a 0f07 	tst.w	sl, #7
    e78a:	d103      	bne.n	e794 <log_output_process+0x218>
			print_formatted(output, " ");
    e78c:	4641      	mov	r1, r8
    e78e:	4620      	mov	r0, r4
    e790:	f7ff fed4 	bl	e53c <print_formatted>
		if (i < length) {
    e794:	4557      	cmp	r7, sl
    e796:	4652      	mov	r2, sl
    e798:	d8e4      	bhi.n	e764 <log_output_process+0x1e8>
			print_formatted(output, " ");
    e79a:	4641      	mov	r1, r8
    e79c:	4620      	mov	r0, r4
    e79e:	f7ff fecd 	bl	e53c <print_formatted>
    e7a2:	e7eb      	b.n	e77c <log_output_process+0x200>
		print_formatted(output, " ");
    e7a4:	4641      	mov	r1, r8
    e7a6:	4620      	mov	r0, r4
    e7a8:	f7ff fec8 	bl	e53c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    e7ac:	f10a 0a01 	add.w	sl, sl, #1
    e7b0:	e7b2      	b.n	e718 <log_output_process+0x19c>
			print_formatted(output, "   ");
    e7b2:	4620      	mov	r0, r4
    e7b4:	4924      	ldr	r1, [pc, #144]	; (e848 <log_output_process+0x2cc>)
    e7b6:	f7ff fec1 	bl	e53c <print_formatted>
    e7ba:	e7c7      	b.n	e74c <log_output_process+0x1d0>
		data += length;
    e7bc:	9b05      	ldr	r3, [sp, #20]
    e7be:	443b      	add	r3, r7
    e7c0:	9305      	str	r3, [sp, #20]
	} while (len);
    e7c2:	9b04      	ldr	r3, [sp, #16]
    e7c4:	1bdb      	subs	r3, r3, r7
    e7c6:	9304      	str	r3, [sp, #16]
    e7c8:	d19c      	bne.n	e704 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    e7ca:	f1bb 0f00 	cmp.w	fp, #0
    e7ce:	f47f af34 	bne.w	e63a <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    e7d2:	4620      	mov	r0, r4
}
    e7d4:	b009      	add	sp, #36	; 0x24
    e7d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    e7da:	f016 bc42 	b.w	25062 <log_output_flush>
		print_formatted(output, "%s", log_color);
    e7de:	4620      	mov	r0, r4
    e7e0:	4a05      	ldr	r2, [pc, #20]	; (e7f8 <log_output_process+0x27c>)
    e7e2:	4906      	ldr	r1, [pc, #24]	; (e7fc <log_output_process+0x280>)
    e7e4:	f7ff feaa 	bl	e53c <print_formatted>
}
    e7e8:	e72a      	b.n	e640 <log_output_process+0xc4>
    e7ea:	bf00      	nop
    e7ec:	0002cb3e 	.word	0x0002cb3e
    e7f0:	0002cb42 	.word	0x0002cb42
    e7f4:	0002af74 	.word	0x0002af74
    e7f8:	0002cb39 	.word	0x0002cb39
    e7fc:	0002bb36 	.word	0x0002bb36
    e800:	0002af88 	.word	0x0002af88
    e804:	0002cb67 	.word	0x0002cb67
    e808:	0002cb6d 	.word	0x0002cb6d
    e80c:	0002cb71 	.word	0x0002cb71
    e810:	20020f6c 	.word	0x20020f6c
    e814:	20020f68 	.word	0x20020f68
    e818:	0002cb4b 	.word	0x0002cb4b
    e81c:	0002501f 	.word	0x0002501f
    e820:	00025003 	.word	0x00025003
    e824:	00025055 	.word	0x00025055
    e828:	0002cba5 	.word	0x0002cba5
    e82c:	0002b939 	.word	0x0002b939
    e830:	0002cb76 	.word	0x0002cb76
    e834:	000306f4 	.word	0x000306f4
    e838:	0002cbae 	.word	0x0002cbae
    e83c:	0002cbb4 	.word	0x0002cbb4
    e840:	00031234 	.word	0x00031234
    e844:	0002cbb6 	.word	0x0002cbb6
    e848:	000306f2 	.word	0x000306f2

0000e84c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    e84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    e850:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    e852:	684b      	ldr	r3, [r1, #4]
    e854:	4605      	mov	r5, r0
    e856:	460c      	mov	r4, r1
    e858:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    e85a:	688e      	ldr	r6, [r1, #8]
    e85c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    e85e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    e862:	b15b      	cbz	r3, e87c <log_output_msg_process+0x30>
    e864:	4a13      	ldr	r2, [pc, #76]	; (e8b4 <log_output_msg_process+0x68>)
    e866:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    e868:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e86c:	2900      	cmp	r1, #0
    e86e:	db1f      	blt.n	e8b0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    e870:	7820      	ldrb	r0, [r4, #0]
    e872:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e876:	f7ff fdc9 	bl	e40c <log_source_name_get>
    e87a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    e87c:	4621      	mov	r1, r4
    e87e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    e882:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    e884:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    e888:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    e88a:	eb01 0402 	add.w	r4, r1, r2
    e88e:	bf08      	it	eq
    e890:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    e892:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    e896:	e9cd 0803 	strd	r0, r8, [sp, #12]
    e89a:	e9cd 1401 	strd	r1, r4, [sp, #4]
    e89e:	2200      	movs	r2, #0
    e8a0:	4631      	mov	r1, r6
    e8a2:	4628      	mov	r0, r5
    e8a4:	9700      	str	r7, [sp, #0]
    e8a6:	f7ff fe69 	bl	e57c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    e8aa:	b006      	add	sp, #24
    e8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e8b0:	2300      	movs	r3, #0
    e8b2:	e7e3      	b.n	e87c <log_output_msg_process+0x30>
    e8b4:	0002a930 	.word	0x0002a930

0000e8b8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    e8b8:	2100      	movs	r1, #0
    e8ba:	2301      	movs	r3, #1
    e8bc:	4a06      	ldr	r2, [pc, #24]	; (e8d8 <log_output_timestamp_freq_set+0x20>)
    e8be:	4290      	cmp	r0, r2
    e8c0:	d806      	bhi.n	e8d0 <log_output_timestamp_freq_set+0x18>
    e8c2:	4a06      	ldr	r2, [pc, #24]	; (e8dc <log_output_timestamp_freq_set+0x24>)
    e8c4:	b901      	cbnz	r1, e8c8 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    e8c6:	2301      	movs	r3, #1
    e8c8:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    e8ca:	4b05      	ldr	r3, [pc, #20]	; (e8e0 <log_output_timestamp_freq_set+0x28>)
    e8cc:	6018      	str	r0, [r3, #0]
}
    e8ce:	4770      	bx	lr
		timestamp_div *= 2U;
    e8d0:	2101      	movs	r1, #1
		frequency /= 2U;
    e8d2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    e8d4:	005b      	lsls	r3, r3, #1
    e8d6:	e7f2      	b.n	e8be <log_output_timestamp_freq_set+0x6>
    e8d8:	000f4240 	.word	0x000f4240
    e8dc:	20020f68 	.word	0x20020f68
    e8e0:	20020f6c 	.word	0x20020f6c

0000e8e4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    e8e4:	2201      	movs	r2, #1
    e8e6:	4b01      	ldr	r3, [pc, #4]	; (e8ec <log_backend_rtt_init+0x8>)
    e8e8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    e8ea:	4770      	bx	lr
    e8ec:	20021f5f 	.word	0x20021f5f

0000e8f0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    e8f0:	4b01      	ldr	r3, [pc, #4]	; (e8f8 <format_set+0x8>)
	return 0;
}
    e8f2:	2000      	movs	r0, #0
	log_format_current = log_type;
    e8f4:	6019      	str	r1, [r3, #0]
}
    e8f6:	4770      	bx	lr
    e8f8:	20020f84 	.word	0x20020f84

0000e8fc <panic>:
	panic_mode = true;
    e8fc:	2201      	movs	r2, #1
    e8fe:	4b02      	ldr	r3, [pc, #8]	; (e908 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    e900:	4802      	ldr	r0, [pc, #8]	; (e90c <panic+0x10>)
    e902:	701a      	strb	r2, [r3, #0]
    e904:	f016 bbad 	b.w	25062 <log_output_flush>
    e908:	20021f60 	.word	0x20021f60
    e90c:	0002afb8 	.word	0x0002afb8

0000e910 <process>:
{
    e910:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e912:	4b06      	ldr	r3, [pc, #24]	; (e92c <process+0x1c>)
{
    e914:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e916:	6818      	ldr	r0, [r3, #0]
    e918:	f7ff fcd4 	bl	e2c4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    e91c:	4621      	mov	r1, r4
}
    e91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e922:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    e924:	220f      	movs	r2, #15
    e926:	4802      	ldr	r0, [pc, #8]	; (e930 <process+0x20>)
    e928:	4718      	bx	r3
    e92a:	bf00      	nop
    e92c:	20020f84 	.word	0x20020f84
    e930:	0002afb8 	.word	0x0002afb8

0000e934 <data_out_block_mode>:
{
    e934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e936:	4607      	mov	r7, r0
    e938:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    e93a:	2404      	movs	r4, #4
    e93c:	4d17      	ldr	r5, [pc, #92]	; (e99c <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    e93e:	4632      	mov	r2, r6
    e940:	4639      	mov	r1, r7
    e942:	2000      	movs	r0, #0
    e944:	f010 fb58 	bl	1eff8 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    e948:	b1c8      	cbz	r0, e97e <data_out_block_mode+0x4a>
	host_present = true;
    e94a:	2301      	movs	r3, #1
    e94c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    e94e:	4b14      	ldr	r3, [pc, #80]	; (e9a0 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    e950:	781b      	ldrb	r3, [r3, #0]
    e952:	b92b      	cbnz	r3, e960 <data_out_block_mode+0x2c>
}
    e954:	4630      	mov	r0, r6
    e956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    e958:	b95c      	cbnz	r4, e972 <data_out_block_mode+0x3e>
		host_present = false;
    e95a:	702c      	strb	r4, [r5, #0]
    e95c:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    e960:	2000      	movs	r0, #0
    e962:	f010 fb91 	bl	1f088 <SEGGER_RTT_HasDataUp>
    e966:	2800      	cmp	r0, #0
    e968:	d0f4      	beq.n	e954 <data_out_block_mode+0x20>
    e96a:	782b      	ldrb	r3, [r5, #0]
    e96c:	2b00      	cmp	r3, #0
    e96e:	d1f3      	bne.n	e958 <data_out_block_mode+0x24>
    e970:	e7f0      	b.n	e954 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    e972:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    e974:	f241 3088 	movw	r0, #5000	; 0x1388
    e978:	f01a ff0a 	bl	29790 <z_impl_k_busy_wait>
}
    e97c:	e7f0      	b.n	e960 <data_out_block_mode+0x2c>
		} else if (host_present) {
    e97e:	782b      	ldrb	r3, [r5, #0]
    e980:	b113      	cbz	r3, e988 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    e982:	3c01      	subs	r4, #1
    e984:	d104      	bne.n	e990 <data_out_block_mode+0x5c>
		host_present = false;
    e986:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    e988:	782b      	ldrb	r3, [r5, #0]
    e98a:	2b00      	cmp	r3, #0
    e98c:	d1d7      	bne.n	e93e <data_out_block_mode+0xa>
    e98e:	e7e1      	b.n	e954 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    e990:	f241 3088 	movw	r0, #5000	; 0x1388
    e994:	f01a fefc 	bl	29790 <z_impl_k_busy_wait>
    e998:	e7f6      	b.n	e988 <data_out_block_mode+0x54>
    e99a:	bf00      	nop
    e99c:	20021f5f 	.word	0x20021f5f
    e9a0:	20021f60 	.word	0x20021f60

0000e9a4 <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    e9a4:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    e9a6:	8983      	ldrh	r3, [r0, #12]
    e9a8:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    e9aa:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    e9ac:	0c09      	lsrs	r1, r1, #16
    e9ae:	fb03 5501 	mla	r5, r3, r1, r5
{
    e9b2:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    e9b4:	e9cd 5304 	strd	r5, r3, [sp, #16]
    e9b8:	4b11      	ldr	r3, [pc, #68]	; (ea00 <nvs_flash_erase_sector+0x5c>)
    e9ba:	2208      	movs	r2, #8
    e9bc:	9303      	str	r3, [sp, #12]
    e9be:	4b11      	ldr	r3, [pc, #68]	; (ea04 <nvs_flash_erase_sector+0x60>)
{
    e9c0:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    e9c2:	9302      	str	r3, [sp, #8]
    e9c4:	2300      	movs	r3, #0
    e9c6:	4910      	ldr	r1, [pc, #64]	; (ea08 <nvs_flash_erase_sector+0x64>)
    e9c8:	4618      	mov	r0, r3
    e9ca:	e9cd 3200 	strd	r3, r2, [sp]
    e9ce:	2204      	movs	r2, #4
    e9d0:	f016 fbc7 	bl	25162 <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    e9d4:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    e9d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e9d8:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    e9da:	6883      	ldr	r3, [r0, #8]
    e9dc:	4629      	mov	r1, r5
    e9de:	689b      	ldr	r3, [r3, #8]
    e9e0:	4798      	blx	r3

	if (rc) {
    e9e2:	b950      	cbnz	r0, e9fa <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    e9e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e9e6:	4631      	mov	r1, r6
    e9e8:	4620      	mov	r0, r4
    e9ea:	89a3      	ldrh	r3, [r4, #12]
    e9ec:	7912      	ldrb	r2, [r2, #4]
    e9ee:	f016 fb93 	bl	25118 <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    e9f2:	2800      	cmp	r0, #0
    e9f4:	bf18      	it	ne
    e9f6:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    e9fa:	b006      	add	sp, #24
    e9fc:	bd70      	pop	{r4, r5, r6, pc}
    e9fe:	bf00      	nop
    ea00:	0002cdac 	.word	0x0002cdac
    ea04:	0002cbe9 	.word	0x0002cbe9
    ea08:	0002aa08 	.word	0x0002aa08

0000ea0c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    ea0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    ea10:	884b      	ldrh	r3, [r1, #2]
{
    ea12:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    ea14:	9304      	str	r3, [sp, #16]
    ea16:	4b1d      	ldr	r3, [pc, #116]	; (ea8c <nvs_recover_last_ate+0x80>)
    ea18:	2408      	movs	r4, #8
    ea1a:	9303      	str	r3, [sp, #12]
    ea1c:	4b1c      	ldr	r3, [pc, #112]	; (ea90 <nvs_recover_last_ate+0x84>)
{
    ea1e:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    ea20:	9302      	str	r3, [sp, #8]
    ea22:	2300      	movs	r3, #0
{
    ea24:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    ea26:	4618      	mov	r0, r3
    ea28:	e9cd 3400 	strd	r3, r4, [sp]
    ea2c:	4919      	ldr	r1, [pc, #100]	; (ea94 <nvs_recover_last_ate+0x88>)
    ea2e:	2204      	movs	r2, #4
    ea30:	f016 fb97 	bl	25162 <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ea34:	4621      	mov	r1, r4
    ea36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ea38:	f016 fba3 	bl	25182 <nvs_al_size.isra.0>
    ea3c:	4680      	mov	r8, r0

	*addr -= ate_size;
    ea3e:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    ea40:	f8df 9054 	ldr.w	r9, [pc, #84]	; ea98 <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    ea44:	1a24      	subs	r4, r4, r0
    ea46:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    ea48:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    ea4c:	42b4      	cmp	r4, r6
    ea4e:	d803      	bhi.n	ea58 <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    ea50:	2000      	movs	r0, #0
}
    ea52:	b009      	add	sp, #36	; 0x24
    ea54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ea58:	2308      	movs	r3, #8
    ea5a:	4621      	mov	r1, r4
    ea5c:	4638      	mov	r0, r7
    ea5e:	aa06      	add	r2, sp, #24
    ea60:	f016 fb0c 	bl	2507c <nvs_flash_rd>
		if (rc) {
    ea64:	2800      	cmp	r0, #0
    ea66:	d1f4      	bne.n	ea52 <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    ea68:	4638      	mov	r0, r7
    ea6a:	a906      	add	r1, sp, #24
    ea6c:	f016 fb93 	bl	25196 <nvs_ate_valid>
    ea70:	b140      	cbz	r0, ea84 <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    ea72:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    ea76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    ea7a:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    ea7e:	4413      	add	r3, r2
    ea80:	441e      	add	r6, r3
			*addr = ate_end_addr;
    ea82:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    ea84:	eba4 0408 	sub.w	r4, r4, r8
    ea88:	e7e0      	b.n	ea4c <nvs_recover_last_ate+0x40>
    ea8a:	bf00      	nop
    ea8c:	0002cd97 	.word	0x0002cd97
    ea90:	0002cc0a 	.word	0x0002cc0a
    ea94:	0002aa08 	.word	0x0002aa08
    ea98:	ffff0000 	.word	0xffff0000

0000ea9c <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    ea9c:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    ea9e:	8883      	ldrh	r3, [r0, #4]
{
    eaa0:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    eaa2:	9304      	str	r3, [sp, #16]
    eaa4:	4b10      	ldr	r3, [pc, #64]	; (eae8 <nvs_add_gc_done_ate+0x4c>)
    eaa6:	2500      	movs	r5, #0
    eaa8:	9303      	str	r3, [sp, #12]
    eaaa:	4b10      	ldr	r3, [pc, #64]	; (eaec <nvs_add_gc_done_ate+0x50>)
{
    eaac:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    eaae:	9302      	str	r3, [sp, #8]
    eab0:	2308      	movs	r3, #8
    eab2:	2204      	movs	r2, #4
    eab4:	4628      	mov	r0, r5
    eab6:	e9cd 5300 	strd	r5, r3, [sp]
    eaba:	490d      	ldr	r1, [pc, #52]	; (eaf0 <nvs_add_gc_done_ate+0x54>)
    eabc:	462b      	mov	r3, r5
    eabe:	f016 fb50 	bl	25162 <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    eac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    eac6:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    eaca:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    eacc:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    eace:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    ead2:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    ead6:	f016 fb16 	bl	25106 <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    eada:	4620      	mov	r0, r4
    eadc:	a906      	add	r1, sp, #24
    eade:	f016 fc16 	bl	2530e <nvs_flash_ate_wrt>
}
    eae2:	b009      	add	sp, #36	; 0x24
    eae4:	bd30      	pop	{r4, r5, pc}
    eae6:	bf00      	nop
    eae8:	0002cd7c 	.word	0x0002cd7c
    eaec:	0002cc31 	.word	0x0002cc31
    eaf0:	0002aa08 	.word	0x0002aa08

0000eaf4 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    eaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    eaf8:	2108      	movs	r1, #8
{
    eafa:	b09b      	sub	sp, #108	; 0x6c
    eafc:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    eafe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    eb00:	f016 fb3f 	bl	25182 <nvs_al_size.isra.0>
    eb04:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    eb06:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    eb08:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    eb0a:	0c1b      	lsrs	r3, r3, #16
    eb0c:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    eb0e:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    eb10:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    eb12:	f016 fac1 	bl	25098 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    eb16:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    eb1a:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    eb1c:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    eb1e:	445e      	add	r6, fp
    eb20:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    eb22:	2308      	movs	r3, #8
    eb24:	4631      	mov	r1, r6
    eb26:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    eb28:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    eb2a:	f016 faa7 	bl	2507c <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    eb2e:	1e02      	subs	r2, r0, #0
    eb30:	f2c0 80bb 	blt.w	ecaa <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    eb34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    eb36:	aa0c      	add	r2, sp, #48	; 0x30
    eb38:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    eb3a:	2300      	movs	r3, #0
		if (data8[i] != value) {
    eb3c:	f812 0b01 	ldrb.w	r0, [r2], #1
    eb40:	4281      	cmp	r1, r0
    eb42:	f040 80a1 	bne.w	ec88 <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    eb46:	3301      	adds	r3, #1
    eb48:	2b08      	cmp	r3, #8
    eb4a:	d1f7      	bne.n	eb3c <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    eb4c:	68a3      	ldr	r3, [r4, #8]
    eb4e:	6862      	ldr	r2, [r4, #4]
    eb50:	442b      	add	r3, r5
    eb52:	429a      	cmp	r2, r3
    eb54:	f080 8090 	bcs.w	ec78 <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    eb58:	4659      	mov	r1, fp
    eb5a:	4620      	mov	r0, r4
    eb5c:	f7ff ff22 	bl	e9a4 <nvs_flash_erase_sector>
    eb60:	4602      	mov	r2, r0
	if (rc) {
    eb62:	e0a2      	b.n	ecaa <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    eb64:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    eb68:	0c36      	lsrs	r6, r6, #16
    eb6a:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    eb6c:	441e      	add	r6, r3
    eb6e:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    eb70:	aa0e      	add	r2, sp, #56	; 0x38
    eb72:	4620      	mov	r0, r4
    eb74:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    eb76:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    eb7a:	f016 fb44 	bl	25206 <nvs_prev_ate>
		if (rc) {
    eb7e:	4602      	mov	r2, r0
    eb80:	2800      	cmp	r0, #0
    eb82:	f040 8092 	bne.w	ecaa <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    eb86:	4620      	mov	r0, r4
    eb88:	a90e      	add	r1, sp, #56	; 0x38
    eb8a:	f016 fb04 	bl	25196 <nvs_ate_valid>
    eb8e:	b918      	cbnz	r0, eb98 <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    eb90:	9b07      	ldr	r3, [sp, #28]
    eb92:	4553      	cmp	r3, sl
    eb94:	d1ec      	bne.n	eb70 <nvs_gc+0x7c>
    eb96:	e7d9      	b.n	eb4c <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    eb98:	6863      	ldr	r3, [r4, #4]
    eb9a:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    eb9c:	aa10      	add	r2, sp, #64	; 0x40
    eb9e:	4620      	mov	r0, r4
    eba0:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    eba2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    eba4:	f016 fb2f 	bl	25206 <nvs_prev_ate>
			if (rc) {
    eba8:	4602      	mov	r2, r0
    ebaa:	2800      	cmp	r0, #0
    ebac:	d17d      	bne.n	ecaa <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    ebae:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    ebb2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    ebb6:	429a      	cmp	r2, r3
    ebb8:	d038      	beq.n	ec2c <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    ebba:	6862      	ldr	r2, [r4, #4]
    ebbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ebbe:	429a      	cmp	r2, r3
    ebc0:	d1ec      	bne.n	eb9c <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    ebc2:	45b2      	cmp	sl, r6
    ebc4:	d1e4      	bne.n	eb90 <nvs_gc+0x9c>
    ebc6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d0e0      	beq.n	eb90 <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    ebce:	9305      	str	r3, [sp, #20]
    ebd0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    ebd4:	2208      	movs	r2, #8
    ebd6:	9304      	str	r3, [sp, #16]
    ebd8:	4b36      	ldr	r3, [pc, #216]	; (ecb4 <nvs_gc+0x1c0>)
    ebda:	4937      	ldr	r1, [pc, #220]	; (ecb8 <nvs_gc+0x1c4>)
    ebdc:	9303      	str	r3, [sp, #12]
    ebde:	4b37      	ldr	r3, [pc, #220]	; (ecbc <nvs_gc+0x1c8>)
    ebe0:	9302      	str	r3, [sp, #8]
    ebe2:	2300      	movs	r3, #0
    ebe4:	4618      	mov	r0, r3
    ebe6:	e9cd 3200 	strd	r3, r2, [sp]
    ebea:	2204      	movs	r2, #4
    ebec:	f016 fab9 	bl	25162 <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    ebf0:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    ebf4:	ea4f 431a 	mov.w	r3, sl, lsr #16
    ebf8:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    ebfa:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    ebfc:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    ebfe:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    ec00:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    ec04:	f016 fa7f 	bl	25106 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    ec08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    ec0a:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    ec0e:	681e      	ldr	r6, [r3, #0]
    ec10:	4276      	negs	r6, r6
	block_size =
    ec12:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    ec16:	f1b9 0f00 	cmp.w	r9, #0
    ec1a:	d10e      	bne.n	ec3a <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    ec1c:	4620      	mov	r0, r4
    ec1e:	a90e      	add	r1, sp, #56	; 0x38
    ec20:	f016 fb75 	bl	2530e <nvs_flash_ate_wrt>
			if (rc) {
    ec24:	4602      	mov	r2, r0
    ec26:	2800      	cmp	r0, #0
    ec28:	d0b2      	beq.n	eb90 <nvs_gc+0x9c>
    ec2a:	e03e      	b.n	ecaa <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    ec2c:	4620      	mov	r0, r4
    ec2e:	a910      	add	r1, sp, #64	; 0x40
    ec30:	f016 fab1 	bl	25196 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    ec34:	2800      	cmp	r0, #0
    ec36:	d0c0      	beq.n	ebba <nvs_gc+0xc6>
    ec38:	e7c3      	b.n	ebc2 <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    ec3a:	454e      	cmp	r6, r9
    ec3c:	46b0      	mov	r8, r6
    ec3e:	bf28      	it	cs
    ec40:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    ec42:	aa12      	add	r2, sp, #72	; 0x48
    ec44:	4643      	mov	r3, r8
    ec46:	4639      	mov	r1, r7
    ec48:	4620      	mov	r0, r4
    ec4a:	f016 fa17 	bl	2507c <nvs_flash_rd>
		if (rc) {
    ec4e:	4602      	mov	r2, r0
    ec50:	bb58      	cbnz	r0, ecaa <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    ec52:	4643      	mov	r3, r8
    ec54:	68a1      	ldr	r1, [r4, #8]
    ec56:	aa12      	add	r2, sp, #72	; 0x48
    ec58:	4620      	mov	r0, r4
    ec5a:	f016 fb1e 	bl	2529a <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    ec5e:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    ec60:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    ec62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec64:	f016 fa8d 	bl	25182 <nvs_al_size.isra.0>
    ec68:	68a3      	ldr	r3, [r4, #8]
    ec6a:	4403      	add	r3, r0
    ec6c:	60a3      	str	r3, [r4, #8]
		if (rc) {
    ec6e:	b9e2      	cbnz	r2, ecaa <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    ec70:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    ec74:	4447      	add	r7, r8
    ec76:	e7ce      	b.n	ec16 <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    ec78:	4620      	mov	r0, r4
    ec7a:	f7ff ff0f 	bl	ea9c <nvs_add_gc_done_ate>
		if (rc) {
    ec7e:	4602      	mov	r2, r0
    ec80:	2800      	cmp	r0, #0
    ec82:	f43f af69 	beq.w	eb58 <nvs_gc+0x64>
    ec86:	e010      	b.n	ecaa <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    ec88:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    ec8a:	4620      	mov	r0, r4
    ec8c:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    ec8e:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    ec90:	f016 fa9b 	bl	251ca <nvs_close_ate_valid>
    ec94:	2800      	cmp	r0, #0
    ec96:	f47f af65 	bne.w	eb64 <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    ec9a:	4620      	mov	r0, r4
    ec9c:	a90a      	add	r1, sp, #40	; 0x28
    ec9e:	f7ff feb5 	bl	ea0c <nvs_recover_last_ate>
		if (rc) {
    eca2:	4602      	mov	r2, r0
    eca4:	2800      	cmp	r0, #0
    eca6:	f43f af63 	beq.w	eb70 <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    ecaa:	4610      	mov	r0, r2
    ecac:	b01b      	add	sp, #108	; 0x6c
    ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecb2:	bf00      	nop
    ecb4:	0002cd90 	.word	0x0002cd90
    ecb8:	0002aa08 	.word	0x0002aa08
    ecbc:	0002cc4e 	.word	0x0002cc4e

0000ecc0 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    ecc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ecc4:	4604      	mov	r4, r0
    ecc6:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    ecc8:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    eccc:	4638      	mov	r0, r7
    ecce:	f01a fc7f 	bl	295d0 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    ecd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    ecd4:	6883      	ldr	r3, [r0, #8]
    ecd6:	68db      	ldr	r3, [r3, #12]
    ecd8:	4798      	blx	r3
    ecda:	4603      	mov	r3, r0
    ecdc:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    ecde:	b930      	cbnz	r0, ecee <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    ece0:	4a90      	ldr	r2, [pc, #576]	; (ef24 <nvs_mount+0x264>)
    ece2:	9000      	str	r0, [sp, #0]
    ece4:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    ece8:	2201      	movs	r2, #1
    ecea:	498f      	ldr	r1, [pc, #572]	; (ef28 <nvs_mount+0x268>)
    ecec:	e00f      	b.n	ed0e <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    ecee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    ecf0:	6883      	ldr	r3, [r0, #8]
    ecf2:	68db      	ldr	r3, [r3, #12]
    ecf4:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    ecf6:	6803      	ldr	r3, [r0, #0]
    ecf8:	3b01      	subs	r3, #1
    ecfa:	2b1f      	cmp	r3, #31
    ecfc:	d90f      	bls.n	ed1e <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    ecfe:	4b8b      	ldr	r3, [pc, #556]	; (ef2c <nvs_mount+0x26c>)
    ed00:	9302      	str	r3, [sp, #8]
    ed02:	2300      	movs	r3, #0
    ed04:	2201      	movs	r2, #1
    ed06:	4618      	mov	r0, r3
    ed08:	e9cd 3300 	strd	r3, r3, [sp]
    ed0c:	4986      	ldr	r1, [pc, #536]	; (ef28 <nvs_mount+0x268>)
    ed0e:	f016 fa28 	bl	25162 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    ed12:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    ed16:	4628      	mov	r0, r5
    ed18:	b00e      	add	sp, #56	; 0x38
    ed1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    ed1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ed20:	6821      	ldr	r1, [r4, #0]
    ed22:	aa0b      	add	r2, sp, #44	; 0x2c
    ed24:	f019 fa99 	bl	2825a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    ed28:	b108      	cbz	r0, ed2e <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    ed2a:	4b81      	ldr	r3, [pc, #516]	; (ef30 <nvs_mount+0x270>)
    ed2c:	e7e8      	b.n	ed00 <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    ed2e:	89a5      	ldrh	r5, [r4, #12]
    ed30:	b12d      	cbz	r5, ed3e <nvs_mount+0x7e>
    ed32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed34:	fbb5 f2f3 	udiv	r2, r5, r3
    ed38:	fb03 5512 	mls	r5, r3, r2, r5
    ed3c:	b10d      	cbz	r5, ed42 <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    ed3e:	4b7d      	ldr	r3, [pc, #500]	; (ef34 <nvs_mount+0x274>)
    ed40:	e7de      	b.n	ed00 <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    ed42:	89e3      	ldrh	r3, [r4, #14]
    ed44:	2b01      	cmp	r3, #1
    ed46:	d805      	bhi.n	ed54 <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    ed48:	4b7b      	ldr	r3, [pc, #492]	; (ef38 <nvs_mount+0x278>)
    ed4a:	9500      	str	r5, [sp, #0]
    ed4c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ed50:	462b      	mov	r3, r5
    ed52:	e7c9      	b.n	ece8 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ed54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    ed56:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ed58:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    ed5c:	f04f 33ff 	mov.w	r3, #4294967295
    ed60:	f04f 32ff 	mov.w	r2, #4294967295
    ed64:	4638      	mov	r0, r7
    ed66:	f010 fe89 	bl	1fa7c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ed6a:	2108      	movs	r1, #8
    ed6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed6e:	f016 fa08 	bl	25182 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    ed72:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ed74:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    ed76:	89e3      	ldrh	r3, [r4, #14]
    ed78:	fa1f fa85 	uxth.w	sl, r5
    ed7c:	4553      	cmp	r3, sl
    ed7e:	d808      	bhi.n	ed92 <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    ed80:	89e3      	ldrh	r3, [r4, #14]
    ed82:	4543      	cmp	r3, r8
    ed84:	d123      	bne.n	edce <nvs_mount+0x10e>
	return z_impl_k_mutex_unlock(mutex);
    ed86:	4638      	mov	r0, r7
    ed88:	f010 ff48 	bl	1fc1c <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    ed8c:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    ed90:	e7c1      	b.n	ed16 <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    ed92:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    ed94:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    ed96:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    ed98:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ed9c:	464a      	mov	r2, r9
    ed9e:	2308      	movs	r3, #8
    eda0:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    eda2:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    eda4:	f016 f9b8 	bl	25118 <nvs_flash_cmp_const>
		if (rc) {
    eda8:	b178      	cbz	r0, edca <nvs_mount+0x10a>
			nvs_sector_advance(fs, &addr);
    edaa:	4620      	mov	r0, r4
    edac:	a906      	add	r1, sp, #24
    edae:	f016 f973 	bl	25098 <nvs_sector_advance>
			closed_sectors++;
    edb2:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    edb6:	2308      	movs	r3, #8
    edb8:	464a      	mov	r2, r9
    edba:	4620      	mov	r0, r4
    edbc:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
    edbe:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    edc2:	f016 f9a9 	bl	25118 <nvs_flash_cmp_const>
			if (!rc) {
    edc6:	2800      	cmp	r0, #0
    edc8:	d0da      	beq.n	ed80 <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    edca:	3501      	adds	r5, #1
    edcc:	e7d3      	b.n	ed76 <nvs_mount+0xb6>
	if (i == fs->sector_count) {
    edce:	4553      	cmp	r3, sl
    edd0:	d10b      	bne.n	edea <nvs_mount+0x12a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    edd2:	9906      	ldr	r1, [sp, #24]
    edd4:	2308      	movs	r3, #8
    edd6:	464a      	mov	r2, r9
    edd8:	4620      	mov	r0, r4
    edda:	1b89      	subs	r1, r1, r6
    eddc:	f016 f99c 	bl	25118 <nvs_flash_cmp_const>
		if (!rc) {
    ede0:	b918      	cbnz	r0, edea <nvs_mount+0x12a>
			nvs_sector_advance(fs, &addr);
    ede2:	4620      	mov	r0, r4
    ede4:	a906      	add	r1, sp, #24
    ede6:	f016 f957 	bl	25098 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    edea:	4620      	mov	r0, r4
    edec:	a906      	add	r1, sp, #24
    edee:	f7ff fe0d 	bl	ea0c <nvs_recover_last_ate>
	if (rc) {
    edf2:	4605      	mov	r5, r0
    edf4:	b118      	cbz	r0, edfe <nvs_mount+0x13e>
    edf6:	4638      	mov	r0, r7
    edf8:	f010 ff10 	bl	1fc1c <z_impl_k_mutex_unlock>
	if (rc) {
    edfc:	e78b      	b.n	ed16 <nvs_mount+0x56>
	fs->ate_wra = addr;
    edfe:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
    ee00:	ea4f 4813 	mov.w	r8, r3, lsr #16
    ee04:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
    ee08:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    ee0a:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    ee0e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    ee12:	4299      	cmp	r1, r3
    ee14:	d30f      	bcc.n	ee36 <nvs_mount+0x176>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ee16:	2308      	movs	r3, #8
    ee18:	4620      	mov	r0, r4
    ee1a:	aa07      	add	r2, sp, #28
    ee1c:	f016 f92e 	bl	2507c <nvs_flash_rd>
		if (rc) {
    ee20:	4605      	mov	r5, r0
    ee22:	2800      	cmp	r0, #0
    ee24:	d1e7      	bne.n	edf6 <nvs_mount+0x136>
    ee26:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
    ee28:	f813 2b01 	ldrb.w	r2, [r3], #1
    ee2c:	4591      	cmp	r9, r2
    ee2e:	d143      	bne.n	eeb8 <nvs_mount+0x1f8>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    ee30:	3501      	adds	r5, #1
    ee32:	2d08      	cmp	r5, #8
    ee34:	d1f8      	bne.n	ee28 <nvs_mount+0x168>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ee36:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    ee38:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ee3a:	0c1b      	lsrs	r3, r3, #16
    ee3c:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    ee3e:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ee40:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
    ee42:	f016 f929 	bl	25098 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    ee46:	464a      	mov	r2, r9
    ee48:	4620      	mov	r0, r4
    ee4a:	89a3      	ldrh	r3, [r4, #12]
    ee4c:	9906      	ldr	r1, [sp, #24]
    ee4e:	f016 f963 	bl	25118 <nvs_flash_cmp_const>
	if (rc < 0) {
    ee52:	1e05      	subs	r5, r0, #0
    ee54:	dbcf      	blt.n	edf6 <nvs_mount+0x136>
		addr = fs->ate_wra + ate_size;
    ee56:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    ee58:	f000 8082 	beq.w	ef60 <nvs_mount+0x2a0>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    ee5c:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    ee60:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    ee64:	89a3      	ldrh	r3, [r4, #12]
    ee66:	fa1f f288 	uxth.w	r2, r8
    ee6a:	1b9b      	subs	r3, r3, r6
    ee6c:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    ee6e:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    ee72:	d33d      	bcc.n	eef0 <nvs_mount+0x230>
		LOG_INF("No GC Done marker found: restarting gc");
    ee74:	4b31      	ldr	r3, [pc, #196]	; (ef3c <nvs_mount+0x27c>)
    ee76:	2203      	movs	r2, #3
    ee78:	9302      	str	r3, [sp, #8]
    ee7a:	2300      	movs	r3, #0
    ee7c:	492a      	ldr	r1, [pc, #168]	; (ef28 <nvs_mount+0x268>)
    ee7e:	4618      	mov	r0, r3
    ee80:	e9cd 3300 	strd	r3, r3, [sp]
    ee84:	f016 f96d 	bl	25162 <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    ee88:	4620      	mov	r0, r4
    ee8a:	6861      	ldr	r1, [r4, #4]
    ee8c:	f7ff fd8a 	bl	e9a4 <nvs_flash_erase_sector>
		if (rc) {
    ee90:	4605      	mov	r5, r0
    ee92:	2800      	cmp	r0, #0
    ee94:	d1af      	bne.n	edf6 <nvs_mount+0x136>
		fs->ate_wra &= ADDR_SECT_MASK;
    ee96:	6863      	ldr	r3, [r4, #4]
    ee98:	4a29      	ldr	r2, [pc, #164]	; (ef40 <nvs_mount+0x280>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    ee9a:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    ee9c:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    ee9e:	440b      	add	r3, r1
    eea0:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    eea4:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    eea6:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    eea8:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    eeaa:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    eeac:	f7ff fe22 	bl	eaf4 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    eeb0:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    eeb2:	2d00      	cmp	r5, #0
    eeb4:	d070      	beq.n	ef98 <nvs_mount+0x2d8>
    eeb6:	e79e      	b.n	edf6 <nvs_mount+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
    eeb8:	4620      	mov	r0, r4
    eeba:	a907      	add	r1, sp, #28
    eebc:	f016 f96b 	bl	25196 <nvs_ate_valid>
    eec0:	6862      	ldr	r2, [r4, #4]
    eec2:	b910      	cbnz	r0, eeca <nvs_mount+0x20a>
		fs->ate_wra -= ate_size;
    eec4:	1b92      	subs	r2, r2, r6
    eec6:	6062      	str	r2, [r4, #4]
    eec8:	e7a1      	b.n	ee0e <nvs_mount+0x14e>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    eeca:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    eece:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    eed2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    eed4:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    eed8:	4429      	add	r1, r5
    eeda:	f016 f952 	bl	25182 <nvs_al_size.isra.0>
    eede:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    eee0:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    eee2:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    eee4:	d1ee      	bne.n	eec4 <nvs_mount+0x204>
    eee6:	2d00      	cmp	r5, #0
    eee8:	d0ec      	beq.n	eec4 <nvs_mount+0x204>
				rc = -ESPIPE;
    eeea:	f06f 051c 	mvn.w	r5, #28
    eeee:	e090      	b.n	f012 <nvs_mount+0x352>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    eef0:	2308      	movs	r3, #8
    eef2:	4641      	mov	r1, r8
    eef4:	4620      	mov	r0, r4
    eef6:	aa09      	add	r2, sp, #36	; 0x24
    eef8:	f016 f8c0 	bl	2507c <nvs_flash_rd>
			if (rc) {
    eefc:	4605      	mov	r5, r0
    eefe:	2800      	cmp	r0, #0
    ef00:	f47f af79 	bne.w	edf6 <nvs_mount+0x136>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    ef04:	4620      	mov	r0, r4
    ef06:	a909      	add	r1, sp, #36	; 0x24
    ef08:	f016 f945 	bl	25196 <nvs_ate_valid>
    ef0c:	b138      	cbz	r0, ef1e <nvs_mount+0x25e>
    ef0e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ef12:	454b      	cmp	r3, r9
    ef14:	d103      	bne.n	ef1e <nvs_mount+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    ef16:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ef1a:	2b00      	cmp	r3, #0
    ef1c:	d07f      	beq.n	f01e <nvs_mount+0x35e>
			addr += ate_size;
    ef1e:	44b0      	add	r8, r6
    ef20:	e7a0      	b.n	ee64 <nvs_mount+0x1a4>
    ef22:	bf00      	nop
    ef24:	0002cc78 	.word	0x0002cc78
    ef28:	0002aa08 	.word	0x0002aa08
    ef2c:	0002cc9a 	.word	0x0002cc9a
    ef30:	0002ccb7 	.word	0x0002ccb7
    ef34:	0002cccf 	.word	0x0002cccf
    ef38:	0002cce3 	.word	0x0002cce3
    ef3c:	0002cd40 	.word	0x0002cd40
    ef40:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    ef44:	464a      	mov	r2, r9
    ef46:	4620      	mov	r0, r4
    ef48:	1a5b      	subs	r3, r3, r1
    ef4a:	f016 f8e5 	bl	25118 <nvs_flash_cmp_const>
		if (rc < 0) {
    ef4e:	1e05      	subs	r5, r0, #0
    ef50:	f6ff af51 	blt.w	edf6 <nvs_mount+0x136>
		if (!rc) {
    ef54:	d008      	beq.n	ef68 <nvs_mount+0x2a8>
		fs->data_wra += fs->flash_parameters->write_block_size;
    ef56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    ef58:	68a3      	ldr	r3, [r4, #8]
    ef5a:	6812      	ldr	r2, [r2, #0]
    ef5c:	4413      	add	r3, r2
    ef5e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    ef60:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    ef64:	428b      	cmp	r3, r1
    ef66:	d8ed      	bhi.n	ef44 <nvs_mount+0x284>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ef68:	6861      	ldr	r1, [r4, #4]
    ef6a:	89a3      	ldrh	r3, [r4, #12]
    ef6c:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    ef70:	429a      	cmp	r2, r3
    ef72:	d19e      	bne.n	eeb2 <nvs_mount+0x1f2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    ef74:	f8df 80d4 	ldr.w	r8, [pc, #212]	; f04c <nvs_mount+0x38c>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ef78:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    ef7a:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ef7e:	429a      	cmp	r2, r3
    ef80:	d097      	beq.n	eeb2 <nvs_mount+0x1f2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    ef82:	4620      	mov	r0, r4
    ef84:	f7ff fd0e 	bl	e9a4 <nvs_flash_erase_sector>
		if (rc) {
    ef88:	4605      	mov	r5, r0
    ef8a:	2800      	cmp	r0, #0
    ef8c:	f47f af33 	bne.w	edf6 <nvs_mount+0x136>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    ef90:	6863      	ldr	r3, [r4, #4]
    ef92:	ea03 0308 	and.w	r3, r3, r8
    ef96:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    ef98:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    ef9a:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    ef9c:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    efa0:	429a      	cmp	r2, r3
    efa2:	d032      	beq.n	f00a <nvs_mount+0x34a>
    efa4:	4638      	mov	r0, r7
    efa6:	f010 fe39 	bl	1fc1c <z_impl_k_mutex_unlock>
	fs->ready = true;
    efaa:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    efac:	2500      	movs	r5, #0
	fs->ready = true;
    efae:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    efb0:	89a3      	ldrh	r3, [r4, #12]
    efb2:	4628      	mov	r0, r5
    efb4:	9304      	str	r3, [sp, #16]
    efb6:	89e3      	ldrh	r3, [r4, #14]
    efb8:	2203      	movs	r2, #3
    efba:	9303      	str	r3, [sp, #12]
    efbc:	4b24      	ldr	r3, [pc, #144]	; (f050 <nvs_mount+0x390>)
    efbe:	e9cd 5500 	strd	r5, r5, [sp]
    efc2:	9302      	str	r3, [sp, #8]
    efc4:	4923      	ldr	r1, [pc, #140]	; (f054 <nvs_mount+0x394>)
    efc6:	462b      	mov	r3, r5
    efc8:	f016 f8cb 	bl	25162 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    efcc:	6863      	ldr	r3, [r4, #4]
    efce:	4628      	mov	r0, r5
    efd0:	b29a      	uxth	r2, r3
    efd2:	0c1b      	lsrs	r3, r3, #16
    efd4:	9303      	str	r3, [sp, #12]
    efd6:	4b20      	ldr	r3, [pc, #128]	; (f058 <nvs_mount+0x398>)
    efd8:	9204      	str	r2, [sp, #16]
    efda:	e9cd 5301 	strd	r5, r3, [sp, #4]
    efde:	2203      	movs	r2, #3
    efe0:	462b      	mov	r3, r5
    efe2:	491c      	ldr	r1, [pc, #112]	; (f054 <nvs_mount+0x394>)
    efe4:	9500      	str	r5, [sp, #0]
    efe6:	f016 f8bc 	bl	25162 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    efea:	68a3      	ldr	r3, [r4, #8]
    efec:	4628      	mov	r0, r5
    efee:	b29a      	uxth	r2, r3
    eff0:	0c1b      	lsrs	r3, r3, #16
    eff2:	9303      	str	r3, [sp, #12]
    eff4:	4b19      	ldr	r3, [pc, #100]	; (f05c <nvs_mount+0x39c>)
    eff6:	9204      	str	r2, [sp, #16]
    eff8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    effc:	2203      	movs	r2, #3
    effe:	462b      	mov	r3, r5
    f000:	4914      	ldr	r1, [pc, #80]	; (f054 <nvs_mount+0x394>)
    f002:	9500      	str	r5, [sp, #0]
    f004:	f016 f8ad 	bl	25162 <z_log_msg_runtime_create.constprop.0>
	return 0;
    f008:	e685      	b.n	ed16 <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
    f00a:	4620      	mov	r0, r4
    f00c:	f7ff fd46 	bl	ea9c <nvs_add_gc_done_ate>
    f010:	4605      	mov	r5, r0
    f012:	4638      	mov	r0, r7
    f014:	f010 fe02 	bl	1fc1c <z_impl_k_mutex_unlock>
	if (rc) {
    f018:	2d00      	cmp	r5, #0
    f01a:	d0c6      	beq.n	efaa <nvs_mount+0x2ea>
    f01c:	e67b      	b.n	ed16 <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
    f01e:	4b10      	ldr	r3, [pc, #64]	; (f060 <nvs_mount+0x3a0>)
    f020:	2203      	movs	r2, #3
    f022:	4628      	mov	r0, r5
    f024:	e9cd 5301 	strd	r5, r3, [sp, #4]
    f028:	490a      	ldr	r1, [pc, #40]	; (f054 <nvs_mount+0x394>)
    f02a:	462b      	mov	r3, r5
    f02c:	9500      	str	r5, [sp, #0]
    f02e:	f016 f898 	bl	25162 <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f032:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    f034:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f036:	0c1b      	lsrs	r3, r3, #16
    f038:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    f03a:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f03c:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
    f03e:	f016 f82b 	bl	25098 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    f042:	4620      	mov	r0, r4
    f044:	9906      	ldr	r1, [sp, #24]
    f046:	f7ff fcad 	bl	e9a4 <nvs_flash_erase_sector>
    f04a:	e731      	b.n	eeb0 <nvs_mount+0x1f0>
    f04c:	ffff0000 	.word	0xffff0000
    f050:	0002cd06 	.word	0x0002cd06
    f054:	0002aa08 	.word	0x0002aa08
    f058:	0002cd1d 	.word	0x0002cd1d
    f05c:	0002cd2f 	.word	0x0002cd2f
    f060:	0002cd67 	.word	0x0002cd67

0000f064 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f068:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    f06a:	7c03      	ldrb	r3, [r0, #16]
{
    f06c:	4604      	mov	r4, r0
    f06e:	4689      	mov	r9, r1
    f070:	4690      	mov	r8, r2
    f072:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    f074:	b973      	cbnz	r3, f094 <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
    f076:	4a66      	ldr	r2, [pc, #408]	; (f210 <nvs_write+0x1ac>)
    f078:	4618      	mov	r0, r3
    f07a:	e9cd 3201 	strd	r3, r2, [sp, #4]
    f07e:	4965      	ldr	r1, [pc, #404]	; (f214 <nvs_write+0x1b0>)
    f080:	2201      	movs	r2, #1
    f082:	9300      	str	r3, [sp, #0]
    f084:	f016 f86d 	bl	25162 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    f088:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    f08c:	4630      	mov	r0, r6
    f08e:	b00d      	add	sp, #52	; 0x34
    f090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f094:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    f096:	2108      	movs	r1, #8
    f098:	4610      	mov	r0, r2
    f09a:	f016 f872 	bl	25182 <nvs_al_size.isra.0>
    f09e:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    f0a0:	4629      	mov	r1, r5
    f0a2:	4610      	mov	r0, r2
    f0a4:	f016 f86d 	bl	25182 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f0a8:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    f0aa:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f0ac:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    f0b0:	42ab      	cmp	r3, r5
    f0b2:	f0c0 80a9 	bcc.w	f208 <nvs_write+0x1a4>
    f0b6:	b11d      	cbz	r5, f0c0 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
    f0b8:	f1b8 0f00 	cmp.w	r8, #0
    f0bc:	f000 80a4 	beq.w	f208 <nvs_write+0x1a4>
	wlk_addr = fs->ate_wra;
    f0c0:	6863      	ldr	r3, [r4, #4]
    f0c2:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f0c4:	4620      	mov	r0, r4
    f0c6:	aa08      	add	r2, sp, #32
    f0c8:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
    f0ca:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f0ce:	f016 f89a 	bl	25206 <nvs_prev_ate>
		if (rc) {
    f0d2:	4606      	mov	r6, r0
    f0d4:	2800      	cmp	r0, #0
    f0d6:	d1d9      	bne.n	f08c <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f0d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f0dc:	454b      	cmp	r3, r9
    f0de:	d005      	beq.n	f0ec <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
    f0e0:	6862      	ldr	r2, [r4, #4]
    f0e2:	9b07      	ldr	r3, [sp, #28]
    f0e4:	429a      	cmp	r2, r3
    f0e6:	d1ed      	bne.n	f0c4 <nvs_write+0x60>
		if (len == 0) {
    f0e8:	b9e5      	cbnz	r5, f124 <nvs_write+0xc0>
    f0ea:	e7cf      	b.n	f08c <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f0ec:	4620      	mov	r0, r4
    f0ee:	a908      	add	r1, sp, #32
    f0f0:	f016 f851 	bl	25196 <nvs_ate_valid>
    f0f4:	2800      	cmp	r0, #0
    f0f6:	d0f3      	beq.n	f0e0 <nvs_write+0x7c>
		rd_addr += wlk_ate.offset;
    f0f8:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
    f0fc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
    f100:	b175      	cbz	r5, f120 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
    f102:	42ab      	cmp	r3, r5
    f104:	d10e      	bne.n	f124 <nvs_write+0xc0>
		rd_addr &= ADDR_SECT_MASK;
    f106:	ea4f 411b 	mov.w	r1, fp, lsr #16
    f10a:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    f10c:	4401      	add	r1, r0
    f10e:	462b      	mov	r3, r5
    f110:	4642      	mov	r2, r8
    f112:	4620      	mov	r0, r4
    f114:	f015 ffcd 	bl	250b2 <nvs_flash_block_cmp>
			if (rc <= 0) {
    f118:	2800      	cmp	r0, #0
    f11a:	dc03      	bgt.n	f124 <nvs_write+0xc0>
    f11c:	4606      	mov	r6, r0
    f11e:	e7b5      	b.n	f08c <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
    f120:	2b00      	cmp	r3, #0
    f122:	d0b3      	beq.n	f08c <nvs_write+0x28>
	if (data_size) {
    f124:	2f00      	cmp	r7, #0
    f126:	d13e      	bne.n	f1a6 <nvs_write+0x142>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    f128:	f104 0314 	add.w	r3, r4, #20
    f12c:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
    f12e:	f04f 32ff 	mov.w	r2, #4294967295
    f132:	f04f 33ff 	mov.w	r3, #4294967295
    f136:	f104 0014 	add.w	r0, r4, #20
    f13a:	f010 fc9f 	bl	1fa7c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    f13e:	f8df b0d8 	ldr.w	fp, [pc, #216]	; f218 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    f142:	89e3      	ldrh	r3, [r4, #14]
    f144:	429e      	cmp	r6, r3
    f146:	d05c      	beq.n	f202 <nvs_write+0x19e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    f148:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f14c:	18f9      	adds	r1, r7, r3
    f14e:	428a      	cmp	r2, r1
    f150:	d32c      	bcc.n	f1ac <nvs_write+0x148>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f152:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
    f156:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    f158:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
    f15a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
    f15e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
    f162:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
    f166:	f015 ffce 	bl	25106 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f16a:	462b      	mov	r3, r5
    f16c:	4642      	mov	r2, r8
    f16e:	68a1      	ldr	r1, [r4, #8]
    f170:	4620      	mov	r0, r4
    f172:	f016 f892 	bl	2529a <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    f176:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f178:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    f17a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f17c:	f016 f801 	bl	25182 <nvs_al_size.isra.0>
    f180:	68a2      	ldr	r2, [r4, #8]
    f182:	4402      	add	r2, r0
    f184:	60a2      	str	r2, [r4, #8]
	if (rc) {
    f186:	f1ba 0f00 	cmp.w	sl, #0
    f18a:	d107      	bne.n	f19c <nvs_write+0x138>
	rc = nvs_flash_ate_wrt(fs, &entry);
    f18c:	4620      	mov	r0, r4
    f18e:	a90a      	add	r1, sp, #40	; 0x28
    f190:	f016 f8bd 	bl	2530e <nvs_flash_ate_wrt>
	rc = len;
    f194:	2800      	cmp	r0, #0
    f196:	bf14      	ite	ne
    f198:	4682      	movne	sl, r0
    f19a:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    f19c:	9805      	ldr	r0, [sp, #20]
    f19e:	f010 fd3d 	bl	1fc1c <z_impl_k_mutex_unlock>
	return rc;
    f1a2:	4656      	mov	r6, sl
    f1a4:	e772      	b.n	f08c <nvs_write+0x28>
		required_space = data_size + ate_size;
    f1a6:	4457      	add	r7, sl
    f1a8:	b2bf      	uxth	r7, r7
    f1aa:	e7bd      	b.n	f128 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f1ac:	2108      	movs	r1, #8
    f1ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f1b0:	f015 ffe7 	bl	25182 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    f1b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f1b8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
    f1bc:	2300      	movs	r3, #0
    f1be:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    f1c2:	1813      	adds	r3, r2, r0
    f1c4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
    f1c8:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    f1ca:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    f1ce:	441a      	add	r2, r3
    f1d0:	1a10      	subs	r0, r2, r0
    f1d2:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    f1d4:	a80a      	add	r0, sp, #40	; 0x28
    f1d6:	f015 ff96 	bl	25106 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    f1da:	a90a      	add	r1, sp, #40	; 0x28
    f1dc:	4620      	mov	r0, r4
    f1de:	f016 f896 	bl	2530e <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    f1e2:	4620      	mov	r0, r4
    f1e4:	1d21      	adds	r1, r4, #4
    f1e6:	f015 ff57 	bl	25098 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f1ea:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    f1ec:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f1ee:	ea03 030b 	and.w	r3, r3, fp
    f1f2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f1f4:	f7ff fc7e 	bl	eaf4 <nvs_gc>
		if (rc) {
    f1f8:	4682      	mov	sl, r0
    f1fa:	2800      	cmp	r0, #0
    f1fc:	d1ce      	bne.n	f19c <nvs_write+0x138>
		gc_count++;
    f1fe:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    f200:	e79f      	b.n	f142 <nvs_write+0xde>
			rc = -ENOSPC;
    f202:	f06f 0a1b 	mvn.w	sl, #27
    f206:	e7c9      	b.n	f19c <nvs_write+0x138>
		return -EINVAL;
    f208:	f06f 0615 	mvn.w	r6, #21
    f20c:	e73e      	b.n	f08c <nvs_write+0x28>
    f20e:	bf00      	nop
    f210:	0002cc64 	.word	0x0002cc64
    f214:	0002aa08 	.word	0x0002aa08
    f218:	ffff0000 	.word	0xffff0000

0000f21c <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    f21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f220:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    f222:	7c03      	ldrb	r3, [r0, #16]
{
    f224:	b088      	sub	sp, #32
    f226:	4604      	mov	r4, r0
    f228:	460f      	mov	r7, r1
    f22a:	4690      	mov	r8, r2
    f22c:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    f230:	b96b      	cbnz	r3, f24e <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
    f232:	4a2f      	ldr	r2, [pc, #188]	; (f2f0 <nvs_read_hist+0xd4>)
    f234:	4618      	mov	r0, r3
    f236:	e9cd 3201 	strd	r3, r2, [sp, #4]
    f23a:	492e      	ldr	r1, [pc, #184]	; (f2f4 <nvs_read_hist+0xd8>)
    f23c:	2201      	movs	r2, #1
    f23e:	9300      	str	r3, [sp, #0]
    f240:	f015 ff8f 	bl	25162 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    f244:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    f248:	b008      	add	sp, #32
    f24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f24e:	2108      	movs	r1, #8
    f250:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f252:	f015 ff96 	bl	25182 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    f256:	89a3      	ldrh	r3, [r4, #12]
    f258:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    f25c:	42b3      	cmp	r3, r6
    f25e:	d343      	bcc.n	f2e8 <nvs_read_hist+0xcc>
	cnt_his = 0U;
    f260:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    f262:	f8d4 a004 	ldr.w	sl, [r4, #4]
    f266:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
    f26a:	454d      	cmp	r5, r9
    f26c:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    f26e:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
    f272:	d909      	bls.n	f288 <nvs_read_hist+0x6c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f274:	6863      	ldr	r3, [r4, #4]
    f276:	4553      	cmp	r3, sl
    f278:	d11e      	bne.n	f2b8 <nvs_read_hist+0x9c>
    f27a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f27e:	42bb      	cmp	r3, r7
    f280:	d01a      	beq.n	f2b8 <nvs_read_hist+0x9c>
		return -ENOENT;
    f282:	f06f 0001 	mvn.w	r0, #1
    f286:	e7df      	b.n	f248 <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f288:	4620      	mov	r0, r4
    f28a:	aa06      	add	r2, sp, #24
    f28c:	a905      	add	r1, sp, #20
    f28e:	f015 ffba 	bl	25206 <nvs_prev_ate>
		if (rc) {
    f292:	2800      	cmp	r0, #0
    f294:	d1d8      	bne.n	f248 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    f296:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f29a:	42bb      	cmp	r3, r7
    f29c:	d106      	bne.n	f2ac <nvs_read_hist+0x90>
    f29e:	4620      	mov	r0, r4
    f2a0:	a906      	add	r1, sp, #24
    f2a2:	f015 ff78 	bl	25196 <nvs_ate_valid>
    f2a6:	b108      	cbz	r0, f2ac <nvs_read_hist+0x90>
			cnt_his++;
    f2a8:	3501      	adds	r5, #1
    f2aa:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    f2ac:	6862      	ldr	r2, [r4, #4]
    f2ae:	9b05      	ldr	r3, [sp, #20]
    f2b0:	429a      	cmp	r2, r3
    f2b2:	d1da      	bne.n	f26a <nvs_read_hist+0x4e>
		rd_addr = wlk_addr;
    f2b4:	4651      	mov	r1, sl
    f2b6:	e7e0      	b.n	f27a <nvs_read_hist+0x5e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f2b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f2bc:	2b00      	cmp	r3, #0
    f2be:	d0e0      	beq.n	f282 <nvs_read_hist+0x66>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f2c0:	45a9      	cmp	r9, r5
    f2c2:	d8de      	bhi.n	f282 <nvs_read_hist+0x66>
	rd_addr += wlk_ate.offset;
    f2c4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
    f2c8:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f2ca:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    f2cc:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f2d0:	bf28      	it	cs
    f2d2:	4633      	movcs	r3, r6
    f2d4:	4401      	add	r1, r0
    f2d6:	4642      	mov	r2, r8
    f2d8:	4620      	mov	r0, r4
    f2da:	f015 fecf 	bl	2507c <nvs_flash_rd>
	if (rc) {
    f2de:	2800      	cmp	r0, #0
    f2e0:	d1b2      	bne.n	f248 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    f2e2:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    f2e6:	e7af      	b.n	f248 <nvs_read_hist+0x2c>
		return -EINVAL;
    f2e8:	f06f 0015 	mvn.w	r0, #21
    f2ec:	e7ac      	b.n	f248 <nvs_read_hist+0x2c>
    f2ee:	bf00      	nop
    f2f0:	0002cc64 	.word	0x0002cc64
    f2f4:	0002aa08 	.word	0x0002aa08

0000f2f8 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    f2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f2fa:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
    f2fc:	b960      	cbnz	r0, f318 <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
    f2fe:	4a11      	ldr	r2, [pc, #68]	; (f344 <ipc_service_open_instance+0x4c>)
    f300:	9000      	str	r0, [sp, #0]
    f302:	e9cd 0201 	strd	r0, r2, [sp, #4]
    f306:	4910      	ldr	r1, [pc, #64]	; (f348 <ipc_service_open_instance+0x50>)
    f308:	2201      	movs	r2, #1
    f30a:	f016 f818 	bl	2533e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    f30e:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    f312:	b005      	add	sp, #20
    f314:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    f318:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    f31a:	b95b      	cbnz	r3, f334 <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
    f31c:	4a0b      	ldr	r2, [pc, #44]	; (f34c <ipc_service_open_instance+0x54>)
    f31e:	4618      	mov	r0, r3
    f320:	e9cd 3201 	strd	r3, r2, [sp, #4]
    f324:	4908      	ldr	r1, [pc, #32]	; (f348 <ipc_service_open_instance+0x50>)
    f326:	2201      	movs	r2, #1
    f328:	9300      	str	r3, [sp, #0]
    f32a:	f016 f808 	bl	2533e <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    f32e:	f06f 0004 	mvn.w	r0, #4
    f332:	e7ee      	b.n	f312 <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
    f334:	681b      	ldr	r3, [r3, #0]
    f336:	b11b      	cbz	r3, f340 <ipc_service_open_instance+0x48>
}
    f338:	b005      	add	sp, #20
    f33a:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    f33e:	4718      	bx	r3
		return 0;
    f340:	4618      	mov	r0, r3
    f342:	e7e6      	b.n	f312 <ipc_service_open_instance+0x1a>
    f344:	0002cdca 	.word	0x0002cdca
    f348:	0002aa10 	.word	0x0002aa10
    f34c:	0002cddb 	.word	0x0002cddb

0000f350 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    f350:	b530      	push	{r4, r5, lr}
    f352:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    f354:	b108      	cbz	r0, f35a <ipc_service_register_endpoint+0xa>
    f356:	b101      	cbz	r1, f35a <ipc_service_register_endpoint+0xa>
    f358:	b96a      	cbnz	r2, f376 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    f35a:	4b13      	ldr	r3, [pc, #76]	; (f3a8 <ipc_service_register_endpoint+0x58>)
    f35c:	2201      	movs	r2, #1
    f35e:	9302      	str	r3, [sp, #8]
    f360:	2300      	movs	r3, #0
    f362:	4912      	ldr	r1, [pc, #72]	; (f3ac <ipc_service_register_endpoint+0x5c>)
    f364:	4618      	mov	r0, r3
    f366:	e9cd 3300 	strd	r3, r3, [sp]
    f36a:	f015 ffe8 	bl	2533e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    f36e:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    f372:	b005      	add	sp, #20
    f374:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    f376:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    f378:	b10c      	cbz	r4, f37e <ipc_service_register_endpoint+0x2e>
    f37a:	68e5      	ldr	r5, [r4, #12]
    f37c:	b965      	cbnz	r5, f398 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    f37e:	4b0c      	ldr	r3, [pc, #48]	; (f3b0 <ipc_service_register_endpoint+0x60>)
    f380:	2201      	movs	r2, #1
    f382:	9302      	str	r3, [sp, #8]
    f384:	2300      	movs	r3, #0
    f386:	4909      	ldr	r1, [pc, #36]	; (f3ac <ipc_service_register_endpoint+0x5c>)
    f388:	4618      	mov	r0, r3
    f38a:	e9cd 3300 	strd	r3, r3, [sp]
    f38e:	f015 ffd6 	bl	2533e <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    f392:	f06f 0004 	mvn.w	r0, #4
    f396:	e7ec      	b.n	f372 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    f398:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    f39c:	68e3      	ldr	r3, [r4, #12]
}
    f39e:	b005      	add	sp, #20
    f3a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    f3a4:	4718      	bx	r3
    f3a6:	bf00      	nop
    f3a8:	0002cdf9 	.word	0x0002cdf9
    f3ac:	0002aa10 	.word	0x0002aa10
    f3b0:	0002cddb 	.word	0x0002cddb

0000f3b4 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    f3b4:	b530      	push	{r4, r5, lr}
    f3b6:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    f3b8:	4604      	mov	r4, r0
{
    f3ba:	b085      	sub	sp, #20
	if (!ept) {
    f3bc:	b960      	cbnz	r0, f3d8 <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
    f3be:	4b19      	ldr	r3, [pc, #100]	; (f424 <ipc_service_send+0x70>)
    f3c0:	9000      	str	r0, [sp, #0]
    f3c2:	e9cd 0301 	strd	r0, r3, [sp, #4]
    f3c6:	2201      	movs	r2, #1
    f3c8:	4603      	mov	r3, r0
    f3ca:	4917      	ldr	r1, [pc, #92]	; (f428 <ipc_service_send+0x74>)
    f3cc:	f015 ffb7 	bl	2533e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    f3d0:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    f3d4:	b005      	add	sp, #20
    f3d6:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    f3d8:	6800      	ldr	r0, [r0, #0]
    f3da:	b958      	cbnz	r0, f3f4 <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
    f3dc:	4b13      	ldr	r3, [pc, #76]	; (f42c <ipc_service_send+0x78>)
    f3de:	9000      	str	r0, [sp, #0]
    f3e0:	e9cd 0301 	strd	r0, r3, [sp, #4]
    f3e4:	2201      	movs	r2, #1
    f3e6:	4603      	mov	r3, r0
    f3e8:	490f      	ldr	r1, [pc, #60]	; (f428 <ipc_service_send+0x74>)
    f3ea:	f015 ffa8 	bl	2533e <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
    f3ee:	f06f 0001 	mvn.w	r0, #1
    f3f2:	e7ef      	b.n	f3d4 <ipc_service_send+0x20>
	backend = ept->instance->api;
    f3f4:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    f3f6:	b10a      	cbz	r2, f3fc <ipc_service_send+0x48>
    f3f8:	6895      	ldr	r5, [r2, #8]
    f3fa:	b965      	cbnz	r5, f416 <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
    f3fc:	4b0c      	ldr	r3, [pc, #48]	; (f430 <ipc_service_send+0x7c>)
    f3fe:	2201      	movs	r2, #1
    f400:	9302      	str	r3, [sp, #8]
    f402:	2300      	movs	r3, #0
    f404:	4908      	ldr	r1, [pc, #32]	; (f428 <ipc_service_send+0x74>)
    f406:	4618      	mov	r0, r3
    f408:	e9cd 3300 	strd	r3, r3, [sp]
    f40c:	f015 ff97 	bl	2533e <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    f410:	f06f 0004 	mvn.w	r0, #4
    f414:	e7de      	b.n	f3d4 <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
    f416:	460a      	mov	r2, r1
    f418:	46ac      	mov	ip, r5
    f41a:	6861      	ldr	r1, [r4, #4]
}
    f41c:	b005      	add	sp, #20
    f41e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    f422:	4760      	bx	ip
    f424:	0002ce25 	.word	0x0002ce25
    f428:	0002aa10 	.word	0x0002aa10
    f42c:	0002ce36 	.word	0x0002ce36
    f430:	0002cddb 	.word	0x0002cddb

0000f434 <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
    f434:	2000      	movs	r0, #0
    f436:	4b01      	ldr	r3, [pc, #4]	; (f43c <shared_memory_prepare+0x8>)
    f438:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    f43a:	4770      	bx	lr
    f43c:	20070000 	.word	0x20070000

0000f440 <advertise_ept>:
{
    f440:	b530      	push	{r4, r5, lr}
    f442:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f444:	490e      	ldr	r1, [pc, #56]	; (f480 <advertise_ept+0x40>)
{
    f446:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f448:	9102      	str	r1, [sp, #8]
    f44a:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    f44e:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f450:	e9cd 3100 	strd	r3, r1, [sp]
    f454:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f458:	f04f 33ff 	mov.w	r3, #4294967295
    f45c:	4620      	mov	r0, r4
    f45e:	f00f fa91 	bl	1e984 <rpmsg_create_ept>
	if (err != 0) {
    f462:	b950      	cbnz	r0, f47a <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    f464:	2301      	movs	r3, #1
    f466:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    f46a:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    f46e:	b123      	cbz	r3, f47a <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    f470:	4620      	mov	r0, r4
}
    f472:	b005      	add	sp, #20
    f474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    f478:	4718      	bx	r3
}
    f47a:	b005      	add	sp, #20
    f47c:	bd30      	pop	{r4, r5, pc}
    f47e:	bf00      	nop
    f480:	0002544f 	.word	0x0002544f

0000f484 <get_ept>:
{
    f484:	b538      	push	{r3, r4, r5, lr}
    f486:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f488:	4611      	mov	r1, r2
{
    f48a:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f48c:	f015 ffe1 	bl	25452 <get_ept_slot_with_name>
	if (ept != NULL) {
    f490:	4603      	mov	r3, r0
    f492:	b938      	cbnz	r0, f4a4 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f494:	4628      	mov	r0, r5
    f496:	4904      	ldr	r1, [pc, #16]	; (f4a8 <get_ept+0x24>)
    f498:	f015 ffdb 	bl	25452 <get_ept_slot_with_name>
    f49c:	4603      	mov	r3, r0
	if (ept != NULL) {
    f49e:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    f4a0:	6023      	str	r3, [r4, #0]
}
    f4a2:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    f4a4:	2001      	movs	r0, #1
    f4a6:	e7fb      	b.n	f4a0 <get_ept+0x1c>
    f4a8:	0002f577 	.word	0x0002f577

0000f4ac <open>:
{
    f4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f4b0:	2301      	movs	r3, #1
    f4b2:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    f4b4:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f4b6:	6846      	ldr	r6, [r0, #4]
{
    f4b8:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    f4ba:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f4be:	e8d7 2fef 	ldaex	r2, [r7]
    f4c2:	2a00      	cmp	r2, #0
    f4c4:	d103      	bne.n	f4ce <open+0x22>
    f4c6:	e8c7 3fe1 	stlex	r1, r3, [r7]
    f4ca:	2900      	cmp	r1, #0
    f4cc:	d1f7      	bne.n	f4be <open+0x12>
    f4ce:	f040 80b8 	bne.w	f642 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    f4d2:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f4d4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    f4d6:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f4d8:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    f4da:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    f4de:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    f4e2:	bf26      	itte	cs
    f4e4:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    f4e8:	fab3 f383 	clzcs	r3, r3
		return 0;
    f4ec:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    f4ee:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    f4f2:	bf28      	it	cs
    f4f4:	f1c3 0320 	rsbcs	r3, r3, #32
    f4f8:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    f4fa:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    f4fc:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    f500:	f000 8099 	beq.w	f636 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    f504:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f506:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    f508:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    f50a:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    f50c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    f510:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f512:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    f514:	3209      	adds	r2, #9
    f516:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    f51a:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    f51c:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    f520:	440a      	add	r2, r1
	return (buf_size * num);
    f522:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f524:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    f528:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    f52a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    f52e:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    f532:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f534:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    f536:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    f53a:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    f53e:	3303      	adds	r3, #3
    f540:	4413      	add	r3, r2
    f542:	f023 0303 	bic.w	r3, r3, #3
    f546:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    f54a:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    f54c:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    f550:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    f554:	4b3c      	ldr	r3, [pc, #240]	; (f648 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f556:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    f558:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f55c:	6831      	ldr	r1, [r6, #0]
    f55e:	f000 fa1d 	bl	f99c <ipc_static_vrings_init>
	if (err != 0) {
    f562:	4604      	mov	r4, r0
    f564:	bb30      	cbnz	r0, f5b4 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    f566:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    f56a:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f56e:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    f572:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f576:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    f578:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f57a:	bf08      	it	eq
    f57c:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    f57e:	f011 f853 	bl	20628 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    f582:	2300      	movs	r3, #0
    f584:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    f588:	4930      	ldr	r1, [pc, #192]	; (f64c <open+0x1a0>)
    f58a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f58e:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    f592:	9300      	str	r3, [sp, #0]
    f594:	4658      	mov	r0, fp
    f596:	4623      	mov	r3, r4
    f598:	f011 f860 	bl	2065c <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    f59c:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    f5a0:	492b      	ldr	r1, [pc, #172]	; (f650 <open+0x1a4>)
    f5a2:	f010 ff75 	bl	20490 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    f5a6:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    f5aa:	6883      	ldr	r3, [r0, #8]
    f5ac:	685c      	ldr	r4, [r3, #4]
    f5ae:	b91c      	cbnz	r4, f5b8 <open+0x10c>
		return -ENOSYS;
    f5b0:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    f5b4:	2100      	movs	r1, #0
    f5b6:	e037      	b.n	f628 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f5b8:	464b      	mov	r3, r9
    f5ba:	4a26      	ldr	r2, [pc, #152]	; (f654 <open+0x1a8>)
    f5bc:	f8da 1018 	ldr.w	r1, [sl, #24]
    f5c0:	47a0      	blx	r4
	if (err != 0) {
    f5c2:	4604      	mov	r4, r0
    f5c4:	2800      	cmp	r0, #0
    f5c6:	d1f5      	bne.n	f5b4 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    f5c8:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    f5cc:	6883      	ldr	r3, [r0, #8]
    f5ce:	691b      	ldr	r3, [r3, #16]
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	d0ed      	beq.n	f5b0 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    f5d4:	2201      	movs	r2, #1
    f5d6:	f8da 1018 	ldr.w	r1, [sl, #24]
    f5da:	4798      	blx	r3
	if (err != 0) {
    f5dc:	4604      	mov	r4, r0
    f5de:	2800      	cmp	r0, #0
    f5e0:	d1e8      	bne.n	f5b4 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    f5e2:	4b1d      	ldr	r3, [pc, #116]	; (f658 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f5e4:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    f5e6:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    f5ea:	4b1c      	ldr	r3, [pc, #112]	; (f65c <open+0x1b0>)
    f5ec:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f5f0:	4b1b      	ldr	r3, [pc, #108]	; (f660 <open+0x1b4>)
    f5f2:	9303      	str	r3, [sp, #12]
    f5f4:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    f5f8:	9302      	str	r3, [sp, #8]
    f5fa:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    f5fe:	e9cd 8300 	strd	r8, r3, [sp]
    f602:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    f606:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    f608:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f60c:	f000 f98e 	bl	f92c <ipc_rpmsg_init>
	if (err != 0) {
    f610:	4604      	mov	r4, r0
    f612:	2800      	cmp	r0, #0
    f614:	d1ce      	bne.n	f5b4 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f616:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    f61a:	f00f fb57 	bl	1eccc <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    f61e:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f620:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    f624:	db0a      	blt.n	f63c <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    f626:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    f628:	4638      	mov	r0, r7
    f62a:	f015 ff47 	bl	254bc <atomic_set.isra.0>
}
    f62e:	4620      	mov	r0, r4
    f630:	b005      	add	sp, #20
    f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f636:	f06f 040b 	mvn.w	r4, #11
    f63a:	e7bb      	b.n	f5b4 <open+0x108>
		err = -EINVAL;
    f63c:	f06f 0415 	mvn.w	r4, #21
    f640:	e7b8      	b.n	f5b4 <open+0x108>
		return -EALREADY;
    f642:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f646:	e7f2      	b.n	f62e <open+0x182>
    f648:	000254a5 	.word	0x000254a5
    f64c:	200316d8 	.word	0x200316d8
    f650:	0002548b 	.word	0x0002548b
    f654:	0002547f 	.word	0x0002547f
    f658:	0000f729 	.word	0x0000f729
    f65c:	0002555d 	.word	0x0002555d
    f660:	000254ed 	.word	0x000254ed

0000f664 <close>:
{
    f664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f668:	4606      	mov	r6, r0
    f66a:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    f66e:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f670:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    f674:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f678:	e8d7 3fef 	ldaex	r3, [r7]
    f67c:	2b02      	cmp	r3, #2
    f67e:	d103      	bne.n	f688 <close+0x24>
    f680:	e8c7 9fe2 	stlex	r2, r9, [r7]
    f684:	2a00      	cmp	r2, #0
    f686:	d1f7      	bne.n	f678 <close+0x14>
    f688:	d149      	bne.n	f71e <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    f68a:	4826      	ldr	r0, [pc, #152]	; (f724 <close+0xc0>)
    f68c:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f690:	f7f9 fe5c 	bl	934c <strcmp>
    f694:	b120      	cbz	r0, f6a0 <close+0x3c>
		return -EBUSY;
    f696:	f06f 040f 	mvn.w	r4, #15
}
    f69a:	4620      	mov	r0, r4
    f69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    f6a0:	4820      	ldr	r0, [pc, #128]	; (f724 <close+0xc0>)
    f6a2:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    f6a6:	f7f9 fe51 	bl	934c <strcmp>
    f6aa:	2800      	cmp	r0, #0
    f6ac:	d1f3      	bne.n	f696 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    f6ae:	4628      	mov	r0, r5
    f6b0:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f6b4:	f015 ff85 	bl	255c2 <ipc_rpmsg_deinit>
	if (err != 0) {
    f6b8:	4604      	mov	r4, r0
    f6ba:	bb70      	cbnz	r0, f71a <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    f6bc:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    f6be:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    f6c0:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    f6c2:	6883      	ldr	r3, [r0, #8]
    f6c4:	691b      	ldr	r3, [r3, #16]
    f6c6:	b333      	cbz	r3, f716 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    f6c8:	4622      	mov	r2, r4
    f6ca:	6989      	ldr	r1, [r1, #24]
    f6cc:	4798      	blx	r3
	if (err != 0) {
    f6ce:	4604      	mov	r4, r0
    f6d0:	bb18      	cbnz	r0, f71a <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    f6d2:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    f6d6:	4649      	mov	r1, r9
    f6d8:	4630      	mov	r0, r6
    f6da:	f011 f827 	bl	2072c <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    f6de:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    f6e0:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    f6e4:	f001 fa8e 	bl	10c04 <z_impl_k_thread_abort>
    f6e8:	4630      	mov	r0, r6
    f6ea:	f8d8 1000 	ldr.w	r1, [r8]
    f6ee:	f015 ffa5 	bl	2563c <ipc_static_vrings_deinit>
	if (err != 0) {
    f6f2:	4604      	mov	r4, r0
    f6f4:	b988      	cbnz	r0, f71a <close+0xb6>
    f6f6:	4601      	mov	r1, r0
    f6f8:	22e8      	movs	r2, #232	; 0xe8
    f6fa:	4630      	mov	r0, r6
    f6fc:	f01a f98b 	bl	29a16 <memset>
    f700:	4621      	mov	r1, r4
    f702:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    f706:	4628      	mov	r0, r5
    f708:	f01a f985 	bl	29a16 <memset>
	atomic_set(&data->state, STATE_READY);
    f70c:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    f70e:	4638      	mov	r0, r7
    f710:	f015 fed4 	bl	254bc <atomic_set.isra.0>
	return err;
    f714:	e7c1      	b.n	f69a <close+0x36>
		return -ENOSYS;
    f716:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    f71a:	2102      	movs	r1, #2
    f71c:	e7f7      	b.n	f70e <close+0xaa>
		return -EALREADY;
    f71e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f722:	e7ba      	b.n	f69a <close+0x36>
    f724:	0002f577 	.word	0x0002f577

0000f728 <bound_cb>:
{
    f728:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    f72a:	4604      	mov	r4, r0
    f72c:	b140      	cbz	r0, f740 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    f72e:	2300      	movs	r3, #0
    f730:	2201      	movs	r2, #1
    f732:	e9cd 3200 	strd	r3, r2, [sp]
    f736:	4b07      	ldr	r3, [pc, #28]	; (f754 <bound_cb+0x2c>)
    f738:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f73c:	f00f f8d6 	bl	1e8ec <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    f740:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f742:	681b      	ldr	r3, [r3, #0]
    f744:	b123      	cbz	r3, f750 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    f746:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    f748:	b002      	add	sp, #8
    f74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    f74e:	4718      	bx	r3
}
    f750:	b002      	add	sp, #8
    f752:	bd10      	pop	{r4, pc}
    f754:	0002f577 	.word	0x0002f577

0000f758 <send>:
{
    f758:	b513      	push	{r0, r1, r4, lr}
    f75a:	4604      	mov	r4, r0
    f75c:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f75e:	6921      	ldr	r1, [r4, #16]
    f760:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    f764:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    f768:	2902      	cmp	r1, #2
    f76a:	d110      	bne.n	f78e <send+0x36>
	if (len == 0) {
    f76c:	b193      	cbz	r3, f794 <send+0x3c>
	if (!rpmsg_ept) {
    f76e:	b1a0      	cbz	r0, f79a <send+0x42>
    f770:	2101      	movs	r1, #1
    f772:	e9cd 3100 	strd	r3, r1, [sp]
    f776:	4613      	mov	r3, r2
    f778:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f77c:	f00f f8b6 	bl	1e8ec <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    f780:	4b07      	ldr	r3, [pc, #28]	; (f7a0 <send+0x48>)
		return -ENOMEM;
    f782:	4298      	cmp	r0, r3
    f784:	bf08      	it	eq
    f786:	f06f 000b 	mvneq.w	r0, #11
}
    f78a:	b002      	add	sp, #8
    f78c:	bd10      	pop	{r4, pc}
		return -EBUSY;
    f78e:	f06f 000f 	mvn.w	r0, #15
    f792:	e7fa      	b.n	f78a <send+0x32>
		return -EBADMSG;
    f794:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f798:	e7f7      	b.n	f78a <send+0x32>
		return -ENOENT;
    f79a:	f06f 0001 	mvn.w	r0, #1
    f79e:	e7f4      	b.n	f78a <send+0x32>
    f7a0:	fffff82e 	.word	0xfffff82e

0000f7a4 <register_ept>:
{
    f7a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f7a8:	4688      	mov	r8, r1
    f7aa:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    f7ac:	6906      	ldr	r6, [r0, #16]
    f7ae:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    f7b2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    f7b6:	2b02      	cmp	r3, #2
    f7b8:	d15f      	bne.n	f87a <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    f7ba:	6813      	ldr	r3, [r2, #0]
    f7bc:	b923      	cbnz	r3, f7c8 <register_ept+0x24>
		return -EINVAL;
    f7be:	f06f 0015 	mvn.w	r0, #21
}
    f7c2:	b003      	add	sp, #12
    f7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    f7c8:	781b      	ldrb	r3, [r3, #0]
    f7ca:	2b00      	cmp	r3, #0
    f7cc:	d0f7      	beq.n	f7be <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    f7ce:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    f7d2:	f1b9 0f00 	cmp.w	r9, #0
    f7d6:	d133      	bne.n	f840 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    f7d8:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    f7dc:	f04f 32ff 	mov.w	r2, #4294967295
    f7e0:	f04f 33ff 	mov.w	r3, #4294967295
    f7e4:	4638      	mov	r0, r7
    f7e6:	f010 f949 	bl	1fa7c <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    f7ea:	4630      	mov	r0, r6
    f7ec:	682a      	ldr	r2, [r5, #0]
    f7ee:	a901      	add	r1, sp, #4
    f7f0:	f7ff fe48 	bl	f484 <get_ept>
	if (rpmsg_ept == NULL) {
    f7f4:	9c01      	ldr	r4, [sp, #4]
    f7f6:	b91c      	cbnz	r4, f800 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f7f8:	4638      	mov	r0, r7
    f7fa:	f015 fe5d 	bl	254b8 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    f7fe:	e7de      	b.n	f7be <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    f800:	f105 0308 	add.w	r3, r5, #8
    f804:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    f806:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    f808:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    f80c:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    f80e:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    f810:	b160      	cbz	r0, f82c <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f812:	4638      	mov	r0, r7
    f814:	f015 fe50 	bl	254b8 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    f818:	4621      	mov	r1, r4
    f81a:	4630      	mov	r0, r6
    f81c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f81e:	682a      	ldr	r2, [r5, #0]
    f820:	f7ff fe0e 	bl	f440 <advertise_ept>
	return 0;
    f824:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    f826:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    f82a:	e7ca      	b.n	f7c2 <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    f82c:	2220      	movs	r2, #32
    f82e:	6829      	ldr	r1, [r5, #0]
    f830:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f834:	f01a fa3e 	bl	29cb4 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f838:	4638      	mov	r0, r7
    f83a:	f015 fe3d 	bl	254b8 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    f83e:	e7f1      	b.n	f824 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f840:	4630      	mov	r0, r6
    f842:	490f      	ldr	r1, [pc, #60]	; (f880 <register_ept+0xdc>)
    f844:	f015 fe05 	bl	25452 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    f848:	4604      	mov	r4, r0
    f84a:	2800      	cmp	r0, #0
    f84c:	d0b7      	beq.n	f7be <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    f84e:	f105 0308 	add.w	r3, r5, #8
    f852:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    f854:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    f856:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    f858:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    f85a:	2300      	movs	r3, #0
    f85c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    f860:	2220      	movs	r2, #32
    f862:	6829      	ldr	r1, [r5, #0]
    f864:	3040      	adds	r0, #64	; 0x40
    f866:	f01a fa25 	bl	29cb4 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    f86a:	4622      	mov	r2, r4
    f86c:	2101      	movs	r1, #1
    f86e:	4630      	mov	r0, r6
    f870:	f000 f83e 	bl	f8f0 <ipc_rpmsg_register_ept>
	if (err != 0) {
    f874:	2800      	cmp	r0, #0
    f876:	d0d5      	beq.n	f824 <register_ept+0x80>
    f878:	e7a1      	b.n	f7be <register_ept+0x1a>
		return -EBUSY;
    f87a:	f06f 000f 	mvn.w	r0, #15
    f87e:	e7a0      	b.n	f7c2 <register_ept+0x1e>
    f880:	0002f577 	.word	0x0002f577

0000f884 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f888:	4605      	mov	r5, r0
    f88a:	460e      	mov	r6, r1
    f88c:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f88e:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    f890:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    f894:	b085      	sub	sp, #20
    f896:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    f89a:	4621      	mov	r1, r4
    f89c:	4630      	mov	r0, r6
    f89e:	f7f9 fd55 	bl	934c <strcmp>
    f8a2:	b9e0      	cbnz	r0, f8de <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f8a4:	4b11      	ldr	r3, [pc, #68]	; (f8ec <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    f8a6:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f8aa:	9302      	str	r3, [sp, #8]
    f8ac:	f8da 3010 	ldr.w	r3, [sl, #16]
    f8b0:	4632      	mov	r2, r6
    f8b2:	e9cd 8300 	strd	r8, r3, [sp]
    f8b6:	4629      	mov	r1, r5
    f8b8:	f04f 33ff 	mov.w	r3, #4294967295
    f8bc:	4658      	mov	r0, fp
    f8be:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    f8c2:	f00f f85f 	bl	1e984 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    f8c6:	b960      	cbnz	r0, f8e2 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    f8c8:	2370      	movs	r3, #112	; 0x70
    f8ca:	2201      	movs	r2, #1
    f8cc:	fb03 9307 	mla	r3, r3, r7, r9
    f8d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    f8d4:	f8da 300c 	ldr.w	r3, [sl, #12]
    f8d8:	b10b      	cbz	r3, f8de <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    f8da:	4658      	mov	r0, fp
    f8dc:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f8de:	3470      	adds	r4, #112	; 0x70
    f8e0:	b117      	cbz	r7, f8e8 <ns_bind_cb+0x64>
			}
		}
	}
}
    f8e2:	b005      	add	sp, #20
    f8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f8e8:	2701      	movs	r7, #1
    f8ea:	e7d6      	b.n	f89a <ns_bind_cb+0x16>
    f8ec:	000255bf 	.word	0x000255bf

0000f8f0 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    f8f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f8f2:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    f8f4:	b190      	cbz	r0, f91c <ipc_rpmsg_register_ept+0x2c>
    f8f6:	b18a      	cbz	r2, f91c <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    f8f8:	2901      	cmp	r1, #1
    f8fa:	d112      	bne.n	f922 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    f8fc:	4b0a      	ldr	r3, [pc, #40]	; (f928 <ipc_rpmsg_register_ept+0x38>)
    f8fe:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f902:	9302      	str	r3, [sp, #8]
    f904:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    f908:	3240      	adds	r2, #64	; 0x40
    f90a:	9301      	str	r3, [sp, #4]
    f90c:	f04f 33ff 	mov.w	r3, #4294967295
    f910:	4620      	mov	r0, r4
    f912:	9300      	str	r3, [sp, #0]
    f914:	f00f f836 	bl	1e984 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    f918:	b004      	add	sp, #16
    f91a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f91c:	f06f 0015 	mvn.w	r0, #21
    f920:	e7fa      	b.n	f918 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    f922:	2000      	movs	r0, #0
    f924:	e7f8      	b.n	f918 <ipc_rpmsg_register_ept+0x28>
    f926:	bf00      	nop
    f928:	000255bf 	.word	0x000255bf

0000f92c <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    f92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f930:	b087      	sub	sp, #28
    f932:	460e      	mov	r6, r1
    f934:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    f938:	4614      	mov	r4, r2
    f93a:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    f93e:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    f940:	b330      	cbz	r0, f990 <ipc_rpmsg_init+0x64>
    f942:	b329      	cbz	r1, f990 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    f944:	f8df c050 	ldr.w	ip, [pc, #80]	; f998 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    f948:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    f94c:	2d00      	cmp	r5, #0
    f94e:	bf08      	it	eq
    f950:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    f952:	b99e      	cbnz	r6, f97c <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    f954:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    f958:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    f95c:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    f95e:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    f960:	f019 fdc0 	bl	294e4 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    f964:	ab03      	add	r3, sp, #12
    f966:	e9cd 4300 	strd	r4, r3, [sp]
    f96a:	462a      	mov	r2, r5
    f96c:	463b      	mov	r3, r7
    f96e:	4641      	mov	r1, r8
    f970:	4648      	mov	r0, r9
    f972:	f00f f9d1 	bl	1ed18 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    f976:	b007      	add	sp, #28
    f978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    f97c:	2200      	movs	r2, #0
    f97e:	4641      	mov	r1, r8
    f980:	920e      	str	r2, [sp, #56]	; 0x38
    f982:	4648      	mov	r0, r9
    f984:	462a      	mov	r2, r5
}
    f986:	b007      	add	sp, #28
    f988:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    f98c:	f00f baee 	b.w	1ef6c <rpmsg_init_vdev>
		return -EINVAL;
    f990:	f06f 0015 	mvn.w	r0, #21
    f994:	e7ef      	b.n	f976 <ipc_rpmsg_init+0x4a>
    f996:	bf00      	nop
    f998:	0000f885 	.word	0x0000f885

0000f99c <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    f99c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f99e:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    f9a0:	4604      	mov	r4, r0
{
    f9a2:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    f9a4:	2800      	cmp	r0, #0
    f9a6:	d06f      	beq.n	fa88 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    f9a8:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    f9aa:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    f9ac:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f9ae:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    f9b0:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    f9b4:	4f36      	ldr	r7, [pc, #216]	; (fa90 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f9b6:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    f9b8:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    f9bc:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f9c0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f9c4:	f04f 33ff 	mov.w	r3, #4294967295
    f9c8:	9300      	str	r3, [sp, #0]
    f9ca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    f9cc:	f019 f8f3 	bl	28bb6 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    f9d0:	4a30      	ldr	r2, [pc, #192]	; (fa94 <ipc_static_vrings_init+0xf8>)
    f9d2:	ab06      	add	r3, sp, #24
    f9d4:	e892 0003 	ldmia.w	r2, {r0, r1}
    f9d8:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    f9dc:	4618      	mov	r0, r3
    f9de:	f00e fea5 	bl	1e72c <metal_init>
	if (err != 0) {
    f9e2:	4605      	mov	r5, r0
    f9e4:	b9d8      	cbnz	r0, fa1e <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    f9e6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    f9ea:	f00e fe7f 	bl	1e6ec <metal_register_generic_device>
	if (err != 0) {
    f9ee:	4605      	mov	r5, r0
    f9f0:	b9a8      	cbnz	r0, fa1e <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    f9f2:	4639      	mov	r1, r7
    f9f4:	4828      	ldr	r0, [pc, #160]	; (fa98 <ipc_static_vrings_init+0xfc>)
    f9f6:	aa05      	add	r2, sp, #20
    f9f8:	f019 f8b5 	bl	28b66 <metal_device_open>
	if (err != 0) {
    f9fc:	4605      	mov	r5, r0
    f9fe:	b970      	cbnz	r0, fa1e <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    fa00:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    fa02:	689a      	ldr	r2, [r3, #8]
    fa04:	b172      	cbz	r2, fa24 <ipc_static_vrings_init+0x88>
    fa06:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fa08:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    fa0c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fa10:	f015 fe06 	bl	25620 <virtqueue_allocate>
    fa14:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    fa18:	b930      	cbnz	r0, fa28 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    fa1a:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    fa1e:	4628      	mov	r0, r5
    fa20:	b009      	add	sp, #36	; 0x24
    fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa24:	4603      	mov	r3, r0
    fa26:	e7ef      	b.n	fa08 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    fa28:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    fa2c:	f015 fdf8 	bl	25620 <virtqueue_allocate>
    fa30:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    fa34:	2800      	cmp	r0, #0
    fa36:	d0f0      	beq.n	fa1a <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fa38:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fa3c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fa40:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    fa44:	2304      	movs	r3, #4
    fa46:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    fa4a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    fa4e:	2302      	movs	r3, #2
    fa50:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    fa52:	4b12      	ldr	r3, [pc, #72]	; (fa9c <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fa54:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fa58:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fa5c:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    fa60:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fa64:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    fa68:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fa6a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fa6e:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fa72:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fa76:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    fa7a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    fa7e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    fa82:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fa84:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    fa86:	e7ca      	b.n	fa1e <ipc_static_vrings_init+0x82>
		return -EINVAL;
    fa88:	f06f 0515 	mvn.w	r5, #21
    fa8c:	e7c7      	b.n	fa1e <ipc_static_vrings_init+0x82>
    fa8e:	bf00      	nop
    fa90:	0002ce60 	.word	0x0002ce60
    fa94:	0002aac0 	.word	0x0002aac0
    fa98:	0002ce6a 	.word	0x0002ce6a
    fa9c:	0002aff4 	.word	0x0002aff4

0000faa0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    faa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    faa4:	4605      	mov	r5, r0
	__asm__ volatile(
    faa6:	f04f 0320 	mov.w	r3, #32
    faaa:	f3ef 8611 	mrs	r6, BASEPRI
    faae:	f383 8812 	msr	BASEPRI_MAX, r3
    fab2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fab6:	4820      	ldr	r0, [pc, #128]	; (fb38 <pm_state_notify+0x98>)
    fab8:	f00f ff8a 	bl	1f9d0 <z_spin_lock_valid>
    fabc:	b968      	cbnz	r0, fada <pm_state_notify+0x3a>
    fabe:	2394      	movs	r3, #148	; 0x94
    fac0:	4a1e      	ldr	r2, [pc, #120]	; (fb3c <pm_state_notify+0x9c>)
    fac2:	491f      	ldr	r1, [pc, #124]	; (fb40 <pm_state_notify+0xa0>)
    fac4:	481f      	ldr	r0, [pc, #124]	; (fb44 <pm_state_notify+0xa4>)
    fac6:	f015 fa06 	bl	24ed6 <assert_print>
    faca:	491b      	ldr	r1, [pc, #108]	; (fb38 <pm_state_notify+0x98>)
    facc:	481e      	ldr	r0, [pc, #120]	; (fb48 <pm_state_notify+0xa8>)
    face:	f015 fa02 	bl	24ed6 <assert_print>
    fad2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fad4:	4819      	ldr	r0, [pc, #100]	; (fb3c <pm_state_notify+0x9c>)
    fad6:	f015 f9f7 	bl	24ec8 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    fada:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    fade:	4816      	ldr	r0, [pc, #88]	; (fb38 <pm_state_notify+0x98>)
    fae0:	f00f ff92 	bl	1fa08 <z_spin_lock_set_owner>
	return list->head;
    fae4:	4b19      	ldr	r3, [pc, #100]	; (fb4c <pm_state_notify+0xac>)
    fae6:	4f1a      	ldr	r7, [pc, #104]	; (fb50 <pm_state_notify+0xb0>)
    fae8:	681c      	ldr	r4, [r3, #0]
    faea:	f8df 8068 	ldr.w	r8, [pc, #104]	; fb54 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    faee:	b97c      	cbnz	r4, fb10 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    faf0:	4811      	ldr	r0, [pc, #68]	; (fb38 <pm_state_notify+0x98>)
    faf2:	f00f ff7b 	bl	1f9ec <z_spin_unlock_valid>
    faf6:	b9c8      	cbnz	r0, fb2c <pm_state_notify+0x8c>
    faf8:	23c2      	movs	r3, #194	; 0xc2
    fafa:	4a10      	ldr	r2, [pc, #64]	; (fb3c <pm_state_notify+0x9c>)
    fafc:	4916      	ldr	r1, [pc, #88]	; (fb58 <pm_state_notify+0xb8>)
    fafe:	4811      	ldr	r0, [pc, #68]	; (fb44 <pm_state_notify+0xa4>)
    fb00:	f015 f9e9 	bl	24ed6 <assert_print>
    fb04:	490c      	ldr	r1, [pc, #48]	; (fb38 <pm_state_notify+0x98>)
    fb06:	4815      	ldr	r0, [pc, #84]	; (fb5c <pm_state_notify+0xbc>)
    fb08:	f015 f9e5 	bl	24ed6 <assert_print>
    fb0c:	21c2      	movs	r1, #194	; 0xc2
    fb0e:	e7e1      	b.n	fad4 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    fb10:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    fb14:	2d00      	cmp	r5, #0
    fb16:	bf18      	it	ne
    fb18:	4613      	movne	r3, r2
		if (callback) {
    fb1a:	b12b      	cbz	r3, fb28 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    fb1c:	f898 2014 	ldrb.w	r2, [r8, #20]
    fb20:	fb09 f202 	mul.w	r2, r9, r2
    fb24:	5cb8      	ldrb	r0, [r7, r2]
    fb26:	4798      	blx	r3
	return node->next;
    fb28:	6824      	ldr	r4, [r4, #0]
    fb2a:	e7e0      	b.n	faee <pm_state_notify+0x4e>
	__asm__ volatile(
    fb2c:	f386 8811 	msr	BASEPRI, r6
    fb30:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    fb34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb38:	20020f88 	.word	0x20020f88
    fb3c:	0002c76f 	.word	0x0002c76f
    fb40:	0002c7c8 	.word	0x0002c7c8
    fb44:	0002b939 	.word	0x0002b939
    fb48:	0002c7dd 	.word	0x0002c7dd
    fb4c:	20020fa8 	.word	0x20020fa8
    fb50:	20020f9c 	.word	0x20020f9c
    fb54:	20021504 	.word	0x20021504
    fb58:	0002c79c 	.word	0x0002c79c
    fb5c:	0002c7b3 	.word	0x0002c7b3

0000fb60 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    fb60:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    fb62:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    fb64:	4b16      	ldr	r3, [pc, #88]	; (fbc0 <pm_system_resume+0x60>)
    fb66:	7d1c      	ldrb	r4, [r3, #20]
    fb68:	f004 031f 	and.w	r3, r4, #31
    fb6c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fb6e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fb70:	4b14      	ldr	r3, [pc, #80]	; (fbc4 <pm_system_resume+0x64>)
    fb72:	0961      	lsrs	r1, r4, #5
    fb74:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    fb78:	e8d3 1fef 	ldaex	r1, [r3]
    fb7c:	ea01 0500 	and.w	r5, r1, r0
    fb80:	e8c3 5fe6 	stlex	r6, r5, [r3]
    fb84:	2e00      	cmp	r6, #0
    fb86:	d1f7      	bne.n	fb78 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    fb88:	420a      	tst	r2, r1
    fb8a:	d013      	beq.n	fbb4 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    fb8c:	4b0e      	ldr	r3, [pc, #56]	; (fbc8 <pm_system_resume+0x68>)
    fb8e:	4d0f      	ldr	r5, [pc, #60]	; (fbcc <pm_system_resume+0x6c>)
    fb90:	b18b      	cbz	r3, fbb6 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    fb92:	230c      	movs	r3, #12
    fb94:	4363      	muls	r3, r4
    fb96:	18ea      	adds	r2, r5, r3
    fb98:	7851      	ldrb	r1, [r2, #1]
    fb9a:	5ce8      	ldrb	r0, [r5, r3]
    fb9c:	f015 f9e0 	bl	24f60 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    fba0:	2000      	movs	r0, #0
    fba2:	f7ff ff7d 	bl	faa0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    fba6:	230c      	movs	r3, #12
    fba8:	435c      	muls	r4, r3
    fbaa:	2300      	movs	r3, #0
    fbac:	192a      	adds	r2, r5, r4
    fbae:	512b      	str	r3, [r5, r4]
    fbb0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    fbb4:	bd70      	pop	{r4, r5, r6, pc}
    fbb6:	f383 8811 	msr	BASEPRI, r3
    fbba:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    fbbe:	e7ef      	b.n	fba0 <pm_system_resume+0x40>
    fbc0:	20021504 	.word	0x20021504
    fbc4:	20020fb0 	.word	0x20020fb0
    fbc8:	00024f61 	.word	0x00024f61
    fbcc:	20020f9c 	.word	0x20020f9c

0000fbd0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    fbd4:	4b45      	ldr	r3, [pc, #276]	; (fcec <pm_system_suspend+0x11c>)
{
    fbd6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    fbd8:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    fbda:	f04f 0320 	mov.w	r3, #32
    fbde:	f3ef 8811 	mrs	r8, BASEPRI
    fbe2:	f383 8812 	msr	BASEPRI_MAX, r3
    fbe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fbea:	4841      	ldr	r0, [pc, #260]	; (fcf0 <pm_system_suspend+0x120>)
    fbec:	f00f fef0 	bl	1f9d0 <z_spin_lock_valid>
    fbf0:	b968      	cbnz	r0, fc0e <pm_system_suspend+0x3e>
    fbf2:	2394      	movs	r3, #148	; 0x94
    fbf4:	4a3f      	ldr	r2, [pc, #252]	; (fcf4 <pm_system_suspend+0x124>)
    fbf6:	4940      	ldr	r1, [pc, #256]	; (fcf8 <pm_system_suspend+0x128>)
    fbf8:	4840      	ldr	r0, [pc, #256]	; (fcfc <pm_system_suspend+0x12c>)
    fbfa:	f015 f96c 	bl	24ed6 <assert_print>
    fbfe:	493c      	ldr	r1, [pc, #240]	; (fcf0 <pm_system_suspend+0x120>)
    fc00:	483f      	ldr	r0, [pc, #252]	; (fd00 <pm_system_suspend+0x130>)
    fc02:	f015 f968 	bl	24ed6 <assert_print>
    fc06:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fc08:	483a      	ldr	r0, [pc, #232]	; (fcf4 <pm_system_suspend+0x124>)
    fc0a:	f015 f95d 	bl	24ec8 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    fc0e:	240c      	movs	r4, #12
    fc10:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    fc12:	4837      	ldr	r0, [pc, #220]	; (fcf0 <pm_system_suspend+0x120>)
    fc14:	f00f fef8 	bl	1fa08 <z_spin_lock_set_owner>
    fc18:	4b3a      	ldr	r3, [pc, #232]	; (fd04 <pm_system_suspend+0x134>)
    fc1a:	4e3b      	ldr	r6, [pc, #236]	; (fd08 <pm_system_suspend+0x138>)
    fc1c:	5d19      	ldrb	r1, [r3, r4]
    fc1e:	191a      	adds	r2, r3, r4
    fc20:	b1b9      	cbz	r1, fc52 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    fc22:	ca07      	ldmia	r2, {r0, r1, r2}
    fc24:	eb06 0c04 	add.w	ip, r6, r4
    fc28:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    fc2c:	2200      	movs	r2, #0
    fc2e:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fc30:	482f      	ldr	r0, [pc, #188]	; (fcf0 <pm_system_suspend+0x120>)
    fc32:	f00f fedb 	bl	1f9ec <z_spin_unlock_valid>
    fc36:	4604      	mov	r4, r0
    fc38:	b9b0      	cbnz	r0, fc68 <pm_system_suspend+0x98>
    fc3a:	23c2      	movs	r3, #194	; 0xc2
    fc3c:	4a2d      	ldr	r2, [pc, #180]	; (fcf4 <pm_system_suspend+0x124>)
    fc3e:	4933      	ldr	r1, [pc, #204]	; (fd0c <pm_system_suspend+0x13c>)
    fc40:	482e      	ldr	r0, [pc, #184]	; (fcfc <pm_system_suspend+0x12c>)
    fc42:	f015 f948 	bl	24ed6 <assert_print>
    fc46:	492a      	ldr	r1, [pc, #168]	; (fcf0 <pm_system_suspend+0x120>)
    fc48:	4831      	ldr	r0, [pc, #196]	; (fd10 <pm_system_suspend+0x140>)
    fc4a:	f015 f944 	bl	24ed6 <assert_print>
    fc4e:	21c2      	movs	r1, #194	; 0xc2
    fc50:	e7da      	b.n	fc08 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    fc52:	4639      	mov	r1, r7
    fc54:	4628      	mov	r0, r5
    fc56:	f000 f865 	bl	fd24 <pm_policy_next_state>
		if (info != NULL) {
    fc5a:	2800      	cmp	r0, #0
    fc5c:	d0e8      	beq.n	fc30 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    fc5e:	c807      	ldmia	r0, {r0, r1, r2}
    fc60:	4434      	add	r4, r6
    fc62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fc66:	e7e3      	b.n	fc30 <pm_system_suspend+0x60>
	__asm__ volatile(
    fc68:	f388 8811 	msr	BASEPRI, r8
    fc6c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    fc70:	230c      	movs	r3, #12
    fc72:	436b      	muls	r3, r5
    fc74:	18f2      	adds	r2, r6, r3
    fc76:	5cf3      	ldrb	r3, [r6, r3]
    fc78:	b3ab      	cbz	r3, fce6 <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    fc7a:	1c7b      	adds	r3, r7, #1
    fc7c:	d00f      	beq.n	fc9e <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
    fc7e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    fc82:	2100      	movs	r1, #0
    fc84:	f8d2 e008 	ldr.w	lr, [r2, #8]
    fc88:	4822      	ldr	r0, [pc, #136]	; (fd14 <pm_system_suspend+0x144>)
    fc8a:	2300      	movs	r3, #0
    fc8c:	fbee 010c 	umlal	r0, r1, lr, ip
    fc90:	4a21      	ldr	r2, [pc, #132]	; (fd18 <pm_system_suspend+0x148>)
    fc92:	f7f9 f92d 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    fc96:	2101      	movs	r1, #1
    fc98:	1a38      	subs	r0, r7, r0
    fc9a:	f012 fb77 	bl	2238c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    fc9e:	f011 f9f5 	bl	2108c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    fca2:	2001      	movs	r0, #1
    fca4:	f7ff fefc 	bl	faa0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fca8:	4b1c      	ldr	r3, [pc, #112]	; (fd1c <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fcaa:	096a      	lsrs	r2, r5, #5
    fcac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    fcb0:	2201      	movs	r2, #1
    fcb2:	f005 011f 	and.w	r1, r5, #31
    fcb6:	408a      	lsls	r2, r1
    fcb8:	e8d3 0fef 	ldaex	r0, [r3]
    fcbc:	4310      	orrs	r0, r2
    fcbe:	e8c3 0fe1 	stlex	r1, r0, [r3]
    fcc2:	2900      	cmp	r1, #0
    fcc4:	d1f8      	bne.n	fcb8 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    fcc6:	4b16      	ldr	r3, [pc, #88]	; (fd20 <pm_system_suspend+0x150>)
    fcc8:	b133      	cbz	r3, fcd8 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    fcca:	230c      	movs	r3, #12
    fccc:	436b      	muls	r3, r5
    fcce:	18f2      	adds	r2, r6, r3
    fcd0:	7851      	ldrb	r1, [r2, #1]
    fcd2:	5cf0      	ldrb	r0, [r6, r3]
    fcd4:	f015 f938 	bl	24f48 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    fcd8:	f7ff ff42 	bl	fb60 <pm_system_resume>
	k_sched_unlock();
    fcdc:	f011 fa42 	bl	21164 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    fce0:	4620      	mov	r0, r4
    fce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    fce6:	461c      	mov	r4, r3
    fce8:	e7fa      	b.n	fce0 <pm_system_suspend+0x110>
    fcea:	bf00      	nop
    fcec:	20021504 	.word	0x20021504
    fcf0:	20020f8c 	.word	0x20020f8c
    fcf4:	0002c76f 	.word	0x0002c76f
    fcf8:	0002c7c8 	.word	0x0002c7c8
    fcfc:	0002b939 	.word	0x0002b939
    fd00:	0002c7dd 	.word	0x0002c7dd
    fd04:	20020f90 	.word	0x20020f90
    fd08:	20020f9c 	.word	0x20020f9c
    fd0c:	0002c79c 	.word	0x0002c79c
    fd10:	0002c7b3 	.word	0x0002c7b3
    fd14:	000f423f 	.word	0x000f423f
    fd18:	000f4240 	.word	0x000f4240
    fd1c:	20020fb0 	.word	0x20020fb0
    fd20:	00024f49 	.word	0x00024f49

0000fd24 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd28:	b085      	sub	sp, #20
    fd2a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    fd2c:	a903      	add	r1, sp, #12
    fd2e:	f000 f843 	bl	fdb8 <pm_state_cpu_get_all>
    fd32:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    fd36:	4604      	mov	r4, r0
    fd38:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    fd3c:	4b1b      	ldr	r3, [pc, #108]	; (fdac <pm_policy_next_state+0x88>)
    fd3e:	9d03      	ldr	r5, [sp, #12]
    fd40:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    fd44:	1e43      	subs	r3, r0, #1
    fd46:	b21b      	sxth	r3, r3
    fd48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fd4c:	f8df 8060 	ldr.w	r8, [pc, #96]	; fdb0 <pm_policy_next_state+0x8c>
    fd50:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    fd54:	b924      	cbnz	r4, fd60 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    fd56:	46a1      	mov	r9, r4
}
    fd58:	4648      	mov	r0, r9
    fd5a:	b005      	add	sp, #20
    fd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd60:	46c4      	mov	ip, r8
    fd62:	4659      	mov	r1, fp
    fd64:	6868      	ldr	r0, [r5, #4]
    fd66:	2300      	movs	r3, #0
    fd68:	fbe0 c107 	umlal	ip, r1, r0, r7
    fd6c:	4a11      	ldr	r2, [pc, #68]	; (fdb4 <pm_policy_next_state+0x90>)
    fd6e:	4660      	mov	r0, ip
    fd70:	f7f9 f8be 	bl	8ef0 <__aeabi_uldivmod>
    fd74:	46c4      	mov	ip, r8
    fd76:	4659      	mov	r1, fp
    fd78:	9001      	str	r0, [sp, #4]
    fd7a:	68a8      	ldr	r0, [r5, #8]
    fd7c:	2300      	movs	r3, #0
    fd7e:	fbe0 c107 	umlal	ip, r1, r0, r7
    fd82:	4a0c      	ldr	r2, [pc, #48]	; (fdb4 <pm_policy_next_state+0x90>)
    fd84:	4660      	mov	r0, ip
    fd86:	f7f9 f8b3 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    fd8a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    fd8e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    fd90:	d001      	beq.n	fd96 <pm_policy_next_state+0x72>
    fd92:	4582      	cmp	sl, r0
    fd94:	d905      	bls.n	fda2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    fd96:	1c73      	adds	r3, r6, #1
    fd98:	d0de      	beq.n	fd58 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    fd9a:	9b01      	ldr	r3, [sp, #4]
    fd9c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    fd9e:	42b0      	cmp	r0, r6
    fda0:	d9da      	bls.n	fd58 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    fda2:	3c01      	subs	r4, #1
    fda4:	b2a4      	uxth	r4, r4
    fda6:	3d0c      	subs	r5, #12
    fda8:	e7d4      	b.n	fd54 <pm_policy_next_state+0x30>
    fdaa:	bf00      	nop
    fdac:	2000842c 	.word	0x2000842c
    fdb0:	000f423f 	.word	0x000f423f
    fdb4:	000f4240 	.word	0x000f4240

0000fdb8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    fdb8:	b908      	cbnz	r0, fdbe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    fdba:	4b02      	ldr	r3, [pc, #8]	; (fdc4 <pm_state_cpu_get_all+0xc>)
    fdbc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    fdbe:	2000      	movs	r0, #0
    fdc0:	4770      	bx	lr
    fdc2:	bf00      	nop
    fdc4:	0002b018 	.word	0x0002b018

0000fdc8 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
    fdc8:	4b03      	ldr	r3, [pc, #12]	; (fdd8 <nus_ccc_cfg_changed+0x10>)
    fdca:	689b      	ldr	r3, [r3, #8]
    fdcc:	b11b      	cbz	r3, fdd6 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
    fdce:	1e48      	subs	r0, r1, #1
    fdd0:	bf18      	it	ne
    fdd2:	2001      	movne	r0, #1
    fdd4:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
    fdd6:	4770      	bx	lr
    fdd8:	20020fb4 	.word	0x20020fb4

0000fddc <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
    fddc:	b510      	push	{r4, lr}
    fdde:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
    fde0:	4b03      	ldr	r3, [pc, #12]	; (fdf0 <on_receive+0x14>)
{
    fde2:	4611      	mov	r1, r2
	if (nus_cb.received) {
    fde4:	681b      	ldr	r3, [r3, #0]
    fde6:	b10b      	cbz	r3, fdec <on_receive+0x10>
		nus_cb.received(conn, buf, len);
    fde8:	4622      	mov	r2, r4
    fdea:	4798      	blx	r3
}
	return len;
}
    fdec:	4620      	mov	r0, r4
    fdee:	bd10      	pop	{r4, pc}
    fdf0:	20020fb4 	.word	0x20020fb4

0000fdf4 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
    fdf4:	4b02      	ldr	r3, [pc, #8]	; (fe00 <on_sent+0xc>)
    fdf6:	685b      	ldr	r3, [r3, #4]
    fdf8:	b103      	cbz	r3, fdfc <on_sent+0x8>
		nus_cb.sent(conn);
    fdfa:	4718      	bx	r3
	}
}
    fdfc:	4770      	bx	lr
    fdfe:	bf00      	nop
    fe00:	20020fb4 	.word	0x20020fb4

0000fe04 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
    fe04:	b130      	cbz	r0, fe14 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
    fe06:	4b04      	ldr	r3, [pc, #16]	; (fe18 <bt_nus_init+0x14>)
    fe08:	6802      	ldr	r2, [r0, #0]
    fe0a:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
    fe0c:	6842      	ldr	r2, [r0, #4]
    fe0e:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
    fe10:	6882      	ldr	r2, [r0, #8]
    fe12:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
    fe14:	2000      	movs	r0, #0
    fe16:	4770      	bx	lr
    fe18:	20020fb4 	.word	0x20020fb4

0000fe1c <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
    fe1c:	b570      	push	{r4, r5, r6, lr}
    fe1e:	460e      	mov	r6, r1
    fe20:	4615      	mov	r5, r2
    fe22:	4604      	mov	r4, r0
    fe24:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
    fe26:	2100      	movs	r1, #0
    fe28:	2218      	movs	r2, #24
    fe2a:	4668      	mov	r0, sp
    fe2c:	f019 fdf3 	bl	29a16 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
    fe30:	490b      	ldr	r1, [pc, #44]	; (fe60 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
    fe32:	4b0c      	ldr	r3, [pc, #48]	; (fe64 <bt_nus_send+0x48>)
	params.data = data;
    fe34:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
    fe38:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
    fe3c:	9304      	str	r3, [sp, #16]

	if (!conn) {
    fe3e:	b92c      	cbnz	r4, fe4c <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
    fe40:	4669      	mov	r1, sp
    fe42:	4620      	mov	r0, r4
    fe44:	f007 f866 	bl	16f14 <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
    fe48:	b006      	add	sp, #24
    fe4a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
    fe4c:	2201      	movs	r2, #1
    fe4e:	4620      	mov	r0, r4
    fe50:	f006 fd26 	bl	168a0 <bt_gatt_is_subscribed>
    fe54:	2800      	cmp	r0, #0
    fe56:	d1f3      	bne.n	fe40 <bt_nus_send+0x24>
		return -EINVAL;
    fe58:	f06f 0015 	mvn.w	r0, #21
    fe5c:	e7f4      	b.n	fe48 <bt_nus_send+0x2c>
    fe5e:	bf00      	nop
    fe60:	0002b040 	.word	0x0002b040
    fe64:	0000fdf5 	.word	0x0000fdf5

0000fe68 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    fe68:	4904      	ldr	r1, [pc, #16]	; (fe7c <sub_bytes+0x14>)
    fe6a:	1e43      	subs	r3, r0, #1
    fe6c:	300f      	adds	r0, #15
    fe6e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    fe72:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    fe74:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    fe76:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    fe78:	d1f9      	bne.n	fe6e <sub_bytes+0x6>
	}
}
    fe7a:	4770      	bx	lr
    fe7c:	0002ce7c 	.word	0x0002ce7c

0000fe80 <tc_aes128_set_encrypt_key>:
{
    fe80:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe82:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    fe84:	4e26      	ldr	r6, [pc, #152]	; (ff20 <tc_aes128_set_encrypt_key+0xa0>)
{
    fe86:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    fe88:	ad01      	add	r5, sp, #4
{
    fe8a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    fe8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fe8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fe90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fe92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fe94:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    fe98:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    fe9c:	4638      	mov	r0, r7
    fe9e:	2f00      	cmp	r7, #0
    fea0:	d039      	beq.n	ff16 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    fea2:	2c00      	cmp	r4, #0
    fea4:	d039      	beq.n	ff1a <tc_aes128_set_encrypt_key+0x9a>
    fea6:	1f38      	subs	r0, r7, #4
    fea8:	4602      	mov	r2, r0
    feaa:	4621      	mov	r1, r4
    feac:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    feae:	784b      	ldrb	r3, [r1, #1]
    feb0:	780d      	ldrb	r5, [r1, #0]
    feb2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    feb4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    feb8:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    feba:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    febc:	432b      	orrs	r3, r5
    febe:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    fec2:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    fec4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    fec8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    fecc:	d1ef      	bne.n	feae <tc_aes128_set_encrypt_key+0x2e>
    fece:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    fed0:	4c14      	ldr	r4, [pc, #80]	; (ff24 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    fed2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    fed4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    fed6:	d116      	bne.n	ff06 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    fed8:	f3c3 4207 	ubfx	r2, r3, #16, #8
    fedc:	5ca5      	ldrb	r5, [r4, r2]
    fede:	0e1a      	lsrs	r2, r3, #24
    fee0:	5ca2      	ldrb	r2, [r4, r2]
    fee2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    fee6:	f3c3 2507 	ubfx	r5, r3, #8, #8
    feea:	5d65      	ldrb	r5, [r4, r5]
    feec:	b2db      	uxtb	r3, r3
    feee:	5ce3      	ldrb	r3, [r4, r3]
    fef0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    fef4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    fef8:	f021 0303 	bic.w	r3, r1, #3
    fefc:	3330      	adds	r3, #48	; 0x30
    fefe:	446b      	add	r3, sp
    ff00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    ff04:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    ff06:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    ff0a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    ff0c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    ff0e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    ff10:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    ff12:	d1de      	bne.n	fed2 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    ff14:	2001      	movs	r0, #1
}
    ff16:	b00d      	add	sp, #52	; 0x34
    ff18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    ff1a:	4620      	mov	r0, r4
    ff1c:	e7fb      	b.n	ff16 <tc_aes128_set_encrypt_key+0x96>
    ff1e:	bf00      	nop
    ff20:	0002aac8 	.word	0x0002aac8
    ff24:	0002ce7c 	.word	0x0002ce7c

0000ff28 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    ff28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ff2c:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ff2e:	6803      	ldr	r3, [r0, #0]
{
    ff30:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ff32:	9302      	str	r3, [sp, #8]
    ff34:	6843      	ldr	r3, [r0, #4]
    ff36:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 100f4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf4>
    ff3a:	9303      	str	r3, [sp, #12]
    ff3c:	6883      	ldr	r3, [r0, #8]
    ff3e:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    ff42:	9304      	str	r3, [sp, #16]
    ff44:	68c3      	ldr	r3, [r0, #12]
    ff46:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ff48:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ff4a:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ff4e:	9306      	str	r3, [sp, #24]
    ff50:	6943      	ldr	r3, [r0, #20]
    ff52:	9307      	str	r3, [sp, #28]
    ff54:	6983      	ldr	r3, [r0, #24]
    ff56:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    ff5a:	9308      	str	r3, [sp, #32]
    ff5c:	69c3      	ldr	r3, [r0, #28]
    ff5e:	4698      	mov	r8, r3
    ff60:	9309      	str	r3, [sp, #36]	; 0x24
    ff62:	9b08      	ldr	r3, [sp, #32]
    ff64:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    ff66:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    ff68:	ab0c      	add	r3, sp, #48	; 0x30
    ff6a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ff6c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    ff70:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    ff72:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ff76:	44a9      	add	r9, r5
    ff78:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    ff7c:	9d00      	ldr	r5, [sp, #0]
    ff7e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    ff82:	444b      	add	r3, r9
    ff84:	ea25 0502 	bic.w	r5, r5, r2
    ff88:	ea02 090c 	and.w	r9, r2, ip
    ff8c:	ea85 0509 	eor.w	r5, r5, r9
    ff90:	442b      	add	r3, r5
    ff92:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    ff94:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    ff98:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    ff9c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    ffa0:	4025      	ands	r5, r4
    ffa2:	ea06 090b 	and.w	r9, r6, fp
    ffa6:	ea85 0509 	eor.w	r5, r5, r9
    ffaa:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    ffae:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    ffb0:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    ffb2:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    ffb4:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    ffb8:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    ffba:	46de      	mov	lr, fp
    ffbc:	f8dd 8000 	ldr.w	r8, [sp]
    ffc0:	f040 8088 	bne.w	100d4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd4>
    ffc4:	f04f 0a10 	mov.w	sl, #16
    ffc8:	494b      	ldr	r1, [pc, #300]	; (100f8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xf8>)
    ffca:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    ffcc:	4651      	mov	r1, sl
    ffce:	f10a 0a01 	add.w	sl, sl, #1
    ffd2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    ffd6:	f00a 070f 	and.w	r7, sl, #15
    ffda:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    ffde:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ffe2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    ffe6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    ffea:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    ffec:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    fff0:	f101 070e 	add.w	r7, r1, #14
    fff4:	f007 070f 	and.w	r7, r7, #15
    fff8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    fffc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10000:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   10002:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   10006:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   1000a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1000e:	f001 010f 	and.w	r1, r1, #15
   10012:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10016:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   1001a:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   1001e:	f859 ec40 	ldr.w	lr, [r9, #-64]
   10022:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   10026:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1002a:	4471      	add	r1, lr
		s0 = sigma0(s0);
   1002c:	f8dd e004 	ldr.w	lr, [sp, #4]
   10030:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   10034:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10038:	4441      	add	r1, r8
		s1 = sigma1(s1);
   1003a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1003e:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10040:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10044:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10048:	ea2c 0705 	bic.w	r7, ip, r5
   1004c:	ea87 0708 	eor.w	r7, r7, r8
   10050:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10054:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10058:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   1005c:	4477      	add	r7, lr
   1005e:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10062:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10066:	4477      	add	r7, lr
   10068:	440f      	add	r7, r1
   1006a:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   1006c:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10070:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   10072:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10076:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   1007a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   1007e:	ea07 0703 	and.w	r7, r7, r3
   10082:	ea04 0806 	and.w	r8, r4, r6
   10086:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   1008a:	ea87 0708 	eor.w	r7, r7, r8
   1008e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10090:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   10092:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   10096:	f8cd c000 	str.w	ip, [sp]
   1009a:	46b3      	mov	fp, r6
   1009c:	d122      	bne.n	100e4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe4>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1009e:	9902      	ldr	r1, [sp, #8]
   100a0:	4439      	add	r1, r7
   100a2:	6001      	str	r1, [r0, #0]
   100a4:	9903      	ldr	r1, [sp, #12]
   100a6:	4419      	add	r1, r3
   100a8:	9b04      	ldr	r3, [sp, #16]
   100aa:	6041      	str	r1, [r0, #4]
   100ac:	4423      	add	r3, r4
   100ae:	6083      	str	r3, [r0, #8]
   100b0:	9b05      	ldr	r3, [sp, #20]
   100b2:	4433      	add	r3, r6
   100b4:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   100b6:	9b06      	ldr	r3, [sp, #24]
   100b8:	4473      	add	r3, lr
   100ba:	6103      	str	r3, [r0, #16]
   100bc:	9b07      	ldr	r3, [sp, #28]
   100be:	442b      	add	r3, r5
   100c0:	6143      	str	r3, [r0, #20]
   100c2:	9b08      	ldr	r3, [sp, #32]
   100c4:	4413      	add	r3, r2
   100c6:	6183      	str	r3, [r0, #24]
   100c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   100ca:	4463      	add	r3, ip
   100cc:	61c3      	str	r3, [r0, #28]
}
   100ce:	b01d      	add	sp, #116	; 0x74
   100d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100d4:	46b3      	mov	fp, r6
   100d6:	f8cd c000 	str.w	ip, [sp]
   100da:	4626      	mov	r6, r4
   100dc:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   100de:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   100e0:	462a      	mov	r2, r5
   100e2:	e740      	b.n	ff66 <compress+0x3e>
   100e4:	4694      	mov	ip, r2
   100e6:	4626      	mov	r6, r4
   100e8:	462a      	mov	r2, r5
   100ea:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   100ec:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   100ee:	463b      	mov	r3, r7
   100f0:	e76c      	b.n	ffcc <compress+0xa4>
   100f2:	bf00      	nop
   100f4:	0002b090 	.word	0x0002b090
   100f8:	0002b0cc 	.word	0x0002b0cc

000100fc <tc_sha256_init>:
{
   100fc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   100fe:	4604      	mov	r4, r0
   10100:	b1c8      	cbz	r0, 10136 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   10102:	2270      	movs	r2, #112	; 0x70
   10104:	2100      	movs	r1, #0
   10106:	f015 fad6 	bl	256b6 <_set>
	s->iv[1] = 0xbb67ae85;
   1010a:	4b0b      	ldr	r3, [pc, #44]	; (10138 <tc_sha256_init+0x3c>)
   1010c:	4a0b      	ldr	r2, [pc, #44]	; (1013c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   1010e:	490c      	ldr	r1, [pc, #48]	; (10140 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   10110:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   10114:	4b0b      	ldr	r3, [pc, #44]	; (10144 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   10116:	480c      	ldr	r0, [pc, #48]	; (10148 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   10118:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   1011c:	4b0b      	ldr	r3, [pc, #44]	; (1014c <tc_sha256_init+0x50>)
   1011e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   10122:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   10124:	4b0a      	ldr	r3, [pc, #40]	; (10150 <tc_sha256_init+0x54>)
   10126:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   10128:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1012c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   10130:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   10134:	61e3      	str	r3, [r4, #28]
}
   10136:	bd10      	pop	{r4, pc}
   10138:	bb67ae85 	.word	0xbb67ae85
   1013c:	6a09e667 	.word	0x6a09e667
   10140:	3c6ef372 	.word	0x3c6ef372
   10144:	a54ff53a 	.word	0xa54ff53a
   10148:	510e527f 	.word	0x510e527f
   1014c:	9b05688c 	.word	0x9b05688c
   10150:	1f83d9ab 	.word	0x1f83d9ab

00010154 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10154:	4901      	ldr	r1, [pc, #4]	; (1015c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10156:	2210      	movs	r2, #16
	str	r2, [r1]
   10158:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1015a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1015c:	e000ed10 	.word	0xe000ed10

00010160 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10160:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10162:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10164:	f380 8811 	msr	BASEPRI, r0
	isb
   10168:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1016c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10170:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10172:	b662      	cpsie	i
	isb
   10174:	f3bf 8f6f 	isb	sy

	bx	lr
   10178:	4770      	bx	lr
   1017a:	bf00      	nop

0001017c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1017c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1017e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10180:	f381 8811 	msr	BASEPRI, r1

	wfe
   10184:	bf20      	wfe

	msr	BASEPRI, r0
   10186:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1018a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1018c:	4770      	bx	lr
   1018e:	bf00      	nop

00010190 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10190:	b570      	push	{r4, r5, r6, lr}
   10192:	4606      	mov	r6, r0

	if (esf != NULL) {
   10194:	460d      	mov	r5, r1
{
   10196:	b086      	sub	sp, #24
	if (esf != NULL) {
   10198:	2900      	cmp	r1, #0
   1019a:	d038      	beq.n	1020e <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1019c:	2400      	movs	r4, #0
   1019e:	688b      	ldr	r3, [r1, #8]
   101a0:	2201      	movs	r2, #1
   101a2:	9305      	str	r3, [sp, #20]
   101a4:	684b      	ldr	r3, [r1, #4]
   101a6:	4620      	mov	r0, r4
   101a8:	9304      	str	r3, [sp, #16]
   101aa:	680b      	ldr	r3, [r1, #0]
   101ac:	491b      	ldr	r1, [pc, #108]	; (1021c <z_arm_fatal_error+0x8c>)
   101ae:	9303      	str	r3, [sp, #12]
   101b0:	4b1b      	ldr	r3, [pc, #108]	; (10220 <z_arm_fatal_error+0x90>)
   101b2:	e9cd 4400 	strd	r4, r4, [sp]
   101b6:	9302      	str	r3, [sp, #8]
   101b8:	4623      	mov	r3, r4
   101ba:	f015 feba 	bl	25f32 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   101be:	696b      	ldr	r3, [r5, #20]
   101c0:	2201      	movs	r2, #1
   101c2:	9305      	str	r3, [sp, #20]
   101c4:	692b      	ldr	r3, [r5, #16]
   101c6:	4620      	mov	r0, r4
   101c8:	9304      	str	r3, [sp, #16]
   101ca:	68eb      	ldr	r3, [r5, #12]
   101cc:	4913      	ldr	r1, [pc, #76]	; (1021c <z_arm_fatal_error+0x8c>)
   101ce:	9303      	str	r3, [sp, #12]
   101d0:	4b14      	ldr	r3, [pc, #80]	; (10224 <z_arm_fatal_error+0x94>)
   101d2:	9400      	str	r4, [sp, #0]
   101d4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   101d8:	4623      	mov	r3, r4
   101da:	f015 feaa 	bl	25f32 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   101de:	69eb      	ldr	r3, [r5, #28]
   101e0:	2201      	movs	r2, #1
   101e2:	9303      	str	r3, [sp, #12]
   101e4:	4b10      	ldr	r3, [pc, #64]	; (10228 <z_arm_fatal_error+0x98>)
   101e6:	4620      	mov	r0, r4
   101e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   101ec:	490b      	ldr	r1, [pc, #44]	; (1021c <z_arm_fatal_error+0x8c>)
   101ee:	4623      	mov	r3, r4
   101f0:	9400      	str	r4, [sp, #0]
   101f2:	f015 fe9e 	bl	25f32 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   101f6:	69ab      	ldr	r3, [r5, #24]
   101f8:	2201      	movs	r2, #1
   101fa:	9303      	str	r3, [sp, #12]
   101fc:	4b0b      	ldr	r3, [pc, #44]	; (1022c <z_arm_fatal_error+0x9c>)
   101fe:	4620      	mov	r0, r4
   10200:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10204:	4905      	ldr	r1, [pc, #20]	; (1021c <z_arm_fatal_error+0x8c>)
   10206:	4623      	mov	r3, r4
   10208:	9400      	str	r4, [sp, #0]
   1020a:	f015 fe92 	bl	25f32 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1020e:	4629      	mov	r1, r5
   10210:	4630      	mov	r0, r6
}
   10212:	b006      	add	sp, #24
   10214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   10218:	f00e bf46 	b.w	1f0a8 <z_fatal_error>
   1021c:	0002aa48 	.word	0x0002aa48
   10220:	0002cf7c 	.word	0x0002cf7c
   10224:	0002cfab 	.word	0x0002cfab
   10228:	0002cfda 	.word	0x0002cfda
   1022c:	0002cfe9 	.word	0x0002cfe9

00010230 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10230:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10232:	2800      	cmp	r0, #0
   10234:	db07      	blt.n	10246 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10236:	2301      	movs	r3, #1
   10238:	0941      	lsrs	r1, r0, #5
   1023a:	4a03      	ldr	r2, [pc, #12]	; (10248 <arch_irq_enable+0x18>)
   1023c:	f000 001f 	and.w	r0, r0, #31
   10240:	4083      	lsls	r3, r0
   10242:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10246:	4770      	bx	lr
   10248:	e000e100 	.word	0xe000e100

0001024c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1024c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1024e:	2800      	cmp	r0, #0
   10250:	db0c      	blt.n	1026c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10252:	2201      	movs	r2, #1
   10254:	4906      	ldr	r1, [pc, #24]	; (10270 <arch_irq_disable+0x24>)
   10256:	0943      	lsrs	r3, r0, #5
   10258:	f000 001f 	and.w	r0, r0, #31
   1025c:	4082      	lsls	r2, r0
   1025e:	3320      	adds	r3, #32
   10260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10264:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10268:	f3bf 8f6f 	isb	sy
}
   1026c:	4770      	bx	lr
   1026e:	bf00      	nop
   10270:	e000e100 	.word	0xe000e100

00010274 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10274:	4b05      	ldr	r3, [pc, #20]	; (1028c <arch_irq_is_enabled+0x18>)
   10276:	0942      	lsrs	r2, r0, #5
   10278:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1027c:	2301      	movs	r3, #1
   1027e:	f000 001f 	and.w	r0, r0, #31
   10282:	fa03 f000 	lsl.w	r0, r3, r0
}
   10286:	4010      	ands	r0, r2
   10288:	4770      	bx	lr
   1028a:	bf00      	nop
   1028c:	e000e100 	.word	0xe000e100

00010290 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   10290:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   10292:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10294:	2b07      	cmp	r3, #7
{
   10296:	4604      	mov	r4, r0
   10298:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1029a:	d90f      	bls.n	102bc <z_arm_irq_priority_set+0x2c>
   1029c:	235b      	movs	r3, #91	; 0x5b
   1029e:	4a10      	ldr	r2, [pc, #64]	; (102e0 <z_arm_irq_priority_set+0x50>)
   102a0:	4910      	ldr	r1, [pc, #64]	; (102e4 <z_arm_irq_priority_set+0x54>)
   102a2:	4811      	ldr	r0, [pc, #68]	; (102e8 <z_arm_irq_priority_set+0x58>)
   102a4:	f014 fe17 	bl	24ed6 <assert_print>
   102a8:	4629      	mov	r1, r5
   102aa:	4810      	ldr	r0, [pc, #64]	; (102ec <z_arm_irq_priority_set+0x5c>)
   102ac:	2307      	movs	r3, #7
   102ae:	4622      	mov	r2, r4
   102b0:	f014 fe11 	bl	24ed6 <assert_print>
   102b4:	215b      	movs	r1, #91	; 0x5b
   102b6:	480a      	ldr	r0, [pc, #40]	; (102e0 <z_arm_irq_priority_set+0x50>)
   102b8:	f014 fe06 	bl	24ec8 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   102bc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   102be:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   102c0:	bfac      	ite	ge
   102c2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   102c6:	4a0a      	ldrlt	r2, [pc, #40]	; (102f0 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   102c8:	ea4f 1343 	mov.w	r3, r3, lsl #5
   102cc:	b2db      	uxtb	r3, r3
   102ce:	bfab      	itete	ge
   102d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   102d4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   102d8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   102dc:	5413      	strblt	r3, [r2, r0]
}
   102de:	bd38      	pop	{r3, r4, r5, pc}
   102e0:	0002d017 	.word	0x0002d017
   102e4:	0002d04d 	.word	0x0002d04d
   102e8:	0002b939 	.word	0x0002b939
   102ec:	0002d068 	.word	0x0002d068
   102f0:	e000ed14 	.word	0xe000ed14

000102f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   102f4:	bf30      	wfi
    b z_SysNmiOnReset
   102f6:	f7ff bffd 	b.w	102f4 <z_SysNmiOnReset>
   102fa:	bf00      	nop

000102fc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   102fc:	4a0b      	ldr	r2, [pc, #44]	; (1032c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   102fe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10300:	4b0b      	ldr	r3, [pc, #44]	; (10330 <z_arm_prep_c+0x34>)
   10302:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10306:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   10308:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1030c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10310:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10314:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1031c:	f00e ff7a 	bl	1f214 <z_bss_zero>
	z_data_copy();
   10320:	f011 fe74 	bl	2200c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10324:	f000 fbe8 	bl	10af8 <z_arm_interrupt_init>
	z_cstart();
   10328:	f00e ffb4 	bl	1f294 <z_cstart>
   1032c:	00008000 	.word	0x00008000
   10330:	e000ed00 	.word	0xe000ed00

00010334 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10334:	4a09      	ldr	r2, [pc, #36]	; (1035c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10336:	490a      	ldr	r1, [pc, #40]	; (10360 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10338:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1033a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1033c:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1033e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10340:	4908      	ldr	r1, [pc, #32]	; (10364 <arch_swap+0x30>)
   10342:	684b      	ldr	r3, [r1, #4]
   10344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10348:	604b      	str	r3, [r1, #4]
   1034a:	2300      	movs	r3, #0
   1034c:	f383 8811 	msr	BASEPRI, r3
   10350:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10354:	6893      	ldr	r3, [r2, #8]
}
   10356:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10358:	4770      	bx	lr
   1035a:	bf00      	nop
   1035c:	20021504 	.word	0x20021504
   10360:	0002b814 	.word	0x0002b814
   10364:	e000ed00 	.word	0xe000ed00

00010368 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10368:	4915      	ldr	r1, [pc, #84]	; (103c0 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1036a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1036c:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10370:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10374:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10376:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1037a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1037e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   10380:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10384:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10388:	4f0e      	ldr	r7, [pc, #56]	; (103c4 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1038a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1038e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   10390:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10392:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   10394:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10398:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1039a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1039c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1039e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   103a2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   103a6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   103aa:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   103ae:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   103b2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   103b4:	f015 fddc 	bl	25f70 <configure_builtin_stack_guard>
    pop {r2, lr}
   103b8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   103bc:	4770      	bx	lr
   103be:	0000      	.short	0x0000
    ldr r1, =_kernel
   103c0:	20021504 	.word	0x20021504
    ldr v4, =_SCS_ICSR
   103c4:	e000ed04 	.word	0xe000ed04

000103c8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   103c8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   103cc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   103ce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   103d2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   103d6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   103d8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   103dc:	2902      	cmp	r1, #2
    beq _oops
   103de:	d0ff      	beq.n	103e0 <_oops>

000103e0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   103e0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   103e2:	f015 fdb6 	bl	25f52 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   103e6:	bd01      	pop	{r0, pc}

000103e8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   103e8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   103ec:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   103ee:	490d      	ldr	r1, [pc, #52]	; (10424 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   103f0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   103f4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   103f6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   103fa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   103fe:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   10400:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   10404:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   10408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1040c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   10410:	2300      	movs	r3, #0
   10412:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   10414:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10418:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1041a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1041c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10420:	4770      	bx	lr
   10422:	bf00      	nop
   10424:	00024b87 	.word	0x00024b87

00010428 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10428:	4b08      	ldr	r3, [pc, #32]	; (1044c <arch_switch_to_main_thread+0x24>)
   1042a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1042c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1042e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10432:	4610      	mov	r0, r2
   10434:	f381 8809 	msr	PSP, r1
   10438:	2100      	movs	r1, #0
   1043a:	b663      	cpsie	if
   1043c:	f381 8811 	msr	BASEPRI, r1
   10440:	f3bf 8f6f 	isb	sy
   10444:	2200      	movs	r2, #0
   10446:	2300      	movs	r3, #0
   10448:	f014 fb9d 	bl	24b86 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1044c:	20021504 	.word	0x20021504

00010450 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10450:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10452:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10454:	4a0b      	ldr	r2, [pc, #44]	; (10484 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10456:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   10458:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1045a:	bf1e      	ittt	ne
	movne	r1, #0
   1045c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1045e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   10460:	f019 f8a7 	blne	295b2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10464:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10466:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1046a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1046e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10472:	4905      	ldr	r1, [pc, #20]	; (10488 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10474:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10476:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10478:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1047a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1047e:	4903      	ldr	r1, [pc, #12]	; (1048c <_isr_wrapper+0x3c>)
	bx r1
   10480:	4708      	bx	r1
   10482:	0000      	.short	0x0000
	ldr r2, =_kernel
   10484:	20021504 	.word	0x20021504
	ldr r1, =_sw_isr_table
   10488:	0002a4d8 	.word	0x0002a4d8
	ldr r1, =z_arm_int_exit
   1048c:	00010491 	.word	0x00010491

00010490 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10490:	4b04      	ldr	r3, [pc, #16]	; (104a4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10492:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10494:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10496:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10498:	d003      	beq.n	104a2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1049a:	4903      	ldr	r1, [pc, #12]	; (104a8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1049c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   104a0:	600a      	str	r2, [r1, #0]

000104a2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   104a2:	4770      	bx	lr
	ldr r3, =_kernel
   104a4:	20021504 	.word	0x20021504
	ldr r1, =_SCS_ICSR
   104a8:	e000ed04 	.word	0xe000ed04

000104ac <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   104ae:	2400      	movs	r4, #0
   104b0:	4b48      	ldr	r3, [pc, #288]	; (105d4 <mem_manage_fault.constprop.0+0x128>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   104b2:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   104b4:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   104b6:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   104b8:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   104ba:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   104bc:	2201      	movs	r2, #1
   104be:	4620      	mov	r0, r4
   104c0:	e9cd 4400 	strd	r4, r4, [sp]
   104c4:	4944      	ldr	r1, [pc, #272]	; (105d8 <mem_manage_fault.constprop.0+0x12c>)
   104c6:	f015 fd57 	bl	25f78 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   104ca:	4b44      	ldr	r3, [pc, #272]	; (105dc <mem_manage_fault.constprop.0+0x130>)
   104cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   104ce:	06dd      	lsls	r5, r3, #27
   104d0:	d509      	bpl.n	104e6 <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   104d2:	4b43      	ldr	r3, [pc, #268]	; (105e0 <mem_manage_fault.constprop.0+0x134>)
   104d4:	2201      	movs	r2, #1
   104d6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   104da:	4620      	mov	r0, r4
   104dc:	4623      	mov	r3, r4
   104de:	493e      	ldr	r1, [pc, #248]	; (105d8 <mem_manage_fault.constprop.0+0x12c>)
   104e0:	9400      	str	r4, [sp, #0]
   104e2:	f015 fd49 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   104e6:	4b3d      	ldr	r3, [pc, #244]	; (105dc <mem_manage_fault.constprop.0+0x130>)
   104e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   104ea:	0718      	lsls	r0, r3, #28
   104ec:	d509      	bpl.n	10502 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   104ee:	4b3d      	ldr	r3, [pc, #244]	; (105e4 <mem_manage_fault.constprop.0+0x138>)
   104f0:	2201      	movs	r2, #1
   104f2:	9302      	str	r3, [sp, #8]
   104f4:	2300      	movs	r3, #0
   104f6:	4938      	ldr	r1, [pc, #224]	; (105d8 <mem_manage_fault.constprop.0+0x12c>)
   104f8:	4618      	mov	r0, r3
   104fa:	e9cd 3300 	strd	r3, r3, [sp]
   104fe:	f015 fd3b 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10502:	4d36      	ldr	r5, [pc, #216]	; (105dc <mem_manage_fault.constprop.0+0x130>)
   10504:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10506:	0799      	lsls	r1, r3, #30
   10508:	d51e      	bpl.n	10548 <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   1050a:	2400      	movs	r4, #0
   1050c:	4b36      	ldr	r3, [pc, #216]	; (105e8 <mem_manage_fault.constprop.0+0x13c>)
   1050e:	2201      	movs	r2, #1
   10510:	9302      	str	r3, [sp, #8]
   10512:	4620      	mov	r0, r4
   10514:	4623      	mov	r3, r4
   10516:	e9cd 4400 	strd	r4, r4, [sp]
   1051a:	492f      	ldr	r1, [pc, #188]	; (105d8 <mem_manage_fault.constprop.0+0x12c>)
   1051c:	f015 fd2c 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   10520:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10522:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10524:	0612      	lsls	r2, r2, #24
   10526:	d50f      	bpl.n	10548 <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10528:	9303      	str	r3, [sp, #12]
   1052a:	4b30      	ldr	r3, [pc, #192]	; (105ec <mem_manage_fault.constprop.0+0x140>)
   1052c:	2201      	movs	r2, #1
   1052e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10532:	4620      	mov	r0, r4
   10534:	4623      	mov	r3, r4
   10536:	4928      	ldr	r1, [pc, #160]	; (105d8 <mem_manage_fault.constprop.0+0x12c>)
   10538:	9400      	str	r4, [sp, #0]
   1053a:	f015 fd1d 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   1053e:	b11f      	cbz	r7, 10548 <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10540:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10546:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10548:	4b24      	ldr	r3, [pc, #144]	; (105dc <mem_manage_fault.constprop.0+0x130>)
   1054a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1054c:	07df      	lsls	r7, r3, #31
   1054e:	d509      	bpl.n	10564 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   10550:	4b27      	ldr	r3, [pc, #156]	; (105f0 <mem_manage_fault.constprop.0+0x144>)
   10552:	2201      	movs	r2, #1
   10554:	9302      	str	r3, [sp, #8]
   10556:	2300      	movs	r3, #0
   10558:	491f      	ldr	r1, [pc, #124]	; (105d8 <mem_manage_fault.constprop.0+0x12c>)
   1055a:	4618      	mov	r0, r3
   1055c:	e9cd 3300 	strd	r3, r3, [sp]
   10560:	f015 fd0a 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10564:	4b1d      	ldr	r3, [pc, #116]	; (105dc <mem_manage_fault.constprop.0+0x130>)
   10566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10568:	069d      	lsls	r5, r3, #26
   1056a:	d509      	bpl.n	10580 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   1056c:	4b21      	ldr	r3, [pc, #132]	; (105f4 <mem_manage_fault.constprop.0+0x148>)
   1056e:	2201      	movs	r2, #1
   10570:	9302      	str	r3, [sp, #8]
   10572:	2300      	movs	r3, #0
   10574:	4918      	ldr	r1, [pc, #96]	; (105d8 <mem_manage_fault.constprop.0+0x12c>)
   10576:	4618      	mov	r0, r3
   10578:	e9cd 3300 	strd	r3, r3, [sp]
   1057c:	f015 fcfc 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10580:	4b16      	ldr	r3, [pc, #88]	; (105dc <mem_manage_fault.constprop.0+0x130>)
   10582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10584:	06d4      	lsls	r4, r2, #27
   10586:	d402      	bmi.n	1058e <mem_manage_fault.constprop.0+0xe2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1058a:	0790      	lsls	r0, r2, #30
   1058c:	d511      	bpl.n	105b2 <mem_manage_fault.constprop.0+0x106>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1058e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10590:	06d9      	lsls	r1, r3, #27
   10592:	d50e      	bpl.n	105b2 <mem_manage_fault.constprop.0+0x106>
   10594:	4918      	ldr	r1, [pc, #96]	; (105f8 <mem_manage_fault.constprop.0+0x14c>)
   10596:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   1059a:	4a18      	ldr	r2, [pc, #96]	; (105fc <mem_manage_fault.constprop.0+0x150>)
   1059c:	4818      	ldr	r0, [pc, #96]	; (10600 <mem_manage_fault.constprop.0+0x154>)
   1059e:	f014 fc9a 	bl	24ed6 <assert_print>
   105a2:	4818      	ldr	r0, [pc, #96]	; (10604 <mem_manage_fault.constprop.0+0x158>)
   105a4:	f014 fc97 	bl	24ed6 <assert_print>
   105a8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   105ac:	4813      	ldr	r0, [pc, #76]	; (105fc <mem_manage_fault.constprop.0+0x150>)
   105ae:	f014 fc8b 	bl	24ec8 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   105b2:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   105b4:	4b09      	ldr	r3, [pc, #36]	; (105dc <mem_manage_fault.constprop.0+0x130>)
   105b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   105b8:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   105ba:	bf42      	ittt	mi
   105bc:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   105be:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   105c2:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   105c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   105c6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   105ca:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   105cc:	7030      	strb	r0, [r6, #0]

	return reason;
}
   105ce:	b005      	add	sp, #20
   105d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105d2:	bf00      	nop
   105d4:	0002d0a8 	.word	0x0002d0a8
   105d8:	0002aa48 	.word	0x0002aa48
   105dc:	e000ed00 	.word	0xe000ed00
   105e0:	0002d0be 	.word	0x0002d0be
   105e4:	0002d0f1 	.word	0x0002d0f1
   105e8:	0002d104 	.word	0x0002d104
   105ec:	0002d11c 	.word	0x0002d11c
   105f0:	0002d132 	.word	0x0002d132
   105f4:	0002d151 	.word	0x0002d151
   105f8:	0002d1ba 	.word	0x0002d1ba
   105fc:	0002d180 	.word	0x0002d180
   10600:	0002b939 	.word	0x0002b939
   10604:	0002d204 	.word	0x0002d204

00010608 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10608:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1060a:	2400      	movs	r4, #0
   1060c:	4b3b      	ldr	r3, [pc, #236]	; (106fc <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1060e:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   10610:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10612:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   10614:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10616:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   10618:	2201      	movs	r2, #1
   1061a:	4620      	mov	r0, r4
   1061c:	e9cd 4400 	strd	r4, r4, [sp]
   10620:	4937      	ldr	r1, [pc, #220]	; (10700 <bus_fault.constprop.0+0xf8>)
   10622:	f015 fca9 	bl	25f78 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10626:	4b37      	ldr	r3, [pc, #220]	; (10704 <bus_fault.constprop.0+0xfc>)
   10628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1062a:	04db      	lsls	r3, r3, #19
   1062c:	d509      	bpl.n	10642 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   1062e:	4b36      	ldr	r3, [pc, #216]	; (10708 <bus_fault.constprop.0+0x100>)
   10630:	2201      	movs	r2, #1
   10632:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10636:	4620      	mov	r0, r4
   10638:	4623      	mov	r3, r4
   1063a:	4931      	ldr	r1, [pc, #196]	; (10700 <bus_fault.constprop.0+0xf8>)
   1063c:	9400      	str	r4, [sp, #0]
   1063e:	f015 fc9b 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10642:	4b30      	ldr	r3, [pc, #192]	; (10704 <bus_fault.constprop.0+0xfc>)
   10644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10646:	051d      	lsls	r5, r3, #20
   10648:	d509      	bpl.n	1065e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   1064a:	4b30      	ldr	r3, [pc, #192]	; (1070c <bus_fault.constprop.0+0x104>)
   1064c:	2201      	movs	r2, #1
   1064e:	9302      	str	r3, [sp, #8]
   10650:	2300      	movs	r3, #0
   10652:	492b      	ldr	r1, [pc, #172]	; (10700 <bus_fault.constprop.0+0xf8>)
   10654:	4618      	mov	r0, r3
   10656:	e9cd 3300 	strd	r3, r3, [sp]
   1065a:	f015 fc8d 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1065e:	4d29      	ldr	r5, [pc, #164]	; (10704 <bus_fault.constprop.0+0xfc>)
   10660:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10662:	059c      	lsls	r4, r3, #22
   10664:	d51e      	bpl.n	106a4 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   10666:	2400      	movs	r4, #0
   10668:	4b29      	ldr	r3, [pc, #164]	; (10710 <bus_fault.constprop.0+0x108>)
   1066a:	2201      	movs	r2, #1
   1066c:	4620      	mov	r0, r4
   1066e:	9302      	str	r3, [sp, #8]
   10670:	e9cd 4400 	strd	r4, r4, [sp]
   10674:	4623      	mov	r3, r4
   10676:	4922      	ldr	r1, [pc, #136]	; (10700 <bus_fault.constprop.0+0xf8>)
   10678:	f015 fc7e 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1067c:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1067e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10680:	0410      	lsls	r0, r2, #16
   10682:	d50f      	bpl.n	106a4 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10684:	9303      	str	r3, [sp, #12]
   10686:	4b23      	ldr	r3, [pc, #140]	; (10714 <bus_fault.constprop.0+0x10c>)
   10688:	2201      	movs	r2, #1
   1068a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1068e:	4620      	mov	r0, r4
   10690:	4623      	mov	r3, r4
   10692:	491b      	ldr	r1, [pc, #108]	; (10700 <bus_fault.constprop.0+0xf8>)
   10694:	9400      	str	r4, [sp, #0]
   10696:	f015 fc6f 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   1069a:	b11f      	cbz	r7, 106a4 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1069c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1069e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   106a2:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   106a4:	4b17      	ldr	r3, [pc, #92]	; (10704 <bus_fault.constprop.0+0xfc>)
   106a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   106a8:	0559      	lsls	r1, r3, #21
   106aa:	d509      	bpl.n	106c0 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   106ac:	4b1a      	ldr	r3, [pc, #104]	; (10718 <bus_fault.constprop.0+0x110>)
   106ae:	2201      	movs	r2, #1
   106b0:	9302      	str	r3, [sp, #8]
   106b2:	2300      	movs	r3, #0
   106b4:	4912      	ldr	r1, [pc, #72]	; (10700 <bus_fault.constprop.0+0xf8>)
   106b6:	4618      	mov	r0, r3
   106b8:	e9cd 3300 	strd	r3, r3, [sp]
   106bc:	f015 fc5c 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   106c0:	4a10      	ldr	r2, [pc, #64]	; (10704 <bus_fault.constprop.0+0xfc>)
   106c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   106c4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   106c8:	d012      	beq.n	106f0 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   106ca:	4b14      	ldr	r3, [pc, #80]	; (1071c <bus_fault.constprop.0+0x114>)
   106cc:	9302      	str	r3, [sp, #8]
   106ce:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   106d0:	2201      	movs	r2, #1
   106d2:	4618      	mov	r0, r3
   106d4:	e9cd 3300 	strd	r3, r3, [sp]
   106d8:	4909      	ldr	r1, [pc, #36]	; (10700 <bus_fault.constprop.0+0xf8>)
   106da:	f015 fc4d 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   106de:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   106e0:	4a08      	ldr	r2, [pc, #32]	; (10704 <bus_fault.constprop.0+0xfc>)
   106e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   106e4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   106e8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   106ea:	7030      	strb	r0, [r6, #0]

	return reason;
}
   106ec:	b005      	add	sp, #20
   106ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   106f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
   106f2:	0492      	lsls	r2, r2, #18
   106f4:	d5f3      	bpl.n	106de <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   106f6:	4a0a      	ldr	r2, [pc, #40]	; (10720 <bus_fault.constprop.0+0x118>)
   106f8:	9202      	str	r2, [sp, #8]
   106fa:	e7e9      	b.n	106d0 <bus_fault.constprop.0+0xc8>
   106fc:	0002d268 	.word	0x0002d268
   10700:	0002aa48 	.word	0x0002aa48
   10704:	e000ed00 	.word	0xe000ed00
   10708:	0002d27e 	.word	0x0002d27e
   1070c:	0002d0f1 	.word	0x0002d0f1
   10710:	0002d28f 	.word	0x0002d28f
   10714:	0002d2a8 	.word	0x0002d2a8
   10718:	0002d2bd 	.word	0x0002d2bd
   1071c:	0002d2d8 	.word	0x0002d2d8
   10720:	0002d151 	.word	0x0002d151

00010724 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   10724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   10726:	2400      	movs	r4, #0
   10728:	4b3b      	ldr	r3, [pc, #236]	; (10818 <usage_fault.constprop.0+0xf4>)
   1072a:	2201      	movs	r2, #1
   1072c:	9302      	str	r3, [sp, #8]
   1072e:	4620      	mov	r0, r4
   10730:	4623      	mov	r3, r4
   10732:	e9cd 4400 	strd	r4, r4, [sp]
   10736:	4939      	ldr	r1, [pc, #228]	; (1081c <usage_fault.constprop.0+0xf8>)
   10738:	f015 fc1e 	bl	25f78 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1073c:	4b38      	ldr	r3, [pc, #224]	; (10820 <usage_fault.constprop.0+0xfc>)
   1073e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10740:	019b      	lsls	r3, r3, #6
   10742:	d509      	bpl.n	10758 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   10744:	4b37      	ldr	r3, [pc, #220]	; (10824 <usage_fault.constprop.0+0x100>)
   10746:	2201      	movs	r2, #1
   10748:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1074c:	4620      	mov	r0, r4
   1074e:	4623      	mov	r3, r4
   10750:	4932      	ldr	r1, [pc, #200]	; (1081c <usage_fault.constprop.0+0xf8>)
   10752:	9400      	str	r4, [sp, #0]
   10754:	f015 fc10 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10758:	4b31      	ldr	r3, [pc, #196]	; (10820 <usage_fault.constprop.0+0xfc>)
   1075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1075c:	01dc      	lsls	r4, r3, #7
   1075e:	d509      	bpl.n	10774 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   10760:	4b31      	ldr	r3, [pc, #196]	; (10828 <usage_fault.constprop.0+0x104>)
   10762:	2201      	movs	r2, #1
   10764:	9302      	str	r3, [sp, #8]
   10766:	2300      	movs	r3, #0
   10768:	492c      	ldr	r1, [pc, #176]	; (1081c <usage_fault.constprop.0+0xf8>)
   1076a:	4618      	mov	r0, r3
   1076c:	e9cd 3300 	strd	r3, r3, [sp]
   10770:	f015 fc02 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   10774:	4b2a      	ldr	r3, [pc, #168]	; (10820 <usage_fault.constprop.0+0xfc>)
   10776:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   10778:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1077c:	d00a      	beq.n	10794 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1077e:	4b2b      	ldr	r3, [pc, #172]	; (1082c <usage_fault.constprop.0+0x108>)
   10780:	2201      	movs	r2, #1
   10782:	9302      	str	r3, [sp, #8]
   10784:	2300      	movs	r3, #0
   10786:	4925      	ldr	r1, [pc, #148]	; (1081c <usage_fault.constprop.0+0xf8>)
   10788:	4618      	mov	r0, r3
   1078a:	e9cd 3300 	strd	r3, r3, [sp]
   1078e:	f015 fbf3 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   10792:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10794:	4b22      	ldr	r3, [pc, #136]	; (10820 <usage_fault.constprop.0+0xfc>)
   10796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10798:	0318      	lsls	r0, r3, #12
   1079a:	d509      	bpl.n	107b0 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   1079c:	4b24      	ldr	r3, [pc, #144]	; (10830 <usage_fault.constprop.0+0x10c>)
   1079e:	2201      	movs	r2, #1
   107a0:	9302      	str	r3, [sp, #8]
   107a2:	2300      	movs	r3, #0
   107a4:	491d      	ldr	r1, [pc, #116]	; (1081c <usage_fault.constprop.0+0xf8>)
   107a6:	4618      	mov	r0, r3
   107a8:	e9cd 3300 	strd	r3, r3, [sp]
   107ac:	f015 fbe4 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   107b0:	4b1b      	ldr	r3, [pc, #108]	; (10820 <usage_fault.constprop.0+0xfc>)
   107b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   107b4:	0359      	lsls	r1, r3, #13
   107b6:	d509      	bpl.n	107cc <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   107b8:	4b1e      	ldr	r3, [pc, #120]	; (10834 <usage_fault.constprop.0+0x110>)
   107ba:	2201      	movs	r2, #1
   107bc:	9302      	str	r3, [sp, #8]
   107be:	2300      	movs	r3, #0
   107c0:	4916      	ldr	r1, [pc, #88]	; (1081c <usage_fault.constprop.0+0xf8>)
   107c2:	4618      	mov	r0, r3
   107c4:	e9cd 3300 	strd	r3, r3, [sp]
   107c8:	f015 fbd6 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   107cc:	4b14      	ldr	r3, [pc, #80]	; (10820 <usage_fault.constprop.0+0xfc>)
   107ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   107d0:	039a      	lsls	r2, r3, #14
   107d2:	d509      	bpl.n	107e8 <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   107d4:	4b18      	ldr	r3, [pc, #96]	; (10838 <usage_fault.constprop.0+0x114>)
   107d6:	2201      	movs	r2, #1
   107d8:	9302      	str	r3, [sp, #8]
   107da:	2300      	movs	r3, #0
   107dc:	490f      	ldr	r1, [pc, #60]	; (1081c <usage_fault.constprop.0+0xf8>)
   107de:	4618      	mov	r0, r3
   107e0:	e9cd 3300 	strd	r3, r3, [sp]
   107e4:	f015 fbc8 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   107e8:	4b0d      	ldr	r3, [pc, #52]	; (10820 <usage_fault.constprop.0+0xfc>)
   107ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   107ec:	03db      	lsls	r3, r3, #15
   107ee:	d509      	bpl.n	10804 <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   107f0:	4b12      	ldr	r3, [pc, #72]	; (1083c <usage_fault.constprop.0+0x118>)
   107f2:	2201      	movs	r2, #1
   107f4:	9302      	str	r3, [sp, #8]
   107f6:	2300      	movs	r3, #0
   107f8:	4908      	ldr	r1, [pc, #32]	; (1081c <usage_fault.constprop.0+0xf8>)
   107fa:	4618      	mov	r0, r3
   107fc:	e9cd 3300 	strd	r3, r3, [sp]
   10800:	f015 fbba 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10804:	4a06      	ldr	r2, [pc, #24]	; (10820 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   10806:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10808:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1080a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1080e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   10812:	6293      	str	r3, [r2, #40]	; 0x28
}
   10814:	b004      	add	sp, #16
   10816:	bd10      	pop	{r4, pc}
   10818:	0002d2f0 	.word	0x0002d2f0
   1081c:	0002aa48 	.word	0x0002aa48
   10820:	e000ed00 	.word	0xe000ed00
   10824:	0002d308 	.word	0x0002d308
   10828:	0002d31b 	.word	0x0002d31b
   1082c:	0002d335 	.word	0x0002d335
   10830:	0002d35f 	.word	0x0002d35f
   10834:	0002d37d 	.word	0x0002d37d
   10838:	0002d3a2 	.word	0x0002d3a2
   1083c:	0002d3bc 	.word	0x0002d3bc

00010840 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   10840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10844:	4b8e      	ldr	r3, [pc, #568]	; (10a80 <z_arm_fault+0x240>)
{
   10846:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10848:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   1084c:	4688      	mov	r8, r1
   1084e:	4616      	mov	r6, r2
   10850:	2300      	movs	r3, #0
   10852:	b090      	sub	sp, #64	; 0x40
   10854:	f3ca 0708 	ubfx	r7, sl, #0, #9
   10858:	f383 8811 	msr	BASEPRI, r3
   1085c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10860:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   10864:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   10868:	d00e      	beq.n	10888 <z_arm_fault+0x48>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1086a:	4986      	ldr	r1, [pc, #536]	; (10a84 <z_arm_fault+0x244>)
   1086c:	f44f 6384 	mov.w	r3, #1056	; 0x420
   10870:	4a85      	ldr	r2, [pc, #532]	; (10a88 <z_arm_fault+0x248>)
   10872:	4886      	ldr	r0, [pc, #536]	; (10a8c <z_arm_fault+0x24c>)
   10874:	f014 fb2f 	bl	24ed6 <assert_print>
   10878:	4885      	ldr	r0, [pc, #532]	; (10a90 <z_arm_fault+0x250>)
   1087a:	f014 fb2c 	bl	24ed6 <assert_print>
   1087e:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   10882:	4881      	ldr	r0, [pc, #516]	; (10a88 <z_arm_fault+0x248>)
   10884:	f014 fb20 	bl	24ec8 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   10888:	f012 0401 	ands.w	r4, r2, #1
   1088c:	d1ed      	bne.n	1086a <z_arm_fault+0x2a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1088e:	0650      	lsls	r0, r2, #25
   10890:	d404      	bmi.n	1089c <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10892:	0711      	lsls	r1, r2, #28
   10894:	d40e      	bmi.n	108b4 <z_arm_fault+0x74>
			*nested_exc = true;
   10896:	f04f 0901 	mov.w	r9, #1
   1089a:	e00e      	b.n	108ba <z_arm_fault+0x7a>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1089c:	4b7d      	ldr	r3, [pc, #500]	; (10a94 <z_arm_fault+0x254>)
   1089e:	2201      	movs	r2, #1
   108a0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   108a4:	4620      	mov	r0, r4
   108a6:	4623      	mov	r3, r4
   108a8:	497b      	ldr	r1, [pc, #492]	; (10a98 <z_arm_fault+0x258>)
   108aa:	9400      	str	r4, [sp, #0]
   108ac:	f015 fb64 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   108b0:	0772      	lsls	r2, r6, #29
   108b2:	d500      	bpl.n	108b6 <z_arm_fault+0x76>
			ptr_esf = (z_arch_esf_t *)psp;
   108b4:	4645      	mov	r5, r8
	*nested_exc = false;
   108b6:	f04f 0900 	mov.w	r9, #0
	__ASSERT(esf != NULL,
   108ba:	2d00      	cmp	r5, #0
   108bc:	d0d5      	beq.n	1086a <z_arm_fault+0x2a>
	*recoverable = false;
   108be:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   108c2:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   108c4:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
   108c8:	2b09      	cmp	r3, #9
   108ca:	f200 80bf 	bhi.w	10a4c <z_arm_fault+0x20c>
   108ce:	e8df f003 	tbb	[pc, r3]
   108d2:	b305      	.short	0xb305
   108d4:	bdbd96b7 	.word	0xbdbd96b7
   108d8:	bbbdbdbd 	.word	0xbbbdbdbd
	PR_FAULT_INFO("***** HARD FAULT *****");
   108dc:	4b6f      	ldr	r3, [pc, #444]	; (10a9c <z_arm_fault+0x25c>)
   108de:	2201      	movs	r2, #1
   108e0:	e9cd 8301 	strd	r8, r3, [sp, #4]
   108e4:	2300      	movs	r3, #0
   108e6:	496c      	ldr	r1, [pc, #432]	; (10a98 <z_arm_fault+0x258>)
   108e8:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   108ea:	4f65      	ldr	r7, [pc, #404]	; (10a80 <z_arm_fault+0x240>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   108ec:	f8cd 8000 	str.w	r8, [sp]
   108f0:	f015 fb42 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   108f4:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   108f8:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   108fa:	f016 0602 	ands.w	r6, r6, #2
   108fe:	d005      	beq.n	1090c <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   10900:	4b67      	ldr	r3, [pc, #412]	; (10aa0 <z_arm_fault+0x260>)
	PR_FAULT_INFO(
   10902:	e9cd 8301 	strd	r8, r3, [sp, #4]
   10906:	f8cd 8000 	str.w	r8, [sp]
   1090a:	e006      	b.n	1091a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1090e:	2b00      	cmp	r3, #0
   10910:	da0a      	bge.n	10928 <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
   10912:	4b64      	ldr	r3, [pc, #400]	; (10aa4 <z_arm_fault+0x264>)
   10914:	9600      	str	r6, [sp, #0]
   10916:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
   1091a:	2300      	movs	r3, #0
   1091c:	2201      	movs	r2, #1
   1091e:	4618      	mov	r0, r3
   10920:	495d      	ldr	r1, [pc, #372]	; (10a98 <z_arm_fault+0x258>)
   10922:	f015 fb29 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
}
   10926:	e03b      	b.n	109a0 <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   10928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1092a:	005b      	lsls	r3, r3, #1
   1092c:	d577      	bpl.n	10a1e <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   1092e:	4b5e      	ldr	r3, [pc, #376]	; (10aa8 <z_arm_fault+0x268>)
   10930:	2201      	movs	r2, #1
   10932:	e9cd 6301 	strd	r6, r3, [sp, #4]
   10936:	4630      	mov	r0, r6
   10938:	4633      	mov	r3, r6
   1093a:	4957      	ldr	r1, [pc, #348]	; (10a98 <z_arm_fault+0x258>)
   1093c:	9600      	str	r6, [sp, #0]
   1093e:	f015 fb1b 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   10942:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   10944:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   10946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1094a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1094c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10950:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   10954:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   10956:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1095a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1095e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   10960:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10964:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   10968:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1096c:	429a      	cmp	r2, r3
   1096e:	d00a      	beq.n	10986 <z_arm_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   10970:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10972:	b2db      	uxtb	r3, r3
   10974:	2b00      	cmp	r3, #0
   10976:	d034      	beq.n	109e2 <z_arm_fault+0x1a2>
			reason = mem_manage_fault(esf, 1, recoverable);
   10978:	2001      	movs	r0, #1
   1097a:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   1097e:	f7ff fd95 	bl	104ac <mem_manage_fault.constprop.0>
   10982:	4604      	mov	r4, r0
		break;
   10984:	e00c      	b.n	109a0 <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   10986:	682b      	ldr	r3, [r5, #0]
   10988:	2201      	movs	r2, #1
   1098a:	9303      	str	r3, [sp, #12]
   1098c:	4b47      	ldr	r3, [pc, #284]	; (10aac <z_arm_fault+0x26c>)
   1098e:	4630      	mov	r0, r6
   10990:	e9cd 6301 	strd	r6, r3, [sp, #4]
   10994:	4940      	ldr	r1, [pc, #256]	; (10a98 <z_arm_fault+0x258>)
   10996:	4633      	mov	r3, r6
   10998:	9600      	str	r6, [sp, #0]
   1099a:	f015 faed 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   1099e:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   109a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
   109a4:	b9d3      	cbnz	r3, 109dc <z_arm_fault+0x19c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   109a6:	aa08      	add	r2, sp, #32
   109a8:	f105 0620 	add.w	r6, r5, #32
   109ac:	4613      	mov	r3, r2
   109ae:	6828      	ldr	r0, [r5, #0]
   109b0:	6869      	ldr	r1, [r5, #4]
   109b2:	3508      	adds	r5, #8
   109b4:	c303      	stmia	r3!, {r0, r1}
   109b6:	42b5      	cmp	r5, r6
   109b8:	461a      	mov	r2, r3
   109ba:	d1f7      	bne.n	109ac <z_arm_fault+0x16c>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   109bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   109be:	f1b9 0f00 	cmp.w	r9, #0
   109c2:	d057      	beq.n	10a74 <z_arm_fault+0x234>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   109c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   109c8:	b922      	cbnz	r2, 109d4 <z_arm_fault+0x194>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   109ca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   109ce:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   109d2:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   109d4:	4620      	mov	r0, r4
   109d6:	a908      	add	r1, sp, #32
   109d8:	f7ff fbda 	bl	10190 <z_arm_fatal_error>
}
   109dc:	b010      	add	sp, #64	; 0x40
   109de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   109e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   109e4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   109e8:	d005      	beq.n	109f6 <z_arm_fault+0x1b6>
			reason = bus_fault(esf, 1, recoverable);
   109ea:	2001      	movs	r0, #1
   109ec:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   109f0:	f7ff fe0a 	bl	10608 <bus_fault.constprop.0>
   109f4:	e7c5      	b.n	10982 <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   109f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   109f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   109fc:	d302      	bcc.n	10a04 <z_arm_fault+0x1c4>
		reason = usage_fault(esf);
   109fe:	f7ff fe91 	bl	10724 <usage_fault.constprop.0>
   10a02:	e7be      	b.n	10982 <z_arm_fault+0x142>
			__ASSERT(0,
   10a04:	492a      	ldr	r1, [pc, #168]	; (10ab0 <z_arm_fault+0x270>)
   10a06:	f240 23f2 	movw	r3, #754	; 0x2f2
   10a0a:	4a1f      	ldr	r2, [pc, #124]	; (10a88 <z_arm_fault+0x248>)
   10a0c:	481f      	ldr	r0, [pc, #124]	; (10a8c <z_arm_fault+0x24c>)
   10a0e:	f014 fa62 	bl	24ed6 <assert_print>
   10a12:	4828      	ldr	r0, [pc, #160]	; (10ab4 <z_arm_fault+0x274>)
   10a14:	f014 fa5f 	bl	24ed6 <assert_print>
   10a18:	f240 21f2 	movw	r1, #754	; 0x2f2
   10a1c:	e731      	b.n	10882 <z_arm_fault+0x42>
		__ASSERT(0,
   10a1e:	4924      	ldr	r1, [pc, #144]	; (10ab0 <z_arm_fault+0x270>)
   10a20:	f240 23f6 	movw	r3, #758	; 0x2f6
   10a24:	4a18      	ldr	r2, [pc, #96]	; (10a88 <z_arm_fault+0x248>)
   10a26:	4819      	ldr	r0, [pc, #100]	; (10a8c <z_arm_fault+0x24c>)
   10a28:	f014 fa55 	bl	24ed6 <assert_print>
   10a2c:	4822      	ldr	r0, [pc, #136]	; (10ab8 <z_arm_fault+0x278>)
   10a2e:	f014 fa52 	bl	24ed6 <assert_print>
   10a32:	f240 21f6 	movw	r1, #758	; 0x2f6
   10a36:	e724      	b.n	10882 <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   10a38:	2000      	movs	r0, #0
   10a3a:	f10d 011f 	add.w	r1, sp, #31
   10a3e:	e79e      	b.n	1097e <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
   10a40:	2000      	movs	r0, #0
   10a42:	f10d 011f 	add.w	r1, sp, #31
   10a46:	e7d3      	b.n	109f0 <z_arm_fault+0x1b0>
	PR_FAULT_INFO(
   10a48:	4b1c      	ldr	r3, [pc, #112]	; (10abc <z_arm_fault+0x27c>)
   10a4a:	e75a      	b.n	10902 <z_arm_fault+0xc2>
	PR_FAULT_INFO("***** %s %d) *****",
   10a4c:	4a1c      	ldr	r2, [pc, #112]	; (10ac0 <z_arm_fault+0x280>)
   10a4e:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   10a52:	4b1c      	ldr	r3, [pc, #112]	; (10ac4 <z_arm_fault+0x284>)
   10a54:	bf18      	it	ne
   10a56:	4613      	movne	r3, r2
   10a58:	3f10      	subs	r7, #16
   10a5a:	e9cd 3703 	strd	r3, r7, [sp, #12]
   10a5e:	4b1a      	ldr	r3, [pc, #104]	; (10ac8 <z_arm_fault+0x288>)
   10a60:	2201      	movs	r2, #1
   10a62:	9302      	str	r3, [sp, #8]
   10a64:	2300      	movs	r3, #0
   10a66:	490c      	ldr	r1, [pc, #48]	; (10a98 <z_arm_fault+0x258>)
   10a68:	4618      	mov	r0, r3
   10a6a:	e9cd 3300 	strd	r3, r3, [sp]
   10a6e:	f015 fa83 	bl	25f78 <z_log_msg_runtime_create.constprop.0>
}
   10a72:	e795      	b.n	109a0 <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10a74:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   10a78:	f023 0301 	bic.w	r3, r3, #1
   10a7c:	e7a9      	b.n	109d2 <z_arm_fault+0x192>
   10a7e:	bf00      	nop
   10a80:	e000ed00 	.word	0xe000ed00
   10a84:	0002d415 	.word	0x0002d415
   10a88:	0002d180 	.word	0x0002d180
   10a8c:	0002b939 	.word	0x0002b939
   10a90:	0002d428 	.word	0x0002d428
   10a94:	0002d466 	.word	0x0002d466
   10a98:	0002aa48 	.word	0x0002aa48
   10a9c:	0002d489 	.word	0x0002d489
   10aa0:	0002d4a0 	.word	0x0002d4a0
   10aa4:	0002d4c1 	.word	0x0002d4c1
   10aa8:	0002d4cf 	.word	0x0002d4cf
   10aac:	0002d4ee 	.word	0x0002d4ee
   10ab0:	000311d2 	.word	0x000311d2
   10ab4:	0002d50a 	.word	0x0002d50a
   10ab8:	0002d52e 	.word	0x0002d52e
   10abc:	0002d55e 	.word	0x0002d55e
   10ac0:	0002d3fc 	.word	0x0002d3fc
   10ac4:	0002d3e7 	.word	0x0002d3e7
   10ac8:	0002d582 	.word	0x0002d582

00010acc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10acc:	4b04      	ldr	r3, [pc, #16]	; (10ae0 <z_arm_fault_init+0x14>)
   10ace:	695a      	ldr	r2, [r3, #20]
   10ad0:	f042 0210 	orr.w	r2, r2, #16
   10ad4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   10ad6:	695a      	ldr	r2, [r3, #20]
   10ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   10adc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   10ade:	4770      	bx	lr
   10ae0:	e000ed00 	.word	0xe000ed00

00010ae4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   10ae4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   10ae8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   10aec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   10aee:	4672      	mov	r2, lr
	bl z_arm_fault
   10af0:	f7ff fea6 	bl	10840 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   10af4:	bd01      	pop	{r0, pc}
   10af6:	bf00      	nop

00010af8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   10af8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10afa:	2120      	movs	r1, #32
   10afc:	4803      	ldr	r0, [pc, #12]	; (10b0c <z_arm_interrupt_init+0x14>)
   10afe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10b00:	3301      	adds	r3, #1
   10b02:	2b45      	cmp	r3, #69	; 0x45
   10b04:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10b08:	d1f9      	bne.n	10afe <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10b0a:	4770      	bx	lr
   10b0c:	e000e100 	.word	0xe000e100

00010b10 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   10b10:	2000      	movs	r0, #0
    msr CONTROL, r0
   10b12:	f380 8814 	msr	CONTROL, r0
    isb
   10b16:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   10b1a:	2000      	movs	r0, #0
    msr MSPLIM, r0
   10b1c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   10b20:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   10b24:	f7fd fb0a 	bl	e13c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   10b28:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   10b2a:	490e      	ldr	r1, [pc, #56]	; (10b64 <__start+0x54>)
    str r0, [r1]
   10b2c:	6008      	str	r0, [r1, #0]
    dsb
   10b2e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10b32:	480d      	ldr	r0, [pc, #52]	; (10b68 <__start+0x58>)
    msr msp, r0
   10b34:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   10b38:	f000 f83e 	bl	10bb8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10b3c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   10b3e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   10b42:	480a      	ldr	r0, [pc, #40]	; (10b6c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   10b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   10b48:	1840      	adds	r0, r0, r1
    msr PSP, r0
   10b4a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   10b4e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   10b52:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   10b54:	4308      	orrs	r0, r1
    msr CONTROL, r0
   10b56:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   10b5a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   10b5e:	f7ff fbcd 	bl	102fc <z_arm_prep_c>
   10b62:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   10b64:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10b68:	200336d8 	.word	0x200336d8
    ldr r0, =z_interrupt_stacks
   10b6c:	20032998 	.word	0x20032998

00010b70 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   10b70:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   10b74:	4905      	ldr	r1, [pc, #20]	; (10b8c <sys_arch_reboot+0x1c>)
   10b76:	4b06      	ldr	r3, [pc, #24]	; (10b90 <sys_arch_reboot+0x20>)
   10b78:	68ca      	ldr	r2, [r1, #12]
   10b7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   10b7e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10b80:	60cb      	str	r3, [r1, #12]
   10b82:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   10b86:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   10b88:	e7fd      	b.n	10b86 <sys_arch_reboot+0x16>
   10b8a:	bf00      	nop
   10b8c:	e000ed00 	.word	0xe000ed00
   10b90:	05fa0004 	.word	0x05fa0004

00010b94 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   10b94:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   10b96:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   10b98:	4906      	ldr	r1, [pc, #24]	; (10bb4 <z_arm_clear_arm_mpu_config+0x20>)
   10b9a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   10b9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   10ba2:	4293      	cmp	r3, r2
   10ba4:	db00      	blt.n	10ba8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   10ba6:	4770      	bx	lr
  mpu->RNR = rnr;
   10ba8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   10bac:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   10bb0:	3301      	adds	r3, #1
   10bb2:	e7f6      	b.n	10ba2 <z_arm_clear_arm_mpu_config+0xe>
   10bb4:	e000ed00 	.word	0xe000ed00

00010bb8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   10bb8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   10bba:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   10bbc:	2400      	movs	r4, #0
   10bbe:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   10bc2:	f7ff ffe7 	bl	10b94 <z_arm_clear_arm_mpu_config>
   10bc6:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   10bc8:	f04f 30ff 	mov.w	r0, #4294967295
   10bcc:	4a0c      	ldr	r2, [pc, #48]	; (10c00 <z_arm_init_arch_hw_at_boot+0x48>)
   10bce:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10bd2:	3301      	adds	r3, #1
   10bd4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   10bd6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10bda:	d1f8      	bne.n	10bce <z_arm_init_arch_hw_at_boot+0x16>
   10bdc:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   10bde:	f04f 30ff 	mov.w	r0, #4294967295
   10be2:	4a07      	ldr	r2, [pc, #28]	; (10c00 <z_arm_init_arch_hw_at_boot+0x48>)
   10be4:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10be8:	3301      	adds	r3, #1
   10bea:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   10bec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10bf0:	d1f8      	bne.n	10be4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   10bf2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   10bf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10bf8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   10bfc:	bd10      	pop	{r4, pc}
   10bfe:	bf00      	nop
   10c00:	e000e100 	.word	0xe000e100

00010c04 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   10c04:	4b08      	ldr	r3, [pc, #32]	; (10c28 <z_impl_k_thread_abort+0x24>)
   10c06:	689b      	ldr	r3, [r3, #8]
   10c08:	4283      	cmp	r3, r0
   10c0a:	d10b      	bne.n	10c24 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10c0c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   10c10:	b143      	cbz	r3, 10c24 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10c12:	4b06      	ldr	r3, [pc, #24]	; (10c2c <z_impl_k_thread_abort+0x28>)
   10c14:	685a      	ldr	r2, [r3, #4]
   10c16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   10c1a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   10c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   10c22:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   10c24:	f011 b8ba 	b.w	21d9c <z_thread_abort>
   10c28:	20021504 	.word	0x20021504
   10c2c:	e000ed00 	.word	0xe000ed00

00010c30 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   10c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10c32:	4c09      	ldr	r4, [pc, #36]	; (10c58 <z_arm_configure_static_mpu_regions+0x28>)
   10c34:	4a09      	ldr	r2, [pc, #36]	; (10c5c <z_arm_configure_static_mpu_regions+0x2c>)
   10c36:	4623      	mov	r3, r4
   10c38:	2101      	movs	r1, #1
   10c3a:	4809      	ldr	r0, [pc, #36]	; (10c60 <z_arm_configure_static_mpu_regions+0x30>)
   10c3c:	f000 f918 	bl	10e70 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   10c40:	2300      	movs	r3, #0
   10c42:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   10c44:	4b07      	ldr	r3, [pc, #28]	; (10c64 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10c46:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   10c48:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10c4a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   10c4c:	9301      	str	r3, [sp, #4]
   10c4e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10c50:	f000 f932 	bl	10eb8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   10c54:	b004      	add	sp, #16
   10c56:	bd10      	pop	{r4, pc}
   10c58:	20070000 	.word	0x20070000
   10c5c:	20008000 	.word	0x20008000
   10c60:	0002b190 	.word	0x0002b190
   10c64:	20008d70 	.word	0x20008d70

00010c68 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   10c68:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   10c6a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10c6c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   10c6e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10c72:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   10c76:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10c78:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10c7a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10c7c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   10c80:	4905      	ldr	r1, [pc, #20]	; (10c98 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10c82:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   10c86:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   10c8a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   10c8e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   10c92:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   10c96:	bd10      	pop	{r4, pc}
   10c98:	e000ed00 	.word	0xe000ed00

00010c9c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   10c9c:	2807      	cmp	r0, #7
{
   10c9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10ca0:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   10ca2:	d90f      	bls.n	10cc4 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   10ca4:	4b09      	ldr	r3, [pc, #36]	; (10ccc <region_allocate_and_init+0x30>)
   10ca6:	9003      	str	r0, [sp, #12]
   10ca8:	9302      	str	r3, [sp, #8]
   10caa:	2300      	movs	r3, #0
   10cac:	2201      	movs	r2, #1
   10cae:	4618      	mov	r0, r3
   10cb0:	e9cd 3300 	strd	r3, r3, [sp]
   10cb4:	4906      	ldr	r1, [pc, #24]	; (10cd0 <region_allocate_and_init+0x34>)
   10cb6:	f015 f97a 	bl	25fae <z_log_msg_runtime_create.constprop.0>
   10cba:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10cbe:	4620      	mov	r0, r4
   10cc0:	b004      	add	sp, #16
   10cc2:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   10cc4:	f7ff ffd0 	bl	10c68 <region_init>
	return index;
   10cc8:	e7f9      	b.n	10cbe <region_allocate_and_init+0x22>
   10cca:	bf00      	nop
   10ccc:	0002d599 	.word	0x0002d599
   10cd0:	0002aa30 	.word	0x0002aa30

00010cd4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cd8:	4689      	mov	r9, r1
   10cda:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   10cdc:	4606      	mov	r6, r0
   10cde:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   10ce2:	4d54      	ldr	r5, [pc, #336]	; (10e34 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10ce4:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   10ce6:	45c8      	cmp	r8, r9
   10ce8:	da2d      	bge.n	10d46 <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   10cea:	f8d6 a004 	ldr.w	sl, [r6, #4]
   10cee:	f1ba 0f00 	cmp.w	sl, #0
   10cf2:	d04a      	beq.n	10d8a <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   10cf4:	f1ba 0f1f 	cmp.w	sl, #31
   10cf8:	d917      	bls.n	10d2a <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   10cfa:	f01a 0f1f 	tst.w	sl, #31
   10cfe:	d114      	bne.n	10d2a <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   10d00:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   10d04:	f01b 0f1f 	tst.w	fp, #31
   10d08:	d10f      	bne.n	10d2a <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10d0a:	4658      	mov	r0, fp
   10d0c:	f015 f946 	bl	25f9c <arm_cmse_mpu_region_get>
   10d10:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10d12:	eb0a 000b 	add.w	r0, sl, fp
   10d16:	3801      	subs	r0, #1
   10d18:	f015 f940 	bl	25f9c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10d1c:	4287      	cmp	r7, r0
   10d1e:	d016      	beq.n	10d4e <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   10d20:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   10d24:	4b44      	ldr	r3, [pc, #272]	; (10e38 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   10d26:	9703      	str	r7, [sp, #12]
   10d28:	e002      	b.n	10d30 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10d2a:	4b44      	ldr	r3, [pc, #272]	; (10e3c <mpu_configure_regions_and_partition.constprop.0+0x168>)
   10d2c:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   10d30:	9302      	str	r3, [sp, #8]
   10d32:	2300      	movs	r3, #0
   10d34:	2201      	movs	r2, #1
   10d36:	4618      	mov	r0, r3
   10d38:	e9cd 3300 	strd	r3, r3, [sp]
   10d3c:	4940      	ldr	r1, [pc, #256]	; (10e40 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   10d3e:	f015 f936 	bl	25fae <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   10d42:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   10d46:	4620      	mov	r0, r4
   10d48:	b009      	add	sp, #36	; 0x24
   10d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10d4e:	f117 0f16 	cmn.w	r7, #22
   10d52:	d0e7      	beq.n	10d24 <mpu_configure_regions_and_partition.constprop.0+0x50>
   10d54:	42bc      	cmp	r4, r7
   10d56:	dde5      	ble.n	10d24 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   10d58:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   10d5c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   10d60:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   10d64:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   10d68:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10d6c:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   10d70:	e9d6 3200 	ldrd	r3, r2, [r6]
   10d74:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   10d76:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   10d78:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   10d7c:	d11d      	bne.n	10dba <mpu_configure_regions_and_partition.constprop.0+0xe6>
   10d7e:	45d3      	cmp	fp, sl
   10d80:	d107      	bne.n	10d92 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   10d82:	4631      	mov	r1, r6
   10d84:	b2f8      	uxtb	r0, r7
   10d86:	f015 f922 	bl	25fce <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10d8a:	f108 0801 	add.w	r8, r8, #1
   10d8e:	360c      	adds	r6, #12
   10d90:	e7a9      	b.n	10ce6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   10d92:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   10d94:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   10d98:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   10d9c:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   10da0:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   10da4:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   10da6:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   10daa:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   10dac:	f015 f90f 	bl	25fce <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10db0:	f110 0f16 	cmn.w	r0, #22
   10db4:	d0c5      	beq.n	10d42 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   10db6:	1c44      	adds	r4, r0, #1
   10db8:	e7e7      	b.n	10d8a <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   10dba:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   10dbe:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   10dc2:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10dc4:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   10dc8:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10dcc:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   10dce:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   10dd0:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   10dd2:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   10dd4:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   10dd8:	d0e8      	beq.n	10dac <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   10dda:	f015 f8f8 	bl	25fce <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10dde:	f110 0f16 	cmn.w	r0, #22
   10de2:	d0ae      	beq.n	10d42 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   10de4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   10de8:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   10dec:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   10df0:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
   10df4:	f362 0304 	bfi	r3, r2, #0, #5
   10df8:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   10dfc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   10e00:	f89d 2018 	ldrb.w	r2, [sp, #24]
   10e04:	085b      	lsrs	r3, r3, #1
   10e06:	f363 1247 	bfi	r2, r3, #5, #3
   10e0a:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   10e0e:	e9d6 3200 	ldrd	r3, r2, [r6]
   10e12:	4413      	add	r3, r2
   10e14:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   10e16:	f023 031f 	bic.w	r3, r3, #31
   10e1a:	445b      	add	r3, fp
   10e1c:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   10e20:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   10e22:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   10e26:	a904      	add	r1, sp, #16
   10e28:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   10e2a:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   10e2c:	f7ff ff36 	bl	10c9c <region_allocate_and_init>
   10e30:	e7be      	b.n	10db0 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   10e32:	bf00      	nop
   10e34:	e000ed00 	.word	0xe000ed00
   10e38:	0002d5e2 	.word	0x0002d5e2
   10e3c:	0002d5bf 	.word	0x0002d5bf
   10e40:	0002aa30 	.word	0x0002aa30

00010e44 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10e44:	2205      	movs	r2, #5
   10e46:	4b04      	ldr	r3, [pc, #16]	; (10e58 <arm_core_mpu_enable+0x14>)
   10e48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   10e4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10e50:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10e54:	4770      	bx	lr
   10e56:	bf00      	nop
   10e58:	e000ed00 	.word	0xe000ed00

00010e5c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   10e5c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10e60:	2200      	movs	r2, #0
   10e62:	4b02      	ldr	r3, [pc, #8]	; (10e6c <arm_core_mpu_disable+0x10>)
   10e64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   10e68:	4770      	bx	lr
   10e6a:	bf00      	nop
   10e6c:	e000ed00 	.word	0xe000ed00

00010e70 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   10e70:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10e72:	4d0c      	ldr	r5, [pc, #48]	; (10ea4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   10e74:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   10e76:	782a      	ldrb	r2, [r5, #0]
   10e78:	f7ff ff2c 	bl	10cd4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10e7c:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   10e7e:	3016      	adds	r0, #22
   10e80:	d10f      	bne.n	10ea2 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   10e82:	f44f 738d 	mov.w	r3, #282	; 0x11a
   10e86:	4a08      	ldr	r2, [pc, #32]	; (10ea8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   10e88:	4908      	ldr	r1, [pc, #32]	; (10eac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   10e8a:	4809      	ldr	r0, [pc, #36]	; (10eb0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   10e8c:	f014 f823 	bl	24ed6 <assert_print>
   10e90:	4621      	mov	r1, r4
   10e92:	4808      	ldr	r0, [pc, #32]	; (10eb4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   10e94:	f014 f81f 	bl	24ed6 <assert_print>
   10e98:	f44f 718d 	mov.w	r1, #282	; 0x11a
   10e9c:	4802      	ldr	r0, [pc, #8]	; (10ea8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   10e9e:	f014 f813 	bl	24ec8 <assert_post_action>
			regions_num);
	}
}
   10ea2:	bd38      	pop	{r3, r4, r5, pc}
   10ea4:	20021f62 	.word	0x20021f62
   10ea8:	0002d605 	.word	0x0002d605
   10eac:	000311d2 	.word	0x000311d2
   10eb0:	0002b939 	.word	0x0002b939
   10eb4:	0002d63c 	.word	0x0002d63c

00010eb8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   10eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ebc:	4e31      	ldr	r6, [pc, #196]	; (10f84 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   10ebe:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10ec0:	4605      	mov	r5, r0
   10ec2:	f04f 0800 	mov.w	r8, #0
   10ec6:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   10ec8:	4f2f      	ldr	r7, [pc, #188]	; (10f88 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10eca:	45c8      	cmp	r8, r9
   10ecc:	db02      	blt.n	10ed4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   10ece:	b003      	add	sp, #12
   10ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   10ed4:	f8d5 a004 	ldr.w	sl, [r5, #4]
   10ed8:	f1ba 0f00 	cmp.w	sl, #0
   10edc:	d04c      	beq.n	10f78 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   10ede:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10ee0:	4608      	mov	r0, r1
   10ee2:	9101      	str	r1, [sp, #4]
   10ee4:	f015 f85a 	bl	25f9c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10ee8:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10eea:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10eec:	eb0a 0001 	add.w	r0, sl, r1
   10ef0:	3801      	subs	r0, #1
   10ef2:	f015 f853 	bl	25f9c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10ef6:	4284      	cmp	r4, r0
   10ef8:	f04f 0214 	mov.w	r2, #20
   10efc:	4b23      	ldr	r3, [pc, #140]	; (10f8c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   10efe:	d015      	beq.n	10f2c <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   10f00:	fb02 f308 	mul.w	r3, r2, r8
   10f04:	f06f 0215 	mvn.w	r2, #21
   10f08:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   10f0c:	f44f 7395 	mov.w	r3, #298	; 0x12a
   10f10:	4a1f      	ldr	r2, [pc, #124]	; (10f90 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   10f12:	4920      	ldr	r1, [pc, #128]	; (10f94 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   10f14:	4820      	ldr	r0, [pc, #128]	; (10f98 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   10f16:	f013 ffde 	bl	24ed6 <assert_print>
   10f1a:	4649      	mov	r1, r9
   10f1c:	481f      	ldr	r0, [pc, #124]	; (10f9c <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   10f1e:	f013 ffda 	bl	24ed6 <assert_print>
   10f22:	f44f 7195 	mov.w	r1, #298	; 0x12a
   10f26:	481a      	ldr	r0, [pc, #104]	; (10f90 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   10f28:	f013 ffce 	bl	24ec8 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10f2c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   10f30:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10f32:	d0eb      	beq.n	10f0c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10f34:	7819      	ldrb	r1, [r3, #0]
   10f36:	42a1      	cmp	r1, r4
   10f38:	dde8      	ble.n	10f0c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   10f3a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   10f3e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   10f42:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   10f46:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   10f4a:	f100 0108 	add.w	r1, r0, #8
   10f4e:	7b00      	ldrb	r0, [r0, #12]
   10f50:	f364 0004 	bfi	r0, r4, #0, #5
   10f54:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   10f56:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   10f5a:	790c      	ldrb	r4, [r1, #4]
   10f5c:	0840      	lsrs	r0, r0, #1
   10f5e:	f360 1447 	bfi	r4, r0, #5, #3
   10f62:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   10f64:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   10f68:	f021 011f 	bic.w	r1, r1, #31
   10f6c:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   10f6e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   10f72:	f021 011f 	bic.w	r1, r1, #31
   10f76:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10f78:	f108 0801 	add.w	r8, r8, #1
   10f7c:	3614      	adds	r6, #20
   10f7e:	350c      	adds	r5, #12
   10f80:	e7a3      	b.n	10eca <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   10f82:	bf00      	nop
   10f84:	20020fc0 	.word	0x20020fc0
   10f88:	e000ed00 	.word	0xe000ed00
   10f8c:	20021f62 	.word	0x20021f62
   10f90:	0002d605 	.word	0x0002d605
   10f94:	000311d2 	.word	0x000311d2
   10f98:	0002b939 	.word	0x0002b939
   10f9c:	0002d668 	.word	0x0002d668

00010fa0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   10fa0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10fa2:	4d1f      	ldr	r5, [pc, #124]	; (11020 <z_arm_mpu_init+0x80>)
   10fa4:	682c      	ldr	r4, [r5, #0]
   10fa6:	2c08      	cmp	r4, #8
   10fa8:	d910      	bls.n	10fcc <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   10faa:	f240 1351 	movw	r3, #337	; 0x151
   10fae:	4a1d      	ldr	r2, [pc, #116]	; (11024 <z_arm_mpu_init+0x84>)
   10fb0:	491d      	ldr	r1, [pc, #116]	; (11028 <z_arm_mpu_init+0x88>)
   10fb2:	481e      	ldr	r0, [pc, #120]	; (1102c <z_arm_mpu_init+0x8c>)
   10fb4:	f013 ff8f 	bl	24ed6 <assert_print>
   10fb8:	4621      	mov	r1, r4
   10fba:	2208      	movs	r2, #8
   10fbc:	481c      	ldr	r0, [pc, #112]	; (11030 <z_arm_mpu_init+0x90>)
   10fbe:	f013 ff8a 	bl	24ed6 <assert_print>
   10fc2:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   10fc6:	4817      	ldr	r0, [pc, #92]	; (11024 <z_arm_mpu_init+0x84>)
   10fc8:	f013 ff7e 	bl	24ec8 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10fcc:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   10fce:	f7ff ff45 	bl	10e5c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   10fd2:	4b18      	ldr	r3, [pc, #96]	; (11034 <z_arm_mpu_init+0x94>)
   10fd4:	4a18      	ldr	r2, [pc, #96]	; (11038 <z_arm_mpu_init+0x98>)
   10fd6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10fda:	4284      	cmp	r4, r0
   10fdc:	d117      	bne.n	1100e <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   10fde:	4b17      	ldr	r3, [pc, #92]	; (1103c <z_arm_mpu_init+0x9c>)
   10fe0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   10fe2:	f7ff ff2f 	bl	10e44 <arm_core_mpu_enable>
	__ASSERT(
   10fe6:	4b13      	ldr	r3, [pc, #76]	; (11034 <z_arm_mpu_init+0x94>)
   10fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   10fec:	f3c3 2307 	ubfx	r3, r3, #8, #8
   10ff0:	2b08      	cmp	r3, #8
   10ff2:	d013      	beq.n	1101c <z_arm_mpu_init+0x7c>
   10ff4:	4912      	ldr	r1, [pc, #72]	; (11040 <z_arm_mpu_init+0xa0>)
   10ff6:	f240 13bb 	movw	r3, #443	; 0x1bb
   10ffa:	4a0a      	ldr	r2, [pc, #40]	; (11024 <z_arm_mpu_init+0x84>)
   10ffc:	480b      	ldr	r0, [pc, #44]	; (1102c <z_arm_mpu_init+0x8c>)
   10ffe:	f013 ff6a 	bl	24ed6 <assert_print>
   11002:	4810      	ldr	r0, [pc, #64]	; (11044 <z_arm_mpu_init+0xa4>)
   11004:	f013 ff67 	bl	24ed6 <assert_print>
   11008:	f240 11bb 	movw	r1, #443	; 0x1bb
   1100c:	e7db      	b.n	10fc6 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1100e:	6869      	ldr	r1, [r5, #4]
   11010:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11014:	f7ff fe28 	bl	10c68 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11018:	3001      	adds	r0, #1
   1101a:	e7de      	b.n	10fda <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   1101c:	2000      	movs	r0, #0
   1101e:	bd38      	pop	{r3, r4, r5, pc}
   11020:	0002b19c 	.word	0x0002b19c
   11024:	0002d605 	.word	0x0002d605
   11028:	000311d2 	.word	0x000311d2
   1102c:	0002b939 	.word	0x0002b939
   11030:	0002d697 	.word	0x0002d697
   11034:	e000ed00 	.word	0xe000ed00
   11038:	0044ffaa 	.word	0x0044ffaa
   1103c:	20021f62 	.word	0x20021f62
   11040:	0002d6cb 	.word	0x0002d6cb
   11044:	0002d71b 	.word	0x0002d71b

00011048 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11048:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   1104a:	4b0b      	ldr	r3, [pc, #44]	; (11078 <malloc_prepare+0x30>)
   1104c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11050:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   11054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11058:	d20c      	bcs.n	11074 <malloc_prepare+0x2c>
   1105a:	4908      	ldr	r1, [pc, #32]	; (1107c <malloc_prepare+0x34>)
   1105c:	2381      	movs	r3, #129	; 0x81
   1105e:	4a08      	ldr	r2, [pc, #32]	; (11080 <malloc_prepare+0x38>)
   11060:	4808      	ldr	r0, [pc, #32]	; (11084 <malloc_prepare+0x3c>)
   11062:	f013 ff38 	bl	24ed6 <assert_print>
   11066:	4808      	ldr	r0, [pc, #32]	; (11088 <malloc_prepare+0x40>)
   11068:	f013 ff35 	bl	24ed6 <assert_print>
   1106c:	2181      	movs	r1, #129	; 0x81
   1106e:	4804      	ldr	r0, [pc, #16]	; (11080 <malloc_prepare+0x38>)
   11070:	f013 ff2a 	bl	24ec8 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11074:	2000      	movs	r0, #0
   11076:	bd08      	pop	{r3, pc}
   11078:	20038618 	.word	0x20038618
   1107c:	0002d76c 	.word	0x0002d76c
   11080:	0002d73c 	.word	0x0002d73c
   11084:	0002b939 	.word	0x0002b939
   11088:	0002d7b3 	.word	0x0002d7b3

0001108c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1108c:	4b01      	ldr	r3, [pc, #4]	; (11094 <__stdout_hook_install+0x8>)
   1108e:	6018      	str	r0, [r3, #0]
}
   11090:	4770      	bx	lr
   11092:	bf00      	nop
   11094:	20008468 	.word	0x20008468

00011098 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   11098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1109a:	4606      	mov	r6, r0
   1109c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1109e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   110a0:	4f06      	ldr	r7, [pc, #24]	; (110bc <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   110a2:	42ac      	cmp	r4, r5
   110a4:	da08      	bge.n	110b8 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   110a6:	683b      	ldr	r3, [r7, #0]
   110a8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   110aa:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   110ac:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   110ae:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   110b2:	d001      	beq.n	110b8 <z_impl_zephyr_read_stdin+0x20>
   110b4:	280d      	cmp	r0, #13
   110b6:	d1f4      	bne.n	110a2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   110b8:	4620      	mov	r0, r4
   110ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110bc:	20008464 	.word	0x20008464

000110c0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   110c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110c2:	460d      	mov	r5, r1
   110c4:	4f09      	ldr	r7, [pc, #36]	; (110ec <z_impl_zephyr_write_stdout+0x2c>)
   110c6:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   110c8:	f1c0 0401 	rsb	r4, r0, #1
   110cc:	19a3      	adds	r3, r4, r6
   110ce:	429d      	cmp	r5, r3
   110d0:	dc01      	bgt.n	110d6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   110d2:	4628      	mov	r0, r5
   110d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   110d6:	7873      	ldrb	r3, [r6, #1]
   110d8:	2b0a      	cmp	r3, #10
   110da:	d102      	bne.n	110e2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   110dc:	200d      	movs	r0, #13
   110de:	683b      	ldr	r3, [r7, #0]
   110e0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   110e2:	683b      	ldr	r3, [r7, #0]
   110e4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   110e8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   110ea:	e7ef      	b.n	110cc <z_impl_zephyr_write_stdout+0xc>
   110ec:	20008468 	.word	0x20008468

000110f0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   110f0:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   110f2:	2105      	movs	r1, #5
   110f4:	4801      	ldr	r0, [pc, #4]	; (110fc <_exit+0xc>)
   110f6:	f7ff ffe3 	bl	110c0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   110fa:	e7fe      	b.n	110fa <_exit+0xa>
   110fc:	0002d83a 	.word	0x0002d83a

00011100 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11100:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11102:	4c07      	ldr	r4, [pc, #28]	; (11120 <_sbrk+0x20>)
   11104:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11106:	18c2      	adds	r2, r0, r3
   11108:	4806      	ldr	r0, [pc, #24]	; (11124 <_sbrk+0x24>)
   1110a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1110e:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   11112:	428a      	cmp	r2, r1
		heap_sz += count;
   11114:	bf36      	itet	cc
   11116:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11118:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1111c:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1111e:	bd10      	pop	{r4, pc}
   11120:	20020fd4 	.word	0x20020fd4
   11124:	20038618 	.word	0x20038618

00011128 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11128:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1112a:	4604      	mov	r4, r0
   1112c:	b958      	cbnz	r0, 11146 <__retarget_lock_init_recursive+0x1e>
   1112e:	4911      	ldr	r1, [pc, #68]	; (11174 <__retarget_lock_init_recursive+0x4c>)
   11130:	f240 137b 	movw	r3, #379	; 0x17b
   11134:	4a10      	ldr	r2, [pc, #64]	; (11178 <__retarget_lock_init_recursive+0x50>)
   11136:	4811      	ldr	r0, [pc, #68]	; (1117c <__retarget_lock_init_recursive+0x54>)
   11138:	f013 fecd 	bl	24ed6 <assert_print>
   1113c:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11140:	480d      	ldr	r0, [pc, #52]	; (11178 <__retarget_lock_init_recursive+0x50>)
   11142:	f013 fec1 	bl	24ec8 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   11146:	2014      	movs	r0, #20
   11148:	f011 ff70 	bl	2302c <malloc>
   1114c:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   1114e:	b960      	cbnz	r0, 1116a <__retarget_lock_init_recursive+0x42>
   11150:	490b      	ldr	r1, [pc, #44]	; (11180 <__retarget_lock_init_recursive+0x58>)
   11152:	f240 1383 	movw	r3, #387	; 0x183
   11156:	4a08      	ldr	r2, [pc, #32]	; (11178 <__retarget_lock_init_recursive+0x50>)
   11158:	4808      	ldr	r0, [pc, #32]	; (1117c <__retarget_lock_init_recursive+0x54>)
   1115a:	f013 febc 	bl	24ed6 <assert_print>
   1115e:	4809      	ldr	r0, [pc, #36]	; (11184 <__retarget_lock_init_recursive+0x5c>)
   11160:	f013 feb9 	bl	24ed6 <assert_print>
   11164:	f240 1183 	movw	r1, #387	; 0x183
   11168:	e7ea      	b.n	11140 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   1116a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   1116e:	f018 ba2f 	b.w	295d0 <z_impl_k_mutex_init>
   11172:	bf00      	nop
   11174:	0002d841 	.word	0x0002d841
   11178:	0002d73c 	.word	0x0002d73c
   1117c:	0002b939 	.word	0x0002b939
   11180:	0002d840 	.word	0x0002d840
   11184:	0002d87c 	.word	0x0002d87c

00011188 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   11188:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1118a:	b958      	cbnz	r0, 111a4 <__retarget_lock_acquire_recursive+0x1c>
   1118c:	4909      	ldr	r1, [pc, #36]	; (111b4 <__retarget_lock_acquire_recursive+0x2c>)
   1118e:	480a      	ldr	r0, [pc, #40]	; (111b8 <__retarget_lock_acquire_recursive+0x30>)
   11190:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11194:	4a09      	ldr	r2, [pc, #36]	; (111bc <__retarget_lock_acquire_recursive+0x34>)
   11196:	f013 fe9e 	bl	24ed6 <assert_print>
   1119a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   1119e:	4807      	ldr	r0, [pc, #28]	; (111bc <__retarget_lock_acquire_recursive+0x34>)
   111a0:	f013 fe92 	bl	24ec8 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   111a4:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   111a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   111ac:	f04f 33ff 	mov.w	r3, #4294967295
   111b0:	f00e bc64 	b.w	1fa7c <z_impl_k_mutex_lock>
   111b4:	0002d841 	.word	0x0002d841
   111b8:	0002b939 	.word	0x0002b939
   111bc:	0002d73c 	.word	0x0002d73c

000111c0 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   111c0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   111c2:	b958      	cbnz	r0, 111dc <__retarget_lock_release_recursive+0x1c>
   111c4:	4907      	ldr	r1, [pc, #28]	; (111e4 <__retarget_lock_release_recursive+0x24>)
   111c6:	4808      	ldr	r0, [pc, #32]	; (111e8 <__retarget_lock_release_recursive+0x28>)
   111c8:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   111cc:	4a07      	ldr	r2, [pc, #28]	; (111ec <__retarget_lock_release_recursive+0x2c>)
   111ce:	f013 fe82 	bl	24ed6 <assert_print>
   111d2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   111d6:	4805      	ldr	r0, [pc, #20]	; (111ec <__retarget_lock_release_recursive+0x2c>)
   111d8:	f013 fe76 	bl	24ec8 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   111dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   111e0:	f00e bd1c 	b.w	1fc1c <z_impl_k_mutex_unlock>
   111e4:	0002d841 	.word	0x0002d841
   111e8:	0002b939 	.word	0x0002b939
   111ec:	0002d73c 	.word	0x0002d73c

000111f0 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   111f0:	b508      	push	{r3, lr}
   111f2:	211d      	movs	r1, #29
   111f4:	4804      	ldr	r0, [pc, #16]	; (11208 <__chk_fail+0x18>)
   111f6:	f7ff ff63 	bl	110c0 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   111fa:	4040      	eors	r0, r0
   111fc:	f380 8811 	msr	BASEPRI, r0
   11200:	f04f 0003 	mov.w	r0, #3
   11204:	df02      	svc	2
	CODE_UNREACHABLE;
   11206:	bf00      	nop
   11208:	0002d89f 	.word	0x0002d89f

0001120c <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   1120c:	2000      	movs	r0, #0
   1120e:	4b02      	ldr	r3, [pc, #8]	; (11218 <remoteproc_mgr_boot+0xc>)
   11210:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11214:	4770      	bx	lr
   11216:	bf00      	nop
   11218:	40005000 	.word	0x40005000

0001121c <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   1121c:	4b0e      	ldr	r3, [pc, #56]	; (11258 <bt_hex+0x3c>)
   1121e:	2940      	cmp	r1, #64	; 0x40
   11220:	bf28      	it	cs
   11222:	2140      	movcs	r1, #64	; 0x40
{
   11224:	b570      	push	{r4, r5, r6, lr}
   11226:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   11228:	4c0c      	ldr	r4, [pc, #48]	; (1125c <bt_hex+0x40>)
   1122a:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   1122c:	42b0      	cmp	r0, r6
   1122e:	f103 0302 	add.w	r3, r3, #2
   11232:	d104      	bne.n	1123e <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11234:	2300      	movs	r3, #0
   11236:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1123a:	4807      	ldr	r0, [pc, #28]	; (11258 <bt_hex+0x3c>)
   1123c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   1123e:	7802      	ldrb	r2, [r0, #0]
   11240:	0912      	lsrs	r2, r2, #4
   11242:	5ca2      	ldrb	r2, [r4, r2]
   11244:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11248:	f810 2b01 	ldrb.w	r2, [r0], #1
   1124c:	f002 020f 	and.w	r2, r2, #15
   11250:	5ca2      	ldrb	r2, [r4, r2]
   11252:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   11256:	e7e9      	b.n	1122c <bt_hex+0x10>
   11258:	20021f81 	.word	0x20021f81
   1125c:	0002d8ff 	.word	0x0002d8ff

00011260 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   11260:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   11262:	7803      	ldrb	r3, [r0, #0]
   11264:	b08b      	sub	sp, #44	; 0x2c
   11266:	4604      	mov	r4, r0
   11268:	ad07      	add	r5, sp, #28
   1126a:	2b03      	cmp	r3, #3
   1126c:	d821      	bhi.n	112b2 <bt_addr_le_str+0x52>
   1126e:	e8df f003 	tbb	[pc, r3]
   11272:	1a02      	.short	0x1a02
   11274:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   11276:	4912      	ldr	r1, [pc, #72]	; (112c0 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   11278:	4628      	mov	r0, r5
   1127a:	f018 fd01 	bl	29c80 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1127e:	9505      	str	r5, [sp, #20]
   11280:	7863      	ldrb	r3, [r4, #1]
   11282:	211e      	movs	r1, #30
   11284:	9304      	str	r3, [sp, #16]
   11286:	78a3      	ldrb	r3, [r4, #2]
   11288:	4a0e      	ldr	r2, [pc, #56]	; (112c4 <bt_addr_le_str+0x64>)
   1128a:	9303      	str	r3, [sp, #12]
   1128c:	78e3      	ldrb	r3, [r4, #3]
   1128e:	480e      	ldr	r0, [pc, #56]	; (112c8 <bt_addr_le_str+0x68>)
   11290:	9302      	str	r3, [sp, #8]
   11292:	7923      	ldrb	r3, [r4, #4]
   11294:	9301      	str	r3, [sp, #4]
   11296:	7963      	ldrb	r3, [r4, #5]
   11298:	9300      	str	r3, [sp, #0]
   1129a:	79a3      	ldrb	r3, [r4, #6]
   1129c:	f013 fc66 	bl	24b6c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   112a0:	4809      	ldr	r0, [pc, #36]	; (112c8 <bt_addr_le_str+0x68>)
   112a2:	b00b      	add	sp, #44	; 0x2c
   112a4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   112a6:	4909      	ldr	r1, [pc, #36]	; (112cc <bt_addr_le_str+0x6c>)
   112a8:	e7e6      	b.n	11278 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   112aa:	4909      	ldr	r1, [pc, #36]	; (112d0 <bt_addr_le_str+0x70>)
   112ac:	e7e4      	b.n	11278 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   112ae:	4909      	ldr	r1, [pc, #36]	; (112d4 <bt_addr_le_str+0x74>)
   112b0:	e7e2      	b.n	11278 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   112b2:	210a      	movs	r1, #10
   112b4:	4628      	mov	r0, r5
   112b6:	4a08      	ldr	r2, [pc, #32]	; (112d8 <bt_addr_le_str+0x78>)
   112b8:	f013 fc58 	bl	24b6c <snprintk>
		break;
   112bc:	e7df      	b.n	1127e <bt_addr_le_str+0x1e>
   112be:	bf00      	nop
   112c0:	0002ba57 	.word	0x0002ba57
   112c4:	0002ba79 	.word	0x0002ba79
   112c8:	20021f63 	.word	0x20021f63
   112cc:	0002ba5e 	.word	0x0002ba5e
   112d0:	0002ba65 	.word	0x0002ba65
   112d4:	0002ba6f 	.word	0x0002ba6f
   112d8:	0002f26f 	.word	0x0002f26f

000112dc <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   112dc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   112de:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   112e0:	4d09      	ldr	r5, [pc, #36]	; (11308 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   112e2:	4b0a      	ldr	r3, [pc, #40]	; (1130c <long_wq_init+0x30>)
{
   112e4:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   112e6:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   112e8:	9302      	str	r3, [sp, #8]
   112ea:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   112ec:	f00f f99c 	bl	20628 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   112f0:	ab02      	add	r3, sp, #8
   112f2:	4628      	mov	r0, r5
   112f4:	9300      	str	r3, [sp, #0]
   112f6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   112fa:	230a      	movs	r3, #10
   112fc:	4904      	ldr	r1, [pc, #16]	; (11310 <long_wq_init+0x34>)
   112fe:	f00f f9ad 	bl	2065c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   11302:	4620      	mov	r0, r4
   11304:	b005      	add	sp, #20
   11306:	bd30      	pop	{r4, r5, pc}
   11308:	20009588 	.word	0x20009588
   1130c:	0002d917 	.word	0x0002d917
   11310:	20031ad8 	.word	0x20031ad8

00011314 <bt_long_wq_schedule>:
{
   11314:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   11316:	4801      	ldr	r0, [pc, #4]	; (1131c <bt_long_wq_schedule+0x8>)
   11318:	f00f bac2 	b.w	208a0 <k_work_schedule_for_queue>
   1131c:	20009588 	.word	0x20009588

00011320 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11320:	7803      	ldrb	r3, [r0, #0]
{
   11322:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   11324:	2b01      	cmp	r3, #1
   11326:	d013      	beq.n	11350 <uuid_to_uuid128+0x30>
   11328:	2b02      	cmp	r3, #2
   1132a:	d027      	beq.n	1137c <uuid_to_uuid128+0x5c>
   1132c:	b97b      	cbnz	r3, 1134e <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1132e:	460a      	mov	r2, r1
   11330:	4b18      	ldr	r3, [pc, #96]	; (11394 <uuid_to_uuid128+0x74>)
   11332:	f103 0410 	add.w	r4, r3, #16
   11336:	f853 5b04 	ldr.w	r5, [r3], #4
   1133a:	42a3      	cmp	r3, r4
   1133c:	f842 5b04 	str.w	r5, [r2], #4
   11340:	d1f9      	bne.n	11336 <uuid_to_uuid128+0x16>
   11342:	781b      	ldrb	r3, [r3, #0]
   11344:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   11346:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   11348:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   1134a:	0a1b      	lsrs	r3, r3, #8
   1134c:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1134e:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11350:	460a      	mov	r2, r1
   11352:	4b10      	ldr	r3, [pc, #64]	; (11394 <uuid_to_uuid128+0x74>)
   11354:	f103 0410 	add.w	r4, r3, #16
   11358:	f853 5b04 	ldr.w	r5, [r3], #4
   1135c:	42a3      	cmp	r3, r4
   1135e:	f842 5b04 	str.w	r5, [r2], #4
   11362:	d1f9      	bne.n	11358 <uuid_to_uuid128+0x38>
   11364:	781b      	ldrb	r3, [r3, #0]
   11366:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   11368:	6843      	ldr	r3, [r0, #4]
   1136a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1136e:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   11370:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11372:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   11374:	0a1b      	lsrs	r3, r3, #8
   11376:	738a      	strb	r2, [r1, #14]
   11378:	740b      	strb	r3, [r1, #16]
}
   1137a:	e7e8      	b.n	1134e <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1137c:	f100 0310 	add.w	r3, r0, #16
   11380:	f850 2b04 	ldr.w	r2, [r0], #4
   11384:	4298      	cmp	r0, r3
   11386:	f841 2b04 	str.w	r2, [r1], #4
   1138a:	d1f9      	bne.n	11380 <uuid_to_uuid128+0x60>
   1138c:	7803      	ldrb	r3, [r0, #0]
   1138e:	700b      	strb	r3, [r1, #0]
   11390:	e7dd      	b.n	1134e <uuid_to_uuid128+0x2e>
   11392:	bf00      	nop
   11394:	0002d920 	.word	0x0002d920

00011398 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11398:	b538      	push	{r3, r4, r5, lr}
   1139a:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1139c:	2d01      	cmp	r5, #1
{
   1139e:	4610      	mov	r0, r2
   113a0:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   113a2:	d010      	beq.n	113c6 <bt_buf_get_rx+0x2e>
   113a4:	2d03      	cmp	r5, #3
   113a6:	d01a      	beq.n	113de <bt_buf_get_rx+0x46>
   113a8:	2d05      	cmp	r5, #5
   113aa:	d018      	beq.n	113de <bt_buf_get_rx+0x46>
   113ac:	490e      	ldr	r1, [pc, #56]	; (113e8 <bt_buf_get_rx+0x50>)
   113ae:	233d      	movs	r3, #61	; 0x3d
   113b0:	4a0e      	ldr	r2, [pc, #56]	; (113ec <bt_buf_get_rx+0x54>)
   113b2:	480f      	ldr	r0, [pc, #60]	; (113f0 <bt_buf_get_rx+0x58>)
   113b4:	f013 fd8f 	bl	24ed6 <assert_print>
   113b8:	480e      	ldr	r0, [pc, #56]	; (113f4 <bt_buf_get_rx+0x5c>)
   113ba:	f013 fd8c 	bl	24ed6 <assert_print>
   113be:	213d      	movs	r1, #61	; 0x3d
   113c0:	480a      	ldr	r0, [pc, #40]	; (113ec <bt_buf_get_rx+0x54>)
   113c2:	f013 fd81 	bl	24ec8 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   113c6:	480c      	ldr	r0, [pc, #48]	; (113f8 <bt_buf_get_rx+0x60>)
   113c8:	f016 fd51 	bl	27e6e <net_buf_alloc_fixed>
   113cc:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   113ce:	b120      	cbz	r0, 113da <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   113d0:	2101      	movs	r1, #1
   113d2:	300c      	adds	r0, #12
   113d4:	f007 ff44 	bl	19260 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   113d8:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   113da:	4620      	mov	r0, r4
   113dc:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   113de:	4602      	mov	r2, r0
   113e0:	460b      	mov	r3, r1
   113e2:	4806      	ldr	r0, [pc, #24]	; (113fc <bt_buf_get_rx+0x64>)
   113e4:	e7f0      	b.n	113c8 <bt_buf_get_rx+0x30>
   113e6:	bf00      	nop
   113e8:	0002d960 	.word	0x0002d960
   113ec:	0002d931 	.word	0x0002d931
   113f0:	0002b939 	.word	0x0002b939
   113f4:	0002d9a5 	.word	0x0002d9a5
   113f8:	20008ca0 	.word	0x20008ca0
   113fc:	20008c04 	.word	0x20008c04

00011400 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11400:	b510      	push	{r4, lr}
   11402:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11404:	490a      	ldr	r1, [pc, #40]	; (11430 <bt_buf_get_cmd_complete+0x30>)
{
   11406:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11408:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   1140c:	b920      	cbnz	r0, 11418 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1140e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11412:	2001      	movs	r0, #1
   11414:	f7ff bfc0 	b.w	11398 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11418:	f008 f878 	bl	1950c <net_buf_ref>
   1141c:	2101      	movs	r1, #1
		buf->len = 0U;
   1141e:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   11420:	4604      	mov	r4, r0
   11422:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   11424:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   11426:	300c      	adds	r0, #12
   11428:	f007 ff1a 	bl	19260 <net_buf_simple_reserve>
}
   1142c:	4620      	mov	r0, r4
   1142e:	bd10      	pop	{r4, pc}
   11430:	20008000 	.word	0x20008000

00011434 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11434:	b570      	push	{r4, r5, r6, lr}
   11436:	4604      	mov	r4, r0
	switch (evt) {
   11438:	2c0f      	cmp	r4, #15
{
   1143a:	460d      	mov	r5, r1
   1143c:	4610      	mov	r0, r2
   1143e:	4619      	mov	r1, r3
	switch (evt) {
   11440:	d805      	bhi.n	1144e <bt_buf_get_evt+0x1a>
   11442:	2c0d      	cmp	r4, #13
   11444:	d90d      	bls.n	11462 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1144a:	f7ff bfd9 	b.w	11400 <bt_buf_get_cmd_complete>
	switch (evt) {
   1144e:	2c13      	cmp	r4, #19
   11450:	d107      	bne.n	11462 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   11452:	480c      	ldr	r0, [pc, #48]	; (11484 <bt_buf_get_evt+0x50>)
   11454:	f016 fd0b 	bl	27e6e <net_buf_alloc_fixed>
			if (buf) {
   11458:	4604      	mov	r4, r0
   1145a:	b938      	cbnz	r0, 1146c <bt_buf_get_evt+0x38>
{
   1145c:	2400      	movs	r4, #0
}
   1145e:	4620      	mov	r0, r4
   11460:	bd70      	pop	{r4, r5, r6, pc}
   11462:	4602      	mov	r2, r0
   11464:	460b      	mov	r3, r1
		if (discardable) {
   11466:	b145      	cbz	r5, 1147a <bt_buf_get_evt+0x46>
   11468:	4807      	ldr	r0, [pc, #28]	; (11488 <bt_buf_get_evt+0x54>)
   1146a:	e7f3      	b.n	11454 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   1146c:	2101      	movs	r1, #1
   1146e:	300c      	adds	r0, #12
   11470:	f007 fef6 	bl	19260 <net_buf_simple_reserve>
   11474:	2301      	movs	r3, #1
   11476:	7623      	strb	r3, [r4, #24]
}
   11478:	e7f1      	b.n	1145e <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1147a:	2001      	movs	r0, #1
}
   1147c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11480:	f7ff bf8a 	b.w	11398 <bt_buf_get_rx>
   11484:	20008d3c 	.word	0x20008d3c
   11488:	20008c6c 	.word	0x20008c6c

0001148c <hci_disconn_complete_prio>:
{
   1148c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1148e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11490:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   11494:	781b      	ldrb	r3, [r3, #0]
   11496:	b963      	cbnz	r3, 114b2 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   11498:	4620      	mov	r0, r4
   1149a:	f002 ff09 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   1149e:	4605      	mov	r5, r0
   114a0:	b940      	cbnz	r0, 114b4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   114a2:	4b08      	ldr	r3, [pc, #32]	; (114c4 <hci_disconn_complete_prio+0x38>)
   114a4:	881a      	ldrh	r2, [r3, #0]
   114a6:	b922      	cbnz	r2, 114b2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   114a8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   114ac:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   114b0:	8018      	strh	r0, [r3, #0]
}
   114b2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   114b4:	2101      	movs	r1, #1
   114b6:	f002 ff03 	bl	142c0 <bt_conn_set_state>
	bt_conn_unref(conn);
   114ba:	4628      	mov	r0, r5
}
   114bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   114c0:	f002 bec6 	b.w	14250 <bt_conn_unref>
   114c4:	2002158e 	.word	0x2002158e

000114c8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   114c8:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   114ca:	4c08      	ldr	r4, [pc, #32]	; (114ec <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   114cc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   114ce:	2205      	movs	r2, #5
   114d0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   114d4:	f003 f9c8 	bl	14868 <bt_conn_lookup_state_le>
		if (!conn) {
   114d8:	b938      	cbnz	r0, 114ea <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   114da:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   114de:	2204      	movs	r2, #4
}
   114e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   114e4:	4902      	ldr	r1, [pc, #8]	; (114f0 <find_pending_connect.part.0+0x28>)
   114e6:	f003 b9bf 	b.w	14868 <bt_conn_lookup_state_le>
}
   114ea:	bd10      	pop	{r4, pc}
   114ec:	20008000 	.word	0x20008000
   114f0:	0002d8e5 	.word	0x0002d8e5

000114f4 <hci_data_buf_overflow>:
{
   114f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   114f6:	68c3      	ldr	r3, [r0, #12]
   114f8:	2202      	movs	r2, #2
   114fa:	781b      	ldrb	r3, [r3, #0]
   114fc:	4906      	ldr	r1, [pc, #24]	; (11518 <hci_data_buf_overflow+0x24>)
   114fe:	9303      	str	r3, [sp, #12]
   11500:	4b06      	ldr	r3, [pc, #24]	; (1151c <hci_data_buf_overflow+0x28>)
   11502:	9302      	str	r3, [sp, #8]
   11504:	2300      	movs	r3, #0
   11506:	4618      	mov	r0, r3
   11508:	e9cd 3300 	strd	r3, r3, [sp]
   1150c:	f014 fe61 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   11510:	b005      	add	sp, #20
   11512:	f85d fb04 	ldr.w	pc, [sp], #4
   11516:	bf00      	nop
   11518:	0002a990 	.word	0x0002a990
   1151c:	0002d9c5 	.word	0x0002d9c5

00011520 <rx_queue_put>:
{
   11520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11522:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   11524:	480b      	ldr	r0, [pc, #44]	; (11554 <rx_queue_put+0x34>)
   11526:	f007 fec1 	bl	192ac <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1152a:	490b      	ldr	r1, [pc, #44]	; (11558 <rx_queue_put+0x38>)
   1152c:	480b      	ldr	r0, [pc, #44]	; (1155c <rx_queue_put+0x3c>)
   1152e:	f018 f8e7 	bl	29700 <k_work_submit_to_queue>
	if (err < 0) {
   11532:	2800      	cmp	r0, #0
   11534:	da0a      	bge.n	1154c <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   11536:	4b0a      	ldr	r3, [pc, #40]	; (11560 <rx_queue_put+0x40>)
   11538:	9003      	str	r0, [sp, #12]
   1153a:	9302      	str	r3, [sp, #8]
   1153c:	2300      	movs	r3, #0
   1153e:	2201      	movs	r2, #1
   11540:	4618      	mov	r0, r3
   11542:	e9cd 3300 	strd	r3, r3, [sp]
   11546:	4907      	ldr	r1, [pc, #28]	; (11564 <rx_queue_put+0x44>)
   11548:	f014 fe43 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   1154c:	b005      	add	sp, #20
   1154e:	f85d fb04 	ldr.w	pc, [sp], #4
   11552:	bf00      	nop
   11554:	2000813c 	.word	0x2000813c
   11558:	200084a8 	.word	0x200084a8
   1155c:	200096b8 	.word	0x200096b8
   11560:	0002d9ed 	.word	0x0002d9ed
   11564:	0002a990 	.word	0x0002a990

00011568 <hci_hardware_error>:
{
   11568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1156a:	2101      	movs	r1, #1
   1156c:	300c      	adds	r0, #12
   1156e:	f008 f88d 	bl	1968c <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   11572:	7803      	ldrb	r3, [r0, #0]
   11574:	2201      	movs	r2, #1
   11576:	9303      	str	r3, [sp, #12]
   11578:	4b05      	ldr	r3, [pc, #20]	; (11590 <hci_hardware_error+0x28>)
   1157a:	4906      	ldr	r1, [pc, #24]	; (11594 <hci_hardware_error+0x2c>)
   1157c:	9302      	str	r3, [sp, #8]
   1157e:	2300      	movs	r3, #0
   11580:	4618      	mov	r0, r3
   11582:	e9cd 3300 	strd	r3, r3, [sp]
   11586:	f014 fe24 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   1158a:	b005      	add	sp, #20
   1158c:	f85d fb04 	ldr.w	pc, [sp], #4
   11590:	0002da0a 	.word	0x0002da0a
   11594:	0002a990 	.word	0x0002a990

00011598 <le_data_len_change>:
{
   11598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1159a:	68c3      	ldr	r3, [r0, #12]
   1159c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1159e:	4620      	mov	r0, r4
   115a0:	f002 fe86 	bl	142b0 <bt_conn_lookup_handle>
   115a4:	4603      	mov	r3, r0
	if (!conn) {
   115a6:	b950      	cbnz	r0, 115be <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   115a8:	4a07      	ldr	r2, [pc, #28]	; (115c8 <le_data_len_change+0x30>)
   115aa:	4908      	ldr	r1, [pc, #32]	; (115cc <le_data_len_change+0x34>)
   115ac:	e9cd 0201 	strd	r0, r2, [sp, #4]
   115b0:	9403      	str	r4, [sp, #12]
   115b2:	2201      	movs	r2, #1
   115b4:	9000      	str	r0, [sp, #0]
   115b6:	f014 fe0c 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   115ba:	b004      	add	sp, #16
   115bc:	bd10      	pop	{r4, pc}
   115be:	b004      	add	sp, #16
   115c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   115c4:	f002 be44 	b.w	14250 <bt_conn_unref>
   115c8:	0002da2c 	.word	0x0002da2c
   115cc:	0002a990 	.word	0x0002a990

000115d0 <le_phy_update_complete>:
{
   115d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   115d2:	68c3      	ldr	r3, [r0, #12]
   115d4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   115d8:	4620      	mov	r0, r4
   115da:	f002 fe69 	bl	142b0 <bt_conn_lookup_handle>
   115de:	4603      	mov	r3, r0
	if (!conn) {
   115e0:	b950      	cbnz	r0, 115f8 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   115e2:	4a08      	ldr	r2, [pc, #32]	; (11604 <le_phy_update_complete+0x34>)
   115e4:	4908      	ldr	r1, [pc, #32]	; (11608 <le_phy_update_complete+0x38>)
   115e6:	e9cd 0201 	strd	r0, r2, [sp, #4]
   115ea:	9403      	str	r4, [sp, #12]
   115ec:	2201      	movs	r2, #1
   115ee:	9000      	str	r0, [sp, #0]
   115f0:	f014 fdef 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   115f4:	b004      	add	sp, #16
   115f6:	bd10      	pop	{r4, pc}
   115f8:	b004      	add	sp, #16
   115fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   115fe:	f002 be27 	b.w	14250 <bt_conn_unref>
   11602:	bf00      	nop
   11604:	0002da2c 	.word	0x0002da2c
   11608:	0002a990 	.word	0x0002a990

0001160c <hci_disconn_complete>:
{
   1160c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1160e:	68c5      	ldr	r5, [r0, #12]
{
   11610:	b085      	sub	sp, #20
	if (evt->status) {
   11612:	782e      	ldrb	r6, [r5, #0]
   11614:	b986      	cbnz	r6, 11638 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11616:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1161a:	4638      	mov	r0, r7
   1161c:	f002 fe48 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   11620:	4604      	mov	r4, r0
   11622:	b958      	cbnz	r0, 1163c <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   11624:	4b0b      	ldr	r3, [pc, #44]	; (11654 <hci_disconn_complete+0x48>)
   11626:	2201      	movs	r2, #1
   11628:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1162c:	490a      	ldr	r1, [pc, #40]	; (11658 <hci_disconn_complete+0x4c>)
   1162e:	4603      	mov	r3, r0
   11630:	9703      	str	r7, [sp, #12]
   11632:	9000      	str	r0, [sp, #0]
   11634:	f014 fdcd 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   11638:	b005      	add	sp, #20
   1163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   1163c:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1163e:	4631      	mov	r1, r6
	conn->err = evt->reason;
   11640:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11642:	f002 fe3d 	bl	142c0 <bt_conn_set_state>
		bt_conn_unref(conn);
   11646:	4620      	mov	r0, r4
}
   11648:	b005      	add	sp, #20
   1164a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1164e:	f002 bdff 	b.w	14250 <bt_conn_unref>
   11652:	bf00      	nop
   11654:	0002da50 	.word	0x0002da50
   11658:	0002a990 	.word	0x0002a990

0001165c <handle_event>:
{
   1165c:	b530      	push	{r4, r5, lr}
   1165e:	4604      	mov	r4, r0
   11660:	4608      	mov	r0, r1
   11662:	b087      	sub	sp, #28
   11664:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   11668:	4293      	cmp	r3, r2
   1166a:	d112      	bne.n	11692 <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1166c:	8a05      	ldrh	r5, [r0, #16]
   1166e:	68c0      	ldr	r0, [r0, #12]
   11670:	4629      	mov	r1, r5
   11672:	f7ff fdd3 	bl	1121c <bt_hex>
   11676:	4b16      	ldr	r3, [pc, #88]	; (116d0 <handle_event+0x74>)
   11678:	e9cd 5004 	strd	r5, r0, [sp, #16]
   1167c:	9302      	str	r3, [sp, #8]
   1167e:	2300      	movs	r3, #0
   11680:	2202      	movs	r2, #2
   11682:	4618      	mov	r0, r3
   11684:	e9cd 3300 	strd	r3, r3, [sp]
   11688:	4912      	ldr	r1, [pc, #72]	; (116d4 <handle_event+0x78>)
   1168a:	9403      	str	r4, [sp, #12]
   1168c:	f014 fda1 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   11690:	e014      	b.n	116bc <handle_event+0x60>
		if (handler->event != event) {
   11692:	4611      	mov	r1, r2
   11694:	f811 5b08 	ldrb.w	r5, [r1], #8
   11698:	42a5      	cmp	r5, r4
   1169a:	d116      	bne.n	116ca <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   1169c:	8a03      	ldrh	r3, [r0, #16]
   1169e:	7851      	ldrb	r1, [r2, #1]
   116a0:	4299      	cmp	r1, r3
   116a2:	d90d      	bls.n	116c0 <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   116a4:	e9cd 3403 	strd	r3, r4, [sp, #12]
   116a8:	4b0b      	ldr	r3, [pc, #44]	; (116d8 <handle_event+0x7c>)
   116aa:	2201      	movs	r2, #1
   116ac:	9302      	str	r3, [sp, #8]
   116ae:	2300      	movs	r3, #0
   116b0:	4908      	ldr	r1, [pc, #32]	; (116d4 <handle_event+0x78>)
   116b2:	4618      	mov	r0, r3
   116b4:	e9cd 3300 	strd	r3, r3, [sp]
   116b8:	f014 fd8b 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   116bc:	b007      	add	sp, #28
   116be:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   116c0:	6853      	ldr	r3, [r2, #4]
}
   116c2:	b007      	add	sp, #28
   116c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   116c8:	4718      	bx	r3
   116ca:	460a      	mov	r2, r1
   116cc:	e7cc      	b.n	11668 <handle_event+0xc>
   116ce:	bf00      	nop
   116d0:	0002da98 	.word	0x0002da98
   116d4:	0002a990 	.word	0x0002a990
   116d8:	0002da76 	.word	0x0002da76

000116dc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   116dc:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   116de:	4853      	ldr	r0, [pc, #332]	; (1182c <rx_work_handler+0x150>)
{
   116e0:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   116e2:	f007 fe4d 	bl	19380 <net_buf_slist_get>
	if (!buf) {
   116e6:	4604      	mov	r4, r0
   116e8:	2800      	cmp	r0, #0
   116ea:	d064      	beq.n	117b6 <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   116ec:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   116ee:	2b01      	cmp	r3, #1
   116f0:	d063      	beq.n	117ba <rx_work_handler+0xde>
   116f2:	2b03      	cmp	r3, #3
   116f4:	f040 8090 	bne.w	11818 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   116f8:	8a03      	ldrh	r3, [r0, #16]
   116fa:	2b03      	cmp	r3, #3
   116fc:	d80c      	bhi.n	11718 <rx_work_handler+0x3c>
   116fe:	f240 13ed 	movw	r3, #493	; 0x1ed
   11702:	4a4b      	ldr	r2, [pc, #300]	; (11830 <rx_work_handler+0x154>)
   11704:	494b      	ldr	r1, [pc, #300]	; (11834 <rx_work_handler+0x158>)
   11706:	484c      	ldr	r0, [pc, #304]	; (11838 <rx_work_handler+0x15c>)
   11708:	f013 fbe5 	bl	24ed6 <assert_print>
   1170c:	4040      	eors	r0, r0
   1170e:	f380 8811 	msr	BASEPRI, r0
   11712:	f04f 0003 	mov.w	r0, #3
   11716:	df02      	svc	2
   11718:	2104      	movs	r1, #4
   1171a:	f104 000c 	add.w	r0, r4, #12
   1171e:	f007 ffb5 	bl	1968c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11722:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   11724:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   11726:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11728:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   1172a:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   1172c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   11730:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   11732:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   11734:	d00f      	beq.n	11756 <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   11736:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1173a:	4b40      	ldr	r3, [pc, #256]	; (1183c <rx_work_handler+0x160>)
   1173c:	2201      	movs	r2, #1
   1173e:	9302      	str	r3, [sp, #8]
   11740:	2300      	movs	r3, #0
   11742:	493f      	ldr	r1, [pc, #252]	; (11840 <rx_work_handler+0x164>)
   11744:	4618      	mov	r0, r3
   11746:	e9cd 3300 	strd	r3, r3, [sp]
   1174a:	f014 fd42 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   1174e:	4620      	mov	r0, r4
   11750:	f007 fe98 	bl	19484 <net_buf_unref>
		break;
   11754:	e01a      	b.n	1178c <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   11756:	f002 fdab 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   1175a:	4605      	mov	r5, r0
   1175c:	b958      	cbnz	r0, 11776 <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1175e:	8b63      	ldrh	r3, [r4, #26]
   11760:	2201      	movs	r2, #1
   11762:	9303      	str	r3, [sp, #12]
   11764:	4b37      	ldr	r3, [pc, #220]	; (11844 <rx_work_handler+0x168>)
   11766:	4936      	ldr	r1, [pc, #216]	; (11840 <rx_work_handler+0x164>)
   11768:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1176c:	4603      	mov	r3, r0
   1176e:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   11770:	f014 fd2f 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
   11774:	e7eb      	b.n	1174e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   11776:	f002 fe87 	bl	14488 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1177a:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   1177c:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   1177e:	0b32      	lsrs	r2, r6, #12
   11780:	4628      	mov	r0, r5
   11782:	f002 fc09 	bl	13f98 <bt_conn_recv>
	bt_conn_unref(conn);
   11786:	4628      	mov	r0, r5
   11788:	f002 fd62 	bl	14250 <bt_conn_unref>
	return list->head;
   1178c:	4b2e      	ldr	r3, [pc, #184]	; (11848 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1178e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   11792:	b183      	cbz	r3, 117b6 <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   11794:	492d      	ldr	r1, [pc, #180]	; (1184c <rx_work_handler+0x170>)
   11796:	482e      	ldr	r0, [pc, #184]	; (11850 <rx_work_handler+0x174>)
   11798:	f017 ffb2 	bl	29700 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   1179c:	2800      	cmp	r0, #0
   1179e:	da0a      	bge.n	117b6 <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   117a0:	4b2c      	ldr	r3, [pc, #176]	; (11854 <rx_work_handler+0x178>)
   117a2:	9003      	str	r0, [sp, #12]
   117a4:	9302      	str	r3, [sp, #8]
   117a6:	2300      	movs	r3, #0
   117a8:	2201      	movs	r2, #1
   117aa:	4618      	mov	r0, r3
   117ac:	e9cd 3300 	strd	r3, r3, [sp]
   117b0:	4923      	ldr	r1, [pc, #140]	; (11840 <rx_work_handler+0x164>)
   117b2:	f014 fd0e 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   117b6:	b006      	add	sp, #24
   117b8:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   117ba:	8a03      	ldrh	r3, [r0, #16]
   117bc:	2b01      	cmp	r3, #1
   117be:	d80c      	bhi.n	117da <rx_work_handler+0xfe>
   117c0:	f640 136d 	movw	r3, #2413	; 0x96d
   117c4:	4a1a      	ldr	r2, [pc, #104]	; (11830 <rx_work_handler+0x154>)
   117c6:	491b      	ldr	r1, [pc, #108]	; (11834 <rx_work_handler+0x158>)
   117c8:	481b      	ldr	r0, [pc, #108]	; (11838 <rx_work_handler+0x15c>)
   117ca:	f013 fb84 	bl	24ed6 <assert_print>
   117ce:	4040      	eors	r0, r0
   117d0:	f380 8811 	msr	BASEPRI, r0
   117d4:	f04f 0003 	mov.w	r0, #3
   117d8:	df02      	svc	2
   117da:	2102      	movs	r1, #2
   117dc:	f104 000c 	add.w	r0, r4, #12
   117e0:	f007 ff54 	bl	1968c <net_buf_simple_pull_mem>
   117e4:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   117e6:	7800      	ldrb	r0, [r0, #0]
   117e8:	f014 fcb1 	bl	2614e <bt_hci_evt_get_flags>
   117ec:	0783      	lsls	r3, r0, #30
   117ee:	d40c      	bmi.n	1180a <rx_work_handler+0x12e>
   117f0:	f640 1371 	movw	r3, #2417	; 0x971
   117f4:	4a0e      	ldr	r2, [pc, #56]	; (11830 <rx_work_handler+0x154>)
   117f6:	4918      	ldr	r1, [pc, #96]	; (11858 <rx_work_handler+0x17c>)
   117f8:	480f      	ldr	r0, [pc, #60]	; (11838 <rx_work_handler+0x15c>)
   117fa:	f013 fb6c 	bl	24ed6 <assert_print>
   117fe:	4040      	eors	r0, r0
   11800:	f380 8811 	msr	BASEPRI, r0
   11804:	f04f 0003 	mov.w	r0, #3
   11808:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1180a:	2306      	movs	r3, #6
   1180c:	4621      	mov	r1, r4
   1180e:	4a13      	ldr	r2, [pc, #76]	; (1185c <rx_work_handler+0x180>)
   11810:	7828      	ldrb	r0, [r5, #0]
   11812:	f7ff ff23 	bl	1165c <handle_event>
	net_buf_unref(buf);
   11816:	e79a      	b.n	1174e <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   11818:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1181a:	4b11      	ldr	r3, [pc, #68]	; (11860 <rx_work_handler+0x184>)
   1181c:	2201      	movs	r2, #1
   1181e:	9302      	str	r3, [sp, #8]
   11820:	2300      	movs	r3, #0
   11822:	4907      	ldr	r1, [pc, #28]	; (11840 <rx_work_handler+0x164>)
   11824:	4618      	mov	r0, r3
   11826:	e9cd 3300 	strd	r3, r3, [sp]
   1182a:	e7a1      	b.n	11770 <rx_work_handler+0x94>
   1182c:	2000813c 	.word	0x2000813c
   11830:	0002daba 	.word	0x0002daba
   11834:	0002daee 	.word	0x0002daee
   11838:	0002b939 	.word	0x0002b939
   1183c:	0002db07 	.word	0x0002db07
   11840:	0002a990 	.word	0x0002a990
   11844:	0002db2b 	.word	0x0002db2b
   11848:	20008000 	.word	0x20008000
   1184c:	200084a8 	.word	0x200084a8
   11850:	200096b8 	.word	0x200096b8
   11854:	0002d9ed 	.word	0x0002d9ed
   11858:	0002db4d 	.word	0x0002db4d
   1185c:	0002b22c 	.word	0x0002b22c
   11860:	0002db7b 	.word	0x0002db7b

00011864 <hci_le_meta_event>:
{
   11864:	b510      	push	{r4, lr}
   11866:	2101      	movs	r1, #1
   11868:	4604      	mov	r4, r0
   1186a:	300c      	adds	r0, #12
   1186c:	f007 ff0e 	bl	1968c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11870:	4621      	mov	r1, r4
}
   11872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11876:	230a      	movs	r3, #10
   11878:	4a01      	ldr	r2, [pc, #4]	; (11880 <hci_le_meta_event+0x1c>)
   1187a:	7800      	ldrb	r0, [r0, #0]
   1187c:	f7ff beee 	b.w	1165c <handle_event>
   11880:	0002b25c 	.word	0x0002b25c

00011884 <le_remote_feat_complete>:
{
   11884:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   11886:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11888:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1188c:	4630      	mov	r0, r6
   1188e:	f002 fd0f 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   11892:	4604      	mov	r4, r0
   11894:	b958      	cbnz	r0, 118ae <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11896:	4b10      	ldr	r3, [pc, #64]	; (118d8 <le_remote_feat_complete+0x54>)
   11898:	2201      	movs	r2, #1
   1189a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1189e:	490f      	ldr	r1, [pc, #60]	; (118dc <le_remote_feat_complete+0x58>)
   118a0:	4603      	mov	r3, r0
   118a2:	9603      	str	r6, [sp, #12]
   118a4:	9000      	str	r0, [sp, #0]
   118a6:	f014 fc94 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   118aa:	b004      	add	sp, #16
   118ac:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   118ae:	782b      	ldrb	r3, [r5, #0]
   118b0:	b93b      	cbnz	r3, 118c2 <le_remote_feat_complete+0x3e>
   118b2:	f8d5 3003 	ldr.w	r3, [r5, #3]
   118b6:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   118ba:	f8d5 3007 	ldr.w	r3, [r5, #7]
   118be:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   118c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   118c6:	1d20      	adds	r0, r4, #4
   118c8:	f014 fc6c 	bl	261a4 <atomic_or>
	bt_conn_unref(conn);
   118cc:	4620      	mov	r0, r4
}
   118ce:	b004      	add	sp, #16
   118d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   118d4:	f002 bcbc 	b.w	14250 <bt_conn_unref>
   118d8:	0002da2c 	.word	0x0002da2c
   118dc:	0002a990 	.word	0x0002a990

000118e0 <hci_cmd_done>:
{
   118e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118e4:	4606      	mov	r6, r0
   118e6:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   118e8:	7a90      	ldrb	r0, [r2, #10]
{
   118ea:	460f      	mov	r7, r1
   118ec:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   118ee:	f007 fb8f 	bl	19010 <net_buf_pool_get>
   118f2:	4d3d      	ldr	r5, [pc, #244]	; (119e8 <hci_cmd_done+0x108>)
   118f4:	4285      	cmp	r5, r0
   118f6:	d014      	beq.n	11922 <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   118f8:	7aa4      	ldrb	r4, [r4, #10]
   118fa:	4620      	mov	r0, r4
   118fc:	f007 fb88 	bl	19010 <net_buf_pool_get>
   11900:	4b3a      	ldr	r3, [pc, #232]	; (119ec <hci_cmd_done+0x10c>)
   11902:	e9cd 0505 	strd	r0, r5, [sp, #20]
   11906:	9302      	str	r3, [sp, #8]
   11908:	2300      	movs	r3, #0
   1190a:	2202      	movs	r2, #2
   1190c:	4618      	mov	r0, r3
   1190e:	e9cd 6403 	strd	r6, r4, [sp, #12]
   11912:	e9cd 3300 	strd	r3, r3, [sp]
   11916:	4936      	ldr	r1, [pc, #216]	; (119f0 <hci_cmd_done+0x110>)
   11918:	f014 fc5b 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   1191c:	b008      	add	sp, #32
   1191e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   11922:	4620      	mov	r0, r4
   11924:	f007 fb7c 	bl	19020 <net_buf_id>
   11928:	f04f 080c 	mov.w	r8, #12
   1192c:	4d31      	ldr	r5, [pc, #196]	; (119f4 <hci_cmd_done+0x114>)
   1192e:	fb08 5000 	mla	r0, r8, r0, r5
   11932:	8843      	ldrh	r3, [r0, #2]
   11934:	42b3      	cmp	r3, r6
   11936:	d012      	beq.n	1195e <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   11938:	4620      	mov	r0, r4
   1193a:	f007 fb71 	bl	19020 <net_buf_id>
   1193e:	fb08 5000 	mla	r0, r8, r0, r5
   11942:	8843      	ldrh	r3, [r0, #2]
   11944:	2202      	movs	r2, #2
   11946:	e9cd 6303 	strd	r6, r3, [sp, #12]
   1194a:	4b2b      	ldr	r3, [pc, #172]	; (119f8 <hci_cmd_done+0x118>)
   1194c:	4928      	ldr	r1, [pc, #160]	; (119f0 <hci_cmd_done+0x110>)
   1194e:	9302      	str	r3, [sp, #8]
   11950:	2300      	movs	r3, #0
   11952:	4618      	mov	r0, r3
   11954:	e9cd 3300 	strd	r3, r3, [sp]
   11958:	f014 fc3b 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		return;
   1195c:	e7de      	b.n	1191c <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   1195e:	4e27      	ldr	r6, [pc, #156]	; (119fc <hci_cmd_done+0x11c>)
   11960:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   11964:	b120      	cbz	r0, 11970 <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   11966:	f007 fd8d 	bl	19484 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1196a:	2300      	movs	r3, #0
   1196c:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   11970:	4620      	mov	r0, r4
   11972:	f007 fb55 	bl	19020 <net_buf_id>
   11976:	260c      	movs	r6, #12
   11978:	fb06 5000 	mla	r0, r6, r0, r5
   1197c:	6843      	ldr	r3, [r0, #4]
   1197e:	b19b      	cbz	r3, 119a8 <hci_cmd_done+0xc8>
   11980:	b997      	cbnz	r7, 119a8 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   11982:	4620      	mov	r0, r4
   11984:	f007 fb4c 	bl	19020 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11988:	2101      	movs	r1, #1
   1198a:	fb06 5000 	mla	r0, r6, r0, r5
   1198e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   11990:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   11994:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   11996:	f003 061f 	and.w	r6, r3, #31
   1199a:	40b1      	lsls	r1, r6
	if (val) {
   1199c:	095b      	lsrs	r3, r3, #5
   1199e:	b1e2      	cbz	r2, 119da <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   119a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   119a4:	f014 fbfe 	bl	261a4 <atomic_or>
	if (cmd(buf)->sync) {
   119a8:	4620      	mov	r0, r4
   119aa:	f007 fb39 	bl	19020 <net_buf_id>
   119ae:	260c      	movs	r6, #12
   119b0:	fb06 5000 	mla	r0, r6, r0, r5
   119b4:	6883      	ldr	r3, [r0, #8]
   119b6:	2b00      	cmp	r3, #0
   119b8:	d0b0      	beq.n	1191c <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   119ba:	4620      	mov	r0, r4
   119bc:	f007 fb30 	bl	19020 <net_buf_id>
   119c0:	4370      	muls	r0, r6
   119c2:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   119c4:	4620      	mov	r0, r4
   119c6:	f007 fb2b 	bl	19020 <net_buf_id>
   119ca:	fb06 5500 	mla	r5, r6, r0, r5
   119ce:	68a8      	ldr	r0, [r5, #8]
}
   119d0:	b008      	add	sp, #32
   119d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   119d6:	f00e bab3 	b.w	1ff40 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   119da:	43c9      	mvns	r1, r1
   119dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   119e0:	f014 fc06 	bl	261f0 <atomic_and.isra.0>
   119e4:	e7e0      	b.n	119a8 <hci_cmd_done+0xc8>
   119e6:	bf00      	nop
   119e8:	20008d08 	.word	0x20008d08
   119ec:	0002db8f 	.word	0x0002db8f
   119f0:	0002a990 	.word	0x0002a990
   119f4:	20020fd8 	.word	0x20020fd8
   119f8:	0002dbc4 	.word	0x0002dbc4
   119fc:	20008000 	.word	0x20008000

00011a00 <hci_cmd_status>:
{
   11a00:	b538      	push	{r3, r4, r5, lr}
   11a02:	2104      	movs	r1, #4
   11a04:	4604      	mov	r4, r0
   11a06:	300c      	adds	r0, #12
   11a08:	f007 fe40 	bl	1968c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   11a0c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   11a0e:	7801      	ldrb	r1, [r0, #0]
   11a10:	4622      	mov	r2, r4
   11a12:	8840      	ldrh	r0, [r0, #2]
   11a14:	f7ff ff64 	bl	118e0 <hci_cmd_done>
	if (ncmd) {
   11a18:	b125      	cbz	r5, 11a24 <hci_cmd_status+0x24>
}
   11a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a1e:	4802      	ldr	r0, [pc, #8]	; (11a28 <hci_cmd_status+0x28>)
   11a20:	f00e ba8e 	b.w	1ff40 <z_impl_k_sem_give>
   11a24:	bd38      	pop	{r3, r4, r5, pc}
   11a26:	bf00      	nop
   11a28:	20008120 	.word	0x20008120

00011a2c <hci_cmd_complete>:
{
   11a2c:	b538      	push	{r3, r4, r5, lr}
   11a2e:	2103      	movs	r1, #3
   11a30:	4604      	mov	r4, r0
   11a32:	300c      	adds	r0, #12
   11a34:	f007 fe2a 	bl	1968c <net_buf_simple_pull_mem>
	status = buf->data[0];
   11a38:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   11a3a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   11a3c:	4622      	mov	r2, r4
   11a3e:	7819      	ldrb	r1, [r3, #0]
   11a40:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   11a44:	f7ff ff4c 	bl	118e0 <hci_cmd_done>
	if (ncmd) {
   11a48:	b125      	cbz	r5, 11a54 <hci_cmd_complete+0x28>
}
   11a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a4e:	4802      	ldr	r0, [pc, #8]	; (11a58 <hci_cmd_complete+0x2c>)
   11a50:	f00e ba76 	b.w	1ff40 <z_impl_k_sem_give>
   11a54:	bd38      	pop	{r3, r4, r5, pc}
   11a56:	bf00      	nop
   11a58:	20008120 	.word	0x20008120

00011a5c <hci_num_completed_packets>:
{
   11a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   11a60:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   11a62:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   11a64:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   11a66:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 11b50 <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   11a6a:	783b      	ldrb	r3, [r7, #0]
   11a6c:	429d      	cmp	r5, r3
   11a6e:	db02      	blt.n	11a76 <hci_num_completed_packets+0x1a>
}
   11a70:	b004      	add	sp, #16
   11a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   11a76:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   11a7a:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   11a7e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   11a82:	4650      	mov	r0, sl
   11a84:	f002 fc14 	bl	142b0 <bt_conn_lookup_handle>
		if (!conn) {
   11a88:	4604      	mov	r4, r0
   11a8a:	b1d8      	cbz	r0, 11ac4 <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   11a8c:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   11a90:	2e00      	cmp	r6, #0
   11a92:	d032      	beq.n	11afa <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   11a94:	f04f 0320 	mov.w	r3, #32
   11a98:	f3ef 8211 	mrs	r2, BASEPRI
   11a9c:	f383 8812 	msr	BASEPRI_MAX, r3
   11aa0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   11aa4:	69e3      	ldr	r3, [r4, #28]
   11aa6:	b1d3      	cbz	r3, 11ade <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   11aa8:	3b01      	subs	r3, #1
   11aaa:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   11aac:	f382 8811 	msr	BASEPRI, r2
   11ab0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   11ab4:	4620      	mov	r0, r4
   11ab6:	f002 f9f3 	bl	13ea0 <bt_conn_get_pkts>
   11aba:	3e01      	subs	r6, #1
   11abc:	f00e fa40 	bl	1ff40 <z_impl_k_sem_give>
   11ac0:	b2b6      	uxth	r6, r6
   11ac2:	e7e5      	b.n	11a90 <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   11ac4:	4b23      	ldr	r3, [pc, #140]	; (11b54 <hci_num_completed_packets+0xf8>)
   11ac6:	2201      	movs	r2, #1
   11ac8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11acc:	4922      	ldr	r1, [pc, #136]	; (11b58 <hci_num_completed_packets+0xfc>)
   11ace:	4603      	mov	r3, r0
   11ad0:	f8cd a00c 	str.w	sl, [sp, #12]
   11ad4:	9000      	str	r0, [sp, #0]
   11ad6:	f014 fb7c 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   11ada:	3501      	adds	r5, #1
   11adc:	e7c5      	b.n	11a6a <hci_num_completed_packets+0xe>
   11ade:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   11ae0:	b97b      	cbnz	r3, 11b02 <hci_num_completed_packets+0xa6>
   11ae2:	f382 8811 	msr	BASEPRI, r2
   11ae6:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   11aea:	2201      	movs	r2, #1
   11aec:	4618      	mov	r0, r3
   11aee:	e9cd 3901 	strd	r3, r9, [sp, #4]
   11af2:	4919      	ldr	r1, [pc, #100]	; (11b58 <hci_num_completed_packets+0xfc>)
   11af4:	9300      	str	r3, [sp, #0]
   11af6:	f014 fb6c 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   11afa:	4620      	mov	r0, r4
   11afc:	f002 fba8 	bl	14250 <bt_conn_unref>
   11b00:	e7eb      	b.n	11ada <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11b02:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   11b04:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11b06:	4283      	cmp	r3, r0
	list->head = node;
   11b08:	6161      	str	r1, [r4, #20]
	list->tail = node;
   11b0a:	bf08      	it	eq
   11b0c:	61a1      	streq	r1, [r4, #24]
   11b0e:	f382 8811 	msr	BASEPRI, r2
   11b12:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   11b16:	f04f 0220 	mov.w	r2, #32
   11b1a:	f3ef 8111 	mrs	r1, BASEPRI
   11b1e:	f382 8812 	msr	BASEPRI_MAX, r2
   11b22:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   11b26:	68da      	ldr	r2, [r3, #12]
   11b28:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   11b2a:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   11b2e:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   11b32:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   11b34:	b94a      	cbnz	r2, 11b4a <hci_num_completed_packets+0xee>
	list->head = node;
   11b36:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   11b3a:	f381 8811 	msr	BASEPRI, r1
   11b3e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   11b42:	4650      	mov	r0, sl
   11b44:	f00e fd6a 	bl	2061c <k_work_submit>
   11b48:	e7b4      	b.n	11ab4 <hci_num_completed_packets+0x58>
	parent->next = child;
   11b4a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11b4c:	6263      	str	r3, [r4, #36]	; 0x24
}
   11b4e:	e7f4      	b.n	11b3a <hci_num_completed_packets+0xde>
   11b50:	0002dc13 	.word	0x0002dc13
   11b54:	0002dbf7 	.word	0x0002dbf7
   11b58:	0002a990 	.word	0x0002a990

00011b5c <le_conn_update_complete>:
{
   11b5c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   11b5e:	68c5      	ldr	r5, [r0, #12]
{
   11b60:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   11b62:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   11b66:	4630      	mov	r0, r6
   11b68:	f002 fba2 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   11b6c:	4604      	mov	r4, r0
   11b6e:	b958      	cbnz	r0, 11b88 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11b70:	4b2b      	ldr	r3, [pc, #172]	; (11c20 <le_conn_update_complete+0xc4>)
   11b72:	2201      	movs	r2, #1
   11b74:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11b78:	492a      	ldr	r1, [pc, #168]	; (11c24 <le_conn_update_complete+0xc8>)
   11b7a:	4603      	mov	r3, r0
   11b7c:	9603      	str	r6, [sp, #12]
   11b7e:	9000      	str	r0, [sp, #0]
   11b80:	f014 fb27 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   11b84:	b006      	add	sp, #24
   11b86:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   11b88:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   11b8a:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   11b8c:	2b1a      	cmp	r3, #26
   11b8e:	d119      	bne.n	11bc4 <le_conn_update_complete+0x68>
   11b90:	78c3      	ldrb	r3, [r0, #3]
   11b92:	2b01      	cmp	r3, #1
   11b94:	d12a      	bne.n	11bec <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   11b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11b9a:	4630      	mov	r0, r6
   11b9c:	f014 fb02 	bl	261a4 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   11ba0:	0542      	lsls	r2, r0, #21
   11ba2:	d40f      	bmi.n	11bc4 <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   11ba4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   11ba8:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   11baa:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   11bac:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   11bb0:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   11bb2:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   11bb4:	f003 f98a 	bl	14ecc <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   11bb8:	4620      	mov	r0, r4
}
   11bba:	b006      	add	sp, #24
   11bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   11bc0:	f002 bb46 	b.w	14250 <bt_conn_unref>
		if (!evt->status) {
   11bc4:	782b      	ldrb	r3, [r5, #0]
   11bc6:	b98b      	cbnz	r3, 11bec <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   11bc8:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   11bcc:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   11bd0:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   11bd4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11bd8:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   11bdc:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11be0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   11be4:	4630      	mov	r0, r6
   11be6:	f014 fb03 	bl	261f0 <atomic_and.isra.0>
}
   11bea:	e014      	b.n	11c16 <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11bec:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   11bf0:	05db      	lsls	r3, r3, #23
   11bf2:	d5f5      	bpl.n	11be0 <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   11bf4:	782b      	ldrb	r3, [r5, #0]
   11bf6:	2b20      	cmp	r3, #32
   11bf8:	d1f2      	bne.n	11be0 <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   11bfa:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   11bfe:	2b00      	cmp	r3, #0
   11c00:	d0ee      	beq.n	11be0 <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   11c02:	3b01      	subs	r3, #1
   11c04:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   11c08:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   11c0c:	2300      	movs	r3, #0
   11c0e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   11c12:	f00e febb 	bl	2098c <k_work_schedule>
		notify_le_param_updated(conn);
   11c16:	4620      	mov	r0, r4
   11c18:	f002 fc9a 	bl	14550 <notify_le_param_updated>
   11c1c:	e7cc      	b.n	11bb8 <le_conn_update_complete+0x5c>
   11c1e:	bf00      	nop
   11c20:	0002da2c 	.word	0x0002da2c
   11c24:	0002a990 	.word	0x0002a990

00011c28 <bt_hci_cmd_state_set_init>:
{
   11c28:	b510      	push	{r4, lr}
	state->bit = bit;
   11c2a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   11c2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   11c32:	460c      	mov	r4, r1
	state->val = val;
   11c34:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   11c36:	f007 f9f3 	bl	19020 <net_buf_id>
   11c3a:	220c      	movs	r2, #12
   11c3c:	4b02      	ldr	r3, [pc, #8]	; (11c48 <bt_hci_cmd_state_set_init+0x20>)
   11c3e:	fb02 3300 	mla	r3, r2, r0, r3
   11c42:	605c      	str	r4, [r3, #4]
}
   11c44:	bd10      	pop	{r4, pc}
   11c46:	bf00      	nop
   11c48:	20020fd8 	.word	0x20020fd8

00011c4c <bt_hci_cmd_create>:
{
   11c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   11c50:	f04f 32ff 	mov.w	r2, #4294967295
   11c54:	4606      	mov	r6, r0
   11c56:	f04f 33ff 	mov.w	r3, #4294967295
   11c5a:	481e      	ldr	r0, [pc, #120]	; (11cd4 <bt_hci_cmd_create+0x88>)
   11c5c:	460f      	mov	r7, r1
   11c5e:	f016 f906 	bl	27e6e <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   11c62:	4604      	mov	r4, r0
   11c64:	b958      	cbnz	r0, 11c7e <bt_hci_cmd_create+0x32>
   11c66:	491c      	ldr	r1, [pc, #112]	; (11cd8 <bt_hci_cmd_create+0x8c>)
   11c68:	481c      	ldr	r0, [pc, #112]	; (11cdc <bt_hci_cmd_create+0x90>)
   11c6a:	f240 1301 	movw	r3, #257	; 0x101
   11c6e:	4a1c      	ldr	r2, [pc, #112]	; (11ce0 <bt_hci_cmd_create+0x94>)
   11c70:	f013 f931 	bl	24ed6 <assert_print>
   11c74:	f240 1101 	movw	r1, #257	; 0x101
   11c78:	4819      	ldr	r0, [pc, #100]	; (11ce0 <bt_hci_cmd_create+0x94>)
   11c7a:	f013 f925 	bl	24ec8 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11c7e:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   11c82:	f100 0a0c 	add.w	sl, r0, #12
   11c86:	2101      	movs	r1, #1
   11c88:	4650      	mov	r0, sl
   11c8a:	f007 fae9 	bl	19260 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   11c8e:	4620      	mov	r0, r4
   11c90:	f884 8018 	strb.w	r8, [r4, #24]
   11c94:	f007 f9c4 	bl	19020 <net_buf_id>
   11c98:	f04f 090c 	mov.w	r9, #12
   11c9c:	4d11      	ldr	r5, [pc, #68]	; (11ce4 <bt_hci_cmd_create+0x98>)
   11c9e:	fb09 5000 	mla	r0, r9, r0, r5
   11ca2:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   11ca4:	4620      	mov	r0, r4
   11ca6:	f007 f9bb 	bl	19020 <net_buf_id>
   11caa:	fb09 5000 	mla	r0, r9, r0, r5
   11cae:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   11cb2:	4620      	mov	r0, r4
   11cb4:	f007 f9b4 	bl	19020 <net_buf_id>
   11cb8:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   11cbc:	2103      	movs	r1, #3
   11cbe:	4650      	mov	r0, sl
   11cc0:	f8c5 8004 	str.w	r8, [r5, #4]
   11cc4:	f007 fd00 	bl	196c8 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   11cc8:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   11cca:	7087      	strb	r7, [r0, #2]
}
   11ccc:	4620      	mov	r0, r4
   11cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11cd2:	bf00      	nop
   11cd4:	20008d08 	.word	0x20008d08
   11cd8:	0002f5f4 	.word	0x0002f5f4
   11cdc:	0002b939 	.word	0x0002b939
   11ce0:	0002daba 	.word	0x0002daba
   11ce4:	20020fd8 	.word	0x20020fd8

00011ce8 <bt_hci_cmd_send_sync>:
{
   11ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cec:	4607      	mov	r7, r0
   11cee:	4615      	mov	r5, r2
	if (!buf) {
   11cf0:	460c      	mov	r4, r1
{
   11cf2:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   11cf4:	b921      	cbnz	r1, 11d00 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   11cf6:	f7ff ffa9 	bl	11c4c <bt_hci_cmd_create>
		if (!buf) {
   11cfa:	4604      	mov	r4, r0
   11cfc:	2800      	cmp	r0, #0
   11cfe:	d056      	beq.n	11dae <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   11d00:	ae06      	add	r6, sp, #24
   11d02:	2201      	movs	r2, #1
   11d04:	2100      	movs	r1, #0
   11d06:	4630      	mov	r0, r6
   11d08:	f017 fc97 	bl	2963a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   11d0c:	4620      	mov	r0, r4
   11d0e:	f007 f987 	bl	19020 <net_buf_id>
   11d12:	230c      	movs	r3, #12
   11d14:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11db4 <bt_hci_cmd_send_sync+0xcc>
   11d18:	fb03 8000 	mla	r0, r3, r0, r8
   11d1c:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   11d1e:	4620      	mov	r0, r4
   11d20:	f007 fbf4 	bl	1950c <net_buf_ref>
   11d24:	4601      	mov	r1, r0
   11d26:	4824      	ldr	r0, [pc, #144]	; (11db8 <bt_hci_cmd_send_sync+0xd0>)
   11d28:	f007 fb86 	bl	19438 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   11d2c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   11d30:	4630      	mov	r0, r6
   11d32:	2300      	movs	r3, #0
   11d34:	f00e f948 	bl	1ffc8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   11d38:	4606      	mov	r6, r0
   11d3a:	b180      	cbz	r0, 11d5e <bt_hci_cmd_send_sync+0x76>
   11d3c:	f240 1349 	movw	r3, #329	; 0x149
   11d40:	4a1e      	ldr	r2, [pc, #120]	; (11dbc <bt_hci_cmd_send_sync+0xd4>)
   11d42:	491f      	ldr	r1, [pc, #124]	; (11dc0 <bt_hci_cmd_send_sync+0xd8>)
   11d44:	481f      	ldr	r0, [pc, #124]	; (11dc4 <bt_hci_cmd_send_sync+0xdc>)
   11d46:	f013 f8c6 	bl	24ed6 <assert_print>
   11d4a:	4631      	mov	r1, r6
   11d4c:	481e      	ldr	r0, [pc, #120]	; (11dc8 <bt_hci_cmd_send_sync+0xe0>)
   11d4e:	f013 f8c2 	bl	24ed6 <assert_print>
   11d52:	4040      	eors	r0, r0
   11d54:	f380 8811 	msr	BASEPRI, r0
   11d58:	f04f 0003 	mov.w	r0, #3
   11d5c:	df02      	svc	2
	status = cmd(buf)->status;
   11d5e:	4620      	mov	r0, r4
   11d60:	f007 f95e 	bl	19020 <net_buf_id>
   11d64:	230c      	movs	r3, #12
   11d66:	4358      	muls	r0, r3
   11d68:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   11d6c:	b1be      	cbz	r6, 11d9e <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   11d6e:	4b17      	ldr	r3, [pc, #92]	; (11dcc <bt_hci_cmd_send_sync+0xe4>)
   11d70:	2202      	movs	r2, #2
   11d72:	9302      	str	r3, [sp, #8]
   11d74:	2300      	movs	r3, #0
   11d76:	4916      	ldr	r1, [pc, #88]	; (11dd0 <bt_hci_cmd_send_sync+0xe8>)
   11d78:	4618      	mov	r0, r3
   11d7a:	e9cd 3300 	strd	r3, r3, [sp]
   11d7e:	e9cd 7603 	strd	r7, r6, [sp, #12]
   11d82:	f014 fa26 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   11d86:	4620      	mov	r0, r4
   11d88:	f007 fb7c 	bl	19484 <net_buf_unref>
			return -ECONNREFUSED;
   11d8c:	2e09      	cmp	r6, #9
   11d8e:	bf14      	ite	ne
   11d90:	f06f 0004 	mvnne.w	r0, #4
   11d94:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   11d98:	b00c      	add	sp, #48	; 0x30
   11d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   11d9e:	b115      	cbz	r5, 11da6 <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   11da0:	602c      	str	r4, [r5, #0]
	return 0;
   11da2:	2000      	movs	r0, #0
   11da4:	e7f8      	b.n	11d98 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   11da6:	4620      	mov	r0, r4
   11da8:	f007 fb6c 	bl	19484 <net_buf_unref>
   11dac:	e7f9      	b.n	11da2 <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   11dae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11db2:	e7f1      	b.n	11d98 <bt_hci_cmd_send_sync+0xb0>
   11db4:	20020fd8 	.word	0x20020fd8
   11db8:	20008144 	.word	0x20008144
   11dbc:	0002daba 	.word	0x0002daba
   11dc0:	0002c922 	.word	0x0002c922
   11dc4:	0002b939 	.word	0x0002b939
   11dc8:	0002dc2a 	.word	0x0002dc2a
   11dcc:	0002dc4a 	.word	0x0002dc4a
   11dd0:	0002a990 	.word	0x0002a990

00011dd4 <hci_le_read_max_data_len>:
{
   11dd4:	b570      	push	{r4, r5, r6, lr}
   11dd6:	b086      	sub	sp, #24
   11dd8:	4606      	mov	r6, r0
   11dda:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   11ddc:	f242 002f 	movw	r0, #8239	; 0x202f
   11de0:	2100      	movs	r1, #0
   11de2:	aa05      	add	r2, sp, #20
   11de4:	f7ff ff80 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   11de8:	4604      	mov	r4, r0
   11dea:	b160      	cbz	r0, 11e06 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   11dec:	4b0b      	ldr	r3, [pc, #44]	; (11e1c <hci_le_read_max_data_len+0x48>)
   11dee:	2201      	movs	r2, #1
   11df0:	9302      	str	r3, [sp, #8]
   11df2:	2300      	movs	r3, #0
   11df4:	490a      	ldr	r1, [pc, #40]	; (11e20 <hci_le_read_max_data_len+0x4c>)
   11df6:	4618      	mov	r0, r3
   11df8:	e9cd 3300 	strd	r3, r3, [sp]
   11dfc:	f014 f9e9 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   11e00:	4620      	mov	r0, r4
   11e02:	b006      	add	sp, #24
   11e04:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   11e06:	9805      	ldr	r0, [sp, #20]
   11e08:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   11e0a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11e0e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   11e10:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   11e14:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   11e16:	f007 fb35 	bl	19484 <net_buf_unref>
	return 0;
   11e1a:	e7f1      	b.n	11e00 <hci_le_read_max_data_len+0x2c>
   11e1c:	0002dc66 	.word	0x0002dc66
   11e20:	0002a990 	.word	0x0002a990

00011e24 <bt_hci_le_rand>:
{
   11e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11e26:	4b14      	ldr	r3, [pc, #80]	; (11e78 <bt_hci_le_rand+0x54>)
{
   11e28:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11e2a:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   11e2e:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11e30:	2b00      	cmp	r3, #0
   11e32:	da1d      	bge.n	11e70 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   11e34:	b914      	cbnz	r4, 11e3c <bt_hci_le_rand+0x18>
	return 0;
   11e36:	4620      	mov	r0, r4
}
   11e38:	b003      	add	sp, #12
   11e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   11e3c:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11e3e:	f04f 0100 	mov.w	r1, #0
   11e42:	f242 0018 	movw	r0, #8216	; 0x2018
   11e46:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   11e48:	4626      	mov	r6, r4
   11e4a:	bf28      	it	cs
   11e4c:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11e4e:	f7ff ff4b 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
   11e52:	2800      	cmp	r0, #0
   11e54:	d1f0      	bne.n	11e38 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   11e56:	9f01      	ldr	r7, [sp, #4]
   11e58:	4632      	mov	r2, r6
   11e5a:	68f9      	ldr	r1, [r7, #12]
   11e5c:	4628      	mov	r0, r5
   11e5e:	3101      	adds	r1, #1
   11e60:	f017 fd9f 	bl	299a2 <memcpy>
		net_buf_unref(rsp);
   11e64:	4638      	mov	r0, r7
   11e66:	f007 fb0d 	bl	19484 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   11e6a:	4435      	add	r5, r6
		len -= count;
   11e6c:	1ba4      	subs	r4, r4, r6
   11e6e:	e7e1      	b.n	11e34 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   11e70:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11e74:	e7e0      	b.n	11e38 <bt_hci_le_rand+0x14>
   11e76:	bf00      	nop
   11e78:	20008000 	.word	0x20008000

00011e7c <bt_hci_le_enh_conn_complete>:
{
   11e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11e80:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   11e84:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   11e86:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   11e8a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   11e8e:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   11e90:	4a9f      	ldr	r2, [pc, #636]	; (12110 <bt_hci_le_enh_conn_complete+0x294>)
   11e92:	b29b      	uxth	r3, r3
   11e94:	8811      	ldrh	r1, [r2, #0]
{
   11e96:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   11e98:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   11e9a:	bf04      	itt	eq
   11e9c:	8017      	strheq	r7, [r2, #0]
			return true;
   11e9e:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   11ea0:	f000 fe96 	bl	12bd0 <bt_id_pending_keys_update>
	if (evt->status) {
   11ea4:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11ea6:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   11eaa:	b37e      	cbz	r6, 11f0c <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11eac:	2e3c      	cmp	r6, #60	; 0x3c
   11eae:	d121      	bne.n	11ef4 <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11eb0:	f001 fada 	bl	13468 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11eb4:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11eb8:	3010      	adds	r0, #16
   11eba:	f014 f999 	bl	261f0 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11ebe:	2000      	movs	r0, #0
   11ec0:	f7ff fb02 	bl	114c8 <find_pending_connect.part.0>
		if (!conn) {
   11ec4:	4604      	mov	r4, r0
   11ec6:	b958      	cbnz	r0, 11ee0 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   11ec8:	4b92      	ldr	r3, [pc, #584]	; (12114 <bt_hci_le_enh_conn_complete+0x298>)
   11eca:	2201      	movs	r2, #1
   11ecc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11ed0:	4991      	ldr	r1, [pc, #580]	; (12118 <bt_hci_le_enh_conn_complete+0x29c>)
   11ed2:	4603      	mov	r3, r0
   11ed4:	9000      	str	r0, [sp, #0]
   11ed6:	f014 f97c 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   11eda:	b00a      	add	sp, #40	; 0x28
   11edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   11ee0:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11ee2:	2100      	movs	r1, #0
   11ee4:	f002 f9ec 	bl	142c0 <bt_conn_set_state>
		bt_conn_unref(conn);
   11ee8:	4620      	mov	r0, r4
}
   11eea:	b00a      	add	sp, #40	; 0x28
   11eec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   11ef0:	f002 b9ae 	b.w	14250 <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   11ef4:	4b89      	ldr	r3, [pc, #548]	; (1211c <bt_hci_le_enh_conn_complete+0x2a0>)
   11ef6:	2202      	movs	r2, #2
   11ef8:	9302      	str	r3, [sp, #8]
   11efa:	2300      	movs	r3, #0
   11efc:	4986      	ldr	r1, [pc, #536]	; (12118 <bt_hci_le_enh_conn_complete+0x29c>)
   11efe:	4618      	mov	r0, r3
   11f00:	e9cd 3300 	strd	r3, r3, [sp]
   11f04:	9603      	str	r6, [sp, #12]
   11f06:	f014 f964 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		return;
   11f0a:	e7e6      	b.n	11eda <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   11f0c:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   11f0e:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   11f12:	3b02      	subs	r3, #2
   11f14:	2b01      	cmp	r3, #1
   11f16:	d827      	bhi.n	11f68 <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   11f18:	4651      	mov	r1, sl
   11f1a:	a808      	add	r0, sp, #32
   11f1c:	f014 f952 	bl	261c4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11f20:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11f24:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11f28:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11f2a:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11f2e:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11f32:	f014 f942 	bl	261ba <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   11f36:	2301      	movs	r3, #1
   11f38:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11f3c:	78eb      	ldrb	r3, [r5, #3]
   11f3e:	2b01      	cmp	r3, #1
   11f40:	d025      	beq.n	11f8e <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   11f42:	4650      	mov	r0, sl
   11f44:	f7ff f98c 	bl	11260 <bt_addr_le_str>
   11f48:	4b75      	ldr	r3, [pc, #468]	; (12120 <bt_hci_le_enh_conn_complete+0x2a4>)
   11f4a:	9003      	str	r0, [sp, #12]
   11f4c:	9302      	str	r3, [sp, #8]
   11f4e:	2300      	movs	r3, #0
   11f50:	2201      	movs	r2, #1
   11f52:	4618      	mov	r0, r3
   11f54:	e9cd 3300 	strd	r3, r3, [sp]
   11f58:	496f      	ldr	r1, [pc, #444]	; (12118 <bt_hci_le_enh_conn_complete+0x29c>)
   11f5a:	f014 f93a 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   11f5e:	211f      	movs	r1, #31
   11f60:	4648      	mov	r0, r9
   11f62:	f014 f95d 	bl	26220 <bt_hci_disconnect>
		return;
   11f66:	e7b8      	b.n	11eda <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11f68:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   11f6a:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11f6c:	2b01      	cmp	r3, #1
   11f6e:	bf04      	itt	eq
   11f70:	4b6c      	ldreq	r3, [pc, #432]	; (12124 <bt_hci_le_enh_conn_complete+0x2a8>)
   11f72:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   11f76:	4630      	mov	r0, r6
   11f78:	f014 fa7f 	bl	2647a <bt_lookup_id_addr>
   11f7c:	4601      	mov	r1, r0
   11f7e:	a808      	add	r0, sp, #32
   11f80:	f014 f920 	bl	261c4 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   11f84:	4651      	mov	r1, sl
   11f86:	a806      	add	r0, sp, #24
   11f88:	f014 f91c 	bl	261c4 <bt_addr_le_copy>
   11f8c:	e7d6      	b.n	11f3c <bt_hci_le_enh_conn_complete+0xc0>
   11f8e:	a808      	add	r0, sp, #32
   11f90:	f7ff fa9a 	bl	114c8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11f94:	78eb      	ldrb	r3, [r5, #3]
   11f96:	4604      	mov	r4, r0
   11f98:	2b01      	cmp	r3, #1
   11f9a:	d10a      	bne.n	11fb2 <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11f9c:	f001 fa64 	bl	13468 <bt_le_adv_lookup_legacy>
   11fa0:	4606      	mov	r6, r0
   11fa2:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11fa6:	3010      	adds	r0, #16
   11fa8:	f014 f922 	bl	261f0 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   11fac:	4630      	mov	r0, r6
   11fae:	f014 fb92 	bl	266d6 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   11fb2:	2c00      	cmp	r4, #0
   11fb4:	d0c5      	beq.n	11f42 <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   11fb6:	4620      	mov	r0, r4
	conn->err = 0U;
   11fb8:	2200      	movs	r2, #0
	conn->handle = handle;
   11fba:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   11fbe:	a908      	add	r1, sp, #32
   11fc0:	f014 f900 	bl	261c4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   11fc4:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   11fc8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   11fcc:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   11fd0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11fd4:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   11fd8:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   11fdc:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   11fde:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11fe0:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   11fe2:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11fe4:	d115      	bne.n	12012 <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   11fe6:	a906      	add	r1, sp, #24
   11fe8:	f104 0097 	add.w	r0, r4, #151	; 0x97
   11fec:	f014 f8ea 	bl	261c4 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11ff0:	f001 fa3a 	bl	13468 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   11ff4:	7a21      	ldrb	r1, [r4, #8]
   11ff6:	4a4b      	ldr	r2, [pc, #300]	; (12124 <bt_hci_le_enh_conn_complete+0x2a8>)
   11ff8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   11ffc:	4411      	add	r1, r2
   11ffe:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12002:	f014 f8df 	bl	261c4 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   12006:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1200a:	065d      	lsls	r5, r3, #25
   1200c:	d501      	bpl.n	12012 <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   1200e:	f001 fbef 	bl	137f0 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12012:	2107      	movs	r1, #7
   12014:	4620      	mov	r0, r4
   12016:	f002 f953 	bl	142c0 <bt_conn_set_state>
	if (is_disconnected) {
   1201a:	b11f      	cbz	r7, 12024 <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1201c:	2101      	movs	r1, #1
   1201e:	4620      	mov	r0, r4
   12020:	f002 f94e 	bl	142c0 <bt_conn_set_state>
	bt_conn_connected(conn);
   12024:	4620      	mov	r0, r4
   12026:	f014 fc07 	bl	26838 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1202a:	7b63      	ldrb	r3, [r4, #13]
   1202c:	2b07      	cmp	r3, #7
   1202e:	d167      	bne.n	12100 <bt_hci_le_enh_conn_complete+0x284>
   12030:	1d23      	adds	r3, r4, #4
   12032:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12036:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1203a:	4e3a      	ldr	r6, [pc, #232]	; (12124 <bt_hci_le_enh_conn_complete+0x2a8>)
   1203c:	d125      	bne.n	1208a <bt_hci_le_enh_conn_complete+0x20e>
   1203e:	78e3      	ldrb	r3, [r4, #3]
   12040:	b11b      	cbz	r3, 1204a <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12042:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   12046:	0718      	lsls	r0, r3, #28
   12048:	d51f      	bpl.n	1208a <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1204a:	2102      	movs	r1, #2
   1204c:	f242 0016 	movw	r0, #8214	; 0x2016
   12050:	f7ff fdfc 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   12054:	4605      	mov	r5, r0
   12056:	2800      	cmp	r0, #0
   12058:	d056      	beq.n	12108 <bt_hci_le_enh_conn_complete+0x28c>
   1205a:	2102      	movs	r1, #2
   1205c:	300c      	adds	r0, #12
   1205e:	f007 fb33 	bl	196c8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12062:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12064:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   12066:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12068:	4629      	mov	r1, r5
   1206a:	f242 0016 	movw	r0, #8214	; 0x2016
   1206e:	f7ff fe3b 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
   12072:	b150      	cbz	r0, 1208a <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   12074:	4b2c      	ldr	r3, [pc, #176]	; (12128 <bt_hci_le_enh_conn_complete+0x2ac>)
   12076:	9003      	str	r0, [sp, #12]
   12078:	9302      	str	r3, [sp, #8]
   1207a:	2300      	movs	r3, #0
   1207c:	2201      	movs	r2, #1
   1207e:	4618      	mov	r0, r3
   12080:	e9cd 3300 	strd	r3, r3, [sp]
   12084:	4924      	ldr	r1, [pc, #144]	; (12118 <bt_hci_le_enh_conn_complete+0x29c>)
   12086:	f014 f8a4 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1208a:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   1208e:	07d9      	lsls	r1, r3, #31
   12090:	d513      	bpl.n	120ba <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12092:	2500      	movs	r5, #0
   12094:	2302      	movs	r3, #2
   12096:	4629      	mov	r1, r5
   12098:	461a      	mov	r2, r3
   1209a:	4620      	mov	r0, r4
   1209c:	9500      	str	r5, [sp, #0]
   1209e:	f014 f8f8 	bl	26292 <bt_le_set_phy>
		if (err) {
   120a2:	b150      	cbz	r0, 120ba <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   120a4:	4b21      	ldr	r3, [pc, #132]	; (1212c <bt_hci_le_enh_conn_complete+0x2b0>)
   120a6:	9003      	str	r0, [sp, #12]
   120a8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   120ac:	2201      	movs	r2, #1
   120ae:	462b      	mov	r3, r5
   120b0:	4628      	mov	r0, r5
   120b2:	4919      	ldr	r1, [pc, #100]	; (12118 <bt_hci_le_enh_conn_complete+0x29c>)
   120b4:	9500      	str	r5, [sp, #0]
   120b6:	f014 f88c 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   120ba:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   120be:	069a      	lsls	r2, r3, #26
   120c0:	d51e      	bpl.n	12100 <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   120c2:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   120c6:	689b      	ldr	r3, [r3, #8]
   120c8:	079b      	lsls	r3, r3, #30
   120ca:	d519      	bpl.n	12100 <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   120cc:	f10d 0116 	add.w	r1, sp, #22
   120d0:	a805      	add	r0, sp, #20
   120d2:	f7ff fe7f 	bl	11dd4 <hci_le_read_max_data_len>
			if (!err) {
   120d6:	4605      	mov	r5, r0
   120d8:	b990      	cbnz	r0, 12100 <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   120da:	4620      	mov	r0, r4
   120dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   120e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   120e4:	f014 f8b7 	bl	26256 <bt_le_set_data_len>
				if (err) {
   120e8:	b150      	cbz	r0, 12100 <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   120ea:	4b11      	ldr	r3, [pc, #68]	; (12130 <bt_hci_le_enh_conn_complete+0x2b4>)
   120ec:	9003      	str	r0, [sp, #12]
   120ee:	e9cd 5301 	strd	r5, r3, [sp, #4]
   120f2:	2201      	movs	r2, #1
   120f4:	462b      	mov	r3, r5
   120f6:	4628      	mov	r0, r5
   120f8:	4907      	ldr	r1, [pc, #28]	; (12118 <bt_hci_le_enh_conn_complete+0x29c>)
   120fa:	9500      	str	r5, [sp, #0]
   120fc:	f014 f869 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   12100:	4620      	mov	r0, r4
   12102:	f002 f8a5 	bl	14250 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12106:	e6e8      	b.n	11eda <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   12108:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1210c:	e7b2      	b.n	12074 <bt_hci_le_enh_conn_complete+0x1f8>
   1210e:	bf00      	nop
   12110:	2002158e 	.word	0x2002158e
   12114:	0002dc86 	.word	0x0002dc86
   12118:	0002a990 	.word	0x0002a990
   1211c:	0002dca7 	.word	0x0002dca7
   12120:	0002dcc0 	.word	0x0002dcc0
   12124:	20008000 	.word	0x20008000
   12128:	0002dcdc 	.word	0x0002dcdc
   1212c:	0002dcfd 	.word	0x0002dcfd
   12130:	0002dd14 	.word	0x0002dd14

00012134 <le_legacy_conn_complete>:
{
   12134:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   12136:	68c1      	ldr	r1, [r0, #12]
{
   12138:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   1213a:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1213c:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   1213e:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   12142:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12146:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   12148:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1214c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12150:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   12154:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   12158:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1215c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12160:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   12164:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12168:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1216c:	7b4b      	ldrb	r3, [r1, #13]
   1216e:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12172:	f014 f827 	bl	261c4 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   12176:	4907      	ldr	r1, [pc, #28]	; (12194 <le_legacy_conn_complete+0x60>)
   12178:	f10d 000b 	add.w	r0, sp, #11
   1217c:	f014 f81d 	bl	261ba <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12180:	f10d 0011 	add.w	r0, sp, #17
   12184:	f014 f819 	bl	261ba <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   12188:	4668      	mov	r0, sp
   1218a:	f7ff fe77 	bl	11e7c <bt_hci_le_enh_conn_complete>
}
   1218e:	b009      	add	sp, #36	; 0x24
   12190:	f85d fb04 	ldr.w	pc, [sp], #4
   12194:	0002d8f9 	.word	0x0002d8f9

00012198 <bt_security_err_get>:
	switch (hci_err) {
   12198:	2829      	cmp	r0, #41	; 0x29
   1219a:	bf9a      	itte	ls
   1219c:	4b01      	ldrls	r3, [pc, #4]	; (121a4 <bt_security_err_get+0xc>)
   1219e:	5c18      	ldrbls	r0, [r3, r0]
{
   121a0:	2009      	movhi	r0, #9
}
   121a2:	4770      	bx	lr
   121a4:	0002dfb6 	.word	0x0002dfb6

000121a8 <hci_encrypt_key_refresh_complete>:
{
   121a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   121aa:	68c3      	ldr	r3, [r0, #12]
{
   121ac:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   121ae:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   121b2:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   121b4:	4630      	mov	r0, r6
   121b6:	f002 f87b 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   121ba:	4604      	mov	r4, r0
   121bc:	b958      	cbnz	r0, 121d6 <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   121be:	4b1e      	ldr	r3, [pc, #120]	; (12238 <hci_encrypt_key_refresh_complete+0x90>)
   121c0:	2201      	movs	r2, #1
   121c2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   121c6:	491d      	ldr	r1, [pc, #116]	; (1223c <hci_encrypt_key_refresh_complete+0x94>)
   121c8:	4603      	mov	r3, r0
   121ca:	9603      	str	r6, [sp, #12]
   121cc:	9000      	str	r0, [sp, #0]
   121ce:	f014 f800 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   121d2:	b005      	add	sp, #20
   121d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   121d6:	b16d      	cbz	r5, 121f4 <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   121d8:	4628      	mov	r0, r5
   121da:	f7ff ffdd 	bl	12198 <bt_security_err_get>
   121de:	4629      	mov	r1, r5
   121e0:	4602      	mov	r2, r0
   121e2:	4620      	mov	r0, r4
   121e4:	f002 faa4 	bl	14730 <bt_conn_security_changed>
	bt_conn_unref(conn);
   121e8:	4620      	mov	r0, r4
}
   121ea:	b005      	add	sp, #20
   121ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   121f0:	f002 b82e 	b.w	14250 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   121f4:	7887      	ldrb	r7, [r0, #2]
   121f6:	2f01      	cmp	r7, #1
   121f8:	d1ee      	bne.n	121d8 <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   121fa:	f006 fc2b 	bl	18a54 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   121fe:	4620      	mov	r0, r4
   12200:	f013 ffb7 	bl	26172 <update_sec_level>
   12204:	4606      	mov	r6, r0
   12206:	2800      	cmp	r0, #0
   12208:	d1e6      	bne.n	121d8 <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1220a:	2005      	movs	r0, #5
   1220c:	f7ff ffc4 	bl	12198 <bt_security_err_get>
   12210:	2105      	movs	r1, #5
   12212:	4602      	mov	r2, r0
   12214:	4620      	mov	r0, r4
   12216:	f002 fa8b 	bl	14730 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1221a:	4b09      	ldr	r3, [pc, #36]	; (12240 <hci_encrypt_key_refresh_complete+0x98>)
   1221c:	4630      	mov	r0, r6
   1221e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12222:	463a      	mov	r2, r7
   12224:	4633      	mov	r3, r6
   12226:	4905      	ldr	r1, [pc, #20]	; (1223c <hci_encrypt_key_refresh_complete+0x94>)
   12228:	9600      	str	r6, [sp, #0]
   1222a:	f013 ffd2 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1222e:	2105      	movs	r1, #5
   12230:	4620      	mov	r0, r4
   12232:	f014 fb0a 	bl	2684a <bt_conn_disconnect>
   12236:	e7d7      	b.n	121e8 <hci_encrypt_key_refresh_complete+0x40>
   12238:	0002da50 	.word	0x0002da50
   1223c:	0002a990 	.word	0x0002a990
   12240:	0002dd30 	.word	0x0002dd30

00012244 <hci_encrypt_change>:
{
   12244:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   12246:	68c6      	ldr	r6, [r0, #12]
{
   12248:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1224a:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   1224e:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   12250:	4638      	mov	r0, r7
   12252:	f002 f82d 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   12256:	4604      	mov	r4, r0
   12258:	b958      	cbnz	r0, 12272 <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1225a:	4b23      	ldr	r3, [pc, #140]	; (122e8 <hci_encrypt_change+0xa4>)
   1225c:	2201      	movs	r2, #1
   1225e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12262:	4922      	ldr	r1, [pc, #136]	; (122ec <hci_encrypt_change+0xa8>)
   12264:	4603      	mov	r3, r0
   12266:	9703      	str	r7, [sp, #12]
   12268:	9000      	str	r0, [sp, #0]
   1226a:	f013 ffb2 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   1226e:	b005      	add	sp, #20
   12270:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12272:	b16d      	cbz	r5, 12290 <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   12274:	4628      	mov	r0, r5
   12276:	f7ff ff8f 	bl	12198 <bt_security_err_get>
   1227a:	4629      	mov	r1, r5
   1227c:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1227e:	4620      	mov	r0, r4
   12280:	f002 fa56 	bl	14730 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12284:	4620      	mov	r0, r4
}
   12286:	b005      	add	sp, #20
   12288:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1228c:	f001 bfe0 	b.w	14250 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   12290:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   12292:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   12294:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   12296:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   12298:	d005      	beq.n	122a6 <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1229a:	2000      	movs	r0, #0
   1229c:	f7ff ff7c 	bl	12198 <bt_security_err_get>
   122a0:	2100      	movs	r1, #0
   122a2:	4602      	mov	r2, r0
   122a4:	e7eb      	b.n	1227e <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   122a6:	b10b      	cbz	r3, 122ac <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   122a8:	f006 fbd4 	bl	18a54 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   122ac:	4620      	mov	r0, r4
   122ae:	f013 ff60 	bl	26172 <update_sec_level>
   122b2:	4605      	mov	r5, r0
   122b4:	2800      	cmp	r0, #0
   122b6:	d1f0      	bne.n	1229a <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   122b8:	2005      	movs	r0, #5
   122ba:	f7ff ff6d 	bl	12198 <bt_security_err_get>
   122be:	2105      	movs	r1, #5
   122c0:	4602      	mov	r2, r0
   122c2:	4620      	mov	r0, r4
   122c4:	f002 fa34 	bl	14730 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   122c8:	4b09      	ldr	r3, [pc, #36]	; (122f0 <hci_encrypt_change+0xac>)
   122ca:	4628      	mov	r0, r5
   122cc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   122d0:	2201      	movs	r2, #1
   122d2:	462b      	mov	r3, r5
   122d4:	4905      	ldr	r1, [pc, #20]	; (122ec <hci_encrypt_change+0xa8>)
   122d6:	9500      	str	r5, [sp, #0]
   122d8:	f013 ff7b 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   122dc:	2105      	movs	r1, #5
   122de:	4620      	mov	r0, r4
   122e0:	f014 fab3 	bl	2684a <bt_conn_disconnect>
   122e4:	e7ce      	b.n	12284 <hci_encrypt_change+0x40>
   122e6:	bf00      	nop
   122e8:	0002da50 	.word	0x0002da50
   122ec:	0002a990 	.word	0x0002a990
   122f0:	0002dd30 	.word	0x0002dd30

000122f4 <bt_send>:
	return bt_dev.drv->send(buf);
   122f4:	4b02      	ldr	r3, [pc, #8]	; (12300 <bt_send+0xc>)
   122f6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   122fa:	695b      	ldr	r3, [r3, #20]
   122fc:	4718      	bx	r3
   122fe:	bf00      	nop
   12300:	20008000 	.word	0x20008000

00012304 <bt_hci_cmd_send>:
{
   12304:	b530      	push	{r4, r5, lr}
   12306:	4605      	mov	r5, r0
	if (!buf) {
   12308:	460c      	mov	r4, r1
{
   1230a:	b085      	sub	sp, #20
	if (!buf) {
   1230c:	b919      	cbnz	r1, 12316 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   1230e:	f7ff fc9d 	bl	11c4c <bt_hci_cmd_create>
		if (!buf) {
   12312:	4604      	mov	r4, r0
   12314:	b1f8      	cbz	r0, 12356 <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12316:	f640 4335 	movw	r3, #3125	; 0xc35
   1231a:	429d      	cmp	r5, r3
   1231c:	d115      	bne.n	1234a <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   1231e:	4620      	mov	r0, r4
   12320:	f7ff ffe8 	bl	122f4 <bt_send>
		if (err) {
   12324:	4605      	mov	r5, r0
   12326:	b1a0      	cbz	r0, 12352 <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   12328:	4b0c      	ldr	r3, [pc, #48]	; (1235c <bt_hci_cmd_send+0x58>)
   1232a:	9003      	str	r0, [sp, #12]
   1232c:	9302      	str	r3, [sp, #8]
   1232e:	2300      	movs	r3, #0
   12330:	2201      	movs	r2, #1
   12332:	4618      	mov	r0, r3
   12334:	e9cd 3300 	strd	r3, r3, [sp]
   12338:	4909      	ldr	r1, [pc, #36]	; (12360 <bt_hci_cmd_send+0x5c>)
   1233a:	f013 ff4a 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   1233e:	4620      	mov	r0, r4
   12340:	f007 f8a0 	bl	19484 <net_buf_unref>
}
   12344:	4628      	mov	r0, r5
   12346:	b005      	add	sp, #20
   12348:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1234a:	4621      	mov	r1, r4
   1234c:	4805      	ldr	r0, [pc, #20]	; (12364 <bt_hci_cmd_send+0x60>)
   1234e:	f007 f873 	bl	19438 <net_buf_put>
	return 0;
   12352:	2500      	movs	r5, #0
   12354:	e7f6      	b.n	12344 <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   12356:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1235a:	e7f3      	b.n	12344 <bt_hci_cmd_send+0x40>
   1235c:	0002dd56 	.word	0x0002dd56
   12360:	0002a990 	.word	0x0002a990
   12364:	20008144 	.word	0x20008144

00012368 <bt_hci_host_num_completed_packets>:
{
   12368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1236a:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   1236c:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   1236e:	7e46      	ldrb	r6, [r0, #25]
{
   12370:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12372:	7a80      	ldrb	r0, [r0, #10]
   12374:	f006 fe4c 	bl	19010 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   12378:	4621      	mov	r1, r4
   1237a:	f017 f954 	bl	29626 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1237e:	4b2a      	ldr	r3, [pc, #168]	; (12428 <bt_hci_host_num_completed_packets+0xc0>)
   12380:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   12384:	069b      	lsls	r3, r3, #26
   12386:	d50e      	bpl.n	123a6 <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   12388:	4630      	mov	r0, r6
   1238a:	f002 fc2f 	bl	14bec <bt_conn_lookup_index>
	if (!conn) {
   1238e:	4604      	mov	r4, r0
   12390:	b958      	cbnz	r0, 123aa <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   12392:	4b26      	ldr	r3, [pc, #152]	; (1242c <bt_hci_host_num_completed_packets+0xc4>)
   12394:	2202      	movs	r2, #2
   12396:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1239a:	4925      	ldr	r1, [pc, #148]	; (12430 <bt_hci_host_num_completed_packets+0xc8>)
   1239c:	4603      	mov	r3, r0
   1239e:	9603      	str	r6, [sp, #12]
   123a0:	9000      	str	r0, [sp, #0]
   123a2:	f013 ff16 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   123a6:	b005      	add	sp, #20
   123a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   123aa:	7b43      	ldrb	r3, [r0, #13]
   123ac:	3b07      	subs	r3, #7
   123ae:	2b01      	cmp	r3, #1
   123b0:	d90f      	bls.n	123d2 <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   123b2:	4b20      	ldr	r3, [pc, #128]	; (12434 <bt_hci_host_num_completed_packets+0xcc>)
   123b4:	2202      	movs	r2, #2
   123b6:	9302      	str	r3, [sp, #8]
   123b8:	2300      	movs	r3, #0
   123ba:	491d      	ldr	r1, [pc, #116]	; (12430 <bt_hci_host_num_completed_packets+0xc8>)
   123bc:	4618      	mov	r0, r3
   123be:	e9cd 3300 	strd	r3, r3, [sp]
   123c2:	f013 ff06 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   123c6:	4620      	mov	r0, r4
}
   123c8:	b005      	add	sp, #20
   123ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   123ce:	f001 bf3f 	b.w	14250 <bt_conn_unref>
	bt_conn_unref(conn);
   123d2:	f001 ff3d 	bl	14250 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   123d6:	2105      	movs	r1, #5
   123d8:	f640 4035 	movw	r0, #3125	; 0xc35
   123dc:	f7ff fc36 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   123e0:	4604      	mov	r4, r0
   123e2:	b948      	cbnz	r0, 123f8 <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   123e4:	4b14      	ldr	r3, [pc, #80]	; (12438 <bt_hci_host_num_completed_packets+0xd0>)
   123e6:	2201      	movs	r2, #1
   123e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   123ec:	4910      	ldr	r1, [pc, #64]	; (12430 <bt_hci_host_num_completed_packets+0xc8>)
   123ee:	4603      	mov	r3, r0
   123f0:	9000      	str	r0, [sp, #0]
   123f2:	f013 feee 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		return;
   123f6:	e7d6      	b.n	123a6 <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   123f8:	f100 070c 	add.w	r7, r0, #12
   123fc:	2101      	movs	r1, #1
   123fe:	4638      	mov	r0, r7
   12400:	f007 f962 	bl	196c8 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   12404:	2601      	movs	r6, #1
   12406:	2104      	movs	r1, #4
   12408:	7006      	strb	r6, [r0, #0]
   1240a:	4638      	mov	r0, r7
   1240c:	f007 f95c 	bl	196c8 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   12410:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   12412:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   12414:	7086      	strb	r6, [r0, #2]
   12416:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   12418:	4621      	mov	r1, r4
   1241a:	f640 4035 	movw	r0, #3125	; 0xc35
}
   1241e:	b005      	add	sp, #20
   12420:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   12424:	f7ff bf6e 	b.w	12304 <bt_hci_cmd_send>
   12428:	20008000 	.word	0x20008000
   1242c:	0002dd78 	.word	0x0002dd78
   12430:	0002a990 	.word	0x0002a990
   12434:	0002dda1 	.word	0x0002dda1
   12438:	0002ddcd 	.word	0x0002ddcd

0001243c <le_ltk_request>:
{
   1243c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1243e:	68c6      	ldr	r6, [r0, #12]
{
   12440:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   12442:	8837      	ldrh	r7, [r6, #0]
   12444:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   12446:	4628      	mov	r0, r5
   12448:	f001 ff32 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   1244c:	4604      	mov	r4, r0
   1244e:	b958      	cbnz	r0, 12468 <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12450:	4b2a      	ldr	r3, [pc, #168]	; (124fc <le_ltk_request+0xc0>)
   12452:	2201      	movs	r2, #1
   12454:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12458:	4929      	ldr	r1, [pc, #164]	; (12500 <le_ltk_request+0xc4>)
   1245a:	4603      	mov	r3, r0
   1245c:	9503      	str	r5, [sp, #12]
   1245e:	9000      	str	r0, [sp, #0]
   12460:	f013 feb7 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   12464:	b009      	add	sp, #36	; 0x24
   12466:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   12468:	ad04      	add	r5, sp, #16
   1246a:	f8d6 2002 	ldr.w	r2, [r6, #2]
   1246e:	f8d6 3006 	ldr.w	r3, [r6, #6]
   12472:	9501      	str	r5, [sp, #4]
   12474:	8971      	ldrh	r1, [r6, #10]
   12476:	9100      	str	r1, [sp, #0]
   12478:	f015 fb50 	bl	27b1c <bt_smp_request_ltk>
   1247c:	b360      	cbz	r0, 124d8 <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1247e:	2112      	movs	r1, #18
   12480:	f242 001a 	movw	r0, #8218	; 0x201a
   12484:	f7ff fbe2 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   12488:	4606      	mov	r6, r0
   1248a:	b968      	cbnz	r0, 124a8 <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   1248c:	4b1d      	ldr	r3, [pc, #116]	; (12504 <le_ltk_request+0xc8>)
   1248e:	2201      	movs	r2, #1
   12490:	9302      	str	r3, [sp, #8]
   12492:	2300      	movs	r3, #0
   12494:	491a      	ldr	r1, [pc, #104]	; (12500 <le_ltk_request+0xc4>)
   12496:	4618      	mov	r0, r3
   12498:	e9cd 3300 	strd	r3, r3, [sp]
   1249c:	f013 fe99 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   124a0:	4620      	mov	r0, r4
   124a2:	f001 fed5 	bl	14250 <bt_conn_unref>
   124a6:	e7dd      	b.n	12464 <le_ltk_request+0x28>
   124a8:	2112      	movs	r1, #18
   124aa:	300c      	adds	r0, #12
   124ac:	f007 f90c 	bl	196c8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   124b0:	4602      	mov	r2, r0
   124b2:	462b      	mov	r3, r5
   124b4:	f822 7b02 	strh.w	r7, [r2], #2
   124b8:	af08      	add	r7, sp, #32
   124ba:	461d      	mov	r5, r3
   124bc:	cd03      	ldmia	r5!, {r0, r1}
   124be:	42bd      	cmp	r5, r7
   124c0:	6010      	str	r0, [r2, #0]
   124c2:	6051      	str	r1, [r2, #4]
   124c4:	462b      	mov	r3, r5
   124c6:	f102 0208 	add.w	r2, r2, #8
   124ca:	d1f6      	bne.n	124ba <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   124cc:	4631      	mov	r1, r6
   124ce:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   124d2:	f7ff ff17 	bl	12304 <bt_hci_cmd_send>
   124d6:	e7e3      	b.n	124a0 <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   124d8:	2102      	movs	r1, #2
   124da:	f242 001b 	movw	r0, #8219	; 0x201b
   124de:	f7ff fbb5 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   124e2:	4605      	mov	r5, r0
   124e4:	2800      	cmp	r0, #0
   124e6:	d0d1      	beq.n	1248c <le_ltk_request+0x50>
   124e8:	2102      	movs	r1, #2
   124ea:	300c      	adds	r0, #12
   124ec:	f007 f8ec 	bl	196c8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   124f0:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   124f2:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   124f4:	f242 001b 	movw	r0, #8219	; 0x201b
   124f8:	e7eb      	b.n	124d2 <le_ltk_request+0x96>
   124fa:	bf00      	nop
   124fc:	0002da2c 	.word	0x0002da2c
   12500:	0002a990 	.word	0x0002a990
   12504:	0002ddf0 	.word	0x0002ddf0

00012508 <le_conn_param_neg_reply>:
{
   12508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1250a:	4606      	mov	r6, r0
   1250c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1250e:	f242 0021 	movw	r0, #8225	; 0x2021
   12512:	2103      	movs	r1, #3
   12514:	f7ff fb9a 	bl	11c4c <bt_hci_cmd_create>
   12518:	4604      	mov	r4, r0
	if (!buf) {
   1251a:	b950      	cbnz	r0, 12532 <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   1251c:	4b0c      	ldr	r3, [pc, #48]	; (12550 <le_conn_param_neg_reply+0x48>)
   1251e:	2201      	movs	r2, #1
   12520:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12524:	490b      	ldr	r1, [pc, #44]	; (12554 <le_conn_param_neg_reply+0x4c>)
   12526:	4603      	mov	r3, r0
   12528:	9000      	str	r0, [sp, #0]
   1252a:	f013 fe52 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
}
   1252e:	b004      	add	sp, #16
   12530:	bd70      	pop	{r4, r5, r6, pc}
   12532:	2103      	movs	r1, #3
   12534:	300c      	adds	r0, #12
   12536:	f007 f8c7 	bl	196c8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1253a:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1253c:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1253e:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   12540:	f242 0021 	movw	r0, #8225	; 0x2021
}
   12544:	b004      	add	sp, #16
   12546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1254a:	f7ff bedb 	b.w	12304 <bt_hci_cmd_send>
   1254e:	bf00      	nop
   12550:	0002de07 	.word	0x0002de07
   12554:	0002a990 	.word	0x0002a990

00012558 <le_conn_param_req>:
{
   12558:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1255a:	68c3      	ldr	r3, [r0, #12]
{
   1255c:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1255e:	78d9      	ldrb	r1, [r3, #3]
   12560:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   12562:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12564:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12568:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1256c:	7959      	ldrb	r1, [r3, #5]
   1256e:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   12570:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12572:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12576:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   1257a:	799a      	ldrb	r2, [r3, #6]
   1257c:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   1257e:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   12580:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12584:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12588:	7a1a      	ldrb	r2, [r3, #8]
   1258a:	7a5b      	ldrb	r3, [r3, #9]
   1258c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   12590:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   12594:	f001 fe8c 	bl	142b0 <bt_conn_lookup_handle>
	if (!conn) {
   12598:	4604      	mov	r4, r0
   1259a:	b978      	cbnz	r0, 125bc <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1259c:	4b1e      	ldr	r3, [pc, #120]	; (12618 <le_conn_param_req+0xc0>)
   1259e:	491f      	ldr	r1, [pc, #124]	; (1261c <le_conn_param_req+0xc4>)
   125a0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   125a4:	9000      	str	r0, [sp, #0]
   125a6:	4603      	mov	r3, r0
   125a8:	2201      	movs	r2, #1
   125aa:	9503      	str	r5, [sp, #12]
   125ac:	f013 fe11 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   125b0:	2102      	movs	r1, #2
   125b2:	4628      	mov	r0, r5
   125b4:	f7ff ffa8 	bl	12508 <le_conn_param_neg_reply>
}
   125b8:	b006      	add	sp, #24
   125ba:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   125bc:	a904      	add	r1, sp, #16
   125be:	f002 f81f 	bl	14600 <le_param_req>
   125c2:	b938      	cbnz	r0, 125d4 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   125c4:	211e      	movs	r1, #30
   125c6:	4628      	mov	r0, r5
   125c8:	f7ff ff9e 	bl	12508 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   125cc:	4620      	mov	r0, r4
   125ce:	f001 fe3f 	bl	14250 <bt_conn_unref>
   125d2:	e7f1      	b.n	125b8 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   125d4:	210e      	movs	r1, #14
   125d6:	f242 0020 	movw	r0, #8224	; 0x2020
   125da:	f7ff fb37 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   125de:	4605      	mov	r5, r0
   125e0:	2800      	cmp	r0, #0
   125e2:	d0f3      	beq.n	125cc <le_conn_param_req+0x74>
   125e4:	210e      	movs	r1, #14
   125e6:	300c      	adds	r0, #12
   125e8:	f007 f86e 	bl	196c8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   125ec:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   125ee:	8006      	strh	r6, [r0, #0]
   125f0:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   125f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   125f8:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   125fa:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   125fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   12600:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   12602:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   12606:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   12608:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1260c:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1260e:	f242 0020 	movw	r0, #8224	; 0x2020
   12612:	f7ff fe77 	bl	12304 <bt_hci_cmd_send>
   12616:	e7d9      	b.n	125cc <le_conn_param_req+0x74>
   12618:	0002da2c 	.word	0x0002da2c
   1261c:	0002a990 	.word	0x0002a990

00012620 <hci_tx_thread>:
{
   12620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   12624:	f8df 8148 	ldr.w	r8, [pc, #328]	; 12770 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   12628:	f8df 9148 	ldr.w	r9, [pc, #328]	; 12774 <hci_tx_thread+0x154>
{
   1262c:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   1262e:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   12632:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12636:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   12638:	f36f 3394 	bfc	r3, #14, #7
   1263c:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12640:	f001 fda6 	bl	14190 <bt_conn_prepare_events>
   12644:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   12646:	f04f 32ff 	mov.w	r2, #4294967295
   1264a:	f04f 33ff 	mov.w	r3, #4294967295
   1264e:	4629      	mov	r1, r5
   12650:	4847      	ldr	r0, [pc, #284]	; (12770 <hci_tx_thread+0x150>)
   12652:	f010 fae7 	bl	22c24 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   12656:	b160      	cbz	r0, 12672 <hci_tx_thread+0x52>
   12658:	f640 13e6 	movw	r3, #2534	; 0x9e6
   1265c:	464a      	mov	r2, r9
   1265e:	4946      	ldr	r1, [pc, #280]	; (12778 <hci_tx_thread+0x158>)
   12660:	4846      	ldr	r0, [pc, #280]	; (1277c <hci_tx_thread+0x15c>)
   12662:	f012 fc38 	bl	24ed6 <assert_print>
   12666:	4040      	eors	r0, r0
   12668:	f380 8811 	msr	BASEPRI, r0
   1266c:	f04f 0003 	mov.w	r0, #3
   12670:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   12672:	f04f 0a00 	mov.w	sl, #0
{
   12676:	4e3e      	ldr	r6, [pc, #248]	; (12770 <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   12678:	b915      	cbnz	r5, 12680 <hci_tx_thread+0x60>
	z_impl_k_yield();
   1267a:	f00f fa1b 	bl	21ab4 <z_impl_k_yield>
	while (1) {
   1267e:	e7d8      	b.n	12632 <hci_tx_thread+0x12>
		switch (ev->state) {
   12680:	68f3      	ldr	r3, [r6, #12]
   12682:	f3c3 3386 	ubfx	r3, r3, #14, #7
   12686:	2b01      	cmp	r3, #1
   12688:	d95a      	bls.n	12740 <hci_tx_thread+0x120>
   1268a:	2b04      	cmp	r3, #4
   1268c:	d162      	bne.n	12754 <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1268e:	7b33      	ldrb	r3, [r6, #12]
   12690:	2b00      	cmp	r3, #0
   12692:	d158      	bne.n	12746 <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12694:	2200      	movs	r2, #0
   12696:	2300      	movs	r3, #0
   12698:	4839      	ldr	r0, [pc, #228]	; (12780 <hci_tx_thread+0x160>)
   1269a:	f015 fbed 	bl	27e78 <net_buf_get>
	BT_ASSERT(buf);
   1269e:	4604      	mov	r4, r0
   126a0:	b960      	cbnz	r0, 126bc <hci_tx_thread+0x9c>
   126a2:	f44f 6318 	mov.w	r3, #2432	; 0x980
   126a6:	464a      	mov	r2, r9
   126a8:	4936      	ldr	r1, [pc, #216]	; (12784 <hci_tx_thread+0x164>)
   126aa:	4834      	ldr	r0, [pc, #208]	; (1277c <hci_tx_thread+0x15c>)
   126ac:	f012 fc13 	bl	24ed6 <assert_print>
   126b0:	4040      	eors	r0, r0
   126b2:	f380 8811 	msr	BASEPRI, r0
   126b6:	f04f 0003 	mov.w	r0, #3
   126ba:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   126bc:	4f32      	ldr	r7, [pc, #200]	; (12788 <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   126be:	f04f 33ff 	mov.w	r3, #4294967295
   126c2:	f04f 32ff 	mov.w	r2, #4294967295
   126c6:	4831      	ldr	r0, [pc, #196]	; (1278c <hci_tx_thread+0x16c>)
   126c8:	f00d fc7e 	bl	1ffc8 <z_impl_k_sem_take>
   126cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   126d0:	b183      	cbz	r3, 126f4 <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   126d2:	4b2f      	ldr	r3, [pc, #188]	; (12790 <hci_tx_thread+0x170>)
   126d4:	2201      	movs	r2, #1
   126d6:	9302      	str	r3, [sp, #8]
   126d8:	2300      	movs	r3, #0
   126da:	492e      	ldr	r1, [pc, #184]	; (12794 <hci_tx_thread+0x174>)
   126dc:	4618      	mov	r0, r3
   126de:	e9cd 3300 	strd	r3, r3, [sp]
   126e2:	f013 fd76 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   126e6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   126ea:	f006 fecb 	bl	19484 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   126ee:	2300      	movs	r3, #0
   126f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   126f4:	4620      	mov	r0, r4
   126f6:	f006 ff09 	bl	1950c <net_buf_ref>
   126fa:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   126fe:	4620      	mov	r0, r4
   12700:	f7ff fdf8 	bl	122f4 <bt_send>
	if (err) {
   12704:	b1e0      	cbz	r0, 12740 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   12706:	4b24      	ldr	r3, [pc, #144]	; (12798 <hci_tx_thread+0x178>)
   12708:	9003      	str	r0, [sp, #12]
   1270a:	9302      	str	r3, [sp, #8]
   1270c:	2300      	movs	r3, #0
   1270e:	2201      	movs	r2, #1
   12710:	4618      	mov	r0, r3
   12712:	e9cd 3300 	strd	r3, r3, [sp]
   12716:	491f      	ldr	r1, [pc, #124]	; (12794 <hci_tx_thread+0x174>)
   12718:	f013 fd5b 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   1271c:	481b      	ldr	r0, [pc, #108]	; (1278c <hci_tx_thread+0x16c>)
   1271e:	f00d fc0f 	bl	1ff40 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12722:	4620      	mov	r0, r4
   12724:	f006 fc7c 	bl	19020 <net_buf_id>
   12728:	220c      	movs	r2, #12
   1272a:	4b1c      	ldr	r3, [pc, #112]	; (1279c <hci_tx_thread+0x17c>)
   1272c:	211f      	movs	r1, #31
   1272e:	fb02 3000 	mla	r0, r2, r0, r3
   12732:	4622      	mov	r2, r4
   12734:	8840      	ldrh	r0, [r0, #2]
   12736:	f7ff f8d3 	bl	118e0 <hci_cmd_done>
		net_buf_unref(buf);
   1273a:	4620      	mov	r0, r4
   1273c:	f006 fea2 	bl	19484 <net_buf_unref>
	for (; count; ev++, count--) {
   12740:	3614      	adds	r6, #20
   12742:	3d01      	subs	r5, #1
   12744:	e798      	b.n	12678 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12746:	2b01      	cmp	r3, #1
   12748:	d1fa      	bne.n	12740 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   1274a:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1274c:	3838      	subs	r0, #56	; 0x38
   1274e:	f002 f9b7 	bl	14ac0 <bt_conn_process_tx>
   12752:	e7f5      	b.n	12740 <hci_tx_thread+0x120>
		switch (ev->state) {
   12754:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   12756:	4b12      	ldr	r3, [pc, #72]	; (127a0 <hci_tx_thread+0x180>)
   12758:	2202      	movs	r2, #2
   1275a:	e9cd a301 	strd	sl, r3, [sp, #4]
   1275e:	2300      	movs	r3, #0
   12760:	490c      	ldr	r1, [pc, #48]	; (12794 <hci_tx_thread+0x174>)
   12762:	4618      	mov	r0, r3
   12764:	f8cd a000 	str.w	sl, [sp]
   12768:	f013 fd33 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
   1276c:	e7e8      	b.n	12740 <hci_tx_thread+0x120>
   1276e:	bf00      	nop
   12770:	2000846c 	.word	0x2000846c
   12774:	0002daba 	.word	0x0002daba
   12778:	0002c922 	.word	0x0002c922
   1277c:	0002b939 	.word	0x0002b939
   12780:	20008144 	.word	0x20008144
   12784:	0002f5f4 	.word	0x0002f5f4
   12788:	20008000 	.word	0x20008000
   1278c:	20008120 	.word	0x20008120
   12790:	0002de21 	.word	0x0002de21
   12794:	0002a990 	.word	0x0002a990
   12798:	0002dd56 	.word	0x0002dd56
   1279c:	20020fd8 	.word	0x20020fd8
   127a0:	0002de3c 	.word	0x0002de3c

000127a4 <hci_event_prio>:
{
   127a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127a8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   127aa:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   127ae:	4630      	mov	r0, r6
   127b0:	f015 fb73 	bl	27e9a <net_buf_simple_headroom>
	state->len = buf->len;
   127b4:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   127b8:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   127ba:	f1b8 0f01 	cmp.w	r8, #1
   127be:	d80c      	bhi.n	127da <hci_event_prio+0x36>
   127c0:	f640 537b 	movw	r3, #3451	; 0xd7b
   127c4:	4a1b      	ldr	r2, [pc, #108]	; (12834 <hci_event_prio+0x90>)
   127c6:	491c      	ldr	r1, [pc, #112]	; (12838 <hci_event_prio+0x94>)
   127c8:	481c      	ldr	r0, [pc, #112]	; (1283c <hci_event_prio+0x98>)
   127ca:	f012 fb84 	bl	24ed6 <assert_print>
   127ce:	4040      	eors	r0, r0
   127d0:	f380 8811 	msr	BASEPRI, r0
   127d4:	f04f 0003 	mov.w	r0, #3
   127d8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   127da:	4630      	mov	r0, r6
   127dc:	2102      	movs	r1, #2
   127de:	f006 ff55 	bl	1968c <net_buf_simple_pull_mem>
   127e2:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   127e4:	7800      	ldrb	r0, [r0, #0]
   127e6:	f013 fcb2 	bl	2614e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   127ea:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   127ec:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   127ee:	d40c      	bmi.n	1280a <hci_event_prio+0x66>
   127f0:	f640 537f 	movw	r3, #3455	; 0xd7f
   127f4:	4a0f      	ldr	r2, [pc, #60]	; (12834 <hci_event_prio+0x90>)
   127f6:	4912      	ldr	r1, [pc, #72]	; (12840 <hci_event_prio+0x9c>)
   127f8:	4810      	ldr	r0, [pc, #64]	; (1283c <hci_event_prio+0x98>)
   127fa:	f012 fb6c 	bl	24ed6 <assert_print>
   127fe:	4040      	eors	r0, r0
   12800:	f380 8811 	msr	BASEPRI, r0
   12804:	f04f 0003 	mov.w	r0, #3
   12808:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1280a:	2305      	movs	r3, #5
   1280c:	4621      	mov	r1, r4
   1280e:	4a0d      	ldr	r2, [pc, #52]	; (12844 <hci_event_prio+0xa0>)
   12810:	7838      	ldrb	r0, [r7, #0]
   12812:	f7fe ff23 	bl	1165c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12816:	07b3      	lsls	r3, r6, #30
   12818:	d507      	bpl.n	1282a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1281a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1281c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   12820:	fa13 f585 	uxtah	r5, r3, r5
   12824:	60e5      	str	r5, [r4, #12]
}
   12826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1282a:	4620      	mov	r0, r4
}
   1282c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12830:	f006 be28 	b.w	19484 <net_buf_unref>
   12834:	0002daba 	.word	0x0002daba
   12838:	0002daee 	.word	0x0002daee
   1283c:	0002b939 	.word	0x0002b939
   12840:	0002de5d 	.word	0x0002de5d
   12844:	0002b204 	.word	0x0002b204

00012848 <bt_recv>:
{
   12848:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1284a:	7e03      	ldrb	r3, [r0, #24]
   1284c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   1284e:	2b01      	cmp	r3, #1
{
   12850:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   12852:	d006      	beq.n	12862 <bt_recv+0x1a>
   12854:	2b03      	cmp	r3, #3
   12856:	d112      	bne.n	1287e <bt_recv+0x36>
			rx_queue_put(buf);
   12858:	f7fe fe62 	bl	11520 <rx_queue_put>
		return 0;
   1285c:	2000      	movs	r0, #0
}
   1285e:	b005      	add	sp, #20
   12860:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12862:	68c3      	ldr	r3, [r0, #12]
   12864:	7818      	ldrb	r0, [r3, #0]
   12866:	f013 fc72 	bl	2614e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1286a:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1286c:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1286e:	d502      	bpl.n	12876 <bt_recv+0x2e>
			hci_event_prio(buf);
   12870:	4620      	mov	r0, r4
   12872:	f7ff ff97 	bl	127a4 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12876:	07ab      	lsls	r3, r5, #30
   12878:	d5f0      	bpl.n	1285c <bt_recv+0x14>
			rx_queue_put(buf);
   1287a:	4620      	mov	r0, r4
   1287c:	e7ec      	b.n	12858 <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   1287e:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   12880:	4b07      	ldr	r3, [pc, #28]	; (128a0 <bt_recv+0x58>)
   12882:	2201      	movs	r2, #1
   12884:	9302      	str	r3, [sp, #8]
   12886:	2300      	movs	r3, #0
   12888:	4906      	ldr	r1, [pc, #24]	; (128a4 <bt_recv+0x5c>)
   1288a:	4618      	mov	r0, r3
   1288c:	e9cd 3300 	strd	r3, r3, [sp]
   12890:	f013 fc9f 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   12894:	4620      	mov	r0, r4
   12896:	f006 fdf5 	bl	19484 <net_buf_unref>
		return -EINVAL;
   1289a:	f06f 0015 	mvn.w	r0, #21
   1289e:	e7de      	b.n	1285e <bt_recv+0x16>
   128a0:	0002de76 	.word	0x0002de76
   128a4:	0002a990 	.word	0x0002a990

000128a8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   128a8:	4a08      	ldr	r2, [pc, #32]	; (128cc <bt_hci_driver_register+0x24>)
{
   128aa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   128ac:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   128b0:	b930      	cbnz	r0, 128c0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   128b2:	68d9      	ldr	r1, [r3, #12]
   128b4:	b139      	cbz	r1, 128c6 <bt_hci_driver_register+0x1e>
   128b6:	6959      	ldr	r1, [r3, #20]
   128b8:	b129      	cbz	r1, 128c6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   128ba:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   128be:	4770      	bx	lr
		return -EALREADY;
   128c0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   128c4:	4770      	bx	lr
		return -EINVAL;
   128c6:	f06f 0015 	mvn.w	r0, #21
}
   128ca:	4770      	bx	lr
   128cc:	20008000 	.word	0x20008000

000128d0 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   128d0:	2104      	movs	r1, #4
   128d2:	4801      	ldr	r0, [pc, #4]	; (128d8 <bt_finalize_init+0x8>)
   128d4:	f013 bc66 	b.w	261a4 <atomic_or>
   128d8:	200080cc 	.word	0x200080cc

000128dc <init_work>:
{
   128dc:	b510      	push	{r4, lr}
	err = bt_init();
   128de:	f7f6 fdaf 	bl	9440 <bt_init>
	if (ready_cb) {
   128e2:	4b03      	ldr	r3, [pc, #12]	; (128f0 <init_work+0x14>)
   128e4:	681b      	ldr	r3, [r3, #0]
   128e6:	b113      	cbz	r3, 128ee <init_work+0x12>
}
   128e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   128ec:	4718      	bx	r3
}
   128ee:	bd10      	pop	{r4, pc}
   128f0:	20021050 	.word	0x20021050

000128f4 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   128f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   128f6:	4e38      	ldr	r6, [pc, #224]	; (129d8 <bt_enable+0xe4>)
{
   128f8:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   128fa:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
{
   128fe:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   12900:	b96b      	cbnz	r3, 1291e <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   12902:	4a36      	ldr	r2, [pc, #216]	; (129dc <bt_enable+0xe8>)
   12904:	4618      	mov	r0, r3
   12906:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1290a:	4935      	ldr	r1, [pc, #212]	; (129e0 <bt_enable+0xec>)
   1290c:	2201      	movs	r2, #1
   1290e:	9300      	str	r3, [sp, #0]
   12910:	f013 fc5f 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   12914:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   12918:	4628      	mov	r0, r5
   1291a:	b009      	add	sp, #36	; 0x24
   1291c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1291e:	f06f 0102 	mvn.w	r1, #2
   12922:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   12926:	f013 fc63 	bl	261f0 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1292a:	2101      	movs	r1, #1
   1292c:	f013 fc3a 	bl	261a4 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12930:	ea10 0401 	ands.w	r4, r0, r1
   12934:	d14d      	bne.n	129d2 <bt_enable+0xde>
	ready_cb = cb;
   12936:	4b2b      	ldr	r3, [pc, #172]	; (129e4 <bt_enable+0xf0>)
   12938:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1293a:	460a      	mov	r2, r1
   1293c:	f506 7090 	add.w	r0, r6, #288	; 0x120
   12940:	f016 fe7b 	bl	2963a <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   12944:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   12948:	f016 fe55 	bl	295f6 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1294c:	2200      	movs	r2, #0
   1294e:	2300      	movs	r3, #0
   12950:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12954:	f06f 0308 	mvn.w	r3, #8
   12958:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1295c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12960:	e9cd 4400 	strd	r4, r4, [sp]
   12964:	4b20      	ldr	r3, [pc, #128]	; (129e8 <bt_enable+0xf4>)
   12966:	4921      	ldr	r1, [pc, #132]	; (129ec <bt_enable+0xf8>)
   12968:	9404      	str	r4, [sp, #16]
   1296a:	4821      	ldr	r0, [pc, #132]	; (129f0 <bt_enable+0xfc>)
   1296c:	f00c ff66 	bl	1f83c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12970:	4920      	ldr	r1, [pc, #128]	; (129f4 <bt_enable+0x100>)
   12972:	481f      	ldr	r0, [pc, #124]	; (129f0 <bt_enable+0xfc>)
   12974:	f016 fe16 	bl	295a4 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   12978:	481f      	ldr	r0, [pc, #124]	; (129f8 <bt_enable+0x104>)
   1297a:	f00d fe55 	bl	20628 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1297e:	f06f 0307 	mvn.w	r3, #7
   12982:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   12986:	491d      	ldr	r1, [pc, #116]	; (129fc <bt_enable+0x108>)
   12988:	481b      	ldr	r0, [pc, #108]	; (129f8 <bt_enable+0x104>)
   1298a:	9400      	str	r4, [sp, #0]
   1298c:	f00d fe66 	bl	2065c <k_work_queue_start>
   12990:	491b      	ldr	r1, [pc, #108]	; (12a00 <bt_enable+0x10c>)
   12992:	4819      	ldr	r0, [pc, #100]	; (129f8 <bt_enable+0x104>)
   12994:	f016 fe06 	bl	295a4 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   12998:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   1299c:	68db      	ldr	r3, [r3, #12]
   1299e:	4798      	blx	r3
	if (err) {
   129a0:	4605      	mov	r5, r0
   129a2:	b158      	cbz	r0, 129bc <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   129a4:	4b17      	ldr	r3, [pc, #92]	; (12a04 <bt_enable+0x110>)
   129a6:	9003      	str	r0, [sp, #12]
   129a8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   129ac:	2201      	movs	r2, #1
   129ae:	4623      	mov	r3, r4
   129b0:	4620      	mov	r0, r4
   129b2:	490b      	ldr	r1, [pc, #44]	; (129e0 <bt_enable+0xec>)
   129b4:	9400      	str	r4, [sp, #0]
   129b6:	f013 fc0c 	bl	261d2 <z_log_msg_runtime_create.constprop.0>
		return err;
   129ba:	e7ad      	b.n	12918 <bt_enable+0x24>
	if (!cb) {
   129bc:	b927      	cbnz	r7, 129c8 <bt_enable+0xd4>
}
   129be:	b009      	add	sp, #36	; 0x24
   129c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   129c4:	f7f6 bd3c 	b.w	9440 <bt_init>
	k_work_submit(&bt_dev.init);
   129c8:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   129cc:	f00d fe26 	bl	2061c <k_work_submit>
	return 0;
   129d0:	e7a2      	b.n	12918 <bt_enable+0x24>
		return -EALREADY;
   129d2:	f06f 0577 	mvn.w	r5, #119	; 0x77
   129d6:	e79f      	b.n	12918 <bt_enable+0x24>
   129d8:	20008000 	.word	0x20008000
   129dc:	0002df75 	.word	0x0002df75
   129e0:	0002a990 	.word	0x0002a990
   129e4:	20021050 	.word	0x20021050
   129e8:	00012621 	.word	0x00012621
   129ec:	20031ff0 	.word	0x20031ff0
   129f0:	20009630 	.word	0x20009630
   129f4:	0002df8e 	.word	0x0002df8e
   129f8:	200096b8 	.word	0x200096b8
   129fc:	200323f0 	.word	0x200323f0
   12a00:	0002df94 	.word	0x0002df94
   12a04:	0002df9a 	.word	0x0002df9a

00012a08 <bt_is_ready>:
   12a08:	4b02      	ldr	r3, [pc, #8]	; (12a14 <bt_is_ready+0xc>)
   12a0a:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   12a0e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   12a12:	4770      	bx	lr
   12a14:	200080cc 	.word	0x200080cc

00012a18 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   12a18:	4800      	ldr	r0, [pc, #0]	; (12a1c <bt_get_name+0x4>)
   12a1a:	4770      	bx	lr
   12a1c:	0002c246 	.word	0x0002c246

00012a20 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   12a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a22:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   12a24:	2500      	movs	r5, #0
   12a26:	4f09      	ldr	r7, [pc, #36]	; (12a4c <id_find+0x2c>)
   12a28:	79fb      	ldrb	r3, [r7, #7]
   12a2a:	b2ec      	uxtb	r4, r5
   12a2c:	42a3      	cmp	r3, r4
   12a2e:	d802      	bhi.n	12a36 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   12a30:	f06f 0001 	mvn.w	r0, #1
   12a34:	e009      	b.n	12a4a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   12a36:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   12a3a:	4630      	mov	r0, r6
   12a3c:	4439      	add	r1, r7
   12a3e:	f013 fc80 	bl	26342 <bt_addr_le_eq>
   12a42:	3501      	adds	r5, #1
   12a44:	2800      	cmp	r0, #0
   12a46:	d0ef      	beq.n	12a28 <id_find+0x8>
   12a48:	4620      	mov	r0, r4
}
   12a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a4c:	20008000 	.word	0x20008000

00012a50 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   12a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12a52:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   12a54:	460d      	mov	r5, r1
   12a56:	b171      	cbz	r1, 12a76 <id_create.constprop.0+0x26>
   12a58:	4628      	mov	r0, r5
   12a5a:	4912      	ldr	r1, [pc, #72]	; (12aa4 <id_create.constprop.0+0x54>)
   12a5c:	f013 fc71 	bl	26342 <bt_addr_le_eq>
   12a60:	b948      	cbnz	r0, 12a76 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   12a62:	4629      	mov	r1, r5
   12a64:	4810      	ldr	r0, [pc, #64]	; (12aa8 <id_create.constprop.0+0x58>)
   12a66:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   12a6a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12a6c:	f013 fc76 	bl	2635c <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   12a70:	2000      	movs	r0, #0
}
   12a72:	b003      	add	sp, #12
   12a74:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   12a76:	4668      	mov	r0, sp
   12a78:	f013 fb5b 	bl	26132 <bt_addr_le_create_static>
			if (err) {
   12a7c:	2800      	cmp	r0, #0
   12a7e:	d1f8      	bne.n	12a72 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   12a80:	4668      	mov	r0, sp
   12a82:	f7ff ffcd 	bl	12a20 <id_find>
   12a86:	2800      	cmp	r0, #0
   12a88:	daf5      	bge.n	12a76 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   12a8a:	4b07      	ldr	r3, [pc, #28]	; (12aa8 <id_create.constprop.0+0x58>)
   12a8c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   12a90:	4669      	mov	r1, sp
   12a92:	4418      	add	r0, r3
   12a94:	f013 fc62 	bl	2635c <bt_addr_le_copy>
		if (addr) {
   12a98:	2d00      	cmp	r5, #0
   12a9a:	d0e9      	beq.n	12a70 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12a9c:	4601      	mov	r1, r0
   12a9e:	4628      	mov	r0, r5
   12aa0:	e7e4      	b.n	12a6c <id_create.constprop.0+0x1c>
   12aa2:	bf00      	nop
   12aa4:	0002d8ec 	.word	0x0002d8ec
   12aa8:	20008000 	.word	0x20008000

00012aac <set_random_address>:
{
   12aac:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   12aae:	2206      	movs	r2, #6
   12ab0:	4911      	ldr	r1, [pc, #68]	; (12af8 <set_random_address+0x4c>)
   12ab2:	4605      	mov	r5, r0
   12ab4:	f016 ff65 	bl	29982 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   12ab8:	b1c8      	cbz	r0, 12aee <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   12aba:	2106      	movs	r1, #6
   12abc:	f242 0005 	movw	r0, #8197	; 0x2005
   12ac0:	f7ff f8c4 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   12ac4:	4604      	mov	r4, r0
   12ac6:	b1a0      	cbz	r0, 12af2 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12ac8:	2206      	movs	r2, #6
   12aca:	4629      	mov	r1, r5
   12acc:	300c      	adds	r0, #12
   12ace:	f015 f9f0 	bl	27eb2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   12ad2:	2200      	movs	r2, #0
   12ad4:	4621      	mov	r1, r4
   12ad6:	f242 0005 	movw	r0, #8197	; 0x2005
   12ada:	f7ff f905 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   12ade:	b938      	cbnz	r0, 12af0 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   12ae0:	4805      	ldr	r0, [pc, #20]	; (12af8 <set_random_address+0x4c>)
   12ae2:	4629      	mov	r1, r5
   12ae4:	f013 fc35 	bl	26352 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   12ae8:	2301      	movs	r3, #1
   12aea:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   12aee:	2000      	movs	r0, #0
}
   12af0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   12af2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12af6:	e7fb      	b.n	12af0 <set_random_address+0x44>
   12af8:	20008061 	.word	0x20008061

00012afc <find_rl_conflict>:
{
   12afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b00:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   12b02:	460c      	mov	r4, r1
{
   12b04:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   12b06:	b959      	cbnz	r1, 12b20 <find_rl_conflict+0x24>
   12b08:	492b      	ldr	r1, [pc, #172]	; (12bb8 <find_rl_conflict+0xbc>)
   12b0a:	f44f 7357 	mov.w	r3, #860	; 0x35c
   12b0e:	4a2b      	ldr	r2, [pc, #172]	; (12bbc <find_rl_conflict+0xc0>)
   12b10:	482b      	ldr	r0, [pc, #172]	; (12bc0 <find_rl_conflict+0xc4>)
   12b12:	f012 f9e0 	bl	24ed6 <assert_print>
   12b16:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   12b1a:	4828      	ldr	r0, [pc, #160]	; (12bbc <find_rl_conflict+0xc0>)
   12b1c:	f012 f9d4 	bl	24ec8 <assert_post_action>
   12b20:	6808      	ldr	r0, [r1, #0]
   12b22:	b948      	cbnz	r0, 12b38 <find_rl_conflict+0x3c>
   12b24:	4927      	ldr	r1, [pc, #156]	; (12bc4 <find_rl_conflict+0xc8>)
   12b26:	f240 335d 	movw	r3, #861	; 0x35d
   12b2a:	4a24      	ldr	r2, [pc, #144]	; (12bbc <find_rl_conflict+0xc0>)
   12b2c:	4824      	ldr	r0, [pc, #144]	; (12bc0 <find_rl_conflict+0xc4>)
   12b2e:	f012 f9d2 	bl	24ed6 <assert_print>
   12b32:	f240 315d 	movw	r1, #861	; 0x35d
   12b36:	e7f0      	b.n	12b1a <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   12b38:	b94d      	cbnz	r5, 12b4e <find_rl_conflict+0x52>
   12b3a:	4923      	ldr	r1, [pc, #140]	; (12bc8 <find_rl_conflict+0xcc>)
   12b3c:	f240 335e 	movw	r3, #862	; 0x35e
   12b40:	4a1e      	ldr	r2, [pc, #120]	; (12bbc <find_rl_conflict+0xc0>)
   12b42:	481f      	ldr	r0, [pc, #124]	; (12bc0 <find_rl_conflict+0xc4>)
   12b44:	f012 f9c7 	bl	24ed6 <assert_print>
   12b48:	f240 315e 	movw	r1, #862	; 0x35e
   12b4c:	e7e5      	b.n	12b1a <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   12b4e:	7a03      	ldrb	r3, [r0, #8]
   12b50:	075a      	lsls	r2, r3, #29
   12b52:	d509      	bpl.n	12b68 <find_rl_conflict+0x6c>
   12b54:	491d      	ldr	r1, [pc, #116]	; (12bcc <find_rl_conflict+0xd0>)
   12b56:	f44f 7358 	mov.w	r3, #864	; 0x360
   12b5a:	4a18      	ldr	r2, [pc, #96]	; (12bbc <find_rl_conflict+0xc0>)
   12b5c:	4818      	ldr	r0, [pc, #96]	; (12bc0 <find_rl_conflict+0xc4>)
   12b5e:	f012 f9ba 	bl	24ed6 <assert_print>
   12b62:	f44f 7158 	mov.w	r1, #864	; 0x360
   12b66:	e7d8      	b.n	12b1a <find_rl_conflict+0x1e>
	if (conflict->found) {
   12b68:	684f      	ldr	r7, [r1, #4]
   12b6a:	b9f7      	cbnz	r7, 12baa <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   12b6c:	7a2b      	ldrb	r3, [r5, #8]
   12b6e:	075b      	lsls	r3, r3, #29
   12b70:	d51b      	bpl.n	12baa <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   12b72:	1c69      	adds	r1, r5, #1
   12b74:	3001      	adds	r0, #1
   12b76:	f013 fbe4 	bl	26342 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   12b7a:	f8d4 8000 	ldr.w	r8, [r4]
   12b7e:	2216      	movs	r2, #22
   12b80:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   12b82:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   12b84:	4668      	mov	r0, sp
   12b86:	f016 ff46 	bl	29a16 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   12b8a:	2210      	movs	r2, #16
   12b8c:	4669      	mov	r1, sp
   12b8e:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   12b92:	f016 fef6 	bl	29982 <memcmp>
   12b96:	b158      	cbz	r0, 12bb0 <find_rl_conflict+0xb4>
   12b98:	6820      	ldr	r0, [r4, #0]
   12b9a:	2210      	movs	r2, #16
   12b9c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   12ba0:	302a      	adds	r0, #42	; 0x2a
   12ba2:	f016 feee 	bl	29982 <memcmp>
   12ba6:	b918      	cbnz	r0, 12bb0 <find_rl_conflict+0xb4>
		conflict->found = resident;
   12ba8:	6065      	str	r5, [r4, #4]
}
   12baa:	b006      	add	sp, #24
   12bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   12bb0:	2e00      	cmp	r6, #0
   12bb2:	d1f9      	bne.n	12ba8 <find_rl_conflict+0xac>
   12bb4:	e7f9      	b.n	12baa <find_rl_conflict+0xae>
   12bb6:	bf00      	nop
   12bb8:	0002e01a 	.word	0x0002e01a
   12bbc:	0002dfec 	.word	0x0002dfec
   12bc0:	0002b939 	.word	0x0002b939
   12bc4:	0002e032 	.word	0x0002e032
   12bc8:	0002e055 	.word	0x0002e055
   12bcc:	0002e06d 	.word	0x0002e06d

00012bd0 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12bd0:	4b08      	ldr	r3, [pc, #32]	; (12bf4 <bt_id_pending_keys_update+0x24>)
   12bd2:	e8d3 2fef 	ldaex	r2, [r3]
   12bd6:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   12bda:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12bde:	2800      	cmp	r0, #0
   12be0:	d1f7      	bne.n	12bd2 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   12be2:	0413      	lsls	r3, r2, #16
   12be4:	d504      	bpl.n	12bf0 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   12be6:	2200      	movs	r2, #0
   12be8:	2002      	movs	r0, #2
   12bea:	4903      	ldr	r1, [pc, #12]	; (12bf8 <bt_id_pending_keys_update+0x28>)
   12bec:	f006 b818 	b.w	18c20 <bt_keys_foreach_type>
}
   12bf0:	4770      	bx	lr
   12bf2:	bf00      	nop
   12bf4:	200080cc 	.word	0x200080cc
   12bf8:	000264d9 	.word	0x000264d9

00012bfc <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   12bfc:	2300      	movs	r3, #0
{
   12bfe:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   12c00:	4905      	ldr	r1, [pc, #20]	; (12c18 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   12c02:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   12c06:	466a      	mov	r2, sp
   12c08:	2002      	movs	r0, #2
   12c0a:	f006 f809 	bl	18c20 <bt_keys_foreach_type>
}
   12c0e:	9801      	ldr	r0, [sp, #4]
   12c10:	b003      	add	sp, #12
   12c12:	f85d fb04 	ldr.w	pc, [sp], #4
   12c16:	bf00      	nop
   12c18:	00012afd 	.word	0x00012afd

00012c1c <bt_id_add>:
{
   12c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   12c1e:	4605      	mov	r5, r0
{
   12c20:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   12c22:	b170      	cbz	r0, 12c42 <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   12c24:	4c59      	ldr	r4, [pc, #356]	; (12d8c <bt_id_add+0x170>)
   12c26:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   12c2a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12c2e:	b10a      	cbz	r2, 12c34 <bt_id_add+0x18>
   12c30:	429a      	cmp	r2, r3
   12c32:	d208      	bcs.n	12c46 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   12c34:	3301      	adds	r3, #1
   12c36:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   12c3a:	7a2b      	ldrb	r3, [r5, #8]
   12c3c:	f043 0304 	orr.w	r3, r3, #4
   12c40:	722b      	strb	r3, [r5, #8]
}
   12c42:	b007      	add	sp, #28
   12c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   12c46:	2100      	movs	r1, #0
   12c48:	2206      	movs	r2, #6
   12c4a:	4608      	mov	r0, r1
   12c4c:	f001 fe0c 	bl	14868 <bt_conn_lookup_state_le>
	if (conn) {
   12c50:	4606      	mov	r6, r0
   12c52:	b188      	cbz	r0, 12c78 <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12c54:	34cc      	adds	r4, #204	; 0xcc
   12c56:	e8d4 3fef 	ldaex	r3, [r4]
   12c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   12c5e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   12c62:	2a00      	cmp	r2, #0
   12c64:	d1f7      	bne.n	12c56 <bt_id_add+0x3a>
	keys->state |= flag;
   12c66:	7a2b      	ldrb	r3, [r5, #8]
   12c68:	f043 0301 	orr.w	r3, r3, #1
   12c6c:	722b      	strb	r3, [r5, #8]
}
   12c6e:	b007      	add	sp, #28
   12c70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   12c74:	f001 baec 	b.w	14250 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   12c78:	4601      	mov	r1, r0
   12c7a:	4845      	ldr	r0, [pc, #276]	; (12d90 <bt_id_add+0x174>)
   12c7c:	f000 fbee 	bl	1345c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   12c80:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12c84:	b163      	cbz	r3, 12ca0 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   12c86:	4630      	mov	r0, r6
   12c88:	f013 fbba 	bl	26400 <addr_res_enable>
		if (err) {
   12c8c:	b140      	cbz	r0, 12ca0 <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   12c8e:	4b41      	ldr	r3, [pc, #260]	; (12d94 <bt_id_add+0x178>)
   12c90:	2202      	movs	r2, #2
   12c92:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12c96:	4633      	mov	r3, r6
   12c98:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   12c9a:	4618      	mov	r0, r3
   12c9c:	493e      	ldr	r1, [pc, #248]	; (12d98 <bt_id_add+0x17c>)
   12c9e:	e054      	b.n	12d4a <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   12ca0:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   12ca4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   12ca8:	429a      	cmp	r2, r3
   12caa:	d12b      	bne.n	12d04 <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   12cac:	2600      	movs	r6, #0
   12cae:	4b3b      	ldr	r3, [pc, #236]	; (12d9c <bt_id_add+0x180>)
   12cb0:	2202      	movs	r2, #2
   12cb2:	4630      	mov	r0, r6
   12cb4:	4938      	ldr	r1, [pc, #224]	; (12d98 <bt_id_add+0x17c>)
   12cb6:	9302      	str	r3, [sp, #8]
   12cb8:	e9cd 6600 	strd	r6, r6, [sp]
   12cbc:	4633      	mov	r3, r6
   12cbe:	f013 fb90 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   12cc2:	4632      	mov	r2, r6
   12cc4:	4631      	mov	r1, r6
   12cc6:	f242 0029 	movw	r0, #8233	; 0x2029
   12cca:	f7ff f80d 	bl	11ce8 <bt_hci_cmd_send_sync>
		if (err) {
   12cce:	b130      	cbz	r0, 12cde <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   12cd0:	4b33      	ldr	r3, [pc, #204]	; (12da0 <bt_id_add+0x184>)
   12cd2:	9600      	str	r6, [sp, #0]
   12cd4:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12cd8:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   12cda:	2201      	movs	r2, #1
   12cdc:	e7dd      	b.n	12c9a <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   12cde:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12ce2:	3301      	adds	r3, #1
   12ce4:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   12ce8:	7a2b      	ldrb	r3, [r5, #8]
   12cea:	f043 0304 	orr.w	r3, r3, #4
   12cee:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   12cf0:	2001      	movs	r0, #1
   12cf2:	f013 fb85 	bl	26400 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12cf6:	2100      	movs	r1, #0
   12cf8:	482a      	ldr	r0, [pc, #168]	; (12da4 <bt_id_add+0x188>)
}
   12cfa:	b007      	add	sp, #28
   12cfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12d00:	f000 bbac 	b.w	1345c <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   12d04:	462a      	mov	r2, r5
   12d06:	1c6f      	adds	r7, r5, #1
   12d08:	4639      	mov	r1, r7
   12d0a:	f812 0b2a 	ldrb.w	r0, [r2], #42
   12d0e:	f013 fb2c 	bl	2636a <hci_id_add>
	if (err) {
   12d12:	4606      	mov	r6, r0
   12d14:	b128      	cbz	r0, 12d22 <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   12d16:	4b24      	ldr	r3, [pc, #144]	; (12da8 <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   12d18:	9302      	str	r3, [sp, #8]
   12d1a:	2300      	movs	r3, #0
   12d1c:	e9cd 3300 	strd	r3, r3, [sp]
   12d20:	e7db      	b.n	12cda <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   12d22:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12d26:	3301      	adds	r3, #1
   12d28:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   12d2c:	7a2b      	ldrb	r3, [r5, #8]
   12d2e:	f043 0304 	orr.w	r3, r3, #4
   12d32:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   12d34:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   12d38:	f013 0304 	ands.w	r3, r3, #4
   12d3c:	d108      	bne.n	12d50 <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   12d3e:	4a1b      	ldr	r2, [pc, #108]	; (12dac <bt_id_add+0x190>)
   12d40:	4915      	ldr	r1, [pc, #84]	; (12d98 <bt_id_add+0x17c>)
   12d42:	e9cd 3201 	strd	r3, r2, [sp, #4]
   12d46:	2202      	movs	r2, #2
   12d48:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   12d4a:	f013 fb4a 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
		goto done;
   12d4e:	e7cf      	b.n	12cf0 <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   12d50:	4639      	mov	r1, r7
   12d52:	a804      	add	r0, sp, #16
   12d54:	f013 fb02 	bl	2635c <bt_addr_le_copy>
	cp.mode = mode;
   12d58:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   12d5a:	2108      	movs	r1, #8
   12d5c:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   12d60:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   12d64:	f7fe ff72 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   12d68:	4604      	mov	r4, r0
   12d6a:	b160      	cbz	r0, 12d86 <bt_id_add+0x16a>
   12d6c:	2208      	movs	r2, #8
   12d6e:	a904      	add	r1, sp, #16
   12d70:	300c      	adds	r0, #12
   12d72:	f015 f89e 	bl	27eb2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   12d76:	4632      	mov	r2, r6
   12d78:	4621      	mov	r1, r4
   12d7a:	f242 004e 	movw	r0, #8270	; 0x204e
   12d7e:	f7fe ffb3 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   12d82:	2800      	cmp	r0, #0
   12d84:	d0b4      	beq.n	12cf0 <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   12d86:	4b0a      	ldr	r3, [pc, #40]	; (12db0 <bt_id_add+0x194>)
   12d88:	e7c6      	b.n	12d18 <bt_id_add+0xfc>
   12d8a:	bf00      	nop
   12d8c:	20008000 	.word	0x20008000
   12d90:	00026457 	.word	0x00026457
   12d94:	0002e0a2 	.word	0x0002e0a2
   12d98:	0002a9a8 	.word	0x0002a9a8
   12d9c:	0002e0c7 	.word	0x0002e0c7
   12da0:	0002e0f8 	.word	0x0002e0f8
   12da4:	00026431 	.word	0x00026431
   12da8:	0002e118 	.word	0x0002e118
   12dac:	0002e138 	.word	0x0002e138
   12db0:	0002e162 	.word	0x0002e162

00012db4 <bt_id_del>:
{
   12db4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   12db8:	4605      	mov	r5, r0
   12dba:	b3a8      	cbz	r0, 12e28 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   12dbc:	4c4c      	ldr	r4, [pc, #304]	; (12ef0 <bt_id_del+0x13c>)
   12dbe:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   12dc2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   12dc6:	b1da      	cbz	r2, 12e00 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   12dc8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   12dca:	4293      	cmp	r3, r2
   12dcc:	dc25      	bgt.n	12e1a <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   12dce:	2100      	movs	r1, #0
   12dd0:	2206      	movs	r2, #6
   12dd2:	4608      	mov	r0, r1
   12dd4:	f001 fd48 	bl	14868 <bt_conn_lookup_state_le>
	if (conn) {
   12dd8:	4606      	mov	r6, r0
   12dda:	b340      	cbz	r0, 12e2e <bt_id_del+0x7a>
   12ddc:	34cc      	adds	r4, #204	; 0xcc
   12dde:	e8d4 3fef 	ldaex	r3, [r4]
   12de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   12de6:	e8c4 3fe2 	stlex	r2, r3, [r4]
   12dea:	2a00      	cmp	r2, #0
   12dec:	d1f7      	bne.n	12dde <bt_id_del+0x2a>
	keys->state |= flag;
   12dee:	7a2b      	ldrb	r3, [r5, #8]
   12df0:	f043 0302 	orr.w	r3, r3, #2
   12df4:	722b      	strb	r3, [r5, #8]
}
   12df6:	b004      	add	sp, #16
   12df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   12dfc:	f001 ba28 	b.w	14250 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   12e00:	b95b      	cbnz	r3, 12e1a <bt_id_del+0x66>
   12e02:	493c      	ldr	r1, [pc, #240]	; (12ef4 <bt_id_del+0x140>)
   12e04:	483c      	ldr	r0, [pc, #240]	; (12ef8 <bt_id_del+0x144>)
   12e06:	f240 4323 	movw	r3, #1059	; 0x423
   12e0a:	4a3c      	ldr	r2, [pc, #240]	; (12efc <bt_id_del+0x148>)
   12e0c:	f012 f863 	bl	24ed6 <assert_print>
   12e10:	f240 4123 	movw	r1, #1059	; 0x423
   12e14:	4839      	ldr	r0, [pc, #228]	; (12efc <bt_id_del+0x148>)
   12e16:	f012 f857 	bl	24ec8 <assert_post_action>
			bt_dev.le.rl_entries--;
   12e1a:	3b01      	subs	r3, #1
   12e1c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   12e20:	7a2b      	ldrb	r3, [r5, #8]
   12e22:	f023 0304 	bic.w	r3, r3, #4
   12e26:	722b      	strb	r3, [r5, #8]
}
   12e28:	b004      	add	sp, #16
   12e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   12e2e:	4601      	mov	r1, r0
   12e30:	4833      	ldr	r0, [pc, #204]	; (12f00 <bt_id_del+0x14c>)
   12e32:	f000 fb13 	bl	1345c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   12e36:	4630      	mov	r0, r6
   12e38:	f013 fae2 	bl	26400 <addr_res_enable>
	if (err) {
   12e3c:	4607      	mov	r7, r0
   12e3e:	b1b8      	cbz	r0, 12e70 <bt_id_del+0xbc>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   12e40:	4b30      	ldr	r3, [pc, #192]	; (12f04 <bt_id_del+0x150>)
   12e42:	9003      	str	r0, [sp, #12]
   12e44:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12e48:	2201      	movs	r2, #1
   12e4a:	4633      	mov	r3, r6
   12e4c:	4630      	mov	r0, r6
   12e4e:	492e      	ldr	r1, [pc, #184]	; (12f08 <bt_id_del+0x154>)
   12e50:	9600      	str	r6, [sp, #0]
   12e52:	f013 fac6 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   12e56:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12e5a:	b113      	cbz	r3, 12e62 <bt_id_del+0xae>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   12e5c:	2001      	movs	r0, #1
   12e5e:	f013 facf 	bl	26400 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12e62:	2100      	movs	r1, #0
   12e64:	4829      	ldr	r0, [pc, #164]	; (12f0c <bt_id_del+0x158>)
}
   12e66:	b004      	add	sp, #16
   12e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12e6c:	f000 baf6 	b.w	1345c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   12e70:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12e74:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   12e78:	429a      	cmp	r2, r3
   12e7a:	d20c      	bcs.n	12e96 <bt_id_del+0xe2>
		bt_dev.le.rl_entries--;
   12e7c:	3b01      	subs	r3, #1
   12e7e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   12e82:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12e84:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   12e86:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12e8a:	2002      	movs	r0, #2
   12e8c:	4920      	ldr	r1, [pc, #128]	; (12f10 <bt_id_del+0x15c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   12e8e:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12e90:	f005 fec6 	bl	18c20 <bt_keys_foreach_type>
		goto done;
   12e94:	e7df      	b.n	12e56 <bt_id_del+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   12e96:	2107      	movs	r1, #7
   12e98:	f242 0028 	movw	r0, #8232	; 0x2028
   12e9c:	f7fe fed6 	bl	11c4c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   12ea0:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   12ea4:	4606      	mov	r6, r0
   12ea6:	b950      	cbnz	r0, 12ebe <bt_id_del+0x10a>
		LOG_ERR("Failed to remove IRK from controller");
   12ea8:	4b1a      	ldr	r3, [pc, #104]	; (12f14 <bt_id_del+0x160>)
   12eaa:	2201      	movs	r2, #1
   12eac:	9302      	str	r3, [sp, #8]
   12eae:	2300      	movs	r3, #0
   12eb0:	4915      	ldr	r1, [pc, #84]	; (12f08 <bt_id_del+0x154>)
   12eb2:	4618      	mov	r0, r3
   12eb4:	e9cd 3300 	strd	r3, r3, [sp]
   12eb8:	f013 fa93 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
		goto done;
   12ebc:	e7cb      	b.n	12e56 <bt_id_del+0xa2>
	return net_buf_simple_add(&buf->b, len);
   12ebe:	2107      	movs	r1, #7
   12ec0:	300c      	adds	r0, #12
   12ec2:	f006 fc01 	bl	196c8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   12ec6:	4641      	mov	r1, r8
   12ec8:	f013 fa48 	bl	2635c <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   12ecc:	463a      	mov	r2, r7
   12ece:	4631      	mov	r1, r6
   12ed0:	f242 0028 	movw	r0, #8232	; 0x2028
   12ed4:	f7fe ff08 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   12ed8:	2800      	cmp	r0, #0
   12eda:	d1e5      	bne.n	12ea8 <bt_id_del+0xf4>
	bt_dev.le.rl_entries--;
   12edc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12ee0:	3b01      	subs	r3, #1
   12ee2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   12ee6:	7a2b      	ldrb	r3, [r5, #8]
   12ee8:	f023 0304 	bic.w	r3, r3, #4
   12eec:	722b      	strb	r3, [r5, #8]
   12eee:	e7b2      	b.n	12e56 <bt_id_del+0xa2>
   12ef0:	20008000 	.word	0x20008000
   12ef4:	0002e17d 	.word	0x0002e17d
   12ef8:	0002b939 	.word	0x0002b939
   12efc:	0002dfec 	.word	0x0002dfec
   12f00:	00026457 	.word	0x00026457
   12f04:	0002e196 	.word	0x0002e196
   12f08:	0002a9a8 	.word	0x0002a9a8
   12f0c:	00026431 	.word	0x00026431
   12f10:	000263cd 	.word	0x000263cd
   12f14:	0002e1c3 	.word	0x0002e1c3

00012f18 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   12f18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12f1a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   12f1c:	4604      	mov	r4, r0
   12f1e:	b920      	cbnz	r0, 12f2a <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   12f20:	b31d      	cbz	r5, 12f6a <bt_id_create+0x52>
			return -EINVAL;
   12f22:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   12f26:	b004      	add	sp, #16
   12f28:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   12f2a:	4921      	ldr	r1, [pc, #132]	; (12fb0 <bt_id_create+0x98>)
   12f2c:	f013 fa09 	bl	26342 <bt_addr_le_eq>
   12f30:	2800      	cmp	r0, #0
   12f32:	d1f5      	bne.n	12f20 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   12f34:	7823      	ldrb	r3, [r4, #0]
   12f36:	2b01      	cmp	r3, #1
   12f38:	d104      	bne.n	12f44 <bt_id_create+0x2c>
   12f3a:	79a3      	ldrb	r3, [r4, #6]
   12f3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12f40:	2bc0      	cmp	r3, #192	; 0xc0
   12f42:	d00a      	beq.n	12f5a <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   12f44:	4b1b      	ldr	r3, [pc, #108]	; (12fb4 <bt_id_create+0x9c>)
   12f46:	2201      	movs	r2, #1
   12f48:	9302      	str	r3, [sp, #8]
   12f4a:	2300      	movs	r3, #0
   12f4c:	491a      	ldr	r1, [pc, #104]	; (12fb8 <bt_id_create+0xa0>)
   12f4e:	4618      	mov	r0, r3
   12f50:	e9cd 3300 	strd	r3, r3, [sp]
   12f54:	f013 fa45 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   12f58:	e7e3      	b.n	12f22 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   12f5a:	4620      	mov	r0, r4
   12f5c:	f7ff fd60 	bl	12a20 <id_find>
   12f60:	2800      	cmp	r0, #0
   12f62:	dbdd      	blt.n	12f20 <bt_id_create+0x8>
			return -EALREADY;
   12f64:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12f68:	e7dd      	b.n	12f26 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   12f6a:	4d14      	ldr	r5, [pc, #80]	; (12fbc <bt_id_create+0xa4>)
   12f6c:	79eb      	ldrb	r3, [r5, #7]
   12f6e:	2b01      	cmp	r3, #1
   12f70:	d01a      	beq.n	12fa8 <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12f72:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   12f76:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12f7a:	07db      	lsls	r3, r3, #31
   12f7c:	d50b      	bpl.n	12f96 <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   12f7e:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   12f80:	4621      	mov	r1, r4
   12f82:	4630      	mov	r0, r6
   12f84:	f7ff fd64 	bl	12a50 <id_create.constprop.0>
	if (err) {
   12f88:	2800      	cmp	r0, #0
   12f8a:	d1cc      	bne.n	12f26 <bt_id_create+0xe>
		bt_dev.id_count++;
   12f8c:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   12f8e:	4630      	mov	r0, r6
		bt_dev.id_count++;
   12f90:	3301      	adds	r3, #1
   12f92:	71eb      	strb	r3, [r5, #7]
	return new_id;
   12f94:	e7c7      	b.n	12f26 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   12f96:	2c00      	cmp	r4, #0
   12f98:	d0c3      	beq.n	12f22 <bt_id_create+0xa>
   12f9a:	4620      	mov	r0, r4
   12f9c:	4904      	ldr	r1, [pc, #16]	; (12fb0 <bt_id_create+0x98>)
   12f9e:	f013 f9d0 	bl	26342 <bt_addr_le_eq>
   12fa2:	2800      	cmp	r0, #0
   12fa4:	d0eb      	beq.n	12f7e <bt_id_create+0x66>
   12fa6:	e7bc      	b.n	12f22 <bt_id_create+0xa>
		return -ENOMEM;
   12fa8:	f06f 000b 	mvn.w	r0, #11
   12fac:	e7bb      	b.n	12f26 <bt_id_create+0xe>
   12fae:	bf00      	nop
   12fb0:	0002d8ec 	.word	0x0002d8ec
   12fb4:	0002e1e8 	.word	0x0002e1e8
   12fb8:	0002a9a8 	.word	0x0002a9a8
   12fbc:	20008000 	.word	0x20008000

00012fc0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   12fc0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   12fc2:	4604      	mov	r4, r0
{
   12fc4:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   12fc6:	b958      	cbnz	r0, 12fe0 <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   12fc8:	4b1d      	ldr	r3, [pc, #116]	; (13040 <bt_id_read_public_addr+0x80>)
   12fca:	2202      	movs	r2, #2
   12fcc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12fd0:	4603      	mov	r3, r0
   12fd2:	491c      	ldr	r1, [pc, #112]	; (13044 <bt_id_read_public_addr+0x84>)
   12fd4:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   12fd6:	f013 fa04 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
		return 0U;
   12fda:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   12fdc:	b006      	add	sp, #24
   12fde:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   12fe0:	2100      	movs	r1, #0
   12fe2:	f241 0009 	movw	r0, #4105	; 0x1009
   12fe6:	aa05      	add	r2, sp, #20
   12fe8:	f7fe fe7e 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   12fec:	4606      	mov	r6, r0
   12fee:	b140      	cbz	r0, 13002 <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   12ff0:	4b15      	ldr	r3, [pc, #84]	; (13048 <bt_id_read_public_addr+0x88>)
   12ff2:	2202      	movs	r2, #2
   12ff4:	9302      	str	r3, [sp, #8]
   12ff6:	2300      	movs	r3, #0
   12ff8:	4912      	ldr	r1, [pc, #72]	; (13044 <bt_id_read_public_addr+0x84>)
   12ffa:	4618      	mov	r0, r3
   12ffc:	e9cd 3300 	strd	r3, r3, [sp]
   13000:	e7e9      	b.n	12fd6 <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   13002:	9b05      	ldr	r3, [sp, #20]
   13004:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13006:	68dd      	ldr	r5, [r3, #12]
   13008:	4910      	ldr	r1, [pc, #64]	; (1304c <bt_id_read_public_addr+0x8c>)
   1300a:	3501      	adds	r5, #1
   1300c:	4628      	mov	r0, r5
   1300e:	f016 fcb8 	bl	29982 <memcmp>
   13012:	b918      	cbnz	r0, 1301c <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   13014:	9805      	ldr	r0, [sp, #20]
   13016:	f006 fa35 	bl	19484 <net_buf_unref>
		return 0U;
   1301a:	e7de      	b.n	12fda <bt_id_read_public_addr+0x1a>
   1301c:	2206      	movs	r2, #6
   1301e:	4628      	mov	r0, r5
   13020:	490b      	ldr	r1, [pc, #44]	; (13050 <bt_id_read_public_addr+0x90>)
   13022:	f016 fcae 	bl	29982 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13026:	2800      	cmp	r0, #0
   13028:	d0f4      	beq.n	13014 <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   1302a:	4629      	mov	r1, r5
   1302c:	1c60      	adds	r0, r4, #1
   1302e:	f013 f990 	bl	26352 <bt_addr_copy>
	net_buf_unref(rsp);
   13032:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   13034:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13036:	f006 fa25 	bl	19484 <net_buf_unref>
	return 1U;
   1303a:	2001      	movs	r0, #1
   1303c:	e7ce      	b.n	12fdc <bt_id_read_public_addr+0x1c>
   1303e:	bf00      	nop
   13040:	0002e216 	.word	0x0002e216
   13044:	0002a9a8 	.word	0x0002a9a8
   13048:	0002e22f 	.word	0x0002e22f
   1304c:	0002d8f9 	.word	0x0002d8f9
   13050:	0002d8f3 	.word	0x0002d8f3

00013054 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13054:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13056:	4668      	mov	r0, sp
   13058:	f7ff ffb2 	bl	12fc0 <bt_id_read_public_addr>
   1305c:	4b04      	ldr	r3, [pc, #16]	; (13070 <bt_setup_public_id_addr+0x1c>)
   1305e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13060:	b118      	cbz	r0, 1306a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13062:	4669      	mov	r1, sp
   13064:	2000      	movs	r0, #0
   13066:	f7ff fcf3 	bl	12a50 <id_create.constprop.0>
}
   1306a:	b003      	add	sp, #12
   1306c:	f85d fb04 	ldr.w	pc, [sp], #4
   13070:	20008000 	.word	0x20008000

00013074 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13074:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13076:	4b25      	ldr	r3, [pc, #148]	; (1310c <bt_read_static_addr+0x98>)
{
   13078:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1307a:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   1307e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13080:	f013 0301 	ands.w	r3, r3, #1
{
   13084:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13086:	d10c      	bne.n	130a2 <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   13088:	4a21      	ldr	r2, [pc, #132]	; (13110 <bt_read_static_addr+0x9c>)
   1308a:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1308c:	2202      	movs	r2, #2
   1308e:	4618      	mov	r0, r3
   13090:	e9cd 3300 	strd	r3, r3, [sp]
   13094:	491f      	ldr	r1, [pc, #124]	; (13114 <bt_read_static_addr+0xa0>)
   13096:	f013 f9a4 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
		return 0;
   1309a:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1309c:	4620      	mov	r0, r4
   1309e:	b007      	add	sp, #28
   130a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   130a2:	2100      	movs	r1, #0
   130a4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   130a8:	aa05      	add	r2, sp, #20
   130aa:	f7fe fe1d 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   130ae:	4603      	mov	r3, r0
   130b0:	b118      	cbz	r0, 130ba <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   130b2:	4b19      	ldr	r3, [pc, #100]	; (13118 <bt_read_static_addr+0xa4>)
   130b4:	9302      	str	r3, [sp, #8]
   130b6:	2300      	movs	r3, #0
   130b8:	e7e8      	b.n	1308c <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   130ba:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   130bc:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   130be:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   130c0:	7854      	ldrb	r4, [r2, #1]
   130c2:	3202      	adds	r2, #2
   130c4:	42b4      	cmp	r4, r6
   130c6:	bf28      	it	cs
   130c8:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   130ca:	429c      	cmp	r4, r3
   130cc:	dc0e      	bgt.n	130ec <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   130ce:	f006 f9d9 	bl	19484 <net_buf_unref>
	if (!cnt) {
   130d2:	2c00      	cmp	r4, #0
   130d4:	d1e2      	bne.n	1309c <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   130d6:	4b11      	ldr	r3, [pc, #68]	; (1311c <bt_read_static_addr+0xa8>)
   130d8:	2202      	movs	r2, #2
   130da:	e9cd 4301 	strd	r4, r3, [sp, #4]
   130de:	4620      	mov	r0, r4
   130e0:	4623      	mov	r3, r4
   130e2:	490c      	ldr	r1, [pc, #48]	; (13114 <bt_read_static_addr+0xa0>)
   130e4:	9400      	str	r4, [sp, #0]
   130e6:	f013 f97c 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
   130ea:	e7d7      	b.n	1309c <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   130ec:	4611      	mov	r1, r2
   130ee:	fb07 5603 	mla	r6, r7, r3, r5
   130f2:	f102 0c14 	add.w	ip, r2, #20
   130f6:	f851 eb04 	ldr.w	lr, [r1], #4
   130fa:	4561      	cmp	r1, ip
   130fc:	f846 eb04 	str.w	lr, [r6], #4
   13100:	d1f9      	bne.n	130f6 <bt_read_static_addr+0x82>
   13102:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   13104:	3301      	adds	r3, #1
   13106:	8031      	strh	r1, [r6, #0]
   13108:	3216      	adds	r2, #22
   1310a:	e7de      	b.n	130ca <bt_read_static_addr+0x56>
   1310c:	20008000 	.word	0x20008000
   13110:	0002e24d 	.word	0x0002e24d
   13114:	0002a9a8 	.word	0x0002a9a8
   13118:	0002e279 	.word	0x0002e279
   1311c:	0002e299 	.word	0x0002e299

00013120 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13120:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13122:	4d15      	ldr	r5, [pc, #84]	; (13178 <bt_setup_random_id_addr+0x58>)
{
   13124:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13126:	79ec      	ldrb	r4, [r5, #7]
   13128:	b92c      	cbnz	r4, 13136 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1312a:	2101      	movs	r1, #1
   1312c:	a802      	add	r0, sp, #8
   1312e:	f7ff ffa1 	bl	13074 <bt_read_static_addr>
   13132:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13134:	b9c0      	cbnz	r0, 13168 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13136:	2100      	movs	r1, #0
   13138:	4608      	mov	r0, r1
}
   1313a:	b008      	add	sp, #32
   1313c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13140:	f7ff beea 	b.w	12f18 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13144:	ab02      	add	r3, sp, #8
   13146:	fb06 3102 	mla	r1, r6, r2, r3
   1314a:	f10d 0001 	add.w	r0, sp, #1
   1314e:	f013 f900 	bl	26352 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13152:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13154:	4669      	mov	r1, sp
   13156:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13158:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1315c:	f7ff fc78 	bl	12a50 <id_create.constprop.0>
				if (err) {
   13160:	3401      	adds	r4, #1
   13162:	b110      	cbz	r0, 1316a <bt_setup_random_id_addr+0x4a>
}
   13164:	b008      	add	sp, #32
   13166:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13168:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1316a:	79eb      	ldrb	r3, [r5, #7]
   1316c:	b2e2      	uxtb	r2, r4
   1316e:	4293      	cmp	r3, r2
   13170:	d8e8      	bhi.n	13144 <bt_setup_random_id_addr+0x24>
			return 0;
   13172:	2000      	movs	r0, #0
   13174:	e7f6      	b.n	13164 <bt_setup_random_id_addr+0x44>
   13176:	bf00      	nop
   13178:	20008000 	.word	0x20008000

0001317c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1317c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13180:	4690      	mov	r8, r2
   13182:	460e      	mov	r6, r1
   13184:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   13186:	4602      	mov	r2, r0
   13188:	2800      	cmp	r0, #0
   1318a:	d04b      	beq.n	13224 <bt_id_set_adv_own_addr+0xa8>
   1318c:	2b00      	cmp	r3, #0
   1318e:	d049      	beq.n	13224 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13190:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   13192:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13194:	d531      	bpl.n	131fa <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13196:	4f25      	ldr	r7, [pc, #148]	; (1322c <bt_id_set_adv_own_addr+0xb0>)
   13198:	f1b8 0f00 	cmp.w	r8, #0
   1319c:	d013      	beq.n	131c6 <bt_id_set_adv_own_addr+0x4a>
   1319e:	0688      	lsls	r0, r1, #26
   131a0:	d40a      	bmi.n	131b8 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   131a2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   131a6:	5cfb      	ldrb	r3, [r7, r3]
   131a8:	2b01      	cmp	r3, #1
   131aa:	d015      	beq.n	131d8 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   131ac:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   131ae:	06b2      	lsls	r2, r6, #26
   131b0:	d50f      	bpl.n	131d2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   131b2:	f043 0302 	orr.w	r3, r3, #2
   131b6:	e00b      	b.n	131d0 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   131b8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   131bc:	0659      	lsls	r1, r3, #25
   131be:	d4f0      	bmi.n	131a2 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   131c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   131c4:	e006      	b.n	131d4 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   131c6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   131ca:	5cfb      	ldrb	r3, [r7, r3]
   131cc:	2b01      	cmp	r3, #1
   131ce:	d003      	beq.n	131d8 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   131d0:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   131d2:	2000      	movs	r0, #0
}
   131d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   131d8:	2107      	movs	r1, #7
   131da:	fb01 7104 	mla	r1, r1, r4, r7
   131de:	4610      	mov	r0, r2
   131e0:	3101      	adds	r1, #1
   131e2:	f013 f956 	bl	26492 <bt_id_set_adv_random_addr>
				if (err) {
   131e6:	2800      	cmp	r0, #0
   131e8:	d1f4      	bne.n	131d4 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   131ea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   131ee:	5d3b      	ldrb	r3, [r7, r4]
   131f0:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   131f2:	f1b8 0f00 	cmp.w	r8, #0
   131f6:	d0ec      	beq.n	131d2 <bt_id_set_adv_own_addr+0x56>
   131f8:	e7d9      	b.n	131ae <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   131fa:	074b      	lsls	r3, r1, #29
   131fc:	d50e      	bpl.n	1321c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   131fe:	4e0b      	ldr	r6, [pc, #44]	; (1322c <bt_id_set_adv_own_addr+0xb0>)
   13200:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13204:	5df3      	ldrb	r3, [r6, r7]
   13206:	2b01      	cmp	r3, #1
   13208:	d1e2      	bne.n	131d0 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1320a:	2107      	movs	r1, #7
   1320c:	fb11 3104 	smlabb	r1, r1, r4, r3
   13210:	4431      	add	r1, r6
   13212:	f013 f93e 	bl	26492 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   13216:	5df3      	ldrb	r3, [r6, r7]
   13218:	702b      	strb	r3, [r5, #0]
		if (err) {
   1321a:	e7db      	b.n	131d4 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   1321c:	f013 f941 	bl	264a2 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13220:	2301      	movs	r3, #1
   13222:	e7f9      	b.n	13218 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   13224:	f06f 0015 	mvn.w	r0, #21
   13228:	e7d4      	b.n	131d4 <bt_id_set_adv_own_addr+0x58>
   1322a:	bf00      	nop
   1322c:	20008000 	.word	0x20008000

00013230 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13232:	4e13      	ldr	r6, [pc, #76]	; (13280 <bt_id_init+0x50>)
   13234:	79f5      	ldrb	r5, [r6, #7]
   13236:	b11d      	cbz	r5, 13240 <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   13238:	2400      	movs	r4, #0
}
   1323a:	4620      	mov	r0, r4
   1323c:	b004      	add	sp, #16
   1323e:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   13240:	f7ff ff08 	bl	13054 <bt_setup_public_id_addr>
		if (err) {
   13244:	4604      	mov	r4, r0
   13246:	b150      	cbz	r0, 1325e <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   13248:	4b0e      	ldr	r3, [pc, #56]	; (13284 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   1324a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1324e:	2201      	movs	r2, #1
   13250:	462b      	mov	r3, r5
   13252:	4628      	mov	r0, r5
   13254:	490c      	ldr	r1, [pc, #48]	; (13288 <bt_id_init+0x58>)
   13256:	9500      	str	r5, [sp, #0]
   13258:	f013 f8c3 	bl	263e2 <z_log_msg_runtime_create.constprop.0>
			return err;
   1325c:	e7ed      	b.n	1323a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1325e:	79f5      	ldrb	r5, [r6, #7]
   13260:	2d00      	cmp	r5, #0
   13262:	d1e9      	bne.n	13238 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   13264:	f7ff ff5c 	bl	13120 <bt_setup_random_id_addr>
		if (err) {
   13268:	4604      	mov	r4, r0
   1326a:	2800      	cmp	r0, #0
   1326c:	d1ec      	bne.n	13248 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1326e:	1c70      	adds	r0, r6, #1
   13270:	f7ff fc1c 	bl	12aac <set_random_address>
		if (err) {
   13274:	4604      	mov	r4, r0
   13276:	2800      	cmp	r0, #0
   13278:	d0de      	beq.n	13238 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   1327a:	4b04      	ldr	r3, [pc, #16]	; (1328c <bt_id_init+0x5c>)
   1327c:	e7e5      	b.n	1324a <bt_id_init+0x1a>
   1327e:	bf00      	nop
   13280:	20008000 	.word	0x20008000
   13284:	0002e2c2 	.word	0x0002e2c2
   13288:	0002a9a8 	.word	0x0002a9a8
   1328c:	0002e2e1 	.word	0x0002e2e1

00013290 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13294:	460c      	mov	r4, r1
   13296:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13298:	2120      	movs	r1, #32
{
   1329a:	4692      	mov	sl, r2
   1329c:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1329e:	f7fe fcd5 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   132a2:	4605      	mov	r5, r0
   132a4:	2800      	cmp	r0, #0
   132a6:	d05a      	beq.n	1335e <hci_set_ad+0xce>
   132a8:	2120      	movs	r1, #32
   132aa:	300c      	adds	r0, #12
   132ac:	f006 fa0c 	bl	196c8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   132b0:	2220      	movs	r2, #32
   132b2:	4681      	mov	r9, r0
   132b4:	2100      	movs	r1, #0
   132b6:	f016 fbae 	bl	29a16 <memset>
	uint8_t set_data_len = 0;
   132ba:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   132bc:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   132c0:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   132c4:	2300      	movs	r3, #0
   132c6:	f8d4 8000 	ldr.w	r8, [r4]
   132ca:	6862      	ldr	r2, [r4, #4]
   132cc:	4293      	cmp	r3, r2
   132ce:	d30c      	bcc.n	132ea <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   132d0:	3408      	adds	r4, #8
   132d2:	45a2      	cmp	sl, r4
   132d4:	d1f6      	bne.n	132c4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   132d6:	2200      	movs	r2, #0
   132d8:	4629      	mov	r1, r5
   132da:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   132dc:	f889 6000 	strb.w	r6, [r9]
}
   132e0:	b007      	add	sp, #28
   132e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   132e6:	f7fe bcff 	b.w	11ce8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   132ea:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   132ee:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   132f0:	1811      	adds	r1, r2, r0
   132f2:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   132f4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   132f8:	d91a      	bls.n	13330 <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   132fa:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   132fe:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13302:	d101      	bne.n	13308 <hci_set_ad+0x78>
   13304:	2a00      	cmp	r2, #0
   13306:	dc11      	bgt.n	1332c <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   13308:	4b16      	ldr	r3, [pc, #88]	; (13364 <hci_set_ad+0xd4>)
   1330a:	2201      	movs	r2, #1
   1330c:	9302      	str	r3, [sp, #8]
   1330e:	2300      	movs	r3, #0
   13310:	4915      	ldr	r1, [pc, #84]	; (13368 <hci_set_ad+0xd8>)
   13312:	4618      	mov	r0, r3
   13314:	e9cd 3300 	strd	r3, r3, [sp]
   13318:	f013 f912 	bl	26540 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1331c:	4628      	mov	r0, r5
   1331e:	f006 f8b1 	bl	19484 <net_buf_unref>
					return -EINVAL;
   13322:	f06f 0015 	mvn.w	r0, #21
}
   13326:	b007      	add	sp, #28
   13328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1332c:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13330:	b2d7      	uxtb	r7, r2
   13332:	1c79      	adds	r1, r7, #1
   13334:	f80b 1006 	strb.w	r1, [fp, r6]
   13338:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1333a:	b2c9      	uxtb	r1, r1
   1333c:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13340:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13344:	fa5b f080 	uxtab	r0, fp, r0
   13348:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   1334a:	3702      	adds	r7, #2
   1334c:	f016 fb29 	bl	299a2 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13350:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   13352:	4437      	add	r7, r6
   13354:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   13356:	3301      	adds	r3, #1
   13358:	f108 0808 	add.w	r8, r8, #8
   1335c:	e7b5      	b.n	132ca <hci_set_ad+0x3a>
		return -ENOBUFS;
   1335e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13362:	e7e0      	b.n	13326 <hci_set_ad+0x96>
   13364:	0002e304 	.word	0x0002e304
   13368:	0002a960 	.word	0x0002a960

0001336c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1336c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1336e:	4605      	mov	r5, r0
   13370:	4b16      	ldr	r3, [pc, #88]	; (133cc <le_adv_start_add_conn+0x60>)
   13372:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   13376:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   13378:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1337c:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   1337e:	2207      	movs	r2, #7
   13380:	4628      	mov	r0, r5
   13382:	4913      	ldr	r1, [pc, #76]	; (133d0 <le_adv_start_add_conn+0x64>)
   13384:	f016 fafd 	bl	29982 <memcmp>
   13388:	4603      	mov	r3, r0
   1338a:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1338c:	b96b      	cbnz	r3, 133aa <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1338e:	4911      	ldr	r1, [pc, #68]	; (133d4 <le_adv_start_add_conn+0x68>)
   13390:	f001 fa0c 	bl	147ac <bt_conn_add_le>
		if (!conn) {
   13394:	4604      	mov	r4, r0
   13396:	b910      	cbnz	r0, 1339e <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   13398:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1339c:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1339e:	2104      	movs	r1, #4
   133a0:	f000 ff8e 	bl	142c0 <bt_conn_set_state>
		return 0;
   133a4:	2000      	movs	r0, #0
		*out_conn = conn;
   133a6:	6034      	str	r4, [r6, #0]
   133a8:	e7f8      	b.n	1339c <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   133aa:	4629      	mov	r1, r5
   133ac:	f001 fa36 	bl	1481c <bt_conn_exists_le>
   133b0:	b940      	cbnz	r0, 133c4 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   133b2:	7820      	ldrb	r0, [r4, #0]
   133b4:	4629      	mov	r1, r5
   133b6:	f001 f9f9 	bl	147ac <bt_conn_add_le>
	if (!conn) {
   133ba:	4604      	mov	r4, r0
   133bc:	2800      	cmp	r0, #0
   133be:	d0eb      	beq.n	13398 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   133c0:	2105      	movs	r1, #5
   133c2:	e7ed      	b.n	133a0 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   133c4:	f06f 0015 	mvn.w	r0, #21
   133c8:	e7e8      	b.n	1339c <le_adv_start_add_conn+0x30>
   133ca:	bf00      	nop
   133cc:	20008000 	.word	0x20008000
   133d0:	0002d8ec 	.word	0x0002d8ec
   133d4:	0002d8e5 	.word	0x0002d8e5

000133d8 <valid_adv_param>:
{
   133d8:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   133da:	6843      	ldr	r3, [r0, #4]
{
   133dc:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   133de:	0558      	lsls	r0, r3, #21
   133e0:	d501      	bpl.n	133e6 <valid_adv_param+0xe>
		return false;
   133e2:	2000      	movs	r0, #0
}
   133e4:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   133e6:	6922      	ldr	r2, [r4, #16]
   133e8:	b10a      	cbz	r2, 133ee <valid_adv_param+0x16>
   133ea:	07d9      	lsls	r1, r3, #31
   133ec:	d5f9      	bpl.n	133e2 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   133ee:	4d19      	ldr	r5, [pc, #100]	; (13454 <valid_adv_param+0x7c>)
   133f0:	7820      	ldrb	r0, [r4, #0]
   133f2:	79eb      	ldrb	r3, [r5, #7]
   133f4:	4283      	cmp	r3, r0
   133f6:	d9f4      	bls.n	133e2 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   133f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   133fc:	2207      	movs	r2, #7
   133fe:	4916      	ldr	r1, [pc, #88]	; (13458 <valid_adv_param+0x80>)
   13400:	4428      	add	r0, r5
   13402:	f016 fabe 	bl	29982 <memcmp>
	if (param->id >= bt_dev.id_count ||
   13406:	2800      	cmp	r0, #0
   13408:	d0eb      	beq.n	133e2 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1340a:	6860      	ldr	r0, [r4, #4]
   1340c:	07c2      	lsls	r2, r0, #31
   1340e:	d406      	bmi.n	1341e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   13410:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   13414:	2b08      	cmp	r3, #8
   13416:	d802      	bhi.n	1341e <valid_adv_param+0x46>
   13418:	68a3      	ldr	r3, [r4, #8]
   1341a:	2b9f      	cmp	r3, #159	; 0x9f
   1341c:	d9e1      	bls.n	133e2 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1341e:	f010 0f30 	tst.w	r0, #48	; 0x30
   13422:	d002      	beq.n	1342a <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   13424:	6923      	ldr	r3, [r4, #16]
   13426:	2b00      	cmp	r3, #0
   13428:	d0db      	beq.n	133e2 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1342a:	06c3      	lsls	r3, r0, #27
   1342c:	d401      	bmi.n	13432 <valid_adv_param+0x5a>
   1342e:	6923      	ldr	r3, [r4, #16]
   13430:	b943      	cbnz	r3, 13444 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   13432:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13436:	429a      	cmp	r2, r3
   13438:	d8d3      	bhi.n	133e2 <valid_adv_param+0xa>
   1343a:	2a1f      	cmp	r2, #31
   1343c:	d9d1      	bls.n	133e2 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1343e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13442:	d8ce      	bhi.n	133e2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   13444:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   13448:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1344c:	bf18      	it	ne
   1344e:	2001      	movne	r0, #1
   13450:	e7c8      	b.n	133e4 <valid_adv_param+0xc>
   13452:	bf00      	nop
   13454:	20008000 	.word	0x20008000
   13458:	0002d8ec 	.word	0x0002d8ec

0001345c <bt_le_ext_adv_foreach>:
{
   1345c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1345e:	4801      	ldr	r0, [pc, #4]	; (13464 <bt_le_ext_adv_foreach+0x8>)
   13460:	4718      	bx	r3
   13462:	bf00      	nop
   13464:	20008018 	.word	0x20008018

00013468 <bt_le_adv_lookup_legacy>:
}
   13468:	4800      	ldr	r0, [pc, #0]	; (1346c <bt_le_adv_lookup_legacy+0x4>)
   1346a:	4770      	bx	lr
   1346c:	20008018 	.word	0x20008018

00013470 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   13470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13474:	b08d      	sub	sp, #52	; 0x34
   13476:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   13478:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1347a:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1347e:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   13480:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13484:	4890      	ldr	r0, [pc, #576]	; (136c8 <bt_le_adv_start_legacy+0x258>)
   13486:	bf18      	it	ne
   13488:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   1348a:	9307      	str	r3, [sp, #28]
   1348c:	f013 f843 	bl	26516 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13490:	0747      	lsls	r7, r0, #29
{
   13492:	460d      	mov	r5, r1
   13494:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13496:	f140 810d 	bpl.w	136b4 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1349a:	4608      	mov	r0, r1
   1349c:	f7ff ff9c 	bl	133d8 <valid_adv_param>
   134a0:	b928      	cbnz	r0, 134ae <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   134a2:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   134a6:	4620      	mov	r0, r4
   134a8:	b00d      	add	sp, #52	; 0x34
   134aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   134ae:	4628      	mov	r0, r5
   134b0:	f013 f80e 	bl	264d0 <bt_id_adv_random_addr_check>
   134b4:	4681      	mov	r9, r0
   134b6:	2800      	cmp	r0, #0
   134b8:	d0f3      	beq.n	134a2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   134ba:	f106 0810 	add.w	r8, r6, #16
   134be:	4640      	mov	r0, r8
   134c0:	f013 f829 	bl	26516 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   134c4:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   134c8:	0600      	lsls	r0, r0, #24
   134ca:	f100 80f6 	bmi.w	136ba <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   134ce:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   134d2:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   134d6:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   134d8:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   134da:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   134de:	68eb      	ldr	r3, [r5, #12]
   134e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   134e4:	f013 f808 	bl	264f8 <get_adv_channel_map>
	if (adv->id != param->id) {
   134e8:	7832      	ldrb	r2, [r6, #0]
   134ea:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   134ec:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   134f0:	429a      	cmp	r2, r3
   134f2:	d004      	beq.n	134fe <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   134f4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   134f8:	4873      	ldr	r0, [pc, #460]	; (136c8 <bt_le_adv_start_legacy+0x258>)
   134fa:	f013 f80f 	bl	2651c <atomic_and>
	adv->id = param->id;
   134fe:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   13500:	4a72      	ldr	r2, [pc, #456]	; (136cc <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   13502:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   13504:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   13508:	4630      	mov	r0, r6
   1350a:	4622      	mov	r2, r4
   1350c:	6869      	ldr	r1, [r5, #4]
   1350e:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   13512:	f7ff fe33 	bl	1317c <bt_id_set_adv_own_addr>
	if (err) {
   13516:	4604      	mov	r4, r0
   13518:	2800      	cmp	r0, #0
   1351a:	d1c4      	bne.n	134a6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1351c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   13520:	f1ba 0f00 	cmp.w	sl, #0
   13524:	d013      	beq.n	1354e <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   13526:	6929      	ldr	r1, [r5, #16]
   13528:	f013 f803 	bl	26532 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1352c:	4628      	mov	r0, r5
   1352e:	f013 f89b 	bl	26668 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13532:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   13534:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13536:	07d9      	lsls	r1, r3, #31
   13538:	d416      	bmi.n	13568 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1353a:	059b      	lsls	r3, r3, #22
   1353c:	d403      	bmi.n	13546 <bt_le_adv_start_legacy+0xd6>
   1353e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13540:	b90b      	cbnz	r3, 13546 <bt_le_adv_start_legacy+0xd6>
   13542:	2f02      	cmp	r7, #2
   13544:	d159      	bne.n	135fa <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   13546:	2302      	movs	r3, #2
   13548:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1354c:	e019      	b.n	13582 <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1354e:	4960      	ldr	r1, [pc, #384]	; (136d0 <bt_le_adv_start_legacy+0x260>)
   13550:	f012 ffef 	bl	26532 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   13554:	4628      	mov	r0, r5
   13556:	f013 f887 	bl	26668 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1355a:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   1355c:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1355e:	07da      	lsls	r2, r3, #31
   13560:	d5eb      	bpl.n	1353a <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   13562:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   13566:	e00c      	b.n	13582 <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   13568:	f013 0f10 	tst.w	r3, #16
   1356c:	bf0c      	ite	eq
   1356e:	2301      	moveq	r3, #1
   13570:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   13572:	6929      	ldr	r1, [r5, #16]
   13574:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   13578:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   1357c:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1357e:	f012 ffd8 	bl	26532 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   13582:	210f      	movs	r1, #15
   13584:	f242 0006 	movw	r0, #8198	; 0x2006
   13588:	f7fe fb60 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   1358c:	4604      	mov	r4, r0
   1358e:	2800      	cmp	r0, #0
   13590:	f000 8096 	beq.w	136c0 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13594:	220f      	movs	r2, #15
   13596:	a908      	add	r1, sp, #32
   13598:	300c      	adds	r0, #12
   1359a:	f014 fc8a 	bl	27eb2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1359e:	4621      	mov	r1, r4
   135a0:	2200      	movs	r2, #0
   135a2:	f242 0006 	movw	r0, #8198	; 0x2006
   135a6:	f7fe fb9f 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   135aa:	4604      	mov	r4, r0
   135ac:	2800      	cmp	r0, #0
   135ae:	f47f af7a 	bne.w	134a6 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   135b2:	f1ba 0f00 	cmp.w	sl, #0
   135b6:	d026      	beq.n	13606 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   135b8:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   135ba:	07dc      	lsls	r4, r3, #31
   135bc:	d431      	bmi.n	13622 <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   135be:	4630      	mov	r0, r6
   135c0:	2101      	movs	r1, #1
   135c2:	f013 f861 	bl	26688 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   135c6:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   135c8:	4604      	mov	r4, r0
   135ca:	2800      	cmp	r0, #0
   135cc:	d06a      	beq.n	136a4 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   135ce:	2500      	movs	r5, #0
   135d0:	4b40      	ldr	r3, [pc, #256]	; (136d4 <bt_le_adv_start_legacy+0x264>)
   135d2:	2201      	movs	r2, #1
   135d4:	9302      	str	r3, [sp, #8]
   135d6:	4628      	mov	r0, r5
   135d8:	462b      	mov	r3, r5
   135da:	e9cd 5500 	strd	r5, r5, [sp]
   135de:	493e      	ldr	r1, [pc, #248]	; (136d8 <bt_le_adv_start_legacy+0x268>)
   135e0:	f012 ffae 	bl	26540 <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   135e4:	2e00      	cmp	r6, #0
   135e6:	f43f af5e 	beq.w	134a6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   135ea:	4630      	mov	r0, r6
   135ec:	4629      	mov	r1, r5
   135ee:	f000 fe67 	bl	142c0 <bt_conn_set_state>
			bt_conn_unref(conn);
   135f2:	4630      	mov	r0, r6
   135f4:	f000 fe2c 	bl	14250 <bt_conn_unref>
   135f8:	e755      	b.n	134a6 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   135fa:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   135fc:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   13600:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   13604:	e7bd      	b.n	13582 <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   13606:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13608:	4659      	mov	r1, fp
   1360a:	9300      	str	r3, [sp, #0]
   1360c:	4630      	mov	r0, r6
   1360e:	e9cd 9701 	strd	r9, r7, [sp, #4]
   13612:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13614:	9a05      	ldr	r2, [sp, #20]
   13616:	f012 ffb5 	bl	26584 <le_adv_update.constprop.0>
		if (err) {
   1361a:	4604      	mov	r4, r0
   1361c:	2800      	cmp	r0, #0
   1361e:	d0cb      	beq.n	135b8 <bt_le_adv_start_legacy+0x148>
   13620:	e741      	b.n	134a6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   13622:	4630      	mov	r0, r6
   13624:	a907      	add	r1, sp, #28
   13626:	f7ff fea1 	bl	1336c <le_adv_start_add_conn>
		if (err) {
   1362a:	4604      	mov	r4, r0
   1362c:	2800      	cmp	r0, #0
   1362e:	d0c6      	beq.n	135be <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   13630:	f110 0f0c 	cmn.w	r0, #12
   13634:	f47f af37 	bne.w	134a6 <bt_le_adv_start_legacy+0x36>
   13638:	f1ba 0f00 	cmp.w	sl, #0
   1363c:	f47f af33 	bne.w	134a6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   13640:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   13642:	0798      	lsls	r0, r3, #30
   13644:	f53f af2f 	bmi.w	134a6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   13648:	686c      	ldr	r4, [r5, #4]
   1364a:	f084 0402 	eor.w	r4, r4, #2
   1364e:	f3c4 0440 	ubfx	r4, r4, #1, #1
   13652:	f004 0201 	and.w	r2, r4, #1
   13656:	210e      	movs	r1, #14
   13658:	4640      	mov	r0, r8
   1365a:	f012 ff80 	bl	2655e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1365e:	1e7b      	subs	r3, r7, #1
   13660:	425a      	negs	r2, r3
   13662:	415a      	adcs	r2, r3
   13664:	2108      	movs	r1, #8
   13666:	4640      	mov	r0, r8
   13668:	f012 ff79 	bl	2655e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1366c:	1eb9      	subs	r1, r7, #2
   1366e:	424a      	negs	r2, r1
   13670:	414a      	adcs	r2, r1
   13672:	4640      	mov	r0, r8
   13674:	2109      	movs	r1, #9
   13676:	f012 ff72 	bl	2655e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1367a:	686a      	ldr	r2, [r5, #4]
   1367c:	210a      	movs	r1, #10
   1367e:	4640      	mov	r0, r8
   13680:	f002 0201 	and.w	r2, r2, #1
   13684:	f012 ff6b 	bl	2655e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   13688:	464a      	mov	r2, r9
   1368a:	210b      	movs	r1, #11
   1368c:	4640      	mov	r0, r8
   1368e:	f012 ff66 	bl	2655e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   13692:	686a      	ldr	r2, [r5, #4]
   13694:	210d      	movs	r1, #13
   13696:	4640      	mov	r0, r8
   13698:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1369c:	f012 ff5f 	bl	2655e <atomic_set_bit_to>
	return 0;
   136a0:	2400      	movs	r4, #0
   136a2:	e700      	b.n	134a6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   136a4:	b116      	cbz	r6, 136ac <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   136a6:	4630      	mov	r0, r6
   136a8:	f000 fdd2 	bl	14250 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   136ac:	f1ba 0f00 	cmp.w	sl, #0
   136b0:	d1cf      	bne.n	13652 <bt_le_adv_start_legacy+0x1e2>
   136b2:	e7c9      	b.n	13648 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   136b4:	f06f 040a 	mvn.w	r4, #10
   136b8:	e6f5      	b.n	134a6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   136ba:	f06f 0477 	mvn.w	r4, #119	; 0x77
   136be:	e6f2      	b.n	134a6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   136c0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   136c4:	e6ef      	b.n	134a6 <bt_le_adv_start_legacy+0x36>
   136c6:	bf00      	nop
   136c8:	200080cc 	.word	0x200080cc
   136cc:	20008000 	.word	0x20008000
   136d0:	0002d8ec 	.word	0x0002d8ec
   136d4:	0002e31d 	.word	0x0002e31d
   136d8:	0002a960 	.word	0x0002a960

000136dc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   136dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   136de:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   136e0:	9a06      	ldr	r2, [sp, #24]
{
   136e2:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   136e4:	e9cd 3200 	strd	r3, r2, [sp]
   136e8:	462b      	mov	r3, r5
   136ea:	460a      	mov	r2, r1
   136ec:	4601      	mov	r1, r0
   136ee:	4811      	ldr	r0, [pc, #68]	; (13734 <bt_le_adv_start+0x58>)
   136f0:	f7ff febe 	bl	13470 <bt_le_adv_start_legacy>
   136f4:	4621      	mov	r1, r4
   136f6:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   136f8:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   136fa:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   136fe:	429d      	cmp	r5, r3
   13700:	d102      	bne.n	13708 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   13702:	4630      	mov	r0, r6
   13704:	b002      	add	sp, #8
   13706:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   13708:	880a      	ldrh	r2, [r1, #0]
   1370a:	4282      	cmp	r2, r0
   1370c:	d104      	bne.n	13718 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1370e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   13710:	b112      	cbz	r2, 13718 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   13712:	7812      	ldrb	r2, [r2, #0]
   13714:	07d2      	lsls	r2, r2, #31
   13716:	d402      	bmi.n	1371e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   13718:	3301      	adds	r3, #1
   1371a:	3108      	adds	r1, #8
   1371c:	e7ef      	b.n	136fe <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1371e:	4906      	ldr	r1, [pc, #24]	; (13738 <bt_le_adv_start+0x5c>)
   13720:	4806      	ldr	r0, [pc, #24]	; (1373c <bt_le_adv_start+0x60>)
   13722:	f00d f891 	bl	20848 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   13726:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1372a:	2300      	movs	r3, #0
   1372c:	4803      	ldr	r0, [pc, #12]	; (1373c <bt_le_adv_start+0x60>)
   1372e:	f00d f9a7 	bl	20a80 <k_work_reschedule>
   13732:	e7e6      	b.n	13702 <bt_le_adv_start+0x26>
   13734:	20008018 	.word	0x20008018
   13738:	000137c5 	.word	0x000137c5
   1373c:	20008030 	.word	0x20008030

00013740 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   13740:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   13742:	481a      	ldr	r0, [pc, #104]	; (137ac <bt_le_adv_stop+0x6c>)
   13744:	f012 ffc7 	bl	266d6 <bt_le_lim_adv_cancel_timeout>
   13748:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1374c:	4818      	ldr	r0, [pc, #96]	; (137b0 <bt_le_adv_stop+0x70>)
   1374e:	f012 fee5 	bl	2651c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13752:	4817      	ldr	r0, [pc, #92]	; (137b0 <bt_le_adv_stop+0x70>)
   13754:	f012 fedf 	bl	26516 <atomic_get>
   13758:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1375a:	061a      	lsls	r2, r3, #24
   1375c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   13760:	d523      	bpl.n	137aa <bt_le_adv_stop+0x6a>
   13762:	4813      	ldr	r0, [pc, #76]	; (137b0 <bt_le_adv_stop+0x70>)
   13764:	f012 fed7 	bl	26516 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13768:	0543      	lsls	r3, r0, #21
   1376a:	d514      	bpl.n	13796 <bt_le_adv_stop+0x56>
   1376c:	2207      	movs	r2, #7
   1376e:	4911      	ldr	r1, [pc, #68]	; (137b4 <bt_le_adv_stop+0x74>)
   13770:	4811      	ldr	r0, [pc, #68]	; (137b8 <bt_le_adv_stop+0x78>)
   13772:	f016 f906 	bl	29982 <memcmp>
   13776:	4b11      	ldr	r3, [pc, #68]	; (137bc <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13778:	b998      	cbnz	r0, 137a2 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1377a:	2204      	movs	r2, #4
   1377c:	4910      	ldr	r1, [pc, #64]	; (137c0 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1377e:	7e18      	ldrb	r0, [r3, #24]
   13780:	f001 f872 	bl	14868 <bt_conn_lookup_state_le>
   13784:	4604      	mov	r4, r0
	if (conn) {
   13786:	b130      	cbz	r0, 13796 <bt_le_adv_stop+0x56>
		conn->err = status;
   13788:	2100      	movs	r1, #0
   1378a:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1378c:	f000 fd98 	bl	142c0 <bt_conn_set_state>
		bt_conn_unref(conn);
   13790:	4620      	mov	r0, r4
   13792:	f000 fd5d 	bl	14250 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   13796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1379a:	2100      	movs	r1, #0
   1379c:	4803      	ldr	r0, [pc, #12]	; (137ac <bt_le_adv_stop+0x6c>)
   1379e:	f012 bf73 	b.w	26688 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   137a2:	2205      	movs	r2, #5
   137a4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   137a8:	e7e9      	b.n	1377e <bt_le_adv_stop+0x3e>
}
   137aa:	bd10      	pop	{r4, pc}
   137ac:	20008018 	.word	0x20008018
   137b0:	20008028 	.word	0x20008028
   137b4:	0002d8ec 	.word	0x0002d8ec
   137b8:	20008021 	.word	0x20008021
   137bc:	20008000 	.word	0x20008000
   137c0:	0002d8e5 	.word	0x0002d8e5

000137c4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   137c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   137c6:	f7ff ffbb 	bl	13740 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   137ca:	4b07      	ldr	r3, [pc, #28]	; (137e8 <adv_timeout+0x24>)
   137cc:	9003      	str	r0, [sp, #12]
   137ce:	9302      	str	r3, [sp, #8]
   137d0:	2300      	movs	r3, #0
   137d2:	2202      	movs	r2, #2
   137d4:	4618      	mov	r0, r3
   137d6:	e9cd 3300 	strd	r3, r3, [sp]
   137da:	4904      	ldr	r1, [pc, #16]	; (137ec <adv_timeout+0x28>)
   137dc:	f012 feb0 	bl	26540 <z_log_msg_runtime_create.constprop.0>
}
   137e0:	b005      	add	sp, #20
   137e2:	f85d fb04 	ldr.w	pc, [sp], #4
   137e6:	bf00      	nop
   137e8:	0002e338 	.word	0x0002e338
   137ec:	0002a960 	.word	0x0002a960

000137f0 <bt_le_adv_resume>:
{
   137f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   137f2:	4c1e      	ldr	r4, [pc, #120]	; (1386c <bt_le_adv_resume+0x7c>)
   137f4:	4620      	mov	r0, r4
   137f6:	f012 fe8e 	bl	26516 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   137fa:	0440      	lsls	r0, r0, #17
   137fc:	d534      	bpl.n	13868 <bt_le_adv_resume+0x78>
   137fe:	4620      	mov	r0, r4
   13800:	f012 fe89 	bl	26516 <atomic_get>
   13804:	0601      	lsls	r1, r0, #24
   13806:	d42f      	bmi.n	13868 <bt_le_adv_resume+0x78>
   13808:	4620      	mov	r0, r4
   1380a:	f012 fe84 	bl	26516 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1380e:	0542      	lsls	r2, r0, #21
   13810:	d52a      	bpl.n	13868 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   13812:	a901      	add	r1, sp, #4
   13814:	f1a4 0010 	sub.w	r0, r4, #16
   13818:	f7ff fda8 	bl	1336c <le_adv_start_add_conn>
	if (err) {
   1381c:	4605      	mov	r5, r0
   1381e:	bb18      	cbnz	r0, 13868 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   13820:	2101      	movs	r1, #1
   13822:	f1a4 0010 	sub.w	r0, r4, #16
   13826:	f012 ff2f 	bl	26688 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1382a:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   1382c:	b928      	cbnz	r0, 1383a <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   1382e:	4630      	mov	r0, r6
}
   13830:	b002      	add	sp, #8
   13832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   13836:	f000 bd0b 	b.w	14250 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1383a:	4629      	mov	r1, r5
   1383c:	4630      	mov	r0, r6
   1383e:	f000 fd3f 	bl	142c0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13842:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   13846:	4620      	mov	r0, r4
   13848:	f012 fe68 	bl	2651c <atomic_and>
   1384c:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1384e:	4630      	mov	r0, r6
   13850:	f000 fcfe 	bl	14250 <bt_conn_unref>
	if (persist_paused) {
   13854:	046b      	lsls	r3, r5, #17
   13856:	d507      	bpl.n	13868 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13858:	e8d4 3fef 	ldaex	r3, [r4]
   1385c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   13860:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13864:	2a00      	cmp	r2, #0
   13866:	d1f7      	bne.n	13858 <bt_le_adv_resume+0x68>
}
   13868:	b002      	add	sp, #8
   1386a:	bd70      	pop	{r4, r5, r6, pc}
   1386c:	20008028 	.word	0x20008028

00013870 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   13870:	b530      	push	{r4, r5, lr}
   13872:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   13874:	2120      	movs	r1, #32
   13876:	a806      	add	r0, sp, #24
   13878:	f7fe fad4 	bl	11e24 <bt_hci_le_rand>
	if (ret) {
   1387c:	4604      	mov	r4, r0
   1387e:	bb08      	cbnz	r0, 138c4 <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   13880:	f015 ff84 	bl	2978c <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   13884:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   13888:	fba0 2305 	umull	r2, r3, r0, r5
   1388c:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   13890:	2308      	movs	r3, #8
   13892:	0bd2      	lsrs	r2, r2, #15
   13894:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   13898:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1389a:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1389e:	9300      	str	r3, [sp, #0]
   138a0:	2220      	movs	r2, #32
   138a2:	480a      	ldr	r0, [pc, #40]	; (138cc <prng_reseed.constprop.0+0x5c>)
   138a4:	ab04      	add	r3, sp, #16
   138a6:	a906      	add	r1, sp, #24
   138a8:	f012 fae3 	bl	25e72 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   138ac:	b950      	cbnz	r0, 138c4 <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   138ae:	4b08      	ldr	r3, [pc, #32]	; (138d0 <prng_reseed.constprop.0+0x60>)
   138b0:	9400      	str	r4, [sp, #0]
   138b2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   138b6:	2201      	movs	r2, #1
   138b8:	4623      	mov	r3, r4
   138ba:	4906      	ldr	r1, [pc, #24]	; (138d4 <prng_reseed.constprop.0+0x64>)
   138bc:	f012 ff0e 	bl	266dc <z_log_msg_runtime_create.constprop.0>
   138c0:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   138c4:	4620      	mov	r0, r4
   138c6:	b00f      	add	sp, #60	; 0x3c
   138c8:	bd30      	pop	{r4, r5, pc}
   138ca:	bf00      	nop
   138cc:	20009760 	.word	0x20009760
   138d0:	0002e35e 	.word	0x0002e35e
   138d4:	0002a9a0 	.word	0x0002a9a0

000138d8 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   138d8:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   138da:	b508      	push	{r3, lr}
   138dc:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   138e0:	d910      	bls.n	13904 <sys_memcpy_swap.constprop.0+0x2c>
   138e2:	4298      	cmp	r0, r3
   138e4:	d213      	bcs.n	1390e <sys_memcpy_swap.constprop.0+0x36>
   138e6:	490e      	ldr	r1, [pc, #56]	; (13920 <sys_memcpy_swap.constprop.0+0x48>)
   138e8:	f240 2315 	movw	r3, #533	; 0x215
   138ec:	4a0d      	ldr	r2, [pc, #52]	; (13924 <sys_memcpy_swap.constprop.0+0x4c>)
   138ee:	480e      	ldr	r0, [pc, #56]	; (13928 <sys_memcpy_swap.constprop.0+0x50>)
   138f0:	f011 faf1 	bl	24ed6 <assert_print>
   138f4:	480d      	ldr	r0, [pc, #52]	; (1392c <sys_memcpy_swap.constprop.0+0x54>)
   138f6:	f011 faee 	bl	24ed6 <assert_print>
   138fa:	f240 2115 	movw	r1, #533	; 0x215
   138fe:	4809      	ldr	r0, [pc, #36]	; (13924 <sys_memcpy_swap.constprop.0+0x4c>)
   13900:	f011 fae2 	bl	24ec8 <assert_post_action>
   13904:	d0ef      	beq.n	138e6 <sys_memcpy_swap.constprop.0+0xe>
   13906:	f100 0210 	add.w	r2, r0, #16
   1390a:	4291      	cmp	r1, r2
   1390c:	e7ea      	b.n	138e4 <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   1390e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   13910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   13914:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   13916:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1391a:	d1f9      	bne.n	13910 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   1391c:	bd08      	pop	{r3, pc}
   1391e:	bf00      	nop
   13920:	0002e3a7 	.word	0x0002e3a7
   13924:	0002e375 	.word	0x0002e375
   13928:	0002b939 	.word	0x0002b939
   1392c:	0002e3fe 	.word	0x0002e3fe

00013930 <prng_init>:

int prng_init(void)
{
   13930:	b510      	push	{r4, lr}
   13932:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   13934:	2108      	movs	r1, #8
   13936:	a804      	add	r0, sp, #16
   13938:	f7fe fa74 	bl	11e24 <bt_hci_le_rand>
	if (ret) {
   1393c:	4604      	mov	r4, r0
   1393e:	b980      	cbnz	r0, 13962 <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   13940:	2208      	movs	r2, #8
   13942:	480b      	ldr	r0, [pc, #44]	; (13970 <prng_init+0x40>)
   13944:	a904      	add	r1, sp, #16
   13946:	f012 fa74 	bl	25e32 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1394a:	b968      	cbnz	r0, 13968 <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   1394c:	4b09      	ldr	r3, [pc, #36]	; (13974 <prng_init+0x44>)
   1394e:	9400      	str	r4, [sp, #0]
   13950:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13954:	2201      	movs	r2, #1
   13956:	4623      	mov	r3, r4
   13958:	4907      	ldr	r1, [pc, #28]	; (13978 <prng_init+0x48>)
   1395a:	f012 febf 	bl	266dc <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1395e:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   13962:	4620      	mov	r0, r4
   13964:	b006      	add	sp, #24
   13966:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   13968:	f7ff ff82 	bl	13870 <prng_reseed.constprop.0>
   1396c:	4604      	mov	r4, r0
   1396e:	e7f8      	b.n	13962 <prng_init+0x32>
   13970:	20009760 	.word	0x20009760
   13974:	0002e430 	.word	0x0002e430
   13978:	0002a9a0 	.word	0x0002a9a0

0001397c <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   1397c:	b538      	push	{r3, r4, r5, lr}
   1397e:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   13980:	4604      	mov	r4, r0
   13982:	b198      	cbz	r0, 139ac <bt_rand+0x30>
   13984:	b191      	cbz	r1, 139ac <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   13986:	4a0b      	ldr	r2, [pc, #44]	; (139b4 <bt_rand+0x38>)
   13988:	f012 fa8c 	bl	25ea4 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1398c:	1c43      	adds	r3, r0, #1
   1398e:	d107      	bne.n	139a0 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   13990:	f7ff ff6e 	bl	13870 <prng_reseed.constprop.0>
		if (ret) {
   13994:	b948      	cbnz	r0, 139aa <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   13996:	4629      	mov	r1, r5
   13998:	4620      	mov	r0, r4
   1399a:	4a06      	ldr	r2, [pc, #24]	; (139b4 <bt_rand+0x38>)
   1399c:	f012 fa82 	bl	25ea4 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   139a0:	2801      	cmp	r0, #1
   139a2:	bf0c      	ite	eq
   139a4:	2000      	moveq	r0, #0
   139a6:	f06f 0004 	mvnne.w	r0, #4
}
   139aa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   139ac:	f06f 0015 	mvn.w	r0, #21
   139b0:	e7fb      	b.n	139aa <bt_rand+0x2e>
   139b2:	bf00      	nop
   139b4:	20009760 	.word	0x20009760

000139b8 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   139b8:	2240      	movs	r2, #64	; 0x40
{
   139ba:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   139bc:	4903      	ldr	r1, [pc, #12]	; (139cc <bt_pub_key_is_debug+0x14>)
   139be:	f015 ffe0 	bl	29982 <memcmp>
}
   139c2:	fab0 f080 	clz	r0, r0
   139c6:	0940      	lsrs	r0, r0, #5
   139c8:	bd08      	pop	{r3, pc}
   139ca:	bf00      	nop
   139cc:	0002e4e0 	.word	0x0002e4e0

000139d0 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   139d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   139d2:	4b3c      	ldr	r3, [pc, #240]	; (13ac4 <bt_pub_key_gen+0xf4>)
{
   139d4:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   139d6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   139da:	f003 0306 	and.w	r3, r3, #6
   139de:	2b06      	cmp	r3, #6
   139e0:	d00e      	beq.n	13a00 <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   139e2:	4b39      	ldr	r3, [pc, #228]	; (13ac8 <bt_pub_key_gen+0xf8>)
   139e4:	2202      	movs	r2, #2
   139e6:	9302      	str	r3, [sp, #8]
   139e8:	2300      	movs	r3, #0
   139ea:	4938      	ldr	r1, [pc, #224]	; (13acc <bt_pub_key_gen+0xfc>)
   139ec:	4618      	mov	r0, r3
   139ee:	e9cd 3300 	strd	r3, r3, [sp]
   139f2:	f012 feaf 	bl	26754 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   139f6:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   139fa:	4628      	mov	r0, r5
   139fc:	b005      	add	sp, #20
   139fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   13a00:	2800      	cmp	r0, #0
   13a02:	d05b      	beq.n	13abc <bt_pub_key_gen+0xec>
	return list->head;
   13a04:	4e32      	ldr	r6, [pc, #200]	; (13ad0 <bt_pub_key_gen+0x100>)
   13a06:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13a08:	b19a      	cbz	r2, 13a32 <bt_pub_key_gen+0x62>
   13a0a:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   13a0c:	4283      	cmp	r3, r0
   13a0e:	d10c      	bne.n	13a2a <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   13a10:	4b30      	ldr	r3, [pc, #192]	; (13ad4 <bt_pub_key_gen+0x104>)
   13a12:	2202      	movs	r2, #2
   13a14:	9302      	str	r3, [sp, #8]
   13a16:	2300      	movs	r3, #0
   13a18:	492c      	ldr	r1, [pc, #176]	; (13acc <bt_pub_key_gen+0xfc>)
   13a1a:	4618      	mov	r0, r3
   13a1c:	e9cd 3300 	strd	r3, r3, [sp]
   13a20:	f012 fe98 	bl	26754 <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   13a24:	f06f 0577 	mvn.w	r5, #119	; 0x77
   13a28:	e7e7      	b.n	139fa <bt_pub_key_gen+0x2a>
	return node->next;
   13a2a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13a2c:	b10b      	cbz	r3, 13a32 <bt_pub_key_gen+0x62>
   13a2e:	3b04      	subs	r3, #4
   13a30:	e7ec      	b.n	13a0c <bt_pub_key_gen+0x3c>
	parent->next = child;
   13a32:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   13a34:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   13a36:	1d03      	adds	r3, r0, #4
	list->head = node;
   13a38:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   13a3a:	b902      	cbnz	r2, 13a3e <bt_pub_key_gen+0x6e>
	list->tail = node;
   13a3c:	6073      	str	r3, [r6, #4]
   13a3e:	4f26      	ldr	r7, [pc, #152]	; (13ad8 <bt_pub_key_gen+0x108>)
   13a40:	e8d7 4fef 	ldaex	r4, [r7]
   13a44:	f044 0320 	orr.w	r3, r4, #32
   13a48:	e8c7 3fe2 	stlex	r2, r3, [r7]
   13a4c:	2a00      	cmp	r2, #0
   13a4e:	d1f7      	bne.n	13a40 <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   13a50:	f014 0420 	ands.w	r4, r4, #32
   13a54:	d001      	beq.n	13a5a <bt_pub_key_gen+0x8a>
	return 0;
   13a56:	2500      	movs	r5, #0
   13a58:	e7cf      	b.n	139fa <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a5a:	e8d7 3fef 	ldaex	r3, [r7]
   13a5e:	f023 0310 	bic.w	r3, r3, #16
   13a62:	e8c7 3fe2 	stlex	r2, r3, [r7]
   13a66:	2a00      	cmp	r2, #0
   13a68:	d1f7      	bne.n	13a5a <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   13a6a:	4622      	mov	r2, r4
   13a6c:	4621      	mov	r1, r4
   13a6e:	f242 0025 	movw	r0, #8229	; 0x2025
   13a72:	f7fe f939 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   13a76:	4605      	mov	r5, r0
   13a78:	2800      	cmp	r0, #0
   13a7a:	d0ec      	beq.n	13a56 <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   13a7c:	4b17      	ldr	r3, [pc, #92]	; (13adc <bt_pub_key_gen+0x10c>)
   13a7e:	2201      	movs	r2, #1
   13a80:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13a84:	4620      	mov	r0, r4
   13a86:	4623      	mov	r3, r4
   13a88:	4910      	ldr	r1, [pc, #64]	; (13acc <bt_pub_key_gen+0xfc>)
   13a8a:	9400      	str	r4, [sp, #0]
   13a8c:	f012 fe62 	bl	26754 <z_log_msg_runtime_create.constprop.0>
   13a90:	e8d7 3fef 	ldaex	r3, [r7]
   13a94:	f023 0320 	bic.w	r3, r3, #32
   13a98:	e8c7 3fe2 	stlex	r2, r3, [r7]
   13a9c:	2a00      	cmp	r2, #0
   13a9e:	d1f7      	bne.n	13a90 <bt_pub_key_gen+0xc0>
	return list->head;
   13aa0:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13aa2:	b13c      	cbz	r4, 13ab4 <bt_pub_key_gen+0xe4>
			if (cb->func) {
   13aa4:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13aa8:	3c04      	subs	r4, #4
			if (cb->func) {
   13aaa:	b10b      	cbz	r3, 13ab0 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   13aac:	2000      	movs	r0, #0
   13aae:	4798      	blx	r3
	return node->next;
   13ab0:	6864      	ldr	r4, [r4, #4]
   13ab2:	e7f6      	b.n	13aa2 <bt_pub_key_gen+0xd2>
	list->head = NULL;
   13ab4:	2300      	movs	r3, #0
	list->tail = NULL;
   13ab6:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   13aba:	e79e      	b.n	139fa <bt_pub_key_gen+0x2a>
		return -EINVAL;
   13abc:	f06f 0515 	mvn.w	r5, #21
   13ac0:	e79b      	b.n	139fa <bt_pub_key_gen+0x2a>
   13ac2:	bf00      	nop
   13ac4:	20008000 	.word	0x20008000
   13ac8:	0002e459 	.word	0x0002e459
   13acc:	0002a980 	.word	0x0002a980
   13ad0:	20021058 	.word	0x20021058
   13ad4:	0002e478 	.word	0x0002e478
   13ad8:	200080cc 	.word	0x200080cc
   13adc:	0002e494 	.word	0x0002e494

00013ae0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13ae0:	4b04      	ldr	r3, [pc, #16]	; (13af4 <bt_pub_key_get+0x14>)
   13ae2:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   13ae6:	f013 0f10 	tst.w	r3, #16
}
   13aea:	4803      	ldr	r0, [pc, #12]	; (13af8 <bt_pub_key_get+0x18>)
   13aec:	bf08      	it	eq
   13aee:	2000      	moveq	r0, #0
   13af0:	4770      	bx	lr
   13af2:	bf00      	nop
   13af4:	200080cc 	.word	0x200080cc
   13af8:	20022002 	.word	0x20022002

00013afc <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   13afc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   13afe:	4e24      	ldr	r6, [pc, #144]	; (13b90 <bt_dh_key_gen+0x94>)
{
   13b00:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   13b02:	6833      	ldr	r3, [r6, #0]
   13b04:	428b      	cmp	r3, r1
   13b06:	d03c      	beq.n	13b82 <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   13b08:	b123      	cbz	r3, 13b14 <bt_dh_key_gen+0x18>
		return -EBUSY;
   13b0a:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   13b0e:	4620      	mov	r0, r4
   13b10:	b004      	add	sp, #16
   13b12:	bd70      	pop	{r4, r5, r6, pc}
   13b14:	4b1f      	ldr	r3, [pc, #124]	; (13b94 <bt_dh_key_gen+0x98>)
   13b16:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   13b1a:	0692      	lsls	r2, r2, #26
   13b1c:	d4f5      	bmi.n	13b0a <bt_dh_key_gen+0xe>
   13b1e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   13b22:	06db      	lsls	r3, r3, #27
   13b24:	d530      	bpl.n	13b88 <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   13b26:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   13b28:	f242 0026 	movw	r0, #8230	; 0x2026
   13b2c:	2140      	movs	r1, #64	; 0x40
   13b2e:	f7fe f88d 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   13b32:	4605      	mov	r5, r0
   13b34:	b310      	cbz	r0, 13b7c <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   13b36:	2140      	movs	r1, #64	; 0x40
   13b38:	300c      	adds	r0, #12
   13b3a:	f005 fdc5 	bl	196c8 <net_buf_simple_add>
   13b3e:	4623      	mov	r3, r4
   13b40:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13b44:	f853 1b04 	ldr.w	r1, [r3], #4
   13b48:	4293      	cmp	r3, r2
   13b4a:	f840 1b04 	str.w	r1, [r0], #4
   13b4e:	d1f9      	bne.n	13b44 <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   13b50:	2200      	movs	r2, #0
   13b52:	4629      	mov	r1, r5
   13b54:	f242 0026 	movw	r0, #8230	; 0x2026
   13b58:	f7fe f8c6 	bl	11ce8 <bt_hci_cmd_send_sync>
	if (err) {
   13b5c:	4604      	mov	r4, r0
   13b5e:	2800      	cmp	r0, #0
   13b60:	d0d5      	beq.n	13b0e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   13b62:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   13b64:	4a0c      	ldr	r2, [pc, #48]	; (13b98 <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   13b66:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   13b68:	4618      	mov	r0, r3
   13b6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13b6e:	490b      	ldr	r1, [pc, #44]	; (13b9c <bt_dh_key_gen+0xa0>)
   13b70:	2202      	movs	r2, #2
   13b72:	9403      	str	r4, [sp, #12]
   13b74:	9300      	str	r3, [sp, #0]
   13b76:	f012 fded 	bl	26754 <z_log_msg_runtime_create.constprop.0>
		return err;
   13b7a:	e7c8      	b.n	13b0e <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   13b7c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13b80:	e7ef      	b.n	13b62 <bt_dh_key_gen+0x66>
		return -EALREADY;
   13b82:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13b86:	e7c2      	b.n	13b0e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   13b88:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   13b8c:	e7bf      	b.n	13b0e <bt_dh_key_gen+0x12>
   13b8e:	bf00      	nop
   13b90:	20021054 	.word	0x20021054
   13b94:	200080cc 	.word	0x200080cc
   13b98:	0002e4be 	.word	0x0002e4be
   13b9c:	0002a980 	.word	0x0002a980

00013ba0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   13ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13ba2:	4b19      	ldr	r3, [pc, #100]	; (13c08 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   13ba4:	68c5      	ldr	r5, [r0, #12]
   13ba6:	e8d3 2fef 	ldaex	r2, [r3]
   13baa:	f022 0220 	bic.w	r2, r2, #32
   13bae:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13bb2:	2900      	cmp	r1, #0
   13bb4:	d1f7      	bne.n	13ba6 <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   13bb6:	782a      	ldrb	r2, [r5, #0]
   13bb8:	b98a      	cbnz	r2, 13bde <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   13bba:	4914      	ldr	r1, [pc, #80]	; (13c0c <bt_hci_evt_le_pkey_complete+0x6c>)
   13bbc:	1c6a      	adds	r2, r5, #1
   13bbe:	f105 0041 	add.w	r0, r5, #65	; 0x41
   13bc2:	f852 4b04 	ldr.w	r4, [r2], #4
   13bc6:	4282      	cmp	r2, r0
   13bc8:	f841 4b04 	str.w	r4, [r1], #4
   13bcc:	d1f9      	bne.n	13bc2 <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13bce:	e8d3 1fef 	ldaex	r1, [r3]
   13bd2:	f041 0110 	orr.w	r1, r1, #16
   13bd6:	e8c3 1fe2 	stlex	r2, r1, [r3]
   13bda:	2a00      	cmp	r2, #0
   13bdc:	d1f7      	bne.n	13bce <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   13bde:	4e0c      	ldr	r6, [pc, #48]	; (13c10 <bt_hci_evt_le_pkey_complete+0x70>)
   13be0:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13be2:	b16c      	cbz	r4, 13c00 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   13be4:	4f09      	ldr	r7, [pc, #36]	; (13c0c <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13be6:	3c04      	subs	r4, #4
		if (cb->func) {
   13be8:	6823      	ldr	r3, [r4, #0]
   13bea:	b12b      	cbz	r3, 13bf8 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   13bec:	782a      	ldrb	r2, [r5, #0]
   13bee:	2a00      	cmp	r2, #0
   13bf0:	bf0c      	ite	eq
   13bf2:	4638      	moveq	r0, r7
   13bf4:	2000      	movne	r0, #0
   13bf6:	4798      	blx	r3
	return node->next;
   13bf8:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13bfa:	b10c      	cbz	r4, 13c00 <bt_hci_evt_le_pkey_complete+0x60>
   13bfc:	3c04      	subs	r4, #4
   13bfe:	e7f3      	b.n	13be8 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   13c00:	2300      	movs	r3, #0
	list->tail = NULL;
   13c02:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   13c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c08:	200080cc 	.word	0x200080cc
   13c0c:	20022002 	.word	0x20022002
   13c10:	20021058 	.word	0x20021058

00013c14 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   13c14:	4905      	ldr	r1, [pc, #20]	; (13c2c <bt_hci_evt_le_dhkey_complete+0x18>)
   13c16:	680b      	ldr	r3, [r1, #0]
   13c18:	b133      	cbz	r3, 13c28 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   13c1a:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   13c1c:	2000      	movs	r0, #0
   13c1e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   13c20:	7811      	ldrb	r1, [r2, #0]
   13c22:	b901      	cbnz	r1, 13c26 <bt_hci_evt_le_dhkey_complete+0x12>
   13c24:	1c50      	adds	r0, r2, #1
   13c26:	4718      	bx	r3
	}
}
   13c28:	4770      	bx	lr
   13c2a:	bf00      	nop
   13c2c:	20021054 	.word	0x20021054

00013c30 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   13c30:	b570      	push	{r4, r5, r6, lr}
   13c32:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   13c34:	4b12      	ldr	r3, [pc, #72]	; (13c80 <notify_connected+0x50>)
   13c36:	681d      	ldr	r5, [r3, #0]
   13c38:	b995      	cbnz	r5, 13c60 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13c3a:	4d12      	ldr	r5, [pc, #72]	; (13c84 <notify_connected+0x54>)
   13c3c:	4e12      	ldr	r6, [pc, #72]	; (13c88 <notify_connected+0x58>)
   13c3e:	42b5      	cmp	r5, r6
   13c40:	d91c      	bls.n	13c7c <notify_connected+0x4c>
   13c42:	4912      	ldr	r1, [pc, #72]	; (13c8c <notify_connected+0x5c>)
   13c44:	f240 535b 	movw	r3, #1371	; 0x55b
   13c48:	4a11      	ldr	r2, [pc, #68]	; (13c90 <notify_connected+0x60>)
   13c4a:	4812      	ldr	r0, [pc, #72]	; (13c94 <notify_connected+0x64>)
   13c4c:	f011 f943 	bl	24ed6 <assert_print>
   13c50:	4811      	ldr	r0, [pc, #68]	; (13c98 <notify_connected+0x68>)
   13c52:	f011 f940 	bl	24ed6 <assert_print>
   13c56:	f240 515b 	movw	r1, #1371	; 0x55b
   13c5a:	480d      	ldr	r0, [pc, #52]	; (13c90 <notify_connected+0x60>)
   13c5c:	f011 f934 	bl	24ec8 <assert_post_action>
		if (cb->connected) {
   13c60:	682b      	ldr	r3, [r5, #0]
   13c62:	b113      	cbz	r3, 13c6a <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   13c64:	4620      	mov	r0, r4
   13c66:	7b21      	ldrb	r1, [r4, #12]
   13c68:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   13c6a:	69ad      	ldr	r5, [r5, #24]
   13c6c:	e7e4      	b.n	13c38 <notify_connected+0x8>
		if (cb->connected) {
   13c6e:	682b      	ldr	r3, [r5, #0]
   13c70:	b113      	cbz	r3, 13c78 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   13c72:	4620      	mov	r0, r4
   13c74:	7b21      	ldrb	r1, [r4, #12]
   13c76:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13c78:	351c      	adds	r5, #28
   13c7a:	e7e0      	b.n	13c3e <notify_connected+0xe>
   13c7c:	d3f7      	bcc.n	13c6e <notify_connected+0x3e>
		}
	}
}
   13c7e:	bd70      	pop	{r4, r5, r6, pc}
   13c80:	20021080 	.word	0x20021080
   13c84:	0002a8fc 	.word	0x0002a8fc
   13c88:	0002a918 	.word	0x0002a918
   13c8c:	0002e557 	.word	0x0002e557
   13c90:	0002e527 	.word	0x0002e527
   13c94:	0002b939 	.word	0x0002b939
   13c98:	0002ca40 	.word	0x0002ca40

00013c9c <tx_notify>:
{
   13c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ca0:	4604      	mov	r4, r0
	tx->cb = NULL;
   13ca2:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   13ca6:	4f14      	ldr	r7, [pc, #80]	; (13cf8 <tx_notify+0x5c>)
	__asm__ volatile(
   13ca8:	f04f 0220 	mov.w	r2, #32
   13cac:	f3ef 8311 	mrs	r3, BASEPRI
   13cb0:	f382 8812 	msr	BASEPRI_MAX, r2
   13cb4:	f3bf 8f6f 	isb	sy
	return list->head;
   13cb8:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   13cba:	b929      	cbnz	r1, 13cc8 <tx_notify+0x2c>
	__asm__ volatile(
   13cbc:	f383 8811 	msr	BASEPRI, r3
   13cc0:	f3bf 8f6f 	isb	sy
}
   13cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13cc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   13cca:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13ccc:	4281      	cmp	r1, r0
	list->tail = node;
   13cce:	bf08      	it	eq
   13cd0:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   13cd2:	6222      	str	r2, [r4, #32]
   13cd4:	f383 8811 	msr	BASEPRI, r3
   13cd8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   13cdc:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   13ce0:	4638      	mov	r0, r7
	tx->user_data = NULL;
   13ce2:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   13ce6:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   13cea:	f015 fc91 	bl	29610 <k_queue_append>
		cb(conn, user_data, 0);
   13cee:	2200      	movs	r2, #0
   13cf0:	4631      	mov	r1, r6
   13cf2:	4620      	mov	r0, r4
   13cf4:	47a8      	blx	r5
	while (1) {
   13cf6:	e7d7      	b.n	13ca8 <tx_notify+0xc>
   13cf8:	20008be8 	.word	0x20008be8

00013cfc <conn_tx_destroy>:
{
   13cfc:	b570      	push	{r4, r5, r6, lr}
   13cfe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   13d00:	b949      	cbnz	r1, 13d16 <conn_tx_destroy+0x1a>
   13d02:	490d      	ldr	r1, [pc, #52]	; (13d38 <conn_tx_destroy+0x3c>)
   13d04:	480d      	ldr	r0, [pc, #52]	; (13d3c <conn_tx_destroy+0x40>)
   13d06:	2339      	movs	r3, #57	; 0x39
   13d08:	4a0d      	ldr	r2, [pc, #52]	; (13d40 <conn_tx_destroy+0x44>)
   13d0a:	f011 f8e4 	bl	24ed6 <assert_print>
   13d0e:	2139      	movs	r1, #57	; 0x39
   13d10:	480b      	ldr	r0, [pc, #44]	; (13d40 <conn_tx_destroy+0x44>)
   13d12:	f011 f8d9 	bl	24ec8 <assert_post_action>
	tx->cb = NULL;
   13d16:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   13d18:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   13d1c:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   13d1e:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   13d22:	4808      	ldr	r0, [pc, #32]	; (13d44 <conn_tx_destroy+0x48>)
   13d24:	f015 fc74 	bl	29610 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   13d28:	4631      	mov	r1, r6
   13d2a:	4620      	mov	r0, r4
   13d2c:	462b      	mov	r3, r5
}
   13d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   13d32:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   13d36:	4718      	bx	r3
   13d38:	0002e572 	.word	0x0002e572
   13d3c:	0002b939 	.word	0x0002b939
   13d40:	0002e527 	.word	0x0002e527
   13d44:	20008be8 	.word	0x20008be8

00013d48 <send_frag>:
{
   13d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d4c:	4604      	mov	r4, r0
   13d4e:	460e      	mov	r6, r1
   13d50:	4617      	mov	r7, r2
   13d52:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   13d54:	698d      	ldr	r5, [r1, #24]
{
   13d56:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   13d58:	f04f 33ff 	mov.w	r3, #4294967295
   13d5c:	f04f 32ff 	mov.w	r2, #4294967295
   13d60:	4849      	ldr	r0, [pc, #292]	; (13e88 <send_frag+0x140>)
   13d62:	f00c f931 	bl	1ffc8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   13d66:	7b63      	ldrb	r3, [r4, #13]
   13d68:	2b07      	cmp	r3, #7
   13d6a:	f040 8081 	bne.w	13e70 <send_frag+0x128>
	__asm__ volatile(
   13d6e:	f04f 0320 	mov.w	r3, #32
   13d72:	f3ef 8211 	mrs	r2, BASEPRI
   13d76:	f383 8812 	msr	BASEPRI_MAX, r3
   13d7a:	f3bf 8f6f 	isb	sy
	if (tx) {
   13d7e:	2d00      	cmp	r5, #0
   13d80:	d049      	beq.n	13e16 <send_frag+0xce>
	parent->next = child;
   13d82:	2300      	movs	r3, #0
   13d84:	602b      	str	r3, [r5, #0]
	return list->tail;
   13d86:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d141      	bne.n	13e10 <send_frag+0xc8>
	list->head = node;
   13d8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   13d90:	f382 8811 	msr	BASEPRI, r2
   13d94:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   13d98:	2104      	movs	r1, #4
   13d9a:	f106 000c 	add.w	r0, r6, #12
   13d9e:	f005 fc37 	bl	19610 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   13da2:	8823      	ldrh	r3, [r4, #0]
   13da4:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   13da8:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   13dac:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13dae:	8a33      	ldrh	r3, [r6, #16]
   13db0:	3b04      	subs	r3, #4
   13db2:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13db4:	2302      	movs	r3, #2
	return bt_send(buf);
   13db6:	4630      	mov	r0, r6
   13db8:	7633      	strb	r3, [r6, #24]
   13dba:	f7fe fa9b 	bl	122f4 <bt_send>
	if (err) {
   13dbe:	2800      	cmp	r0, #0
   13dc0:	d060      	beq.n	13e84 <send_frag+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   13dc2:	4b32      	ldr	r3, [pc, #200]	; (13e8c <send_frag+0x144>)
   13dc4:	9003      	str	r0, [sp, #12]
   13dc6:	9302      	str	r3, [sp, #8]
   13dc8:	2300      	movs	r3, #0
   13dca:	2201      	movs	r2, #1
   13dcc:	4618      	mov	r0, r3
   13dce:	e9cd 3300 	strd	r3, r3, [sp]
   13dd2:	492f      	ldr	r1, [pc, #188]	; (13e90 <send_frag+0x148>)
   13dd4:	f012 fcf3 	bl	267be <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   13dd8:	f04f 0320 	mov.w	r3, #32
   13ddc:	f3ef 8711 	mrs	r7, BASEPRI
   13de0:	f383 8812 	msr	BASEPRI_MAX, r3
   13de4:	f3bf 8f6f 	isb	sy
		if (tx) {
   13de8:	b315      	cbz	r5, 13e30 <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   13dea:	4629      	mov	r1, r5
   13dec:	f104 0014 	add.w	r0, r4, #20
   13df0:	f012 fcbf 	bl	26772 <sys_slist_find_and_remove>
	__asm__ volatile(
   13df4:	f387 8811 	msr	BASEPRI, r7
   13df8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   13dfc:	4822      	ldr	r0, [pc, #136]	; (13e88 <send_frag+0x140>)
   13dfe:	f00c f89f 	bl	1ff40 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   13e02:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   13e04:	4629      	mov	r1, r5
   13e06:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   13e08:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   13e0a:	f7ff ff77 	bl	13cfc <conn_tx_destroy>
   13e0e:	e028      	b.n	13e62 <send_frag+0x11a>
	parent->next = child;
   13e10:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13e12:	61a5      	str	r5, [r4, #24]
}
   13e14:	e7bc      	b.n	13d90 <send_frag+0x48>
	return list->tail;
   13e16:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   13e18:	b133      	cbz	r3, 13e28 <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   13e1a:	f103 080c 	add.w	r8, r3, #12
   13e1e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   13e20:	3301      	adds	r3, #1
   13e22:	f8c8 3000 	str.w	r3, [r8]
   13e26:	e7b3      	b.n	13d90 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   13e28:	69e3      	ldr	r3, [r4, #28]
   13e2a:	f104 081c 	add.w	r8, r4, #28
   13e2e:	e7f7      	b.n	13e20 <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   13e30:	f8d8 2000 	ldr.w	r2, [r8]
   13e34:	b95a      	cbnz	r2, 13e4e <send_frag+0x106>
   13e36:	4917      	ldr	r1, [pc, #92]	; (13e94 <send_frag+0x14c>)
   13e38:	4817      	ldr	r0, [pc, #92]	; (13e98 <send_frag+0x150>)
   13e3a:	f240 2327 	movw	r3, #551	; 0x227
   13e3e:	4a17      	ldr	r2, [pc, #92]	; (13e9c <send_frag+0x154>)
   13e40:	f011 f849 	bl	24ed6 <assert_print>
   13e44:	f240 2127 	movw	r1, #551	; 0x227
   13e48:	4814      	ldr	r0, [pc, #80]	; (13e9c <send_frag+0x154>)
   13e4a:	f011 f83d 	bl	24ec8 <assert_post_action>
			(*pending_no_cb)--;
   13e4e:	3a01      	subs	r2, #1
   13e50:	f8c8 2000 	str.w	r2, [r8]
   13e54:	f387 8811 	msr	BASEPRI, r7
   13e58:	f3bf 8f6f 	isb	sy
   13e5c:	480a      	ldr	r0, [pc, #40]	; (13e88 <send_frag+0x140>)
   13e5e:	f00c f86f 	bl	1ff40 <z_impl_k_sem_give>
	if (always_consume) {
   13e62:	f1b9 0f00 	cmp.w	r9, #0
   13e66:	d109      	bne.n	13e7c <send_frag+0x134>
	return false;
   13e68:	2000      	movs	r0, #0
}
   13e6a:	b005      	add	sp, #20
   13e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13e70:	4805      	ldr	r0, [pc, #20]	; (13e88 <send_frag+0x140>)
   13e72:	f00c f865 	bl	1ff40 <z_impl_k_sem_give>
	if (tx) {
   13e76:	2d00      	cmp	r5, #0
   13e78:	d1c3      	bne.n	13e02 <send_frag+0xba>
   13e7a:	e7f2      	b.n	13e62 <send_frag+0x11a>
		net_buf_unref(buf);
   13e7c:	4630      	mov	r0, r6
   13e7e:	f005 fb01 	bl	19484 <net_buf_unref>
   13e82:	e7f1      	b.n	13e68 <send_frag+0x120>
	return true;
   13e84:	2001      	movs	r0, #1
   13e86:	e7f0      	b.n	13e6a <send_frag+0x122>
   13e88:	20008100 	.word	0x20008100
   13e8c:	0002dd56 	.word	0x0002dd56
   13e90:	0002a970 	.word	0x0002a970
   13e94:	0002e575 	.word	0x0002e575
   13e98:	0002b939 	.word	0x0002b939
   13e9c:	0002e527 	.word	0x0002e527

00013ea0 <bt_conn_get_pkts>:
}
   13ea0:	4800      	ldr	r0, [pc, #0]	; (13ea4 <bt_conn_get_pkts+0x4>)
   13ea2:	4770      	bx	lr
   13ea4:	20008100 	.word	0x20008100

00013ea8 <bt_conn_new>:
{
   13ea8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   13eaa:	2200      	movs	r2, #0
   13eac:	4604      	mov	r4, r0
   13eae:	428a      	cmp	r2, r1
   13eb0:	d102      	bne.n	13eb8 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13eb2:	2400      	movs	r4, #0
}
   13eb4:	4620      	mov	r0, r4
   13eb6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13eb8:	2001      	movs	r0, #1
   13eba:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   13ebe:	e8d3 5fef 	ldaex	r5, [r3]
   13ec2:	2d00      	cmp	r5, #0
   13ec4:	d104      	bne.n	13ed0 <bt_conn_new+0x28>
   13ec6:	e8c3 0fec 	stlex	ip, r0, [r3]
   13eca:	f1bc 0f00 	cmp.w	ip, #0
   13ece:	d1f6      	bne.n	13ebe <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13ed0:	d002      	beq.n	13ed8 <bt_conn_new+0x30>
   13ed2:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   13ed4:	4402      	add	r2, r0
   13ed6:	e7ea      	b.n	13eae <bt_conn_new+0x6>
	if (!conn) {
   13ed8:	2c00      	cmp	r4, #0
   13eda:	d0ea      	beq.n	13eb2 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   13edc:	22c4      	movs	r2, #196	; 0xc4
   13ede:	2100      	movs	r1, #0
   13ee0:	4620      	mov	r0, r4
   13ee2:	f015 fd98 	bl	29a16 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   13ee6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13eea:	4904      	ldr	r1, [pc, #16]	; (13efc <bt_conn_new+0x54>)
   13eec:	f00c fcac 	bl	20848 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   13ef0:	4903      	ldr	r1, [pc, #12]	; (13f00 <bt_conn_new+0x58>)
   13ef2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13ef6:	f00c facb 	bl	20490 <k_work_init>
	return conn;
   13efa:	e7db      	b.n	13eb4 <bt_conn_new+0xc>
   13efc:	00014915 	.word	0x00014915
   13f00:	000267dd 	.word	0x000267dd

00013f04 <conn_cleanup>:
{
   13f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f08:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   13f0a:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   13f0c:	f104 0638 	add.w	r6, r4, #56	; 0x38
   13f10:	2300      	movs	r3, #0
   13f12:	2200      	movs	r2, #0
   13f14:	4630      	mov	r0, r6
   13f16:	f013 ffaf 	bl	27e78 <net_buf_get>
   13f1a:	4603      	mov	r3, r0
   13f1c:	b980      	cbnz	r0, 13f40 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   13f1e:	6963      	ldr	r3, [r4, #20]
   13f20:	b1cb      	cbz	r3, 13f56 <conn_cleanup+0x52>
   13f22:	4918      	ldr	r1, [pc, #96]	; (13f84 <conn_cleanup+0x80>)
   13f24:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   13f28:	4a17      	ldr	r2, [pc, #92]	; (13f88 <conn_cleanup+0x84>)
   13f2a:	4818      	ldr	r0, [pc, #96]	; (13f8c <conn_cleanup+0x88>)
   13f2c:	f010 ffd3 	bl	24ed6 <assert_print>
   13f30:	4817      	ldr	r0, [pc, #92]	; (13f90 <conn_cleanup+0x8c>)
   13f32:	f010 ffd0 	bl	24ed6 <assert_print>
   13f36:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   13f3a:	4813      	ldr	r0, [pc, #76]	; (13f88 <conn_cleanup+0x84>)
   13f3c:	f010 ffc4 	bl	24ec8 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   13f40:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   13f42:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   13f44:	f005 fa9e 	bl	19484 <net_buf_unref>
		if (tx) {
   13f48:	2d00      	cmp	r5, #0
   13f4a:	d0e1      	beq.n	13f10 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   13f4c:	4629      	mov	r1, r5
   13f4e:	4620      	mov	r0, r4
   13f50:	f7ff fed4 	bl	13cfc <conn_tx_destroy>
   13f54:	e7da      	b.n	13f0c <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   13f56:	69e3      	ldr	r3, [r4, #28]
   13f58:	b14b      	cbz	r3, 13f6e <conn_cleanup+0x6a>
   13f5a:	490e      	ldr	r1, [pc, #56]	; (13f94 <conn_cleanup+0x90>)
   13f5c:	f240 23b5 	movw	r3, #693	; 0x2b5
   13f60:	4a09      	ldr	r2, [pc, #36]	; (13f88 <conn_cleanup+0x84>)
   13f62:	480a      	ldr	r0, [pc, #40]	; (13f8c <conn_cleanup+0x88>)
   13f64:	f010 ffb7 	bl	24ed6 <assert_print>
   13f68:	f240 21b5 	movw	r1, #693	; 0x2b5
   13f6c:	e7e5      	b.n	13f3a <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   13f6e:	4620      	mov	r0, r4
   13f70:	f012 fc37 	bl	267e2 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13f74:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13f78:	2200      	movs	r2, #0
}
   13f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13f7e:	2300      	movs	r3, #0
   13f80:	f00c bd7e 	b.w	20a80 <k_work_reschedule>
   13f84:	0002e588 	.word	0x0002e588
   13f88:	0002e527 	.word	0x0002e527
   13f8c:	0002b939 	.word	0x0002b939
   13f90:	0002e5ae 	.word	0x0002e5ae
   13f94:	0002e5c3 	.word	0x0002e5c3

00013f98 <bt_conn_recv>:
{
   13f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f9a:	4616      	mov	r6, r2
   13f9c:	b087      	sub	sp, #28
   13f9e:	4604      	mov	r4, r0
   13fa0:	460d      	mov	r5, r1
	tx_notify(conn);
   13fa2:	f7ff fe7b 	bl	13c9c <tx_notify>
	switch (flags) {
   13fa6:	2e01      	cmp	r6, #1
   13fa8:	d02e      	beq.n	14008 <bt_conn_recv+0x70>
   13faa:	2e02      	cmp	r6, #2
   13fac:	d165      	bne.n	1407a <bt_conn_recv+0xe2>
		if (conn->rx) {
   13fae:	6923      	ldr	r3, [r4, #16]
   13fb0:	b163      	cbz	r3, 13fcc <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   13fb2:	4b3d      	ldr	r3, [pc, #244]	; (140a8 <bt_conn_recv+0x110>)
   13fb4:	2201      	movs	r2, #1
   13fb6:	9302      	str	r3, [sp, #8]
   13fb8:	2300      	movs	r3, #0
   13fba:	493c      	ldr	r1, [pc, #240]	; (140ac <bt_conn_recv+0x114>)
   13fbc:	4618      	mov	r0, r3
   13fbe:	e9cd 3300 	strd	r3, r3, [sp]
   13fc2:	f012 fbfc 	bl	267be <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   13fc6:	4620      	mov	r0, r4
   13fc8:	f012 fc0b 	bl	267e2 <bt_conn_reset_rx_state>
		conn->rx = buf;
   13fcc:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   13fce:	6921      	ldr	r1, [r4, #16]
   13fd0:	8a0a      	ldrh	r2, [r1, #16]
   13fd2:	2a01      	cmp	r2, #1
   13fd4:	d966      	bls.n	140a4 <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   13fd6:	68cb      	ldr	r3, [r1, #12]
   13fd8:	881b      	ldrh	r3, [r3, #0]
   13fda:	3304      	adds	r3, #4
   13fdc:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   13fde:	429a      	cmp	r2, r3
   13fe0:	d360      	bcc.n	140a4 <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   13fe2:	d956      	bls.n	14092 <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   13fe4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   13fe8:	4b31      	ldr	r3, [pc, #196]	; (140b0 <bt_conn_recv+0x118>)
   13fea:	2201      	movs	r2, #1
   13fec:	9302      	str	r3, [sp, #8]
   13fee:	2300      	movs	r3, #0
   13ff0:	492e      	ldr	r1, [pc, #184]	; (140ac <bt_conn_recv+0x114>)
   13ff2:	4618      	mov	r0, r3
   13ff4:	e9cd 3300 	strd	r3, r3, [sp]
   13ff8:	f012 fbe1 	bl	267be <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   13ffc:	4620      	mov	r0, r4
}
   13ffe:	b007      	add	sp, #28
   14000:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   14004:	f012 bbed 	b.w	267e2 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   14008:	6923      	ldr	r3, [r4, #16]
   1400a:	b963      	cbnz	r3, 14026 <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   1400c:	4a29      	ldr	r2, [pc, #164]	; (140b4 <bt_conn_recv+0x11c>)
   1400e:	4618      	mov	r0, r3
   14010:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14014:	4925      	ldr	r1, [pc, #148]	; (140ac <bt_conn_recv+0x114>)
   14016:	4632      	mov	r2, r6
   14018:	9300      	str	r3, [sp, #0]
   1401a:	f012 fbd0 	bl	267be <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1401e:	4620      	mov	r0, r4
   14020:	f012 fbdf 	bl	267e2 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   14024:	e001      	b.n	1402a <bt_conn_recv+0x92>
		if (!buf->len) {
   14026:	8a2f      	ldrh	r7, [r5, #16]
   14028:	b92f      	cbnz	r7, 14036 <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   1402a:	4628      	mov	r0, r5
}
   1402c:	b007      	add	sp, #28
   1402e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   14032:	f005 ba27 	b.w	19484 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14036:	f103 000c 	add.w	r0, r3, #12
   1403a:	f013 ff32 	bl	27ea2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1403e:	4287      	cmp	r7, r0
   14040:	d911      	bls.n	14066 <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14042:	2700      	movs	r7, #0
   14044:	4b1c      	ldr	r3, [pc, #112]	; (140b8 <bt_conn_recv+0x120>)
   14046:	4632      	mov	r2, r6
   14048:	4638      	mov	r0, r7
   1404a:	4918      	ldr	r1, [pc, #96]	; (140ac <bt_conn_recv+0x114>)
   1404c:	9302      	str	r3, [sp, #8]
   1404e:	e9cd 7700 	strd	r7, r7, [sp]
   14052:	463b      	mov	r3, r7
   14054:	f012 fbb3 	bl	267be <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14058:	463a      	mov	r2, r7
   1405a:	4620      	mov	r0, r4
   1405c:	6921      	ldr	r1, [r4, #16]
   1405e:	f000 fefd 	bl	14e5c <bt_l2cap_recv>
			conn->rx = NULL;
   14062:	6127      	str	r7, [r4, #16]
   14064:	e7e1      	b.n	1402a <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14066:	6920      	ldr	r0, [r4, #16]
   14068:	8a2a      	ldrh	r2, [r5, #16]
   1406a:	68e9      	ldr	r1, [r5, #12]
   1406c:	300c      	adds	r0, #12
   1406e:	f013 ff20 	bl	27eb2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14072:	4628      	mov	r0, r5
   14074:	f005 fa06 	bl	19484 <net_buf_unref>
		break;
   14078:	e7a9      	b.n	13fce <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1407a:	4b10      	ldr	r3, [pc, #64]	; (140bc <bt_conn_recv+0x124>)
   1407c:	2201      	movs	r2, #1
   1407e:	9302      	str	r3, [sp, #8]
   14080:	2300      	movs	r3, #0
   14082:	490a      	ldr	r1, [pc, #40]	; (140ac <bt_conn_recv+0x114>)
   14084:	4618      	mov	r0, r3
   14086:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   1408a:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1408c:	f012 fb97 	bl	267be <z_log_msg_runtime_create.constprop.0>
   14090:	e7c5      	b.n	1401e <bt_conn_recv+0x86>
	conn->rx = NULL;
   14092:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   14094:	2201      	movs	r2, #1
   14096:	4620      	mov	r0, r4
	conn->rx = NULL;
   14098:	6123      	str	r3, [r4, #16]
}
   1409a:	b007      	add	sp, #28
   1409c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   140a0:	f000 bedc 	b.w	14e5c <bt_l2cap_recv>
}
   140a4:	b007      	add	sp, #28
   140a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   140a8:	0002e5dc 	.word	0x0002e5dc
   140ac:	0002a970 	.word	0x0002a970
   140b0:	0002e65c 	.word	0x0002e65c
   140b4:	0002e5f9 	.word	0x0002e5f9
   140b8:	0002e617 	.word	0x0002e617
   140bc:	0002e63e 	.word	0x0002e63e

000140c0 <bt_conn_send_cb>:
{
   140c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   140c4:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   140c6:	7b43      	ldrb	r3, [r0, #13]
{
   140c8:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   140ca:	2b07      	cmp	r3, #7
{
   140cc:	4688      	mov	r8, r1
   140ce:	4617      	mov	r7, r2
   140d0:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   140d2:	d00c      	beq.n	140ee <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   140d4:	4b28      	ldr	r3, [pc, #160]	; (14178 <bt_conn_send_cb+0xb8>)
   140d6:	2201      	movs	r2, #1
   140d8:	9302      	str	r3, [sp, #8]
   140da:	2300      	movs	r3, #0
   140dc:	4927      	ldr	r1, [pc, #156]	; (1417c <bt_conn_send_cb+0xbc>)
   140de:	4618      	mov	r0, r3
   140e0:	e9cd 3300 	strd	r3, r3, [sp]
   140e4:	f012 fb6b 	bl	267be <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   140e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   140ec:	e01c      	b.n	14128 <bt_conn_send_cb+0x68>
	if (cb) {
   140ee:	2a00      	cmp	r2, #0
   140f0:	d03f      	beq.n	14172 <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   140f2:	f00d fe4d 	bl	21d90 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   140f6:	4b22      	ldr	r3, [pc, #136]	; (14180 <bt_conn_send_cb+0xc0>)
   140f8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   140fa:	4822      	ldr	r0, [pc, #136]	; (14184 <bt_conn_send_cb+0xc4>)
   140fc:	bf07      	ittee	eq
   140fe:	2200      	moveq	r2, #0
   14100:	2300      	moveq	r3, #0
   14102:	f04f 32ff 	movne.w	r2, #4294967295
   14106:	f04f 33ff 	movne.w	r3, #4294967295
   1410a:	f00b feaf 	bl	1fe6c <z_impl_k_queue_get>
   1410e:	4604      	mov	r4, r0
		if (!tx) {
   14110:	b968      	cbnz	r0, 1412e <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   14112:	4b1d      	ldr	r3, [pc, #116]	; (14188 <bt_conn_send_cb+0xc8>)
   14114:	9000      	str	r0, [sp, #0]
   14116:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1411a:	2201      	movs	r2, #1
   1411c:	4603      	mov	r3, r0
   1411e:	4917      	ldr	r1, [pc, #92]	; (1417c <bt_conn_send_cb+0xbc>)
   14120:	f012 fb4d 	bl	267be <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   14124:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14128:	b005      	add	sp, #20
   1412a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1412e:	7b73      	ldrb	r3, [r6, #13]
   14130:	2500      	movs	r5, #0
   14132:	2b07      	cmp	r3, #7
   14134:	d011      	beq.n	1415a <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   14136:	4b15      	ldr	r3, [pc, #84]	; (1418c <bt_conn_send_cb+0xcc>)
   14138:	4628      	mov	r0, r5
   1413a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1413e:	2202      	movs	r2, #2
   14140:	462b      	mov	r3, r5
   14142:	490e      	ldr	r1, [pc, #56]	; (1417c <bt_conn_send_cb+0xbc>)
   14144:	9500      	str	r5, [sp, #0]
   14146:	f012 fb3a 	bl	267be <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   1414a:	4621      	mov	r1, r4
	tx->user_data = NULL;
   1414c:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   14150:	480c      	ldr	r0, [pc, #48]	; (14184 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   14152:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14154:	f015 fa5c 	bl	29610 <k_queue_append>
}
   14158:	e7c6      	b.n	140e8 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   1415a:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   1415e:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   14160:	f106 0038 	add.w	r0, r6, #56	; 0x38
   14164:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   14166:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   1416a:	f005 f965 	bl	19438 <net_buf_put>
	return 0;
   1416e:	2000      	movs	r0, #0
   14170:	e7da      	b.n	14128 <bt_conn_send_cb+0x68>
   14172:	4614      	mov	r4, r2
   14174:	e7f4      	b.n	14160 <bt_conn_send_cb+0xa0>
   14176:	bf00      	nop
   14178:	0002e677 	.word	0x0002e677
   1417c:	0002a970 	.word	0x0002a970
   14180:	20009d18 	.word	0x20009d18
   14184:	20008be8 	.word	0x20008be8
   14188:	0002e686 	.word	0x0002e686
   1418c:	0002e6a4 	.word	0x0002e6a4

00014190 <bt_conn_prepare_events>:
{
   14190:	b570      	push	{r4, r5, r6, lr}
   14192:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   14194:	4817      	ldr	r0, [pc, #92]	; (141f4 <bt_conn_prepare_events+0x64>)
   14196:	f015 fbe3 	bl	29960 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1419a:	2200      	movs	r2, #0
   1419c:	2101      	movs	r1, #1
   1419e:	4620      	mov	r0, r4
   141a0:	4b14      	ldr	r3, [pc, #80]	; (141f4 <bt_conn_prepare_events+0x64>)
   141a2:	f00e fcfd 	bl	22ba0 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   141a6:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   141aa:	4b13      	ldr	r3, [pc, #76]	; (141f8 <bt_conn_prepare_events+0x68>)
   141ac:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   141b0:	b90a      	cbnz	r2, 141b6 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   141b2:	2001      	movs	r0, #1
}
   141b4:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   141b6:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   141ba:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   141be:	b953      	cbnz	r3, 141d6 <bt_conn_prepare_events+0x46>
   141c0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   141c4:	1d28      	adds	r0, r5, #4
   141c6:	f012 faef 	bl	267a8 <atomic_and>
   141ca:	0643      	lsls	r3, r0, #25
   141cc:	d503      	bpl.n	141d6 <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   141ce:	4628      	mov	r0, r5
   141d0:	f7ff fe98 	bl	13f04 <conn_cleanup>
		return -ENOTCONN;
   141d4:	e7ed      	b.n	141b2 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   141d6:	7b6b      	ldrb	r3, [r5, #13]
   141d8:	2b07      	cmp	r3, #7
   141da:	d1ea      	bne.n	141b2 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   141dc:	4630      	mov	r0, r6
   141de:	4b07      	ldr	r3, [pc, #28]	; (141fc <bt_conn_prepare_events+0x6c>)
   141e0:	2200      	movs	r2, #0
   141e2:	2104      	movs	r1, #4
   141e4:	f00e fcdc 	bl	22ba0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   141e8:	2301      	movs	r3, #1
			ev_count++;
   141ea:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   141ec:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   141f0:	e7e0      	b.n	141b4 <bt_conn_prepare_events+0x24>
   141f2:	bf00      	nop
   141f4:	200084b8 	.word	0x200084b8
   141f8:	2000995c 	.word	0x2000995c
   141fc:	200098d0 	.word	0x200098d0

00014200 <bt_conn_ref>:
{
   14200:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   14202:	b180      	cbz	r0, 14226 <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   14204:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   14208:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   1420c:	b1bb      	cbz	r3, 1423e <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1420e:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14210:	e8d2 4fef 	ldaex	r4, [r2]
   14214:	429c      	cmp	r4, r3
   14216:	d104      	bne.n	14222 <bt_conn_ref+0x22>
   14218:	e8c2 1fec 	stlex	ip, r1, [r2]
   1421c:	f1bc 0f00 	cmp.w	ip, #0
   14220:	d1f6      	bne.n	14210 <bt_conn_ref+0x10>
   14222:	d1f1      	bne.n	14208 <bt_conn_ref+0x8>
}
   14224:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   14226:	4907      	ldr	r1, [pc, #28]	; (14244 <bt_conn_ref+0x44>)
   14228:	4807      	ldr	r0, [pc, #28]	; (14248 <bt_conn_ref+0x48>)
   1422a:	f240 437c 	movw	r3, #1148	; 0x47c
   1422e:	4a07      	ldr	r2, [pc, #28]	; (1424c <bt_conn_ref+0x4c>)
   14230:	f010 fe51 	bl	24ed6 <assert_print>
   14234:	f240 417c 	movw	r1, #1148	; 0x47c
   14238:	4804      	ldr	r0, [pc, #16]	; (1424c <bt_conn_ref+0x4c>)
   1423a:	f010 fe45 	bl	24ec8 <assert_post_action>
			return NULL;
   1423e:	4618      	mov	r0, r3
   14240:	e7f0      	b.n	14224 <bt_conn_ref+0x24>
   14242:	bf00      	nop
   14244:	0002ddc8 	.word	0x0002ddc8
   14248:	0002b939 	.word	0x0002b939
   1424c:	0002e527 	.word	0x0002e527

00014250 <bt_conn_unref>:
{
   14250:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   14252:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14256:	e8d3 2fef 	ldaex	r2, [r3]
   1425a:	1e51      	subs	r1, r2, #1
   1425c:	e8c3 1fe4 	stlex	r4, r1, [r3]
   14260:	2c00      	cmp	r4, #0
   14262:	d1f8      	bne.n	14256 <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   14264:	2a00      	cmp	r2, #0
   14266:	dc0e      	bgt.n	14286 <bt_conn_unref+0x36>
   14268:	490d      	ldr	r1, [pc, #52]	; (142a0 <bt_conn_unref+0x50>)
   1426a:	f44f 6393 	mov.w	r3, #1176	; 0x498
   1426e:	4a0d      	ldr	r2, [pc, #52]	; (142a4 <bt_conn_unref+0x54>)
   14270:	480d      	ldr	r0, [pc, #52]	; (142a8 <bt_conn_unref+0x58>)
   14272:	f010 fe30 	bl	24ed6 <assert_print>
   14276:	480d      	ldr	r0, [pc, #52]	; (142ac <bt_conn_unref+0x5c>)
   14278:	f010 fe2d 	bl	24ed6 <assert_print>
   1427c:	f44f 6193 	mov.w	r1, #1176	; 0x498
   14280:	4808      	ldr	r0, [pc, #32]	; (142a4 <bt_conn_unref+0x54>)
   14282:	f010 fe21 	bl	24ec8 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   14286:	f240 1201 	movw	r2, #257	; 0x101
   1428a:	8841      	ldrh	r1, [r0, #2]
   1428c:	4291      	cmp	r1, r2
   1428e:	d106      	bne.n	1429e <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14290:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   14294:	b91b      	cbnz	r3, 1429e <bt_conn_unref+0x4e>
}
   14296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1429a:	f7ff baa9 	b.w	137f0 <bt_le_adv_resume>
}
   1429e:	bd10      	pop	{r4, pc}
   142a0:	0002e6ca 	.word	0x0002e6ca
   142a4:	0002e527 	.word	0x0002e527
   142a8:	0002b939 	.word	0x0002b939
   142ac:	0002e6d2 	.word	0x0002e6d2

000142b0 <bt_conn_lookup_handle>:
{
   142b0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   142b2:	2101      	movs	r1, #1
   142b4:	4801      	ldr	r0, [pc, #4]	; (142bc <bt_conn_lookup_handle+0xc>)
   142b6:	f012 ba9d 	b.w	267f4 <conn_lookup_handle>
   142ba:	bf00      	nop
   142bc:	20009898 	.word	0x20009898

000142c0 <bt_conn_set_state>:
{
   142c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   142c2:	7b46      	ldrb	r6, [r0, #13]
{
   142c4:	4604      	mov	r4, r0
	if (conn->state == state) {
   142c6:	428e      	cmp	r6, r1
{
   142c8:	460d      	mov	r5, r1
	if (conn->state == state) {
   142ca:	d111      	bne.n	142f0 <bt_conn_set_state+0x30>
	switch (state) {
   142cc:	2e08      	cmp	r6, #8
   142ce:	bf96      	itet	ls
   142d0:	4b65      	ldrls	r3, [pc, #404]	; (14468 <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   142d2:	4b66      	ldrhi	r3, [pc, #408]	; (1446c <bt_conn_set_state+0x1ac>)
   142d4:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   142d8:	9303      	str	r3, [sp, #12]
   142da:	4b65      	ldr	r3, [pc, #404]	; (14470 <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   142dc:	9302      	str	r3, [sp, #8]
   142de:	2300      	movs	r3, #0
   142e0:	2202      	movs	r2, #2
   142e2:	4618      	mov	r0, r3
   142e4:	e9cd 3300 	strd	r3, r3, [sp]
   142e8:	4962      	ldr	r1, [pc, #392]	; (14474 <bt_conn_set_state+0x1b4>)
   142ea:	f012 fa68 	bl	267be <z_log_msg_runtime_create.constprop.0>
   142ee:	e098      	b.n	14422 <bt_conn_set_state+0x162>
	conn->state = state;
   142f0:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   142f2:	b926      	cbnz	r6, 142fe <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   142f4:	7883      	ldrb	r3, [r0, #2]
   142f6:	2b08      	cmp	r3, #8
   142f8:	d001      	beq.n	142fe <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   142fa:	f7ff ff81 	bl	14200 <bt_conn_ref>
	switch (conn->state) {
   142fe:	7b63      	ldrb	r3, [r4, #13]
   14300:	2b08      	cmp	r3, #8
   14302:	f200 80ad 	bhi.w	14460 <bt_conn_set_state+0x1a0>
   14306:	e8df f003 	tbb	[pc, r3]
   1430a:	053a      	.short	0x053a
   1430c:	8c8c8c8c 	.word	0x8c8c8c8c
   14310:	1c8c      	.short	0x1c8c
   14312:	8c          	.byte	0x8c
   14313:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   14314:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   14316:	4d58      	ldr	r5, [pc, #352]	; (14478 <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   14318:	f04f 0220 	mov.w	r2, #32
   1431c:	f3ef 8311 	mrs	r3, BASEPRI
   14320:	f382 8812 	msr	BASEPRI_MAX, r2
   14324:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14328:	69e2      	ldr	r2, [r4, #28]
   1432a:	2a00      	cmp	r2, #0
   1432c:	d073      	beq.n	14416 <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   1432e:	3a01      	subs	r2, #1
   14330:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   14332:	f383 8811 	msr	BASEPRI, r3
   14336:	f3bf 8f6f 	isb	sy
   1433a:	4628      	mov	r0, r5
   1433c:	f00b fe00 	bl	1ff40 <z_impl_k_sem_give>
}
   14340:	e7ea      	b.n	14318 <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14342:	78a3      	ldrb	r3, [r4, #2]
   14344:	2b04      	cmp	r3, #4
   14346:	d06c      	beq.n	14422 <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   14348:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1434c:	f015 f953 	bl	295f6 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   14350:	2100      	movs	r1, #0
   14352:	484a      	ldr	r0, [pc, #296]	; (1447c <bt_conn_set_state+0x1bc>)
   14354:	f00e fd42 	bl	22ddc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14358:	2300      	movs	r3, #0
	list->tail = NULL;
   1435a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1435e:	78e3      	ldrb	r3, [r4, #3]
   14360:	2b01      	cmp	r3, #1
   14362:	d15e      	bne.n	14422 <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   14364:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   14366:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   1436a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   1436e:	2300      	movs	r3, #0
   14370:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   14374:	b004      	add	sp, #16
   14376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1437a:	f00c bb07 	b.w	2098c <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1437e:	78a3      	ldrb	r3, [r4, #2]
   14380:	2b04      	cmp	r3, #4
   14382:	d105      	bne.n	14390 <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   14384:	4620      	mov	r0, r4
}
   14386:	b004      	add	sp, #16
   14388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1438c:	f7ff bf60 	b.w	14250 <bt_conn_unref>
		switch (old_state) {
   14390:	2e08      	cmp	r6, #8
   14392:	d846      	bhi.n	14422 <bt_conn_set_state+0x162>
   14394:	a301      	add	r3, pc, #4	; (adr r3, 1439c <bt_conn_set_state+0xdc>)
   14396:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1439a:	bf00      	nop
   1439c:	00014411 	.word	0x00014411
   143a0:	000143c1 	.word	0x000143c1
   143a4:	00014403 	.word	0x00014403
   143a8:	00014385 	.word	0x00014385
   143ac:	00014385 	.word	0x00014385
   143b0:	00014403 	.word	0x00014403
   143b4:	00014403 	.word	0x00014403
   143b8:	00014423 	.word	0x00014423
   143bc:	00014411 	.word	0x00014411
			tx_notify(conn);
   143c0:	4620      	mov	r0, r4
   143c2:	f7ff fc6b 	bl	13c9c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   143c6:	78a3      	ldrb	r3, [r4, #2]
   143c8:	2b01      	cmp	r3, #1
   143ca:	d10a      	bne.n	143e2 <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   143cc:	f104 0560 	add.w	r5, r4, #96	; 0x60
   143d0:	4628      	mov	r0, r5
   143d2:	f015 f9a6 	bl	29722 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   143d6:	f010 0f0c 	tst.w	r0, #12
   143da:	d002      	beq.n	143e2 <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   143dc:	4628      	mov	r0, r5
   143de:	f00c fb55 	bl	20a8c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   143e2:	3404      	adds	r4, #4
   143e4:	e8d4 3fef 	ldaex	r3, [r4]
   143e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   143ec:	e8c4 3fe2 	stlex	r2, r3, [r4]
   143f0:	2a00      	cmp	r2, #0
   143f2:	d1f7      	bne.n	143e4 <bt_conn_set_state+0x124>
   143f4:	2100      	movs	r1, #0
   143f6:	4821      	ldr	r0, [pc, #132]	; (1447c <bt_conn_set_state+0x1bc>)
}
   143f8:	b004      	add	sp, #16
   143fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   143fe:	f00e bced 	b.w	22ddc <z_impl_k_poll_signal_raise>
			if (conn->err) {
   14402:	7b23      	ldrb	r3, [r4, #12]
   14404:	2b00      	cmp	r3, #0
   14406:	d0bd      	beq.n	14384 <bt_conn_set_state+0xc4>
				notify_connected(conn);
   14408:	4620      	mov	r0, r4
   1440a:	f7ff fc11 	bl	13c30 <notify_connected>
   1440e:	e7b9      	b.n	14384 <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   14410:	4b1b      	ldr	r3, [pc, #108]	; (14480 <bt_conn_set_state+0x1c0>)
   14412:	9503      	str	r5, [sp, #12]
   14414:	e762      	b.n	142dc <bt_conn_set_state+0x1c>
	return list->head;
   14416:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14418:	b929      	cbnz	r1, 14426 <bt_conn_set_state+0x166>
   1441a:	f383 8811 	msr	BASEPRI, r3
   1441e:	f3bf 8f6f 	isb	sy
}
   14422:	b004      	add	sp, #16
   14424:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14426:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   14428:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1442a:	4281      	cmp	r1, r0
	list->tail = node;
   1442c:	bf08      	it	eq
   1442e:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   14430:	6162      	str	r2, [r4, #20]
   14432:	f383 8811 	msr	BASEPRI, r3
   14436:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1443a:	f04f 0220 	mov.w	r2, #32
   1443e:	f3ef 8311 	mrs	r3, BASEPRI
   14442:	f382 8812 	msr	BASEPRI_MAX, r2
   14446:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1444a:	68ca      	ldr	r2, [r1, #12]
   1444c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1444e:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   14450:	f383 8811 	msr	BASEPRI, r3
   14454:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   14458:	4620      	mov	r0, r4
   1445a:	f7ff fc4f 	bl	13cfc <conn_tx_destroy>
   1445e:	e76c      	b.n	1433a <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   14460:	4b08      	ldr	r3, [pc, #32]	; (14484 <bt_conn_set_state+0x1c4>)
   14462:	9503      	str	r5, [sp, #12]
   14464:	e73a      	b.n	142dc <bt_conn_set_state+0x1c>
   14466:	bf00      	nop
   14468:	0002b2bc 	.word	0x0002b2bc
   1446c:	0002e6f0 	.word	0x0002e6f0
   14470:	0002e6fa 	.word	0x0002e6fa
   14474:	0002a970 	.word	0x0002a970
   14478:	20008100 	.word	0x20008100
   1447c:	200084b8 	.word	0x200084b8
   14480:	0002e70b 	.word	0x0002e70b
   14484:	0002e722 	.word	0x0002e722

00014488 <bt_conn_index>:
		index = conn - acl_conns;
   14488:	4a0c      	ldr	r2, [pc, #48]	; (144bc <bt_conn_index+0x34>)
{
   1448a:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   1448c:	490c      	ldr	r1, [pc, #48]	; (144c0 <bt_conn_index+0x38>)
   1448e:	1a83      	subs	r3, r0, r2
   14490:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14492:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   14494:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14498:	d00e      	beq.n	144b8 <bt_conn_index+0x30>
   1449a:	490a      	ldr	r1, [pc, #40]	; (144c4 <bt_conn_index+0x3c>)
   1449c:	f240 43b6 	movw	r3, #1206	; 0x4b6
   144a0:	4a09      	ldr	r2, [pc, #36]	; (144c8 <bt_conn_index+0x40>)
   144a2:	480a      	ldr	r0, [pc, #40]	; (144cc <bt_conn_index+0x44>)
   144a4:	f010 fd17 	bl	24ed6 <assert_print>
   144a8:	4809      	ldr	r0, [pc, #36]	; (144d0 <bt_conn_index+0x48>)
   144aa:	f010 fd14 	bl	24ed6 <assert_print>
   144ae:	f240 41b6 	movw	r1, #1206	; 0x4b6
   144b2:	4805      	ldr	r0, [pc, #20]	; (144c8 <bt_conn_index+0x40>)
   144b4:	f010 fd08 	bl	24ec8 <assert_post_action>
}
   144b8:	b2d8      	uxtb	r0, r3
   144ba:	bd08      	pop	{r3, pc}
   144bc:	20009898 	.word	0x20009898
   144c0:	c28f5c29 	.word	0xc28f5c29
   144c4:	0002e73e 	.word	0x0002e73e
   144c8:	0002e527 	.word	0x0002e527
   144cc:	0002b939 	.word	0x0002b939
   144d0:	0002e807 	.word	0x0002e807

000144d4 <bt_conn_create_pdu_timeout>:
{
   144d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   144d6:	b085      	sub	sp, #20
   144d8:	4604      	mov	r4, r0
   144da:	460d      	mov	r5, r1
   144dc:	4617      	mov	r7, r2
   144de:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   144e0:	f015 f85a 	bl	29598 <k_is_in_isr>
   144e4:	b158      	cbz	r0, 144fe <bt_conn_create_pdu_timeout+0x2a>
   144e6:	4914      	ldr	r1, [pc, #80]	; (14538 <bt_conn_create_pdu_timeout+0x64>)
   144e8:	4814      	ldr	r0, [pc, #80]	; (1453c <bt_conn_create_pdu_timeout+0x68>)
   144ea:	f240 43d2 	movw	r3, #1234	; 0x4d2
   144ee:	4a14      	ldr	r2, [pc, #80]	; (14540 <bt_conn_create_pdu_timeout+0x6c>)
   144f0:	f010 fcf1 	bl	24ed6 <assert_print>
   144f4:	f240 41d2 	movw	r1, #1234	; 0x4d2
   144f8:	4811      	ldr	r0, [pc, #68]	; (14540 <bt_conn_create_pdu_timeout+0x6c>)
   144fa:	f010 fce5 	bl	24ec8 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   144fe:	4911      	ldr	r1, [pc, #68]	; (14544 <bt_conn_create_pdu_timeout+0x70>)
   14500:	463a      	mov	r2, r7
   14502:	2c00      	cmp	r4, #0
   14504:	bf14      	ite	ne
   14506:	4620      	movne	r0, r4
   14508:	4608      	moveq	r0, r1
   1450a:	4633      	mov	r3, r6
   1450c:	f013 fcaf 	bl	27e6e <net_buf_alloc_fixed>
	if (!buf) {
   14510:	4604      	mov	r4, r0
   14512:	b958      	cbnz	r0, 1452c <bt_conn_create_pdu_timeout+0x58>
		LOG_WRN("Unable to allocate buffer within timeout");
   14514:	4b0c      	ldr	r3, [pc, #48]	; (14548 <bt_conn_create_pdu_timeout+0x74>)
   14516:	2202      	movs	r2, #2
   14518:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1451c:	490b      	ldr	r1, [pc, #44]	; (1454c <bt_conn_create_pdu_timeout+0x78>)
   1451e:	4603      	mov	r3, r0
   14520:	9000      	str	r0, [sp, #0]
   14522:	f012 f94c 	bl	267be <z_log_msg_runtime_create.constprop.0>
}
   14526:	4620      	mov	r0, r4
   14528:	b005      	add	sp, #20
   1452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1452c:	1d69      	adds	r1, r5, #5
   1452e:	300c      	adds	r0, #12
   14530:	f004 fe96 	bl	19260 <net_buf_simple_reserve>
	return buf;
   14534:	e7f7      	b.n	14526 <bt_conn_create_pdu_timeout+0x52>
   14536:	bf00      	nop
   14538:	0002e821 	.word	0x0002e821
   1453c:	0002b939 	.word	0x0002b939
   14540:	0002e527 	.word	0x0002e527
   14544:	20008c38 	.word	0x20008c38
   14548:	0002e830 	.word	0x0002e830
   1454c:	0002a970 	.word	0x0002a970

00014550 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   14550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14552:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14554:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14556:	e8d0 3faf 	lda	r3, [r0]
   1455a:	059b      	lsls	r3, r3, #22
   1455c:	d511      	bpl.n	14582 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1455e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14562:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   14566:	429a      	cmp	r2, r3
   14568:	d80b      	bhi.n	14582 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1456a:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   1456e:	429a      	cmp	r2, r3
   14570:	d307      	bcc.n	14582 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14572:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   14576:	429a      	cmp	r2, r3
   14578:	d103      	bne.n	14582 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1457a:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1457e:	f012 f913 	bl	267a8 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14582:	4b18      	ldr	r3, [pc, #96]	; (145e4 <notify_le_param_updated+0x94>)
   14584:	681d      	ldr	r5, [r3, #0]
   14586:	b995      	cbnz	r5, 145ae <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14588:	4d17      	ldr	r5, [pc, #92]	; (145e8 <notify_le_param_updated+0x98>)
   1458a:	4f18      	ldr	r7, [pc, #96]	; (145ec <notify_le_param_updated+0x9c>)
   1458c:	42bd      	cmp	r5, r7
   1458e:	d926      	bls.n	145de <notify_le_param_updated+0x8e>
   14590:	4917      	ldr	r1, [pc, #92]	; (145f0 <notify_le_param_updated+0xa0>)
   14592:	f240 53a5 	movw	r3, #1445	; 0x5a5
   14596:	4a17      	ldr	r2, [pc, #92]	; (145f4 <notify_le_param_updated+0xa4>)
   14598:	4817      	ldr	r0, [pc, #92]	; (145f8 <notify_le_param_updated+0xa8>)
   1459a:	f010 fc9c 	bl	24ed6 <assert_print>
   1459e:	4817      	ldr	r0, [pc, #92]	; (145fc <notify_le_param_updated+0xac>)
   145a0:	f010 fc99 	bl	24ed6 <assert_print>
   145a4:	f240 51a5 	movw	r1, #1445	; 0x5a5
   145a8:	4812      	ldr	r0, [pc, #72]	; (145f4 <notify_le_param_updated+0xa4>)
   145aa:	f010 fc8d 	bl	24ec8 <assert_post_action>
		if (cb->le_param_updated) {
   145ae:	68ee      	ldr	r6, [r5, #12]
   145b0:	b13e      	cbz	r6, 145c2 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   145b2:	4620      	mov	r0, r4
   145b4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   145b8:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   145bc:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   145c0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   145c2:	69ad      	ldr	r5, [r5, #24]
   145c4:	e7df      	b.n	14586 <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   145c6:	68ee      	ldr	r6, [r5, #12]
   145c8:	b13e      	cbz	r6, 145da <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   145ca:	4620      	mov	r0, r4
   145cc:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   145d0:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   145d4:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   145d8:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   145da:	351c      	adds	r5, #28
   145dc:	e7d6      	b.n	1458c <notify_le_param_updated+0x3c>
   145de:	d3f2      	bcc.n	145c6 <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   145e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145e2:	bf00      	nop
   145e4:	20021080 	.word	0x20021080
   145e8:	0002a8fc 	.word	0x0002a8fc
   145ec:	0002a918 	.word	0x0002a918
   145f0:	0002e557 	.word	0x0002e557
   145f4:	0002e527 	.word	0x0002e527
   145f8:	0002b939 	.word	0x0002b939
   145fc:	0002ca40 	.word	0x0002ca40

00014600 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   14600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14604:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14606:	4608      	mov	r0, r1
{
   14608:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1460a:	f011 fe6d 	bl	262e8 <bt_le_conn_params_valid>
   1460e:	4605      	mov	r5, r0
   14610:	b918      	cbnz	r0, 1461a <le_param_req+0x1a>
		return false;
   14612:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   14614:	4628      	mov	r0, r5
   14616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1461a:	4b1b      	ldr	r3, [pc, #108]	; (14688 <le_param_req+0x88>)
   1461c:	681e      	ldr	r6, [r3, #0]
   1461e:	b99e      	cbnz	r6, 14648 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14620:	4e1a      	ldr	r6, [pc, #104]	; (1468c <le_param_req+0x8c>)
   14622:	f8df 806c 	ldr.w	r8, [pc, #108]	; 14690 <le_param_req+0x90>
   14626:	4546      	cmp	r6, r8
   14628:	d927      	bls.n	1467a <le_param_req+0x7a>
   1462a:	491a      	ldr	r1, [pc, #104]	; (14694 <le_param_req+0x94>)
   1462c:	f240 53ed 	movw	r3, #1517	; 0x5ed
   14630:	4a19      	ldr	r2, [pc, #100]	; (14698 <le_param_req+0x98>)
   14632:	481a      	ldr	r0, [pc, #104]	; (1469c <le_param_req+0x9c>)
   14634:	f010 fc4f 	bl	24ed6 <assert_print>
   14638:	4819      	ldr	r0, [pc, #100]	; (146a0 <le_param_req+0xa0>)
   1463a:	f010 fc4c 	bl	24ed6 <assert_print>
   1463e:	f240 51ed 	movw	r1, #1517	; 0x5ed
   14642:	4815      	ldr	r0, [pc, #84]	; (14698 <le_param_req+0x98>)
   14644:	f010 fc40 	bl	24ec8 <assert_post_action>
		if (!cb->le_param_req) {
   14648:	68b3      	ldr	r3, [r6, #8]
   1464a:	b90b      	cbnz	r3, 14650 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   1464c:	69b6      	ldr	r6, [r6, #24]
   1464e:	e7e6      	b.n	1461e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   14650:	4621      	mov	r1, r4
   14652:	4638      	mov	r0, r7
   14654:	4798      	blx	r3
   14656:	2800      	cmp	r0, #0
   14658:	d0db      	beq.n	14612 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1465a:	4620      	mov	r0, r4
   1465c:	f011 fe44 	bl	262e8 <bt_le_conn_params_valid>
   14660:	2800      	cmp	r0, #0
   14662:	d1f3      	bne.n	1464c <le_param_req+0x4c>
   14664:	e7d5      	b.n	14612 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   14666:	4621      	mov	r1, r4
   14668:	4638      	mov	r0, r7
   1466a:	4798      	blx	r3
   1466c:	2800      	cmp	r0, #0
   1466e:	d0d0      	beq.n	14612 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14670:	4620      	mov	r0, r4
   14672:	f011 fe39 	bl	262e8 <bt_le_conn_params_valid>
   14676:	b920      	cbnz	r0, 14682 <le_param_req+0x82>
   14678:	e7cb      	b.n	14612 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1467a:	d2cb      	bcs.n	14614 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1467c:	68b3      	ldr	r3, [r6, #8]
   1467e:	2b00      	cmp	r3, #0
   14680:	d1f1      	bne.n	14666 <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14682:	361c      	adds	r6, #28
   14684:	e7cf      	b.n	14626 <le_param_req+0x26>
   14686:	bf00      	nop
   14688:	20021080 	.word	0x20021080
   1468c:	0002a8fc 	.word	0x0002a8fc
   14690:	0002a918 	.word	0x0002a918
   14694:	0002e557 	.word	0x0002e557
   14698:	0002e527 	.word	0x0002e527
   1469c:	0002b939 	.word	0x0002b939
   146a0:	0002ca40 	.word	0x0002ca40

000146a4 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   146a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   146a8:	78c3      	ldrb	r3, [r0, #3]
{
   146aa:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   146ac:	b9db      	cbnz	r3, 146e6 <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   146ae:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   146b2:	4b18      	ldr	r3, [pc, #96]	; (14714 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   146b4:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   146b8:	681d      	ldr	r5, [r3, #0]
   146ba:	b9bd      	cbnz	r5, 146ec <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   146bc:	4d16      	ldr	r5, [pc, #88]	; (14718 <bt_conn_identity_resolved+0x74>)
   146be:	4f17      	ldr	r7, [pc, #92]	; (1471c <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   146c0:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   146c4:	42bd      	cmp	r5, r7
   146c6:	d921      	bls.n	1470c <bt_conn_identity_resolved+0x68>
   146c8:	4915      	ldr	r1, [pc, #84]	; (14720 <bt_conn_identity_resolved+0x7c>)
   146ca:	f240 73bc 	movw	r3, #1980	; 0x7bc
   146ce:	4a15      	ldr	r2, [pc, #84]	; (14724 <bt_conn_identity_resolved+0x80>)
   146d0:	4815      	ldr	r0, [pc, #84]	; (14728 <bt_conn_identity_resolved+0x84>)
   146d2:	f010 fc00 	bl	24ed6 <assert_print>
   146d6:	4815      	ldr	r0, [pc, #84]	; (1472c <bt_conn_identity_resolved+0x88>)
   146d8:	f010 fbfd 	bl	24ed6 <assert_print>
   146dc:	f240 71bc 	movw	r1, #1980	; 0x7bc
   146e0:	4810      	ldr	r0, [pc, #64]	; (14724 <bt_conn_identity_resolved+0x80>)
   146e2:	f010 fbf1 	bl	24ec8 <assert_post_action>
		rpa = &conn->le.init_addr;
   146e6:	f100 0697 	add.w	r6, r0, #151	; 0x97
   146ea:	e7e2      	b.n	146b2 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   146ec:	692b      	ldr	r3, [r5, #16]
   146ee:	b11b      	cbz	r3, 146f8 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   146f0:	463a      	mov	r2, r7
   146f2:	4631      	mov	r1, r6
   146f4:	4620      	mov	r0, r4
   146f6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   146f8:	69ad      	ldr	r5, [r5, #24]
   146fa:	e7de      	b.n	146ba <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   146fc:	692b      	ldr	r3, [r5, #16]
   146fe:	b11b      	cbz	r3, 14708 <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14700:	4642      	mov	r2, r8
   14702:	4631      	mov	r1, r6
   14704:	4620      	mov	r0, r4
   14706:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14708:	351c      	adds	r5, #28
   1470a:	e7db      	b.n	146c4 <bt_conn_identity_resolved+0x20>
   1470c:	d3f6      	bcc.n	146fc <bt_conn_identity_resolved+0x58>
		}
	}
}
   1470e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14712:	bf00      	nop
   14714:	20021080 	.word	0x20021080
   14718:	0002a8fc 	.word	0x0002a8fc
   1471c:	0002a918 	.word	0x0002a918
   14720:	0002e557 	.word	0x0002e557
   14724:	0002e527 	.word	0x0002e527
   14728:	0002b939 	.word	0x0002b939
   1472c:	0002ca40 	.word	0x0002ca40

00014730 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   14730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   14732:	7a43      	ldrb	r3, [r0, #9]
{
   14734:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   14736:	7283      	strb	r3, [r0, #10]
{
   14738:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1473a:	f012 f95c 	bl	269f6 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1473e:	4b14      	ldr	r3, [pc, #80]	; (14790 <bt_conn_security_changed+0x60>)
   14740:	681d      	ldr	r5, [r3, #0]
   14742:	b995      	cbnz	r5, 1476a <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14744:	4d13      	ldr	r5, [pc, #76]	; (14794 <bt_conn_security_changed+0x64>)
   14746:	4f14      	ldr	r7, [pc, #80]	; (14798 <bt_conn_security_changed+0x68>)
   14748:	42bd      	cmp	r5, r7
   1474a:	d91e      	bls.n	1478a <bt_conn_security_changed+0x5a>
   1474c:	4913      	ldr	r1, [pc, #76]	; (1479c <bt_conn_security_changed+0x6c>)
   1474e:	f640 0328 	movw	r3, #2088	; 0x828
   14752:	4a13      	ldr	r2, [pc, #76]	; (147a0 <bt_conn_security_changed+0x70>)
   14754:	4813      	ldr	r0, [pc, #76]	; (147a4 <bt_conn_security_changed+0x74>)
   14756:	f010 fbbe 	bl	24ed6 <assert_print>
   1475a:	4813      	ldr	r0, [pc, #76]	; (147a8 <bt_conn_security_changed+0x78>)
   1475c:	f010 fbbb 	bl	24ed6 <assert_print>
   14760:	f640 0128 	movw	r1, #2088	; 0x828
   14764:	480e      	ldr	r0, [pc, #56]	; (147a0 <bt_conn_security_changed+0x70>)
   14766:	f010 fbaf 	bl	24ec8 <assert_post_action>
		if (cb->security_changed) {
   1476a:	696b      	ldr	r3, [r5, #20]
   1476c:	b11b      	cbz	r3, 14776 <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   1476e:	4632      	mov	r2, r6
   14770:	4620      	mov	r0, r4
   14772:	7a61      	ldrb	r1, [r4, #9]
   14774:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14776:	69ad      	ldr	r5, [r5, #24]
   14778:	e7e3      	b.n	14742 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1477a:	696b      	ldr	r3, [r5, #20]
   1477c:	b11b      	cbz	r3, 14786 <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   1477e:	4632      	mov	r2, r6
   14780:	4620      	mov	r0, r4
   14782:	7a61      	ldrb	r1, [r4, #9]
   14784:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14786:	351c      	adds	r5, #28
   14788:	e7de      	b.n	14748 <bt_conn_security_changed+0x18>
   1478a:	d3f6      	bcc.n	1477a <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1478e:	bf00      	nop
   14790:	20021080 	.word	0x20021080
   14794:	0002a8fc 	.word	0x0002a8fc
   14798:	0002a918 	.word	0x0002a918
   1479c:	0002e557 	.word	0x0002e557
   147a0:	0002e527 	.word	0x0002e527
   147a4:	0002b939 	.word	0x0002b939
   147a8:	0002ca40 	.word	0x0002ca40

000147ac <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   147ac:	b538      	push	{r3, r4, r5, lr}
   147ae:	4605      	mov	r5, r0
   147b0:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   147b2:	480b      	ldr	r0, [pc, #44]	; (147e0 <bt_conn_add_le+0x34>)
   147b4:	2101      	movs	r1, #1
   147b6:	f7ff fb77 	bl	13ea8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   147ba:	b180      	cbz	r0, 147de <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   147bc:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   147be:	6823      	ldr	r3, [r4, #0]
   147c0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   147c4:	88a3      	ldrh	r3, [r4, #4]
   147c6:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   147ca:	79a3      	ldrb	r3, [r4, #6]
   147cc:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   147d0:	2301      	movs	r3, #1
   147d2:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   147d4:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   147d6:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   147d8:	4b02      	ldr	r3, [pc, #8]	; (147e4 <bt_conn_add_le+0x38>)
   147da:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   147de:	bd38      	pop	{r3, r4, r5, pc}
   147e0:	20009898 	.word	0x20009898
   147e4:	00280018 	.word	0x00280018

000147e8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   147e8:	b570      	push	{r4, r5, r6, lr}
   147ea:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   147ec:	480a      	ldr	r0, [pc, #40]	; (14818 <bt_conn_lookup_addr_le+0x30>)
{
   147ee:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   147f0:	f7ff fd06 	bl	14200 <bt_conn_ref>
   147f4:	4604      	mov	r4, r0

		if (!conn) {
   147f6:	b120      	cbz	r0, 14802 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   147f8:	7883      	ldrb	r3, [r0, #2]
   147fa:	2b01      	cmp	r3, #1
   147fc:	d004      	beq.n	14808 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   147fe:	f7ff fd27 	bl	14250 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   14802:	2400      	movs	r4, #0
}
   14804:	4620      	mov	r0, r4
   14806:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   14808:	4632      	mov	r2, r6
   1480a:	4629      	mov	r1, r5
   1480c:	f012 f86b 	bl	268e6 <bt_conn_is_peer_addr_le>
   14810:	2800      	cmp	r0, #0
   14812:	d1f7      	bne.n	14804 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   14814:	4620      	mov	r0, r4
   14816:	e7f2      	b.n	147fe <bt_conn_lookup_addr_le+0x16>
   14818:	20009898 	.word	0x20009898

0001481c <bt_conn_exists_le>:
{
   1481c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1481e:	f7ff ffe3 	bl	147e8 <bt_conn_lookup_addr_le>
	if (conn) {
   14822:	4604      	mov	r4, r0
   14824:	b1a8      	cbz	r0, 14852 <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   14826:	7b43      	ldrb	r3, [r0, #13]
   14828:	490b      	ldr	r1, [pc, #44]	; (14858 <bt_conn_exists_le+0x3c>)
   1482a:	2b08      	cmp	r3, #8
   1482c:	bf96      	itet	ls
   1482e:	4a0b      	ldrls	r2, [pc, #44]	; (1485c <bt_conn_exists_le+0x40>)
   14830:	4b0b      	ldrhi	r3, [pc, #44]	; (14860 <bt_conn_exists_le+0x44>)
   14832:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   14836:	2202      	movs	r2, #2
   14838:	9303      	str	r3, [sp, #12]
   1483a:	4b0a      	ldr	r3, [pc, #40]	; (14864 <bt_conn_exists_le+0x48>)
   1483c:	9302      	str	r3, [sp, #8]
   1483e:	2300      	movs	r3, #0
   14840:	4618      	mov	r0, r3
   14842:	e9cd 3300 	strd	r3, r3, [sp]
   14846:	f011 ffba 	bl	267be <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1484a:	4620      	mov	r0, r4
   1484c:	f7ff fd00 	bl	14250 <bt_conn_unref>
		return true;
   14850:	2001      	movs	r0, #1
}
   14852:	b004      	add	sp, #16
   14854:	bd10      	pop	{r4, pc}
   14856:	bf00      	nop
   14858:	0002a970 	.word	0x0002a970
   1485c:	0002b2bc 	.word	0x0002b2bc
   14860:	0002e6f0 	.word	0x0002e6f0
   14864:	0002e859 	.word	0x0002e859

00014868 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   14868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1486a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1486c:	480e      	ldr	r0, [pc, #56]	; (148a8 <bt_conn_lookup_state_le+0x40>)
{
   1486e:	460e      	mov	r6, r1
   14870:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14872:	f7ff fcc5 	bl	14200 <bt_conn_ref>

		if (!conn) {
   14876:	4604      	mov	r4, r0
   14878:	b120      	cbz	r0, 14884 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1487a:	7883      	ldrb	r3, [r0, #2]
   1487c:	2b01      	cmp	r3, #1
   1487e:	d003      	beq.n	14888 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   14880:	f7ff fce6 	bl	14250 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   14884:	2400      	movs	r4, #0
   14886:	e00d      	b.n	148a4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   14888:	b136      	cbz	r6, 14898 <bt_conn_lookup_state_le+0x30>
   1488a:	4632      	mov	r2, r6
   1488c:	4629      	mov	r1, r5
   1488e:	f012 f82a 	bl	268e6 <bt_conn_is_peer_addr_le>
   14892:	b908      	cbnz	r0, 14898 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   14894:	4620      	mov	r0, r4
   14896:	e7f3      	b.n	14880 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   14898:	7b63      	ldrb	r3, [r4, #13]
   1489a:	42bb      	cmp	r3, r7
   1489c:	d1fa      	bne.n	14894 <bt_conn_lookup_state_le+0x2c>
   1489e:	7a23      	ldrb	r3, [r4, #8]
   148a0:	42ab      	cmp	r3, r5
   148a2:	d1f7      	bne.n	14894 <bt_conn_lookup_state_le+0x2c>
}
   148a4:	4620      	mov	r0, r4
   148a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148a8:	20009898 	.word	0x20009898

000148ac <send_conn_le_param_update>:
{
   148ac:	b538      	push	{r3, r4, r5, lr}
   148ae:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   148b0:	4608      	mov	r0, r1
{
   148b2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   148b4:	f011 fd18 	bl	262e8 <bt_le_conn_params_valid>
   148b8:	b338      	cbz	r0, 1490a <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   148ba:	4b15      	ldr	r3, [pc, #84]	; (14910 <send_conn_le_param_update+0x64>)
   148bc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   148c0:	0799      	lsls	r1, r3, #30
   148c2:	d407      	bmi.n	148d4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   148c4:	78e3      	ldrb	r3, [r4, #3]
   148c6:	b173      	cbz	r3, 148e6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   148c8:	4629      	mov	r1, r5
   148ca:	4620      	mov	r0, r4
}
   148cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   148d0:	f000 bafc 	b.w	14ecc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   148d4:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   148d8:	079a      	lsls	r2, r3, #30
   148da:	d5f3      	bpl.n	148c4 <send_conn_le_param_update+0x18>
   148dc:	1d23      	adds	r3, r4, #4
   148de:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   148e2:	055b      	lsls	r3, r3, #21
   148e4:	d4ee      	bmi.n	148c4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   148e6:	4629      	mov	r1, r5
   148e8:	4620      	mov	r0, r4
   148ea:	f012 f81e 	bl	2692a <bt_conn_le_conn_update>
		if (rc == 0) {
   148ee:	b958      	cbnz	r0, 14908 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   148f0:	882b      	ldrh	r3, [r5, #0]
   148f2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   148f6:	886b      	ldrh	r3, [r5, #2]
   148f8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   148fc:	88ab      	ldrh	r3, [r5, #4]
   148fe:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   14902:	88eb      	ldrh	r3, [r5, #6]
   14904:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   14908:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1490a:	f06f 0015 	mvn.w	r0, #21
   1490e:	e7fb      	b.n	14908 <send_conn_le_param_update+0x5c>
   14910:	20008000 	.word	0x20008000

00014914 <deferred_work>:
{
   14914:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   14916:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   1491a:	4604      	mov	r4, r0
   1491c:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1491e:	f1a0 0760 	sub.w	r7, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   14922:	bb7b      	cbnz	r3, 14984 <deferred_work+0x70>
		bt_l2cap_disconnected(conn);
   14924:	4638      	mov	r0, r7
   14926:	f012 f84e 	bl	269c6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1492a:	4b3c      	ldr	r3, [pc, #240]	; (14a1c <deferred_work+0x108>)
   1492c:	681d      	ldr	r5, [r3, #0]
   1492e:	b995      	cbnz	r5, 14956 <deferred_work+0x42>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14930:	4d3b      	ldr	r5, [pc, #236]	; (14a20 <deferred_work+0x10c>)
   14932:	4e3c      	ldr	r6, [pc, #240]	; (14a24 <deferred_work+0x110>)
   14934:	42b5      	cmp	r5, r6
   14936:	d91e      	bls.n	14976 <deferred_work+0x62>
   14938:	493b      	ldr	r1, [pc, #236]	; (14a28 <deferred_work+0x114>)
   1493a:	f240 536c 	movw	r3, #1388	; 0x56c
   1493e:	4a3b      	ldr	r2, [pc, #236]	; (14a2c <deferred_work+0x118>)
   14940:	483b      	ldr	r0, [pc, #236]	; (14a30 <deferred_work+0x11c>)
   14942:	f010 fac8 	bl	24ed6 <assert_print>
   14946:	483b      	ldr	r0, [pc, #236]	; (14a34 <deferred_work+0x120>)
   14948:	f010 fac5 	bl	24ed6 <assert_print>
   1494c:	f240 516c 	movw	r1, #1388	; 0x56c
   14950:	4836      	ldr	r0, [pc, #216]	; (14a2c <deferred_work+0x118>)
   14952:	f010 fab9 	bl	24ec8 <assert_post_action>
		if (cb->disconnected) {
   14956:	686b      	ldr	r3, [r5, #4]
   14958:	b11b      	cbz	r3, 14962 <deferred_work+0x4e>
			cb->disconnected(conn, conn->err);
   1495a:	4638      	mov	r0, r7
   1495c:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   14960:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14962:	69ad      	ldr	r5, [r5, #24]
   14964:	e7e3      	b.n	1492e <deferred_work+0x1a>
		if (cb->disconnected) {
   14966:	686b      	ldr	r3, [r5, #4]
   14968:	b11b      	cbz	r3, 14972 <deferred_work+0x5e>
			cb->disconnected(conn, conn->err);
   1496a:	4638      	mov	r0, r7
   1496c:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   14970:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14972:	351c      	adds	r5, #28
   14974:	e7de      	b.n	14934 <deferred_work+0x20>
   14976:	d3f6      	bcc.n	14966 <deferred_work+0x52>
		bt_conn_unref(conn);
   14978:	4638      	mov	r0, r7
}
   1497a:	b007      	add	sp, #28
   1497c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   14980:	f7ff bc66 	b.w	14250 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   14984:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   14988:	2b01      	cmp	r3, #1
   1498a:	d11f      	bne.n	149cc <deferred_work+0xb8>
	if (atomic_test_and_clear_bit(conn->flags,
   1498c:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14990:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14994:	4628      	mov	r0, r5
   14996:	f011 ff07 	bl	267a8 <atomic_and>
   1499a:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   1499e:	d023      	beq.n	149e8 <deferred_work+0xd4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   149a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   149a2:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   149a4:	9304      	str	r3, [sp, #16]
   149a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   149a8:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   149aa:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   149ac:	f7ff ff7e 	bl	148ac <send_conn_le_param_update>
		if (!err) {
   149b0:	b970      	cbnz	r0, 149d0 <deferred_work+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   149b2:	f46f 7180 	mvn.w	r1, #256	; 0x100
   149b6:	4628      	mov	r0, r5
   149b8:	f011 fef6 	bl	267a8 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   149bc:	e8d5 3fef 	ldaex	r3, [r5]
   149c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   149c4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   149c8:	2a00      	cmp	r2, #0
   149ca:	d1f7      	bne.n	149bc <deferred_work+0xa8>
}
   149cc:	b007      	add	sp, #28
   149ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   149d0:	4b19      	ldr	r3, [pc, #100]	; (14a38 <deferred_work+0x124>)
   149d2:	9003      	str	r0, [sp, #12]
   149d4:	9302      	str	r3, [sp, #8]
   149d6:	2300      	movs	r3, #0
   149d8:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   149dc:	2202      	movs	r2, #2
   149de:	4618      	mov	r0, r3
   149e0:	4916      	ldr	r1, [pc, #88]	; (14a3c <deferred_work+0x128>)
   149e2:	f011 feec 	bl	267be <z_log_msg_runtime_create.constprop.0>
   149e6:	e7e9      	b.n	149bc <deferred_work+0xa8>
		param = BT_LE_CONN_PARAM(
   149e8:	4a15      	ldr	r2, [pc, #84]	; (14a40 <deferred_work+0x12c>)
   149ea:	ab04      	add	r3, sp, #16
   149ec:	6810      	ldr	r0, [r2, #0]
   149ee:	6851      	ldr	r1, [r2, #4]
   149f0:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   149f2:	4638      	mov	r0, r7
   149f4:	a904      	add	r1, sp, #16
   149f6:	f7ff ff59 	bl	148ac <send_conn_le_param_update>
		if (!err) {
   149fa:	b940      	cbnz	r0, 14a0e <deferred_work+0xfa>
   149fc:	e8d5 3fef 	ldaex	r3, [r5]
   14a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   14a04:	e8c5 3fe2 	stlex	r2, r3, [r5]
   14a08:	2a00      	cmp	r2, #0
   14a0a:	d0d7      	beq.n	149bc <deferred_work+0xa8>
   14a0c:	e7f6      	b.n	149fc <deferred_work+0xe8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   14a0e:	4b0d      	ldr	r3, [pc, #52]	; (14a44 <deferred_work+0x130>)
   14a10:	9003      	str	r0, [sp, #12]
   14a12:	e9cd 6301 	strd	r6, r3, [sp, #4]
   14a16:	9600      	str	r6, [sp, #0]
   14a18:	4633      	mov	r3, r6
   14a1a:	e7df      	b.n	149dc <deferred_work+0xc8>
   14a1c:	20021080 	.word	0x20021080
   14a20:	0002a8fc 	.word	0x0002a8fc
   14a24:	0002a918 	.word	0x0002a918
   14a28:	0002e557 	.word	0x0002e557
   14a2c:	0002e527 	.word	0x0002e527
   14a30:	0002b939 	.word	0x0002b939
   14a34:	0002ca40 	.word	0x0002ca40
   14a38:	0002e87c 	.word	0x0002e87c
   14a3c:	0002a970 	.word	0x0002a970
   14a40:	0002ab00 	.word	0x0002ab00
   14a44:	0002e8a1 	.word	0x0002e8a1

00014a48 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   14a48:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   14a4a:	4801      	ldr	r0, [pc, #4]	; (14a50 <bt_conn_create_frag_timeout+0x8>)
   14a4c:	f7ff bd42 	b.w	144d4 <bt_conn_create_pdu_timeout>
   14a50:	20008cd4 	.word	0x20008cd4

00014a54 <create_frag>:
{
   14a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a58:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   14a5a:	f04f 33ff 	mov.w	r3, #4294967295
   14a5e:	f04f 32ff 	mov.w	r2, #4294967295
   14a62:	2000      	movs	r0, #0
{
   14a64:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   14a66:	f7ff ffef 	bl	14a48 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   14a6a:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   14a6c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14a6e:	2b07      	cmp	r3, #7
   14a70:	f04f 0600 	mov.w	r6, #0
   14a74:	d005      	beq.n	14a82 <create_frag+0x2e>
		net_buf_unref(frag);
   14a76:	f004 fd05 	bl	19484 <net_buf_unref>
		return NULL;
   14a7a:	4635      	mov	r5, r6
}
   14a7c:	4628      	mov	r0, r5
   14a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   14a82:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   14a84:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   14a88:	4e0c      	ldr	r6, [pc, #48]	; (14abc <create_frag+0x68>)
   14a8a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14a8c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   14a90:	f013 fa07 	bl	27ea2 <net_buf_simple_tailroom>
   14a94:	4580      	cmp	r8, r0
   14a96:	d20c      	bcs.n	14ab2 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   14a98:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14a9c:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   14aa0:	4632      	mov	r2, r6
   14aa2:	4638      	mov	r0, r7
   14aa4:	f013 fa05 	bl	27eb2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   14aa8:	4631      	mov	r1, r6
   14aaa:	4620      	mov	r0, r4
   14aac:	f004 fdd0 	bl	19650 <net_buf_simple_pull>
   14ab0:	e7e4      	b.n	14a7c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   14ab2:	4638      	mov	r0, r7
   14ab4:	f013 f9f5 	bl	27ea2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14ab8:	b286      	uxth	r6, r0
   14aba:	e7ef      	b.n	14a9c <create_frag+0x48>
   14abc:	20008000 	.word	0x20008000

00014ac0 <bt_conn_process_tx>:
{
   14ac0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14ac2:	7b43      	ldrb	r3, [r0, #13]
{
   14ac4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   14ac6:	b95b      	cbnz	r3, 14ae0 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14ac8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14acc:	3004      	adds	r0, #4
   14ace:	f011 fe6b 	bl	267a8 <atomic_and>
   14ad2:	0643      	lsls	r3, r0, #25
   14ad4:	d504      	bpl.n	14ae0 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   14ad6:	4620      	mov	r0, r4
}
   14ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   14adc:	f7ff ba12 	b.w	13f04 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   14ae0:	2200      	movs	r2, #0
   14ae2:	2300      	movs	r3, #0
   14ae4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14ae8:	f013 f9c6 	bl	27e78 <net_buf_get>
	BT_ASSERT(buf);
   14aec:	4605      	mov	r5, r0
   14aee:	b960      	cbnz	r0, 14b0a <bt_conn_process_tx+0x4a>
   14af0:	f240 331a 	movw	r3, #794	; 0x31a
   14af4:	4a22      	ldr	r2, [pc, #136]	; (14b80 <bt_conn_process_tx+0xc0>)
   14af6:	4923      	ldr	r1, [pc, #140]	; (14b84 <bt_conn_process_tx+0xc4>)
   14af8:	4823      	ldr	r0, [pc, #140]	; (14b88 <bt_conn_process_tx+0xc8>)
   14afa:	f010 f9ec 	bl	24ed6 <assert_print>
   14afe:	4040      	eors	r0, r0
   14b00:	f380 8811 	msr	BASEPRI, r0
   14b04:	f04f 0003 	mov.w	r0, #3
   14b08:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   14b0a:	4e20      	ldr	r6, [pc, #128]	; (14b8c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   14b0c:	8a2a      	ldrh	r2, [r5, #16]
   14b0e:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   14b12:	429a      	cmp	r2, r3
   14b14:	d807      	bhi.n	14b26 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   14b16:	2300      	movs	r3, #0
   14b18:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   14b1a:	4629      	mov	r1, r5
   14b1c:	4620      	mov	r0, r4
   14b1e:	f7ff f913 	bl	13d48 <send_frag>
	if (!send_buf(conn, buf)) {
   14b22:	b968      	cbnz	r0, 14b40 <bt_conn_process_tx+0x80>
   14b24:	e005      	b.n	14b32 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   14b26:	4629      	mov	r1, r5
   14b28:	4620      	mov	r0, r4
   14b2a:	f7ff ff93 	bl	14a54 <create_frag>
	if (!frag) {
   14b2e:	4601      	mov	r1, r0
   14b30:	b938      	cbnz	r0, 14b42 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   14b32:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14b34:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   14b36:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   14b38:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   14b3a:	f004 fca3 	bl	19484 <net_buf_unref>
		if (tx) {
   14b3e:	b9ce      	cbnz	r6, 14b74 <bt_conn_process_tx+0xb4>
}
   14b40:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   14b42:	2301      	movs	r3, #1
   14b44:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14b46:	4620      	mov	r0, r4
   14b48:	f7ff f8fe 	bl	13d48 <send_frag>
   14b4c:	2800      	cmp	r0, #0
   14b4e:	d0f0      	beq.n	14b32 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   14b50:	8a2a      	ldrh	r2, [r5, #16]
   14b52:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   14b56:	429a      	cmp	r2, r3
   14b58:	d802      	bhi.n	14b60 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   14b5a:	2300      	movs	r3, #0
   14b5c:	2203      	movs	r2, #3
   14b5e:	e7dc      	b.n	14b1a <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   14b60:	4629      	mov	r1, r5
   14b62:	4620      	mov	r0, r4
   14b64:	f7ff ff76 	bl	14a54 <create_frag>
		if (!frag) {
   14b68:	4601      	mov	r1, r0
   14b6a:	2800      	cmp	r0, #0
   14b6c:	d0e1      	beq.n	14b32 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14b6e:	2301      	movs	r3, #1
   14b70:	461a      	mov	r2, r3
   14b72:	e7e8      	b.n	14b46 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   14b74:	4631      	mov	r1, r6
   14b76:	4620      	mov	r0, r4
}
   14b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   14b7c:	f7ff b8be 	b.w	13cfc <conn_tx_destroy>
   14b80:	0002e527 	.word	0x0002e527
   14b84:	0002f5f4 	.word	0x0002f5f4
   14b88:	0002b939 	.word	0x0002b939
   14b8c:	20008000 	.word	0x20008000

00014b90 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   14b90:	4b0b      	ldr	r3, [pc, #44]	; (14bc0 <bt_conn_auth_cb_register+0x30>)
   14b92:	b158      	cbz	r0, 14bac <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   14b94:	681a      	ldr	r2, [r3, #0]
   14b96:	b962      	cbnz	r2, 14bb2 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   14b98:	6902      	ldr	r2, [r0, #16]
   14b9a:	b93a      	cbnz	r2, 14bac <bt_conn_auth_cb_register+0x1c>
   14b9c:	6802      	ldr	r2, [r0, #0]
   14b9e:	b95a      	cbnz	r2, 14bb8 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   14ba0:	6842      	ldr	r2, [r0, #4]
   14ba2:	b94a      	cbnz	r2, 14bb8 <bt_conn_auth_cb_register+0x28>
   14ba4:	6882      	ldr	r2, [r0, #8]
   14ba6:	b93a      	cbnz	r2, 14bb8 <bt_conn_auth_cb_register+0x28>
   14ba8:	6942      	ldr	r2, [r0, #20]
   14baa:	b92a      	cbnz	r2, 14bb8 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   14bac:	6018      	str	r0, [r3, #0]
		return 0;
   14bae:	2000      	movs	r0, #0
   14bb0:	4770      	bx	lr
		return -EALREADY;
   14bb2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14bb6:	4770      	bx	lr
		return -EINVAL;
   14bb8:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   14bbc:	4770      	bx	lr
   14bbe:	bf00      	nop
   14bc0:	2002108c 	.word	0x2002108c

00014bc4 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   14bc4:	b168      	cbz	r0, 14be2 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   14bc6:	2300      	movs	r3, #0
   14bc8:	60c3      	str	r3, [r0, #12]
	return list->tail;
   14bca:	4b07      	ldr	r3, [pc, #28]	; (14be8 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   14bcc:	f100 020c 	add.w	r2, r0, #12
   14bd0:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   14bd2:	b919      	cbnz	r1, 14bdc <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   14bd4:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   14bd8:	2000      	movs	r0, #0
   14bda:	4770      	bx	lr
	parent->next = child;
   14bdc:	600a      	str	r2, [r1, #0]
	list->tail = node;
   14bde:	605a      	str	r2, [r3, #4]
}
   14be0:	e7fa      	b.n	14bd8 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   14be2:	f06f 0015 	mvn.w	r0, #21
}
   14be6:	4770      	bx	lr
   14be8:	20021084 	.word	0x20021084

00014bec <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   14bec:	b910      	cbnz	r0, 14bf4 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   14bee:	4802      	ldr	r0, [pc, #8]	; (14bf8 <bt_conn_lookup_index+0xc>)
   14bf0:	f7ff bb06 	b.w	14200 <bt_conn_ref>
}
   14bf4:	2000      	movs	r0, #0
   14bf6:	4770      	bx	lr
   14bf8:	20009898 	.word	0x20009898

00014bfc <bt_conn_init>:

int bt_conn_init(void)
{
   14bfc:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   14bfe:	480a      	ldr	r0, [pc, #40]	; (14c28 <bt_conn_init+0x2c>)
   14c00:	f014 fcf9 	bl	295f6 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   14c04:	4909      	ldr	r1, [pc, #36]	; (14c2c <bt_conn_init+0x30>)
   14c06:	4808      	ldr	r0, [pc, #32]	; (14c28 <bt_conn_init+0x2c>)
   14c08:	f014 fd02 	bl	29610 <k_queue_append>
   14c0c:	4908      	ldr	r1, [pc, #32]	; (14c30 <bt_conn_init+0x34>)
   14c0e:	4806      	ldr	r0, [pc, #24]	; (14c28 <bt_conn_init+0x2c>)
   14c10:	f014 fcfe 	bl	29610 <k_queue_append>
	}

	bt_att_init();
   14c14:	f001 f8e4 	bl	15de0 <bt_att_init>

	err = bt_smp_init();
   14c18:	f003 ffb4 	bl	18b84 <bt_smp_init>
	if (err) {
   14c1c:	4604      	mov	r4, r0
   14c1e:	b908      	cbnz	r0, 14c24 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   14c20:	f011 ff34 	bl	26a8c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   14c24:	4620      	mov	r0, r4
   14c26:	bd10      	pop	{r4, pc}
   14c28:	20008be8 	.word	0x20008be8
   14c2c:	20021060 	.word	0x20021060
   14c30:	20021070 	.word	0x20021070

00014c34 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   14c34:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   14c36:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   14c38:	4605      	mov	r5, r0
   14c3a:	460f      	mov	r7, r1
   14c3c:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   14c3e:	2104      	movs	r1, #4
   14c40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14c44:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   14c46:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   14c48:	f7ff fc44 	bl	144d4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   14c4c:	4604      	mov	r4, r0
   14c4e:	b960      	cbnz	r0, 14c6a <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   14c50:	4b0a      	ldr	r3, [pc, #40]	; (14c7c <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   14c52:	2201      	movs	r2, #1
   14c54:	e9cd 0301 	strd	r0, r3, [sp, #4]
   14c58:	4909      	ldr	r1, [pc, #36]	; (14c80 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   14c5a:	4603      	mov	r3, r0
   14c5c:	9503      	str	r5, [sp, #12]
   14c5e:	9000      	str	r0, [sp, #0]
   14c60:	f011 fe8c 	bl	2697c <z_log_msg_runtime_create.constprop.0>
}
   14c64:	4620      	mov	r0, r4
   14c66:	b005      	add	sp, #20
   14c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   14c6a:	2104      	movs	r1, #4
   14c6c:	300c      	adds	r0, #12
   14c6e:	f004 fd2b 	bl	196c8 <net_buf_simple_add>
	hdr->code = code;
   14c72:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   14c74:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   14c76:	8046      	strh	r6, [r0, #2]
	return buf;
   14c78:	e7f4      	b.n	14c64 <l2cap_create_le_sig_pdu.constprop.0+0x30>
   14c7a:	bf00      	nop
   14c7c:	0002e944 	.word	0x0002e944
   14c80:	0002a9b8 	.word	0x0002a9b8

00014c84 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   14c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   14c86:	4c0b      	ldr	r4, [pc, #44]	; (14cb4 <l2cap_accept+0x30>)
   14c88:	2300      	movs	r3, #0
   14c8a:	6822      	ldr	r2, [r4, #0]
   14c8c:	b92a      	cbnz	r2, 14c9a <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   14c8e:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   14c90:	4b09      	ldr	r3, [pc, #36]	; (14cb8 <l2cap_accept+0x34>)
   14c92:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   14c94:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   14c96:	b004      	add	sp, #16
   14c98:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   14c9a:	4a08      	ldr	r2, [pc, #32]	; (14cbc <l2cap_accept+0x38>)
   14c9c:	9003      	str	r0, [sp, #12]
   14c9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14ca2:	4618      	mov	r0, r3
   14ca4:	2201      	movs	r2, #1
   14ca6:	4906      	ldr	r1, [pc, #24]	; (14cc0 <l2cap_accept+0x3c>)
   14ca8:	9300      	str	r3, [sp, #0]
   14caa:	f011 fe67 	bl	2697c <z_log_msg_runtime_create.constprop.0>
   14cae:	f06f 000b 	mvn.w	r0, #11
   14cb2:	e7f0      	b.n	14c96 <l2cap_accept+0x12>
   14cb4:	20021090 	.word	0x20021090
   14cb8:	0002b300 	.word	0x0002b300
   14cbc:	0002e96c 	.word	0x0002e96c
   14cc0:	0002a9b8 	.word	0x0002a9b8

00014cc4 <bt_l2cap_connected>:
{
   14cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14cc6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14cc8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14cca:	4d27      	ldr	r5, [pc, #156]	; (14d68 <bt_l2cap_connected+0xa4>)
   14ccc:	4f27      	ldr	r7, [pc, #156]	; (14d6c <bt_l2cap_connected+0xa8>)
   14cce:	42bd      	cmp	r5, r7
   14cd0:	d946      	bls.n	14d60 <bt_l2cap_connected+0x9c>
   14cd2:	4927      	ldr	r1, [pc, #156]	; (14d70 <bt_l2cap_connected+0xac>)
   14cd4:	f240 1381 	movw	r3, #385	; 0x181
   14cd8:	4a26      	ldr	r2, [pc, #152]	; (14d74 <bt_l2cap_connected+0xb0>)
   14cda:	4827      	ldr	r0, [pc, #156]	; (14d78 <bt_l2cap_connected+0xb4>)
   14cdc:	f010 f8fb 	bl	24ed6 <assert_print>
   14ce0:	4826      	ldr	r0, [pc, #152]	; (14d7c <bt_l2cap_connected+0xb8>)
   14ce2:	f010 f8f8 	bl	24ed6 <assert_print>
   14ce6:	f240 1181 	movw	r1, #385	; 0x181
   14cea:	4822      	ldr	r0, [pc, #136]	; (14d74 <bt_l2cap_connected+0xb0>)
   14cec:	f010 f8ec 	bl	24ec8 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   14cf0:	4620      	mov	r0, r4
   14cf2:	686b      	ldr	r3, [r5, #4]
   14cf4:	a901      	add	r1, sp, #4
   14cf6:	4798      	blx	r3
   14cf8:	2800      	cmp	r0, #0
   14cfa:	db2c      	blt.n	14d56 <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   14cfc:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   14cfe:	882a      	ldrh	r2, [r5, #0]
   14d00:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   14d02:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   14d04:	68a8      	ldr	r0, [r5, #8]
   14d06:	f103 0210 	add.w	r2, r3, #16
   14d0a:	e8d2 1fef 	ldaex	r1, [r2]
   14d0e:	e8c2 6fec 	stlex	ip, r6, [r2]
   14d12:	f1bc 0f00 	cmp.w	ip, #0
   14d16:	d1f8      	bne.n	14d0a <bt_l2cap_connected+0x46>
	parent->next = child;
   14d18:	609e      	str	r6, [r3, #8]
	return list->tail;
   14d1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   14d1c:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   14d20:	b9d9      	cbnz	r1, 14d5a <bt_l2cap_connected+0x96>
	list->head = node;
   14d22:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   14d26:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   14d28:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   14d2a:	9801      	ldr	r0, [sp, #4]
   14d2c:	6843      	ldr	r3, [r0, #4]
   14d2e:	681b      	ldr	r3, [r3, #0]
   14d30:	b103      	cbz	r3, 14d34 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   14d32:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14d34:	9b01      	ldr	r3, [sp, #4]
   14d36:	3310      	adds	r3, #16
   14d38:	e8d3 1fef 	ldaex	r1, [r3]
   14d3c:	f041 0101 	orr.w	r1, r1, #1
   14d40:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14d44:	2a00      	cmp	r2, #0
   14d46:	d1f7      	bne.n	14d38 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   14d48:	9801      	ldr	r0, [sp, #4]
   14d4a:	6843      	ldr	r3, [r0, #4]
   14d4c:	69db      	ldr	r3, [r3, #28]
   14d4e:	b113      	cbz	r3, 14d56 <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   14d50:	f100 0110 	add.w	r1, r0, #16
   14d54:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14d56:	350c      	adds	r5, #12
   14d58:	e7b9      	b.n	14cce <bt_l2cap_connected+0xa>
	parent->next = child;
   14d5a:	600a      	str	r2, [r1, #0]
	list->tail = node;
   14d5c:	65a2      	str	r2, [r4, #88]	; 0x58
}
   14d5e:	e7e2      	b.n	14d26 <bt_l2cap_connected+0x62>
   14d60:	d3c6      	bcc.n	14cf0 <bt_l2cap_connected+0x2c>
}
   14d62:	b003      	add	sp, #12
   14d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d66:	bf00      	nop
   14d68:	0002a8d8 	.word	0x0002a8d8
   14d6c:	0002a8fc 	.word	0x0002a8fc
   14d70:	0002e9c4 	.word	0x0002e9c4
   14d74:	0002e993 	.word	0x0002e993
   14d78:	0002b939 	.word	0x0002b939
   14d7c:	0002ca40 	.word	0x0002ca40

00014d80 <l2cap_recv>:
{
   14d80:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   14d82:	8a0b      	ldrh	r3, [r1, #16]
{
   14d84:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   14d86:	2b03      	cmp	r3, #3
{
   14d88:	460c      	mov	r4, r1
   14d8a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   14d8c:	d803      	bhi.n	14d96 <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   14d8e:	4b2d      	ldr	r3, [pc, #180]	; (14e44 <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   14d90:	9302      	str	r3, [sp, #8]
   14d92:	2300      	movs	r3, #0
   14d94:	e01c      	b.n	14dd0 <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   14d96:	2104      	movs	r1, #4
   14d98:	f104 000c 	add.w	r0, r4, #12
   14d9c:	f004 fc76 	bl	1968c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   14da0:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   14da2:	8842      	ldrh	r2, [r0, #2]
   14da4:	4605      	mov	r5, r0
	if (buf->len != len) {
   14da6:	429a      	cmp	r2, r3
   14da8:	d00e      	beq.n	14dc8 <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   14daa:	e9cd 3203 	strd	r3, r2, [sp, #12]
   14dae:	4b26      	ldr	r3, [pc, #152]	; (14e48 <l2cap_recv+0xc8>)
   14db0:	2201      	movs	r2, #1
   14db2:	9302      	str	r3, [sp, #8]
   14db4:	2300      	movs	r3, #0
   14db6:	4925      	ldr	r1, [pc, #148]	; (14e4c <l2cap_recv+0xcc>)
   14db8:	4618      	mov	r0, r3
   14dba:	e9cd 3300 	strd	r3, r3, [sp]
   14dbe:	f011 fddd 	bl	2697c <z_log_msg_runtime_create.constprop.0>
}
   14dc2:	2000      	movs	r0, #0
   14dc4:	b006      	add	sp, #24
   14dc6:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   14dc8:	7843      	ldrb	r3, [r0, #1]
   14dca:	b94b      	cbnz	r3, 14de0 <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   14dcc:	4a20      	ldr	r2, [pc, #128]	; (14e50 <l2cap_recv+0xd0>)
   14dce:	9202      	str	r2, [sp, #8]
   14dd0:	2201      	movs	r2, #1
   14dd2:	4618      	mov	r0, r3
   14dd4:	e9cd 3300 	strd	r3, r3, [sp]
   14dd8:	491c      	ldr	r1, [pc, #112]	; (14e4c <l2cap_recv+0xcc>)
   14dda:	f011 fdcf 	bl	2697c <z_log_msg_runtime_create.constprop.0>
		return 0;
   14dde:	e7f0      	b.n	14dc2 <l2cap_recv+0x42>
	switch (hdr->code) {
   14de0:	7803      	ldrb	r3, [r0, #0]
   14de2:	2b01      	cmp	r3, #1
   14de4:	d0ed      	beq.n	14dc2 <l2cap_recv+0x42>
   14de6:	2b13      	cmp	r3, #19
   14de8:	d103      	bne.n	14df2 <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   14dea:	2a01      	cmp	r2, #1
   14dec:	d8e9      	bhi.n	14dc2 <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   14dee:	4b19      	ldr	r3, [pc, #100]	; (14e54 <l2cap_recv+0xd4>)
   14df0:	e7ce      	b.n	14d90 <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   14df2:	2400      	movs	r4, #0
	switch (hdr->code) {
   14df4:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   14df6:	4b18      	ldr	r3, [pc, #96]	; (14e58 <l2cap_recv+0xd8>)
   14df8:	2202      	movs	r2, #2
   14dfa:	4620      	mov	r0, r4
   14dfc:	4913      	ldr	r1, [pc, #76]	; (14e4c <l2cap_recv+0xcc>)
   14dfe:	9302      	str	r3, [sp, #8]
   14e00:	e9cd 4400 	strd	r4, r4, [sp]
   14e04:	4623      	mov	r3, r4
   14e06:	f011 fdb9 	bl	2697c <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   14e0a:	7869      	ldrb	r1, [r5, #1]
   14e0c:	2202      	movs	r2, #2
   14e0e:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   14e10:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   14e12:	f7ff ff0f 	bl	14c34 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   14e16:	4605      	mov	r5, r0
   14e18:	2800      	cmp	r0, #0
   14e1a:	d0d2      	beq.n	14dc2 <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   14e1c:	2102      	movs	r1, #2
   14e1e:	300c      	adds	r0, #12
   14e20:	f004 fc52 	bl	196c8 <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14e24:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   14e26:	7004      	strb	r4, [r0, #0]
   14e28:	7044      	strb	r4, [r0, #1]
   14e2a:	462a      	mov	r2, r5
   14e2c:	2105      	movs	r1, #5
   14e2e:	4630      	mov	r0, r6
   14e30:	9400      	str	r4, [sp, #0]
   14e32:	f011 fe00 	bl	26a36 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   14e36:	2800      	cmp	r0, #0
   14e38:	d0c3      	beq.n	14dc2 <l2cap_recv+0x42>
		net_buf_unref(buf);
   14e3a:	4628      	mov	r0, r5
   14e3c:	f004 fb22 	bl	19484 <net_buf_unref>
   14e40:	e7bf      	b.n	14dc2 <l2cap_recv+0x42>
   14e42:	bf00      	nop
   14e44:	0002e9eb 	.word	0x0002e9eb
   14e48:	0002ea09 	.word	0x0002ea09
   14e4c:	0002a9b8 	.word	0x0002a9b8
   14e50:	0002ea2a 	.word	0x0002ea2a
   14e54:	0002ea4b 	.word	0x0002ea4b
   14e58:	0002ea67 	.word	0x0002ea67

00014e5c <bt_l2cap_recv>:
{
   14e5c:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   14e5e:	8a0b      	ldrh	r3, [r1, #16]
{
   14e60:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   14e62:	2b03      	cmp	r3, #3
{
   14e64:	460c      	mov	r4, r1
   14e66:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   14e68:	d80f      	bhi.n	14e8a <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   14e6a:	4b15      	ldr	r3, [pc, #84]	; (14ec0 <bt_l2cap_recv+0x64>)
   14e6c:	2201      	movs	r2, #1
   14e6e:	9302      	str	r3, [sp, #8]
   14e70:	2300      	movs	r3, #0
   14e72:	4914      	ldr	r1, [pc, #80]	; (14ec4 <bt_l2cap_recv+0x68>)
   14e74:	4618      	mov	r0, r3
   14e76:	e9cd 3300 	strd	r3, r3, [sp]
   14e7a:	f011 fd7f 	bl	2697c <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   14e7e:	4620      	mov	r0, r4
}
   14e80:	b005      	add	sp, #20
   14e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   14e86:	f004 bafd 	b.w	19484 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   14e8a:	2104      	movs	r1, #4
   14e8c:	f104 000c 	add.w	r0, r4, #12
   14e90:	f004 fbfc 	bl	1968c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   14e94:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   14e96:	4628      	mov	r0, r5
   14e98:	f011 fdef 	bl	26a7a <bt_l2cap_le_lookup_rx_cid>
   14e9c:	4603      	mov	r3, r0
	if (!chan) {
   14e9e:	b948      	cbnz	r0, 14eb4 <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   14ea0:	4a09      	ldr	r2, [pc, #36]	; (14ec8 <bt_l2cap_recv+0x6c>)
   14ea2:	9103      	str	r1, [sp, #12]
   14ea4:	e9cd 0201 	strd	r0, r2, [sp, #4]
   14ea8:	4906      	ldr	r1, [pc, #24]	; (14ec4 <bt_l2cap_recv+0x68>)
   14eaa:	2202      	movs	r2, #2
   14eac:	9000      	str	r0, [sp, #0]
   14eae:	f011 fd65 	bl	2697c <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   14eb2:	e7e4      	b.n	14e7e <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   14eb4:	6843      	ldr	r3, [r0, #4]
   14eb6:	4621      	mov	r1, r4
   14eb8:	695b      	ldr	r3, [r3, #20]
   14eba:	4798      	blx	r3
   14ebc:	e7df      	b.n	14e7e <bt_l2cap_recv+0x22>
   14ebe:	bf00      	nop
   14ec0:	0002ea8f 	.word	0x0002ea8f
   14ec4:	0002a9b8 	.word	0x0002a9b8
   14ec8:	0002eaac 	.word	0x0002eaac

00014ecc <bt_l2cap_update_conn_param>:
{
   14ecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   14ece:	4b17      	ldr	r3, [pc, #92]	; (14f2c <bt_l2cap_update_conn_param+0x60>)
{
   14ed0:	460e      	mov	r6, r1
	ident++;
   14ed2:	7819      	ldrb	r1, [r3, #0]
{
   14ed4:	4605      	mov	r5, r0
	ident++;
   14ed6:	3101      	adds	r1, #1
   14ed8:	b2c9      	uxtb	r1, r1
   14eda:	2901      	cmp	r1, #1
   14edc:	bf38      	it	cc
   14ede:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14ee0:	2208      	movs	r2, #8
   14ee2:	2012      	movs	r0, #18
	ident++;
   14ee4:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14ee6:	f7ff fea5 	bl	14c34 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   14eea:	4604      	mov	r4, r0
   14eec:	b1d0      	cbz	r0, 14f24 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   14eee:	2108      	movs	r1, #8
   14ef0:	300c      	adds	r0, #12
   14ef2:	f004 fbe9 	bl	196c8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14ef6:	8833      	ldrh	r3, [r6, #0]
   14ef8:	4622      	mov	r2, r4
   14efa:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14efc:	8873      	ldrh	r3, [r6, #2]
   14efe:	2105      	movs	r1, #5
   14f00:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   14f02:	88b3      	ldrh	r3, [r6, #4]
   14f04:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14f06:	88f3      	ldrh	r3, [r6, #6]
   14f08:	80c3      	strh	r3, [r0, #6]
   14f0a:	2300      	movs	r3, #0
   14f0c:	4628      	mov	r0, r5
   14f0e:	9300      	str	r3, [sp, #0]
   14f10:	f011 fd91 	bl	26a36 <bt_l2cap_send_cb>
	if (err) {
   14f14:	4605      	mov	r5, r0
   14f16:	b110      	cbz	r0, 14f1e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   14f18:	4620      	mov	r0, r4
   14f1a:	f004 fab3 	bl	19484 <net_buf_unref>
}
   14f1e:	4628      	mov	r0, r5
   14f20:	b002      	add	sp, #8
   14f22:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14f24:	f06f 050b 	mvn.w	r5, #11
   14f28:	e7f9      	b.n	14f1e <bt_l2cap_update_conn_param+0x52>
   14f2a:	bf00      	nop
   14f2c:	20022042 	.word	0x20022042

00014f30 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   14f30:	2823      	cmp	r0, #35	; 0x23
   14f32:	d81f      	bhi.n	14f74 <att_op_get_type+0x44>
   14f34:	281a      	cmp	r0, #26
   14f36:	d804      	bhi.n	14f42 <att_op_get_type+0x12>
   14f38:	1e43      	subs	r3, r0, #1
   14f3a:	2b18      	cmp	r3, #24
   14f3c:	d90e      	bls.n	14f5c <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   14f3e:	2006      	movs	r0, #6
   14f40:	4770      	bx	lr
	switch (op) {
   14f42:	f1a0 031b 	sub.w	r3, r0, #27
   14f46:	2b08      	cmp	r3, #8
   14f48:	d81e      	bhi.n	14f88 <att_op_get_type+0x58>
   14f4a:	e8df f003 	tbb	[pc, r3]
   14f4e:	1d05      	.short	0x1d05
   14f50:	191d231b 	.word	0x191d231b
   14f54:	1d25      	.short	0x1d25
   14f56:	05          	.byte	0x05
   14f57:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   14f58:	2003      	movs	r0, #3
   14f5a:	4770      	bx	lr
   14f5c:	2301      	movs	r3, #1
	switch (op) {
   14f5e:	4a0f      	ldr	r2, [pc, #60]	; (14f9c <att_op_get_type+0x6c>)
   14f60:	4083      	lsls	r3, r0
   14f62:	401a      	ands	r2, r3
   14f64:	b9c2      	cbnz	r2, 14f98 <att_op_get_type+0x68>
   14f66:	4a0e      	ldr	r2, [pc, #56]	; (14fa0 <att_op_get_type+0x70>)
   14f68:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   14f6a:	2a00      	cmp	r2, #0
   14f6c:	bf14      	ite	ne
   14f6e:	2001      	movne	r0, #1
   14f70:	2006      	moveq	r0, #6
   14f72:	4770      	bx	lr
	switch (op) {
   14f74:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   14f78:	2b52      	cmp	r3, #82	; 0x52
   14f7a:	d105      	bne.n	14f88 <att_op_get_type+0x58>
		return ATT_COMMAND;
   14f7c:	2000      	movs	r0, #0
}
   14f7e:	4770      	bx	lr
		return ATT_REQUEST;
   14f80:	2001      	movs	r0, #1
   14f82:	4770      	bx	lr
		return ATT_INDICATION;
   14f84:	2005      	movs	r0, #5
   14f86:	4770      	bx	lr
		return ATT_COMMAND;
   14f88:	f010 0f40 	tst.w	r0, #64	; 0x40
   14f8c:	bf0c      	ite	eq
   14f8e:	2006      	moveq	r0, #6
   14f90:	2000      	movne	r0, #0
   14f92:	4770      	bx	lr
	switch (op) {
   14f94:	2004      	movs	r0, #4
   14f96:	4770      	bx	lr
		return ATT_RESPONSE;
   14f98:	2002      	movs	r0, #2
   14f9a:	4770      	bx	lr
   14f9c:	028aaaaa 	.word	0x028aaaaa
   14fa0:	01455554 	.word	0x01455554

00014fa4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14fa4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14fa6:	3804      	subs	r0, #4
   14fa8:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14faa:	a901      	add	r1, sp, #4
   14fac:	4802      	ldr	r0, [pc, #8]	; (14fb8 <bt_att_released+0x14>)
   14fae:	f00a fb8f 	bl	1f6d0 <k_mem_slab_free>
}
   14fb2:	b003      	add	sp, #12
   14fb4:	f85d fb04 	ldr.w	pc, [sp], #4
   14fb8:	20008a28 	.word	0x20008a28

00014fbc <tx_meta_data_free>:
{
   14fbc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   14fbe:	4604      	mov	r4, r0
   14fc0:	b948      	cbnz	r0, 14fd6 <tx_meta_data_free+0x1a>
   14fc2:	490a      	ldr	r1, [pc, #40]	; (14fec <tx_meta_data_free+0x30>)
   14fc4:	480a      	ldr	r0, [pc, #40]	; (14ff0 <tx_meta_data_free+0x34>)
   14fc6:	23a6      	movs	r3, #166	; 0xa6
   14fc8:	4a0a      	ldr	r2, [pc, #40]	; (14ff4 <tx_meta_data_free+0x38>)
   14fca:	f00f ff84 	bl	24ed6 <assert_print>
   14fce:	21a6      	movs	r1, #166	; 0xa6
   14fd0:	4808      	ldr	r0, [pc, #32]	; (14ff4 <tx_meta_data_free+0x38>)
   14fd2:	f00f ff79 	bl	24ec8 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   14fd6:	2100      	movs	r1, #0
   14fd8:	2214      	movs	r2, #20
   14fda:	f014 fd1c 	bl	29a16 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   14fde:	4621      	mov	r1, r4
}
   14fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   14fe4:	4804      	ldr	r0, [pc, #16]	; (14ff8 <tx_meta_data_free+0x3c>)
   14fe6:	f014 bb13 	b.w	29610 <k_queue_append>
   14fea:	bf00      	nop
   14fec:	0002e639 	.word	0x0002e639
   14ff0:	0002b939 	.word	0x0002b939
   14ff4:	0002eae1 	.word	0x0002eae1
   14ff8:	20008bcc 	.word	0x20008bcc

00014ffc <find_type_cb>:
{
   14ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15000:	f642 0301 	movw	r3, #10241	; 0x2801
   15004:	2500      	movs	r5, #0
{
   15006:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   15008:	f8d2 9000 	ldr.w	r9, [r2]
{
   1500c:	4607      	mov	r7, r0
   1500e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15010:	6800      	ldr	r0, [r0, #0]
   15012:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   15014:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   15018:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1501a:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1501e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   15022:	f011 f838 	bl	26096 <bt_uuid_cmp>
   15026:	2800      	cmp	r0, #0
   15028:	d067      	beq.n	150fa <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1502a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1502e:	6838      	ldr	r0, [r7, #0]
   15030:	a90d      	add	r1, sp, #52	; 0x34
   15032:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   15036:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1503a:	f011 f82c 	bl	26096 <bt_uuid_cmp>
   1503e:	b138      	cbz	r0, 15050 <find_type_cb+0x54>
		if (data->group &&
   15040:	68a3      	ldr	r3, [r4, #8]
   15042:	b11b      	cbz	r3, 1504c <find_type_cb+0x50>
   15044:	885a      	ldrh	r2, [r3, #2]
   15046:	42b2      	cmp	r2, r6
   15048:	d200      	bcs.n	1504c <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1504a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1504c:	2001      	movs	r0, #1
   1504e:	e009      	b.n	15064 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15050:	6861      	ldr	r1, [r4, #4]
   15052:	4608      	mov	r0, r1
   15054:	f011 fd25 	bl	26aa2 <net_buf_frags_len>
   15058:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1505c:	1a1b      	subs	r3, r3, r0
   1505e:	2b03      	cmp	r3, #3
   15060:	d803      	bhi.n	1506a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   15062:	2000      	movs	r0, #0
}
   15064:	b013      	add	sp, #76	; 0x4c
   15066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1506a:	4608      	mov	r0, r1
   1506c:	f004 fa66 	bl	1953c <net_buf_frag_last>
   15070:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15072:	6860      	ldr	r0, [r4, #4]
   15074:	f011 fd15 	bl	26aa2 <net_buf_frags_len>
   15078:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1507c:	f105 0b0c 	add.w	fp, r5, #12
   15080:	ebaa 0a00 	sub.w	sl, sl, r0
   15084:	4658      	mov	r0, fp
   15086:	f012 ff0c 	bl	27ea2 <net_buf_simple_tailroom>
   1508a:	4582      	cmp	sl, r0
   1508c:	d238      	bcs.n	15100 <find_type_cb+0x104>
   1508e:	6860      	ldr	r0, [r4, #4]
   15090:	f011 fd07 	bl	26aa2 <net_buf_frags_len>
   15094:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   15098:	1a18      	subs	r0, r3, r0
	if (!len) {
   1509a:	b970      	cbnz	r0, 150ba <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1509c:	6863      	ldr	r3, [r4, #4]
   1509e:	7a98      	ldrb	r0, [r3, #10]
   150a0:	f003 ffb6 	bl	19010 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   150a4:	2200      	movs	r2, #0
   150a6:	2300      	movs	r3, #0
   150a8:	f012 fee1 	bl	27e6e <net_buf_alloc_fixed>
		if (!frag) {
   150ac:	4605      	mov	r5, r0
   150ae:	2800      	cmp	r0, #0
   150b0:	d0d7      	beq.n	15062 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   150b2:	4601      	mov	r1, r0
   150b4:	6860      	ldr	r0, [r4, #4]
   150b6:	f004 fa87 	bl	195c8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   150ba:	2300      	movs	r3, #0
   150bc:	9300      	str	r3, [sp, #0]
   150be:	2310      	movs	r3, #16
   150c0:	4639      	mov	r1, r7
   150c2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   150c6:	4640      	mov	r0, r8
   150c8:	eb0d 0203 	add.w	r2, sp, r3
   150cc:	47c8      	blx	r9
	if (read < 0) {
   150ce:	1e07      	subs	r7, r0, #0
   150d0:	db13      	blt.n	150fa <find_type_cb+0xfe>
	if (read != data->value_len) {
   150d2:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   150d4:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   150d6:	42ba      	cmp	r2, r7
   150d8:	d031      	beq.n	1513e <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   150da:	4601      	mov	r1, r0
   150dc:	a80d      	add	r0, sp, #52	; 0x34
   150de:	f011 f808 	bl	260f2 <bt_uuid_create>
   150e2:	4603      	mov	r3, r0
   150e4:	b980      	cbnz	r0, 15108 <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   150e6:	7c22      	ldrb	r2, [r4, #16]
   150e8:	9203      	str	r2, [sp, #12]
   150ea:	4a17      	ldr	r2, [pc, #92]	; (15148 <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   150ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
   150f0:	4916      	ldr	r1, [pc, #88]	; (1514c <find_type_cb+0x150>)
   150f2:	2202      	movs	r2, #2
   150f4:	9300      	str	r3, [sp, #0]
   150f6:	f011 fdc3 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   150fa:	2300      	movs	r3, #0
   150fc:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   150fe:	e7a5      	b.n	1504c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   15100:	4658      	mov	r0, fp
   15102:	f012 fece 	bl	27ea2 <net_buf_simple_tailroom>
   15106:	e7c8      	b.n	1509a <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   15108:	b2fa      	uxtb	r2, r7
   1510a:	a904      	add	r1, sp, #16
   1510c:	a808      	add	r0, sp, #32
   1510e:	f010 fff0 	bl	260f2 <bt_uuid_create>
   15112:	4603      	mov	r3, r0
   15114:	b910      	cbnz	r0, 1511c <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   15116:	4a0e      	ldr	r2, [pc, #56]	; (15150 <find_type_cb+0x154>)
   15118:	9703      	str	r7, [sp, #12]
   1511a:	e7e7      	b.n	150ec <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1511c:	a908      	add	r1, sp, #32
   1511e:	a80d      	add	r0, sp, #52	; 0x34
   15120:	f010 ffb9 	bl	26096 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15124:	2800      	cmp	r0, #0
   15126:	d1e8      	bne.n	150fa <find_type_cb+0xfe>
	data->err = 0x00;
   15128:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1512a:	2104      	movs	r1, #4
   1512c:	7463      	strb	r3, [r4, #17]
   1512e:	f105 000c 	add.w	r0, r5, #12
   15132:	f004 fac9 	bl	196c8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15136:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15138:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1513a:	68a3      	ldr	r3, [r4, #8]
   1513c:	e785      	b.n	1504a <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   1513e:	a904      	add	r1, sp, #16
   15140:	f014 fc1f 	bl	29982 <memcmp>
   15144:	e7ee      	b.n	15124 <find_type_cb+0x128>
   15146:	bf00      	nop
   15148:	0002eb10 	.word	0x0002eb10
   1514c:	0002a968 	.word	0x0002a968
   15150:	0002eb2f 	.word	0x0002eb2f

00015154 <chan_send>:
{
   15154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15158:	4606      	mov	r6, r0
   1515a:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1515c:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   15160:	68cb      	ldr	r3, [r1, #12]
{
   15162:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15164:	2102      	movs	r1, #2
   15166:	3098      	adds	r0, #152	; 0x98
   15168:	f011 fcb5 	bl	26ad6 <atomic_test_bit>
   1516c:	2800      	cmp	r0, #0
   1516e:	d053      	beq.n	15218 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15170:	781b      	ldrb	r3, [r3, #0]
   15172:	2bd2      	cmp	r3, #210	; 0xd2
   15174:	d11a      	bne.n	151ac <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   15176:	6833      	ldr	r3, [r6, #0]
   15178:	4621      	mov	r1, r4
   1517a:	6818      	ldr	r0, [r3, #0]
   1517c:	f012 fd58 	bl	27c30 <bt_smp_sign>
		if (err) {
   15180:	4605      	mov	r5, r0
   15182:	b198      	cbz	r0, 151ac <chan_send+0x58>
			LOG_ERR("Error signing data");
   15184:	4b26      	ldr	r3, [pc, #152]	; (15220 <chan_send+0xcc>)
   15186:	2201      	movs	r2, #1
   15188:	9302      	str	r3, [sp, #8]
   1518a:	2300      	movs	r3, #0
   1518c:	4925      	ldr	r1, [pc, #148]	; (15224 <chan_send+0xd0>)
   1518e:	4618      	mov	r0, r3
   15190:	e9cd 3300 	strd	r3, r3, [sp]
   15194:	f011 fd74 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   15198:	69a0      	ldr	r0, [r4, #24]
   1519a:	f7ff ff0f 	bl	14fbc <tx_meta_data_free>
			net_buf_unref(buf);
   1519e:	4620      	mov	r0, r4
   151a0:	f004 f970 	bl	19484 <net_buf_unref>
}
   151a4:	4628      	mov	r0, r5
   151a6:	b005      	add	sp, #20
   151a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   151ac:	f104 000c 	add.w	r0, r4, #12
   151b0:	f012 fe73 	bl	27e9a <net_buf_simple_headroom>
	state->len = buf->len;
   151b4:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   151b8:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   151bc:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   151be:	4607      	mov	r7, r0
   151c0:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   151c2:	68e3      	ldr	r3, [r4, #12]
   151c4:	7818      	ldrb	r0, [r3, #0]
   151c6:	f7ff feb3 	bl	14f30 <att_op_get_type>
   151ca:	2805      	cmp	r0, #5
   151cc:	4605      	mov	r5, r0
	switch (op_type) {
   151ce:	d813      	bhi.n	151f8 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   151d0:	4b15      	ldr	r3, [pc, #84]	; (15228 <chan_send+0xd4>)
   151d2:	4622      	mov	r2, r4
   151d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   151d8:	2104      	movs	r1, #4
   151da:	4630      	mov	r0, r6
   151dc:	f8cd 9000 	str.w	r9, [sp]
   151e0:	f011 fc29 	bl	26a36 <bt_l2cap_send_cb>
	if (err) {
   151e4:	4605      	mov	r5, r0
   151e6:	2800      	cmp	r0, #0
   151e8:	d0dc      	beq.n	151a4 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   151ea:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   151ec:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   151f0:	fa13 f787 	uxtah	r7, r3, r7
   151f4:	60e7      	str	r7, [r4, #12]
}
   151f6:	e7d5      	b.n	151a4 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   151f8:	f240 2357 	movw	r3, #599	; 0x257
   151fc:	4a0b      	ldr	r2, [pc, #44]	; (1522c <chan_send+0xd8>)
   151fe:	490c      	ldr	r1, [pc, #48]	; (15230 <chan_send+0xdc>)
   15200:	480c      	ldr	r0, [pc, #48]	; (15234 <chan_send+0xe0>)
   15202:	f00f fe68 	bl	24ed6 <assert_print>
   15206:	4629      	mov	r1, r5
   15208:	480b      	ldr	r0, [pc, #44]	; (15238 <chan_send+0xe4>)
   1520a:	f00f fe64 	bl	24ed6 <assert_print>
   1520e:	f240 2157 	movw	r1, #599	; 0x257
   15212:	4806      	ldr	r0, [pc, #24]	; (1522c <chan_send+0xd8>)
   15214:	f00f fe58 	bl	24ec8 <assert_post_action>
		return -EINVAL;
   15218:	f06f 0515 	mvn.w	r5, #21
   1521c:	e7c2      	b.n	151a4 <chan_send+0x50>
   1521e:	bf00      	nop
   15220:	0002eb4e 	.word	0x0002eb4e
   15224:	0002a968 	.word	0x0002a968
   15228:	0002b328 	.word	0x0002b328
   1522c:	0002eae1 	.word	0x0002eae1
   15230:	000311d2 	.word	0x000311d2
   15234:	0002b939 	.word	0x0002b939
   15238:	0002eb61 	.word	0x0002eb61

0001523c <bt_att_chan_req_send>:
{
   1523c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   1523e:	b958      	cbnz	r0, 15258 <bt_att_chan_req_send+0x1c>
   15240:	4919      	ldr	r1, [pc, #100]	; (152a8 <bt_att_chan_req_send+0x6c>)
   15242:	f44f 7346 	mov.w	r3, #792	; 0x318
   15246:	4a19      	ldr	r2, [pc, #100]	; (152ac <bt_att_chan_req_send+0x70>)
   15248:	4819      	ldr	r0, [pc, #100]	; (152b0 <bt_att_chan_req_send+0x74>)
   1524a:	f00f fe44 	bl	24ed6 <assert_print>
   1524e:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   15252:	4816      	ldr	r0, [pc, #88]	; (152ac <bt_att_chan_req_send+0x70>)
   15254:	f00f fe38 	bl	24ec8 <assert_post_action>
   15258:	b949      	cbnz	r1, 1526e <bt_att_chan_req_send+0x32>
   1525a:	4916      	ldr	r1, [pc, #88]	; (152b4 <bt_att_chan_req_send+0x78>)
   1525c:	f240 3319 	movw	r3, #793	; 0x319
   15260:	4a12      	ldr	r2, [pc, #72]	; (152ac <bt_att_chan_req_send+0x70>)
   15262:	4813      	ldr	r0, [pc, #76]	; (152b0 <bt_att_chan_req_send+0x74>)
   15264:	f00f fe37 	bl	24ed6 <assert_print>
   15268:	f240 3119 	movw	r1, #793	; 0x319
   1526c:	e7f1      	b.n	15252 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   1526e:	684a      	ldr	r2, [r1, #4]
   15270:	b94a      	cbnz	r2, 15286 <bt_att_chan_req_send+0x4a>
   15272:	4911      	ldr	r1, [pc, #68]	; (152b8 <bt_att_chan_req_send+0x7c>)
   15274:	f240 331a 	movw	r3, #794	; 0x31a
   15278:	4a0c      	ldr	r2, [pc, #48]	; (152ac <bt_att_chan_req_send+0x70>)
   1527a:	480d      	ldr	r0, [pc, #52]	; (152b0 <bt_att_chan_req_send+0x74>)
   1527c:	f00f fe2b 	bl	24ed6 <assert_print>
   15280:	f240 311a 	movw	r1, #794	; 0x31a
   15284:	e7e5      	b.n	15252 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   15286:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1528a:	b14b      	cbz	r3, 152a0 <bt_att_chan_req_send+0x64>
   1528c:	490b      	ldr	r1, [pc, #44]	; (152bc <bt_att_chan_req_send+0x80>)
   1528e:	f240 331b 	movw	r3, #795	; 0x31b
   15292:	4a06      	ldr	r2, [pc, #24]	; (152ac <bt_att_chan_req_send+0x70>)
   15294:	4806      	ldr	r0, [pc, #24]	; (152b0 <bt_att_chan_req_send+0x74>)
   15296:	f00f fe1e 	bl	24ed6 <assert_print>
   1529a:	f240 311b 	movw	r1, #795	; 0x31b
   1529e:	e7d8      	b.n	15252 <bt_att_chan_req_send+0x16>
}
   152a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   152a4:	f011 bcfb 	b.w	26c9e <chan_req_send>
   152a8:	0002eb7a 	.word	0x0002eb7a
   152ac:	0002eae1 	.word	0x0002eae1
   152b0:	0002b939 	.word	0x0002b939
   152b4:	0002eb90 	.word	0x0002eb90
   152b8:	0002eb7f 	.word	0x0002eb7f
   152bc:	0002eb89 	.word	0x0002eb89

000152c0 <att_get>:
{
   152c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   152c2:	7b43      	ldrb	r3, [r0, #13]
   152c4:	2b07      	cmp	r3, #7
   152c6:	d00d      	beq.n	152e4 <att_get+0x24>
		LOG_WRN("Not connected");
   152c8:	4b18      	ldr	r3, [pc, #96]	; (1532c <att_get+0x6c>)
   152ca:	2202      	movs	r2, #2
   152cc:	9302      	str	r3, [sp, #8]
   152ce:	2300      	movs	r3, #0
   152d0:	4618      	mov	r0, r3
   152d2:	e9cd 3300 	strd	r3, r3, [sp]
   152d6:	4916      	ldr	r1, [pc, #88]	; (15330 <att_get+0x70>)
		LOG_ERR("Unable to find ATT channel");
   152d8:	f011 fcd2 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   152dc:	2000      	movs	r0, #0
}
   152de:	b005      	add	sp, #20
   152e0:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   152e4:	2104      	movs	r1, #4
   152e6:	f011 fbc8 	bl	26a7a <bt_l2cap_le_lookup_rx_cid>
   152ea:	4603      	mov	r3, r0
	if (!chan) {
   152ec:	b930      	cbnz	r0, 152fc <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   152ee:	4a11      	ldr	r2, [pc, #68]	; (15334 <att_get+0x74>)
   152f0:	490f      	ldr	r1, [pc, #60]	; (15330 <att_get+0x70>)
   152f2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   152f6:	9000      	str	r0, [sp, #0]
   152f8:	2201      	movs	r2, #1
   152fa:	e7ed      	b.n	152d8 <att_get+0x18>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   152fc:	2102      	movs	r1, #2
   152fe:	3094      	adds	r0, #148	; 0x94
   15300:	f011 fbe9 	bl	26ad6 <atomic_test_bit>
   15304:	b970      	cbnz	r0, 15324 <att_get+0x64>
   15306:	490c      	ldr	r1, [pc, #48]	; (15338 <att_get+0x78>)
   15308:	f640 332a 	movw	r3, #2858	; 0xb2a
   1530c:	4a0b      	ldr	r2, [pc, #44]	; (1533c <att_get+0x7c>)
   1530e:	480c      	ldr	r0, [pc, #48]	; (15340 <att_get+0x80>)
   15310:	f00f fde1 	bl	24ed6 <assert_print>
   15314:	480b      	ldr	r0, [pc, #44]	; (15344 <att_get+0x84>)
   15316:	f00f fdde 	bl	24ed6 <assert_print>
   1531a:	f640 312a 	movw	r1, #2858	; 0xb2a
   1531e:	4807      	ldr	r0, [pc, #28]	; (1533c <att_get+0x7c>)
   15320:	f00f fdd2 	bl	24ec8 <assert_post_action>
	return att_chan->att;
   15324:	f853 0c04 	ldr.w	r0, [r3, #-4]
   15328:	e7d9      	b.n	152de <att_get+0x1e>
   1532a:	bf00      	nop
   1532c:	0002eb94 	.word	0x0002eb94
   15330:	0002a968 	.word	0x0002a968
   15334:	0002eba2 	.word	0x0002eba2
   15338:	0002ebbd 	.word	0x0002ebbd
   1533c:	0002eae1 	.word	0x0002eae1
   15340:	0002b939 	.word	0x0002b939
   15344:	0002ebed 	.word	0x0002ebed

00015348 <bt_att_connected>:
{
   15348:	b510      	push	{r4, lr}
   1534a:	4604      	mov	r4, r0
   1534c:	f100 0394 	add.w	r3, r0, #148	; 0x94
   15350:	e8d3 1fef 	ldaex	r1, [r3]
   15354:	f041 0104 	orr.w	r1, r1, #4
   15358:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1535c:	2a00      	cmp	r2, #0
   1535e:	d1f7      	bne.n	15350 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15360:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   15362:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15364:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15366:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   15368:	f011 fbf7 	bl	26b5a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1536c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   15370:	4903      	ldr	r1, [pc, #12]	; (15380 <bt_att_connected+0x38>)
   15372:	f00b fa69 	bl	20848 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   15376:	6820      	ldr	r0, [r4, #0]
}
   15378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1537c:	f001 bf04 	b.w	17188 <bt_gatt_connected>
   15380:	00015fdd 	.word	0x00015fdd

00015384 <read_group_cb>:
{
   15384:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15388:	f04f 0800 	mov.w	r8, #0
   1538c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   15390:	4605      	mov	r5, r0
   15392:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15394:	6800      	ldr	r0, [r0, #0]
   15396:	a902      	add	r1, sp, #8
{
   15398:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1539a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1539c:	f88d 8008 	strb.w	r8, [sp, #8]
   153a0:	f8ad 300a 	strh.w	r3, [sp, #10]
   153a4:	f010 fe77 	bl	26096 <bt_uuid_cmp>
   153a8:	b1a0      	cbz	r0, 153d4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   153aa:	f642 0301 	movw	r3, #10241	; 0x2801
   153ae:	6828      	ldr	r0, [r5, #0]
   153b0:	a903      	add	r1, sp, #12
   153b2:	f88d 800c 	strb.w	r8, [sp, #12]
   153b6:	f8ad 300e 	strh.w	r3, [sp, #14]
   153ba:	f010 fe6c 	bl	26096 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   153be:	b148      	cbz	r0, 153d4 <read_group_cb+0x50>
		if (data->group &&
   153c0:	6923      	ldr	r3, [r4, #16]
   153c2:	b11b      	cbz	r3, 153cc <read_group_cb+0x48>
   153c4:	885a      	ldrh	r2, [r3, #2]
   153c6:	42b2      	cmp	r2, r6
   153c8:	d200      	bcs.n	153cc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   153ca:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   153cc:	2001      	movs	r0, #1
}
   153ce:	b004      	add	sp, #16
   153d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   153d4:	6861      	ldr	r1, [r4, #4]
   153d6:	6828      	ldr	r0, [r5, #0]
   153d8:	f010 fe5d 	bl	26096 <bt_uuid_cmp>
   153dc:	b110      	cbz	r0, 153e4 <read_group_cb+0x60>
		data->group = NULL;
   153de:	2300      	movs	r3, #0
   153e0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   153e2:	e7f3      	b.n	153cc <read_group_cb+0x48>
	if (data->rsp->len &&
   153e4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   153e6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   153e8:	781a      	ldrb	r2, [r3, #0]
   153ea:	b132      	cbz	r2, 153fa <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   153ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   153ee:	8a01      	ldrh	r1, [r0, #16]
   153f0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   153f2:	4293      	cmp	r3, r2
   153f4:	da01      	bge.n	153fa <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   153f6:	2000      	movs	r0, #0
   153f8:	e7e9      	b.n	153ce <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   153fa:	2104      	movs	r1, #4
   153fc:	300c      	adds	r0, #12
   153fe:	f004 f963 	bl	196c8 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   15402:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15404:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15406:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15408:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1540a:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1540c:	4b07      	ldr	r3, [pc, #28]	; (1542c <read_group_cb+0xa8>)
   1540e:	9401      	str	r4, [sp, #4]
   15410:	9300      	str	r3, [sp, #0]
   15412:	4638      	mov	r0, r7
   15414:	2300      	movs	r3, #0
   15416:	68a2      	ldr	r2, [r4, #8]
   15418:	f011 fc82 	bl	26d20 <att_chan_read>
	if (read < 0) {
   1541c:	2800      	cmp	r0, #0
   1541e:	dbea      	blt.n	153f6 <read_group_cb+0x72>
	if (!data->group) {
   15420:	6920      	ldr	r0, [r4, #16]
   15422:	3800      	subs	r0, #0
   15424:	bf18      	it	ne
   15426:	2001      	movne	r0, #1
   15428:	e7d1      	b.n	153ce <read_group_cb+0x4a>
   1542a:	bf00      	nop
   1542c:	00026bc1 	.word	0x00026bc1

00015430 <read_type_cb>:
{
   15430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15434:	6817      	ldr	r7, [r2, #0]
{
   15436:	4605      	mov	r5, r0
   15438:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1543a:	6800      	ldr	r0, [r0, #0]
   1543c:	6851      	ldr	r1, [r2, #4]
{
   1543e:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   15440:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15442:	f010 fe28 	bl	26096 <bt_uuid_cmp>
   15446:	4681      	mov	r9, r0
   15448:	2800      	cmp	r0, #0
   1544a:	d13c      	bne.n	154c6 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1544c:	4630      	mov	r0, r6
   1544e:	2295      	movs	r2, #149	; 0x95
   15450:	4629      	mov	r1, r5
   15452:	f012 f92b 	bl	276ac <bt_gatt_check_perm>
   15456:	4606      	mov	r6, r0
   15458:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1545a:	b140      	cbz	r0, 1546e <read_type_cb+0x3e>
		if (data->rsp->len) {
   1545c:	68e3      	ldr	r3, [r4, #12]
   1545e:	781b      	ldrb	r3, [r3, #0]
   15460:	b10b      	cbz	r3, 15466 <read_type_cb+0x36>
			data->err = 0x00;
   15462:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   15466:	2000      	movs	r0, #0
}
   15468:	b003      	add	sp, #12
   1546a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1546e:	68a0      	ldr	r0, [r4, #8]
   15470:	f004 f864 	bl	1953c <net_buf_frag_last>
   15474:	2102      	movs	r1, #2
   15476:	300c      	adds	r0, #12
   15478:	f004 f926 	bl	196c8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1547c:	4b13      	ldr	r3, [pc, #76]	; (154cc <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1547e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   15480:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15484:	9300      	str	r3, [sp, #0]
   15486:	9401      	str	r4, [sp, #4]
   15488:	4633      	mov	r3, r6
   1548a:	4629      	mov	r1, r5
   1548c:	4638      	mov	r0, r7
   1548e:	68a2      	ldr	r2, [r4, #8]
   15490:	f011 fc46 	bl	26d20 <att_chan_read>
	if (read < 0) {
   15494:	2800      	cmp	r0, #0
   15496:	da07      	bge.n	154a8 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   15498:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1549c:	bf32      	itee	cc
   1549e:	200e      	movcc	r0, #14
		return -err;
   154a0:	4240      	negcs	r0, r0
   154a2:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   154a4:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   154a6:	e7de      	b.n	15466 <read_type_cb+0x36>
	if (!data->item) {
   154a8:	6923      	ldr	r3, [r4, #16]
   154aa:	2b00      	cmp	r3, #0
   154ac:	d0db      	beq.n	15466 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   154ae:	68a0      	ldr	r0, [r4, #8]
   154b0:	f011 faf7 	bl	26aa2 <net_buf_frags_len>
   154b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   154b6:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   154b8:	68e3      	ldr	r3, [r4, #12]
   154ba:	781b      	ldrb	r3, [r3, #0]
   154bc:	4298      	cmp	r0, r3
   154be:	bf94      	ite	ls
   154c0:	2000      	movls	r0, #0
   154c2:	2001      	movhi	r0, #1
   154c4:	e7d0      	b.n	15468 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   154c6:	2001      	movs	r0, #1
   154c8:	e7ce      	b.n	15468 <read_type_cb+0x38>
   154ca:	bf00      	nop
   154cc:	00026ab3 	.word	0x00026ab3

000154d0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   154d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   154d2:	b087      	sub	sp, #28
   154d4:	4604      	mov	r4, r0
   154d6:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   154d8:	2200      	movs	r2, #0
   154da:	2300      	movs	r3, #0
   154dc:	4831      	ldr	r0, [pc, #196]	; (155a4 <bt_att_accept+0xd4>)
   154de:	a904      	add	r1, sp, #16
   154e0:	f00a f88c 	bl	1f5fc <k_mem_slab_alloc>
   154e4:	4605      	mov	r5, r0
   154e6:	b178      	cbz	r0, 15508 <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   154e8:	4b2f      	ldr	r3, [pc, #188]	; (155a8 <bt_att_accept+0xd8>)
   154ea:	2201      	movs	r2, #1
   154ec:	9302      	str	r3, [sp, #8]
   154ee:	2300      	movs	r3, #0
   154f0:	e9cd 3300 	strd	r3, r3, [sp]
   154f4:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   154f6:	4618      	mov	r0, r3
   154f8:	492c      	ldr	r1, [pc, #176]	; (155ac <bt_att_accept+0xdc>)
   154fa:	f011 fbc1 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   154fe:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   15502:	4630      	mov	r0, r6
   15504:	b007      	add	sp, #28
   15506:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   15508:	f00c fc42 	bl	21d90 <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   1550c:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   1550e:	4b28      	ldr	r3, [pc, #160]	; (155b0 <bt_att_accept+0xe0>)
   15510:	222c      	movs	r2, #44	; 0x2c
   15512:	6018      	str	r0, [r3, #0]
   15514:	4629      	mov	r1, r5
   15516:	1d30      	adds	r0, r6, #4
   15518:	f014 fa7d 	bl	29a16 <memset>
	att->conn = conn;
   1551c:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   1551e:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15520:	2200      	movs	r2, #0
   15522:	2300      	movs	r3, #0
	list->tail = NULL;
   15524:	e9c4 5501 	strd	r5, r5, [r4, #4]
   15528:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   1552c:	4821      	ldr	r0, [pc, #132]	; (155b4 <bt_att_accept+0xe4>)
   1552e:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15530:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15532:	f00a f863 	bl	1f5fc <k_mem_slab_alloc>
   15536:	4606      	mov	r6, r0
   15538:	b140      	cbz	r0, 1554c <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1553a:	6823      	ldr	r3, [r4, #0]
   1553c:	2202      	movs	r2, #2
   1553e:	9303      	str	r3, [sp, #12]
   15540:	4b1d      	ldr	r3, [pc, #116]	; (155b8 <bt_att_accept+0xe8>)
   15542:	9500      	str	r5, [sp, #0]
   15544:	e9cd 5301 	strd	r5, r3, [sp, #4]
   15548:	462b      	mov	r3, r5
   1554a:	e7d4      	b.n	154f6 <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   1554c:	9b05      	ldr	r3, [sp, #20]
   1554e:	4601      	mov	r1, r0
   15550:	22f8      	movs	r2, #248	; 0xf8
   15552:	4618      	mov	r0, r3
   15554:	f014 fa5f 	bl	29a16 <memset>
	chan->chan.chan.ops = &ops;
   15558:	4a18      	ldr	r2, [pc, #96]	; (155bc <bt_att_accept+0xec>)
   1555a:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   1555c:	30a0      	adds	r0, #160	; 0xa0
   1555e:	f014 f84a 	bl	295f6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15562:	9b05      	ldr	r3, [sp, #20]
   15564:	3398      	adds	r3, #152	; 0x98
   15566:	e8d3 2fef 	ldaex	r2, [r3]
   1556a:	e8c3 6fe1 	stlex	r1, r6, [r3]
   1556e:	2900      	cmp	r1, #0
   15570:	d1f9      	bne.n	15566 <bt_att_accept+0x96>
	chan->att = att;
   15572:	9b05      	ldr	r3, [sp, #20]
   15574:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   15576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   15578:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   1557a:	b91b      	cbnz	r3, 15584 <bt_att_accept+0xb4>
   1557c:	f104 000c 	add.w	r0, r4, #12
   15580:	f014 f839 	bl	295f6 <z_impl_k_queue_init>
	return list->head;
   15584:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15586:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
	parent->next = child;
   1558a:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   1558e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   15590:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   15592:	b902      	cbnz	r2, 15596 <bt_att_accept+0xc6>
	list->tail = node;
   15594:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   15596:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   15598:	2b00      	cmp	r3, #0
   1559a:	d0b0      	beq.n	154fe <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   1559c:	3304      	adds	r3, #4
   1559e:	603b      	str	r3, [r7, #0]
	return 0;
   155a0:	e7af      	b.n	15502 <bt_att_accept+0x32>
   155a2:	bf00      	nop
   155a4:	20008a08 	.word	0x20008a08
   155a8:	0002ec09 	.word	0x0002ec09
   155ac:	0002a968 	.word	0x0002a968
   155b0:	2002114c 	.word	0x2002114c
   155b4:	20008a28 	.word	0x20008a28
   155b8:	0002ec2e 	.word	0x0002ec2e
   155bc:	200084c8 	.word	0x200084c8

000155c0 <bt_att_chan_create_pdu>:
{
   155c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   155c2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   155c4:	3201      	adds	r2, #1
   155c6:	429a      	cmp	r2, r3
{
   155c8:	460d      	mov	r5, r1
   155ca:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   155cc:	d90f      	bls.n	155ee <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   155ce:	e9cd 3203 	strd	r3, r2, [sp, #12]
   155d2:	4b25      	ldr	r3, [pc, #148]	; (15668 <bt_att_chan_create_pdu+0xa8>)
   155d4:	2202      	movs	r2, #2
   155d6:	9302      	str	r3, [sp, #8]
   155d8:	2300      	movs	r3, #0
   155da:	4924      	ldr	r1, [pc, #144]	; (1566c <bt_att_chan_create_pdu+0xac>)
   155dc:	4618      	mov	r0, r3
   155de:	e9cd 3300 	strd	r3, r3, [sp]
   155e2:	f011 fb4d 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   155e6:	2400      	movs	r4, #0
}
   155e8:	4620      	mov	r0, r4
   155ea:	b007      	add	sp, #28
   155ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   155ee:	4608      	mov	r0, r1
   155f0:	f7ff fc9e 	bl	14f30 <att_op_get_type>
   155f4:	2802      	cmp	r0, #2
   155f6:	d018      	beq.n	1562a <bt_att_chan_create_pdu+0x6a>
   155f8:	2804      	cmp	r0, #4
   155fa:	d016      	beq.n	1562a <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   155fc:	f04f 36ff 	mov.w	r6, #4294967295
   15600:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   15604:	2100      	movs	r1, #0
   15606:	4632      	mov	r2, r6
   15608:	463b      	mov	r3, r7
   1560a:	4608      	mov	r0, r1
   1560c:	f011 fa10 	bl	26a30 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   15610:	4604      	mov	r4, r0
   15612:	b970      	cbnz	r0, 15632 <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   15614:	4b16      	ldr	r3, [pc, #88]	; (15670 <bt_att_chan_create_pdu+0xb0>)
   15616:	2201      	movs	r2, #1
   15618:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1561c:	4913      	ldr	r1, [pc, #76]	; (1566c <bt_att_chan_create_pdu+0xac>)
   1561e:	4603      	mov	r3, r0
   15620:	9503      	str	r5, [sp, #12]
   15622:	9000      	str	r0, [sp, #0]
   15624:	f011 fb2c 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   15628:	e7dd      	b.n	155e6 <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   1562a:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1562e:	2700      	movs	r7, #0
   15630:	e7e8      	b.n	15604 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   15632:	4810      	ldr	r0, [pc, #64]	; (15674 <bt_att_chan_create_pdu+0xb4>)
   15634:	463b      	mov	r3, r7
   15636:	4632      	mov	r2, r6
   15638:	f00a fc18 	bl	1fe6c <z_impl_k_queue_get>
   1563c:	4603      	mov	r3, r0
	if (!data) {
   1563e:	b958      	cbnz	r0, 15658 <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   15640:	4a0d      	ldr	r2, [pc, #52]	; (15678 <bt_att_chan_create_pdu+0xb8>)
   15642:	9000      	str	r0, [sp, #0]
   15644:	e9cd 0201 	strd	r0, r2, [sp, #4]
   15648:	4908      	ldr	r1, [pc, #32]	; (1566c <bt_att_chan_create_pdu+0xac>)
   1564a:	2202      	movs	r2, #2
   1564c:	f011 fb18 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   15650:	4620      	mov	r0, r4
   15652:	f003 ff17 	bl	19484 <net_buf_unref>
		return NULL;
   15656:	e7c6      	b.n	155e6 <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   15658:	61a0      	str	r0, [r4, #24]
   1565a:	2101      	movs	r1, #1
   1565c:	f104 000c 	add.w	r0, r4, #12
   15660:	f004 f832 	bl	196c8 <net_buf_simple_add>
	hdr->code = op;
   15664:	7005      	strb	r5, [r0, #0]
	return buf;
   15666:	e7bf      	b.n	155e8 <bt_att_chan_create_pdu+0x28>
   15668:	0002ec53 	.word	0x0002ec53
   1566c:	0002a968 	.word	0x0002a968
   15670:	0002e944 	.word	0x0002e944
   15674:	20008bcc 	.word	0x20008bcc
   15678:	0002ec78 	.word	0x0002ec78

0001567c <bt_att_recv>:
{
   1567c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   15680:	8a0b      	ldrh	r3, [r1, #16]
{
   15682:	4607      	mov	r7, r0
   15684:	460d      	mov	r5, r1
   15686:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15688:	b963      	cbnz	r3, 156a4 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   1568a:	4a42      	ldr	r2, [pc, #264]	; (15794 <bt_att_recv+0x118>)
   1568c:	9300      	str	r3, [sp, #0]
   1568e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15692:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   15694:	4618      	mov	r0, r3
   15696:	4940      	ldr	r1, [pc, #256]	; (15798 <bt_att_recv+0x11c>)
   15698:	f011 faf2 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
}
   1569c:	2000      	movs	r0, #0
   1569e:	b006      	add	sp, #24
   156a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   156a4:	2101      	movs	r1, #1
   156a6:	f105 000c 	add.w	r0, r5, #12
   156aa:	f003 ffef 	bl	1968c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   156ae:	f857 3c04 	ldr.w	r3, [r7, #-4]
   156b2:	4604      	mov	r4, r0
   156b4:	2b00      	cmp	r3, #0
   156b6:	d0f1      	beq.n	1569c <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   156b8:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   156ba:	7802      	ldrb	r2, [r0, #0]
   156bc:	4e37      	ldr	r6, [pc, #220]	; (1579c <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   156be:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   156c2:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   156c6:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   156ca:	4290      	cmp	r0, r2
   156cc:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   156d0:	d111      	bne.n	156f6 <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   156d2:	f891 9002 	ldrb.w	r9, [r1, #2]
   156d6:	f1b9 0f01 	cmp.w	r9, #1
   156da:	d12b      	bne.n	15734 <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   156dc:	2100      	movs	r1, #0
   156de:	f107 0094 	add.w	r0, r7, #148	; 0x94
   156e2:	f011 fbc3 	bl	26e6c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   156e6:	b380      	cbz	r0, 1574a <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   156e8:	4b2d      	ldr	r3, [pc, #180]	; (157a0 <bt_att_recv+0x124>)
   156ea:	9302      	str	r3, [sp, #8]
   156ec:	2300      	movs	r3, #0
   156ee:	2202      	movs	r2, #2
   156f0:	e9cd 3300 	strd	r3, r3, [sp]
   156f4:	e7ce      	b.n	15694 <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   156f6:	3301      	adds	r3, #1
   156f8:	2b0e      	cmp	r3, #14
   156fa:	d1e2      	bne.n	156c2 <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   156fc:	2500      	movs	r5, #0
   156fe:	4b29      	ldr	r3, [pc, #164]	; (157a4 <bt_att_recv+0x128>)
   15700:	4628      	mov	r0, r5
   15702:	4925      	ldr	r1, [pc, #148]	; (15798 <bt_att_recv+0x11c>)
   15704:	9203      	str	r2, [sp, #12]
   15706:	9302      	str	r3, [sp, #8]
   15708:	2202      	movs	r2, #2
   1570a:	462b      	mov	r3, r5
   1570c:	e9cd 5500 	strd	r5, r5, [sp]
   15710:	f011 fab6 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   15714:	7821      	ldrb	r1, [r4, #0]
   15716:	4608      	mov	r0, r1
   15718:	f7ff fc0a 	bl	14f30 <att_op_get_type>
   1571c:	2800      	cmp	r0, #0
   1571e:	d0bd      	beq.n	1569c <bt_att_recv+0x20>
   15720:	2805      	cmp	r0, #5
   15722:	d0bb      	beq.n	1569c <bt_att_recv+0x20>
	if (!req) {
   15724:	2900      	cmp	r1, #0
   15726:	d0b9      	beq.n	1569c <bt_att_recv+0x20>
   15728:	2306      	movs	r3, #6
   1572a:	2200      	movs	r2, #0
   1572c:	4640      	mov	r0, r8
   1572e:	f011 fd01 	bl	27134 <send_err_rsp.part.0>
   15732:	e7b3      	b.n	1569c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   15734:	f1b9 0f05 	cmp.w	r9, #5
   15738:	d107      	bne.n	1574a <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   1573a:	2101      	movs	r1, #1
   1573c:	f107 0094 	add.w	r0, r7, #148	; 0x94
   15740:	f011 fb94 	bl	26e6c <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   15744:	b108      	cbz	r0, 1574a <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   15746:	4b18      	ldr	r3, [pc, #96]	; (157a8 <bt_att_recv+0x12c>)
   15748:	e7cf      	b.n	156ea <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   1574a:	4456      	add	r6, sl
   1574c:	8a2b      	ldrh	r3, [r5, #16]
   1574e:	7872      	ldrb	r2, [r6, #1]
   15750:	429a      	cmp	r2, r3
   15752:	d911      	bls.n	15778 <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   15754:	7822      	ldrb	r2, [r4, #0]
   15756:	4910      	ldr	r1, [pc, #64]	; (15798 <bt_att_recv+0x11c>)
   15758:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1575c:	4b13      	ldr	r3, [pc, #76]	; (157ac <bt_att_recv+0x130>)
   1575e:	2201      	movs	r2, #1
   15760:	9302      	str	r3, [sp, #8]
   15762:	2300      	movs	r3, #0
   15764:	4618      	mov	r0, r3
   15766:	e9cd 3300 	strd	r3, r3, [sp]
   1576a:	f011 fa89 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1576e:	f1b9 0f01 	cmp.w	r9, #1
   15772:	d193      	bne.n	1569c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   15774:	2304      	movs	r3, #4
   15776:	e009      	b.n	1578c <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   15778:	6873      	ldr	r3, [r6, #4]
   1577a:	4629      	mov	r1, r5
   1577c:	4640      	mov	r0, r8
   1577e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15780:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   15784:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   15786:	d189      	bne.n	1569c <bt_att_recv+0x20>
   15788:	2800      	cmp	r0, #0
   1578a:	d087      	beq.n	1569c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1578c:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1578e:	2900      	cmp	r1, #0
   15790:	d084      	beq.n	1569c <bt_att_recv+0x20>
   15792:	e7ca      	b.n	1572a <bt_att_recv+0xae>
   15794:	0002ec97 	.word	0x0002ec97
   15798:	0002a968 	.word	0x0002a968
   1579c:	0002b340 	.word	0x0002b340
   157a0:	0002eccc 	.word	0x0002eccc
   157a4:	0002ecb2 	.word	0x0002ecb2
   157a8:	0002ece8 	.word	0x0002ece8
   157ac:	0002ed07 	.word	0x0002ed07

000157b0 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   157b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   157b2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   157b4:	6803      	ldr	r3, [r0, #0]
   157b6:	460d      	mov	r5, r1
   157b8:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   157ba:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   157bc:	bf18      	it	ne
   157be:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   157c0:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   157c2:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   157c4:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   157c6:	f011 ffa5 	bl	27714 <bt_gatt_change_aware>
   157ca:	b948      	cbnz	r0, 157e0 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   157cc:	2105      	movs	r1, #5
   157ce:	f104 0098 	add.w	r0, r4, #152	; 0x98
   157d2:	f011 fb4b 	bl	26e6c <atomic_test_and_set_bit>
   157d6:	2800      	cmp	r0, #0
   157d8:	d048      	beq.n	1586c <att_write_rsp.constprop.0+0xbc>
			return 0;
   157da:	2000      	movs	r0, #0
}
   157dc:	b007      	add	sp, #28
   157de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   157e0:	2e00      	cmp	r6, #0
   157e2:	d045      	beq.n	15870 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   157e4:	2218      	movs	r2, #24
   157e6:	2100      	movs	r1, #0
   157e8:	4668      	mov	r0, sp
   157ea:	f014 f914 	bl	29a16 <memset>
	if (rsp) {
   157ee:	bb67      	cbnz	r7, 1584a <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   157f0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   157f2:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   157f4:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   157f6:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   157f8:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   157fa:	2300      	movs	r3, #0
   157fc:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   15800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15802:	4a1c      	ldr	r2, [pc, #112]	; (15874 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   15804:	9303      	str	r3, [sp, #12]
	data.len = len;
   15806:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   1580a:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   1580e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15812:	2301      	movs	r3, #1
   15814:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15818:	466b      	mov	r3, sp
   1581a:	f011 f993 	bl	26b44 <bt_gatt_foreach_attr>
	if (data.err) {
   1581e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15822:	b1e3      	cbz	r3, 1585e <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   15824:	2f00      	cmp	r7, #0
   15826:	d0d8      	beq.n	157da <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15828:	9b01      	ldr	r3, [sp, #4]
   1582a:	6998      	ldr	r0, [r3, #24]
   1582c:	f7ff fbc6 	bl	14fbc <tx_meta_data_free>
			net_buf_unref(data.buf);
   15830:	9801      	ldr	r0, [sp, #4]
   15832:	f003 fe27 	bl	19484 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   15836:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1583a:	2d00      	cmp	r5, #0
   1583c:	d0cd      	beq.n	157da <att_write_rsp.constprop.0+0x2a>
   1583e:	4632      	mov	r2, r6
   15840:	4629      	mov	r1, r5
   15842:	4620      	mov	r0, r4
   15844:	f011 fc76 	bl	27134 <send_err_rsp.part.0>
   15848:	e7c7      	b.n	157da <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1584a:	2200      	movs	r2, #0
   1584c:	4639      	mov	r1, r7
   1584e:	4620      	mov	r0, r4
   15850:	f7ff feb6 	bl	155c0 <bt_att_chan_create_pdu>
   15854:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   15856:	2800      	cmp	r0, #0
   15858:	d1ca      	bne.n	157f0 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1585a:	200e      	movs	r0, #14
   1585c:	e7be      	b.n	157dc <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1585e:	9901      	ldr	r1, [sp, #4]
   15860:	2900      	cmp	r1, #0
   15862:	d0ba      	beq.n	157da <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   15864:	4620      	mov	r0, r4
   15866:	f011 fa4d 	bl	26d04 <bt_att_chan_send_rsp>
   1586a:	e7b6      	b.n	157da <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1586c:	2012      	movs	r0, #18
   1586e:	e7b5      	b.n	157dc <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   15870:	2001      	movs	r0, #1
   15872:	e7b3      	b.n	157dc <att_write_rsp.constprop.0+0x2c>
   15874:	00026ae3 	.word	0x00026ae3

00015878 <bt_att_create_pdu>:
{
   15878:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1587a:	460e      	mov	r6, r1
   1587c:	4615      	mov	r5, r2
	att = att_get(conn);
   1587e:	f7ff fd1f 	bl	152c0 <att_get>
	if (!att) {
   15882:	b1c0      	cbz	r0, 158b6 <bt_att_create_pdu+0x3e>
	return list->head;
   15884:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15886:	4618      	mov	r0, r3
   15888:	b11b      	cbz	r3, 15892 <bt_att_create_pdu+0x1a>
	return node->next;
   1588a:	f850 39f0 	ldr.w	r3, [r0], #-240
   1588e:	b103      	cbz	r3, 15892 <bt_att_create_pdu+0x1a>
   15890:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15892:	1c6c      	adds	r4, r5, #1
   15894:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15896:	b118      	cbz	r0, 158a0 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15898:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1589a:	42a1      	cmp	r1, r4
   1589c:	d216      	bcs.n	158cc <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1589e:	b96b      	cbnz	r3, 158bc <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   158a0:	4b0f      	ldr	r3, [pc, #60]	; (158e0 <bt_att_create_pdu+0x68>)
   158a2:	2202      	movs	r2, #2
   158a4:	9302      	str	r3, [sp, #8]
   158a6:	2300      	movs	r3, #0
   158a8:	490e      	ldr	r1, [pc, #56]	; (158e4 <bt_att_create_pdu+0x6c>)
   158aa:	4618      	mov	r0, r3
   158ac:	e9cd 3300 	strd	r3, r3, [sp]
   158b0:	9403      	str	r4, [sp, #12]
   158b2:	f011 f9e5 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
}
   158b6:	2000      	movs	r0, #0
   158b8:	b004      	add	sp, #16
   158ba:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   158bc:	4618      	mov	r0, r3
   158be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   158c2:	b153      	cbz	r3, 158da <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   158c4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   158c6:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   158c8:	428a      	cmp	r2, r1
   158ca:	d8f7      	bhi.n	158bc <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   158cc:	462a      	mov	r2, r5
   158ce:	4631      	mov	r1, r6
}
   158d0:	b004      	add	sp, #16
   158d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   158d6:	f7ff be73 	b.w	155c0 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   158da:	4614      	mov	r4, r2
   158dc:	e7dc      	b.n	15898 <bt_att_create_pdu+0x20>
   158de:	bf00      	nop
   158e0:	0002ed26 	.word	0x0002ed26
   158e4:	0002a968 	.word	0x0002a968

000158e8 <att_read_group_req>:
{
   158e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   158ec:	8a0e      	ldrh	r6, [r1, #16]
{
   158ee:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   158f0:	3e04      	subs	r6, #4
   158f2:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   158f4:	2e02      	cmp	r6, #2
{
   158f6:	4608      	mov	r0, r1
   158f8:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   158fa:	d001      	beq.n	15900 <att_read_group_req+0x18>
   158fc:	2e10      	cmp	r6, #16
   158fe:	d16a      	bne.n	159d6 <att_read_group_req+0xee>
   15900:	2104      	movs	r1, #4
   15902:	300c      	adds	r0, #12
   15904:	f003 fec2 	bl	1968c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15908:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1590c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1590e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15910:	1d01      	adds	r1, r0, #4
   15912:	4632      	mov	r2, r6
   15914:	4640      	mov	r0, r8
   15916:	f010 fbec 	bl	260f2 <bt_uuid_create>
   1591a:	2800      	cmp	r0, #0
   1591c:	d05d      	beq.n	159da <att_read_group_req+0xf2>
	if (!start || !end) {
   1591e:	2d00      	cmp	r5, #0
   15920:	d03a      	beq.n	15998 <att_read_group_req+0xb0>
   15922:	2600      	movs	r6, #0
   15924:	2f00      	cmp	r7, #0
   15926:	d036      	beq.n	15996 <att_read_group_req+0xae>
	if (start > end) {
   15928:	42bd      	cmp	r5, r7
   1592a:	d835      	bhi.n	15998 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1592c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15930:	4640      	mov	r0, r8
   15932:	a901      	add	r1, sp, #4
   15934:	f88d 6004 	strb.w	r6, [sp, #4]
   15938:	f8ad 3006 	strh.w	r3, [sp, #6]
   1593c:	f010 fbab 	bl	26096 <bt_uuid_cmp>
   15940:	bb70      	cbnz	r0, 159a0 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   15942:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15944:	2214      	movs	r2, #20
   15946:	2100      	movs	r1, #0
   15948:	a807      	add	r0, sp, #28
   1594a:	f014 f864 	bl	29a16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1594e:	2201      	movs	r2, #1
   15950:	2111      	movs	r1, #17
   15952:	4630      	mov	r0, r6
   15954:	f7ff ff90 	bl	15878 <bt_att_create_pdu>
   15958:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1595a:	2800      	cmp	r0, #0
   1595c:	d03d      	beq.n	159da <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1595e:	2101      	movs	r1, #1
   15960:	300c      	adds	r0, #12
	data.uuid = uuid;
   15962:	e9cd 4807 	strd	r4, r8, [sp, #28]
   15966:	f003 feaf 	bl	196c8 <net_buf_simple_add>
	data.rsp->len = 0U;
   1596a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1596c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1596e:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   15970:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15972:	4a1b      	ldr	r2, [pc, #108]	; (159e0 <att_read_group_req+0xf8>)
	data.group = NULL;
   15974:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15976:	4628      	mov	r0, r5
   15978:	ab07      	add	r3, sp, #28
   1597a:	f011 f8e3 	bl	26b44 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1597e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15980:	781b      	ldrb	r3, [r3, #0]
   15982:	bb1b      	cbnz	r3, 159cc <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15984:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15986:	6998      	ldr	r0, [r3, #24]
   15988:	f7ff fb18 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(data.buf);
   1598c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1598e:	f003 fd79 	bl	19484 <net_buf_unref>
	if (!req) {
   15992:	230a      	movs	r3, #10
   15994:	e001      	b.n	1599a <att_read_group_req+0xb2>
			*err = 0U;
   15996:	463d      	mov	r5, r7
	if (!req) {
   15998:	2301      	movs	r3, #1
   1599a:	462a      	mov	r2, r5
   1599c:	2110      	movs	r1, #16
   1599e:	e00e      	b.n	159be <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   159a0:	f642 0301 	movw	r3, #10241	; 0x2801
   159a4:	4640      	mov	r0, r8
   159a6:	a907      	add	r1, sp, #28
   159a8:	f88d 601c 	strb.w	r6, [sp, #28]
   159ac:	f8ad 301e 	strh.w	r3, [sp, #30]
   159b0:	f010 fb71 	bl	26096 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   159b4:	2800      	cmp	r0, #0
   159b6:	d0c4      	beq.n	15942 <att_read_group_req+0x5a>
	if (!req) {
   159b8:	2310      	movs	r3, #16
   159ba:	462a      	mov	r2, r5
   159bc:	4619      	mov	r1, r3
   159be:	4620      	mov	r0, r4
   159c0:	f011 fbb8 	bl	27134 <send_err_rsp.part.0>
		return 0;
   159c4:	2000      	movs	r0, #0
}
   159c6:	b00c      	add	sp, #48	; 0x30
   159c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   159cc:	4620      	mov	r0, r4
   159ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   159d0:	f011 f998 	bl	26d04 <bt_att_chan_send_rsp>
	return 0;
   159d4:	e7f6      	b.n	159c4 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   159d6:	2004      	movs	r0, #4
   159d8:	e7f5      	b.n	159c6 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   159da:	200e      	movs	r0, #14
   159dc:	e7f3      	b.n	159c6 <att_read_group_req+0xde>
   159de:	bf00      	nop
   159e0:	00015385 	.word	0x00015385

000159e4 <att_read_mult_vl_req>:
{
   159e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   159e8:	6846      	ldr	r6, [r0, #4]
{
   159ea:	4604      	mov	r4, r0
   159ec:	460d      	mov	r5, r1
   159ee:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   159f0:	2101      	movs	r1, #1
   159f2:	4630      	mov	r0, r6
   159f4:	f011 fe8e 	bl	27714 <bt_gatt_change_aware>
   159f8:	b950      	cbnz	r0, 15a10 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   159fa:	2105      	movs	r1, #5
   159fc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15a00:	f011 fa34 	bl	26e6c <atomic_test_and_set_bit>
   15a04:	2800      	cmp	r0, #0
   15a06:	d13b      	bne.n	15a80 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15a08:	2012      	movs	r0, #18
}
   15a0a:	b005      	add	sp, #20
   15a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   15a10:	2210      	movs	r2, #16
   15a12:	2100      	movs	r1, #0
   15a14:	4668      	mov	r0, sp
   15a16:	f013 fffe 	bl	29a16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   15a1a:	2200      	movs	r2, #0
   15a1c:	2121      	movs	r1, #33	; 0x21
   15a1e:	4630      	mov	r0, r6
   15a20:	f7ff ff2a 	bl	15878 <bt_att_create_pdu>
   15a24:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15a26:	b368      	cbz	r0, 15a84 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15a28:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15a2c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15a88 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   15a30:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15a32:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   15a36:	8a2b      	ldrh	r3, [r5, #16]
   15a38:	2b01      	cmp	r3, #1
   15a3a:	d804      	bhi.n	15a46 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   15a3c:	4620      	mov	r0, r4
   15a3e:	9902      	ldr	r1, [sp, #8]
   15a40:	f011 f960 	bl	26d04 <bt_att_chan_send_rsp>
	return 0;
   15a44:	e01c      	b.n	15a80 <att_read_mult_vl_req+0x9c>
   15a46:	4638      	mov	r0, r7
   15a48:	f012 fa1f 	bl	27e8a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15a4c:	466b      	mov	r3, sp
   15a4e:	464a      	mov	r2, r9
   15a50:	4601      	mov	r1, r0
   15a52:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15a54:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15a58:	f011 f874 	bl	26b44 <bt_gatt_foreach_attr>
		if (data.err) {
   15a5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15a60:	2b00      	cmp	r3, #0
   15a62:	d0e8      	beq.n	15a36 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15a64:	9b02      	ldr	r3, [sp, #8]
   15a66:	6998      	ldr	r0, [r3, #24]
   15a68:	f7ff faa8 	bl	14fbc <tx_meta_data_free>
			net_buf_unref(data.buf);
   15a6c:	9802      	ldr	r0, [sp, #8]
   15a6e:	f003 fd09 	bl	19484 <net_buf_unref>
	if (!req) {
   15a72:	4632      	mov	r2, r6
   15a74:	2120      	movs	r1, #32
   15a76:	4620      	mov	r0, r4
   15a78:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15a7c:	f011 fb5a 	bl	27134 <send_err_rsp.part.0>
			return 0;
   15a80:	2000      	movs	r0, #0
   15a82:	e7c2      	b.n	15a0a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15a84:	200e      	movs	r0, #14
   15a86:	e7c0      	b.n	15a0a <att_read_mult_vl_req+0x26>
   15a88:	00026ed5 	.word	0x00026ed5

00015a8c <att_read_mult_req>:
{
   15a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15a90:	6846      	ldr	r6, [r0, #4]
{
   15a92:	4604      	mov	r4, r0
   15a94:	460d      	mov	r5, r1
   15a96:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   15a98:	2101      	movs	r1, #1
   15a9a:	4630      	mov	r0, r6
   15a9c:	f011 fe3a 	bl	27714 <bt_gatt_change_aware>
   15aa0:	b950      	cbnz	r0, 15ab8 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15aa2:	2105      	movs	r1, #5
   15aa4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15aa8:	f011 f9e0 	bl	26e6c <atomic_test_and_set_bit>
   15aac:	2800      	cmp	r0, #0
   15aae:	d13b      	bne.n	15b28 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15ab0:	2012      	movs	r0, #18
}
   15ab2:	b005      	add	sp, #20
   15ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   15ab8:	2210      	movs	r2, #16
   15aba:	2100      	movs	r1, #0
   15abc:	4668      	mov	r0, sp
   15abe:	f013 ffaa 	bl	29a16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15ac2:	2200      	movs	r2, #0
   15ac4:	210f      	movs	r1, #15
   15ac6:	4630      	mov	r0, r6
   15ac8:	f7ff fed6 	bl	15878 <bt_att_create_pdu>
   15acc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15ace:	b368      	cbz	r0, 15b2c <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15ad0:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15ad4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15b30 <att_read_mult_req+0xa4>
	data.chan = chan;
   15ad8:	9400      	str	r4, [sp, #0]
   15ada:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   15ade:	8a2b      	ldrh	r3, [r5, #16]
   15ae0:	2b01      	cmp	r3, #1
   15ae2:	d804      	bhi.n	15aee <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   15ae4:	4620      	mov	r0, r4
   15ae6:	9902      	ldr	r1, [sp, #8]
   15ae8:	f011 f90c 	bl	26d04 <bt_att_chan_send_rsp>
	return 0;
   15aec:	e01c      	b.n	15b28 <att_read_mult_req+0x9c>
   15aee:	4638      	mov	r0, r7
   15af0:	f012 f9cb 	bl	27e8a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15af4:	466b      	mov	r3, sp
   15af6:	464a      	mov	r2, r9
   15af8:	4601      	mov	r1, r0
   15afa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15afc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15b00:	f011 f820 	bl	26b44 <bt_gatt_foreach_attr>
		if (data.err) {
   15b04:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15b08:	2b00      	cmp	r3, #0
   15b0a:	d0e8      	beq.n	15ade <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15b0c:	9b02      	ldr	r3, [sp, #8]
   15b0e:	6998      	ldr	r0, [r3, #24]
   15b10:	f7ff fa54 	bl	14fbc <tx_meta_data_free>
			net_buf_unref(data.buf);
   15b14:	9802      	ldr	r0, [sp, #8]
   15b16:	f003 fcb5 	bl	19484 <net_buf_unref>
	if (!req) {
   15b1a:	4632      	mov	r2, r6
   15b1c:	210e      	movs	r1, #14
   15b1e:	4620      	mov	r0, r4
   15b20:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15b24:	f011 fb06 	bl	27134 <send_err_rsp.part.0>
			return 0;
   15b28:	2000      	movs	r0, #0
   15b2a:	e7c2      	b.n	15ab2 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15b2c:	200e      	movs	r0, #14
   15b2e:	e7c0      	b.n	15ab2 <att_read_mult_req+0x26>
   15b30:	00026e8f 	.word	0x00026e8f

00015b34 <att_read_rsp>:
{
   15b34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15b38:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   15b3c:	4604      	mov	r4, r0
   15b3e:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15b40:	4640      	mov	r0, r8
   15b42:	2101      	movs	r1, #1
{
   15b44:	4617      	mov	r7, r2
   15b46:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   15b48:	f011 fde4 	bl	27714 <bt_gatt_change_aware>
   15b4c:	b948      	cbnz	r0, 15b62 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15b4e:	2105      	movs	r1, #5
   15b50:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15b54:	f011 f98a 	bl	26e6c <atomic_test_and_set_bit>
   15b58:	bb78      	cbnz	r0, 15bba <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15b5a:	2012      	movs	r0, #18
}
   15b5c:	b004      	add	sp, #16
   15b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   15b62:	b38d      	cbz	r5, 15bc8 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   15b64:	2210      	movs	r2, #16
   15b66:	2100      	movs	r1, #0
   15b68:	4668      	mov	r0, sp
   15b6a:	f013 ff54 	bl	29a16 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   15b6e:	2200      	movs	r2, #0
   15b70:	4639      	mov	r1, r7
   15b72:	4640      	mov	r0, r8
   15b74:	f7ff fe80 	bl	15878 <bt_att_create_pdu>
   15b78:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15b7a:	b338      	cbz	r0, 15bcc <att_read_rsp+0x98>
	data.offset = offset;
   15b7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15b80:	4629      	mov	r1, r5
	data.offset = offset;
   15b82:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15b86:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15b88:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15b8a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15b8e:	4a10      	ldr	r2, [pc, #64]	; (15bd0 <att_read_rsp+0x9c>)
   15b90:	466b      	mov	r3, sp
	data.chan = chan;
   15b92:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15b94:	f010 ffd6 	bl	26b44 <bt_gatt_foreach_attr>
	if (data.err) {
   15b98:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15b9c:	b17b      	cbz	r3, 15bbe <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15b9e:	9b02      	ldr	r3, [sp, #8]
   15ba0:	6998      	ldr	r0, [r3, #24]
   15ba2:	f7ff fa0b 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(data.buf);
   15ba6:	9802      	ldr	r0, [sp, #8]
   15ba8:	f003 fc6c 	bl	19484 <net_buf_unref>
	if (!req) {
   15bac:	462a      	mov	r2, r5
   15bae:	4631      	mov	r1, r6
   15bb0:	4620      	mov	r0, r4
   15bb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15bb6:	f011 fabd 	bl	27134 <send_err_rsp.part.0>
			return 0;
   15bba:	2000      	movs	r0, #0
   15bbc:	e7ce      	b.n	15b5c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   15bbe:	4620      	mov	r0, r4
   15bc0:	9902      	ldr	r1, [sp, #8]
   15bc2:	f011 f89f 	bl	26d04 <bt_att_chan_send_rsp>
	return 0;
   15bc6:	e7f8      	b.n	15bba <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   15bc8:	2001      	movs	r0, #1
   15bca:	e7c7      	b.n	15b5c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   15bcc:	200e      	movs	r0, #14
   15bce:	e7c5      	b.n	15b5c <att_read_rsp+0x28>
   15bd0:	00026e8f 	.word	0x00026e8f

00015bd4 <att_read_type_req>:
{
   15bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15bd8:	8a0d      	ldrh	r5, [r1, #16]
{
   15bda:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   15bdc:	3d04      	subs	r5, #4
   15bde:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   15be0:	2d02      	cmp	r5, #2
{
   15be2:	4608      	mov	r0, r1
   15be4:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   15be6:	d001      	beq.n	15bec <att_read_type_req+0x18>
   15be8:	2d10      	cmp	r5, #16
   15bea:	d150      	bne.n	15c8e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   15bec:	2104      	movs	r1, #4
   15bee:	300c      	adds	r0, #12
   15bf0:	f003 fd4c 	bl	1968c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15bf4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   15bf8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15bfa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15bfc:	1d01      	adds	r1, r0, #4
   15bfe:	462a      	mov	r2, r5
   15c00:	4640      	mov	r0, r8
   15c02:	f010 fa76 	bl	260f2 <bt_uuid_create>
   15c06:	b188      	cbz	r0, 15c2c <att_read_type_req+0x58>
	if (!start || !end) {
   15c08:	b19e      	cbz	r6, 15c32 <att_read_type_req+0x5e>
   15c0a:	b18f      	cbz	r7, 15c30 <att_read_type_req+0x5c>
	if (start > end) {
   15c0c:	42be      	cmp	r6, r7
   15c0e:	d810      	bhi.n	15c32 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15c10:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15c12:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15c14:	2100      	movs	r1, #0
   15c16:	eb0d 0002 	add.w	r0, sp, r2
   15c1a:	f013 fefc 	bl	29a16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15c1e:	2201      	movs	r2, #1
   15c20:	2109      	movs	r1, #9
   15c22:	4628      	mov	r0, r5
   15c24:	f7ff fe28 	bl	15878 <bt_att_create_pdu>
   15c28:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   15c2a:	b960      	cbnz	r0, 15c46 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   15c2c:	200e      	movs	r0, #14
   15c2e:	e007      	b.n	15c40 <att_read_type_req+0x6c>
			*err = 0U;
   15c30:	463e      	mov	r6, r7
	if (!req) {
   15c32:	2301      	movs	r3, #1
   15c34:	4632      	mov	r2, r6
   15c36:	2108      	movs	r1, #8
   15c38:	4620      	mov	r0, r4
   15c3a:	f011 fa7b 	bl	27134 <send_err_rsp.part.0>
		return 0;
   15c3e:	2000      	movs	r0, #0
}
   15c40:	b00c      	add	sp, #48	; 0x30
   15c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   15c46:	2101      	movs	r1, #1
   15c48:	300c      	adds	r0, #12
	data.uuid = uuid;
   15c4a:	e9cd 4806 	strd	r4, r8, [sp, #24]
   15c4e:	f003 fd3b 	bl	196c8 <net_buf_simple_add>
	data.rsp->len = 0U;
   15c52:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15c54:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   15c56:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15c58:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15c5a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15c5c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15c60:	4630      	mov	r0, r6
   15c62:	ab06      	add	r3, sp, #24
   15c64:	4a0b      	ldr	r2, [pc, #44]	; (15c94 <att_read_type_req+0xc0>)
   15c66:	f010 ff6d 	bl	26b44 <bt_gatt_foreach_attr>
	if (data.err) {
   15c6a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15c6e:	b14b      	cbz	r3, 15c84 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15c70:	9b08      	ldr	r3, [sp, #32]
   15c72:	6998      	ldr	r0, [r3, #24]
   15c74:	f7ff f9a2 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(data.buf);
   15c78:	9808      	ldr	r0, [sp, #32]
   15c7a:	f003 fc03 	bl	19484 <net_buf_unref>
	if (!req) {
   15c7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15c82:	e7d7      	b.n	15c34 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   15c84:	4620      	mov	r0, r4
   15c86:	9908      	ldr	r1, [sp, #32]
   15c88:	f011 f83c 	bl	26d04 <bt_att_chan_send_rsp>
	return 0;
   15c8c:	e7d7      	b.n	15c3e <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   15c8e:	2004      	movs	r0, #4
   15c90:	e7d6      	b.n	15c40 <att_read_type_req+0x6c>
   15c92:	bf00      	nop
   15c94:	00015431 	.word	0x00015431

00015c98 <att_find_type_req>:
{
   15c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15c9c:	460f      	mov	r7, r1
   15c9e:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   15ca0:	2106      	movs	r1, #6
   15ca2:	b086      	sub	sp, #24
   15ca4:	f107 000c 	add.w	r0, r7, #12
   15ca8:	f003 fcf0 	bl	1968c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   15cac:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15cae:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   15cb2:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   15cb4:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   15cb8:	b1c5      	cbz	r5, 15cec <att_find_type_req+0x54>
   15cba:	2300      	movs	r3, #0
   15cbc:	f1b8 0f00 	cmp.w	r8, #0
   15cc0:	d013      	beq.n	15cea <att_find_type_req+0x52>
	if (start > end) {
   15cc2:	4545      	cmp	r5, r8
   15cc4:	d812      	bhi.n	15cec <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15cc6:	f88d 3000 	strb.w	r3, [sp]
   15cca:	f88d 3004 	strb.w	r3, [sp, #4]
   15cce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15cd2:	4668      	mov	r0, sp
   15cd4:	a901      	add	r1, sp, #4
   15cd6:	f8ad 2002 	strh.w	r2, [sp, #2]
   15cda:	f8ad 3006 	strh.w	r3, [sp, #6]
   15cde:	f010 f9da 	bl	26096 <bt_uuid_cmp>
   15ce2:	4606      	mov	r6, r0
   15ce4:	b160      	cbz	r0, 15d00 <att_find_type_req+0x68>
	if (!req) {
   15ce6:	230a      	movs	r3, #10
   15ce8:	e001      	b.n	15cee <att_find_type_req+0x56>
			*err = 0U;
   15cea:	4645      	mov	r5, r8
	if (!req) {
   15cec:	2301      	movs	r3, #1
   15cee:	462a      	mov	r2, r5
   15cf0:	2106      	movs	r1, #6
   15cf2:	4620      	mov	r0, r4
   15cf4:	f011 fa1e 	bl	27134 <send_err_rsp.part.0>
		return 0;
   15cf8:	2000      	movs	r0, #0
}
   15cfa:	b006      	add	sp, #24
   15cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   15d00:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15d04:	4601      	mov	r1, r0
   15d06:	2214      	movs	r2, #20
   15d08:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15d0a:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   15d0c:	f013 fe83 	bl	29a16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   15d10:	4632      	mov	r2, r6
   15d12:	2107      	movs	r1, #7
   15d14:	4650      	mov	r0, sl
   15d16:	f7ff fdaf 	bl	15878 <bt_att_create_pdu>
   15d1a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15d1c:	b1f8      	cbz	r0, 15d5e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15d1e:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15d20:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15d22:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15d26:	4628      	mov	r0, r5
   15d28:	ab01      	add	r3, sp, #4
   15d2a:	4a0e      	ldr	r2, [pc, #56]	; (15d64 <att_find_type_req+0xcc>)
	data.value = value;
   15d2c:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   15d30:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   15d32:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15d36:	f010 ff05 	bl	26b44 <bt_gatt_foreach_attr>
	if (data.err) {
   15d3a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15d3e:	b14b      	cbz	r3, 15d54 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15d40:	9b02      	ldr	r3, [sp, #8]
   15d42:	6998      	ldr	r0, [r3, #24]
   15d44:	f7ff f93a 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(data.buf);
   15d48:	9802      	ldr	r0, [sp, #8]
   15d4a:	f003 fb9b 	bl	19484 <net_buf_unref>
	if (!req) {
   15d4e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15d52:	e7cc      	b.n	15cee <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   15d54:	4620      	mov	r0, r4
   15d56:	9902      	ldr	r1, [sp, #8]
   15d58:	f010 ffd4 	bl	26d04 <bt_att_chan_send_rsp>
	return 0;
   15d5c:	e7cc      	b.n	15cf8 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   15d5e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15d60:	e7cb      	b.n	15cfa <att_find_type_req+0x62>
   15d62:	bf00      	nop
   15d64:	00014ffd 	.word	0x00014ffd

00015d68 <att_find_info_req>:
{
   15d68:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   15d6a:	68cb      	ldr	r3, [r1, #12]
{
   15d6c:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   15d6e:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15d70:	885e      	ldrh	r6, [r3, #2]
{
   15d72:	b085      	sub	sp, #20
	if (!start || !end) {
   15d74:	b195      	cbz	r5, 15d9c <att_find_info_req+0x34>
   15d76:	b186      	cbz	r6, 15d9a <att_find_info_req+0x32>
	if (start > end) {
   15d78:	42ae      	cmp	r6, r5
   15d7a:	d30f      	bcc.n	15d9c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15d7c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   15d7e:	2210      	movs	r2, #16
   15d80:	2100      	movs	r1, #0
   15d82:	4668      	mov	r0, sp
   15d84:	f013 fe47 	bl	29a16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   15d88:	2200      	movs	r2, #0
   15d8a:	2105      	movs	r1, #5
   15d8c:	4638      	mov	r0, r7
   15d8e:	f7ff fd73 	bl	15878 <bt_att_create_pdu>
   15d92:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15d94:	b958      	cbnz	r0, 15dae <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   15d96:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   15d98:	e007      	b.n	15daa <att_find_info_req+0x42>
			*err = 0U;
   15d9a:	4635      	mov	r5, r6
	if (!req) {
   15d9c:	2301      	movs	r3, #1
   15d9e:	462a      	mov	r2, r5
   15da0:	2104      	movs	r1, #4
   15da2:	4620      	mov	r0, r4
   15da4:	f011 f9c6 	bl	27134 <send_err_rsp.part.0>
		return 0;
   15da8:	2000      	movs	r0, #0
}
   15daa:	b005      	add	sp, #20
   15dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15dae:	466b      	mov	r3, sp
   15db0:	4631      	mov	r1, r6
   15db2:	4628      	mov	r0, r5
   15db4:	4a09      	ldr	r2, [pc, #36]	; (15ddc <att_find_info_req+0x74>)
	data.chan = chan;
   15db6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15db8:	f010 fec4 	bl	26b44 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   15dbc:	9b02      	ldr	r3, [sp, #8]
   15dbe:	b943      	cbnz	r3, 15dd2 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15dc0:	9b01      	ldr	r3, [sp, #4]
   15dc2:	6998      	ldr	r0, [r3, #24]
   15dc4:	f7ff f8fa 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(data.buf);
   15dc8:	9801      	ldr	r0, [sp, #4]
   15dca:	f003 fb5b 	bl	19484 <net_buf_unref>
	if (!req) {
   15dce:	230a      	movs	r3, #10
   15dd0:	e7e5      	b.n	15d9e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   15dd2:	4620      	mov	r0, r4
   15dd4:	9901      	ldr	r1, [sp, #4]
   15dd6:	f010 ff95 	bl	26d04 <bt_att_chan_send_rsp>
	return 0;
   15dda:	e7e5      	b.n	15da8 <att_find_info_req+0x40>
   15ddc:	00026be1 	.word	0x00026be1

00015de0 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   15de0:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   15de2:	4c09      	ldr	r4, [pc, #36]	; (15e08 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   15de4:	4d09      	ldr	r5, [pc, #36]	; (15e0c <bt_att_init+0x2c>)
   15de6:	4620      	mov	r0, r4
   15de8:	f013 fc05 	bl	295f6 <z_impl_k_queue_init>
   15dec:	4629      	mov	r1, r5
   15dee:	4620      	mov	r0, r4
   15df0:	f013 fc0e 	bl	29610 <k_queue_append>
   15df4:	4620      	mov	r0, r4
   15df6:	f105 0114 	add.w	r1, r5, #20
   15dfa:	f013 fc09 	bl	29610 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   15dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   15e02:	f000 bb9f 	b.w	16544 <bt_gatt_init>
   15e06:	bf00      	nop
   15e08:	20008bcc 	.word	0x20008bcc
   15e0c:	20021124 	.word	0x20021124

00015e10 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   15e10:	2300      	movs	r3, #0
{
   15e12:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15e14:	4605      	mov	r5, r0
   15e16:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   15e18:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   15e1a:	f00b ffb9 	bl	21d90 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   15e1e:	4b0c      	ldr	r3, [pc, #48]	; (15e50 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15e20:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   15e22:	681b      	ldr	r3, [r3, #0]
   15e24:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   15e26:	bf04      	itt	eq
   15e28:	2500      	moveq	r5, #0
   15e2a:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15e2c:	462a      	mov	r2, r5
   15e2e:	4623      	mov	r3, r4
   15e30:	4808      	ldr	r0, [pc, #32]	; (15e54 <bt_att_req_alloc+0x44>)
   15e32:	f009 fbe3 	bl	1f5fc <k_mem_slab_alloc>
   15e36:	4601      	mov	r1, r0
   15e38:	b940      	cbnz	r0, 15e4c <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   15e3a:	9b01      	ldr	r3, [sp, #4]
   15e3c:	221c      	movs	r2, #28
   15e3e:	4618      	mov	r0, r3
   15e40:	f013 fde9 	bl	29a16 <memset>
   15e44:	4603      	mov	r3, r0

	return req;
}
   15e46:	4618      	mov	r0, r3
   15e48:	b003      	add	sp, #12
   15e4a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   15e4c:	2300      	movs	r3, #0
   15e4e:	e7fa      	b.n	15e46 <bt_att_req_alloc+0x36>
   15e50:	2002114c 	.word	0x2002114c
   15e54:	20008a48 	.word	0x20008a48

00015e58 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   15e58:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   15e5a:	6883      	ldr	r3, [r0, #8]
{
   15e5c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   15e5e:	b14b      	cbz	r3, 15e74 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   15e60:	6998      	ldr	r0, [r3, #24]
   15e62:	f7ff f8ab 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(req->buf);
   15e66:	9b01      	ldr	r3, [sp, #4]
   15e68:	6898      	ldr	r0, [r3, #8]
   15e6a:	f003 fb0b 	bl	19484 <net_buf_unref>
		req->buf = NULL;
   15e6e:	2200      	movs	r2, #0
   15e70:	9b01      	ldr	r3, [sp, #4]
   15e72:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   15e74:	4803      	ldr	r0, [pc, #12]	; (15e84 <bt_att_req_free+0x2c>)
   15e76:	a901      	add	r1, sp, #4
   15e78:	f009 fc2a 	bl	1f6d0 <k_mem_slab_free>
}
   15e7c:	b003      	add	sp, #12
   15e7e:	f85d fb04 	ldr.w	pc, [sp], #4
   15e82:	bf00      	nop
   15e84:	20008a48 	.word	0x20008a48

00015e88 <att_handle_rsp>:
{
   15e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15e8c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15e8e:	30c0      	adds	r0, #192	; 0xc0
{
   15e90:	461d      	mov	r5, r3
   15e92:	460e      	mov	r6, r1
   15e94:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   15e96:	f00a fdf9 	bl	20a8c <k_work_cancel_delayable>
	if (!chan->req) {
   15e9a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   15e9e:	b97b      	cbnz	r3, 15ec0 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   15ea0:	4a19      	ldr	r2, [pc, #100]	; (15f08 <att_handle_rsp+0x80>)
   15ea2:	4618      	mov	r0, r3
   15ea4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15ea8:	4918      	ldr	r1, [pc, #96]	; (15f0c <att_handle_rsp+0x84>)
   15eaa:	2202      	movs	r2, #2
   15eac:	9300      	str	r3, [sp, #0]
   15eae:	f010 fee7 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   15eb2:	6820      	ldr	r0, [r4, #0]
   15eb4:	f011 f876 	bl	26fa4 <att_req_send_process>
}
   15eb8:	2000      	movs	r0, #0
   15eba:	b004      	add	sp, #16
   15ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   15ec0:	4a13      	ldr	r2, [pc, #76]	; (15f10 <att_handle_rsp+0x88>)
   15ec2:	f04f 0800 	mov.w	r8, #0
   15ec6:	4293      	cmp	r3, r2
   15ec8:	d102      	bne.n	15ed0 <att_handle_rsp+0x48>
		chan->req = NULL;
   15eca:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   15ece:	e7f0      	b.n	15eb2 <att_handle_rsp+0x2a>
	func = chan->req->func;
   15ed0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   15ed4:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   15ed8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   15edc:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   15ee0:	f7ff ffba 	bl	15e58 <bt_att_req_free>
	att_req_send_process(chan->att);
   15ee4:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   15ee6:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   15eea:	f011 f85b 	bl	26fa4 <att_req_send_process>
	if (func) {
   15eee:	f1b9 0f00 	cmp.w	r9, #0
   15ef2:	d0e1      	beq.n	15eb8 <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   15ef4:	6820      	ldr	r0, [r4, #0]
   15ef6:	f8cd a000 	str.w	sl, [sp]
   15efa:	463b      	mov	r3, r7
   15efc:	4632      	mov	r2, r6
   15efe:	4629      	mov	r1, r5
   15f00:	6800      	ldr	r0, [r0, #0]
   15f02:	47c8      	blx	r9
   15f04:	e7d8      	b.n	15eb8 <att_handle_rsp+0x30>
   15f06:	bf00      	nop
   15f08:	0002ed41 	.word	0x0002ed41
   15f0c:	0002a968 	.word	0x0002a968
   15f10:	20021150 	.word	0x20021150

00015f14 <bt_att_disconnected>:
{
   15f14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   15f18:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   15f1c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   15f1e:	2e00      	cmp	r6, #0
   15f20:	d056      	beq.n	15fd0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   15f22:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   15f26:	f106 0028 	add.w	r0, r6, #40	; 0x28
   15f2a:	f010 ff84 	bl	26e36 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   15f2e:	1f27      	subs	r7, r4, #4
   15f30:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   15f34:	2200      	movs	r2, #0
   15f36:	2300      	movs	r3, #0
   15f38:	4640      	mov	r0, r8
   15f3a:	f011 ff9d 	bl	27e78 <net_buf_get>
   15f3e:	4605      	mov	r5, r0
   15f40:	bb28      	cbnz	r0, 15f8e <bt_att_disconnected+0x7a>
	if (chan->req) {
   15f42:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   15f46:	b12b      	cbz	r3, 15f54 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   15f48:	4602      	mov	r2, r0
   15f4a:	4601      	mov	r1, r0
   15f4c:	230e      	movs	r3, #14
   15f4e:	4638      	mov	r0, r7
   15f50:	f7ff ff9a 	bl	15e88 <att_handle_rsp>
	chan->att = NULL;
   15f54:	2300      	movs	r3, #0
   15f56:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   15f5a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15f5c:	2b00      	cmp	r3, #0
   15f5e:	d137      	bne.n	15fd0 <bt_att_disconnected+0xbc>
	att_reset(att);
   15f60:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   15f62:	9803      	ldr	r0, [sp, #12]
   15f64:	2200      	movs	r2, #0
   15f66:	2300      	movs	r3, #0
   15f68:	300c      	adds	r0, #12
   15f6a:	f011 ff85 	bl	27e78 <net_buf_get>
   15f6e:	4605      	mov	r5, r0
   15f70:	b9a0      	cbnz	r0, 15f9c <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   15f72:	9803      	ldr	r0, [sp, #12]
	return list->head;
   15f74:	6845      	ldr	r5, [r0, #4]
   15f76:	b9c5      	cbnz	r5, 15faa <bt_att_disconnected+0x96>
	att->conn = NULL;
   15f78:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   15f7a:	a903      	add	r1, sp, #12
   15f7c:	4816      	ldr	r0, [pc, #88]	; (15fd8 <bt_att_disconnected+0xc4>)
   15f7e:	f009 fba7 	bl	1f6d0 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   15f82:	6820      	ldr	r0, [r4, #0]
}
   15f84:	b004      	add	sp, #16
   15f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   15f8a:	f001 b94d 	b.w	17228 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15f8e:	69a8      	ldr	r0, [r5, #24]
   15f90:	f7ff f814 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(buf);
   15f94:	4628      	mov	r0, r5
   15f96:	f003 fa75 	bl	19484 <net_buf_unref>
   15f9a:	e7cb      	b.n	15f34 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15f9c:	69a8      	ldr	r0, [r5, #24]
   15f9e:	f7ff f80d 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(buf);
   15fa2:	4628      	mov	r0, r5
   15fa4:	f003 fa6e 	bl	19484 <net_buf_unref>
   15fa8:	e7db      	b.n	15f62 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15faa:	6882      	ldr	r2, [r0, #8]
	return node->next;
   15fac:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15fae:	4295      	cmp	r5, r2
	list->head = node;
   15fb0:	6043      	str	r3, [r0, #4]
	list->tail = node;
   15fb2:	bf08      	it	eq
   15fb4:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   15fb6:	686e      	ldr	r6, [r5, #4]
   15fb8:	b136      	cbz	r6, 15fc8 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15fba:	69ab      	ldr	r3, [r5, #24]
   15fbc:	210e      	movs	r1, #14
   15fbe:	9300      	str	r3, [sp, #0]
   15fc0:	2300      	movs	r3, #0
   15fc2:	6800      	ldr	r0, [r0, #0]
   15fc4:	461a      	mov	r2, r3
   15fc6:	47b0      	blx	r6
		bt_att_req_free(req);
   15fc8:	4628      	mov	r0, r5
   15fca:	f7ff ff45 	bl	15e58 <bt_att_req_free>
   15fce:	e7d0      	b.n	15f72 <bt_att_disconnected+0x5e>
}
   15fd0:	b004      	add	sp, #16
   15fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15fd6:	bf00      	nop
   15fd8:	20008a08 	.word	0x20008a08

00015fdc <att_timeout>:
{
   15fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   15fde:	4b09      	ldr	r3, [pc, #36]	; (16004 <att_timeout+0x28>)
{
   15fe0:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   15fe2:	9302      	str	r3, [sp, #8]
   15fe4:	2300      	movs	r3, #0
   15fe6:	2201      	movs	r2, #1
   15fe8:	4618      	mov	r0, r3
   15fea:	e9cd 3300 	strd	r3, r3, [sp]
   15fee:	4906      	ldr	r1, [pc, #24]	; (16008 <att_timeout+0x2c>)
   15ff0:	f010 fe46 	bl	26c80 <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   15ff4:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   15ff8:	b004      	add	sp, #16
   15ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   15ffe:	f7ff bf89 	b.w	15f14 <bt_att_disconnected>
   16002:	bf00      	nop
   16004:	0002ed58 	.word	0x0002ed58
   16008:	0002a968 	.word	0x0002a968

0001600c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1600e:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   16010:	b958      	cbnz	r0, 1602a <bt_att_send+0x1e>
   16012:	4929      	ldr	r1, [pc, #164]	; (160b8 <bt_att_send+0xac>)
   16014:	f640 63a4 	movw	r3, #3748	; 0xea4
   16018:	4a28      	ldr	r2, [pc, #160]	; (160bc <bt_att_send+0xb0>)
   1601a:	4829      	ldr	r0, [pc, #164]	; (160c0 <bt_att_send+0xb4>)
   1601c:	f00e ff5b 	bl	24ed6 <assert_print>
   16020:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   16024:	4825      	ldr	r0, [pc, #148]	; (160bc <bt_att_send+0xb0>)
   16026:	f00e ff4f 	bl	24ec8 <assert_post_action>
   1602a:	b949      	cbnz	r1, 16040 <bt_att_send+0x34>
   1602c:	4925      	ldr	r1, [pc, #148]	; (160c4 <bt_att_send+0xb8>)
   1602e:	f640 63a5 	movw	r3, #3749	; 0xea5
   16032:	4a22      	ldr	r2, [pc, #136]	; (160bc <bt_att_send+0xb0>)
   16034:	4822      	ldr	r0, [pc, #136]	; (160c0 <bt_att_send+0xb4>)
   16036:	f00e ff4e 	bl	24ed6 <assert_print>
   1603a:	f640 61a5 	movw	r1, #3749	; 0xea5
   1603e:	e7f1      	b.n	16024 <bt_att_send+0x18>

	att = att_get(conn);
   16040:	f7ff f93e 	bl	152c0 <att_get>
	if (!att) {
   16044:	4605      	mov	r5, r0
   16046:	b940      	cbnz	r0, 1605a <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16048:	69a0      	ldr	r0, [r4, #24]
   1604a:	f7fe ffb7 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(buf);
   1604e:	4620      	mov	r0, r4
   16050:	f003 fa18 	bl	19484 <net_buf_unref>
		return -ENOTCONN;
   16054:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   16058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1605a:	f100 060c 	add.w	r6, r0, #12
   1605e:	4621      	mov	r1, r4
   16060:	4630      	mov	r0, r6
   16062:	f003 f9e9 	bl	19438 <net_buf_put>
	return list->head;
   16066:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16068:	b14d      	cbz	r5, 1607e <bt_att_send+0x72>
	return node->next;
   1606a:	f855 49f0 	ldr.w	r4, [r5], #-240
   1606e:	b104      	cbz	r4, 16072 <bt_att_send+0x66>
   16070:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   16072:	4631      	mov	r1, r6
   16074:	4628      	mov	r0, r5
   16076:	f010 fe2c 	bl	26cd2 <process_queue>
		if (!err) {
   1607a:	4603      	mov	r3, r0
   1607c:	b980      	cbnz	r0, 160a0 <bt_att_send+0x94>
	return 0;
   1607e:	2000      	movs	r0, #0
   16080:	e7ea      	b.n	16058 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16082:	2103      	movs	r1, #3
   16084:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16088:	f010 fd25 	bl	26ad6 <atomic_test_bit>
   1608c:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1608e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16092:	f010 fd20 	bl	26ad6 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   16096:	4287      	cmp	r7, r0
   16098:	f06f 0301 	mvn.w	r3, #1
   1609c:	d107      	bne.n	160ae <bt_att_send+0xa2>
   1609e:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   160a0:	2c00      	cmp	r4, #0
   160a2:	d0ec      	beq.n	1607e <bt_att_send+0x72>
   160a4:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   160a8:	b922      	cbnz	r2, 160b4 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   160aa:	3302      	adds	r3, #2
   160ac:	d0e9      	beq.n	16082 <bt_att_send+0x76>
{
   160ae:	4625      	mov	r5, r4
   160b0:	4614      	mov	r4, r2
   160b2:	e7de      	b.n	16072 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   160b4:	3af0      	subs	r2, #240	; 0xf0
   160b6:	e7f8      	b.n	160aa <bt_att_send+0x9e>
   160b8:	0002ddc8 	.word	0x0002ddc8
   160bc:	0002eae1 	.word	0x0002eae1
   160c0:	0002b939 	.word	0x0002b939
   160c4:	0002f5f4 	.word	0x0002f5f4

000160c8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   160c8:	b510      	push	{r4, lr}
   160ca:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   160cc:	b958      	cbnz	r0, 160e6 <bt_att_req_send+0x1e>
   160ce:	4915      	ldr	r1, [pc, #84]	; (16124 <bt_att_req_send+0x5c>)
   160d0:	f640 63ba 	movw	r3, #3770	; 0xeba
   160d4:	4a14      	ldr	r2, [pc, #80]	; (16128 <bt_att_req_send+0x60>)
   160d6:	4815      	ldr	r0, [pc, #84]	; (1612c <bt_att_req_send+0x64>)
   160d8:	f00e fefd 	bl	24ed6 <assert_print>
   160dc:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   160e0:	4811      	ldr	r0, [pc, #68]	; (16128 <bt_att_req_send+0x60>)
   160e2:	f00e fef1 	bl	24ec8 <assert_post_action>
   160e6:	b949      	cbnz	r1, 160fc <bt_att_req_send+0x34>
   160e8:	4911      	ldr	r1, [pc, #68]	; (16130 <bt_att_req_send+0x68>)
   160ea:	f640 63bb 	movw	r3, #3771	; 0xebb
   160ee:	4a0e      	ldr	r2, [pc, #56]	; (16128 <bt_att_req_send+0x60>)
   160f0:	480e      	ldr	r0, [pc, #56]	; (1612c <bt_att_req_send+0x64>)
   160f2:	f00e fef0 	bl	24ed6 <assert_print>
   160f6:	f640 61bb 	movw	r1, #3771	; 0xebb
   160fa:	e7f1      	b.n	160e0 <bt_att_req_send+0x18>

	att = att_get(conn);
   160fc:	f7ff f8e0 	bl	152c0 <att_get>
	if (!att) {
   16100:	b160      	cbz	r0, 1611c <bt_att_req_send+0x54>
	parent->next = child;
   16102:	2300      	movs	r3, #0
   16104:	6023      	str	r3, [r4, #0]
	return list->tail;
   16106:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   16108:	b92b      	cbnz	r3, 16116 <bt_att_req_send+0x4e>
	list->head = node;
   1610a:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1610e:	f010 ff49 	bl	26fa4 <att_req_send_process>

	return 0;
   16112:	2000      	movs	r0, #0
}
   16114:	bd10      	pop	{r4, pc}
	parent->next = child;
   16116:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16118:	6084      	str	r4, [r0, #8]
}
   1611a:	e7f8      	b.n	1610e <bt_att_req_send+0x46>
		return -ENOTCONN;
   1611c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16120:	e7f8      	b.n	16114 <bt_att_req_send+0x4c>
   16122:	bf00      	nop
   16124:	0002ddc8 	.word	0x0002ddc8
   16128:	0002eae1 	.word	0x0002eae1
   1612c:	0002b939 	.word	0x0002b939
   16130:	0002eb90 	.word	0x0002eb90

00016134 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16134:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16136:	4606      	mov	r6, r0
   16138:	4d13      	ldr	r5, [pc, #76]	; (16188 <find_cf_cfg+0x54>)
   1613a:	b140      	cbz	r0, 1614e <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1613c:	462a      	mov	r2, r5
   1613e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16142:	1e6c      	subs	r4, r5, #1
   16144:	f010 fbcf 	bl	268e6 <bt_conn_is_peer_addr_le>
   16148:	b198      	cbz	r0, 16172 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1614a:	4620      	mov	r0, r4
   1614c:	e00c      	b.n	16168 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1614e:	4628      	mov	r0, r5
   16150:	490e      	ldr	r1, [pc, #56]	; (1618c <find_cf_cfg+0x58>)
   16152:	f011 f967 	bl	27424 <bt_addr_le_eq>
   16156:	b940      	cbnz	r0, 1616a <find_cf_cfg+0x36>
   16158:	490c      	ldr	r1, [pc, #48]	; (1618c <find_cf_cfg+0x58>)
   1615a:	f105 0010 	add.w	r0, r5, #16
   1615e:	f011 f961 	bl	27424 <bt_addr_le_eq>
   16162:	b120      	cbz	r0, 1616e <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16164:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   16168:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1616a:	1e68      	subs	r0, r5, #1
   1616c:	e7fc      	b.n	16168 <find_cf_cfg+0x34>
	return NULL;
   1616e:	2000      	movs	r0, #0
   16170:	e7fa      	b.n	16168 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16172:	4630      	mov	r0, r6
   16174:	7c21      	ldrb	r1, [r4, #16]
   16176:	f104 0211 	add.w	r2, r4, #17
   1617a:	f010 fbb4 	bl	268e6 <bt_conn_is_peer_addr_le>
   1617e:	2800      	cmp	r0, #0
   16180:	d0f5      	beq.n	1616e <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16182:	f104 0010 	add.w	r0, r4, #16
   16186:	e7ef      	b.n	16168 <find_cf_cfg+0x34>
   16188:	20021185 	.word	0x20021185
   1618c:	0002d8ec 	.word	0x0002d8ec

00016190 <find_sc_cfg>:
{
   16190:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16192:	4c0e      	ldr	r4, [pc, #56]	; (161cc <find_sc_cfg+0x3c>)
{
   16194:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   16196:	7823      	ldrb	r3, [r4, #0]
{
   16198:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1619a:	4283      	cmp	r3, r0
   1619c:	d00c      	beq.n	161b8 <find_sc_cfg+0x28>
   1619e:	7b23      	ldrb	r3, [r4, #12]
   161a0:	42ab      	cmp	r3, r5
   161a2:	d110      	bne.n	161c6 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   161a4:	4631      	mov	r1, r6
   161a6:	480a      	ldr	r0, [pc, #40]	; (161d0 <find_sc_cfg+0x40>)
   161a8:	f011 f93c 	bl	27424 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   161ac:	b158      	cbz	r0, 161c6 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   161ae:	2301      	movs	r3, #1
			return &sc_cfg[i];
   161b0:	220c      	movs	r2, #12
   161b2:	fb02 4003 	mla	r0, r2, r3, r4
   161b6:	e007      	b.n	161c8 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   161b8:	1c60      	adds	r0, r4, #1
   161ba:	f011 f933 	bl	27424 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   161be:	2800      	cmp	r0, #0
   161c0:	d0ed      	beq.n	1619e <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   161c2:	2300      	movs	r3, #0
   161c4:	e7f4      	b.n	161b0 <find_sc_cfg+0x20>
	return NULL;
   161c6:	2000      	movs	r0, #0
}
   161c8:	bd70      	pop	{r4, r5, r6, pc}
   161ca:	bf00      	nop
   161cc:	20021590 	.word	0x20021590
   161d0:	2002159d 	.word	0x2002159d

000161d4 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   161d4:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   161d6:	1c4a      	adds	r2, r1, #1
{
   161d8:	460c      	mov	r4, r1
		if (conn) {
   161da:	4605      	mov	r5, r0
   161dc:	b968      	cbnz	r0, 161fa <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   161de:	4610      	mov	r0, r2
   161e0:	490d      	ldr	r1, [pc, #52]	; (16218 <find_ccc_cfg+0x44>)
   161e2:	f011 f91f 	bl	27424 <bt_addr_le_eq>
   161e6:	b930      	cbnz	r0, 161f6 <find_ccc_cfg+0x22>
   161e8:	490b      	ldr	r1, [pc, #44]	; (16218 <find_ccc_cfg+0x44>)
   161ea:	f104 000b 	add.w	r0, r4, #11
   161ee:	f011 f919 	bl	27424 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   161f2:	b170      	cbz	r0, 16212 <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   161f4:	340a      	adds	r4, #10
   161f6:	4620      	mov	r0, r4
   161f8:	e00c      	b.n	16214 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   161fa:	7809      	ldrb	r1, [r1, #0]
   161fc:	f010 fb73 	bl	268e6 <bt_conn_is_peer_addr_le>
   16200:	2800      	cmp	r0, #0
   16202:	d1f8      	bne.n	161f6 <find_ccc_cfg+0x22>
   16204:	4628      	mov	r0, r5
   16206:	7aa1      	ldrb	r1, [r4, #10]
   16208:	f104 020b 	add.w	r2, r4, #11
   1620c:	f010 fb6b 	bl	268e6 <bt_conn_is_peer_addr_le>
   16210:	e7ef      	b.n	161f2 <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   16212:	2000      	movs	r0, #0
}
   16214:	bd38      	pop	{r3, r4, r5, pc}
   16216:	bf00      	nop
   16218:	0002d8ec 	.word	0x0002d8ec

0001621c <read_ppcp>:
{
   1621c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1621e:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16220:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   16224:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16226:	4a06      	ldr	r2, [pc, #24]	; (16240 <read_ppcp+0x24>)
   16228:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1622c:	2308      	movs	r3, #8
   1622e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   16232:	9300      	str	r3, [sp, #0]
   16234:	446b      	add	r3, sp
   16236:	f011 f909 	bl	2744c <bt_gatt_attr_read.constprop.0>
}
   1623a:	b005      	add	sp, #20
   1623c:	f85d fb04 	ldr.w	pc, [sp], #4
   16240:	00280018 	.word	0x00280018

00016244 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   16244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16248:	b085      	sub	sp, #20
   1624a:	461e      	mov	r6, r3
   1624c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   16250:	4681      	mov	r9, r0
   16252:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   16254:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   16258:	2b00      	cmp	r3, #0
   1625a:	d14a      	bne.n	162f2 <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1625c:	1e73      	subs	r3, r6, #1
   1625e:	2b01      	cmp	r3, #1
   16260:	d84a      	bhi.n	162f8 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   16262:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   16264:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   16266:	7815      	ldrb	r5, [r2, #0]
   16268:	bf18      	it	ne
   1626a:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1626c:	f7ff ffb2 	bl	161d4 <find_ccc_cfg>
	if (!cfg) {
   16270:	4604      	mov	r4, r0
   16272:	b9e8      	cbnz	r0, 162b0 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   16274:	b91d      	cbnz	r5, 1627e <bt_gatt_attr_write_ccc+0x3a>
			return len;
   16276:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   16278:	b005      	add	sp, #20
   1627a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1627e:	4641      	mov	r1, r8
   16280:	f7ff ffa8 	bl	161d4 <find_ccc_cfg>
		if (!cfg) {
   16284:	4604      	mov	r4, r0
   16286:	b958      	cbnz	r0, 162a0 <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   16288:	4b1d      	ldr	r3, [pc, #116]	; (16300 <bt_gatt_attr_write_ccc+0xbc>)
   1628a:	9000      	str	r0, [sp, #0]
   1628c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16290:	2202      	movs	r2, #2
   16292:	4603      	mov	r3, r0
   16294:	491b      	ldr	r1, [pc, #108]	; (16304 <bt_gatt_attr_write_ccc+0xc0>)
   16296:	f011 f961 	bl	2755c <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1629a:	f06f 0010 	mvn.w	r0, #16
   1629e:	e7eb      	b.n	16278 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   162a0:	f109 0190 	add.w	r1, r9, #144	; 0x90
   162a4:	3001      	adds	r0, #1
   162a6:	f011 f8c5 	bl	27434 <bt_addr_le_copy>
		cfg->id = conn->id;
   162aa:	f899 3008 	ldrb.w	r3, [r9, #8]
   162ae:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   162b0:	f8d8 301c 	ldr.w	r3, [r8, #28]
   162b4:	b98b      	cbnz	r3, 162da <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   162b6:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   162b8:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   162bc:	42ab      	cmp	r3, r5
   162be:	d003      	beq.n	162c8 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   162c0:	4641      	mov	r1, r8
   162c2:	4638      	mov	r0, r7
   162c4:	f011 f836 	bl	27334 <gatt_ccc_changed>
	if (!value) {
   162c8:	2d00      	cmp	r5, #0
   162ca:	d1d4      	bne.n	16276 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   162cc:	490e      	ldr	r1, [pc, #56]	; (16308 <bt_gatt_attr_write_ccc+0xc4>)
   162ce:	1c60      	adds	r0, r4, #1
   162d0:	f011 f8b0 	bl	27434 <bt_addr_le_copy>
	cfg->id = 0U;
   162d4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   162d6:	8125      	strh	r5, [r4, #8]
}
   162d8:	e7cd      	b.n	16276 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   162da:	462a      	mov	r2, r5
   162dc:	4639      	mov	r1, r7
   162de:	4648      	mov	r0, r9
   162e0:	4798      	blx	r3
		if (write < 0) {
   162e2:	2800      	cmp	r0, #0
   162e4:	dbc8      	blt.n	16278 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   162e6:	3801      	subs	r0, #1
   162e8:	2801      	cmp	r0, #1
   162ea:	d9e4      	bls.n	162b6 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   162ec:	f06f 000d 	mvn.w	r0, #13
   162f0:	e7c2      	b.n	16278 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   162f2:	f06f 0006 	mvn.w	r0, #6
   162f6:	e7bf      	b.n	16278 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   162f8:	f06f 000c 	mvn.w	r0, #12
   162fc:	e7bc      	b.n	16278 <bt_gatt_attr_write_ccc+0x34>
   162fe:	bf00      	nop
   16300:	0002ed6b 	.word	0x0002ed6b
   16304:	0002a988 	.word	0x0002a988
   16308:	0002d8ec 	.word	0x0002d8ec

0001630c <clear_cf_cfg>:
{
   1630c:	4602      	mov	r2, r0
   1630e:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16310:	4907      	ldr	r1, [pc, #28]	; (16330 <clear_cf_cfg+0x24>)
   16312:	3001      	adds	r0, #1
   16314:	f011 f88e 	bl	27434 <bt_addr_le_copy>
   16318:	2300      	movs	r3, #0
   1631a:	320c      	adds	r2, #12
   1631c:	f802 3c04 	strb.w	r3, [r2, #-4]
   16320:	e8d2 1fef 	ldaex	r1, [r2]
   16324:	e8c2 3fe0 	stlex	r0, r3, [r2]
   16328:	2800      	cmp	r0, #0
   1632a:	d1f9      	bne.n	16320 <clear_cf_cfg+0x14>
}
   1632c:	bd08      	pop	{r3, pc}
   1632e:	bf00      	nop
   16330:	0002d8ec 	.word	0x0002d8ec

00016334 <sc_save>:
{
   16334:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16338:	4680      	mov	r8, r0
   1633a:	460f      	mov	r7, r1
   1633c:	4616      	mov	r6, r2
   1633e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   16340:	f7ff ff26 	bl	16190 <find_sc_cfg>
	if (!cfg) {
   16344:	4604      	mov	r4, r0
   16346:	b9a8      	cbnz	r0, 16374 <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   16348:	4911      	ldr	r1, [pc, #68]	; (16390 <sc_save+0x5c>)
   1634a:	f7ff ff21 	bl	16190 <find_sc_cfg>
		if (!cfg) {
   1634e:	4604      	mov	r4, r0
   16350:	b958      	cbnz	r0, 1636a <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   16352:	4b10      	ldr	r3, [pc, #64]	; (16394 <sc_save+0x60>)
   16354:	2201      	movs	r2, #1
   16356:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1635a:	490f      	ldr	r1, [pc, #60]	; (16398 <sc_save+0x64>)
   1635c:	4603      	mov	r3, r0
   1635e:	9000      	str	r0, [sp, #0]
   16360:	f011 f8fc 	bl	2755c <z_log_msg_runtime_create.constprop.0>
}
   16364:	b004      	add	sp, #16
   16366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1636a:	4639      	mov	r1, r7
		cfg->id = id;
   1636c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   16370:	f011 f860 	bl	27434 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   16374:	8922      	ldrh	r2, [r4, #8]
   16376:	8963      	ldrh	r3, [r4, #10]
   16378:	b91a      	cbnz	r2, 16382 <sc_save+0x4e>
   1637a:	b92b      	cbnz	r3, 16388 <sc_save+0x54>
		cfg->data.start = start;
   1637c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1637e:	8165      	strh	r5, [r4, #10]
   16380:	e7f0      	b.n	16364 <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   16382:	42b2      	cmp	r2, r6
		*start = new_start;
   16384:	bf88      	it	hi
   16386:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   16388:	42ab      	cmp	r3, r5
   1638a:	d2eb      	bcs.n	16364 <sc_save+0x30>
   1638c:	e7f7      	b.n	1637e <sc_save+0x4a>
   1638e:	bf00      	nop
   16390:	0002d8ec 	.word	0x0002d8ec
   16394:	0002ed85 	.word	0x0002ed85
   16398:	0002a988 	.word	0x0002a988

0001639c <cf_write>:
{
   1639c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   163a0:	461f      	mov	r7, r3
   163a2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   163a6:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   163a8:	2b01      	cmp	r3, #1
{
   163aa:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   163ac:	d83b      	bhi.n	16426 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   163ae:	443b      	add	r3, r7
   163b0:	2b01      	cmp	r3, #1
   163b2:	463d      	mov	r5, r7
   163b4:	dc3a      	bgt.n	1642c <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   163b6:	f7ff febd 	bl	16134 <find_cf_cfg>
	if (!cfg) {
   163ba:	4604      	mov	r4, r0
   163bc:	b990      	cbnz	r0, 163e4 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   163be:	f7ff feb9 	bl	16134 <find_cf_cfg>
	if (!cfg) {
   163c2:	4604      	mov	r4, r0
   163c4:	b970      	cbnz	r0, 163e4 <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   163c6:	4b1c      	ldr	r3, [pc, #112]	; (16438 <cf_write+0x9c>)
   163c8:	2202      	movs	r2, #2
   163ca:	e9cd 0301 	strd	r0, r3, [sp, #4]
   163ce:	491b      	ldr	r1, [pc, #108]	; (1643c <cf_write+0xa0>)
   163d0:	4603      	mov	r3, r0
   163d2:	9000      	str	r0, [sp, #0]
   163d4:	f011 f8c2 	bl	2755c <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   163d8:	f06f 0510 	mvn.w	r5, #16
}
   163dc:	4628      	mov	r0, r5
   163de:	b004      	add	sp, #16
   163e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   163e4:	b197      	cbz	r7, 1640c <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   163e6:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   163e8:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   163ea:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   163ee:	fa21 f003 	lsr.w	r0, r1, r3
   163f2:	07c7      	lsls	r7, r0, #31
   163f4:	d503      	bpl.n	163fe <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   163f6:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   163fa:	07c0      	lsls	r0, r0, #31
   163fc:	d519      	bpl.n	16432 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   163fe:	3301      	adds	r3, #1
   16400:	2b03      	cmp	r3, #3
   16402:	d1f4      	bne.n	163ee <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   16404:	f002 0207 	and.w	r2, r2, #7
   16408:	4311      	orrs	r1, r2
   1640a:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1640c:	f106 0190 	add.w	r1, r6, #144	; 0x90
   16410:	1c60      	adds	r0, r4, #1
   16412:	f011 f80f 	bl	27434 <bt_addr_le_copy>
	cfg->id = conn->id;
   16416:	4620      	mov	r0, r4
   16418:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1641a:	2100      	movs	r1, #0
	cfg->id = conn->id;
   1641c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16420:	f011 f8cc 	bl	275bc <atomic_set_bit>
	return len;
   16424:	e7da      	b.n	163dc <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16426:	f06f 0506 	mvn.w	r5, #6
   1642a:	e7d7      	b.n	163dc <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1642c:	f06f 050c 	mvn.w	r5, #12
   16430:	e7d4      	b.n	163dc <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   16432:	f06f 0512 	mvn.w	r5, #18
   16436:	e7d1      	b.n	163dc <cf_write+0x40>
   16438:	0002eda4 	.word	0x0002eda4
   1643c:	0002a988 	.word	0x0002a988

00016440 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   16440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16444:	4b28      	ldr	r3, [pc, #160]	; (164e8 <disconnected_cb+0xa8>)
{
   16446:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16448:	6882      	ldr	r2, [r0, #8]
{
   1644a:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1644c:	429a      	cmp	r2, r3
   1644e:	d12b      	bne.n	164a8 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16450:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   16452:	8aab      	ldrh	r3, [r5, #20]
   16454:	b343      	cbz	r3, 164a8 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   16456:	f04f 0800 	mov.w	r8, #0
   1645a:	1c6c      	adds	r4, r5, #1
   1645c:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   16460:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   16464:	b19b      	cbz	r3, 1648e <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16466:	4622      	mov	r2, r4
   16468:	4630      	mov	r0, r6
   1646a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1646e:	f010 fa3a 	bl	268e6 <bt_conn_is_peer_addr_le>
   16472:	b9e0      	cbnz	r0, 164ae <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16474:	4621      	mov	r1, r4
   16476:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1647a:	f7fe f9b5 	bl	147e8 <bt_conn_lookup_addr_le>
			if (tmp) {
   1647e:	b130      	cbz	r0, 1648e <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   16480:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   16482:	2b07      	cmp	r3, #7
   16484:	bf08      	it	eq
   16486:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   1648a:	f7fd fee1 	bl	14250 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1648e:	340a      	adds	r4, #10
   16490:	454c      	cmp	r4, r9
   16492:	d1e5      	bne.n	16460 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   16494:	f1b8 0f00 	cmp.w	r8, #0
   16498:	d106      	bne.n	164a8 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1649a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1649c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   164a0:	b113      	cbz	r3, 164a8 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   164a2:	4641      	mov	r1, r8
   164a4:	4638      	mov	r0, r7
   164a6:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   164a8:	2001      	movs	r0, #1
   164aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   164ae:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   164b2:	4651      	mov	r1, sl
   164b4:	7a30      	ldrb	r0, [r6, #8]
   164b6:	f00f ff3b 	bl	26330 <bt_addr_le_is_bonded>
   164ba:	b978      	cbnz	r0, 164dc <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   164bc:	4b0b      	ldr	r3, [pc, #44]	; (164ec <disconnected_cb+0xac>)
   164be:	429d      	cmp	r5, r3
   164c0:	d102      	bne.n	164c8 <disconnected_cb+0x88>
					sc_clear(conn);
   164c2:	4630      	mov	r0, r6
   164c4:	f011 f859 	bl	2757a <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   164c8:	4620      	mov	r0, r4
   164ca:	4909      	ldr	r1, [pc, #36]	; (164f0 <disconnected_cb+0xb0>)
   164cc:	f010 ffb2 	bl	27434 <bt_addr_le_copy>
	cfg->id = 0U;
   164d0:	2300      	movs	r3, #0
   164d2:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   164d6:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   164da:	e7d8      	b.n	1648e <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   164dc:	4651      	mov	r1, sl
   164de:	4620      	mov	r0, r4
   164e0:	f010 ffa8 	bl	27434 <bt_addr_le_copy>
   164e4:	e7d3      	b.n	1648e <disconnected_cb+0x4e>
   164e6:	bf00      	nop
   164e8:	00016245 	.word	0x00016245
   164ec:	20008508 	.word	0x20008508
   164f0:	0002d8ec 	.word	0x0002d8ec

000164f4 <sc_indicate_rsp>:
{
   164f4:	b510      	push	{r4, lr}
   164f6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   164f8:	4811      	ldr	r0, [pc, #68]	; (16540 <sc_indicate_rsp+0x4c>)
   164fa:	e8d0 3fef 	ldaex	r3, [r0]
   164fe:	f023 0302 	bic.w	r3, r3, #2
   16502:	e8c0 3fe2 	stlex	r2, r3, [r0]
   16506:	2a00      	cmp	r2, #0
   16508:	d1f7      	bne.n	164fa <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1650a:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1650e:	07da      	lsls	r2, r3, #31
   16510:	d504      	bpl.n	1651c <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   16512:	2200      	movs	r2, #0
   16514:	2300      	movs	r3, #0
   16516:	3830      	subs	r0, #48	; 0x30
   16518:	f00a fab2 	bl	20a80 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1651c:	4620      	mov	r0, r4
   1651e:	f010 fedc 	bl	272da <bt_att_fixed_chan_only>
   16522:	b160      	cbz	r0, 1653e <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   16524:	4620      	mov	r0, r4
   16526:	f7ff fe05 	bl	16134 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1652a:	b140      	cbz	r0, 1653e <sc_indicate_rsp+0x4a>
   1652c:	7a03      	ldrb	r3, [r0, #8]
   1652e:	07db      	lsls	r3, r3, #31
   16530:	d505      	bpl.n	1653e <sc_indicate_rsp+0x4a>
}
   16532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16536:	2100      	movs	r1, #0
   16538:	300c      	adds	r0, #12
   1653a:	f011 b83f 	b.w	275bc <atomic_set_bit>
}
   1653e:	bd10      	pop	{r4, pc}
   16540:	20009a18 	.word	0x20009a18

00016544 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16544:	2201      	movs	r2, #1
{
   16546:	b510      	push	{r4, lr}
   16548:	4b24      	ldr	r3, [pc, #144]	; (165dc <bt_gatt_init+0x98>)
   1654a:	e8d3 1fef 	ldaex	r1, [r3]
   1654e:	2900      	cmp	r1, #0
   16550:	d103      	bne.n	1655a <bt_gatt_init+0x16>
   16552:	e8c3 2fe0 	stlex	r0, r2, [r3]
   16556:	2800      	cmp	r0, #0
   16558:	d1f7      	bne.n	1654a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1655a:	d13e      	bne.n	165da <bt_gatt_init+0x96>
   1655c:	4b20      	ldr	r3, [pc, #128]	; (165e0 <bt_gatt_init+0x9c>)
   1655e:	e8d3 1fef 	ldaex	r1, [r3]
   16562:	2900      	cmp	r1, #0
   16564:	d103      	bne.n	1656e <bt_gatt_init+0x2a>
   16566:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1656a:	2800      	cmp	r0, #0
   1656c:	d1f7      	bne.n	1655e <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1656e:	d120      	bne.n	165b2 <bt_gatt_init+0x6e>
   16570:	2000      	movs	r0, #0
   16572:	491c      	ldr	r1, [pc, #112]	; (165e4 <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16574:	4a1c      	ldr	r2, [pc, #112]	; (165e8 <bt_gatt_init+0xa4>)
   16576:	880b      	ldrh	r3, [r1, #0]
   16578:	4c1c      	ldr	r4, [pc, #112]	; (165ec <bt_gatt_init+0xa8>)
   1657a:	42a2      	cmp	r2, r4
   1657c:	d916      	bls.n	165ac <bt_gatt_init+0x68>
   1657e:	b100      	cbz	r0, 16582 <bt_gatt_init+0x3e>
   16580:	800b      	strh	r3, [r1, #0]
   16582:	491b      	ldr	r1, [pc, #108]	; (165f0 <bt_gatt_init+0xac>)
   16584:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   16588:	4a1a      	ldr	r2, [pc, #104]	; (165f4 <bt_gatt_init+0xb0>)
   1658a:	481b      	ldr	r0, [pc, #108]	; (165f8 <bt_gatt_init+0xb4>)
   1658c:	f00e fca3 	bl	24ed6 <assert_print>
   16590:	481a      	ldr	r0, [pc, #104]	; (165fc <bt_gatt_init+0xb8>)
   16592:	f00e fca0 	bl	24ed6 <assert_print>
   16596:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1659a:	4816      	ldr	r0, [pc, #88]	; (165f4 <bt_gatt_init+0xb0>)
   1659c:	f00e fc94 	bl	24ec8 <assert_post_action>
		last_static_handle += svc->attr_count;
   165a0:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   165a2:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   165a4:	4403      	add	r3, r0
   165a6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   165a8:	2001      	movs	r0, #1
   165aa:	e7e6      	b.n	1657a <bt_gatt_init+0x36>
   165ac:	d3f8      	bcc.n	165a0 <bt_gatt_init+0x5c>
   165ae:	b100      	cbz	r0, 165b2 <bt_gatt_init+0x6e>
   165b0:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   165b2:	2200      	movs	r2, #0
   165b4:	4b12      	ldr	r3, [pc, #72]	; (16600 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   165b6:	4913      	ldr	r1, [pc, #76]	; (16604 <bt_gatt_init+0xc0>)
   165b8:	4813      	ldr	r0, [pc, #76]	; (16608 <bt_gatt_init+0xc4>)
	list->tail = NULL;
   165ba:	e9c3 2200 	strd	r2, r2, [r3]
   165be:	f00a f943 	bl	20848 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   165c2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   165c6:	2300      	movs	r3, #0
   165c8:	480f      	ldr	r0, [pc, #60]	; (16608 <bt_gatt_init+0xc4>)
   165ca:	f7fa fea3 	bl	11314 <bt_long_wq_schedule>
}
   165ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   165d2:	490e      	ldr	r1, [pc, #56]	; (1660c <bt_gatt_init+0xc8>)
   165d4:	480e      	ldr	r0, [pc, #56]	; (16610 <bt_gatt_init+0xcc>)
   165d6:	f00a b937 	b.w	20848 <k_work_init_delayable>
}
   165da:	bd10      	pop	{r4, pc}
   165dc:	200211a8 	.word	0x200211a8
   165e0:	200211a4 	.word	0x200211a4
   165e4:	200215a8 	.word	0x200215a8
   165e8:	0002a918 	.word	0x0002a918
   165ec:	0002a930 	.word	0x0002a930
   165f0:	0002ee07 	.word	0x0002ee07
   165f4:	0002edd0 	.word	0x0002edd0
   165f8:	0002b939 	.word	0x0002b939
   165fc:	0002ca40 	.word	0x0002ca40
   16600:	200211ac 	.word	0x200211ac
   16604:	000276a9 	.word	0x000276a9
   16608:	20009970 	.word	0x20009970
   1660c:	00016c8d 	.word	0x00016c8d
   16610:	200099e8 	.word	0x200099e8

00016614 <bt_gatt_attr_get_handle>:
	if (!attr) {
   16614:	4603      	mov	r3, r0
{
   16616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1661a:	b398      	cbz	r0, 16684 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   1661c:	8a00      	ldrh	r0, [r0, #16]
   1661e:	bb88      	cbnz	r0, 16684 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   16620:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16622:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16626:	4919      	ldr	r1, [pc, #100]	; (1668c <bt_gatt_attr_get_handle+0x78>)
   16628:	f8df e064 	ldr.w	lr, [pc, #100]	; 16690 <bt_gatt_attr_get_handle+0x7c>
   1662c:	4571      	cmp	r1, lr
   1662e:	d928      	bls.n	16682 <bt_gatt_attr_get_handle+0x6e>
   16630:	4918      	ldr	r1, [pc, #96]	; (16694 <bt_gatt_attr_get_handle+0x80>)
   16632:	f240 635d 	movw	r3, #1629	; 0x65d
   16636:	4a18      	ldr	r2, [pc, #96]	; (16698 <bt_gatt_attr_get_handle+0x84>)
   16638:	4818      	ldr	r0, [pc, #96]	; (1669c <bt_gatt_attr_get_handle+0x88>)
   1663a:	f00e fc4c 	bl	24ed6 <assert_print>
   1663e:	4818      	ldr	r0, [pc, #96]	; (166a0 <bt_gatt_attr_get_handle+0x8c>)
   16640:	f00e fc49 	bl	24ed6 <assert_print>
   16644:	f240 615d 	movw	r1, #1629	; 0x65d
   16648:	4813      	ldr	r0, [pc, #76]	; (16698 <bt_gatt_attr_get_handle+0x84>)
   1664a:	f00e fc3d 	bl	24ec8 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1664e:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   16652:	42bb      	cmp	r3, r7
   16654:	d304      	bcc.n	16660 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16656:	fb0c 7206 	mla	r2, ip, r6, r7
   1665a:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1665c:	4293      	cmp	r3, r2
   1665e:	d90e      	bls.n	1667e <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   16660:	4434      	add	r4, r6
   16662:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16664:	4614      	mov	r4, r2
   16666:	3108      	adds	r1, #8
   16668:	e7e0      	b.n	1662c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1666a:	fb0c 7805 	mla	r8, ip, r5, r7
   1666e:	4543      	cmp	r3, r8
   16670:	d00a      	beq.n	16688 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16672:	3501      	adds	r5, #1
   16674:	1962      	adds	r2, r4, r5
   16676:	42b5      	cmp	r5, r6
   16678:	b292      	uxth	r2, r2
   1667a:	d1f6      	bne.n	1666a <bt_gatt_attr_get_handle+0x56>
   1667c:	e7f2      	b.n	16664 <bt_gatt_attr_get_handle+0x50>
   1667e:	2500      	movs	r5, #0
   16680:	e7f8      	b.n	16674 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16682:	d3e4      	bcc.n	1664e <bt_gatt_attr_get_handle+0x3a>
}
   16684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16688:	4610      	mov	r0, r2
   1668a:	e7fb      	b.n	16684 <bt_gatt_attr_get_handle+0x70>
   1668c:	0002a918 	.word	0x0002a918
   16690:	0002a930 	.word	0x0002a930
   16694:	0002ee00 	.word	0x0002ee00
   16698:	0002edd0 	.word	0x0002edd0
   1669c:	0002b939 	.word	0x0002b939
   166a0:	0002ca40 	.word	0x0002ca40

000166a4 <bt_gatt_foreach_attr_type>:
{
   166a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166a8:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   166aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   166ae:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   166b2:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   166b4:	2d00      	cmp	r5, #0
   166b6:	bf08      	it	eq
   166b8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   166ba:	4b2b      	ldr	r3, [pc, #172]	; (16768 <bt_gatt_foreach_attr_type+0xc4>)
{
   166bc:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   166be:	881b      	ldrh	r3, [r3, #0]
{
   166c0:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   166c2:	4283      	cmp	r3, r0
   166c4:	d232      	bcs.n	1672c <bt_gatt_foreach_attr_type+0x88>
}
   166c6:	b003      	add	sp, #12
   166c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   166cc:	4640      	mov	r0, r8
   166ce:	5889      	ldr	r1, [r1, r2]
   166d0:	9301      	str	r3, [sp, #4]
   166d2:	f00f fce0 	bl	26096 <bt_uuid_cmp>
   166d6:	9b01      	ldr	r3, [sp, #4]
   166d8:	b190      	cbz	r0, 16700 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   166da:	3401      	adds	r4, #1
   166dc:	f10a 0a01 	add.w	sl, sl, #1
   166e0:	b2a4      	uxth	r4, r4
   166e2:	6873      	ldr	r3, [r6, #4]
   166e4:	4553      	cmp	r3, sl
   166e6:	d92c      	bls.n	16742 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   166e8:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   166ea:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   166ec:	429c      	cmp	r4, r3
   166ee:	d8ea      	bhi.n	166c6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   166f0:	42bc      	cmp	r4, r7
   166f2:	d3f2      	bcc.n	166da <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   166f4:	fb0b f20a 	mul.w	r2, fp, sl
   166f8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   166fa:	f1b8 0f00 	cmp.w	r8, #0
   166fe:	d1e5      	bne.n	166cc <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   16700:	f1b9 0f00 	cmp.w	r9, #0
   16704:	d10b      	bne.n	1671e <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   16706:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   16708:	4618      	mov	r0, r3
	*num_matches -= 1;
   1670a:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1670c:	4621      	mov	r1, r4
   1670e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16712:	4798      	blx	r3
	if (!*num_matches) {
   16714:	2d00      	cmp	r5, #0
   16716:	d0d6      	beq.n	166c6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16718:	2800      	cmp	r0, #0
   1671a:	d1de      	bne.n	166da <bt_gatt_foreach_attr_type+0x36>
   1671c:	e7d3      	b.n	166c6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1671e:	68da      	ldr	r2, [r3, #12]
   16720:	4591      	cmp	r9, r2
   16722:	d1da      	bne.n	166da <bt_gatt_foreach_attr_type+0x36>
   16724:	e7ef      	b.n	16706 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16726:	f04f 0a00 	mov.w	sl, #0
   1672a:	e7da      	b.n	166e2 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   1672c:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1672e:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16732:	4e0e      	ldr	r6, [pc, #56]	; (1676c <bt_gatt_foreach_attr_type+0xc8>)
   16734:	e006      	b.n	16744 <bt_gatt_foreach_attr_type+0xa0>
   16736:	d2c6      	bcs.n	166c6 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   16738:	6873      	ldr	r3, [r6, #4]
   1673a:	4423      	add	r3, r4
   1673c:	42bb      	cmp	r3, r7
   1673e:	d2f2      	bcs.n	16726 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   16740:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16742:	3608      	adds	r6, #8
   16744:	4b0a      	ldr	r3, [pc, #40]	; (16770 <bt_gatt_foreach_attr_type+0xcc>)
   16746:	429e      	cmp	r6, r3
   16748:	d9f5      	bls.n	16736 <bt_gatt_foreach_attr_type+0x92>
   1674a:	490a      	ldr	r1, [pc, #40]	; (16774 <bt_gatt_foreach_attr_type+0xd0>)
   1674c:	f240 7321 	movw	r3, #1825	; 0x721
   16750:	4a09      	ldr	r2, [pc, #36]	; (16778 <bt_gatt_foreach_attr_type+0xd4>)
   16752:	480a      	ldr	r0, [pc, #40]	; (1677c <bt_gatt_foreach_attr_type+0xd8>)
   16754:	f00e fbbf 	bl	24ed6 <assert_print>
   16758:	4809      	ldr	r0, [pc, #36]	; (16780 <bt_gatt_foreach_attr_type+0xdc>)
   1675a:	f00e fbbc 	bl	24ed6 <assert_print>
   1675e:	f240 7121 	movw	r1, #1825	; 0x721
   16762:	4805      	ldr	r0, [pc, #20]	; (16778 <bt_gatt_foreach_attr_type+0xd4>)
   16764:	f00e fbb0 	bl	24ec8 <assert_post_action>
   16768:	200215a8 	.word	0x200215a8
   1676c:	0002a918 	.word	0x0002a918
   16770:	0002a930 	.word	0x0002a930
   16774:	0002ee00 	.word	0x0002ee00
   16778:	0002edd0 	.word	0x0002edd0
   1677c:	0002b939 	.word	0x0002b939
   16780:	0002ca40 	.word	0x0002ca40

00016784 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   16784:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   16786:	b510      	push	{r4, lr}
   16788:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1678a:	aa20      	add	r2, sp, #128	; 0x80
   1678c:	a904      	add	r1, sp, #16
   1678e:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   16790:	e9cd 3304 	strd	r3, r3, [sp, #16]
   16794:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16798:	f00f f8e0 	bl	2595c <tc_cmac_setup>
   1679c:	4603      	mov	r3, r0
   1679e:	b948      	cbnz	r0, 167b4 <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   167a0:	4a17      	ldr	r2, [pc, #92]	; (16800 <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   167a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   167a6:	4917      	ldr	r1, [pc, #92]	; (16804 <db_hash_gen.constprop.0+0x80>)
   167a8:	2201      	movs	r2, #1
   167aa:	9300      	str	r3, [sp, #0]
   167ac:	f010 fed6 	bl	2755c <z_log_msg_runtime_create.constprop.0>
}
   167b0:	b04c      	add	sp, #304	; 0x130
   167b2:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   167b4:	ab08      	add	r3, sp, #32
   167b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   167ba:	2001      	movs	r0, #1
   167bc:	4a12      	ldr	r2, [pc, #72]	; (16808 <db_hash_gen.constprop.0+0x84>)
   167be:	f010 ff68 	bl	27692 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   167c2:	4812      	ldr	r0, [pc, #72]	; (1680c <db_hash_gen.constprop.0+0x88>)
   167c4:	a908      	add	r1, sp, #32
   167c6:	f00f f95e 	bl	25a86 <tc_cmac_final>
   167ca:	4603      	mov	r3, r0
   167cc:	b908      	cbnz	r0, 167d2 <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   167ce:	4a10      	ldr	r2, [pc, #64]	; (16810 <db_hash_gen.constprop.0+0x8c>)
   167d0:	e7e7      	b.n	167a2 <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   167d2:	2208      	movs	r2, #8
   167d4:	4b0d      	ldr	r3, [pc, #52]	; (1680c <db_hash_gen.constprop.0+0x88>)
   167d6:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   167da:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   167dc:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   167e0:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   167e2:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   167e6:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   167e8:	d1f7      	bne.n	167da <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   167ea:	4b0a      	ldr	r3, [pc, #40]	; (16814 <db_hash_gen.constprop.0+0x90>)
   167ec:	e8d3 1fef 	ldaex	r1, [r3]
   167f0:	f041 0104 	orr.w	r1, r1, #4
   167f4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   167f8:	2a00      	cmp	r2, #0
   167fa:	d0d9      	beq.n	167b0 <db_hash_gen.constprop.0+0x2c>
   167fc:	e7f6      	b.n	167ec <db_hash_gen.constprop.0+0x68>
   167fe:	bf00      	nop
   16800:	0002ee2f 	.word	0x0002ee2f
   16804:	0002a988 	.word	0x0002a988
   16808:	0002737f 	.word	0x0002737f
   1680c:	20009960 	.word	0x20009960
   16810:	0002ee48 	.word	0x0002ee48
   16814:	20009a18 	.word	0x20009a18

00016818 <db_hash_read>:
{
   16818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1681c:	4914      	ldr	r1, [pc, #80]	; (16870 <db_hash_read+0x58>)
{
   1681e:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16820:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16824:	4614      	mov	r4, r2
   16826:	461d      	mov	r5, r3
   16828:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1682c:	f00a f988 	bl	20b40 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16830:	4b10      	ldr	r3, [pc, #64]	; (16874 <db_hash_read+0x5c>)
   16832:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16836:	0759      	lsls	r1, r3, #29
   16838:	d401      	bmi.n	1683e <db_hash_read+0x26>
		db_hash_gen(true);
   1683a:	f7ff ffa3 	bl	16784 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   1683e:	4630      	mov	r0, r6
   16840:	f7ff fc78 	bl	16134 <find_cf_cfg>
	if (cfg &&
   16844:	b150      	cbz	r0, 1685c <db_hash_read+0x44>
   16846:	7a03      	ldrb	r3, [r0, #8]
   16848:	07da      	lsls	r2, r3, #31
   1684a:	d507      	bpl.n	1685c <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1684c:	300c      	adds	r0, #12
   1684e:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   16852:	07db      	lsls	r3, r3, #31
   16854:	d402      	bmi.n	1685c <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   16856:	2101      	movs	r1, #1
   16858:	f010 feb0 	bl	275bc <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1685c:	2310      	movs	r3, #16
   1685e:	463a      	mov	r2, r7
   16860:	9306      	str	r3, [sp, #24]
   16862:	4629      	mov	r1, r5
   16864:	4620      	mov	r0, r4
}
   16866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1686a:	4b03      	ldr	r3, [pc, #12]	; (16878 <db_hash_read+0x60>)
   1686c:	f010 bdee 	b.w	2744c <bt_gatt_attr_read.constprop.0>
   16870:	200099a0 	.word	0x200099a0
   16874:	20009a18 	.word	0x20009a18
   16878:	20009960 	.word	0x20009960

0001687c <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   1687c:	2300      	movs	r3, #0
{
   1687e:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   16880:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   16882:	f7ff fec7 	bl	16614 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   16886:	1c41      	adds	r1, r0, #1
   16888:	b289      	uxth	r1, r1
   1688a:	4608      	mov	r0, r1
   1688c:	4a03      	ldr	r2, [pc, #12]	; (1689c <bt_gatt_attr_next+0x20>)
   1688e:	ab01      	add	r3, sp, #4
   16890:	f010 feff 	bl	27692 <bt_gatt_foreach_attr>
}
   16894:	9801      	ldr	r0, [sp, #4]
   16896:	b003      	add	sp, #12
   16898:	f85d fb04 	ldr.w	pc, [sp], #4
   1689c:	0002732f 	.word	0x0002732f

000168a0 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   168a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   168a4:	460c      	mov	r4, r1
   168a6:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   168a8:	4605      	mov	r5, r0
   168aa:	b970      	cbnz	r0, 168ca <bt_gatt_is_subscribed+0x2a>
   168ac:	4960      	ldr	r1, [pc, #384]	; (16a30 <bt_gatt_is_subscribed+0x190>)
   168ae:	f640 434d 	movw	r3, #3149	; 0xc4d
   168b2:	4a60      	ldr	r2, [pc, #384]	; (16a34 <bt_gatt_is_subscribed+0x194>)
   168b4:	4860      	ldr	r0, [pc, #384]	; (16a38 <bt_gatt_is_subscribed+0x198>)
   168b6:	f00e fb0e 	bl	24ed6 <assert_print>
   168ba:	4860      	ldr	r0, [pc, #384]	; (16a3c <bt_gatt_is_subscribed+0x19c>)
   168bc:	f00e fb0b 	bl	24ed6 <assert_print>
   168c0:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   168c4:	485b      	ldr	r0, [pc, #364]	; (16a34 <bt_gatt_is_subscribed+0x194>)
   168c6:	f00e faff 	bl	24ec8 <assert_post_action>
   168ca:	b961      	cbnz	r1, 168e6 <bt_gatt_is_subscribed+0x46>
   168cc:	495c      	ldr	r1, [pc, #368]	; (16a40 <bt_gatt_is_subscribed+0x1a0>)
   168ce:	f640 434e 	movw	r3, #3150	; 0xc4e
   168d2:	4a58      	ldr	r2, [pc, #352]	; (16a34 <bt_gatt_is_subscribed+0x194>)
   168d4:	4858      	ldr	r0, [pc, #352]	; (16a38 <bt_gatt_is_subscribed+0x198>)
   168d6:	f00e fafe 	bl	24ed6 <assert_print>
   168da:	4858      	ldr	r0, [pc, #352]	; (16a3c <bt_gatt_is_subscribed+0x19c>)
   168dc:	f00e fafb 	bl	24ed6 <assert_print>
   168e0:	f640 414e 	movw	r1, #3150	; 0xc4e
   168e4:	e7ee      	b.n	168c4 <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   168e6:	7b43      	ldrb	r3, [r0, #13]
   168e8:	2b07      	cmp	r3, #7
   168ea:	d110      	bne.n	1690e <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   168ec:	2300      	movs	r3, #0
   168ee:	f88d 300c 	strb.w	r3, [sp, #12]
   168f2:	f642 0303 	movw	r3, #10243	; 0x2803
   168f6:	6820      	ldr	r0, [r4, #0]
   168f8:	a903      	add	r1, sp, #12
   168fa:	f8ad 300e 	strh.w	r3, [sp, #14]
   168fe:	f00f fbca 	bl	26096 <bt_uuid_cmp>
   16902:	b9d0      	cbnz	r0, 1693a <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   16904:	68e3      	ldr	r3, [r4, #12]
   16906:	799b      	ldrb	r3, [r3, #6]
   16908:	f013 0f30 	tst.w	r3, #48	; 0x30
   1690c:	d103      	bne.n	16916 <bt_gatt_is_subscribed+0x76>
		return false;
   1690e:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   16910:	b004      	add	sp, #16
   16912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   16916:	4620      	mov	r0, r4
   16918:	f7ff ffb0 	bl	1687c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1691c:	4604      	mov	r4, r0
   1691e:	b960      	cbnz	r0, 1693a <bt_gatt_is_subscribed+0x9a>
   16920:	4947      	ldr	r1, [pc, #284]	; (16a40 <bt_gatt_is_subscribed+0x1a0>)
   16922:	f640 435f 	movw	r3, #3167	; 0xc5f
   16926:	4a43      	ldr	r2, [pc, #268]	; (16a34 <bt_gatt_is_subscribed+0x194>)
   16928:	4843      	ldr	r0, [pc, #268]	; (16a38 <bt_gatt_is_subscribed+0x198>)
   1692a:	f00e fad4 	bl	24ed6 <assert_print>
   1692e:	4845      	ldr	r0, [pc, #276]	; (16a44 <bt_gatt_is_subscribed+0x1a4>)
   16930:	f00e fad1 	bl	24ed6 <assert_print>
   16934:	f640 415f 	movw	r1, #3167	; 0xc5f
   16938:	e7c4      	b.n	168c4 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1693a:	2300      	movs	r3, #0
   1693c:	6820      	ldr	r0, [r4, #0]
   1693e:	f88d 300c 	strb.w	r3, [sp, #12]
   16942:	f642 1302 	movw	r3, #10498	; 0x2902
   16946:	a903      	add	r1, sp, #12
   16948:	f8ad 300e 	strh.w	r3, [sp, #14]
   1694c:	f00f fba3 	bl	26096 <bt_uuid_cmp>
   16950:	b188      	cbz	r0, 16976 <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   16952:	4620      	mov	r0, r4
   16954:	f7ff ff92 	bl	1687c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   16958:	4604      	mov	r4, r0
   1695a:	b960      	cbnz	r0, 16976 <bt_gatt_is_subscribed+0xd6>
   1695c:	4938      	ldr	r1, [pc, #224]	; (16a40 <bt_gatt_is_subscribed+0x1a0>)
   1695e:	f640 4365 	movw	r3, #3173	; 0xc65
   16962:	4a34      	ldr	r2, [pc, #208]	; (16a34 <bt_gatt_is_subscribed+0x194>)
   16964:	4834      	ldr	r0, [pc, #208]	; (16a38 <bt_gatt_is_subscribed+0x198>)
   16966:	f00e fab6 	bl	24ed6 <assert_print>
   1696a:	4836      	ldr	r0, [pc, #216]	; (16a44 <bt_gatt_is_subscribed+0x1a4>)
   1696c:	f00e fab3 	bl	24ed6 <assert_print>
   16970:	f640 4165 	movw	r1, #3173	; 0xc65
   16974:	e7a6      	b.n	168c4 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   16976:	2700      	movs	r7, #0
   16978:	f642 1802 	movw	r8, #10498	; 0x2902
   1697c:	6820      	ldr	r0, [r4, #0]
   1697e:	4669      	mov	r1, sp
   16980:	f88d 7000 	strb.w	r7, [sp]
   16984:	f8ad 8002 	strh.w	r8, [sp, #2]
   16988:	f00f fb85 	bl	26096 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1698c:	bb20      	cbnz	r0, 169d8 <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1698e:	2300      	movs	r3, #0
   16990:	6820      	ldr	r0, [r4, #0]
   16992:	f88d 300c 	strb.w	r3, [sp, #12]
   16996:	f642 1302 	movw	r3, #10498	; 0x2902
   1699a:	a903      	add	r1, sp, #12
   1699c:	f8ad 300e 	strh.w	r3, [sp, #14]
   169a0:	f00f fb79 	bl	26096 <bt_uuid_cmp>
   169a4:	2800      	cmp	r0, #0
   169a6:	d1b2      	bne.n	1690e <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   169a8:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   169aa:	4628      	mov	r0, r5
   169ac:	4622      	mov	r2, r4
   169ae:	f812 1b01 	ldrb.w	r1, [r2], #1
   169b2:	f00f ff98 	bl	268e6 <bt_conn_is_peer_addr_le>
   169b6:	b110      	cbz	r0, 169be <bt_gatt_is_subscribed+0x11e>
   169b8:	8923      	ldrh	r3, [r4, #8]
   169ba:	421e      	tst	r6, r3
   169bc:	d10a      	bne.n	169d4 <bt_gatt_is_subscribed+0x134>
   169be:	4628      	mov	r0, r5
   169c0:	7aa1      	ldrb	r1, [r4, #10]
   169c2:	f104 020b 	add.w	r2, r4, #11
   169c6:	f00f ff8e 	bl	268e6 <bt_conn_is_peer_addr_le>
   169ca:	2800      	cmp	r0, #0
   169cc:	d09f      	beq.n	1690e <bt_gatt_is_subscribed+0x6e>
   169ce:	8a63      	ldrh	r3, [r4, #18]
   169d0:	421e      	tst	r6, r3
   169d2:	d09c      	beq.n	1690e <bt_gatt_is_subscribed+0x6e>
			return true;
   169d4:	2001      	movs	r0, #1
   169d6:	e79b      	b.n	16910 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   169d8:	f642 0303 	movw	r3, #10243	; 0x2803
   169dc:	6820      	ldr	r0, [r4, #0]
   169de:	a901      	add	r1, sp, #4
   169e0:	f88d 7004 	strb.w	r7, [sp, #4]
   169e4:	f8ad 3006 	strh.w	r3, [sp, #6]
   169e8:	f00f fb55 	bl	26096 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   169ec:	2800      	cmp	r0, #0
   169ee:	d0ce      	beq.n	1698e <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   169f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   169f4:	6820      	ldr	r0, [r4, #0]
   169f6:	a902      	add	r1, sp, #8
   169f8:	f88d 7008 	strb.w	r7, [sp, #8]
   169fc:	f8ad 300a 	strh.w	r3, [sp, #10]
   16a00:	f00f fb49 	bl	26096 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   16a04:	2800      	cmp	r0, #0
   16a06:	d0c2      	beq.n	1698e <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16a08:	f642 0301 	movw	r3, #10241	; 0x2801
   16a0c:	6820      	ldr	r0, [r4, #0]
   16a0e:	a903      	add	r1, sp, #12
   16a10:	f88d 700c 	strb.w	r7, [sp, #12]
   16a14:	f8ad 300e 	strh.w	r3, [sp, #14]
   16a18:	f00f fb3d 	bl	26096 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16a1c:	2800      	cmp	r0, #0
   16a1e:	d0b6      	beq.n	1698e <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   16a20:	4620      	mov	r0, r4
   16a22:	f7ff ff2b 	bl	1687c <bt_gatt_attr_next>
		if (!attr) {
   16a26:	4604      	mov	r4, r0
   16a28:	2800      	cmp	r0, #0
   16a2a:	d1a7      	bne.n	1697c <bt_gatt_is_subscribed+0xdc>
   16a2c:	e76f      	b.n	1690e <bt_gatt_is_subscribed+0x6e>
   16a2e:	bf00      	nop
   16a30:	0002ddc8 	.word	0x0002ddc8
   16a34:	0002edd0 	.word	0x0002edd0
   16a38:	0002b939 	.word	0x0002b939
   16a3c:	0002ee61 	.word	0x0002ee61
   16a40:	0002ee76 	.word	0x0002ee76
   16a44:	0002ee7b 	.word	0x0002ee7b

00016a48 <gatt_indicate>:
{
   16a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   16a4c:	4615      	mov	r5, r2
   16a4e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16a50:	2294      	movs	r2, #148	; 0x94
   16a52:	6869      	ldr	r1, [r5, #4]
{
   16a54:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16a56:	f010 fe29 	bl	276ac <bt_gatt_check_perm>
   16a5a:	4680      	mov	r8, r0
   16a5c:	b178      	cbz	r0, 16a7e <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   16a5e:	4b35      	ldr	r3, [pc, #212]	; (16b34 <gatt_indicate+0xec>)
   16a60:	2202      	movs	r2, #2
   16a62:	9302      	str	r3, [sp, #8]
   16a64:	2300      	movs	r3, #0
   16a66:	4934      	ldr	r1, [pc, #208]	; (16b38 <gatt_indicate+0xf0>)
   16a68:	4618      	mov	r0, r3
   16a6a:	e9cd 3300 	strd	r3, r3, [sp]
   16a6e:	f010 fd75 	bl	2755c <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   16a72:	f04f 35ff 	mov.w	r5, #4294967295
}
   16a76:	4628      	mov	r0, r5
   16a78:	b004      	add	sp, #16
   16a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   16a7e:	2202      	movs	r2, #2
   16a80:	4638      	mov	r0, r7
   16a82:	6869      	ldr	r1, [r5, #4]
   16a84:	f7ff ff0c 	bl	168a0 <bt_gatt_is_subscribed>
   16a88:	4603      	mov	r3, r0
   16a8a:	b950      	cbnz	r0, 16aa2 <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   16a8c:	4a2b      	ldr	r2, [pc, #172]	; (16b3c <gatt_indicate+0xf4>)
   16a8e:	492a      	ldr	r1, [pc, #168]	; (16b38 <gatt_indicate+0xf0>)
   16a90:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16a94:	9000      	str	r0, [sp, #0]
   16a96:	2202      	movs	r2, #2
   16a98:	f010 fd60 	bl	2755c <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   16a9c:	f06f 0515 	mvn.w	r5, #21
   16aa0:	e7e9      	b.n	16a76 <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16aa2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16aa6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16aa8:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16aaa:	f7ff f9b1 	bl	15e10 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16aae:	3602      	adds	r6, #2
	if (!req) {
   16ab0:	4604      	mov	r4, r0
   16ab2:	b1c8      	cbz	r0, 16ae8 <gatt_indicate+0xa0>
	req->att_op = op;
   16ab4:	211d      	movs	r1, #29
	req->func = func;
   16ab6:	4b22      	ldr	r3, [pc, #136]	; (16b40 <gatt_indicate+0xf8>)
	req->len = len;
   16ab8:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16aba:	4632      	mov	r2, r6
	req->att_op = op;
   16abc:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   16abe:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   16ac2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16ac4:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16ac6:	4638      	mov	r0, r7
   16ac8:	f7fe fed6 	bl	15878 <bt_att_create_pdu>
	if (!buf) {
   16acc:	4606      	mov	r6, r0
   16ace:	b970      	cbnz	r0, 16aee <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   16ad0:	4b1c      	ldr	r3, [pc, #112]	; (16b44 <gatt_indicate+0xfc>)
   16ad2:	9000      	str	r0, [sp, #0]
   16ad4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16ad8:	2202      	movs	r2, #2
   16ada:	4603      	mov	r3, r0
   16adc:	4916      	ldr	r1, [pc, #88]	; (16b38 <gatt_indicate+0xf0>)
   16ade:	f010 fd3d 	bl	2755c <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   16ae2:	4620      	mov	r0, r4
   16ae4:	f7ff f9b8 	bl	15e58 <bt_att_req_free>
		return -ENOMEM;
   16ae8:	f06f 050b 	mvn.w	r5, #11
   16aec:	e7c3      	b.n	16a76 <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   16aee:	2301      	movs	r3, #1
   16af0:	4642      	mov	r2, r8
   16af2:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   16af4:	f106 0a0c 	add.w	sl, r6, #12
   16af8:	f010 fc12 	bl	27320 <bt_att_set_tx_meta_data>
   16afc:	2102      	movs	r1, #2
   16afe:	4650      	mov	r0, sl
   16b00:	f002 fde2 	bl	196c8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16b04:	4680      	mov	r8, r0
   16b06:	f828 9b02 	strh.w	r9, [r8], #2
   16b0a:	8aa9      	ldrh	r1, [r5, #20]
   16b0c:	4650      	mov	r0, sl
   16b0e:	f002 fddb 	bl	196c8 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16b12:	8aaa      	ldrh	r2, [r5, #20]
   16b14:	6929      	ldr	r1, [r5, #16]
   16b16:	4640      	mov	r0, r8
   16b18:	f012 ff43 	bl	299a2 <memcpy>
	err = bt_att_req_send(conn, req);
   16b1c:	4621      	mov	r1, r4
   16b1e:	4638      	mov	r0, r7
	req->buf = buf;
   16b20:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16b22:	f7ff fad1 	bl	160c8 <bt_att_req_send>
	if (err) {
   16b26:	4605      	mov	r5, r0
   16b28:	2800      	cmp	r0, #0
   16b2a:	d0a4      	beq.n	16a76 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   16b2c:	4620      	mov	r0, r4
   16b2e:	f7ff f993 	bl	15e58 <bt_att_req_free>
   16b32:	e7a0      	b.n	16a76 <gatt_indicate+0x2e>
   16b34:	0002ee91 	.word	0x0002ee91
   16b38:	0002a988 	.word	0x0002a988
   16b3c:	0002eea7 	.word	0x0002eea7
   16b40:	00027351 	.word	0x00027351
   16b44:	0002eed2 	.word	0x0002eed2

00016b48 <bt_gatt_indicate>:
{
   16b48:	b530      	push	{r4, r5, lr}
   16b4a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   16b4c:	460c      	mov	r4, r1
{
   16b4e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   16b50:	b971      	cbnz	r1, 16b70 <bt_gatt_indicate+0x28>
   16b52:	4946      	ldr	r1, [pc, #280]	; (16c6c <bt_gatt_indicate+0x124>)
   16b54:	f640 330d 	movw	r3, #2829	; 0xb0d
   16b58:	4a45      	ldr	r2, [pc, #276]	; (16c70 <bt_gatt_indicate+0x128>)
   16b5a:	4846      	ldr	r0, [pc, #280]	; (16c74 <bt_gatt_indicate+0x12c>)
   16b5c:	f00e f9bb 	bl	24ed6 <assert_print>
   16b60:	4845      	ldr	r0, [pc, #276]	; (16c78 <bt_gatt_indicate+0x130>)
   16b62:	f00e f9b8 	bl	24ed6 <assert_print>
   16b66:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   16b6a:	4841      	ldr	r0, [pc, #260]	; (16c70 <bt_gatt_indicate+0x128>)
   16b6c:	f00e f9ac 	bl	24ec8 <assert_post_action>
   16b70:	684b      	ldr	r3, [r1, #4]
   16b72:	b973      	cbnz	r3, 16b92 <bt_gatt_indicate+0x4a>
   16b74:	680b      	ldr	r3, [r1, #0]
   16b76:	b963      	cbnz	r3, 16b92 <bt_gatt_indicate+0x4a>
   16b78:	4940      	ldr	r1, [pc, #256]	; (16c7c <bt_gatt_indicate+0x134>)
   16b7a:	f640 330e 	movw	r3, #2830	; 0xb0e
   16b7e:	4a3c      	ldr	r2, [pc, #240]	; (16c70 <bt_gatt_indicate+0x128>)
   16b80:	483c      	ldr	r0, [pc, #240]	; (16c74 <bt_gatt_indicate+0x12c>)
   16b82:	f00e f9a8 	bl	24ed6 <assert_print>
   16b86:	483c      	ldr	r0, [pc, #240]	; (16c78 <bt_gatt_indicate+0x130>)
   16b88:	f00e f9a5 	bl	24ed6 <assert_print>
   16b8c:	f640 310e 	movw	r1, #2830	; 0xb0e
   16b90:	e7eb      	b.n	16b6a <bt_gatt_indicate+0x22>
   16b92:	4b3b      	ldr	r3, [pc, #236]	; (16c80 <bt_gatt_indicate+0x138>)
   16b94:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16b98:	075a      	lsls	r2, r3, #29
   16b9a:	d561      	bpl.n	16c60 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16b9c:	b115      	cbz	r5, 16ba4 <bt_gatt_indicate+0x5c>
   16b9e:	7b6b      	ldrb	r3, [r5, #13]
   16ba0:	2b07      	cmp	r3, #7
   16ba2:	d160      	bne.n	16c66 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   16ba4:	6860      	ldr	r0, [r4, #4]
   16ba6:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16ba8:	f7ff fd34 	bl	16614 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16bac:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16bae:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16bb2:	b33a      	cbz	r2, 16c04 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16bb4:	a905      	add	r1, sp, #20
   16bb6:	9102      	str	r1, [sp, #8]
   16bb8:	4932      	ldr	r1, [pc, #200]	; (16c84 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   16bba:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16bbc:	9101      	str	r1, [sp, #4]
   16bbe:	2101      	movs	r1, #1
   16bc0:	9100      	str	r1, [sp, #0]
   16bc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16bc6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16bc8:	f7ff fd6c 	bl	166a4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16bcc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16bce:	b91b      	cbnz	r3, 16bd8 <bt_gatt_indicate+0x90>
			return -ENOENT;
   16bd0:	f06f 0001 	mvn.w	r0, #1
}
   16bd4:	b00b      	add	sp, #44	; 0x2c
   16bd6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16bd8:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16bda:	9b05      	ldr	r3, [sp, #20]
   16bdc:	a904      	add	r1, sp, #16
   16bde:	6818      	ldr	r0, [r3, #0]
   16be0:	2300      	movs	r3, #0
   16be2:	f88d 3010 	strb.w	r3, [sp, #16]
   16be6:	f642 0303 	movw	r3, #10243	; 0x2803
   16bea:	f8ad 3012 	strh.w	r3, [sp, #18]
   16bee:	f00f fa52 	bl	26096 <bt_uuid_cmp>
   16bf2:	b970      	cbnz	r0, 16c12 <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16bf4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16bf6:	68c3      	ldr	r3, [r0, #12]
   16bf8:	799b      	ldrb	r3, [r3, #6]
   16bfa:	069b      	lsls	r3, r3, #26
   16bfc:	d405      	bmi.n	16c0a <bt_gatt_indicate+0xc2>
			return -EINVAL;
   16bfe:	f06f 0015 	mvn.w	r0, #21
   16c02:	e7e7      	b.n	16bd4 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   16c04:	2800      	cmp	r0, #0
   16c06:	d1e8      	bne.n	16bda <bt_gatt_indicate+0x92>
   16c08:	e7e2      	b.n	16bd0 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16c0a:	f010 fcfb 	bl	27604 <bt_gatt_attr_value_handle>
   16c0e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   16c12:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16c16:	b13d      	cbz	r5, 16c28 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   16c18:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16c1a:	4601      	mov	r1, r0
   16c1c:	4622      	mov	r2, r4
   16c1e:	4628      	mov	r0, r5
		params->_ref = 1;
   16c20:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   16c22:	f7ff ff11 	bl	16a48 <gatt_indicate>
   16c26:	e7d5      	b.n	16bd4 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   16c28:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16c2c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16c2e:	2302      	movs	r3, #2
   16c30:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16c34:	f642 1302 	movw	r3, #10498	; 0x2902
   16c38:	f8ad 3012 	strh.w	r3, [sp, #18]
   16c3c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   16c3e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16c40:	9302      	str	r3, [sp, #8]
   16c42:	4b11      	ldr	r3, [pc, #68]	; (16c88 <bt_gatt_indicate+0x140>)
   16c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16c48:	9301      	str	r3, [sp, #4]
   16c4a:	2301      	movs	r3, #1
   16c4c:	aa04      	add	r2, sp, #16
   16c4e:	9300      	str	r3, [sp, #0]
   16c50:	462b      	mov	r3, r5
	data.ind_params = params;
   16c52:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16c54:	f88d 5010 	strb.w	r5, [sp, #16]
   16c58:	f7ff fd24 	bl	166a4 <bt_gatt_foreach_attr_type>
	return data.err;
   16c5c:	9807      	ldr	r0, [sp, #28]
   16c5e:	e7b9      	b.n	16bd4 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   16c60:	f06f 000a 	mvn.w	r0, #10
   16c64:	e7b6      	b.n	16bd4 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   16c66:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16c6a:	e7b3      	b.n	16bd4 <bt_gatt_indicate+0x8c>
   16c6c:	0002eef9 	.word	0x0002eef9
   16c70:	0002edd0 	.word	0x0002edd0
   16c74:	0002b939 	.word	0x0002b939
   16c78:	0002ef00 	.word	0x0002ef00
   16c7c:	0002ef16 	.word	0x0002ef16
   16c80:	200080cc 	.word	0x200080cc
   16c84:	00027377 	.word	0x00027377
   16c88:	00017051 	.word	0x00017051

00016c8c <sc_process>:
{
   16c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16c8e:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   16c90:	f1a0 0120 	sub.w	r1, r0, #32
   16c94:	f100 0430 	add.w	r4, r0, #48	; 0x30
   16c98:	e8d4 2faf 	lda	r2, [r4]
   16c9c:	f3c2 0040 	ubfx	r0, r2, #1, #1
   16ca0:	0792      	lsls	r2, r2, #30
   16ca2:	d50e      	bpl.n	16cc2 <sc_process+0x36>
   16ca4:	4919      	ldr	r1, [pc, #100]	; (16d0c <sc_process+0x80>)
   16ca6:	f240 439a 	movw	r3, #1178	; 0x49a
   16caa:	4a19      	ldr	r2, [pc, #100]	; (16d10 <sc_process+0x84>)
   16cac:	4819      	ldr	r0, [pc, #100]	; (16d14 <sc_process+0x88>)
   16cae:	f00e f912 	bl	24ed6 <assert_print>
   16cb2:	4819      	ldr	r0, [pc, #100]	; (16d18 <sc_process+0x8c>)
   16cb4:	f00e f90f 	bl	24ed6 <assert_print>
   16cb8:	f240 419a 	movw	r1, #1178	; 0x49a
   16cbc:	4814      	ldr	r0, [pc, #80]	; (16d10 <sc_process+0x84>)
   16cbe:	f00e f903 	bl	24ec8 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16cc2:	f853 2c08 	ldr.w	r2, [r3, #-8]
   16cc6:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16cc8:	e8d4 2fef 	ldaex	r2, [r4]
   16ccc:	f022 0201 	bic.w	r2, r2, #1
   16cd0:	e8c4 2fe5 	stlex	r5, r2, [r4]
   16cd4:	2d00      	cmp	r5, #0
   16cd6:	d1f7      	bne.n	16cc8 <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16cd8:	4a10      	ldr	r2, [pc, #64]	; (16d1c <sc_process+0x90>)
	sc->start = 0U;
   16cda:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16cde:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   16ce2:	4a0f      	ldr	r2, [pc, #60]	; (16d20 <sc_process+0x94>)
	sc->end = 0U;
   16ce4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   16ce8:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16cec:	aa01      	add	r2, sp, #4
   16cee:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16cf2:	2204      	movs	r2, #4
   16cf4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16cf8:	f7ff ff26 	bl	16b48 <bt_gatt_indicate>
   16cfc:	b918      	cbnz	r0, 16d06 <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16cfe:	2101      	movs	r1, #1
   16d00:	4620      	mov	r0, r4
   16d02:	f010 fc5b 	bl	275bc <atomic_set_bit>
}
   16d06:	b003      	add	sp, #12
   16d08:	bd30      	pop	{r4, r5, pc}
   16d0a:	bf00      	nop
   16d0c:	0002ef33 	.word	0x0002ef33
   16d10:	0002edd0 	.word	0x0002edd0
   16d14:	0002b939 	.word	0x0002b939
   16d18:	0002ef64 	.word	0x0002ef64
   16d1c:	0002b3d8 	.word	0x0002b3d8
   16d20:	000164f5 	.word	0x000164f5

00016d24 <update_ccc>:
{
   16d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d28:	4b3e      	ldr	r3, [pc, #248]	; (16e24 <update_ccc+0x100>)
{
   16d2a:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   16d2c:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d2e:	6882      	ldr	r2, [r0, #8]
{
   16d30:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d32:	429a      	cmp	r2, r3
{
   16d34:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   16d36:	d170      	bne.n	16e1a <update_ccc+0xf6>
	ccc = attr->user_data;
   16d38:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16d3c:	f108 0601 	add.w	r6, r8, #1
   16d40:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   16d44:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   16d48:	b1d3      	cbz	r3, 16d80 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16d4a:	4632      	mov	r2, r6
   16d4c:	4620      	mov	r0, r4
   16d4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   16d52:	f00f fdc8 	bl	268e6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16d56:	b198      	cbz	r0, 16d80 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   16d58:	f44f 7295 	mov.w	r2, #298	; 0x12a
   16d5c:	4629      	mov	r1, r5
   16d5e:	4620      	mov	r0, r4
   16d60:	f010 fca4 	bl	276ac <bt_gatt_check_perm>
		if (err) {
   16d64:	b308      	cbz	r0, 16daa <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16d66:	2803      	cmp	r0, #3
   16d68:	d10e      	bne.n	16d88 <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   16d6a:	4b2f      	ldr	r3, [pc, #188]	; (16e28 <update_ccc+0x104>)
   16d6c:	2202      	movs	r2, #2
   16d6e:	9302      	str	r3, [sp, #8]
   16d70:	2300      	movs	r3, #0
   16d72:	492e      	ldr	r1, [pc, #184]	; (16e2c <update_ccc+0x108>)
   16d74:	4618      	mov	r0, r3
   16d76:	e9cd 3300 	strd	r3, r3, [sp]
   16d7a:	9503      	str	r5, [sp, #12]
   16d7c:	f010 fbee 	bl	2755c <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16d80:	360a      	adds	r6, #10
   16d82:	454e      	cmp	r6, r9
   16d84:	d1de      	bne.n	16d44 <update_ccc+0x20>
   16d86:	e048      	b.n	16e1a <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   16d88:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   16d8a:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   16d8c:	bf0c      	ite	eq
   16d8e:	f04f 0a03 	moveq.w	sl, #3
   16d92:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   16d96:	f00f fda4 	bl	268e2 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   16d9a:	4582      	cmp	sl, r0
   16d9c:	d905      	bls.n	16daa <update_ccc+0x86>
				if (data->sec < sec) {
   16d9e:	793b      	ldrb	r3, [r7, #4]
   16da0:	4553      	cmp	r3, sl
   16da2:	d2ed      	bcs.n	16d80 <update_ccc+0x5c>
					data->sec = sec;
   16da4:	f887 a004 	strb.w	sl, [r7, #4]
   16da8:	e7ea      	b.n	16d80 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   16daa:	4641      	mov	r1, r8
   16dac:	4628      	mov	r0, r5
   16dae:	f010 fac1 	bl	27334 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   16db2:	4b1f      	ldr	r3, [pc, #124]	; (16e30 <update_ccc+0x10c>)
   16db4:	4598      	cmp	r8, r3
   16db6:	d130      	bne.n	16e1a <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16db8:	7a20      	ldrb	r0, [r4, #8]
   16dba:	f104 0190 	add.w	r1, r4, #144	; 0x90
   16dbe:	f7ff f9e7 	bl	16190 <find_sc_cfg>
	if (!cfg) {
   16dc2:	b350      	cbz	r0, 16e1a <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   16dc4:	8902      	ldrh	r2, [r0, #8]
   16dc6:	8943      	ldrh	r3, [r0, #10]
   16dc8:	ea52 0103 	orrs.w	r1, r2, r3
   16dcc:	d025      	beq.n	16e1a <update_ccc+0xf6>
	index = bt_conn_index(conn);
   16dce:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   16dd0:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   16dd8:	f7fd fb56 	bl	14488 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16ddc:	2318      	movs	r3, #24
   16dde:	4915      	ldr	r1, [pc, #84]	; (16e34 <update_ccc+0x110>)
   16de0:	4a15      	ldr	r2, [pc, #84]	; (16e38 <update_ccc+0x114>)
   16de2:	fb03 1300 	mla	r3, r3, r0, r1
   16de6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16de8:	4a14      	ldr	r2, [pc, #80]	; (16e3c <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16dea:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   16dec:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   16dee:	aa05      	add	r2, sp, #20
   16df0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   16df2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16df4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16df8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   16dfc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16dfe:	4620      	mov	r0, r4
   16e00:	f7ff fea2 	bl	16b48 <bt_gatt_indicate>
   16e04:	b148      	cbz	r0, 16e1a <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   16e06:	4b0e      	ldr	r3, [pc, #56]	; (16e40 <update_ccc+0x11c>)
   16e08:	2201      	movs	r2, #1
   16e0a:	9302      	str	r3, [sp, #8]
   16e0c:	2300      	movs	r3, #0
   16e0e:	4907      	ldr	r1, [pc, #28]	; (16e2c <update_ccc+0x108>)
   16e10:	4618      	mov	r0, r3
   16e12:	e9cd 3300 	strd	r3, r3, [sp]
   16e16:	f010 fba1 	bl	2755c <z_log_msg_runtime_create.constprop.0>
}
   16e1a:	2001      	movs	r0, #1
   16e1c:	b006      	add	sp, #24
   16e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16e22:	bf00      	nop
   16e24:	00016245 	.word	0x00016245
   16e28:	0002ef7f 	.word	0x0002ef7f
   16e2c:	0002a988 	.word	0x0002a988
   16e30:	20008508 	.word	0x20008508
   16e34:	2002116c 	.word	0x2002116c
   16e38:	0002b3d8 	.word	0x0002b3d8
   16e3c:	000275d1 	.word	0x000275d1
   16e40:	0002ef93 	.word	0x0002ef93

00016e44 <gatt_notify>:
{
   16e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16e48:	4614      	mov	r4, r2
   16e4a:	4688      	mov	r8, r1
   16e4c:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16e4e:	2294      	movs	r2, #148	; 0x94
   16e50:	6861      	ldr	r1, [r4, #4]
{
   16e52:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16e54:	f010 fc2a 	bl	276ac <bt_gatt_check_perm>
   16e58:	b170      	cbz	r0, 16e78 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   16e5a:	4b2a      	ldr	r3, [pc, #168]	; (16f04 <gatt_notify+0xc0>)
   16e5c:	2202      	movs	r2, #2
   16e5e:	9302      	str	r3, [sp, #8]
   16e60:	2300      	movs	r3, #0
   16e62:	4929      	ldr	r1, [pc, #164]	; (16f08 <gatt_notify+0xc4>)
   16e64:	4618      	mov	r0, r3
   16e66:	e9cd 3300 	strd	r3, r3, [sp]
   16e6a:	f010 fb77 	bl	2755c <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   16e6e:	f04f 30ff 	mov.w	r0, #4294967295
}
   16e72:	b005      	add	sp, #20
   16e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   16e78:	2201      	movs	r2, #1
   16e7a:	4630      	mov	r0, r6
   16e7c:	6861      	ldr	r1, [r4, #4]
   16e7e:	f7ff fd0f 	bl	168a0 <bt_gatt_is_subscribed>
   16e82:	4603      	mov	r3, r0
   16e84:	b950      	cbnz	r0, 16e9c <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   16e86:	4a21      	ldr	r2, [pc, #132]	; (16f0c <gatt_notify+0xc8>)
   16e88:	9000      	str	r0, [sp, #0]
   16e8a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16e8e:	491e      	ldr	r1, [pc, #120]	; (16f08 <gatt_notify+0xc4>)
   16e90:	2202      	movs	r2, #2
   16e92:	f010 fb63 	bl	2755c <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   16e96:	f06f 0015 	mvn.w	r0, #21
   16e9a:	e7ea      	b.n	16e72 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   16e9c:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   16e9e:	211b      	movs	r1, #27
   16ea0:	4630      	mov	r0, r6
   16ea2:	3202      	adds	r2, #2
   16ea4:	f7fe fce8 	bl	15878 <bt_att_create_pdu>
	if (!buf) {
   16ea8:	4605      	mov	r5, r0
   16eaa:	b958      	cbnz	r0, 16ec4 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   16eac:	4b18      	ldr	r3, [pc, #96]	; (16f10 <gatt_notify+0xcc>)
   16eae:	9000      	str	r0, [sp, #0]
   16eb0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16eb4:	2202      	movs	r2, #2
   16eb6:	4603      	mov	r3, r0
   16eb8:	4913      	ldr	r1, [pc, #76]	; (16f08 <gatt_notify+0xc4>)
   16eba:	f010 fb4f 	bl	2755c <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   16ebe:	f06f 000b 	mvn.w	r0, #11
   16ec2:	e7d6      	b.n	16e72 <gatt_notify+0x2e>
   16ec4:	f100 090c 	add.w	r9, r0, #12
   16ec8:	2102      	movs	r1, #2
   16eca:	4648      	mov	r0, r9
   16ecc:	f002 fbfc 	bl	196c8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   16ed0:	4607      	mov	r7, r0
   16ed2:	f827 8b02 	strh.w	r8, [r7], #2
   16ed6:	89a1      	ldrh	r1, [r4, #12]
   16ed8:	4648      	mov	r0, r9
   16eda:	f002 fbf5 	bl	196c8 <net_buf_simple_add>
   16ede:	89a2      	ldrh	r2, [r4, #12]
   16ee0:	68a1      	ldr	r1, [r4, #8]
   16ee2:	4638      	mov	r0, r7
   16ee4:	f012 fd5d 	bl	299a2 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   16ee8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   16eec:	4628      	mov	r0, r5
   16eee:	2301      	movs	r3, #1
   16ef0:	f010 fa16 	bl	27320 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   16ef4:	4629      	mov	r1, r5
   16ef6:	4630      	mov	r0, r6
}
   16ef8:	b005      	add	sp, #20
   16efa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   16efe:	f7ff b885 	b.w	1600c <bt_att_send>
   16f02:	bf00      	nop
   16f04:	0002ee91 	.word	0x0002ee91
   16f08:	0002a988 	.word	0x0002a988
   16f0c:	0002eea7 	.word	0x0002eea7
   16f10:	0002efb0 	.word	0x0002efb0

00016f14 <bt_gatt_notify_cb>:
{
   16f14:	b530      	push	{r4, r5, lr}
   16f16:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   16f18:	460c      	mov	r4, r1
{
   16f1a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   16f1c:	b971      	cbnz	r1, 16f3c <bt_gatt_notify_cb+0x28>
   16f1e:	4944      	ldr	r1, [pc, #272]	; (17030 <bt_gatt_notify_cb+0x11c>)
   16f20:	f640 232d 	movw	r3, #2605	; 0xa2d
   16f24:	4a43      	ldr	r2, [pc, #268]	; (17034 <bt_gatt_notify_cb+0x120>)
   16f26:	4844      	ldr	r0, [pc, #272]	; (17038 <bt_gatt_notify_cb+0x124>)
   16f28:	f00d ffd5 	bl	24ed6 <assert_print>
   16f2c:	4843      	ldr	r0, [pc, #268]	; (1703c <bt_gatt_notify_cb+0x128>)
   16f2e:	f00d ffd2 	bl	24ed6 <assert_print>
   16f32:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   16f36:	483f      	ldr	r0, [pc, #252]	; (17034 <bt_gatt_notify_cb+0x120>)
   16f38:	f00d ffc6 	bl	24ec8 <assert_post_action>
   16f3c:	684b      	ldr	r3, [r1, #4]
   16f3e:	b973      	cbnz	r3, 16f5e <bt_gatt_notify_cb+0x4a>
   16f40:	680b      	ldr	r3, [r1, #0]
   16f42:	b963      	cbnz	r3, 16f5e <bt_gatt_notify_cb+0x4a>
   16f44:	493e      	ldr	r1, [pc, #248]	; (17040 <bt_gatt_notify_cb+0x12c>)
   16f46:	f640 232e 	movw	r3, #2606	; 0xa2e
   16f4a:	4a3a      	ldr	r2, [pc, #232]	; (17034 <bt_gatt_notify_cb+0x120>)
   16f4c:	483a      	ldr	r0, [pc, #232]	; (17038 <bt_gatt_notify_cb+0x124>)
   16f4e:	f00d ffc2 	bl	24ed6 <assert_print>
   16f52:	483a      	ldr	r0, [pc, #232]	; (1703c <bt_gatt_notify_cb+0x128>)
   16f54:	f00d ffbf 	bl	24ed6 <assert_print>
   16f58:	f640 212e 	movw	r1, #2606	; 0xa2e
   16f5c:	e7eb      	b.n	16f36 <bt_gatt_notify_cb+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16f5e:	4b39      	ldr	r3, [pc, #228]	; (17044 <bt_gatt_notify_cb+0x130>)
   16f60:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16f64:	075a      	lsls	r2, r3, #29
   16f66:	d55d      	bpl.n	17024 <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16f68:	b115      	cbz	r5, 16f70 <bt_gatt_notify_cb+0x5c>
   16f6a:	7b6b      	ldrb	r3, [r5, #13]
   16f6c:	2b07      	cmp	r3, #7
   16f6e:	d15c      	bne.n	1702a <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   16f70:	6860      	ldr	r0, [r4, #4]
   16f72:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16f74:	f7ff fb4e 	bl	16614 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16f78:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16f7a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16f7e:	b33a      	cbz	r2, 16fd0 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16f80:	a905      	add	r1, sp, #20
   16f82:	9102      	str	r1, [sp, #8]
   16f84:	4930      	ldr	r1, [pc, #192]	; (17048 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   16f86:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16f88:	9101      	str	r1, [sp, #4]
   16f8a:	2101      	movs	r1, #1
   16f8c:	9100      	str	r1, [sp, #0]
   16f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16f92:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16f94:	f7ff fb86 	bl	166a4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16f98:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16f9a:	b91b      	cbnz	r3, 16fa4 <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   16f9c:	f06f 0001 	mvn.w	r0, #1
}
   16fa0:	b00b      	add	sp, #44	; 0x2c
   16fa2:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16fa4:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16fa6:	9b05      	ldr	r3, [sp, #20]
   16fa8:	a904      	add	r1, sp, #16
   16faa:	6818      	ldr	r0, [r3, #0]
   16fac:	2300      	movs	r3, #0
   16fae:	f88d 3010 	strb.w	r3, [sp, #16]
   16fb2:	f642 0303 	movw	r3, #10243	; 0x2803
   16fb6:	f8ad 3012 	strh.w	r3, [sp, #18]
   16fba:	f00f f86c 	bl	26096 <bt_uuid_cmp>
   16fbe:	b970      	cbnz	r0, 16fde <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16fc0:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   16fc2:	68c3      	ldr	r3, [r0, #12]
   16fc4:	799b      	ldrb	r3, [r3, #6]
   16fc6:	06db      	lsls	r3, r3, #27
   16fc8:	d405      	bmi.n	16fd6 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   16fca:	f06f 0015 	mvn.w	r0, #21
   16fce:	e7e7      	b.n	16fa0 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   16fd0:	2800      	cmp	r0, #0
   16fd2:	d1e8      	bne.n	16fa6 <bt_gatt_notify_cb+0x92>
   16fd4:	e7e2      	b.n	16f9c <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16fd6:	f010 fb15 	bl	27604 <bt_gatt_attr_value_handle>
   16fda:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   16fde:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16fe2:	b12d      	cbz	r5, 16ff0 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   16fe4:	4601      	mov	r1, r0
   16fe6:	4622      	mov	r2, r4
   16fe8:	4628      	mov	r0, r5
   16fea:	f7ff ff2b 	bl	16e44 <gatt_notify>
   16fee:	e7d7      	b.n	16fa0 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   16ff0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16ff4:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   16ff8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   16ffa:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16ffc:	f8ad 2012 	strh.w	r2, [sp, #18]
   17000:	aa05      	add	r2, sp, #20
   17002:	9202      	str	r2, [sp, #8]
   17004:	4a11      	ldr	r2, [pc, #68]	; (1704c <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   17006:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1700a:	e9cd 3200 	strd	r3, r2, [sp]
   1700e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17012:	462b      	mov	r3, r5
   17014:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   17016:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17018:	f88d 5010 	strb.w	r5, [sp, #16]
   1701c:	f7ff fb42 	bl	166a4 <bt_gatt_foreach_attr_type>
	return data.err;
   17020:	9807      	ldr	r0, [sp, #28]
   17022:	e7bd      	b.n	16fa0 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   17024:	f06f 000a 	mvn.w	r0, #10
   17028:	e7ba      	b.n	16fa0 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   1702a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1702e:	e7b7      	b.n	16fa0 <bt_gatt_notify_cb+0x8c>
   17030:	0002eef9 	.word	0x0002eef9
   17034:	0002edd0 	.word	0x0002edd0
   17038:	0002b939 	.word	0x0002b939
   1703c:	0002ef00 	.word	0x0002ef00
   17040:	0002ef16 	.word	0x0002ef16
   17044:	200080cc 	.word	0x200080cc
   17048:	00027377 	.word	0x00027377
   1704c:	00017051 	.word	0x00017051

00017050 <notify_cb>:
{
   17050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17054:	4b46      	ldr	r3, [pc, #280]	; (17170 <notify_cb+0x120>)
{
   17056:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17058:	6882      	ldr	r2, [r0, #8]
{
   1705a:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1705c:	429a      	cmp	r2, r3
{
   1705e:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   17060:	d136      	bne.n	170d0 <notify_cb+0x80>
	ccc = attr->user_data;
   17062:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17066:	4b43      	ldr	r3, [pc, #268]	; (17174 <notify_cb+0x124>)
   17068:	459a      	cmp	sl, r3
   1706a:	d119      	bne.n	170a0 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1706c:	2600      	movs	r6, #0
   1706e:	4c42      	ldr	r4, [pc, #264]	; (17178 <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17070:	4f42      	ldr	r7, [pc, #264]	; (1717c <notify_cb+0x12c>)
   17072:	4639      	mov	r1, r7
   17074:	4620      	mov	r0, r4
   17076:	f010 f9d5 	bl	27424 <bt_addr_le_eq>
   1707a:	b978      	cbnz	r0, 1709c <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1707c:	2207      	movs	r2, #7
   1707e:	4621      	mov	r1, r4
   17080:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17084:	f7fd fbf0 	bl	14868 <bt_conn_lookup_state_le>
			if (!conn) {
   17088:	bb38      	cbnz	r0, 170da <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   1708a:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1708c:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1708e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   17090:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17094:	8853      	ldrh	r3, [r2, #2]
   17096:	8812      	ldrh	r2, [r2, #0]
   17098:	f7ff f94c 	bl	16334 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1709c:	340c      	adds	r4, #12
   1709e:	b1d6      	cbz	r6, 170d6 <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   170a0:	f10a 0601 	add.w	r6, sl, #1
   170a4:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   170a8:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   170ac:	89ab      	ldrh	r3, [r5, #12]
   170ae:	429a      	cmp	r2, r3
   170b0:	d10b      	bne.n	170ca <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   170b2:	4631      	mov	r1, r6
   170b4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   170b8:	f7fd fb96 	bl	147e8 <bt_conn_lookup_addr_le>
		if (!conn) {
   170bc:	4604      	mov	r4, r0
   170be:	b120      	cbz	r0, 170ca <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   170c0:	7b43      	ldrb	r3, [r0, #13]
   170c2:	2b07      	cmp	r3, #7
   170c4:	d00c      	beq.n	170e0 <notify_cb+0x90>
			bt_conn_unref(conn);
   170c6:	f7fd f8c3 	bl	14250 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   170ca:	360a      	adds	r6, #10
   170cc:	45b3      	cmp	fp, r6
   170ce:	d1eb      	bne.n	170a8 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   170d0:	f04f 0901 	mov.w	r9, #1
   170d4:	e048      	b.n	17168 <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   170d6:	2601      	movs	r6, #1
   170d8:	e7cb      	b.n	17072 <notify_cb+0x22>
			bt_conn_unref(conn);
   170da:	f7fd f8b9 	bl	14250 <bt_conn_unref>
   170de:	e7dd      	b.n	1709c <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   170e0:	f8da 3020 	ldr.w	r3, [sl, #32]
   170e4:	b123      	cbz	r3, 170f0 <notify_cb+0xa0>
   170e6:	4641      	mov	r1, r8
   170e8:	4798      	blx	r3
   170ea:	b908      	cbnz	r0, 170f0 <notify_cb+0xa0>
			bt_conn_unref(conn);
   170ec:	4620      	mov	r0, r4
   170ee:	e7ea      	b.n	170c6 <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   170f0:	2294      	movs	r2, #148	; 0x94
   170f2:	4641      	mov	r1, r8
   170f4:	4620      	mov	r0, r4
   170f6:	f010 fad9 	bl	276ac <bt_gatt_check_perm>
   170fa:	4681      	mov	r9, r0
   170fc:	b150      	cbz	r0, 17114 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   170fe:	4b20      	ldr	r3, [pc, #128]	; (17180 <notify_cb+0x130>)
   17100:	2202      	movs	r2, #2
   17102:	9302      	str	r3, [sp, #8]
   17104:	2300      	movs	r3, #0
   17106:	491f      	ldr	r1, [pc, #124]	; (17184 <notify_cb+0x134>)
   17108:	4618      	mov	r0, r3
   1710a:	e9cd 3300 	strd	r3, r3, [sp]
   1710e:	f010 fa25 	bl	2755c <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   17112:	e7eb      	b.n	170ec <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   17114:	89ab      	ldrh	r3, [r5, #12]
   17116:	2b02      	cmp	r3, #2
   17118:	d115      	bne.n	17146 <notify_cb+0xf6>
   1711a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1711e:	079a      	lsls	r2, r3, #30
   17120:	d405      	bmi.n	1712e <notify_cb+0xde>
		bt_conn_unref(conn);
   17122:	4620      	mov	r0, r4
   17124:	f7fd f894 	bl	14250 <bt_conn_unref>
		data->err = 0;
   17128:	2300      	movs	r3, #0
   1712a:	60ab      	str	r3, [r5, #8]
   1712c:	e7cd      	b.n	170ca <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1712e:	4620      	mov	r0, r4
   17130:	692a      	ldr	r2, [r5, #16]
   17132:	88a9      	ldrh	r1, [r5, #4]
   17134:	f7ff fc88 	bl	16a48 <gatt_indicate>
			if (err == 0) {
   17138:	4607      	mov	r7, r0
   1713a:	b980      	cbnz	r0, 1715e <notify_cb+0x10e>
				data->ind_params->_ref++;
   1713c:	692a      	ldr	r2, [r5, #16]
   1713e:	7d93      	ldrb	r3, [r2, #22]
   17140:	3301      	adds	r3, #1
   17142:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17144:	e7ed      	b.n	17122 <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   17146:	2b01      	cmp	r3, #1
   17148:	d1eb      	bne.n	17122 <notify_cb+0xd2>
   1714a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1714e:	07db      	lsls	r3, r3, #31
   17150:	d5e7      	bpl.n	17122 <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17152:	4620      	mov	r0, r4
   17154:	692a      	ldr	r2, [r5, #16]
   17156:	88a9      	ldrh	r1, [r5, #4]
   17158:	f7ff fe74 	bl	16e44 <gatt_notify>
   1715c:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1715e:	4620      	mov	r0, r4
   17160:	f7fd f876 	bl	14250 <bt_conn_unref>
		if (err < 0) {
   17164:	2f00      	cmp	r7, #0
   17166:	dadf      	bge.n	17128 <notify_cb+0xd8>
}
   17168:	4648      	mov	r0, r9
   1716a:	b005      	add	sp, #20
   1716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17170:	00016245 	.word	0x00016245
   17174:	20008508 	.word	0x20008508
   17178:	20021591 	.word	0x20021591
   1717c:	0002d8ec 	.word	0x0002d8ec
   17180:	0002ee91 	.word	0x0002ee91
   17184:	0002a988 	.word	0x0002a988

00017188 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   17188:	b510      	push	{r4, lr}
   1718a:	b086      	sub	sp, #24
   1718c:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1718e:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   17190:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17192:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17196:	4a0f      	ldr	r2, [pc, #60]	; (171d4 <bt_gatt_connected+0x4c>)
   17198:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   1719a:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1719e:	f010 fa78 	bl	27692 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   171a2:	4620      	mov	r0, r4
   171a4:	f00f fb9d 	bl	268e2 <bt_conn_get_security>
   171a8:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   171ac:	4288      	cmp	r0, r1
   171ae:	d20e      	bcs.n	171ce <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   171b0:	4620      	mov	r0, r4
   171b2:	f00f fb6a 	bl	2688a <bt_conn_set_security>

		if (err) {
   171b6:	b150      	cbz	r0, 171ce <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   171b8:	4b07      	ldr	r3, [pc, #28]	; (171d8 <bt_gatt_connected+0x50>)
   171ba:	9003      	str	r0, [sp, #12]
   171bc:	9302      	str	r3, [sp, #8]
   171be:	2300      	movs	r3, #0
   171c0:	2202      	movs	r2, #2
   171c2:	4618      	mov	r0, r3
   171c4:	e9cd 3300 	strd	r3, r3, [sp]
   171c8:	4904      	ldr	r1, [pc, #16]	; (171dc <bt_gatt_connected+0x54>)
   171ca:	f010 f9c7 	bl	2755c <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   171ce:	b006      	add	sp, #24
   171d0:	bd10      	pop	{r4, pc}
   171d2:	bf00      	nop
   171d4:	00016d25 	.word	0x00016d25
   171d8:	0002efd9 	.word	0x0002efd9
   171dc:	0002a988 	.word	0x0002a988

000171e0 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   171e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   171e2:	4605      	mov	r5, r0
   171e4:	460e      	mov	r6, r1
   171e6:	4617      	mov	r7, r2
	return list->head;
   171e8:	4b06      	ldr	r3, [pc, #24]	; (17204 <bt_gatt_att_max_mtu_changed+0x24>)
   171ea:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   171ec:	b14c      	cbz	r4, 17202 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   171ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   171f2:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   171f4:	b11b      	cbz	r3, 171fe <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   171f6:	463a      	mov	r2, r7
   171f8:	4631      	mov	r1, r6
   171fa:	4628      	mov	r0, r5
   171fc:	4798      	blx	r3
	return node->next;
   171fe:	6864      	ldr	r4, [r4, #4]
   17200:	e7f4      	b.n	171ec <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   17202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17204:	200211ac 	.word	0x200211ac

00017208 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   17208:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1720a:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1720c:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1720e:	466b      	mov	r3, sp
   17210:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17214:	4a03      	ldr	r2, [pc, #12]	; (17224 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   17216:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1721a:	f010 fa3a 	bl	27692 <bt_gatt_foreach_attr>
}
   1721e:	b003      	add	sp, #12
   17220:	f85d fb04 	ldr.w	pc, [sp], #4
   17224:	00016d25 	.word	0x00016d25

00017228 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17228:	b570      	push	{r4, r5, r6, lr}
   1722a:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1722c:	4603      	mov	r3, r0
   1722e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17232:	2001      	movs	r0, #1
   17234:	4a0d      	ldr	r2, [pc, #52]	; (1726c <bt_gatt_disconnected+0x44>)
   17236:	f010 fa2c 	bl	27692 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1723a:	4620      	mov	r0, r4
   1723c:	f7fe ff7a 	bl	16134 <find_cf_cfg>
	if (!cfg) {
   17240:	4605      	mov	r5, r0
   17242:	b188      	cbz	r0, 17268 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17244:	f104 0690 	add.w	r6, r4, #144	; 0x90
   17248:	4631      	mov	r1, r6
   1724a:	7a20      	ldrb	r0, [r4, #8]
   1724c:	f00f f870 	bl	26330 <bt_addr_le_is_bonded>
   17250:	b920      	cbnz	r0, 1725c <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   17252:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   17254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   17258:	f7ff b858 	b.w	1630c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1725c:	4631      	mov	r1, r6
   1725e:	1c68      	adds	r0, r5, #1
}
   17260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17264:	f010 b8e6 	b.w	27434 <bt_addr_le_copy>
}
   17268:	bd70      	pop	{r4, r5, r6, pc}
   1726a:	bf00      	nop
   1726c:	00016441 	.word	0x00016441

00017270 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   17270:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   17272:	4b05      	ldr	r3, [pc, #20]	; (17288 <smp_find+0x18>)
{
   17274:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   17276:	4618      	mov	r0, r3
   17278:	f010 fa8a 	bl	27790 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1727c:	3b04      	subs	r3, #4
   1727e:	2800      	cmp	r0, #0
}
   17280:	bf14      	ite	ne
   17282:	4618      	movne	r0, r3
   17284:	2000      	moveq	r0, #0
   17286:	bd08      	pop	{r3, pc}
   17288:	20009a24 	.word	0x20009a24

0001728c <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1728c:	4b08      	ldr	r3, [pc, #32]	; (172b0 <latch_auth_cb+0x24>)
   1728e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17292:	681a      	ldr	r2, [r3, #0]
   17294:	4b07      	ldr	r3, [pc, #28]	; (172b4 <latch_auth_cb+0x28>)
   17296:	e8d0 1fef 	ldaex	r1, [r0]
   1729a:	4299      	cmp	r1, r3
   1729c:	d104      	bne.n	172a8 <latch_auth_cb+0x1c>
   1729e:	e8c0 2fec 	stlex	ip, r2, [r0]
   172a2:	f1bc 0f00 	cmp.w	ip, #0
   172a6:	d1f6      	bne.n	17296 <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   172a8:	e8d0 0faf 	lda	r0, [r0]
}
   172ac:	4770      	bx	lr
   172ae:	bf00      	nop
   172b0:	2002108c 	.word	0x2002108c
   172b4:	20009a20 	.word	0x20009a20

000172b8 <get_io_capa>:
{
   172b8:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   172ba:	f7ff ffe7 	bl	1728c <latch_auth_cb>
	if (!smp_auth_cb) {
   172be:	4603      	mov	r3, r0
   172c0:	b1c8      	cbz	r0, 172f6 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   172c2:	e9d0 1200 	ldrd	r1, r2, [r0]
   172c6:	b921      	cbnz	r1, 172d2 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   172c8:	2a00      	cmp	r2, #0
   172ca:	bf0c      	ite	eq
   172cc:	2003      	moveq	r0, #3
   172ce:	2002      	movne	r0, #2
   172d0:	e010      	b.n	172f4 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   172d2:	b132      	cbz	r2, 172e2 <get_io_capa+0x2a>
   172d4:	6883      	ldr	r3, [r0, #8]
   172d6:	b913      	cbnz	r3, 172de <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   172d8:	4b09      	ldr	r3, [pc, #36]	; (17300 <get_io_capa+0x48>)
   172da:	781b      	ldrb	r3, [r3, #0]
   172dc:	b933      	cbnz	r3, 172ec <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   172de:	2004      	movs	r0, #4
   172e0:	e008      	b.n	172f4 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   172e2:	4907      	ldr	r1, [pc, #28]	; (17300 <get_io_capa+0x48>)
   172e4:	7808      	ldrb	r0, [r1, #0]
   172e6:	b128      	cbz	r0, 172f4 <get_io_capa+0x3c>
   172e8:	689b      	ldr	r3, [r3, #8]
   172ea:	b933      	cbnz	r3, 172fa <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   172ec:	3a00      	subs	r2, #0
   172ee:	bf18      	it	ne
   172f0:	2201      	movne	r2, #1
   172f2:	0050      	lsls	r0, r2, #1
}
   172f4:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   172f6:	2003      	movs	r0, #3
   172f8:	e7fc      	b.n	172f4 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   172fa:	2001      	movs	r0, #1
   172fc:	e7fa      	b.n	172f4 <get_io_capa+0x3c>
   172fe:	bf00      	nop
   17300:	20022043 	.word	0x20022043

00017304 <get_auth>:
{
   17304:	b510      	push	{r4, lr}
	if (sc_supported) {
   17306:	4b0c      	ldr	r3, [pc, #48]	; (17338 <get_auth+0x34>)
   17308:	781b      	ldrb	r3, [r3, #0]
   1730a:	b17b      	cbz	r3, 1732c <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1730c:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   17310:	f7ff ffd2 	bl	172b8 <get_io_capa>
	if (bondable) {
   17314:	4b09      	ldr	r3, [pc, #36]	; (1733c <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   17316:	2803      	cmp	r0, #3
	if (bondable) {
   17318:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   1731a:	bf0c      	ite	eq
   1731c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   17320:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   17324:	b12b      	cbz	r3, 17332 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   17326:	f044 0001 	orr.w	r0, r4, #1
}
   1732a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1732c:	f001 0407 	and.w	r4, r1, #7
   17330:	e7ee      	b.n	17310 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   17332:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   17336:	e7f8      	b.n	1732a <get_auth+0x26>
   17338:	20022043 	.word	0x20022043
   1733c:	200089e6 	.word	0x200089e6

00017340 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   17340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   17342:	4b0d      	ldr	r3, [pc, #52]	; (17378 <bt_smp_accept+0x38>)
{
   17344:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   17346:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1734a:	b930      	cbnz	r0, 1735a <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1734c:	4a0b      	ldr	r2, [pc, #44]	; (1737c <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   1734e:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   17350:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   17352:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   17354:	b005      	add	sp, #20
   17356:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   1735a:	4b09      	ldr	r3, [pc, #36]	; (17380 <bt_smp_accept+0x40>)
   1735c:	9203      	str	r2, [sp, #12]
   1735e:	9302      	str	r3, [sp, #8]
   17360:	2300      	movs	r3, #0
   17362:	2201      	movs	r2, #1
   17364:	4618      	mov	r0, r3
   17366:	e9cd 3300 	strd	r3, r3, [sp]
   1736a:	4906      	ldr	r1, [pc, #24]	; (17384 <bt_smp_accept+0x44>)
   1736c:	f010 fa68 	bl	27840 <z_log_msg_runtime_create.constprop.0>
   17370:	f06f 000b 	mvn.w	r0, #11
   17374:	e7ee      	b.n	17354 <bt_smp_accept+0x14>
   17376:	bf00      	nop
   17378:	20009a20 	.word	0x20009a20
   1737c:	0002b4dc 	.word	0x0002b4dc
   17380:	0002f014 	.word	0x0002f014
   17384:	0002a9d0 	.word	0x0002a9d0

00017388 <smp_chan_get>:
{
   17388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1738a:	2106      	movs	r1, #6
   1738c:	f00f fb75 	bl	26a7a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17390:	4604      	mov	r4, r0
   17392:	b958      	cbnz	r0, 173ac <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   17394:	4b07      	ldr	r3, [pc, #28]	; (173b4 <smp_chan_get+0x2c>)
   17396:	2201      	movs	r2, #1
   17398:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1739c:	4906      	ldr	r1, [pc, #24]	; (173b8 <smp_chan_get+0x30>)
   1739e:	4603      	mov	r3, r0
   173a0:	9000      	str	r0, [sp, #0]
   173a2:	f010 fa4d 	bl	27840 <z_log_msg_runtime_create.constprop.0>
}
   173a6:	4620      	mov	r0, r4
   173a8:	b004      	add	sp, #16
   173aa:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   173ac:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   173b0:	e7f9      	b.n	173a6 <smp_chan_get+0x1e>
   173b2:	bf00      	nop
   173b4:	0002f039 	.word	0x0002f039
   173b8:	0002a9d0 	.word	0x0002a9d0

000173bc <smp_init>:
{
   173bc:	b538      	push	{r3, r4, r5, lr}
   173be:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   173c0:	22ec      	movs	r2, #236	; 0xec
   173c2:	2100      	movs	r1, #0
   173c4:	f012 fb27 	bl	29a16 <memset>
	if (bt_rand(smp->prnd, 16)) {
   173c8:	2110      	movs	r1, #16
   173ca:	f105 0027 	add.w	r0, r5, #39	; 0x27
   173ce:	f7fc fad5 	bl	1397c <bt_rand>
   173d2:	4604      	mov	r4, r0
   173d4:	b948      	cbnz	r0, 173ea <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   173d6:	2105      	movs	r1, #5
   173d8:	4628      	mov	r0, r5
   173da:	f010 fa40 	bl	2785e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   173de:	f7fc fb7f 	bl	13ae0 <bt_pub_key_get>
   173e2:	4b03      	ldr	r3, [pc, #12]	; (173f0 <smp_init+0x34>)
   173e4:	6018      	str	r0, [r3, #0]
}
   173e6:	4620      	mov	r0, r4
   173e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   173ea:	2408      	movs	r4, #8
   173ec:	e7fb      	b.n	173e6 <smp_init+0x2a>
   173ee:	bf00      	nop
   173f0:	200211b4 	.word	0x200211b4

000173f4 <smp_dhkey_generate>:
{
   173f4:	b530      	push	{r4, r5, lr}
   173f6:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   173f8:	1d05      	adds	r5, r0, #4
   173fa:	2108      	movs	r1, #8
   173fc:	4628      	mov	r0, r5
{
   173fe:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   17400:	f010 fa2d 	bl	2785e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   17404:	490b      	ldr	r1, [pc, #44]	; (17434 <smp_dhkey_generate+0x40>)
   17406:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1740a:	f7fc fb77 	bl	13afc <bt_dh_key_gen>
	if (err) {
   1740e:	b170      	cbz	r0, 1742e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   17410:	2108      	movs	r1, #8
   17412:	4628      	mov	r0, r5
   17414:	f010 f9e3 	bl	277de <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   17418:	4b07      	ldr	r3, [pc, #28]	; (17438 <smp_dhkey_generate+0x44>)
   1741a:	2201      	movs	r2, #1
   1741c:	9302      	str	r3, [sp, #8]
   1741e:	2300      	movs	r3, #0
   17420:	4906      	ldr	r1, [pc, #24]	; (1743c <smp_dhkey_generate+0x48>)
   17422:	4618      	mov	r0, r3
   17424:	e9cd 3300 	strd	r3, r3, [sp]
   17428:	f010 fa0a 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1742c:	2008      	movs	r0, #8
}
   1742e:	b005      	add	sp, #20
   17430:	bd30      	pop	{r4, r5, pc}
   17432:	bf00      	nop
   17434:	00027c37 	.word	0x00027c37
   17438:	0002f054 	.word	0x0002f054
   1743c:	0002a9d0 	.word	0x0002a9d0

00017440 <smp_ident_info>:
{
   17440:	b5f0      	push	{r4, r5, r6, r7, lr}
   17442:	460b      	mov	r3, r1
   17444:	4606      	mov	r6, r0
   17446:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17448:	210d      	movs	r1, #13
   1744a:	3004      	adds	r0, #4
   1744c:	f010 f9a0 	bl	27790 <atomic_test_bit>
   17450:	b330      	cbz	r0, 174a0 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   17452:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   17454:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   17458:	2002      	movs	r0, #2
   1745a:	f103 0790 	add.w	r7, r3, #144	; 0x90
   1745e:	463a      	mov	r2, r7
   17460:	7a19      	ldrb	r1, [r3, #8]
   17462:	f001 fcbf 	bl	18de4 <bt_keys_get_type>
		if (!keys) {
   17466:	4604      	mov	r4, r0
   17468:	b980      	cbnz	r0, 1748c <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1746a:	4638      	mov	r0, r7
   1746c:	f7f9 fef8 	bl	11260 <bt_addr_le_str>
   17470:	4b0e      	ldr	r3, [pc, #56]	; (174ac <smp_ident_info+0x6c>)
   17472:	9003      	str	r0, [sp, #12]
   17474:	e9cd 4301 	strd	r4, r3, [sp, #4]
   17478:	4620      	mov	r0, r4
   1747a:	4623      	mov	r3, r4
   1747c:	2201      	movs	r2, #1
   1747e:	490c      	ldr	r1, [pc, #48]	; (174b0 <smp_ident_info+0x70>)
   17480:	9400      	str	r4, [sp, #0]
   17482:	f010 f9dd 	bl	27840 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   17486:	2008      	movs	r0, #8
}
   17488:	b005      	add	sp, #20
   1748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1748c:	462b      	mov	r3, r5
   1748e:	342a      	adds	r4, #42	; 0x2a
   17490:	f105 0210 	add.w	r2, r5, #16
   17494:	f853 1b04 	ldr.w	r1, [r3], #4
   17498:	4293      	cmp	r3, r2
   1749a:	f844 1b04 	str.w	r1, [r4], #4
   1749e:	d1f9      	bne.n	17494 <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   174a0:	4630      	mov	r0, r6
   174a2:	2109      	movs	r1, #9
   174a4:	f010 f9db 	bl	2785e <atomic_set_bit>
	return 0;
   174a8:	2000      	movs	r0, #0
   174aa:	e7ed      	b.n	17488 <smp_ident_info+0x48>
   174ac:	0002f06d 	.word	0x0002f06d
   174b0:	0002a9d0 	.word	0x0002a9d0

000174b4 <smp_encrypt_info>:
{
   174b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   174b6:	460b      	mov	r3, r1
   174b8:	4606      	mov	r6, r0
   174ba:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   174bc:	210d      	movs	r1, #13
   174be:	3004      	adds	r0, #4
   174c0:	f010 f966 	bl	27790 <atomic_test_bit>
   174c4:	b330      	cbz	r0, 17514 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   174c6:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   174c8:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   174cc:	2004      	movs	r0, #4
   174ce:	f103 0790 	add.w	r7, r3, #144	; 0x90
   174d2:	463a      	mov	r2, r7
   174d4:	7a19      	ldrb	r1, [r3, #8]
   174d6:	f001 fc85 	bl	18de4 <bt_keys_get_type>
		if (!keys) {
   174da:	4604      	mov	r4, r0
   174dc:	b980      	cbnz	r0, 17500 <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   174de:	4638      	mov	r0, r7
   174e0:	f7f9 febe 	bl	11260 <bt_addr_le_str>
   174e4:	4b0e      	ldr	r3, [pc, #56]	; (17520 <smp_encrypt_info+0x6c>)
   174e6:	9003      	str	r0, [sp, #12]
   174e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   174ec:	4620      	mov	r0, r4
   174ee:	4623      	mov	r3, r4
   174f0:	2201      	movs	r2, #1
   174f2:	490c      	ldr	r1, [pc, #48]	; (17524 <smp_encrypt_info+0x70>)
   174f4:	9400      	str	r4, [sp, #0]
   174f6:	f010 f9a3 	bl	27840 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   174fa:	2008      	movs	r0, #8
}
   174fc:	b005      	add	sp, #20
   174fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17500:	462b      	mov	r3, r5
   17502:	341a      	adds	r4, #26
   17504:	f105 0210 	add.w	r2, r5, #16
   17508:	f853 1b04 	ldr.w	r1, [r3], #4
   1750c:	4293      	cmp	r3, r2
   1750e:	f844 1b04 	str.w	r1, [r4], #4
   17512:	d1f9      	bne.n	17508 <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   17514:	4630      	mov	r0, r6
   17516:	2107      	movs	r1, #7
   17518:	f010 f9a1 	bl	2785e <atomic_set_bit>
	return 0;
   1751c:	2000      	movs	r0, #0
   1751e:	e7ed      	b.n	174fc <smp_encrypt_info+0x48>
   17520:	0002f06d 	.word	0x0002f06d
   17524:	0002a9d0 	.word	0x0002a9d0

00017528 <smp_send_pairing_confirm>:
{
   17528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   1752a:	7a04      	ldrb	r4, [r0, #8]
{
   1752c:	4605      	mov	r5, r0
	switch (smp->method) {
   1752e:	2c02      	cmp	r4, #2
   17530:	d823      	bhi.n	1757a <smp_send_pairing_confirm+0x52>
   17532:	b144      	cbz	r4, 17546 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17534:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   17538:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1753c:	40dc      	lsrs	r4, r3
   1753e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   17542:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   17546:	2103      	movs	r1, #3
   17548:	4628      	mov	r0, r5
   1754a:	f010 f998 	bl	2787e <smp_create_pdu.constprop.0>
	if (!buf) {
   1754e:	4606      	mov	r6, r0
   17550:	b308      	cbz	r0, 17596 <smp_send_pairing_confirm+0x6e>
   17552:	2110      	movs	r1, #16
   17554:	300c      	adds	r0, #12
   17556:	f002 f8b7 	bl	196c8 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1755a:	9000      	str	r0, [sp, #0]
   1755c:	4816      	ldr	r0, [pc, #88]	; (175b8 <smp_send_pairing_confirm+0x90>)
   1755e:	4623      	mov	r3, r4
   17560:	6800      	ldr	r0, [r0, #0]
   17562:	f105 0227 	add.w	r2, r5, #39	; 0x27
   17566:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1756a:	f010 fc0a 	bl	27d82 <bt_crypto_f4>
   1756e:	4604      	mov	r4, r0
   17570:	b1b0      	cbz	r0, 175a0 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   17572:	4630      	mov	r0, r6
   17574:	f001 ff86 	bl	19484 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   17578:	e00d      	b.n	17596 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1757a:	2c03      	cmp	r4, #3
   1757c:	f04f 0300 	mov.w	r3, #0
   17580:	d00c      	beq.n	1759c <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17582:	4a0e      	ldr	r2, [pc, #56]	; (175bc <smp_send_pairing_confirm+0x94>)
   17584:	4618      	mov	r0, r3
   17586:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1758a:	490d      	ldr	r1, [pc, #52]	; (175c0 <smp_send_pairing_confirm+0x98>)
   1758c:	2201      	movs	r2, #1
	switch (smp->method) {
   1758e:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17590:	9300      	str	r3, [sp, #0]
   17592:	f010 f955 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17596:	2008      	movs	r0, #8
}
   17598:	b004      	add	sp, #16
   1759a:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1759c:	461c      	mov	r4, r3
   1759e:	e7d2      	b.n	17546 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   175a0:	4602      	mov	r2, r0
   175a2:	4631      	mov	r1, r6
   175a4:	4628      	mov	r0, r5
   175a6:	f010 f92e 	bl	27806 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   175aa:	1d28      	adds	r0, r5, #4
   175ac:	4621      	mov	r1, r4
   175ae:	f010 f916 	bl	277de <atomic_clear_bit>
	return 0;
   175b2:	4620      	mov	r0, r4
   175b4:	e7f0      	b.n	17598 <smp_send_pairing_confirm+0x70>
   175b6:	bf00      	nop
   175b8:	200211b4 	.word	0x200211b4
   175bc:	0002f087 	.word	0x0002f087
   175c0:	0002a9d0 	.word	0x0002a9d0

000175c4 <smp_public_key_periph>:
{
   175c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   175c6:	4604      	mov	r4, r0
   175c8:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   175ca:	f7ff fe5f 	bl	1728c <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   175ce:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   175d0:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   175d2:	210e      	movs	r1, #14
   175d4:	4628      	mov	r0, r5
   175d6:	f010 f8db 	bl	27790 <atomic_test_bit>
   175da:	b990      	cbnz	r0, 17602 <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   175dc:	4b51      	ldr	r3, [pc, #324]	; (17724 <smp_public_key_periph+0x160>)
   175de:	2220      	movs	r2, #32
   175e0:	6819      	ldr	r1, [r3, #0]
   175e2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   175e6:	f012 f9cc 	bl	29982 <memcmp>
   175ea:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   175ec:	b948      	cbnz	r0, 17602 <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   175ee:	4a4e      	ldr	r2, [pc, #312]	; (17728 <smp_public_key_periph+0x164>)
   175f0:	494e      	ldr	r1, [pc, #312]	; (1772c <smp_public_key_periph+0x168>)
   175f2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   175f6:	9000      	str	r0, [sp, #0]
   175f8:	2202      	movs	r2, #2
   175fa:	f010 f921 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   175fe:	2008      	movs	r0, #8
   17600:	e034      	b.n	1766c <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   17602:	210c      	movs	r1, #12
   17604:	4620      	mov	r0, r4
   17606:	f010 f93a 	bl	2787e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1760a:	4607      	mov	r7, r0
   1760c:	2800      	cmp	r0, #0
   1760e:	d0f6      	beq.n	175fe <smp_public_key_periph+0x3a>
   17610:	2140      	movs	r1, #64	; 0x40
   17612:	300c      	adds	r0, #12
   17614:	f002 f858 	bl	196c8 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   17618:	4b42      	ldr	r3, [pc, #264]	; (17724 <smp_public_key_periph+0x160>)
   1761a:	4602      	mov	r2, r0
   1761c:	681b      	ldr	r3, [r3, #0]
   1761e:	4601      	mov	r1, r0
   17620:	f103 0020 	add.w	r0, r3, #32
   17624:	f853 cb04 	ldr.w	ip, [r3], #4
   17628:	4283      	cmp	r3, r0
   1762a:	f841 cb04 	str.w	ip, [r1], #4
   1762e:	d1f9      	bne.n	17624 <smp_public_key_periph+0x60>
   17630:	3220      	adds	r2, #32
   17632:	f103 0120 	add.w	r1, r3, #32
   17636:	f853 0b04 	ldr.w	r0, [r3], #4
   1763a:	428b      	cmp	r3, r1
   1763c:	f842 0b04 	str.w	r0, [r2], #4
   17640:	d1f9      	bne.n	17636 <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   17642:	2200      	movs	r2, #0
   17644:	4639      	mov	r1, r7
   17646:	4620      	mov	r0, r4
   17648:	f010 f8dd 	bl	27806 <smp_send.constprop.0>
	switch (smp->method) {
   1764c:	7a23      	ldrb	r3, [r4, #8]
   1764e:	2b05      	cmp	r3, #5
   17650:	d85a      	bhi.n	17708 <smp_public_key_periph+0x144>
   17652:	e8df f003 	tbb	[pc, r3]
   17656:	3903      	.short	0x3903
   17658:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1765c:	2104      	movs	r1, #4
   1765e:	4620      	mov	r0, r4
   17660:	f010 f8fd 	bl	2785e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   17664:	f7ff ff60 	bl	17528 <smp_send_pairing_confirm>
		if (err) {
   17668:	2800      	cmp	r0, #0
   1766a:	d03c      	beq.n	176e6 <smp_public_key_periph+0x122>
}
   1766c:	b005      	add	sp, #20
   1766e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17670:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   17672:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17676:	f7ff fe09 	bl	1728c <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1767a:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1767c:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1767e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   17682:	f7fc f97b 	bl	1397c <bt_rand>
   17686:	2800      	cmp	r0, #0
   17688:	d1b9      	bne.n	175fe <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   1768a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1768e:	4a28      	ldr	r2, [pc, #160]	; (17730 <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   17690:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   17694:	fbb3 f1f2 	udiv	r1, r3, r2
   17698:	fb02 3311 	mls	r3, r2, r1, r3
   1769c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   176a0:	b156      	cbz	r6, 176b8 <smp_public_key_periph+0xf4>
   176a2:	6833      	ldr	r3, [r6, #0]
   176a4:	b143      	cbz	r3, 176b8 <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   176a6:	210b      	movs	r1, #11
   176a8:	4628      	mov	r0, r5
   176aa:	f010 f8d8 	bl	2785e <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   176ae:	4638      	mov	r0, r7
   176b0:	6833      	ldr	r3, [r6, #0]
   176b2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   176b6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   176b8:	2103      	movs	r1, #3
   176ba:	4620      	mov	r0, r4
   176bc:	f010 f8cf 	bl	2785e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   176c0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   176c2:	f010 f8cc 	bl	2785e <atomic_set_bit>
		break;
   176c6:	e00e      	b.n	176e6 <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   176c8:	4620      	mov	r0, r4
   176ca:	2103      	movs	r1, #3
   176cc:	f010 f8c7 	bl	2785e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   176d0:	210e      	movs	r1, #14
   176d2:	f010 f8c4 	bl	2785e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   176d6:	4628      	mov	r0, r5
   176d8:	210a      	movs	r1, #10
   176da:	f010 f8c0 	bl	2785e <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   176de:	6873      	ldr	r3, [r6, #4]
   176e0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   176e4:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   176e6:	4628      	mov	r0, r5
   176e8:	2107      	movs	r1, #7
   176ea:	f010 f8b8 	bl	2785e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   176ee:	2008      	movs	r0, #8
   176f0:	f7ff fdbe 	bl	17270 <smp_find>
   176f4:	b9a0      	cbnz	r0, 17720 <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   176f6:	4620      	mov	r0, r4
}
   176f8:	b005      	add	sp, #20
   176fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   176fe:	f7ff be79 	b.w	173f4 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17702:	2104      	movs	r1, #4
   17704:	4620      	mov	r0, r4
   17706:	e7dc      	b.n	176c2 <smp_public_key_periph+0xfe>
	switch (smp->method) {
   17708:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1770a:	4b0a      	ldr	r3, [pc, #40]	; (17734 <smp_public_key_periph+0x170>)
   1770c:	2201      	movs	r2, #1
   1770e:	9302      	str	r3, [sp, #8]
   17710:	2300      	movs	r3, #0
   17712:	4906      	ldr	r1, [pc, #24]	; (1772c <smp_public_key_periph+0x168>)
   17714:	4618      	mov	r0, r3
   17716:	e9cd 3300 	strd	r3, r3, [sp]
   1771a:	f010 f891 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1771e:	e76e      	b.n	175fe <smp_public_key_periph+0x3a>
	return 0;
   17720:	2000      	movs	r0, #0
   17722:	e7a3      	b.n	1766c <smp_public_key_periph+0xa8>
   17724:	200211b4 	.word	0x200211b4
   17728:	0002f0a3 	.word	0x0002f0a3
   1772c:	0002a9d0 	.word	0x0002a9d0
   17730:	000f4240 	.word	0x000f4240
   17734:	0002f087 	.word	0x0002f087

00017738 <smp_public_key>:
{
   17738:	b530      	push	{r4, r5, lr}
   1773a:	4604      	mov	r4, r0
   1773c:	460d      	mov	r5, r1
   1773e:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17740:	f7ff fda4 	bl	1728c <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   17744:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17748:	4602      	mov	r2, r0
   1774a:	68eb      	ldr	r3, [r5, #12]
   1774c:	f103 0120 	add.w	r1, r3, #32
   17750:	f853 5b04 	ldr.w	r5, [r3], #4
   17754:	428b      	cmp	r3, r1
   17756:	f842 5b04 	str.w	r5, [r2], #4
   1775a:	d1f9      	bne.n	17750 <smp_public_key+0x18>
   1775c:	f104 0277 	add.w	r2, r4, #119	; 0x77
   17760:	f103 0120 	add.w	r1, r3, #32
   17764:	f853 5b04 	ldr.w	r5, [r3], #4
   17768:	428b      	cmp	r3, r1
   1776a:	f842 5b04 	str.w	r5, [r2], #4
   1776e:	d1f9      	bne.n	17764 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   17770:	f7fc f922 	bl	139b8 <bt_pub_key_is_debug>
   17774:	b940      	cbnz	r0, 17788 <smp_public_key+0x50>
	if (!sc_public_key) {
   17776:	4b1c      	ldr	r3, [pc, #112]	; (177e8 <smp_public_key+0xb0>)
   17778:	681d      	ldr	r5, [r3, #0]
   1777a:	bb75      	cbnz	r5, 177da <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1777c:	1d20      	adds	r0, r4, #4
   1777e:	2106      	movs	r1, #6
   17780:	f010 f86d 	bl	2785e <atomic_set_bit>
	return 0;
   17784:	4628      	mov	r0, r5
		return 0;
   17786:	e026      	b.n	177d6 <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   17788:	4b18      	ldr	r3, [pc, #96]	; (177ec <smp_public_key+0xb4>)
   1778a:	2203      	movs	r2, #3
   1778c:	9302      	str	r3, [sp, #8]
   1778e:	2300      	movs	r3, #0
   17790:	4917      	ldr	r1, [pc, #92]	; (177f0 <smp_public_key+0xb8>)
   17792:	4618      	mov	r0, r3
   17794:	e9cd 3300 	strd	r3, r3, [sp]
   17798:	f010 f852 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1779c:	210e      	movs	r1, #14
   1779e:	1d20      	adds	r0, r4, #4
   177a0:	f010 f85d 	bl	2785e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   177a4:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   177a8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   177ac:	b933      	cbnz	r3, 177bc <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   177ae:	7a28      	ldrb	r0, [r5, #8]
   177b0:	f105 0190 	add.w	r1, r5, #144	; 0x90
   177b4:	f001 f9fc 	bl	18bb0 <bt_keys_get_addr>
   177b8:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   177bc:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   177c0:	2b00      	cmp	r3, #0
   177c2:	d0d8      	beq.n	17776 <smp_public_key+0x3e>
   177c4:	89da      	ldrh	r2, [r3, #14]
   177c6:	f002 0224 	and.w	r2, r2, #36	; 0x24
   177ca:	2a00      	cmp	r2, #0
   177cc:	d0d3      	beq.n	17776 <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   177ce:	7b5b      	ldrb	r3, [r3, #13]
   177d0:	079b      	lsls	r3, r3, #30
   177d2:	d4d0      	bmi.n	17776 <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   177d4:	2003      	movs	r0, #3
}
   177d6:	b005      	add	sp, #20
   177d8:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   177da:	4620      	mov	r0, r4
}
   177dc:	b005      	add	sp, #20
   177de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   177e2:	f7ff beef 	b.w	175c4 <smp_public_key_periph>
   177e6:	bf00      	nop
   177e8:	200211b4 	.word	0x200211b4
   177ec:	0002f0be 	.word	0x0002f0be
   177f0:	0002a9d0 	.word	0x0002a9d0

000177f4 <smp_pairing_req>:
{
   177f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177f8:	460d      	mov	r5, r1
   177fa:	b086      	sub	sp, #24
   177fc:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   177fe:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17802:	f7ff fd43 	bl	1728c <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   17806:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1780a:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1780c:	f898 3003 	ldrb.w	r3, [r8, #3]
   17810:	3b07      	subs	r3, #7
   17812:	2b09      	cmp	r3, #9
   17814:	d903      	bls.n	1781e <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   17816:	2006      	movs	r0, #6
}
   17818:	b006      	add	sp, #24
   1781a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1781e:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   17822:	b15b      	cbz	r3, 1783c <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   17824:	1d25      	adds	r5, r4, #4
   17826:	210f      	movs	r1, #15
   17828:	4628      	mov	r0, r5
   1782a:	f00f ffb1 	bl	27790 <atomic_test_bit>
   1782e:	b980      	cbnz	r0, 17852 <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   17830:	4620      	mov	r0, r4
   17832:	f7ff fdc3 	bl	173bc <smp_init>
		if (ret) {
   17836:	b160      	cbz	r0, 17852 <smp_pairing_req+0x5e>
			return ret;
   17838:	b2c0      	uxtb	r0, r0
   1783a:	e7ed      	b.n	17818 <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1783c:	7a30      	ldrb	r0, [r6, #8]
   1783e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17842:	f001 f9b5 	bl	18bb0 <bt_keys_get_addr>
   17846:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   1784a:	2800      	cmp	r0, #0
   1784c:	d1ea      	bne.n	17824 <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   1784e:	2008      	movs	r0, #8
   17850:	e7e2      	b.n	17818 <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   17852:	2301      	movs	r3, #1
   17854:	7263      	strb	r3, [r4, #9]
   17856:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1785a:	4620      	mov	r0, r4
   1785c:	f8c4 300a 	str.w	r3, [r4, #10]
   17860:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   17864:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   17866:	2302      	movs	r3, #2
   17868:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1786a:	f898 1002 	ldrb.w	r1, [r8, #2]
   1786e:	f7ff fd49 	bl	17304 <get_auth>
   17872:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   17874:	4620      	mov	r0, r4
   17876:	f7ff fd1f 	bl	172b8 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1787a:	4ba9      	ldr	r3, [pc, #676]	; (17b20 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   1787c:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1787e:	781b      	ldrb	r3, [r3, #0]
   17880:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   17882:	2310      	movs	r3, #16
   17884:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   17886:	f898 3004 	ldrb.w	r3, [r8, #4]
   1788a:	f003 0303 	and.w	r3, r3, #3
   1788e:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   17890:	f898 3005 	ldrb.w	r3, [r8, #5]
   17894:	f003 0301 	and.w	r3, r3, #1
   17898:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1789a:	7ce3      	ldrb	r3, [r4, #19]
   1789c:	071b      	lsls	r3, r3, #28
   1789e:	d50d      	bpl.n	178bc <smp_pairing_req+0xc8>
   178a0:	f898 3002 	ldrb.w	r3, [r8, #2]
   178a4:	0718      	lsls	r0, r3, #28
   178a6:	d509      	bpl.n	178bc <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   178a8:	2105      	movs	r1, #5
   178aa:	4628      	mov	r0, r5
   178ac:	f00f ffd7 	bl	2785e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   178b0:	7d63      	ldrb	r3, [r4, #21]
   178b2:	f003 0302 	and.w	r3, r3, #2
   178b6:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   178b8:	2300      	movs	r3, #0
   178ba:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   178bc:	7ce3      	ldrb	r3, [r4, #19]
   178be:	0699      	lsls	r1, r3, #26
   178c0:	d507      	bpl.n	178d2 <smp_pairing_req+0xde>
   178c2:	f898 3002 	ldrb.w	r3, [r8, #2]
   178c6:	069a      	lsls	r2, r3, #26
   178c8:	d503      	bpl.n	178d2 <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   178ca:	2114      	movs	r1, #20
   178cc:	4628      	mov	r0, r5
   178ce:	f00f ffc6 	bl	2785e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   178d2:	7da3      	ldrb	r3, [r4, #22]
   178d4:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   178d8:	7d63      	ldrb	r3, [r4, #21]
   178da:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   178de:	7ce3      	ldrb	r3, [r4, #19]
   178e0:	07db      	lsls	r3, r3, #31
   178e2:	d507      	bpl.n	178f4 <smp_pairing_req+0x100>
   178e4:	f898 3002 	ldrb.w	r3, [r8, #2]
   178e8:	07d8      	lsls	r0, r3, #31
   178ea:	d503      	bpl.n	178f4 <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   178ec:	210d      	movs	r1, #13
   178ee:	4628      	mov	r0, r5
   178f0:	f00f ffb5 	bl	2785e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   178f4:	2103      	movs	r1, #3
   178f6:	4628      	mov	r0, r5
   178f8:	f00f ffb1 	bl	2785e <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   178fc:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   178fe:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17902:	f00f ff45 	bl	27790 <atomic_test_bit>
   17906:	bb40      	cbnz	r0, 1795a <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17908:	f1b8 0f04 	cmp.w	r8, #4
   1790c:	d845      	bhi.n	1799a <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1790e:	7ae3      	ldrb	r3, [r4, #11]
   17910:	7ca2      	ldrb	r2, [r4, #18]
   17912:	4013      	ands	r3, r2
   17914:	07d9      	lsls	r1, r3, #31
   17916:	d43e      	bmi.n	17996 <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   17918:	7b21      	ldrb	r1, [r4, #12]
   1791a:	7ce3      	ldrb	r3, [r4, #19]
   1791c:	4319      	orrs	r1, r3
   1791e:	f011 0104 	ands.w	r1, r1, #4
   17922:	d011      	beq.n	17948 <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   17924:	4620      	mov	r0, r4
   17926:	f7ff fcc7 	bl	172b8 <get_io_capa>
   1792a:	4b7e      	ldr	r3, [pc, #504]	; (17b24 <smp_pairing_req+0x330>)
   1792c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   17930:	4498      	add	r8, r3
   17932:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   17936:	2904      	cmp	r1, #4
   17938:	d106      	bne.n	17948 <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1793a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1793e:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   17940:	2b00      	cmp	r3, #0
   17942:	bf14      	ite	ne
   17944:	2101      	movne	r1, #1
   17946:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   17948:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1794a:	4620      	mov	r0, r4
   1794c:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   17950:	f00f ff24 	bl	2779c <update_keys_check>
   17954:	bb18      	cbnz	r0, 1799e <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   17956:	2003      	movs	r0, #3
   17958:	e75e      	b.n	17818 <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1795a:	7b23      	ldrb	r3, [r4, #12]
   1795c:	7ce0      	ldrb	r0, [r4, #19]
   1795e:	ea03 0200 	and.w	r2, r3, r0
   17962:	0712      	lsls	r2, r2, #28
   17964:	d506      	bpl.n	17974 <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   17966:	7ae2      	ldrb	r2, [r4, #11]
   17968:	f894 c012 	ldrb.w	ip, [r4, #18]
   1796c:	ea42 020c 	orr.w	r2, r2, ip
   17970:	07d2      	lsls	r2, r2, #31
   17972:	d4e9      	bmi.n	17948 <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17974:	f1b8 0f04 	cmp.w	r8, #4
   17978:	d80f      	bhi.n	1799a <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1797a:	ea43 0100 	orr.w	r1, r3, r0
   1797e:	f011 0104 	ands.w	r1, r1, #4
   17982:	d0e1      	beq.n	17948 <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   17984:	4620      	mov	r0, r4
   17986:	f7ff fc97 	bl	172b8 <get_io_capa>
   1798a:	4b67      	ldr	r3, [pc, #412]	; (17b28 <smp_pairing_req+0x334>)
   1798c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   17990:	4443      	add	r3, r8
   17992:	5c19      	ldrb	r1, [r3, r0]
   17994:	e7d8      	b.n	17948 <smp_pairing_req+0x154>
		return LEGACY_OOB;
   17996:	2106      	movs	r1, #6
   17998:	e7d6      	b.n	17948 <smp_pairing_req+0x154>
		return JUST_WORKS;
   1799a:	2100      	movs	r1, #0
   1799c:	e7d4      	b.n	17948 <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1799e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   179a2:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   179a4:	2b03      	cmp	r3, #3
   179a6:	d03c      	beq.n	17a22 <smp_pairing_req+0x22e>
   179a8:	d82a      	bhi.n	17a00 <smp_pairing_req+0x20c>
   179aa:	3b01      	subs	r3, #1
   179ac:	2b01      	cmp	r3, #1
   179ae:	f63f af4e 	bhi.w	1784e <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   179b2:	2105      	movs	r1, #5
   179b4:	4628      	mov	r0, r5
   179b6:	f00f feeb 	bl	27790 <atomic_test_bit>
   179ba:	2800      	cmp	r0, #0
   179bc:	f040 80be 	bne.w	17b3c <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   179c0:	4620      	mov	r0, r4
   179c2:	f7ff fc63 	bl	1728c <latch_auth_cb>
   179c6:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   179c8:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   179ca:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   179ce:	f7ff fc5d 	bl	1728c <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   179d2:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   179d6:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   179d8:	f898 0008 	ldrb.w	r0, [r8, #8]
   179dc:	f001 f9c6 	bl	18d6c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   179e0:	7a23      	ldrb	r3, [r4, #8]
   179e2:	b310      	cbz	r0, 17a2a <smp_pairing_req+0x236>
   179e4:	7b42      	ldrb	r2, [r0, #13]
   179e6:	07d2      	lsls	r2, r2, #31
   179e8:	d51f      	bpl.n	17a2a <smp_pairing_req+0x236>
   179ea:	b9f3      	cbnz	r3, 17a2a <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   179ec:	4a4f      	ldr	r2, [pc, #316]	; (17b2c <smp_pairing_req+0x338>)
   179ee:	4618      	mov	r0, r3
   179f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   179f4:	494e      	ldr	r1, [pc, #312]	; (17b30 <smp_pairing_req+0x33c>)
   179f6:	2201      	movs	r2, #1
   179f8:	9300      	str	r3, [sp, #0]
   179fa:	f00f ff21 	bl	27840 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   179fe:	e726      	b.n	1784e <smp_pairing_req+0x5a>
	switch (sec) {
   17a00:	2b04      	cmp	r3, #4
   17a02:	f47f af24 	bne.w	1784e <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   17a06:	7d23      	ldrb	r3, [r4, #20]
   17a08:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   17a0a:	4293      	cmp	r3, r2
   17a0c:	bf28      	it	cs
   17a0e:	4613      	movcs	r3, r2
   17a10:	2b10      	cmp	r3, #16
   17a12:	f47f af00 	bne.w	17816 <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17a16:	2105      	movs	r1, #5
   17a18:	4628      	mov	r0, r5
   17a1a:	f00f feb9 	bl	27790 <atomic_test_bit>
   17a1e:	2800      	cmp	r0, #0
   17a20:	d099      	beq.n	17956 <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   17a22:	7a23      	ldrb	r3, [r4, #8]
   17a24:	2b00      	cmp	r3, #0
   17a26:	d1c4      	bne.n	179b2 <smp_pairing_req+0x1be>
   17a28:	e795      	b.n	17956 <smp_pairing_req+0x162>
	switch (smp->method) {
   17a2a:	2b06      	cmp	r3, #6
   17a2c:	d85d      	bhi.n	17aea <smp_pairing_req+0x2f6>
   17a2e:	e8df f003 	tbb	[pc, r3]
   17a32:	5418      	.short	0x5418
   17a34:	5c5c5c2d 	.word	0x5c5c5c2d
   17a38:	04          	.byte	0x04
   17a39:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   17a3a:	2e00      	cmp	r6, #0
   17a3c:	d061      	beq.n	17b02 <smp_pairing_req+0x30e>
   17a3e:	68f3      	ldr	r3, [r6, #12]
   17a40:	2b00      	cmp	r3, #0
   17a42:	d05e      	beq.n	17b02 <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   17a44:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17a46:	210a      	movs	r1, #10
   17a48:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   17a4a:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17a4e:	f00f ff06 	bl	2785e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   17a52:	68f3      	ldr	r3, [r6, #12]
   17a54:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17a58:	a905      	add	r1, sp, #20
   17a5a:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17a5c:	7a23      	ldrb	r3, [r4, #8]
   17a5e:	2b00      	cmp	r3, #0
   17a60:	d151      	bne.n	17b06 <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17a62:	210f      	movs	r1, #15
   17a64:	4628      	mov	r0, r5
   17a66:	f00f fe93 	bl	27790 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17a6a:	2800      	cmp	r0, #0
   17a6c:	d14b      	bne.n	17b06 <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17a6e:	2f00      	cmp	r7, #0
   17a70:	d049      	beq.n	17b06 <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   17a72:	697b      	ldr	r3, [r7, #20]
   17a74:	2b00      	cmp	r3, #0
   17a76:	d046      	beq.n	17b06 <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17a78:	4628      	mov	r0, r5
   17a7a:	210a      	movs	r1, #10
   17a7c:	f00f feef 	bl	2785e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   17a80:	697b      	ldr	r3, [r7, #20]
   17a82:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   17a86:	4798      	blx	r3
		return 0;
   17a88:	2000      	movs	r0, #0
   17a8a:	e6c5      	b.n	17818 <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   17a8c:	2104      	movs	r1, #4
   17a8e:	a805      	add	r0, sp, #20
   17a90:	f7fb ff74 	bl	1397c <bt_rand>
   17a94:	2800      	cmp	r0, #0
   17a96:	f47f aeda 	bne.w	1784e <smp_pairing_req+0x5a>
			passkey %= 1000000;
   17a9a:	9b05      	ldr	r3, [sp, #20]
   17a9c:	4a25      	ldr	r2, [pc, #148]	; (17b34 <smp_pairing_req+0x340>)
   17a9e:	fbb3 f1f2 	udiv	r1, r3, r2
   17aa2:	fb02 3311 	mls	r3, r2, r1, r3
   17aa6:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   17aa8:	b14e      	cbz	r6, 17abe <smp_pairing_req+0x2ca>
   17aaa:	6833      	ldr	r3, [r6, #0]
   17aac:	b13b      	cbz	r3, 17abe <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   17aae:	210b      	movs	r1, #11
   17ab0:	4628      	mov	r0, r5
   17ab2:	f00f fed4 	bl	2785e <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   17ab6:	4640      	mov	r0, r8
   17ab8:	6833      	ldr	r3, [r6, #0]
   17aba:	9905      	ldr	r1, [sp, #20]
   17abc:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   17abe:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   17ac0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   17ac4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   17ac8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   17aca:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   17ace:	0a1b      	lsrs	r3, r3, #8
   17ad0:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   17ad4:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   17ad8:	e7c0      	b.n	17a5c <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17ada:	4628      	mov	r0, r5
   17adc:	210a      	movs	r1, #10
   17ade:	f00f febe 	bl	2785e <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   17ae2:	4640      	mov	r0, r8
   17ae4:	6873      	ldr	r3, [r6, #4]
   17ae6:	4798      	blx	r3
	if (ret) {
   17ae8:	e7b8      	b.n	17a5c <smp_pairing_req+0x268>
	switch (smp->method) {
   17aea:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17aec:	4b12      	ldr	r3, [pc, #72]	; (17b38 <smp_pairing_req+0x344>)
   17aee:	2201      	movs	r2, #1
   17af0:	9302      	str	r3, [sp, #8]
   17af2:	2300      	movs	r3, #0
   17af4:	490e      	ldr	r1, [pc, #56]	; (17b30 <smp_pairing_req+0x33c>)
   17af6:	4618      	mov	r0, r3
   17af8:	e9cd 3300 	strd	r3, r3, [sp]
   17afc:	f00f fea0 	bl	27840 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   17b00:	e6a5      	b.n	1784e <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   17b02:	2002      	movs	r0, #2
   17b04:	e688      	b.n	17818 <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   17b06:	2103      	movs	r1, #3
   17b08:	4620      	mov	r0, r4
   17b0a:	f00f fea8 	bl	2785e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   17b0e:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   17b10:	f00f fea5 	bl	2785e <atomic_set_bit>
}
   17b14:	b006      	add	sp, #24
   17b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   17b1a:	f00f becf 	b.w	278bc <send_pairing_rsp>
   17b1e:	bf00      	nop
   17b20:	20022044 	.word	0x20022044
   17b24:	0002f45f 	.word	0x0002f45f
   17b28:	0002f446 	.word	0x0002f446
   17b2c:	0002f0df 	.word	0x0002f0df
   17b30:	0002a9d0 	.word	0x0002a9d0
   17b34:	000f4240 	.word	0x000f4240
   17b38:	0002f087 	.word	0x0002f087
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   17b3c:	7a23      	ldrb	r3, [r4, #8]
   17b3e:	b973      	cbnz	r3, 17b5e <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17b40:	210f      	movs	r1, #15
   17b42:	4628      	mov	r0, r5
   17b44:	f00f fe24 	bl	27790 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17b48:	b948      	cbnz	r0, 17b5e <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17b4a:	b147      	cbz	r7, 17b5e <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   17b4c:	697b      	ldr	r3, [r7, #20]
   17b4e:	b133      	cbz	r3, 17b5e <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17b50:	4628      	mov	r0, r5
   17b52:	210a      	movs	r1, #10
   17b54:	f00f fe83 	bl	2785e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   17b58:	4630      	mov	r0, r6
   17b5a:	697b      	ldr	r3, [r7, #20]
   17b5c:	e793      	b.n	17a86 <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   17b5e:	210c      	movs	r1, #12
   17b60:	4620      	mov	r0, r4
   17b62:	e7d5      	b.n	17b10 <smp_pairing_req+0x31c>

00017b64 <compute_and_check_and_send_periph_dhcheck>:
{
   17b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17b68:	4604      	mov	r4, r0
   17b6a:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   17b6c:	ad0c      	add	r5, sp, #48	; 0x30
   17b6e:	2210      	movs	r2, #16
   17b70:	2100      	movs	r1, #0
   17b72:	4628      	mov	r0, r5
   17b74:	f011 ff4f 	bl	29a16 <memset>
	switch (smp->method) {
   17b78:	7a23      	ldrb	r3, [r4, #8]
   17b7a:	2b05      	cmp	r3, #5
   17b7c:	d83a      	bhi.n	17bf4 <compute_and_check_and_send_periph_dhcheck+0x90>
   17b7e:	e8df f003 	tbb	[pc, r3]
   17b82:	0306      	.short	0x0306
   17b84:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   17b88:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   17b8c:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   17b8e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   17b92:	f104 0247 	add.w	r2, r4, #71	; 0x47
   17b96:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   17b9a:	e9cd 7201 	strd	r7, r2, [sp, #4]
   17b9e:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   17ba2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   17ba6:	f104 0927 	add.w	r9, r4, #39	; 0x27
   17baa:	9200      	str	r2, [sp, #0]
   17bac:	4641      	mov	r1, r8
   17bae:	464a      	mov	r2, r9
   17bb0:	3397      	adds	r3, #151	; 0x97
   17bb2:	f104 0097 	add.w	r0, r4, #151	; 0x97
   17bb6:	f001 f987 	bl	18ec8 <bt_crypto_f5>
   17bba:	4682      	mov	sl, r0
   17bbc:	b348      	cbz	r0, 17c12 <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   17bbe:	4b4e      	ldr	r3, [pc, #312]	; (17cf8 <compute_and_check_and_send_periph_dhcheck+0x194>)
   17bc0:	9302      	str	r3, [sp, #8]
   17bc2:	2300      	movs	r3, #0
   17bc4:	e9cd 3300 	strd	r3, r3, [sp]
   17bc8:	2201      	movs	r2, #1
   17bca:	4618      	mov	r0, r3
   17bcc:	494b      	ldr	r1, [pc, #300]	; (17cfc <compute_and_check_and_send_periph_dhcheck+0x198>)
   17bce:	f00f fe37 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17bd2:	e01a      	b.n	17c0a <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   17bd4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   17bd8:	2b00      	cmp	r3, #0
   17bda:	d0d8      	beq.n	17b8e <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   17bdc:	462e      	mov	r6, r5
   17bde:	f103 0710 	add.w	r7, r3, #16
   17be2:	4632      	mov	r2, r6
   17be4:	6818      	ldr	r0, [r3, #0]
   17be6:	6859      	ldr	r1, [r3, #4]
   17be8:	3308      	adds	r3, #8
   17bea:	c203      	stmia	r2!, {r0, r1}
   17bec:	42bb      	cmp	r3, r7
   17bee:	4616      	mov	r6, r2
   17bf0:	d1f7      	bne.n	17be2 <compute_and_check_and_send_periph_dhcheck+0x7e>
   17bf2:	e7cc      	b.n	17b8e <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   17bf4:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17bf6:	4b42      	ldr	r3, [pc, #264]	; (17d00 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   17bf8:	2201      	movs	r2, #1
   17bfa:	9302      	str	r3, [sp, #8]
   17bfc:	2300      	movs	r3, #0
   17bfe:	493f      	ldr	r1, [pc, #252]	; (17cfc <compute_and_check_and_send_periph_dhcheck+0x198>)
   17c00:	4618      	mov	r0, r3
   17c02:	e9cd 3300 	strd	r3, r3, [sp]
   17c06:	f00f fe1b 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17c0a:	2008      	movs	r0, #8
}
   17c0c:	b010      	add	sp, #64	; 0x40
   17c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   17c12:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   17c16:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   17c18:	f103 0297 	add.w	r2, r3, #151	; 0x97
   17c1c:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   17c1e:	9301      	str	r3, [sp, #4]
   17c20:	f104 0311 	add.w	r3, r4, #17
   17c24:	9202      	str	r2, [sp, #8]
   17c26:	9300      	str	r3, [sp, #0]
   17c28:	4642      	mov	r2, r8
   17c2a:	462b      	mov	r3, r5
   17c2c:	4649      	mov	r1, r9
   17c2e:	4638      	mov	r0, r7
   17c30:	9603      	str	r6, [sp, #12]
   17c32:	f010 f8cb 	bl	27dcc <bt_crypto_f6>
   17c36:	b130      	cbz	r0, 17c46 <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   17c38:	4b32      	ldr	r3, [pc, #200]	; (17d04 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   17c3a:	f8cd a000 	str.w	sl, [sp]
   17c3e:	e9cd a301 	strd	sl, r3, [sp, #4]
   17c42:	4653      	mov	r3, sl
   17c44:	e7c0      	b.n	17bc8 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   17c46:	7a23      	ldrb	r3, [r4, #8]
   17c48:	2b05      	cmp	r3, #5
   17c4a:	d10e      	bne.n	17c6a <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   17c4c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   17c50:	b311      	cbz	r1, 17c98 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   17c52:	460b      	mov	r3, r1
   17c54:	46ac      	mov	ip, r5
   17c56:	f101 0e10 	add.w	lr, r1, #16
   17c5a:	4662      	mov	r2, ip
   17c5c:	6818      	ldr	r0, [r3, #0]
   17c5e:	6859      	ldr	r1, [r3, #4]
   17c60:	3308      	adds	r3, #8
   17c62:	c203      	stmia	r2!, {r0, r1}
   17c64:	4573      	cmp	r3, lr
   17c66:	4694      	mov	ip, r2
   17c68:	d1f7      	bne.n	17c5a <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   17c6a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   17c6e:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   17c72:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   17c76:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   17c78:	9301      	str	r3, [sp, #4]
   17c7a:	f104 030a 	add.w	r3, r4, #10
   17c7e:	9202      	str	r2, [sp, #8]
   17c80:	9300      	str	r3, [sp, #0]
   17c82:	464a      	mov	r2, r9
   17c84:	462b      	mov	r3, r5
   17c86:	4641      	mov	r1, r8
   17c88:	4638      	mov	r0, r7
   17c8a:	f8cd a00c 	str.w	sl, [sp, #12]
   17c8e:	f010 f89d 	bl	27dcc <bt_crypto_f6>
   17c92:	b130      	cbz	r0, 17ca2 <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   17c94:	4b1c      	ldr	r3, [pc, #112]	; (17d08 <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   17c96:	e793      	b.n	17bc0 <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   17c98:	2210      	movs	r2, #16
   17c9a:	4628      	mov	r0, r5
   17c9c:	f011 febb 	bl	29a16 <memset>
   17ca0:	e7e3      	b.n	17c6a <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   17ca2:	2210      	movs	r2, #16
   17ca4:	4651      	mov	r1, sl
   17ca6:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   17caa:	f011 fe6a 	bl	29982 <memcmp>
   17cae:	bb00      	cbnz	r0, 17cf2 <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   17cb0:	210d      	movs	r1, #13
   17cb2:	4620      	mov	r0, r4
   17cb4:	f00f fde3 	bl	2787e <smp_create_pdu.constprop.0>
	if (!buf) {
   17cb8:	4607      	mov	r7, r0
   17cba:	2800      	cmp	r0, #0
   17cbc:	d0a5      	beq.n	17c0a <compute_and_check_and_send_periph_dhcheck+0xa6>
   17cbe:	2110      	movs	r1, #16
   17cc0:	300c      	adds	r0, #12
   17cc2:	f001 fd01 	bl	196c8 <net_buf_simple_add>
   17cc6:	4632      	mov	r2, r6
   17cc8:	4603      	mov	r3, r0
   17cca:	4616      	mov	r6, r2
   17ccc:	ce03      	ldmia	r6!, {r0, r1}
   17cce:	42ae      	cmp	r6, r5
   17cd0:	6018      	str	r0, [r3, #0]
   17cd2:	6059      	str	r1, [r3, #4]
   17cd4:	4632      	mov	r2, r6
   17cd6:	f103 0308 	add.w	r3, r3, #8
   17cda:	d1f6      	bne.n	17cca <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   17cdc:	2200      	movs	r2, #0
   17cde:	4639      	mov	r1, r7
   17ce0:	4620      	mov	r0, r4
   17ce2:	f00f fd90 	bl	27806 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17ce6:	1d20      	adds	r0, r4, #4
   17ce8:	2101      	movs	r1, #1
   17cea:	f00f fdb8 	bl	2785e <atomic_set_bit>
	return 0;
   17cee:	2000      	movs	r0, #0
   17cf0:	e78c      	b.n	17c0c <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   17cf2:	200b      	movs	r0, #11
   17cf4:	e78a      	b.n	17c0c <compute_and_check_and_send_periph_dhcheck+0xa8>
   17cf6:	bf00      	nop
   17cf8:	0002f10c 	.word	0x0002f10c
   17cfc:	0002a9d0 	.word	0x0002a9d0
   17d00:	0002f087 	.word	0x0002f087
   17d04:	0002f121 	.word	0x0002f121
   17d08:	0002f144 	.word	0x0002f144

00017d0c <bt_smp_connected>:
{
   17d0c:	b538      	push	{r3, r4, r5, lr}
   17d0e:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   17d10:	4908      	ldr	r1, [pc, #32]	; (17d34 <bt_smp_connected+0x28>)
   17d12:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   17d16:	3094      	adds	r0, #148	; 0x94
   17d18:	f008 fd96 	bl	20848 <k_work_init_delayable>
	smp_reset(smp);
   17d1c:	4628      	mov	r0, r5
   17d1e:	f00f fe47 	bl	279b0 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17d22:	4b05      	ldr	r3, [pc, #20]	; (17d38 <bt_smp_connected+0x2c>)
   17d24:	34c4      	adds	r4, #196	; 0xc4
   17d26:	e8d4 2fef 	ldaex	r2, [r4]
   17d2a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   17d2e:	2900      	cmp	r1, #0
   17d30:	d1f9      	bne.n	17d26 <bt_smp_connected+0x1a>
}
   17d32:	bd38      	pop	{r3, r4, r5, pc}
   17d34:	000189b9 	.word	0x000189b9
   17d38:	20009a20 	.word	0x20009a20

00017d3c <smp_pairing_confirm>:
{
   17d3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   17d3e:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   17d40:	68cd      	ldr	r5, [r1, #12]
{
   17d42:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   17d44:	210b      	movs	r1, #11
   17d46:	4630      	mov	r0, r6
   17d48:	f00f fd49 	bl	277de <atomic_clear_bit>
   17d4c:	462b      	mov	r3, r5
   17d4e:	f104 0217 	add.w	r2, r4, #23
   17d52:	f105 0110 	add.w	r1, r5, #16
   17d56:	f853 0b04 	ldr.w	r0, [r3], #4
   17d5a:	428b      	cmp	r3, r1
   17d5c:	f842 0b04 	str.w	r0, [r2], #4
   17d60:	d1f9      	bne.n	17d56 <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17d62:	2105      	movs	r1, #5
   17d64:	4630      	mov	r0, r6
   17d66:	f00f fd13 	bl	27790 <atomic_test_bit>
   17d6a:	b928      	cbnz	r0, 17d78 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   17d6c:	4620      	mov	r0, r4
}
   17d6e:	b004      	add	sp, #16
   17d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   17d74:	f00f be92 	b.w	27a9c <legacy_pairing_confirm>
	switch (smp->method) {
   17d78:	7a23      	ldrb	r3, [r4, #8]
   17d7a:	2b01      	cmp	r3, #1
   17d7c:	d00a      	beq.n	17d94 <smp_pairing_confirm+0x58>
   17d7e:	2b02      	cmp	r3, #2
   17d80:	d115      	bne.n	17dae <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17d82:	2104      	movs	r1, #4
   17d84:	4620      	mov	r0, r4
   17d86:	f00f fd6a 	bl	2785e <atomic_set_bit>
}
   17d8a:	b004      	add	sp, #16
   17d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   17d90:	f7ff bbca 	b.w	17528 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   17d94:	210a      	movs	r1, #10
   17d96:	4630      	mov	r0, r6
   17d98:	f00f fcfa 	bl	27790 <atomic_test_bit>
   17d9c:	2800      	cmp	r0, #0
   17d9e:	d0f0      	beq.n	17d82 <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   17da0:	4630      	mov	r0, r6
   17da2:	2100      	movs	r1, #0
   17da4:	f00f fd5b 	bl	2785e <atomic_set_bit>
			return 0;
   17da8:	2000      	movs	r0, #0
}
   17daa:	b004      	add	sp, #16
   17dac:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   17dae:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17db0:	4b05      	ldr	r3, [pc, #20]	; (17dc8 <smp_pairing_confirm+0x8c>)
   17db2:	2201      	movs	r2, #1
   17db4:	9302      	str	r3, [sp, #8]
   17db6:	2300      	movs	r3, #0
   17db8:	4904      	ldr	r1, [pc, #16]	; (17dcc <smp_pairing_confirm+0x90>)
   17dba:	4618      	mov	r0, r3
   17dbc:	e9cd 3300 	strd	r3, r3, [sp]
   17dc0:	f00f fd3e 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17dc4:	2008      	movs	r0, #8
   17dc6:	e7f0      	b.n	17daa <smp_pairing_confirm+0x6e>
   17dc8:	0002f087 	.word	0x0002f087
   17dcc:	0002a9d0 	.word	0x0002a9d0

00017dd0 <smp_pairing_random>:
{
   17dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17dd4:	4604      	mov	r4, r0
   17dd6:	b089      	sub	sp, #36	; 0x24
   17dd8:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17dda:	f7ff fa57 	bl	1728c <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   17dde:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17de2:	4605      	mov	r5, r0
   17de4:	464a      	mov	r2, r9
   17de6:	68f3      	ldr	r3, [r6, #12]
   17de8:	f103 0110 	add.w	r1, r3, #16
   17dec:	f853 0b04 	ldr.w	r0, [r3], #4
   17df0:	428b      	cmp	r3, r1
   17df2:	f842 0b04 	str.w	r0, [r2], #4
   17df6:	d1f9      	bne.n	17dec <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17df8:	1d27      	adds	r7, r4, #4
   17dfa:	2105      	movs	r1, #5
   17dfc:	4638      	mov	r0, r7
   17dfe:	f00f fcc7 	bl	27790 <atomic_test_bit>
   17e02:	2800      	cmp	r0, #0
   17e04:	d14f      	bne.n	17ea6 <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   17e06:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17e0a:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   17e0e:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17e12:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   17e14:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17e16:	9201      	str	r2, [sp, #4]
   17e18:	9300      	str	r3, [sp, #0]
   17e1a:	4649      	mov	r1, r9
   17e1c:	4630      	mov	r0, r6
   17e1e:	9502      	str	r5, [sp, #8]
   17e20:	f104 0310 	add.w	r3, r4, #16
   17e24:	f104 0209 	add.w	r2, r4, #9
   17e28:	f00f fddd 	bl	279e6 <smp_c1>
	if (err) {
   17e2c:	bb20      	cbnz	r0, 17e78 <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   17e2e:	2210      	movs	r2, #16
   17e30:	4629      	mov	r1, r5
   17e32:	f104 0017 	add.w	r0, r4, #23
   17e36:	f011 fda4 	bl	29982 <memcmp>
   17e3a:	4680      	mov	r8, r0
   17e3c:	2800      	cmp	r0, #0
   17e3e:	d177      	bne.n	17f30 <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   17e40:	462b      	mov	r3, r5
   17e42:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   17e46:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   17e4a:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   17e4c:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   17e4e:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   17e52:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   17e56:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   17e58:	4629      	mov	r1, r5
   17e5a:	4630      	mov	r0, r6
   17e5c:	f00e fc4e 	bl	266fc <bt_encrypt_le>
		if (err) {
   17e60:	b170      	cbz	r0, 17e80 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   17e62:	4b62      	ldr	r3, [pc, #392]	; (17fec <smp_pairing_random+0x21c>)
   17e64:	f8cd 8000 	str.w	r8, [sp]
   17e68:	e9cd 8301 	strd	r8, r3, [sp, #4]
   17e6c:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   17e6e:	2201      	movs	r2, #1
   17e70:	4618      	mov	r0, r3
   17e72:	495f      	ldr	r1, [pc, #380]	; (17ff0 <smp_pairing_random+0x220>)
   17e74:	f00f fce4 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17e78:	2008      	movs	r0, #8
}
   17e7a:	b009      	add	sp, #36	; 0x24
   17e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17e80:	4633      	mov	r3, r6
   17e82:	ae08      	add	r6, sp, #32
   17e84:	462a      	mov	r2, r5
   17e86:	ca03      	ldmia	r2!, {r0, r1}
   17e88:	42b2      	cmp	r2, r6
   17e8a:	6018      	str	r0, [r3, #0]
   17e8c:	6059      	str	r1, [r3, #4]
   17e8e:	4615      	mov	r5, r2
   17e90:	f103 0308 	add.w	r3, r3, #8
   17e94:	d1f6      	bne.n	17e84 <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17e96:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17e98:	4638      	mov	r0, r7
   17e9a:	f00f fce0 	bl	2785e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   17e9e:	4620      	mov	r0, r4
   17ea0:	f00f fd26 	bl	278f0 <smp_send_pairing_random>
   17ea4:	e7e9      	b.n	17e7a <smp_pairing_random+0xaa>
	switch (smp->method) {
   17ea6:	7a23      	ldrb	r3, [r4, #8]
   17ea8:	2b05      	cmp	r3, #5
   17eaa:	f200 8091 	bhi.w	17fd0 <smp_pairing_random+0x200>
   17eae:	e8df f003 	tbb	[pc, r3]
   17eb2:	1f19      	.short	0x1f19
   17eb4:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   17eb8:	ab04      	add	r3, sp, #16
   17eba:	494e      	ldr	r1, [pc, #312]	; (17ff4 <smp_pairing_random+0x224>)
   17ebc:	9300      	str	r3, [sp, #0]
   17ebe:	464a      	mov	r2, r9
   17ec0:	6809      	ldr	r1, [r1, #0]
   17ec2:	f104 0327 	add.w	r3, r4, #39	; 0x27
   17ec6:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17eca:	f001 f865 	bl	18f98 <bt_crypto_g2>
   17ece:	2800      	cmp	r0, #0
   17ed0:	d1d2      	bne.n	17e78 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17ed2:	210a      	movs	r1, #10
   17ed4:	4638      	mov	r0, r7
   17ed6:	f00f fcc2 	bl	2785e <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   17eda:	68ab      	ldr	r3, [r5, #8]
   17edc:	9904      	ldr	r1, [sp, #16]
   17ede:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17ee2:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   17ee4:	210d      	movs	r1, #13
   17ee6:	4620      	mov	r0, r4
   17ee8:	f00f fcb9 	bl	2785e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17eec:	2110      	movs	r1, #16
   17eee:	e7d3      	b.n	17e98 <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17ef0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   17ef4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17ef8:	493e      	ldr	r1, [pc, #248]	; (17ff4 <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17efa:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17efc:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17efe:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17f02:	9500      	str	r5, [sp, #0]
   17f04:	464a      	mov	r2, r9
   17f06:	6809      	ldr	r1, [r1, #0]
   17f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17f0c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17f10:	f00f ff37 	bl	27d82 <bt_crypto_f4>
   17f14:	b128      	cbz	r0, 17f22 <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   17f16:	4b38      	ldr	r3, [pc, #224]	; (17ff8 <smp_pairing_random+0x228>)
   17f18:	9302      	str	r3, [sp, #8]
   17f1a:	2300      	movs	r3, #0
   17f1c:	e9cd 3300 	strd	r3, r3, [sp]
   17f20:	e7a5      	b.n	17e6e <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   17f22:	2210      	movs	r2, #16
   17f24:	4629      	mov	r1, r5
   17f26:	f104 0017 	add.w	r0, r4, #23
   17f2a:	f011 fd2a 	bl	29982 <memcmp>
   17f2e:	b108      	cbz	r0, 17f34 <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   17f30:	2004      	movs	r0, #4
   17f32:	e7a2      	b.n	17e7a <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   17f34:	2103      	movs	r1, #3
   17f36:	4620      	mov	r0, r4
   17f38:	f00f fc91 	bl	2785e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   17f3c:	f00f fcd8 	bl	278f0 <smp_send_pairing_random>
		if (err) {
   17f40:	2800      	cmp	r0, #0
   17f42:	d19a      	bne.n	17e7a <smp_pairing_random+0xaa>
		smp->passkey_round++;
   17f44:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17f48:	3301      	adds	r3, #1
   17f4a:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   17f4c:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   17f4e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   17f52:	d109      	bne.n	17f68 <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   17f54:	210d      	movs	r1, #13
   17f56:	4620      	mov	r0, r4
   17f58:	f00f fc81 	bl	2785e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17f5c:	2110      	movs	r1, #16
   17f5e:	4638      	mov	r0, r7
   17f60:	f00f fc7d 	bl	2785e <atomic_set_bit>
			return 0;
   17f64:	2000      	movs	r0, #0
   17f66:	e788      	b.n	17e7a <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   17f68:	2110      	movs	r1, #16
   17f6a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17f6e:	f7fb fd05 	bl	1397c <bt_rand>
   17f72:	3800      	subs	r0, #0
   17f74:	bf18      	it	ne
   17f76:	2001      	movne	r0, #1
   17f78:	00c0      	lsls	r0, r0, #3
   17f7a:	e77e      	b.n	17e7a <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   17f7c:	2110      	movs	r1, #16
   17f7e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17f82:	f7fb fcfb 	bl	1397c <bt_rand>
   17f86:	2800      	cmp	r0, #0
   17f88:	f47f af76 	bne.w	17e78 <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   17f8c:	b365      	cbz	r5, 17fe8 <smp_pairing_random+0x218>
   17f8e:	68eb      	ldr	r3, [r5, #12]
   17f90:	b353      	cbz	r3, 17fe8 <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   17f92:	4b1a      	ldr	r3, [pc, #104]	; (17ffc <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17f94:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   17f96:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   17f98:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   17f9a:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17f9e:	7ca3      	ldrb	r3, [r4, #18]
   17fa0:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   17fa4:	d412      	bmi.n	17fcc <smp_pairing_random+0x1fc>
   17fa6:	2b00      	cmp	r3, #0
   17fa8:	bf14      	ite	ne
   17faa:	2301      	movne	r3, #1
   17fac:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   17fae:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   17fb2:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   17fb4:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   17fb6:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   17fba:	210c      	movs	r1, #12
   17fbc:	f00f fc4f 	bl	2785e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   17fc0:	68eb      	ldr	r3, [r5, #12]
   17fc2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17fc6:	a904      	add	r1, sp, #16
   17fc8:	4798      	blx	r3
			return 0;
   17fca:	e7cb      	b.n	17f64 <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   17fcc:	005b      	lsls	r3, r3, #1
   17fce:	e7ee      	b.n	17fae <smp_pairing_random+0x1de>
	switch (smp->method) {
   17fd0:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17fd2:	4b0b      	ldr	r3, [pc, #44]	; (18000 <smp_pairing_random+0x230>)
   17fd4:	2201      	movs	r2, #1
   17fd6:	9302      	str	r3, [sp, #8]
   17fd8:	2300      	movs	r3, #0
   17fda:	4905      	ldr	r1, [pc, #20]	; (17ff0 <smp_pairing_random+0x220>)
   17fdc:	4618      	mov	r0, r3
   17fde:	e9cd 3300 	strd	r3, r3, [sp]
   17fe2:	f00f fc2d 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17fe6:	e747      	b.n	17e78 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   17fe8:	2002      	movs	r0, #2
   17fea:	e746      	b.n	17e7a <smp_pairing_random+0xaa>
   17fec:	0002f168 	.word	0x0002f168
   17ff0:	0002a9d0 	.word	0x0002a9d0
   17ff4:	200211b4 	.word	0x200211b4
   17ff8:	0002f17d 	.word	0x0002f17d
   17ffc:	0002ab26 	.word	0x0002ab26
   18000:	0002f087 	.word	0x0002f087

00018004 <bt_smp_start_security>:
{
   18004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   18008:	78c6      	ldrb	r6, [r0, #3]
{
   1800a:	4604      	mov	r4, r0
	switch (conn->role) {
   1800c:	2e01      	cmp	r6, #1
   1800e:	d005      	beq.n	1801c <bt_smp_start_security+0x18>
		return -EINVAL;
   18010:	f06f 0415 	mvn.w	r4, #21
}
   18014:	4620      	mov	r0, r4
   18016:	b003      	add	sp, #12
   18018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1801c:	f7ff f9b4 	bl	17388 <smp_chan_get>
	if (!smp) {
   18020:	4605      	mov	r5, r0
   18022:	2800      	cmp	r0, #0
   18024:	f000 80ac 	beq.w	18180 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18028:	1d07      	adds	r7, r0, #4
   1802a:	2104      	movs	r1, #4
   1802c:	4638      	mov	r0, r7
   1802e:	f00f fbaf 	bl	27790 <atomic_test_bit>
   18032:	2800      	cmp	r0, #0
   18034:	f040 80a7 	bne.w	18186 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18038:	2103      	movs	r1, #3
   1803a:	4638      	mov	r0, r7
   1803c:	f00f fba8 	bl	27790 <atomic_test_bit>
   18040:	b110      	cbz	r0, 18048 <bt_smp_start_security+0x44>
		return -EBUSY;
   18042:	f06f 040f 	mvn.w	r4, #15
   18046:	e7e5      	b.n	18014 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18048:	4631      	mov	r1, r6
   1804a:	4638      	mov	r0, r7
   1804c:	f00f fba0 	bl	27790 <atomic_test_bit>
   18050:	2800      	cmp	r0, #0
   18052:	d1f6      	bne.n	18042 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18054:	4628      	mov	r0, r5
   18056:	f7ff f919 	bl	1728c <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1805a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1805e:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   18060:	7a9b      	ldrb	r3, [r3, #10]
   18062:	2b03      	cmp	r3, #3
   18064:	d042      	beq.n	180ec <bt_smp_start_security+0xe8>
   18066:	d832      	bhi.n	180ce <bt_smp_start_security+0xca>
   18068:	3b01      	subs	r3, #1
   1806a:	2b01      	cmp	r3, #1
   1806c:	d948      	bls.n	18100 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1806e:	210b      	movs	r1, #11
   18070:	1d20      	adds	r0, r4, #4
   18072:	f00f fb8d 	bl	27790 <atomic_test_bit>
   18076:	2800      	cmp	r0, #0
   18078:	d1ca      	bne.n	18010 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1807a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1807e:	b983      	cbnz	r3, 180a2 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   18080:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   18084:	4632      	mov	r2, r6
   18086:	2020      	movs	r0, #32
   18088:	7a21      	ldrb	r1, [r4, #8]
   1808a:	f000 fde9 	bl	18c60 <bt_keys_find>
   1808e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   18092:	b930      	cbnz	r0, 180a2 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   18094:	4632      	mov	r2, r6
   18096:	2004      	movs	r0, #4
   18098:	7a21      	ldrb	r1, [r4, #8]
   1809a:	f000 fde1 	bl	18c60 <bt_keys_find>
   1809e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   180a2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   180a6:	2b00      	cmp	r3, #0
   180a8:	d0b2      	beq.n	18010 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   180aa:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   180ac:	f012 0f24 	tst.w	r2, #36	; 0x24
   180b0:	d0ae      	beq.n	18010 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   180b2:	7aa1      	ldrb	r1, [r4, #10]
   180b4:	2902      	cmp	r1, #2
   180b6:	d923      	bls.n	18100 <bt_smp_start_security+0xfc>
   180b8:	7b58      	ldrb	r0, [r3, #13]
   180ba:	07c0      	lsls	r0, r0, #31
   180bc:	d5a8      	bpl.n	18010 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   180be:	2903      	cmp	r1, #3
   180c0:	d01e      	beq.n	18100 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   180c2:	0692      	lsls	r2, r2, #26
   180c4:	d5a4      	bpl.n	18010 <bt_smp_start_security+0xc>
   180c6:	7b1b      	ldrb	r3, [r3, #12]
   180c8:	2b10      	cmp	r3, #16
   180ca:	d1a1      	bne.n	18010 <bt_smp_start_security+0xc>
   180cc:	e018      	b.n	18100 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   180ce:	2b04      	cmp	r3, #4
   180d0:	d1cd      	bne.n	1806e <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   180d2:	4628      	mov	r0, r5
   180d4:	f7ff f8f0 	bl	172b8 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   180d8:	2803      	cmp	r0, #3
   180da:	d104      	bne.n	180e6 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   180dc:	2e00      	cmp	r6, #0
   180de:	d0c6      	beq.n	1806e <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   180e0:	68f3      	ldr	r3, [r6, #12]
   180e2:	2b00      	cmp	r3, #0
   180e4:	d0c3      	beq.n	1806e <bt_smp_start_security+0x6a>
   180e6:	4b29      	ldr	r3, [pc, #164]	; (1818c <bt_smp_start_security+0x188>)
   180e8:	781b      	ldrb	r3, [r3, #0]
   180ea:	e007      	b.n	180fc <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   180ec:	4628      	mov	r0, r5
   180ee:	f7ff f8e3 	bl	172b8 <get_io_capa>
   180f2:	2803      	cmp	r0, #3
   180f4:	d104      	bne.n	18100 <bt_smp_start_security+0xfc>
   180f6:	2e00      	cmp	r6, #0
   180f8:	d0b9      	beq.n	1806e <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   180fa:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   180fc:	2b00      	cmp	r3, #0
   180fe:	d0b6      	beq.n	1806e <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   18100:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18104:	b13b      	cbz	r3, 18116 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   18106:	4628      	mov	r0, r5
   18108:	f7ff f958 	bl	173bc <smp_init>
   1810c:	4680      	mov	r8, r0
   1810e:	b170      	cbz	r0, 1812e <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   18110:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18114:	e77e      	b.n	18014 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18116:	7a20      	ldrb	r0, [r4, #8]
   18118:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1811c:	f000 fd48 	bl	18bb0 <bt_keys_get_addr>
   18120:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   18124:	2800      	cmp	r0, #0
   18126:	d1ee      	bne.n	18106 <bt_smp_start_security+0x102>
			return -ENOMEM;
   18128:	f06f 040b 	mvn.w	r4, #11
   1812c:	e772      	b.n	18014 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1812e:	210b      	movs	r1, #11
   18130:	4628      	mov	r0, r5
   18132:	f00f fba4 	bl	2787e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18136:	4606      	mov	r6, r0
   18138:	2800      	cmp	r0, #0
   1813a:	d0e9      	beq.n	18110 <bt_smp_start_security+0x10c>
   1813c:	2101      	movs	r1, #1
   1813e:	300c      	adds	r0, #12
   18140:	f001 fac2 	bl	196c8 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   18144:	2109      	movs	r1, #9
   18146:	4681      	mov	r9, r0
   18148:	4628      	mov	r0, r5
   1814a:	f7ff f8db 	bl	17304 <get_auth>
   1814e:	4643      	mov	r3, r8
   18150:	f889 0000 	strb.w	r0, [r9]
   18154:	4632      	mov	r2, r6
   18156:	4620      	mov	r0, r4
   18158:	2106      	movs	r1, #6
   1815a:	f8cd 8000 	str.w	r8, [sp]
   1815e:	f00e fc6a 	bl	26a36 <bt_l2cap_send_cb>
	if (err) {
   18162:	4604      	mov	r4, r0
   18164:	b118      	cbz	r0, 1816e <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   18166:	4630      	mov	r0, r6
   18168:	f001 f98c 	bl	19484 <net_buf_unref>
		return err;
   1816c:	e752      	b.n	18014 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1816e:	4638      	mov	r0, r7
   18170:	210f      	movs	r1, #15
   18172:	f00f fb74 	bl	2785e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   18176:	2101      	movs	r1, #1
   18178:	4628      	mov	r0, r5
   1817a:	f00f fb70 	bl	2785e <atomic_set_bit>
	return 0;
   1817e:	e749      	b.n	18014 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   18180:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   18184:	e746      	b.n	18014 <bt_smp_start_security+0x10>
		return -EIO;
   18186:	f06f 0404 	mvn.w	r4, #4
   1818a:	e743      	b.n	18014 <bt_smp_start_security+0x10>
   1818c:	20022043 	.word	0x20022043

00018190 <smp_pairing_complete>:
{
   18190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18192:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18194:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18198:	1d04      	adds	r4, r0, #4
	if (!status) {
   1819a:	bb39      	cbnz	r1, 181ec <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1819c:	210d      	movs	r1, #13
   1819e:	4620      	mov	r0, r4
   181a0:	f00f faf6 	bl	27790 <atomic_test_bit>
	return list->head;
   181a4:	4b36      	ldr	r3, [pc, #216]	; (18280 <smp_pairing_complete+0xf0>)
   181a6:	4607      	mov	r7, r0
   181a8:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   181aa:	b19b      	cbz	r3, 181d4 <smp_pairing_complete+0x44>
	return node->next;
   181ac:	681c      	ldr	r4, [r3, #0]
   181ae:	b104      	cbz	r4, 181b2 <smp_pairing_complete+0x22>
   181b0:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   181b2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   181b6:	b113      	cbz	r3, 181be <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   181b8:	4639      	mov	r1, r7
   181ba:	4628      	mov	r0, r5
   181bc:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   181be:	b14c      	cbz	r4, 181d4 <smp_pairing_complete+0x44>
   181c0:	4623      	mov	r3, r4
   181c2:	68e4      	ldr	r4, [r4, #12]
   181c4:	681b      	ldr	r3, [r3, #0]
   181c6:	b11c      	cbz	r4, 181d0 <smp_pairing_complete+0x40>
   181c8:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   181ca:	2b00      	cmp	r3, #0
   181cc:	d1f4      	bne.n	181b8 <smp_pairing_complete+0x28>
   181ce:	e7f7      	b.n	181c0 <smp_pairing_complete+0x30>
   181d0:	2b00      	cmp	r3, #0
   181d2:	d1f1      	bne.n	181b8 <smp_pairing_complete+0x28>
	smp_reset(smp);
   181d4:	4630      	mov	r0, r6
   181d6:	f00f fbeb 	bl	279b0 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   181da:	7a6a      	ldrb	r2, [r5, #9]
   181dc:	7aab      	ldrb	r3, [r5, #10]
   181de:	429a      	cmp	r2, r3
   181e0:	d04d      	beq.n	1827e <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   181e2:	4628      	mov	r0, r5
}
   181e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   181e8:	f7ff bf0c 	b.w	18004 <bt_smp_start_security>
	switch (smp_err) {
   181ec:	3901      	subs	r1, #1
   181ee:	b2c9      	uxtb	r1, r1
   181f0:	290e      	cmp	r1, #14
   181f2:	bf96      	itet	ls
   181f4:	4b23      	ldrls	r3, [pc, #140]	; (18284 <smp_pairing_complete+0xf4>)
	if (!status) {
   181f6:	2709      	movhi	r7, #9
   181f8:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   181fa:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   181fe:	b143      	cbz	r3, 18212 <smp_pairing_complete+0x82>
   18200:	7b1b      	ldrb	r3, [r3, #12]
   18202:	bb33      	cbnz	r3, 18252 <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   18204:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   18208:	f000 fe10 	bl	18e2c <bt_keys_clear>
			conn->le.keys = NULL;
   1820c:	2300      	movs	r3, #0
   1820e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   18212:	2102      	movs	r1, #2
   18214:	4620      	mov	r0, r4
   18216:	f00f fabb 	bl	27790 <atomic_test_bit>
   1821a:	b948      	cbnz	r0, 18230 <smp_pairing_complete+0xa0>
	switch (err) {
   1821c:	2f07      	cmp	r7, #7
   1821e:	bf94      	ite	ls
   18220:	4b19      	ldrls	r3, [pc, #100]	; (18288 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   18222:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   18224:	463a      	mov	r2, r7
   18226:	4628      	mov	r0, r5
   18228:	bf98      	it	ls
   1822a:	5dd9      	ldrbls	r1, [r3, r7]
   1822c:	f7fc fa80 	bl	14730 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18230:	2103      	movs	r1, #3
   18232:	4620      	mov	r0, r4
   18234:	f00f faac 	bl	27790 <atomic_test_bit>
   18238:	2800      	cmp	r0, #0
   1823a:	d0cb      	beq.n	181d4 <smp_pairing_complete+0x44>
	return list->head;
   1823c:	4b10      	ldr	r3, [pc, #64]	; (18280 <smp_pairing_complete+0xf0>)
   1823e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   18240:	2b00      	cmp	r3, #0
   18242:	d0c7      	beq.n	181d4 <smp_pairing_complete+0x44>
	return node->next;
   18244:	681c      	ldr	r4, [r3, #0]
   18246:	b104      	cbz	r4, 1824a <smp_pairing_complete+0xba>
   18248:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1824a:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1824e:	b94b      	cbnz	r3, 18264 <smp_pairing_complete+0xd4>
   18250:	e00b      	b.n	1826a <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   18252:	2102      	movs	r1, #2
   18254:	4620      	mov	r0, r4
   18256:	f00f fa9b 	bl	27790 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1825a:	2800      	cmp	r0, #0
   1825c:	d1d2      	bne.n	18204 <smp_pairing_complete+0x74>
   1825e:	e7d8      	b.n	18212 <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   18260:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   18262:	b123      	cbz	r3, 1826e <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   18264:	4639      	mov	r1, r7
   18266:	4628      	mov	r0, r5
   18268:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1826a:	2c00      	cmp	r4, #0
   1826c:	d0b2      	beq.n	181d4 <smp_pairing_complete+0x44>
   1826e:	4623      	mov	r3, r4
   18270:	68e4      	ldr	r4, [r4, #12]
   18272:	685b      	ldr	r3, [r3, #4]
   18274:	2c00      	cmp	r4, #0
   18276:	d1f3      	bne.n	18260 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   18278:	2b00      	cmp	r3, #0
   1827a:	d1f3      	bne.n	18264 <smp_pairing_complete+0xd4>
   1827c:	e7aa      	b.n	181d4 <smp_pairing_complete+0x44>
}
   1827e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18280:	20021084 	.word	0x20021084
   18284:	0002f437 	.word	0x0002f437
   18288:	0002f426 	.word	0x0002f426

0001828c <smp_error>:
{
   1828c:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1828e:	1d03      	adds	r3, r0, #4
{
   18290:	4606      	mov	r6, r0
   18292:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   18294:	4618      	mov	r0, r3
   18296:	2102      	movs	r1, #2
{
   18298:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1829a:	f00f fa79 	bl	27790 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1829e:	4604      	mov	r4, r0
   182a0:	b120      	cbz	r0, 182ac <smp_error+0x20>
   182a2:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   182a6:	fab4 f484 	clz	r4, r4
   182aa:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   182ac:	2103      	movs	r1, #3
   182ae:	4618      	mov	r0, r3
   182b0:	f00f fa6e 	bl	27790 <atomic_test_bit>
   182b4:	b1b0      	cbz	r0, 182e4 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   182b6:	4639      	mov	r1, r7
   182b8:	4630      	mov	r0, r6
   182ba:	f7ff ff69 	bl	18190 <smp_pairing_complete>
	if (remote_already_completed) {
   182be:	b1f4      	cbz	r4, 182fe <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   182c0:	4b1d      	ldr	r3, [pc, #116]	; (18338 <smp_error+0xac>)
   182c2:	491e      	ldr	r1, [pc, #120]	; (1833c <smp_error+0xb0>)
   182c4:	9302      	str	r3, [sp, #8]
   182c6:	2300      	movs	r3, #0
   182c8:	2202      	movs	r2, #2
   182ca:	4618      	mov	r0, r3
   182cc:	e9cd 3300 	strd	r3, r3, [sp]
   182d0:	f00f fab6 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   182d4:	2105      	movs	r1, #5
   182d6:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   182da:	f00e fab6 	bl	2684a <bt_conn_disconnect>
		return 0;
   182de:	2000      	movs	r0, #0
}
   182e0:	b005      	add	sp, #20
   182e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   182e4:	2101      	movs	r1, #1
   182e6:	4618      	mov	r0, r3
   182e8:	f00f fa52 	bl	27790 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   182ec:	2800      	cmp	r0, #0
   182ee:	d1e2      	bne.n	182b6 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   182f0:	210f      	movs	r1, #15
   182f2:	4618      	mov	r0, r3
   182f4:	f00f fa4c 	bl	27790 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   182f8:	2800      	cmp	r0, #0
   182fa:	d1dc      	bne.n	182b6 <smp_error+0x2a>
   182fc:	e7df      	b.n	182be <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   182fe:	2105      	movs	r1, #5
   18300:	4630      	mov	r0, r6
   18302:	f00f fabc 	bl	2787e <smp_create_pdu.constprop.0>
	if (!buf) {
   18306:	4605      	mov	r5, r0
   18308:	b190      	cbz	r0, 18330 <smp_error+0xa4>
   1830a:	2101      	movs	r1, #1
   1830c:	300c      	adds	r0, #12
   1830e:	f001 f9db 	bl	196c8 <net_buf_simple_add>
	rsp->reason = reason;
   18312:	7007      	strb	r7, [r0, #0]
   18314:	9400      	str	r4, [sp, #0]
   18316:	4623      	mov	r3, r4
   18318:	462a      	mov	r2, r5
   1831a:	2106      	movs	r1, #6
   1831c:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   18320:	f00e fb89 	bl	26a36 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   18324:	2800      	cmp	r0, #0
   18326:	d0da      	beq.n	182de <smp_error+0x52>
		net_buf_unref(buf);
   18328:	4628      	mov	r0, r5
   1832a:	f001 f8ab 	bl	19484 <net_buf_unref>
   1832e:	e7d6      	b.n	182de <smp_error+0x52>
		return -ENOBUFS;
   18330:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18334:	e7d4      	b.n	182e0 <smp_error+0x54>
   18336:	bf00      	nop
   18338:	0002f196 	.word	0x0002f196
   1833c:	0002a9d0 	.word	0x0002a9d0

00018340 <bt_smp_recv>:
{
   18340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   18344:	8a0b      	ldrh	r3, [r1, #16]
{
   18346:	4604      	mov	r4, r0
   18348:	460e      	mov	r6, r1
   1834a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1834c:	b963      	cbnz	r3, 18368 <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   1834e:	4a3c      	ldr	r2, [pc, #240]	; (18440 <bt_smp_recv+0x100>)
   18350:	4618      	mov	r0, r3
   18352:	e9cd 3201 	strd	r3, r2, [sp, #4]
   18356:	493b      	ldr	r1, [pc, #236]	; (18444 <bt_smp_recv+0x104>)
   18358:	2201      	movs	r2, #1
   1835a:	9300      	str	r3, [sp, #0]
   1835c:	f00f fa70 	bl	27840 <z_log_msg_runtime_create.constprop.0>
}
   18360:	2000      	movs	r0, #0
   18362:	b006      	add	sp, #24
   18364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   18368:	2101      	movs	r1, #1
   1836a:	f106 000c 	add.w	r0, r6, #12
   1836e:	f001 f98d 	bl	1968c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18372:	2104      	movs	r1, #4
   18374:	4607      	mov	r7, r0
   18376:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   1837a:	f00f fa09 	bl	27790 <atomic_test_bit>
   1837e:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   18382:	7839      	ldrb	r1, [r7, #0]
   18384:	4604      	mov	r4, r0
   18386:	b158      	cbz	r0, 183a0 <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   18388:	4b2f      	ldr	r3, [pc, #188]	; (18448 <bt_smp_recv+0x108>)
   1838a:	2202      	movs	r2, #2
   1838c:	9302      	str	r3, [sp, #8]
   1838e:	2300      	movs	r3, #0
   18390:	4618      	mov	r0, r3
   18392:	e9cd 3300 	strd	r3, r3, [sp]
   18396:	9103      	str	r1, [sp, #12]
   18398:	492a      	ldr	r1, [pc, #168]	; (18444 <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1839a:	f00f fa51 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return 0;
   1839e:	e7df      	b.n	18360 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   183a0:	290e      	cmp	r1, #14
   183a2:	d908      	bls.n	183b6 <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   183a4:	4b29      	ldr	r3, [pc, #164]	; (1844c <bt_smp_recv+0x10c>)
   183a6:	9103      	str	r1, [sp, #12]
   183a8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   183ac:	2202      	movs	r2, #2
   183ae:	4603      	mov	r3, r0
   183b0:	4924      	ldr	r1, [pc, #144]	; (18444 <bt_smp_recv+0x104>)
   183b2:	9000      	str	r0, [sp, #0]
   183b4:	e7f1      	b.n	1839a <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   183b6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 18450 <bt_smp_recv+0x110>
   183ba:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   183be:	b96b      	cbnz	r3, 183dc <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   183c0:	4a24      	ldr	r2, [pc, #144]	; (18454 <bt_smp_recv+0x114>)
   183c2:	9103      	str	r1, [sp, #12]
   183c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   183c8:	491e      	ldr	r1, [pc, #120]	; (18444 <bt_smp_recv+0x104>)
   183ca:	2202      	movs	r2, #2
   183cc:	9300      	str	r3, [sp, #0]
   183ce:	f00f fa37 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   183d2:	2107      	movs	r1, #7
		smp_error(smp, err);
   183d4:	4628      	mov	r0, r5
   183d6:	f7ff ff59 	bl	1828c <smp_error>
   183da:	e7c1      	b.n	18360 <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   183dc:	4628      	mov	r0, r5
   183de:	f00f fad5 	bl	2798c <atomic_test_and_clear_bit>
   183e2:	783a      	ldrb	r2, [r7, #0]
   183e4:	4603      	mov	r3, r0
   183e6:	b968      	cbnz	r0, 18404 <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   183e8:	9203      	str	r2, [sp, #12]
   183ea:	4a1b      	ldr	r2, [pc, #108]	; (18458 <bt_smp_recv+0x118>)
   183ec:	4915      	ldr	r1, [pc, #84]	; (18444 <bt_smp_recv+0x104>)
   183ee:	e9cd 0201 	strd	r0, r2, [sp, #4]
   183f2:	9000      	str	r0, [sp, #0]
   183f4:	2202      	movs	r2, #2
   183f6:	f00f fa23 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   183fa:	783b      	ldrb	r3, [r7, #0]
   183fc:	2b05      	cmp	r3, #5
   183fe:	d0af      	beq.n	18360 <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   18400:	2108      	movs	r1, #8
   18402:	e7e7      	b.n	183d4 <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   18404:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   18408:	8a33      	ldrh	r3, [r6, #16]
   1840a:	7909      	ldrb	r1, [r1, #4]
   1840c:	4299      	cmp	r1, r3
   1840e:	d00d      	beq.n	1842c <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18410:	e9cd 3203 	strd	r3, r2, [sp, #12]
   18414:	4b11      	ldr	r3, [pc, #68]	; (1845c <bt_smp_recv+0x11c>)
   18416:	490b      	ldr	r1, [pc, #44]	; (18444 <bt_smp_recv+0x104>)
   18418:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1841c:	2201      	movs	r2, #1
   1841e:	4623      	mov	r3, r4
   18420:	4620      	mov	r0, r4
   18422:	9400      	str	r4, [sp, #0]
   18424:	f00f fa0c 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   18428:	210a      	movs	r1, #10
   1842a:	e7d3      	b.n	183d4 <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   1842c:	4631      	mov	r1, r6
   1842e:	4628      	mov	r0, r5
   18430:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   18434:	4798      	blx	r3
	if (err) {
   18436:	4601      	mov	r1, r0
   18438:	2800      	cmp	r0, #0
   1843a:	d091      	beq.n	18360 <bt_smp_recv+0x20>
   1843c:	e7ca      	b.n	183d4 <bt_smp_recv+0x94>
   1843e:	bf00      	nop
   18440:	0002f1ee 	.word	0x0002f1ee
   18444:	0002a9d0 	.word	0x0002a9d0
   18448:	0002f209 	.word	0x0002f209
   1844c:	0002f23a 	.word	0x0002f23a
   18450:	0002b504 	.word	0x0002b504
   18454:	0002f25c 	.word	0x0002f25c
   18458:	0002f276 	.word	0x0002f276
   1845c:	0002ed07 	.word	0x0002ed07

00018460 <bt_smp_pkey_ready>:
{
   18460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   18462:	4a10      	ldr	r2, [pc, #64]	; (184a4 <bt_smp_pkey_ready+0x44>)
{
   18464:	4603      	mov	r3, r0
	sc_public_key = pkey;
   18466:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   18468:	b948      	cbnz	r0, 1847e <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   1846a:	4a0f      	ldr	r2, [pc, #60]	; (184a8 <bt_smp_pkey_ready+0x48>)
   1846c:	490f      	ldr	r1, [pc, #60]	; (184ac <bt_smp_pkey_ready+0x4c>)
   1846e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   18472:	9000      	str	r0, [sp, #0]
   18474:	2202      	movs	r2, #2
   18476:	f00f f9e3 	bl	27840 <z_log_msg_runtime_create.constprop.0>
}
   1847a:	b004      	add	sp, #16
   1847c:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   1847e:	480c      	ldr	r0, [pc, #48]	; (184b0 <bt_smp_pkey_ready+0x50>)
   18480:	f007 fd5e 	bl	1ff40 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18484:	4b0b      	ldr	r3, [pc, #44]	; (184b4 <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   18486:	1f1c      	subs	r4, r3, #4
   18488:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1848c:	065b      	lsls	r3, r3, #25
   1848e:	d5f4      	bpl.n	1847a <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   18490:	4620      	mov	r0, r4
   18492:	f7ff f897 	bl	175c4 <smp_public_key_periph>
		if (err) {
   18496:	4601      	mov	r1, r0
   18498:	2800      	cmp	r0, #0
   1849a:	d0ee      	beq.n	1847a <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   1849c:	4620      	mov	r0, r4
   1849e:	f7ff fef5 	bl	1828c <smp_error>
   184a2:	e7ea      	b.n	1847a <bt_smp_pkey_ready+0x1a>
   184a4:	200211b4 	.word	0x200211b4
   184a8:	0002f291 	.word	0x0002f291
   184ac:	0002a9d0 	.word	0x0002a9d0
   184b0:	20008b48 	.word	0x20008b48
   184b4:	20009a24 	.word	0x20009a24

000184b8 <smp_ident_addr_info>:
{
   184b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   184bc:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   184c0:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   184c2:	f023 0302 	bic.w	r3, r3, #2
   184c6:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   184ca:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   184ce:	783b      	ldrb	r3, [r7, #0]
{
   184d0:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   184d2:	f106 0890 	add.w	r8, r6, #144	; 0x90
   184d6:	b32b      	cbz	r3, 18524 <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   184d8:	79bb      	ldrb	r3, [r7, #6]
   184da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   184de:	2bc0      	cmp	r3, #192	; 0xc0
   184e0:	d020      	beq.n	18524 <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   184e2:	4638      	mov	r0, r7
   184e4:	f7f8 febc 	bl	11260 <bt_addr_le_str>
   184e8:	2400      	movs	r4, #0
   184ea:	4b5d      	ldr	r3, [pc, #372]	; (18660 <smp_ident_addr_info+0x1a8>)
   184ec:	2201      	movs	r2, #1
   184ee:	495d      	ldr	r1, [pc, #372]	; (18664 <smp_ident_addr_info+0x1ac>)
   184f0:	9003      	str	r0, [sp, #12]
   184f2:	9302      	str	r3, [sp, #8]
   184f4:	4620      	mov	r0, r4
   184f6:	4623      	mov	r3, r4
   184f8:	e9cd 4400 	strd	r4, r4, [sp]
   184fc:	f00f f9a0 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   18500:	4640      	mov	r0, r8
   18502:	f7f8 fead 	bl	11260 <bt_addr_le_str>
   18506:	4b58      	ldr	r3, [pc, #352]	; (18668 <smp_ident_addr_info+0x1b0>)
   18508:	9003      	str	r0, [sp, #12]
   1850a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1850e:	4620      	mov	r0, r4
   18510:	4623      	mov	r3, r4
   18512:	2201      	movs	r2, #1
   18514:	4953      	ldr	r1, [pc, #332]	; (18664 <smp_ident_addr_info+0x1ac>)
   18516:	9400      	str	r4, [sp, #0]
   18518:	f00f f992 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1851c:	200a      	movs	r0, #10
}
   1851e:	b004      	add	sp, #16
   18520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   18524:	2207      	movs	r2, #7
   18526:	4639      	mov	r1, r7
   18528:	4640      	mov	r0, r8
   1852a:	f011 fa2a 	bl	29982 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1852e:	b168      	cbz	r0, 1854c <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   18530:	4639      	mov	r1, r7
   18532:	7a30      	ldrb	r0, [r6, #8]
   18534:	f000 fc1a 	bl	18d6c <bt_keys_find_addr>
		if (keys) {
   18538:	4605      	mov	r5, r0
   1853a:	b138      	cbz	r0, 1854c <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   1853c:	4601      	mov	r1, r0
   1853e:	4620      	mov	r0, r4
   18540:	f00f f92c 	bl	2779c <update_keys_check>
   18544:	b1e8      	cbz	r0, 18582 <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   18546:	4628      	mov	r0, r5
   18548:	f000 fc70 	bl	18e2c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1854c:	210d      	movs	r1, #13
   1854e:	1d20      	adds	r0, r4, #4
   18550:	f00f f91e 	bl	27790 <atomic_test_bit>
   18554:	2800      	cmp	r0, #0
   18556:	d071      	beq.n	1863c <smp_ident_addr_info+0x184>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   18558:	4642      	mov	r2, r8
   1855a:	2002      	movs	r0, #2
   1855c:	7a31      	ldrb	r1, [r6, #8]
   1855e:	f000 fc41 	bl	18de4 <bt_keys_get_type>
		if (!keys) {
   18562:	4605      	mov	r5, r0
   18564:	b978      	cbnz	r0, 18586 <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18566:	4640      	mov	r0, r8
   18568:	f7f8 fe7a 	bl	11260 <bt_addr_le_str>
   1856c:	4b3f      	ldr	r3, [pc, #252]	; (1866c <smp_ident_addr_info+0x1b4>)
   1856e:	9003      	str	r0, [sp, #12]
   18570:	e9cd 5301 	strd	r5, r3, [sp, #4]
   18574:	2201      	movs	r2, #1
   18576:	462b      	mov	r3, r5
   18578:	4628      	mov	r0, r5
   1857a:	493a      	ldr	r1, [pc, #232]	; (18664 <smp_ident_addr_info+0x1ac>)
   1857c:	9500      	str	r5, [sp, #0]
   1857e:	f00f f95f 	bl	27840 <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   18582:	2008      	movs	r0, #8
   18584:	e7cb      	b.n	1851e <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18586:	78f3      	ldrb	r3, [r6, #3]
   18588:	bba3      	cbnz	r3, 185f4 <smp_ident_addr_info+0x13c>
			dst = &conn->le.resp_addr;
   1858a:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1858e:	781a      	ldrb	r2, [r3, #0]
   18590:	2a01      	cmp	r2, #1
   18592:	d11e      	bne.n	185d2 <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   18594:	799a      	ldrb	r2, [r3, #6]
   18596:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1859a:	2a40      	cmp	r2, #64	; 0x40
   1859c:	d119      	bne.n	185d2 <smp_ident_addr_info+0x11a>
   1859e:	f8d3 2001 	ldr.w	r2, [r3, #1]
   185a2:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   185a6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   185aa:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   185ac:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   185b0:	b17b      	cbz	r3, 185d2 <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   185b2:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   185b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   185ba:	2bc0      	cmp	r3, #192	; 0xc0
   185bc:	d009      	beq.n	185d2 <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   185be:	4639      	mov	r1, r7
   185c0:	1c68      	adds	r0, r5, #1
   185c2:	f00f f917 	bl	277f4 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   185c6:	4640      	mov	r0, r8
   185c8:	f00f f914 	bl	277f4 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   185cc:	4630      	mov	r0, r6
   185ce:	f7fc f869 	bl	146a4 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   185d2:	f894 60e9 	ldrb.w	r6, [r4, #233]	; 0xe9
   185d6:	f016 0602 	ands.w	r6, r6, #2
   185da:	d00e      	beq.n	185fa <smp_ident_addr_info+0x142>
   185dc:	4924      	ldr	r1, [pc, #144]	; (18670 <smp_ident_addr_info+0x1b8>)
   185de:	f640 6363 	movw	r3, #3683	; 0xe63
   185e2:	4a24      	ldr	r2, [pc, #144]	; (18674 <smp_ident_addr_info+0x1bc>)
   185e4:	4824      	ldr	r0, [pc, #144]	; (18678 <smp_ident_addr_info+0x1c0>)
   185e6:	f00c fc76 	bl	24ed6 <assert_print>
   185ea:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   185ee:	4821      	ldr	r0, [pc, #132]	; (18674 <smp_ident_addr_info+0x1bc>)
   185f0:	f00c fc6a 	bl	24ec8 <assert_post_action>
			dst = &conn->le.init_addr;
   185f4:	f106 0397 	add.w	r3, r6, #151	; 0x97
   185f8:	e7c9      	b.n	1858e <smp_ident_addr_info+0xd6>
	conflict = bt_id_find_conflict(new_bond);
   185fa:	4628      	mov	r0, r5
   185fc:	f7fa fafe 	bl	12bfc <bt_id_find_conflict>
	if (conflict) {
   18600:	b158      	cbz	r0, 1861a <smp_ident_addr_info+0x162>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   18602:	4b1e      	ldr	r3, [pc, #120]	; (1867c <smp_ident_addr_info+0x1c4>)
   18604:	4630      	mov	r0, r6
   18606:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1860a:	2202      	movs	r2, #2
   1860c:	4633      	mov	r3, r6
   1860e:	4915      	ldr	r1, [pc, #84]	; (18664 <smp_ident_addr_info+0x1ac>)
   18610:	9600      	str	r6, [sp, #0]
   18612:	f00f f915 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18616:	2003      	movs	r0, #3
   18618:	e781      	b.n	1851e <smp_ident_addr_info+0x66>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1861a:	4628      	mov	r0, r5
   1861c:	f7fa faee 	bl	12bfc <bt_id_find_conflict>
   18620:	b148      	cbz	r0, 18636 <smp_ident_addr_info+0x17e>
   18622:	4917      	ldr	r1, [pc, #92]	; (18680 <smp_ident_addr_info+0x1c8>)
   18624:	f640 637f 	movw	r3, #3711	; 0xe7f
   18628:	4a12      	ldr	r2, [pc, #72]	; (18674 <smp_ident_addr_info+0x1bc>)
   1862a:	4813      	ldr	r0, [pc, #76]	; (18678 <smp_ident_addr_info+0x1c0>)
   1862c:	f00c fc53 	bl	24ed6 <assert_print>
   18630:	f640 617f 	movw	r1, #3711	; 0xe7f
   18634:	e7db      	b.n	185ee <smp_ident_addr_info+0x136>
	bt_id_add(new_bond);
   18636:	4628      	mov	r0, r5
   18638:	f7fa faf0 	bl	12c1c <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1863c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   18640:	075b      	lsls	r3, r3, #29
   18642:	d503      	bpl.n	1864c <smp_ident_addr_info+0x194>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18644:	210a      	movs	r1, #10
   18646:	4620      	mov	r0, r4
   18648:	f00f f909 	bl	2785e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1864c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   18650:	b109      	cbz	r1, 18656 <smp_ident_addr_info+0x19e>
	return 0;
   18652:	2000      	movs	r0, #0
   18654:	e763      	b.n	1851e <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   18656:	4620      	mov	r0, r4
   18658:	f7ff fd9a 	bl	18190 <smp_pairing_complete>
   1865c:	e7f9      	b.n	18652 <smp_ident_addr_info+0x19a>
   1865e:	bf00      	nop
   18660:	0002f2aa 	.word	0x0002f2aa
   18664:	0002a9d0 	.word	0x0002a9d0
   18668:	0002f391 	.word	0x0002f391
   1866c:	0002f06d 	.word	0x0002f06d
   18670:	0002f2ed 	.word	0x0002f2ed
   18674:	0002f2be 	.word	0x0002f2be
   18678:	0002b939 	.word	0x0002b939
   1867c:	0002f308 	.word	0x0002f308
   18680:	0002f343 	.word	0x0002f343

00018684 <smp_central_ident>:
{
   18684:	b5f0      	push	{r4, r5, r6, r7, lr}
   18686:	460b      	mov	r3, r1
   18688:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1868a:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1868e:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18690:	210d      	movs	r1, #13
   18692:	3004      	adds	r0, #4
   18694:	f00f f87c 	bl	27790 <atomic_test_bit>
   18698:	b318      	cbz	r0, 186e2 <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1869a:	f105 0790 	add.w	r7, r5, #144	; 0x90
   1869e:	7a29      	ldrb	r1, [r5, #8]
   186a0:	463a      	mov	r2, r7
   186a2:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   186a4:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   186a6:	f000 fb9d 	bl	18de4 <bt_keys_get_type>
		if (!keys) {
   186aa:	4605      	mov	r5, r0
   186ac:	b980      	cbnz	r0, 186d0 <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   186ae:	4638      	mov	r0, r7
   186b0:	f7f8 fdd6 	bl	11260 <bt_addr_le_str>
   186b4:	4b17      	ldr	r3, [pc, #92]	; (18714 <smp_central_ident+0x90>)
   186b6:	9003      	str	r0, [sp, #12]
   186b8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   186bc:	4628      	mov	r0, r5
   186be:	462b      	mov	r3, r5
   186c0:	2201      	movs	r2, #1
   186c2:	4915      	ldr	r1, [pc, #84]	; (18718 <smp_central_ident+0x94>)
   186c4:	9500      	str	r5, [sp, #0]
   186c6:	f00f f8bb 	bl	27840 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   186ca:	2008      	movs	r0, #8
}
   186cc:	b005      	add	sp, #20
   186ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186d0:	4632      	mov	r2, r6
   186d2:	f832 3b02 	ldrh.w	r3, [r2], #2
   186d6:	8303      	strh	r3, [r0, #24]
   186d8:	f8d6 3002 	ldr.w	r3, [r6, #2]
   186dc:	6103      	str	r3, [r0, #16]
   186de:	6853      	ldr	r3, [r2, #4]
   186e0:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   186e2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   186e6:	f023 0201 	bic.w	r2, r3, #1
   186ea:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   186ee:	079a      	lsls	r2, r3, #30
   186f0:	d508      	bpl.n	18704 <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   186f2:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   186f4:	4620      	mov	r0, r4
   186f6:	f00f f8b2 	bl	2785e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   186fa:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   186fe:	b129      	cbz	r1, 1870c <smp_central_ident+0x88>
	return 0;
   18700:	2000      	movs	r0, #0
   18702:	e7e3      	b.n	186cc <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   18704:	075b      	lsls	r3, r3, #29
   18706:	d5f8      	bpl.n	186fa <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18708:	210a      	movs	r1, #10
   1870a:	e7f3      	b.n	186f4 <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   1870c:	4620      	mov	r0, r4
   1870e:	f7ff fd3f 	bl	18190 <smp_pairing_complete>
   18712:	e7f5      	b.n	18700 <smp_central_ident+0x7c>
   18714:	0002f06d 	.word	0x0002f06d
   18718:	0002a9d0 	.word	0x0002a9d0

0001871c <smp_pairing_failed>:
{
   1871c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18720:	460e      	mov	r6, r1
   18722:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18724:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18728:	f7fe fdb0 	bl	1728c <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1872c:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1872e:	4914      	ldr	r1, [pc, #80]	; (18780 <smp_pairing_failed+0x64>)
   18730:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18732:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   18734:	9303      	str	r3, [sp, #12]
   18736:	4b13      	ldr	r3, [pc, #76]	; (18784 <smp_pairing_failed+0x68>)
   18738:	2201      	movs	r2, #1
   1873a:	9302      	str	r3, [sp, #8]
   1873c:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1873e:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   18740:	4618      	mov	r0, r3
   18742:	e9cd 3300 	strd	r3, r3, [sp]
   18746:	f00f f87b 	bl	27840 <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1874a:	210a      	movs	r1, #10
   1874c:	4638      	mov	r0, r7
   1874e:	f00f f91d 	bl	2798c <atomic_test_and_clear_bit>
   18752:	b140      	cbz	r0, 18766 <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   18754:	b975      	cbnz	r5, 18774 <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   18756:	4620      	mov	r0, r4
   18758:	7831      	ldrb	r1, [r6, #0]
   1875a:	f7ff fd19 	bl	18190 <smp_pairing_complete>
}
   1875e:	2000      	movs	r0, #0
   18760:	b004      	add	sp, #16
   18762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   18766:	210b      	movs	r1, #11
   18768:	4638      	mov	r0, r7
   1876a:	f00f f90f 	bl	2798c <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1876e:	2800      	cmp	r0, #0
   18770:	d1f0      	bne.n	18754 <smp_pairing_failed+0x38>
   18772:	e7f0      	b.n	18756 <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   18774:	692b      	ldr	r3, [r5, #16]
   18776:	2b00      	cmp	r3, #0
   18778:	d0ed      	beq.n	18756 <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   1877a:	4640      	mov	r0, r8
   1877c:	4798      	blx	r3
   1877e:	e7ea      	b.n	18756 <smp_pairing_failed+0x3a>
   18780:	0002a9d0 	.word	0x0002a9d0
   18784:	0002f362 	.word	0x0002f362

00018788 <bt_smp_encrypt_change>:
{
   18788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1878c:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1878e:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   18792:	4604      	mov	r4, r0
   18794:	460f      	mov	r7, r1
   18796:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18798:	2101      	movs	r1, #1
   1879a:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   1879c:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   187a0:	f00f f8f4 	bl	2798c <atomic_test_and_clear_bit>
   187a4:	2800      	cmp	r0, #0
   187a6:	d068      	beq.n	1887a <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   187a8:	b1e7      	cbz	r7, 187e4 <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   187aa:	2103      	movs	r1, #3
   187ac:	4630      	mov	r0, r6
   187ae:	f00e ffef 	bl	27790 <atomic_test_bit>
   187b2:	2800      	cmp	r0, #0
   187b4:	d061      	beq.n	1887a <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   187b6:	4638      	mov	r0, r7
   187b8:	f7f9 fcee 	bl	12198 <bt_security_err_get>
	switch (auth_err) {
   187bc:	3801      	subs	r0, #1
   187be:	b2c0      	uxtb	r0, r0
   187c0:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   187c2:	bf8c      	ite	hi
   187c4:	2400      	movhi	r4, #0
   187c6:	4b75      	ldrls	r3, [pc, #468]	; (1899c <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   187c8:	f04f 0102 	mov.w	r1, #2
   187cc:	bf98      	it	ls
   187ce:	5c1c      	ldrbls	r4, [r3, r0]
   187d0:	4630      	mov	r0, r6
   187d2:	f00f f844 	bl	2785e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   187d6:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   187d8:	4628      	mov	r0, r5
}
   187da:	b00c      	add	sp, #48	; 0x30
   187dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   187e0:	f7ff bcd6 	b.w	18190 <smp_pairing_complete>
	if (!conn->encrypt) {
   187e4:	f898 300b 	ldrb.w	r3, [r8, #11]
   187e8:	2b00      	cmp	r3, #0
   187ea:	d046      	beq.n	1887a <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   187ec:	2103      	movs	r1, #3
   187ee:	4630      	mov	r0, r6
   187f0:	f00e ffce 	bl	27790 <atomic_test_bit>
   187f4:	b928      	cbnz	r0, 18802 <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   187f6:	4628      	mov	r0, r5
}
   187f8:	b00c      	add	sp, #48	; 0x30
   187fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   187fe:	f00f b8d7 	b.w	279b0 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18802:	2105      	movs	r1, #5
   18804:	4630      	mov	r0, r6
   18806:	f00e ffc3 	bl	27790 <atomic_test_bit>
   1880a:	b1b8      	cbz	r0, 1883c <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1880c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18810:	071b      	lsls	r3, r3, #28
   18812:	d507      	bpl.n	18824 <bt_smp_encrypt_change+0x9c>
   18814:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   18818:	071f      	lsls	r7, r3, #28
   1881a:	d503      	bpl.n	18824 <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1881c:	2111      	movs	r1, #17
   1881e:	4630      	mov	r0, r6
   18820:	f00f f81d 	bl	2785e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   18824:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18828:	f023 0308 	bic.w	r3, r3, #8
   1882c:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   18830:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   18834:	f023 0308 	bic.w	r3, r3, #8
   18838:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1883c:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   18840:	07d8      	lsls	r0, r3, #31
   18842:	d51d      	bpl.n	18880 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   18844:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18846:	4628      	mov	r0, r5
   18848:	f00f f809 	bl	2785e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1884c:	2102      	movs	r1, #2
   1884e:	4630      	mov	r0, r6
   18850:	f00f f805 	bl	2785e <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   18854:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   18856:	f8d3 70c0 	ldr.w	r7, [r3, #192]	; 0xc0
   1885a:	b9cf      	cbnz	r7, 18890 <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1885c:	f103 0090 	add.w	r0, r3, #144	; 0x90
   18860:	f7f8 fcfe 	bl	11260 <bt_addr_le_str>
   18864:	4b4e      	ldr	r3, [pc, #312]	; (189a0 <bt_smp_encrypt_change+0x218>)
   18866:	9003      	str	r0, [sp, #12]
   18868:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1886c:	2201      	movs	r2, #1
   1886e:	463b      	mov	r3, r7
   18870:	4638      	mov	r0, r7
   18872:	494c      	ldr	r1, [pc, #304]	; (189a4 <bt_smp_encrypt_change+0x21c>)
   18874:	9700      	str	r7, [sp, #0]
   18876:	f00e ffe3 	bl	27840 <z_log_msg_runtime_create.constprop.0>
}
   1887a:	b00c      	add	sp, #48	; 0x30
   1887c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   18880:	0799      	lsls	r1, r3, #30
   18882:	d501      	bpl.n	18888 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   18884:	2108      	movs	r1, #8
   18886:	e7de      	b.n	18846 <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   18888:	075a      	lsls	r2, r3, #29
   1888a:	d5df      	bpl.n	1884c <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1888c:	210a      	movs	r1, #10
   1888e:	e7da      	b.n	18846 <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18890:	2105      	movs	r1, #5
   18892:	f00e ff7d 	bl	27790 <atomic_test_bit>
   18896:	4607      	mov	r7, r0
   18898:	b9b0      	cbnz	r0, 188c8 <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1889a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1889e:	07db      	lsls	r3, r3, #31
   188a0:	d512      	bpl.n	188c8 <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   188a2:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   188a4:	211a      	movs	r1, #26
   188a6:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   188a8:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   188ac:	f7fb f866 	bl	1397c <bt_rand>
   188b0:	4681      	mov	r9, r0
   188b2:	b170      	cbz	r0, 188d2 <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   188b4:	4b3c      	ldr	r3, [pc, #240]	; (189a8 <bt_smp_encrypt_change+0x220>)
   188b6:	2201      	movs	r2, #1
   188b8:	e9cd 7301 	strd	r7, r3, [sp, #4]
   188bc:	4638      	mov	r0, r7
   188be:	463b      	mov	r3, r7
   188c0:	4938      	ldr	r1, [pc, #224]	; (189a4 <bt_smp_encrypt_change+0x21c>)
   188c2:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   188c4:	f00e ffbc 	bl	27840 <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   188c8:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   188cc:	2900      	cmp	r1, #0
   188ce:	d1d4      	bne.n	1887a <bt_smp_encrypt_change+0xf2>
   188d0:	e782      	b.n	187d8 <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   188d2:	2106      	movs	r1, #6
   188d4:	4628      	mov	r0, r5
   188d6:	f00e ffd2 	bl	2787e <smp_create_pdu.constprop.0>
		if (!buf) {
   188da:	4607      	mov	r7, r0
   188dc:	b938      	cbnz	r0, 188ee <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   188de:	4b33      	ldr	r3, [pc, #204]	; (189ac <bt_smp_encrypt_change+0x224>)
   188e0:	e9cd 7301 	strd	r7, r3, [sp, #4]
   188e4:	2201      	movs	r2, #1
   188e6:	463b      	mov	r3, r7
   188e8:	492e      	ldr	r1, [pc, #184]	; (189a4 <bt_smp_encrypt_change+0x21c>)
   188ea:	9700      	str	r7, [sp, #0]
   188ec:	e7ea      	b.n	188c4 <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   188ee:	2110      	movs	r1, #16
   188f0:	300c      	adds	r0, #12
   188f2:	f000 fee9 	bl	196c8 <net_buf_simple_add>
   188f6:	f898 200c 	ldrb.w	r2, [r8, #12]
   188fa:	a905      	add	r1, sp, #20
   188fc:	4682      	mov	sl, r0
   188fe:	f011 f850 	bl	299a2 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   18902:	f898 000c 	ldrb.w	r0, [r8, #12]
   18906:	280f      	cmp	r0, #15
   18908:	d805      	bhi.n	18916 <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   1890a:	f1c0 0210 	rsb	r2, r0, #16
   1890e:	4649      	mov	r1, r9
   18910:	4450      	add	r0, sl
   18912:	f011 f880 	bl	29a16 <memset>
		smp_send(smp, buf, NULL, NULL);
   18916:	4639      	mov	r1, r7
   18918:	2200      	movs	r2, #0
   1891a:	4628      	mov	r0, r5
   1891c:	f00e ff73 	bl	27806 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   18920:	2107      	movs	r1, #7
   18922:	4628      	mov	r0, r5
   18924:	f00e ffab 	bl	2787e <smp_create_pdu.constprop.0>
		if (!buf) {
   18928:	4607      	mov	r7, r0
   1892a:	b908      	cbnz	r0, 18930 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1892c:	4b20      	ldr	r3, [pc, #128]	; (189b0 <bt_smp_encrypt_change+0x228>)
   1892e:	e7d7      	b.n	188e0 <bt_smp_encrypt_change+0x158>
   18930:	210a      	movs	r1, #10
   18932:	300c      	adds	r0, #12
   18934:	f000 fec8 	bl	196c8 <net_buf_simple_add>
   18938:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1893a:	aa09      	add	r2, sp, #36	; 0x24
   1893c:	ca03      	ldmia	r2!, {r0, r1}
   1893e:	f8c3 0002 	str.w	r0, [r3, #2]
   18942:	f8c3 1006 	str.w	r1, [r3, #6]
   18946:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   1894a:	4639      	mov	r1, r7
   1894c:	4628      	mov	r0, r5
   1894e:	801a      	strh	r2, [r3, #0]
   18950:	4a18      	ldr	r2, [pc, #96]	; (189b4 <bt_smp_encrypt_change+0x22c>)
   18952:	f00e ff58 	bl	27806 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18956:	4630      	mov	r0, r6
   18958:	210d      	movs	r1, #13
   1895a:	f00e ff19 	bl	27790 <atomic_test_bit>
   1895e:	ae09      	add	r6, sp, #36	; 0x24
   18960:	2800      	cmp	r0, #0
   18962:	d0b1      	beq.n	188c8 <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   18964:	2101      	movs	r1, #1
   18966:	4640      	mov	r0, r8
   18968:	f000 fa24 	bl	18db4 <bt_keys_add_type>
   1896c:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   18970:	ab05      	add	r3, sp, #20
   18972:	461a      	mov	r2, r3
   18974:	ca03      	ldmia	r2!, {r0, r1}
   18976:	42b2      	cmp	r2, r6
   18978:	6038      	str	r0, [r7, #0]
   1897a:	6079      	str	r1, [r7, #4]
   1897c:	4613      	mov	r3, r2
   1897e:	f107 0708 	add.w	r7, r7, #8
   18982:	d1f6      	bne.n	18972 <bt_smp_encrypt_change+0x1ea>
   18984:	4633      	mov	r3, r6
   18986:	cb03      	ldmia	r3!, {r0, r1}
   18988:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1898c:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   18990:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   18994:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   18998:	e796      	b.n	188c8 <bt_smp_encrypt_change+0x140>
   1899a:	bf00      	nop
   1899c:	0002f42e 	.word	0x0002f42e
   189a0:	0002f384 	.word	0x0002f384
   189a4:	0002a9d0 	.word	0x0002a9d0
   189a8:	0002f399 	.word	0x0002f399
   189ac:	0002f3b4 	.word	0x0002f3b4
   189b0:	0002f3db 	.word	0x0002f3db
   189b4:	000189f5 	.word	0x000189f5

000189b8 <smp_timeout>:
{
   189b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   189ba:	4b0c      	ldr	r3, [pc, #48]	; (189ec <smp_timeout+0x34>)
{
   189bc:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   189be:	9302      	str	r3, [sp, #8]
   189c0:	2300      	movs	r3, #0
   189c2:	2201      	movs	r2, #1
   189c4:	4618      	mov	r0, r3
   189c6:	e9cd 3300 	strd	r3, r3, [sp]
   189ca:	4909      	ldr	r1, [pc, #36]	; (189f0 <smp_timeout+0x38>)
   189cc:	f00e ff38 	bl	27840 <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   189d0:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   189d4:	2108      	movs	r1, #8
   189d6:	f7ff fbdb 	bl	18190 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   189da:	2104      	movs	r1, #4
   189dc:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   189e0:	b004      	add	sp, #16
   189e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   189e6:	f00e bf3a 	b.w	2785e <atomic_set_bit>
   189ea:	bf00      	nop
   189ec:	0002f403 	.word	0x0002f403
   189f0:	0002a9d0 	.word	0x0002a9d0

000189f4 <smp_ident_sent>:
{
   189f4:	b508      	push	{r3, lr}
	if (!err) {
   189f6:	bb1a      	cbnz	r2, 18a40 <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   189f8:	7883      	ldrb	r3, [r0, #2]
   189fa:	2b01      	cmp	r3, #1
   189fc:	d120      	bne.n	18a40 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   189fe:	2106      	movs	r1, #6
   18a00:	f00e f832 	bl	26a68 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   18a04:	b970      	cbnz	r0, 18a24 <smp_ident_sent+0x30>
   18a06:	490f      	ldr	r1, [pc, #60]	; (18a44 <smp_ident_sent+0x50>)
   18a08:	f240 2365 	movw	r3, #613	; 0x265
   18a0c:	4a0e      	ldr	r2, [pc, #56]	; (18a48 <smp_ident_sent+0x54>)
   18a0e:	480f      	ldr	r0, [pc, #60]	; (18a4c <smp_ident_sent+0x58>)
   18a10:	f00c fa61 	bl	24ed6 <assert_print>
   18a14:	480e      	ldr	r0, [pc, #56]	; (18a50 <smp_ident_sent+0x5c>)
   18a16:	f00c fa5e 	bl	24ed6 <assert_print>
   18a1a:	f240 2165 	movw	r1, #613	; 0x265
   18a1e:	480a      	ldr	r0, [pc, #40]	; (18a48 <smp_ident_sent+0x54>)
   18a20:	f00c fa52 	bl	24ec8 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   18a24:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   18a28:	f023 0301 	bic.w	r3, r3, #1
   18a2c:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   18a30:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   18a34:	b921      	cbnz	r1, 18a40 <smp_ident_sent+0x4c>
}
   18a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   18a3a:	38ec      	subs	r0, #236	; 0xec
   18a3c:	f7ff bba8 	b.w	18190 <smp_pairing_complete>
}
   18a40:	bd08      	pop	{r3, pc}
   18a42:	bf00      	nop
   18a44:	0002eb7a 	.word	0x0002eb7a
   18a48:	0002f2be 	.word	0x0002f2be
   18a4c:	0002b939 	.word	0x0002b939
   18a50:	0002f40f 	.word	0x0002f40f

00018a54 <bt_smp_update_keys>:
{
   18a54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18a58:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   18a5a:	f7fe fc95 	bl	17388 <smp_chan_get>
	if (!smp) {
   18a5e:	4605      	mov	r5, r0
   18a60:	2800      	cmp	r0, #0
   18a62:	d074      	beq.n	18b4e <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18a64:	1d07      	adds	r7, r0, #4
   18a66:	2103      	movs	r1, #3
   18a68:	4638      	mov	r0, r7
   18a6a:	f00e fe91 	bl	27790 <atomic_test_bit>
   18a6e:	2800      	cmp	r0, #0
   18a70:	d06d      	beq.n	18b4e <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   18a72:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   18a76:	b108      	cbz	r0, 18a7c <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   18a78:	f000 f9d8 	bl	18e2c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18a7c:	f104 0890 	add.w	r8, r4, #144	; 0x90
   18a80:	4641      	mov	r1, r8
   18a82:	7a20      	ldrb	r0, [r4, #8]
   18a84:	f000 f894 	bl	18bb0 <bt_keys_get_addr>
   18a88:	4606      	mov	r6, r0
   18a8a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   18a8e:	b9a0      	cbnz	r0, 18aba <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18a90:	4640      	mov	r0, r8
   18a92:	f7f8 fbe5 	bl	11260 <bt_addr_le_str>
   18a96:	4b39      	ldr	r3, [pc, #228]	; (18b7c <bt_smp_update_keys+0x128>)
   18a98:	9003      	str	r0, [sp, #12]
   18a9a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   18a9e:	4630      	mov	r0, r6
   18aa0:	4633      	mov	r3, r6
   18aa2:	2201      	movs	r2, #1
   18aa4:	4936      	ldr	r1, [pc, #216]	; (18b80 <bt_smp_update_keys+0x12c>)
   18aa6:	9600      	str	r6, [sp, #0]
   18aa8:	f00e feca 	bl	27840 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   18aac:	2108      	movs	r1, #8
   18aae:	4628      	mov	r0, r5
}
   18ab0:	b004      	add	sp, #16
   18ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   18ab6:	f7ff bbe9 	b.w	1828c <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   18aba:	210e      	movs	r1, #14
   18abc:	4638      	mov	r0, r7
   18abe:	f00e fe67 	bl	27790 <atomic_test_bit>
   18ac2:	b128      	cbz	r0, 18ad0 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   18ac4:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18ac8:	7b53      	ldrb	r3, [r2, #13]
   18aca:	f043 0302 	orr.w	r3, r3, #2
   18ace:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   18ad0:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   18ad2:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   18ad6:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   18ad8:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   18ada:	d83b      	bhi.n	18b54 <bt_smp_update_keys+0x100>
   18adc:	2a00      	cmp	r2, #0
   18ade:	d040      	beq.n	18b62 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   18ae0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18ae4:	7b53      	ldrb	r3, [r2, #13]
   18ae6:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   18aea:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   18aec:	7d2b      	ldrb	r3, [r5, #20]
   18aee:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   18af0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   18af4:	428b      	cmp	r3, r1
   18af6:	bf28      	it	cs
   18af8:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18afa:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   18afc:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18afe:	2105      	movs	r1, #5
   18b00:	f00e fe46 	bl	27790 <atomic_test_bit>
   18b04:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   18b08:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18b0a:	b398      	cbz	r0, 18b74 <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   18b0c:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18b10:	210d      	movs	r1, #13
   18b12:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   18b14:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18b16:	f00e fe3b 	bl	27790 <atomic_test_bit>
   18b1a:	b1c0      	cbz	r0, 18b4e <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   18b1c:	2120      	movs	r1, #32
   18b1e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   18b22:	f000 f947 	bl	18db4 <bt_keys_add_type>
   18b26:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18b2a:	f105 0247 	add.w	r2, r5, #71	; 0x47
   18b2e:	331a      	adds	r3, #26
   18b30:	3557      	adds	r5, #87	; 0x57
   18b32:	f852 1b04 	ldr.w	r1, [r2], #4
   18b36:	42aa      	cmp	r2, r5
   18b38:	f843 1b04 	str.w	r1, [r3], #4
   18b3c:	d1f9      	bne.n	18b32 <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   18b3e:	2300      	movs	r3, #0
   18b40:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18b44:	6113      	str	r3, [r2, #16]
   18b46:	6153      	str	r3, [r2, #20]
   18b48:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18b4c:	8313      	strh	r3, [r2, #24]
}
   18b4e:	b004      	add	sp, #16
   18b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   18b54:	3a05      	subs	r2, #5
   18b56:	2a01      	cmp	r2, #1
   18b58:	d803      	bhi.n	18b62 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   18b5a:	f043 0320 	orr.w	r3, r3, #32
   18b5e:	734b      	strb	r3, [r1, #13]
   18b60:	e7be      	b.n	18ae0 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   18b62:	f023 0320 	bic.w	r3, r3, #32
   18b66:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   18b68:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18b6c:	7b53      	ldrb	r3, [r2, #13]
   18b6e:	f023 0301 	bic.w	r3, r3, #1
   18b72:	e7ba      	b.n	18aea <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   18b74:	f022 0210 	bic.w	r2, r2, #16
   18b78:	735a      	strb	r2, [r3, #13]
   18b7a:	e7e8      	b.n	18b4e <bt_smp_update_keys+0xfa>
   18b7c:	0002f06d 	.word	0x0002f06d
   18b80:	0002a9d0 	.word	0x0002a9d0

00018b84 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   18b84:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18b86:	4b07      	ldr	r3, [pc, #28]	; (18ba4 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   18b88:	4807      	ldr	r0, [pc, #28]	; (18ba8 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18b8a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   18b8e:	f003 0306 	and.w	r3, r3, #6
   18b92:	1f9a      	subs	r2, r3, #6
   18b94:	4253      	negs	r3, r2
   18b96:	4153      	adcs	r3, r2
   18b98:	4a04      	ldr	r2, [pc, #16]	; (18bac <bt_smp_init+0x28>)
   18b9a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   18b9c:	f7fa ff18 	bl	139d0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   18ba0:	2000      	movs	r0, #0
   18ba2:	bd08      	pop	{r3, pc}
   18ba4:	20008000 	.word	0x20008000
   18ba8:	20008544 	.word	0x20008544
   18bac:	20022043 	.word	0x20022043

00018bb0 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18bb0:	b570      	push	{r4, r5, r6, lr}
   18bb2:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	__ASSERT_NO_MSG(addr != NULL);
   18bb4:	460d      	mov	r5, r1
   18bb6:	b959      	cbnz	r1, 18bd0 <bt_keys_get_addr+0x20>
   18bb8:	4913      	ldr	r1, [pc, #76]	; (18c08 <bt_keys_get_addr+0x58>)
   18bba:	4814      	ldr	r0, [pc, #80]	; (18c0c <bt_keys_get_addr+0x5c>)
   18bbc:	2359      	movs	r3, #89	; 0x59
   18bbe:	4a14      	ldr	r2, [pc, #80]	; (18c10 <bt_keys_get_addr+0x60>)
   18bc0:	f00c f989 	bl	24ed6 <assert_print>
   18bc4:	2159      	movs	r1, #89	; 0x59
   18bc6:	4812      	ldr	r0, [pc, #72]	; (18c10 <bt_keys_get_addr+0x60>)
   18bc8:	f00c f97e 	bl	24ec8 <assert_post_action>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   18bcc:	2000      	movs	r0, #0
   18bce:	e019      	b.n	18c04 <bt_keys_get_addr+0x54>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   18bd0:	4c10      	ldr	r4, [pc, #64]	; (18c14 <bt_keys_get_addr+0x64>)
   18bd2:	f814 3b01 	ldrb.w	r3, [r4], #1
   18bd6:	4283      	cmp	r3, r0
   18bd8:	d104      	bne.n	18be4 <bt_keys_get_addr+0x34>
	return memcmp(a, b, sizeof(*a));
   18bda:	2207      	movs	r2, #7
   18bdc:	4620      	mov	r0, r4
   18bde:	f010 fed0 	bl	29982 <memcmp>
   18be2:	b170      	cbz	r0, 18c02 <bt_keys_get_addr+0x52>
   18be4:	2207      	movs	r2, #7
   18be6:	490c      	ldr	r1, [pc, #48]	; (18c18 <bt_keys_get_addr+0x68>)
   18be8:	480c      	ldr	r0, [pc, #48]	; (18c1c <bt_keys_get_addr+0x6c>)
   18bea:	f010 feca 	bl	29982 <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   18bee:	2800      	cmp	r0, #0
   18bf0:	d1ec      	bne.n	18bcc <bt_keys_get_addr+0x1c>
		keys->id = id;
   18bf2:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   18bf6:	682b      	ldr	r3, [r5, #0]
   18bf8:	6023      	str	r3, [r4, #0]
   18bfa:	88ab      	ldrh	r3, [r5, #4]
   18bfc:	80a3      	strh	r3, [r4, #4]
   18bfe:	79ab      	ldrb	r3, [r5, #6]
   18c00:	71a3      	strb	r3, [r4, #6]
		keys = &key_pool[i];
   18c02:	4804      	ldr	r0, [pc, #16]	; (18c14 <bt_keys_get_addr+0x64>)
}
   18c04:	bd70      	pop	{r4, r5, r6, pc}
   18c06:	bf00      	nop
   18c08:	0002f4af 	.word	0x0002f4af
   18c0c:	0002b939 	.word	0x0002b939
   18c10:	0002f47f 	.word	0x0002f47f
   18c14:	200211b8 	.word	0x200211b8
   18c18:	0002d8ec 	.word	0x0002d8ec
   18c1c:	200211b9 	.word	0x200211b9

00018c20 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   18c20:	460b      	mov	r3, r1
   18c22:	b510      	push	{r4, lr}
   18c24:	4611      	mov	r1, r2
   18c26:	4604      	mov	r4, r0
	int i;

	__ASSERT_NO_MSG(func != NULL);
   18c28:	b963      	cbnz	r3, 18c44 <bt_keys_foreach_type+0x24>
   18c2a:	4909      	ldr	r1, [pc, #36]	; (18c50 <bt_keys_foreach_type+0x30>)
   18c2c:	4809      	ldr	r0, [pc, #36]	; (18c54 <bt_keys_foreach_type+0x34>)
   18c2e:	23b3      	movs	r3, #179	; 0xb3
   18c30:	4a09      	ldr	r2, [pc, #36]	; (18c58 <bt_keys_foreach_type+0x38>)
   18c32:	f00c f950 	bl	24ed6 <assert_print>
   18c36:	21b3      	movs	r1, #179	; 0xb3
   18c38:	4807      	ldr	r0, [pc, #28]	; (18c58 <bt_keys_foreach_type+0x38>)
   18c3a:	f00c f945 	bl	24ec8 <assert_post_action>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   18c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   18c42:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   18c44:	4805      	ldr	r0, [pc, #20]	; (18c5c <bt_keys_foreach_type+0x3c>)
   18c46:	89c2      	ldrh	r2, [r0, #14]
   18c48:	4222      	tst	r2, r4
   18c4a:	d1f8      	bne.n	18c3e <bt_keys_foreach_type+0x1e>
}
   18c4c:	bd10      	pop	{r4, pc}
   18c4e:	bf00      	nop
   18c50:	0002f4c3 	.word	0x0002f4c3
   18c54:	0002b939 	.word	0x0002b939
   18c58:	0002f47f 	.word	0x0002f47f
   18c5c:	200211b8 	.word	0x200211b8

00018c60 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   18c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c62:	4605      	mov	r5, r0
   18c64:	460e      	mov	r6, r1
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   18c66:	4614      	mov	r4, r2
   18c68:	b9aa      	cbnz	r2, 18c96 <bt_keys_find+0x36>
   18c6a:	490f      	ldr	r1, [pc, #60]	; (18ca8 <bt_keys_find+0x48>)
   18c6c:	480f      	ldr	r0, [pc, #60]	; (18cac <bt_keys_find+0x4c>)
   18c6e:	23c0      	movs	r3, #192	; 0xc0
   18c70:	4a0f      	ldr	r2, [pc, #60]	; (18cb0 <bt_keys_find+0x50>)
   18c72:	f00c f930 	bl	24ed6 <assert_print>
   18c76:	21c0      	movs	r1, #192	; 0xc0
   18c78:	480d      	ldr	r0, [pc, #52]	; (18cb0 <bt_keys_find+0x50>)
   18c7a:	f00c f925 	bl	24ec8 <assert_post_action>

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18c7e:	b18a      	cbz	r2, 18ca4 <bt_keys_find+0x44>
   18c80:	42b1      	cmp	r1, r6
   18c82:	d10f      	bne.n	18ca4 <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   18c84:	2207      	movs	r2, #7
   18c86:	4621      	mov	r1, r4
   18c88:	480a      	ldr	r0, [pc, #40]	; (18cb4 <bt_keys_find+0x54>)
   18c8a:	f010 fe7a 	bl	29982 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18c8e:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18c90:	b918      	cbnz	r0, 18c9a <bt_keys_find+0x3a>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
   18c92:	4809      	ldr	r0, [pc, #36]	; (18cb8 <bt_keys_find+0x58>)
   18c94:	e007      	b.n	18ca6 <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18c96:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18c98:	4f07      	ldr	r7, [pc, #28]	; (18cb8 <bt_keys_find+0x58>)
   18c9a:	89fa      	ldrh	r2, [r7, #14]
   18c9c:	7839      	ldrb	r1, [r7, #0]
   18c9e:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18ca0:	2b00      	cmp	r3, #0
   18ca2:	d0ec      	beq.n	18c7e <bt_keys_find+0x1e>
		}
	}

	return NULL;
   18ca4:	2000      	movs	r0, #0
}
   18ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ca8:	0002f4af 	.word	0x0002f4af
   18cac:	0002b939 	.word	0x0002b939
   18cb0:	0002f47f 	.word	0x0002f47f
   18cb4:	200211b9 	.word	0x200211b9
   18cb8:	200211b8 	.word	0x200211b8

00018cbc <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   18cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cbe:	4606      	mov	r6, r0
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   18cc0:	460c      	mov	r4, r1
   18cc2:	b949      	cbnz	r1, 18cd8 <bt_keys_find_irk+0x1c>
   18cc4:	4923      	ldr	r1, [pc, #140]	; (18d54 <bt_keys_find_irk+0x98>)
   18cc6:	4824      	ldr	r0, [pc, #144]	; (18d58 <bt_keys_find_irk+0x9c>)
   18cc8:	23e9      	movs	r3, #233	; 0xe9
   18cca:	4a24      	ldr	r2, [pc, #144]	; (18d5c <bt_keys_find_irk+0xa0>)
   18ccc:	f00c f903 	bl	24ed6 <assert_print>
   18cd0:	21e9      	movs	r1, #233	; 0xe9
   18cd2:	4822      	ldr	r0, [pc, #136]	; (18d5c <bt_keys_find_irk+0xa0>)
   18cd4:	f00c f8f8 	bl	24ec8 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   18cd8:	780b      	ldrb	r3, [r1, #0]
   18cda:	2b01      	cmp	r3, #1
   18cdc:	d001      	beq.n	18ce2 <bt_keys_find_irk+0x26>

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   18cde:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   18ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   18ce2:	798b      	ldrb	r3, [r1, #6]
   18ce4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18ce8:	2b40      	cmp	r3, #64	; 0x40
   18cea:	d1f8      	bne.n	18cde <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18cec:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18cee:	4d1c      	ldr	r5, [pc, #112]	; (18d60 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   18cf0:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   18cf4:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   18cf6:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18cf8:	f002 0202 	and.w	r2, r2, #2
   18cfc:	b1db      	cbz	r3, 18d36 <bt_keys_find_irk+0x7a>
   18cfe:	2300      	movs	r3, #0
   18d00:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   18d02:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18d04:	f002 0202 	and.w	r2, r2, #2
   18d08:	2b00      	cmp	r3, #0
   18d0a:	d1e8      	bne.n	18cde <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18d0c:	2a00      	cmp	r2, #0
   18d0e:	d0e6      	beq.n	18cde <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   18d10:	42b1      	cmp	r1, r6
   18d12:	d1e4      	bne.n	18cde <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   18d14:	1c67      	adds	r7, r4, #1
   18d16:	4639      	mov	r1, r7
   18d18:	4812      	ldr	r0, [pc, #72]	; (18d64 <bt_keys_find_irk+0xa8>)
   18d1a:	f00d f993 	bl	26044 <bt_rpa_irk_matches>
   18d1e:	2301      	movs	r3, #1
   18d20:	2800      	cmp	r0, #0
   18d22:	d0ed      	beq.n	18d00 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   18d24:	f8d4 3001 	ldr.w	r3, [r4, #1]
   18d28:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   18d2c:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   18d30:	4b0d      	ldr	r3, [pc, #52]	; (18d68 <bt_keys_find_irk+0xac>)
   18d32:	809a      	strh	r2, [r3, #4]
}
   18d34:	e00b      	b.n	18d4e <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18d36:	2a00      	cmp	r2, #0
   18d38:	d0e2      	beq.n	18d00 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   18d3a:	42b0      	cmp	r0, r6
   18d3c:	d1e0      	bne.n	18d00 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   18d3e:	2206      	movs	r2, #6
   18d40:	4639      	mov	r1, r7
   18d42:	1c60      	adds	r0, r4, #1
   18d44:	f010 fe1d 	bl	29982 <memcmp>
   18d48:	2301      	movs	r3, #1
   18d4a:	2800      	cmp	r0, #0
   18d4c:	d1d2      	bne.n	18cf4 <bt_keys_find_irk+0x38>
			return &key_pool[i];
   18d4e:	4804      	ldr	r0, [pc, #16]	; (18d60 <bt_keys_find_irk+0xa4>)
   18d50:	e7c6      	b.n	18ce0 <bt_keys_find_irk+0x24>
   18d52:	bf00      	nop
   18d54:	0002f4af 	.word	0x0002f4af
   18d58:	0002b939 	.word	0x0002b939
   18d5c:	0002f47f 	.word	0x0002f47f
   18d60:	200211b8 	.word	0x200211b8
   18d64:	200211e2 	.word	0x200211e2
   18d68:	200211f2 	.word	0x200211f2

00018d6c <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18d6c:	b510      	push	{r4, lr}
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   18d6e:	b959      	cbnz	r1, 18d88 <bt_keys_find_addr+0x1c>
   18d70:	490c      	ldr	r1, [pc, #48]	; (18da4 <bt_keys_find_addr+0x38>)
   18d72:	480d      	ldr	r0, [pc, #52]	; (18da8 <bt_keys_find_addr+0x3c>)
   18d74:	f44f 738d 	mov.w	r3, #282	; 0x11a
   18d78:	4a0c      	ldr	r2, [pc, #48]	; (18dac <bt_keys_find_addr+0x40>)
   18d7a:	f00c f8ac 	bl	24ed6 <assert_print>
   18d7e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   18d82:	480a      	ldr	r0, [pc, #40]	; (18dac <bt_keys_find_addr+0x40>)
   18d84:	f00c f8a0 	bl	24ec8 <assert_post_action>

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   18d88:	4c09      	ldr	r4, [pc, #36]	; (18db0 <bt_keys_find_addr+0x44>)
   18d8a:	7823      	ldrb	r3, [r4, #0]
   18d8c:	4283      	cmp	r3, r0
   18d8e:	d104      	bne.n	18d9a <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   18d90:	2207      	movs	r2, #7
   18d92:	1c60      	adds	r0, r4, #1
   18d94:	f010 fdf5 	bl	29982 <memcmp>
   18d98:	b108      	cbz	r0, 18d9e <bt_keys_find_addr+0x32>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   18d9a:	2000      	movs	r0, #0
}
   18d9c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   18d9e:	4620      	mov	r0, r4
   18da0:	e7fc      	b.n	18d9c <bt_keys_find_addr+0x30>
   18da2:	bf00      	nop
   18da4:	0002f4af 	.word	0x0002f4af
   18da8:	0002b939 	.word	0x0002b939
   18dac:	0002f47f 	.word	0x0002f47f
   18db0:	200211b8 	.word	0x200211b8

00018db4 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
   18db4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   18db6:	b958      	cbnz	r0, 18dd0 <bt_keys_add_type+0x1c>
   18db8:	4907      	ldr	r1, [pc, #28]	; (18dd8 <bt_keys_add_type+0x24>)
   18dba:	4808      	ldr	r0, [pc, #32]	; (18ddc <bt_keys_add_type+0x28>)
   18dbc:	f44f 7395 	mov.w	r3, #298	; 0x12a
   18dc0:	4a07      	ldr	r2, [pc, #28]	; (18de0 <bt_keys_add_type+0x2c>)
   18dc2:	f00c f888 	bl	24ed6 <assert_print>
   18dc6:	f44f 7195 	mov.w	r1, #298	; 0x12a
   18dca:	4805      	ldr	r0, [pc, #20]	; (18de0 <bt_keys_add_type+0x2c>)
   18dcc:	f00c f87c 	bl	24ec8 <assert_post_action>

	keys->keys |= type;
   18dd0:	89c3      	ldrh	r3, [r0, #14]
   18dd2:	4319      	orrs	r1, r3
   18dd4:	81c1      	strh	r1, [r0, #14]
}
   18dd6:	bd08      	pop	{r3, pc}
   18dd8:	0002f4d7 	.word	0x0002f4d7
   18ddc:	0002b939 	.word	0x0002b939
   18de0:	0002f47f 	.word	0x0002f47f

00018de4 <bt_keys_get_type>:
{
   18de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18de6:	4606      	mov	r6, r0
   18de8:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   18dea:	4615      	mov	r5, r2
   18dec:	b94a      	cbnz	r2, 18e02 <bt_keys_get_type+0x1e>
   18dee:	490c      	ldr	r1, [pc, #48]	; (18e20 <bt_keys_get_type+0x3c>)
   18df0:	480c      	ldr	r0, [pc, #48]	; (18e24 <bt_keys_get_type+0x40>)
   18df2:	23d2      	movs	r3, #210	; 0xd2
   18df4:	4a0c      	ldr	r2, [pc, #48]	; (18e28 <bt_keys_get_type+0x44>)
   18df6:	f00c f86e 	bl	24ed6 <assert_print>
   18dfa:	21d2      	movs	r1, #210	; 0xd2
   18dfc:	480a      	ldr	r0, [pc, #40]	; (18e28 <bt_keys_get_type+0x44>)
   18dfe:	f00c f863 	bl	24ec8 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   18e02:	f7ff ff2d 	bl	18c60 <bt_keys_find>
	if (keys) {
   18e06:	4604      	mov	r4, r0
   18e08:	b940      	cbnz	r0, 18e1c <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   18e0a:	4629      	mov	r1, r5
   18e0c:	4638      	mov	r0, r7
   18e0e:	f7ff fecf 	bl	18bb0 <bt_keys_get_addr>
	if (!keys) {
   18e12:	4604      	mov	r4, r0
   18e14:	b110      	cbz	r0, 18e1c <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   18e16:	4631      	mov	r1, r6
   18e18:	f7ff ffcc 	bl	18db4 <bt_keys_add_type>
}
   18e1c:	4620      	mov	r0, r4
   18e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18e20:	0002f4af 	.word	0x0002f4af
   18e24:	0002b939 	.word	0x0002b939
   18e28:	0002f47f 	.word	0x0002f47f

00018e2c <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   18e2c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   18e2e:	4604      	mov	r4, r0
   18e30:	b958      	cbnz	r0, 18e4a <bt_keys_clear+0x1e>
   18e32:	490c      	ldr	r1, [pc, #48]	; (18e64 <bt_keys_clear+0x38>)
   18e34:	480c      	ldr	r0, [pc, #48]	; (18e68 <bt_keys_clear+0x3c>)
   18e36:	f240 1331 	movw	r3, #305	; 0x131
   18e3a:	4a0c      	ldr	r2, [pc, #48]	; (18e6c <bt_keys_clear+0x40>)
   18e3c:	f00c f84b 	bl	24ed6 <assert_print>
   18e40:	f240 1131 	movw	r1, #305	; 0x131
   18e44:	4809      	ldr	r0, [pc, #36]	; (18e6c <bt_keys_clear+0x40>)
   18e46:	f00c f83f 	bl	24ec8 <assert_post_action>

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   18e4a:	7a03      	ldrb	r3, [r0, #8]
   18e4c:	075b      	lsls	r3, r3, #29
   18e4e:	d501      	bpl.n	18e54 <bt_keys_clear+0x28>
		bt_id_del(keys);
   18e50:	f7f9 ffb0 	bl	12db4 <bt_id_del>
   18e54:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   18e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18e5a:	225c      	movs	r2, #92	; 0x5c
   18e5c:	2100      	movs	r1, #0
   18e5e:	f010 bdda 	b.w	29a16 <memset>
   18e62:	bf00      	nop
   18e64:	0002f4d7 	.word	0x0002f4d7
   18e68:	0002b939 	.word	0x0002b939
   18e6c:	0002f47f 	.word	0x0002f47f

00018e70 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   18e70:	4288      	cmp	r0, r1
{
   18e72:	b510      	push	{r4, lr}
   18e74:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   18e78:	d911      	bls.n	18e9e <sys_memcpy_swap+0x2e>
   18e7a:	188c      	adds	r4, r1, r2
   18e7c:	42a0      	cmp	r0, r4
   18e7e:	d211      	bcs.n	18ea4 <sys_memcpy_swap+0x34>
   18e80:	490d      	ldr	r1, [pc, #52]	; (18eb8 <sys_memcpy_swap+0x48>)
   18e82:	f240 2315 	movw	r3, #533	; 0x215
   18e86:	4a0d      	ldr	r2, [pc, #52]	; (18ebc <sys_memcpy_swap+0x4c>)
   18e88:	480d      	ldr	r0, [pc, #52]	; (18ec0 <sys_memcpy_swap+0x50>)
   18e8a:	f00c f824 	bl	24ed6 <assert_print>
   18e8e:	480d      	ldr	r0, [pc, #52]	; (18ec4 <sys_memcpy_swap+0x54>)
   18e90:	f00c f821 	bl	24ed6 <assert_print>
   18e94:	f240 2115 	movw	r1, #533	; 0x215
   18e98:	4808      	ldr	r0, [pc, #32]	; (18ebc <sys_memcpy_swap+0x4c>)
   18e9a:	f00c f815 	bl	24ec8 <assert_post_action>
   18e9e:	d0ef      	beq.n	18e80 <sys_memcpy_swap+0x10>
   18ea0:	4299      	cmp	r1, r3
   18ea2:	e7ec      	b.n	18e7e <sys_memcpy_swap+0xe>
	psrc += length - 1;
   18ea4:	3a01      	subs	r2, #1
   18ea6:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   18ea8:	f811 2901 	ldrb.w	r2, [r1], #-1
   18eac:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   18eb0:	4283      	cmp	r3, r0
   18eb2:	d1f9      	bne.n	18ea8 <sys_memcpy_swap+0x38>
}
   18eb4:	bd10      	pop	{r4, pc}
   18eb6:	bf00      	nop
   18eb8:	0002e3a7 	.word	0x0002e3a7
   18ebc:	0002e375 	.word	0x0002e375
   18ec0:	0002b939 	.word	0x0002b939
   18ec4:	0002e3fe 	.word	0x0002e3fe

00018ec8 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   18ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18ecc:	b09a      	sub	sp, #104	; 0x68
   18ece:	4616      	mov	r6, r2
   18ed0:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   18ed4:	aa0c      	add	r2, sp, #48	; 0x30
{
   18ed6:	4684      	mov	ip, r0
   18ed8:	468a      	mov	sl, r1
   18eda:	4690      	mov	r8, r2
   18edc:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   18ede:	4b2c      	ldr	r3, [pc, #176]	; (18f90 <bt_crypto_f5+0xc8>)
   18ee0:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   18ee4:	4614      	mov	r4, r2
   18ee6:	6818      	ldr	r0, [r3, #0]
   18ee8:	6859      	ldr	r1, [r3, #4]
   18eea:	3308      	adds	r3, #8
   18eec:	c403      	stmia	r4!, {r0, r1}
   18eee:	4573      	cmp	r3, lr
   18ef0:	4622      	mov	r2, r4
   18ef2:	d1f7      	bne.n	18ee4 <bt_crypto_f5+0x1c>
   18ef4:	6818      	ldr	r0, [r3, #0]
   18ef6:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   18ef8:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   18efa:	6020      	str	r0, [r4, #0]
   18efc:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   18efe:	2220      	movs	r2, #32
   18f00:	a804      	add	r0, sp, #16
   18f02:	f7ff ffb5 	bl	18e70 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   18f06:	466b      	mov	r3, sp
   18f08:	2220      	movs	r2, #32
   18f0a:	4822      	ldr	r0, [pc, #136]	; (18f94 <bt_crypto_f5+0xcc>)
   18f0c:	a904      	add	r1, sp, #16
   18f0e:	f00e ff1a 	bl	27d46 <bt_crypto_aes_cmac>
	if (err) {
   18f12:	4604      	mov	r4, r0
   18f14:	bbc0      	cbnz	r0, 18f88 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   18f16:	2210      	movs	r2, #16
   18f18:	4651      	mov	r1, sl
   18f1a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   18f1e:	f7ff ffa7 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   18f22:	2210      	movs	r2, #16
   18f24:	4631      	mov	r1, r6
   18f26:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   18f2a:	f7ff ffa1 	bl	18e70 <sys_memcpy_swap>
	m[37] = a1->type;
   18f2e:	4629      	mov	r1, r5
   18f30:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18f34:	2206      	movs	r2, #6
   18f36:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   18f3a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18f3e:	f7ff ff97 	bl	18e70 <sys_memcpy_swap>
	m[44] = a2->type;
   18f42:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18f44:	2206      	movs	r2, #6
	m[44] = a2->type;
   18f46:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18f4a:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   18f4e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18f52:	f7ff ff8d 	bl	18e70 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   18f56:	464b      	mov	r3, r9
   18f58:	2235      	movs	r2, #53	; 0x35
   18f5a:	4641      	mov	r1, r8
   18f5c:	4668      	mov	r0, sp
   18f5e:	f00e fef2 	bl	27d46 <bt_crypto_aes_cmac>
	if (err) {
   18f62:	4604      	mov	r4, r0
   18f64:	b980      	cbnz	r0, 18f88 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   18f66:	4648      	mov	r0, r9
   18f68:	f00e fedf 	bl	27d2a <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   18f6c:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   18f6e:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   18f70:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   18f74:	4641      	mov	r1, r8
   18f76:	463b      	mov	r3, r7
   18f78:	4668      	mov	r0, sp
   18f7a:	f00e fee4 	bl	27d46 <bt_crypto_aes_cmac>
	if (err) {
   18f7e:	4604      	mov	r4, r0
   18f80:	b910      	cbnz	r0, 18f88 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   18f82:	4638      	mov	r0, r7
   18f84:	f00e fed1 	bl	27d2a <sys_mem_swap.constprop.0>

	return 0;
}
   18f88:	4620      	mov	r0, r4
   18f8a:	b01a      	add	sp, #104	; 0x68
   18f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18f90:	0002ab28 	.word	0x0002ab28
   18f94:	0002f4f3 	.word	0x0002f4f3

00018f98 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   18f98:	b570      	push	{r4, r5, r6, lr}
   18f9a:	460e      	mov	r6, r1
   18f9c:	461d      	mov	r5, r3
   18f9e:	4614      	mov	r4, r2
   18fa0:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   18fa2:	4601      	mov	r1, r0
   18fa4:	2220      	movs	r2, #32
   18fa6:	a804      	add	r0, sp, #16
   18fa8:	f7ff ff62 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   18fac:	2220      	movs	r2, #32
   18fae:	4631      	mov	r1, r6
   18fb0:	a80c      	add	r0, sp, #48	; 0x30
   18fb2:	f7ff ff5d 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   18fb6:	2210      	movs	r2, #16
   18fb8:	4629      	mov	r1, r5
   18fba:	a814      	add	r0, sp, #80	; 0x50
   18fbc:	f7ff ff58 	bl	18e70 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   18fc0:	2210      	movs	r2, #16
   18fc2:	4621      	mov	r1, r4
   18fc4:	4668      	mov	r0, sp
   18fc6:	f7ff ff53 	bl	18e70 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   18fca:	466b      	mov	r3, sp
   18fcc:	2250      	movs	r2, #80	; 0x50
   18fce:	4618      	mov	r0, r3
   18fd0:	a904      	add	r1, sp, #16
   18fd2:	f00e feb8 	bl	27d46 <bt_crypto_aes_cmac>
	if (err) {
   18fd6:	b940      	cbnz	r0, 18fea <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   18fd8:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18fda:	4a05      	ldr	r2, [pc, #20]	; (18ff0 <bt_crypto_g2+0x58>)
   18fdc:	ba1b      	rev	r3, r3
   18fde:	fbb3 f1f2 	udiv	r1, r3, r2
   18fe2:	fb02 3311 	mls	r3, r2, r1, r3
   18fe6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   18fe8:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   18fea:	b018      	add	sp, #96	; 0x60
   18fec:	bd70      	pop	{r4, r5, r6, pc}
   18fee:	bf00      	nop
   18ff0:	000f4240 	.word	0x000f4240

00018ff4 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   18ff4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   18ff6:	4804      	ldr	r0, [pc, #16]	; (19008 <fs_init+0x14>)
   18ff8:	f010 faea 	bl	295d0 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   18ffc:	4b03      	ldr	r3, [pc, #12]	; (1900c <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   18ffe:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   19000:	e9c3 3300 	strd	r3, r3, [r3]
   19004:	bd08      	pop	{r3, pc}
   19006:	bf00      	nop
   19008:	20021214 	.word	0x20021214
   1900c:	20021228 	.word	0x20021228

00019010 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19010:	2234      	movs	r2, #52	; 0x34
   19012:	4b02      	ldr	r3, [pc, #8]	; (1901c <net_buf_pool_get+0xc>)
   19014:	fb02 3000 	mla	r0, r2, r0, r3
   19018:	4770      	bx	lr
   1901a:	bf00      	nop
   1901c:	20008c04 	.word	0x20008c04

00019020 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19020:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19022:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19024:	4b06      	ldr	r3, [pc, #24]	; (19040 <net_buf_id+0x20>)
   19026:	fb01 3302 	mla	r3, r1, r2, r3
   1902a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1902c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19030:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19032:	331b      	adds	r3, #27
   19034:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   19038:	fbb0 f0f3 	udiv	r0, r0, r3
   1903c:	4770      	bx	lr
   1903e:	bf00      	nop
   19040:	20008c04 	.word	0x20008c04

00019044 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19044:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19046:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19048:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1904a:	4b09      	ldr	r3, [pc, #36]	; (19070 <fixed_data_alloc+0x2c>)
   1904c:	fb04 3302 	mla	r3, r4, r2, r3
   19050:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   19052:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19054:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19056:	681a      	ldr	r2, [r3, #0]
   19058:	4294      	cmp	r4, r2
   1905a:	bf94      	ite	ls
   1905c:	600c      	strls	r4, [r1, #0]
   1905e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19060:	e9d3 5400 	ldrd	r5, r4, [r3]
   19064:	f7ff ffdc 	bl	19020 <net_buf_id>
}
   19068:	fb05 4000 	mla	r0, r5, r0, r4
   1906c:	bd38      	pop	{r3, r4, r5, pc}
   1906e:	bf00      	nop
   19070:	20008c04 	.word	0x20008c04

00019074 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19078:	b085      	sub	sp, #20
   1907a:	9103      	str	r1, [sp, #12]
   1907c:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1907e:	4619      	mov	r1, r3
   19080:	4610      	mov	r0, r2
{
   19082:	4692      	mov	sl, r2
   19084:	4699      	mov	r9, r3
   19086:	4690      	mov	r8, r2
   19088:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1908a:	f010 fb85 	bl	29798 <sys_clock_timeout_end_calc>
   1908e:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   19092:	b945      	cbnz	r5, 190a6 <net_buf_alloc_len+0x32>
   19094:	4966      	ldr	r1, [pc, #408]	; (19230 <net_buf_alloc_len+0x1bc>)
   19096:	23f4      	movs	r3, #244	; 0xf4
   19098:	4a66      	ldr	r2, [pc, #408]	; (19234 <net_buf_alloc_len+0x1c0>)
   1909a:	4867      	ldr	r0, [pc, #412]	; (19238 <net_buf_alloc_len+0x1c4>)
   1909c:	f00b ff1b 	bl	24ed6 <assert_print>
   190a0:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   190a2:	4864      	ldr	r0, [pc, #400]	; (19234 <net_buf_alloc_len+0x1c0>)
   190a4:	e019      	b.n	190da <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   190a6:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   190aa:	f04f 0320 	mov.w	r3, #32
   190ae:	f3ef 8b11 	mrs	fp, BASEPRI
   190b2:	f383 8812 	msr	BASEPRI_MAX, r3
   190b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   190ba:	4630      	mov	r0, r6
   190bc:	f006 fc88 	bl	1f9d0 <z_spin_lock_valid>
   190c0:	b968      	cbnz	r0, 190de <net_buf_alloc_len+0x6a>
   190c2:	2394      	movs	r3, #148	; 0x94
   190c4:	4a5d      	ldr	r2, [pc, #372]	; (1923c <net_buf_alloc_len+0x1c8>)
   190c6:	495e      	ldr	r1, [pc, #376]	; (19240 <net_buf_alloc_len+0x1cc>)
   190c8:	485b      	ldr	r0, [pc, #364]	; (19238 <net_buf_alloc_len+0x1c4>)
   190ca:	f00b ff04 	bl	24ed6 <assert_print>
   190ce:	4631      	mov	r1, r6
   190d0:	485c      	ldr	r0, [pc, #368]	; (19244 <net_buf_alloc_len+0x1d0>)
   190d2:	f00b ff00 	bl	24ed6 <assert_print>
   190d6:	2194      	movs	r1, #148	; 0x94
   190d8:	4858      	ldr	r0, [pc, #352]	; (1923c <net_buf_alloc_len+0x1c8>)
   190da:	f00b fef5 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   190de:	4630      	mov	r0, r6
   190e0:	f006 fc92 	bl	1fa08 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   190e4:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   190e6:	2b00      	cmp	r3, #0
   190e8:	d070      	beq.n	191cc <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   190ea:	8c2a      	ldrh	r2, [r5, #32]
   190ec:	429a      	cmp	r2, r3
   190ee:	d94d      	bls.n	1918c <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   190f0:	2200      	movs	r2, #0
   190f2:	2300      	movs	r3, #0
   190f4:	4628      	mov	r0, r5
   190f6:	f006 feb9 	bl	1fe6c <z_impl_k_queue_get>
			if (buf) {
   190fa:	4604      	mov	r4, r0
   190fc:	2800      	cmp	r0, #0
   190fe:	d045      	beq.n	1918c <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19100:	4630      	mov	r0, r6
   19102:	f006 fc73 	bl	1f9ec <z_spin_unlock_valid>
   19106:	b958      	cbnz	r0, 19120 <net_buf_alloc_len+0xac>
   19108:	23c2      	movs	r3, #194	; 0xc2
   1910a:	4a4c      	ldr	r2, [pc, #304]	; (1923c <net_buf_alloc_len+0x1c8>)
   1910c:	494e      	ldr	r1, [pc, #312]	; (19248 <net_buf_alloc_len+0x1d4>)
   1910e:	484a      	ldr	r0, [pc, #296]	; (19238 <net_buf_alloc_len+0x1c4>)
   19110:	f00b fee1 	bl	24ed6 <assert_print>
   19114:	4631      	mov	r1, r6
   19116:	484d      	ldr	r0, [pc, #308]	; (1924c <net_buf_alloc_len+0x1d8>)
   19118:	f00b fedd 	bl	24ed6 <assert_print>
   1911c:	21c2      	movs	r1, #194	; 0xc2
   1911e:	e7db      	b.n	190d8 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   19120:	f38b 8811 	msr	BASEPRI, fp
   19124:	f3bf 8f6f 	isb	sy
	if (size) {
   19128:	9d03      	ldr	r5, [sp, #12]
   1912a:	2d00      	cmp	r5, #0
   1912c:	d074      	beq.n	19218 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1912e:	ea59 030a 	orrs.w	r3, r9, sl
   19132:	d012      	beq.n	1915a <net_buf_alloc_len+0xe6>
   19134:	f1b9 3fff 	cmp.w	r9, #4294967295
   19138:	bf08      	it	eq
   1913a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1913e:	d00c      	beq.n	1915a <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   19140:	f009 fa14 	bl	2256c <sys_clock_tick_get>
   19144:	9b01      	ldr	r3, [sp, #4]
   19146:	ebb3 0800 	subs.w	r8, r3, r0
   1914a:	9b02      	ldr	r3, [sp, #8]
   1914c:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   19150:	2f00      	cmp	r7, #0
   19152:	bfbc      	itt	lt
   19154:	f04f 0800 	movlt.w	r8, #0
   19158:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1915a:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1915e:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19160:	4e3b      	ldr	r6, [pc, #236]	; (19250 <net_buf_alloc_len+0x1dc>)
   19162:	4642      	mov	r2, r8
   19164:	fb09 6303 	mla	r3, r9, r3, r6
   19168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1916a:	4620      	mov	r0, r4
   1916c:	681b      	ldr	r3, [r3, #0]
   1916e:	a903      	add	r1, sp, #12
   19170:	f8d3 a000 	ldr.w	sl, [r3]
   19174:	463b      	mov	r3, r7
   19176:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   19178:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1917a:	2800      	cmp	r0, #0
   1917c:	d13c      	bne.n	191f8 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1917e:	7aa0      	ldrb	r0, [r4, #10]
   19180:	4621      	mov	r1, r4
   19182:	fb00 6009 	mla	r0, r0, r9, r6
   19186:	f010 fa4e 	bl	29626 <k_queue_prepend>
}
   1918a:	e030      	b.n	191ee <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1918c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1918e:	4630      	mov	r0, r6
   19190:	1e63      	subs	r3, r4, #1
   19192:	846b      	strh	r3, [r5, #34]	; 0x22
   19194:	f006 fc2a 	bl	1f9ec <z_spin_unlock_valid>
   19198:	2800      	cmp	r0, #0
   1919a:	d0b5      	beq.n	19108 <net_buf_alloc_len+0x94>
   1919c:	f38b 8811 	msr	BASEPRI, fp
   191a0:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   191a4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   191a8:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   191aa:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   191ac:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   191ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   191b0:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   191b4:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   191b8:	4b25      	ldr	r3, [pc, #148]	; (19250 <net_buf_alloc_len+0x1dc>)
   191ba:	4a26      	ldr	r2, [pc, #152]	; (19254 <net_buf_alloc_len+0x1e0>)
   191bc:	1aeb      	subs	r3, r5, r3
   191be:	109b      	asrs	r3, r3, #2
   191c0:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   191c2:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   191c4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   191c8:	72e3      	strb	r3, [r4, #11]
		goto success;
   191ca:	e7ad      	b.n	19128 <net_buf_alloc_len+0xb4>
   191cc:	4630      	mov	r0, r6
   191ce:	f006 fc0d 	bl	1f9ec <z_spin_unlock_valid>
   191d2:	2800      	cmp	r0, #0
   191d4:	d098      	beq.n	19108 <net_buf_alloc_len+0x94>
   191d6:	f38b 8811 	msr	BASEPRI, fp
   191da:	f3bf 8f6f 	isb	sy
   191de:	4652      	mov	r2, sl
   191e0:	464b      	mov	r3, r9
   191e2:	4628      	mov	r0, r5
   191e4:	f006 fe42 	bl	1fe6c <z_impl_k_queue_get>
	if (!buf) {
   191e8:	4604      	mov	r4, r0
   191ea:	2800      	cmp	r0, #0
   191ec:	d19c      	bne.n	19128 <net_buf_alloc_len+0xb4>
		return NULL;
   191ee:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   191f0:	4620      	mov	r0, r4
   191f2:	b005      	add	sp, #20
   191f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   191f8:	9b03      	ldr	r3, [sp, #12]
   191fa:	429d      	cmp	r5, r3
   191fc:	d90d      	bls.n	1921a <net_buf_alloc_len+0x1a6>
   191fe:	4916      	ldr	r1, [pc, #88]	; (19258 <net_buf_alloc_len+0x1e4>)
   19200:	f240 1355 	movw	r3, #341	; 0x155
   19204:	4a0b      	ldr	r2, [pc, #44]	; (19234 <net_buf_alloc_len+0x1c0>)
   19206:	480c      	ldr	r0, [pc, #48]	; (19238 <net_buf_alloc_len+0x1c4>)
   19208:	f00b fe65 	bl	24ed6 <assert_print>
   1920c:	4813      	ldr	r0, [pc, #76]	; (1925c <net_buf_alloc_len+0x1e8>)
   1920e:	f00b fe62 	bl	24ed6 <assert_print>
   19212:	f240 1155 	movw	r1, #341	; 0x155
   19216:	e744      	b.n	190a2 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   19218:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1921a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1921c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1921e:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   19220:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   19222:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   19224:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   19226:	6963      	ldr	r3, [r4, #20]
   19228:	8262      	strh	r2, [r4, #18]
   1922a:	60e3      	str	r3, [r4, #12]
}
   1922c:	e7e0      	b.n	191f0 <net_buf_alloc_len+0x17c>
   1922e:	bf00      	nop
   19230:	0002f55f 	.word	0x0002f55f
   19234:	0002f510 	.word	0x0002f510
   19238:	0002b939 	.word	0x0002b939
   1923c:	0002c76f 	.word	0x0002c76f
   19240:	0002c7c8 	.word	0x0002c7c8
   19244:	0002c7dd 	.word	0x0002c7dd
   19248:	0002c79c 	.word	0x0002c79c
   1924c:	0002c7b3 	.word	0x0002c7b3
   19250:	20008c04 	.word	0x20008c04
   19254:	c4ec4ec5 	.word	0xc4ec4ec5
   19258:	0002f564 	.word	0x0002f564
   1925c:	0002f575 	.word	0x0002f575

00019260 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   19260:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   19262:	b958      	cbnz	r0, 1927c <net_buf_simple_reserve+0x1c>
   19264:	490d      	ldr	r1, [pc, #52]	; (1929c <net_buf_simple_reserve+0x3c>)
   19266:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1926a:	4a0d      	ldr	r2, [pc, #52]	; (192a0 <net_buf_simple_reserve+0x40>)
   1926c:	480d      	ldr	r0, [pc, #52]	; (192a4 <net_buf_simple_reserve+0x44>)
   1926e:	f00b fe32 	bl	24ed6 <assert_print>
   19272:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   19276:	480a      	ldr	r0, [pc, #40]	; (192a0 <net_buf_simple_reserve+0x40>)
   19278:	f00b fe26 	bl	24ec8 <assert_post_action>
   1927c:	8883      	ldrh	r3, [r0, #4]
   1927e:	b14b      	cbz	r3, 19294 <net_buf_simple_reserve+0x34>
   19280:	4909      	ldr	r1, [pc, #36]	; (192a8 <net_buf_simple_reserve+0x48>)
   19282:	f240 13b9 	movw	r3, #441	; 0x1b9
   19286:	4a06      	ldr	r2, [pc, #24]	; (192a0 <net_buf_simple_reserve+0x40>)
   19288:	4806      	ldr	r0, [pc, #24]	; (192a4 <net_buf_simple_reserve+0x44>)
   1928a:	f00b fe24 	bl	24ed6 <assert_print>
   1928e:	f240 11b9 	movw	r1, #441	; 0x1b9
   19292:	e7f0      	b.n	19276 <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   19294:	6883      	ldr	r3, [r0, #8]
   19296:	440b      	add	r3, r1
   19298:	6003      	str	r3, [r0, #0]
}
   1929a:	bd08      	pop	{r3, pc}
   1929c:	0002f5f4 	.word	0x0002f5f4
   192a0:	0002f510 	.word	0x0002f510
   192a4:	0002b939 	.word	0x0002b939
   192a8:	0002f578 	.word	0x0002f578

000192ac <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   192ac:	b570      	push	{r4, r5, r6, lr}
   192ae:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   192b0:	4605      	mov	r5, r0
   192b2:	b958      	cbnz	r0, 192cc <net_buf_slist_put+0x20>
   192b4:	4928      	ldr	r1, [pc, #160]	; (19358 <net_buf_slist_put+0xac>)
   192b6:	f240 13c5 	movw	r3, #453	; 0x1c5
   192ba:	4a28      	ldr	r2, [pc, #160]	; (1935c <net_buf_slist_put+0xb0>)
   192bc:	4828      	ldr	r0, [pc, #160]	; (19360 <net_buf_slist_put+0xb4>)
   192be:	f00b fe0a 	bl	24ed6 <assert_print>
   192c2:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   192c6:	4825      	ldr	r0, [pc, #148]	; (1935c <net_buf_slist_put+0xb0>)
   192c8:	f00b fdfe 	bl	24ec8 <assert_post_action>
   192cc:	b949      	cbnz	r1, 192e2 <net_buf_slist_put+0x36>
   192ce:	4925      	ldr	r1, [pc, #148]	; (19364 <net_buf_slist_put+0xb8>)
   192d0:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   192d4:	4a21      	ldr	r2, [pc, #132]	; (1935c <net_buf_slist_put+0xb0>)
   192d6:	4822      	ldr	r0, [pc, #136]	; (19360 <net_buf_slist_put+0xb4>)
   192d8:	f00b fdfd 	bl	24ed6 <assert_print>
   192dc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   192e0:	e7f1      	b.n	192c6 <net_buf_slist_put+0x1a>
	__asm__ volatile(
   192e2:	f04f 0320 	mov.w	r3, #32
   192e6:	f3ef 8611 	mrs	r6, BASEPRI
   192ea:	f383 8812 	msr	BASEPRI_MAX, r3
   192ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   192f2:	481d      	ldr	r0, [pc, #116]	; (19368 <net_buf_slist_put+0xbc>)
   192f4:	f006 fb6c 	bl	1f9d0 <z_spin_lock_valid>
   192f8:	b960      	cbnz	r0, 19314 <net_buf_slist_put+0x68>
   192fa:	2394      	movs	r3, #148	; 0x94
   192fc:	4a1b      	ldr	r2, [pc, #108]	; (1936c <net_buf_slist_put+0xc0>)
   192fe:	491c      	ldr	r1, [pc, #112]	; (19370 <net_buf_slist_put+0xc4>)
   19300:	4817      	ldr	r0, [pc, #92]	; (19360 <net_buf_slist_put+0xb4>)
   19302:	f00b fde8 	bl	24ed6 <assert_print>
   19306:	4918      	ldr	r1, [pc, #96]	; (19368 <net_buf_slist_put+0xbc>)
   19308:	481a      	ldr	r0, [pc, #104]	; (19374 <net_buf_slist_put+0xc8>)
   1930a:	f00b fde4 	bl	24ed6 <assert_print>
   1930e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19310:	4816      	ldr	r0, [pc, #88]	; (1936c <net_buf_slist_put+0xc0>)
   19312:	e7d9      	b.n	192c8 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   19314:	4814      	ldr	r0, [pc, #80]	; (19368 <net_buf_slist_put+0xbc>)
   19316:	f006 fb77 	bl	1fa08 <z_spin_lock_set_owner>
	parent->next = child;
   1931a:	2300      	movs	r3, #0
   1931c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1931e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   19320:	b98b      	cbnz	r3, 19346 <net_buf_slist_put+0x9a>
	list->head = node;
   19322:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19326:	4810      	ldr	r0, [pc, #64]	; (19368 <net_buf_slist_put+0xbc>)
   19328:	f006 fb60 	bl	1f9ec <z_spin_unlock_valid>
   1932c:	b970      	cbnz	r0, 1934c <net_buf_slist_put+0xa0>
   1932e:	23c2      	movs	r3, #194	; 0xc2
   19330:	4a0e      	ldr	r2, [pc, #56]	; (1936c <net_buf_slist_put+0xc0>)
   19332:	4911      	ldr	r1, [pc, #68]	; (19378 <net_buf_slist_put+0xcc>)
   19334:	480a      	ldr	r0, [pc, #40]	; (19360 <net_buf_slist_put+0xb4>)
   19336:	f00b fdce 	bl	24ed6 <assert_print>
   1933a:	490b      	ldr	r1, [pc, #44]	; (19368 <net_buf_slist_put+0xbc>)
   1933c:	480f      	ldr	r0, [pc, #60]	; (1937c <net_buf_slist_put+0xd0>)
   1933e:	f00b fdca 	bl	24ed6 <assert_print>
   19342:	21c2      	movs	r1, #194	; 0xc2
   19344:	e7e4      	b.n	19310 <net_buf_slist_put+0x64>
	parent->next = child;
   19346:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19348:	606c      	str	r4, [r5, #4]
}
   1934a:	e7ec      	b.n	19326 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1934c:	f386 8811 	msr	BASEPRI, r6
   19350:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   19354:	bd70      	pop	{r4, r5, r6, pc}
   19356:	bf00      	nop
   19358:	0002e113 	.word	0x0002e113
   1935c:	0002f510 	.word	0x0002f510
   19360:	0002b939 	.word	0x0002b939
   19364:	0002f5f4 	.word	0x0002f5f4
   19368:	20021230 	.word	0x20021230
   1936c:	0002c76f 	.word	0x0002c76f
   19370:	0002c7c8 	.word	0x0002c7c8
   19374:	0002c7dd 	.word	0x0002c7dd
   19378:	0002c79c 	.word	0x0002c79c
   1937c:	0002c7b3 	.word	0x0002c7b3

00019380 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   19380:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   19382:	4604      	mov	r4, r0
   19384:	b958      	cbnz	r0, 1939e <net_buf_slist_get+0x1e>
   19386:	4923      	ldr	r1, [pc, #140]	; (19414 <net_buf_slist_get+0x94>)
   19388:	4823      	ldr	r0, [pc, #140]	; (19418 <net_buf_slist_get+0x98>)
   1938a:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1938e:	4a23      	ldr	r2, [pc, #140]	; (1941c <net_buf_slist_get+0x9c>)
   19390:	f00b fda1 	bl	24ed6 <assert_print>
   19394:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   19398:	4820      	ldr	r0, [pc, #128]	; (1941c <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1939a:	f00b fd95 	bl	24ec8 <assert_post_action>
	__asm__ volatile(
   1939e:	f04f 0320 	mov.w	r3, #32
   193a2:	f3ef 8611 	mrs	r6, BASEPRI
   193a6:	f383 8812 	msr	BASEPRI_MAX, r3
   193aa:	f3bf 8f6f 	isb	sy
   193ae:	481c      	ldr	r0, [pc, #112]	; (19420 <net_buf_slist_get+0xa0>)
   193b0:	f006 fb0e 	bl	1f9d0 <z_spin_lock_valid>
   193b4:	b960      	cbnz	r0, 193d0 <net_buf_slist_get+0x50>
   193b6:	2394      	movs	r3, #148	; 0x94
   193b8:	4a1a      	ldr	r2, [pc, #104]	; (19424 <net_buf_slist_get+0xa4>)
   193ba:	491b      	ldr	r1, [pc, #108]	; (19428 <net_buf_slist_get+0xa8>)
   193bc:	4816      	ldr	r0, [pc, #88]	; (19418 <net_buf_slist_get+0x98>)
   193be:	f00b fd8a 	bl	24ed6 <assert_print>
   193c2:	4917      	ldr	r1, [pc, #92]	; (19420 <net_buf_slist_get+0xa0>)
   193c4:	4819      	ldr	r0, [pc, #100]	; (1942c <net_buf_slist_get+0xac>)
   193c6:	f00b fd86 	bl	24ed6 <assert_print>
   193ca:	2194      	movs	r1, #148	; 0x94
   193cc:	4815      	ldr	r0, [pc, #84]	; (19424 <net_buf_slist_get+0xa4>)
   193ce:	e7e4      	b.n	1939a <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   193d0:	4813      	ldr	r0, [pc, #76]	; (19420 <net_buf_slist_get+0xa0>)
   193d2:	f006 fb19 	bl	1fa08 <z_spin_lock_set_owner>
	return list->head;
   193d6:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   193d8:	b12d      	cbz	r5, 193e6 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   193da:	6862      	ldr	r2, [r4, #4]
	return node->next;
   193dc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   193de:	4295      	cmp	r5, r2
	list->head = node;
   193e0:	6023      	str	r3, [r4, #0]
	list->tail = node;
   193e2:	bf08      	it	eq
   193e4:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   193e6:	480e      	ldr	r0, [pc, #56]	; (19420 <net_buf_slist_get+0xa0>)
   193e8:	f006 fb00 	bl	1f9ec <z_spin_unlock_valid>
   193ec:	b958      	cbnz	r0, 19406 <net_buf_slist_get+0x86>
   193ee:	23c2      	movs	r3, #194	; 0xc2
   193f0:	4a0c      	ldr	r2, [pc, #48]	; (19424 <net_buf_slist_get+0xa4>)
   193f2:	490f      	ldr	r1, [pc, #60]	; (19430 <net_buf_slist_get+0xb0>)
   193f4:	4808      	ldr	r0, [pc, #32]	; (19418 <net_buf_slist_get+0x98>)
   193f6:	f00b fd6e 	bl	24ed6 <assert_print>
   193fa:	4909      	ldr	r1, [pc, #36]	; (19420 <net_buf_slist_get+0xa0>)
   193fc:	480d      	ldr	r0, [pc, #52]	; (19434 <net_buf_slist_get+0xb4>)
   193fe:	f00b fd6a 	bl	24ed6 <assert_print>
   19402:	21c2      	movs	r1, #194	; 0xc2
   19404:	e7e2      	b.n	193cc <net_buf_slist_get+0x4c>
	__asm__ volatile(
   19406:	f386 8811 	msr	BASEPRI, r6
   1940a:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1940e:	4628      	mov	r0, r5
   19410:	bd70      	pop	{r4, r5, r6, pc}
   19412:	bf00      	nop
   19414:	0002e113 	.word	0x0002e113
   19418:	0002b939 	.word	0x0002b939
   1941c:	0002f510 	.word	0x0002f510
   19420:	20021230 	.word	0x20021230
   19424:	0002c76f 	.word	0x0002c76f
   19428:	0002c7c8 	.word	0x0002c7c8
   1942c:	0002c7dd 	.word	0x0002c7dd
   19430:	0002c79c 	.word	0x0002c79c
   19434:	0002c7b3 	.word	0x0002c7b3

00019438 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   19438:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1943a:	b958      	cbnz	r0, 19454 <net_buf_put+0x1c>
   1943c:	490d      	ldr	r1, [pc, #52]	; (19474 <net_buf_put+0x3c>)
   1943e:	f240 13df 	movw	r3, #479	; 0x1df
   19442:	4a0d      	ldr	r2, [pc, #52]	; (19478 <net_buf_put+0x40>)
   19444:	480d      	ldr	r0, [pc, #52]	; (1947c <net_buf_put+0x44>)
   19446:	f00b fd46 	bl	24ed6 <assert_print>
   1944a:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1944e:	480a      	ldr	r0, [pc, #40]	; (19478 <net_buf_put+0x40>)
   19450:	f00b fd3a 	bl	24ec8 <assert_post_action>
   19454:	b949      	cbnz	r1, 1946a <net_buf_put+0x32>
   19456:	490a      	ldr	r1, [pc, #40]	; (19480 <net_buf_put+0x48>)
   19458:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1945c:	4a06      	ldr	r2, [pc, #24]	; (19478 <net_buf_put+0x40>)
   1945e:	4807      	ldr	r0, [pc, #28]	; (1947c <net_buf_put+0x44>)
   19460:	f00b fd39 	bl	24ed6 <assert_print>
   19464:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   19468:	e7f1      	b.n	1944e <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1946a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1946e:	f010 b8cf 	b.w	29610 <k_queue_append>
   19472:	bf00      	nop
   19474:	0002f587 	.word	0x0002f587
   19478:	0002f510 	.word	0x0002f510
   1947c:	0002b939 	.word	0x0002b939
   19480:	0002f5f4 	.word	0x0002f5f4

00019484 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   19488:	4605      	mov	r5, r0
   1948a:	b328      	cbz	r0, 194d8 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1948c:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1948e:	f04f 0834 	mov.w	r8, #52	; 0x34
   19492:	4e1a      	ldr	r6, [pc, #104]	; (194fc <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   19494:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   19496:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   19498:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1949a:	3b01      	subs	r3, #1
   1949c:	b2db      	uxtb	r3, r3
   1949e:	7223      	strb	r3, [r4, #8]
   194a0:	b9c3      	cbnz	r3, 194d4 <net_buf_unref+0x50>
		if (buf->__buf) {
   194a2:	6961      	ldr	r1, [r4, #20]
   194a4:	b159      	cbz	r1, 194be <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   194a6:	7a63      	ldrb	r3, [r4, #9]
   194a8:	07db      	lsls	r3, r3, #31
   194aa:	d407      	bmi.n	194bc <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   194ac:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   194ae:	4620      	mov	r0, r4
   194b0:	fb08 6303 	mla	r3, r8, r3, r6
   194b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   194b6:	681b      	ldr	r3, [r3, #0]
   194b8:	689b      	ldr	r3, [r3, #8]
   194ba:	4798      	blx	r3
			buf->__buf = NULL;
   194bc:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   194be:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   194c0:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   194c2:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   194c6:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   194c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   194ca:	b18b      	cbz	r3, 194f0 <net_buf_unref+0x6c>
			pool->destroy(buf);
   194cc:	4620      	mov	r0, r4
   194ce:	4798      	blx	r3
	while (buf) {
   194d0:	2d00      	cmp	r5, #0
   194d2:	d1df      	bne.n	19494 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   194d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   194d8:	4909      	ldr	r1, [pc, #36]	; (19500 <net_buf_unref+0x7c>)
   194da:	480a      	ldr	r0, [pc, #40]	; (19504 <net_buf_unref+0x80>)
   194dc:	f240 13eb 	movw	r3, #491	; 0x1eb
   194e0:	4a09      	ldr	r2, [pc, #36]	; (19508 <net_buf_unref+0x84>)
   194e2:	f00b fcf8 	bl	24ed6 <assert_print>
   194e6:	f240 11eb 	movw	r1, #491	; 0x1eb
   194ea:	4807      	ldr	r0, [pc, #28]	; (19508 <net_buf_unref+0x84>)
   194ec:	f00b fcec 	bl	24ec8 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   194f0:	4621      	mov	r1, r4
   194f2:	fb00 6008 	mla	r0, r0, r8, r6
   194f6:	f010 f896 	bl	29626 <k_queue_prepend>
}
   194fa:	e7e9      	b.n	194d0 <net_buf_unref+0x4c>
   194fc:	20008c04 	.word	0x20008c04
   19500:	0002f5f4 	.word	0x0002f5f4
   19504:	0002b939 	.word	0x0002b939
   19508:	0002f510 	.word	0x0002f510

0001950c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1950c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1950e:	b958      	cbnz	r0, 19528 <net_buf_ref+0x1c>
   19510:	4907      	ldr	r1, [pc, #28]	; (19530 <net_buf_ref+0x24>)
   19512:	4808      	ldr	r0, [pc, #32]	; (19534 <net_buf_ref+0x28>)
   19514:	f240 231a 	movw	r3, #538	; 0x21a
   19518:	4a07      	ldr	r2, [pc, #28]	; (19538 <net_buf_ref+0x2c>)
   1951a:	f00b fcdc 	bl	24ed6 <assert_print>
   1951e:	f240 211a 	movw	r1, #538	; 0x21a
   19522:	4805      	ldr	r0, [pc, #20]	; (19538 <net_buf_ref+0x2c>)
   19524:	f00b fcd0 	bl	24ec8 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   19528:	7a02      	ldrb	r2, [r0, #8]
   1952a:	3201      	adds	r2, #1
   1952c:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1952e:	bd08      	pop	{r3, pc}
   19530:	0002f5f4 	.word	0x0002f5f4
   19534:	0002b939 	.word	0x0002b939
   19538:	0002f510 	.word	0x0002f510

0001953c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1953c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1953e:	4603      	mov	r3, r0
   19540:	b958      	cbnz	r0, 1955a <net_buf_frag_last+0x1e>
   19542:	4908      	ldr	r1, [pc, #32]	; (19564 <net_buf_frag_last+0x28>)
   19544:	4808      	ldr	r0, [pc, #32]	; (19568 <net_buf_frag_last+0x2c>)
   19546:	f240 2357 	movw	r3, #599	; 0x257
   1954a:	4a08      	ldr	r2, [pc, #32]	; (1956c <net_buf_frag_last+0x30>)
   1954c:	f00b fcc3 	bl	24ed6 <assert_print>
   19550:	f240 2157 	movw	r1, #599	; 0x257
   19554:	4805      	ldr	r0, [pc, #20]	; (1956c <net_buf_frag_last+0x30>)
   19556:	f00b fcb7 	bl	24ec8 <assert_post_action>

	while (buf->frags) {
   1955a:	4618      	mov	r0, r3
   1955c:	685b      	ldr	r3, [r3, #4]
   1955e:	2b00      	cmp	r3, #0
   19560:	d1fb      	bne.n	1955a <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   19562:	bd08      	pop	{r3, pc}
   19564:	0002f5f4 	.word	0x0002f5f4
   19568:	0002b939 	.word	0x0002b939
   1956c:	0002f510 	.word	0x0002f510

00019570 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   19570:	b570      	push	{r4, r5, r6, lr}
   19572:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   19574:	4604      	mov	r4, r0
   19576:	b958      	cbnz	r0, 19590 <net_buf_frag_insert+0x20>
   19578:	490f      	ldr	r1, [pc, #60]	; (195b8 <net_buf_frag_insert+0x48>)
   1957a:	f240 2362 	movw	r3, #610	; 0x262
   1957e:	4a0f      	ldr	r2, [pc, #60]	; (195bc <net_buf_frag_insert+0x4c>)
   19580:	480f      	ldr	r0, [pc, #60]	; (195c0 <net_buf_frag_insert+0x50>)
   19582:	f00b fca8 	bl	24ed6 <assert_print>
   19586:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1958a:	480c      	ldr	r0, [pc, #48]	; (195bc <net_buf_frag_insert+0x4c>)
   1958c:	f00b fc9c 	bl	24ec8 <assert_post_action>
   19590:	b949      	cbnz	r1, 195a6 <net_buf_frag_insert+0x36>
   19592:	490c      	ldr	r1, [pc, #48]	; (195c4 <net_buf_frag_insert+0x54>)
   19594:	f240 2363 	movw	r3, #611	; 0x263
   19598:	4a08      	ldr	r2, [pc, #32]	; (195bc <net_buf_frag_insert+0x4c>)
   1959a:	4809      	ldr	r0, [pc, #36]	; (195c0 <net_buf_frag_insert+0x50>)
   1959c:	f00b fc9b 	bl	24ed6 <assert_print>
   195a0:	f240 2163 	movw	r1, #611	; 0x263
   195a4:	e7f1      	b.n	1958a <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   195a6:	6846      	ldr	r6, [r0, #4]
   195a8:	b11e      	cbz	r6, 195b2 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   195aa:	4608      	mov	r0, r1
   195ac:	f7ff ffc6 	bl	1953c <net_buf_frag_last>
   195b0:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   195b2:	6065      	str	r5, [r4, #4]
}
   195b4:	bd70      	pop	{r4, r5, r6, pc}
   195b6:	bf00      	nop
   195b8:	0002f58c 	.word	0x0002f58c
   195bc:	0002f510 	.word	0x0002f510
   195c0:	0002b939 	.word	0x0002b939
   195c4:	0002f593 	.word	0x0002f593

000195c8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   195c8:	b538      	push	{r3, r4, r5, lr}
   195ca:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   195cc:	460c      	mov	r4, r1
   195ce:	b959      	cbnz	r1, 195e8 <net_buf_frag_add+0x20>
   195d0:	490c      	ldr	r1, [pc, #48]	; (19604 <net_buf_frag_add+0x3c>)
   195d2:	480d      	ldr	r0, [pc, #52]	; (19608 <net_buf_frag_add+0x40>)
   195d4:	f240 236e 	movw	r3, #622	; 0x26e
   195d8:	4a0c      	ldr	r2, [pc, #48]	; (1960c <net_buf_frag_add+0x44>)
   195da:	f00b fc7c 	bl	24ed6 <assert_print>
   195de:	f240 216e 	movw	r1, #622	; 0x26e
   195e2:	480a      	ldr	r0, [pc, #40]	; (1960c <net_buf_frag_add+0x44>)
   195e4:	f00b fc70 	bl	24ec8 <assert_post_action>

	if (!head) {
   195e8:	b920      	cbnz	r0, 195f4 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   195ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   195ee:	4608      	mov	r0, r1
   195f0:	f7ff bf8c 	b.w	1950c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   195f4:	f7ff ffa2 	bl	1953c <net_buf_frag_last>
   195f8:	4621      	mov	r1, r4
   195fa:	f7ff ffb9 	bl	19570 <net_buf_frag_insert>
}
   195fe:	4628      	mov	r0, r5
   19600:	bd38      	pop	{r3, r4, r5, pc}
   19602:	bf00      	nop
   19604:	0002f593 	.word	0x0002f593
   19608:	0002b939 	.word	0x0002b939
   1960c:	0002f510 	.word	0x0002f510

00019610 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   19610:	b508      	push	{r3, lr}
   19612:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19614:	6800      	ldr	r0, [r0, #0]
   19616:	689a      	ldr	r2, [r3, #8]
   19618:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1961a:	4291      	cmp	r1, r2
   1961c:	d90b      	bls.n	19636 <net_buf_simple_push+0x26>
   1961e:	4909      	ldr	r1, [pc, #36]	; (19644 <net_buf_simple_push+0x34>)
   19620:	4809      	ldr	r0, [pc, #36]	; (19648 <net_buf_simple_push+0x38>)
   19622:	f240 33f2 	movw	r3, #1010	; 0x3f2
   19626:	4a09      	ldr	r2, [pc, #36]	; (1964c <net_buf_simple_push+0x3c>)
   19628:	f00b fc55 	bl	24ed6 <assert_print>
   1962c:	f240 31f2 	movw	r1, #1010	; 0x3f2
   19630:	4806      	ldr	r0, [pc, #24]	; (1964c <net_buf_simple_push+0x3c>)
   19632:	f00b fc49 	bl	24ec8 <assert_post_action>
	buf->len += len;
   19636:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   19638:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1963a:	4411      	add	r1, r2
	buf->data -= len;
   1963c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1963e:	8099      	strh	r1, [r3, #4]
}
   19640:	bd08      	pop	{r3, pc}
   19642:	bf00      	nop
   19644:	0002f5a8 	.word	0x0002f5a8
   19648:	0002b939 	.word	0x0002b939
   1964c:	0002f510 	.word	0x0002f510

00019650 <net_buf_simple_pull>:
{
   19650:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   19652:	8882      	ldrh	r2, [r0, #4]
{
   19654:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   19656:	428a      	cmp	r2, r1
   19658:	d20b      	bcs.n	19672 <net_buf_simple_pull+0x22>
   1965a:	4909      	ldr	r1, [pc, #36]	; (19680 <net_buf_simple_pull+0x30>)
   1965c:	4809      	ldr	r0, [pc, #36]	; (19684 <net_buf_simple_pull+0x34>)
   1965e:	f240 4352 	movw	r3, #1106	; 0x452
   19662:	4a09      	ldr	r2, [pc, #36]	; (19688 <net_buf_simple_pull+0x38>)
   19664:	f00b fc37 	bl	24ed6 <assert_print>
   19668:	f240 4152 	movw	r1, #1106	; 0x452
   1966c:	4806      	ldr	r0, [pc, #24]	; (19688 <net_buf_simple_pull+0x38>)
   1966e:	f00b fc2b 	bl	24ec8 <assert_post_action>
	buf->len -= len;
   19672:	1a52      	subs	r2, r2, r1
   19674:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   19676:	6800      	ldr	r0, [r0, #0]
   19678:	4408      	add	r0, r1
   1967a:	6018      	str	r0, [r3, #0]
}
   1967c:	bd08      	pop	{r3, pc}
   1967e:	bf00      	nop
   19680:	0002f598 	.word	0x0002f598
   19684:	0002b939 	.word	0x0002b939
   19688:	0002f510 	.word	0x0002f510

0001968c <net_buf_simple_pull_mem>:
{
   1968c:	b508      	push	{r3, lr}
   1968e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   19690:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   19692:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   19694:	428a      	cmp	r2, r1
   19696:	d20b      	bcs.n	196b0 <net_buf_simple_pull_mem+0x24>
   19698:	4908      	ldr	r1, [pc, #32]	; (196bc <net_buf_simple_pull_mem+0x30>)
   1969a:	4809      	ldr	r0, [pc, #36]	; (196c0 <net_buf_simple_pull_mem+0x34>)
   1969c:	f240 435e 	movw	r3, #1118	; 0x45e
   196a0:	4a08      	ldr	r2, [pc, #32]	; (196c4 <net_buf_simple_pull_mem+0x38>)
   196a2:	f00b fc18 	bl	24ed6 <assert_print>
   196a6:	f240 415e 	movw	r1, #1118	; 0x45e
   196aa:	4806      	ldr	r0, [pc, #24]	; (196c4 <net_buf_simple_pull_mem+0x38>)
   196ac:	f00b fc0c 	bl	24ec8 <assert_post_action>
	buf->len -= len;
   196b0:	1a52      	subs	r2, r2, r1
	buf->data += len;
   196b2:	4401      	add	r1, r0
	buf->len -= len;
   196b4:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   196b6:	6019      	str	r1, [r3, #0]
}
   196b8:	bd08      	pop	{r3, pc}
   196ba:	bf00      	nop
   196bc:	0002f598 	.word	0x0002f598
   196c0:	0002b939 	.word	0x0002b939
   196c4:	0002f510 	.word	0x0002f510

000196c8 <net_buf_simple_add>:
{
   196c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   196ca:	8885      	ldrh	r5, [r0, #4]
   196cc:	6803      	ldr	r3, [r0, #0]
   196ce:	460e      	mov	r6, r1
   196d0:	4604      	mov	r4, r0
   196d2:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   196d4:	f00e fbe5 	bl	27ea2 <net_buf_simple_tailroom>
   196d8:	42b0      	cmp	r0, r6
   196da:	d20b      	bcs.n	196f4 <net_buf_simple_add+0x2c>
   196dc:	4907      	ldr	r1, [pc, #28]	; (196fc <net_buf_simple_add+0x34>)
   196de:	4808      	ldr	r0, [pc, #32]	; (19700 <net_buf_simple_add+0x38>)
   196e0:	f240 3303 	movw	r3, #771	; 0x303
   196e4:	4a07      	ldr	r2, [pc, #28]	; (19704 <net_buf_simple_add+0x3c>)
   196e6:	f00b fbf6 	bl	24ed6 <assert_print>
   196ea:	f240 3103 	movw	r1, #771	; 0x303
   196ee:	4805      	ldr	r0, [pc, #20]	; (19704 <net_buf_simple_add+0x3c>)
   196f0:	f00b fbea 	bl	24ec8 <assert_post_action>
	buf->len += len;
   196f4:	4435      	add	r5, r6
   196f6:	80a5      	strh	r5, [r4, #4]
}
   196f8:	4638      	mov	r0, r7
   196fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196fc:	0002f5cc 	.word	0x0002f5cc
   19700:	0002b939 	.word	0x0002b939
   19704:	0002f510 	.word	0x0002f510

00019708 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   19708:	b508      	push	{r3, lr}
   1970a:	4804      	ldr	r0, [pc, #16]	; (1971c <xoshiro128_initialize+0x14>)
   1970c:	f00f ff07 	bl	2951e <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   19710:	2800      	cmp	r0, #0
}
   19712:	bf0c      	ite	eq
   19714:	f06f 0012 	mvneq.w	r0, #18
   19718:	2000      	movne	r0, #0
   1971a:	bd08      	pop	{r3, pc}
   1971c:	0002a400 	.word	0x0002a400

00019720 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   19720:	2813      	cmp	r0, #19
   19722:	d80e      	bhi.n	19742 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   19724:	4a08      	ldr	r2, [pc, #32]	; (19748 <adc_gain_invert+0x28>)
   19726:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1972a:	b153      	cbz	r3, 19742 <adc_gain_invert+0x22>
   1972c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   19730:	7852      	ldrb	r2, [r2, #1]
   19732:	b132      	cbz	r2, 19742 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   19734:	6808      	ldr	r0, [r1, #0]
   19736:	4343      	muls	r3, r0
   19738:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   1973c:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1973e:	600b      	str	r3, [r1, #0]
			rv = 0;
   19740:	4770      	bx	lr
	int rv = -EINVAL;
   19742:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   19746:	4770      	bx	lr
   19748:	0002f5f8 	.word	0x0002f5f8

0001974c <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1974c:	2201      	movs	r2, #1
   1974e:	4b05      	ldr	r3, [pc, #20]	; (19764 <adc_context_start_sampling+0x18>)
   19750:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   19754:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   19758:	b109      	cbz	r1, 1975e <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1975a:	60da      	str	r2, [r3, #12]
}
   1975c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1975e:	601a      	str	r2, [r3, #0]
   19760:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   19762:	4770      	bx	lr
   19764:	4000e000 	.word	0x4000e000

00019768 <adc_nrfx_channel_setup>:
{
   19768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1976a:	790d      	ldrb	r5, [r1, #4]
   1976c:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   19770:	2c07      	cmp	r4, #7
   19772:	d825      	bhi.n	197c0 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   19774:	780a      	ldrb	r2, [r1, #0]
   19776:	2a0b      	cmp	r2, #11
   19778:	d818      	bhi.n	197ac <adc_nrfx_channel_setup+0x44>
   1977a:	e8df f002 	tbb	[pc, r2]
   1977e:	0707      	.short	0x0707
   19780:	06170707 	.word	0x06170707
   19784:	13111717 	.word	0x13111717
   19788:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   1978a:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   1978c:	784b      	ldrb	r3, [r1, #1]
   1978e:	2b03      	cmp	r3, #3
   19790:	d01a      	beq.n	197c8 <adc_nrfx_channel_setup+0x60>
   19792:	2b04      	cmp	r3, #4
   19794:	f04f 0300 	mov.w	r3, #0
   19798:	d017      	beq.n	197ca <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   1979a:	4a30      	ldr	r2, [pc, #192]	; (1985c <adc_nrfx_channel_setup+0xf4>)
   1979c:	9202      	str	r2, [sp, #8]
   1979e:	e008      	b.n	197b2 <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   197a0:	2205      	movs	r2, #5
		break;
   197a2:	e7f3      	b.n	1978c <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   197a4:	2206      	movs	r2, #6
		break;
   197a6:	e7f1      	b.n	1978c <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   197a8:	2207      	movs	r2, #7
		break;
   197aa:	e7ef      	b.n	1978c <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   197ac:	4b2c      	ldr	r3, [pc, #176]	; (19860 <adc_nrfx_channel_setup+0xf8>)
   197ae:	9302      	str	r3, [sp, #8]
   197b0:	2300      	movs	r3, #0
   197b2:	2201      	movs	r2, #1
   197b4:	4618      	mov	r0, r3
   197b6:	e9cd 3300 	strd	r3, r3, [sp]
   197ba:	492a      	ldr	r1, [pc, #168]	; (19864 <adc_nrfx_channel_setup+0xfc>)
   197bc:	f00e fb8c 	bl	27ed8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   197c0:	f06f 0015 	mvn.w	r0, #21
}
   197c4:	b004      	add	sp, #16
   197c6:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   197c8:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   197ca:	f244 060a 	movw	r6, #16394	; 0x400a
   197ce:	8848      	ldrh	r0, [r1, #2]
   197d0:	42b0      	cmp	r0, r6
   197d2:	d03d      	beq.n	19850 <adc_nrfx_channel_setup+0xe8>
   197d4:	d80a      	bhi.n	197ec <adc_nrfx_channel_setup+0x84>
   197d6:	f244 0603 	movw	r6, #16387	; 0x4003
   197da:	42b0      	cmp	r0, r6
   197dc:	d014      	beq.n	19808 <adc_nrfx_channel_setup+0xa0>
   197de:	f244 0605 	movw	r6, #16389	; 0x4005
   197e2:	42b0      	cmp	r0, r6
   197e4:	d032      	beq.n	1984c <adc_nrfx_channel_setup+0xe4>
   197e6:	b398      	cbz	r0, 19850 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   197e8:	4b1f      	ldr	r3, [pc, #124]	; (19868 <adc_nrfx_channel_setup+0x100>)
   197ea:	e7e0      	b.n	197ae <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   197ec:	f244 0614 	movw	r6, #16404	; 0x4014
   197f0:	42b0      	cmp	r0, r6
   197f2:	d02f      	beq.n	19854 <adc_nrfx_channel_setup+0xec>
   197f4:	f244 0628 	movw	r6, #16424	; 0x4028
   197f8:	42b0      	cmp	r0, r6
   197fa:	d02d      	beq.n	19858 <adc_nrfx_channel_setup+0xf0>
   197fc:	f244 060f 	movw	r6, #16399	; 0x400f
   19800:	42b0      	cmp	r0, r6
   19802:	d1f1      	bne.n	197e8 <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   19804:	2003      	movs	r0, #3
   19806:	e000      	b.n	1980a <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   19808:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1980a:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1980e:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   19810:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   19814:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   19818:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   1981c:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   1981e:	0123      	lsls	r3, r4, #4
   19820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19824:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   19828:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1982c:	0123      	lsls	r3, r4, #4
   1982e:	798a      	ldrb	r2, [r1, #6]
   19830:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19834:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   19838:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1983c:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   19840:	4b0a      	ldr	r3, [pc, #40]	; (1986c <adc_nrfx_channel_setup+0x104>)
   19842:	794a      	ldrb	r2, [r1, #5]
   19844:	4423      	add	r3, r4
   19846:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1984a:	e7bb      	b.n	197c4 <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   1984c:	2001      	movs	r0, #1
   1984e:	e7dc      	b.n	1980a <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   19850:	2002      	movs	r0, #2
   19852:	e7da      	b.n	1980a <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   19854:	2004      	movs	r0, #4
   19856:	e7d8      	b.n	1980a <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   19858:	2005      	movs	r0, #5
   1985a:	e7d6      	b.n	1980a <adc_nrfx_channel_setup+0xa2>
   1985c:	0002f63f 	.word	0x0002f63f
   19860:	0002f620 	.word	0x0002f620
   19864:	0002a958 	.word	0x0002a958
   19868:	0002f663 	.word	0x0002f663
   1986c:	20008168 	.word	0x20008168

00019870 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   19870:	b5f0      	push	{r4, r5, r6, r7, lr}
   19872:	460c      	mov	r4, r1
   19874:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   19876:	f04f 33ff 	mov.w	r3, #4294967295
   1987a:	f04f 32ff 	mov.w	r2, #4294967295
   1987e:	486d      	ldr	r0, [pc, #436]	; (19a34 <adc_nrfx_read+0x1c4>)
   19880:	f006 fba2 	bl	1ffc8 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   19884:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   19886:	1e73      	subs	r3, r6, #1
   19888:	2bfe      	cmp	r3, #254	; 0xfe
   1988a:	f04f 0300 	mov.w	r3, #0
   1988e:	d909      	bls.n	198a4 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   19890:	4a69      	ldr	r2, [pc, #420]	; (19a38 <adc_nrfx_read+0x1c8>)
   19892:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   19894:	2201      	movs	r2, #1
   19896:	4618      	mov	r0, r3
   19898:	e9cd 3300 	strd	r3, r3, [sp]
   1989c:	4967      	ldr	r1, [pc, #412]	; (19a3c <adc_nrfx_read+0x1cc>)
   1989e:	f00e fb1b 	bl	27ed8 <z_log_msg_runtime_create.constprop.0>
	if (error) {
   198a2:	e014      	b.n	198ce <adc_nrfx_read+0x5e>
   198a4:	461a      	mov	r2, r3
	active_channels = 0U;
   198a6:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   198a8:	4d65      	ldr	r5, [pc, #404]	; (19a40 <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   198aa:	4f66      	ldr	r7, [pc, #408]	; (19a44 <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   198ac:	fa26 f302 	lsr.w	r3, r6, r2
   198b0:	f013 0301 	ands.w	r3, r3, #1
   198b4:	d039      	beq.n	1992a <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   198b6:	5cbb      	ldrb	r3, [r7, r2]
   198b8:	b98b      	cbnz	r3, 198de <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   198ba:	9203      	str	r2, [sp, #12]
   198bc:	4a62      	ldr	r2, [pc, #392]	; (19a48 <adc_nrfx_read+0x1d8>)
   198be:	9202      	str	r2, [sp, #8]
   198c0:	e9cd 3300 	strd	r3, r3, [sp]
   198c4:	2201      	movs	r2, #1
   198c6:	4618      	mov	r0, r3
   198c8:	495c      	ldr	r1, [pc, #368]	; (19a3c <adc_nrfx_read+0x1cc>)
   198ca:	f00e fb05 	bl	27ed8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   198ce:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   198d2:	4858      	ldr	r0, [pc, #352]	; (19a34 <adc_nrfx_read+0x1c4>)
   198d4:	f006 fb34 	bl	1ff40 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   198d8:	4620      	mov	r0, r4
   198da:	b007      	add	sp, #28
   198dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   198de:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   198e2:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   198e6:	f1bc 0c00 	subs.w	ip, ip, #0
   198ea:	bf18      	it	ne
   198ec:	f04f 0c01 	movne.w	ip, #1
   198f0:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   198f4:	3001      	adds	r0, #1
   198f6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   198fa:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   198fe:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   19902:	f102 0151 	add.w	r1, r2, #81	; 0x51
   19906:	0109      	lsls	r1, r1, #4
   19908:	506b      	str	r3, [r5, r1]
   1990a:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   1990c:	3201      	adds	r2, #1
   1990e:	2a08      	cmp	r2, #8
   19910:	d1cc      	bne.n	198ac <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   19912:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   19914:	2300      	movs	r3, #0
   19916:	f1a2 0108 	sub.w	r1, r2, #8
   1991a:	2906      	cmp	r1, #6
   1991c:	d818      	bhi.n	19950 <adc_nrfx_read+0xe0>
   1991e:	e8df f001 	tbb	[pc, r1]
   19922:	171e      	.short	0x171e
   19924:	17091720 	.word	0x17091720
   19928:	15          	.byte	0x15
   19929:	00          	.byte	0x00
   1992a:	f102 0151 	add.w	r1, r2, #81	; 0x51
   1992e:	0109      	lsls	r1, r1, #4
   19930:	506b      	str	r3, [r5, r1]
}
   19932:	e7eb      	b.n	1990c <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   19934:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   19936:	4a42      	ldr	r2, [pc, #264]	; (19a40 <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   19938:	2801      	cmp	r0, #1
   1993a:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1993e:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   19940:	d911      	bls.n	19966 <adc_nrfx_read+0xf6>
   19942:	b193      	cbz	r3, 1996a <adc_nrfx_read+0xfa>
		LOG_ERR(
   19944:	4b41      	ldr	r3, [pc, #260]	; (19a4c <adc_nrfx_read+0x1dc>)
   19946:	9302      	str	r3, [sp, #8]
   19948:	2300      	movs	r3, #0
   1994a:	e7a3      	b.n	19894 <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1994c:	2303      	movs	r3, #3
		break;
   1994e:	e7f2      	b.n	19936 <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   19950:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   19952:	4a3f      	ldr	r2, [pc, #252]	; (19a50 <adc_nrfx_read+0x1e0>)
   19954:	9300      	str	r3, [sp, #0]
   19956:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1995a:	2300      	movs	r3, #0
   1995c:	e7b2      	b.n	198c4 <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1995e:	2300      	movs	r3, #0
   19960:	e7e9      	b.n	19936 <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   19962:	2301      	movs	r3, #1
   19964:	e7e7      	b.n	19936 <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   19966:	2b08      	cmp	r3, #8
   19968:	d816      	bhi.n	19998 <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   1996a:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   1996e:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   19970:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   19972:	b9b2      	cbnz	r2, 199a2 <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   19974:	68e2      	ldr	r2, [r4, #12]
   19976:	429a      	cmp	r2, r3
   19978:	d217      	bcs.n	199aa <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1997a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1997e:	4b35      	ldr	r3, [pc, #212]	; (19a54 <adc_nrfx_read+0x1e4>)
   19980:	2201      	movs	r2, #1
   19982:	9302      	str	r3, [sp, #8]
   19984:	2300      	movs	r3, #0
   19986:	492d      	ldr	r1, [pc, #180]	; (19a3c <adc_nrfx_read+0x1cc>)
   19988:	4618      	mov	r0, r3
   1998a:	e9cd 3300 	strd	r3, r3, [sp]
   1998e:	f00e faa3 	bl	27ed8 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   19992:	f06f 040b 	mvn.w	r4, #11
   19996:	e79c      	b.n	198d2 <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   19998:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   1999a:	4b2f      	ldr	r3, [pc, #188]	; (19a58 <adc_nrfx_read+0x1e8>)
   1999c:	9302      	str	r3, [sp, #8]
   1999e:	2300      	movs	r3, #0
   199a0:	e78e      	b.n	198c0 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   199a2:	8992      	ldrh	r2, [r2, #12]
   199a4:	fb02 3303 	mla	r3, r2, r3, r3
   199a8:	e7e4      	b.n	19974 <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   199aa:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   199ac:	68a2      	ldr	r2, [r4, #8]
   199ae:	4b24      	ldr	r3, [pc, #144]	; (19a40 <adc_nrfx_read+0x1d0>)
   199b0:	4f2a      	ldr	r7, [pc, #168]	; (19a5c <adc_nrfx_read+0x1ec>)
   199b2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   199b6:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   199ba:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   199be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   199c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   199c2:	6833      	ldr	r3, [r6, #0]
   199c4:	463e      	mov	r6, r7
   199c6:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   199c8:	2500      	movs	r5, #0
   199ca:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   199cc:	6823      	ldr	r3, [r4, #0]
   199ce:	b36b      	cbz	r3, 19a2c <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   199d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   199d2:	f107 0488 	add.w	r4, r7, #136	; 0x88
   199d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   199da:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   199dc:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   199e0:	b320      	cbz	r0, 19a2c <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   199e2:	e8d6 3fef 	ldaex	r3, [r6]
   199e6:	e8c6 5fe2 	stlex	r2, r5, [r6]
   199ea:	2a00      	cmp	r2, #0
   199ec:	d1f9      	bne.n	199e2 <adc_nrfx_read+0x172>
   199ee:	491c      	ldr	r1, [pc, #112]	; (19a60 <adc_nrfx_read+0x1f0>)
   199f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   199f4:	460e      	mov	r6, r1
   199f6:	4629      	mov	r1, r5
   199f8:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   199fc:	2300      	movs	r3, #0
   199fe:	fbe4 6100 	umlal	r6, r1, r4, r0
   19a02:	4a18      	ldr	r2, [pc, #96]	; (19a64 <adc_nrfx_read+0x1f4>)
   19a04:	4630      	mov	r0, r6
   19a06:	f7ef fa73 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   19a0a:	2200      	movs	r2, #0
   19a0c:	e9cd 0100 	strd	r0, r1, [sp]
   19a10:	2300      	movs	r3, #0
   19a12:	f107 0008 	add.w	r0, r7, #8
   19a16:	f008 fea5 	bl	22764 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   19a1a:	f04f 32ff 	mov.w	r2, #4294967295
   19a1e:	f04f 33ff 	mov.w	r3, #4294967295
   19a22:	4811      	ldr	r0, [pc, #68]	; (19a68 <adc_nrfx_read+0x1f8>)
   19a24:	f006 fad0 	bl	1ffc8 <z_impl_k_sem_take>
	return ctx->status;
   19a28:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   19a2a:	e752      	b.n	198d2 <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   19a2c:	480b      	ldr	r0, [pc, #44]	; (19a5c <adc_nrfx_read+0x1ec>)
   19a2e:	f7ff fe8d 	bl	1974c <adc_context_start_sampling>
   19a32:	e7f2      	b.n	19a1a <adc_nrfx_read+0x1aa>
   19a34:	200081a8 	.word	0x200081a8
   19a38:	0002f68e 	.word	0x0002f68e
   19a3c:	0002a958 	.word	0x0002a958
   19a40:	4000e000 	.word	0x4000e000
   19a44:	20008208 	.word	0x20008208
   19a48:	0002f6ac 	.word	0x0002f6ac
   19a4c:	0002f6eb 	.word	0x0002f6eb
   19a50:	0002f6c6 	.word	0x0002f6c6
   19a54:	0002f740 	.word	0x0002f740
   19a58:	0002f71d 	.word	0x0002f71d
   19a5c:	20008168 	.word	0x20008168
   19a60:	000f423f 	.word	0x000f423f
   19a64:	000f4240 	.word	0x000f4240
   19a68:	200081c0 	.word	0x200081c0

00019a6c <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   19a6c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19a6e:	2400      	movs	r4, #0
   19a70:	4b0d      	ldr	r3, [pc, #52]	; (19aa8 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   19a72:	200e      	movs	r0, #14
   19a74:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   19a78:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   19a7c:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   19a80:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   19a84:	2212      	movs	r2, #18
   19a86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   19a8a:	f7f6 fbd1 	bl	10230 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19a8e:	4622      	mov	r2, r4
   19a90:	2101      	movs	r1, #1
   19a92:	200e      	movs	r0, #14
   19a94:	f7f6 fbfc 	bl	10290 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   19a98:	4804      	ldr	r0, [pc, #16]	; (19aac <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   19a9a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   19a9c:	b913      	cbnz	r3, 19aa4 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   19a9e:	3040      	adds	r0, #64	; 0x40
   19aa0:	f006 fa4e 	bl	1ff40 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   19aa4:	2000      	movs	r0, #0
   19aa6:	bd10      	pop	{r4, pc}
   19aa8:	4000e000 	.word	0x4000e000
   19aac:	20008168 	.word	0x20008168

00019ab0 <saadc_irq_handler>:
{
   19ab0:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19ab2:	4b2d      	ldr	r3, [pc, #180]	; (19b68 <saadc_irq_handler+0xb8>)
   19ab4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   19ab8:	2a00      	cmp	r2, #0
   19aba:	d048      	beq.n	19b4e <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19abc:	2200      	movs	r2, #0
   19abe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   19ac2:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19ac6:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   19ac8:	4c28      	ldr	r4, [pc, #160]	; (19b6c <saadc_irq_handler+0xbc>)
   19aca:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   19acc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   19ad0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   19ad2:	4625      	mov	r5, r4
   19ad4:	b3b3      	cbz	r3, 19b44 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   19ad6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   19ada:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   19ade:	b133      	cbz	r3, 19aee <saadc_irq_handler+0x3e>
			action = callback(dev,
   19ae0:	f104 0174 	add.w	r1, r4, #116	; 0x74
   19ae4:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   19ae6:	2801      	cmp	r0, #1
   19ae8:	d014      	beq.n	19b14 <saadc_irq_handler+0x64>
   19aea:	2802      	cmp	r0, #2
   19aec:	d024      	beq.n	19b38 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   19aee:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   19af2:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   19af6:	429a      	cmp	r2, r3
   19af8:	d91e      	bls.n	19b38 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   19afa:	3301      	adds	r3, #1
   19afc:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   19b00:	4b19      	ldr	r3, [pc, #100]	; (19b68 <saadc_irq_handler+0xb8>)
   19b02:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   19b06:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   19b0a:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   19b0c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   19b10:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   19b14:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   19b18:	b923      	cbnz	r3, 19b24 <saadc_irq_handler+0x74>
}
   19b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   19b1e:	4813      	ldr	r0, [pc, #76]	; (19b6c <saadc_irq_handler+0xbc>)
   19b20:	f7ff be14 	b.w	1974c <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19b24:	e8d5 3fef 	ldaex	r3, [r5]
   19b28:	1e5a      	subs	r2, r3, #1
   19b2a:	e8c5 2fe1 	stlex	r1, r2, [r5]
   19b2e:	2900      	cmp	r1, #0
   19b30:	d1f8      	bne.n	19b24 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   19b32:	2b01      	cmp	r3, #1
   19b34:	dcf1      	bgt.n	19b1a <saadc_irq_handler+0x6a>
   19b36:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   19b38:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   19b3c:	b113      	cbz	r3, 19b44 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   19b3e:	480c      	ldr	r0, [pc, #48]	; (19b70 <saadc_irq_handler+0xc0>)
   19b40:	f00f fe58 	bl	297f4 <z_impl_k_timer_stop>
   19b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   19b48:	480a      	ldr	r0, [pc, #40]	; (19b74 <saadc_irq_handler+0xc4>)
   19b4a:	f006 b9f9 	b.w	1ff40 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b4e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   19b52:	2900      	cmp	r1, #0
   19b54:	d0ef      	beq.n	19b36 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19b56:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   19b5a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19b5e:	2201      	movs	r2, #1
   19b60:	609a      	str	r2, [r3, #8]
   19b62:	601a      	str	r2, [r3, #0]
   19b64:	605a      	str	r2, [r3, #4]
}
   19b66:	e7e6      	b.n	19b36 <saadc_irq_handler+0x86>
   19b68:	4000e000 	.word	0x4000e000
   19b6c:	20008168 	.word	0x20008168
   19b70:	20008170 	.word	0x20008170
   19b74:	200081c0 	.word	0x200081c0

00019b78 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19b7a:	2340      	movs	r3, #64	; 0x40
{
   19b7c:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   19b7e:	490a      	ldr	r1, [pc, #40]	; (19ba8 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19b80:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   19b82:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19b84:	1149      	asrs	r1, r1, #5
{
   19b86:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19b88:	4623      	mov	r3, r4
   19b8a:	4a08      	ldr	r2, [pc, #32]	; (19bac <onoff_start+0x34>)
   19b8c:	4808      	ldr	r0, [pc, #32]	; (19bb0 <onoff_start+0x38>)
   19b8e:	f00e f9d9 	bl	27f44 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   19b92:	1e01      	subs	r1, r0, #0
   19b94:	da05      	bge.n	19ba2 <onoff_start+0x2a>
		notify(mgr, err);
   19b96:	4628      	mov	r0, r5
   19b98:	4623      	mov	r3, r4
	}
}
   19b9a:	b003      	add	sp, #12
   19b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   19ba0:	4718      	bx	r3
}
   19ba2:	b003      	add	sp, #12
   19ba4:	bd30      	pop	{r4, r5, pc}
   19ba6:	bf00      	nop
   19ba8:	20021248 	.word	0x20021248
   19bac:	00027fb3 	.word	0x00027fb3
   19bb0:	0002a3a0 	.word	0x0002a3a0

00019bb4 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19bb4:	b2c9      	uxtb	r1, r1
   19bb6:	2903      	cmp	r1, #3
{
   19bb8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19bba:	d909      	bls.n	19bd0 <get_status+0x1c>
   19bbc:	4909      	ldr	r1, [pc, #36]	; (19be4 <get_status+0x30>)
   19bbe:	480a      	ldr	r0, [pc, #40]	; (19be8 <get_status+0x34>)
   19bc0:	237a      	movs	r3, #122	; 0x7a
   19bc2:	4a0a      	ldr	r2, [pc, #40]	; (19bec <get_status+0x38>)
   19bc4:	f00b f987 	bl	24ed6 <assert_print>
   19bc8:	217a      	movs	r1, #122	; 0x7a
   19bca:	4808      	ldr	r0, [pc, #32]	; (19bec <get_status+0x38>)
   19bcc:	f00b f97c 	bl	24ec8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   19bd0:	220c      	movs	r2, #12
   19bd2:	6903      	ldr	r3, [r0, #16]
   19bd4:	fb01 3302 	mla	r3, r1, r2, r3
   19bd8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   19bdc:	f000 0007 	and.w	r0, r0, #7
   19be0:	bd08      	pop	{r3, pc}
   19be2:	bf00      	nop
   19be4:	0002f7ba 	.word	0x0002f7ba
   19be8:	0002b939 	.word	0x0002b939
   19bec:	0002f77d 	.word	0x0002f77d

00019bf0 <stop>:
{
   19bf0:	b570      	push	{r4, r5, r6, lr}
   19bf2:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19bf4:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   19bf6:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19bf8:	d90b      	bls.n	19c12 <stop+0x22>
   19bfa:	491a      	ldr	r1, [pc, #104]	; (19c64 <stop+0x74>)
   19bfc:	481a      	ldr	r0, [pc, #104]	; (19c68 <stop+0x78>)
   19bfe:	f240 135d 	movw	r3, #349	; 0x15d
   19c02:	4a1a      	ldr	r2, [pc, #104]	; (19c6c <stop+0x7c>)
   19c04:	f00b f967 	bl	24ed6 <assert_print>
   19c08:	f240 115d 	movw	r1, #349	; 0x15d
   19c0c:	4817      	ldr	r0, [pc, #92]	; (19c6c <stop+0x7c>)
   19c0e:	f00b f95b 	bl	24ec8 <assert_post_action>
	__asm__ volatile(
   19c12:	f04f 0420 	mov.w	r4, #32
   19c16:	f3ef 8511 	mrs	r5, BASEPRI
   19c1a:	f384 8812 	msr	BASEPRI_MAX, r4
   19c1e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19c22:	260c      	movs	r6, #12
   19c24:	fb06 3401 	mla	r4, r6, r1, r3
   19c28:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   19c2c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   19c30:	d008      	beq.n	19c44 <stop+0x54>
   19c32:	42a2      	cmp	r2, r4
   19c34:	d006      	beq.n	19c44 <stop+0x54>
	__asm__ volatile(
   19c36:	f385 8811 	msr	BASEPRI, r5
   19c3a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   19c3e:	f04f 30ff 	mov.w	r0, #4294967295
}
   19c42:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19c44:	2201      	movs	r2, #1
   19c46:	4371      	muls	r1, r6
   19c48:	440b      	add	r3, r1
   19c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   19c4e:	f385 8811 	msr	BASEPRI, r5
   19c52:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   19c56:	6843      	ldr	r3, [r0, #4]
   19c58:	440b      	add	r3, r1
   19c5a:	685b      	ldr	r3, [r3, #4]
   19c5c:	4798      	blx	r3
	return 0;
   19c5e:	2000      	movs	r0, #0
   19c60:	e7ef      	b.n	19c42 <stop+0x52>
   19c62:	bf00      	nop
   19c64:	0002f7ba 	.word	0x0002f7ba
   19c68:	0002b939 	.word	0x0002b939
   19c6c:	0002f77d 	.word	0x0002f77d

00019c70 <onoff_stop>:
{
   19c70:	b570      	push	{r4, r5, r6, lr}
   19c72:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   19c74:	4906      	ldr	r1, [pc, #24]	; (19c90 <onoff_stop+0x20>)
{
   19c76:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   19c78:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19c7a:	1149      	asrs	r1, r1, #5
   19c7c:	2240      	movs	r2, #64	; 0x40
   19c7e:	4805      	ldr	r0, [pc, #20]	; (19c94 <onoff_stop+0x24>)
   19c80:	f7ff ffb6 	bl	19bf0 <stop>
	notify(mgr, res);
   19c84:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19c86:	4601      	mov	r1, r0
	notify(mgr, res);
   19c88:	4620      	mov	r0, r4
}
   19c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   19c8e:	4718      	bx	r3
   19c90:	20021248 	.word	0x20021248
   19c94:	0002a3a0 	.word	0x0002a3a0

00019c98 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   19c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19c9c:	2200      	movs	r2, #0
   19c9e:	2101      	movs	r1, #1
{
   19ca0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19ca2:	2005      	movs	r0, #5
   19ca4:	f7f6 faf4 	bl	10290 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   19ca8:	4811      	ldr	r0, [pc, #68]	; (19cf0 <clk_init+0x58>)
   19caa:	f002 ff81 	bl	1cbb0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   19cae:	4b11      	ldr	r3, [pc, #68]	; (19cf4 <clk_init+0x5c>)
   19cb0:	4298      	cmp	r0, r3
   19cb2:	d119      	bne.n	19ce8 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   19cb4:	f002 ffa0 	bl	1cbf8 <nrfx_clock_enable>
   19cb8:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19cba:	f04f 080c 	mov.w	r8, #12
   19cbe:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   19cc0:	f8df 9034 	ldr.w	r9, [pc, #52]	; 19cf8 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   19cc4:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   19cc6:	4649      	mov	r1, r9
   19cc8:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   19ccc:	f00b f8be 	bl	24e4c <onoff_manager_init>
		if (err < 0) {
   19cd0:	2800      	cmp	r0, #0
   19cd2:	db07      	blt.n	19ce4 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19cd4:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   19cd8:	3401      	adds	r4, #1
   19cda:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19cdc:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   19ce0:	d1f0      	bne.n	19cc4 <clk_init+0x2c>
	}

	return 0;
   19ce2:	2000      	movs	r0, #0
}
   19ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   19ce8:	f06f 0004 	mvn.w	r0, #4
   19cec:	e7fa      	b.n	19ce4 <clk_init+0x4c>
   19cee:	bf00      	nop
   19cf0:	00019d35 	.word	0x00019d35
   19cf4:	0bad0000 	.word	0x0bad0000
   19cf8:	0002b594 	.word	0x0002b594

00019cfc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   19cfc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   19cfe:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   19d00:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   19d02:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   19d04:	434b      	muls	r3, r1
   19d06:	4809      	ldr	r0, [pc, #36]	; (19d2c <clkstarted_handle.constprop.0+0x30>)
   19d08:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   19d0a:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   19d0c:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   19d10:	4418      	add	r0, r3
	sub_data->cb = NULL;
   19d12:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   19d16:	f00e f902 	bl	27f1e <set_on_state>
	if (callback) {
   19d1a:	b12d      	cbz	r5, 19d28 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   19d1c:	4632      	mov	r2, r6
   19d1e:	462b      	mov	r3, r5
}
   19d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   19d24:	4802      	ldr	r0, [pc, #8]	; (19d30 <clkstarted_handle.constprop.0+0x34>)
   19d26:	4718      	bx	r3
}
   19d28:	bd70      	pop	{r4, r5, r6, pc}
   19d2a:	bf00      	nop
   19d2c:	20021248 	.word	0x20021248
   19d30:	0002a3a0 	.word	0x0002a3a0

00019d34 <clock_event_handler>:
{
   19d34:	b508      	push	{r3, lr}
	switch (event) {
   19d36:	2805      	cmp	r0, #5
   19d38:	d820      	bhi.n	19d7c <clock_event_handler+0x48>
   19d3a:	e8df f000 	tbb	[pc, r0]
   19d3e:	1103      	.short	0x1103
   19d40:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   19d44:	4b13      	ldr	r3, [pc, #76]	; (19d94 <clock_event_handler+0x60>)
   19d46:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   19d4a:	f010 0007 	ands.w	r0, r0, #7
   19d4e:	d11f      	bne.n	19d90 <clock_event_handler+0x5c>
}
   19d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   19d54:	f7ff bfd2 	b.w	19cfc <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   19d58:	2002      	movs	r0, #2
   19d5a:	e7f9      	b.n	19d50 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   19d5c:	2003      	movs	r0, #3
   19d5e:	e7f7      	b.n	19d50 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   19d60:	2001      	movs	r0, #1
   19d62:	e7f5      	b.n	19d50 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   19d64:	490c      	ldr	r1, [pc, #48]	; (19d98 <clock_event_handler+0x64>)
   19d66:	f240 236e 	movw	r3, #622	; 0x26e
   19d6a:	4a0c      	ldr	r2, [pc, #48]	; (19d9c <clock_event_handler+0x68>)
   19d6c:	480c      	ldr	r0, [pc, #48]	; (19da0 <clock_event_handler+0x6c>)
   19d6e:	f00b f8b2 	bl	24ed6 <assert_print>
   19d72:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   19d76:	4809      	ldr	r0, [pc, #36]	; (19d9c <clock_event_handler+0x68>)
   19d78:	f00b f8a6 	bl	24ec8 <assert_post_action>
   19d7c:	4906      	ldr	r1, [pc, #24]	; (19d98 <clock_event_handler+0x64>)
   19d7e:	f240 2372 	movw	r3, #626	; 0x272
   19d82:	4a06      	ldr	r2, [pc, #24]	; (19d9c <clock_event_handler+0x68>)
   19d84:	4806      	ldr	r0, [pc, #24]	; (19da0 <clock_event_handler+0x6c>)
   19d86:	f00b f8a6 	bl	24ed6 <assert_print>
   19d8a:	f240 2172 	movw	r1, #626	; 0x272
   19d8e:	e7f2      	b.n	19d76 <clock_event_handler+0x42>
}
   19d90:	bd08      	pop	{r3, pc}
   19d92:	bf00      	nop
   19d94:	20021248 	.word	0x20021248
   19d98:	000311d2 	.word	0x000311d2
   19d9c:	0002f77d 	.word	0x0002f77d
   19da0:	0002b939 	.word	0x0002b939

00019da4 <generic_hfclk_start>:
{
   19da4:	b508      	push	{r3, lr}
	__asm__ volatile(
   19da6:	f04f 0320 	mov.w	r3, #32
   19daa:	f3ef 8111 	mrs	r1, BASEPRI
   19dae:	f383 8812 	msr	BASEPRI_MAX, r3
   19db2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   19db6:	4a11      	ldr	r2, [pc, #68]	; (19dfc <generic_hfclk_start+0x58>)
   19db8:	6813      	ldr	r3, [r2, #0]
   19dba:	f043 0002 	orr.w	r0, r3, #2
   19dbe:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   19dc0:	07da      	lsls	r2, r3, #31
   19dc2:	d408      	bmi.n	19dd6 <generic_hfclk_start+0x32>
	__asm__ volatile(
   19dc4:	f381 8811 	msr	BASEPRI, r1
   19dc8:	f3bf 8f6f 	isb	sy
}
   19dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   19dd0:	2001      	movs	r0, #1
   19dd2:	f002 bf3b 	b.w	1cc4c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19dd6:	4b0a      	ldr	r3, [pc, #40]	; (19e00 <generic_hfclk_start+0x5c>)
   19dd8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19ddc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   19de0:	07d3      	lsls	r3, r2, #31
   19de2:	d5ef      	bpl.n	19dc4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   19de4:	4807      	ldr	r0, [pc, #28]	; (19e04 <generic_hfclk_start+0x60>)
   19de6:	f00e f89a 	bl	27f1e <set_on_state>
   19dea:	f381 8811 	msr	BASEPRI, r1
   19dee:	f3bf 8f6f 	isb	sy
}
   19df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   19df6:	2000      	movs	r0, #0
   19df8:	f7ff bf80 	b.w	19cfc <clkstarted_handle.constprop.0>
   19dfc:	200212f8 	.word	0x200212f8
   19e00:	40005000 	.word	0x40005000
   19e04:	200212d0 	.word	0x200212d0

00019e08 <api_blocking_start>:
{
   19e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19e0a:	2200      	movs	r2, #0
   19e0c:	2301      	movs	r3, #1
   19e0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19e12:	ab04      	add	r3, sp, #16
   19e14:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19e18:	4a09      	ldr	r2, [pc, #36]	; (19e40 <api_blocking_start+0x38>)
   19e1a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19e1c:	f8cd d000 	str.w	sp, [sp]
   19e20:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19e24:	f00e f8be 	bl	27fa4 <api_start>
	if (err < 0) {
   19e28:	2800      	cmp	r0, #0
   19e2a:	db05      	blt.n	19e38 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   19e2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19e30:	2300      	movs	r3, #0
   19e32:	4668      	mov	r0, sp
   19e34:	f006 f8c8 	bl	1ffc8 <z_impl_k_sem_take>
}
   19e38:	b007      	add	sp, #28
   19e3a:	f85d fb04 	ldr.w	pc, [sp], #4
   19e3e:	bf00      	nop
   19e40:	00027fe3 	.word	0x00027fe3

00019e44 <generic_hfclk_stop>:
{
   19e44:	b510      	push	{r4, lr}
	__asm__ volatile(
   19e46:	f04f 0320 	mov.w	r3, #32
   19e4a:	f3ef 8411 	mrs	r4, BASEPRI
   19e4e:	f383 8812 	msr	BASEPRI_MAX, r3
   19e52:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   19e56:	4a07      	ldr	r2, [pc, #28]	; (19e74 <generic_hfclk_stop+0x30>)
   19e58:	6813      	ldr	r3, [r2, #0]
   19e5a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   19e5e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   19e60:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   19e62:	d402      	bmi.n	19e6a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   19e64:	2001      	movs	r0, #1
   19e66:	f002 ff6f 	bl	1cd48 <nrfx_clock_stop>
	__asm__ volatile(
   19e6a:	f384 8811 	msr	BASEPRI, r4
   19e6e:	f3bf 8f6f 	isb	sy
}
   19e72:	bd10      	pop	{r4, pc}
   19e74:	200212f8 	.word	0x200212f8

00019e78 <z_nrf_clock_control_lf_on>:
{
   19e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19e7c:	2201      	movs	r2, #1
   19e7e:	4606      	mov	r6, r0
   19e80:	4941      	ldr	r1, [pc, #260]	; (19f88 <z_nrf_clock_control_lf_on+0x110>)
   19e82:	e8d1 3fef 	ldaex	r3, [r1]
   19e86:	e8c1 2fe0 	stlex	r0, r2, [r1]
   19e8a:	2800      	cmp	r0, #0
   19e8c:	d1f9      	bne.n	19e82 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   19e8e:	b9a3      	cbnz	r3, 19eba <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19e90:	493e      	ldr	r1, [pc, #248]	; (19f8c <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   19e92:	483f      	ldr	r0, [pc, #252]	; (19f90 <z_nrf_clock_control_lf_on+0x118>)
   19e94:	604b      	str	r3, [r1, #4]
   19e96:	60cb      	str	r3, [r1, #12]
   19e98:	608a      	str	r2, [r1, #8]
   19e9a:	f7f3 fae3 	bl	d464 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   19e9e:	2800      	cmp	r0, #0
   19ea0:	da0b      	bge.n	19eba <z_nrf_clock_control_lf_on+0x42>
   19ea2:	493c      	ldr	r1, [pc, #240]	; (19f94 <z_nrf_clock_control_lf_on+0x11c>)
   19ea4:	f44f 730c 	mov.w	r3, #560	; 0x230
   19ea8:	4a3b      	ldr	r2, [pc, #236]	; (19f98 <z_nrf_clock_control_lf_on+0x120>)
   19eaa:	483c      	ldr	r0, [pc, #240]	; (19f9c <z_nrf_clock_control_lf_on+0x124>)
   19eac:	f00b f813 	bl	24ed6 <assert_print>
   19eb0:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   19eb4:	4838      	ldr	r0, [pc, #224]	; (19f98 <z_nrf_clock_control_lf_on+0x120>)
   19eb6:	f00b f807 	bl	24ec8 <assert_post_action>
	switch (start_mode) {
   19eba:	b35e      	cbz	r6, 19f14 <z_nrf_clock_control_lf_on+0x9c>
   19ebc:	1e73      	subs	r3, r6, #1
   19ebe:	2b01      	cmp	r3, #1
   19ec0:	d858      	bhi.n	19f74 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   19ec2:	2e01      	cmp	r6, #1
   19ec4:	d106      	bne.n	19ed4 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   19ec6:	4b36      	ldr	r3, [pc, #216]	; (19fa0 <z_nrf_clock_control_lf_on+0x128>)
   19ec8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   19ecc:	f003 0303 	and.w	r3, r3, #3
   19ed0:	2b02      	cmp	r3, #2
   19ed2:	d01f      	beq.n	19f14 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19ed4:	f00f fb60 	bl	29598 <k_is_in_isr>
   19ed8:	4605      	mov	r5, r0
   19eda:	b9e8      	cbnz	r0, 19f18 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   19edc:	4b31      	ldr	r3, [pc, #196]	; (19fa4 <z_nrf_clock_control_lf_on+0x12c>)
   19ede:	781b      	ldrb	r3, [r3, #0]
   19ee0:	b1d3      	cbz	r3, 19f18 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   19ee2:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   19ee4:	4607      	mov	r7, r0
   19ee6:	4b2e      	ldr	r3, [pc, #184]	; (19fa0 <z_nrf_clock_control_lf_on+0x128>)
   19ee8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19eec:	4c2c      	ldr	r4, [pc, #176]	; (19fa0 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19eee:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 19fa8 <z_nrf_clock_control_lf_on+0x130>
   19ef2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19ef6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   19efa:	03d2      	lsls	r2, r2, #15
   19efc:	d516      	bpl.n	19f2c <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   19efe:	f003 0303 	and.w	r3, r3, #3
   19f02:	2b02      	cmp	r3, #2
   19f04:	d001      	beq.n	19f0a <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   19f06:	2e01      	cmp	r6, #1
   19f08:	d110      	bne.n	19f2c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   19f0a:	b375      	cbz	r5, 19f6a <z_nrf_clock_control_lf_on+0xf2>
   19f0c:	f387 8811 	msr	BASEPRI, r7
   19f10:	f3bf 8f6f 	isb	sy
}
   19f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   19f18:	f04f 0320 	mov.w	r3, #32
   19f1c:	f3ef 8711 	mrs	r7, BASEPRI
   19f20:	f383 8812 	msr	BASEPRI_MAX, r3
   19f24:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19f28:	2501      	movs	r5, #1
   19f2a:	e7df      	b.n	19eec <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19f2c:	b1c5      	cbz	r5, 19f60 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   19f2e:	4638      	mov	r0, r7
   19f30:	f7f6 f924 	bl	1017c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   19f34:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19f38:	b2db      	uxtb	r3, r3
   19f3a:	2b01      	cmp	r3, #1
   19f3c:	d1d9      	bne.n	19ef2 <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19f3e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   19f42:	2a00      	cmp	r2, #0
   19f44:	d0d5      	beq.n	19ef2 <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19f46:	2200      	movs	r2, #0
   19f48:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19f4c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   19f50:	2202      	movs	r2, #2
   19f52:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   19f56:	2220      	movs	r2, #32
   19f58:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19f5c:	60a3      	str	r3, [r4, #8]
}
   19f5e:	e7c8      	b.n	19ef2 <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   19f60:	2100      	movs	r1, #0
   19f62:	2021      	movs	r0, #33	; 0x21
   19f64:	f007 fee0 	bl	21d28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19f68:	e7e4      	b.n	19f34 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   19f6a:	2202      	movs	r2, #2
   19f6c:	4b0c      	ldr	r3, [pc, #48]	; (19fa0 <z_nrf_clock_control_lf_on+0x128>)
   19f6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19f72:	e7cf      	b.n	19f14 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   19f74:	490d      	ldr	r1, [pc, #52]	; (19fac <z_nrf_clock_control_lf_on+0x134>)
   19f76:	f240 2342 	movw	r3, #578	; 0x242
   19f7a:	4a07      	ldr	r2, [pc, #28]	; (19f98 <z_nrf_clock_control_lf_on+0x120>)
   19f7c:	4807      	ldr	r0, [pc, #28]	; (19f9c <z_nrf_clock_control_lf_on+0x124>)
   19f7e:	f00a ffaa 	bl	24ed6 <assert_print>
   19f82:	f240 2142 	movw	r1, #578	; 0x242
   19f86:	e795      	b.n	19eb4 <z_nrf_clock_control_lf_on+0x3c>
   19f88:	20021244 	.word	0x20021244
   19f8c:	20021234 	.word	0x20021234
   19f90:	20021268 	.word	0x20021268
   19f94:	0002cba5 	.word	0x0002cba5
   19f98:	0002f77d 	.word	0x0002f77d
   19f9c:	0002b939 	.word	0x0002b939
   19fa0:	40005000 	.word	0x40005000
   19fa4:	20022472 	.word	0x20022472
   19fa8:	e000e100 	.word	0xe000e100
   19fac:	000311d2 	.word	0x000311d2

00019fb0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   19fb0:	b508      	push	{r3, lr}
   19fb2:	4807      	ldr	r0, [pc, #28]	; (19fd0 <uart_console_init+0x20>)
   19fb4:	f00f fab3 	bl	2951e <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   19fb8:	b138      	cbz	r0, 19fca <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   19fba:	4806      	ldr	r0, [pc, #24]	; (19fd4 <uart_console_init+0x24>)
   19fbc:	f7f7 f866 	bl	1108c <__stdout_hook_install>
	__printk_hook_install(console_out);
   19fc0:	4804      	ldr	r0, [pc, #16]	; (19fd4 <uart_console_init+0x24>)
   19fc2:	f7f2 fecd 	bl	cd60 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   19fc6:	2000      	movs	r0, #0
}
   19fc8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   19fca:	f06f 0012 	mvn.w	r0, #18
   19fce:	e7fb      	b.n	19fc8 <uart_console_init+0x18>
   19fd0:	0002a430 	.word	0x0002a430
   19fd4:	00019fd9 	.word	0x00019fd9

00019fd8 <console_out>:
	if ('\n' == c) {
   19fd8:	280a      	cmp	r0, #10
{
   19fda:	b538      	push	{r3, r4, r5, lr}
   19fdc:	4604      	mov	r4, r0
   19fde:	4d07      	ldr	r5, [pc, #28]	; (19ffc <console_out+0x24>)
	if ('\n' == c) {
   19fe0:	d104      	bne.n	19fec <console_out+0x14>
	api->poll_out(dev, out_char);
   19fe2:	68ab      	ldr	r3, [r5, #8]
   19fe4:	210d      	movs	r1, #13
   19fe6:	4628      	mov	r0, r5
   19fe8:	69db      	ldr	r3, [r3, #28]
   19fea:	4798      	blx	r3
   19fec:	68ab      	ldr	r3, [r5, #8]
   19fee:	4803      	ldr	r0, [pc, #12]	; (19ffc <console_out+0x24>)
   19ff0:	69db      	ldr	r3, [r3, #28]
   19ff2:	b2e1      	uxtb	r1, r4
   19ff4:	4798      	blx	r3
}
   19ff6:	4620      	mov	r0, r4
   19ff8:	bd38      	pop	{r3, r4, r5, pc}
   19ffa:	bf00      	nop
   19ffc:	0002a430 	.word	0x0002a430

0001a000 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1a000:	b510      	push	{r4, lr}
	return port->data;
   1a002:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1a004:	b961      	cbnz	r1, 1a020 <gpio_nrfx_manage_callback+0x20>
   1a006:	4920      	ldr	r1, [pc, #128]	; (1a088 <gpio_nrfx_manage_callback+0x88>)
   1a008:	232a      	movs	r3, #42	; 0x2a
   1a00a:	4a20      	ldr	r2, [pc, #128]	; (1a08c <gpio_nrfx_manage_callback+0x8c>)
   1a00c:	4820      	ldr	r0, [pc, #128]	; (1a090 <gpio_nrfx_manage_callback+0x90>)
   1a00e:	f00a ff62 	bl	24ed6 <assert_print>
   1a012:	4820      	ldr	r0, [pc, #128]	; (1a094 <gpio_nrfx_manage_callback+0x94>)
   1a014:	f00a ff5f 	bl	24ed6 <assert_print>
   1a018:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1a01a:	481c      	ldr	r0, [pc, #112]	; (1a08c <gpio_nrfx_manage_callback+0x8c>)
   1a01c:	f00a ff54 	bl	24ec8 <assert_post_action>
   1a020:	6848      	ldr	r0, [r1, #4]
   1a022:	b950      	cbnz	r0, 1a03a <gpio_nrfx_manage_callback+0x3a>
   1a024:	491c      	ldr	r1, [pc, #112]	; (1a098 <gpio_nrfx_manage_callback+0x98>)
   1a026:	232b      	movs	r3, #43	; 0x2b
   1a028:	4a18      	ldr	r2, [pc, #96]	; (1a08c <gpio_nrfx_manage_callback+0x8c>)
   1a02a:	4819      	ldr	r0, [pc, #100]	; (1a090 <gpio_nrfx_manage_callback+0x90>)
   1a02c:	f00a ff53 	bl	24ed6 <assert_print>
   1a030:	481a      	ldr	r0, [pc, #104]	; (1a09c <gpio_nrfx_manage_callback+0x9c>)
   1a032:	f00a ff50 	bl	24ed6 <assert_print>
   1a036:	212b      	movs	r1, #43	; 0x2b
   1a038:	e7ef      	b.n	1a01a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1a03a:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1a03c:	b1f8      	cbz	r0, 1a07e <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a03e:	4288      	cmp	r0, r1
   1a040:	d119      	bne.n	1a076 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1a042:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1a044:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a046:	42a1      	cmp	r1, r4
	list->head = node;
   1a048:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1a04a:	d100      	bne.n	1a04e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1a04c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1a04e:	2000      	movs	r0, #0
   1a050:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1a052:	b12a      	cbz	r2, 1a060 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1a054:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1a056:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1a058:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1a05a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a05c:	b902      	cbnz	r2, 1a060 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1a05e:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1a060:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1a062:	e010      	b.n	1a086 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a064:	4281      	cmp	r1, r0
   1a066:	d106      	bne.n	1a076 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1a068:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1a06a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a06c:	6898      	ldr	r0, [r3, #8]
   1a06e:	4281      	cmp	r1, r0
   1a070:	d1ed      	bne.n	1a04e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1a072:	609c      	str	r4, [r3, #8]
}
   1a074:	e7eb      	b.n	1a04e <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1a076:	4604      	mov	r4, r0
   1a078:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a07a:	2800      	cmp	r0, #0
   1a07c:	d1f2      	bne.n	1a064 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1a07e:	2a00      	cmp	r2, #0
   1a080:	d1e8      	bne.n	1a054 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1a082:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1a086:	bd10      	pop	{r4, pc}
   1a088:	0002c056 	.word	0x0002c056
   1a08c:	0002f818 	.word	0x0002f818
   1a090:	0002b939 	.word	0x0002b939
   1a094:	0002f854 	.word	0x0002f854
   1a098:	0002f863 	.word	0x0002f863
   1a09c:	0002f875 	.word	0x0002f875

0001a0a0 <gpio_nrfx_pin_interrupt_configure>:
{
   1a0a0:	b530      	push	{r4, r5, lr}
	return port->config;
   1a0a2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a0a4:	f001 041f 	and.w	r4, r1, #31
   1a0a8:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1a0aa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1a0ae:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a0b0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1a0b4:	d105      	bne.n	1a0c2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1a0b6:	4620      	mov	r0, r4
   1a0b8:	f003 f990 	bl	1d3dc <nrfx_gpiote_trigger_disable>
		return 0;
   1a0bc:	2000      	movs	r0, #0
}
   1a0be:	b005      	add	sp, #20
   1a0c0:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a0c2:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1a0c4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a0c8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1a0cc:	d114      	bne.n	1a0f8 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1a0ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a0d2:	bf0c      	ite	eq
   1a0d4:	2304      	moveq	r3, #4
   1a0d6:	2305      	movne	r3, #5
   1a0d8:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a0dc:	2300      	movs	r3, #0
   1a0de:	4620      	mov	r0, r4
   1a0e0:	4619      	mov	r1, r3
   1a0e2:	aa02      	add	r2, sp, #8
   1a0e4:	f002 ff84 	bl	1cff0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1a0e8:	4b2a      	ldr	r3, [pc, #168]	; (1a194 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1a0ea:	4298      	cmp	r0, r3
   1a0ec:	d14f      	bne.n	1a18e <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1a0ee:	2101      	movs	r1, #1
   1a0f0:	4620      	mov	r0, r4
   1a0f2:	f003 f909 	bl	1d308 <nrfx_gpiote_trigger_enable>
	return 0;
   1a0f6:	e7e1      	b.n	1a0bc <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1a0f8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1a0fc:	d024      	beq.n	1a148 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1a0fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1a102:	bf14      	ite	ne
   1a104:	2301      	movne	r3, #1
   1a106:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a108:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1a10c:	6883      	ldr	r3, [r0, #8]
   1a10e:	40cb      	lsrs	r3, r1
   1a110:	07d8      	lsls	r0, r3, #31
   1a112:	d4e3      	bmi.n	1a0dc <gpio_nrfx_pin_interrupt_configure+0x3c>
   1a114:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1a118:	d1e0      	bne.n	1a0dc <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1a11a:	0962      	lsrs	r2, r4, #5
   1a11c:	f004 031f 	and.w	r3, r4, #31
   1a120:	d014      	beq.n	1a14c <gpio_nrfx_pin_interrupt_configure+0xac>
   1a122:	2a01      	cmp	r2, #1
   1a124:	d104      	bne.n	1a130 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1a126:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a12a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1a12c:	07d1      	lsls	r1, r2, #31
   1a12e:	d414      	bmi.n	1a15a <gpio_nrfx_pin_interrupt_configure+0xba>
   1a130:	4919      	ldr	r1, [pc, #100]	; (1a198 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1a132:	481a      	ldr	r0, [pc, #104]	; (1a19c <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1a134:	f240 2347 	movw	r3, #583	; 0x247
   1a138:	4a19      	ldr	r2, [pc, #100]	; (1a1a0 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1a13a:	f00a fecc 	bl	24ed6 <assert_print>
   1a13e:	f240 2147 	movw	r1, #583	; 0x247
   1a142:	4817      	ldr	r0, [pc, #92]	; (1a1a0 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1a144:	f00a fec0 	bl	24ec8 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1a148:	2303      	movs	r3, #3
   1a14a:	e7dd      	b.n	1a108 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1a14c:	f04f 32ff 	mov.w	r2, #4294967295
   1a150:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1a152:	07d2      	lsls	r2, r2, #31
   1a154:	d5ec      	bpl.n	1a130 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1a156:	4a13      	ldr	r2, [pc, #76]	; (1a1a4 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1a158:	e000      	b.n	1a15c <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1a15a:	4a13      	ldr	r2, [pc, #76]	; (1a1a8 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a15c:	3380      	adds	r3, #128	; 0x80
   1a15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1a162:	07db      	lsls	r3, r3, #31
   1a164:	d4ba      	bmi.n	1a0dc <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a166:	f10d 0507 	add.w	r5, sp, #7
   1a16a:	4629      	mov	r1, r5
   1a16c:	4620      	mov	r0, r4
   1a16e:	f003 f865 	bl	1d23c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1a172:	4b0e      	ldr	r3, [pc, #56]	; (1a1ac <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1a174:	4298      	cmp	r0, r3
   1a176:	d001      	beq.n	1a17c <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1a178:	9503      	str	r5, [sp, #12]
   1a17a:	e7af      	b.n	1a0dc <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1a17c:	4628      	mov	r0, r5
   1a17e:	f003 f8bd 	bl	1d2fc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1a182:	4b04      	ldr	r3, [pc, #16]	; (1a194 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1a184:	4298      	cmp	r0, r3
   1a186:	d0f7      	beq.n	1a178 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1a188:	f06f 000b 	mvn.w	r0, #11
   1a18c:	e797      	b.n	1a0be <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1a18e:	f06f 0015 	mvn.w	r0, #21
   1a192:	e794      	b.n	1a0be <gpio_nrfx_pin_interrupt_configure+0x1e>
   1a194:	0bad0000 	.word	0x0bad0000
   1a198:	0002f8bf 	.word	0x0002f8bf
   1a19c:	0002b939 	.word	0x0002b939
   1a1a0:	0002f88c 	.word	0x0002f88c
   1a1a4:	40842500 	.word	0x40842500
   1a1a8:	40842800 	.word	0x40842800
   1a1ac:	0bad0004 	.word	0x0bad0004

0001a1b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1a1b0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1a1b2:	f003 f893 	bl	1d2dc <nrfx_gpiote_is_init>
   1a1b6:	4604      	mov	r4, r0
   1a1b8:	b968      	cbnz	r0, 1a1d6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1a1ba:	f003 f867 	bl	1d28c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1a1be:	4b08      	ldr	r3, [pc, #32]	; (1a1e0 <gpio_nrfx_init+0x30>)
   1a1c0:	4298      	cmp	r0, r3
   1a1c2:	d10a      	bne.n	1a1da <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1a1c4:	4621      	mov	r1, r4
   1a1c6:	4807      	ldr	r0, [pc, #28]	; (1a1e4 <gpio_nrfx_init+0x34>)
   1a1c8:	f003 f832 	bl	1d230 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a1cc:	4622      	mov	r2, r4
   1a1ce:	2105      	movs	r1, #5
   1a1d0:	202f      	movs	r0, #47	; 0x2f
   1a1d2:	f7f6 f85d 	bl	10290 <z_arm_irq_priority_set>
		return 0;
   1a1d6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1a1d8:	bd10      	pop	{r4, pc}
		return -EIO;
   1a1da:	f06f 0004 	mvn.w	r0, #4
   1a1de:	e7fb      	b.n	1a1d8 <gpio_nrfx_init+0x28>
   1a1e0:	0bad0000 	.word	0x0bad0000
   1a1e4:	0001a1e9 	.word	0x0001a1e9

0001a1e8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a1e8:	0942      	lsrs	r2, r0, #5
{
   1a1ea:	4603      	mov	r3, r0
   1a1ec:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a1ee:	d002      	beq.n	1a1f6 <nrfx_gpio_handler+0xe>
   1a1f0:	2a01      	cmp	r2, #1
   1a1f2:	d01e      	beq.n	1a232 <nrfx_gpio_handler+0x4a>
}
   1a1f4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a1f6:	4e14      	ldr	r6, [pc, #80]	; (1a248 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1a1f8:	6932      	ldr	r2, [r6, #16]
   1a1fa:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a1fc:	2900      	cmp	r1, #0
   1a1fe:	d0f9      	beq.n	1a1f4 <nrfx_gpio_handler+0xc>
   1a200:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1a202:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1a206:	680c      	ldr	r4, [r1, #0]
   1a208:	409d      	lsls	r5, r3
   1a20a:	2900      	cmp	r1, #0
   1a20c:	d0f2      	beq.n	1a1f4 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1a20e:	688a      	ldr	r2, [r1, #8]
   1a210:	402a      	ands	r2, r5
   1a212:	d012      	beq.n	1a23a <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1a214:	684b      	ldr	r3, [r1, #4]
   1a216:	b973      	cbnz	r3, 1a236 <nrfx_gpio_handler+0x4e>
   1a218:	490c      	ldr	r1, [pc, #48]	; (1a24c <nrfx_gpio_handler+0x64>)
   1a21a:	234d      	movs	r3, #77	; 0x4d
   1a21c:	4a0c      	ldr	r2, [pc, #48]	; (1a250 <nrfx_gpio_handler+0x68>)
   1a21e:	480d      	ldr	r0, [pc, #52]	; (1a254 <nrfx_gpio_handler+0x6c>)
   1a220:	f00a fe59 	bl	24ed6 <assert_print>
   1a224:	480c      	ldr	r0, [pc, #48]	; (1a258 <nrfx_gpio_handler+0x70>)
   1a226:	f00a fe56 	bl	24ed6 <assert_print>
   1a22a:	214d      	movs	r1, #77	; 0x4d
   1a22c:	4808      	ldr	r0, [pc, #32]	; (1a250 <nrfx_gpio_handler+0x68>)
   1a22e:	f00a fe4b 	bl	24ec8 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a232:	4e0a      	ldr	r6, [pc, #40]	; (1a25c <nrfx_gpio_handler+0x74>)
   1a234:	e7e0      	b.n	1a1f8 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1a236:	4630      	mov	r0, r6
   1a238:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a23a:	b11c      	cbz	r4, 1a244 <nrfx_gpio_handler+0x5c>
   1a23c:	6823      	ldr	r3, [r4, #0]
   1a23e:	4621      	mov	r1, r4
   1a240:	461c      	mov	r4, r3
   1a242:	e7e2      	b.n	1a20a <nrfx_gpio_handler+0x22>
   1a244:	4623      	mov	r3, r4
   1a246:	e7fa      	b.n	1a23e <nrfx_gpio_handler+0x56>
   1a248:	0002a3d0 	.word	0x0002a3d0
   1a24c:	000305ee 	.word	0x000305ee
   1a250:	0002f818 	.word	0x0002f818
   1a254:	0002b939 	.word	0x0002b939
   1a258:	0002f875 	.word	0x0002f875
   1a25c:	0002a3b8 	.word	0x0002a3b8

0001a260 <gpio_nrfx_pin_configure>:
{
   1a260:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1a264:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a268:	f001 051f 	and.w	r5, r1, #31
   1a26c:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1a270:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a272:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1a276:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a278:	4628      	mov	r0, r5
   1a27a:	f10d 0103 	add.w	r1, sp, #3
   1a27e:	f002 ffdd 	bl	1d23c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1a282:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a286:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1a288:	d115      	bne.n	1a2b6 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1a28a:	4628      	mov	r0, r5
   1a28c:	f003 f8d0 	bl	1d430 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1a290:	4b48      	ldr	r3, [pc, #288]	; (1a3b4 <gpio_nrfx_pin_configure+0x154>)
   1a292:	429e      	cmp	r6, r3
   1a294:	d170      	bne.n	1a378 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1a296:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1a29a:	f003 f829 	bl	1d2f0 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1a29e:	42b0      	cmp	r0, r6
   1a2a0:	d06a      	beq.n	1a378 <gpio_nrfx_pin_configure+0x118>
   1a2a2:	4945      	ldr	r1, [pc, #276]	; (1a3b8 <gpio_nrfx_pin_configure+0x158>)
   1a2a4:	236a      	movs	r3, #106	; 0x6a
   1a2a6:	4a45      	ldr	r2, [pc, #276]	; (1a3bc <gpio_nrfx_pin_configure+0x15c>)
   1a2a8:	4845      	ldr	r0, [pc, #276]	; (1a3c0 <gpio_nrfx_pin_configure+0x160>)
   1a2aa:	f00a fe14 	bl	24ed6 <assert_print>
   1a2ae:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1a2b0:	4842      	ldr	r0, [pc, #264]	; (1a3bc <gpio_nrfx_pin_configure+0x15c>)
   1a2b2:	f00a fe09 	bl	24ec8 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a2b6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a2b8:	4628      	mov	r0, r5
   1a2ba:	4619      	mov	r1, r3
   1a2bc:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a2be:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a2c2:	f002 fe95 	bl	1cff0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1a2c6:	4b3b      	ldr	r3, [pc, #236]	; (1a3b4 <gpio_nrfx_pin_configure+0x154>)
   1a2c8:	4298      	cmp	r0, r3
   1a2ca:	d004      	beq.n	1a2d6 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1a2cc:	f06f 0015 	mvn.w	r0, #21
}
   1a2d0:	b004      	add	sp, #16
   1a2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1a2d6:	4286      	cmp	r6, r0
   1a2d8:	d10d      	bne.n	1a2f6 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1a2da:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1a2de:	f003 f807 	bl	1d2f0 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1a2e2:	42b0      	cmp	r0, r6
   1a2e4:	d007      	beq.n	1a2f6 <gpio_nrfx_pin_configure+0x96>
   1a2e6:	4934      	ldr	r1, [pc, #208]	; (1a3b8 <gpio_nrfx_pin_configure+0x158>)
   1a2e8:	237c      	movs	r3, #124	; 0x7c
   1a2ea:	4a34      	ldr	r2, [pc, #208]	; (1a3bc <gpio_nrfx_pin_configure+0x15c>)
   1a2ec:	4834      	ldr	r0, [pc, #208]	; (1a3c0 <gpio_nrfx_pin_configure+0x160>)
   1a2ee:	f00a fdf2 	bl	24ed6 <assert_print>
   1a2f2:	217c      	movs	r1, #124	; 0x7c
   1a2f4:	e7dc      	b.n	1a2b0 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1a2f6:	03a6      	lsls	r6, r4, #14
   1a2f8:	d54c      	bpl.n	1a394 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a2fa:	f240 3306 	movw	r3, #774	; 0x306
   1a2fe:	4023      	ands	r3, r4
   1a300:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1a304:	d019      	beq.n	1a33a <gpio_nrfx_pin_configure+0xda>
   1a306:	d80c      	bhi.n	1a322 <gpio_nrfx_pin_configure+0xc2>
   1a308:	2b06      	cmp	r3, #6
   1a30a:	d017      	beq.n	1a33c <gpio_nrfx_pin_configure+0xdc>
   1a30c:	d804      	bhi.n	1a318 <gpio_nrfx_pin_configure+0xb8>
   1a30e:	b1ab      	cbz	r3, 1a33c <gpio_nrfx_pin_configure+0xdc>
   1a310:	2b02      	cmp	r3, #2
   1a312:	d1db      	bne.n	1a2cc <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1a314:	2304      	movs	r3, #4
   1a316:	e011      	b.n	1a33c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1a31c:	d1d6      	bne.n	1a2cc <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1a31e:	2301      	movs	r3, #1
   1a320:	e00c      	b.n	1a33c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a322:	f240 2202 	movw	r2, #514	; 0x202
   1a326:	4293      	cmp	r3, r2
   1a328:	d028      	beq.n	1a37c <gpio_nrfx_pin_configure+0x11c>
   1a32a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1a32e:	d027      	beq.n	1a380 <gpio_nrfx_pin_configure+0x120>
   1a330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1a334:	d1ca      	bne.n	1a2cc <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1a336:	2302      	movs	r3, #2
   1a338:	e000      	b.n	1a33c <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1a33a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1a33c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1a340:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1a344:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1a348:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1a34a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1a34e:	bf4c      	ite	mi
   1a350:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1a352:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1a356:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1a358:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1a35c:	d512      	bpl.n	1a384 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1a35e:	2301      	movs	r3, #1
   1a360:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1a364:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1a366:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1a368:	2200      	movs	r2, #0
   1a36a:	4628      	mov	r0, r5
   1a36c:	a901      	add	r1, sp, #4
   1a36e:	f002 fee7 	bl	1d140 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1a372:	4b10      	ldr	r3, [pc, #64]	; (1a3b4 <gpio_nrfx_pin_configure+0x154>)
   1a374:	4298      	cmp	r0, r3
   1a376:	d1a9      	bne.n	1a2cc <gpio_nrfx_pin_configure+0x6c>
   1a378:	2000      	movs	r0, #0
   1a37a:	e7a9      	b.n	1a2d0 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1a37c:	2305      	movs	r3, #5
   1a37e:	e7dd      	b.n	1a33c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a380:	2303      	movs	r3, #3
   1a382:	e7db      	b.n	1a33c <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1a384:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1a386:	bf41      	itttt	mi
   1a388:	2301      	movmi	r3, #1
   1a38a:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1a38e:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1a390:	60d3      	strmi	r3, [r2, #12]
}
   1a392:	e7e9      	b.n	1a368 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1a394:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a396:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1a39a:	bf4c      	ite	mi
   1a39c:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1a39e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a3a2:	461a      	mov	r2, r3
   1a3a4:	4628      	mov	r0, r5
   1a3a6:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1a3a8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a3ac:	f002 fe20 	bl	1cff0 <nrfx_gpiote_input_configure>
   1a3b0:	e7df      	b.n	1a372 <gpio_nrfx_pin_configure+0x112>
   1a3b2:	bf00      	nop
   1a3b4:	0bad0000 	.word	0x0bad0000
   1a3b8:	0002c90e 	.word	0x0002c90e
   1a3bc:	0002f8e2 	.word	0x0002f8e2
   1a3c0:	0002b939 	.word	0x0002b939

0001a3c4 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1a3c4:	4603      	mov	r3, r0
   1a3c6:	b510      	push	{r4, lr}
   1a3c8:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a3ca:	7919      	ldrb	r1, [r3, #4]
   1a3cc:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1a3ce:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a3d0:	fa03 f101 	lsl.w	r1, r3, r1
   1a3d4:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1a3d6:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a3d8:	681b      	ldr	r3, [r3, #0]
   1a3da:	4219      	tst	r1, r3
   1a3dc:	d10e      	bne.n	1a3fc <gpio_pin_set_dt.isra.0+0x38>
   1a3de:	490e      	ldr	r1, [pc, #56]	; (1a418 <gpio_pin_set_dt.isra.0+0x54>)
   1a3e0:	f240 533d 	movw	r3, #1341	; 0x53d
   1a3e4:	4a0d      	ldr	r2, [pc, #52]	; (1a41c <gpio_pin_set_dt.isra.0+0x58>)
   1a3e6:	480e      	ldr	r0, [pc, #56]	; (1a420 <gpio_pin_set_dt.isra.0+0x5c>)
   1a3e8:	f00a fd75 	bl	24ed6 <assert_print>
   1a3ec:	480d      	ldr	r0, [pc, #52]	; (1a424 <gpio_pin_set_dt.isra.0+0x60>)
   1a3ee:	f00a fd72 	bl	24ed6 <assert_print>
   1a3f2:	f240 513d 	movw	r1, #1341	; 0x53d
   1a3f6:	4809      	ldr	r0, [pc, #36]	; (1a41c <gpio_pin_set_dt.isra.0+0x58>)
   1a3f8:	f00a fd66 	bl	24ec8 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1a3fc:	6823      	ldr	r3, [r4, #0]
   1a3fe:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1a400:	bf18      	it	ne
   1a402:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1a406:	b122      	cbz	r2, 1a412 <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1a408:	6883      	ldr	r3, [r0, #8]
   1a40a:	68db      	ldr	r3, [r3, #12]
}
   1a40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1a410:	4718      	bx	r3
   1a412:	6883      	ldr	r3, [r0, #8]
   1a414:	691b      	ldr	r3, [r3, #16]
   1a416:	e7f9      	b.n	1a40c <gpio_pin_set_dt.isra.0+0x48>
   1a418:	0002b8fb 	.word	0x0002b8fb
   1a41c:	0002b8ca 	.word	0x0002b8ca
   1a420:	0002b939 	.word	0x0002b939
   1a424:	0002b956 	.word	0x0002b956

0001a428 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1a428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   1a42c:	6844      	ldr	r4, [r0, #4]
{
   1a42e:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1a430:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1a432:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1a434:	2100      	movs	r1, #0
   1a436:	4630      	mov	r0, r6
   1a438:	aa07      	add	r2, sp, #28
   1a43a:	f00e f964 	bl	28706 <pinctrl_lookup_state>
	if (ret < 0) {
   1a43e:	2800      	cmp	r0, #0
   1a440:	db2a      	blt.n	1a498 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1a442:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a444:	6832      	ldr	r2, [r6, #0]
   1a446:	7919      	ldrb	r1, [r3, #4]
   1a448:	6818      	ldr	r0, [r3, #0]
   1a44a:	f00e f96f 	bl	2872c <pinctrl_configure_pins>
	if (err < 0) {
   1a44e:	2800      	cmp	r0, #0
   1a450:	db22      	blt.n	1a498 <spi_nrfx_init+0x70>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a452:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1a454:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a456:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1a458:	68ac      	ldr	r4, [r5, #8]
   1a45a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1a45e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1a462:	429c      	cmp	r4, r3
   1a464:	d304      	bcc.n	1a470 <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1a466:	4628      	mov	r0, r5
   1a468:	f00d fe2f 	bl	280ca <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1a46c:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1a46e:	e013      	b.n	1a498 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   1a470:	6820      	ldr	r0, [r4, #0]
   1a472:	f00f f854 	bl	2951e <z_device_is_ready>
   1a476:	4603      	mov	r3, r0
   1a478:	b988      	cbnz	r0, 1a49e <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1a47a:	7922      	ldrb	r2, [r4, #4]
   1a47c:	4932      	ldr	r1, [pc, #200]	; (1a548 <spi_nrfx_init+0x120>)
   1a47e:	9204      	str	r2, [sp, #16]
   1a480:	6822      	ldr	r2, [r4, #0]
   1a482:	6812      	ldr	r2, [r2, #0]
   1a484:	9000      	str	r0, [sp, #0]
   1a486:	9203      	str	r2, [sp, #12]
   1a488:	4a30      	ldr	r2, [pc, #192]	; (1a54c <spi_nrfx_init+0x124>)
   1a48a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1a48e:	2201      	movs	r2, #1
   1a490:	f00d fde9 	bl	28066 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   1a494:	f06f 0012 	mvn.w	r0, #18
#endif
}
   1a498:	b008      	add	sp, #32
   1a49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   1a49e:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1a4a0:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1a4a2:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1a4a4:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1a4a8:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1a4aa:	f8d0 e010 	ldr.w	lr, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1a4ae:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1a4b2:	d10e      	bne.n	1a4d2 <spi_nrfx_init+0xaa>
   1a4b4:	4926      	ldr	r1, [pc, #152]	; (1a550 <spi_nrfx_init+0x128>)
   1a4b6:	f240 23b7 	movw	r3, #695	; 0x2b7
   1a4ba:	4a26      	ldr	r2, [pc, #152]	; (1a554 <spi_nrfx_init+0x12c>)
   1a4bc:	4826      	ldr	r0, [pc, #152]	; (1a558 <spi_nrfx_init+0x130>)
   1a4be:	f00a fd0a 	bl	24ed6 <assert_print>
   1a4c2:	4826      	ldr	r0, [pc, #152]	; (1a55c <spi_nrfx_init+0x134>)
   1a4c4:	f00a fd07 	bl	24ed6 <assert_print>
   1a4c8:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1a4cc:	4821      	ldr	r0, [pc, #132]	; (1a554 <spi_nrfx_init+0x12c>)
   1a4ce:	f00a fcfb 	bl	24ec8 <assert_post_action>
   1a4d2:	f003 0206 	and.w	r2, r3, #6
   1a4d6:	2a04      	cmp	r2, #4
   1a4d8:	d109      	bne.n	1a4ee <spi_nrfx_init+0xc6>
   1a4da:	4921      	ldr	r1, [pc, #132]	; (1a560 <spi_nrfx_init+0x138>)
   1a4dc:	f240 23bf 	movw	r3, #703	; 0x2bf
   1a4e0:	4a1c      	ldr	r2, [pc, #112]	; (1a554 <spi_nrfx_init+0x12c>)
   1a4e2:	481d      	ldr	r0, [pc, #116]	; (1a558 <spi_nrfx_init+0x130>)
   1a4e4:	f00a fcf7 	bl	24ed6 <assert_print>
   1a4e8:	f240 21bf 	movw	r1, #703	; 0x2bf
   1a4ec:	e7ee      	b.n	1a4cc <spi_nrfx_init+0xa4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a4ee:	683f      	ldr	r7, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a4f0:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a4f2:	fa06 fc01 	lsl.w	ip, r6, r1
	return gpio_pin_configure(spec->port,
   1a4f6:	bf54      	ite	pl
   1a4f8:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a4fc:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a500:	ea1c 0f07 	tst.w	ip, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a504:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a508:	d10c      	bne.n	1a524 <spi_nrfx_init+0xfc>
   1a50a:	4916      	ldr	r1, [pc, #88]	; (1a564 <spi_nrfx_init+0x13c>)
   1a50c:	f240 23d2 	movw	r3, #722	; 0x2d2
   1a510:	4a10      	ldr	r2, [pc, #64]	; (1a554 <spi_nrfx_init+0x12c>)
   1a512:	4811      	ldr	r0, [pc, #68]	; (1a558 <spi_nrfx_init+0x130>)
   1a514:	f00a fcdf 	bl	24ed6 <assert_print>
   1a518:	4813      	ldr	r0, [pc, #76]	; (1a568 <spi_nrfx_init+0x140>)
   1a51a:	f00a fcdc 	bl	24ed6 <assert_print>
   1a51e:	f240 21d2 	movw	r1, #722	; 0x2d2
   1a522:	e7d3      	b.n	1a4cc <spi_nrfx_init+0xa4>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a524:	f8de 7000 	ldr.w	r7, [lr]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a528:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a52a:	bf4c      	ite	mi
   1a52c:	ea4c 0707 	orrmi.w	r7, ip, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a530:	ea27 070c 	bicpl.w	r7, r7, ip
   1a534:	f8ce 7000 	str.w	r7, [lr]
	return api->pin_configure(port, pin, flags);
   1a538:	f8d8 3000 	ldr.w	r3, [r8]
   1a53c:	4798      	blx	r3
		if (ret < 0) {
   1a53e:	2800      	cmp	r0, #0
   1a540:	dbaa      	blt.n	1a498 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1a542:	3408      	adds	r4, #8
   1a544:	e789      	b.n	1a45a <spi_nrfx_init+0x32>
   1a546:	bf00      	nop
   1a548:	0002aa70 	.word	0x0002aa70
   1a54c:	0002f926 	.word	0x0002f926
   1a550:	0002bc1c 	.word	0x0002bc1c
   1a554:	0002b8ca 	.word	0x0002b8ca
   1a558:	0002b939 	.word	0x0002b939
   1a55c:	0002bc55 	.word	0x0002bc55
   1a560:	0002bd19 	.word	0x0002bd19
   1a564:	0002b8fb 	.word	0x0002b8fb
   1a568:	0002b956 	.word	0x0002b956

0001a56c <transfer_next_chunk>:
{
   1a56c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1a56e:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a570:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1a572:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1a574:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1a576:	b98d      	cbnz	r5, 1a59c <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1a578:	2b00      	cmp	r3, #0
   1a57a:	d137      	bne.n	1a5ec <transfer_next_chunk+0x80>
	int error = 0;
   1a57c:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1a57e:	2200      	movs	r2, #0
   1a580:	4620      	mov	r0, r4
   1a582:	4611      	mov	r1, r2
   1a584:	f00d fd7f 	bl	28086 <_spi_context_cs_control>
	ctx->sync_status = status;
   1a588:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1a58a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a58e:	f005 fcd7 	bl	1ff40 <z_impl_k_sem_give>
	dev_data->busy = false;
   1a592:	2300      	movs	r3, #0
   1a594:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1a598:	b004      	add	sp, #16
   1a59a:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1a59c:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1a59e:	bb0b      	cbnz	r3, 1a5e4 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1a5a0:	bb39      	cbnz	r1, 1a5f2 <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1a5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a5a6:	42aa      	cmp	r2, r5
   1a5a8:	bf28      	it	cs
   1a5aa:	462a      	movcs	r2, r5
   1a5ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1a5ae:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1a5b0:	9100      	str	r1, [sp, #0]
   1a5b2:	b11b      	cbz	r3, 1a5bc <transfer_next_chunk+0x50>
   1a5b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1a5b6:	2b00      	cmp	r3, #0
   1a5b8:	bf18      	it	ne
   1a5ba:	4613      	movne	r3, r2
   1a5bc:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1a5be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a5c0:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1a5c2:	b11b      	cbz	r3, 1a5cc <transfer_next_chunk+0x60>
   1a5c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a5c6:	2b00      	cmp	r3, #0
   1a5c8:	bf18      	it	ne
   1a5ca:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1a5cc:	2200      	movs	r2, #0
   1a5ce:	4669      	mov	r1, sp
   1a5d0:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a5d2:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1a5d4:	f003 fed0 	bl	1e378 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1a5d8:	4b0d      	ldr	r3, [pc, #52]	; (1a610 <transfer_next_chunk+0xa4>)
   1a5da:	4298      	cmp	r0, r3
   1a5dc:	d0dc      	beq.n	1a598 <transfer_next_chunk+0x2c>
			error = -EIO;
   1a5de:	f06f 0504 	mvn.w	r5, #4
   1a5e2:	e7cc      	b.n	1a57e <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1a5e4:	429d      	cmp	r5, r3
   1a5e6:	bf28      	it	cs
   1a5e8:	461d      	movcs	r5, r3
   1a5ea:	e7d9      	b.n	1a5a0 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1a5ec:	461d      	mov	r5, r3
   1a5ee:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1a5f0:	e7d7      	b.n	1a5a2 <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a5f2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1a5f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a5fa:	d0d2      	beq.n	1a5a2 <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1a5fc:	2d08      	cmp	r5, #8
   1a5fe:	bf28      	it	cs
   1a600:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a602:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1a604:	462a      	mov	r2, r5
   1a606:	f00f f9cc 	bl	299a2 <memcpy>
			tx_buf = dev_data->buffer;
   1a60a:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1a60c:	e7c9      	b.n	1a5a2 <transfer_next_chunk+0x36>
   1a60e:	bf00      	nop
   1a610:	0bad0000 	.word	0x0bad0000

0001a614 <event_handler>:
{
   1a614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1a616:	7803      	ldrb	r3, [r0, #0]
{
   1a618:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1a61a:	2b00      	cmp	r3, #0
   1a61c:	d154      	bne.n	1a6c8 <event_handler+0xb4>
	if (!ctx->tx_len) {
   1a61e:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a620:	6e89      	ldr	r1, [r1, #104]	; 0x68
   1a622:	b152      	cbz	r2, 1a63a <event_handler+0x26>
	if (len > ctx->tx_len) {
   1a624:	4291      	cmp	r1, r2
   1a626:	d91d      	bls.n	1a664 <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   1a628:	4a28      	ldr	r2, [pc, #160]	; (1a6cc <event_handler+0xb8>)
   1a62a:	4618      	mov	r0, r3
   1a62c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a630:	4927      	ldr	r1, [pc, #156]	; (1a6d0 <event_handler+0xbc>)
   1a632:	2201      	movs	r2, #1
   1a634:	9300      	str	r3, [sp, #0]
   1a636:	f00d fd16 	bl	28066 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   1a63a:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a63c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1a63e:	b15b      	cbz	r3, 1a658 <event_handler+0x44>
	if (len > ctx->rx_len) {
   1a640:	429a      	cmp	r2, r3
   1a642:	d928      	bls.n	1a696 <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   1a644:	4b21      	ldr	r3, [pc, #132]	; (1a6cc <event_handler+0xb8>)
   1a646:	2201      	movs	r2, #1
   1a648:	9302      	str	r3, [sp, #8]
   1a64a:	2300      	movs	r3, #0
   1a64c:	4920      	ldr	r1, [pc, #128]	; (1a6d0 <event_handler+0xbc>)
   1a64e:	4618      	mov	r0, r3
   1a650:	e9cd 3300 	strd	r3, r3, [sp]
   1a654:	f00d fd07 	bl	28066 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1a658:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1a65a:	b004      	add	sp, #16
   1a65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1a660:	f7ff bf84 	b.w	1a56c <transfer_next_chunk>
	ctx->tx_len -= len;
   1a664:	1a52      	subs	r2, r2, r1
   1a666:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   1a668:	b97a      	cbnz	r2, 1a68a <event_handler+0x76>
		++ctx->current_tx;
   1a66a:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1a66c:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   1a670:	3308      	adds	r3, #8
   1a672:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   1a674:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1a676:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   1a67a:	3b01      	subs	r3, #1
   1a67c:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1a67e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1a682:	f00d fcdd 	bl	28040 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1a686:	6560      	str	r0, [r4, #84]	; 0x54
   1a688:	e7d7      	b.n	1a63a <event_handler+0x26>
	} else if (ctx->tx_buf) {
   1a68a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1a68c:	2b00      	cmp	r3, #0
   1a68e:	d0d4      	beq.n	1a63a <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   1a690:	440b      	add	r3, r1
   1a692:	6563      	str	r3, [r4, #84]	; 0x54
   1a694:	e7d1      	b.n	1a63a <event_handler+0x26>
	ctx->rx_len -= len;
   1a696:	1a9b      	subs	r3, r3, r2
   1a698:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1a69a:	b97b      	cbnz	r3, 1a6bc <event_handler+0xa8>
		++ctx->current_rx;
   1a69c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1a69e:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1a6a2:	3308      	adds	r3, #8
   1a6a4:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1a6a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1a6a8:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1a6ac:	3b01      	subs	r3, #1
   1a6ae:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1a6b0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a6b4:	f00d fcc4 	bl	28040 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1a6b8:	65e0      	str	r0, [r4, #92]	; 0x5c
   1a6ba:	e7cd      	b.n	1a658 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   1a6bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a6be:	2b00      	cmp	r3, #0
   1a6c0:	d0ca      	beq.n	1a658 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   1a6c2:	4413      	add	r3, r2
   1a6c4:	65e3      	str	r3, [r4, #92]	; 0x5c
   1a6c6:	e7c7      	b.n	1a658 <event_handler+0x44>
}
   1a6c8:	b004      	add	sp, #16
   1a6ca:	bd10      	pop	{r4, pc}
   1a6cc:	0002f94a 	.word	0x0002f94a
   1a6d0:	0002aa70 	.word	0x0002aa70

0001a6d4 <spi_nrfx_transceive>:
{
   1a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6d8:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a6da:	888b      	ldrh	r3, [r1, #4]
   1a6dc:	460f      	mov	r7, r1
   1a6de:	0499      	lsls	r1, r3, #18
   1a6e0:	4680      	mov	r8, r0
   1a6e2:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   1a6e4:	6904      	ldr	r4, [r0, #16]
{
   1a6e6:	b08f      	sub	sp, #60	; 0x3c
   1a6e8:	d435      	bmi.n	1a756 <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1a6ea:	f04f 32ff 	mov.w	r2, #4294967295
   1a6ee:	f04f 33ff 	mov.w	r3, #4294967295
   1a6f2:	f104 0010 	add.w	r0, r4, #16
   1a6f6:	f005 fc67 	bl	1ffc8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1a6fa:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a6fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1a700:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1a704:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a706:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1a708:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   1a70c:	9306      	str	r3, [sp, #24]
   1a70e:	b123      	cbz	r3, 1a71a <spi_nrfx_transceive+0x46>
   1a710:	f8da 3000 	ldr.w	r3, [sl]
   1a714:	429f      	cmp	r7, r3
   1a716:	f000 80da 	beq.w	1a8ce <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1a71a:	88be      	ldrh	r6, [r7, #4]
   1a71c:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   1a720:	d020      	beq.n	1a764 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1a722:	4ba1      	ldr	r3, [pc, #644]	; (1a9a8 <spi_nrfx_transceive+0x2d4>)
   1a724:	2201      	movs	r2, #1
   1a726:	9302      	str	r3, [sp, #8]
   1a728:	2300      	movs	r3, #0
   1a72a:	49a0      	ldr	r1, [pc, #640]	; (1a9ac <spi_nrfx_transceive+0x2d8>)
   1a72c:	4618      	mov	r0, r3
   1a72e:	e9cd 3300 	strd	r3, r3, [sp]
   1a732:	f00d fc98 	bl	28066 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1a736:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1a73a:	6823      	ldr	r3, [r4, #0]
   1a73c:	889b      	ldrh	r3, [r3, #4]
   1a73e:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1a742:	d104      	bne.n	1a74e <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   1a744:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1a746:	f104 0010 	add.w	r0, r4, #16
   1a74a:	f005 fbf9 	bl	1ff40 <z_impl_k_sem_give>
}
   1a74e:	4628      	mov	r0, r5
   1a750:	b00f      	add	sp, #60	; 0x3c
   1a752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a756:	69a3      	ldr	r3, [r4, #24]
   1a758:	2b00      	cmp	r3, #0
   1a75a:	d1c6      	bne.n	1a6ea <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1a75c:	6863      	ldr	r3, [r4, #4]
   1a75e:	429f      	cmp	r7, r3
   1a760:	d1c3      	bne.n	1a6ea <spi_nrfx_transceive+0x16>
   1a762:	e7cb      	b.n	1a6fc <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1a764:	f016 0201 	ands.w	r2, r6, #1
   1a768:	d00e      	beq.n	1a788 <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1a76a:	f8d8 2000 	ldr.w	r2, [r8]
   1a76e:	4618      	mov	r0, r3
   1a770:	9203      	str	r2, [sp, #12]
   1a772:	4a8f      	ldr	r2, [pc, #572]	; (1a9b0 <spi_nrfx_transceive+0x2dc>)
   1a774:	498d      	ldr	r1, [pc, #564]	; (1a9ac <spi_nrfx_transceive+0x2d8>)
   1a776:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a77a:	9300      	str	r3, [sp, #0]
   1a77c:	2201      	movs	r2, #1
   1a77e:	f00d fc72 	bl	28066 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a782:	f06f 0515 	mvn.w	r5, #21
   1a786:	e7d8      	b.n	1a73a <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1a788:	f016 0308 	ands.w	r3, r6, #8
   1a78c:	d00a      	beq.n	1a7a4 <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   1a78e:	4b89      	ldr	r3, [pc, #548]	; (1a9b4 <spi_nrfx_transceive+0x2e0>)
   1a790:	9200      	str	r2, [sp, #0]
   1a792:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1a796:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1a798:	2201      	movs	r2, #1
   1a79a:	4618      	mov	r0, r3
   1a79c:	4983      	ldr	r1, [pc, #524]	; (1a9ac <spi_nrfx_transceive+0x2d8>)
   1a79e:	f00d fc62 	bl	28066 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   1a7a2:	e7ee      	b.n	1a782 <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1a7a4:	f3c6 1245 	ubfx	r2, r6, #5, #6
   1a7a8:	2a08      	cmp	r2, #8
   1a7aa:	d004      	beq.n	1a7b6 <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1a7ac:	4a82      	ldr	r2, [pc, #520]	; (1a9b8 <spi_nrfx_transceive+0x2e4>)
   1a7ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a7b2:	9300      	str	r3, [sp, #0]
   1a7b4:	e7f0      	b.n	1a798 <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   1a7b6:	683a      	ldr	r2, [r7, #0]
   1a7b8:	9207      	str	r2, [sp, #28]
   1a7ba:	9907      	ldr	r1, [sp, #28]
   1a7bc:	4a7f      	ldr	r2, [pc, #508]	; (1a9bc <spi_nrfx_transceive+0x2e8>)
   1a7be:	4291      	cmp	r1, r2
   1a7c0:	d801      	bhi.n	1a7c6 <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1a7c2:	4a7f      	ldr	r2, [pc, #508]	; (1a9c0 <spi_nrfx_transceive+0x2ec>)
   1a7c4:	e7f3      	b.n	1a7ae <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   1a7c6:	4b7f      	ldr	r3, [pc, #508]	; (1a9c4 <spi_nrfx_transceive+0x2f0>)
   1a7c8:	429d      	cmp	r5, r3
   1a7ca:	d906      	bls.n	1a7da <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1a7cc:	4a7e      	ldr	r2, [pc, #504]	; (1a9c8 <spi_nrfx_transceive+0x2f4>)
   1a7ce:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1a7d2:	f012 0f03 	tst.w	r2, #3
   1a7d6:	bf18      	it	ne
   1a7d8:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1a7da:	9b05      	ldr	r3, [sp, #20]
   1a7dc:	f10d 0c20 	add.w	ip, sp, #32
   1a7e0:	f103 0e0c 	add.w	lr, r3, #12
   1a7e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1a7e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a7ec:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   1a7ee:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a7f2:	42ab      	cmp	r3, r5
   1a7f4:	bf28      	it	cs
   1a7f6:	462b      	movcs	r3, r5
   1a7f8:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1a7fa:	4b74      	ldr	r3, [pc, #464]	; (1a9cc <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   1a7fc:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   1a800:	429d      	cmp	r5, r3
   1a802:	d946      	bls.n	1a892 <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   1a804:	4b72      	ldr	r3, [pc, #456]	; (1a9d0 <spi_nrfx_transceive+0x2fc>)
   1a806:	429d      	cmp	r5, r3
   1a808:	d946      	bls.n	1a898 <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   1a80a:	4b72      	ldr	r3, [pc, #456]	; (1a9d4 <spi_nrfx_transceive+0x300>)
   1a80c:	429d      	cmp	r5, r3
   1a80e:	d946      	bls.n	1a89e <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   1a810:	4b71      	ldr	r3, [pc, #452]	; (1a9d8 <spi_nrfx_transceive+0x304>)
   1a812:	429d      	cmp	r5, r3
   1a814:	d946      	bls.n	1a8a4 <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   1a816:	4b71      	ldr	r3, [pc, #452]	; (1a9dc <spi_nrfx_transceive+0x308>)
   1a818:	429d      	cmp	r5, r3
   1a81a:	d946      	bls.n	1a8aa <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   1a81c:	4b70      	ldr	r3, [pc, #448]	; (1a9e0 <spi_nrfx_transceive+0x30c>)
   1a81e:	429d      	cmp	r5, r3
   1a820:	d346      	bcc.n	1a8b0 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   1a822:	4b68      	ldr	r3, [pc, #416]	; (1a9c4 <spi_nrfx_transceive+0x2f0>)
   1a824:	429d      	cmp	r5, r3
   1a826:	d346      	bcc.n	1a8b6 <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   1a828:	4b6e      	ldr	r3, [pc, #440]	; (1a9e4 <spi_nrfx_transceive+0x310>)
   1a82a:	429d      	cmp	r5, r3
   1a82c:	bf2c      	ite	cs
   1a82e:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1a832:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1a836:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a838:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1a83a:	f006 0304 	and.w	r3, r6, #4
   1a83e:	d53d      	bpl.n	1a8bc <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   1a840:	2b00      	cmp	r3, #0
   1a842:	bf14      	ite	ne
   1a844:	2303      	movne	r3, #3
   1a846:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1a848:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   1a84c:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   1a84e:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1a852:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   1a856:	b12b      	cbz	r3, 1a864 <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   1a858:	9805      	ldr	r0, [sp, #20]
   1a85a:	f003 fd23 	bl	1e2a4 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1a85e:	2300      	movs	r3, #0
   1a860:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1a864:	4653      	mov	r3, sl
   1a866:	4a60      	ldr	r2, [pc, #384]	; (1a9e8 <spi_nrfx_transceive+0x314>)
   1a868:	9805      	ldr	r0, [sp, #20]
   1a86a:	a908      	add	r1, sp, #32
   1a86c:	f003 fbe8 	bl	1e040 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1a870:	4b5e      	ldr	r3, [pc, #376]	; (1a9ec <spi_nrfx_transceive+0x318>)
   1a872:	4298      	cmp	r0, r3
   1a874:	d026      	beq.n	1a8c4 <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1a876:	4b5e      	ldr	r3, [pc, #376]	; (1a9f0 <spi_nrfx_transceive+0x31c>)
   1a878:	9003      	str	r0, [sp, #12]
   1a87a:	9302      	str	r3, [sp, #8]
   1a87c:	2300      	movs	r3, #0
   1a87e:	2201      	movs	r2, #1
   1a880:	4618      	mov	r0, r3
   1a882:	e9cd 3300 	strd	r3, r3, [sp]
   1a886:	4949      	ldr	r1, [pc, #292]	; (1a9ac <spi_nrfx_transceive+0x2d8>)
   1a888:	f00d fbed 	bl	28066 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1a88c:	f06f 0504 	mvn.w	r5, #4
   1a890:	e753      	b.n	1a73a <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   1a892:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1a896:	e7ce      	b.n	1a836 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   1a898:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1a89c:	e7cb      	b.n	1a836 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   1a89e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1a8a2:	e7c8      	b.n	1a836 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   1a8a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1a8a8:	e7c5      	b.n	1a836 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   1a8aa:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1a8ae:	e7c2      	b.n	1a836 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   1a8b0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1a8b4:	e7bf      	b.n	1a836 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   1a8b6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1a8ba:	e7bc      	b.n	1a836 <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1a8bc:	3b00      	subs	r3, #0
   1a8be:	bf18      	it	ne
   1a8c0:	2301      	movne	r3, #1
   1a8c2:	e7c1      	b.n	1a848 <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   1a8c4:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1a8c6:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   1a8ca:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   1a8ce:	2301      	movs	r3, #1
   1a8d0:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1a8d4:	f1b9 0f00 	cmp.w	r9, #0
   1a8d8:	d154      	bne.n	1a984 <spi_nrfx_transceive+0x2b0>
   1a8da:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1a8de:	2300      	movs	r3, #0
   1a8e0:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1a8e2:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1a8e6:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1a8ea:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1a8ee:	f00d fba7 	bl	28040 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1a8f2:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1a8f4:	f1bb 0f00 	cmp.w	fp, #0
   1a8f8:	d14c      	bne.n	1a994 <spi_nrfx_transceive+0x2c0>
   1a8fa:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1a8fe:	2300      	movs	r3, #0
   1a900:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1a902:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1a906:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1a90a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a90e:	f00d fb97 	bl	28040 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1a912:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1a914:	2101      	movs	r1, #1
   1a916:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1a918:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1a91a:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1a91c:	4620      	mov	r0, r4
   1a91e:	f00d fbb2 	bl	28086 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1a922:	4640      	mov	r0, r8
   1a924:	f7ff fe22 	bl	1a56c <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a928:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1a92a:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1a92c:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a92e:	429d      	cmp	r5, r3
   1a930:	bf38      	it	cc
   1a932:	461d      	movcc	r5, r3
   1a934:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1a938:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1a93a:	f857 3b28 	ldr.w	r3, [r7], #40
   1a93e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a942:	681b      	ldr	r3, [r3, #0]
   1a944:	4631      	mov	r1, r6
   1a946:	fbb5 f5f3 	udiv	r5, r5, r3
   1a94a:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1a94e:	35c8      	adds	r5, #200	; 0xc8
   1a950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a954:	2300      	movs	r3, #0
   1a956:	fbe5 010c 	umlal	r0, r1, r5, ip
   1a95a:	f7ee fac9 	bl	8ef0 <__aeabi_uldivmod>
   1a95e:	4602      	mov	r2, r0
   1a960:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1a962:	4638      	mov	r0, r7
   1a964:	f005 fb30 	bl	1ffc8 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1a968:	b1e0      	cbz	r0, 1a9a4 <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   1a96a:	4b22      	ldr	r3, [pc, #136]	; (1a9f4 <spi_nrfx_transceive+0x320>)
   1a96c:	2201      	movs	r2, #1
   1a96e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1a972:	4630      	mov	r0, r6
   1a974:	4633      	mov	r3, r6
   1a976:	490d      	ldr	r1, [pc, #52]	; (1a9ac <spi_nrfx_transceive+0x2d8>)
   1a978:	9600      	str	r6, [sp, #0]
   1a97a:	f00d fb74 	bl	28066 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   1a97e:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1a982:	e6da      	b.n	1a73a <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1a984:	f8d9 3000 	ldr.w	r3, [r9]
   1a988:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1a98a:	2b00      	cmp	r3, #0
   1a98c:	d0a7      	beq.n	1a8de <spi_nrfx_transceive+0x20a>
   1a98e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1a992:	e7a5      	b.n	1a8e0 <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1a994:	f8db 3000 	ldr.w	r3, [fp]
   1a998:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1a99a:	2b00      	cmp	r3, #0
   1a99c:	d0af      	beq.n	1a8fe <spi_nrfx_transceive+0x22a>
   1a99e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a9a2:	e7ad      	b.n	1a900 <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   1a9a4:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1a9a6:	e6c8      	b.n	1a73a <spi_nrfx_transceive+0x66>
   1a9a8:	0002f968 	.word	0x0002f968
   1a9ac:	0002aa70 	.word	0x0002aa70
   1a9b0:	0002f982 	.word	0x0002f982
   1a9b4:	0002f9a4 	.word	0x0002f9a4
   1a9b8:	0002f9c3 	.word	0x0002f9c3
   1a9bc:	0001e847 	.word	0x0001e847
   1a9c0:	0002f9f2 	.word	0x0002f9f2
   1a9c4:	00f42400 	.word	0x00f42400
   1a9c8:	40005000 	.word	0x40005000
   1a9cc:	0003d08f 	.word	0x0003d08f
   1a9d0:	0007a11f 	.word	0x0007a11f
   1a9d4:	000f423f 	.word	0x000f423f
   1a9d8:	001e847f 	.word	0x001e847f
   1a9dc:	003d08ff 	.word	0x003d08ff
   1a9e0:	007a1200 	.word	0x007a1200
   1a9e4:	01e84800 	.word	0x01e84800
   1a9e8:	0001a615 	.word	0x0001a615
   1a9ec:	0bad0000 	.word	0x0bad0000
   1a9f0:	0002fa23 	.word	0x0002fa23
   1a9f4:	0002fa4a 	.word	0x0002fa4a

0001a9f8 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1a9f8:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1a9fc:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1aa00:	280a      	cmp	r0, #10
   1aa02:	bf9a      	itte	ls
   1aa04:	4b02      	ldrls	r3, [pc, #8]	; (1aa10 <qspi_get_zephyr_ret_code+0x18>)
   1aa06:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1aa0a:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1aa0e:	4770      	bx	lr
   1aa10:	0002b8b4 	.word	0x0002b8b4

0001aa14 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1aa14:	4b02      	ldr	r3, [pc, #8]	; (1aa20 <qspi_nor_pages_layout+0xc>)
   1aa16:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1aa18:	2301      	movs	r3, #1
   1aa1a:	6013      	str	r3, [r2, #0]
}
   1aa1c:	4770      	bx	lr
   1aa1e:	bf00      	nop
   1aa20:	0002b6f8 	.word	0x0002b6f8

0001aa24 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1aa24:	4800      	ldr	r0, [pc, #0]	; (1aa28 <qspi_flash_get_parameters+0x4>)
   1aa26:	4770      	bx	lr
   1aa28:	0002b68c 	.word	0x0002b68c

0001aa2c <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1aa2c:	4b05      	ldr	r3, [pc, #20]	; (1aa44 <qspi_wait_for_completion.isra.0+0x18>)
   1aa2e:	4299      	cmp	r1, r3
   1aa30:	d106      	bne.n	1aa40 <qspi_wait_for_completion.isra.0+0x14>
   1aa32:	f04f 32ff 	mov.w	r2, #4294967295
   1aa36:	f04f 33ff 	mov.w	r3, #4294967295
   1aa3a:	3030      	adds	r0, #48	; 0x30
   1aa3c:	f005 bac4 	b.w	1ffc8 <z_impl_k_sem_take>
}
   1aa40:	4770      	bx	lr
   1aa42:	bf00      	nop
   1aa44:	0bad0000 	.word	0x0bad0000

0001aa48 <qspi_device_init>:
{
   1aa48:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1aa4a:	6905      	ldr	r5, [r0, #16]
{
   1aa4c:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1aa4e:	4e0f      	ldr	r6, [pc, #60]	; (1aa8c <qspi_device_init+0x44>)
	qspi_lock(dev);
   1aa50:	4628      	mov	r0, r5
   1aa52:	f00d fb73 	bl	2813c <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1aa56:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1aa5a:	f00d fb58 	bl	2810e <k_sem_give>
	if (!qspi_initialized) {
   1aa5e:	7833      	ldrb	r3, [r6, #0]
   1aa60:	b98b      	cbnz	r3, 1aa86 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1aa62:	462a      	mov	r2, r5
   1aa64:	490a      	ldr	r1, [pc, #40]	; (1aa90 <qspi_device_init+0x48>)
   1aa66:	6860      	ldr	r0, [r4, #4]
   1aa68:	f003 f86a 	bl	1db40 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1aa6c:	f7ff ffc4 	bl	1a9f8 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1aa70:	fab0 f380 	clz	r3, r0
   1aa74:	4605      	mov	r5, r0
   1aa76:	095b      	lsrs	r3, r3, #5
   1aa78:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1aa7a:	6920      	ldr	r0, [r4, #16]
   1aa7c:	3018      	adds	r0, #24
   1aa7e:	f00d fb46 	bl	2810e <k_sem_give>
}
   1aa82:	4628      	mov	r0, r5
   1aa84:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1aa86:	2500      	movs	r5, #0
   1aa88:	e7f7      	b.n	1aa7a <qspi_device_init+0x32>
   1aa8a:	bf00      	nop
   1aa8c:	2002204d 	.word	0x2002204d
   1aa90:	00028113 	.word	0x00028113

0001aa94 <qspi_send_cmd>:
{
   1aa94:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   1aa96:	684c      	ldr	r4, [r1, #4]
{
   1aa98:	4605      	mov	r5, r0
   1aa9a:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   1aa9c:	b1ec      	cbz	r4, 1aada <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   1aa9e:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1aaa2:	6888      	ldr	r0, [r1, #8]
   1aaa4:	b1d8      	cbz	r0, 1aade <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   1aaa6:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1aaaa:	b1c8      	cbz	r0, 1aae0 <qspi_send_cmd+0x4c>
   1aaac:	b1c3      	cbz	r3, 1aae0 <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   1aaae:	4283      	cmp	r3, r0
   1aab0:	d10f      	bne.n	1aad2 <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   1aab2:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1aab4:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1aab6:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1aab8:	d915      	bls.n	1aae6 <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1aaba:	e9cd 1303 	strd	r1, r3, [sp, #12]
   1aabe:	4b1a      	ldr	r3, [pc, #104]	; (1ab28 <qspi_send_cmd+0x94>)
   1aac0:	2202      	movs	r2, #2
   1aac2:	9302      	str	r3, [sp, #8]
   1aac4:	2300      	movs	r3, #0
   1aac6:	4919      	ldr	r1, [pc, #100]	; (1ab2c <qspi_send_cmd+0x98>)
   1aac8:	4618      	mov	r0, r3
   1aaca:	e9cd 3300 	strd	r3, r3, [sp]
   1aace:	f00d fb26 	bl	2811e <z_log_msg_runtime_create.constprop.0>
}
   1aad2:	f06f 0015 	mvn.w	r0, #21
   1aad6:	b008      	add	sp, #32
   1aad8:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   1aada:	4623      	mov	r3, r4
   1aadc:	e7e1      	b.n	1aaa2 <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   1aade:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1aae0:	3301      	adds	r3, #1
   1aae2:	4403      	add	r3, r0
   1aae4:	e7e6      	b.n	1aab4 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1aae6:	f88d 3019 	strb.w	r3, [sp, #25]
   1aaea:	f240 1301 	movw	r3, #257	; 0x101
   1aaee:	f8ad 301a 	strh.w	r3, [sp, #26]
   1aaf2:	2300      	movs	r3, #0
	qspi_lock(dev);
   1aaf4:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1aaf6:	f88d 301c 	strb.w	r3, [sp, #28]
   1aafa:	f88d 1018 	strb.w	r1, [sp, #24]
   1aafe:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   1ab02:	f00d fb1b 	bl	2813c <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1ab06:	4621      	mov	r1, r4
   1ab08:	4632      	mov	r2, r6
   1ab0a:	a806      	add	r0, sp, #24
   1ab0c:	f003 f90a 	bl	1dd24 <nrfx_qspi_cinstr_xfer>
   1ab10:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1ab12:	6928      	ldr	r0, [r5, #16]
   1ab14:	3018      	adds	r0, #24
   1ab16:	f00d fafa 	bl	2810e <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1ab1a:	4620      	mov	r0, r4
}
   1ab1c:	b008      	add	sp, #32
   1ab1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   1ab22:	f7ff bf69 	b.w	1a9f8 <qspi_get_zephyr_ret_code>
   1ab26:	bf00      	nop
   1ab28:	0002fa87 	.word	0x0002fa87
   1ab2c:	0002aa60 	.word	0x0002aa60

0001ab30 <qspi_device_uninit>:
{
   1ab30:	b538      	push	{r3, r4, r5, lr}
   1ab32:	4604      	mov	r4, r0
	qspi_lock(dev);
   1ab34:	6900      	ldr	r0, [r0, #16]
   1ab36:	f00d fb01 	bl	2813c <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1ab3a:	6925      	ldr	r5, [r4, #16]
   1ab3c:	2200      	movs	r2, #0
   1ab3e:	2300      	movs	r3, #0
   1ab40:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1ab44:	f005 fa40 	bl	1ffc8 <z_impl_k_sem_take>
	if (last) {
   1ab48:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1ab4a:	b94b      	cbnz	r3, 1ab60 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1ab4c:	4d0a      	ldr	r5, [pc, #40]	; (1ab78 <qspi_device_uninit+0x48>)
   1ab4e:	f003 f94b 	bl	1dde8 <nrfx_qspi_mem_busy_check>
   1ab52:	42a8      	cmp	r0, r5
   1ab54:	d10a      	bne.n	1ab6c <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1ab56:	f003 f969 	bl	1de2c <nrfx_qspi_uninit>
		qspi_initialized = false;
   1ab5a:	2200      	movs	r2, #0
   1ab5c:	4b07      	ldr	r3, [pc, #28]	; (1ab7c <qspi_device_uninit+0x4c>)
   1ab5e:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1ab60:	6920      	ldr	r0, [r4, #16]
}
   1ab62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1ab66:	3018      	adds	r0, #24
   1ab68:	f00d bad1 	b.w	2810e <k_sem_give>
	return z_impl_k_sleep(timeout);
   1ab6c:	2100      	movs	r1, #0
   1ab6e:	f240 6067 	movw	r0, #1639	; 0x667
   1ab72:	f007 f8d9 	bl	21d28 <z_impl_k_sleep>
   1ab76:	e7ea      	b.n	1ab4e <qspi_device_uninit+0x1e>
   1ab78:	0bad0000 	.word	0x0bad0000
   1ab7c:	2002204d 	.word	0x2002204d

0001ab80 <qspi_nor_read>:
{
   1ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab84:	4681      	mov	r9, r0
   1ab86:	460e      	mov	r6, r1
   1ab88:	461c      	mov	r4, r3
	if (!dest) {
   1ab8a:	4690      	mov	r8, r2
{
   1ab8c:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   1ab8e:	b1aa      	cbz	r2, 1abbc <qspi_nor_read+0x3c>
	if (!size) {
   1ab90:	2b00      	cmp	r3, #0
   1ab92:	f000 809f 	beq.w	1acd4 <qspi_nor_read+0x154>
	if (addr < 0 ||
   1ab96:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1ab98:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1ab9a:	db03      	blt.n	1aba4 <qspi_nor_read+0x24>
   1ab9c:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1ab9e:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1aba0:	4293      	cmp	r3, r2
   1aba2:	d911      	bls.n	1abc8 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   1aba4:	4b4c      	ldr	r3, [pc, #304]	; (1acd8 <qspi_nor_read+0x158>)
   1aba6:	2201      	movs	r2, #1
   1aba8:	9302      	str	r3, [sp, #8]
   1abaa:	2300      	movs	r3, #0
   1abac:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1abb0:	4618      	mov	r0, r3
   1abb2:	e9cd 3300 	strd	r3, r3, [sp]
   1abb6:	4949      	ldr	r1, [pc, #292]	; (1acdc <qspi_nor_read+0x15c>)
   1abb8:	f00d fab1 	bl	2811e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1abbc:	f06f 0515 	mvn.w	r5, #21
}
   1abc0:	4628      	mov	r0, r5
   1abc2:	b00b      	add	sp, #44	; 0x2c
   1abc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1abc8:	f7ff ff3e 	bl	1aa48 <qspi_device_init>
	if (rc != 0) {
   1abcc:	4605      	mov	r5, r0
   1abce:	2800      	cmp	r0, #0
   1abd0:	d17c      	bne.n	1accc <qspi_nor_read+0x14c>
	qspi_lock(dev);
   1abd2:	4275      	negs	r5, r6
   1abd4:	f005 0503 	and.w	r5, r5, #3
   1abd8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1abdc:	f00d faae 	bl	2813c <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1abe0:	42a5      	cmp	r5, r4
   1abe2:	bf28      	it	cs
   1abe4:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1abe6:	f1d8 0300 	rsbs	r3, r8, #0
   1abea:	f003 0303 	and.w	r3, r3, #3
   1abee:	f008 0703 	and.w	r7, r8, #3
   1abf2:	bf58      	it	pl
   1abf4:	425f      	negpl	r7, r3
   1abf6:	427f      	negs	r7, r7
   1abf8:	f007 0703 	and.w	r7, r7, #3
   1abfc:	42a7      	cmp	r7, r4
   1abfe:	bf28      	it	cs
   1ac00:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1ac02:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1ac04:	1be4      	subs	r4, r4, r7
   1ac06:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1ac0a:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   1ac0e:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1ac10:	bfc8      	it	gt
   1ac12:	46a2      	movgt	sl, r4
   1ac14:	f003 0b03 	and.w	fp, r3, #3
   1ac18:	bfc8      	it	gt
   1ac1a:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   1ac1e:	f1ba 0f00 	cmp.w	sl, #0
   1ac22:	d019      	beq.n	1ac58 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1ac24:	eb08 0307 	add.w	r3, r8, r7
   1ac28:	1972      	adds	r2, r6, r5
   1ac2a:	4651      	mov	r1, sl
   1ac2c:	4618      	mov	r0, r3
   1ac2e:	9307      	str	r3, [sp, #28]
   1ac30:	f00d ff3f 	bl	28ab2 <nrfx_qspi_read>
   1ac34:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ac36:	4601      	mov	r1, r0
   1ac38:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ac3c:	f7ff fef6 	bl	1aa2c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ac40:	4a27      	ldr	r2, [pc, #156]	; (1ace0 <qspi_nor_read+0x160>)
   1ac42:	4294      	cmp	r4, r2
   1ac44:	d139      	bne.n	1acba <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   1ac46:	42bd      	cmp	r5, r7
   1ac48:	d006      	beq.n	1ac58 <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   1ac4a:	9b07      	ldr	r3, [sp, #28]
   1ac4c:	4652      	mov	r2, sl
   1ac4e:	4619      	mov	r1, r3
   1ac50:	eb08 0005 	add.w	r0, r8, r5
   1ac54:	f00e fec5 	bl	299e2 <memmove>
	if (flash_prefix != 0) {
   1ac58:	b1ad      	cbz	r5, 1ac86 <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   1ac5a:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1ac5e:	2104      	movs	r1, #4
   1ac60:	1bf2      	subs	r2, r6, r7
   1ac62:	a808      	add	r0, sp, #32
   1ac64:	f00d ff25 	bl	28ab2 <nrfx_qspi_read>
   1ac68:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ac6a:	4601      	mov	r1, r0
   1ac6c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ac70:	f7ff fedc 	bl	1aa2c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ac74:	4b1a      	ldr	r3, [pc, #104]	; (1ace0 <qspi_nor_read+0x160>)
   1ac76:	429c      	cmp	r4, r3
   1ac78:	d11f      	bne.n	1acba <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ac7a:	ab08      	add	r3, sp, #32
   1ac7c:	462a      	mov	r2, r5
   1ac7e:	4640      	mov	r0, r8
   1ac80:	19d9      	adds	r1, r3, r7
   1ac82:	f00e fe8e 	bl	299a2 <memcpy>
	if (flash_suffix != 0) {
   1ac86:	f1bb 0f00 	cmp.w	fp, #0
   1ac8a:	d015      	beq.n	1acb8 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   1ac8c:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1ac8e:	2108      	movs	r1, #8
   1ac90:	4452      	add	r2, sl
   1ac92:	a808      	add	r0, sp, #32
   1ac94:	f00d ff0d 	bl	28ab2 <nrfx_qspi_read>
   1ac98:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ac9a:	4601      	mov	r1, r0
   1ac9c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1aca0:	f7ff fec4 	bl	1aa2c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1aca4:	4b0e      	ldr	r3, [pc, #56]	; (1ace0 <qspi_nor_read+0x160>)
   1aca6:	429c      	cmp	r4, r3
   1aca8:	d107      	bne.n	1acba <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1acaa:	eb0a 0005 	add.w	r0, sl, r5
   1acae:	465a      	mov	r2, fp
   1acb0:	a908      	add	r1, sp, #32
   1acb2:	4440      	add	r0, r8
   1acb4:	f00e fe75 	bl	299a2 <memcpy>
	return res;
   1acb8:	4c09      	ldr	r4, [pc, #36]	; (1ace0 <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   1acba:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1acbe:	3018      	adds	r0, #24
   1acc0:	f00d fa25 	bl	2810e <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1acc4:	4620      	mov	r0, r4
   1acc6:	f7ff fe97 	bl	1a9f8 <qspi_get_zephyr_ret_code>
   1acca:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1accc:	4648      	mov	r0, r9
   1acce:	f7ff ff2f 	bl	1ab30 <qspi_device_uninit>
	return rc;
   1acd2:	e775      	b.n	1abc0 <qspi_nor_read+0x40>
		return 0;
   1acd4:	461d      	mov	r5, r3
   1acd6:	e773      	b.n	1abc0 <qspi_nor_read+0x40>
   1acd8:	0002faaa 	.word	0x0002faaa
   1acdc:	0002aa60 	.word	0x0002aa60
   1ace0:	0bad0000 	.word	0x0bad0000

0001ace4 <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1ace4:	2202      	movs	r2, #2
{
   1ace6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1acea:	4b64      	ldr	r3, [pc, #400]	; (1ae7c <qspi_nor_init+0x198>)
   1acec:	b090      	sub	sp, #64	; 0x40
   1acee:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1acf2:	6843      	ldr	r3, [r0, #4]
{
   1acf4:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1acf6:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1acf8:	2100      	movs	r1, #0
   1acfa:	4630      	mov	r0, r6
   1acfc:	aa0d      	add	r2, sp, #52	; 0x34
   1acfe:	f00d fd02 	bl	28706 <pinctrl_lookup_state>
	if (ret < 0) {
   1ad02:	1e04      	subs	r4, r0, #0
   1ad04:	db35      	blt.n	1ad72 <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   1ad06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1ad08:	6832      	ldr	r2, [r6, #0]
   1ad0a:	7919      	ldrb	r1, [r3, #4]
   1ad0c:	6818      	ldr	r0, [r3, #0]
   1ad0e:	f00d fd0d 	bl	2872c <pinctrl_configure_pins>
	if (ret < 0) {
   1ad12:	1e04      	subs	r4, r0, #0
   1ad14:	db2d      	blt.n	1ad72 <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1ad16:	2200      	movs	r2, #0
   1ad18:	2101      	movs	r1, #1
   1ad1a:	202b      	movs	r0, #43	; 0x2b
   1ad1c:	f7f5 fab8 	bl	10290 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1ad20:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1ad22:	692a      	ldr	r2, [r5, #16]
   1ad24:	4630      	mov	r0, r6
   1ad26:	4956      	ldr	r1, [pc, #344]	; (1ae80 <qspi_nor_init+0x19c>)
   1ad28:	f002 ff0a 	bl	1db40 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1ad2c:	f7ff fe64 	bl	1a9f8 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1ad30:	1e04      	subs	r4, r0, #0
   1ad32:	db1e      	blt.n	1ad72 <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1ad34:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1ad36:	3b02      	subs	r3, #2
   1ad38:	2b01      	cmp	r3, #1
   1ad3a:	d91e      	bls.n	1ad7a <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1ad3c:	f896 800a 	ldrb.w	r8, [r6, #10]
   1ad40:	f1a8 0803 	sub.w	r8, r8, #3
   1ad44:	f1b8 0f01 	cmp.w	r8, #1
   1ad48:	bf8c      	ite	hi
   1ad4a:	f04f 0800 	movhi.w	r8, #0
   1ad4e:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1ad52:	4628      	mov	r0, r5
   1ad54:	f00d fa14 	bl	28180 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1ad58:	1e04      	subs	r4, r0, #0
   1ad5a:	da11      	bge.n	1ad80 <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   1ad5c:	4b49      	ldr	r3, [pc, #292]	; (1ae84 <qspi_nor_init+0x1a0>)
   1ad5e:	2201      	movs	r2, #1
   1ad60:	9302      	str	r3, [sp, #8]
   1ad62:	2300      	movs	r3, #0
   1ad64:	4948      	ldr	r1, [pc, #288]	; (1ae88 <qspi_nor_init+0x1a4>)
   1ad66:	4618      	mov	r0, r3
   1ad68:	e9cd 3300 	strd	r3, r3, [sp]
   1ad6c:	9403      	str	r4, [sp, #12]
   1ad6e:	f00d f9d6 	bl	2811e <z_log_msg_runtime_create.constprop.0>
}
   1ad72:	4620      	mov	r0, r4
   1ad74:	b010      	add	sp, #64	; 0x40
   1ad76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1ad7a:	f04f 0801 	mov.w	r8, #1
   1ad7e:	e7e8      	b.n	1ad52 <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   1ad80:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1ad82:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1ad86:	45a0      	cmp	r8, r4
   1ad88:	ae0a      	add	r6, sp, #40	; 0x28
   1ad8a:	af0b      	add	r7, sp, #44	; 0x2c
   1ad8c:	d02f      	beq.n	1adee <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   1ad8e:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1ad90:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1ad94:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   1ad98:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   1ad9c:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1ad9e:	4628      	mov	r0, r5
   1ada0:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   1ada2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   1ada6:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   1ada8:	930f      	str	r3, [sp, #60]	; 0x3c
   1adaa:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   1adae:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   1adb0:	f7ff fe70 	bl	1aa94 <qspi_send_cmd>
	if (ret == 0) {
   1adb4:	1e04      	subs	r4, r0, #0
   1adb6:	d013      	beq.n	1ade0 <qspi_nor_init+0xfc>
		if (ret < 0) {
   1adb8:	dadb      	bge.n	1ad72 <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1adba:	4a34      	ldr	r2, [pc, #208]	; (1ae8c <qspi_nor_init+0x1a8>)
   1adbc:	4b34      	ldr	r3, [pc, #208]	; (1ae90 <qspi_nor_init+0x1ac>)
   1adbe:	4932      	ldr	r1, [pc, #200]	; (1ae88 <qspi_nor_init+0x1a4>)
   1adc0:	f1b8 0f00 	cmp.w	r8, #0
   1adc4:	bf18      	it	ne
   1adc6:	4613      	movne	r3, r2
   1adc8:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1adcc:	4b31      	ldr	r3, [pc, #196]	; (1ae94 <qspi_nor_init+0x1b0>)
   1adce:	2201      	movs	r2, #1
   1add0:	9302      	str	r3, [sp, #8]
   1add2:	2300      	movs	r3, #0
   1add4:	4618      	mov	r0, r3
   1add6:	e9cd 3300 	strd	r3, r3, [sp]
   1adda:	f00d f9a0 	bl	2811e <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   1adde:	e7c8      	b.n	1ad72 <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   1ade0:	4628      	mov	r0, r5
   1ade2:	f00d f9cd 	bl	28180 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1ade6:	1e04      	subs	r4, r0, #0
   1ade8:	dbe7      	blt.n	1adba <qspi_nor_init+0xd6>
   1adea:	07e3      	lsls	r3, r4, #31
   1adec:	d4f8      	bmi.n	1ade0 <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   1adee:	4628      	mov	r0, r5
   1adf0:	f7ff fe9e 	bl	1ab30 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1adf4:	2403      	movs	r4, #3
   1adf6:	2300      	movs	r3, #0
   1adf8:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   1adfc:	930e      	str	r3, [sp, #56]	; 0x38
   1adfe:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1ae00:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1ae02:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   1ae04:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1ae08:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   1ae0a:	f7ff fe1d 	bl	1aa48 <qspi_device_init>
	if (ret == 0) {
   1ae0e:	4602      	mov	r2, r0
   1ae10:	b128      	cbz	r0, 1ae1e <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   1ae12:	4628      	mov	r0, r5
   1ae14:	f7ff fe8c 	bl	1ab30 <qspi_device_uninit>
		return -ENODEV;
   1ae18:	f06f 0412 	mvn.w	r4, #18
   1ae1c:	e7a9      	b.n	1ad72 <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   1ae1e:	4628      	mov	r0, r5
   1ae20:	a90d      	add	r1, sp, #52	; 0x34
   1ae22:	f7ff fe37 	bl	1aa94 <qspi_send_cmd>
   1ae26:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   1ae28:	4628      	mov	r0, r5
   1ae2a:	f7ff fe81 	bl	1ab30 <qspi_device_uninit>
	if (ret != 0) {
   1ae2e:	2f00      	cmp	r7, #0
   1ae30:	d1f2      	bne.n	1ae18 <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   1ae32:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1ae34:	4622      	mov	r2, r4
   1ae36:	4631      	mov	r1, r6
   1ae38:	f105 001c 	add.w	r0, r5, #28
   1ae3c:	f00e fda1 	bl	29982 <memcmp>
   1ae40:	4604      	mov	r4, r0
   1ae42:	2800      	cmp	r0, #0
   1ae44:	d095      	beq.n	1ad72 <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1ae46:	7fab      	ldrb	r3, [r5, #30]
   1ae48:	2201      	movs	r2, #1
   1ae4a:	9308      	str	r3, [sp, #32]
   1ae4c:	7f6b      	ldrb	r3, [r5, #29]
   1ae4e:	4638      	mov	r0, r7
   1ae50:	9307      	str	r3, [sp, #28]
   1ae52:	7f2b      	ldrb	r3, [r5, #28]
   1ae54:	490c      	ldr	r1, [pc, #48]	; (1ae88 <qspi_nor_init+0x1a4>)
   1ae56:	9306      	str	r3, [sp, #24]
   1ae58:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1ae5c:	9700      	str	r7, [sp, #0]
   1ae5e:	9305      	str	r3, [sp, #20]
   1ae60:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1ae64:	9304      	str	r3, [sp, #16]
   1ae66:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1ae6a:	9303      	str	r3, [sp, #12]
   1ae6c:	4b0a      	ldr	r3, [pc, #40]	; (1ae98 <qspi_nor_init+0x1b4>)
   1ae6e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1ae72:	463b      	mov	r3, r7
   1ae74:	f00d f953 	bl	2811e <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1ae78:	e7ce      	b.n	1ae18 <qspi_nor_init+0x134>
   1ae7a:	bf00      	nop
   1ae7c:	40005000 	.word	0x40005000
   1ae80:	00028113 	.word	0x00028113
   1ae84:	0002faf9 	.word	0x0002faf9
   1ae88:	0002aa60 	.word	0x0002aa60
   1ae8c:	0002e73a 	.word	0x0002e73a
   1ae90:	0002faf3 	.word	0x0002faf3
   1ae94:	0002fb09 	.word	0x0002fb09
   1ae98:	0002fb1a 	.word	0x0002fb1a

0001ae9c <qspi_nor_erase>:
{
   1ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1aea0:	2900      	cmp	r1, #0
{
   1aea2:	4606      	mov	r6, r0
   1aea4:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1aea6:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1aeaa:	b087      	sub	sp, #28
	if (addr < 0 ||
   1aeac:	db05      	blt.n	1aeba <qspi_nor_erase+0x1e>
   1aeae:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   1aeb2:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   1aeb4:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   1aeb6:	4688      	mov	r8, r1
	if (addr < 0 ||
   1aeb8:	d911      	bls.n	1aede <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   1aeba:	4b46      	ldr	r3, [pc, #280]	; (1afd4 <qspi_nor_erase+0x138>)
   1aebc:	e9cd 1503 	strd	r1, r5, [sp, #12]
   1aec0:	9302      	str	r3, [sp, #8]
   1aec2:	2300      	movs	r3, #0
   1aec4:	2201      	movs	r2, #1
   1aec6:	4618      	mov	r0, r3
   1aec8:	e9cd 3300 	strd	r3, r3, [sp]
   1aecc:	4942      	ldr	r1, [pc, #264]	; (1afd8 <qspi_nor_erase+0x13c>)
   1aece:	f00d f926 	bl	2811e <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1aed2:	f06f 0415 	mvn.w	r4, #21
}
   1aed6:	4620      	mov	r0, r4
   1aed8:	b007      	add	sp, #28
   1aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1aede:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1aee2:	2d00      	cmp	r5, #0
   1aee4:	d0f5      	beq.n	1aed2 <qspi_nor_erase+0x36>
   1aee6:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1aeea:	4313      	orrs	r3, r2
   1aeec:	d1f1      	bne.n	1aed2 <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   1aeee:	f7ff fdab 	bl	1aa48 <qspi_device_init>
	if (rv != 0) {
   1aef2:	4604      	mov	r4, r0
   1aef4:	bb68      	cbnz	r0, 1af52 <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   1aef6:	6930      	ldr	r0, [r6, #16]
   1aef8:	f00d f927 	bl	2814a <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1aefc:	4621      	mov	r1, r4
   1aefe:	4630      	mov	r0, r6
   1af00:	f00d f929 	bl	28156 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1af04:	4604      	mov	r4, r0
   1af06:	bb08      	cbnz	r0, 1af4c <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   1af08:	6930      	ldr	r0, [r6, #16]
   1af0a:	f00d f917 	bl	2813c <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   1af0e:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1afdc <qspi_nor_erase+0x140>
		if (size == params->size) {
   1af12:	f8da 3018 	ldr.w	r3, [sl, #24]
   1af16:	42ab      	cmp	r3, r5
   1af18:	d11f      	bne.n	1af5a <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   1af1a:	f00d fdcd 	bl	28ab8 <nrfx_qspi_chip_erase>
   1af1e:	46a9      	mov	r9, r5
   1af20:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   1af22:	4639      	mov	r1, r7
   1af24:	6930      	ldr	r0, [r6, #16]
   1af26:	f7ff fd81 	bl	1aa2c <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1af2a:	455f      	cmp	r7, fp
   1af2c:	d141      	bne.n	1afb2 <qspi_nor_erase+0x116>
	while (size > 0) {
   1af2e:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   1af32:	44c8      	add	r8, r9
	while (size > 0) {
   1af34:	d1ed      	bne.n	1af12 <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   1af36:	6930      	ldr	r0, [r6, #16]
   1af38:	3018      	adds	r0, #24
   1af3a:	f00d f8e8 	bl	2810e <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1af3e:	2101      	movs	r1, #1
   1af40:	4630      	mov	r0, r6
   1af42:	f00d f908 	bl	28156 <qspi_nor_write_protection_set>
   1af46:	2c00      	cmp	r4, #0
   1af48:	bf08      	it	eq
   1af4a:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1af4c:	6930      	ldr	r0, [r6, #16]
   1af4e:	f00d f8de 	bl	2810e <k_sem_give>
	qspi_device_uninit(dev);
   1af52:	4630      	mov	r0, r6
   1af54:	f7ff fdec 	bl	1ab30 <qspi_device_uninit>
	return rv;
   1af58:	e7bd      	b.n	1aed6 <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1af5a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1af5e:	d30a      	bcc.n	1af76 <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1af60:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1af64:	b953      	cbnz	r3, 1af7c <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1af66:	4641      	mov	r1, r8
   1af68:	2001      	movs	r0, #1
   1af6a:	f002 ffc1 	bl	1def0 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1af6e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1af72:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1af74:	e7d5      	b.n	1af22 <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1af76:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1af7a:	d309      	bcc.n	1af90 <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1af7c:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1af80:	b930      	cbnz	r0, 1af90 <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1af82:	4641      	mov	r1, r8
   1af84:	f002 ffb4 	bl	1def0 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1af88:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1af8c:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1af8e:	e7c8      	b.n	1af22 <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1af90:	4b13      	ldr	r3, [pc, #76]	; (1afe0 <qspi_nor_erase+0x144>)
   1af92:	2201      	movs	r2, #1
   1af94:	9302      	str	r3, [sp, #8]
   1af96:	2300      	movs	r3, #0
   1af98:	490f      	ldr	r1, [pc, #60]	; (1afd8 <qspi_nor_erase+0x13c>)
   1af9a:	4618      	mov	r0, r3
   1af9c:	e9cd 3300 	strd	r3, r3, [sp]
   1afa0:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1afa4:	f00d f8bb 	bl	2811e <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   1afa8:	490e      	ldr	r1, [pc, #56]	; (1afe4 <qspi_nor_erase+0x148>)
   1afaa:	6930      	ldr	r0, [r6, #16]
   1afac:	f7ff fd3e 	bl	1aa2c <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1afb0:	4f0c      	ldr	r7, [pc, #48]	; (1afe4 <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1afb2:	4b0d      	ldr	r3, [pc, #52]	; (1afe8 <qspi_nor_erase+0x14c>)
   1afb4:	2201      	movs	r2, #1
   1afb6:	9302      	str	r3, [sp, #8]
   1afb8:	2300      	movs	r3, #0
   1afba:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1afbe:	4618      	mov	r0, r3
   1afc0:	e9cd 3300 	strd	r3, r3, [sp]
   1afc4:	4904      	ldr	r1, [pc, #16]	; (1afd8 <qspi_nor_erase+0x13c>)
   1afc6:	f00d f8aa 	bl	2811e <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   1afca:	4638      	mov	r0, r7
   1afcc:	f7ff fd14 	bl	1a9f8 <qspi_get_zephyr_ret_code>
   1afd0:	4604      	mov	r4, r0
			break;
   1afd2:	e7b0      	b.n	1af36 <qspi_nor_erase+0x9a>
   1afd4:	0002fb4c 	.word	0x0002fb4c
   1afd8:	0002aa60 	.word	0x0002aa60
   1afdc:	0bad0000 	.word	0x0bad0000
   1afe0:	0002fb96 	.word	0x0002fb96
   1afe4:	0bad0004 	.word	0x0bad0004
   1afe8:	0002fbb4 	.word	0x0002fbb4

0001afec <qspi_nor_write>:
{
   1afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aff0:	4605      	mov	r5, r0
   1aff2:	460f      	mov	r7, r1
   1aff4:	461e      	mov	r6, r3
	if (!src) {
   1aff6:	4690      	mov	r8, r2
{
   1aff8:	b088      	sub	sp, #32
	if (!src) {
   1affa:	b1ca      	cbz	r2, 1b030 <qspi_nor_write+0x44>
	if ((size == 0)
   1affc:	b1c3      	cbz	r3, 1b030 <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1affe:	2b04      	cmp	r3, #4
   1b000:	d901      	bls.n	1b006 <qspi_nor_write+0x1a>
   1b002:	079a      	lsls	r2, r3, #30
   1b004:	d114      	bne.n	1b030 <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   1b006:	07bb      	lsls	r3, r7, #30
   1b008:	d112      	bne.n	1b030 <qspi_nor_write+0x44>
	if (addr < 0 ||
   1b00a:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1b00c:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1b00e:	db03      	blt.n	1b018 <qspi_nor_write+0x2c>
   1b010:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1b012:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1b014:	4293      	cmp	r3, r2
   1b016:	d911      	bls.n	1b03c <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   1b018:	4b40      	ldr	r3, [pc, #256]	; (1b11c <qspi_nor_write+0x130>)
   1b01a:	2201      	movs	r2, #1
   1b01c:	9302      	str	r3, [sp, #8]
   1b01e:	2300      	movs	r3, #0
   1b020:	e9cd 7603 	strd	r7, r6, [sp, #12]
   1b024:	4618      	mov	r0, r3
   1b026:	e9cd 3300 	strd	r3, r3, [sp]
   1b02a:	493d      	ldr	r1, [pc, #244]	; (1b120 <qspi_nor_write+0x134>)
   1b02c:	f00d f877 	bl	2811e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1b030:	f06f 0415 	mvn.w	r4, #21
}
   1b034:	4620      	mov	r0, r4
   1b036:	b008      	add	sp, #32
   1b038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   1b03c:	4628      	mov	r0, r5
   1b03e:	f7ff fd03 	bl	1aa48 <qspi_device_init>
	if (rc != 0) {
   1b042:	4604      	mov	r4, r0
   1b044:	2800      	cmp	r0, #0
   1b046:	d160      	bne.n	1b10a <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   1b048:	6928      	ldr	r0, [r5, #16]
   1b04a:	f00d f87e 	bl	2814a <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1b04e:	4621      	mov	r1, r4
   1b050:	4628      	mov	r0, r5
   1b052:	f00d f880 	bl	28156 <qspi_nor_write_protection_set>
   1b056:	4604      	mov	r4, r0
	qspi_lock(dev);
   1b058:	6928      	ldr	r0, [r5, #16]
   1b05a:	f00d f86f 	bl	2813c <qspi_lock.isra.0>
	if (!res) {
   1b05e:	2c00      	cmp	r4, #0
   1b060:	d140      	bne.n	1b0e4 <qspi_nor_write+0xf8>
		if (size < 4U) {
   1b062:	2e03      	cmp	r6, #3
   1b064:	d81c      	bhi.n	1b0a0 <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1b066:	463a      	mov	r2, r7
   1b068:	2104      	movs	r1, #4
   1b06a:	a807      	add	r0, sp, #28
   1b06c:	f00d fd21 	bl	28ab2 <nrfx_qspi_read>
   1b070:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1b072:	4601      	mov	r1, r0
   1b074:	6928      	ldr	r0, [r5, #16]
   1b076:	f7ff fcd9 	bl	1aa2c <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1b07a:	4b2a      	ldr	r3, [pc, #168]	; (1b124 <qspi_nor_write+0x138>)
   1b07c:	429c      	cmp	r4, r3
   1b07e:	d131      	bne.n	1b0e4 <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   1b080:	4632      	mov	r2, r6
   1b082:	4641      	mov	r1, r8
   1b084:	a807      	add	r0, sp, #28
   1b086:	f00e fc8c 	bl	299a2 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1b08a:	463a      	mov	r2, r7
   1b08c:	2104      	movs	r1, #4
   1b08e:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   1b090:	f00d fd0c 	bl	28aac <nrfx_qspi_write>
   1b094:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1b096:	4601      	mov	r1, r0
   1b098:	6928      	ldr	r0, [r5, #16]
   1b09a:	f7ff fcc7 	bl	1aa2c <qspi_wait_for_completion.isra.0>
   1b09e:	e021      	b.n	1b0e4 <qspi_nor_write+0xf8>
   1b0a0:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1b0a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1b0a8:	d033      	beq.n	1b112 <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   1b0aa:	f8df a078 	ldr.w	sl, [pc, #120]	; 1b124 <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   1b0ae:	2e04      	cmp	r6, #4
   1b0b0:	46b1      	mov	r9, r6
   1b0b2:	bf28      	it	cs
   1b0b4:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1b0b8:	4641      	mov	r1, r8
   1b0ba:	464a      	mov	r2, r9
   1b0bc:	a807      	add	r0, sp, #28
   1b0be:	f00e fc70 	bl	299a2 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1b0c2:	463a      	mov	r2, r7
   1b0c4:	2104      	movs	r1, #4
   1b0c6:	a807      	add	r0, sp, #28
   1b0c8:	f00d fcf0 	bl	28aac <nrfx_qspi_write>
   1b0cc:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1b0ce:	4601      	mov	r1, r0
   1b0d0:	6928      	ldr	r0, [r5, #16]
   1b0d2:	f7ff fcab 	bl	1aa2c <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1b0d6:	4554      	cmp	r4, sl
   1b0d8:	d104      	bne.n	1b0e4 <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1b0da:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1b0de:	44c8      	add	r8, r9
				addr += len;
   1b0e0:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1b0e2:	d1e4      	bne.n	1b0ae <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   1b0e4:	6928      	ldr	r0, [r5, #16]
   1b0e6:	3018      	adds	r0, #24
   1b0e8:	f00d f811 	bl	2810e <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1b0ec:	2101      	movs	r1, #1
   1b0ee:	4628      	mov	r0, r5
   1b0f0:	f00d f831 	bl	28156 <qspi_nor_write_protection_set>
   1b0f4:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1b0f6:	6928      	ldr	r0, [r5, #16]
   1b0f8:	f00d f809 	bl	2810e <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1b0fc:	2c00      	cmp	r4, #0
   1b0fe:	bf14      	ite	ne
   1b100:	4620      	movne	r0, r4
   1b102:	4630      	moveq	r0, r6
   1b104:	f7ff fc78 	bl	1a9f8 <qspi_get_zephyr_ret_code>
   1b108:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1b10a:	4628      	mov	r0, r5
   1b10c:	f7ff fd10 	bl	1ab30 <qspi_device_uninit>
	return rc;
   1b110:	e790      	b.n	1b034 <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   1b112:	463a      	mov	r2, r7
   1b114:	4631      	mov	r1, r6
   1b116:	4640      	mov	r0, r8
   1b118:	e7ba      	b.n	1b090 <qspi_nor_write+0xa4>
   1b11a:	bf00      	nop
   1b11c:	0002fbd2 	.word	0x0002fbd2
   1b120:	0002aa60 	.word	0x0002aa60
   1b124:	0bad0000 	.word	0x0bad0000

0001b128 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1b128:	4b02      	ldr	r3, [pc, #8]	; (1b134 <flash_nrf_pages_layout+0xc>)
   1b12a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1b12c:	2301      	movs	r3, #1
   1b12e:	6013      	str	r3, [r2, #0]
}
   1b130:	4770      	bx	lr
   1b132:	bf00      	nop
   1b134:	20021314 	.word	0x20021314

0001b138 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1b138:	4800      	ldr	r0, [pc, #0]	; (1b13c <flash_nrf_get_parameters+0x4>)
   1b13a:	4770      	bx	lr
   1b13c:	0002b714 	.word	0x0002b714

0001b140 <flash_nrf_read>:
{
   1b140:	b570      	push	{r4, r5, r6, lr}
   1b142:	460c      	mov	r4, r1
   1b144:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1b146:	4619      	mov	r1, r3
   1b148:	4620      	mov	r0, r4
{
   1b14a:	461d      	mov	r5, r3
   1b14c:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1b14e:	f00d f832 	bl	281b6 <is_regular_addr_valid>
   1b152:	4603      	mov	r3, r0
   1b154:	b968      	cbnz	r0, 1b172 <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b156:	4a0f      	ldr	r2, [pc, #60]	; (1b194 <flash_nrf_read+0x54>)
   1b158:	9000      	str	r0, [sp, #0]
   1b15a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1b15e:	e9cd 4503 	strd	r4, r5, [sp, #12]
   1b162:	2201      	movs	r2, #1
   1b164:	490c      	ldr	r1, [pc, #48]	; (1b198 <flash_nrf_read+0x58>)
   1b166:	f00d f837 	bl	281d8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1b16a:	f06f 0015 	mvn.w	r0, #21
}
   1b16e:	b006      	add	sp, #24
   1b170:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1b172:	b165      	cbz	r5, 1b18e <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   1b174:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1b178:	462a      	mov	r2, r5
   1b17a:	4621      	mov	r1, r4
   1b17c:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   1b17e:	da04      	bge.n	1b18a <flash_nrf_read+0x4a>
}
   1b180:	b006      	add	sp, #24
   1b182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   1b186:	f009 bef1 	b.w	24f6c <soc_secure_mem_read>
   1b18a:	f00e fc0a 	bl	299a2 <memcpy>
		return 0;
   1b18e:	2000      	movs	r0, #0
   1b190:	e7ed      	b.n	1b16e <flash_nrf_read+0x2e>
   1b192:	bf00      	nop
   1b194:	0002fc32 	.word	0x0002fc32
   1b198:	0002a9f8 	.word	0x0002a9f8

0001b19c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1b19c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b19e:	2201      	movs	r2, #1
   1b1a0:	4806      	ldr	r0, [pc, #24]	; (1b1bc <nrf_flash_init+0x20>)
   1b1a2:	4611      	mov	r1, r2
   1b1a4:	f00e fa49 	bl	2963a <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1b1a8:	f00d fc7a 	bl	28aa0 <nrfx_nvmc_flash_page_count_get>
   1b1ac:	4c04      	ldr	r4, [pc, #16]	; (1b1c0 <nrf_flash_init+0x24>)
   1b1ae:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1b1b0:	f00d fc73 	bl	28a9a <nrfx_nvmc_flash_page_size_get>
   1b1b4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1b1b6:	2000      	movs	r0, #0
   1b1b8:	bd10      	pop	{r4, pc}
   1b1ba:	bf00      	nop
   1b1bc:	2002131c 	.word	0x2002131c
   1b1c0:	20021314 	.word	0x20021314

0001b1c4 <flash_nrf_erase>:
{
   1b1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1c6:	b087      	sub	sp, #28
   1b1c8:	460e      	mov	r6, r1
   1b1ca:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1b1cc:	f00d fc65 	bl	28a9a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1b1d0:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1b1d2:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1b1d4:	4630      	mov	r0, r6
   1b1d6:	f00c ffee 	bl	281b6 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1b1da:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   1b1dc:	4603      	mov	r3, r0
   1b1de:	b388      	cbz	r0, 1b244 <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1b1e0:	fbb6 f3f5 	udiv	r3, r6, r5
   1b1e4:	fb05 6313 	mls	r3, r5, r3, r6
   1b1e8:	b923      	cbnz	r3, 1b1f4 <flash_nrf_erase+0x30>
   1b1ea:	fbb4 f3f5 	udiv	r3, r4, r5
   1b1ee:	fb05 4313 	mls	r3, r5, r3, r4
   1b1f2:	b173      	cbz	r3, 1b212 <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1b1f4:	4b18      	ldr	r3, [pc, #96]	; (1b258 <flash_nrf_erase+0x94>)
   1b1f6:	2201      	movs	r2, #1
   1b1f8:	9302      	str	r3, [sp, #8]
   1b1fa:	2300      	movs	r3, #0
   1b1fc:	4618      	mov	r0, r3
   1b1fe:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b202:	e9cd 3300 	strd	r3, r3, [sp]
   1b206:	4915      	ldr	r1, [pc, #84]	; (1b25c <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b208:	f00c ffe6 	bl	281d8 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1b20c:	f06f 0015 	mvn.w	r0, #21
   1b210:	e002      	b.n	1b218 <flash_nrf_erase+0x54>
		if (!n_pages) {
   1b212:	42a5      	cmp	r5, r4
   1b214:	d902      	bls.n	1b21c <flash_nrf_erase+0x58>
			return 0;
   1b216:	2000      	movs	r0, #0
}
   1b218:	b007      	add	sp, #28
   1b21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   1b21c:	f04f 32ff 	mov.w	r2, #4294967295
   1b220:	f04f 33ff 	mov.w	r3, #4294967295
   1b224:	480e      	ldr	r0, [pc, #56]	; (1b260 <flash_nrf_erase+0x9c>)
   1b226:	f004 fecf 	bl	1ffc8 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1b22a:	f00d fc36 	bl	28a9a <nrfx_nvmc_flash_page_size_get>
   1b22e:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1b230:	4638      	mov	r0, r7
   1b232:	f002 fad5 	bl	1d7e0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1b236:	1b64      	subs	r4, r4, r5
   1b238:	442f      	add	r7, r5
   1b23a:	d1f9      	bne.n	1b230 <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   1b23c:	4808      	ldr	r0, [pc, #32]	; (1b260 <flash_nrf_erase+0x9c>)
   1b23e:	f004 fe7f 	bl	1ff40 <z_impl_k_sem_give>
}
   1b242:	e7e8      	b.n	1b216 <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b244:	4a07      	ldr	r2, [pc, #28]	; (1b264 <flash_nrf_erase+0xa0>)
   1b246:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b24a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1b24e:	4903      	ldr	r1, [pc, #12]	; (1b25c <flash_nrf_erase+0x98>)
   1b250:	2201      	movs	r2, #1
   1b252:	9000      	str	r0, [sp, #0]
   1b254:	e7d8      	b.n	1b208 <flash_nrf_erase+0x44>
   1b256:	bf00      	nop
   1b258:	0002fc4f 	.word	0x0002fc4f
   1b25c:	0002a9f8 	.word	0x0002a9f8
   1b260:	2002131c 	.word	0x2002131c
   1b264:	0002fc32 	.word	0x0002fc32

0001b268 <flash_nrf_write>:
{
   1b268:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b26a:	460e      	mov	r6, r1
   1b26c:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1b26e:	4619      	mov	r1, r3
   1b270:	4630      	mov	r0, r6
{
   1b272:	461c      	mov	r4, r3
   1b274:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   1b276:	f00c ff9e 	bl	281b6 <is_regular_addr_valid>
   1b27a:	4603      	mov	r3, r0
   1b27c:	b968      	cbnz	r0, 1b29a <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b27e:	4a1d      	ldr	r2, [pc, #116]	; (1b2f4 <flash_nrf_write+0x8c>)
   1b280:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b284:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1b288:	2201      	movs	r2, #1
   1b28a:	491b      	ldr	r1, [pc, #108]	; (1b2f8 <flash_nrf_write+0x90>)
   1b28c:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1b28e:	f00c ffa3 	bl	281d8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1b292:	f06f 0015 	mvn.w	r0, #21
}
   1b296:	b007      	add	sp, #28
   1b298:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1b29a:	ea46 0504 	orr.w	r5, r6, r4
   1b29e:	f015 0503 	ands.w	r5, r5, #3
   1b2a2:	d00a      	beq.n	1b2ba <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1b2a4:	4b15      	ldr	r3, [pc, #84]	; (1b2fc <flash_nrf_write+0x94>)
   1b2a6:	2201      	movs	r2, #1
   1b2a8:	9302      	str	r3, [sp, #8]
   1b2aa:	2300      	movs	r3, #0
   1b2ac:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b2b0:	4618      	mov	r0, r3
   1b2b2:	e9cd 3300 	strd	r3, r3, [sp]
   1b2b6:	4910      	ldr	r1, [pc, #64]	; (1b2f8 <flash_nrf_write+0x90>)
   1b2b8:	e7e9      	b.n	1b28e <flash_nrf_write+0x26>
	if (!len) {
   1b2ba:	b1a4      	cbz	r4, 1b2e6 <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   1b2bc:	f04f 32ff 	mov.w	r2, #4294967295
   1b2c0:	f04f 33ff 	mov.w	r3, #4294967295
   1b2c4:	480e      	ldr	r0, [pc, #56]	; (1b300 <flash_nrf_write+0x98>)
   1b2c6:	f004 fe7f 	bl	1ffc8 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1b2ca:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1b2ce:	42a5      	cmp	r5, r4
   1b2d0:	eb05 0006 	add.w	r0, r5, r6
   1b2d4:	d109      	bne.n	1b2ea <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1b2d6:	4a0b      	ldr	r2, [pc, #44]	; (1b304 <flash_nrf_write+0x9c>)
   1b2d8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1b2dc:	07db      	lsls	r3, r3, #31
   1b2de:	d5fb      	bpl.n	1b2d8 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   1b2e0:	4807      	ldr	r0, [pc, #28]	; (1b300 <flash_nrf_write+0x98>)
   1b2e2:	f004 fe2d 	bl	1ff40 <z_impl_k_sem_give>
	return ret;
   1b2e6:	2000      	movs	r0, #0
   1b2e8:	e7d5      	b.n	1b296 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1b2ea:	5979      	ldr	r1, [r7, r5]
   1b2ec:	f002 faaa 	bl	1d844 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1b2f0:	3504      	adds	r5, #4
}
   1b2f2:	e7ec      	b.n	1b2ce <flash_nrf_write+0x66>
   1b2f4:	0002fc32 	.word	0x0002fc32
   1b2f8:	0002a9f8 	.word	0x0002a9f8
   1b2fc:	0002fc6e 	.word	0x0002fc6e
   1b300:	2002131c 	.word	0x2002131c
   1b304:	40039000 	.word	0x40039000

0001b308 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1b308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1b30a:	ab0b      	add	r3, sp, #44	; 0x2c
   1b30c:	9305      	str	r3, [sp, #20]
   1b30e:	9303      	str	r3, [sp, #12]
   1b310:	4b05      	ldr	r3, [pc, #20]	; (1b328 <z_log_msg_runtime_create.constprop.0+0x20>)
   1b312:	2201      	movs	r2, #1
   1b314:	9302      	str	r3, [sp, #8]
   1b316:	2300      	movs	r3, #0
   1b318:	4618      	mov	r0, r3
   1b31a:	e9cd 3300 	strd	r3, r3, [sp]
   1b31e:	f7f3 f8a9 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   1b322:	b007      	add	sp, #28
   1b324:	f85d fb04 	ldr.w	pc, [sp], #4
   1b328:	0002fcad 	.word	0x0002fcad

0001b32c <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1b32c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b32e:	461d      	mov	r5, r3
	return config->uarte_regs;
   1b330:	6843      	ldr	r3, [r0, #4]
{
   1b332:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1b334:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1b336:	f8d3 c000 	ldr.w	ip, [r3]
   1b33a:	f04f 0320 	mov.w	r3, #32
   1b33e:	f3ef 8711 	mrs	r7, BASEPRI
   1b342:	f383 8812 	msr	BASEPRI_MAX, r3
   1b346:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1b34a:	68e3      	ldr	r3, [r4, #12]
   1b34c:	68d8      	ldr	r0, [r3, #12]
   1b34e:	b138      	cbz	r0, 1b360 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1b350:	f387 8811 	msr	BASEPRI, r7
   1b354:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1b358:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1b35c:	b003      	add	sp, #12
   1b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1b360:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1b362:	68e3      	ldr	r3, [r4, #12]
   1b364:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1b366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1b36a:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1b36e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1b372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1b376:	68e3      	ldr	r3, [r4, #12]
   1b378:	d111      	bne.n	1b39e <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1b37a:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1b37c:	68e3      	ldr	r3, [r4, #12]
   1b37e:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1b380:	4621      	mov	r1, r4
   1b382:	4630      	mov	r0, r6
   1b384:	f00d f8e3 	bl	2854e <start_tx_locked>
   1b388:	f387 8811 	msr	BASEPRI, r7
   1b38c:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1b390:	7ae3      	ldrb	r3, [r4, #11]
   1b392:	2b01      	cmp	r3, #1
   1b394:	d101      	bne.n	1b39a <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1b396:	1c6b      	adds	r3, r5, #1
   1b398:	d106      	bne.n	1b3a8 <uarte_nrfx_tx+0x7c>
	return 0;
   1b39a:	2000      	movs	r0, #0
   1b39c:	e7de      	b.n	1b35c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1b39e:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1b3a0:	4620      	mov	r0, r4
   1b3a2:	f00d f84d 	bl	28440 <setup_tx_cache>
   1b3a6:	e7eb      	b.n	1b380 <uarte_nrfx_tx+0x54>
   1b3a8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b3ac:	2100      	movs	r1, #0
   1b3ae:	480a      	ldr	r0, [pc, #40]	; (1b3d8 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1b3b0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1b3b4:	2300      	movs	r3, #0
   1b3b6:	fbc5 0106 	smlal	r0, r1, r5, r6
   1b3ba:	4a08      	ldr	r2, [pc, #32]	; (1b3dc <uarte_nrfx_tx+0xb0>)
   1b3bc:	f7ed fd98 	bl	8ef0 <__aeabi_uldivmod>
   1b3c0:	68e4      	ldr	r4, [r4, #12]
   1b3c2:	4602      	mov	r2, r0
   1b3c4:	460b      	mov	r3, r1
   1b3c6:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1b3c8:	2000      	movs	r0, #0
   1b3ca:	2100      	movs	r1, #0
   1b3cc:	e9cd 0100 	strd	r0, r1, [sp]
   1b3d0:	4620      	mov	r0, r4
   1b3d2:	f007 f9c7 	bl	22764 <z_impl_k_timer_start>
   1b3d6:	e7e0      	b.n	1b39a <uarte_nrfx_tx+0x6e>
   1b3d8:	000f423f 	.word	0x000f423f
   1b3dc:	000f4240 	.word	0x000f4240

0001b3e0 <uarte_nrfx_configure>:
{
   1b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1b3e2:	794b      	ldrb	r3, [r1, #5]
   1b3e4:	2b01      	cmp	r3, #1
   1b3e6:	d029      	beq.n	1b43c <uarte_nrfx_configure+0x5c>
   1b3e8:	2b03      	cmp	r3, #3
   1b3ea:	d124      	bne.n	1b436 <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1b3ec:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1b3ee:	798b      	ldrb	r3, [r1, #6]
   1b3f0:	2b03      	cmp	r3, #3
   1b3f2:	d120      	bne.n	1b436 <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1b3f4:	79ce      	ldrb	r6, [r1, #7]
   1b3f6:	b10e      	cbz	r6, 1b3fc <uarte_nrfx_configure+0x1c>
   1b3f8:	2e01      	cmp	r6, #1
   1b3fa:	d11c      	bne.n	1b436 <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1b3fc:	790a      	ldrb	r2, [r1, #4]
   1b3fe:	2a01      	cmp	r2, #1
   1b400:	d01e      	beq.n	1b440 <uarte_nrfx_configure+0x60>
   1b402:	2a02      	cmp	r2, #2
   1b404:	d020      	beq.n	1b448 <uarte_nrfx_configure+0x68>
   1b406:	b9b2      	cbnz	r2, 1b436 <uarte_nrfx_configure+0x56>
   1b408:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1b40a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1b40c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1b40e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1b412:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1b416:	d06e      	beq.n	1b4f6 <uarte_nrfx_configure+0x116>
   1b418:	d833      	bhi.n	1b482 <uarte_nrfx_configure+0xa2>
   1b41a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1b41e:	d06d      	beq.n	1b4fc <uarte_nrfx_configure+0x11c>
   1b420:	d81c      	bhi.n	1b45c <uarte_nrfx_configure+0x7c>
   1b422:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1b426:	d06b      	beq.n	1b500 <uarte_nrfx_configure+0x120>
   1b428:	d810      	bhi.n	1b44c <uarte_nrfx_configure+0x6c>
   1b42a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1b42e:	d06a      	beq.n	1b506 <uarte_nrfx_configure+0x126>
   1b430:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1b434:	d06a      	beq.n	1b50c <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1b436:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b43a:	e05b      	b.n	1b4f4 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1b43c:	2700      	movs	r7, #0
   1b43e:	e7d6      	b.n	1b3ee <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1b440:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1b444:	220e      	movs	r2, #14
   1b446:	e7e0      	b.n	1b40a <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1b448:	2400      	movs	r4, #0
   1b44a:	e7fb      	b.n	1b444 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1b44c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1b450:	d05f      	beq.n	1b512 <uarte_nrfx_configure+0x132>
   1b452:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1b456:	d1ee      	bne.n	1b436 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1b458:	4b38      	ldr	r3, [pc, #224]	; (1b53c <uarte_nrfx_configure+0x15c>)
   1b45a:	e03c      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b45c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1b460:	d05a      	beq.n	1b518 <uarte_nrfx_configure+0x138>
   1b462:	d807      	bhi.n	1b474 <uarte_nrfx_configure+0x94>
   1b464:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1b468:	d058      	beq.n	1b51c <uarte_nrfx_configure+0x13c>
   1b46a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1b46e:	d1e2      	bne.n	1b436 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1b470:	4b33      	ldr	r3, [pc, #204]	; (1b540 <uarte_nrfx_configure+0x160>)
   1b472:	e030      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b474:	f647 2512 	movw	r5, #31250	; 0x7a12
   1b478:	42ab      	cmp	r3, r5
   1b47a:	d1dc      	bne.n	1b436 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1b47c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1b480:	e029      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b482:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1b486:	d04b      	beq.n	1b520 <uarte_nrfx_configure+0x140>
   1b488:	d813      	bhi.n	1b4b2 <uarte_nrfx_configure+0xd2>
   1b48a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1b48e:	d04a      	beq.n	1b526 <uarte_nrfx_configure+0x146>
   1b490:	d809      	bhi.n	1b4a6 <uarte_nrfx_configure+0xc6>
   1b492:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1b496:	42ab      	cmp	r3, r5
   1b498:	d047      	beq.n	1b52a <uarte_nrfx_configure+0x14a>
   1b49a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1b49e:	d1ca      	bne.n	1b436 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1b4a0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1b4a4:	e017      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b4a6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1b4aa:	d1c4      	bne.n	1b436 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1b4ac:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1b4b0:	e011      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b4b2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1b4b6:	d03b      	beq.n	1b530 <uarte_nrfx_configure+0x150>
   1b4b8:	d808      	bhi.n	1b4cc <uarte_nrfx_configure+0xec>
   1b4ba:	4d22      	ldr	r5, [pc, #136]	; (1b544 <uarte_nrfx_configure+0x164>)
   1b4bc:	42ab      	cmp	r3, r5
   1b4be:	d03a      	beq.n	1b536 <uarte_nrfx_configure+0x156>
   1b4c0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1b4c4:	d1b7      	bne.n	1b436 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1b4c6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1b4ca:	e004      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b4cc:	4d1e      	ldr	r5, [pc, #120]	; (1b548 <uarte_nrfx_configure+0x168>)
   1b4ce:	42ab      	cmp	r3, r5
   1b4d0:	d1b1      	bne.n	1b436 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1b4d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1b4d6:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1b4d8:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1b4dc:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1b4de:	433a      	orrs	r2, r7
   1b4e0:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1b4e2:	4334      	orrs	r4, r6
   1b4e4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b4e6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1b4ea:	1d2b      	adds	r3, r5, #4
   1b4ec:	c903      	ldmia	r1, {r0, r1}
   1b4ee:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1b4f2:	2000      	movs	r0, #0
}
   1b4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1b4f6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1b4fa:	e7ec      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1b4fc:	4b13      	ldr	r3, [pc, #76]	; (1b54c <uarte_nrfx_configure+0x16c>)
   1b4fe:	e7ea      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1b500:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1b504:	e7e7      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1b506:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1b50a:	e7e4      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b50c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1b510:	e7e1      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1b512:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1b516:	e7de      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1b518:	4b0d      	ldr	r3, [pc, #52]	; (1b550 <uarte_nrfx_configure+0x170>)
   1b51a:	e7dc      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1b51c:	4b0d      	ldr	r3, [pc, #52]	; (1b554 <uarte_nrfx_configure+0x174>)
   1b51e:	e7da      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1b520:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1b524:	e7d7      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1b526:	4b0c      	ldr	r3, [pc, #48]	; (1b558 <uarte_nrfx_configure+0x178>)
   1b528:	e7d5      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1b52a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1b52e:	e7d2      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1b530:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b534:	e7cf      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1b536:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b53a:	e7cc      	b.n	1b4d6 <uarte_nrfx_configure+0xf6>
   1b53c:	0013b000 	.word	0x0013b000
   1b540:	004ea000 	.word	0x004ea000
   1b544:	0003d090 	.word	0x0003d090
   1b548:	000f4240 	.word	0x000f4240
   1b54c:	00275000 	.word	0x00275000
   1b550:	0075c000 	.word	0x0075c000
   1b554:	003af000 	.word	0x003af000
   1b558:	013a9000 	.word	0x013a9000

0001b55c <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b55c:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1b55e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1b562:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1b566:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1b568:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   1b56c:	b087      	sub	sp, #28
   1b56e:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1b572:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1b574:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1b578:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1b57a:	aa05      	add	r2, sp, #20
   1b57c:	4640      	mov	r0, r8
   1b57e:	f00d f8c2 	bl	28706 <pinctrl_lookup_state>
	if (ret < 0) {
   1b582:	1e04      	subs	r4, r0, #0
   1b584:	db25      	blt.n	1b5d2 <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   1b586:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1b588:	f8d8 2000 	ldr.w	r2, [r8]
   1b58c:	7919      	ldrb	r1, [r3, #4]
   1b58e:	6818      	ldr	r0, [r3, #0]
   1b590:	f00d f8cc 	bl	2872c <pinctrl_configure_pins>
	if (err < 0) {
   1b594:	1e04      	subs	r4, r0, #0
   1b596:	db1c      	blt.n	1b5d2 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1b598:	4638      	mov	r0, r7
   1b59a:	1d31      	adds	r1, r6, #4
   1b59c:	f7ff ff20 	bl	1b3e0 <uarte_nrfx_configure>
	if (err) {
   1b5a0:	4604      	mov	r4, r0
   1b5a2:	b9b0      	cbnz	r0, 1b5d2 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1b5a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1b5a8:	0799      	lsls	r1, r3, #30
   1b5aa:	d532      	bpl.n	1b612 <uarte_instance_init.constprop.0+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1b5ac:	f106 001c 	add.w	r0, r6, #28
   1b5b0:	f001 fc3c 	bl	1ce2c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1b5b4:	4b4f      	ldr	r3, [pc, #316]	; (1b6f4 <uarte_instance_init.constprop.0+0x198>)
   1b5b6:	4298      	cmp	r0, r3
   1b5b8:	d00f      	beq.n	1b5da <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   1b5ba:	4b4f      	ldr	r3, [pc, #316]	; (1b6f8 <uarte_instance_init.constprop.0+0x19c>)
   1b5bc:	4620      	mov	r0, r4
   1b5be:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b5c2:	9400      	str	r4, [sp, #0]
   1b5c4:	4623      	mov	r3, r4
   1b5c6:	2201      	movs	r2, #1
   1b5c8:	494c      	ldr	r1, [pc, #304]	; (1b6fc <uarte_instance_init.constprop.0+0x1a0>)
   1b5ca:	f7ff fe9d 	bl	1b308 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1b5ce:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1b5d2:	4620      	mov	r0, r4
   1b5d4:	b007      	add	sp, #28
   1b5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b5da:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1b5dc:	f115 0f0c 	cmn.w	r5, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b5e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b5e4:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1b5e8:	d10b      	bne.n	1b602 <uarte_instance_init.constprop.0+0xa6>
   1b5ea:	4945      	ldr	r1, [pc, #276]	; (1b700 <uarte_instance_init.constprop.0+0x1a4>)
   1b5ec:	4845      	ldr	r0, [pc, #276]	; (1b704 <uarte_instance_init.constprop.0+0x1a8>)
   1b5ee:	f240 234e 	movw	r3, #590	; 0x24e
   1b5f2:	4a45      	ldr	r2, [pc, #276]	; (1b708 <uarte_instance_init.constprop.0+0x1ac>)
   1b5f4:	f009 fc6f 	bl	24ed6 <assert_print>
   1b5f8:	f240 214e 	movw	r1, #590	; 0x24e
   1b5fc:	4842      	ldr	r0, [pc, #264]	; (1b708 <uarte_instance_init.constprop.0+0x1ac>)
   1b5fe:	f009 fc63 	bl	24ec8 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b602:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1b606:	2301      	movs	r3, #1
   1b608:	7f32      	ldrb	r2, [r6, #28]
   1b60a:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1b60c:	4a3f      	ldr	r2, [pc, #252]	; (1b70c <uarte_instance_init.constprop.0+0x1b0>)
   1b60e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1b612:	68f3      	ldr	r3, [r6, #12]
   1b614:	2b00      	cmp	r3, #0
   1b616:	d059      	beq.n	1b6cc <uarte_instance_init.constprop.0+0x170>
    p_reg->INTENSET = mask;
   1b618:	2204      	movs	r2, #4
	return config->uarte_regs;
   1b61a:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1b61c:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1b620:	681b      	ldr	r3, [r3, #0]
   1b622:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1b626:	2201      	movs	r2, #1
   1b628:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1b62c:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1b630:	4937      	ldr	r1, [pc, #220]	; (1b710 <uarte_instance_init.constprop.0+0x1b4>)
   1b632:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b636:	2108      	movs	r1, #8
   1b638:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b63c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1b640:	b1a1      	cbz	r1, 1b66c <uarte_instance_init.constprop.0+0x110>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b642:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b644:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1b648:	b91a      	cbnz	r2, 1b652 <uarte_instance_init.constprop.0+0xf6>
   1b64a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1b64e:	2a00      	cmp	r2, #0
   1b650:	d0f8      	beq.n	1b644 <uarte_instance_init.constprop.0+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b652:	2200      	movs	r2, #0
   1b654:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1b658:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1b65c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1b660:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1b664:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1b668:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1b66c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1b670:	2200      	movs	r2, #0
   1b672:	4928      	ldr	r1, [pc, #160]	; (1b714 <uarte_instance_init.constprop.0+0x1b8>)
   1b674:	3080      	adds	r0, #128	; 0x80
   1b676:	f00e f8b1 	bl	297dc <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1b67a:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1b67e:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1b682:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1b686:	2200      	movs	r2, #0
   1b688:	4923      	ldr	r1, [pc, #140]	; (1b718 <uarte_instance_init.constprop.0+0x1bc>)
   1b68a:	3020      	adds	r0, #32
   1b68c:	f00e f8a6 	bl	297dc <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1b690:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1b694:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1b698:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b69c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1b69e:	bf5c      	itt	pl
   1b6a0:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1b6a4:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b6a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b6ac:	06db      	lsls	r3, r3, #27
   1b6ae:	bf44      	itt	mi
   1b6b0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1b6b4:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b6b8:	6973      	ldr	r3, [r6, #20]
   1b6ba:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b6be:	2300      	movs	r3, #0
   1b6c0:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b6c4:	2301      	movs	r3, #1
   1b6c6:	60ab      	str	r3, [r5, #8]
   1b6c8:	60eb      	str	r3, [r5, #12]
	return 0;
   1b6ca:	e782      	b.n	1b5d2 <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b6cc:	2308      	movs	r3, #8
   1b6ce:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1b6d2:	f899 3008 	ldrb.w	r3, [r9, #8]
   1b6d6:	2b00      	cmp	r3, #0
   1b6d8:	d1de      	bne.n	1b698 <uarte_instance_init.constprop.0+0x13c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b6da:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1b6de:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b6e2:	69b3      	ldr	r3, [r6, #24]
   1b6e4:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b6e8:	2301      	movs	r3, #1
   1b6ea:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b6ee:	602b      	str	r3, [r5, #0]
}
   1b6f0:	e7d2      	b.n	1b698 <uarte_instance_init.constprop.0+0x13c>
   1b6f2:	bf00      	nop
   1b6f4:	0bad0000 	.word	0x0bad0000
   1b6f8:	0002fcad 	.word	0x0002fcad
   1b6fc:	0002aa80 	.word	0x0002aa80
   1b700:	0002c8cf 	.word	0x0002c8cf
   1b704:	0002b939 	.word	0x0002b939
   1b708:	0002c897 	.word	0x0002c897
   1b70c:	40017000 	.word	0x40017000
   1b710:	000a0210 	.word	0x000a0210
   1b714:	000285c1 	.word	0x000285c1
   1b718:	00028691 	.word	0x00028691

0001b71c <uarte_nrfx_poll_out>:
{
   1b71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b720:	4604      	mov	r4, r0
   1b722:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1b724:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b726:	f00d ff37 	bl	29598 <k_is_in_isr>
   1b72a:	b9b0      	cbnz	r0, 1b75a <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1b72c:	4b2a      	ldr	r3, [pc, #168]	; (1b7d8 <uarte_nrfx_poll_out+0xbc>)
   1b72e:	781b      	ldrb	r3, [r3, #0]
   1b730:	b19b      	cbz	r3, 1b75a <uarte_nrfx_poll_out+0x3e>
{
   1b732:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1b734:	6860      	ldr	r0, [r4, #4]
   1b736:	f00c fefa 	bl	2852e <is_tx_ready.isra.0>
   1b73a:	2800      	cmp	r0, #0
   1b73c:	d138      	bne.n	1b7b0 <uarte_nrfx_poll_out+0x94>
   1b73e:	2001      	movs	r0, #1
   1b740:	f00d f92e 	bl	289a0 <nrfx_busy_wait>
   1b744:	3f01      	subs	r7, #1
   1b746:	d1f5      	bne.n	1b734 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1b748:	2100      	movs	r1, #0
   1b74a:	2021      	movs	r0, #33	; 0x21
   1b74c:	f006 faec 	bl	21d28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b750:	e7ef      	b.n	1b732 <uarte_nrfx_poll_out+0x16>
   1b752:	f381 8811 	msr	BASEPRI, r1
   1b756:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b75a:	f04f 0320 	mov.w	r3, #32
   1b75e:	f3ef 8111 	mrs	r1, BASEPRI
   1b762:	f383 8812 	msr	BASEPRI_MAX, r3
   1b766:	f3bf 8f6f 	isb	sy
   1b76a:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1b76e:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1b770:	4640      	mov	r0, r8
   1b772:	f00c fedc 	bl	2852e <is_tx_ready.isra.0>
   1b776:	2800      	cmp	r0, #0
   1b778:	d0eb      	beq.n	1b752 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1b77a:	68eb      	ldr	r3, [r5, #12]
   1b77c:	b15b      	cbz	r3, 1b796 <uarte_nrfx_poll_out+0x7a>
   1b77e:	68da      	ldr	r2, [r3, #12]
   1b780:	b14a      	cbz	r2, 1b796 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1b782:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1b786:	2a00      	cmp	r2, #0
   1b788:	da05      	bge.n	1b796 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1b78a:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1b78e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1b792:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1b796:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1b798:	2201      	movs	r2, #1
	*data->char_out = c;
   1b79a:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1b79c:	4620      	mov	r0, r4
   1b79e:	6969      	ldr	r1, [r5, #20]
   1b7a0:	f00c fd6e 	bl	28280 <tx_start>
	__asm__ volatile(
   1b7a4:	f387 8811 	msr	BASEPRI, r7
   1b7a8:	f3bf 8f6f 	isb	sy
}
   1b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b7b0:	f04f 0320 	mov.w	r3, #32
   1b7b4:	f3ef 8111 	mrs	r1, BASEPRI
   1b7b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7bc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1b7c0:	6860      	ldr	r0, [r4, #4]
   1b7c2:	460f      	mov	r7, r1
   1b7c4:	f00c feb3 	bl	2852e <is_tx_ready.isra.0>
   1b7c8:	2800      	cmp	r0, #0
   1b7ca:	d1e4      	bne.n	1b796 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1b7cc:	f381 8811 	msr	BASEPRI, r1
   1b7d0:	f3bf 8f6f 	isb	sy
}
   1b7d4:	e7b8      	b.n	1b748 <uarte_nrfx_poll_out+0x2c>
   1b7d6:	bf00      	nop
   1b7d8:	20022472 	.word	0x20022472

0001b7dc <uarte_nrfx_rx_enable>:
{
   1b7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1b7e0:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1b7e4:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1b7e6:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1b7ea:	4605      	mov	r5, r0
   1b7ec:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1b7ee:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1b7f0:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1b7f4:	b172      	cbz	r2, 1b814 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1b7f6:	4944      	ldr	r1, [pc, #272]	; (1b908 <uarte_nrfx_rx_enable+0x12c>)
   1b7f8:	f240 337d 	movw	r3, #893	; 0x37d
   1b7fc:	4a43      	ldr	r2, [pc, #268]	; (1b90c <uarte_nrfx_rx_enable+0x130>)
   1b7fe:	4844      	ldr	r0, [pc, #272]	; (1b910 <uarte_nrfx_rx_enable+0x134>)
   1b800:	f009 fb69 	bl	24ed6 <assert_print>
   1b804:	4843      	ldr	r0, [pc, #268]	; (1b914 <uarte_nrfx_rx_enable+0x138>)
   1b806:	f009 fb66 	bl	24ed6 <assert_print>
   1b80a:	f240 317d 	movw	r1, #893	; 0x37d
   1b80e:	483f      	ldr	r0, [pc, #252]	; (1b90c <uarte_nrfx_rx_enable+0x130>)
   1b810:	f009 fb5a 	bl	24ec8 <assert_post_action>
	if (data->async->rx_enabled) {
   1b814:	68e2      	ldr	r2, [r4, #12]
   1b816:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1b81a:	2900      	cmp	r1, #0
   1b81c:	d170      	bne.n	1b900 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1b81e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1b822:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1b824:	bfca      	itet	gt
   1b826:	2205      	movgt	r2, #5
   1b828:	235c      	movle	r3, #92	; 0x5c
   1b82a:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1b82e:	68e2      	ldr	r2, [r4, #12]
   1b830:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1b832:	68e3      	ldr	r3, [r4, #12]
   1b834:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1b838:	68e3      	ldr	r3, [r4, #12]
   1b83a:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1b83c:	2300      	movs	r3, #0
   1b83e:	68e2      	ldr	r2, [r4, #12]
   1b840:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1b842:	68e2      	ldr	r2, [r4, #12]
   1b844:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1b846:	68e2      	ldr	r2, [r4, #12]
   1b848:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b84a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b84e:	06da      	lsls	r2, r3, #27
   1b850:	d523      	bpl.n	1b89a <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1b852:	68e1      	ldr	r1, [r4, #12]
   1b854:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1b858:	b1fe      	cbz	r6, 1b89a <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1b85a:	42be      	cmp	r6, r7
   1b85c:	bf28      	it	cs
   1b85e:	463e      	movcs	r6, r7
   1b860:	4640      	mov	r0, r8
   1b862:	4632      	mov	r2, r6
   1b864:	31c4      	adds	r1, #196	; 0xc4
   1b866:	f00e f89c 	bl	299a2 <memcpy>
			if (!len) {
   1b86a:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1b86c:	44b0      	add	r8, r6
			if (!len) {
   1b86e:	d114      	bne.n	1b89a <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1b870:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1b872:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1b874:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1b878:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1b87a:	1b9b      	subs	r3, r3, r6
   1b87c:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1b880:	f00c fd2d 	bl	282de <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1b884:	68e1      	ldr	r1, [r4, #12]
   1b886:	4628      	mov	r0, r5
   1b888:	3158      	adds	r1, #88	; 0x58
   1b88a:	f00c fd41 	bl	28310 <rx_buf_release>
				notify_rx_disable(dev);
   1b88e:	4628      	mov	r0, r5
   1b890:	f00c fd56 	bl	28340 <notify_rx_disable>
	return 0;
   1b894:	2000      	movs	r0, #0
}
   1b896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b89a:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b89c:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b8a0:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b8a4:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1b8a8:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1b8ac:	2201      	movs	r2, #1
   1b8ae:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1b8b2:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1b8b6:	68e3      	ldr	r3, [r4, #12]
   1b8b8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b8bc:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b8c0:	06db      	lsls	r3, r3, #27
   1b8c2:	d519      	bpl.n	1b8f8 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1b8c4:	f04f 0320 	mov.w	r3, #32
   1b8c8:	f3ef 8111 	mrs	r1, BASEPRI
   1b8cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8d0:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1b8d4:	692b      	ldr	r3, [r5, #16]
   1b8d6:	68db      	ldr	r3, [r3, #12]
   1b8d8:	b12b      	cbz	r3, 1b8e6 <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1b8da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1b8de:	f042 0202 	orr.w	r2, r2, #2
   1b8e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b8e6:	2208      	movs	r2, #8
	return config->uarte_regs;
   1b8e8:	686b      	ldr	r3, [r5, #4]
   1b8ea:	681b      	ldr	r3, [r3, #0]
   1b8ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1b8f0:	f381 8811 	msr	BASEPRI, r1
   1b8f4:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b8f8:	2301      	movs	r3, #1
   1b8fa:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1b8fe:	e7c9      	b.n	1b894 <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1b900:	f06f 000f 	mvn.w	r0, #15
   1b904:	e7c7      	b.n	1b896 <uarte_nrfx_rx_enable+0xba>
   1b906:	bf00      	nop
   1b908:	000311d2 	.word	0x000311d2
   1b90c:	0002fccc 	.word	0x0002fccc
   1b910:	0002b939 	.word	0x0002b939
   1b914:	0002fd00 	.word	0x0002fd00

0001b918 <uarte_nrfx_isr_async>:
{
   1b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1b91c:	6843      	ldr	r3, [r0, #4]
{
   1b91e:	4604      	mov	r4, r0
	return config->uarte_regs;
   1b920:	681d      	ldr	r5, [r3, #0]
{
   1b922:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b924:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1b928:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1b92a:	b169      	cbz	r1, 1b948 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b92c:	2200      	movs	r2, #0
   1b92e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1b932:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1b936:	68da      	ldr	r2, [r3, #12]
   1b938:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1b93c:	3301      	adds	r3, #1
   1b93e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1b942:	b008      	add	sp, #32
   1b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b948:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1b94c:	b323      	cbz	r3, 1b998 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b94e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1b952:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1b956:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1b958:	2214      	movs	r2, #20
	return config->uarte_regs;
   1b95a:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1b95c:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b95e:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b962:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1b966:	f00e f856 	bl	29a16 <memset>
   1b96a:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1b96c:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1b96e:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1b972:	f100 8103 	bmi.w	1bb7c <uarte_nrfx_isr_async+0x264>
   1b976:	07b3      	lsls	r3, r6, #30
   1b978:	f100 8102 	bmi.w	1bb80 <uarte_nrfx_isr_async+0x268>
   1b97c:	0777      	lsls	r7, r6, #29
   1b97e:	f100 8101 	bmi.w	1bb84 <uarte_nrfx_isr_async+0x26c>
   1b982:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1b986:	4620      	mov	r0, r4
   1b988:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1b98a:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1b98e:	f00c fc9f 	bl	282d0 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1b992:	4620      	mov	r0, r4
   1b994:	f00c fd32 	bl	283fc <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b998:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1b99c:	b38b      	cbz	r3, 1ba02 <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1b99e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1b9a2:	06d8      	lsls	r0, r3, #27
   1b9a4:	d52d      	bpl.n	1ba02 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b9a6:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1b9aa:	2201      	movs	r2, #1
   1b9ac:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1b9b0:	6926      	ldr	r6, [r4, #16]
   1b9b2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1b9b6:	6863      	ldr	r3, [r4, #4]
   1b9b8:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1b9ba:	68f3      	ldr	r3, [r6, #12]
   1b9bc:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1b9c0:	68f0      	ldr	r0, [r6, #12]
   1b9c2:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1b9c4:	f00d ff16 	bl	297f4 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1b9c8:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1b9ca:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1b9ce:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1b9d2:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1b9d6:	68f2      	ldr	r2, [r6, #12]
   1b9d8:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1b9da:	1a1b      	subs	r3, r3, r0
   1b9dc:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1b9de:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1b9e0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1b9e4:	4408      	add	r0, r1
	if (rx_len > 0) {
   1b9e6:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1b9e8:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1b9ea:	dd02      	ble.n	1b9f2 <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1b9ec:	4620      	mov	r0, r4
   1b9ee:	f00c fc76 	bl	282de <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1b9f2:	68f1      	ldr	r1, [r6, #12]
   1b9f4:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1b9f8:	2b00      	cmp	r3, #0
   1b9fa:	f040 80c5 	bne.w	1bb88 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1b9fe:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ba02:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1ba06:	b383      	cbz	r3, 1ba6a <uarte_nrfx_isr_async+0x152>
   1ba08:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1ba0c:	bb6e      	cbnz	r6, 1ba6a <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1ba0e:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ba10:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1ba14:	4631      	mov	r1, r6
   1ba16:	a803      	add	r0, sp, #12
   1ba18:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1ba1c:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1ba1e:	f00d fffa 	bl	29a16 <memset>
   1ba22:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1ba24:	a903      	add	r1, sp, #12
   1ba26:	4620      	mov	r0, r4
	struct uart_event evt = {
   1ba28:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1ba2c:	f00c fc50 	bl	282d0 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1ba30:	68fb      	ldr	r3, [r7, #12]
   1ba32:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1ba34:	1c51      	adds	r1, r2, #1
   1ba36:	d018      	beq.n	1ba6a <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1ba38:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1ba3a:	68ff      	ldr	r7, [r7, #12]
   1ba3c:	498e      	ldr	r1, [pc, #568]	; (1bc78 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1ba3e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1ba40:	468e      	mov	lr, r1
   1ba42:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1ba46:	4631      	mov	r1, r6
   1ba48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1ba4c:	fbcc e100 	smlal	lr, r1, ip, r0
   1ba50:	2300      	movs	r3, #0
   1ba52:	4670      	mov	r0, lr
   1ba54:	4a89      	ldr	r2, [pc, #548]	; (1bc7c <uarte_nrfx_isr_async+0x364>)
   1ba56:	f7ed fa4b 	bl	8ef0 <__aeabi_uldivmod>
   1ba5a:	4602      	mov	r2, r0
   1ba5c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1ba5e:	e9cd 0100 	strd	r0, r1, [sp]
   1ba62:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1ba66:	f006 fe7d 	bl	22764 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ba6a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1ba6e:	b333      	cbz	r3, 1babe <uarte_nrfx_isr_async+0x1a6>
   1ba70:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1ba74:	bb1e      	cbnz	r6, 1babe <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ba76:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1ba7a:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1ba7c:	4620      	mov	r0, r4
   1ba7e:	68f9      	ldr	r1, [r7, #12]
   1ba80:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1ba84:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1ba86:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1ba8a:	f00c fc41 	bl	28310 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1ba8e:	68f9      	ldr	r1, [r7, #12]
   1ba90:	4620      	mov	r0, r4
   1ba92:	3164      	adds	r1, #100	; 0x64
   1ba94:	f00c fc3c 	bl	28310 <rx_buf_release>
	if (data->async->rx_enabled) {
   1ba98:	68fb      	ldr	r3, [r7, #12]
   1ba9a:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1ba9e:	2a00      	cmp	r2, #0
   1baa0:	f000 80a3 	beq.w	1bbea <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1baa4:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1baa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1baac:	06d8      	lsls	r0, r3, #27
   1baae:	d503      	bpl.n	1bab8 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1bab0:	2102      	movs	r1, #2
   1bab2:	4620      	mov	r0, r4
   1bab4:	f00c fd11 	bl	284da <async_uart_release>
	notify_rx_disable(dev);
   1bab8:	4620      	mov	r0, r4
   1baba:	f00c fc41 	bl	28340 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1babe:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1bac2:	b1db      	cbz	r3, 1bafc <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1bac4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1bac8:	05d9      	lsls	r1, r3, #23
   1baca:	d517      	bpl.n	1bafc <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1bacc:	6863      	ldr	r3, [r4, #4]
   1bace:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1bad0:	f04f 0120 	mov.w	r1, #32
   1bad4:	f3ef 8211 	mrs	r2, BASEPRI
   1bad8:	f381 8812 	msr	BASEPRI_MAX, r1
   1badc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bae0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1bae4:	b131      	cbz	r1, 1baf4 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bae6:	2100      	movs	r1, #0
   1bae8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1baec:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1baf0:	2101      	movs	r1, #1
   1baf2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1baf4:	f382 8811 	msr	BASEPRI, r2
   1baf8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bafc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1bb00:	2b00      	cmp	r3, #0
   1bb02:	f43f af1e 	beq.w	1b942 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1bb06:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1bb0a:	025a      	lsls	r2, r3, #9
   1bb0c:	f57f af19 	bpl.w	1b942 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1bb10:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1bb12:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1bb14:	e9d3 7300 	ldrd	r7, r3, [r3]
   1bb18:	06db      	lsls	r3, r3, #27
   1bb1a:	d46b      	bmi.n	1bbf4 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1bb1c:	68eb      	ldr	r3, [r5, #12]
   1bb1e:	689b      	ldr	r3, [r3, #8]
   1bb20:	2b00      	cmp	r3, #0
   1bb22:	f43f af0e 	beq.w	1b942 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1bb26:	f04f 0320 	mov.w	r3, #32
   1bb2a:	f3ef 8211 	mrs	r2, BASEPRI
   1bb2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb32:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1bb36:	68eb      	ldr	r3, [r5, #12]
   1bb38:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1bb3c:	2900      	cmp	r1, #0
   1bb3e:	bfac      	ite	ge
   1bb40:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1bb44:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1bb48:	f382 8811 	msr	BASEPRI, r2
   1bb4c:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1bb50:	68eb      	ldr	r3, [r5, #12]
   1bb52:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1bb56:	2a00      	cmp	r2, #0
   1bb58:	d059      	beq.n	1bc0e <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1bb5a:	f04f 0320 	mov.w	r3, #32
   1bb5e:	f3ef 8611 	mrs	r6, BASEPRI
   1bb62:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb66:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1bb6a:	4629      	mov	r1, r5
   1bb6c:	4620      	mov	r0, r4
   1bb6e:	f00c fcee 	bl	2854e <start_tx_locked>
	__asm__ volatile(
   1bb72:	f386 8811 	msr	BASEPRI, r6
   1bb76:	f3bf 8f6f 	isb	sy
				return;
   1bb7a:	e6e2      	b.n	1b942 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1bb7c:	2601      	movs	r6, #1
   1bb7e:	e702      	b.n	1b986 <uarte_nrfx_isr_async+0x6e>
   1bb80:	2602      	movs	r6, #2
   1bb82:	e700      	b.n	1b986 <uarte_nrfx_isr_async+0x6e>
   1bb84:	2604      	movs	r6, #4
   1bb86:	e6fe      	b.n	1b986 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1bb88:	4620      	mov	r0, r4
   1bb8a:	3158      	adds	r1, #88	; 0x58
   1bb8c:	f00c fbc0 	bl	28310 <rx_buf_release>
	__asm__ volatile(
   1bb90:	f04f 0320 	mov.w	r3, #32
   1bb94:	f3ef 8111 	mrs	r1, BASEPRI
   1bb98:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb9c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1bba0:	68f3      	ldr	r3, [r6, #12]
   1bba2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1bba4:	b1f2      	cbz	r2, 1bbe4 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1bba6:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1bba8:	68f3      	ldr	r3, [r6, #12]
   1bbaa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1bbac:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1bbae:	2300      	movs	r3, #0
   1bbb0:	68f2      	ldr	r2, [r6, #12]
   1bbb2:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1bbb4:	68f2      	ldr	r2, [r6, #12]
   1bbb6:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1bbb8:	68f2      	ldr	r2, [r6, #12]
   1bbba:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bbbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1bbc0:	b90b      	cbnz	r3, 1bbc6 <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbc2:	2301      	movs	r3, #1
   1bbc4:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1bbc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1bbca:	f023 0320 	bic.w	r3, r3, #32
   1bbce:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1bbd2:	f381 8811 	msr	BASEPRI, r1
   1bbd6:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1bbda:	2200      	movs	r2, #0
   1bbdc:	68f3      	ldr	r3, [r6, #12]
   1bbde:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1bbe2:	e70e      	b.n	1ba02 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbe4:	2301      	movs	r3, #1
   1bbe6:	607b      	str	r3, [r7, #4]
}
   1bbe8:	e7f3      	b.n	1bbd2 <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1bbea:	4611      	mov	r1, r2
   1bbec:	6860      	ldr	r0, [r4, #4]
   1bbee:	f00c fc3f 	bl	28470 <rx_flush.isra.0>
   1bbf2:	e759      	b.n	1baa8 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1bbf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1bbf8:	2101      	movs	r1, #1
   1bbfa:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1bbfe:	4620      	mov	r0, r4
   1bc00:	f00c fc6b 	bl	284da <async_uart_release>
		if (!data->async->tx_size) {
   1bc04:	68eb      	ldr	r3, [r5, #12]
   1bc06:	68db      	ldr	r3, [r3, #12]
   1bc08:	2b00      	cmp	r3, #0
   1bc0a:	d187      	bne.n	1bb1c <uarte_nrfx_isr_async+0x204>
   1bc0c:	e699      	b.n	1b942 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1bc0e:	6899      	ldr	r1, [r3, #8]
   1bc10:	691a      	ldr	r2, [r3, #16]
   1bc12:	4291      	cmp	r1, r2
   1bc14:	d00c      	beq.n	1bc30 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1bc16:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1bc18:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1bc1a:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1bc1c:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1bc1e:	d128      	bne.n	1bc72 <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1bc20:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1bc22:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1bc24:	f00c fc0c 	bl	28440 <setup_tx_cache>
   1bc28:	2800      	cmp	r0, #0
   1bc2a:	d196      	bne.n	1bb5a <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1bc2c:	68eb      	ldr	r3, [r5, #12]
   1bc2e:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1bc30:	68e8      	ldr	r0, [r5, #12]
   1bc32:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1bc34:	f00d fdde 	bl	297f4 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1bc38:	2214      	movs	r2, #20
   1bc3a:	2100      	movs	r1, #0
   1bc3c:	a803      	add	r0, sp, #12
   1bc3e:	f00d feea 	bl	29a16 <memset>
		.data.tx.buf = data->async->tx_buf,
   1bc42:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1bc44:	4620      	mov	r0, r4
	struct uart_event evt = {
   1bc46:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1bc48:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1bc4a:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1bc4e:	68db      	ldr	r3, [r3, #12]
   1bc50:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1bc52:	bf1c      	itt	ne
   1bc54:	2301      	movne	r3, #1
   1bc56:	f88d 300c 	strbne.w	r3, [sp, #12]
   1bc5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1bc5e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1bc62:	2300      	movs	r3, #0
   1bc64:	68ea      	ldr	r2, [r5, #12]
   1bc66:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1bc68:	68ea      	ldr	r2, [r5, #12]
   1bc6a:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1bc6c:	f00c fb30 	bl	282d0 <user_callback>
   1bc70:	e667      	b.n	1b942 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1bc72:	4616      	mov	r6, r2
   1bc74:	e7dc      	b.n	1bc30 <uarte_nrfx_isr_async+0x318>
   1bc76:	bf00      	nop
   1bc78:	000f423f 	.word	0x000f423f
   1bc7c:	000f4240 	.word	0x000f4240

0001bc80 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1bc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1bc82:	7e01      	ldrb	r1, [r0, #24]
   1bc84:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1bc86:	2902      	cmp	r1, #2
   1bc88:	d014      	beq.n	1bcb4 <bt_rpmsg_send+0x34>
   1bc8a:	2904      	cmp	r1, #4
   1bc8c:	d011      	beq.n	1bcb2 <bt_rpmsg_send+0x32>
   1bc8e:	b1f9      	cbz	r1, 1bcd0 <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1bc90:	4b10      	ldr	r3, [pc, #64]	; (1bcd4 <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   1bc92:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1bc94:	9302      	str	r3, [sp, #8]
   1bc96:	2300      	movs	r3, #0
   1bc98:	2201      	movs	r2, #1
   1bc9a:	4618      	mov	r0, r3
   1bc9c:	e9cd 3300 	strd	r3, r3, [sp]
   1bca0:	490d      	ldr	r1, [pc, #52]	; (1bcd8 <bt_rpmsg_send+0x58>)
   1bca2:	f00c fcf9 	bl	28698 <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   1bca6:	4620      	mov	r0, r4
   1bca8:	f7fd fbec 	bl	19484 <net_buf_unref>
	return 0;
}
   1bcac:	2000      	movs	r0, #0
   1bcae:	b004      	add	sp, #16
   1bcb0:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   1bcb2:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1bcb4:	f104 000c 	add.w	r0, r4, #12
   1bcb8:	f00c f8e0 	bl	27e7c <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1bcbc:	8a22      	ldrh	r2, [r4, #16]
   1bcbe:	68e1      	ldr	r1, [r4, #12]
   1bcc0:	4806      	ldr	r0, [pc, #24]	; (1bcdc <bt_rpmsg_send+0x5c>)
   1bcc2:	f7f3 fb77 	bl	f3b4 <ipc_service_send>
	if (err < 0) {
   1bcc6:	2800      	cmp	r0, #0
   1bcc8:	daed      	bge.n	1bca6 <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   1bcca:	4b05      	ldr	r3, [pc, #20]	; (1bce0 <bt_rpmsg_send+0x60>)
   1bccc:	9003      	str	r0, [sp, #12]
   1bcce:	e7e1      	b.n	1bc94 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   1bcd0:	2101      	movs	r1, #1
   1bcd2:	e7ef      	b.n	1bcb4 <bt_rpmsg_send+0x34>
   1bcd4:	0002fd3c 	.word	0x0002fd3c
   1bcd8:	0002a998 	.word	0x0002a998
   1bcdc:	20021334 	.word	0x20021334
   1bce0:	0002fd4c 	.word	0x0002fd4c

0001bce4 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1bce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1bce6:	4809      	ldr	r0, [pc, #36]	; (1bd0c <bt_rpmsg_init+0x28>)
   1bce8:	f7f6 fdde 	bl	128a8 <bt_hci_driver_register>
	if (err < 0) {
   1bcec:	1e04      	subs	r4, r0, #0
   1bcee:	da0a      	bge.n	1bd06 <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1bcf0:	4b07      	ldr	r3, [pc, #28]	; (1bd10 <bt_rpmsg_init+0x2c>)
   1bcf2:	2201      	movs	r2, #1
   1bcf4:	9302      	str	r3, [sp, #8]
   1bcf6:	2300      	movs	r3, #0
   1bcf8:	4906      	ldr	r1, [pc, #24]	; (1bd14 <bt_rpmsg_init+0x30>)
   1bcfa:	4618      	mov	r0, r3
   1bcfc:	e9cd 3300 	strd	r3, r3, [sp]
   1bd00:	9403      	str	r4, [sp, #12]
   1bd02:	f00c fcc9 	bl	28698 <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   1bd06:	4620      	mov	r0, r4
   1bd08:	b004      	add	sp, #16
   1bd0a:	bd10      	pop	{r4, pc}
   1bd0c:	0002b7b8 	.word	0x0002b7b8
   1bd10:	0002fd64 	.word	0x0002fd64
   1bd14:	0002a998 	.word	0x0002a998

0001bd18 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1bd18:	4801      	ldr	r0, [pc, #4]	; (1bd20 <hci_ept_bound+0x8>)
   1bd1a:	f004 b911 	b.w	1ff40 <z_impl_k_sem_give>
   1bd1e:	bf00      	nop
   1bd20:	20008b18 	.word	0x20008b18

0001bd24 <bt_rpmsg_open>:
{
   1bd24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1bd26:	4816      	ldr	r0, [pc, #88]	; (1bd80 <bt_rpmsg_open+0x5c>)
   1bd28:	f7f3 fae6 	bl	f2f8 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1bd2c:	4604      	mov	r4, r0
   1bd2e:	b180      	cbz	r0, 1bd52 <bt_rpmsg_open+0x2e>
   1bd30:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1bd34:	d00d      	beq.n	1bd52 <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1bd36:	4b13      	ldr	r3, [pc, #76]	; (1bd84 <bt_rpmsg_open+0x60>)
   1bd38:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   1bd3a:	9302      	str	r3, [sp, #8]
   1bd3c:	2300      	movs	r3, #0
   1bd3e:	2201      	movs	r2, #1
   1bd40:	4618      	mov	r0, r3
   1bd42:	e9cd 3300 	strd	r3, r3, [sp]
   1bd46:	4910      	ldr	r1, [pc, #64]	; (1bd88 <bt_rpmsg_open+0x64>)
   1bd48:	f00c fca6 	bl	28698 <z_log_msg_runtime_create.constprop.0>
}
   1bd4c:	4620      	mov	r0, r4
   1bd4e:	b004      	add	sp, #16
   1bd50:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1bd52:	4a0e      	ldr	r2, [pc, #56]	; (1bd8c <bt_rpmsg_open+0x68>)
   1bd54:	490e      	ldr	r1, [pc, #56]	; (1bd90 <bt_rpmsg_open+0x6c>)
   1bd56:	480a      	ldr	r0, [pc, #40]	; (1bd80 <bt_rpmsg_open+0x5c>)
   1bd58:	f7f3 fafa 	bl	f350 <ipc_service_register_endpoint>
	if (err) {
   1bd5c:	4604      	mov	r4, r0
   1bd5e:	b110      	cbz	r0, 1bd66 <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   1bd60:	4b0c      	ldr	r3, [pc, #48]	; (1bd94 <bt_rpmsg_open+0x70>)
   1bd62:	9003      	str	r0, [sp, #12]
   1bd64:	e7e9      	b.n	1bd3a <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   1bd66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1bd6a:	2300      	movs	r3, #0
   1bd6c:	480a      	ldr	r0, [pc, #40]	; (1bd98 <bt_rpmsg_open+0x74>)
   1bd6e:	f004 f92b 	bl	1ffc8 <z_impl_k_sem_take>
	if (err) {
   1bd72:	4604      	mov	r4, r0
   1bd74:	2800      	cmp	r0, #0
   1bd76:	d0e9      	beq.n	1bd4c <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   1bd78:	4b08      	ldr	r3, [pc, #32]	; (1bd9c <bt_rpmsg_open+0x78>)
   1bd7a:	9003      	str	r0, [sp, #12]
   1bd7c:	e7dd      	b.n	1bd3a <bt_rpmsg_open+0x16>
   1bd7e:	bf00      	nop
   1bd80:	0002a448 	.word	0x0002a448
   1bd84:	0002fd8e 	.word	0x0002fd8e
   1bd88:	0002a998 	.word	0x0002a998
   1bd8c:	20008664 	.word	0x20008664
   1bd90:	20021334 	.word	0x20021334
   1bd94:	0002fdbe 	.word	0x0002fdbe
   1bd98:	20008b18 	.word	0x20008b18
   1bd9c:	0002fde2 	.word	0x0002fde2

0001bda0 <hci_ept_recv>:
{
   1bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bda4:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   1bda6:	7800      	ldrb	r0, [r0, #0]
{
   1bda8:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   1bdaa:	2804      	cmp	r0, #4
{
   1bdac:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   1bdae:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1bdb2:	d009      	beq.n	1bdc8 <hci_ept_recv+0x28>
   1bdb4:	2805      	cmp	r0, #5
   1bdb6:	f000 8099 	beq.w	1beec <hci_ept_recv+0x14c>
   1bdba:	2802      	cmp	r0, #2
   1bdbc:	f040 80bd 	bne.w	1bf3a <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   1bdc0:	2b03      	cmp	r3, #3
   1bdc2:	d867      	bhi.n	1be94 <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   1bdc4:	4b63      	ldr	r3, [pc, #396]	; (1bf54 <hci_ept_recv+0x1b4>)
   1bdc6:	e002      	b.n	1bdce <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   1bdc8:	2b01      	cmp	r3, #1
   1bdca:	d80c      	bhi.n	1bde6 <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   1bdcc:	4b62      	ldr	r3, [pc, #392]	; (1bf58 <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   1bdce:	9302      	str	r3, [sp, #8]
   1bdd0:	2300      	movs	r3, #0
   1bdd2:	2201      	movs	r2, #1
   1bdd4:	4618      	mov	r0, r3
   1bdd6:	e9cd 3300 	strd	r3, r3, [sp]
   1bdda:	4960      	ldr	r1, [pc, #384]	; (1bf5c <hci_ept_recv+0x1bc>)
   1bddc:	f00c fc5c 	bl	28698 <z_log_msg_runtime_create.constprop.0>
}
   1bde0:	b009      	add	sp, #36	; 0x24
   1bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1bde6:	7873      	ldrb	r3, [r6, #1]
   1bde8:	2b3e      	cmp	r3, #62	; 0x3e
   1bdea:	d136      	bne.n	1be5a <hci_ept_recv+0xba>
		switch (subevt_type) {
   1bdec:	78f7      	ldrb	r7, [r6, #3]
   1bdee:	1ebb      	subs	r3, r7, #2
   1bdf0:	425f      	negs	r7, r3
   1bdf2:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1bdf4:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1bdf8:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   1bdfa:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1bdfe:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   1be02:	d12f      	bne.n	1be64 <hci_ept_recv+0xc4>
   1be04:	b35f      	cbz	r7, 1be5e <hci_ept_recv+0xbe>
   1be06:	f04f 0800 	mov.w	r8, #0
   1be0a:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1be0e:	f8df b150 	ldr.w	fp, [pc, #336]	; 1bf60 <hci_ept_recv+0x1c0>
   1be12:	f8df a148 	ldr.w	sl, [pc, #328]	; 1bf5c <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1be16:	4642      	mov	r2, r8
   1be18:	464b      	mov	r3, r9
   1be1a:	4639      	mov	r1, r7
   1be1c:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1be20:	f7f5 fb08 	bl	11434 <bt_buf_get_evt>
		if (!buf) {
   1be24:	4604      	mov	r4, r0
   1be26:	b1f8      	cbz	r0, 1be68 <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1be28:	f100 070c 	add.w	r7, r0, #12
   1be2c:	2202      	movs	r2, #2
   1be2e:	a907      	add	r1, sp, #28
   1be30:	4638      	mov	r0, r7
   1be32:	f00c f83e 	bl	27eb2 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1be36:	4638      	mov	r0, r7
   1be38:	f00c f833 	bl	27ea2 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1be3c:	4285      	cmp	r5, r0
   1be3e:	d91e      	bls.n	1be7e <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1be40:	4b48      	ldr	r3, [pc, #288]	; (1bf64 <hci_ept_recv+0x1c4>)
   1be42:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1be46:	9302      	str	r3, [sp, #8]
   1be48:	2300      	movs	r3, #0
   1be4a:	2201      	movs	r2, #1
   1be4c:	4618      	mov	r0, r3
   1be4e:	e9cd 3300 	strd	r3, r3, [sp]
   1be52:	4942      	ldr	r1, [pc, #264]	; (1bf5c <hci_ept_recv+0x1bc>)
   1be54:	f00c fc20 	bl	28698 <z_log_msg_runtime_create.constprop.0>
   1be58:	e03c      	b.n	1bed4 <hci_ept_recv+0x134>
			return false;
   1be5a:	2700      	movs	r7, #0
   1be5c:	e7ca      	b.n	1bdf4 <hci_ept_recv+0x54>
   1be5e:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1be62:	e7d2      	b.n	1be0a <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   1be64:	4b40      	ldr	r3, [pc, #256]	; (1bf68 <hci_ept_recv+0x1c8>)
   1be66:	e7b2      	b.n	1bdce <hci_ept_recv+0x2e>
			if (discardable) {
   1be68:	2f00      	cmp	r7, #0
   1be6a:	d1b9      	bne.n	1bde0 <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1be6c:	463b      	mov	r3, r7
   1be6e:	2202      	movs	r2, #2
   1be70:	4651      	mov	r1, sl
   1be72:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1be76:	9700      	str	r7, [sp, #0]
   1be78:	f00c fc0e 	bl	28698 <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   1be7c:	e7cb      	b.n	1be16 <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1be7e:	462a      	mov	r2, r5
   1be80:	1cf1      	adds	r1, r6, #3
   1be82:	4638      	mov	r0, r7
   1be84:	f00c f815 	bl	27eb2 <net_buf_simple_add_mem>
		bt_recv(buf);
   1be88:	4620      	mov	r0, r4
}
   1be8a:	b009      	add	sp, #36	; 0x24
   1be8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   1be90:	f7f6 bcda 	b.w	12848 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1be94:	2200      	movs	r2, #0
   1be96:	2300      	movs	r3, #0
   1be98:	2003      	movs	r0, #3
   1be9a:	f7f5 fa7d 	bl	11398 <bt_buf_get_rx>
	if (buf) {
   1be9e:	4604      	mov	r4, r0
   1bea0:	b1e0      	cbz	r0, 1bedc <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1bea2:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1bea6:	f100 070c 	add.w	r7, r0, #12
   1beaa:	2204      	movs	r2, #4
   1beac:	4638      	mov	r0, r7
   1beae:	a907      	add	r1, sp, #28
   1beb0:	9307      	str	r3, [sp, #28]
   1beb2:	f00b fffe 	bl	27eb2 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1beb6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1beba:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1bebc:	429d      	cmp	r5, r3
   1bebe:	d034      	beq.n	1bf2a <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   1bec0:	4b2a      	ldr	r3, [pc, #168]	; (1bf6c <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   1bec2:	9302      	str	r3, [sp, #8]
   1bec4:	2300      	movs	r3, #0
   1bec6:	2201      	movs	r2, #1
   1bec8:	4618      	mov	r0, r3
   1beca:	e9cd 3300 	strd	r3, r3, [sp]
   1bece:	4923      	ldr	r1, [pc, #140]	; (1bf5c <hci_ept_recv+0x1bc>)
   1bed0:	f00c fbe2 	bl	28698 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1bed4:	4620      	mov	r0, r4
   1bed6:	f7fd fad5 	bl	19484 <net_buf_unref>
	if (buf) {
   1beda:	e781      	b.n	1bde0 <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   1bedc:	4b24      	ldr	r3, [pc, #144]	; (1bf70 <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   1bede:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1bee2:	2201      	movs	r2, #1
   1bee4:	4623      	mov	r3, r4
   1bee6:	491d      	ldr	r1, [pc, #116]	; (1bf5c <hci_ept_recv+0x1bc>)
   1bee8:	9400      	str	r4, [sp, #0]
   1beea:	e777      	b.n	1bddc <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   1beec:	2b03      	cmp	r3, #3
   1beee:	d801      	bhi.n	1bef4 <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   1bef0:	4b20      	ldr	r3, [pc, #128]	; (1bf74 <hci_ept_recv+0x1d4>)
   1bef2:	e76c      	b.n	1bdce <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1bef4:	2200      	movs	r2, #0
   1bef6:	2300      	movs	r3, #0
   1bef8:	f7f5 fa4e 	bl	11398 <bt_buf_get_rx>
	if (buf) {
   1befc:	4604      	mov	r4, r0
   1befe:	b190      	cbz	r0, 1bf26 <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1bf00:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1bf04:	f100 070c 	add.w	r7, r0, #12
   1bf08:	2204      	movs	r2, #4
   1bf0a:	4638      	mov	r0, r7
   1bf0c:	a907      	add	r1, sp, #28
   1bf0e:	9307      	str	r3, [sp, #28]
   1bf10:	f00b ffcf 	bl	27eb2 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1bf14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1bf18:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1bf1a:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1bf1e:	429d      	cmp	r5, r3
   1bf20:	d003      	beq.n	1bf2a <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   1bf22:	4b15      	ldr	r3, [pc, #84]	; (1bf78 <hci_ept_recv+0x1d8>)
   1bf24:	e7cd      	b.n	1bec2 <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   1bf26:	4b15      	ldr	r3, [pc, #84]	; (1bf7c <hci_ept_recv+0x1dc>)
   1bf28:	e7d9      	b.n	1bede <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   1bf2a:	4638      	mov	r0, r7
   1bf2c:	f00b ffb9 	bl	27ea2 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1bf30:	4285      	cmp	r5, r0
   1bf32:	d885      	bhi.n	1be40 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bf34:	462a      	mov	r2, r5
   1bf36:	1d71      	adds	r1, r6, #5
   1bf38:	e7a3      	b.n	1be82 <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1bf3a:	4b11      	ldr	r3, [pc, #68]	; (1bf80 <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   1bf3c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1bf3e:	9302      	str	r3, [sp, #8]
   1bf40:	2300      	movs	r3, #0
   1bf42:	2201      	movs	r2, #1
   1bf44:	4618      	mov	r0, r3
   1bf46:	e9cd 3300 	strd	r3, r3, [sp]
   1bf4a:	4904      	ldr	r1, [pc, #16]	; (1bf5c <hci_ept_recv+0x1bc>)
   1bf4c:	f00c fba4 	bl	28698 <z_log_msg_runtime_create.constprop.0>
   1bf50:	e746      	b.n	1bde0 <hci_ept_recv+0x40>
   1bf52:	bf00      	nop
   1bf54:	0002fe9f 	.word	0x0002fe9f
   1bf58:	0002fe02 	.word	0x0002fe02
   1bf5c:	0002a998 	.word	0x0002a998
   1bf60:	0002fe47 	.word	0x0002fe47
   1bf64:	0002fe7c 	.word	0x0002fe7c
   1bf68:	0002fe23 	.word	0x0002fe23
   1bf6c:	0002fed8 	.word	0x0002fed8
   1bf70:	0002febe 	.word	0x0002febe
   1bf74:	0002fefa 	.word	0x0002fefa
   1bf78:	0002ff33 	.word	0x0002ff33
   1bf7c:	0002ff19 	.word	0x0002ff19
   1bf80:	0002ff55 	.word	0x0002ff55

0001bf84 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1bf84:	2301      	movs	r3, #1
   1bf86:	4083      	lsls	r3, r0
{
   1bf88:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1bf8a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bf8c:	4a0b      	ldr	r2, [pc, #44]	; (1bfbc <compare_int_lock+0x38>)
   1bf8e:	e8d2 1fef 	ldaex	r1, [r2]
   1bf92:	ea01 0504 	and.w	r5, r1, r4
   1bf96:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1bf9a:	2e00      	cmp	r6, #0
   1bf9c:	d1f7      	bne.n	1bf8e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bf9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bfa2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1bfa4:	4806      	ldr	r0, [pc, #24]	; (1bfc0 <compare_int_lock+0x3c>)
   1bfa6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1bfaa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bfae:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1bfb2:	420b      	tst	r3, r1
}
   1bfb4:	bf14      	ite	ne
   1bfb6:	2001      	movne	r0, #1
   1bfb8:	2000      	moveq	r0, #0
   1bfba:	bd70      	pop	{r4, r5, r6, pc}
   1bfbc:	20021344 	.word	0x20021344
   1bfc0:	40015000 	.word	0x40015000

0001bfc4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bfc6:	491b      	ldr	r1, [pc, #108]	; (1c034 <sys_clock_timeout_handler+0x70>)
{
   1bfc8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1bfca:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bfce:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1bfd0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1bfd4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bfd8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1bfda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1bfde:	d30f      	bcc.n	1c000 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1bfe0:	f006 fa24 	bl	2242c <sys_clock_announce>
    return p_reg->CC[ch];
   1bfe4:	00a3      	lsls	r3, r4, #2
   1bfe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bfea:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1bfee:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1bff2:	4295      	cmp	r5, r2
   1bff4:	d11d      	bne.n	1c032 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1bff6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1bffa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1bffe:	e012      	b.n	1c026 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1c000:	4b0d      	ldr	r3, [pc, #52]	; (1c038 <sys_clock_timeout_handler+0x74>)
   1c002:	681b      	ldr	r3, [r3, #0]
   1c004:	0a1a      	lsrs	r2, r3, #8
   1c006:	061b      	lsls	r3, r3, #24
   1c008:	195e      	adds	r6, r3, r5
   1c00a:	4b0c      	ldr	r3, [pc, #48]	; (1c03c <sys_clock_timeout_handler+0x78>)
   1c00c:	f142 0700 	adc.w	r7, r2, #0
   1c010:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1c014:	f006 fa0a 	bl	2242c <sys_clock_announce>
    return p_reg->CC[ch];
   1c018:	4a09      	ldr	r2, [pc, #36]	; (1c040 <sys_clock_timeout_handler+0x7c>)
   1c01a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1c01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1c022:	429d      	cmp	r5, r3
   1c024:	d105      	bne.n	1c032 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1c026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1c02a:	4a05      	ldr	r2, [pc, #20]	; (1c040 <sys_clock_timeout_handler+0x7c>)
   1c02c:	40a3      	lsls	r3, r4
   1c02e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1c032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c034:	20009bf8 	.word	0x20009bf8
   1c038:	20021348 	.word	0x20021348
   1c03c:	20009c00 	.word	0x20009c00
   1c040:	40015000 	.word	0x40015000

0001c044 <compare_int_unlock>:
	if (key) {
   1c044:	b1d9      	cbz	r1, 1c07e <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1c046:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c048:	4a0d      	ldr	r2, [pc, #52]	; (1c080 <compare_int_unlock+0x3c>)
   1c04a:	4083      	lsls	r3, r0
   1c04c:	e8d2 cfef 	ldaex	ip, [r2]
   1c050:	ea4c 0c03 	orr.w	ip, ip, r3
   1c054:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1c058:	2900      	cmp	r1, #0
   1c05a:	d1f7      	bne.n	1c04c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1c05c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1c060:	4a08      	ldr	r2, [pc, #32]	; (1c084 <compare_int_unlock+0x40>)
   1c062:	4083      	lsls	r3, r0
   1c064:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c068:	4b07      	ldr	r3, [pc, #28]	; (1c088 <compare_int_unlock+0x44>)
   1c06a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1c06e:	40c3      	lsrs	r3, r0
   1c070:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c072:	bf42      	ittt	mi
   1c074:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1c078:	4b04      	ldrmi	r3, [pc, #16]	; (1c08c <compare_int_unlock+0x48>)
   1c07a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1c07e:	4770      	bx	lr
   1c080:	20021344 	.word	0x20021344
   1c084:	40015000 	.word	0x40015000
   1c088:	2002133c 	.word	0x2002133c
   1c08c:	e000e100 	.word	0xe000e100

0001c090 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1c090:	2801      	cmp	r0, #1
{
   1c092:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1c094:	d909      	bls.n	1c0aa <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1c096:	4907      	ldr	r1, [pc, #28]	; (1c0b4 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1c098:	4807      	ldr	r0, [pc, #28]	; (1c0b8 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1c09a:	237c      	movs	r3, #124	; 0x7c
   1c09c:	4a07      	ldr	r2, [pc, #28]	; (1c0bc <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1c09e:	f008 ff1a 	bl	24ed6 <assert_print>
   1c0a2:	217c      	movs	r1, #124	; 0x7c
   1c0a4:	4805      	ldr	r0, [pc, #20]	; (1c0bc <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1c0a6:	f008 ff0f 	bl	24ec8 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1c0aa:	0083      	lsls	r3, r0, #2
}
   1c0ac:	4804      	ldr	r0, [pc, #16]	; (1c0c0 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1c0ae:	4418      	add	r0, r3
   1c0b0:	bd08      	pop	{r3, pc}
   1c0b2:	bf00      	nop
   1c0b4:	0002ffd0 	.word	0x0002ffd0
   1c0b8:	0002b939 	.word	0x0002b939
   1c0bc:	0002ff9f 	.word	0x0002ff9f
   1c0c0:	40015140 	.word	0x40015140

0001c0c4 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1c0c4:	2801      	cmp	r0, #1
{
   1c0c6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1c0c8:	d909      	bls.n	1c0de <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1c0ca:	4907      	ldr	r1, [pc, #28]	; (1c0e8 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1c0cc:	4807      	ldr	r0, [pc, #28]	; (1c0ec <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1c0ce:	2383      	movs	r3, #131	; 0x83
   1c0d0:	4a07      	ldr	r2, [pc, #28]	; (1c0f0 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1c0d2:	f008 ff00 	bl	24ed6 <assert_print>
   1c0d6:	2183      	movs	r1, #131	; 0x83
   1c0d8:	4805      	ldr	r0, [pc, #20]	; (1c0f0 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1c0da:	f008 fef5 	bl	24ec8 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1c0de:	2800      	cmp	r0, #0
}
   1c0e0:	4804      	ldr	r0, [pc, #16]	; (1c0f4 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1c0e2:	bf08      	it	eq
   1c0e4:	2000      	moveq	r0, #0
   1c0e6:	bd08      	pop	{r3, pc}
   1c0e8:	0002ffd0 	.word	0x0002ffd0
   1c0ec:	0002b939 	.word	0x0002b939
   1c0f0:	0002ff9f 	.word	0x0002ff9f
   1c0f4:	40015044 	.word	0x40015044

0001c0f8 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1c0f8:	2801      	cmp	r0, #1
{
   1c0fa:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1c0fc:	d909      	bls.n	1c112 <z_nrf_rtc_timer_compare_read+0x1a>
   1c0fe:	4908      	ldr	r1, [pc, #32]	; (1c120 <z_nrf_rtc_timer_compare_read+0x28>)
   1c100:	4808      	ldr	r0, [pc, #32]	; (1c124 <z_nrf_rtc_timer_compare_read+0x2c>)
   1c102:	23b9      	movs	r3, #185	; 0xb9
   1c104:	4a08      	ldr	r2, [pc, #32]	; (1c128 <z_nrf_rtc_timer_compare_read+0x30>)
   1c106:	f008 fee6 	bl	24ed6 <assert_print>
   1c10a:	21b9      	movs	r1, #185	; 0xb9
   1c10c:	4806      	ldr	r0, [pc, #24]	; (1c128 <z_nrf_rtc_timer_compare_read+0x30>)
   1c10e:	f008 fedb 	bl	24ec8 <assert_post_action>
    return p_reg->CC[ch];
   1c112:	4b06      	ldr	r3, [pc, #24]	; (1c12c <z_nrf_rtc_timer_compare_read+0x34>)
   1c114:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c118:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1c11c:	bd08      	pop	{r3, pc}
   1c11e:	bf00      	nop
   1c120:	0002ffd0 	.word	0x0002ffd0
   1c124:	0002b939 	.word	0x0002b939
   1c128:	0002ff9f 	.word	0x0002ff9f
   1c12c:	40015000 	.word	0x40015000

0001c130 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1c130:	4b0d      	ldr	r3, [pc, #52]	; (1c168 <z_nrf_rtc_timer_read+0x38>)
   1c132:	6818      	ldr	r0, [r3, #0]
   1c134:	0a01      	lsrs	r1, r0, #8
   1c136:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1c138:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1c13c:	4b0b      	ldr	r3, [pc, #44]	; (1c16c <z_nrf_rtc_timer_read+0x3c>)
   1c13e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1c142:	1818      	adds	r0, r3, r0
   1c144:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1c148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1c14c:	d20a      	bcs.n	1c164 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1c14e:	4b08      	ldr	r3, [pc, #32]	; (1c170 <z_nrf_rtc_timer_read+0x40>)
   1c150:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c154:	4290      	cmp	r0, r2
   1c156:	eb71 0303 	sbcs.w	r3, r1, r3
   1c15a:	d203      	bcs.n	1c164 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1c15c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1c160:	f141 0100 	adc.w	r1, r1, #0
}
   1c164:	4770      	bx	lr
   1c166:	bf00      	nop
   1c168:	20021348 	.word	0x20021348
   1c16c:	40015000 	.word	0x40015000
   1c170:	20009c00 	.word	0x20009c00

0001c174 <compare_set>:
{
   1c174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c178:	b085      	sub	sp, #20
   1c17a:	4614      	mov	r4, r2
   1c17c:	461d      	mov	r5, r3
   1c17e:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1c180:	f7ff ff00 	bl	1bf84 <compare_int_lock>
   1c184:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1c186:	f7ff ffd3 	bl	1c130 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1c18a:	42a0      	cmp	r0, r4
   1c18c:	eb71 0305 	sbcs.w	r3, r1, r5
   1c190:	f080 8086 	bcs.w	1c2a0 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1c194:	4b49      	ldr	r3, [pc, #292]	; (1c2bc <compare_set+0x148>)
   1c196:	1a20      	subs	r0, r4, r0
   1c198:	eb65 0101 	sbc.w	r1, r5, r1
   1c19c:	4298      	cmp	r0, r3
   1c19e:	f171 0100 	sbcs.w	r1, r1, #0
   1c1a2:	f080 8088 	bcs.w	1c2b6 <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1c1a6:	4b46      	ldr	r3, [pc, #280]	; (1c2c0 <compare_set+0x14c>)
   1c1a8:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1c1ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1c1b0:	429d      	cmp	r5, r3
   1c1b2:	bf08      	it	eq
   1c1b4:	4294      	cmpeq	r4, r2
   1c1b6:	d05e      	beq.n	1c276 <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1c1b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1c1bc:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1c1c0:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1c1c2:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1c1c6:	f06f 0101 	mvn.w	r1, #1
   1c1ca:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1c1ce:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1c1d2:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1c1d6:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1c1da:	40bb      	lsls	r3, r7
   1c1dc:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c1e0:	fa1f f888 	uxth.w	r8, r8
   1c1e4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1c1e8:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1c1ea:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1c1ee:	4b35      	ldr	r3, [pc, #212]	; (1c2c4 <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c1f0:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1c1f4:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1c1f8:	eba0 000a 	sub.w	r0, r0, sl
   1c1fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1c200:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1c204:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1c206:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1c20a:	d107      	bne.n	1c21c <compare_set+0xa8>
   1c20c:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1c20e:	2013      	movs	r0, #19
   1c210:	f00d fabe 	bl	29790 <z_impl_k_busy_wait>
   1c214:	f06f 0101 	mvn.w	r1, #1
   1c218:	4b2a      	ldr	r3, [pc, #168]	; (1c2c4 <compare_set+0x150>)
   1c21a:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1c21c:	eba1 000a 	sub.w	r0, r1, sl
   1c220:	4430      	add	r0, r6
   1c222:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1c226:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c22a:	f04f 0000 	mov.w	r0, #0
   1c22e:	f8c8 0000 	str.w	r0, [r8]
   1c232:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1c236:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1c238:	bf88      	it	hi
   1c23a:	eb0a 060b 	addhi.w	r6, sl, fp
   1c23e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1c242:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1c246:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1c24a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1c24e:	bf88      	it	hi
   1c250:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1c254:	4582      	cmp	sl, r0
   1c256:	d006      	beq.n	1c266 <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1c258:	1a08      	subs	r0, r1, r0
   1c25a:	4430      	add	r0, r6
   1c25c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1c260:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c264:	d81a      	bhi.n	1c29c <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1c266:	1ab6      	subs	r6, r6, r2
   1c268:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1c26c:	1936      	adds	r6, r6, r4
   1c26e:	f145 0300 	adc.w	r3, r5, #0
   1c272:	4634      	mov	r4, r6
   1c274:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1c276:	4912      	ldr	r1, [pc, #72]	; (1c2c0 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1c278:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1c27a:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1c27e:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1c282:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1c284:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1c286:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1c288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c28a:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1c28c:	4638      	mov	r0, r7
   1c28e:	9901      	ldr	r1, [sp, #4]
   1c290:	f7ff fed8 	bl	1c044 <compare_int_unlock>
}
   1c294:	4620      	mov	r0, r4
   1c296:	b005      	add	sp, #20
   1c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c29c:	4630      	mov	r0, r6
   1c29e:	e7a9      	b.n	1c1f4 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1c2a0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c2a2:	4a09      	ldr	r2, [pc, #36]	; (1c2c8 <compare_set+0x154>)
   1c2a4:	40bb      	lsls	r3, r7
   1c2a6:	e8d2 0fef 	ldaex	r0, [r2]
   1c2aa:	4318      	orrs	r0, r3
   1c2ac:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1c2b0:	2900      	cmp	r1, #0
   1c2b2:	d0e0      	beq.n	1c276 <compare_set+0x102>
   1c2b4:	e7f7      	b.n	1c2a6 <compare_set+0x132>
			return -EINVAL;
   1c2b6:	f06f 0415 	mvn.w	r4, #21
   1c2ba:	e7e7      	b.n	1c28c <compare_set+0x118>
   1c2bc:	01000001 	.word	0x01000001
   1c2c0:	20009bd8 	.word	0x20009bd8
   1c2c4:	40015000 	.word	0x40015000
   1c2c8:	2002133c 	.word	0x2002133c

0001c2cc <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c2cc:	2801      	cmp	r0, #1
{
   1c2ce:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c2d0:	d00b      	beq.n	1c2ea <z_nrf_rtc_timer_set+0x1e>
   1c2d2:	4908      	ldr	r1, [pc, #32]	; (1c2f4 <z_nrf_rtc_timer_set+0x28>)
   1c2d4:	4808      	ldr	r0, [pc, #32]	; (1c2f8 <z_nrf_rtc_timer_set+0x2c>)
   1c2d6:	f240 1353 	movw	r3, #339	; 0x153
   1c2da:	4a08      	ldr	r2, [pc, #32]	; (1c2fc <z_nrf_rtc_timer_set+0x30>)
   1c2dc:	f008 fdfb 	bl	24ed6 <assert_print>
   1c2e0:	f240 1153 	movw	r1, #339	; 0x153
   1c2e4:	4805      	ldr	r0, [pc, #20]	; (1c2fc <z_nrf_rtc_timer_set+0x30>)
   1c2e6:	f008 fdef 	bl	24ec8 <assert_post_action>
}
   1c2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1c2ee:	f7ff bf41 	b.w	1c174 <compare_set>
   1c2f2:	bf00      	nop
   1c2f4:	0002ffec 	.word	0x0002ffec
   1c2f8:	0002b939 	.word	0x0002b939
   1c2fc:	0002ff9f 	.word	0x0002ff9f

0001c300 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1c300:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1c302:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1c306:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c308:	f04f 30ff 	mov.w	r0, #4294967295
   1c30c:	f04f 31ff 	mov.w	r1, #4294967295
   1c310:	4c19      	ldr	r4, [pc, #100]	; (1c378 <sys_clock_driver_init+0x78>)
   1c312:	4b1a      	ldr	r3, [pc, #104]	; (1c37c <sys_clock_driver_init+0x7c>)
   1c314:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1c318:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1c31c:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1c320:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1c324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1c328:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c32a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1c32e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1c332:	4b13      	ldr	r3, [pc, #76]	; (1c380 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1c334:	2101      	movs	r1, #1
   1c336:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1c33a:	2015      	movs	r0, #21
   1c33c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1c340:	462a      	mov	r2, r5
   1c342:	f7f3 ffa5 	bl	10290 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1c346:	2015      	movs	r0, #21
   1c348:	f7f3 ff72 	bl	10230 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c34c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1c34e:	2203      	movs	r2, #3
   1c350:	60a3      	str	r3, [r4, #8]
   1c352:	6023      	str	r3, [r4, #0]
   1c354:	4b0b      	ldr	r3, [pc, #44]	; (1c384 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1c356:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1c358:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1c35a:	4b0b      	ldr	r3, [pc, #44]	; (1c388 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1c35c:	4a0b      	ldr	r2, [pc, #44]	; (1c38c <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1c35e:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1c360:	4b0b      	ldr	r3, [pc, #44]	; (1c390 <sys_clock_driver_init+0x90>)
   1c362:	9501      	str	r5, [sp, #4]
   1c364:	9300      	str	r3, [sp, #0]
   1c366:	2300      	movs	r3, #0
   1c368:	f7ff ff04 	bl	1c174 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1c36c:	4630      	mov	r0, r6
   1c36e:	f7fd fd83 	bl	19e78 <z_nrf_clock_control_lf_on>

	return 0;
}
   1c372:	4628      	mov	r0, r5
   1c374:	b002      	add	sp, #8
   1c376:	bd70      	pop	{r4, r5, r6, pc}
   1c378:	40015000 	.word	0x40015000
   1c37c:	20009bd8 	.word	0x20009bd8
   1c380:	e000e100 	.word	0xe000e100
   1c384:	20021344 	.word	0x20021344
   1c388:	20021340 	.word	0x20021340
   1c38c:	007fffff 	.word	0x007fffff
   1c390:	0001bfc5 	.word	0x0001bfc5

0001c394 <rtc_nrf_isr>:
{
   1c394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1c398:	4b3f      	ldr	r3, [pc, #252]	; (1c498 <rtc_nrf_isr+0x104>)
   1c39a:	b085      	sub	sp, #20
   1c39c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1c3a0:	0792      	lsls	r2, r2, #30
   1c3a2:	d50b      	bpl.n	1c3bc <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c3a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1c3a8:	b142      	cbz	r2, 1c3bc <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c3aa:	2200      	movs	r2, #0
   1c3ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1c3b0:	4a3a      	ldr	r2, [pc, #232]	; (1c49c <rtc_nrf_isr+0x108>)
   1c3b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1c3b6:	6813      	ldr	r3, [r2, #0]
   1c3b8:	3301      	adds	r3, #1
   1c3ba:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c3bc:	4d38      	ldr	r5, [pc, #224]	; (1c4a0 <rtc_nrf_isr+0x10c>)
   1c3be:	2400      	movs	r4, #0
   1c3c0:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1c3c2:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1c3c6:	4e34      	ldr	r6, [pc, #208]	; (1c498 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1c3c8:	f04f 0320 	mov.w	r3, #32
   1c3cc:	f3ef 8211 	mrs	r2, BASEPRI
   1c3d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3d4:	f3bf 8f6f 	isb	sy
   1c3d8:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1c3dc:	fa0b f904 	lsl.w	r9, fp, r4
   1c3e0:	ea19 0f03 	tst.w	r9, r3
   1c3e4:	d10a      	bne.n	1c3fc <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1c3e6:	f382 8811 	msr	BASEPRI, r2
   1c3ea:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c3ee:	3510      	adds	r5, #16
   1c3f0:	b114      	cbz	r4, 1c3f8 <rtc_nrf_isr+0x64>
}
   1c3f2:	b005      	add	sp, #20
   1c3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c3f8:	2401      	movs	r4, #1
   1c3fa:	e7e5      	b.n	1c3c8 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1c3fc:	2301      	movs	r3, #1
   1c3fe:	40a3      	lsls	r3, r4
   1c400:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c402:	4928      	ldr	r1, [pc, #160]	; (1c4a4 <rtc_nrf_isr+0x110>)
   1c404:	e8d1 0fef 	ldaex	r0, [r1]
   1c408:	ea00 0c03 	and.w	ip, r0, r3
   1c40c:	e8c1 cfee 	stlex	lr, ip, [r1]
   1c410:	f1be 0f00 	cmp.w	lr, #0
   1c414:	d1f6      	bne.n	1c404 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c416:	4b24      	ldr	r3, [pc, #144]	; (1c4a8 <rtc_nrf_isr+0x114>)
   1c418:	00a1      	lsls	r1, r4, #2
   1c41a:	b918      	cbnz	r0, 1c424 <rtc_nrf_isr+0x90>
   1c41c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1c420:	2800      	cmp	r0, #0
   1c422:	d0e0      	beq.n	1c3e6 <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c424:	f04f 0a00 	mov.w	sl, #0
   1c428:	f841 a003 	str.w	sl, [r1, r3]
   1c42c:	58cb      	ldr	r3, [r1, r3]
   1c42e:	f382 8811 	msr	BASEPRI, r2
   1c432:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1c436:	f7ff fe7b 	bl	1c130 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1c43a:	f04f 0320 	mov.w	r3, #32
   1c43e:	f3ef 8c11 	mrs	ip, BASEPRI
   1c442:	f383 8812 	msr	BASEPRI_MAX, r3
   1c446:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1c44a:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1c44e:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1c452:	4290      	cmp	r0, r2
   1c454:	4199      	sbcs	r1, r3
   1c456:	d204      	bcs.n	1c462 <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1c458:	f38c 8811 	msr	BASEPRI, ip
   1c45c:	f3bf 8f6f 	isb	sy
		if (handler) {
   1c460:	e7c5      	b.n	1c3ee <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1c462:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c466:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1c46a:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c46c:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1c470:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c474:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1c478:	4907      	ldr	r1, [pc, #28]	; (1c498 <rtc_nrf_isr+0x104>)
   1c47a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1c47e:	f38c 8811 	msr	BASEPRI, ip
   1c482:	f3bf 8f6f 	isb	sy
		if (handler) {
   1c486:	f1b8 0f00 	cmp.w	r8, #0
   1c48a:	d0b0      	beq.n	1c3ee <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1c48c:	9903      	ldr	r1, [sp, #12]
   1c48e:	4620      	mov	r0, r4
   1c490:	9100      	str	r1, [sp, #0]
   1c492:	47c0      	blx	r8
   1c494:	e7ab      	b.n	1c3ee <rtc_nrf_isr+0x5a>
   1c496:	bf00      	nop
   1c498:	40015000 	.word	0x40015000
   1c49c:	20021348 	.word	0x20021348
   1c4a0:	20009bd8 	.word	0x20009bd8
   1c4a4:	2002133c 	.word	0x2002133c
   1c4a8:	40015140 	.word	0x40015140

0001c4ac <z_nrf_rtc_timer_chan_alloc>:
{
   1c4ac:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1c4ae:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1c4b0:	4b0c      	ldr	r3, [pc, #48]	; (1c4e4 <z_nrf_rtc_timer_chan_alloc+0x38>)
   1c4b2:	6818      	ldr	r0, [r3, #0]
   1c4b4:	b190      	cbz	r0, 1c4dc <z_nrf_rtc_timer_chan_alloc+0x30>
   1c4b6:	fab0 f080 	clz	r0, r0
   1c4ba:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1c4be:	fa04 f100 	lsl.w	r1, r4, r0
   1c4c2:	43c9      	mvns	r1, r1
   1c4c4:	e8d3 2fef 	ldaex	r2, [r3]
   1c4c8:	ea02 0501 	and.w	r5, r2, r1
   1c4cc:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1c4d0:	2e00      	cmp	r6, #0
   1c4d2:	d1f7      	bne.n	1c4c4 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1c4d4:	40c2      	lsrs	r2, r0
   1c4d6:	07d2      	lsls	r2, r2, #31
   1c4d8:	d5eb      	bpl.n	1c4b2 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1c4da:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1c4dc:	f06f 000b 	mvn.w	r0, #11
   1c4e0:	e7fb      	b.n	1c4da <z_nrf_rtc_timer_chan_alloc+0x2e>
   1c4e2:	bf00      	nop
   1c4e4:	20021340 	.word	0x20021340

0001c4e8 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c4e8:	2801      	cmp	r0, #1
{
   1c4ea:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c4ec:	d00b      	beq.n	1c506 <z_nrf_rtc_timer_chan_free+0x1e>
   1c4ee:	490b      	ldr	r1, [pc, #44]	; (1c51c <z_nrf_rtc_timer_chan_free+0x34>)
   1c4f0:	480b      	ldr	r0, [pc, #44]	; (1c520 <z_nrf_rtc_timer_chan_free+0x38>)
   1c4f2:	f240 2321 	movw	r3, #545	; 0x221
   1c4f6:	4a0b      	ldr	r2, [pc, #44]	; (1c524 <z_nrf_rtc_timer_chan_free+0x3c>)
   1c4f8:	f008 fced 	bl	24ed6 <assert_print>
   1c4fc:	f240 2121 	movw	r1, #545	; 0x221
   1c500:	4808      	ldr	r0, [pc, #32]	; (1c524 <z_nrf_rtc_timer_chan_free+0x3c>)
   1c502:	f008 fce1 	bl	24ec8 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c506:	4b08      	ldr	r3, [pc, #32]	; (1c528 <z_nrf_rtc_timer_chan_free+0x40>)
   1c508:	e8d3 1fef 	ldaex	r1, [r3]
   1c50c:	f041 0102 	orr.w	r1, r1, #2
   1c510:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1c514:	2a00      	cmp	r2, #0
   1c516:	d1f7      	bne.n	1c508 <z_nrf_rtc_timer_chan_free+0x20>
}
   1c518:	bd08      	pop	{r3, pc}
   1c51a:	bf00      	nop
   1c51c:	0002ffec 	.word	0x0002ffec
   1c520:	0002b939 	.word	0x0002b939
   1c524:	0002ff9f 	.word	0x0002ff9f
   1c528:	20021340 	.word	0x20021340

0001c52c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c52c:	1c43      	adds	r3, r0, #1
{
   1c52e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c530:	d020      	beq.n	1c574 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1c532:	2801      	cmp	r0, #1
   1c534:	dd20      	ble.n	1c578 <sys_clock_set_timeout+0x4c>
   1c536:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c53a:	da1f      	bge.n	1c57c <sys_clock_set_timeout+0x50>
   1c53c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1c53e:	f7ff fdf7 	bl	1c130 <z_nrf_rtc_timer_read>
   1c542:	4b0f      	ldr	r3, [pc, #60]	; (1c580 <sys_clock_set_timeout+0x54>)
   1c544:	e9d3 1300 	ldrd	r1, r3, [r3]
   1c548:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1c54a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1c54e:	bf28      	it	cs
   1c550:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1c552:	480c      	ldr	r0, [pc, #48]	; (1c584 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1c554:	3201      	adds	r2, #1
   1c556:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1c558:	4282      	cmp	r2, r0
   1c55a:	bf28      	it	cs
   1c55c:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1c55e:	2000      	movs	r0, #0
   1c560:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1c562:	4909      	ldr	r1, [pc, #36]	; (1c588 <sys_clock_set_timeout+0x5c>)
   1c564:	9001      	str	r0, [sp, #4]
   1c566:	9100      	str	r1, [sp, #0]
   1c568:	f143 0300 	adc.w	r3, r3, #0
   1c56c:	f7ff fe02 	bl	1c174 <compare_set>
}
   1c570:	b002      	add	sp, #8
   1c572:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c574:	4803      	ldr	r0, [pc, #12]	; (1c584 <sys_clock_set_timeout+0x58>)
   1c576:	e7e1      	b.n	1c53c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1c578:	2400      	movs	r4, #0
   1c57a:	e7e0      	b.n	1c53e <sys_clock_set_timeout+0x12>
   1c57c:	4c01      	ldr	r4, [pc, #4]	; (1c584 <sys_clock_set_timeout+0x58>)
   1c57e:	e7de      	b.n	1c53e <sys_clock_set_timeout+0x12>
   1c580:	20009bf8 	.word	0x20009bf8
   1c584:	007fffff 	.word	0x007fffff
   1c588:	0001bfc5 	.word	0x0001bfc5

0001c58c <sys_clock_elapsed>:
{
   1c58c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1c58e:	f7ff fdcf 	bl	1c130 <z_nrf_rtc_timer_read>
   1c592:	4b02      	ldr	r3, [pc, #8]	; (1c59c <sys_clock_elapsed+0x10>)
   1c594:	681b      	ldr	r3, [r3, #0]
}
   1c596:	1ac0      	subs	r0, r0, r3
   1c598:	bd08      	pop	{r3, pc}
   1c59a:	bf00      	nop
   1c59c:	20009bf8 	.word	0x20009bf8

0001c5a0 <nrf_gpio_pin_port_decode>:
{
   1c5a0:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c5a2:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1c5a4:	095a      	lsrs	r2, r3, #5
   1c5a6:	d00d      	beq.n	1c5c4 <nrf_gpio_pin_port_decode+0x24>
   1c5a8:	2a01      	cmp	r2, #1
   1c5aa:	d013      	beq.n	1c5d4 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c5ac:	490e      	ldr	r1, [pc, #56]	; (1c5e8 <nrf_gpio_pin_port_decode+0x48>)
   1c5ae:	480f      	ldr	r0, [pc, #60]	; (1c5ec <nrf_gpio_pin_port_decode+0x4c>)
   1c5b0:	f240 2347 	movw	r3, #583	; 0x247
   1c5b4:	4a0e      	ldr	r2, [pc, #56]	; (1c5f0 <nrf_gpio_pin_port_decode+0x50>)
   1c5b6:	f008 fc8e 	bl	24ed6 <assert_print>
   1c5ba:	f240 2147 	movw	r1, #583	; 0x247
   1c5be:	480c      	ldr	r0, [pc, #48]	; (1c5f0 <nrf_gpio_pin_port_decode+0x50>)
   1c5c0:	f008 fc82 	bl	24ec8 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1c5c4:	f04f 32ff 	mov.w	r2, #4294967295
   1c5c8:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c5cc:	07d9      	lsls	r1, r3, #31
   1c5ce:	d5ed      	bpl.n	1c5ac <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1c5d0:	4808      	ldr	r0, [pc, #32]	; (1c5f4 <nrf_gpio_pin_port_decode+0x54>)
   1c5d2:	e008      	b.n	1c5e6 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1c5d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1c5d8:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1c5dc:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c5de:	07d2      	lsls	r2, r2, #31
   1c5e0:	d5e4      	bpl.n	1c5ac <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1c5e2:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1c5e4:	4804      	ldr	r0, [pc, #16]	; (1c5f8 <nrf_gpio_pin_port_decode+0x58>)
}
   1c5e6:	bd08      	pop	{r3, pc}
   1c5e8:	0002f8bf 	.word	0x0002f8bf
   1c5ec:	0002b939 	.word	0x0002b939
   1c5f0:	0002f88c 	.word	0x0002f88c
   1c5f4:	40842500 	.word	0x40842500
   1c5f8:	40842800 	.word	0x40842800

0001c5fc <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1c5fc:	b510      	push	{r4, lr}
   1c5fe:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1c600:	6902      	ldr	r2, [r0, #16]
{
   1c602:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   1c604:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1c608:	4924      	ldr	r1, [pc, #144]	; (1c69c <mbox_nrf_init+0xa0>)
   1c60a:	2000      	movs	r0, #0
   1c60c:	f001 f812 	bl	1d634 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c610:	2200      	movs	r2, #0
   1c612:	2101      	movs	r1, #1
   1c614:	202a      	movs	r0, #42	; 0x2a
   1c616:	f7f3 fe3b 	bl	10290 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1c61a:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1c61c:	2284      	movs	r2, #132	; 0x84
   1c61e:	2100      	movs	r1, #0
   1c620:	a805      	add	r0, sp, #20
   1c622:	f00d f9f8 	bl	29a16 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1c626:	6863      	ldr	r3, [r4, #4]
   1c628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1c62c:	d309      	bcc.n	1c642 <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1c62e:	4b1c      	ldr	r3, [pc, #112]	; (1c6a0 <mbox_nrf_init+0xa4>)
   1c630:	2202      	movs	r2, #2
   1c632:	9302      	str	r3, [sp, #8]
   1c634:	2300      	movs	r3, #0
   1c636:	491b      	ldr	r1, [pc, #108]	; (1c6a4 <mbox_nrf_init+0xa8>)
   1c638:	4618      	mov	r0, r3
   1c63a:	e9cd 3300 	strd	r3, r3, [sp]
   1c63e:	f00c f939 	bl	288b4 <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1c642:	6823      	ldr	r3, [r4, #0]
   1c644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1c648:	d309      	bcc.n	1c65e <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1c64a:	4b17      	ldr	r3, [pc, #92]	; (1c6a8 <mbox_nrf_init+0xac>)
   1c64c:	2202      	movs	r2, #2
   1c64e:	9302      	str	r3, [sp, #8]
   1c650:	2300      	movs	r3, #0
   1c652:	4914      	ldr	r1, [pc, #80]	; (1c6a4 <mbox_nrf_init+0xa8>)
   1c654:	4618      	mov	r0, r3
   1c656:	e9cd 3300 	strd	r3, r3, [sp]
   1c65a:	f00c f92b 	bl	288b4 <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   1c65e:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1c660:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1c662:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c664:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   1c666:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c668:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1c66a:	40d9      	lsrs	r1, r3
   1c66c:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1c66e:	bf44      	itt	mi
   1c670:	fa00 f103 	lslmi.w	r1, r0, r3
   1c674:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1c678:	6821      	ldr	r1, [r4, #0]
   1c67a:	40d9      	lsrs	r1, r3
   1c67c:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1c67e:	bf48      	it	mi
   1c680:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c684:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1c688:	bf48      	it	mi
   1c68a:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c68c:	2b10      	cmp	r3, #16
   1c68e:	d1ea      	bne.n	1c666 <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   1c690:	a805      	add	r0, sp, #20
   1c692:	f000 ffe7 	bl	1d664 <nrfx_ipc_config_load>

	return 0;
}
   1c696:	2000      	movs	r0, #0
   1c698:	b026      	add	sp, #152	; 0x98
   1c69a:	bd10      	pop	{r4, pc}
   1c69c:	0001c6fd 	.word	0x0001c6fd
   1c6a0:	00030007 	.word	0x00030007
   1c6a4:	0002aa28 	.word	0x0002aa28
   1c6a8:	00030033 	.word	0x00030033

0001c6ac <mbox_nrf_send>:
{
   1c6ac:	b530      	push	{r4, r5, lr}
   1c6ae:	4605      	mov	r5, r0
   1c6b0:	460c      	mov	r4, r1
   1c6b2:	b085      	sub	sp, #20
	if (msg) {
   1c6b4:	b14a      	cbz	r2, 1c6ca <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   1c6b6:	4b0f      	ldr	r3, [pc, #60]	; (1c6f4 <mbox_nrf_send+0x48>)
   1c6b8:	2202      	movs	r2, #2
   1c6ba:	9302      	str	r3, [sp, #8]
   1c6bc:	2300      	movs	r3, #0
   1c6be:	490e      	ldr	r1, [pc, #56]	; (1c6f8 <mbox_nrf_send+0x4c>)
   1c6c0:	4618      	mov	r0, r3
   1c6c2:	e9cd 3300 	strd	r3, r3, [sp]
   1c6c6:	f00c f8f5 	bl	288b4 <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1c6ca:	2c0f      	cmp	r4, #15
   1c6cc:	d80f      	bhi.n	1c6ee <mbox_nrf_send+0x42>
   1c6ce:	686b      	ldr	r3, [r5, #4]
   1c6d0:	685b      	ldr	r3, [r3, #4]
   1c6d2:	40e3      	lsrs	r3, r4
   1c6d4:	07db      	lsls	r3, r3, #31
   1c6d6:	d50a      	bpl.n	1c6ee <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c6d8:	2301      	movs	r3, #1
	return 0;
   1c6da:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1c6dc:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c6de:	b2e4      	uxtb	r4, r4
   1c6e0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1c6e4:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1c6e8:	6023      	str	r3, [r4, #0]
}
   1c6ea:	b005      	add	sp, #20
   1c6ec:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1c6ee:	f06f 0015 	mvn.w	r0, #21
   1c6f2:	e7fa      	b.n	1c6ea <mbox_nrf_send+0x3e>
   1c6f4:	0003005f 	.word	0x0003005f
   1c6f8:	0002aa28 	.word	0x0002aa28

0001c6fc <mbox_dispatcher>:
{
   1c6fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1c6fe:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c702:	280f      	cmp	r0, #15
{
   1c704:	4604      	mov	r4, r0
   1c706:	460d      	mov	r5, r1
   1c708:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c70a:	d803      	bhi.n	1c714 <mbox_dispatcher+0x18>
   1c70c:	681b      	ldr	r3, [r3, #0]
   1c70e:	40c3      	lsrs	r3, r0
   1c710:	07db      	lsls	r3, r3, #31
   1c712:	d409      	bmi.n	1c728 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   1c714:	4b14      	ldr	r3, [pc, #80]	; (1c768 <mbox_dispatcher+0x6c>)
   1c716:	2202      	movs	r2, #2
   1c718:	9302      	str	r3, [sp, #8]
   1c71a:	2300      	movs	r3, #0
   1c71c:	4913      	ldr	r1, [pc, #76]	; (1c76c <mbox_dispatcher+0x70>)
   1c71e:	4618      	mov	r0, r3
   1c720:	e9cd 3300 	strd	r3, r3, [sp]
   1c724:	f00c f8c6 	bl	288b4 <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   1c728:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c72c:	40e3      	lsrs	r3, r4
   1c72e:	f013 0301 	ands.w	r3, r3, #1
   1c732:	d108      	bne.n	1c746 <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   1c734:	4a0e      	ldr	r2, [pc, #56]	; (1c770 <mbox_dispatcher+0x74>)
   1c736:	4618      	mov	r0, r3
   1c738:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c73c:	490b      	ldr	r1, [pc, #44]	; (1c76c <mbox_dispatcher+0x70>)
   1c73e:	2202      	movs	r2, #2
   1c740:	9300      	str	r3, [sp, #0]
   1c742:	f00c f8b7 	bl	288b4 <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   1c746:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1c74a:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1c74e:	b145      	cbz	r5, 1c762 <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1c750:	2300      	movs	r3, #0
   1c752:	4621      	mov	r1, r4
   1c754:	4630      	mov	r0, r6
   1c756:	46ac      	mov	ip, r5
   1c758:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1c75a:	b004      	add	sp, #16
   1c75c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1c760:	4760      	bx	ip
}
   1c762:	b004      	add	sp, #16
   1c764:	bd70      	pop	{r4, r5, r6, pc}
   1c766:	bf00      	nop
   1c768:	0003007a 	.word	0x0003007a
   1c76c:	0002aa28 	.word	0x0002aa28
   1c770:	00030096 	.word	0x00030096

0001c774 <mbox_nrf_set_enabled>:
{
   1c774:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c776:	290f      	cmp	r1, #15
{
   1c778:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1c77a:	6905      	ldr	r5, [r0, #16]
{
   1c77c:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c77e:	d841      	bhi.n	1c804 <mbox_nrf_set_enabled+0x90>
   1c780:	6843      	ldr	r3, [r0, #4]
   1c782:	681b      	ldr	r3, [r3, #0]
   1c784:	40cb      	lsrs	r3, r1
   1c786:	07db      	lsls	r3, r3, #31
   1c788:	d53c      	bpl.n	1c804 <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1c78a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c78e:	40cb      	lsrs	r3, r1
   1c790:	f003 0301 	and.w	r3, r3, #1
   1c794:	b91a      	cbnz	r2, 1c79e <mbox_nrf_set_enabled+0x2a>
   1c796:	bb0b      	cbnz	r3, 1c7dc <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   1c798:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1c79c:	e030      	b.n	1c800 <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1c79e:	2b00      	cmp	r3, #0
   1c7a0:	d1fa      	bne.n	1c798 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1c7a2:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1c7a6:	b943      	cbnz	r3, 1c7ba <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   1c7a8:	4a18      	ldr	r2, [pc, #96]	; (1c80c <mbox_nrf_set_enabled+0x98>)
   1c7aa:	4618      	mov	r0, r3
   1c7ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c7b0:	4917      	ldr	r1, [pc, #92]	; (1c810 <mbox_nrf_set_enabled+0x9c>)
   1c7b2:	2202      	movs	r2, #2
   1c7b4:	9300      	str	r3, [sp, #0]
   1c7b6:	f00c f87d 	bl	288b4 <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   1c7ba:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c7be:	b913      	cbnz	r3, 1c7c6 <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   1c7c0:	202a      	movs	r0, #42	; 0x2a
   1c7c2:	f7f3 fd35 	bl	10230 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1c7c6:	2201      	movs	r2, #1
   1c7c8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c7cc:	40a2      	lsls	r2, r4
   1c7ce:	4313      	orrs	r3, r2
   1c7d0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1c7d4:	b2e0      	uxtb	r0, r4
   1c7d6:	f000 ff87 	bl	1d6e8 <nrfx_ipc_receive_event_enable>
   1c7da:	e00a      	b.n	1c7f2 <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   1c7dc:	b2c8      	uxtb	r0, r1
   1c7de:	f000 ffa1 	bl	1d724 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1c7e2:	2201      	movs	r2, #1
   1c7e4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c7e8:	40a2      	lsls	r2, r4
   1c7ea:	ea23 0302 	bic.w	r3, r3, r2
   1c7ee:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1c7f2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c7f6:	b913      	cbnz	r3, 1c7fe <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   1c7f8:	202a      	movs	r0, #42	; 0x2a
   1c7fa:	f7f3 fd27 	bl	1024c <arch_irq_disable>
	return 0;
   1c7fe:	2000      	movs	r0, #0
}
   1c800:	b005      	add	sp, #20
   1c802:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1c804:	f06f 0015 	mvn.w	r0, #21
   1c808:	e7fa      	b.n	1c800 <mbox_nrf_set_enabled+0x8c>
   1c80a:	bf00      	nop
   1c80c:	000300b3 	.word	0x000300b3
   1c810:	0002aa28 	.word	0x0002aa28

0001c814 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1c814:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1c816:	ab0b      	add	r3, sp, #44	; 0x2c
   1c818:	9305      	str	r3, [sp, #20]
   1c81a:	9303      	str	r3, [sp, #12]
   1c81c:	4b05      	ldr	r3, [pc, #20]	; (1c834 <z_log_msg_runtime_create.constprop.0+0x20>)
   1c81e:	2201      	movs	r2, #1
   1c820:	9302      	str	r3, [sp, #8]
   1c822:	2300      	movs	r3, #0
   1c824:	4618      	mov	r0, r3
   1c826:	e9cd 3300 	strd	r3, r3, [sp]
   1c82a:	f7f1 fe23 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   1c82e:	b007      	add	sp, #28
   1c830:	f85d fb04 	ldr.w	pc, [sp], #4
   1c834:	00030110 	.word	0x00030110

0001c838 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1c838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1c83a:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1c83c:	f7f1 fd68 	bl	e310 <z_impl_log_panic>
   1c840:	4b06      	ldr	r3, [pc, #24]	; (1c85c <k_sys_fatal_error_handler+0x24>)
   1c842:	4620      	mov	r0, r4
   1c844:	9302      	str	r3, [sp, #8]
   1c846:	2201      	movs	r2, #1
   1c848:	4623      	mov	r3, r4
   1c84a:	e9cd 4400 	strd	r4, r4, [sp]
   1c84e:	4904      	ldr	r1, [pc, #16]	; (1c860 <k_sys_fatal_error_handler+0x28>)
   1c850:	f7ff ffe0 	bl	1c814 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   1c854:	4620      	mov	r0, r4
   1c856:	f7f4 f98b 	bl	10b70 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1c85a:	bf00      	nop
   1c85c:	00030110 	.word	0x00030110
   1c860:	0002a9f0 	.word	0x0002a9f0

0001c864 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1c864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c868:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1c86a:	4b15      	ldr	r3, [pc, #84]	; (1c8c0 <tfm_ns_interface_dispatch+0x5c>)
   1c86c:	4604      	mov	r4, r0
   1c86e:	f893 8000 	ldrb.w	r8, [r3]
   1c872:	460d      	mov	r5, r1
   1c874:	4616      	mov	r6, r2
   1c876:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1c878:	f1b8 0f00 	cmp.w	r8, #0
   1c87c:	d115      	bne.n	1c8aa <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1c87e:	4668      	mov	r0, sp
   1c880:	f009 fb8a 	bl	25f98 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1c884:	463a      	mov	r2, r7
   1c886:	4631      	mov	r1, r6
   1c888:	4628      	mov	r0, r5
   1c88a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1c88c:	47a0      	blx	r4
   1c88e:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1c890:	4668      	mov	r0, sp
   1c892:	f009 fb82 	bl	25f9a <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1c896:	f1b8 0f00 	cmp.w	r8, #0
   1c89a:	d002      	beq.n	1c8a2 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1c89c:	4809      	ldr	r0, [pc, #36]	; (1c8c4 <tfm_ns_interface_dispatch+0x60>)
   1c89e:	f003 f9bd 	bl	1fc1c <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1c8a2:	4620      	mov	r0, r4
   1c8a4:	b022      	add	sp, #136	; 0x88
   1c8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1c8aa:	f04f 32ff 	mov.w	r2, #4294967295
   1c8ae:	f04f 33ff 	mov.w	r3, #4294967295
   1c8b2:	4804      	ldr	r0, [pc, #16]	; (1c8c4 <tfm_ns_interface_dispatch+0x60>)
   1c8b4:	f003 f8e2 	bl	1fa7c <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1c8b8:	2800      	cmp	r0, #0
   1c8ba:	d0e0      	beq.n	1c87e <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1c8bc:	241f      	movs	r4, #31
   1c8be:	e7f0      	b.n	1c8a2 <tfm_ns_interface_dispatch+0x3e>
   1c8c0:	20022472 	.word	0x20022472
   1c8c4:	20008abc 	.word	0x20008abc

0001c8c8 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1c8c8:	b530      	push	{r4, r5, lr}
   1c8ca:	b095      	sub	sp, #84	; 0x54
   1c8cc:	4605      	mov	r5, r0
   1c8ce:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1c8d0:	2230      	movs	r2, #48	; 0x30
   1c8d2:	2100      	movs	r1, #0
   1c8d4:	a808      	add	r0, sp, #32
   1c8d6:	f00d f89e 	bl	29a16 <memset>
   1c8da:	233f      	movs	r3, #63	; 0x3f
   1c8dc:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1c8de:	ab07      	add	r3, sp, #28
   1c8e0:	9303      	str	r3, [sp, #12]
   1c8e2:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1c8e4:	9406      	str	r4, [sp, #24]
   1c8e6:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1c8ea:	b154      	cbz	r4, 1c902 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1c8ec:	2301      	movs	r3, #1
   1c8ee:	aa05      	add	r2, sp, #20
   1c8f0:	9200      	str	r2, [sp, #0]
   1c8f2:	2100      	movs	r1, #0
   1c8f4:	4804      	ldr	r0, [pc, #16]	; (1c908 <psa_generate_random+0x40>)
   1c8f6:	9301      	str	r3, [sp, #4]
   1c8f8:	aa03      	add	r2, sp, #12
   1c8fa:	f000 f807 	bl	1c90c <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1c8fe:	b015      	add	sp, #84	; 0x54
   1c900:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1c902:	4620      	mov	r0, r4
   1c904:	e7fb      	b.n	1c8fe <psa_generate_random+0x36>
   1c906:	bf00      	nop
   1c908:	40000100 	.word	0x40000100

0001c90c <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1c90c:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1c90e:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1c912:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1c916:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1c918:	d20d      	bcs.n	1c936 <psa_call+0x2a>
        (type < INT16_MIN) ||
   1c91a:	ea43 0504 	orr.w	r5, r3, r4
   1c91e:	2dff      	cmp	r5, #255	; 0xff
   1c920:	d809      	bhi.n	1c936 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1c922:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1c926:	4613      	mov	r3, r2
   1c928:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1c92c:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1c92e:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1c930:	4803      	ldr	r0, [pc, #12]	; (1c940 <psa_call+0x34>)
   1c932:	f7ff bf97 	b.w	1c864 <tfm_ns_interface_dispatch>
}
   1c936:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1c93a:	bc30      	pop	{r4, r5}
   1c93c:	4770      	bx	lr
   1c93e:	bf00      	nop
   1c940:	00007c21 	.word	0x00007c21

0001c944 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1c944:	2300      	movs	r3, #0
{
   1c946:	b507      	push	{r0, r1, r2, lr}
   1c948:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1c94a:	9300      	str	r3, [sp, #0]
   1c94c:	4601      	mov	r1, r0
   1c94e:	4803      	ldr	r0, [pc, #12]	; (1c95c <psa_connect+0x18>)
   1c950:	f7ff ff88 	bl	1c864 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1c954:	b003      	add	sp, #12
   1c956:	f85d fb04 	ldr.w	pc, [sp], #4
   1c95a:	bf00      	nop
   1c95c:	00007c19 	.word	0x00007c19

0001c960 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1c960:	2300      	movs	r3, #0
{
   1c962:	b507      	push	{r0, r1, r2, lr}
   1c964:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1c966:	461a      	mov	r2, r3
   1c968:	9300      	str	r3, [sp, #0]
   1c96a:	4803      	ldr	r0, [pc, #12]	; (1c978 <psa_close+0x18>)
   1c96c:	f7ff ff7a 	bl	1c864 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1c970:	b003      	add	sp, #12
   1c972:	f85d fb04 	ldr.w	pc, [sp], #4
   1c976:	bf00      	nop
   1c978:	00007c11 	.word	0x00007c11

0001c97c <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1c97c:	4b04      	ldr	r3, [pc, #16]	; (1c990 <SystemCoreClockUpdate+0x14>)
   1c97e:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1c982:	4b04      	ldr	r3, [pc, #16]	; (1c994 <SystemCoreClockUpdate+0x18>)
   1c984:	f002 0203 	and.w	r2, r2, #3
   1c988:	40d3      	lsrs	r3, r2
   1c98a:	4a03      	ldr	r2, [pc, #12]	; (1c998 <SystemCoreClockUpdate+0x1c>)
   1c98c:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1c98e:	4770      	bx	lr
   1c990:	40005000 	.word	0x40005000
   1c994:	07a12000 	.word	0x07a12000
   1c998:	20008684 	.word	0x20008684

0001c99c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1c99c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c99e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1c9a0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1c9a2:	fab2 f382 	clz	r3, r2
   1c9a6:	f1c3 031f 	rsb	r3, r3, #31
   1c9aa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c9ac:	fa05 f403 	lsl.w	r4, r5, r3
   1c9b0:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c9b4:	e8d0 6fef 	ldaex	r6, [r0]
   1c9b8:	4296      	cmp	r6, r2
   1c9ba:	d104      	bne.n	1c9c6 <nrfx_flag32_alloc+0x2a>
   1c9bc:	e8c0 4fec 	stlex	ip, r4, [r0]
   1c9c0:	f1bc 0f00 	cmp.w	ip, #0
   1c9c4:	d1f6      	bne.n	1c9b4 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c9c6:	d1eb      	bne.n	1c9a0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1c9c8:	4801      	ldr	r0, [pc, #4]	; (1c9d0 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1c9ca:	700b      	strb	r3, [r1, #0]
}
   1c9cc:	bd70      	pop	{r4, r5, r6, pc}
   1c9ce:	bf00      	nop
   1c9d0:	0bad0000 	.word	0x0bad0000

0001c9d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1c9d4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1c9d6:	6803      	ldr	r3, [r0, #0]
   1c9d8:	40cb      	lsrs	r3, r1
   1c9da:	07db      	lsls	r3, r3, #31
   1c9dc:	d410      	bmi.n	1ca00 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1c9de:	2301      	movs	r3, #1
   1c9e0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1c9e2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1c9e4:	ea43 0102 	orr.w	r1, r3, r2
   1c9e8:	e8d0 4fef 	ldaex	r4, [r0]
   1c9ec:	4294      	cmp	r4, r2
   1c9ee:	d104      	bne.n	1c9fa <nrfx_flag32_free+0x26>
   1c9f0:	e8c0 1fec 	stlex	ip, r1, [r0]
   1c9f4:	f1bc 0f00 	cmp.w	ip, #0
   1c9f8:	d1f6      	bne.n	1c9e8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c9fa:	d1f2      	bne.n	1c9e2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1c9fc:	4801      	ldr	r0, [pc, #4]	; (1ca04 <nrfx_flag32_free+0x30>)
}
   1c9fe:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ca00:	4801      	ldr	r0, [pc, #4]	; (1ca08 <nrfx_flag32_free+0x34>)
   1ca02:	e7fc      	b.n	1c9fe <nrfx_flag32_free+0x2a>
   1ca04:	0bad0000 	.word	0x0bad0000
   1ca08:	0bad0004 	.word	0x0bad0004

0001ca0c <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1ca0c:	2200      	movs	r2, #0
{
   1ca0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ca10:	4b62      	ldr	r3, [pc, #392]	; (1cb9c <clock_stop+0x190>)
    switch (domain)
   1ca12:	2803      	cmp	r0, #3
   1ca14:	d838      	bhi.n	1ca88 <clock_stop+0x7c>
   1ca16:	e8df f000 	tbb	[pc, r0]
   1ca1a:	0d02      	.short	0x0d02
   1ca1c:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1ca1e:	2102      	movs	r1, #2
   1ca20:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca24:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ca28:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca2c:	2201      	movs	r2, #1
   1ca2e:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1ca30:	2400      	movs	r4, #0
   1ca32:	e009      	b.n	1ca48 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1ca34:	2101      	movs	r1, #1
   1ca36:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ca3e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1ca42:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca46:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1ca48:	2301      	movs	r3, #1
   1ca4a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1ca4e:	2803      	cmp	r0, #3
   1ca50:	f200 8093 	bhi.w	1cb7a <clock_stop+0x16e>
   1ca54:	e8df f000 	tbb	[pc, r0]
   1ca58:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1ca5c:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ca60:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca64:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ca68:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca6c:	2201      	movs	r2, #1
   1ca6e:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1ca70:	e7de      	b.n	1ca30 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1ca72:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ca76:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca7a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ca7e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca82:	2201      	movs	r2, #1
   1ca84:	61da      	str	r2, [r3, #28]
   1ca86:	e7d3      	b.n	1ca30 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1ca88:	4945      	ldr	r1, [pc, #276]	; (1cba0 <clock_stop+0x194>)
   1ca8a:	4846      	ldr	r0, [pc, #280]	; (1cba4 <clock_stop+0x198>)
   1ca8c:	23d8      	movs	r3, #216	; 0xd8
   1ca8e:	4a46      	ldr	r2, [pc, #280]	; (1cba8 <clock_stop+0x19c>)
   1ca90:	f008 fa21 	bl	24ed6 <assert_print>
   1ca94:	21d8      	movs	r1, #216	; 0xd8
   1ca96:	4844      	ldr	r0, [pc, #272]	; (1cba8 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1ca98:	f008 fa16 	bl	24ec8 <assert_post_action>
    switch (domain)
   1ca9c:	f242 7510 	movw	r5, #10000	; 0x2710
   1caa0:	4e3e      	ldr	r6, [pc, #248]	; (1cb9c <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1caa2:	b194      	cbz	r4, 1caca <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1caa4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1caa8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1caac:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1caae:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1cab2:	03d9      	lsls	r1, r3, #15
   1cab4:	d507      	bpl.n	1cac6 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1cab6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1caba:	2801      	cmp	r0, #1
   1cabc:	d103      	bne.n	1cac6 <clock_stop+0xba>
   1cabe:	f00b ff6f 	bl	289a0 <nrfx_busy_wait>
   1cac2:	3d01      	subs	r5, #1
   1cac4:	d1ed      	bne.n	1caa2 <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1cac6:	b002      	add	sp, #8
   1cac8:	bd70      	pop	{r4, r5, r6, pc}
   1caca:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1cace:	03da      	lsls	r2, r3, #15
   1cad0:	d5f9      	bpl.n	1cac6 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1cad2:	2001      	movs	r0, #1
   1cad4:	f00b ff64 	bl	289a0 <nrfx_busy_wait>
   1cad8:	3d01      	subs	r5, #1
   1cada:	d1f6      	bne.n	1caca <clock_stop+0xbe>
   1cadc:	e7f3      	b.n	1cac6 <clock_stop+0xba>
    switch (domain)
   1cade:	f242 7510 	movw	r5, #10000	; 0x2710
   1cae2:	4e2e      	ldr	r6, [pc, #184]	; (1cb9c <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1cae4:	b18c      	cbz	r4, 1cb0a <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1cae6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1caea:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1caee:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1caf0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1caf4:	03db      	lsls	r3, r3, #15
   1caf6:	d5e6      	bpl.n	1cac6 <clock_stop+0xba>
   1caf8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1cafc:	2801      	cmp	r0, #1
   1cafe:	d1e2      	bne.n	1cac6 <clock_stop+0xba>
   1cb00:	f00b ff4e 	bl	289a0 <nrfx_busy_wait>
   1cb04:	3d01      	subs	r5, #1
   1cb06:	d1ed      	bne.n	1cae4 <clock_stop+0xd8>
   1cb08:	e7dd      	b.n	1cac6 <clock_stop+0xba>
   1cb0a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1cb0e:	03d8      	lsls	r0, r3, #15
   1cb10:	d5d9      	bpl.n	1cac6 <clock_stop+0xba>
   1cb12:	2001      	movs	r0, #1
   1cb14:	f00b ff44 	bl	289a0 <nrfx_busy_wait>
   1cb18:	3d01      	subs	r5, #1
   1cb1a:	d1f6      	bne.n	1cb0a <clock_stop+0xfe>
   1cb1c:	e7d3      	b.n	1cac6 <clock_stop+0xba>
    switch (domain)
   1cb1e:	f242 7510 	movw	r5, #10000	; 0x2710
   1cb22:	4e1e      	ldr	r6, [pc, #120]	; (1cb9c <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1cb24:	b18c      	cbz	r4, 1cb4a <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1cb26:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1cb2a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1cb2e:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1cb30:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1cb34:	03d9      	lsls	r1, r3, #15
   1cb36:	d5c6      	bpl.n	1cac6 <clock_stop+0xba>
   1cb38:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1cb3c:	2801      	cmp	r0, #1
   1cb3e:	d1c2      	bne.n	1cac6 <clock_stop+0xba>
   1cb40:	f00b ff2e 	bl	289a0 <nrfx_busy_wait>
   1cb44:	3d01      	subs	r5, #1
   1cb46:	d1ed      	bne.n	1cb24 <clock_stop+0x118>
   1cb48:	e7bd      	b.n	1cac6 <clock_stop+0xba>
   1cb4a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1cb4e:	03da      	lsls	r2, r3, #15
   1cb50:	d5b9      	bpl.n	1cac6 <clock_stop+0xba>
   1cb52:	2001      	movs	r0, #1
   1cb54:	f00b ff24 	bl	289a0 <nrfx_busy_wait>
   1cb58:	3d01      	subs	r5, #1
   1cb5a:	d1f6      	bne.n	1cb4a <clock_stop+0x13e>
   1cb5c:	e7b3      	b.n	1cac6 <clock_stop+0xba>
    switch (domain)
   1cb5e:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1cb62:	4e0e      	ldr	r6, [pc, #56]	; (1cb9c <clock_stop+0x190>)
   1cb64:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1cb68:	03db      	lsls	r3, r3, #15
   1cb6a:	d5ac      	bpl.n	1cac6 <clock_stop+0xba>
   1cb6c:	b984      	cbnz	r4, 1cb90 <clock_stop+0x184>
   1cb6e:	2001      	movs	r0, #1
   1cb70:	f00b ff16 	bl	289a0 <nrfx_busy_wait>
   1cb74:	3d01      	subs	r5, #1
   1cb76:	d1f5      	bne.n	1cb64 <clock_stop+0x158>
   1cb78:	e7a5      	b.n	1cac6 <clock_stop+0xba>
            NRFX_ASSERT(0);
   1cb7a:	4909      	ldr	r1, [pc, #36]	; (1cba0 <clock_stop+0x194>)
   1cb7c:	4809      	ldr	r0, [pc, #36]	; (1cba4 <clock_stop+0x198>)
   1cb7e:	f240 3347 	movw	r3, #839	; 0x347
   1cb82:	4a0a      	ldr	r2, [pc, #40]	; (1cbac <clock_stop+0x1a0>)
   1cb84:	f008 f9a7 	bl	24ed6 <assert_print>
   1cb88:	f240 3147 	movw	r1, #839	; 0x347
   1cb8c:	4807      	ldr	r0, [pc, #28]	; (1cbac <clock_stop+0x1a0>)
   1cb8e:	e783      	b.n	1ca98 <clock_stop+0x8c>
   1cb90:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1cb94:	2801      	cmp	r0, #1
   1cb96:	d0eb      	beq.n	1cb70 <clock_stop+0x164>
   1cb98:	e795      	b.n	1cac6 <clock_stop+0xba>
   1cb9a:	bf00      	nop
   1cb9c:	40005000 	.word	0x40005000
   1cba0:	000311d2 	.word	0x000311d2
   1cba4:	0002b939 	.word	0x0002b939
   1cba8:	0003012d 	.word	0x0003012d
   1cbac:	0003016a 	.word	0x0003016a

0001cbb0 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1cbb0:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1cbb2:	b958      	cbnz	r0, 1cbcc <nrfx_clock_init+0x1c>
   1cbb4:	490a      	ldr	r1, [pc, #40]	; (1cbe0 <nrfx_clock_init+0x30>)
   1cbb6:	480b      	ldr	r0, [pc, #44]	; (1cbe4 <nrfx_clock_init+0x34>)
   1cbb8:	f240 1315 	movw	r3, #277	; 0x115
   1cbbc:	4a0a      	ldr	r2, [pc, #40]	; (1cbe8 <nrfx_clock_init+0x38>)
   1cbbe:	f008 f98a 	bl	24ed6 <assert_print>
   1cbc2:	f240 1115 	movw	r1, #277	; 0x115
   1cbc6:	4808      	ldr	r0, [pc, #32]	; (1cbe8 <nrfx_clock_init+0x38>)
   1cbc8:	f008 f97e 	bl	24ec8 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1cbcc:	4b07      	ldr	r3, [pc, #28]	; (1cbec <nrfx_clock_init+0x3c>)
   1cbce:	791a      	ldrb	r2, [r3, #4]
   1cbd0:	b922      	cbnz	r2, 1cbdc <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1cbd2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1cbd4:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1cbd6:	4806      	ldr	r0, [pc, #24]	; (1cbf0 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1cbd8:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1cbda:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1cbdc:	4805      	ldr	r0, [pc, #20]	; (1cbf4 <nrfx_clock_init+0x44>)
    return err_code;
   1cbde:	e7fc      	b.n	1cbda <nrfx_clock_init+0x2a>
   1cbe0:	0003019e 	.word	0x0003019e
   1cbe4:	0002b939 	.word	0x0002b939
   1cbe8:	0003012d 	.word	0x0003012d
   1cbec:	200213d4 	.word	0x200213d4
   1cbf0:	0bad0000 	.word	0x0bad0000
   1cbf4:	0bad000c 	.word	0x0bad000c

0001cbf8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1cbf8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1cbfa:	4b0f      	ldr	r3, [pc, #60]	; (1cc38 <nrfx_clock_enable+0x40>)
   1cbfc:	791b      	ldrb	r3, [r3, #4]
   1cbfe:	b95b      	cbnz	r3, 1cc18 <nrfx_clock_enable+0x20>
   1cc00:	490e      	ldr	r1, [pc, #56]	; (1cc3c <nrfx_clock_enable+0x44>)
   1cc02:	480f      	ldr	r0, [pc, #60]	; (1cc40 <nrfx_clock_enable+0x48>)
   1cc04:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1cc08:	4a0e      	ldr	r2, [pc, #56]	; (1cc44 <nrfx_clock_enable+0x4c>)
   1cc0a:	f008 f964 	bl	24ed6 <assert_print>
   1cc0e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1cc12:	480c      	ldr	r0, [pc, #48]	; (1cc44 <nrfx_clock_enable+0x4c>)
   1cc14:	f008 f958 	bl	24ec8 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1cc18:	2005      	movs	r0, #5
   1cc1a:	f7f3 fb2b 	bl	10274 <arch_irq_is_enabled>
   1cc1e:	b910      	cbnz	r0, 1cc26 <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1cc20:	2005      	movs	r0, #5
   1cc22:	f7f3 fb05 	bl	10230 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1cc26:	2201      	movs	r2, #1
   1cc28:	4b07      	ldr	r3, [pc, #28]	; (1cc48 <nrfx_clock_enable+0x50>)
   1cc2a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1cc2e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1cc32:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1cc36:	bd08      	pop	{r3, pc}
   1cc38:	200213d4 	.word	0x200213d4
   1cc3c:	000301ac 	.word	0x000301ac
   1cc40:	0002b939 	.word	0x0002b939
   1cc44:	0003012d 	.word	0x0003012d
   1cc48:	40005000 	.word	0x40005000

0001cc4c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1cc4c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1cc4e:	4b38      	ldr	r3, [pc, #224]	; (1cd30 <nrfx_clock_start+0xe4>)
   1cc50:	791b      	ldrb	r3, [r3, #4]
   1cc52:	b95b      	cbnz	r3, 1cc6c <nrfx_clock_start+0x20>
   1cc54:	4937      	ldr	r1, [pc, #220]	; (1cd34 <nrfx_clock_start+0xe8>)
   1cc56:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1cc5a:	4a37      	ldr	r2, [pc, #220]	; (1cd38 <nrfx_clock_start+0xec>)
   1cc5c:	4837      	ldr	r0, [pc, #220]	; (1cd3c <nrfx_clock_start+0xf0>)
   1cc5e:	f008 f93a 	bl	24ed6 <assert_print>
   1cc62:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1cc66:	4834      	ldr	r0, [pc, #208]	; (1cd38 <nrfx_clock_start+0xec>)
   1cc68:	f008 f92e 	bl	24ec8 <assert_post_action>
    switch (domain)
   1cc6c:	4b34      	ldr	r3, [pc, #208]	; (1cd40 <nrfx_clock_start+0xf4>)
   1cc6e:	2803      	cmp	r0, #3
   1cc70:	d853      	bhi.n	1cd1a <nrfx_clock_start+0xce>
   1cc72:	e8df f000 	tbb	[pc, r0]
   1cc76:	3002      	.short	0x3002
   1cc78:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1cc7a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1cc7e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1cc82:	03c9      	lsls	r1, r1, #15
   1cc84:	d511      	bpl.n	1ccaa <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1cc86:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1cc8a:	2b02      	cmp	r3, #2
   1cc8c:	d11c      	bne.n	1ccc8 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1cc8e:	4a2c      	ldr	r2, [pc, #176]	; (1cd40 <nrfx_clock_start+0xf4>)
   1cc90:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cc94:	2300      	movs	r3, #0
   1cc96:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1cc9a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1cc9e:	2302      	movs	r3, #2
   1cca0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cca4:	2301      	movs	r3, #1
   1cca6:	6093      	str	r3, [r2, #8]
}
   1cca8:	e00d      	b.n	1ccc6 <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1ccaa:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1ccae:	07d2      	lsls	r2, r2, #31
   1ccb0:	d50f      	bpl.n	1ccd2 <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ccb2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1ccb6:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1ccba:	3a01      	subs	r2, #1
   1ccbc:	2a01      	cmp	r2, #1
   1ccbe:	d805      	bhi.n	1cccc <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1ccc0:	2202      	movs	r2, #2
   1ccc2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1ccc6:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1ccc8:	2b01      	cmp	r3, #1
   1ccca:	d002      	beq.n	1ccd2 <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1cccc:	2000      	movs	r0, #0
   1ccce:	f7ff fe9d 	bl	1ca0c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1ccd2:	2301      	movs	r3, #1
   1ccd4:	e7db      	b.n	1cc8e <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ccd6:	2200      	movs	r2, #0
   1ccd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ccdc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1cce0:	2201      	movs	r2, #1
   1cce2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cce6:	601a      	str	r2, [r3, #0]
}
   1cce8:	e7ed      	b.n	1ccc6 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ccea:	2200      	movs	r2, #0
   1ccec:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ccf0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1ccf4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ccf8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ccfc:	2201      	movs	r2, #1
   1ccfe:	621a      	str	r2, [r3, #32]
}
   1cd00:	e7e1      	b.n	1ccc6 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cd02:	2200      	movs	r2, #0
   1cd04:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1cd08:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1cd0c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cd10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cd14:	2201      	movs	r2, #1
   1cd16:	619a      	str	r2, [r3, #24]
}
   1cd18:	e7d5      	b.n	1ccc6 <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1cd1a:	490a      	ldr	r1, [pc, #40]	; (1cd44 <nrfx_clock_start+0xf8>)
   1cd1c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1cd20:	4a05      	ldr	r2, [pc, #20]	; (1cd38 <nrfx_clock_start+0xec>)
   1cd22:	4806      	ldr	r0, [pc, #24]	; (1cd3c <nrfx_clock_start+0xf0>)
   1cd24:	f008 f8d7 	bl	24ed6 <assert_print>
   1cd28:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1cd2c:	e79b      	b.n	1cc66 <nrfx_clock_start+0x1a>
   1cd2e:	bf00      	nop
   1cd30:	200213d4 	.word	0x200213d4
   1cd34:	000301ac 	.word	0x000301ac
   1cd38:	0003012d 	.word	0x0003012d
   1cd3c:	0002b939 	.word	0x0002b939
   1cd40:	40005000 	.word	0x40005000
   1cd44:	000311d2 	.word	0x000311d2

0001cd48 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1cd48:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1cd4a:	4b09      	ldr	r3, [pc, #36]	; (1cd70 <nrfx_clock_stop+0x28>)
   1cd4c:	791b      	ldrb	r3, [r3, #4]
   1cd4e:	b95b      	cbnz	r3, 1cd68 <nrfx_clock_stop+0x20>
   1cd50:	4908      	ldr	r1, [pc, #32]	; (1cd74 <nrfx_clock_stop+0x2c>)
   1cd52:	4809      	ldr	r0, [pc, #36]	; (1cd78 <nrfx_clock_stop+0x30>)
   1cd54:	f240 13ad 	movw	r3, #429	; 0x1ad
   1cd58:	4a08      	ldr	r2, [pc, #32]	; (1cd7c <nrfx_clock_stop+0x34>)
   1cd5a:	f008 f8bc 	bl	24ed6 <assert_print>
   1cd5e:	f240 11ad 	movw	r1, #429	; 0x1ad
   1cd62:	4806      	ldr	r0, [pc, #24]	; (1cd7c <nrfx_clock_stop+0x34>)
   1cd64:	f008 f8b0 	bl	24ec8 <assert_post_action>
    clock_stop(domain);
}
   1cd68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1cd6c:	f7ff be4e 	b.w	1ca0c <clock_stop>
   1cd70:	200213d4 	.word	0x200213d4
   1cd74:	000301ac 	.word	0x000301ac
   1cd78:	0002b939 	.word	0x0002b939
   1cd7c:	0003012d 	.word	0x0003012d

0001cd80 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1cd80:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cd82:	4b28      	ldr	r3, [pc, #160]	; (1ce24 <nrfx_power_clock_irq_handler+0xa4>)
   1cd84:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1cd88:	b152      	cbz	r2, 1cda0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cd8a:	2000      	movs	r0, #0
   1cd8c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1cd90:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1cd94:	2201      	movs	r2, #1
   1cd96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1cd9a:	4b23      	ldr	r3, [pc, #140]	; (1ce28 <nrfx_power_clock_irq_handler+0xa8>)
   1cd9c:	681b      	ldr	r3, [r3, #0]
   1cd9e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cda0:	4b20      	ldr	r3, [pc, #128]	; (1ce24 <nrfx_power_clock_irq_handler+0xa4>)
   1cda2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1cda6:	b18a      	cbz	r2, 1cdcc <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cda8:	2200      	movs	r2, #0
   1cdaa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1cdae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1cdb2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1cdb6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1cdba:	f002 0203 	and.w	r2, r2, #3
   1cdbe:	2a01      	cmp	r2, #1
   1cdc0:	f04f 0102 	mov.w	r1, #2
   1cdc4:	d126      	bne.n	1ce14 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1cdc6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cdca:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cdcc:	4b15      	ldr	r3, [pc, #84]	; (1ce24 <nrfx_power_clock_irq_handler+0xa4>)
   1cdce:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1cdd2:	b162      	cbz	r2, 1cdee <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cdd4:	2200      	movs	r2, #0
   1cdd6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1cdda:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1cdde:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cde2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1cde6:	4b10      	ldr	r3, [pc, #64]	; (1ce28 <nrfx_power_clock_irq_handler+0xa8>)
   1cde8:	2004      	movs	r0, #4
   1cdea:	681b      	ldr	r3, [r3, #0]
   1cdec:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cdee:	4b0d      	ldr	r3, [pc, #52]	; (1ce24 <nrfx_power_clock_irq_handler+0xa4>)
   1cdf0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1cdf4:	b1aa      	cbz	r2, 1ce22 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cdf6:	2200      	movs	r2, #0
   1cdf8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1cdfc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1ce00:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ce04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1ce08:	4b07      	ldr	r3, [pc, #28]	; (1ce28 <nrfx_power_clock_irq_handler+0xa8>)
   1ce0a:	2005      	movs	r0, #5
    }
#endif
}
   1ce0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1ce10:	681b      	ldr	r3, [r3, #0]
   1ce12:	4718      	bx	r3
   1ce14:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ce18:	4b03      	ldr	r3, [pc, #12]	; (1ce28 <nrfx_power_clock_irq_handler+0xa8>)
   1ce1a:	2001      	movs	r0, #1
   1ce1c:	681b      	ldr	r3, [r3, #0]
   1ce1e:	4798      	blx	r3
   1ce20:	e7d4      	b.n	1cdcc <nrfx_power_clock_irq_handler+0x4c>
}
   1ce22:	bd10      	pop	{r4, pc}
   1ce24:	40005000 	.word	0x40005000
   1ce28:	200213d4 	.word	0x200213d4

0001ce2c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1ce2c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1ce2e:	4801      	ldr	r0, [pc, #4]	; (1ce34 <nrfx_dppi_channel_alloc+0x8>)
   1ce30:	f7ff bdb4 	b.w	1c99c <nrfx_flag32_alloc>
   1ce34:	20008688 	.word	0x20008688

0001ce38 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1ce38:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1ce3a:	4a04      	ldr	r2, [pc, #16]	; (1ce4c <nrfx_dppi_channel_free+0x14>)
   1ce3c:	4083      	lsls	r3, r0
{
   1ce3e:	4601      	mov	r1, r0
   1ce40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1ce44:	4802      	ldr	r0, [pc, #8]	; (1ce50 <nrfx_dppi_channel_free+0x18>)
   1ce46:	f7ff bdc5 	b.w	1c9d4 <nrfx_flag32_free>
   1ce4a:	bf00      	nop
   1ce4c:	40017000 	.word	0x40017000
   1ce50:	20008688 	.word	0x20008688

0001ce54 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1ce54:	4b03      	ldr	r3, [pc, #12]	; (1ce64 <pin_in_use_by_te+0x10>)
   1ce56:	3008      	adds	r0, #8
   1ce58:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ce5c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1ce60:	4770      	bx	lr
   1ce62:	bf00      	nop
   1ce64:	2000868c 	.word	0x2000868c

0001ce68 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1ce68:	4b04      	ldr	r3, [pc, #16]	; (1ce7c <pin_has_trigger+0x14>)
   1ce6a:	3008      	adds	r0, #8
   1ce6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ce70:	f010 001c 	ands.w	r0, r0, #28
   1ce74:	bf18      	it	ne
   1ce76:	2001      	movne	r0, #1
   1ce78:	4770      	bx	lr
   1ce7a:	bf00      	nop
   1ce7c:	2000868c 	.word	0x2000868c

0001ce80 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ce80:	4b03      	ldr	r3, [pc, #12]	; (1ce90 <pin_is_output+0x10>)
   1ce82:	3008      	adds	r0, #8
   1ce84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ce88:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1ce8c:	4770      	bx	lr
   1ce8e:	bf00      	nop
   1ce90:	2000868c 	.word	0x2000868c

0001ce94 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1ce94:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ce96:	4c0d      	ldr	r4, [pc, #52]	; (1cecc <call_handler+0x38>)
   1ce98:	f100 0308 	add.w	r3, r0, #8
   1ce9c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1cea0:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1cea2:	05da      	lsls	r2, r3, #23
{
   1cea4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1cea6:	d507      	bpl.n	1ceb8 <call_handler+0x24>
   1cea8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1ceac:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1ceb0:	6852      	ldr	r2, [r2, #4]
   1ceb2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1ceb6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1ceb8:	68a3      	ldr	r3, [r4, #8]
   1ceba:	b12b      	cbz	r3, 1cec8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1cebc:	4631      	mov	r1, r6
   1cebe:	4628      	mov	r0, r5
   1cec0:	68e2      	ldr	r2, [r4, #12]
    }
}
   1cec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1cec6:	4718      	bx	r3
}
   1cec8:	bd70      	pop	{r4, r5, r6, pc}
   1ceca:	bf00      	nop
   1cecc:	2000868c 	.word	0x2000868c

0001ced0 <release_handler>:
{
   1ced0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ced2:	4a18      	ldr	r2, [pc, #96]	; (1cf34 <release_handler+0x64>)
   1ced4:	3008      	adds	r0, #8
   1ced6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1ceda:	05d9      	lsls	r1, r3, #23
   1cedc:	d51d      	bpl.n	1cf1a <release_handler+0x4a>
   1cede:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1cee2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1cee6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ceea:	2000      	movs	r0, #0
   1ceec:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1cef0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1cef4:	f413 7f80 	tst.w	r3, #256	; 0x100
   1cef8:	d003      	beq.n	1cf02 <release_handler+0x32>
   1cefa:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1cefe:	4299      	cmp	r1, r3
   1cf00:	d00b      	beq.n	1cf1a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1cf02:	3001      	adds	r0, #1
   1cf04:	2830      	cmp	r0, #48	; 0x30
   1cf06:	d1f3      	bne.n	1cef0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1cf08:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1cf0a:	480b      	ldr	r0, [pc, #44]	; (1cf38 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1cf0c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1cf10:	f7ff fd60 	bl	1c9d4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1cf14:	4b09      	ldr	r3, [pc, #36]	; (1cf3c <release_handler+0x6c>)
   1cf16:	4298      	cmp	r0, r3
   1cf18:	d100      	bne.n	1cf1c <release_handler+0x4c>
}
   1cf1a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1cf1c:	4908      	ldr	r1, [pc, #32]	; (1cf40 <release_handler+0x70>)
   1cf1e:	4809      	ldr	r0, [pc, #36]	; (1cf44 <release_handler+0x74>)
   1cf20:	f44f 7399 	mov.w	r3, #306	; 0x132
   1cf24:	4a08      	ldr	r2, [pc, #32]	; (1cf48 <release_handler+0x78>)
   1cf26:	f007 ffd6 	bl	24ed6 <assert_print>
   1cf2a:	f44f 7199 	mov.w	r1, #306	; 0x132
   1cf2e:	4806      	ldr	r0, [pc, #24]	; (1cf48 <release_handler+0x78>)
   1cf30:	f007 ffca 	bl	24ec8 <assert_post_action>
   1cf34:	2000868c 	.word	0x2000868c
   1cf38:	20008700 	.word	0x20008700
   1cf3c:	0bad0000 	.word	0x0bad0000
   1cf40:	0002c90e 	.word	0x0002c90e
   1cf44:	0002b939 	.word	0x0002b939
   1cf48:	000301df 	.word	0x000301df

0001cf4c <pin_handler_trigger_uninit>:
{
   1cf4c:	b538      	push	{r3, r4, r5, lr}
   1cf4e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1cf50:	f7ff ff80 	bl	1ce54 <pin_in_use_by_te>
   1cf54:	4c0b      	ldr	r4, [pc, #44]	; (1cf84 <pin_handler_trigger_uninit+0x38>)
   1cf56:	f102 0508 	add.w	r5, r2, #8
   1cf5a:	b160      	cbz	r0, 1cf76 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1cf5c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cf5e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1cf62:	0b5b      	lsrs	r3, r3, #13
   1cf64:	009b      	lsls	r3, r3, #2
   1cf66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cf6a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1cf6e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1cf72:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1cf76:	4610      	mov	r0, r2
   1cf78:	f7ff ffaa 	bl	1ced0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1cf7c:	2300      	movs	r3, #0
   1cf7e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1cf82:	bd38      	pop	{r3, r4, r5, pc}
   1cf84:	2000868c 	.word	0x2000868c

0001cf88 <nrf_gpio_pin_port_decode>:
{
   1cf88:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cf8a:	6802      	ldr	r2, [r0, #0]
{
   1cf8c:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cf8e:	4610      	mov	r0, r2
   1cf90:	f00b fd08 	bl	289a4 <nrf_gpio_pin_present_check>
   1cf94:	b958      	cbnz	r0, 1cfae <nrf_gpio_pin_port_decode+0x26>
   1cf96:	4910      	ldr	r1, [pc, #64]	; (1cfd8 <nrf_gpio_pin_port_decode+0x50>)
   1cf98:	f240 2347 	movw	r3, #583	; 0x247
   1cf9c:	4a0f      	ldr	r2, [pc, #60]	; (1cfdc <nrf_gpio_pin_port_decode+0x54>)
   1cf9e:	4810      	ldr	r0, [pc, #64]	; (1cfe0 <nrf_gpio_pin_port_decode+0x58>)
   1cfa0:	f007 ff99 	bl	24ed6 <assert_print>
   1cfa4:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1cfa8:	480c      	ldr	r0, [pc, #48]	; (1cfdc <nrf_gpio_pin_port_decode+0x54>)
   1cfaa:	f007 ff8d 	bl	24ec8 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1cfae:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cfb2:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1cfb4:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cfb6:	d00b      	beq.n	1cfd0 <nrf_gpio_pin_port_decode+0x48>
   1cfb8:	2a01      	cmp	r2, #1
   1cfba:	d00b      	beq.n	1cfd4 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1cfbc:	4909      	ldr	r1, [pc, #36]	; (1cfe4 <nrf_gpio_pin_port_decode+0x5c>)
   1cfbe:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1cfc2:	4a06      	ldr	r2, [pc, #24]	; (1cfdc <nrf_gpio_pin_port_decode+0x54>)
   1cfc4:	4806      	ldr	r0, [pc, #24]	; (1cfe0 <nrf_gpio_pin_port_decode+0x58>)
   1cfc6:	f007 ff86 	bl	24ed6 <assert_print>
   1cfca:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1cfce:	e7eb      	b.n	1cfa8 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1cfd0:	4805      	ldr	r0, [pc, #20]	; (1cfe8 <nrf_gpio_pin_port_decode+0x60>)
}
   1cfd2:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cfd4:	4805      	ldr	r0, [pc, #20]	; (1cfec <nrf_gpio_pin_port_decode+0x64>)
   1cfd6:	e7fc      	b.n	1cfd2 <nrf_gpio_pin_port_decode+0x4a>
   1cfd8:	0002f8bf 	.word	0x0002f8bf
   1cfdc:	0002f88c 	.word	0x0002f88c
   1cfe0:	0002b939 	.word	0x0002b939
   1cfe4:	000311d2 	.word	0x000311d2
   1cfe8:	40842500 	.word	0x40842500
   1cfec:	40842800 	.word	0x40842800

0001cff0 <nrfx_gpiote_input_configure>:
{
   1cff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cff2:	4604      	mov	r4, r0
   1cff4:	4617      	mov	r7, r2
   1cff6:	461d      	mov	r5, r3
   1cff8:	b085      	sub	sp, #20
    if (p_input_config)
   1cffa:	b1d9      	cbz	r1, 1d034 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1cffc:	f00b fce3 	bl	289c6 <pin_is_task_output>
   1d000:	bb00      	cbnz	r0, 1d044 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1d002:	460b      	mov	r3, r1
   1d004:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1d008:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1d00c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1d010:	f10d 020f 	add.w	r2, sp, #15
   1d014:	f10d 010e 	add.w	r1, sp, #14
   1d018:	4620      	mov	r0, r4
   1d01a:	f00b fcdf 	bl	289dc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1d01e:	4a44      	ldr	r2, [pc, #272]	; (1d130 <nrfx_gpiote_input_configure+0x140>)
   1d020:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1d024:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1d028:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1d02c:	f043 0301 	orr.w	r3, r3, #1
   1d030:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1d034:	b36f      	cbz	r7, 1d092 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1d036:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1d038:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1d03a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1d03c:	f7ff ff20 	bl	1ce80 <pin_is_output>
   1d040:	b110      	cbz	r0, 1d048 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1d042:	b1da      	cbz	r2, 1d07c <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1d044:	483b      	ldr	r0, [pc, #236]	; (1d134 <nrfx_gpiote_input_configure+0x144>)
   1d046:	e026      	b.n	1d096 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1d048:	4839      	ldr	r0, [pc, #228]	; (1d130 <nrfx_gpiote_input_configure+0x140>)
   1d04a:	f104 0c08 	add.w	ip, r4, #8
   1d04e:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1d052:	f021 0120 	bic.w	r1, r1, #32
   1d056:	04c9      	lsls	r1, r1, #19
   1d058:	0cc9      	lsrs	r1, r1, #19
   1d05a:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1d05e:	b16a      	cbz	r2, 1d07c <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1d060:	2e03      	cmp	r6, #3
   1d062:	d8ef      	bhi.n	1d044 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1d064:	687b      	ldr	r3, [r7, #4]
   1d066:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1d068:	00ba      	lsls	r2, r7, #2
   1d06a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d06e:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1d072:	b996      	cbnz	r6, 1d09a <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1d074:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1d078:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1d07c:	4a2c      	ldr	r2, [pc, #176]	; (1d130 <nrfx_gpiote_input_configure+0x140>)
   1d07e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1d082:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1d086:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1d08a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1d08e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1d092:	bb15      	cbnz	r5, 1d0da <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1d094:	4828      	ldr	r0, [pc, #160]	; (1d138 <nrfx_gpiote_input_configure+0x148>)
}
   1d096:	b005      	add	sp, #20
   1d098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1d09a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1d09e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1d0a2:	f023 0303 	bic.w	r3, r3, #3
   1d0a6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d0aa:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1d0ae:	f041 0120 	orr.w	r1, r1, #32
   1d0b2:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1d0b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1d0ba:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d0be:	0223      	lsls	r3, r4, #8
   1d0c0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1d0c4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1d0c8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1d0cc:	ea43 030e 	orr.w	r3, r3, lr
   1d0d0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1d0d4:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1d0d8:	e7d0      	b.n	1d07c <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1d0da:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1d0dc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1d0e0:	f7ff fef6 	bl	1ced0 <release_handler>
    if (!handler)
   1d0e4:	2e00      	cmp	r6, #0
   1d0e6:	d0d5      	beq.n	1d094 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1d0e8:	4d11      	ldr	r5, [pc, #68]	; (1d130 <nrfx_gpiote_input_configure+0x140>)
   1d0ea:	e9d5 2300 	ldrd	r2, r3, [r5]
   1d0ee:	4296      	cmp	r6, r2
   1d0f0:	d101      	bne.n	1d0f6 <nrfx_gpiote_input_configure+0x106>
   1d0f2:	429f      	cmp	r7, r3
   1d0f4:	d019      	beq.n	1d12a <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1d0f6:	4811      	ldr	r0, [pc, #68]	; (1d13c <nrfx_gpiote_input_configure+0x14c>)
   1d0f8:	f10d 010f 	add.w	r1, sp, #15
   1d0fc:	f7ff fc4e 	bl	1c99c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1d100:	4b0d      	ldr	r3, [pc, #52]	; (1d138 <nrfx_gpiote_input_configure+0x148>)
   1d102:	4298      	cmp	r0, r3
   1d104:	d1c7      	bne.n	1d096 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1d106:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1d10a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1d10e:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1d112:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1d114:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1d118:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1d11c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1d120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1d124:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1d128:	e7b4      	b.n	1d094 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1d12a:	2200      	movs	r2, #0
   1d12c:	e7ed      	b.n	1d10a <nrfx_gpiote_input_configure+0x11a>
   1d12e:	bf00      	nop
   1d130:	2000868c 	.word	0x2000868c
   1d134:	0bad0004 	.word	0x0bad0004
   1d138:	0bad0000 	.word	0x0bad0000
   1d13c:	20008700 	.word	0x20008700

0001d140 <nrfx_gpiote_output_configure>:
{
   1d140:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d142:	4604      	mov	r4, r0
   1d144:	4615      	mov	r5, r2
   1d146:	b085      	sub	sp, #20
    if (p_config)
   1d148:	b321      	cbz	r1, 1d194 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1d14a:	f7ff fe99 	bl	1ce80 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1d14e:	b920      	cbnz	r0, 1d15a <nrfx_gpiote_output_configure+0x1a>
   1d150:	4620      	mov	r0, r4
   1d152:	f7ff fe7f 	bl	1ce54 <pin_in_use_by_te>
   1d156:	2800      	cmp	r0, #0
   1d158:	d161      	bne.n	1d21e <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1d15a:	4620      	mov	r0, r4
   1d15c:	f7ff fe84 	bl	1ce68 <pin_has_trigger>
   1d160:	b110      	cbz	r0, 1d168 <nrfx_gpiote_output_configure+0x28>
   1d162:	784b      	ldrb	r3, [r1, #1]
   1d164:	2b01      	cmp	r3, #1
   1d166:	d05a      	beq.n	1d21e <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1d168:	2301      	movs	r3, #1
   1d16a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1d16e:	2300      	movs	r3, #0
   1d170:	1c4a      	adds	r2, r1, #1
   1d172:	e9cd 1300 	strd	r1, r3, [sp]
   1d176:	4620      	mov	r0, r4
   1d178:	1c8b      	adds	r3, r1, #2
   1d17a:	f10d 010f 	add.w	r1, sp, #15
   1d17e:	f00b fc2d 	bl	289dc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1d182:	4a28      	ldr	r2, [pc, #160]	; (1d224 <nrfx_gpiote_output_configure+0xe4>)
   1d184:	f104 0108 	add.w	r1, r4, #8
   1d188:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1d18c:	f043 0303 	orr.w	r3, r3, #3
   1d190:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1d194:	b915      	cbnz	r5, 1d19c <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1d196:	4824      	ldr	r0, [pc, #144]	; (1d228 <nrfx_gpiote_output_configure+0xe8>)
}
   1d198:	b005      	add	sp, #20
   1d19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1d19c:	4620      	mov	r0, r4
   1d19e:	f7ff fe6f 	bl	1ce80 <pin_is_output>
        if (pin_is_input(pin))
   1d1a2:	2800      	cmp	r0, #0
   1d1a4:	d03b      	beq.n	1d21e <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1d1a6:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1d1aa:	2300      	movs	r3, #0
   1d1ac:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1d1ae:	4e1d      	ldr	r6, [pc, #116]	; (1d224 <nrfx_gpiote_output_configure+0xe4>)
   1d1b0:	f104 0708 	add.w	r7, r4, #8
   1d1b4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1d1b8:	0089      	lsls	r1, r1, #2
   1d1ba:	f020 0020 	bic.w	r0, r0, #32
   1d1be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1d1c2:	04c0      	lsls	r0, r0, #19
   1d1c4:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1d1c8:	0cc0      	lsrs	r0, r0, #19
   1d1ca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1d1ce:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1d1d2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1d1d6:	786a      	ldrb	r2, [r5, #1]
   1d1d8:	2a00      	cmp	r2, #0
   1d1da:	d0dc      	beq.n	1d196 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1d1dc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1d1e0:	78ad      	ldrb	r5, [r5, #2]
   1d1e2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1d1e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1d1ea:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d1ee:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1d1f2:	0223      	lsls	r3, r4, #8
   1d1f4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1d1f8:	0412      	lsls	r2, r2, #16
   1d1fa:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d1fe:	ea43 030e 	orr.w	r3, r3, lr
   1d202:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1d204:	052a      	lsls	r2, r5, #20
   1d206:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1d20a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d20e:	4313      	orrs	r3, r2
   1d210:	f040 0020 	orr.w	r0, r0, #32
   1d214:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1d218:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1d21c:	e7bb      	b.n	1d196 <nrfx_gpiote_output_configure+0x56>
{
   1d21e:	4803      	ldr	r0, [pc, #12]	; (1d22c <nrfx_gpiote_output_configure+0xec>)
   1d220:	e7ba      	b.n	1d198 <nrfx_gpiote_output_configure+0x58>
   1d222:	bf00      	nop
   1d224:	2000868c 	.word	0x2000868c
   1d228:	0bad0000 	.word	0x0bad0000
   1d22c:	0bad0004 	.word	0x0bad0004

0001d230 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1d230:	4b01      	ldr	r3, [pc, #4]	; (1d238 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1d232:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1d236:	4770      	bx	lr
   1d238:	2000868c 	.word	0x2000868c

0001d23c <nrfx_gpiote_channel_get>:
{
   1d23c:	4602      	mov	r2, r0
   1d23e:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1d240:	b959      	cbnz	r1, 1d25a <nrfx_gpiote_channel_get+0x1e>
   1d242:	490c      	ldr	r1, [pc, #48]	; (1d274 <nrfx_gpiote_channel_get+0x38>)
   1d244:	480c      	ldr	r0, [pc, #48]	; (1d278 <nrfx_gpiote_channel_get+0x3c>)
   1d246:	f240 2335 	movw	r3, #565	; 0x235
   1d24a:	4a0c      	ldr	r2, [pc, #48]	; (1d27c <nrfx_gpiote_channel_get+0x40>)
   1d24c:	f007 fe43 	bl	24ed6 <assert_print>
   1d250:	f240 2135 	movw	r1, #565	; 0x235
   1d254:	4809      	ldr	r0, [pc, #36]	; (1d27c <nrfx_gpiote_channel_get+0x40>)
   1d256:	f007 fe37 	bl	24ec8 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1d25a:	f7ff fdfb 	bl	1ce54 <pin_in_use_by_te>
   1d25e:	b138      	cbz	r0, 1d270 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d260:	4b07      	ldr	r3, [pc, #28]	; (1d280 <nrfx_gpiote_channel_get+0x44>)
   1d262:	3208      	adds	r2, #8
   1d264:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1d268:	4806      	ldr	r0, [pc, #24]	; (1d284 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d26a:	0b5b      	lsrs	r3, r3, #13
   1d26c:	700b      	strb	r3, [r1, #0]
}
   1d26e:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d270:	4805      	ldr	r0, [pc, #20]	; (1d288 <nrfx_gpiote_channel_get+0x4c>)
   1d272:	e7fc      	b.n	1d26e <nrfx_gpiote_channel_get+0x32>
   1d274:	0003021d 	.word	0x0003021d
   1d278:	0002b939 	.word	0x0002b939
   1d27c:	000301df 	.word	0x000301df
   1d280:	2000868c 	.word	0x2000868c
   1d284:	0bad0000 	.word	0x0bad0000
   1d288:	0bad0004 	.word	0x0bad0004

0001d28c <nrfx_gpiote_init>:
{
   1d28c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d28e:	4c0f      	ldr	r4, [pc, #60]	; (1d2cc <nrfx_gpiote_init+0x40>)
   1d290:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1d294:	b9bd      	cbnz	r5, 1d2c6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1d296:	2260      	movs	r2, #96	; 0x60
   1d298:	4629      	mov	r1, r5
   1d29a:	f104 0010 	add.w	r0, r4, #16
   1d29e:	f00c fbba 	bl	29a16 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1d2a2:	202f      	movs	r0, #47	; 0x2f
   1d2a4:	f7f2 ffc4 	bl	10230 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d2a8:	4b09      	ldr	r3, [pc, #36]	; (1d2d0 <nrfx_gpiote_init+0x44>)
    return err_code;
   1d2aa:	480a      	ldr	r0, [pc, #40]	; (1d2d4 <nrfx_gpiote_init+0x48>)
   1d2ac:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1d2b0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1d2b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d2b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d2bc:	2301      	movs	r3, #1
   1d2be:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1d2c2:	6763      	str	r3, [r4, #116]	; 0x74
}
   1d2c4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1d2c6:	4804      	ldr	r0, [pc, #16]	; (1d2d8 <nrfx_gpiote_init+0x4c>)
   1d2c8:	e7fc      	b.n	1d2c4 <nrfx_gpiote_init+0x38>
   1d2ca:	bf00      	nop
   1d2cc:	2000868c 	.word	0x2000868c
   1d2d0:	4002f000 	.word	0x4002f000
   1d2d4:	0bad0000 	.word	0x0bad0000
   1d2d8:	0bad0005 	.word	0x0bad0005

0001d2dc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1d2dc:	4b03      	ldr	r3, [pc, #12]	; (1d2ec <nrfx_gpiote_is_init+0x10>)
   1d2de:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1d2e2:	3800      	subs	r0, #0
   1d2e4:	bf18      	it	ne
   1d2e6:	2001      	movne	r0, #1
   1d2e8:	4770      	bx	lr
   1d2ea:	bf00      	nop
   1d2ec:	2000868c 	.word	0x2000868c

0001d2f0 <nrfx_gpiote_channel_free>:
{
   1d2f0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1d2f2:	4801      	ldr	r0, [pc, #4]	; (1d2f8 <nrfx_gpiote_channel_free+0x8>)
   1d2f4:	f7ff bb6e 	b.w	1c9d4 <nrfx_flag32_free>
   1d2f8:	200086fc 	.word	0x200086fc

0001d2fc <nrfx_gpiote_channel_alloc>:
{
   1d2fc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1d2fe:	4801      	ldr	r0, [pc, #4]	; (1d304 <nrfx_gpiote_channel_alloc+0x8>)
   1d300:	f7ff bb4c 	b.w	1c99c <nrfx_flag32_alloc>
   1d304:	200086fc 	.word	0x200086fc

0001d308 <nrfx_gpiote_trigger_enable>:
{
   1d308:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d30a:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1d30c:	f7ff fdac 	bl	1ce68 <pin_has_trigger>
   1d310:	b958      	cbnz	r0, 1d32a <nrfx_gpiote_trigger_enable+0x22>
   1d312:	492b      	ldr	r1, [pc, #172]	; (1d3c0 <nrfx_gpiote_trigger_enable+0xb8>)
   1d314:	f240 33df 	movw	r3, #991	; 0x3df
   1d318:	4a2a      	ldr	r2, [pc, #168]	; (1d3c4 <nrfx_gpiote_trigger_enable+0xbc>)
   1d31a:	482b      	ldr	r0, [pc, #172]	; (1d3c8 <nrfx_gpiote_trigger_enable+0xc0>)
   1d31c:	f007 fddb 	bl	24ed6 <assert_print>
   1d320:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1d324:	4827      	ldr	r0, [pc, #156]	; (1d3c4 <nrfx_gpiote_trigger_enable+0xbc>)
   1d326:	f007 fdcf 	bl	24ec8 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d32a:	4620      	mov	r0, r4
   1d32c:	f7ff fd92 	bl	1ce54 <pin_in_use_by_te>
   1d330:	4a26      	ldr	r2, [pc, #152]	; (1d3cc <nrfx_gpiote_trigger_enable+0xc4>)
   1d332:	f104 0508 	add.w	r5, r4, #8
   1d336:	b1e0      	cbz	r0, 1d372 <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1d338:	4620      	mov	r0, r4
   1d33a:	f7ff fda1 	bl	1ce80 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d33e:	b9c0      	cbnz	r0, 1d372 <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d340:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1d344:	4c22      	ldr	r4, [pc, #136]	; (1d3d0 <nrfx_gpiote_trigger_enable+0xc8>)
   1d346:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1d348:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d34a:	50e0      	str	r0, [r4, r3]
   1d34c:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d34e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d352:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1d356:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1d35a:	f040 0001 	orr.w	r0, r0, #1
   1d35e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1d362:	b121      	cbz	r1, 1d36e <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1d364:	2301      	movs	r3, #1
   1d366:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1d368:	4a1a      	ldr	r2, [pc, #104]	; (1d3d4 <nrfx_gpiote_trigger_enable+0xcc>)
   1d36a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d36e:	b003      	add	sp, #12
   1d370:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1d372:	b949      	cbnz	r1, 1d388 <nrfx_gpiote_trigger_enable+0x80>
   1d374:	4918      	ldr	r1, [pc, #96]	; (1d3d8 <nrfx_gpiote_trigger_enable+0xd0>)
   1d376:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1d37a:	4a12      	ldr	r2, [pc, #72]	; (1d3c4 <nrfx_gpiote_trigger_enable+0xbc>)
   1d37c:	4812      	ldr	r0, [pc, #72]	; (1d3c8 <nrfx_gpiote_trigger_enable+0xc0>)
   1d37e:	f007 fdaa 	bl	24ed6 <assert_print>
   1d382:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1d386:	e7cd      	b.n	1d324 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d388:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1d38c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1d390:	2b04      	cmp	r3, #4
   1d392:	d011      	beq.n	1d3b8 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1d394:	2b05      	cmp	r3, #5
   1d396:	d011      	beq.n	1d3bc <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d398:	a801      	add	r0, sp, #4
   1d39a:	9401      	str	r4, [sp, #4]
   1d39c:	f7ff fdf4 	bl	1cf88 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1d3a0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1d3a2:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1d3a4:	40d9      	lsrs	r1, r3
   1d3a6:	f001 0101 	and.w	r1, r1, #1
   1d3aa:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1d3ac:	4620      	mov	r0, r4
}
   1d3ae:	b003      	add	sp, #12
   1d3b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1d3b4:	f00b bb5f 	b.w	28a76 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1d3b8:	2103      	movs	r1, #3
   1d3ba:	e7f7      	b.n	1d3ac <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1d3bc:	2102      	movs	r1, #2
   1d3be:	e7f5      	b.n	1d3ac <nrfx_gpiote_trigger_enable+0xa4>
   1d3c0:	00030227 	.word	0x00030227
   1d3c4:	000301df 	.word	0x000301df
   1d3c8:	0002b939 	.word	0x0002b939
   1d3cc:	2000868c 	.word	0x2000868c
   1d3d0:	4002f100 	.word	0x4002f100
   1d3d4:	4002f000 	.word	0x4002f000
   1d3d8:	0003023c 	.word	0x0003023c

0001d3dc <nrfx_gpiote_trigger_disable>:
{
   1d3dc:	b508      	push	{r3, lr}
   1d3de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d3e0:	f7ff fd38 	bl	1ce54 <pin_in_use_by_te>
   1d3e4:	b1c8      	cbz	r0, 1d41a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1d3e6:	4610      	mov	r0, r2
   1d3e8:	f7ff fd4a 	bl	1ce80 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d3ec:	b9a8      	cbnz	r0, 1d41a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d3ee:	4b0e      	ldr	r3, [pc, #56]	; (1d428 <nrfx_gpiote_trigger_disable+0x4c>)
   1d3f0:	3208      	adds	r2, #8
   1d3f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1d3f6:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d3f8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1d3fa:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1d3fc:	490b      	ldr	r1, [pc, #44]	; (1d42c <nrfx_gpiote_trigger_disable+0x50>)
   1d3fe:	009b      	lsls	r3, r3, #2
   1d400:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d404:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1d408:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1d40c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d410:	f022 0203 	bic.w	r2, r2, #3
   1d414:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1d418:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d41a:	2100      	movs	r1, #0
}
   1d41c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d420:	4610      	mov	r0, r2
   1d422:	f00b bb28 	b.w	28a76 <nrf_gpio_cfg_sense_set>
   1d426:	bf00      	nop
   1d428:	2000868c 	.word	0x2000868c
   1d42c:	4002f000 	.word	0x4002f000

0001d430 <nrfx_gpiote_pin_uninit>:
{
   1d430:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1d432:	4b10      	ldr	r3, [pc, #64]	; (1d474 <nrfx_gpiote_pin_uninit+0x44>)
   1d434:	f100 0208 	add.w	r2, r0, #8
   1d438:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1d43c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1d43e:	07db      	lsls	r3, r3, #31
   1d440:	d516      	bpl.n	1d470 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1d442:	f7ff ffcb 	bl	1d3dc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1d446:	4620      	mov	r0, r4
   1d448:	f7ff fd80 	bl	1cf4c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d44c:	a801      	add	r0, sp, #4
   1d44e:	9401      	str	r4, [sp, #4]
   1d450:	f7ff fd9a 	bl	1cf88 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d454:	9b01      	ldr	r3, [sp, #4]
   1d456:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d45a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1d45e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1d462:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1d466:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1d46a:	4803      	ldr	r0, [pc, #12]	; (1d478 <nrfx_gpiote_pin_uninit+0x48>)
}
   1d46c:	b002      	add	sp, #8
   1d46e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d470:	4802      	ldr	r0, [pc, #8]	; (1d47c <nrfx_gpiote_pin_uninit+0x4c>)
   1d472:	e7fb      	b.n	1d46c <nrfx_gpiote_pin_uninit+0x3c>
   1d474:	2000868c 	.word	0x2000868c
   1d478:	0bad0000 	.word	0x0bad0000
   1d47c:	0bad0004 	.word	0x0bad0004

0001d480 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1d484:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1d486:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d488:	4634      	mov	r4, r6
{
   1d48a:	4b64      	ldr	r3, [pc, #400]	; (1d61c <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1d48c:	4864      	ldr	r0, [pc, #400]	; (1d620 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d48e:	4965      	ldr	r1, [pc, #404]	; (1d624 <nrfx_gpiote_irq_handler+0x1a4>)
{
   1d490:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d492:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1d494:	b135      	cbz	r5, 1d4a4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1d496:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1d49a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d49c:	bf1e      	ittt	ne
   1d49e:	601c      	strne	r4, [r3, #0]
   1d4a0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1d4a2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d4a4:	3304      	adds	r3, #4
   1d4a6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1d4a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d4ac:	d1f1      	bne.n	1d492 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d4ae:	f8df a170 	ldr.w	sl, [pc, #368]	; 1d620 <nrfx_gpiote_irq_handler+0x1a0>
   1d4b2:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1d4b6:	2b00      	cmp	r3, #0
   1d4b8:	f000 8093 	beq.w	1d5e2 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1d4bc:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1d628 <nrfx_gpiote_irq_handler+0x1a8>
   1d4c0:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1d4c4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1d4c6:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1d4ca:	4b58      	ldr	r3, [pc, #352]	; (1d62c <nrfx_gpiote_irq_handler+0x1ac>)
   1d4cc:	6a1a      	ldr	r2, [r3, #32]
   1d4ce:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1d4d0:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d4d2:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1d4d6:	f10d 0b10 	add.w	fp, sp, #16
   1d4da:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1d4de:	9300      	str	r3, [sp, #0]
   1d4e0:	e04a      	b.n	1d578 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1d4e2:	fa94 f4a4 	rbit	r4, r4
   1d4e6:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1d4ea:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d4ec:	4a50      	ldr	r2, [pc, #320]	; (1d630 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1d4ee:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d4f0:	f104 0308 	add.w	r3, r4, #8
   1d4f4:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1d4f8:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1d4fa:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1d4fc:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1d500:	fa03 f101 	lsl.w	r1, r3, r1
   1d504:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1d508:	08ba      	lsrs	r2, r7, #2
   1d50a:	ea23 0301 	bic.w	r3, r3, r1
   1d50e:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d512:	a803      	add	r0, sp, #12
   1d514:	9201      	str	r2, [sp, #4]
   1d516:	9403      	str	r4, [sp, #12]
   1d518:	f7ff fd36 	bl	1cf88 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d51c:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1d51e:	9a01      	ldr	r2, [sp, #4]
   1d520:	3380      	adds	r3, #128	; 0x80
   1d522:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d526:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1d52a:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d52c:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1d52e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1d532:	d52b      	bpl.n	1d58c <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1d534:	4639      	mov	r1, r7
   1d536:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d538:	b2dd      	uxtb	r5, r3
   1d53a:	f7ff fcab 	bl	1ce94 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d53e:	a803      	add	r0, sp, #12
   1d540:	9403      	str	r4, [sp, #12]
   1d542:	f7ff fd21 	bl	1cf88 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d546:	9b03      	ldr	r3, [sp, #12]
   1d548:	3380      	adds	r3, #128	; 0x80
   1d54a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1d54e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1d552:	429d      	cmp	r5, r3
   1d554:	d107      	bne.n	1d566 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d556:	2100      	movs	r1, #0
   1d558:	4620      	mov	r0, r4
   1d55a:	f00b fa8c 	bl	28a76 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1d55e:	4629      	mov	r1, r5
   1d560:	4620      	mov	r0, r4
   1d562:	f00b fa88 	bl	28a76 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d566:	a803      	add	r0, sp, #12
   1d568:	9403      	str	r4, [sp, #12]
   1d56a:	f7ff fd0d 	bl	1cf88 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1d56e:	2201      	movs	r2, #1
   1d570:	9b03      	ldr	r3, [sp, #12]
   1d572:	fa02 f303 	lsl.w	r3, r2, r3
   1d576:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1d578:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1d57c:	2c00      	cmp	r4, #0
   1d57e:	d1b0      	bne.n	1d4e2 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d580:	f1b9 0f00 	cmp.w	r9, #0
   1d584:	d11d      	bne.n	1d5c2 <nrfx_gpiote_irq_handler+0x142>
   1d586:	f04f 0901 	mov.w	r9, #1
   1d58a:	e7a6      	b.n	1d4da <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1d58c:	2b02      	cmp	r3, #2
   1d58e:	d10c      	bne.n	1d5aa <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d590:	2103      	movs	r1, #3
   1d592:	4620      	mov	r0, r4
   1d594:	f00b fa6f 	bl	28a76 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d598:	f005 0305 	and.w	r3, r5, #5
   1d59c:	2b01      	cmp	r3, #1
   1d59e:	d1e2      	bne.n	1d566 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1d5a0:	4639      	mov	r1, r7
   1d5a2:	4620      	mov	r0, r4
   1d5a4:	f7ff fc76 	bl	1ce94 <call_handler>
   1d5a8:	e7dd      	b.n	1d566 <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d5aa:	2102      	movs	r1, #2
   1d5ac:	4620      	mov	r0, r4
   1d5ae:	9301      	str	r3, [sp, #4]
   1d5b0:	f00b fa61 	bl	28a76 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d5b4:	2d03      	cmp	r5, #3
   1d5b6:	d0f3      	beq.n	1d5a0 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1d5b8:	9b01      	ldr	r3, [sp, #4]
   1d5ba:	2b03      	cmp	r3, #3
   1d5bc:	d1d3      	bne.n	1d566 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1d5be:	2d02      	cmp	r5, #2
   1d5c0:	e7ed      	b.n	1d59e <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d5c2:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1d5c6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1d5ca:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1d5ce:	4917      	ldr	r1, [pc, #92]	; (1d62c <nrfx_gpiote_irq_handler+0x1ac>)
   1d5d0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1d5d2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1d5d6:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1d5d8:	4313      	orrs	r3, r2
   1d5da:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1d5dc:	620a      	str	r2, [r1, #32]
   1d5de:	f47f af78 	bne.w	1d4d2 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1d5e2:	2401      	movs	r4, #1
    while (mask)
   1d5e4:	b916      	cbnz	r6, 1d5ec <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1d5e6:	b007      	add	sp, #28
   1d5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1d5ec:	fa96 f3a6 	rbit	r3, r6
   1d5f0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1d5f4:	fa04 f203 	lsl.w	r2, r4, r3
   1d5f8:	009b      	lsls	r3, r3, #2
   1d5fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d5fe:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d602:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1d606:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1d60a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1d60e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1d612:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1d616:	f7ff fc3d 	bl	1ce94 <call_handler>
   1d61a:	e7e3      	b.n	1d5e4 <nrfx_gpiote_irq_handler+0x164>
   1d61c:	4002f100 	.word	0x4002f100
   1d620:	4002f000 	.word	0x4002f000
   1d624:	4002f120 	.word	0x4002f120
   1d628:	40842500 	.word	0x40842500
   1d62c:	40842800 	.word	0x40842800
   1d630:	2000868c 	.word	0x2000868c

0001d634 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1d634:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d636:	4c08      	ldr	r4, [pc, #32]	; (1d658 <nrfx_ipc_init+0x24>)
{
   1d638:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d63a:	7923      	ldrb	r3, [r4, #4]
{
   1d63c:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d63e:	b943      	cbnz	r3, 1d652 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1d640:	202a      	movs	r0, #42	; 0x2a
   1d642:	f7f2 fdf5 	bl	10230 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d646:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1d648:	4804      	ldr	r0, [pc, #16]	; (1d65c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d64a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1d64c:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1d64e:	60a5      	str	r5, [r4, #8]
}
   1d650:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1d652:	4803      	ldr	r0, [pc, #12]	; (1d660 <nrfx_ipc_init+0x2c>)
   1d654:	e7fc      	b.n	1d650 <nrfx_ipc_init+0x1c>
   1d656:	bf00      	nop
   1d658:	200213dc 	.word	0x200213dc
   1d65c:	0bad0000 	.word	0x0bad0000
   1d660:	0bad000c 	.word	0x0bad000c

0001d664 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1d664:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1d666:	b948      	cbnz	r0, 1d67c <nrfx_ipc_config_load+0x18>
   1d668:	4919      	ldr	r1, [pc, #100]	; (1d6d0 <nrfx_ipc_config_load+0x6c>)
   1d66a:	2345      	movs	r3, #69	; 0x45
   1d66c:	4a19      	ldr	r2, [pc, #100]	; (1d6d4 <nrfx_ipc_config_load+0x70>)
   1d66e:	481a      	ldr	r0, [pc, #104]	; (1d6d8 <nrfx_ipc_config_load+0x74>)
   1d670:	f007 fc31 	bl	24ed6 <assert_print>
   1d674:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d676:	4817      	ldr	r0, [pc, #92]	; (1d6d4 <nrfx_ipc_config_load+0x70>)
   1d678:	f007 fc26 	bl	24ec8 <assert_post_action>
   1d67c:	4b17      	ldr	r3, [pc, #92]	; (1d6dc <nrfx_ipc_config_load+0x78>)
   1d67e:	791b      	ldrb	r3, [r3, #4]
   1d680:	2b01      	cmp	r3, #1
   1d682:	d007      	beq.n	1d694 <nrfx_ipc_config_load+0x30>
   1d684:	4916      	ldr	r1, [pc, #88]	; (1d6e0 <nrfx_ipc_config_load+0x7c>)
   1d686:	2346      	movs	r3, #70	; 0x46
   1d688:	4a12      	ldr	r2, [pc, #72]	; (1d6d4 <nrfx_ipc_config_load+0x70>)
   1d68a:	4813      	ldr	r0, [pc, #76]	; (1d6d8 <nrfx_ipc_config_load+0x74>)
   1d68c:	f007 fc23 	bl	24ed6 <assert_print>
   1d690:	2146      	movs	r1, #70	; 0x46
   1d692:	e7f0      	b.n	1d676 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d694:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1d696:	4a13      	ldr	r2, [pc, #76]	; (1d6e4 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1d698:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1d69c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d6a0:	3301      	adds	r3, #1
   1d6a2:	2b10      	cmp	r3, #16
   1d6a4:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1d6a8:	d1f6      	bne.n	1d698 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d6aa:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1d6ac:	4a0d      	ldr	r2, [pc, #52]	; (1d6e4 <nrfx_ipc_config_load+0x80>)
   1d6ae:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1d6b2:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1d6b6:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d6ba:	3301      	adds	r3, #1
   1d6bc:	2b10      	cmp	r3, #16
   1d6be:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1d6c2:	d1f6      	bne.n	1d6b2 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1d6c4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1d6c8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d6cc:	bd38      	pop	{r3, r4, r5, pc}
   1d6ce:	bf00      	nop
   1d6d0:	0003028e 	.word	0x0003028e
   1d6d4:	00030253 	.word	0x00030253
   1d6d8:	0002b939 	.word	0x0002b939
   1d6dc:	200213dc 	.word	0x200213dc
   1d6e0:	00030297 	.word	0x00030297
   1d6e4:	4002a000 	.word	0x4002a000

0001d6e8 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1d6e8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d6ea:	4b09      	ldr	r3, [pc, #36]	; (1d710 <nrfx_ipc_receive_event_enable+0x28>)
   1d6ec:	791b      	ldrb	r3, [r3, #4]
   1d6ee:	2b01      	cmp	r3, #1
   1d6f0:	d009      	beq.n	1d706 <nrfx_ipc_receive_event_enable+0x1e>
   1d6f2:	4908      	ldr	r1, [pc, #32]	; (1d714 <nrfx_ipc_receive_event_enable+0x2c>)
   1d6f4:	4808      	ldr	r0, [pc, #32]	; (1d718 <nrfx_ipc_receive_event_enable+0x30>)
   1d6f6:	236b      	movs	r3, #107	; 0x6b
   1d6f8:	4a08      	ldr	r2, [pc, #32]	; (1d71c <nrfx_ipc_receive_event_enable+0x34>)
   1d6fa:	f007 fbec 	bl	24ed6 <assert_print>
   1d6fe:	216b      	movs	r1, #107	; 0x6b
   1d700:	4806      	ldr	r0, [pc, #24]	; (1d71c <nrfx_ipc_receive_event_enable+0x34>)
   1d702:	f007 fbe1 	bl	24ec8 <assert_post_action>
   1d706:	4a06      	ldr	r2, [pc, #24]	; (1d720 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1d708:	4083      	lsls	r3, r0
   1d70a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d70e:	bd08      	pop	{r3, pc}
   1d710:	200213dc 	.word	0x200213dc
   1d714:	00030297 	.word	0x00030297
   1d718:	0002b939 	.word	0x0002b939
   1d71c:	00030253 	.word	0x00030253
   1d720:	4002a000 	.word	0x4002a000

0001d724 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1d724:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d726:	4b09      	ldr	r3, [pc, #36]	; (1d74c <nrfx_ipc_receive_event_disable+0x28>)
   1d728:	791b      	ldrb	r3, [r3, #4]
   1d72a:	2b01      	cmp	r3, #1
   1d72c:	d009      	beq.n	1d742 <nrfx_ipc_receive_event_disable+0x1e>
   1d72e:	4908      	ldr	r1, [pc, #32]	; (1d750 <nrfx_ipc_receive_event_disable+0x2c>)
   1d730:	4808      	ldr	r0, [pc, #32]	; (1d754 <nrfx_ipc_receive_event_disable+0x30>)
   1d732:	2371      	movs	r3, #113	; 0x71
   1d734:	4a08      	ldr	r2, [pc, #32]	; (1d758 <nrfx_ipc_receive_event_disable+0x34>)
   1d736:	f007 fbce 	bl	24ed6 <assert_print>
   1d73a:	2171      	movs	r1, #113	; 0x71
   1d73c:	4806      	ldr	r0, [pc, #24]	; (1d758 <nrfx_ipc_receive_event_disable+0x34>)
   1d73e:	f007 fbc3 	bl	24ec8 <assert_post_action>
    p_reg->INTENCLR = mask;
   1d742:	4a06      	ldr	r2, [pc, #24]	; (1d75c <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1d744:	4083      	lsls	r3, r0
   1d746:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1d74a:	bd08      	pop	{r3, pc}
   1d74c:	200213dc 	.word	0x200213dc
   1d750:	00030297 	.word	0x00030297
   1d754:	0002b939 	.word	0x0002b939
   1d758:	00030253 	.word	0x00030253
   1d75c:	4002a000 	.word	0x4002a000

0001d760 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1d760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1d762:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d764:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1d766:	4b12      	ldr	r3, [pc, #72]	; (1d7b0 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1d768:	4d12      	ldr	r5, [pc, #72]	; (1d7b4 <nrfx_ipc_irq_handler+0x54>)
   1d76a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1d76e:	b904      	cbnz	r4, 1d772 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1d770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1d772:	fa94 f0a4 	rbit	r0, r4
   1d776:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1d77a:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1d77e:	280f      	cmp	r0, #15
   1d780:	ea24 0403 	bic.w	r4, r4, r3
   1d784:	dd0b      	ble.n	1d79e <nrfx_ipc_irq_handler+0x3e>
   1d786:	490c      	ldr	r1, [pc, #48]	; (1d7b8 <nrfx_ipc_irq_handler+0x58>)
   1d788:	480c      	ldr	r0, [pc, #48]	; (1d7bc <nrfx_ipc_irq_handler+0x5c>)
   1d78a:	f240 13e7 	movw	r3, #487	; 0x1e7
   1d78e:	4a0c      	ldr	r2, [pc, #48]	; (1d7c0 <nrfx_ipc_irq_handler+0x60>)
   1d790:	f007 fba1 	bl	24ed6 <assert_print>
   1d794:	f240 11e7 	movw	r1, #487	; 0x1e7
   1d798:	4809      	ldr	r0, [pc, #36]	; (1d7c0 <nrfx_ipc_irq_handler+0x60>)
   1d79a:	f007 fb95 	bl	24ec8 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d79e:	4b09      	ldr	r3, [pc, #36]	; (1d7c4 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1d7a0:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d7a2:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1d7a4:	682b      	ldr	r3, [r5, #0]
   1d7a6:	2b00      	cmp	r3, #0
   1d7a8:	d0e1      	beq.n	1d76e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1d7aa:	68a9      	ldr	r1, [r5, #8]
   1d7ac:	4798      	blx	r3
   1d7ae:	e7de      	b.n	1d76e <nrfx_ipc_irq_handler+0xe>
   1d7b0:	4002a000 	.word	0x4002a000
   1d7b4:	200213dc 	.word	0x200213dc
   1d7b8:	0002c88c 	.word	0x0002c88c
   1d7bc:	0002b939 	.word	0x0002b939
   1d7c0:	0002c85a 	.word	0x0002c85a
   1d7c4:	4002a100 	.word	0x4002a100

0001d7c8 <nvmc_word_write>:
   1d7c8:	4a04      	ldr	r2, [pc, #16]	; (1d7dc <nvmc_word_write+0x14>)
   1d7ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1d7ce:	07db      	lsls	r3, r3, #31
   1d7d0:	d5fb      	bpl.n	1d7ca <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1d7d2:	6001      	str	r1, [r0, #0]
   1d7d4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1d7d8:	4770      	bx	lr
   1d7da:	bf00      	nop
   1d7dc:	40039000 	.word	0x40039000

0001d7e0 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d7e0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1d7e4:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d7e6:	d30b      	bcc.n	1d800 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1d7e8:	4910      	ldr	r1, [pc, #64]	; (1d82c <nrfx_nvmc_page_erase+0x4c>)
   1d7ea:	4811      	ldr	r0, [pc, #68]	; (1d830 <nrfx_nvmc_page_erase+0x50>)
   1d7ec:	f44f 7383 	mov.w	r3, #262	; 0x106
   1d7f0:	4a10      	ldr	r2, [pc, #64]	; (1d834 <nrfx_nvmc_page_erase+0x54>)
   1d7f2:	f007 fb70 	bl	24ed6 <assert_print>
   1d7f6:	f44f 7183 	mov.w	r1, #262	; 0x106
   1d7fa:	480e      	ldr	r0, [pc, #56]	; (1d834 <nrfx_nvmc_page_erase+0x54>)
   1d7fc:	f007 fb64 	bl	24ec8 <assert_post_action>
    return !(addr % flash_page_size_get());
   1d800:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1d804:	b97b      	cbnz	r3, 1d826 <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1d806:	2202      	movs	r2, #2
   1d808:	4b0b      	ldr	r3, [pc, #44]	; (1d838 <nrfx_nvmc_page_erase+0x58>)
   1d80a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1d80e:	f04f 32ff 	mov.w	r2, #4294967295
   1d812:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d814:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1d818:	07d2      	lsls	r2, r2, #31
   1d81a:	d5fb      	bpl.n	1d814 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1d81c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1d81e:	4807      	ldr	r0, [pc, #28]	; (1d83c <nrfx_nvmc_page_erase+0x5c>)
   1d820:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1d824:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1d826:	4806      	ldr	r0, [pc, #24]	; (1d840 <nrfx_nvmc_page_erase+0x60>)
   1d828:	e7fc      	b.n	1d824 <nrfx_nvmc_page_erase+0x44>
   1d82a:	bf00      	nop
   1d82c:	00030320 	.word	0x00030320
   1d830:	0002b939 	.word	0x0002b939
   1d834:	000302c4 	.word	0x000302c4
   1d838:	40039000 	.word	0x40039000
   1d83c:	0bad0000 	.word	0x0bad0000
   1d840:	0bad000a 	.word	0x0bad000a

0001d844 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d844:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1d848:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d84a:	d30b      	bcc.n	1d864 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1d84c:	4910      	ldr	r1, [pc, #64]	; (1d890 <nrfx_nvmc_word_write+0x4c>)
   1d84e:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1d852:	4a10      	ldr	r2, [pc, #64]	; (1d894 <nrfx_nvmc_word_write+0x50>)
   1d854:	4810      	ldr	r0, [pc, #64]	; (1d898 <nrfx_nvmc_word_write+0x54>)
   1d856:	f007 fb3e 	bl	24ed6 <assert_print>
   1d85a:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1d85e:	480d      	ldr	r0, [pc, #52]	; (1d894 <nrfx_nvmc_word_write+0x50>)
   1d860:	f007 fb32 	bl	24ec8 <assert_post_action>
   1d864:	f010 0403 	ands.w	r4, r0, #3
   1d868:	d009      	beq.n	1d87e <nrfx_nvmc_word_write+0x3a>
   1d86a:	490c      	ldr	r1, [pc, #48]	; (1d89c <nrfx_nvmc_word_write+0x58>)
   1d86c:	f240 1395 	movw	r3, #405	; 0x195
   1d870:	4a08      	ldr	r2, [pc, #32]	; (1d894 <nrfx_nvmc_word_write+0x50>)
   1d872:	4809      	ldr	r0, [pc, #36]	; (1d898 <nrfx_nvmc_word_write+0x54>)
   1d874:	f007 fb2f 	bl	24ed6 <assert_print>
   1d878:	f240 1195 	movw	r1, #405	; 0x195
   1d87c:	e7ef      	b.n	1d85e <nrfx_nvmc_word_write+0x1a>
   1d87e:	2301      	movs	r3, #1
   1d880:	4d07      	ldr	r5, [pc, #28]	; (1d8a0 <nrfx_nvmc_word_write+0x5c>)
   1d882:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1d886:	f7ff ff9f 	bl	1d7c8 <nvmc_word_write>
   1d88a:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1d88e:	bd38      	pop	{r3, r4, r5, pc}
   1d890:	0003033a 	.word	0x0003033a
   1d894:	000302c4 	.word	0x000302c4
   1d898:	0002b939 	.word	0x0002b939
   1d89c:	00030354 	.word	0x00030354
   1d8a0:	40039000 	.word	0x40039000

0001d8a4 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1d8a4:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1d8a6:	4d43      	ldr	r5, [pc, #268]	; (1d9b4 <qspi_xfer+0x110>)
   1d8a8:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1d8ac:	b94c      	cbnz	r4, 1d8c2 <qspi_xfer+0x1e>
   1d8ae:	4942      	ldr	r1, [pc, #264]	; (1d9b8 <qspi_xfer+0x114>)
   1d8b0:	2368      	movs	r3, #104	; 0x68
   1d8b2:	4a42      	ldr	r2, [pc, #264]	; (1d9bc <qspi_xfer+0x118>)
   1d8b4:	4842      	ldr	r0, [pc, #264]	; (1d9c0 <qspi_xfer+0x11c>)
   1d8b6:	f007 fb0e 	bl	24ed6 <assert_print>
   1d8ba:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1d8bc:	483f      	ldr	r0, [pc, #252]	; (1d9bc <qspi_xfer+0x118>)
   1d8be:	f007 fb03 	bl	24ec8 <assert_post_action>
   1d8c2:	b938      	cbnz	r0, 1d8d4 <qspi_xfer+0x30>
   1d8c4:	493f      	ldr	r1, [pc, #252]	; (1d9c4 <qspi_xfer+0x120>)
   1d8c6:	2369      	movs	r3, #105	; 0x69
   1d8c8:	4a3c      	ldr	r2, [pc, #240]	; (1d9bc <qspi_xfer+0x118>)
   1d8ca:	483d      	ldr	r0, [pc, #244]	; (1d9c0 <qspi_xfer+0x11c>)
   1d8cc:	f007 fb03 	bl	24ed6 <assert_print>
   1d8d0:	2169      	movs	r1, #105	; 0x69
   1d8d2:	e7f3      	b.n	1d8bc <qspi_xfer+0x18>
   1d8d4:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1d8d8:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1d8dc:	d165      	bne.n	1d9aa <qspi_xfer+0x106>
   1d8de:	0786      	lsls	r6, r0, #30
   1d8e0:	d163      	bne.n	1d9aa <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1d8e2:	2c01      	cmp	r4, #1
   1d8e4:	d001      	beq.n	1d8ea <qspi_xfer+0x46>
   1d8e6:	429c      	cmp	r4, r3
   1d8e8:	d161      	bne.n	1d9ae <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1d8ea:	682c      	ldr	r4, [r5, #0]
   1d8ec:	bb04      	cbnz	r4, 1d930 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d8ee:	2b02      	cmp	r3, #2
   1d8f0:	4b35      	ldr	r3, [pc, #212]	; (1d9c8 <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1d8f2:	bf0b      	itete	eq
   1d8f4:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1d8f8:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d8fc:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d900:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1d904:	bf0b      	itete	eq
   1d906:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1d90a:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1d90e:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1d910:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d912:	2100      	movs	r1, #0
   1d914:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d918:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1d91c:	2201      	movs	r2, #1
   1d91e:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1d922:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d924:	4a28      	ldr	r2, [pc, #160]	; (1d9c8 <qspi_xfer+0x124>)
   1d926:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1d92a:	2b00      	cmp	r3, #0
   1d92c:	d0fb      	beq.n	1d926 <qspi_xfer+0x82>
   1d92e:	e00d      	b.n	1d94c <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1d930:	68ae      	ldr	r6, [r5, #8]
   1d932:	4c25      	ldr	r4, [pc, #148]	; (1d9c8 <qspi_xfer+0x124>)
   1d934:	b166      	cbz	r6, 1d950 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d936:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1d938:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1d93a:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1d93c:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d93e:	d12d      	bne.n	1d99c <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1d940:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d944:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1d948:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1d94c:	481f      	ldr	r0, [pc, #124]	; (1d9cc <qspi_xfer+0x128>)
}
   1d94e:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d950:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1d952:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1d956:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1d958:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1d95a:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1d95c:	bf0c      	ite	eq
   1d95e:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1d962:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d966:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d96a:	bf0b      	itete	eq
   1d96c:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d970:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1d974:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1d978:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1d97c:	bf08      	it	eq
   1d97e:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d980:	4911      	ldr	r1, [pc, #68]	; (1d9c8 <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1d982:	bf18      	it	ne
   1d984:	2304      	movne	r3, #4
   1d986:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1d98a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d98c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d990:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1d994:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d998:	601a      	str	r2, [r3, #0]
}
   1d99a:	e7d7      	b.n	1d94c <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1d99c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d9a0:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1d9a4:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1d9a8:	e7d0      	b.n	1d94c <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1d9aa:	4809      	ldr	r0, [pc, #36]	; (1d9d0 <qspi_xfer+0x12c>)
   1d9ac:	e7cf      	b.n	1d94e <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1d9ae:	4809      	ldr	r0, [pc, #36]	; (1d9d4 <qspi_xfer+0x130>)
   1d9b0:	e7cd      	b.n	1d94e <qspi_xfer+0xaa>
   1d9b2:	bf00      	nop
   1d9b4:	200213e8 	.word	0x200213e8
   1d9b8:	000303b9 	.word	0x000303b9
   1d9bc:	0003037d 	.word	0x0003037d
   1d9c0:	0002b939 	.word	0x0002b939
   1d9c4:	000303e5 	.word	0x000303e5
   1d9c8:	4002b000 	.word	0x4002b000
   1d9cc:	0bad0000 	.word	0x0bad0000
   1d9d0:	0bad000a 	.word	0x0bad000a
   1d9d4:	0bad000b 	.word	0x0bad000b

0001d9d8 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1d9d8:	b538      	push	{r3, r4, r5, lr}
   1d9da:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d9dc:	4d06      	ldr	r5, [pc, #24]	; (1d9f8 <qspi_ready_wait+0x20>)
   1d9de:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1d9e2:	b933      	cbnz	r3, 1d9f2 <qspi_ready_wait+0x1a>
   1d9e4:	200a      	movs	r0, #10
   1d9e6:	f00a ffdb 	bl	289a0 <nrfx_busy_wait>
   1d9ea:	3c01      	subs	r4, #1
   1d9ec:	d1f7      	bne.n	1d9de <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1d9ee:	4803      	ldr	r0, [pc, #12]	; (1d9fc <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1d9f0:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1d9f2:	4803      	ldr	r0, [pc, #12]	; (1da00 <qspi_ready_wait+0x28>)
   1d9f4:	e7fc      	b.n	1d9f0 <qspi_ready_wait+0x18>
   1d9f6:	bf00      	nop
   1d9f8:	4002b000 	.word	0x4002b000
   1d9fc:	0bad0007 	.word	0x0bad0007
   1da00:	0bad0000 	.word	0x0bad0000

0001da04 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1da04:	4b08      	ldr	r3, [pc, #32]	; (1da28 <qspi_event_xfer_handle.constprop.0+0x24>)
   1da06:	689a      	ldr	r2, [r3, #8]
   1da08:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1da0a:	691a      	ldr	r2, [r3, #16]
   1da0c:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1da0e:	699a      	ldr	r2, [r3, #24]
   1da10:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1da12:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1da14:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1da16:	b132      	cbz	r2, 1da26 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1da18:	695a      	ldr	r2, [r3, #20]
   1da1a:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1da1c:	69da      	ldr	r2, [r3, #28]
   1da1e:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1da20:	2200      	movs	r2, #0
   1da22:	60da      	str	r2, [r3, #12]
   1da24:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1da26:	4770      	bx	lr
   1da28:	200213e8 	.word	0x200213e8

0001da2c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1da2c:	b508      	push	{r3, lr}
    switch (port)
   1da2e:	0943      	lsrs	r3, r0, #5
   1da30:	d00d      	beq.n	1da4e <nrf_gpio_cfg.constprop.0+0x22>
   1da32:	2b01      	cmp	r3, #1
   1da34:	d01e      	beq.n	1da74 <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1da36:	4914      	ldr	r1, [pc, #80]	; (1da88 <nrf_gpio_cfg.constprop.0+0x5c>)
   1da38:	4814      	ldr	r0, [pc, #80]	; (1da8c <nrf_gpio_cfg.constprop.0+0x60>)
   1da3a:	f240 2347 	movw	r3, #583	; 0x247
   1da3e:	4a14      	ldr	r2, [pc, #80]	; (1da90 <nrf_gpio_cfg.constprop.0+0x64>)
   1da40:	f007 fa49 	bl	24ed6 <assert_print>
   1da44:	f240 2147 	movw	r1, #583	; 0x247
   1da48:	4811      	ldr	r0, [pc, #68]	; (1da90 <nrf_gpio_cfg.constprop.0+0x64>)
   1da4a:	f007 fa3d 	bl	24ec8 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1da4e:	f04f 33ff 	mov.w	r3, #4294967295
   1da52:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1da54:	07da      	lsls	r2, r3, #31
   1da56:	d5ee      	bpl.n	1da36 <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1da58:	4a0e      	ldr	r2, [pc, #56]	; (1da94 <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1da5a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1da5e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1da62:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1da66:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1da6a:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1da6e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1da72:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1da74:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1da78:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1da7c:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1da7e:	07db      	lsls	r3, r3, #31
   1da80:	d5d9      	bpl.n	1da36 <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1da82:	4a05      	ldr	r2, [pc, #20]	; (1da98 <nrf_gpio_cfg.constprop.0+0x6c>)
   1da84:	e7e9      	b.n	1da5a <nrf_gpio_cfg.constprop.0+0x2e>
   1da86:	bf00      	nop
   1da88:	0002f8bf 	.word	0x0002f8bf
   1da8c:	0002b939 	.word	0x0002b939
   1da90:	0002f88c 	.word	0x0002f88c
   1da94:	40842500 	.word	0x40842500
   1da98:	40842800 	.word	0x40842800

0001da9c <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1da9c:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1da9e:	4b0e      	ldr	r3, [pc, #56]	; (1dad8 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1daa0:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1daa2:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1daa6:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1daaa:	2807      	cmp	r0, #7
   1daac:	d813      	bhi.n	1dad6 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1daae:	e8df f000 	tbb	[pc, r0]
   1dab2:	0f11      	.short	0x0f11
   1dab4:	080a0b0d 	.word	0x080a0b0d
   1dab8:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1daba:	0e10      	lsrs	r0, r2, #24
   1dabc:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1dabe:	0c10      	lsrs	r0, r2, #16
   1dac0:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1dac2:	0a10      	lsrs	r0, r2, #8
   1dac4:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1dac6:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1dac8:	0e1a      	lsrs	r2, r3, #24
   1daca:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1dacc:	0c1a      	lsrs	r2, r3, #16
   1dace:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1dad0:	0a1a      	lsrs	r2, r3, #8
   1dad2:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1dad4:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1dad6:	bd10      	pop	{r4, pc}
   1dad8:	4002b000 	.word	0x4002b000

0001dadc <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1dadc:	3802      	subs	r0, #2
   1dade:	2807      	cmp	r0, #7
   1dae0:	d81f      	bhi.n	1db22 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1dae2:	e8df f000 	tbb	[pc, r0]
   1dae6:	2729      	.short	0x2729
   1dae8:	21231125 	.word	0x21231125
   1daec:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1daee:	79cb      	ldrb	r3, [r1, #7]
   1daf0:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1daf2:	798a      	ldrb	r2, [r1, #6]
   1daf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1daf8:	794a      	ldrb	r2, [r1, #5]
   1dafa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1dafe:	790a      	ldrb	r2, [r1, #4]
   1db00:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1db02:	4a0e      	ldr	r2, [pc, #56]	; (1db3c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1db04:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1db08:	78cb      	ldrb	r3, [r1, #3]
   1db0a:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1db0c:	788a      	ldrb	r2, [r1, #2]
   1db0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1db12:	784a      	ldrb	r2, [r1, #1]
   1db14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1db18:	780a      	ldrb	r2, [r1, #0]
   1db1a:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1db1c:	4a07      	ldr	r2, [pc, #28]	; (1db3c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1db1e:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1db22:	4770      	bx	lr
    switch (length)
   1db24:	2300      	movs	r3, #0
   1db26:	e7e4      	b.n	1daf2 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1db28:	2300      	movs	r3, #0
   1db2a:	e7e5      	b.n	1daf8 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1db2c:	2300      	movs	r3, #0
   1db2e:	e7e6      	b.n	1dafe <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1db30:	2300      	movs	r3, #0
   1db32:	e7eb      	b.n	1db0c <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1db34:	2300      	movs	r3, #0
   1db36:	e7ec      	b.n	1db12 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1db38:	2300      	movs	r3, #0
   1db3a:	e7ed      	b.n	1db18 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1db3c:	4002b000 	.word	0x4002b000

0001db40 <nrfx_qspi_init>:
{
   1db40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db42:	460d      	mov	r5, r1
   1db44:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1db46:	4604      	mov	r4, r0
   1db48:	b958      	cbnz	r0, 1db62 <nrfx_qspi_init+0x22>
   1db4a:	496e      	ldr	r1, [pc, #440]	; (1dd04 <nrfx_qspi_init+0x1c4>)
   1db4c:	486e      	ldr	r0, [pc, #440]	; (1dd08 <nrfx_qspi_init+0x1c8>)
   1db4e:	f44f 7388 	mov.w	r3, #272	; 0x110
   1db52:	4a6e      	ldr	r2, [pc, #440]	; (1dd0c <nrfx_qspi_init+0x1cc>)
   1db54:	f007 f9bf 	bl	24ed6 <assert_print>
   1db58:	f44f 7188 	mov.w	r1, #272	; 0x110
   1db5c:	486b      	ldr	r0, [pc, #428]	; (1dd0c <nrfx_qspi_init+0x1cc>)
   1db5e:	f007 f9b3 	bl	24ec8 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1db62:	4f6b      	ldr	r7, [pc, #428]	; (1dd10 <nrfx_qspi_init+0x1d0>)
   1db64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1db68:	2b00      	cmp	r3, #0
   1db6a:	f040 80c6 	bne.w	1dcfa <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1db6e:	7cc2      	ldrb	r2, [r0, #19]
   1db70:	b112      	cbz	r2, 1db78 <nrfx_qspi_init+0x38>
   1db72:	7d03      	ldrb	r3, [r0, #20]
   1db74:	2b00      	cmp	r3, #0
   1db76:	d170      	bne.n	1dc5a <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1db78:	7920      	ldrb	r0, [r4, #4]
   1db7a:	28ff      	cmp	r0, #255	; 0xff
   1db7c:	f000 80bf 	beq.w	1dcfe <nrfx_qspi_init+0x1be>
   1db80:	7963      	ldrb	r3, [r4, #5]
   1db82:	2bff      	cmp	r3, #255	; 0xff
   1db84:	f000 80bb 	beq.w	1dcfe <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1db88:	79a3      	ldrb	r3, [r4, #6]
   1db8a:	2bff      	cmp	r3, #255	; 0xff
   1db8c:	f000 80b7 	beq.w	1dcfe <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1db90:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1db92:	29ff      	cmp	r1, #255	; 0xff
   1db94:	f000 80b3 	beq.w	1dcfe <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1db98:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1db9a:	f8df c178 	ldr.w	ip, [pc, #376]	; 1dd14 <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1db9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1dba2:	4563      	cmp	r3, ip
   1dba4:	f040 80ab 	bne.w	1dcfe <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1dba8:	290e      	cmp	r1, #14
   1dbaa:	f040 80a8 	bne.w	1dcfe <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1dbae:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1dbb0:	2bff      	cmp	r3, #255	; 0xff
   1dbb2:	d002      	beq.n	1dbba <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1dbb4:	2b0f      	cmp	r3, #15
   1dbb6:	f040 80a2 	bne.w	1dcfe <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1dbba:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1dbbc:	2bff      	cmp	r3, #255	; 0xff
   1dbbe:	d002      	beq.n	1dbc6 <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1dbc0:	2b10      	cmp	r3, #16
   1dbc2:	f040 809c 	bne.w	1dcfe <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1dbc6:	b9d2      	cbnz	r2, 1dbfe <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1dbc8:	2103      	movs	r1, #3
   1dbca:	f7ff ff2f 	bl	1da2c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1dbce:	2103      	movs	r1, #3
   1dbd0:	7960      	ldrb	r0, [r4, #5]
   1dbd2:	f7ff ff2b 	bl	1da2c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1dbd6:	2103      	movs	r1, #3
   1dbd8:	79a0      	ldrb	r0, [r4, #6]
   1dbda:	f7ff ff27 	bl	1da2c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1dbde:	79e0      	ldrb	r0, [r4, #7]
   1dbe0:	2103      	movs	r1, #3
   1dbe2:	f7ff ff23 	bl	1da2c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1dbe6:	7a20      	ldrb	r0, [r4, #8]
   1dbe8:	28ff      	cmp	r0, #255	; 0xff
   1dbea:	d002      	beq.n	1dbf2 <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1dbec:	2103      	movs	r1, #3
   1dbee:	f7ff ff1d 	bl	1da2c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1dbf2:	7a60      	ldrb	r0, [r4, #9]
   1dbf4:	28ff      	cmp	r0, #255	; 0xff
   1dbf6:	d002      	beq.n	1dbfe <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1dbf8:	2103      	movs	r1, #3
   1dbfa:	f7ff ff17 	bl	1da2c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1dbfe:	7d23      	ldrb	r3, [r4, #20]
   1dc00:	bb5b      	cbnz	r3, 1dc5a <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1dc02:	7923      	ldrb	r3, [r4, #4]
   1dc04:	2bff      	cmp	r3, #255	; 0xff
   1dc06:	bf14      	ite	ne
   1dc08:	461a      	movne	r2, r3
   1dc0a:	f04f 32ff 	moveq.w	r2, #4294967295
   1dc0e:	4b42      	ldr	r3, [pc, #264]	; (1dd18 <nrfx_qspi_init+0x1d8>)
   1dc10:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1dc14:	7962      	ldrb	r2, [r4, #5]
   1dc16:	2aff      	cmp	r2, #255	; 0xff
   1dc18:	bf08      	it	eq
   1dc1a:	f04f 32ff 	moveq.w	r2, #4294967295
   1dc1e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1dc22:	79a2      	ldrb	r2, [r4, #6]
   1dc24:	2aff      	cmp	r2, #255	; 0xff
   1dc26:	bf08      	it	eq
   1dc28:	f04f 32ff 	moveq.w	r2, #4294967295
   1dc2c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1dc30:	79e2      	ldrb	r2, [r4, #7]
   1dc32:	2aff      	cmp	r2, #255	; 0xff
   1dc34:	bf08      	it	eq
   1dc36:	f04f 32ff 	moveq.w	r2, #4294967295
   1dc3a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1dc3e:	7a22      	ldrb	r2, [r4, #8]
   1dc40:	2aff      	cmp	r2, #255	; 0xff
   1dc42:	bf08      	it	eq
   1dc44:	f04f 32ff 	moveq.w	r2, #4294967295
   1dc48:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1dc4c:	7a62      	ldrb	r2, [r4, #9]
   1dc4e:	2aff      	cmp	r2, #255	; 0xff
   1dc50:	bf08      	it	eq
   1dc52:	f04f 32ff 	moveq.w	r2, #4294967295
   1dc56:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1dc5a:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1dc5c:	4a2e      	ldr	r2, [pc, #184]	; (1dd18 <nrfx_qspi_init+0x1d8>)
   1dc5e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1dc62:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1dc64:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1dc66:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1dc68:	019b      	lsls	r3, r3, #6
   1dc6a:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1dc6e:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1dc70:	7b61      	ldrb	r1, [r4, #13]
   1dc72:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1dc76:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1dc7a:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1dc7c:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1dc80:	bbb1      	cbnz	r1, 1dcf0 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1dc82:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1dc86:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1dc8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1dc8e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1dc92:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1dc96:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1dc98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1dc9c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1dca0:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1dca2:	7be1      	ldrb	r1, [r4, #15]
   1dca4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1dca8:	7c21      	ldrb	r1, [r4, #16]
   1dcaa:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1dcae:	7c61      	ldrb	r1, [r4, #17]
   1dcb0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1dcb4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1dcb8:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1dcba:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1dcbe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1dcc2:	2301      	movs	r3, #1
   1dcc4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1dcc8:	b115      	cbz	r5, 1dcd0 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1dcca:	202b      	movs	r0, #43	; 0x2b
   1dccc:	f7f2 fab0 	bl	10230 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1dcd0:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1dcd2:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1dcd4:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1dcd8:	4b0f      	ldr	r3, [pc, #60]	; (1dd18 <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1dcda:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1dcde:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dce2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dce6:	601a      	str	r2, [r3, #0]
}
   1dce8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1dcec:	f7ff be74 	b.w	1d9d8 <qspi_ready_wait>
        regval &= ~(1 << 17);
   1dcf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1dcf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1dcf8:	e7c5      	b.n	1dc86 <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1dcfa:	4808      	ldr	r0, [pc, #32]	; (1dd1c <nrfx_qspi_init+0x1dc>)
}
   1dcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1dcfe:	4808      	ldr	r0, [pc, #32]	; (1dd20 <nrfx_qspi_init+0x1e0>)
   1dd00:	e7fc      	b.n	1dcfc <nrfx_qspi_init+0x1bc>
   1dd02:	bf00      	nop
   1dd04:	0003028e 	.word	0x0003028e
   1dd08:	0002b939 	.word	0x0002b939
   1dd0c:	0003037d 	.word	0x0003037d
   1dd10:	200213e8 	.word	0x200213e8
   1dd14:	000d1211 	.word	0x000d1211
   1dd18:	4002b000 	.word	0x4002b000
   1dd1c:	0bad0005 	.word	0x0bad0005
   1dd20:	0bad0004 	.word	0x0bad0004

0001dd24 <nrfx_qspi_cinstr_xfer>:
{
   1dd24:	b570      	push	{r4, r5, r6, lr}
   1dd26:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1dd28:	4a26      	ldr	r2, [pc, #152]	; (1ddc4 <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1dd2a:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1dd2c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1dd30:	b95a      	cbnz	r2, 1dd4a <nrfx_qspi_cinstr_xfer+0x26>
   1dd32:	4925      	ldr	r1, [pc, #148]	; (1ddc8 <nrfx_qspi_cinstr_xfer+0xa4>)
   1dd34:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1dd38:	4a24      	ldr	r2, [pc, #144]	; (1ddcc <nrfx_qspi_cinstr_xfer+0xa8>)
   1dd3a:	4825      	ldr	r0, [pc, #148]	; (1ddd0 <nrfx_qspi_cinstr_xfer+0xac>)
   1dd3c:	f007 f8cb 	bl	24ed6 <assert_print>
   1dd40:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1dd44:	4821      	ldr	r0, [pc, #132]	; (1ddcc <nrfx_qspi_cinstr_xfer+0xa8>)
   1dd46:	f007 f8bf 	bl	24ec8 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1dd4a:	2a01      	cmp	r2, #1
   1dd4c:	d137      	bne.n	1ddbe <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dd4e:	2200      	movs	r2, #0
   1dd50:	4e20      	ldr	r6, [pc, #128]	; (1ddd4 <nrfx_qspi_cinstr_xfer+0xb0>)
   1dd52:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1dd56:	b111      	cbz	r1, 1dd5e <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1dd58:	7840      	ldrb	r0, [r0, #1]
   1dd5a:	f7ff febf 	bl	1dadc <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1dd5e:	2301      	movs	r3, #1
   1dd60:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1dd64:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1dd66:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1dd68:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1dd6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1dd6e:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1dd70:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1dd72:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1dd74:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1dd78:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1dd7a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1dd7e:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1dd80:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1dd84:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1dd88:	f7ff fe26 	bl	1d9d8 <qspi_ready_wait>
   1dd8c:	4b12      	ldr	r3, [pc, #72]	; (1ddd8 <nrfx_qspi_cinstr_xfer+0xb4>)
   1dd8e:	4298      	cmp	r0, r3
   1dd90:	d10b      	bne.n	1ddaa <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1dd92:	792b      	ldrb	r3, [r5, #4]
   1dd94:	b993      	cbnz	r3, 1ddbc <nrfx_qspi_cinstr_xfer+0x98>
   1dd96:	4911      	ldr	r1, [pc, #68]	; (1dddc <nrfx_qspi_cinstr_xfer+0xb8>)
   1dd98:	f240 136b 	movw	r3, #363	; 0x16b
   1dd9c:	4a0b      	ldr	r2, [pc, #44]	; (1ddcc <nrfx_qspi_cinstr_xfer+0xa8>)
   1dd9e:	480c      	ldr	r0, [pc, #48]	; (1ddd0 <nrfx_qspi_cinstr_xfer+0xac>)
   1dda0:	f007 f899 	bl	24ed6 <assert_print>
   1dda4:	f240 116b 	movw	r1, #363	; 0x16b
   1dda8:	e7cc      	b.n	1dd44 <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ddaa:	2300      	movs	r3, #0
   1ddac:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1ddb0:	b11c      	cbz	r4, 1ddba <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1ddb2:	4621      	mov	r1, r4
   1ddb4:	7868      	ldrb	r0, [r5, #1]
   1ddb6:	f7ff fe71 	bl	1da9c <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1ddba:	4809      	ldr	r0, [pc, #36]	; (1dde0 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1ddbc:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1ddbe:	4809      	ldr	r0, [pc, #36]	; (1dde4 <nrfx_qspi_cinstr_xfer+0xc0>)
   1ddc0:	e7fc      	b.n	1ddbc <nrfx_qspi_cinstr_xfer+0x98>
   1ddc2:	bf00      	nop
   1ddc4:	200213e8 	.word	0x200213e8
   1ddc8:	000303b9 	.word	0x000303b9
   1ddcc:	0003037d 	.word	0x0003037d
   1ddd0:	0002b939 	.word	0x0002b939
   1ddd4:	4002b000 	.word	0x4002b000
   1ddd8:	0bad0007 	.word	0x0bad0007
   1dddc:	000303fd 	.word	0x000303fd
   1dde0:	0bad0000 	.word	0x0bad0000
   1dde4:	0bad000b 	.word	0x0bad000b

0001dde8 <nrfx_qspi_mem_busy_check>:
{
   1dde8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   1ddea:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   1ddec:	4a0c      	ldr	r2, [pc, #48]	; (1de20 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1ddee:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   1ddf0:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1ddf2:	f10d 0207 	add.w	r2, sp, #7
   1ddf6:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   1ddf8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   1ddfc:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1de00:	f7ff ff90 	bl	1dd24 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1de04:	4b07      	ldr	r3, [pc, #28]	; (1de24 <nrfx_qspi_mem_busy_check+0x3c>)
   1de06:	4298      	cmp	r0, r3
   1de08:	d106      	bne.n	1de18 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   1de0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   1de0e:	f013 0f01 	tst.w	r3, #1
   1de12:	4b05      	ldr	r3, [pc, #20]	; (1de28 <nrfx_qspi_mem_busy_check+0x40>)
   1de14:	bf18      	it	ne
   1de16:	4618      	movne	r0, r3
}
   1de18:	b005      	add	sp, #20
   1de1a:	f85d fb04 	ldr.w	pc, [sp], #4
   1de1e:	bf00      	nop
   1de20:	01000205 	.word	0x01000205
   1de24:	0bad0000 	.word	0x0bad0000
   1de28:	0bad000b 	.word	0x0bad000b

0001de2c <nrfx_qspi_uninit>:
{
   1de2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1de30:	4e29      	ldr	r6, [pc, #164]	; (1ded8 <nrfx_qspi_uninit+0xac>)
   1de32:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1de36:	b95b      	cbnz	r3, 1de50 <nrfx_qspi_uninit+0x24>
   1de38:	4928      	ldr	r1, [pc, #160]	; (1dedc <nrfx_qspi_uninit+0xb0>)
   1de3a:	4829      	ldr	r0, [pc, #164]	; (1dee0 <nrfx_qspi_uninit+0xb4>)
   1de3c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1de40:	4a28      	ldr	r2, [pc, #160]	; (1dee4 <nrfx_qspi_uninit+0xb8>)
   1de42:	f007 f848 	bl	24ed6 <assert_print>
   1de46:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1de4a:	4826      	ldr	r0, [pc, #152]	; (1dee4 <nrfx_qspi_uninit+0xb8>)
   1de4c:	f007 f83c 	bl	24ec8 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1de50:	202b      	movs	r0, #43	; 0x2b
   1de52:	f7f2 f9fb 	bl	1024c <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   1de56:	4b24      	ldr	r3, [pc, #144]	; (1dee8 <nrfx_qspi_uninit+0xbc>)
   1de58:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   1de5c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1de60:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   1de64:	bf04      	itt	eq
   1de66:	4a21      	ldreq	r2, [pc, #132]	; (1deec <nrfx_qspi_uninit+0xc0>)
   1de68:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   1de6c:	2201      	movs	r2, #1
   1de6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de72:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1de74:	2200      	movs	r2, #0
   1de76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   1de7e:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   1de82:	bb22      	cbnz	r2, 1dece <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   1de84:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   1de88:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   1de8c:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   1de8e:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   1de92:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   1de96:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   1de9a:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   1de9e:	f00a fe02 	bl	28aa6 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   1dea2:	fa5f f089 	uxtb.w	r0, r9
   1dea6:	f00a fdfe 	bl	28aa6 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   1deaa:	fa5f f088 	uxtb.w	r0, r8
   1deae:	f00a fdfa 	bl	28aa6 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   1deb2:	b2f8      	uxtb	r0, r7
   1deb4:	f00a fdf7 	bl	28aa6 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1deb8:	b2e8      	uxtb	r0, r5
   1deba:	28ff      	cmp	r0, #255	; 0xff
   1debc:	b2e4      	uxtb	r4, r4
   1debe:	d001      	beq.n	1dec4 <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   1dec0:	f00a fdf1 	bl	28aa6 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1dec4:	2cff      	cmp	r4, #255	; 0xff
   1dec6:	d002      	beq.n	1dece <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   1dec8:	4620      	mov	r0, r4
   1deca:	f00a fdec 	bl	28aa6 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1dece:	2300      	movs	r3, #0
   1ded0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1ded4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ded8:	200213e8 	.word	0x200213e8
   1dedc:	000303b9 	.word	0x000303b9
   1dee0:	0002b939 	.word	0x0002b939
   1dee4:	0003037d 	.word	0x0003037d
   1dee8:	4002b000 	.word	0x4002b000
   1deec:	00030100 	.word	0x00030100

0001def0 <nrfx_qspi_erase>:
{
   1def0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1def2:	4a1a      	ldr	r2, [pc, #104]	; (1df5c <nrfx_qspi_erase+0x6c>)
   1def4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1def8:	b95b      	cbnz	r3, 1df12 <nrfx_qspi_erase+0x22>
   1defa:	4919      	ldr	r1, [pc, #100]	; (1df60 <nrfx_qspi_erase+0x70>)
   1defc:	4819      	ldr	r0, [pc, #100]	; (1df64 <nrfx_qspi_erase+0x74>)
   1defe:	f44f 730a 	mov.w	r3, #552	; 0x228
   1df02:	4a19      	ldr	r2, [pc, #100]	; (1df68 <nrfx_qspi_erase+0x78>)
   1df04:	f006 ffe7 	bl	24ed6 <assert_print>
   1df08:	f44f 710a 	mov.w	r1, #552	; 0x228
   1df0c:	4816      	ldr	r0, [pc, #88]	; (1df68 <nrfx_qspi_erase+0x78>)
   1df0e:	f006 ffdb 	bl	24ec8 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   1df12:	078c      	lsls	r4, r1, #30
   1df14:	d11e      	bne.n	1df54 <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   1df16:	6814      	ldr	r4, [r2, #0]
   1df18:	b10c      	cbz	r4, 1df1e <nrfx_qspi_erase+0x2e>
   1df1a:	2b01      	cmp	r3, #1
   1df1c:	d11c      	bne.n	1df58 <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   1df1e:	2304      	movs	r3, #4
   1df20:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   1df24:	4b11      	ldr	r3, [pc, #68]	; (1df6c <nrfx_qspi_erase+0x7c>)
   1df26:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1df2a:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   1df2c:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1df30:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1df34:	2101      	movs	r1, #1
   1df36:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   1df38:	6810      	ldr	r0, [r2, #0]
   1df3a:	b940      	cbnz	r0, 1df4e <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1df3c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1df40:	2900      	cmp	r1, #0
   1df42:	d0fb      	beq.n	1df3c <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   1df44:	2301      	movs	r3, #1
   1df46:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   1df4a:	4809      	ldr	r0, [pc, #36]	; (1df70 <nrfx_qspi_erase+0x80>)
}
   1df4c:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   1df4e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   1df52:	e7fa      	b.n	1df4a <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   1df54:	4807      	ldr	r0, [pc, #28]	; (1df74 <nrfx_qspi_erase+0x84>)
   1df56:	e7f9      	b.n	1df4c <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   1df58:	4807      	ldr	r0, [pc, #28]	; (1df78 <nrfx_qspi_erase+0x88>)
   1df5a:	e7f7      	b.n	1df4c <nrfx_qspi_erase+0x5c>
   1df5c:	200213e8 	.word	0x200213e8
   1df60:	000303b9 	.word	0x000303b9
   1df64:	0002b939 	.word	0x0002b939
   1df68:	0003037d 	.word	0x0003037d
   1df6c:	4002b000 	.word	0x4002b000
   1df70:	0bad0000 	.word	0x0bad0000
   1df74:	0bad000a 	.word	0x0bad000a
   1df78:	0bad000b 	.word	0x0bad000b

0001df7c <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   1df7c:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1df7e:	4b17      	ldr	r3, [pc, #92]	; (1dfdc <nrfx_qspi_irq_handler+0x60>)
   1df80:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1df84:	b1e2      	cbz	r2, 1dfc0 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1df86:	2200      	movs	r2, #0
    switch (m_cb.state)
   1df88:	4c15      	ldr	r4, [pc, #84]	; (1dfe0 <nrfx_qspi_irq_handler+0x64>)
   1df8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1df8e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1df92:	2a03      	cmp	r2, #3
   1df94:	d015      	beq.n	1dfc2 <nrfx_qspi_irq_handler+0x46>
   1df96:	2a04      	cmp	r2, #4
   1df98:	d015      	beq.n	1dfc6 <nrfx_qspi_irq_handler+0x4a>
   1df9a:	2a02      	cmp	r2, #2
   1df9c:	d104      	bne.n	1dfa8 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   1df9e:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1dfa0:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   1dfa4:	f7ff fd2e 	bl	1da04 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   1dfa8:	68a3      	ldr	r3, [r4, #8]
   1dfaa:	b913      	cbnz	r3, 1dfb2 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1dfac:	2301      	movs	r3, #1
   1dfae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1dfb2:	e9d4 3100 	ldrd	r3, r1, [r4]
   1dfb6:	2000      	movs	r0, #0
   1dfb8:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1dfba:	2300      	movs	r3, #0
   1dfbc:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1dfc0:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1dfc2:	2302      	movs	r3, #2
   1dfc4:	e7ec      	b.n	1dfa0 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   1dfc6:	2203      	movs	r2, #3
   1dfc8:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1dfcc:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   1dfd0:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   1dfd2:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1dfd6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1dfda:	e7e5      	b.n	1dfa8 <nrfx_qspi_irq_handler+0x2c>
   1dfdc:	4002b000 	.word	0x4002b000
   1dfe0:	200213e8 	.word	0x200213e8

0001dfe4 <nrf_gpio_pin_port_decode>:
{
   1dfe4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dfe6:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1dfe8:	095a      	lsrs	r2, r3, #5
   1dfea:	d00d      	beq.n	1e008 <nrf_gpio_pin_port_decode+0x24>
   1dfec:	2a01      	cmp	r2, #1
   1dfee:	d013      	beq.n	1e018 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dff0:	490e      	ldr	r1, [pc, #56]	; (1e02c <nrf_gpio_pin_port_decode+0x48>)
   1dff2:	480f      	ldr	r0, [pc, #60]	; (1e030 <nrf_gpio_pin_port_decode+0x4c>)
   1dff4:	f240 2347 	movw	r3, #583	; 0x247
   1dff8:	4a0e      	ldr	r2, [pc, #56]	; (1e034 <nrf_gpio_pin_port_decode+0x50>)
   1dffa:	f006 ff6c 	bl	24ed6 <assert_print>
   1dffe:	f240 2147 	movw	r1, #583	; 0x247
   1e002:	480c      	ldr	r0, [pc, #48]	; (1e034 <nrf_gpio_pin_port_decode+0x50>)
   1e004:	f006 ff60 	bl	24ec8 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1e008:	f04f 32ff 	mov.w	r2, #4294967295
   1e00c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e010:	07d9      	lsls	r1, r3, #31
   1e012:	d5ed      	bpl.n	1dff0 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1e014:	4808      	ldr	r0, [pc, #32]	; (1e038 <nrf_gpio_pin_port_decode+0x54>)
   1e016:	e008      	b.n	1e02a <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1e018:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1e01c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e020:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e022:	07d2      	lsls	r2, r2, #31
   1e024:	d5e4      	bpl.n	1dff0 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1e026:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1e028:	4804      	ldr	r0, [pc, #16]	; (1e03c <nrf_gpio_pin_port_decode+0x58>)
}
   1e02a:	bd08      	pop	{r3, pc}
   1e02c:	0002f8bf 	.word	0x0002f8bf
   1e030:	0002b939 	.word	0x0002b939
   1e034:	0002f88c 	.word	0x0002f88c
   1e038:	40842500 	.word	0x40842500
   1e03c:	40842800 	.word	0x40842800

0001e040 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1e040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e044:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   1e046:	460c      	mov	r4, r1
   1e048:	b959      	cbnz	r1, 1e062 <nrfx_spim_init+0x22>
   1e04a:	498d      	ldr	r1, [pc, #564]	; (1e280 <nrfx_spim_init+0x240>)
   1e04c:	488d      	ldr	r0, [pc, #564]	; (1e284 <nrfx_spim_init+0x244>)
   1e04e:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1e052:	4a8d      	ldr	r2, [pc, #564]	; (1e288 <nrfx_spim_init+0x248>)
   1e054:	f006 ff3f 	bl	24ed6 <assert_print>
   1e058:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1e05c:	488a      	ldr	r0, [pc, #552]	; (1e288 <nrfx_spim_init+0x248>)
   1e05e:	f006 ff33 	bl	24ec8 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1e062:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1e064:	4d89      	ldr	r5, [pc, #548]	; (1e28c <nrfx_spim_init+0x24c>)
   1e066:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   1e06a:	7f09      	ldrb	r1, [r1, #28]
   1e06c:	2900      	cmp	r1, #0
   1e06e:	f040 8100 	bne.w	1e272 <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1e072:	2f00      	cmp	r7, #0
   1e074:	f040 80ff 	bne.w	1e276 <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1e078:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1e07c:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   1e07e:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1e080:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1e084:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1e086:	d027      	beq.n	1e0d8 <nrfx_spim_init+0x98>
   1e088:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   1e08c:	d124      	bne.n	1e0d8 <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1e08e:	b119      	cbz	r1, 1e098 <nrfx_spim_init+0x58>
   1e090:	7d20      	ldrb	r0, [r4, #20]
   1e092:	2800      	cmp	r0, #0
   1e094:	f040 80d5 	bne.w	1e242 <nrfx_spim_init+0x202>
   1e098:	487d      	ldr	r0, [pc, #500]	; (1e290 <nrfx_spim_init+0x250>)
   1e09a:	4581      	cmp	r9, r0
   1e09c:	d11c      	bne.n	1e0d8 <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1e09e:	7820      	ldrb	r0, [r4, #0]
   1e0a0:	28ff      	cmp	r0, #255	; 0xff
   1e0a2:	d002      	beq.n	1e0aa <nrfx_spim_init+0x6a>
   1e0a4:	2808      	cmp	r0, #8
   1e0a6:	f040 80e8 	bne.w	1e27a <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1e0aa:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1e0ac:	28ff      	cmp	r0, #255	; 0xff
   1e0ae:	d002      	beq.n	1e0b6 <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1e0b0:	280b      	cmp	r0, #11
   1e0b2:	f040 80e2 	bne.w	1e27a <nrfx_spim_init+0x23a>
   1e0b6:	2eff      	cmp	r6, #255	; 0xff
   1e0b8:	d002      	beq.n	1e0c0 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1e0ba:	2e0c      	cmp	r6, #12
   1e0bc:	f040 80dd 	bne.w	1e27a <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1e0c0:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1e0c2:	28ff      	cmp	r0, #255	; 0xff
   1e0c4:	d002      	beq.n	1e0cc <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1e0c6:	2809      	cmp	r0, #9
   1e0c8:	f040 80d7 	bne.w	1e27a <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1e0cc:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1e0ce:	28ff      	cmp	r0, #255	; 0xff
   1e0d0:	d002      	beq.n	1e0d8 <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1e0d2:	280a      	cmp	r0, #10
   1e0d4:	f040 80d1 	bne.w	1e27a <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1e0d8:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1e0dc:	7fab      	ldrb	r3, [r5, #30]
   1e0de:	f361 0300 	bfi	r3, r1, #0, #1
   1e0e2:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1e0e4:	7922      	ldrb	r2, [r4, #4]
   1e0e6:	b2db      	uxtb	r3, r3
   1e0e8:	f362 0341 	bfi	r3, r2, #1, #1
   1e0ec:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   1e0ee:	7c62      	ldrb	r2, [r4, #17]
   1e0f0:	b2db      	uxtb	r3, r3
   1e0f2:	f362 0382 	bfi	r3, r2, #2, #1
   1e0f6:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1e0f8:	78e3      	ldrb	r3, [r4, #3]
   1e0fa:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   1e0fc:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1e0fe:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   1e102:	2b00      	cmp	r3, #0
   1e104:	d142      	bne.n	1e18c <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1e106:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1e108:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1e10a:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   1e10e:	7b23      	ldrb	r3, [r4, #12]
   1e110:	bf08      	it	eq
   1e112:	2703      	moveq	r7, #3
   1e114:	2b01      	cmp	r3, #1
   1e116:	f200 8096 	bhi.w	1e246 <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1e11a:	f00a fcd1 	bl	28ac0 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1e11e:	2300      	movs	r3, #0
   1e120:	9700      	str	r7, [sp, #0]
   1e122:	7820      	ldrb	r0, [r4, #0]
   1e124:	461a      	mov	r2, r3
   1e126:	2101      	movs	r1, #1
   1e128:	f00a fcf2 	bl	28b10 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1e12c:	7860      	ldrb	r0, [r4, #1]
   1e12e:	28ff      	cmp	r0, #255	; 0xff
   1e130:	d008      	beq.n	1e144 <nrfx_spim_init+0x104>
   1e132:	f00a fcc5 	bl	28ac0 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1e136:	2201      	movs	r2, #1
   1e138:	9700      	str	r7, [sp, #0]
   1e13a:	2300      	movs	r3, #0
   1e13c:	4611      	mov	r1, r2
   1e13e:	7860      	ldrb	r0, [r4, #1]
   1e140:	f00a fce6 	bl	28b10 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1e144:	78a0      	ldrb	r0, [r4, #2]
   1e146:	28ff      	cmp	r0, #255	; 0xff
   1e148:	d005      	beq.n	1e156 <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   1e14a:	2200      	movs	r2, #0
   1e14c:	9700      	str	r7, [sp, #0]
   1e14e:	4611      	mov	r1, r2
   1e150:	7ba3      	ldrb	r3, [r4, #14]
   1e152:	f00a fcdd 	bl	28b10 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1e156:	78e0      	ldrb	r0, [r4, #3]
   1e158:	28ff      	cmp	r0, #255	; 0xff
   1e15a:	d00b      	beq.n	1e174 <nrfx_spim_init+0x134>
    if (value == 0)
   1e15c:	7923      	ldrb	r3, [r4, #4]
   1e15e:	2b00      	cmp	r3, #0
   1e160:	d074      	beq.n	1e24c <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   1e162:	f00a fcad 	bl	28ac0 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1e166:	2201      	movs	r2, #1
   1e168:	9700      	str	r7, [sp, #0]
   1e16a:	2300      	movs	r3, #0
   1e16c:	4611      	mov	r1, r2
   1e16e:	78e0      	ldrb	r0, [r4, #3]
   1e170:	f00a fcce 	bl	28b10 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1e174:	7be0      	ldrb	r0, [r4, #15]
   1e176:	28ff      	cmp	r0, #255	; 0xff
   1e178:	d008      	beq.n	1e18c <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   1e17a:	f00a fcad 	bl	28ad8 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1e17e:	2201      	movs	r2, #1
   1e180:	9700      	str	r7, [sp, #0]
   1e182:	2300      	movs	r3, #0
   1e184:	4611      	mov	r1, r2
   1e186:	7be0      	ldrb	r0, [r4, #15]
   1e188:	f00a fcc2 	bl	28b10 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1e18c:	7d23      	ldrb	r3, [r4, #20]
   1e18e:	bb6b      	cbnz	r3, 1e1ec <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1e190:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1e192:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1e194:	2bff      	cmp	r3, #255	; 0xff
   1e196:	bf18      	it	ne
   1e198:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1e19a:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1e19c:	bf08      	it	eq
   1e19e:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1e1a2:	2bff      	cmp	r3, #255	; 0xff
   1e1a4:	bf08      	it	eq
   1e1a6:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1e1aa:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1e1ae:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1e1b2:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1e1b6:	f898 3004 	ldrb.w	r3, [r8, #4]
   1e1ba:	b9bb      	cbnz	r3, 1e1ec <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1e1bc:	78e3      	ldrb	r3, [r4, #3]
   1e1be:	2bff      	cmp	r3, #255	; 0xff
   1e1c0:	d047      	beq.n	1e252 <nrfx_spim_init+0x212>
   1e1c2:	7c62      	ldrb	r2, [r4, #17]
   1e1c4:	2a00      	cmp	r2, #0
   1e1c6:	d044      	beq.n	1e252 <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1e1c8:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1e1ca:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1e1cc:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1e1d0:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1e1d4:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1e1d8:	f898 3004 	ldrb.w	r3, [r8, #4]
   1e1dc:	b933      	cbnz	r3, 1e1ec <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1e1de:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1e1e0:	2bff      	cmp	r3, #255	; 0xff
   1e1e2:	bf08      	it	eq
   1e1e4:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1e1e8:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1e1ec:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1e1ee:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1e1f2:	68a3      	ldr	r3, [r4, #8]
   1e1f4:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1e1f8:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1e1fa:	7b22      	ldrb	r2, [r4, #12]
   1e1fc:	3b00      	subs	r3, #0
   1e1fe:	bf18      	it	ne
   1e200:	2301      	movne	r3, #1
    switch (spi_mode)
   1e202:	2a02      	cmp	r2, #2
   1e204:	d02f      	beq.n	1e266 <nrfx_spim_init+0x226>
   1e206:	2a03      	cmp	r2, #3
   1e208:	d030      	beq.n	1e26c <nrfx_spim_init+0x22c>
   1e20a:	2a01      	cmp	r2, #1
   1e20c:	d101      	bne.n	1e212 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1e20e:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1e212:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1e216:	79a3      	ldrb	r3, [r4, #6]
   1e218:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1e21c:	2307      	movs	r3, #7
   1e21e:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1e222:	682b      	ldr	r3, [r5, #0]
   1e224:	b12b      	cbz	r3, 1e232 <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1e226:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1e22a:	f340 3007 	sbfx	r0, r0, #12, #8
   1e22e:	f7f1 ffff 	bl	10230 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1e232:	2300      	movs	r3, #0
   1e234:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1e236:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1e238:	4816      	ldr	r0, [pc, #88]	; (1e294 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1e23a:	772b      	strb	r3, [r5, #28]
}
   1e23c:	b003      	add	sp, #12
   1e23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1e242:	4601      	mov	r1, r0
   1e244:	e748      	b.n	1e0d8 <nrfx_spim_init+0x98>
   1e246:	f00a fc47 	bl	28ad8 <nrf_gpio_pin_set>
   1e24a:	e768      	b.n	1e11e <nrfx_spim_init+0xde>
   1e24c:	f00a fc44 	bl	28ad8 <nrf_gpio_pin_set>
   1e250:	e789      	b.n	1e166 <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   1e252:	f04f 33ff 	mov.w	r3, #4294967295
   1e256:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1e25a:	2300      	movs	r3, #0
   1e25c:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1e260:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   1e264:	e7b8      	b.n	1e1d8 <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1e266:	f043 0304 	orr.w	r3, r3, #4
        break;
   1e26a:	e7d2      	b.n	1e212 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1e26c:	f043 0306 	orr.w	r3, r3, #6
        break;
   1e270:	e7cf      	b.n	1e212 <nrfx_spim_init+0x1d2>
        return err_code;
   1e272:	4809      	ldr	r0, [pc, #36]	; (1e298 <nrfx_spim_init+0x258>)
   1e274:	e7e2      	b.n	1e23c <nrfx_spim_init+0x1fc>
        return err_code;
   1e276:	4809      	ldr	r0, [pc, #36]	; (1e29c <nrfx_spim_init+0x25c>)
   1e278:	e7e0      	b.n	1e23c <nrfx_spim_init+0x1fc>
            return err_code;
   1e27a:	4809      	ldr	r0, [pc, #36]	; (1e2a0 <nrfx_spim_init+0x260>)
   1e27c:	e7de      	b.n	1e23c <nrfx_spim_init+0x1fc>
   1e27e:	bf00      	nop
   1e280:	0003028e 	.word	0x0003028e
   1e284:	0002b939 	.word	0x0002b939
   1e288:	0003040f 	.word	0x0003040f
   1e28c:	2002141c 	.word	0x2002141c
   1e290:	4000a000 	.word	0x4000a000
   1e294:	0bad0000 	.word	0x0bad0000
   1e298:	0bad0005 	.word	0x0bad0005
   1e29c:	0bad0003 	.word	0x0bad0003
   1e2a0:	0bad0004 	.word	0x0bad0004

0001e2a4 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1e2a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1e2a8:	4d2e      	ldr	r5, [pc, #184]	; (1e364 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1e2aa:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   1e2ae:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1e2b0:	ea4f 1648 	mov.w	r6, r8, lsl #5
   1e2b4:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1e2b8:	f898 301c 	ldrb.w	r3, [r8, #28]
   1e2bc:	b95b      	cbnz	r3, 1e2d6 <nrfx_spim_uninit+0x32>
   1e2be:	492a      	ldr	r1, [pc, #168]	; (1e368 <nrfx_spim_uninit+0xc4>)
   1e2c0:	482a      	ldr	r0, [pc, #168]	; (1e36c <nrfx_spim_uninit+0xc8>)
   1e2c2:	f240 230f 	movw	r3, #527	; 0x20f
   1e2c6:	4a2a      	ldr	r2, [pc, #168]	; (1e370 <nrfx_spim_uninit+0xcc>)
   1e2c8:	f006 fe05 	bl	24ed6 <assert_print>
   1e2cc:	f240 210f 	movw	r1, #527	; 0x20f
   1e2d0:	4827      	ldr	r0, [pc, #156]	; (1e370 <nrfx_spim_uninit+0xcc>)
   1e2d2:	f006 fdf9 	bl	24ec8 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1e2d6:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1e2d8:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1e2da:	b1cb      	cbz	r3, 1e310 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1e2dc:	f344 3007 	sbfx	r0, r4, #12, #8
   1e2e0:	f7f1 ffb4 	bl	1024c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1e2e4:	4b23      	ldr	r3, [pc, #140]	; (1e374 <nrfx_spim_uninit+0xd0>)
   1e2e6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1e2ea:	f898 301d 	ldrb.w	r3, [r8, #29]
   1e2ee:	b17b      	cbz	r3, 1e310 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e2f0:	2301      	movs	r3, #1
   1e2f2:	f04f 0864 	mov.w	r8, #100	; 0x64
   1e2f6:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e2f8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1e2fc:	b92b      	cbnz	r3, 1e30a <nrfx_spim_uninit+0x66>
   1e2fe:	2001      	movs	r0, #1
   1e300:	f00a fb4e 	bl	289a0 <nrfx_busy_wait>
   1e304:	f1b8 0801 	subs.w	r8, r8, #1
   1e308:	d1f6      	bne.n	1e2f8 <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1e30a:	2200      	movs	r2, #0
   1e30c:	19ab      	adds	r3, r5, r6
   1e30e:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1e310:	2300      	movs	r3, #0
   1e312:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1e316:	19ab      	adds	r3, r5, r6
   1e318:	7f9b      	ldrb	r3, [r3, #30]
   1e31a:	07db      	lsls	r3, r3, #31
   1e31c:	d41b      	bmi.n	1e356 <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   1e31e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1e322:	f00a fc14 	bl	28b4e <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1e326:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1e32a:	f00a fc10 	bl	28b4e <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1e32e:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1e332:	f00a fc0c 	bl	28b4e <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1e336:	793b      	ldrb	r3, [r7, #4]
   1e338:	b91b      	cbnz	r3, 1e342 <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   1e33a:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1e33e:	f00a fc06 	bl	28b4e <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1e342:	19ab      	adds	r3, r5, r6
   1e344:	7fd8      	ldrb	r0, [r3, #31]
   1e346:	28ff      	cmp	r0, #255	; 0xff
   1e348:	d005      	beq.n	1e356 <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   1e34a:	2300      	movs	r3, #0
   1e34c:	2201      	movs	r2, #1
   1e34e:	4619      	mov	r1, r3
   1e350:	9300      	str	r3, [sp, #0]
   1e352:	f00a fbdd 	bl	28b10 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1e356:	2300      	movs	r3, #0
   1e358:	4435      	add	r5, r6
   1e35a:	772b      	strb	r3, [r5, #28]
}
   1e35c:	b002      	add	sp, #8
   1e35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e362:	bf00      	nop
   1e364:	2002141c 	.word	0x2002141c
   1e368:	0003044b 	.word	0x0003044b
   1e36c:	0002b939 	.word	0x0002b939
   1e370:	0003040f 	.word	0x0003040f
   1e374:	00080152 	.word	0x00080152

0001e378 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1e378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1e37c:	4e60      	ldr	r6, [pc, #384]	; (1e500 <nrfx_spim_xfer+0x188>)
   1e37e:	7903      	ldrb	r3, [r0, #4]
{
   1e380:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1e382:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1e386:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   1e38a:	4607      	mov	r7, r0
   1e38c:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1e38e:	b95a      	cbnz	r2, 1e3a8 <nrfx_spim_xfer+0x30>
   1e390:	495c      	ldr	r1, [pc, #368]	; (1e504 <nrfx_spim_xfer+0x18c>)
   1e392:	f240 23de 	movw	r3, #734	; 0x2de
   1e396:	4a5c      	ldr	r2, [pc, #368]	; (1e508 <nrfx_spim_xfer+0x190>)
   1e398:	485c      	ldr	r0, [pc, #368]	; (1e50c <nrfx_spim_xfer+0x194>)
   1e39a:	f006 fd9c 	bl	24ed6 <assert_print>
   1e39e:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   1e3a2:	4859      	ldr	r0, [pc, #356]	; (1e508 <nrfx_spim_xfer+0x190>)
   1e3a4:	f006 fd90 	bl	24ec8 <assert_post_action>
   1e3a8:	680a      	ldr	r2, [r1, #0]
   1e3aa:	b95a      	cbnz	r2, 1e3c4 <nrfx_spim_xfer+0x4c>
   1e3ac:	684a      	ldr	r2, [r1, #4]
   1e3ae:	b14a      	cbz	r2, 1e3c4 <nrfx_spim_xfer+0x4c>
   1e3b0:	4957      	ldr	r1, [pc, #348]	; (1e510 <nrfx_spim_xfer+0x198>)
   1e3b2:	f240 23df 	movw	r3, #735	; 0x2df
   1e3b6:	4a54      	ldr	r2, [pc, #336]	; (1e508 <nrfx_spim_xfer+0x190>)
   1e3b8:	4854      	ldr	r0, [pc, #336]	; (1e50c <nrfx_spim_xfer+0x194>)
   1e3ba:	f006 fd8c 	bl	24ed6 <assert_print>
   1e3be:	f240 21df 	movw	r1, #735	; 0x2df
   1e3c2:	e7ee      	b.n	1e3a2 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   1e3c4:	68a2      	ldr	r2, [r4, #8]
   1e3c6:	b96a      	cbnz	r2, 1e3e4 <nrfx_spim_xfer+0x6c>
   1e3c8:	68e2      	ldr	r2, [r4, #12]
   1e3ca:	2a00      	cmp	r2, #0
   1e3cc:	f000 8094 	beq.w	1e4f8 <nrfx_spim_xfer+0x180>
   1e3d0:	4950      	ldr	r1, [pc, #320]	; (1e514 <nrfx_spim_xfer+0x19c>)
   1e3d2:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   1e3d6:	4a4c      	ldr	r2, [pc, #304]	; (1e508 <nrfx_spim_xfer+0x190>)
   1e3d8:	484c      	ldr	r0, [pc, #304]	; (1e50c <nrfx_spim_xfer+0x194>)
   1e3da:	f006 fd7c 	bl	24ed6 <assert_print>
   1e3de:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   1e3e2:	e7de      	b.n	1e3a2 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1e3e4:	b93b      	cbnz	r3, 1e3f6 <nrfx_spim_xfer+0x7e>
   1e3e6:	68e3      	ldr	r3, [r4, #12]
   1e3e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e3ec:	d203      	bcs.n	1e3f6 <nrfx_spim_xfer+0x7e>
   1e3ee:	6863      	ldr	r3, [r4, #4]
   1e3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e3f4:	d309      	bcc.n	1e40a <nrfx_spim_xfer+0x92>
   1e3f6:	4948      	ldr	r1, [pc, #288]	; (1e518 <nrfx_spim_xfer+0x1a0>)
   1e3f8:	f240 23e1 	movw	r3, #737	; 0x2e1
   1e3fc:	4a42      	ldr	r2, [pc, #264]	; (1e508 <nrfx_spim_xfer+0x190>)
   1e3fe:	4843      	ldr	r0, [pc, #268]	; (1e50c <nrfx_spim_xfer+0x194>)
   1e400:	f006 fd69 	bl	24ed6 <assert_print>
   1e404:	f240 21e1 	movw	r1, #737	; 0x2e1
   1e408:	e7cb      	b.n	1e3a2 <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   1e40a:	f015 0908 	ands.w	r9, r5, #8
   1e40e:	d00f      	beq.n	1e430 <nrfx_spim_xfer+0xb8>
   1e410:	7fb3      	ldrb	r3, [r6, #30]
   1e412:	075b      	lsls	r3, r3, #29
   1e414:	d40c      	bmi.n	1e430 <nrfx_spim_xfer+0xb8>
   1e416:	7ff3      	ldrb	r3, [r6, #31]
   1e418:	2bff      	cmp	r3, #255	; 0xff
   1e41a:	d009      	beq.n	1e430 <nrfx_spim_xfer+0xb8>
   1e41c:	493f      	ldr	r1, [pc, #252]	; (1e51c <nrfx_spim_xfer+0x1a4>)
   1e41e:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   1e422:	4a39      	ldr	r2, [pc, #228]	; (1e508 <nrfx_spim_xfer+0x190>)
   1e424:	4839      	ldr	r0, [pc, #228]	; (1e50c <nrfx_spim_xfer+0x194>)
   1e426:	f006 fd56 	bl	24ed6 <assert_print>
   1e42a:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   1e42e:	e7b8      	b.n	1e3a2 <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1e430:	7f73      	ldrb	r3, [r6, #29]
   1e432:	2b00      	cmp	r3, #0
   1e434:	d15e      	bne.n	1e4f4 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1e436:	6833      	ldr	r3, [r6, #0]
   1e438:	b123      	cbz	r3, 1e444 <nrfx_spim_xfer+0xcc>
   1e43a:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1e43e:	bf04      	itt	eq
   1e440:	2301      	moveq	r3, #1
   1e442:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1e444:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1e520 <nrfx_spim_xfer+0x1a8>
   1e448:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1e44c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1e450:	2101      	movs	r1, #1
   1e452:	4640      	mov	r0, r8
   1e454:	f00a fb4c 	bl	28af0 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1e458:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1e45a:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1e45c:	b121      	cbz	r1, 1e468 <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1e45e:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   1e462:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1e466:	d106      	bne.n	1e476 <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1e468:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1e46a:	b14a      	cbz	r2, 1e480 <nrfx_spim_xfer+0x108>
   1e46c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1e470:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1e474:	d004      	beq.n	1e480 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   1e476:	2300      	movs	r3, #0
        return err_code;
   1e478:	482a      	ldr	r0, [pc, #168]	; (1e524 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   1e47a:	7773      	strb	r3, [r6, #29]
}
   1e47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1e480:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e482:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e486:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e48a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   1e48e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e492:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e496:	2200      	movs	r2, #0
   1e498:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1e49c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1e4a0:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1e4a4:	bf18      	it	ne
   1e4a6:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1e4a8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1e4ac:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1e4b0:	bf18      	it	ne
   1e4b2:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1e4b4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   1e4b8:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1e4ba:	f1b9 0f00 	cmp.w	r9, #0
   1e4be:	d006      	beq.n	1e4ce <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   1e4c0:	b96a      	cbnz	r2, 1e4de <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   1e4c2:	2100      	movs	r1, #0
   1e4c4:	4640      	mov	r0, r8
   1e4c6:	f00a fb13 	bl	28af0 <set_ss_pin_state>
    return err_code;
   1e4ca:	4817      	ldr	r0, [pc, #92]	; (1e528 <nrfx_spim_xfer+0x1b0>)
   1e4cc:	e7d6      	b.n	1e47c <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e4ce:	2101      	movs	r1, #1
   1e4d0:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   1e4d2:	b922      	cbnz	r2, 1e4de <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e4d4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1e4d8:	2a00      	cmp	r2, #0
   1e4da:	d0fb      	beq.n	1e4d4 <nrfx_spim_xfer+0x15c>
   1e4dc:	e7f1      	b.n	1e4c2 <nrfx_spim_xfer+0x14a>
    if (!enable)
   1e4de:	f015 0f04 	tst.w	r5, #4
   1e4e2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e4e6:	d002      	beq.n	1e4ee <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   1e4e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1e4ec:	e7ed      	b.n	1e4ca <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   1e4ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e4f2:	e7ea      	b.n	1e4ca <nrfx_spim_xfer+0x152>
        return err_code;
   1e4f4:	480d      	ldr	r0, [pc, #52]	; (1e52c <nrfx_spim_xfer+0x1b4>)
   1e4f6:	e7c1      	b.n	1e47c <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1e4f8:	2b00      	cmp	r3, #0
   1e4fa:	f43f af78 	beq.w	1e3ee <nrfx_spim_xfer+0x76>
   1e4fe:	e77a      	b.n	1e3f6 <nrfx_spim_xfer+0x7e>
   1e500:	2002141c 	.word	0x2002141c
   1e504:	0003044b 	.word	0x0003044b
   1e508:	0003040f 	.word	0x0003040f
   1e50c:	0002b939 	.word	0x0002b939
   1e510:	00030477 	.word	0x00030477
   1e514:	000304be 	.word	0x000304be
   1e518:	00030505 	.word	0x00030505
   1e51c:	000305a9 	.word	0x000305a9
   1e520:	20021428 	.word	0x20021428
   1e524:	0bad000a 	.word	0x0bad000a
   1e528:	0bad0000 	.word	0x0bad0000
   1e52c:	0bad000b 	.word	0x0bad000b

0001e530 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   1e530:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e532:	4b13      	ldr	r3, [pc, #76]	; (1e580 <nrfx_spim_4_irq_handler+0x50>)
   1e534:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1e538:	b302      	cbz	r2, 1e57c <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e53a:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   1e53c:	4c11      	ldr	r4, [pc, #68]	; (1e584 <nrfx_spim_4_irq_handler+0x54>)
   1e53e:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   1e542:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1e546:	6823      	ldr	r3, [r4, #0]
   1e548:	b95b      	cbnz	r3, 1e562 <nrfx_spim_4_irq_handler+0x32>
   1e54a:	490f      	ldr	r1, [pc, #60]	; (1e588 <nrfx_spim_4_irq_handler+0x58>)
   1e54c:	480f      	ldr	r0, [pc, #60]	; (1e58c <nrfx_spim_4_irq_handler+0x5c>)
   1e54e:	f240 333b 	movw	r3, #827	; 0x33b
   1e552:	4a0f      	ldr	r2, [pc, #60]	; (1e590 <nrfx_spim_4_irq_handler+0x60>)
   1e554:	f006 fcbf 	bl	24ed6 <assert_print>
   1e558:	f240 313b 	movw	r1, #827	; 0x33b
   1e55c:	480c      	ldr	r0, [pc, #48]	; (1e590 <nrfx_spim_4_irq_handler+0x60>)
   1e55e:	f006 fcb3 	bl	24ec8 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   1e562:	4629      	mov	r1, r5
   1e564:	4620      	mov	r0, r4
   1e566:	f00a fac3 	bl	28af0 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e56a:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   1e56e:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1e570:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e572:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   1e576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e57a:	4718      	bx	r3
}
   1e57c:	bd70      	pop	{r4, r5, r6, pc}
   1e57e:	bf00      	nop
   1e580:	4000a000 	.word	0x4000a000
   1e584:	2002141c 	.word	0x2002141c
   1e588:	000305ec 	.word	0x000305ec
   1e58c:	0002b939 	.word	0x0002b939
   1e590:	0003040f 	.word	0x0003040f

0001e594 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   1e594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e598:	460e      	mov	r6, r1
   1e59a:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1e59c:	4d0c      	ldr	r5, [pc, #48]	; (1e5d0 <metal_generic_dev_open+0x3c>)
   1e59e:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1e5a2:	42ac      	cmp	r4, r5
   1e5a4:	d103      	bne.n	1e5ae <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1e5a6:	f06f 0012 	mvn.w	r0, #18
   1e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1e5ae:	4631      	mov	r1, r6
   1e5b0:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   1e5b4:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1e5b8:	f7ea fec8 	bl	934c <strcmp>
   1e5bc:	b930      	cbnz	r0, 1e5cc <metal_generic_dev_open+0x38>
			*device = dev;
   1e5be:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   1e5c2:	4640      	mov	r0, r8
}
   1e5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1e5c8:	f00a bbc6 	b.w	28d58 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1e5cc:	6824      	ldr	r4, [r4, #0]
   1e5ce:	e7e8      	b.n	1e5a2 <metal_generic_dev_open+0xe>
   1e5d0:	2002143c 	.word	0x2002143c

0001e5d4 <metal_bus_unregister>:
{
   1e5d4:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1e5d6:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1e5da:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1e5dc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   1e5de:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1e5e2:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1e5e4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1e5e8:	6843      	ldr	r3, [r0, #4]
{
   1e5ea:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   1e5ec:	b103      	cbz	r3, 1e5f0 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   1e5ee:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   1e5f0:	4b05      	ldr	r3, [pc, #20]	; (1e608 <metal_bus_unregister+0x34>)
   1e5f2:	781a      	ldrb	r2, [r3, #0]
   1e5f4:	2a06      	cmp	r2, #6
   1e5f6:	d905      	bls.n	1e604 <metal_bus_unregister+0x30>
   1e5f8:	685b      	ldr	r3, [r3, #4]
   1e5fa:	b11b      	cbz	r3, 1e604 <metal_bus_unregister+0x30>
   1e5fc:	2007      	movs	r0, #7
   1e5fe:	6822      	ldr	r2, [r4, #0]
   1e600:	4902      	ldr	r1, [pc, #8]	; (1e60c <metal_bus_unregister+0x38>)
   1e602:	4798      	blx	r3
}
   1e604:	2000      	movs	r0, #0
   1e606:	bd10      	pop	{r4, pc}
   1e608:	2002143c 	.word	0x2002143c
   1e60c:	0003060f 	.word	0x0003060f

0001e610 <metal_bus_find>:
{
   1e610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e614:	4607      	mov	r7, r0
   1e616:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1e618:	4e0b      	ldr	r6, [pc, #44]	; (1e648 <metal_bus_find+0x38>)
   1e61a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1e61e:	42b4      	cmp	r4, r6
   1e620:	d102      	bne.n	1e628 <metal_bus_find+0x18>
	return -ENOENT;
   1e622:	f06f 0001 	mvn.w	r0, #1
   1e626:	e00a      	b.n	1e63e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1e628:	4639      	mov	r1, r7
   1e62a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1e62e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1e632:	f7ea fe8b 	bl	934c <strcmp>
   1e636:	b920      	cbnz	r0, 1e642 <metal_bus_find+0x32>
   1e638:	b11d      	cbz	r5, 1e642 <metal_bus_find+0x32>
			*result = bus;
   1e63a:	f8c5 8000 	str.w	r8, [r5]
}
   1e63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1e642:	6824      	ldr	r4, [r4, #0]
   1e644:	e7eb      	b.n	1e61e <metal_bus_find+0xe>
   1e646:	bf00      	nop
   1e648:	2002143c 	.word	0x2002143c

0001e64c <metal_bus_register>:
{
   1e64c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1e64e:	4604      	mov	r4, r0
   1e650:	b910      	cbnz	r0, 1e658 <metal_bus_register+0xc>
		return -EINVAL;
   1e652:	f06f 0015 	mvn.w	r0, #21
}
   1e656:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1e658:	6800      	ldr	r0, [r0, #0]
   1e65a:	2800      	cmp	r0, #0
   1e65c:	d0f9      	beq.n	1e652 <metal_bus_register+0x6>
   1e65e:	f7ea fe7f 	bl	9360 <strlen>
   1e662:	2800      	cmp	r0, #0
   1e664:	d0f5      	beq.n	1e652 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1e666:	2100      	movs	r1, #0
   1e668:	6820      	ldr	r0, [r4, #0]
   1e66a:	f7ff ffd1 	bl	1e610 <metal_bus_find>
   1e66e:	b1c8      	cbz	r0, 1e6a4 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   1e670:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   1e674:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1e678:	4b0c      	ldr	r3, [pc, #48]	; (1e6ac <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1e67a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1e67e:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1e680:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   1e684:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1e686:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1e688:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1e68a:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1e68c:	781a      	ldrb	r2, [r3, #0]
   1e68e:	2a06      	cmp	r2, #6
   1e690:	d901      	bls.n	1e696 <metal_bus_register+0x4a>
   1e692:	685b      	ldr	r3, [r3, #4]
   1e694:	b90b      	cbnz	r3, 1e69a <metal_bus_register+0x4e>
	return 0;
   1e696:	2000      	movs	r0, #0
   1e698:	e7dd      	b.n	1e656 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1e69a:	2007      	movs	r0, #7
   1e69c:	6822      	ldr	r2, [r4, #0]
   1e69e:	4904      	ldr	r1, [pc, #16]	; (1e6b0 <metal_bus_register+0x64>)
   1e6a0:	4798      	blx	r3
   1e6a2:	e7f8      	b.n	1e696 <metal_bus_register+0x4a>
		return -EEXIST;
   1e6a4:	f06f 0010 	mvn.w	r0, #16
   1e6a8:	e7d5      	b.n	1e656 <metal_bus_register+0xa>
   1e6aa:	bf00      	nop
   1e6ac:	2002143c 	.word	0x2002143c
   1e6b0:	00030611 	.word	0x00030611

0001e6b4 <metal_device_close>:
	metal_assert(device && device->bus);
   1e6b4:	4601      	mov	r1, r0
{
   1e6b6:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   1e6b8:	b108      	cbz	r0, 1e6be <metal_device_close+0xa>
   1e6ba:	6840      	ldr	r0, [r0, #4]
   1e6bc:	b948      	cbnz	r0, 1e6d2 <metal_device_close+0x1e>
   1e6be:	4908      	ldr	r1, [pc, #32]	; (1e6e0 <metal_device_close+0x2c>)
   1e6c0:	4808      	ldr	r0, [pc, #32]	; (1e6e4 <metal_device_close+0x30>)
   1e6c2:	2351      	movs	r3, #81	; 0x51
   1e6c4:	4a08      	ldr	r2, [pc, #32]	; (1e6e8 <metal_device_close+0x34>)
   1e6c6:	f006 fc06 	bl	24ed6 <assert_print>
   1e6ca:	2151      	movs	r1, #81	; 0x51
   1e6cc:	4806      	ldr	r0, [pc, #24]	; (1e6e8 <metal_device_close+0x34>)
   1e6ce:	f006 fbfb 	bl	24ec8 <assert_post_action>
	if (device->bus->ops.dev_close)
   1e6d2:	68c3      	ldr	r3, [r0, #12]
   1e6d4:	b113      	cbz	r3, 1e6dc <metal_device_close+0x28>
}
   1e6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   1e6da:	4718      	bx	r3
}
   1e6dc:	bd10      	pop	{r4, pc}
   1e6de:	bf00      	nop
   1e6e0:	0003065b 	.word	0x0003065b
   1e6e4:	0002b939 	.word	0x0002b939
   1e6e8:	00030624 	.word	0x00030624

0001e6ec <metal_register_generic_device>:
{
   1e6ec:	b510      	push	{r4, lr}
   1e6ee:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1e6f0:	6800      	ldr	r0, [r0, #0]
   1e6f2:	b910      	cbnz	r0, 1e6fa <metal_register_generic_device+0xe>
		return -EINVAL;
   1e6f4:	f06f 0015 	mvn.w	r0, #21
}
   1e6f8:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1e6fa:	f7ea fe31 	bl	9360 <strlen>
   1e6fe:	2800      	cmp	r0, #0
   1e700:	d0f8      	beq.n	1e6f4 <metal_register_generic_device+0x8>
   1e702:	68a3      	ldr	r3, [r4, #8]
   1e704:	2b01      	cmp	r3, #1
   1e706:	d8f5      	bhi.n	1e6f4 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   1e708:	4b06      	ldr	r3, [pc, #24]	; (1e724 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1e70a:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1e70e:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1e710:	4b05      	ldr	r3, [pc, #20]	; (1e728 <metal_register_generic_device+0x3c>)
   1e712:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1e714:	f103 0018 	add.w	r0, r3, #24
   1e718:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1e71a:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1e71c:	61d9      	str	r1, [r3, #28]
	return 0;
   1e71e:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1e720:	6011      	str	r1, [r2, #0]
}
   1e722:	e7e9      	b.n	1e6f8 <metal_register_generic_device+0xc>
   1e724:	20008708 	.word	0x20008708
   1e728:	2002143c 	.word	0x2002143c

0001e72c <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1e72c:	4b0e      	ldr	r3, [pc, #56]	; (1e768 <metal_init+0x3c>)
{
   1e72e:	b510      	push	{r4, lr}
   1e730:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   1e732:	2220      	movs	r2, #32
   1e734:	2100      	movs	r1, #0
   1e736:	4618      	mov	r0, r3
   1e738:	f00b f96d 	bl	29a16 <memset>

	_metal.common.log_handler   = params->log_handler;
   1e73c:	6822      	ldr	r2, [r4, #0]
   1e73e:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   1e740:	4602      	mov	r2, r0
   1e742:	7921      	ldrb	r1, [r4, #4]
   1e744:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   1e748:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   1e74c:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   1e750:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   1e754:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   1e758:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1e75c:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   1e75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   1e762:	f000 b80f 	b.w	1e784 <metal_sys_init>
   1e766:	bf00      	nop
   1e768:	2002143c 	.word	0x2002143c

0001e76c <metal_finish>:

void metal_finish(void)
{
   1e76c:	b508      	push	{r3, lr}
	metal_sys_finish();
   1e76e:	f000 f811 	bl	1e794 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   1e772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   1e776:	2220      	movs	r2, #32
   1e778:	2100      	movs	r1, #0
   1e77a:	4801      	ldr	r0, [pc, #4]	; (1e780 <metal_finish+0x14>)
   1e77c:	f00b b94b 	b.w	29a16 <memset>
   1e780:	2002143c 	.word	0x2002143c

0001e784 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   1e784:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1e786:	4802      	ldr	r0, [pc, #8]	; (1e790 <metal_sys_init+0xc>)
   1e788:	f7ff ff60 	bl	1e64c <metal_bus_register>
	return 0;
}
   1e78c:	2000      	movs	r0, #0
   1e78e:	bd08      	pop	{r3, pc}
   1e790:	20008708 	.word	0x20008708

0001e794 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   1e794:	4801      	ldr	r0, [pc, #4]	; (1e79c <metal_sys_finish+0x8>)
   1e796:	f7ff bf1d 	b.w	1e5d4 <metal_bus_unregister>
   1e79a:	bf00      	nop
   1e79c:	20008708 	.word	0x20008708

0001e7a0 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1e7a0:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1e7a2:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   1e7a4:	2b06      	cmp	r3, #6
{
   1e7a6:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1e7a8:	bf88      	it	hi
   1e7aa:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   1e7ac:	4b09      	ldr	r3, [pc, #36]	; (1e7d4 <metal_zephyr_log_handler+0x34>)
{
   1e7ae:	ac05      	add	r4, sp, #20
   1e7b0:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   1e7b4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1e7b8:	4807      	ldr	r0, [pc, #28]	; (1e7d8 <metal_zephyr_log_handler+0x38>)
   1e7ba:	f006 f9ca 	bl	24b52 <printk>

	va_start(args, format);
	vprintk(format, args);
   1e7be:	4621      	mov	r1, r4
   1e7c0:	4628      	mov	r0, r5
	va_start(args, format);
   1e7c2:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   1e7c4:	f7ee fad2 	bl	cd6c <vprintk>
	va_end(args);
}
   1e7c8:	b002      	add	sp, #8
   1e7ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1e7ce:	b003      	add	sp, #12
   1e7d0:	4770      	bx	lr
   1e7d2:	bf00      	nop
   1e7d4:	0002b7f4 	.word	0x0002b7f4
   1e7d8:	0002bb36 	.word	0x0002bb36

0001e7dc <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   1e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7e0:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1e7e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1e7e4:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   1e7e6:	4293      	cmp	r3, r2
{
   1e7e8:	4617      	mov	r7, r2
   1e7ea:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   1e7ec:	d341      	bcc.n	1e872 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1e7ee:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   1e7f0:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   1e7f4:	42bd      	cmp	r5, r7
   1e7f6:	d103      	bne.n	1e800 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1e7f8:	2000      	movs	r0, #0
}
   1e7fa:	b007      	add	sp, #28
   1e7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1e800:	fb0b f805 	mul.w	r8, fp, r5
   1e804:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1e808:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1e80a:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1e80e:	1d23      	adds	r3, r4, #4
   1e810:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1e812:	b9ca      	cbnz	r2, 1e848 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   1e814:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e816:	6861      	ldr	r1, [r4, #4]
   1e818:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1e81a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1e81e:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   1e820:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1e822:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   1e826:	1e5c      	subs	r4, r3, #1
   1e828:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1e82c:	425b      	negs	r3, r3
   1e82e:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   1e832:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   1e834:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   1e838:	6884      	ldr	r4, [r0, #8]
   1e83a:	3306      	adds	r3, #6
   1e83c:	42a1      	cmp	r1, r4
   1e83e:	bf28      	it	cs
   1e840:	f04f 31ff 	movcs.w	r1, #4294967295
   1e844:	f00a fa54 	bl	28cf0 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1e848:	f859 3008 	ldr.w	r3, [r9, r8]
   1e84c:	4630      	mov	r0, r6
   1e84e:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   1e850:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1e852:	b2a9      	uxth	r1, r5
   1e854:	6a1b      	ldr	r3, [r3, #32]
   1e856:	9301      	str	r3, [sp, #4]
   1e858:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e85a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1e85e:	9300      	str	r3, [sp, #0]
   1e860:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   1e864:	9b05      	ldr	r3, [sp, #20]
   1e866:	f00a fabc 	bl	28de2 <virtqueue_create>
		if (ret)
   1e86a:	2800      	cmp	r0, #0
   1e86c:	d1c5      	bne.n	1e7fa <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1e86e:	3501      	adds	r5, #1
   1e870:	e7c0      	b.n	1e7f4 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1e872:	4801      	ldr	r0, [pc, #4]	; (1e878 <virtio_create_virtqueues+0x9c>)
   1e874:	e7c1      	b.n	1e7fa <virtio_create_virtqueues+0x1e>
   1e876:	bf00      	nop
   1e878:	fffff440 	.word	0xfffff440

0001e87c <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1e87c:	b510      	push	{r4, lr}
	if (vq) {
   1e87e:	4604      	mov	r4, r0
   1e880:	b190      	cbz	r0, 1e8a8 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   1e882:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1e884:	8943      	ldrh	r3, [r0, #10]
   1e886:	429a      	cmp	r2, r3
   1e888:	d009      	beq.n	1e89e <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1e88a:	4b08      	ldr	r3, [pc, #32]	; (1e8ac <virtqueue_free+0x30>)
   1e88c:	781a      	ldrb	r2, [r3, #0]
   1e88e:	2a03      	cmp	r2, #3
   1e890:	d905      	bls.n	1e89e <virtqueue_free+0x22>
   1e892:	685b      	ldr	r3, [r3, #4]
   1e894:	b11b      	cbz	r3, 1e89e <virtqueue_free+0x22>
   1e896:	6842      	ldr	r2, [r0, #4]
   1e898:	4905      	ldr	r1, [pc, #20]	; (1e8b0 <virtqueue_free+0x34>)
   1e89a:	2004      	movs	r0, #4
   1e89c:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1e89e:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   1e8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e8a4:	f00b b861 	b.w	2996a <k_free>
   1e8a8:	bd10      	pop	{r4, pc}
   1e8aa:	bf00      	nop
   1e8ac:	2002143c 	.word	0x2002143c
   1e8b0:	00030709 	.word	0x00030709

0001e8b4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1e8b4:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   1e8b6:	8944      	ldrh	r4, [r0, #10]
   1e8b8:	428c      	cmp	r4, r1
   1e8ba:	d912      	bls.n	1e8e2 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1e8bc:	6a03      	ldr	r3, [r0, #32]
   1e8be:	3c01      	subs	r4, #1
   1e8c0:	885d      	ldrh	r5, [r3, #2]
   1e8c2:	402c      	ands	r4, r5
   1e8c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   1e8c8:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   1e8ca:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1e8cc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1e8d0:	6a02      	ldr	r2, [r0, #32]
   1e8d2:	8853      	ldrh	r3, [r2, #2]
   1e8d4:	3301      	adds	r3, #1
   1e8d6:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1e8d8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1e8da:	3301      	adds	r3, #1
   1e8dc:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1e8de:	2000      	movs	r0, #0
}
   1e8e0:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1e8e2:	4801      	ldr	r0, [pc, #4]	; (1e8e8 <virtqueue_add_consumed_buffer+0x34>)
   1e8e4:	e7fc      	b.n	1e8e0 <virtqueue_add_consumed_buffer+0x2c>
   1e8e6:	bf00      	nop
   1e8e8:	fffff441 	.word	0xfffff441

0001e8ec <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   1e8ec:	b470      	push	{r4, r5, r6}
   1e8ee:	9e03      	ldr	r6, [sp, #12]
   1e8f0:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1e8f2:	b158      	cbz	r0, 1e90c <rpmsg_send_offchannel_raw+0x20>
   1e8f4:	6a00      	ldr	r0, [r0, #32]
   1e8f6:	b148      	cbz	r0, 1e90c <rpmsg_send_offchannel_raw+0x20>
   1e8f8:	b143      	cbz	r3, 1e90c <rpmsg_send_offchannel_raw+0x20>
   1e8fa:	3401      	adds	r4, #1
   1e8fc:	d006      	beq.n	1e90c <rpmsg_send_offchannel_raw+0x20>
   1e8fe:	2e00      	cmp	r6, #0
   1e900:	db04      	blt.n	1e90c <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   1e902:	6f84      	ldr	r4, [r0, #120]	; 0x78
   1e904:	b114      	cbz	r4, 1e90c <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1e906:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   1e908:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1e90a:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1e90c:	4801      	ldr	r0, [pc, #4]	; (1e914 <rpmsg_send_offchannel_raw+0x28>)
}
   1e90e:	bc70      	pop	{r4, r5, r6}
   1e910:	4770      	bx	lr
   1e912:	bf00      	nop
   1e914:	fffff82d 	.word	0xfffff82d

0001e918 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   1e918:	b470      	push	{r4, r5, r6}
   1e91a:	9e03      	ldr	r6, [sp, #12]
   1e91c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1e91e:	b160      	cbz	r0, 1e93a <rpmsg_send_offchannel_nocopy+0x22>
   1e920:	6a00      	ldr	r0, [r0, #32]
   1e922:	b150      	cbz	r0, 1e93a <rpmsg_send_offchannel_nocopy+0x22>
   1e924:	b14b      	cbz	r3, 1e93a <rpmsg_send_offchannel_nocopy+0x22>
   1e926:	3401      	adds	r4, #1
   1e928:	d007      	beq.n	1e93a <rpmsg_send_offchannel_nocopy+0x22>
   1e92a:	2e00      	cmp	r6, #0
   1e92c:	db05      	blt.n	1e93a <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   1e92e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   1e932:	b114      	cbz	r4, 1e93a <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1e934:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   1e936:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1e938:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1e93a:	4801      	ldr	r0, [pc, #4]	; (1e940 <rpmsg_send_offchannel_nocopy+0x28>)
}
   1e93c:	bc70      	pop	{r4, r5, r6}
   1e93e:	4770      	bx	lr
   1e940:	fffff82d 	.word	0xfffff82d

0001e944 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   1e944:	b570      	push	{r4, r5, r6, lr}
   1e946:	460c      	mov	r4, r1
   1e948:	4611      	mov	r1, r2
   1e94a:	4605      	mov	r5, r0
   1e94c:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1e94e:	4b0c      	ldr	r3, [pc, #48]	; (1e980 <rpmsg_register_endpoint+0x3c>)
   1e950:	2220      	movs	r2, #32
   1e952:	2900      	cmp	r1, #0
   1e954:	bf08      	it	eq
   1e956:	4619      	moveq	r1, r3
   1e958:	4620      	mov	r0, r4
   1e95a:	f00b f9ab 	bl	29cb4 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   1e95e:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   1e960:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   1e962:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   1e964:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   1e966:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   1e968:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1e96a:	9b06      	ldr	r3, [sp, #24]
   1e96c:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1e96e:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1e970:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   1e974:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   1e978:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1e97a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1e97c:	6013      	str	r3, [r2, #0]
}
   1e97e:	bd70      	pop	{r4, r5, r6, pc}
   1e980:	0002f577 	.word	0x0002f577

0001e984 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1e984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e988:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1e98c:	460d      	mov	r5, r1
   1e98e:	4692      	mov	sl, r2
   1e990:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   1e992:	4606      	mov	r6, r0
   1e994:	2800      	cmp	r0, #0
   1e996:	d06c      	beq.n	1ea72 <rpmsg_create_ept+0xee>
   1e998:	2900      	cmp	r1, #0
   1e99a:	d06a      	beq.n	1ea72 <rpmsg_create_ept+0xee>
   1e99c:	f1b9 0f00 	cmp.w	r9, #0
   1e9a0:	d067      	beq.n	1ea72 <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1e9a2:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1e9a6:	4640      	mov	r0, r8
   1e9a8:	f00a fb84 	bl	290b4 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1e9ac:	1c78      	adds	r0, r7, #1
   1e9ae:	d140      	bne.n	1ea32 <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1e9b0:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1e9b2:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e9b6:	f014 0401 	ands.w	r4, r4, #1
   1e9ba:	d00b      	beq.n	1e9d4 <rpmsg_create_ept+0x50>
	for (bit = start;
   1e9bc:	2400      	movs	r4, #0
	     bit++)
   1e9be:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e9c0:	2c80      	cmp	r4, #128	; 0x80
   1e9c2:	d054      	beq.n	1ea6e <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1e9c4:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1e9c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1e9ca:	f004 011f 	and.w	r1, r4, #31
   1e9ce:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e9d0:	07d1      	lsls	r1, r2, #31
   1e9d2:	d4f4      	bmi.n	1e9be <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e9d4:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1e9d6:	0960      	lsrs	r0, r4, #5
   1e9d8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1e9dc:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e9e0:	f004 041f 	and.w	r4, r4, #31
   1e9e4:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1e9e6:	430a      	orrs	r2, r1
   1e9e8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   1e9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e9ee:	4652      	mov	r2, sl
   1e9f0:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1e9f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e9f6:	4631      	mov	r1, r6
   1e9f8:	9300      	str	r3, [sp, #0]
   1e9fa:	4628      	mov	r0, r5
   1e9fc:	463b      	mov	r3, r7
   1e9fe:	f7ff ffa1 	bl	1e944 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1ea02:	4640      	mov	r0, r8
   1ea04:	f001 fa9c 	bl	1ff40 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1ea08:	7834      	ldrb	r4, [r6, #0]
   1ea0a:	b174      	cbz	r4, 1ea2a <rpmsg_create_ept+0xa6>
   1ea0c:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   1ea10:	b15c      	cbz	r4, 1ea2a <rpmsg_create_ept+0xa6>
   1ea12:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1ea14:	3301      	adds	r3, #1
   1ea16:	d12e      	bne.n	1ea76 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1ea18:	2100      	movs	r1, #0
   1ea1a:	4630      	mov	r0, r6
   1ea1c:	f00a fb79 	bl	29112 <rpmsg_send_ns_message>

	if (status)
   1ea20:	4604      	mov	r4, r0
   1ea22:	b110      	cbz	r0, 1ea2a <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   1ea24:	4630      	mov	r0, r6
   1ea26:	f00a fb4b 	bl	290c0 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1ea2a:	4620      	mov	r0, r4
   1ea2c:	b004      	add	sp, #16
   1ea2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1ea32:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1ea36:	d3d9      	bcc.n	1e9ec <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1ea38:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1ea3c:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1ea3e:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   1ea42:	d80f      	bhi.n	1ea64 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1ea44:	0958      	lsrs	r0, r3, #5
   1ea46:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1ea4a:	f003 031f 	and.w	r3, r3, #31
   1ea4e:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   1ea52:	07d2      	lsls	r2, r2, #31
   1ea54:	d40b      	bmi.n	1ea6e <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1ea56:	2201      	movs	r2, #1
   1ea58:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1ea5c:	4323      	orrs	r3, r4
   1ea5e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   1ea62:	e7c3      	b.n	1e9ec <rpmsg_create_ept+0x68>
   1ea64:	4c05      	ldr	r4, [pc, #20]	; (1ea7c <rpmsg_create_ept+0xf8>)
   1ea66:	4640      	mov	r0, r8
   1ea68:	f001 fa6a 	bl	1ff40 <z_impl_k_sem_give>
}
   1ea6c:	e7dd      	b.n	1ea2a <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   1ea6e:	4c04      	ldr	r4, [pc, #16]	; (1ea80 <rpmsg_create_ept+0xfc>)
   1ea70:	e7f9      	b.n	1ea66 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   1ea72:	4c02      	ldr	r4, [pc, #8]	; (1ea7c <rpmsg_create_ept+0xf8>)
   1ea74:	e7d9      	b.n	1ea2a <rpmsg_create_ept+0xa6>
   1ea76:	2400      	movs	r4, #0
   1ea78:	e7d7      	b.n	1ea2a <rpmsg_create_ept+0xa6>
   1ea7a:	bf00      	nop
   1ea7c:	fffff82d 	.word	0xfffff82d
   1ea80:	fffff829 	.word	0xfffff829

0001ea84 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   1ea84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   1ea88:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   1ea8c:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   1ea90:	2300      	movs	r3, #0
{
   1ea92:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1ea94:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1ea96:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1ea9a:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1ea9c:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1eaa0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1eaa2:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   1eaa4:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1eaa8:	f8ad 501c 	strh.w	r5, [sp, #28]
   1eaac:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1eaae:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1eab0:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1eab4:	42b1      	cmp	r1, r6
   1eab6:	bf28      	it	cs
   1eab8:	f04f 31ff 	movcs.w	r1, #4294967295
   1eabc:	eb0d 0203 	add.w	r2, sp, r3
   1eac0:	f00a f8dc 	bl	28c7c <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1eac4:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   1eac6:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1eac8:	d00b      	beq.n	1eae2 <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   1eaca:	4924      	ldr	r1, [pc, #144]	; (1eb5c <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   1eacc:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1ead0:	4a23      	ldr	r2, [pc, #140]	; (1eb60 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1ead2:	4824      	ldr	r0, [pc, #144]	; (1eb64 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1ead4:	f006 f9ff 	bl	24ed6 <assert_print>
   1ead8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1eadc:	4820      	ldr	r0, [pc, #128]	; (1eb60 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1eade:	f006 f9f3 	bl	24ec8 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   1eae2:	f104 0658 	add.w	r6, r4, #88	; 0x58
   1eae6:	4630      	mov	r0, r6
   1eae8:	f00a fba3 	bl	29232 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   1eaec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1eaf0:	699b      	ldr	r3, [r3, #24]
   1eaf2:	b9d3      	cbnz	r3, 1eb2a <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   1eaf4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1eaf8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1eafc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1eb00:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1eb02:	b9cb      	cbnz	r3, 1eb38 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   1eb04:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1eb08:	f8cd 8000 	str.w	r8, [sp]
   1eb0c:	2201      	movs	r2, #1
   1eb0e:	a902      	add	r1, sp, #8
   1eb10:	f00a f994 	bl	28e3c <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1eb14:	b1b0      	cbz	r0, 1eb44 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   1eb16:	4914      	ldr	r1, [pc, #80]	; (1eb68 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   1eb18:	f240 13b9 	movw	r3, #441	; 0x1b9
   1eb1c:	4a10      	ldr	r2, [pc, #64]	; (1eb60 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1eb1e:	4811      	ldr	r0, [pc, #68]	; (1eb64 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1eb20:	f006 f9d9 	bl	24ed6 <assert_print>
   1eb24:	f240 11b9 	movw	r1, #441	; 0x1b9
   1eb28:	e7d8      	b.n	1eadc <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1eb2a:	4639      	mov	r1, r7
   1eb2c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1eb30:	f00a fa1a 	bl	28f68 <virtqueue_get_buffer_length>
   1eb34:	4602      	mov	r2, r0
   1eb36:	e7df      	b.n	1eaf8 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   1eb38:	2b01      	cmp	r3, #1
   1eb3a:	d103      	bne.n	1eb44 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1eb3c:	4639      	mov	r1, r7
   1eb3e:	f7ff feb9 	bl	1e8b4 <virtqueue_add_consumed_buffer>
   1eb42:	e7e7      	b.n	1eb14 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   1eb44:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1eb48:	f00a fa65 	bl	29016 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   1eb4c:	4630      	mov	r0, r6
   1eb4e:	f00a fb6e 	bl	2922e <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   1eb52:	4628      	mov	r0, r5
   1eb54:	b008      	add	sp, #32
   1eb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb5a:	bf00      	nop
   1eb5c:	0003076e 	.word	0x0003076e
   1eb60:	0003072b 	.word	0x0003072b
   1eb64:	0002b939 	.word	0x0002b939
   1eb68:	00030787 	.word	0x00030787

0001eb6c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   1eb6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1eb70:	6803      	ldr	r3, [r0, #0]
   1eb72:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   1eb74:	f107 0658 	add.w	r6, r7, #88	; 0x58
   1eb78:	4630      	mov	r0, r6
   1eb7a:	f00a fb5a 	bl	29232 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1eb7e:	4638      	mov	r0, r7
   1eb80:	f10d 020a 	add.w	r2, sp, #10
   1eb84:	a903      	add	r1, sp, #12
   1eb86:	f00a fbc7 	bl	29318 <rpmsg_virtio_get_rx_buffer>
   1eb8a:	4604      	mov	r4, r0
   1eb8c:	4630      	mov	r0, r6
   1eb8e:	f00a fb4e 	bl	2922e <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   1eb92:	2c00      	cmp	r4, #0
   1eb94:	d04f      	beq.n	1ec36 <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   1eb96:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1eb9a:	4630      	mov	r0, r6
   1eb9c:	60a3      	str	r3, [r4, #8]
   1eb9e:	f00a fb48 	bl	29232 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1eba2:	f04f 33ff 	mov.w	r3, #4294967295
   1eba6:	2100      	movs	r1, #0
   1eba8:	4638      	mov	r0, r7
   1ebaa:	6862      	ldr	r2, [r4, #4]
   1ebac:	f00a fae5 	bl	2917a <rpmsg_get_endpoint>
   1ebb0:	4605      	mov	r5, r0
   1ebb2:	4630      	mov	r0, r6
   1ebb4:	f00a fb3b 	bl	2922e <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   1ebb8:	b1ed      	cbz	r5, 1ebf6 <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1ebba:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1ebbc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1ebbe:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1ebc0:	bf08      	it	eq
   1ebc2:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1ebc4:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1ebc6:	bf08      	it	eq
   1ebc8:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1ebca:	6823      	ldr	r3, [r4, #0]
   1ebcc:	89a2      	ldrh	r2, [r4, #12]
   1ebce:	9100      	str	r1, [sp, #0]
   1ebd0:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1ebd4:	f104 0110 	add.w	r1, r4, #16
   1ebd8:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   1ebda:	2800      	cmp	r0, #0
   1ebdc:	da0b      	bge.n	1ebf6 <rpmsg_virtio_rx_callback+0x8a>
   1ebde:	4917      	ldr	r1, [pc, #92]	; (1ec3c <rpmsg_virtio_rx_callback+0xd0>)
   1ebe0:	4817      	ldr	r0, [pc, #92]	; (1ec40 <rpmsg_virtio_rx_callback+0xd4>)
   1ebe2:	f240 2343 	movw	r3, #579	; 0x243
   1ebe6:	4a17      	ldr	r2, [pc, #92]	; (1ec44 <rpmsg_virtio_rx_callback+0xd8>)
   1ebe8:	f006 f975 	bl	24ed6 <assert_print>
   1ebec:	f240 2143 	movw	r1, #579	; 0x243
   1ebf0:	4814      	ldr	r0, [pc, #80]	; (1ec44 <rpmsg_virtio_rx_callback+0xd8>)
   1ebf2:	f006 f969 	bl	24ec8 <assert_post_action>
   1ebf6:	4630      	mov	r0, r6
   1ebf8:	f00a fb1b 	bl	29232 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1ebfc:	68a3      	ldr	r3, [r4, #8]
   1ebfe:	2b00      	cmp	r3, #0
   1ec00:	db06      	blt.n	1ec10 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1ec02:	4621      	mov	r1, r4
   1ec04:	4638      	mov	r0, r7
   1ec06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1ec0a:	9a03      	ldr	r2, [sp, #12]
   1ec0c:	f00a fb9b 	bl	29346 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1ec10:	4638      	mov	r0, r7
   1ec12:	f10d 020a 	add.w	r2, sp, #10
   1ec16:	a903      	add	r1, sp, #12
   1ec18:	f00a fb7e 	bl	29318 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1ec1c:	4604      	mov	r4, r0
   1ec1e:	b118      	cbz	r0, 1ec28 <rpmsg_virtio_rx_callback+0xbc>
   1ec20:	4630      	mov	r0, r6
   1ec22:	f00a fb04 	bl	2922e <k_sem_give>
	while (rp_hdr) {
   1ec26:	e7b6      	b.n	1eb96 <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   1ec28:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1ec2c:	f00a f9f3 	bl	29016 <virtqueue_kick>
   1ec30:	4630      	mov	r0, r6
   1ec32:	f00a fafc 	bl	2922e <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   1ec36:	b004      	add	sp, #16
   1ec38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec3c:	00030793 	.word	0x00030793
   1ec40:	0002b939 	.word	0x0002b939
   1ec44:	0003072b 	.word	0x0003072b

0001ec48 <rpmsg_virtio_send_offchannel_raw>:
{
   1ec48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ec4c:	b085      	sub	sp, #20
   1ec4e:	460f      	mov	r7, r1
   1ec50:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1ec52:	a903      	add	r1, sp, #12
   1ec54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1ec56:	4606      	mov	r6, r0
   1ec58:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1ec5a:	f00a fbbf 	bl	293dc <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   1ec5e:	4604      	mov	r4, r0
   1ec60:	b350      	cbz	r0, 1ecb8 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   1ec62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1ec64:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1ec66:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   1ec6a:	429d      	cmp	r5, r3
   1ec6c:	bfa8      	it	ge
   1ec6e:	461d      	movge	r5, r3
   1ec70:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1ec72:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1ec76:	1a61      	subs	r1, r4, r1
   1ec78:	4561      	cmp	r1, ip
   1ec7a:	bf28      	it	cs
   1ec7c:	f04f 31ff 	movcs.w	r1, #4294967295
   1ec80:	462b      	mov	r3, r5
   1ec82:	464a      	mov	r2, r9
   1ec84:	f009 fffa 	bl	28c7c <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   1ec88:	4285      	cmp	r5, r0
   1ec8a:	d00b      	beq.n	1eca4 <rpmsg_virtio_send_offchannel_raw+0x5c>
   1ec8c:	490b      	ldr	r1, [pc, #44]	; (1ecbc <rpmsg_virtio_send_offchannel_raw+0x74>)
   1ec8e:	480c      	ldr	r0, [pc, #48]	; (1ecc0 <rpmsg_virtio_send_offchannel_raw+0x78>)
   1ec90:	f240 2303 	movw	r3, #515	; 0x203
   1ec94:	4a0b      	ldr	r2, [pc, #44]	; (1ecc4 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1ec96:	f006 f91e 	bl	24ed6 <assert_print>
   1ec9a:	f240 2103 	movw	r1, #515	; 0x203
   1ec9e:	4809      	ldr	r0, [pc, #36]	; (1ecc4 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1eca0:	f006 f912 	bl	24ec8 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   1eca4:	4623      	mov	r3, r4
   1eca6:	4642      	mov	r2, r8
   1eca8:	4639      	mov	r1, r7
   1ecaa:	4630      	mov	r0, r6
   1ecac:	9500      	str	r5, [sp, #0]
   1ecae:	f7ff fee9 	bl	1ea84 <rpmsg_virtio_send_offchannel_nocopy>
}
   1ecb2:	b005      	add	sp, #20
   1ecb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   1ecb8:	4803      	ldr	r0, [pc, #12]	; (1ecc8 <rpmsg_virtio_send_offchannel_raw+0x80>)
   1ecba:	e7fa      	b.n	1ecb2 <rpmsg_virtio_send_offchannel_raw+0x6a>
   1ecbc:	0003079f 	.word	0x0003079f
   1ecc0:	0002b939 	.word	0x0002b939
   1ecc4:	0003072b 	.word	0x0003072b
   1ecc8:	fffff82e 	.word	0xfffff82e

0001eccc <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   1eccc:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1ecce:	4604      	mov	r4, r0
   1ecd0:	b1e0      	cbz	r0, 1ed0c <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   1ecd2:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1ecd6:	4628      	mov	r0, r5
   1ecd8:	f00a faab 	bl	29232 <__metal_mutex_acquire>
   1ecdc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1ece0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1ece2:	b953      	cbnz	r3, 1ecfa <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   1ece4:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   1ece8:	3c10      	subs	r4, #16
	if (length <= 0) {
   1ecea:	2c00      	cmp	r4, #0
   1ecec:	dc00      	bgt.n	1ecf0 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   1ecee:	4c08      	ldr	r4, [pc, #32]	; (1ed10 <rpmsg_virtio_get_buffer_size+0x44>)
   1ecf0:	4628      	mov	r0, r5
   1ecf2:	f00a fa9c 	bl	2922e <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   1ecf6:	4620      	mov	r0, r4
   1ecf8:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   1ecfa:	2b01      	cmp	r3, #1
   1ecfc:	d1f7      	bne.n	1ecee <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1ecfe:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1ed02:	f00a f9bf 	bl	29084 <virtqueue_get_desc_size>
   1ed06:	f1a0 0410 	sub.w	r4, r0, #16
   1ed0a:	e7ee      	b.n	1ecea <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   1ed0c:	4c01      	ldr	r4, [pc, #4]	; (1ed14 <rpmsg_virtio_get_buffer_size+0x48>)
   1ed0e:	e7f2      	b.n	1ecf6 <rpmsg_virtio_get_buffer_size+0x2a>
   1ed10:	fffff82e 	.word	0xfffff82e
   1ed14:	fffff82d 	.word	0xfffff82d

0001ed18 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   1ed18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed1c:	b08a      	sub	sp, #40	; 0x28
   1ed1e:	460d      	mov	r5, r1
   1ed20:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   1ed24:	4690      	mov	r8, r2
   1ed26:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   1ed28:	4604      	mov	r4, r0
   1ed2a:	b920      	cbnz	r0, 1ed36 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   1ed2c:	4f81      	ldr	r7, [pc, #516]	; (1ef34 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   1ed2e:	4638      	mov	r0, r7
   1ed30:	b00a      	add	sp, #40	; 0x28
   1ed32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   1ed36:	2900      	cmp	r1, #0
   1ed38:	d0f8      	beq.n	1ed2c <rpmsg_init_vdev_with_config+0x14>
   1ed3a:	2b00      	cmp	r3, #0
   1ed3c:	d0f6      	beq.n	1ed2c <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   1ed3e:	2294      	movs	r2, #148	; 0x94
   1ed40:	2100      	movs	r1, #0
   1ed42:	f00a fe68 	bl	29a16 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ed46:	2201      	movs	r2, #1
   1ed48:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1ed4c:	4611      	mov	r1, r2
   1ed4e:	f00a fc74 	bl	2963a <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1ed52:	4b79      	ldr	r3, [pc, #484]	; (1ef38 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   1ed54:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   1ed58:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1ed5c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1ed5e:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   1ed60:	4b76      	ldr	r3, [pc, #472]	; (1ef3c <rpmsg_init_vdev_with_config+0x224>)
   1ed62:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   1ed64:	4b76      	ldr	r3, [pc, #472]	; (1ef40 <rpmsg_init_vdev_with_config+0x228>)
   1ed66:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   1ed6a:	4b76      	ldr	r3, [pc, #472]	; (1ef44 <rpmsg_init_vdev_with_config+0x22c>)
   1ed6c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   1ed70:	4b75      	ldr	r3, [pc, #468]	; (1ef48 <rpmsg_init_vdev_with_config+0x230>)
   1ed72:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   1ed76:	4b75      	ldr	r3, [pc, #468]	; (1ef4c <rpmsg_init_vdev_with_config+0x234>)
   1ed78:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1ed7c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1ed80:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   1ed84:	f1b8 0f00 	cmp.w	r8, #0
   1ed88:	d16e      	bne.n	1ee68 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   1ed8a:	2f00      	cmp	r7, #0
   1ed8c:	d0ce      	beq.n	1ed2c <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   1ed8e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1ed92:	f104 0394 	add.w	r3, r4, #148	; 0x94
   1ed96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1ed9a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1ed9e:	6a03      	ldr	r3, [r0, #32]
   1eda0:	689b      	ldr	r3, [r3, #8]
   1eda2:	4798      	blx	r3
   1eda4:	2300      	movs	r3, #0
   1eda6:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1eda8:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1edac:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1edae:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   1edb2:	f1b8 0f00 	cmp.w	r8, #0
   1edb6:	d16d      	bne.n	1ee94 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   1edb8:	7a3b      	ldrb	r3, [r7, #8]
   1edba:	2b00      	cmp	r3, #0
   1edbc:	d068      	beq.n	1ee90 <rpmsg_init_vdev_with_config+0x178>
   1edbe:	f109 030c 	add.w	r3, r9, #12
   1edc2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   1edc6:	f1b9 0f00 	cmp.w	r9, #0
   1edca:	d0af      	beq.n	1ed2c <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   1edcc:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1edd0:	2a00      	cmp	r2, #0
   1edd2:	f000 80ad 	beq.w	1ef30 <rpmsg_init_vdev_with_config+0x218>
   1edd6:	689b      	ldr	r3, [r3, #8]
   1edd8:	2b00      	cmp	r3, #0
   1edda:	f000 80a9 	beq.w	1ef30 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   1edde:	4b5c      	ldr	r3, [pc, #368]	; (1ef50 <rpmsg_init_vdev_with_config+0x238>)
   1ede0:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   1ede2:	4b5c      	ldr	r3, [pc, #368]	; (1ef54 <rpmsg_init_vdev_with_config+0x23c>)
   1ede4:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   1ede6:	4b5c      	ldr	r3, [pc, #368]	; (1ef58 <rpmsg_init_vdev_with_config+0x240>)
   1ede8:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   1edea:	4b5c      	ldr	r3, [pc, #368]	; (1ef5c <rpmsg_init_vdev_with_config+0x244>)
   1edec:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1edee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1edf0:	681b      	ldr	r3, [r3, #0]
   1edf2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   1edf6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1edf8:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1edfa:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   1edfe:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   1ee02:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1ee06:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   1ee08:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   1ee0c:	9300      	str	r3, [sp, #0]
   1ee0e:	2202      	movs	r2, #2
   1ee10:	2100      	movs	r1, #0
   1ee12:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1ee16:	ab04      	add	r3, sp, #16
   1ee18:	f7ff fce0 	bl	1e7dc <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   1ee1c:	4607      	mov	r7, r0
   1ee1e:	2800      	cmp	r0, #0
   1ee20:	d185      	bne.n	1ed2e <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   1ee22:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1ee26:	f00a f8c8 	bl	28fba <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   1ee2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ee2c:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   1ee2e:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   1ee30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ee32:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   1ee34:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   1ee36:	f1b8 0f00 	cmp.w	r8, #0
   1ee3a:	d161      	bne.n	1ef00 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1ee3c:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   1ee3e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1ee42:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1ee44:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1ee48:	895b      	ldrh	r3, [r3, #10]
   1ee4a:	4553      	cmp	r3, sl
   1ee4c:	d834      	bhi.n	1eeb8 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   1ee4e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1ee52:	e9c4 4400 	strd	r4, r4, [r4]
   1ee56:	2b00      	cmp	r3, #0
   1ee58:	d159      	bne.n	1ef0e <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1ee5a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1ee5e:	2104      	movs	r1, #4
   1ee60:	6a03      	ldr	r3, [r0, #32]
   1ee62:	685b      	ldr	r3, [r3, #4]
   1ee64:	4798      	blx	r3
}
   1ee66:	e762      	b.n	1ed2e <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   1ee68:	f1b8 0f01 	cmp.w	r8, #1
   1ee6c:	d195      	bne.n	1ed9a <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   1ee6e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1ee72:	6a03      	ldr	r3, [r0, #32]
   1ee74:	681b      	ldr	r3, [r3, #0]
   1ee76:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1ee78:	0642      	lsls	r2, r0, #25
   1ee7a:	d506      	bpl.n	1ee8a <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   1ee7c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1ee80:	2100      	movs	r1, #0
   1ee82:	6a03      	ldr	r3, [r0, #32]
   1ee84:	685b      	ldr	r3, [r3, #4]
   1ee86:	4798      	blx	r3
}
   1ee88:	e7f1      	b.n	1ee6e <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1ee8a:	0743      	lsls	r3, r0, #29
   1ee8c:	d5ef      	bpl.n	1ee6e <rpmsg_init_vdev_with_config+0x156>
   1ee8e:	e784      	b.n	1ed9a <rpmsg_init_vdev_with_config+0x82>
   1ee90:	464b      	mov	r3, r9
   1ee92:	e796      	b.n	1edc2 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   1ee94:	f1b8 0f01 	cmp.w	r8, #1
   1ee98:	d1b1      	bne.n	1edfe <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   1ee9a:	4b2e      	ldr	r3, [pc, #184]	; (1ef54 <rpmsg_init_vdev_with_config+0x23c>)
   1ee9c:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   1ee9e:	4b2c      	ldr	r3, [pc, #176]	; (1ef50 <rpmsg_init_vdev_with_config+0x238>)
   1eea0:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   1eea2:	4b2e      	ldr	r3, [pc, #184]	; (1ef5c <rpmsg_init_vdev_with_config+0x244>)
   1eea4:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   1eea6:	4b2c      	ldr	r3, [pc, #176]	; (1ef58 <rpmsg_init_vdev_with_config+0x240>)
   1eea8:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1eeaa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1eeac:	699b      	ldr	r3, [r3, #24]
   1eeae:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   1eeb2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1eeb4:	681b      	ldr	r3, [r3, #0]
   1eeb6:	e7a0      	b.n	1edfa <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1eeb8:	4648      	mov	r0, r9
   1eeba:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   1eebe:	f00a fa7e 	bl	293be <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1eec2:	4605      	mov	r5, r0
   1eec4:	b1c8      	cbz	r0, 1eefa <rpmsg_init_vdev_with_config+0x1e2>
   1eec6:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1eec8:	9008      	str	r0, [sp, #32]
   1eeca:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1eecc:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1eece:	2200      	movs	r2, #0
   1eed0:	4281      	cmp	r1, r0
   1eed2:	bf28      	it	cs
   1eed4:	f04f 31ff 	movcs.w	r1, #4294967295
   1eed8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1eedc:	4630      	mov	r0, r6
   1eede:	f009 ff07 	bl	28cf0 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1eee2:	9500      	str	r5, [sp, #0]
   1eee4:	2301      	movs	r3, #1
   1eee6:	2200      	movs	r2, #0
   1eee8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1eeec:	a908      	add	r1, sp, #32
   1eeee:	f009 ffa5 	bl	28e3c <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1eef2:	b918      	cbnz	r0, 1eefc <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1eef4:	f10a 0a01 	add.w	sl, sl, #1
   1eef8:	e7a4      	b.n	1ee44 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   1eefa:	4819      	ldr	r0, [pc, #100]	; (1ef60 <rpmsg_init_vdev_with_config+0x248>)
   1eefc:	4607      	mov	r7, r0
   1eefe:	e716      	b.n	1ed2e <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   1ef00:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1ef04:	e9c4 4400 	strd	r4, r4, [r4]
   1ef08:	2b00      	cmp	r3, #0
   1ef0a:	f43f af10 	beq.w	1ed2e <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   1ef0e:	2300      	movs	r3, #0
   1ef10:	9302      	str	r3, [sp, #8]
   1ef12:	4b14      	ldr	r3, [pc, #80]	; (1ef64 <rpmsg_init_vdev_with_config+0x24c>)
   1ef14:	4620      	mov	r0, r4
   1ef16:	9301      	str	r3, [sp, #4]
   1ef18:	2335      	movs	r3, #53	; 0x35
   1ef1a:	4a13      	ldr	r2, [pc, #76]	; (1ef68 <rpmsg_init_vdev_with_config+0x250>)
   1ef1c:	9300      	str	r3, [sp, #0]
   1ef1e:	f104 0108 	add.w	r1, r4, #8
   1ef22:	f7ff fd0f 	bl	1e944 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   1ef26:	f1b8 0f00 	cmp.w	r8, #0
   1ef2a:	f47f af00 	bne.w	1ed2e <rpmsg_init_vdev_with_config+0x16>
   1ef2e:	e794      	b.n	1ee5a <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   1ef30:	4f0b      	ldr	r7, [pc, #44]	; (1ef60 <rpmsg_init_vdev_with_config+0x248>)
   1ef32:	e6fc      	b.n	1ed2e <rpmsg_init_vdev_with_config+0x16>
   1ef34:	fffff82d 	.word	0xfffff82d
   1ef38:	0001ec49 	.word	0x0001ec49
   1ef3c:	0002921f 	.word	0x0002921f
   1ef40:	0002937f 	.word	0x0002937f
   1ef44:	000293dd 	.word	0x000293dd
   1ef48:	0001ea85 	.word	0x0001ea85
   1ef4c:	0002923f 	.word	0x0002923f
   1ef50:	000307ad 	.word	0x000307ad
   1ef54:	000307b3 	.word	0x000307b3
   1ef58:	0001eb6d 	.word	0x0001eb6d
   1ef5c:	0002922d 	.word	0x0002922d
   1ef60:	fffff82e 	.word	0xfffff82e
   1ef64:	00029281 	.word	0x00029281
   1ef68:	000307b9 	.word	0x000307b9

0001ef6c <rpmsg_init_vdev>:
{
   1ef6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef6e:	4605      	mov	r5, r0
   1ef70:	460e      	mov	r6, r1
   1ef72:	4617      	mov	r7, r2
   1ef74:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1ef76:	4a07      	ldr	r2, [pc, #28]	; (1ef94 <rpmsg_init_vdev+0x28>)
   1ef78:	ac03      	add	r4, sp, #12
   1ef7a:	ca07      	ldmia	r2, {r0, r1, r2}
   1ef7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   1ef80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ef82:	4631      	mov	r1, r6
   1ef84:	9200      	str	r2, [sp, #0]
   1ef86:	4628      	mov	r0, r5
   1ef88:	463a      	mov	r2, r7
   1ef8a:	9401      	str	r4, [sp, #4]
   1ef8c:	f7ff fec4 	bl	1ed18 <rpmsg_init_vdev_with_config>
}
   1ef90:	b007      	add	sp, #28
   1ef92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef94:	0002aaf4 	.word	0x0002aaf4

0001ef98 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1ef98:	2203      	movs	r2, #3
   1ef9a:	4b11      	ldr	r3, [pc, #68]	; (1efe0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1ef9c:	4911      	ldr	r1, [pc, #68]	; (1efe4 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1ef9e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1efa0:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1efa2:	4a11      	ldr	r2, [pc, #68]	; (1efe8 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1efa4:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1efa6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1efa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1efac:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1efae:	2200      	movs	r2, #0
   1efb0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1efb2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1efb4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1efb6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1efb8:	490c      	ldr	r1, [pc, #48]	; (1efec <_DoInit+0x54>)
   1efba:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1efbc:	2110      	movs	r1, #16
   1efbe:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1efc0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1efc2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1efc4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1efc6:	4a0a      	ldr	r2, [pc, #40]	; (1eff0 <_DoInit+0x58>)
   1efc8:	6812      	ldr	r2, [r2, #0]
   1efca:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1efce:	4a09      	ldr	r2, [pc, #36]	; (1eff4 <_DoInit+0x5c>)
   1efd0:	6810      	ldr	r0, [r2, #0]
   1efd2:	8892      	ldrh	r2, [r2, #4]
   1efd4:	6018      	str	r0, [r3, #0]
   1efd6:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1efd8:	2220      	movs	r2, #32
   1efda:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1efdc:	4770      	bx	lr
   1efde:	bf00      	nop
   1efe0:	2002145c 	.word	0x2002145c
   1efe4:	000307bc 	.word	0x000307bc
   1efe8:	20022072 	.word	0x20022072
   1efec:	20022062 	.word	0x20022062
   1eff0:	000307c5 	.word	0x000307c5
   1eff4:	000307c9 	.word	0x000307c9

0001eff8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1eff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1effc:	f04f 0b18 	mov.w	fp, #24
   1f000:	4f20      	ldr	r7, [pc, #128]	; (1f084 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f002:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1f004:	fb0b 7200 	mla	r2, fp, r0, r7
   1f008:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1f00a:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f00c:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f00e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f010:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f012:	d831      	bhi.n	1f078 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1f014:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1f018:	ebaa 0905 	sub.w	r9, sl, r5
   1f01c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1f020:	4294      	cmp	r4, r2
   1f022:	d811      	bhi.n	1f048 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f024:	2318      	movs	r3, #24
   1f026:	fb06 3303 	mla	r3, r6, r3, r3
   1f02a:	443b      	add	r3, r7
   1f02c:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f02e:	4622      	mov	r2, r4
   1f030:	4641      	mov	r1, r8
   1f032:	4428      	add	r0, r5
   1f034:	f00a fcb5 	bl	299a2 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1f038:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1f03a:	2318      	movs	r3, #24
      return 1;
   1f03c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1f03e:	fb03 7306 	mla	r3, r3, r6, r7
   1f042:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1f044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1f048:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1f04a:	429c      	cmp	r4, r3
   1f04c:	d818      	bhi.n	1f080 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f04e:	fb00 bb0b 	mla	fp, r0, fp, fp
   1f052:	44bb      	add	fp, r7
   1f054:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f058:	464a      	mov	r2, r9
   1f05a:	4428      	add	r0, r5
   1f05c:	442c      	add	r4, r5
   1f05e:	f00a fca0 	bl	299a2 <memcpy>
      if (NumBytes) {
   1f062:	ebb4 040a 	subs.w	r4, r4, sl
   1f066:	d0e8      	beq.n	1f03a <SEGGER_RTT_WriteSkipNoLock+0x42>
   1f068:	4622      	mov	r2, r4
   1f06a:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f06e:	eb08 0109 	add.w	r1, r8, r9
   1f072:	f00a fc96 	bl	299a2 <memcpy>
      return 1;
   1f076:	e7e0      	b.n	1f03a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1f078:	3b01      	subs	r3, #1
   1f07a:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1f07c:	42a3      	cmp	r3, r4
   1f07e:	d2d1      	bcs.n	1f024 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1f080:	2000      	movs	r0, #0
   1f082:	e7df      	b.n	1f044 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1f084:	2002145c 	.word	0x2002145c

0001f088 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1f088:	2218      	movs	r2, #24
   1f08a:	4b03      	ldr	r3, [pc, #12]	; (1f098 <SEGGER_RTT_HasDataUp+0x10>)
   1f08c:	fb02 3300 	mla	r3, r2, r0, r3
   1f090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1f092:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1f094:	1a80      	subs	r0, r0, r2
   1f096:	4770      	bx	lr
   1f098:	2002145c 	.word	0x2002145c

0001f09c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f09c:	4b01      	ldr	r3, [pc, #4]	; (1f0a4 <z_impl_z_errno+0x8>)
   1f09e:	6898      	ldr	r0, [r3, #8]
}
   1f0a0:	3064      	adds	r0, #100	; 0x64
   1f0a2:	4770      	bx	lr
   1f0a4:	20021504 	.word	0x20021504

0001f0a8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0ac:	4605      	mov	r5, r0
   1f0ae:	b086      	sub	sp, #24
   1f0b0:	460f      	mov	r7, r1
	__asm__ volatile(
   1f0b2:	f04f 0320 	mov.w	r3, #32
   1f0b6:	f3ef 8811 	mrs	r8, BASEPRI
   1f0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0be:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1f0c2:	f002 fe65 	bl	21d90 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f0c6:	2400      	movs	r4, #0
   1f0c8:	2d04      	cmp	r5, #4
   1f0ca:	bf96      	itet	ls
   1f0cc:	4b28      	ldrls	r3, [pc, #160]	; (1f170 <z_fatal_error+0xc8>)
   1f0ce:	4b29      	ldrhi	r3, [pc, #164]	; (1f174 <z_fatal_error+0xcc>)
   1f0d0:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1f0d4:	4606      	mov	r6, r0
   1f0d6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1f0da:	4b27      	ldr	r3, [pc, #156]	; (1f178 <z_fatal_error+0xd0>)
   1f0dc:	2201      	movs	r2, #1
   1f0de:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f0e2:	4620      	mov	r0, r4
   1f0e4:	4623      	mov	r3, r4
   1f0e6:	4925      	ldr	r1, [pc, #148]	; (1f17c <z_fatal_error+0xd4>)
   1f0e8:	9503      	str	r5, [sp, #12]
   1f0ea:	9400      	str	r4, [sp, #0]
   1f0ec:	f00a fa22 	bl	29534 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f0f0:	b16f      	cbz	r7, 1f10e <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f0f2:	69fb      	ldr	r3, [r7, #28]
   1f0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f0f8:	b14b      	cbz	r3, 1f10e <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   1f0fa:	4b21      	ldr	r3, [pc, #132]	; (1f180 <z_fatal_error+0xd8>)
   1f0fc:	2201      	movs	r2, #1
   1f0fe:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f102:	4620      	mov	r0, r4
   1f104:	4623      	mov	r3, r4
   1f106:	491d      	ldr	r1, [pc, #116]	; (1f17c <z_fatal_error+0xd4>)
   1f108:	9400      	str	r4, [sp, #0]
   1f10a:	f00a fa13 	bl	29534 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f10e:	b12e      	cbz	r6, 1f11c <z_fatal_error+0x74>
   1f110:	4630      	mov	r0, r6
   1f112:	f00a fa4a 	bl	295aa <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f116:	b108      	cbz	r0, 1f11c <z_fatal_error+0x74>
   1f118:	7803      	ldrb	r3, [r0, #0]
   1f11a:	b903      	cbnz	r3, 1f11e <z_fatal_error+0x76>
		thread_name = "unknown";
   1f11c:	4819      	ldr	r0, [pc, #100]	; (1f184 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f11e:	4b1a      	ldr	r3, [pc, #104]	; (1f188 <z_fatal_error+0xe0>)
   1f120:	2201      	movs	r2, #1
   1f122:	9302      	str	r3, [sp, #8]
   1f124:	2300      	movs	r3, #0
   1f126:	e9cd 6003 	strd	r6, r0, [sp, #12]
   1f12a:	e9cd 3300 	strd	r3, r3, [sp]
   1f12e:	4618      	mov	r0, r3
   1f130:	4912      	ldr	r1, [pc, #72]	; (1f17c <z_fatal_error+0xd4>)
   1f132:	f00a f9ff 	bl	29534 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1f136:	4639      	mov	r1, r7
   1f138:	4628      	mov	r0, r5
   1f13a:	f7fd fb7d 	bl	1c838 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1f13e:	2d04      	cmp	r5, #4
   1f140:	d10c      	bne.n	1f15c <z_fatal_error+0xb4>
   1f142:	4912      	ldr	r1, [pc, #72]	; (1f18c <z_fatal_error+0xe4>)
   1f144:	2393      	movs	r3, #147	; 0x93
   1f146:	4a12      	ldr	r2, [pc, #72]	; (1f190 <z_fatal_error+0xe8>)
   1f148:	4812      	ldr	r0, [pc, #72]	; (1f194 <z_fatal_error+0xec>)
   1f14a:	f005 fec4 	bl	24ed6 <assert_print>
   1f14e:	4812      	ldr	r0, [pc, #72]	; (1f198 <z_fatal_error+0xf0>)
   1f150:	f005 fec1 	bl	24ed6 <assert_print>
   1f154:	2193      	movs	r1, #147	; 0x93
   1f156:	480e      	ldr	r0, [pc, #56]	; (1f190 <z_fatal_error+0xe8>)
   1f158:	f005 feb6 	bl	24ec8 <assert_post_action>
	__asm__ volatile(
   1f15c:	f388 8811 	msr	BASEPRI, r8
   1f160:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f164:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1f166:	b006      	add	sp, #24
   1f168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f16c:	f7f1 bd4a 	b.w	10c04 <z_impl_k_thread_abort>
   1f170:	0002b818 	.word	0x0002b818
   1f174:	000307d0 	.word	0x000307d0
   1f178:	000307e6 	.word	0x000307e6
   1f17c:	0002aa48 	.word	0x0002aa48
   1f180:	0003080e 	.word	0x0003080e
   1f184:	000307de 	.word	0x000307de
   1f188:	0003082f 	.word	0x0003082f
   1f18c:	00030869 	.word	0x00030869
   1f190:	00030847 	.word	0x00030847
   1f194:	0002b939 	.word	0x0002b939
   1f198:	00030886 	.word	0x00030886

0001f19c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f19c:	4b0f      	ldr	r3, [pc, #60]	; (1f1dc <z_sys_init_run_level+0x40>)
{
   1f19e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f1a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f1a4:	3001      	adds	r0, #1
   1f1a6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f1aa:	42a6      	cmp	r6, r4
   1f1ac:	d800      	bhi.n	1f1b0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1f1ae:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1f1b0:	e9d4 3500 	ldrd	r3, r5, [r4]
   1f1b4:	4628      	mov	r0, r5
   1f1b6:	4798      	blx	r3
		if (dev != NULL) {
   1f1b8:	b16d      	cbz	r5, 1f1d6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1f1ba:	b138      	cbz	r0, 1f1cc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1f1bc:	2800      	cmp	r0, #0
   1f1be:	bfb8      	it	lt
   1f1c0:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1f1c2:	28ff      	cmp	r0, #255	; 0xff
   1f1c4:	bfa8      	it	ge
   1f1c6:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1f1c8:	68eb      	ldr	r3, [r5, #12]
   1f1ca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1f1cc:	68ea      	ldr	r2, [r5, #12]
   1f1ce:	7853      	ldrb	r3, [r2, #1]
   1f1d0:	f043 0301 	orr.w	r3, r3, #1
   1f1d4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f1d6:	3408      	adds	r4, #8
   1f1d8:	e7e7      	b.n	1f1aa <z_sys_init_run_level+0xe>
   1f1da:	bf00      	nop
   1f1dc:	0002b82c 	.word	0x0002b82c

0001f1e0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f1e0:	2201      	movs	r2, #1
{
   1f1e2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1f1e4:	4b09      	ldr	r3, [pc, #36]	; (1f20c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f1e6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1f1e8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f1ea:	f7ff ffd7 	bl	1f19c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f1ee:	f003 fed7 	bl	22fa0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1f1f2:	2004      	movs	r0, #4
   1f1f4:	f7ff ffd2 	bl	1f19c <z_sys_init_run_level>

	z_init_static_threads();
   1f1f8:	f000 fb66 	bl	1f8c8 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1f1fc:	f7ec fc90 	bl	bb20 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f200:	4a03      	ldr	r2, [pc, #12]	; (1f210 <bg_thread_main+0x30>)
   1f202:	7b13      	ldrb	r3, [r2, #12]
   1f204:	f023 0301 	bic.w	r3, r3, #1
   1f208:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f20a:	bd08      	pop	{r3, pc}
   1f20c:	20022472 	.word	0x20022472
   1f210:	20009c90 	.word	0x20009c90

0001f214 <z_bss_zero>:
{
   1f214:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1f216:	4803      	ldr	r0, [pc, #12]	; (1f224 <z_bss_zero+0x10>)
   1f218:	4a03      	ldr	r2, [pc, #12]	; (1f228 <z_bss_zero+0x14>)
   1f21a:	2100      	movs	r1, #0
   1f21c:	1a12      	subs	r2, r2, r0
   1f21e:	f00a f999 	bl	29554 <z_early_memset>
}
   1f222:	bd08      	pop	{r3, pc}
   1f224:	20008d70 	.word	0x20008d70
   1f228:	20022474 	.word	0x20022474

0001f22c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   1f22c:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1f22e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1f230:	4e13      	ldr	r6, [pc, #76]	; (1f280 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1f232:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   1f234:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1f238:	2300      	movs	r3, #0
{
   1f23a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1f23c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f240:	220f      	movs	r2, #15
   1f242:	9301      	str	r3, [sp, #4]
   1f244:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f248:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   1f24a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f24e:	4d0d      	ldr	r5, [pc, #52]	; (1f284 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   1f250:	490d      	ldr	r1, [pc, #52]	; (1f288 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f252:	fb03 5500 	mla	r5, r3, r0, r5
{
   1f256:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1f258:	fb02 1100 	mla	r1, r2, r0, r1
   1f25c:	4b0b      	ldr	r3, [pc, #44]	; (1f28c <z_init_cpu+0x60>)
   1f25e:	4630      	mov	r0, r6
   1f260:	9500      	str	r5, [sp, #0]
   1f262:	f000 fa97 	bl	1f794 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f266:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   1f268:	752c      	strb	r4, [r5, #20]
   1f26a:	f023 0304 	bic.w	r3, r3, #4
   1f26e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f270:	4b07      	ldr	r3, [pc, #28]	; (1f290 <z_init_cpu+0x64>)
   1f272:	3401      	adds	r4, #1
   1f274:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1f278:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1f27a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1f27c:	b006      	add	sp, #24
   1f27e:	bd70      	pop	{r4, r5, r6, pc}
   1f280:	20009c08 	.word	0x20009c08
   1f284:	20021504 	.word	0x20021504
   1f288:	20033198 	.word	0x20033198
   1f28c:	0001fa19 	.word	0x0001fa19
   1f290:	20032998 	.word	0x20032998

0001f294 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1f294:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f296:	2000      	movs	r0, #0
{
   1f298:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f29a:	f7ff ff7f 	bl	1f19c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1f29e:	4b2f      	ldr	r3, [pc, #188]	; (1f35c <z_cstart+0xc8>)
	uint32_t msp =
   1f2a0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f2a4:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1f2a8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f2ac:	2400      	movs	r4, #0
   1f2ae:	23e0      	movs	r3, #224	; 0xe0
   1f2b0:	4d2b      	ldr	r5, [pc, #172]	; (1f360 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1f2b2:	4e2c      	ldr	r6, [pc, #176]	; (1f364 <z_cstart+0xd0>)
   1f2b4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f2b8:	77ec      	strb	r4, [r5, #31]
   1f2ba:	762c      	strb	r4, [r5, #24]
   1f2bc:	766c      	strb	r4, [r5, #25]
   1f2be:	76ac      	strb	r4, [r5, #26]
   1f2c0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f2c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f2c6:	4f28      	ldr	r7, [pc, #160]	; (1f368 <z_cstart+0xd4>)
   1f2c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f2cc:	626b      	str	r3, [r5, #36]	; 0x24
   1f2ce:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f2d2:	f7f1 fbfb 	bl	10acc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f2d6:	f7f0 ff3d 	bl	10154 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f2da:	f04f 33ff 	mov.w	r3, #4294967295
   1f2de:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f2e0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1f2e2:	f7f1 fe5d 	bl	10fa0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1f2e6:	f7f1 fca3 	bl	10c30 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1f2ea:	f7ef f801 	bl	e2f0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f2ee:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1f2f2:	ad06      	add	r5, sp, #24
   1f2f4:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f2f6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1f2fa:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1f2fe:	f003 fe31 	bl	22f64 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1f302:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1f304:	f00a f90a 	bl	2951c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1f308:	2001      	movs	r0, #1
   1f30a:	f7ff ff47 	bl	1f19c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f30e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1f310:	4d16      	ldr	r5, [pc, #88]	; (1f36c <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f312:	f7ff ff43 	bl	1f19c <z_sys_init_run_level>
	z_sched_init();
   1f316:	f002 fbc1 	bl	21a9c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f31a:	4b15      	ldr	r3, [pc, #84]	; (1f370 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1f31c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f31e:	9305      	str	r3, [sp, #20]
   1f320:	2301      	movs	r3, #1
   1f322:	4914      	ldr	r1, [pc, #80]	; (1f374 <z_cstart+0xe0>)
   1f324:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f328:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1f32c:	4628      	mov	r0, r5
   1f32e:	463b      	mov	r3, r7
   1f330:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f334:	9400      	str	r4, [sp, #0]
   1f336:	f000 fa2d 	bl	1f794 <z_setup_new_thread>
   1f33a:	4606      	mov	r6, r0
   1f33c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1f33e:	4628      	mov	r0, r5
   1f340:	f022 0204 	bic.w	r2, r2, #4
   1f344:	736a      	strb	r2, [r5, #13]
   1f346:	f001 fd81 	bl	20e4c <z_ready_thread>
	z_init_cpu(0);
   1f34a:	4620      	mov	r0, r4
   1f34c:	f7ff ff6e 	bl	1f22c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f350:	463a      	mov	r2, r7
   1f352:	4631      	mov	r1, r6
   1f354:	4628      	mov	r0, r5
   1f356:	f7f1 f867 	bl	10428 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f35a:	bf00      	nop
   1f35c:	20032998 	.word	0x20032998
   1f360:	e000ed00 	.word	0xe000ed00
   1f364:	20021504 	.word	0x20021504
   1f368:	0001f1e1 	.word	0x0001f1e1
   1f36c:	20009c90 	.word	0x20009c90
   1f370:	00030905 	.word	0x00030905
   1f374:	200332d8 	.word	0x200332d8

0001f378 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1f378:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f37a:	4c0d      	ldr	r4, [pc, #52]	; (1f3b0 <statics_init+0x38>)
   1f37c:	4d0d      	ldr	r5, [pc, #52]	; (1f3b4 <statics_init+0x3c>)
   1f37e:	42ac      	cmp	r4, r5
   1f380:	d913      	bls.n	1f3aa <statics_init+0x32>
   1f382:	490d      	ldr	r1, [pc, #52]	; (1f3b8 <statics_init+0x40>)
   1f384:	2318      	movs	r3, #24
   1f386:	4a0d      	ldr	r2, [pc, #52]	; (1f3bc <statics_init+0x44>)
   1f388:	480d      	ldr	r0, [pc, #52]	; (1f3c0 <statics_init+0x48>)
   1f38a:	f005 fda4 	bl	24ed6 <assert_print>
   1f38e:	480d      	ldr	r0, [pc, #52]	; (1f3c4 <statics_init+0x4c>)
   1f390:	f005 fda1 	bl	24ed6 <assert_print>
   1f394:	2118      	movs	r1, #24
   1f396:	4809      	ldr	r0, [pc, #36]	; (1f3bc <statics_init+0x44>)
   1f398:	f005 fd96 	bl	24ec8 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f39c:	4620      	mov	r0, r4
   1f39e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f3a2:	f00a f8db 	bl	2955c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f3a6:	3418      	adds	r4, #24
   1f3a8:	e7e9      	b.n	1f37e <statics_init+0x6>
   1f3aa:	d3f7      	bcc.n	1f39c <statics_init+0x24>
		}
	}
	return 0;
}
   1f3ac:	2000      	movs	r0, #0
   1f3ae:	bd38      	pop	{r3, r4, r5, pc}
   1f3b0:	20008a68 	.word	0x20008a68
   1f3b4:	20008a80 	.word	0x20008a80
   1f3b8:	0003092f 	.word	0x0003092f
   1f3bc:	0003090d 	.word	0x0003090d
   1f3c0:	0002b939 	.word	0x0002b939
   1f3c4:	0002ca40 	.word	0x0002ca40

0001f3c8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1f3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3cc:	b085      	sub	sp, #20
   1f3ce:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1f3d2:	4680      	mov	r8, r0
   1f3d4:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f3d6:	4648      	mov	r0, r9
   1f3d8:	4659      	mov	r1, fp
{
   1f3da:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f3dc:	f00a f9dc 	bl	29798 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1f3e0:	f1bb 3fff 	cmp.w	fp, #4294967295
   1f3e4:	bf08      	it	eq
   1f3e6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f3ea:	4606      	mov	r6, r0
   1f3ec:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1f3ee:	bf04      	itt	eq
   1f3f0:	f04f 36ff 	moveq.w	r6, #4294967295
   1f3f4:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f3f8:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   1f3fc:	f04f 0320 	mov.w	r3, #32
   1f400:	f3ef 8511 	mrs	r5, BASEPRI
   1f404:	f383 8812 	msr	BASEPRI_MAX, r3
   1f408:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f40c:	4620      	mov	r0, r4
   1f40e:	f000 fadf 	bl	1f9d0 <z_spin_lock_valid>
   1f412:	b960      	cbnz	r0, 1f42e <k_heap_aligned_alloc+0x66>
   1f414:	2394      	movs	r3, #148	; 0x94
   1f416:	4a33      	ldr	r2, [pc, #204]	; (1f4e4 <k_heap_aligned_alloc+0x11c>)
   1f418:	4933      	ldr	r1, [pc, #204]	; (1f4e8 <k_heap_aligned_alloc+0x120>)
   1f41a:	4834      	ldr	r0, [pc, #208]	; (1f4ec <k_heap_aligned_alloc+0x124>)
   1f41c:	f005 fd5b 	bl	24ed6 <assert_print>
   1f420:	4621      	mov	r1, r4
   1f422:	4833      	ldr	r0, [pc, #204]	; (1f4f0 <k_heap_aligned_alloc+0x128>)
   1f424:	f005 fd57 	bl	24ed6 <assert_print>
   1f428:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f42a:	482e      	ldr	r0, [pc, #184]	; (1f4e4 <k_heap_aligned_alloc+0x11c>)
   1f42c:	e031      	b.n	1f492 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   1f42e:	4620      	mov	r0, r4
   1f430:	f000 faea 	bl	1fa08 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f434:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1f438:	b113      	cbz	r3, 1f440 <k_heap_aligned_alloc+0x78>
   1f43a:	ea5b 0909 	orrs.w	r9, fp, r9
   1f43e:	d11d      	bne.n	1f47c <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f440:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1f444:	4652      	mov	r2, sl
   1f446:	4640      	mov	r0, r8
   1f448:	9903      	ldr	r1, [sp, #12]
   1f44a:	f7ed fcf9 	bl	ce40 <sys_heap_aligned_alloc>
   1f44e:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1f450:	f003 f88c 	bl	2256c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1f454:	f1b9 0f00 	cmp.w	r9, #0
   1f458:	d01d      	beq.n	1f496 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f45a:	4620      	mov	r0, r4
   1f45c:	f000 fac6 	bl	1f9ec <z_spin_unlock_valid>
   1f460:	2800      	cmp	r0, #0
   1f462:	d137      	bne.n	1f4d4 <k_heap_aligned_alloc+0x10c>
   1f464:	23c2      	movs	r3, #194	; 0xc2
   1f466:	4a1f      	ldr	r2, [pc, #124]	; (1f4e4 <k_heap_aligned_alloc+0x11c>)
   1f468:	4922      	ldr	r1, [pc, #136]	; (1f4f4 <k_heap_aligned_alloc+0x12c>)
   1f46a:	4820      	ldr	r0, [pc, #128]	; (1f4ec <k_heap_aligned_alloc+0x124>)
   1f46c:	f005 fd33 	bl	24ed6 <assert_print>
   1f470:	4621      	mov	r1, r4
   1f472:	4821      	ldr	r0, [pc, #132]	; (1f4f8 <k_heap_aligned_alloc+0x130>)
   1f474:	f005 fd2f 	bl	24ed6 <assert_print>
   1f478:	21c2      	movs	r1, #194	; 0xc2
   1f47a:	e7d6      	b.n	1f42a <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1f47c:	491f      	ldr	r1, [pc, #124]	; (1f4fc <k_heap_aligned_alloc+0x134>)
   1f47e:	234c      	movs	r3, #76	; 0x4c
   1f480:	4a1f      	ldr	r2, [pc, #124]	; (1f500 <k_heap_aligned_alloc+0x138>)
   1f482:	481a      	ldr	r0, [pc, #104]	; (1f4ec <k_heap_aligned_alloc+0x124>)
   1f484:	f005 fd27 	bl	24ed6 <assert_print>
   1f488:	481e      	ldr	r0, [pc, #120]	; (1f504 <k_heap_aligned_alloc+0x13c>)
   1f48a:	f005 fd24 	bl	24ed6 <assert_print>
   1f48e:	214c      	movs	r1, #76	; 0x4c
   1f490:	481b      	ldr	r0, [pc, #108]	; (1f500 <k_heap_aligned_alloc+0x138>)
   1f492:	f005 fd19 	bl	24ec8 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1f496:	1a30      	subs	r0, r6, r0
   1f498:	eb67 0101 	sbc.w	r1, r7, r1
   1f49c:	2801      	cmp	r0, #1
   1f49e:	f171 0300 	sbcs.w	r3, r1, #0
   1f4a2:	dbda      	blt.n	1f45a <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f4a4:	e9cd 0100 	strd	r0, r1, [sp]
   1f4a8:	465a      	mov	r2, fp
   1f4aa:	4629      	mov	r1, r5
   1f4ac:	4620      	mov	r0, r4
   1f4ae:	f002 f827 	bl	21500 <z_pend_curr>
   1f4b2:	f04f 0320 	mov.w	r3, #32
   1f4b6:	f3ef 8511 	mrs	r5, BASEPRI
   1f4ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f4c2:	4620      	mov	r0, r4
   1f4c4:	f000 fa84 	bl	1f9d0 <z_spin_lock_valid>
   1f4c8:	2800      	cmp	r0, #0
   1f4ca:	d0a3      	beq.n	1f414 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1f4cc:	4620      	mov	r0, r4
   1f4ce:	f000 fa9b 	bl	1fa08 <z_spin_lock_set_owner>
	return k;
   1f4d2:	e7b7      	b.n	1f444 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   1f4d4:	f385 8811 	msr	BASEPRI, r5
   1f4d8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1f4dc:	4648      	mov	r0, r9
   1f4de:	b005      	add	sp, #20
   1f4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4e4:	0002c76f 	.word	0x0002c76f
   1f4e8:	0002c7c8 	.word	0x0002c7c8
   1f4ec:	0002b939 	.word	0x0002b939
   1f4f0:	0002c7dd 	.word	0x0002c7dd
   1f4f4:	0002c79c 	.word	0x0002c79c
   1f4f8:	0002c7b3 	.word	0x0002c7b3
   1f4fc:	00030945 	.word	0x00030945
   1f500:	0003090d 	.word	0x0003090d
   1f504:	0002f575 	.word	0x0002f575

0001f508 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1f508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f50a:	4605      	mov	r5, r0
   1f50c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f50e:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   1f512:	f04f 0320 	mov.w	r3, #32
   1f516:	f3ef 8711 	mrs	r7, BASEPRI
   1f51a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f51e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f522:	4620      	mov	r0, r4
   1f524:	f000 fa54 	bl	1f9d0 <z_spin_lock_valid>
   1f528:	b968      	cbnz	r0, 1f546 <k_heap_free+0x3e>
   1f52a:	2394      	movs	r3, #148	; 0x94
   1f52c:	4a19      	ldr	r2, [pc, #100]	; (1f594 <k_heap_free+0x8c>)
   1f52e:	491a      	ldr	r1, [pc, #104]	; (1f598 <k_heap_free+0x90>)
   1f530:	481a      	ldr	r0, [pc, #104]	; (1f59c <k_heap_free+0x94>)
   1f532:	f005 fcd0 	bl	24ed6 <assert_print>
   1f536:	4621      	mov	r1, r4
   1f538:	4819      	ldr	r0, [pc, #100]	; (1f5a0 <k_heap_free+0x98>)
   1f53a:	f005 fccc 	bl	24ed6 <assert_print>
   1f53e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f540:	4814      	ldr	r0, [pc, #80]	; (1f594 <k_heap_free+0x8c>)
   1f542:	f005 fcc1 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f546:	4620      	mov	r0, r4
   1f548:	f000 fa5e 	bl	1fa08 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1f54c:	4628      	mov	r0, r5
   1f54e:	4631      	mov	r1, r6
   1f550:	f7ed fc30 	bl	cdb4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1f554:	f105 000c 	add.w	r0, r5, #12
   1f558:	f00a f904 	bl	29764 <z_unpend_all>
   1f55c:	b128      	cbz	r0, 1f56a <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   1f55e:	4639      	mov	r1, r7
   1f560:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1f562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1f566:	f001 bcfd 	b.w	20f64 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f56a:	4620      	mov	r0, r4
   1f56c:	f000 fa3e 	bl	1f9ec <z_spin_unlock_valid>
   1f570:	b958      	cbnz	r0, 1f58a <k_heap_free+0x82>
   1f572:	23c2      	movs	r3, #194	; 0xc2
   1f574:	4a07      	ldr	r2, [pc, #28]	; (1f594 <k_heap_free+0x8c>)
   1f576:	490b      	ldr	r1, [pc, #44]	; (1f5a4 <k_heap_free+0x9c>)
   1f578:	4808      	ldr	r0, [pc, #32]	; (1f59c <k_heap_free+0x94>)
   1f57a:	f005 fcac 	bl	24ed6 <assert_print>
   1f57e:	4621      	mov	r1, r4
   1f580:	4809      	ldr	r0, [pc, #36]	; (1f5a8 <k_heap_free+0xa0>)
   1f582:	f005 fca8 	bl	24ed6 <assert_print>
   1f586:	21c2      	movs	r1, #194	; 0xc2
   1f588:	e7da      	b.n	1f540 <k_heap_free+0x38>
	__asm__ volatile(
   1f58a:	f387 8811 	msr	BASEPRI, r7
   1f58e:	f3bf 8f6f 	isb	sy
}
   1f592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f594:	0002c76f 	.word	0x0002c76f
   1f598:	0002c7c8 	.word	0x0002c7c8
   1f59c:	0002b939 	.word	0x0002b939
   1f5a0:	0002c7dd 	.word	0x0002c7dd
   1f5a4:	0002c79c 	.word	0x0002c79c
   1f5a8:	0002c7b3 	.word	0x0002c7b3

0001f5ac <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   1f5ac:	2000      	movs	r0, #0
{
   1f5ae:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f5b0:	4c0c      	ldr	r4, [pc, #48]	; (1f5e4 <init_mem_slab_module+0x38>)
   1f5b2:	4d0d      	ldr	r5, [pc, #52]	; (1f5e8 <init_mem_slab_module+0x3c>)
   1f5b4:	42ac      	cmp	r4, r5
   1f5b6:	d913      	bls.n	1f5e0 <init_mem_slab_module+0x34>
   1f5b8:	490c      	ldr	r1, [pc, #48]	; (1f5ec <init_mem_slab_module+0x40>)
   1f5ba:	233d      	movs	r3, #61	; 0x3d
   1f5bc:	4a0c      	ldr	r2, [pc, #48]	; (1f5f0 <init_mem_slab_module+0x44>)
   1f5be:	480d      	ldr	r0, [pc, #52]	; (1f5f4 <init_mem_slab_module+0x48>)
   1f5c0:	f005 fc89 	bl	24ed6 <assert_print>
   1f5c4:	480c      	ldr	r0, [pc, #48]	; (1f5f8 <init_mem_slab_module+0x4c>)
   1f5c6:	f005 fc86 	bl	24ed6 <assert_print>
   1f5ca:	213d      	movs	r1, #61	; 0x3d
   1f5cc:	4808      	ldr	r0, [pc, #32]	; (1f5f0 <init_mem_slab_module+0x44>)
   1f5ce:	f005 fc7b 	bl	24ec8 <assert_post_action>
		rc = create_free_list(slab);
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	f009 ffca 	bl	2956c <create_free_list>
		if (rc < 0) {
   1f5d8:	2800      	cmp	r0, #0
   1f5da:	db02      	blt.n	1f5e2 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f5dc:	3420      	adds	r4, #32
   1f5de:	e7e9      	b.n	1f5b4 <init_mem_slab_module+0x8>
   1f5e0:	d3f7      	bcc.n	1f5d2 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   1f5e2:	bd38      	pop	{r3, r4, r5, pc}
   1f5e4:	20008a08 	.word	0x20008a08
   1f5e8:	20008a68 	.word	0x20008a68
   1f5ec:	000309b0 	.word	0x000309b0
   1f5f0:	0003098b 	.word	0x0003098b
   1f5f4:	0002b939 	.word	0x0002b939
   1f5f8:	0002ca40 	.word	0x0002ca40

0001f5fc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f5fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f600:	4604      	mov	r4, r0
   1f602:	460e      	mov	r6, r1
   1f604:	4690      	mov	r8, r2
   1f606:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1f608:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f60c:	f04f 0320 	mov.w	r3, #32
   1f610:	f3ef 8911 	mrs	r9, BASEPRI
   1f614:	f383 8812 	msr	BASEPRI_MAX, r3
   1f618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f61c:	4628      	mov	r0, r5
   1f61e:	f000 f9d7 	bl	1f9d0 <z_spin_lock_valid>
   1f622:	b968      	cbnz	r0, 1f640 <k_mem_slab_alloc+0x44>
   1f624:	2394      	movs	r3, #148	; 0x94
   1f626:	4a23      	ldr	r2, [pc, #140]	; (1f6b4 <k_mem_slab_alloc+0xb8>)
   1f628:	4923      	ldr	r1, [pc, #140]	; (1f6b8 <k_mem_slab_alloc+0xbc>)
   1f62a:	4824      	ldr	r0, [pc, #144]	; (1f6bc <k_mem_slab_alloc+0xc0>)
   1f62c:	f005 fc53 	bl	24ed6 <assert_print>
   1f630:	4629      	mov	r1, r5
   1f632:	4823      	ldr	r0, [pc, #140]	; (1f6c0 <k_mem_slab_alloc+0xc4>)
   1f634:	f005 fc4f 	bl	24ed6 <assert_print>
   1f638:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f63a:	481e      	ldr	r0, [pc, #120]	; (1f6b4 <k_mem_slab_alloc+0xb8>)
   1f63c:	f005 fc44 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f640:	4628      	mov	r0, r5
   1f642:	f000 f9e1 	bl	1fa08 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1f646:	69a3      	ldr	r3, [r4, #24]
   1f648:	b1b3      	cbz	r3, 1f678 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   1f64a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f64c:	681b      	ldr	r3, [r3, #0]
   1f64e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1f650:	69e3      	ldr	r3, [r4, #28]
   1f652:	3301      	adds	r3, #1
   1f654:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f656:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f658:	4628      	mov	r0, r5
   1f65a:	f000 f9c7 	bl	1f9ec <z_spin_unlock_valid>
   1f65e:	bb18      	cbnz	r0, 1f6a8 <k_mem_slab_alloc+0xac>
   1f660:	23c2      	movs	r3, #194	; 0xc2
   1f662:	4a14      	ldr	r2, [pc, #80]	; (1f6b4 <k_mem_slab_alloc+0xb8>)
   1f664:	4917      	ldr	r1, [pc, #92]	; (1f6c4 <k_mem_slab_alloc+0xc8>)
   1f666:	4815      	ldr	r0, [pc, #84]	; (1f6bc <k_mem_slab_alloc+0xc0>)
   1f668:	f005 fc35 	bl	24ed6 <assert_print>
   1f66c:	4629      	mov	r1, r5
   1f66e:	4816      	ldr	r0, [pc, #88]	; (1f6c8 <k_mem_slab_alloc+0xcc>)
   1f670:	f005 fc31 	bl	24ed6 <assert_print>
   1f674:	21c2      	movs	r1, #194	; 0xc2
   1f676:	e7e0      	b.n	1f63a <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1f678:	ea58 0207 	orrs.w	r2, r8, r7
   1f67c:	d103      	bne.n	1f686 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   1f67e:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   1f682:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1f684:	e7e8      	b.n	1f658 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1f686:	4622      	mov	r2, r4
   1f688:	4649      	mov	r1, r9
   1f68a:	4628      	mov	r0, r5
   1f68c:	e9cd 8700 	strd	r8, r7, [sp]
   1f690:	f001 ff36 	bl	21500 <z_pend_curr>
		if (result == 0) {
   1f694:	4604      	mov	r4, r0
   1f696:	b918      	cbnz	r0, 1f6a0 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   1f698:	4b0c      	ldr	r3, [pc, #48]	; (1f6cc <k_mem_slab_alloc+0xd0>)
   1f69a:	689b      	ldr	r3, [r3, #8]
   1f69c:	695b      	ldr	r3, [r3, #20]
   1f69e:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1f6a0:	4620      	mov	r0, r4
   1f6a2:	b003      	add	sp, #12
   1f6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1f6a8:	f389 8811 	msr	BASEPRI, r9
   1f6ac:	f3bf 8f6f 	isb	sy
	return result;
   1f6b0:	e7f6      	b.n	1f6a0 <k_mem_slab_alloc+0xa4>
   1f6b2:	bf00      	nop
   1f6b4:	0002c76f 	.word	0x0002c76f
   1f6b8:	0002c7c8 	.word	0x0002c7c8
   1f6bc:	0002b939 	.word	0x0002b939
   1f6c0:	0002c7dd 	.word	0x0002c7dd
   1f6c4:	0002c79c 	.word	0x0002c79c
   1f6c8:	0002c7b3 	.word	0x0002c7b3
   1f6cc:	20021504 	.word	0x20021504

0001f6d0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6d4:	4604      	mov	r4, r0
   1f6d6:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1f6d8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f6dc:	f04f 0320 	mov.w	r3, #32
   1f6e0:	f3ef 8711 	mrs	r7, BASEPRI
   1f6e4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f6e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f6ec:	4628      	mov	r0, r5
   1f6ee:	f000 f96f 	bl	1f9d0 <z_spin_lock_valid>
   1f6f2:	b968      	cbnz	r0, 1f710 <k_mem_slab_free+0x40>
   1f6f4:	2394      	movs	r3, #148	; 0x94
   1f6f6:	4a21      	ldr	r2, [pc, #132]	; (1f77c <k_mem_slab_free+0xac>)
   1f6f8:	4921      	ldr	r1, [pc, #132]	; (1f780 <k_mem_slab_free+0xb0>)
   1f6fa:	4822      	ldr	r0, [pc, #136]	; (1f784 <k_mem_slab_free+0xb4>)
   1f6fc:	f005 fbeb 	bl	24ed6 <assert_print>
   1f700:	4629      	mov	r1, r5
   1f702:	4821      	ldr	r0, [pc, #132]	; (1f788 <k_mem_slab_free+0xb8>)
   1f704:	f005 fbe7 	bl	24ed6 <assert_print>
   1f708:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f70a:	481c      	ldr	r0, [pc, #112]	; (1f77c <k_mem_slab_free+0xac>)
   1f70c:	f005 fbdc 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f710:	4628      	mov	r0, r5
   1f712:	f000 f979 	bl	1fa08 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f716:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1f71a:	f1b8 0f00 	cmp.w	r8, #0
   1f71e:	d10f      	bne.n	1f740 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f720:	4620      	mov	r0, r4
   1f722:	f002 f96b 	bl	219fc <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f726:	b158      	cbz	r0, 1f740 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f728:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f72a:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f72e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1f730:	f001 fb8c 	bl	20e4c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1f734:	4639      	mov	r1, r7
   1f736:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1f738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1f73c:	f001 bc12 	b.w	20f64 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f740:	6833      	ldr	r3, [r6, #0]
   1f742:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f744:	4628      	mov	r0, r5
   1f746:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f748:	6833      	ldr	r3, [r6, #0]
   1f74a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1f74c:	69e3      	ldr	r3, [r4, #28]
   1f74e:	3b01      	subs	r3, #1
   1f750:	61e3      	str	r3, [r4, #28]
   1f752:	f000 f94b 	bl	1f9ec <z_spin_unlock_valid>
   1f756:	b958      	cbnz	r0, 1f770 <k_mem_slab_free+0xa0>
   1f758:	23c2      	movs	r3, #194	; 0xc2
   1f75a:	4a08      	ldr	r2, [pc, #32]	; (1f77c <k_mem_slab_free+0xac>)
   1f75c:	490b      	ldr	r1, [pc, #44]	; (1f78c <k_mem_slab_free+0xbc>)
   1f75e:	4809      	ldr	r0, [pc, #36]	; (1f784 <k_mem_slab_free+0xb4>)
   1f760:	f005 fbb9 	bl	24ed6 <assert_print>
   1f764:	4629      	mov	r1, r5
   1f766:	480a      	ldr	r0, [pc, #40]	; (1f790 <k_mem_slab_free+0xc0>)
   1f768:	f005 fbb5 	bl	24ed6 <assert_print>
   1f76c:	21c2      	movs	r1, #194	; 0xc2
   1f76e:	e7cc      	b.n	1f70a <k_mem_slab_free+0x3a>
	__asm__ volatile(
   1f770:	f387 8811 	msr	BASEPRI, r7
   1f774:	f3bf 8f6f 	isb	sy
}
   1f778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f77c:	0002c76f 	.word	0x0002c76f
   1f780:	0002c7c8 	.word	0x0002c7c8
   1f784:	0002b939 	.word	0x0002b939
   1f788:	0002c7dd 	.word	0x0002c7dd
   1f78c:	0002c79c 	.word	0x0002c79c
   1f790:	0002c7b3 	.word	0x0002c7b3

0001f794 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f796:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1f798:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1f79a:	2e0f      	cmp	r6, #15
   1f79c:	d12a      	bne.n	1f7f4 <z_setup_new_thread+0x60>
   1f79e:	4821      	ldr	r0, [pc, #132]	; (1f824 <z_setup_new_thread+0x90>)
   1f7a0:	4283      	cmp	r3, r0
   1f7a2:	d12b      	bne.n	1f7fc <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f7a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1f7a8:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1f7ac:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1f7ae:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   1f7b0:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1f7b2:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f7b4:	3207      	adds	r2, #7
   1f7b6:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1f7ba:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   1f7be:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   1f7c0:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f7c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   1f7c4:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1f7c6:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   1f7ca:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   1f7cc:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1f7ce:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f7d0:	9202      	str	r2, [sp, #8]
   1f7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f7d4:	4620      	mov	r0, r4
   1f7d6:	9201      	str	r2, [sp, #4]
   1f7d8:	9a08      	ldr	r2, [sp, #32]
   1f7da:	9200      	str	r2, [sp, #0]
   1f7dc:	4632      	mov	r2, r6
   1f7de:	f7f0 fe03 	bl	103e8 <arch_new_thread>
	if (!_current) {
   1f7e2:	4b11      	ldr	r3, [pc, #68]	; (1f828 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   1f7e4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1f7e6:	689b      	ldr	r3, [r3, #8]
   1f7e8:	b103      	cbz	r3, 1f7ec <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   1f7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1f7ec:	4630      	mov	r0, r6
   1f7ee:	6763      	str	r3, [r4, #116]	; 0x74
   1f7f0:	b004      	add	sp, #16
   1f7f2:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1f7f4:	f106 0010 	add.w	r0, r6, #16
   1f7f8:	281e      	cmp	r0, #30
   1f7fa:	d9d3      	bls.n	1f7a4 <z_setup_new_thread+0x10>
   1f7fc:	f44f 7306 	mov.w	r3, #536	; 0x218
   1f800:	4a0a      	ldr	r2, [pc, #40]	; (1f82c <z_setup_new_thread+0x98>)
   1f802:	490b      	ldr	r1, [pc, #44]	; (1f830 <z_setup_new_thread+0x9c>)
   1f804:	480b      	ldr	r0, [pc, #44]	; (1f834 <z_setup_new_thread+0xa0>)
   1f806:	f005 fb66 	bl	24ed6 <assert_print>
   1f80a:	4631      	mov	r1, r6
   1f80c:	480a      	ldr	r0, [pc, #40]	; (1f838 <z_setup_new_thread+0xa4>)
   1f80e:	f06f 030f 	mvn.w	r3, #15
   1f812:	220e      	movs	r2, #14
   1f814:	f005 fb5f 	bl	24ed6 <assert_print>
   1f818:	f44f 7106 	mov.w	r1, #536	; 0x218
   1f81c:	4803      	ldr	r0, [pc, #12]	; (1f82c <z_setup_new_thread+0x98>)
   1f81e:	f005 fb53 	bl	24ec8 <assert_post_action>
   1f822:	bf00      	nop
   1f824:	0001fa19 	.word	0x0001fa19
   1f828:	20021504 	.word	0x20021504
   1f82c:	000309cd 	.word	0x000309cd
   1f830:	000309f0 	.word	0x000309f0
   1f834:	0002b939 	.word	0x0002b939
   1f838:	00030a70 	.word	0x00030a70

0001f83c <z_impl_k_thread_create>:
{
   1f83c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f83e:	b087      	sub	sp, #28
   1f840:	4604      	mov	r4, r0
   1f842:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1f846:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1f84a:	b175      	cbz	r5, 1f86a <z_impl_k_thread_create+0x2e>
   1f84c:	4919      	ldr	r1, [pc, #100]	; (1f8b4 <z_impl_k_thread_create+0x78>)
   1f84e:	f240 2387 	movw	r3, #647	; 0x287
   1f852:	4a19      	ldr	r2, [pc, #100]	; (1f8b8 <z_impl_k_thread_create+0x7c>)
   1f854:	4819      	ldr	r0, [pc, #100]	; (1f8bc <z_impl_k_thread_create+0x80>)
   1f856:	f005 fb3e 	bl	24ed6 <assert_print>
   1f85a:	4819      	ldr	r0, [pc, #100]	; (1f8c0 <z_impl_k_thread_create+0x84>)
   1f85c:	f005 fb3b 	bl	24ed6 <assert_print>
   1f860:	f240 2187 	movw	r1, #647	; 0x287
   1f864:	4814      	ldr	r0, [pc, #80]	; (1f8b8 <z_impl_k_thread_create+0x7c>)
   1f866:	f005 fb2f 	bl	24ec8 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f86a:	9505      	str	r5, [sp, #20]
   1f86c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1f86e:	9504      	str	r5, [sp, #16]
   1f870:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f872:	9503      	str	r5, [sp, #12]
   1f874:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f876:	9502      	str	r5, [sp, #8]
   1f878:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f87a:	9501      	str	r5, [sp, #4]
   1f87c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1f87e:	9500      	str	r5, [sp, #0]
   1f880:	f7ff ff88 	bl	1f794 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1f884:	f1b6 3fff 	cmp.w	r6, #4294967295
   1f888:	bf08      	it	eq
   1f88a:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1f88e:	d005      	beq.n	1f89c <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f890:	ea56 0307 	orrs.w	r3, r6, r7
   1f894:	d105      	bne.n	1f8a2 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   1f896:	4620      	mov	r0, r4
   1f898:	f001 fba6 	bl	20fe8 <z_sched_start>
}
   1f89c:	4620      	mov	r0, r4
   1f89e:	b007      	add	sp, #28
   1f8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1f8a2:	463a      	mov	r2, r7
   1f8a4:	4633      	mov	r3, r6
   1f8a6:	4907      	ldr	r1, [pc, #28]	; (1f8c4 <z_impl_k_thread_create+0x88>)
   1f8a8:	f104 0018 	add.w	r0, r4, #24
   1f8ac:	f002 fc16 	bl	220dc <z_add_timeout>
   1f8b0:	e7f4      	b.n	1f89c <z_impl_k_thread_create+0x60>
   1f8b2:	bf00      	nop
   1f8b4:	00030aa1 	.word	0x00030aa1
   1f8b8:	000309cd 	.word	0x000309cd
   1f8bc:	0002b939 	.word	0x0002b939
   1f8c0:	00030ab3 	.word	0x00030ab3
   1f8c4:	000218b5 	.word	0x000218b5

0001f8c8 <z_init_static_threads>:
{
   1f8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f8cc:	4c39      	ldr	r4, [pc, #228]	; (1f9b4 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1f8ce:	4d3a      	ldr	r5, [pc, #232]	; (1f9b8 <z_init_static_threads+0xf0>)
{
   1f8d0:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1f8d2:	42ac      	cmp	r4, r5
   1f8d4:	4626      	mov	r6, r4
   1f8d6:	d92a      	bls.n	1f92e <z_init_static_threads+0x66>
   1f8d8:	4938      	ldr	r1, [pc, #224]	; (1f9bc <z_init_static_threads+0xf4>)
   1f8da:	f240 23ee 	movw	r3, #750	; 0x2ee
   1f8de:	4a38      	ldr	r2, [pc, #224]	; (1f9c0 <z_init_static_threads+0xf8>)
   1f8e0:	4838      	ldr	r0, [pc, #224]	; (1f9c4 <z_init_static_threads+0xfc>)
   1f8e2:	f005 faf8 	bl	24ed6 <assert_print>
   1f8e6:	4838      	ldr	r0, [pc, #224]	; (1f9c8 <z_init_static_threads+0x100>)
   1f8e8:	f005 faf5 	bl	24ed6 <assert_print>
   1f8ec:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   1f8f0:	4833      	ldr	r0, [pc, #204]	; (1f9c0 <z_init_static_threads+0xf8>)
   1f8f2:	f005 fae9 	bl	24ec8 <assert_post_action>
		z_setup_new_thread(
   1f8f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1f8fa:	9305      	str	r3, [sp, #20]
   1f8fc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1f900:	9304      	str	r3, [sp, #16]
   1f902:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1f906:	9303      	str	r3, [sp, #12]
   1f908:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1f90c:	9302      	str	r3, [sp, #8]
   1f90e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1f912:	9301      	str	r3, [sp, #4]
   1f914:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1f918:	9300      	str	r3, [sp, #0]
   1f91a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1f91e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1f922:	f7ff ff37 	bl	1f794 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1f926:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1f92a:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1f92c:	e7d1      	b.n	1f8d2 <z_init_static_threads+0xa>
   1f92e:	42ae      	cmp	r6, r5
   1f930:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1f934:	d3df      	bcc.n	1f8f6 <z_init_static_threads+0x2e>
	k_sched_lock();
   1f936:	f001 fba9 	bl	2108c <k_sched_lock>
   1f93a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f93e:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   1f942:	4c1c      	ldr	r4, [pc, #112]	; (1f9b4 <z_init_static_threads+0xec>)
   1f944:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1f9cc <z_init_static_threads+0x104>
   1f948:	42ac      	cmp	r4, r5
   1f94a:	d92c      	bls.n	1f9a6 <z_init_static_threads+0xde>
   1f94c:	491b      	ldr	r1, [pc, #108]	; (1f9bc <z_init_static_threads+0xf4>)
   1f94e:	f240 330d 	movw	r3, #781	; 0x30d
   1f952:	4a1b      	ldr	r2, [pc, #108]	; (1f9c0 <z_init_static_threads+0xf8>)
   1f954:	481b      	ldr	r0, [pc, #108]	; (1f9c4 <z_init_static_threads+0xfc>)
   1f956:	f005 fabe 	bl	24ed6 <assert_print>
   1f95a:	481b      	ldr	r0, [pc, #108]	; (1f9c8 <z_init_static_threads+0x100>)
   1f95c:	f005 fabb 	bl	24ed6 <assert_print>
   1f960:	f240 310d 	movw	r1, #781	; 0x30d
   1f964:	e7c4      	b.n	1f8f0 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1f966:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f968:	1c5a      	adds	r2, r3, #1
   1f96a:	d00d      	beq.n	1f988 <z_init_static_threads+0xc0>
   1f96c:	2100      	movs	r1, #0
   1f96e:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   1f970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f974:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f978:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1f97c:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f980:	d104      	bne.n	1f98c <z_init_static_threads+0xc4>
	z_sched_start(thread);
   1f982:	4640      	mov	r0, r8
   1f984:	f001 fb30 	bl	20fe8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f988:	3430      	adds	r4, #48	; 0x30
   1f98a:	e7dd      	b.n	1f948 <z_init_static_threads+0x80>
   1f98c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f990:	2300      	movs	r3, #0
   1f992:	f7e9 faad 	bl	8ef0 <__aeabi_uldivmod>
   1f996:	4602      	mov	r2, r0
   1f998:	460b      	mov	r3, r1
   1f99a:	f108 0018 	add.w	r0, r8, #24
   1f99e:	4649      	mov	r1, r9
   1f9a0:	f002 fb9c 	bl	220dc <z_add_timeout>
   1f9a4:	e7f0      	b.n	1f988 <z_init_static_threads+0xc0>
   1f9a6:	d3de      	bcc.n	1f966 <z_init_static_threads+0x9e>
}
   1f9a8:	b007      	add	sp, #28
   1f9aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1f9ae:	f001 bbd9 	b.w	21164 <k_sched_unlock>
   1f9b2:	bf00      	nop
   1f9b4:	0002a700 	.word	0x0002a700
   1f9b8:	0002a880 	.word	0x0002a880
   1f9bc:	00030ad8 	.word	0x00030ad8
   1f9c0:	000309cd 	.word	0x000309cd
   1f9c4:	0002b939 	.word	0x0002b939
   1f9c8:	0002ca40 	.word	0x0002ca40
   1f9cc:	000218b5 	.word	0x000218b5

0001f9d0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1f9d0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1f9d2:	b138      	cbz	r0, 1f9e4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1f9d4:	4b04      	ldr	r3, [pc, #16]	; (1f9e8 <z_spin_lock_valid+0x18>)
   1f9d6:	f000 0003 	and.w	r0, r0, #3
   1f9da:	7d1b      	ldrb	r3, [r3, #20]
   1f9dc:	1ac0      	subs	r0, r0, r3
   1f9de:	bf18      	it	ne
   1f9e0:	2001      	movne	r0, #1
   1f9e2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1f9e4:	2001      	movs	r0, #1
}
   1f9e6:	4770      	bx	lr
   1f9e8:	20021504 	.word	0x20021504

0001f9ec <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1f9ec:	4a05      	ldr	r2, [pc, #20]	; (1fa04 <z_spin_unlock_valid+0x18>)
{
   1f9ee:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1f9f0:	7d11      	ldrb	r1, [r2, #20]
   1f9f2:	6892      	ldr	r2, [r2, #8]
   1f9f4:	430a      	orrs	r2, r1
   1f9f6:	6801      	ldr	r1, [r0, #0]
   1f9f8:	2000      	movs	r0, #0
   1f9fa:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   1f9fc:	bf04      	itt	eq
   1f9fe:	6018      	streq	r0, [r3, #0]
	return true;
   1fa00:	2001      	moveq	r0, #1
}
   1fa02:	4770      	bx	lr
   1fa04:	20021504 	.word	0x20021504

0001fa08 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1fa08:	4b02      	ldr	r3, [pc, #8]	; (1fa14 <z_spin_lock_set_owner+0xc>)
   1fa0a:	7d1a      	ldrb	r2, [r3, #20]
   1fa0c:	689b      	ldr	r3, [r3, #8]
   1fa0e:	4313      	orrs	r3, r2
   1fa10:	6003      	str	r3, [r0, #0]
}
   1fa12:	4770      	bx	lr
   1fa14:	20021504 	.word	0x20021504

0001fa18 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1fa18:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1fa1a:	4c13      	ldr	r4, [pc, #76]	; (1fa68 <idle+0x50>)
   1fa1c:	68a3      	ldr	r3, [r4, #8]
   1fa1e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1fa22:	2b00      	cmp	r3, #0
   1fa24:	db10      	blt.n	1fa48 <idle+0x30>
   1fa26:	4d11      	ldr	r5, [pc, #68]	; (1fa6c <idle+0x54>)
	__asm__ volatile(
   1fa28:	f04f 0220 	mov.w	r2, #32
   1fa2c:	f3ef 8311 	mrs	r3, BASEPRI
   1fa30:	f382 8812 	msr	BASEPRI_MAX, r2
   1fa34:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1fa38:	f002 fc62 	bl	22300 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1fa3c:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1fa3e:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1fa40:	b963      	cbnz	r3, 1fa5c <idle+0x44>
	arch_cpu_idle();
   1fa42:	f7f0 fb8d 	bl	10160 <arch_cpu_idle>
}
   1fa46:	e7ef      	b.n	1fa28 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1fa48:	4909      	ldr	r1, [pc, #36]	; (1fa70 <idle+0x58>)
   1fa4a:	480a      	ldr	r0, [pc, #40]	; (1fa74 <idle+0x5c>)
   1fa4c:	2327      	movs	r3, #39	; 0x27
   1fa4e:	4a0a      	ldr	r2, [pc, #40]	; (1fa78 <idle+0x60>)
   1fa50:	f005 fa41 	bl	24ed6 <assert_print>
   1fa54:	2127      	movs	r1, #39	; 0x27
   1fa56:	4808      	ldr	r0, [pc, #32]	; (1fa78 <idle+0x60>)
   1fa58:	f005 fa36 	bl	24ec8 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1fa5c:	f7f0 f8b8 	bl	fbd0 <pm_system_suspend>
   1fa60:	2800      	cmp	r0, #0
   1fa62:	d1e1      	bne.n	1fa28 <idle+0x10>
   1fa64:	e7ed      	b.n	1fa42 <idle+0x2a>
   1fa66:	bf00      	nop
   1fa68:	20021504 	.word	0x20021504
   1fa6c:	20022472 	.word	0x20022472
   1fa70:	00030b26 	.word	0x00030b26
   1fa74:	0002b939 	.word	0x0002b939
   1fa78:	00030b05 	.word	0x00030b05

0001fa7c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1fa7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fa80:	4604      	mov	r4, r0
   1fa82:	4617      	mov	r7, r2
   1fa84:	461e      	mov	r6, r3
   1fa86:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1fa8a:	b165      	cbz	r5, 1faa6 <z_impl_k_mutex_lock+0x2a>
   1fa8c:	4958      	ldr	r1, [pc, #352]	; (1fbf0 <z_impl_k_mutex_lock+0x174>)
   1fa8e:	2365      	movs	r3, #101	; 0x65
   1fa90:	4a58      	ldr	r2, [pc, #352]	; (1fbf4 <z_impl_k_mutex_lock+0x178>)
   1fa92:	4859      	ldr	r0, [pc, #356]	; (1fbf8 <z_impl_k_mutex_lock+0x17c>)
   1fa94:	f005 fa1f 	bl	24ed6 <assert_print>
   1fa98:	4858      	ldr	r0, [pc, #352]	; (1fbfc <z_impl_k_mutex_lock+0x180>)
   1fa9a:	f005 fa1c 	bl	24ed6 <assert_print>
   1fa9e:	2165      	movs	r1, #101	; 0x65
   1faa0:	4854      	ldr	r0, [pc, #336]	; (1fbf4 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1faa2:	f005 fa11 	bl	24ec8 <assert_post_action>
   1faa6:	f04f 0320 	mov.w	r3, #32
   1faaa:	f3ef 8811 	mrs	r8, BASEPRI
   1faae:	f383 8812 	msr	BASEPRI_MAX, r3
   1fab2:	f3bf 8f6f 	isb	sy
   1fab6:	4852      	ldr	r0, [pc, #328]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1fab8:	f7ff ff8a 	bl	1f9d0 <z_spin_lock_valid>
   1fabc:	b960      	cbnz	r0, 1fad8 <z_impl_k_mutex_lock+0x5c>
   1fabe:	2394      	movs	r3, #148	; 0x94
   1fac0:	4a50      	ldr	r2, [pc, #320]	; (1fc04 <z_impl_k_mutex_lock+0x188>)
   1fac2:	4951      	ldr	r1, [pc, #324]	; (1fc08 <z_impl_k_mutex_lock+0x18c>)
   1fac4:	484c      	ldr	r0, [pc, #304]	; (1fbf8 <z_impl_k_mutex_lock+0x17c>)
   1fac6:	f005 fa06 	bl	24ed6 <assert_print>
   1faca:	494d      	ldr	r1, [pc, #308]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1facc:	484f      	ldr	r0, [pc, #316]	; (1fc0c <z_impl_k_mutex_lock+0x190>)
   1face:	f005 fa02 	bl	24ed6 <assert_print>
   1fad2:	2194      	movs	r1, #148	; 0x94
   1fad4:	484b      	ldr	r0, [pc, #300]	; (1fc04 <z_impl_k_mutex_lock+0x188>)
   1fad6:	e7e4      	b.n	1faa2 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   1fad8:	4849      	ldr	r0, [pc, #292]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1fada:	f7ff ff95 	bl	1fa08 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fade:	68e3      	ldr	r3, [r4, #12]
   1fae0:	4a4b      	ldr	r2, [pc, #300]	; (1fc10 <z_impl_k_mutex_lock+0x194>)
   1fae2:	b19b      	cbz	r3, 1fb0c <z_impl_k_mutex_lock+0x90>
   1fae4:	68a0      	ldr	r0, [r4, #8]
   1fae6:	6891      	ldr	r1, [r2, #8]
   1fae8:	4288      	cmp	r0, r1
   1faea:	d027      	beq.n	1fb3c <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1faec:	ea57 0306 	orrs.w	r3, r7, r6
   1faf0:	d12c      	bne.n	1fb4c <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1faf2:	4843      	ldr	r0, [pc, #268]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1faf4:	f7ff ff7a 	bl	1f9ec <z_spin_unlock_valid>
   1faf8:	b1a0      	cbz	r0, 1fb24 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1fafa:	f388 8811 	msr	BASEPRI, r8
   1fafe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1fb02:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1fb06:	b002      	add	sp, #8
   1fb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1fb0c:	6891      	ldr	r1, [r2, #8]
   1fb0e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1fb12:	3301      	adds	r3, #1
   1fb14:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1fb16:	6893      	ldr	r3, [r2, #8]
   1fb18:	4839      	ldr	r0, [pc, #228]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fb1a:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1fb1c:	60a3      	str	r3, [r4, #8]
   1fb1e:	f7ff ff65 	bl	1f9ec <z_spin_unlock_valid>
   1fb22:	b968      	cbnz	r0, 1fb40 <z_impl_k_mutex_lock+0xc4>
   1fb24:	23c2      	movs	r3, #194	; 0xc2
   1fb26:	4a37      	ldr	r2, [pc, #220]	; (1fc04 <z_impl_k_mutex_lock+0x188>)
   1fb28:	493a      	ldr	r1, [pc, #232]	; (1fc14 <z_impl_k_mutex_lock+0x198>)
   1fb2a:	4833      	ldr	r0, [pc, #204]	; (1fbf8 <z_impl_k_mutex_lock+0x17c>)
   1fb2c:	f005 f9d3 	bl	24ed6 <assert_print>
   1fb30:	4933      	ldr	r1, [pc, #204]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1fb32:	4839      	ldr	r0, [pc, #228]	; (1fc18 <z_impl_k_mutex_lock+0x19c>)
   1fb34:	f005 f9cf 	bl	24ed6 <assert_print>
   1fb38:	21c2      	movs	r1, #194	; 0xc2
   1fb3a:	e7cb      	b.n	1fad4 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   1fb3c:	6921      	ldr	r1, [r4, #16]
   1fb3e:	e7e8      	b.n	1fb12 <z_impl_k_mutex_lock+0x96>
   1fb40:	f388 8811 	msr	BASEPRI, r8
   1fb44:	f3bf 8f6f 	isb	sy
		return 0;
   1fb48:	2000      	movs	r0, #0
   1fb4a:	e7dc      	b.n	1fb06 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1fb4c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1fb50:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1fb54:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1fb58:	4299      	cmp	r1, r3
   1fb5a:	bfa8      	it	ge
   1fb5c:	4619      	movge	r1, r3
   1fb5e:	4291      	cmp	r1, r2
   1fb60:	bfb8      	it	lt
   1fb62:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1fb64:	428b      	cmp	r3, r1
   1fb66:	dd02      	ble.n	1fb6e <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   1fb68:	f009 fd2a 	bl	295c0 <adjust_owner_prio.isra.0>
   1fb6c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1fb6e:	4622      	mov	r2, r4
   1fb70:	4641      	mov	r1, r8
   1fb72:	e9cd 7600 	strd	r7, r6, [sp]
   1fb76:	4822      	ldr	r0, [pc, #136]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1fb78:	f001 fcc2 	bl	21500 <z_pend_curr>
	if (got_mutex == 0) {
   1fb7c:	2800      	cmp	r0, #0
   1fb7e:	d0e3      	beq.n	1fb48 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1fb80:	f04f 0320 	mov.w	r3, #32
   1fb84:	f3ef 8611 	mrs	r6, BASEPRI
   1fb88:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb90:	481b      	ldr	r0, [pc, #108]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1fb92:	f7ff ff1d 	bl	1f9d0 <z_spin_lock_valid>
   1fb96:	2800      	cmp	r0, #0
   1fb98:	d091      	beq.n	1fabe <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   1fb9a:	4819      	ldr	r0, [pc, #100]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1fb9c:	f7ff ff34 	bl	1fa08 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   1fba0:	68a0      	ldr	r0, [r4, #8]
   1fba2:	b1c0      	cbz	r0, 1fbd6 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1fba4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1fba6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fba8:	429c      	cmp	r4, r3
   1fbaa:	d00a      	beq.n	1fbc2 <z_impl_k_mutex_lock+0x146>
   1fbac:	b14b      	cbz	r3, 1fbc2 <z_impl_k_mutex_lock+0x146>
   1fbae:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1fbb2:	4299      	cmp	r1, r3
   1fbb4:	bfa8      	it	ge
   1fbb6:	4619      	movge	r1, r3
   1fbb8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1fbbc:	4299      	cmp	r1, r3
   1fbbe:	bfb8      	it	lt
   1fbc0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fbc2:	f009 fcfd 	bl	295c0 <adjust_owner_prio.isra.0>
   1fbc6:	b130      	cbz	r0, 1fbd6 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   1fbc8:	4631      	mov	r1, r6
   1fbca:	480d      	ldr	r0, [pc, #52]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1fbcc:	f001 f9ca 	bl	20f64 <z_reschedule>
	return -EAGAIN;
   1fbd0:	f06f 000a 	mvn.w	r0, #10
   1fbd4:	e797      	b.n	1fb06 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   1fbd6:	2d00      	cmp	r5, #0
   1fbd8:	d1f6      	bne.n	1fbc8 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fbda:	4809      	ldr	r0, [pc, #36]	; (1fc00 <z_impl_k_mutex_lock+0x184>)
   1fbdc:	f7ff ff06 	bl	1f9ec <z_spin_unlock_valid>
   1fbe0:	2800      	cmp	r0, #0
   1fbe2:	d09f      	beq.n	1fb24 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1fbe4:	f386 8811 	msr	BASEPRI, r6
   1fbe8:	f3bf 8f6f 	isb	sy
   1fbec:	e7f0      	b.n	1fbd0 <z_impl_k_mutex_lock+0x154>
   1fbee:	bf00      	nop
   1fbf0:	00030aa1 	.word	0x00030aa1
   1fbf4:	00030b4e 	.word	0x00030b4e
   1fbf8:	0002b939 	.word	0x0002b939
   1fbfc:	00030b70 	.word	0x00030b70
   1fc00:	2002152c 	.word	0x2002152c
   1fc04:	0002c76f 	.word	0x0002c76f
   1fc08:	0002c7c8 	.word	0x0002c7c8
   1fc0c:	0002c7dd 	.word	0x0002c7dd
   1fc10:	20021504 	.word	0x20021504
   1fc14:	0002c79c 	.word	0x0002c79c
   1fc18:	0002c7b3 	.word	0x0002c7b3

0001fc1c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1fc1c:	b570      	push	{r4, r5, r6, lr}
   1fc1e:	4604      	mov	r4, r0
   1fc20:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1fc24:	b166      	cbz	r6, 1fc40 <z_impl_k_mutex_unlock+0x24>
   1fc26:	4938      	ldr	r1, [pc, #224]	; (1fd08 <z_impl_k_mutex_unlock+0xec>)
   1fc28:	23cd      	movs	r3, #205	; 0xcd
   1fc2a:	4a38      	ldr	r2, [pc, #224]	; (1fd0c <z_impl_k_mutex_unlock+0xf0>)
   1fc2c:	4838      	ldr	r0, [pc, #224]	; (1fd10 <z_impl_k_mutex_unlock+0xf4>)
   1fc2e:	f005 f952 	bl	24ed6 <assert_print>
   1fc32:	4838      	ldr	r0, [pc, #224]	; (1fd14 <z_impl_k_mutex_unlock+0xf8>)
   1fc34:	f005 f94f 	bl	24ed6 <assert_print>
   1fc38:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1fc3a:	4834      	ldr	r0, [pc, #208]	; (1fd0c <z_impl_k_mutex_unlock+0xf0>)
   1fc3c:	f005 f944 	bl	24ec8 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   1fc40:	6883      	ldr	r3, [r0, #8]
   1fc42:	2b00      	cmp	r3, #0
   1fc44:	d059      	beq.n	1fcfa <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   1fc46:	4a34      	ldr	r2, [pc, #208]	; (1fd18 <z_impl_k_mutex_unlock+0xfc>)
   1fc48:	6892      	ldr	r2, [r2, #8]
   1fc4a:	4293      	cmp	r3, r2
   1fc4c:	d158      	bne.n	1fd00 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1fc4e:	68c3      	ldr	r3, [r0, #12]
   1fc50:	b93b      	cbnz	r3, 1fc62 <z_impl_k_mutex_unlock+0x46>
   1fc52:	4932      	ldr	r1, [pc, #200]	; (1fd1c <z_impl_k_mutex_unlock+0x100>)
   1fc54:	23e5      	movs	r3, #229	; 0xe5
   1fc56:	4a2d      	ldr	r2, [pc, #180]	; (1fd0c <z_impl_k_mutex_unlock+0xf0>)
   1fc58:	482d      	ldr	r0, [pc, #180]	; (1fd10 <z_impl_k_mutex_unlock+0xf4>)
   1fc5a:	f005 f93c 	bl	24ed6 <assert_print>
   1fc5e:	21e5      	movs	r1, #229	; 0xe5
   1fc60:	e7eb      	b.n	1fc3a <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1fc62:	2b01      	cmp	r3, #1
   1fc64:	d003      	beq.n	1fc6e <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   1fc66:	3b01      	subs	r3, #1
   1fc68:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1fc6a:	2000      	movs	r0, #0
}
   1fc6c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1fc6e:	f04f 0320 	mov.w	r3, #32
   1fc72:	f3ef 8511 	mrs	r5, BASEPRI
   1fc76:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc7e:	4828      	ldr	r0, [pc, #160]	; (1fd20 <z_impl_k_mutex_unlock+0x104>)
   1fc80:	f7ff fea6 	bl	1f9d0 <z_spin_lock_valid>
   1fc84:	b960      	cbnz	r0, 1fca0 <z_impl_k_mutex_unlock+0x84>
   1fc86:	2394      	movs	r3, #148	; 0x94
   1fc88:	4a26      	ldr	r2, [pc, #152]	; (1fd24 <z_impl_k_mutex_unlock+0x108>)
   1fc8a:	4927      	ldr	r1, [pc, #156]	; (1fd28 <z_impl_k_mutex_unlock+0x10c>)
   1fc8c:	4820      	ldr	r0, [pc, #128]	; (1fd10 <z_impl_k_mutex_unlock+0xf4>)
   1fc8e:	f005 f922 	bl	24ed6 <assert_print>
   1fc92:	4923      	ldr	r1, [pc, #140]	; (1fd20 <z_impl_k_mutex_unlock+0x104>)
   1fc94:	4825      	ldr	r0, [pc, #148]	; (1fd2c <z_impl_k_mutex_unlock+0x110>)
   1fc96:	f005 f91e 	bl	24ed6 <assert_print>
   1fc9a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fc9c:	4821      	ldr	r0, [pc, #132]	; (1fd24 <z_impl_k_mutex_unlock+0x108>)
   1fc9e:	e7cd      	b.n	1fc3c <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   1fca0:	481f      	ldr	r0, [pc, #124]	; (1fd20 <z_impl_k_mutex_unlock+0x104>)
   1fca2:	f7ff feb1 	bl	1fa08 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1fca6:	6921      	ldr	r1, [r4, #16]
   1fca8:	68a0      	ldr	r0, [r4, #8]
   1fcaa:	f009 fc89 	bl	295c0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1fcae:	4620      	mov	r0, r4
   1fcb0:	f001 fea4 	bl	219fc <z_unpend_first_thread>
	mutex->owner = new_owner;
   1fcb4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1fcb6:	b150      	cbz	r0, 1fcce <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   1fcb8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1fcbc:	6122      	str	r2, [r4, #16]
   1fcbe:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1fcc0:	f001 f8c4 	bl	20e4c <z_ready_thread>
		z_reschedule(&lock, key);
   1fcc4:	4629      	mov	r1, r5
   1fcc6:	4816      	ldr	r0, [pc, #88]	; (1fd20 <z_impl_k_mutex_unlock+0x104>)
   1fcc8:	f001 f94c 	bl	20f64 <z_reschedule>
   1fccc:	e7cd      	b.n	1fc6a <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   1fcce:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fcd0:	4813      	ldr	r0, [pc, #76]	; (1fd20 <z_impl_k_mutex_unlock+0x104>)
   1fcd2:	f7ff fe8b 	bl	1f9ec <z_spin_unlock_valid>
   1fcd6:	b958      	cbnz	r0, 1fcf0 <z_impl_k_mutex_unlock+0xd4>
   1fcd8:	23c2      	movs	r3, #194	; 0xc2
   1fcda:	4a12      	ldr	r2, [pc, #72]	; (1fd24 <z_impl_k_mutex_unlock+0x108>)
   1fcdc:	4914      	ldr	r1, [pc, #80]	; (1fd30 <z_impl_k_mutex_unlock+0x114>)
   1fcde:	480c      	ldr	r0, [pc, #48]	; (1fd10 <z_impl_k_mutex_unlock+0xf4>)
   1fce0:	f005 f8f9 	bl	24ed6 <assert_print>
   1fce4:	490e      	ldr	r1, [pc, #56]	; (1fd20 <z_impl_k_mutex_unlock+0x104>)
   1fce6:	4813      	ldr	r0, [pc, #76]	; (1fd34 <z_impl_k_mutex_unlock+0x118>)
   1fce8:	f005 f8f5 	bl	24ed6 <assert_print>
   1fcec:	21c2      	movs	r1, #194	; 0xc2
   1fcee:	e7d5      	b.n	1fc9c <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   1fcf0:	f385 8811 	msr	BASEPRI, r5
   1fcf4:	f3bf 8f6f 	isb	sy
   1fcf8:	e7b7      	b.n	1fc6a <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   1fcfa:	f06f 0015 	mvn.w	r0, #21
   1fcfe:	e7b5      	b.n	1fc6c <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   1fd00:	f04f 30ff 	mov.w	r0, #4294967295
   1fd04:	e7b2      	b.n	1fc6c <z_impl_k_mutex_unlock+0x50>
   1fd06:	bf00      	nop
   1fd08:	00030aa1 	.word	0x00030aa1
   1fd0c:	00030b4e 	.word	0x00030b4e
   1fd10:	0002b939 	.word	0x0002b939
   1fd14:	00030b70 	.word	0x00030b70
   1fd18:	20021504 	.word	0x20021504
   1fd1c:	00030b95 	.word	0x00030b95
   1fd20:	2002152c 	.word	0x2002152c
   1fd24:	0002c76f 	.word	0x0002c76f
   1fd28:	0002c7c8 	.word	0x0002c7c8
   1fd2c:	0002c7dd 	.word	0x0002c7dd
   1fd30:	0002c79c 	.word	0x0002c79c
   1fd34:	0002c7b3 	.word	0x0002c7b3

0001fd38 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1fd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fd3c:	4604      	mov	r4, r0
   1fd3e:	460e      	mov	r6, r1
   1fd40:	4690      	mov	r8, r2
   1fd42:	4699      	mov	r9, r3
   1fd44:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fd48:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1fd4c:	f04f 0320 	mov.w	r3, #32
   1fd50:	f3ef 8711 	mrs	r7, BASEPRI
   1fd54:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd5c:	4628      	mov	r0, r5
   1fd5e:	f7ff fe37 	bl	1f9d0 <z_spin_lock_valid>
   1fd62:	b968      	cbnz	r0, 1fd80 <queue_insert+0x48>
   1fd64:	2394      	movs	r3, #148	; 0x94
   1fd66:	4a3b      	ldr	r2, [pc, #236]	; (1fe54 <queue_insert+0x11c>)
   1fd68:	493b      	ldr	r1, [pc, #236]	; (1fe58 <queue_insert+0x120>)
   1fd6a:	483c      	ldr	r0, [pc, #240]	; (1fe5c <queue_insert+0x124>)
   1fd6c:	f005 f8b3 	bl	24ed6 <assert_print>
   1fd70:	4629      	mov	r1, r5
   1fd72:	483b      	ldr	r0, [pc, #236]	; (1fe60 <queue_insert+0x128>)
   1fd74:	f005 f8af 	bl	24ed6 <assert_print>
   1fd78:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd7a:	4836      	ldr	r0, [pc, #216]	; (1fe54 <queue_insert+0x11c>)
   1fd7c:	f005 f8a4 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fd80:	4628      	mov	r0, r5
   1fd82:	f7ff fe41 	bl	1fa08 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1fd86:	f1ba 0f00 	cmp.w	sl, #0
   1fd8a:	d000      	beq.n	1fd8e <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1fd8c:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1fd8e:	f104 000c 	add.w	r0, r4, #12
   1fd92:	f001 fe33 	bl	219fc <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1fd96:	b158      	cbz	r0, 1fdb0 <queue_insert+0x78>
   1fd98:	2300      	movs	r3, #0
   1fd9a:	f8c0 8014 	str.w	r8, [r0, #20]
   1fd9e:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1fda0:	f001 f854 	bl	20e4c <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1fda4:	4628      	mov	r0, r5
   1fda6:	4639      	mov	r1, r7
   1fda8:	f001 f8dc 	bl	20f64 <z_reschedule>
		return 0;
   1fdac:	2000      	movs	r0, #0
   1fdae:	e01c      	b.n	1fdea <queue_insert+0xb2>
	if (alloc) {
   1fdb0:	f1b9 0f00 	cmp.w	r9, #0
   1fdb4:	d02b      	beq.n	1fe0e <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   1fdb6:	2108      	movs	r1, #8
   1fdb8:	f003 f8da 	bl	22f70 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1fdbc:	b9b8      	cbnz	r0, 1fdee <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fdbe:	4628      	mov	r0, r5
   1fdc0:	f7ff fe14 	bl	1f9ec <z_spin_unlock_valid>
   1fdc4:	b958      	cbnz	r0, 1fdde <queue_insert+0xa6>
   1fdc6:	23c2      	movs	r3, #194	; 0xc2
   1fdc8:	4a22      	ldr	r2, [pc, #136]	; (1fe54 <queue_insert+0x11c>)
   1fdca:	4926      	ldr	r1, [pc, #152]	; (1fe64 <queue_insert+0x12c>)
   1fdcc:	4823      	ldr	r0, [pc, #140]	; (1fe5c <queue_insert+0x124>)
   1fdce:	f005 f882 	bl	24ed6 <assert_print>
   1fdd2:	4629      	mov	r1, r5
   1fdd4:	4824      	ldr	r0, [pc, #144]	; (1fe68 <queue_insert+0x130>)
   1fdd6:	f005 f87e 	bl	24ed6 <assert_print>
   1fdda:	21c2      	movs	r1, #194	; 0xc2
   1fddc:	e7cd      	b.n	1fd7a <queue_insert+0x42>
	__asm__ volatile(
   1fdde:	f387 8811 	msr	BASEPRI, r7
   1fde2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1fde6:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   1fdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1fdee:	2201      	movs	r2, #1
		anode->data = data;
   1fdf0:	f8c0 8004 	str.w	r8, [r0, #4]
   1fdf4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fdf6:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fdf8:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1fdfc:	b95e      	cbnz	r6, 1fe16 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fdfe:	6822      	ldr	r2, [r4, #0]
   1fe00:	430a      	orrs	r2, r1
   1fe02:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fe04:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1fe06:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fe08:	b96a      	cbnz	r2, 1fe26 <queue_insert+0xee>
	list->tail = node;
   1fe0a:	6060      	str	r0, [r4, #4]
}
   1fe0c:	e00b      	b.n	1fe26 <queue_insert+0xee>
}
   1fe0e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1fe10:	f8c8 9000 	str.w	r9, [r8]
}
   1fe14:	e7ef      	b.n	1fdf6 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fe16:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fe18:	2a03      	cmp	r2, #3
   1fe1a:	d810      	bhi.n	1fe3e <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe1c:	6001      	str	r1, [r0, #0]
	return list->tail;
   1fe1e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1fe20:	b939      	cbnz	r1, 1fe32 <queue_insert+0xfa>
	list->head = node;
   1fe22:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fe26:	2104      	movs	r1, #4
   1fe28:	f104 0014 	add.w	r0, r4, #20
   1fe2c:	f009 fd8a 	bl	29944 <z_handle_obj_poll_events>
   1fe30:	e7b8      	b.n	1fda4 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fe32:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe34:	f002 0203 	and.w	r2, r2, #3
   1fe38:	4302      	orrs	r2, r0
   1fe3a:	600a      	str	r2, [r1, #0]
   1fe3c:	e7e5      	b.n	1fe0a <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fe3e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe42:	430a      	orrs	r2, r1
   1fe44:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fe46:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fe48:	f002 0203 	and.w	r2, r2, #3
   1fe4c:	ea40 0302 	orr.w	r3, r0, r2
   1fe50:	6033      	str	r3, [r6, #0]
}
   1fe52:	e7e8      	b.n	1fe26 <queue_insert+0xee>
   1fe54:	0002c76f 	.word	0x0002c76f
   1fe58:	0002c7c8 	.word	0x0002c7c8
   1fe5c:	0002b939 	.word	0x0002b939
   1fe60:	0002c7dd 	.word	0x0002c7dd
   1fe64:	0002c79c 	.word	0x0002c79c
   1fe68:	0002c7b3 	.word	0x0002c7b3

0001fe6c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1fe6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fe70:	4606      	mov	r6, r0
   1fe72:	4691      	mov	r9, r2
   1fe74:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fe76:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1fe7a:	f04f 0320 	mov.w	r3, #32
   1fe7e:	f3ef 8811 	mrs	r8, BASEPRI
   1fe82:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe8a:	4628      	mov	r0, r5
   1fe8c:	f7ff fda0 	bl	1f9d0 <z_spin_lock_valid>
   1fe90:	b968      	cbnz	r0, 1feae <z_impl_k_queue_get+0x42>
   1fe92:	2394      	movs	r3, #148	; 0x94
   1fe94:	4a23      	ldr	r2, [pc, #140]	; (1ff24 <z_impl_k_queue_get+0xb8>)
   1fe96:	4924      	ldr	r1, [pc, #144]	; (1ff28 <z_impl_k_queue_get+0xbc>)
   1fe98:	4824      	ldr	r0, [pc, #144]	; (1ff2c <z_impl_k_queue_get+0xc0>)
   1fe9a:	f005 f81c 	bl	24ed6 <assert_print>
   1fe9e:	4629      	mov	r1, r5
   1fea0:	4823      	ldr	r0, [pc, #140]	; (1ff30 <z_impl_k_queue_get+0xc4>)
   1fea2:	f005 f818 	bl	24ed6 <assert_print>
   1fea6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fea8:	481e      	ldr	r0, [pc, #120]	; (1ff24 <z_impl_k_queue_get+0xb8>)
   1feaa:	f005 f80d 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1feae:	4628      	mov	r0, r5
   1feb0:	f7ff fdaa 	bl	1fa08 <z_spin_lock_set_owner>
	return list->head;
   1feb4:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1feb6:	b1ec      	cbz	r4, 1fef4 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1feb8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1feba:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1febc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fec0:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fec2:	4620      	mov	r0, r4
   1fec4:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1fec8:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1feca:	bf08      	it	eq
   1fecc:	6073      	streq	r3, [r6, #4]
   1fece:	f009 fb86 	bl	295de <z_queue_node_peek>
   1fed2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fed4:	4628      	mov	r0, r5
   1fed6:	f7ff fd89 	bl	1f9ec <z_spin_unlock_valid>
   1feda:	b9d8      	cbnz	r0, 1ff14 <z_impl_k_queue_get+0xa8>
   1fedc:	23c2      	movs	r3, #194	; 0xc2
   1fede:	4a11      	ldr	r2, [pc, #68]	; (1ff24 <z_impl_k_queue_get+0xb8>)
   1fee0:	4914      	ldr	r1, [pc, #80]	; (1ff34 <z_impl_k_queue_get+0xc8>)
   1fee2:	4812      	ldr	r0, [pc, #72]	; (1ff2c <z_impl_k_queue_get+0xc0>)
   1fee4:	f004 fff7 	bl	24ed6 <assert_print>
   1fee8:	4629      	mov	r1, r5
   1feea:	4813      	ldr	r0, [pc, #76]	; (1ff38 <z_impl_k_queue_get+0xcc>)
   1feec:	f004 fff3 	bl	24ed6 <assert_print>
   1fef0:	21c2      	movs	r1, #194	; 0xc2
   1fef2:	e7d9      	b.n	1fea8 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fef4:	ea59 0307 	orrs.w	r3, r9, r7
   1fef8:	d0ec      	beq.n	1fed4 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fefa:	4641      	mov	r1, r8
   1fefc:	4628      	mov	r0, r5
   1fefe:	e9cd 9700 	strd	r9, r7, [sp]
   1ff02:	f106 020c 	add.w	r2, r6, #12
   1ff06:	f001 fafb 	bl	21500 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   1ff0a:	b938      	cbnz	r0, 1ff1c <z_impl_k_queue_get+0xb0>
   1ff0c:	4b0b      	ldr	r3, [pc, #44]	; (1ff3c <z_impl_k_queue_get+0xd0>)
   1ff0e:	689b      	ldr	r3, [r3, #8]
   1ff10:	695c      	ldr	r4, [r3, #20]
   1ff12:	e003      	b.n	1ff1c <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   1ff14:	f388 8811 	msr	BASEPRI, r8
   1ff18:	f3bf 8f6f 	isb	sy
}
   1ff1c:	4620      	mov	r0, r4
   1ff1e:	b003      	add	sp, #12
   1ff20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ff24:	0002c76f 	.word	0x0002c76f
   1ff28:	0002c7c8 	.word	0x0002c7c8
   1ff2c:	0002b939 	.word	0x0002b939
   1ff30:	0002c7dd 	.word	0x0002c7dd
   1ff34:	0002c79c 	.word	0x0002c79c
   1ff38:	0002c7b3 	.word	0x0002c7b3
   1ff3c:	20021504 	.word	0x20021504

0001ff40 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ff40:	b538      	push	{r3, r4, r5, lr}
   1ff42:	4604      	mov	r4, r0
	__asm__ volatile(
   1ff44:	f04f 0320 	mov.w	r3, #32
   1ff48:	f3ef 8511 	mrs	r5, BASEPRI
   1ff4c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ff54:	4817      	ldr	r0, [pc, #92]	; (1ffb4 <z_impl_k_sem_give+0x74>)
   1ff56:	f7ff fd3b 	bl	1f9d0 <z_spin_lock_valid>
   1ff5a:	b968      	cbnz	r0, 1ff78 <z_impl_k_sem_give+0x38>
   1ff5c:	2394      	movs	r3, #148	; 0x94
   1ff5e:	4a16      	ldr	r2, [pc, #88]	; (1ffb8 <z_impl_k_sem_give+0x78>)
   1ff60:	4916      	ldr	r1, [pc, #88]	; (1ffbc <z_impl_k_sem_give+0x7c>)
   1ff62:	4817      	ldr	r0, [pc, #92]	; (1ffc0 <z_impl_k_sem_give+0x80>)
   1ff64:	f004 ffb7 	bl	24ed6 <assert_print>
   1ff68:	4912      	ldr	r1, [pc, #72]	; (1ffb4 <z_impl_k_sem_give+0x74>)
   1ff6a:	4816      	ldr	r0, [pc, #88]	; (1ffc4 <z_impl_k_sem_give+0x84>)
   1ff6c:	f004 ffb3 	bl	24ed6 <assert_print>
   1ff70:	2194      	movs	r1, #148	; 0x94
   1ff72:	4811      	ldr	r0, [pc, #68]	; (1ffb8 <z_impl_k_sem_give+0x78>)
   1ff74:	f004 ffa8 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ff78:	480e      	ldr	r0, [pc, #56]	; (1ffb4 <z_impl_k_sem_give+0x74>)
   1ff7a:	f7ff fd45 	bl	1fa08 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1ff7e:	4620      	mov	r0, r4
   1ff80:	f001 fd3c 	bl	219fc <z_unpend_first_thread>

	if (thread != NULL) {
   1ff84:	b148      	cbz	r0, 1ff9a <z_impl_k_sem_give+0x5a>
   1ff86:	2200      	movs	r2, #0
   1ff88:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1ff8a:	f000 ff5f 	bl	20e4c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1ff8e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1ff90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1ff94:	4807      	ldr	r0, [pc, #28]	; (1ffb4 <z_impl_k_sem_give+0x74>)
   1ff96:	f000 bfe5 	b.w	20f64 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ff9a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1ff9e:	429a      	cmp	r2, r3
   1ffa0:	bf18      	it	ne
   1ffa2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ffa4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ffa6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ffa8:	f104 0010 	add.w	r0, r4, #16
   1ffac:	f009 fcca 	bl	29944 <z_handle_obj_poll_events>
}
   1ffb0:	e7ed      	b.n	1ff8e <z_impl_k_sem_give+0x4e>
   1ffb2:	bf00      	nop
   1ffb4:	20021530 	.word	0x20021530
   1ffb8:	0002c76f 	.word	0x0002c76f
   1ffbc:	0002c7c8 	.word	0x0002c7c8
   1ffc0:	0002b939 	.word	0x0002b939
   1ffc4:	0002c7dd 	.word	0x0002c7dd

0001ffc8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1ffc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ffca:	4604      	mov	r4, r0
   1ffcc:	4616      	mov	r6, r2
   1ffce:	461d      	mov	r5, r3
   1ffd0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1ffd4:	b17b      	cbz	r3, 1fff6 <z_impl_k_sem_take+0x2e>
   1ffd6:	ea52 0305 	orrs.w	r3, r2, r5
   1ffda:	d00c      	beq.n	1fff6 <z_impl_k_sem_take+0x2e>
   1ffdc:	492d      	ldr	r1, [pc, #180]	; (20094 <z_impl_k_sem_take+0xcc>)
   1ffde:	2379      	movs	r3, #121	; 0x79
   1ffe0:	4a2d      	ldr	r2, [pc, #180]	; (20098 <z_impl_k_sem_take+0xd0>)
   1ffe2:	482e      	ldr	r0, [pc, #184]	; (2009c <z_impl_k_sem_take+0xd4>)
   1ffe4:	f004 ff77 	bl	24ed6 <assert_print>
   1ffe8:	482d      	ldr	r0, [pc, #180]	; (200a0 <z_impl_k_sem_take+0xd8>)
   1ffea:	f004 ff74 	bl	24ed6 <assert_print>
   1ffee:	2179      	movs	r1, #121	; 0x79
   1fff0:	4829      	ldr	r0, [pc, #164]	; (20098 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fff2:	f004 ff69 	bl	24ec8 <assert_post_action>
   1fff6:	f04f 0320 	mov.w	r3, #32
   1fffa:	f3ef 8711 	mrs	r7, BASEPRI
   1fffe:	f383 8812 	msr	BASEPRI_MAX, r3
   20002:	f3bf 8f6f 	isb	sy
   20006:	4827      	ldr	r0, [pc, #156]	; (200a4 <z_impl_k_sem_take+0xdc>)
   20008:	f7ff fce2 	bl	1f9d0 <z_spin_lock_valid>
   2000c:	b960      	cbnz	r0, 20028 <z_impl_k_sem_take+0x60>
   2000e:	2394      	movs	r3, #148	; 0x94
   20010:	4a25      	ldr	r2, [pc, #148]	; (200a8 <z_impl_k_sem_take+0xe0>)
   20012:	4926      	ldr	r1, [pc, #152]	; (200ac <z_impl_k_sem_take+0xe4>)
   20014:	4821      	ldr	r0, [pc, #132]	; (2009c <z_impl_k_sem_take+0xd4>)
   20016:	f004 ff5e 	bl	24ed6 <assert_print>
   2001a:	4922      	ldr	r1, [pc, #136]	; (200a4 <z_impl_k_sem_take+0xdc>)
   2001c:	4824      	ldr	r0, [pc, #144]	; (200b0 <z_impl_k_sem_take+0xe8>)
   2001e:	f004 ff5a 	bl	24ed6 <assert_print>
   20022:	2194      	movs	r1, #148	; 0x94
   20024:	4820      	ldr	r0, [pc, #128]	; (200a8 <z_impl_k_sem_take+0xe0>)
   20026:	e7e4      	b.n	1fff2 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   20028:	481e      	ldr	r0, [pc, #120]	; (200a4 <z_impl_k_sem_take+0xdc>)
   2002a:	f7ff fced 	bl	1fa08 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2002e:	68a3      	ldr	r3, [r4, #8]
   20030:	b1c3      	cbz	r3, 20064 <z_impl_k_sem_take+0x9c>
		sem->count--;
   20032:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20034:	481b      	ldr	r0, [pc, #108]	; (200a4 <z_impl_k_sem_take+0xdc>)
   20036:	60a3      	str	r3, [r4, #8]
   20038:	f7ff fcd8 	bl	1f9ec <z_spin_unlock_valid>
   2003c:	b958      	cbnz	r0, 20056 <z_impl_k_sem_take+0x8e>
   2003e:	23c2      	movs	r3, #194	; 0xc2
   20040:	4a19      	ldr	r2, [pc, #100]	; (200a8 <z_impl_k_sem_take+0xe0>)
   20042:	491c      	ldr	r1, [pc, #112]	; (200b4 <z_impl_k_sem_take+0xec>)
   20044:	4815      	ldr	r0, [pc, #84]	; (2009c <z_impl_k_sem_take+0xd4>)
   20046:	f004 ff46 	bl	24ed6 <assert_print>
   2004a:	4916      	ldr	r1, [pc, #88]	; (200a4 <z_impl_k_sem_take+0xdc>)
   2004c:	481a      	ldr	r0, [pc, #104]	; (200b8 <z_impl_k_sem_take+0xf0>)
   2004e:	f004 ff42 	bl	24ed6 <assert_print>
   20052:	21c2      	movs	r1, #194	; 0xc2
   20054:	e7e6      	b.n	20024 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   20056:	f387 8811 	msr	BASEPRI, r7
   2005a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2005e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   20060:	b003      	add	sp, #12
   20062:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20064:	ea56 0305 	orrs.w	r3, r6, r5
   20068:	d10b      	bne.n	20082 <z_impl_k_sem_take+0xba>
   2006a:	480e      	ldr	r0, [pc, #56]	; (200a4 <z_impl_k_sem_take+0xdc>)
   2006c:	f7ff fcbe 	bl	1f9ec <z_spin_unlock_valid>
   20070:	2800      	cmp	r0, #0
   20072:	d0e4      	beq.n	2003e <z_impl_k_sem_take+0x76>
   20074:	f387 8811 	msr	BASEPRI, r7
   20078:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2007c:	f06f 000f 	mvn.w	r0, #15
   20080:	e7ee      	b.n	20060 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20082:	4622      	mov	r2, r4
   20084:	4639      	mov	r1, r7
   20086:	e9cd 6500 	strd	r6, r5, [sp]
   2008a:	4806      	ldr	r0, [pc, #24]	; (200a4 <z_impl_k_sem_take+0xdc>)
   2008c:	f001 fa38 	bl	21500 <z_pend_curr>
	return ret;
   20090:	e7e6      	b.n	20060 <z_impl_k_sem_take+0x98>
   20092:	bf00      	nop
   20094:	00030bcc 	.word	0x00030bcc
   20098:	00030bac 	.word	0x00030bac
   2009c:	0002b939 	.word	0x0002b939
   200a0:	0002f575 	.word	0x0002f575
   200a4:	20021530 	.word	0x20021530
   200a8:	0002c76f 	.word	0x0002c76f
   200ac:	0002c7c8 	.word	0x0002c7c8
   200b0:	0002c7dd 	.word	0x0002c7dd
   200b4:	0002c79c 	.word	0x0002c79c
   200b8:	0002c7b3 	.word	0x0002c7b3

000200bc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   200bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   200be:	2400      	movs	r4, #0
   200c0:	4b08      	ldr	r3, [pc, #32]	; (200e4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   200c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   200c6:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   200c8:	ab02      	add	r3, sp, #8
   200ca:	9300      	str	r3, [sp, #0]
   200cc:	4906      	ldr	r1, [pc, #24]	; (200e8 <k_sys_work_q_init+0x2c>)
   200ce:	f04f 33ff 	mov.w	r3, #4294967295
   200d2:	4806      	ldr	r0, [pc, #24]	; (200ec <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   200d4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   200d8:	f000 fac0 	bl	2065c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   200dc:	4620      	mov	r0, r4
   200de:	b004      	add	sp, #16
   200e0:	bd10      	pop	{r4, pc}
   200e2:	bf00      	nop
   200e4:	00030c1a 	.word	0x00030c1a
   200e8:	200336d8 	.word	0x200336d8
   200ec:	20009d18 	.word	0x20009d18

000200f0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   200f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200f4:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   200f6:	4e6e      	ldr	r6, [pc, #440]	; (202b0 <work_queue_main+0x1c0>)
	return list->head;
   200f8:	4f6e      	ldr	r7, [pc, #440]	; (202b4 <work_queue_main+0x1c4>)
   200fa:	b085      	sub	sp, #20
	__asm__ volatile(
   200fc:	f04f 0320 	mov.w	r3, #32
   20100:	f3ef 8811 	mrs	r8, BASEPRI
   20104:	f383 8812 	msr	BASEPRI_MAX, r3
   20108:	f3bf 8f6f 	isb	sy
   2010c:	4630      	mov	r0, r6
   2010e:	f7ff fc5f 	bl	1f9d0 <z_spin_lock_valid>
   20112:	b968      	cbnz	r0, 20130 <work_queue_main+0x40>
   20114:	2394      	movs	r3, #148	; 0x94
   20116:	4a68      	ldr	r2, [pc, #416]	; (202b8 <work_queue_main+0x1c8>)
   20118:	4968      	ldr	r1, [pc, #416]	; (202bc <work_queue_main+0x1cc>)
   2011a:	4869      	ldr	r0, [pc, #420]	; (202c0 <work_queue_main+0x1d0>)
   2011c:	f004 fedb 	bl	24ed6 <assert_print>
   20120:	4963      	ldr	r1, [pc, #396]	; (202b0 <work_queue_main+0x1c0>)
   20122:	4868      	ldr	r0, [pc, #416]	; (202c4 <work_queue_main+0x1d4>)
   20124:	f004 fed7 	bl	24ed6 <assert_print>
   20128:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2012a:	4863      	ldr	r0, [pc, #396]	; (202b8 <work_queue_main+0x1c8>)
   2012c:	f004 fecc 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   20130:	4630      	mov	r0, r6
   20132:	f7ff fc69 	bl	1fa08 <z_spin_lock_set_owner>
   20136:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   2013a:	b9ad      	cbnz	r5, 20168 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2013c:	2102      	movs	r1, #2
   2013e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   20142:	f009 fa8a 	bl	2965a <flag_test_and_clear>
   20146:	2800      	cmp	r0, #0
   20148:	d135      	bne.n	201b6 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2014a:	2300      	movs	r3, #0
   2014c:	f04f 32ff 	mov.w	r2, #4294967295
   20150:	9302      	str	r3, [sp, #8]
   20152:	f04f 33ff 	mov.w	r3, #4294967295
   20156:	4641      	mov	r1, r8
   20158:	e9cd 2300 	strd	r2, r3, [sp]
   2015c:	4630      	mov	r0, r6
   2015e:	f104 0290 	add.w	r2, r4, #144	; 0x90
   20162:	f001 ff41 	bl	21fe8 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   20166:	e7c9      	b.n	200fc <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20168:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   2016c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2016e:	4295      	cmp	r5, r2
	list->tail = node;
   20170:	bf08      	it	eq
   20172:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   20176:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   2017a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2017e:	4630      	mov	r0, r6
   20180:	f043 0302 	orr.w	r3, r3, #2
   20184:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   20188:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   2018a:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   2018e:	f023 0304 	bic.w	r3, r3, #4
   20192:	f043 0301 	orr.w	r3, r3, #1
   20196:	60eb      	str	r3, [r5, #12]
   20198:	f7ff fc28 	bl	1f9ec <z_spin_unlock_valid>
   2019c:	b9a8      	cbnz	r0, 201ca <work_queue_main+0xda>
   2019e:	23c2      	movs	r3, #194	; 0xc2
   201a0:	4a45      	ldr	r2, [pc, #276]	; (202b8 <work_queue_main+0x1c8>)
   201a2:	4949      	ldr	r1, [pc, #292]	; (202c8 <work_queue_main+0x1d8>)
   201a4:	4846      	ldr	r0, [pc, #280]	; (202c0 <work_queue_main+0x1d0>)
   201a6:	f004 fe96 	bl	24ed6 <assert_print>
   201aa:	4941      	ldr	r1, [pc, #260]	; (202b0 <work_queue_main+0x1c0>)
   201ac:	4847      	ldr	r0, [pc, #284]	; (202cc <work_queue_main+0x1dc>)
   201ae:	f004 fe92 	bl	24ed6 <assert_print>
   201b2:	21c2      	movs	r1, #194	; 0xc2
   201b4:	e7b9      	b.n	2012a <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   201b6:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   201ba:	2200      	movs	r2, #0
   201bc:	2101      	movs	r1, #1
   201be:	4628      	mov	r0, r5
   201c0:	f001 feb4 	bl	21f2c <z_sched_wake>
   201c4:	2800      	cmp	r0, #0
   201c6:	d1f8      	bne.n	201ba <work_queue_main+0xca>
   201c8:	e7bf      	b.n	2014a <work_queue_main+0x5a>
	__asm__ volatile(
   201ca:	f388 8811 	msr	BASEPRI, r8
   201ce:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   201d2:	f1b9 0f00 	cmp.w	r9, #0
   201d6:	d10a      	bne.n	201ee <work_queue_main+0xfe>
   201d8:	493d      	ldr	r1, [pc, #244]	; (202d0 <work_queue_main+0x1e0>)
   201da:	4839      	ldr	r0, [pc, #228]	; (202c0 <work_queue_main+0x1d0>)
   201dc:	f240 239b 	movw	r3, #667	; 0x29b
   201e0:	4a3c      	ldr	r2, [pc, #240]	; (202d4 <work_queue_main+0x1e4>)
   201e2:	f004 fe78 	bl	24ed6 <assert_print>
   201e6:	f240 219b 	movw	r1, #667	; 0x29b
   201ea:	483a      	ldr	r0, [pc, #232]	; (202d4 <work_queue_main+0x1e4>)
   201ec:	e79e      	b.n	2012c <work_queue_main+0x3c>
		handler(work);
   201ee:	4628      	mov	r0, r5
   201f0:	47c8      	blx	r9
	__asm__ volatile(
   201f2:	f04f 0320 	mov.w	r3, #32
   201f6:	f3ef 8a11 	mrs	sl, BASEPRI
   201fa:	f383 8812 	msr	BASEPRI_MAX, r3
   201fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20202:	4630      	mov	r0, r6
   20204:	f7ff fbe4 	bl	1f9d0 <z_spin_lock_valid>
   20208:	2800      	cmp	r0, #0
   2020a:	d083      	beq.n	20114 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   2020c:	4630      	mov	r0, r6
   2020e:	f7ff fbfb 	bl	1fa08 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   20212:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20214:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   20216:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2021a:	d417      	bmi.n	2024c <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   2021c:	60ea      	str	r2, [r5, #12]
   2021e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20222:	4630      	mov	r0, r6
   20224:	f023 0302 	bic.w	r3, r3, #2
   20228:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   2022c:	f3c3 2500 	ubfx	r5, r3, #8, #1
   20230:	f7ff fbdc 	bl	1f9ec <z_spin_unlock_valid>
   20234:	2800      	cmp	r0, #0
   20236:	d0b2      	beq.n	2019e <work_queue_main+0xae>
	__asm__ volatile(
   20238:	f38a 8811 	msr	BASEPRI, sl
   2023c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   20240:	2d00      	cmp	r5, #0
   20242:	f47f af5b 	bne.w	200fc <work_queue_main+0xc>
	z_impl_k_yield();
   20246:	f001 fc35 	bl	21ab4 <z_impl_k_yield>
}
   2024a:	e757      	b.n	200fc <work_queue_main+0xc>
	return list->head;
   2024c:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   2024e:	f023 0303 	bic.w	r3, r3, #3
   20252:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20254:	2800      	cmp	r0, #0
   20256:	d0e2      	beq.n	2021e <work_queue_main+0x12e>
	return node->next;
   20258:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   2025c:	46c3      	mov	fp, r8
	return node->next;
   2025e:	f8d0 9000 	ldr.w	r9, [r0]
   20262:	2800      	cmp	r0, #0
   20264:	d0db      	beq.n	2021e <work_queue_main+0x12e>
		if (wc->work == work) {
   20266:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   20268:	4602      	mov	r2, r0
		if (wc->work == work) {
   2026a:	429d      	cmp	r5, r3
   2026c:	d10d      	bne.n	2028a <work_queue_main+0x19a>
   2026e:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20270:	f1b8 0f00 	cmp.w	r8, #0
   20274:	d112      	bne.n	2029c <work_queue_main+0x1ac>
   20276:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   20278:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2027a:	4283      	cmp	r3, r0
   2027c:	d100      	bne.n	20280 <work_queue_main+0x190>
	list->tail = node;
   2027e:	607a      	str	r2, [r7, #4]
	parent->next = child;
   20280:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   20284:	f7ff fe5c 	bl	1ff40 <z_impl_k_sem_give>
}
   20288:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2028a:	f1b9 0f00 	cmp.w	r9, #0
   2028e:	d00d      	beq.n	202ac <work_queue_main+0x1bc>
	return node->next;
   20290:	f8d9 3000 	ldr.w	r3, [r9]
   20294:	4648      	mov	r0, r9
   20296:	4690      	mov	r8, r2
   20298:	4699      	mov	r9, r3
   2029a:	e7e2      	b.n	20262 <work_queue_main+0x172>
	parent->next = child;
   2029c:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   202a0:	687b      	ldr	r3, [r7, #4]
   202a2:	4283      	cmp	r3, r0
	list->tail = node;
   202a4:	bf08      	it	eq
   202a6:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   202aa:	e7e9      	b.n	20280 <work_queue_main+0x190>
   202ac:	464b      	mov	r3, r9
   202ae:	e7f1      	b.n	20294 <work_queue_main+0x1a4>
   202b0:	2002153c 	.word	0x2002153c
   202b4:	20021534 	.word	0x20021534
   202b8:	0002c76f 	.word	0x0002c76f
   202bc:	0002c7c8 	.word	0x0002c7c8
   202c0:	0002b939 	.word	0x0002b939
   202c4:	0002c7dd 	.word	0x0002c7dd
   202c8:	0002c79c 	.word	0x0002c79c
   202cc:	0002c7b3 	.word	0x0002c7b3
   202d0:	00030c44 	.word	0x00030c44
   202d4:	00030c23 	.word	0x00030c23

000202d8 <cancel_sync_locked>:
{
   202d8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   202da:	68c3      	ldr	r3, [r0, #12]
{
   202dc:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   202de:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   202e2:	079b      	lsls	r3, r3, #30
{
   202e4:	460c      	mov	r4, r1
	if (ret) {
   202e6:	d50d      	bpl.n	20304 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   202e8:	2201      	movs	r2, #1
   202ea:	2100      	movs	r1, #0
   202ec:	f104 0008 	add.w	r0, r4, #8
   202f0:	f009 f9a3 	bl	2963a <z_impl_k_sem_init>
	parent->next = child;
   202f4:	2300      	movs	r3, #0
   202f6:	6023      	str	r3, [r4, #0]
	return list->tail;
   202f8:	4b05      	ldr	r3, [pc, #20]	; (20310 <cancel_sync_locked+0x38>)
	canceler->work = work;
   202fa:	6065      	str	r5, [r4, #4]
   202fc:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   202fe:	b91a      	cbnz	r2, 20308 <cancel_sync_locked+0x30>
	list->head = node;
   20300:	e9c3 4400 	strd	r4, r4, [r3]
}
   20304:	4630      	mov	r0, r6
   20306:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   20308:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2030a:	605c      	str	r4, [r3, #4]
}
   2030c:	e7fa      	b.n	20304 <cancel_sync_locked+0x2c>
   2030e:	bf00      	nop
   20310:	20021534 	.word	0x20021534

00020314 <submit_to_queue_locked>:
{
   20314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   20316:	68c3      	ldr	r3, [r0, #12]
{
   20318:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2031a:	079a      	lsls	r2, r3, #30
{
   2031c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2031e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   20322:	d439      	bmi.n	20398 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   20324:	075b      	lsls	r3, r3, #29
   20326:	d425      	bmi.n	20374 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   20328:	680b      	ldr	r3, [r1, #0]
   2032a:	b90b      	cbnz	r3, 20330 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2032c:	6883      	ldr	r3, [r0, #8]
   2032e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   20330:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   20332:	07dd      	lsls	r5, r3, #31
   20334:	d521      	bpl.n	2037a <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   20336:	68a3      	ldr	r3, [r4, #8]
   20338:	b95b      	cbnz	r3, 20352 <submit_to_queue_locked+0x3e>
   2033a:	4928      	ldr	r1, [pc, #160]	; (203dc <submit_to_queue_locked+0xc8>)
   2033c:	4828      	ldr	r0, [pc, #160]	; (203e0 <submit_to_queue_locked+0xcc>)
   2033e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   20342:	4a28      	ldr	r2, [pc, #160]	; (203e4 <submit_to_queue_locked+0xd0>)
   20344:	f004 fdc7 	bl	24ed6 <assert_print>
   20348:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2034c:	4825      	ldr	r0, [pc, #148]	; (203e4 <submit_to_queue_locked+0xd0>)
   2034e:	f004 fdbb 	bl	24ec8 <assert_post_action>
			ret = 2;
   20352:	2602      	movs	r6, #2
			*queuep = work->queue;
   20354:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   20356:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   20358:	2d00      	cmp	r5, #0
   2035a:	d03c      	beq.n	203d6 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2035c:	4b22      	ldr	r3, [pc, #136]	; (203e8 <submit_to_queue_locked+0xd4>)
   2035e:	689b      	ldr	r3, [r3, #8]
   20360:	42ab      	cmp	r3, r5
   20362:	d00c      	beq.n	2037e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   20364:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20368:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2036a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2036e:	d416      	bmi.n	2039e <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   20370:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   20374:	2300      	movs	r3, #0
   20376:	603b      	str	r3, [r7, #0]
	return ret;
   20378:	e027      	b.n	203ca <submit_to_queue_locked+0xb6>
		ret = 1;
   2037a:	2601      	movs	r6, #1
   2037c:	e7eb      	b.n	20356 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2037e:	f009 f90b 	bl	29598 <k_is_in_isr>
   20382:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   20386:	2800      	cmp	r0, #0
   20388:	d1ee      	bne.n	20368 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2038a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2038c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20390:	d5ee      	bpl.n	20370 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   20392:	b152      	cbz	r2, 203aa <submit_to_queue_locked+0x96>
   20394:	075b      	lsls	r3, r3, #29
   20396:	d408      	bmi.n	203aa <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   20398:	f06f 060f 	mvn.w	r6, #15
   2039c:	e7ea      	b.n	20374 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   2039e:	2a00      	cmp	r2, #0
   203a0:	d1fa      	bne.n	20398 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   203a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   203a6:	2b00      	cmp	r3, #0
   203a8:	d1f6      	bne.n	20398 <submit_to_queue_locked+0x84>
	parent->next = child;
   203aa:	2300      	movs	r3, #0
   203ac:	6023      	str	r3, [r4, #0]
	return list->tail;
   203ae:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   203b2:	b963      	cbnz	r3, 203ce <submit_to_queue_locked+0xba>
	list->head = node;
   203b4:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   203b8:	4628      	mov	r0, r5
   203ba:	f009 f967 	bl	2968c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   203be:	68e3      	ldr	r3, [r4, #12]
   203c0:	f043 0304 	orr.w	r3, r3, #4
   203c4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   203c6:	683b      	ldr	r3, [r7, #0]
   203c8:	60a3      	str	r3, [r4, #8]
}
   203ca:	4630      	mov	r0, r6
   203cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   203ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   203d0:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   203d4:	e7f0      	b.n	203b8 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   203d6:	f06f 0615 	mvn.w	r6, #21
   203da:	e7cb      	b.n	20374 <submit_to_queue_locked+0x60>
   203dc:	00030c5b 	.word	0x00030c5b
   203e0:	0002b939 	.word	0x0002b939
   203e4:	00030c23 	.word	0x00030c23
   203e8:	20021504 	.word	0x20021504

000203ec <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   203ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   203ee:	4604      	mov	r4, r0
	__asm__ volatile(
   203f0:	f04f 0320 	mov.w	r3, #32
   203f4:	f3ef 8511 	mrs	r5, BASEPRI
   203f8:	f383 8812 	msr	BASEPRI_MAX, r3
   203fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20400:	481c      	ldr	r0, [pc, #112]	; (20474 <work_timeout+0x88>)
   20402:	f7ff fae5 	bl	1f9d0 <z_spin_lock_valid>
   20406:	b968      	cbnz	r0, 20424 <work_timeout+0x38>
   20408:	2394      	movs	r3, #148	; 0x94
   2040a:	4a1b      	ldr	r2, [pc, #108]	; (20478 <work_timeout+0x8c>)
   2040c:	491b      	ldr	r1, [pc, #108]	; (2047c <work_timeout+0x90>)
   2040e:	481c      	ldr	r0, [pc, #112]	; (20480 <work_timeout+0x94>)
   20410:	f004 fd61 	bl	24ed6 <assert_print>
   20414:	4917      	ldr	r1, [pc, #92]	; (20474 <work_timeout+0x88>)
   20416:	481b      	ldr	r0, [pc, #108]	; (20484 <work_timeout+0x98>)
   20418:	f004 fd5d 	bl	24ed6 <assert_print>
   2041c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2041e:	4816      	ldr	r0, [pc, #88]	; (20478 <work_timeout+0x8c>)
   20420:	f004 fd52 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   20424:	4813      	ldr	r0, [pc, #76]	; (20474 <work_timeout+0x88>)
   20426:	f7ff faef 	bl	1fa08 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   2042a:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2042c:	2103      	movs	r1, #3
   2042e:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   20430:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20432:	f1a4 0610 	sub.w	r6, r4, #16
   20436:	f009 f910 	bl	2965a <flag_test_and_clear>
   2043a:	b128      	cbz	r0, 20448 <work_timeout+0x5c>
		queue = dw->queue;
   2043c:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   2043e:	4630      	mov	r0, r6
   20440:	a901      	add	r1, sp, #4
		queue = dw->queue;
   20442:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   20444:	f7ff ff66 	bl	20314 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20448:	480a      	ldr	r0, [pc, #40]	; (20474 <work_timeout+0x88>)
   2044a:	f7ff facf 	bl	1f9ec <z_spin_unlock_valid>
   2044e:	b958      	cbnz	r0, 20468 <work_timeout+0x7c>
   20450:	23c2      	movs	r3, #194	; 0xc2
   20452:	4a09      	ldr	r2, [pc, #36]	; (20478 <work_timeout+0x8c>)
   20454:	490c      	ldr	r1, [pc, #48]	; (20488 <work_timeout+0x9c>)
   20456:	480a      	ldr	r0, [pc, #40]	; (20480 <work_timeout+0x94>)
   20458:	f004 fd3d 	bl	24ed6 <assert_print>
   2045c:	4905      	ldr	r1, [pc, #20]	; (20474 <work_timeout+0x88>)
   2045e:	480b      	ldr	r0, [pc, #44]	; (2048c <work_timeout+0xa0>)
   20460:	f004 fd39 	bl	24ed6 <assert_print>
   20464:	21c2      	movs	r1, #194	; 0xc2
   20466:	e7da      	b.n	2041e <work_timeout+0x32>
	__asm__ volatile(
   20468:	f385 8811 	msr	BASEPRI, r5
   2046c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   20470:	b002      	add	sp, #8
   20472:	bd70      	pop	{r4, r5, r6, pc}
   20474:	2002153c 	.word	0x2002153c
   20478:	0002c76f 	.word	0x0002c76f
   2047c:	0002c7c8 	.word	0x0002c7c8
   20480:	0002b939 	.word	0x0002b939
   20484:	0002c7dd 	.word	0x0002c7dd
   20488:	0002c79c 	.word	0x0002c79c
   2048c:	0002c7b3 	.word	0x0002c7b3

00020490 <k_work_init>:
{
   20490:	b538      	push	{r3, r4, r5, lr}
   20492:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   20494:	4604      	mov	r4, r0
   20496:	b948      	cbnz	r0, 204ac <k_work_init+0x1c>
   20498:	490c      	ldr	r1, [pc, #48]	; (204cc <k_work_init+0x3c>)
   2049a:	2389      	movs	r3, #137	; 0x89
   2049c:	4a0c      	ldr	r2, [pc, #48]	; (204d0 <k_work_init+0x40>)
   2049e:	480d      	ldr	r0, [pc, #52]	; (204d4 <k_work_init+0x44>)
   204a0:	f004 fd19 	bl	24ed6 <assert_print>
   204a4:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   204a6:	480a      	ldr	r0, [pc, #40]	; (204d0 <k_work_init+0x40>)
   204a8:	f004 fd0e 	bl	24ec8 <assert_post_action>
   204ac:	b939      	cbnz	r1, 204be <k_work_init+0x2e>
   204ae:	490a      	ldr	r1, [pc, #40]	; (204d8 <k_work_init+0x48>)
   204b0:	238a      	movs	r3, #138	; 0x8a
   204b2:	4a07      	ldr	r2, [pc, #28]	; (204d0 <k_work_init+0x40>)
   204b4:	4807      	ldr	r0, [pc, #28]	; (204d4 <k_work_init+0x44>)
   204b6:	f004 fd0e 	bl	24ed6 <assert_print>
   204ba:	218a      	movs	r1, #138	; 0x8a
   204bc:	e7f3      	b.n	204a6 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   204be:	2210      	movs	r2, #16
   204c0:	2100      	movs	r1, #0
   204c2:	f009 faa8 	bl	29a16 <memset>
   204c6:	6065      	str	r5, [r4, #4]
}
   204c8:	bd38      	pop	{r3, r4, r5, pc}
   204ca:	bf00      	nop
   204cc:	00030cfa 	.word	0x00030cfa
   204d0:	00030c23 	.word	0x00030c23
   204d4:	0002b939 	.word	0x0002b939
   204d8:	00030c44 	.word	0x00030c44

000204dc <k_work_busy_get>:
{
   204dc:	b538      	push	{r3, r4, r5, lr}
   204de:	4604      	mov	r4, r0
	__asm__ volatile(
   204e0:	f04f 0320 	mov.w	r3, #32
   204e4:	f3ef 8511 	mrs	r5, BASEPRI
   204e8:	f383 8812 	msr	BASEPRI_MAX, r3
   204ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   204f0:	4816      	ldr	r0, [pc, #88]	; (2054c <k_work_busy_get+0x70>)
   204f2:	f7ff fa6d 	bl	1f9d0 <z_spin_lock_valid>
   204f6:	b968      	cbnz	r0, 20514 <k_work_busy_get+0x38>
   204f8:	2394      	movs	r3, #148	; 0x94
   204fa:	4a15      	ldr	r2, [pc, #84]	; (20550 <k_work_busy_get+0x74>)
   204fc:	4915      	ldr	r1, [pc, #84]	; (20554 <k_work_busy_get+0x78>)
   204fe:	4816      	ldr	r0, [pc, #88]	; (20558 <k_work_busy_get+0x7c>)
   20500:	f004 fce9 	bl	24ed6 <assert_print>
   20504:	4911      	ldr	r1, [pc, #68]	; (2054c <k_work_busy_get+0x70>)
   20506:	4815      	ldr	r0, [pc, #84]	; (2055c <k_work_busy_get+0x80>)
   20508:	f004 fce5 	bl	24ed6 <assert_print>
   2050c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2050e:	4810      	ldr	r0, [pc, #64]	; (20550 <k_work_busy_get+0x74>)
   20510:	f004 fcda 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   20514:	480d      	ldr	r0, [pc, #52]	; (2054c <k_work_busy_get+0x70>)
   20516:	f7ff fa77 	bl	1fa08 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2051a:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2051c:	480b      	ldr	r0, [pc, #44]	; (2054c <k_work_busy_get+0x70>)
   2051e:	f004 040f 	and.w	r4, r4, #15
   20522:	f7ff fa63 	bl	1f9ec <z_spin_unlock_valid>
   20526:	b958      	cbnz	r0, 20540 <k_work_busy_get+0x64>
   20528:	23c2      	movs	r3, #194	; 0xc2
   2052a:	4a09      	ldr	r2, [pc, #36]	; (20550 <k_work_busy_get+0x74>)
   2052c:	490c      	ldr	r1, [pc, #48]	; (20560 <k_work_busy_get+0x84>)
   2052e:	480a      	ldr	r0, [pc, #40]	; (20558 <k_work_busy_get+0x7c>)
   20530:	f004 fcd1 	bl	24ed6 <assert_print>
   20534:	4905      	ldr	r1, [pc, #20]	; (2054c <k_work_busy_get+0x70>)
   20536:	480b      	ldr	r0, [pc, #44]	; (20564 <k_work_busy_get+0x88>)
   20538:	f004 fccd 	bl	24ed6 <assert_print>
   2053c:	21c2      	movs	r1, #194	; 0xc2
   2053e:	e7e6      	b.n	2050e <k_work_busy_get+0x32>
	__asm__ volatile(
   20540:	f385 8811 	msr	BASEPRI, r5
   20544:	f3bf 8f6f 	isb	sy
}
   20548:	4620      	mov	r0, r4
   2054a:	bd38      	pop	{r3, r4, r5, pc}
   2054c:	2002153c 	.word	0x2002153c
   20550:	0002c76f 	.word	0x0002c76f
   20554:	0002c7c8 	.word	0x0002c7c8
   20558:	0002b939 	.word	0x0002b939
   2055c:	0002c7dd 	.word	0x0002c7dd
   20560:	0002c79c 	.word	0x0002c79c
   20564:	0002c7b3 	.word	0x0002c7b3

00020568 <z_work_submit_to_queue>:
{
   20568:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   2056a:	460c      	mov	r4, r1
{
   2056c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   2056e:	b959      	cbnz	r1, 20588 <z_work_submit_to_queue+0x20>
   20570:	4921      	ldr	r1, [pc, #132]	; (205f8 <z_work_submit_to_queue+0x90>)
   20572:	4822      	ldr	r0, [pc, #136]	; (205fc <z_work_submit_to_queue+0x94>)
   20574:	f44f 73ba 	mov.w	r3, #372	; 0x174
   20578:	4a21      	ldr	r2, [pc, #132]	; (20600 <z_work_submit_to_queue+0x98>)
   2057a:	f004 fcac 	bl	24ed6 <assert_print>
   2057e:	f44f 71ba 	mov.w	r1, #372	; 0x174
   20582:	481f      	ldr	r0, [pc, #124]	; (20600 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20584:	f004 fca0 	bl	24ec8 <assert_post_action>
	__asm__ volatile(
   20588:	f04f 0320 	mov.w	r3, #32
   2058c:	f3ef 8511 	mrs	r5, BASEPRI
   20590:	f383 8812 	msr	BASEPRI_MAX, r3
   20594:	f3bf 8f6f 	isb	sy
   20598:	481a      	ldr	r0, [pc, #104]	; (20604 <z_work_submit_to_queue+0x9c>)
   2059a:	f7ff fa19 	bl	1f9d0 <z_spin_lock_valid>
   2059e:	b960      	cbnz	r0, 205ba <z_work_submit_to_queue+0x52>
   205a0:	2394      	movs	r3, #148	; 0x94
   205a2:	4a19      	ldr	r2, [pc, #100]	; (20608 <z_work_submit_to_queue+0xa0>)
   205a4:	4919      	ldr	r1, [pc, #100]	; (2060c <z_work_submit_to_queue+0xa4>)
   205a6:	4815      	ldr	r0, [pc, #84]	; (205fc <z_work_submit_to_queue+0x94>)
   205a8:	f004 fc95 	bl	24ed6 <assert_print>
   205ac:	4915      	ldr	r1, [pc, #84]	; (20604 <z_work_submit_to_queue+0x9c>)
   205ae:	4818      	ldr	r0, [pc, #96]	; (20610 <z_work_submit_to_queue+0xa8>)
   205b0:	f004 fc91 	bl	24ed6 <assert_print>
   205b4:	2194      	movs	r1, #148	; 0x94
   205b6:	4814      	ldr	r0, [pc, #80]	; (20608 <z_work_submit_to_queue+0xa0>)
   205b8:	e7e4      	b.n	20584 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   205ba:	4812      	ldr	r0, [pc, #72]	; (20604 <z_work_submit_to_queue+0x9c>)
   205bc:	f7ff fa24 	bl	1fa08 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   205c0:	4620      	mov	r0, r4
   205c2:	a901      	add	r1, sp, #4
   205c4:	f7ff fea6 	bl	20314 <submit_to_queue_locked>
   205c8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   205ca:	480e      	ldr	r0, [pc, #56]	; (20604 <z_work_submit_to_queue+0x9c>)
   205cc:	f7ff fa0e 	bl	1f9ec <z_spin_unlock_valid>
   205d0:	b958      	cbnz	r0, 205ea <z_work_submit_to_queue+0x82>
   205d2:	23c2      	movs	r3, #194	; 0xc2
   205d4:	4a0c      	ldr	r2, [pc, #48]	; (20608 <z_work_submit_to_queue+0xa0>)
   205d6:	490f      	ldr	r1, [pc, #60]	; (20614 <z_work_submit_to_queue+0xac>)
   205d8:	4808      	ldr	r0, [pc, #32]	; (205fc <z_work_submit_to_queue+0x94>)
   205da:	f004 fc7c 	bl	24ed6 <assert_print>
   205de:	4909      	ldr	r1, [pc, #36]	; (20604 <z_work_submit_to_queue+0x9c>)
   205e0:	480d      	ldr	r0, [pc, #52]	; (20618 <z_work_submit_to_queue+0xb0>)
   205e2:	f004 fc78 	bl	24ed6 <assert_print>
   205e6:	21c2      	movs	r1, #194	; 0xc2
   205e8:	e7e5      	b.n	205b6 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   205ea:	f385 8811 	msr	BASEPRI, r5
   205ee:	f3bf 8f6f 	isb	sy
}
   205f2:	4620      	mov	r0, r4
   205f4:	b003      	add	sp, #12
   205f6:	bd30      	pop	{r4, r5, pc}
   205f8:	00030cfa 	.word	0x00030cfa
   205fc:	0002b939 	.word	0x0002b939
   20600:	00030c23 	.word	0x00030c23
   20604:	2002153c 	.word	0x2002153c
   20608:	0002c76f 	.word	0x0002c76f
   2060c:	0002c7c8 	.word	0x0002c7c8
   20610:	0002c7dd 	.word	0x0002c7dd
   20614:	0002c79c 	.word	0x0002c79c
   20618:	0002c7b3 	.word	0x0002c7b3

0002061c <k_work_submit>:
{
   2061c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2061e:	4801      	ldr	r0, [pc, #4]	; (20624 <k_work_submit+0x8>)
   20620:	f009 b86e 	b.w	29700 <k_work_submit_to_queue>
   20624:	20009d18 	.word	0x20009d18

00020628 <k_work_queue_init>:
{
   20628:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   2062a:	b958      	cbnz	r0, 20644 <k_work_queue_init+0x1c>
   2062c:	4908      	ldr	r1, [pc, #32]	; (20650 <k_work_queue_init+0x28>)
   2062e:	4809      	ldr	r0, [pc, #36]	; (20654 <k_work_queue_init+0x2c>)
   20630:	f240 23b9 	movw	r3, #697	; 0x2b9
   20634:	4a08      	ldr	r2, [pc, #32]	; (20658 <k_work_queue_init+0x30>)
   20636:	f004 fc4e 	bl	24ed6 <assert_print>
   2063a:	f240 21b9 	movw	r1, #697	; 0x2b9
   2063e:	4806      	ldr	r0, [pc, #24]	; (20658 <k_work_queue_init+0x30>)
   20640:	f004 fc42 	bl	24ec8 <assert_post_action>
	*queue = (struct k_work_q) {
   20644:	22a8      	movs	r2, #168	; 0xa8
   20646:	2100      	movs	r1, #0
   20648:	f009 f9e5 	bl	29a16 <memset>
}
   2064c:	bd08      	pop	{r3, pc}
   2064e:	bf00      	nop
   20650:	00030c61 	.word	0x00030c61
   20654:	0002b939 	.word	0x0002b939
   20658:	00030c23 	.word	0x00030c23

0002065c <k_work_queue_start>:
{
   2065c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2065e:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   20660:	4604      	mov	r4, r0
{
   20662:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   20664:	b958      	cbnz	r0, 2067e <k_work_queue_start+0x22>
   20666:	492b      	ldr	r1, [pc, #172]	; (20714 <k_work_queue_start+0xb8>)
   20668:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   2066c:	4a2a      	ldr	r2, [pc, #168]	; (20718 <k_work_queue_start+0xbc>)
   2066e:	482b      	ldr	r0, [pc, #172]	; (2071c <k_work_queue_start+0xc0>)
   20670:	f004 fc31 	bl	24ed6 <assert_print>
   20674:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   20678:	4827      	ldr	r0, [pc, #156]	; (20718 <k_work_queue_start+0xbc>)
   2067a:	f004 fc25 	bl	24ec8 <assert_post_action>
   2067e:	b949      	cbnz	r1, 20694 <k_work_queue_start+0x38>
   20680:	4927      	ldr	r1, [pc, #156]	; (20720 <k_work_queue_start+0xc4>)
   20682:	f240 23c9 	movw	r3, #713	; 0x2c9
   20686:	4a24      	ldr	r2, [pc, #144]	; (20718 <k_work_queue_start+0xbc>)
   20688:	4824      	ldr	r0, [pc, #144]	; (2071c <k_work_queue_start+0xc0>)
   2068a:	f004 fc24 	bl	24ed6 <assert_print>
   2068e:	f240 21c9 	movw	r1, #713	; 0x2c9
   20692:	e7f1      	b.n	20678 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   20694:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   20698:	f010 0001 	ands.w	r0, r0, #1
   2069c:	d009      	beq.n	206b2 <k_work_queue_start+0x56>
   2069e:	4921      	ldr	r1, [pc, #132]	; (20724 <k_work_queue_start+0xc8>)
   206a0:	f240 23ca 	movw	r3, #714	; 0x2ca
   206a4:	4a1c      	ldr	r2, [pc, #112]	; (20718 <k_work_queue_start+0xbc>)
   206a6:	481d      	ldr	r0, [pc, #116]	; (2071c <k_work_queue_start+0xc0>)
   206a8:	f004 fc15 	bl	24ed6 <assert_print>
   206ac:	f240 21ca 	movw	r1, #714	; 0x2ca
   206b0:	e7e2      	b.n	20678 <k_work_queue_start+0x1c>
	list->tail = NULL;
   206b2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   206b6:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   206ba:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   206be:	f104 0098 	add.w	r0, r4, #152	; 0x98
   206c2:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   206c6:	b31d      	cbz	r5, 20710 <k_work_queue_start+0xb4>
   206c8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   206ca:	2800      	cmp	r0, #0
   206cc:	f240 1001 	movw	r0, #257	; 0x101
   206d0:	bf08      	it	eq
   206d2:	2001      	moveq	r0, #1
	*flagp = flags;
   206d4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   206d8:	2000      	movs	r0, #0
   206da:	f04f 36ff 	mov.w	r6, #4294967295
   206de:	f04f 37ff 	mov.w	r7, #4294967295
   206e2:	e9cd 3003 	strd	r3, r0, [sp, #12]
   206e6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   206ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
   206ee:	4620      	mov	r0, r4
   206f0:	4b0d      	ldr	r3, [pc, #52]	; (20728 <k_work_queue_start+0xcc>)
   206f2:	9400      	str	r4, [sp, #0]
   206f4:	f7ff f8a2 	bl	1f83c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   206f8:	b125      	cbz	r5, 20704 <k_work_queue_start+0xa8>
   206fa:	6829      	ldr	r1, [r5, #0]
   206fc:	b111      	cbz	r1, 20704 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   206fe:	4620      	mov	r0, r4
   20700:	f008 ff50 	bl	295a4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   20704:	4620      	mov	r0, r4
}
   20706:	b009      	add	sp, #36	; 0x24
   20708:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2070c:	f008 bf4f 	b.w	295ae <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20710:	2001      	movs	r0, #1
   20712:	e7df      	b.n	206d4 <k_work_queue_start+0x78>
   20714:	00030cb9 	.word	0x00030cb9
   20718:	00030c23 	.word	0x00030c23
   2071c:	0002b939 	.word	0x0002b939
   20720:	00030cbf 	.word	0x00030cbf
   20724:	00030cc5 	.word	0x00030cc5
   20728:	000200f1 	.word	0x000200f1

0002072c <k_work_queue_drain>:
{
   2072c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2072e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   20730:	4604      	mov	r4, r0
   20732:	b958      	cbnz	r0, 2074c <k_work_queue_drain+0x20>
   20734:	493a      	ldr	r1, [pc, #232]	; (20820 <k_work_queue_drain+0xf4>)
   20736:	f240 23ed 	movw	r3, #749	; 0x2ed
   2073a:	4a3a      	ldr	r2, [pc, #232]	; (20824 <k_work_queue_drain+0xf8>)
   2073c:	483a      	ldr	r0, [pc, #232]	; (20828 <k_work_queue_drain+0xfc>)
   2073e:	f004 fbca 	bl	24ed6 <assert_print>
   20742:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   20746:	4837      	ldr	r0, [pc, #220]	; (20824 <k_work_queue_drain+0xf8>)
   20748:	f004 fbbe 	bl	24ec8 <assert_post_action>
   2074c:	f008 ff24 	bl	29598 <k_is_in_isr>
   20750:	b148      	cbz	r0, 20766 <k_work_queue_drain+0x3a>
   20752:	4936      	ldr	r1, [pc, #216]	; (2082c <k_work_queue_drain+0x100>)
   20754:	f240 23ee 	movw	r3, #750	; 0x2ee
   20758:	4a32      	ldr	r2, [pc, #200]	; (20824 <k_work_queue_drain+0xf8>)
   2075a:	4833      	ldr	r0, [pc, #204]	; (20828 <k_work_queue_drain+0xfc>)
   2075c:	f004 fbbb 	bl	24ed6 <assert_print>
   20760:	f240 21ee 	movw	r1, #750	; 0x2ee
   20764:	e7ef      	b.n	20746 <k_work_queue_drain+0x1a>
	__asm__ volatile(
   20766:	f04f 0320 	mov.w	r3, #32
   2076a:	f3ef 8611 	mrs	r6, BASEPRI
   2076e:	f383 8812 	msr	BASEPRI_MAX, r3
   20772:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20776:	482e      	ldr	r0, [pc, #184]	; (20830 <k_work_queue_drain+0x104>)
   20778:	f7ff f92a 	bl	1f9d0 <z_spin_lock_valid>
   2077c:	b960      	cbnz	r0, 20798 <k_work_queue_drain+0x6c>
   2077e:	2394      	movs	r3, #148	; 0x94
   20780:	4a2c      	ldr	r2, [pc, #176]	; (20834 <k_work_queue_drain+0x108>)
   20782:	492d      	ldr	r1, [pc, #180]	; (20838 <k_work_queue_drain+0x10c>)
   20784:	4828      	ldr	r0, [pc, #160]	; (20828 <k_work_queue_drain+0xfc>)
   20786:	f004 fba6 	bl	24ed6 <assert_print>
   2078a:	4929      	ldr	r1, [pc, #164]	; (20830 <k_work_queue_drain+0x104>)
   2078c:	482b      	ldr	r0, [pc, #172]	; (2083c <k_work_queue_drain+0x110>)
   2078e:	f004 fba2 	bl	24ed6 <assert_print>
   20792:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20794:	4827      	ldr	r0, [pc, #156]	; (20834 <k_work_queue_drain+0x108>)
   20796:	e7d7      	b.n	20748 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   20798:	4825      	ldr	r0, [pc, #148]	; (20830 <k_work_queue_drain+0x104>)
   2079a:	f7ff f935 	bl	1fa08 <z_spin_lock_set_owner>
	return *flagp;
   2079e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   207a2:	f013 0f06 	tst.w	r3, #6
   207a6:	d11d      	bne.n	207e4 <k_work_queue_drain+0xb8>
	    || plug
   207a8:	b1b5      	cbz	r5, 207d8 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   207aa:	f043 030c 	orr.w	r3, r3, #12
   207ae:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   207b2:	4620      	mov	r0, r4
   207b4:	f008 ff6a 	bl	2968c <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   207b8:	2300      	movs	r3, #0
   207ba:	f04f 32ff 	mov.w	r2, #4294967295
   207be:	9302      	str	r3, [sp, #8]
   207c0:	f04f 33ff 	mov.w	r3, #4294967295
   207c4:	4631      	mov	r1, r6
   207c6:	e9cd 2300 	strd	r2, r3, [sp]
   207ca:	4819      	ldr	r0, [pc, #100]	; (20830 <k_work_queue_drain+0x104>)
   207cc:	f104 0298 	add.w	r2, r4, #152	; 0x98
   207d0:	f001 fc0a 	bl	21fe8 <z_sched_wait>
}
   207d4:	b004      	add	sp, #16
   207d6:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   207d8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   207dc:	b14d      	cbz	r5, 207f2 <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   207de:	f043 0304 	orr.w	r3, r3, #4
   207e2:	e7e4      	b.n	207ae <k_work_queue_drain+0x82>
   207e4:	f043 0204 	orr.w	r2, r3, #4
   207e8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   207ec:	2d00      	cmp	r5, #0
   207ee:	d0e0      	beq.n	207b2 <k_work_queue_drain+0x86>
   207f0:	e7db      	b.n	207aa <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207f2:	480f      	ldr	r0, [pc, #60]	; (20830 <k_work_queue_drain+0x104>)
   207f4:	f7ff f8fa 	bl	1f9ec <z_spin_unlock_valid>
   207f8:	b958      	cbnz	r0, 20812 <k_work_queue_drain+0xe6>
   207fa:	23c2      	movs	r3, #194	; 0xc2
   207fc:	4a0d      	ldr	r2, [pc, #52]	; (20834 <k_work_queue_drain+0x108>)
   207fe:	4910      	ldr	r1, [pc, #64]	; (20840 <k_work_queue_drain+0x114>)
   20800:	4809      	ldr	r0, [pc, #36]	; (20828 <k_work_queue_drain+0xfc>)
   20802:	f004 fb68 	bl	24ed6 <assert_print>
   20806:	490a      	ldr	r1, [pc, #40]	; (20830 <k_work_queue_drain+0x104>)
   20808:	480e      	ldr	r0, [pc, #56]	; (20844 <k_work_queue_drain+0x118>)
   2080a:	f004 fb64 	bl	24ed6 <assert_print>
   2080e:	21c2      	movs	r1, #194	; 0xc2
   20810:	e7c0      	b.n	20794 <k_work_queue_drain+0x68>
	__asm__ volatile(
   20812:	f386 8811 	msr	BASEPRI, r6
   20816:	f3bf 8f6f 	isb	sy
	int ret = 0;
   2081a:	4628      	mov	r0, r5
	return ret;
   2081c:	e7da      	b.n	207d4 <k_work_queue_drain+0xa8>
   2081e:	bf00      	nop
   20820:	00030cb9 	.word	0x00030cb9
   20824:	00030c23 	.word	0x00030c23
   20828:	0002b939 	.word	0x0002b939
   2082c:	0002e821 	.word	0x0002e821
   20830:	2002153c 	.word	0x2002153c
   20834:	0002c76f 	.word	0x0002c76f
   20838:	0002c7c8 	.word	0x0002c7c8
   2083c:	0002c7dd 	.word	0x0002c7dd
   20840:	0002c79c 	.word	0x0002c79c
   20844:	0002c7b3 	.word	0x0002c7b3

00020848 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   20848:	b538      	push	{r3, r4, r5, lr}
   2084a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2084c:	4604      	mov	r4, r0
   2084e:	b958      	cbnz	r0, 20868 <k_work_init_delayable+0x20>
   20850:	490f      	ldr	r1, [pc, #60]	; (20890 <k_work_init_delayable+0x48>)
   20852:	f44f 7350 	mov.w	r3, #832	; 0x340
   20856:	4a0f      	ldr	r2, [pc, #60]	; (20894 <k_work_init_delayable+0x4c>)
   20858:	480f      	ldr	r0, [pc, #60]	; (20898 <k_work_init_delayable+0x50>)
   2085a:	f004 fb3c 	bl	24ed6 <assert_print>
   2085e:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   20862:	480c      	ldr	r0, [pc, #48]	; (20894 <k_work_init_delayable+0x4c>)
   20864:	f004 fb30 	bl	24ec8 <assert_post_action>
   20868:	b949      	cbnz	r1, 2087e <k_work_init_delayable+0x36>
   2086a:	490c      	ldr	r1, [pc, #48]	; (2089c <k_work_init_delayable+0x54>)
   2086c:	f240 3341 	movw	r3, #833	; 0x341
   20870:	4a08      	ldr	r2, [pc, #32]	; (20894 <k_work_init_delayable+0x4c>)
   20872:	4809      	ldr	r0, [pc, #36]	; (20898 <k_work_init_delayable+0x50>)
   20874:	f004 fb2f 	bl	24ed6 <assert_print>
   20878:	f240 3141 	movw	r1, #833	; 0x341
   2087c:	e7f1      	b.n	20862 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   2087e:	2230      	movs	r2, #48	; 0x30
   20880:	2100      	movs	r1, #0
   20882:	f009 f8c8 	bl	29a16 <memset>
   20886:	f44f 7380 	mov.w	r3, #256	; 0x100
   2088a:	6065      	str	r5, [r4, #4]
   2088c:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   2088e:	bd38      	pop	{r3, r4, r5, pc}
   20890:	00030cf9 	.word	0x00030cf9
   20894:	00030c23 	.word	0x00030c23
   20898:	0002b939 	.word	0x0002b939
   2089c:	00030c44 	.word	0x00030c44

000208a0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   208a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   208a2:	4616      	mov	r6, r2
   208a4:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   208a6:	460c      	mov	r4, r1
{
   208a8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   208aa:	b959      	cbnz	r1, 208c4 <k_work_schedule_for_queue+0x24>
   208ac:	492d      	ldr	r1, [pc, #180]	; (20964 <k_work_schedule_for_queue+0xc4>)
   208ae:	482e      	ldr	r0, [pc, #184]	; (20968 <k_work_schedule_for_queue+0xc8>)
   208b0:	f240 33b7 	movw	r3, #951	; 0x3b7
   208b4:	4a2d      	ldr	r2, [pc, #180]	; (2096c <k_work_schedule_for_queue+0xcc>)
   208b6:	f004 fb0e 	bl	24ed6 <assert_print>
   208ba:	f240 31b7 	movw	r1, #951	; 0x3b7
   208be:	482b      	ldr	r0, [pc, #172]	; (2096c <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   208c0:	f004 fb02 	bl	24ec8 <assert_post_action>
	__asm__ volatile(
   208c4:	f04f 0320 	mov.w	r3, #32
   208c8:	f3ef 8711 	mrs	r7, BASEPRI
   208cc:	f383 8812 	msr	BASEPRI_MAX, r3
   208d0:	f3bf 8f6f 	isb	sy
   208d4:	4826      	ldr	r0, [pc, #152]	; (20970 <k_work_schedule_for_queue+0xd0>)
   208d6:	f7ff f87b 	bl	1f9d0 <z_spin_lock_valid>
   208da:	b960      	cbnz	r0, 208f6 <k_work_schedule_for_queue+0x56>
   208dc:	2394      	movs	r3, #148	; 0x94
   208de:	4a25      	ldr	r2, [pc, #148]	; (20974 <k_work_schedule_for_queue+0xd4>)
   208e0:	4925      	ldr	r1, [pc, #148]	; (20978 <k_work_schedule_for_queue+0xd8>)
   208e2:	4821      	ldr	r0, [pc, #132]	; (20968 <k_work_schedule_for_queue+0xc8>)
   208e4:	f004 faf7 	bl	24ed6 <assert_print>
   208e8:	4921      	ldr	r1, [pc, #132]	; (20970 <k_work_schedule_for_queue+0xd0>)
   208ea:	4824      	ldr	r0, [pc, #144]	; (2097c <k_work_schedule_for_queue+0xdc>)
   208ec:	f004 faf3 	bl	24ed6 <assert_print>
   208f0:	2194      	movs	r1, #148	; 0x94
   208f2:	4820      	ldr	r0, [pc, #128]	; (20974 <k_work_schedule_for_queue+0xd4>)
   208f4:	e7e4      	b.n	208c0 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   208f6:	481e      	ldr	r0, [pc, #120]	; (20970 <k_work_schedule_for_queue+0xd0>)
   208f8:	f7ff f886 	bl	1fa08 <z_spin_lock_set_owner>
	return *flagp;
   208fc:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   208fe:	f013 0f0e 	tst.w	r3, #14
   20902:	d125      	bne.n	20950 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20904:	ea55 0206 	orrs.w	r2, r5, r6
   20908:	d114      	bne.n	20934 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   2090a:	4620      	mov	r0, r4
   2090c:	a901      	add	r1, sp, #4
   2090e:	f7ff fd01 	bl	20314 <submit_to_queue_locked>
   20912:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20914:	4816      	ldr	r0, [pc, #88]	; (20970 <k_work_schedule_for_queue+0xd0>)
   20916:	f7ff f869 	bl	1f9ec <z_spin_unlock_valid>
   2091a:	b9d8      	cbnz	r0, 20954 <k_work_schedule_for_queue+0xb4>
   2091c:	23c2      	movs	r3, #194	; 0xc2
   2091e:	4a15      	ldr	r2, [pc, #84]	; (20974 <k_work_schedule_for_queue+0xd4>)
   20920:	4917      	ldr	r1, [pc, #92]	; (20980 <k_work_schedule_for_queue+0xe0>)
   20922:	4811      	ldr	r0, [pc, #68]	; (20968 <k_work_schedule_for_queue+0xc8>)
   20924:	f004 fad7 	bl	24ed6 <assert_print>
   20928:	4911      	ldr	r1, [pc, #68]	; (20970 <k_work_schedule_for_queue+0xd0>)
   2092a:	4816      	ldr	r0, [pc, #88]	; (20984 <k_work_schedule_for_queue+0xe4>)
   2092c:	f004 fad3 	bl	24ed6 <assert_print>
   20930:	21c2      	movs	r1, #194	; 0xc2
   20932:	e7de      	b.n	208f2 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   20934:	f043 0308 	orr.w	r3, r3, #8
   20938:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2093a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2093c:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   20940:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20942:	4632      	mov	r2, r6
   20944:	462b      	mov	r3, r5
   20946:	4910      	ldr	r1, [pc, #64]	; (20988 <k_work_schedule_for_queue+0xe8>)
   20948:	f001 fbc8 	bl	220dc <z_add_timeout>
	return ret;
   2094c:	2401      	movs	r4, #1
   2094e:	e7e1      	b.n	20914 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   20950:	2400      	movs	r4, #0
   20952:	e7df      	b.n	20914 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   20954:	f387 8811 	msr	BASEPRI, r7
   20958:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2095c:	4620      	mov	r0, r4
   2095e:	b003      	add	sp, #12
   20960:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20962:	bf00      	nop
   20964:	00030cf9 	.word	0x00030cf9
   20968:	0002b939 	.word	0x0002b939
   2096c:	00030c23 	.word	0x00030c23
   20970:	2002153c 	.word	0x2002153c
   20974:	0002c76f 	.word	0x0002c76f
   20978:	0002c7c8 	.word	0x0002c7c8
   2097c:	0002c7dd 	.word	0x0002c7dd
   20980:	0002c79c 	.word	0x0002c79c
   20984:	0002c7b3 	.word	0x0002c7b3
   20988:	000203ed 	.word	0x000203ed

0002098c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2098c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2098e:	4801      	ldr	r0, [pc, #4]	; (20994 <k_work_schedule+0x8>)
   20990:	f7ff bf86 	b.w	208a0 <k_work_schedule_for_queue>
   20994:	20009d18 	.word	0x20009d18

00020998 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   20998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2099a:	4616      	mov	r6, r2
   2099c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2099e:	460c      	mov	r4, r1
{
   209a0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   209a2:	b959      	cbnz	r1, 209bc <k_work_reschedule_for_queue+0x24>
   209a4:	492c      	ldr	r1, [pc, #176]	; (20a58 <k_work_reschedule_for_queue+0xc0>)
   209a6:	482d      	ldr	r0, [pc, #180]	; (20a5c <k_work_reschedule_for_queue+0xc4>)
   209a8:	f240 33db 	movw	r3, #987	; 0x3db
   209ac:	4a2c      	ldr	r2, [pc, #176]	; (20a60 <k_work_reschedule_for_queue+0xc8>)
   209ae:	f004 fa92 	bl	24ed6 <assert_print>
   209b2:	f240 31db 	movw	r1, #987	; 0x3db
   209b6:	482a      	ldr	r0, [pc, #168]	; (20a60 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209b8:	f004 fa86 	bl	24ec8 <assert_post_action>
	__asm__ volatile(
   209bc:	f04f 0320 	mov.w	r3, #32
   209c0:	f3ef 8711 	mrs	r7, BASEPRI
   209c4:	f383 8812 	msr	BASEPRI_MAX, r3
   209c8:	f3bf 8f6f 	isb	sy
   209cc:	4825      	ldr	r0, [pc, #148]	; (20a64 <k_work_reschedule_for_queue+0xcc>)
   209ce:	f7fe ffff 	bl	1f9d0 <z_spin_lock_valid>
   209d2:	b960      	cbnz	r0, 209ee <k_work_reschedule_for_queue+0x56>
   209d4:	2394      	movs	r3, #148	; 0x94
   209d6:	4a24      	ldr	r2, [pc, #144]	; (20a68 <k_work_reschedule_for_queue+0xd0>)
   209d8:	4924      	ldr	r1, [pc, #144]	; (20a6c <k_work_reschedule_for_queue+0xd4>)
   209da:	4820      	ldr	r0, [pc, #128]	; (20a5c <k_work_reschedule_for_queue+0xc4>)
   209dc:	f004 fa7b 	bl	24ed6 <assert_print>
   209e0:	4920      	ldr	r1, [pc, #128]	; (20a64 <k_work_reschedule_for_queue+0xcc>)
   209e2:	4823      	ldr	r0, [pc, #140]	; (20a70 <k_work_reschedule_for_queue+0xd8>)
   209e4:	f004 fa77 	bl	24ed6 <assert_print>
   209e8:	2194      	movs	r1, #148	; 0x94
   209ea:	481f      	ldr	r0, [pc, #124]	; (20a68 <k_work_reschedule_for_queue+0xd0>)
   209ec:	e7e4      	b.n	209b8 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   209ee:	481d      	ldr	r0, [pc, #116]	; (20a64 <k_work_reschedule_for_queue+0xcc>)
   209f0:	f7ff f80a 	bl	1fa08 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   209f4:	4620      	mov	r0, r4
   209f6:	f008 fe3b 	bl	29670 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   209fa:	ea55 0306 	orrs.w	r3, r5, r6
   209fe:	d114      	bne.n	20a2a <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   20a00:	4620      	mov	r0, r4
   20a02:	a901      	add	r1, sp, #4
   20a04:	f7ff fc86 	bl	20314 <submit_to_queue_locked>
   20a08:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a0a:	4816      	ldr	r0, [pc, #88]	; (20a64 <k_work_reschedule_for_queue+0xcc>)
   20a0c:	f7fe ffee 	bl	1f9ec <z_spin_unlock_valid>
   20a10:	b9d0      	cbnz	r0, 20a48 <k_work_reschedule_for_queue+0xb0>
   20a12:	23c2      	movs	r3, #194	; 0xc2
   20a14:	4a14      	ldr	r2, [pc, #80]	; (20a68 <k_work_reschedule_for_queue+0xd0>)
   20a16:	4917      	ldr	r1, [pc, #92]	; (20a74 <k_work_reschedule_for_queue+0xdc>)
   20a18:	4810      	ldr	r0, [pc, #64]	; (20a5c <k_work_reschedule_for_queue+0xc4>)
   20a1a:	f004 fa5c 	bl	24ed6 <assert_print>
   20a1e:	4911      	ldr	r1, [pc, #68]	; (20a64 <k_work_reschedule_for_queue+0xcc>)
   20a20:	4815      	ldr	r0, [pc, #84]	; (20a78 <k_work_reschedule_for_queue+0xe0>)
   20a22:	f004 fa58 	bl	24ed6 <assert_print>
   20a26:	21c2      	movs	r1, #194	; 0xc2
   20a28:	e7df      	b.n	209ea <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   20a2a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20a2c:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   20a30:	f043 0308 	orr.w	r3, r3, #8
   20a34:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   20a36:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20a38:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   20a3a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20a3c:	490f      	ldr	r1, [pc, #60]	; (20a7c <k_work_reschedule_for_queue+0xe4>)
   20a3e:	462b      	mov	r3, r5
   20a40:	f001 fb4c 	bl	220dc <z_add_timeout>
	return ret;
   20a44:	2401      	movs	r4, #1
   20a46:	e7e0      	b.n	20a0a <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   20a48:	f387 8811 	msr	BASEPRI, r7
   20a4c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   20a50:	4620      	mov	r0, r4
   20a52:	b003      	add	sp, #12
   20a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20a56:	bf00      	nop
   20a58:	00030cf9 	.word	0x00030cf9
   20a5c:	0002b939 	.word	0x0002b939
   20a60:	00030c23 	.word	0x00030c23
   20a64:	2002153c 	.word	0x2002153c
   20a68:	0002c76f 	.word	0x0002c76f
   20a6c:	0002c7c8 	.word	0x0002c7c8
   20a70:	0002c7dd 	.word	0x0002c7dd
   20a74:	0002c79c 	.word	0x0002c79c
   20a78:	0002c7b3 	.word	0x0002c7b3
   20a7c:	000203ed 	.word	0x000203ed

00020a80 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   20a80:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   20a82:	4801      	ldr	r0, [pc, #4]	; (20a88 <k_work_reschedule+0x8>)
   20a84:	f7ff bf88 	b.w	20998 <k_work_reschedule_for_queue>
   20a88:	20009d18 	.word	0x20009d18

00020a8c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   20a8c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   20a8e:	4604      	mov	r4, r0
   20a90:	b958      	cbnz	r0, 20aaa <k_work_cancel_delayable+0x1e>
   20a92:	4922      	ldr	r1, [pc, #136]	; (20b1c <k_work_cancel_delayable+0x90>)
   20a94:	4822      	ldr	r0, [pc, #136]	; (20b20 <k_work_cancel_delayable+0x94>)
   20a96:	f240 33fd 	movw	r3, #1021	; 0x3fd
   20a9a:	4a22      	ldr	r2, [pc, #136]	; (20b24 <k_work_cancel_delayable+0x98>)
   20a9c:	f004 fa1b 	bl	24ed6 <assert_print>
   20aa0:	f240 31fd 	movw	r1, #1021	; 0x3fd
   20aa4:	481f      	ldr	r0, [pc, #124]	; (20b24 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20aa6:	f004 fa0f 	bl	24ec8 <assert_post_action>
	__asm__ volatile(
   20aaa:	f04f 0320 	mov.w	r3, #32
   20aae:	f3ef 8511 	mrs	r5, BASEPRI
   20ab2:	f383 8812 	msr	BASEPRI_MAX, r3
   20ab6:	f3bf 8f6f 	isb	sy
   20aba:	481b      	ldr	r0, [pc, #108]	; (20b28 <k_work_cancel_delayable+0x9c>)
   20abc:	f7fe ff88 	bl	1f9d0 <z_spin_lock_valid>
   20ac0:	b960      	cbnz	r0, 20adc <k_work_cancel_delayable+0x50>
   20ac2:	2394      	movs	r3, #148	; 0x94
   20ac4:	4a19      	ldr	r2, [pc, #100]	; (20b2c <k_work_cancel_delayable+0xa0>)
   20ac6:	491a      	ldr	r1, [pc, #104]	; (20b30 <k_work_cancel_delayable+0xa4>)
   20ac8:	4815      	ldr	r0, [pc, #84]	; (20b20 <k_work_cancel_delayable+0x94>)
   20aca:	f004 fa04 	bl	24ed6 <assert_print>
   20ace:	4916      	ldr	r1, [pc, #88]	; (20b28 <k_work_cancel_delayable+0x9c>)
   20ad0:	4818      	ldr	r0, [pc, #96]	; (20b34 <k_work_cancel_delayable+0xa8>)
   20ad2:	f004 fa00 	bl	24ed6 <assert_print>
   20ad6:	2194      	movs	r1, #148	; 0x94
   20ad8:	4814      	ldr	r0, [pc, #80]	; (20b2c <k_work_cancel_delayable+0xa0>)
   20ada:	e7e4      	b.n	20aa6 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   20adc:	4812      	ldr	r0, [pc, #72]	; (20b28 <k_work_cancel_delayable+0x9c>)
   20ade:	f7fe ff93 	bl	1fa08 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   20ae2:	4620      	mov	r0, r4
   20ae4:	f008 fdc4 	bl	29670 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20ae8:	4620      	mov	r0, r4
   20aea:	f008 fdd6 	bl	2969a <cancel_async_locked>
   20aee:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20af0:	480d      	ldr	r0, [pc, #52]	; (20b28 <k_work_cancel_delayable+0x9c>)
   20af2:	f7fe ff7b 	bl	1f9ec <z_spin_unlock_valid>
   20af6:	b958      	cbnz	r0, 20b10 <k_work_cancel_delayable+0x84>
   20af8:	23c2      	movs	r3, #194	; 0xc2
   20afa:	4a0c      	ldr	r2, [pc, #48]	; (20b2c <k_work_cancel_delayable+0xa0>)
   20afc:	490e      	ldr	r1, [pc, #56]	; (20b38 <k_work_cancel_delayable+0xac>)
   20afe:	4808      	ldr	r0, [pc, #32]	; (20b20 <k_work_cancel_delayable+0x94>)
   20b00:	f004 f9e9 	bl	24ed6 <assert_print>
   20b04:	4908      	ldr	r1, [pc, #32]	; (20b28 <k_work_cancel_delayable+0x9c>)
   20b06:	480d      	ldr	r0, [pc, #52]	; (20b3c <k_work_cancel_delayable+0xb0>)
   20b08:	f004 f9e5 	bl	24ed6 <assert_print>
   20b0c:	21c2      	movs	r1, #194	; 0xc2
   20b0e:	e7e3      	b.n	20ad8 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   20b10:	f385 8811 	msr	BASEPRI, r5
   20b14:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   20b18:	4620      	mov	r0, r4
   20b1a:	bd38      	pop	{r3, r4, r5, pc}
   20b1c:	00030cf9 	.word	0x00030cf9
   20b20:	0002b939 	.word	0x0002b939
   20b24:	00030c23 	.word	0x00030c23
   20b28:	2002153c 	.word	0x2002153c
   20b2c:	0002c76f 	.word	0x0002c76f
   20b30:	0002c7c8 	.word	0x0002c7c8
   20b34:	0002c7dd 	.word	0x0002c7dd
   20b38:	0002c79c 	.word	0x0002c79c
   20b3c:	0002c7b3 	.word	0x0002c7b3

00020b40 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   20b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b44:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   20b46:	4605      	mov	r5, r0
   20b48:	b958      	cbnz	r0, 20b62 <k_work_cancel_delayable_sync+0x22>
   20b4a:	493a      	ldr	r1, [pc, #232]	; (20c34 <k_work_cancel_delayable_sync+0xf4>)
   20b4c:	f240 430e 	movw	r3, #1038	; 0x40e
   20b50:	4a39      	ldr	r2, [pc, #228]	; (20c38 <k_work_cancel_delayable_sync+0xf8>)
   20b52:	483a      	ldr	r0, [pc, #232]	; (20c3c <k_work_cancel_delayable_sync+0xfc>)
   20b54:	f004 f9bf 	bl	24ed6 <assert_print>
   20b58:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   20b5c:	4836      	ldr	r0, [pc, #216]	; (20c38 <k_work_cancel_delayable_sync+0xf8>)
   20b5e:	f004 f9b3 	bl	24ec8 <assert_post_action>
   20b62:	b949      	cbnz	r1, 20b78 <k_work_cancel_delayable_sync+0x38>
   20b64:	4936      	ldr	r1, [pc, #216]	; (20c40 <k_work_cancel_delayable_sync+0x100>)
   20b66:	f240 430f 	movw	r3, #1039	; 0x40f
   20b6a:	4a33      	ldr	r2, [pc, #204]	; (20c38 <k_work_cancel_delayable_sync+0xf8>)
   20b6c:	4833      	ldr	r0, [pc, #204]	; (20c3c <k_work_cancel_delayable_sync+0xfc>)
   20b6e:	f004 f9b2 	bl	24ed6 <assert_print>
   20b72:	f240 410f 	movw	r1, #1039	; 0x40f
   20b76:	e7f1      	b.n	20b5c <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   20b78:	f008 fd0e 	bl	29598 <k_is_in_isr>
   20b7c:	4604      	mov	r4, r0
   20b7e:	b148      	cbz	r0, 20b94 <k_work_cancel_delayable_sync+0x54>
   20b80:	4930      	ldr	r1, [pc, #192]	; (20c44 <k_work_cancel_delayable_sync+0x104>)
   20b82:	f44f 6382 	mov.w	r3, #1040	; 0x410
   20b86:	4a2c      	ldr	r2, [pc, #176]	; (20c38 <k_work_cancel_delayable_sync+0xf8>)
   20b88:	482c      	ldr	r0, [pc, #176]	; (20c3c <k_work_cancel_delayable_sync+0xfc>)
   20b8a:	f004 f9a4 	bl	24ed6 <assert_print>
   20b8e:	f44f 6182 	mov.w	r1, #1040	; 0x410
   20b92:	e7e3      	b.n	20b5c <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   20b94:	f04f 0320 	mov.w	r3, #32
   20b98:	f3ef 8811 	mrs	r8, BASEPRI
   20b9c:	f383 8812 	msr	BASEPRI_MAX, r3
   20ba0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ba4:	4828      	ldr	r0, [pc, #160]	; (20c48 <k_work_cancel_delayable_sync+0x108>)
   20ba6:	f7fe ff13 	bl	1f9d0 <z_spin_lock_valid>
   20baa:	b960      	cbnz	r0, 20bc6 <k_work_cancel_delayable_sync+0x86>
   20bac:	2394      	movs	r3, #148	; 0x94
   20bae:	4a27      	ldr	r2, [pc, #156]	; (20c4c <k_work_cancel_delayable_sync+0x10c>)
   20bb0:	4927      	ldr	r1, [pc, #156]	; (20c50 <k_work_cancel_delayable_sync+0x110>)
   20bb2:	4822      	ldr	r0, [pc, #136]	; (20c3c <k_work_cancel_delayable_sync+0xfc>)
   20bb4:	f004 f98f 	bl	24ed6 <assert_print>
   20bb8:	4923      	ldr	r1, [pc, #140]	; (20c48 <k_work_cancel_delayable_sync+0x108>)
   20bba:	4826      	ldr	r0, [pc, #152]	; (20c54 <k_work_cancel_delayable_sync+0x114>)
   20bbc:	f004 f98b 	bl	24ed6 <assert_print>
   20bc0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bc2:	4822      	ldr	r0, [pc, #136]	; (20c4c <k_work_cancel_delayable_sync+0x10c>)
   20bc4:	e7cb      	b.n	20b5e <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   20bc6:	4820      	ldr	r0, [pc, #128]	; (20c48 <k_work_cancel_delayable_sync+0x108>)
   20bc8:	f7fe ff1e 	bl	1fa08 <z_spin_lock_set_owner>
	return *flagp;
   20bcc:	68eb      	ldr	r3, [r5, #12]
   20bce:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   20bd2:	2b00      	cmp	r3, #0
   20bd4:	bf14      	ite	ne
   20bd6:	2701      	movne	r7, #1
   20bd8:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   20bda:	d00a      	beq.n	20bf2 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   20bdc:	4628      	mov	r0, r5
   20bde:	f008 fd47 	bl	29670 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20be2:	4628      	mov	r0, r5
   20be4:	f008 fd59 	bl	2969a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   20be8:	4631      	mov	r1, r6
   20bea:	4628      	mov	r0, r5
   20bec:	f7ff fb74 	bl	202d8 <cancel_sync_locked>
   20bf0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bf2:	4815      	ldr	r0, [pc, #84]	; (20c48 <k_work_cancel_delayable_sync+0x108>)
   20bf4:	f7fe fefa 	bl	1f9ec <z_spin_unlock_valid>
   20bf8:	b958      	cbnz	r0, 20c12 <k_work_cancel_delayable_sync+0xd2>
   20bfa:	23c2      	movs	r3, #194	; 0xc2
   20bfc:	4a13      	ldr	r2, [pc, #76]	; (20c4c <k_work_cancel_delayable_sync+0x10c>)
   20bfe:	4916      	ldr	r1, [pc, #88]	; (20c58 <k_work_cancel_delayable_sync+0x118>)
   20c00:	480e      	ldr	r0, [pc, #56]	; (20c3c <k_work_cancel_delayable_sync+0xfc>)
   20c02:	f004 f968 	bl	24ed6 <assert_print>
   20c06:	4910      	ldr	r1, [pc, #64]	; (20c48 <k_work_cancel_delayable_sync+0x108>)
   20c08:	4814      	ldr	r0, [pc, #80]	; (20c5c <k_work_cancel_delayable_sync+0x11c>)
   20c0a:	f004 f964 	bl	24ed6 <assert_print>
   20c0e:	21c2      	movs	r1, #194	; 0xc2
   20c10:	e7d7      	b.n	20bc2 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   20c12:	f388 8811 	msr	BASEPRI, r8
   20c16:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   20c1a:	b13c      	cbz	r4, 20c2c <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   20c1c:	f04f 32ff 	mov.w	r2, #4294967295
   20c20:	f04f 33ff 	mov.w	r3, #4294967295
   20c24:	f106 0008 	add.w	r0, r6, #8
   20c28:	f7ff f9ce 	bl	1ffc8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20c2c:	4638      	mov	r0, r7
   20c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c32:	bf00      	nop
   20c34:	00030cf9 	.word	0x00030cf9
   20c38:	00030c23 	.word	0x00030c23
   20c3c:	0002b939 	.word	0x0002b939
   20c40:	00030ca5 	.word	0x00030ca5
   20c44:	0002e821 	.word	0x0002e821
   20c48:	2002153c 	.word	0x2002153c
   20c4c:	0002c76f 	.word	0x0002c76f
   20c50:	0002c7c8 	.word	0x0002c7c8
   20c54:	0002c7dd 	.word	0x0002c7dd
   20c58:	0002c79c 	.word	0x0002c79c
   20c5c:	0002c7b3 	.word	0x0002c7b3

00020c60 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   20c60:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   20c62:	4d07      	ldr	r5, [pc, #28]	; (20c80 <z_reset_time_slice+0x20>)
   20c64:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   20c66:	b154      	cbz	r4, 20c7e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   20c68:	f7fb fc90 	bl	1c58c <sys_clock_elapsed>
   20c6c:	4b05      	ldr	r3, [pc, #20]	; (20c84 <z_reset_time_slice+0x24>)
   20c6e:	4404      	add	r4, r0
   20c70:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   20c72:	6828      	ldr	r0, [r5, #0]
   20c74:	2100      	movs	r1, #0
	}
}
   20c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   20c7a:	f001 bb87 	b.w	2238c <z_set_timeout_expiry>
}
   20c7e:	bd38      	pop	{r3, r4, r5, pc}
   20c80:	20021548 	.word	0x20021548
   20c84:	20021504 	.word	0x20021504

00020c88 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   20c88:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   20c8a:	4d14      	ldr	r5, [pc, #80]	; (20cdc <update_cache+0x54>)
   20c8c:	462b      	mov	r3, r5
   20c8e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20c92:	429c      	cmp	r4, r3
   20c94:	d000      	beq.n	20c98 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   20c96:	b904      	cbnz	r4, 20c9a <update_cache+0x12>
   20c98:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   20c9a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   20c9c:	b9a8      	cbnz	r0, 20cca <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   20c9e:	b963      	cbnz	r3, 20cba <update_cache+0x32>
   20ca0:	490f      	ldr	r1, [pc, #60]	; (20ce0 <update_cache+0x58>)
   20ca2:	2389      	movs	r3, #137	; 0x89
   20ca4:	4a0f      	ldr	r2, [pc, #60]	; (20ce4 <update_cache+0x5c>)
   20ca6:	4810      	ldr	r0, [pc, #64]	; (20ce8 <update_cache+0x60>)
   20ca8:	f004 f915 	bl	24ed6 <assert_print>
   20cac:	480f      	ldr	r0, [pc, #60]	; (20cec <update_cache+0x64>)
   20cae:	f004 f912 	bl	24ed6 <assert_print>
   20cb2:	2189      	movs	r1, #137	; 0x89
   20cb4:	480b      	ldr	r0, [pc, #44]	; (20ce4 <update_cache+0x5c>)
   20cb6:	f004 f907 	bl	24ec8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   20cba:	7b5a      	ldrb	r2, [r3, #13]
   20cbc:	06d2      	lsls	r2, r2, #27
   20cbe:	d104      	bne.n	20cca <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20cc0:	69a2      	ldr	r2, [r4, #24]
   20cc2:	b912      	cbnz	r2, 20cca <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   20cc4:	89da      	ldrh	r2, [r3, #14]
   20cc6:	2a7f      	cmp	r2, #127	; 0x7f
   20cc8:	d805      	bhi.n	20cd6 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   20cca:	429c      	cmp	r4, r3
   20ccc:	d002      	beq.n	20cd4 <update_cache+0x4c>
			z_reset_time_slice(thread);
   20cce:	4620      	mov	r0, r4
   20cd0:	f7ff ffc6 	bl	20c60 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   20cd4:	4623      	mov	r3, r4
   20cd6:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   20cd8:	bd38      	pop	{r3, r4, r5, pc}
   20cda:	bf00      	nop
   20cdc:	20021504 	.word	0x20021504
   20ce0:	00030d30 	.word	0x00030d30
   20ce4:	00030d0e 	.word	0x00030d0e
   20ce8:	0002b939 	.word	0x0002b939
   20cec:	0002f575 	.word	0x0002f575

00020cf0 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   20cf0:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   20cf2:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   20cf6:	7b42      	ldrb	r2, [r0, #13]
   20cf8:	2b00      	cmp	r3, #0
   20cfa:	db38      	blt.n	20d6e <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20cfc:	06d3      	lsls	r3, r2, #27
   20cfe:	d136      	bne.n	20d6e <ready_thread+0x7e>
	return node->next != NULL;
   20d00:	6983      	ldr	r3, [r0, #24]
   20d02:	2b00      	cmp	r3, #0
   20d04:	d133      	bne.n	20d6e <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   20d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20d0a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20d0c:	4a18      	ldr	r2, [pc, #96]	; (20d70 <ready_thread+0x80>)
   20d0e:	4290      	cmp	r0, r2
   20d10:	d109      	bne.n	20d26 <ready_thread+0x36>
   20d12:	4918      	ldr	r1, [pc, #96]	; (20d74 <ready_thread+0x84>)
   20d14:	4818      	ldr	r0, [pc, #96]	; (20d78 <ready_thread+0x88>)
   20d16:	23ba      	movs	r3, #186	; 0xba
   20d18:	4a18      	ldr	r2, [pc, #96]	; (20d7c <ready_thread+0x8c>)
   20d1a:	f004 f8dc 	bl	24ed6 <assert_print>
   20d1e:	21ba      	movs	r1, #186	; 0xba
   20d20:	4816      	ldr	r0, [pc, #88]	; (20d7c <ready_thread+0x8c>)
   20d22:	f004 f8d1 	bl	24ec8 <assert_post_action>
	return list->head == list;
   20d26:	4916      	ldr	r1, [pc, #88]	; (20d80 <ready_thread+0x90>)
   20d28:	460a      	mov	r2, r1
   20d2a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d2e:	4294      	cmp	r4, r2
   20d30:	bf18      	it	ne
   20d32:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   20d34:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20d36:	b923      	cbnz	r3, 20d42 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   20d38:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   20d3c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   20d3e:	6248      	str	r0, [r1, #36]	; 0x24
}
   20d40:	e00c      	b.n	20d5c <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   20d42:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   20d46:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   20d4a:	42b5      	cmp	r5, r6
   20d4c:	d00b      	beq.n	20d66 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20d4e:	42ae      	cmp	r6, r5
   20d50:	dd09      	ble.n	20d66 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   20d52:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   20d54:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   20d58:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   20d5a:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   20d5c:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   20d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   20d62:	f7ff bf91 	b.w	20c88 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20d66:	42a3      	cmp	r3, r4
   20d68:	d0e6      	beq.n	20d38 <ready_thread+0x48>
   20d6a:	681b      	ldr	r3, [r3, #0]
   20d6c:	e7e3      	b.n	20d36 <ready_thread+0x46>
}
   20d6e:	bd70      	pop	{r4, r5, r6, pc}
   20d70:	20009c08 	.word	0x20009c08
   20d74:	00030d57 	.word	0x00030d57
   20d78:	0002b939 	.word	0x0002b939
   20d7c:	00030d0e 	.word	0x00030d0e
   20d80:	20021504 	.word	0x20021504

00020d84 <k_sched_time_slice_set>:
{
   20d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d86:	4604      	mov	r4, r0
   20d88:	460d      	mov	r5, r1
	__asm__ volatile(
   20d8a:	f04f 0320 	mov.w	r3, #32
   20d8e:	f3ef 8711 	mrs	r7, BASEPRI
   20d92:	f383 8812 	msr	BASEPRI_MAX, r3
   20d96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d9a:	4822      	ldr	r0, [pc, #136]	; (20e24 <k_sched_time_slice_set+0xa0>)
   20d9c:	f7fe fe18 	bl	1f9d0 <z_spin_lock_valid>
   20da0:	b968      	cbnz	r0, 20dbe <k_sched_time_slice_set+0x3a>
   20da2:	2394      	movs	r3, #148	; 0x94
   20da4:	4a20      	ldr	r2, [pc, #128]	; (20e28 <k_sched_time_slice_set+0xa4>)
   20da6:	4921      	ldr	r1, [pc, #132]	; (20e2c <k_sched_time_slice_set+0xa8>)
   20da8:	4821      	ldr	r0, [pc, #132]	; (20e30 <k_sched_time_slice_set+0xac>)
   20daa:	f004 f894 	bl	24ed6 <assert_print>
   20dae:	491d      	ldr	r1, [pc, #116]	; (20e24 <k_sched_time_slice_set+0xa0>)
   20db0:	4820      	ldr	r0, [pc, #128]	; (20e34 <k_sched_time_slice_set+0xb0>)
   20db2:	f004 f890 	bl	24ed6 <assert_print>
   20db6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20db8:	481b      	ldr	r0, [pc, #108]	; (20e28 <k_sched_time_slice_set+0xa4>)
   20dba:	f004 f885 	bl	24ec8 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   20dbe:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   20dc0:	4818      	ldr	r0, [pc, #96]	; (20e24 <k_sched_time_slice_set+0xa0>)
   20dc2:	f7fe fe21 	bl	1fa08 <z_spin_lock_set_owner>
   20dc6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   20dca:	f240 30e7 	movw	r0, #999	; 0x3e7
   20dce:	4631      	mov	r1, r6
   20dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20dd4:	2300      	movs	r3, #0
   20dd6:	fbe4 010c 	umlal	r0, r1, r4, ip
   20dda:	f7e8 f889 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   20dde:	42b4      	cmp	r4, r6
   20de0:	dd02      	ble.n	20de8 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   20de2:	2802      	cmp	r0, #2
   20de4:	bfb8      	it	lt
   20de6:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   20de8:	4a13      	ldr	r2, [pc, #76]	; (20e38 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   20dea:	4b14      	ldr	r3, [pc, #80]	; (20e3c <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   20dec:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   20dee:	4a14      	ldr	r2, [pc, #80]	; (20e40 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   20df0:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   20df2:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   20df4:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   20df6:	f7ff ff33 	bl	20c60 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dfa:	480a      	ldr	r0, [pc, #40]	; (20e24 <k_sched_time_slice_set+0xa0>)
   20dfc:	f7fe fdf6 	bl	1f9ec <z_spin_unlock_valid>
   20e00:	b958      	cbnz	r0, 20e1a <k_sched_time_slice_set+0x96>
   20e02:	23c2      	movs	r3, #194	; 0xc2
   20e04:	4a08      	ldr	r2, [pc, #32]	; (20e28 <k_sched_time_slice_set+0xa4>)
   20e06:	490f      	ldr	r1, [pc, #60]	; (20e44 <k_sched_time_slice_set+0xc0>)
   20e08:	4809      	ldr	r0, [pc, #36]	; (20e30 <k_sched_time_slice_set+0xac>)
   20e0a:	f004 f864 	bl	24ed6 <assert_print>
   20e0e:	4905      	ldr	r1, [pc, #20]	; (20e24 <k_sched_time_slice_set+0xa0>)
   20e10:	480d      	ldr	r0, [pc, #52]	; (20e48 <k_sched_time_slice_set+0xc4>)
   20e12:	f004 f860 	bl	24ed6 <assert_print>
   20e16:	21c2      	movs	r1, #194	; 0xc2
   20e18:	e7ce      	b.n	20db8 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   20e1a:	f387 8811 	msr	BASEPRI, r7
   20e1e:	f3bf 8f6f 	isb	sy
}
   20e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20e24:	2002154c 	.word	0x2002154c
   20e28:	0002c76f 	.word	0x0002c76f
   20e2c:	0002c7c8 	.word	0x0002c7c8
   20e30:	0002b939 	.word	0x0002b939
   20e34:	0002c7dd 	.word	0x0002c7dd
   20e38:	20021548 	.word	0x20021548
   20e3c:	20021504 	.word	0x20021504
   20e40:	20021544 	.word	0x20021544
   20e44:	0002c79c 	.word	0x0002c79c
   20e48:	0002c7b3 	.word	0x0002c7b3

00020e4c <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   20e4c:	b538      	push	{r3, r4, r5, lr}
   20e4e:	4604      	mov	r4, r0
	__asm__ volatile(
   20e50:	f04f 0320 	mov.w	r3, #32
   20e54:	f3ef 8511 	mrs	r5, BASEPRI
   20e58:	f383 8812 	msr	BASEPRI_MAX, r3
   20e5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e60:	4816      	ldr	r0, [pc, #88]	; (20ebc <z_ready_thread+0x70>)
   20e62:	f7fe fdb5 	bl	1f9d0 <z_spin_lock_valid>
   20e66:	b968      	cbnz	r0, 20e84 <z_ready_thread+0x38>
   20e68:	2394      	movs	r3, #148	; 0x94
   20e6a:	4a15      	ldr	r2, [pc, #84]	; (20ec0 <z_ready_thread+0x74>)
   20e6c:	4915      	ldr	r1, [pc, #84]	; (20ec4 <z_ready_thread+0x78>)
   20e6e:	4816      	ldr	r0, [pc, #88]	; (20ec8 <z_ready_thread+0x7c>)
   20e70:	f004 f831 	bl	24ed6 <assert_print>
   20e74:	4911      	ldr	r1, [pc, #68]	; (20ebc <z_ready_thread+0x70>)
   20e76:	4815      	ldr	r0, [pc, #84]	; (20ecc <z_ready_thread+0x80>)
   20e78:	f004 f82d 	bl	24ed6 <assert_print>
   20e7c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e7e:	4810      	ldr	r0, [pc, #64]	; (20ec0 <z_ready_thread+0x74>)
   20e80:	f004 f822 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   20e84:	480d      	ldr	r0, [pc, #52]	; (20ebc <z_ready_thread+0x70>)
   20e86:	f7fe fdbf 	bl	1fa08 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   20e8a:	4620      	mov	r0, r4
   20e8c:	f7ff ff30 	bl	20cf0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e90:	480a      	ldr	r0, [pc, #40]	; (20ebc <z_ready_thread+0x70>)
   20e92:	f7fe fdab 	bl	1f9ec <z_spin_unlock_valid>
   20e96:	b958      	cbnz	r0, 20eb0 <z_ready_thread+0x64>
   20e98:	23c2      	movs	r3, #194	; 0xc2
   20e9a:	4a09      	ldr	r2, [pc, #36]	; (20ec0 <z_ready_thread+0x74>)
   20e9c:	490c      	ldr	r1, [pc, #48]	; (20ed0 <z_ready_thread+0x84>)
   20e9e:	480a      	ldr	r0, [pc, #40]	; (20ec8 <z_ready_thread+0x7c>)
   20ea0:	f004 f819 	bl	24ed6 <assert_print>
   20ea4:	4905      	ldr	r1, [pc, #20]	; (20ebc <z_ready_thread+0x70>)
   20ea6:	480b      	ldr	r0, [pc, #44]	; (20ed4 <z_ready_thread+0x88>)
   20ea8:	f004 f815 	bl	24ed6 <assert_print>
   20eac:	21c2      	movs	r1, #194	; 0xc2
   20eae:	e7e6      	b.n	20e7e <z_ready_thread+0x32>
	__asm__ volatile(
   20eb0:	f385 8811 	msr	BASEPRI, r5
   20eb4:	f3bf 8f6f 	isb	sy
		}
	}
}
   20eb8:	bd38      	pop	{r3, r4, r5, pc}
   20eba:	bf00      	nop
   20ebc:	2002154c 	.word	0x2002154c
   20ec0:	0002c76f 	.word	0x0002c76f
   20ec4:	0002c7c8 	.word	0x0002c7c8
   20ec8:	0002b939 	.word	0x0002b939
   20ecc:	0002c7dd 	.word	0x0002c7dd
   20ed0:	0002c79c 	.word	0x0002c79c
   20ed4:	0002c7b3 	.word	0x0002c7b3

00020ed8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   20ed8:	b538      	push	{r3, r4, r5, lr}
   20eda:	4604      	mov	r4, r0
	__asm__ volatile(
   20edc:	f04f 0320 	mov.w	r3, #32
   20ee0:	f3ef 8511 	mrs	r5, BASEPRI
   20ee4:	f383 8812 	msr	BASEPRI_MAX, r3
   20ee8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20eec:	4816      	ldr	r0, [pc, #88]	; (20f48 <z_unpend_thread_no_timeout+0x70>)
   20eee:	f7fe fd6f 	bl	1f9d0 <z_spin_lock_valid>
   20ef2:	b968      	cbnz	r0, 20f10 <z_unpend_thread_no_timeout+0x38>
   20ef4:	2394      	movs	r3, #148	; 0x94
   20ef6:	4a15      	ldr	r2, [pc, #84]	; (20f4c <z_unpend_thread_no_timeout+0x74>)
   20ef8:	4915      	ldr	r1, [pc, #84]	; (20f50 <z_unpend_thread_no_timeout+0x78>)
   20efa:	4816      	ldr	r0, [pc, #88]	; (20f54 <z_unpend_thread_no_timeout+0x7c>)
   20efc:	f003 ffeb 	bl	24ed6 <assert_print>
   20f00:	4911      	ldr	r1, [pc, #68]	; (20f48 <z_unpend_thread_no_timeout+0x70>)
   20f02:	4815      	ldr	r0, [pc, #84]	; (20f58 <z_unpend_thread_no_timeout+0x80>)
   20f04:	f003 ffe7 	bl	24ed6 <assert_print>
   20f08:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f0a:	4810      	ldr	r0, [pc, #64]	; (20f4c <z_unpend_thread_no_timeout+0x74>)
   20f0c:	f003 ffdc 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   20f10:	480d      	ldr	r0, [pc, #52]	; (20f48 <z_unpend_thread_no_timeout+0x70>)
   20f12:	f7fe fd79 	bl	1fa08 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   20f16:	4620      	mov	r0, r4
   20f18:	f000 fc62 	bl	217e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f1c:	480a      	ldr	r0, [pc, #40]	; (20f48 <z_unpend_thread_no_timeout+0x70>)
   20f1e:	f7fe fd65 	bl	1f9ec <z_spin_unlock_valid>
   20f22:	b958      	cbnz	r0, 20f3c <z_unpend_thread_no_timeout+0x64>
   20f24:	23c2      	movs	r3, #194	; 0xc2
   20f26:	4a09      	ldr	r2, [pc, #36]	; (20f4c <z_unpend_thread_no_timeout+0x74>)
   20f28:	490c      	ldr	r1, [pc, #48]	; (20f5c <z_unpend_thread_no_timeout+0x84>)
   20f2a:	480a      	ldr	r0, [pc, #40]	; (20f54 <z_unpend_thread_no_timeout+0x7c>)
   20f2c:	f003 ffd3 	bl	24ed6 <assert_print>
   20f30:	4905      	ldr	r1, [pc, #20]	; (20f48 <z_unpend_thread_no_timeout+0x70>)
   20f32:	480b      	ldr	r0, [pc, #44]	; (20f60 <z_unpend_thread_no_timeout+0x88>)
   20f34:	f003 ffcf 	bl	24ed6 <assert_print>
   20f38:	21c2      	movs	r1, #194	; 0xc2
   20f3a:	e7e6      	b.n	20f0a <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   20f3c:	f385 8811 	msr	BASEPRI, r5
   20f40:	f3bf 8f6f 	isb	sy
	}
}
   20f44:	bd38      	pop	{r3, r4, r5, pc}
   20f46:	bf00      	nop
   20f48:	2002154c 	.word	0x2002154c
   20f4c:	0002c76f 	.word	0x0002c76f
   20f50:	0002c7c8 	.word	0x0002c7c8
   20f54:	0002b939 	.word	0x0002b939
   20f58:	0002c7dd 	.word	0x0002c7dd
   20f5c:	0002c79c 	.word	0x0002c79c
   20f60:	0002c7b3 	.word	0x0002c7b3

00020f64 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20f64:	b570      	push	{r4, r5, r6, lr}
   20f66:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20f68:	460d      	mov	r5, r1
   20f6a:	b9e9      	cbnz	r1, 20fa8 <z_reschedule+0x44>
   20f6c:	f3ef 8605 	mrs	r6, IPSR
   20f70:	b9d6      	cbnz	r6, 20fa8 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   20f72:	4b18      	ldr	r3, [pc, #96]	; (20fd4 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   20f74:	69da      	ldr	r2, [r3, #28]
   20f76:	689b      	ldr	r3, [r3, #8]
   20f78:	429a      	cmp	r2, r3
   20f7a:	d015      	beq.n	20fa8 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f7c:	f7fe fd36 	bl	1f9ec <z_spin_unlock_valid>
   20f80:	b968      	cbnz	r0, 20f9e <z_reschedule+0x3a>
   20f82:	23e1      	movs	r3, #225	; 0xe1
   20f84:	4a14      	ldr	r2, [pc, #80]	; (20fd8 <z_reschedule+0x74>)
   20f86:	4915      	ldr	r1, [pc, #84]	; (20fdc <z_reschedule+0x78>)
   20f88:	4815      	ldr	r0, [pc, #84]	; (20fe0 <z_reschedule+0x7c>)
   20f8a:	f003 ffa4 	bl	24ed6 <assert_print>
   20f8e:	4621      	mov	r1, r4
   20f90:	4814      	ldr	r0, [pc, #80]	; (20fe4 <z_reschedule+0x80>)
   20f92:	f003 ffa0 	bl	24ed6 <assert_print>
   20f96:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f98:	480f      	ldr	r0, [pc, #60]	; (20fd8 <z_reschedule+0x74>)
   20f9a:	f003 ff95 	bl	24ec8 <assert_post_action>
	ret = arch_swap(key);
   20f9e:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   20fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20fa4:	f7ef b9c6 	b.w	10334 <arch_swap>
   20fa8:	4620      	mov	r0, r4
   20faa:	f7fe fd1f 	bl	1f9ec <z_spin_unlock_valid>
   20fae:	b958      	cbnz	r0, 20fc8 <z_reschedule+0x64>
   20fb0:	23c2      	movs	r3, #194	; 0xc2
   20fb2:	4a09      	ldr	r2, [pc, #36]	; (20fd8 <z_reschedule+0x74>)
   20fb4:	4909      	ldr	r1, [pc, #36]	; (20fdc <z_reschedule+0x78>)
   20fb6:	480a      	ldr	r0, [pc, #40]	; (20fe0 <z_reschedule+0x7c>)
   20fb8:	f003 ff8d 	bl	24ed6 <assert_print>
   20fbc:	4621      	mov	r1, r4
   20fbe:	4809      	ldr	r0, [pc, #36]	; (20fe4 <z_reschedule+0x80>)
   20fc0:	f003 ff89 	bl	24ed6 <assert_print>
   20fc4:	21c2      	movs	r1, #194	; 0xc2
   20fc6:	e7e7      	b.n	20f98 <z_reschedule+0x34>
   20fc8:	f385 8811 	msr	BASEPRI, r5
   20fcc:	f3bf 8f6f 	isb	sy
   20fd0:	bd70      	pop	{r4, r5, r6, pc}
   20fd2:	bf00      	nop
   20fd4:	20021504 	.word	0x20021504
   20fd8:	0002c76f 	.word	0x0002c76f
   20fdc:	0002c79c 	.word	0x0002c79c
   20fe0:	0002b939 	.word	0x0002b939
   20fe4:	0002c7b3 	.word	0x0002c7b3

00020fe8 <z_sched_start>:
{
   20fe8:	b538      	push	{r3, r4, r5, lr}
   20fea:	4604      	mov	r4, r0
	__asm__ volatile(
   20fec:	f04f 0320 	mov.w	r3, #32
   20ff0:	f3ef 8511 	mrs	r5, BASEPRI
   20ff4:	f383 8812 	msr	BASEPRI_MAX, r3
   20ff8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ffc:	481c      	ldr	r0, [pc, #112]	; (21070 <z_sched_start+0x88>)
   20ffe:	f7fe fce7 	bl	1f9d0 <z_spin_lock_valid>
   21002:	b968      	cbnz	r0, 21020 <z_sched_start+0x38>
   21004:	2394      	movs	r3, #148	; 0x94
   21006:	4a1b      	ldr	r2, [pc, #108]	; (21074 <z_sched_start+0x8c>)
   21008:	491b      	ldr	r1, [pc, #108]	; (21078 <z_sched_start+0x90>)
   2100a:	481c      	ldr	r0, [pc, #112]	; (2107c <z_sched_start+0x94>)
   2100c:	f003 ff63 	bl	24ed6 <assert_print>
   21010:	4917      	ldr	r1, [pc, #92]	; (21070 <z_sched_start+0x88>)
   21012:	481b      	ldr	r0, [pc, #108]	; (21080 <z_sched_start+0x98>)
   21014:	f003 ff5f 	bl	24ed6 <assert_print>
   21018:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2101a:	4816      	ldr	r0, [pc, #88]	; (21074 <z_sched_start+0x8c>)
   2101c:	f003 ff54 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21020:	4813      	ldr	r0, [pc, #76]	; (21070 <z_sched_start+0x88>)
   21022:	f7fe fcf1 	bl	1fa08 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21026:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21028:	075a      	lsls	r2, r3, #29
   2102a:	d414      	bmi.n	21056 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2102c:	4810      	ldr	r0, [pc, #64]	; (21070 <z_sched_start+0x88>)
   2102e:	f7fe fcdd 	bl	1f9ec <z_spin_unlock_valid>
   21032:	b958      	cbnz	r0, 2104c <z_sched_start+0x64>
   21034:	23c2      	movs	r3, #194	; 0xc2
   21036:	4a0f      	ldr	r2, [pc, #60]	; (21074 <z_sched_start+0x8c>)
   21038:	4912      	ldr	r1, [pc, #72]	; (21084 <z_sched_start+0x9c>)
   2103a:	4810      	ldr	r0, [pc, #64]	; (2107c <z_sched_start+0x94>)
   2103c:	f003 ff4b 	bl	24ed6 <assert_print>
   21040:	490b      	ldr	r1, [pc, #44]	; (21070 <z_sched_start+0x88>)
   21042:	4811      	ldr	r0, [pc, #68]	; (21088 <z_sched_start+0xa0>)
   21044:	f003 ff47 	bl	24ed6 <assert_print>
   21048:	21c2      	movs	r1, #194	; 0xc2
   2104a:	e7e6      	b.n	2101a <z_sched_start+0x32>
	__asm__ volatile(
   2104c:	f385 8811 	msr	BASEPRI, r5
   21050:	f3bf 8f6f 	isb	sy
}
   21054:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21056:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2105a:	4620      	mov	r0, r4
   2105c:	7363      	strb	r3, [r4, #13]
   2105e:	f7ff fe47 	bl	20cf0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21062:	4629      	mov	r1, r5
}
   21064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   21068:	4801      	ldr	r0, [pc, #4]	; (21070 <z_sched_start+0x88>)
   2106a:	f7ff bf7b 	b.w	20f64 <z_reschedule>
   2106e:	bf00      	nop
   21070:	2002154c 	.word	0x2002154c
   21074:	0002c76f 	.word	0x0002c76f
   21078:	0002c7c8 	.word	0x0002c7c8
   2107c:	0002b939 	.word	0x0002b939
   21080:	0002c7dd 	.word	0x0002c7dd
   21084:	0002c79c 	.word	0x0002c79c
   21088:	0002c7b3 	.word	0x0002c7b3

0002108c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   2108c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2108e:	f04f 0320 	mov.w	r3, #32
   21092:	f3ef 8411 	mrs	r4, BASEPRI
   21096:	f383 8812 	msr	BASEPRI_MAX, r3
   2109a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2109e:	4825      	ldr	r0, [pc, #148]	; (21134 <k_sched_lock+0xa8>)
   210a0:	f7fe fc96 	bl	1f9d0 <z_spin_lock_valid>
   210a4:	b960      	cbnz	r0, 210c0 <k_sched_lock+0x34>
   210a6:	2394      	movs	r3, #148	; 0x94
   210a8:	4a23      	ldr	r2, [pc, #140]	; (21138 <k_sched_lock+0xac>)
   210aa:	4924      	ldr	r1, [pc, #144]	; (2113c <k_sched_lock+0xb0>)
   210ac:	4824      	ldr	r0, [pc, #144]	; (21140 <k_sched_lock+0xb4>)
   210ae:	f003 ff12 	bl	24ed6 <assert_print>
   210b2:	4920      	ldr	r1, [pc, #128]	; (21134 <k_sched_lock+0xa8>)
   210b4:	4823      	ldr	r0, [pc, #140]	; (21144 <k_sched_lock+0xb8>)
   210b6:	f003 ff0e 	bl	24ed6 <assert_print>
   210ba:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210bc:	481e      	ldr	r0, [pc, #120]	; (21138 <k_sched_lock+0xac>)
   210be:	e010      	b.n	210e2 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   210c0:	481c      	ldr	r0, [pc, #112]	; (21134 <k_sched_lock+0xa8>)
   210c2:	f7fe fca1 	bl	1fa08 <z_spin_lock_set_owner>
   210c6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   210ca:	b163      	cbz	r3, 210e6 <k_sched_lock+0x5a>
   210cc:	491e      	ldr	r1, [pc, #120]	; (21148 <k_sched_lock+0xbc>)
   210ce:	23fd      	movs	r3, #253	; 0xfd
   210d0:	4a1e      	ldr	r2, [pc, #120]	; (2114c <k_sched_lock+0xc0>)
   210d2:	481b      	ldr	r0, [pc, #108]	; (21140 <k_sched_lock+0xb4>)
   210d4:	f003 feff 	bl	24ed6 <assert_print>
   210d8:	481d      	ldr	r0, [pc, #116]	; (21150 <k_sched_lock+0xc4>)
   210da:	f003 fefc 	bl	24ed6 <assert_print>
   210de:	21fd      	movs	r1, #253	; 0xfd
   210e0:	481a      	ldr	r0, [pc, #104]	; (2114c <k_sched_lock+0xc0>)
   210e2:	f003 fef1 	bl	24ec8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   210e6:	4b1b      	ldr	r3, [pc, #108]	; (21154 <k_sched_lock+0xc8>)
   210e8:	689a      	ldr	r2, [r3, #8]
   210ea:	7bd3      	ldrb	r3, [r2, #15]
   210ec:	2b01      	cmp	r3, #1
   210ee:	d10a      	bne.n	21106 <k_sched_lock+0x7a>
   210f0:	4919      	ldr	r1, [pc, #100]	; (21158 <k_sched_lock+0xcc>)
   210f2:	23fe      	movs	r3, #254	; 0xfe
   210f4:	4a15      	ldr	r2, [pc, #84]	; (2114c <k_sched_lock+0xc0>)
   210f6:	4812      	ldr	r0, [pc, #72]	; (21140 <k_sched_lock+0xb4>)
   210f8:	f003 feed 	bl	24ed6 <assert_print>
   210fc:	4814      	ldr	r0, [pc, #80]	; (21150 <k_sched_lock+0xc4>)
   210fe:	f003 feea 	bl	24ed6 <assert_print>
   21102:	21fe      	movs	r1, #254	; 0xfe
   21104:	e7ec      	b.n	210e0 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   21106:	3b01      	subs	r3, #1
   21108:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2110a:	480a      	ldr	r0, [pc, #40]	; (21134 <k_sched_lock+0xa8>)
   2110c:	f7fe fc6e 	bl	1f9ec <z_spin_unlock_valid>
   21110:	b958      	cbnz	r0, 2112a <k_sched_lock+0x9e>
   21112:	23c2      	movs	r3, #194	; 0xc2
   21114:	4a08      	ldr	r2, [pc, #32]	; (21138 <k_sched_lock+0xac>)
   21116:	4911      	ldr	r1, [pc, #68]	; (2115c <k_sched_lock+0xd0>)
   21118:	4809      	ldr	r0, [pc, #36]	; (21140 <k_sched_lock+0xb4>)
   2111a:	f003 fedc 	bl	24ed6 <assert_print>
   2111e:	4905      	ldr	r1, [pc, #20]	; (21134 <k_sched_lock+0xa8>)
   21120:	480f      	ldr	r0, [pc, #60]	; (21160 <k_sched_lock+0xd4>)
   21122:	f003 fed8 	bl	24ed6 <assert_print>
   21126:	21c2      	movs	r1, #194	; 0xc2
   21128:	e7c8      	b.n	210bc <k_sched_lock+0x30>
	__asm__ volatile(
   2112a:	f384 8811 	msr	BASEPRI, r4
   2112e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21132:	bd10      	pop	{r4, pc}
   21134:	2002154c 	.word	0x2002154c
   21138:	0002c76f 	.word	0x0002c76f
   2113c:	0002c7c8 	.word	0x0002c7c8
   21140:	0002b939 	.word	0x0002b939
   21144:	0002c7dd 	.word	0x0002c7dd
   21148:	00030aa1 	.word	0x00030aa1
   2114c:	00030d78 	.word	0x00030d78
   21150:	0002f575 	.word	0x0002f575
   21154:	20021504 	.word	0x20021504
   21158:	00030da3 	.word	0x00030da3
   2115c:	0002c79c 	.word	0x0002c79c
   21160:	0002c7b3 	.word	0x0002c7b3

00021164 <k_sched_unlock>:

void k_sched_unlock(void)
{
   21164:	b510      	push	{r4, lr}
	__asm__ volatile(
   21166:	f04f 0320 	mov.w	r3, #32
   2116a:	f3ef 8411 	mrs	r4, BASEPRI
   2116e:	f383 8812 	msr	BASEPRI_MAX, r3
   21172:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21176:	4829      	ldr	r0, [pc, #164]	; (2121c <k_sched_unlock+0xb8>)
   21178:	f7fe fc2a 	bl	1f9d0 <z_spin_lock_valid>
   2117c:	b960      	cbnz	r0, 21198 <k_sched_unlock+0x34>
   2117e:	2394      	movs	r3, #148	; 0x94
   21180:	4a27      	ldr	r2, [pc, #156]	; (21220 <k_sched_unlock+0xbc>)
   21182:	4928      	ldr	r1, [pc, #160]	; (21224 <k_sched_unlock+0xc0>)
   21184:	4828      	ldr	r0, [pc, #160]	; (21228 <k_sched_unlock+0xc4>)
   21186:	f003 fea6 	bl	24ed6 <assert_print>
   2118a:	4924      	ldr	r1, [pc, #144]	; (2121c <k_sched_unlock+0xb8>)
   2118c:	4827      	ldr	r0, [pc, #156]	; (2122c <k_sched_unlock+0xc8>)
   2118e:	f003 fea2 	bl	24ed6 <assert_print>
   21192:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21194:	4822      	ldr	r0, [pc, #136]	; (21220 <k_sched_unlock+0xbc>)
   21196:	e013      	b.n	211c0 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   21198:	4820      	ldr	r0, [pc, #128]	; (2121c <k_sched_unlock+0xb8>)
   2119a:	f7fe fc35 	bl	1fa08 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   2119e:	4b24      	ldr	r3, [pc, #144]	; (21230 <k_sched_unlock+0xcc>)
   211a0:	689a      	ldr	r2, [r3, #8]
   211a2:	7bd3      	ldrb	r3, [r2, #15]
   211a4:	b973      	cbnz	r3, 211c4 <k_sched_unlock+0x60>
   211a6:	4923      	ldr	r1, [pc, #140]	; (21234 <k_sched_unlock+0xd0>)
   211a8:	f240 33e7 	movw	r3, #999	; 0x3e7
   211ac:	4a22      	ldr	r2, [pc, #136]	; (21238 <k_sched_unlock+0xd4>)
   211ae:	481e      	ldr	r0, [pc, #120]	; (21228 <k_sched_unlock+0xc4>)
   211b0:	f003 fe91 	bl	24ed6 <assert_print>
   211b4:	4821      	ldr	r0, [pc, #132]	; (2123c <k_sched_unlock+0xd8>)
   211b6:	f003 fe8e 	bl	24ed6 <assert_print>
   211ba:	f240 31e7 	movw	r1, #999	; 0x3e7
   211be:	481e      	ldr	r0, [pc, #120]	; (21238 <k_sched_unlock+0xd4>)
   211c0:	f003 fe82 	bl	24ec8 <assert_post_action>
   211c4:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   211c8:	b160      	cbz	r0, 211e4 <k_sched_unlock+0x80>
   211ca:	491d      	ldr	r1, [pc, #116]	; (21240 <k_sched_unlock+0xdc>)
   211cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   211d0:	4a19      	ldr	r2, [pc, #100]	; (21238 <k_sched_unlock+0xd4>)
   211d2:	4815      	ldr	r0, [pc, #84]	; (21228 <k_sched_unlock+0xc4>)
   211d4:	f003 fe7f 	bl	24ed6 <assert_print>
   211d8:	4818      	ldr	r0, [pc, #96]	; (2123c <k_sched_unlock+0xd8>)
   211da:	f003 fe7c 	bl	24ed6 <assert_print>
   211de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   211e2:	e7ec      	b.n	211be <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   211e4:	3301      	adds	r3, #1
   211e6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   211e8:	f7ff fd4e 	bl	20c88 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211ec:	480b      	ldr	r0, [pc, #44]	; (2121c <k_sched_unlock+0xb8>)
   211ee:	f7fe fbfd 	bl	1f9ec <z_spin_unlock_valid>
   211f2:	b958      	cbnz	r0, 2120c <k_sched_unlock+0xa8>
   211f4:	23c2      	movs	r3, #194	; 0xc2
   211f6:	4a0a      	ldr	r2, [pc, #40]	; (21220 <k_sched_unlock+0xbc>)
   211f8:	4912      	ldr	r1, [pc, #72]	; (21244 <k_sched_unlock+0xe0>)
   211fa:	480b      	ldr	r0, [pc, #44]	; (21228 <k_sched_unlock+0xc4>)
   211fc:	f003 fe6b 	bl	24ed6 <assert_print>
   21200:	4906      	ldr	r1, [pc, #24]	; (2121c <k_sched_unlock+0xb8>)
   21202:	4811      	ldr	r0, [pc, #68]	; (21248 <k_sched_unlock+0xe4>)
   21204:	f003 fe67 	bl	24ed6 <assert_print>
   21208:	21c2      	movs	r1, #194	; 0xc2
   2120a:	e7c3      	b.n	21194 <k_sched_unlock+0x30>
	__asm__ volatile(
   2120c:	f384 8811 	msr	BASEPRI, r4
   21210:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   21214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   21218:	f008 ba9a 	b.w	29750 <z_reschedule_unlocked>
   2121c:	2002154c 	.word	0x2002154c
   21220:	0002c76f 	.word	0x0002c76f
   21224:	0002c7c8 	.word	0x0002c7c8
   21228:	0002b939 	.word	0x0002b939
   2122c:	0002c7dd 	.word	0x0002c7dd
   21230:	20021504 	.word	0x20021504
   21234:	00030dd4 	.word	0x00030dd4
   21238:	00030d0e 	.word	0x00030d0e
   2123c:	0002f575 	.word	0x0002f575
   21240:	00030aa1 	.word	0x00030aa1
   21244:	0002c79c 	.word	0x0002c79c
   21248:	0002c7b3 	.word	0x0002c7b3

0002124c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   2124c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2124e:	4b0b      	ldr	r3, [pc, #44]	; (2127c <z_priq_dumb_remove+0x30>)
   21250:	4299      	cmp	r1, r3
   21252:	d10b      	bne.n	2126c <z_priq_dumb_remove+0x20>
   21254:	490a      	ldr	r1, [pc, #40]	; (21280 <z_priq_dumb_remove+0x34>)
   21256:	480b      	ldr	r0, [pc, #44]	; (21284 <z_priq_dumb_remove+0x38>)
   21258:	f240 4373 	movw	r3, #1139	; 0x473
   2125c:	4a0a      	ldr	r2, [pc, #40]	; (21288 <z_priq_dumb_remove+0x3c>)
   2125e:	f003 fe3a 	bl	24ed6 <assert_print>
   21262:	f240 4173 	movw	r1, #1139	; 0x473
   21266:	4808      	ldr	r0, [pc, #32]	; (21288 <z_priq_dumb_remove+0x3c>)
   21268:	f003 fe2e 	bl	24ec8 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2126c:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   21270:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21272:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21274:	2300      	movs	r3, #0
	node->prev = NULL;
   21276:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2127a:	bd08      	pop	{r3, pc}
   2127c:	20009c08 	.word	0x20009c08
   21280:	00030d57 	.word	0x00030d57
   21284:	0002b939 	.word	0x0002b939
   21288:	00030d0e 	.word	0x00030d0e

0002128c <move_thread_to_end_of_prio_q>:
{
   2128c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2128e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   21292:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21294:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   21296:	7b43      	ldrb	r3, [r0, #13]
   21298:	da06      	bge.n	212a8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2129a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2129e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   212a0:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   212a2:	481d      	ldr	r0, [pc, #116]	; (21318 <move_thread_to_end_of_prio_q+0x8c>)
   212a4:	f7ff ffd2 	bl	2124c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   212a8:	7b63      	ldrb	r3, [r4, #13]
   212aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   212ae:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   212b0:	4b1a      	ldr	r3, [pc, #104]	; (2131c <move_thread_to_end_of_prio_q+0x90>)
   212b2:	429c      	cmp	r4, r3
   212b4:	d109      	bne.n	212ca <move_thread_to_end_of_prio_q+0x3e>
   212b6:	491a      	ldr	r1, [pc, #104]	; (21320 <move_thread_to_end_of_prio_q+0x94>)
   212b8:	481a      	ldr	r0, [pc, #104]	; (21324 <move_thread_to_end_of_prio_q+0x98>)
   212ba:	23ba      	movs	r3, #186	; 0xba
   212bc:	4a1a      	ldr	r2, [pc, #104]	; (21328 <move_thread_to_end_of_prio_q+0x9c>)
   212be:	f003 fe0a 	bl	24ed6 <assert_print>
   212c2:	21ba      	movs	r1, #186	; 0xba
   212c4:	4818      	ldr	r0, [pc, #96]	; (21328 <move_thread_to_end_of_prio_q+0x9c>)
   212c6:	f003 fdff 	bl	24ec8 <assert_post_action>
	return list->head == list;
   212ca:	4a18      	ldr	r2, [pc, #96]	; (2132c <move_thread_to_end_of_prio_q+0xa0>)
   212cc:	4611      	mov	r1, r2
   212ce:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   212d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   212d4:	428b      	cmp	r3, r1
   212d6:	bf08      	it	eq
   212d8:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   212da:	b923      	cbnz	r3, 212e6 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   212dc:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   212e0:	6004      	str	r4, [r0, #0]
	list->tail = node;
   212e2:	6254      	str	r4, [r2, #36]	; 0x24
}
   212e4:	e00c      	b.n	21300 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   212e6:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   212ea:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   212ee:	42b5      	cmp	r5, r6
   212f0:	d00e      	beq.n	21310 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   212f2:	42ae      	cmp	r6, r5
   212f4:	dd0c      	ble.n	21310 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   212f6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   212f8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   212fc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   212fe:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   21300:	6890      	ldr	r0, [r2, #8]
   21302:	1b03      	subs	r3, r0, r4
   21304:	4258      	negs	r0, r3
   21306:	4158      	adcs	r0, r3
}
   21308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2130c:	f7ff bcbc 	b.w	20c88 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21310:	4298      	cmp	r0, r3
   21312:	d0e3      	beq.n	212dc <move_thread_to_end_of_prio_q+0x50>
   21314:	681b      	ldr	r3, [r3, #0]
   21316:	e7e0      	b.n	212da <move_thread_to_end_of_prio_q+0x4e>
   21318:	20021524 	.word	0x20021524
   2131c:	20009c08 	.word	0x20009c08
   21320:	00030d57 	.word	0x00030d57
   21324:	0002b939 	.word	0x0002b939
   21328:	00030d0e 	.word	0x00030d0e
   2132c:	20021504 	.word	0x20021504

00021330 <z_time_slice>:
{
   21330:	b570      	push	{r4, r5, r6, lr}
   21332:	4605      	mov	r5, r0
	__asm__ volatile(
   21334:	f04f 0320 	mov.w	r3, #32
   21338:	f3ef 8611 	mrs	r6, BASEPRI
   2133c:	f383 8812 	msr	BASEPRI_MAX, r3
   21340:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21344:	4829      	ldr	r0, [pc, #164]	; (213ec <z_time_slice+0xbc>)
   21346:	f7fe fb43 	bl	1f9d0 <z_spin_lock_valid>
   2134a:	b968      	cbnz	r0, 21368 <z_time_slice+0x38>
   2134c:	2394      	movs	r3, #148	; 0x94
   2134e:	4a28      	ldr	r2, [pc, #160]	; (213f0 <z_time_slice+0xc0>)
   21350:	4928      	ldr	r1, [pc, #160]	; (213f4 <z_time_slice+0xc4>)
   21352:	4829      	ldr	r0, [pc, #164]	; (213f8 <z_time_slice+0xc8>)
   21354:	f003 fdbf 	bl	24ed6 <assert_print>
   21358:	4924      	ldr	r1, [pc, #144]	; (213ec <z_time_slice+0xbc>)
   2135a:	4828      	ldr	r0, [pc, #160]	; (213fc <z_time_slice+0xcc>)
   2135c:	f003 fdbb 	bl	24ed6 <assert_print>
   21360:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21362:	4823      	ldr	r0, [pc, #140]	; (213f0 <z_time_slice+0xc0>)
   21364:	f003 fdb0 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21368:	4820      	ldr	r0, [pc, #128]	; (213ec <z_time_slice+0xbc>)
   2136a:	f7fe fb4d 	bl	1fa08 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   2136e:	4b24      	ldr	r3, [pc, #144]	; (21400 <z_time_slice+0xd0>)
   21370:	4a24      	ldr	r2, [pc, #144]	; (21404 <z_time_slice+0xd4>)
   21372:	689c      	ldr	r4, [r3, #8]
   21374:	6811      	ldr	r1, [r2, #0]
   21376:	428c      	cmp	r4, r1
   21378:	d112      	bne.n	213a0 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   2137a:	4620      	mov	r0, r4
   2137c:	f7ff fc70 	bl	20c60 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21380:	481a      	ldr	r0, [pc, #104]	; (213ec <z_time_slice+0xbc>)
   21382:	f7fe fb33 	bl	1f9ec <z_spin_unlock_valid>
   21386:	bb58      	cbnz	r0, 213e0 <z_time_slice+0xb0>
   21388:	23c2      	movs	r3, #194	; 0xc2
   2138a:	4a19      	ldr	r2, [pc, #100]	; (213f0 <z_time_slice+0xc0>)
   2138c:	491e      	ldr	r1, [pc, #120]	; (21408 <z_time_slice+0xd8>)
   2138e:	481a      	ldr	r0, [pc, #104]	; (213f8 <z_time_slice+0xc8>)
   21390:	f003 fda1 	bl	24ed6 <assert_print>
   21394:	4915      	ldr	r1, [pc, #84]	; (213ec <z_time_slice+0xbc>)
   21396:	481d      	ldr	r0, [pc, #116]	; (2140c <z_time_slice+0xdc>)
   21398:	f003 fd9d 	bl	24ed6 <assert_print>
   2139c:	21c2      	movs	r1, #194	; 0xc2
   2139e:	e7e0      	b.n	21362 <z_time_slice+0x32>
	pending_current = NULL;
   213a0:	2100      	movs	r1, #0
   213a2:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   213a4:	4a1a      	ldr	r2, [pc, #104]	; (21410 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   213a6:	6812      	ldr	r2, [r2, #0]
   213a8:	b1c2      	cbz	r2, 213dc <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   213aa:	89e2      	ldrh	r2, [r4, #14]
   213ac:	2a7f      	cmp	r2, #127	; 0x7f
   213ae:	d815      	bhi.n	213dc <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   213b0:	7b62      	ldrb	r2, [r4, #13]
   213b2:	06d2      	lsls	r2, r2, #27
   213b4:	d112      	bne.n	213dc <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   213b6:	4a17      	ldr	r2, [pc, #92]	; (21414 <z_time_slice+0xe4>)
   213b8:	f994 100e 	ldrsb.w	r1, [r4, #14]
   213bc:	6812      	ldr	r2, [r2, #0]
   213be:	4291      	cmp	r1, r2
   213c0:	db0c      	blt.n	213dc <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   213c2:	4a15      	ldr	r2, [pc, #84]	; (21418 <z_time_slice+0xe8>)
   213c4:	4294      	cmp	r4, r2
   213c6:	d009      	beq.n	213dc <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   213c8:	691a      	ldr	r2, [r3, #16]
   213ca:	42aa      	cmp	r2, r5
   213cc:	dc03      	bgt.n	213d6 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   213ce:	4620      	mov	r0, r4
   213d0:	f7ff ff5c 	bl	2128c <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   213d4:	e7d1      	b.n	2137a <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   213d6:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   213d8:	611a      	str	r2, [r3, #16]
   213da:	e7d1      	b.n	21380 <z_time_slice+0x50>
   213dc:	2200      	movs	r2, #0
   213de:	e7fb      	b.n	213d8 <z_time_slice+0xa8>
	__asm__ volatile(
   213e0:	f386 8811 	msr	BASEPRI, r6
   213e4:	f3bf 8f6f 	isb	sy
}
   213e8:	bd70      	pop	{r4, r5, r6, pc}
   213ea:	bf00      	nop
   213ec:	2002154c 	.word	0x2002154c
   213f0:	0002c76f 	.word	0x0002c76f
   213f4:	0002c7c8 	.word	0x0002c7c8
   213f8:	0002b939 	.word	0x0002b939
   213fc:	0002c7dd 	.word	0x0002c7dd
   21400:	20021504 	.word	0x20021504
   21404:	20021540 	.word	0x20021540
   21408:	0002c79c 	.word	0x0002c79c
   2140c:	0002c7b3 	.word	0x0002c7b3
   21410:	20021548 	.word	0x20021548
   21414:	20021544 	.word	0x20021544
   21418:	20009c08 	.word	0x20009c08

0002141c <unready_thread>:
{
   2141c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2141e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   21422:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21424:	2a00      	cmp	r2, #0
   21426:	7b43      	ldrb	r3, [r0, #13]
   21428:	da06      	bge.n	21438 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2142a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2142e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21430:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21432:	4806      	ldr	r0, [pc, #24]	; (2144c <unready_thread+0x30>)
   21434:	f7ff ff0a 	bl	2124c <z_priq_dumb_remove>
	update_cache(thread == _current);
   21438:	4b05      	ldr	r3, [pc, #20]	; (21450 <unready_thread+0x34>)
   2143a:	6898      	ldr	r0, [r3, #8]
   2143c:	1b03      	subs	r3, r0, r4
   2143e:	4258      	negs	r0, r3
   21440:	4158      	adcs	r0, r3
}
   21442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   21446:	f7ff bc1f 	b.w	20c88 <update_cache>
   2144a:	bf00      	nop
   2144c:	20021524 	.word	0x20021524
   21450:	20021504 	.word	0x20021504

00021454 <add_to_waitq_locked>:
{
   21454:	b538      	push	{r3, r4, r5, lr}
   21456:	4604      	mov	r4, r0
   21458:	460d      	mov	r5, r1
	unready_thread(thread);
   2145a:	f7ff ffdf 	bl	2141c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2145e:	7b63      	ldrb	r3, [r4, #13]
   21460:	f043 0302 	orr.w	r3, r3, #2
   21464:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21466:	b34d      	cbz	r5, 214bc <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21468:	4b15      	ldr	r3, [pc, #84]	; (214c0 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   2146a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2146c:	429c      	cmp	r4, r3
   2146e:	d109      	bne.n	21484 <add_to_waitq_locked+0x30>
   21470:	4914      	ldr	r1, [pc, #80]	; (214c4 <add_to_waitq_locked+0x70>)
   21472:	4815      	ldr	r0, [pc, #84]	; (214c8 <add_to_waitq_locked+0x74>)
   21474:	23ba      	movs	r3, #186	; 0xba
   21476:	4a15      	ldr	r2, [pc, #84]	; (214cc <add_to_waitq_locked+0x78>)
   21478:	f003 fd2d 	bl	24ed6 <assert_print>
   2147c:	21ba      	movs	r1, #186	; 0xba
   2147e:	4813      	ldr	r0, [pc, #76]	; (214cc <add_to_waitq_locked+0x78>)
   21480:	f003 fd22 	bl	24ec8 <assert_post_action>
	return list->head == list;
   21484:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21486:	429d      	cmp	r5, r3
   21488:	d109      	bne.n	2149e <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   2148a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2148c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21490:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21492:	606c      	str	r4, [r5, #4]
}
   21494:	e012      	b.n	214bc <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   21496:	686a      	ldr	r2, [r5, #4]
   21498:	4293      	cmp	r3, r2
   2149a:	d0f6      	beq.n	2148a <add_to_waitq_locked+0x36>
   2149c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2149e:	2b00      	cmp	r3, #0
   214a0:	d0f3      	beq.n	2148a <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   214a2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   214a6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   214aa:	428a      	cmp	r2, r1
   214ac:	d0f3      	beq.n	21496 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   214ae:	4291      	cmp	r1, r2
   214b0:	ddf1      	ble.n	21496 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   214b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   214b4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   214b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   214ba:	605c      	str	r4, [r3, #4]
}
   214bc:	bd38      	pop	{r3, r4, r5, pc}
   214be:	bf00      	nop
   214c0:	20009c08 	.word	0x20009c08
   214c4:	00030d57 	.word	0x00030d57
   214c8:	0002b939 	.word	0x0002b939
   214cc:	00030d0e 	.word	0x00030d0e

000214d0 <pend_locked>:
{
   214d0:	b570      	push	{r4, r5, r6, lr}
   214d2:	4615      	mov	r5, r2
   214d4:	461c      	mov	r4, r3
   214d6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   214d8:	f7ff ffbc 	bl	21454 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   214dc:	f1b4 3fff 	cmp.w	r4, #4294967295
   214e0:	bf08      	it	eq
   214e2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   214e6:	d008      	beq.n	214fa <pend_locked+0x2a>
   214e8:	462a      	mov	r2, r5
   214ea:	4623      	mov	r3, r4
   214ec:	f106 0018 	add.w	r0, r6, #24
   214f0:	4902      	ldr	r1, [pc, #8]	; (214fc <pend_locked+0x2c>)
}
   214f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   214f6:	f000 bdf1 	b.w	220dc <z_add_timeout>
   214fa:	bd70      	pop	{r4, r5, r6, pc}
   214fc:	000218b5 	.word	0x000218b5

00021500 <z_pend_curr>:
{
   21500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21504:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   21508:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 215c0 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2150c:	4c2d      	ldr	r4, [pc, #180]	; (215c4 <z_pend_curr+0xc4>)
{
   2150e:	4617      	mov	r7, r2
	pending_current = _current;
   21510:	4b2d      	ldr	r3, [pc, #180]	; (215c8 <z_pend_curr+0xc8>)
   21512:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21516:	42a0      	cmp	r0, r4
{
   21518:	4605      	mov	r5, r0
   2151a:	460e      	mov	r6, r1
	pending_current = _current;
   2151c:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2151e:	d10b      	bne.n	21538 <z_pend_curr+0x38>
   21520:	492a      	ldr	r1, [pc, #168]	; (215cc <z_pend_curr+0xcc>)
   21522:	482b      	ldr	r0, [pc, #172]	; (215d0 <z_pend_curr+0xd0>)
   21524:	f240 334e 	movw	r3, #846	; 0x34e
   21528:	4a2a      	ldr	r2, [pc, #168]	; (215d4 <z_pend_curr+0xd4>)
   2152a:	f003 fcd4 	bl	24ed6 <assert_print>
   2152e:	f240 314e 	movw	r1, #846	; 0x34e
   21532:	4828      	ldr	r0, [pc, #160]	; (215d4 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21534:	f003 fcc8 	bl	24ec8 <assert_post_action>
	__asm__ volatile(
   21538:	f04f 0220 	mov.w	r2, #32
   2153c:	f3ef 8311 	mrs	r3, BASEPRI
   21540:	f382 8812 	msr	BASEPRI_MAX, r2
   21544:	f3bf 8f6f 	isb	sy
   21548:	4620      	mov	r0, r4
   2154a:	f7fe fa41 	bl	1f9d0 <z_spin_lock_valid>
   2154e:	b960      	cbnz	r0, 2156a <z_pend_curr+0x6a>
   21550:	2394      	movs	r3, #148	; 0x94
   21552:	4a21      	ldr	r2, [pc, #132]	; (215d8 <z_pend_curr+0xd8>)
   21554:	4921      	ldr	r1, [pc, #132]	; (215dc <z_pend_curr+0xdc>)
   21556:	481e      	ldr	r0, [pc, #120]	; (215d0 <z_pend_curr+0xd0>)
   21558:	f003 fcbd 	bl	24ed6 <assert_print>
   2155c:	4621      	mov	r1, r4
   2155e:	4820      	ldr	r0, [pc, #128]	; (215e0 <z_pend_curr+0xe0>)
   21560:	f003 fcb9 	bl	24ed6 <assert_print>
   21564:	2194      	movs	r1, #148	; 0x94
   21566:	481c      	ldr	r0, [pc, #112]	; (215d8 <z_pend_curr+0xd8>)
   21568:	e7e4      	b.n	21534 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   2156a:	4620      	mov	r0, r4
   2156c:	f7fe fa4c 	bl	1fa08 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   21570:	f8da 0008 	ldr.w	r0, [sl, #8]
   21574:	4642      	mov	r2, r8
   21576:	464b      	mov	r3, r9
   21578:	4639      	mov	r1, r7
   2157a:	f7ff ffa9 	bl	214d0 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2157e:	4628      	mov	r0, r5
   21580:	f7fe fa34 	bl	1f9ec <z_spin_unlock_valid>
   21584:	b958      	cbnz	r0, 2159e <z_pend_curr+0x9e>
   21586:	4917      	ldr	r1, [pc, #92]	; (215e4 <z_pend_curr+0xe4>)
   21588:	23e1      	movs	r3, #225	; 0xe1
   2158a:	4a13      	ldr	r2, [pc, #76]	; (215d8 <z_pend_curr+0xd8>)
   2158c:	4810      	ldr	r0, [pc, #64]	; (215d0 <z_pend_curr+0xd0>)
   2158e:	f003 fca2 	bl	24ed6 <assert_print>
   21592:	4629      	mov	r1, r5
   21594:	4814      	ldr	r0, [pc, #80]	; (215e8 <z_pend_curr+0xe8>)
   21596:	f003 fc9e 	bl	24ed6 <assert_print>
   2159a:	21e1      	movs	r1, #225	; 0xe1
   2159c:	e7e3      	b.n	21566 <z_pend_curr+0x66>
   2159e:	4620      	mov	r0, r4
   215a0:	f7fe fa24 	bl	1f9ec <z_spin_unlock_valid>
   215a4:	b938      	cbnz	r0, 215b6 <z_pend_curr+0xb6>
   215a6:	490f      	ldr	r1, [pc, #60]	; (215e4 <z_pend_curr+0xe4>)
   215a8:	23e1      	movs	r3, #225	; 0xe1
   215aa:	4a0b      	ldr	r2, [pc, #44]	; (215d8 <z_pend_curr+0xd8>)
   215ac:	4808      	ldr	r0, [pc, #32]	; (215d0 <z_pend_curr+0xd0>)
   215ae:	f003 fc92 	bl	24ed6 <assert_print>
   215b2:	4621      	mov	r1, r4
   215b4:	e7ee      	b.n	21594 <z_pend_curr+0x94>
   215b6:	4630      	mov	r0, r6
}
   215b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   215bc:	f7ee beba 	b.w	10334 <arch_swap>
   215c0:	20021504 	.word	0x20021504
   215c4:	2002154c 	.word	0x2002154c
   215c8:	20021540 	.word	0x20021540
   215cc:	00030e05 	.word	0x00030e05
   215d0:	0002b939 	.word	0x0002b939
   215d4:	00030d0e 	.word	0x00030d0e
   215d8:	0002c76f 	.word	0x0002c76f
   215dc:	0002c7c8 	.word	0x0002c7c8
   215e0:	0002c7dd 	.word	0x0002c7dd
   215e4:	0002c79c 	.word	0x0002c79c
   215e8:	0002c7b3 	.word	0x0002c7b3

000215ec <z_set_prio>:
{
   215ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   215f0:	4604      	mov	r4, r0
   215f2:	460e      	mov	r6, r1
   215f4:	f04f 0320 	mov.w	r3, #32
   215f8:	f3ef 8911 	mrs	r9, BASEPRI
   215fc:	f383 8812 	msr	BASEPRI_MAX, r3
   21600:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21604:	4837      	ldr	r0, [pc, #220]	; (216e4 <z_set_prio+0xf8>)
   21606:	f7fe f9e3 	bl	1f9d0 <z_spin_lock_valid>
   2160a:	4607      	mov	r7, r0
   2160c:	b960      	cbnz	r0, 21628 <z_set_prio+0x3c>
   2160e:	2394      	movs	r3, #148	; 0x94
   21610:	4a35      	ldr	r2, [pc, #212]	; (216e8 <z_set_prio+0xfc>)
   21612:	4936      	ldr	r1, [pc, #216]	; (216ec <z_set_prio+0x100>)
   21614:	4836      	ldr	r0, [pc, #216]	; (216f0 <z_set_prio+0x104>)
   21616:	f003 fc5e 	bl	24ed6 <assert_print>
   2161a:	4932      	ldr	r1, [pc, #200]	; (216e4 <z_set_prio+0xf8>)
   2161c:	4835      	ldr	r0, [pc, #212]	; (216f4 <z_set_prio+0x108>)
   2161e:	f003 fc5a 	bl	24ed6 <assert_print>
   21622:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21624:	4830      	ldr	r0, [pc, #192]	; (216e8 <z_set_prio+0xfc>)
   21626:	e021      	b.n	2166c <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   21628:	482e      	ldr	r0, [pc, #184]	; (216e4 <z_set_prio+0xf8>)
   2162a:	f7fe f9ed 	bl	1fa08 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2162e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   21630:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21632:	06da      	lsls	r2, r3, #27
   21634:	d11c      	bne.n	21670 <z_set_prio+0x84>
	return node->next != NULL;
   21636:	69a5      	ldr	r5, [r4, #24]
   21638:	b9d5      	cbnz	r5, 21670 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   2163a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 216f8 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2163e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21642:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21644:	4621      	mov	r1, r4
   21646:	4640      	mov	r0, r8
   21648:	f7ff fe00 	bl	2124c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2164c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2164e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   21650:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21654:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21656:	4b29      	ldr	r3, [pc, #164]	; (216fc <z_set_prio+0x110>)
   21658:	429c      	cmp	r4, r3
   2165a:	d11b      	bne.n	21694 <z_set_prio+0xa8>
   2165c:	4928      	ldr	r1, [pc, #160]	; (21700 <z_set_prio+0x114>)
   2165e:	4824      	ldr	r0, [pc, #144]	; (216f0 <z_set_prio+0x104>)
   21660:	23ba      	movs	r3, #186	; 0xba
   21662:	4a28      	ldr	r2, [pc, #160]	; (21704 <z_set_prio+0x118>)
   21664:	f003 fc37 	bl	24ed6 <assert_print>
   21668:	21ba      	movs	r1, #186	; 0xba
   2166a:	4826      	ldr	r0, [pc, #152]	; (21704 <z_set_prio+0x118>)
   2166c:	f003 fc2c 	bl	24ec8 <assert_post_action>
   21670:	2700      	movs	r7, #0
			thread->base.prio = prio;
   21672:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21674:	481b      	ldr	r0, [pc, #108]	; (216e4 <z_set_prio+0xf8>)
   21676:	f7fe f9b9 	bl	1f9ec <z_spin_unlock_valid>
   2167a:	bb58      	cbnz	r0, 216d4 <z_set_prio+0xe8>
   2167c:	23c2      	movs	r3, #194	; 0xc2
   2167e:	4a1a      	ldr	r2, [pc, #104]	; (216e8 <z_set_prio+0xfc>)
   21680:	4921      	ldr	r1, [pc, #132]	; (21708 <z_set_prio+0x11c>)
   21682:	481b      	ldr	r0, [pc, #108]	; (216f0 <z_set_prio+0x104>)
   21684:	f003 fc27 	bl	24ed6 <assert_print>
   21688:	4916      	ldr	r1, [pc, #88]	; (216e4 <z_set_prio+0xf8>)
   2168a:	4820      	ldr	r0, [pc, #128]	; (2170c <z_set_prio+0x120>)
   2168c:	f003 fc23 	bl	24ed6 <assert_print>
   21690:	21c2      	movs	r1, #194	; 0xc2
   21692:	e7c7      	b.n	21624 <z_set_prio+0x38>
	return list->head == list;
   21694:	4643      	mov	r3, r8
   21696:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2169a:	4542      	cmp	r2, r8
   2169c:	bf18      	it	ne
   2169e:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   216a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   216a2:	b925      	cbnz	r5, 216ae <z_set_prio+0xc2>
	node->prev = tail;
   216a4:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   216a8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   216aa:	625c      	str	r4, [r3, #36]	; 0x24
}
   216ac:	e00a      	b.n	216c4 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   216ae:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   216b2:	428e      	cmp	r6, r1
   216b4:	d00a      	beq.n	216cc <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   216b6:	42b1      	cmp	r1, r6
   216b8:	dd08      	ble.n	216cc <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   216ba:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   216bc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   216c0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   216c2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   216c4:	2001      	movs	r0, #1
   216c6:	f7ff fadf 	bl	20c88 <update_cache>
   216ca:	e7d3      	b.n	21674 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   216cc:	42aa      	cmp	r2, r5
   216ce:	d0e9      	beq.n	216a4 <z_set_prio+0xb8>
   216d0:	682d      	ldr	r5, [r5, #0]
   216d2:	e7e6      	b.n	216a2 <z_set_prio+0xb6>
	__asm__ volatile(
   216d4:	f389 8811 	msr	BASEPRI, r9
   216d8:	f3bf 8f6f 	isb	sy
}
   216dc:	4638      	mov	r0, r7
   216de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   216e2:	bf00      	nop
   216e4:	2002154c 	.word	0x2002154c
   216e8:	0002c76f 	.word	0x0002c76f
   216ec:	0002c7c8 	.word	0x0002c7c8
   216f0:	0002b939 	.word	0x0002b939
   216f4:	0002c7dd 	.word	0x0002c7dd
   216f8:	20021524 	.word	0x20021524
   216fc:	20009c08 	.word	0x20009c08
   21700:	00030d57 	.word	0x00030d57
   21704:	00030d0e 	.word	0x00030d0e
   21708:	0002c79c 	.word	0x0002c79c
   2170c:	0002c7b3 	.word	0x0002c7b3

00021710 <z_impl_k_thread_suspend>:
{
   21710:	b570      	push	{r4, r5, r6, lr}
   21712:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21714:	3018      	adds	r0, #24
   21716:	f000 fda7 	bl	22268 <z_abort_timeout>
	__asm__ volatile(
   2171a:	f04f 0320 	mov.w	r3, #32
   2171e:	f3ef 8611 	mrs	r6, BASEPRI
   21722:	f383 8812 	msr	BASEPRI_MAX, r3
   21726:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2172a:	4824      	ldr	r0, [pc, #144]	; (217bc <z_impl_k_thread_suspend+0xac>)
   2172c:	f7fe f950 	bl	1f9d0 <z_spin_lock_valid>
   21730:	b968      	cbnz	r0, 2174e <z_impl_k_thread_suspend+0x3e>
   21732:	2394      	movs	r3, #148	; 0x94
   21734:	4a22      	ldr	r2, [pc, #136]	; (217c0 <z_impl_k_thread_suspend+0xb0>)
   21736:	4923      	ldr	r1, [pc, #140]	; (217c4 <z_impl_k_thread_suspend+0xb4>)
   21738:	4823      	ldr	r0, [pc, #140]	; (217c8 <z_impl_k_thread_suspend+0xb8>)
   2173a:	f003 fbcc 	bl	24ed6 <assert_print>
   2173e:	491f      	ldr	r1, [pc, #124]	; (217bc <z_impl_k_thread_suspend+0xac>)
   21740:	4822      	ldr	r0, [pc, #136]	; (217cc <z_impl_k_thread_suspend+0xbc>)
   21742:	f003 fbc8 	bl	24ed6 <assert_print>
   21746:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21748:	481d      	ldr	r0, [pc, #116]	; (217c0 <z_impl_k_thread_suspend+0xb0>)
   2174a:	f003 fbbd 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2174e:	481b      	ldr	r0, [pc, #108]	; (217bc <z_impl_k_thread_suspend+0xac>)
   21750:	f7fe f95a 	bl	1fa08 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21754:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   21758:	7b63      	ldrb	r3, [r4, #13]
   2175a:	2a00      	cmp	r2, #0
   2175c:	da06      	bge.n	2176c <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2175e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21762:	4621      	mov	r1, r4
   21764:	481a      	ldr	r0, [pc, #104]	; (217d0 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21766:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21768:	f7ff fd70 	bl	2124c <z_priq_dumb_remove>
		update_cache(thread == _current);
   2176c:	4d19      	ldr	r5, [pc, #100]	; (217d4 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2176e:	7b63      	ldrb	r3, [r4, #13]
   21770:	68a8      	ldr	r0, [r5, #8]
   21772:	f043 0310 	orr.w	r3, r3, #16
   21776:	7363      	strb	r3, [r4, #13]
   21778:	1b03      	subs	r3, r0, r4
   2177a:	4258      	negs	r0, r3
   2177c:	4158      	adcs	r0, r3
   2177e:	f7ff fa83 	bl	20c88 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21782:	480e      	ldr	r0, [pc, #56]	; (217bc <z_impl_k_thread_suspend+0xac>)
   21784:	f7fe f932 	bl	1f9ec <z_spin_unlock_valid>
   21788:	b958      	cbnz	r0, 217a2 <z_impl_k_thread_suspend+0x92>
   2178a:	23c2      	movs	r3, #194	; 0xc2
   2178c:	4a0c      	ldr	r2, [pc, #48]	; (217c0 <z_impl_k_thread_suspend+0xb0>)
   2178e:	4912      	ldr	r1, [pc, #72]	; (217d8 <z_impl_k_thread_suspend+0xc8>)
   21790:	480d      	ldr	r0, [pc, #52]	; (217c8 <z_impl_k_thread_suspend+0xb8>)
   21792:	f003 fba0 	bl	24ed6 <assert_print>
   21796:	4909      	ldr	r1, [pc, #36]	; (217bc <z_impl_k_thread_suspend+0xac>)
   21798:	4810      	ldr	r0, [pc, #64]	; (217dc <z_impl_k_thread_suspend+0xcc>)
   2179a:	f003 fb9c 	bl	24ed6 <assert_print>
   2179e:	21c2      	movs	r1, #194	; 0xc2
   217a0:	e7d2      	b.n	21748 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   217a2:	f386 8811 	msr	BASEPRI, r6
   217a6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   217aa:	68ab      	ldr	r3, [r5, #8]
   217ac:	42a3      	cmp	r3, r4
   217ae:	d103      	bne.n	217b8 <z_impl_k_thread_suspend+0xa8>
}
   217b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   217b4:	f007 bfcc 	b.w	29750 <z_reschedule_unlocked>
}
   217b8:	bd70      	pop	{r4, r5, r6, pc}
   217ba:	bf00      	nop
   217bc:	2002154c 	.word	0x2002154c
   217c0:	0002c76f 	.word	0x0002c76f
   217c4:	0002c7c8 	.word	0x0002c7c8
   217c8:	0002b939 	.word	0x0002b939
   217cc:	0002c7dd 	.word	0x0002c7dd
   217d0:	20021524 	.word	0x20021524
   217d4:	20021504 	.word	0x20021504
   217d8:	0002c79c 	.word	0x0002c79c
   217dc:	0002c7b3 	.word	0x0002c7b3

000217e0 <unpend_thread_no_timeout>:
{
   217e0:	b510      	push	{r4, lr}
   217e2:	4604      	mov	r4, r0
   217e4:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   217e6:	b958      	cbnz	r0, 21800 <unpend_thread_no_timeout+0x20>
   217e8:	490a      	ldr	r1, [pc, #40]	; (21814 <unpend_thread_no_timeout+0x34>)
   217ea:	480b      	ldr	r0, [pc, #44]	; (21818 <unpend_thread_no_timeout+0x38>)
   217ec:	f240 23d6 	movw	r3, #726	; 0x2d6
   217f0:	4a0a      	ldr	r2, [pc, #40]	; (2181c <unpend_thread_no_timeout+0x3c>)
   217f2:	f003 fb70 	bl	24ed6 <assert_print>
   217f6:	f240 21d6 	movw	r1, #726	; 0x2d6
   217fa:	4808      	ldr	r0, [pc, #32]	; (2181c <unpend_thread_no_timeout+0x3c>)
   217fc:	f003 fb64 	bl	24ec8 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21800:	4621      	mov	r1, r4
   21802:	f7ff fd23 	bl	2124c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21806:	7b63      	ldrb	r3, [r4, #13]
   21808:	f023 0302 	bic.w	r3, r3, #2
   2180c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2180e:	2300      	movs	r3, #0
   21810:	60a3      	str	r3, [r4, #8]
}
   21812:	bd10      	pop	{r4, pc}
   21814:	00030e3c 	.word	0x00030e3c
   21818:	0002b939 	.word	0x0002b939
   2181c:	00030d0e 	.word	0x00030d0e

00021820 <z_unpend_thread>:
{
   21820:	b538      	push	{r3, r4, r5, lr}
   21822:	4604      	mov	r4, r0
	__asm__ volatile(
   21824:	f04f 0320 	mov.w	r3, #32
   21828:	f3ef 8511 	mrs	r5, BASEPRI
   2182c:	f383 8812 	msr	BASEPRI_MAX, r3
   21830:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21834:	4818      	ldr	r0, [pc, #96]	; (21898 <z_unpend_thread+0x78>)
   21836:	f7fe f8cb 	bl	1f9d0 <z_spin_lock_valid>
   2183a:	b968      	cbnz	r0, 21858 <z_unpend_thread+0x38>
   2183c:	2394      	movs	r3, #148	; 0x94
   2183e:	4a17      	ldr	r2, [pc, #92]	; (2189c <z_unpend_thread+0x7c>)
   21840:	4917      	ldr	r1, [pc, #92]	; (218a0 <z_unpend_thread+0x80>)
   21842:	4818      	ldr	r0, [pc, #96]	; (218a4 <z_unpend_thread+0x84>)
   21844:	f003 fb47 	bl	24ed6 <assert_print>
   21848:	4913      	ldr	r1, [pc, #76]	; (21898 <z_unpend_thread+0x78>)
   2184a:	4817      	ldr	r0, [pc, #92]	; (218a8 <z_unpend_thread+0x88>)
   2184c:	f003 fb43 	bl	24ed6 <assert_print>
   21850:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21852:	4812      	ldr	r0, [pc, #72]	; (2189c <z_unpend_thread+0x7c>)
   21854:	f003 fb38 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21858:	480f      	ldr	r0, [pc, #60]	; (21898 <z_unpend_thread+0x78>)
   2185a:	f7fe f8d5 	bl	1fa08 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   2185e:	4620      	mov	r0, r4
   21860:	f7ff ffbe 	bl	217e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21864:	480c      	ldr	r0, [pc, #48]	; (21898 <z_unpend_thread+0x78>)
   21866:	f7fe f8c1 	bl	1f9ec <z_spin_unlock_valid>
   2186a:	b958      	cbnz	r0, 21884 <z_unpend_thread+0x64>
   2186c:	23c2      	movs	r3, #194	; 0xc2
   2186e:	4a0b      	ldr	r2, [pc, #44]	; (2189c <z_unpend_thread+0x7c>)
   21870:	490e      	ldr	r1, [pc, #56]	; (218ac <z_unpend_thread+0x8c>)
   21872:	480c      	ldr	r0, [pc, #48]	; (218a4 <z_unpend_thread+0x84>)
   21874:	f003 fb2f 	bl	24ed6 <assert_print>
   21878:	4907      	ldr	r1, [pc, #28]	; (21898 <z_unpend_thread+0x78>)
   2187a:	480d      	ldr	r0, [pc, #52]	; (218b0 <z_unpend_thread+0x90>)
   2187c:	f003 fb2b 	bl	24ed6 <assert_print>
   21880:	21c2      	movs	r1, #194	; 0xc2
   21882:	e7e6      	b.n	21852 <z_unpend_thread+0x32>
	__asm__ volatile(
   21884:	f385 8811 	msr	BASEPRI, r5
   21888:	f3bf 8f6f 	isb	sy
   2188c:	f104 0018 	add.w	r0, r4, #24
}
   21890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21894:	f000 bce8 	b.w	22268 <z_abort_timeout>
   21898:	2002154c 	.word	0x2002154c
   2189c:	0002c76f 	.word	0x0002c76f
   218a0:	0002c7c8 	.word	0x0002c7c8
   218a4:	0002b939 	.word	0x0002b939
   218a8:	0002c7dd 	.word	0x0002c7dd
   218ac:	0002c79c 	.word	0x0002c79c
   218b0:	0002c7b3 	.word	0x0002c7b3

000218b4 <z_thread_timeout>:
{
   218b4:	b570      	push	{r4, r5, r6, lr}
   218b6:	4604      	mov	r4, r0
	__asm__ volatile(
   218b8:	f04f 0320 	mov.w	r3, #32
   218bc:	f3ef 8611 	mrs	r6, BASEPRI
   218c0:	f383 8812 	msr	BASEPRI_MAX, r3
   218c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218c8:	481f      	ldr	r0, [pc, #124]	; (21948 <z_thread_timeout+0x94>)
   218ca:	f7fe f881 	bl	1f9d0 <z_spin_lock_valid>
   218ce:	b968      	cbnz	r0, 218ec <z_thread_timeout+0x38>
   218d0:	2394      	movs	r3, #148	; 0x94
   218d2:	4a1e      	ldr	r2, [pc, #120]	; (2194c <z_thread_timeout+0x98>)
   218d4:	491e      	ldr	r1, [pc, #120]	; (21950 <z_thread_timeout+0x9c>)
   218d6:	481f      	ldr	r0, [pc, #124]	; (21954 <z_thread_timeout+0xa0>)
   218d8:	f003 fafd 	bl	24ed6 <assert_print>
   218dc:	491a      	ldr	r1, [pc, #104]	; (21948 <z_thread_timeout+0x94>)
   218de:	481e      	ldr	r0, [pc, #120]	; (21958 <z_thread_timeout+0xa4>)
   218e0:	f003 faf9 	bl	24ed6 <assert_print>
   218e4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218e6:	4819      	ldr	r0, [pc, #100]	; (2194c <z_thread_timeout+0x98>)
   218e8:	f003 faee 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   218ec:	4816      	ldr	r0, [pc, #88]	; (21948 <z_thread_timeout+0x94>)
   218ee:	f7fe f88b 	bl	1fa08 <z_spin_lock_set_owner>
		if (!killed) {
   218f2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   218f6:	f013 0f28 	tst.w	r3, #40	; 0x28
   218fa:	d110      	bne.n	2191e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   218fc:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   21900:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   21904:	b113      	cbz	r3, 2190c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   21906:	4628      	mov	r0, r5
   21908:	f7ff ff6a 	bl	217e0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2190c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   21910:	4628      	mov	r0, r5
   21912:	f023 0314 	bic.w	r3, r3, #20
   21916:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2191a:	f7ff f9e9 	bl	20cf0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2191e:	480a      	ldr	r0, [pc, #40]	; (21948 <z_thread_timeout+0x94>)
   21920:	f7fe f864 	bl	1f9ec <z_spin_unlock_valid>
   21924:	b958      	cbnz	r0, 2193e <z_thread_timeout+0x8a>
   21926:	23c2      	movs	r3, #194	; 0xc2
   21928:	4a08      	ldr	r2, [pc, #32]	; (2194c <z_thread_timeout+0x98>)
   2192a:	490c      	ldr	r1, [pc, #48]	; (2195c <z_thread_timeout+0xa8>)
   2192c:	4809      	ldr	r0, [pc, #36]	; (21954 <z_thread_timeout+0xa0>)
   2192e:	f003 fad2 	bl	24ed6 <assert_print>
   21932:	4905      	ldr	r1, [pc, #20]	; (21948 <z_thread_timeout+0x94>)
   21934:	480a      	ldr	r0, [pc, #40]	; (21960 <z_thread_timeout+0xac>)
   21936:	f003 face 	bl	24ed6 <assert_print>
   2193a:	21c2      	movs	r1, #194	; 0xc2
   2193c:	e7d3      	b.n	218e6 <z_thread_timeout+0x32>
	__asm__ volatile(
   2193e:	f386 8811 	msr	BASEPRI, r6
   21942:	f3bf 8f6f 	isb	sy
}
   21946:	bd70      	pop	{r4, r5, r6, pc}
   21948:	2002154c 	.word	0x2002154c
   2194c:	0002c76f 	.word	0x0002c76f
   21950:	0002c7c8 	.word	0x0002c7c8
   21954:	0002b939 	.word	0x0002b939
   21958:	0002c7dd 	.word	0x0002c7dd
   2195c:	0002c79c 	.word	0x0002c79c
   21960:	0002c7b3 	.word	0x0002c7b3

00021964 <z_unpend1_no_timeout>:
{
   21964:	b570      	push	{r4, r5, r6, lr}
   21966:	4605      	mov	r5, r0
	__asm__ volatile(
   21968:	f04f 0320 	mov.w	r3, #32
   2196c:	f3ef 8611 	mrs	r6, BASEPRI
   21970:	f383 8812 	msr	BASEPRI_MAX, r3
   21974:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21978:	4819      	ldr	r0, [pc, #100]	; (219e0 <z_unpend1_no_timeout+0x7c>)
   2197a:	f7fe f829 	bl	1f9d0 <z_spin_lock_valid>
   2197e:	b968      	cbnz	r0, 2199c <z_unpend1_no_timeout+0x38>
   21980:	2394      	movs	r3, #148	; 0x94
   21982:	4a18      	ldr	r2, [pc, #96]	; (219e4 <z_unpend1_no_timeout+0x80>)
   21984:	4918      	ldr	r1, [pc, #96]	; (219e8 <z_unpend1_no_timeout+0x84>)
   21986:	4819      	ldr	r0, [pc, #100]	; (219ec <z_unpend1_no_timeout+0x88>)
   21988:	f003 faa5 	bl	24ed6 <assert_print>
   2198c:	4914      	ldr	r1, [pc, #80]	; (219e0 <z_unpend1_no_timeout+0x7c>)
   2198e:	4818      	ldr	r0, [pc, #96]	; (219f0 <z_unpend1_no_timeout+0x8c>)
   21990:	f003 faa1 	bl	24ed6 <assert_print>
   21994:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21996:	4813      	ldr	r0, [pc, #76]	; (219e4 <z_unpend1_no_timeout+0x80>)
   21998:	f003 fa96 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2199c:	4810      	ldr	r0, [pc, #64]	; (219e0 <z_unpend1_no_timeout+0x7c>)
   2199e:	f7fe f833 	bl	1fa08 <z_spin_lock_set_owner>
	return list->head == list;
   219a2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   219a4:	42a5      	cmp	r5, r4
   219a6:	d013      	beq.n	219d0 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   219a8:	b114      	cbz	r4, 219b0 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   219aa:	4620      	mov	r0, r4
   219ac:	f7ff ff18 	bl	217e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219b0:	480b      	ldr	r0, [pc, #44]	; (219e0 <z_unpend1_no_timeout+0x7c>)
   219b2:	f7fe f81b 	bl	1f9ec <z_spin_unlock_valid>
   219b6:	b968      	cbnz	r0, 219d4 <z_unpend1_no_timeout+0x70>
   219b8:	23c2      	movs	r3, #194	; 0xc2
   219ba:	4a0a      	ldr	r2, [pc, #40]	; (219e4 <z_unpend1_no_timeout+0x80>)
   219bc:	490d      	ldr	r1, [pc, #52]	; (219f4 <z_unpend1_no_timeout+0x90>)
   219be:	480b      	ldr	r0, [pc, #44]	; (219ec <z_unpend1_no_timeout+0x88>)
   219c0:	f003 fa89 	bl	24ed6 <assert_print>
   219c4:	4906      	ldr	r1, [pc, #24]	; (219e0 <z_unpend1_no_timeout+0x7c>)
   219c6:	480c      	ldr	r0, [pc, #48]	; (219f8 <z_unpend1_no_timeout+0x94>)
   219c8:	f003 fa85 	bl	24ed6 <assert_print>
   219cc:	21c2      	movs	r1, #194	; 0xc2
   219ce:	e7e2      	b.n	21996 <z_unpend1_no_timeout+0x32>
   219d0:	2400      	movs	r4, #0
   219d2:	e7ed      	b.n	219b0 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   219d4:	f386 8811 	msr	BASEPRI, r6
   219d8:	f3bf 8f6f 	isb	sy
}
   219dc:	4620      	mov	r0, r4
   219de:	bd70      	pop	{r4, r5, r6, pc}
   219e0:	2002154c 	.word	0x2002154c
   219e4:	0002c76f 	.word	0x0002c76f
   219e8:	0002c7c8 	.word	0x0002c7c8
   219ec:	0002b939 	.word	0x0002b939
   219f0:	0002c7dd 	.word	0x0002c7dd
   219f4:	0002c79c 	.word	0x0002c79c
   219f8:	0002c7b3 	.word	0x0002c7b3

000219fc <z_unpend_first_thread>:
{
   219fc:	b570      	push	{r4, r5, r6, lr}
   219fe:	4605      	mov	r5, r0
	__asm__ volatile(
   21a00:	f04f 0320 	mov.w	r3, #32
   21a04:	f3ef 8611 	mrs	r6, BASEPRI
   21a08:	f383 8812 	msr	BASEPRI_MAX, r3
   21a0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a10:	481b      	ldr	r0, [pc, #108]	; (21a80 <z_unpend_first_thread+0x84>)
   21a12:	f7fd ffdd 	bl	1f9d0 <z_spin_lock_valid>
   21a16:	b968      	cbnz	r0, 21a34 <z_unpend_first_thread+0x38>
   21a18:	2394      	movs	r3, #148	; 0x94
   21a1a:	4a1a      	ldr	r2, [pc, #104]	; (21a84 <z_unpend_first_thread+0x88>)
   21a1c:	491a      	ldr	r1, [pc, #104]	; (21a88 <z_unpend_first_thread+0x8c>)
   21a1e:	481b      	ldr	r0, [pc, #108]	; (21a8c <z_unpend_first_thread+0x90>)
   21a20:	f003 fa59 	bl	24ed6 <assert_print>
   21a24:	4916      	ldr	r1, [pc, #88]	; (21a80 <z_unpend_first_thread+0x84>)
   21a26:	481a      	ldr	r0, [pc, #104]	; (21a90 <z_unpend_first_thread+0x94>)
   21a28:	f003 fa55 	bl	24ed6 <assert_print>
   21a2c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a2e:	4815      	ldr	r0, [pc, #84]	; (21a84 <z_unpend_first_thread+0x88>)
   21a30:	f003 fa4a 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a34:	4812      	ldr	r0, [pc, #72]	; (21a80 <z_unpend_first_thread+0x84>)
   21a36:	f7fd ffe7 	bl	1fa08 <z_spin_lock_set_owner>
	return list->head == list;
   21a3a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a3c:	42a5      	cmp	r5, r4
   21a3e:	d017      	beq.n	21a70 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   21a40:	b134      	cbz	r4, 21a50 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   21a42:	4620      	mov	r0, r4
   21a44:	f7ff fecc 	bl	217e0 <unpend_thread_no_timeout>
   21a48:	f104 0018 	add.w	r0, r4, #24
   21a4c:	f000 fc0c 	bl	22268 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a50:	480b      	ldr	r0, [pc, #44]	; (21a80 <z_unpend_first_thread+0x84>)
   21a52:	f7fd ffcb 	bl	1f9ec <z_spin_unlock_valid>
   21a56:	b968      	cbnz	r0, 21a74 <z_unpend_first_thread+0x78>
   21a58:	23c2      	movs	r3, #194	; 0xc2
   21a5a:	4a0a      	ldr	r2, [pc, #40]	; (21a84 <z_unpend_first_thread+0x88>)
   21a5c:	490d      	ldr	r1, [pc, #52]	; (21a94 <z_unpend_first_thread+0x98>)
   21a5e:	480b      	ldr	r0, [pc, #44]	; (21a8c <z_unpend_first_thread+0x90>)
   21a60:	f003 fa39 	bl	24ed6 <assert_print>
   21a64:	4906      	ldr	r1, [pc, #24]	; (21a80 <z_unpend_first_thread+0x84>)
   21a66:	480c      	ldr	r0, [pc, #48]	; (21a98 <z_unpend_first_thread+0x9c>)
   21a68:	f003 fa35 	bl	24ed6 <assert_print>
   21a6c:	21c2      	movs	r1, #194	; 0xc2
   21a6e:	e7de      	b.n	21a2e <z_unpend_first_thread+0x32>
   21a70:	2400      	movs	r4, #0
   21a72:	e7ed      	b.n	21a50 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   21a74:	f386 8811 	msr	BASEPRI, r6
   21a78:	f3bf 8f6f 	isb	sy
}
   21a7c:	4620      	mov	r0, r4
   21a7e:	bd70      	pop	{r4, r5, r6, pc}
   21a80:	2002154c 	.word	0x2002154c
   21a84:	0002c76f 	.word	0x0002c76f
   21a88:	0002c7c8 	.word	0x0002c7c8
   21a8c:	0002b939 	.word	0x0002b939
   21a90:	0002c7dd 	.word	0x0002c7dd
   21a94:	0002c79c 	.word	0x0002c79c
   21a98:	0002c7b3 	.word	0x0002c7b3

00021a9c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21a9c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   21a9e:	4b04      	ldr	r3, [pc, #16]	; (21ab0 <z_sched_init+0x14>)
   21aa0:	4608      	mov	r0, r1
   21aa2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   21aa6:	e9c3 2208 	strd	r2, r2, [r3, #32]
   21aaa:	f7ff b96b 	b.w	20d84 <k_sched_time_slice_set>
   21aae:	bf00      	nop
   21ab0:	20021504 	.word	0x20021504

00021ab4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   21ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ab6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21aba:	b16b      	cbz	r3, 21ad8 <z_impl_k_yield+0x24>
   21abc:	493c      	ldr	r1, [pc, #240]	; (21bb0 <z_impl_k_yield+0xfc>)
   21abe:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   21ac2:	4a3c      	ldr	r2, [pc, #240]	; (21bb4 <z_impl_k_yield+0x100>)
   21ac4:	483c      	ldr	r0, [pc, #240]	; (21bb8 <z_impl_k_yield+0x104>)
   21ac6:	f003 fa06 	bl	24ed6 <assert_print>
   21aca:	483c      	ldr	r0, [pc, #240]	; (21bbc <z_impl_k_yield+0x108>)
   21acc:	f003 fa03 	bl	24ed6 <assert_print>
   21ad0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21ad4:	4837      	ldr	r0, [pc, #220]	; (21bb4 <z_impl_k_yield+0x100>)
   21ad6:	e017      	b.n	21b08 <z_impl_k_yield+0x54>
	__asm__ volatile(
   21ad8:	f04f 0320 	mov.w	r3, #32
   21adc:	f3ef 8611 	mrs	r6, BASEPRI
   21ae0:	f383 8812 	msr	BASEPRI_MAX, r3
   21ae4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ae8:	4835      	ldr	r0, [pc, #212]	; (21bc0 <z_impl_k_yield+0x10c>)
   21aea:	f7fd ff71 	bl	1f9d0 <z_spin_lock_valid>
   21aee:	b968      	cbnz	r0, 21b0c <z_impl_k_yield+0x58>
   21af0:	2394      	movs	r3, #148	; 0x94
   21af2:	4a34      	ldr	r2, [pc, #208]	; (21bc4 <z_impl_k_yield+0x110>)
   21af4:	4934      	ldr	r1, [pc, #208]	; (21bc8 <z_impl_k_yield+0x114>)
   21af6:	4830      	ldr	r0, [pc, #192]	; (21bb8 <z_impl_k_yield+0x104>)
   21af8:	f003 f9ed 	bl	24ed6 <assert_print>
   21afc:	4930      	ldr	r1, [pc, #192]	; (21bc0 <z_impl_k_yield+0x10c>)
   21afe:	4833      	ldr	r0, [pc, #204]	; (21bcc <z_impl_k_yield+0x118>)
   21b00:	f003 f9e9 	bl	24ed6 <assert_print>
   21b04:	2194      	movs	r1, #148	; 0x94
   21b06:	482f      	ldr	r0, [pc, #188]	; (21bc4 <z_impl_k_yield+0x110>)
   21b08:	f003 f9de 	bl	24ec8 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   21b0c:	4c30      	ldr	r4, [pc, #192]	; (21bd0 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   21b0e:	482c      	ldr	r0, [pc, #176]	; (21bc0 <z_impl_k_yield+0x10c>)
   21b10:	f7fd ff7a 	bl	1fa08 <z_spin_lock_set_owner>
   21b14:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   21b16:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b1a:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21b1c:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21b22:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21b24:	f7ff fb92 	bl	2124c <z_priq_dumb_remove>
	}
	queue_thread(_current);
   21b28:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21b2a:	7b5a      	ldrb	r2, [r3, #13]
   21b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21b30:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21b32:	4a28      	ldr	r2, [pc, #160]	; (21bd4 <z_impl_k_yield+0x120>)
   21b34:	4293      	cmp	r3, r2
   21b36:	d107      	bne.n	21b48 <z_impl_k_yield+0x94>
   21b38:	4927      	ldr	r1, [pc, #156]	; (21bd8 <z_impl_k_yield+0x124>)
   21b3a:	23ba      	movs	r3, #186	; 0xba
   21b3c:	4a1d      	ldr	r2, [pc, #116]	; (21bb4 <z_impl_k_yield+0x100>)
   21b3e:	481e      	ldr	r0, [pc, #120]	; (21bb8 <z_impl_k_yield+0x104>)
   21b40:	f003 f9c9 	bl	24ed6 <assert_print>
   21b44:	21ba      	movs	r1, #186	; 0xba
   21b46:	e7c5      	b.n	21ad4 <z_impl_k_yield+0x20>
	return list->head == list;
   21b48:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   21b4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b4c:	42aa      	cmp	r2, r5
   21b4e:	bf08      	it	eq
   21b50:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b52:	b922      	cbnz	r2, 21b5e <z_impl_k_yield+0xaa>
	node->prev = tail;
   21b54:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   21b58:	600b      	str	r3, [r1, #0]
	list->tail = node;
   21b5a:	6263      	str	r3, [r4, #36]	; 0x24
}
   21b5c:	e00c      	b.n	21b78 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   21b5e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   21b62:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   21b66:	42b8      	cmp	r0, r7
   21b68:	d019      	beq.n	21b9e <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21b6a:	4287      	cmp	r7, r0
   21b6c:	dd17      	ble.n	21b9e <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   21b6e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21b70:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   21b74:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21b76:	6053      	str	r3, [r2, #4]
	update_cache(1);
   21b78:	2001      	movs	r0, #1
   21b7a:	f7ff f885 	bl	20c88 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b7e:	4810      	ldr	r0, [pc, #64]	; (21bc0 <z_impl_k_yield+0x10c>)
   21b80:	f7fd ff34 	bl	1f9ec <z_spin_unlock_valid>
   21b84:	b978      	cbnz	r0, 21ba6 <z_impl_k_yield+0xf2>
   21b86:	23e1      	movs	r3, #225	; 0xe1
   21b88:	4a0e      	ldr	r2, [pc, #56]	; (21bc4 <z_impl_k_yield+0x110>)
   21b8a:	4914      	ldr	r1, [pc, #80]	; (21bdc <z_impl_k_yield+0x128>)
   21b8c:	480a      	ldr	r0, [pc, #40]	; (21bb8 <z_impl_k_yield+0x104>)
   21b8e:	f003 f9a2 	bl	24ed6 <assert_print>
   21b92:	490b      	ldr	r1, [pc, #44]	; (21bc0 <z_impl_k_yield+0x10c>)
   21b94:	4812      	ldr	r0, [pc, #72]	; (21be0 <z_impl_k_yield+0x12c>)
   21b96:	f003 f99e 	bl	24ed6 <assert_print>
   21b9a:	21e1      	movs	r1, #225	; 0xe1
   21b9c:	e7b3      	b.n	21b06 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   21b9e:	428a      	cmp	r2, r1
   21ba0:	d0d8      	beq.n	21b54 <z_impl_k_yield+0xa0>
   21ba2:	6812      	ldr	r2, [r2, #0]
   21ba4:	e7d5      	b.n	21b52 <z_impl_k_yield+0x9e>
   21ba6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   21ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21bac:	f7ee bbc2 	b.w	10334 <arch_swap>
   21bb0:	00030aa1 	.word	0x00030aa1
   21bb4:	00030d0e 	.word	0x00030d0e
   21bb8:	0002b939 	.word	0x0002b939
   21bbc:	0002f575 	.word	0x0002f575
   21bc0:	2002154c 	.word	0x2002154c
   21bc4:	0002c76f 	.word	0x0002c76f
   21bc8:	0002c7c8 	.word	0x0002c7c8
   21bcc:	0002c7dd 	.word	0x0002c7dd
   21bd0:	20021504 	.word	0x20021504
   21bd4:	20009c08 	.word	0x20009c08
   21bd8:	00030d57 	.word	0x00030d57
   21bdc:	0002c79c 	.word	0x0002c79c
   21be0:	0002c7b3 	.word	0x0002c7b3

00021be4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   21be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21be8:	4605      	mov	r5, r0
   21bea:	460e      	mov	r6, r1
   21bec:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21bf0:	b16b      	cbz	r3, 21c0e <z_tick_sleep+0x2a>
   21bf2:	493f      	ldr	r1, [pc, #252]	; (21cf0 <z_tick_sleep+0x10c>)
   21bf4:	f240 538c 	movw	r3, #1420	; 0x58c
   21bf8:	4a3e      	ldr	r2, [pc, #248]	; (21cf4 <z_tick_sleep+0x110>)
   21bfa:	483f      	ldr	r0, [pc, #252]	; (21cf8 <z_tick_sleep+0x114>)
   21bfc:	f003 f96b 	bl	24ed6 <assert_print>
   21c00:	483e      	ldr	r0, [pc, #248]	; (21cfc <z_tick_sleep+0x118>)
   21c02:	f003 f968 	bl	24ed6 <assert_print>
   21c06:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21c0a:	483a      	ldr	r0, [pc, #232]	; (21cf4 <z_tick_sleep+0x110>)
   21c0c:	e025      	b.n	21c5a <z_tick_sleep+0x76>
	if (ticks == 0) {
   21c0e:	ea50 0301 	orrs.w	r3, r0, r1
   21c12:	d103      	bne.n	21c1c <z_tick_sleep+0x38>
	z_impl_k_yield();
   21c14:	f7ff ff4e 	bl	21ab4 <z_impl_k_yield>
		return 0;
   21c18:	2000      	movs	r0, #0
   21c1a:	e066      	b.n	21cea <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   21c1c:	1c82      	adds	r2, r0, #2
   21c1e:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   21c22:	db1c      	blt.n	21c5e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21c24:	f007 fdae 	bl	29784 <sys_clock_tick_get_32>
   21c28:	1944      	adds	r4, r0, r5
   21c2a:	f04f 0320 	mov.w	r3, #32
   21c2e:	f3ef 8811 	mrs	r8, BASEPRI
   21c32:	f383 8812 	msr	BASEPRI_MAX, r3
   21c36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c3a:	4831      	ldr	r0, [pc, #196]	; (21d00 <z_tick_sleep+0x11c>)
   21c3c:	f7fd fec8 	bl	1f9d0 <z_spin_lock_valid>
   21c40:	b988      	cbnz	r0, 21c66 <z_tick_sleep+0x82>
   21c42:	2394      	movs	r3, #148	; 0x94
   21c44:	4a2f      	ldr	r2, [pc, #188]	; (21d04 <z_tick_sleep+0x120>)
   21c46:	4930      	ldr	r1, [pc, #192]	; (21d08 <z_tick_sleep+0x124>)
   21c48:	482b      	ldr	r0, [pc, #172]	; (21cf8 <z_tick_sleep+0x114>)
   21c4a:	f003 f944 	bl	24ed6 <assert_print>
   21c4e:	492c      	ldr	r1, [pc, #176]	; (21d00 <z_tick_sleep+0x11c>)
   21c50:	482e      	ldr	r0, [pc, #184]	; (21d0c <z_tick_sleep+0x128>)
   21c52:	f003 f940 	bl	24ed6 <assert_print>
   21c56:	2194      	movs	r1, #148	; 0x94
   21c58:	482a      	ldr	r0, [pc, #168]	; (21d04 <z_tick_sleep+0x120>)
   21c5a:	f003 f935 	bl	24ec8 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   21c5e:	f06f 0401 	mvn.w	r4, #1
   21c62:	1a24      	subs	r4, r4, r0
   21c64:	e7e1      	b.n	21c2a <z_tick_sleep+0x46>
	pending_current = _current;
   21c66:	4f2a      	ldr	r7, [pc, #168]	; (21d10 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   21c68:	4825      	ldr	r0, [pc, #148]	; (21d00 <z_tick_sleep+0x11c>)
   21c6a:	f7fd fecd 	bl	1fa08 <z_spin_lock_set_owner>
   21c6e:	68b8      	ldr	r0, [r7, #8]
   21c70:	4b28      	ldr	r3, [pc, #160]	; (21d14 <z_tick_sleep+0x130>)
   21c72:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21c74:	f7ff fbd2 	bl	2141c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21c78:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21c7a:	462a      	mov	r2, r5
   21c7c:	4633      	mov	r3, r6
   21c7e:	3018      	adds	r0, #24
   21c80:	4925      	ldr	r1, [pc, #148]	; (21d18 <z_tick_sleep+0x134>)
   21c82:	f000 fa2b 	bl	220dc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21c86:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c88:	481d      	ldr	r0, [pc, #116]	; (21d00 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21c8a:	7b53      	ldrb	r3, [r2, #13]
   21c8c:	f043 0310 	orr.w	r3, r3, #16
   21c90:	7353      	strb	r3, [r2, #13]
   21c92:	f7fd feab 	bl	1f9ec <z_spin_unlock_valid>
   21c96:	b958      	cbnz	r0, 21cb0 <z_tick_sleep+0xcc>
   21c98:	23e1      	movs	r3, #225	; 0xe1
   21c9a:	4a1a      	ldr	r2, [pc, #104]	; (21d04 <z_tick_sleep+0x120>)
   21c9c:	491f      	ldr	r1, [pc, #124]	; (21d1c <z_tick_sleep+0x138>)
   21c9e:	4816      	ldr	r0, [pc, #88]	; (21cf8 <z_tick_sleep+0x114>)
   21ca0:	f003 f919 	bl	24ed6 <assert_print>
   21ca4:	4916      	ldr	r1, [pc, #88]	; (21d00 <z_tick_sleep+0x11c>)
   21ca6:	481e      	ldr	r0, [pc, #120]	; (21d20 <z_tick_sleep+0x13c>)
   21ca8:	f003 f915 	bl	24ed6 <assert_print>
   21cac:	21e1      	movs	r1, #225	; 0xe1
   21cae:	e7d3      	b.n	21c58 <z_tick_sleep+0x74>
   21cb0:	4640      	mov	r0, r8
   21cb2:	f7ee fb3f 	bl	10334 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   21cb6:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21cb8:	7b5b      	ldrb	r3, [r3, #13]
   21cba:	06db      	lsls	r3, r3, #27
   21cbc:	d50c      	bpl.n	21cd8 <z_tick_sleep+0xf4>
   21cbe:	4919      	ldr	r1, [pc, #100]	; (21d24 <z_tick_sleep+0x140>)
   21cc0:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   21cc4:	4a0b      	ldr	r2, [pc, #44]	; (21cf4 <z_tick_sleep+0x110>)
   21cc6:	480c      	ldr	r0, [pc, #48]	; (21cf8 <z_tick_sleep+0x114>)
   21cc8:	f003 f905 	bl	24ed6 <assert_print>
   21ccc:	480b      	ldr	r0, [pc, #44]	; (21cfc <z_tick_sleep+0x118>)
   21cce:	f003 f902 	bl	24ed6 <assert_print>
   21cd2:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   21cd6:	e798      	b.n	21c0a <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21cd8:	f007 fd54 	bl	29784 <sys_clock_tick_get_32>
   21cdc:	1a20      	subs	r0, r4, r0
   21cde:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   21ce2:	2801      	cmp	r0, #1
   21ce4:	f173 0300 	sbcs.w	r3, r3, #0
   21ce8:	db96      	blt.n	21c18 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   21cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21cee:	bf00      	nop
   21cf0:	00030aa1 	.word	0x00030aa1
   21cf4:	00030d0e 	.word	0x00030d0e
   21cf8:	0002b939 	.word	0x0002b939
   21cfc:	0002f575 	.word	0x0002f575
   21d00:	2002154c 	.word	0x2002154c
   21d04:	0002c76f 	.word	0x0002c76f
   21d08:	0002c7c8 	.word	0x0002c7c8
   21d0c:	0002c7dd 	.word	0x0002c7dd
   21d10:	20021504 	.word	0x20021504
   21d14:	20021540 	.word	0x20021540
   21d18:	000218b5 	.word	0x000218b5
   21d1c:	0002c79c 	.word	0x0002c79c
   21d20:	0002c7b3 	.word	0x0002c7b3
   21d24:	00030e53 	.word	0x00030e53

00021d28 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21d28:	b508      	push	{r3, lr}
   21d2a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21d2e:	b173      	cbz	r3, 21d4e <z_impl_k_sleep+0x26>
   21d30:	4912      	ldr	r1, [pc, #72]	; (21d7c <z_impl_k_sleep+0x54>)
   21d32:	f240 53b7 	movw	r3, #1463	; 0x5b7
   21d36:	4a12      	ldr	r2, [pc, #72]	; (21d80 <z_impl_k_sleep+0x58>)
   21d38:	4812      	ldr	r0, [pc, #72]	; (21d84 <z_impl_k_sleep+0x5c>)
   21d3a:	f003 f8cc 	bl	24ed6 <assert_print>
   21d3e:	4812      	ldr	r0, [pc, #72]	; (21d88 <z_impl_k_sleep+0x60>)
   21d40:	f003 f8c9 	bl	24ed6 <assert_print>
   21d44:	f240 51b7 	movw	r1, #1463	; 0x5b7
   21d48:	480d      	ldr	r0, [pc, #52]	; (21d80 <z_impl_k_sleep+0x58>)
   21d4a:	f003 f8bd 	bl	24ec8 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21d4e:	f1b1 3fff 	cmp.w	r1, #4294967295
   21d52:	bf08      	it	eq
   21d54:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   21d58:	d106      	bne.n	21d68 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   21d5a:	4b0c      	ldr	r3, [pc, #48]	; (21d8c <z_impl_k_sleep+0x64>)
   21d5c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21d5e:	f7ff fcd7 	bl	21710 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   21d62:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   21d66:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   21d68:	f7ff ff3c 	bl	21be4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   21d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21d70:	fb80 0303 	smull	r0, r3, r0, r3
   21d74:	0bc0      	lsrs	r0, r0, #15
   21d76:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   21d7a:	e7f4      	b.n	21d66 <z_impl_k_sleep+0x3e>
   21d7c:	00030aa1 	.word	0x00030aa1
   21d80:	00030d0e 	.word	0x00030d0e
   21d84:	0002b939 	.word	0x0002b939
   21d88:	0002f575 	.word	0x0002f575
   21d8c:	20021504 	.word	0x20021504

00021d90 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21d90:	4b01      	ldr	r3, [pc, #4]	; (21d98 <z_impl_z_current_get+0x8>)
   21d92:	6898      	ldr	r0, [r3, #8]
   21d94:	4770      	bx	lr
   21d96:	bf00      	nop
   21d98:	20021504 	.word	0x20021504

00021d9c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   21d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21da0:	4604      	mov	r4, r0
   21da2:	f04f 0320 	mov.w	r3, #32
   21da6:	f3ef 8611 	mrs	r6, BASEPRI
   21daa:	f383 8812 	msr	BASEPRI_MAX, r3
   21dae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21db2:	4851      	ldr	r0, [pc, #324]	; (21ef8 <z_thread_abort+0x15c>)
   21db4:	f7fd fe0c 	bl	1f9d0 <z_spin_lock_valid>
   21db8:	b968      	cbnz	r0, 21dd6 <z_thread_abort+0x3a>
   21dba:	2394      	movs	r3, #148	; 0x94
   21dbc:	4a4f      	ldr	r2, [pc, #316]	; (21efc <z_thread_abort+0x160>)
   21dbe:	4950      	ldr	r1, [pc, #320]	; (21f00 <z_thread_abort+0x164>)
   21dc0:	4850      	ldr	r0, [pc, #320]	; (21f04 <z_thread_abort+0x168>)
   21dc2:	f003 f888 	bl	24ed6 <assert_print>
   21dc6:	494c      	ldr	r1, [pc, #304]	; (21ef8 <z_thread_abort+0x15c>)
   21dc8:	484f      	ldr	r0, [pc, #316]	; (21f08 <z_thread_abort+0x16c>)
   21dca:	f003 f884 	bl	24ed6 <assert_print>
   21dce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dd0:	484a      	ldr	r0, [pc, #296]	; (21efc <z_thread_abort+0x160>)
   21dd2:	f003 f879 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21dd6:	4848      	ldr	r0, [pc, #288]	; (21ef8 <z_thread_abort+0x15c>)
   21dd8:	f7fd fe16 	bl	1fa08 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   21ddc:	7b23      	ldrb	r3, [r4, #12]
   21dde:	07d9      	lsls	r1, r3, #31
   21de0:	d522      	bpl.n	21e28 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21de2:	4845      	ldr	r0, [pc, #276]	; (21ef8 <z_thread_abort+0x15c>)
   21de4:	f7fd fe02 	bl	1f9ec <z_spin_unlock_valid>
   21de8:	b958      	cbnz	r0, 21e02 <z_thread_abort+0x66>
   21dea:	23c2      	movs	r3, #194	; 0xc2
   21dec:	4a43      	ldr	r2, [pc, #268]	; (21efc <z_thread_abort+0x160>)
   21dee:	4947      	ldr	r1, [pc, #284]	; (21f0c <z_thread_abort+0x170>)
   21df0:	4844      	ldr	r0, [pc, #272]	; (21f04 <z_thread_abort+0x168>)
   21df2:	f003 f870 	bl	24ed6 <assert_print>
   21df6:	4940      	ldr	r1, [pc, #256]	; (21ef8 <z_thread_abort+0x15c>)
   21df8:	4845      	ldr	r0, [pc, #276]	; (21f10 <z_thread_abort+0x174>)
   21dfa:	f003 f86c 	bl	24ed6 <assert_print>
   21dfe:	21c2      	movs	r1, #194	; 0xc2
   21e00:	e7e6      	b.n	21dd0 <z_thread_abort+0x34>
	__asm__ volatile(
   21e02:	f386 8811 	msr	BASEPRI, r6
   21e06:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   21e0a:	f240 63c3 	movw	r3, #1731	; 0x6c3
   21e0e:	4a41      	ldr	r2, [pc, #260]	; (21f14 <z_thread_abort+0x178>)
   21e10:	4941      	ldr	r1, [pc, #260]	; (21f18 <z_thread_abort+0x17c>)
   21e12:	483c      	ldr	r0, [pc, #240]	; (21f04 <z_thread_abort+0x168>)
   21e14:	f003 f85f 	bl	24ed6 <assert_print>
   21e18:	4621      	mov	r1, r4
   21e1a:	4840      	ldr	r0, [pc, #256]	; (21f1c <z_thread_abort+0x180>)
   21e1c:	f003 f85b 	bl	24ed6 <assert_print>
   21e20:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   21e24:	483b      	ldr	r0, [pc, #236]	; (21f14 <z_thread_abort+0x178>)
   21e26:	e7d4      	b.n	21dd2 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21e28:	7b63      	ldrb	r3, [r4, #13]
   21e2a:	071a      	lsls	r2, r3, #28
   21e2c:	d50a      	bpl.n	21e44 <z_thread_abort+0xa8>
   21e2e:	4832      	ldr	r0, [pc, #200]	; (21ef8 <z_thread_abort+0x15c>)
   21e30:	f7fd fddc 	bl	1f9ec <z_spin_unlock_valid>
   21e34:	2800      	cmp	r0, #0
   21e36:	d0d8      	beq.n	21dea <z_thread_abort+0x4e>
   21e38:	f386 8811 	msr	BASEPRI, r6
   21e3c:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   21e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21e44:	f023 0220 	bic.w	r2, r3, #32
   21e48:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   21e4c:	09d2      	lsrs	r2, r2, #7
   21e4e:	d12c      	bne.n	21eaa <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21e50:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   21e52:	68a3      	ldr	r3, [r4, #8]
   21e54:	b113      	cbz	r3, 21e5c <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   21e56:	4620      	mov	r0, r4
   21e58:	f7ff fcc2 	bl	217e0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   21e5c:	f104 0018 	add.w	r0, r4, #24
   21e60:	f000 fa02 	bl	22268 <z_abort_timeout>
   21e64:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21e68:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   21e6c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21e6e:	42bd      	cmp	r5, r7
   21e70:	d000      	beq.n	21e74 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21e72:	bb25      	cbnz	r5, 21ebe <z_thread_abort+0x122>
		update_cache(1);
   21e74:	2001      	movs	r0, #1
   21e76:	f7fe ff07 	bl	20c88 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   21e7a:	4b29      	ldr	r3, [pc, #164]	; (21f20 <z_thread_abort+0x184>)
   21e7c:	689b      	ldr	r3, [r3, #8]
   21e7e:	42a3      	cmp	r3, r4
   21e80:	d1d5      	bne.n	21e2e <z_thread_abort+0x92>
   21e82:	f3ef 8305 	mrs	r3, IPSR
   21e86:	2b00      	cmp	r3, #0
   21e88:	d1d1      	bne.n	21e2e <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e8a:	481b      	ldr	r0, [pc, #108]	; (21ef8 <z_thread_abort+0x15c>)
   21e8c:	f7fd fdae 	bl	1f9ec <z_spin_unlock_valid>
   21e90:	bb10      	cbnz	r0, 21ed8 <z_thread_abort+0x13c>
   21e92:	23e1      	movs	r3, #225	; 0xe1
   21e94:	4a19      	ldr	r2, [pc, #100]	; (21efc <z_thread_abort+0x160>)
   21e96:	491d      	ldr	r1, [pc, #116]	; (21f0c <z_thread_abort+0x170>)
   21e98:	481a      	ldr	r0, [pc, #104]	; (21f04 <z_thread_abort+0x168>)
   21e9a:	f003 f81c 	bl	24ed6 <assert_print>
   21e9e:	4916      	ldr	r1, [pc, #88]	; (21ef8 <z_thread_abort+0x15c>)
   21ea0:	481b      	ldr	r0, [pc, #108]	; (21f10 <z_thread_abort+0x174>)
   21ea2:	f003 f818 	bl	24ed6 <assert_print>
   21ea6:	21e1      	movs	r1, #225	; 0xe1
   21ea8:	e792      	b.n	21dd0 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21eaa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   21eae:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   21eb2:	4621      	mov	r1, r4
   21eb4:	481b      	ldr	r0, [pc, #108]	; (21f24 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21eb6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21eb8:	f7ff f9c8 	bl	2124c <z_priq_dumb_remove>
}
   21ebc:	e7c9      	b.n	21e52 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   21ebe:	4628      	mov	r0, r5
   21ec0:	f7ff fc8e 	bl	217e0 <unpend_thread_no_timeout>
   21ec4:	f105 0018 	add.w	r0, r5, #24
   21ec8:	f000 f9ce 	bl	22268 <z_abort_timeout>
		ready_thread(thread);
   21ecc:	4628      	mov	r0, r5
   21ece:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   21ed2:	f7fe ff0d 	bl	20cf0 <ready_thread>
   21ed6:	e7c9      	b.n	21e6c <z_thread_abort+0xd0>
   21ed8:	4630      	mov	r0, r6
   21eda:	f7ee fa2b 	bl	10334 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   21ede:	490e      	ldr	r1, [pc, #56]	; (21f18 <z_thread_abort+0x17c>)
   21ee0:	f240 63f2 	movw	r3, #1778	; 0x6f2
   21ee4:	4a0b      	ldr	r2, [pc, #44]	; (21f14 <z_thread_abort+0x178>)
   21ee6:	4807      	ldr	r0, [pc, #28]	; (21f04 <z_thread_abort+0x168>)
   21ee8:	f002 fff5 	bl	24ed6 <assert_print>
   21eec:	480e      	ldr	r0, [pc, #56]	; (21f28 <z_thread_abort+0x18c>)
   21eee:	f002 fff2 	bl	24ed6 <assert_print>
   21ef2:	f240 61f2 	movw	r1, #1778	; 0x6f2
   21ef6:	e795      	b.n	21e24 <z_thread_abort+0x88>
   21ef8:	2002154c 	.word	0x2002154c
   21efc:	0002c76f 	.word	0x0002c76f
   21f00:	0002c7c8 	.word	0x0002c7c8
   21f04:	0002b939 	.word	0x0002b939
   21f08:	0002c7dd 	.word	0x0002c7dd
   21f0c:	0002c79c 	.word	0x0002c79c
   21f10:	0002c7b3 	.word	0x0002c7b3
   21f14:	00030d0e 	.word	0x00030d0e
   21f18:	000311d2 	.word	0x000311d2
   21f1c:	00030e93 	.word	0x00030e93
   21f20:	20021504 	.word	0x20021504
   21f24:	20021524 	.word	0x20021524
   21f28:	00030eb2 	.word	0x00030eb2

00021f2c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   21f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21f30:	4606      	mov	r6, r0
   21f32:	4688      	mov	r8, r1
   21f34:	4617      	mov	r7, r2
	__asm__ volatile(
   21f36:	f04f 0320 	mov.w	r3, #32
   21f3a:	f3ef 8911 	mrs	r9, BASEPRI
   21f3e:	f383 8812 	msr	BASEPRI_MAX, r3
   21f42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f46:	4821      	ldr	r0, [pc, #132]	; (21fcc <z_sched_wake+0xa0>)
   21f48:	f7fd fd42 	bl	1f9d0 <z_spin_lock_valid>
   21f4c:	4605      	mov	r5, r0
   21f4e:	b968      	cbnz	r0, 21f6c <z_sched_wake+0x40>
   21f50:	2394      	movs	r3, #148	; 0x94
   21f52:	4a1f      	ldr	r2, [pc, #124]	; (21fd0 <z_sched_wake+0xa4>)
   21f54:	491f      	ldr	r1, [pc, #124]	; (21fd4 <z_sched_wake+0xa8>)
   21f56:	4820      	ldr	r0, [pc, #128]	; (21fd8 <z_sched_wake+0xac>)
   21f58:	f002 ffbd 	bl	24ed6 <assert_print>
   21f5c:	491b      	ldr	r1, [pc, #108]	; (21fcc <z_sched_wake+0xa0>)
   21f5e:	481f      	ldr	r0, [pc, #124]	; (21fdc <z_sched_wake+0xb0>)
   21f60:	f002 ffb9 	bl	24ed6 <assert_print>
   21f64:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f66:	481a      	ldr	r0, [pc, #104]	; (21fd0 <z_sched_wake+0xa4>)
   21f68:	f002 ffae 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f6c:	4817      	ldr	r0, [pc, #92]	; (21fcc <z_sched_wake+0xa0>)
   21f6e:	f7fd fd4b 	bl	1fa08 <z_spin_lock_set_owner>
	return list->head == list;
   21f72:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f74:	42a6      	cmp	r6, r4
   21f76:	d01d      	beq.n	21fb4 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   21f78:	b1f4      	cbz	r4, 21fb8 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   21f7a:	4620      	mov	r0, r4
   21f7c:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   21f80:	6167      	str	r7, [r4, #20]
   21f82:	f7ff fc2d 	bl	217e0 <unpend_thread_no_timeout>
   21f86:	f104 0018 	add.w	r0, r4, #24
   21f8a:	f000 f96d 	bl	22268 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   21f8e:	4620      	mov	r0, r4
   21f90:	f7fe feae 	bl	20cf0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f94:	480d      	ldr	r0, [pc, #52]	; (21fcc <z_sched_wake+0xa0>)
   21f96:	f7fd fd29 	bl	1f9ec <z_spin_unlock_valid>
   21f9a:	b978      	cbnz	r0, 21fbc <z_sched_wake+0x90>
   21f9c:	23c2      	movs	r3, #194	; 0xc2
   21f9e:	4a0c      	ldr	r2, [pc, #48]	; (21fd0 <z_sched_wake+0xa4>)
   21fa0:	490f      	ldr	r1, [pc, #60]	; (21fe0 <z_sched_wake+0xb4>)
   21fa2:	480d      	ldr	r0, [pc, #52]	; (21fd8 <z_sched_wake+0xac>)
   21fa4:	f002 ff97 	bl	24ed6 <assert_print>
   21fa8:	4908      	ldr	r1, [pc, #32]	; (21fcc <z_sched_wake+0xa0>)
   21faa:	480e      	ldr	r0, [pc, #56]	; (21fe4 <z_sched_wake+0xb8>)
   21fac:	f002 ff93 	bl	24ed6 <assert_print>
   21fb0:	21c2      	movs	r1, #194	; 0xc2
   21fb2:	e7d8      	b.n	21f66 <z_sched_wake+0x3a>
	bool ret = false;
   21fb4:	2500      	movs	r5, #0
   21fb6:	e7ed      	b.n	21f94 <z_sched_wake+0x68>
   21fb8:	4625      	mov	r5, r4
   21fba:	e7eb      	b.n	21f94 <z_sched_wake+0x68>
	__asm__ volatile(
   21fbc:	f389 8811 	msr	BASEPRI, r9
   21fc0:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   21fc4:	4628      	mov	r0, r5
   21fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21fca:	bf00      	nop
   21fcc:	2002154c 	.word	0x2002154c
   21fd0:	0002c76f 	.word	0x0002c76f
   21fd4:	0002c7c8 	.word	0x0002c7c8
   21fd8:	0002b939 	.word	0x0002b939
   21fdc:	0002c7dd 	.word	0x0002c7dd
   21fe0:	0002c79c 	.word	0x0002c79c
   21fe4:	0002c7b3 	.word	0x0002c7b3

00021fe8 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21fe8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21fea:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   21fee:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21ff0:	e9cd 6700 	strd	r6, r7, [sp]
   21ff4:	f7ff fa84 	bl	21500 <z_pend_curr>

	if (data != NULL) {
   21ff8:	b11c      	cbz	r4, 22002 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21ffa:	4b03      	ldr	r3, [pc, #12]	; (22008 <z_sched_wait+0x20>)
   21ffc:	689b      	ldr	r3, [r3, #8]
   21ffe:	695b      	ldr	r3, [r3, #20]
   22000:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22002:	b002      	add	sp, #8
   22004:	bdd0      	pop	{r4, r6, r7, pc}
   22006:	bf00      	nop
   22008:	20021504 	.word	0x20021504

0002200c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2200c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2200e:	4806      	ldr	r0, [pc, #24]	; (22028 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22010:	4a06      	ldr	r2, [pc, #24]	; (2202c <z_data_copy+0x20>)
   22012:	4907      	ldr	r1, [pc, #28]	; (22030 <z_data_copy+0x24>)
   22014:	1a12      	subs	r2, r2, r0
   22016:	f007 fa9f 	bl	29558 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2201a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2201e:	4a05      	ldr	r2, [pc, #20]	; (22034 <z_data_copy+0x28>)
   22020:	4905      	ldr	r1, [pc, #20]	; (22038 <z_data_copy+0x2c>)
   22022:	4806      	ldr	r0, [pc, #24]	; (2203c <z_data_copy+0x30>)
   22024:	f007 ba98 	b.w	29558 <z_early_memcpy>
   22028:	20008000 	.word	0x20008000
   2202c:	20008d70 	.word	0x20008d70
   22030:	0003154c 	.word	0x0003154c
   22034:	00000000 	.word	0x00000000
   22038:	0003154c 	.word	0x0003154c
   2203c:	20008000 	.word	0x20008000

00022040 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22040:	4b03      	ldr	r3, [pc, #12]	; (22050 <elapsed+0x10>)
   22042:	681b      	ldr	r3, [r3, #0]
   22044:	b90b      	cbnz	r3, 2204a <elapsed+0xa>
   22046:	f7fa baa1 	b.w	1c58c <sys_clock_elapsed>
}
   2204a:	2000      	movs	r0, #0
   2204c:	4770      	bx	lr
   2204e:	bf00      	nop
   22050:	20021550 	.word	0x20021550

00022054 <next_timeout>:

static int32_t next_timeout(void)
{
   22054:	b510      	push	{r4, lr}
	return list->head == list;
   22056:	4b11      	ldr	r3, [pc, #68]	; (2209c <next_timeout+0x48>)
   22058:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2205a:	429c      	cmp	r4, r3
   2205c:	d10a      	bne.n	22074 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2205e:	f7ff ffef 	bl	22040 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   22062:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22066:	4b0e      	ldr	r3, [pc, #56]	; (220a0 <next_timeout+0x4c>)
   22068:	691b      	ldr	r3, [r3, #16]
   2206a:	b113      	cbz	r3, 22072 <next_timeout+0x1e>
   2206c:	4298      	cmp	r0, r3
   2206e:	bfa8      	it	ge
   22070:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22072:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   22074:	f7ff ffe4 	bl	22040 <elapsed>
	if ((to == NULL) ||
   22078:	2c00      	cmp	r4, #0
   2207a:	d0f2      	beq.n	22062 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2207c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22080:	1a1b      	subs	r3, r3, r0
   22082:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   22086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2208a:	f172 0100 	sbcs.w	r1, r2, #0
   2208e:	dae8      	bge.n	22062 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   22090:	2a00      	cmp	r2, #0
   22092:	bfac      	ite	ge
   22094:	4618      	movge	r0, r3
   22096:	2000      	movlt	r0, #0
   22098:	e7e5      	b.n	22066 <next_timeout+0x12>
   2209a:	bf00      	nop
   2209c:	20008734 	.word	0x20008734
   220a0:	20021504 	.word	0x20021504

000220a4 <remove_timeout>:
{
   220a4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   220a6:	b170      	cbz	r0, 220c6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   220a8:	4b0b      	ldr	r3, [pc, #44]	; (220d8 <remove_timeout+0x34>)
   220aa:	685b      	ldr	r3, [r3, #4]
   220ac:	4298      	cmp	r0, r3
   220ae:	d00a      	beq.n	220c6 <remove_timeout+0x22>
   220b0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   220b2:	b143      	cbz	r3, 220c6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   220b4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   220b8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   220bc:	1912      	adds	r2, r2, r4
   220be:	eb41 0105 	adc.w	r1, r1, r5
   220c2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   220c6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   220ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   220cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   220ce:	2300      	movs	r3, #0
	node->prev = NULL;
   220d0:	e9c0 3300 	strd	r3, r3, [r0]
}
   220d4:	bd30      	pop	{r4, r5, pc}
   220d6:	bf00      	nop
   220d8:	20008734 	.word	0x20008734

000220dc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   220dc:	f1b3 3fff 	cmp.w	r3, #4294967295
   220e0:	bf08      	it	eq
   220e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   220e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   220ea:	4604      	mov	r4, r0
   220ec:	4692      	mov	sl, r2
   220ee:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   220f0:	f000 809e 	beq.w	22230 <z_add_timeout+0x154>
	return node->next != NULL;
   220f4:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   220f6:	b166      	cbz	r6, 22112 <z_add_timeout+0x36>
   220f8:	494e      	ldr	r1, [pc, #312]	; (22234 <z_add_timeout+0x158>)
   220fa:	2363      	movs	r3, #99	; 0x63
   220fc:	4a4e      	ldr	r2, [pc, #312]	; (22238 <z_add_timeout+0x15c>)
   220fe:	484f      	ldr	r0, [pc, #316]	; (2223c <z_add_timeout+0x160>)
   22100:	f002 fee9 	bl	24ed6 <assert_print>
   22104:	484e      	ldr	r0, [pc, #312]	; (22240 <z_add_timeout+0x164>)
   22106:	f002 fee6 	bl	24ed6 <assert_print>
   2210a:	2163      	movs	r1, #99	; 0x63
   2210c:	484a      	ldr	r0, [pc, #296]	; (22238 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2210e:	f002 fedb 	bl	24ec8 <assert_post_action>
	to->fn = fn;
   22112:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22114:	f04f 0320 	mov.w	r3, #32
   22118:	f3ef 8711 	mrs	r7, BASEPRI
   2211c:	f383 8812 	msr	BASEPRI_MAX, r3
   22120:	f3bf 8f6f 	isb	sy
   22124:	4847      	ldr	r0, [pc, #284]	; (22244 <z_add_timeout+0x168>)
   22126:	f7fd fc53 	bl	1f9d0 <z_spin_lock_valid>
   2212a:	b960      	cbnz	r0, 22146 <z_add_timeout+0x6a>
   2212c:	2394      	movs	r3, #148	; 0x94
   2212e:	4a46      	ldr	r2, [pc, #280]	; (22248 <z_add_timeout+0x16c>)
   22130:	4946      	ldr	r1, [pc, #280]	; (2224c <z_add_timeout+0x170>)
   22132:	4842      	ldr	r0, [pc, #264]	; (2223c <z_add_timeout+0x160>)
   22134:	f002 fecf 	bl	24ed6 <assert_print>
   22138:	4942      	ldr	r1, [pc, #264]	; (22244 <z_add_timeout+0x168>)
   2213a:	4845      	ldr	r0, [pc, #276]	; (22250 <z_add_timeout+0x174>)
   2213c:	f002 fecb 	bl	24ed6 <assert_print>
   22140:	2194      	movs	r1, #148	; 0x94
   22142:	4841      	ldr	r0, [pc, #260]	; (22248 <z_add_timeout+0x16c>)
   22144:	e7e3      	b.n	2210e <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   22146:	483f      	ldr	r0, [pc, #252]	; (22244 <z_add_timeout+0x168>)
   22148:	f7fd fc5e 	bl	1fa08 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2214c:	f1ba 3fff 	cmp.w	sl, #4294967295
   22150:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   22154:	da23      	bge.n	2219e <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22156:	f06f 0301 	mvn.w	r3, #1
   2215a:	493e      	ldr	r1, [pc, #248]	; (22254 <z_add_timeout+0x178>)
   2215c:	e9d1 2000 	ldrd	r2, r0, [r1]
   22160:	1a9b      	subs	r3, r3, r2
   22162:	f04f 32ff 	mov.w	r2, #4294967295
   22166:	eb62 0000 	sbc.w	r0, r2, r0
   2216a:	ebb3 030a 	subs.w	r3, r3, sl
   2216e:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   22172:	2b01      	cmp	r3, #1
   22174:	f170 0200 	sbcs.w	r2, r0, #0
   22178:	da01      	bge.n	2217e <z_add_timeout+0xa2>
   2217a:	2301      	movs	r3, #1
   2217c:	4630      	mov	r0, r6
   2217e:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   22182:	4b35      	ldr	r3, [pc, #212]	; (22258 <z_add_timeout+0x17c>)
   22184:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   22186:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2218a:	429a      	cmp	r2, r3
   2218c:	bf18      	it	ne
   2218e:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   22190:	b986      	cbnz	r6, 221b4 <z_add_timeout+0xd8>
	node->prev = tail;
   22192:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   22196:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2219a:	605c      	str	r4, [r3, #4]
}
   2219c:	e01c      	b.n	221d8 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   2219e:	f7ff ff4f 	bl	22040 <elapsed>
   221a2:	f11a 0801 	adds.w	r8, sl, #1
   221a6:	f145 0500 	adc.w	r5, r5, #0
   221aa:	eb18 0300 	adds.w	r3, r8, r0
   221ae:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   221b2:	e7e4      	b.n	2217e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   221b4:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   221b8:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   221bc:	428a      	cmp	r2, r1
   221be:	eb70 0e05 	sbcs.w	lr, r0, r5
   221c2:	da28      	bge.n	22216 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   221c4:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   221c6:	6872      	ldr	r2, [r6, #4]
   221c8:	eb65 0500 	sbc.w	r5, r5, r0
   221cc:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   221d0:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   221d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   221d6:	6074      	str	r4, [r6, #4]
	return list->head == list;
   221d8:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   221da:	429a      	cmp	r2, r3
   221dc:	d00b      	beq.n	221f6 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   221de:	4294      	cmp	r4, r2
   221e0:	d109      	bne.n	221f6 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   221e2:	f7ff ff37 	bl	22054 <next_timeout>

			if (next_time == 0 ||
   221e6:	b118      	cbz	r0, 221f0 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   221e8:	4b1c      	ldr	r3, [pc, #112]	; (2225c <z_add_timeout+0x180>)
			if (next_time == 0 ||
   221ea:	691b      	ldr	r3, [r3, #16]
   221ec:	4283      	cmp	r3, r0
   221ee:	d002      	beq.n	221f6 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   221f0:	2100      	movs	r1, #0
   221f2:	f7fa f99b 	bl	1c52c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221f6:	4813      	ldr	r0, [pc, #76]	; (22244 <z_add_timeout+0x168>)
   221f8:	f7fd fbf8 	bl	1f9ec <z_spin_unlock_valid>
   221fc:	b9a0      	cbnz	r0, 22228 <z_add_timeout+0x14c>
   221fe:	23c2      	movs	r3, #194	; 0xc2
   22200:	4a11      	ldr	r2, [pc, #68]	; (22248 <z_add_timeout+0x16c>)
   22202:	4917      	ldr	r1, [pc, #92]	; (22260 <z_add_timeout+0x184>)
   22204:	480d      	ldr	r0, [pc, #52]	; (2223c <z_add_timeout+0x160>)
   22206:	f002 fe66 	bl	24ed6 <assert_print>
   2220a:	490e      	ldr	r1, [pc, #56]	; (22244 <z_add_timeout+0x168>)
   2220c:	4815      	ldr	r0, [pc, #84]	; (22264 <z_add_timeout+0x188>)
   2220e:	f002 fe62 	bl	24ed6 <assert_print>
   22212:	21c2      	movs	r1, #194	; 0xc2
   22214:	e795      	b.n	22142 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   22216:	1a52      	subs	r2, r2, r1
   22218:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2221c:	4566      	cmp	r6, ip
   2221e:	e9c4 2004 	strd	r2, r0, [r4, #16]
   22222:	d0b6      	beq.n	22192 <z_add_timeout+0xb6>
   22224:	6836      	ldr	r6, [r6, #0]
   22226:	e7b3      	b.n	22190 <z_add_timeout+0xb4>
	__asm__ volatile(
   22228:	f387 8811 	msr	BASEPRI, r7
   2222c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22234:	00030ef8 	.word	0x00030ef8
   22238:	00030ed4 	.word	0x00030ed4
   2223c:	0002b939 	.word	0x0002b939
   22240:	0002f575 	.word	0x0002f575
   22244:	20021554 	.word	0x20021554
   22248:	0002c76f 	.word	0x0002c76f
   2224c:	0002c7c8 	.word	0x0002c7c8
   22250:	0002c7dd 	.word	0x0002c7dd
   22254:	20009dc0 	.word	0x20009dc0
   22258:	20008734 	.word	0x20008734
   2225c:	20021504 	.word	0x20021504
   22260:	0002c79c 	.word	0x0002c79c
   22264:	0002c7b3 	.word	0x0002c7b3

00022268 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   22268:	b538      	push	{r3, r4, r5, lr}
   2226a:	4604      	mov	r4, r0
	__asm__ volatile(
   2226c:	f04f 0320 	mov.w	r3, #32
   22270:	f3ef 8511 	mrs	r5, BASEPRI
   22274:	f383 8812 	msr	BASEPRI_MAX, r3
   22278:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2227c:	4819      	ldr	r0, [pc, #100]	; (222e4 <z_abort_timeout+0x7c>)
   2227e:	f7fd fba7 	bl	1f9d0 <z_spin_lock_valid>
   22282:	b968      	cbnz	r0, 222a0 <z_abort_timeout+0x38>
   22284:	2394      	movs	r3, #148	; 0x94
   22286:	4a18      	ldr	r2, [pc, #96]	; (222e8 <z_abort_timeout+0x80>)
   22288:	4918      	ldr	r1, [pc, #96]	; (222ec <z_abort_timeout+0x84>)
   2228a:	4819      	ldr	r0, [pc, #100]	; (222f0 <z_abort_timeout+0x88>)
   2228c:	f002 fe23 	bl	24ed6 <assert_print>
   22290:	4914      	ldr	r1, [pc, #80]	; (222e4 <z_abort_timeout+0x7c>)
   22292:	4818      	ldr	r0, [pc, #96]	; (222f4 <z_abort_timeout+0x8c>)
   22294:	f002 fe1f 	bl	24ed6 <assert_print>
   22298:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2229a:	4813      	ldr	r0, [pc, #76]	; (222e8 <z_abort_timeout+0x80>)
   2229c:	f002 fe14 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   222a0:	4810      	ldr	r0, [pc, #64]	; (222e4 <z_abort_timeout+0x7c>)
   222a2:	f7fd fbb1 	bl	1fa08 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   222a6:	6823      	ldr	r3, [r4, #0]
   222a8:	b19b      	cbz	r3, 222d2 <z_abort_timeout+0x6a>
			remove_timeout(to);
   222aa:	4620      	mov	r0, r4
   222ac:	f7ff fefa 	bl	220a4 <remove_timeout>
			ret = 0;
   222b0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222b2:	480c      	ldr	r0, [pc, #48]	; (222e4 <z_abort_timeout+0x7c>)
   222b4:	f7fd fb9a 	bl	1f9ec <z_spin_unlock_valid>
   222b8:	b970      	cbnz	r0, 222d8 <z_abort_timeout+0x70>
   222ba:	23c2      	movs	r3, #194	; 0xc2
   222bc:	4a0a      	ldr	r2, [pc, #40]	; (222e8 <z_abort_timeout+0x80>)
   222be:	490e      	ldr	r1, [pc, #56]	; (222f8 <z_abort_timeout+0x90>)
   222c0:	480b      	ldr	r0, [pc, #44]	; (222f0 <z_abort_timeout+0x88>)
   222c2:	f002 fe08 	bl	24ed6 <assert_print>
   222c6:	4907      	ldr	r1, [pc, #28]	; (222e4 <z_abort_timeout+0x7c>)
   222c8:	480c      	ldr	r0, [pc, #48]	; (222fc <z_abort_timeout+0x94>)
   222ca:	f002 fe04 	bl	24ed6 <assert_print>
   222ce:	21c2      	movs	r1, #194	; 0xc2
   222d0:	e7e3      	b.n	2229a <z_abort_timeout+0x32>
	int ret = -EINVAL;
   222d2:	f06f 0415 	mvn.w	r4, #21
   222d6:	e7ec      	b.n	222b2 <z_abort_timeout+0x4a>
	__asm__ volatile(
   222d8:	f385 8811 	msr	BASEPRI, r5
   222dc:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   222e0:	4620      	mov	r0, r4
   222e2:	bd38      	pop	{r3, r4, r5, pc}
   222e4:	20021554 	.word	0x20021554
   222e8:	0002c76f 	.word	0x0002c76f
   222ec:	0002c7c8 	.word	0x0002c7c8
   222f0:	0002b939 	.word	0x0002b939
   222f4:	0002c7dd 	.word	0x0002c7dd
   222f8:	0002c79c 	.word	0x0002c79c
   222fc:	0002c7b3 	.word	0x0002c7b3

00022300 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   22300:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22302:	f04f 0320 	mov.w	r3, #32
   22306:	f3ef 8511 	mrs	r5, BASEPRI
   2230a:	f383 8812 	msr	BASEPRI_MAX, r3
   2230e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22312:	4817      	ldr	r0, [pc, #92]	; (22370 <z_get_next_timeout_expiry+0x70>)
   22314:	f7fd fb5c 	bl	1f9d0 <z_spin_lock_valid>
   22318:	b968      	cbnz	r0, 22336 <z_get_next_timeout_expiry+0x36>
   2231a:	2394      	movs	r3, #148	; 0x94
   2231c:	4a15      	ldr	r2, [pc, #84]	; (22374 <z_get_next_timeout_expiry+0x74>)
   2231e:	4916      	ldr	r1, [pc, #88]	; (22378 <z_get_next_timeout_expiry+0x78>)
   22320:	4816      	ldr	r0, [pc, #88]	; (2237c <z_get_next_timeout_expiry+0x7c>)
   22322:	f002 fdd8 	bl	24ed6 <assert_print>
   22326:	4912      	ldr	r1, [pc, #72]	; (22370 <z_get_next_timeout_expiry+0x70>)
   22328:	4815      	ldr	r0, [pc, #84]	; (22380 <z_get_next_timeout_expiry+0x80>)
   2232a:	f002 fdd4 	bl	24ed6 <assert_print>
   2232e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22330:	4810      	ldr	r0, [pc, #64]	; (22374 <z_get_next_timeout_expiry+0x74>)
   22332:	f002 fdc9 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22336:	480e      	ldr	r0, [pc, #56]	; (22370 <z_get_next_timeout_expiry+0x70>)
   22338:	f7fd fb66 	bl	1fa08 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2233c:	f7ff fe8a 	bl	22054 <next_timeout>
   22340:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22342:	480b      	ldr	r0, [pc, #44]	; (22370 <z_get_next_timeout_expiry+0x70>)
   22344:	f7fd fb52 	bl	1f9ec <z_spin_unlock_valid>
   22348:	b958      	cbnz	r0, 22362 <z_get_next_timeout_expiry+0x62>
   2234a:	23c2      	movs	r3, #194	; 0xc2
   2234c:	4a09      	ldr	r2, [pc, #36]	; (22374 <z_get_next_timeout_expiry+0x74>)
   2234e:	490d      	ldr	r1, [pc, #52]	; (22384 <z_get_next_timeout_expiry+0x84>)
   22350:	480a      	ldr	r0, [pc, #40]	; (2237c <z_get_next_timeout_expiry+0x7c>)
   22352:	f002 fdc0 	bl	24ed6 <assert_print>
   22356:	4906      	ldr	r1, [pc, #24]	; (22370 <z_get_next_timeout_expiry+0x70>)
   22358:	480b      	ldr	r0, [pc, #44]	; (22388 <z_get_next_timeout_expiry+0x88>)
   2235a:	f002 fdbc 	bl	24ed6 <assert_print>
   2235e:	21c2      	movs	r1, #194	; 0xc2
   22360:	e7e6      	b.n	22330 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   22362:	f385 8811 	msr	BASEPRI, r5
   22366:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2236a:	4620      	mov	r0, r4
   2236c:	bd38      	pop	{r3, r4, r5, pc}
   2236e:	bf00      	nop
   22370:	20021554 	.word	0x20021554
   22374:	0002c76f 	.word	0x0002c76f
   22378:	0002c7c8 	.word	0x0002c7c8
   2237c:	0002b939 	.word	0x0002b939
   22380:	0002c7dd 	.word	0x0002c7dd
   22384:	0002c79c 	.word	0x0002c79c
   22388:	0002c7b3 	.word	0x0002c7b3

0002238c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   2238c:	b570      	push	{r4, r5, r6, lr}
   2238e:	4604      	mov	r4, r0
   22390:	460d      	mov	r5, r1
	__asm__ volatile(
   22392:	f04f 0320 	mov.w	r3, #32
   22396:	f3ef 8611 	mrs	r6, BASEPRI
   2239a:	f383 8812 	msr	BASEPRI_MAX, r3
   2239e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223a2:	481b      	ldr	r0, [pc, #108]	; (22410 <z_set_timeout_expiry+0x84>)
   223a4:	f7fd fb14 	bl	1f9d0 <z_spin_lock_valid>
   223a8:	b968      	cbnz	r0, 223c6 <z_set_timeout_expiry+0x3a>
   223aa:	2394      	movs	r3, #148	; 0x94
   223ac:	4a19      	ldr	r2, [pc, #100]	; (22414 <z_set_timeout_expiry+0x88>)
   223ae:	491a      	ldr	r1, [pc, #104]	; (22418 <z_set_timeout_expiry+0x8c>)
   223b0:	481a      	ldr	r0, [pc, #104]	; (2241c <z_set_timeout_expiry+0x90>)
   223b2:	f002 fd90 	bl	24ed6 <assert_print>
   223b6:	4916      	ldr	r1, [pc, #88]	; (22410 <z_set_timeout_expiry+0x84>)
   223b8:	4819      	ldr	r0, [pc, #100]	; (22420 <z_set_timeout_expiry+0x94>)
   223ba:	f002 fd8c 	bl	24ed6 <assert_print>
   223be:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223c0:	4814      	ldr	r0, [pc, #80]	; (22414 <z_set_timeout_expiry+0x88>)
   223c2:	f002 fd81 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   223c6:	4812      	ldr	r0, [pc, #72]	; (22410 <z_set_timeout_expiry+0x84>)
   223c8:	f7fd fb1e 	bl	1fa08 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   223cc:	f7ff fe42 	bl	22054 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   223d0:	2801      	cmp	r0, #1
   223d2:	dd07      	ble.n	223e4 <z_set_timeout_expiry+0x58>
   223d4:	42a0      	cmp	r0, r4
   223d6:	db05      	blt.n	223e4 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   223d8:	42a0      	cmp	r0, r4
   223da:	4629      	mov	r1, r5
   223dc:	bfa8      	it	ge
   223de:	4620      	movge	r0, r4
   223e0:	f7fa f8a4 	bl	1c52c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223e4:	480a      	ldr	r0, [pc, #40]	; (22410 <z_set_timeout_expiry+0x84>)
   223e6:	f7fd fb01 	bl	1f9ec <z_spin_unlock_valid>
   223ea:	b958      	cbnz	r0, 22404 <z_set_timeout_expiry+0x78>
   223ec:	23c2      	movs	r3, #194	; 0xc2
   223ee:	4a09      	ldr	r2, [pc, #36]	; (22414 <z_set_timeout_expiry+0x88>)
   223f0:	490c      	ldr	r1, [pc, #48]	; (22424 <z_set_timeout_expiry+0x98>)
   223f2:	480a      	ldr	r0, [pc, #40]	; (2241c <z_set_timeout_expiry+0x90>)
   223f4:	f002 fd6f 	bl	24ed6 <assert_print>
   223f8:	4905      	ldr	r1, [pc, #20]	; (22410 <z_set_timeout_expiry+0x84>)
   223fa:	480b      	ldr	r0, [pc, #44]	; (22428 <z_set_timeout_expiry+0x9c>)
   223fc:	f002 fd6b 	bl	24ed6 <assert_print>
   22400:	21c2      	movs	r1, #194	; 0xc2
   22402:	e7dd      	b.n	223c0 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   22404:	f386 8811 	msr	BASEPRI, r6
   22408:	f3bf 8f6f 	isb	sy
		}
	}
}
   2240c:	bd70      	pop	{r4, r5, r6, pc}
   2240e:	bf00      	nop
   22410:	20021554 	.word	0x20021554
   22414:	0002c76f 	.word	0x0002c76f
   22418:	0002c7c8 	.word	0x0002c7c8
   2241c:	0002b939 	.word	0x0002b939
   22420:	0002c7dd 	.word	0x0002c7dd
   22424:	0002c79c 	.word	0x0002c79c
   22428:	0002c7b3 	.word	0x0002c7b3

0002242c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2242c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22430:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22432:	f7fe ff7d 	bl	21330 <z_time_slice>
	__asm__ volatile(
   22436:	f04f 0320 	mov.w	r3, #32
   2243a:	f3ef 8711 	mrs	r7, BASEPRI
   2243e:	f383 8812 	msr	BASEPRI_MAX, r3
   22442:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22446:	483f      	ldr	r0, [pc, #252]	; (22544 <sys_clock_announce+0x118>)
   22448:	f7fd fac2 	bl	1f9d0 <z_spin_lock_valid>
   2244c:	b968      	cbnz	r0, 2246a <sys_clock_announce+0x3e>
   2244e:	2394      	movs	r3, #148	; 0x94
   22450:	4a3d      	ldr	r2, [pc, #244]	; (22548 <sys_clock_announce+0x11c>)
   22452:	493e      	ldr	r1, [pc, #248]	; (2254c <sys_clock_announce+0x120>)
   22454:	483e      	ldr	r0, [pc, #248]	; (22550 <sys_clock_announce+0x124>)
   22456:	f002 fd3e 	bl	24ed6 <assert_print>
   2245a:	493a      	ldr	r1, [pc, #232]	; (22544 <sys_clock_announce+0x118>)
   2245c:	483d      	ldr	r0, [pc, #244]	; (22554 <sys_clock_announce+0x128>)
   2245e:	f002 fd3a 	bl	24ed6 <assert_print>
   22462:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22464:	4838      	ldr	r0, [pc, #224]	; (22548 <sys_clock_announce+0x11c>)
   22466:	f002 fd2f 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2246a:	4836      	ldr	r0, [pc, #216]	; (22544 <sys_clock_announce+0x118>)
   2246c:	f7fd facc 	bl	1fa08 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   22470:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 22558 <sys_clock_announce+0x12c>
	return list->head == list;
   22474:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2255c <sys_clock_announce+0x130>
   22478:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2247c:	4a38      	ldr	r2, [pc, #224]	; (22560 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2247e:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   22480:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   22484:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   22488:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2248c:	d00b      	beq.n	224a6 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2248e:	b155      	cbz	r5, 224a6 <sys_clock_announce+0x7a>
   22490:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   22494:	42b4      	cmp	r4, r6
   22496:	eb71 0e00 	sbcs.w	lr, r1, r0
   2249a:	da1c      	bge.n	224d6 <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2249c:	1b36      	subs	r6, r6, r4
   2249e:	eb60 0001 	sbc.w	r0, r0, r1
   224a2:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   224a6:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   224a8:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   224ac:	eb4c 0101 	adc.w	r1, ip, r1
   224b0:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   224b4:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   224b8:	f7ff fdcc 	bl	22054 <next_timeout>
   224bc:	4621      	mov	r1, r4
   224be:	f7fa f835 	bl	1c52c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224c2:	4820      	ldr	r0, [pc, #128]	; (22544 <sys_clock_announce+0x118>)
   224c4:	f7fd fa92 	bl	1f9ec <z_spin_unlock_valid>
   224c8:	b1a8      	cbz	r0, 224f6 <sys_clock_announce+0xca>
	__asm__ volatile(
   224ca:	f387 8811 	msr	BASEPRI, r7
   224ce:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   224d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   224d6:	18f3      	adds	r3, r6, r3
   224d8:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   224dc:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   224e0:	2200      	movs	r2, #0
   224e2:	2300      	movs	r3, #0
		remove_timeout(t);
   224e4:	4628      	mov	r0, r5
		t->dticks = 0;
   224e6:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   224ea:	f7ff fddb 	bl	220a4 <remove_timeout>
   224ee:	4815      	ldr	r0, [pc, #84]	; (22544 <sys_clock_announce+0x118>)
   224f0:	f7fd fa7c 	bl	1f9ec <z_spin_unlock_valid>
   224f4:	b958      	cbnz	r0, 2250e <sys_clock_announce+0xe2>
   224f6:	23c2      	movs	r3, #194	; 0xc2
   224f8:	4a13      	ldr	r2, [pc, #76]	; (22548 <sys_clock_announce+0x11c>)
   224fa:	491a      	ldr	r1, [pc, #104]	; (22564 <sys_clock_announce+0x138>)
   224fc:	4814      	ldr	r0, [pc, #80]	; (22550 <sys_clock_announce+0x124>)
   224fe:	f002 fcea 	bl	24ed6 <assert_print>
   22502:	4910      	ldr	r1, [pc, #64]	; (22544 <sys_clock_announce+0x118>)
   22504:	4818      	ldr	r0, [pc, #96]	; (22568 <sys_clock_announce+0x13c>)
   22506:	f002 fce6 	bl	24ed6 <assert_print>
   2250a:	21c2      	movs	r1, #194	; 0xc2
   2250c:	e7aa      	b.n	22464 <sys_clock_announce+0x38>
   2250e:	f387 8811 	msr	BASEPRI, r7
   22512:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22516:	4628      	mov	r0, r5
   22518:	68ab      	ldr	r3, [r5, #8]
   2251a:	4798      	blx	r3
	__asm__ volatile(
   2251c:	f04f 0320 	mov.w	r3, #32
   22520:	f3ef 8711 	mrs	r7, BASEPRI
   22524:	f383 8812 	msr	BASEPRI_MAX, r3
   22528:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2252c:	4805      	ldr	r0, [pc, #20]	; (22544 <sys_clock_announce+0x118>)
   2252e:	f7fd fa4f 	bl	1f9d0 <z_spin_lock_valid>
   22532:	2800      	cmp	r0, #0
   22534:	d08b      	beq.n	2244e <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   22536:	4803      	ldr	r0, [pc, #12]	; (22544 <sys_clock_announce+0x118>)
   22538:	f7fd fa66 	bl	1fa08 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   2253c:	f8d8 4000 	ldr.w	r4, [r8]
   22540:	1ba4      	subs	r4, r4, r6
   22542:	e799      	b.n	22478 <sys_clock_announce+0x4c>
   22544:	20021554 	.word	0x20021554
   22548:	0002c76f 	.word	0x0002c76f
   2254c:	0002c7c8 	.word	0x0002c7c8
   22550:	0002b939 	.word	0x0002b939
   22554:	0002c7dd 	.word	0x0002c7dd
   22558:	20021550 	.word	0x20021550
   2255c:	20008734 	.word	0x20008734
   22560:	20009dc0 	.word	0x20009dc0
   22564:	0002c79c 	.word	0x0002c79c
   22568:	0002c7b3 	.word	0x0002c7b3

0002256c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2256c:	b570      	push	{r4, r5, r6, lr}
   2256e:	f04f 0320 	mov.w	r3, #32
   22572:	f3ef 8611 	mrs	r6, BASEPRI
   22576:	f383 8812 	msr	BASEPRI_MAX, r3
   2257a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2257e:	481a      	ldr	r0, [pc, #104]	; (225e8 <sys_clock_tick_get+0x7c>)
   22580:	f7fd fa26 	bl	1f9d0 <z_spin_lock_valid>
   22584:	b968      	cbnz	r0, 225a2 <sys_clock_tick_get+0x36>
   22586:	2394      	movs	r3, #148	; 0x94
   22588:	4a18      	ldr	r2, [pc, #96]	; (225ec <sys_clock_tick_get+0x80>)
   2258a:	4919      	ldr	r1, [pc, #100]	; (225f0 <sys_clock_tick_get+0x84>)
   2258c:	4819      	ldr	r0, [pc, #100]	; (225f4 <sys_clock_tick_get+0x88>)
   2258e:	f002 fca2 	bl	24ed6 <assert_print>
   22592:	4915      	ldr	r1, [pc, #84]	; (225e8 <sys_clock_tick_get+0x7c>)
   22594:	4818      	ldr	r0, [pc, #96]	; (225f8 <sys_clock_tick_get+0x8c>)
   22596:	f002 fc9e 	bl	24ed6 <assert_print>
   2259a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2259c:	4813      	ldr	r0, [pc, #76]	; (225ec <sys_clock_tick_get+0x80>)
   2259e:	f002 fc93 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   225a2:	4811      	ldr	r0, [pc, #68]	; (225e8 <sys_clock_tick_get+0x7c>)
   225a4:	f7fd fa30 	bl	1fa08 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   225a8:	f7ff fd4a 	bl	22040 <elapsed>
   225ac:	4a13      	ldr	r2, [pc, #76]	; (225fc <sys_clock_tick_get+0x90>)
   225ae:	e9d2 4500 	ldrd	r4, r5, [r2]
   225b2:	1904      	adds	r4, r0, r4
   225b4:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225b8:	480b      	ldr	r0, [pc, #44]	; (225e8 <sys_clock_tick_get+0x7c>)
   225ba:	f7fd fa17 	bl	1f9ec <z_spin_unlock_valid>
   225be:	b958      	cbnz	r0, 225d8 <sys_clock_tick_get+0x6c>
   225c0:	23c2      	movs	r3, #194	; 0xc2
   225c2:	4a0a      	ldr	r2, [pc, #40]	; (225ec <sys_clock_tick_get+0x80>)
   225c4:	490e      	ldr	r1, [pc, #56]	; (22600 <sys_clock_tick_get+0x94>)
   225c6:	480b      	ldr	r0, [pc, #44]	; (225f4 <sys_clock_tick_get+0x88>)
   225c8:	f002 fc85 	bl	24ed6 <assert_print>
   225cc:	4906      	ldr	r1, [pc, #24]	; (225e8 <sys_clock_tick_get+0x7c>)
   225ce:	480d      	ldr	r0, [pc, #52]	; (22604 <sys_clock_tick_get+0x98>)
   225d0:	f002 fc81 	bl	24ed6 <assert_print>
   225d4:	21c2      	movs	r1, #194	; 0xc2
   225d6:	e7e1      	b.n	2259c <sys_clock_tick_get+0x30>
	__asm__ volatile(
   225d8:	f386 8811 	msr	BASEPRI, r6
   225dc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   225e0:	4620      	mov	r0, r4
   225e2:	4629      	mov	r1, r5
   225e4:	bd70      	pop	{r4, r5, r6, pc}
   225e6:	bf00      	nop
   225e8:	20021554 	.word	0x20021554
   225ec:	0002c76f 	.word	0x0002c76f
   225f0:	0002c7c8 	.word	0x0002c7c8
   225f4:	0002b939 	.word	0x0002b939
   225f8:	0002c7dd 	.word	0x0002c7dd
   225fc:	20009dc0 	.word	0x20009dc0
   22600:	0002c79c 	.word	0x0002c79c
   22604:	0002c7b3 	.word	0x0002c7b3

00022608 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   22608:	b570      	push	{r4, r5, r6, lr}
   2260a:	4604      	mov	r4, r0
	__asm__ volatile(
   2260c:	f04f 0320 	mov.w	r3, #32
   22610:	f3ef 8511 	mrs	r5, BASEPRI
   22614:	f383 8812 	msr	BASEPRI_MAX, r3
   22618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2261c:	4849      	ldr	r0, [pc, #292]	; (22744 <z_timer_expiration_handler+0x13c>)
   2261e:	f7fd f9d7 	bl	1f9d0 <z_spin_lock_valid>
   22622:	b968      	cbnz	r0, 22640 <z_timer_expiration_handler+0x38>
   22624:	2394      	movs	r3, #148	; 0x94
   22626:	4a48      	ldr	r2, [pc, #288]	; (22748 <z_timer_expiration_handler+0x140>)
   22628:	4948      	ldr	r1, [pc, #288]	; (2274c <z_timer_expiration_handler+0x144>)
   2262a:	4849      	ldr	r0, [pc, #292]	; (22750 <z_timer_expiration_handler+0x148>)
   2262c:	f002 fc53 	bl	24ed6 <assert_print>
   22630:	4944      	ldr	r1, [pc, #272]	; (22744 <z_timer_expiration_handler+0x13c>)
   22632:	4848      	ldr	r0, [pc, #288]	; (22754 <z_timer_expiration_handler+0x14c>)
   22634:	f002 fc4f 	bl	24ed6 <assert_print>
   22638:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2263a:	4843      	ldr	r0, [pc, #268]	; (22748 <z_timer_expiration_handler+0x140>)
   2263c:	f002 fc44 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22640:	4840      	ldr	r0, [pc, #256]	; (22744 <z_timer_expiration_handler+0x13c>)
   22642:	f7fd f9e1 	bl	1fa08 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22646:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   2264a:	3301      	adds	r3, #1
   2264c:	f142 0200 	adc.w	r2, r2, #0
   22650:	2b02      	cmp	r3, #2
   22652:	f172 0200 	sbcs.w	r2, r2, #0
   22656:	d322      	bcc.n	2269e <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   22658:	f007 f898 	bl	2978c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   2265c:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   22660:	3001      	adds	r0, #1
   22662:	f141 0100 	adc.w	r1, r1, #0
   22666:	18c0      	adds	r0, r0, r3
   22668:	eb41 0102 	adc.w	r1, r1, r2
   2266c:	2801      	cmp	r0, #1
   2266e:	f171 0100 	sbcs.w	r1, r1, #0
   22672:	db29      	blt.n	226c8 <z_timer_expiration_handler+0xc0>
   22674:	f007 f88a 	bl	2978c <z_impl_k_uptime_ticks>
   22678:	3001      	adds	r0, #1
   2267a:	f141 0300 	adc.w	r3, r1, #0
   2267e:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   22682:	1880      	adds	r0, r0, r2
   22684:	f06f 0201 	mvn.w	r2, #1
   22688:	eb43 0301 	adc.w	r3, r3, r1
   2268c:	f04f 31ff 	mov.w	r1, #4294967295
   22690:	1a12      	subs	r2, r2, r0
   22692:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22696:	4620      	mov	r0, r4
   22698:	492f      	ldr	r1, [pc, #188]	; (22758 <z_timer_expiration_handler+0x150>)
   2269a:	f7ff fd1f 	bl	220dc <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   2269e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   226a0:	3301      	adds	r3, #1
   226a2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   226a4:	6a23      	ldr	r3, [r4, #32]
   226a6:	b35b      	cbz	r3, 22700 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226a8:	4826      	ldr	r0, [pc, #152]	; (22744 <z_timer_expiration_handler+0x13c>)
   226aa:	f7fd f99f 	bl	1f9ec <z_spin_unlock_valid>
   226ae:	b980      	cbnz	r0, 226d2 <z_timer_expiration_handler+0xca>
   226b0:	23c2      	movs	r3, #194	; 0xc2
   226b2:	4a25      	ldr	r2, [pc, #148]	; (22748 <z_timer_expiration_handler+0x140>)
   226b4:	4929      	ldr	r1, [pc, #164]	; (2275c <z_timer_expiration_handler+0x154>)
   226b6:	4826      	ldr	r0, [pc, #152]	; (22750 <z_timer_expiration_handler+0x148>)
   226b8:	f002 fc0d 	bl	24ed6 <assert_print>
   226bc:	4921      	ldr	r1, [pc, #132]	; (22744 <z_timer_expiration_handler+0x13c>)
   226be:	4828      	ldr	r0, [pc, #160]	; (22760 <z_timer_expiration_handler+0x158>)
   226c0:	f002 fc09 	bl	24ed6 <assert_print>
   226c4:	21c2      	movs	r1, #194	; 0xc2
   226c6:	e7b8      	b.n	2263a <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   226c8:	f06f 0201 	mvn.w	r2, #1
   226cc:	f04f 33ff 	mov.w	r3, #4294967295
   226d0:	e7e1      	b.n	22696 <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   226d2:	f385 8811 	msr	BASEPRI, r5
   226d6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   226da:	4620      	mov	r0, r4
   226dc:	6a23      	ldr	r3, [r4, #32]
   226de:	4798      	blx	r3
	__asm__ volatile(
   226e0:	f04f 0320 	mov.w	r3, #32
   226e4:	f3ef 8511 	mrs	r5, BASEPRI
   226e8:	f383 8812 	msr	BASEPRI_MAX, r3
   226ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226f0:	4814      	ldr	r0, [pc, #80]	; (22744 <z_timer_expiration_handler+0x13c>)
   226f2:	f7fd f96d 	bl	1f9d0 <z_spin_lock_valid>
   226f6:	2800      	cmp	r0, #0
   226f8:	d094      	beq.n	22624 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   226fa:	4812      	ldr	r0, [pc, #72]	; (22744 <z_timer_expiration_handler+0x13c>)
   226fc:	f7fd f984 	bl	1fa08 <z_spin_lock_set_owner>
	return list->head == list;
   22700:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22704:	42a6      	cmp	r6, r4
   22706:	d000      	beq.n	2270a <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22708:	b94e      	cbnz	r6, 2271e <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2270a:	480e      	ldr	r0, [pc, #56]	; (22744 <z_timer_expiration_handler+0x13c>)
   2270c:	f7fd f96e 	bl	1f9ec <z_spin_unlock_valid>
   22710:	2800      	cmp	r0, #0
   22712:	d0cd      	beq.n	226b0 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   22714:	f385 8811 	msr	BASEPRI, r5
   22718:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   2271c:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   2271e:	4630      	mov	r0, r6
   22720:	f7fe fbda 	bl	20ed8 <z_unpend_thread_no_timeout>
   22724:	2300      	movs	r3, #0
   22726:	4807      	ldr	r0, [pc, #28]	; (22744 <z_timer_expiration_handler+0x13c>)
   22728:	67f3      	str	r3, [r6, #124]	; 0x7c
   2272a:	f7fd f95f 	bl	1f9ec <z_spin_unlock_valid>
   2272e:	2800      	cmp	r0, #0
   22730:	d0be      	beq.n	226b0 <z_timer_expiration_handler+0xa8>
   22732:	f385 8811 	msr	BASEPRI, r5
   22736:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2273a:	4630      	mov	r0, r6
}
   2273c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   22740:	f7fe bb84 	b.w	20e4c <z_ready_thread>
   22744:	20021558 	.word	0x20021558
   22748:	0002c76f 	.word	0x0002c76f
   2274c:	0002c7c8 	.word	0x0002c7c8
   22750:	0002b939 	.word	0x0002b939
   22754:	0002c7dd 	.word	0x0002c7dd
   22758:	00022609 	.word	0x00022609
   2275c:	0002c79c 	.word	0x0002c79c
   22760:	0002c7b3 	.word	0x0002c7b3

00022764 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22764:	f1b3 3fff 	cmp.w	r3, #4294967295
   22768:	bf08      	it	eq
   2276a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2276e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22772:	4619      	mov	r1, r3
   22774:	4605      	mov	r5, r0
   22776:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   2277a:	4614      	mov	r4, r2
   2277c:	4691      	mov	r9, r2
   2277e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22780:	d037      	beq.n	227f2 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22782:	f1b0 3fff 	cmp.w	r0, #4294967295
   22786:	bf08      	it	eq
   22788:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2278c:	4637      	mov	r7, r6
   2278e:	4682      	mov	sl, r0
   22790:	d011      	beq.n	227b6 <z_impl_k_timer_start+0x52>
   22792:	ea50 0306 	orrs.w	r3, r0, r6
   22796:	d00e      	beq.n	227b6 <z_impl_k_timer_start+0x52>
   22798:	1c72      	adds	r2, r6, #1
   2279a:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   2279e:	db0a      	blt.n	227b6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   227a0:	2e02      	cmp	r6, #2
   227a2:	4684      	mov	ip, r0
   227a4:	f170 0000 	sbcs.w	r0, r0, #0
   227a8:	bfbc      	itt	lt
   227aa:	2702      	movlt	r7, #2
   227ac:	f04f 0c00 	movlt.w	ip, #0
   227b0:	3f01      	subs	r7, #1
   227b2:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   227b6:	1c63      	adds	r3, r4, #1
   227b8:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   227bc:	db0a      	blt.n	227d4 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   227be:	2c01      	cmp	r4, #1
   227c0:	f171 0300 	sbcs.w	r3, r1, #0
   227c4:	4622      	mov	r2, r4
   227c6:	bfbc      	itt	lt
   227c8:	2201      	movlt	r2, #1
   227ca:	2100      	movlt	r1, #0
   227cc:	f112 39ff 	adds.w	r9, r2, #4294967295
   227d0:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   227d4:	4628      	mov	r0, r5
   227d6:	f7ff fd47 	bl	22268 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   227da:	2300      	movs	r3, #0
	timer->period = period;
   227dc:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   227e0:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   227e2:	464a      	mov	r2, r9
   227e4:	4643      	mov	r3, r8
   227e6:	4628      	mov	r0, r5
		     duration);
}
   227e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   227ec:	4902      	ldr	r1, [pc, #8]	; (227f8 <z_impl_k_timer_start+0x94>)
   227ee:	f7ff bc75 	b.w	220dc <z_add_timeout>
}
   227f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   227f6:	bf00      	nop
   227f8:	00022609 	.word	0x00022609

000227fc <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   227fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   22800:	2600      	movs	r6, #0
{
   22802:	4688      	mov	r8, r1
   22804:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   22806:	4604      	mov	r4, r0
	int events_registered = 0;
   22808:	4637      	mov	r7, r6
	event->poller = NULL;
   2280a:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2280c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 229cc <register_events+0x1d0>
{
   22810:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   22812:	4546      	cmp	r6, r8
   22814:	db03      	blt.n	2281e <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   22816:	4638      	mov	r0, r7
   22818:	b003      	add	sp, #12
   2281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2281e:	f04f 0320 	mov.w	r3, #32
   22822:	f3ef 8b11 	mrs	fp, BASEPRI
   22826:	f383 8812 	msr	BASEPRI_MAX, r3
   2282a:	f3bf 8f6f 	isb	sy
   2282e:	4648      	mov	r0, r9
   22830:	f7fd f8ce 	bl	1f9d0 <z_spin_lock_valid>
   22834:	b960      	cbnz	r0, 22850 <register_events+0x54>
   22836:	2394      	movs	r3, #148	; 0x94
   22838:	4a65      	ldr	r2, [pc, #404]	; (229d0 <register_events+0x1d4>)
   2283a:	4966      	ldr	r1, [pc, #408]	; (229d4 <register_events+0x1d8>)
   2283c:	4866      	ldr	r0, [pc, #408]	; (229d8 <register_events+0x1dc>)
   2283e:	f002 fb4a 	bl	24ed6 <assert_print>
   22842:	4962      	ldr	r1, [pc, #392]	; (229cc <register_events+0x1d0>)
   22844:	4865      	ldr	r0, [pc, #404]	; (229dc <register_events+0x1e0>)
   22846:	f002 fb46 	bl	24ed6 <assert_print>
   2284a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2284c:	4860      	ldr	r0, [pc, #384]	; (229d0 <register_events+0x1d4>)
   2284e:	e060      	b.n	22912 <register_events+0x116>
	z_spin_lock_set_owner(l);
   22850:	4648      	mov	r0, r9
   22852:	f7fd f8d9 	bl	1fa08 <z_spin_lock_set_owner>
	switch (event->type) {
   22856:	7b63      	ldrb	r3, [r4, #13]
   22858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2285c:	2b08      	cmp	r3, #8
   2285e:	d84a      	bhi.n	228f6 <register_events+0xfa>
   22860:	e8df f003 	tbb	[pc, r3]
   22864:	49053d2b 	.word	0x49053d2b
   22868:	49494927 	.word	0x49494927
   2286c:	43          	.byte	0x43
   2286d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   2286e:	6923      	ldr	r3, [r4, #16]
   22870:	689b      	ldr	r3, [r3, #8]
   22872:	b313      	cbz	r3, 228ba <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22874:	2302      	movs	r3, #2
	event->state |= state;
   22876:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   22878:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   2287c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   22880:	430b      	orrs	r3, r1
   22882:	f363 3294 	bfi	r2, r3, #14, #7
   22886:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   22888:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2288c:	4648      	mov	r0, r9
   2288e:	f7fd f8ad 	bl	1f9ec <z_spin_unlock_valid>
   22892:	3414      	adds	r4, #20
   22894:	2800      	cmp	r0, #0
   22896:	f040 8092 	bne.w	229be <register_events+0x1c2>
   2289a:	23c2      	movs	r3, #194	; 0xc2
   2289c:	4a4c      	ldr	r2, [pc, #304]	; (229d0 <register_events+0x1d4>)
   2289e:	4950      	ldr	r1, [pc, #320]	; (229e0 <register_events+0x1e4>)
   228a0:	484d      	ldr	r0, [pc, #308]	; (229d8 <register_events+0x1dc>)
   228a2:	f002 fb18 	bl	24ed6 <assert_print>
   228a6:	4949      	ldr	r1, [pc, #292]	; (229cc <register_events+0x1d0>)
   228a8:	484e      	ldr	r0, [pc, #312]	; (229e4 <register_events+0x1e8>)
   228aa:	f002 fb14 	bl	24ed6 <assert_print>
   228ae:	21c2      	movs	r1, #194	; 0xc2
   228b0:	e7cc      	b.n	2284c <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   228b2:	6923      	ldr	r3, [r4, #16]
   228b4:	681b      	ldr	r3, [r3, #0]
   228b6:	2b00      	cmp	r3, #0
   228b8:	d12d      	bne.n	22916 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   228ba:	9b01      	ldr	r3, [sp, #4]
   228bc:	2b00      	cmp	r3, #0
   228be:	d1e5      	bne.n	2288c <register_events+0x90>
   228c0:	782b      	ldrb	r3, [r5, #0]
   228c2:	2b00      	cmp	r3, #0
   228c4:	d0e2      	beq.n	2288c <register_events+0x90>
	switch (event->type) {
   228c6:	7b63      	ldrb	r3, [r4, #13]
   228c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   228cc:	2b08      	cmp	r3, #8
   228ce:	d86b      	bhi.n	229a8 <register_events+0x1ac>
   228d0:	e8df f003 	tbb	[pc, r3]
   228d4:	6a234935 	.word	0x6a234935
   228d8:	6a6a6a38 	.word	0x6a6a6a38
   228dc:	59          	.byte	0x59
   228dd:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   228de:	6923      	ldr	r3, [r4, #16]
   228e0:	689b      	ldr	r3, [r3, #8]
   228e2:	2b00      	cmp	r3, #0
   228e4:	d0e9      	beq.n	228ba <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   228e6:	2301      	movs	r3, #1
   228e8:	e7c5      	b.n	22876 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   228ea:	6923      	ldr	r3, [r4, #16]
   228ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   228ee:	2b00      	cmp	r3, #0
   228f0:	d0e3      	beq.n	228ba <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   228f2:	2310      	movs	r3, #16
   228f4:	e7bf      	b.n	22876 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   228f6:	2363      	movs	r3, #99	; 0x63
   228f8:	4a3b      	ldr	r2, [pc, #236]	; (229e8 <register_events+0x1ec>)
   228fa:	493c      	ldr	r1, [pc, #240]	; (229ec <register_events+0x1f0>)
   228fc:	4836      	ldr	r0, [pc, #216]	; (229d8 <register_events+0x1dc>)
   228fe:	f002 faea 	bl	24ed6 <assert_print>
   22902:	7b61      	ldrb	r1, [r4, #13]
   22904:	483a      	ldr	r0, [pc, #232]	; (229f0 <register_events+0x1f4>)
   22906:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   2290a:	f002 fae4 	bl	24ed6 <assert_print>
   2290e:	2163      	movs	r1, #99	; 0x63
   22910:	4835      	ldr	r0, [pc, #212]	; (229e8 <register_events+0x1ec>)
   22912:	f002 fad9 	bl	24ec8 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22916:	2304      	movs	r3, #4
   22918:	e7ad      	b.n	22876 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2291a:	6920      	ldr	r0, [r4, #16]
   2291c:	b950      	cbnz	r0, 22934 <register_events+0x138>
   2291e:	4935      	ldr	r1, [pc, #212]	; (229f4 <register_events+0x1f8>)
   22920:	238d      	movs	r3, #141	; 0x8d
   22922:	4a31      	ldr	r2, [pc, #196]	; (229e8 <register_events+0x1ec>)
   22924:	482c      	ldr	r0, [pc, #176]	; (229d8 <register_events+0x1dc>)
   22926:	f002 fad6 	bl	24ed6 <assert_print>
   2292a:	4833      	ldr	r0, [pc, #204]	; (229f8 <register_events+0x1fc>)
   2292c:	f002 fad3 	bl	24ed6 <assert_print>
   22930:	218d      	movs	r1, #141	; 0x8d
   22932:	e7ed      	b.n	22910 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   22934:	462a      	mov	r2, r5
   22936:	4621      	mov	r1, r4
   22938:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2293a:	f006 ff78 	bl	2982e <add_event>
	event->poller = poller;
   2293e:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   22940:	3701      	adds	r7, #1
   22942:	e7a3      	b.n	2288c <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22944:	6920      	ldr	r0, [r4, #16]
   22946:	b950      	cbnz	r0, 2295e <register_events+0x162>
   22948:	492c      	ldr	r1, [pc, #176]	; (229fc <register_events+0x200>)
   2294a:	2391      	movs	r3, #145	; 0x91
   2294c:	4a26      	ldr	r2, [pc, #152]	; (229e8 <register_events+0x1ec>)
   2294e:	4822      	ldr	r0, [pc, #136]	; (229d8 <register_events+0x1dc>)
   22950:	f002 fac1 	bl	24ed6 <assert_print>
   22954:	482a      	ldr	r0, [pc, #168]	; (22a00 <register_events+0x204>)
   22956:	f002 fabe 	bl	24ed6 <assert_print>
   2295a:	2191      	movs	r1, #145	; 0x91
   2295c:	e7d8      	b.n	22910 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   2295e:	462a      	mov	r2, r5
   22960:	4621      	mov	r1, r4
   22962:	3014      	adds	r0, #20
   22964:	e7e9      	b.n	2293a <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22966:	6920      	ldr	r0, [r4, #16]
   22968:	b950      	cbnz	r0, 22980 <register_events+0x184>
   2296a:	4926      	ldr	r1, [pc, #152]	; (22a04 <register_events+0x208>)
   2296c:	2395      	movs	r3, #149	; 0x95
   2296e:	4a1e      	ldr	r2, [pc, #120]	; (229e8 <register_events+0x1ec>)
   22970:	4819      	ldr	r0, [pc, #100]	; (229d8 <register_events+0x1dc>)
   22972:	f002 fab0 	bl	24ed6 <assert_print>
   22976:	4824      	ldr	r0, [pc, #144]	; (22a08 <register_events+0x20c>)
   22978:	f002 faad 	bl	24ed6 <assert_print>
   2297c:	2195      	movs	r1, #149	; 0x95
   2297e:	e7c7      	b.n	22910 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   22980:	462a      	mov	r2, r5
   22982:	4621      	mov	r1, r4
   22984:	e7d9      	b.n	2293a <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22986:	6920      	ldr	r0, [r4, #16]
   22988:	b950      	cbnz	r0, 229a0 <register_events+0x1a4>
   2298a:	4920      	ldr	r1, [pc, #128]	; (22a0c <register_events+0x210>)
   2298c:	2399      	movs	r3, #153	; 0x99
   2298e:	4a16      	ldr	r2, [pc, #88]	; (229e8 <register_events+0x1ec>)
   22990:	4811      	ldr	r0, [pc, #68]	; (229d8 <register_events+0x1dc>)
   22992:	f002 faa0 	bl	24ed6 <assert_print>
   22996:	481e      	ldr	r0, [pc, #120]	; (22a10 <register_events+0x214>)
   22998:	f002 fa9d 	bl	24ed6 <assert_print>
   2299c:	2199      	movs	r1, #153	; 0x99
   2299e:	e7b7      	b.n	22910 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   229a0:	462a      	mov	r2, r5
   229a2:	4621      	mov	r1, r4
   229a4:	3028      	adds	r0, #40	; 0x28
   229a6:	e7c8      	b.n	2293a <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   229a8:	4910      	ldr	r1, [pc, #64]	; (229ec <register_events+0x1f0>)
   229aa:	23a6      	movs	r3, #166	; 0xa6
   229ac:	4a0e      	ldr	r2, [pc, #56]	; (229e8 <register_events+0x1ec>)
   229ae:	480a      	ldr	r0, [pc, #40]	; (229d8 <register_events+0x1dc>)
   229b0:	f002 fa91 	bl	24ed6 <assert_print>
   229b4:	4817      	ldr	r0, [pc, #92]	; (22a14 <register_events+0x218>)
   229b6:	f002 fa8e 	bl	24ed6 <assert_print>
   229ba:	21a6      	movs	r1, #166	; 0xa6
   229bc:	e7a8      	b.n	22910 <register_events+0x114>
	__asm__ volatile(
   229be:	f38b 8811 	msr	BASEPRI, fp
   229c2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   229c6:	3601      	adds	r6, #1
   229c8:	e723      	b.n	22812 <register_events+0x16>
   229ca:	bf00      	nop
   229cc:	2002155c 	.word	0x2002155c
   229d0:	0002c76f 	.word	0x0002c76f
   229d4:	0002c7c8 	.word	0x0002c7c8
   229d8:	0002b939 	.word	0x0002b939
   229dc:	0002c7dd 	.word	0x0002c7dd
   229e0:	0002c79c 	.word	0x0002c79c
   229e4:	0002c7b3 	.word	0x0002c7b3
   229e8:	00030f18 	.word	0x00030f18
   229ec:	000311d2 	.word	0x000311d2
   229f0:	00030f39 	.word	0x00030f39
   229f4:	00030f56 	.word	0x00030f56
   229f8:	00030f70 	.word	0x00030f70
   229fc:	00030f85 	.word	0x00030f85
   22a00:	00030fa1 	.word	0x00030fa1
   22a04:	00030fb2 	.word	0x00030fb2
   22a08:	00030fcf 	.word	0x00030fcf
   22a0c:	00030fe6 	.word	0x00030fe6
   22a10:	00031001 	.word	0x00031001
   22a14:	0003101a 	.word	0x0003101a

00022a18 <clear_event_registrations>:
{
   22a18:	2314      	movs	r3, #20
   22a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a1e:	4615      	mov	r5, r2
	while (num_events--) {
   22a20:	460c      	mov	r4, r1
	event->poller = NULL;
   22a22:	2600      	movs	r6, #0
   22a24:	fb03 0001 	mla	r0, r3, r1, r0
   22a28:	4f4b      	ldr	r7, [pc, #300]	; (22b58 <clear_event_registrations+0x140>)
	while (num_events--) {
   22a2a:	b90c      	cbnz	r4, 22a30 <clear_event_registrations+0x18>
}
   22a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   22a30:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   22a34:	f1a0 0814 	sub.w	r8, r0, #20
   22a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   22a3c:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   22a40:	2b08      	cmp	r3, #8
   22a42:	d842      	bhi.n	22aca <clear_event_registrations+0xb2>
   22a44:	e8df f003 	tbb	[pc, r3]
   22a48:	41052555 	.word	0x41052555
   22a4c:	41414116 	.word	0x41414116
   22a50:	33          	.byte	0x33
   22a51:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22a52:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22a56:	2b00      	cmp	r3, #0
   22a58:	d142      	bne.n	22ae0 <clear_event_registrations+0xc8>
   22a5a:	4940      	ldr	r1, [pc, #256]	; (22b5c <clear_event_registrations+0x144>)
   22a5c:	23b6      	movs	r3, #182	; 0xb6
   22a5e:	4a40      	ldr	r2, [pc, #256]	; (22b60 <clear_event_registrations+0x148>)
   22a60:	4840      	ldr	r0, [pc, #256]	; (22b64 <clear_event_registrations+0x14c>)
   22a62:	f002 fa38 	bl	24ed6 <assert_print>
   22a66:	4840      	ldr	r0, [pc, #256]	; (22b68 <clear_event_registrations+0x150>)
   22a68:	f002 fa35 	bl	24ed6 <assert_print>
   22a6c:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22a6e:	483c      	ldr	r0, [pc, #240]	; (22b60 <clear_event_registrations+0x148>)
   22a70:	f002 fa2a 	bl	24ec8 <assert_post_action>
   22a74:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22a78:	2b00      	cmp	r3, #0
   22a7a:	d131      	bne.n	22ae0 <clear_event_registrations+0xc8>
   22a7c:	493b      	ldr	r1, [pc, #236]	; (22b6c <clear_event_registrations+0x154>)
   22a7e:	23ba      	movs	r3, #186	; 0xba
   22a80:	4a37      	ldr	r2, [pc, #220]	; (22b60 <clear_event_registrations+0x148>)
   22a82:	4838      	ldr	r0, [pc, #224]	; (22b64 <clear_event_registrations+0x14c>)
   22a84:	f002 fa27 	bl	24ed6 <assert_print>
   22a88:	4839      	ldr	r0, [pc, #228]	; (22b70 <clear_event_registrations+0x158>)
   22a8a:	f002 fa24 	bl	24ed6 <assert_print>
   22a8e:	21ba      	movs	r1, #186	; 0xba
   22a90:	e7ed      	b.n	22a6e <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22a92:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22a96:	bb1b      	cbnz	r3, 22ae0 <clear_event_registrations+0xc8>
   22a98:	4936      	ldr	r1, [pc, #216]	; (22b74 <clear_event_registrations+0x15c>)
   22a9a:	23be      	movs	r3, #190	; 0xbe
   22a9c:	4a30      	ldr	r2, [pc, #192]	; (22b60 <clear_event_registrations+0x148>)
   22a9e:	4831      	ldr	r0, [pc, #196]	; (22b64 <clear_event_registrations+0x14c>)
   22aa0:	f002 fa19 	bl	24ed6 <assert_print>
   22aa4:	4834      	ldr	r0, [pc, #208]	; (22b78 <clear_event_registrations+0x160>)
   22aa6:	f002 fa16 	bl	24ed6 <assert_print>
   22aaa:	21be      	movs	r1, #190	; 0xbe
   22aac:	e7df      	b.n	22a6e <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22aae:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22ab2:	b9ab      	cbnz	r3, 22ae0 <clear_event_registrations+0xc8>
   22ab4:	4931      	ldr	r1, [pc, #196]	; (22b7c <clear_event_registrations+0x164>)
   22ab6:	23c2      	movs	r3, #194	; 0xc2
   22ab8:	4a29      	ldr	r2, [pc, #164]	; (22b60 <clear_event_registrations+0x148>)
   22aba:	482a      	ldr	r0, [pc, #168]	; (22b64 <clear_event_registrations+0x14c>)
   22abc:	f002 fa0b 	bl	24ed6 <assert_print>
   22ac0:	482f      	ldr	r0, [pc, #188]	; (22b80 <clear_event_registrations+0x168>)
   22ac2:	f002 fa08 	bl	24ed6 <assert_print>
   22ac6:	21c2      	movs	r1, #194	; 0xc2
   22ac8:	e7d1      	b.n	22a6e <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   22aca:	492e      	ldr	r1, [pc, #184]	; (22b84 <clear_event_registrations+0x16c>)
   22acc:	23cf      	movs	r3, #207	; 0xcf
   22ace:	4a24      	ldr	r2, [pc, #144]	; (22b60 <clear_event_registrations+0x148>)
   22ad0:	4824      	ldr	r0, [pc, #144]	; (22b64 <clear_event_registrations+0x14c>)
   22ad2:	f002 fa00 	bl	24ed6 <assert_print>
   22ad6:	482c      	ldr	r0, [pc, #176]	; (22b88 <clear_event_registrations+0x170>)
   22ad8:	f002 f9fd 	bl	24ed6 <assert_print>
   22adc:	21cf      	movs	r1, #207	; 0xcf
   22ade:	e7c6      	b.n	22a6e <clear_event_registrations+0x56>
	return node->next != NULL;
   22ae0:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22ae4:	b12b      	cbz	r3, 22af2 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   22ae6:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   22aea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22aec:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   22aee:	e940 6605 	strd	r6, r6, [r0, #-20]
   22af2:	4638      	mov	r0, r7
   22af4:	f7fc ff7a 	bl	1f9ec <z_spin_unlock_valid>
   22af8:	b960      	cbnz	r0, 22b14 <clear_event_registrations+0xfc>
   22afa:	23c2      	movs	r3, #194	; 0xc2
   22afc:	4a23      	ldr	r2, [pc, #140]	; (22b8c <clear_event_registrations+0x174>)
   22afe:	4924      	ldr	r1, [pc, #144]	; (22b90 <clear_event_registrations+0x178>)
   22b00:	4818      	ldr	r0, [pc, #96]	; (22b64 <clear_event_registrations+0x14c>)
   22b02:	f002 f9e8 	bl	24ed6 <assert_print>
   22b06:	4914      	ldr	r1, [pc, #80]	; (22b58 <clear_event_registrations+0x140>)
   22b08:	4822      	ldr	r0, [pc, #136]	; (22b94 <clear_event_registrations+0x17c>)
   22b0a:	f002 f9e4 	bl	24ed6 <assert_print>
   22b0e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b10:	481e      	ldr	r0, [pc, #120]	; (22b8c <clear_event_registrations+0x174>)
   22b12:	e7ad      	b.n	22a70 <clear_event_registrations+0x58>
   22b14:	f385 8811 	msr	BASEPRI, r5
   22b18:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22b1c:	f04f 0320 	mov.w	r3, #32
   22b20:	f3ef 8511 	mrs	r5, BASEPRI
   22b24:	f383 8812 	msr	BASEPRI_MAX, r3
   22b28:	f3bf 8f6f 	isb	sy
   22b2c:	4638      	mov	r0, r7
   22b2e:	f7fc ff4f 	bl	1f9d0 <z_spin_lock_valid>
   22b32:	3c01      	subs	r4, #1
   22b34:	b958      	cbnz	r0, 22b4e <clear_event_registrations+0x136>
   22b36:	2394      	movs	r3, #148	; 0x94
   22b38:	4a14      	ldr	r2, [pc, #80]	; (22b8c <clear_event_registrations+0x174>)
   22b3a:	4917      	ldr	r1, [pc, #92]	; (22b98 <clear_event_registrations+0x180>)
   22b3c:	4809      	ldr	r0, [pc, #36]	; (22b64 <clear_event_registrations+0x14c>)
   22b3e:	f002 f9ca 	bl	24ed6 <assert_print>
   22b42:	4905      	ldr	r1, [pc, #20]	; (22b58 <clear_event_registrations+0x140>)
   22b44:	4815      	ldr	r0, [pc, #84]	; (22b9c <clear_event_registrations+0x184>)
   22b46:	f002 f9c6 	bl	24ed6 <assert_print>
   22b4a:	2194      	movs	r1, #148	; 0x94
   22b4c:	e7e0      	b.n	22b10 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   22b4e:	4638      	mov	r0, r7
   22b50:	f7fc ff5a 	bl	1fa08 <z_spin_lock_set_owner>
	return k;
   22b54:	4640      	mov	r0, r8
   22b56:	e768      	b.n	22a2a <clear_event_registrations+0x12>
   22b58:	2002155c 	.word	0x2002155c
   22b5c:	00030f56 	.word	0x00030f56
   22b60:	00030f18 	.word	0x00030f18
   22b64:	0002b939 	.word	0x0002b939
   22b68:	00030f70 	.word	0x00030f70
   22b6c:	00030f85 	.word	0x00030f85
   22b70:	00030fa1 	.word	0x00030fa1
   22b74:	00030fb2 	.word	0x00030fb2
   22b78:	00030fcf 	.word	0x00030fcf
   22b7c:	00030fe6 	.word	0x00030fe6
   22b80:	00031001 	.word	0x00031001
   22b84:	000311d2 	.word	0x000311d2
   22b88:	0003101a 	.word	0x0003101a
   22b8c:	0002c76f 	.word	0x0002c76f
   22b90:	0002c79c 	.word	0x0002c79c
   22b94:	0002c7b3 	.word	0x0002c7b3
   22b98:	0002c7c8 	.word	0x0002c7c8
   22b9c:	0002c7dd 	.word	0x0002c7dd

00022ba0 <k_poll_event_init>:
{
   22ba0:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   22ba2:	b162      	cbz	r2, 22bbe <k_poll_event_init+0x1e>
   22ba4:	4917      	ldr	r1, [pc, #92]	; (22c04 <k_poll_event_init+0x64>)
   22ba6:	232d      	movs	r3, #45	; 0x2d
   22ba8:	4a17      	ldr	r2, [pc, #92]	; (22c08 <k_poll_event_init+0x68>)
   22baa:	4818      	ldr	r0, [pc, #96]	; (22c0c <k_poll_event_init+0x6c>)
   22bac:	f002 f993 	bl	24ed6 <assert_print>
   22bb0:	4817      	ldr	r0, [pc, #92]	; (22c10 <k_poll_event_init+0x70>)
   22bb2:	f002 f990 	bl	24ed6 <assert_print>
   22bb6:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22bb8:	4813      	ldr	r0, [pc, #76]	; (22c08 <k_poll_event_init+0x68>)
   22bba:	f002 f985 	bl	24ec8 <assert_post_action>
   22bbe:	293f      	cmp	r1, #63	; 0x3f
   22bc0:	d90a      	bls.n	22bd8 <k_poll_event_init+0x38>
   22bc2:	4914      	ldr	r1, [pc, #80]	; (22c14 <k_poll_event_init+0x74>)
   22bc4:	232f      	movs	r3, #47	; 0x2f
   22bc6:	4a10      	ldr	r2, [pc, #64]	; (22c08 <k_poll_event_init+0x68>)
   22bc8:	4810      	ldr	r0, [pc, #64]	; (22c0c <k_poll_event_init+0x6c>)
   22bca:	f002 f984 	bl	24ed6 <assert_print>
   22bce:	4812      	ldr	r0, [pc, #72]	; (22c18 <k_poll_event_init+0x78>)
   22bd0:	f002 f981 	bl	24ed6 <assert_print>
   22bd4:	212f      	movs	r1, #47	; 0x2f
   22bd6:	e7ef      	b.n	22bb8 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   22bd8:	b953      	cbnz	r3, 22bf0 <k_poll_event_init+0x50>
   22bda:	4910      	ldr	r1, [pc, #64]	; (22c1c <k_poll_event_init+0x7c>)
   22bdc:	2330      	movs	r3, #48	; 0x30
   22bde:	4a0a      	ldr	r2, [pc, #40]	; (22c08 <k_poll_event_init+0x68>)
   22be0:	480a      	ldr	r0, [pc, #40]	; (22c0c <k_poll_event_init+0x6c>)
   22be2:	f002 f978 	bl	24ed6 <assert_print>
   22be6:	480e      	ldr	r0, [pc, #56]	; (22c20 <k_poll_event_init+0x80>)
   22be8:	f002 f975 	bl	24ed6 <assert_print>
   22bec:	2130      	movs	r1, #48	; 0x30
   22bee:	e7e3      	b.n	22bb8 <k_poll_event_init+0x18>
	event->poller = NULL;
   22bf0:	6082      	str	r2, [r0, #8]
	event->type = type;
   22bf2:	0209      	lsls	r1, r1, #8
   22bf4:	7b02      	ldrb	r2, [r0, #12]
   22bf6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   22bfa:	4311      	orrs	r1, r2
	event->obj = obj;
   22bfc:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   22c00:	bd08      	pop	{r3, pc}
   22c02:	bf00      	nop
   22c04:	00031030 	.word	0x00031030
   22c08:	00030f18 	.word	0x00030f18
   22c0c:	0002b939 	.word	0x0002b939
   22c10:	00031050 	.word	0x00031050
   22c14:	00031076 	.word	0x00031076
   22c18:	0003109a 	.word	0x0003109a
   22c1c:	000310aa 	.word	0x000310aa
   22c20:	000310bd 	.word	0x000310bd

00022c24 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c28:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   22c2a:	4b5c      	ldr	r3, [pc, #368]	; (22d9c <z_impl_k_poll+0x178>)
{
   22c2c:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   22c2e:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   22c32:	2301      	movs	r3, #1
{
   22c34:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   22c36:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   22c3a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   22c3e:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   22c42:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   22c46:	f1bb 0f00 	cmp.w	fp, #0
   22c4a:	d00e      	beq.n	22c6a <z_impl_k_poll+0x46>
   22c4c:	4954      	ldr	r1, [pc, #336]	; (22da0 <z_impl_k_poll+0x17c>)
   22c4e:	f240 132d 	movw	r3, #301	; 0x12d
   22c52:	4a54      	ldr	r2, [pc, #336]	; (22da4 <z_impl_k_poll+0x180>)
   22c54:	4854      	ldr	r0, [pc, #336]	; (22da8 <z_impl_k_poll+0x184>)
   22c56:	f002 f93e 	bl	24ed6 <assert_print>
   22c5a:	4854      	ldr	r0, [pc, #336]	; (22dac <z_impl_k_poll+0x188>)
   22c5c:	f002 f93b 	bl	24ed6 <assert_print>
   22c60:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   22c64:	484f      	ldr	r0, [pc, #316]	; (22da4 <z_impl_k_poll+0x180>)
   22c66:	f002 f92f 	bl	24ec8 <assert_post_action>
   22c6a:	b960      	cbnz	r0, 22c86 <z_impl_k_poll+0x62>
   22c6c:	4950      	ldr	r1, [pc, #320]	; (22db0 <z_impl_k_poll+0x18c>)
   22c6e:	f44f 7397 	mov.w	r3, #302	; 0x12e
   22c72:	4a4c      	ldr	r2, [pc, #304]	; (22da4 <z_impl_k_poll+0x180>)
   22c74:	484c      	ldr	r0, [pc, #304]	; (22da8 <z_impl_k_poll+0x184>)
   22c76:	f002 f92e 	bl	24ed6 <assert_print>
   22c7a:	484e      	ldr	r0, [pc, #312]	; (22db4 <z_impl_k_poll+0x190>)
   22c7c:	f002 f92b 	bl	24ed6 <assert_print>
   22c80:	f44f 7197 	mov.w	r1, #302	; 0x12e
   22c84:	e7ee      	b.n	22c64 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   22c86:	2900      	cmp	r1, #0
   22c88:	da0c      	bge.n	22ca4 <z_impl_k_poll+0x80>
   22c8a:	494b      	ldr	r1, [pc, #300]	; (22db8 <z_impl_k_poll+0x194>)
   22c8c:	f240 132f 	movw	r3, #303	; 0x12f
   22c90:	4a44      	ldr	r2, [pc, #272]	; (22da4 <z_impl_k_poll+0x180>)
   22c92:	4845      	ldr	r0, [pc, #276]	; (22da8 <z_impl_k_poll+0x184>)
   22c94:	f002 f91f 	bl	24ed6 <assert_print>
   22c98:	4848      	ldr	r0, [pc, #288]	; (22dbc <z_impl_k_poll+0x198>)
   22c9a:	f002 f91c 	bl	24ed6 <assert_print>
   22c9e:	f240 112f 	movw	r1, #303	; 0x12f
   22ca2:	e7df      	b.n	22c64 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22ca4:	ea57 0306 	orrs.w	r3, r7, r6
   22ca8:	bf0c      	ite	eq
   22caa:	2301      	moveq	r3, #1
   22cac:	2300      	movne	r3, #0
   22cae:	f7ff fda5 	bl	227fc <register_events>
   22cb2:	4681      	mov	r9, r0
   22cb4:	f04f 0320 	mov.w	r3, #32
   22cb8:	f3ef 8a11 	mrs	sl, BASEPRI
   22cbc:	f383 8812 	msr	BASEPRI_MAX, r3
   22cc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cc4:	483e      	ldr	r0, [pc, #248]	; (22dc0 <z_impl_k_poll+0x19c>)
   22cc6:	f7fc fe83 	bl	1f9d0 <z_spin_lock_valid>
   22cca:	b960      	cbnz	r0, 22ce6 <z_impl_k_poll+0xc2>
   22ccc:	2394      	movs	r3, #148	; 0x94
   22cce:	4a3d      	ldr	r2, [pc, #244]	; (22dc4 <z_impl_k_poll+0x1a0>)
   22cd0:	493d      	ldr	r1, [pc, #244]	; (22dc8 <z_impl_k_poll+0x1a4>)
   22cd2:	4835      	ldr	r0, [pc, #212]	; (22da8 <z_impl_k_poll+0x184>)
   22cd4:	f002 f8ff 	bl	24ed6 <assert_print>
   22cd8:	4939      	ldr	r1, [pc, #228]	; (22dc0 <z_impl_k_poll+0x19c>)
   22cda:	483c      	ldr	r0, [pc, #240]	; (22dcc <z_impl_k_poll+0x1a8>)
   22cdc:	f002 f8fb 	bl	24ed6 <assert_print>
   22ce0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ce2:	4838      	ldr	r0, [pc, #224]	; (22dc4 <z_impl_k_poll+0x1a0>)
   22ce4:	e7bf      	b.n	22c66 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   22ce6:	4836      	ldr	r0, [pc, #216]	; (22dc0 <z_impl_k_poll+0x19c>)
   22ce8:	f7fc fe8e 	bl	1fa08 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22cec:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   22cf0:	b9e4      	cbnz	r4, 22d2c <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   22cf2:	4628      	mov	r0, r5
   22cf4:	4652      	mov	r2, sl
   22cf6:	4649      	mov	r1, r9
   22cf8:	f7ff fe8e 	bl	22a18 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cfc:	4830      	ldr	r0, [pc, #192]	; (22dc0 <z_impl_k_poll+0x19c>)
   22cfe:	f7fc fe75 	bl	1f9ec <z_spin_unlock_valid>
   22d02:	b958      	cbnz	r0, 22d1c <z_impl_k_poll+0xf8>
   22d04:	23c2      	movs	r3, #194	; 0xc2
   22d06:	4a2f      	ldr	r2, [pc, #188]	; (22dc4 <z_impl_k_poll+0x1a0>)
   22d08:	4931      	ldr	r1, [pc, #196]	; (22dd0 <z_impl_k_poll+0x1ac>)
   22d0a:	4827      	ldr	r0, [pc, #156]	; (22da8 <z_impl_k_poll+0x184>)
   22d0c:	f002 f8e3 	bl	24ed6 <assert_print>
   22d10:	492b      	ldr	r1, [pc, #172]	; (22dc0 <z_impl_k_poll+0x19c>)
   22d12:	4830      	ldr	r0, [pc, #192]	; (22dd4 <z_impl_k_poll+0x1b0>)
   22d14:	f002 f8df 	bl	24ed6 <assert_print>
   22d18:	21c2      	movs	r1, #194	; 0xc2
   22d1a:	e7e2      	b.n	22ce2 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   22d1c:	f38a 8811 	msr	BASEPRI, sl
   22d20:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22d24:	4620      	mov	r0, r4
   22d26:	b003      	add	sp, #12
   22d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22d2c:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   22d30:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22d34:	d10b      	bne.n	22d4e <z_impl_k_poll+0x12a>
   22d36:	4822      	ldr	r0, [pc, #136]	; (22dc0 <z_impl_k_poll+0x19c>)
   22d38:	f7fc fe58 	bl	1f9ec <z_spin_unlock_valid>
   22d3c:	2800      	cmp	r0, #0
   22d3e:	d0e1      	beq.n	22d04 <z_impl_k_poll+0xe0>
   22d40:	f38a 8811 	msr	BASEPRI, sl
   22d44:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22d48:	f06f 040a 	mvn.w	r4, #10
   22d4c:	e7ea      	b.n	22d24 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22d4e:	4651      	mov	r1, sl
   22d50:	e9cd 7600 	strd	r7, r6, [sp]
   22d54:	4a20      	ldr	r2, [pc, #128]	; (22dd8 <z_impl_k_poll+0x1b4>)
   22d56:	481a      	ldr	r0, [pc, #104]	; (22dc0 <z_impl_k_poll+0x19c>)
   22d58:	f7fe fbd2 	bl	21500 <z_pend_curr>
   22d5c:	4604      	mov	r4, r0
	__asm__ volatile(
   22d5e:	f04f 0320 	mov.w	r3, #32
   22d62:	f3ef 8611 	mrs	r6, BASEPRI
   22d66:	f383 8812 	msr	BASEPRI_MAX, r3
   22d6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d6e:	4814      	ldr	r0, [pc, #80]	; (22dc0 <z_impl_k_poll+0x19c>)
   22d70:	f7fc fe2e 	bl	1f9d0 <z_spin_lock_valid>
   22d74:	2800      	cmp	r0, #0
   22d76:	d0a9      	beq.n	22ccc <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   22d78:	4811      	ldr	r0, [pc, #68]	; (22dc0 <z_impl_k_poll+0x19c>)
   22d7a:	f7fc fe45 	bl	1fa08 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   22d7e:	4628      	mov	r0, r5
   22d80:	4632      	mov	r2, r6
   22d82:	4649      	mov	r1, r9
   22d84:	f7ff fe48 	bl	22a18 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d88:	480d      	ldr	r0, [pc, #52]	; (22dc0 <z_impl_k_poll+0x19c>)
   22d8a:	f7fc fe2f 	bl	1f9ec <z_spin_unlock_valid>
   22d8e:	2800      	cmp	r0, #0
   22d90:	d0b8      	beq.n	22d04 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   22d92:	f386 8811 	msr	BASEPRI, r6
   22d96:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22d9a:	e7c3      	b.n	22d24 <z_impl_k_poll+0x100>
   22d9c:	20021504 	.word	0x20021504
   22da0:	00030aa1 	.word	0x00030aa1
   22da4:	00030f18 	.word	0x00030f18
   22da8:	0002b939 	.word	0x0002b939
   22dac:	0002f575 	.word	0x0002f575
   22db0:	000310d7 	.word	0x000310d7
   22db4:	000310ed 	.word	0x000310ed
   22db8:	000310fc 	.word	0x000310fc
   22dbc:	0003110c 	.word	0x0003110c
   22dc0:	2002155c 	.word	0x2002155c
   22dc4:	0002c76f 	.word	0x0002c76f
   22dc8:	0002c7c8 	.word	0x0002c7c8
   22dcc:	0002c7dd 	.word	0x0002c7dd
   22dd0:	0002c79c 	.word	0x0002c79c
   22dd4:	0002c7b3 	.word	0x0002c7b3
   22dd8:	2000873c 	.word	0x2000873c

00022ddc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22ddc:	b570      	push	{r4, r5, r6, lr}
   22dde:	4604      	mov	r4, r0
   22de0:	460d      	mov	r5, r1
	__asm__ volatile(
   22de2:	f04f 0320 	mov.w	r3, #32
   22de6:	f3ef 8611 	mrs	r6, BASEPRI
   22dea:	f383 8812 	msr	BASEPRI_MAX, r3
   22dee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22df2:	4820      	ldr	r0, [pc, #128]	; (22e74 <z_impl_k_poll_signal_raise+0x98>)
   22df4:	f7fc fdec 	bl	1f9d0 <z_spin_lock_valid>
   22df8:	b968      	cbnz	r0, 22e16 <z_impl_k_poll_signal_raise+0x3a>
   22dfa:	2394      	movs	r3, #148	; 0x94
   22dfc:	4a1e      	ldr	r2, [pc, #120]	; (22e78 <z_impl_k_poll_signal_raise+0x9c>)
   22dfe:	491f      	ldr	r1, [pc, #124]	; (22e7c <z_impl_k_poll_signal_raise+0xa0>)
   22e00:	481f      	ldr	r0, [pc, #124]	; (22e80 <z_impl_k_poll_signal_raise+0xa4>)
   22e02:	f002 f868 	bl	24ed6 <assert_print>
   22e06:	491b      	ldr	r1, [pc, #108]	; (22e74 <z_impl_k_poll_signal_raise+0x98>)
   22e08:	481e      	ldr	r0, [pc, #120]	; (22e84 <z_impl_k_poll_signal_raise+0xa8>)
   22e0a:	f002 f864 	bl	24ed6 <assert_print>
   22e0e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e10:	4819      	ldr	r0, [pc, #100]	; (22e78 <z_impl_k_poll_signal_raise+0x9c>)
   22e12:	f002 f859 	bl	24ec8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e16:	4817      	ldr	r0, [pc, #92]	; (22e74 <z_impl_k_poll_signal_raise+0x98>)
   22e18:	f7fc fdf6 	bl	1fa08 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   22e1c:	2101      	movs	r1, #1
	return list->head == list;
   22e1e:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   22e20:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22e22:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   22e24:	60a1      	str	r1, [r4, #8]
   22e26:	d10f      	bne.n	22e48 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e28:	4812      	ldr	r0, [pc, #72]	; (22e74 <z_impl_k_poll_signal_raise+0x98>)
   22e2a:	f7fc fddf 	bl	1f9ec <z_spin_unlock_valid>
   22e2e:	b9d8      	cbnz	r0, 22e68 <z_impl_k_poll_signal_raise+0x8c>
   22e30:	23c2      	movs	r3, #194	; 0xc2
   22e32:	4a11      	ldr	r2, [pc, #68]	; (22e78 <z_impl_k_poll_signal_raise+0x9c>)
   22e34:	4914      	ldr	r1, [pc, #80]	; (22e88 <z_impl_k_poll_signal_raise+0xac>)
   22e36:	4812      	ldr	r0, [pc, #72]	; (22e80 <z_impl_k_poll_signal_raise+0xa4>)
   22e38:	f002 f84d 	bl	24ed6 <assert_print>
   22e3c:	490d      	ldr	r1, [pc, #52]	; (22e74 <z_impl_k_poll_signal_raise+0x98>)
   22e3e:	4813      	ldr	r0, [pc, #76]	; (22e8c <z_impl_k_poll_signal_raise+0xb0>)
   22e40:	f002 f849 	bl	24ed6 <assert_print>
   22e44:	21c2      	movs	r1, #194	; 0xc2
   22e46:	e7e3      	b.n	22e10 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   22e48:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22e4c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22e4e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22e50:	2300      	movs	r3, #0
	node->prev = NULL;
   22e52:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22e56:	f006 fd1b 	bl	29890 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   22e5a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22e5c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   22e5e:	4805      	ldr	r0, [pc, #20]	; (22e74 <z_impl_k_poll_signal_raise+0x98>)
   22e60:	f7fe f880 	bl	20f64 <z_reschedule>
	return rc;
}
   22e64:	4620      	mov	r0, r4
   22e66:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   22e68:	f386 8811 	msr	BASEPRI, r6
   22e6c:	f3bf 8f6f 	isb	sy
		return 0;
   22e70:	2400      	movs	r4, #0
   22e72:	e7f7      	b.n	22e64 <z_impl_k_poll_signal_raise+0x88>
   22e74:	2002155c 	.word	0x2002155c
   22e78:	0002c76f 	.word	0x0002c76f
   22e7c:	0002c7c8 	.word	0x0002c7c8
   22e80:	0002b939 	.word	0x0002b939
   22e84:	0002c7dd 	.word	0x0002c7dd
   22e88:	0002c79c 	.word	0x0002c79c
   22e8c:	0002c7b3 	.word	0x0002c7b3

00022e90 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22e90:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   22e92:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   22e96:	4606      	mov	r6, r0
   22e98:	460d      	mov	r5, r1
   22e9a:	d220      	bcs.n	22ede <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22e9c:	f04f 0800 	mov.w	r8, #0
   22ea0:	f04f 0900 	mov.w	r9, #0
   22ea4:	f041 0104 	orr.w	r1, r1, #4
   22ea8:	e9cd 8900 	strd	r8, r9, [sp]
   22eac:	f7fc fa8c 	bl	1f3c8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   22eb0:	4604      	mov	r4, r0
   22eb2:	b1a0      	cbz	r0, 22ede <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   22eb4:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   22eb8:	b195      	cbz	r5, 22ee0 <z_heap_aligned_alloc+0x50>
   22eba:	1e6b      	subs	r3, r5, #1
   22ebc:	421c      	tst	r4, r3
   22ebe:	d00f      	beq.n	22ee0 <z_heap_aligned_alloc+0x50>
   22ec0:	2325      	movs	r3, #37	; 0x25
   22ec2:	4a09      	ldr	r2, [pc, #36]	; (22ee8 <z_heap_aligned_alloc+0x58>)
   22ec4:	4909      	ldr	r1, [pc, #36]	; (22eec <z_heap_aligned_alloc+0x5c>)
   22ec6:	480a      	ldr	r0, [pc, #40]	; (22ef0 <z_heap_aligned_alloc+0x60>)
   22ec8:	f002 f805 	bl	24ed6 <assert_print>
   22ecc:	4621      	mov	r1, r4
   22ece:	4809      	ldr	r0, [pc, #36]	; (22ef4 <z_heap_aligned_alloc+0x64>)
   22ed0:	462a      	mov	r2, r5
   22ed2:	f002 f800 	bl	24ed6 <assert_print>
   22ed6:	2125      	movs	r1, #37	; 0x25
   22ed8:	4803      	ldr	r0, [pc, #12]	; (22ee8 <z_heap_aligned_alloc+0x58>)
   22eda:	f001 fff5 	bl	24ec8 <assert_post_action>
		return NULL;
   22ede:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   22ee0:	4620      	mov	r0, r4
   22ee2:	b002      	add	sp, #8
   22ee4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   22ee8:	00031119 	.word	0x00031119
   22eec:	0003113d 	.word	0x0003113d
   22ef0:	0002b939 	.word	0x0002b939
   22ef4:	0003116f 	.word	0x0003116f

00022ef8 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   22ef8:	2803      	cmp	r0, #3
{
   22efa:	460a      	mov	r2, r1
   22efc:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   22efe:	d901      	bls.n	22f04 <k_aligned_alloc+0xc>
   22f00:	0783      	lsls	r3, r0, #30
   22f02:	d00c      	beq.n	22f1e <k_aligned_alloc+0x26>
   22f04:	4910      	ldr	r1, [pc, #64]	; (22f48 <k_aligned_alloc+0x50>)
   22f06:	2342      	movs	r3, #66	; 0x42
   22f08:	4a10      	ldr	r2, [pc, #64]	; (22f4c <k_aligned_alloc+0x54>)
   22f0a:	4811      	ldr	r0, [pc, #68]	; (22f50 <k_aligned_alloc+0x58>)
   22f0c:	f001 ffe3 	bl	24ed6 <assert_print>
   22f10:	4810      	ldr	r0, [pc, #64]	; (22f54 <k_aligned_alloc+0x5c>)
   22f12:	f001 ffe0 	bl	24ed6 <assert_print>
   22f16:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   22f18:	480c      	ldr	r0, [pc, #48]	; (22f4c <k_aligned_alloc+0x54>)
   22f1a:	f001 ffd5 	bl	24ec8 <assert_post_action>
   22f1e:	1e43      	subs	r3, r0, #1
   22f20:	4203      	tst	r3, r0
   22f22:	d00a      	beq.n	22f3a <k_aligned_alloc+0x42>
   22f24:	490c      	ldr	r1, [pc, #48]	; (22f58 <k_aligned_alloc+0x60>)
   22f26:	2346      	movs	r3, #70	; 0x46
   22f28:	4a08      	ldr	r2, [pc, #32]	; (22f4c <k_aligned_alloc+0x54>)
   22f2a:	4809      	ldr	r0, [pc, #36]	; (22f50 <k_aligned_alloc+0x58>)
   22f2c:	f001 ffd3 	bl	24ed6 <assert_print>
   22f30:	480a      	ldr	r0, [pc, #40]	; (22f5c <k_aligned_alloc+0x64>)
   22f32:	f001 ffd0 	bl	24ed6 <assert_print>
   22f36:	2146      	movs	r1, #70	; 0x46
   22f38:	e7ee      	b.n	22f18 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   22f3a:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   22f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   22f40:	4807      	ldr	r0, [pc, #28]	; (22f60 <k_aligned_alloc+0x68>)
   22f42:	f7ff bfa5 	b.w	22e90 <z_heap_aligned_alloc>
   22f46:	bf00      	nop
   22f48:	00031197 	.word	0x00031197
   22f4c:	00031119 	.word	0x00031119
   22f50:	0002b939 	.word	0x0002b939
   22f54:	000311d4 	.word	0x000311d4
   22f58:	0002c5d9 	.word	0x0002c5d9
   22f5c:	0002c5f4 	.word	0x0002c5f4
   22f60:	20008a68 	.word	0x20008a68

00022f64 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   22f64:	4b01      	ldr	r3, [pc, #4]	; (22f6c <k_thread_system_pool_assign+0x8>)
   22f66:	6743      	str	r3, [r0, #116]	; 0x74
}
   22f68:	4770      	bx	lr
   22f6a:	bf00      	nop
   22f6c:	20008a68 	.word	0x20008a68

00022f70 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   22f70:	b538      	push	{r3, r4, r5, lr}
   22f72:	4604      	mov	r4, r0
   22f74:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22f76:	f006 fb0f 	bl	29598 <k_is_in_isr>
   22f7a:	b920      	cbnz	r0, 22f86 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22f7c:	4b06      	ldr	r3, [pc, #24]	; (22f98 <z_thread_aligned_alloc+0x28>)
   22f7e:	689b      	ldr	r3, [r3, #8]
   22f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   22f82:	b90b      	cbnz	r3, 22f88 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   22f84:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   22f86:	4b05      	ldr	r3, [pc, #20]	; (22f9c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   22f88:	462a      	mov	r2, r5
   22f8a:	4621      	mov	r1, r4
   22f8c:	4618      	mov	r0, r3
}
   22f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   22f92:	f7ff bf7d 	b.w	22e90 <z_heap_aligned_alloc>
   22f96:	bf00      	nop
   22f98:	20021504 	.word	0x20021504
   22f9c:	20008a68 	.word	0x20008a68

00022fa0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   22fa0:	4801      	ldr	r0, [pc, #4]	; (22fa8 <boot_banner+0x8>)
   22fa2:	f001 bdd6 	b.w	24b52 <printk>
   22fa6:	bf00      	nop
   22fa8:	00031201 	.word	0x00031201

00022fac <log>:
   22fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22fae:	4604      	mov	r4, r0
   22fb0:	460d      	mov	r5, r1
   22fb2:	f7e6 fcb1 	bl	9918 <__ieee754_log>
   22fb6:	4b17      	ldr	r3, [pc, #92]	; (23014 <log+0x68>)
   22fb8:	4606      	mov	r6, r0
   22fba:	460f      	mov	r7, r1
   22fbc:	f993 3000 	ldrsb.w	r3, [r3]
   22fc0:	3301      	adds	r3, #1
   22fc2:	d01a      	beq.n	22ffa <log+0x4e>
   22fc4:	4622      	mov	r2, r4
   22fc6:	462b      	mov	r3, r5
   22fc8:	4620      	mov	r0, r4
   22fca:	4629      	mov	r1, r5
   22fcc:	f7e6 f832 	bl	9034 <__aeabi_dcmpun>
   22fd0:	b998      	cbnz	r0, 22ffa <log+0x4e>
   22fd2:	2200      	movs	r2, #0
   22fd4:	2300      	movs	r3, #0
   22fd6:	4620      	mov	r0, r4
   22fd8:	4629      	mov	r1, r5
   22fda:	f7e6 f821 	bl	9020 <__aeabi_dcmpgt>
   22fde:	b960      	cbnz	r0, 22ffa <log+0x4e>
   22fe0:	2200      	movs	r2, #0
   22fe2:	2300      	movs	r3, #0
   22fe4:	4620      	mov	r0, r4
   22fe6:	4629      	mov	r1, r5
   22fe8:	f7e5 fff2 	bl	8fd0 <__aeabi_dcmpeq>
   22fec:	b140      	cbz	r0, 23000 <log+0x54>
   22fee:	f003 f827 	bl	26040 <__errno>
   22ff2:	2600      	movs	r6, #0
   22ff4:	2322      	movs	r3, #34	; 0x22
   22ff6:	4f08      	ldr	r7, [pc, #32]	; (23018 <log+0x6c>)
   22ff8:	6003      	str	r3, [r0, #0]
   22ffa:	4630      	mov	r0, r6
   22ffc:	4639      	mov	r1, r7
   22ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23000:	f003 f81e 	bl	26040 <__errno>
   23004:	2321      	movs	r3, #33	; 0x21
   23006:	6003      	str	r3, [r0, #0]
   23008:	4804      	ldr	r0, [pc, #16]	; (2301c <log+0x70>)
   2300a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2300e:	f000 b807 	b.w	23020 <nan>
   23012:	bf00      	nop
   23014:	200089e7 	.word	0x200089e7
   23018:	fff00000 	.word	0xfff00000
   2301c:	0002f577 	.word	0x0002f577

00023020 <nan>:
   23020:	2000      	movs	r0, #0
   23022:	4901      	ldr	r1, [pc, #4]	; (23028 <nan+0x8>)
   23024:	4770      	bx	lr
   23026:	bf00      	nop
   23028:	7ff80000 	.word	0x7ff80000

0002302c <malloc>:
   2302c:	4b02      	ldr	r3, [pc, #8]	; (23038 <malloc+0xc>)
   2302e:	4601      	mov	r1, r0
   23030:	6818      	ldr	r0, [r3, #0]
   23032:	f000 b84d 	b.w	230d0 <_malloc_r>
   23036:	bf00      	nop
   23038:	20008744 	.word	0x20008744

0002303c <_free_r>:
   2303c:	b538      	push	{r3, r4, r5, lr}
   2303e:	4605      	mov	r5, r0
   23040:	2900      	cmp	r1, #0
   23042:	d041      	beq.n	230c8 <_free_r+0x8c>
   23044:	f851 3c04 	ldr.w	r3, [r1, #-4]
   23048:	1f0c      	subs	r4, r1, #4
   2304a:	2b00      	cmp	r3, #0
   2304c:	bfb8      	it	lt
   2304e:	18e4      	addlt	r4, r4, r3
   23050:	f000 fd4c 	bl	23aec <__malloc_lock>
   23054:	4a1d      	ldr	r2, [pc, #116]	; (230cc <_free_r+0x90>)
   23056:	6813      	ldr	r3, [r2, #0]
   23058:	b933      	cbnz	r3, 23068 <_free_r+0x2c>
   2305a:	6063      	str	r3, [r4, #4]
   2305c:	6014      	str	r4, [r2, #0]
   2305e:	4628      	mov	r0, r5
   23060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23064:	f000 bd48 	b.w	23af8 <__malloc_unlock>
   23068:	42a3      	cmp	r3, r4
   2306a:	d908      	bls.n	2307e <_free_r+0x42>
   2306c:	6820      	ldr	r0, [r4, #0]
   2306e:	1821      	adds	r1, r4, r0
   23070:	428b      	cmp	r3, r1
   23072:	bf01      	itttt	eq
   23074:	6819      	ldreq	r1, [r3, #0]
   23076:	685b      	ldreq	r3, [r3, #4]
   23078:	1809      	addeq	r1, r1, r0
   2307a:	6021      	streq	r1, [r4, #0]
   2307c:	e7ed      	b.n	2305a <_free_r+0x1e>
   2307e:	461a      	mov	r2, r3
   23080:	685b      	ldr	r3, [r3, #4]
   23082:	b10b      	cbz	r3, 23088 <_free_r+0x4c>
   23084:	42a3      	cmp	r3, r4
   23086:	d9fa      	bls.n	2307e <_free_r+0x42>
   23088:	6811      	ldr	r1, [r2, #0]
   2308a:	1850      	adds	r0, r2, r1
   2308c:	42a0      	cmp	r0, r4
   2308e:	d10b      	bne.n	230a8 <_free_r+0x6c>
   23090:	6820      	ldr	r0, [r4, #0]
   23092:	4401      	add	r1, r0
   23094:	1850      	adds	r0, r2, r1
   23096:	6011      	str	r1, [r2, #0]
   23098:	4283      	cmp	r3, r0
   2309a:	d1e0      	bne.n	2305e <_free_r+0x22>
   2309c:	6818      	ldr	r0, [r3, #0]
   2309e:	685b      	ldr	r3, [r3, #4]
   230a0:	4408      	add	r0, r1
   230a2:	6053      	str	r3, [r2, #4]
   230a4:	6010      	str	r0, [r2, #0]
   230a6:	e7da      	b.n	2305e <_free_r+0x22>
   230a8:	d902      	bls.n	230b0 <_free_r+0x74>
   230aa:	230c      	movs	r3, #12
   230ac:	602b      	str	r3, [r5, #0]
   230ae:	e7d6      	b.n	2305e <_free_r+0x22>
   230b0:	6820      	ldr	r0, [r4, #0]
   230b2:	1821      	adds	r1, r4, r0
   230b4:	428b      	cmp	r3, r1
   230b6:	bf02      	ittt	eq
   230b8:	6819      	ldreq	r1, [r3, #0]
   230ba:	685b      	ldreq	r3, [r3, #4]
   230bc:	1809      	addeq	r1, r1, r0
   230be:	6063      	str	r3, [r4, #4]
   230c0:	bf08      	it	eq
   230c2:	6021      	streq	r1, [r4, #0]
   230c4:	6054      	str	r4, [r2, #4]
   230c6:	e7ca      	b.n	2305e <_free_r+0x22>
   230c8:	bd38      	pop	{r3, r4, r5, pc}
   230ca:	bf00      	nop
   230cc:	20021564 	.word	0x20021564

000230d0 <_malloc_r>:
   230d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   230d2:	1ccd      	adds	r5, r1, #3
   230d4:	4606      	mov	r6, r0
   230d6:	f025 0503 	bic.w	r5, r5, #3
   230da:	3508      	adds	r5, #8
   230dc:	2d0c      	cmp	r5, #12
   230de:	bf38      	it	cc
   230e0:	250c      	movcc	r5, #12
   230e2:	2d00      	cmp	r5, #0
   230e4:	db01      	blt.n	230ea <_malloc_r+0x1a>
   230e6:	42a9      	cmp	r1, r5
   230e8:	d903      	bls.n	230f2 <_malloc_r+0x22>
   230ea:	230c      	movs	r3, #12
   230ec:	6033      	str	r3, [r6, #0]
   230ee:	2000      	movs	r0, #0
   230f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   230f2:	f000 fcfb 	bl	23aec <__malloc_lock>
   230f6:	4921      	ldr	r1, [pc, #132]	; (2317c <_malloc_r+0xac>)
   230f8:	680a      	ldr	r2, [r1, #0]
   230fa:	4614      	mov	r4, r2
   230fc:	b99c      	cbnz	r4, 23126 <_malloc_r+0x56>
   230fe:	4f20      	ldr	r7, [pc, #128]	; (23180 <_malloc_r+0xb0>)
   23100:	683b      	ldr	r3, [r7, #0]
   23102:	b923      	cbnz	r3, 2310e <_malloc_r+0x3e>
   23104:	4621      	mov	r1, r4
   23106:	4630      	mov	r0, r6
   23108:	f000 fbb8 	bl	2387c <_sbrk_r>
   2310c:	6038      	str	r0, [r7, #0]
   2310e:	4629      	mov	r1, r5
   23110:	4630      	mov	r0, r6
   23112:	f000 fbb3 	bl	2387c <_sbrk_r>
   23116:	1c43      	adds	r3, r0, #1
   23118:	d123      	bne.n	23162 <_malloc_r+0x92>
   2311a:	230c      	movs	r3, #12
   2311c:	4630      	mov	r0, r6
   2311e:	6033      	str	r3, [r6, #0]
   23120:	f000 fcea 	bl	23af8 <__malloc_unlock>
   23124:	e7e3      	b.n	230ee <_malloc_r+0x1e>
   23126:	6823      	ldr	r3, [r4, #0]
   23128:	1b5b      	subs	r3, r3, r5
   2312a:	d417      	bmi.n	2315c <_malloc_r+0x8c>
   2312c:	2b0b      	cmp	r3, #11
   2312e:	d903      	bls.n	23138 <_malloc_r+0x68>
   23130:	6023      	str	r3, [r4, #0]
   23132:	441c      	add	r4, r3
   23134:	6025      	str	r5, [r4, #0]
   23136:	e004      	b.n	23142 <_malloc_r+0x72>
   23138:	6863      	ldr	r3, [r4, #4]
   2313a:	42a2      	cmp	r2, r4
   2313c:	bf0c      	ite	eq
   2313e:	600b      	streq	r3, [r1, #0]
   23140:	6053      	strne	r3, [r2, #4]
   23142:	4630      	mov	r0, r6
   23144:	f000 fcd8 	bl	23af8 <__malloc_unlock>
   23148:	f104 000b 	add.w	r0, r4, #11
   2314c:	1d23      	adds	r3, r4, #4
   2314e:	f020 0007 	bic.w	r0, r0, #7
   23152:	1ac2      	subs	r2, r0, r3
   23154:	bf1c      	itt	ne
   23156:	1a1b      	subne	r3, r3, r0
   23158:	50a3      	strne	r3, [r4, r2]
   2315a:	e7c9      	b.n	230f0 <_malloc_r+0x20>
   2315c:	4622      	mov	r2, r4
   2315e:	6864      	ldr	r4, [r4, #4]
   23160:	e7cc      	b.n	230fc <_malloc_r+0x2c>
   23162:	1cc4      	adds	r4, r0, #3
   23164:	f024 0403 	bic.w	r4, r4, #3
   23168:	42a0      	cmp	r0, r4
   2316a:	d0e3      	beq.n	23134 <_malloc_r+0x64>
   2316c:	1a21      	subs	r1, r4, r0
   2316e:	4630      	mov	r0, r6
   23170:	f000 fb84 	bl	2387c <_sbrk_r>
   23174:	3001      	adds	r0, #1
   23176:	d1dd      	bne.n	23134 <_malloc_r+0x64>
   23178:	e7cf      	b.n	2311a <_malloc_r+0x4a>
   2317a:	bf00      	nop
   2317c:	20021564 	.word	0x20021564
   23180:	20021560 	.word	0x20021560

00023184 <_printf_float>:
   23184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23188:	b091      	sub	sp, #68	; 0x44
   2318a:	460c      	mov	r4, r1
   2318c:	4616      	mov	r6, r2
   2318e:	461f      	mov	r7, r3
   23190:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   23194:	4605      	mov	r5, r0
   23196:	f000 fca5 	bl	23ae4 <_localeconv_r>
   2319a:	6803      	ldr	r3, [r0, #0]
   2319c:	4618      	mov	r0, r3
   2319e:	9308      	str	r3, [sp, #32]
   231a0:	f7e6 f8de 	bl	9360 <strlen>
   231a4:	2300      	movs	r3, #0
   231a6:	9009      	str	r0, [sp, #36]	; 0x24
   231a8:	930e      	str	r3, [sp, #56]	; 0x38
   231aa:	f8d8 3000 	ldr.w	r3, [r8]
   231ae:	f894 a018 	ldrb.w	sl, [r4, #24]
   231b2:	3307      	adds	r3, #7
   231b4:	f8d4 b000 	ldr.w	fp, [r4]
   231b8:	f023 0307 	bic.w	r3, r3, #7
   231bc:	f103 0208 	add.w	r2, r3, #8
   231c0:	f8c8 2000 	str.w	r2, [r8]
   231c4:	f04f 32ff 	mov.w	r2, #4294967295
   231c8:	e9d3 8900 	ldrd	r8, r9, [r3]
   231cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   231d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   231d4:	930b      	str	r3, [sp, #44]	; 0x2c
   231d6:	4b9d      	ldr	r3, [pc, #628]	; (2344c <_printf_float+0x2c8>)
   231d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   231dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   231e0:	f7e5 ff28 	bl	9034 <__aeabi_dcmpun>
   231e4:	bb70      	cbnz	r0, 23244 <_printf_float+0xc0>
   231e6:	f04f 32ff 	mov.w	r2, #4294967295
   231ea:	4b98      	ldr	r3, [pc, #608]	; (2344c <_printf_float+0x2c8>)
   231ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   231f0:	f7e5 ff02 	bl	8ff8 <__aeabi_dcmple>
   231f4:	bb30      	cbnz	r0, 23244 <_printf_float+0xc0>
   231f6:	2200      	movs	r2, #0
   231f8:	2300      	movs	r3, #0
   231fa:	4640      	mov	r0, r8
   231fc:	4649      	mov	r1, r9
   231fe:	f7e5 fef1 	bl	8fe4 <__aeabi_dcmplt>
   23202:	b110      	cbz	r0, 2320a <_printf_float+0x86>
   23204:	232d      	movs	r3, #45	; 0x2d
   23206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2320a:	4a91      	ldr	r2, [pc, #580]	; (23450 <_printf_float+0x2cc>)
   2320c:	4b91      	ldr	r3, [pc, #580]	; (23454 <_printf_float+0x2d0>)
   2320e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   23212:	bf94      	ite	ls
   23214:	4690      	movls	r8, r2
   23216:	4698      	movhi	r8, r3
   23218:	2303      	movs	r3, #3
   2321a:	f04f 0900 	mov.w	r9, #0
   2321e:	6123      	str	r3, [r4, #16]
   23220:	f02b 0304 	bic.w	r3, fp, #4
   23224:	6023      	str	r3, [r4, #0]
   23226:	4633      	mov	r3, r6
   23228:	aa0f      	add	r2, sp, #60	; 0x3c
   2322a:	4621      	mov	r1, r4
   2322c:	4628      	mov	r0, r5
   2322e:	9700      	str	r7, [sp, #0]
   23230:	f006 fca7 	bl	29b82 <_printf_common>
   23234:	3001      	adds	r0, #1
   23236:	f040 8099 	bne.w	2336c <_printf_float+0x1e8>
   2323a:	f04f 30ff 	mov.w	r0, #4294967295
   2323e:	b011      	add	sp, #68	; 0x44
   23240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23244:	4642      	mov	r2, r8
   23246:	464b      	mov	r3, r9
   23248:	4640      	mov	r0, r8
   2324a:	4649      	mov	r1, r9
   2324c:	f7e5 fef2 	bl	9034 <__aeabi_dcmpun>
   23250:	b140      	cbz	r0, 23264 <_printf_float+0xe0>
   23252:	464b      	mov	r3, r9
   23254:	4a80      	ldr	r2, [pc, #512]	; (23458 <_printf_float+0x2d4>)
   23256:	2b00      	cmp	r3, #0
   23258:	bfbc      	itt	lt
   2325a:	232d      	movlt	r3, #45	; 0x2d
   2325c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   23260:	4b7e      	ldr	r3, [pc, #504]	; (2345c <_printf_float+0x2d8>)
   23262:	e7d4      	b.n	2320e <_printf_float+0x8a>
   23264:	6863      	ldr	r3, [r4, #4]
   23266:	1c5a      	adds	r2, r3, #1
   23268:	d129      	bne.n	232be <_printf_float+0x13a>
   2326a:	2306      	movs	r3, #6
   2326c:	6063      	str	r3, [r4, #4]
   2326e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   23272:	2200      	movs	r2, #0
   23274:	4628      	mov	r0, r5
   23276:	6023      	str	r3, [r4, #0]
   23278:	9206      	str	r2, [sp, #24]
   2327a:	aa0e      	add	r2, sp, #56	; 0x38
   2327c:	e9cd a204 	strd	sl, r2, [sp, #16]
   23280:	aa0d      	add	r2, sp, #52	; 0x34
   23282:	9203      	str	r2, [sp, #12]
   23284:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   23288:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2328c:	6863      	ldr	r3, [r4, #4]
   2328e:	4642      	mov	r2, r8
   23290:	9300      	str	r3, [sp, #0]
   23292:	464b      	mov	r3, r9
   23294:	f006 fbd5 	bl	29a42 <__cvt>
   23298:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   2329c:	4680      	mov	r8, r0
   2329e:	990d      	ldr	r1, [sp, #52]	; 0x34
   232a0:	d115      	bne.n	232ce <_printf_float+0x14a>
   232a2:	1ccb      	adds	r3, r1, #3
   232a4:	db3b      	blt.n	2331e <_printf_float+0x19a>
   232a6:	6863      	ldr	r3, [r4, #4]
   232a8:	4299      	cmp	r1, r3
   232aa:	dc38      	bgt.n	2331e <_printf_float+0x19a>
   232ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   232ae:	4299      	cmp	r1, r3
   232b0:	db55      	blt.n	2335e <_printf_float+0x1da>
   232b2:	6823      	ldr	r3, [r4, #0]
   232b4:	6121      	str	r1, [r4, #16]
   232b6:	07d8      	lsls	r0, r3, #31
   232b8:	d545      	bpl.n	23346 <_printf_float+0x1c2>
   232ba:	1c4b      	adds	r3, r1, #1
   232bc:	e042      	b.n	23344 <_printf_float+0x1c0>
   232be:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   232c2:	2a47      	cmp	r2, #71	; 0x47
   232c4:	d1d3      	bne.n	2326e <_printf_float+0xea>
   232c6:	2b00      	cmp	r3, #0
   232c8:	d1d1      	bne.n	2326e <_printf_float+0xea>
   232ca:	2301      	movs	r3, #1
   232cc:	e7ce      	b.n	2326c <_printf_float+0xe8>
   232ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   232d2:	d107      	bne.n	232e4 <_printf_float+0x160>
   232d4:	1cc8      	adds	r0, r1, #3
   232d6:	db25      	blt.n	23324 <_printf_float+0x1a0>
   232d8:	6863      	ldr	r3, [r4, #4]
   232da:	428b      	cmp	r3, r1
   232dc:	db22      	blt.n	23324 <_printf_float+0x1a0>
   232de:	f04f 0a67 	mov.w	sl, #103	; 0x67
   232e2:	e7e3      	b.n	232ac <_printf_float+0x128>
   232e4:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   232e8:	d81f      	bhi.n	2332a <_printf_float+0x1a6>
   232ea:	3901      	subs	r1, #1
   232ec:	4652      	mov	r2, sl
   232ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
   232f2:	910d      	str	r1, [sp, #52]	; 0x34
   232f4:	f006 fc0c 	bl	29b10 <__exponent>
   232f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   232fa:	4681      	mov	r9, r0
   232fc:	1813      	adds	r3, r2, r0
   232fe:	2a01      	cmp	r2, #1
   23300:	6123      	str	r3, [r4, #16]
   23302:	dc02      	bgt.n	2330a <_printf_float+0x186>
   23304:	6822      	ldr	r2, [r4, #0]
   23306:	07d2      	lsls	r2, r2, #31
   23308:	d501      	bpl.n	2330e <_printf_float+0x18a>
   2330a:	3301      	adds	r3, #1
   2330c:	6123      	str	r3, [r4, #16]
   2330e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   23312:	2b00      	cmp	r3, #0
   23314:	d087      	beq.n	23226 <_printf_float+0xa2>
   23316:	232d      	movs	r3, #45	; 0x2d
   23318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2331c:	e783      	b.n	23226 <_printf_float+0xa2>
   2331e:	f04f 0a65 	mov.w	sl, #101	; 0x65
   23322:	e7e2      	b.n	232ea <_printf_float+0x166>
   23324:	f04f 0a45 	mov.w	sl, #69	; 0x45
   23328:	e7df      	b.n	232ea <_printf_float+0x166>
   2332a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2332e:	d1bd      	bne.n	232ac <_printf_float+0x128>
   23330:	2900      	cmp	r1, #0
   23332:	6863      	ldr	r3, [r4, #4]
   23334:	dd0b      	ble.n	2334e <_printf_float+0x1ca>
   23336:	6121      	str	r1, [r4, #16]
   23338:	b913      	cbnz	r3, 23340 <_printf_float+0x1bc>
   2333a:	6822      	ldr	r2, [r4, #0]
   2333c:	07d0      	lsls	r0, r2, #31
   2333e:	d502      	bpl.n	23346 <_printf_float+0x1c2>
   23340:	3301      	adds	r3, #1
   23342:	440b      	add	r3, r1
   23344:	6123      	str	r3, [r4, #16]
   23346:	f04f 0900 	mov.w	r9, #0
   2334a:	65a1      	str	r1, [r4, #88]	; 0x58
   2334c:	e7df      	b.n	2330e <_printf_float+0x18a>
   2334e:	b913      	cbnz	r3, 23356 <_printf_float+0x1d2>
   23350:	6822      	ldr	r2, [r4, #0]
   23352:	07d2      	lsls	r2, r2, #31
   23354:	d501      	bpl.n	2335a <_printf_float+0x1d6>
   23356:	3302      	adds	r3, #2
   23358:	e7f4      	b.n	23344 <_printf_float+0x1c0>
   2335a:	2301      	movs	r3, #1
   2335c:	e7f2      	b.n	23344 <_printf_float+0x1c0>
   2335e:	2900      	cmp	r1, #0
   23360:	bfd4      	ite	le
   23362:	f1c1 0202 	rsble	r2, r1, #2
   23366:	2201      	movgt	r2, #1
   23368:	4413      	add	r3, r2
   2336a:	e7eb      	b.n	23344 <_printf_float+0x1c0>
   2336c:	6823      	ldr	r3, [r4, #0]
   2336e:	055a      	lsls	r2, r3, #21
   23370:	d407      	bmi.n	23382 <_printf_float+0x1fe>
   23372:	6923      	ldr	r3, [r4, #16]
   23374:	4642      	mov	r2, r8
   23376:	4631      	mov	r1, r6
   23378:	4628      	mov	r0, r5
   2337a:	47b8      	blx	r7
   2337c:	3001      	adds	r0, #1
   2337e:	d12b      	bne.n	233d8 <_printf_float+0x254>
   23380:	e75b      	b.n	2323a <_printf_float+0xb6>
   23382:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   23386:	f240 80dc 	bls.w	23542 <_printf_float+0x3be>
   2338a:	2200      	movs	r2, #0
   2338c:	2300      	movs	r3, #0
   2338e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   23392:	f7e5 fe1d 	bl	8fd0 <__aeabi_dcmpeq>
   23396:	2800      	cmp	r0, #0
   23398:	d033      	beq.n	23402 <_printf_float+0x27e>
   2339a:	2301      	movs	r3, #1
   2339c:	4a30      	ldr	r2, [pc, #192]	; (23460 <_printf_float+0x2dc>)
   2339e:	4631      	mov	r1, r6
   233a0:	4628      	mov	r0, r5
   233a2:	47b8      	blx	r7
   233a4:	3001      	adds	r0, #1
   233a6:	f43f af48 	beq.w	2323a <_printf_float+0xb6>
   233aa:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   233ae:	4543      	cmp	r3, r8
   233b0:	db02      	blt.n	233b8 <_printf_float+0x234>
   233b2:	6823      	ldr	r3, [r4, #0]
   233b4:	07d8      	lsls	r0, r3, #31
   233b6:	d50f      	bpl.n	233d8 <_printf_float+0x254>
   233b8:	4631      	mov	r1, r6
   233ba:	4628      	mov	r0, r5
   233bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   233c0:	47b8      	blx	r7
   233c2:	3001      	adds	r0, #1
   233c4:	f43f af39 	beq.w	2323a <_printf_float+0xb6>
   233c8:	f04f 0900 	mov.w	r9, #0
   233cc:	f108 38ff 	add.w	r8, r8, #4294967295
   233d0:	f104 0a1a 	add.w	sl, r4, #26
   233d4:	45c8      	cmp	r8, r9
   233d6:	dc09      	bgt.n	233ec <_printf_float+0x268>
   233d8:	6823      	ldr	r3, [r4, #0]
   233da:	079b      	lsls	r3, r3, #30
   233dc:	f100 8102 	bmi.w	235e4 <_printf_float+0x460>
   233e0:	68e0      	ldr	r0, [r4, #12]
   233e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   233e4:	4298      	cmp	r0, r3
   233e6:	bfb8      	it	lt
   233e8:	4618      	movlt	r0, r3
   233ea:	e728      	b.n	2323e <_printf_float+0xba>
   233ec:	2301      	movs	r3, #1
   233ee:	4652      	mov	r2, sl
   233f0:	4631      	mov	r1, r6
   233f2:	4628      	mov	r0, r5
   233f4:	47b8      	blx	r7
   233f6:	3001      	adds	r0, #1
   233f8:	f43f af1f 	beq.w	2323a <_printf_float+0xb6>
   233fc:	f109 0901 	add.w	r9, r9, #1
   23400:	e7e8      	b.n	233d4 <_printf_float+0x250>
   23402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23404:	2b00      	cmp	r3, #0
   23406:	dc38      	bgt.n	2347a <_printf_float+0x2f6>
   23408:	2301      	movs	r3, #1
   2340a:	4a15      	ldr	r2, [pc, #84]	; (23460 <_printf_float+0x2dc>)
   2340c:	4631      	mov	r1, r6
   2340e:	4628      	mov	r0, r5
   23410:	47b8      	blx	r7
   23412:	3001      	adds	r0, #1
   23414:	f43f af11 	beq.w	2323a <_printf_float+0xb6>
   23418:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   2341c:	ea59 0303 	orrs.w	r3, r9, r3
   23420:	d102      	bne.n	23428 <_printf_float+0x2a4>
   23422:	6823      	ldr	r3, [r4, #0]
   23424:	07d9      	lsls	r1, r3, #31
   23426:	d5d7      	bpl.n	233d8 <_printf_float+0x254>
   23428:	4631      	mov	r1, r6
   2342a:	4628      	mov	r0, r5
   2342c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   23430:	47b8      	blx	r7
   23432:	3001      	adds	r0, #1
   23434:	f43f af01 	beq.w	2323a <_printf_float+0xb6>
   23438:	f04f 0a00 	mov.w	sl, #0
   2343c:	f104 0b1a 	add.w	fp, r4, #26
   23440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23442:	425b      	negs	r3, r3
   23444:	4553      	cmp	r3, sl
   23446:	dc0d      	bgt.n	23464 <_printf_float+0x2e0>
   23448:	464b      	mov	r3, r9
   2344a:	e793      	b.n	23374 <_printf_float+0x1f0>
   2344c:	7fefffff 	.word	0x7fefffff
   23450:	00031334 	.word	0x00031334
   23454:	0002cbd1 	.word	0x0002cbd1
   23458:	00031338 	.word	0x00031338
   2345c:	0003133c 	.word	0x0003133c
   23460:	000311d2 	.word	0x000311d2
   23464:	2301      	movs	r3, #1
   23466:	465a      	mov	r2, fp
   23468:	4631      	mov	r1, r6
   2346a:	4628      	mov	r0, r5
   2346c:	47b8      	blx	r7
   2346e:	3001      	adds	r0, #1
   23470:	f43f aee3 	beq.w	2323a <_printf_float+0xb6>
   23474:	f10a 0a01 	add.w	sl, sl, #1
   23478:	e7e2      	b.n	23440 <_printf_float+0x2bc>
   2347a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2347c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   23480:	4553      	cmp	r3, sl
   23482:	bfa8      	it	ge
   23484:	4653      	movge	r3, sl
   23486:	2b00      	cmp	r3, #0
   23488:	4699      	mov	r9, r3
   2348a:	dc36      	bgt.n	234fa <_printf_float+0x376>
   2348c:	f04f 0b00 	mov.w	fp, #0
   23490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   23494:	f104 021a 	add.w	r2, r4, #26
   23498:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2349a:	930a      	str	r3, [sp, #40]	; 0x28
   2349c:	eba3 0309 	sub.w	r3, r3, r9
   234a0:	455b      	cmp	r3, fp
   234a2:	dc31      	bgt.n	23508 <_printf_float+0x384>
   234a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   234a6:	459a      	cmp	sl, r3
   234a8:	dc3a      	bgt.n	23520 <_printf_float+0x39c>
   234aa:	6823      	ldr	r3, [r4, #0]
   234ac:	07da      	lsls	r2, r3, #31
   234ae:	d437      	bmi.n	23520 <_printf_float+0x39c>
   234b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   234b2:	ebaa 0903 	sub.w	r9, sl, r3
   234b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   234b8:	ebaa 0303 	sub.w	r3, sl, r3
   234bc:	4599      	cmp	r9, r3
   234be:	bfa8      	it	ge
   234c0:	4699      	movge	r9, r3
   234c2:	f1b9 0f00 	cmp.w	r9, #0
   234c6:	dc33      	bgt.n	23530 <_printf_float+0x3ac>
   234c8:	f04f 0800 	mov.w	r8, #0
   234cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   234d0:	f104 0b1a 	add.w	fp, r4, #26
   234d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   234d6:	ebaa 0303 	sub.w	r3, sl, r3
   234da:	eba3 0309 	sub.w	r3, r3, r9
   234de:	4543      	cmp	r3, r8
   234e0:	f77f af7a 	ble.w	233d8 <_printf_float+0x254>
   234e4:	2301      	movs	r3, #1
   234e6:	465a      	mov	r2, fp
   234e8:	4631      	mov	r1, r6
   234ea:	4628      	mov	r0, r5
   234ec:	47b8      	blx	r7
   234ee:	3001      	adds	r0, #1
   234f0:	f43f aea3 	beq.w	2323a <_printf_float+0xb6>
   234f4:	f108 0801 	add.w	r8, r8, #1
   234f8:	e7ec      	b.n	234d4 <_printf_float+0x350>
   234fa:	4642      	mov	r2, r8
   234fc:	4631      	mov	r1, r6
   234fe:	4628      	mov	r0, r5
   23500:	47b8      	blx	r7
   23502:	3001      	adds	r0, #1
   23504:	d1c2      	bne.n	2348c <_printf_float+0x308>
   23506:	e698      	b.n	2323a <_printf_float+0xb6>
   23508:	2301      	movs	r3, #1
   2350a:	4631      	mov	r1, r6
   2350c:	4628      	mov	r0, r5
   2350e:	920a      	str	r2, [sp, #40]	; 0x28
   23510:	47b8      	blx	r7
   23512:	3001      	adds	r0, #1
   23514:	f43f ae91 	beq.w	2323a <_printf_float+0xb6>
   23518:	f10b 0b01 	add.w	fp, fp, #1
   2351c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2351e:	e7bb      	b.n	23498 <_printf_float+0x314>
   23520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   23524:	4631      	mov	r1, r6
   23526:	4628      	mov	r0, r5
   23528:	47b8      	blx	r7
   2352a:	3001      	adds	r0, #1
   2352c:	d1c0      	bne.n	234b0 <_printf_float+0x32c>
   2352e:	e684      	b.n	2323a <_printf_float+0xb6>
   23530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23532:	464b      	mov	r3, r9
   23534:	4631      	mov	r1, r6
   23536:	4628      	mov	r0, r5
   23538:	4442      	add	r2, r8
   2353a:	47b8      	blx	r7
   2353c:	3001      	adds	r0, #1
   2353e:	d1c3      	bne.n	234c8 <_printf_float+0x344>
   23540:	e67b      	b.n	2323a <_printf_float+0xb6>
   23542:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   23546:	f1ba 0f01 	cmp.w	sl, #1
   2354a:	dc01      	bgt.n	23550 <_printf_float+0x3cc>
   2354c:	07db      	lsls	r3, r3, #31
   2354e:	d536      	bpl.n	235be <_printf_float+0x43a>
   23550:	2301      	movs	r3, #1
   23552:	4642      	mov	r2, r8
   23554:	4631      	mov	r1, r6
   23556:	4628      	mov	r0, r5
   23558:	47b8      	blx	r7
   2355a:	3001      	adds	r0, #1
   2355c:	f43f ae6d 	beq.w	2323a <_printf_float+0xb6>
   23560:	4631      	mov	r1, r6
   23562:	4628      	mov	r0, r5
   23564:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   23568:	47b8      	blx	r7
   2356a:	3001      	adds	r0, #1
   2356c:	f43f ae65 	beq.w	2323a <_printf_float+0xb6>
   23570:	2200      	movs	r2, #0
   23572:	2300      	movs	r3, #0
   23574:	f10a 3aff 	add.w	sl, sl, #4294967295
   23578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2357c:	f7e5 fd28 	bl	8fd0 <__aeabi_dcmpeq>
   23580:	b9c0      	cbnz	r0, 235b4 <_printf_float+0x430>
   23582:	4653      	mov	r3, sl
   23584:	f108 0201 	add.w	r2, r8, #1
   23588:	4631      	mov	r1, r6
   2358a:	4628      	mov	r0, r5
   2358c:	47b8      	blx	r7
   2358e:	3001      	adds	r0, #1
   23590:	d10c      	bne.n	235ac <_printf_float+0x428>
   23592:	e652      	b.n	2323a <_printf_float+0xb6>
   23594:	2301      	movs	r3, #1
   23596:	465a      	mov	r2, fp
   23598:	4631      	mov	r1, r6
   2359a:	4628      	mov	r0, r5
   2359c:	47b8      	blx	r7
   2359e:	3001      	adds	r0, #1
   235a0:	f43f ae4b 	beq.w	2323a <_printf_float+0xb6>
   235a4:	f108 0801 	add.w	r8, r8, #1
   235a8:	45d0      	cmp	r8, sl
   235aa:	dbf3      	blt.n	23594 <_printf_float+0x410>
   235ac:	464b      	mov	r3, r9
   235ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
   235b2:	e6e0      	b.n	23376 <_printf_float+0x1f2>
   235b4:	f04f 0800 	mov.w	r8, #0
   235b8:	f104 0b1a 	add.w	fp, r4, #26
   235bc:	e7f4      	b.n	235a8 <_printf_float+0x424>
   235be:	2301      	movs	r3, #1
   235c0:	4642      	mov	r2, r8
   235c2:	e7e1      	b.n	23588 <_printf_float+0x404>
   235c4:	2301      	movs	r3, #1
   235c6:	464a      	mov	r2, r9
   235c8:	4631      	mov	r1, r6
   235ca:	4628      	mov	r0, r5
   235cc:	47b8      	blx	r7
   235ce:	3001      	adds	r0, #1
   235d0:	f43f ae33 	beq.w	2323a <_printf_float+0xb6>
   235d4:	f108 0801 	add.w	r8, r8, #1
   235d8:	68e3      	ldr	r3, [r4, #12]
   235da:	990f      	ldr	r1, [sp, #60]	; 0x3c
   235dc:	1a5b      	subs	r3, r3, r1
   235de:	4543      	cmp	r3, r8
   235e0:	dcf0      	bgt.n	235c4 <_printf_float+0x440>
   235e2:	e6fd      	b.n	233e0 <_printf_float+0x25c>
   235e4:	f04f 0800 	mov.w	r8, #0
   235e8:	f104 0919 	add.w	r9, r4, #25
   235ec:	e7f4      	b.n	235d8 <_printf_float+0x454>
   235ee:	bf00      	nop

000235f0 <_printf_i>:
   235f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   235f4:	7e0f      	ldrb	r7, [r1, #24]
   235f6:	4691      	mov	r9, r2
   235f8:	4680      	mov	r8, r0
   235fa:	460c      	mov	r4, r1
   235fc:	2f78      	cmp	r7, #120	; 0x78
   235fe:	469a      	mov	sl, r3
   23600:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23602:	f101 0243 	add.w	r2, r1, #67	; 0x43
   23606:	d807      	bhi.n	23618 <_printf_i+0x28>
   23608:	2f62      	cmp	r7, #98	; 0x62
   2360a:	d80a      	bhi.n	23622 <_printf_i+0x32>
   2360c:	2f00      	cmp	r7, #0
   2360e:	f000 80e0 	beq.w	237d2 <_printf_i+0x1e2>
   23612:	2f58      	cmp	r7, #88	; 0x58
   23614:	f000 80bb 	beq.w	2378e <_printf_i+0x19e>
   23618:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2361c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   23620:	e03a      	b.n	23698 <_printf_i+0xa8>
   23622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   23626:	2b15      	cmp	r3, #21
   23628:	d8f6      	bhi.n	23618 <_printf_i+0x28>
   2362a:	a101      	add	r1, pc, #4	; (adr r1, 23630 <_printf_i+0x40>)
   2362c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   23630:	00023689 	.word	0x00023689
   23634:	0002369d 	.word	0x0002369d
   23638:	00023619 	.word	0x00023619
   2363c:	00023619 	.word	0x00023619
   23640:	00023619 	.word	0x00023619
   23644:	00023619 	.word	0x00023619
   23648:	0002369d 	.word	0x0002369d
   2364c:	00023619 	.word	0x00023619
   23650:	00023619 	.word	0x00023619
   23654:	00023619 	.word	0x00023619
   23658:	00023619 	.word	0x00023619
   2365c:	000237b9 	.word	0x000237b9
   23660:	0002372d 	.word	0x0002372d
   23664:	0002376f 	.word	0x0002376f
   23668:	00023619 	.word	0x00023619
   2366c:	00023619 	.word	0x00023619
   23670:	000237db 	.word	0x000237db
   23674:	00023619 	.word	0x00023619
   23678:	0002372d 	.word	0x0002372d
   2367c:	00023619 	.word	0x00023619
   23680:	00023619 	.word	0x00023619
   23684:	00023777 	.word	0x00023777
   23688:	682b      	ldr	r3, [r5, #0]
   2368a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2368e:	1d1a      	adds	r2, r3, #4
   23690:	681b      	ldr	r3, [r3, #0]
   23692:	602a      	str	r2, [r5, #0]
   23694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   23698:	2301      	movs	r3, #1
   2369a:	e0ab      	b.n	237f4 <_printf_i+0x204>
   2369c:	6823      	ldr	r3, [r4, #0]
   2369e:	6829      	ldr	r1, [r5, #0]
   236a0:	061f      	lsls	r7, r3, #24
   236a2:	f101 0004 	add.w	r0, r1, #4
   236a6:	6028      	str	r0, [r5, #0]
   236a8:	d501      	bpl.n	236ae <_printf_i+0xbe>
   236aa:	680d      	ldr	r5, [r1, #0]
   236ac:	e003      	b.n	236b6 <_printf_i+0xc6>
   236ae:	065e      	lsls	r6, r3, #25
   236b0:	d5fb      	bpl.n	236aa <_printf_i+0xba>
   236b2:	f9b1 5000 	ldrsh.w	r5, [r1]
   236b6:	2d00      	cmp	r5, #0
   236b8:	6861      	ldr	r1, [r4, #4]
   236ba:	da7a      	bge.n	237b2 <_printf_i+0x1c2>
   236bc:	202d      	movs	r0, #45	; 0x2d
   236be:	2900      	cmp	r1, #0
   236c0:	60a1      	str	r1, [r4, #8]
   236c2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   236c6:	da2d      	bge.n	23724 <_printf_i+0x134>
   236c8:	426d      	negs	r5, r5
   236ca:	485e      	ldr	r0, [pc, #376]	; (23844 <_printf_i+0x254>)
   236cc:	230a      	movs	r3, #10
   236ce:	4616      	mov	r6, r2
   236d0:	fbb5 f1f3 	udiv	r1, r5, r3
   236d4:	fb03 5711 	mls	r7, r3, r1, r5
   236d8:	5dc7      	ldrb	r7, [r0, r7]
   236da:	f806 7d01 	strb.w	r7, [r6, #-1]!
   236de:	462f      	mov	r7, r5
   236e0:	460d      	mov	r5, r1
   236e2:	42bb      	cmp	r3, r7
   236e4:	d9f4      	bls.n	236d0 <_printf_i+0xe0>
   236e6:	2b08      	cmp	r3, #8
   236e8:	d10b      	bne.n	23702 <_printf_i+0x112>
   236ea:	6823      	ldr	r3, [r4, #0]
   236ec:	07df      	lsls	r7, r3, #31
   236ee:	d508      	bpl.n	23702 <_printf_i+0x112>
   236f0:	6923      	ldr	r3, [r4, #16]
   236f2:	6861      	ldr	r1, [r4, #4]
   236f4:	4299      	cmp	r1, r3
   236f6:	bfde      	ittt	le
   236f8:	2330      	movle	r3, #48	; 0x30
   236fa:	f806 3c01 	strble.w	r3, [r6, #-1]
   236fe:	f106 36ff 	addle.w	r6, r6, #4294967295
   23702:	1b92      	subs	r2, r2, r6
   23704:	6122      	str	r2, [r4, #16]
   23706:	464b      	mov	r3, r9
   23708:	aa03      	add	r2, sp, #12
   2370a:	4621      	mov	r1, r4
   2370c:	4640      	mov	r0, r8
   2370e:	f8cd a000 	str.w	sl, [sp]
   23712:	f006 fa36 	bl	29b82 <_printf_common>
   23716:	3001      	adds	r0, #1
   23718:	d171      	bne.n	237fe <_printf_i+0x20e>
   2371a:	f04f 30ff 	mov.w	r0, #4294967295
   2371e:	b004      	add	sp, #16
   23720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23724:	f023 0304 	bic.w	r3, r3, #4
   23728:	6023      	str	r3, [r4, #0]
   2372a:	e7cd      	b.n	236c8 <_printf_i+0xd8>
   2372c:	682b      	ldr	r3, [r5, #0]
   2372e:	6820      	ldr	r0, [r4, #0]
   23730:	1d19      	adds	r1, r3, #4
   23732:	6029      	str	r1, [r5, #0]
   23734:	0605      	lsls	r5, r0, #24
   23736:	d501      	bpl.n	2373c <_printf_i+0x14c>
   23738:	681d      	ldr	r5, [r3, #0]
   2373a:	e002      	b.n	23742 <_printf_i+0x152>
   2373c:	0641      	lsls	r1, r0, #25
   2373e:	d5fb      	bpl.n	23738 <_printf_i+0x148>
   23740:	881d      	ldrh	r5, [r3, #0]
   23742:	2f6f      	cmp	r7, #111	; 0x6f
   23744:	483f      	ldr	r0, [pc, #252]	; (23844 <_printf_i+0x254>)
   23746:	bf14      	ite	ne
   23748:	230a      	movne	r3, #10
   2374a:	2308      	moveq	r3, #8
   2374c:	2100      	movs	r1, #0
   2374e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   23752:	6866      	ldr	r6, [r4, #4]
   23754:	2e00      	cmp	r6, #0
   23756:	60a6      	str	r6, [r4, #8]
   23758:	dbb9      	blt.n	236ce <_printf_i+0xde>
   2375a:	6821      	ldr	r1, [r4, #0]
   2375c:	f021 0104 	bic.w	r1, r1, #4
   23760:	6021      	str	r1, [r4, #0]
   23762:	2d00      	cmp	r5, #0
   23764:	d1b3      	bne.n	236ce <_printf_i+0xde>
   23766:	2e00      	cmp	r6, #0
   23768:	d1b1      	bne.n	236ce <_printf_i+0xde>
   2376a:	4616      	mov	r6, r2
   2376c:	e7bb      	b.n	236e6 <_printf_i+0xf6>
   2376e:	6823      	ldr	r3, [r4, #0]
   23770:	f043 0320 	orr.w	r3, r3, #32
   23774:	6023      	str	r3, [r4, #0]
   23776:	2778      	movs	r7, #120	; 0x78
   23778:	4833      	ldr	r0, [pc, #204]	; (23848 <_printf_i+0x258>)
   2377a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2377e:	6829      	ldr	r1, [r5, #0]
   23780:	6823      	ldr	r3, [r4, #0]
   23782:	1d0e      	adds	r6, r1, #4
   23784:	602e      	str	r6, [r5, #0]
   23786:	061e      	lsls	r6, r3, #24
   23788:	d503      	bpl.n	23792 <_printf_i+0x1a2>
   2378a:	680d      	ldr	r5, [r1, #0]
   2378c:	e004      	b.n	23798 <_printf_i+0x1a8>
   2378e:	482d      	ldr	r0, [pc, #180]	; (23844 <_printf_i+0x254>)
   23790:	e7f3      	b.n	2377a <_printf_i+0x18a>
   23792:	065d      	lsls	r5, r3, #25
   23794:	d5f9      	bpl.n	2378a <_printf_i+0x19a>
   23796:	880d      	ldrh	r5, [r1, #0]
   23798:	07d9      	lsls	r1, r3, #31
   2379a:	bf44      	itt	mi
   2379c:	f043 0320 	orrmi.w	r3, r3, #32
   237a0:	6023      	strmi	r3, [r4, #0]
   237a2:	b10d      	cbz	r5, 237a8 <_printf_i+0x1b8>
   237a4:	2310      	movs	r3, #16
   237a6:	e7d1      	b.n	2374c <_printf_i+0x15c>
   237a8:	6823      	ldr	r3, [r4, #0]
   237aa:	f023 0320 	bic.w	r3, r3, #32
   237ae:	6023      	str	r3, [r4, #0]
   237b0:	e7f8      	b.n	237a4 <_printf_i+0x1b4>
   237b2:	4824      	ldr	r0, [pc, #144]	; (23844 <_printf_i+0x254>)
   237b4:	230a      	movs	r3, #10
   237b6:	e7cc      	b.n	23752 <_printf_i+0x162>
   237b8:	682b      	ldr	r3, [r5, #0]
   237ba:	6826      	ldr	r6, [r4, #0]
   237bc:	1d18      	adds	r0, r3, #4
   237be:	6961      	ldr	r1, [r4, #20]
   237c0:	6028      	str	r0, [r5, #0]
   237c2:	0635      	lsls	r5, r6, #24
   237c4:	681b      	ldr	r3, [r3, #0]
   237c6:	d501      	bpl.n	237cc <_printf_i+0x1dc>
   237c8:	6019      	str	r1, [r3, #0]
   237ca:	e002      	b.n	237d2 <_printf_i+0x1e2>
   237cc:	0670      	lsls	r0, r6, #25
   237ce:	d5fb      	bpl.n	237c8 <_printf_i+0x1d8>
   237d0:	8019      	strh	r1, [r3, #0]
   237d2:	2300      	movs	r3, #0
   237d4:	4616      	mov	r6, r2
   237d6:	6123      	str	r3, [r4, #16]
   237d8:	e795      	b.n	23706 <_printf_i+0x116>
   237da:	682b      	ldr	r3, [r5, #0]
   237dc:	2100      	movs	r1, #0
   237de:	1d1a      	adds	r2, r3, #4
   237e0:	602a      	str	r2, [r5, #0]
   237e2:	681e      	ldr	r6, [r3, #0]
   237e4:	6862      	ldr	r2, [r4, #4]
   237e6:	4630      	mov	r0, r6
   237e8:	f006 fb83 	bl	29ef2 <memchr>
   237ec:	b108      	cbz	r0, 237f2 <_printf_i+0x202>
   237ee:	1b80      	subs	r0, r0, r6
   237f0:	6060      	str	r0, [r4, #4]
   237f2:	6863      	ldr	r3, [r4, #4]
   237f4:	6123      	str	r3, [r4, #16]
   237f6:	2300      	movs	r3, #0
   237f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   237fc:	e783      	b.n	23706 <_printf_i+0x116>
   237fe:	6923      	ldr	r3, [r4, #16]
   23800:	4632      	mov	r2, r6
   23802:	4649      	mov	r1, r9
   23804:	4640      	mov	r0, r8
   23806:	47d0      	blx	sl
   23808:	3001      	adds	r0, #1
   2380a:	d086      	beq.n	2371a <_printf_i+0x12a>
   2380c:	6823      	ldr	r3, [r4, #0]
   2380e:	079b      	lsls	r3, r3, #30
   23810:	d414      	bmi.n	2383c <_printf_i+0x24c>
   23812:	68e0      	ldr	r0, [r4, #12]
   23814:	9b03      	ldr	r3, [sp, #12]
   23816:	4298      	cmp	r0, r3
   23818:	bfb8      	it	lt
   2381a:	4618      	movlt	r0, r3
   2381c:	e77f      	b.n	2371e <_printf_i+0x12e>
   2381e:	2301      	movs	r3, #1
   23820:	4632      	mov	r2, r6
   23822:	4649      	mov	r1, r9
   23824:	4640      	mov	r0, r8
   23826:	47d0      	blx	sl
   23828:	3001      	adds	r0, #1
   2382a:	f43f af76 	beq.w	2371a <_printf_i+0x12a>
   2382e:	3501      	adds	r5, #1
   23830:	68e3      	ldr	r3, [r4, #12]
   23832:	9903      	ldr	r1, [sp, #12]
   23834:	1a5b      	subs	r3, r3, r1
   23836:	42ab      	cmp	r3, r5
   23838:	dcf1      	bgt.n	2381e <_printf_i+0x22e>
   2383a:	e7ea      	b.n	23812 <_printf_i+0x222>
   2383c:	2500      	movs	r5, #0
   2383e:	f104 0619 	add.w	r6, r4, #25
   23842:	e7f5      	b.n	23830 <_printf_i+0x240>
   23844:	00031340 	.word	0x00031340
   23848:	00031351 	.word	0x00031351

0002384c <iprintf>:
   2384c:	b40f      	push	{r0, r1, r2, r3}
   2384e:	4b0a      	ldr	r3, [pc, #40]	; (23878 <iprintf+0x2c>)
   23850:	b513      	push	{r0, r1, r4, lr}
   23852:	681c      	ldr	r4, [r3, #0]
   23854:	b124      	cbz	r4, 23860 <iprintf+0x14>
   23856:	69a3      	ldr	r3, [r4, #24]
   23858:	b913      	cbnz	r3, 23860 <iprintf+0x14>
   2385a:	4620      	mov	r0, r4
   2385c:	f000 f8b2 	bl	239c4 <__sinit>
   23860:	ab05      	add	r3, sp, #20
   23862:	9a04      	ldr	r2, [sp, #16]
   23864:	68a1      	ldr	r1, [r4, #8]
   23866:	4620      	mov	r0, r4
   23868:	9301      	str	r3, [sp, #4]
   2386a:	f000 fc69 	bl	24140 <_vfiprintf_r>
   2386e:	b002      	add	sp, #8
   23870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23874:	b004      	add	sp, #16
   23876:	4770      	bx	lr
   23878:	20008744 	.word	0x20008744

0002387c <_sbrk_r>:
   2387c:	b538      	push	{r3, r4, r5, lr}
   2387e:	2300      	movs	r3, #0
   23880:	4d05      	ldr	r5, [pc, #20]	; (23898 <_sbrk_r+0x1c>)
   23882:	4604      	mov	r4, r0
   23884:	4608      	mov	r0, r1
   23886:	602b      	str	r3, [r5, #0]
   23888:	f7ed fc3a 	bl	11100 <_sbrk>
   2388c:	1c43      	adds	r3, r0, #1
   2388e:	d102      	bne.n	23896 <_sbrk_r+0x1a>
   23890:	682b      	ldr	r3, [r5, #0]
   23892:	b103      	cbz	r3, 23896 <_sbrk_r+0x1a>
   23894:	6023      	str	r3, [r4, #0]
   23896:	bd38      	pop	{r3, r4, r5, pc}
   23898:	20021568 	.word	0x20021568

0002389c <strtok>:
   2389c:	4b16      	ldr	r3, [pc, #88]	; (238f8 <strtok+0x5c>)
   2389e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   238a2:	681f      	ldr	r7, [r3, #0]
   238a4:	4605      	mov	r5, r0
   238a6:	460e      	mov	r6, r1
   238a8:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   238aa:	b9ec      	cbnz	r4, 238e8 <strtok+0x4c>
   238ac:	2050      	movs	r0, #80	; 0x50
   238ae:	f7ff fbbd 	bl	2302c <malloc>
   238b2:	4602      	mov	r2, r0
   238b4:	65b8      	str	r0, [r7, #88]	; 0x58
   238b6:	b920      	cbnz	r0, 238c2 <strtok+0x26>
   238b8:	4b10      	ldr	r3, [pc, #64]	; (238fc <strtok+0x60>)
   238ba:	2157      	movs	r1, #87	; 0x57
   238bc:	4810      	ldr	r0, [pc, #64]	; (23900 <strtok+0x64>)
   238be:	f000 f821 	bl	23904 <__assert_func>
   238c2:	e9c0 4400 	strd	r4, r4, [r0]
   238c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   238ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
   238ce:	6184      	str	r4, [r0, #24]
   238d0:	7704      	strb	r4, [r0, #28]
   238d2:	6244      	str	r4, [r0, #36]	; 0x24
   238d4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   238d8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   238dc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   238e0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   238e4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   238e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
   238ea:	4631      	mov	r1, r6
   238ec:	4628      	mov	r0, r5
   238ee:	2301      	movs	r3, #1
   238f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   238f4:	f006 ba13 	b.w	29d1e <__strtok_r>
   238f8:	20008744 	.word	0x20008744
   238fc:	00031362 	.word	0x00031362
   23900:	00031379 	.word	0x00031379

00023904 <__assert_func>:
   23904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   23906:	4614      	mov	r4, r2
   23908:	461a      	mov	r2, r3
   2390a:	4b09      	ldr	r3, [pc, #36]	; (23930 <__assert_func+0x2c>)
   2390c:	4605      	mov	r5, r0
   2390e:	681b      	ldr	r3, [r3, #0]
   23910:	68d8      	ldr	r0, [r3, #12]
   23912:	b954      	cbnz	r4, 2392a <__assert_func+0x26>
   23914:	4b07      	ldr	r3, [pc, #28]	; (23934 <__assert_func+0x30>)
   23916:	461c      	mov	r4, r3
   23918:	9100      	str	r1, [sp, #0]
   2391a:	4907      	ldr	r1, [pc, #28]	; (23938 <__assert_func+0x34>)
   2391c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   23920:	462b      	mov	r3, r5
   23922:	f000 f8cd 	bl	23ac0 <fiprintf>
   23926:	f006 fbc6 	bl	2a0b6 <abort>
   2392a:	4b04      	ldr	r3, [pc, #16]	; (2393c <__assert_func+0x38>)
   2392c:	e7f4      	b.n	23918 <__assert_func+0x14>
   2392e:	bf00      	nop
   23930:	20008744 	.word	0x20008744
   23934:	0002f577 	.word	0x0002f577
   23938:	000313fc 	.word	0x000313fc
   2393c:	000313ef 	.word	0x000313ef

00023940 <std>:
   23940:	2300      	movs	r3, #0
   23942:	b510      	push	{r4, lr}
   23944:	4604      	mov	r4, r0
   23946:	6083      	str	r3, [r0, #8]
   23948:	8181      	strh	r1, [r0, #12]
   2394a:	4619      	mov	r1, r3
   2394c:	6643      	str	r3, [r0, #100]	; 0x64
   2394e:	81c2      	strh	r2, [r0, #14]
   23950:	2208      	movs	r2, #8
   23952:	6183      	str	r3, [r0, #24]
   23954:	e9c0 3300 	strd	r3, r3, [r0]
   23958:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2395c:	305c      	adds	r0, #92	; 0x5c
   2395e:	f006 f85a 	bl	29a16 <memset>
   23962:	4b05      	ldr	r3, [pc, #20]	; (23978 <std+0x38>)
   23964:	6224      	str	r4, [r4, #32]
   23966:	6263      	str	r3, [r4, #36]	; 0x24
   23968:	4b04      	ldr	r3, [pc, #16]	; (2397c <std+0x3c>)
   2396a:	62a3      	str	r3, [r4, #40]	; 0x28
   2396c:	4b04      	ldr	r3, [pc, #16]	; (23980 <std+0x40>)
   2396e:	62e3      	str	r3, [r4, #44]	; 0x2c
   23970:	4b04      	ldr	r3, [pc, #16]	; (23984 <std+0x44>)
   23972:	6323      	str	r3, [r4, #48]	; 0x30
   23974:	bd10      	pop	{r4, pc}
   23976:	bf00      	nop
   23978:	0002a031 	.word	0x0002a031
   2397c:	0002a053 	.word	0x0002a053
   23980:	0002a08b 	.word	0x0002a08b
   23984:	0002a0af 	.word	0x0002a0af

00023988 <_cleanup_r>:
   23988:	4901      	ldr	r1, [pc, #4]	; (23990 <_cleanup_r+0x8>)
   2398a:	f006 ba93 	b.w	29eb4 <_fwalk_reent>
   2398e:	bf00      	nop
   23990:	00024559 	.word	0x00024559

00023994 <__sfp_lock_acquire>:
   23994:	4801      	ldr	r0, [pc, #4]	; (2399c <__sfp_lock_acquire+0x8>)
   23996:	f7ed bbf7 	b.w	11188 <__retarget_lock_acquire_recursive>
   2399a:	bf00      	nop
   2399c:	20008a94 	.word	0x20008a94

000239a0 <__sfp_lock_release>:
   239a0:	4801      	ldr	r0, [pc, #4]	; (239a8 <__sfp_lock_release+0x8>)
   239a2:	f7ed bc0d 	b.w	111c0 <__retarget_lock_release_recursive>
   239a6:	bf00      	nop
   239a8:	20008a94 	.word	0x20008a94

000239ac <__sinit_lock_acquire>:
   239ac:	4801      	ldr	r0, [pc, #4]	; (239b4 <__sinit_lock_acquire+0x8>)
   239ae:	f7ed bbeb 	b.w	11188 <__retarget_lock_acquire_recursive>
   239b2:	bf00      	nop
   239b4:	20008aa8 	.word	0x20008aa8

000239b8 <__sinit_lock_release>:
   239b8:	4801      	ldr	r0, [pc, #4]	; (239c0 <__sinit_lock_release+0x8>)
   239ba:	f7ed bc01 	b.w	111c0 <__retarget_lock_release_recursive>
   239be:	bf00      	nop
   239c0:	20008aa8 	.word	0x20008aa8

000239c4 <__sinit>:
   239c4:	b510      	push	{r4, lr}
   239c6:	4604      	mov	r4, r0
   239c8:	f7ff fff0 	bl	239ac <__sinit_lock_acquire>
   239cc:	69a3      	ldr	r3, [r4, #24]
   239ce:	b11b      	cbz	r3, 239d8 <__sinit+0x14>
   239d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   239d4:	f7ff bff0 	b.w	239b8 <__sinit_lock_release>
   239d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   239dc:	6523      	str	r3, [r4, #80]	; 0x50
   239de:	4620      	mov	r0, r4
   239e0:	4b12      	ldr	r3, [pc, #72]	; (23a2c <__sinit+0x68>)
   239e2:	4a13      	ldr	r2, [pc, #76]	; (23a30 <__sinit+0x6c>)
   239e4:	681b      	ldr	r3, [r3, #0]
   239e6:	62a2      	str	r2, [r4, #40]	; 0x28
   239e8:	42a3      	cmp	r3, r4
   239ea:	bf04      	itt	eq
   239ec:	2301      	moveq	r3, #1
   239ee:	61a3      	streq	r3, [r4, #24]
   239f0:	f000 f820 	bl	23a34 <__sfp>
   239f4:	6060      	str	r0, [r4, #4]
   239f6:	4620      	mov	r0, r4
   239f8:	f000 f81c 	bl	23a34 <__sfp>
   239fc:	60a0      	str	r0, [r4, #8]
   239fe:	4620      	mov	r0, r4
   23a00:	f000 f818 	bl	23a34 <__sfp>
   23a04:	2200      	movs	r2, #0
   23a06:	2104      	movs	r1, #4
   23a08:	60e0      	str	r0, [r4, #12]
   23a0a:	6860      	ldr	r0, [r4, #4]
   23a0c:	f7ff ff98 	bl	23940 <std>
   23a10:	2201      	movs	r2, #1
   23a12:	2109      	movs	r1, #9
   23a14:	68a0      	ldr	r0, [r4, #8]
   23a16:	f7ff ff93 	bl	23940 <std>
   23a1a:	2202      	movs	r2, #2
   23a1c:	2112      	movs	r1, #18
   23a1e:	68e0      	ldr	r0, [r4, #12]
   23a20:	f7ff ff8e 	bl	23940 <std>
   23a24:	2301      	movs	r3, #1
   23a26:	61a3      	str	r3, [r4, #24]
   23a28:	e7d2      	b.n	239d0 <__sinit+0xc>
   23a2a:	bf00      	nop
   23a2c:	0002b844 	.word	0x0002b844
   23a30:	00023989 	.word	0x00023989

00023a34 <__sfp>:
   23a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a36:	4607      	mov	r7, r0
   23a38:	f7ff ffac 	bl	23994 <__sfp_lock_acquire>
   23a3c:	4b1e      	ldr	r3, [pc, #120]	; (23ab8 <__sfp+0x84>)
   23a3e:	681e      	ldr	r6, [r3, #0]
   23a40:	69b3      	ldr	r3, [r6, #24]
   23a42:	b913      	cbnz	r3, 23a4a <__sfp+0x16>
   23a44:	4630      	mov	r0, r6
   23a46:	f7ff ffbd 	bl	239c4 <__sinit>
   23a4a:	3648      	adds	r6, #72	; 0x48
   23a4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   23a50:	3b01      	subs	r3, #1
   23a52:	d503      	bpl.n	23a5c <__sfp+0x28>
   23a54:	6833      	ldr	r3, [r6, #0]
   23a56:	b30b      	cbz	r3, 23a9c <__sfp+0x68>
   23a58:	6836      	ldr	r6, [r6, #0]
   23a5a:	e7f7      	b.n	23a4c <__sfp+0x18>
   23a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   23a60:	b9d5      	cbnz	r5, 23a98 <__sfp+0x64>
   23a62:	4b16      	ldr	r3, [pc, #88]	; (23abc <__sfp+0x88>)
   23a64:	f104 0058 	add.w	r0, r4, #88	; 0x58
   23a68:	6665      	str	r5, [r4, #100]	; 0x64
   23a6a:	60e3      	str	r3, [r4, #12]
   23a6c:	f7ed fb5c 	bl	11128 <__retarget_lock_init_recursive>
   23a70:	f7ff ff96 	bl	239a0 <__sfp_lock_release>
   23a74:	2208      	movs	r2, #8
   23a76:	4629      	mov	r1, r5
   23a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   23a7c:	6025      	str	r5, [r4, #0]
   23a7e:	61a5      	str	r5, [r4, #24]
   23a80:	e9c4 5501 	strd	r5, r5, [r4, #4]
   23a84:	e9c4 5504 	strd	r5, r5, [r4, #16]
   23a88:	f005 ffc5 	bl	29a16 <memset>
   23a8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   23a90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   23a94:	4620      	mov	r0, r4
   23a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23a98:	3468      	adds	r4, #104	; 0x68
   23a9a:	e7d9      	b.n	23a50 <__sfp+0x1c>
   23a9c:	2104      	movs	r1, #4
   23a9e:	4638      	mov	r0, r7
   23aa0:	f006 f9f2 	bl	29e88 <__sfmoreglue>
   23aa4:	4604      	mov	r4, r0
   23aa6:	6030      	str	r0, [r6, #0]
   23aa8:	2800      	cmp	r0, #0
   23aaa:	d1d5      	bne.n	23a58 <__sfp+0x24>
   23aac:	f7ff ff78 	bl	239a0 <__sfp_lock_release>
   23ab0:	230c      	movs	r3, #12
   23ab2:	603b      	str	r3, [r7, #0]
   23ab4:	e7ee      	b.n	23a94 <__sfp+0x60>
   23ab6:	bf00      	nop
   23ab8:	0002b844 	.word	0x0002b844
   23abc:	ffff0001 	.word	0xffff0001

00023ac0 <fiprintf>:
   23ac0:	b40e      	push	{r1, r2, r3}
   23ac2:	b503      	push	{r0, r1, lr}
   23ac4:	ab03      	add	r3, sp, #12
   23ac6:	4601      	mov	r1, r0
   23ac8:	4805      	ldr	r0, [pc, #20]	; (23ae0 <fiprintf+0x20>)
   23aca:	f853 2b04 	ldr.w	r2, [r3], #4
   23ace:	6800      	ldr	r0, [r0, #0]
   23ad0:	9301      	str	r3, [sp, #4]
   23ad2:	f000 fb35 	bl	24140 <_vfiprintf_r>
   23ad6:	b002      	add	sp, #8
   23ad8:	f85d eb04 	ldr.w	lr, [sp], #4
   23adc:	b003      	add	sp, #12
   23ade:	4770      	bx	lr
   23ae0:	20008744 	.word	0x20008744

00023ae4 <_localeconv_r>:
   23ae4:	4800      	ldr	r0, [pc, #0]	; (23ae8 <_localeconv_r+0x4>)
   23ae6:	4770      	bx	lr
   23ae8:	20008898 	.word	0x20008898

00023aec <__malloc_lock>:
   23aec:	4801      	ldr	r0, [pc, #4]	; (23af4 <__malloc_lock+0x8>)
   23aee:	f7ed bb4b 	b.w	11188 <__retarget_lock_acquire_recursive>
   23af2:	bf00      	nop
   23af4:	20008a80 	.word	0x20008a80

00023af8 <__malloc_unlock>:
   23af8:	4801      	ldr	r0, [pc, #4]	; (23b00 <__malloc_unlock+0x8>)
   23afa:	f7ed bb61 	b.w	111c0 <__retarget_lock_release_recursive>
   23afe:	bf00      	nop
   23b00:	20008a80 	.word	0x20008a80

00023b04 <_Balloc>:
   23b04:	b570      	push	{r4, r5, r6, lr}
   23b06:	6a46      	ldr	r6, [r0, #36]	; 0x24
   23b08:	4604      	mov	r4, r0
   23b0a:	460d      	mov	r5, r1
   23b0c:	b976      	cbnz	r6, 23b2c <_Balloc+0x28>
   23b0e:	2010      	movs	r0, #16
   23b10:	f7ff fa8c 	bl	2302c <malloc>
   23b14:	4602      	mov	r2, r0
   23b16:	6260      	str	r0, [r4, #36]	; 0x24
   23b18:	b920      	cbnz	r0, 23b24 <_Balloc+0x20>
   23b1a:	4b18      	ldr	r3, [pc, #96]	; (23b7c <_Balloc+0x78>)
   23b1c:	2166      	movs	r1, #102	; 0x66
   23b1e:	4818      	ldr	r0, [pc, #96]	; (23b80 <_Balloc+0x7c>)
   23b20:	f7ff fef0 	bl	23904 <__assert_func>
   23b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
   23b28:	6006      	str	r6, [r0, #0]
   23b2a:	60c6      	str	r6, [r0, #12]
   23b2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   23b2e:	68f3      	ldr	r3, [r6, #12]
   23b30:	b183      	cbz	r3, 23b54 <_Balloc+0x50>
   23b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23b34:	68db      	ldr	r3, [r3, #12]
   23b36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   23b3a:	b9b8      	cbnz	r0, 23b6c <_Balloc+0x68>
   23b3c:	2101      	movs	r1, #1
   23b3e:	4620      	mov	r0, r4
   23b40:	fa01 f605 	lsl.w	r6, r1, r5
   23b44:	1d72      	adds	r2, r6, #5
   23b46:	0092      	lsls	r2, r2, #2
   23b48:	f005 ff6d 	bl	29a26 <_calloc_r>
   23b4c:	b160      	cbz	r0, 23b68 <_Balloc+0x64>
   23b4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   23b52:	e00e      	b.n	23b72 <_Balloc+0x6e>
   23b54:	2221      	movs	r2, #33	; 0x21
   23b56:	2104      	movs	r1, #4
   23b58:	4620      	mov	r0, r4
   23b5a:	f005 ff64 	bl	29a26 <_calloc_r>
   23b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23b60:	60f0      	str	r0, [r6, #12]
   23b62:	68db      	ldr	r3, [r3, #12]
   23b64:	2b00      	cmp	r3, #0
   23b66:	d1e4      	bne.n	23b32 <_Balloc+0x2e>
   23b68:	2000      	movs	r0, #0
   23b6a:	bd70      	pop	{r4, r5, r6, pc}
   23b6c:	6802      	ldr	r2, [r0, #0]
   23b6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   23b72:	2300      	movs	r3, #0
   23b74:	e9c0 3303 	strd	r3, r3, [r0, #12]
   23b78:	e7f7      	b.n	23b6a <_Balloc+0x66>
   23b7a:	bf00      	nop
   23b7c:	00031362 	.word	0x00031362
   23b80:	000314bd 	.word	0x000314bd

00023b84 <_Bfree>:
   23b84:	b570      	push	{r4, r5, r6, lr}
   23b86:	6a46      	ldr	r6, [r0, #36]	; 0x24
   23b88:	4605      	mov	r5, r0
   23b8a:	460c      	mov	r4, r1
   23b8c:	b976      	cbnz	r6, 23bac <_Bfree+0x28>
   23b8e:	2010      	movs	r0, #16
   23b90:	f7ff fa4c 	bl	2302c <malloc>
   23b94:	4602      	mov	r2, r0
   23b96:	6268      	str	r0, [r5, #36]	; 0x24
   23b98:	b920      	cbnz	r0, 23ba4 <_Bfree+0x20>
   23b9a:	4b09      	ldr	r3, [pc, #36]	; (23bc0 <_Bfree+0x3c>)
   23b9c:	218a      	movs	r1, #138	; 0x8a
   23b9e:	4809      	ldr	r0, [pc, #36]	; (23bc4 <_Bfree+0x40>)
   23ba0:	f7ff feb0 	bl	23904 <__assert_func>
   23ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   23ba8:	6006      	str	r6, [r0, #0]
   23baa:	60c6      	str	r6, [r0, #12]
   23bac:	b13c      	cbz	r4, 23bbe <_Bfree+0x3a>
   23bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23bb0:	6862      	ldr	r2, [r4, #4]
   23bb2:	68db      	ldr	r3, [r3, #12]
   23bb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   23bb8:	6021      	str	r1, [r4, #0]
   23bba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   23bbe:	bd70      	pop	{r4, r5, r6, pc}
   23bc0:	00031362 	.word	0x00031362
   23bc4:	000314bd 	.word	0x000314bd

00023bc8 <__multadd>:
   23bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23bcc:	f101 0c14 	add.w	ip, r1, #20
   23bd0:	4607      	mov	r7, r0
   23bd2:	460c      	mov	r4, r1
   23bd4:	461e      	mov	r6, r3
   23bd6:	690d      	ldr	r5, [r1, #16]
   23bd8:	2000      	movs	r0, #0
   23bda:	f8dc 3000 	ldr.w	r3, [ip]
   23bde:	3001      	adds	r0, #1
   23be0:	b299      	uxth	r1, r3
   23be2:	4285      	cmp	r5, r0
   23be4:	fb02 6101 	mla	r1, r2, r1, r6
   23be8:	ea4f 4613 	mov.w	r6, r3, lsr #16
   23bec:	ea4f 4311 	mov.w	r3, r1, lsr #16
   23bf0:	b289      	uxth	r1, r1
   23bf2:	fb02 3306 	mla	r3, r2, r6, r3
   23bf6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   23bfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
   23bfe:	f84c 1b04 	str.w	r1, [ip], #4
   23c02:	dcea      	bgt.n	23bda <__multadd+0x12>
   23c04:	b30e      	cbz	r6, 23c4a <__multadd+0x82>
   23c06:	68a3      	ldr	r3, [r4, #8]
   23c08:	42ab      	cmp	r3, r5
   23c0a:	dc19      	bgt.n	23c40 <__multadd+0x78>
   23c0c:	6861      	ldr	r1, [r4, #4]
   23c0e:	4638      	mov	r0, r7
   23c10:	3101      	adds	r1, #1
   23c12:	f7ff ff77 	bl	23b04 <_Balloc>
   23c16:	4680      	mov	r8, r0
   23c18:	b928      	cbnz	r0, 23c26 <__multadd+0x5e>
   23c1a:	4602      	mov	r2, r0
   23c1c:	4b0c      	ldr	r3, [pc, #48]	; (23c50 <__multadd+0x88>)
   23c1e:	21b5      	movs	r1, #181	; 0xb5
   23c20:	480c      	ldr	r0, [pc, #48]	; (23c54 <__multadd+0x8c>)
   23c22:	f7ff fe6f 	bl	23904 <__assert_func>
   23c26:	6922      	ldr	r2, [r4, #16]
   23c28:	f104 010c 	add.w	r1, r4, #12
   23c2c:	300c      	adds	r0, #12
   23c2e:	3202      	adds	r2, #2
   23c30:	0092      	lsls	r2, r2, #2
   23c32:	f005 feb6 	bl	299a2 <memcpy>
   23c36:	4621      	mov	r1, r4
   23c38:	4644      	mov	r4, r8
   23c3a:	4638      	mov	r0, r7
   23c3c:	f7ff ffa2 	bl	23b84 <_Bfree>
   23c40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   23c44:	3501      	adds	r5, #1
   23c46:	615e      	str	r6, [r3, #20]
   23c48:	6125      	str	r5, [r4, #16]
   23c4a:	4620      	mov	r0, r4
   23c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23c50:	000314ac 	.word	0x000314ac
   23c54:	000314bd 	.word	0x000314bd

00023c58 <__i2b>:
   23c58:	b510      	push	{r4, lr}
   23c5a:	460c      	mov	r4, r1
   23c5c:	2101      	movs	r1, #1
   23c5e:	f7ff ff51 	bl	23b04 <_Balloc>
   23c62:	4602      	mov	r2, r0
   23c64:	b928      	cbnz	r0, 23c72 <__i2b+0x1a>
   23c66:	4b05      	ldr	r3, [pc, #20]	; (23c7c <__i2b+0x24>)
   23c68:	f44f 71a0 	mov.w	r1, #320	; 0x140
   23c6c:	4804      	ldr	r0, [pc, #16]	; (23c80 <__i2b+0x28>)
   23c6e:	f7ff fe49 	bl	23904 <__assert_func>
   23c72:	2301      	movs	r3, #1
   23c74:	6144      	str	r4, [r0, #20]
   23c76:	6103      	str	r3, [r0, #16]
   23c78:	bd10      	pop	{r4, pc}
   23c7a:	bf00      	nop
   23c7c:	000314ac 	.word	0x000314ac
   23c80:	000314bd 	.word	0x000314bd

00023c84 <__multiply>:
   23c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c88:	4614      	mov	r4, r2
   23c8a:	690a      	ldr	r2, [r1, #16]
   23c8c:	460f      	mov	r7, r1
   23c8e:	b085      	sub	sp, #20
   23c90:	6923      	ldr	r3, [r4, #16]
   23c92:	429a      	cmp	r2, r3
   23c94:	bfa2      	ittt	ge
   23c96:	4623      	movge	r3, r4
   23c98:	460c      	movge	r4, r1
   23c9a:	461f      	movge	r7, r3
   23c9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   23ca0:	68a3      	ldr	r3, [r4, #8]
   23ca2:	f8d7 9010 	ldr.w	r9, [r7, #16]
   23ca6:	6861      	ldr	r1, [r4, #4]
   23ca8:	eb0a 0609 	add.w	r6, sl, r9
   23cac:	42b3      	cmp	r3, r6
   23cae:	bfb8      	it	lt
   23cb0:	3101      	addlt	r1, #1
   23cb2:	f7ff ff27 	bl	23b04 <_Balloc>
   23cb6:	b930      	cbnz	r0, 23cc6 <__multiply+0x42>
   23cb8:	4602      	mov	r2, r0
   23cba:	4b45      	ldr	r3, [pc, #276]	; (23dd0 <__multiply+0x14c>)
   23cbc:	f240 115d 	movw	r1, #349	; 0x15d
   23cc0:	4844      	ldr	r0, [pc, #272]	; (23dd4 <__multiply+0x150>)
   23cc2:	f7ff fe1f 	bl	23904 <__assert_func>
   23cc6:	f100 0514 	add.w	r5, r0, #20
   23cca:	2200      	movs	r2, #0
   23ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   23cd0:	462b      	mov	r3, r5
   23cd2:	4543      	cmp	r3, r8
   23cd4:	d321      	bcc.n	23d1a <__multiply+0x96>
   23cd6:	f107 0114 	add.w	r1, r7, #20
   23cda:	f104 0214 	add.w	r2, r4, #20
   23cde:	f104 0715 	add.w	r7, r4, #21
   23ce2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   23ce6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   23cea:	9302      	str	r3, [sp, #8]
   23cec:	1b13      	subs	r3, r2, r4
   23cee:	3b15      	subs	r3, #21
   23cf0:	f023 0303 	bic.w	r3, r3, #3
   23cf4:	3304      	adds	r3, #4
   23cf6:	42ba      	cmp	r2, r7
   23cf8:	bf38      	it	cc
   23cfa:	2304      	movcc	r3, #4
   23cfc:	9301      	str	r3, [sp, #4]
   23cfe:	9b02      	ldr	r3, [sp, #8]
   23d00:	9103      	str	r1, [sp, #12]
   23d02:	428b      	cmp	r3, r1
   23d04:	d80c      	bhi.n	23d20 <__multiply+0x9c>
   23d06:	2e00      	cmp	r6, #0
   23d08:	dd03      	ble.n	23d12 <__multiply+0x8e>
   23d0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   23d0e:	2b00      	cmp	r3, #0
   23d10:	d05b      	beq.n	23dca <__multiply+0x146>
   23d12:	6106      	str	r6, [r0, #16]
   23d14:	b005      	add	sp, #20
   23d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d1a:	f843 2b04 	str.w	r2, [r3], #4
   23d1e:	e7d8      	b.n	23cd2 <__multiply+0x4e>
   23d20:	f8b1 a000 	ldrh.w	sl, [r1]
   23d24:	f1ba 0f00 	cmp.w	sl, #0
   23d28:	d024      	beq.n	23d74 <__multiply+0xf0>
   23d2a:	f104 0e14 	add.w	lr, r4, #20
   23d2e:	46a9      	mov	r9, r5
   23d30:	f04f 0c00 	mov.w	ip, #0
   23d34:	f85e 7b04 	ldr.w	r7, [lr], #4
   23d38:	f8d9 3000 	ldr.w	r3, [r9]
   23d3c:	fa1f fb87 	uxth.w	fp, r7
   23d40:	4572      	cmp	r2, lr
   23d42:	b29b      	uxth	r3, r3
   23d44:	ea4f 4717 	mov.w	r7, r7, lsr #16
   23d48:	fb0a 330b 	mla	r3, sl, fp, r3
   23d4c:	4463      	add	r3, ip
   23d4e:	f8d9 c000 	ldr.w	ip, [r9]
   23d52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   23d56:	fb0a c707 	mla	r7, sl, r7, ip
   23d5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   23d5e:	b29b      	uxth	r3, r3
   23d60:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   23d64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   23d68:	f849 3b04 	str.w	r3, [r9], #4
   23d6c:	d8e2      	bhi.n	23d34 <__multiply+0xb0>
   23d6e:	9b01      	ldr	r3, [sp, #4]
   23d70:	f845 c003 	str.w	ip, [r5, r3]
   23d74:	9b03      	ldr	r3, [sp, #12]
   23d76:	3104      	adds	r1, #4
   23d78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   23d7c:	f1b9 0f00 	cmp.w	r9, #0
   23d80:	d021      	beq.n	23dc6 <__multiply+0x142>
   23d82:	682b      	ldr	r3, [r5, #0]
   23d84:	f104 0c14 	add.w	ip, r4, #20
   23d88:	46ae      	mov	lr, r5
   23d8a:	f04f 0a00 	mov.w	sl, #0
   23d8e:	f8bc b000 	ldrh.w	fp, [ip]
   23d92:	b29b      	uxth	r3, r3
   23d94:	f8be 7002 	ldrh.w	r7, [lr, #2]
   23d98:	fb09 770b 	mla	r7, r9, fp, r7
   23d9c:	4457      	add	r7, sl
   23d9e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   23da2:	f84e 3b04 	str.w	r3, [lr], #4
   23da6:	f85c 3b04 	ldr.w	r3, [ip], #4
   23daa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   23dae:	f8be 3000 	ldrh.w	r3, [lr]
   23db2:	4562      	cmp	r2, ip
   23db4:	fb09 330a 	mla	r3, r9, sl, r3
   23db8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   23dbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   23dc0:	d8e5      	bhi.n	23d8e <__multiply+0x10a>
   23dc2:	9f01      	ldr	r7, [sp, #4]
   23dc4:	51eb      	str	r3, [r5, r7]
   23dc6:	3504      	adds	r5, #4
   23dc8:	e799      	b.n	23cfe <__multiply+0x7a>
   23dca:	3e01      	subs	r6, #1
   23dcc:	e79b      	b.n	23d06 <__multiply+0x82>
   23dce:	bf00      	nop
   23dd0:	000314ac 	.word	0x000314ac
   23dd4:	000314bd 	.word	0x000314bd

00023dd8 <__pow5mult>:
   23dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23ddc:	4615      	mov	r5, r2
   23dde:	f012 0203 	ands.w	r2, r2, #3
   23de2:	4607      	mov	r7, r0
   23de4:	460e      	mov	r6, r1
   23de6:	d007      	beq.n	23df8 <__pow5mult+0x20>
   23de8:	3a01      	subs	r2, #1
   23dea:	4c25      	ldr	r4, [pc, #148]	; (23e80 <__pow5mult+0xa8>)
   23dec:	2300      	movs	r3, #0
   23dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   23df2:	f7ff fee9 	bl	23bc8 <__multadd>
   23df6:	4606      	mov	r6, r0
   23df8:	10ad      	asrs	r5, r5, #2
   23dfa:	d03d      	beq.n	23e78 <__pow5mult+0xa0>
   23dfc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   23dfe:	b97c      	cbnz	r4, 23e20 <__pow5mult+0x48>
   23e00:	2010      	movs	r0, #16
   23e02:	f7ff f913 	bl	2302c <malloc>
   23e06:	4602      	mov	r2, r0
   23e08:	6278      	str	r0, [r7, #36]	; 0x24
   23e0a:	b928      	cbnz	r0, 23e18 <__pow5mult+0x40>
   23e0c:	4b1d      	ldr	r3, [pc, #116]	; (23e84 <__pow5mult+0xac>)
   23e0e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   23e12:	481d      	ldr	r0, [pc, #116]	; (23e88 <__pow5mult+0xb0>)
   23e14:	f7ff fd76 	bl	23904 <__assert_func>
   23e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
   23e1c:	6004      	str	r4, [r0, #0]
   23e1e:	60c4      	str	r4, [r0, #12]
   23e20:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   23e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
   23e28:	b94c      	cbnz	r4, 23e3e <__pow5mult+0x66>
   23e2a:	f240 2171 	movw	r1, #625	; 0x271
   23e2e:	4638      	mov	r0, r7
   23e30:	f7ff ff12 	bl	23c58 <__i2b>
   23e34:	2300      	movs	r3, #0
   23e36:	4604      	mov	r4, r0
   23e38:	f8c8 0008 	str.w	r0, [r8, #8]
   23e3c:	6003      	str	r3, [r0, #0]
   23e3e:	f04f 0900 	mov.w	r9, #0
   23e42:	07eb      	lsls	r3, r5, #31
   23e44:	d50a      	bpl.n	23e5c <__pow5mult+0x84>
   23e46:	4631      	mov	r1, r6
   23e48:	4622      	mov	r2, r4
   23e4a:	4638      	mov	r0, r7
   23e4c:	f7ff ff1a 	bl	23c84 <__multiply>
   23e50:	4680      	mov	r8, r0
   23e52:	4631      	mov	r1, r6
   23e54:	4638      	mov	r0, r7
   23e56:	4646      	mov	r6, r8
   23e58:	f7ff fe94 	bl	23b84 <_Bfree>
   23e5c:	106d      	asrs	r5, r5, #1
   23e5e:	d00b      	beq.n	23e78 <__pow5mult+0xa0>
   23e60:	6820      	ldr	r0, [r4, #0]
   23e62:	b938      	cbnz	r0, 23e74 <__pow5mult+0x9c>
   23e64:	4622      	mov	r2, r4
   23e66:	4621      	mov	r1, r4
   23e68:	4638      	mov	r0, r7
   23e6a:	f7ff ff0b 	bl	23c84 <__multiply>
   23e6e:	6020      	str	r0, [r4, #0]
   23e70:	f8c0 9000 	str.w	r9, [r0]
   23e74:	4604      	mov	r4, r0
   23e76:	e7e4      	b.n	23e42 <__pow5mult+0x6a>
   23e78:	4630      	mov	r0, r6
   23e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23e7e:	bf00      	nop
   23e80:	0002b8a8 	.word	0x0002b8a8
   23e84:	00031362 	.word	0x00031362
   23e88:	000314bd 	.word	0x000314bd

00023e8c <__lshift>:
   23e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23e90:	460c      	mov	r4, r1
   23e92:	4607      	mov	r7, r0
   23e94:	4691      	mov	r9, r2
   23e96:	ea4f 1a62 	mov.w	sl, r2, asr #5
   23e9a:	6923      	ldr	r3, [r4, #16]
   23e9c:	6849      	ldr	r1, [r1, #4]
   23e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   23ea2:	68a3      	ldr	r3, [r4, #8]
   23ea4:	f108 0601 	add.w	r6, r8, #1
   23ea8:	42b3      	cmp	r3, r6
   23eaa:	db0b      	blt.n	23ec4 <__lshift+0x38>
   23eac:	4638      	mov	r0, r7
   23eae:	f7ff fe29 	bl	23b04 <_Balloc>
   23eb2:	4605      	mov	r5, r0
   23eb4:	b948      	cbnz	r0, 23eca <__lshift+0x3e>
   23eb6:	4602      	mov	r2, r0
   23eb8:	4b28      	ldr	r3, [pc, #160]	; (23f5c <__lshift+0xd0>)
   23eba:	f240 11d9 	movw	r1, #473	; 0x1d9
   23ebe:	4828      	ldr	r0, [pc, #160]	; (23f60 <__lshift+0xd4>)
   23ec0:	f7ff fd20 	bl	23904 <__assert_func>
   23ec4:	3101      	adds	r1, #1
   23ec6:	005b      	lsls	r3, r3, #1
   23ec8:	e7ee      	b.n	23ea8 <__lshift+0x1c>
   23eca:	2300      	movs	r3, #0
   23ecc:	f100 0114 	add.w	r1, r0, #20
   23ed0:	f100 0210 	add.w	r2, r0, #16
   23ed4:	4618      	mov	r0, r3
   23ed6:	4553      	cmp	r3, sl
   23ed8:	db33      	blt.n	23f42 <__lshift+0xb6>
   23eda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   23ede:	f104 0314 	add.w	r3, r4, #20
   23ee2:	6920      	ldr	r0, [r4, #16]
   23ee4:	f019 091f 	ands.w	r9, r9, #31
   23ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   23eec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   23ef0:	d02b      	beq.n	23f4a <__lshift+0xbe>
   23ef2:	f1c9 0e20 	rsb	lr, r9, #32
   23ef6:	468a      	mov	sl, r1
   23ef8:	2200      	movs	r2, #0
   23efa:	6818      	ldr	r0, [r3, #0]
   23efc:	fa00 f009 	lsl.w	r0, r0, r9
   23f00:	4310      	orrs	r0, r2
   23f02:	f84a 0b04 	str.w	r0, [sl], #4
   23f06:	f853 2b04 	ldr.w	r2, [r3], #4
   23f0a:	459c      	cmp	ip, r3
   23f0c:	fa22 f20e 	lsr.w	r2, r2, lr
   23f10:	d8f3      	bhi.n	23efa <__lshift+0x6e>
   23f12:	ebac 0304 	sub.w	r3, ip, r4
   23f16:	f104 0015 	add.w	r0, r4, #21
   23f1a:	3b15      	subs	r3, #21
   23f1c:	f023 0303 	bic.w	r3, r3, #3
   23f20:	3304      	adds	r3, #4
   23f22:	4584      	cmp	ip, r0
   23f24:	bf38      	it	cc
   23f26:	2304      	movcc	r3, #4
   23f28:	50ca      	str	r2, [r1, r3]
   23f2a:	b10a      	cbz	r2, 23f30 <__lshift+0xa4>
   23f2c:	f108 0602 	add.w	r6, r8, #2
   23f30:	3e01      	subs	r6, #1
   23f32:	4638      	mov	r0, r7
   23f34:	4621      	mov	r1, r4
   23f36:	612e      	str	r6, [r5, #16]
   23f38:	f7ff fe24 	bl	23b84 <_Bfree>
   23f3c:	4628      	mov	r0, r5
   23f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23f42:	3301      	adds	r3, #1
   23f44:	f842 0f04 	str.w	r0, [r2, #4]!
   23f48:	e7c5      	b.n	23ed6 <__lshift+0x4a>
   23f4a:	3904      	subs	r1, #4
   23f4c:	f853 2b04 	ldr.w	r2, [r3], #4
   23f50:	459c      	cmp	ip, r3
   23f52:	f841 2f04 	str.w	r2, [r1, #4]!
   23f56:	d8f9      	bhi.n	23f4c <__lshift+0xc0>
   23f58:	e7ea      	b.n	23f30 <__lshift+0xa4>
   23f5a:	bf00      	nop
   23f5c:	000314ac 	.word	0x000314ac
   23f60:	000314bd 	.word	0x000314bd

00023f64 <__mdiff>:
   23f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f68:	4689      	mov	r9, r1
   23f6a:	4606      	mov	r6, r0
   23f6c:	4611      	mov	r1, r2
   23f6e:	4614      	mov	r4, r2
   23f70:	4648      	mov	r0, r9
   23f72:	f006 f81b 	bl	29fac <__mcmp>
   23f76:	1e05      	subs	r5, r0, #0
   23f78:	d112      	bne.n	23fa0 <__mdiff+0x3c>
   23f7a:	4629      	mov	r1, r5
   23f7c:	4630      	mov	r0, r6
   23f7e:	f7ff fdc1 	bl	23b04 <_Balloc>
   23f82:	4602      	mov	r2, r0
   23f84:	b928      	cbnz	r0, 23f92 <__mdiff+0x2e>
   23f86:	4b40      	ldr	r3, [pc, #256]	; (24088 <__mdiff+0x124>)
   23f88:	f240 2132 	movw	r1, #562	; 0x232
   23f8c:	483f      	ldr	r0, [pc, #252]	; (2408c <__mdiff+0x128>)
   23f8e:	f7ff fcb9 	bl	23904 <__assert_func>
   23f92:	2301      	movs	r3, #1
   23f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
   23f98:	4610      	mov	r0, r2
   23f9a:	b003      	add	sp, #12
   23f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fa0:	bfbc      	itt	lt
   23fa2:	464b      	movlt	r3, r9
   23fa4:	46a1      	movlt	r9, r4
   23fa6:	4630      	mov	r0, r6
   23fa8:	bfb8      	it	lt
   23faa:	2501      	movlt	r5, #1
   23fac:	f8d9 1004 	ldr.w	r1, [r9, #4]
   23fb0:	bfb4      	ite	lt
   23fb2:	461c      	movlt	r4, r3
   23fb4:	2500      	movge	r5, #0
   23fb6:	f7ff fda5 	bl	23b04 <_Balloc>
   23fba:	4602      	mov	r2, r0
   23fbc:	b918      	cbnz	r0, 23fc6 <__mdiff+0x62>
   23fbe:	4b32      	ldr	r3, [pc, #200]	; (24088 <__mdiff+0x124>)
   23fc0:	f44f 7110 	mov.w	r1, #576	; 0x240
   23fc4:	e7e2      	b.n	23f8c <__mdiff+0x28>
   23fc6:	f8d9 7010 	ldr.w	r7, [r9, #16]
   23fca:	f104 0e14 	add.w	lr, r4, #20
   23fce:	6926      	ldr	r6, [r4, #16]
   23fd0:	f100 0b14 	add.w	fp, r0, #20
   23fd4:	60c5      	str	r5, [r0, #12]
   23fd6:	f109 0514 	add.w	r5, r9, #20
   23fda:	f109 0310 	add.w	r3, r9, #16
   23fde:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   23fe2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   23fe6:	46d9      	mov	r9, fp
   23fe8:	f04f 0c00 	mov.w	ip, #0
   23fec:	9301      	str	r3, [sp, #4]
   23fee:	9b01      	ldr	r3, [sp, #4]
   23ff0:	f85e 0b04 	ldr.w	r0, [lr], #4
   23ff4:	f853 af04 	ldr.w	sl, [r3, #4]!
   23ff8:	b281      	uxth	r1, r0
   23ffa:	4576      	cmp	r6, lr
   23ffc:	9301      	str	r3, [sp, #4]
   23ffe:	fa1f f38a 	uxth.w	r3, sl
   24002:	ea4f 4010 	mov.w	r0, r0, lsr #16
   24006:	eba3 0301 	sub.w	r3, r3, r1
   2400a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   2400e:	4463      	add	r3, ip
   24010:	eb00 4023 	add.w	r0, r0, r3, asr #16
   24014:	b29b      	uxth	r3, r3
   24016:	ea4f 4c20 	mov.w	ip, r0, asr #16
   2401a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   2401e:	f849 3b04 	str.w	r3, [r9], #4
   24022:	d8e4      	bhi.n	23fee <__mdiff+0x8a>
   24024:	1b33      	subs	r3, r6, r4
   24026:	3415      	adds	r4, #21
   24028:	3b15      	subs	r3, #21
   2402a:	f023 0303 	bic.w	r3, r3, #3
   2402e:	3304      	adds	r3, #4
   24030:	42a6      	cmp	r6, r4
   24032:	bf38      	it	cc
   24034:	2304      	movcc	r3, #4
   24036:	441d      	add	r5, r3
   24038:	445b      	add	r3, fp
   2403a:	462c      	mov	r4, r5
   2403c:	461e      	mov	r6, r3
   2403e:	4544      	cmp	r4, r8
   24040:	d30e      	bcc.n	24060 <__mdiff+0xfc>
   24042:	f108 0103 	add.w	r1, r8, #3
   24046:	1b49      	subs	r1, r1, r5
   24048:	3d03      	subs	r5, #3
   2404a:	f021 0103 	bic.w	r1, r1, #3
   2404e:	45a8      	cmp	r8, r5
   24050:	bf38      	it	cc
   24052:	2100      	movcc	r1, #0
   24054:	440b      	add	r3, r1
   24056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2405a:	b199      	cbz	r1, 24084 <__mdiff+0x120>
   2405c:	6117      	str	r7, [r2, #16]
   2405e:	e79b      	b.n	23f98 <__mdiff+0x34>
   24060:	f854 1b04 	ldr.w	r1, [r4], #4
   24064:	46e6      	mov	lr, ip
   24066:	fa1f fc81 	uxth.w	ip, r1
   2406a:	0c08      	lsrs	r0, r1, #16
   2406c:	4471      	add	r1, lr
   2406e:	44f4      	add	ip, lr
   24070:	b289      	uxth	r1, r1
   24072:	eb00 402c 	add.w	r0, r0, ip, asr #16
   24076:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   2407a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   2407e:	f846 1b04 	str.w	r1, [r6], #4
   24082:	e7dc      	b.n	2403e <__mdiff+0xda>
   24084:	3f01      	subs	r7, #1
   24086:	e7e6      	b.n	24056 <__mdiff+0xf2>
   24088:	000314ac 	.word	0x000314ac
   2408c:	000314bd 	.word	0x000314bd

00024090 <__d2b>:
   24090:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   24094:	2101      	movs	r1, #1
   24096:	4690      	mov	r8, r2
   24098:	4699      	mov	r9, r3
   2409a:	9e08      	ldr	r6, [sp, #32]
   2409c:	f7ff fd32 	bl	23b04 <_Balloc>
   240a0:	4604      	mov	r4, r0
   240a2:	b930      	cbnz	r0, 240b2 <__d2b+0x22>
   240a4:	4602      	mov	r2, r0
   240a6:	4b24      	ldr	r3, [pc, #144]	; (24138 <__d2b+0xa8>)
   240a8:	f240 310a 	movw	r1, #778	; 0x30a
   240ac:	4823      	ldr	r0, [pc, #140]	; (2413c <__d2b+0xac>)
   240ae:	f7ff fc29 	bl	23904 <__assert_func>
   240b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
   240b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
   240ba:	b10d      	cbz	r5, 240c0 <__d2b+0x30>
   240bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   240c0:	9301      	str	r3, [sp, #4]
   240c2:	f1b8 0300 	subs.w	r3, r8, #0
   240c6:	d024      	beq.n	24112 <__d2b+0x82>
   240c8:	4668      	mov	r0, sp
   240ca:	9300      	str	r3, [sp, #0]
   240cc:	f005 ff41 	bl	29f52 <__lo0bits>
   240d0:	e9dd 1200 	ldrd	r1, r2, [sp]
   240d4:	b1d8      	cbz	r0, 2410e <__d2b+0x7e>
   240d6:	f1c0 0320 	rsb	r3, r0, #32
   240da:	fa02 f303 	lsl.w	r3, r2, r3
   240de:	40c2      	lsrs	r2, r0
   240e0:	430b      	orrs	r3, r1
   240e2:	9201      	str	r2, [sp, #4]
   240e4:	6163      	str	r3, [r4, #20]
   240e6:	9b01      	ldr	r3, [sp, #4]
   240e8:	2b00      	cmp	r3, #0
   240ea:	61a3      	str	r3, [r4, #24]
   240ec:	bf0c      	ite	eq
   240ee:	2201      	moveq	r2, #1
   240f0:	2202      	movne	r2, #2
   240f2:	6122      	str	r2, [r4, #16]
   240f4:	b1ad      	cbz	r5, 24122 <__d2b+0x92>
   240f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   240fa:	4405      	add	r5, r0
   240fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   24100:	6035      	str	r5, [r6, #0]
   24102:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24104:	6018      	str	r0, [r3, #0]
   24106:	4620      	mov	r0, r4
   24108:	b002      	add	sp, #8
   2410a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2410e:	6161      	str	r1, [r4, #20]
   24110:	e7e9      	b.n	240e6 <__d2b+0x56>
   24112:	a801      	add	r0, sp, #4
   24114:	f005 ff1d 	bl	29f52 <__lo0bits>
   24118:	9b01      	ldr	r3, [sp, #4]
   2411a:	3020      	adds	r0, #32
   2411c:	2201      	movs	r2, #1
   2411e:	6163      	str	r3, [r4, #20]
   24120:	e7e7      	b.n	240f2 <__d2b+0x62>
   24122:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   24126:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2412a:	6030      	str	r0, [r6, #0]
   2412c:	6918      	ldr	r0, [r3, #16]
   2412e:	f005 feee 	bl	29f0e <__hi0bits>
   24132:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   24136:	e7e4      	b.n	24102 <__d2b+0x72>
   24138:	000314ac 	.word	0x000314ac
   2413c:	000314bd 	.word	0x000314bd

00024140 <_vfiprintf_r>:
   24140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24144:	460d      	mov	r5, r1
   24146:	b09d      	sub	sp, #116	; 0x74
   24148:	4614      	mov	r4, r2
   2414a:	4698      	mov	r8, r3
   2414c:	4606      	mov	r6, r0
   2414e:	b118      	cbz	r0, 24158 <_vfiprintf_r+0x18>
   24150:	6983      	ldr	r3, [r0, #24]
   24152:	b90b      	cbnz	r3, 24158 <_vfiprintf_r+0x18>
   24154:	f7ff fc36 	bl	239c4 <__sinit>
   24158:	4b87      	ldr	r3, [pc, #540]	; (24378 <_vfiprintf_r+0x238>)
   2415a:	429d      	cmp	r5, r3
   2415c:	d11b      	bne.n	24196 <_vfiprintf_r+0x56>
   2415e:	6875      	ldr	r5, [r6, #4]
   24160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24162:	07d9      	lsls	r1, r3, #31
   24164:	d405      	bmi.n	24172 <_vfiprintf_r+0x32>
   24166:	89ab      	ldrh	r3, [r5, #12]
   24168:	059a      	lsls	r2, r3, #22
   2416a:	d402      	bmi.n	24172 <_vfiprintf_r+0x32>
   2416c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2416e:	f7ed f80b 	bl	11188 <__retarget_lock_acquire_recursive>
   24172:	89ab      	ldrh	r3, [r5, #12]
   24174:	071b      	lsls	r3, r3, #28
   24176:	d501      	bpl.n	2417c <_vfiprintf_r+0x3c>
   24178:	692b      	ldr	r3, [r5, #16]
   2417a:	b9eb      	cbnz	r3, 241b8 <_vfiprintf_r+0x78>
   2417c:	4629      	mov	r1, r5
   2417e:	4630      	mov	r0, r6
   24180:	f000 f96e 	bl	24460 <__swsetup_r>
   24184:	b1c0      	cbz	r0, 241b8 <_vfiprintf_r+0x78>
   24186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24188:	07dc      	lsls	r4, r3, #31
   2418a:	d50e      	bpl.n	241aa <_vfiprintf_r+0x6a>
   2418c:	f04f 30ff 	mov.w	r0, #4294967295
   24190:	b01d      	add	sp, #116	; 0x74
   24192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24196:	4b79      	ldr	r3, [pc, #484]	; (2437c <_vfiprintf_r+0x23c>)
   24198:	429d      	cmp	r5, r3
   2419a:	d101      	bne.n	241a0 <_vfiprintf_r+0x60>
   2419c:	68b5      	ldr	r5, [r6, #8]
   2419e:	e7df      	b.n	24160 <_vfiprintf_r+0x20>
   241a0:	4b77      	ldr	r3, [pc, #476]	; (24380 <_vfiprintf_r+0x240>)
   241a2:	429d      	cmp	r5, r3
   241a4:	bf08      	it	eq
   241a6:	68f5      	ldreq	r5, [r6, #12]
   241a8:	e7da      	b.n	24160 <_vfiprintf_r+0x20>
   241aa:	89ab      	ldrh	r3, [r5, #12]
   241ac:	0598      	lsls	r0, r3, #22
   241ae:	d4ed      	bmi.n	2418c <_vfiprintf_r+0x4c>
   241b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   241b2:	f7ed f805 	bl	111c0 <__retarget_lock_release_recursive>
   241b6:	e7e9      	b.n	2418c <_vfiprintf_r+0x4c>
   241b8:	2300      	movs	r3, #0
   241ba:	f8cd 800c 	str.w	r8, [sp, #12]
   241be:	f04f 0901 	mov.w	r9, #1
   241c2:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 24384 <_vfiprintf_r+0x244>
   241c6:	9309      	str	r3, [sp, #36]	; 0x24
   241c8:	2320      	movs	r3, #32
   241ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   241ce:	2330      	movs	r3, #48	; 0x30
   241d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   241d4:	4623      	mov	r3, r4
   241d6:	469a      	mov	sl, r3
   241d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   241dc:	b10a      	cbz	r2, 241e2 <_vfiprintf_r+0xa2>
   241de:	2a25      	cmp	r2, #37	; 0x25
   241e0:	d1f9      	bne.n	241d6 <_vfiprintf_r+0x96>
   241e2:	ebba 0b04 	subs.w	fp, sl, r4
   241e6:	d00b      	beq.n	24200 <_vfiprintf_r+0xc0>
   241e8:	465b      	mov	r3, fp
   241ea:	4622      	mov	r2, r4
   241ec:	4629      	mov	r1, r5
   241ee:	4630      	mov	r0, r6
   241f0:	f005 ff0c 	bl	2a00c <__sfputs_r>
   241f4:	3001      	adds	r0, #1
   241f6:	f000 80a6 	beq.w	24346 <_vfiprintf_r+0x206>
   241fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   241fc:	445a      	add	r2, fp
   241fe:	9209      	str	r2, [sp, #36]	; 0x24
   24200:	f89a 3000 	ldrb.w	r3, [sl]
   24204:	2b00      	cmp	r3, #0
   24206:	f000 809e 	beq.w	24346 <_vfiprintf_r+0x206>
   2420a:	2300      	movs	r3, #0
   2420c:	f04f 32ff 	mov.w	r2, #4294967295
   24210:	f10a 0a01 	add.w	sl, sl, #1
   24214:	9304      	str	r3, [sp, #16]
   24216:	9307      	str	r3, [sp, #28]
   24218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2421c:	931a      	str	r3, [sp, #104]	; 0x68
   2421e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   24222:	4654      	mov	r4, sl
   24224:	2205      	movs	r2, #5
   24226:	4857      	ldr	r0, [pc, #348]	; (24384 <_vfiprintf_r+0x244>)
   24228:	f814 1b01 	ldrb.w	r1, [r4], #1
   2422c:	f005 fe61 	bl	29ef2 <memchr>
   24230:	9b04      	ldr	r3, [sp, #16]
   24232:	b9d0      	cbnz	r0, 2426a <_vfiprintf_r+0x12a>
   24234:	06d9      	lsls	r1, r3, #27
   24236:	bf44      	itt	mi
   24238:	2220      	movmi	r2, #32
   2423a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2423e:	071a      	lsls	r2, r3, #28
   24240:	bf44      	itt	mi
   24242:	222b      	movmi	r2, #43	; 0x2b
   24244:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   24248:	f89a 2000 	ldrb.w	r2, [sl]
   2424c:	2a2a      	cmp	r2, #42	; 0x2a
   2424e:	d014      	beq.n	2427a <_vfiprintf_r+0x13a>
   24250:	9a07      	ldr	r2, [sp, #28]
   24252:	4654      	mov	r4, sl
   24254:	2000      	movs	r0, #0
   24256:	f04f 0c0a 	mov.w	ip, #10
   2425a:	4621      	mov	r1, r4
   2425c:	f811 3b01 	ldrb.w	r3, [r1], #1
   24260:	3b30      	subs	r3, #48	; 0x30
   24262:	2b09      	cmp	r3, #9
   24264:	d94a      	bls.n	242fc <_vfiprintf_r+0x1bc>
   24266:	b970      	cbnz	r0, 24286 <_vfiprintf_r+0x146>
   24268:	e014      	b.n	24294 <_vfiprintf_r+0x154>
   2426a:	eba0 0008 	sub.w	r0, r0, r8
   2426e:	46a2      	mov	sl, r4
   24270:	fa09 f000 	lsl.w	r0, r9, r0
   24274:	4318      	orrs	r0, r3
   24276:	9004      	str	r0, [sp, #16]
   24278:	e7d3      	b.n	24222 <_vfiprintf_r+0xe2>
   2427a:	9a03      	ldr	r2, [sp, #12]
   2427c:	1d11      	adds	r1, r2, #4
   2427e:	6812      	ldr	r2, [r2, #0]
   24280:	2a00      	cmp	r2, #0
   24282:	9103      	str	r1, [sp, #12]
   24284:	db01      	blt.n	2428a <_vfiprintf_r+0x14a>
   24286:	9207      	str	r2, [sp, #28]
   24288:	e004      	b.n	24294 <_vfiprintf_r+0x154>
   2428a:	4252      	negs	r2, r2
   2428c:	f043 0302 	orr.w	r3, r3, #2
   24290:	9207      	str	r2, [sp, #28]
   24292:	9304      	str	r3, [sp, #16]
   24294:	7823      	ldrb	r3, [r4, #0]
   24296:	2b2e      	cmp	r3, #46	; 0x2e
   24298:	d10a      	bne.n	242b0 <_vfiprintf_r+0x170>
   2429a:	7863      	ldrb	r3, [r4, #1]
   2429c:	2b2a      	cmp	r3, #42	; 0x2a
   2429e:	d132      	bne.n	24306 <_vfiprintf_r+0x1c6>
   242a0:	9b03      	ldr	r3, [sp, #12]
   242a2:	3402      	adds	r4, #2
   242a4:	1d1a      	adds	r2, r3, #4
   242a6:	681b      	ldr	r3, [r3, #0]
   242a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   242ac:	9203      	str	r2, [sp, #12]
   242ae:	9305      	str	r3, [sp, #20]
   242b0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 24388 <_vfiprintf_r+0x248>
   242b4:	2203      	movs	r2, #3
   242b6:	7821      	ldrb	r1, [r4, #0]
   242b8:	4650      	mov	r0, sl
   242ba:	f005 fe1a 	bl	29ef2 <memchr>
   242be:	b138      	cbz	r0, 242d0 <_vfiprintf_r+0x190>
   242c0:	eba0 000a 	sub.w	r0, r0, sl
   242c4:	2240      	movs	r2, #64	; 0x40
   242c6:	9b04      	ldr	r3, [sp, #16]
   242c8:	3401      	adds	r4, #1
   242ca:	4082      	lsls	r2, r0
   242cc:	4313      	orrs	r3, r2
   242ce:	9304      	str	r3, [sp, #16]
   242d0:	f814 1b01 	ldrb.w	r1, [r4], #1
   242d4:	2206      	movs	r2, #6
   242d6:	482d      	ldr	r0, [pc, #180]	; (2438c <_vfiprintf_r+0x24c>)
   242d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   242dc:	f005 fe09 	bl	29ef2 <memchr>
   242e0:	2800      	cmp	r0, #0
   242e2:	d03f      	beq.n	24364 <_vfiprintf_r+0x224>
   242e4:	4b2a      	ldr	r3, [pc, #168]	; (24390 <_vfiprintf_r+0x250>)
   242e6:	bb1b      	cbnz	r3, 24330 <_vfiprintf_r+0x1f0>
   242e8:	9b03      	ldr	r3, [sp, #12]
   242ea:	3307      	adds	r3, #7
   242ec:	f023 0307 	bic.w	r3, r3, #7
   242f0:	3308      	adds	r3, #8
   242f2:	9303      	str	r3, [sp, #12]
   242f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   242f6:	443b      	add	r3, r7
   242f8:	9309      	str	r3, [sp, #36]	; 0x24
   242fa:	e76b      	b.n	241d4 <_vfiprintf_r+0x94>
   242fc:	fb0c 3202 	mla	r2, ip, r2, r3
   24300:	460c      	mov	r4, r1
   24302:	2001      	movs	r0, #1
   24304:	e7a9      	b.n	2425a <_vfiprintf_r+0x11a>
   24306:	2300      	movs	r3, #0
   24308:	3401      	adds	r4, #1
   2430a:	f04f 0c0a 	mov.w	ip, #10
   2430e:	4619      	mov	r1, r3
   24310:	9305      	str	r3, [sp, #20]
   24312:	4620      	mov	r0, r4
   24314:	f810 2b01 	ldrb.w	r2, [r0], #1
   24318:	3a30      	subs	r2, #48	; 0x30
   2431a:	2a09      	cmp	r2, #9
   2431c:	d903      	bls.n	24326 <_vfiprintf_r+0x1e6>
   2431e:	2b00      	cmp	r3, #0
   24320:	d0c6      	beq.n	242b0 <_vfiprintf_r+0x170>
   24322:	9105      	str	r1, [sp, #20]
   24324:	e7c4      	b.n	242b0 <_vfiprintf_r+0x170>
   24326:	fb0c 2101 	mla	r1, ip, r1, r2
   2432a:	4604      	mov	r4, r0
   2432c:	2301      	movs	r3, #1
   2432e:	e7f0      	b.n	24312 <_vfiprintf_r+0x1d2>
   24330:	ab03      	add	r3, sp, #12
   24332:	462a      	mov	r2, r5
   24334:	a904      	add	r1, sp, #16
   24336:	4630      	mov	r0, r6
   24338:	9300      	str	r3, [sp, #0]
   2433a:	4b16      	ldr	r3, [pc, #88]	; (24394 <_vfiprintf_r+0x254>)
   2433c:	f7fe ff22 	bl	23184 <_printf_float>
   24340:	4607      	mov	r7, r0
   24342:	1c78      	adds	r0, r7, #1
   24344:	d1d6      	bne.n	242f4 <_vfiprintf_r+0x1b4>
   24346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24348:	07d9      	lsls	r1, r3, #31
   2434a:	d405      	bmi.n	24358 <_vfiprintf_r+0x218>
   2434c:	89ab      	ldrh	r3, [r5, #12]
   2434e:	059a      	lsls	r2, r3, #22
   24350:	d402      	bmi.n	24358 <_vfiprintf_r+0x218>
   24352:	6da8      	ldr	r0, [r5, #88]	; 0x58
   24354:	f7ec ff34 	bl	111c0 <__retarget_lock_release_recursive>
   24358:	89ab      	ldrh	r3, [r5, #12]
   2435a:	065b      	lsls	r3, r3, #25
   2435c:	f53f af16 	bmi.w	2418c <_vfiprintf_r+0x4c>
   24360:	9809      	ldr	r0, [sp, #36]	; 0x24
   24362:	e715      	b.n	24190 <_vfiprintf_r+0x50>
   24364:	ab03      	add	r3, sp, #12
   24366:	462a      	mov	r2, r5
   24368:	a904      	add	r1, sp, #16
   2436a:	4630      	mov	r0, r6
   2436c:	9300      	str	r3, [sp, #0]
   2436e:	4b09      	ldr	r3, [pc, #36]	; (24394 <_vfiprintf_r+0x254>)
   24370:	f7ff f93e 	bl	235f0 <_printf_i>
   24374:	e7e4      	b.n	24340 <_vfiprintf_r+0x200>
   24376:	bf00      	nop
   24378:	0002b888 	.word	0x0002b888
   2437c:	0002b868 	.word	0x0002b868
   24380:	0002b848 	.word	0x0002b848
   24384:	00031532 	.word	0x00031532
   24388:	00031538 	.word	0x00031538
   2438c:	0003153c 	.word	0x0003153c
   24390:	00023185 	.word	0x00023185
   24394:	0002a00d 	.word	0x0002a00d

00024398 <__swbuf_r>:
   24398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2439a:	460e      	mov	r6, r1
   2439c:	4614      	mov	r4, r2
   2439e:	4605      	mov	r5, r0
   243a0:	b118      	cbz	r0, 243aa <__swbuf_r+0x12>
   243a2:	6983      	ldr	r3, [r0, #24]
   243a4:	b90b      	cbnz	r3, 243aa <__swbuf_r+0x12>
   243a6:	f7ff fb0d 	bl	239c4 <__sinit>
   243aa:	4b21      	ldr	r3, [pc, #132]	; (24430 <__swbuf_r+0x98>)
   243ac:	429c      	cmp	r4, r3
   243ae:	d110      	bne.n	243d2 <__swbuf_r+0x3a>
   243b0:	686c      	ldr	r4, [r5, #4]
   243b2:	69a3      	ldr	r3, [r4, #24]
   243b4:	60a3      	str	r3, [r4, #8]
   243b6:	89a3      	ldrh	r3, [r4, #12]
   243b8:	071a      	lsls	r2, r3, #28
   243ba:	d501      	bpl.n	243c0 <__swbuf_r+0x28>
   243bc:	6923      	ldr	r3, [r4, #16]
   243be:	b993      	cbnz	r3, 243e6 <__swbuf_r+0x4e>
   243c0:	4621      	mov	r1, r4
   243c2:	4628      	mov	r0, r5
   243c4:	f000 f84c 	bl	24460 <__swsetup_r>
   243c8:	b168      	cbz	r0, 243e6 <__swbuf_r+0x4e>
   243ca:	f04f 37ff 	mov.w	r7, #4294967295
   243ce:	4638      	mov	r0, r7
   243d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   243d2:	4b18      	ldr	r3, [pc, #96]	; (24434 <__swbuf_r+0x9c>)
   243d4:	429c      	cmp	r4, r3
   243d6:	d101      	bne.n	243dc <__swbuf_r+0x44>
   243d8:	68ac      	ldr	r4, [r5, #8]
   243da:	e7ea      	b.n	243b2 <__swbuf_r+0x1a>
   243dc:	4b16      	ldr	r3, [pc, #88]	; (24438 <__swbuf_r+0xa0>)
   243de:	429c      	cmp	r4, r3
   243e0:	bf08      	it	eq
   243e2:	68ec      	ldreq	r4, [r5, #12]
   243e4:	e7e5      	b.n	243b2 <__swbuf_r+0x1a>
   243e6:	6923      	ldr	r3, [r4, #16]
   243e8:	b2f6      	uxtb	r6, r6
   243ea:	6820      	ldr	r0, [r4, #0]
   243ec:	4637      	mov	r7, r6
   243ee:	1ac0      	subs	r0, r0, r3
   243f0:	6963      	ldr	r3, [r4, #20]
   243f2:	4283      	cmp	r3, r0
   243f4:	dc05      	bgt.n	24402 <__swbuf_r+0x6a>
   243f6:	4621      	mov	r1, r4
   243f8:	4628      	mov	r0, r5
   243fa:	f000 f8ad 	bl	24558 <_fflush_r>
   243fe:	2800      	cmp	r0, #0
   24400:	d1e3      	bne.n	243ca <__swbuf_r+0x32>
   24402:	68a3      	ldr	r3, [r4, #8]
   24404:	3001      	adds	r0, #1
   24406:	3b01      	subs	r3, #1
   24408:	60a3      	str	r3, [r4, #8]
   2440a:	6823      	ldr	r3, [r4, #0]
   2440c:	1c5a      	adds	r2, r3, #1
   2440e:	6022      	str	r2, [r4, #0]
   24410:	701e      	strb	r6, [r3, #0]
   24412:	6963      	ldr	r3, [r4, #20]
   24414:	4283      	cmp	r3, r0
   24416:	d004      	beq.n	24422 <__swbuf_r+0x8a>
   24418:	89a3      	ldrh	r3, [r4, #12]
   2441a:	07db      	lsls	r3, r3, #31
   2441c:	d5d7      	bpl.n	243ce <__swbuf_r+0x36>
   2441e:	2e0a      	cmp	r6, #10
   24420:	d1d5      	bne.n	243ce <__swbuf_r+0x36>
   24422:	4621      	mov	r1, r4
   24424:	4628      	mov	r0, r5
   24426:	f000 f897 	bl	24558 <_fflush_r>
   2442a:	2800      	cmp	r0, #0
   2442c:	d0cf      	beq.n	243ce <__swbuf_r+0x36>
   2442e:	e7cc      	b.n	243ca <__swbuf_r+0x32>
   24430:	0002b888 	.word	0x0002b888
   24434:	0002b868 	.word	0x0002b868
   24438:	0002b848 	.word	0x0002b848

0002443c <_write_r>:
   2443c:	b538      	push	{r3, r4, r5, lr}
   2443e:	4604      	mov	r4, r0
   24440:	4d06      	ldr	r5, [pc, #24]	; (2445c <_write_r+0x20>)
   24442:	4608      	mov	r0, r1
   24444:	4611      	mov	r1, r2
   24446:	2200      	movs	r2, #0
   24448:	602a      	str	r2, [r5, #0]
   2444a:	461a      	mov	r2, r3
   2444c:	f001 fde1 	bl	26012 <_write>
   24450:	1c43      	adds	r3, r0, #1
   24452:	d102      	bne.n	2445a <_write_r+0x1e>
   24454:	682b      	ldr	r3, [r5, #0]
   24456:	b103      	cbz	r3, 2445a <_write_r+0x1e>
   24458:	6023      	str	r3, [r4, #0]
   2445a:	bd38      	pop	{r3, r4, r5, pc}
   2445c:	20021568 	.word	0x20021568

00024460 <__swsetup_r>:
   24460:	4b31      	ldr	r3, [pc, #196]	; (24528 <__swsetup_r+0xc8>)
   24462:	b570      	push	{r4, r5, r6, lr}
   24464:	681d      	ldr	r5, [r3, #0]
   24466:	4606      	mov	r6, r0
   24468:	460c      	mov	r4, r1
   2446a:	b125      	cbz	r5, 24476 <__swsetup_r+0x16>
   2446c:	69ab      	ldr	r3, [r5, #24]
   2446e:	b913      	cbnz	r3, 24476 <__swsetup_r+0x16>
   24470:	4628      	mov	r0, r5
   24472:	f7ff faa7 	bl	239c4 <__sinit>
   24476:	4b2d      	ldr	r3, [pc, #180]	; (2452c <__swsetup_r+0xcc>)
   24478:	429c      	cmp	r4, r3
   2447a:	d10e      	bne.n	2449a <__swsetup_r+0x3a>
   2447c:	686c      	ldr	r4, [r5, #4]
   2447e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24482:	071a      	lsls	r2, r3, #28
   24484:	d42c      	bmi.n	244e0 <__swsetup_r+0x80>
   24486:	06dd      	lsls	r5, r3, #27
   24488:	d411      	bmi.n	244ae <__swsetup_r+0x4e>
   2448a:	2209      	movs	r2, #9
   2448c:	6032      	str	r2, [r6, #0]
   2448e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24492:	f04f 30ff 	mov.w	r0, #4294967295
   24496:	81a3      	strh	r3, [r4, #12]
   24498:	e03d      	b.n	24516 <__swsetup_r+0xb6>
   2449a:	4b25      	ldr	r3, [pc, #148]	; (24530 <__swsetup_r+0xd0>)
   2449c:	429c      	cmp	r4, r3
   2449e:	d101      	bne.n	244a4 <__swsetup_r+0x44>
   244a0:	68ac      	ldr	r4, [r5, #8]
   244a2:	e7ec      	b.n	2447e <__swsetup_r+0x1e>
   244a4:	4b23      	ldr	r3, [pc, #140]	; (24534 <__swsetup_r+0xd4>)
   244a6:	429c      	cmp	r4, r3
   244a8:	bf08      	it	eq
   244aa:	68ec      	ldreq	r4, [r5, #12]
   244ac:	e7e7      	b.n	2447e <__swsetup_r+0x1e>
   244ae:	0758      	lsls	r0, r3, #29
   244b0:	d512      	bpl.n	244d8 <__swsetup_r+0x78>
   244b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   244b4:	b141      	cbz	r1, 244c8 <__swsetup_r+0x68>
   244b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   244ba:	4299      	cmp	r1, r3
   244bc:	d002      	beq.n	244c4 <__swsetup_r+0x64>
   244be:	4630      	mov	r0, r6
   244c0:	f7fe fdbc 	bl	2303c <_free_r>
   244c4:	2300      	movs	r3, #0
   244c6:	6363      	str	r3, [r4, #52]	; 0x34
   244c8:	89a3      	ldrh	r3, [r4, #12]
   244ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   244ce:	81a3      	strh	r3, [r4, #12]
   244d0:	2300      	movs	r3, #0
   244d2:	6063      	str	r3, [r4, #4]
   244d4:	6923      	ldr	r3, [r4, #16]
   244d6:	6023      	str	r3, [r4, #0]
   244d8:	89a3      	ldrh	r3, [r4, #12]
   244da:	f043 0308 	orr.w	r3, r3, #8
   244de:	81a3      	strh	r3, [r4, #12]
   244e0:	6923      	ldr	r3, [r4, #16]
   244e2:	b94b      	cbnz	r3, 244f8 <__swsetup_r+0x98>
   244e4:	89a3      	ldrh	r3, [r4, #12]
   244e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
   244ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   244ee:	d003      	beq.n	244f8 <__swsetup_r+0x98>
   244f0:	4621      	mov	r1, r4
   244f2:	4630      	mov	r0, r6
   244f4:	f000 f87e 	bl	245f4 <__smakebuf_r>
   244f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   244fc:	f013 0201 	ands.w	r2, r3, #1
   24500:	d00a      	beq.n	24518 <__swsetup_r+0xb8>
   24502:	2200      	movs	r2, #0
   24504:	60a2      	str	r2, [r4, #8]
   24506:	6962      	ldr	r2, [r4, #20]
   24508:	4252      	negs	r2, r2
   2450a:	61a2      	str	r2, [r4, #24]
   2450c:	6922      	ldr	r2, [r4, #16]
   2450e:	b942      	cbnz	r2, 24522 <__swsetup_r+0xc2>
   24510:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   24514:	d1bb      	bne.n	2448e <__swsetup_r+0x2e>
   24516:	bd70      	pop	{r4, r5, r6, pc}
   24518:	0799      	lsls	r1, r3, #30
   2451a:	bf58      	it	pl
   2451c:	6962      	ldrpl	r2, [r4, #20]
   2451e:	60a2      	str	r2, [r4, #8]
   24520:	e7f4      	b.n	2450c <__swsetup_r+0xac>
   24522:	2000      	movs	r0, #0
   24524:	e7f7      	b.n	24516 <__swsetup_r+0xb6>
   24526:	bf00      	nop
   24528:	20008744 	.word	0x20008744
   2452c:	0002b888 	.word	0x0002b888
   24530:	0002b868 	.word	0x0002b868
   24534:	0002b848 	.word	0x0002b848

00024538 <_close_r>:
   24538:	b538      	push	{r3, r4, r5, lr}
   2453a:	2300      	movs	r3, #0
   2453c:	4d05      	ldr	r5, [pc, #20]	; (24554 <_close_r+0x1c>)
   2453e:	4604      	mov	r4, r0
   24540:	4608      	mov	r0, r1
   24542:	602b      	str	r3, [r5, #0]
   24544:	f001 fd69 	bl	2601a <_close>
   24548:	1c43      	adds	r3, r0, #1
   2454a:	d102      	bne.n	24552 <_close_r+0x1a>
   2454c:	682b      	ldr	r3, [r5, #0]
   2454e:	b103      	cbz	r3, 24552 <_close_r+0x1a>
   24550:	6023      	str	r3, [r4, #0]
   24552:	bd38      	pop	{r3, r4, r5, pc}
   24554:	20021568 	.word	0x20021568

00024558 <_fflush_r>:
   24558:	b538      	push	{r3, r4, r5, lr}
   2455a:	690b      	ldr	r3, [r1, #16]
   2455c:	4605      	mov	r5, r0
   2455e:	460c      	mov	r4, r1
   24560:	b913      	cbnz	r3, 24568 <_fflush_r+0x10>
   24562:	2500      	movs	r5, #0
   24564:	4628      	mov	r0, r5
   24566:	bd38      	pop	{r3, r4, r5, pc}
   24568:	b118      	cbz	r0, 24572 <_fflush_r+0x1a>
   2456a:	6983      	ldr	r3, [r0, #24]
   2456c:	b90b      	cbnz	r3, 24572 <_fflush_r+0x1a>
   2456e:	f7ff fa29 	bl	239c4 <__sinit>
   24572:	4b14      	ldr	r3, [pc, #80]	; (245c4 <_fflush_r+0x6c>)
   24574:	429c      	cmp	r4, r3
   24576:	d11b      	bne.n	245b0 <_fflush_r+0x58>
   24578:	686c      	ldr	r4, [r5, #4]
   2457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2457e:	2b00      	cmp	r3, #0
   24580:	d0ef      	beq.n	24562 <_fflush_r+0xa>
   24582:	6e62      	ldr	r2, [r4, #100]	; 0x64
   24584:	07d0      	lsls	r0, r2, #31
   24586:	d404      	bmi.n	24592 <_fflush_r+0x3a>
   24588:	0599      	lsls	r1, r3, #22
   2458a:	d402      	bmi.n	24592 <_fflush_r+0x3a>
   2458c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2458e:	f7ec fdfb 	bl	11188 <__retarget_lock_acquire_recursive>
   24592:	4628      	mov	r0, r5
   24594:	4621      	mov	r1, r4
   24596:	f005 fd95 	bl	2a0c4 <__sflush_r>
   2459a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2459c:	4605      	mov	r5, r0
   2459e:	07da      	lsls	r2, r3, #31
   245a0:	d4e0      	bmi.n	24564 <_fflush_r+0xc>
   245a2:	89a3      	ldrh	r3, [r4, #12]
   245a4:	059b      	lsls	r3, r3, #22
   245a6:	d4dd      	bmi.n	24564 <_fflush_r+0xc>
   245a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   245aa:	f7ec fe09 	bl	111c0 <__retarget_lock_release_recursive>
   245ae:	e7d9      	b.n	24564 <_fflush_r+0xc>
   245b0:	4b05      	ldr	r3, [pc, #20]	; (245c8 <_fflush_r+0x70>)
   245b2:	429c      	cmp	r4, r3
   245b4:	d101      	bne.n	245ba <_fflush_r+0x62>
   245b6:	68ac      	ldr	r4, [r5, #8]
   245b8:	e7df      	b.n	2457a <_fflush_r+0x22>
   245ba:	4b04      	ldr	r3, [pc, #16]	; (245cc <_fflush_r+0x74>)
   245bc:	429c      	cmp	r4, r3
   245be:	bf08      	it	eq
   245c0:	68ec      	ldreq	r4, [r5, #12]
   245c2:	e7da      	b.n	2457a <_fflush_r+0x22>
   245c4:	0002b888 	.word	0x0002b888
   245c8:	0002b868 	.word	0x0002b868
   245cc:	0002b848 	.word	0x0002b848

000245d0 <_lseek_r>:
   245d0:	b538      	push	{r3, r4, r5, lr}
   245d2:	4604      	mov	r4, r0
   245d4:	4d06      	ldr	r5, [pc, #24]	; (245f0 <_lseek_r+0x20>)
   245d6:	4608      	mov	r0, r1
   245d8:	4611      	mov	r1, r2
   245da:	2200      	movs	r2, #0
   245dc:	602a      	str	r2, [r5, #0]
   245de:	461a      	mov	r2, r3
   245e0:	f001 fd1e 	bl	26020 <_lseek>
   245e4:	1c43      	adds	r3, r0, #1
   245e6:	d102      	bne.n	245ee <_lseek_r+0x1e>
   245e8:	682b      	ldr	r3, [r5, #0]
   245ea:	b103      	cbz	r3, 245ee <_lseek_r+0x1e>
   245ec:	6023      	str	r3, [r4, #0]
   245ee:	bd38      	pop	{r3, r4, r5, pc}
   245f0:	20021568 	.word	0x20021568

000245f4 <__smakebuf_r>:
   245f4:	898b      	ldrh	r3, [r1, #12]
   245f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   245f8:	079d      	lsls	r5, r3, #30
   245fa:	4606      	mov	r6, r0
   245fc:	460c      	mov	r4, r1
   245fe:	d507      	bpl.n	24610 <__smakebuf_r+0x1c>
   24600:	f104 0347 	add.w	r3, r4, #71	; 0x47
   24604:	6023      	str	r3, [r4, #0]
   24606:	6123      	str	r3, [r4, #16]
   24608:	2301      	movs	r3, #1
   2460a:	6163      	str	r3, [r4, #20]
   2460c:	b003      	add	sp, #12
   2460e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24610:	ab01      	add	r3, sp, #4
   24612:	466a      	mov	r2, sp
   24614:	f005 fdd5 	bl	2a1c2 <__swhatbuf_r>
   24618:	9f00      	ldr	r7, [sp, #0]
   2461a:	4605      	mov	r5, r0
   2461c:	4630      	mov	r0, r6
   2461e:	4639      	mov	r1, r7
   24620:	f7fe fd56 	bl	230d0 <_malloc_r>
   24624:	b948      	cbnz	r0, 2463a <__smakebuf_r+0x46>
   24626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2462a:	059a      	lsls	r2, r3, #22
   2462c:	d4ee      	bmi.n	2460c <__smakebuf_r+0x18>
   2462e:	f023 0303 	bic.w	r3, r3, #3
   24632:	f043 0302 	orr.w	r3, r3, #2
   24636:	81a3      	strh	r3, [r4, #12]
   24638:	e7e2      	b.n	24600 <__smakebuf_r+0xc>
   2463a:	4b0d      	ldr	r3, [pc, #52]	; (24670 <__smakebuf_r+0x7c>)
   2463c:	62b3      	str	r3, [r6, #40]	; 0x28
   2463e:	89a3      	ldrh	r3, [r4, #12]
   24640:	6020      	str	r0, [r4, #0]
   24642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24646:	81a3      	strh	r3, [r4, #12]
   24648:	9b01      	ldr	r3, [sp, #4]
   2464a:	e9c4 0704 	strd	r0, r7, [r4, #16]
   2464e:	b15b      	cbz	r3, 24668 <__smakebuf_r+0x74>
   24650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24654:	4630      	mov	r0, r6
   24656:	f000 f84b 	bl	246f0 <_isatty_r>
   2465a:	b128      	cbz	r0, 24668 <__smakebuf_r+0x74>
   2465c:	89a3      	ldrh	r3, [r4, #12]
   2465e:	f023 0303 	bic.w	r3, r3, #3
   24662:	f043 0301 	orr.w	r3, r3, #1
   24666:	81a3      	strh	r3, [r4, #12]
   24668:	89a3      	ldrh	r3, [r4, #12]
   2466a:	431d      	orrs	r5, r3
   2466c:	81a5      	strh	r5, [r4, #12]
   2466e:	e7cd      	b.n	2460c <__smakebuf_r+0x18>
   24670:	00023989 	.word	0x00023989

00024674 <_read_r>:
   24674:	b538      	push	{r3, r4, r5, lr}
   24676:	4604      	mov	r4, r0
   24678:	4d06      	ldr	r5, [pc, #24]	; (24694 <_read_r+0x20>)
   2467a:	4608      	mov	r0, r1
   2467c:	4611      	mov	r1, r2
   2467e:	2200      	movs	r2, #0
   24680:	602a      	str	r2, [r5, #0]
   24682:	461a      	mov	r2, r3
   24684:	f001 fcc1 	bl	2600a <_read>
   24688:	1c43      	adds	r3, r0, #1
   2468a:	d102      	bne.n	24692 <_read_r+0x1e>
   2468c:	682b      	ldr	r3, [r5, #0]
   2468e:	b103      	cbz	r3, 24692 <_read_r+0x1e>
   24690:	6023      	str	r3, [r4, #0]
   24692:	bd38      	pop	{r3, r4, r5, pc}
   24694:	20021568 	.word	0x20021568

00024698 <raise>:
   24698:	4b02      	ldr	r3, [pc, #8]	; (246a4 <raise+0xc>)
   2469a:	4601      	mov	r1, r0
   2469c:	6818      	ldr	r0, [r3, #0]
   2469e:	f005 bdc7 	b.w	2a230 <_raise_r>
   246a2:	bf00      	nop
   246a4:	20008744 	.word	0x20008744

000246a8 <_kill_r>:
   246a8:	b538      	push	{r3, r4, r5, lr}
   246aa:	2300      	movs	r3, #0
   246ac:	4d06      	ldr	r5, [pc, #24]	; (246c8 <_kill_r+0x20>)
   246ae:	4604      	mov	r4, r0
   246b0:	4608      	mov	r0, r1
   246b2:	4611      	mov	r1, r2
   246b4:	602b      	str	r3, [r5, #0]
   246b6:	f001 fcba 	bl	2602e <_kill>
   246ba:	1c43      	adds	r3, r0, #1
   246bc:	d102      	bne.n	246c4 <_kill_r+0x1c>
   246be:	682b      	ldr	r3, [r5, #0]
   246c0:	b103      	cbz	r3, 246c4 <_kill_r+0x1c>
   246c2:	6023      	str	r3, [r4, #0]
   246c4:	bd38      	pop	{r3, r4, r5, pc}
   246c6:	bf00      	nop
   246c8:	20021568 	.word	0x20021568

000246cc <_fstat_r>:
   246cc:	b538      	push	{r3, r4, r5, lr}
   246ce:	2300      	movs	r3, #0
   246d0:	4d06      	ldr	r5, [pc, #24]	; (246ec <_fstat_r+0x20>)
   246d2:	4604      	mov	r4, r0
   246d4:	4608      	mov	r0, r1
   246d6:	4611      	mov	r1, r2
   246d8:	602b      	str	r3, [r5, #0]
   246da:	f001 fcac 	bl	26036 <_fstat>
   246de:	1c43      	adds	r3, r0, #1
   246e0:	d102      	bne.n	246e8 <_fstat_r+0x1c>
   246e2:	682b      	ldr	r3, [r5, #0]
   246e4:	b103      	cbz	r3, 246e8 <_fstat_r+0x1c>
   246e6:	6023      	str	r3, [r4, #0]
   246e8:	bd38      	pop	{r3, r4, r5, pc}
   246ea:	bf00      	nop
   246ec:	20021568 	.word	0x20021568

000246f0 <_isatty_r>:
   246f0:	b538      	push	{r3, r4, r5, lr}
   246f2:	2300      	movs	r3, #0
   246f4:	4d05      	ldr	r5, [pc, #20]	; (2470c <_isatty_r+0x1c>)
   246f6:	4604      	mov	r4, r0
   246f8:	4608      	mov	r0, r1
   246fa:	602b      	str	r3, [r5, #0]
   246fc:	f001 fc92 	bl	26024 <_isatty>
   24700:	1c43      	adds	r3, r0, #1
   24702:	d102      	bne.n	2470a <_isatty_r+0x1a>
   24704:	682b      	ldr	r3, [r5, #0]
   24706:	b103      	cbz	r3, 2470a <_isatty_r+0x1a>
   24708:	6023      	str	r3, [r4, #0]
   2470a:	bd38      	pop	{r3, r4, r5, pc}
   2470c:	20021568 	.word	0x20021568

00024710 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   24710:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   24712:	f7fd fb3d 	bl	21d90 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   24716:	f7fe fc25 	bl	22f64 <k_thread_system_pool_assign>
    return 0;
}
   2471a:	2000      	movs	r0, #0
   2471c:	bd08      	pop	{r3, pc}

0002471e <k_uptime_get>:
{
   2471e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   24720:	f005 f834 	bl	2978c <z_impl_k_uptime_ticks>
   24724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24728:	fba0 0302 	umull	r0, r3, r0, r2
   2472c:	fb02 3101 	mla	r1, r2, r1, r3
   24730:	0bc0      	lsrs	r0, r0, #15
}
   24732:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   24736:	0bc9      	lsrs	r1, r1, #15
   24738:	bd08      	pop	{r3, pc}

0002473a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2473a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2473c:	ab0b      	add	r3, sp, #44	; 0x2c
   2473e:	9305      	str	r3, [sp, #20]
   24740:	9303      	str	r3, [sp, #12]
   24742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24744:	9302      	str	r3, [sp, #8]
   24746:	2300      	movs	r3, #0
   24748:	4618      	mov	r0, r3
   2474a:	e9cd 3300 	strd	r3, r3, [sp]
   2474e:	f7e9 fe91 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   24752:	b007      	add	sp, #28
   24754:	f85d fb04 	ldr.w	pc, [sp], #4

00024758 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   24758:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   2475a:	6883      	ldr	r3, [r0, #8]
   2475c:	2282      	movs	r2, #130	; 0x82
   2475e:	68dc      	ldr	r4, [r3, #12]
   24760:	2332      	movs	r3, #50	; 0x32
   24762:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   24764:	bc10      	pop	{r4}
   24766:	4760      	bx	ip

00024768 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   24768:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   2476a:	6883      	ldr	r3, [r0, #8]
   2476c:	685c      	ldr	r4, [r3, #4]
   2476e:	f04f 33ff 	mov.w	r3, #4294967295
   24772:	46a4      	mov	ip, r4
}
   24774:	bc10      	pop	{r4}
   24776:	4760      	bx	ip

00024778 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   24778:	f7fb bc26 	b.w	1ffc8 <z_impl_k_sem_take>

0002477c <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2477c:	6883      	ldr	r3, [r0, #8]
   2477e:	69db      	ldr	r3, [r3, #28]
   24780:	b10b      	cbz	r3, 24786 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   24782:	2201      	movs	r2, #1
   24784:	4718      	bx	r3
}
   24786:	4770      	bx	lr

00024788 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   24788:	f7fd bace 	b.w	21d28 <z_impl_k_sleep>

0002478c <blink>:
{
   2478c:	b570      	push	{r4, r5, r6, lr}
   2478e:	4604      	mov	r4, r0
   24790:	460d      	mov	r5, r1
	while (i < times)
   24792:	2600      	movs	r6, #0
   24794:	42ae      	cmp	r6, r5
   24796:	d100      	bne.n	2479a <blink+0xe>
}
   24798:	bd70      	pop	{r4, r5, r6, pc}
		gpio_pin_set_dt(led, ON);
   2479a:	2101      	movs	r1, #1
   2479c:	4620      	mov	r0, r4
   2479e:	f7e6 fb93 	bl	aec8 <gpio_pin_set_dt.isra.0>
		gpio_pin_set_dt(led, OFF);
   247a2:	2100      	movs	r1, #0
   247a4:	4620      	mov	r0, r4
   247a6:	f7e6 fb8f 	bl	aec8 <gpio_pin_set_dt.isra.0>
		i++;
   247aa:	3601      	adds	r6, #1
   247ac:	e7f2      	b.n	24794 <blink+0x8>

000247ae <send_protobuf>:
{
   247ae:	b510      	push	{r4, lr}
   247b0:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
	buf_proto = send_array_dd_v0();
   247b4:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   247b8:	4620      	mov	r0, r4
   247ba:	f7e7 fc45 	bl	c048 <send_array_dd_v0>
	send_bluetooth(buf_proto);
   247be:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   247c2:	f240 72cc 	movw	r2, #1996	; 0x7cc
   247c6:	4668      	mov	r0, sp
   247c8:	f005 f8eb 	bl	299a2 <memcpy>
   247cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   247d0:	f7e6 fffc 	bl	b7cc <send_bluetooth>
}
   247d4:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   247d8:	bd10      	pop	{r4, pc}

000247da <error>:
{
   247da:	b508      	push	{r3, lr}
	turn_off_all_leds();
   247dc:	f7e7 f956 	bl	ba8c <turn_off_all_leds>
		k_sleep(K_MSEC(1000));
   247e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   247e4:	2100      	movs	r1, #0
   247e6:	f7ff ffcf 	bl	24788 <k_sleep.isra.0>
	while (true)
   247ea:	e7f9      	b.n	247e0 <error+0x6>

000247ec <parse_comma_delimited_str>:
		printf("Field %02d: [%s]\r\n",i,fields[i]);
	}
}

int parse_comma_delimited_str(char *string, char **fields, int max_fields)
{
   247ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   247ee:	460d      	mov	r5, r1
   247f0:	4616      	mov	r6, r2
	int i = 0;
	fields[i++] = string;

	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   247f2:	2401      	movs	r4, #1
		*string = '\0';
   247f4:	2700      	movs	r7, #0
	fields[i++] = string;
   247f6:	6008      	str	r0, [r1, #0]
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   247f8:	42b4      	cmp	r4, r6
   247fa:	da03      	bge.n	24804 <parse_comma_delimited_str+0x18>
   247fc:	212c      	movs	r1, #44	; 0x2c
   247fe:	f005 fa32 	bl	29c66 <strchr>
   24802:	b908      	cbnz	r0, 24808 <parse_comma_delimited_str+0x1c>
		fields[i++] = ++string;
	}

	return --i;
   24804:	1e60      	subs	r0, r4, #1
}
   24806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*string = '\0';
   24808:	f800 7b01 	strb.w	r7, [r0], #1
		fields[i++] = ++string;
   2480c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
   24810:	3401      	adds	r4, #1
   24812:	e7f1      	b.n	247f8 <parse_comma_delimited_str+0xc>

00024814 <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   24814:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   24816:	6806      	ldr	r6, [r0, #0]
   24818:	8902      	ldrh	r2, [r0, #8]
   2481a:	8a33      	ldrh	r3, [r6, #16]
   2481c:	429a      	cmp	r2, r3
   2481e:	d271      	bcs.n	24904 <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   24820:	6831      	ldr	r1, [r6, #0]
   24822:	8942      	ldrh	r2, [r0, #10]
   24824:	0093      	lsls	r3, r2, #2
   24826:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   2482a:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   2482e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   24832:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   24834:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   24836:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   2483a:	d01f      	beq.n	2487c <load_descriptor_values+0x68>
   2483c:	2902      	cmp	r1, #2
   2483e:	d02a      	beq.n	24896 <load_descriptor_values+0x82>
   24840:	2900      	cmp	r1, #0
   24842:	d135      	bne.n	248b0 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   24844:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   24848:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   2484c:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   24850:	0f12      	lsrs	r2, r2, #28
   24852:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   24854:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   24856:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   2485a:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   2485c:	2a00      	cmp	r2, #0
   2485e:	d134      	bne.n	248ca <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   24860:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   24862:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   24864:	f004 040e 	and.w	r4, r4, #14
   24868:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   2486a:	bf11      	iteee	ne
   2486c:	2300      	movne	r3, #0
   2486e:	89c2      	ldrheq	r2, [r0, #14]
   24870:	6873      	ldreq	r3, [r6, #4]
   24872:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   24876:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   24878:	2001      	movs	r0, #1
}
   2487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2487c:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   2487e:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   24882:	4419      	add	r1, r3
   24884:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   24886:	0f0b      	lsrs	r3, r1, #28
   24888:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   2488c:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   2488e:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   24890:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   24894:	e7dd      	b.n	24852 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   24896:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   24898:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2489c:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   2489e:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   248a2:	0a1a      	lsrs	r2, r3, #8
   248a4:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   248a8:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   248aa:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   248ac:	898a      	ldrh	r2, [r1, #12]
            break;
   248ae:	e7d0      	b.n	24852 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   248b0:	6832      	ldr	r2, [r6, #0]
   248b2:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   248b4:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   248b8:	0a19      	lsrs	r1, r3, #8
   248ba:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   248be:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   248c2:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   248c4:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   248c6:	b25b      	sxtb	r3, r3
            break;
   248c8:	e7c3      	b.n	24852 <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   248ca:	443a      	add	r2, r7
   248cc:	6182      	str	r2, [r0, #24]
        if (size_offset)
   248ce:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   248d2:	b123      	cbz	r3, 248de <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   248d4:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   248d6:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   248d8:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   248da:	d109      	bne.n	248f0 <load_descriptor_values+0xdc>
   248dc:	e00f      	b.n	248fe <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   248de:	f004 0530 	and.w	r5, r4, #48	; 0x30
   248e2:	2d20      	cmp	r5, #32
   248e4:	d1f7      	bne.n	248d6 <load_descriptor_values+0xc2>
   248e6:	2c3f      	cmp	r4, #63	; 0x3f
   248e8:	d804      	bhi.n	248f4 <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   248ea:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   248ee:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   248f0:	61c2      	str	r2, [r0, #28]
   248f2:	e7b7      	b.n	24864 <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   248f4:	2980      	cmp	r1, #128	; 0x80
   248f6:	d1fa      	bne.n	248ee <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   248f8:	f100 0314 	add.w	r3, r0, #20
   248fc:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   248fe:	6813      	ldr	r3, [r2, #0]
   24900:	61c3      	str	r3, [r0, #28]
   24902:	e7af      	b.n	24864 <load_descriptor_values+0x50>
        return false;
   24904:	2000      	movs	r0, #0
   24906:	e7b8      	b.n	2487a <load_descriptor_values+0x66>

00024908 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   24908:	8903      	ldrh	r3, [r0, #8]
{
   2490a:	b510      	push	{r4, lr}
    iter->index++;
   2490c:	3301      	adds	r3, #1
   2490e:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   24910:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   24912:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   24914:	8a0a      	ldrh	r2, [r1, #16]
   24916:	429a      	cmp	r2, r3
   24918:	d803      	bhi.n	24922 <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   2491a:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   2491c:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   24920:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   24922:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   24924:	680b      	ldr	r3, [r1, #0]
   24926:	8942      	ldrh	r2, [r0, #10]
   24928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   2492c:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2492e:	f001 0103 	and.w	r1, r1, #3
   24932:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   24936:	440a      	add	r2, r1
   24938:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   2493a:	8982      	ldrh	r2, [r0, #12]
   2493c:	f003 0130 	and.w	r1, r3, #48	; 0x30
   24940:	2900      	cmp	r1, #0
   24942:	bf08      	it	eq
   24944:	3201      	addeq	r2, #1
   24946:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   24948:	89c2      	ldrh	r2, [r0, #14]
   2494a:	f003 030e 	and.w	r3, r3, #14
   2494e:	2b08      	cmp	r3, #8
   24950:	bf08      	it	eq
   24952:	3201      	addeq	r2, #1
   24954:	81c2      	strh	r2, [r0, #14]
}
   24956:	e7e3      	b.n	24920 <advance_iterator+0x18>

00024958 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   24958:	b570      	push	{r4, r5, r6, lr}
   2495a:	4604      	mov	r4, r0
   2495c:	460e      	mov	r6, r1
   2495e:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   24960:	2100      	movs	r1, #0
   24962:	2220      	movs	r2, #32
   24964:	3008      	adds	r0, #8
   24966:	f005 f856 	bl	29a16 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   2496a:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   2496e:	4620      	mov	r0, r4
}
   24970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   24974:	f7ff bf4e 	b.w	24814 <load_descriptor_values>

00024978 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   24978:	b538      	push	{r3, r4, r5, lr}
   2497a:	460c      	mov	r4, r1
   2497c:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   2497e:	680b      	ldr	r3, [r1, #0]
   24980:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   24982:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   24984:	681b      	ldr	r3, [r3, #0]
   24986:	0a1b      	lsrs	r3, r3, #8
   24988:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2498c:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2498e:	bf14      	ite	ne
   24990:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   24992:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   24994:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   24996:	f7ff ffdf 	bl	24958 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   2499a:	622c      	str	r4, [r5, #32]
    return status;
}
   2499c:	bd38      	pop	{r3, r4, r5, pc}

0002499e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   2499e:	b510      	push	{r4, lr}
   249a0:	4604      	mov	r4, r0
    advance_iterator(iter);
   249a2:	f7ff ffb1 	bl	24908 <advance_iterator>
    (void)load_descriptor_values(iter);
   249a6:	f7ff ff35 	bl	24814 <load_descriptor_values>
    return iter->index != 0;
   249aa:	8920      	ldrh	r0, [r4, #8]
}
   249ac:	3800      	subs	r0, #0
   249ae:	bf18      	it	ne
   249b0:	2001      	movne	r0, #1
   249b2:	bd10      	pop	{r4, pc}

000249b4 <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   249b4:	f7ff bfd0 	b.w	24958 <pb_field_iter_begin>

000249b8 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   249b8:	f7ff bfde 	b.w	24978 <pb_field_iter_begin_extension>

000249bc <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   249bc:	b410      	push	{r4}
   249be:	460b      	mov	r3, r1
   249c0:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   249c2:	8a52      	ldrh	r2, [r2, #18]
   249c4:	2a08      	cmp	r2, #8
   249c6:	d10e      	bne.n	249e6 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   249c8:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   249ca:	b162      	cbz	r2, 249e6 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   249cc:	b128      	cbz	r0, 249da <pb_default_field_callback+0x1e>
   249ce:	6814      	ldr	r4, [r2, #0]
   249d0:	b11c      	cbz	r4, 249da <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   249d2:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   249d4:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   249d6:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   249d8:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   249da:	b123      	cbz	r3, 249e6 <pb_default_field_callback+0x2a>
   249dc:	6814      	ldr	r4, [r2, #0]
   249de:	b114      	cbz	r4, 249e6 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   249e0:	4618      	mov	r0, r3
   249e2:	3204      	adds	r2, #4
   249e4:	e7f6      	b.n	249d4 <pb_default_field_callback+0x18>
}
   249e6:	2001      	movs	r0, #1
   249e8:	bc10      	pop	{r4}
   249ea:	4770      	bx	lr

000249ec <buf_write>:
{
   249ec:	4603      	mov	r3, r0
   249ee:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   249f0:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   249f2:	1884      	adds	r4, r0, r2
   249f4:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   249f6:	f004 ffd4 	bl	299a2 <memcpy>
}
   249fa:	2001      	movs	r0, #1
   249fc:	bd10      	pop	{r4, pc}

000249fe <pb_encode_varint>:
{
   249fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   24a00:	2a80      	cmp	r2, #128	; 0x80
{
   24a02:	b085      	sub	sp, #20
    if (value <= 0x7F)
   24a04:	f173 0100 	sbcs.w	r1, r3, #0
{
   24a08:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   24a0a:	b2d4      	uxtb	r4, r2
   24a0c:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   24a0e:	d206      	bcs.n	24a1e <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   24a10:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   24a12:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   24a16:	f7e7 fcd1 	bl	c3bc <pb_write>
}
   24a1a:	b005      	add	sp, #20
   24a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   24a1e:	09d5      	lsrs	r5, r2, #7
   24a20:	4608      	mov	r0, r1
    size_t i = 0;
   24a22:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   24a24:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   24a28:	ea53 0c05 	orrs.w	ip, r3, r5
   24a2c:	4617      	mov	r7, r2
        buffer[i++] = byte;
   24a2e:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   24a32:	d108      	bne.n	24a46 <pb_encode_varint+0x48>
   24a34:	463a      	mov	r2, r7
    buffer[i++] = byte;
   24a36:	f102 0310 	add.w	r3, r2, #16
   24a3a:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   24a3c:	4630      	mov	r0, r6
    buffer[i++] = byte;
   24a3e:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   24a42:	3201      	adds	r2, #1
   24a44:	e7e7      	b.n	24a16 <pb_encode_varint+0x18>
        byte |= 0x80;
   24a46:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   24a4a:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   24a4c:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   24a50:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   24a54:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   24a58:	d1e6      	bne.n	24a28 <pb_encode_varint+0x2a>
    if (high)
   24a5a:	2b00      	cmp	r3, #0
   24a5c:	d0eb      	beq.n	24a36 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   24a5e:	0118      	lsls	r0, r3, #4
   24a60:	f000 0070 	and.w	r0, r0, #112	; 0x70
   24a64:	4304      	orrs	r4, r0
        high >>= 3;
   24a66:	08db      	lsrs	r3, r3, #3
        while (high)
   24a68:	2b00      	cmp	r3, #0
   24a6a:	d0e4      	beq.n	24a36 <pb_encode_varint+0x38>
            byte |= 0x80;
   24a6c:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   24a70:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   24a72:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   24a76:	3201      	adds	r2, #1
   24a78:	09db      	lsrs	r3, r3, #7
   24a7a:	e7f5      	b.n	24a68 <pb_encode_varint+0x6a>

00024a7c <pb_encode_svarint>:
    if (value < 0)
   24a7c:	1892      	adds	r2, r2, r2
   24a7e:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   24a82:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   24a86:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   24a8a:	f7ff bfb8 	b.w	249fe <pb_encode_varint>

00024a8e <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   24a8e:	2204      	movs	r2, #4
   24a90:	f7e7 bc94 	b.w	c3bc <pb_write>

00024a94 <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   24a94:	2208      	movs	r2, #8
   24a96:	f7e7 bc91 	b.w	c3bc <pb_write>

00024a9a <pb_encode_tag>:
{
   24a9a:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   24a9c:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   24aa0:	0f5b      	lsrs	r3, r3, #29
   24aa2:	f7ff bfac 	b.w	249fe <pb_encode_varint>

00024aa6 <pb_encode_string>:
{
   24aa6:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   24aa8:	2300      	movs	r3, #0
{
   24aaa:	4604      	mov	r4, r0
   24aac:	460d      	mov	r5, r1
   24aae:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   24ab0:	f7ff ffa5 	bl	249fe <pb_encode_varint>
   24ab4:	b130      	cbz	r0, 24ac4 <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   24ab6:	4632      	mov	r2, r6
   24ab8:	4629      	mov	r1, r5
   24aba:	4620      	mov	r0, r4
}
   24abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   24ac0:	f7e7 bc7c 	b.w	c3bc <pb_write>
}
   24ac4:	bd70      	pop	{r4, r5, r6, pc}

00024ac6 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   24ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24aca:	4606      	mov	r6, r0
   24acc:	460d      	mov	r5, r1
   24ace:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   24ad0:	4698      	mov	r8, r3
   24ad2:	b32b      	cbz	r3, 24b20 <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   24ad4:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   24ad8:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   24adc:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   24ae0:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   24ae2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   24ae4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   24ae8:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   24aec:	441c      	add	r4, r3
   24aee:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   24af0:	45ca      	cmp	sl, r9
   24af2:	d309      	bcc.n	24b08 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   24af4:	4639      	mov	r1, r7
   24af6:	4630      	mov	r0, r6
   24af8:	46ac      	mov	ip, r5
   24afa:	f8d8 2004 	ldr.w	r2, [r8, #4]
   24afe:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   24b02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   24b06:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   24b08:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   24b0c:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   24b10:	4620      	mov	r0, r4
		*ps = s;
   24b12:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   24b16:	f7e4 fc23 	bl	9360 <strlen>
   24b1a:	3001      	adds	r0, #1
   24b1c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   24b1e:	e7e7      	b.n	24af0 <cbpprintf_external+0x2a>
}
   24b20:	f06f 0015 	mvn.w	r0, #21
   24b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024b28 <arch_printk_char_out>:
}
   24b28:	2000      	movs	r0, #0
   24b2a:	4770      	bx	lr

00024b2c <str_out>:
{
   24b2c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24b2e:	688a      	ldr	r2, [r1, #8]
   24b30:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   24b32:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24b34:	b114      	cbz	r4, 24b3c <str_out+0x10>
   24b36:	684b      	ldr	r3, [r1, #4]
   24b38:	4293      	cmp	r3, r2
   24b3a:	dc01      	bgt.n	24b40 <str_out+0x14>
		ctx->count++;
   24b3c:	608d      	str	r5, [r1, #8]
}
   24b3e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   24b40:	3b01      	subs	r3, #1
   24b42:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   24b44:	bf08      	it	eq
   24b46:	2200      	moveq	r2, #0
   24b48:	608d      	str	r5, [r1, #8]
   24b4a:	bf0c      	ite	eq
   24b4c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   24b4e:	54a0      	strbne	r0, [r4, r2]
   24b50:	e7f5      	b.n	24b3e <str_out+0x12>

00024b52 <printk>:
{
   24b52:	b40f      	push	{r0, r1, r2, r3}
   24b54:	b507      	push	{r0, r1, r2, lr}
   24b56:	a904      	add	r1, sp, #16
   24b58:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   24b5c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   24b5e:	f7e8 f905 	bl	cd6c <vprintk>
}
   24b62:	b003      	add	sp, #12
   24b64:	f85d eb04 	ldr.w	lr, [sp], #4
   24b68:	b004      	add	sp, #16
   24b6a:	4770      	bx	lr

00024b6c <snprintk>:
{
   24b6c:	b40c      	push	{r2, r3}
   24b6e:	b507      	push	{r0, r1, r2, lr}
   24b70:	ab04      	add	r3, sp, #16
   24b72:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   24b76:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   24b78:	f7e8 f906 	bl	cd88 <vsnprintk>
}
   24b7c:	b003      	add	sp, #12
   24b7e:	f85d eb04 	ldr.w	lr, [sp], #4
   24b82:	b002      	add	sp, #8
   24b84:	4770      	bx	lr

00024b86 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   24b86:	4604      	mov	r4, r0
   24b88:	b508      	push	{r3, lr}
   24b8a:	4608      	mov	r0, r1
   24b8c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   24b8e:	461a      	mov	r2, r3
   24b90:	47a0      	blx	r4
	return z_impl_z_current_get();
   24b92:	f7fd f8fd 	bl	21d90 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   24b96:	f7ec f835 	bl	10c04 <z_impl_k_thread_abort>

00024b9a <chunk_size>:
		return ((uint16_t *)cmem)[f];
   24b9a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   24b9e:	8840      	ldrh	r0, [r0, #2]
}
   24ba0:	0840      	lsrs	r0, r0, #1
   24ba2:	4770      	bx	lr

00024ba4 <free_list_add>:
{
   24ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ba6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   24ba8:	f7ff fff7 	bl	24b9a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   24bac:	fab0 f080 	clz	r0, r0
   24bb0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   24bb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   24bb8:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   24bbc:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   24bbe:	1d17      	adds	r7, r2, #4
{
   24bc0:	460c      	mov	r4, r1
   24bc2:	3206      	adds	r2, #6
   24bc4:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   24bc6:	b956      	cbnz	r6, 24bde <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   24bc8:	2101      	movs	r1, #1
   24bca:	fa01 f000 	lsl.w	r0, r1, r0
   24bce:	68d9      	ldr	r1, [r3, #12]
   24bd0:	4301      	orrs	r1, r0
   24bd2:	60d9      	str	r1, [r3, #12]
		b->next = c;
   24bd4:	f8cc 4010 	str.w	r4, [ip, #16]
   24bd8:	53dd      	strh	r5, [r3, r7]
   24bda:	529d      	strh	r5, [r3, r2]
}
   24bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   24bde:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   24be0:	3104      	adds	r1, #4
   24be2:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   24be4:	53d8      	strh	r0, [r3, r7]
   24be6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   24bea:	529e      	strh	r6, [r3, r2]
   24bec:	80c5      	strh	r5, [r0, #6]
   24bee:	525d      	strh	r5, [r3, r1]
   24bf0:	e7f4      	b.n	24bdc <free_list_add+0x38>

00024bf2 <free_list_remove_bidx>:
{
   24bf2:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   24bf4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   24bf8:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   24bfa:	4299      	cmp	r1, r3
   24bfc:	f102 0104 	add.w	r1, r2, #4
   24c00:	d10a      	bne.n	24c18 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   24c02:	2301      	movs	r3, #1
   24c04:	fa03 f202 	lsl.w	r2, r3, r2
   24c08:	68c3      	ldr	r3, [r0, #12]
   24c0a:	ea23 0302 	bic.w	r3, r3, r2
   24c0e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   24c10:	2300      	movs	r3, #0
   24c12:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   24c16:	bd10      	pop	{r4, pc}
   24c18:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   24c1a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   24c1e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   24c22:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   24c26:	80cb      	strh	r3, [r1, #6]
   24c28:	8082      	strh	r2, [r0, #4]
}
   24c2a:	e7f4      	b.n	24c16 <free_list_remove_bidx+0x24>

00024c2c <free_list_remove>:
{
   24c2c:	b508      	push	{r3, lr}
   24c2e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   24c30:	f7ff ffb3 	bl	24b9a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   24c34:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   24c38:	4618      	mov	r0, r3
}
   24c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   24c3e:	f1c2 021f 	rsb	r2, r2, #31
   24c42:	f7ff bfd6 	b.w	24bf2 <free_list_remove_bidx>

00024c46 <alloc_chunk>:
{
   24c46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24c4a:	fab1 f581 	clz	r5, r1
   24c4e:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   24c52:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   24c56:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   24c5a:	4603      	mov	r3, r0
   24c5c:	460e      	mov	r6, r1
	if (b->next) {
   24c5e:	b1c2      	cbz	r2, 24c92 <alloc_chunk+0x4c>
   24c60:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   24c62:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   24c66:	4618      	mov	r0, r3
   24c68:	4621      	mov	r1, r4
   24c6a:	f7ff ff96 	bl	24b9a <chunk_size>
   24c6e:	42b0      	cmp	r0, r6
   24c70:	d306      	bcc.n	24c80 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   24c72:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   24c74:	4618      	mov	r0, r3
   24c76:	f7ff ffbc 	bl	24bf2 <free_list_remove_bidx>
}
   24c7a:	4620      	mov	r0, r4
   24c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   24c80:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   24c84:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   24c86:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   24c88:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   24c8c:	d001      	beq.n	24c92 <alloc_chunk+0x4c>
   24c8e:	4282      	cmp	r2, r0
   24c90:	d1e7      	bne.n	24c62 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   24c92:	f04f 34ff 	mov.w	r4, #4294967295
   24c96:	f1c5 0220 	rsb	r2, r5, #32
   24c9a:	4094      	lsls	r4, r2
   24c9c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   24c9e:	4014      	ands	r4, r2
   24ca0:	d0eb      	beq.n	24c7a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   24ca2:	fa94 f2a4 	rbit	r2, r4
   24ca6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   24caa:	1d11      	adds	r1, r2, #4
   24cac:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   24cb0:	4621      	mov	r1, r4
   24cb2:	e7df      	b.n	24c74 <alloc_chunk+0x2e>

00024cb4 <merge_chunks>:
{
   24cb4:	b538      	push	{r3, r4, r5, lr}
   24cb6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24cb8:	f7ff ff6f 	bl	24b9a <chunk_size>
{
   24cbc:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24cbe:	4604      	mov	r4, r0
   24cc0:	4611      	mov	r1, r2
   24cc2:	4618      	mov	r0, r3
   24cc4:	f7ff ff69 	bl	24b9a <chunk_size>
   24cc8:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24cca:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   24ccc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   24cd0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   24cd2:	4618      	mov	r0, r3
   24cd4:	f7ff ff61 	bl	24b9a <chunk_size>
	void *cmem = &buf[c];
   24cd8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   24cda:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   24cde:	bd38      	pop	{r3, r4, r5, pc}

00024ce0 <split_chunks>:
{
   24ce0:	b538      	push	{r3, r4, r5, lr}
   24ce2:	460c      	mov	r4, r1
   24ce4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   24ce6:	f7ff ff58 	bl	24b9a <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   24cea:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   24cec:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   24cee:	4405      	add	r5, r0
   24cf0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24cf4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   24cf6:	8060      	strh	r0, [r4, #2]
   24cf8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24cfc:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   24cfe:	8044      	strh	r4, [r0, #2]
   24d00:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   24d04:	4618      	mov	r0, r3
   24d06:	4611      	mov	r1, r2
   24d08:	f7ff ff47 	bl	24b9a <chunk_size>
	void *cmem = &buf[c];
   24d0c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   24d0e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   24d12:	bd38      	pop	{r3, r4, r5, pc}

00024d14 <free_chunk>:
{
   24d14:	b538      	push	{r3, r4, r5, lr}
   24d16:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   24d18:	f7ff ff3f 	bl	24b9a <chunk_size>
   24d1c:	460c      	mov	r4, r1
   24d1e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   24d20:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24d24:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   24d26:	07da      	lsls	r2, r3, #31
   24d28:	d40a      	bmi.n	24d40 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   24d2a:	4628      	mov	r0, r5
   24d2c:	f7ff ff7e 	bl	24c2c <free_list_remove>
	return c + chunk_size(h, c);
   24d30:	4621      	mov	r1, r4
   24d32:	4628      	mov	r0, r5
   24d34:	f7ff ff31 	bl	24b9a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24d38:	1822      	adds	r2, r4, r0
   24d3a:	4628      	mov	r0, r5
   24d3c:	f7ff ffba 	bl	24cb4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   24d40:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24d44:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   24d46:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24d4a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   24d4c:	07db      	lsls	r3, r3, #31
   24d4e:	d40c      	bmi.n	24d6a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   24d50:	4628      	mov	r0, r5
   24d52:	f7ff ff6b 	bl	24c2c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   24d56:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   24d5a:	4622      	mov	r2, r4
   24d5c:	1a61      	subs	r1, r4, r1
   24d5e:	4628      	mov	r0, r5
   24d60:	f7ff ffa8 	bl	24cb4 <merge_chunks>
   24d64:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24d68:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   24d6a:	4621      	mov	r1, r4
   24d6c:	4628      	mov	r0, r5
}
   24d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   24d72:	f7ff bf17 	b.w	24ba4 <free_list_add>

00024d76 <sys_heap_alloc>:
{
   24d76:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   24d78:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   24d7a:	b909      	cbnz	r1, 24d80 <sys_heap_alloc+0xa>
		return NULL;
   24d7c:	2000      	movs	r0, #0
}
   24d7e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   24d80:	68ab      	ldr	r3, [r5, #8]
   24d82:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   24d86:	d9f9      	bls.n	24d7c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24d88:	310b      	adds	r1, #11
   24d8a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   24d8c:	4621      	mov	r1, r4
   24d8e:	4628      	mov	r0, r5
   24d90:	f7ff ff59 	bl	24c46 <alloc_chunk>
	if (c == 0U) {
   24d94:	4606      	mov	r6, r0
   24d96:	2800      	cmp	r0, #0
   24d98:	d0f0      	beq.n	24d7c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   24d9a:	4601      	mov	r1, r0
   24d9c:	4628      	mov	r0, r5
   24d9e:	f7ff fefc 	bl	24b9a <chunk_size>
   24da2:	42a0      	cmp	r0, r4
   24da4:	d907      	bls.n	24db6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   24da6:	4628      	mov	r0, r5
   24da8:	1932      	adds	r2, r6, r4
   24daa:	f7ff ff99 	bl	24ce0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   24dae:	4611      	mov	r1, r2
   24db0:	4628      	mov	r0, r5
   24db2:	f7ff fef7 	bl	24ba4 <free_list_add>
	void *cmem = &buf[c];
   24db6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   24dba:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24dbc:	8853      	ldrh	r3, [r2, #2]
   24dbe:	3004      	adds	r0, #4
   24dc0:	f043 0301 	orr.w	r3, r3, #1
   24dc4:	8053      	strh	r3, [r2, #2]
	return mem;
   24dc6:	e7da      	b.n	24d7e <sys_heap_alloc+0x8>

00024dc8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24dc8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   24dca:	f013 0307 	ands.w	r3, r3, #7
   24dce:	d105      	bne.n	24ddc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24dd0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   24dd2:	2b00      	cmp	r3, #0
   24dd4:	bf0c      	ite	eq
   24dd6:	2000      	moveq	r0, #0
   24dd8:	2003      	movne	r0, #3
   24dda:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24ddc:	2b02      	cmp	r3, #2
   24dde:	d105      	bne.n	24dec <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24de0:	8bc0      	ldrh	r0, [r0, #30]
   24de2:	fab0 f080 	clz	r0, r0
   24de6:	0940      	lsrs	r0, r0, #5
   24de8:	0080      	lsls	r0, r0, #2
   24dea:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24dec:	2b01      	cmp	r3, #1
   24dee:	d105      	bne.n	24dfc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24df0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   24df2:	2b00      	cmp	r3, #0
   24df4:	bf0c      	ite	eq
   24df6:	2000      	moveq	r0, #0
   24df8:	2005      	movne	r0, #5
   24dfa:	4770      	bx	lr
	int evt = EVT_NOP;
   24dfc:	2000      	movs	r0, #0
}
   24dfe:	4770      	bx	lr

00024e00 <validate_args>:
{
   24e00:	b510      	push	{r4, lr}
   24e02:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   24e04:	b100      	cbz	r0, 24e08 <validate_args+0x8>
   24e06:	b911      	cbnz	r1, 24e0e <validate_args+0xe>
		return -EINVAL;
   24e08:	f06f 0015 	mvn.w	r0, #21
}
   24e0c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   24e0e:	1d08      	adds	r0, r1, #4
   24e10:	f000 f82f 	bl	24e72 <sys_notify_validate>
	if ((rv == 0)
   24e14:	2800      	cmp	r0, #0
   24e16:	d1f9      	bne.n	24e0c <validate_args+0xc>
	    && ((cli->notify.flags
   24e18:	68a3      	ldr	r3, [r4, #8]
   24e1a:	2b03      	cmp	r3, #3
   24e1c:	d9f6      	bls.n	24e0c <validate_args+0xc>
   24e1e:	e7f3      	b.n	24e08 <validate_args+0x8>

00024e20 <notify_one>:
{
   24e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e24:	460d      	mov	r5, r1
   24e26:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24e28:	4619      	mov	r1, r3
   24e2a:	1d28      	adds	r0, r5, #4
{
   24e2c:	4690      	mov	r8, r2
   24e2e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24e30:	f7e8 fbb0 	bl	d594 <sys_notify_finalize>
	if (cb) {
   24e34:	4604      	mov	r4, r0
   24e36:	b138      	cbz	r0, 24e48 <notify_one+0x28>
		cb(mgr, cli, state, res);
   24e38:	4633      	mov	r3, r6
   24e3a:	4642      	mov	r2, r8
   24e3c:	4629      	mov	r1, r5
   24e3e:	4638      	mov	r0, r7
   24e40:	46a4      	mov	ip, r4
}
   24e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   24e46:	4760      	bx	ip
}
   24e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024e4c <onoff_manager_init>:
{
   24e4c:	b538      	push	{r3, r4, r5, lr}
   24e4e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   24e50:	4605      	mov	r5, r0
   24e52:	b158      	cbz	r0, 24e6c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   24e54:	b151      	cbz	r1, 24e6c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   24e56:	680b      	ldr	r3, [r1, #0]
   24e58:	b143      	cbz	r3, 24e6c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   24e5a:	684b      	ldr	r3, [r1, #4]
   24e5c:	b133      	cbz	r3, 24e6c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24e5e:	2220      	movs	r2, #32
   24e60:	2100      	movs	r1, #0
   24e62:	f004 fdd8 	bl	29a16 <memset>
	return 0;
   24e66:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24e68:	612c      	str	r4, [r5, #16]
}
   24e6a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24e6c:	f06f 0015 	mvn.w	r0, #21
   24e70:	e7fb      	b.n	24e6a <onoff_manager_init+0x1e>

00024e72 <sys_notify_validate>:
	if (notify == NULL) {
   24e72:	4603      	mov	r3, r0
   24e74:	b140      	cbz	r0, 24e88 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24e76:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24e78:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   24e7c:	2a02      	cmp	r2, #2
   24e7e:	d006      	beq.n	24e8e <sys_notify_validate+0x1c>
   24e80:	2a03      	cmp	r2, #3
   24e82:	d004      	beq.n	24e8e <sys_notify_validate+0x1c>
   24e84:	2a01      	cmp	r2, #1
   24e86:	d005      	beq.n	24e94 <sys_notify_validate+0x22>
   24e88:	f06f 0015 	mvn.w	r0, #21
}
   24e8c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24e8e:	681a      	ldr	r2, [r3, #0]
   24e90:	2a00      	cmp	r2, #0
   24e92:	d0f9      	beq.n	24e88 <sys_notify_validate+0x16>
		notify->result = 0;
   24e94:	2000      	movs	r0, #0
   24e96:	6098      	str	r0, [r3, #8]
   24e98:	4770      	bx	lr

00024e9a <outs>:
{
   24e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e9e:	4607      	mov	r7, r0
   24ea0:	4688      	mov	r8, r1
   24ea2:	4615      	mov	r5, r2
   24ea4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24ea6:	4614      	mov	r4, r2
   24ea8:	42b4      	cmp	r4, r6
   24eaa:	d305      	bcc.n	24eb8 <outs+0x1e>
   24eac:	b10e      	cbz	r6, 24eb2 <outs+0x18>
	return (int)count;
   24eae:	1b60      	subs	r0, r4, r5
   24eb0:	e008      	b.n	24ec4 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24eb2:	7823      	ldrb	r3, [r4, #0]
   24eb4:	2b00      	cmp	r3, #0
   24eb6:	d0fa      	beq.n	24eae <outs+0x14>
		int rc = out((int)*sp++, ctx);
   24eb8:	4641      	mov	r1, r8
   24eba:	f814 0b01 	ldrb.w	r0, [r4], #1
   24ebe:	47b8      	blx	r7
		if (rc < 0) {
   24ec0:	2800      	cmp	r0, #0
   24ec2:	daf1      	bge.n	24ea8 <outs+0xe>
}
   24ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024ec8 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   24ec8:	4040      	eors	r0, r0
   24eca:	f380 8811 	msr	BASEPRI, r0
   24ece:	f04f 0004 	mov.w	r0, #4
   24ed2:	df02      	svc	2
}
   24ed4:	4770      	bx	lr

00024ed6 <assert_print>:

void assert_print(const char *fmt, ...)
{
   24ed6:	b40f      	push	{r0, r1, r2, r3}
   24ed8:	b507      	push	{r0, r1, r2, lr}
   24eda:	a904      	add	r1, sp, #16
   24edc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   24ee0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   24ee2:	f7e7 ff43 	bl	cd6c <vprintk>

	va_end(ap);
}
   24ee6:	b003      	add	sp, #12
   24ee8:	f85d eb04 	ldr.w	lr, [sp], #4
   24eec:	b004      	add	sp, #16
   24eee:	4770      	bx	lr

00024ef0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 130);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   24ef0:	4770      	bx	lr

00024ef2 <nordicsemi_nrf53_init>:
{
   24ef2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24ef4:	f04f 0320 	mov.w	r3, #32
   24ef8:	f3ef 8511 	mrs	r5, BASEPRI
   24efc:	f383 8812 	msr	BASEPRI_MAX, r3
   24f00:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   24f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   24f08:	2401      	movs	r4, #1
   24f0a:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   24f0c:	4621      	mov	r1, r4
   24f0e:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   24f12:	2021      	movs	r0, #33	; 0x21
   24f14:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   24f18:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   24f1c:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   24f20:	f7e9 f90e 	bl	e140 <soc_secure_gpio_pin_mcu_select>
   24f24:	4621      	mov	r1, r4
   24f26:	2020      	movs	r0, #32
   24f28:	f7e9 f90a 	bl	e140 <soc_secure_gpio_pin_mcu_select>
   24f2c:	4621      	mov	r1, r4
   24f2e:	200b      	movs	r0, #11
   24f30:	f7e9 f906 	bl	e140 <soc_secure_gpio_pin_mcu_select>
   24f34:	4621      	mov	r1, r4
   24f36:	200a      	movs	r0, #10
   24f38:	f7e9 f902 	bl	e140 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   24f3c:	f385 8811 	msr	BASEPRI, r5
   24f40:	f3bf 8f6f 	isb	sy
}
   24f44:	2000      	movs	r0, #0
   24f46:	bd38      	pop	{r3, r4, r5, pc}

00024f48 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   24f48:	2806      	cmp	r0, #6
   24f4a:	d108      	bne.n	24f5e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   24f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24f50:	2201      	movs	r2, #1
   24f52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24f56:	f3bf 8f4f 	dsb	sy
        __WFE();
   24f5a:	bf20      	wfe
    while (true)
   24f5c:	e7fd      	b.n	24f5a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   24f5e:	4770      	bx	lr

00024f60 <pm_state_exit_post_ops>:
   24f60:	2300      	movs	r3, #0
   24f62:	f383 8811 	msr	BASEPRI, r3
   24f66:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24f6a:	4770      	bx	lr

00024f6c <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   24f6c:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   24f6e:	ab01      	add	r3, sp, #4
   24f70:	f003 fce2 	bl	28938 <tfm_platform_mem_read>

	switch (status) {
   24f74:	2802      	cmp	r0, #2
   24f76:	d00a      	beq.n	24f8e <soc_secure_mem_read+0x22>
   24f78:	2803      	cmp	r0, #3
   24f7a:	d00b      	beq.n	24f94 <soc_secure_mem_read+0x28>
   24f7c:	b968      	cbnz	r0, 24f9a <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   24f7e:	9801      	ldr	r0, [sp, #4]
   24f80:	3800      	subs	r0, #0
   24f82:	bf18      	it	ne
   24f84:	2001      	movne	r0, #1
   24f86:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   24f88:	b003      	add	sp, #12
   24f8a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   24f8e:	f06f 0015 	mvn.w	r0, #21
   24f92:	e7f9      	b.n	24f88 <soc_secure_mem_read+0x1c>
	switch (status) {
   24f94:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24f98:	e7f6      	b.n	24f88 <soc_secure_mem_read+0x1c>
		return -EPERM;
   24f9a:	f04f 30ff 	mov.w	r0, #4294967295
   24f9e:	e7f3      	b.n	24f88 <soc_secure_mem_read+0x1c>

00024fa0 <dummy_timestamp>:
}
   24fa0:	2000      	movs	r0, #0
   24fa2:	4770      	bx	lr

00024fa4 <default_get_timestamp>:
   24fa4:	f003 bbab 	b.w	286fe <sys_clock_cycle_get_32>

00024fa8 <atomic_inc>:
{
   24fa8:	4603      	mov	r3, r0
}
   24faa:	e8d3 0fef 	ldaex	r0, [r3]
   24fae:	1c42      	adds	r2, r0, #1
   24fb0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24fb4:	2900      	cmp	r1, #0
   24fb6:	d1f8      	bne.n	24faa <atomic_inc+0x2>
   24fb8:	4770      	bx	lr

00024fba <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   24fba:	2100      	movs	r1, #0
{
   24fbc:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   24fbe:	4608      	mov	r0, r1
   24fc0:	f7e9 f8ee 	bl	e1a0 <z_log_init.isra.0>
	}

	return 0;
}
   24fc4:	2000      	movs	r0, #0
   24fc6:	bd08      	pop	{r3, pc}

00024fc8 <z_log_notify_backend_enabled>:
}
   24fc8:	4770      	bx	lr

00024fca <z_log_get_tag>:
}
   24fca:	2000      	movs	r0, #0
   24fcc:	4770      	bx	lr

00024fce <z_log_msg_finalize>:
{
   24fce:	b570      	push	{r4, r5, r6, lr}
   24fd0:	460e      	mov	r6, r1
   24fd2:	4615      	mov	r5, r2
   24fd4:	4619      	mov	r1, r3
	if (!msg) {
   24fd6:	4604      	mov	r4, r0
   24fd8:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   24fdc:	b918      	cbnz	r0, 24fe6 <z_log_msg_finalize+0x18>
}
   24fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   24fe2:	f7e9 b9cb 	b.w	e37c <z_log_dropped>
	if (data) {
   24fe6:	b12b      	cbz	r3, 24ff4 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   24fe8:	3010      	adds	r0, #16
   24fea:	f3c5 2349 	ubfx	r3, r5, #9, #10
   24fee:	4418      	add	r0, r3
   24ff0:	f004 fcd7 	bl	299a2 <memcpy>
	msg->hdr.source = source;
   24ff4:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   24ff8:	4620      	mov	r0, r4
}
   24ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   24ffe:	f7e9 b9d1 	b.w	e3a4 <z_log_msg_commit>

00025002 <out_func>:
{
   25002:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   25004:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   25008:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2500c:	2101      	movs	r1, #1
   2500e:	6852      	ldr	r2, [r2, #4]
   25010:	f10d 0007 	add.w	r0, sp, #7
   25014:	4798      	blx	r3
}
   25016:	2000      	movs	r0, #0
   25018:	b003      	add	sp, #12
   2501a:	f85d fb04 	ldr.w	pc, [sp], #4

0002501e <cr_out_func>:
	if (c == '\n') {
   2501e:	280a      	cmp	r0, #10
{
   25020:	b538      	push	{r3, r4, r5, lr}
   25022:	4604      	mov	r4, r0
   25024:	460d      	mov	r5, r1
	if (c == '\n') {
   25026:	d102      	bne.n	2502e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   25028:	200d      	movs	r0, #13
   2502a:	f7ff ffea 	bl	25002 <out_func>
	out_func(c, ctx);
   2502e:	4629      	mov	r1, r5
   25030:	4620      	mov	r0, r4
   25032:	f7ff ffe6 	bl	25002 <out_func>
}
   25036:	2000      	movs	r0, #0
   25038:	bd38      	pop	{r3, r4, r5, pc}

0002503a <buffer_write>:
{
   2503a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2503c:	4606      	mov	r6, r0
   2503e:	460d      	mov	r5, r1
   25040:	4614      	mov	r4, r2
   25042:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   25044:	4621      	mov	r1, r4
   25046:	4628      	mov	r0, r5
   25048:	463a      	mov	r2, r7
   2504a:	47b0      	blx	r6
	} while (len != 0);
   2504c:	1a24      	subs	r4, r4, r0
		buf += processed;
   2504e:	4405      	add	r5, r0
	} while (len != 0);
   25050:	d1f8      	bne.n	25044 <buffer_write+0xa>
}
   25052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025054 <cbvprintf>:
{
   25054:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   25056:	2400      	movs	r4, #0
   25058:	9400      	str	r4, [sp, #0]
   2505a:	f7e8 fb3f 	bl	d6dc <z_cbvprintf_impl>
}
   2505e:	b002      	add	sp, #8
   25060:	bd10      	pop	{r4, pc}

00025062 <log_output_flush>:
{
   25062:	b510      	push	{r4, lr}
		     output->control_block->offset,
   25064:	6842      	ldr	r2, [r0, #4]
{
   25066:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   25068:	e9d2 2300 	ldrd	r2, r3, [r2]
   2506c:	6881      	ldr	r1, [r0, #8]
   2506e:	6800      	ldr	r0, [r0, #0]
   25070:	f7ff ffe3 	bl	2503a <buffer_write>
	output->control_block->offset = 0;
   25074:	2200      	movs	r2, #0
   25076:	6863      	ldr	r3, [r4, #4]
   25078:	601a      	str	r2, [r3, #0]
}
   2507a:	bd10      	pop	{r4, pc}

0002507c <nvs_flash_rd>:
{
   2507c:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2507e:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25080:	8984      	ldrh	r4, [r0, #12]
   25082:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   25084:	fa16 f181 	uxtah	r1, r6, r1
   25088:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2508c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   2508e:	6884      	ldr	r4, [r0, #8]
   25090:	6824      	ldr	r4, [r4, #0]
   25092:	46a4      	mov	ip, r4
}
   25094:	bc70      	pop	{r4, r5, r6}
   25096:	4760      	bx	ip

00025098 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   25098:	680b      	ldr	r3, [r1, #0]
   2509a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2509e:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   250a0:	89c0      	ldrh	r0, [r0, #14]
   250a2:	0c1a      	lsrs	r2, r3, #16
   250a4:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   250a8:	bf04      	itt	eq
   250aa:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   250ae:	600b      	streq	r3, [r1, #0]
}
   250b0:	4770      	bx	lr

000250b2 <nvs_flash_block_cmp>:
{
   250b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   250b6:	4681      	mov	r9, r0
   250b8:	460e      	mov	r6, r1
   250ba:	4617      	mov	r7, r2
   250bc:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   250be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   250c0:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   250c2:	681d      	ldr	r5, [r3, #0]
   250c4:	426d      	negs	r5, r5
	block_size =
   250c6:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   250ca:	b91c      	cbnz	r4, 250d4 <nvs_flash_block_cmp+0x22>
	return 0;
   250cc:	4620      	mov	r0, r4
}
   250ce:	b009      	add	sp, #36	; 0x24
   250d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   250d4:	42ac      	cmp	r4, r5
   250d6:	46a0      	mov	r8, r4
   250d8:	bf28      	it	cs
   250da:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   250dc:	466a      	mov	r2, sp
   250de:	4643      	mov	r3, r8
   250e0:	4631      	mov	r1, r6
   250e2:	4648      	mov	r0, r9
   250e4:	f7ff ffca 	bl	2507c <nvs_flash_rd>
		if (rc) {
   250e8:	2800      	cmp	r0, #0
   250ea:	d1f0      	bne.n	250ce <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   250ec:	4642      	mov	r2, r8
   250ee:	4669      	mov	r1, sp
   250f0:	4638      	mov	r0, r7
   250f2:	f004 fc46 	bl	29982 <memcmp>
		if (rc) {
   250f6:	b920      	cbnz	r0, 25102 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   250f8:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   250fc:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   250fe:	4447      	add	r7, r8
   25100:	e7e3      	b.n	250ca <nvs_flash_block_cmp+0x18>
			return 1;
   25102:	2001      	movs	r0, #1
   25104:	e7e3      	b.n	250ce <nvs_flash_block_cmp+0x1c>

00025106 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25106:	4601      	mov	r1, r0
{
   25108:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2510a:	2207      	movs	r2, #7
{
   2510c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2510e:	20ff      	movs	r0, #255	; 0xff
   25110:	f7e8 fa6c 	bl	d5ec <crc8_ccitt>
	entry->crc8 = crc8;
   25114:	71e0      	strb	r0, [r4, #7]
}
   25116:	bd10      	pop	{r4, pc}

00025118 <nvs_flash_cmp_const>:
{
   25118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2511c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2511e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   25120:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   25122:	681d      	ldr	r5, [r3, #0]
{
   25124:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   25126:	426d      	negs	r5, r5
	block_size =
   25128:	f005 0520 	and.w	r5, r5, #32
{
   2512c:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2512e:	4668      	mov	r0, sp
{
   25130:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   25132:	462a      	mov	r2, r5
   25134:	f004 fc6f 	bl	29a16 <memset>
	while (len) {
   25138:	b91c      	cbnz	r4, 25142 <nvs_flash_cmp_const+0x2a>
	return 0;
   2513a:	4620      	mov	r0, r4
}
   2513c:	b008      	add	sp, #32
   2513e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   25142:	42ac      	cmp	r4, r5
   25144:	46a0      	mov	r8, r4
   25146:	bf28      	it	cs
   25148:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2514a:	466a      	mov	r2, sp
   2514c:	4643      	mov	r3, r8
   2514e:	4631      	mov	r1, r6
   25150:	4638      	mov	r0, r7
   25152:	f7ff ffae 	bl	250b2 <nvs_flash_block_cmp>
		if (rc) {
   25156:	2800      	cmp	r0, #0
   25158:	d1f0      	bne.n	2513c <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2515a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2515e:	4446      	add	r6, r8
   25160:	e7ea      	b.n	25138 <nvs_flash_cmp_const+0x20>

00025162 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25162:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25164:	ab0b      	add	r3, sp, #44	; 0x2c
   25166:	9305      	str	r3, [sp, #20]
   25168:	9303      	str	r3, [sp, #12]
   2516a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2516c:	9302      	str	r3, [sp, #8]
   2516e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25170:	9301      	str	r3, [sp, #4]
   25172:	2300      	movs	r3, #0
   25174:	4618      	mov	r0, r3
   25176:	9300      	str	r3, [sp, #0]
   25178:	f7e9 f97c 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   2517c:	b007      	add	sp, #28
   2517e:	f85d fb04 	ldr.w	pc, [sp], #4

00025182 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   25182:	7803      	ldrb	r3, [r0, #0]
   25184:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   25186:	bf81      	itttt	hi
   25188:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2518c:	18c9      	addhi	r1, r1, r3
   2518e:	425b      	neghi	r3, r3
   25190:	4019      	andhi	r1, r3
}
   25192:	4608      	mov	r0, r1
   25194:	4770      	bx	lr

00025196 <nvs_ate_valid>:
{
   25196:	b570      	push	{r4, r5, r6, lr}
   25198:	460c      	mov	r4, r1
   2519a:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2519c:	2108      	movs	r1, #8
   2519e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   251a0:	f7ff ffef 	bl	25182 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   251a4:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   251a6:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   251a8:	4621      	mov	r1, r4
   251aa:	20ff      	movs	r0, #255	; 0xff
   251ac:	f7e8 fa1e 	bl	d5ec <crc8_ccitt>
	if (crc8 == entry->crc8) {
   251b0:	79e3      	ldrb	r3, [r4, #7]
   251b2:	4283      	cmp	r3, r0
   251b4:	d107      	bne.n	251c6 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   251b6:	89aa      	ldrh	r2, [r5, #12]
   251b8:	8863      	ldrh	r3, [r4, #2]
   251ba:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   251bc:	4283      	cmp	r3, r0
   251be:	bf2c      	ite	cs
   251c0:	2000      	movcs	r0, #0
   251c2:	2001      	movcc	r0, #1
}
   251c4:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   251c6:	2000      	movs	r0, #0
   251c8:	e7fc      	b.n	251c4 <nvs_ate_valid+0x2e>

000251ca <nvs_close_ate_valid>:
{
   251ca:	b538      	push	{r3, r4, r5, lr}
   251cc:	4605      	mov	r5, r0
   251ce:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   251d0:	f7ff ffe1 	bl	25196 <nvs_ate_valid>
   251d4:	b1a0      	cbz	r0, 25200 <nvs_close_ate_valid+0x36>
   251d6:	88a0      	ldrh	r0, [r4, #4]
   251d8:	b998      	cbnz	r0, 25202 <nvs_close_ate_valid+0x38>
   251da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   251de:	8822      	ldrh	r2, [r4, #0]
   251e0:	429a      	cmp	r2, r3
   251e2:	d10d      	bne.n	25200 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   251e4:	2108      	movs	r1, #8
   251e6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   251e8:	f7ff ffcb 	bl	25182 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   251ec:	8862      	ldrh	r2, [r4, #2]
   251ee:	89ab      	ldrh	r3, [r5, #12]
   251f0:	1a9b      	subs	r3, r3, r2
   251f2:	fbb3 f2f0 	udiv	r2, r3, r0
   251f6:	fb02 3010 	mls	r0, r2, r0, r3
   251fa:	fab0 f080 	clz	r0, r0
   251fe:	0940      	lsrs	r0, r0, #5
}
   25200:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   25202:	2000      	movs	r0, #0
   25204:	e7fc      	b.n	25200 <nvs_close_ate_valid+0x36>

00025206 <nvs_prev_ate>:
{
   25206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25208:	4604      	mov	r4, r0
   2520a:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2520c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2520e:	2108      	movs	r1, #8
   25210:	f7ff ffb7 	bl	25182 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25214:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25216:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25218:	6829      	ldr	r1, [r5, #0]
   2521a:	4620      	mov	r0, r4
   2521c:	f7ff ff2e 	bl	2507c <nvs_flash_rd>
	if (rc) {
   25220:	4606      	mov	r6, r0
   25222:	2800      	cmp	r0, #0
   25224:	d136      	bne.n	25294 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   25226:	682b      	ldr	r3, [r5, #0]
   25228:	443b      	add	r3, r7
   2522a:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2522c:	89a2      	ldrh	r2, [r4, #12]
   2522e:	b299      	uxth	r1, r3
   25230:	1bd2      	subs	r2, r2, r7
   25232:	4291      	cmp	r1, r2
   25234:	d12e      	bne.n	25294 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   25236:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   25238:	bf09      	itett	eq
   2523a:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   2523c:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   25240:	f102 32ff 	addeq.w	r2, r2, #4294967295
   25244:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25248:	4620      	mov	r0, r4
   2524a:	2308      	movs	r3, #8
   2524c:	466a      	mov	r2, sp
   2524e:	6029      	str	r1, [r5, #0]
   25250:	f7ff ff14 	bl	2507c <nvs_flash_rd>
	if (rc) {
   25254:	b9e8      	cbnz	r0, 25292 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   25256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25258:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2525a:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2525c:	f813 1b01 	ldrb.w	r1, [r3], #1
   25260:	428a      	cmp	r2, r1
   25262:	d10c      	bne.n	2527e <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   25264:	3001      	adds	r0, #1
   25266:	2808      	cmp	r0, #8
   25268:	d1f8      	bne.n	2525c <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2526a:	6863      	ldr	r3, [r4, #4]
   2526c:	e005      	b.n	2527a <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2526e:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   25270:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   25274:	0c1b      	lsrs	r3, r3, #16
   25276:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   25278:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2527a:	602b      	str	r3, [r5, #0]
		return 0;
   2527c:	e00a      	b.n	25294 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2527e:	4669      	mov	r1, sp
   25280:	4620      	mov	r0, r4
   25282:	f7ff ffa2 	bl	251ca <nvs_close_ate_valid>
   25286:	2800      	cmp	r0, #0
   25288:	d1f1      	bne.n	2526e <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2528a:	4629      	mov	r1, r5
   2528c:	4620      	mov	r0, r4
   2528e:	f7e9 fbbd 	bl	ea0c <nvs_recover_last_ate>
   25292:	4606      	mov	r6, r0
}
   25294:	4630      	mov	r0, r6
   25296:	b003      	add	sp, #12
   25298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002529a <nvs_flash_al_wrt>:
{
   2529a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2529e:	4607      	mov	r7, r0
   252a0:	4690      	mov	r8, r2
	if (!len) {
   252a2:	461e      	mov	r6, r3
{
   252a4:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   252a6:	b91b      	cbnz	r3, 252b0 <nvs_flash_al_wrt+0x16>
		return 0;
   252a8:	2000      	movs	r0, #0
}
   252aa:	b009      	add	sp, #36	; 0x24
   252ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   252b0:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   252b2:	8983      	ldrh	r3, [r0, #12]
   252b4:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   252b6:	fa14 f181 	uxtah	r1, r4, r1
   252ba:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   252be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   252c0:	681d      	ldr	r5, [r3, #0]
   252c2:	426d      	negs	r5, r5
	if (blen > 0) {
   252c4:	4035      	ands	r5, r6
   252c6:	d00c      	beq.n	252e2 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   252c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   252ca:	6883      	ldr	r3, [r0, #8]
   252cc:	4621      	mov	r1, r4
   252ce:	f8d3 9004 	ldr.w	r9, [r3, #4]
   252d2:	462b      	mov	r3, r5
   252d4:	47c8      	blx	r9
		if (rc) {
   252d6:	2800      	cmp	r0, #0
   252d8:	d1e7      	bne.n	252aa <nvs_flash_al_wrt+0x10>
	if (len) {
   252da:	1b76      	subs	r6, r6, r5
   252dc:	d0e4      	beq.n	252a8 <nvs_flash_al_wrt+0xe>
		offset += blen;
   252de:	442c      	add	r4, r5
		data8 += blen;
   252e0:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   252e2:	2320      	movs	r3, #32
   252e4:	4632      	mov	r2, r6
   252e6:	4641      	mov	r1, r8
   252e8:	4668      	mov	r0, sp
   252ea:	f004 fb67 	bl	299bc <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   252ee:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   252f0:	eb0d 0006 	add.w	r0, sp, r6
   252f4:	682a      	ldr	r2, [r5, #0]
   252f6:	7929      	ldrb	r1, [r5, #4]
   252f8:	1b92      	subs	r2, r2, r6
   252fa:	f004 fb8c 	bl	29a16 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   252fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   25300:	682b      	ldr	r3, [r5, #0]
   25302:	6882      	ldr	r2, [r0, #8]
   25304:	4621      	mov	r1, r4
   25306:	6855      	ldr	r5, [r2, #4]
   25308:	466a      	mov	r2, sp
   2530a:	47a8      	blx	r5
	return rc;
   2530c:	e7cd      	b.n	252aa <nvs_flash_al_wrt+0x10>

0002530e <nvs_flash_ate_wrt>:
{
   2530e:	b510      	push	{r4, lr}
   25310:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   25312:	2308      	movs	r3, #8
   25314:	6841      	ldr	r1, [r0, #4]
{
   25316:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   25318:	f7ff ffbf 	bl	2529a <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2531c:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2531e:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   25320:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   25322:	f7ff ff2e 	bl	25182 <nvs_al_size.isra.0>
   25326:	6863      	ldr	r3, [r4, #4]
   25328:	1a1b      	subs	r3, r3, r0
   2532a:	6063      	str	r3, [r4, #4]
}
   2532c:	4610      	mov	r0, r2
   2532e:	bd10      	pop	{r4, pc}

00025330 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   25330:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   25332:	2400      	movs	r4, #0
   25334:	9400      	str	r4, [sp, #0]
   25336:	f7e9 ff71 	bl	f21c <nvs_read_hist>
	return rc;
}
   2533a:	b002      	add	sp, #8
   2533c:	bd10      	pop	{r4, pc}

0002533e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2533e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25340:	ab0b      	add	r3, sp, #44	; 0x2c
   25342:	9305      	str	r3, [sp, #20]
   25344:	9303      	str	r3, [sp, #12]
   25346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25348:	2201      	movs	r2, #1
   2534a:	9302      	str	r3, [sp, #8]
   2534c:	2300      	movs	r3, #0
   2534e:	4618      	mov	r0, r3
   25350:	e9cd 3300 	strd	r3, r3, [sp]
   25354:	f7e9 f88e 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   25358:	b007      	add	sp, #28
   2535a:	f85d fb04 	ldr.w	pc, [sp], #4

0002535e <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2535e:	6903      	ldr	r3, [r0, #16]
}
   25360:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   25364:	4770      	bx	lr

00025366 <drop_tx_buffer>:
}
   25366:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2536a:	4770      	bx	lr

0002536c <release_rx_buffer>:
{
   2536c:	4608      	mov	r0, r1
   2536e:	b508      	push	{r3, lr}
   25370:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   25372:	b118      	cbz	r0, 2537c <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   25374:	f003 feee 	bl	29154 <rpmsg_release_rx_buffer>
	return 0;
   25378:	2000      	movs	r0, #0
}
   2537a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2537c:	f06f 0001 	mvn.w	r0, #1
   25380:	e7fb      	b.n	2537a <release_rx_buffer+0xe>

00025382 <hold_rx_buffer>:
{
   25382:	4608      	mov	r0, r1
   25384:	b508      	push	{r3, lr}
   25386:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   25388:	b118      	cbz	r0, 25392 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   2538a:	f003 fedb 	bl	29144 <rpmsg_hold_rx_buffer>
	return 0;
   2538e:	2000      	movs	r0, #0
}
   25390:	bd08      	pop	{r3, pc}
		return -ENOENT;
   25392:	f06f 0001 	mvn.w	r0, #1
   25396:	e7fb      	b.n	25390 <hold_rx_buffer+0xe>

00025398 <send_nocopy>:
{
   25398:	b513      	push	{r0, r1, r4, lr}
   2539a:	4604      	mov	r4, r0
   2539c:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2539e:	6921      	ldr	r1, [r4, #16]
   253a0:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   253a4:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   253a8:	2902      	cmp	r1, #2
   253aa:	d109      	bne.n	253c0 <send_nocopy+0x28>
	if (len == 0) {
   253ac:	b15b      	cbz	r3, 253c6 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   253ae:	b168      	cbz	r0, 253cc <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   253b0:	9300      	str	r3, [sp, #0]
   253b2:	4613      	mov	r3, r2
   253b4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   253b8:	f7f9 faae 	bl	1e918 <rpmsg_send_offchannel_nocopy>
}
   253bc:	b002      	add	sp, #8
   253be:	bd10      	pop	{r4, pc}
		return -EBUSY;
   253c0:	f06f 000f 	mvn.w	r0, #15
   253c4:	e7fa      	b.n	253bc <send_nocopy+0x24>
		return -EBADMSG;
   253c6:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   253ca:	e7f7      	b.n	253bc <send_nocopy+0x24>
		return -ENOENT;
   253cc:	f06f 0001 	mvn.w	r0, #1
   253d0:	e7f4      	b.n	253bc <send_nocopy+0x24>

000253d2 <get_tx_buffer>:
{
   253d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   253d6:	461c      	mov	r4, r3
   253d8:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   253dc:	4616      	mov	r6, r2
   253de:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   253e0:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   253e2:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   253e4:	b339      	cbz	r1, 25436 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   253e6:	b34a      	cbz	r2, 2543c <get_tx_buffer+0x6a>
   253e8:	b344      	cbz	r4, 2543c <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   253ea:	1c6a      	adds	r2, r5, #1
   253ec:	f143 0300 	adc.w	r3, r3, #0
   253f0:	2a02      	cmp	r2, #2
   253f2:	f173 0300 	sbcs.w	r3, r3, #0
   253f6:	d224      	bcs.n	25442 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   253f8:	6822      	ldr	r2, [r4, #0]
   253fa:	b142      	cbz	r2, 2540e <get_tx_buffer+0x3c>
   253fc:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   25400:	429a      	cmp	r2, r3
   25402:	d904      	bls.n	2540e <get_tx_buffer+0x3c>
		return -ENOMEM;
   25404:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   25408:	6023      	str	r3, [r4, #0]
}
   2540a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2540e:	ea05 0908 	and.w	r9, r5, r8
   25412:	f109 0301 	add.w	r3, r9, #1
   25416:	425a      	negs	r2, r3
   25418:	415a      	adcs	r2, r3
   2541a:	4621      	mov	r1, r4
   2541c:	4638      	mov	r0, r7
   2541e:	f003 fea2 	bl	29166 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   25422:	b988      	cbnz	r0, 25448 <get_tx_buffer+0x76>
   25424:	f1b8 3fff 	cmp.w	r8, #4294967295
   25428:	bf08      	it	eq
   2542a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2542e:	d0f0      	beq.n	25412 <get_tx_buffer+0x40>
		return -ENOBUFS;
   25430:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25434:	e7e9      	b.n	2540a <get_tx_buffer+0x38>
		return -ENOENT;
   25436:	f06f 0001 	mvn.w	r0, #1
   2543a:	e7e6      	b.n	2540a <get_tx_buffer+0x38>
		return -EINVAL;
   2543c:	f06f 0015 	mvn.w	r0, #21
   25440:	e7e3      	b.n	2540a <get_tx_buffer+0x38>
		return -ENOTSUP;
   25442:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25446:	e7e0      	b.n	2540a <get_tx_buffer+0x38>
	(*r_data) = payload;
   25448:	6030      	str	r0, [r6, #0]
	return 0;
   2544a:	2000      	movs	r0, #0
   2544c:	e7dd      	b.n	2540a <get_tx_buffer+0x38>

0002544e <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2544e:	f003 becf 	b.w	291f0 <rpmsg_destroy_ept>

00025452 <get_ept_slot_with_name>:
{
   25452:	b538      	push	{r3, r4, r5, lr}
   25454:	460d      	mov	r5, r1
   25456:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   25458:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2545c:	4628      	mov	r0, r5
   2545e:	f7e3 ff75 	bl	934c <strcmp>
   25462:	b130      	cbz	r0, 25472 <get_ept_slot_with_name+0x20>
   25464:	4628      	mov	r0, r5
   25466:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2546a:	f7e3 ff6f 	bl	934c <strcmp>
   2546e:	b920      	cbnz	r0, 2547a <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   25470:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   25472:	2370      	movs	r3, #112	; 0x70
   25474:	fb03 4000 	mla	r0, r3, r0, r4
}
   25478:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   2547a:	2000      	movs	r0, #0
   2547c:	e7fc      	b.n	25478 <get_ept_slot_with_name+0x26>

0002547e <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2547e:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   25482:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   25486:	f004 b93b 	b.w	29700 <k_work_submit_to_queue>

0002548a <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2548a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   2548e:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   25492:	3b00      	subs	r3, #0
   25494:	bf18      	it	ne
   25496:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   25498:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2549c:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   254a0:	f003 be02 	b.w	290a8 <virtqueue_notification>

000254a4 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   254a4:	68cb      	ldr	r3, [r1, #12]
   254a6:	b133      	cbz	r3, 254b6 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   254a8:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   254aa:	6883      	ldr	r3, [r0, #8]
   254ac:	681b      	ldr	r3, [r3, #0]
   254ae:	b113      	cbz	r3, 254b6 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   254b0:	2200      	movs	r2, #0
   254b2:	6909      	ldr	r1, [r1, #16]
   254b4:	4718      	bx	r3
}
   254b6:	4770      	bx	lr

000254b8 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   254b8:	f7fa bbb0 	b.w	1fc1c <z_impl_k_mutex_unlock>

000254bc <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   254bc:	e8d0 3fef 	ldaex	r3, [r0]
   254c0:	e8c0 1fe2 	stlex	r2, r1, [r0]
   254c4:	2a00      	cmp	r2, #0
   254c6:	d1f9      	bne.n	254bc <atomic_set.isra.0>
}
   254c8:	4770      	bx	lr

000254ca <backend_init>:
{
   254ca:	b510      	push	{r4, lr}
	data->role = conf->role;
   254cc:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   254ce:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   254d0:	681b      	ldr	r3, [r3, #0]
   254d2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   254d6:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   254da:	f004 f879 	bl	295d0 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   254de:	2100      	movs	r1, #0
   254e0:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   254e4:	f7ff ffea 	bl	254bc <atomic_set.isra.0>
}
   254e8:	4608      	mov	r0, r1
   254ea:	bd10      	pop	{r4, pc}

000254ec <ns_bind_cb>:
{
   254ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   254f0:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   254f2:	460d      	mov	r5, r1
   254f4:	b379      	cbz	r1, 25556 <ns_bind_cb+0x6a>
   254f6:	780b      	ldrb	r3, [r1, #0]
   254f8:	b36b      	cbz	r3, 25556 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   254fa:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   254fe:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   25502:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   25504:	f04f 32ff 	mov.w	r2, #4294967295
   25508:	f04f 33ff 	mov.w	r3, #4294967295
   2550c:	4620      	mov	r0, r4
   2550e:	f7fa fab5 	bl	1fa7c <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   25512:	462a      	mov	r2, r5
   25514:	4640      	mov	r0, r8
   25516:	a901      	add	r1, sp, #4
   25518:	f7e9 ffb4 	bl	f484 <get_ept>
	if (rpmsg_ept == NULL) {
   2551c:	9e01      	ldr	r6, [sp, #4]
   2551e:	b92e      	cbnz	r6, 2552c <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   25520:	4620      	mov	r0, r4
}
   25522:	b002      	add	sp, #8
   25524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   25528:	f7ff bfc6 	b.w	254b8 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   2552c:	b158      	cbz	r0, 25546 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2552e:	4620      	mov	r0, r4
   25530:	f7ff ffc2 	bl	254b8 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   25534:	463b      	mov	r3, r7
   25536:	462a      	mov	r2, r5
   25538:	4631      	mov	r1, r6
   2553a:	4640      	mov	r0, r8
}
   2553c:	b002      	add	sp, #8
   2553e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   25542:	f7e9 bf7d 	b.w	f440 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   25546:	2220      	movs	r2, #32
   25548:	4629      	mov	r1, r5
   2554a:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2554e:	f004 fbb1 	bl	29cb4 <strncpy>
		rpmsg_ept->dest = dest;
   25552:	6637      	str	r7, [r6, #96]	; 0x60
   25554:	e7e4      	b.n	25520 <ns_bind_cb+0x34>
}
   25556:	b002      	add	sp, #8
   25558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002555c <ept_cb>:
{
   2555c:	b510      	push	{r4, lr}
   2555e:	4608      	mov	r0, r1
   25560:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   25562:	4611      	mov	r1, r2
   25564:	b952      	cbnz	r2, 2557c <ept_cb+0x20>
		if (!ept->bound) {
   25566:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2556a:	b92a      	cbnz	r2, 25578 <ept_cb+0x1c>
			ept->bound = true;
   2556c:	2201      	movs	r2, #1
			bound_cb(ept);
   2556e:	4618      	mov	r0, r3
			ept->bound = true;
   25570:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   25574:	f7ea f8d8 	bl	f728 <bound_cb>
}
   25578:	2000      	movs	r0, #0
   2557a:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2557c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2557e:	6854      	ldr	r4, [r2, #4]
   25580:	2c00      	cmp	r4, #0
   25582:	d0f9      	beq.n	25578 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   25584:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   25586:	47a0      	blx	r4
   25588:	e7f6      	b.n	25578 <ept_cb+0x1c>

0002558a <deregister_ept>:
{
   2558a:	b510      	push	{r4, lr}
   2558c:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2558e:	6903      	ldr	r3, [r0, #16]
   25590:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   25594:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   25598:	2b02      	cmp	r3, #2
   2559a:	d10a      	bne.n	255b2 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2559c:	b161      	cbz	r1, 255b8 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2559e:	4608      	mov	r0, r1
   255a0:	f003 fe26 	bl	291f0 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   255a4:	2270      	movs	r2, #112	; 0x70
   255a6:	2100      	movs	r1, #0
   255a8:	4620      	mov	r0, r4
   255aa:	f004 fa34 	bl	29a16 <memset>
	return 0;
   255ae:	2000      	movs	r0, #0
}
   255b0:	bd10      	pop	{r4, pc}
		return -EBUSY;
   255b2:	f06f 000f 	mvn.w	r0, #15
   255b6:	e7fb      	b.n	255b0 <deregister_ept+0x26>
		return -ENOENT;
   255b8:	f06f 0001 	mvn.w	r0, #1
   255bc:	e7f8      	b.n	255b0 <deregister_ept+0x26>

000255be <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   255be:	f003 be17 	b.w	291f0 <rpmsg_destroy_ept>

000255c2 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   255c2:	b538      	push	{r3, r4, r5, lr}
   255c4:	460d      	mov	r5, r1
	if (!instance) {
   255c6:	4604      	mov	r4, r0
   255c8:	b160      	cbz	r0, 255e4 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   255ca:	30e0      	adds	r0, #224	; 0xe0
   255cc:	f003 ff91 	bl	294f2 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   255d0:	b10d      	cbz	r5, 255d6 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   255d2:	2000      	movs	r0, #0
}
   255d4:	bd38      	pop	{r3, r4, r5, pc}
   255d6:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   255da:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   255de:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   255e2:	e7f6      	b.n	255d2 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   255e4:	f06f 0015 	mvn.w	r0, #21
   255e8:	e7f4      	b.n	255d4 <ipc_rpmsg_deinit+0x12>

000255ea <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   255ea:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   255ec:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   255f0:	b113      	cbz	r3, 255f8 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   255f2:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   255f6:	4718      	bx	r3
}
   255f8:	4770      	bx	lr

000255fa <virtio_set_features>:
}
   255fa:	4770      	bx	lr

000255fc <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   255fc:	6983      	ldr	r3, [r0, #24]
   255fe:	b913      	cbnz	r3, 25606 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   25600:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   25604:	7019      	strb	r1, [r3, #0]
}
   25606:	4770      	bx	lr

00025608 <virtio_get_features>:
}
   25608:	2001      	movs	r0, #1
   2560a:	4770      	bx	lr

0002560c <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2560c:	6983      	ldr	r3, [r0, #24]
   2560e:	2b01      	cmp	r3, #1
   25610:	d104      	bne.n	2561c <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   25612:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   25616:	7818      	ldrb	r0, [r3, #0]
   25618:	b2c0      	uxtb	r0, r0
   2561a:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2561c:	2004      	movs	r0, #4
}
   2561e:	4770      	bx	lr

00025620 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   25620:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   25622:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   25624:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   25626:	4620      	mov	r0, r4
   25628:	f004 f9a6 	bl	29978 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2562c:	4605      	mov	r5, r0
   2562e:	b118      	cbz	r0, 25638 <virtqueue_allocate+0x18>
   25630:	4622      	mov	r2, r4
   25632:	2100      	movs	r1, #0
   25634:	f004 f9ef 	bl	29a16 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   25638:	4628      	mov	r0, r5
   2563a:	bd38      	pop	{r3, r4, r5, pc}

0002563c <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2563c:	b538      	push	{r3, r4, r5, lr}
   2563e:	4604      	mov	r4, r0
   25640:	2230      	movs	r2, #48	; 0x30
   25642:	2100      	movs	r1, #0
   25644:	f004 f9e7 	bl	29a16 <memset>
   25648:	2218      	movs	r2, #24
   2564a:	2100      	movs	r1, #0
   2564c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   25650:	f004 f9e1 	bl	29a16 <memset>
   25654:	2218      	movs	r2, #24
   25656:	2100      	movs	r1, #0
   25658:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2565c:	f004 f9db 	bl	29a16 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   25660:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   25664:	f7f9 f90a 	bl	1e87c <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   25668:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2566c:	f7f9 f906 	bl	1e87c <virtqueue_free>
	vr->shm_io = 0;
   25670:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   25672:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   25676:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2567a:	f7f9 f81b 	bl	1e6b4 <metal_device_close>
	metal_finish();
   2567e:	f7f9 f875 	bl	1e76c <metal_finish>
	if (io->ops.close)
   25682:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   25684:	f104 0540 	add.w	r5, r4, #64	; 0x40
   25688:	b10b      	cbz	r3, 2568e <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   2568a:	4628      	mov	r0, r5
   2568c:	4798      	blx	r3
   2568e:	2238      	movs	r2, #56	; 0x38
   25690:	2100      	movs	r1, #0
   25692:	4628      	mov	r0, r5
   25694:	f004 f9bf 	bl	29a16 <memset>

	return 0;
}
   25698:	2000      	movs	r0, #0
   2569a:	bd38      	pop	{r3, r4, r5, pc}

0002569c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2569c:	b538      	push	{r3, r4, r5, lr}
   2569e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   256a0:	42ab      	cmp	r3, r5
{
   256a2:	4611      	mov	r1, r2
   256a4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   256a6:	d804      	bhi.n	256b2 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   256a8:	461a      	mov	r2, r3
   256aa:	f004 f97a 	bl	299a2 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   256ae:	4620      	mov	r0, r4
   256b0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   256b2:	2400      	movs	r4, #0
   256b4:	e7fb      	b.n	256ae <_copy+0x12>

000256b6 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   256b6:	f004 b9ae 	b.w	29a16 <memset>

000256ba <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   256ba:	09c3      	lsrs	r3, r0, #7
   256bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   256c0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   256c4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   256c8:	b2c0      	uxtb	r0, r0
   256ca:	4770      	bx	lr

000256cc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   256cc:	78cb      	ldrb	r3, [r1, #3]
   256ce:	7802      	ldrb	r2, [r0, #0]
   256d0:	4053      	eors	r3, r2
   256d2:	7003      	strb	r3, [r0, #0]
   256d4:	884b      	ldrh	r3, [r1, #2]
   256d6:	7842      	ldrb	r2, [r0, #1]
   256d8:	4053      	eors	r3, r2
   256da:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   256dc:	680a      	ldr	r2, [r1, #0]
   256de:	7883      	ldrb	r3, [r0, #2]
   256e0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   256e4:	7083      	strb	r3, [r0, #2]
   256e6:	680a      	ldr	r2, [r1, #0]
   256e8:	78c3      	ldrb	r3, [r0, #3]
   256ea:	4053      	eors	r3, r2
   256ec:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   256ee:	79cb      	ldrb	r3, [r1, #7]
   256f0:	7902      	ldrb	r2, [r0, #4]
   256f2:	4053      	eors	r3, r2
   256f4:	7103      	strb	r3, [r0, #4]
   256f6:	88cb      	ldrh	r3, [r1, #6]
   256f8:	7942      	ldrb	r2, [r0, #5]
   256fa:	4053      	eors	r3, r2
   256fc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   256fe:	684a      	ldr	r2, [r1, #4]
   25700:	7983      	ldrb	r3, [r0, #6]
   25702:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25706:	7183      	strb	r3, [r0, #6]
   25708:	684a      	ldr	r2, [r1, #4]
   2570a:	79c3      	ldrb	r3, [r0, #7]
   2570c:	4053      	eors	r3, r2
   2570e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   25710:	7acb      	ldrb	r3, [r1, #11]
   25712:	7a02      	ldrb	r2, [r0, #8]
   25714:	4053      	eors	r3, r2
   25716:	7203      	strb	r3, [r0, #8]
   25718:	7a42      	ldrb	r2, [r0, #9]
   2571a:	894b      	ldrh	r3, [r1, #10]
   2571c:	4053      	eors	r3, r2
   2571e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   25720:	688a      	ldr	r2, [r1, #8]
   25722:	7a83      	ldrb	r3, [r0, #10]
   25724:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25728:	7283      	strb	r3, [r0, #10]
   2572a:	688a      	ldr	r2, [r1, #8]
   2572c:	7ac3      	ldrb	r3, [r0, #11]
   2572e:	4053      	eors	r3, r2
   25730:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   25732:	7bcb      	ldrb	r3, [r1, #15]
   25734:	7b02      	ldrb	r2, [r0, #12]
   25736:	4053      	eors	r3, r2
   25738:	7303      	strb	r3, [r0, #12]
   2573a:	89cb      	ldrh	r3, [r1, #14]
   2573c:	7b42      	ldrb	r2, [r0, #13]
   2573e:	4053      	eors	r3, r2
   25740:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   25742:	68ca      	ldr	r2, [r1, #12]
   25744:	7b83      	ldrb	r3, [r0, #14]
   25746:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2574a:	7383      	strb	r3, [r0, #14]
   2574c:	68ca      	ldr	r2, [r1, #12]
   2574e:	7bc3      	ldrb	r3, [r0, #15]
   25750:	4053      	eors	r3, r2
   25752:	73c3      	strb	r3, [r0, #15]
}
   25754:	4770      	bx	lr

00025756 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   25756:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   25758:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2575a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2575c:	f88d 2000 	strb.w	r2, [sp]
   25760:	7942      	ldrb	r2, [r0, #5]
   25762:	f88d 2001 	strb.w	r2, [sp, #1]
   25766:	7a82      	ldrb	r2, [r0, #10]
   25768:	f88d 2002 	strb.w	r2, [sp, #2]
   2576c:	7bc2      	ldrb	r2, [r0, #15]
   2576e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   25772:	7902      	ldrb	r2, [r0, #4]
   25774:	f88d 2004 	strb.w	r2, [sp, #4]
   25778:	7a42      	ldrb	r2, [r0, #9]
   2577a:	f88d 2005 	strb.w	r2, [sp, #5]
   2577e:	7b82      	ldrb	r2, [r0, #14]
   25780:	f88d 2006 	strb.w	r2, [sp, #6]
   25784:	78c2      	ldrb	r2, [r0, #3]
   25786:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2578a:	7a02      	ldrb	r2, [r0, #8]
   2578c:	f88d 2008 	strb.w	r2, [sp, #8]
   25790:	7b42      	ldrb	r2, [r0, #13]
   25792:	f88d 2009 	strb.w	r2, [sp, #9]
   25796:	7882      	ldrb	r2, [r0, #2]
   25798:	f88d 200a 	strb.w	r2, [sp, #10]
   2579c:	79c2      	ldrb	r2, [r0, #7]
   2579e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   257a2:	7b02      	ldrb	r2, [r0, #12]
   257a4:	f88d 200c 	strb.w	r2, [sp, #12]
   257a8:	7842      	ldrb	r2, [r0, #1]
   257aa:	f88d 200d 	strb.w	r2, [sp, #13]
   257ae:	7982      	ldrb	r2, [r0, #6]
   257b0:	f88d 200e 	strb.w	r2, [sp, #14]
   257b4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   257b8:	2310      	movs	r3, #16
   257ba:	466a      	mov	r2, sp
   257bc:	4619      	mov	r1, r3
   257be:	f7ff ff6d 	bl	2569c <_copy>
}
   257c2:	b005      	add	sp, #20
   257c4:	f85d fb04 	ldr.w	pc, [sp], #4

000257c8 <mult_row_column>:
{
   257c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   257ca:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   257cc:	7808      	ldrb	r0, [r1, #0]
{
   257ce:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   257d0:	f7ff ff73 	bl	256ba <_double_byte>
   257d4:	4605      	mov	r5, r0
   257d6:	7860      	ldrb	r0, [r4, #1]
   257d8:	f7ff ff6f 	bl	256ba <_double_byte>
   257dc:	78a2      	ldrb	r2, [r4, #2]
   257de:	7863      	ldrb	r3, [r4, #1]
   257e0:	4053      	eors	r3, r2
   257e2:	78e2      	ldrb	r2, [r4, #3]
   257e4:	4053      	eors	r3, r2
   257e6:	405d      	eors	r5, r3
   257e8:	4068      	eors	r0, r5
   257ea:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   257ec:	7860      	ldrb	r0, [r4, #1]
   257ee:	7827      	ldrb	r7, [r4, #0]
   257f0:	f7ff ff63 	bl	256ba <_double_byte>
   257f4:	4605      	mov	r5, r0
   257f6:	78a0      	ldrb	r0, [r4, #2]
   257f8:	f7ff ff5f 	bl	256ba <_double_byte>
   257fc:	78a3      	ldrb	r3, [r4, #2]
   257fe:	405f      	eors	r7, r3
   25800:	78e3      	ldrb	r3, [r4, #3]
   25802:	405f      	eors	r7, r3
   25804:	407d      	eors	r5, r7
   25806:	4068      	eors	r0, r5
   25808:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2580a:	7863      	ldrb	r3, [r4, #1]
   2580c:	7827      	ldrb	r7, [r4, #0]
   2580e:	78a0      	ldrb	r0, [r4, #2]
   25810:	405f      	eors	r7, r3
   25812:	f7ff ff52 	bl	256ba <_double_byte>
   25816:	4605      	mov	r5, r0
   25818:	78e0      	ldrb	r0, [r4, #3]
   2581a:	f7ff ff4e 	bl	256ba <_double_byte>
   2581e:	78e3      	ldrb	r3, [r4, #3]
   25820:	405f      	eors	r7, r3
   25822:	407d      	eors	r5, r7
   25824:	4068      	eors	r0, r5
   25826:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   25828:	7820      	ldrb	r0, [r4, #0]
   2582a:	f7ff ff46 	bl	256ba <_double_byte>
   2582e:	7862      	ldrb	r2, [r4, #1]
   25830:	7823      	ldrb	r3, [r4, #0]
   25832:	4053      	eors	r3, r2
   25834:	78a2      	ldrb	r2, [r4, #2]
   25836:	4053      	eors	r3, r2
   25838:	ea80 0503 	eor.w	r5, r0, r3
   2583c:	78e0      	ldrb	r0, [r4, #3]
   2583e:	f7ff ff3c 	bl	256ba <_double_byte>
   25842:	b2ed      	uxtb	r5, r5
   25844:	4045      	eors	r5, r0
   25846:	70f5      	strb	r5, [r6, #3]
}
   25848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002584a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2584a:	b570      	push	{r4, r5, r6, lr}
   2584c:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2584e:	4605      	mov	r5, r0
{
   25850:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   25852:	2800      	cmp	r0, #0
   25854:	d049      	beq.n	258ea <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   25856:	2900      	cmp	r1, #0
   25858:	d049      	beq.n	258ee <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2585a:	2a00      	cmp	r2, #0
   2585c:	d049      	beq.n	258f2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2585e:	2310      	movs	r3, #16
   25860:	460a      	mov	r2, r1
   25862:	4668      	mov	r0, sp
   25864:	4619      	mov	r1, r3
   25866:	f7ff ff19 	bl	2569c <_copy>
	add_round_key(state, s->words);
   2586a:	4621      	mov	r1, r4
   2586c:	4668      	mov	r0, sp
   2586e:	f7ff ff2d 	bl	256cc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   25872:	3410      	adds	r4, #16
   25874:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   25878:	4668      	mov	r0, sp
   2587a:	f7ea faf5 	bl	fe68 <sub_bytes>
		shift_rows(state);
   2587e:	4668      	mov	r0, sp
   25880:	f7ff ff69 	bl	25756 <shift_rows>
	mult_row_column(t, s);
   25884:	4669      	mov	r1, sp
   25886:	a804      	add	r0, sp, #16
   25888:	f7ff ff9e 	bl	257c8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2588c:	a901      	add	r1, sp, #4
   2588e:	a805      	add	r0, sp, #20
   25890:	f7ff ff9a 	bl	257c8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   25894:	a902      	add	r1, sp, #8
   25896:	a806      	add	r0, sp, #24
   25898:	f7ff ff96 	bl	257c8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2589c:	a903      	add	r1, sp, #12
   2589e:	a807      	add	r0, sp, #28
   258a0:	f7ff ff92 	bl	257c8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   258a4:	2310      	movs	r3, #16
   258a6:	4668      	mov	r0, sp
   258a8:	4619      	mov	r1, r3
   258aa:	eb0d 0203 	add.w	r2, sp, r3
   258ae:	f7ff fef5 	bl	2569c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   258b2:	4621      	mov	r1, r4
   258b4:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   258b6:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   258b8:	f7ff ff08 	bl	256cc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   258bc:	42b4      	cmp	r4, r6
   258be:	d1db      	bne.n	25878 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   258c0:	f7ea fad2 	bl	fe68 <sub_bytes>
	shift_rows(state);
   258c4:	4668      	mov	r0, sp
   258c6:	f7ff ff46 	bl	25756 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   258ca:	4621      	mov	r1, r4
   258cc:	4668      	mov	r0, sp
   258ce:	f7ff fefd 	bl	256cc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   258d2:	2310      	movs	r3, #16
   258d4:	466a      	mov	r2, sp
   258d6:	4619      	mov	r1, r3
   258d8:	4628      	mov	r0, r5
   258da:	f7ff fedf 	bl	2569c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   258de:	4668      	mov	r0, sp
   258e0:	2210      	movs	r2, #16
   258e2:	2100      	movs	r1, #0
   258e4:	f7ff fee7 	bl	256b6 <_set>

	return TC_CRYPTO_SUCCESS;
   258e8:	2001      	movs	r0, #1
}
   258ea:	b008      	add	sp, #32
   258ec:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   258ee:	4608      	mov	r0, r1
   258f0:	e7fb      	b.n	258ea <tc_aes_encrypt+0xa0>
   258f2:	4610      	mov	r0, r2
   258f4:	e7f9      	b.n	258ea <tc_aes_encrypt+0xa0>

000258f6 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   258f6:	460a      	mov	r2, r1
{
   258f8:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   258fa:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   258fe:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   25900:	2b00      	cmp	r3, #0
   25902:	bfac      	ite	ge
   25904:	2300      	movge	r3, #0
   25906:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   25908:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2590c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   25910:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   25912:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   25916:	d002      	beq.n	2591e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   25918:	7813      	ldrb	r3, [r2, #0]
   2591a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2591c:	e7f4      	b.n	25908 <gf_double+0x12>
	}
}
   2591e:	bd10      	pop	{r4, pc}

00025920 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   25920:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   25922:	b120      	cbz	r0, 2592e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   25924:	2258      	movs	r2, #88	; 0x58
   25926:	2100      	movs	r1, #0
   25928:	f7ff fec5 	bl	256b6 <_set>
   2592c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2592e:	bd08      	pop	{r3, pc}

00025930 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   25930:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   25932:	4604      	mov	r4, r0
   25934:	b188      	cbz	r0, 2595a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   25936:	2210      	movs	r2, #16
   25938:	2100      	movs	r1, #0
   2593a:	f7ff febc 	bl	256b6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2593e:	2210      	movs	r2, #16
   25940:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25944:	2100      	movs	r1, #0
   25946:	f7ff feb6 	bl	256b6 <_set>
	s->leftover_offset = 0;
   2594a:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2594c:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2594e:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   25950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   25954:	2001      	movs	r0, #1
   25956:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2595a:	bd10      	pop	{r4, pc}

0002595c <tc_cmac_setup>:
{
   2595c:	b570      	push	{r4, r5, r6, lr}
   2595e:	4604      	mov	r4, r0
   25960:	460d      	mov	r5, r1
   25962:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   25964:	b310      	cbz	r0, 259ac <tc_cmac_setup+0x50>
   25966:	b311      	cbz	r1, 259ae <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   25968:	2258      	movs	r2, #88	; 0x58
   2596a:	2100      	movs	r1, #0
   2596c:	f7ff fea3 	bl	256b6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   25970:	4629      	mov	r1, r5
   25972:	4630      	mov	r0, r6
	s->sched = sched;
   25974:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   25976:	f7ea fa83 	bl	fe80 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2597a:	2210      	movs	r2, #16
   2597c:	2100      	movs	r1, #0
   2597e:	4620      	mov	r0, r4
   25980:	f7ff fe99 	bl	256b6 <_set>
	gf_double (s->K1, s->iv);
   25984:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   25988:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2598a:	4621      	mov	r1, r4
   2598c:	4620      	mov	r0, r4
   2598e:	f7ff ff5c 	bl	2584a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   25992:	4621      	mov	r1, r4
   25994:	4628      	mov	r0, r5
   25996:	f7ff ffae 	bl	258f6 <gf_double>
	gf_double (s->K2, s->K1);
   2599a:	4629      	mov	r1, r5
   2599c:	f104 0020 	add.w	r0, r4, #32
   259a0:	f7ff ffa9 	bl	258f6 <gf_double>
	tc_cmac_init(s);
   259a4:	4620      	mov	r0, r4
   259a6:	f7ff ffc3 	bl	25930 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   259aa:	2001      	movs	r0, #1
}
   259ac:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   259ae:	4608      	mov	r0, r1
   259b0:	e7fc      	b.n	259ac <tc_cmac_setup+0x50>

000259b2 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   259b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   259b6:	460e      	mov	r6, r1
   259b8:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   259ba:	4604      	mov	r4, r0
   259bc:	2800      	cmp	r0, #0
   259be:	d060      	beq.n	25a82 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   259c0:	b1fa      	cbz	r2, 25a02 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   259c2:	2900      	cmp	r1, #0
   259c4:	d05d      	beq.n	25a82 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   259c6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   259ca:	ea53 0102 	orrs.w	r1, r3, r2
   259ce:	d058      	beq.n	25a82 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   259d0:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   259d2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   259d6:	f142 32ff 	adc.w	r2, r2, #4294967295
   259da:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   259de:	f1b8 0f00 	cmp.w	r8, #0
   259e2:	d02c      	beq.n	25a3e <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   259e4:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   259e8:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   259ec:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   259ee:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   259f0:	d20a      	bcs.n	25a08 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   259f2:	462b      	mov	r3, r5
   259f4:	4632      	mov	r2, r6
   259f6:	4629      	mov	r1, r5
   259f8:	f7ff fe50 	bl	2569c <_copy>
			s->leftover_offset += data_length;
   259fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   259fe:	442b      	add	r3, r5
   25a00:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   25a02:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   25a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   25a08:	463b      	mov	r3, r7
   25a0a:	4632      	mov	r2, r6
   25a0c:	4639      	mov	r1, r7
   25a0e:	f7ff fe45 	bl	2569c <_copy>
		s->leftover_offset = 0;
   25a12:	2300      	movs	r3, #0
   25a14:	3d10      	subs	r5, #16
   25a16:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   25a18:	4445      	add	r5, r8
		data += remaining_space;
   25a1a:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25a1c:	1e63      	subs	r3, r4, #1
   25a1e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   25a22:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25a26:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25a2a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   25a2c:	ea82 0200 	eor.w	r2, r2, r0
   25a30:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25a32:	d1f6      	bne.n	25a22 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25a34:	4621      	mov	r1, r4
   25a36:	4620      	mov	r0, r4
   25a38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25a3a:	f7ff ff06 	bl	2584a <tc_aes_encrypt>
   25a3e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   25a42:	2d10      	cmp	r5, #16
   25a44:	d80a      	bhi.n	25a5c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   25a46:	2d00      	cmp	r5, #0
   25a48:	d0db      	beq.n	25a02 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   25a4a:	462b      	mov	r3, r5
   25a4c:	4632      	mov	r2, r6
   25a4e:	4629      	mov	r1, r5
   25a50:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25a54:	f7ff fe22 	bl	2569c <_copy>
		s->leftover_offset = data_length;
   25a58:	6465      	str	r5, [r4, #68]	; 0x44
   25a5a:	e7d2      	b.n	25a02 <tc_cmac_update+0x50>
   25a5c:	1e63      	subs	r3, r4, #1
   25a5e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   25a60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25a64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25a68:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   25a6a:	ea82 0200 	eor.w	r2, r2, r0
   25a6e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25a70:	d1f6      	bne.n	25a60 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25a72:	4621      	mov	r1, r4
   25a74:	4620      	mov	r0, r4
   25a76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25a78:	f7ff fee7 	bl	2584a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   25a7c:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   25a7e:	3d10      	subs	r5, #16
   25a80:	e7df      	b.n	25a42 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   25a82:	2000      	movs	r0, #0
   25a84:	e7be      	b.n	25a04 <tc_cmac_update+0x52>

00025a86 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   25a86:	b570      	push	{r4, r5, r6, lr}
   25a88:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   25a8a:	4605      	mov	r5, r0
   25a8c:	b1f0      	cbz	r0, 25acc <tc_cmac_final+0x46>
   25a8e:	b371      	cbz	r1, 25aee <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   25a90:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   25a92:	2a10      	cmp	r2, #16
   25a94:	d11b      	bne.n	25ace <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   25a96:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25a98:	1e63      	subs	r3, r4, #1
   25a9a:	3901      	subs	r1, #1
   25a9c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   25aa0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25aa4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25aa8:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   25aaa:	ea82 0206 	eor.w	r2, r2, r6
   25aae:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   25ab2:	ea82 0206 	eor.w	r2, r2, r6
   25ab6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25ab8:	d1f2      	bne.n	25aa0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   25aba:	4621      	mov	r1, r4
   25abc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25abe:	4628      	mov	r0, r5
   25ac0:	f7ff fec3 	bl	2584a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   25ac4:	4620      	mov	r0, r4
   25ac6:	f7ff ff2b 	bl	25920 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   25aca:	2001      	movs	r0, #1
}
   25acc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   25ace:	f102 0030 	add.w	r0, r2, #48	; 0x30
   25ad2:	2100      	movs	r1, #0
   25ad4:	f1c2 0210 	rsb	r2, r2, #16
   25ad8:	4420      	add	r0, r4
   25ada:	f7ff fdec 	bl	256b6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   25ade:	2280      	movs	r2, #128	; 0x80
   25ae0:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   25ae2:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   25ae6:	4423      	add	r3, r4
   25ae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   25aec:	e7d4      	b.n	25a98 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   25aee:	4608      	mov	r0, r1
   25af0:	e7ec      	b.n	25acc <tc_cmac_final+0x46>

00025af2 <tc_sha256_update>:
{
   25af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25af4:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   25af6:	b110      	cbz	r0, 25afe <tc_sha256_update+0xc>
   25af8:	b1f9      	cbz	r1, 25b3a <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   25afa:	b90a      	cbnz	r2, 25b00 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   25afc:	2001      	movs	r0, #1
}
   25afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   25b00:	2700      	movs	r7, #0
   25b02:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   25b04:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   25b08:	6e83      	ldr	r3, [r0, #104]	; 0x68
   25b0a:	1c5a      	adds	r2, r3, #1
   25b0c:	6682      	str	r2, [r0, #104]	; 0x68
   25b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
   25b12:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   25b14:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   25b16:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   25b1a:	d90b      	bls.n	25b34 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   25b1c:	4631      	mov	r1, r6
   25b1e:	f7ea fa03 	bl	ff28 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   25b22:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   25b26:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   25b2a:	f142 0200 	adc.w	r2, r2, #0
   25b2e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   25b32:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   25b34:	42a5      	cmp	r5, r4
   25b36:	d1e7      	bne.n	25b08 <tc_sha256_update+0x16>
   25b38:	e7e0      	b.n	25afc <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   25b3a:	4608      	mov	r0, r1
   25b3c:	e7df      	b.n	25afe <tc_sha256_update+0xc>

00025b3e <tc_sha256_final>:
{
   25b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b40:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   25b42:	4605      	mov	r5, r0
   25b44:	2800      	cmp	r0, #0
   25b46:	d054      	beq.n	25bf2 <tc_sha256_final+0xb4>
   25b48:	2900      	cmp	r1, #0
   25b4a:	d053      	beq.n	25bf4 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   25b4c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   25b4e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   25b52:	00d8      	lsls	r0, r3, #3
   25b54:	1812      	adds	r2, r2, r0
   25b56:	f141 0100 	adc.w	r1, r1, #0
   25b5a:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   25b5e:	2280      	movs	r2, #128	; 0x80
   25b60:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   25b62:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   25b64:	4423      	add	r3, r4
   25b66:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   25b68:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   25b6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   25b70:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   25b74:	d90a      	bls.n	25b8c <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   25b76:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   25b7a:	4639      	mov	r1, r7
   25b7c:	4430      	add	r0, r6
   25b7e:	f7ff fd9a 	bl	256b6 <_set>
		compress(s->iv, s->leftover);
   25b82:	4631      	mov	r1, r6
   25b84:	4620      	mov	r0, r4
   25b86:	f7ea f9cf 	bl	ff28 <compress>
		s->leftover_offset = 0;
   25b8a:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   25b8c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   25b8e:	2100      	movs	r1, #0
   25b90:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   25b94:	4430      	add	r0, r6
   25b96:	f7ff fd8e 	bl	256b6 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   25b9a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   25b9c:	4631      	mov	r1, r6
   25b9e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   25ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   25ba2:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   25ba4:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   25ba6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   25baa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   25bae:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   25bb0:	0e1b      	lsrs	r3, r3, #24
   25bb2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   25bb6:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   25bb8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   25bbc:	f7ea f9b4 	bl	ff28 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   25bc0:	1d2b      	adds	r3, r5, #4
   25bc2:	1f21      	subs	r1, r4, #4
   25bc4:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   25bc6:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   25bca:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   25bcc:	0e10      	lsrs	r0, r2, #24
   25bce:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   25bd2:	0c10      	lsrs	r0, r2, #16
   25bd4:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   25bd8:	0a10      	lsrs	r0, r2, #8
   25bda:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   25bde:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   25be2:	42ab      	cmp	r3, r5
   25be4:	d1ef      	bne.n	25bc6 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   25be6:	4620      	mov	r0, r4
   25be8:	2270      	movs	r2, #112	; 0x70
   25bea:	2100      	movs	r1, #0
   25bec:	f7ff fd63 	bl	256b6 <_set>
	return TC_CRYPTO_SUCCESS;
   25bf0:	2001      	movs	r0, #1
}
   25bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   25bf4:	4608      	mov	r0, r1
   25bf6:	e7fc      	b.n	25bf2 <tc_sha256_final+0xb4>

00025bf8 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   25bf8:	b530      	push	{r4, r5, lr}
   25bfa:	1e43      	subs	r3, r0, #1
   25bfc:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   25bfe:	42a9      	cmp	r1, r5
   25c00:	d106      	bne.n	25c10 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   25c02:	2136      	movs	r1, #54	; 0x36
   25c04:	245c      	movs	r4, #92	; 0x5c
   25c06:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   25c08:	1a13      	subs	r3, r2, r0
   25c0a:	2b3f      	cmp	r3, #63	; 0x3f
   25c0c:	d90c      	bls.n	25c28 <rekey+0x30>
	}
}
   25c0e:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   25c10:	780c      	ldrb	r4, [r1, #0]
   25c12:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   25c16:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   25c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   25c1e:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   25c22:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   25c26:	e7ea      	b.n	25bfe <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   25c28:	f802 1b01 	strb.w	r1, [r2], #1
   25c2c:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   25c30:	e7ea      	b.n	25c08 <rekey+0x10>

00025c32 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   25c32:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c34:	460e      	mov	r6, r1
   25c36:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   25c38:	4605      	mov	r5, r0
{
   25c3a:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   25c3c:	b1b8      	cbz	r0, 25c6e <tc_hmac_set_key+0x3c>
   25c3e:	b341      	cbz	r1, 25c92 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   25c40:	b34a      	cbz	r2, 25c96 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   25c42:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   25c44:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   25c48:	d813      	bhi.n	25c72 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   25c4a:	a810      	add	r0, sp, #64	; 0x40
   25c4c:	f7ea fa56 	bl	100fc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   25c50:	4622      	mov	r2, r4
   25c52:	4669      	mov	r1, sp
   25c54:	a810      	add	r0, sp, #64	; 0x40
   25c56:	f7ff ff4c 	bl	25af2 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   25c5a:	a910      	add	r1, sp, #64	; 0x40
   25c5c:	a834      	add	r0, sp, #208	; 0xd0
   25c5e:	f7ff ff6e 	bl	25b3e <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   25c62:	4622      	mov	r2, r4
   25c64:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   25c66:	4638      	mov	r0, r7
   25c68:	f7ff ffc6 	bl	25bf8 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   25c6c:	2001      	movs	r0, #1
}
   25c6e:	b04d      	add	sp, #308	; 0x134
   25c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   25c72:	f7ea fa43 	bl	100fc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   25c76:	4622      	mov	r2, r4
   25c78:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   25c7a:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   25c7e:	4628      	mov	r0, r5
   25c80:	f7ff ff37 	bl	25af2 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   25c84:	4629      	mov	r1, r5
   25c86:	4620      	mov	r0, r4
   25c88:	f7ff ff59 	bl	25b3e <tc_sha256_final>
		rekey(ctx->key,
   25c8c:	2220      	movs	r2, #32
   25c8e:	4621      	mov	r1, r4
   25c90:	e7e9      	b.n	25c66 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   25c92:	4608      	mov	r0, r1
   25c94:	e7eb      	b.n	25c6e <tc_hmac_set_key+0x3c>
   25c96:	4610      	mov	r0, r2
   25c98:	e7e9      	b.n	25c6e <tc_hmac_set_key+0x3c>

00025c9a <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   25c9a:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   25c9c:	4604      	mov	r4, r0
   25c9e:	b140      	cbz	r0, 25cb2 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   25ca0:	f7ea fa2c 	bl	100fc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   25ca4:	2240      	movs	r2, #64	; 0x40
   25ca6:	4620      	mov	r0, r4
   25ca8:	f104 0170 	add.w	r1, r4, #112	; 0x70
   25cac:	f7ff ff21 	bl	25af2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   25cb0:	2001      	movs	r0, #1
}
   25cb2:	bd10      	pop	{r4, pc}

00025cb4 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   25cb4:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   25cb6:	b110      	cbz	r0, 25cbe <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   25cb8:	f7ff ff1b 	bl	25af2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   25cbc:	2001      	movs	r0, #1
}
   25cbe:	bd08      	pop	{r3, pc}

00025cc0 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   25cc0:	b570      	push	{r4, r5, r6, lr}
   25cc2:	460e      	mov	r6, r1
   25cc4:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   25cc6:	4605      	mov	r5, r0
   25cc8:	b1f0      	cbz	r0, 25d08 <tc_hmac_final+0x48>
   25cca:	2920      	cmp	r1, #32
   25ccc:	d11c      	bne.n	25d08 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   25cce:	b1ea      	cbz	r2, 25d0c <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   25cd0:	4611      	mov	r1, r2
   25cd2:	f7ff ff34 	bl	25b3e <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   25cd6:	4620      	mov	r0, r4
   25cd8:	f7ea fa10 	bl	100fc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   25cdc:	2240      	movs	r2, #64	; 0x40
   25cde:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   25ce2:	4620      	mov	r0, r4
   25ce4:	f7ff ff05 	bl	25af2 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   25ce8:	4632      	mov	r2, r6
   25cea:	4629      	mov	r1, r5
   25cec:	4620      	mov	r0, r4
   25cee:	f7ff ff00 	bl	25af2 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   25cf2:	4621      	mov	r1, r4
   25cf4:	4628      	mov	r0, r5
   25cf6:	f7ff ff22 	bl	25b3e <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   25cfa:	4620      	mov	r0, r4
   25cfc:	22f0      	movs	r2, #240	; 0xf0
   25cfe:	2100      	movs	r1, #0
   25d00:	f7ff fcd9 	bl	256b6 <_set>

	return TC_CRYPTO_SUCCESS;
   25d04:	2001      	movs	r0, #1
}
   25d06:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   25d08:	2000      	movs	r0, #0
   25d0a:	e7fc      	b.n	25d06 <tc_hmac_final+0x46>
   25d0c:	4610      	mov	r0, r2
   25d0e:	e7fa      	b.n	25d06 <tc_hmac_final+0x46>

00025d10 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   25d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d14:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   25d16:	f04f 0b01 	mov.w	fp, #1
{
   25d1a:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   25d1c:	2300      	movs	r3, #0
{
   25d1e:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25d20:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   25d24:	4631      	mov	r1, r6
{
   25d26:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25d28:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   25d2a:	f88d 3006 	strb.w	r3, [sp, #6]
{
   25d2e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   25d32:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25d36:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25d3a:	f7ff ff7a 	bl	25c32 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   25d3e:	4620      	mov	r0, r4
   25d40:	f7ff ffab 	bl	25c9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25d44:	2220      	movs	r2, #32
   25d46:	4629      	mov	r1, r5
   25d48:	4620      	mov	r0, r4
   25d4a:	f7ff ffb3 	bl	25cb4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   25d4e:	465a      	mov	r2, fp
   25d50:	4620      	mov	r0, r4
   25d52:	f10d 0106 	add.w	r1, sp, #6
   25d56:	f7ff ffad 	bl	25cb4 <tc_hmac_update>

	if (data && datalen)
   25d5a:	f1b8 0f00 	cmp.w	r8, #0
   25d5e:	d007      	beq.n	25d70 <update+0x60>
   25d60:	f1b9 0f00 	cmp.w	r9, #0
   25d64:	d004      	beq.n	25d70 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   25d66:	464a      	mov	r2, r9
   25d68:	4641      	mov	r1, r8
   25d6a:	4620      	mov	r0, r4
   25d6c:	f7ff ffa2 	bl	25cb4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   25d70:	b13f      	cbz	r7, 25d82 <update+0x72>
   25d72:	f1ba 0f00 	cmp.w	sl, #0
   25d76:	d004      	beq.n	25d82 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   25d78:	4652      	mov	r2, sl
   25d7a:	4639      	mov	r1, r7
   25d7c:	4620      	mov	r0, r4
   25d7e:	f7ff ff99 	bl	25cb4 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   25d82:	4622      	mov	r2, r4
   25d84:	2120      	movs	r1, #32
   25d86:	4630      	mov	r0, r6
   25d88:	f7ff ff9a 	bl	25cc0 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25d8c:	2220      	movs	r2, #32
   25d8e:	4631      	mov	r1, r6
   25d90:	4620      	mov	r0, r4
   25d92:	f7ff ff4e 	bl	25c32 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   25d96:	4620      	mov	r0, r4
   25d98:	f7ff ff7f 	bl	25c9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25d9c:	2220      	movs	r2, #32
   25d9e:	4629      	mov	r1, r5
   25da0:	4620      	mov	r0, r4
   25da2:	f7ff ff87 	bl	25cb4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   25da6:	4622      	mov	r2, r4
   25da8:	2120      	movs	r1, #32
   25daa:	4628      	mov	r0, r5
   25dac:	f7ff ff88 	bl	25cc0 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   25db0:	f1b8 0f00 	cmp.w	r8, #0
   25db4:	d03a      	beq.n	25e2c <update+0x11c>
   25db6:	f1b9 0f00 	cmp.w	r9, #0
   25dba:	d037      	beq.n	25e2c <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25dbc:	2220      	movs	r2, #32
   25dbe:	4631      	mov	r1, r6
   25dc0:	4620      	mov	r0, r4
   25dc2:	f7ff ff36 	bl	25c32 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   25dc6:	4620      	mov	r0, r4
   25dc8:	f7ff ff67 	bl	25c9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25dcc:	2220      	movs	r2, #32
   25dce:	4629      	mov	r1, r5
   25dd0:	4620      	mov	r0, r4
   25dd2:	f7ff ff6f 	bl	25cb4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   25dd6:	2201      	movs	r2, #1
   25dd8:	f10d 0107 	add.w	r1, sp, #7
   25ddc:	4620      	mov	r0, r4
   25dde:	f7ff ff69 	bl	25cb4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   25de2:	464a      	mov	r2, r9
   25de4:	4641      	mov	r1, r8
   25de6:	4620      	mov	r0, r4
   25de8:	f7ff ff64 	bl	25cb4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   25dec:	b13f      	cbz	r7, 25dfe <update+0xee>
   25dee:	f1ba 0f00 	cmp.w	sl, #0
   25df2:	d004      	beq.n	25dfe <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   25df4:	4652      	mov	r2, sl
   25df6:	4639      	mov	r1, r7
   25df8:	4620      	mov	r0, r4
   25dfa:	f7ff ff5b 	bl	25cb4 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   25dfe:	4622      	mov	r2, r4
   25e00:	2120      	movs	r1, #32
   25e02:	4630      	mov	r0, r6
   25e04:	f7ff ff5c 	bl	25cc0 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25e08:	2220      	movs	r2, #32
   25e0a:	4631      	mov	r1, r6
   25e0c:	4620      	mov	r0, r4
   25e0e:	f7ff ff10 	bl	25c32 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   25e12:	4620      	mov	r0, r4
   25e14:	f7ff ff41 	bl	25c9a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25e18:	2220      	movs	r2, #32
   25e1a:	4629      	mov	r1, r5
   25e1c:	4620      	mov	r0, r4
   25e1e:	f7ff ff49 	bl	25cb4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   25e22:	4622      	mov	r2, r4
   25e24:	2120      	movs	r1, #32
   25e26:	4628      	mov	r0, r5
   25e28:	f7ff ff4a 	bl	25cc0 <tc_hmac_final>
}
   25e2c:	b003      	add	sp, #12
   25e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025e32 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   25e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25e34:	460c      	mov	r4, r1
   25e36:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   25e38:	4605      	mov	r5, r0
   25e3a:	b1b0      	cbz	r0, 25e6a <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   25e3c:	b1b9      	cbz	r1, 25e6e <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   25e3e:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   25e40:	2220      	movs	r2, #32
   25e42:	2100      	movs	r1, #0
   25e44:	30f0      	adds	r0, #240	; 0xf0
   25e46:	f7ff fc36 	bl	256b6 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   25e4a:	2220      	movs	r2, #32
   25e4c:	2101      	movs	r1, #1
   25e4e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   25e52:	f7ff fc30 	bl	256b6 <_set>
	update(prng, personalization, plen, 0, 0);
   25e56:	4628      	mov	r0, r5
   25e58:	4633      	mov	r3, r6
   25e5a:	463a      	mov	r2, r7
   25e5c:	4621      	mov	r1, r4
   25e5e:	9600      	str	r6, [sp, #0]
   25e60:	f7ff ff56 	bl	25d10 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   25e64:	2001      	movs	r0, #1
	prng->countdown = 0;
   25e66:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   25e6a:	b003      	add	sp, #12
   25e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   25e6e:	4608      	mov	r0, r1
   25e70:	e7fb      	b.n	25e6a <tc_hmac_prng_init+0x38>

00025e72 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   25e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25e74:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   25e76:	4605      	mov	r5, r0
   25e78:	b180      	cbz	r0, 25e9c <tc_hmac_prng_reseed+0x2a>
   25e7a:	b179      	cbz	r1, 25e9c <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   25e7c:	2a1f      	cmp	r2, #31
   25e7e:	d90d      	bls.n	25e9c <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   25e80:	b153      	cbz	r3, 25e98 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   25e82:	b16c      	cbz	r4, 25ea0 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   25e84:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   25e86:	f7ff ff43 	bl	25d10 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   25e8a:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   25e8e:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   25e90:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   25e94:	b003      	add	sp, #12
   25e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   25e98:	9300      	str	r3, [sp, #0]
   25e9a:	e7f4      	b.n	25e86 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   25e9c:	2000      	movs	r0, #0
   25e9e:	e7f9      	b.n	25e94 <tc_hmac_prng_reseed+0x22>
   25ea0:	4620      	mov	r0, r4
   25ea2:	e7f7      	b.n	25e94 <tc_hmac_prng_reseed+0x22>

00025ea4 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   25ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25ea8:	460d      	mov	r5, r1
   25eaa:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   25eac:	4680      	mov	r8, r0
   25eae:	b3d8      	cbz	r0, 25f28 <tc_hmac_prng_generate+0x84>
   25eb0:	b3d2      	cbz	r2, 25f28 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   25eb2:	1e4b      	subs	r3, r1, #1
   25eb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   25eb8:	d236      	bcs.n	25f28 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   25eba:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   25ebe:	b3ab      	cbz	r3, 25f2c <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   25ec0:	3b01      	subs	r3, #1
   25ec2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25ec6:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25eca:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25ece:	2220      	movs	r2, #32
   25ed0:	4649      	mov	r1, r9
   25ed2:	4620      	mov	r0, r4
   25ed4:	f7ff fead 	bl	25c32 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   25ed8:	4620      	mov	r0, r4
   25eda:	f7ff fede 	bl	25c9a <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25ede:	2220      	movs	r2, #32
   25ee0:	4639      	mov	r1, r7
   25ee2:	4620      	mov	r0, r4
   25ee4:	f7ff fee6 	bl	25cb4 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   25ee8:	4622      	mov	r2, r4
   25eea:	2120      	movs	r1, #32
   25eec:	4638      	mov	r0, r7
   25eee:	f7ff fee7 	bl	25cc0 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   25ef2:	2d20      	cmp	r5, #32
   25ef4:	462e      	mov	r6, r5
   25ef6:	bf28      	it	cs
   25ef8:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   25efa:	4640      	mov	r0, r8
   25efc:	4633      	mov	r3, r6
   25efe:	463a      	mov	r2, r7
   25f00:	4631      	mov	r1, r6
   25f02:	f7ff fbcb 	bl	2569c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   25f06:	2d20      	cmp	r5, #32
   25f08:	bf38      	it	cc
   25f0a:	2520      	movcc	r5, #32
	while (outlen != 0) {
   25f0c:	3d20      	subs	r5, #32
		out += bufferlen;
   25f0e:	44b0      	add	r8, r6
	while (outlen != 0) {
   25f10:	d1dd      	bne.n	25ece <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   25f12:	4620      	mov	r0, r4
   25f14:	462b      	mov	r3, r5
   25f16:	462a      	mov	r2, r5
   25f18:	4629      	mov	r1, r5
   25f1a:	9500      	str	r5, [sp, #0]
   25f1c:	f7ff fef8 	bl	25d10 <update>

	return TC_CRYPTO_SUCCESS;
   25f20:	2001      	movs	r0, #1
}
   25f22:	b003      	add	sp, #12
   25f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   25f28:	2000      	movs	r0, #0
   25f2a:	e7fa      	b.n	25f22 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   25f2c:	f04f 30ff 	mov.w	r0, #4294967295
   25f30:	e7f7      	b.n	25f22 <tc_hmac_prng_generate+0x7e>

00025f32 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25f32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25f34:	ab0b      	add	r3, sp, #44	; 0x2c
   25f36:	9305      	str	r3, [sp, #20]
   25f38:	9303      	str	r3, [sp, #12]
   25f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25f3c:	2201      	movs	r2, #1
   25f3e:	9302      	str	r3, [sp, #8]
   25f40:	2300      	movs	r3, #0
   25f42:	4618      	mov	r0, r3
   25f44:	e9cd 3300 	strd	r3, r3, [sp]
   25f48:	f7e8 fa94 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   25f4c:	b007      	add	sp, #28
   25f4e:	f85d fb04 	ldr.w	pc, [sp], #4

00025f52 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   25f52:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   25f54:	6800      	ldr	r0, [r0, #0]
   25f56:	f7ea b91b 	b.w	10190 <z_arm_fatal_error>

00025f5a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   25f5a:	2100      	movs	r1, #0
   25f5c:	2001      	movs	r0, #1
   25f5e:	f7ea b917 	b.w	10190 <z_arm_fatal_error>

00025f62 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   25f62:	b508      	push	{r3, lr}
	handler();
   25f64:	f7ea f9c6 	bl	102f4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   25f68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   25f6c:	f7ea ba90 	b.w	10490 <z_arm_exc_exit>

00025f70 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   25f70:	6e83      	ldr	r3, [r0, #104]	; 0x68
   25f72:	f383 880b 	msr	PSPLIM, r3
}
   25f76:	4770      	bx	lr

00025f78 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25f78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25f7a:	ab0b      	add	r3, sp, #44	; 0x2c
   25f7c:	9305      	str	r3, [sp, #20]
   25f7e:	9303      	str	r3, [sp, #12]
   25f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25f82:	2201      	movs	r2, #1
   25f84:	9302      	str	r3, [sp, #8]
   25f86:	2300      	movs	r3, #0
   25f88:	4618      	mov	r0, r3
   25f8a:	e9cd 3300 	strd	r3, r3, [sp]
   25f8e:	f7e8 fa71 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   25f92:	b007      	add	sp, #28
   25f94:	f85d fb04 	ldr.w	pc, [sp], #4

00025f98 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   25f98:	4770      	bx	lr

00025f9a <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   25f9a:	4770      	bx	lr

00025f9c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   25f9c:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   25fa0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   25fa4:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   25fa6:	bf08      	it	eq
   25fa8:	f06f 0015 	mvneq.w	r0, #21
   25fac:	4770      	bx	lr

00025fae <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25fae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25fb0:	ab0b      	add	r3, sp, #44	; 0x2c
   25fb2:	9305      	str	r3, [sp, #20]
   25fb4:	9303      	str	r3, [sp, #12]
   25fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25fb8:	2201      	movs	r2, #1
   25fba:	9302      	str	r3, [sp, #8]
   25fbc:	2300      	movs	r3, #0
   25fbe:	4618      	mov	r0, r3
   25fc0:	e9cd 3300 	strd	r3, r3, [sp]
   25fc4:	f7e8 fa56 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   25fc8:	b007      	add	sp, #28
   25fca:	f85d fb04 	ldr.w	pc, [sp], #4

00025fce <mpu_configure_region>:
{
   25fce:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   25fd0:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   25fd2:	684b      	ldr	r3, [r1, #4]
{
   25fd4:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   25fd6:	890a      	ldrh	r2, [r1, #8]
   25fd8:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   25fda:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25fdc:	3b01      	subs	r3, #1
   25fde:	f024 041f 	bic.w	r4, r4, #31
   25fe2:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   25fe4:	f002 021f 	and.w	r2, r2, #31
   25fe8:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25fec:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   25ff0:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   25ff2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25ff6:	9303      	str	r3, [sp, #12]
   25ff8:	f7ea fe50 	bl	10c9c <region_allocate_and_init>
}
   25ffc:	b005      	add	sp, #20
   25ffe:	bd30      	pop	{r4, r5, pc}

00026000 <_stdout_hook_default>:
}
   26000:	f04f 30ff 	mov.w	r0, #4294967295
   26004:	4770      	bx	lr

00026006 <_stdin_hook_default>:
}
   26006:	2000      	movs	r0, #0
   26008:	4770      	bx	lr

0002600a <_read>:
{
   2600a:	4608      	mov	r0, r1
   2600c:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2600e:	f7eb b843 	b.w	11098 <z_impl_zephyr_read_stdin>

00026012 <_write>:
{
   26012:	4608      	mov	r0, r1
   26014:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   26016:	f7eb b853 	b.w	110c0 <z_impl_zephyr_write_stdout>

0002601a <_close>:
int _close(int file)
   2601a:	f04f 30ff 	mov.w	r0, #4294967295
   2601e:	4770      	bx	lr

00026020 <_lseek>:
}
   26020:	2000      	movs	r0, #0
   26022:	4770      	bx	lr

00026024 <_isatty>:
}
   26024:	2802      	cmp	r0, #2
   26026:	bfcc      	ite	gt
   26028:	2000      	movgt	r0, #0
   2602a:	2001      	movle	r0, #1
   2602c:	4770      	bx	lr

0002602e <_kill>:
}
   2602e:	2000      	movs	r0, #0
   26030:	4770      	bx	lr

00026032 <_getpid>:
}
   26032:	2000      	movs	r0, #0
   26034:	4770      	bx	lr

00026036 <_fstat>:
	st->st_mode = S_IFCHR;
   26036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2603a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2603c:	604b      	str	r3, [r1, #4]
}
   2603e:	4770      	bx	lr

00026040 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26040:	f7f9 b82c 	b.w	1f09c <z_impl_z_errno>

00026044 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   26044:	b530      	push	{r4, r5, lr}
   26046:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   26048:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   2604c:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2604e:	794b      	ldrb	r3, [r1, #5]
   26050:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   26054:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   26056:	220d      	movs	r2, #13
   26058:	2100      	movs	r1, #0
   2605a:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   2605e:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   26062:	f003 fcd8 	bl	29a16 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   26066:	aa02      	add	r2, sp, #8
   26068:	4611      	mov	r1, r2
   2606a:	4628      	mov	r0, r5
   2606c:	f000 fb46 	bl	266fc <bt_encrypt_le>
	if (err) {
   26070:	b110      	cbz	r0, 26078 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   26072:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   26074:	b007      	add	sp, #28
   26076:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   26078:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   2607a:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   2607c:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   26080:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   26082:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   26084:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   26086:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2608a:	f003 fc7a 	bl	29982 <memcmp>
   2608e:	fab0 f080 	clz	r0, r0
   26092:	0940      	lsrs	r0, r0, #5
   26094:	e7ee      	b.n	26074 <bt_rpa_irk_matches+0x30>

00026096 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26096:	b510      	push	{r4, lr}
   26098:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2609a:	7801      	ldrb	r1, [r0, #0]
   2609c:	7822      	ldrb	r2, [r4, #0]
{
   2609e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   260a0:	428a      	cmp	r2, r1
   260a2:	d00f      	beq.n	260c4 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   260a4:	4669      	mov	r1, sp
   260a6:	f7eb f93b 	bl	11320 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   260aa:	4620      	mov	r0, r4
   260ac:	a905      	add	r1, sp, #20
   260ae:	f7eb f937 	bl	11320 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   260b2:	2210      	movs	r2, #16
   260b4:	f10d 0115 	add.w	r1, sp, #21
   260b8:	f10d 0001 	add.w	r0, sp, #1
   260bc:	f003 fc61 	bl	29982 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   260c0:	b00a      	add	sp, #40	; 0x28
   260c2:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   260c4:	2a01      	cmp	r2, #1
   260c6:	d006      	beq.n	260d6 <bt_uuid_cmp+0x40>
   260c8:	2a02      	cmp	r2, #2
   260ca:	d007      	beq.n	260dc <bt_uuid_cmp+0x46>
   260cc:	b972      	cbnz	r2, 260ec <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   260ce:	8840      	ldrh	r0, [r0, #2]
   260d0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   260d2:	1ac0      	subs	r0, r0, r3
   260d4:	e7f4      	b.n	260c0 <bt_uuid_cmp+0x2a>
   260d6:	6840      	ldr	r0, [r0, #4]
   260d8:	6863      	ldr	r3, [r4, #4]
   260da:	e7fa      	b.n	260d2 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   260dc:	2210      	movs	r2, #16
   260de:	1c61      	adds	r1, r4, #1
   260e0:	3001      	adds	r0, #1
}
   260e2:	b00a      	add	sp, #40	; 0x28
   260e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   260e8:	f003 bc4b 	b.w	29982 <memcmp>
	switch (u1->type) {
   260ec:	f06f 0015 	mvn.w	r0, #21
   260f0:	e7e6      	b.n	260c0 <bt_uuid_cmp+0x2a>

000260f2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   260f2:	2a04      	cmp	r2, #4
   260f4:	d00a      	beq.n	2610c <bt_uuid_create+0x1a>
   260f6:	2a10      	cmp	r2, #16
   260f8:	d00d      	beq.n	26116 <bt_uuid_create+0x24>
   260fa:	2a02      	cmp	r2, #2
   260fc:	f04f 0300 	mov.w	r3, #0
   26100:	d115      	bne.n	2612e <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   26102:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26104:	880b      	ldrh	r3, [r1, #0]
   26106:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   26108:	2001      	movs	r0, #1
   2610a:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2610c:	2301      	movs	r3, #1
   2610e:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26110:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   26112:	6043      	str	r3, [r0, #4]
		break;
   26114:	e7f8      	b.n	26108 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   26116:	2302      	movs	r3, #2
   26118:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2611c:	f101 0310 	add.w	r3, r1, #16
   26120:	f851 2b04 	ldr.w	r2, [r1], #4
   26124:	4299      	cmp	r1, r3
   26126:	f840 2b04 	str.w	r2, [r0], #4
   2612a:	d1f9      	bne.n	26120 <bt_uuid_create+0x2e>
   2612c:	e7ec      	b.n	26108 <bt_uuid_create+0x16>
	switch (data_len) {
   2612e:	4618      	mov	r0, r3
}
   26130:	4770      	bx	lr

00026132 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   26132:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   26134:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   26136:	2106      	movs	r1, #6
{
   26138:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2613a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2613e:	f7ed fc1d 	bl	1397c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   26142:	b918      	cbnz	r0, 2614c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   26144:	79a3      	ldrb	r3, [r4, #6]
   26146:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2614a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2614c:	bd10      	pop	{r4, pc}

0002614e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2614e:	280f      	cmp	r0, #15
   26150:	d807      	bhi.n	26162 <bt_hci_evt_get_flags+0x14>
   26152:	280d      	cmp	r0, #13
   26154:	d80b      	bhi.n	2616e <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   26156:	2805      	cmp	r0, #5
   26158:	bf08      	it	eq
   2615a:	2003      	moveq	r0, #3
   2615c:	bf18      	it	ne
   2615e:	2002      	movne	r0, #2
   26160:	4770      	bx	lr
	switch (evt) {
   26162:	2813      	cmp	r0, #19
   26164:	d003      	beq.n	2616e <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   26166:	281a      	cmp	r0, #26
   26168:	bf08      	it	eq
   2616a:	2001      	moveq	r0, #1
   2616c:	e7f6      	b.n	2615c <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2616e:	2001      	movs	r0, #1
	}
}
   26170:	4770      	bx	lr

00026172 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   26172:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   26176:	b183      	cbz	r3, 2619a <update_sec_level+0x28>
   26178:	7b5a      	ldrb	r2, [r3, #13]
   2617a:	07d1      	lsls	r1, r2, #31
   2617c:	d50d      	bpl.n	2619a <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2617e:	06d2      	lsls	r2, r2, #27
   26180:	d50d      	bpl.n	2619e <update_sec_level+0x2c>
   26182:	7b1b      	ldrb	r3, [r3, #12]
   26184:	2b10      	cmp	r3, #16
   26186:	bf14      	ite	ne
   26188:	2303      	movne	r3, #3
   2618a:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2618c:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2618e:	7a80      	ldrb	r0, [r0, #10]
}
   26190:	4298      	cmp	r0, r3
   26192:	bf8c      	ite	hi
   26194:	2000      	movhi	r0, #0
   26196:	2001      	movls	r0, #1
   26198:	4770      	bx	lr
   2619a:	2302      	movs	r3, #2
   2619c:	e7f6      	b.n	2618c <update_sec_level+0x1a>
   2619e:	2303      	movs	r3, #3
   261a0:	e7f4      	b.n	2618c <update_sec_level+0x1a>

000261a2 <hci_vendor_event>:
}
   261a2:	4770      	bx	lr

000261a4 <atomic_or>:
{
   261a4:	4603      	mov	r3, r0
   261a6:	b510      	push	{r4, lr}
}
   261a8:	e8d3 0fef 	ldaex	r0, [r3]
   261ac:	ea40 0201 	orr.w	r2, r0, r1
   261b0:	e8c3 2fe4 	stlex	r4, r2, [r3]
   261b4:	2c00      	cmp	r4, #0
   261b6:	d1f7      	bne.n	261a8 <atomic_or+0x4>
   261b8:	bd10      	pop	{r4, pc}

000261ba <bt_addr_copy>:
   261ba:	680b      	ldr	r3, [r1, #0]
   261bc:	6003      	str	r3, [r0, #0]
   261be:	888b      	ldrh	r3, [r1, #4]
   261c0:	8083      	strh	r3, [r0, #4]
}
   261c2:	4770      	bx	lr

000261c4 <bt_addr_le_copy>:
   261c4:	680b      	ldr	r3, [r1, #0]
   261c6:	6003      	str	r3, [r0, #0]
   261c8:	888b      	ldrh	r3, [r1, #4]
   261ca:	8083      	strh	r3, [r0, #4]
   261cc:	798b      	ldrb	r3, [r1, #6]
   261ce:	7183      	strb	r3, [r0, #6]
}
   261d0:	4770      	bx	lr

000261d2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   261d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   261d4:	ab0b      	add	r3, sp, #44	; 0x2c
   261d6:	9305      	str	r3, [sp, #20]
   261d8:	9303      	str	r3, [sp, #12]
   261da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   261dc:	9302      	str	r3, [sp, #8]
   261de:	2300      	movs	r3, #0
   261e0:	4618      	mov	r0, r3
   261e2:	e9cd 3300 	strd	r3, r3, [sp]
   261e6:	f7e8 f945 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   261ea:	b007      	add	sp, #28
   261ec:	f85d fb04 	ldr.w	pc, [sp], #4

000261f0 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   261f0:	e8d0 3fef 	ldaex	r3, [r0]
   261f4:	400b      	ands	r3, r1
   261f6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   261fa:	2a00      	cmp	r2, #0
   261fc:	d1f8      	bne.n	261f0 <atomic_and.isra.0>
}
   261fe:	4770      	bx	lr

00026200 <sys_put_le64>:
	dst[1] = val >> 8;
   26200:	f3c0 2307 	ubfx	r3, r0, #8, #8
   26204:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   26206:	2300      	movs	r3, #0
   26208:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2620a:	0e00      	lsrs	r0, r0, #24
   2620c:	70d0      	strb	r0, [r2, #3]
   2620e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   26212:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   26214:	7093      	strb	r3, [r2, #2]
   26216:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26218:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2621a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2621c:	71d1      	strb	r1, [r2, #7]
}
   2621e:	4770      	bx	lr

00026220 <bt_hci_disconnect>:
{
   26220:	b570      	push	{r4, r5, r6, lr}
   26222:	4606      	mov	r6, r0
   26224:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   26226:	f240 4006 	movw	r0, #1030	; 0x406
   2622a:	2103      	movs	r1, #3
   2622c:	f7eb fd0e 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   26230:	4604      	mov	r4, r0
   26232:	b168      	cbz	r0, 26250 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   26234:	2103      	movs	r1, #3
   26236:	300c      	adds	r0, #12
   26238:	f7f3 fa46 	bl	196c8 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2623c:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2623e:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26240:	4621      	mov	r1, r4
}
   26242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26246:	2200      	movs	r2, #0
   26248:	f240 4006 	movw	r0, #1030	; 0x406
   2624c:	f7eb bd4c 	b.w	11ce8 <bt_hci_cmd_send_sync>
}
   26250:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26254:	bd70      	pop	{r4, r5, r6, pc}

00026256 <bt_le_set_data_len>:
{
   26256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26258:	4607      	mov	r7, r0
   2625a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2625c:	f242 0022 	movw	r0, #8226	; 0x2022
   26260:	2106      	movs	r1, #6
{
   26262:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26264:	f7eb fcf2 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   26268:	4604      	mov	r4, r0
   2626a:	b178      	cbz	r0, 2628c <bt_le_set_data_len+0x36>
   2626c:	2106      	movs	r1, #6
   2626e:	300c      	adds	r0, #12
   26270:	f7f3 fa2a 	bl	196c8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26274:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   26276:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   26278:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2627a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2627c:	4621      	mov	r1, r4
}
   2627e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   26282:	2200      	movs	r2, #0
   26284:	f242 0022 	movw	r0, #8226	; 0x2022
   26288:	f7eb bd2e 	b.w	11ce8 <bt_hci_cmd_send_sync>
}
   2628c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026292 <bt_le_set_phy>:
{
   26292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26296:	4681      	mov	r9, r0
   26298:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2629a:	f242 0032 	movw	r0, #8242	; 0x2032
   2629e:	2107      	movs	r1, #7
{
   262a0:	4617      	mov	r7, r2
   262a2:	461e      	mov	r6, r3
   262a4:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   262a8:	f7eb fcd0 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   262ac:	4605      	mov	r5, r0
   262ae:	b1a0      	cbz	r0, 262da <bt_le_set_phy+0x48>
   262b0:	2107      	movs	r1, #7
   262b2:	300c      	adds	r0, #12
   262b4:	f7f3 fa08 	bl	196c8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   262b8:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   262bc:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   262c0:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   262c2:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   262c4:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   262c6:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   262ca:	4629      	mov	r1, r5
}
   262cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   262d0:	2200      	movs	r2, #0
   262d2:	f242 0032 	movw	r0, #8242	; 0x2032
   262d6:	f7eb bd07 	b.w	11ce8 <bt_hci_cmd_send_sync>
}
   262da:	f06f 0068 	mvn.w	r0, #104	; 0x68
   262de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000262e2 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   262e2:	68c0      	ldr	r0, [r0, #12]
   262e4:	f7eb bdca 	b.w	11e7c <bt_hci_le_enh_conn_complete>

000262e8 <bt_le_conn_params_valid>:
{
   262e8:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   262ea:	8803      	ldrh	r3, [r0, #0]
   262ec:	8842      	ldrh	r2, [r0, #2]
   262ee:	4293      	cmp	r3, r2
   262f0:	d819      	bhi.n	26326 <bt_le_conn_params_valid+0x3e>
   262f2:	2b05      	cmp	r3, #5
   262f4:	d917      	bls.n	26326 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   262f6:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   262fa:	d814      	bhi.n	26326 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   262fc:	8883      	ldrh	r3, [r0, #4]
   262fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   26302:	d210      	bcs.n	26326 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   26304:	f640 4476 	movw	r4, #3190	; 0xc76
   26308:	88c0      	ldrh	r0, [r0, #6]
   2630a:	f1a0 010a 	sub.w	r1, r0, #10
   2630e:	b289      	uxth	r1, r1
   26310:	42a1      	cmp	r1, r4
   26312:	d808      	bhi.n	26326 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   26314:	3301      	adds	r3, #1
   26316:	b29b      	uxth	r3, r3
   26318:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2631a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2631e:	bf34      	ite	cc
   26320:	2001      	movcc	r0, #1
   26322:	2000      	movcs	r0, #0
}
   26324:	bd10      	pop	{r4, pc}
		return false;
   26326:	2000      	movs	r0, #0
   26328:	e7fc      	b.n	26324 <bt_le_conn_params_valid+0x3c>

0002632a <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2632a:	f240 3041 	movw	r0, #833	; 0x341
   2632e:	4770      	bx	lr

00026330 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   26330:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   26332:	f7f2 fd1b 	bl	18d6c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   26336:	b118      	cbz	r0, 26340 <bt_addr_le_is_bonded+0x10>
   26338:	89c0      	ldrh	r0, [r0, #14]
   2633a:	3800      	subs	r0, #0
   2633c:	bf18      	it	ne
   2633e:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   26340:	bd08      	pop	{r3, pc}

00026342 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   26342:	2207      	movs	r2, #7
{
   26344:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   26346:	f003 fb1c 	bl	29982 <memcmp>
}
   2634a:	fab0 f080 	clz	r0, r0
   2634e:	0940      	lsrs	r0, r0, #5
   26350:	bd08      	pop	{r3, pc}

00026352 <bt_addr_copy>:
   26352:	680b      	ldr	r3, [r1, #0]
   26354:	6003      	str	r3, [r0, #0]
   26356:	888b      	ldrh	r3, [r1, #4]
   26358:	8083      	strh	r3, [r0, #4]
}
   2635a:	4770      	bx	lr

0002635c <bt_addr_le_copy>:
   2635c:	680b      	ldr	r3, [r1, #0]
   2635e:	6003      	str	r3, [r0, #0]
   26360:	888b      	ldrh	r3, [r1, #4]
   26362:	8083      	strh	r3, [r0, #4]
   26364:	798b      	ldrb	r3, [r1, #6]
   26366:	7183      	strb	r3, [r0, #6]
}
   26368:	4770      	bx	lr

0002636a <hci_id_add>:
{
   2636a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2636c:	460f      	mov	r7, r1
   2636e:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   26370:	bb30      	cbnz	r0, 263c0 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   26372:	2127      	movs	r1, #39	; 0x27
   26374:	f242 0027 	movw	r0, #8231	; 0x2027
   26378:	f7eb fc68 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   2637c:	4605      	mov	r5, r0
   2637e:	b310      	cbz	r0, 263c6 <hci_id_add+0x5c>
   26380:	2127      	movs	r1, #39	; 0x27
   26382:	300c      	adds	r0, #12
   26384:	f7f3 f9a0 	bl	196c8 <net_buf_simple_add>
   26388:	4622      	mov	r2, r4
   2638a:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2638c:	4639      	mov	r1, r7
   2638e:	f7ff ffe5 	bl	2635c <bt_addr_le_copy>
   26392:	1dc3      	adds	r3, r0, #7
   26394:	f104 0110 	add.w	r1, r4, #16
   26398:	f852 0b04 	ldr.w	r0, [r2], #4
   2639c:	428a      	cmp	r2, r1
   2639e:	f843 0b04 	str.w	r0, [r3], #4
   263a2:	d1f9      	bne.n	26398 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   263a4:	2210      	movs	r2, #16
   263a6:	2100      	movs	r1, #0
   263a8:	f106 0017 	add.w	r0, r6, #23
   263ac:	f003 fb33 	bl	29a16 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   263b0:	4629      	mov	r1, r5
}
   263b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   263b6:	2200      	movs	r2, #0
   263b8:	f242 0027 	movw	r0, #8231	; 0x2027
   263bc:	f7eb bc94 	b.w	11ce8 <bt_hci_cmd_send_sync>
		return -EINVAL;
   263c0:	f06f 0015 	mvn.w	r0, #21
}
   263c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   263c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   263ca:	e7fb      	b.n	263c4 <hci_id_add+0x5a>

000263cc <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   263cc:	7a03      	ldrb	r3, [r0, #8]
{
   263ce:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   263d0:	075b      	lsls	r3, r3, #29
   263d2:	d505      	bpl.n	263e0 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   263d4:	4601      	mov	r1, r0
   263d6:	322a      	adds	r2, #42	; 0x2a
   263d8:	f811 0b01 	ldrb.w	r0, [r1], #1
   263dc:	f7ff bfc5 	b.w	2636a <hci_id_add>
}
   263e0:	4770      	bx	lr

000263e2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   263e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   263e4:	ab0b      	add	r3, sp, #44	; 0x2c
   263e6:	9305      	str	r3, [sp, #20]
   263e8:	9303      	str	r3, [sp, #12]
   263ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   263ec:	9302      	str	r3, [sp, #8]
   263ee:	2300      	movs	r3, #0
   263f0:	4618      	mov	r0, r3
   263f2:	e9cd 3300 	strd	r3, r3, [sp]
   263f6:	f7e8 f83d 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   263fa:	b007      	add	sp, #28
   263fc:	f85d fb04 	ldr.w	pc, [sp], #4

00026400 <addr_res_enable>:
{
   26400:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   26402:	2101      	movs	r1, #1
{
   26404:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   26406:	f242 002d 	movw	r0, #8237	; 0x202d
   2640a:	f7eb fc1f 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   2640e:	4604      	mov	r4, r0
   26410:	b158      	cbz	r0, 2642a <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   26412:	4629      	mov	r1, r5
   26414:	300c      	adds	r0, #12
   26416:	f001 fd58 	bl	27eca <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2641a:	4621      	mov	r1, r4
}
   2641c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   26420:	2200      	movs	r2, #0
   26422:	f242 002d 	movw	r0, #8237	; 0x202d
   26426:	f7eb bc5f 	b.w	11ce8 <bt_hci_cmd_send_sync>
}
   2642a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2642e:	bd38      	pop	{r3, r4, r5, pc}

00026430 <adv_unpause_enabled>:
{
   26430:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26432:	f100 0310 	add.w	r3, r0, #16
   26436:	e8d3 2fef 	ldaex	r2, [r3]
   2643a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2643e:	e8c3 1fe4 	stlex	r4, r1, [r3]
   26442:	2c00      	cmp	r4, #0
   26444:	d1f7      	bne.n	26436 <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   26446:	0413      	lsls	r3, r2, #16
   26448:	d503      	bpl.n	26452 <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   2644a:	2101      	movs	r1, #1
}
   2644c:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2644e:	f000 b940 	b.w	266d2 <bt_le_adv_set_enable>
}
   26452:	bc10      	pop	{r4}
   26454:	4770      	bx	lr

00026456 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   26456:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2645a:	e8d3 2faf 	lda	r2, [r3]
   2645e:	0612      	lsls	r2, r2, #24
   26460:	d50a      	bpl.n	26478 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26462:	e8d3 1fef 	ldaex	r1, [r3]
   26466:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   2646a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2646e:	2a00      	cmp	r2, #0
   26470:	d1f7      	bne.n	26462 <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   26472:	2100      	movs	r1, #0
   26474:	f000 b92d 	b.w	266d2 <bt_le_adv_set_enable>
}
   26478:	4770      	bx	lr

0002647a <bt_lookup_id_addr>:
{
   2647a:	b510      	push	{r4, lr}
   2647c:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2647e:	b930      	cbnz	r0, 2648e <bt_lookup_id_addr+0x14>
   26480:	b119      	cbz	r1, 2648a <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   26482:	f7f2 fc1b 	bl	18cbc <bt_keys_find_irk>
		if (keys) {
   26486:	b100      	cbz	r0, 2648a <bt_lookup_id_addr+0x10>
			return &keys->addr;
   26488:	1c44      	adds	r4, r0, #1
}
   2648a:	4620      	mov	r0, r4
   2648c:	bd10      	pop	{r4, pc}
		return NULL;
   2648e:	2400      	movs	r4, #0
   26490:	e7fb      	b.n	2648a <bt_lookup_id_addr+0x10>

00026492 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   26492:	b118      	cbz	r0, 2649c <bt_id_set_adv_random_addr+0xa>
   26494:	b111      	cbz	r1, 2649c <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   26496:	4608      	mov	r0, r1
   26498:	f7ec bb08 	b.w	12aac <set_random_address>
}
   2649c:	f06f 0015 	mvn.w	r0, #21
   264a0:	4770      	bx	lr

000264a2 <bt_id_set_adv_private_addr>:
{
   264a2:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   264a4:	4604      	mov	r4, r0
   264a6:	b180      	cbz	r0, 264ca <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   264a8:	2106      	movs	r1, #6
   264aa:	4668      	mov	r0, sp
   264ac:	f7ed fa66 	bl	1397c <bt_rand>
	if (err) {
   264b0:	b948      	cbnz	r0, 264c6 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   264b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   264b6:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   264b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   264bc:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   264be:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   264c2:	f7ff ffe6 	bl	26492 <bt_id_set_adv_random_addr>
}
   264c6:	b002      	add	sp, #8
   264c8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   264ca:	f06f 0015 	mvn.w	r0, #21
   264ce:	e7fa      	b.n	264c6 <bt_id_set_adv_private_addr+0x24>

000264d0 <bt_id_adv_random_addr_check>:
}
   264d0:	3800      	subs	r0, #0
   264d2:	bf18      	it	ne
   264d4:	2001      	movne	r0, #1
   264d6:	4770      	bx	lr

000264d8 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   264d8:	7a03      	ldrb	r3, [r0, #8]
   264da:	07d9      	lsls	r1, r3, #31
   264dc:	d504      	bpl.n	264e8 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   264de:	f023 0301 	bic.w	r3, r3, #1
   264e2:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   264e4:	f7ec bb9a 	b.w	12c1c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   264e8:	0799      	lsls	r1, r3, #30
   264ea:	d504      	bpl.n	264f6 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   264ec:	f023 0302 	bic.w	r3, r3, #2
   264f0:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   264f2:	f7ec bc5f 	b.w	12db4 <bt_id_del>
}
   264f6:	4770      	bx	lr

000264f8 <get_adv_channel_map>:
{
   264f8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   264fa:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   264fe:	bf0c      	ite	eq
   26500:	2007      	moveq	r0, #7
   26502:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   26504:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   26506:	bf48      	it	mi
   26508:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2650c:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2650e:	bf48      	it	mi
   26510:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   26514:	4770      	bx	lr

00026516 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26516:	e8d0 0faf 	lda	r0, [r0]
}
   2651a:	4770      	bx	lr

0002651c <atomic_and>:
{
   2651c:	4603      	mov	r3, r0
   2651e:	b510      	push	{r4, lr}
}
   26520:	e8d3 0fef 	ldaex	r0, [r3]
   26524:	ea00 0201 	and.w	r2, r0, r1
   26528:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2652c:	2c00      	cmp	r4, #0
   2652e:	d1f7      	bne.n	26520 <atomic_and+0x4>
   26530:	bd10      	pop	{r4, pc}

00026532 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26532:	680b      	ldr	r3, [r1, #0]
   26534:	6003      	str	r3, [r0, #0]
   26536:	888b      	ldrh	r3, [r1, #4]
   26538:	8083      	strh	r3, [r0, #4]
   2653a:	798b      	ldrb	r3, [r1, #6]
   2653c:	7183      	strb	r3, [r0, #6]
   2653e:	4770      	bx	lr

00026540 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26542:	ab0b      	add	r3, sp, #44	; 0x2c
   26544:	9305      	str	r3, [sp, #20]
   26546:	9303      	str	r3, [sp, #12]
   26548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2654a:	9302      	str	r3, [sp, #8]
   2654c:	2300      	movs	r3, #0
   2654e:	4618      	mov	r0, r3
   26550:	e9cd 3300 	strd	r3, r3, [sp]
   26554:	f7e7 ff8e 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   26558:	b007      	add	sp, #28
   2655a:	f85d fb04 	ldr.w	pc, [sp], #4

0002655e <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2655e:	2301      	movs	r3, #1
{
   26560:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26562:	fa03 f101 	lsl.w	r1, r3, r1
{
   26566:	4604      	mov	r4, r0
	if (val) {
   26568:	b142      	cbz	r2, 2657c <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2656a:	e8d4 3fef 	ldaex	r3, [r4]
   2656e:	430b      	orrs	r3, r1
   26570:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26574:	2a00      	cmp	r2, #0
   26576:	d1f8      	bne.n	2656a <atomic_set_bit_to+0xc>
	}
}
   26578:	bc10      	pop	{r4}
   2657a:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2657c:	43c9      	mvns	r1, r1
}
   2657e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26580:	f7ff bfcc 	b.w	2651c <atomic_and>

00026584 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   26584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26588:	b087      	sub	sp, #28
   2658a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2658e:	4605      	mov	r5, r0
   26590:	460c      	mov	r4, r1
   26592:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   26594:	2100      	movs	r1, #0
   26596:	2210      	movs	r2, #16
   26598:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2659a:	461f      	mov	r7, r3
   2659c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   265a0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   265a4:	f003 fa37 	bl	29a16 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   265a8:	b9ce      	cbnz	r6, 265de <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   265aa:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   265ae:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   265b0:	f242 0008 	movw	r0, #8200	; 0x2008
   265b4:	a902      	add	r1, sp, #8
   265b6:	f7ec fe6b 	bl	13290 <hci_set_ad>
		if (err) {
   265ba:	4604      	mov	r4, r0
   265bc:	b958      	cbnz	r0, 265d6 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   265be:	f1ba 0f00 	cmp.w	sl, #0
   265c2:	d13a      	bne.n	2663a <le_adv_update.constprop.0+0xb6>
   265c4:	3510      	adds	r5, #16
   265c6:	e8d5 3fef 	ldaex	r3, [r5]
   265ca:	f043 0304 	orr.w	r3, r3, #4
   265ce:	e8c5 3fe2 	stlex	r2, r3, [r5]
   265d2:	2a00      	cmp	r2, #0
   265d4:	d1f7      	bne.n	265c6 <le_adv_update.constprop.0+0x42>
}
   265d6:	4620      	mov	r0, r4
   265d8:	b007      	add	sp, #28
   265da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   265de:	f7ec fa1b 	bl	12a18 <bt_get_name>
   265e2:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   265e4:	b9e4      	cbnz	r4, 26620 <le_adv_update.constprop.0+0x9c>
   265e6:	bb37      	cbnz	r7, 26636 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   265e8:	4658      	mov	r0, fp
   265ea:	f7e2 feb9 	bl	9360 <strlen>
   265ee:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   265f0:	2e01      	cmp	r6, #1
		d[0].data = ad;
   265f2:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   265f6:	f88d 3000 	strb.w	r3, [sp]
   265fa:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   265fe:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   26602:	d1d4      	bne.n	265ae <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   26604:	2202      	movs	r2, #2
			d[1].data = &data;
   26606:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2660a:	9605      	str	r6, [sp, #20]
			d_len = 2;
   2660c:	e7d0      	b.n	265b0 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2660e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   26612:	3a08      	subs	r2, #8
   26614:	2a01      	cmp	r2, #1
   26616:	d924      	bls.n	26662 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   26618:	3301      	adds	r3, #1
   2661a:	4598      	cmp	r8, r3
   2661c:	d1f7      	bne.n	2660e <le_adv_update.constprop.0+0x8a>
   2661e:	e7e2      	b.n	265e6 <le_adv_update.constprop.0+0x62>
   26620:	2300      	movs	r3, #0
   26622:	e7fa      	b.n	2661a <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   26624:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   26628:	3a08      	subs	r2, #8
   2662a:	2a01      	cmp	r2, #1
   2662c:	d919      	bls.n	26662 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2662e:	3301      	adds	r3, #1
   26630:	4599      	cmp	r9, r3
   26632:	d1f7      	bne.n	26624 <le_adv_update.constprop.0+0xa0>
   26634:	e7d8      	b.n	265e8 <le_adv_update.constprop.0+0x64>
   26636:	2300      	movs	r3, #0
   26638:	e7fa      	b.n	26630 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   2663a:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   2663c:	2e02      	cmp	r6, #2
			d[1].len = 1;
   2663e:	bf08      	it	eq
   26640:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   26642:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   26646:	bf08      	it	eq
   26648:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2664a:	a902      	add	r1, sp, #8
			d[1].data = &data;
   2664c:	bf08      	it	eq
   2664e:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   26652:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   26656:	f7ec fe1b 	bl	13290 <hci_set_ad>
		if (err) {
   2665a:	2800      	cmp	r0, #0
   2665c:	d0b2      	beq.n	265c4 <le_adv_update.constprop.0+0x40>
   2665e:	4604      	mov	r4, r0
   26660:	e7b9      	b.n	265d6 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   26662:	f06f 0415 	mvn.w	r4, #21
   26666:	e7b6      	b.n	265d6 <le_adv_update.constprop.0+0x52>

00026668 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   26668:	6843      	ldr	r3, [r0, #4]
   2666a:	f013 0008 	ands.w	r0, r3, #8
   2666e:	d00a      	beq.n	26686 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   26670:	035a      	lsls	r2, r3, #13
   26672:	d407      	bmi.n	26684 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   26674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   26678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2667c:	bf14      	ite	ne
   2667e:	2002      	movne	r0, #2
   26680:	2001      	moveq	r0, #1
   26682:	4770      	bx	lr
   26684:	2001      	movs	r0, #1
}
   26686:	4770      	bx	lr

00026688 <bt_le_adv_set_enable_legacy>:
{
   26688:	b570      	push	{r4, r5, r6, lr}
   2668a:	4606      	mov	r6, r0
   2668c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2668e:	f242 000a 	movw	r0, #8202	; 0x200a
   26692:	2101      	movs	r1, #1
{
   26694:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   26696:	f7eb fad9 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   2669a:	4604      	mov	r4, r0
   2669c:	b1b0      	cbz	r0, 266cc <bt_le_adv_set_enable_legacy+0x44>
   2669e:	300c      	adds	r0, #12
	if (enable) {
   266a0:	b195      	cbz	r5, 266c8 <bt_le_adv_set_enable_legacy+0x40>
   266a2:	2101      	movs	r1, #1
   266a4:	f001 fc11 	bl	27eca <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   266a8:	4620      	mov	r0, r4
   266aa:	f106 0210 	add.w	r2, r6, #16
   266ae:	a903      	add	r1, sp, #12
   266b0:	2307      	movs	r3, #7
   266b2:	9500      	str	r5, [sp, #0]
   266b4:	f7eb fab8 	bl	11c28 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   266b8:	2200      	movs	r2, #0
   266ba:	4621      	mov	r1, r4
   266bc:	f242 000a 	movw	r0, #8202	; 0x200a
   266c0:	f7eb fb12 	bl	11ce8 <bt_hci_cmd_send_sync>
}
   266c4:	b006      	add	sp, #24
   266c6:	bd70      	pop	{r4, r5, r6, pc}
   266c8:	4629      	mov	r1, r5
   266ca:	e7eb      	b.n	266a4 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   266cc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   266d0:	e7f8      	b.n	266c4 <bt_le_adv_set_enable_legacy+0x3c>

000266d2 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   266d2:	f7ff bfd9 	b.w	26688 <bt_le_adv_set_enable_legacy>

000266d6 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   266d6:	3018      	adds	r0, #24
   266d8:	f7fa b9d8 	b.w	20a8c <k_work_cancel_delayable>

000266dc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   266dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   266de:	ab0b      	add	r3, sp, #44	; 0x2c
   266e0:	9305      	str	r3, [sp, #20]
   266e2:	9303      	str	r3, [sp, #12]
   266e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   266e6:	2201      	movs	r2, #1
   266e8:	9302      	str	r3, [sp, #8]
   266ea:	2300      	movs	r3, #0
   266ec:	4618      	mov	r0, r3
   266ee:	e9cd 3300 	strd	r3, r3, [sp]
   266f2:	f7e7 febf 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   266f6:	b007      	add	sp, #28
   266f8:	f85d fb04 	ldr.w	pc, [sp], #4

000266fc <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   266fc:	b530      	push	{r4, r5, lr}
   266fe:	460d      	mov	r5, r1
   26700:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   26702:	4601      	mov	r1, r0
{
   26704:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   26706:	b310      	cbz	r0, 2674e <bt_encrypt_le+0x52>
   26708:	b30d      	cbz	r5, 2674e <bt_encrypt_le+0x52>
   2670a:	b302      	cbz	r2, 2674e <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   2670c:	4668      	mov	r0, sp
   2670e:	f7ed f8e3 	bl	138d8 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   26712:	4669      	mov	r1, sp
   26714:	a804      	add	r0, sp, #16
   26716:	f7e9 fbb3 	bl	fe80 <tc_aes128_set_encrypt_key>
   2671a:	b1c0      	cbz	r0, 2674e <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   2671c:	4629      	mov	r1, r5
   2671e:	4668      	mov	r0, sp
   26720:	f7ed f8da 	bl	138d8 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   26724:	4669      	mov	r1, sp
   26726:	4620      	mov	r0, r4
   26728:	aa04      	add	r2, sp, #16
   2672a:	f7ff f88e 	bl	2584a <tc_aes_encrypt>
   2672e:	b170      	cbz	r0, 2674e <bt_encrypt_le+0x52>
   26730:	1e63      	subs	r3, r4, #1
   26732:	f104 0210 	add.w	r2, r4, #16
   26736:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   26738:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2673c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   26740:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26742:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   26744:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   26746:	d1f7      	bne.n	26738 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   26748:	2000      	movs	r0, #0
}
   2674a:	b031      	add	sp, #196	; 0xc4
   2674c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2674e:	f06f 0015 	mvn.w	r0, #21
   26752:	e7fa      	b.n	2674a <bt_encrypt_le+0x4e>

00026754 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26756:	ab0b      	add	r3, sp, #44	; 0x2c
   26758:	9305      	str	r3, [sp, #20]
   2675a:	9303      	str	r3, [sp, #12]
   2675c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2675e:	9302      	str	r3, [sp, #8]
   26760:	2300      	movs	r3, #0
   26762:	4618      	mov	r0, r3
   26764:	e9cd 3300 	strd	r3, r3, [sp]
   26768:	f7e7 fe84 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   2676c:	b007      	add	sp, #28
   2676e:	f85d fb04 	ldr.w	pc, [sp], #4

00026772 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26772:	2200      	movs	r2, #0
	return list->head;
   26774:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26776:	b90b      	cbnz	r3, 2677c <sys_slist_find_and_remove+0xa>
   26778:	4618      	mov	r0, r3
   2677a:	4770      	bx	lr
   2677c:	428b      	cmp	r3, r1
   2677e:	d110      	bne.n	267a2 <sys_slist_find_and_remove+0x30>
	return node->next;
   26780:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26782:	b942      	cbnz	r2, 26796 <sys_slist_find_and_remove+0x24>
   26784:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   26786:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26788:	4291      	cmp	r1, r2
   2678a:	d100      	bne.n	2678e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2678c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2678e:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26790:	2001      	movs	r0, #1
	parent->next = child;
   26792:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26794:	4770      	bx	lr
	parent->next = child;
   26796:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26798:	6843      	ldr	r3, [r0, #4]
   2679a:	4299      	cmp	r1, r3
	list->tail = node;
   2679c:	bf08      	it	eq
   2679e:	6042      	streq	r2, [r0, #4]
}
   267a0:	e7f5      	b.n	2678e <sys_slist_find_and_remove+0x1c>
	return node->next;
   267a2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   267a4:	681b      	ldr	r3, [r3, #0]
   267a6:	e7e6      	b.n	26776 <sys_slist_find_and_remove+0x4>

000267a8 <atomic_and>:
{
   267a8:	4603      	mov	r3, r0
   267aa:	b510      	push	{r4, lr}
}
   267ac:	e8d3 0fef 	ldaex	r0, [r3]
   267b0:	ea00 0201 	and.w	r2, r0, r1
   267b4:	e8c3 2fe4 	stlex	r4, r2, [r3]
   267b8:	2c00      	cmp	r4, #0
   267ba:	d1f7      	bne.n	267ac <atomic_and+0x4>
   267bc:	bd10      	pop	{r4, pc}

000267be <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   267be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   267c0:	ab0b      	add	r3, sp, #44	; 0x2c
   267c2:	9305      	str	r3, [sp, #20]
   267c4:	9303      	str	r3, [sp, #12]
   267c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   267c8:	9302      	str	r3, [sp, #8]
   267ca:	2300      	movs	r3, #0
   267cc:	4618      	mov	r0, r3
   267ce:	e9cd 3300 	strd	r3, r3, [sp]
   267d2:	f7e7 fe4f 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   267d6:	b007      	add	sp, #28
   267d8:	f85d fb04 	ldr.w	pc, [sp], #4

000267dc <tx_complete_work>:
	tx_notify(conn);
   267dc:	3828      	subs	r0, #40	; 0x28
   267de:	f7ed ba5d 	b.w	13c9c <tx_notify>

000267e2 <bt_conn_reset_rx_state>:
{
   267e2:	b510      	push	{r4, lr}
   267e4:	4604      	mov	r4, r0
	if (!conn->rx) {
   267e6:	6900      	ldr	r0, [r0, #16]
   267e8:	b118      	cbz	r0, 267f2 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   267ea:	f7f2 fe4b 	bl	19484 <net_buf_unref>
	conn->rx = NULL;
   267ee:	2300      	movs	r3, #0
   267f0:	6123      	str	r3, [r4, #16]
}
   267f2:	bd10      	pop	{r4, pc}

000267f4 <conn_lookup_handle>:
{
   267f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   267f8:	4607      	mov	r7, r0
   267fa:	460e      	mov	r6, r1
   267fc:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   267fe:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   26800:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   26804:	42b4      	cmp	r4, r6
   26806:	d103      	bne.n	26810 <conn_lookup_handle+0x1c>
	return NULL;
   26808:	2300      	movs	r3, #0
}
   2680a:	4618      	mov	r0, r3
   2680c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   26810:	fb09 7004 	mla	r0, r9, r4, r7
   26814:	f7ed fcf4 	bl	14200 <bt_conn_ref>
   26818:	4603      	mov	r3, r0
		if (!conn) {
   2681a:	b158      	cbz	r0, 26834 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2681c:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2681e:	2d01      	cmp	r5, #1
   26820:	d002      	beq.n	26828 <conn_lookup_handle+0x34>
   26822:	3d07      	subs	r5, #7
   26824:	2d01      	cmp	r5, #1
   26826:	d803      	bhi.n	26830 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   26828:	881a      	ldrh	r2, [r3, #0]
   2682a:	4542      	cmp	r2, r8
   2682c:	d0ed      	beq.n	2680a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2682e:	4618      	mov	r0, r3
   26830:	f7ed fd0e 	bl	14250 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   26834:	3401      	adds	r4, #1
   26836:	e7e5      	b.n	26804 <conn_lookup_handle+0x10>

00026838 <bt_conn_connected>:
{
   26838:	b510      	push	{r4, lr}
   2683a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2683c:	f7ee fa42 	bl	14cc4 <bt_l2cap_connected>
	notify_connected(conn);
   26840:	4620      	mov	r0, r4
}
   26842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   26846:	f7ed b9f3 	b.w	13c30 <notify_connected>

0002684a <bt_conn_disconnect>:
{
   2684a:	b510      	push	{r4, lr}
	switch (conn->state) {
   2684c:	7b43      	ldrb	r3, [r0, #13]
{
   2684e:	4604      	mov	r4, r0
	switch (conn->state) {
   26850:	3b02      	subs	r3, #2
   26852:	2b06      	cmp	r3, #6
   26854:	d816      	bhi.n	26884 <bt_conn_disconnect+0x3a>
   26856:	e8df f003 	tbb	[pc, r3]
   2685a:	1504      	.short	0x1504
   2685c:	0b091515 	.word	0x0b091515
   26860:	09          	.byte	0x09
   26861:	00          	.byte	0x00
		conn->err = reason;
   26862:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   26864:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   26866:	4620      	mov	r0, r4
   26868:	f7ed fd2a 	bl	142c0 <bt_conn_set_state>
{
   2686c:	2000      	movs	r0, #0
}
   2686e:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   26870:	8800      	ldrh	r0, [r0, #0]
   26872:	f7ff fcd5 	bl	26220 <bt_hci_disconnect>
	if (err) {
   26876:	2800      	cmp	r0, #0
   26878:	d1f9      	bne.n	2686e <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2687a:	7b63      	ldrb	r3, [r4, #13]
   2687c:	2b07      	cmp	r3, #7
   2687e:	d1f5      	bne.n	2686c <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   26880:	2108      	movs	r1, #8
   26882:	e7f0      	b.n	26866 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   26884:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   26888:	e7f1      	b.n	2686e <bt_conn_disconnect+0x24>

0002688a <bt_conn_set_security>:
{
   2688a:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2688c:	7b43      	ldrb	r3, [r0, #13]
{
   2688e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   26890:	2b07      	cmp	r3, #7
{
   26892:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   26894:	d122      	bne.n	268dc <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   26896:	7a43      	ldrb	r3, [r0, #9]
   26898:	428b      	cmp	r3, r1
   2689a:	d215      	bcs.n	268c8 <bt_conn_set_security+0x3e>
   2689c:	7a83      	ldrb	r3, [r0, #10]
   2689e:	428b      	cmp	r3, r1
   268a0:	d212      	bcs.n	268c8 <bt_conn_set_security+0x3e>
	if (val) {
   268a2:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   268a4:	f100 0004 	add.w	r0, r0, #4
   268a8:	d510      	bpl.n	268cc <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   268aa:	e8d0 3fef 	ldaex	r3, [r0]
   268ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   268b2:	e8c0 3fe2 	stlex	r2, r3, [r0]
   268b6:	2a00      	cmp	r2, #0
   268b8:	d1f7      	bne.n	268aa <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   268ba:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   268be:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   268c0:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   268c2:	f7f1 fb9f 	bl	18004 <bt_smp_start_security>
	if (err) {
   268c6:	b930      	cbnz	r0, 268d6 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   268c8:	2000      	movs	r0, #0
}
   268ca:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   268cc:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   268d0:	f7ff ff6a 	bl	267a8 <atomic_and>
   268d4:	e7f1      	b.n	268ba <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   268d6:	7a63      	ldrb	r3, [r4, #9]
   268d8:	72a3      	strb	r3, [r4, #10]
   268da:	e7f6      	b.n	268ca <bt_conn_set_security+0x40>
		return -ENOTCONN;
   268dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   268e0:	e7f3      	b.n	268ca <bt_conn_set_security+0x40>

000268e2 <bt_conn_get_security>:
}
   268e2:	7a40      	ldrb	r0, [r0, #9]
   268e4:	4770      	bx	lr

000268e6 <bt_conn_is_peer_addr_le>:
{
   268e6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   268e8:	7a03      	ldrb	r3, [r0, #8]
{
   268ea:	4604      	mov	r4, r0
	if (id != conn->id) {
   268ec:	428b      	cmp	r3, r1
{
   268ee:	4615      	mov	r5, r2
	if (id != conn->id) {
   268f0:	d115      	bne.n	2691e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   268f2:	f100 0190 	add.w	r1, r0, #144	; 0x90
   268f6:	2207      	movs	r2, #7
   268f8:	4628      	mov	r0, r5
   268fa:	f003 f842 	bl	29982 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   268fe:	b180      	cbz	r0, 26922 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   26900:	78e3      	ldrb	r3, [r4, #3]
   26902:	2207      	movs	r2, #7
   26904:	b943      	cbnz	r3, 26918 <bt_conn_is_peer_addr_le+0x32>
   26906:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2690a:	4628      	mov	r0, r5
   2690c:	f003 f839 	bl	29982 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   26910:	fab0 f080 	clz	r0, r0
   26914:	0940      	lsrs	r0, r0, #5
}
   26916:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   26918:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2691c:	e7f5      	b.n	2690a <bt_conn_is_peer_addr_le+0x24>
		return false;
   2691e:	2000      	movs	r0, #0
   26920:	e7f9      	b.n	26916 <bt_conn_is_peer_addr_le+0x30>
		return true;
   26922:	2001      	movs	r0, #1
   26924:	e7f7      	b.n	26916 <bt_conn_is_peer_addr_le+0x30>

00026926 <bt_conn_get_dst>:
}
   26926:	3090      	adds	r0, #144	; 0x90
   26928:	4770      	bx	lr

0002692a <bt_conn_le_conn_update>:
{
   2692a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2692c:	4607      	mov	r7, r0
   2692e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   26930:	f242 0013 	movw	r0, #8211	; 0x2013
   26934:	210e      	movs	r1, #14
   26936:	f7eb f989 	bl	11c4c <bt_hci_cmd_create>
	if (!buf) {
   2693a:	4606      	mov	r6, r0
   2693c:	b1d0      	cbz	r0, 26974 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2693e:	210e      	movs	r1, #14
   26940:	300c      	adds	r0, #12
   26942:	f7f2 fec1 	bl	196c8 <net_buf_simple_add>
   26946:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   26948:	220e      	movs	r2, #14
   2694a:	2100      	movs	r1, #0
   2694c:	f003 f863 	bl	29a16 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   26950:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   26952:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   26954:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   26956:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   26958:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2695a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2695c:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2695e:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   26962:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   26964:	88ab      	ldrh	r3, [r5, #4]
   26966:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   26968:	88eb      	ldrh	r3, [r5, #6]
   2696a:	8123      	strh	r3, [r4, #8]
}
   2696c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   26970:	f7eb b9ba 	b.w	11ce8 <bt_hci_cmd_send_sync>
}
   26974:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002697a <l2cap_connected>:
}
   2697a:	4770      	bx	lr

0002697c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2697c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2697e:	ab0b      	add	r3, sp, #44	; 0x2c
   26980:	9305      	str	r3, [sp, #20]
   26982:	9303      	str	r3, [sp, #12]
   26984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26986:	9302      	str	r3, [sp, #8]
   26988:	2300      	movs	r3, #0
   2698a:	4618      	mov	r0, r3
   2698c:	e9cd 3300 	strd	r3, r3, [sp]
   26990:	f7e7 fd70 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   26994:	b007      	add	sp, #28
   26996:	f85d fb04 	ldr.w	pc, [sp], #4

0002699a <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2699a:	4770      	bx	lr

0002699c <bt_l2cap_chan_del>:
{
   2699c:	b570      	push	{r4, r5, r6, lr}
   2699e:	4604      	mov	r4, r0
	if (!chan->conn) {
   269a0:	e9d0 3500 	ldrd	r3, r5, [r0]
   269a4:	b123      	cbz	r3, 269b0 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   269a6:	686b      	ldr	r3, [r5, #4]
   269a8:	b103      	cbz	r3, 269ac <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   269aa:	4798      	blx	r3
	chan->conn = NULL;
   269ac:	2300      	movs	r3, #0
   269ae:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   269b0:	68e3      	ldr	r3, [r4, #12]
   269b2:	b10b      	cbz	r3, 269b8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   269b4:	4620      	mov	r0, r4
   269b6:	4798      	blx	r3
	if (ops->released) {
   269b8:	6a2b      	ldr	r3, [r5, #32]
   269ba:	b11b      	cbz	r3, 269c4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   269bc:	4620      	mov	r0, r4
}
   269be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   269c2:	4718      	bx	r3
}
   269c4:	bd70      	pop	{r4, r5, r6, pc}

000269c6 <bt_l2cap_disconnected>:
{
   269c6:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   269c8:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   269ca:	b130      	cbz	r0, 269da <bt_l2cap_disconnected+0x14>
	return node->next;
   269cc:	f850 4908 	ldr.w	r4, [r0], #-8
   269d0:	b104      	cbz	r4, 269d4 <bt_l2cap_disconnected+0xe>
   269d2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   269d4:	f7ff ffe2 	bl	2699c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   269d8:	b904      	cbnz	r4, 269dc <bt_l2cap_disconnected+0x16>
}
   269da:	bd38      	pop	{r3, r4, r5, pc}
   269dc:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   269de:	b12d      	cbz	r5, 269ec <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   269e0:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   269e2:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   269e4:	f7ff ffda 	bl	2699c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   269e8:	462c      	mov	r4, r5
   269ea:	e7f7      	b.n	269dc <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   269ec:	4620      	mov	r0, r4
}
   269ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   269f2:	f7ff bfd3 	b.w	2699c <bt_l2cap_chan_del>

000269f6 <bt_l2cap_security_changed>:
{
   269f6:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   269f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   269fa:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   269fc:	b1bb      	cbz	r3, 26a2e <bt_l2cap_security_changed+0x38>
   269fe:	4618      	mov	r0, r3
	return node->next;
   26a00:	f850 4908 	ldr.w	r4, [r0], #-8
   26a04:	b104      	cbz	r4, 26a08 <bt_l2cap_security_changed+0x12>
   26a06:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   26a08:	f853 3c04 	ldr.w	r3, [r3, #-4]
   26a0c:	689b      	ldr	r3, [r3, #8]
   26a0e:	b10b      	cbz	r3, 26a14 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   26a10:	4629      	mov	r1, r5
   26a12:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26a14:	b15c      	cbz	r4, 26a2e <bt_l2cap_security_changed+0x38>
   26a16:	4620      	mov	r0, r4
   26a18:	68a4      	ldr	r4, [r4, #8]
   26a1a:	6843      	ldr	r3, [r0, #4]
   26a1c:	b124      	cbz	r4, 26a28 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   26a1e:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26a20:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   26a22:	2b00      	cmp	r3, #0
   26a24:	d1f4      	bne.n	26a10 <bt_l2cap_security_changed+0x1a>
   26a26:	e7f6      	b.n	26a16 <bt_l2cap_security_changed+0x20>
   26a28:	689b      	ldr	r3, [r3, #8]
   26a2a:	2b00      	cmp	r3, #0
   26a2c:	d1f0      	bne.n	26a10 <bt_l2cap_security_changed+0x1a>
}
   26a2e:	bd38      	pop	{r3, r4, r5, pc}

00026a30 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   26a30:	3104      	adds	r1, #4
   26a32:	f7ed bd4f 	b.w	144d4 <bt_conn_create_pdu_timeout>

00026a36 <bt_l2cap_send_cb>:
{
   26a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a3a:	4614      	mov	r4, r2
   26a3c:	4605      	mov	r5, r0
   26a3e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   26a40:	f102 000c 	add.w	r0, r2, #12
   26a44:	2104      	movs	r1, #4
   26a46:	461e      	mov	r6, r3
   26a48:	f8dd 8018 	ldr.w	r8, [sp, #24]
   26a4c:	f7f2 fde0 	bl	19610 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26a50:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   26a52:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26a54:	3a04      	subs	r2, #4
   26a56:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   26a58:	4643      	mov	r3, r8
   26a5a:	4632      	mov	r2, r6
   26a5c:	4621      	mov	r1, r4
   26a5e:	4628      	mov	r0, r5
}
   26a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   26a64:	f7ed bb2c 	b.w	140c0 <bt_conn_send_cb>

00026a68 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   26a68:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26a6a:	b128      	cbz	r0, 26a78 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   26a6c:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26a6e:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   26a70:	428b      	cmp	r3, r1
   26a72:	d001      	beq.n	26a78 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   26a74:	6880      	ldr	r0, [r0, #8]
   26a76:	e7f8      	b.n	26a6a <bt_l2cap_le_lookup_tx_cid+0x2>
}
   26a78:	4770      	bx	lr

00026a7a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   26a7a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26a7c:	b128      	cbz	r0, 26a8a <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   26a7e:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26a80:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   26a82:	428b      	cmp	r3, r1
   26a84:	d001      	beq.n	26a8a <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   26a86:	6880      	ldr	r0, [r0, #8]
   26a88:	e7f8      	b.n	26a7c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   26a8a:	4770      	bx	lr

00026a8c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   26a8c:	4770      	bx	lr

00026a8e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   26a8e:	4603      	mov	r3, r0
	return list->head;
   26a90:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   26a92:	b128      	cbz	r0, 26aa0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26a94:	6859      	ldr	r1, [r3, #4]
	return node->next;
   26a96:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26a98:	4288      	cmp	r0, r1
	list->head = node;
   26a9a:	601a      	str	r2, [r3, #0]
	list->tail = node;
   26a9c:	bf08      	it	eq
   26a9e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   26aa0:	4770      	bx	lr

00026aa2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   26aa2:	4603      	mov	r3, r0
	size_t bytes = 0;
   26aa4:	2000      	movs	r0, #0

	while (buf) {
   26aa6:	b903      	cbnz	r3, 26aaa <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   26aa8:	4770      	bx	lr
		bytes += buf->len;
   26aaa:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   26aac:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   26aae:	4410      	add	r0, r2
		buf = buf->frags;
   26ab0:	e7f9      	b.n	26aa6 <net_buf_frags_len+0x4>

00026ab2 <attr_read_type_cb>:
{
   26ab2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   26ab4:	68d4      	ldr	r4, [r2, #12]
   26ab6:	3102      	adds	r1, #2
   26ab8:	7823      	ldrb	r3, [r4, #0]
   26aba:	b913      	cbnz	r3, 26ac2 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   26abc:	7021      	strb	r1, [r4, #0]
	return true;
   26abe:	2001      	movs	r0, #1
}
   26ac0:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   26ac2:	428b      	cmp	r3, r1
   26ac4:	d0fb      	beq.n	26abe <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   26ac6:	8a03      	ldrh	r3, [r0, #16]
   26ac8:	3b02      	subs	r3, #2
   26aca:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   26acc:	2000      	movs	r0, #0
   26ace:	6110      	str	r0, [r2, #16]
		return false;
   26ad0:	e7f6      	b.n	26ac0 <attr_read_type_cb+0xe>

00026ad2 <att_prepare_write_req>:
}
   26ad2:	2006      	movs	r0, #6
   26ad4:	4770      	bx	lr

00026ad6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26ad6:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26ada:	4108      	asrs	r0, r1
}
   26adc:	f000 0001 	and.w	r0, r0, #1
   26ae0:	4770      	bx	lr

00026ae2 <write_cb>:
{
   26ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26ae4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   26ae6:	4601      	mov	r1, r0
{
   26ae8:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   26aea:	f44f 7295 	mov.w	r2, #298	; 0x12a
   26aee:	6820      	ldr	r0, [r4, #0]
   26af0:	f000 fddc 	bl	276ac <bt_gatt_check_perm>
   26af4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   26af6:	bb00      	cbnz	r0, 26b3a <write_cb+0x58>
	if (!data->req) {
   26af8:	7a23      	ldrb	r3, [r4, #8]
   26afa:	b1b3      	cbz	r3, 26b2a <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   26afc:	f1a3 0218 	sub.w	r2, r3, #24
   26b00:	4253      	negs	r3, r2
   26b02:	4153      	adcs	r3, r2
   26b04:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   26b06:	9301      	str	r3, [sp, #4]
   26b08:	8a63      	ldrh	r3, [r4, #18]
   26b0a:	4629      	mov	r1, r5
   26b0c:	9300      	str	r3, [sp, #0]
   26b0e:	68ae      	ldr	r6, [r5, #8]
   26b10:	8a23      	ldrh	r3, [r4, #16]
   26b12:	68e2      	ldr	r2, [r4, #12]
   26b14:	6820      	ldr	r0, [r4, #0]
   26b16:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   26b18:	2800      	cmp	r0, #0
   26b1a:	db08      	blt.n	26b2e <write_cb+0x4c>
   26b1c:	8a23      	ldrh	r3, [r4, #16]
   26b1e:	4283      	cmp	r3, r0
   26b20:	d10e      	bne.n	26b40 <write_cb+0x5e>
	data->err = 0U;
   26b22:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   26b24:	2001      	movs	r0, #1
	data->err = 0U;
   26b26:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   26b28:	e008      	b.n	26b3c <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   26b2a:	2302      	movs	r3, #2
   26b2c:	e7eb      	b.n	26b06 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   26b2e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   26b32:	d305      	bcc.n	26b40 <write_cb+0x5e>
		return -err;
   26b34:	4240      	negs	r0, r0
   26b36:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   26b38:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   26b3a:	2000      	movs	r0, #0
}
   26b3c:	b002      	add	sp, #8
   26b3e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   26b40:	200e      	movs	r0, #14
   26b42:	e7f9      	b.n	26b38 <write_cb+0x56>

00026b44 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   26b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   26b46:	e9cd 2301 	strd	r2, r3, [sp, #4]
   26b4a:	2300      	movs	r3, #0
   26b4c:	461a      	mov	r2, r3
   26b4e:	9300      	str	r3, [sp, #0]
   26b50:	f7ef fda8 	bl	166a4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   26b54:	b005      	add	sp, #20
   26b56:	f85d fb04 	ldr.w	pc, [sp], #4

00026b5a <att_chan_mtu_updated>:
{
   26b5a:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   26b5c:	6805      	ldr	r5, [r0, #0]
	return list->head;
   26b5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26b60:	b352      	cbz	r2, 26bb8 <att_chan_mtu_updated+0x5e>
	return node->next;
   26b62:	6813      	ldr	r3, [r2, #0]
   26b64:	b103      	cbz	r3, 26b68 <att_chan_mtu_updated+0xe>
   26b66:	3bf0      	subs	r3, #240	; 0xf0
   26b68:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   26b6c:	2200      	movs	r2, #0
   26b6e:	4611      	mov	r1, r2
   26b70:	e000      	b.n	26b74 <att_chan_mtu_updated+0x1a>
   26b72:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   26b74:	4284      	cmp	r4, r0
   26b76:	d007      	beq.n	26b88 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   26b78:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   26b7a:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   26b7c:	42b1      	cmp	r1, r6
   26b7e:	bf38      	it	cc
   26b80:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   26b82:	42a2      	cmp	r2, r4
   26b84:	bf38      	it	cc
   26b86:	4622      	movcc	r2, r4
   26b88:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26b8a:	b12b      	cbz	r3, 26b98 <att_chan_mtu_updated+0x3e>
   26b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   26b90:	2b00      	cmp	r3, #0
   26b92:	d1ee      	bne.n	26b72 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   26b94:	4284      	cmp	r4, r0
   26b96:	d1ef      	bne.n	26b78 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   26b98:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   26b9a:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   26b9c:	428b      	cmp	r3, r1
   26b9e:	d801      	bhi.n	26ba4 <att_chan_mtu_updated+0x4a>
   26ba0:	4290      	cmp	r0, r2
   26ba2:	d90b      	bls.n	26bbc <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   26ba4:	4282      	cmp	r2, r0
   26ba6:	bf38      	it	cc
   26ba8:	4602      	movcc	r2, r0
   26baa:	4299      	cmp	r1, r3
   26bac:	6828      	ldr	r0, [r5, #0]
   26bae:	bf38      	it	cc
   26bb0:	4619      	movcc	r1, r3
}
   26bb2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   26bb4:	f7f0 bb14 	b.w	171e0 <bt_gatt_att_max_mtu_changed>
   26bb8:	4611      	mov	r1, r2
   26bba:	e7ed      	b.n	26b98 <att_chan_mtu_updated+0x3e>
}
   26bbc:	bc70      	pop	{r4, r5, r6}
   26bbe:	4770      	bx	lr

00026bc0 <attr_read_group_cb>:
	if (!data->rsp->len) {
   26bc0:	68d0      	ldr	r0, [r2, #12]
   26bc2:	3104      	adds	r1, #4
   26bc4:	7803      	ldrb	r3, [r0, #0]
   26bc6:	b913      	cbnz	r3, 26bce <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   26bc8:	7001      	strb	r1, [r0, #0]
	return true;
   26bca:	2001      	movs	r0, #1
   26bcc:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   26bce:	428b      	cmp	r3, r1
   26bd0:	d0fb      	beq.n	26bca <attr_read_group_cb+0xa>
		data->group = NULL;
   26bd2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   26bd4:	6891      	ldr	r1, [r2, #8]
   26bd6:	8a0b      	ldrh	r3, [r1, #16]
   26bd8:	3b04      	subs	r3, #4
   26bda:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   26bdc:	6110      	str	r0, [r2, #16]
}
   26bde:	4770      	bx	lr

00026be0 <find_info_cb>:
{
   26be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   26be2:	6893      	ldr	r3, [r2, #8]
{
   26be4:	4605      	mov	r5, r0
   26be6:	460f      	mov	r7, r1
   26be8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   26bea:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   26bec:	b963      	cbnz	r3, 26c08 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   26bee:	6850      	ldr	r0, [r2, #4]
   26bf0:	2101      	movs	r1, #1
   26bf2:	300c      	adds	r0, #12
   26bf4:	f7f2 fd68 	bl	196c8 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   26bf8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   26bfa:	682b      	ldr	r3, [r5, #0]
   26bfc:	781b      	ldrb	r3, [r3, #0]
   26bfe:	2b00      	cmp	r3, #0
   26c00:	bf14      	ite	ne
   26c02:	2302      	movne	r3, #2
   26c04:	2301      	moveq	r3, #1
   26c06:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   26c08:	68a3      	ldr	r3, [r4, #8]
   26c0a:	781b      	ldrb	r3, [r3, #0]
   26c0c:	2b01      	cmp	r3, #1
   26c0e:	d003      	beq.n	26c18 <find_info_cb+0x38>
   26c10:	2b02      	cmp	r3, #2
   26c12:	d019      	beq.n	26c48 <find_info_cb+0x68>
   26c14:	2000      	movs	r0, #0
   26c16:	e016      	b.n	26c46 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   26c18:	682b      	ldr	r3, [r5, #0]
   26c1a:	781b      	ldrb	r3, [r3, #0]
   26c1c:	2b00      	cmp	r3, #0
   26c1e:	d1f9      	bne.n	26c14 <find_info_cb+0x34>
   26c20:	6860      	ldr	r0, [r4, #4]
   26c22:	2104      	movs	r1, #4
   26c24:	300c      	adds	r0, #12
   26c26:	f7f2 fd4f 	bl	196c8 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   26c2a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   26c2c:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   26c2e:	682a      	ldr	r2, [r5, #0]
   26c30:	68e3      	ldr	r3, [r4, #12]
   26c32:	8852      	ldrh	r2, [r2, #2]
   26c34:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   26c36:	6863      	ldr	r3, [r4, #4]
   26c38:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   26c3a:	8a1b      	ldrh	r3, [r3, #16]
   26c3c:	1ac0      	subs	r0, r0, r3
   26c3e:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   26c40:	bf94      	ite	ls
   26c42:	2000      	movls	r0, #0
   26c44:	2001      	movhi	r0, #1
}
   26c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   26c48:	682b      	ldr	r3, [r5, #0]
   26c4a:	781b      	ldrb	r3, [r3, #0]
   26c4c:	2b02      	cmp	r3, #2
   26c4e:	d1e1      	bne.n	26c14 <find_info_cb+0x34>
   26c50:	6860      	ldr	r0, [r4, #4]
   26c52:	2112      	movs	r1, #18
   26c54:	300c      	adds	r0, #12
   26c56:	f7f2 fd37 	bl	196c8 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   26c5a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   26c5c:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26c5e:	682b      	ldr	r3, [r5, #0]
   26c60:	68e2      	ldr	r2, [r4, #12]
   26c62:	1c59      	adds	r1, r3, #1
   26c64:	3202      	adds	r2, #2
   26c66:	3311      	adds	r3, #17
   26c68:	f851 0b04 	ldr.w	r0, [r1], #4
   26c6c:	4299      	cmp	r1, r3
   26c6e:	f842 0b04 	str.w	r0, [r2], #4
   26c72:	d1f9      	bne.n	26c68 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   26c74:	6863      	ldr	r3, [r4, #4]
   26c76:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   26c78:	8a1b      	ldrh	r3, [r3, #16]
   26c7a:	1ac0      	subs	r0, r0, r3
   26c7c:	2812      	cmp	r0, #18
   26c7e:	e7df      	b.n	26c40 <find_info_cb+0x60>

00026c80 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26c80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26c82:	ab0b      	add	r3, sp, #44	; 0x2c
   26c84:	9305      	str	r3, [sp, #20]
   26c86:	9303      	str	r3, [sp, #12]
   26c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26c8a:	9302      	str	r3, [sp, #8]
   26c8c:	2300      	movs	r3, #0
   26c8e:	4618      	mov	r0, r3
   26c90:	e9cd 3300 	strd	r3, r3, [sp]
   26c94:	f7e7 fbee 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   26c98:	b007      	add	sp, #28
   26c9a:	f85d fb04 	ldr.w	pc, [sp], #4

00026c9e <chan_req_send>:
{
   26c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ca0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26ca2:	6888      	ldr	r0, [r1, #8]
   26ca4:	f7ff fefd 	bl	26aa2 <net_buf_frags_len>
   26ca8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   26caa:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26cac:	4283      	cmp	r3, r0
   26cae:	d30d      	bcc.n	26ccc <chan_req_send+0x2e>
	req->buf = NULL;
   26cb0:	2600      	movs	r6, #0
	chan->req = req;
   26cb2:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   26cb6:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   26cb8:	4628      	mov	r0, r5
	req->buf = NULL;
   26cba:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   26cbc:	4639      	mov	r1, r7
   26cbe:	f7ee fa49 	bl	15154 <chan_send>
	if (err) {
   26cc2:	b110      	cbz	r0, 26cca <chan_req_send+0x2c>
		req->buf = buf;
   26cc4:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   26cc6:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   26cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   26ccc:	f06f 0079 	mvn.w	r0, #121	; 0x79
   26cd0:	e7fb      	b.n	26cca <chan_req_send+0x2c>

00026cd2 <process_queue>:
{
   26cd2:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   26cd4:	2200      	movs	r2, #0
{
   26cd6:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   26cd8:	2300      	movs	r3, #0
   26cda:	4608      	mov	r0, r1
{
   26cdc:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   26cde:	f001 f8cb 	bl	27e78 <net_buf_get>
	if (buf) {
   26ce2:	4605      	mov	r5, r0
   26ce4:	b158      	cbz	r0, 26cfe <process_queue+0x2c>
	return chan_send(chan, buf);
   26ce6:	4601      	mov	r1, r0
   26ce8:	4620      	mov	r0, r4
   26cea:	f7ee fa33 	bl	15154 <chan_send>
		if (err) {
   26cee:	4604      	mov	r4, r0
   26cf0:	b118      	cbz	r0, 26cfa <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   26cf2:	4629      	mov	r1, r5
   26cf4:	4630      	mov	r0, r6
   26cf6:	f002 fc96 	bl	29626 <k_queue_prepend>
}
   26cfa:	4620      	mov	r0, r4
   26cfc:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   26cfe:	f06f 0401 	mvn.w	r4, #1
   26d02:	e7fa      	b.n	26cfa <process_queue+0x28>

00026d04 <bt_att_chan_send_rsp>:
{
   26d04:	b538      	push	{r3, r4, r5, lr}
   26d06:	4604      	mov	r4, r0
   26d08:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   26d0a:	f7ee fa23 	bl	15154 <chan_send>
	if (err) {
   26d0e:	b130      	cbz	r0, 26d1e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   26d10:	4629      	mov	r1, r5
   26d12:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   26d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   26d1a:	f7f2 bb8d 	b.w	19438 <net_buf_put>
}
   26d1e:	bd38      	pop	{r3, r4, r5, pc}

00026d20 <att_chan_read>:
{
   26d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d24:	4680      	mov	r8, r0
   26d26:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26d28:	4610      	mov	r0, r2
{
   26d2a:	4699      	mov	r9, r3
   26d2c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26d2e:	f7ff feb8 	bl	26aa2 <net_buf_frags_len>
   26d32:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   26d36:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26d38:	4283      	cmp	r3, r0
   26d3a:	d97a      	bls.n	26e32 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   26d3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   26d40:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   26d42:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   26d44:	f7f2 fbfa 	bl	1953c <net_buf_frag_last>
	size_t len, total = 0;
   26d48:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   26d4c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   26d4e:	4630      	mov	r0, r6
   26d50:	f7ff fea7 	bl	26aa2 <net_buf_frags_len>
   26d54:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   26d58:	f105 070c 	add.w	r7, r5, #12
   26d5c:	1a24      	subs	r4, r4, r0
   26d5e:	4638      	mov	r0, r7
   26d60:	f001 f89f 	bl	27ea2 <net_buf_simple_tailroom>
   26d64:	4284      	cmp	r4, r0
   26d66:	d211      	bcs.n	26d8c <att_chan_read+0x6c>
   26d68:	4630      	mov	r0, r6
   26d6a:	f7ff fe9a 	bl	26aa2 <net_buf_frags_len>
   26d6e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26d72:	1a24      	subs	r4, r4, r0
		if (!len) {
   26d74:	bb34      	cbnz	r4, 26dc4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   26d76:	7ab0      	ldrb	r0, [r6, #10]
   26d78:	f7f2 f94a 	bl	19010 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   26d7c:	2200      	movs	r2, #0
   26d7e:	2300      	movs	r3, #0
   26d80:	f001 f875 	bl	27e6e <net_buf_alloc_fixed>
			if (!frag) {
   26d84:	4605      	mov	r5, r0
   26d86:	b930      	cbnz	r0, 26d96 <att_chan_read+0x76>
	return total;
   26d88:	4657      	mov	r7, sl
   26d8a:	e02c      	b.n	26de6 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   26d8c:	4638      	mov	r0, r7
   26d8e:	f001 f888 	bl	27ea2 <net_buf_simple_tailroom>
   26d92:	4604      	mov	r4, r0
   26d94:	e7ee      	b.n	26d74 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   26d96:	4601      	mov	r1, r0
   26d98:	4630      	mov	r0, r6
   26d9a:	f7f2 fc15 	bl	195c8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   26d9e:	4630      	mov	r0, r6
   26da0:	f7ff fe7f 	bl	26aa2 <net_buf_frags_len>
   26da4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26da8:	f105 070c 	add.w	r7, r5, #12
   26dac:	1a24      	subs	r4, r4, r0
   26dae:	4638      	mov	r0, r7
   26db0:	f001 f877 	bl	27ea2 <net_buf_simple_tailroom>
   26db4:	4284      	cmp	r4, r0
   26db6:	d21a      	bcs.n	26dee <att_chan_read+0xce>
   26db8:	4630      	mov	r0, r6
   26dba:	f7ff fe72 	bl	26aa2 <net_buf_frags_len>
   26dbe:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26dc2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   26dc4:	68e9      	ldr	r1, [r5, #12]
   26dc6:	8a2a      	ldrh	r2, [r5, #16]
   26dc8:	f8cd 9000 	str.w	r9, [sp]
   26dcc:	f8db 7004 	ldr.w	r7, [fp, #4]
   26dd0:	440a      	add	r2, r1
   26dd2:	9803      	ldr	r0, [sp, #12]
   26dd4:	4659      	mov	r1, fp
   26dd6:	b2a3      	uxth	r3, r4
   26dd8:	47b8      	blx	r7
		if (read < 0) {
   26dda:	1e07      	subs	r7, r0, #0
   26ddc:	da0c      	bge.n	26df8 <att_chan_read+0xd8>
				return total;
   26dde:	f1ba 0f00 	cmp.w	sl, #0
   26de2:	bf18      	it	ne
   26de4:	4657      	movne	r7, sl
}
   26de6:	4638      	mov	r0, r7
   26de8:	b005      	add	sp, #20
   26dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26dee:	4638      	mov	r0, r7
   26df0:	f001 f857 	bl	27ea2 <net_buf_simple_tailroom>
   26df4:	4604      	mov	r4, r0
   26df6:	e7e5      	b.n	26dc4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   26df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26dfa:	b993      	cbnz	r3, 26e22 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   26dfc:	4639      	mov	r1, r7
   26dfe:	f105 000c 	add.w	r0, r5, #12
   26e02:	f7f2 fc61 	bl	196c8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26e06:	4630      	mov	r0, r6
   26e08:	f7ff fe4b 	bl	26aa2 <net_buf_frags_len>
   26e0c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   26e10:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26e12:	4283      	cmp	r3, r0
		total += read;
   26e14:	44ba      	add	sl, r7
		offset += read;
   26e16:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26e1a:	d9b5      	bls.n	26d88 <att_chan_read+0x68>
   26e1c:	42a7      	cmp	r7, r4
   26e1e:	d096      	beq.n	26d4e <att_chan_read+0x2e>
   26e20:	e7b2      	b.n	26d88 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   26e22:	4639      	mov	r1, r7
   26e24:	4628      	mov	r0, r5
   26e26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26e2a:	4798      	blx	r3
   26e2c:	2800      	cmp	r0, #0
   26e2e:	d1e5      	bne.n	26dfc <att_chan_read+0xdc>
   26e30:	e7aa      	b.n	26d88 <att_chan_read+0x68>
		return 0;
   26e32:	2700      	movs	r7, #0
   26e34:	e7d7      	b.n	26de6 <att_chan_read+0xc6>

00026e36 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e36:	2200      	movs	r2, #0
	return list->head;
   26e38:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e3a:	b903      	cbnz	r3, 26e3e <sys_slist_find_and_remove.isra.0+0x8>
   26e3c:	4770      	bx	lr
   26e3e:	428b      	cmp	r3, r1
   26e40:	d10f      	bne.n	26e62 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   26e42:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26e44:	b93a      	cbnz	r2, 26e56 <sys_slist_find_and_remove.isra.0+0x20>
   26e46:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   26e48:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26e4a:	4291      	cmp	r1, r2
   26e4c:	d100      	bne.n	26e50 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   26e4e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   26e50:	2300      	movs	r3, #0
   26e52:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26e54:	4770      	bx	lr
	parent->next = child;
   26e56:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26e58:	6843      	ldr	r3, [r0, #4]
   26e5a:	4299      	cmp	r1, r3
	list->tail = node;
   26e5c:	bf08      	it	eq
   26e5e:	6042      	streq	r2, [r0, #4]
}
   26e60:	e7f6      	b.n	26e50 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   26e62:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e64:	681b      	ldr	r3, [r3, #0]
   26e66:	e7e8      	b.n	26e3a <sys_slist_find_and_remove.isra.0+0x4>

00026e68 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   26e68:	2006      	movs	r0, #6
   26e6a:	4770      	bx	lr

00026e6c <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26e6c:	2301      	movs	r3, #1
{
   26e6e:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26e70:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26e74:	e8d0 3fef 	ldaex	r3, [r0]
   26e78:	ea43 0201 	orr.w	r2, r3, r1
   26e7c:	e8c0 2fe4 	stlex	r4, r2, [r0]
   26e80:	2c00      	cmp	r4, #0
   26e82:	d1f7      	bne.n	26e74 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   26e84:	4219      	tst	r1, r3
}
   26e86:	bf14      	ite	ne
   26e88:	2001      	movne	r0, #1
   26e8a:	2000      	moveq	r0, #0
   26e8c:	bd10      	pop	{r4, pc}

00026e8e <read_cb>:
{
   26e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   26e90:	2300      	movs	r3, #0
{
   26e92:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   26e94:	6816      	ldr	r6, [r2, #0]
{
   26e96:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   26e98:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26e9a:	4629      	mov	r1, r5
	data->err = 0x00;
   26e9c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26e9e:	2295      	movs	r2, #149	; 0x95
   26ea0:	f000 fc04 	bl	276ac <bt_gatt_check_perm>
   26ea4:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   26ea6:	b980      	cbnz	r0, 26eca <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   26ea8:	e9cd 0000 	strd	r0, r0, [sp]
   26eac:	4629      	mov	r1, r5
   26eae:	4630      	mov	r0, r6
   26eb0:	88a3      	ldrh	r3, [r4, #4]
   26eb2:	68a2      	ldr	r2, [r4, #8]
   26eb4:	f7ff ff34 	bl	26d20 <att_chan_read>
	if (ret < 0) {
   26eb8:	2800      	cmp	r0, #0
   26eba:	da09      	bge.n	26ed0 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   26ebc:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   26ec0:	bf32      	itee	cc
   26ec2:	200e      	movcc	r0, #14
		return -err;
   26ec4:	4240      	negcs	r0, r0
   26ec6:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   26ec8:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   26eca:	2000      	movs	r0, #0
}
   26ecc:	b002      	add	sp, #8
   26ece:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   26ed0:	2001      	movs	r0, #1
   26ed2:	e7fb      	b.n	26ecc <read_cb+0x3e>

00026ed4 <read_vl_cb>:
{
   26ed4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   26ed8:	2300      	movs	r3, #0
{
   26eda:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   26edc:	f8d2 8000 	ldr.w	r8, [r2]
{
   26ee0:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   26ee2:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26ee6:	4631      	mov	r1, r6
	data->err = 0x00;
   26ee8:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26eea:	2295      	movs	r2, #149	; 0x95
   26eec:	f000 fbde 	bl	276ac <bt_gatt_check_perm>
   26ef0:	4605      	mov	r5, r0
   26ef2:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   26ef4:	b9e0      	cbnz	r0, 26f30 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   26ef6:	68a0      	ldr	r0, [r4, #8]
   26ef8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   26efc:	8a02      	ldrh	r2, [r0, #16]
   26efe:	1a9b      	subs	r3, r3, r2
   26f00:	2b01      	cmp	r3, #1
   26f02:	dd15      	ble.n	26f30 <read_vl_cb+0x5c>
   26f04:	2102      	movs	r1, #2
   26f06:	300c      	adds	r0, #12
   26f08:	f7f2 fbde 	bl	196c8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   26f0c:	e9cd 5500 	strd	r5, r5, [sp]
   26f10:	4607      	mov	r7, r0
   26f12:	88a3      	ldrh	r3, [r4, #4]
   26f14:	4631      	mov	r1, r6
   26f16:	4640      	mov	r0, r8
   26f18:	68a2      	ldr	r2, [r4, #8]
   26f1a:	f7ff ff01 	bl	26d20 <att_chan_read>
	if (read < 0) {
   26f1e:	1e03      	subs	r3, r0, #0
   26f20:	da0a      	bge.n	26f38 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   26f22:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   26f26:	bf32      	itee	cc
   26f28:	230e      	movcc	r3, #14
		return -err;
   26f2a:	425b      	negcs	r3, r3
   26f2c:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   26f2e:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   26f30:	2000      	movs	r0, #0
}
   26f32:	b002      	add	sp, #8
   26f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   26f38:	2001      	movs	r0, #1
	rsp->len = read;
   26f3a:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   26f3c:	e7f9      	b.n	26f32 <read_vl_cb+0x5e>

00026f3e <bt_att_sent>:
{
   26f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f40:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   26f42:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   26f46:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26f48:	f100 0394 	add.w	r3, r0, #148	; 0x94
   26f4c:	e8d3 1fef 	ldaex	r1, [r3]
   26f50:	f021 0110 	bic.w	r1, r1, #16
   26f54:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26f58:	2a00      	cmp	r2, #0
   26f5a:	d1f7      	bne.n	26f4c <bt_att_sent+0xe>
	if (!att) {
   26f5c:	b30c      	cbz	r4, 26fa2 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   26f5e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   26f62:	b98b      	cbnz	r3, 26f88 <bt_att_sent+0x4a>
   26f64:	6863      	ldr	r3, [r4, #4]
   26f66:	b17b      	cbz	r3, 26f88 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   26f68:	1d20      	adds	r0, r4, #4
   26f6a:	f7ff fd90 	bl	26a8e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26f6e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   26f70:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26f72:	4638      	mov	r0, r7
   26f74:	f7ff fe93 	bl	26c9e <chan_req_send>
   26f78:	2800      	cmp	r0, #0
   26f7a:	da12      	bge.n	26fa2 <bt_att_sent+0x64>
	return list->head;
   26f7c:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   26f7e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   26f80:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   26f82:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   26f84:	b903      	cbnz	r3, 26f88 <bt_att_sent+0x4a>
	list->tail = node;
   26f86:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   26f88:	4638      	mov	r0, r7
   26f8a:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   26f8e:	f7ff fea0 	bl	26cd2 <process_queue>
	if (!err) {
   26f92:	b130      	cbz	r0, 26fa2 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   26f94:	4638      	mov	r0, r7
   26f96:	f104 010c 	add.w	r1, r4, #12
}
   26f9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   26f9e:	f7ff be98 	b.w	26cd2 <process_queue>
}
   26fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026fa4 <att_req_send_process>:
{
   26fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   26fa8:	6a84      	ldr	r4, [r0, #40]	; 0x28
   26faa:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26fac:	2c00      	cmp	r4, #0
   26fae:	d03b      	beq.n	27028 <att_req_send_process+0x84>
	return node->next;
   26fb0:	f854 69f0 	ldr.w	r6, [r4], #-240
   26fb4:	b106      	cbz	r6, 26fb8 <att_req_send_process+0x14>
   26fb6:	3ef0      	subs	r6, #240	; 0xf0
{
   26fb8:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   26fba:	f108 0704 	add.w	r7, r8, #4
{
   26fbe:	461d      	mov	r5, r3
   26fc0:	e013      	b.n	26fea <att_req_send_process+0x46>
		if (!req && prev &&
   26fc2:	b1c3      	cbz	r3, 26ff6 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   26fc4:	2103      	movs	r1, #3
   26fc6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   26fca:	f7ff fd84 	bl	26ad6 <atomic_test_bit>
   26fce:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   26fd0:	f103 0098 	add.w	r0, r3, #152	; 0x98
   26fd4:	f7ff fd7f 	bl	26ad6 <atomic_test_bit>
		if (!req && prev &&
   26fd8:	4282      	cmp	r2, r0
   26fda:	d10c      	bne.n	26ff6 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26fdc:	b326      	cbz	r6, 27028 <att_req_send_process+0x84>
   26fde:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   26fe2:	b102      	cbz	r2, 26fe6 <att_req_send_process+0x42>
   26fe4:	3af0      	subs	r2, #240	; 0xf0
{
   26fe6:	4634      	mov	r4, r6
   26fe8:	4616      	mov	r6, r2
		if (chan->req) {
   26fea:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   26fee:	2a00      	cmp	r2, #0
   26ff0:	d1f4      	bne.n	26fdc <att_req_send_process+0x38>
		if (!req && prev &&
   26ff2:	2d00      	cmp	r5, #0
   26ff4:	d0e5      	beq.n	26fc2 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   26ff6:	4638      	mov	r0, r7
   26ff8:	f7ff fd49 	bl	26a8e <sys_slist_get>
	if (node) {
   26ffc:	4605      	mov	r5, r0
   26ffe:	b908      	cbnz	r0, 27004 <att_req_send_process+0x60>
   27000:	4623      	mov	r3, r4
   27002:	e7eb      	b.n	26fdc <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   27004:	4601      	mov	r1, r0
   27006:	4620      	mov	r0, r4
   27008:	f7ee f918 	bl	1523c <bt_att_chan_req_send>
   2700c:	2800      	cmp	r0, #0
   2700e:	da0b      	bge.n	27028 <att_req_send_process+0x84>
	return list->head;
   27010:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   27014:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   27016:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2701a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2701e:	2b00      	cmp	r3, #0
   27020:	d1ee      	bne.n	27000 <att_req_send_process+0x5c>
	list->tail = node;
   27022:	f8c8 5008 	str.w	r5, [r8, #8]
}
   27026:	e7eb      	b.n	27000 <att_req_send_process+0x5c>
}
   27028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002702c <bt_att_status>:
{
   2702c:	b538      	push	{r3, r4, r5, lr}
   2702e:	4605      	mov	r5, r0
   27030:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   27032:	2100      	movs	r1, #0
   27034:	f7ff fd4f 	bl	26ad6 <atomic_test_bit>
   27038:	b1c0      	cbz	r0, 2706c <bt_att_status+0x40>
	if (!chan->att) {
   2703a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2703e:	b1a8      	cbz	r0, 2706c <bt_att_status+0x40>
	if (chan->req) {
   27040:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   27044:	b993      	cbnz	r3, 2706c <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   27046:	3004      	adds	r0, #4
   27048:	f7ff fd21 	bl	26a8e <sys_slist_get>
	if (!node) {
   2704c:	4604      	mov	r4, r0
   2704e:	b168      	cbz	r0, 2706c <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27050:	4601      	mov	r1, r0
   27052:	1f28      	subs	r0, r5, #4
   27054:	f7ee f8f2 	bl	1523c <bt_att_chan_req_send>
   27058:	2800      	cmp	r0, #0
   2705a:	da07      	bge.n	2706c <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2705c:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   27060:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   27062:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   27064:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   27066:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27068:	b902      	cbnz	r2, 2706c <bt_att_status+0x40>
	list->tail = node;
   2706a:	609c      	str	r4, [r3, #8]
}
   2706c:	bd38      	pop	{r3, r4, r5, pc}

0002706e <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2706e:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   27070:	6883      	ldr	r3, [r0, #8]
   27072:	699b      	ldr	r3, [r3, #24]
   27074:	b10b      	cbz	r3, 2707a <att_sent+0xc>
		chan->ops->sent(chan);
   27076:	3004      	adds	r0, #4
   27078:	4718      	bx	r3
}
   2707a:	4770      	bx	lr

0002707c <att_tx_complete>:
{
   2707c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27080:	4606      	mov	r6, r0
   27082:	460d      	mov	r5, r1
	if (!err) {
   27084:	4614      	mov	r4, r2
   27086:	b122      	cbz	r2, 27092 <att_tx_complete+0x16>
}
   27088:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2708c:	4608      	mov	r0, r1
   2708e:	f7ed bf95 	b.w	14fbc <tx_meta_data_free>
		att_sent(conn, user_data);
   27092:	f7ff ffec 	bl	2706e <att_sent>
	bt_gatt_complete_func_t func = data->func;
   27096:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   27098:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2709a:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2709e:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   270a2:	f7ed ff8b 	bl	14fbc <tx_meta_data_free>
	if (!err && func) {
   270a6:	b92f      	cbnz	r7, 270b4 <att_tx_complete+0x38>
}
   270a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   270ac:	4649      	mov	r1, r9
   270ae:	4630      	mov	r0, r6
   270b0:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   270b2:	3401      	adds	r4, #1
   270b4:	b2a3      	uxth	r3, r4
   270b6:	4543      	cmp	r3, r8
   270b8:	d3f8      	bcc.n	270ac <att_tx_complete+0x30>
   270ba:	e7f5      	b.n	270a8 <att_tx_complete+0x2c>

000270bc <att_req_sent>:
{
   270bc:	b510      	push	{r4, lr}
   270be:	460c      	mov	r4, r1
	if (!err) {
   270c0:	b90a      	cbnz	r2, 270c6 <att_req_sent+0xa>
		att_sent(conn, user_data);
   270c2:	f7ff ffd4 	bl	2706e <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   270c6:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   270c8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   270cc:	b12b      	cbz	r3, 270da <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   270ce:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   270d2:	2300      	movs	r3, #0
   270d4:	30c0      	adds	r0, #192	; 0xc0
   270d6:	f7f9 fcd3 	bl	20a80 <k_work_reschedule>
	tx_meta_data_free(user_data);
   270da:	4620      	mov	r0, r4
}
   270dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   270e0:	f7ed bf6c 	b.w	14fbc <tx_meta_data_free>

000270e4 <att_cfm_sent>:
{
   270e4:	b510      	push	{r4, lr}
   270e6:	460c      	mov	r4, r1
	if (!err) {
   270e8:	b90a      	cbnz	r2, 270ee <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   270ea:	f7ff ffc0 	bl	2706e <att_sent>
   270ee:	6823      	ldr	r3, [r4, #0]
   270f0:	3398      	adds	r3, #152	; 0x98
   270f2:	e8d3 1fef 	ldaex	r1, [r3]
   270f6:	f021 0102 	bic.w	r1, r1, #2
   270fa:	e8c3 1fe2 	stlex	r2, r1, [r3]
   270fe:	2a00      	cmp	r2, #0
   27100:	d1f7      	bne.n	270f2 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   27102:	4620      	mov	r0, r4
}
   27104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27108:	f7ed bf58 	b.w	14fbc <tx_meta_data_free>

0002710c <att_rsp_sent>:
{
   2710c:	b510      	push	{r4, lr}
   2710e:	460c      	mov	r4, r1
	if (!err) {
   27110:	b90a      	cbnz	r2, 27116 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   27112:	f7ff ffac 	bl	2706e <att_sent>
   27116:	6823      	ldr	r3, [r4, #0]
   27118:	3398      	adds	r3, #152	; 0x98
   2711a:	e8d3 1fef 	ldaex	r1, [r3]
   2711e:	f021 0101 	bic.w	r1, r1, #1
   27122:	e8c3 1fe2 	stlex	r2, r1, [r3]
   27126:	2a00      	cmp	r2, #0
   27128:	d1f7      	bne.n	2711a <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   2712a:	4620      	mov	r0, r4
}
   2712c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27130:	f7ed bf44 	b.w	14fbc <tx_meta_data_free>

00027134 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27138:	4688      	mov	r8, r1
   2713a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2713c:	2101      	movs	r1, #1
   2713e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27140:	4605      	mov	r5, r0
   27142:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27144:	f7ee fa3c 	bl	155c0 <bt_att_chan_create_pdu>
	if (!buf) {
   27148:	4604      	mov	r4, r0
   2714a:	b170      	cbz	r0, 2716a <send_err_rsp.part.0+0x36>
   2714c:	2104      	movs	r1, #4
   2714e:	300c      	adds	r0, #12
   27150:	f7f2 faba 	bl	196c8 <net_buf_simple_add>
	rsp->request = req;
   27154:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   27158:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2715c:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2715e:	4621      	mov	r1, r4
   27160:	4628      	mov	r0, r5
}
   27162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   27166:	f7ff bdcd 	b.w	26d04 <bt_att_chan_send_rsp>
}
   2716a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002716e <att_write_req>:
{
   2716e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27170:	460c      	mov	r4, r1
   27172:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   27174:	f101 000c 	add.w	r0, r1, #12
   27178:	f000 fe87 	bl	27e8a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2717c:	8a22      	ldrh	r2, [r4, #16]
   2717e:	4603      	mov	r3, r0
   27180:	9201      	str	r2, [sp, #4]
   27182:	68e2      	ldr	r2, [r4, #12]
   27184:	2112      	movs	r1, #18
   27186:	9200      	str	r2, [sp, #0]
   27188:	4628      	mov	r0, r5
   2718a:	2213      	movs	r2, #19
   2718c:	f7ee fb10 	bl	157b0 <att_write_rsp.constprop.0>
}
   27190:	b003      	add	sp, #12
   27192:	bd30      	pop	{r4, r5, pc}

00027194 <att_write_cmd>:
{
   27194:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27196:	460c      	mov	r4, r1
   27198:	4605      	mov	r5, r0
   2719a:	f101 000c 	add.w	r0, r1, #12
   2719e:	f000 fe74 	bl	27e8a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   271a2:	8a22      	ldrh	r2, [r4, #16]
   271a4:	4603      	mov	r3, r0
   271a6:	9201      	str	r2, [sp, #4]
   271a8:	68e2      	ldr	r2, [r4, #12]
   271aa:	4628      	mov	r0, r5
   271ac:	9200      	str	r2, [sp, #0]
   271ae:	2200      	movs	r2, #0
   271b0:	4611      	mov	r1, r2
   271b2:	f7ee fafd 	bl	157b0 <att_write_rsp.constprop.0>
}
   271b6:	b003      	add	sp, #12
   271b8:	bd30      	pop	{r4, r5, pc}

000271ba <att_read_blob_req>:
{
   271ba:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   271bc:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   271be:	210c      	movs	r1, #12
   271c0:	8813      	ldrh	r3, [r2, #0]
   271c2:	8852      	ldrh	r2, [r2, #2]
   271c4:	9200      	str	r2, [sp, #0]
   271c6:	220d      	movs	r2, #13
   271c8:	f7ee fcb4 	bl	15b34 <att_read_rsp>
}
   271cc:	b003      	add	sp, #12
   271ce:	f85d fb04 	ldr.w	pc, [sp], #4

000271d2 <att_read_req>:
{
   271d2:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   271d4:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   271d6:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   271d8:	210a      	movs	r1, #10
   271da:	881b      	ldrh	r3, [r3, #0]
   271dc:	9200      	str	r2, [sp, #0]
   271de:	220b      	movs	r2, #11
   271e0:	f7ee fca8 	bl	15b34 <att_read_rsp>
}
   271e4:	b003      	add	sp, #12
   271e6:	f85d fb04 	ldr.w	pc, [sp], #4

000271ea <att_mtu_req>:
{
   271ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271ec:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   271ee:	f850 2b98 	ldr.w	r2, [r0], #152
{
   271f2:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   271f4:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   271f6:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   271f8:	f7ff fc6d 	bl	26ad6 <atomic_test_bit>
   271fc:	4604      	mov	r4, r0
   271fe:	b9f0      	cbnz	r0, 2723e <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   27200:	68db      	ldr	r3, [r3, #12]
   27202:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   27204:	2e16      	cmp	r6, #22
   27206:	d91c      	bls.n	27242 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   27208:	4638      	mov	r0, r7
   2720a:	2202      	movs	r2, #2
   2720c:	f7ee fb34 	bl	15878 <bt_att_create_pdu>
	if (!pdu) {
   27210:	4607      	mov	r7, r0
   27212:	b1c0      	cbz	r0, 27246 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   27214:	2102      	movs	r1, #2
   27216:	300c      	adds	r0, #12
   27218:	f7f2 fa56 	bl	196c8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2721c:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2721e:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   27220:	7003      	strb	r3, [r0, #0]
   27222:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   27224:	4628      	mov	r0, r5
   27226:	f7ff fd6d 	bl	26d04 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2722a:	2e41      	cmp	r6, #65	; 0x41
   2722c:	bf28      	it	cs
   2722e:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   27230:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27232:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27234:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   27236:	f7ff fc90 	bl	26b5a <att_chan_mtu_updated>
	return 0;
   2723a:	4620      	mov	r0, r4
}
   2723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2723e:	2006      	movs	r0, #6
   27240:	e7fc      	b.n	2723c <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   27242:	2004      	movs	r0, #4
   27244:	e7fa      	b.n	2723c <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   27246:	200e      	movs	r0, #14
   27248:	e7f8      	b.n	2723c <att_mtu_req+0x52>

0002724a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2724a:	8a0a      	ldrh	r2, [r1, #16]
   2724c:	2300      	movs	r3, #0
   2724e:	68c9      	ldr	r1, [r1, #12]
   27250:	f7ee be1a 	b.w	15e88 <att_handle_rsp>

00027254 <bt_att_encrypt_change>:
{
   27254:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   27256:	4606      	mov	r6, r0
	if (!att_chan->att) {
   27258:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2725c:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2725e:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   27262:	2b00      	cmp	r3, #0
   27264:	d038      	beq.n	272d8 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   27266:	b141      	cbz	r1, 2727a <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   27268:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2726c:	2b00      	cmp	r3, #0
   2726e:	d033      	beq.n	272d8 <bt_att_encrypt_change+0x84>
   27270:	7c1b      	ldrb	r3, [r3, #16]
   27272:	07da      	lsls	r2, r3, #31
   27274:	d530      	bpl.n	272d8 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   27276:	2305      	movs	r3, #5
   27278:	e021      	b.n	272be <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2727a:	4628      	mov	r0, r5
   2727c:	f7ef ffc4 	bl	17208 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   27280:	7a6b      	ldrb	r3, [r5, #9]
   27282:	2b01      	cmp	r3, #1
   27284:	d028      	beq.n	272d8 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   27286:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2728a:	b32d      	cbz	r5, 272d8 <bt_att_encrypt_change+0x84>
   2728c:	7c2b      	ldrb	r3, [r5, #16]
   2728e:	07db      	lsls	r3, r3, #31
   27290:	d522      	bpl.n	272d8 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   27292:	68eb      	ldr	r3, [r5, #12]
   27294:	2b00      	cmp	r3, #0
   27296:	d0ee      	beq.n	27276 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   27298:	4630      	mov	r0, r6
   2729a:	696a      	ldr	r2, [r5, #20]
   2729c:	7c69      	ldrb	r1, [r5, #17]
   2729e:	f7ee f98f 	bl	155c0 <bt_att_chan_create_pdu>
	if (!buf) {
   272a2:	4604      	mov	r4, r0
   272a4:	b150      	cbz	r0, 272bc <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   272a6:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   272aa:	68eb      	ldr	r3, [r5, #12]
   272ac:	4798      	blx	r3
   272ae:	b168      	cbz	r0, 272cc <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   272b0:	69a0      	ldr	r0, [r4, #24]
   272b2:	f7ed fe83 	bl	14fbc <tx_meta_data_free>
		net_buf_unref(buf);
   272b6:	4620      	mov	r0, r4
   272b8:	f7f2 f8e4 	bl	19484 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   272bc:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   272be:	2200      	movs	r2, #0
   272c0:	4630      	mov	r0, r6
}
   272c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   272c6:	4611      	mov	r1, r2
   272c8:	f7ee bdde 	b.w	15e88 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   272cc:	4621      	mov	r1, r4
   272ce:	4630      	mov	r0, r6
   272d0:	f7ed ff40 	bl	15154 <chan_send>
   272d4:	2800      	cmp	r0, #0
   272d6:	d1eb      	bne.n	272b0 <bt_att_encrypt_change+0x5c>
}
   272d8:	bd70      	pop	{r4, r5, r6, pc}

000272da <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   272da:	2001      	movs	r0, #1
   272dc:	4770      	bx	lr

000272de <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   272de:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   272e0:	f7ed ffee 	bl	152c0 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   272e4:	b178      	cbz	r0, 27306 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   272e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   272e8:	b16b      	cbz	r3, 27306 <bt_att_clear_out_of_sync_sent+0x28>
   272ea:	3bf0      	subs	r3, #240	; 0xf0
   272ec:	f103 0298 	add.w	r2, r3, #152	; 0x98
   272f0:	e8d2 0fef 	ldaex	r0, [r2]
   272f4:	f020 0020 	bic.w	r0, r0, #32
   272f8:	e8c2 0fe1 	stlex	r1, r0, [r2]
   272fc:	2900      	cmp	r1, #0
   272fe:	d1f7      	bne.n	272f0 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   27300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   27304:	e7f0      	b.n	272e8 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   27306:	bd08      	pop	{r3, pc}

00027308 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   27308:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2730a:	2104      	movs	r1, #4
   2730c:	f7ff fbb5 	bl	26a7a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   27310:	b128      	cbz	r0, 2731e <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   27312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   27316:	2105      	movs	r1, #5
   27318:	3094      	adds	r0, #148	; 0x94
   2731a:	f7ff bbdc 	b.w	26ad6 <atomic_test_bit>
}
   2731e:	bd08      	pop	{r3, pc}

00027320 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   27320:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   27322:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   27326:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   27328:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2732a:	8082      	strh	r2, [r0, #4]
}
   2732c:	4770      	bx	lr

0002732e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2732e:	6010      	str	r0, [r2, #0]
}
   27330:	2000      	movs	r0, #0
   27332:	4770      	bx	lr

00027334 <gatt_ccc_changed>:
{
   27334:	460b      	mov	r3, r1
   27336:	8909      	ldrh	r1, [r1, #8]
   27338:	8a5a      	ldrh	r2, [r3, #18]
   2733a:	4291      	cmp	r1, r2
   2733c:	bf38      	it	cc
   2733e:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   27340:	8a9a      	ldrh	r2, [r3, #20]
   27342:	428a      	cmp	r2, r1
   27344:	d003      	beq.n	2734e <gatt_ccc_changed+0x1a>
		ccc->value = value;
   27346:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   27348:	699b      	ldr	r3, [r3, #24]
   2734a:	b103      	cbz	r3, 2734e <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2734c:	4718      	bx	r3
}
   2734e:	4770      	bx	lr

00027350 <gatt_indicate_rsp>:
{
   27350:	b510      	push	{r4, lr}
   27352:	9c02      	ldr	r4, [sp, #8]
   27354:	460a      	mov	r2, r1
	if (params->func) {
   27356:	68a3      	ldr	r3, [r4, #8]
   27358:	b10b      	cbz	r3, 2735e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2735a:	4621      	mov	r1, r4
   2735c:	4798      	blx	r3
	params->_ref--;
   2735e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   27360:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   27362:	3b01      	subs	r3, #1
   27364:	b2db      	uxtb	r3, r3
   27366:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   27368:	b122      	cbz	r2, 27374 <gatt_indicate_rsp+0x24>
   2736a:	b91b      	cbnz	r3, 27374 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2736c:	4620      	mov	r0, r4
}
   2736e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   27372:	4710      	bx	r2
}
   27374:	bd10      	pop	{r4, pc}

00027376 <match_uuid>:
	data->attr = attr;
   27376:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   27378:	8091      	strh	r1, [r2, #4]
}
   2737a:	2000      	movs	r0, #0
   2737c:	4770      	bx	lr

0002737e <gen_hash_m>:
{
   2737e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27380:	6807      	ldr	r7, [r0, #0]
{
   27382:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27384:	783d      	ldrb	r5, [r7, #0]
{
   27386:	4614      	mov	r4, r2
   27388:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2738a:	b9dd      	cbnz	r5, 273c4 <gen_hash_m+0x46>
	switch (u16->val) {
   2738c:	887b      	ldrh	r3, [r7, #2]
   2738e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   27392:	d004      	beq.n	2739e <gen_hash_m+0x20>
   27394:	d810      	bhi.n	273b8 <gen_hash_m+0x3a>
   27396:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2739a:	2b03      	cmp	r3, #3
   2739c:	d812      	bhi.n	273c4 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2739e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   273a2:	2202      	movs	r2, #2
   273a4:	4620      	mov	r0, r4
   273a6:	f10d 010a 	add.w	r1, sp, #10
   273aa:	f7fe fb02 	bl	259b2 <tc_cmac_update>
   273ae:	b968      	cbnz	r0, 273cc <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   273b0:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   273b4:	65a2      	str	r2, [r4, #88]	; 0x58
   273b6:	e006      	b.n	273c6 <gen_hash_m+0x48>
	switch (u16->val) {
   273b8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   273bc:	33ff      	adds	r3, #255	; 0xff
   273be:	b29b      	uxth	r3, r3
   273c0:	2b04      	cmp	r3, #4
   273c2:	d91e      	bls.n	27402 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   273c4:	2501      	movs	r5, #1
}
   273c6:	4628      	mov	r0, r5
   273c8:	b009      	add	sp, #36	; 0x24
   273ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   273cc:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   273ce:	2202      	movs	r2, #2
   273d0:	4620      	mov	r0, r4
   273d2:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   273d6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   273da:	f7fe faea 	bl	259b2 <tc_cmac_update>
   273de:	2800      	cmp	r0, #0
   273e0:	d0e6      	beq.n	273b0 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   273e2:	2000      	movs	r0, #0
   273e4:	9000      	str	r0, [sp, #0]
   273e6:	aa03      	add	r2, sp, #12
   273e8:	2313      	movs	r3, #19
   273ea:	4631      	mov	r1, r6
   273ec:	6877      	ldr	r7, [r6, #4]
   273ee:	47b8      	blx	r7
		if (len < 0) {
   273f0:	1e02      	subs	r2, r0, #0
   273f2:	dbdf      	blt.n	273b4 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   273f4:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   273f6:	4620      	mov	r0, r4
   273f8:	f7fe fadb 	bl	259b2 <tc_cmac_update>
   273fc:	2800      	cmp	r0, #0
   273fe:	d1e1      	bne.n	273c4 <gen_hash_m+0x46>
   27400:	e7d6      	b.n	273b0 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   27402:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27406:	2202      	movs	r2, #2
   27408:	4620      	mov	r0, r4
   2740a:	f10d 010a 	add.w	r1, sp, #10
   2740e:	f7fe fad0 	bl	259b2 <tc_cmac_update>
   27412:	2800      	cmp	r0, #0
   27414:	d0cc      	beq.n	273b0 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   27416:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27418:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2741a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2741e:	f10d 010a 	add.w	r1, sp, #10
   27422:	e7e8      	b.n	273f6 <gen_hash_m+0x78>

00027424 <bt_addr_le_eq>:
   27424:	2207      	movs	r2, #7
{
   27426:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   27428:	f002 faab 	bl	29982 <memcmp>
}
   2742c:	fab0 f080 	clz	r0, r0
   27430:	0940      	lsrs	r0, r0, #5
   27432:	bd08      	pop	{r3, pc}

00027434 <bt_addr_le_copy>:
   27434:	680b      	ldr	r3, [r1, #0]
   27436:	6003      	str	r3, [r0, #0]
   27438:	888b      	ldrh	r3, [r1, #4]
   2743a:	8083      	strh	r3, [r0, #4]
   2743c:	798b      	ldrb	r3, [r1, #6]
   2743e:	7183      	strb	r3, [r0, #6]
}
   27440:	4770      	bx	lr

00027442 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   27442:	2300      	movs	r3, #0
   27444:	6003      	str	r3, [r0, #0]
   27446:	6043      	str	r3, [r0, #4]
   27448:	6083      	str	r3, [r0, #8]
}
   2744a:	4770      	bx	lr

0002744c <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2744c:	b538      	push	{r3, r4, r5, lr}
   2744e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   27452:	4615      	mov	r5, r2
	if (offset > value_len) {
   27454:	4294      	cmp	r4, r2
   27456:	d30a      	bcc.n	2746e <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   27458:	1aa4      	subs	r4, r4, r2
   2745a:	428c      	cmp	r4, r1
   2745c:	bfa8      	it	ge
   2745e:	460c      	movge	r4, r1
   27460:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27462:	4622      	mov	r2, r4
   27464:	1959      	adds	r1, r3, r5
   27466:	f002 fa9c 	bl	299a2 <memcpy>
}
   2746a:	4620      	mov	r0, r4
   2746c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2746e:	f06f 0406 	mvn.w	r4, #6
   27472:	e7fa      	b.n	2746a <bt_gatt_attr_read.constprop.0+0x1e>

00027474 <bt_gatt_attr_read_ccc>:
{
   27474:	b530      	push	{r4, r5, lr}
   27476:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   27478:	68c9      	ldr	r1, [r1, #12]
{
   2747a:	4614      	mov	r4, r2
   2747c:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2747e:	f7ee fea9 	bl	161d4 <find_ccc_cfg>
	if (cfg) {
   27482:	b100      	cbz	r0, 27486 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   27484:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   27486:	2302      	movs	r3, #2
   27488:	f8ad 000e 	strh.w	r0, [sp, #14]
   2748c:	9300      	str	r3, [sp, #0]
   2748e:	4629      	mov	r1, r5
   27490:	4620      	mov	r0, r4
   27492:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   27496:	f10d 030e 	add.w	r3, sp, #14
   2749a:	f7ff ffd7 	bl	2744c <bt_gatt_attr_read.constprop.0>
}
   2749e:	b005      	add	sp, #20
   274a0:	bd30      	pop	{r4, r5, pc}

000274a2 <bt_gatt_attr_read_service>:
{
   274a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   274a4:	460c      	mov	r4, r1
   274a6:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   274a8:	68e3      	ldr	r3, [r4, #12]
{
   274aa:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   274ac:	781c      	ldrb	r4, [r3, #0]
{
   274ae:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   274b2:	b13c      	cbz	r4, 274c4 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   274b4:	2410      	movs	r4, #16
   274b6:	3301      	adds	r3, #1
   274b8:	9406      	str	r4, [sp, #24]
}
   274ba:	b004      	add	sp, #16
   274bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   274c0:	f7ff bfc4 	b.w	2744c <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   274c4:	885b      	ldrh	r3, [r3, #2]
   274c6:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   274ca:	2302      	movs	r3, #2
   274cc:	9300      	str	r3, [sp, #0]
   274ce:	f10d 030e 	add.w	r3, sp, #14
   274d2:	f7ff ffbb 	bl	2744c <bt_gatt_attr_read.constprop.0>
}
   274d6:	b004      	add	sp, #16
   274d8:	bd10      	pop	{r4, pc}

000274da <cf_read>:
{
   274da:	b530      	push	{r4, r5, lr}
   274dc:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   274de:	2300      	movs	r3, #0
{
   274e0:	b085      	sub	sp, #20
   274e2:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   274e4:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   274e8:	f7ee fe24 	bl	16134 <find_cf_cfg>
	if (cfg) {
   274ec:	b110      	cbz	r0, 274f4 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   274ee:	7a03      	ldrb	r3, [r0, #8]
   274f0:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   274f4:	2301      	movs	r3, #1
   274f6:	4629      	mov	r1, r5
   274f8:	9300      	str	r3, [sp, #0]
   274fa:	4620      	mov	r0, r4
   274fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   27500:	ab03      	add	r3, sp, #12
   27502:	f7ff ffa3 	bl	2744c <bt_gatt_attr_read.constprop.0>
}
   27506:	b005      	add	sp, #20
   27508:	bd30      	pop	{r4, r5, pc}

0002750a <read_name>:
{
   2750a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2750e:	4614      	mov	r4, r2
   27510:	461d      	mov	r5, r3
   27512:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   27516:	f7eb fa7f 	bl	12a18 <bt_get_name>
   2751a:	4606      	mov	r6, r0
				 strlen(name));
   2751c:	f7e1 ff20 	bl	9360 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   27520:	b280      	uxth	r0, r0
   27522:	9006      	str	r0, [sp, #24]
   27524:	4633      	mov	r3, r6
   27526:	463a      	mov	r2, r7
   27528:	4629      	mov	r1, r5
   2752a:	4620      	mov	r0, r4
}
   2752c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   27530:	f7ff bf8c 	b.w	2744c <bt_gatt_attr_read.constprop.0>

00027534 <read_appearance>:
{
   27534:	b530      	push	{r4, r5, lr}
   27536:	b085      	sub	sp, #20
   27538:	4614      	mov	r4, r2
   2753a:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2753c:	f7fe fef5 	bl	2632a <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   27540:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   27542:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   27546:	9300      	str	r3, [sp, #0]
   27548:	4629      	mov	r1, r5
   2754a:	4620      	mov	r0, r4
   2754c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   27550:	f10d 030e 	add.w	r3, sp, #14
   27554:	f7ff ff7a 	bl	2744c <bt_gatt_attr_read.constprop.0>
}
   27558:	b005      	add	sp, #20
   2755a:	bd30      	pop	{r4, r5, pc}

0002755c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2755c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2755e:	ab0b      	add	r3, sp, #44	; 0x2c
   27560:	9305      	str	r3, [sp, #20]
   27562:	9303      	str	r3, [sp, #12]
   27564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27566:	9302      	str	r3, [sp, #8]
   27568:	2300      	movs	r3, #0
   2756a:	4618      	mov	r0, r3
   2756c:	e9cd 3300 	strd	r3, r3, [sp]
   27570:	f7e6 ff80 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   27574:	b007      	add	sp, #28
   27576:	f85d fb04 	ldr.w	pc, [sp], #4

0002757a <sc_clear>:
{
   2757a:	b538      	push	{r3, r4, r5, lr}
   2757c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2757e:	f100 0590 	add.w	r5, r0, #144	; 0x90
   27582:	4629      	mov	r1, r5
   27584:	7a00      	ldrb	r0, [r0, #8]
   27586:	f7fe fed3 	bl	26330 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2758a:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2758c:	7a20      	ldrb	r0, [r4, #8]
   2758e:	f7ee fdff 	bl	16190 <find_sc_cfg>
		if (cfg) {
   27592:	b118      	cbz	r0, 2759c <sc_clear+0x22>
}
   27594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   27598:	f7ff bf53 	b.w	27442 <clear_sc_cfg>
}
   2759c:	bd38      	pop	{r3, r4, r5, pc}

0002759e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2759e:	2a02      	cmp	r2, #2
{
   275a0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   275a2:	d108      	bne.n	275b6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   275a4:	2300      	movs	r3, #0
   275a6:	f100 0190 	add.w	r1, r0, #144	; 0x90
   275aa:	461a      	mov	r2, r3
   275ac:	7a00      	ldrb	r0, [r0, #8]
   275ae:	f7ee fec1 	bl	16334 <sc_save>
}
   275b2:	2002      	movs	r0, #2
   275b4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   275b6:	f7ff ffe0 	bl	2757a <sc_clear>
   275ba:	e7fa      	b.n	275b2 <sc_ccc_cfg_write+0x14>

000275bc <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   275bc:	2301      	movs	r3, #1
   275be:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   275c0:	e8d0 2fef 	ldaex	r2, [r0]
   275c4:	431a      	orrs	r2, r3
   275c6:	e8c0 2fe1 	stlex	r1, r2, [r0]
   275ca:	2900      	cmp	r1, #0
   275cc:	d1f8      	bne.n	275c0 <atomic_set_bit+0x4>
}
   275ce:	4770      	bx	lr

000275d0 <sc_restore_rsp>:
{
   275d0:	b538      	push	{r3, r4, r5, lr}
   275d2:	4604      	mov	r4, r0
   275d4:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   275d6:	f7ff fe80 	bl	272da <bt_att_fixed_chan_only>
   275da:	b150      	cbz	r0, 275f2 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   275dc:	4620      	mov	r0, r4
   275de:	f7ee fda9 	bl	16134 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   275e2:	b130      	cbz	r0, 275f2 <sc_restore_rsp+0x22>
   275e4:	7a03      	ldrb	r3, [r0, #8]
   275e6:	07db      	lsls	r3, r3, #31
   275e8:	d503      	bpl.n	275f2 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   275ea:	2100      	movs	r1, #0
   275ec:	300c      	adds	r0, #12
   275ee:	f7ff ffe5 	bl	275bc <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   275f2:	b935      	cbnz	r5, 27602 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   275f4:	7a20      	ldrb	r0, [r4, #8]
   275f6:	f104 0190 	add.w	r1, r4, #144	; 0x90
   275fa:	f7ee fdc9 	bl	16190 <find_sc_cfg>
		if (sc_cfg) {
   275fe:	b100      	cbz	r0, 27602 <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   27600:	6085      	str	r5, [r0, #8]
}
   27602:	bd38      	pop	{r3, r4, r5, pc}

00027604 <bt_gatt_attr_value_handle>:
{
   27604:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   27606:	4604      	mov	r4, r0
   27608:	b910      	cbnz	r0, 27610 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2760a:	2000      	movs	r0, #0
}
   2760c:	b002      	add	sp, #8
   2760e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   27610:	2300      	movs	r3, #0
   27612:	f88d 3004 	strb.w	r3, [sp, #4]
   27616:	f642 0303 	movw	r3, #10243	; 0x2803
   2761a:	6800      	ldr	r0, [r0, #0]
   2761c:	a901      	add	r1, sp, #4
   2761e:	f8ad 3006 	strh.w	r3, [sp, #6]
   27622:	f7fe fd38 	bl	26096 <bt_uuid_cmp>
   27626:	2800      	cmp	r0, #0
   27628:	d1ef      	bne.n	2760a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2762a:	68e3      	ldr	r3, [r4, #12]
   2762c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2762e:	2800      	cmp	r0, #0
   27630:	d1ec      	bne.n	2760c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   27632:	4620      	mov	r0, r4
   27634:	f7ee ffee 	bl	16614 <bt_gatt_attr_get_handle>
   27638:	3001      	adds	r0, #1
   2763a:	b280      	uxth	r0, r0
	return handle;
   2763c:	e7e6      	b.n	2760c <bt_gatt_attr_value_handle+0x8>

0002763e <bt_gatt_attr_read_chrc>:
{
   2763e:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   27640:	68cc      	ldr	r4, [r1, #12]
{
   27642:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   27644:	79a3      	ldrb	r3, [r4, #6]
{
   27646:	b088      	sub	sp, #32
   27648:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2764a:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2764e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   27650:	f7ff ffd8 	bl	27604 <bt_gatt_attr_value_handle>
   27654:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   27658:	6824      	ldr	r4, [r4, #0]
   2765a:	7823      	ldrb	r3, [r4, #0]
   2765c:	b96b      	cbnz	r3, 2767a <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2765e:	8863      	ldrh	r3, [r4, #2]
   27660:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   27664:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   27666:	9300      	str	r3, [sp, #0]
   27668:	4631      	mov	r1, r6
   2766a:	4628      	mov	r0, r5
   2766c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   27670:	ab03      	add	r3, sp, #12
   27672:	f7ff feeb 	bl	2744c <bt_gatt_attr_read.constprop.0>
}
   27676:	b008      	add	sp, #32
   27678:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2767a:	1c63      	adds	r3, r4, #1
   2767c:	f10d 020f 	add.w	r2, sp, #15
   27680:	3411      	adds	r4, #17
   27682:	f853 1b04 	ldr.w	r1, [r3], #4
   27686:	42a3      	cmp	r3, r4
   27688:	f842 1b04 	str.w	r1, [r2], #4
   2768c:	d1f9      	bne.n	27682 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2768e:	2313      	movs	r3, #19
   27690:	e7e9      	b.n	27666 <bt_gatt_attr_read_chrc+0x28>

00027692 <bt_gatt_foreach_attr>:
{
   27692:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   27694:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27698:	2300      	movs	r3, #0
   2769a:	461a      	mov	r2, r3
   2769c:	9300      	str	r3, [sp, #0]
   2769e:	f7ef f801 	bl	166a4 <bt_gatt_foreach_attr_type>
}
   276a2:	b005      	add	sp, #20
   276a4:	f85d fb04 	ldr.w	pc, [sp], #4

000276a8 <db_hash_process>:
	db_hash_gen(true);
   276a8:	f7ef b86c 	b.w	16784 <db_hash_gen.constprop.0>

000276ac <bt_gatt_check_perm>:
{
   276ac:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   276ae:	07d4      	lsls	r4, r2, #31
{
   276b0:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   276b2:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   276b4:	d504      	bpl.n	276c0 <bt_gatt_check_perm+0x14>
   276b6:	f013 0f95 	tst.w	r3, #149	; 0x95
   276ba:	d027      	beq.n	2770c <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   276bc:	6848      	ldr	r0, [r1, #4]
   276be:	b328      	cbz	r0, 2770c <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   276c0:	0790      	lsls	r0, r2, #30
   276c2:	d504      	bpl.n	276ce <bt_gatt_check_perm+0x22>
   276c4:	f413 7f95 	tst.w	r3, #298	; 0x12a
   276c8:	d022      	beq.n	27710 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   276ca:	6889      	ldr	r1, [r1, #8]
   276cc:	b301      	cbz	r1, 27710 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   276ce:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   276d2:	f414 7fc0 	tst.w	r4, #384	; 0x180
   276d6:	d007      	beq.n	276e8 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   276d8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   276dc:	b90b      	cbnz	r3, 276e2 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   276de:	2005      	movs	r0, #5
}
   276e0:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   276e2:	7b5b      	ldrb	r3, [r3, #13]
   276e4:	06db      	lsls	r3, r3, #27
   276e6:	d5fa      	bpl.n	276de <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   276e8:	f014 0f30 	tst.w	r4, #48	; 0x30
   276ec:	d108      	bne.n	27700 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   276ee:	f014 000c 	ands.w	r0, r4, #12
   276f2:	d0f5      	beq.n	276e0 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   276f4:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   276f6:	2b00      	cmp	r3, #0
   276f8:	bf14      	ite	ne
   276fa:	2000      	movne	r0, #0
   276fc:	200f      	moveq	r0, #15
   276fe:	e7ef      	b.n	276e0 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   27700:	4628      	mov	r0, r5
   27702:	f7ff f8ee 	bl	268e2 <bt_conn_get_security>
   27706:	2802      	cmp	r0, #2
   27708:	d8f1      	bhi.n	276ee <bt_gatt_check_perm+0x42>
   2770a:	e7e8      	b.n	276de <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2770c:	2002      	movs	r0, #2
   2770e:	e7e7      	b.n	276e0 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   27710:	2003      	movs	r0, #3
   27712:	e7e5      	b.n	276e0 <bt_gatt_check_perm+0x34>

00027714 <bt_gatt_change_aware>:
{
   27714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27716:	4606      	mov	r6, r0
   27718:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2771a:	f7ee fd0b 	bl	16134 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2771e:	b1e0      	cbz	r0, 2775a <bt_gatt_change_aware+0x46>
   27720:	7a03      	ldrb	r3, [r0, #8]
   27722:	07db      	lsls	r3, r3, #31
   27724:	d519      	bpl.n	2775a <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   27726:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2772a:	e8d4 5faf 	lda	r5, [r4]
   2772e:	f015 0501 	ands.w	r5, r5, #1
   27732:	d112      	bne.n	2775a <bt_gatt_change_aware+0x46>
	if (!req) {
   27734:	b197      	cbz	r7, 2775c <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27736:	e8d4 1fef 	ldaex	r1, [r4]
   2773a:	f021 0302 	bic.w	r3, r1, #2
   2773e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   27742:	2a00      	cmp	r2, #0
   27744:	d1f7      	bne.n	27736 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   27746:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   2774a:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2774c:	d008      	beq.n	27760 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2774e:	f7ff fdc6 	bl	272de <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   27752:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   27754:	4620      	mov	r0, r4
   27756:	f7ff ff31 	bl	275bc <atomic_set_bit>
		return true;
   2775a:	2501      	movs	r5, #1
}
   2775c:	4628      	mov	r0, r5
   2775e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   27760:	f7ff fdbb 	bl	272da <bt_att_fixed_chan_only>
   27764:	2800      	cmp	r0, #0
   27766:	d0f9      	beq.n	2775c <bt_gatt_change_aware+0x48>
   27768:	4630      	mov	r0, r6
   2776a:	f7ff fdcd 	bl	27308 <bt_att_out_of_sync_sent_on_fixed>
   2776e:	2800      	cmp	r0, #0
   27770:	d0f4      	beq.n	2775c <bt_gatt_change_aware+0x48>
   27772:	e8d4 3fef 	ldaex	r3, [r4]
   27776:	f023 0302 	bic.w	r3, r3, #2
   2777a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2777e:	2a00      	cmp	r2, #0
   27780:	d1f7      	bne.n	27772 <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   27782:	4630      	mov	r0, r6
   27784:	f7ff fdab 	bl	272de <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   27788:	4639      	mov	r1, r7
   2778a:	e7e3      	b.n	27754 <bt_gatt_change_aware+0x40>

0002778c <smp_pairing_rsp>:
}
   2778c:	2007      	movs	r0, #7
   2778e:	4770      	bx	lr

00027790 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27790:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27794:	4108      	asrs	r0, r1
}
   27796:	f000 0001 	and.w	r0, r0, #1
   2779a:	4770      	bx	lr

0002779c <update_keys_check>:
{
   2779c:	4603      	mov	r3, r0
   2779e:	b510      	push	{r4, lr}
	if (!keys ||
   277a0:	b1d9      	cbz	r1, 277da <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   277a2:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   277a4:	f010 0f24 	tst.w	r0, #36	; 0x24
   277a8:	d017      	beq.n	277da <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   277aa:	7d1a      	ldrb	r2, [r3, #20]
   277ac:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   277ae:	7b09      	ldrb	r1, [r1, #12]
   277b0:	42a2      	cmp	r2, r4
   277b2:	bf28      	it	cs
   277b4:	4622      	movcs	r2, r4
   277b6:	4291      	cmp	r1, r2
   277b8:	d901      	bls.n	277be <update_keys_check+0x22>
			return false;
   277ba:	2000      	movs	r0, #0
}
   277bc:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   277be:	0682      	lsls	r2, r0, #26
   277c0:	d404      	bmi.n	277cc <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   277c2:	7a18      	ldrb	r0, [r3, #8]
   277c4:	3800      	subs	r0, #0
   277c6:	bf18      	it	ne
   277c8:	2001      	movne	r0, #1
   277ca:	e7f7      	b.n	277bc <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   277cc:	2105      	movs	r1, #5
   277ce:	1d18      	adds	r0, r3, #4
   277d0:	f7ff ffde 	bl	27790 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   277d4:	2800      	cmp	r0, #0
   277d6:	d1f4      	bne.n	277c2 <update_keys_check+0x26>
   277d8:	e7ef      	b.n	277ba <update_keys_check+0x1e>
	return true;
   277da:	2001      	movs	r0, #1
   277dc:	e7ee      	b.n	277bc <update_keys_check+0x20>

000277de <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   277de:	2301      	movs	r3, #1
   277e0:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   277e2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   277e4:	e8d0 2fef 	ldaex	r2, [r0]
   277e8:	401a      	ands	r2, r3
   277ea:	e8c0 2fe1 	stlex	r1, r2, [r0]
   277ee:	2900      	cmp	r1, #0
   277f0:	d1f8      	bne.n	277e4 <atomic_clear_bit+0x6>
}
   277f2:	4770      	bx	lr

000277f4 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   277f4:	680b      	ldr	r3, [r1, #0]
   277f6:	6003      	str	r3, [r0, #0]
   277f8:	888b      	ldrh	r3, [r1, #4]
   277fa:	8083      	strh	r3, [r0, #4]
   277fc:	798b      	ldrb	r3, [r1, #6]
   277fe:	7183      	strb	r3, [r0, #6]
   27800:	4770      	bx	lr

00027802 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   27802:	2007      	movs	r0, #7
   27804:	4770      	bx	lr

00027806 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   27806:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27808:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2780a:	2200      	movs	r2, #0
   2780c:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2780e:	4604      	mov	r4, r0
   27810:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   27812:	460a      	mov	r2, r1
   27814:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   27818:	2106      	movs	r1, #6
   2781a:	f7ff f90c 	bl	26a36 <bt_l2cap_send_cb>
   2781e:	b128      	cbz	r0, 2782c <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   27820:	4628      	mov	r0, r5
}
   27822:	b003      	add	sp, #12
   27824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   27828:	f7f1 be2c 	b.w	19484 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2782c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27830:	2300      	movs	r3, #0
   27832:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   27836:	b003      	add	sp, #12
   27838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2783c:	f7f9 b920 	b.w	20a80 <k_work_reschedule>

00027840 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27840:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27842:	ab0b      	add	r3, sp, #44	; 0x2c
   27844:	9305      	str	r3, [sp, #20]
   27846:	9303      	str	r3, [sp, #12]
   27848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2784a:	9302      	str	r3, [sp, #8]
   2784c:	2300      	movs	r3, #0
   2784e:	4618      	mov	r0, r3
   27850:	e9cd 3300 	strd	r3, r3, [sp]
   27854:	f7e6 fe0e 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   27858:	b007      	add	sp, #28
   2785a:	f85d fb04 	ldr.w	pc, [sp], #4

0002785e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2785e:	2301      	movs	r3, #1
   27860:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27862:	e8d0 2fef 	ldaex	r2, [r0]
   27866:	431a      	orrs	r2, r3
   27868:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2786c:	2900      	cmp	r1, #0
   2786e:	d1f8      	bne.n	27862 <atomic_set_bit+0x4>
}
   27870:	4770      	bx	lr

00027872 <smp_keypress_notif>:
{
   27872:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   27874:	210e      	movs	r1, #14
   27876:	f7ff fff2 	bl	2785e <atomic_set_bit>
}
   2787a:	2000      	movs	r0, #0
   2787c:	bd08      	pop	{r3, pc}

0002787e <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2787e:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   27880:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   27882:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   27884:	4628      	mov	r0, r5
   27886:	2104      	movs	r1, #4
   27888:	f7ff ff82 	bl	27790 <atomic_test_bit>
   2788c:	b168      	cbz	r0, 278aa <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2788e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   27890:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   27892:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   27894:	4608      	mov	r0, r1
   27896:	f7ff f8cb 	bl	26a30 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2789a:	4604      	mov	r4, r0
   2789c:	b940      	cbnz	r0, 278b0 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2789e:	2104      	movs	r1, #4
   278a0:	4628      	mov	r0, r5
   278a2:	f7ff ffdc 	bl	2785e <atomic_set_bit>
}
   278a6:	4620      	mov	r0, r4
   278a8:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   278aa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   278ae:	e7ef      	b.n	27890 <smp_create_pdu.constprop.0+0x12>
   278b0:	2101      	movs	r1, #1
   278b2:	300c      	adds	r0, #12
   278b4:	f7f1 ff08 	bl	196c8 <net_buf_simple_add>
	hdr->code = op;
   278b8:	7006      	strb	r6, [r0, #0]
	return buf;
   278ba:	e7f4      	b.n	278a6 <smp_create_pdu.constprop.0+0x28>

000278bc <send_pairing_rsp>:
{
   278bc:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   278be:	2102      	movs	r1, #2
{
   278c0:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   278c2:	f7ff ffdc 	bl	2787e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   278c6:	4605      	mov	r5, r0
   278c8:	b180      	cbz	r0, 278ec <send_pairing_rsp+0x30>
   278ca:	2106      	movs	r1, #6
   278cc:	300c      	adds	r0, #12
   278ce:	f7f1 fefb 	bl	196c8 <net_buf_simple_add>
   278d2:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   278d6:	2200      	movs	r2, #0
   278d8:	6003      	str	r3, [r0, #0]
   278da:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   278de:	4629      	mov	r1, r5
   278e0:	8083      	strh	r3, [r0, #4]
   278e2:	4620      	mov	r0, r4
   278e4:	f7ff ff8f 	bl	27806 <smp_send.constprop.0>
	return 0;
   278e8:	2000      	movs	r0, #0
}
   278ea:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   278ec:	2008      	movs	r0, #8
   278ee:	e7fc      	b.n	278ea <send_pairing_rsp+0x2e>

000278f0 <smp_send_pairing_random>:
{
   278f0:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   278f2:	2104      	movs	r1, #4
{
   278f4:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   278f6:	f7ff ffc2 	bl	2787e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   278fa:	4605      	mov	r5, r0
   278fc:	b1a0      	cbz	r0, 27928 <smp_send_pairing_random+0x38>
   278fe:	2110      	movs	r1, #16
   27900:	300c      	adds	r0, #12
   27902:	f7f1 fee1 	bl	196c8 <net_buf_simple_add>
   27906:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2790a:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2790e:	f853 1b04 	ldr.w	r1, [r3], #4
   27912:	4293      	cmp	r3, r2
   27914:	f840 1b04 	str.w	r1, [r0], #4
   27918:	d1f9      	bne.n	2790e <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2791a:	4620      	mov	r0, r4
   2791c:	2200      	movs	r2, #0
   2791e:	4629      	mov	r1, r5
   27920:	f7ff ff71 	bl	27806 <smp_send.constprop.0>
	return 0;
   27924:	2000      	movs	r0, #0
}
   27926:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   27928:	2008      	movs	r0, #8
   2792a:	e7fc      	b.n	27926 <smp_send_pairing_random+0x36>

0002792c <smp_dhkey_check>:
{
   2792c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2792e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   27932:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   27934:	78db      	ldrb	r3, [r3, #3]
   27936:	2b01      	cmp	r3, #1
   27938:	d119      	bne.n	2796e <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2793a:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2793c:	1d06      	adds	r6, r0, #4
   2793e:	2110      	movs	r1, #16
   27940:	4630      	mov	r0, r6
   27942:	f7ff ff4c 	bl	277de <atomic_clear_bit>
   27946:	462b      	mov	r3, r5
   27948:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2794c:	f105 0110 	add.w	r1, r5, #16
   27950:	f853 0b04 	ldr.w	r0, [r3], #4
   27954:	428b      	cmp	r3, r1
   27956:	f842 0b04 	str.w	r0, [r2], #4
   2795a:	d1f9      	bne.n	27950 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2795c:	2107      	movs	r1, #7
   2795e:	4630      	mov	r0, r6
   27960:	f7ff ff16 	bl	27790 <atomic_test_bit>
   27964:	b128      	cbz	r0, 27972 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27966:	2109      	movs	r1, #9
   27968:	4630      	mov	r0, r6
   2796a:	f7ff ff78 	bl	2785e <atomic_set_bit>
}
   2796e:	2000      	movs	r0, #0
   27970:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   27972:	210a      	movs	r1, #10
   27974:	4630      	mov	r0, r6
   27976:	f7ff ff0b 	bl	27790 <atomic_test_bit>
   2797a:	2800      	cmp	r0, #0
   2797c:	d1f3      	bne.n	27966 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2797e:	4620      	mov	r0, r4
}
   27980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   27984:	f7f0 b8ee 	b.w	17b64 <compute_and_check_and_send_periph_dhcheck>

00027988 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   27988:	2007      	movs	r0, #7
   2798a:	4770      	bx	lr

0002798c <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2798c:	2301      	movs	r3, #1
   2798e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27992:	43ca      	mvns	r2, r1
{
   27994:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27996:	e8d0 3fef 	ldaex	r3, [r0]
   2799a:	ea03 0402 	and.w	r4, r3, r2
   2799e:	e8c0 4fe5 	stlex	r5, r4, [r0]
   279a2:	2d00      	cmp	r5, #0
   279a4:	d1f7      	bne.n	27996 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   279a6:	4219      	tst	r1, r3
}
   279a8:	bf14      	ite	ne
   279aa:	2001      	movne	r0, #1
   279ac:	2000      	moveq	r0, #0
   279ae:	bd30      	pop	{r4, r5, pc}

000279b0 <smp_reset>:
{
   279b0:	b538      	push	{r3, r4, r5, lr}
   279b2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   279b4:	2500      	movs	r5, #0
   279b6:	1d03      	adds	r3, r0, #4
   279b8:	e8d3 2fef 	ldaex	r2, [r3]
   279bc:	e8c3 5fe1 	stlex	r1, r5, [r3]
   279c0:	2900      	cmp	r1, #0
   279c2:	d1f9      	bne.n	279b8 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   279c4:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   279c8:	f7f9 f860 	bl	20a8c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   279cc:	7225      	strb	r5, [r4, #8]
   279ce:	e8d4 3fef 	ldaex	r3, [r4]
   279d2:	e8c4 5fe2 	stlex	r2, r5, [r4]
   279d6:	2a00      	cmp	r2, #0
   279d8:	d1f9      	bne.n	279ce <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   279da:	4620      	mov	r0, r4
}
   279dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   279e0:	2101      	movs	r1, #1
   279e2:	f7ff bf3c 	b.w	2785e <atomic_set_bit>

000279e6 <smp_c1>:
{
   279e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   279e8:	b089      	sub	sp, #36	; 0x24
   279ea:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   279ee:	4605      	mov	r5, r0
	p1[0] = ia->type;
   279f0:	7830      	ldrb	r0, [r6, #0]
{
   279f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   279f4:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   279f8:	7838      	ldrb	r0, [r7, #0]
   279fa:	f101 0c10 	add.w	ip, r1, #16
   279fe:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   27a02:	6810      	ldr	r0, [r2, #0]
   27a04:	f8cd 0002 	str.w	r0, [sp, #2]
   27a08:	8890      	ldrh	r0, [r2, #4]
   27a0a:	7992      	ldrb	r2, [r2, #6]
   27a0c:	f8ad 0006 	strh.w	r0, [sp, #6]
   27a10:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   27a14:	681a      	ldr	r2, [r3, #0]
   27a16:	4668      	mov	r0, sp
   27a18:	f8cd 2009 	str.w	r2, [sp, #9]
   27a1c:	889a      	ldrh	r2, [r3, #4]
   27a1e:	799b      	ldrb	r3, [r3, #6]
   27a20:	f8ad 200d 	strh.w	r2, [sp, #13]
   27a24:	4622      	mov	r2, r4
   27a26:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   27a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
   27a2e:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   27a32:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   27a34:	ea83 030e 	eor.w	r3, r3, lr
   27a38:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   27a3c:	d1f5      	bne.n	27a2a <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   27a3e:	4622      	mov	r2, r4
   27a40:	4621      	mov	r1, r4
   27a42:	4628      	mov	r0, r5
   27a44:	f7fe fe5a 	bl	266fc <bt_encrypt_le>
	if (err) {
   27a48:	4603      	mov	r3, r0
   27a4a:	bb28      	cbnz	r0, 27a98 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   27a4c:	9307      	str	r3, [sp, #28]
   27a4e:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   27a50:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   27a54:	f8d7 0001 	ldr.w	r0, [r7, #1]
   27a58:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   27a5c:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   27a60:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   27a62:	f8cd 2016 	str.w	r2, [sp, #22]
   27a66:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   27a6a:	f104 0010 	add.w	r0, r4, #16
   27a6e:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   27a72:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   27a74:	f813 2b01 	ldrb.w	r2, [r3], #1
   27a78:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   27a7c:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   27a7e:	ea82 0206 	eor.w	r2, r2, r6
   27a82:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   27a86:	d1f5      	bne.n	27a74 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   27a88:	4622      	mov	r2, r4
   27a8a:	4621      	mov	r1, r4
   27a8c:	4628      	mov	r0, r5
}
   27a8e:	b009      	add	sp, #36	; 0x24
   27a90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   27a94:	f7fe be32 	b.w	266fc <bt_encrypt_le>
}
   27a98:	b009      	add	sp, #36	; 0x24
   27a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027a9c <legacy_pairing_confirm>:
{
   27a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   27a9e:	1d07      	adds	r7, r0, #4
{
   27aa0:	4604      	mov	r4, r0
   27aa2:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   27aa4:	210a      	movs	r1, #10
   27aa6:	4638      	mov	r0, r7
   27aa8:	f7ff fe72 	bl	27790 <atomic_test_bit>
   27aac:	bb88      	cbnz	r0, 27b12 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   27aae:	2104      	movs	r1, #4
   27ab0:	4620      	mov	r0, r4
   27ab2:	f7ff fed4 	bl	2785e <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   27ab6:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   27ab8:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   27abc:	f7ff fedf 	bl	2787e <smp_create_pdu.constprop.0>
	if (!buf) {
   27ac0:	4605      	mov	r5, r0
   27ac2:	b1c0      	cbz	r0, 27af6 <legacy_pairing_confirm+0x5a>
   27ac4:	2110      	movs	r1, #16
   27ac6:	300c      	adds	r0, #12
   27ac8:	f7f1 fdfe 	bl	196c8 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   27acc:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   27ad0:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   27ad2:	9002      	str	r0, [sp, #8]
   27ad4:	9301      	str	r3, [sp, #4]
   27ad6:	9600      	str	r6, [sp, #0]
   27ad8:	f104 0310 	add.w	r3, r4, #16
   27adc:	f104 0209 	add.w	r2, r4, #9
   27ae0:	f104 0127 	add.w	r1, r4, #39	; 0x27
   27ae4:	f104 0047 	add.w	r0, r4, #71	; 0x47
   27ae8:	f7ff ff7d 	bl	279e6 <smp_c1>
   27aec:	4606      	mov	r6, r0
   27aee:	b128      	cbz	r0, 27afc <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   27af0:	4628      	mov	r0, r5
   27af2:	f7f1 fcc7 	bl	19484 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   27af6:	2008      	movs	r0, #8
}
   27af8:	b005      	add	sp, #20
   27afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   27afc:	4602      	mov	r2, r0
   27afe:	4629      	mov	r1, r5
   27b00:	4620      	mov	r0, r4
   27b02:	f7ff fe80 	bl	27806 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   27b06:	4631      	mov	r1, r6
   27b08:	4638      	mov	r0, r7
   27b0a:	f7ff fe68 	bl	277de <atomic_clear_bit>
	return 0;
   27b0e:	2000      	movs	r0, #0
   27b10:	e7f2      	b.n	27af8 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   27b12:	2100      	movs	r1, #0
   27b14:	4638      	mov	r0, r7
   27b16:	f7ff fea2 	bl	2785e <atomic_set_bit>
	return 0;
   27b1a:	e7f8      	b.n	27b0e <legacy_pairing_confirm+0x72>

00027b1c <bt_smp_request_ltk>:
{
   27b1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27b20:	9f09      	ldr	r7, [sp, #36]	; 0x24
   27b22:	4604      	mov	r4, r0
   27b24:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   27b28:	f7ef fc2e 	bl	17388 <smp_chan_get>
	if (!smp) {
   27b2c:	4605      	mov	r5, r0
   27b2e:	2800      	cmp	r0, #0
   27b30:	d07c      	beq.n	27c2c <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   27b32:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   27b36:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   27b38:	f1b8 0f00 	cmp.w	r8, #0
   27b3c:	d128      	bne.n	27b90 <bt_smp_request_ltk+0x74>
   27b3e:	e9dd 3200 	ldrd	r3, r2, [sp]
   27b42:	4313      	orrs	r3, r2
   27b44:	d124      	bne.n	27b90 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   27b46:	2103      	movs	r1, #3
   27b48:	4630      	mov	r0, r6
   27b4a:	f7ff fe21 	bl	27790 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   27b4e:	b1f8      	cbz	r0, 27b90 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   27b50:	2101      	movs	r1, #1
   27b52:	4630      	mov	r0, r6
   27b54:	f7ff fe1c 	bl	27790 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   27b58:	b1d0      	cbz	r0, 27b90 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   27b5a:	7d2c      	ldrb	r4, [r5, #20]
   27b5c:	7b6b      	ldrb	r3, [r5, #13]
   27b5e:	f105 0147 	add.w	r1, r5, #71	; 0x47
   27b62:	429c      	cmp	r4, r3
   27b64:	bf28      	it	cs
   27b66:	461c      	movcs	r4, r3
   27b68:	4622      	mov	r2, r4
   27b6a:	4638      	mov	r0, r7
   27b6c:	f001 ff19 	bl	299a2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   27b70:	2c0f      	cmp	r4, #15
   27b72:	d805      	bhi.n	27b80 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   27b74:	4641      	mov	r1, r8
   27b76:	f1c4 0210 	rsb	r2, r4, #16
   27b7a:	1938      	adds	r0, r7, r4
   27b7c:	f001 ff4b 	bl	29a16 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   27b80:	4630      	mov	r0, r6
   27b82:	2101      	movs	r1, #1
   27b84:	f7ff fe6b 	bl	2785e <atomic_set_bit>
		return true;
   27b88:	2001      	movs	r0, #1
}
   27b8a:	b002      	add	sp, #8
   27b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   27b90:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   27b94:	b983      	cbnz	r3, 27bb8 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   27b96:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   27b9a:	4642      	mov	r2, r8
   27b9c:	2020      	movs	r0, #32
   27b9e:	7a21      	ldrb	r1, [r4, #8]
   27ba0:	f7f1 f85e 	bl	18c60 <bt_keys_find>
   27ba4:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   27ba8:	b930      	cbnz	r0, 27bb8 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   27baa:	4642      	mov	r2, r8
   27bac:	2001      	movs	r0, #1
   27bae:	7a21      	ldrb	r1, [r4, #8]
   27bb0:	f7f1 f856 	bl	18c60 <bt_keys_find>
   27bb4:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   27bb8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   27bbc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   27bc0:	f1b8 0f00 	cmp.w	r8, #0
   27bc4:	d10c      	bne.n	27be0 <bt_smp_request_ltk+0xc4>
   27bc6:	e9dd 3200 	ldrd	r3, r2, [sp]
   27bca:	4313      	orrs	r3, r2
   27bcc:	d108      	bne.n	27be0 <bt_smp_request_ltk+0xc4>
   27bce:	b300      	cbz	r0, 27c12 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   27bd0:	89c3      	ldrh	r3, [r0, #14]
   27bd2:	069a      	lsls	r2, r3, #26
   27bd4:	d505      	bpl.n	27be2 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   27bd6:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27bd8:	f100 011a 	add.w	r1, r0, #26
   27bdc:	4622      	mov	r2, r4
   27bde:	e7c4      	b.n	27b6a <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   27be0:	b1b8      	cbz	r0, 27c12 <bt_smp_request_ltk+0xf6>
   27be2:	89c3      	ldrh	r3, [r0, #14]
   27be4:	07db      	lsls	r3, r3, #31
   27be6:	d514      	bpl.n	27c12 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   27be8:	2208      	movs	r2, #8
   27bea:	4669      	mov	r1, sp
   27bec:	3040      	adds	r0, #64	; 0x40
   27bee:	f001 fec8 	bl	29982 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   27bf2:	b970      	cbnz	r0, 27c12 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   27bf4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   27bf8:	2202      	movs	r2, #2
   27bfa:	a908      	add	r1, sp, #32
   27bfc:	3048      	adds	r0, #72	; 0x48
   27bfe:	f001 fec0 	bl	29982 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   27c02:	4680      	mov	r8, r0
   27c04:	b928      	cbnz	r0, 27c12 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   27c06:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   27c0a:	7b0c      	ldrb	r4, [r1, #12]
   27c0c:	314a      	adds	r1, #74	; 0x4a
   27c0e:	4622      	mov	r2, r4
   27c10:	e7ab      	b.n	27b6a <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27c12:	210f      	movs	r1, #15
   27c14:	4630      	mov	r0, r6
   27c16:	f7ff fdbb 	bl	27790 <atomic_test_bit>
   27c1a:	b120      	cbz	r0, 27c26 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   27c1c:	2202      	movs	r2, #2
   27c1e:	2106      	movs	r1, #6
   27c20:	4620      	mov	r0, r4
   27c22:	f7ec fd85 	bl	14730 <bt_conn_security_changed>
	smp_reset(smp);
   27c26:	4628      	mov	r0, r5
   27c28:	f7ff fec2 	bl	279b0 <smp_reset>
		return false;
   27c2c:	2000      	movs	r0, #0
   27c2e:	e7ac      	b.n	27b8a <bt_smp_request_ltk+0x6e>

00027c30 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   27c30:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27c34:	4770      	bx	lr

00027c36 <bt_smp_dhkey_ready>:
{
   27c36:	b570      	push	{r4, r5, r6, lr}
   27c38:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   27c3a:	2008      	movs	r0, #8
   27c3c:	f7ef fb18 	bl	17270 <smp_find>
	if (smp) {
   27c40:	4605      	mov	r5, r0
   27c42:	b1e0      	cbz	r0, 27c7e <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   27c44:	1d06      	adds	r6, r0, #4
   27c46:	2108      	movs	r1, #8
   27c48:	4630      	mov	r0, r6
   27c4a:	f7ff fdc8 	bl	277de <atomic_clear_bit>
	if (!dhkey) {
   27c4e:	b3bc      	cbz	r4, 27cc0 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   27c50:	2107      	movs	r1, #7
   27c52:	f7ff fdc4 	bl	277de <atomic_clear_bit>
   27c56:	4623      	mov	r3, r4
   27c58:	f105 0297 	add.w	r2, r5, #151	; 0x97
   27c5c:	f104 0120 	add.w	r1, r4, #32
   27c60:	f853 0b04 	ldr.w	r0, [r3], #4
   27c64:	428b      	cmp	r3, r1
   27c66:	f842 0b04 	str.w	r0, [r2], #4
   27c6a:	d1f9      	bne.n	27c60 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   27c6c:	210a      	movs	r1, #10
   27c6e:	4630      	mov	r0, r6
   27c70:	f7ff fd8e 	bl	27790 <atomic_test_bit>
   27c74:	b170      	cbz	r0, 27c94 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27c76:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27c78:	4630      	mov	r0, r6
   27c7a:	f7ff fdf0 	bl	2785e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   27c7e:	2007      	movs	r0, #7
   27c80:	f7ef faf6 	bl	17270 <smp_find>
		if (smp) {
   27c84:	4604      	mov	r4, r0
   27c86:	b1e8      	cbz	r0, 27cc4 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   27c88:	f7ef fbb4 	bl	173f4 <smp_dhkey_generate>
			if (err) {
   27c8c:	4601      	mov	r1, r0
   27c8e:	b1c8      	cbz	r0, 27cc4 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   27c90:	4620      	mov	r0, r4
   27c92:	e012      	b.n	27cba <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   27c94:	2110      	movs	r1, #16
   27c96:	4630      	mov	r0, r6
   27c98:	f7ff fd7a 	bl	27790 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27c9c:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   27c9e:	2800      	cmp	r0, #0
   27ca0:	d1ea      	bne.n	27c78 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   27ca2:	4630      	mov	r0, r6
   27ca4:	f7ff fd74 	bl	27790 <atomic_test_bit>
   27ca8:	2800      	cmp	r0, #0
   27caa:	d0e8      	beq.n	27c7e <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   27cac:	4628      	mov	r0, r5
   27cae:	f7ef ff59 	bl	17b64 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   27cb2:	4601      	mov	r1, r0
   27cb4:	2800      	cmp	r0, #0
   27cb6:	d0e2      	beq.n	27c7e <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   27cb8:	4628      	mov	r0, r5
   27cba:	f7f0 fae7 	bl	1828c <smp_error>
   27cbe:	e7de      	b.n	27c7e <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   27cc0:	210b      	movs	r1, #11
   27cc2:	e7f9      	b.n	27cb8 <bt_smp_dhkey_ready+0x82>
}
   27cc4:	bd70      	pop	{r4, r5, r6, pc}

00027cc6 <bt_smp_disconnected>:
{
   27cc6:	b570      	push	{r4, r5, r6, lr}
   27cc8:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   27cca:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   27cce:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27cd2:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   27cd4:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   27cd8:	f7f8 fed8 	bl	20a8c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27cdc:	2103      	movs	r1, #3
   27cde:	4620      	mov	r0, r4
   27ce0:	f7ff fd56 	bl	27790 <atomic_test_bit>
   27ce4:	b1a0      	cbz	r0, 27d10 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   27ce6:	2108      	movs	r1, #8
   27ce8:	4630      	mov	r0, r6
   27cea:	f7f0 fa51 	bl	18190 <smp_pairing_complete>
	if (keys) {
   27cee:	b13d      	cbz	r5, 27d00 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   27cf0:	89eb      	ldrh	r3, [r5, #14]
   27cf2:	b113      	cbz	r3, 27cfa <bt_smp_disconnected+0x34>
   27cf4:	7b6b      	ldrb	r3, [r5, #13]
   27cf6:	079b      	lsls	r3, r3, #30
   27cf8:	d502      	bpl.n	27d00 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   27cfa:	4628      	mov	r0, r5
   27cfc:	f7f1 f896 	bl	18e2c <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   27d00:	4630      	mov	r0, r6
}
   27d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27d06:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   27d0a:	2100      	movs	r1, #0
   27d0c:	f001 be83 	b.w	29a16 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   27d10:	2101      	movs	r1, #1
   27d12:	4620      	mov	r0, r4
   27d14:	f7ff fd3c 	bl	27790 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27d18:	2800      	cmp	r0, #0
   27d1a:	d1e4      	bne.n	27ce6 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27d1c:	210f      	movs	r1, #15
   27d1e:	4620      	mov	r0, r4
   27d20:	f7ff fd36 	bl	27790 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   27d24:	2800      	cmp	r0, #0
   27d26:	d1de      	bne.n	27ce6 <bt_smp_disconnected+0x20>
   27d28:	e7e1      	b.n	27cee <bt_smp_disconnected+0x28>

00027d2a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   27d2a:	b510      	push	{r4, lr}
   27d2c:	1e43      	subs	r3, r0, #1
   27d2e:	f100 0210 	add.w	r2, r0, #16
   27d32:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   27d34:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27d38:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   27d3c:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27d3e:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   27d40:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   27d42:	d1f7      	bne.n	27d34 <sys_mem_swap.constprop.0+0xa>
	}
}
   27d44:	bd10      	pop	{r4, pc}

00027d46 <bt_crypto_aes_cmac>:
{
   27d46:	b570      	push	{r4, r5, r6, lr}
   27d48:	b0c2      	sub	sp, #264	; 0x108
   27d4a:	460d      	mov	r5, r1
   27d4c:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   27d4e:	4601      	mov	r1, r0
   27d50:	aa16      	add	r2, sp, #88	; 0x58
   27d52:	4668      	mov	r0, sp
{
   27d54:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   27d56:	f7fd fe01 	bl	2595c <tc_cmac_setup>
   27d5a:	b918      	cbnz	r0, 27d64 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   27d5c:	f06f 0004 	mvn.w	r0, #4
}
   27d60:	b042      	add	sp, #264	; 0x108
   27d62:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   27d64:	4632      	mov	r2, r6
   27d66:	4629      	mov	r1, r5
   27d68:	4668      	mov	r0, sp
   27d6a:	f7fd fe22 	bl	259b2 <tc_cmac_update>
   27d6e:	2800      	cmp	r0, #0
   27d70:	d0f4      	beq.n	27d5c <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   27d72:	4669      	mov	r1, sp
   27d74:	4620      	mov	r0, r4
   27d76:	f7fd fe86 	bl	25a86 <tc_cmac_final>
   27d7a:	2800      	cmp	r0, #0
   27d7c:	d0ee      	beq.n	27d5c <bt_crypto_aes_cmac+0x16>
	return 0;
   27d7e:	2000      	movs	r0, #0
   27d80:	e7ee      	b.n	27d60 <bt_crypto_aes_cmac+0x1a>

00027d82 <bt_crypto_f4>:
{
   27d82:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d84:	460e      	mov	r6, r1
   27d86:	4614      	mov	r4, r2
   27d88:	461d      	mov	r5, r3
   27d8a:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   27d8c:	4601      	mov	r1, r0
   27d8e:	2220      	movs	r2, #32
   27d90:	a805      	add	r0, sp, #20
{
   27d92:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   27d94:	f7f1 f86c 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   27d98:	2220      	movs	r2, #32
   27d9a:	4631      	mov	r1, r6
   27d9c:	a80d      	add	r0, sp, #52	; 0x34
   27d9e:	f7f1 f867 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   27da2:	4621      	mov	r1, r4
   27da4:	2210      	movs	r2, #16
   27da6:	a801      	add	r0, sp, #4
	m[64] = z;
   27da8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   27dac:	f7f1 f860 	bl	18e70 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   27db0:	463b      	mov	r3, r7
   27db2:	2241      	movs	r2, #65	; 0x41
   27db4:	a905      	add	r1, sp, #20
   27db6:	a801      	add	r0, sp, #4
   27db8:	f7ff ffc5 	bl	27d46 <bt_crypto_aes_cmac>
	if (err) {
   27dbc:	4604      	mov	r4, r0
   27dbe:	b910      	cbnz	r0, 27dc6 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   27dc0:	4638      	mov	r0, r7
   27dc2:	f7ff ffb2 	bl	27d2a <sys_mem_swap.constprop.0>
}
   27dc6:	4620      	mov	r0, r4
   27dc8:	b017      	add	sp, #92	; 0x5c
   27dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027dcc <bt_crypto_f6>:
{
   27dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27dd0:	4616      	mov	r6, r2
   27dd2:	461d      	mov	r5, r3
   27dd4:	b097      	sub	sp, #92	; 0x5c
   27dd6:	4604      	mov	r4, r0
   27dd8:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   27ddc:	2210      	movs	r2, #16
   27dde:	a805      	add	r0, sp, #20
{
   27de0:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   27de2:	f7f1 f845 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   27de6:	2210      	movs	r2, #16
   27de8:	4631      	mov	r1, r6
   27dea:	a809      	add	r0, sp, #36	; 0x24
   27dec:	f7f1 f840 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   27df0:	2210      	movs	r2, #16
   27df2:	4629      	mov	r1, r5
   27df4:	a80d      	add	r0, sp, #52	; 0x34
   27df6:	f7f1 f83b 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   27dfa:	2203      	movs	r2, #3
   27dfc:	991e      	ldr	r1, [sp, #120]	; 0x78
   27dfe:	a811      	add	r0, sp, #68	; 0x44
   27e00:	f7f1 f836 	bl	18e70 <sys_memcpy_swap>
	m[51] = a1->type;
   27e04:	4649      	mov	r1, r9
   27e06:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   27e0a:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   27e0e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   27e12:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   27e14:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   27e16:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   27e18:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   27e1a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   27e1e:	f7f1 f827 	bl	18e70 <sys_memcpy_swap>
	m[58] = a2->type;
   27e22:	4641      	mov	r1, r8
   27e24:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27e28:	2206      	movs	r2, #6
	m[58] = a2->type;
   27e2a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   27e2e:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27e32:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   27e36:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   27e3a:	888b      	ldrh	r3, [r1, #4]
   27e3c:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27e40:	f7f1 f816 	bl	18e70 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   27e44:	4621      	mov	r1, r4
   27e46:	2210      	movs	r2, #16
   27e48:	a801      	add	r0, sp, #4
   27e4a:	f7f1 f811 	bl	18e70 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   27e4e:	463b      	mov	r3, r7
   27e50:	2241      	movs	r2, #65	; 0x41
   27e52:	a905      	add	r1, sp, #20
   27e54:	a801      	add	r0, sp, #4
   27e56:	f7ff ff76 	bl	27d46 <bt_crypto_aes_cmac>
	if (err) {
   27e5a:	4604      	mov	r4, r0
   27e5c:	b910      	cbnz	r0, 27e64 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   27e5e:	4638      	mov	r0, r7
   27e60:	f7ff ff63 	bl	27d2a <sys_mem_swap.constprop.0>
}
   27e64:	4620      	mov	r0, r4
   27e66:	b017      	add	sp, #92	; 0x5c
   27e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00027e6c <fixed_data_unref>:
}
   27e6c:	4770      	bx	lr

00027e6e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   27e6e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   27e70:	6849      	ldr	r1, [r1, #4]
   27e72:	6809      	ldr	r1, [r1, #0]
   27e74:	f7f1 b8fe 	b.w	19074 <net_buf_alloc_len>

00027e78 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   27e78:	f7f7 bff8 	b.w	1fe6c <z_impl_k_queue_get>

00027e7c <net_buf_simple_push_u8>:
{
   27e7c:	b510      	push	{r4, lr}
   27e7e:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   27e80:	2101      	movs	r1, #1
   27e82:	f7f1 fbc5 	bl	19610 <net_buf_simple_push>
	*data = val;
   27e86:	7004      	strb	r4, [r0, #0]
}
   27e88:	bd10      	pop	{r4, pc}

00027e8a <net_buf_simple_pull_le16>:
{
   27e8a:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   27e8c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27e8e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   27e90:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27e92:	f7f1 fbdd 	bl	19650 <net_buf_simple_pull>
}
   27e96:	4620      	mov	r0, r4
   27e98:	bd10      	pop	{r4, pc}

00027e9a <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   27e9a:	6802      	ldr	r2, [r0, #0]
   27e9c:	6880      	ldr	r0, [r0, #8]
}
   27e9e:	1a10      	subs	r0, r2, r0
   27ea0:	4770      	bx	lr

00027ea2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27ea2:	8883      	ldrh	r3, [r0, #4]
   27ea4:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   27ea6:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27ea8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   27eaa:	6803      	ldr	r3, [r0, #0]
   27eac:	1a5b      	subs	r3, r3, r1
}
   27eae:	1ad0      	subs	r0, r2, r3
   27eb0:	4770      	bx	lr

00027eb2 <net_buf_simple_add_mem>:
{
   27eb2:	b538      	push	{r3, r4, r5, lr}
   27eb4:	460d      	mov	r5, r1
   27eb6:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27eb8:	4611      	mov	r1, r2
   27eba:	f7f1 fc05 	bl	196c8 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27ebe:	4622      	mov	r2, r4
   27ec0:	4629      	mov	r1, r5
}
   27ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27ec6:	f001 bd6c 	b.w	299a2 <memcpy>

00027eca <net_buf_simple_add_u8>:
{
   27eca:	b510      	push	{r4, lr}
   27ecc:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   27ece:	2101      	movs	r1, #1
   27ed0:	f7f1 fbfa 	bl	196c8 <net_buf_simple_add>
	*u8 = val;
   27ed4:	7004      	strb	r4, [r0, #0]
}
   27ed6:	bd10      	pop	{r4, pc}

00027ed8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27ed8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27eda:	ab0b      	add	r3, sp, #44	; 0x2c
   27edc:	9305      	str	r3, [sp, #20]
   27ede:	9303      	str	r3, [sp, #12]
   27ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27ee2:	2201      	movs	r2, #1
   27ee4:	9302      	str	r3, [sp, #8]
   27ee6:	2300      	movs	r3, #0
   27ee8:	4618      	mov	r0, r3
   27eea:	e9cd 3300 	strd	r3, r3, [sp]
   27eee:	f7e6 fac1 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   27ef2:	b007      	add	sp, #28
   27ef4:	f85d fb04 	ldr.w	pc, [sp], #4

00027ef8 <adc_context_on_timer_expired>:
{
   27ef8:	b410      	push	{r4}
   27efa:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   27efc:	3808      	subs	r0, #8
   27efe:	e8d0 2fef 	ldaex	r2, [r0]
   27f02:	1c51      	adds	r1, r2, #1
   27f04:	e8c0 1fe4 	stlex	r4, r1, [r0]
   27f08:	2c00      	cmp	r4, #0
   27f0a:	d1f8      	bne.n	27efe <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   27f0c:	b912      	cbnz	r2, 27f14 <adc_context_on_timer_expired+0x1c>
}
   27f0e:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   27f10:	f7f1 bc1c 	b.w	1974c <adc_context_start_sampling>
		ctx->status = -EBUSY;
   27f14:	f06f 020f 	mvn.w	r2, #15
}
   27f18:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   27f1a:	669a      	str	r2, [r3, #104]	; 0x68
}
   27f1c:	4770      	bx	lr

00027f1e <set_on_state>:
	__asm__ volatile(
   27f1e:	f04f 0320 	mov.w	r3, #32
   27f22:	f3ef 8211 	mrs	r2, BASEPRI
   27f26:	f383 8812 	msr	BASEPRI_MAX, r3
   27f2a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   27f2e:	6803      	ldr	r3, [r0, #0]
   27f30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   27f34:	f043 0302 	orr.w	r3, r3, #2
   27f38:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   27f3a:	f382 8811 	msr	BASEPRI, r2
   27f3e:	f3bf 8f6f 	isb	sy
}
   27f42:	4770      	bx	lr

00027f44 <async_start>:
{
   27f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f46:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   27f48:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   27f4a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   27f4c:	f04f 0520 	mov.w	r5, #32
   27f50:	f3ef 8611 	mrs	r6, BASEPRI
   27f54:	f385 8812 	msr	BASEPRI_MAX, r5
   27f58:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   27f5c:	250c      	movs	r5, #12
   27f5e:	4369      	muls	r1, r5
   27f60:	440c      	add	r4, r1
   27f62:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   27f66:	f005 0c07 	and.w	ip, r5, #7
   27f6a:	f1bc 0f01 	cmp.w	ip, #1
   27f6e:	d10c      	bne.n	27f8a <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   27f70:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   27f74:	f386 8811 	msr	BASEPRI, r6
   27f78:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   27f7c:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   27f80:	6843      	ldr	r3, [r0, #4]
   27f82:	585b      	ldr	r3, [r3, r1]
   27f84:	4798      	blx	r3
	return 0;
   27f86:	2000      	movs	r0, #0
}
   27f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   27f8a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   27f8e:	42af      	cmp	r7, r5
   27f90:	f386 8811 	msr	BASEPRI, r6
   27f94:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   27f98:	bf0c      	ite	eq
   27f9a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   27f9e:	f04f 30ff 	movne.w	r0, #4294967295
   27fa2:	e7f1      	b.n	27f88 <async_start+0x44>

00027fa4 <api_start>:
{
   27fa4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   27fa6:	2480      	movs	r4, #128	; 0x80
   27fa8:	9400      	str	r4, [sp, #0]
   27faa:	f7ff ffcb 	bl	27f44 <async_start>
}
   27fae:	b002      	add	sp, #8
   27fb0:	bd10      	pop	{r4, pc}

00027fb2 <onoff_started_callback>:
	return &data->mgr[type];
   27fb2:	6900      	ldr	r0, [r0, #16]
   27fb4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   27fb6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   27fba:	2100      	movs	r1, #0
   27fbc:	4710      	bx	r2

00027fbe <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   27fbe:	2003      	movs	r0, #3
   27fc0:	f7f4 be44 	b.w	1cc4c <nrfx_clock_start>

00027fc4 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   27fc4:	2002      	movs	r0, #2
   27fc6:	f7f4 be41 	b.w	1cc4c <nrfx_clock_start>

00027fca <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   27fca:	2000      	movs	r0, #0
   27fcc:	f7f4 be3e 	b.w	1cc4c <nrfx_clock_start>

00027fd0 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   27fd0:	2003      	movs	r0, #3
   27fd2:	f7f4 beb9 	b.w	1cd48 <nrfx_clock_stop>

00027fd6 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   27fd6:	2002      	movs	r0, #2
   27fd8:	f7f4 beb6 	b.w	1cd48 <nrfx_clock_stop>

00027fdc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   27fdc:	2000      	movs	r0, #0
   27fde:	f7f4 beb3 	b.w	1cd48 <nrfx_clock_stop>

00027fe2 <blocking_start_callback>:
{
   27fe2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   27fe4:	f7f7 bfac 	b.w	1ff40 <z_impl_k_sem_give>

00027fe8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   27fe8:	2280      	movs	r2, #128	; 0x80
   27fea:	f7f1 be01 	b.w	19bf0 <stop>

00027fee <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27fee:	6843      	ldr	r3, [r0, #4]
}
   27ff0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ff2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   27ff4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   27ff6:	600b      	str	r3, [r1, #0]
}
   27ff8:	4770      	bx	lr

00027ffa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ffa:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   27ffc:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28000:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   28002:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   28006:	6098      	str	r0, [r3, #8]
}
   28008:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2800a:	60d9      	str	r1, [r3, #12]
   2800c:	4770      	bx	lr

0002800e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2800e:	6843      	ldr	r3, [r0, #4]
}
   28010:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28012:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   28014:	6099      	str	r1, [r3, #8]
}
   28016:	4770      	bx	lr

00028018 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28018:	6843      	ldr	r3, [r0, #4]
}
   2801a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2801c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2801e:	60d9      	str	r1, [r3, #12]
}
   28020:	4770      	bx	lr

00028022 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28022:	6843      	ldr	r3, [r0, #4]
   28024:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   28026:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   28028:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2802c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2802e:	6090      	str	r0, [r2, #8]
}
   28030:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   28032:	60d3      	str	r3, [r2, #12]
   28034:	4770      	bx	lr

00028036 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   28036:	2200      	movs	r2, #0
   28038:	2101      	movs	r1, #1
   2803a:	200a      	movs	r0, #10
   2803c:	f7e8 b928 	b.w	10290 <z_arm_irq_priority_set>

00028040 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   28040:	b510      	push	{r4, lr}
	while (*count) {
   28042:	680b      	ldr	r3, [r1, #0]
   28044:	b913      	cbnz	r3, 2804c <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   28046:	4618      	mov	r0, r3
	*buf_len = 0;
   28048:	6013      	str	r3, [r2, #0]
	return NULL;
   2804a:	e005      	b.n	28058 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2804c:	6803      	ldr	r3, [r0, #0]
   2804e:	685c      	ldr	r4, [r3, #4]
   28050:	b11c      	cbz	r4, 2805a <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   28052:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   28054:	6803      	ldr	r3, [r0, #0]
   28056:	6818      	ldr	r0, [r3, #0]
}
   28058:	bd10      	pop	{r4, pc}
		++(*current);
   2805a:	3308      	adds	r3, #8
   2805c:	6003      	str	r3, [r0, #0]
		--(*count);
   2805e:	680b      	ldr	r3, [r1, #0]
   28060:	3b01      	subs	r3, #1
   28062:	600b      	str	r3, [r1, #0]
   28064:	e7ed      	b.n	28042 <spi_context_get_next_buf.constprop.0+0x2>

00028066 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28066:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28068:	ab0b      	add	r3, sp, #44	; 0x2c
   2806a:	9305      	str	r3, [sp, #20]
   2806c:	9303      	str	r3, [sp, #12]
   2806e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28070:	2201      	movs	r2, #1
   28072:	9302      	str	r3, [sp, #8]
   28074:	2300      	movs	r3, #0
   28076:	4618      	mov	r0, r3
   28078:	e9cd 3300 	strd	r3, r3, [sp]
   2807c:	f7e6 f9fa 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   28080:	b007      	add	sp, #28
   28082:	f85d fb04 	ldr.w	pc, [sp], #4

00028086 <_spi_context_cs_control>:
{
   28086:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   28088:	6803      	ldr	r3, [r0, #0]
{
   2808a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2808c:	b1e3      	cbz	r3, 280c8 <_spi_context_cs_control+0x42>
   2808e:	6898      	ldr	r0, [r3, #8]
   28090:	b1d0      	cbz	r0, 280c8 <_spi_context_cs_control+0x42>
   28092:	6805      	ldr	r5, [r0, #0]
   28094:	b1c5      	cbz	r5, 280c8 <_spi_context_cs_control+0x42>
		if (on) {
   28096:	b149      	cbz	r1, 280ac <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   28098:	2101      	movs	r1, #1
   2809a:	f7f2 f993 	bl	1a3c4 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2809e:	6823      	ldr	r3, [r4, #0]
   280a0:	689b      	ldr	r3, [r3, #8]
   280a2:	6898      	ldr	r0, [r3, #8]
}
   280a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   280a8:	f001 bb72 	b.w	29790 <z_impl_k_busy_wait>
			if (!force_off &&
   280ac:	b912      	cbnz	r2, 280b4 <_spi_context_cs_control+0x2e>
   280ae:	889b      	ldrh	r3, [r3, #4]
   280b0:	04db      	lsls	r3, r3, #19
   280b2:	d409      	bmi.n	280c8 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   280b4:	6880      	ldr	r0, [r0, #8]
   280b6:	f001 fb6b 	bl	29790 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   280ba:	6823      	ldr	r3, [r4, #0]
   280bc:	2100      	movs	r1, #0
   280be:	6898      	ldr	r0, [r3, #8]
}
   280c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   280c4:	f7f2 b97e 	b.w	1a3c4 <gpio_pin_set_dt.isra.0>
}
   280c8:	bd38      	pop	{r3, r4, r5, pc}

000280ca <spi_context_unlock_unconditionally>:
{
   280ca:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   280cc:	2201      	movs	r2, #1
   280ce:	2100      	movs	r1, #0
{
   280d0:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   280d2:	f7ff ffd8 	bl	28086 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   280d6:	69a3      	ldr	r3, [r4, #24]
   280d8:	b933      	cbnz	r3, 280e8 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   280da:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   280dc:	f104 0010 	add.w	r0, r4, #16
}
   280e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   280e4:	f7f7 bf2c 	b.w	1ff40 <z_impl_k_sem_give>
   280e8:	bd10      	pop	{r4, pc}

000280ea <spi_nrfx_release>:
{
   280ea:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   280ec:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   280ee:	6803      	ldr	r3, [r0, #0]
   280f0:	428b      	cmp	r3, r1
   280f2:	d106      	bne.n	28102 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   280f4:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   280f8:	b934      	cbnz	r4, 28108 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   280fa:	f7ff ffe6 	bl	280ca <spi_context_unlock_unconditionally>
	return 0;
   280fe:	4620      	mov	r0, r4
}
   28100:	bd10      	pop	{r4, pc}
		return -EINVAL;
   28102:	f06f 0015 	mvn.w	r0, #21
   28106:	e7fb      	b.n	28100 <spi_nrfx_release+0x16>
		return -EBUSY;
   28108:	f06f 000f 	mvn.w	r0, #15
   2810c:	e7f8      	b.n	28100 <spi_nrfx_release+0x16>

0002810e <k_sem_give>:
   2810e:	f7f7 bf17 	b.w	1ff40 <z_impl_k_sem_give>

00028112 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   28112:	b918      	cbnz	r0, 2811c <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   28114:	f101 0030 	add.w	r0, r1, #48	; 0x30
   28118:	f7ff bff9 	b.w	2810e <k_sem_give>
}
   2811c:	4770      	bx	lr

0002811e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2811e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28120:	ab0b      	add	r3, sp, #44	; 0x2c
   28122:	9305      	str	r3, [sp, #20]
   28124:	9303      	str	r3, [sp, #12]
   28126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28128:	9302      	str	r3, [sp, #8]
   2812a:	2300      	movs	r3, #0
   2812c:	4618      	mov	r0, r3
   2812e:	e9cd 3300 	strd	r3, r3, [sp]
   28132:	f7e6 f99f 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   28136:	b007      	add	sp, #28
   28138:	f85d fb04 	ldr.w	pc, [sp], #4

0002813c <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2813c:	f04f 32ff 	mov.w	r2, #4294967295
   28140:	f04f 33ff 	mov.w	r3, #4294967295
   28144:	3018      	adds	r0, #24
   28146:	f7f7 bf3f 	b.w	1ffc8 <z_impl_k_sem_take>

0002814a <qspi_trans_lock.isra.0>:
   2814a:	f04f 32ff 	mov.w	r2, #4294967295
   2814e:	f04f 33ff 	mov.w	r3, #4294967295
   28152:	f7f7 bf39 	b.w	1ffc8 <z_impl_k_sem_take>

00028156 <qspi_nor_write_protection_set>:
{
   28156:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   28158:	2200      	movs	r2, #0
   2815a:	4291      	cmp	r1, r2
   2815c:	bf0c      	ite	eq
   2815e:	2306      	moveq	r3, #6
   28160:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   28162:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   28164:	e9cd 2201 	strd	r2, r2, [sp, #4]
   28168:	9203      	str	r2, [sp, #12]
   2816a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2816e:	f7f2 fc91 	bl	1aa94 <qspi_send_cmd>
		ret = -EIO;
   28172:	2800      	cmp	r0, #0
}
   28174:	bf18      	it	ne
   28176:	f06f 0004 	mvnne.w	r0, #4
   2817a:	b005      	add	sp, #20
   2817c:	f85d fb04 	ldr.w	pc, [sp], #4

00028180 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   28180:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   28182:	23ff      	movs	r3, #255	; 0xff
   28184:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   28188:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2818c:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2818e:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   28190:	2301      	movs	r3, #1
   28192:	e9cd 3202 	strd	r3, r2, [sp, #8]
   28196:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   28198:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2819a:	f88d 300c 	strb.w	r3, [sp, #12]
   2819e:	ab01      	add	r3, sp, #4
   281a0:	9204      	str	r2, [sp, #16]
   281a2:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   281a4:	f7f2 fc76 	bl	1aa94 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   281a8:	2800      	cmp	r0, #0
   281aa:	bfa8      	it	ge
   281ac:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   281b0:	b007      	add	sp, #28
   281b2:	f85d fb04 	ldr.w	pc, [sp], #4

000281b6 <is_regular_addr_valid>:
{
   281b6:	b538      	push	{r3, r4, r5, lr}
   281b8:	4605      	mov	r5, r0
   281ba:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   281bc:	f000 fc6a 	bl	28a94 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   281c0:	2d00      	cmp	r5, #0
   281c2:	db07      	blt.n	281d4 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   281c4:	42a8      	cmp	r0, r5
   281c6:	d905      	bls.n	281d4 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   281c8:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   281ca:	4284      	cmp	r4, r0
   281cc:	bf8c      	ite	hi
   281ce:	2000      	movhi	r0, #0
   281d0:	2001      	movls	r0, #1
}
   281d2:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   281d4:	2000      	movs	r0, #0
   281d6:	e7fc      	b.n	281d2 <is_regular_addr_valid+0x1c>

000281d8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   281d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   281da:	ab0b      	add	r3, sp, #44	; 0x2c
   281dc:	9305      	str	r3, [sp, #20]
   281de:	9303      	str	r3, [sp, #12]
   281e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   281e2:	2201      	movs	r2, #1
   281e4:	9302      	str	r3, [sp, #8]
   281e6:	2300      	movs	r3, #0
   281e8:	4618      	mov	r0, r3
   281ea:	e9cd 3300 	strd	r3, r3, [sp]
   281ee:	f7e6 f941 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   281f2:	b007      	add	sp, #28
   281f4:	f85d fb04 	ldr.w	pc, [sp], #4

000281f8 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   281f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   281fa:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   281fc:	2300      	movs	r3, #0
{
   281fe:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   28200:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   28202:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   28204:	60a3      	str	r3, [r4, #8]
{
   28206:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   28208:	6913      	ldr	r3, [r2, #16]
   2820a:	4669      	mov	r1, sp
   2820c:	aa01      	add	r2, sp, #4
   2820e:	4798      	blx	r3

	while (layout_size--) {
   28210:	9b01      	ldr	r3, [sp, #4]
   28212:	1e5a      	subs	r2, r3, #1
   28214:	9201      	str	r2, [sp, #4]
   28216:	b91b      	cbnz	r3, 28220 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   28218:	f06f 0015 	mvn.w	r0, #21
}
   2821c:	b003      	add	sp, #12
   2821e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   28220:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   28222:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   28224:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   28226:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   28228:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2822a:	b985      	cbnz	r5, 2824e <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2822c:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2822e:	f8d0 c000 	ldr.w	ip, [r0]
   28232:	4563      	cmp	r3, ip
   28234:	bf28      	it	cs
   28236:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   28238:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2823c:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2823e:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   28240:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   28242:	6802      	ldr	r2, [r0, #0]
   28244:	429a      	cmp	r2, r3
   28246:	d806      	bhi.n	28256 <flash_get_page_info+0x5e>
		layout++;
   28248:	3008      	adds	r0, #8
   2824a:	9000      	str	r0, [sp, #0]
   2824c:	e7e0      	b.n	28210 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2824e:	1a6b      	subs	r3, r5, r1
   28250:	fbb3 f3f7 	udiv	r3, r3, r7
   28254:	e7eb      	b.n	2822e <flash_get_page_info+0x36>
			return 0;
   28256:	2000      	movs	r0, #0
   28258:	e7e0      	b.n	2821c <flash_get_page_info+0x24>

0002825a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2825a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2825c:	2200      	movs	r2, #0
   2825e:	f7ff bfcb 	b.w	281f8 <flash_get_page_info>

00028262 <uarte_nrfx_config_get>:
{
   28262:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   28264:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   28266:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2826a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2826e:	2000      	movs	r0, #0
   28270:	4770      	bx	lr

00028272 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   28272:	6843      	ldr	r3, [r0, #4]
   28274:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   28276:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2827a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2827e:	4770      	bx	lr

00028280 <tx_start>:
{
   28280:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   28282:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   28284:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28286:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2828a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2828e:	2200      	movs	r2, #0
   28290:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   28294:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   28298:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2829c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   282a0:	6862      	ldr	r2, [r4, #4]
   282a2:	06d2      	lsls	r2, r2, #27
   282a4:	d511      	bpl.n	282ca <tx_start+0x4a>
	if (data->async) {
   282a6:	6902      	ldr	r2, [r0, #16]
   282a8:	68d2      	ldr	r2, [r2, #12]
   282aa:	b12a      	cbz	r2, 282b8 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   282ac:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   282b0:	f041 0101 	orr.w	r1, r1, #1
   282b4:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   282b8:	2108      	movs	r1, #8
	return config->uarte_regs;
   282ba:	6842      	ldr	r2, [r0, #4]
   282bc:	6812      	ldr	r2, [r2, #0]
   282be:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   282c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   282c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   282ca:	2201      	movs	r2, #1
   282cc:	609a      	str	r2, [r3, #8]
}
   282ce:	bd10      	pop	{r4, pc}

000282d0 <user_callback>:
	if (data->async->user_callback) {
   282d0:	6903      	ldr	r3, [r0, #16]
   282d2:	68da      	ldr	r2, [r3, #12]
   282d4:	6813      	ldr	r3, [r2, #0]
   282d6:	b10b      	cbz	r3, 282dc <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   282d8:	6852      	ldr	r2, [r2, #4]
   282da:	4718      	bx	r3
}
   282dc:	4770      	bx	lr

000282de <notify_uart_rx_rdy>:
{
   282de:	b570      	push	{r4, r5, r6, lr}
   282e0:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   282e2:	6906      	ldr	r6, [r0, #16]
{
   282e4:	4604      	mov	r4, r0
   282e6:	460d      	mov	r5, r1
	struct uart_event evt = {
   282e8:	2214      	movs	r2, #20
   282ea:	2100      	movs	r1, #0
   282ec:	a801      	add	r0, sp, #4
   282ee:	f001 fb92 	bl	29a16 <memset>
   282f2:	2302      	movs	r3, #2
   282f4:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   282f8:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   282fa:	4620      	mov	r0, r4
	struct uart_event evt = {
   282fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   282fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   28300:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   28302:	e9cd 3503 	strd	r3, r5, [sp, #12]
   28306:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   28308:	f7ff ffe2 	bl	282d0 <user_callback>
}
   2830c:	b006      	add	sp, #24
   2830e:	bd70      	pop	{r4, r5, r6, pc}

00028310 <rx_buf_release>:
{
   28310:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   28312:	680e      	ldr	r6, [r1, #0]
{
   28314:	4605      	mov	r5, r0
   28316:	460c      	mov	r4, r1
   28318:	b086      	sub	sp, #24
	if (*buf) {
   2831a:	b17e      	cbz	r6, 2833c <rx_buf_release+0x2c>
		struct uart_event evt = {
   2831c:	2214      	movs	r2, #20
   2831e:	2100      	movs	r1, #0
   28320:	a801      	add	r0, sp, #4
   28322:	f001 fb78 	bl	29a16 <memset>
   28326:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   28328:	4628      	mov	r0, r5
   2832a:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2832e:	f88d 3004 	strb.w	r3, [sp, #4]
   28332:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   28334:	f7ff ffcc 	bl	282d0 <user_callback>
		*buf = NULL;
   28338:	2300      	movs	r3, #0
   2833a:	6023      	str	r3, [r4, #0]
}
   2833c:	b006      	add	sp, #24
   2833e:	bd70      	pop	{r4, r5, r6, pc}

00028340 <notify_rx_disable>:
{
   28340:	b510      	push	{r4, lr}
   28342:	b086      	sub	sp, #24
   28344:	4604      	mov	r4, r0
	struct uart_event evt = {
   28346:	2214      	movs	r2, #20
   28348:	2100      	movs	r1, #0
   2834a:	a801      	add	r0, sp, #4
   2834c:	f001 fb63 	bl	29a16 <memset>
   28350:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   28352:	4620      	mov	r0, r4
   28354:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   28356:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2835a:	f7ff ffb9 	bl	282d0 <user_callback>
}
   2835e:	b006      	add	sp, #24
   28360:	bd10      	pop	{r4, pc}

00028362 <uarte_nrfx_rx_buf_rsp>:
{
   28362:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   28364:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   28366:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   28368:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2836a:	f04f 0020 	mov.w	r0, #32
   2836e:	f3ef 8611 	mrs	r6, BASEPRI
   28372:	f380 8812 	msr	BASEPRI_MAX, r0
   28376:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2837a:	68ec      	ldr	r4, [r5, #12]
   2837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2837e:	b198      	cbz	r0, 283a8 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   28380:	6e60      	ldr	r0, [r4, #100]	; 0x64
   28382:	b9a0      	cbnz	r0, 283ae <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   28384:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   28386:	68ec      	ldr	r4, [r5, #12]
   28388:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2838a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2838e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   28392:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   28396:	f042 0220 	orr.w	r2, r2, #32
   2839a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2839e:	f386 8811 	msr	BASEPRI, r6
   283a2:	f3bf 8f6f 	isb	sy
}
   283a6:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   283a8:	f06f 000c 	mvn.w	r0, #12
   283ac:	e7f7      	b.n	2839e <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   283ae:	f06f 000f 	mvn.w	r0, #15
   283b2:	e7f4      	b.n	2839e <uarte_nrfx_rx_buf_rsp+0x3c>

000283b4 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   283b4:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   283b6:	68d8      	ldr	r0, [r3, #12]
   283b8:	b120      	cbz	r0, 283c4 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   283ba:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   283bc:	68db      	ldr	r3, [r3, #12]
	return 0;
   283be:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   283c0:	605a      	str	r2, [r3, #4]
	return 0;
   283c2:	4770      	bx	lr
		return -ENOTSUP;
   283c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   283c8:	4770      	bx	lr

000283ca <uarte_nrfx_poll_in>:
{
   283ca:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   283cc:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   283ce:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   283d0:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   283d2:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   283d4:	b960      	cbnz	r0, 283f0 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   283d6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   283da:	b164      	cbz	r4, 283f6 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   283dc:	6992      	ldr	r2, [r2, #24]
   283de:	7812      	ldrb	r2, [r2, #0]
   283e0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   283e2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   283e6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   283ea:	2201      	movs	r2, #1
   283ec:	601a      	str	r2, [r3, #0]
}
   283ee:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   283f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   283f4:	e7fb      	b.n	283ee <uarte_nrfx_poll_in+0x24>
		return -1;
   283f6:	f04f 30ff 	mov.w	r0, #4294967295
   283fa:	e7f8      	b.n	283ee <uarte_nrfx_poll_in+0x24>

000283fc <uarte_nrfx_rx_disable>:
{
   283fc:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   283fe:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   28400:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   28402:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   28404:	68eb      	ldr	r3, [r5, #12]
   28406:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   28408:	b1ba      	cbz	r2, 2843a <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2840a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2840c:	b153      	cbz	r3, 28424 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2840e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   28412:	f023 0320 	bic.w	r3, r3, #32
   28416:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2841a:	2300      	movs	r3, #0
   2841c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   28420:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   28424:	68e8      	ldr	r0, [r5, #12]
   28426:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   28428:	f001 f9e4 	bl	297f4 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2842c:	2000      	movs	r0, #0
   2842e:	68eb      	ldr	r3, [r5, #12]
   28430:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28434:	2301      	movs	r3, #1
   28436:	6063      	str	r3, [r4, #4]
}
   28438:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2843a:	f06f 000d 	mvn.w	r0, #13
   2843e:	e7fb      	b.n	28438 <uarte_nrfx_rx_disable+0x3c>

00028440 <setup_tx_cache>:
{
   28440:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   28442:	68c3      	ldr	r3, [r0, #12]
   28444:	68da      	ldr	r2, [r3, #12]
   28446:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   28448:	1a52      	subs	r2, r2, r1
   2844a:	d00f      	beq.n	2846c <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2844c:	2a08      	cmp	r2, #8
   2844e:	bf28      	it	cs
   28450:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   28452:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   28454:	68c3      	ldr	r3, [r0, #12]
   28456:	6999      	ldr	r1, [r3, #24]
   28458:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2845a:	68c3      	ldr	r3, [r0, #12]
   2845c:	6898      	ldr	r0, [r3, #8]
   2845e:	69d9      	ldr	r1, [r3, #28]
   28460:	4401      	add	r1, r0
   28462:	6998      	ldr	r0, [r3, #24]
   28464:	f001 fa9d 	bl	299a2 <memcpy>
	return true;
   28468:	2001      	movs	r0, #1
}
   2846a:	bd08      	pop	{r3, pc}
		return false;
   2846c:	4610      	mov	r0, r2
   2846e:	e7fc      	b.n	2846a <setup_tx_cache+0x2a>

00028470 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   28470:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   28472:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   28474:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   28476:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   28478:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2847c:	b1f1      	cbz	r1, 284bc <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2847e:	2100      	movs	r1, #0
   28480:	4618      	mov	r0, r3
   28482:	f001 fac8 	bl	29a16 <memset>
   28486:	4603      	mov	r3, r0
   28488:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2848a:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2848e:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28490:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   28492:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28496:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2849a:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2849e:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   284a0:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   284a4:	2800      	cmp	r0, #0
   284a6:	d0fb      	beq.n	284a0 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   284a8:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   284ac:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   284b0:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   284b4:	b92b      	cbnz	r3, 284c2 <rx_flush.isra.0+0x52>
			return rx_amount;
   284b6:	b2c0      	uxtb	r0, r0
}
   284b8:	b002      	add	sp, #8
   284ba:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   284bc:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   284be:	4669      	mov	r1, sp
   284c0:	e7e3      	b.n	2848a <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   284c2:	4285      	cmp	r5, r0
   284c4:	d1f7      	bne.n	284b6 <rx_flush.isra.0+0x46>
   284c6:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   284c8:	4293      	cmp	r3, r2
   284ca:	d101      	bne.n	284d0 <rx_flush.isra.0+0x60>
	return 0;
   284cc:	2000      	movs	r0, #0
   284ce:	e7f3      	b.n	284b8 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   284d0:	f813 1b01 	ldrb.w	r1, [r3], #1
   284d4:	2900      	cmp	r1, #0
   284d6:	d0f7      	beq.n	284c8 <rx_flush.isra.0+0x58>
   284d8:	e7ed      	b.n	284b6 <rx_flush.isra.0+0x46>

000284da <async_uart_release>:
{
   284da:	b570      	push	{r4, r5, r6, lr}
   284dc:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   284de:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   284e0:	f04f 0320 	mov.w	r3, #32
   284e4:	f3ef 8611 	mrs	r6, BASEPRI
   284e8:	f383 8812 	msr	BASEPRI_MAX, r3
   284ec:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   284f0:	68d0      	ldr	r0, [r2, #12]
   284f2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   284f6:	ea23 0301 	bic.w	r3, r3, r1
   284fa:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   284fe:	68d5      	ldr	r5, [r2, #12]
   28500:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   28504:	b973      	cbnz	r3, 28524 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   28506:	2902      	cmp	r1, #2
   28508:	d107      	bne.n	2851a <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2850a:	2205      	movs	r2, #5
   2850c:	6860      	ldr	r0, [r4, #4]
   2850e:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   28512:	f7ff ffad 	bl	28470 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   28516:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2851a:	2200      	movs	r2, #0
	return config->uarte_regs;
   2851c:	6863      	ldr	r3, [r4, #4]
   2851e:	681b      	ldr	r3, [r3, #0]
   28520:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   28524:	f386 8811 	msr	BASEPRI, r6
   28528:	f3bf 8f6f 	isb	sy
}
   2852c:	bd70      	pop	{r4, r5, r6, pc}

0002852e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2852e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   28530:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28532:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28536:	b940      	cbnz	r0, 2854a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   28538:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2853a:	079b      	lsls	r3, r3, #30
   2853c:	d406      	bmi.n	2854c <is_tx_ready.isra.0+0x1e>
   2853e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   28542:	3800      	subs	r0, #0
   28544:	bf18      	it	ne
   28546:	2001      	movne	r0, #1
   28548:	4770      	bx	lr
   2854a:	2001      	movs	r0, #1
}
   2854c:	4770      	bx	lr

0002854e <start_tx_locked>:
{
   2854e:	b510      	push	{r4, lr}
   28550:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   28552:	6840      	ldr	r0, [r0, #4]
   28554:	f7ff ffeb 	bl	2852e <is_tx_ready.isra.0>
   28558:	68cb      	ldr	r3, [r1, #12]
   2855a:	b918      	cbnz	r0, 28564 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2855c:	2201      	movs	r2, #1
   2855e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   28562:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   28564:	2200      	movs	r2, #0
   28566:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2856a:	f04f 32ff 	mov.w	r2, #4294967295
   2856e:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   28570:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   28572:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   28576:	68cb      	ldr	r3, [r1, #12]
}
   28578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2857c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   28580:	f7ff be7e 	b.w	28280 <tx_start>

00028584 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   28584:	b510      	push	{r4, lr}
   28586:	4604      	mov	r4, r0
   28588:	2200      	movs	r2, #0
   2858a:	2101      	movs	r1, #1
   2858c:	200b      	movs	r0, #11
   2858e:	f7e7 fe7f 	bl	10290 <z_arm_irq_priority_set>
   28592:	200b      	movs	r0, #11
   28594:	f7e7 fe4c 	bl	10230 <arch_irq_enable>
   28598:	4620      	mov	r0, r4
   2859a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2859e:	f7f2 bfdd 	b.w	1b55c <uarte_instance_init.constprop.0>

000285a2 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   285a2:	b510      	push	{r4, lr}
   285a4:	4604      	mov	r4, r0
   285a6:	2200      	movs	r2, #0
   285a8:	2101      	movs	r1, #1
   285aa:	2008      	movs	r0, #8
   285ac:	f7e7 fe70 	bl	10290 <z_arm_irq_priority_set>
   285b0:	2008      	movs	r0, #8
   285b2:	f7e7 fe3d 	bl	10230 <arch_irq_enable>
   285b6:	4620      	mov	r0, r4
   285b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   285bc:	f7f2 bfce 	b.w	1b55c <uarte_instance_init.constprop.0>

000285c0 <rx_timeout>:
{
   285c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   285c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   285c4:	68e3      	ldr	r3, [r4, #12]
   285c6:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   285ca:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   285ce:	bb13      	cbnz	r3, 28616 <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   285d0:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   285d2:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   285d4:	6873      	ldr	r3, [r6, #4]
   285d6:	681b      	ldr	r3, [r3, #0]
   285d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   285dc:	68e3      	ldr	r3, [r4, #12]
   285de:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   285e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   285e4:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   285e6:	bf1f      	itttt	ne
   285e8:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   285ea:	68e3      	ldrne	r3, [r4, #12]
   285ec:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   285ee:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   285f0:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   285f2:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   285f6:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   285f8:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   285fa:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   285fc:	da0c      	bge.n	28618 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   285fe:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   28602:	68e3      	ldr	r3, [r4, #12]
   28604:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   28608:	4281      	cmp	r1, r0
   2860a:	d80b      	bhi.n	28624 <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2860c:	2210      	movs	r2, #16
	return config->uarte_regs;
   2860e:	6873      	ldr	r3, [r6, #4]
   28610:	681b      	ldr	r3, [r3, #0]
   28612:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   28616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   28618:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2861c:	eb02 0c01 	add.w	ip, r2, r1
   28620:	4584      	cmp	ip, r0
   28622:	d904      	bls.n	2862e <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   28624:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   28626:	2d00      	cmp	r5, #0
   28628:	ddf0      	ble.n	2860c <rx_timeout+0x4c>
		clipped = true;
   2862a:	2701      	movs	r7, #1
   2862c:	e005      	b.n	2863a <rx_timeout+0x7a>
	if (len > 0) {
   2862e:	2a00      	cmp	r2, #0
   28630:	d0ec      	beq.n	2860c <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   28632:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   28636:	428a      	cmp	r2, r1
   28638:	da12      	bge.n	28660 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2863a:	4629      	mov	r1, r5
   2863c:	4630      	mov	r0, r6
   2863e:	f7ff fe4e 	bl	282de <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   28642:	68e2      	ldr	r2, [r4, #12]
   28644:	6e13      	ldr	r3, [r2, #96]	; 0x60
   28646:	442b      	add	r3, r5
   28648:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2864a:	68e2      	ldr	r2, [r4, #12]
   2864c:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2864e:	442b      	add	r3, r5
   28650:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   28652:	2f00      	cmp	r7, #0
   28654:	d0da      	beq.n	2860c <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   28656:	68e0      	ldr	r0, [r4, #12]
   28658:	3080      	adds	r0, #128	; 0x80
   2865a:	f001 f8cb 	bl	297f4 <z_impl_k_timer_stop>
}
   2865e:	e7d5      	b.n	2860c <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   28660:	1a52      	subs	r2, r2, r1
   28662:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   28664:	e7d2      	b.n	2860c <rx_timeout+0x4c>

00028666 <uarte_nrfx_tx_abort>:
{
   28666:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   28668:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2866a:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2866c:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2866e:	68da      	ldr	r2, [r3, #12]
   28670:	6891      	ldr	r1, [r2, #8]
   28672:	b151      	cbz	r1, 2868a <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   28674:	2400      	movs	r4, #0
   28676:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2867a:	68d8      	ldr	r0, [r3, #12]
   2867c:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2867e:	f001 f8b9 	bl	297f4 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28682:	2301      	movs	r3, #1
	return 0;
   28684:	4620      	mov	r0, r4
   28686:	60eb      	str	r3, [r5, #12]
}
   28688:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2868a:	f06f 000d 	mvn.w	r0, #13
   2868e:	e7fb      	b.n	28688 <uarte_nrfx_tx_abort+0x22>

00028690 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   28690:	6b43      	ldr	r3, [r0, #52]	; 0x34
   28692:	6818      	ldr	r0, [r3, #0]
   28694:	f7ff bfe7 	b.w	28666 <uarte_nrfx_tx_abort>

00028698 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2869a:	ab0b      	add	r3, sp, #44	; 0x2c
   2869c:	9305      	str	r3, [sp, #20]
   2869e:	9303      	str	r3, [sp, #12]
   286a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   286a2:	9302      	str	r3, [sp, #8]
   286a4:	2300      	movs	r3, #0
   286a6:	4618      	mov	r0, r3
   286a8:	e9cd 3300 	strd	r3, r3, [sp]
   286ac:	f7e5 fee2 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   286b0:	b007      	add	sp, #28
   286b2:	f85d fb04 	ldr.w	pc, [sp], #4

000286b6 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   286b6:	2000      	movs	r0, #0
   286b8:	4770      	bx	lr

000286ba <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   286ba:	b538      	push	{r3, r4, r5, lr}
   286bc:	460c      	mov	r4, r1
   286be:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   286c0:	f7ea f9a2 	bl	12a08 <bt_is_ready>
   286c4:	b128      	cbz	r0, 286d2 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   286c6:	4629      	mov	r1, r5
   286c8:	4620      	mov	r0, r4
}
   286ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   286ce:	f7e9 bba9 	b.w	11e24 <bt_hci_le_rand>
}
   286d2:	f06f 000a 	mvn.w	r0, #10
   286d6:	bd38      	pop	{r3, r4, r5, pc}

000286d8 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   286d8:	4608      	mov	r0, r1
   286da:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   286dc:	4611      	mov	r1, r2
   286de:	f7f4 f8f3 	bl	1c8c8 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   286e2:	2800      	cmp	r0, #0
	}

	return 0;
}
   286e4:	bf18      	it	ne
   286e6:	f06f 0004 	mvnne.w	r0, #4
   286ea:	bd08      	pop	{r3, pc}

000286ec <entropy_psa_crypto_rng_init>:
{
   286ec:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   286ee:	f000 f921 	bl	28934 <psa_crypto_init>
		return -EIO;
   286f2:	2800      	cmp	r0, #0
}
   286f4:	bf18      	it	ne
   286f6:	f06f 0004 	mvnne.w	r0, #4
   286fa:	bd08      	pop	{r3, pc}

000286fc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   286fc:	4770      	bx	lr

000286fe <sys_clock_cycle_get_32>:
{
   286fe:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   28700:	f7f3 fd16 	bl	1c130 <z_nrf_rtc_timer_read>
}
   28704:	bd08      	pop	{r3, pc}

00028706 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   28706:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   28708:	6843      	ldr	r3, [r0, #4]
   2870a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2870c:	7a05      	ldrb	r5, [r0, #8]
   2870e:	6844      	ldr	r4, [r0, #4]
   28710:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   28714:	42a3      	cmp	r3, r4
   28716:	d302      	bcc.n	2871e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   28718:	f06f 0001 	mvn.w	r0, #1
}
   2871c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2871e:	795c      	ldrb	r4, [r3, #5]
   28720:	428c      	cmp	r4, r1
   28722:	d001      	beq.n	28728 <pinctrl_lookup_state+0x22>
		(*state)++;
   28724:	3308      	adds	r3, #8
   28726:	e7f0      	b.n	2870a <pinctrl_lookup_state+0x4>
			return 0;
   28728:	2000      	movs	r0, #0
   2872a:	e7f7      	b.n	2871c <pinctrl_lookup_state+0x16>

0002872c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2872c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28730:	4615      	mov	r5, r2
   28732:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28734:	f04f 0901 	mov.w	r9, #1
   28738:	b085      	sub	sp, #20
   2873a:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2873e:	45d0      	cmp	r8, sl
   28740:	d103      	bne.n	2874a <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   28742:	2000      	movs	r0, #0
}
   28744:	b005      	add	sp, #20
   28746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2874a:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2874e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28752:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   28756:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   28758:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2875c:	bf08      	it	eq
   2875e:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   28762:	2b22      	cmp	r3, #34	; 0x22
   28764:	f200 8091 	bhi.w	2888a <pinctrl_configure_pins+0x15e>
   28768:	e8df f003 	tbb	[pc, r3]
   2876c:	38231e12 	.word	0x38231e12
   28770:	8f383426 	.word	0x8f383426
   28774:	3b8f8f8f 	.word	0x3b8f8f8f
   28778:	8f8f8f65 	.word	0x8f8f8f65
   2877c:	8f8f8f8f 	.word	0x8f8f8f8f
   28780:	71688f8f 	.word	0x71688f8f
   28784:	8f8f7774 	.word	0x8f8f7774
   28788:	83807a8f 	.word	0x83807a8f
   2878c:	8986      	.short	0x8986
   2878e:	8c          	.byte	0x8c
   2878f:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   28790:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28794:	a803      	add	r0, sp, #12
   28796:	9403      	str	r4, [sp, #12]
   28798:	f7f3 ff02 	bl	1c5a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2879c:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2879e:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   287a0:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   287a4:	6083      	str	r3, [r0, #8]
   287a6:	e002      	b.n	287ae <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   287a8:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   287ac:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   287ae:	46b3      	mov	fp, r6
   287b0:	e01e      	b.n	287f0 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   287b2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   287b6:	e7ed      	b.n	28794 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   287b8:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   287ba:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   287be:	a803      	add	r0, sp, #12
   287c0:	9403      	str	r4, [sp, #12]
   287c2:	f7f3 feed 	bl	1c5a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   287c6:	9b03      	ldr	r3, [sp, #12]
   287c8:	f04f 0b01 	mov.w	fp, #1
   287cc:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   287d0:	60c3      	str	r3, [r0, #12]
   287d2:	e00d      	b.n	287f0 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   287d4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   287d8:	2601      	movs	r6, #1
   287da:	e7f0      	b.n	287be <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   287dc:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   287e0:	e7e4      	b.n	287ac <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   287e2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   287e6:	2f00      	cmp	r7, #0
   287e8:	d1e0      	bne.n	287ac <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   287ea:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   287ec:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   287ee:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   287f0:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   287f4:	a803      	add	r0, sp, #12
   287f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   287fa:	2a00      	cmp	r2, #0
   287fc:	bf1c      	itt	ne
   287fe:	2601      	movne	r6, #1
   28800:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   28804:	9301      	str	r3, [sp, #4]
   28806:	9403      	str	r4, [sp, #12]
   28808:	f7f3 feca 	bl	1c5a0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2880c:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2880e:	9b01      	ldr	r3, [sp, #4]
   28810:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   28814:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28818:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2881c:	023b      	lsls	r3, r7, #8
   2881e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   28822:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   28826:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2882a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2882c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   28830:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   28834:	e783      	b.n	2873e <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   28836:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2883a:	e7d4      	b.n	287e6 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2883c:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   28840:	f8da 3000 	ldr.w	r3, [sl]
   28844:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   28848:	2b00      	cmp	r3, #0
   2884a:	d0c5      	beq.n	287d8 <pinctrl_configure_pins+0xac>
   2884c:	e7a2      	b.n	28794 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2884e:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   28852:	e7f5      	b.n	28840 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   28854:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   28858:	e7f2      	b.n	28840 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2885a:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2885e:	e7ef      	b.n	28840 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   28860:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   28864:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   28866:	f04f 0b00 	mov.w	fp, #0
   2886a:	e7c1      	b.n	287f0 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2886c:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   28870:	e790      	b.n	28794 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   28872:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   28876:	e7f5      	b.n	28864 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   28878:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2887c:	e7f2      	b.n	28864 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2887e:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   28882:	e7ef      	b.n	28864 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   28884:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   28888:	e7ec      	b.n	28864 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2888a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2888e:	e759      	b.n	28744 <pinctrl_configure_pins+0x18>

00028890 <mbox_nrf_register_callback>:
{
   28890:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   28892:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   28894:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   28896:	bf9f      	itttt	ls
   28898:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2889c:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   288a0:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   288a2:	2000      	movls	r0, #0
		return -EINVAL;
   288a4:	bf88      	it	hi
   288a6:	f06f 0015 	mvnhi.w	r0, #21
}
   288aa:	bd10      	pop	{r4, pc}

000288ac <mbox_nrf_mtu_get>:
}
   288ac:	2000      	movs	r0, #0
   288ae:	4770      	bx	lr

000288b0 <mbox_nrf_max_channels_get>:
}
   288b0:	2010      	movs	r0, #16
   288b2:	4770      	bx	lr

000288b4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   288b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   288b6:	ab0b      	add	r3, sp, #44	; 0x2c
   288b8:	9305      	str	r3, [sp, #20]
   288ba:	9303      	str	r3, [sp, #12]
   288bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   288be:	2202      	movs	r2, #2
   288c0:	9302      	str	r3, [sp, #8]
   288c2:	2300      	movs	r3, #0
   288c4:	4618      	mov	r0, r3
   288c6:	e9cd 3300 	strd	r3, r3, [sp]
   288ca:	f7e5 fdd3 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   288ce:	b007      	add	sp, #28
   288d0:	f85d fb04 	ldr.w	pc, [sp], #4

000288d4 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   288d4:	2000      	movs	r0, #0
   288d6:	4770      	bx	lr

000288d8 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   288d8:	2300      	movs	r3, #0
{
   288da:	b570      	push	{r4, r5, r6, lr}
   288dc:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   288de:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   288e2:	ab03      	add	r3, sp, #12
   288e4:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   288e6:	2304      	movs	r3, #4
{
   288e8:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   288ea:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   288ec:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   288ee:	b169      	cbz	r1, 2890c <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   288f0:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   288f2:	680b      	ldr	r3, [r1, #0]
   288f4:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   288f6:	684b      	ldr	r3, [r1, #4]
   288f8:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   288fa:	2101      	movs	r1, #1
   288fc:	2041      	movs	r0, #65	; 0x41
   288fe:	f7f4 f821 	bl	1c944 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   28902:	1e05      	subs	r5, r0, #0
   28904:	dc04      	bgt.n	28910 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   28906:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   28908:	b008      	add	sp, #32
   2890a:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2890c:	2601      	movs	r6, #1
   2890e:	e7f4      	b.n	288fa <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   28910:	1e23      	subs	r3, r4, #0
   28912:	bf18      	it	ne
   28914:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   28916:	2100      	movs	r1, #0
   28918:	e9cd 4300 	strd	r4, r3, [sp]
   2891c:	aa04      	add	r2, sp, #16
   2891e:	4633      	mov	r3, r6
   28920:	f7f3 fff4 	bl	1c90c <psa_call>
   28924:	4604      	mov	r4, r0
    psa_close(handle);
   28926:	4628      	mov	r0, r5
   28928:	f7f4 f81a 	bl	1c960 <psa_close>
    if (status < PSA_SUCCESS) {
   2892c:	2c00      	cmp	r4, #0
   2892e:	dbea      	blt.n	28906 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   28930:	4620      	mov	r0, r4
   28932:	e7e9      	b.n	28908 <tfm_platform_ioctl+0x30>

00028934 <psa_crypto_init>:
}
   28934:	2000      	movs	r0, #0
   28936:	4770      	bx	lr

00028938 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   28938:	b510      	push	{r4, lr}
   2893a:	b088      	sub	sp, #32
   2893c:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2893e:	ab05      	add	r3, sp, #20
   28940:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   28942:	230c      	movs	r3, #12
   28944:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   28946:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   28948:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2894c:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   28950:	eb0d 0103 	add.w	r1, sp, r3
   28954:	aa03      	add	r2, sp, #12
   28956:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   28958:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2895c:	f7ff ffbc 	bl	288d8 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   28960:	9b00      	ldr	r3, [sp, #0]
   28962:	6023      	str	r3, [r4, #0]

	return ret;
}
   28964:	b008      	add	sp, #32
   28966:	bd10      	pop	{r4, pc}

00028968 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   28968:	2300      	movs	r3, #0
{
   2896a:	b510      	push	{r4, lr}
   2896c:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2896e:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   28972:	ab05      	add	r3, sp, #20
   28974:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   28976:	230c      	movs	r3, #12
   28978:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2897a:	2304      	movs	r3, #4
{
   2897c:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2897e:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   28980:	aa03      	add	r2, sp, #12
   28982:	eb0d 0103 	add.w	r1, sp, r3
   28986:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   28988:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2898a:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2898e:	f7ff ffa3 	bl	288d8 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   28992:	9b00      	ldr	r3, [sp, #0]
   28994:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   28996:	b008      	add	sp, #32
   28998:	bd10      	pop	{r4, pc}

0002899a <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2899a:	f7f3 bfef 	b.w	1c97c <SystemCoreClockUpdate>

0002899e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2899e:	4700      	bx	r0

000289a0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   289a0:	f000 bef6 	b.w	29790 <z_impl_k_busy_wait>

000289a4 <nrf_gpio_pin_present_check>:
    switch (port)
   289a4:	0943      	lsrs	r3, r0, #5
   289a6:	d00b      	beq.n	289c0 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   289a8:	2b01      	cmp	r3, #1
   289aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   289ae:	bf18      	it	ne
   289b0:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   289b2:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   289b6:	fa23 f000 	lsr.w	r0, r3, r0
}
   289ba:	f000 0001 	and.w	r0, r0, #1
   289be:	4770      	bx	lr
    switch (port)
   289c0:	f04f 33ff 	mov.w	r3, #4294967295
   289c4:	e7f5      	b.n	289b2 <nrf_gpio_pin_present_check+0xe>

000289c6 <pin_is_task_output>:
{
   289c6:	b508      	push	{r3, lr}
   289c8:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   289ca:	f7f4 fa59 	bl	1ce80 <pin_is_output>
   289ce:	b110      	cbz	r0, 289d6 <pin_is_task_output+0x10>
   289d0:	4610      	mov	r0, r2
   289d2:	f7f4 fa3f 	bl	1ce54 <pin_in_use_by_te>
}
   289d6:	f000 0001 	and.w	r0, r0, #1
   289da:	bd08      	pop	{r3, pc}

000289dc <nrf_gpio_reconfigure>:
{
   289dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   289e0:	4617      	mov	r7, r2
   289e2:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   289e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   289e8:	a801      	add	r0, sp, #4
{
   289ea:	460c      	mov	r4, r1
   289ec:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   289ee:	f7f4 facb 	bl	1cf88 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   289f2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   289f4:	1e39      	subs	r1, r7, #0
   289f6:	bf18      	it	ne
   289f8:	2101      	movne	r1, #1
   289fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   289fe:	1e23      	subs	r3, r4, #0
   28a00:	bf18      	it	ne
   28a02:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   28a04:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   28a06:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   28a0a:	bf14      	ite	ne
   28a0c:	210c      	movne	r1, #12
   28a0e:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   28a10:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   28a12:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   28a16:	bf14      	ite	ne
   28a18:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   28a1c:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   28a1e:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   28a22:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   28a26:	bf14      	ite	ne
   28a28:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   28a2c:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   28a2e:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   28a32:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   28a34:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   28a38:	b104      	cbz	r4, 28a3c <nrf_gpio_reconfigure+0x60>
   28a3a:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   28a3c:	b10f      	cbz	r7, 28a42 <nrf_gpio_reconfigure+0x66>
   28a3e:	783f      	ldrb	r7, [r7, #0]
   28a40:	007f      	lsls	r7, r7, #1
   28a42:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   28a44:	b10e      	cbz	r6, 28a4a <nrf_gpio_reconfigure+0x6e>
   28a46:	7836      	ldrb	r6, [r6, #0]
   28a48:	00b6      	lsls	r6, r6, #2
   28a4a:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   28a4c:	b18d      	cbz	r5, 28a72 <nrf_gpio_reconfigure+0x96>
   28a4e:	7829      	ldrb	r1, [r5, #0]
   28a50:	0209      	lsls	r1, r1, #8
   28a52:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   28a54:	f1b8 0f00 	cmp.w	r8, #0
   28a58:	d003      	beq.n	28a62 <nrf_gpio_reconfigure+0x86>
   28a5a:	f898 8000 	ldrb.w	r8, [r8]
   28a5e:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   28a62:	4321      	orrs	r1, r4
   28a64:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   28a68:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   28a6c:	b002      	add	sp, #8
   28a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   28a72:	4629      	mov	r1, r5
   28a74:	e7ed      	b.n	28a52 <nrf_gpio_reconfigure+0x76>

00028a76 <nrf_gpio_cfg_sense_set>:
{
   28a76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   28a78:	f10d 030f 	add.w	r3, sp, #15
   28a7c:	9301      	str	r3, [sp, #4]
   28a7e:	2300      	movs	r3, #0
{
   28a80:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   28a84:	461a      	mov	r2, r3
   28a86:	4619      	mov	r1, r3
   28a88:	9300      	str	r3, [sp, #0]
   28a8a:	f7ff ffa7 	bl	289dc <nrf_gpio_reconfigure>
}
   28a8e:	b005      	add	sp, #20
   28a90:	f85d fb04 	ldr.w	pc, [sp], #4

00028a94 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   28a94:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   28a98:	4770      	bx	lr

00028a9a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   28a9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   28a9e:	4770      	bx	lr

00028aa0 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   28aa0:	f44f 7080 	mov.w	r0, #256	; 0x100
   28aa4:	4770      	bx	lr

00028aa6 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   28aa6:	2100      	movs	r1, #0
   28aa8:	f7f4 bfc0 	b.w	1da2c <nrf_gpio_cfg.constprop.0>

00028aac <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   28aac:	2302      	movs	r3, #2
   28aae:	f7f4 bef9 	b.w	1d8a4 <qspi_xfer>

00028ab2 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   28ab2:	2303      	movs	r3, #3
   28ab4:	f7f4 bef6 	b.w	1d8a4 <qspi_xfer>

00028ab8 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   28ab8:	2100      	movs	r1, #0
   28aba:	2002      	movs	r0, #2
   28abc:	f7f5 ba18 	b.w	1def0 <nrfx_qspi_erase>

00028ac0 <nrf_gpio_pin_clear>:
{
   28ac0:	b507      	push	{r0, r1, r2, lr}
   28ac2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28ac4:	a801      	add	r0, sp, #4
   28ac6:	f7f5 fa8d 	bl	1dfe4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   28aca:	2301      	movs	r3, #1
   28acc:	9a01      	ldr	r2, [sp, #4]
   28ace:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   28ad0:	60c3      	str	r3, [r0, #12]
}
   28ad2:	b003      	add	sp, #12
   28ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00028ad8 <nrf_gpio_pin_set>:
{
   28ad8:	b507      	push	{r0, r1, r2, lr}
   28ada:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28adc:	a801      	add	r0, sp, #4
   28ade:	f7f5 fa81 	bl	1dfe4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28ae2:	2301      	movs	r3, #1
   28ae4:	9a01      	ldr	r2, [sp, #4]
   28ae6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   28ae8:	6083      	str	r3, [r0, #8]
}
   28aea:	b003      	add	sp, #12
   28aec:	f85d fb04 	ldr.w	pc, [sp], #4

00028af0 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   28af0:	7f83      	ldrb	r3, [r0, #30]
   28af2:	075a      	lsls	r2, r3, #29
   28af4:	d40b      	bmi.n	28b0e <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   28af6:	7fc0      	ldrb	r0, [r0, #31]
   28af8:	28ff      	cmp	r0, #255	; 0xff
   28afa:	d008      	beq.n	28b0e <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   28afc:	079b      	lsls	r3, r3, #30
   28afe:	bf58      	it	pl
   28b00:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   28b04:	b909      	cbnz	r1, 28b0a <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   28b06:	f7ff bfdb 	b.w	28ac0 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   28b0a:	f7ff bfe5 	b.w	28ad8 <nrf_gpio_pin_set>
}
   28b0e:	4770      	bx	lr

00028b10 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   28b10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28b14:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28b16:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   28b18:	4698      	mov	r8, r3
   28b1a:	460f      	mov	r7, r1
   28b1c:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28b1e:	f7f5 fa61 	bl	1dfe4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   28b22:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   28b24:	f89d 4020 	ldrb.w	r4, [sp, #32]
   28b28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   28b2c:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   28b2e:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28b32:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   28b36:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   28b3a:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28b3e:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   28b42:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   28b44:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   28b48:	b002      	add	sp, #8
   28b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028b4e <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   28b4e:	1c43      	adds	r3, r0, #1
{
   28b50:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   28b52:	d005      	beq.n	28b60 <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   28b54:	2300      	movs	r3, #0
   28b56:	2201      	movs	r2, #1
   28b58:	4619      	mov	r1, r3
   28b5a:	9300      	str	r3, [sp, #0]
   28b5c:	f7ff ffd8 	bl	28b10 <nrf_gpio_cfg.constprop.0>
}
   28b60:	b003      	add	sp, #12
   28b62:	f85d fb04 	ldr.w	pc, [sp], #4

00028b66 <metal_device_open>:
{
   28b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28b68:	460c      	mov	r4, r1
   28b6a:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   28b6c:	4606      	mov	r6, r0
   28b6e:	b918      	cbnz	r0, 28b78 <metal_device_open+0x12>
		return -EINVAL;
   28b70:	f06f 0015 	mvn.w	r0, #21
}
   28b74:	b002      	add	sp, #8
   28b76:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   28b78:	f7e0 fbf2 	bl	9360 <strlen>
   28b7c:	2800      	cmp	r0, #0
   28b7e:	d0f7      	beq.n	28b70 <metal_device_open+0xa>
   28b80:	2c00      	cmp	r4, #0
   28b82:	d0f5      	beq.n	28b70 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   28b84:	4620      	mov	r0, r4
   28b86:	f7e0 fbeb 	bl	9360 <strlen>
   28b8a:	2800      	cmp	r0, #0
   28b8c:	d0f0      	beq.n	28b70 <metal_device_open+0xa>
   28b8e:	2d00      	cmp	r5, #0
   28b90:	d0ee      	beq.n	28b70 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   28b92:	4630      	mov	r0, r6
   28b94:	a901      	add	r1, sp, #4
   28b96:	f7f5 fd3b 	bl	1e610 <metal_bus_find>
	if (error)
   28b9a:	2800      	cmp	r0, #0
   28b9c:	d1ea      	bne.n	28b74 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   28b9e:	9801      	ldr	r0, [sp, #4]
   28ba0:	6883      	ldr	r3, [r0, #8]
   28ba2:	b12b      	cbz	r3, 28bb0 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   28ba4:	462a      	mov	r2, r5
   28ba6:	4621      	mov	r1, r4
}
   28ba8:	b002      	add	sp, #8
   28baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   28bae:	4718      	bx	r3
		return -ENODEV;
   28bb0:	f06f 0012 	mvn.w	r0, #18
   28bb4:	e7de      	b.n	28b74 <metal_device_open+0xe>

00028bb6 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   28bb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28bba:	b089      	sub	sp, #36	; 0x24
   28bbc:	9e10      	ldr	r6, [sp, #64]	; 0x40
   28bbe:	4604      	mov	r4, r0
   28bc0:	4689      	mov	r9, r1
   28bc2:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   28bc4:	2100      	movs	r1, #0
   28bc6:	2220      	movs	r2, #32
   28bc8:	4668      	mov	r0, sp
{
   28bca:	461f      	mov	r7, r3
   28bcc:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   28bce:	f000 ff22 	bl	29a16 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   28bd2:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   28bd4:	bf97      	itett	ls
   28bd6:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   28bd8:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   28bdc:	40b3      	lslls	r3, r6
   28bde:	f103 33ff 	addls.w	r3, r3, #4294967295
   28be2:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   28be4:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   28be6:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   28bea:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   28bee:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   28bf0:	3418      	adds	r4, #24
   28bf2:	b145      	cbz	r5, 28c06 <metal_io_init+0x50>
   28bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   28bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   28bf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   28bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   28c00:	b009      	add	sp, #36	; 0x24
   28c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   28c06:	466d      	mov	r5, sp
   28c08:	e7f4      	b.n	28bf4 <metal_io_init+0x3e>

00028c0a <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   28c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   28c0c:	6804      	ldr	r4, [r0, #0]
		: NULL);
   28c0e:	1c66      	adds	r6, r4, #1
   28c10:	d031      	beq.n	28c76 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28c12:	6885      	ldr	r5, [r0, #8]
   28c14:	42a9      	cmp	r1, r5
   28c16:	d22e      	bcs.n	28c76 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   28c18:	1864      	adds	r4, r4, r1
   28c1a:	d02c      	beq.n	28c76 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   28c1c:	185e      	adds	r6, r3, r1
   28c1e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   28c20:	bf88      	it	hi
   28c22:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   28c24:	6a05      	ldr	r5, [r0, #32]
   28c26:	b135      	cbz	r5, 28c36 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   28c28:	9300      	str	r3, [sp, #0]
   28c2a:	2305      	movs	r3, #5
   28c2c:	47a8      	blx	r5
   28c2e:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   28c30:	4618      	mov	r0, r3
   28c32:	b002      	add	sp, #8
   28c34:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   28c36:	f3bf 8f5b 	dmb	ish
		while ( len && (
   28c3a:	4619      	mov	r1, r3
   28c3c:	1aa4      	subs	r4, r4, r2
   28c3e:	1910      	adds	r0, r2, r4
   28c40:	b119      	cbz	r1, 28c4a <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   28c42:	ea40 0502 	orr.w	r5, r0, r2
   28c46:	07ad      	lsls	r5, r5, #30
   28c48:	d10a      	bne.n	28c60 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   28c4a:	2903      	cmp	r1, #3
   28c4c:	dc0d      	bgt.n	28c6a <metal_io_block_read+0x60>
   28c4e:	3801      	subs	r0, #1
   28c50:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   28c52:	428a      	cmp	r2, r1
   28c54:	d0ec      	beq.n	28c30 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   28c56:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   28c5a:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   28c5e:	e7f8      	b.n	28c52 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   28c60:	7800      	ldrb	r0, [r0, #0]
			len--;
   28c62:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   28c64:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   28c68:	e7e9      	b.n	28c3e <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   28c6a:	f850 4b04 	ldr.w	r4, [r0], #4
   28c6e:	3904      	subs	r1, #4
   28c70:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   28c74:	e7e9      	b.n	28c4a <metal_io_block_read+0x40>
		return -ERANGE;
   28c76:	f06f 0321 	mvn.w	r3, #33	; 0x21
   28c7a:	e7d9      	b.n	28c30 <metal_io_block_read+0x26>

00028c7c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   28c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28c7e:	6804      	ldr	r4, [r0, #0]
		: NULL);
   28c80:	1c65      	adds	r5, r4, #1
   28c82:	d032      	beq.n	28cea <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28c84:	6885      	ldr	r5, [r0, #8]
   28c86:	42a9      	cmp	r1, r5
   28c88:	d22f      	bcs.n	28cea <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   28c8a:	1864      	adds	r4, r4, r1
   28c8c:	d02d      	beq.n	28cea <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   28c8e:	185e      	adds	r6, r3, r1
   28c90:	42ae      	cmp	r6, r5
		len = io->size - offset;
   28c92:	bf88      	it	hi
   28c94:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   28c96:	6a45      	ldr	r5, [r0, #36]	; 0x24
   28c98:	b1cd      	cbz	r5, 28cce <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   28c9a:	9300      	str	r3, [sp, #0]
   28c9c:	2305      	movs	r3, #5
   28c9e:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   28ca0:	b002      	add	sp, #8
   28ca2:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   28ca4:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   28ca8:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   28caa:	7005      	strb	r5, [r0, #0]
			len--;
   28cac:	4615      	mov	r5, r2
   28cae:	18a0      	adds	r0, r4, r2
		while ( len && (
   28cb0:	b119      	cbz	r1, 28cba <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   28cb2:	ea40 0602 	orr.w	r6, r0, r2
   28cb6:	07b6      	lsls	r6, r6, #30
   28cb8:	d1f4      	bne.n	28ca4 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   28cba:	2903      	cmp	r1, #3
   28cbc:	dc0a      	bgt.n	28cd4 <metal_io_block_write+0x58>
   28cbe:	3d01      	subs	r5, #1
   28cc0:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   28cc2:	4288      	cmp	r0, r1
   28cc4:	d10c      	bne.n	28ce0 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   28cc6:	f3bf 8f5b 	dmb	ish
	retlen = len;
   28cca:	4618      	mov	r0, r3
   28ccc:	e7e8      	b.n	28ca0 <metal_io_block_write+0x24>
   28cce:	4619      	mov	r1, r3
   28cd0:	1aa4      	subs	r4, r4, r2
   28cd2:	e7eb      	b.n	28cac <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   28cd4:	f855 2b04 	ldr.w	r2, [r5], #4
   28cd8:	3904      	subs	r1, #4
   28cda:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   28cde:	e7ec      	b.n	28cba <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   28ce0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   28ce4:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   28ce8:	e7eb      	b.n	28cc2 <metal_io_block_write+0x46>
		return -ERANGE;
   28cea:	f06f 0021 	mvn.w	r0, #33	; 0x21
   28cee:	e7d7      	b.n	28ca0 <metal_io_block_write+0x24>

00028cf0 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   28cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28cf2:	6804      	ldr	r4, [r0, #0]
   28cf4:	461d      	mov	r5, r3
		: NULL);
   28cf6:	1c66      	adds	r6, r4, #1
   28cf8:	d02b      	beq.n	28d52 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28cfa:	6883      	ldr	r3, [r0, #8]
   28cfc:	4299      	cmp	r1, r3
   28cfe:	d228      	bcs.n	28d52 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   28d00:	1864      	adds	r4, r4, r1
   28d02:	d026      	beq.n	28d52 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   28d04:	186e      	adds	r6, r5, r1
   28d06:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   28d08:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   28d0a:	bf88      	it	hi
   28d0c:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   28d0e:	b12e      	cbz	r6, 28d1c <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   28d10:	2305      	movs	r3, #5
   28d12:	9500      	str	r5, [sp, #0]
   28d14:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   28d16:	4628      	mov	r0, r5
}
   28d18:	b002      	add	sp, #8
   28d1a:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   28d1c:	4621      	mov	r1, r4
   28d1e:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   28d20:	b94b      	cbnz	r3, 28d36 <metal_io_block_set+0x46>
   28d22:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   28d24:	4299      	cmp	r1, r3
   28d26:	d111      	bne.n	28d4c <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   28d28:	f3bf 8f5b 	dmb	ish
   28d2c:	e7f3      	b.n	28d16 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   28d2e:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   28d32:	3b01      	subs	r3, #1
   28d34:	e7f4      	b.n	28d20 <metal_io_block_set+0x30>
   28d36:	0788      	lsls	r0, r1, #30
   28d38:	d1f9      	bne.n	28d2e <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   28d3a:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   28d3e:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   28d40:	2b03      	cmp	r3, #3
   28d42:	ddee      	ble.n	28d22 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   28d44:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   28d48:	3b04      	subs	r3, #4
   28d4a:	e7f9      	b.n	28d40 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   28d4c:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   28d50:	e7e8      	b.n	28d24 <metal_io_block_set+0x34>
		return -ERANGE;
   28d52:	f06f 0021 	mvn.w	r0, #33	; 0x21
   28d56:	e7df      	b.n	28d18 <metal_io_block_set+0x28>

00028d58 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   28d58:	2000      	movs	r0, #0
   28d5a:	4770      	bx	lr

00028d5c <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   28d5c:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   28d5e:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   28d60:	4602      	mov	r2, r0
   28d62:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   28d64:	b984      	cbnz	r4, 28d88 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   28d66:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   28d68:	291f      	cmp	r1, #31
   28d6a:	bf98      	it	ls
   28d6c:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   28d70:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   28d72:	b161      	cbz	r1, 28d8e <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   28d74:	6880      	ldr	r0, [r0, #8]
   28d76:	4283      	cmp	r3, r0
   28d78:	d209      	bcs.n	28d8e <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   28d7a:	6910      	ldr	r0, [r2, #16]
   28d7c:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   28d7e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   28d82:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   28d84:	bc10      	pop	{r4}
   28d86:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   28d88:	4623      	mov	r3, r4
}
   28d8a:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   28d8c:	4718      	bx	r3
			: METAL_BAD_PHYS);
   28d8e:	f04f 30ff 	mov.w	r0, #4294967295
   28d92:	e7f7      	b.n	28d84 <metal_io_phys+0x28>

00028d94 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   28d94:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   28d96:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   28d98:	4605      	mov	r5, r0
   28d9a:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   28d9c:	b9e3      	cbnz	r3, 28dd8 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   28d9e:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   28da0:	1c62      	adds	r2, r4, #1
   28da2:	bf09      	itett	eq
   28da4:	6843      	ldreq	r3, [r0, #4]
   28da6:	400c      	andne	r4, r1
   28da8:	681c      	ldreq	r4, [r3, #0]
   28daa:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   28dac:	4621      	mov	r1, r4
   28dae:	4628      	mov	r0, r5
   28db0:	f7ff ffd4 	bl	28d5c <metal_io_phys>
   28db4:	4286      	cmp	r6, r0
   28db6:	d007      	beq.n	28dc8 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   28db8:	692b      	ldr	r3, [r5, #16]
   28dba:	3301      	adds	r3, #1
   28dbc:	441c      	add	r4, r3
		} while (offset < io->size);
   28dbe:	68ab      	ldr	r3, [r5, #8]
   28dc0:	429c      	cmp	r4, r3
   28dc2:	d3f3      	bcc.n	28dac <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   28dc4:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   28dc8:	6828      	ldr	r0, [r5, #0]
		: NULL);
   28dca:	1c43      	adds	r3, r0, #1
   28dcc:	d007      	beq.n	28dde <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28dce:	68ab      	ldr	r3, [r5, #8]
   28dd0:	42a3      	cmp	r3, r4
   28dd2:	d904      	bls.n	28dde <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   28dd4:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   28dd6:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   28dd8:	4798      	blx	r3
   28dda:	4604      	mov	r4, r0
   28ddc:	e7f4      	b.n	28dc8 <metal_io_phys_to_virt+0x34>
		: NULL);
   28dde:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   28de0:	e7f9      	b.n	28dd6 <metal_io_phys_to_virt+0x42>

00028de2 <virtqueue_create>:
{
   28de2:	b530      	push	{r4, r5, lr}
   28de4:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   28de6:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   28dea:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   28dec:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   28dee:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   28df0:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   28df2:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   28df4:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   28df6:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   28df8:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   28dfa:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   28dfe:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   28e02:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   28e06:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   28e08:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   28e0a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   28e0e:	1c6a      	adds	r2, r5, #1
   28e10:	4413      	add	r3, r2
   28e12:	426d      	negs	r5, r5
   28e14:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   28e16:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28e18:	6983      	ldr	r3, [r0, #24]
   28e1a:	b953      	cbnz	r3, 28e32 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   28e1c:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   28e1e:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   28e20:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   28e22:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   28e26:	db06      	blt.n	28e36 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   28e28:	2300      	movs	r3, #0
   28e2a:	7393      	strb	r3, [r2, #14]
   28e2c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   28e30:	73d3      	strb	r3, [r2, #15]
}
   28e32:	2000      	movs	r0, #0
   28e34:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   28e36:	3301      	adds	r3, #1
   28e38:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   28e3a:	e7f0      	b.n	28e1e <virtqueue_create+0x3c>

00028e3c <virtqueue_add_buffer>:
{
   28e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   28e40:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   28e44:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28e46:	4655      	mov	r5, sl
   28e48:	2600      	movs	r6, #0
{
   28e4a:	b085      	sub	sp, #20
	needed = readable + writable;
   28e4c:	eb02 0803 	add.w	r8, r2, r3
{
   28e50:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   28e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28e54:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   28e58:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   28e5c:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   28e5e:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   28e62:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   28e66:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28e68:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   28e6a:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28e6c:	45b0      	cmp	r8, r6
   28e6e:	dc1a      	bgt.n	28ea6 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   28e70:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   28e72:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   28e74:	eba3 030b 	sub.w	r3, r3, fp
   28e78:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   28e7a:	69e3      	ldr	r3, [r4, #28]
   28e7c:	8961      	ldrh	r1, [r4, #10]
   28e7e:	885a      	ldrh	r2, [r3, #2]
   28e80:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   28e82:	400a      	ands	r2, r1
   28e84:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   28e88:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   28e8c:	f3bf 8f5b 	dmb	ish
}
   28e90:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   28e92:	69e2      	ldr	r2, [r4, #28]
   28e94:	8853      	ldrh	r3, [r2, #2]
   28e96:	3301      	adds	r3, #1
   28e98:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   28e9a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   28e9c:	3301      	adds	r3, #1
   28e9e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   28ea0:	b005      	add	sp, #20
   28ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   28ea6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   28ea8:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   28eaa:	f857 1c04 	ldr.w	r1, [r7, #-4]
   28eae:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   28eb2:	9302      	str	r3, [sp, #8]
   28eb4:	6803      	ldr	r3, [r0, #0]
   28eb6:	9203      	str	r2, [sp, #12]
   28eb8:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   28eba:	6883      	ldr	r3, [r0, #8]
   28ebc:	3708      	adds	r7, #8
   28ebe:	4299      	cmp	r1, r3
   28ec0:	bf28      	it	cs
   28ec2:	f04f 31ff 	movcs.w	r1, #4294967295
   28ec6:	f7ff ff49 	bl	28d5c <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   28eca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   28ece:	5098      	str	r0, [r3, r2]
   28ed0:	2200      	movs	r2, #0
   28ed2:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   28ed4:	f857 2c08 	ldr.w	r2, [r7, #-8]
   28ed8:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   28eda:	9a01      	ldr	r2, [sp, #4]
   28edc:	4296      	cmp	r6, r2
   28ede:	bfac      	ite	ge
   28ee0:	2200      	movge	r2, #0
   28ee2:	2201      	movlt	r2, #1
		if (i >= readable)
   28ee4:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   28ee6:	bfd8      	it	le
   28ee8:	f042 0202 	orrle.w	r2, r2, #2
   28eec:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28eee:	3601      	adds	r6, #1
   28ef0:	89ed      	ldrh	r5, [r5, #14]
   28ef2:	e7bb      	b.n	28e6c <virtqueue_add_buffer+0x30>

00028ef4 <virtqueue_get_buffer>:
{
   28ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   28ef6:	b350      	cbz	r0, 28f4e <virtqueue_get_buffer+0x5a>
   28ef8:	6a05      	ldr	r5, [r0, #32]
   28efa:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   28efc:	886b      	ldrh	r3, [r5, #2]
   28efe:	42a3      	cmp	r3, r4
   28f00:	d030      	beq.n	28f64 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   28f02:	1c63      	adds	r3, r4, #1
   28f04:	85c3      	strh	r3, [r0, #46]	; 0x2e
   28f06:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   28f08:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   28f0c:	3b01      	subs	r3, #1
   28f0e:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   28f10:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   28f14:	686b      	ldr	r3, [r5, #4]
   28f16:	b29e      	uxth	r6, r3
	if (len)
   28f18:	b109      	cbz	r1, 28f1e <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   28f1a:	68ad      	ldr	r5, [r5, #8]
   28f1c:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   28f1e:	f8d0 c018 	ldr.w	ip, [r0, #24]
   28f22:	b29b      	uxth	r3, r3
   28f24:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   28f28:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   28f2c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   28f2e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   28f30:	442f      	add	r7, r5
	dxp->ndescs--;
   28f32:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   28f34:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   28f36:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   28f38:	898d      	ldrh	r5, [r1, #12]
   28f3a:	076f      	lsls	r7, r5, #29
   28f3c:	d50e      	bpl.n	28f5c <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   28f3e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   28f40:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   28f42:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   28f44:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   28f46:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   28f48:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   28f4a:	b102      	cbz	r2, 28f4e <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   28f4c:	8014      	strh	r4, [r2, #0]
}
   28f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   28f50:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   28f52:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   28f54:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   28f56:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   28f5a:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   28f5c:	898d      	ldrh	r5, [r1, #12]
   28f5e:	07ed      	lsls	r5, r5, #31
   28f60:	d4f6      	bmi.n	28f50 <virtqueue_get_buffer+0x5c>
   28f62:	e7ec      	b.n	28f3e <virtqueue_get_buffer+0x4a>
		return NULL;
   28f64:	2000      	movs	r0, #0
   28f66:	e7f2      	b.n	28f4e <virtqueue_get_buffer+0x5a>

00028f68 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   28f68:	6983      	ldr	r3, [r0, #24]
   28f6a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   28f6e:	6898      	ldr	r0, [r3, #8]
   28f70:	4770      	bx	lr

00028f72 <virtqueue_get_available_buffer>:
{
   28f72:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   28f74:	f3bf 8f5b 	dmb	ish
{
   28f78:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28f7a:	69c1      	ldr	r1, [r0, #28]
{
   28f7c:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28f7e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   28f80:	884a      	ldrh	r2, [r1, #2]
{
   28f82:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28f84:	429a      	cmp	r2, r3
   28f86:	d016      	beq.n	28fb6 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   28f88:	1c5a      	adds	r2, r3, #1
   28f8a:	8602      	strh	r2, [r0, #48]	; 0x30
   28f8c:	8942      	ldrh	r2, [r0, #10]
   28f8e:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   28f90:	4013      	ands	r3, r2
   28f92:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   28f96:	888a      	ldrh	r2, [r1, #4]
   28f98:	802a      	strh	r2, [r5, #0]
   28f9a:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   28f9c:	6982      	ldr	r2, [r0, #24]
   28f9e:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   28fa0:	58d1      	ldr	r1, [r2, r3]
   28fa2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   28fa4:	f7ff fef6 	bl	28d94 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   28fa8:	882a      	ldrh	r2, [r5, #0]
   28faa:	69a3      	ldr	r3, [r4, #24]
   28fac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   28fb0:	689b      	ldr	r3, [r3, #8]
   28fb2:	6033      	str	r3, [r6, #0]
}
   28fb4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   28fb6:	2000      	movs	r0, #0
   28fb8:	e7fc      	b.n	28fb4 <virtqueue_get_available_buffer+0x42>

00028fba <virtqueue_disable_cb>:
{
   28fba:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28fbc:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28fbe:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28fc0:	6912      	ldr	r2, [r2, #16]
   28fc2:	0092      	lsls	r2, r2, #2
   28fc4:	d517      	bpl.n	28ff6 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28fc6:	b943      	cbnz	r3, 28fda <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   28fc8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   28fca:	69c2      	ldr	r2, [r0, #28]
   28fcc:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   28fce:	8944      	ldrh	r4, [r0, #10]
   28fd0:	3b01      	subs	r3, #1
   28fd2:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   28fd4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   28fd8:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28fda:	6803      	ldr	r3, [r0, #0]
   28fdc:	699b      	ldr	r3, [r3, #24]
   28fde:	2b01      	cmp	r3, #1
   28fe0:	d108      	bne.n	28ff4 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   28fe2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   28fe4:	6a02      	ldr	r2, [r0, #32]
   28fe6:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   28fe8:	8940      	ldrh	r0, [r0, #10]
   28fea:	3b01      	subs	r3, #1
   28fec:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   28fee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   28ff2:	8093      	strh	r3, [r2, #4]
}
   28ff4:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28ff6:	b923      	cbnz	r3, 29002 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   28ff8:	69c2      	ldr	r2, [r0, #28]
   28ffa:	8813      	ldrh	r3, [r2, #0]
   28ffc:	f043 0301 	orr.w	r3, r3, #1
   29000:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   29002:	6803      	ldr	r3, [r0, #0]
   29004:	699b      	ldr	r3, [r3, #24]
   29006:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   29008:	bf01      	itttt	eq
   2900a:	6a02      	ldreq	r2, [r0, #32]
   2900c:	8813      	ldrheq	r3, [r2, #0]
   2900e:	f043 0301 	orreq.w	r3, r3, #1
   29012:	8013      	strheq	r3, [r2, #0]
}
   29014:	e7ee      	b.n	28ff4 <virtqueue_disable_cb+0x3a>

00029016 <virtqueue_kick>:
{
   29016:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   29018:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2901c:	6803      	ldr	r3, [r0, #0]
{
   2901e:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   29020:	691a      	ldr	r2, [r3, #16]
   29022:	699b      	ldr	r3, [r3, #24]
   29024:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   29028:	d01a      	beq.n	29060 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2902a:	b97b      	cbnz	r3, 2904c <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2902c:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2902e:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   29030:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   29032:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   29034:	3b01      	subs	r3, #1
   29036:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2903a:	8892      	ldrh	r2, [r2, #4]
   2903c:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2903e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   29040:	b29b      	uxth	r3, r3
   29042:	429a      	cmp	r2, r3
   29044:	d814      	bhi.n	29070 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   29046:	2300      	movs	r3, #0
   29048:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2904a:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2904c:	2b01      	cmp	r3, #1
   2904e:	d1fa      	bne.n	29046 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   29050:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   29052:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   29054:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   29056:	6941      	ldr	r1, [r0, #20]
   29058:	3b01      	subs	r3, #1
   2905a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2905e:	e7ec      	b.n	2903a <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   29060:	b963      	cbnz	r3, 2907c <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   29062:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   29064:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   29066:	43db      	mvns	r3, r3
   29068:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2906c:	2b00      	cmp	r3, #0
   2906e:	d0ea      	beq.n	29046 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   29070:	6923      	ldr	r3, [r4, #16]
   29072:	2b00      	cmp	r3, #0
   29074:	d0e7      	beq.n	29046 <virtqueue_kick+0x30>
		vq->notify(vq);
   29076:	4620      	mov	r0, r4
   29078:	4798      	blx	r3
   2907a:	e7e4      	b.n	29046 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2907c:	2b01      	cmp	r3, #1
   2907e:	d1e2      	bne.n	29046 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   29080:	69c3      	ldr	r3, [r0, #28]
   29082:	e7ef      	b.n	29064 <virtqueue_kick+0x4e>

00029084 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   29084:	69c3      	ldr	r3, [r0, #28]
   29086:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   29088:	8859      	ldrh	r1, [r3, #2]
   2908a:	4291      	cmp	r1, r2
   2908c:	d00a      	beq.n	290a4 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2908e:	8941      	ldrh	r1, [r0, #10]
   29090:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   29092:	400a      	ands	r2, r1
   29094:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   29098:	889a      	ldrh	r2, [r3, #4]
   2909a:	6983      	ldr	r3, [r0, #24]
   2909c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   290a0:	6898      	ldr	r0, [r3, #8]
	return len;
   290a2:	4770      	bx	lr
		return 0;
   290a4:	2000      	movs	r0, #0
}
   290a6:	4770      	bx	lr

000290a8 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   290a8:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   290ac:	68c3      	ldr	r3, [r0, #12]
   290ae:	b103      	cbz	r3, 290b2 <virtqueue_notification+0xa>
		vq->callback(vq);
   290b0:	4718      	bx	r3
}
   290b2:	4770      	bx	lr

000290b4 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   290b4:	f04f 32ff 	mov.w	r2, #4294967295
   290b8:	f04f 33ff 	mov.w	r3, #4294967295
   290bc:	f7f6 bf84 	b.w	1ffc8 <z_impl_k_sem_take>

000290c0 <rpmsg_unregister_endpoint>:
{
   290c0:	b570      	push	{r4, r5, r6, lr}
   290c2:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   290c4:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   290c6:	f105 0658 	add.w	r6, r5, #88	; 0x58
   290ca:	4630      	mov	r0, r6
   290cc:	f7ff fff2 	bl	290b4 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   290d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   290d2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   290d6:	2b7f      	cmp	r3, #127	; 0x7f
   290d8:	d80b      	bhi.n	290f2 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   290da:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   290dc:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   290de:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   290e0:	f003 031f 	and.w	r3, r3, #31
   290e4:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   290e6:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   290ea:	ea23 0302 	bic.w	r3, r3, r2
   290ee:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   290f2:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   290f6:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   290f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   290fa:	f104 0334 	add.w	r3, r4, #52	; 0x34
   290fe:	6011      	str	r1, [r2, #0]
	node->next = node;
   29100:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   29104:	2300      	movs	r3, #0
   29106:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   29108:	4630      	mov	r0, r6
}
   2910a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2910e:	f7f6 bf17 	b.w	1ff40 <z_impl_k_sem_give>

00029112 <rpmsg_send_ns_message>:
{
   29112:	b530      	push	{r4, r5, lr}
   29114:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   29116:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   29118:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2911a:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2911c:	2220      	movs	r2, #32
   2911e:	4601      	mov	r1, r0
   29120:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   29122:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   29124:	f000 fdc6 	bl	29cb4 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   29128:	2328      	movs	r3, #40	; 0x28
   2912a:	2201      	movs	r2, #1
   2912c:	4629      	mov	r1, r5
   2912e:	e9cd 3200 	strd	r3, r2, [sp]
   29132:	4620      	mov	r0, r4
   29134:	2235      	movs	r2, #53	; 0x35
   29136:	ab02      	add	r3, sp, #8
   29138:	f7f5 fbd8 	bl	1e8ec <rpmsg_send_offchannel_raw>
}
   2913c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   29140:	b00d      	add	sp, #52	; 0x34
   29142:	bd30      	pop	{r4, r5, pc}

00029144 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   29144:	b128      	cbz	r0, 29152 <rpmsg_hold_rx_buffer+0xe>
   29146:	6a00      	ldr	r0, [r0, #32]
   29148:	b118      	cbz	r0, 29152 <rpmsg_hold_rx_buffer+0xe>
   2914a:	b111      	cbz	r1, 29152 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2914c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2914e:	b103      	cbz	r3, 29152 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   29150:	4718      	bx	r3
}
   29152:	4770      	bx	lr

00029154 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   29154:	b130      	cbz	r0, 29164 <rpmsg_release_rx_buffer+0x10>
   29156:	6a00      	ldr	r0, [r0, #32]
   29158:	b120      	cbz	r0, 29164 <rpmsg_release_rx_buffer+0x10>
   2915a:	b119      	cbz	r1, 29164 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2915c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   29160:	b103      	cbz	r3, 29164 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   29162:	4718      	bx	r3
}
   29164:	4770      	bx	lr

00029166 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   29166:	b130      	cbz	r0, 29176 <rpmsg_get_tx_payload_buffer+0x10>
   29168:	6a00      	ldr	r0, [r0, #32]
   2916a:	b120      	cbz	r0, 29176 <rpmsg_get_tx_payload_buffer+0x10>
   2916c:	b119      	cbz	r1, 29176 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2916e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   29172:	b103      	cbz	r3, 29176 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   29174:	4718      	bx	r3
}
   29176:	2000      	movs	r0, #0
   29178:	4770      	bx	lr

0002917a <rpmsg_get_endpoint>:
{
   2917a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2917e:	4606      	mov	r6, r0
   29180:	4688      	mov	r8, r1
   29182:	4617      	mov	r7, r2
   29184:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   29186:	6804      	ldr	r4, [r0, #0]
   29188:	42a6      	cmp	r6, r4
   2918a:	d101      	bne.n	29190 <rpmsg_get_endpoint+0x16>
	return NULL;
   2918c:	2500      	movs	r5, #0
   2918e:	e023      	b.n	291d8 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   29190:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   29192:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   29196:	d002      	beq.n	2919e <rpmsg_get_endpoint+0x24>
   29198:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2919a:	42bb      	cmp	r3, r7
   2919c:	d01c      	beq.n	291d8 <rpmsg_get_endpoint+0x5e>
		if (name)
   2919e:	f1b8 0f00 	cmp.w	r8, #0
   291a2:	d101      	bne.n	291a8 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   291a4:	6824      	ldr	r4, [r4, #0]
   291a6:	e7ef      	b.n	29188 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   291a8:	2220      	movs	r2, #32
   291aa:	4641      	mov	r1, r8
   291ac:	4628      	mov	r0, r5
   291ae:	f000 fd6f 	bl	29c90 <strncmp>
		if (!name || !name_match)
   291b2:	2800      	cmp	r0, #0
   291b4:	d1f6      	bne.n	291a4 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   291b6:	f1b9 3fff 	cmp.w	r9, #4294967295
   291ba:	d002      	beq.n	291c2 <rpmsg_get_endpoint+0x48>
   291bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   291be:	454b      	cmp	r3, r9
   291c0:	d00a      	beq.n	291d8 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   291c2:	1c7b      	adds	r3, r7, #1
   291c4:	d00b      	beq.n	291de <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   291c6:	6824      	ldr	r4, [r4, #0]
   291c8:	42b4      	cmp	r4, r6
   291ca:	d0df      	beq.n	2918c <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   291cc:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   291d0:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   291d4:	429f      	cmp	r7, r3
   291d6:	d1e7      	bne.n	291a8 <rpmsg_get_endpoint+0x2e>
}
   291d8:	4628      	mov	r0, r5
   291da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   291de:	6aab      	ldr	r3, [r5, #40]	; 0x28
   291e0:	3301      	adds	r3, #1
   291e2:	d0f9      	beq.n	291d8 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   291e4:	6824      	ldr	r4, [r4, #0]
   291e6:	42b4      	cmp	r4, r6
   291e8:	d0d0      	beq.n	2918c <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   291ea:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   291ee:	e7d6      	b.n	2919e <rpmsg_get_endpoint+0x24>

000291f0 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   291f0:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   291f2:	4604      	mov	r4, r0
   291f4:	b190      	cbz	r0, 2921c <rpmsg_destroy_ept+0x2c>
   291f6:	6a03      	ldr	r3, [r0, #32]
   291f8:	b183      	cbz	r3, 2921c <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   291fa:	7802      	ldrb	r2, [r0, #0]
   291fc:	b14a      	cbz	r2, 29212 <rpmsg_destroy_ept+0x22>
   291fe:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   29202:	b133      	cbz	r3, 29212 <rpmsg_destroy_ept+0x22>
   29204:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2920a:	d302      	bcc.n	29212 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2920c:	2101      	movs	r1, #1
   2920e:	f7ff ff80 	bl	29112 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   29212:	4620      	mov	r0, r4
}
   29214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   29218:	f7ff bf52 	b.w	290c0 <rpmsg_unregister_endpoint>
}
   2921c:	bd10      	pop	{r4, pc}

0002921e <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2921e:	f851 3c08 	ldr.w	r3, [r1, #-8]
   29222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   29226:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2922a:	4770      	bx	lr

0002922c <rpmsg_virtio_tx_callback>:
}
   2922c:	4770      	bx	lr

0002922e <k_sem_give>:
   2922e:	f7f6 be87 	b.w	1ff40 <z_impl_k_sem_give>

00029232 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   29232:	f04f 32ff 	mov.w	r2, #4294967295
   29236:	f04f 33ff 	mov.w	r3, #4294967295
   2923a:	f7f6 bec5 	b.w	1ffc8 <z_impl_k_sem_take>

0002923e <rpmsg_virtio_release_tx_buffer>:
{
   2923e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29240:	460c      	mov	r4, r1
   29242:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   29244:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   29248:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2924c:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2924e:	b2b6      	uxth	r6, r6
   29250:	f7ff ffef 	bl	29232 <__metal_mutex_acquire>
	r_desc->idx = idx;
   29254:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   29258:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2925c:	f1a4 0310 	sub.w	r3, r4, #16
   29260:	f844 2c0c 	str.w	r2, [r4, #-12]
   29264:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   29268:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2926c:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   29270:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   29274:	4638      	mov	r0, r7
   29276:	6013      	str	r3, [r2, #0]
   29278:	f7ff ffd9 	bl	2922e <k_sem_give>
}
   2927c:	2000      	movs	r0, #0
   2927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029280 <rpmsg_virtio_ns_callback>:
{
   29280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   29284:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   29286:	2a28      	cmp	r2, #40	; 0x28
{
   29288:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2928a:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2928e:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   29290:	d126      	bne.n	292e0 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   29292:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   29294:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   29296:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   29298:	42a1      	cmp	r1, r4
   2929a:	bf28      	it	cs
   2929c:	f04f 31ff 	movcs.w	r1, #4294967295
   292a0:	2320      	movs	r3, #32
   292a2:	466a      	mov	r2, sp
   292a4:	f7ff fcb1 	bl	28c0a <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   292a8:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   292ac:	f8d7 8020 	ldr.w	r8, [r7, #32]
   292b0:	4630      	mov	r0, r6
   292b2:	f7ff ffbe 	bl	29232 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   292b6:	4643      	mov	r3, r8
   292b8:	f04f 32ff 	mov.w	r2, #4294967295
   292bc:	4669      	mov	r1, sp
   292be:	4628      	mov	r0, r5
   292c0:	f7ff ff5b 	bl	2917a <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   292c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   292c6:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   292c8:	07db      	lsls	r3, r3, #31
   292ca:	d519      	bpl.n	29300 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   292cc:	b960      	cbnz	r0, 292e8 <rpmsg_virtio_ns_callback+0x68>
   292ce:	4630      	mov	r0, r6
   292d0:	f7ff ffad 	bl	2922e <k_sem_give>
		if (rdev->ns_unbind_cb)
   292d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   292d6:	b11b      	cbz	r3, 292e0 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   292d8:	4642      	mov	r2, r8
   292da:	4669      	mov	r1, sp
   292dc:	4628      	mov	r0, r5
   292de:	4798      	blx	r3
}
   292e0:	2000      	movs	r0, #0
   292e2:	b008      	add	sp, #32
   292e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   292e8:	f04f 33ff 	mov.w	r3, #4294967295
   292ec:	6283      	str	r3, [r0, #40]	; 0x28
   292ee:	4630      	mov	r0, r6
   292f0:	f7ff ff9d 	bl	2922e <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   292f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   292f6:	2b00      	cmp	r3, #0
   292f8:	d0ec      	beq.n	292d4 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   292fa:	4620      	mov	r0, r4
   292fc:	4798      	blx	r3
   292fe:	e7e9      	b.n	292d4 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   29300:	b920      	cbnz	r0, 2930c <rpmsg_virtio_ns_callback+0x8c>
   29302:	4630      	mov	r0, r6
   29304:	f7ff ff93 	bl	2922e <k_sem_give>
			if (rdev->ns_bind_cb)
   29308:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2930a:	e7e4      	b.n	292d6 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2930c:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   29310:	4630      	mov	r0, r6
   29312:	f7ff ff8c 	bl	2922e <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   29316:	e7e3      	b.n	292e0 <rpmsg_virtio_ns_callback+0x60>

00029318 <rpmsg_virtio_get_rx_buffer>:
{
   29318:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2931a:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2931e:	4613      	mov	r3, r2
   29320:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   29322:	b925      	cbnz	r5, 2932e <rpmsg_virtio_get_rx_buffer+0x16>
}
   29324:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   29326:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2932a:	f7ff bde3 	b.w	28ef4 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2932e:	2d01      	cmp	r5, #1
   29330:	d106      	bne.n	29340 <rpmsg_virtio_get_rx_buffer+0x28>
}
   29332:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   29334:	460a      	mov	r2, r1
   29336:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2933a:	4619      	mov	r1, r3
   2933c:	f7ff be19 	b.w	28f72 <virtqueue_get_available_buffer>
}
   29340:	2000      	movs	r0, #0
   29342:	bc30      	pop	{r4, r5}
   29344:	4770      	bx	lr

00029346 <rpmsg_virtio_return_buffer>:
{
   29346:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   29348:	460c      	mov	r4, r1
   2934a:	4619      	mov	r1, r3
   2934c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   29350:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   29352:	b95d      	cbnz	r5, 2936c <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   29354:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   29356:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2935a:	2301      	movs	r3, #1
   2935c:	462a      	mov	r2, r5
   2935e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   29362:	a902      	add	r1, sp, #8
   29364:	f7ff fd6a 	bl	28e3c <virtqueue_add_buffer>
}
   29368:	b004      	add	sp, #16
   2936a:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2936c:	2d01      	cmp	r5, #1
   2936e:	d1fb      	bne.n	29368 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   29370:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   29374:	b004      	add	sp, #16
   29376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2937a:	f7f5 ba9b 	b.w	1e8b4 <virtqueue_add_consumed_buffer>

0002937e <rpmsg_virtio_release_rx_buffer>:
{
   2937e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29380:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   29382:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   29386:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2938a:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2938c:	b2b6      	uxth	r6, r6
{
   2938e:	460d      	mov	r5, r1
   29390:	f7ff ff4f 	bl	29232 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   29394:	4631      	mov	r1, r6
   29396:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2939a:	f7ff fde5 	bl	28f68 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2939e:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   293a0:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   293a2:	f1a5 0110 	sub.w	r1, r5, #16
   293a6:	4620      	mov	r0, r4
   293a8:	f7ff ffcd 	bl	29346 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   293ac:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   293b0:	f7ff fe31 	bl	29016 <virtqueue_kick>
   293b4:	4638      	mov	r0, r7
}
   293b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   293ba:	f7ff bf38 	b.w	2922e <k_sem_give>

000293be <rpmsg_virtio_shm_pool_get_buffer>:
{
   293be:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   293c0:	b148      	cbz	r0, 293d6 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   293c2:	b149      	cbz	r1, 293d8 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   293c4:	6843      	ldr	r3, [r0, #4]
   293c6:	428b      	cmp	r3, r1
   293c8:	d306      	bcc.n	293d8 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   293ca:	6882      	ldr	r2, [r0, #8]
   293cc:	6804      	ldr	r4, [r0, #0]
   293ce:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   293d0:	1a5b      	subs	r3, r3, r1
   293d2:	6043      	str	r3, [r0, #4]
	return buffer;
   293d4:	18a0      	adds	r0, r4, r2
}
   293d6:	bd10      	pop	{r4, pc}
		return NULL;
   293d8:	2000      	movs	r0, #0
   293da:	e7fc      	b.n	293d6 <rpmsg_virtio_shm_pool_get_buffer+0x18>

000293dc <rpmsg_virtio_get_tx_payload_buffer>:
{
   293dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   293e0:	4605      	mov	r5, r0
   293e2:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   293e6:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   293e8:	6a03      	ldr	r3, [r0, #32]
   293ea:	4617      	mov	r7, r2
   293ec:	681b      	ldr	r3, [r3, #0]
   293ee:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   293f0:	0743      	lsls	r3, r0, #29
   293f2:	d403      	bmi.n	293fc <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   293f4:	2000      	movs	r0, #0
}
   293f6:	b002      	add	sp, #8
   293f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   293fc:	f643 2398 	movw	r3, #15000	; 0x3a98
   29400:	2f00      	cmp	r7, #0
   29402:	bf18      	it	ne
   29404:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   29406:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2940a:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2940e:	4640      	mov	r0, r8
   29410:	f7ff ff0f 	bl	29232 <__metal_mutex_acquire>
	return list->next == list;
   29414:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   29418:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2941c:	4554      	cmp	r4, sl
   2941e:	f8d3 9018 	ldr.w	r9, [r3, #24]
   29422:	d025      	beq.n	29470 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   29424:	b324      	cbz	r4, 29470 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   29426:	e9d4 2300 	ldrd	r2, r3, [r4]
   2942a:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2942c:	6822      	ldr	r2, [r4, #0]
   2942e:	601a      	str	r2, [r3, #0]
	node->next = node;
   29430:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   29434:	f1b9 0f00 	cmp.w	r9, #0
   29438:	d10e      	bne.n	29458 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   2943a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2943e:	6033      	str	r3, [r6, #0]
   29440:	4640      	mov	r0, r8
   29442:	f7ff fef4 	bl	2922e <k_sem_give>
	rp_hdr->reserved = idx;
   29446:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2944a:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2944e:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   29450:	6833      	ldr	r3, [r6, #0]
   29452:	3b10      	subs	r3, #16
   29454:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   29456:	e7ce      	b.n	293f6 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   29458:	f1b9 0f01 	cmp.w	r9, #1
   2945c:	d1f0      	bne.n	29440 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   2945e:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   29460:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   29464:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   29468:	f7ff fd7e 	bl	28f68 <virtqueue_get_buffer_length>
   2946c:	6030      	str	r0, [r6, #0]
   2946e:	e7e7      	b.n	29440 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   29470:	f1b9 0f00 	cmp.w	r9, #0
   29474:	d12a      	bne.n	294cc <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   29476:	4631      	mov	r1, r6
   29478:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2947c:	f10d 0206 	add.w	r2, sp, #6
   29480:	f7ff fd38 	bl	28ef4 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   29484:	4604      	mov	r4, r0
   29486:	2800      	cmp	r0, #0
   29488:	d1da      	bne.n	29440 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   2948a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   2948e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   29490:	b953      	cbnz	r3, 294a8 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   29492:	4640      	mov	r0, r8
   29494:	f7ff fecb 	bl	2922e <k_sem_give>
		if (rp_hdr || !tick_count)
   29498:	2f00      	cmp	r7, #0
   2949a:	d0ab      	beq.n	293f4 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   2949c:	2021      	movs	r0, #33	; 0x21
   2949e:	2100      	movs	r1, #0
   294a0:	f7f8 fc42 	bl	21d28 <z_impl_k_sleep>
		tick_count--;
   294a4:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   294a6:	e7b2      	b.n	2940e <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   294a8:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   294ac:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   294b0:	f7ff ff85 	bl	293be <rpmsg_virtio_shm_pool_get_buffer>
   294b4:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   294b6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   294ba:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   294be:	6033      	str	r3, [r6, #0]
   294c0:	4640      	mov	r0, r8
   294c2:	f7ff feb4 	bl	2922e <k_sem_give>
		if (rp_hdr || !tick_count)
   294c6:	2c00      	cmp	r4, #0
   294c8:	d0e6      	beq.n	29498 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   294ca:	e7bc      	b.n	29446 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   294cc:	f1b9 0f01 	cmp.w	r9, #1
   294d0:	d1df      	bne.n	29492 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   294d2:	4632      	mov	r2, r6
   294d4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   294d8:	f10d 0106 	add.w	r1, sp, #6
   294dc:	f7ff fd49 	bl	28f72 <virtqueue_get_available_buffer>
   294e0:	4604      	mov	r4, r0
   294e2:	e7ed      	b.n	294c0 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

000294e4 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   294e4:	b120      	cbz	r0, 294f0 <rpmsg_virtio_init_shm_pool+0xc>
   294e6:	b119      	cbz	r1, 294f0 <rpmsg_virtio_init_shm_pool+0xc>
   294e8:	b112      	cbz	r2, 294f0 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   294ea:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   294ee:	6001      	str	r1, [r0, #0]
}
   294f0:	4770      	bx	lr

000294f2 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   294f2:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   294f4:	4604      	mov	r4, r0
   294f6:	b918      	cbnz	r0, 29500 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   294f8:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   294fa:	3834      	subs	r0, #52	; 0x34
   294fc:	f7ff fe78 	bl	291f0 <rpmsg_destroy_ept>
	return list->next == list;
   29500:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   29502:	4284      	cmp	r4, r0
   29504:	d1f9      	bne.n	294fa <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   29506:	2300      	movs	r3, #0
		rvdev->svq = 0;
   29508:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   2950c:	e7f4      	b.n	294f8 <rpmsg_deinit_vdev+0x6>

0002950e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2950e:	f7f5 bd43 	b.w	1ef98 <_DoInit>

00029512 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   29512:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   29514:	f7ff fffb 	bl	2950e <SEGGER_RTT_Init>

	return 0;
}
   29518:	2000      	movs	r0, #0
   2951a:	bd08      	pop	{r3, pc}

0002951c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2951c:	4770      	bx	lr

0002951e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2951e:	b140      	cbz	r0, 29532 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29520:	68c3      	ldr	r3, [r0, #12]
   29522:	7858      	ldrb	r0, [r3, #1]
   29524:	f010 0001 	ands.w	r0, r0, #1
   29528:	bf1e      	ittt	ne
   2952a:	7818      	ldrbne	r0, [r3, #0]
   2952c:	fab0 f080 	clzne	r0, r0
   29530:	0940      	lsrne	r0, r0, #5
}
   29532:	4770      	bx	lr

00029534 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29536:	ab0b      	add	r3, sp, #44	; 0x2c
   29538:	9305      	str	r3, [sp, #20]
   2953a:	9303      	str	r3, [sp, #12]
   2953c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2953e:	2201      	movs	r2, #1
   29540:	9302      	str	r3, [sp, #8]
   29542:	2300      	movs	r3, #0
   29544:	4618      	mov	r0, r3
   29546:	e9cd 3300 	strd	r3, r3, [sp]
   2954a:	f7e4 ff93 	bl	e474 <z_impl_z_log_msg_runtime_vcreate>
}
   2954e:	b007      	add	sp, #28
   29550:	f85d fb04 	ldr.w	pc, [sp], #4

00029554 <z_early_memset>:
   29554:	f000 ba5f 	b.w	29a16 <memset>

00029558 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29558:	f000 ba23 	b.w	299a2 <memcpy>

0002955c <k_heap_init>:
{
   2955c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2955e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29562:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   29566:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   29568:	f7e3 bcec 	b.w	cf44 <sys_heap_init>

0002956c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2956c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   29570:	4313      	orrs	r3, r2
   29572:	f013 0303 	ands.w	r3, r3, #3
   29576:	d10c      	bne.n	29592 <create_free_list+0x26>
	slab->free_list = NULL;
   29578:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2957a:	68c1      	ldr	r1, [r0, #12]
   2957c:	4299      	cmp	r1, r3
   2957e:	d801      	bhi.n	29584 <create_free_list+0x18>
	return 0;
   29580:	2000      	movs	r0, #0
   29582:	4770      	bx	lr
		*(char **)p = slab->free_list;
   29584:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   29586:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   29588:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2958a:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2958c:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   2958e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   29590:	e7f3      	b.n	2957a <create_free_list+0xe>
		return -EINVAL;
   29592:	f06f 0015 	mvn.w	r0, #21
}
   29596:	4770      	bx	lr

00029598 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   29598:	f3ef 8005 	mrs	r0, IPSR
}
   2959c:	3800      	subs	r0, #0
   2959e:	bf18      	it	ne
   295a0:	2001      	movne	r0, #1
   295a2:	4770      	bx	lr

000295a4 <z_impl_k_thread_name_set>:
}
   295a4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   295a8:	4770      	bx	lr

000295aa <k_thread_name_get>:
}
   295aa:	2000      	movs	r0, #0
   295ac:	4770      	bx	lr

000295ae <z_impl_k_thread_start>:
	z_sched_start(thread);
   295ae:	f7f7 bd1b 	b.w	20fe8 <z_sched_start>

000295b2 <z_pm_save_idle_exit>:
{
   295b2:	b508      	push	{r3, lr}
	pm_system_resume();
   295b4:	f7e6 fad4 	bl	fb60 <pm_system_resume>
}
   295b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   295bc:	f7ff b89e 	b.w	286fc <sys_clock_idle_exit>

000295c0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   295c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   295c4:	428b      	cmp	r3, r1
   295c6:	d001      	beq.n	295cc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   295c8:	f7f8 b810 	b.w	215ec <z_set_prio>
}
   295cc:	2000      	movs	r0, #0
   295ce:	4770      	bx	lr

000295d0 <z_impl_k_mutex_init>:
{
   295d0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   295d2:	2000      	movs	r0, #0
   295d4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   295d8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   295dc:	4770      	bx	lr

000295de <z_queue_node_peek>:
{
   295de:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   295e0:	4604      	mov	r4, r0
   295e2:	b130      	cbz	r0, 295f2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   295e4:	6802      	ldr	r2, [r0, #0]
   295e6:	0793      	lsls	r3, r2, #30
   295e8:	d003      	beq.n	295f2 <z_queue_node_peek+0x14>
		ret = anode->data;
   295ea:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   295ec:	b109      	cbz	r1, 295f2 <z_queue_node_peek+0x14>
			k_free(anode);
   295ee:	f000 f9bc 	bl	2996a <k_free>
}
   295f2:	4620      	mov	r0, r4
   295f4:	bd10      	pop	{r4, pc}

000295f6 <z_impl_k_queue_init>:
	list->head = NULL;
   295f6:	2300      	movs	r3, #0
	list->tail = NULL;
   295f8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   295fc:	6083      	str	r3, [r0, #8]
   295fe:	f100 030c 	add.w	r3, r0, #12
   29602:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   29606:	f100 0314 	add.w	r3, r0, #20
   2960a:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2960e:	4770      	bx	lr

00029610 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   29610:	2301      	movs	r3, #1
{
   29612:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   29614:	9300      	str	r3, [sp, #0]
   29616:	2300      	movs	r3, #0
{
   29618:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2961a:	4619      	mov	r1, r3
   2961c:	f7f6 fb8c 	bl	1fd38 <queue_insert>
}
   29620:	b003      	add	sp, #12
   29622:	f85d fb04 	ldr.w	pc, [sp], #4

00029626 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   29626:	2300      	movs	r3, #0
{
   29628:	b507      	push	{r0, r1, r2, lr}
   2962a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2962c:	9300      	str	r3, [sp, #0]
   2962e:	4619      	mov	r1, r3
   29630:	f7f6 fb82 	bl	1fd38 <queue_insert>
}
   29634:	b003      	add	sp, #12
   29636:	f85d fb04 	ldr.w	pc, [sp], #4

0002963a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2963a:	b15a      	cbz	r2, 29654 <z_impl_k_sem_init+0x1a>
   2963c:	428a      	cmp	r2, r1
   2963e:	d309      	bcc.n	29654 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   29640:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   29644:	e9c0 1202 	strd	r1, r2, [r0, #8]
   29648:	e9c0 0000 	strd	r0, r0, [r0]
   2964c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29650:	2000      	movs	r0, #0
   29652:	4770      	bx	lr
		return -EINVAL;
   29654:	f06f 0015 	mvn.w	r0, #21
}
   29658:	4770      	bx	lr

0002965a <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2965a:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2965c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2965e:	408b      	lsls	r3, r1
   29660:	ea22 0303 	bic.w	r3, r2, r3
   29664:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   29666:	fa22 f001 	lsr.w	r0, r2, r1
}
   2966a:	f000 0001 	and.w	r0, r0, #1
   2966e:	4770      	bx	lr

00029670 <unschedule_locked>:
{
   29670:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29672:	2103      	movs	r1, #3
{
   29674:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29676:	300c      	adds	r0, #12
   29678:	f7ff ffef 	bl	2965a <flag_test_and_clear>
   2967c:	4604      	mov	r4, r0
   2967e:	b118      	cbz	r0, 29688 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   29680:	f105 0010 	add.w	r0, r5, #16
   29684:	f7f8 fdf0 	bl	22268 <z_abort_timeout>
}
   29688:	4620      	mov	r0, r4
   2968a:	bd38      	pop	{r3, r4, r5, pc}

0002968c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2968c:	b120      	cbz	r0, 29698 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2968e:	2200      	movs	r2, #0
   29690:	3090      	adds	r0, #144	; 0x90
   29692:	4611      	mov	r1, r2
   29694:	f7f8 bc4a 	b.w	21f2c <z_sched_wake>
}
   29698:	4770      	bx	lr

0002969a <cancel_async_locked>:
{
   2969a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2969c:	68c3      	ldr	r3, [r0, #12]
{
   2969e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   296a0:	f3c3 0640 	ubfx	r6, r3, #1, #1
   296a4:	079b      	lsls	r3, r3, #30
   296a6:	d416      	bmi.n	296d6 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   296a8:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   296aa:	2102      	movs	r1, #2
   296ac:	300c      	adds	r0, #12
   296ae:	f7ff ffd4 	bl	2965a <flag_test_and_clear>
   296b2:	b180      	cbz	r0, 296d6 <cancel_async_locked+0x3c>
	return list->head;
   296b4:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   296b8:	b16a      	cbz	r2, 296d6 <cancel_async_locked+0x3c>
   296ba:	4294      	cmp	r4, r2
   296bc:	d11d      	bne.n	296fa <cancel_async_locked+0x60>
	return node->next;
   296be:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   296c0:	b99e      	cbnz	r6, 296ea <cancel_async_locked+0x50>
   296c2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   296c6:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   296ca:	429c      	cmp	r4, r3
   296cc:	d101      	bne.n	296d2 <cancel_async_locked+0x38>
	list->tail = node;
   296ce:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   296d2:	2300      	movs	r3, #0
   296d4:	6023      	str	r3, [r4, #0]
	return *flagp;
   296d6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   296d8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   296dc:	bf1e      	ittt	ne
   296de:	f043 0302 	orrne.w	r3, r3, #2
   296e2:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   296e4:	f040 0002 	orrne.w	r0, r0, #2
}
   296e8:	bd70      	pop	{r4, r5, r6, pc}
   296ea:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   296ec:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   296f0:	4294      	cmp	r4, r2
	list->tail = node;
   296f2:	bf08      	it	eq
   296f4:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   296f8:	e7eb      	b.n	296d2 <cancel_async_locked+0x38>
	return node->next;
   296fa:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   296fc:	6812      	ldr	r2, [r2, #0]
   296fe:	e7db      	b.n	296b8 <cancel_async_locked+0x1e>

00029700 <k_work_submit_to_queue>:
{
   29700:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   29702:	f7f6 ff31 	bl	20568 <z_work_submit_to_queue>
	if (ret > 0) {
   29706:	1e04      	subs	r4, r0, #0
   29708:	dd09      	ble.n	2971e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2970a:	f04f 0320 	mov.w	r3, #32
   2970e:	f3ef 8011 	mrs	r0, BASEPRI
   29712:	f383 8812 	msr	BASEPRI_MAX, r3
   29716:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2971a:	f000 f80d 	bl	29738 <z_reschedule_irqlock>
}
   2971e:	4620      	mov	r0, r4
   29720:	bd10      	pop	{r4, pc}

00029722 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   29722:	f7f6 bedb 	b.w	204dc <k_work_busy_get>

00029726 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   29726:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2972a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2972e:	4283      	cmp	r3, r0
		return b2 - b1;
   29730:	bf14      	ite	ne
   29732:	1ac0      	subne	r0, r0, r3
	return 0;
   29734:	2000      	moveq	r0, #0
}
   29736:	4770      	bx	lr

00029738 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29738:	4603      	mov	r3, r0
   2973a:	b920      	cbnz	r0, 29746 <z_reschedule_irqlock+0xe>
   2973c:	f3ef 8205 	mrs	r2, IPSR
   29740:	b90a      	cbnz	r2, 29746 <z_reschedule_irqlock+0xe>
   29742:	f7e6 bdf7 	b.w	10334 <arch_swap>
	__asm__ volatile(
   29746:	f383 8811 	msr	BASEPRI, r3
   2974a:	f3bf 8f6f 	isb	sy
}
   2974e:	4770      	bx	lr

00029750 <z_reschedule_unlocked>:
	__asm__ volatile(
   29750:	f04f 0320 	mov.w	r3, #32
   29754:	f3ef 8011 	mrs	r0, BASEPRI
   29758:	f383 8812 	msr	BASEPRI_MAX, r3
   2975c:	f3bf 8f6f 	isb	sy
   29760:	f7ff bfea 	b.w	29738 <z_reschedule_irqlock>

00029764 <z_unpend_all>:
{
   29764:	b538      	push	{r3, r4, r5, lr}
   29766:	4605      	mov	r5, r0
	int need_sched = 0;
   29768:	2000      	movs	r0, #0
	return list->head == list;
   2976a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2976c:	42a5      	cmp	r5, r4
   2976e:	d000      	beq.n	29772 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   29770:	b904      	cbnz	r4, 29774 <z_unpend_all+0x10>
}
   29772:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   29774:	4620      	mov	r0, r4
   29776:	f7f8 f853 	bl	21820 <z_unpend_thread>
		z_ready_thread(thread);
   2977a:	4620      	mov	r0, r4
   2977c:	f7f7 fb66 	bl	20e4c <z_ready_thread>
		need_sched = 1;
   29780:	2001      	movs	r0, #1
   29782:	e7f2      	b.n	2976a <z_unpend_all+0x6>

00029784 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   29784:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   29786:	f7f8 fef1 	bl	2256c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2978a:	bd08      	pop	{r3, pc}

0002978c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2978c:	f7f8 beee 	b.w	2256c <sys_clock_tick_get>

00029790 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   29790:	b108      	cbz	r0, 29796 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   29792:	f7e4 bb47 	b.w	de24 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   29796:	4770      	bx	lr

00029798 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29798:	f1b1 3fff 	cmp.w	r1, #4294967295
   2979c:	bf08      	it	eq
   2979e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   297a2:	b538      	push	{r3, r4, r5, lr}
   297a4:	460c      	mov	r4, r1
   297a6:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   297a8:	d014      	beq.n	297d4 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   297aa:	4308      	orrs	r0, r1
   297ac:	d103      	bne.n	297b6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   297ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   297b2:	f7f8 bedb 	b.w	2256c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   297b6:	f06f 0001 	mvn.w	r0, #1
   297ba:	f04f 33ff 	mov.w	r3, #4294967295
   297be:	1b40      	subs	r0, r0, r5
   297c0:	eb63 0101 	sbc.w	r1, r3, r1
   297c4:	2900      	cmp	r1, #0
   297c6:	da04      	bge.n	297d2 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   297c8:	f7f8 fed0 	bl	2256c <sys_clock_tick_get>
   297cc:	1940      	adds	r0, r0, r5
   297ce:	eb41 0104 	adc.w	r1, r1, r4
}
   297d2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   297d4:	f04f 30ff 	mov.w	r0, #4294967295
   297d8:	4601      	mov	r1, r0
   297da:	e7fa      	b.n	297d2 <sys_clock_timeout_end_calc+0x3a>

000297dc <k_timer_init>:
	timer->status = 0U;
   297dc:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   297de:	e9c0 1208 	strd	r1, r2, [r0, #32]
   297e2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   297e6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   297ea:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   297ee:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   297f0:	6343      	str	r3, [r0, #52]	; 0x34
}
   297f2:	4770      	bx	lr

000297f4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   297f4:	b510      	push	{r4, lr}
   297f6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   297f8:	f7f8 fd36 	bl	22268 <z_abort_timeout>

	if (inactive) {
   297fc:	b9b0      	cbnz	r0, 2982c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   297fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29800:	b10b      	cbz	r3, 29806 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   29802:	4620      	mov	r0, r4
   29804:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   29806:	f104 0018 	add.w	r0, r4, #24
   2980a:	f7f8 f8ab 	bl	21964 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2980e:	b168      	cbz	r0, 2982c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   29810:	f7f7 fb1c 	bl	20e4c <z_ready_thread>
   29814:	f04f 0320 	mov.w	r3, #32
   29818:	f3ef 8011 	mrs	r0, BASEPRI
   2981c:	f383 8812 	msr	BASEPRI_MAX, r3
   29820:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   29824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29828:	f7ff bf86 	b.w	29738 <z_reschedule_irqlock>
   2982c:	bd10      	pop	{r4, pc}

0002982e <add_event>:
{
   2982e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29830:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29832:	e9d0 1300 	ldrd	r1, r3, [r0]
   29836:	4288      	cmp	r0, r1
   29838:	4604      	mov	r4, r0
   2983a:	d105      	bne.n	29848 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2983c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2983e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   29842:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29844:	6065      	str	r5, [r4, #4]
   29846:	e01d      	b.n	29884 <add_event+0x56>
	if ((pending == NULL) ||
   29848:	2b00      	cmp	r3, #0
   2984a:	d0f7      	beq.n	2983c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2984c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2984e:	b100      	cbz	r0, 29852 <add_event+0x24>
   29850:	3860      	subs	r0, #96	; 0x60
   29852:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29856:	4639      	mov	r1, r7
   29858:	f7ff ff65 	bl	29726 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2985c:	2800      	cmp	r0, #0
   2985e:	dced      	bgt.n	2983c <add_event+0xe>
	return list->head == list;
   29860:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29862:	42b4      	cmp	r4, r6
   29864:	d0ea      	beq.n	2983c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29866:	2e00      	cmp	r6, #0
   29868:	d0e8      	beq.n	2983c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2986a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2986c:	b101      	cbz	r1, 29870 <add_event+0x42>
   2986e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   29870:	4638      	mov	r0, r7
   29872:	f7ff ff58 	bl	29726 <z_sched_prio_cmp>
   29876:	2800      	cmp	r0, #0
   29878:	dd05      	ble.n	29886 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2987a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2987c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   29880:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   29882:	6075      	str	r5, [r6, #4]
}
   29884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   29886:	6863      	ldr	r3, [r4, #4]
   29888:	429e      	cmp	r6, r3
   2988a:	d0d7      	beq.n	2983c <add_event+0xe>
   2988c:	6836      	ldr	r6, [r6, #0]
   2988e:	e7ea      	b.n	29866 <add_event+0x38>

00029890 <signal_poll_event>:
{
   29890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   29894:	6884      	ldr	r4, [r0, #8]
{
   29896:	4605      	mov	r5, r0
   29898:	460e      	mov	r6, r1
	if (poller != NULL) {
   2989a:	b144      	cbz	r4, 298ae <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2989c:	7863      	ldrb	r3, [r4, #1]
   2989e:	2b01      	cmp	r3, #1
   298a0:	d12e      	bne.n	29900 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   298a2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   298a6:	f013 0302 	ands.w	r3, r3, #2
   298aa:	d10a      	bne.n	298c2 <signal_poll_event+0x32>
		poller->is_polling = false;
   298ac:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   298ae:	2000      	movs	r0, #0
	event->state |= state;
   298b0:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   298b2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   298b4:	f3c3 3286 	ubfx	r2, r3, #14, #7
   298b8:	4316      	orrs	r6, r2
   298ba:	f366 3394 	bfi	r3, r6, #14, #7
   298be:	60eb      	str	r3, [r5, #12]
	return retcode;
   298c0:	e03e      	b.n	29940 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   298c2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   298c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   298ca:	bf08      	it	eq
   298cc:	f112 0f02 	cmneq.w	r2, #2
   298d0:	d032      	beq.n	29938 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   298d2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   298d6:	4640      	mov	r0, r8
   298d8:	f7f7 ffa2 	bl	21820 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   298dc:	2e08      	cmp	r6, #8
   298de:	bf0c      	ite	eq
   298e0:	f06f 0303 	mvneq.w	r3, #3
   298e4:	2300      	movne	r3, #0
   298e6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   298e8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   298ec:	06db      	lsls	r3, r3, #27
   298ee:	d109      	bne.n	29904 <signal_poll_event+0x74>
   298f0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   298f4:	b937      	cbnz	r7, 29904 <signal_poll_event+0x74>
	z_ready_thread(thread);
   298f6:	4640      	mov	r0, r8
   298f8:	f7f7 faa8 	bl	20e4c <z_ready_thread>
		poller->is_polling = false;
   298fc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   298fe:	e7d6      	b.n	298ae <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   29900:	2b02      	cmp	r3, #2
   29902:	d001      	beq.n	29908 <signal_poll_event+0x78>
		poller->is_polling = false;
   29904:	2300      	movs	r3, #0
   29906:	e7d1      	b.n	298ac <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   29908:	7823      	ldrb	r3, [r4, #0]
   2990a:	2b00      	cmp	r3, #0
   2990c:	d0cf      	beq.n	298ae <signal_poll_event+0x1e>
   2990e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   29912:	2f00      	cmp	r7, #0
   29914:	d0f2      	beq.n	298fc <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   29916:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2991a:	f1a4 0914 	sub.w	r9, r4, #20
   2991e:	f104 0014 	add.w	r0, r4, #20
   29922:	f7f8 fca1 	bl	22268 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   29926:	4649      	mov	r1, r9
   29928:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2992a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2992e:	f7f6 fe1b 	bl	20568 <z_work_submit_to_queue>
		poller->is_polling = false;
   29932:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   29936:	e7ba      	b.n	298ae <signal_poll_event+0x1e>
		poller->is_polling = false;
   29938:	2300      	movs	r3, #0
		return -EAGAIN;
   2993a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2993e:	7023      	strb	r3, [r4, #0]
}
   29940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029944 <z_handle_obj_poll_events>:
{
   29944:	4603      	mov	r3, r0
	return list->head == list;
   29946:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   29948:	4283      	cmp	r3, r0
   2994a:	d008      	beq.n	2995e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2994c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29950:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29952:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29954:	2300      	movs	r3, #0
	node->prev = NULL;
   29956:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2995a:	f7ff bf99 	b.w	29890 <signal_poll_event>
}
   2995e:	4770      	bx	lr

00029960 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   29960:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   29962:	e9c0 0000 	strd	r0, r0, [r0]
   29966:	6083      	str	r3, [r0, #8]
}
   29968:	4770      	bx	lr

0002996a <k_free>:
	if (ptr != NULL) {
   2996a:	b120      	cbz	r0, 29976 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2996c:	1f01      	subs	r1, r0, #4
   2996e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   29972:	f7f5 bdc9 	b.w	1f508 <k_heap_free>
}
   29976:	4770      	bx	lr

00029978 <k_malloc>:
{
   29978:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2997a:	2004      	movs	r0, #4
   2997c:	f7f9 babc 	b.w	22ef8 <k_aligned_alloc>

00029980 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29980:	4770      	bx	lr

00029982 <memcmp>:
   29982:	3901      	subs	r1, #1
   29984:	4402      	add	r2, r0
   29986:	b510      	push	{r4, lr}
   29988:	4290      	cmp	r0, r2
   2998a:	d101      	bne.n	29990 <memcmp+0xe>
   2998c:	2000      	movs	r0, #0
   2998e:	e005      	b.n	2999c <memcmp+0x1a>
   29990:	7803      	ldrb	r3, [r0, #0]
   29992:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29996:	42a3      	cmp	r3, r4
   29998:	d001      	beq.n	2999e <memcmp+0x1c>
   2999a:	1b18      	subs	r0, r3, r4
   2999c:	bd10      	pop	{r4, pc}
   2999e:	3001      	adds	r0, #1
   299a0:	e7f2      	b.n	29988 <memcmp+0x6>

000299a2 <memcpy>:
   299a2:	440a      	add	r2, r1
   299a4:	1e43      	subs	r3, r0, #1
   299a6:	4291      	cmp	r1, r2
   299a8:	d100      	bne.n	299ac <memcpy+0xa>
   299aa:	4770      	bx	lr
   299ac:	b510      	push	{r4, lr}
   299ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   299b2:	4291      	cmp	r1, r2
   299b4:	f803 4f01 	strb.w	r4, [r3, #1]!
   299b8:	d1f9      	bne.n	299ae <memcpy+0xc>
   299ba:	bd10      	pop	{r4, pc}

000299bc <__memcpy_chk>:
   299bc:	429a      	cmp	r2, r3
   299be:	b508      	push	{r3, lr}
   299c0:	d901      	bls.n	299c6 <__memcpy_chk+0xa>
   299c2:	f7e7 fc15 	bl	111f0 <__chk_fail>
   299c6:	4281      	cmp	r1, r0
   299c8:	d804      	bhi.n	299d4 <__memcpy_chk+0x18>
   299ca:	188b      	adds	r3, r1, r2
   299cc:	4298      	cmp	r0, r3
   299ce:	d3f8      	bcc.n	299c2 <__memcpy_chk+0x6>
   299d0:	4281      	cmp	r1, r0
   299d2:	d102      	bne.n	299da <__memcpy_chk+0x1e>
   299d4:	1883      	adds	r3, r0, r2
   299d6:	4299      	cmp	r1, r3
   299d8:	d3f3      	bcc.n	299c2 <__memcpy_chk+0x6>
   299da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   299de:	f7ff bfe0 	b.w	299a2 <memcpy>

000299e2 <memmove>:
   299e2:	4288      	cmp	r0, r1
   299e4:	b510      	push	{r4, lr}
   299e6:	eb01 0402 	add.w	r4, r1, r2
   299ea:	d902      	bls.n	299f2 <memmove+0x10>
   299ec:	4284      	cmp	r4, r0
   299ee:	4623      	mov	r3, r4
   299f0:	d807      	bhi.n	29a02 <memmove+0x20>
   299f2:	1e43      	subs	r3, r0, #1
   299f4:	42a1      	cmp	r1, r4
   299f6:	d008      	beq.n	29a0a <memmove+0x28>
   299f8:	f811 2b01 	ldrb.w	r2, [r1], #1
   299fc:	f803 2f01 	strb.w	r2, [r3, #1]!
   29a00:	e7f8      	b.n	299f4 <memmove+0x12>
   29a02:	4402      	add	r2, r0
   29a04:	4601      	mov	r1, r0
   29a06:	428a      	cmp	r2, r1
   29a08:	d100      	bne.n	29a0c <memmove+0x2a>
   29a0a:	bd10      	pop	{r4, pc}
   29a0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   29a10:	f802 4d01 	strb.w	r4, [r2, #-1]!
   29a14:	e7f7      	b.n	29a06 <memmove+0x24>

00029a16 <memset>:
   29a16:	4402      	add	r2, r0
   29a18:	4603      	mov	r3, r0
   29a1a:	4293      	cmp	r3, r2
   29a1c:	d100      	bne.n	29a20 <memset+0xa>
   29a1e:	4770      	bx	lr
   29a20:	f803 1b01 	strb.w	r1, [r3], #1
   29a24:	e7f9      	b.n	29a1a <memset+0x4>

00029a26 <_calloc_r>:
   29a26:	b538      	push	{r3, r4, r5, lr}
   29a28:	fb02 f501 	mul.w	r5, r2, r1
   29a2c:	4629      	mov	r1, r5
   29a2e:	f7f9 fb4f 	bl	230d0 <_malloc_r>
   29a32:	4604      	mov	r4, r0
   29a34:	b118      	cbz	r0, 29a3e <_calloc_r+0x18>
   29a36:	462a      	mov	r2, r5
   29a38:	2100      	movs	r1, #0
   29a3a:	f7ff ffec 	bl	29a16 <memset>
   29a3e:	4620      	mov	r0, r4
   29a40:	bd38      	pop	{r3, r4, r5, pc}

00029a42 <__cvt>:
   29a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a46:	b089      	sub	sp, #36	; 0x24
   29a48:	2b00      	cmp	r3, #0
   29a4a:	461d      	mov	r5, r3
   29a4c:	4614      	mov	r4, r2
   29a4e:	bfba      	itte	lt
   29a50:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   29a54:	4614      	movlt	r4, r2
   29a56:	2300      	movge	r3, #0
   29a58:	9a14      	ldr	r2, [sp, #80]	; 0x50
   29a5a:	bfbc      	itt	lt
   29a5c:	461d      	movlt	r5, r3
   29a5e:	232d      	movlt	r3, #45	; 0x2d
   29a60:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   29a64:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   29a68:	f028 0a20 	bic.w	sl, r8, #32
   29a6c:	7013      	strb	r3, [r2, #0]
   29a6e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   29a72:	d005      	beq.n	29a80 <__cvt+0x3e>
   29a74:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   29a78:	d100      	bne.n	29a7c <__cvt+0x3a>
   29a7a:	3601      	adds	r6, #1
   29a7c:	2302      	movs	r3, #2
   29a7e:	e000      	b.n	29a82 <__cvt+0x40>
   29a80:	2303      	movs	r3, #3
   29a82:	aa07      	add	r2, sp, #28
   29a84:	9204      	str	r2, [sp, #16]
   29a86:	aa06      	add	r2, sp, #24
   29a88:	e9cd 3600 	strd	r3, r6, [sp]
   29a8c:	e9cd 9202 	strd	r9, r2, [sp, #8]
   29a90:	462b      	mov	r3, r5
   29a92:	4622      	mov	r2, r4
   29a94:	f7e0 f8f0 	bl	9c78 <_dtoa_r>
   29a98:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   29a9c:	4607      	mov	r7, r0
   29a9e:	d119      	bne.n	29ad4 <__cvt+0x92>
   29aa0:	f01b 0f01 	tst.w	fp, #1
   29aa4:	d00e      	beq.n	29ac4 <__cvt+0x82>
   29aa6:	eb07 0806 	add.w	r8, r7, r6
   29aaa:	2200      	movs	r2, #0
   29aac:	2300      	movs	r3, #0
   29aae:	4620      	mov	r0, r4
   29ab0:	4629      	mov	r1, r5
   29ab2:	f7df fa8d 	bl	8fd0 <__aeabi_dcmpeq>
   29ab6:	b108      	cbz	r0, 29abc <__cvt+0x7a>
   29ab8:	f8cd 801c 	str.w	r8, [sp, #28]
   29abc:	2230      	movs	r2, #48	; 0x30
   29abe:	9b07      	ldr	r3, [sp, #28]
   29ac0:	4543      	cmp	r3, r8
   29ac2:	d321      	bcc.n	29b08 <__cvt+0xc6>
   29ac4:	9b07      	ldr	r3, [sp, #28]
   29ac6:	4638      	mov	r0, r7
   29ac8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   29aca:	1bdb      	subs	r3, r3, r7
   29acc:	6013      	str	r3, [r2, #0]
   29ace:	b009      	add	sp, #36	; 0x24
   29ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ad4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   29ad8:	d0e2      	beq.n	29aa0 <__cvt+0x5e>
   29ada:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   29ade:	eb00 0806 	add.w	r8, r0, r6
   29ae2:	d1e2      	bne.n	29aaa <__cvt+0x68>
   29ae4:	7803      	ldrb	r3, [r0, #0]
   29ae6:	2b30      	cmp	r3, #48	; 0x30
   29ae8:	d10a      	bne.n	29b00 <__cvt+0xbe>
   29aea:	2200      	movs	r2, #0
   29aec:	2300      	movs	r3, #0
   29aee:	4620      	mov	r0, r4
   29af0:	4629      	mov	r1, r5
   29af2:	f7df fa6d 	bl	8fd0 <__aeabi_dcmpeq>
   29af6:	b918      	cbnz	r0, 29b00 <__cvt+0xbe>
   29af8:	f1c6 0601 	rsb	r6, r6, #1
   29afc:	f8c9 6000 	str.w	r6, [r9]
   29b00:	f8d9 3000 	ldr.w	r3, [r9]
   29b04:	4498      	add	r8, r3
   29b06:	e7d0      	b.n	29aaa <__cvt+0x68>
   29b08:	1c59      	adds	r1, r3, #1
   29b0a:	9107      	str	r1, [sp, #28]
   29b0c:	701a      	strb	r2, [r3, #0]
   29b0e:	e7d6      	b.n	29abe <__cvt+0x7c>

00029b10 <__exponent>:
   29b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29b12:	2900      	cmp	r1, #0
   29b14:	7002      	strb	r2, [r0, #0]
   29b16:	bfba      	itte	lt
   29b18:	4249      	neglt	r1, r1
   29b1a:	232d      	movlt	r3, #45	; 0x2d
   29b1c:	232b      	movge	r3, #43	; 0x2b
   29b1e:	2909      	cmp	r1, #9
   29b20:	7043      	strb	r3, [r0, #1]
   29b22:	dd28      	ble.n	29b76 <__exponent+0x66>
   29b24:	f10d 0307 	add.w	r3, sp, #7
   29b28:	270a      	movs	r7, #10
   29b2a:	461d      	mov	r5, r3
   29b2c:	461a      	mov	r2, r3
   29b2e:	3b01      	subs	r3, #1
   29b30:	fbb1 f6f7 	udiv	r6, r1, r7
   29b34:	fb07 1416 	mls	r4, r7, r6, r1
   29b38:	3430      	adds	r4, #48	; 0x30
   29b3a:	f802 4c01 	strb.w	r4, [r2, #-1]
   29b3e:	460c      	mov	r4, r1
   29b40:	4631      	mov	r1, r6
   29b42:	2c63      	cmp	r4, #99	; 0x63
   29b44:	dcf2      	bgt.n	29b2c <__exponent+0x1c>
   29b46:	3130      	adds	r1, #48	; 0x30
   29b48:	1e94      	subs	r4, r2, #2
   29b4a:	f803 1c01 	strb.w	r1, [r3, #-1]
   29b4e:	1c41      	adds	r1, r0, #1
   29b50:	4623      	mov	r3, r4
   29b52:	42ab      	cmp	r3, r5
   29b54:	d30a      	bcc.n	29b6c <__exponent+0x5c>
   29b56:	f10d 0309 	add.w	r3, sp, #9
   29b5a:	1a9b      	subs	r3, r3, r2
   29b5c:	42ac      	cmp	r4, r5
   29b5e:	bf88      	it	hi
   29b60:	2300      	movhi	r3, #0
   29b62:	3302      	adds	r3, #2
   29b64:	4403      	add	r3, r0
   29b66:	1a18      	subs	r0, r3, r0
   29b68:	b003      	add	sp, #12
   29b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29b6c:	f813 6b01 	ldrb.w	r6, [r3], #1
   29b70:	f801 6f01 	strb.w	r6, [r1, #1]!
   29b74:	e7ed      	b.n	29b52 <__exponent+0x42>
   29b76:	2330      	movs	r3, #48	; 0x30
   29b78:	3130      	adds	r1, #48	; 0x30
   29b7a:	7083      	strb	r3, [r0, #2]
   29b7c:	1d03      	adds	r3, r0, #4
   29b7e:	70c1      	strb	r1, [r0, #3]
   29b80:	e7f1      	b.n	29b66 <__exponent+0x56>

00029b82 <_printf_common>:
   29b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29b86:	4616      	mov	r6, r2
   29b88:	4698      	mov	r8, r3
   29b8a:	688a      	ldr	r2, [r1, #8]
   29b8c:	4607      	mov	r7, r0
   29b8e:	690b      	ldr	r3, [r1, #16]
   29b90:	460c      	mov	r4, r1
   29b92:	f8dd 9020 	ldr.w	r9, [sp, #32]
   29b96:	4293      	cmp	r3, r2
   29b98:	bfb8      	it	lt
   29b9a:	4613      	movlt	r3, r2
   29b9c:	6033      	str	r3, [r6, #0]
   29b9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   29ba2:	b10a      	cbz	r2, 29ba8 <_printf_common+0x26>
   29ba4:	3301      	adds	r3, #1
   29ba6:	6033      	str	r3, [r6, #0]
   29ba8:	6823      	ldr	r3, [r4, #0]
   29baa:	0699      	lsls	r1, r3, #26
   29bac:	bf42      	ittt	mi
   29bae:	6833      	ldrmi	r3, [r6, #0]
   29bb0:	3302      	addmi	r3, #2
   29bb2:	6033      	strmi	r3, [r6, #0]
   29bb4:	6825      	ldr	r5, [r4, #0]
   29bb6:	f015 0506 	ands.w	r5, r5, #6
   29bba:	d106      	bne.n	29bca <_printf_common+0x48>
   29bbc:	f104 0a19 	add.w	sl, r4, #25
   29bc0:	68e3      	ldr	r3, [r4, #12]
   29bc2:	6832      	ldr	r2, [r6, #0]
   29bc4:	1a9b      	subs	r3, r3, r2
   29bc6:	42ab      	cmp	r3, r5
   29bc8:	dc2b      	bgt.n	29c22 <_printf_common+0xa0>
   29bca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   29bce:	6822      	ldr	r2, [r4, #0]
   29bd0:	3b00      	subs	r3, #0
   29bd2:	bf18      	it	ne
   29bd4:	2301      	movne	r3, #1
   29bd6:	0692      	lsls	r2, r2, #26
   29bd8:	d430      	bmi.n	29c3c <_printf_common+0xba>
   29bda:	f104 0243 	add.w	r2, r4, #67	; 0x43
   29bde:	4641      	mov	r1, r8
   29be0:	4638      	mov	r0, r7
   29be2:	47c8      	blx	r9
   29be4:	3001      	adds	r0, #1
   29be6:	d023      	beq.n	29c30 <_printf_common+0xae>
   29be8:	6823      	ldr	r3, [r4, #0]
   29bea:	341a      	adds	r4, #26
   29bec:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   29bf0:	f003 0306 	and.w	r3, r3, #6
   29bf4:	2b04      	cmp	r3, #4
   29bf6:	bf0a      	itet	eq
   29bf8:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   29bfc:	2500      	movne	r5, #0
   29bfe:	6833      	ldreq	r3, [r6, #0]
   29c00:	f04f 0600 	mov.w	r6, #0
   29c04:	bf08      	it	eq
   29c06:	1aed      	subeq	r5, r5, r3
   29c08:	f854 3c12 	ldr.w	r3, [r4, #-18]
   29c0c:	bf08      	it	eq
   29c0e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   29c12:	4293      	cmp	r3, r2
   29c14:	bfc4      	itt	gt
   29c16:	1a9b      	subgt	r3, r3, r2
   29c18:	18ed      	addgt	r5, r5, r3
   29c1a:	42b5      	cmp	r5, r6
   29c1c:	d11a      	bne.n	29c54 <_printf_common+0xd2>
   29c1e:	2000      	movs	r0, #0
   29c20:	e008      	b.n	29c34 <_printf_common+0xb2>
   29c22:	2301      	movs	r3, #1
   29c24:	4652      	mov	r2, sl
   29c26:	4641      	mov	r1, r8
   29c28:	4638      	mov	r0, r7
   29c2a:	47c8      	blx	r9
   29c2c:	3001      	adds	r0, #1
   29c2e:	d103      	bne.n	29c38 <_printf_common+0xb6>
   29c30:	f04f 30ff 	mov.w	r0, #4294967295
   29c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29c38:	3501      	adds	r5, #1
   29c3a:	e7c1      	b.n	29bc0 <_printf_common+0x3e>
   29c3c:	18e1      	adds	r1, r4, r3
   29c3e:	1c5a      	adds	r2, r3, #1
   29c40:	2030      	movs	r0, #48	; 0x30
   29c42:	3302      	adds	r3, #2
   29c44:	4422      	add	r2, r4
   29c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   29c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   29c4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   29c52:	e7c2      	b.n	29bda <_printf_common+0x58>
   29c54:	2301      	movs	r3, #1
   29c56:	4622      	mov	r2, r4
   29c58:	4641      	mov	r1, r8
   29c5a:	4638      	mov	r0, r7
   29c5c:	47c8      	blx	r9
   29c5e:	3001      	adds	r0, #1
   29c60:	d0e6      	beq.n	29c30 <_printf_common+0xae>
   29c62:	3601      	adds	r6, #1
   29c64:	e7d9      	b.n	29c1a <_printf_common+0x98>

00029c66 <strchr>:
   29c66:	b2c9      	uxtb	r1, r1
   29c68:	4603      	mov	r3, r0
   29c6a:	4618      	mov	r0, r3
   29c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   29c70:	b112      	cbz	r2, 29c78 <strchr+0x12>
   29c72:	428a      	cmp	r2, r1
   29c74:	d1f9      	bne.n	29c6a <strchr+0x4>
   29c76:	4770      	bx	lr
   29c78:	2900      	cmp	r1, #0
   29c7a:	bf18      	it	ne
   29c7c:	2000      	movne	r0, #0
   29c7e:	4770      	bx	lr

00029c80 <strcpy>:
   29c80:	4603      	mov	r3, r0
   29c82:	f811 2b01 	ldrb.w	r2, [r1], #1
   29c86:	f803 2b01 	strb.w	r2, [r3], #1
   29c8a:	2a00      	cmp	r2, #0
   29c8c:	d1f9      	bne.n	29c82 <strcpy+0x2>
   29c8e:	4770      	bx	lr

00029c90 <strncmp>:
   29c90:	b510      	push	{r4, lr}
   29c92:	b16a      	cbz	r2, 29cb0 <strncmp+0x20>
   29c94:	3901      	subs	r1, #1
   29c96:	1884      	adds	r4, r0, r2
   29c98:	f810 2b01 	ldrb.w	r2, [r0], #1
   29c9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   29ca0:	429a      	cmp	r2, r3
   29ca2:	d103      	bne.n	29cac <strncmp+0x1c>
   29ca4:	42a0      	cmp	r0, r4
   29ca6:	d001      	beq.n	29cac <strncmp+0x1c>
   29ca8:	2a00      	cmp	r2, #0
   29caa:	d1f5      	bne.n	29c98 <strncmp+0x8>
   29cac:	1ad0      	subs	r0, r2, r3
   29cae:	bd10      	pop	{r4, pc}
   29cb0:	4610      	mov	r0, r2
   29cb2:	e7fc      	b.n	29cae <strncmp+0x1e>

00029cb4 <strncpy>:
   29cb4:	3901      	subs	r1, #1
   29cb6:	4603      	mov	r3, r0
   29cb8:	b510      	push	{r4, lr}
   29cba:	b132      	cbz	r2, 29cca <strncpy+0x16>
   29cbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29cc0:	3a01      	subs	r2, #1
   29cc2:	f803 4b01 	strb.w	r4, [r3], #1
   29cc6:	2c00      	cmp	r4, #0
   29cc8:	d1f7      	bne.n	29cba <strncpy+0x6>
   29cca:	441a      	add	r2, r3
   29ccc:	2100      	movs	r1, #0
   29cce:	4293      	cmp	r3, r2
   29cd0:	d100      	bne.n	29cd4 <strncpy+0x20>
   29cd2:	bd10      	pop	{r4, pc}
   29cd4:	f803 1b01 	strb.w	r1, [r3], #1
   29cd8:	e7f9      	b.n	29cce <strncpy+0x1a>

00029cda <strnlen>:
   29cda:	4602      	mov	r2, r0
   29cdc:	4401      	add	r1, r0
   29cde:	b510      	push	{r4, lr}
   29ce0:	428a      	cmp	r2, r1
   29ce2:	4613      	mov	r3, r2
   29ce4:	d003      	beq.n	29cee <strnlen+0x14>
   29ce6:	781c      	ldrb	r4, [r3, #0]
   29ce8:	3201      	adds	r2, #1
   29cea:	2c00      	cmp	r4, #0
   29cec:	d1f8      	bne.n	29ce0 <strnlen+0x6>
   29cee:	1a18      	subs	r0, r3, r0
   29cf0:	bd10      	pop	{r4, pc}

00029cf2 <strstr>:
   29cf2:	780a      	ldrb	r2, [r1, #0]
   29cf4:	b570      	push	{r4, r5, r6, lr}
   29cf6:	b96a      	cbnz	r2, 29d14 <strstr+0x22>
   29cf8:	bd70      	pop	{r4, r5, r6, pc}
   29cfa:	429a      	cmp	r2, r3
   29cfc:	d109      	bne.n	29d12 <strstr+0x20>
   29cfe:	460c      	mov	r4, r1
   29d00:	4605      	mov	r5, r0
   29d02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   29d06:	2b00      	cmp	r3, #0
   29d08:	d0f6      	beq.n	29cf8 <strstr+0x6>
   29d0a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   29d0e:	429e      	cmp	r6, r3
   29d10:	d0f7      	beq.n	29d02 <strstr+0x10>
   29d12:	3001      	adds	r0, #1
   29d14:	7803      	ldrb	r3, [r0, #0]
   29d16:	2b00      	cmp	r3, #0
   29d18:	d1ef      	bne.n	29cfa <strstr+0x8>
   29d1a:	4618      	mov	r0, r3
   29d1c:	e7ec      	b.n	29cf8 <strstr+0x6>

00029d1e <__strtok_r>:
   29d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d20:	4604      	mov	r4, r0
   29d22:	b908      	cbnz	r0, 29d28 <__strtok_r+0xa>
   29d24:	6814      	ldr	r4, [r2, #0]
   29d26:	b144      	cbz	r4, 29d3a <__strtok_r+0x1c>
   29d28:	4620      	mov	r0, r4
   29d2a:	460f      	mov	r7, r1
   29d2c:	f814 5b01 	ldrb.w	r5, [r4], #1
   29d30:	f817 6b01 	ldrb.w	r6, [r7], #1
   29d34:	b91e      	cbnz	r6, 29d3e <__strtok_r+0x20>
   29d36:	b965      	cbnz	r5, 29d52 <__strtok_r+0x34>
   29d38:	6015      	str	r5, [r2, #0]
   29d3a:	2000      	movs	r0, #0
   29d3c:	e005      	b.n	29d4a <__strtok_r+0x2c>
   29d3e:	42b5      	cmp	r5, r6
   29d40:	d1f6      	bne.n	29d30 <__strtok_r+0x12>
   29d42:	2b00      	cmp	r3, #0
   29d44:	d1f0      	bne.n	29d28 <__strtok_r+0xa>
   29d46:	6014      	str	r4, [r2, #0]
   29d48:	7003      	strb	r3, [r0, #0]
   29d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29d4c:	461c      	mov	r4, r3
   29d4e:	e00c      	b.n	29d6a <__strtok_r+0x4c>
   29d50:	b915      	cbnz	r5, 29d58 <__strtok_r+0x3a>
   29d52:	f814 3b01 	ldrb.w	r3, [r4], #1
   29d56:	460e      	mov	r6, r1
   29d58:	f816 5b01 	ldrb.w	r5, [r6], #1
   29d5c:	42ab      	cmp	r3, r5
   29d5e:	d1f7      	bne.n	29d50 <__strtok_r+0x32>
   29d60:	2b00      	cmp	r3, #0
   29d62:	d0f3      	beq.n	29d4c <__strtok_r+0x2e>
   29d64:	2300      	movs	r3, #0
   29d66:	f804 3c01 	strb.w	r3, [r4, #-1]
   29d6a:	6014      	str	r4, [r2, #0]
   29d6c:	e7ed      	b.n	29d4a <__strtok_r+0x2c>

00029d6e <quorem>:
   29d6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d72:	6903      	ldr	r3, [r0, #16]
   29d74:	4607      	mov	r7, r0
   29d76:	690c      	ldr	r4, [r1, #16]
   29d78:	42a3      	cmp	r3, r4
   29d7a:	f2c0 8083 	blt.w	29e84 <quorem+0x116>
   29d7e:	3c01      	subs	r4, #1
   29d80:	f100 0514 	add.w	r5, r0, #20
   29d84:	f101 0814 	add.w	r8, r1, #20
   29d88:	00a3      	lsls	r3, r4, #2
   29d8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   29d8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   29d92:	9300      	str	r3, [sp, #0]
   29d94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   29d98:	9301      	str	r3, [sp, #4]
   29d9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   29d9e:	3301      	adds	r3, #1
   29da0:	429a      	cmp	r2, r3
   29da2:	fbb2 f6f3 	udiv	r6, r2, r3
   29da6:	d331      	bcc.n	29e0c <quorem+0x9e>
   29da8:	f04f 0a00 	mov.w	sl, #0
   29dac:	46c4      	mov	ip, r8
   29dae:	46ae      	mov	lr, r5
   29db0:	46d3      	mov	fp, sl
   29db2:	f85c 3b04 	ldr.w	r3, [ip], #4
   29db6:	b298      	uxth	r0, r3
   29db8:	45e1      	cmp	r9, ip
   29dba:	ea4f 4313 	mov.w	r3, r3, lsr #16
   29dbe:	fb06 a000 	mla	r0, r6, r0, sl
   29dc2:	ea4f 4210 	mov.w	r2, r0, lsr #16
   29dc6:	b280      	uxth	r0, r0
   29dc8:	fb06 2303 	mla	r3, r6, r3, r2
   29dcc:	f8de 2000 	ldr.w	r2, [lr]
   29dd0:	b292      	uxth	r2, r2
   29dd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   29dd6:	eba2 0200 	sub.w	r2, r2, r0
   29dda:	b29b      	uxth	r3, r3
   29ddc:	f8de 0000 	ldr.w	r0, [lr]
   29de0:	445a      	add	r2, fp
   29de2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   29de6:	b292      	uxth	r2, r2
   29de8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   29dec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   29df0:	ea4f 4b23 	mov.w	fp, r3, asr #16
   29df4:	f84e 2b04 	str.w	r2, [lr], #4
   29df8:	d2db      	bcs.n	29db2 <quorem+0x44>
   29dfa:	9b00      	ldr	r3, [sp, #0]
   29dfc:	58eb      	ldr	r3, [r5, r3]
   29dfe:	b92b      	cbnz	r3, 29e0c <quorem+0x9e>
   29e00:	9b01      	ldr	r3, [sp, #4]
   29e02:	3b04      	subs	r3, #4
   29e04:	429d      	cmp	r5, r3
   29e06:	461a      	mov	r2, r3
   29e08:	d330      	bcc.n	29e6c <quorem+0xfe>
   29e0a:	613c      	str	r4, [r7, #16]
   29e0c:	4638      	mov	r0, r7
   29e0e:	f000 f8cd 	bl	29fac <__mcmp>
   29e12:	2800      	cmp	r0, #0
   29e14:	db26      	blt.n	29e64 <quorem+0xf6>
   29e16:	4629      	mov	r1, r5
   29e18:	2000      	movs	r0, #0
   29e1a:	f858 2b04 	ldr.w	r2, [r8], #4
   29e1e:	f8d1 c000 	ldr.w	ip, [r1]
   29e22:	fa1f fe82 	uxth.w	lr, r2
   29e26:	45c1      	cmp	r9, r8
   29e28:	fa1f f38c 	uxth.w	r3, ip
   29e2c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   29e30:	eba3 030e 	sub.w	r3, r3, lr
   29e34:	4403      	add	r3, r0
   29e36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   29e3a:	b29b      	uxth	r3, r3
   29e3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   29e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   29e44:	ea4f 4022 	mov.w	r0, r2, asr #16
   29e48:	f841 3b04 	str.w	r3, [r1], #4
   29e4c:	d2e5      	bcs.n	29e1a <quorem+0xac>
   29e4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   29e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   29e56:	b922      	cbnz	r2, 29e62 <quorem+0xf4>
   29e58:	3b04      	subs	r3, #4
   29e5a:	429d      	cmp	r5, r3
   29e5c:	461a      	mov	r2, r3
   29e5e:	d30b      	bcc.n	29e78 <quorem+0x10a>
   29e60:	613c      	str	r4, [r7, #16]
   29e62:	3601      	adds	r6, #1
   29e64:	4630      	mov	r0, r6
   29e66:	b003      	add	sp, #12
   29e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e6c:	6812      	ldr	r2, [r2, #0]
   29e6e:	3b04      	subs	r3, #4
   29e70:	2a00      	cmp	r2, #0
   29e72:	d1ca      	bne.n	29e0a <quorem+0x9c>
   29e74:	3c01      	subs	r4, #1
   29e76:	e7c5      	b.n	29e04 <quorem+0x96>
   29e78:	6812      	ldr	r2, [r2, #0]
   29e7a:	3b04      	subs	r3, #4
   29e7c:	2a00      	cmp	r2, #0
   29e7e:	d1ef      	bne.n	29e60 <quorem+0xf2>
   29e80:	3c01      	subs	r4, #1
   29e82:	e7ea      	b.n	29e5a <quorem+0xec>
   29e84:	2000      	movs	r0, #0
   29e86:	e7ee      	b.n	29e66 <quorem+0xf8>

00029e88 <__sfmoreglue>:
   29e88:	b570      	push	{r4, r5, r6, lr}
   29e8a:	2368      	movs	r3, #104	; 0x68
   29e8c:	1e4d      	subs	r5, r1, #1
   29e8e:	460e      	mov	r6, r1
   29e90:	435d      	muls	r5, r3
   29e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
   29e96:	f7f9 f91b 	bl	230d0 <_malloc_r>
   29e9a:	4604      	mov	r4, r0
   29e9c:	b140      	cbz	r0, 29eb0 <__sfmoreglue+0x28>
   29e9e:	2100      	movs	r1, #0
   29ea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
   29ea4:	e9c0 1600 	strd	r1, r6, [r0]
   29ea8:	300c      	adds	r0, #12
   29eaa:	60a0      	str	r0, [r4, #8]
   29eac:	f7ff fdb3 	bl	29a16 <memset>
   29eb0:	4620      	mov	r0, r4
   29eb2:	bd70      	pop	{r4, r5, r6, pc}

00029eb4 <_fwalk_reent>:
   29eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29eb8:	4606      	mov	r6, r0
   29eba:	4688      	mov	r8, r1
   29ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
   29ec0:	2700      	movs	r7, #0
   29ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   29ec6:	f1b9 0901 	subs.w	r9, r9, #1
   29eca:	d505      	bpl.n	29ed8 <_fwalk_reent+0x24>
   29ecc:	6824      	ldr	r4, [r4, #0]
   29ece:	2c00      	cmp	r4, #0
   29ed0:	d1f7      	bne.n	29ec2 <_fwalk_reent+0xe>
   29ed2:	4638      	mov	r0, r7
   29ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29ed8:	89ab      	ldrh	r3, [r5, #12]
   29eda:	2b01      	cmp	r3, #1
   29edc:	d907      	bls.n	29eee <_fwalk_reent+0x3a>
   29ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   29ee2:	3301      	adds	r3, #1
   29ee4:	d003      	beq.n	29eee <_fwalk_reent+0x3a>
   29ee6:	4629      	mov	r1, r5
   29ee8:	4630      	mov	r0, r6
   29eea:	47c0      	blx	r8
   29eec:	4307      	orrs	r7, r0
   29eee:	3568      	adds	r5, #104	; 0x68
   29ef0:	e7e9      	b.n	29ec6 <_fwalk_reent+0x12>

00029ef2 <memchr>:
   29ef2:	b2c9      	uxtb	r1, r1
   29ef4:	4603      	mov	r3, r0
   29ef6:	4402      	add	r2, r0
   29ef8:	b510      	push	{r4, lr}
   29efa:	4293      	cmp	r3, r2
   29efc:	4618      	mov	r0, r3
   29efe:	d101      	bne.n	29f04 <memchr+0x12>
   29f00:	2000      	movs	r0, #0
   29f02:	e003      	b.n	29f0c <memchr+0x1a>
   29f04:	7804      	ldrb	r4, [r0, #0]
   29f06:	3301      	adds	r3, #1
   29f08:	428c      	cmp	r4, r1
   29f0a:	d1f6      	bne.n	29efa <memchr+0x8>
   29f0c:	bd10      	pop	{r4, pc}

00029f0e <__hi0bits>:
   29f0e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   29f12:	4603      	mov	r3, r0
   29f14:	bf36      	itet	cc
   29f16:	0403      	lslcc	r3, r0, #16
   29f18:	2000      	movcs	r0, #0
   29f1a:	2010      	movcc	r0, #16
   29f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   29f20:	bf3c      	itt	cc
   29f22:	021b      	lslcc	r3, r3, #8
   29f24:	3008      	addcc	r0, #8
   29f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   29f2a:	bf3c      	itt	cc
   29f2c:	011b      	lslcc	r3, r3, #4
   29f2e:	3004      	addcc	r0, #4
   29f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   29f34:	d303      	bcc.n	29f3e <__hi0bits+0x30>
   29f36:	2b00      	cmp	r3, #0
   29f38:	db0a      	blt.n	29f50 <__hi0bits+0x42>
   29f3a:	3001      	adds	r0, #1
   29f3c:	4770      	bx	lr
   29f3e:	009b      	lsls	r3, r3, #2
   29f40:	d501      	bpl.n	29f46 <__hi0bits+0x38>
   29f42:	3002      	adds	r0, #2
   29f44:	4770      	bx	lr
   29f46:	005b      	lsls	r3, r3, #1
   29f48:	d501      	bpl.n	29f4e <__hi0bits+0x40>
   29f4a:	3003      	adds	r0, #3
   29f4c:	4770      	bx	lr
   29f4e:	2020      	movs	r0, #32
   29f50:	4770      	bx	lr

00029f52 <__lo0bits>:
   29f52:	6803      	ldr	r3, [r0, #0]
   29f54:	4602      	mov	r2, r0
   29f56:	f013 0007 	ands.w	r0, r3, #7
   29f5a:	d00b      	beq.n	29f74 <__lo0bits+0x22>
   29f5c:	07d9      	lsls	r1, r3, #31
   29f5e:	d421      	bmi.n	29fa4 <__lo0bits+0x52>
   29f60:	0798      	lsls	r0, r3, #30
   29f62:	bf47      	ittee	mi
   29f64:	085b      	lsrmi	r3, r3, #1
   29f66:	2001      	movmi	r0, #1
   29f68:	089b      	lsrpl	r3, r3, #2
   29f6a:	2002      	movpl	r0, #2
   29f6c:	bf4c      	ite	mi
   29f6e:	6013      	strmi	r3, [r2, #0]
   29f70:	6013      	strpl	r3, [r2, #0]
   29f72:	4770      	bx	lr
   29f74:	b299      	uxth	r1, r3
   29f76:	b909      	cbnz	r1, 29f7c <__lo0bits+0x2a>
   29f78:	0c1b      	lsrs	r3, r3, #16
   29f7a:	2010      	movs	r0, #16
   29f7c:	b2d9      	uxtb	r1, r3
   29f7e:	b909      	cbnz	r1, 29f84 <__lo0bits+0x32>
   29f80:	3008      	adds	r0, #8
   29f82:	0a1b      	lsrs	r3, r3, #8
   29f84:	0719      	lsls	r1, r3, #28
   29f86:	bf04      	itt	eq
   29f88:	091b      	lsreq	r3, r3, #4
   29f8a:	3004      	addeq	r0, #4
   29f8c:	0799      	lsls	r1, r3, #30
   29f8e:	bf04      	itt	eq
   29f90:	089b      	lsreq	r3, r3, #2
   29f92:	3002      	addeq	r0, #2
   29f94:	07d9      	lsls	r1, r3, #31
   29f96:	d403      	bmi.n	29fa0 <__lo0bits+0x4e>
   29f98:	085b      	lsrs	r3, r3, #1
   29f9a:	f100 0001 	add.w	r0, r0, #1
   29f9e:	d003      	beq.n	29fa8 <__lo0bits+0x56>
   29fa0:	6013      	str	r3, [r2, #0]
   29fa2:	4770      	bx	lr
   29fa4:	2000      	movs	r0, #0
   29fa6:	4770      	bx	lr
   29fa8:	2020      	movs	r0, #32
   29faa:	4770      	bx	lr

00029fac <__mcmp>:
   29fac:	4603      	mov	r3, r0
   29fae:	690a      	ldr	r2, [r1, #16]
   29fb0:	6900      	ldr	r0, [r0, #16]
   29fb2:	1a80      	subs	r0, r0, r2
   29fb4:	b530      	push	{r4, r5, lr}
   29fb6:	d10e      	bne.n	29fd6 <__mcmp+0x2a>
   29fb8:	3314      	adds	r3, #20
   29fba:	3114      	adds	r1, #20
   29fbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   29fc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   29fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   29fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   29fcc:	4295      	cmp	r5, r2
   29fce:	d003      	beq.n	29fd8 <__mcmp+0x2c>
   29fd0:	d205      	bcs.n	29fde <__mcmp+0x32>
   29fd2:	f04f 30ff 	mov.w	r0, #4294967295
   29fd6:	bd30      	pop	{r4, r5, pc}
   29fd8:	42a3      	cmp	r3, r4
   29fda:	d3f3      	bcc.n	29fc4 <__mcmp+0x18>
   29fdc:	e7fb      	b.n	29fd6 <__mcmp+0x2a>
   29fde:	2001      	movs	r0, #1
   29fe0:	e7f9      	b.n	29fd6 <__mcmp+0x2a>

00029fe2 <__sfputc_r>:
   29fe2:	6893      	ldr	r3, [r2, #8]
   29fe4:	3b01      	subs	r3, #1
   29fe6:	2b00      	cmp	r3, #0
   29fe8:	6093      	str	r3, [r2, #8]
   29fea:	b410      	push	{r4}
   29fec:	da07      	bge.n	29ffe <__sfputc_r+0x1c>
   29fee:	6994      	ldr	r4, [r2, #24]
   29ff0:	42a3      	cmp	r3, r4
   29ff2:	db01      	blt.n	29ff8 <__sfputc_r+0x16>
   29ff4:	290a      	cmp	r1, #10
   29ff6:	d102      	bne.n	29ffe <__sfputc_r+0x1c>
   29ff8:	bc10      	pop	{r4}
   29ffa:	f7fa b9cd 	b.w	24398 <__swbuf_r>
   29ffe:	6813      	ldr	r3, [r2, #0]
   2a000:	1c58      	adds	r0, r3, #1
   2a002:	6010      	str	r0, [r2, #0]
   2a004:	4608      	mov	r0, r1
   2a006:	7019      	strb	r1, [r3, #0]
   2a008:	bc10      	pop	{r4}
   2a00a:	4770      	bx	lr

0002a00c <__sfputs_r>:
   2a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a00e:	4606      	mov	r6, r0
   2a010:	460f      	mov	r7, r1
   2a012:	4614      	mov	r4, r2
   2a014:	18d5      	adds	r5, r2, r3
   2a016:	42ac      	cmp	r4, r5
   2a018:	d101      	bne.n	2a01e <__sfputs_r+0x12>
   2a01a:	2000      	movs	r0, #0
   2a01c:	e007      	b.n	2a02e <__sfputs_r+0x22>
   2a01e:	463a      	mov	r2, r7
   2a020:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a024:	4630      	mov	r0, r6
   2a026:	f7ff ffdc 	bl	29fe2 <__sfputc_r>
   2a02a:	1c43      	adds	r3, r0, #1
   2a02c:	d1f3      	bne.n	2a016 <__sfputs_r+0xa>
   2a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a030 <__sread>:
   2a030:	b510      	push	{r4, lr}
   2a032:	460c      	mov	r4, r1
   2a034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a038:	f7fa fb1c 	bl	24674 <_read_r>
   2a03c:	2800      	cmp	r0, #0
   2a03e:	bfab      	itete	ge
   2a040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2a042:	89a3      	ldrhlt	r3, [r4, #12]
   2a044:	181b      	addge	r3, r3, r0
   2a046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2a04a:	bfac      	ite	ge
   2a04c:	6563      	strge	r3, [r4, #84]	; 0x54
   2a04e:	81a3      	strhlt	r3, [r4, #12]
   2a050:	bd10      	pop	{r4, pc}

0002a052 <__swrite>:
   2a052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a056:	461f      	mov	r7, r3
   2a058:	898b      	ldrh	r3, [r1, #12]
   2a05a:	4605      	mov	r5, r0
   2a05c:	460c      	mov	r4, r1
   2a05e:	05db      	lsls	r3, r3, #23
   2a060:	4616      	mov	r6, r2
   2a062:	d505      	bpl.n	2a070 <__swrite+0x1e>
   2a064:	2302      	movs	r3, #2
   2a066:	2200      	movs	r2, #0
   2a068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a06c:	f7fa fab0 	bl	245d0 <_lseek_r>
   2a070:	89a3      	ldrh	r3, [r4, #12]
   2a072:	4632      	mov	r2, r6
   2a074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2a078:	4628      	mov	r0, r5
   2a07a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2a07e:	81a3      	strh	r3, [r4, #12]
   2a080:	463b      	mov	r3, r7
   2a082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a086:	f7fa b9d9 	b.w	2443c <_write_r>

0002a08a <__sseek>:
   2a08a:	b510      	push	{r4, lr}
   2a08c:	460c      	mov	r4, r1
   2a08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a092:	f7fa fa9d 	bl	245d0 <_lseek_r>
   2a096:	1c43      	adds	r3, r0, #1
   2a098:	89a3      	ldrh	r3, [r4, #12]
   2a09a:	bf15      	itete	ne
   2a09c:	6560      	strne	r0, [r4, #84]	; 0x54
   2a09e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2a0a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2a0a6:	81a3      	strheq	r3, [r4, #12]
   2a0a8:	bf18      	it	ne
   2a0aa:	81a3      	strhne	r3, [r4, #12]
   2a0ac:	bd10      	pop	{r4, pc}

0002a0ae <__sclose>:
   2a0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a0b2:	f7fa ba41 	b.w	24538 <_close_r>

0002a0b6 <abort>:
   2a0b6:	2006      	movs	r0, #6
   2a0b8:	b508      	push	{r3, lr}
   2a0ba:	f7fa faed 	bl	24698 <raise>
   2a0be:	2001      	movs	r0, #1
   2a0c0:	f7e7 f816 	bl	110f0 <_exit>

0002a0c4 <__sflush_r>:
   2a0c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a0ca:	0717      	lsls	r7, r2, #28
   2a0cc:	4605      	mov	r5, r0
   2a0ce:	460c      	mov	r4, r1
   2a0d0:	d456      	bmi.n	2a180 <__sflush_r+0xbc>
   2a0d2:	684b      	ldr	r3, [r1, #4]
   2a0d4:	2b00      	cmp	r3, #0
   2a0d6:	dc02      	bgt.n	2a0de <__sflush_r+0x1a>
   2a0d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2a0da:	2b00      	cmp	r3, #0
   2a0dc:	dd3d      	ble.n	2a15a <__sflush_r+0x96>
   2a0de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2a0e0:	2e00      	cmp	r6, #0
   2a0e2:	d03a      	beq.n	2a15a <__sflush_r+0x96>
   2a0e4:	2300      	movs	r3, #0
   2a0e6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2a0ea:	682f      	ldr	r7, [r5, #0]
   2a0ec:	6a21      	ldr	r1, [r4, #32]
   2a0ee:	602b      	str	r3, [r5, #0]
   2a0f0:	d025      	beq.n	2a13e <__sflush_r+0x7a>
   2a0f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2a0f4:	89a3      	ldrh	r3, [r4, #12]
   2a0f6:	0758      	lsls	r0, r3, #29
   2a0f8:	d505      	bpl.n	2a106 <__sflush_r+0x42>
   2a0fa:	6863      	ldr	r3, [r4, #4]
   2a0fc:	1ad2      	subs	r2, r2, r3
   2a0fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a100:	b10b      	cbz	r3, 2a106 <__sflush_r+0x42>
   2a102:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2a104:	1ad2      	subs	r2, r2, r3
   2a106:	6a21      	ldr	r1, [r4, #32]
   2a108:	2300      	movs	r3, #0
   2a10a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2a10c:	4628      	mov	r0, r5
   2a10e:	47b0      	blx	r6
   2a110:	1c41      	adds	r1, r0, #1
   2a112:	d024      	beq.n	2a15e <__sflush_r+0x9a>
   2a114:	2300      	movs	r3, #0
   2a116:	6063      	str	r3, [r4, #4]
   2a118:	6923      	ldr	r3, [r4, #16]
   2a11a:	6023      	str	r3, [r4, #0]
   2a11c:	89a3      	ldrh	r3, [r4, #12]
   2a11e:	04da      	lsls	r2, r3, #19
   2a120:	d500      	bpl.n	2a124 <__sflush_r+0x60>
   2a122:	6560      	str	r0, [r4, #84]	; 0x54
   2a124:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2a126:	602f      	str	r7, [r5, #0]
   2a128:	b1b9      	cbz	r1, 2a15a <__sflush_r+0x96>
   2a12a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2a12e:	4299      	cmp	r1, r3
   2a130:	d002      	beq.n	2a138 <__sflush_r+0x74>
   2a132:	4628      	mov	r0, r5
   2a134:	f7f8 ff82 	bl	2303c <_free_r>
   2a138:	2300      	movs	r3, #0
   2a13a:	6363      	str	r3, [r4, #52]	; 0x34
   2a13c:	e00d      	b.n	2a15a <__sflush_r+0x96>
   2a13e:	2301      	movs	r3, #1
   2a140:	4628      	mov	r0, r5
   2a142:	47b0      	blx	r6
   2a144:	1c46      	adds	r6, r0, #1
   2a146:	4602      	mov	r2, r0
   2a148:	d1d4      	bne.n	2a0f4 <__sflush_r+0x30>
   2a14a:	682b      	ldr	r3, [r5, #0]
   2a14c:	2b00      	cmp	r3, #0
   2a14e:	d0d1      	beq.n	2a0f4 <__sflush_r+0x30>
   2a150:	2b1d      	cmp	r3, #29
   2a152:	d001      	beq.n	2a158 <__sflush_r+0x94>
   2a154:	2b16      	cmp	r3, #22
   2a156:	d129      	bne.n	2a1ac <__sflush_r+0xe8>
   2a158:	602f      	str	r7, [r5, #0]
   2a15a:	2000      	movs	r0, #0
   2a15c:	e02d      	b.n	2a1ba <__sflush_r+0xf6>
   2a15e:	682a      	ldr	r2, [r5, #0]
   2a160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a164:	b142      	cbz	r2, 2a178 <__sflush_r+0xb4>
   2a166:	2a1d      	cmp	r2, #29
   2a168:	d001      	beq.n	2a16e <__sflush_r+0xaa>
   2a16a:	2a16      	cmp	r2, #22
   2a16c:	d120      	bne.n	2a1b0 <__sflush_r+0xec>
   2a16e:	2300      	movs	r3, #0
   2a170:	6063      	str	r3, [r4, #4]
   2a172:	6923      	ldr	r3, [r4, #16]
   2a174:	6023      	str	r3, [r4, #0]
   2a176:	e7d5      	b.n	2a124 <__sflush_r+0x60>
   2a178:	6062      	str	r2, [r4, #4]
   2a17a:	6922      	ldr	r2, [r4, #16]
   2a17c:	6022      	str	r2, [r4, #0]
   2a17e:	e7ce      	b.n	2a11e <__sflush_r+0x5a>
   2a180:	690f      	ldr	r7, [r1, #16]
   2a182:	2f00      	cmp	r7, #0
   2a184:	d0e9      	beq.n	2a15a <__sflush_r+0x96>
   2a186:	0793      	lsls	r3, r2, #30
   2a188:	680e      	ldr	r6, [r1, #0]
   2a18a:	600f      	str	r7, [r1, #0]
   2a18c:	bf0c      	ite	eq
   2a18e:	694b      	ldreq	r3, [r1, #20]
   2a190:	2300      	movne	r3, #0
   2a192:	1bf6      	subs	r6, r6, r7
   2a194:	608b      	str	r3, [r1, #8]
   2a196:	2e00      	cmp	r6, #0
   2a198:	dddf      	ble.n	2a15a <__sflush_r+0x96>
   2a19a:	4633      	mov	r3, r6
   2a19c:	463a      	mov	r2, r7
   2a19e:	6a21      	ldr	r1, [r4, #32]
   2a1a0:	4628      	mov	r0, r5
   2a1a2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   2a1a6:	47e0      	blx	ip
   2a1a8:	2800      	cmp	r0, #0
   2a1aa:	dc07      	bgt.n	2a1bc <__sflush_r+0xf8>
   2a1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a1b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a1b4:	f04f 30ff 	mov.w	r0, #4294967295
   2a1b8:	81a3      	strh	r3, [r4, #12]
   2a1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a1bc:	4407      	add	r7, r0
   2a1be:	1a36      	subs	r6, r6, r0
   2a1c0:	e7e9      	b.n	2a196 <__sflush_r+0xd2>

0002a1c2 <__swhatbuf_r>:
   2a1c2:	b570      	push	{r4, r5, r6, lr}
   2a1c4:	460c      	mov	r4, r1
   2a1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2a1ca:	b096      	sub	sp, #88	; 0x58
   2a1cc:	4615      	mov	r5, r2
   2a1ce:	2900      	cmp	r1, #0
   2a1d0:	461e      	mov	r6, r3
   2a1d2:	da0c      	bge.n	2a1ee <__swhatbuf_r+0x2c>
   2a1d4:	89a3      	ldrh	r3, [r4, #12]
   2a1d6:	2100      	movs	r1, #0
   2a1d8:	f013 0f80 	tst.w	r3, #128	; 0x80
   2a1dc:	bf14      	ite	ne
   2a1de:	2340      	movne	r3, #64	; 0x40
   2a1e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   2a1e4:	2000      	movs	r0, #0
   2a1e6:	6031      	str	r1, [r6, #0]
   2a1e8:	602b      	str	r3, [r5, #0]
   2a1ea:	b016      	add	sp, #88	; 0x58
   2a1ec:	bd70      	pop	{r4, r5, r6, pc}
   2a1ee:	466a      	mov	r2, sp
   2a1f0:	f7fa fa6c 	bl	246cc <_fstat_r>
   2a1f4:	2800      	cmp	r0, #0
   2a1f6:	dbed      	blt.n	2a1d4 <__swhatbuf_r+0x12>
   2a1f8:	9901      	ldr	r1, [sp, #4]
   2a1fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   2a1fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   2a202:	4259      	negs	r1, r3
   2a204:	4159      	adcs	r1, r3
   2a206:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2a20a:	e7eb      	b.n	2a1e4 <__swhatbuf_r+0x22>

0002a20c <__ascii_mbtowc>:
   2a20c:	b082      	sub	sp, #8
   2a20e:	b901      	cbnz	r1, 2a212 <__ascii_mbtowc+0x6>
   2a210:	a901      	add	r1, sp, #4
   2a212:	b142      	cbz	r2, 2a226 <__ascii_mbtowc+0x1a>
   2a214:	b14b      	cbz	r3, 2a22a <__ascii_mbtowc+0x1e>
   2a216:	7813      	ldrb	r3, [r2, #0]
   2a218:	600b      	str	r3, [r1, #0]
   2a21a:	7812      	ldrb	r2, [r2, #0]
   2a21c:	1e10      	subs	r0, r2, #0
   2a21e:	bf18      	it	ne
   2a220:	2001      	movne	r0, #1
   2a222:	b002      	add	sp, #8
   2a224:	4770      	bx	lr
   2a226:	4610      	mov	r0, r2
   2a228:	e7fb      	b.n	2a222 <__ascii_mbtowc+0x16>
   2a22a:	f06f 0001 	mvn.w	r0, #1
   2a22e:	e7f8      	b.n	2a222 <__ascii_mbtowc+0x16>

0002a230 <_raise_r>:
   2a230:	291f      	cmp	r1, #31
   2a232:	b538      	push	{r3, r4, r5, lr}
   2a234:	4605      	mov	r5, r0
   2a236:	460c      	mov	r4, r1
   2a238:	d904      	bls.n	2a244 <_raise_r+0x14>
   2a23a:	2316      	movs	r3, #22
   2a23c:	6003      	str	r3, [r0, #0]
   2a23e:	f04f 30ff 	mov.w	r0, #4294967295
   2a242:	bd38      	pop	{r3, r4, r5, pc}
   2a244:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2a246:	b112      	cbz	r2, 2a24e <_raise_r+0x1e>
   2a248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2a24c:	b94b      	cbnz	r3, 2a262 <_raise_r+0x32>
   2a24e:	4628      	mov	r0, r5
   2a250:	f000 f816 	bl	2a280 <_getpid_r>
   2a254:	4622      	mov	r2, r4
   2a256:	4601      	mov	r1, r0
   2a258:	4628      	mov	r0, r5
   2a25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a25e:	f7fa ba23 	b.w	246a8 <_kill_r>
   2a262:	2b01      	cmp	r3, #1
   2a264:	d00a      	beq.n	2a27c <_raise_r+0x4c>
   2a266:	1c59      	adds	r1, r3, #1
   2a268:	d103      	bne.n	2a272 <_raise_r+0x42>
   2a26a:	2316      	movs	r3, #22
   2a26c:	6003      	str	r3, [r0, #0]
   2a26e:	2001      	movs	r0, #1
   2a270:	e7e7      	b.n	2a242 <_raise_r+0x12>
   2a272:	2100      	movs	r1, #0
   2a274:	4620      	mov	r0, r4
   2a276:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   2a27a:	4798      	blx	r3
   2a27c:	2000      	movs	r0, #0
   2a27e:	e7e0      	b.n	2a242 <_raise_r+0x12>

0002a280 <_getpid_r>:
   2a280:	f7fb bed7 	b.w	26032 <_getpid>

0002a284 <__ascii_wctomb>:
   2a284:	4603      	mov	r3, r0
   2a286:	4608      	mov	r0, r1
   2a288:	b141      	cbz	r1, 2a29c <__ascii_wctomb+0x18>
   2a28a:	2aff      	cmp	r2, #255	; 0xff
   2a28c:	d904      	bls.n	2a298 <__ascii_wctomb+0x14>
   2a28e:	228a      	movs	r2, #138	; 0x8a
   2a290:	f04f 30ff 	mov.w	r0, #4294967295
   2a294:	601a      	str	r2, [r3, #0]
   2a296:	4770      	bx	lr
   2a298:	2001      	movs	r0, #1
   2a29a:	700a      	strb	r2, [r1, #0]
   2a29c:	4770      	bx	lr
	...
