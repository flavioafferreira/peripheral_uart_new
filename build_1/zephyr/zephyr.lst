
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	f8 34 03 20 05 0a 01 00 ab 5d 02 00 d9 09 01 00     .4. .....]......
    8010:	d9 09 01 00 d9 09 01 00 d9 09 01 00 d9 09 01 00     ................
	...
    802c:	bd 02 01 00 d9 09 01 00 00 00 00 00 5d 02 01 00     ............]...
    803c:	d9 09 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8050:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8060:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8070:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8080:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8090:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    80a0:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    80b0:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    80c0:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    80d0:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    80e0:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    80f0:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8100:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8110:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8120:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8130:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8140:	45 03 01 00 45 03 01 00 45 03 01 00 45 03 01 00     E...E...E...E...
    8150:	45 03 01 00                                         E...

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b857 	b.w	8f20 <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f915 	bl	90b0 <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f908 	bl	90b0 <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f8f7 	bl	90b0 <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f8e9 	bl	90b0 <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b80c 	b.w	8f20 <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f8ce 	bl	90b0 <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_idiv0>:
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop

00008f24 <__gedf2>:
    8f24:	f04f 3cff 	mov.w	ip, #4294967295
    8f28:	e006      	b.n	8f38 <__cmpdf2+0x4>
    8f2a:	bf00      	nop

00008f2c <__ledf2>:
    8f2c:	f04f 0c01 	mov.w	ip, #1
    8f30:	e002      	b.n	8f38 <__cmpdf2+0x4>
    8f32:	bf00      	nop

00008f34 <__cmpdf2>:
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f48:	bf18      	it	ne
    8f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f4e:	d01b      	beq.n	8f88 <__cmpdf2+0x54>
    8f50:	b001      	add	sp, #4
    8f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f56:	bf0c      	ite	eq
    8f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f5c:	ea91 0f03 	teqne	r1, r3
    8f60:	bf02      	ittt	eq
    8f62:	ea90 0f02 	teqeq	r0, r2
    8f66:	2000      	moveq	r0, #0
    8f68:	4770      	bxeq	lr
    8f6a:	f110 0f00 	cmn.w	r0, #0
    8f6e:	ea91 0f03 	teq	r1, r3
    8f72:	bf58      	it	pl
    8f74:	4299      	cmppl	r1, r3
    8f76:	bf08      	it	eq
    8f78:	4290      	cmpeq	r0, r2
    8f7a:	bf2c      	ite	cs
    8f7c:	17d8      	asrcs	r0, r3, #31
    8f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f82:	f040 0001 	orr.w	r0, r0, #1
    8f86:	4770      	bx	lr
    8f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f90:	d102      	bne.n	8f98 <__cmpdf2+0x64>
    8f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f96:	d107      	bne.n	8fa8 <__cmpdf2+0x74>
    8f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fa0:	d1d6      	bne.n	8f50 <__cmpdf2+0x1c>
    8fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fa6:	d0d3      	beq.n	8f50 <__cmpdf2+0x1c>
    8fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__aeabi_cdrcmple>:
    8fb0:	4684      	mov	ip, r0
    8fb2:	4610      	mov	r0, r2
    8fb4:	4662      	mov	r2, ip
    8fb6:	468c      	mov	ip, r1
    8fb8:	4619      	mov	r1, r3
    8fba:	4663      	mov	r3, ip
    8fbc:	e000      	b.n	8fc0 <__aeabi_cdcmpeq>
    8fbe:	bf00      	nop

00008fc0 <__aeabi_cdcmpeq>:
    8fc0:	b501      	push	{r0, lr}
    8fc2:	f7ff ffb7 	bl	8f34 <__cmpdf2>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf48      	it	mi
    8fca:	f110 0f00 	cmnmi.w	r0, #0
    8fce:	bd01      	pop	{r0, pc}

00008fd0 <__aeabi_dcmpeq>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff fff4 	bl	8fc0 <__aeabi_cdcmpeq>
    8fd8:	bf0c      	ite	eq
    8fda:	2001      	moveq	r0, #1
    8fdc:	2000      	movne	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmplt>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffea 	bl	8fc0 <__aeabi_cdcmpeq>
    8fec:	bf34      	ite	cc
    8fee:	2001      	movcc	r0, #1
    8ff0:	2000      	movcs	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmple>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffe0 	bl	8fc0 <__aeabi_cdcmpeq>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpge>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffce 	bl	8fb0 <__aeabi_cdrcmple>
    9014:	bf94      	ite	ls
    9016:	2001      	movls	r0, #1
    9018:	2000      	movhi	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpgt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffc4 	bl	8fb0 <__aeabi_cdrcmple>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__udivmoddi4>:
    90b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90b4:	4686      	mov	lr, r0
    90b6:	468c      	mov	ip, r1
    90b8:	4608      	mov	r0, r1
    90ba:	9e08      	ldr	r6, [sp, #32]
    90bc:	4615      	mov	r5, r2
    90be:	4674      	mov	r4, lr
    90c0:	4619      	mov	r1, r3
    90c2:	2b00      	cmp	r3, #0
    90c4:	f040 80c1 	bne.w	924a <__udivmoddi4+0x19a>
    90c8:	4285      	cmp	r5, r0
    90ca:	fab2 f282 	clz	r2, r2
    90ce:	d945      	bls.n	915c <__udivmoddi4+0xac>
    90d0:	b14a      	cbz	r2, 90e6 <__udivmoddi4+0x36>
    90d2:	f1c2 0320 	rsb	r3, r2, #32
    90d6:	fa00 fc02 	lsl.w	ip, r0, r2
    90da:	4095      	lsls	r5, r2
    90dc:	4094      	lsls	r4, r2
    90de:	fa2e f303 	lsr.w	r3, lr, r3
    90e2:	ea43 0c0c 	orr.w	ip, r3, ip
    90e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    90ea:	b2a8      	uxth	r0, r5
    90ec:	0c23      	lsrs	r3, r4, #16
    90ee:	fbbc f8fe 	udiv	r8, ip, lr
    90f2:	fb0e cc18 	mls	ip, lr, r8, ip
    90f6:	fb08 f900 	mul.w	r9, r8, r0
    90fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    90fe:	4599      	cmp	r9, r3
    9100:	d928      	bls.n	9154 <__udivmoddi4+0xa4>
    9102:	18eb      	adds	r3, r5, r3
    9104:	f108 37ff 	add.w	r7, r8, #4294967295
    9108:	d204      	bcs.n	9114 <__udivmoddi4+0x64>
    910a:	4599      	cmp	r9, r3
    910c:	d902      	bls.n	9114 <__udivmoddi4+0x64>
    910e:	f1a8 0702 	sub.w	r7, r8, #2
    9112:	442b      	add	r3, r5
    9114:	eba3 0309 	sub.w	r3, r3, r9
    9118:	b2a4      	uxth	r4, r4
    911a:	fbb3 fcfe 	udiv	ip, r3, lr
    911e:	fb0e 331c 	mls	r3, lr, ip, r3
    9122:	fb0c f000 	mul.w	r0, ip, r0
    9126:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    912a:	42a0      	cmp	r0, r4
    912c:	d914      	bls.n	9158 <__udivmoddi4+0xa8>
    912e:	192c      	adds	r4, r5, r4
    9130:	f10c 33ff 	add.w	r3, ip, #4294967295
    9134:	d204      	bcs.n	9140 <__udivmoddi4+0x90>
    9136:	42a0      	cmp	r0, r4
    9138:	d902      	bls.n	9140 <__udivmoddi4+0x90>
    913a:	f1ac 0302 	sub.w	r3, ip, #2
    913e:	442c      	add	r4, r5
    9140:	1a24      	subs	r4, r4, r0
    9142:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9146:	b11e      	cbz	r6, 9150 <__udivmoddi4+0xa0>
    9148:	40d4      	lsrs	r4, r2
    914a:	2300      	movs	r3, #0
    914c:	6034      	str	r4, [r6, #0]
    914e:	6073      	str	r3, [r6, #4]
    9150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9154:	4647      	mov	r7, r8
    9156:	e7dd      	b.n	9114 <__udivmoddi4+0x64>
    9158:	4663      	mov	r3, ip
    915a:	e7f1      	b.n	9140 <__udivmoddi4+0x90>
    915c:	bb92      	cbnz	r2, 91c4 <__udivmoddi4+0x114>
    915e:	1b43      	subs	r3, r0, r5
    9160:	2101      	movs	r1, #1
    9162:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9166:	b2af      	uxth	r7, r5
    9168:	0c20      	lsrs	r0, r4, #16
    916a:	fbb3 fcfe 	udiv	ip, r3, lr
    916e:	fb0e 331c 	mls	r3, lr, ip, r3
    9172:	fb0c f807 	mul.w	r8, ip, r7
    9176:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    917a:	4598      	cmp	r8, r3
    917c:	d961      	bls.n	9242 <__udivmoddi4+0x192>
    917e:	18eb      	adds	r3, r5, r3
    9180:	f10c 30ff 	add.w	r0, ip, #4294967295
    9184:	d204      	bcs.n	9190 <__udivmoddi4+0xe0>
    9186:	4598      	cmp	r8, r3
    9188:	d902      	bls.n	9190 <__udivmoddi4+0xe0>
    918a:	f1ac 0002 	sub.w	r0, ip, #2
    918e:	442b      	add	r3, r5
    9190:	eba3 0308 	sub.w	r3, r3, r8
    9194:	b2a4      	uxth	r4, r4
    9196:	fbb3 fcfe 	udiv	ip, r3, lr
    919a:	fb0e 331c 	mls	r3, lr, ip, r3
    919e:	fb0c f707 	mul.w	r7, ip, r7
    91a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91a6:	42a7      	cmp	r7, r4
    91a8:	d94d      	bls.n	9246 <__udivmoddi4+0x196>
    91aa:	192c      	adds	r4, r5, r4
    91ac:	f10c 33ff 	add.w	r3, ip, #4294967295
    91b0:	d204      	bcs.n	91bc <__udivmoddi4+0x10c>
    91b2:	42a7      	cmp	r7, r4
    91b4:	d902      	bls.n	91bc <__udivmoddi4+0x10c>
    91b6:	f1ac 0302 	sub.w	r3, ip, #2
    91ba:	442c      	add	r4, r5
    91bc:	1be4      	subs	r4, r4, r7
    91be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91c2:	e7c0      	b.n	9146 <__udivmoddi4+0x96>
    91c4:	f1c2 0320 	rsb	r3, r2, #32
    91c8:	4095      	lsls	r5, r2
    91ca:	4094      	lsls	r4, r2
    91cc:	fa20 f103 	lsr.w	r1, r0, r3
    91d0:	fa2e f303 	lsr.w	r3, lr, r3
    91d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91d8:	4090      	lsls	r0, r2
    91da:	b2af      	uxth	r7, r5
    91dc:	4303      	orrs	r3, r0
    91de:	fbb1 fcfe 	udiv	ip, r1, lr
    91e2:	fb0e 101c 	mls	r0, lr, ip, r1
    91e6:	0c19      	lsrs	r1, r3, #16
    91e8:	fb0c f807 	mul.w	r8, ip, r7
    91ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91f0:	4588      	cmp	r8, r1
    91f2:	d922      	bls.n	923a <__udivmoddi4+0x18a>
    91f4:	1869      	adds	r1, r5, r1
    91f6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91fa:	d204      	bcs.n	9206 <__udivmoddi4+0x156>
    91fc:	4588      	cmp	r8, r1
    91fe:	d902      	bls.n	9206 <__udivmoddi4+0x156>
    9200:	f1ac 0002 	sub.w	r0, ip, #2
    9204:	4429      	add	r1, r5
    9206:	eba1 0108 	sub.w	r1, r1, r8
    920a:	b29b      	uxth	r3, r3
    920c:	fbb1 fcfe 	udiv	ip, r1, lr
    9210:	fb0e 111c 	mls	r1, lr, ip, r1
    9214:	fb0c f707 	mul.w	r7, ip, r7
    9218:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    921c:	429f      	cmp	r7, r3
    921e:	d90e      	bls.n	923e <__udivmoddi4+0x18e>
    9220:	18eb      	adds	r3, r5, r3
    9222:	f10c 31ff 	add.w	r1, ip, #4294967295
    9226:	d204      	bcs.n	9232 <__udivmoddi4+0x182>
    9228:	429f      	cmp	r7, r3
    922a:	d902      	bls.n	9232 <__udivmoddi4+0x182>
    922c:	f1ac 0102 	sub.w	r1, ip, #2
    9230:	442b      	add	r3, r5
    9232:	1bdb      	subs	r3, r3, r7
    9234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9238:	e793      	b.n	9162 <__udivmoddi4+0xb2>
    923a:	4660      	mov	r0, ip
    923c:	e7e3      	b.n	9206 <__udivmoddi4+0x156>
    923e:	4661      	mov	r1, ip
    9240:	e7f7      	b.n	9232 <__udivmoddi4+0x182>
    9242:	4660      	mov	r0, ip
    9244:	e7a4      	b.n	9190 <__udivmoddi4+0xe0>
    9246:	4663      	mov	r3, ip
    9248:	e7b8      	b.n	91bc <__udivmoddi4+0x10c>
    924a:	4283      	cmp	r3, r0
    924c:	d906      	bls.n	925c <__udivmoddi4+0x1ac>
    924e:	b916      	cbnz	r6, 9256 <__udivmoddi4+0x1a6>
    9250:	2100      	movs	r1, #0
    9252:	4608      	mov	r0, r1
    9254:	e77c      	b.n	9150 <__udivmoddi4+0xa0>
    9256:	e9c6 e000 	strd	lr, r0, [r6]
    925a:	e7f9      	b.n	9250 <__udivmoddi4+0x1a0>
    925c:	fab3 f783 	clz	r7, r3
    9260:	b98f      	cbnz	r7, 9286 <__udivmoddi4+0x1d6>
    9262:	4283      	cmp	r3, r0
    9264:	d301      	bcc.n	926a <__udivmoddi4+0x1ba>
    9266:	4572      	cmp	r2, lr
    9268:	d808      	bhi.n	927c <__udivmoddi4+0x1cc>
    926a:	ebbe 0402 	subs.w	r4, lr, r2
    926e:	eb60 0303 	sbc.w	r3, r0, r3
    9272:	2001      	movs	r0, #1
    9274:	469c      	mov	ip, r3
    9276:	b91e      	cbnz	r6, 9280 <__udivmoddi4+0x1d0>
    9278:	2100      	movs	r1, #0
    927a:	e769      	b.n	9150 <__udivmoddi4+0xa0>
    927c:	4638      	mov	r0, r7
    927e:	e7fa      	b.n	9276 <__udivmoddi4+0x1c6>
    9280:	e9c6 4c00 	strd	r4, ip, [r6]
    9284:	e7f8      	b.n	9278 <__udivmoddi4+0x1c8>
    9286:	f1c7 0c20 	rsb	ip, r7, #32
    928a:	40bb      	lsls	r3, r7
    928c:	fa0e f507 	lsl.w	r5, lr, r7
    9290:	fa22 f40c 	lsr.w	r4, r2, ip
    9294:	fa2e f10c 	lsr.w	r1, lr, ip
    9298:	40ba      	lsls	r2, r7
    929a:	431c      	orrs	r4, r3
    929c:	fa20 f30c 	lsr.w	r3, r0, ip
    92a0:	40b8      	lsls	r0, r7
    92a2:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92a6:	4301      	orrs	r1, r0
    92a8:	fa1f fe84 	uxth.w	lr, r4
    92ac:	fbb3 f8f9 	udiv	r8, r3, r9
    92b0:	fb09 3018 	mls	r0, r9, r8, r3
    92b4:	0c0b      	lsrs	r3, r1, #16
    92b6:	fb08 fa0e 	mul.w	sl, r8, lr
    92ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92be:	459a      	cmp	sl, r3
    92c0:	d940      	bls.n	9344 <__udivmoddi4+0x294>
    92c2:	18e3      	adds	r3, r4, r3
    92c4:	f108 30ff 	add.w	r0, r8, #4294967295
    92c8:	d204      	bcs.n	92d4 <__udivmoddi4+0x224>
    92ca:	459a      	cmp	sl, r3
    92cc:	d902      	bls.n	92d4 <__udivmoddi4+0x224>
    92ce:	f1a8 0002 	sub.w	r0, r8, #2
    92d2:	4423      	add	r3, r4
    92d4:	eba3 030a 	sub.w	r3, r3, sl
    92d8:	b289      	uxth	r1, r1
    92da:	fbb3 f8f9 	udiv	r8, r3, r9
    92de:	fb09 3318 	mls	r3, r9, r8, r3
    92e2:	fb08 fe0e 	mul.w	lr, r8, lr
    92e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    92ea:	458e      	cmp	lr, r1
    92ec:	d92c      	bls.n	9348 <__udivmoddi4+0x298>
    92ee:	1861      	adds	r1, r4, r1
    92f0:	f108 33ff 	add.w	r3, r8, #4294967295
    92f4:	d204      	bcs.n	9300 <__udivmoddi4+0x250>
    92f6:	458e      	cmp	lr, r1
    92f8:	d902      	bls.n	9300 <__udivmoddi4+0x250>
    92fa:	f1a8 0302 	sub.w	r3, r8, #2
    92fe:	4421      	add	r1, r4
    9300:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9304:	eba1 010e 	sub.w	r1, r1, lr
    9308:	fba0 9802 	umull	r9, r8, r0, r2
    930c:	4541      	cmp	r1, r8
    930e:	46ce      	mov	lr, r9
    9310:	4643      	mov	r3, r8
    9312:	d302      	bcc.n	931a <__udivmoddi4+0x26a>
    9314:	d106      	bne.n	9324 <__udivmoddi4+0x274>
    9316:	454d      	cmp	r5, r9
    9318:	d204      	bcs.n	9324 <__udivmoddi4+0x274>
    931a:	3801      	subs	r0, #1
    931c:	ebb9 0e02 	subs.w	lr, r9, r2
    9320:	eb68 0304 	sbc.w	r3, r8, r4
    9324:	2e00      	cmp	r6, #0
    9326:	d0a7      	beq.n	9278 <__udivmoddi4+0x1c8>
    9328:	ebb5 020e 	subs.w	r2, r5, lr
    932c:	eb61 0103 	sbc.w	r1, r1, r3
    9330:	fa01 fc0c 	lsl.w	ip, r1, ip
    9334:	fa22 f307 	lsr.w	r3, r2, r7
    9338:	40f9      	lsrs	r1, r7
    933a:	ea4c 0303 	orr.w	r3, ip, r3
    933e:	e9c6 3100 	strd	r3, r1, [r6]
    9342:	e799      	b.n	9278 <__udivmoddi4+0x1c8>
    9344:	4640      	mov	r0, r8
    9346:	e7c5      	b.n	92d4 <__udivmoddi4+0x224>
    9348:	4643      	mov	r3, r8
    934a:	e7d9      	b.n	9300 <__udivmoddi4+0x250>

0000934c <strcmp>:
    934c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9350:	f811 3b01 	ldrb.w	r3, [r1], #1
    9354:	2a01      	cmp	r2, #1
    9356:	bf28      	it	cs
    9358:	429a      	cmpcs	r2, r3
    935a:	d0f7      	beq.n	934c <strcmp>
    935c:	1ad0      	subs	r0, r2, r3
    935e:	4770      	bx	lr

00009360 <strlen>:
    9360:	4603      	mov	r3, r0
    9362:	f813 2b01 	ldrb.w	r2, [r3], #1
    9366:	2a00      	cmp	r2, #0
    9368:	d1fb      	bne.n	9362 <strlen+0x2>
    936a:	1a18      	subs	r0, r3, r0
    936c:	3801      	subs	r0, #1
    936e:	4770      	bx	lr

00009370 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9372:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9374:	f7ff f842 	bl	83fc <__aeabi_i2d>
    9378:	a325      	add	r3, pc, #148	; (adr r3, 9410 <ntc_temperature+0xa0>)
    937a:	e9d3 2300 	ldrd	r2, r3, [r3]
    937e:	f7ff f8a7 	bl	84d0 <__aeabi_dmul>
    9382:	f7ff fab7 	bl	88f4 <__aeabi_d2f>
    9386:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9388:	1e63      	subs	r3, r4, #1
    938a:	b2db      	uxtb	r3, r3
    938c:	2b02      	cmp	r3, #2
    938e:	bf96      	itet	ls
    9390:	4a27      	ldrls	r2, [pc, #156]	; (9430 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9392:	2000      	movhi	r0, #0
    9394:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9398:	4629      	mov	r1, r5
    939a:	f7ff fc09 	bl	8bb0 <__aeabi_fmul>
    939e:	f7ff f83f 	bl	8420 <__aeabi_f2d>
    93a2:	4606      	mov	r6, r0
    93a4:	4628      	mov	r0, r5
    93a6:	460f      	mov	r7, r1
    93a8:	f7ff f83a 	bl	8420 <__aeabi_f2d>
    93ac:	4602      	mov	r2, r0
    93ae:	460b      	mov	r3, r1
    93b0:	2000      	movs	r0, #0
    93b2:	4920      	ldr	r1, [pc, #128]	; (9434 <ntc_temperature+0xc4>)
    93b4:	f7fe fed4 	bl	8160 <__aeabi_dsub>
    93b8:	4602      	mov	r2, r0
    93ba:	460b      	mov	r3, r1
    93bc:	4630      	mov	r0, r6
    93be:	4639      	mov	r1, r7
    93c0:	f7ff f9b0 	bl	8724 <__aeabi_ddiv>
    93c4:	f7ff fa96 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    93c8:	491b      	ldr	r1, [pc, #108]	; (9438 <ntc_temperature+0xc8>)
    93ca:	f7ff fca5 	bl	8d18 <__aeabi_fdiv>
    93ce:	f7ff f827 	bl	8420 <__aeabi_f2d>
    93d2:	f019 fd65 	bl	22ea0 <log>
    93d6:	a310      	add	r3, pc, #64	; (adr r3, 9418 <ntc_temperature+0xa8>)
    93d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    93dc:	f7ff f9a2 	bl	8724 <__aeabi_ddiv>
    93e0:	a30f      	add	r3, pc, #60	; (adr r3, 9420 <ntc_temperature+0xb0>)
    93e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    93e6:	f7fe febd 	bl	8164 <__adddf3>
    93ea:	4602      	mov	r2, r0
    93ec:	460b      	mov	r3, r1
    93ee:	2000      	movs	r0, #0
    93f0:	4912      	ldr	r1, [pc, #72]	; (943c <ntc_temperature+0xcc>)
    93f2:	f7ff f997 	bl	8724 <__aeabi_ddiv>
    93f6:	f7ff fa7d 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    93fa:	f7ff f811 	bl	8420 <__aeabi_f2d>
    93fe:	a30a      	add	r3, pc, #40	; (adr r3, 9428 <ntc_temperature+0xb8>)
    9400:	e9d3 2300 	ldrd	r2, r3, [r3]
    9404:	f7fe feac 	bl	8160 <__aeabi_dsub>
    9408:	f7ff fa74 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    940e:	bf00      	nop
    9410:	3a66a002 	.word	0x3a66a002
    9414:	3f2ccdb3 	.word	0x3f2ccdb3
    9418:	00000000 	.word	0x00000000
    941c:	40af0200 	.word	0x40af0200
    9420:	dcb5db83 	.word	0xdcb5db83
    9424:	3f6b79e1 	.word	0x3f6b79e1
    9428:	66666666 	.word	0x66666666
    942c:	40711266 	.word	0x40711266
    9430:	0002aaf0 	.word	0x0002aaf0
    9434:	40080000 	.word	0x40080000
    9438:	461c4000 	.word	0x461c4000
    943c:	3ff00000 	.word	0x3ff00000

00009440 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9440:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9442:	4d64      	ldr	r5, [pc, #400]	; (95d4 <bt_init+0x194>)
{
    9444:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9446:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    944a:	6899      	ldr	r1, [r3, #8]
    944c:	f011 0101 	ands.w	r1, r1, #1
    9450:	d11a      	bne.n	9488 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9452:	f640 4003 	movw	r0, #3075	; 0xc03
    9456:	aa05      	add	r2, sp, #20
    9458:	f008 fbc0 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
    945c:	4604      	mov	r4, r0
    945e:	2800      	cmp	r0, #0
    9460:	f040 80b5 	bne.w	95ce <bt_init+0x18e>
		hci_reset_complete(rsp);
    9464:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9466:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9468:	781b      	ldrb	r3, [r3, #0]
    946a:	b95b      	cbnz	r3, 9484 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    946c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9470:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9474:	f002 0209 	and.w	r2, r2, #9
    9478:	e8d3 1fef 	ldaex	r1, [r3]
    947c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9480:	2c00      	cmp	r4, #0
    9482:	d1f9      	bne.n	9478 <bt_init+0x38>
		net_buf_unref(rsp);
    9484:	f00f ff78 	bl	19378 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9488:	2100      	movs	r1, #0
    948a:	f241 0003 	movw	r0, #4099	; 0x1003
    948e:	aa05      	add	r2, sp, #20
    9490:	f008 fba4 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    9494:	4604      	mov	r4, r0
    9496:	2800      	cmp	r0, #0
    9498:	f040 8099 	bne.w	95ce <bt_init+0x18e>
	read_local_features_complete(rsp);
    949c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    949e:	4e4e      	ldr	r6, [pc, #312]	; (95d8 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94a0:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94a2:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94a6:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94aa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94ac:	4618      	mov	r0, r3
    94ae:	f00f ff63 	bl	19378 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    94b2:	4621      	mov	r1, r4
    94b4:	f241 0001 	movw	r0, #4097	; 0x1001
    94b8:	aa05      	add	r2, sp, #20
    94ba:	f008 fb8f 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    94be:	4604      	mov	r4, r0
    94c0:	2800      	cmp	r0, #0
    94c2:	f040 8084 	bne.w	95ce <bt_init+0x18e>
	read_local_ver_complete(rsp);
    94c6:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    94c8:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    94ca:	785a      	ldrb	r2, [r3, #1]
    94cc:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    94d0:	885a      	ldrh	r2, [r3, #2]
    94d2:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    94d6:	791a      	ldrb	r2, [r3, #4]
    94d8:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    94dc:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    94e0:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    94e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    94e8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    94ec:	f00f ff44 	bl	19378 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    94f0:	4621      	mov	r1, r4
    94f2:	f241 0002 	movw	r0, #4098	; 0x1002
    94f6:	aa05      	add	r2, sp, #20
    94f8:	f008 fb70 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    94fc:	4604      	mov	r4, r0
    94fe:	2800      	cmp	r0, #0
    9500:	d165      	bne.n	95ce <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    9502:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    9504:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    9506:	1c53      	adds	r3, r2, #1
    9508:	3241      	adds	r2, #65	; 0x41
    950a:	4634      	mov	r4, r6
    950c:	6818      	ldr	r0, [r3, #0]
    950e:	6859      	ldr	r1, [r3, #4]
    9510:	3308      	adds	r3, #8
    9512:	c403      	stmia	r4!, {r0, r1}
    9514:	4293      	cmp	r3, r2
    9516:	4626      	mov	r6, r4
    9518:	d1f7      	bne.n	950a <bt_init+0xca>
	net_buf_unref(rsp);
    951a:	4638      	mov	r0, r7
    951c:	f00f ff2c 	bl	19378 <net_buf_unref>
		err = prng_init();
    9520:	f00a f980 	bl	13824 <prng_init>
		if (err) {
    9524:	4604      	mov	r4, r0
    9526:	2800      	cmp	r0, #0
    9528:	d151      	bne.n	95ce <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    952a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    952e:	f013 0320 	ands.w	r3, r3, #32
    9532:	d118      	bne.n	9566 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    9534:	4a29      	ldr	r2, [pc, #164]	; (95dc <bt_init+0x19c>)
    9536:	492a      	ldr	r1, [pc, #168]	; (95e0 <bt_init+0x1a0>)
    9538:	e9cd 3201 	strd	r3, r2, [sp, #4]
    953c:	9300      	str	r3, [sp, #0]
    953e:	2202      	movs	r2, #2
    9540:	f01c fd6b 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9544:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    9548:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    954c:	d14c      	bne.n	95e8 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    954e:	4a25      	ldr	r2, [pc, #148]	; (95e4 <bt_init+0x1a4>)
    9550:	4618      	mov	r0, r3
    9552:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9556:	4922      	ldr	r1, [pc, #136]	; (95e0 <bt_init+0x1a0>)
    9558:	2201      	movs	r2, #1
    955a:	9300      	str	r3, [sp, #0]
    955c:	f01c fd5d 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9560:	f06f 0412 	mvn.w	r4, #18
    9564:	e033      	b.n	95ce <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9566:	2107      	movs	r1, #7
    9568:	f640 4033 	movw	r0, #3123	; 0xc33
    956c:	f008 fae8 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
    9570:	4606      	mov	r6, r0
    9572:	2800      	cmp	r0, #0
    9574:	f000 8140 	beq.w	97f8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9578:	2107      	movs	r1, #7
    957a:	300c      	adds	r0, #12
    957c:	f010 f81e 	bl	195bc <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9580:	2345      	movs	r3, #69	; 0x45
    9582:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9584:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9586:	f8c0 4002 	str.w	r4, [r0, #2]
    958a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    958c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    958e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9590:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9592:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9594:	4631      	mov	r1, r6
    9596:	f640 4033 	movw	r0, #3123	; 0xc33
    959a:	f008 fb1f 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    959e:	4604      	mov	r4, r0
    95a0:	b9a8      	cbnz	r0, 95ce <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95a2:	2101      	movs	r1, #1
    95a4:	f640 4031 	movw	r0, #3121	; 0xc31
    95a8:	f008 faca 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
    95ac:	4606      	mov	r6, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	f000 8122 	beq.w	97f8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    95b4:	2101      	movs	r1, #1
    95b6:	300c      	adds	r0, #12
    95b8:	f01e fbab 	bl	27d12 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    95bc:	4622      	mov	r2, r4
    95be:	4631      	mov	r1, r6
    95c0:	f640 4031 	movw	r0, #3121	; 0xc31
    95c4:	f008 fb0a 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    95c8:	4604      	mov	r4, r0
    95ca:	2800      	cmp	r0, #0
    95cc:	d0ba      	beq.n	9544 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    95ce:	4620      	mov	r0, r4
    95d0:	b007      	add	sp, #28
    95d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95d4:	20008000 	.word	0x20008000
    95d8:	20008070 	.word	0x20008070
    95dc:	0002dc17 	.word	0x0002dc17
    95e0:	0002a740 	.word	0x0002a740
    95e4:	0002dc45 	.word	0x0002dc45
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    95e8:	2100      	movs	r1, #0
    95ea:	f242 0003 	movw	r0, #8195	; 0x2003
    95ee:	aa05      	add	r2, sp, #20
    95f0:	f008 faf4 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    95f4:	4604      	mov	r4, r0
    95f6:	2800      	cmp	r0, #0
    95f8:	d1e9      	bne.n	95ce <bt_init+0x18e>
	read_le_features_complete(rsp);
    95fa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    95fc:	4ebe      	ldr	r6, [pc, #760]	; (98f8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    95fe:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9600:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9604:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9608:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    960a:	4618      	mov	r0, r3
    960c:	f00f feb4 	bl	19378 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9610:	4621      	mov	r1, r4
    9612:	f242 0002 	movw	r0, #8194	; 0x2002
    9616:	aa05      	add	r2, sp, #20
    9618:	f008 fae0 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
    961c:	4604      	mov	r4, r0
    961e:	2800      	cmp	r0, #0
    9620:	d1d5      	bne.n	95ce <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    9622:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9624:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9626:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    962a:	b291      	uxth	r1, r2
    962c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    9630:	b129      	cbz	r1, 963e <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9632:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9634:	4611      	mov	r1, r2
    9636:	f106 0028 	add.w	r0, r6, #40	; 0x28
    963a:	f01f ff22 	bl	29482 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    963e:	4620      	mov	r0, r4
    9640:	f00f fe9a 	bl	19378 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9644:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    9648:	f016 0620 	ands.w	r6, r6, #32
    964c:	d118      	bne.n	9680 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    964e:	2102      	movs	r1, #2
    9650:	f640 406d 	movw	r0, #3181	; 0xc6d
    9654:	f008 fa74 	bl	11b40 <bt_hci_cmd_create>
		if (!buf) {
    9658:	4604      	mov	r4, r0
    965a:	2800      	cmp	r0, #0
    965c:	f000 80cc 	beq.w	97f8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9660:	2102      	movs	r1, #2
    9662:	300c      	adds	r0, #12
    9664:	f00f ffaa 	bl	195bc <net_buf_simple_add>
		cp_le->le = 0x01;
    9668:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    966a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    966c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    966e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9670:	4632      	mov	r2, r6
    9672:	f640 406d 	movw	r0, #3181	; 0xc6d
    9676:	f008 fab1 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
    967a:	4604      	mov	r4, r0
    967c:	2800      	cmp	r0, #0
    967e:	d1a6      	bne.n	95ce <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9680:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9684:	071f      	lsls	r7, r3, #28
    9686:	d512      	bpl.n	96ae <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9688:	2100      	movs	r1, #0
    968a:	f242 001c 	movw	r0, #8220	; 0x201c
    968e:	aa05      	add	r2, sp, #20
    9690:	f008 faa4 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
    9694:	4604      	mov	r4, r0
    9696:	2800      	cmp	r0, #0
    9698:	d199      	bne.n	95ce <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    969a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    969c:	68c3      	ldr	r3, [r0, #12]
    969e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96a2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96a6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96aa:	f00f fe65 	bl	19378 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    96ae:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    96b2:	069e      	lsls	r6, r3, #26
    96b4:	d524      	bpl.n	9700 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    96b6:	f10d 0112 	add.w	r1, sp, #18
    96ba:	a804      	add	r0, sp, #16
    96bc:	f008 fb04 	bl	11cc8 <hci_le_read_max_data_len>
		if (err) {
    96c0:	4604      	mov	r4, r0
    96c2:	2800      	cmp	r0, #0
    96c4:	d183      	bne.n	95ce <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96c6:	2104      	movs	r1, #4
    96c8:	f242 0024 	movw	r0, #8228	; 0x2024
    96cc:	f008 fa38 	bl	11b40 <bt_hci_cmd_create>
		if (!buf) {
    96d0:	4606      	mov	r6, r0
    96d2:	2800      	cmp	r0, #0
    96d4:	f000 8090 	beq.w	97f8 <bt_init+0x3b8>
    96d8:	2104      	movs	r1, #4
    96da:	300c      	adds	r0, #12
    96dc:	f00f ff6e 	bl	195bc <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96e4:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96ec:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96ee:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f0:	f242 0024 	movw	r0, #8228	; 0x2024
    96f4:	f008 fa72 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
    96f8:	4604      	mov	r4, r0
    96fa:	2800      	cmp	r0, #0
    96fc:	f47f af67 	bne.w	95ce <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9700:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9704:	065c      	lsls	r4, r3, #25
    9706:	d510      	bpl.n	972a <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9708:	2100      	movs	r1, #0
    970a:	f242 002a 	movw	r0, #8234	; 0x202a
    970e:	aa05      	add	r2, sp, #20
    9710:	f008 fa64 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
    9714:	4604      	mov	r4, r0
    9716:	2800      	cmp	r0, #0
    9718:	f47f af59 	bne.w	95ce <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    971c:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    971e:	68c3      	ldr	r3, [r0, #12]
    9720:	785b      	ldrb	r3, [r3, #1]
    9722:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    9726:	f00f fe27 	bl	19378 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    972a:	2108      	movs	r1, #8
    972c:	f242 0001 	movw	r0, #8193	; 0x2001
    9730:	f008 fa06 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
    9734:	4604      	mov	r4, r0
    9736:	2800      	cmp	r0, #0
    9738:	d05e      	beq.n	97f8 <bt_init+0x3b8>
    973a:	2108      	movs	r1, #8
    973c:	300c      	adds	r0, #12
    973e:	f00f ff3d 	bl	195bc <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    9742:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9746:	f240 2302 	movw	r3, #514	; 0x202
    974a:	f011 0f40 	tst.w	r1, #64	; 0x40
    974e:	bf08      	it	eq
    9750:	2303      	moveq	r3, #3
    9752:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9754:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9756:	bf4c      	ite	mi
    9758:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    975c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9760:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9762:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9766:	bf48      	it	mi
    9768:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    976c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9770:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9774:	bf18      	it	ne
    9776:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    977a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    977e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9780:	bf48      	it	mi
    9782:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9786:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9788:	bf08      	it	eq
    978a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    978e:	2100      	movs	r1, #0
    9790:	f01c fc5a 	bl	26048 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9794:	4621      	mov	r1, r4
    9796:	2200      	movs	r2, #0
    9798:	f242 0001 	movw	r0, #8193	; 0x2001
    979c:	f008 fa1e 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    97a0:	4604      	mov	r4, r0
    97a2:	2800      	cmp	r0, #0
    97a4:	f47f af13 	bne.w	95ce <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    97ac:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97b0:	069e      	lsls	r6, r3, #26
    97b2:	d424      	bmi.n	97fe <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    97b4:	b9c9      	cbnz	r1, 97ea <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    97b6:	f241 0005 	movw	r0, #4101	; 0x1005
    97ba:	aa05      	add	r2, sp, #20
    97bc:	f008 fa0e 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    97c0:	4604      	mov	r4, r0
    97c2:	2800      	cmp	r0, #0
    97c4:	f47f af03 	bne.w	95ce <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    97c8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    97cc:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    97ce:	b94b      	cbnz	r3, 97e4 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    97d0:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    97d2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    97d6:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    97da:	889a      	ldrh	r2, [r3, #4]
    97dc:	4847      	ldr	r0, [pc, #284]	; (98fc <bt_init+0x4bc>)
    97de:	4611      	mov	r1, r2
    97e0:	f01f fe4f 	bl	29482 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    97e4:	4620      	mov	r0, r4
    97e6:	f00f fdc7 	bl	19378 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    97ea:	2108      	movs	r1, #8
    97ec:	f640 4001 	movw	r0, #3073	; 0xc01
    97f0:	f008 f9a6 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
    97f4:	4604      	mov	r4, r0
    97f6:	b980      	cbnz	r0, 981a <bt_init+0x3da>
		return -ENOBUFS;
    97f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    97fc:	e6e7      	b.n	95ce <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    97fe:	2900      	cmp	r1, #0
    9800:	d1f3      	bne.n	97ea <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9802:	4b3f      	ldr	r3, [pc, #252]	; (9900 <bt_init+0x4c0>)
    9804:	2201      	movs	r2, #1
    9806:	e9cd 0301 	strd	r0, r3, [sp, #4]
    980a:	493e      	ldr	r1, [pc, #248]	; (9904 <bt_init+0x4c4>)
    980c:	4603      	mov	r3, r0
    980e:	9000      	str	r0, [sp, #0]
    9810:	f01c fc03 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    9814:	f06f 0404 	mvn.w	r4, #4
    9818:	e6d9      	b.n	95ce <bt_init+0x18e>
    981a:	2108      	movs	r1, #8
    981c:	300c      	adds	r0, #12
    981e:	f00f fecd 	bl	195bc <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9822:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9826:	4602      	mov	r2, r0
    9828:	07d9      	lsls	r1, r3, #31
    982a:	d41c      	bmi.n	9866 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    982c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    9830:	4835      	ldr	r0, [pc, #212]	; (9908 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    9832:	f01c fc09 	bl	26048 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9836:	4621      	mov	r1, r4
    9838:	2200      	movs	r2, #0
    983a:	f640 4001 	movw	r0, #3073	; 0xc01
    983e:	f008 f9cd 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    9842:	4604      	mov	r4, r0
    9844:	2800      	cmp	r0, #0
    9846:	f47f aec2 	bne.w	95ce <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    984a:	4601      	mov	r1, r0
    984c:	aa05      	add	r2, sp, #20
    984e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9852:	f008 f9c3 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    9856:	4606      	mov	r6, r0
    9858:	b148      	cbz	r0, 986e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    985a:	4b2c      	ldr	r3, [pc, #176]	; (990c <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    985c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9860:	9400      	str	r4, [sp, #0]
    9862:	4623      	mov	r3, r4
    9864:	e013      	b.n	988e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9866:	a122      	add	r1, pc, #136	; (adr r1, 98f0 <bt_init+0x4b0>)
    9868:	e9d1 0100 	ldrd	r0, r1, [r1]
    986c:	e7e1      	b.n	9832 <bt_init+0x3f2>
	net_buf_unref(rsp);
    986e:	9805      	ldr	r0, [sp, #20]
    9870:	f00f fd82 	bl	19378 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9874:	4631      	mov	r1, r6
    9876:	f64f 4002 	movw	r0, #64514	; 0xfc02
    987a:	aa05      	add	r2, sp, #20
    987c:	f008 f9ae 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
    9880:	4604      	mov	r4, r0
    9882:	b1c0      	cbz	r0, 98b6 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9884:	4b22      	ldr	r3, [pc, #136]	; (9910 <bt_init+0x4d0>)
    9886:	9600      	str	r6, [sp, #0]
    9888:	e9cd 6301 	strd	r6, r3, [sp, #4]
    988c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    988e:	2202      	movs	r2, #2
    9890:	4618      	mov	r0, r3
    9892:	491c      	ldr	r1, [pc, #112]	; (9904 <bt_init+0x4c4>)
    9894:	f01c fbc1 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9898:	f009 fc44 	bl	13124 <bt_id_init>
	if (err) {
    989c:	4604      	mov	r4, r0
    989e:	2800      	cmp	r0, #0
    98a0:	f47f ae95 	bne.w	95ce <bt_init+0x18e>
		err = bt_conn_init();
    98a4:	f00b f924 	bl	14af0 <bt_conn_init>
		if (err) {
    98a8:	4604      	mov	r4, r0
    98aa:	2800      	cmp	r0, #0
    98ac:	f47f ae8f 	bne.w	95ce <bt_init+0x18e>
	bt_finalize_init();
    98b0:	f008 ff88 	bl	127c4 <bt_finalize_init>
	return 0;
    98b4:	e68b      	b.n	95ce <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    98b6:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    98b8:	68c3      	ldr	r3, [r0, #12]
    98ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    98be:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    98c2:	f00f fd59 	bl	19378 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    98c6:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    98ca:	075b      	lsls	r3, r3, #29
    98cc:	d5e4      	bpl.n	9898 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    98ce:	4621      	mov	r1, r4
    98d0:	f64f 4003 	movw	r0, #64515	; 0xfc03
    98d4:	aa05      	add	r2, sp, #20
    98d6:	f008 f981 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
    98da:	b108      	cbz	r0, 98e0 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    98dc:	4b0d      	ldr	r3, [pc, #52]	; (9914 <bt_init+0x4d4>)
    98de:	e7bd      	b.n	985c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    98e0:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    98e2:	68c3      	ldr	r3, [r0, #12]
    98e4:	785b      	ldrb	r3, [r3, #1]
    98e6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    98ea:	f00f fd45 	bl	19378 <net_buf_unref>
    98ee:	e7d3      	b.n	9898 <bt_init+0x458>
    98f0:	02008890 	.word	0x02008890
    98f4:	20008000 	.word	0x20008000
    98f8:	200080d0 	.word	0x200080d0
    98fc:	20008100 	.word	0x20008100
    9900:	0002dc69 	.word	0x0002dc69
    9904:	0002a740 	.word	0x0002a740
    9908:	02008810 	.word	0x02008810
    990c:	0002dc8c 	.word	0x0002dc8c
    9910:	0002dcb0 	.word	0x0002dcb0
    9914:	0002dcd9 	.word	0x0002dcd9

00009918 <__ieee754_log>:
    9918:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    991c:	4602      	mov	r2, r0
    991e:	460b      	mov	r3, r1
    9920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9924:	460d      	mov	r5, r1
    9926:	b087      	sub	sp, #28
    9928:	da24      	bge.n	9974 <__ieee754_log+0x5c>
    992a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    992e:	4304      	orrs	r4, r0
    9930:	d108      	bne.n	9944 <__ieee754_log+0x2c>
    9932:	2200      	movs	r2, #0
    9934:	2300      	movs	r3, #0
    9936:	2000      	movs	r0, #0
    9938:	49c9      	ldr	r1, [pc, #804]	; (9c60 <__ieee754_log+0x348>)
    993a:	f7fe fef3 	bl	8724 <__aeabi_ddiv>
    993e:	b007      	add	sp, #28
    9940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9944:	2900      	cmp	r1, #0
    9946:	da04      	bge.n	9952 <__ieee754_log+0x3a>
    9948:	f7fe fc0a 	bl	8160 <__aeabi_dsub>
    994c:	2200      	movs	r2, #0
    994e:	2300      	movs	r3, #0
    9950:	e7f3      	b.n	993a <__ieee754_log+0x22>
    9952:	2200      	movs	r2, #0
    9954:	4bc3      	ldr	r3, [pc, #780]	; (9c64 <__ieee754_log+0x34c>)
    9956:	f7fe fdbb 	bl	84d0 <__aeabi_dmul>
    995a:	460b      	mov	r3, r1
    995c:	460d      	mov	r5, r1
    995e:	4602      	mov	r2, r0
    9960:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9964:	48c0      	ldr	r0, [pc, #768]	; (9c68 <__ieee754_log+0x350>)
    9966:	4285      	cmp	r5, r0
    9968:	dd06      	ble.n	9978 <__ieee754_log+0x60>
    996a:	4610      	mov	r0, r2
    996c:	4619      	mov	r1, r3
    996e:	f7fe fbf9 	bl	8164 <__adddf3>
    9972:	e7e4      	b.n	993e <__ieee754_log+0x26>
    9974:	2100      	movs	r1, #0
    9976:	e7f5      	b.n	9964 <__ieee754_log+0x4c>
    9978:	152c      	asrs	r4, r5, #20
    997a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    997e:	4610      	mov	r0, r2
    9980:	2200      	movs	r2, #0
    9982:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9986:	440c      	add	r4, r1
    9988:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    998c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9990:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9994:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9998:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    999c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    99a0:	ea41 0305 	orr.w	r3, r1, r5
    99a4:	4619      	mov	r1, r3
    99a6:	4bb1      	ldr	r3, [pc, #708]	; (9c6c <__ieee754_log+0x354>)
    99a8:	f7fe fbda 	bl	8160 <__aeabi_dsub>
    99ac:	1cab      	adds	r3, r5, #2
    99ae:	4682      	mov	sl, r0
    99b0:	468b      	mov	fp, r1
    99b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    99b6:	2200      	movs	r2, #0
    99b8:	2b02      	cmp	r3, #2
    99ba:	dc53      	bgt.n	9a64 <__ieee754_log+0x14c>
    99bc:	2300      	movs	r3, #0
    99be:	f7ff fb07 	bl	8fd0 <__aeabi_dcmpeq>
    99c2:	b1d0      	cbz	r0, 99fa <__ieee754_log+0xe2>
    99c4:	2c00      	cmp	r4, #0
    99c6:	f000 8120 	beq.w	9c0a <__ieee754_log+0x2f2>
    99ca:	4620      	mov	r0, r4
    99cc:	f7fe fd16 	bl	83fc <__aeabi_i2d>
    99d0:	4606      	mov	r6, r0
    99d2:	460f      	mov	r7, r1
    99d4:	a38e      	add	r3, pc, #568	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    99d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    99da:	f7fe fd79 	bl	84d0 <__aeabi_dmul>
    99de:	4604      	mov	r4, r0
    99e0:	460d      	mov	r5, r1
    99e2:	4630      	mov	r0, r6
    99e4:	4639      	mov	r1, r7
    99e6:	a38c      	add	r3, pc, #560	; (adr r3, 9c18 <__ieee754_log+0x300>)
    99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ec:	f7fe fd70 	bl	84d0 <__aeabi_dmul>
    99f0:	4602      	mov	r2, r0
    99f2:	460b      	mov	r3, r1
    99f4:	4620      	mov	r0, r4
    99f6:	4629      	mov	r1, r5
    99f8:	e7b9      	b.n	996e <__ieee754_log+0x56>
    99fa:	a389      	add	r3, pc, #548	; (adr r3, 9c20 <__ieee754_log+0x308>)
    99fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a00:	4650      	mov	r0, sl
    9a02:	4659      	mov	r1, fp
    9a04:	f7fe fd64 	bl	84d0 <__aeabi_dmul>
    9a08:	4602      	mov	r2, r0
    9a0a:	460b      	mov	r3, r1
    9a0c:	2000      	movs	r0, #0
    9a0e:	4998      	ldr	r1, [pc, #608]	; (9c70 <__ieee754_log+0x358>)
    9a10:	f7fe fba6 	bl	8160 <__aeabi_dsub>
    9a14:	4606      	mov	r6, r0
    9a16:	460f      	mov	r7, r1
    9a18:	4652      	mov	r2, sl
    9a1a:	465b      	mov	r3, fp
    9a1c:	4650      	mov	r0, sl
    9a1e:	4659      	mov	r1, fp
    9a20:	f7fe fd56 	bl	84d0 <__aeabi_dmul>
    9a24:	4602      	mov	r2, r0
    9a26:	460b      	mov	r3, r1
    9a28:	4630      	mov	r0, r6
    9a2a:	4639      	mov	r1, r7
    9a2c:	f7fe fd50 	bl	84d0 <__aeabi_dmul>
    9a30:	4606      	mov	r6, r0
    9a32:	460f      	mov	r7, r1
    9a34:	b914      	cbnz	r4, 9a3c <__ieee754_log+0x124>
    9a36:	4632      	mov	r2, r6
    9a38:	463b      	mov	r3, r7
    9a3a:	e0a0      	b.n	9b7e <__ieee754_log+0x266>
    9a3c:	4620      	mov	r0, r4
    9a3e:	f7fe fcdd 	bl	83fc <__aeabi_i2d>
    9a42:	4680      	mov	r8, r0
    9a44:	4689      	mov	r9, r1
    9a46:	a372      	add	r3, pc, #456	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9a48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a4c:	f7fe fd40 	bl	84d0 <__aeabi_dmul>
    9a50:	4604      	mov	r4, r0
    9a52:	460d      	mov	r5, r1
    9a54:	4640      	mov	r0, r8
    9a56:	4649      	mov	r1, r9
    9a58:	a36f      	add	r3, pc, #444	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a5e:	f7fe fd37 	bl	84d0 <__aeabi_dmul>
    9a62:	e0a5      	b.n	9bb0 <__ieee754_log+0x298>
    9a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a68:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9a6c:	f7fe fb7a 	bl	8164 <__adddf3>
    9a70:	4602      	mov	r2, r0
    9a72:	460b      	mov	r3, r1
    9a74:	4650      	mov	r0, sl
    9a76:	4659      	mov	r1, fp
    9a78:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9a7c:	f7fe fe52 	bl	8724 <__aeabi_ddiv>
    9a80:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9a84:	3551      	adds	r5, #81	; 0x51
    9a86:	e9cd 0100 	strd	r0, r1, [sp]
    9a8a:	4620      	mov	r0, r4
    9a8c:	4335      	orrs	r5, r6
    9a8e:	f7fe fcb5 	bl	83fc <__aeabi_i2d>
    9a92:	e9dd 2300 	ldrd	r2, r3, [sp]
    9a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9a9a:	4610      	mov	r0, r2
    9a9c:	4619      	mov	r1, r3
    9a9e:	f7fe fd17 	bl	84d0 <__aeabi_dmul>
    9aa2:	4602      	mov	r2, r0
    9aa4:	460b      	mov	r3, r1
    9aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9aaa:	f7fe fd11 	bl	84d0 <__aeabi_dmul>
    9aae:	4680      	mov	r8, r0
    9ab0:	4689      	mov	r9, r1
    9ab2:	a35d      	add	r3, pc, #372	; (adr r3, 9c28 <__ieee754_log+0x310>)
    9ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ab8:	f7fe fd0a 	bl	84d0 <__aeabi_dmul>
    9abc:	a35c      	add	r3, pc, #368	; (adr r3, 9c30 <__ieee754_log+0x318>)
    9abe:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ac2:	f7fe fb4f 	bl	8164 <__adddf3>
    9ac6:	4642      	mov	r2, r8
    9ac8:	464b      	mov	r3, r9
    9aca:	f7fe fd01 	bl	84d0 <__aeabi_dmul>
    9ace:	a35a      	add	r3, pc, #360	; (adr r3, 9c38 <__ieee754_log+0x320>)
    9ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ad4:	f7fe fb46 	bl	8164 <__adddf3>
    9ad8:	4642      	mov	r2, r8
    9ada:	464b      	mov	r3, r9
    9adc:	f7fe fcf8 	bl	84d0 <__aeabi_dmul>
    9ae0:	a357      	add	r3, pc, #348	; (adr r3, 9c40 <__ieee754_log+0x328>)
    9ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ae6:	f7fe fb3d 	bl	8164 <__adddf3>
    9aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9aee:	f7fe fcef 	bl	84d0 <__aeabi_dmul>
    9af2:	a355      	add	r3, pc, #340	; (adr r3, 9c48 <__ieee754_log+0x330>)
    9af4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9afc:	4640      	mov	r0, r8
    9afe:	4649      	mov	r1, r9
    9b00:	f7fe fce6 	bl	84d0 <__aeabi_dmul>
    9b04:	a352      	add	r3, pc, #328	; (adr r3, 9c50 <__ieee754_log+0x338>)
    9b06:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b0a:	f7fe fb2b 	bl	8164 <__adddf3>
    9b0e:	4642      	mov	r2, r8
    9b10:	464b      	mov	r3, r9
    9b12:	f7fe fcdd 	bl	84d0 <__aeabi_dmul>
    9b16:	a350      	add	r3, pc, #320	; (adr r3, 9c58 <__ieee754_log+0x340>)
    9b18:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b1c:	f7fe fb22 	bl	8164 <__adddf3>
    9b20:	4642      	mov	r2, r8
    9b22:	464b      	mov	r3, r9
    9b24:	f7fe fcd4 	bl	84d0 <__aeabi_dmul>
    9b28:	4602      	mov	r2, r0
    9b2a:	460b      	mov	r3, r1
    9b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9b30:	f7fe fb18 	bl	8164 <__adddf3>
    9b34:	2d00      	cmp	r5, #0
    9b36:	4680      	mov	r8, r0
    9b38:	4689      	mov	r9, r1
    9b3a:	dd48      	ble.n	9bce <__ieee754_log+0x2b6>
    9b3c:	2200      	movs	r2, #0
    9b3e:	4b4c      	ldr	r3, [pc, #304]	; (9c70 <__ieee754_log+0x358>)
    9b40:	4650      	mov	r0, sl
    9b42:	4659      	mov	r1, fp
    9b44:	f7fe fcc4 	bl	84d0 <__aeabi_dmul>
    9b48:	4652      	mov	r2, sl
    9b4a:	465b      	mov	r3, fp
    9b4c:	f7fe fcc0 	bl	84d0 <__aeabi_dmul>
    9b50:	4602      	mov	r2, r0
    9b52:	460b      	mov	r3, r1
    9b54:	4606      	mov	r6, r0
    9b56:	460f      	mov	r7, r1
    9b58:	4640      	mov	r0, r8
    9b5a:	4649      	mov	r1, r9
    9b5c:	f7fe fb02 	bl	8164 <__adddf3>
    9b60:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b64:	f7fe fcb4 	bl	84d0 <__aeabi_dmul>
    9b68:	4680      	mov	r8, r0
    9b6a:	4689      	mov	r9, r1
    9b6c:	b964      	cbnz	r4, 9b88 <__ieee754_log+0x270>
    9b6e:	4602      	mov	r2, r0
    9b70:	460b      	mov	r3, r1
    9b72:	4630      	mov	r0, r6
    9b74:	4639      	mov	r1, r7
    9b76:	f7fe faf3 	bl	8160 <__aeabi_dsub>
    9b7a:	4602      	mov	r2, r0
    9b7c:	460b      	mov	r3, r1
    9b7e:	4650      	mov	r0, sl
    9b80:	4659      	mov	r1, fp
    9b82:	f7fe faed 	bl	8160 <__aeabi_dsub>
    9b86:	e6da      	b.n	993e <__ieee754_log+0x26>
    9b88:	a321      	add	r3, pc, #132	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9b92:	f7fe fc9d 	bl	84d0 <__aeabi_dmul>
    9b96:	4604      	mov	r4, r0
    9b98:	460d      	mov	r5, r1
    9b9a:	a31f      	add	r3, pc, #124	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9ba4:	f7fe fc94 	bl	84d0 <__aeabi_dmul>
    9ba8:	4642      	mov	r2, r8
    9baa:	464b      	mov	r3, r9
    9bac:	f7fe fada 	bl	8164 <__adddf3>
    9bb0:	4602      	mov	r2, r0
    9bb2:	460b      	mov	r3, r1
    9bb4:	4630      	mov	r0, r6
    9bb6:	4639      	mov	r1, r7
    9bb8:	f7fe fad2 	bl	8160 <__aeabi_dsub>
    9bbc:	4652      	mov	r2, sl
    9bbe:	465b      	mov	r3, fp
    9bc0:	f7fe face 	bl	8160 <__aeabi_dsub>
    9bc4:	4602      	mov	r2, r0
    9bc6:	460b      	mov	r3, r1
    9bc8:	4620      	mov	r0, r4
    9bca:	4629      	mov	r1, r5
    9bcc:	e7d9      	b.n	9b82 <__ieee754_log+0x26a>
    9bce:	4602      	mov	r2, r0
    9bd0:	460b      	mov	r3, r1
    9bd2:	4650      	mov	r0, sl
    9bd4:	4659      	mov	r1, fp
    9bd6:	f7fe fac3 	bl	8160 <__aeabi_dsub>
    9bda:	e9dd 2300 	ldrd	r2, r3, [sp]
    9bde:	f7fe fc77 	bl	84d0 <__aeabi_dmul>
    9be2:	4606      	mov	r6, r0
    9be4:	460f      	mov	r7, r1
    9be6:	2c00      	cmp	r4, #0
    9be8:	f43f af25 	beq.w	9a36 <__ieee754_log+0x11e>
    9bec:	a308      	add	r3, pc, #32	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9bee:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bf6:	f7fe fc6b 	bl	84d0 <__aeabi_dmul>
    9bfa:	4604      	mov	r4, r0
    9bfc:	460d      	mov	r5, r1
    9bfe:	a306      	add	r3, pc, #24	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9c00:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c08:	e729      	b.n	9a5e <__ieee754_log+0x146>
    9c0a:	2000      	movs	r0, #0
    9c0c:	2100      	movs	r1, #0
    9c0e:	e696      	b.n	993e <__ieee754_log+0x26>
    9c10:	fee00000 	.word	0xfee00000
    9c14:	3fe62e42 	.word	0x3fe62e42
    9c18:	35793c76 	.word	0x35793c76
    9c1c:	3dea39ef 	.word	0x3dea39ef
    9c20:	55555555 	.word	0x55555555
    9c24:	3fd55555 	.word	0x3fd55555
    9c28:	df3e5244 	.word	0xdf3e5244
    9c2c:	3fc2f112 	.word	0x3fc2f112
    9c30:	96cb03de 	.word	0x96cb03de
    9c34:	3fc74664 	.word	0x3fc74664
    9c38:	94229359 	.word	0x94229359
    9c3c:	3fd24924 	.word	0x3fd24924
    9c40:	55555593 	.word	0x55555593
    9c44:	3fe55555 	.word	0x3fe55555
    9c48:	d078c69f 	.word	0xd078c69f
    9c4c:	3fc39a09 	.word	0x3fc39a09
    9c50:	1d8e78af 	.word	0x1d8e78af
    9c54:	3fcc71c5 	.word	0x3fcc71c5
    9c58:	9997fa04 	.word	0x9997fa04
    9c5c:	3fd99999 	.word	0x3fd99999
    9c60:	c3500000 	.word	0xc3500000
    9c64:	43500000 	.word	0x43500000
    9c68:	7fefffff 	.word	0x7fefffff
    9c6c:	3ff00000 	.word	0x3ff00000
    9c70:	3fe00000 	.word	0x3fe00000
    9c74:	00000000 	.word	0x00000000

00009c78 <_dtoa_r>:
    9c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c7c:	4614      	mov	r4, r2
    9c7e:	b097      	sub	sp, #92	; 0x5c
    9c80:	461d      	mov	r5, r3
    9c82:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9c84:	4683      	mov	fp, r0
    9c86:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9c88:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9c8c:	b97f      	cbnz	r7, 9cae <_dtoa_r+0x36>
    9c8e:	2010      	movs	r0, #16
    9c90:	f019 f946 	bl	22f20 <malloc>
    9c94:	4602      	mov	r2, r0
    9c96:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9c9a:	b920      	cbnz	r0, 9ca6 <_dtoa_r+0x2e>
    9c9c:	4ba2      	ldr	r3, [pc, #648]	; (9f28 <_dtoa_r+0x2b0>)
    9c9e:	21ea      	movs	r1, #234	; 0xea
    9ca0:	48a2      	ldr	r0, [pc, #648]	; (9f2c <_dtoa_r+0x2b4>)
    9ca2:	f019 fd75 	bl	23790 <__assert_func>
    9ca6:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9caa:	6007      	str	r7, [r0, #0]
    9cac:	60c7      	str	r7, [r0, #12]
    9cae:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cb2:	6819      	ldr	r1, [r3, #0]
    9cb4:	b159      	cbz	r1, 9cce <_dtoa_r+0x56>
    9cb6:	685a      	ldr	r2, [r3, #4]
    9cb8:	2301      	movs	r3, #1
    9cba:	4658      	mov	r0, fp
    9cbc:	4093      	lsls	r3, r2
    9cbe:	604a      	str	r2, [r1, #4]
    9cc0:	608b      	str	r3, [r1, #8]
    9cc2:	f019 fea5 	bl	23a10 <_Bfree>
    9cc6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cca:	2200      	movs	r2, #0
    9ccc:	601a      	str	r2, [r3, #0]
    9cce:	1e2b      	subs	r3, r5, #0
    9cd0:	bfb7      	itett	lt
    9cd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9cd6:	2300      	movge	r3, #0
    9cd8:	2201      	movlt	r2, #1
    9cda:	9305      	strlt	r3, [sp, #20]
    9cdc:	bfa8      	it	ge
    9cde:	6033      	strge	r3, [r6, #0]
    9ce0:	9f05      	ldr	r7, [sp, #20]
    9ce2:	4b93      	ldr	r3, [pc, #588]	; (9f30 <_dtoa_r+0x2b8>)
    9ce4:	bfb8      	it	lt
    9ce6:	6032      	strlt	r2, [r6, #0]
    9ce8:	43bb      	bics	r3, r7
    9cea:	d119      	bne.n	9d20 <_dtoa_r+0xa8>
    9cec:	f242 730f 	movw	r3, #9999	; 0x270f
    9cf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9cf2:	6013      	str	r3, [r2, #0]
    9cf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9cf8:	4323      	orrs	r3, r4
    9cfa:	f000 85e0 	beq.w	a8be <_dtoa_r+0xc46>
    9cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d00:	b953      	cbnz	r3, 9d18 <_dtoa_r+0xa0>
    9d02:	4b8c      	ldr	r3, [pc, #560]	; (9f34 <_dtoa_r+0x2bc>)
    9d04:	e021      	b.n	9d4a <_dtoa_r+0xd2>
    9d06:	4b8c      	ldr	r3, [pc, #560]	; (9f38 <_dtoa_r+0x2c0>)
    9d08:	9308      	str	r3, [sp, #32]
    9d0a:	3308      	adds	r3, #8
    9d0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d0e:	6013      	str	r3, [r2, #0]
    9d10:	9808      	ldr	r0, [sp, #32]
    9d12:	b017      	add	sp, #92	; 0x5c
    9d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d18:	4b86      	ldr	r3, [pc, #536]	; (9f34 <_dtoa_r+0x2bc>)
    9d1a:	9308      	str	r3, [sp, #32]
    9d1c:	3303      	adds	r3, #3
    9d1e:	e7f5      	b.n	9d0c <_dtoa_r+0x94>
    9d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d2c:	2200      	movs	r2, #0
    9d2e:	2300      	movs	r3, #0
    9d30:	f7ff f94e 	bl	8fd0 <__aeabi_dcmpeq>
    9d34:	4680      	mov	r8, r0
    9d36:	b150      	cbz	r0, 9d4e <_dtoa_r+0xd6>
    9d38:	2301      	movs	r3, #1
    9d3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d3c:	6013      	str	r3, [r2, #0]
    9d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d40:	b113      	cbz	r3, 9d48 <_dtoa_r+0xd0>
    9d42:	4b7e      	ldr	r3, [pc, #504]	; (9f3c <_dtoa_r+0x2c4>)
    9d44:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d46:	6013      	str	r3, [r2, #0]
    9d48:	4b7d      	ldr	r3, [pc, #500]	; (9f40 <_dtoa_r+0x2c8>)
    9d4a:	9308      	str	r3, [sp, #32]
    9d4c:	e7e0      	b.n	9d10 <_dtoa_r+0x98>
    9d4e:	ab14      	add	r3, sp, #80	; 0x50
    9d50:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9d54:	4658      	mov	r0, fp
    9d56:	9301      	str	r3, [sp, #4]
    9d58:	ab15      	add	r3, sp, #84	; 0x54
    9d5a:	9300      	str	r3, [sp, #0]
    9d5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9d60:	f01a f8dc 	bl	23f1c <__d2b>
    9d64:	9003      	str	r0, [sp, #12]
    9d66:	2e00      	cmp	r6, #0
    9d68:	d078      	beq.n	9e5c <_dtoa_r+0x1e4>
    9d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d6c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9d70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9d78:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9d7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9d84:	4619      	mov	r1, r3
    9d86:	2200      	movs	r2, #0
    9d88:	4b6e      	ldr	r3, [pc, #440]	; (9f44 <_dtoa_r+0x2cc>)
    9d8a:	f7fe f9e9 	bl	8160 <__aeabi_dsub>
    9d8e:	a360      	add	r3, pc, #384	; (adr r3, 9f10 <_dtoa_r+0x298>)
    9d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d94:	f7fe fb9c 	bl	84d0 <__aeabi_dmul>
    9d98:	a35f      	add	r3, pc, #380	; (adr r3, 9f18 <_dtoa_r+0x2a0>)
    9d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d9e:	f7fe f9e1 	bl	8164 <__adddf3>
    9da2:	4604      	mov	r4, r0
    9da4:	460d      	mov	r5, r1
    9da6:	4630      	mov	r0, r6
    9da8:	f7fe fb28 	bl	83fc <__aeabi_i2d>
    9dac:	a35c      	add	r3, pc, #368	; (adr r3, 9f20 <_dtoa_r+0x2a8>)
    9dae:	e9d3 2300 	ldrd	r2, r3, [r3]
    9db2:	f7fe fb8d 	bl	84d0 <__aeabi_dmul>
    9db6:	4602      	mov	r2, r0
    9db8:	460b      	mov	r3, r1
    9dba:	4620      	mov	r0, r4
    9dbc:	4629      	mov	r1, r5
    9dbe:	f7fe f9d1 	bl	8164 <__adddf3>
    9dc2:	4604      	mov	r4, r0
    9dc4:	460d      	mov	r5, r1
    9dc6:	f7ff f94b 	bl	9060 <__aeabi_d2iz>
    9dca:	2200      	movs	r2, #0
    9dcc:	4607      	mov	r7, r0
    9dce:	2300      	movs	r3, #0
    9dd0:	4620      	mov	r0, r4
    9dd2:	4629      	mov	r1, r5
    9dd4:	f7ff f906 	bl	8fe4 <__aeabi_dcmplt>
    9dd8:	b140      	cbz	r0, 9dec <_dtoa_r+0x174>
    9dda:	4638      	mov	r0, r7
    9ddc:	f7fe fb0e 	bl	83fc <__aeabi_i2d>
    9de0:	4622      	mov	r2, r4
    9de2:	462b      	mov	r3, r5
    9de4:	f7ff f8f4 	bl	8fd0 <__aeabi_dcmpeq>
    9de8:	b900      	cbnz	r0, 9dec <_dtoa_r+0x174>
    9dea:	3f01      	subs	r7, #1
    9dec:	2f16      	cmp	r7, #22
    9dee:	d854      	bhi.n	9e9a <_dtoa_r+0x222>
    9df0:	4b55      	ldr	r3, [pc, #340]	; (9f48 <_dtoa_r+0x2d0>)
    9df2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dfe:	f7ff f8f1 	bl	8fe4 <__aeabi_dcmplt>
    9e02:	2800      	cmp	r0, #0
    9e04:	d04b      	beq.n	9e9e <_dtoa_r+0x226>
    9e06:	3f01      	subs	r7, #1
    9e08:	2300      	movs	r3, #0
    9e0a:	9312      	str	r3, [sp, #72]	; 0x48
    9e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e0e:	1b9b      	subs	r3, r3, r6
    9e10:	1e5a      	subs	r2, r3, #1
    9e12:	bf4c      	ite	mi
    9e14:	f1c3 0301 	rsbmi	r3, r3, #1
    9e18:	2300      	movpl	r3, #0
    9e1a:	920a      	str	r2, [sp, #40]	; 0x28
    9e1c:	bf45      	ittet	mi
    9e1e:	9306      	strmi	r3, [sp, #24]
    9e20:	2300      	movmi	r3, #0
    9e22:	9306      	strpl	r3, [sp, #24]
    9e24:	930a      	strmi	r3, [sp, #40]	; 0x28
    9e26:	2f00      	cmp	r7, #0
    9e28:	db3b      	blt.n	9ea2 <_dtoa_r+0x22a>
    9e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e2c:	970f      	str	r7, [sp, #60]	; 0x3c
    9e2e:	443b      	add	r3, r7
    9e30:	930a      	str	r3, [sp, #40]	; 0x28
    9e32:	2300      	movs	r3, #0
    9e34:	930b      	str	r3, [sp, #44]	; 0x2c
    9e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e38:	2b09      	cmp	r3, #9
    9e3a:	f200 8089 	bhi.w	9f50 <_dtoa_r+0x2d8>
    9e3e:	2b05      	cmp	r3, #5
    9e40:	bfc5      	ittet	gt
    9e42:	3b04      	subgt	r3, #4
    9e44:	2400      	movgt	r4, #0
    9e46:	2401      	movle	r4, #1
    9e48:	9320      	strgt	r3, [sp, #128]	; 0x80
    9e4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e4c:	3b02      	subs	r3, #2
    9e4e:	2b03      	cmp	r3, #3
    9e50:	f200 8089 	bhi.w	9f66 <_dtoa_r+0x2ee>
    9e54:	e8df f003 	tbb	[pc, r3]
    9e58:	59383a2d 	.word	0x59383a2d
    9e5c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9e60:	441e      	add	r6, r3
    9e62:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9e66:	2b20      	cmp	r3, #32
    9e68:	bfc9      	itett	gt
    9e6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9e6e:	f1c3 0320 	rsble	r3, r3, #32
    9e72:	409f      	lslgt	r7, r3
    9e74:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9e78:	bfd8      	it	le
    9e7a:	fa04 f003 	lslle.w	r0, r4, r3
    9e7e:	f106 36ff 	add.w	r6, r6, #4294967295
    9e82:	bfc4      	itt	gt
    9e84:	fa24 f303 	lsrgt.w	r3, r4, r3
    9e88:	ea47 0003 	orrgt.w	r0, r7, r3
    9e8c:	f7fe faa6 	bl	83dc <__aeabi_ui2d>
    9e90:	2201      	movs	r2, #1
    9e92:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9e96:	9213      	str	r2, [sp, #76]	; 0x4c
    9e98:	e774      	b.n	9d84 <_dtoa_r+0x10c>
    9e9a:	2301      	movs	r3, #1
    9e9c:	e7b5      	b.n	9e0a <_dtoa_r+0x192>
    9e9e:	9012      	str	r0, [sp, #72]	; 0x48
    9ea0:	e7b4      	b.n	9e0c <_dtoa_r+0x194>
    9ea2:	9b06      	ldr	r3, [sp, #24]
    9ea4:	1bdb      	subs	r3, r3, r7
    9ea6:	9306      	str	r3, [sp, #24]
    9ea8:	427b      	negs	r3, r7
    9eaa:	930b      	str	r3, [sp, #44]	; 0x2c
    9eac:	2300      	movs	r3, #0
    9eae:	930f      	str	r3, [sp, #60]	; 0x3c
    9eb0:	e7c1      	b.n	9e36 <_dtoa_r+0x1be>
    9eb2:	2300      	movs	r3, #0
    9eb4:	930e      	str	r3, [sp, #56]	; 0x38
    9eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eb8:	2b00      	cmp	r3, #0
    9eba:	dc57      	bgt.n	9f6c <_dtoa_r+0x2f4>
    9ebc:	2301      	movs	r3, #1
    9ebe:	4699      	mov	r9, r3
    9ec0:	461a      	mov	r2, r3
    9ec2:	9309      	str	r3, [sp, #36]	; 0x24
    9ec4:	9221      	str	r2, [sp, #132]	; 0x84
    9ec6:	e00c      	b.n	9ee2 <_dtoa_r+0x26a>
    9ec8:	2301      	movs	r3, #1
    9eca:	e7f3      	b.n	9eb4 <_dtoa_r+0x23c>
    9ecc:	2300      	movs	r3, #0
    9ece:	930e      	str	r3, [sp, #56]	; 0x38
    9ed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ed2:	18fb      	adds	r3, r7, r3
    9ed4:	f103 0901 	add.w	r9, r3, #1
    9ed8:	9309      	str	r3, [sp, #36]	; 0x24
    9eda:	464b      	mov	r3, r9
    9edc:	2b01      	cmp	r3, #1
    9ede:	bfb8      	it	lt
    9ee0:	2301      	movlt	r3, #1
    9ee2:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9ee6:	2100      	movs	r1, #0
    9ee8:	2204      	movs	r2, #4
    9eea:	f102 0514 	add.w	r5, r2, #20
    9eee:	429d      	cmp	r5, r3
    9ef0:	d940      	bls.n	9f74 <_dtoa_r+0x2fc>
    9ef2:	6041      	str	r1, [r0, #4]
    9ef4:	4658      	mov	r0, fp
    9ef6:	f019 fd4b 	bl	23990 <_Balloc>
    9efa:	9008      	str	r0, [sp, #32]
    9efc:	2800      	cmp	r0, #0
    9efe:	d13c      	bne.n	9f7a <_dtoa_r+0x302>
    9f00:	4b12      	ldr	r3, [pc, #72]	; (9f4c <_dtoa_r+0x2d4>)
    9f02:	4602      	mov	r2, r0
    9f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9f08:	e6ca      	b.n	9ca0 <_dtoa_r+0x28>
    9f0a:	2301      	movs	r3, #1
    9f0c:	e7df      	b.n	9ece <_dtoa_r+0x256>
    9f0e:	bf00      	nop
    9f10:	636f4361 	.word	0x636f4361
    9f14:	3fd287a7 	.word	0x3fd287a7
    9f18:	8b60c8b3 	.word	0x8b60c8b3
    9f1c:	3fc68a28 	.word	0x3fc68a28
    9f20:	509f79fb 	.word	0x509f79fb
    9f24:	3fd34413 	.word	0x3fd34413
    9f28:	00031138 	.word	0x00031138
    9f2c:	0003114f 	.word	0x0003114f
    9f30:	7ff00000 	.word	0x7ff00000
    9f34:	00031134 	.word	0x00031134
    9f38:	0003112b 	.word	0x0003112b
    9f3c:	00030f60 	.word	0x00030f60
    9f40:	00030f5f 	.word	0x00030f5f
    9f44:	3ff80000 	.word	0x3ff80000
    9f48:	0002a940 	.word	0x0002a940
    9f4c:	000311c3 	.word	0x000311c3
    9f50:	2401      	movs	r4, #1
    9f52:	2300      	movs	r3, #0
    9f54:	940e      	str	r4, [sp, #56]	; 0x38
    9f56:	9320      	str	r3, [sp, #128]	; 0x80
    9f58:	f04f 33ff 	mov.w	r3, #4294967295
    9f5c:	2200      	movs	r2, #0
    9f5e:	4699      	mov	r9, r3
    9f60:	9309      	str	r3, [sp, #36]	; 0x24
    9f62:	2312      	movs	r3, #18
    9f64:	e7ae      	b.n	9ec4 <_dtoa_r+0x24c>
    9f66:	2301      	movs	r3, #1
    9f68:	930e      	str	r3, [sp, #56]	; 0x38
    9f6a:	e7f5      	b.n	9f58 <_dtoa_r+0x2e0>
    9f6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f6e:	4699      	mov	r9, r3
    9f70:	9309      	str	r3, [sp, #36]	; 0x24
    9f72:	e7b6      	b.n	9ee2 <_dtoa_r+0x26a>
    9f74:	3101      	adds	r1, #1
    9f76:	0052      	lsls	r2, r2, #1
    9f78:	e7b7      	b.n	9eea <_dtoa_r+0x272>
    9f7a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9f7e:	f1b9 0f0e 	cmp.w	r9, #14
    9f82:	9a08      	ldr	r2, [sp, #32]
    9f84:	601a      	str	r2, [r3, #0]
    9f86:	d86f      	bhi.n	a068 <_dtoa_r+0x3f0>
    9f88:	2c00      	cmp	r4, #0
    9f8a:	d06d      	beq.n	a068 <_dtoa_r+0x3f0>
    9f8c:	2f00      	cmp	r7, #0
    9f8e:	dd36      	ble.n	9ffe <_dtoa_r+0x386>
    9f90:	f007 020f 	and.w	r2, r7, #15
    9f94:	4ba0      	ldr	r3, [pc, #640]	; (a218 <_dtoa_r+0x5a0>)
    9f96:	05f8      	lsls	r0, r7, #23
    9f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
    9fa0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9fa4:	ea4f 1427 	mov.w	r4, r7, asr #4
    9fa8:	d517      	bpl.n	9fda <_dtoa_r+0x362>
    9faa:	4b9c      	ldr	r3, [pc, #624]	; (a21c <_dtoa_r+0x5a4>)
    9fac:	f004 040f 	and.w	r4, r4, #15
    9fb0:	f04f 0803 	mov.w	r8, #3
    9fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9fbc:	f7fe fbb2 	bl	8724 <__aeabi_ddiv>
    9fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fc4:	4d95      	ldr	r5, [pc, #596]	; (a21c <_dtoa_r+0x5a4>)
    9fc6:	b95c      	cbnz	r4, 9fe0 <_dtoa_r+0x368>
    9fc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9fd0:	f7fe fba8 	bl	8724 <__aeabi_ddiv>
    9fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fd8:	e02b      	b.n	a032 <_dtoa_r+0x3ba>
    9fda:	f04f 0802 	mov.w	r8, #2
    9fde:	e7f1      	b.n	9fc4 <_dtoa_r+0x34c>
    9fe0:	07e1      	lsls	r1, r4, #31
    9fe2:	d509      	bpl.n	9ff8 <_dtoa_r+0x380>
    9fe4:	f108 0801 	add.w	r8, r8, #1
    9fe8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9fec:	e9d5 2300 	ldrd	r2, r3, [r5]
    9ff0:	f7fe fa6e 	bl	84d0 <__aeabi_dmul>
    9ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9ff8:	1064      	asrs	r4, r4, #1
    9ffa:	3508      	adds	r5, #8
    9ffc:	e7e3      	b.n	9fc6 <_dtoa_r+0x34e>
    9ffe:	f000 8107 	beq.w	a210 <_dtoa_r+0x598>
    a002:	427c      	negs	r4, r7
    a004:	4b84      	ldr	r3, [pc, #528]	; (a218 <_dtoa_r+0x5a0>)
    a006:	4d85      	ldr	r5, [pc, #532]	; (a21c <_dtoa_r+0x5a4>)
    a008:	f04f 0802 	mov.w	r8, #2
    a00c:	f004 020f 	and.w	r2, r4, #15
    a010:	1124      	asrs	r4, r4, #4
    a012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a01e:	f7fe fa57 	bl	84d0 <__aeabi_dmul>
    a022:	2300      	movs	r3, #0
    a024:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a028:	2c00      	cmp	r4, #0
    a02a:	f040 80e5 	bne.w	a1f8 <_dtoa_r+0x580>
    a02e:	2b00      	cmp	r3, #0
    a030:	d1d0      	bne.n	9fd4 <_dtoa_r+0x35c>
    a032:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a034:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a038:	2b00      	cmp	r3, #0
    a03a:	f000 814c 	beq.w	a2d6 <_dtoa_r+0x65e>
    a03e:	2200      	movs	r2, #0
    a040:	4b77      	ldr	r3, [pc, #476]	; (a220 <_dtoa_r+0x5a8>)
    a042:	4620      	mov	r0, r4
    a044:	4629      	mov	r1, r5
    a046:	f7fe ffcd 	bl	8fe4 <__aeabi_dcmplt>
    a04a:	2800      	cmp	r0, #0
    a04c:	f000 8143 	beq.w	a2d6 <_dtoa_r+0x65e>
    a050:	f1b9 0f00 	cmp.w	r9, #0
    a054:	f000 813f 	beq.w	a2d6 <_dtoa_r+0x65e>
    a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a05a:	2b00      	cmp	r3, #0
    a05c:	f300 80e4 	bgt.w	a228 <_dtoa_r+0x5b0>
    a060:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a064:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a068:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a06a:	2b00      	cmp	r3, #0
    a06c:	db02      	blt.n	a074 <_dtoa_r+0x3fc>
    a06e:	2f0e      	cmp	r7, #14
    a070:	f340 8242 	ble.w	a4f8 <_dtoa_r+0x880>
    a074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a076:	2a00      	cmp	r2, #0
    a078:	f040 8267 	bne.w	a54a <_dtoa_r+0x8d2>
    a07c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a07e:	2500      	movs	r5, #0
    a080:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a084:	f1b8 0f00 	cmp.w	r8, #0
    a088:	d00d      	beq.n	a0a6 <_dtoa_r+0x42e>
    a08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a08c:	2b00      	cmp	r3, #0
    a08e:	dd0a      	ble.n	a0a6 <_dtoa_r+0x42e>
    a090:	4543      	cmp	r3, r8
    a092:	9a06      	ldr	r2, [sp, #24]
    a094:	bfa8      	it	ge
    a096:	4643      	movge	r3, r8
    a098:	1ad2      	subs	r2, r2, r3
    a09a:	eba8 0803 	sub.w	r8, r8, r3
    a09e:	9206      	str	r2, [sp, #24]
    a0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0a2:	1ad3      	subs	r3, r2, r3
    a0a4:	930a      	str	r3, [sp, #40]	; 0x28
    a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0a8:	b30b      	cbz	r3, a0ee <_dtoa_r+0x476>
    a0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	f000 82a6 	beq.w	a5fe <_dtoa_r+0x986>
    a0b2:	2c00      	cmp	r4, #0
    a0b4:	f000 82a1 	beq.w	a5fa <_dtoa_r+0x982>
    a0b8:	4629      	mov	r1, r5
    a0ba:	4622      	mov	r2, r4
    a0bc:	4658      	mov	r0, fp
    a0be:	f019 fdd1 	bl	23c64 <__pow5mult>
    a0c2:	9a03      	ldr	r2, [sp, #12]
    a0c4:	4601      	mov	r1, r0
    a0c6:	4605      	mov	r5, r0
    a0c8:	4658      	mov	r0, fp
    a0ca:	f019 fd21 	bl	23b10 <__multiply>
    a0ce:	9903      	ldr	r1, [sp, #12]
    a0d0:	4606      	mov	r6, r0
    a0d2:	4658      	mov	r0, fp
    a0d4:	f019 fc9c 	bl	23a10 <_Bfree>
    a0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0da:	1b1b      	subs	r3, r3, r4
    a0dc:	930b      	str	r3, [sp, #44]	; 0x2c
    a0de:	f000 8291 	beq.w	a604 <_dtoa_r+0x98c>
    a0e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a0e4:	4631      	mov	r1, r6
    a0e6:	4658      	mov	r0, fp
    a0e8:	f019 fdbc 	bl	23c64 <__pow5mult>
    a0ec:	9003      	str	r0, [sp, #12]
    a0ee:	2101      	movs	r1, #1
    a0f0:	4658      	mov	r0, fp
    a0f2:	f019 fcf7 	bl	23ae4 <__i2b>
    a0f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0f8:	4604      	mov	r4, r0
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	f000 8284 	beq.w	a608 <_dtoa_r+0x990>
    a100:	461a      	mov	r2, r3
    a102:	4601      	mov	r1, r0
    a104:	4658      	mov	r0, fp
    a106:	f019 fdad 	bl	23c64 <__pow5mult>
    a10a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a10c:	4604      	mov	r4, r0
    a10e:	2b01      	cmp	r3, #1
    a110:	dc03      	bgt.n	a11a <_dtoa_r+0x4a2>
    a112:	9b04      	ldr	r3, [sp, #16]
    a114:	2b00      	cmp	r3, #0
    a116:	f000 827c 	beq.w	a612 <_dtoa_r+0x99a>
    a11a:	2600      	movs	r6, #0
    a11c:	6923      	ldr	r3, [r4, #16]
    a11e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a122:	6918      	ldr	r0, [r3, #16]
    a124:	f01f fdcc 	bl	29cc0 <__hi0bits>
    a128:	f1c0 0020 	rsb	r0, r0, #32
    a12c:	960f      	str	r6, [sp, #60]	; 0x3c
    a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a130:	4418      	add	r0, r3
    a132:	f010 001f 	ands.w	r0, r0, #31
    a136:	f000 8291 	beq.w	a65c <_dtoa_r+0x9e4>
    a13a:	f1c0 0320 	rsb	r3, r0, #32
    a13e:	2b04      	cmp	r3, #4
    a140:	f340 8281 	ble.w	a646 <_dtoa_r+0x9ce>
    a144:	f1c0 001c 	rsb	r0, r0, #28
    a148:	9b06      	ldr	r3, [sp, #24]
    a14a:	4403      	add	r3, r0
    a14c:	4480      	add	r8, r0
    a14e:	9306      	str	r3, [sp, #24]
    a150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a152:	4403      	add	r3, r0
    a154:	930a      	str	r3, [sp, #40]	; 0x28
    a156:	9b06      	ldr	r3, [sp, #24]
    a158:	2b00      	cmp	r3, #0
    a15a:	dd05      	ble.n	a168 <_dtoa_r+0x4f0>
    a15c:	461a      	mov	r2, r3
    a15e:	9903      	ldr	r1, [sp, #12]
    a160:	4658      	mov	r0, fp
    a162:	f019 fdd9 	bl	23d18 <__lshift>
    a166:	9003      	str	r0, [sp, #12]
    a168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a16a:	2b00      	cmp	r3, #0
    a16c:	dd05      	ble.n	a17a <_dtoa_r+0x502>
    a16e:	4621      	mov	r1, r4
    a170:	461a      	mov	r2, r3
    a172:	4658      	mov	r0, fp
    a174:	f019 fdd0 	bl	23d18 <__lshift>
    a178:	4604      	mov	r4, r0
    a17a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a17c:	2b00      	cmp	r3, #0
    a17e:	f000 8276 	beq.w	a66e <_dtoa_r+0x9f6>
    a182:	4621      	mov	r1, r4
    a184:	9803      	ldr	r0, [sp, #12]
    a186:	f01f fdea 	bl	29d5e <__mcmp>
    a18a:	2800      	cmp	r0, #0
    a18c:	f280 826f 	bge.w	a66e <_dtoa_r+0x9f6>
    a190:	2300      	movs	r3, #0
    a192:	220a      	movs	r2, #10
    a194:	9903      	ldr	r1, [sp, #12]
    a196:	4658      	mov	r0, fp
    a198:	f019 fc5c 	bl	23a54 <__multadd>
    a19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a19e:	1e7e      	subs	r6, r7, #1
    a1a0:	9003      	str	r0, [sp, #12]
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	f000 825c 	beq.w	a660 <_dtoa_r+0x9e8>
    a1a8:	2300      	movs	r3, #0
    a1aa:	4629      	mov	r1, r5
    a1ac:	220a      	movs	r2, #10
    a1ae:	4658      	mov	r0, fp
    a1b0:	f019 fc50 	bl	23a54 <__multadd>
    a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1b6:	4605      	mov	r5, r0
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	dc03      	bgt.n	a1c4 <_dtoa_r+0x54c>
    a1bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1be:	2b02      	cmp	r3, #2
    a1c0:	f300 825e 	bgt.w	a680 <_dtoa_r+0xa08>
    a1c4:	f1b8 0f00 	cmp.w	r8, #0
    a1c8:	dd05      	ble.n	a1d6 <_dtoa_r+0x55e>
    a1ca:	4629      	mov	r1, r5
    a1cc:	4642      	mov	r2, r8
    a1ce:	4658      	mov	r0, fp
    a1d0:	f019 fda2 	bl	23d18 <__lshift>
    a1d4:	4605      	mov	r5, r0
    a1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1d8:	2b00      	cmp	r3, #0
    a1da:	f000 82d0 	beq.w	a77e <_dtoa_r+0xb06>
    a1de:	6869      	ldr	r1, [r5, #4]
    a1e0:	4658      	mov	r0, fp
    a1e2:	f019 fbd5 	bl	23990 <_Balloc>
    a1e6:	4607      	mov	r7, r0
    a1e8:	2800      	cmp	r0, #0
    a1ea:	f040 827f 	bne.w	a6ec <_dtoa_r+0xa74>
    a1ee:	4b0d      	ldr	r3, [pc, #52]	; (a224 <_dtoa_r+0x5ac>)
    a1f0:	4602      	mov	r2, r0
    a1f2:	f240 21ea 	movw	r1, #746	; 0x2ea
    a1f6:	e553      	b.n	9ca0 <_dtoa_r+0x28>
    a1f8:	07e2      	lsls	r2, r4, #31
    a1fa:	d506      	bpl.n	a20a <_dtoa_r+0x592>
    a1fc:	f108 0801 	add.w	r8, r8, #1
    a200:	e9d5 2300 	ldrd	r2, r3, [r5]
    a204:	f7fe f964 	bl	84d0 <__aeabi_dmul>
    a208:	2301      	movs	r3, #1
    a20a:	1064      	asrs	r4, r4, #1
    a20c:	3508      	adds	r5, #8
    a20e:	e70b      	b.n	a028 <_dtoa_r+0x3b0>
    a210:	f04f 0802 	mov.w	r8, #2
    a214:	e70d      	b.n	a032 <_dtoa_r+0x3ba>
    a216:	bf00      	nop
    a218:	0002a940 	.word	0x0002a940
    a21c:	0002a918 	.word	0x0002a918
    a220:	3ff00000 	.word	0x3ff00000
    a224:	000311c3 	.word	0x000311c3
    a228:	4620      	mov	r0, r4
    a22a:	2200      	movs	r2, #0
    a22c:	4bac      	ldr	r3, [pc, #688]	; (a4e0 <_dtoa_r+0x868>)
    a22e:	4629      	mov	r1, r5
    a230:	f7fe f94e 	bl	84d0 <__aeabi_dmul>
    a234:	1e7e      	subs	r6, r7, #1
    a236:	f108 0801 	add.w	r8, r8, #1
    a23a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a23c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a240:	4640      	mov	r0, r8
    a242:	f7fe f8db 	bl	83fc <__aeabi_i2d>
    a246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a24a:	f7fe f941 	bl	84d0 <__aeabi_dmul>
    a24e:	4ba5      	ldr	r3, [pc, #660]	; (a4e4 <_dtoa_r+0x86c>)
    a250:	2200      	movs	r2, #0
    a252:	f7fd ff87 	bl	8164 <__adddf3>
    a256:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a25a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a25e:	9311      	str	r3, [sp, #68]	; 0x44
    a260:	2c00      	cmp	r4, #0
    a262:	d13b      	bne.n	a2dc <_dtoa_r+0x664>
    a264:	2200      	movs	r2, #0
    a266:	4ba0      	ldr	r3, [pc, #640]	; (a4e8 <_dtoa_r+0x870>)
    a268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a26c:	f7fd ff78 	bl	8160 <__aeabi_dsub>
    a270:	4602      	mov	r2, r0
    a272:	460b      	mov	r3, r1
    a274:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a278:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a27c:	f7fe fed0 	bl	9020 <__aeabi_dcmpgt>
    a280:	2800      	cmp	r0, #0
    a282:	f040 8157 	bne.w	a534 <_dtoa_r+0x8bc>
    a286:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a292:	f7fe fea7 	bl	8fe4 <__aeabi_dcmplt>
    a296:	2800      	cmp	r0, #0
    a298:	f43f aee2 	beq.w	a060 <_dtoa_r+0x3e8>
    a29c:	2400      	movs	r4, #0
    a29e:	4625      	mov	r5, r4
    a2a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a2a2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a2a6:	43de      	mvns	r6, r3
    a2a8:	f04f 0800 	mov.w	r8, #0
    a2ac:	4621      	mov	r1, r4
    a2ae:	4658      	mov	r0, fp
    a2b0:	f019 fbae 	bl	23a10 <_Bfree>
    a2b4:	2d00      	cmp	r5, #0
    a2b6:	f000 80a9 	beq.w	a40c <_dtoa_r+0x794>
    a2ba:	f1b8 0f00 	cmp.w	r8, #0
    a2be:	d005      	beq.n	a2cc <_dtoa_r+0x654>
    a2c0:	45a8      	cmp	r8, r5
    a2c2:	d003      	beq.n	a2cc <_dtoa_r+0x654>
    a2c4:	4641      	mov	r1, r8
    a2c6:	4658      	mov	r0, fp
    a2c8:	f019 fba2 	bl	23a10 <_Bfree>
    a2cc:	4629      	mov	r1, r5
    a2ce:	4658      	mov	r0, fp
    a2d0:	f019 fb9e 	bl	23a10 <_Bfree>
    a2d4:	e09a      	b.n	a40c <_dtoa_r+0x794>
    a2d6:	463e      	mov	r6, r7
    a2d8:	464c      	mov	r4, r9
    a2da:	e7b1      	b.n	a240 <_dtoa_r+0x5c8>
    a2dc:	4b83      	ldr	r3, [pc, #524]	; (a4ec <_dtoa_r+0x874>)
    a2de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a2e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a2e6:	9b08      	ldr	r3, [sp, #32]
    a2e8:	441c      	add	r4, r3
    a2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	d04a      	beq.n	a386 <_dtoa_r+0x70e>
    a2f0:	4602      	mov	r2, r0
    a2f2:	460b      	mov	r3, r1
    a2f4:	2000      	movs	r0, #0
    a2f6:	497e      	ldr	r1, [pc, #504]	; (a4f0 <_dtoa_r+0x878>)
    a2f8:	f7fe fa14 	bl	8724 <__aeabi_ddiv>
    a2fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a300:	f7fd ff2e 	bl	8160 <__aeabi_dsub>
    a304:	f8dd a020 	ldr.w	sl, [sp, #32]
    a308:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a310:	f7fe fea6 	bl	9060 <__aeabi_d2iz>
    a314:	4605      	mov	r5, r0
    a316:	f7fe f871 	bl	83fc <__aeabi_i2d>
    a31a:	4602      	mov	r2, r0
    a31c:	3530      	adds	r5, #48	; 0x30
    a31e:	460b      	mov	r3, r1
    a320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a324:	f7fd ff1c 	bl	8160 <__aeabi_dsub>
    a328:	f80a 5b01 	strb.w	r5, [sl], #1
    a32c:	4602      	mov	r2, r0
    a32e:	460b      	mov	r3, r1
    a330:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a338:	f7fe fe72 	bl	9020 <__aeabi_dcmpgt>
    a33c:	2800      	cmp	r0, #0
    a33e:	d165      	bne.n	a40c <_dtoa_r+0x794>
    a340:	2000      	movs	r0, #0
    a342:	496c      	ldr	r1, [pc, #432]	; (a4f4 <_dtoa_r+0x87c>)
    a344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a348:	f7fd ff0a 	bl	8160 <__aeabi_dsub>
    a34c:	4602      	mov	r2, r0
    a34e:	460b      	mov	r3, r1
    a350:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a354:	f7fe fe64 	bl	9020 <__aeabi_dcmpgt>
    a358:	2800      	cmp	r0, #0
    a35a:	f040 810d 	bne.w	a578 <_dtoa_r+0x900>
    a35e:	45a2      	cmp	sl, r4
    a360:	f000 80ea 	beq.w	a538 <_dtoa_r+0x8c0>
    a364:	2200      	movs	r2, #0
    a366:	4b5e      	ldr	r3, [pc, #376]	; (a4e0 <_dtoa_r+0x868>)
    a368:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a36c:	f7fe f8b0 	bl	84d0 <__aeabi_dmul>
    a370:	2200      	movs	r2, #0
    a372:	4b5b      	ldr	r3, [pc, #364]	; (a4e0 <_dtoa_r+0x868>)
    a374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a37c:	f7fe f8a8 	bl	84d0 <__aeabi_dmul>
    a380:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a384:	e7c2      	b.n	a30c <_dtoa_r+0x694>
    a386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a38a:	f7fe f8a1 	bl	84d0 <__aeabi_dmul>
    a38e:	46a0      	mov	r8, r4
    a390:	f8dd a020 	ldr.w	sl, [sp, #32]
    a394:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a39c:	f7fe fe60 	bl	9060 <__aeabi_d2iz>
    a3a0:	4605      	mov	r5, r0
    a3a2:	f7fe f82b 	bl	83fc <__aeabi_i2d>
    a3a6:	4602      	mov	r2, r0
    a3a8:	3530      	adds	r5, #48	; 0x30
    a3aa:	460b      	mov	r3, r1
    a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3b0:	f7fd fed6 	bl	8160 <__aeabi_dsub>
    a3b4:	f80a 5b01 	strb.w	r5, [sl], #1
    a3b8:	4602      	mov	r2, r0
    a3ba:	460b      	mov	r3, r1
    a3bc:	45a2      	cmp	sl, r4
    a3be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a3c2:	f04f 0200 	mov.w	r2, #0
    a3c6:	d123      	bne.n	a410 <_dtoa_r+0x798>
    a3c8:	4b49      	ldr	r3, [pc, #292]	; (a4f0 <_dtoa_r+0x878>)
    a3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a3ce:	f7fd fec9 	bl	8164 <__adddf3>
    a3d2:	4602      	mov	r2, r0
    a3d4:	460b      	mov	r3, r1
    a3d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3da:	f7fe fe21 	bl	9020 <__aeabi_dcmpgt>
    a3de:	2800      	cmp	r0, #0
    a3e0:	f040 80ca 	bne.w	a578 <_dtoa_r+0x900>
    a3e4:	2000      	movs	r0, #0
    a3e6:	4942      	ldr	r1, [pc, #264]	; (a4f0 <_dtoa_r+0x878>)
    a3e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a3ec:	f7fd feb8 	bl	8160 <__aeabi_dsub>
    a3f0:	4602      	mov	r2, r0
    a3f2:	460b      	mov	r3, r1
    a3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3f8:	f7fe fdf4 	bl	8fe4 <__aeabi_dcmplt>
    a3fc:	b170      	cbz	r0, a41c <_dtoa_r+0x7a4>
    a3fe:	46c2      	mov	sl, r8
    a400:	f108 38ff 	add.w	r8, r8, #4294967295
    a404:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a408:	2b30      	cmp	r3, #48	; 0x30
    a40a:	d0f8      	beq.n	a3fe <_dtoa_r+0x786>
    a40c:	4637      	mov	r7, r6
    a40e:	e055      	b.n	a4bc <_dtoa_r+0x844>
    a410:	4b33      	ldr	r3, [pc, #204]	; (a4e0 <_dtoa_r+0x868>)
    a412:	f7fe f85d 	bl	84d0 <__aeabi_dmul>
    a416:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a41a:	e7bd      	b.n	a398 <_dtoa_r+0x720>
    a41c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a420:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a424:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a426:	2b00      	cmp	r3, #0
    a428:	f6ff ae28 	blt.w	a07c <_dtoa_r+0x404>
    a42c:	2f0e      	cmp	r7, #14
    a42e:	f73f ae25 	bgt.w	a07c <_dtoa_r+0x404>
    a432:	4b2e      	ldr	r3, [pc, #184]	; (a4ec <_dtoa_r+0x874>)
    a434:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a438:	e9d3 3400 	ldrd	r3, r4, [r3]
    a43c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a440:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a442:	2b00      	cmp	r3, #0
    a444:	da02      	bge.n	a44c <_dtoa_r+0x7d4>
    a446:	f1b9 0f00 	cmp.w	r9, #0
    a44a:	d064      	beq.n	a516 <_dtoa_r+0x89e>
    a44c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a458:	4620      	mov	r0, r4
    a45a:	4629      	mov	r1, r5
    a45c:	f7fe f962 	bl	8724 <__aeabi_ddiv>
    a460:	f7fe fdfe 	bl	9060 <__aeabi_d2iz>
    a464:	4606      	mov	r6, r0
    a466:	f7fd ffc9 	bl	83fc <__aeabi_i2d>
    a46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a46e:	f7fe f82f 	bl	84d0 <__aeabi_dmul>
    a472:	4602      	mov	r2, r0
    a474:	4620      	mov	r0, r4
    a476:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a47a:	460b      	mov	r3, r1
    a47c:	4629      	mov	r1, r5
    a47e:	f7fd fe6f 	bl	8160 <__aeabi_dsub>
    a482:	f80a 4b01 	strb.w	r4, [sl], #1
    a486:	9c08      	ldr	r4, [sp, #32]
    a488:	4602      	mov	r2, r0
    a48a:	460b      	mov	r3, r1
    a48c:	ebaa 0404 	sub.w	r4, sl, r4
    a490:	45a1      	cmp	r9, r4
    a492:	f040 8082 	bne.w	a59a <_dtoa_r+0x922>
    a496:	f7fd fe65 	bl	8164 <__adddf3>
    a49a:	4604      	mov	r4, r0
    a49c:	460d      	mov	r5, r1
    a49e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4a2:	f7fe fdbd 	bl	9020 <__aeabi_dcmpgt>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d165      	bne.n	a576 <_dtoa_r+0x8fe>
    a4aa:	4620      	mov	r0, r4
    a4ac:	4629      	mov	r1, r5
    a4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4b2:	f7fe fd8d 	bl	8fd0 <__aeabi_dcmpeq>
    a4b6:	b108      	cbz	r0, a4bc <_dtoa_r+0x844>
    a4b8:	07f3      	lsls	r3, r6, #31
    a4ba:	d45c      	bmi.n	a576 <_dtoa_r+0x8fe>
    a4bc:	9903      	ldr	r1, [sp, #12]
    a4be:	4658      	mov	r0, fp
    a4c0:	f019 faa6 	bl	23a10 <_Bfree>
    a4c4:	2300      	movs	r3, #0
    a4c6:	3701      	adds	r7, #1
    a4c8:	f88a 3000 	strb.w	r3, [sl]
    a4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4ce:	601f      	str	r7, [r3, #0]
    a4d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	f43f ac1c 	beq.w	9d10 <_dtoa_r+0x98>
    a4d8:	f8c3 a000 	str.w	sl, [r3]
    a4dc:	e418      	b.n	9d10 <_dtoa_r+0x98>
    a4de:	bf00      	nop
    a4e0:	40240000 	.word	0x40240000
    a4e4:	401c0000 	.word	0x401c0000
    a4e8:	40140000 	.word	0x40140000
    a4ec:	0002a940 	.word	0x0002a940
    a4f0:	3fe00000 	.word	0x3fe00000
    a4f4:	3ff00000 	.word	0x3ff00000
    a4f8:	4ba2      	ldr	r3, [pc, #648]	; (a784 <_dtoa_r+0xb0c>)
    a4fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a4fe:	e9d3 3400 	ldrd	r3, r4, [r3]
    a502:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a506:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a508:	2b00      	cmp	r3, #0
    a50a:	da9f      	bge.n	a44c <_dtoa_r+0x7d4>
    a50c:	f1b9 0f00 	cmp.w	r9, #0
    a510:	dc9c      	bgt.n	a44c <_dtoa_r+0x7d4>
    a512:	f47f aec3 	bne.w	a29c <_dtoa_r+0x624>
    a516:	2200      	movs	r2, #0
    a518:	4b9b      	ldr	r3, [pc, #620]	; (a788 <_dtoa_r+0xb10>)
    a51a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a51e:	f7fd ffd7 	bl	84d0 <__aeabi_dmul>
    a522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a526:	f7fe fd71 	bl	900c <__aeabi_dcmpge>
    a52a:	4604      	mov	r4, r0
    a52c:	2800      	cmp	r0, #0
    a52e:	f47f aeb5 	bne.w	a29c <_dtoa_r+0x624>
    a532:	463e      	mov	r6, r7
    a534:	4625      	mov	r5, r4
    a536:	e0b4      	b.n	a6a2 <_dtoa_r+0xa2a>
    a538:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a53c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a540:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a542:	2b00      	cmp	r3, #0
    a544:	db01      	blt.n	a54a <_dtoa_r+0x8d2>
    a546:	2f0e      	cmp	r7, #14
    a548:	ddd6      	ble.n	a4f8 <_dtoa_r+0x880>
    a54a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a54c:	2a01      	cmp	r2, #1
    a54e:	dc36      	bgt.n	a5be <_dtoa_r+0x946>
    a550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a552:	b382      	cbz	r2, a5b6 <_dtoa_r+0x93e>
    a554:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a558:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a55a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a55e:	9a06      	ldr	r2, [sp, #24]
    a560:	2101      	movs	r1, #1
    a562:	4658      	mov	r0, fp
    a564:	441a      	add	r2, r3
    a566:	9206      	str	r2, [sp, #24]
    a568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a56a:	441a      	add	r2, r3
    a56c:	920a      	str	r2, [sp, #40]	; 0x28
    a56e:	f019 fab9 	bl	23ae4 <__i2b>
    a572:	4605      	mov	r5, r0
    a574:	e586      	b.n	a084 <_dtoa_r+0x40c>
    a576:	463e      	mov	r6, r7
    a578:	4653      	mov	r3, sl
    a57a:	469a      	mov	sl, r3
    a57c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a580:	2a39      	cmp	r2, #57	; 0x39
    a582:	d106      	bne.n	a592 <_dtoa_r+0x91a>
    a584:	9a08      	ldr	r2, [sp, #32]
    a586:	429a      	cmp	r2, r3
    a588:	d1f7      	bne.n	a57a <_dtoa_r+0x902>
    a58a:	2230      	movs	r2, #48	; 0x30
    a58c:	9908      	ldr	r1, [sp, #32]
    a58e:	3601      	adds	r6, #1
    a590:	700a      	strb	r2, [r1, #0]
    a592:	781a      	ldrb	r2, [r3, #0]
    a594:	3201      	adds	r2, #1
    a596:	701a      	strb	r2, [r3, #0]
    a598:	e738      	b.n	a40c <_dtoa_r+0x794>
    a59a:	2200      	movs	r2, #0
    a59c:	4b7b      	ldr	r3, [pc, #492]	; (a78c <_dtoa_r+0xb14>)
    a59e:	f7fd ff97 	bl	84d0 <__aeabi_dmul>
    a5a2:	2200      	movs	r2, #0
    a5a4:	2300      	movs	r3, #0
    a5a6:	4604      	mov	r4, r0
    a5a8:	460d      	mov	r5, r1
    a5aa:	f7fe fd11 	bl	8fd0 <__aeabi_dcmpeq>
    a5ae:	2800      	cmp	r0, #0
    a5b0:	f43f af50 	beq.w	a454 <_dtoa_r+0x7dc>
    a5b4:	e782      	b.n	a4bc <_dtoa_r+0x844>
    a5b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a5bc:	e7cc      	b.n	a558 <_dtoa_r+0x8e0>
    a5be:	f109 34ff 	add.w	r4, r9, #4294967295
    a5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5c4:	42a3      	cmp	r3, r4
    a5c6:	db08      	blt.n	a5da <_dtoa_r+0x962>
    a5c8:	f1b9 0f00 	cmp.w	r9, #0
    a5cc:	eba3 0404 	sub.w	r4, r3, r4
    a5d0:	db0e      	blt.n	a5f0 <_dtoa_r+0x978>
    a5d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5d6:	464b      	mov	r3, r9
    a5d8:	e7c1      	b.n	a55e <_dtoa_r+0x8e6>
    a5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a5de:	1ae3      	subs	r3, r4, r3
    a5e0:	940b      	str	r4, [sp, #44]	; 0x2c
    a5e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5e6:	2400      	movs	r4, #0
    a5e8:	441a      	add	r2, r3
    a5ea:	464b      	mov	r3, r9
    a5ec:	920f      	str	r2, [sp, #60]	; 0x3c
    a5ee:	e7b6      	b.n	a55e <_dtoa_r+0x8e6>
    a5f0:	9b06      	ldr	r3, [sp, #24]
    a5f2:	eba3 0809 	sub.w	r8, r3, r9
    a5f6:	2300      	movs	r3, #0
    a5f8:	e7b1      	b.n	a55e <_dtoa_r+0x8e6>
    a5fa:	9e03      	ldr	r6, [sp, #12]
    a5fc:	e571      	b.n	a0e2 <_dtoa_r+0x46a>
    a5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a600:	9903      	ldr	r1, [sp, #12]
    a602:	e570      	b.n	a0e6 <_dtoa_r+0x46e>
    a604:	9603      	str	r6, [sp, #12]
    a606:	e572      	b.n	a0ee <_dtoa_r+0x476>
    a608:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a60a:	2b01      	cmp	r3, #1
    a60c:	dc17      	bgt.n	a63e <_dtoa_r+0x9c6>
    a60e:	9b04      	ldr	r3, [sp, #16]
    a610:	b9ab      	cbnz	r3, a63e <_dtoa_r+0x9c6>
    a612:	9b05      	ldr	r3, [sp, #20]
    a614:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a618:	b99b      	cbnz	r3, a642 <_dtoa_r+0x9ca>
    a61a:	9b05      	ldr	r3, [sp, #20]
    a61c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a620:	0d36      	lsrs	r6, r6, #20
    a622:	0536      	lsls	r6, r6, #20
    a624:	b136      	cbz	r6, a634 <_dtoa_r+0x9bc>
    a626:	9b06      	ldr	r3, [sp, #24]
    a628:	2601      	movs	r6, #1
    a62a:	3301      	adds	r3, #1
    a62c:	9306      	str	r3, [sp, #24]
    a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a630:	3301      	adds	r3, #1
    a632:	930a      	str	r3, [sp, #40]	; 0x28
    a634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a636:	2b00      	cmp	r3, #0
    a638:	f47f ad70 	bne.w	a11c <_dtoa_r+0x4a4>
    a63c:	960f      	str	r6, [sp, #60]	; 0x3c
    a63e:	2001      	movs	r0, #1
    a640:	e575      	b.n	a12e <_dtoa_r+0x4b6>
    a642:	2600      	movs	r6, #0
    a644:	e7f6      	b.n	a634 <_dtoa_r+0x9bc>
    a646:	f43f ad86 	beq.w	a156 <_dtoa_r+0x4de>
    a64a:	331c      	adds	r3, #28
    a64c:	9a06      	ldr	r2, [sp, #24]
    a64e:	441a      	add	r2, r3
    a650:	4498      	add	r8, r3
    a652:	9206      	str	r2, [sp, #24]
    a654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a656:	441a      	add	r2, r3
    a658:	920a      	str	r2, [sp, #40]	; 0x28
    a65a:	e57c      	b.n	a156 <_dtoa_r+0x4de>
    a65c:	4603      	mov	r3, r0
    a65e:	e7f4      	b.n	a64a <_dtoa_r+0x9d2>
    a660:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a662:	2b00      	cmp	r3, #0
    a664:	dc2b      	bgt.n	a6be <_dtoa_r+0xa46>
    a666:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a668:	2b02      	cmp	r3, #2
    a66a:	dc09      	bgt.n	a680 <_dtoa_r+0xa08>
    a66c:	e027      	b.n	a6be <_dtoa_r+0xa46>
    a66e:	f1b9 0f00 	cmp.w	r9, #0
    a672:	dc1d      	bgt.n	a6b0 <_dtoa_r+0xa38>
    a674:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a676:	2b02      	cmp	r3, #2
    a678:	dd1a      	ble.n	a6b0 <_dtoa_r+0xa38>
    a67a:	463e      	mov	r6, r7
    a67c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a682:	2b00      	cmp	r3, #0
    a684:	f47f ae0c 	bne.w	a2a0 <_dtoa_r+0x628>
    a688:	4621      	mov	r1, r4
    a68a:	2205      	movs	r2, #5
    a68c:	4658      	mov	r0, fp
    a68e:	f019 f9e1 	bl	23a54 <__multadd>
    a692:	4601      	mov	r1, r0
    a694:	4604      	mov	r4, r0
    a696:	9803      	ldr	r0, [sp, #12]
    a698:	f01f fb61 	bl	29d5e <__mcmp>
    a69c:	2800      	cmp	r0, #0
    a69e:	f77f adff 	ble.w	a2a0 <_dtoa_r+0x628>
    a6a2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6a6:	2331      	movs	r3, #49	; 0x31
    a6a8:	3601      	adds	r6, #1
    a6aa:	f80a 3b01 	strb.w	r3, [sl], #1
    a6ae:	e5fb      	b.n	a2a8 <_dtoa_r+0x630>
    a6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6b2:	463e      	mov	r6, r7
    a6b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	f47f ad83 	bne.w	a1c4 <_dtoa_r+0x54c>
    a6be:	9f08      	ldr	r7, [sp, #32]
    a6c0:	4621      	mov	r1, r4
    a6c2:	9803      	ldr	r0, [sp, #12]
    a6c4:	f01f fa2c 	bl	29b20 <quorem>
    a6c8:	9b08      	ldr	r3, [sp, #32]
    a6ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a6d0:	f807 9b01 	strb.w	r9, [r7], #1
    a6d4:	1afb      	subs	r3, r7, r3
    a6d6:	429a      	cmp	r2, r3
    a6d8:	f340 80cb 	ble.w	a872 <_dtoa_r+0xbfa>
    a6dc:	2300      	movs	r3, #0
    a6de:	220a      	movs	r2, #10
    a6e0:	9903      	ldr	r1, [sp, #12]
    a6e2:	4658      	mov	r0, fp
    a6e4:	f019 f9b6 	bl	23a54 <__multadd>
    a6e8:	9003      	str	r0, [sp, #12]
    a6ea:	e7e9      	b.n	a6c0 <_dtoa_r+0xa48>
    a6ec:	692a      	ldr	r2, [r5, #16]
    a6ee:	f105 010c 	add.w	r1, r5, #12
    a6f2:	300c      	adds	r0, #12
    a6f4:	3202      	adds	r2, #2
    a6f6:	0092      	lsls	r2, r2, #2
    a6f8:	f01f f877 	bl	297ea <memcpy>
    a6fc:	2201      	movs	r2, #1
    a6fe:	4639      	mov	r1, r7
    a700:	4658      	mov	r0, fp
    a702:	f019 fb09 	bl	23d18 <__lshift>
    a706:	9b08      	ldr	r3, [sp, #32]
    a708:	46a8      	mov	r8, r5
    a70a:	4605      	mov	r5, r0
    a70c:	f103 0a01 	add.w	sl, r3, #1
    a710:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a714:	4413      	add	r3, r2
    a716:	930a      	str	r3, [sp, #40]	; 0x28
    a718:	9b04      	ldr	r3, [sp, #16]
    a71a:	f003 0301 	and.w	r3, r3, #1
    a71e:	930b      	str	r3, [sp, #44]	; 0x2c
    a720:	f10a 33ff 	add.w	r3, sl, #4294967295
    a724:	4621      	mov	r1, r4
    a726:	9803      	ldr	r0, [sp, #12]
    a728:	9306      	str	r3, [sp, #24]
    a72a:	f01f f9f9 	bl	29b20 <quorem>
    a72e:	4641      	mov	r1, r8
    a730:	9009      	str	r0, [sp, #36]	; 0x24
    a732:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a736:	9803      	ldr	r0, [sp, #12]
    a738:	f01f fb11 	bl	29d5e <__mcmp>
    a73c:	462a      	mov	r2, r5
    a73e:	4621      	mov	r1, r4
    a740:	4607      	mov	r7, r0
    a742:	4658      	mov	r0, fp
    a744:	f019 fb54 	bl	23df0 <__mdiff>
    a748:	68c2      	ldr	r2, [r0, #12]
    a74a:	4601      	mov	r1, r0
    a74c:	b302      	cbz	r2, a790 <_dtoa_r+0xb18>
    a74e:	4658      	mov	r0, fp
    a750:	f019 f95e 	bl	23a10 <_Bfree>
    a754:	2f00      	cmp	r7, #0
    a756:	da3a      	bge.n	a7ce <_dtoa_r+0xb56>
    a758:	2201      	movs	r2, #1
    a75a:	9903      	ldr	r1, [sp, #12]
    a75c:	4658      	mov	r0, fp
    a75e:	f019 fadb 	bl	23d18 <__lshift>
    a762:	4621      	mov	r1, r4
    a764:	9003      	str	r0, [sp, #12]
    a766:	f01f fafa 	bl	29d5e <__mcmp>
    a76a:	2800      	cmp	r0, #0
    a76c:	dc03      	bgt.n	a776 <_dtoa_r+0xafe>
    a76e:	d129      	bne.n	a7c4 <_dtoa_r+0xb4c>
    a770:	f019 0f01 	tst.w	r9, #1
    a774:	d026      	beq.n	a7c4 <_dtoa_r+0xb4c>
    a776:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a77a:	d11d      	bne.n	a7b8 <_dtoa_r+0xb40>
    a77c:	e032      	b.n	a7e4 <_dtoa_r+0xb6c>
    a77e:	4628      	mov	r0, r5
    a780:	e7c1      	b.n	a706 <_dtoa_r+0xa8e>
    a782:	bf00      	nop
    a784:	0002a940 	.word	0x0002a940
    a788:	40140000 	.word	0x40140000
    a78c:	40240000 	.word	0x40240000
    a790:	900e      	str	r0, [sp, #56]	; 0x38
    a792:	9803      	ldr	r0, [sp, #12]
    a794:	f01f fae3 	bl	29d5e <__mcmp>
    a798:	990e      	ldr	r1, [sp, #56]	; 0x38
    a79a:	900c      	str	r0, [sp, #48]	; 0x30
    a79c:	4658      	mov	r0, fp
    a79e:	f019 f937 	bl	23a10 <_Bfree>
    a7a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7a4:	bb5a      	cbnz	r2, a7fe <_dtoa_r+0xb86>
    a7a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7a8:	b953      	cbnz	r3, a7c0 <_dtoa_r+0xb48>
    a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7ac:	b943      	cbnz	r3, a7c0 <_dtoa_r+0xb48>
    a7ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7b2:	d017      	beq.n	a7e4 <_dtoa_r+0xb6c>
    a7b4:	2f00      	cmp	r7, #0
    a7b6:	dd05      	ble.n	a7c4 <_dtoa_r+0xb4c>
    a7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a7be:	e001      	b.n	a7c4 <_dtoa_r+0xb4c>
    a7c0:	2f00      	cmp	r7, #0
    a7c2:	da2a      	bge.n	a81a <_dtoa_r+0xba2>
    a7c4:	f8dd a018 	ldr.w	sl, [sp, #24]
    a7c8:	f80a 9b01 	strb.w	r9, [sl], #1
    a7cc:	e56e      	b.n	a2ac <_dtoa_r+0x634>
    a7ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7d0:	433b      	orrs	r3, r7
    a7d2:	d104      	bne.n	a7de <_dtoa_r+0xb66>
    a7d4:	9b04      	ldr	r3, [sp, #16]
    a7d6:	f003 0301 	and.w	r3, r3, #1
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d0bc      	beq.n	a758 <_dtoa_r+0xae0>
    a7de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7e2:	d136      	bne.n	a852 <_dtoa_r+0xbda>
    a7e4:	9f06      	ldr	r7, [sp, #24]
    a7e6:	2339      	movs	r3, #57	; 0x39
    a7e8:	f807 3b01 	strb.w	r3, [r7], #1
    a7ec:	46ba      	mov	sl, r7
    a7ee:	3f01      	subs	r7, #1
    a7f0:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a7f4:	2b39      	cmp	r3, #57	; 0x39
    a7f6:	d05a      	beq.n	a8ae <_dtoa_r+0xc36>
    a7f8:	3301      	adds	r3, #1
    a7fa:	703b      	strb	r3, [r7, #0]
    a7fc:	e556      	b.n	a2ac <_dtoa_r+0x634>
    a7fe:	2f00      	cmp	r7, #0
    a800:	db06      	blt.n	a810 <_dtoa_r+0xb98>
    a802:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a804:	433b      	orrs	r3, r7
    a806:	d106      	bne.n	a816 <_dtoa_r+0xb9e>
    a808:	9b04      	ldr	r3, [sp, #16]
    a80a:	f003 0301 	and.w	r3, r3, #1
    a80e:	b913      	cbnz	r3, a816 <_dtoa_r+0xb9e>
    a810:	2a00      	cmp	r2, #0
    a812:	dca1      	bgt.n	a758 <_dtoa_r+0xae0>
    a814:	e7d6      	b.n	a7c4 <_dtoa_r+0xb4c>
    a816:	2a00      	cmp	r2, #0
    a818:	dce1      	bgt.n	a7de <_dtoa_r+0xb66>
    a81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a81c:	4657      	mov	r7, sl
    a81e:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a822:	4553      	cmp	r3, sl
    a824:	d02e      	beq.n	a884 <_dtoa_r+0xc0c>
    a826:	2300      	movs	r3, #0
    a828:	220a      	movs	r2, #10
    a82a:	9903      	ldr	r1, [sp, #12]
    a82c:	4658      	mov	r0, fp
    a82e:	f019 f911 	bl	23a54 <__multadd>
    a832:	45a8      	cmp	r8, r5
    a834:	9003      	str	r0, [sp, #12]
    a836:	f04f 0300 	mov.w	r3, #0
    a83a:	f04f 020a 	mov.w	r2, #10
    a83e:	4641      	mov	r1, r8
    a840:	4658      	mov	r0, fp
    a842:	d10b      	bne.n	a85c <_dtoa_r+0xbe4>
    a844:	f019 f906 	bl	23a54 <__multadd>
    a848:	4680      	mov	r8, r0
    a84a:	4605      	mov	r5, r0
    a84c:	f10a 0a01 	add.w	sl, sl, #1
    a850:	e766      	b.n	a720 <_dtoa_r+0xaa8>
    a852:	f8dd a018 	ldr.w	sl, [sp, #24]
    a856:	f109 0901 	add.w	r9, r9, #1
    a85a:	e7b5      	b.n	a7c8 <_dtoa_r+0xb50>
    a85c:	f019 f8fa 	bl	23a54 <__multadd>
    a860:	4629      	mov	r1, r5
    a862:	4680      	mov	r8, r0
    a864:	2300      	movs	r3, #0
    a866:	220a      	movs	r2, #10
    a868:	4658      	mov	r0, fp
    a86a:	f019 f8f3 	bl	23a54 <__multadd>
    a86e:	4605      	mov	r5, r0
    a870:	e7ec      	b.n	a84c <_dtoa_r+0xbd4>
    a872:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a874:	f04f 0800 	mov.w	r8, #0
    a878:	2b00      	cmp	r3, #0
    a87a:	bfcc      	ite	gt
    a87c:	461f      	movgt	r7, r3
    a87e:	2701      	movle	r7, #1
    a880:	9b08      	ldr	r3, [sp, #32]
    a882:	441f      	add	r7, r3
    a884:	2201      	movs	r2, #1
    a886:	9903      	ldr	r1, [sp, #12]
    a888:	4658      	mov	r0, fp
    a88a:	f019 fa45 	bl	23d18 <__lshift>
    a88e:	4621      	mov	r1, r4
    a890:	9003      	str	r0, [sp, #12]
    a892:	f01f fa64 	bl	29d5e <__mcmp>
    a896:	2800      	cmp	r0, #0
    a898:	dca8      	bgt.n	a7ec <_dtoa_r+0xb74>
    a89a:	d102      	bne.n	a8a2 <_dtoa_r+0xc2a>
    a89c:	f019 0f01 	tst.w	r9, #1
    a8a0:	d1a4      	bne.n	a7ec <_dtoa_r+0xb74>
    a8a2:	46ba      	mov	sl, r7
    a8a4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a8a8:	2b30      	cmp	r3, #48	; 0x30
    a8aa:	d0fa      	beq.n	a8a2 <_dtoa_r+0xc2a>
    a8ac:	e4fe      	b.n	a2ac <_dtoa_r+0x634>
    a8ae:	9b08      	ldr	r3, [sp, #32]
    a8b0:	42bb      	cmp	r3, r7
    a8b2:	d19b      	bne.n	a7ec <_dtoa_r+0xb74>
    a8b4:	2331      	movs	r3, #49	; 0x31
    a8b6:	9a08      	ldr	r2, [sp, #32]
    a8b8:	3601      	adds	r6, #1
    a8ba:	7013      	strb	r3, [r2, #0]
    a8bc:	e4f6      	b.n	a2ac <_dtoa_r+0x634>
    a8be:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	f47f aa20 	bne.w	9d06 <_dtoa_r+0x8e>
    a8c6:	4b01      	ldr	r3, [pc, #4]	; (a8cc <_dtoa_r+0xc54>)
    a8c8:	f7ff ba3f 	b.w	9d4a <_dtoa_r+0xd2>
    a8cc:	0003112b 	.word	0x0003112b

0000a8d0 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a8d0:	4603      	mov	r3, r0
    a8d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8d4:	2401      	movs	r4, #1
    a8d6:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a8d8:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8da:	409c      	lsls	r4, r3
    a8dc:	6843      	ldr	r3, [r0, #4]
    a8de:	681b      	ldr	r3, [r3, #0]
    a8e0:	421c      	tst	r4, r3
    a8e2:	d10e      	bne.n	a902 <gpio_pin_get_dt+0x32>
    a8e4:	490e      	ldr	r1, [pc, #56]	; (a920 <gpio_pin_get_dt+0x50>)
    a8e6:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a8ea:	4a0e      	ldr	r2, [pc, #56]	; (a924 <gpio_pin_get_dt+0x54>)
    a8ec:	480e      	ldr	r0, [pc, #56]	; (a928 <gpio_pin_get_dt+0x58>)
    a8ee:	f01a fa16 	bl	24d1e <assert_print>
    a8f2:	480e      	ldr	r0, [pc, #56]	; (a92c <gpio_pin_get_dt+0x5c>)
    a8f4:	f01a fa13 	bl	24d1e <assert_print>
    a8f8:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a8fc:	4809      	ldr	r0, [pc, #36]	; (a924 <gpio_pin_get_dt+0x54>)
    a8fe:	f01a fa07 	bl	24d10 <assert_post_action>
	const struct gpio_driver_data *const data =
    a902:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a904:	6883      	ldr	r3, [r0, #8]
    a906:	a901      	add	r1, sp, #4
    a908:	685b      	ldr	r3, [r3, #4]
    a90a:	4798      	blx	r3
	if (ret == 0) {
    a90c:	b930      	cbnz	r0, a91c <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a90e:	682a      	ldr	r2, [r5, #0]
    a910:	9b01      	ldr	r3, [sp, #4]
    a912:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a914:	4223      	tst	r3, r4
    a916:	bf14      	ite	ne
    a918:	2001      	movne	r0, #1
    a91a:	2000      	moveq	r0, #0
}
    a91c:	b003      	add	sp, #12
    a91e:	bd30      	pop	{r4, r5, pc}
    a920:	0002b6ab 	.word	0x0002b6ab
    a924:	0002b67a 	.word	0x0002b67a
    a928:	0002b6e9 	.word	0x0002b6e9
    a92c:	0002b706 	.word	0x0002b706

0000a930 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
	
}

//DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a930:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a932:	f01d fe08 	bl	28546 <sys_clock_cycle_get_32>
    a936:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a938:	4804      	ldr	r0, [pc, #16]	; (a94c <digital_0_call_back+0x1c>)
    a93a:	f01a f82e 	bl	2499a <printk>
	if(digital_value[0]<=DIGITAL_0_LIMIT)digital_value[0]++;
    a93e:	4a04      	ldr	r2, [pc, #16]	; (a950 <digital_0_call_back+0x20>)
    a940:	8813      	ldrh	r3, [r2, #0]
    a942:	8813      	ldrh	r3, [r2, #0]
    a944:	3301      	adds	r3, #1
    a946:	b21b      	sxth	r3, r3
    a948:	8013      	strh	r3, [r2, #0]
}
    a94a:	bd08      	pop	{r3, pc}
    a94c:	0002b718 	.word	0x0002b718
    a950:	2002156c 	.word	0x2002156c

0000a954 <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a954:	b508      	push	{r3, lr}
    a956:	f01d fdf6 	bl	28546 <sys_clock_cycle_get_32>
    a95a:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a95c:	4804      	ldr	r0, [pc, #16]	; (a970 <digital_1_call_back+0x1c>)
    a95e:	f01a f81c 	bl	2499a <printk>
	if(digital_value[1]<=DIGITAL_0_LIMIT)digital_value[1]++;
    a962:	4a04      	ldr	r2, [pc, #16]	; (a974 <digital_1_call_back+0x20>)
    a964:	8853      	ldrh	r3, [r2, #2]
    a966:	8853      	ldrh	r3, [r2, #2]
    a968:	3301      	adds	r3, #1
    a96a:	b21b      	sxth	r3, r3
    a96c:	8053      	strh	r3, [r2, #2]
}
    a96e:	bd08      	pop	{r3, pc}
    a970:	0002b733 	.word	0x0002b733
    a974:	2002156c 	.word	0x2002156c

0000a978 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a978:	b508      	push	{r3, lr}
    a97a:	f01d fde4 	bl	28546 <sys_clock_cycle_get_32>
    a97e:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a980:	4804      	ldr	r0, [pc, #16]	; (a994 <digital_2_call_back+0x1c>)
    a982:	f01a f80a 	bl	2499a <printk>
	if(digital_value[2]<=DIGITAL_0_LIMIT)digital_value[2]++;
    a986:	4a04      	ldr	r2, [pc, #16]	; (a998 <digital_2_call_back+0x20>)
    a988:	8893      	ldrh	r3, [r2, #4]
    a98a:	8893      	ldrh	r3, [r2, #4]
    a98c:	3301      	adds	r3, #1
    a98e:	b21b      	sxth	r3, r3
    a990:	8093      	strh	r3, [r2, #4]
}
    a992:	bd08      	pop	{r3, pc}
    a994:	0002b74e 	.word	0x0002b74e
    a998:	2002156c 	.word	0x2002156c

0000a99c <uart_2_work_handler>:
{
    a99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf2 = k_malloc(sizeof(*buf2));  //SIZE IS 92 BYTES
    a99e:	205c      	movs	r0, #92	; 0x5c
    a9a0:	f01e ff0e 	bl	297c0 <k_malloc>
    a9a4:	4603      	mov	r3, r0
	if (buf2) {
    a9a6:	b148      	cbz	r0, a9bc <uart_2_work_handler+0x20>
		buf2->len = 0;
    a9a8:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    a9aa:	1d01      	adds	r1, r0, #4
		buf2->len = 0;
    a9ac:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    a9b0:	480b      	ldr	r0, [pc, #44]	; (a9e0 <uart_2_work_handler+0x44>)
}
    a9b2:	b005      	add	sp, #20
    a9b4:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    a9b8:	f019 be06 	b.w	245c8 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    a9bc:	4a09      	ldr	r2, [pc, #36]	; (a9e4 <uart_2_work_handler+0x48>)
    a9be:	9000      	str	r0, [sp, #0]
    a9c0:	e9cd 0201 	strd	r0, r2, [sp, #4]
    a9c4:	4908      	ldr	r1, [pc, #32]	; (a9e8 <uart_2_work_handler+0x4c>)
    a9c6:	2202      	movs	r2, #2
    a9c8:	f019 fdef 	bl	245aa <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9cc:	f240 6267 	movw	r2, #1639	; 0x667
    a9d0:	2300      	movs	r3, #0
    a9d2:	4806      	ldr	r0, [pc, #24]	; (a9ec <uart_2_work_handler+0x50>)
}
    a9d4:	b005      	add	sp, #20
    a9d6:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9da:	f015 bfcb 	b.w	20974 <k_work_reschedule>
    a9de:	bf00      	nop
    a9e0:	0002a1c8 	.word	0x0002a1c8
    a9e4:	0002b769 	.word	0x0002b769
    a9e8:	0002a800 	.word	0x0002a800
    a9ec:	200091b0 	.word	0x200091b0

0000a9f0 <uart_work_handler>:
{
    a9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    a9f2:	205c      	movs	r0, #92	; 0x5c
    a9f4:	f01e fee4 	bl	297c0 <k_malloc>
    a9f8:	4603      	mov	r3, r0
	if (buf) {
    a9fa:	b148      	cbz	r0, aa10 <uart_work_handler+0x20>
		buf->len = 0;
    a9fc:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9fe:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    aa00:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa04:	480b      	ldr	r0, [pc, #44]	; (aa34 <uart_work_handler+0x44>)
}
    aa06:	b005      	add	sp, #20
    aa08:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa0c:	f019 bddc 	b.w	245c8 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_1 receive buffer");
    aa10:	4a09      	ldr	r2, [pc, #36]	; (aa38 <uart_work_handler+0x48>)
    aa12:	9000      	str	r0, [sp, #0]
    aa14:	e9cd 0201 	strd	r0, r2, [sp, #4]
    aa18:	4908      	ldr	r1, [pc, #32]	; (aa3c <uart_work_handler+0x4c>)
    aa1a:	2202      	movs	r2, #2
    aa1c:	f019 fdc5 	bl	245aa <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa20:	f240 6267 	movw	r2, #1639	; 0x667
    aa24:	2300      	movs	r3, #0
    aa26:	4806      	ldr	r0, [pc, #24]	; (aa40 <uart_work_handler+0x50>)
}
    aa28:	b005      	add	sp, #20
    aa2a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa2e:	f015 bfa1 	b.w	20974 <k_work_reschedule>
    aa32:	bf00      	nop
    aa34:	0002a1e0 	.word	0x0002a1e0
    aa38:	0002b794 	.word	0x0002b794
    aa3c:	0002a800 	.word	0x0002a800
    aa40:	200091e0 	.word	0x200091e0

0000aa44 <button3_thread>:
			print_current_position_cb_new(0);

	}
}

void button3_thread(void){
    aa44:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;
	while(1){
		i=0;
		k_sem_take(&button_3,K_FOREVER);
    aa46:	4e09      	ldr	r6, [pc, #36]	; (aa6c <button3_thread+0x28>)
	    while (i<=C_Buffer_Current_Position){
    aa48:	4d09      	ldr	r5, [pc, #36]	; (aa70 <button3_thread+0x2c>)
		k_sem_take(&button_3,K_FOREVER);
    aa4a:	f04f 32ff 	mov.w	r2, #4294967295
    aa4e:	f04f 33ff 	mov.w	r3, #4294967295
    aa52:	4630      	mov	r0, r6
    aa54:	f019 fdc8 	bl	245e8 <k_sem_take.constprop.0.isra.0>
		i=0;
    aa58:	2400      	movs	r4, #0
	     print_current_position_cb(i);
    aa5a:	4620      	mov	r0, r4
    aa5c:	f001 faf8 	bl	c050 <print_current_position_cb>
	    while (i<=C_Buffer_Current_Position){
    aa60:	682b      	ldr	r3, [r5, #0]
	     i++;
    aa62:	3401      	adds	r4, #1
	    while (i<=C_Buffer_Current_Position){
    aa64:	42a3      	cmp	r3, r4
    aa66:	d3f0      	bcc.n	aa4a <button3_thread+0x6>
    aa68:	e7f7      	b.n	aa5a <button3_thread+0x16>
    aa6a:	bf00      	nop
    aa6c:	20008ae8 	.word	0x20008ae8
    aa70:	20020f54 	.word	0x20020f54

0000aa74 <button4_thread>:
		}
    }
}

void button4_thread(void){
    aa74:	b570      	push	{r4, r5, r6, lr}
    aa76:	b086      	sub	sp, #24
  //print ISADORA PENATI FERREIRA
    char Name[] = "ISADORA PENATI FERREIRA";
    aa78:	466a      	mov	r2, sp
    aa7a:	4615      	mov	r5, r2
    aa7c:	4b0c      	ldr	r3, [pc, #48]	; (aab0 <button4_thread+0x3c>)
    aa7e:	f103 0618 	add.w	r6, r3, #24
    aa82:	4614      	mov	r4, r2
    aa84:	6818      	ldr	r0, [r3, #0]
    aa86:	6859      	ldr	r1, [r3, #4]
    aa88:	3308      	adds	r3, #8
    aa8a:	c403      	stmia	r4!, {r0, r1}
    aa8c:	42b3      	cmp	r3, r6
    aa8e:	4622      	mov	r2, r4
    aa90:	d1f7      	bne.n	aa82 <button4_thread+0xe>
    *(packet_data+6) = 0x41;//A
    *(packet_data+7) = 0x20;//SPACE
	*/
    
	while(1){
		k_sem_take(&button_test,K_FOREVER);
    aa92:	4c08      	ldr	r4, [pc, #32]	; (aab4 <button4_thread+0x40>)
    aa94:	4620      	mov	r0, r4
    aa96:	f04f 32ff 	mov.w	r2, #4294967295
    aa9a:	f04f 33ff 	mov.w	r3, #4294967295
    aa9e:	f019 fda3 	bl	245e8 <k_sem_take.constprop.0.isra.0>
    	bt_nus_send(NULL, Name,size);
    aaa2:	2218      	movs	r2, #24
    aaa4:	4629      	mov	r1, r5
    aaa6:	2000      	movs	r0, #0
    aaa8:	f005 f932 	bl	fd10 <bt_nus_send>
	while(1){
    aaac:	e7f2      	b.n	aa94 <button4_thread+0x20>
    aaae:	bf00      	nop
    aab0:	0002b7bf 	.word	0x0002b7bf
    aab4:	20008b00 	.word	0x20008b00

0000aab8 <write_memory_thread>:
void write_memory_thread(void){
    aab8:	b510      	push	{r4, lr}
		    k_sem_take(&save_memory,K_FOREVER);
    aaba:	4c07      	ldr	r4, [pc, #28]	; (aad8 <write_memory_thread+0x20>)
    aabc:	4620      	mov	r0, r4
    aabe:	f04f 32ff 	mov.w	r2, #4294967295
    aac2:	f04f 33ff 	mov.w	r3, #4294967295
    aac6:	f019 fd8f 	bl	245e8 <k_sem_take.constprop.0.isra.0>
		    flash_button2_counter();
    aaca:	f001 f8d7 	bl	bc7c <flash_button2_counter>
			print_current_position_cb_new(0);
    aace:	2000      	movs	r0, #0
    aad0:	f001 fb14 	bl	c0fc <print_current_position_cb_new>
	while(1){
    aad4:	e7f2      	b.n	aabc <write_memory_thread+0x4>
    aad6:	bf00      	nop
    aad8:	20008b30 	.word	0x20008b30

0000aadc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    aadc:	4603      	mov	r3, r0
    aade:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    aae0:	6800      	ldr	r0, [r0, #0]
    aae2:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aae4:	2301      	movs	r3, #1
    aae6:	6845      	ldr	r5, [r0, #4]
    aae8:	408b      	lsls	r3, r1
    aaea:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    aaec:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aaee:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    aaf0:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aaf2:	d10e      	bne.n	ab12 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    aaf4:	490e      	ldr	r1, [pc, #56]	; (ab30 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    aaf6:	f44f 731d 	mov.w	r3, #628	; 0x274
    aafa:	4a0e      	ldr	r2, [pc, #56]	; (ab34 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    aafc:	480e      	ldr	r0, [pc, #56]	; (ab38 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    aafe:	f01a f90e 	bl	24d1e <assert_print>
    ab02:	480e      	ldr	r0, [pc, #56]	; (ab3c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    ab04:	f01a f90b 	bl	24d1e <assert_print>
    ab08:	f44f 711d 	mov.w	r1, #628	; 0x274
    ab0c:	4809      	ldr	r0, [pc, #36]	; (ab34 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    ab0e:	f01a f8ff 	bl	24d10 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    ab12:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    ab14:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab16:	6994      	ldr	r4, [r2, #24]
    ab18:	bf18      	it	ne
    ab1a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    ab1e:	46a4      	mov	ip, r4
}
    ab20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab24:	bf08      	it	eq
    ab26:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    ab2a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    ab2e:	4760      	bx	ip
    ab30:	0002b6ab 	.word	0x0002b6ab
    ab34:	0002b67a 	.word	0x0002b67a
    ab38:	0002b6e9 	.word	0x0002b6e9
    ab3c:	0002b706 	.word	0x0002b706

0000ab40 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab40:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ab42:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab44:	b08a      	sub	sp, #40	; 0x28
    ab46:	4604      	mov	r4, r0
    ab48:	460e      	mov	r6, r1
    ab4a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ab4c:	2b03      	cmp	r3, #3
    ab4e:	d820      	bhi.n	ab92 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ab50:	e8df f003 	tbb	[pc, r3]
    ab54:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ab58:	4911      	ldr	r1, [pc, #68]	; (aba0 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ab5a:	4628      	mov	r0, r5
    ab5c:	f01e ffa7 	bl	29aae <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ab60:	9505      	str	r5, [sp, #20]
    ab62:	7863      	ldrb	r3, [r4, #1]
    ab64:	211e      	movs	r1, #30
    ab66:	9304      	str	r3, [sp, #16]
    ab68:	78a3      	ldrb	r3, [r4, #2]
    ab6a:	4630      	mov	r0, r6
    ab6c:	9303      	str	r3, [sp, #12]
    ab6e:	78e3      	ldrb	r3, [r4, #3]
    ab70:	4a0c      	ldr	r2, [pc, #48]	; (aba4 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ab72:	9302      	str	r3, [sp, #8]
    ab74:	7923      	ldrb	r3, [r4, #4]
    ab76:	9301      	str	r3, [sp, #4]
    ab78:	7963      	ldrb	r3, [r4, #5]
    ab7a:	9300      	str	r3, [sp, #0]
    ab7c:	79a3      	ldrb	r3, [r4, #6]
    ab7e:	f019 ff19 	bl	249b4 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ab82:	b00a      	add	sp, #40	; 0x28
    ab84:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ab86:	4908      	ldr	r1, [pc, #32]	; (aba8 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    ab88:	e7e7      	b.n	ab5a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    ab8a:	4908      	ldr	r1, [pc, #32]	; (abac <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    ab8c:	e7e5      	b.n	ab5a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    ab8e:	4908      	ldr	r1, [pc, #32]	; (abb0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    ab90:	e7e3      	b.n	ab5a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ab92:	210a      	movs	r1, #10
    ab94:	4628      	mov	r0, r5
    ab96:	4a07      	ldr	r2, [pc, #28]	; (abb4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    ab98:	f019 ff0c 	bl	249b4 <snprintk>
		break;
    ab9c:	e7e0      	b.n	ab60 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    ab9e:	bf00      	nop
    aba0:	0002b7d7 	.word	0x0002b7d7
    aba4:	0002b7f9 	.word	0x0002b7f9
    aba8:	0002b7de 	.word	0x0002b7de
    abac:	0002b7e5 	.word	0x0002b7e5
    abb0:	0002b7ef 	.word	0x0002b7ef
    abb4:	0002effc 	.word	0x0002effc

0000abb8 <security_changed>:
{
    abb8:	b570      	push	{r4, r5, r6, lr}
    abba:	4614      	mov	r4, r2
    abbc:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abbe:	ae06      	add	r6, sp, #24
{
    abc0:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abc2:	f01b fdd4 	bl	2676e <bt_conn_get_dst>
    abc6:	4631      	mov	r1, r6
    abc8:	f7ff ffba 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    abcc:	b96c      	cbnz	r4, abea <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    abce:	4b0e      	ldr	r3, [pc, #56]	; (ac08 <security_changed+0x50>)
    abd0:	2203      	movs	r2, #3
    abd2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    abd6:	4620      	mov	r0, r4
    abd8:	4623      	mov	r3, r4
    abda:	e9cd 6503 	strd	r6, r5, [sp, #12]
    abde:	490b      	ldr	r1, [pc, #44]	; (ac0c <security_changed+0x54>)
    abe0:	9400      	str	r4, [sp, #0]
    abe2:	f019 fce2 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    abe6:	b00e      	add	sp, #56	; 0x38
    abe8:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    abea:	4b09      	ldr	r3, [pc, #36]	; (ac10 <security_changed+0x58>)
    abec:	2202      	movs	r2, #2
    abee:	9302      	str	r3, [sp, #8]
    abf0:	2300      	movs	r3, #0
    abf2:	e9cd 5404 	strd	r5, r4, [sp, #16]
    abf6:	4618      	mov	r0, r3
    abf8:	e9cd 3300 	strd	r3, r3, [sp]
    abfc:	4903      	ldr	r1, [pc, #12]	; (ac0c <security_changed+0x54>)
    abfe:	9603      	str	r6, [sp, #12]
    ac00:	f019 fcd3 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    ac04:	e7ef      	b.n	abe6 <security_changed+0x2e>
    ac06:	bf00      	nop
    ac08:	0002b81c 	.word	0x0002b81c
    ac0c:	0002a800 	.word	0x0002a800
    ac10:	0002b83a 	.word	0x0002b83a

0000ac14 <pairing_failed>:
{
    ac14:	b530      	push	{r4, r5, lr}
    ac16:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac18:	ad06      	add	r5, sp, #24
{
    ac1a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac1c:	f01b fda7 	bl	2676e <bt_conn_get_dst>
    ac20:	4629      	mov	r1, r5
    ac22:	f7ff ff8d 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    ac26:	4b07      	ldr	r3, [pc, #28]	; (ac44 <pairing_failed+0x30>)
    ac28:	2203      	movs	r2, #3
    ac2a:	9302      	str	r3, [sp, #8]
    ac2c:	2300      	movs	r3, #0
    ac2e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ac32:	4618      	mov	r0, r3
    ac34:	e9cd 3300 	strd	r3, r3, [sp]
    ac38:	4903      	ldr	r1, [pc, #12]	; (ac48 <pairing_failed+0x34>)
    ac3a:	f019 fcb6 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    ac3e:	b00f      	add	sp, #60	; 0x3c
    ac40:	bd30      	pop	{r4, r5, pc}
    ac42:	bf00      	nop
    ac44:	0002b85e 	.word	0x0002b85e
    ac48:	0002a800 	.word	0x0002a800

0000ac4c <pairing_complete>:
{
    ac4c:	b530      	push	{r4, r5, lr}
    ac4e:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac50:	ad06      	add	r5, sp, #24
{
    ac52:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac54:	f01b fd8b 	bl	2676e <bt_conn_get_dst>
    ac58:	4629      	mov	r1, r5
    ac5a:	f7ff ff71 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    ac5e:	4b07      	ldr	r3, [pc, #28]	; (ac7c <pairing_complete+0x30>)
    ac60:	2203      	movs	r2, #3
    ac62:	9302      	str	r3, [sp, #8]
    ac64:	2300      	movs	r3, #0
    ac66:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ac6a:	4618      	mov	r0, r3
    ac6c:	e9cd 3300 	strd	r3, r3, [sp]
    ac70:	4903      	ldr	r1, [pc, #12]	; (ac80 <pairing_complete+0x34>)
    ac72:	f019 fc9a 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    ac76:	b00f      	add	sp, #60	; 0x3c
    ac78:	bd30      	pop	{r4, r5, pc}
    ac7a:	bf00      	nop
    ac7c:	0002b881 	.word	0x0002b881
    ac80:	0002a800 	.word	0x0002a800

0000ac84 <auth_cancel>:
{
    ac84:	b510      	push	{r4, lr}
    ac86:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac88:	ac04      	add	r4, sp, #16
    ac8a:	f01b fd70 	bl	2676e <bt_conn_get_dst>
    ac8e:	4621      	mov	r1, r4
    ac90:	f7ff ff56 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    ac94:	4b06      	ldr	r3, [pc, #24]	; (acb0 <auth_cancel+0x2c>)
    ac96:	2203      	movs	r2, #3
    ac98:	9302      	str	r3, [sp, #8]
    ac9a:	2300      	movs	r3, #0
    ac9c:	4905      	ldr	r1, [pc, #20]	; (acb4 <auth_cancel+0x30>)
    ac9e:	4618      	mov	r0, r3
    aca0:	e9cd 3300 	strd	r3, r3, [sp]
    aca4:	9403      	str	r4, [sp, #12]
    aca6:	f019 fc80 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    acaa:	b00c      	add	sp, #48	; 0x30
    acac:	bd10      	pop	{r4, pc}
    acae:	bf00      	nop
    acb0:	0002b8a3 	.word	0x0002b8a3
    acb4:	0002a800 	.word	0x0002a800

0000acb8 <auth_passkey_display>:
{
    acb8:	b530      	push	{r4, r5, lr}
    acba:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acbc:	ad06      	add	r5, sp, #24
{
    acbe:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acc0:	f01b fd55 	bl	2676e <bt_conn_get_dst>
    acc4:	4629      	mov	r1, r5
    acc6:	f7ff ff3b 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    acca:	4b07      	ldr	r3, [pc, #28]	; (ace8 <auth_passkey_display+0x30>)
    accc:	2203      	movs	r2, #3
    acce:	9302      	str	r3, [sp, #8]
    acd0:	2300      	movs	r3, #0
    acd2:	e9cd 5403 	strd	r5, r4, [sp, #12]
    acd6:	4618      	mov	r0, r3
    acd8:	e9cd 3300 	strd	r3, r3, [sp]
    acdc:	4903      	ldr	r1, [pc, #12]	; (acec <auth_passkey_display+0x34>)
    acde:	f019 fc64 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    ace2:	b00f      	add	sp, #60	; 0x3c
    ace4:	bd30      	pop	{r4, r5, pc}
    ace6:	bf00      	nop
    ace8:	0002b8b9 	.word	0x0002b8b9
    acec:	0002a800 	.word	0x0002a800

0000acf0 <auth_passkey_confirm>:
{
    acf0:	b570      	push	{r4, r5, r6, lr}
    acf2:	b08e      	sub	sp, #56	; 0x38
    acf4:	460c      	mov	r4, r1
    acf6:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    acf8:	f009 f9fc 	bl	140f4 <bt_conn_ref>
    acfc:	4b11      	ldr	r3, [pc, #68]	; (ad44 <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acfe:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    ad00:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad02:	4628      	mov	r0, r5
    ad04:	f01b fd33 	bl	2676e <bt_conn_get_dst>
    ad08:	4631      	mov	r1, r6
    ad0a:	f7ff ff19 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad0e:	e9cd 6403 	strd	r6, r4, [sp, #12]
    ad12:	2400      	movs	r4, #0
    ad14:	4d0c      	ldr	r5, [pc, #48]	; (ad48 <auth_passkey_confirm+0x58>)
    ad16:	4b0d      	ldr	r3, [pc, #52]	; (ad4c <auth_passkey_confirm+0x5c>)
    ad18:	4629      	mov	r1, r5
    ad1a:	4620      	mov	r0, r4
    ad1c:	9302      	str	r3, [sp, #8]
    ad1e:	2203      	movs	r2, #3
    ad20:	4623      	mov	r3, r4
    ad22:	e9cd 4400 	strd	r4, r4, [sp]
    ad26:	f019 fc40 	bl	245aa <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    ad2a:	4b09      	ldr	r3, [pc, #36]	; (ad50 <auth_passkey_confirm+0x60>)
    ad2c:	2203      	movs	r2, #3
    ad2e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ad32:	4629      	mov	r1, r5
    ad34:	4623      	mov	r3, r4
    ad36:	4620      	mov	r0, r4
    ad38:	9400      	str	r4, [sp, #0]
    ad3a:	f019 fc36 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    ad3e:	b00e      	add	sp, #56	; 0x38
    ad40:	bd70      	pop	{r4, r5, r6, pc}
    ad42:	bf00      	nop
    ad44:	20009dd4 	.word	0x20009dd4
    ad48:	0002a800 	.word	0x0002a800
    ad4c:	0002b8b9 	.word	0x0002b8b9
    ad50:	0002b8ce 	.word	0x0002b8ce

0000ad54 <bt_receive_cb>:
{
    ad54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ad58:	2400      	movs	r4, #0
{
    ad5a:	4605      	mov	r5, r0
    ad5c:	b088      	sub	sp, #32
    ad5e:	460f      	mov	r7, r1
    ad60:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ad62:	4621      	mov	r1, r4
    ad64:	221a      	movs	r2, #26
    ad66:	a801      	add	r0, sp, #4
    ad68:	9400      	str	r4, [sp, #0]
    ad6a:	f01e fd78 	bl	2985e <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    ad6e:	4628      	mov	r0, r5
    ad70:	f01b fcfd 	bl	2676e <bt_conn_get_dst>
    ad74:	4669      	mov	r1, sp
    ad76:	f7ff fee3 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    ad7a:	4669      	mov	r1, sp
    ad7c:	481f      	ldr	r0, [pc, #124]	; (adfc <bt_receive_cb+0xa8>)
    ad7e:	f018 fcdf 	bl	23740 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ad82:	f8df 807c 	ldr.w	r8, [pc, #124]	; ae00 <bt_receive_cb+0xac>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ad86:	f8df 907c 	ldr.w	r9, [pc, #124]	; ae04 <bt_receive_cb+0xb0>
	for (uint16_t pos = 0; pos != len;) {
    ad8a:	42b4      	cmp	r4, r6
    ad8c:	d007      	beq.n	ad9e <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    ad8e:	205c      	movs	r0, #92	; 0x5c
    ad90:	f01e fd16 	bl	297c0 <k_malloc>
		if (!tx) {
    ad94:	4605      	mov	r5, r0
    ad96:	b928      	cbnz	r0, ada4 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    ad98:	481b      	ldr	r0, [pc, #108]	; (ae08 <bt_receive_cb+0xb4>)
    ad9a:	f018 fcd1 	bl	23740 <iprintf>
}
    ad9e:	b008      	add	sp, #32
    ada0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size) {
    ada4:	1b32      	subs	r2, r6, r4
    ada6:	2a55      	cmp	r2, #85	; 0x55
			tx->len = tx_data_size;
    ada8:	bf8c      	ite	hi
    adaa:	2255      	movhi	r2, #85	; 0x55
			tx->len = (len - pos);
    adac:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    adae:	f100 0a04 	add.w	sl, r0, #4
    adb2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    adb6:	1939      	adds	r1, r7, r4
    adb8:	4650      	mov	r0, sl
    adba:	f01e fd16 	bl	297ea <memcpy>
		pos += tx->len;
    adbe:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    adc2:	441c      	add	r4, r3
    adc4:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    adc6:	42a6      	cmp	r6, r4
    adc8:	d10a      	bne.n	ade0 <bt_receive_cb+0x8c>
    adca:	19ba      	adds	r2, r7, r6
    adcc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    add0:	2a0d      	cmp	r2, #13
    add2:	d105      	bne.n	ade0 <bt_receive_cb+0x8c>
			tx->data[tx->len] = '\n';
    add4:	210a      	movs	r1, #10
    add6:	18ea      	adds	r2, r5, r3
			tx->len++;
    add8:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    adda:	7111      	strb	r1, [r2, #4]
			tx->len++;
    addc:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ade0:	4651      	mov	r1, sl
    ade2:	4640      	mov	r0, r8
    ade4:	f8b5 205a 	ldrh.w	r2, [r5, #90]	; 0x5a
    ade8:	f019 fbf6 	bl	245d8 <uart_tx.constprop.0>
		if (err) {
    adec:	2800      	cmp	r0, #0
    adee:	d0cc      	beq.n	ad8a <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    adf0:	4629      	mov	r1, r5
    adf2:	4648      	mov	r0, r9
    adf4:	f01e fb30 	bl	29458 <k_queue_append>
    adf8:	e7c7      	b.n	ad8a <bt_receive_cb+0x36>
    adfa:	bf00      	nop
    adfc:	0002b8fd 	.word	0x0002b8fd
    ae00:	0002a1e0 	.word	0x0002a1e0
    ae04:	20008bb0 	.word	0x20008bb0
    ae08:	0002b914 	.word	0x0002b914

0000ae0c <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    ae0c:	4603      	mov	r3, r0
    ae0e:	b510      	push	{r4, lr}
    ae10:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ae12:	7919      	ldrb	r1, [r3, #4]
    ae14:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    ae16:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ae18:	fa03 f101 	lsl.w	r1, r3, r1
    ae1c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    ae1e:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ae20:	681b      	ldr	r3, [r3, #0]
    ae22:	4219      	tst	r1, r3
    ae24:	d10e      	bne.n	ae44 <gpio_pin_set_dt.isra.0+0x38>
    ae26:	490e      	ldr	r1, [pc, #56]	; (ae60 <gpio_pin_set_dt.isra.0+0x54>)
    ae28:	f240 533d 	movw	r3, #1341	; 0x53d
    ae2c:	4a0d      	ldr	r2, [pc, #52]	; (ae64 <gpio_pin_set_dt.isra.0+0x58>)
    ae2e:	480e      	ldr	r0, [pc, #56]	; (ae68 <gpio_pin_set_dt.isra.0+0x5c>)
    ae30:	f019 ff75 	bl	24d1e <assert_print>
    ae34:	480d      	ldr	r0, [pc, #52]	; (ae6c <gpio_pin_set_dt.isra.0+0x60>)
    ae36:	f019 ff72 	bl	24d1e <assert_print>
    ae3a:	f240 513d 	movw	r1, #1341	; 0x53d
    ae3e:	4809      	ldr	r0, [pc, #36]	; (ae64 <gpio_pin_set_dt.isra.0+0x58>)
    ae40:	f019 ff66 	bl	24d10 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    ae44:	6823      	ldr	r3, [r4, #0]
    ae46:	4219      	tst	r1, r3
    ae48:	d003      	beq.n	ae52 <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    ae4a:	b122      	cbz	r2, ae56 <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    ae4c:	6883      	ldr	r3, [r0, #8]
    ae4e:	691b      	ldr	r3, [r3, #16]
    ae50:	e003      	b.n	ae5a <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    ae52:	2a00      	cmp	r2, #0
    ae54:	d0fa      	beq.n	ae4c <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    ae56:	6883      	ldr	r3, [r0, #8]
    ae58:	68db      	ldr	r3, [r3, #12]
}
    ae5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    ae5e:	4718      	bx	r3
    ae60:	0002b6ab 	.word	0x0002b6ab
    ae64:	0002b67a 	.word	0x0002b67a
    ae68:	0002b6e9 	.word	0x0002b6e9
    ae6c:	0002b706 	.word	0x0002b706

0000ae70 <button_pressed_1>:
void button_pressed_1(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    ae70:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ae72:	4807      	ldr	r0, [pc, #28]	; (ae90 <button_pressed_1+0x20>)
    ae74:	f014 ffde 	bl	1fe34 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    ae78:	2101      	movs	r1, #1
    ae7a:	4806      	ldr	r0, [pc, #24]	; (ae94 <button_pressed_1+0x24>)
    ae7c:	f7ff ffc6 	bl	ae0c <gpio_pin_set_dt.isra.0>
    ae80:	f01d fb61 	bl	28546 <sys_clock_cycle_get_32>
}
    ae84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ae88:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    ae8a:	4803      	ldr	r0, [pc, #12]	; (ae98 <button_pressed_1+0x28>)
    ae8c:	f019 bd85 	b.w	2499a <printk>
    ae90:	20008b60 	.word	0x20008b60
    ae94:	0002aa98 	.word	0x0002aa98
    ae98:	0002b93f 	.word	0x0002b93f

0000ae9c <connected>:
{
    ae9c:	b570      	push	{r4, r5, r6, lr}
    ae9e:	4605      	mov	r5, r0
	if (err) {
    aea0:	460c      	mov	r4, r1
{
    aea2:	b08c      	sub	sp, #48	; 0x30
	if (err) {
    aea4:	b161      	cbz	r1, aec0 <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    aea6:	4b14      	ldr	r3, [pc, #80]	; (aef8 <connected+0x5c>)
    aea8:	9103      	str	r1, [sp, #12]
    aeaa:	9302      	str	r3, [sp, #8]
    aeac:	2300      	movs	r3, #0
    aeae:	2201      	movs	r2, #1
    aeb0:	4618      	mov	r0, r3
    aeb2:	e9cd 3300 	strd	r3, r3, [sp]
    aeb6:	4911      	ldr	r1, [pc, #68]	; (aefc <connected+0x60>)
    aeb8:	f019 fb77 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    aebc:	b00c      	add	sp, #48	; 0x30
    aebe:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    aec0:	ae04      	add	r6, sp, #16
    aec2:	f01b fc54 	bl	2676e <bt_conn_get_dst>
    aec6:	4631      	mov	r1, r6
    aec8:	f7ff fe3a 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    aecc:	4b0c      	ldr	r3, [pc, #48]	; (af00 <connected+0x64>)
    aece:	2203      	movs	r2, #3
    aed0:	4620      	mov	r0, r4
    aed2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    aed6:	4909      	ldr	r1, [pc, #36]	; (aefc <connected+0x60>)
    aed8:	4623      	mov	r3, r4
    aeda:	9603      	str	r6, [sp, #12]
    aedc:	9400      	str	r4, [sp, #0]
    aede:	f019 fb64 	bl	245aa <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    aee2:	4628      	mov	r0, r5
    aee4:	f009 f906 	bl	140f4 <bt_conn_ref>
    aee8:	4b06      	ldr	r3, [pc, #24]	; (af04 <connected+0x68>)
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    aeea:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    aeec:	6018      	str	r0, [r3, #0]
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    aeee:	4806      	ldr	r0, [pc, #24]	; (af08 <connected+0x6c>)
    aef0:	f7ff ff8c 	bl	ae0c <gpio_pin_set_dt.isra.0>
    aef4:	e7e2      	b.n	aebc <connected+0x20>
    aef6:	bf00      	nop
    aef8:	0002b957 	.word	0x0002b957
    aefc:	0002a800 	.word	0x0002a800
    af00:	0002b972 	.word	0x0002b972
    af04:	20009dd8 	.word	0x20009dd8
    af08:	0002aab0 	.word	0x0002aab0

0000af0c <disconnected>:
{
    af0c:	b530      	push	{r4, r5, lr}
    af0e:	460c      	mov	r4, r1
    af10:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    af12:	ad06      	add	r5, sp, #24
    af14:	f01b fc2b 	bl	2676e <bt_conn_get_dst>
    af18:	4629      	mov	r1, r5
    af1a:	f7ff fe11 	bl	ab40 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    af1e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    af22:	2400      	movs	r4, #0
    af24:	4b0d      	ldr	r3, [pc, #52]	; (af5c <disconnected+0x50>)
	if (auth_conn) {
    af26:	4d0e      	ldr	r5, [pc, #56]	; (af60 <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    af28:	4620      	mov	r0, r4
    af2a:	9302      	str	r3, [sp, #8]
    af2c:	2203      	movs	r2, #3
    af2e:	4623      	mov	r3, r4
    af30:	e9cd 4400 	strd	r4, r4, [sp]
    af34:	490b      	ldr	r1, [pc, #44]	; (af64 <disconnected+0x58>)
    af36:	f019 fb38 	bl	245aa <z_log_msg_runtime_create.constprop.0>
	if (auth_conn) {
    af3a:	6828      	ldr	r0, [r5, #0]
    af3c:	b110      	cbz	r0, af44 <disconnected+0x38>
		bt_conn_unref(auth_conn);
    af3e:	f009 f901 	bl	14144 <bt_conn_unref>
		auth_conn = NULL;
    af42:	602c      	str	r4, [r5, #0]
	if (current_conn) {
    af44:	4c08      	ldr	r4, [pc, #32]	; (af68 <disconnected+0x5c>)
    af46:	6820      	ldr	r0, [r4, #0]
    af48:	b130      	cbz	r0, af58 <disconnected+0x4c>
		bt_conn_unref(current_conn);
    af4a:	f009 f8fb 	bl	14144 <bt_conn_unref>
		current_conn = NULL;
    af4e:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    af50:	4806      	ldr	r0, [pc, #24]	; (af6c <disconnected+0x60>)
		current_conn = NULL;
    af52:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    af54:	f7ff ff5a 	bl	ae0c <gpio_pin_set_dt.isra.0>
}
    af58:	b00f      	add	sp, #60	; 0x3c
    af5a:	bd30      	pop	{r4, r5, pc}
    af5c:	0002b97f 	.word	0x0002b97f
    af60:	20009dd4 	.word	0x20009dd4
    af64:	0002a800 	.word	0x0002a800
    af68:	20009dd8 	.word	0x20009dd8
    af6c:	0002aab0 	.word	0x0002aab0

0000af70 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    af70:	4603      	mov	r3, r0
    af72:	b570      	push	{r4, r5, r6, lr}
    af74:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    af76:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    af78:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    af7a:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    af7c:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    af7e:	f002 0430 	and.w	r4, r2, #48	; 0x30
    af82:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    af84:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    af86:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    af8a:	d10e      	bne.n	afaa <gpio_pin_configure_dt.isra.0+0x3a>
    af8c:	4925      	ldr	r1, [pc, #148]	; (b024 <gpio_pin_configure_dt.isra.0+0xb4>)
    af8e:	f240 23b7 	movw	r3, #695	; 0x2b7
    af92:	4a25      	ldr	r2, [pc, #148]	; (b028 <gpio_pin_configure_dt.isra.0+0xb8>)
    af94:	4825      	ldr	r0, [pc, #148]	; (b02c <gpio_pin_configure_dt.isra.0+0xbc>)
    af96:	f019 fec2 	bl	24d1e <assert_print>
    af9a:	4825      	ldr	r0, [pc, #148]	; (b030 <gpio_pin_configure_dt.isra.0+0xc0>)
    af9c:	f019 febf 	bl	24d1e <assert_print>
    afa0:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    afa4:	4820      	ldr	r0, [pc, #128]	; (b028 <gpio_pin_configure_dt.isra.0+0xb8>)
    afa6:	f019 feb3 	bl	24d10 <assert_post_action>
    afaa:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    afae:	2c02      	cmp	r4, #2
    afb0:	d10c      	bne.n	afcc <gpio_pin_configure_dt.isra.0+0x5c>
    afb2:	4920      	ldr	r1, [pc, #128]	; (b034 <gpio_pin_configure_dt.isra.0+0xc4>)
    afb4:	f240 23bb 	movw	r3, #699	; 0x2bb
    afb8:	4a1b      	ldr	r2, [pc, #108]	; (b028 <gpio_pin_configure_dt.isra.0+0xb8>)
    afba:	481c      	ldr	r0, [pc, #112]	; (b02c <gpio_pin_configure_dt.isra.0+0xbc>)
    afbc:	f019 feaf 	bl	24d1e <assert_print>
    afc0:	481d      	ldr	r0, [pc, #116]	; (b038 <gpio_pin_configure_dt.isra.0+0xc8>)
    afc2:	f019 feac 	bl	24d1e <assert_print>
    afc6:	f240 21bb 	movw	r1, #699	; 0x2bb
    afca:	e7eb      	b.n	afa4 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    afcc:	f002 0406 	and.w	r4, r2, #6
    afd0:	2c04      	cmp	r4, #4
    afd2:	d109      	bne.n	afe8 <gpio_pin_configure_dt.isra.0+0x78>
    afd4:	4919      	ldr	r1, [pc, #100]	; (b03c <gpio_pin_configure_dt.isra.0+0xcc>)
    afd6:	f240 23bf 	movw	r3, #703	; 0x2bf
    afda:	4a13      	ldr	r2, [pc, #76]	; (b028 <gpio_pin_configure_dt.isra.0+0xb8>)
    afdc:	4813      	ldr	r0, [pc, #76]	; (b02c <gpio_pin_configure_dt.isra.0+0xbc>)
    afde:	f019 fe9e 	bl	24d1e <assert_print>
    afe2:	f240 21bf 	movw	r1, #703	; 0x2bf
    afe6:	e7dd      	b.n	afa4 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    afe8:	2401      	movs	r4, #1
    afea:	681b      	ldr	r3, [r3, #0]
    afec:	408c      	lsls	r4, r1
    afee:	421c      	tst	r4, r3
    aff0:	d10c      	bne.n	b00c <gpio_pin_configure_dt.isra.0+0x9c>
    aff2:	4913      	ldr	r1, [pc, #76]	; (b040 <gpio_pin_configure_dt.isra.0+0xd0>)
    aff4:	f240 23d2 	movw	r3, #722	; 0x2d2
    aff8:	4a0b      	ldr	r2, [pc, #44]	; (b028 <gpio_pin_configure_dt.isra.0+0xb8>)
    affa:	480c      	ldr	r0, [pc, #48]	; (b02c <gpio_pin_configure_dt.isra.0+0xbc>)
    affc:	f019 fe8f 	bl	24d1e <assert_print>
    b000:	4810      	ldr	r0, [pc, #64]	; (b044 <gpio_pin_configure_dt.isra.0+0xd4>)
    b002:	f019 fe8c 	bl	24d1e <assert_print>
    b006:	f240 21d2 	movw	r1, #722	; 0x2d2
    b00a:	e7cb      	b.n	afa4 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b00c:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b00e:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b012:	bf14      	ite	ne
    b014:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b016:	43a3      	biceq	r3, r4
    b018:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    b01a:	6833      	ldr	r3, [r6, #0]
}
    b01c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    b020:	4718      	bx	r3
    b022:	bf00      	nop
    b024:	0002b99c 	.word	0x0002b99c
    b028:	0002b67a 	.word	0x0002b67a
    b02c:	0002b6e9 	.word	0x0002b6e9
    b030:	0002b9d5 	.word	0x0002b9d5
    b034:	0002ba12 	.word	0x0002ba12
    b038:	0002ba47 	.word	0x0002ba47
    b03c:	0002ba99 	.word	0x0002ba99
    b040:	0002b6ab 	.word	0x0002b6ab
    b044:	0002b706 	.word	0x0002b706

0000b048 <adc_thread>:
		
	}
	//k_free(packet_data);
}

void adc_thread(void){
    b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b04c:	4e36      	ldr	r6, [pc, #216]	; (b128 <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b04e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b12c <adc_thread+0xe4>
    b052:	b085      	sub	sp, #20
	int err;
    

    while (1) {	
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b054:	4c36      	ldr	r4, [pc, #216]	; (b130 <adc_thread+0xe8>)
    b056:	2700      	movs	r7, #0
    b058:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b05a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b134 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b05e:	7963      	ldrb	r3, [r4, #5]
    b060:	b13b      	cbz	r3, b072 <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b062:	2301      	movs	r3, #1
    b064:	7922      	ldrb	r2, [r4, #4]
    b066:	4093      	lsls	r3, r2
    b068:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b06a:	7c23      	ldrb	r3, [r4, #16]
    b06c:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b06e:	7c63      	ldrb	r3, [r4, #17]
    b070:	7473      	strb	r3, [r6, #17]
    b072:	f04f 32ff 	mov.w	r2, #4294967295
    b076:	f04f 33ff 	mov.w	r3, #4294967295
    b07a:	4650      	mov	r0, sl
    b07c:	f014 fc78 	bl	1f970 <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b080:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b082:	68ab      	ldr	r3, [r5, #8]
    b084:	4631      	mov	r1, r6
    b086:	4628      	mov	r0, r5
    b088:	685b      	ldr	r3, [r3, #4]
    b08a:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b08c:	7922      	ldrb	r2, [r4, #4]
    b08e:	f9b8 1000 	ldrsh.w	r1, [r8]
    b092:	4b29      	ldr	r3, [pc, #164]	; (b138 <adc_thread+0xf0>)
    b094:	9201      	str	r2, [sp, #4]
    b096:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

           if (flag==1){
    b09a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b13c <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b09e:	4650      	mov	r0, sl
    b0a0:	f014 fd36 	bl	1fb10 <z_impl_k_mutex_unlock>
    b0a4:	f8d9 3000 	ldr.w	r3, [r9]
    b0a8:	9a01      	ldr	r2, [sp, #4]
    b0aa:	2b01      	cmp	r3, #1
    b0ac:	d12d      	bne.n	b10a <adc_thread+0xc2>
			printk("- %s, channel %d: ",adc_channels[i].dev->name,adc_channels[i].channel_id);
    b0ae:	6829      	ldr	r1, [r5, #0]
    b0b0:	4823      	ldr	r0, [pc, #140]	; (b140 <adc_thread+0xf8>)
    b0b2:	f019 fc72 	bl	2499a <printk>
			printk("%"PRId16, buf_adc);
    b0b6:	f9b8 1000 	ldrsh.w	r1, [r8]
    b0ba:	4822      	ldr	r0, [pc, #136]	; (b144 <adc_thread+0xfc>)
    b0bc:	f019 fc6d 	bl	2499a <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b0c0:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf_adc;
    b0c2:	f9b8 5000 	ldrsh.w	r5, [r8]
    b0c6:	b1e3      	cbz	r3, b102 <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b0c8:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b0ca:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b0cc:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b0d0:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b0d2:	bf0a      	itet	eq
    b0d4:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b0d6:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b0d8:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b0da:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b0dc:	bf08      	it	eq
    b0de:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b0e0:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b0e2:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b0e4:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b0e6:	bf44      	itt	mi
    b0e8:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b0ec:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b0ee:	79a0      	ldrb	r0, [r4, #6]
    b0f0:	a903      	add	r1, sp, #12
    b0f2:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b0f4:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b0f6:	f00e fa8d 	bl	19614 <adc_gain_invert>
	if (ret == 0) {
    b0fa:	b910      	cbnz	r0, b102 <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b0fc:	9d03      	ldr	r5, [sp, #12]
    b0fe:	9b01      	ldr	r3, [sp, #4]
    b100:	411d      	asrs	r5, r3
			adc_raw_to_millivolts_dt(&adc_channels[i],&val_mv);
			printk(" = %"PRId32" mV\n", val_mv);
    b102:	4629      	mov	r1, r5
    b104:	4810      	ldr	r0, [pc, #64]	; (b148 <adc_thread+0x100>)
    b106:	f019 fc48 	bl	2499a <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b10a:	3701      	adds	r7, #1
    b10c:	2f06      	cmp	r7, #6
    b10e:	f104 0414 	add.w	r4, r4, #20
    b112:	d1a4      	bne.n	b05e <adc_thread+0x16>
		   }
			
		}
        flag=0;
    b114:	2300      	movs	r3, #0
		k_sleep(K_MSEC(100));
    b116:	f640 40cd 	movw	r0, #3277	; 0xccd
    b11a:	2100      	movs	r1, #0
        flag=0;
    b11c:	f8c9 3000 	str.w	r3, [r9]
		k_sleep(K_MSEC(100));
    b120:	f019 fa6a 	bl	245f8 <k_sleep.isra.0>
    while (1) {	
    b124:	e796      	b.n	b054 <adc_thread+0xc>
    b126:	bf00      	nop
    b128:	200083e4 	.word	0x200083e4
    b12c:	20009e20 	.word	0x20009e20
    b130:	0002aa20 	.word	0x0002aa20
    b134:	2002158c 	.word	0x2002158c
    b138:	2002157c 	.word	0x2002157c
    b13c:	20009e1c 	.word	0x20009e1c
    b140:	0002bacc 	.word	0x0002bacc
    b144:	0002badf 	.word	0x0002badf
    b148:	0002bae3 	.word	0x0002bae3

0000b14c <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b14c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type) {
    b14e:	780b      	ldrb	r3, [r1, #0]
    b150:	2b05      	cmp	r3, #5
    b152:	d829      	bhi.n	b1a8 <uart_cb+0x5c>
    b154:	e8df f003 	tbb	[pc, r3]
    b158:	6b2c9503 	.word	0x6b2c9503
    b15c:	4984      	.short	0x4984
		if ((evt->data.tx.len == 0) ||
    b15e:	688b      	ldr	r3, [r1, #8]
    b160:	b313      	cbz	r3, b1a8 <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
    b162:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    b164:	b300      	cbz	r0, b1a8 <uart_cb+0x5c>
		if (aborted_buf) {
    b166:	4a51      	ldr	r2, [pc, #324]	; (b2ac <uart_cb+0x160>)
    b168:	6813      	ldr	r3, [r2, #0]
    b16a:	b1fb      	cbz	r3, b1ac <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,data);
    b16c:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    b16e:	2300      	movs	r3, #0
    b170:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    b172:	4a4f      	ldr	r2, [pc, #316]	; (b2b0 <uart_cb+0x164>)
    b174:	6013      	str	r3, [r2, #0]
		k_free(buf);
    b176:	f01e fb1c 	bl	297b2 <k_free>
	return z_impl_k_queue_get(queue, timeout);
    b17a:	2200      	movs	r2, #0
    b17c:	2300      	movs	r3, #0
    b17e:	484d      	ldr	r0, [pc, #308]	; (b2b4 <uart_cb+0x168>)
    b180:	f014 fdee 	bl	1fd60 <z_impl_k_queue_get>
		if (!buf) {
    b184:	b180      	cbz	r0, b1a8 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
    b186:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    b18a:	1d01      	adds	r1, r0, #4
    b18c:	484a      	ldr	r0, [pc, #296]	; (b2b8 <uart_cb+0x16c>)
    b18e:	f019 fa23 	bl	245d8 <uart_tx.constprop.0>
    b192:	b148      	cbz	r0, b1a8 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    b194:	4b49      	ldr	r3, [pc, #292]	; (b2bc <uart_cb+0x170>)
    b196:	2202      	movs	r2, #2
    b198:	9302      	str	r3, [sp, #8]
    b19a:	2300      	movs	r3, #0
    b19c:	4618      	mov	r0, r3
    b19e:	e9cd 3300 	strd	r3, r3, [sp]
    b1a2:	4947      	ldr	r1, [pc, #284]	; (b2c0 <uart_cb+0x174>)
			LOG_WRN("Not able to allocate UART receive buffer");
    b1a4:	f019 fa01 	bl	245aa <z_log_msg_runtime_create.constprop.0>
}
    b1a8:	b004      	add	sp, #16
    b1aa:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,data);
    b1ac:	3804      	subs	r0, #4
    b1ae:	e7e2      	b.n	b176 <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b1b0:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    b1b2:	68cb      	ldr	r3, [r1, #12]
    b1b4:	f8b2 0056 	ldrh.w	r0, [r2, #86]	; 0x56
    b1b8:	4403      	add	r3, r0
		if (disable_req) {
    b1ba:	4842      	ldr	r0, [pc, #264]	; (b2c4 <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
    b1bc:	b29b      	uxth	r3, r3
    b1be:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
		if (disable_req) {
    b1c2:	7802      	ldrb	r2, [r0, #0]
    b1c4:	2a00      	cmp	r2, #0
    b1c6:	d1ef      	bne.n	b1a8 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    b1c8:	684a      	ldr	r2, [r1, #4]
    b1ca:	4413      	add	r3, r2
    b1cc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b1d0:	2b0a      	cmp	r3, #10
    b1d2:	d001      	beq.n	b1d8 <uart_cb+0x8c>
    b1d4:	2b0d      	cmp	r3, #13
    b1d6:	d1e7      	bne.n	b1a8 <uart_cb+0x5c>
			disable_req = true;
    b1d8:	2301      	movs	r3, #1
    b1da:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    b1dc:	4836      	ldr	r0, [pc, #216]	; (b2b8 <uart_cb+0x16c>)
    b1de:	6883      	ldr	r3, [r0, #8]
    b1e0:	695b      	ldr	r3, [r3, #20]
}
    b1e2:	b004      	add	sp, #16
    b1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1e8:	4718      	bx	r3
		disable_req = false;
    b1ea:	2400      	movs	r4, #0
    b1ec:	4b35      	ldr	r3, [pc, #212]	; (b2c4 <uart_cb+0x178>)
		buf = k_malloc(sizeof(*buf));
    b1ee:	205c      	movs	r0, #92	; 0x5c
		disable_req = false;
    b1f0:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    b1f2:	f01e fae5 	bl	297c0 <k_malloc>
    b1f6:	4603      	mov	r3, r0
		if (buf) {
    b1f8:	b140      	cbz	r0, b20c <uart_cb+0xc0>
			buf->len = 0;
    b1fa:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
		uart_rx_enable(uart, buf->data, sizeof(buf->data),UART_WAIT_FOR_RX);
    b1fe:	1d01      	adds	r1, r0, #4
    b200:	482d      	ldr	r0, [pc, #180]	; (b2b8 <uart_cb+0x16c>)
}
    b202:	b004      	add	sp, #16
    b204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),UART_WAIT_FOR_RX);
    b208:	f019 b9de 	b.w	245c8 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    b20c:	4a2e      	ldr	r2, [pc, #184]	; (b2c8 <uart_cb+0x17c>)
    b20e:	9000      	str	r0, [sp, #0]
    b210:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b214:	492a      	ldr	r1, [pc, #168]	; (b2c0 <uart_cb+0x174>)
    b216:	2202      	movs	r2, #2
    b218:	f019 f9c7 	bl	245aa <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b21c:	f240 6267 	movw	r2, #1639	; 0x667
    b220:	2300      	movs	r3, #0
    b222:	482a      	ldr	r0, [pc, #168]	; (b2cc <uart_cb+0x180>)
}
    b224:	b004      	add	sp, #16
    b226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b22a:	f015 bba3 	b.w	20974 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    b22e:	205c      	movs	r0, #92	; 0x5c
    b230:	f01e fac6 	bl	297c0 <k_malloc>
    b234:	4603      	mov	r3, r0
		if (buf) {
    b236:	b160      	cbz	r0, b252 <uart_cb+0x106>
			buf->len = 0;
    b238:	2200      	movs	r2, #0
    b23a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
	return api->rx_buf_rsp(dev, buf, len);
    b23e:	481e      	ldr	r0, [pc, #120]	; (b2b8 <uart_cb+0x16c>)
    b240:	1d19      	adds	r1, r3, #4
    b242:	6882      	ldr	r2, [r0, #8]
    b244:	6914      	ldr	r4, [r2, #16]
    b246:	2256      	movs	r2, #86	; 0x56
    b248:	4623      	mov	r3, r4
}
    b24a:	b004      	add	sp, #16
    b24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b250:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    b252:	4a1d      	ldr	r2, [pc, #116]	; (b2c8 <uart_cb+0x17c>)
    b254:	491a      	ldr	r1, [pc, #104]	; (b2c0 <uart_cb+0x174>)
    b256:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b25a:	9000      	str	r0, [sp, #0]
    b25c:	2202      	movs	r2, #2
    b25e:	e7a1      	b.n	b1a4 <uart_cb+0x58>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    b260:	684b      	ldr	r3, [r1, #4]
    b262:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
    b264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    b268:	b12b      	cbz	r3, b276 <uart_cb+0x12a>
			k_fifo_put(&fifo_uart_rx_data, buf);
    b26a:	4819      	ldr	r0, [pc, #100]	; (b2d0 <uart_cb+0x184>)
}
    b26c:	b004      	add	sp, #16
    b26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    b272:	f01e b8f1 	b.w	29458 <k_queue_append>
			k_free(buf);
    b276:	4608      	mov	r0, r1
}
    b278:	b004      	add	sp, #16
    b27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    b27e:	f01e ba98 	b.w	297b2 <k_free>
		if (!aborted_buf) {
    b282:	4a0a      	ldr	r2, [pc, #40]	; (b2ac <uart_cb+0x160>)
    b284:	6813      	ldr	r3, [r2, #0]
    b286:	b90b      	cbnz	r3, b28c <uart_cb+0x140>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    b288:	684b      	ldr	r3, [r1, #4]
    b28a:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    b28c:	4808      	ldr	r0, [pc, #32]	; (b2b0 <uart_cb+0x164>)
    b28e:	688b      	ldr	r3, [r1, #8]
    b290:	6801      	ldr	r1, [r0, #0]
    b292:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,data);
    b294:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    b296:	6003      	str	r3, [r0, #0]
		uart_tx(uart, &buf->data[aborted_len],buf->len - aborted_len, SYS_FOREVER_MS);
    b298:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
    b29c:	4806      	ldr	r0, [pc, #24]	; (b2b8 <uart_cb+0x16c>)
    b29e:	1ad2      	subs	r2, r2, r3
    b2a0:	4419      	add	r1, r3
}
    b2a2:	b004      	add	sp, #16
    b2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],buf->len - aborted_len, SYS_FOREVER_MS);
    b2a8:	f019 b996 	b.w	245d8 <uart_tx.constprop.0>
    b2ac:	20009dcc 	.word	0x20009dcc
    b2b0:	20009dc8 	.word	0x20009dc8
    b2b4:	20008bb0 	.word	0x20008bb0
    b2b8:	0002a1e0 	.word	0x0002a1e0
    b2bc:	0002baed 	.word	0x0002baed
    b2c0:	0002a800 	.word	0x0002a800
    b2c4:	200215aa 	.word	0x200215aa
    b2c8:	0002bb0b 	.word	0x0002bb0b
    b2cc:	200091e0 	.word	0x200091e0
    b2d0:	20008b94 	.word	0x20008b94

0000b2d4 <shoot_minute_save_thread>:
void shoot_minute_save_thread(void){
    b2d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
    b2d8:	f01e f97c 	bl	295d4 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b2dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2e0:	fba0 0302 	umull	r0, r3, r0, r2
    b2e4:	fb02 3101 	mla	r1, r2, r1, r3
    b2e8:	0bc0      	lsrs	r0, r0, #15
   uint64_t actual_time = k_uptime_get()/1000;
    b2ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2ee:	2300      	movs	r3, #0
    b2f0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    b2f4:	0bc9      	lsrs	r1, r1, #15
    b2f6:	f7fd fdab 	bl	8e50 <__aeabi_ldivmod>
    h = (actual_time/3600); 
    b2fa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b2fe:	2300      	movs	r3, #0
   uint64_t actual_time = k_uptime_get()/1000;
    b300:	460d      	mov	r5, r1
    b302:	4606      	mov	r6, r0
    h = (actual_time/3600); 
    b304:	f7fd fdf4 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b308:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b30c:	fb03 f100 	mul.w	r1, r3, r0
    b310:	1a70      	subs	r0, r6, r1
    b312:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b316:	223c      	movs	r2, #60	; 0x3c
    b318:	2300      	movs	r3, #0
    b31a:	f7fd fde9 	bl	8ef0 <__aeabi_uldivmod>
    b31e:	4605      	mov	r5, r0
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b320:	4f22      	ldr	r7, [pc, #136]	; (b3ac <shoot_minute_save_thread+0xd8>)
    b322:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    b326:	f01e f955 	bl	295d4 <z_impl_k_uptime_ticks>
    b32a:	fba0 4306 	umull	r4, r3, r0, r6
    b32e:	fb06 3101 	mla	r1, r6, r1, r3
    b332:	0be4      	lsrs	r4, r4, #15
    actual_time = k_uptime_get()/1000;
    b334:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    b338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b33c:	2300      	movs	r3, #0
    b33e:	0bc9      	lsrs	r1, r1, #15
    b340:	f7fd fd86 	bl	8e50 <__aeabi_ldivmod>
	h = (actual_time/3600); 
    b344:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b348:	2300      	movs	r3, #0
    actual_time = k_uptime_get()/1000;
    b34a:	4604      	mov	r4, r0
    b34c:	468a      	mov	sl, r1
	m = (actual_time -(3600*h))/60;
    b34e:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	h = (actual_time/3600); 
    b352:	f7fd fdcd 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b356:	fb08 f800 	mul.w	r8, r8, r0
	h = (actual_time/3600); 
    b35a:	4681      	mov	r9, r0
	m = (actual_time -(3600*h))/60;
    b35c:	ebb4 0008 	subs.w	r0, r4, r8
    b360:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b364:	eb6a 71e8 	sbc.w	r1, sl, r8, asr #31
    b368:	2300      	movs	r3, #0
    b36a:	f7fd fdc1 	bl	8ef0 <__aeabi_uldivmod>
   if (m==(last_minute+1)){
    b36e:	1c6a      	adds	r2, r5, #1
    b370:	4282      	cmp	r2, r0
    b372:	d1d8      	bne.n	b326 <shoot_minute_save_thread+0x52>
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b374:	233c      	movs	r3, #60	; 0x3c
        if (m==59){last_minute=-1;}
    b376:	2a3b      	cmp	r2, #59	; 0x3b
    b378:	bf14      	ite	ne
    b37a:	4615      	movne	r5, r2
    b37c:	f04f 35ff 	moveq.w	r5, #4294967295
	s = (actual_time -(3600*h)-(m*60));
    b380:	eba4 0408 	sub.w	r4, r4, r8
		if (h==24){h=0;} // only up to 23:59:59h
    b384:	f1b9 0f18 	cmp.w	r9, #24
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b388:	fb03 4312 	mls	r3, r3, r2, r4
    b38c:	bf14      	ite	ne
    b38e:	4649      	movne	r1, r9
    b390:	2100      	moveq	r1, #0
    b392:	4638      	mov	r0, r7
    b394:	f019 fb01 	bl	2499a <printk>
        feed_circular_buffer();
    b398:	f000 fd20 	bl	bddc <feed_circular_buffer>
		print_current_position_cb(C_Buffer_Current_Position);
    b39c:	4b04      	ldr	r3, [pc, #16]	; (b3b0 <shoot_minute_save_thread+0xdc>)
    b39e:	6818      	ldr	r0, [r3, #0]
    b3a0:	f000 fe56 	bl	c050 <print_current_position_cb>
		printk(" \n");
    b3a4:	4803      	ldr	r0, [pc, #12]	; (b3b4 <shoot_minute_save_thread+0xe0>)
    b3a6:	f019 faf8 	bl	2499a <printk>
    b3aa:	e7ba      	b.n	b322 <shoot_minute_save_thread+0x4e>
    b3ac:	0002bb34 	.word	0x0002bb34
    b3b0:	20020f54 	.word	0x20020f54
    b3b4:	0002c0b0 	.word	0x0002c0b0

0000b3b8 <button_pressed_4>:
void button_pressed_4(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b3b8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b3ba:	4805      	ldr	r0, [pc, #20]	; (b3d0 <button_pressed_4+0x18>)
    b3bc:	f014 fd3a 	bl	1fe34 <z_impl_k_sem_give>
    b3c0:	f01d f8c1 	bl	28546 <sys_clock_cycle_get_32>
}
    b3c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3c8:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b3ca:	4802      	ldr	r0, [pc, #8]	; (b3d4 <button_pressed_4+0x1c>)
    b3cc:	f019 bae5 	b.w	2499a <printk>
    b3d0:	20008b00 	.word	0x20008b00
    b3d4:	0002bb64 	.word	0x0002bb64

0000b3d8 <button_pressed_3>:
void button_pressed_3(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b3d8:	b508      	push	{r3, lr}
    b3da:	4805      	ldr	r0, [pc, #20]	; (b3f0 <button_pressed_3+0x18>)
    b3dc:	f014 fd2a 	bl	1fe34 <z_impl_k_sem_give>
    b3e0:	f01d f8b1 	bl	28546 <sys_clock_cycle_get_32>
}
    b3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3e8:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b3ea:	4802      	ldr	r0, [pc, #8]	; (b3f4 <button_pressed_3+0x1c>)
    b3ec:	f019 bad5 	b.w	2499a <printk>
    b3f0:	20008ae8 	.word	0x20008ae8
    b3f4:	0002bb7c 	.word	0x0002bb7c

0000b3f8 <button_pressed_2>:
void button_pressed_2(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b3f8:	b508      	push	{r3, lr}
    b3fa:	4807      	ldr	r0, [pc, #28]	; (b418 <button_pressed_2+0x20>)
    b3fc:	f014 fd1a 	bl	1fe34 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b400:	2101      	movs	r1, #1
    b402:	4806      	ldr	r0, [pc, #24]	; (b41c <button_pressed_2+0x24>)
    b404:	f7ff fd02 	bl	ae0c <gpio_pin_set_dt.isra.0>
    b408:	f01d f89d 	bl	28546 <sys_clock_cycle_get_32>
}
    b40c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b410:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b412:	4803      	ldr	r0, [pc, #12]	; (b420 <button_pressed_2+0x28>)
    b414:	f019 bac1 	b.w	2499a <printk>
    b418:	20008b30 	.word	0x20008b30
    b41c:	0002aaa0 	.word	0x0002aaa0
    b420:	0002bb94 	.word	0x0002bb94

0000b424 <gnss_write_thread>:
	}
}

void gnss_write_thread(void)
{
    b424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
    uint32_t i=0,j=1,k=0;;

	struct uart_data_t *buf2a;
	buf2a = k_malloc(sizeof(*buf2a));
    b428:	205c      	movs	r0, #92	; 0x5c
    b42a:	f01e f9c9 	bl	297c0 <k_malloc>
    uint32_t i=0,j=1,k=0;;
    b42e:	2601      	movs	r6, #1
	return z_impl_k_queue_get(queue, timeout);
    b430:	f8df 8054 	ldr.w	r8, [pc, #84]	; b488 <gnss_write_thread+0x64>

       if(buf2a->len>0){
        k=(buf2a->len);

        i=0;
		printf("k:%d UART2:",k);
    b434:	f8df 9054 	ldr.w	r9, [pc, #84]	; b48c <gnss_write_thread+0x68>
    b438:	f04f 32ff 	mov.w	r2, #4294967295
    b43c:	f04f 33ff 	mov.w	r3, #4294967295
    b440:	4640      	mov	r0, r8
    b442:	f014 fc8d 	bl	1fd60 <z_impl_k_queue_get>
    b446:	4605      	mov	r5, r0
	z_impl_k_queue_init(queue);
    b448:	4640      	mov	r0, r8
    b44a:	f01d fff8 	bl	2943e <z_impl_k_queue_init>
       if(buf2a->len>0){
    b44e:	f8b5 705a 	ldrh.w	r7, [r5, #90]	; 0x5a
    b452:	2f00      	cmp	r7, #0
    b454:	d0f0      	beq.n	b438 <gnss_write_thread+0x14>
		printf("k:%d UART2:",k);
    b456:	4639      	mov	r1, r7
    b458:	4648      	mov	r0, r9
    b45a:	f018 f971 	bl	23740 <iprintf>
        while (i< k){
         printf("%02X ",buf2a->data[i]);
    b45e:	f8df a030 	ldr.w	sl, [pc, #48]	; b490 <gnss_write_thread+0x6c>
    b462:	f105 0b03 	add.w	fp, r5, #3
    b466:	465c      	mov	r4, fp
        while (i< k){
    b468:	3c02      	subs	r4, #2
         printf("%02X ",buf2a->data[i]);
    b46a:	4650      	mov	r0, sl
    b46c:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
        while (i< k){
    b470:	1b64      	subs	r4, r4, r5
         printf("%02X ",buf2a->data[i]);
    b472:	f018 f965 	bl	23740 <iprintf>
        while (i< k){
    b476:	42bc      	cmp	r4, r7
    b478:	d3f5      	bcc.n	b466 <gnss_write_thread+0x42>
		 i++;
		}
     
		printf("j:%d\n",j);
    b47a:	4631      	mov	r1, r6
    b47c:	4805      	ldr	r0, [pc, #20]	; (b494 <gnss_write_thread+0x70>)
    b47e:	f018 f95f 	bl	23740 <iprintf>
        j++;
    b482:	3601      	adds	r6, #1
    b484:	e7d8      	b.n	b438 <gnss_write_thread+0x14>
    b486:	bf00      	nop
    b488:	20008b78 	.word	0x20008b78
    b48c:	0002bbac 	.word	0x0002bbac
    b490:	0002bbb8 	.word	0x0002bbb8
    b494:	0002bbbe 	.word	0x0002bbbe

0000b498 <ble_write_thread>:
{
    b498:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    b49a:	f04f 32ff 	mov.w	r2, #4294967295
    b49e:	f04f 33ff 	mov.w	r3, #4294967295
    b4a2:	480d      	ldr	r0, [pc, #52]	; (b4d8 <ble_write_thread+0x40>)
    b4a4:	f019 f8a0 	bl	245e8 <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    b4a8:	4d0c      	ldr	r5, [pc, #48]	; (b4dc <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    b4aa:	4e0d      	ldr	r6, [pc, #52]	; (b4e0 <ble_write_thread+0x48>)
    b4ac:	f04f 32ff 	mov.w	r2, #4294967295
    b4b0:	f04f 33ff 	mov.w	r3, #4294967295
    b4b4:	4628      	mov	r0, r5
    b4b6:	f014 fc53 	bl	1fd60 <z_impl_k_queue_get>
    b4ba:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len)) {
    b4bc:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    b4c0:	1d01      	adds	r1, r0, #4
    b4c2:	2000      	movs	r0, #0
    b4c4:	f004 fc24 	bl	fd10 <bt_nus_send>
    b4c8:	b110      	cbz	r0, b4d0 <ble_write_thread+0x38>
			printk("Falha aqui- Failed to send data over BLE connection");
    b4ca:	4630      	mov	r0, r6
    b4cc:	f019 fa65 	bl	2499a <printk>
		k_free(buf);
    b4d0:	4620      	mov	r0, r4
    b4d2:	f01e f96e 	bl	297b2 <k_free>
	for (;;) {
    b4d6:	e7e9      	b.n	b4ac <ble_write_thread+0x14>
    b4d8:	20008ad0 	.word	0x20008ad0
    b4dc:	20008b94 	.word	0x20008b94
    b4e0:	0002bbc4 	.word	0x0002bbc4

0000b4e4 <uart_cb_2>:
static void uart_cb_2(const struct device *dev, struct uart_event *evt, void *user_data){
    b4e4:	b570      	push	{r4, r5, r6, lr}
 	switch (evt->type) {
    b4e6:	780b      	ldrb	r3, [r1, #0]
    b4e8:	3b02      	subs	r3, #2
    b4ea:	2b03      	cmp	r3, #3
    b4ec:	d85a      	bhi.n	b5a4 <uart_cb_2+0xc0>
    b4ee:	e8df f003 	tbb	[pc, r3]
    b4f2:	3c02      	.short	0x3c02
    b4f4:	274b      	.short	0x274b
		buf2 = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b4f6:	684a      	ldr	r2, [r1, #4]
		buf2->len += evt->data.rx.len;
    b4f8:	68cb      	ldr	r3, [r1, #12]
    b4fa:	f8b2 0056 	ldrh.w	r0, [r2, #86]	; 0x56
    b4fe:	4403      	add	r3, r0
    b500:	b29b      	uxth	r3, r3
    b502:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
		if (evt->data.rx.buf[buf2->len - 1] == 0x0A ) {
    b506:	6849      	ldr	r1, [r1, #4]
    b508:	440b      	add	r3, r1
    b50a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b50e:	2b0a      	cmp	r3, #10
    b510:	d148      	bne.n	b5a4 <uart_cb_2+0xc0>
				buf_extra->data[i]=buf2->data[i];
    b512:	2100      	movs	r1, #0
    b514:	4b24      	ldr	r3, [pc, #144]	; (b5a8 <uart_cb_2+0xc4>)
    b516:	6818      	ldr	r0, [r3, #0]
			while(i<buf2->len-1){
    b518:	f8b2 4056 	ldrh.w	r4, [r2, #86]	; 0x56
    b51c:	b2cb      	uxtb	r3, r1
    b51e:	1e65      	subs	r5, r4, #1
    b520:	42ab      	cmp	r3, r5
    b522:	f101 0101 	add.w	r1, r1, #1
    b526:	db07      	blt.n	b538 <uart_cb_2+0x54>
            buf_extra->len=buf2->len;
    b528:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
			blink(LED4,2);
    b52c:	2102      	movs	r1, #2
}
    b52e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			blink(LED4,2);
    b532:	481e      	ldr	r0, [pc, #120]	; (b5ac <uart_cb_2+0xc8>)
    b534:	f019 b862 	b.w	245fc <blink>
				buf_extra->data[i]=buf2->data[i];
    b538:	5cd4      	ldrb	r4, [r2, r3]
    b53a:	4403      	add	r3, r0
    b53c:	711c      	strb	r4, [r3, #4]
				i++;
    b53e:	e7eb      	b.n	b518 <uart_cb_2+0x34>
		buf2 = k_malloc(sizeof(*buf2)); //THE SIZE IS 92 BYTES
    b540:	205c      	movs	r0, #92	; 0x5c
    b542:	f01e f93d 	bl	297c0 <k_malloc>
		if (buf2) {
    b546:	b140      	cbz	r0, b55a <uart_cb_2+0x76>
			buf2->len = 0;
    b548:	2300      	movs	r3, #0
    b54a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data),UART_WAIT_FOR_RX);
    b54e:	1d01      	adds	r1, r0, #4
}
    b550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data),UART_WAIT_FOR_RX);
    b554:	4816      	ldr	r0, [pc, #88]	; (b5b0 <uart_cb_2+0xcc>)
    b556:	f019 b837 	b.w	245c8 <uart_rx_enable.constprop.0>
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b55a:	f240 6267 	movw	r2, #1639	; 0x667
}
    b55e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b562:	2300      	movs	r3, #0
    b564:	4813      	ldr	r0, [pc, #76]	; (b5b4 <uart_cb_2+0xd0>)
    b566:	f015 ba05 	b.w	20974 <k_work_reschedule>
	      buf2 = k_malloc(sizeof(*buf2));
    b56a:	205c      	movs	r0, #92	; 0x5c
    b56c:	f01e f928 	bl	297c0 <k_malloc>
		  buf2->len = 0;
    b570:	2300      	movs	r3, #0
	      buf2 = k_malloc(sizeof(*buf2));
    b572:	4601      	mov	r1, r0
		  buf2->len = 0;
    b574:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    b578:	480d      	ldr	r0, [pc, #52]	; (b5b0 <uart_cb_2+0xcc>)
    b57a:	2256      	movs	r2, #86	; 0x56
}
    b57c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b580:	6883      	ldr	r3, [r0, #8]
    b582:	3104      	adds	r1, #4
    b584:	691b      	ldr	r3, [r3, #16]
    b586:	4718      	bx	r3
	    buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,data);
    b588:	684c      	ldr	r4, [r1, #4]
		if (buf2->len > 0){
    b58a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    b58e:	b14b      	cbz	r3, b5a4 <uart_cb_2+0xc0>
	    buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,data);
    b590:	3c04      	subs	r4, #4
		   k_fifo_put(&fifo_uart2_rx_data, buf2);
    b592:	4621      	mov	r1, r4
    b594:	4808      	ldr	r0, [pc, #32]	; (b5b8 <uart_cb_2+0xd4>)
    b596:	f01d ff5f 	bl	29458 <k_queue_append>
		   k_free(buf2);
    b59a:	4620      	mov	r0, r4
}
    b59c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		   k_free(buf2);
    b5a0:	f01e b907 	b.w	297b2 <k_free>
}
    b5a4:	bd70      	pop	{r4, r5, r6, pc}
    b5a6:	bf00      	nop
    b5a8:	20009dd0 	.word	0x20009dd0
    b5ac:	0002aa98 	.word	0x0002aa98
    b5b0:	0002a1c8 	.word	0x0002a1c8
    b5b4:	200091b0 	.word	0x200091b0
    b5b8:	20008b78 	.word	0x20008b78

0000b5bc <flash_init>:
void flash_init(void) {
    b5bc:	b570      	push	{r4, r5, r6, lr}
	fs.flash_device = NVS_PARTITION_DEVICE;
    b5be:	4833      	ldr	r0, [pc, #204]	; (b68c <flash_init+0xd0>)
    b5c0:	4c33      	ldr	r4, [pc, #204]	; (b690 <flash_init+0xd4>)
    b5c2:	62a0      	str	r0, [r4, #40]	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b5c4:	f01d fecf 	bl	29366 <z_device_is_ready>
	if (!device_is_ready(fs.flash_device)) {
    b5c8:	b930      	cbnz	r0, b5d8 <flash_init+0x1c>
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    b5ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b5cc:	4831      	ldr	r0, [pc, #196]	; (b694 <flash_init+0xd8>)
    b5ce:	6819      	ldr	r1, [r3, #0]
}
    b5d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    b5d4:	f019 b9e1 	b.w	2499a <printk>
	fs.offset = NVS_PARTITION_OFFSET;
    b5d8:	2100      	movs	r1, #0
	rc = flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info);
    b5da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	fs.offset = NVS_PARTITION_OFFSET;
    b5dc:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    b5de:	4d2e      	ldr	r5, [pc, #184]	; (b698 <flash_init+0xdc>)
    b5e0:	462a      	mov	r2, r5
    b5e2:	f01c fd5e 	bl	280a2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    b5e6:	b120      	cbz	r0, b5f2 <flash_init+0x36>
		printk("Unable to get page info\n");
    b5e8:	482c      	ldr	r0, [pc, #176]	; (b69c <flash_init+0xe0>)
}
    b5ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash Init failed\n");
    b5ee:	f019 b9d4 	b.w	2499a <printk>
	fs.sector_size = info.size;
    b5f2:	686b      	ldr	r3, [r5, #4]
	rc = nvs_mount(&fs);
    b5f4:	4620      	mov	r0, r4
	fs.sector_size = info.size;
    b5f6:	81a3      	strh	r3, [r4, #12]
	fs.sector_count = 2048U; //NUMBER OF SECTORS total 0X800000 BYTES
    b5f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    b5fc:	81e3      	strh	r3, [r4, #14]
	rc = nvs_mount(&fs);
    b5fe:	f003 fad9 	bl	ebb4 <nvs_mount>
	if (rc) {
    b602:	b108      	cbz	r0, b608 <flash_init+0x4c>
		printk("Flash Init failed\n");
    b604:	4826      	ldr	r0, [pc, #152]	; (b6a0 <flash_init+0xe4>)
    b606:	e7f0      	b.n	b5ea <flash_init+0x2e>
	rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    b608:	4d26      	ldr	r5, [pc, #152]	; (b6a4 <flash_init+0xe8>)
    b60a:	2304      	movs	r3, #4
    b60c:	462a      	mov	r2, r5
    b60e:	2101      	movs	r1, #1
    b610:	4620      	mov	r0, r4
    b612:	f019 fdb1 	bl	25178 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    b616:	2800      	cmp	r0, #0
    b618:	dd21      	ble.n	b65e <flash_init+0xa2>
		printk("Id: %d, button2_counter: %d\n",
    b61a:	2101      	movs	r1, #1
    b61c:	682a      	ldr	r2, [r5, #0]
    b61e:	4822      	ldr	r0, [pc, #136]	; (b6a8 <flash_init+0xec>)
    b620:	f019 f9bb 	bl	2499a <printk>
	rc = nvs_read(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    b624:	4c21      	ldr	r4, [pc, #132]	; (b6ac <flash_init+0xf0>)
    b626:	2304      	movs	r3, #4
    b628:	4622      	mov	r2, r4
    b62a:	2102      	movs	r1, #2
    b62c:	4818      	ldr	r0, [pc, #96]	; (b690 <flash_init+0xd4>)
    b62e:	f019 fda3 	bl	25178 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    b632:	2800      	cmp	r0, #0
    b634:	dd1e      	ble.n	b674 <flash_init+0xb8>
		printk("Id: %d, Current Position: %d\n",
    b636:	6822      	ldr	r2, [r4, #0]
    b638:	2102      	movs	r1, #2
    b63a:	481d      	ldr	r0, [pc, #116]	; (b6b0 <flash_init+0xf4>)
    b63c:	f019 f9ad 	bl	2499a <printk>
			if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS) C_Buffer_Free_Position=C_Buffer_Current_Position+1;
    b640:	4b1c      	ldr	r3, [pc, #112]	; (b6b4 <flash_init+0xf8>)
    b642:	681a      	ldr	r2, [r3, #0]
    b644:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
    b648:	bf3e      	ittt	cc
    b64a:	6822      	ldrcc	r2, [r4, #0]
    b64c:	3201      	addcc	r2, #1
    b64e:	601a      	strcc	r2, [r3, #0]
			if (C_Buffer_Free_Position == CIRCULAR_BUFFER_ELEMENTS) C_Buffer_Free_Position=0;
    b650:	681a      	ldr	r2, [r3, #0]
    b652:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
    b656:	d101      	bne.n	b65c <flash_init+0xa0>
    b658:	2200      	movs	r2, #0
    b65a:	601a      	str	r2, [r3, #0]
}
    b65c:	bd70      	pop	{r4, r5, r6, pc}
		printk("No Reboot counter found, adding it at id %d\n",
    b65e:	2101      	movs	r1, #1
    b660:	4815      	ldr	r0, [pc, #84]	; (b6b8 <flash_init+0xfc>)
    b662:	f019 f99a 	bl	2499a <printk>
		(void)nvs_write(&fs, BOOT_POSITION, &button2_counter,
    b666:	2304      	movs	r3, #4
    b668:	462a      	mov	r2, r5
    b66a:	2101      	movs	r1, #1
    b66c:	4620      	mov	r0, r4
    b66e:	f003 fc73 	bl	ef58 <nvs_write>
    b672:	e7d7      	b.n	b624 <flash_init+0x68>
		printk("Current Position counter found, adding it at id %d\n",
    b674:	2102      	movs	r1, #2
    b676:	4811      	ldr	r0, [pc, #68]	; (b6bc <flash_init+0x100>)
    b678:	f019 f98f 	bl	2499a <printk>
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    b67c:	4622      	mov	r2, r4
}
    b67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    b682:	2304      	movs	r3, #4
    b684:	2102      	movs	r1, #2
    b686:	4802      	ldr	r0, [pc, #8]	; (b690 <flash_init+0xd4>)
    b688:	f003 bc66 	b.w	ef58 <nvs_write>
    b68c:	0002a270 	.word	0x0002a270
    b690:	20009dec 	.word	0x20009dec
    b694:	0002bbf8 	.word	0x0002bbf8
    b698:	20009de0 	.word	0x20009de0
    b69c:	0002bc16 	.word	0x0002bc16
    b6a0:	0002bc2f 	.word	0x0002bc2f
    b6a4:	20009ddc 	.word	0x20009ddc
    b6a8:	0002bc42 	.word	0x0002bc42
    b6ac:	20020f54 	.word	0x20020f54
    b6b0:	0002bc8c 	.word	0x0002bc8c
    b6b4:	20020f58 	.word	0x20020f58
    b6b8:	0002bc5f 	.word	0x0002bc5f
    b6bc:	0002bcaa 	.word	0x0002bcaa

0000b6c0 <send_bluetooth>:
{
    b6c0:	b084      	sub	sp, #16
    b6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6c6:	ac06      	add	r4, sp, #24
    b6c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b6cc:	203d      	movs	r0, #61	; 0x3d
    uint32_t comprimento=buf.len;
    b6ce:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b6d2:	f01e f875 	bl	297c0 <k_malloc>
    int k=0;
    b6d6:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b6d8:	4605      	mov	r5, r0
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b6da:	f8df 8054 	ldr.w	r8, [pc, #84]	; b730 <send_bluetooth+0x70>
    while(k<comprimento-1){
    b6de:	1e77      	subs	r7, r6, #1
    b6e0:	42a7      	cmp	r7, r4
    b6e2:	d91d      	bls.n	b720 <send_bluetooth+0x60>
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b6e4:	42b4      	cmp	r4, r6
    b6e6:	d301      	bcc.n	b6ec <send_bluetooth+0x2c>
    b6e8:	2200      	movs	r2, #0
    b6ea:	e00f      	b.n	b70c <send_bluetooth+0x4c>
    b6ec:	2200      	movs	r2, #0
    b6ee:	1e6b      	subs	r3, r5, #1
       data[small_pkt]=buf.data[k];
    b6f0:	f104 0118 	add.w	r1, r4, #24
    b6f4:	4469      	add	r1, sp
       small_pkt++;
    b6f6:	3201      	adds	r2, #1
	   *(packet_data+small_pkt) = buf.data[k];
    b6f8:	7909      	ldrb	r1, [r1, #4]
       small_pkt++;
    b6fa:	b292      	uxth	r2, r2
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b6fc:	2a3d      	cmp	r2, #61	; 0x3d
	   *(packet_data+small_pkt) = buf.data[k];
    b6fe:	f803 1f01 	strb.w	r1, [r3, #1]!
       k++;
    b702:	f104 0401 	add.w	r4, r4, #1
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b706:	d001      	beq.n	b70c <send_bluetooth+0x4c>
    b708:	42a6      	cmp	r6, r4
    b70a:	d8f1      	bhi.n	b6f0 <send_bluetooth+0x30>
           if (bt_nus_send(NULL, packet_data ,small_pkt)) {
    b70c:	4629      	mov	r1, r5
    b70e:	2000      	movs	r0, #0
    b710:	f004 fafe 	bl	fd10 <bt_nus_send>
    b714:	2800      	cmp	r0, #0
    b716:	d0e3      	beq.n	b6e0 <send_bluetooth+0x20>
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b718:	4640      	mov	r0, r8
    b71a:	f019 f93e 	bl	2499a <printk>
    b71e:	e7df      	b.n	b6e0 <send_bluetooth+0x20>
     k_free(packet_data);
    b720:	4628      	mov	r0, r5
    b722:	f01e f846 	bl	297b2 <k_free>
}
    b726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b72a:	2000      	movs	r0, #0
    b72c:	b004      	add	sp, #16
    b72e:	4770      	bx	lr
    b730:	0002bcde 	.word	0x0002bcde

0000b734 <send_protobuf_thread>:
void send_protobuf_thread(void){
    b734:	b510      	push	{r4, lr}
		    k_sem_take(&send_proto,K_FOREVER);
    b736:	4c05      	ldr	r4, [pc, #20]	; (b74c <send_protobuf_thread+0x18>)
    b738:	f04f 32ff 	mov.w	r2, #4294967295
    b73c:	f04f 33ff 	mov.w	r3, #4294967295
    b740:	4620      	mov	r0, r4
    b742:	f018 ff51 	bl	245e8 <k_sem_take.constprop.0.isra.0>
		    send_protobuf();
    b746:	f018 ff6a 	bl	2461e <send_protobuf>
   while(1){
    b74a:	e7f5      	b.n	b738 <send_protobuf_thread+0x4>
    b74c:	20008b60 	.word	0x20008b60

0000b750 <configure_all_buttons>:
void configure_all_buttons(void){
    b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b752:	4c30      	ldr	r4, [pc, #192]	; (b814 <configure_all_buttons+0xc4>)
    b754:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b758:	4620      	mov	r0, r4
    b75a:	f7ff fc09 	bl	af70 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b75e:	4620      	mov	r0, r4
    b760:	f7ff f9bc 	bl	aadc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b764:	492c      	ldr	r1, [pc, #176]	; (b818 <configure_all_buttons+0xc8>)
    b766:	4b2d      	ldr	r3, [pc, #180]	; (b81c <configure_all_buttons+0xcc>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b768:	4c2d      	ldr	r4, [pc, #180]	; (b820 <configure_all_buttons+0xd0>)
    b76a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b76c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b770:	4620      	mov	r0, r4
    b772:	608b      	str	r3, [r1, #8]
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b774:	4d2b      	ldr	r5, [pc, #172]	; (b824 <configure_all_buttons+0xd4>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b776:	f018 ff39 	bl	245ec <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b77a:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b77c:	4f2a      	ldr	r7, [pc, #168]	; (b828 <configure_all_buttons+0xd8>)
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b77e:	2217      	movs	r2, #23
    b780:	4631      	mov	r1, r6
    b782:	4628      	mov	r0, r5
    b784:	f019 f909 	bl	2499a <printk>
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b788:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b78c:	4638      	mov	r0, r7
    b78e:	f7ff fbef 	bl	af70 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b792:	4638      	mov	r0, r7
    b794:	f7ff f9a2 	bl	aadc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b798:	4924      	ldr	r1, [pc, #144]	; (b82c <configure_all_buttons+0xdc>)
    b79a:	4b25      	ldr	r3, [pc, #148]	; (b830 <configure_all_buttons+0xe0>)
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b79c:	4620      	mov	r0, r4
    b79e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b7a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b7a4:	4f23      	ldr	r7, [pc, #140]	; (b834 <configure_all_buttons+0xe4>)
    b7a6:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b7a8:	f018 ff20 	bl	245ec <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b7ac:	2218      	movs	r2, #24
    b7ae:	4631      	mov	r1, r6
    b7b0:	4628      	mov	r0, r5
    b7b2:	f019 f8f2 	bl	2499a <printk>
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b7b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b7ba:	4638      	mov	r0, r7
    b7bc:	f7ff fbd8 	bl	af70 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON3_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b7c0:	4638      	mov	r0, r7
    b7c2:	f7ff f98b 	bl	aadc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b7c6:	491c      	ldr	r1, [pc, #112]	; (b838 <configure_all_buttons+0xe8>)
    b7c8:	4b1c      	ldr	r3, [pc, #112]	; (b83c <configure_all_buttons+0xec>)
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b7ca:	4620      	mov	r0, r4
    b7cc:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b7ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b7d2:	4f1b      	ldr	r7, [pc, #108]	; (b840 <configure_all_buttons+0xf0>)
    b7d4:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b7d6:	f018 ff09 	bl	245ec <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b7da:	2208      	movs	r2, #8
    b7dc:	4631      	mov	r1, r6
    b7de:	4628      	mov	r0, r5
    b7e0:	f019 f8db 	bl	2499a <printk>
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b7e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b7e8:	4638      	mov	r0, r7
    b7ea:	f7ff fbc1 	bl	af70 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON4_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b7ee:	4638      	mov	r0, r7
    b7f0:	f7ff f974 	bl	aadc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b7f4:	4913      	ldr	r1, [pc, #76]	; (b844 <configure_all_buttons+0xf4>)
    b7f6:	4b14      	ldr	r3, [pc, #80]	; (b848 <configure_all_buttons+0xf8>)
 gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b7f8:	4620      	mov	r0, r4
    b7fa:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b7fc:	f44f 7300 	mov.w	r3, #512	; 0x200
    b800:	608b      	str	r3, [r1, #8]
    b802:	f018 fef3 	bl	245ec <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b806:	4631      	mov	r1, r6
    b808:	4628      	mov	r0, r5
}
    b80a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b80e:	2209      	movs	r2, #9
    b810:	f019 b8c3 	b.w	2499a <printk>
    b814:	0002aae8 	.word	0x0002aae8
    b818:	20009e7c 	.word	0x20009e7c
    b81c:	0000ae71 	.word	0x0000ae71
    b820:	0002a180 	.word	0x0002a180
    b824:	0002bd02 	.word	0x0002bd02
    b828:	0002aae0 	.word	0x0002aae0
    b82c:	20009e70 	.word	0x20009e70
    b830:	0000b3f9 	.word	0x0000b3f9
    b834:	0002aad8 	.word	0x0002aad8
    b838:	20009e64 	.word	0x20009e64
    b83c:	0000b3d9 	.word	0x0000b3d9
    b840:	0002aad0 	.word	0x0002aad0
    b844:	20009e58 	.word	0x20009e58
    b848:	0000b3b9 	.word	0x0000b3b9

0000b84c <configure_digital_inputs>:
void configure_digital_inputs(void){
    b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT );
    b84e:	4c2e      	ldr	r4, [pc, #184]	; (b908 <configure_digital_inputs+0xbc>)
    b850:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b854:	4620      	mov	r0, r4
    b856:	f7ff fb8b 	bl	af70 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 4 Value:%d \n",gpio_pin_get_dt(DIG_0_ADR));
    b85a:	4620      	mov	r0, r4
    b85c:	f7ff f838 	bl	a8d0 <gpio_pin_get_dt>
    b860:	4601      	mov	r1, r0
    b862:	482a      	ldr	r0, [pc, #168]	; (b90c <configure_digital_inputs+0xc0>)
    b864:	f019 f899 	bl	2499a <printk>
 gpio_pin_interrupt_configure_dt(DIG_0_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b868:	4620      	mov	r0, r4
    b86a:	f7ff f937 	bl	aadc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b86e:	4928      	ldr	r1, [pc, #160]	; (b910 <configure_digital_inputs+0xc4>)
    b870:	4b28      	ldr	r3, [pc, #160]	; (b914 <configure_digital_inputs+0xc8>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b872:	4c29      	ldr	r4, [pc, #164]	; (b918 <configure_digital_inputs+0xcc>)
    b874:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b876:	2310      	movs	r3, #16
    b878:	4620      	mov	r0, r4
    b87a:	608b      	str	r3, [r1, #8]
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b87c:	4d27      	ldr	r5, [pc, #156]	; (b91c <configure_digital_inputs+0xd0>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b87e:	f018 feb5 	bl	245ec <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b882:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b884:	4f26      	ldr	r7, [pc, #152]	; (b920 <configure_digital_inputs+0xd4>)
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b886:	2204      	movs	r2, #4
    b888:	4631      	mov	r1, r6
    b88a:	4628      	mov	r0, r5
    b88c:	f019 f885 	bl	2499a <printk>
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b890:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b894:	4638      	mov	r0, r7
    b896:	f7ff fb6b 	bl	af70 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 5 Value:%d \n",gpio_pin_get_dt(DIG_1_ADR));
    b89a:	4638      	mov	r0, r7
    b89c:	f7ff f818 	bl	a8d0 <gpio_pin_get_dt>
    b8a0:	4601      	mov	r1, r0
    b8a2:	4820      	ldr	r0, [pc, #128]	; (b924 <configure_digital_inputs+0xd8>)
    b8a4:	f019 f879 	bl	2499a <printk>
 gpio_pin_interrupt_configure_dt(DIG_1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b8a8:	4638      	mov	r0, r7
    b8aa:	f7ff f917 	bl	aadc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b8ae:	491e      	ldr	r1, [pc, #120]	; (b928 <configure_digital_inputs+0xdc>)
    b8b0:	4b1e      	ldr	r3, [pc, #120]	; (b92c <configure_digital_inputs+0xe0>)
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b8b2:	4f1f      	ldr	r7, [pc, #124]	; (b930 <configure_digital_inputs+0xe4>)
    b8b4:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b8b6:	2320      	movs	r3, #32
 gpio_add_callback(DIG_1.port, DIG_1_CB);
    b8b8:	4620      	mov	r0, r4
    b8ba:	608b      	str	r3, [r1, #8]
    b8bc:	f018 fe96 	bl	245ec <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b8c0:	2205      	movs	r2, #5
    b8c2:	4631      	mov	r1, r6
    b8c4:	4628      	mov	r0, r5
    b8c6:	f019 f868 	bl	2499a <printk>
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b8ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b8ce:	4638      	mov	r0, r7
    b8d0:	f7ff fb4e 	bl	af70 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 6 Value:%d \n",gpio_pin_get_dt(DIG_2_ADR));
    b8d4:	4638      	mov	r0, r7
    b8d6:	f7fe fffb 	bl	a8d0 <gpio_pin_get_dt>
    b8da:	4601      	mov	r1, r0
    b8dc:	4815      	ldr	r0, [pc, #84]	; (b934 <configure_digital_inputs+0xe8>)
    b8de:	f019 f85c 	bl	2499a <printk>
 gpio_pin_interrupt_configure_dt(DIG_2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b8e2:	4638      	mov	r0, r7
    b8e4:	f7ff f8fa 	bl	aadc <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b8e8:	4913      	ldr	r1, [pc, #76]	; (b938 <configure_digital_inputs+0xec>)
    b8ea:	4b14      	ldr	r3, [pc, #80]	; (b93c <configure_digital_inputs+0xf0>)
 gpio_add_callback(DIG_2.port, DIG_2_CB);
    b8ec:	4620      	mov	r0, r4
    b8ee:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b8f0:	2340      	movs	r3, #64	; 0x40
    b8f2:	608b      	str	r3, [r1, #8]
    b8f4:	f018 fe7a 	bl	245ec <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b8f8:	4631      	mov	r1, r6
    b8fa:	4628      	mov	r0, r5
}
    b8fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b900:	2206      	movs	r2, #6
    b902:	f019 b84a 	b.w	2499a <printk>
    b906:	bf00      	nop
    b908:	0002aac8 	.word	0x0002aac8
    b90c:	0002bd1e 	.word	0x0002bd1e
    b910:	20009e4c 	.word	0x20009e4c
    b914:	0000a931 	.word	0x0000a931
    b918:	0002a168 	.word	0x0002a168
    b91c:	0002bd36 	.word	0x0002bd36
    b920:	0002aac0 	.word	0x0002aac0
    b924:	0002bd59 	.word	0x0002bd59
    b928:	20009e40 	.word	0x20009e40
    b92c:	0000a955 	.word	0x0000a955
    b930:	0002aab8 	.word	0x0002aab8
    b934:	0002bd71 	.word	0x0002bd71
    b938:	20009e34 	.word	0x20009e34
    b93c:	0000a979 	.word	0x0000a979

0000b940 <configure_led>:
void configure_led(void){
    b940:	b508      	push	{r3, lr}
 gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    b942:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b946:	480a      	ldr	r0, [pc, #40]	; (b970 <configure_led+0x30>)
    b948:	f7ff fb12 	bl	af70 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    b94c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b950:	4808      	ldr	r0, [pc, #32]	; (b974 <configure_led+0x34>)
    b952:	f7ff fb0d 	bl	af70 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    b956:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b95a:	4807      	ldr	r0, [pc, #28]	; (b978 <configure_led+0x38>)
    b95c:	f7ff fb08 	bl	af70 <gpio_pin_configure_dt.isra.0>
}
    b960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    b964:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b968:	4804      	ldr	r0, [pc, #16]	; (b97c <configure_led+0x3c>)
    b96a:	f7ff bb01 	b.w	af70 <gpio_pin_configure_dt.isra.0>
    b96e:	bf00      	nop
    b970:	0002aab0 	.word	0x0002aab0
    b974:	0002aaa8 	.word	0x0002aaa8
    b978:	0002aaa0 	.word	0x0002aaa0
    b97c:	0002aa98 	.word	0x0002aa98

0000b980 <turn_off_all_leds>:
void turn_off_all_leds(void){
    b980:	b508      	push	{r3, lr}
       gpio_pin_set_dt(LED1, OFF);
    b982:	2100      	movs	r1, #0
    b984:	4808      	ldr	r0, [pc, #32]	; (b9a8 <turn_off_all_leds+0x28>)
    b986:	f7ff fa41 	bl	ae0c <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED2, OFF);
    b98a:	2100      	movs	r1, #0
    b98c:	4807      	ldr	r0, [pc, #28]	; (b9ac <turn_off_all_leds+0x2c>)
    b98e:	f7ff fa3d 	bl	ae0c <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED3, OFF);
    b992:	2100      	movs	r1, #0
    b994:	4806      	ldr	r0, [pc, #24]	; (b9b0 <turn_off_all_leds+0x30>)
    b996:	f7ff fa39 	bl	ae0c <gpio_pin_set_dt.isra.0>
}
    b99a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       gpio_pin_set_dt(LED4, OFF);
    b99e:	2100      	movs	r1, #0
    b9a0:	4804      	ldr	r0, [pc, #16]	; (b9b4 <turn_off_all_leds+0x34>)
    b9a2:	f7ff ba33 	b.w	ae0c <gpio_pin_set_dt.isra.0>
    b9a6:	bf00      	nop
    b9a8:	0002aab0 	.word	0x0002aab0
    b9ac:	0002aaa8 	.word	0x0002aaa8
    b9b0:	0002aaa0 	.word	0x0002aaa0
    b9b4:	0002aa98 	.word	0x0002aa98

0000b9b8 <configure_adc>:
void configure_adc(void){
    b9b8:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b9ba:	2500      	movs	r5, #0
    b9bc:	4c12      	ldr	r4, [pc, #72]	; (ba08 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    b9be:	f854 0c06 	ldr.w	r0, [r4, #-6]
    b9c2:	f01d fcd0 	bl	29366 <z_device_is_ready>
    b9c6:	b920      	cbnz	r0, b9d2 <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    b9c8:	4810      	ldr	r0, [pc, #64]	; (ba0c <configure_adc+0x54>)
}
    b9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    b9ce:	f018 bfe4 	b.w	2499a <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b9d2:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b9d6:	b16b      	cbz	r3, b9f4 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    b9d8:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    b9dc:	6883      	ldr	r3, [r0, #8]
    b9de:	4621      	mov	r1, r4
    b9e0:	681b      	ldr	r3, [r3, #0]
    b9e2:	4798      	blx	r3
		if (err < 0) {
    b9e4:	1e02      	subs	r2, r0, #0
    b9e6:	da08      	bge.n	b9fa <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b9e8:	4629      	mov	r1, r5
}
    b9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    b9ee:	4808      	ldr	r0, [pc, #32]	; (ba10 <configure_adc+0x58>)
    b9f0:	f018 bfd3 	b.w	2499a <printk>
		return -ENOTSUP;
    b9f4:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b9f8:	e7f6      	b.n	b9e8 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b9fa:	3501      	adds	r5, #1
    b9fc:	2d06      	cmp	r5, #6
    b9fe:	f104 0414 	add.w	r4, r4, #20
    ba02:	d1dc      	bne.n	b9be <configure_adc+0x6>
}
    ba04:	bd38      	pop	{r3, r4, r5, pc}
    ba06:	bf00      	nop
    ba08:	0002aa26 	.word	0x0002aa26
    ba0c:	0002bd89 	.word	0x0002bd89
    ba10:	0002bdaa 	.word	0x0002bdaa

0000ba14 <main>:
{
    ba14:	b570      	push	{r4, r5, r6, lr}
    ba16:	b08c      	sub	sp, #48	; 0x30
	return z_impl_k_mutex_init(mutex);
    ba18:	4868      	ldr	r0, [pc, #416]	; (bbbc <main+0x1a8>)
    ba1a:	f01d fcfd 	bl	29418 <z_impl_k_mutex_init>
	configure_led();
    ba1e:	f7ff ff8f 	bl	b940 <configure_led>
	turn_off_all_leds();
    ba22:	f7ff ffad 	bl	b980 <turn_off_all_leds>
 	configure_all_buttons();
    ba26:	f7ff fe93 	bl	b750 <configure_all_buttons>
	configure_digital_inputs();
    ba2a:	f7ff ff0f 	bl	b84c <configure_digital_inputs>
	configure_adc();
    ba2e:	f7ff ffc3 	bl	b9b8 <configure_adc>
    ba32:	4d63      	ldr	r5, [pc, #396]	; (bbc0 <main+0x1ac>)
    ba34:	4628      	mov	r0, r5
    ba36:	f01d fc96 	bl	29366 <z_device_is_ready>
	if (!device_is_ready(uart)) {
    ba3a:	b1d8      	cbz	r0, ba74 <main+0x60>
	rx = k_malloc(sizeof(*rx));
    ba3c:	205c      	movs	r0, #92	; 0x5c
    ba3e:	f01d febf 	bl	297c0 <k_malloc>
	if (rx) {
    ba42:	4604      	mov	r4, r0
    ba44:	b1b0      	cbz	r0, ba74 <main+0x60>
		rx->len = 0;
    ba46:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    ba48:	495e      	ldr	r1, [pc, #376]	; (bbc4 <main+0x1b0>)
		rx->len = 0;
    ba4a:	f8a0 605a 	strh.w	r6, [r0, #90]	; 0x5a
	k_work_init_delayable(&uart_work, uart_work_handler);
    ba4e:	485e      	ldr	r0, [pc, #376]	; (bbc8 <main+0x1b4>)
    ba50:	f014 fe74 	bl	2073c <k_work_init_delayable>
	if (api->callback_set == NULL) {
    ba54:	68ab      	ldr	r3, [r5, #8]
    ba56:	681b      	ldr	r3, [r3, #0]
    ba58:	b973      	cbnz	r3, ba78 <main+0x64>
		k_free(rx);
    ba5a:	4620      	mov	r0, r4
    ba5c:	f01d fea9 	bl	297b2 <k_free>
		LOG_ERR("Cannot initialize UART callback");
    ba60:	4b5a      	ldr	r3, [pc, #360]	; (bbcc <main+0x1b8>)
    ba62:	2201      	movs	r2, #1
    ba64:	9302      	str	r3, [sp, #8]
    ba66:	2300      	movs	r3, #0
    ba68:	4959      	ldr	r1, [pc, #356]	; (bbd0 <main+0x1bc>)
    ba6a:	4618      	mov	r0, r3
    ba6c:	e9cd 3300 	strd	r3, r3, [sp]
    ba70:	f018 fd9b 	bl	245aa <z_log_msg_runtime_create.constprop.0>
		error();
    ba74:	f018 fde9 	bl	2464a <error>
	return api->callback_set(dev, callback, user_data);
    ba78:	4632      	mov	r2, r6
    ba7a:	4628      	mov	r0, r5
    ba7c:	4955      	ldr	r1, [pc, #340]	; (bbd4 <main+0x1c0>)
    ba7e:	4798      	blx	r3
	if (err) {
    ba80:	2800      	cmp	r0, #0
    ba82:	d1ea      	bne.n	ba5a <main+0x46>
	tx = k_malloc(sizeof(*tx));
    ba84:	205c      	movs	r0, #92	; 0x5c
    ba86:	f01d fe9b 	bl	297c0 <k_malloc>
	if (tx) {
    ba8a:	4606      	mov	r6, r0
    ba8c:	2800      	cmp	r0, #0
    ba8e:	d0f1      	beq.n	ba74 <main+0x60>
		pos = snprintf(tx->data, sizeof(tx->data),
    ba90:	1d03      	adds	r3, r0, #4
    ba92:	4618      	mov	r0, r3
    ba94:	4950      	ldr	r1, [pc, #320]	; (bbd8 <main+0x1c4>)
    ba96:	f01e f80a 	bl	29aae <strcpy>
		tx->len = pos;
    ba9a:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ba9c:	4601      	mov	r1, r0
		tx->len = pos;
    ba9e:	f8a6 205a 	strh.w	r2, [r6, #90]	; 0x5a
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    baa2:	4628      	mov	r0, r5
    baa4:	f018 fd98 	bl	245d8 <uart_tx.constprop.0>
	if (err) {
    baa8:	4601      	mov	r1, r0
    baaa:	b118      	cbz	r0, bab4 <main+0xa0>
		printf("Cannot display welcome message (err: %d)", err);
    baac:	484b      	ldr	r0, [pc, #300]	; (bbdc <main+0x1c8>)
    baae:	f017 fe47 	bl	23740 <iprintf>
	if (err) {
    bab2:	e7df      	b.n	ba74 <main+0x60>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_WAIT_FOR_RX);
    bab4:	1d21      	adds	r1, r4, #4
    bab6:	4628      	mov	r0, r5
    bab8:	f018 fd86 	bl	245c8 <uart_rx_enable.constprop.0>
	if (err) {
    babc:	4604      	mov	r4, r0
    babe:	2800      	cmp	r0, #0
    bac0:	d1d8      	bne.n	ba74 <main+0x60>
    buf_extra = k_malloc(sizeof(*buf_extra));
    bac2:	205c      	movs	r0, #92	; 0x5c
    bac4:	f01d fe7c 	bl	297c0 <k_malloc>
    bac8:	4b45      	ldr	r3, [pc, #276]	; (bbe0 <main+0x1cc>)
    baca:	6018      	str	r0, [r3, #0]
    bacc:	4e45      	ldr	r6, [pc, #276]	; (bbe4 <main+0x1d0>)
    bace:	4630      	mov	r0, r6
    bad0:	f01d fc49 	bl	29366 <z_device_is_ready>
	if (!device_is_ready(uart_2)) {
    bad4:	2800      	cmp	r0, #0
    bad6:	d0cd      	beq.n	ba74 <main+0x60>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    bad8:	205c      	movs	r0, #92	; 0x5c
    bada:	f01d fe71 	bl	297c0 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    bade:	4942      	ldr	r1, [pc, #264]	; (bbe8 <main+0x1d4>)
	rx_uart2->len = 0;
    bae0:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    bae4:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    bae6:	4841      	ldr	r0, [pc, #260]	; (bbec <main+0x1d8>)
    bae8:	f014 fe28 	bl	2073c <k_work_init_delayable>
	if (api->callback_set == NULL) {
    baec:	68b3      	ldr	r3, [r6, #8]
    baee:	681b      	ldr	r3, [r3, #0]
    baf0:	b11b      	cbz	r3, bafa <main+0xe6>
	return api->callback_set(dev, callback, user_data);
    baf2:	4622      	mov	r2, r4
    baf4:	4630      	mov	r0, r6
    baf6:	493e      	ldr	r1, [pc, #248]	; (bbf0 <main+0x1dc>)
    baf8:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), UART_WAIT_FOR_RX);
    bafa:	483a      	ldr	r0, [pc, #232]	; (bbe4 <main+0x1d0>)
    bafc:	1d29      	adds	r1, r5, #4
    bafe:	f018 fd63 	bl	245c8 <uart_rx_enable.constprop.0>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    bb02:	483c      	ldr	r0, [pc, #240]	; (bbf4 <main+0x1e0>)
    bb04:	f008 ffbe 	bl	14a84 <bt_conn_auth_cb_register>
		if (err) {
    bb08:	b128      	cbz	r0, bb16 <main+0x102>
			printk("Failed to register authorization callbacks.\n");
    bb0a:	483b      	ldr	r0, [pc, #236]	; (bbf8 <main+0x1e4>)
}
    bb0c:	b00c      	add	sp, #48	; 0x30
    bb0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    bb12:	f018 bf42 	b.w	2499a <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    bb16:	4839      	ldr	r0, [pc, #228]	; (bbfc <main+0x1e8>)
    bb18:	f008 ffce 	bl	14ab8 <bt_conn_auth_info_cb_register>
		if (err) {
    bb1c:	b108      	cbz	r0, bb22 <main+0x10e>
			printk("Failed to register authorization info callbacks.\n");
    bb1e:	4838      	ldr	r0, [pc, #224]	; (bc00 <main+0x1ec>)
    bb20:	e7f4      	b.n	bb0c <main+0xf8>
	err = bt_enable(NULL);
    bb22:	f006 fe61 	bl	127e8 <bt_enable>
	if (err) {
    bb26:	2800      	cmp	r0, #0
    bb28:	d1a4      	bne.n	ba74 <main+0x60>
	printf("Bluetooth initialized \n\r");
    bb2a:	4836      	ldr	r0, [pc, #216]	; (bc04 <main+0x1f0>)
    bb2c:	f017 fe08 	bl	23740 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    bb30:	4835      	ldr	r0, [pc, #212]	; (bc08 <main+0x1f4>)
    bb32:	f017 fe05 	bl	23740 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    bb36:	4835      	ldr	r0, [pc, #212]	; (bc0c <main+0x1f8>)
    bb38:	f017 fe02 	bl	23740 <iprintf>
	z_impl_k_sem_give(sem);
    bb3c:	4834      	ldr	r0, [pc, #208]	; (bc10 <main+0x1fc>)
    bb3e:	f014 f979 	bl	1fe34 <z_impl_k_sem_give>
	err = bt_nus_init(&nus_cb);
    bb42:	4834      	ldr	r0, [pc, #208]	; (bc14 <main+0x200>)
    bb44:	f004 f8d8 	bl	fcf8 <bt_nus_init>
	if (err) {
    bb48:	4601      	mov	r1, r0
    bb4a:	b128      	cbz	r0, bb58 <main+0x144>
		printf("Failed to initialize UART service (err: %d)", err);
    bb4c:	4832      	ldr	r0, [pc, #200]	; (bc18 <main+0x204>)
}
    bb4e:	b00c      	add	sp, #48	; 0x30
    bb50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    bb54:	f017 bdf4 	b.w	23740 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    bb58:	4d30      	ldr	r5, [pc, #192]	; (bc1c <main+0x208>)
    bb5a:	ac07      	add	r4, sp, #28
    bb5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    bb5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    bb60:	682b      	ldr	r3, [r5, #0]
    bb62:	2501      	movs	r5, #1
    bb64:	6023      	str	r3, [r4, #0]
    bb66:	2202      	movs	r2, #2
    bb68:	4b2d      	ldr	r3, [pc, #180]	; (bc20 <main+0x20c>)
    bb6a:	492e      	ldr	r1, [pc, #184]	; (bc24 <main+0x210>)
    bb6c:	9500      	str	r5, [sp, #0]
    bb6e:	a807      	add	r0, sp, #28
    bb70:	f007 fd2e 	bl	135d0 <bt_le_adv_start>
	if (err) {
    bb74:	4604      	mov	r4, r0
    bb76:	b128      	cbz	r0, bb84 <main+0x170>
		printf("Advertising failed to start (err %d)", err);
    bb78:	4601      	mov	r1, r0
    bb7a:	482b      	ldr	r0, [pc, #172]	; (bc28 <main+0x214>)
    bb7c:	f017 fde0 	bl	23740 <iprintf>
}
    bb80:	b00c      	add	sp, #48	; 0x30
    bb82:	bd70      	pop	{r4, r5, r6, pc}
	flag=1;//print ad values once
    bb84:	4b29      	ldr	r3, [pc, #164]	; (bc2c <main+0x218>)
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    bb86:	f242 6067 	movw	r0, #9831	; 0x2667
    bb8a:	2100      	movs	r1, #0
    bb8c:	601d      	str	r5, [r3, #0]
    bb8e:	f018 fd33 	bl	245f8 <k_sleep.isra.0>
    flash_init();
    bb92:	f7ff fd13 	bl	b5bc <flash_init>
    bb96:	4e26      	ldr	r6, [pc, #152]	; (bc30 <main+0x21c>)
    bb98:	ad05      	add	r5, sp, #20
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    bb9a:	3401      	adds	r4, #1
    bb9c:	e896 0003 	ldmia.w	r6, {r0, r1}
    bba0:	e885 0003 	stmia.w	r5, {r0, r1}
        gpio_pin_set_dt(&led, value);
    bba4:	4628      	mov	r0, r5
    bba6:	f004 0101 	and.w	r1, r4, #1
    bbaa:	f7ff f92f 	bl	ae0c <gpio_pin_set_dt.isra.0>
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    bbae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bbb2:	2100      	movs	r1, #0
    bbb4:	f018 fd20 	bl	245f8 <k_sleep.isra.0>
	for (;;) {
    bbb8:	e7ef      	b.n	bb9a <main+0x186>
    bbba:	bf00      	nop
    bbbc:	20009e20 	.word	0x20009e20
    bbc0:	0002a1e0 	.word	0x0002a1e0
    bbc4:	0000a9f1 	.word	0x0000a9f1
    bbc8:	200091e0 	.word	0x200091e0
    bbcc:	0002bdcc 	.word	0x0002bdcc
    bbd0:	0002a800 	.word	0x0002a800
    bbd4:	0000b14d 	.word	0x0000b14d
    bbd8:	0002bdec 	.word	0x0002bdec
    bbdc:	0002be13 	.word	0x0002be13
    bbe0:	20009dd0 	.word	0x20009dd0
    bbe4:	0002a1c8 	.word	0x0002a1c8
    bbe8:	0000a99d 	.word	0x0000a99d
    bbec:	200091b0 	.word	0x200091b0
    bbf0:	0000b4e5 	.word	0x0000b4e5
    bbf4:	200083cc 	.word	0x200083cc
    bbf8:	0002be3c 	.word	0x0002be3c
    bbfc:	200083bc 	.word	0x200083bc
    bc00:	0002be69 	.word	0x0002be69
    bc04:	0002be9b 	.word	0x0002be9b
    bc08:	0002beb4 	.word	0x0002beb4
    bc0c:	0002bed5 	.word	0x0002bed5
    bc10:	20008ad0 	.word	0x20008ad0
    bc14:	200083b0 	.word	0x200083b0
    bc18:	0002befe 	.word	0x0002befe
    bc1c:	0002a850 	.word	0x0002a850
    bc20:	0002aa08 	.word	0x0002aa08
    bc24:	0002aa10 	.word	0x0002aa10
    bc28:	0002bf2a 	.word	0x0002bf2a
    bc2c:	20009e1c 	.word	0x20009e1c
    bc30:	0002aaa8 	.word	0x0002aaa8

0000bc34 <adc_raw_to_millivolts_dt.constprop.0.isra.0>:
	if (!spec->channel_cfg_dt_node_exists) {
    bc34:	4b10      	ldr	r3, [pc, #64]	; (bc78 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x44>)
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    bc36:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    bc38:	795a      	ldrb	r2, [r3, #5]
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    bc3a:	4605      	mov	r5, r0
	if (!spec->channel_cfg_dt_node_exists) {
    bc3c:	b1d2      	cbz	r2, bc74 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bc3e:	79da      	ldrb	r2, [r3, #7]
	resolution = spec->resolution;
    bc40:	7c1c      	ldrb	r4, [r3, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bc42:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
    bc44:	bf09      	itett	eq
    bc46:	681a      	ldreq	r2, [r3, #0]
		vref_mv = spec->vref_mv;
    bc48:	89d9      	ldrhne	r1, [r3, #14]
	return api->ref_internal;
    bc4a:	6892      	ldreq	r2, [r2, #8]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bc4c:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
    bc4e:	7a9a      	ldrb	r2, [r3, #10]
    bc50:	0692      	lsls	r2, r2, #26
	int32_t adc_mv = *valp * ref_mv;
    bc52:	6802      	ldr	r2, [r0, #0]
		resolution -= 1U;
    bc54:	bf48      	it	mi
    bc56:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int32_t adc_mv = *valp * ref_mv;
    bc5a:	fb01 f202 	mul.w	r2, r1, r2
	int ret = adc_gain_invert(gain, &adc_mv);
    bc5e:	7998      	ldrb	r0, [r3, #6]
    bc60:	a901      	add	r1, sp, #4
		resolution -= 1U;
    bc62:	bf48      	it	mi
    bc64:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    bc66:	9201      	str	r2, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    bc68:	f00d fcd4 	bl	19614 <adc_gain_invert>
	if (ret == 0) {
    bc6c:	b910      	cbnz	r0, bc74 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
		*valp = (adc_mv >> resolution);
    bc6e:	9b01      	ldr	r3, [sp, #4]
    bc70:	4123      	asrs	r3, r4
    bc72:	602b      	str	r3, [r5, #0]
}
    bc74:	b003      	add	sp, #12
    bc76:	bd30      	pop	{r4, r5, pc}
    bc78:	0002aa20 	.word	0x0002aa20

0000bc7c <flash_button2_counter>:
void flash_button2_counter(void){
    bc7c:	b510      	push	{r4, lr}
    button2_counter++;
    bc7e:	4c0d      	ldr	r4, [pc, #52]	; (bcb4 <flash_button2_counter+0x38>)
	(void)nvs_write(
    bc80:	2101      	movs	r1, #1
    button2_counter++;
    bc82:	6823      	ldr	r3, [r4, #0]
	(void)nvs_write(
    bc84:	4622      	mov	r2, r4
    button2_counter++;
    bc86:	3301      	adds	r3, #1
    bc88:	6023      	str	r3, [r4, #0]
	(void)nvs_write(
    bc8a:	480b      	ldr	r0, [pc, #44]	; (bcb8 <flash_button2_counter+0x3c>)
    bc8c:	2304      	movs	r3, #4
    bc8e:	f003 f963 	bl	ef58 <nvs_write>
    rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    bc92:	2304      	movs	r3, #4
    bc94:	4622      	mov	r2, r4
    bc96:	2101      	movs	r1, #1
    bc98:	4807      	ldr	r0, [pc, #28]	; (bcb8 <flash_button2_counter+0x3c>)
    bc9a:	f019 fa6d 	bl	25178 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    bc9e:	2800      	cmp	r0, #0
    bca0:	dd06      	ble.n	bcb0 <flash_button2_counter+0x34>
		printk("Id: %d, button2_counter: %d\n",
    bca2:	6822      	ldr	r2, [r4, #0]
    bca4:	2101      	movs	r1, #1
}
    bca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Id: %d, button2_counter: %d\n",
    bcaa:	4804      	ldr	r0, [pc, #16]	; (bcbc <flash_button2_counter+0x40>)
    bcac:	f018 be75 	b.w	2499a <printk>
}
    bcb0:	bd10      	pop	{r4, pc}
    bcb2:	bf00      	nop
    bcb4:	20009ddc 	.word	0x20009ddc
    bcb8:	20009dec 	.word	0x20009dec
    bcbc:	0002bc42 	.word	0x0002bc42

0000bcc0 <time_stamp_function>:
uint32_t time_stamp_function(void){
    bcc0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    bcc2:	f01d fc87 	bl	295d4 <z_impl_k_uptime_ticks>
    bcc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bcca:	fba0 0302 	umull	r0, r3, r0, r2
    bcce:	fb02 3101 	mla	r1, r2, r1, r3
    bcd2:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    bcd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bcd8:	2300      	movs	r3, #0
    bcda:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    bcde:	0bc9      	lsrs	r1, r1, #15
    bce0:	f7fd f8b6 	bl	8e50 <__aeabi_ldivmod>
    bce4:	4603      	mov	r3, r0
}
    bce6:	4801      	ldr	r0, [pc, #4]	; (bcec <time_stamp_function+0x2c>)
    bce8:	4418      	add	r0, r3
    bcea:	bd08      	pop	{r3, pc}
    bcec:	61cf9980 	.word	0x61cf9980

0000bcf0 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    bcf0:	b538      	push	{r3, r4, r5, lr}
    bcf2:	460d      	mov	r5, r1
    bcf4:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    bcf6:	f7ff ffe3 	bl	bcc0 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    bcfa:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    bcfc:	4b04      	ldr	r3, [pc, #16]	; (bd10 <values_of_digital_sensor+0x20>)
    bcfe:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    bd02:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    bd06:	e9c4 0200 	strd	r0, r2, [r4]
}
    bd0a:	4620      	mov	r0, r4
    bd0c:	bd38      	pop	{r3, r4, r5, pc}
    bd0e:	bf00      	nop
    bd10:	2002156c 	.word	0x2002156c

0000bd14 <read_memory>:
_Circular_Buffer read_memory(uint32_t Pos){
    bd14:	b570      	push	{r4, r5, r6, lr}
    bd16:	4606      	mov	r6, r0
    bd18:	460d      	mov	r5, r1
    buf = k_malloc(size);
    bd1a:	2040      	movs	r0, #64	; 0x40
    bd1c:	f01d fd50 	bl	297c0 <k_malloc>
    uint16_t Id= Pos + BASE_DATA_BUFFER;
    bd20:	f505 717a 	add.w	r1, r5, #1000	; 0x3e8
    err=nvs_read(&fs, Id, buf, size);
    bd24:	4602      	mov	r2, r0
    bd26:	2340      	movs	r3, #64	; 0x40
    buf = k_malloc(size);
    bd28:	4604      	mov	r4, r0
    err=nvs_read(&fs, Id, buf, size);
    bd2a:	b289      	uxth	r1, r1
    bd2c:	4809      	ldr	r0, [pc, #36]	; (bd54 <read_memory+0x40>)
    bd2e:	f019 fa23 	bl	25178 <nvs_read>
    return *buf;
    bd32:	4635      	mov	r5, r6
    printf("Result read=%d bytes\n",err);
    bd34:	b281      	uxth	r1, r0
    bd36:	4808      	ldr	r0, [pc, #32]	; (bd58 <read_memory+0x44>)
    bd38:	f017 fd02 	bl	23740 <iprintf>
    return *buf;
    bd3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    bd4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    bd50:	4630      	mov	r0, r6
    bd52:	bd70      	pop	{r4, r5, r6, pc}
    bd54:	20009dec 	.word	0x20009dec
    bd58:	0002bff2 	.word	0x0002bff2

0000bd5c <save_memory>:
void save_memory(uint32_t Pos){
    bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    printf("Size of structure=%d bytes\n",size);
    bd5e:	2140      	movs	r1, #64	; 0x40
void save_memory(uint32_t Pos){
    bd60:	4606      	mov	r6, r0
    printf("Size of structure=%d bytes\n",size);
    bd62:	4818      	ldr	r0, [pc, #96]	; (bdc4 <save_memory+0x68>)
    bd64:	f017 fcec 	bl	23740 <iprintf>
    buf = k_malloc(size);
    bd68:	2040      	movs	r0, #64	; 0x40
    bd6a:	f01d fd29 	bl	297c0 <k_malloc>
    *buf=C_Buffer[Pos];
    bd6e:	4605      	mov	r5, r0
    buf = k_malloc(size);
    bd70:	4607      	mov	r7, r0
    *buf=C_Buffer[Pos];
    bd72:	4c15      	ldr	r4, [pc, #84]	; (bdc8 <save_memory+0x6c>)
    bd74:	eb04 1486 	add.w	r4, r4, r6, lsl #6
    bd78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    err=nvs_write(&fs, id, buf,size);
    bd88:	4c10      	ldr	r4, [pc, #64]	; (bdcc <save_memory+0x70>)
    *buf=C_Buffer[Pos];
    bd8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    printf("Position %d\n",Pos); 
    bd8e:	4631      	mov	r1, r6
    bd90:	480f      	ldr	r0, [pc, #60]	; (bdd0 <save_memory+0x74>)
    bd92:	f017 fcd5 	bl	23740 <iprintf>
    uint16_t id= Pos + BASE_DATA_BUFFER;
    bd96:	f506 717a 	add.w	r1, r6, #1000	; 0x3e8
    err=nvs_write(&fs, id, buf,size);
    bd9a:	463a      	mov	r2, r7
    bd9c:	2340      	movs	r3, #64	; 0x40
    bd9e:	4620      	mov	r0, r4
    bda0:	b289      	uxth	r1, r1
    bda2:	f003 f8d9 	bl	ef58 <nvs_write>
    printf("Result=%d bytes saved\n",err);
    bda6:	b281      	uxth	r1, r0
    bda8:	480a      	ldr	r0, [pc, #40]	; (bdd4 <save_memory+0x78>)
    bdaa:	f017 fcc9 	bl	23740 <iprintf>
    (void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    bdae:	2304      	movs	r3, #4
    bdb0:	4620      	mov	r0, r4
    bdb2:	2102      	movs	r1, #2
    bdb4:	4a08      	ldr	r2, [pc, #32]	; (bdd8 <save_memory+0x7c>)
    bdb6:	f003 f8cf 	bl	ef58 <nvs_write>
    k_free(buf);
    bdba:	4638      	mov	r0, r7
}
    bdbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    k_free(buf);
    bdc0:	f01d bcf7 	b.w	297b2 <k_free>
    bdc4:	0002c008 	.word	0x0002c008
    bdc8:	2000a754 	.word	0x2000a754
    bdcc:	20009dec 	.word	0x20009dec
    bdd0:	0002c024 	.word	0x0002c024
    bdd4:	0002c031 	.word	0x0002c031
    bdd8:	20020f54 	.word	0x20020f54

0000bddc <feed_circular_buffer>:
void feed_circular_buffer(void){
    bddc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bde0:	4d31      	ldr	r5, [pc, #196]	; (bea8 <feed_circular_buffer+0xcc>)
    bde2:	4b32      	ldr	r3, [pc, #200]	; (beac <feed_circular_buffer+0xd0>)
    bde4:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bde6:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bdea:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bdec:	d259      	bcs.n	bea2 <feed_circular_buffer+0xc6>
  gnss_return_value.timestamp=time_stamp_function();
    bdee:	f7ff ff67 	bl	bcc0 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bdf2:	f04f 0800 	mov.w	r8, #0
    bdf6:	4c2e      	ldr	r4, [pc, #184]	; (beb0 <feed_circular_buffer+0xd4>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bdf8:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bdfa:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bdfe:	e9c6 8802 	strd	r8, r8, [r6, #8]
    be02:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    be04:	f7ff ff5c 	bl	bcc0 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    be08:	4e2a      	ldr	r6, [pc, #168]	; (beb4 <feed_circular_buffer+0xd8>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    be0a:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    be0e:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    be12:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    be14:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    be18:	f7ff ff52 	bl	bcc0 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    be1c:	682b      	ldr	r3, [r5, #0]
    be1e:	8872      	ldrh	r2, [r6, #2]
    be20:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    be24:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    be26:	f7ff ff4b 	bl	bcc0 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    be2a:	682b      	ldr	r3, [r5, #0]
    be2c:	88b2      	ldrh	r2, [r6, #4]
    be2e:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    be32:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    be34:	f7ff ff44 	bl	bcc0 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    be38:	682b      	ldr	r3, [r5, #0]
    be3a:	88f2      	ldrh	r2, [r6, #6]
    be3c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    be40:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    be42:	f7ff ff3d 	bl	bcc0 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    be46:	682b      	ldr	r3, [r5, #0]
    be48:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    be4c:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    be4e:	f7ff ff37 	bl	bcc0 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    be52:	682b      	ldr	r3, [r5, #0]
    be54:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    be58:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    be5a:	f7ff ff31 	bl	bcc0 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    be5e:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    be60:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    be62:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    be66:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    be68:	4638      	mov	r0, r7
    be6a:	f7ff ff41 	bl	bcf0 <values_of_digital_sensor>
    be6e:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    be72:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    be74:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    be76:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    be7a:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    be7e:	3438      	adds	r4, #56	; 0x38
    be80:	2101      	movs	r1, #1
    be82:	4638      	mov	r0, r7
    be84:	f7ff ff34 	bl	bcf0 <values_of_digital_sensor>
    be88:	e897 0003 	ldmia.w	r7, {r0, r1}
    be8c:	e884 0003 	stmia.w	r4, {r0, r1}
     save_memory(C_Buffer_Free_Position);
    be90:	6828      	ldr	r0, [r5, #0]
    be92:	f7ff ff63 	bl	bd5c <save_memory>
     C_Buffer_Free_Position++;
    be96:	682b      	ldr	r3, [r5, #0]
    be98:	3301      	adds	r3, #1
    be9a:	602b      	str	r3, [r5, #0]
}
    be9c:	b002      	add	sp, #8
    be9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bea2:	2300      	movs	r3, #0
    bea4:	e7f9      	b.n	be9a <feed_circular_buffer+0xbe>
    bea6:	bf00      	nop
    bea8:	20020f58 	.word	0x20020f58
    beac:	20020f54 	.word	0x20020f54
    beb0:	2000a754 	.word	0x2000a754
    beb4:	2002157c 	.word	0x2002157c

0000beb8 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    beb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    beba:	4b1c      	ldr	r3, [pc, #112]	; (bf2c <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    bebc:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    bebe:	6818      	ldr	r0, [r3, #0]
    bec0:	889b      	ldrh	r3, [r3, #4]
    bec2:	9000      	str	r0, [sp, #0]
    bec4:	2218      	movs	r2, #24
    bec6:	2100      	movs	r1, #0
    bec8:	f10d 0006 	add.w	r0, sp, #6
    becc:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    bed0:	2601      	movs	r6, #1
   char tag[30]="10203";
    bed2:	f01d fcc4 	bl	2985e <memset>
     msg.positions.timestamp=1;
    bed6:	2300      	movs	r3, #0
    msg.timestamp=0;
    bed8:	4c15      	ldr	r4, [pc, #84]	; (bf30 <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    beda:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    bedc:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    bee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bee4:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    bee6:	4b13      	ldr	r3, [pc, #76]	; (bf34 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bee8:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    beea:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    beec:	230b      	movs	r3, #11
    beee:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    bef0:	4b11      	ldr	r3, [pc, #68]	; (bf38 <fill_fields_to_test+0x80>)
    bef2:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    bef4:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    bef6:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    bef8:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    befa:	7766      	strb	r6, [r4, #29]
    befc:	f104 001e 	add.w	r0, r4, #30
    bf00:	f01d fdd5 	bl	29aae <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bf04:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    bf08:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bf0c:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bf10:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bf12:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    bf16:	f7fc fdf7 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    bf1a:	3501      	adds	r5, #1
    bf1c:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bf1e:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    bf20:	f104 0424 	add.w	r4, r4, #36	; 0x24
    bf24:	d1e6      	bne.n	bef4 <fill_fields_to_test+0x3c>
}
    bf26:	4802      	ldr	r0, [pc, #8]	; (bf30 <fill_fields_to_test+0x78>)
    bf28:	b009      	add	sp, #36	; 0x24
    bf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf2c:	0002a8ac 	.word	0x0002a8ac
    bf30:	2000a664 	.word	0x2000a664
    bf34:	40400000 	.word	0x40400000
    bf38:	41400000 	.word	0x41400000

0000bf3c <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    bf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf3e:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    bf42:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    bf44:	f7ff ffb8 	bl	beb8 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    bf48:	2202      	movs	r2, #2
    bf4a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    bf4e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    bf52:	4a3a      	ldr	r2, [pc, #232]	; (c03c <send_array_dd_v0+0x100>)
    bf54:	ae0c      	add	r6, sp, #48	; 0x30
    bf56:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bf58:	4631      	mov	r1, r6
    bf5a:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    bf5c:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bf5e:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bf60:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bf62:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    bf64:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bf66:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bf68:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bf6a:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    bf6c:	f101 010c 	add.w	r1, r1, #12
    bf70:	d1f8      	bne.n	bf64 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bf72:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bf74:	6958      	ldr	r0, [r3, #20]
    bf76:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    bf78:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bf7a:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bf7c:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bf80:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    bf84:	f101 0108 	add.w	r1, r1, #8
    bf88:	d1f6      	bne.n	bf78 <send_array_dd_v0+0x3c>
    bf8a:	f103 051e 	add.w	r5, r3, #30
    bf8e:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    bf92:	f855 3c06 	ldr.w	r3, [r5, #-6]
    bf96:	4629      	mov	r1, r5
    bf98:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    bf9c:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    bfa0:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    bfa4:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    bfa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    bfac:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    bfb0:	f01d fd7d 	bl	29aae <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bfb4:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    bfb6:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bfb8:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bfbc:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bfbe:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bfc2:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bfc6:	4633      	mov	r3, r6
    bfc8:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    bfcc:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bfce:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bfd0:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bfd4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    bfd8:	f103 0308 	add.w	r3, r3, #8
    bfdc:	d1f6      	bne.n	bfcc <send_array_dd_v0+0x90>
   while (sensor_id<6){
    bfde:	3524      	adds	r5, #36	; 0x24
    bfe0:	42a5      	cmp	r5, r4
    bfe2:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    bfe6:	d1d4      	bne.n	bf92 <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bfe8:	466c      	mov	r4, sp
    bfea:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    bfee:	4668      	mov	r0, sp
    bff0:	4913      	ldr	r1, [pc, #76]	; (c040 <send_array_dd_v0+0x104>)
    bff2:	ad07      	add	r5, sp, #28
    bff4:	f000 f950 	bl	c298 <pb_ostream_from_buffer>
    bff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bffc:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bffe:	4911      	ldr	r1, [pc, #68]	; (c044 <send_array_dd_v0+0x108>)
    c000:	aa0c      	add	r2, sp, #48	; 0x30
    c002:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    c004:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    c006:	f000 fbc7 	bl	c798 <pb_encode>
   int j=0;
    c00a:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    c00c:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    c00e:	490c      	ldr	r1, [pc, #48]	; (c040 <send_array_dd_v0+0x104>)
    c010:	4a0d      	ldr	r2, [pc, #52]	; (c048 <send_array_dd_v0+0x10c>)
    c012:	4283      	cmp	r3, r0
    c014:	d10b      	bne.n	c02e <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    c016:	490d      	ldr	r1, [pc, #52]	; (c04c <send_array_dd_v0+0x110>)
    return function_return;
    c018:	f240 72dc 	movw	r2, #2012	; 0x7dc
    c01c:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    c01e:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    c022:	f01d fbe2 	bl	297ea <memcpy>
}
    c026:	4638      	mov	r0, r7
    c028:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    c02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    c02e:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    c032:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    c034:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    c038:	e7eb      	b.n	c012 <send_array_dd_v0+0xd6>
    c03a:	bf00      	nop
    c03c:	0012d687 	.word	0x0012d687
    c040:	200215ab 	.word	0x200215ab
    c044:	0002aafc 	.word	0x0002aafc
    c048:	20009e8b 	.word	0x20009e8b
    c04c:	20009e88 	.word	0x20009e88

0000c050 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    c050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c054:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c056:	4d23      	ldr	r5, [pc, #140]	; (c0e4 <print_current_position_cb+0x94>)
void print_current_position_cb(uint32_t pos){
    c058:	b085      	sub	sp, #20
    printf("\n\n####Position %d #####\n",pos);
    c05a:	4601      	mov	r1, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c05c:	ea4f 1884 	mov.w	r8, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    c060:	4821      	ldr	r0, [pc, #132]	; (c0e8 <print_current_position_cb+0x98>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c062:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    c066:	f017 fb6b 	bl	23740 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c06a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    c06e:	6863      	ldr	r3, [r4, #4]
    c070:	481e      	ldr	r0, [pc, #120]	; (c0ec <print_current_position_cb+0x9c>)
    c072:	f017 fb65 	bl	23740 <iprintf>
    val_mv = C_Buffer[pos].analog.value;
    c076:	6963      	ldr	r3, [r4, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    c078:	a803      	add	r0, sp, #12
    val_mv = C_Buffer[pos].analog.value;
    c07a:	9303      	str	r3, [sp, #12]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    c07c:	f7ff fdda 	bl	bc34 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    c080:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    c084:	9b03      	ldr	r3, [sp, #12]
    c086:	481a      	ldr	r0, [pc, #104]	; (c0f0 <print_current_position_cb+0xa0>)
    c088:	f017 fb5a 	bl	23740 <iprintf>
    int i=0;
    c08c:	2600      	movs	r6, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c08e:	f8df 9064 	ldr.w	r9, [pc, #100]	; c0f4 <print_current_position_cb+0xa4>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    c092:	1c77      	adds	r7, r6, #1
    c094:	8ba0      	ldrh	r0, [r4, #28]
    c096:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c098:	f8d4 a018 	ldr.w	sl, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    c09c:	f9b4 b01c 	ldrsh.w	fp, [r4, #28]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    c0a0:	f7fd f966 	bl	9370 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c0a4:	f7fc f9bc 	bl	8420 <__aeabi_f2d>
    c0a8:	465b      	mov	r3, fp
    c0aa:	e9cd 0100 	strd	r0, r1, [sp]
    c0ae:	4652      	mov	r2, sl
    c0b0:	4631      	mov	r1, r6
    c0b2:	4648      	mov	r0, r9
    c0b4:	f017 fb44 	bl	23740 <iprintf>
    while (i<3){
    c0b8:	2f03      	cmp	r7, #3
      i++;
    c0ba:	463e      	mov	r6, r7
    while (i<3){
    c0bc:	f104 0408 	add.w	r4, r4, #8
    c0c0:	d1e7      	bne.n	c092 <print_current_position_cb+0x42>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    c0c2:	4445      	add	r5, r8
    c0c4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    c0c8:	2100      	movs	r1, #0
    c0ca:	480b      	ldr	r0, [pc, #44]	; (c0f8 <print_current_position_cb+0xa8>)
    c0cc:	f017 fb38 	bl	23740 <iprintf>
    c0d0:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    c0d4:	2101      	movs	r1, #1
    c0d6:	4808      	ldr	r0, [pc, #32]	; (c0f8 <print_current_position_cb+0xa8>)
}
    c0d8:	b005      	add	sp, #20
    c0da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    c0de:	f017 bb2f 	b.w	23740 <iprintf>
    c0e2:	bf00      	nop
    c0e4:	2000a754 	.word	0x2000a754
    c0e8:	0002c048 	.word	0x0002c048
    c0ec:	0002c061 	.word	0x0002c061
    c0f0:	0002c08d 	.word	0x0002c08d
    c0f4:	0002c0b3 	.word	0x0002c0b3
    c0f8:	0002c0d9 	.word	0x0002c0d9

0000c0fc <print_current_position_cb_new>:
void print_current_position_cb_new(uint32_t pos){
    c0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c100:	4607      	mov	r7, r0
    c102:	b094      	sub	sp, #80	; 0x50
   C_Buffer = k_malloc(size);
    c104:	2040      	movs	r0, #64	; 0x40
    c106:	f01d fb5b 	bl	297c0 <k_malloc>
    c10a:	4606      	mov	r6, r0
   *C_Buffer=read_memory(pos);
    c10c:	4635      	mov	r5, r6
    c10e:	4639      	mov	r1, r7
    c110:	a802      	add	r0, sp, #8
    c112:	ac02      	add	r4, sp, #8
    c114:	f7ff fdfe 	bl	bd14 <read_memory>
    c118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c11a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c11c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c11e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c124:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c128:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    printf("\n\n####Position %d #####\n",pos);
    c12c:	4639      	mov	r1, r7
    c12e:	4821      	ldr	r0, [pc, #132]	; (c1b4 <print_current_position_cb_new+0xb8>)
    c130:	f017 fb06 	bl	23740 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    c134:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
    c138:	6873      	ldr	r3, [r6, #4]
    c13a:	481f      	ldr	r0, [pc, #124]	; (c1b8 <print_current_position_cb_new+0xbc>)
    c13c:	f017 fb00 	bl	23740 <iprintf>
    val_mv = C_Buffer->analog.value;
    c140:	6973      	ldr	r3, [r6, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    c142:	a813      	add	r0, sp, #76	; 0x4c
    val_mv = C_Buffer->analog.value;
    c144:	9313      	str	r3, [sp, #76]	; 0x4c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    c146:	f7ff fd75 	bl	bc34 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    c14a:	e9d6 1204 	ldrd	r1, r2, [r6, #16]
    c14e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c150:	481a      	ldr	r0, [pc, #104]	; (c1bc <print_current_position_cb_new+0xc0>)
    c152:	f017 faf5 	bl	23740 <iprintf>
    while (i<3){
    c156:	4634      	mov	r4, r6
    int i=0;
    c158:	2500      	movs	r5, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c15a:	f8df 8064 	ldr.w	r8, [pc, #100]	; c1c0 <print_current_position_cb_new+0xc4>
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    c15e:	1c6f      	adds	r7, r5, #1
    c160:	8ba0      	ldrh	r0, [r4, #28]
    c162:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c164:	f8d4 9018 	ldr.w	r9, [r4, #24]
      C_Buffer->ntc[i].value,
    c168:	f9b4 a01c 	ldrsh.w	sl, [r4, #28]
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    c16c:	f7fd f900 	bl	9370 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    c170:	f7fc f956 	bl	8420 <__aeabi_f2d>
    c174:	4653      	mov	r3, sl
    c176:	e9cd 0100 	strd	r0, r1, [sp]
    c17a:	464a      	mov	r2, r9
    c17c:	4629      	mov	r1, r5
    c17e:	4640      	mov	r0, r8
    c180:	f017 fade 	bl	23740 <iprintf>
    while (i<3){
    c184:	2f03      	cmp	r7, #3
      i++;
    c186:	463d      	mov	r5, r7
    while (i<3){
    c188:	f104 0408 	add.w	r4, r4, #8
    c18c:	d1e7      	bne.n	c15e <print_current_position_cb_new+0x62>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    c18e:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
    c192:	2100      	movs	r1, #0
    c194:	480b      	ldr	r0, [pc, #44]	; (c1c4 <print_current_position_cb_new+0xc8>)
    c196:	f017 fad3 	bl	23740 <iprintf>
    c19a:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
    c19e:	2101      	movs	r1, #1
    c1a0:	4808      	ldr	r0, [pc, #32]	; (c1c4 <print_current_position_cb_new+0xc8>)
    c1a2:	f017 facd 	bl	23740 <iprintf>
 k_free(C_Buffer);
    c1a6:	4630      	mov	r0, r6
}
    c1a8:	b014      	add	sp, #80	; 0x50
    c1aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 k_free(C_Buffer);
    c1ae:	f01d bb00 	b.w	297b2 <k_free>
    c1b2:	bf00      	nop
    c1b4:	0002c048 	.word	0x0002c048
    c1b8:	0002c061 	.word	0x0002c061
    c1bc:	0002c08d 	.word	0x0002c08d
    c1c0:	0002c0b3 	.word	0x0002c0b3
    c1c4:	0002c0d9 	.word	0x0002c0d9

0000c1c8 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    c1c8:	b500      	push	{lr}
    pb_type_t type = field->type;
    c1ca:	7d83      	ldrb	r3, [r0, #22]
{
    c1cc:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    c1ce:	2b3f      	cmp	r3, #63	; 0x3f
{
    c1d0:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    c1d2:	d849      	bhi.n	c268 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    c1d4:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    c1d8:	d01c      	beq.n	c214 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    c1da:	2820      	cmp	r0, #32
    c1dc:	d102      	bne.n	c1e4 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    c1de:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    c1e0:	8818      	ldrh	r0, [r3, #0]
    c1e2:	e006      	b.n	c1f2 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    c1e4:	2830      	cmp	r0, #48	; 0x30
    c1e6:	d0fa      	beq.n	c1de <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    c1e8:	2810      	cmp	r0, #16
    c1ea:	d106      	bne.n	c1fa <pb_check_proto3_default_value+0x32>
    c1ec:	6a0a      	ldr	r2, [r1, #32]
    c1ee:	b122      	cbz	r2, c1fa <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    c1f0:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    c1f2:	fab0 f080 	clz	r0, r0
    c1f6:	0940      	lsrs	r0, r0, #5
    c1f8:	e00c      	b.n	c214 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    c1fa:	680a      	ldr	r2, [r1, #0]
    c1fc:	6890      	ldr	r0, [r2, #8]
    c1fe:	b980      	cbnz	r0, c222 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    c200:	f003 020f 	and.w	r2, r3, #15
    c204:	2a05      	cmp	r2, #5
    c206:	d80e      	bhi.n	c226 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    c208:	69cb      	ldr	r3, [r1, #28]
    c20a:	8a4a      	ldrh	r2, [r1, #18]
    c20c:	441a      	add	r2, r3
    c20e:	4293      	cmp	r3, r2
    c210:	d103      	bne.n	c21a <pb_check_proto3_default_value+0x52>
            return true;
    c212:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    c214:	b00b      	add	sp, #44	; 0x2c
    c216:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    c21a:	f813 1b01 	ldrb.w	r1, [r3], #1
    c21e:	2900      	cmp	r1, #0
    c220:	d0f5      	beq.n	c20e <pb_check_proto3_default_value+0x46>
            return false;
    c222:	2000      	movs	r0, #0
    c224:	e7f6      	b.n	c214 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    c226:	2a06      	cmp	r2, #6
    c228:	d101      	bne.n	c22e <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    c22a:	69cb      	ldr	r3, [r1, #28]
    c22c:	e7d8      	b.n	c1e0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    c22e:	2a07      	cmp	r2, #7
    c230:	d102      	bne.n	c238 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    c232:	69cb      	ldr	r3, [r1, #28]
    c234:	7818      	ldrb	r0, [r3, #0]
    c236:	e7dc      	b.n	c1f2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    c238:	2a0b      	cmp	r2, #11
    c23a:	d101      	bne.n	c240 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    c23c:	8a48      	ldrh	r0, [r1, #18]
    c23e:	e7d8      	b.n	c1f2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    c240:	f003 030e 	and.w	r3, r3, #14
    c244:	2b08      	cmp	r3, #8
    c246:	d1e5      	bne.n	c214 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    c248:	69ca      	ldr	r2, [r1, #28]
    c24a:	4668      	mov	r0, sp
    c24c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c24e:	f018 faa7 	bl	247a0 <pb_field_iter_begin>
    c252:	2800      	cmp	r0, #0
    c254:	d0dd      	beq.n	c212 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    c256:	4668      	mov	r0, sp
    c258:	f7ff ffb6 	bl	c1c8 <pb_check_proto3_default_value>
    c25c:	2800      	cmp	r0, #0
    c25e:	d0d9      	beq.n	c214 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    c260:	4668      	mov	r0, sp
    c262:	f018 fac0 	bl	247e6 <pb_field_iter_next>
    c266:	e7f4      	b.n	c252 <pb_check_proto3_default_value+0x8a>
    c268:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    c26c:	2a80      	cmp	r2, #128	; 0x80
    c26e:	d101      	bne.n	c274 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    c270:	69c0      	ldr	r0, [r0, #28]
    c272:	e7be      	b.n	c1f2 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    c274:	2a40      	cmp	r2, #64	; 0x40
    c276:	d1d4      	bne.n	c222 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    c278:	f003 030f 	and.w	r3, r3, #15
    c27c:	2b0a      	cmp	r3, #10
    c27e:	d102      	bne.n	c286 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c280:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    c282:	6818      	ldr	r0, [r3, #0]
    c284:	e7b5      	b.n	c1f2 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    c286:	6803      	ldr	r3, [r0, #0]
    c288:	4a02      	ldr	r2, [pc, #8]	; (c294 <pb_check_proto3_default_value+0xcc>)
    c28a:	68d8      	ldr	r0, [r3, #12]
    c28c:	4290      	cmp	r0, r2
    c28e:	d1b0      	bne.n	c1f2 <pb_check_proto3_default_value+0x2a>
    c290:	e7f6      	b.n	c280 <pb_check_proto3_default_value+0xb8>
    c292:	bf00      	nop
    c294:	00024805 	.word	0x00024805

0000c298 <pb_ostream_from_buffer>:
    return stream;
    c298:	6082      	str	r2, [r0, #8]
    c29a:	2200      	movs	r2, #0
{
    c29c:	b510      	push	{r4, lr}
    return stream;
    c29e:	4c03      	ldr	r4, [pc, #12]	; (c2ac <pb_ostream_from_buffer+0x14>)
    c2a0:	e9c0 2203 	strd	r2, r2, [r0, #12]
    c2a4:	e9c0 4100 	strd	r4, r1, [r0]
}
    c2a8:	bd10      	pop	{r4, pc}
    c2aa:	bf00      	nop
    c2ac:	00024835 	.word	0x00024835

0000c2b0 <pb_write>:
{
    c2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2b2:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    c2b4:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    c2b6:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    c2b8:	b19a      	cbz	r2, c2e2 <pb_write+0x32>
    c2ba:	6806      	ldr	r6, [r0, #0]
    c2bc:	b18e      	cbz	r6, c2e2 <pb_write+0x32>
    c2be:	18d3      	adds	r3, r2, r3
    c2c0:	d202      	bcs.n	c2c8 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    c2c2:	6887      	ldr	r7, [r0, #8]
    c2c4:	429f      	cmp	r7, r3
    c2c6:	d207      	bcs.n	c2d8 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    c2c8:	6923      	ldr	r3, [r4, #16]
    c2ca:	4a08      	ldr	r2, [pc, #32]	; (c2ec <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    c2cc:	2b00      	cmp	r3, #0
    c2ce:	bf08      	it	eq
    c2d0:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    c2d2:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    c2d4:	6123      	str	r3, [r4, #16]
}
    c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    c2d8:	47b0      	blx	r6
    c2da:	b910      	cbnz	r0, c2e2 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    c2dc:	6923      	ldr	r3, [r4, #16]
    c2de:	4a04      	ldr	r2, [pc, #16]	; (c2f0 <pb_write+0x40>)
    c2e0:	e7f4      	b.n	c2cc <pb_write+0x1c>
    stream->bytes_written += count;
    c2e2:	68e3      	ldr	r3, [r4, #12]
    return true;
    c2e4:	2001      	movs	r0, #1
    stream->bytes_written += count;
    c2e6:	442b      	add	r3, r5
    c2e8:	60e3      	str	r3, [r4, #12]
    return true;
    c2ea:	e7f4      	b.n	c2d6 <pb_write+0x26>
    c2ec:	0002c0fb 	.word	0x0002c0fb
    c2f0:	0002c107 	.word	0x0002c107

0000c2f4 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    c2f4:	b410      	push	{r4}
    c2f6:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    c2f8:	8a4b      	ldrh	r3, [r1, #18]
    c2fa:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    c2fe:	2c02      	cmp	r4, #2
    c300:	d117      	bne.n	c332 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    c302:	2b01      	cmp	r3, #1
    c304:	d105      	bne.n	c312 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    c306:	69cb      	ldr	r3, [r1, #28]
    c308:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    c30a:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    c30c:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    c30e:	f018 ba9a 	b.w	24846 <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    c312:	2b02      	cmp	r3, #2
    c314:	d102      	bne.n	c31c <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    c316:	69cb      	ldr	r3, [r1, #28]
    c318:	881a      	ldrh	r2, [r3, #0]
    c31a:	e7f6      	b.n	c30a <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    c31c:	2b04      	cmp	r3, #4
    c31e:	d102      	bne.n	c326 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    c320:	69cb      	ldr	r3, [r1, #28]
    c322:	681a      	ldr	r2, [r3, #0]
    c324:	e7f1      	b.n	c30a <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    c326:	2b08      	cmp	r3, #8
    c328:	d11f      	bne.n	c36a <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    c32a:	69cb      	ldr	r3, [r1, #28]
    c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c330:	e7ec      	b.n	c30c <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    c332:	2b01      	cmp	r3, #1
    c334:	d108      	bne.n	c348 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    c336:	69cb      	ldr	r3, [r1, #28]
    c338:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    c33c:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    c33e:	2c03      	cmp	r4, #3
    c340:	d1e4      	bne.n	c30c <pb_enc_varint+0x18>
}
    c342:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    c344:	f018 babe 	b.w	248c4 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    c348:	2b02      	cmp	r3, #2
    c34a:	d103      	bne.n	c354 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    c34c:	69cb      	ldr	r3, [r1, #28]
    c34e:	f9b3 2000 	ldrsh.w	r2, [r3]
    c352:	e7f3      	b.n	c33c <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    c354:	2b04      	cmp	r3, #4
    c356:	d102      	bne.n	c35e <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    c358:	69cb      	ldr	r3, [r1, #28]
    c35a:	681a      	ldr	r2, [r3, #0]
    c35c:	e7ee      	b.n	c33c <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    c35e:	2b08      	cmp	r3, #8
    c360:	d103      	bne.n	c36a <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    c362:	69cb      	ldr	r3, [r1, #28]
    c364:	e9d3 2300 	ldrd	r2, r3, [r3]
    c368:	e7e9      	b.n	c33e <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    c36a:	6903      	ldr	r3, [r0, #16]
    c36c:	4a03      	ldr	r2, [pc, #12]	; (c37c <pb_enc_varint+0x88>)
    c36e:	2b00      	cmp	r3, #0
    c370:	bf08      	it	eq
    c372:	4613      	moveq	r3, r2
    c374:	6103      	str	r3, [r0, #16]
}
    c376:	bc10      	pop	{r4}
    c378:	2000      	movs	r0, #0
    c37a:	4770      	bx	lr
    c37c:	0002c110 	.word	0x0002c110

0000c380 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    c380:	8a4a      	ldrh	r2, [r1, #18]
    c382:	2a04      	cmp	r2, #4
    c384:	d102      	bne.n	c38c <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    c386:	69c9      	ldr	r1, [r1, #28]
    c388:	f018 baa5 	b.w	248d6 <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    c38c:	2a08      	cmp	r2, #8
    c38e:	d102      	bne.n	c396 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    c390:	69c9      	ldr	r1, [r1, #28]
    c392:	f018 baa3 	b.w	248dc <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    c396:	6902      	ldr	r2, [r0, #16]
    c398:	4903      	ldr	r1, [pc, #12]	; (c3a8 <pb_enc_fixed+0x28>)
    c39a:	2a00      	cmp	r2, #0
    c39c:	bf08      	it	eq
    c39e:	460a      	moveq	r2, r1
    c3a0:	6102      	str	r2, [r0, #16]
    }
}
    c3a2:	2000      	movs	r0, #0
    c3a4:	4770      	bx	lr
    c3a6:	bf00      	nop
    c3a8:	0002c110 	.word	0x0002c110

0000c3ac <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    c3ac:	7d8a      	ldrb	r2, [r1, #22]
{
    c3ae:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    c3b0:	f002 020f 	and.w	r2, r2, #15
    c3b4:	2a0b      	cmp	r2, #11
    c3b6:	d811      	bhi.n	c3dc <pb_encode_tag_for_field+0x30>
    c3b8:	e8df f002 	tbb	[pc, r2]
    c3bc:	0c0c0c0c 	.word	0x0c0c0c0c
    c3c0:	0a0a060e 	.word	0x0a0a060e
    c3c4:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    c3c8:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    c3ca:	8a1a      	ldrh	r2, [r3, #16]
    c3cc:	f018 ba89 	b.w	248e2 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    c3d0:	2102      	movs	r1, #2
            break;
    c3d2:	e7fa      	b.n	c3ca <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    c3d4:	2100      	movs	r1, #0
    c3d6:	e7f8      	b.n	c3ca <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    c3d8:	2105      	movs	r1, #5
    c3da:	e7f6      	b.n	c3ca <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    c3dc:	6903      	ldr	r3, [r0, #16]
    c3de:	4a03      	ldr	r2, [pc, #12]	; (c3ec <pb_encode_tag_for_field+0x40>)
    c3e0:	2b00      	cmp	r3, #0
    c3e2:	bf08      	it	eq
    c3e4:	4613      	moveq	r3, r2
    c3e6:	6103      	str	r3, [r0, #16]
}
    c3e8:	2000      	movs	r0, #0
    c3ea:	4770      	bx	lr
    c3ec:	0002c122 	.word	0x0002c122

0000c3f0 <pb_encode_submessage>:
{
    c3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3f4:	460e      	mov	r6, r1
    c3f6:	4617      	mov	r7, r2
    c3f8:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c3fa:	2214      	movs	r2, #20
    c3fc:	2100      	movs	r1, #0
{
    c3fe:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c400:	a801      	add	r0, sp, #4
    c402:	f01d fa2c 	bl	2985e <memset>
    if (!pb_encode(&substream, fields, src_struct))
    c406:	463a      	mov	r2, r7
    c408:	4631      	mov	r1, r6
    c40a:	a801      	add	r0, sp, #4
    c40c:	f000 f9c4 	bl	c798 <pb_encode>
    c410:	b910      	cbnz	r0, c418 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    c412:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    c414:	6123      	str	r3, [r4, #16]
    c416:	e008      	b.n	c42a <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c418:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    c41c:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c41e:	4643      	mov	r3, r8
    c420:	462a      	mov	r2, r5
    c422:	4620      	mov	r0, r4
    c424:	f018 fa0f 	bl	24846 <pb_encode_varint>
    c428:	b918      	cbnz	r0, c432 <pb_encode_submessage+0x42>
        return false;
    c42a:	2000      	movs	r0, #0
}
    c42c:	b006      	add	sp, #24
    c42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    c432:	6821      	ldr	r1, [r4, #0]
    c434:	b921      	cbnz	r1, c440 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    c436:	462a      	mov	r2, r5
    c438:	4620      	mov	r0, r4
    c43a:	f7ff ff39 	bl	c2b0 <pb_write>
    c43e:	e7f5      	b.n	c42c <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    c440:	68e3      	ldr	r3, [r4, #12]
    c442:	68a2      	ldr	r2, [r4, #8]
    c444:	442b      	add	r3, r5
    c446:	4293      	cmp	r3, r2
    c448:	d905      	bls.n	c456 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    c44a:	6923      	ldr	r3, [r4, #16]
    c44c:	4a0e      	ldr	r2, [pc, #56]	; (c488 <pb_encode_submessage+0x98>)
    c44e:	2b00      	cmp	r3, #0
    c450:	bf08      	it	eq
    c452:	4613      	moveq	r3, r2
    c454:	e7de      	b.n	c414 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    c456:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    c458:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    c45a:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    c45c:	a801      	add	r0, sp, #4
    c45e:	4631      	mov	r1, r6
    substream.max_size = size;
    c460:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    c464:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    c468:	f000 f996 	bl	c798 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    c46c:	9a04      	ldr	r2, [sp, #16]
    c46e:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    c470:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    c472:	4413      	add	r3, r2
    c474:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    c476:	9b02      	ldr	r3, [sp, #8]
    c478:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    c47a:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    c47c:	d101      	bne.n	c482 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    c47e:	6123      	str	r3, [r4, #16]
    c480:	e7d4      	b.n	c42c <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    c482:	4a02      	ldr	r2, [pc, #8]	; (c48c <pb_encode_submessage+0x9c>)
    c484:	e7e3      	b.n	c44e <pb_encode_submessage+0x5e>
    c486:	bf00      	nop
    c488:	0002c0fb 	.word	0x0002c0fb
    c48c:	0002c135 	.word	0x0002c135

0000c490 <encode_basic_field>:
{
    c490:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    c492:	69cb      	ldr	r3, [r1, #28]
{
    c494:	4604      	mov	r4, r0
    c496:	460d      	mov	r5, r1
    if (!field->pData)
    c498:	2b00      	cmp	r3, #0
    c49a:	d07f      	beq.n	c59c <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    c49c:	f7ff ff86 	bl	c3ac <pb_encode_tag_for_field>
    c4a0:	2800      	cmp	r0, #0
    c4a2:	d073      	beq.n	c58c <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    c4a4:	7da8      	ldrb	r0, [r5, #22]
    c4a6:	f000 030f 	and.w	r3, r0, #15
    c4aa:	2b0b      	cmp	r3, #11
    c4ac:	d873      	bhi.n	c596 <encode_basic_field+0x106>
    c4ae:	e8df f003 	tbb	[pc, r3]
    c4b2:	1106      	.short	0x1106
    c4b4:	17171111 	.word	0x17171111
    c4b8:	5252351d 	.word	0x5252351d
    c4bc:	6f72      	.short	0x6f72
        if (p[i] != 0)
    c4be:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    c4c0:	4620      	mov	r0, r4
}
    c4c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    c4c6:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    c4c8:	2300      	movs	r3, #0
    c4ca:	3a00      	subs	r2, #0
    c4cc:	bf18      	it	ne
    c4ce:	2201      	movne	r2, #1
    c4d0:	f018 b9b9 	b.w	24846 <pb_encode_varint>
            return pb_enc_varint(stream, field);
    c4d4:	4629      	mov	r1, r5
    c4d6:	4620      	mov	r0, r4
}
    c4d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    c4dc:	f7ff bf0a 	b.w	c2f4 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    c4e0:	4629      	mov	r1, r5
    c4e2:	4620      	mov	r0, r4
}
    c4e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    c4e8:	f7ff bf4a 	b.w	c380 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    c4ec:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    c4ee:	b909      	cbnz	r1, c4f4 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    c4f0:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    c4f2:	e00e      	b.n	c512 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c4f4:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c4f6:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c4f8:	d80a      	bhi.n	c510 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c4fa:	8a6b      	ldrh	r3, [r5, #18]
    c4fc:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c4fe:	4293      	cmp	r3, r2
    c500:	d206      	bcs.n	c510 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    c502:	6923      	ldr	r3, [r4, #16]
    c504:	4a26      	ldr	r2, [pc, #152]	; (c5a0 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    c506:	2b00      	cmp	r3, #0
    c508:	bf08      	it	eq
    c50a:	4613      	moveq	r3, r2
    c50c:	6123      	str	r3, [r4, #16]
    c50e:	e03d      	b.n	c58c <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    c510:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c512:	4620      	mov	r0, r4
}
    c514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c518:	f018 b9e9 	b.w	248ee <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c51c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    c520:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    c522:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    c524:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c526:	d00e      	beq.n	c546 <encode_basic_field+0xb6>
        if (max_size == 0)
    c528:	b913      	cbnz	r3, c530 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    c52a:	6923      	ldr	r3, [r4, #16]
    c52c:	4a1d      	ldr	r2, [pc, #116]	; (c5a4 <encode_basic_field+0x114>)
    c52e:	e7ea      	b.n	c506 <encode_basic_field+0x76>
        max_size -= 1;
    c530:	3b01      	subs	r3, #1
    if (str == NULL)
    c532:	2900      	cmp	r1, #0
    c534:	d0dc      	beq.n	c4f0 <encode_basic_field+0x60>
    size_t size = 0;
    c536:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    c538:	429a      	cmp	r2, r3
    c53a:	5c88      	ldrb	r0, [r1, r2]
    c53c:	d006      	beq.n	c54c <encode_basic_field+0xbc>
    c53e:	2800      	cmp	r0, #0
    c540:	d0e7      	beq.n	c512 <encode_basic_field+0x82>
            size++;
    c542:	3201      	adds	r2, #1
            p++;
    c544:	e7f8      	b.n	c538 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    c546:	f04f 33ff 	mov.w	r3, #4294967295
    c54a:	e7f2      	b.n	c532 <encode_basic_field+0xa2>
        if (*p != '\0')
    c54c:	2800      	cmp	r0, #0
    c54e:	d0e0      	beq.n	c512 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    c550:	6923      	ldr	r3, [r4, #16]
    c552:	4a15      	ldr	r2, [pc, #84]	; (c5a8 <encode_basic_field+0x118>)
    c554:	e7d7      	b.n	c506 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    c556:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c558:	b912      	cbnz	r2, c560 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    c55a:	6923      	ldr	r3, [r4, #16]
    c55c:	4a13      	ldr	r2, [pc, #76]	; (c5ac <encode_basic_field+0x11c>)
    c55e:	e7d2      	b.n	c506 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c560:	2b09      	cmp	r3, #9
    c562:	d006      	beq.n	c572 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c564:	4620      	mov	r0, r4
    c566:	69ea      	ldr	r2, [r5, #28]
    c568:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    c56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c56e:	f7ff bf3f 	b.w	c3f0 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c572:	6a2a      	ldr	r2, [r5, #32]
    c574:	2a00      	cmp	r2, #0
    c576:	d0f5      	beq.n	c564 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    c578:	f852 3c08 	ldr.w	r3, [r2, #-8]
    c57c:	2b00      	cmp	r3, #0
    c57e:	d0f1      	beq.n	c564 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    c580:	4629      	mov	r1, r5
    c582:	4620      	mov	r0, r4
    c584:	3a04      	subs	r2, #4
    c586:	4798      	blx	r3
    c588:	2800      	cmp	r0, #0
    c58a:	d1eb      	bne.n	c564 <encode_basic_field+0xd4>
        return false;
    c58c:	2000      	movs	r0, #0
}
    c58e:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c590:	8a6a      	ldrh	r2, [r5, #18]
    c592:	69e9      	ldr	r1, [r5, #28]
    c594:	e7bd      	b.n	c512 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    c596:	6923      	ldr	r3, [r4, #16]
    c598:	4a05      	ldr	r2, [pc, #20]	; (c5b0 <encode_basic_field+0x120>)
    c59a:	e7b4      	b.n	c506 <encode_basic_field+0x76>
        return true;
    c59c:	2001      	movs	r0, #1
    c59e:	e7f6      	b.n	c58e <encode_basic_field+0xfe>
    c5a0:	0002c149 	.word	0x0002c149
    c5a4:	0002c15d 	.word	0x0002c15d
    c5a8:	0002c170 	.word	0x0002c170
    c5ac:	0002c184 	.word	0x0002c184
    c5b0:	0002c122 	.word	0x0002c122

0000c5b4 <encode_field>:
{
    c5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c5b8:	7d8b      	ldrb	r3, [r1, #22]
{
    c5ba:	4605      	mov	r5, r0
    c5bc:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c5c0:	2a30      	cmp	r2, #48	; 0x30
{
    c5c2:	460c      	mov	r4, r1
    c5c4:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c5c6:	d112      	bne.n	c5ee <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    c5c8:	6a0b      	ldr	r3, [r1, #32]
    c5ca:	881a      	ldrh	r2, [r3, #0]
    c5cc:	8a0b      	ldrh	r3, [r1, #16]
    c5ce:	429a      	cmp	r2, r3
    c5d0:	d114      	bne.n	c5fc <encode_field+0x48>
    if (!field->pData)
    c5d2:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c5d4:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    c5d6:	b9ea      	cbnz	r2, c614 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c5d8:	f013 0f30 	tst.w	r3, #48	; 0x30
    c5dc:	d10e      	bne.n	c5fc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    c5de:	692b      	ldr	r3, [r5, #16]
    c5e0:	4a69      	ldr	r2, [pc, #420]	; (c788 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c5e2:	2b00      	cmp	r3, #0
    c5e4:	bf08      	it	eq
    c5e6:	4613      	moveq	r3, r2
    c5e8:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c5ea:	2000      	movs	r0, #0
    c5ec:	e007      	b.n	c5fe <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    c5ee:	2a10      	cmp	r2, #16
    c5f0:	d1ef      	bne.n	c5d2 <encode_field+0x1e>
        if (field->pSize)
    c5f2:	6a0a      	ldr	r2, [r1, #32]
    c5f4:	b132      	cbz	r2, c604 <encode_field+0x50>
        if (p[i] != 0)
    c5f6:	7813      	ldrb	r3, [r2, #0]
    c5f8:	2b00      	cmp	r3, #0
    c5fa:	d1ea      	bne.n	c5d2 <encode_field+0x1e>
            return true;
    c5fc:	2001      	movs	r0, #1
}
    c5fe:	b007      	add	sp, #28
    c600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    c604:	2b3f      	cmp	r3, #63	; 0x3f
    c606:	d8e4      	bhi.n	c5d2 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    c608:	4608      	mov	r0, r1
    c60a:	f7ff fddd 	bl	c1c8 <pb_check_proto3_default_value>
    c60e:	2800      	cmp	r0, #0
    c610:	d0df      	beq.n	c5d2 <encode_field+0x1e>
    c612:	e7f3      	b.n	c5fc <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    c614:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    c618:	2a40      	cmp	r2, #64	; 0x40
    c61a:	d10c      	bne.n	c636 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    c61c:	6823      	ldr	r3, [r4, #0]
    c61e:	68db      	ldr	r3, [r3, #12]
    c620:	2b00      	cmp	r3, #0
    c622:	d0eb      	beq.n	c5fc <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    c624:	4622      	mov	r2, r4
    c626:	4629      	mov	r1, r5
    c628:	2000      	movs	r0, #0
    c62a:	4798      	blx	r3
    c62c:	2800      	cmp	r0, #0
    c62e:	d1e5      	bne.n	c5fc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    c630:	692b      	ldr	r3, [r5, #16]
    c632:	4a56      	ldr	r2, [pc, #344]	; (c78c <encode_field+0x1d8>)
    c634:	e7d5      	b.n	c5e2 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    c636:	f003 0130 	and.w	r1, r3, #48	; 0x30
    c63a:	2920      	cmp	r1, #32
    c63c:	f040 809d 	bne.w	c77a <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c640:	6a21      	ldr	r1, [r4, #32]
    c642:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c644:	2e00      	cmp	r6, #0
    c646:	d0d9      	beq.n	c5fc <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c648:	2a80      	cmp	r2, #128	; 0x80
    c64a:	d120      	bne.n	c68e <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c64c:	f003 030f 	and.w	r3, r3, #15
    c650:	2b05      	cmp	r3, #5
    c652:	d85e      	bhi.n	c712 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c654:	2102      	movs	r1, #2
    c656:	4628      	mov	r0, r5
    c658:	8a22      	ldrh	r2, [r4, #16]
    c65a:	f018 f942 	bl	248e2 <pb_encode_tag>
    c65e:	2800      	cmp	r0, #0
    c660:	d0c3      	beq.n	c5ea <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c662:	7da3      	ldrb	r3, [r4, #22]
    c664:	f003 030f 	and.w	r3, r3, #15
    c668:	2b04      	cmp	r3, #4
    c66a:	d116      	bne.n	c69a <encode_field+0xe6>
            size = 4 * (size_t)count;
    c66c:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c66e:	463a      	mov	r2, r7
    c670:	2300      	movs	r3, #0
    c672:	4628      	mov	r0, r5
    c674:	f018 f8e7 	bl	24846 <pb_encode_varint>
    c678:	2800      	cmp	r0, #0
    c67a:	d0b6      	beq.n	c5ea <encode_field+0x36>
        if (stream->callback == NULL)
    c67c:	6829      	ldr	r1, [r5, #0]
    c67e:	bb79      	cbnz	r1, c6e0 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c680:	463a      	mov	r2, r7
    c682:	4628      	mov	r0, r5
}
    c684:	b007      	add	sp, #28
    c686:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c68a:	f7ff be11 	b.w	c2b0 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c68e:	8aa2      	ldrh	r2, [r4, #20]
    c690:	42b2      	cmp	r2, r6
    c692:	d2db      	bcs.n	c64c <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c694:	692b      	ldr	r3, [r5, #16]
    c696:	4a3e      	ldr	r2, [pc, #248]	; (c790 <encode_field+0x1dc>)
    c698:	e7a3      	b.n	c5e2 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c69a:	2b05      	cmp	r3, #5
    c69c:	d101      	bne.n	c6a2 <encode_field+0xee>
            size = 8 * (size_t)count;
    c69e:	00f7      	lsls	r7, r6, #3
    c6a0:	e7e5      	b.n	c66e <encode_field+0xba>
            void *pData_orig = field->pData;
    c6a2:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c6a4:	2214      	movs	r2, #20
    c6a6:	2100      	movs	r1, #0
    c6a8:	a801      	add	r0, sp, #4
    c6aa:	f01d f8d8 	bl	2985e <memset>
            void *pData_orig = field->pData;
    c6ae:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c6b2:	4621      	mov	r1, r4
    c6b4:	a801      	add	r0, sp, #4
    c6b6:	f7ff fe1d 	bl	c2f4 <pb_enc_varint>
    c6ba:	b928      	cbnz	r0, c6c8 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c6bc:	692b      	ldr	r3, [r5, #16]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d192      	bne.n	c5e8 <encode_field+0x34>
    c6c2:	9b05      	ldr	r3, [sp, #20]
    c6c4:	4a33      	ldr	r2, [pc, #204]	; (c794 <encode_field+0x1e0>)
    c6c6:	e78c      	b.n	c5e2 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c6c8:	69e3      	ldr	r3, [r4, #28]
    c6ca:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c6cc:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c6ce:	4413      	add	r3, r2
    c6d0:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c6d2:	b2bb      	uxth	r3, r7
    c6d4:	429e      	cmp	r6, r3
    c6d6:	d8ec      	bhi.n	c6b2 <encode_field+0xfe>
            size = sizestream.bytes_written;
    c6d8:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c6da:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c6de:	e7c6      	b.n	c66e <encode_field+0xba>
    c6e0:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c6e2:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c6e4:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c6e6:	f003 030e 	and.w	r3, r3, #14
    c6ea:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c6ec:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c6ee:	d10d      	bne.n	c70c <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c6f0:	f7ff fe46 	bl	c380 <pb_enc_fixed>
    c6f4:	2800      	cmp	r0, #0
    c6f6:	f43f af78 	beq.w	c5ea <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c6fa:	69e3      	ldr	r3, [r4, #28]
    c6fc:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c6fe:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c700:	4413      	add	r3, r2
    c702:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c704:	b2bb      	uxth	r3, r7
    c706:	429e      	cmp	r6, r3
    c708:	d8eb      	bhi.n	c6e2 <encode_field+0x12e>
    c70a:	e777      	b.n	c5fc <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c70c:	f7ff fdf2 	bl	c2f4 <pb_enc_varint>
    c710:	e7f0      	b.n	c6f4 <encode_field+0x140>
    c712:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c716:	7da3      	ldrb	r3, [r4, #22]
    c718:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c71c:	2b86      	cmp	r3, #134	; 0x86
    c71e:	d127      	bne.n	c770 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c720:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c722:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c724:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c728:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c72a:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c72e:	f1b9 0f00 	cmp.w	r9, #0
    c732:	d11a      	bne.n	c76a <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c734:	f7ff fe3a 	bl	c3ac <pb_encode_tag_for_field>
    c738:	b908      	cbnz	r0, c73e <encode_field+0x18a>
                field->pData = pData_orig;
    c73a:	61e7      	str	r7, [r4, #28]
                if (!status)
    c73c:	e755      	b.n	c5ea <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c73e:	2201      	movs	r2, #1
    c740:	4628      	mov	r0, r5
    c742:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c744:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c748:	f7ff fdb2 	bl	c2b0 <pb_write>
                field->pData = pData_orig;
    c74c:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c74e:	2800      	cmp	r0, #0
    c750:	f43f af4b 	beq.w	c5ea <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c754:	69e3      	ldr	r3, [r4, #28]
    c756:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c758:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c75c:	4413      	add	r3, r2
    c75e:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c760:	fa1f f388 	uxth.w	r3, r8
    c764:	429e      	cmp	r6, r3
    c766:	d8d6      	bhi.n	c716 <encode_field+0x162>
    c768:	e748      	b.n	c5fc <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c76a:	f7ff fe91 	bl	c490 <encode_basic_field>
    c76e:	e7ed      	b.n	c74c <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c770:	4621      	mov	r1, r4
    c772:	4628      	mov	r0, r5
    c774:	f7ff fe8c 	bl	c490 <encode_basic_field>
    c778:	e7e9      	b.n	c74e <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c77a:	4621      	mov	r1, r4
    c77c:	4628      	mov	r0, r5
}
    c77e:	b007      	add	sp, #28
    c780:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c784:	f7ff be84 	b.w	c490 <encode_basic_field>
    c788:	0002c19d 	.word	0x0002c19d
    c78c:	0002c1b4 	.word	0x0002c1b4
    c790:	0002c1c3 	.word	0x0002c1c3
    c794:	0002c1db 	.word	0x0002c1db

0000c798 <pb_encode>:
{
    c798:	b530      	push	{r4, r5, lr}
    c79a:	b095      	sub	sp, #84	; 0x54
    c79c:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c79e:	4668      	mov	r0, sp
    c7a0:	f018 f82c 	bl	247fc <pb_field_iter_begin_const>
    c7a4:	b370      	cbz	r0, c804 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c7a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c7aa:	f003 030f 	and.w	r3, r3, #15
    c7ae:	2b0a      	cmp	r3, #10
    c7b0:	d121      	bne.n	c7f6 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c7b2:	9b07      	ldr	r3, [sp, #28]
    c7b4:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c7b6:	b91d      	cbnz	r5, c7c0 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c7b8:	4668      	mov	r0, sp
    c7ba:	f018 f814 	bl	247e6 <pb_field_iter_next>
    c7be:	e7f1      	b.n	c7a4 <pb_encode+0xc>
        if (extension->type->encode)
    c7c0:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c7c2:	4629      	mov	r1, r5
        if (extension->type->encode)
    c7c4:	685b      	ldr	r3, [r3, #4]
    c7c6:	b123      	cbz	r3, c7d2 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c7c8:	4620      	mov	r0, r4
    c7ca:	4798      	blx	r3
        if (!status)
    c7cc:	b158      	cbz	r0, c7e6 <pb_encode+0x4e>
        extension = extension->next;
    c7ce:	68ad      	ldr	r5, [r5, #8]
    c7d0:	e7f1      	b.n	c7b6 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c7d2:	a80a      	add	r0, sp, #40	; 0x28
    c7d4:	f018 f814 	bl	24800 <pb_field_iter_begin_extension_const>
    c7d8:	b940      	cbnz	r0, c7ec <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c7da:	6923      	ldr	r3, [r4, #16]
    c7dc:	4a0a      	ldr	r2, [pc, #40]	; (c808 <pb_encode+0x70>)
    c7de:	2b00      	cmp	r3, #0
    c7e0:	bf08      	it	eq
    c7e2:	4613      	moveq	r3, r2
    c7e4:	6123      	str	r3, [r4, #16]
                return false;
    c7e6:	2000      	movs	r0, #0
}
    c7e8:	b015      	add	sp, #84	; 0x54
    c7ea:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c7ec:	4620      	mov	r0, r4
    c7ee:	a90a      	add	r1, sp, #40	; 0x28
    c7f0:	f7ff fee0 	bl	c5b4 <encode_field>
    c7f4:	e7ea      	b.n	c7cc <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c7f6:	4669      	mov	r1, sp
    c7f8:	4620      	mov	r0, r4
    c7fa:	f7ff fedb 	bl	c5b4 <encode_field>
    c7fe:	2800      	cmp	r0, #0
    c800:	d1da      	bne.n	c7b8 <pb_encode+0x20>
    c802:	e7f0      	b.n	c7e6 <pb_encode+0x4e>
        return true; /* Empty message type */
    c804:	2001      	movs	r0, #1
    c806:	e7ef      	b.n	c7e8 <pb_encode+0x50>
    c808:	0002c1e2 	.word	0x0002c1e2

0000c80c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c810:	b091      	sub	sp, #68	; 0x44
    c812:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    c814:	f002 0304 	and.w	r3, r2, #4
    c818:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    c81a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    c81e:	3301      	adds	r3, #1
    c820:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    c822:	0783      	lsls	r3, r0, #30
{
    c824:	4605      	mov	r5, r0
    c826:	460e      	mov	r6, r1
    c828:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    c82c:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    c82e:	f040 81fe 	bne.w	cc2e <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    c832:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    c834:	b130      	cbz	r0, c844 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    c836:	2907      	cmp	r1, #7
    c838:	d809      	bhi.n	c84e <cbvprintf_package+0x42>
		return -ENOSPC;
    c83a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    c83e:	b011      	add	sp, #68	; 0x44
    c840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    c844:	f001 0607 	and.w	r6, r1, #7
    c848:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    c84a:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    c84e:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    c852:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    c856:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    c858:	4647      	mov	r7, r8
	s = fmt--;
    c85a:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    c85c:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    c860:	4643      	mov	r3, r8
	size = sizeof(char *);
    c862:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    c864:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    c868:	b10d      	cbz	r5, c86e <cbvprintf_package+0x62>
				*(const char **)buf = s;
    c86a:	9800      	ldr	r0, [sp, #0]
    c86c:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c86e:	9804      	ldr	r0, [sp, #16]
    c870:	2800      	cmp	r0, #0
    c872:	f300 80e1 	bgt.w	ca38 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c876:	489c      	ldr	r0, [pc, #624]	; (cae8 <cbvprintf_package+0x2dc>)
    c878:	f8dd c000 	ldr.w	ip, [sp]
    c87c:	4584      	cmp	ip, r0
    c87e:	d303      	bcc.n	c888 <cbvprintf_package+0x7c>
    c880:	489a      	ldr	r0, [pc, #616]	; (caec <cbvprintf_package+0x2e0>)
    c882:	4584      	cmp	ip, r0
    c884:	f0c0 80d8 	bcc.w	ca38 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c888:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c88c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c890:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c894:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c898:	f000 80e9 	beq.w	ca6e <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c89c:	f04f 0c00 	mov.w	ip, #0
    c8a0:	e0d3      	b.n	ca4a <cbvprintf_package+0x23e>
			switch (*fmt) {
    c8a2:	287a      	cmp	r0, #122	; 0x7a
    c8a4:	d864      	bhi.n	c970 <cbvprintf_package+0x164>
    c8a6:	284b      	cmp	r0, #75	; 0x4b
    c8a8:	d80f      	bhi.n	c8ca <cbvprintf_package+0xbe>
    c8aa:	2847      	cmp	r0, #71	; 0x47
    c8ac:	d860      	bhi.n	c970 <cbvprintf_package+0x164>
    c8ae:	2829      	cmp	r0, #41	; 0x29
    c8b0:	d82f      	bhi.n	c912 <cbvprintf_package+0x106>
    c8b2:	2825      	cmp	r0, #37	; 0x25
    c8b4:	d05b      	beq.n	c96e <cbvprintf_package+0x162>
    c8b6:	d85b      	bhi.n	c970 <cbvprintf_package+0x164>
    c8b8:	2820      	cmp	r0, #32
    c8ba:	d07f      	beq.n	c9bc <cbvprintf_package+0x1b0>
    c8bc:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    c8c0:	f1d9 0300 	rsbs	r3, r9, #0
    c8c4:	eb43 0309 	adc.w	r3, r3, r9
    c8c8:	e078      	b.n	c9bc <cbvprintf_package+0x1b0>
    c8ca:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    c8ce:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    c8d2:	d84d      	bhi.n	c970 <cbvprintf_package+0x164>
    c8d4:	e8df f00e 	tbb	[pc, lr]
    c8d8:	4c4c4c72 	.word	0x4c4c4c72
    c8dc:	4c4c4c4c 	.word	0x4c4c4c4c
    c8e0:	4c4c4c4c 	.word	0x4c4c4c4c
    c8e4:	4c4c4c4e 	.word	0x4c4c4c4e
    c8e8:	4c4c4c4c 	.word	0x4c4c4c4c
    c8ec:	4e4c5c4c 	.word	0x4e4c5c4c
    c8f0:	5c5c5c4e 	.word	0x5c5c5c4e
    c8f4:	4c6f4e72 	.word	0x4c6f4e72
    c8f8:	4e184c72 	.word	0x4e184c72
    c8fc:	814c4c18 	.word	0x814c4c18
    c900:	4c4c4e7e 	.word	0x4c4c4e7e
    c904:	4c4e      	.short	0x4c4e
    c906:	7e          	.byte	0x7e
    c907:	00          	.byte	0x00
    c908:	2000      	movs	r0, #0
    c90a:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    c90c:	f04f 0b04 	mov.w	fp, #4
    c910:	e03c      	b.n	c98c <cbvprintf_package+0x180>
			switch (*fmt) {
    c912:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    c916:	2001      	movs	r0, #1
    c918:	fa5f fe8e 	uxtb.w	lr, lr
    c91c:	fa00 fe0e 	lsl.w	lr, r0, lr
    c920:	f64f 70da 	movw	r0, #65498	; 0xffda
    c924:	ea1e 0f00 	tst.w	lr, r0
    c928:	d148      	bne.n	c9bc <cbvprintf_package+0x1b0>
    c92a:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    c92e:	d12f      	bne.n	c990 <cbvprintf_package+0x184>
    c930:	f01e 0301 	ands.w	r3, lr, #1
    c934:	d042      	beq.n	c9bc <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    c936:	3c01      	subs	r4, #1
    c938:	445c      	add	r4, fp
    c93a:	f1cb 0e00 	rsb	lr, fp, #0
    c93e:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    c942:	2d00      	cmp	r5, #0
    c944:	d05e      	beq.n	ca04 <cbvprintf_package+0x1f8>
    c946:	ebaa 0e05 	sub.w	lr, sl, r5
    c94a:	44a6      	add	lr, r4
    c94c:	4576      	cmp	r6, lr
    c94e:	f4ff af74 	bcc.w	c83a <cbvprintf_package+0x2e>
		if (is_str_arg) {
    c952:	2800      	cmp	r0, #0
    c954:	d168      	bne.n	ca28 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    c956:	f1ba 0f04 	cmp.w	sl, #4
    c95a:	d143      	bne.n	c9e4 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    c95c:	46e1      	mov	r9, ip
    c95e:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    c962:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    c964:	46cc      	mov	ip, r9
    c966:	f04f 0a04 	mov.w	sl, #4
    c96a:	3404      	adds	r4, #4
    c96c:	e026      	b.n	c9bc <cbvprintf_package+0x1b0>
				arg_idx--;
    c96e:	3a01      	subs	r2, #1
				parsing = false;
    c970:	2300      	movs	r3, #0
				continue;
    c972:	e023      	b.n	c9bc <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    c974:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    c978:	2b6c      	cmp	r3, #108	; 0x6c
    c97a:	d130      	bne.n	c9de <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    c97c:	2000      	movs	r0, #0
    c97e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    c982:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    c984:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    c986:	d1c1      	bne.n	c90c <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    c988:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    c98c:	46da      	mov	sl, fp
    c98e:	e7d2      	b.n	c936 <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    c990:	f10c 0907 	add.w	r9, ip, #7
    c994:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    c998:	3407      	adds	r4, #7
    c99a:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    c99e:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    c9a2:	b135      	cbz	r5, c9b2 <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    c9a4:	9805      	ldr	r0, [sp, #20]
    c9a6:	4420      	add	r0, r4
    c9a8:	42b0      	cmp	r0, r6
    c9aa:	f63f af46 	bhi.w	c83a <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    c9ae:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    c9b2:	2300      	movs	r3, #0
				buf += size;
    c9b4:	3408      	adds	r4, #8
			switch (*fmt) {
    c9b6:	f04f 0b08 	mov.w	fp, #8
    c9ba:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    c9bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    c9c0:	2800      	cmp	r0, #0
    c9c2:	f000 80bc 	beq.w	cb3e <cbvprintf_package+0x332>
			if (!parsing) {
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	f47f af6b 	bne.w	c8a2 <cbvprintf_package+0x96>
				if (*fmt == '%') {
    c9cc:	2825      	cmp	r0, #37	; 0x25
    c9ce:	d1f5      	bne.n	c9bc <cbvprintf_package+0x1b0>
					parsing = true;
    c9d0:	2301      	movs	r3, #1
					arg_idx++;
    c9d2:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    c9d4:	f04f 0b04 	mov.w	fp, #4
    c9d8:	e7ef      	b.n	c9ba <cbvprintf_package+0x1ae>
			switch (*fmt) {
    c9da:	4618      	mov	r0, r3
    c9dc:	e795      	b.n	c90a <cbvprintf_package+0xfe>
    c9de:	2000      	movs	r0, #0
				parsing = false;
    c9e0:	4603      	mov	r3, r0
    c9e2:	e7a8      	b.n	c936 <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    c9e4:	f1ba 0f08 	cmp.w	sl, #8
    c9e8:	f040 809b 	bne.w	cb22 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    c9ec:	f10c 0907 	add.w	r9, ip, #7
    c9f0:	f029 0c07 	bic.w	ip, r9, #7
    c9f4:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    c9f8:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    c9fc:	f04f 0a08 	mov.w	sl, #8
    ca00:	3408      	adds	r4, #8
    ca02:	e7db      	b.n	c9bc <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    ca04:	b980      	cbnz	r0, ca28 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    ca06:	f1ba 0f04 	cmp.w	sl, #4
    ca0a:	d102      	bne.n	ca12 <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    ca0c:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    ca10:	e7a8      	b.n	c964 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    ca12:	f1ba 0f08 	cmp.w	sl, #8
    ca16:	f040 8084 	bne.w	cb22 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    ca1a:	f10c 0907 	add.w	r9, ip, #7
    ca1e:	f029 0907 	bic.w	r9, r9, #7
    ca22:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    ca26:	e7e9      	b.n	c9fc <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    ca28:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    ca2a:	9804      	ldr	r0, [sp, #16]
    ca2c:	3801      	subs	r0, #1
    ca2e:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    ca30:	f859 0b04 	ldr.w	r0, [r9], #4
    ca34:	9000      	str	r0, [sp, #0]
    ca36:	e717      	b.n	c868 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    ca38:	9802      	ldr	r0, [sp, #8]
    ca3a:	0780      	lsls	r0, r0, #30
    ca3c:	d548      	bpl.n	cad0 <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    ca3e:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    ca42:	eba4 0e05 	sub.w	lr, r4, r5
    ca46:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    ca4a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    ca4e:	d31d      	bcc.n	ca8c <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    ca50:	4927      	ldr	r1, [pc, #156]	; (caf0 <cbvprintf_package+0x2e4>)
    ca52:	f240 237b 	movw	r3, #635	; 0x27b
    ca56:	4a27      	ldr	r2, [pc, #156]	; (caf4 <cbvprintf_package+0x2e8>)
    ca58:	4827      	ldr	r0, [pc, #156]	; (caf8 <cbvprintf_package+0x2ec>)
    ca5a:	f018 f960 	bl	24d1e <assert_print>
    ca5e:	4827      	ldr	r0, [pc, #156]	; (cafc <cbvprintf_package+0x2f0>)
    ca60:	f018 f95d 	bl	24d1e <assert_print>
    ca64:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    ca68:	4822      	ldr	r0, [pc, #136]	; (caf4 <cbvprintf_package+0x2e8>)
    ca6a:	f018 f951 	bl	24d10 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    ca6e:	2f0f      	cmp	r7, #15
    ca70:	d80e      	bhi.n	ca90 <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    ca72:	2d00      	cmp	r5, #0
    ca74:	d046      	beq.n	cb04 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    ca76:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    ca7a:	44ec      	add	ip, sp
    ca7c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    ca80:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    ca84:	9803      	ldr	r0, [sp, #12]
    ca86:	3001      	adds	r0, #1
    ca88:	9003      	str	r0, [sp, #12]
    ca8a:	e020      	b.n	cace <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    ca8c:	2f0f      	cmp	r7, #15
    ca8e:	d90c      	bls.n	caaa <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    ca90:	4917      	ldr	r1, [pc, #92]	; (caf0 <cbvprintf_package+0x2e4>)
    ca92:	f44f 7320 	mov.w	r3, #640	; 0x280
    ca96:	4a17      	ldr	r2, [pc, #92]	; (caf4 <cbvprintf_package+0x2e8>)
    ca98:	4817      	ldr	r0, [pc, #92]	; (caf8 <cbvprintf_package+0x2ec>)
    ca9a:	f018 f940 	bl	24d1e <assert_print>
    ca9e:	4818      	ldr	r0, [pc, #96]	; (cb00 <cbvprintf_package+0x2f4>)
    caa0:	f018 f93d 	bl	24d1e <assert_print>
    caa4:	f44f 7120 	mov.w	r1, #640	; 0x280
    caa8:	e7de      	b.n	ca68 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    caaa:	b1bd      	cbz	r5, cadc <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    caac:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    cab0:	44ee      	add	lr, sp
    cab2:	b2c0      	uxtb	r0, r0
    cab4:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    cab8:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    cabc:	f1bc 0f00 	cmp.w	ip, #0
    cac0:	d0e0      	beq.n	ca84 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    cac2:	f060 007f 	orn	r0, r0, #127	; 0x7f
    cac6:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    caca:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    cace:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    cad0:	f1c5 0008 	rsb	r0, r5, #8
    cad4:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    cad6:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    cad8:	9005      	str	r0, [sp, #20]
    cada:	e76f      	b.n	c9bc <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    cadc:	f1bc 0f00 	cmp.w	ip, #0
    cae0:	d010      	beq.n	cb04 <cbvprintf_package+0x2f8>
					len += 1;
    cae2:	3601      	adds	r6, #1
    cae4:	e7f3      	b.n	cace <cbvprintf_package+0x2c2>
    cae6:	bf00      	nop
    cae8:	0002a058 	.word	0x0002a058
    caec:	00031260 	.word	0x00031260
    caf0:	00030f5f 	.word	0x00030f5f
    caf4:	0002c1f4 	.word	0x0002c1f4
    caf8:	0002b6e9 	.word	0x0002b6e9
    cafc:	0002c222 	.word	0x0002c222
    cb00:	0002c243 	.word	0x0002c243
				} else if (rws_pos_en) {
    cb04:	9801      	ldr	r0, [sp, #4]
					len += 2;
    cb06:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    cb08:	2800      	cmp	r0, #0
    cb0a:	d1e0      	bne.n	cace <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    cb0c:	9800      	ldr	r0, [sp, #0]
    cb0e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    cb12:	9205      	str	r2, [sp, #20]
    cb14:	f7fc fc24 	bl	9360 <strlen>
    cb18:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    cb1c:	9a05      	ldr	r2, [sp, #20]
    cb1e:	4406      	add	r6, r0
    cb20:	e7d5      	b.n	cace <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    cb22:	f240 23c5 	movw	r3, #709	; 0x2c5
    cb26:	4a43      	ldr	r2, [pc, #268]	; (cc34 <cbvprintf_package+0x428>)
    cb28:	4943      	ldr	r1, [pc, #268]	; (cc38 <cbvprintf_package+0x42c>)
    cb2a:	4844      	ldr	r0, [pc, #272]	; (cc3c <cbvprintf_package+0x430>)
    cb2c:	f018 f8f7 	bl	24d1e <assert_print>
    cb30:	4651      	mov	r1, sl
    cb32:	4843      	ldr	r0, [pc, #268]	; (cc40 <cbvprintf_package+0x434>)
    cb34:	f018 f8f3 	bl	24d1e <assert_print>
    cb38:	f240 21c5 	movw	r1, #709	; 0x2c5
    cb3c:	e794      	b.n	ca68 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    cb3e:	1b63      	subs	r3, r4, r5
    cb40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    cb44:	d30c      	bcc.n	cb60 <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    cb46:	493c      	ldr	r1, [pc, #240]	; (cc38 <cbvprintf_package+0x42c>)
    cb48:	f240 23d1 	movw	r3, #721	; 0x2d1
    cb4c:	4a39      	ldr	r2, [pc, #228]	; (cc34 <cbvprintf_package+0x428>)
    cb4e:	483b      	ldr	r0, [pc, #236]	; (cc3c <cbvprintf_package+0x430>)
    cb50:	f018 f8e5 	bl	24d1e <assert_print>
    cb54:	483b      	ldr	r0, [pc, #236]	; (cc44 <cbvprintf_package+0x438>)
    cb56:	f018 f8e2 	bl	24d1e <assert_print>
    cb5a:	f240 21d1 	movw	r1, #721	; 0x2d1
    cb5e:	e783      	b.n	ca68 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    cb60:	b91d      	cbnz	r5, cb6a <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    cb62:	f1a6 0408 	sub.w	r4, r6, #8
    cb66:	18e0      	adds	r0, r4, r3
    cb68:	e669      	b.n	c83e <cbvprintf_package+0x32>
	if (rws_pos_en) {
    cb6a:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    cb6c:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    cb6e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    cb70:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    cb72:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    cb76:	b1c2      	cbz	r2, cbaa <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    cb78:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    cb7a:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    cb7e:	f1b8 0f00 	cmp.w	r8, #0
    cb82:	d005      	beq.n	cb90 <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    cb84:	2200      	movs	r2, #0
    cb86:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    cb88:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    cb8c:	4297      	cmp	r7, r2
    cb8e:	d10e      	bne.n	cbae <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    cb90:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    cb94:	f1c5 0301 	rsb	r3, r5, #1
    cb98:	f10d 0920 	add.w	r9, sp, #32
    cb9c:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    cb9e:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    cba2:	4557      	cmp	r7, sl
    cba4:	d112      	bne.n	cbcc <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    cba6:	1b60      	subs	r0, r4, r5
    cba8:	e649      	b.n	c83e <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    cbaa:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    cbac:	e7e5      	b.n	cb7a <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    cbae:	f810 3b01 	ldrb.w	r3, [r0], #1
    cbb2:	0619      	lsls	r1, r3, #24
    cbb4:	d508      	bpl.n	cbc8 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    cbb6:	eb04 0e0c 	add.w	lr, r4, ip
    cbba:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    cbbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    cbc0:	f4ff ae3b 	bcc.w	c83a <cbvprintf_package+0x2e>
			*buf++ = pos;
    cbc4:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    cbc8:	3201      	adds	r2, #1
    cbca:	e7df      	b.n	cb8c <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    cbcc:	f1b8 0f00 	cmp.w	r8, #0
    cbd0:	d003      	beq.n	cbda <cbvprintf_package+0x3ce>
    cbd2:	f999 2000 	ldrsb.w	r2, [r9]
    cbd6:	2a00      	cmp	r2, #0
    cbd8:	db17      	blt.n	cc0a <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    cbda:	9b01      	ldr	r3, [sp, #4]
    cbdc:	b1d3      	cbz	r3, cc14 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    cbde:	f81a 200b 	ldrb.w	r2, [sl, fp]
    cbe2:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    cbe6:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    cbe8:	9b02      	ldr	r3, [sp, #8]
    cbea:	1898      	adds	r0, r3, r2
    cbec:	4420      	add	r0, r4
    cbee:	4286      	cmp	r6, r0
    cbf0:	f4ff ae23 	bcc.w	c83a <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    cbf4:	f899 0000 	ldrb.w	r0, [r9]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    cbf8:	9900      	ldr	r1, [sp, #0]
    cbfa:	f804 0b01 	strb.w	r0, [r4], #1
    cbfe:	4620      	mov	r0, r4
    cc00:	9203      	str	r2, [sp, #12]
    cc02:	f01c fdf2 	bl	297ea <memcpy>
		buf += size;
    cc06:	9a03      	ldr	r2, [sp, #12]
    cc08:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    cc0a:	f10a 0a01 	add.w	sl, sl, #1
    cc0e:	f109 0901 	add.w	r9, r9, #1
    cc12:	e7c6      	b.n	cba2 <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    cc14:	f899 2000 	ldrb.w	r2, [r9]
    cc18:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    cc1c:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    cc1e:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    cc20:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    cc22:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    cc26:	f7fc fb9b 	bl	9360 <strlen>
    cc2a:	1c42      	adds	r2, r0, #1
    cc2c:	e7dc      	b.n	cbe8 <cbvprintf_package+0x3dc>
		return -EFAULT;
    cc2e:	f06f 000d 	mvn.w	r0, #13
    cc32:	e604      	b.n	c83e <cbvprintf_package+0x32>
    cc34:	0002c1f4 	.word	0x0002c1f4
    cc38:	00030f5f 	.word	0x00030f5f
    cc3c:	0002b6e9 	.word	0x0002b6e9
    cc40:	0002c25d 	.word	0x0002c25d
    cc44:	0002c272 	.word	0x0002c272

0000cc48 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    cc48:	4b01      	ldr	r3, [pc, #4]	; (cc50 <char_out+0x8>)
    cc4a:	681b      	ldr	r3, [r3, #0]
    cc4c:	4718      	bx	r3
    cc4e:	bf00      	nop
    cc50:	200083f8 	.word	0x200083f8

0000cc54 <__printk_hook_install>:
	_char_out = fn;
    cc54:	4b01      	ldr	r3, [pc, #4]	; (cc5c <__printk_hook_install+0x8>)
    cc56:	6018      	str	r0, [r3, #0]
}
    cc58:	4770      	bx	lr
    cc5a:	bf00      	nop
    cc5c:	200083f8 	.word	0x200083f8

0000cc60 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    cc60:	b507      	push	{r0, r1, r2, lr}
    cc62:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    cc64:	2100      	movs	r1, #0
    cc66:	4602      	mov	r2, r0
    cc68:	9100      	str	r1, [sp, #0]
    cc6a:	4803      	ldr	r0, [pc, #12]	; (cc78 <vprintk+0x18>)
    cc6c:	f000 fcb0 	bl	d5d0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    cc70:	b003      	add	sp, #12
    cc72:	f85d fb04 	ldr.w	pc, [sp], #4
    cc76:	bf00      	nop
    cc78:	0000cc49 	.word	0x0000cc49

0000cc7c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    cc7c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    cc7e:	2500      	movs	r5, #0
{
    cc80:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    cc82:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    cc86:	4604      	mov	r4, r0
    cc88:	9500      	str	r5, [sp, #0]
    cc8a:	a903      	add	r1, sp, #12
    cc8c:	4805      	ldr	r0, [pc, #20]	; (cca4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    cc8e:	9505      	str	r5, [sp, #20]
    cc90:	f000 fc9e 	bl	d5d0 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    cc94:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    cc98:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    cc9a:	bfb8      	it	lt
    cc9c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    cc9e:	b007      	add	sp, #28
    cca0:	bd30      	pop	{r4, r5, pc}
    cca2:	bf00      	nop
    cca4:	00024975 	.word	0x00024975

0000cca8 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    cca8:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    ccaa:	460c      	mov	r4, r1
    ccac:	2900      	cmp	r1, #0
    ccae:	d034      	beq.n	cd1a <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    ccb0:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ccb2:	1f0b      	subs	r3, r1, #4
    ccb4:	1a9b      	subs	r3, r3, r2
    ccb6:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    ccb8:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    ccbc:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ccbe:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    ccc0:	07e8      	lsls	r0, r5, #31
    ccc2:	d40d      	bmi.n	cce0 <sys_heap_free+0x38>
    ccc4:	23af      	movs	r3, #175	; 0xaf
    ccc6:	4a15      	ldr	r2, [pc, #84]	; (cd1c <sys_heap_free+0x74>)
    ccc8:	4915      	ldr	r1, [pc, #84]	; (cd20 <sys_heap_free+0x78>)
    ccca:	4816      	ldr	r0, [pc, #88]	; (cd24 <sys_heap_free+0x7c>)
    cccc:	f018 f827 	bl	24d1e <assert_print>
    ccd0:	4621      	mov	r1, r4
    ccd2:	4815      	ldr	r0, [pc, #84]	; (cd28 <sys_heap_free+0x80>)
    ccd4:	f018 f823 	bl	24d1e <assert_print>
    ccd8:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    ccda:	4810      	ldr	r0, [pc, #64]	; (cd1c <sys_heap_free+0x74>)
    ccdc:	f018 f818 	bl	24d10 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    cce0:	4610      	mov	r0, r2
    cce2:	f017 fe7e 	bl	249e2 <chunk_size>
    cce6:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    cce8:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    ccec:	1b80      	subs	r0, r0, r6
    ccee:	4281      	cmp	r1, r0
    ccf0:	d00b      	beq.n	cd0a <sys_heap_free+0x62>
    ccf2:	23b7      	movs	r3, #183	; 0xb7
    ccf4:	4a09      	ldr	r2, [pc, #36]	; (cd1c <sys_heap_free+0x74>)
    ccf6:	490d      	ldr	r1, [pc, #52]	; (cd2c <sys_heap_free+0x84>)
    ccf8:	480a      	ldr	r0, [pc, #40]	; (cd24 <sys_heap_free+0x7c>)
    ccfa:	f018 f810 	bl	24d1e <assert_print>
    ccfe:	4621      	mov	r1, r4
    cd00:	480b      	ldr	r0, [pc, #44]	; (cd30 <sys_heap_free+0x88>)
    cd02:	f018 f80c 	bl	24d1e <assert_print>
    cd06:	21b7      	movs	r1, #183	; 0xb7
    cd08:	e7e7      	b.n	ccda <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    cd0a:	f025 0501 	bic.w	r5, r5, #1
    cd0e:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    cd10:	4610      	mov	r0, r2
}
    cd12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    cd16:	f017 bf21 	b.w	24b5c <free_chunk>
}
    cd1a:	bd70      	pop	{r4, r5, r6, pc}
    cd1c:	0002c29a 	.word	0x0002c29a
    cd20:	0002c2bb 	.word	0x0002c2bb
    cd24:	0002b6e9 	.word	0x0002b6e9
    cd28:	0002c2cc 	.word	0x0002c2cc
    cd2c:	0002c304 	.word	0x0002c304
    cd30:	0002c32a 	.word	0x0002c32a

0000cd34 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    cd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd38:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    cd3a:	400b      	ands	r3, r1
{
    cd3c:	460f      	mov	r7, r1
    cd3e:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    cd40:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    cd42:	d010      	beq.n	cd66 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    cd44:	f1c1 0900 	rsb	r9, r1, #0
    cd48:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    cd4c:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cd4e:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    cd50:	2a04      	cmp	r2, #4
    cd52:	bf28      	it	cs
    cd54:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cd56:	4219      	tst	r1, r3
    cd58:	d10c      	bne.n	cd74 <sys_heap_aligned_alloc+0x40>
    cd5a:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    cd5c:	b9e4      	cbnz	r4, cd98 <sys_heap_aligned_alloc+0x64>
		return NULL;
    cd5e:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    cd60:	4628      	mov	r0, r5
    cd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    cd66:	2904      	cmp	r1, #4
    cd68:	d813      	bhi.n	cd92 <sys_heap_aligned_alloc+0x5e>
}
    cd6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    cd6e:	4611      	mov	r1, r2
    cd70:	f017 bf25 	b.w	24bbe <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    cd74:	492c      	ldr	r1, [pc, #176]	; (ce28 <sys_heap_aligned_alloc+0xf4>)
    cd76:	f44f 73a2 	mov.w	r3, #324	; 0x144
    cd7a:	4a2c      	ldr	r2, [pc, #176]	; (ce2c <sys_heap_aligned_alloc+0xf8>)
    cd7c:	482c      	ldr	r0, [pc, #176]	; (ce30 <sys_heap_aligned_alloc+0xfc>)
    cd7e:	f017 ffce 	bl	24d1e <assert_print>
    cd82:	482c      	ldr	r0, [pc, #176]	; (ce34 <sys_heap_aligned_alloc+0x100>)
    cd84:	f017 ffcb 	bl	24d1e <assert_print>
    cd88:	f44f 71a2 	mov.w	r1, #324	; 0x144
    cd8c:	4827      	ldr	r0, [pc, #156]	; (ce2c <sys_heap_aligned_alloc+0xf8>)
    cd8e:	f017 ffbf 	bl	24d10 <assert_post_action>
		rew = 0;
    cd92:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    cd94:	2204      	movs	r2, #4
    cd96:	e7e1      	b.n	cd5c <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    cd98:	68b3      	ldr	r3, [r6, #8]
    cd9a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    cd9e:	d9de      	bls.n	cd5e <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cda0:	f104 010b 	add.w	r1, r4, #11
    cda4:	4439      	add	r1, r7
    cda6:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    cda8:	4630      	mov	r0, r6
    cdaa:	08c9      	lsrs	r1, r1, #3
    cdac:	f017 fe6f 	bl	24a8e <alloc_chunk>
	if (c0 == 0) {
    cdb0:	4680      	mov	r8, r0
    cdb2:	2800      	cmp	r0, #0
    cdb4:	d0d3      	beq.n	cd5e <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    cdb6:	f109 0504 	add.w	r5, r9, #4
    cdba:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    cdbe:	1e7b      	subs	r3, r7, #1
    cdc0:	4435      	add	r5, r6
    cdc2:	441d      	add	r5, r3
    cdc4:	427f      	negs	r7, r7
    cdc6:	403d      	ands	r5, r7
    cdc8:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cdcc:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cdce:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cdd0:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cdd2:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cdd4:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    cdd8:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    cdda:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cdde:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    cde2:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    cde6:	d208      	bcs.n	cdfa <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    cde8:	4601      	mov	r1, r0
    cdea:	463a      	mov	r2, r7
    cdec:	4630      	mov	r0, r6
    cdee:	f017 fe9b 	bl	24b28 <split_chunks>
		free_list_add(h, c0);
    cdf2:	4641      	mov	r1, r8
    cdf4:	4630      	mov	r0, r6
    cdf6:	f017 fdf9 	bl	249ec <free_list_add>
	return c + chunk_size(h, c);
    cdfa:	4639      	mov	r1, r7
    cdfc:	4630      	mov	r0, r6
    cdfe:	f017 fdf0 	bl	249e2 <chunk_size>
    ce02:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ce04:	4284      	cmp	r4, r0
    ce06:	d207      	bcs.n	ce18 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    ce08:	4630      	mov	r0, r6
    ce0a:	4622      	mov	r2, r4
    ce0c:	f017 fe8c 	bl	24b28 <split_chunks>
		free_list_add(h, c_end);
    ce10:	4621      	mov	r1, r4
    ce12:	4630      	mov	r0, r6
    ce14:	f017 fdea 	bl	249ec <free_list_add>
	void *cmem = &buf[c];
    ce18:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ce1c:	8873      	ldrh	r3, [r6, #2]
    ce1e:	f043 0301 	orr.w	r3, r3, #1
    ce22:	8073      	strh	r3, [r6, #2]
    ce24:	e79c      	b.n	cd60 <sys_heap_aligned_alloc+0x2c>
    ce26:	bf00      	nop
    ce28:	0002c366 	.word	0x0002c366
    ce2c:	0002c29a 	.word	0x0002c29a
    ce30:	0002b6e9 	.word	0x0002b6e9
    ce34:	0002c381 	.word	0x0002c381

0000ce38 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    ce38:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce3e:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    ce40:	d30e      	bcc.n	ce60 <sys_heap_init+0x28>
    ce42:	493a      	ldr	r1, [pc, #232]	; (cf2c <sys_heap_init+0xf4>)
    ce44:	f240 13eb 	movw	r3, #491	; 0x1eb
    ce48:	4a39      	ldr	r2, [pc, #228]	; (cf30 <sys_heap_init+0xf8>)
    ce4a:	483a      	ldr	r0, [pc, #232]	; (cf34 <sys_heap_init+0xfc>)
    ce4c:	f017 ff67 	bl	24d1e <assert_print>
    ce50:	4839      	ldr	r0, [pc, #228]	; (cf38 <sys_heap_init+0x100>)
    ce52:	f017 ff64 	bl	24d1e <assert_print>
    ce56:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    ce5a:	4835      	ldr	r0, [pc, #212]	; (cf30 <sys_heap_init+0xf8>)
    ce5c:	f017 ff58 	bl	24d10 <assert_post_action>
    ce60:	2a04      	cmp	r2, #4
    ce62:	d80c      	bhi.n	ce7e <sys_heap_init+0x46>
    ce64:	4935      	ldr	r1, [pc, #212]	; (cf3c <sys_heap_init+0x104>)
    ce66:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    ce6a:	4a31      	ldr	r2, [pc, #196]	; (cf30 <sys_heap_init+0xf8>)
    ce6c:	4831      	ldr	r0, [pc, #196]	; (cf34 <sys_heap_init+0xfc>)
    ce6e:	f017 ff56 	bl	24d1e <assert_print>
    ce72:	4833      	ldr	r0, [pc, #204]	; (cf40 <sys_heap_init+0x108>)
    ce74:	f017 ff53 	bl	24d1e <assert_print>
    ce78:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    ce7c:	e7ed      	b.n	ce5a <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    ce7e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ce80:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ce82:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ce84:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ce88:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    ce8c:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    ce8e:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    ce90:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    ce94:	d80c      	bhi.n	ceb0 <sys_heap_init+0x78>
    ce96:	492b      	ldr	r1, [pc, #172]	; (cf44 <sys_heap_init+0x10c>)
    ce98:	f240 13fb 	movw	r3, #507	; 0x1fb
    ce9c:	4a24      	ldr	r2, [pc, #144]	; (cf30 <sys_heap_init+0xf8>)
    ce9e:	4825      	ldr	r0, [pc, #148]	; (cf34 <sys_heap_init+0xfc>)
    cea0:	f017 ff3d 	bl	24d1e <assert_print>
    cea4:	4826      	ldr	r0, [pc, #152]	; (cf40 <sys_heap_init+0x108>)
    cea6:	f017 ff3a 	bl	24d1e <assert_print>
    ceaa:	f240 11fb 	movw	r1, #507	; 0x1fb
    ceae:	e7d4      	b.n	ce5a <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    ceb0:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    ceb4:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    ceb6:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ceb8:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cebc:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    cec0:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cec2:	3107      	adds	r1, #7
    cec4:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cec6:	1c4d      	adds	r5, r1, #1
    cec8:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    ceca:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    cecc:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cece:	d90c      	bls.n	ceea <sys_heap_init+0xb2>
    ced0:	491d      	ldr	r1, [pc, #116]	; (cf48 <sys_heap_init+0x110>)
    ced2:	f44f 7303 	mov.w	r3, #524	; 0x20c
    ced6:	4a16      	ldr	r2, [pc, #88]	; (cf30 <sys_heap_init+0xf8>)
    ced8:	4816      	ldr	r0, [pc, #88]	; (cf34 <sys_heap_init+0xfc>)
    ceda:	f017 ff20 	bl	24d1e <assert_print>
    cede:	4818      	ldr	r0, [pc, #96]	; (cf40 <sys_heap_init+0x108>)
    cee0:	f017 ff1d 	bl	24d1e <assert_print>
    cee4:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cee8:	e7b7      	b.n	ce5a <sys_heap_init+0x22>
    ceea:	f100 050c 	add.w	r5, r0, #12
    ceee:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cef2:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    cef6:	42b5      	cmp	r5, r6
    cef8:	d1fb      	bne.n	cef2 <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cefa:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cefc:	f045 0501 	orr.w	r5, r5, #1
    cf00:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    cf02:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    cf04:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cf08:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    cf0a:	8004      	strh	r4, [r0, #0]
    cf0c:	8077      	strh	r7, [r6, #2]
    cf0e:	1886      	adds	r6, r0, r2
    cf10:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    cf14:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    cf18:	8074      	strh	r4, [r6, #2]
    cf1a:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cf1c:	885a      	ldrh	r2, [r3, #2]
    cf1e:	f042 0201 	orr.w	r2, r2, #1
    cf22:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cf24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    cf28:	f017 bd60 	b.w	249ec <free_list_add>
    cf2c:	0002c39e 	.word	0x0002c39e
    cf30:	0002c29a 	.word	0x0002c29a
    cf34:	0002b6e9 	.word	0x0002b6e9
    cf38:	0002c3b4 	.word	0x0002c3b4
    cf3c:	0002c3cb 	.word	0x0002c3cb
    cf40:	0002c3ec 	.word	0x0002c3ec
    cf44:	0002c405 	.word	0x0002c405
    cf48:	0002c42e 	.word	0x0002c42e

0000cf4c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cf4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf50:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cf52:	8ba3      	ldrh	r3, [r4, #28]
{
    cf54:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cf56:	0719      	lsls	r1, r3, #28
{
    cf58:	4615      	mov	r5, r2
	if (processing) {
    cf5a:	d412      	bmi.n	cf82 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cf5c:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cf5e:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    cf62:	d164      	bne.n	d02e <process_event+0xe2>
			evt = process_recheck(mgr);
    cf64:	4620      	mov	r0, r4
    cf66:	f017 fe53 	bl	24c10 <process_recheck>
		}

		if (evt == EVT_NOP) {
    cf6a:	b188      	cbz	r0, cf90 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cf6c:	3801      	subs	r0, #1
    cf6e:	2804      	cmp	r0, #4
    cf70:	f200 8134 	bhi.w	d1dc <process_event+0x290>
    cf74:	e8df f010 	tbh	[pc, r0, lsl #1]
    cf78:	0132005b 	.word	0x0132005b
    cf7c:	00d10081 	.word	0x00d10081
    cf80:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    cf82:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cf84:	bf0c      	ite	eq
    cf86:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cf8a:	f043 0120 	orrne.w	r1, r3, #32
    cf8e:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    cf90:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf92:	4620      	mov	r0, r4
    cf94:	f012 fca4 	bl	1f8e0 <z_spin_unlock_valid>
    cf98:	2800      	cmp	r0, #0
    cf9a:	f040 819b 	bne.w	d2d4 <process_event+0x388>
    cf9e:	4998      	ldr	r1, [pc, #608]	; (d200 <process_event+0x2b4>)
    cfa0:	23c2      	movs	r3, #194	; 0xc2
    cfa2:	4a98      	ldr	r2, [pc, #608]	; (d204 <process_event+0x2b8>)
    cfa4:	4898      	ldr	r0, [pc, #608]	; (d208 <process_event+0x2bc>)
    cfa6:	f017 feba 	bl	24d1e <assert_print>
    cfaa:	4621      	mov	r1, r4
    cfac:	e0b0      	b.n	d110 <process_event+0x1c4>
    cfae:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cfb2:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cfb4:	2801      	cmp	r0, #1
    cfb6:	d81e      	bhi.n	cff6 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    cfb8:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    cfba:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    cfbc:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    cfbe:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cfc2:	d114      	bne.n	cfee <process_event+0xa2>
		*clients = mgr->clients;
    cfc4:	463a      	mov	r2, r7
    cfc6:	e003      	b.n	cfd0 <process_event+0x84>
				mgr->refs += 1U;
    cfc8:	8be0      	ldrh	r0, [r4, #30]
    cfca:	3001      	adds	r0, #1
    cfcc:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    cfce:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cfd0:	2a00      	cmp	r2, #0
    cfd2:	d1f9      	bne.n	cfc8 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cfd4:	f023 0307 	bic.w	r3, r3, #7
    cfd8:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    cfdc:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cfde:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cfe0:	f017 fe16 	bl	24c10 <process_recheck>
    cfe4:	b390      	cbz	r0, d04c <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cfe6:	f042 0220 	orr.w	r2, r2, #32
    cfea:	83a2      	strh	r2, [r4, #28]
    cfec:	e02e      	b.n	d04c <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cfee:	f023 0307 	bic.w	r3, r3, #7
    cff2:	b29a      	uxth	r2, r3
}
    cff4:	e7f2      	b.n	cfdc <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cff6:	2a04      	cmp	r2, #4
    cff8:	d133      	bne.n	d062 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cffa:	f023 0307 	bic.w	r3, r3, #7
    cffe:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    d000:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d002:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    d004:	f017 fe04 	bl	24c10 <process_recheck>
    d008:	b110      	cbz	r0, d010 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    d00a:	f042 0220 	orr.w	r2, r2, #32
    d00e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d010:	8ba3      	ldrh	r3, [r4, #28]
    d012:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    d016:	4589      	cmp	r9, r1
    d018:	f040 80ea 	bne.w	d1f0 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    d01c:	8ba1      	ldrh	r1, [r4, #28]
    d01e:	06ca      	lsls	r2, r1, #27
    d020:	f140 814f 	bpl.w	d2c2 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    d024:	f021 0310 	bic.w	r3, r1, #16
    d028:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    d02a:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    d02e:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d032:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    d034:	f1b8 0f00 	cmp.w	r8, #0
    d038:	dab9      	bge.n	cfae <process_event+0x62>
	list->head = NULL;
    d03a:	2200      	movs	r2, #0
		*clients = mgr->clients;
    d03c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d03e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    d042:	e9c4 2200 	strd	r2, r2, [r4]
    d046:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    d04a:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d04c:	8ba3      	ldrh	r3, [r4, #28]
    d04e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    d052:	4589      	cmp	r9, r1
    d054:	f040 80cd 	bne.w	d1f2 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    d058:	2f00      	cmp	r7, #0
    d05a:	d0df      	beq.n	d01c <process_event+0xd0>
    d05c:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d05e:	46b2      	mov	sl, r6
    d060:	e044      	b.n	d0ec <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    d062:	496a      	ldr	r1, [pc, #424]	; (d20c <process_event+0x2c0>)
    d064:	f240 131b 	movw	r3, #283	; 0x11b
    d068:	4a69      	ldr	r2, [pc, #420]	; (d210 <process_event+0x2c4>)
    d06a:	4867      	ldr	r0, [pc, #412]	; (d208 <process_event+0x2bc>)
    d06c:	f017 fe57 	bl	24d1e <assert_print>
    d070:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    d074:	4866      	ldr	r0, [pc, #408]	; (d210 <process_event+0x2c4>)
    d076:	f017 fe4b 	bl	24d10 <assert_post_action>
    d07a:	b149      	cbz	r1, d090 <process_event+0x144>
    d07c:	4965      	ldr	r1, [pc, #404]	; (d214 <process_event+0x2c8>)
    d07e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    d082:	4a63      	ldr	r2, [pc, #396]	; (d210 <process_event+0x2c4>)
    d084:	4860      	ldr	r0, [pc, #384]	; (d208 <process_event+0x2bc>)
    d086:	f017 fe4a 	bl	24d1e <assert_print>
    d08a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    d08e:	e7f1      	b.n	d074 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    d090:	6823      	ldr	r3, [r4, #0]
    d092:	b94b      	cbnz	r3, d0a8 <process_event+0x15c>
    d094:	4960      	ldr	r1, [pc, #384]	; (d218 <process_event+0x2cc>)
    d096:	f240 1357 	movw	r3, #343	; 0x157
    d09a:	4a5d      	ldr	r2, [pc, #372]	; (d210 <process_event+0x2c4>)
    d09c:	485a      	ldr	r0, [pc, #360]	; (d208 <process_event+0x2bc>)
    d09e:	f017 fe3e 	bl	24d1e <assert_print>
    d0a2:	f240 1157 	movw	r1, #343	; 0x157
    d0a6:	e7e5      	b.n	d074 <process_event+0x128>
			transit = mgr->transitions->start;
    d0a8:	6923      	ldr	r3, [r4, #16]
    d0aa:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    d0ac:	b94e      	cbnz	r6, d0c2 <process_event+0x176>
    d0ae:	495b      	ldr	r1, [pc, #364]	; (d21c <process_event+0x2d0>)
    d0b0:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    d0b4:	4a56      	ldr	r2, [pc, #344]	; (d210 <process_event+0x2c4>)
    d0b6:	4854      	ldr	r0, [pc, #336]	; (d208 <process_event+0x2bc>)
    d0b8:	f017 fe31 	bl	24d1e <assert_print>
    d0bc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    d0c0:	e7d8      	b.n	d074 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    d0c2:	460f      	mov	r7, r1
		res = 0;
    d0c4:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d0c6:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d0ca:	8ba3      	ldrh	r3, [r4, #28]
    d0cc:	f023 0307 	bic.w	r3, r3, #7
    d0d0:	f043 0306 	orr.w	r3, r3, #6
    d0d4:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    d0d6:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    d0d8:	68a2      	ldr	r2, [r4, #8]
    d0da:	2a00      	cmp	r2, #0
    d0dc:	f040 808b 	bne.w	d1f6 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    d0e0:	2f00      	cmp	r7, #0
    d0e2:	f040 808b 	bne.w	d1fc <process_event+0x2b0>
		    || (transit != NULL)) {
    d0e6:	2e00      	cmp	r6, #0
    d0e8:	d098      	beq.n	d01c <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d0ea:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    d0ec:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    d0f0:	f104 0b14 	add.w	fp, r4, #20
    d0f4:	4658      	mov	r0, fp
			mgr->flags = flags;
    d0f6:	83a3      	strh	r3, [r4, #28]
    d0f8:	f012 fbf2 	bl	1f8e0 <z_spin_unlock_valid>
    d0fc:	2800      	cmp	r0, #0
    d0fe:	f040 8097 	bne.w	d230 <process_event+0x2e4>
    d102:	493f      	ldr	r1, [pc, #252]	; (d200 <process_event+0x2b4>)
    d104:	23c2      	movs	r3, #194	; 0xc2
    d106:	4a3f      	ldr	r2, [pc, #252]	; (d204 <process_event+0x2b8>)
    d108:	483f      	ldr	r0, [pc, #252]	; (d208 <process_event+0x2bc>)
    d10a:	f017 fe08 	bl	24d1e <assert_print>
    d10e:	4659      	mov	r1, fp
    d110:	4843      	ldr	r0, [pc, #268]	; (d220 <process_event+0x2d4>)
    d112:	f017 fe04 	bl	24d1e <assert_print>
    d116:	21c2      	movs	r1, #194	; 0xc2
    d118:	e0ae      	b.n	d278 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    d11a:	2902      	cmp	r1, #2
    d11c:	d009      	beq.n	d132 <process_event+0x1e6>
    d11e:	4941      	ldr	r1, [pc, #260]	; (d224 <process_event+0x2d8>)
    d120:	f240 135d 	movw	r3, #349	; 0x15d
    d124:	4a3a      	ldr	r2, [pc, #232]	; (d210 <process_event+0x2c4>)
    d126:	4838      	ldr	r0, [pc, #224]	; (d208 <process_event+0x2bc>)
    d128:	f017 fdf9 	bl	24d1e <assert_print>
    d12c:	f240 115d 	movw	r1, #349	; 0x15d
    d130:	e7a0      	b.n	d074 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    d132:	8be7      	ldrh	r7, [r4, #30]
    d134:	b14f      	cbz	r7, d14a <process_event+0x1fe>
    d136:	493c      	ldr	r1, [pc, #240]	; (d228 <process_event+0x2dc>)
    d138:	f44f 73af 	mov.w	r3, #350	; 0x15e
    d13c:	4a34      	ldr	r2, [pc, #208]	; (d210 <process_event+0x2c4>)
    d13e:	4832      	ldr	r0, [pc, #200]	; (d208 <process_event+0x2bc>)
    d140:	f017 fded 	bl	24d1e <assert_print>
    d144:	f44f 71af 	mov.w	r1, #350	; 0x15e
    d148:	e794      	b.n	d074 <process_event+0x128>
			transit = mgr->transitions->stop;
    d14a:	6923      	ldr	r3, [r4, #16]
    d14c:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    d14e:	b94e      	cbnz	r6, d164 <process_event+0x218>
    d150:	4932      	ldr	r1, [pc, #200]	; (d21c <process_event+0x2d0>)
    d152:	f240 1361 	movw	r3, #353	; 0x161
    d156:	4a2e      	ldr	r2, [pc, #184]	; (d210 <process_event+0x2c4>)
    d158:	482b      	ldr	r0, [pc, #172]	; (d208 <process_event+0x2bc>)
    d15a:	f017 fde0 	bl	24d1e <assert_print>
    d15e:	f240 1161 	movw	r1, #353	; 0x161
    d162:	e787      	b.n	d074 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d164:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    d166:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d168:	f023 0307 	bic.w	r3, r3, #7
    d16c:	f043 0304 	orr.w	r3, r3, #4
    d170:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d172:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d176:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d178:	e7ae      	b.n	d0d8 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d17a:	2901      	cmp	r1, #1
    d17c:	d009      	beq.n	d192 <process_event+0x246>
    d17e:	492b      	ldr	r1, [pc, #172]	; (d22c <process_event+0x2e0>)
    d180:	f44f 73b2 	mov.w	r3, #356	; 0x164
    d184:	4a22      	ldr	r2, [pc, #136]	; (d210 <process_event+0x2c4>)
    d186:	4820      	ldr	r0, [pc, #128]	; (d208 <process_event+0x2bc>)
    d188:	f017 fdc9 	bl	24d1e <assert_print>
    d18c:	f44f 71b2 	mov.w	r1, #356	; 0x164
    d190:	e770      	b.n	d074 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    d192:	6823      	ldr	r3, [r4, #0]
    d194:	b94b      	cbnz	r3, d1aa <process_event+0x25e>
    d196:	4920      	ldr	r1, [pc, #128]	; (d218 <process_event+0x2cc>)
    d198:	f240 1365 	movw	r3, #357	; 0x165
    d19c:	4a1c      	ldr	r2, [pc, #112]	; (d210 <process_event+0x2c4>)
    d19e:	481a      	ldr	r0, [pc, #104]	; (d208 <process_event+0x2bc>)
    d1a0:	f017 fdbd 	bl	24d1e <assert_print>
    d1a4:	f240 1165 	movw	r1, #357	; 0x165
    d1a8:	e764      	b.n	d074 <process_event+0x128>
			transit = mgr->transitions->reset;
    d1aa:	6923      	ldr	r3, [r4, #16]
    d1ac:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    d1ae:	b94e      	cbnz	r6, d1c4 <process_event+0x278>
    d1b0:	491a      	ldr	r1, [pc, #104]	; (d21c <process_event+0x2d0>)
    d1b2:	f44f 73b4 	mov.w	r3, #360	; 0x168
    d1b6:	4a16      	ldr	r2, [pc, #88]	; (d210 <process_event+0x2c4>)
    d1b8:	4813      	ldr	r0, [pc, #76]	; (d208 <process_event+0x2bc>)
    d1ba:	f017 fdb0 	bl	24d1e <assert_print>
    d1be:	f44f 71b4 	mov.w	r1, #360	; 0x168
    d1c2:	e757      	b.n	d074 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    d1c4:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d1c6:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    d1c8:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d1ca:	f023 0307 	bic.w	r3, r3, #7
    d1ce:	f043 0305 	orr.w	r3, r3, #5
    d1d2:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d1d4:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    d1d8:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d1da:	e77d      	b.n	d0d8 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    d1dc:	490b      	ldr	r1, [pc, #44]	; (d20c <process_event+0x2c0>)
    d1de:	f240 136b 	movw	r3, #363	; 0x16b
    d1e2:	4a0b      	ldr	r2, [pc, #44]	; (d210 <process_event+0x2c4>)
    d1e4:	4808      	ldr	r0, [pc, #32]	; (d208 <process_event+0x2bc>)
    d1e6:	f017 fd9a 	bl	24d1e <assert_print>
    d1ea:	f240 116b 	movw	r1, #363	; 0x16b
    d1ee:	e741      	b.n	d074 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    d1f0:	2700      	movs	r7, #0
    d1f2:	2600      	movs	r6, #0
    d1f4:	e770      	b.n	d0d8 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d1f6:	f04f 0a01 	mov.w	sl, #1
    d1fa:	e777      	b.n	d0ec <process_event+0x1a0>
    d1fc:	4692      	mov	sl, r2
    d1fe:	e775      	b.n	d0ec <process_event+0x1a0>
    d200:	0002c529 	.word	0x0002c529
    d204:	0002c4fc 	.word	0x0002c4fc
    d208:	0002b6e9 	.word	0x0002b6e9
    d20c:	00030f5f 	.word	0x00030f5f
    d210:	0002c459 	.word	0x0002c459
    d214:	0002c47b 	.word	0x0002c47b
    d218:	0002c487 	.word	0x0002c487
    d21c:	0002c4aa 	.word	0x0002c4aa
    d220:	0002c540 	.word	0x0002c540
    d224:	0002c4c1 	.word	0x0002c4c1
    d228:	0002c4d7 	.word	0x0002c4d7
    d22c:	0002c4e6 	.word	0x0002c4e6
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    d230:	f385 8811 	msr	BASEPRI, r5
    d234:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    d238:	f1ba 0f00 	cmp.w	sl, #0
    d23c:	d11e      	bne.n	d27c <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    d23e:	2f00      	cmp	r7, #0
    d240:	d12f      	bne.n	d2a2 <process_event+0x356>
			if (transit != NULL) {
    d242:	b116      	cbz	r6, d24a <process_event+0x2fe>
				transit(mgr, transition_complete);
    d244:	4620      	mov	r0, r4
    d246:	4926      	ldr	r1, [pc, #152]	; (d2e0 <process_event+0x394>)
    d248:	47b0      	blx	r6
	__asm__ volatile(
    d24a:	f04f 0320 	mov.w	r3, #32
    d24e:	f3ef 8511 	mrs	r5, BASEPRI
    d252:	f383 8812 	msr	BASEPRI_MAX, r3
    d256:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d25a:	4658      	mov	r0, fp
    d25c:	f012 fb32 	bl	1f8c4 <z_spin_lock_valid>
    d260:	bb38      	cbnz	r0, d2b2 <process_event+0x366>
    d262:	2394      	movs	r3, #148	; 0x94
    d264:	4a1f      	ldr	r2, [pc, #124]	; (d2e4 <process_event+0x398>)
    d266:	4920      	ldr	r1, [pc, #128]	; (d2e8 <process_event+0x39c>)
    d268:	4820      	ldr	r0, [pc, #128]	; (d2ec <process_event+0x3a0>)
    d26a:	f017 fd58 	bl	24d1e <assert_print>
    d26e:	4659      	mov	r1, fp
    d270:	481f      	ldr	r0, [pc, #124]	; (d2f0 <process_event+0x3a4>)
    d272:	f017 fd54 	bl	24d1e <assert_print>
    d276:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d278:	481a      	ldr	r0, [pc, #104]	; (d2e4 <process_event+0x398>)
    d27a:	e6fc      	b.n	d076 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    d27c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d27e:	2900      	cmp	r1, #0
    d280:	d0dd      	beq.n	d23e <process_event+0x2f2>
	return node->next;
    d282:	680d      	ldr	r5, [r1, #0]
    d284:	2900      	cmp	r1, #0
    d286:	d0da      	beq.n	d23e <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    d288:	4643      	mov	r3, r8
    d28a:	464a      	mov	r2, r9
    d28c:	4620      	mov	r0, r4
    d28e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    d292:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d294:	b11d      	cbz	r5, d29e <process_event+0x352>
    d296:	682b      	ldr	r3, [r5, #0]
    d298:	4629      	mov	r1, r5
    d29a:	461d      	mov	r5, r3
    d29c:	e7f2      	b.n	d284 <process_event+0x338>
    d29e:	462b      	mov	r3, r5
    d2a0:	e7fa      	b.n	d298 <process_event+0x34c>
    d2a2:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    d2a4:	4643      	mov	r3, r8
    d2a6:	464a      	mov	r2, r9
    d2a8:	4620      	mov	r0, r4
    d2aa:	683f      	ldr	r7, [r7, #0]
    d2ac:	f017 fcdc 	bl	24c68 <notify_one>
    d2b0:	e7c5      	b.n	d23e <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    d2b2:	4658      	mov	r0, fp
    d2b4:	f012 fb22 	bl	1f8fc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    d2b8:	8ba3      	ldrh	r3, [r4, #28]
    d2ba:	f023 0308 	bic.w	r3, r3, #8
    d2be:	83a3      	strh	r3, [r4, #28]
    d2c0:	e6ac      	b.n	d01c <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    d2c2:	068b      	lsls	r3, r1, #26
    d2c4:	f57f ae64 	bpl.w	cf90 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    d2c8:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    d2cc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    d2ce:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    d2d2:	e647      	b.n	cf64 <process_event+0x18>
	__asm__ volatile(
    d2d4:	f385 8811 	msr	BASEPRI, r5
    d2d8:	f3bf 8f6f 	isb	sy
}
    d2dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2e0:	0000d2f5 	.word	0x0000d2f5
    d2e4:	0002c4fc 	.word	0x0002c4fc
    d2e8:	0002c555 	.word	0x0002c555
    d2ec:	0002b6e9 	.word	0x0002b6e9
    d2f0:	0002c56a 	.word	0x0002c56a

0000d2f4 <transition_complete>:
{
    d2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d2f6:	4604      	mov	r4, r0
    d2f8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d2fa:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    d2fe:	f04f 0320 	mov.w	r3, #32
    d302:	f3ef 8711 	mrs	r7, BASEPRI
    d306:	f383 8812 	msr	BASEPRI_MAX, r3
    d30a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d30e:	4630      	mov	r0, r6
    d310:	f012 fad8 	bl	1f8c4 <z_spin_lock_valid>
    d314:	b968      	cbnz	r0, d332 <transition_complete+0x3e>
    d316:	2394      	movs	r3, #148	; 0x94
    d318:	4a0b      	ldr	r2, [pc, #44]	; (d348 <transition_complete+0x54>)
    d31a:	490c      	ldr	r1, [pc, #48]	; (d34c <transition_complete+0x58>)
    d31c:	480c      	ldr	r0, [pc, #48]	; (d350 <transition_complete+0x5c>)
    d31e:	f017 fcfe 	bl	24d1e <assert_print>
    d322:	4631      	mov	r1, r6
    d324:	480b      	ldr	r0, [pc, #44]	; (d354 <transition_complete+0x60>)
    d326:	f017 fcfa 	bl	24d1e <assert_print>
    d32a:	2194      	movs	r1, #148	; 0x94
    d32c:	4806      	ldr	r0, [pc, #24]	; (d348 <transition_complete+0x54>)
    d32e:	f017 fcef 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
    d332:	4630      	mov	r0, r6
    d334:	f012 fae2 	bl	1f8fc <z_spin_lock_set_owner>
	mgr->last_res = res;
    d338:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    d33a:	463a      	mov	r2, r7
    d33c:	4620      	mov	r0, r4
}
    d33e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    d342:	2101      	movs	r1, #1
    d344:	f7ff be02 	b.w	cf4c <process_event>
    d348:	0002c4fc 	.word	0x0002c4fc
    d34c:	0002c555 	.word	0x0002c555
    d350:	0002b6e9 	.word	0x0002b6e9
    d354:	0002c56a 	.word	0x0002c56a

0000d358 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d35c:	4604      	mov	r4, r0
    d35e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d360:	f017 fc72 	bl	24c48 <validate_args>

	if (rv < 0) {
    d364:	1e05      	subs	r5, r0, #0
    d366:	db67      	blt.n	d438 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d368:	f104 0914 	add.w	r9, r4, #20
    d36c:	f04f 0320 	mov.w	r3, #32
    d370:	f3ef 8a11 	mrs	sl, BASEPRI
    d374:	f383 8812 	msr	BASEPRI_MAX, r3
    d378:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d37c:	4648      	mov	r0, r9
    d37e:	f012 faa1 	bl	1f8c4 <z_spin_lock_valid>
    d382:	4680      	mov	r8, r0
    d384:	b960      	cbnz	r0, d3a0 <onoff_request+0x48>
    d386:	2394      	movs	r3, #148	; 0x94
    d388:	4a37      	ldr	r2, [pc, #220]	; (d468 <onoff_request+0x110>)
    d38a:	4938      	ldr	r1, [pc, #224]	; (d46c <onoff_request+0x114>)
    d38c:	4838      	ldr	r0, [pc, #224]	; (d470 <onoff_request+0x118>)
    d38e:	f017 fcc6 	bl	24d1e <assert_print>
    d392:	4649      	mov	r1, r9
    d394:	4837      	ldr	r0, [pc, #220]	; (d474 <onoff_request+0x11c>)
    d396:	f017 fcc2 	bl	24d1e <assert_print>
    d39a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d39c:	4832      	ldr	r0, [pc, #200]	; (d468 <onoff_request+0x110>)
    d39e:	e040      	b.n	d422 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d3a0:	4648      	mov	r0, r9
    d3a2:	f012 faab 	bl	1f8fc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d3a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d3aa:	8be3      	ldrh	r3, [r4, #30]
    d3ac:	8ba6      	ldrh	r6, [r4, #28]
    d3ae:	4293      	cmp	r3, r2
    d3b0:	f006 0607 	and.w	r6, r6, #7
    d3b4:	d043      	beq.n	d43e <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d3b6:	2e02      	cmp	r6, #2
    d3b8:	d113      	bne.n	d3e2 <onoff_request+0x8a>
	rv = state;
    d3ba:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d3bc:	3301      	adds	r3, #1
    d3be:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d3c0:	4648      	mov	r0, r9
    d3c2:	f012 fa8d 	bl	1f8e0 <z_spin_unlock_valid>
    d3c6:	2800      	cmp	r0, #0
    d3c8:	d13f      	bne.n	d44a <onoff_request+0xf2>
    d3ca:	23c2      	movs	r3, #194	; 0xc2
    d3cc:	4a26      	ldr	r2, [pc, #152]	; (d468 <onoff_request+0x110>)
    d3ce:	492a      	ldr	r1, [pc, #168]	; (d478 <onoff_request+0x120>)
    d3d0:	4827      	ldr	r0, [pc, #156]	; (d470 <onoff_request+0x118>)
    d3d2:	f017 fca4 	bl	24d1e <assert_print>
    d3d6:	4649      	mov	r1, r9
    d3d8:	4828      	ldr	r0, [pc, #160]	; (d47c <onoff_request+0x124>)
    d3da:	f017 fca0 	bl	24d1e <assert_print>
    d3de:	21c2      	movs	r1, #194	; 0xc2
    d3e0:	e7dc      	b.n	d39c <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d3e2:	2e06      	cmp	r6, #6
    d3e4:	d813      	bhi.n	d40e <onoff_request+0xb6>
    d3e6:	e8df f006 	tbb	[pc, r6]
    d3ea:	2d09      	.short	0x2d09
    d3ec:	04091212 	.word	0x04091212
    d3f0:	09          	.byte	0x09
    d3f1:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d3f2:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d3f6:	f04f 0800 	mov.w	r8, #0
    d3fa:	e7e1      	b.n	d3c0 <onoff_request+0x68>
	parent->next = child;
    d3fc:	2300      	movs	r3, #0
    d3fe:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d400:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d402:	b983      	cbnz	r3, d426 <onoff_request+0xce>
	list->head = node;
    d404:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d408:	b186      	cbz	r6, d42c <onoff_request+0xd4>
	rv = state;
    d40a:	4635      	mov	r5, r6
    d40c:	e7f3      	b.n	d3f6 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d40e:	491c      	ldr	r1, [pc, #112]	; (d480 <onoff_request+0x128>)
    d410:	4817      	ldr	r0, [pc, #92]	; (d470 <onoff_request+0x118>)
    d412:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d416:	4a1b      	ldr	r2, [pc, #108]	; (d484 <onoff_request+0x12c>)
    d418:	f017 fc81 	bl	24d1e <assert_print>
    d41c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d420:	4818      	ldr	r0, [pc, #96]	; (d484 <onoff_request+0x12c>)
    d422:	f017 fc75 	bl	24d10 <assert_post_action>
	parent->next = child;
    d426:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d428:	6067      	str	r7, [r4, #4]
}
    d42a:	e7ed      	b.n	d408 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d42c:	4652      	mov	r2, sl
    d42e:	2102      	movs	r1, #2
    d430:	4620      	mov	r0, r4
    d432:	f7ff fd8b 	bl	cf4c <process_event>
    d436:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d438:	4628      	mov	r0, r5
    d43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d43e:	f06f 050a 	mvn.w	r5, #10
    d442:	e7d8      	b.n	d3f6 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d444:	f06f 0504 	mvn.w	r5, #4
    d448:	e7d5      	b.n	d3f6 <onoff_request+0x9e>
	__asm__ volatile(
    d44a:	f38a 8811 	msr	BASEPRI, sl
    d44e:	f3bf 8f6f 	isb	sy
		if (notify) {
    d452:	f1b8 0f00 	cmp.w	r8, #0
    d456:	d0ef      	beq.n	d438 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d458:	2300      	movs	r3, #0
    d45a:	4632      	mov	r2, r6
    d45c:	4639      	mov	r1, r7
    d45e:	4620      	mov	r0, r4
    d460:	f017 fc02 	bl	24c68 <notify_one>
    d464:	e7e8      	b.n	d438 <onoff_request+0xe0>
    d466:	bf00      	nop
    d468:	0002c4fc 	.word	0x0002c4fc
    d46c:	0002c555 	.word	0x0002c555
    d470:	0002b6e9 	.word	0x0002b6e9
    d474:	0002c56a 	.word	0x0002c56a
    d478:	0002c529 	.word	0x0002c529
    d47c:	0002c540 	.word	0x0002c540
    d480:	0002c4e6 	.word	0x0002c4e6
    d484:	0002c459 	.word	0x0002c459

0000d488 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d488:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d48a:	6842      	ldr	r2, [r0, #4]
    d48c:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d48e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d492:	2a02      	cmp	r2, #2
	notify->result = res;
    d494:	6081      	str	r1, [r0, #8]
	switch (method) {
    d496:	d00a      	beq.n	d4ae <sys_notify_finalize+0x26>
    d498:	2a03      	cmp	r2, #3
    d49a:	f04f 0100 	mov.w	r1, #0
    d49e:	d003      	beq.n	d4a8 <sys_notify_finalize+0x20>
    d4a0:	2a01      	cmp	r2, #1
    d4a2:	d10a      	bne.n	d4ba <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d4a4:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d4a6:	e006      	b.n	d4b6 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d4a8:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d4aa:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d4ac:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d4ae:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d4b0:	2200      	movs	r2, #0
    d4b2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d4b4:	b958      	cbnz	r0, d4ce <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d4b6:	2000      	movs	r0, #0
    d4b8:	e7f8      	b.n	d4ac <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d4ba:	4906      	ldr	r1, [pc, #24]	; (d4d4 <sys_notify_finalize+0x4c>)
    d4bc:	4806      	ldr	r0, [pc, #24]	; (d4d8 <sys_notify_finalize+0x50>)
    d4be:	2345      	movs	r3, #69	; 0x45
    d4c0:	4a06      	ldr	r2, [pc, #24]	; (d4dc <sys_notify_finalize+0x54>)
    d4c2:	f017 fc2c 	bl	24d1e <assert_print>
    d4c6:	2145      	movs	r1, #69	; 0x45
    d4c8:	4804      	ldr	r0, [pc, #16]	; (d4dc <sys_notify_finalize+0x54>)
    d4ca:	f017 fc21 	bl	24d10 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d4ce:	f015 fbff 	bl	22cd0 <z_impl_k_poll_signal_raise>
    d4d2:	e7f0      	b.n	d4b6 <sys_notify_finalize+0x2e>
    d4d4:	00030f5f 	.word	0x00030f5f
    d4d8:	0002b6e9 	.word	0x0002b6e9
    d4dc:	0002c582 	.word	0x0002c582

0000d4e0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    d4e0:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d4e2:	4c09      	ldr	r4, [pc, #36]	; (d508 <crc8_ccitt+0x28>)
    d4e4:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    d4e6:	4291      	cmp	r1, r2
    d4e8:	d100      	bne.n	d4ec <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    d4ea:	bd10      	pop	{r4, pc}
		val ^= p[i];
    d4ec:	f811 3b01 	ldrb.w	r3, [r1], #1
    d4f0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d4f2:	0903      	lsrs	r3, r0, #4
    d4f4:	5ce3      	ldrb	r3, [r4, r3]
    d4f6:	0100      	lsls	r0, r0, #4
    d4f8:	b2c0      	uxtb	r0, r0
    d4fa:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d4fc:	0918      	lsrs	r0, r3, #4
    d4fe:	5c20      	ldrb	r0, [r4, r0]
    d500:	011b      	lsls	r3, r3, #4
    d502:	b2db      	uxtb	r3, r3
    d504:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    d506:	e7ee      	b.n	d4e6 <crc8_ccitt+0x6>
    d508:	0002c5a5 	.word	0x0002c5a5

0000d50c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d50c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d50e:	4602      	mov	r2, r0
    d510:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    d512:	270a      	movs	r7, #10
	size_t val = 0;
    d514:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    d516:	4e07      	ldr	r6, [pc, #28]	; (d534 <extract_decimal+0x28>)
    d518:	460b      	mov	r3, r1
    d51a:	781c      	ldrb	r4, [r3, #0]
    d51c:	3101      	adds	r1, #1
    d51e:	5d35      	ldrb	r5, [r6, r4]
    d520:	076d      	lsls	r5, r5, #29
    d522:	d401      	bmi.n	d528 <extract_decimal+0x1c>
	}
	*str = sp;
    d524:	6013      	str	r3, [r2, #0]
	return val;
}
    d526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d528:	fb07 4300 	mla	r3, r7, r0, r4
    d52c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d530:	e7f2      	b.n	d518 <extract_decimal+0xc>
    d532:	bf00      	nop
    d534:	00030fc1 	.word	0x00030fc1

0000d538 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d53c:	4615      	mov	r5, r2
    d53e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    d540:	78d3      	ldrb	r3, [r2, #3]
    d542:	4a22      	ldr	r2, [pc, #136]	; (d5cc <encode_uint+0x94>)
	switch (specifier) {
    d544:	2b6f      	cmp	r3, #111	; 0x6f
    d546:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d54a:	4680      	mov	r8, r0
    d54c:	460f      	mov	r7, r1
    d54e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d552:	d029      	beq.n	d5a8 <encode_uint+0x70>
    d554:	d824      	bhi.n	d5a0 <encode_uint+0x68>
		return 10;
    d556:	2b58      	cmp	r3, #88	; 0x58
    d558:	bf0c      	ite	eq
    d55a:	2610      	moveq	r6, #16
    d55c:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d55e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d562:	4632      	mov	r2, r6
    d564:	2300      	movs	r3, #0
    d566:	4640      	mov	r0, r8
    d568:	4639      	mov	r1, r7
    d56a:	f7fb fcc1 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d56e:	2a09      	cmp	r2, #9
    d570:	b2d4      	uxtb	r4, r2
    d572:	d81e      	bhi.n	d5b2 <encode_uint+0x7a>
    d574:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d576:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d578:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d57a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d57e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d582:	d301      	bcc.n	d588 <encode_uint+0x50>
    d584:	45d1      	cmp	r9, sl
    d586:	d811      	bhi.n	d5ac <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d588:	782b      	ldrb	r3, [r5, #0]
    d58a:	069b      	lsls	r3, r3, #26
    d58c:	d505      	bpl.n	d59a <encode_uint+0x62>
		if (radix == 8) {
    d58e:	2e08      	cmp	r6, #8
    d590:	d115      	bne.n	d5be <encode_uint+0x86>
			conv->altform_0 = true;
    d592:	78ab      	ldrb	r3, [r5, #2]
    d594:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d598:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d59a:	4648      	mov	r0, r9
    d59c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d5a0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d5a4:	2b70      	cmp	r3, #112	; 0x70
    d5a6:	e7d7      	b.n	d558 <encode_uint+0x20>
	switch (specifier) {
    d5a8:	2608      	movs	r6, #8
    d5aa:	e7d8      	b.n	d55e <encode_uint+0x26>
		value /= radix;
    d5ac:	4680      	mov	r8, r0
    d5ae:	460f      	mov	r7, r1
    d5b0:	e7d7      	b.n	d562 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d5b2:	f1bb 0f01 	cmp.w	fp, #1
    d5b6:	bf0c      	ite	eq
    d5b8:	3437      	addeq	r4, #55	; 0x37
    d5ba:	3457      	addne	r4, #87	; 0x57
    d5bc:	e7db      	b.n	d576 <encode_uint+0x3e>
		} else if (radix == 16) {
    d5be:	2e10      	cmp	r6, #16
    d5c0:	d1eb      	bne.n	d59a <encode_uint+0x62>
			conv->altform_0c = true;
    d5c2:	78ab      	ldrb	r3, [r5, #2]
    d5c4:	f043 0310 	orr.w	r3, r3, #16
    d5c8:	e7e6      	b.n	d598 <encode_uint+0x60>
    d5ca:	bf00      	nop
    d5cc:	00030fc1 	.word	0x00030fc1

0000d5d0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5d4:	4682      	mov	sl, r0
    d5d6:	4617      	mov	r7, r2
    d5d8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d5da:	2500      	movs	r5, #0
{
    d5dc:	b097      	sub	sp, #92	; 0x5c
    d5de:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d5e0:	7838      	ldrb	r0, [r7, #0]
    d5e2:	b908      	cbnz	r0, d5e8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d5e4:	4628      	mov	r0, r5
    d5e6:	e349      	b.n	dc7c <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    d5e8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    d5ea:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d5ec:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d5ee:	d006      	beq.n	d5fe <z_cbvprintf_impl+0x2e>
			OUTC('%');
    d5f0:	9903      	ldr	r1, [sp, #12]
    d5f2:	47d0      	blx	sl
    d5f4:	2800      	cmp	r0, #0
    d5f6:	f2c0 8341 	blt.w	dc7c <z_cbvprintf_impl+0x6ac>
    d5fa:	3501      	adds	r5, #1
		if (bps == NULL) {
    d5fc:	e1f0      	b.n	d9e0 <z_cbvprintf_impl+0x410>
		} state = {
    d5fe:	2218      	movs	r2, #24
    d600:	2100      	movs	r1, #0
    d602:	a810      	add	r0, sp, #64	; 0x40
    d604:	f01c f92b 	bl	2985e <memset>
	if (*sp == '%') {
    d608:	787b      	ldrb	r3, [r7, #1]
    d60a:	2b25      	cmp	r3, #37	; 0x25
    d60c:	f000 80a3 	beq.w	d756 <z_cbvprintf_impl+0x186>
    d610:	2300      	movs	r3, #0
    d612:	4698      	mov	r8, r3
    d614:	469e      	mov	lr, r3
    d616:	469c      	mov	ip, r3
    d618:	4618      	mov	r0, r3
    d61a:	1c79      	adds	r1, r7, #1
    d61c:	460e      	mov	r6, r1
		switch (*sp) {
    d61e:	f811 2b01 	ldrb.w	r2, [r1], #1
    d622:	2a2b      	cmp	r2, #43	; 0x2b
    d624:	f000 80c6 	beq.w	d7b4 <z_cbvprintf_impl+0x1e4>
    d628:	f200 80bd 	bhi.w	d7a6 <z_cbvprintf_impl+0x1d6>
    d62c:	2a20      	cmp	r2, #32
    d62e:	f000 80c4 	beq.w	d7ba <z_cbvprintf_impl+0x1ea>
    d632:	2a23      	cmp	r2, #35	; 0x23
    d634:	f000 80c4 	beq.w	d7c0 <z_cbvprintf_impl+0x1f0>
    d638:	b12b      	cbz	r3, d646 <z_cbvprintf_impl+0x76>
    d63a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d63e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d642:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d646:	f1b8 0f00 	cmp.w	r8, #0
    d64a:	d005      	beq.n	d658 <z_cbvprintf_impl+0x88>
    d64c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d650:	f043 0320 	orr.w	r3, r3, #32
    d654:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d658:	f1be 0f00 	cmp.w	lr, #0
    d65c:	d005      	beq.n	d66a <z_cbvprintf_impl+0x9a>
    d65e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d662:	f043 0310 	orr.w	r3, r3, #16
    d666:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d66a:	f1bc 0f00 	cmp.w	ip, #0
    d66e:	d005      	beq.n	d67c <z_cbvprintf_impl+0xac>
    d670:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d674:	f043 0308 	orr.w	r3, r3, #8
    d678:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d67c:	b128      	cbz	r0, d68a <z_cbvprintf_impl+0xba>
    d67e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d682:	f043 0304 	orr.w	r3, r3, #4
    d686:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d68a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d68e:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d692:	2944      	cmp	r1, #68	; 0x44
    d694:	d103      	bne.n	d69e <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d696:	f36f 1386 	bfc	r3, #6, #1
    d69a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d69e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d6a2:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d6a8:	9609      	str	r6, [sp, #36]	; 0x24
    d6aa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d6ae:	f040 808c 	bne.w	d7ca <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d6b2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d6b6:	f043 0301 	orr.w	r3, r3, #1
    d6ba:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d6be:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d6c0:	781a      	ldrb	r2, [r3, #0]
    d6c2:	2a2e      	cmp	r2, #46	; 0x2e
    d6c4:	bf0c      	ite	eq
    d6c6:	2101      	moveq	r1, #1
    d6c8:	2100      	movne	r1, #0
    d6ca:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d6ce:	f361 0241 	bfi	r2, r1, #1, #1
    d6d2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d6d6:	d10c      	bne.n	d6f2 <z_cbvprintf_impl+0x122>
	++sp;
    d6d8:	1c5a      	adds	r2, r3, #1
    d6da:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d6dc:	785a      	ldrb	r2, [r3, #1]
    d6de:	2a2a      	cmp	r2, #42	; 0x2a
    d6e0:	f040 8083 	bne.w	d7ea <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d6e4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d6e8:	3302      	adds	r3, #2
		conv->prec_star = true;
    d6ea:	f042 0204 	orr.w	r2, r2, #4
    d6ee:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d6f2:	781a      	ldrb	r2, [r3, #0]
    d6f4:	2a6c      	cmp	r2, #108	; 0x6c
    d6f6:	f000 80a4 	beq.w	d842 <z_cbvprintf_impl+0x272>
    d6fa:	f200 8086 	bhi.w	d80a <z_cbvprintf_impl+0x23a>
    d6fe:	2a68      	cmp	r2, #104	; 0x68
    d700:	f000 808c 	beq.w	d81c <z_cbvprintf_impl+0x24c>
    d704:	2a6a      	cmp	r2, #106	; 0x6a
    d706:	f000 80a5 	beq.w	d854 <z_cbvprintf_impl+0x284>
    d70a:	2a4c      	cmp	r2, #76	; 0x4c
    d70c:	f000 80aa 	beq.w	d864 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d710:	461a      	mov	r2, r3
    d712:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d716:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d718:	9204      	str	r2, [sp, #16]
    d71a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d71e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d722:	f200 8117 	bhi.w	d954 <z_cbvprintf_impl+0x384>
    d726:	2b6d      	cmp	r3, #109	; 0x6d
    d728:	f200 80a9 	bhi.w	d87e <z_cbvprintf_impl+0x2ae>
    d72c:	2b69      	cmp	r3, #105	; 0x69
    d72e:	f200 8111 	bhi.w	d954 <z_cbvprintf_impl+0x384>
    d732:	2b57      	cmp	r3, #87	; 0x57
    d734:	f200 80be 	bhi.w	d8b4 <z_cbvprintf_impl+0x2e4>
    d738:	2b41      	cmp	r3, #65	; 0x41
    d73a:	d003      	beq.n	d744 <z_cbvprintf_impl+0x174>
    d73c:	3b45      	subs	r3, #69	; 0x45
    d73e:	2b02      	cmp	r3, #2
    d740:	f200 8108 	bhi.w	d954 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d744:	2204      	movs	r2, #4
    d746:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d74a:	f362 0302 	bfi	r3, r2, #0, #3
    d74e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d752:	2301      	movs	r3, #1
			break;
    d754:	e0ca      	b.n	d8ec <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d756:	1cba      	adds	r2, r7, #2
    d758:	9204      	str	r2, [sp, #16]
    d75a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d75e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d762:	07da      	lsls	r2, r3, #31
    d764:	f140 80fd 	bpl.w	d962 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d768:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d76c:	f1b9 0f00 	cmp.w	r9, #0
    d770:	da07      	bge.n	d782 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d772:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d776:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d77a:	f042 0204 	orr.w	r2, r2, #4
    d77e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d782:	075e      	lsls	r6, r3, #29
    d784:	f140 80f6 	bpl.w	d974 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d788:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d78c:	f1bb 0f00 	cmp.w	fp, #0
    d790:	f280 80f5 	bge.w	d97e <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d794:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d798:	f36f 0341 	bfc	r3, #1, #1
    d79c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d7a0:	f04f 3bff 	mov.w	fp, #4294967295
    d7a4:	e0eb      	b.n	d97e <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d7a6:	2a2d      	cmp	r2, #45	; 0x2d
    d7a8:	d00d      	beq.n	d7c6 <z_cbvprintf_impl+0x1f6>
    d7aa:	2a30      	cmp	r2, #48	; 0x30
    d7ac:	f47f af44 	bne.w	d638 <z_cbvprintf_impl+0x68>
    d7b0:	2301      	movs	r3, #1
	} while (loop);
    d7b2:	e733      	b.n	d61c <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d7b4:	f04f 0c01 	mov.w	ip, #1
    d7b8:	e730      	b.n	d61c <z_cbvprintf_impl+0x4c>
    d7ba:	f04f 0e01 	mov.w	lr, #1
    d7be:	e72d      	b.n	d61c <z_cbvprintf_impl+0x4c>
    d7c0:	f04f 0801 	mov.w	r8, #1
    d7c4:	e72a      	b.n	d61c <z_cbvprintf_impl+0x4c>
    d7c6:	2001      	movs	r0, #1
    d7c8:	e728      	b.n	d61c <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d7ca:	a809      	add	r0, sp, #36	; 0x24
    d7cc:	f7ff fe9e 	bl	d50c <extract_decimal>
	if (sp != wp) {
    d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d7d2:	42b3      	cmp	r3, r6
    d7d4:	f43f af74 	beq.w	d6c0 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d7d8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d7dc:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d7de:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d7e0:	f360 0241 	bfi	r2, r0, #1, #1
    d7e4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d7e8:	e76a      	b.n	d6c0 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d7ea:	a809      	add	r0, sp, #36	; 0x24
    d7ec:	f7ff fe8e 	bl	d50c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d7f0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d7f4:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d7f6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d7fa:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d7fe:	f362 0341 	bfi	r3, r2, #1, #1
    d802:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d806:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d808:	e773      	b.n	d6f2 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d80a:	2a74      	cmp	r2, #116	; 0x74
    d80c:	d026      	beq.n	d85c <z_cbvprintf_impl+0x28c>
    d80e:	2a7a      	cmp	r2, #122	; 0x7a
    d810:	f47f af7e 	bne.w	d710 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d814:	2106      	movs	r1, #6
    d816:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d81a:	e00c      	b.n	d836 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d81c:	785a      	ldrb	r2, [r3, #1]
    d81e:	2a68      	cmp	r2, #104	; 0x68
    d820:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d824:	d106      	bne.n	d834 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d826:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d828:	f361 02c6 	bfi	r2, r1, #3, #4
    d82c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d830:	3302      	adds	r3, #2
    d832:	e76d      	b.n	d710 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d834:	2102      	movs	r1, #2
    d836:	f361 02c6 	bfi	r2, r1, #3, #4
    d83a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d83e:	3301      	adds	r3, #1
    d840:	e766      	b.n	d710 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d842:	785a      	ldrb	r2, [r3, #1]
    d844:	2a6c      	cmp	r2, #108	; 0x6c
    d846:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d84a:	d101      	bne.n	d850 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d84c:	2104      	movs	r1, #4
    d84e:	e7eb      	b.n	d828 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d850:	2103      	movs	r1, #3
    d852:	e7f0      	b.n	d836 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d854:	2105      	movs	r1, #5
    d856:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d85a:	e7ec      	b.n	d836 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d85c:	2107      	movs	r1, #7
    d85e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d862:	e7e8      	b.n	d836 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d864:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d868:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d86c:	f022 0202 	bic.w	r2, r2, #2
    d870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d874:	f042 0202 	orr.w	r2, r2, #2
    d878:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d87c:	e7df      	b.n	d83e <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d87e:	3b6e      	subs	r3, #110	; 0x6e
    d880:	b2d9      	uxtb	r1, r3
    d882:	2301      	movs	r3, #1
    d884:	408b      	lsls	r3, r1
    d886:	f240 4182 	movw	r1, #1154	; 0x482
    d88a:	420b      	tst	r3, r1
    d88c:	d138      	bne.n	d900 <z_cbvprintf_impl+0x330>
    d88e:	f013 0f24 	tst.w	r3, #36	; 0x24
    d892:	d152      	bne.n	d93a <z_cbvprintf_impl+0x36a>
    d894:	07d8      	lsls	r0, r3, #31
    d896:	d55d      	bpl.n	d954 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d898:	2103      	movs	r1, #3
    d89a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d89e:	f361 0302 	bfi	r3, r1, #0, #3
    d8a2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d8a6:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d8aa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d8ae:	424b      	negs	r3, r1
    d8b0:	414b      	adcs	r3, r1
    d8b2:	e01b      	b.n	d8ec <z_cbvprintf_impl+0x31c>
    d8b4:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d8b6:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d8ba:	b2c9      	uxtb	r1, r1
    d8bc:	fa00 f101 	lsl.w	r1, r0, r1
    d8c0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d8c4:	f47f af3e 	bne.w	d744 <z_cbvprintf_impl+0x174>
    d8c8:	f640 0601 	movw	r6, #2049	; 0x801
    d8cc:	4231      	tst	r1, r6
    d8ce:	d11d      	bne.n	d90c <z_cbvprintf_impl+0x33c>
    d8d0:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d8d4:	d03e      	beq.n	d954 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d8d6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d8da:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d8de:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d8e2:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d8e4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d8e8:	d034      	beq.n	d954 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d8ea:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d8ec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d8f0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d8f4:	430b      	orrs	r3, r1
    d8f6:	f363 0241 	bfi	r2, r3, #1, #1
    d8fa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d8fe:	e72e      	b.n	d75e <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    d900:	2102      	movs	r1, #2
    d902:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d906:	f361 0302 	bfi	r3, r1, #0, #3
    d90a:	e7e8      	b.n	d8de <z_cbvprintf_impl+0x30e>
    d90c:	2002      	movs	r0, #2
    d90e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d912:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d916:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d91a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d91c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d920:	bf02      	ittt	eq
    d922:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d926:	f041 0101 	orreq.w	r1, r1, #1
    d92a:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d92e:	2b63      	cmp	r3, #99	; 0x63
    d930:	d1db      	bne.n	d8ea <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d932:	1e13      	subs	r3, r2, #0
    d934:	bf18      	it	ne
    d936:	2301      	movne	r3, #1
    d938:	e7d8      	b.n	d8ec <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    d93a:	2103      	movs	r1, #3
    d93c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d940:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d944:	f361 0302 	bfi	r3, r1, #0, #3
    d948:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d94c:	bf14      	ite	ne
    d94e:	2301      	movne	r3, #1
    d950:	2300      	moveq	r3, #0
    d952:	e7cb      	b.n	d8ec <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    d954:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d958:	f043 0301 	orr.w	r3, r3, #1
    d95c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d960:	e7c3      	b.n	d8ea <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    d962:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d966:	2a00      	cmp	r2, #0
		int width = -1;
    d968:	bfac      	ite	ge
    d96a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    d96e:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    d972:	e706      	b.n	d782 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    d974:	0798      	lsls	r0, r3, #30
    d976:	f57f af13 	bpl.w	d7a0 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    d97a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d97e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d980:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d984:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d988:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d98c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d990:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d992:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d996:	d133      	bne.n	da00 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    d998:	1ecb      	subs	r3, r1, #3
    d99a:	2b04      	cmp	r3, #4
    d99c:	d804      	bhi.n	d9a8 <z_cbvprintf_impl+0x3d8>
    d99e:	e8df f003 	tbb	[pc, r3]
    d9a2:	4621      	.short	0x4621
    d9a4:	2146      	.short	0x2146
    d9a6:	21          	.byte	0x21
    d9a7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d9a8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d9aa:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d9ac:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d9b0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d9b4:	d11c      	bne.n	d9f0 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    d9b6:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d9ba:	17da      	asrs	r2, r3, #31
    d9bc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d9c0:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d9c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d9c6:	f013 0603 	ands.w	r6, r3, #3
    d9ca:	d050      	beq.n	da6e <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    d9cc:	463a      	mov	r2, r7
    d9ce:	4650      	mov	r0, sl
    d9d0:	9b04      	ldr	r3, [sp, #16]
    d9d2:	9903      	ldr	r1, [sp, #12]
    d9d4:	f017 f985 	bl	24ce2 <outs>
    d9d8:	2800      	cmp	r0, #0
    d9da:	f2c0 814f 	blt.w	dc7c <z_cbvprintf_impl+0x6ac>
    d9de:	4405      	add	r5, r0
			continue;
    d9e0:	9f04      	ldr	r7, [sp, #16]
    d9e2:	e5fd      	b.n	d5e0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d9e4:	f854 3b04 	ldr.w	r3, [r4], #4
    d9e8:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d9ea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d9ee:	e7e8      	b.n	d9c2 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    d9f0:	2902      	cmp	r1, #2
    d9f2:	d1e5      	bne.n	d9c0 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    d9f4:	b21a      	sxth	r2, r3
    d9f6:	f343 33c0 	sbfx	r3, r3, #15, #1
    d9fa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d9fe:	e7df      	b.n	d9c0 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    da00:	2b02      	cmp	r3, #2
    da02:	d124      	bne.n	da4e <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    da04:	1ecb      	subs	r3, r1, #3
    da06:	2b04      	cmp	r3, #4
    da08:	d804      	bhi.n	da14 <z_cbvprintf_impl+0x444>
    da0a:	e8df f003 	tbb	[pc, r3]
    da0e:	1018      	.short	0x1018
    da10:	1810      	.short	0x1810
    da12:	18          	.byte	0x18
    da13:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    da14:	2901      	cmp	r1, #1
    da16:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    da1a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    da1e:	d014      	beq.n	da4a <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    da20:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    da22:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    da26:	d1cc      	bne.n	d9c2 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    da28:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    da2a:	9310      	str	r3, [sp, #64]	; 0x40
    da2c:	e7c9      	b.n	d9c2 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    da2e:	3407      	adds	r4, #7
    da30:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    da34:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    da38:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    da3c:	e7c1      	b.n	d9c2 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    da3e:	f854 3b04 	ldr.w	r3, [r4], #4
    da42:	9310      	str	r3, [sp, #64]	; 0x40
    da44:	2300      	movs	r3, #0
    da46:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    da48:	e7bb      	b.n	d9c2 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    da4a:	b2db      	uxtb	r3, r3
    da4c:	e7cd      	b.n	d9ea <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    da4e:	2b04      	cmp	r3, #4
    da50:	d108      	bne.n	da64 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    da52:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    da54:	f024 0407 	bic.w	r4, r4, #7
    da58:	e9d4 2300 	ldrd	r2, r3, [r4]
    da5c:	3408      	adds	r4, #8
    da5e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    da62:	e7ae      	b.n	d9c2 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    da64:	2b03      	cmp	r3, #3
    da66:	d1ac      	bne.n	d9c2 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    da68:	f854 3b04 	ldr.w	r3, [r4], #4
    da6c:	e7dd      	b.n	da2a <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    da6e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    da72:	2878      	cmp	r0, #120	; 0x78
    da74:	d8b4      	bhi.n	d9e0 <z_cbvprintf_impl+0x410>
    da76:	2862      	cmp	r0, #98	; 0x62
    da78:	d81c      	bhi.n	dab4 <z_cbvprintf_impl+0x4e4>
    da7a:	2825      	cmp	r0, #37	; 0x25
    da7c:	f43f adb8 	beq.w	d5f0 <z_cbvprintf_impl+0x20>
    da80:	2858      	cmp	r0, #88	; 0x58
    da82:	d1ad      	bne.n	d9e0 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    da84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    da88:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    da8c:	9300      	str	r3, [sp, #0]
    da8e:	aa12      	add	r2, sp, #72	; 0x48
    da90:	ab0a      	add	r3, sp, #40	; 0x28
    da92:	f7ff fd51 	bl	d538 <encode_uint>
			if (precision >= 0) {
    da96:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    da9a:	4607      	mov	r7, r0
			if (precision >= 0) {
    da9c:	f280 8097 	bge.w	dbce <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    daa0:	2f00      	cmp	r7, #0
    daa2:	d09d      	beq.n	d9e0 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    daa4:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    daa8:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    daac:	2e00      	cmp	r6, #0
    daae:	d04e      	beq.n	db4e <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    dab0:	3001      	adds	r0, #1
    dab2:	e04c      	b.n	db4e <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    dab4:	3863      	subs	r0, #99	; 0x63
    dab6:	2815      	cmp	r0, #21
    dab8:	d892      	bhi.n	d9e0 <z_cbvprintf_impl+0x410>
    daba:	a201      	add	r2, pc, #4	; (adr r2, dac0 <z_cbvprintf_impl+0x4f0>)
    dabc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    dac0:	0000db3f 	.word	0x0000db3f
    dac4:	0000dba5 	.word	0x0000dba5
    dac8:	0000d9e1 	.word	0x0000d9e1
    dacc:	0000d9e1 	.word	0x0000d9e1
    dad0:	0000d9e1 	.word	0x0000d9e1
    dad4:	0000d9e1 	.word	0x0000d9e1
    dad8:	0000dba5 	.word	0x0000dba5
    dadc:	0000d9e1 	.word	0x0000d9e1
    dae0:	0000d9e1 	.word	0x0000d9e1
    dae4:	0000d9e1 	.word	0x0000d9e1
    dae8:	0000d9e1 	.word	0x0000d9e1
    daec:	0000dc2d 	.word	0x0000dc2d
    daf0:	0000dbc9 	.word	0x0000dbc9
    daf4:	0000dbef 	.word	0x0000dbef
    daf8:	0000d9e1 	.word	0x0000d9e1
    dafc:	0000d9e1 	.word	0x0000d9e1
    db00:	0000db19 	.word	0x0000db19
    db04:	0000d9e1 	.word	0x0000d9e1
    db08:	0000dbc9 	.word	0x0000dbc9
    db0c:	0000d9e1 	.word	0x0000d9e1
    db10:	0000d9e1 	.word	0x0000d9e1
    db14:	0000dbc9 	.word	0x0000dbc9
			if (precision >= 0) {
    db18:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    db1c:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    db1e:	db0a      	blt.n	db36 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    db20:	4659      	mov	r1, fp
    db22:	4638      	mov	r0, r7
    db24:	f01b fff0 	bl	29b08 <strnlen>
			bpe = bps + len;
    db28:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    db2c:	2f00      	cmp	r7, #0
    db2e:	f43f af57 	beq.w	d9e0 <z_cbvprintf_impl+0x410>
		char sign = 0;
    db32:	2600      	movs	r6, #0
    db34:	e00b      	b.n	db4e <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    db36:	4638      	mov	r0, r7
    db38:	f7fb fc12 	bl	9360 <strlen>
    db3c:	e7f4      	b.n	db28 <z_cbvprintf_impl+0x558>
		char sign = 0;
    db3e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    db40:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    db42:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    db44:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    db48:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    db4c:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    db4e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    db52:	f013 0210 	ands.w	r2, r3, #16
    db56:	9205      	str	r2, [sp, #20]
    db58:	f000 8083 	beq.w	dc62 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    db5c:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    db5e:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    db60:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    db64:	bf48      	it	mi
    db66:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    db68:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    db6a:	bf48      	it	mi
    db6c:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    db6e:	f1b9 0f00 	cmp.w	r9, #0
    db72:	f340 8090 	ble.w	dc96 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    db76:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    db7a:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    db7e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    db82:	0750      	lsls	r0, r2, #29
    db84:	9306      	str	r3, [sp, #24]
    db86:	f100 8086 	bmi.w	dc96 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    db8a:	0651      	lsls	r1, r2, #25
    db8c:	d579      	bpl.n	dc82 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    db8e:	b13e      	cbz	r6, dba0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    db90:	4630      	mov	r0, r6
    db92:	9903      	ldr	r1, [sp, #12]
    db94:	47d0      	blx	sl
    db96:	2800      	cmp	r0, #0
    db98:	db70      	blt.n	dc7c <z_cbvprintf_impl+0x6ac>
    db9a:	9b06      	ldr	r3, [sp, #24]
    db9c:	3501      	adds	r5, #1
    db9e:	461e      	mov	r6, r3
					pad = '0';
    dba0:	2230      	movs	r2, #48	; 0x30
    dba2:	e06f      	b.n	dc84 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    dba4:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    dba6:	bf5a      	itte	pl
    dba8:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    dbac:	015e      	lslpl	r6, r3, #5
				sign = '+';
    dbae:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    dbb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	f6bf af65 	bge.w	da84 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    dbba:	4252      	negs	r2, r2
    dbbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    dbc0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    dbc2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    dbc6:	e75d      	b.n	da84 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    dbc8:	2600      	movs	r6, #0
    dbca:	e75b      	b.n	da84 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    dbcc:	2600      	movs	r6, #0
				conv->flag_zero = false;
    dbce:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    dbd2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    dbd6:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    dbd8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    dbdc:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    dbde:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    dbe2:	f67f af5d 	bls.w	daa0 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    dbe6:	ebab 0303 	sub.w	r3, fp, r3
    dbea:	9313      	str	r3, [sp, #76]	; 0x4c
    dbec:	e758      	b.n	daa0 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    dbee:	9810      	ldr	r0, [sp, #64]	; 0x40
    dbf0:	b380      	cbz	r0, dc54 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    dbf2:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    dbf6:	ab0a      	add	r3, sp, #40	; 0x28
    dbf8:	2100      	movs	r1, #0
    dbfa:	f8cd 8000 	str.w	r8, [sp]
    dbfe:	aa12      	add	r2, sp, #72	; 0x48
    dc00:	f7ff fc9a 	bl	d538 <encode_uint>
				conv->altform_0c = true;
    dc04:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    dc08:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    dc0c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    dc10:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    dc14:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    dc18:	4607      	mov	r7, r0
				conv->altform_0c = true;
    dc1a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    dc1e:	dad5      	bge.n	dbcc <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    dc20:	2800      	cmp	r0, #0
    dc22:	f43f aedd 	beq.w	d9e0 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    dc26:	eba8 0000 	sub.w	r0, r8, r0
    dc2a:	e782      	b.n	db32 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    dc2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    dc2e:	2907      	cmp	r1, #7
    dc30:	f63f aed6 	bhi.w	d9e0 <z_cbvprintf_impl+0x410>
    dc34:	e8df f001 	tbb	[pc, r1]
    dc38:	0c06040c 	.word	0x0c06040c
    dc3c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    dc40:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    dc42:	e6cd      	b.n	d9e0 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    dc44:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    dc46:	e6cb      	b.n	d9e0 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    dc48:	17ea      	asrs	r2, r5, #31
    dc4a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    dc4e:	e6c7      	b.n	d9e0 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    dc50:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    dc52:	e6c5      	b.n	d9e0 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    dc54:	f8df 80bc 	ldr.w	r8, [pc, #188]	; dd14 <z_cbvprintf_impl+0x744>
		char sign = 0;
    dc58:	4606      	mov	r6, r0
    dc5a:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    dc5e:	2005      	movs	r0, #5
    dc60:	e775      	b.n	db4e <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    dc62:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    dc64:	bf48      	it	mi
    dc66:	3001      	addmi	r0, #1
    dc68:	e779      	b.n	db5e <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    dc6a:	4610      	mov	r0, r2
    dc6c:	9307      	str	r3, [sp, #28]
    dc6e:	9206      	str	r2, [sp, #24]
    dc70:	9903      	ldr	r1, [sp, #12]
    dc72:	47d0      	blx	sl
    dc74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    dc78:	2800      	cmp	r0, #0
    dc7a:	da04      	bge.n	dc86 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    dc7c:	b017      	add	sp, #92	; 0x5c
    dc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    dc82:	2220      	movs	r2, #32
					pad = '0';
    dc84:	464b      	mov	r3, r9
				while (width-- > 0) {
    dc86:	4619      	mov	r1, r3
    dc88:	2900      	cmp	r1, #0
    dc8a:	f103 33ff 	add.w	r3, r3, #4294967295
    dc8e:	dcec      	bgt.n	dc6a <z_cbvprintf_impl+0x69a>
    dc90:	444d      	add	r5, r9
    dc92:	4699      	mov	r9, r3
    dc94:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    dc96:	b12e      	cbz	r6, dca4 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    dc98:	4630      	mov	r0, r6
    dc9a:	9903      	ldr	r1, [sp, #12]
    dc9c:	47d0      	blx	sl
    dc9e:	2800      	cmp	r0, #0
    dca0:	dbec      	blt.n	dc7c <z_cbvprintf_impl+0x6ac>
    dca2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    dca4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    dca8:	06da      	lsls	r2, r3, #27
    dcaa:	d401      	bmi.n	dcb0 <z_cbvprintf_impl+0x6e0>
    dcac:	071b      	lsls	r3, r3, #28
    dcae:	d505      	bpl.n	dcbc <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    dcb0:	2030      	movs	r0, #48	; 0x30
    dcb2:	9903      	ldr	r1, [sp, #12]
    dcb4:	47d0      	blx	sl
    dcb6:	2800      	cmp	r0, #0
    dcb8:	dbe0      	blt.n	dc7c <z_cbvprintf_impl+0x6ac>
    dcba:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    dcbc:	9b05      	ldr	r3, [sp, #20]
    dcbe:	b133      	cbz	r3, dcce <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    dcc0:	9903      	ldr	r1, [sp, #12]
    dcc2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    dcc6:	47d0      	blx	sl
    dcc8:	2800      	cmp	r0, #0
    dcca:	dbd7      	blt.n	dc7c <z_cbvprintf_impl+0x6ac>
    dccc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    dcce:	44ab      	add	fp, r5
    dcd0:	e005      	b.n	dcde <z_cbvprintf_impl+0x70e>
				OUTC('0');
    dcd2:	2030      	movs	r0, #48	; 0x30
    dcd4:	9903      	ldr	r1, [sp, #12]
    dcd6:	47d0      	blx	sl
    dcd8:	2800      	cmp	r0, #0
    dcda:	dbcf      	blt.n	dc7c <z_cbvprintf_impl+0x6ac>
    dcdc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    dcde:	ebab 0305 	sub.w	r3, fp, r5
    dce2:	2b00      	cmp	r3, #0
    dce4:	dcf5      	bgt.n	dcd2 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    dce6:	4643      	mov	r3, r8
    dce8:	463a      	mov	r2, r7
    dcea:	4650      	mov	r0, sl
    dcec:	9903      	ldr	r1, [sp, #12]
    dcee:	f016 fff8 	bl	24ce2 <outs>
    dcf2:	2800      	cmp	r0, #0
    dcf4:	dbc2      	blt.n	dc7c <z_cbvprintf_impl+0x6ac>
    dcf6:	4405      	add	r5, r0
		while (width > 0) {
    dcf8:	44a9      	add	r9, r5
    dcfa:	eba9 0305 	sub.w	r3, r9, r5
    dcfe:	2b00      	cmp	r3, #0
    dd00:	f77f ae6e 	ble.w	d9e0 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    dd04:	2020      	movs	r0, #32
    dd06:	9903      	ldr	r1, [sp, #12]
    dd08:	47d0      	blx	sl
    dd0a:	2800      	cmp	r0, #0
    dd0c:	dbb6      	blt.n	dc7c <z_cbvprintf_impl+0x6ac>
    dd0e:	3501      	adds	r5, #1
			--width;
    dd10:	e7f3      	b.n	dcfa <z_cbvprintf_impl+0x72a>
    dd12:	bf00      	nop
    dd14:	0002c5ba 	.word	0x0002c5ba

0000dd18 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    dd18:	b148      	cbz	r0, dd2e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    dd1a:	4b05      	ldr	r3, [pc, #20]	; (dd30 <arch_busy_wait+0x18>)
    dd1c:	4a05      	ldr	r2, [pc, #20]	; (dd34 <arch_busy_wait+0x1c>)
    dd1e:	681b      	ldr	r3, [r3, #0]
    dd20:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    dd24:	4358      	muls	r0, r3
    dd26:	4b04      	ldr	r3, [pc, #16]	; (dd38 <arch_busy_wait+0x20>)
    dd28:	f043 0301 	orr.w	r3, r3, #1
    dd2c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    dd2e:	4770      	bx	lr
    dd30:	20008684 	.word	0x20008684
    dd34:	000f4240 	.word	0x000f4240
    dd38:	0002a910 	.word	0x0002a910

0000dd3c <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    dd3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    dd3e:	ab0b      	add	r3, sp, #44	; 0x2c
    dd40:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    dd42:	9303      	str	r3, [sp, #12]
    dd44:	4b05      	ldr	r3, [pc, #20]	; (dd5c <z_log_msg_runtime_create.constprop.0+0x20>)
    dd46:	2201      	movs	r2, #1
    dd48:	9302      	str	r3, [sp, #8]
    dd4a:	2300      	movs	r3, #0
    dd4c:	4618      	mov	r0, r3
    dd4e:	e9cd 3300 	strd	r3, r3, [sp]
    dd52:	f000 fb09 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    dd56:	b007      	add	sp, #28
    dd58:	f85d fb04 	ldr.w	pc, [sp], #4
    dd5c:	0002c5bf 	.word	0x0002c5bf

0000dd60 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    dd60:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    dd62:	b570      	push	{r4, r5, r6, lr}
    dd64:	4605      	mov	r5, r0
    dd66:	461e      	mov	r6, r3
    dd68:	4608      	mov	r0, r1
    dd6a:	d90b      	bls.n	dd84 <ppi_ipc_to_rtc.isra.0+0x24>
    dd6c:	491d      	ldr	r1, [pc, #116]	; (dde4 <ppi_ipc_to_rtc.isra.0+0x84>)
    dd6e:	481e      	ldr	r0, [pc, #120]	; (dde8 <ppi_ipc_to_rtc.isra.0+0x88>)
    dd70:	f240 13e7 	movw	r3, #487	; 0x1e7
    dd74:	4a1d      	ldr	r2, [pc, #116]	; (ddec <ppi_ipc_to_rtc.isra.0+0x8c>)
    dd76:	f016 ffd2 	bl	24d1e <assert_print>
    dd7a:	f240 11e7 	movw	r1, #487	; 0x1e7
    dd7e:	481b      	ldr	r0, [pc, #108]	; (ddec <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    dd80:	f016 ffc6 	bl	24d10 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    dd84:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    dd86:	f00e f917 	bl	1bfb8 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    dd8a:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    dd8e:	b1ae      	cbz	r6, ddbc <ppi_ipc_to_rtc.isra.0+0x5c>
    dd90:	b950      	cbnz	r0, dda8 <ppi_ipc_to_rtc.isra.0+0x48>
    dd92:	4917      	ldr	r1, [pc, #92]	; (ddf0 <ppi_ipc_to_rtc.isra.0+0x90>)
    dd94:	f240 234e 	movw	r3, #590	; 0x24e
    dd98:	4a16      	ldr	r2, [pc, #88]	; (ddf4 <ppi_ipc_to_rtc.isra.0+0x94>)
    dd9a:	4813      	ldr	r0, [pc, #76]	; (dde8 <ppi_ipc_to_rtc.isra.0+0x88>)
    dd9c:	f016 ffbf 	bl	24d1e <assert_print>
    dda0:	f240 214e 	movw	r1, #590	; 0x24e
    dda4:	4813      	ldr	r0, [pc, #76]	; (ddf4 <ppi_ipc_to_rtc.isra.0+0x94>)
    dda6:	e7eb      	b.n	dd80 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    dda8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    ddac:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    ddb0:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    ddb4:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    ddb8:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    ddba:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    ddbc:	b948      	cbnz	r0, ddd2 <ppi_ipc_to_rtc.isra.0+0x72>
    ddbe:	490c      	ldr	r1, [pc, #48]	; (ddf0 <ppi_ipc_to_rtc.isra.0+0x90>)
    ddc0:	f240 2363 	movw	r3, #611	; 0x263
    ddc4:	4a0b      	ldr	r2, [pc, #44]	; (ddf4 <ppi_ipc_to_rtc.isra.0+0x94>)
    ddc6:	4808      	ldr	r0, [pc, #32]	; (dde8 <ppi_ipc_to_rtc.isra.0+0x88>)
    ddc8:	f016 ffa9 	bl	24d1e <assert_print>
    ddcc:	f240 2163 	movw	r1, #611	; 0x263
    ddd0:	e7e8      	b.n	dda4 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    ddd2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ddd6:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    ddda:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    ddde:	6016      	str	r6, [r2, #0]
    dde0:	e7eb      	b.n	ddba <ppi_ipc_to_rtc.isra.0+0x5a>
    dde2:	bf00      	nop
    dde4:	0002c619 	.word	0x0002c619
    dde8:	0002b6e9 	.word	0x0002b6e9
    ddec:	0002c5e7 	.word	0x0002c5e7
    ddf0:	0002c65c 	.word	0x0002c65c
    ddf4:	0002c624 	.word	0x0002c624

0000ddf8 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    ddf8:	b570      	push	{r4, r5, r6, lr}
    ddfa:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    ddfc:	a805      	add	r0, sp, #20
    ddfe:	f00e ff8f 	bl	1cd20 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    de02:	4b25      	ldr	r3, [pc, #148]	; (de98 <sync_rtc_setup+0xa0>)
    de04:	4298      	cmp	r0, r3
    de06:	d143      	bne.n	de90 <sync_rtc_setup+0x98>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    de08:	f00e faca 	bl	1c3a0 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    de0c:	1e04      	subs	r4, r0, #0
    de0e:	da0f      	bge.n	de30 <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    de10:	f89d 0014 	ldrb.w	r0, [sp, #20]
    de14:	f00e ff8a 	bl	1cd2c <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    de18:	4b20      	ldr	r3, [pc, #128]	; (de9c <sync_rtc_setup+0xa4>)
    de1a:	2201      	movs	r2, #1
    de1c:	9302      	str	r3, [sp, #8]
    de1e:	2300      	movs	r3, #0
    de20:	491f      	ldr	r1, [pc, #124]	; (dea0 <sync_rtc_setup+0xa8>)
    de22:	4618      	mov	r0, r3
    de24:	e9cd 3300 	strd	r3, r3, [sp]
    de28:	9403      	str	r4, [sp, #12]
    de2a:	f7ff ff87 	bl	dd3c <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    de2e:	e02c      	b.n	de8a <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    de30:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    de34:	4d1b      	ldr	r5, [pc, #108]	; (dea4 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    de36:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    de3a:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    de3c:	f8ad 3016 	strh.w	r3, [sp, #22]
    de40:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    de42:	9b05      	ldr	r3, [sp, #20]
    de44:	b914      	cbnz	r4, de4c <sync_rtc_setup+0x54>
		return -ENOSYS;
    de46:	f06f 0457 	mvn.w	r4, #87	; 0x57
    de4a:	e7e5      	b.n	de18 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    de4c:	2108      	movs	r1, #8
    de4e:	4628      	mov	r0, r5
    de50:	4a15      	ldr	r2, [pc, #84]	; (dea8 <sync_rtc_setup+0xb0>)
    de52:	47a0      	blx	r4
	if (err < 0) {
    de54:	1e04      	subs	r4, r0, #0
    de56:	dbdf      	blt.n	de18 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    de58:	6933      	ldr	r3, [r6, #16]
    de5a:	2b00      	cmp	r3, #0
    de5c:	d0f3      	beq.n	de46 <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    de5e:	2201      	movs	r2, #1
    de60:	2108      	movs	r1, #8
    de62:	4628      	mov	r0, r5
    de64:	4798      	blx	r3
	if (rv < 0) {
    de66:	1e04      	subs	r4, r0, #0
    de68:	dbd6      	blt.n	de18 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    de6a:	2301      	movs	r3, #1
    de6c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    de70:	4a0e      	ldr	r2, [pc, #56]	; (deac <sync_rtc_setup+0xb4>)
    de72:	fa03 f100 	lsl.w	r1, r3, r0
    de76:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    de7a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    de7e:	f89d 1015 	ldrb.w	r1, [sp, #21]
    de82:	f7ff ff6d 	bl	dd60 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    de86:	2c00      	cmp	r4, #0
    de88:	d1c6      	bne.n	de18 <sync_rtc_setup+0x20>
}
    de8a:	4620      	mov	r0, r4
    de8c:	b006      	add	sp, #24
    de8e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    de90:	f06f 0412 	mvn.w	r4, #18
    de94:	e7c0      	b.n	de18 <sync_rtc_setup+0x20>
    de96:	bf00      	nop
    de98:	0bad0000 	.word	0x0bad0000
    de9c:	0002c5bf 	.word	0x0002c5bf
    dea0:	0002a828 	.word	0x0002a828
    dea4:	0002a240 	.word	0x0002a240
    dea8:	0000df61 	.word	0x0000df61
    deac:	40017000 	.word	0x40017000

0000deb0 <rtc_cb>:
{
    deb0:	b570      	push	{r4, r5, r6, lr}
    deb2:	9e04      	ldr	r6, [sp, #16]
    deb4:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    deb8:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    deba:	f3c6 2607 	ubfx	r6, r6, #8, #8
    debe:	4630      	mov	r0, r6
    dec0:	f00e f860 	bl	1bf84 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    dec4:	2c0f      	cmp	r4, #15
    dec6:	d90b      	bls.n	dee0 <rtc_cb+0x30>
    dec8:	491b      	ldr	r1, [pc, #108]	; (df38 <rtc_cb+0x88>)
    deca:	481c      	ldr	r0, [pc, #112]	; (df3c <rtc_cb+0x8c>)
    decc:	f240 13e1 	movw	r3, #481	; 0x1e1
    ded0:	4a1b      	ldr	r2, [pc, #108]	; (df40 <rtc_cb+0x90>)
    ded2:	f016 ff24 	bl	24d1e <assert_print>
    ded6:	f240 11e1 	movw	r1, #481	; 0x1e1
    deda:	4819      	ldr	r0, [pc, #100]	; (df40 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    dedc:	f016 ff18 	bl	24d10 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    dee0:	00a4      	lsls	r4, r4, #2
    dee2:	b2e4      	uxtb	r4, r4
    dee4:	b950      	cbnz	r0, defc <rtc_cb+0x4c>
    dee6:	4917      	ldr	r1, [pc, #92]	; (df44 <rtc_cb+0x94>)
    dee8:	4814      	ldr	r0, [pc, #80]	; (df3c <rtc_cb+0x8c>)
    deea:	f44f 7317 	mov.w	r3, #604	; 0x25c
    deee:	4a16      	ldr	r2, [pc, #88]	; (df48 <rtc_cb+0x98>)
    def0:	f016 ff15 	bl	24d1e <assert_print>
    def4:	f44f 7117 	mov.w	r1, #604	; 0x25c
    def8:	4813      	ldr	r0, [pc, #76]	; (df48 <rtc_cb+0x98>)
    defa:	e7ef      	b.n	dedc <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    defc:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    defe:	4b13      	ldr	r3, [pc, #76]	; (df4c <rtc_cb+0x9c>)
    df00:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    df04:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    df06:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    df08:	4a11      	ldr	r2, [pc, #68]	; (df50 <rtc_cb+0xa0>)
    df0a:	40ab      	lsls	r3, r5
    df0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    df10:	4630      	mov	r0, r6
    df12:	f00e fa63 	bl	1c3dc <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    df16:	4628      	mov	r0, r5
    df18:	f00e ff08 	bl	1cd2c <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    df1c:	4b0d      	ldr	r3, [pc, #52]	; (df54 <rtc_cb+0xa4>)
    df1e:	4298      	cmp	r0, r3
    df20:	d008      	beq.n	df34 <rtc_cb+0x84>
    df22:	490d      	ldr	r1, [pc, #52]	; (df58 <rtc_cb+0xa8>)
    df24:	4805      	ldr	r0, [pc, #20]	; (df3c <rtc_cb+0x8c>)
    df26:	2374      	movs	r3, #116	; 0x74
    df28:	4a0c      	ldr	r2, [pc, #48]	; (df5c <rtc_cb+0xac>)
    df2a:	f016 fef8 	bl	24d1e <assert_print>
    df2e:	2174      	movs	r1, #116	; 0x74
    df30:	480a      	ldr	r0, [pc, #40]	; (df5c <rtc_cb+0xac>)
    df32:	e7d3      	b.n	dedc <rtc_cb+0x2c>
}
    df34:	bd70      	pop	{r4, r5, r6, pc}
    df36:	bf00      	nop
    df38:	0002c619 	.word	0x0002c619
    df3c:	0002b6e9 	.word	0x0002b6e9
    df40:	0002c5e7 	.word	0x0002c5e7
    df44:	0002c660 	.word	0x0002c660
    df48:	0002c624 	.word	0x0002c624
    df4c:	4002a080 	.word	0x4002a080
    df50:	40017000 	.word	0x40017000
    df54:	0bad0000 	.word	0x0bad0000
    df58:	0002c69b 	.word	0x0002c69b
    df5c:	0002c664 	.word	0x0002c664

0000df60 <mbox_callback>:
{
    df60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    df64:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    df66:	6883      	ldr	r3, [r0, #8]
    df68:	691b      	ldr	r3, [r3, #16]
    df6a:	b94b      	cbnz	r3, df80 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    df6c:	4927      	ldr	r1, [pc, #156]	; (e00c <mbox_callback+0xac>)
    df6e:	4828      	ldr	r0, [pc, #160]	; (e010 <mbox_callback+0xb0>)
    df70:	23ca      	movs	r3, #202	; 0xca
    df72:	4a28      	ldr	r2, [pc, #160]	; (e014 <mbox_callback+0xb4>)
    df74:	f016 fed3 	bl	24d1e <assert_print>
    df78:	21ca      	movs	r1, #202	; 0xca
    df7a:	4826      	ldr	r0, [pc, #152]	; (e014 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    df7c:	f016 fec8 	bl	24d10 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    df80:	2200      	movs	r2, #0
    df82:	4798      	blx	r3
    df84:	4606      	mov	r6, r0
    df86:	2800      	cmp	r0, #0
    df88:	d1f0      	bne.n	df6c <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    df8a:	f3c4 2907 	ubfx	r9, r4, #8, #8
    df8e:	4648      	mov	r0, r9
    df90:	f00e f82c 	bl	1bfec <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    df94:	fa5f f884 	uxtb.w	r8, r4
    df98:	4633      	mov	r3, r6
    df9a:	4649      	mov	r1, r9
    df9c:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    df9e:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    dfa0:	4640      	mov	r0, r8
    dfa2:	f7ff fedd 	bl	dd60 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    dfa6:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    dfaa:	4648      	mov	r0, r9
    dfac:	f00d ffea 	bl	1bf84 <z_nrf_rtc_timer_compare_evt_address_get>
    dfb0:	2d0f      	cmp	r5, #15
    dfb2:	d90a      	bls.n	dfca <mbox_callback+0x6a>
    dfb4:	4918      	ldr	r1, [pc, #96]	; (e018 <mbox_callback+0xb8>)
    dfb6:	4816      	ldr	r0, [pc, #88]	; (e010 <mbox_callback+0xb0>)
    dfb8:	f240 13e1 	movw	r3, #481	; 0x1e1
    dfbc:	4a17      	ldr	r2, [pc, #92]	; (e01c <mbox_callback+0xbc>)
    dfbe:	f016 feae 	bl	24d1e <assert_print>
    dfc2:	f240 11e1 	movw	r1, #481	; 0x1e1
    dfc6:	4815      	ldr	r0, [pc, #84]	; (e01c <mbox_callback+0xbc>)
    dfc8:	e7d8      	b.n	df7c <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dfca:	4a15      	ldr	r2, [pc, #84]	; (e020 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    dfcc:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dfce:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    dfd0:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dfd4:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    dfd6:	b950      	cbnz	r0, dfee <mbox_callback+0x8e>
    dfd8:	4912      	ldr	r1, [pc, #72]	; (e024 <mbox_callback+0xc4>)
    dfda:	480d      	ldr	r0, [pc, #52]	; (e010 <mbox_callback+0xb0>)
    dfdc:	f44f 7312 	mov.w	r3, #584	; 0x248
    dfe0:	4a11      	ldr	r2, [pc, #68]	; (e028 <mbox_callback+0xc8>)
    dfe2:	f016 fe9c 	bl	24d1e <assert_print>
    dfe6:	f44f 7112 	mov.w	r1, #584	; 0x248
    dfea:	480f      	ldr	r0, [pc, #60]	; (e028 <mbox_callback+0xc8>)
    dfec:	e7c6      	b.n	df7c <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dfee:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    dff2:	4b0e      	ldr	r3, [pc, #56]	; (e02c <mbox_callback+0xcc>)
    dff4:	f107 0232 	add.w	r2, r7, #50	; 0x32
    dff8:	9300      	str	r3, [sp, #0]
    dffa:	4648      	mov	r0, r9
    dffc:	4633      	mov	r3, r6
    dffe:	9401      	str	r4, [sp, #4]
    e000:	0052      	lsls	r2, r2, #1
    e002:	f00e f8dd 	bl	1c1c0 <z_nrf_rtc_timer_set>
}
    e006:	b003      	add	sp, #12
    e008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e00c:	0002c6af 	.word	0x0002c6af
    e010:	0002b6e9 	.word	0x0002b6e9
    e014:	0002c664 	.word	0x0002c664
    e018:	0002c619 	.word	0x0002c619
    e01c:	0002c5e7 	.word	0x0002c5e7
    e020:	4002a080 	.word	0x4002a080
    e024:	0002c660 	.word	0x0002c660
    e028:	0002c624 	.word	0x0002c624
    e02c:	0000deb1 	.word	0x0000deb1

0000e030 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e030:	f01a bbd7 	b.w	287e2 <SystemInit>

0000e034 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    e034:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    e036:	aa01      	add	r2, sp, #4
    e038:	f01a fbba 	bl	287b0 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    e03c:	4604      	mov	r4, r0
    e03e:	b168      	cbz	r0, e05c <soc_secure_gpio_pin_mcu_select+0x28>
    e040:	2316      	movs	r3, #22
    e042:	4a0e      	ldr	r2, [pc, #56]	; (e07c <soc_secure_gpio_pin_mcu_select+0x48>)
    e044:	490e      	ldr	r1, [pc, #56]	; (e080 <soc_secure_gpio_pin_mcu_select+0x4c>)
    e046:	480f      	ldr	r0, [pc, #60]	; (e084 <soc_secure_gpio_pin_mcu_select+0x50>)
    e048:	f016 fe69 	bl	24d1e <assert_print>
    e04c:	4621      	mov	r1, r4
    e04e:	480e      	ldr	r0, [pc, #56]	; (e088 <soc_secure_gpio_pin_mcu_select+0x54>)
    e050:	f016 fe65 	bl	24d1e <assert_print>
    e054:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    e056:	4809      	ldr	r0, [pc, #36]	; (e07c <soc_secure_gpio_pin_mcu_select+0x48>)
    e058:	f016 fe5a 	bl	24d10 <assert_post_action>
    e05c:	9b01      	ldr	r3, [sp, #4]
    e05e:	b15b      	cbz	r3, e078 <soc_secure_gpio_pin_mcu_select+0x44>
    e060:	2317      	movs	r3, #23
    e062:	4a06      	ldr	r2, [pc, #24]	; (e07c <soc_secure_gpio_pin_mcu_select+0x48>)
    e064:	4909      	ldr	r1, [pc, #36]	; (e08c <soc_secure_gpio_pin_mcu_select+0x58>)
    e066:	4807      	ldr	r0, [pc, #28]	; (e084 <soc_secure_gpio_pin_mcu_select+0x50>)
    e068:	f016 fe59 	bl	24d1e <assert_print>
    e06c:	9901      	ldr	r1, [sp, #4]
    e06e:	4808      	ldr	r0, [pc, #32]	; (e090 <soc_secure_gpio_pin_mcu_select+0x5c>)
    e070:	f016 fe55 	bl	24d1e <assert_print>
    e074:	2117      	movs	r1, #23
    e076:	e7ee      	b.n	e056 <soc_secure_gpio_pin_mcu_select+0x22>
}
    e078:	b002      	add	sp, #8
    e07a:	bd10      	pop	{r4, pc}
    e07c:	0002c6c1 	.word	0x0002c6c1
    e080:	0002c6fb 	.word	0x0002c6fb
    e084:	0002b6e9 	.word	0x0002b6e9
    e088:	0002c71b 	.word	0x0002c71b
    e08c:	0002c735 	.word	0x0002c735
    e090:	0002c741 	.word	0x0002c741

0000e094 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    e094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e098:	f8df a0fc 	ldr.w	sl, [pc, #252]	; e198 <z_log_init.isra.0+0x104>
    e09c:	4f3f      	ldr	r7, [pc, #252]	; (e19c <z_log_init.isra.0+0x108>)
    e09e:	4681      	mov	r9, r0
    e0a0:	ebaa 0307 	sub.w	r3, sl, r7

	if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e0a4:	2b9f      	cmp	r3, #159	; 0x9f
static uint32_t z_log_init(bool blocking, bool can_sleep)
    e0a6:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e0a8:	d90b      	bls.n	e0c2 <z_log_init.isra.0+0x2e>
    e0aa:	493d      	ldr	r1, [pc, #244]	; (e1a0 <z_log_init.isra.0+0x10c>)
    e0ac:	f240 1315 	movw	r3, #277	; 0x115
    e0b0:	4a3c      	ldr	r2, [pc, #240]	; (e1a4 <z_log_init.isra.0+0x110>)
    e0b2:	483d      	ldr	r0, [pc, #244]	; (e1a8 <z_log_init.isra.0+0x114>)
    e0b4:	f016 fe33 	bl	24d1e <assert_print>
    e0b8:	f240 1115 	movw	r1, #277	; 0x115
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e0bc:	4839      	ldr	r0, [pc, #228]	; (e1a4 <z_log_init.isra.0+0x110>)
    e0be:	f016 fe27 	bl	24d10 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    e0c2:	483a      	ldr	r0, [pc, #232]	; (e1ac <z_log_init.isra.0+0x118>)
    e0c4:	f016 fe94 	bl	24df0 <atomic_inc>
    e0c8:	4606      	mov	r6, r0
    e0ca:	2800      	cmp	r0, #0
    e0cc:	d134      	bne.n	e138 <z_log_init.isra.0+0xa4>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e0ce:	463c      	mov	r4, r7
	uint32_t mask = 0;
    e0d0:	4605      	mov	r5, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    e0d2:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e0d6:	4554      	cmp	r4, sl
    e0d8:	d927      	bls.n	e12a <z_log_init.isra.0+0x96>
    e0da:	4935      	ldr	r1, [pc, #212]	; (e1b0 <z_log_init.isra.0+0x11c>)
    e0dc:	f44f 7391 	mov.w	r3, #290	; 0x122
    e0e0:	4a30      	ldr	r2, [pc, #192]	; (e1a4 <z_log_init.isra.0+0x110>)
    e0e2:	4831      	ldr	r0, [pc, #196]	; (e1a8 <z_log_init.isra.0+0x114>)
    e0e4:	f016 fe1b 	bl	24d1e <assert_print>
    e0e8:	4832      	ldr	r0, [pc, #200]	; (e1b4 <z_log_init.isra.0+0x120>)
    e0ea:	f016 fe18 	bl	24d1e <assert_print>
    e0ee:	f44f 7191 	mov.w	r1, #290	; 0x122
    e0f2:	e7e3      	b.n	e0bc <z_log_init.isra.0+0x28>
		if (backend->autostart) {
    e0f4:	7b23      	ldrb	r3, [r4, #12]
    e0f6:	b173      	cbz	r3, e116 <z_log_init.isra.0+0x82>
	if (backend->api->init) {
    e0f8:	6823      	ldr	r3, [r4, #0]
    e0fa:	68db      	ldr	r3, [r3, #12]
    e0fc:	b10b      	cbz	r3, e102 <z_log_init.isra.0+0x6e>
		backend->api->init(backend);
    e0fe:	4620      	mov	r0, r4
    e100:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    e102:	6823      	ldr	r3, [r4, #0]
    e104:	691b      	ldr	r3, [r3, #16]
    e106:	b943      	cbnz	r3, e11a <z_log_init.isra.0+0x86>
				log_backend_enable(backend,
    e108:	6863      	ldr	r3, [r4, #4]
    e10a:	2204      	movs	r2, #4
    e10c:	4620      	mov	r0, r4
    e10e:	6819      	ldr	r1, [r3, #0]
    e110:	f000 f904 	bl	e31c <log_backend_enable>
			}

			i++;
    e114:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e116:	3410      	adds	r4, #16
    e118:	e7dd      	b.n	e0d6 <z_log_init.isra.0+0x42>
		return backend->api->is_ready(backend);
    e11a:	4620      	mov	r0, r4
    e11c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    e11e:	2800      	cmp	r0, #0
    e120:	d0f2      	beq.n	e108 <z_log_init.isra.0+0x74>
				mask |= BIT(i);
    e122:	fa0b f306 	lsl.w	r3, fp, r6
    e126:	431d      	orrs	r5, r3
    e128:	e7f4      	b.n	e114 <z_log_init.isra.0+0x80>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e12a:	d3e3      	bcc.n	e0f4 <z_log_init.isra.0+0x60>
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    e12c:	f1b9 0f00 	cmp.w	r9, #0
    e130:	d002      	beq.n	e138 <z_log_init.isra.0+0xa4>
		mask_cpy &= ~BIT(i);
    e132:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    e136:	b90d      	cbnz	r5, e13c <z_log_init.isra.0+0xa8>
			}
		}
	}

	return mask;
}
    e138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e13c:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    e13e:	fa95 f4a5 	rbit	r4, r5
    e142:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    e146:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e14a:	0126      	lsls	r6, r4, #4
    e14c:	eb07 1404 	add.w	r4, r7, r4, lsl #4
		mask_cpy &= ~BIT(i);
    e150:	ea6f 0b03 	mvn.w	fp, r3
    e154:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e158:	7b23      	ldrb	r3, [r4, #12]
    e15a:	b15b      	cbz	r3, e174 <z_log_init.isra.0+0xe0>
	if (backend->api->is_ready != NULL) {
    e15c:	59bb      	ldr	r3, [r7, r6]
    e15e:	691b      	ldr	r3, [r3, #16]
    e160:	b9a3      	cbnz	r3, e18c <z_log_init.isra.0+0xf8>
					   backend->cb->ctx,
    e162:	443e      	add	r6, r7
			log_backend_enable(backend,
    e164:	6873      	ldr	r3, [r6, #4]
    e166:	2204      	movs	r2, #4
    e168:	4620      	mov	r0, r4
    e16a:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    e16c:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    e170:	f000 f8d4 	bl	e31c <log_backend_enable>
	while (mask_cpy) {
    e174:	2d00      	cmp	r5, #0
    e176:	d1e2      	bne.n	e13e <z_log_init.isra.0+0xaa>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    e178:	f1b8 0f00 	cmp.w	r8, #0
    e17c:	d004      	beq.n	e188 <z_log_init.isra.0+0xf4>
	return z_impl_k_sleep(timeout);
    e17e:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e182:	2100      	movs	r1, #0
    e184:	f013 fd4a 	bl	21c1c <z_impl_k_sleep>
    e188:	464d      	mov	r5, r9
    e18a:	e7d4      	b.n	e136 <z_log_init.isra.0+0xa2>
		return backend->api->is_ready(backend);
    e18c:	4620      	mov	r0, r4
    e18e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e190:	2800      	cmp	r0, #0
    e192:	d1ef      	bne.n	e174 <z_log_init.isra.0+0xe0>
    e194:	e7e5      	b.n	e162 <z_log_init.isra.0+0xce>
    e196:	bf00      	nop
    e198:	0002a848 	.word	0x0002a848
    e19c:	0002a838 	.word	0x0002a838
    e1a0:	0002c788 	.word	0x0002c788
    e1a4:	0002c75b 	.word	0x0002c75b
    e1a8:	0002b6e9 	.word	0x0002b6e9
    e1ac:	20020f64 	.word	0x20020f64
    e1b0:	0002c7ac 	.word	0x0002c7ac
    e1b4:	0002c7cd 	.word	0x0002c7cd

0000e1b8 <log_format_func_t_get>:
}
    e1b8:	4b01      	ldr	r3, [pc, #4]	; (e1c0 <log_format_func_t_get+0x8>)
    e1ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e1be:	4770      	bx	lr
    e1c0:	0002ad14 	.word	0x0002ad14

0000e1c4 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    e1c4:	b508      	push	{r3, lr}
    e1c6:	4603      	mov	r3, r0
    e1c8:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    e1ca:	b12b      	cbz	r3, e1d8 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    e1cc:	4a04      	ldr	r2, [pc, #16]	; (e1e0 <log_set_timestamp_func+0x1c>)
    e1ce:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    e1d0:	f000 faec 	bl	e7ac <log_output_timestamp_freq_set>
	}

	return 0;
    e1d4:	2000      	movs	r0, #0
}
    e1d6:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e1d8:	f06f 0015 	mvn.w	r0, #21
    e1dc:	e7fb      	b.n	e1d6 <log_set_timestamp_func+0x12>
    e1de:	bf00      	nop
    e1e0:	200083fc 	.word	0x200083fc

0000e1e4 <log_core_init>:
	panic_mode = false;
    e1e4:	2300      	movs	r3, #0
    e1e6:	4a04      	ldr	r2, [pc, #16]	; (e1f8 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    e1e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    e1ec:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    e1ee:	4a03      	ldr	r2, [pc, #12]	; (e1fc <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    e1f0:	4803      	ldr	r0, [pc, #12]	; (e200 <log_core_init+0x1c>)
	dropped_cnt = 0;
    e1f2:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    e1f4:	f7ff bfe6 	b.w	e1c4 <log_set_timestamp_func>
    e1f8:	20021d7e 	.word	0x20021d7e
    e1fc:	20020f5c 	.word	0x20020f5c
    e200:	00024ded 	.word	0x00024ded

0000e204 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    e204:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    e206:	4d13      	ldr	r5, [pc, #76]	; (e254 <z_impl_log_panic+0x50>)
    e208:	7829      	ldrb	r1, [r5, #0]
    e20a:	bb09      	cbnz	r1, e250 <z_impl_log_panic+0x4c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    e20c:	2001      	movs	r0, #1
    e20e:	f7ff ff41 	bl	e094 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e212:	4c11      	ldr	r4, [pc, #68]	; (e258 <z_impl_log_panic+0x54>)
    e214:	4e11      	ldr	r6, [pc, #68]	; (e25c <z_impl_log_panic+0x58>)
    e216:	42b4      	cmp	r4, r6
    e218:	d917      	bls.n	e24a <z_impl_log_panic+0x46>
    e21a:	4911      	ldr	r1, [pc, #68]	; (e260 <z_impl_log_panic+0x5c>)
    e21c:	f44f 73c2 	mov.w	r3, #388	; 0x184
    e220:	4a10      	ldr	r2, [pc, #64]	; (e264 <z_impl_log_panic+0x60>)
    e222:	4811      	ldr	r0, [pc, #68]	; (e268 <z_impl_log_panic+0x64>)
    e224:	f016 fd7b 	bl	24d1e <assert_print>
    e228:	4810      	ldr	r0, [pc, #64]	; (e26c <z_impl_log_panic+0x68>)
    e22a:	f016 fd78 	bl	24d1e <assert_print>
    e22e:	f44f 71c2 	mov.w	r1, #388	; 0x184
    e232:	480c      	ldr	r0, [pc, #48]	; (e264 <z_impl_log_panic+0x60>)
    e234:	f016 fd6c 	bl	24d10 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e238:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e23a:	795b      	ldrb	r3, [r3, #5]
    e23c:	b11b      	cbz	r3, e246 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    e23e:	6823      	ldr	r3, [r4, #0]
    e240:	4620      	mov	r0, r4
    e242:	689b      	ldr	r3, [r3, #8]
    e244:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e246:	3410      	adds	r4, #16
    e248:	e7e5      	b.n	e216 <z_impl_log_panic+0x12>
    e24a:	d3f5      	bcc.n	e238 <z_impl_log_panic+0x34>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    e24c:	2301      	movs	r3, #1
    e24e:	702b      	strb	r3, [r5, #0]
}
    e250:	bd70      	pop	{r4, r5, r6, pc}
    e252:	bf00      	nop
    e254:	20021d7e 	.word	0x20021d7e
    e258:	0002a838 	.word	0x0002a838
    e25c:	0002a848 	.word	0x0002a848
    e260:	0002c7ac 	.word	0x0002c7ac
    e264:	0002c75b 	.word	0x0002c75b
    e268:	0002b6e9 	.word	0x0002b6e9
    e26c:	0002c7cd 	.word	0x0002c7cd

0000e270 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    e270:	b510      	push	{r4, lr}
    e272:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    e274:	4806      	ldr	r0, [pc, #24]	; (e290 <z_log_dropped+0x20>)
    e276:	f016 fdbb 	bl	24df0 <atomic_inc>
	if (buffered) {
    e27a:	b13c      	cbz	r4, e28c <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e27c:	4b05      	ldr	r3, [pc, #20]	; (e294 <z_log_dropped+0x24>)
    e27e:	e8d3 1fef 	ldaex	r1, [r3]
    e282:	3901      	subs	r1, #1
    e284:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e288:	2a00      	cmp	r2, #0
    e28a:	d1f8      	bne.n	e27e <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    e28c:	bd10      	pop	{r4, pc}
    e28e:	bf00      	nop
    e290:	20020f5c 	.word	0x20020f5c
    e294:	20020f60 	.word	0x20020f60

0000e298 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    e298:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    e29a:	4b12      	ldr	r3, [pc, #72]	; (e2e4 <z_log_msg_commit+0x4c>)
{
    e29c:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    e29e:	681b      	ldr	r3, [r3, #0]
    e2a0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2a2:	4c11      	ldr	r4, [pc, #68]	; (e2e8 <z_log_msg_commit+0x50>)
    e2a4:	4e11      	ldr	r6, [pc, #68]	; (e2ec <z_log_msg_commit+0x54>)
	msg->hdr.timestamp = timestamp_func();
    e2a6:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2a8:	42b4      	cmp	r4, r6
    e2aa:	d918      	bls.n	e2de <z_log_msg_commit+0x46>
    e2ac:	4910      	ldr	r1, [pc, #64]	; (e2f0 <z_log_msg_commit+0x58>)
    e2ae:	f240 13c1 	movw	r3, #449	; 0x1c1
    e2b2:	4a10      	ldr	r2, [pc, #64]	; (e2f4 <z_log_msg_commit+0x5c>)
    e2b4:	4810      	ldr	r0, [pc, #64]	; (e2f8 <z_log_msg_commit+0x60>)
    e2b6:	f016 fd32 	bl	24d1e <assert_print>
    e2ba:	4810      	ldr	r0, [pc, #64]	; (e2fc <z_log_msg_commit+0x64>)
    e2bc:	f016 fd2f 	bl	24d1e <assert_print>
    e2c0:	f240 11c1 	movw	r1, #449	; 0x1c1
    e2c4:	480b      	ldr	r0, [pc, #44]	; (e2f4 <z_log_msg_commit+0x5c>)
    e2c6:	f016 fd23 	bl	24d10 <assert_post_action>
	return backend->cb->active;
    e2ca:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    e2cc:	795b      	ldrb	r3, [r3, #5]
    e2ce:	b123      	cbz	r3, e2da <z_log_msg_commit+0x42>
	backend->api->process(backend, msg);
    e2d0:	6823      	ldr	r3, [r4, #0]
    e2d2:	4629      	mov	r1, r5
    e2d4:	4620      	mov	r0, r4
    e2d6:	681b      	ldr	r3, [r3, #0]
    e2d8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2da:	3410      	adds	r4, #16
    e2dc:	e7e4      	b.n	e2a8 <z_log_msg_commit+0x10>
    e2de:	d3f4      	bcc.n	e2ca <z_log_msg_commit+0x32>
	msg_commit(&log_buffer, msg);
}
    e2e0:	bd70      	pop	{r4, r5, r6, pc}
    e2e2:	bf00      	nop
    e2e4:	200083fc 	.word	0x200083fc
    e2e8:	0002a838 	.word	0x0002a838
    e2ec:	0002a848 	.word	0x0002a848
    e2f0:	0002c7ac 	.word	0x0002c7ac
    e2f4:	0002c75b 	.word	0x0002c75b
    e2f8:	0002b6e9 	.word	0x0002b6e9
    e2fc:	0002c7cd 	.word	0x0002c7cd

0000e300 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    e300:	4a04      	ldr	r2, [pc, #16]	; (e314 <log_source_name_get+0x14>)
    e302:	4b05      	ldr	r3, [pc, #20]	; (e318 <log_source_name_get+0x18>)
    e304:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    e306:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    e30a:	bf34      	ite	cc
    e30c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    e310:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    e312:	4770      	bx	lr
    e314:	0002a6e0 	.word	0x0002a6e0
    e318:	0002a838 	.word	0x0002a838

0000e31c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e31c:	4b0e      	ldr	r3, [pc, #56]	; (e358 <log_backend_enable+0x3c>)
{
    e31e:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    e320:	1ac3      	subs	r3, r0, r3
    e322:	111b      	asrs	r3, r3, #4
    e324:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    e326:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    e328:	b948      	cbnz	r0, e33e <log_backend_enable+0x22>
    e32a:	490c      	ldr	r1, [pc, #48]	; (e35c <log_backend_enable+0x40>)
    e32c:	480c      	ldr	r0, [pc, #48]	; (e360 <log_backend_enable+0x44>)
    e32e:	23de      	movs	r3, #222	; 0xde
    e330:	4a0c      	ldr	r2, [pc, #48]	; (e364 <log_backend_enable+0x48>)
    e332:	f016 fcf4 	bl	24d1e <assert_print>
    e336:	21de      	movs	r1, #222	; 0xde
    e338:	480a      	ldr	r0, [pc, #40]	; (e364 <log_backend_enable+0x48>)
    e33a:	f016 fce9 	bl	24d10 <assert_post_action>
	backend->cb->id = id;
    e33e:	6844      	ldr	r4, [r0, #4]
    e340:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    e342:	6843      	ldr	r3, [r0, #4]
    e344:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    e346:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    e348:	6843      	ldr	r3, [r0, #4]
    e34a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    e34c:	6843      	ldr	r3, [r0, #4]
    e34e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    e350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    e354:	f016 bd5c 	b.w	24e10 <z_log_notify_backend_enabled>
    e358:	0002a838 	.word	0x0002a838
    e35c:	0002c870 	.word	0x0002c870
    e360:	0002b6e9 	.word	0x0002b6e9
    e364:	0002c838 	.word	0x0002c838

0000e368 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e36c:	b085      	sub	sp, #20
    e36e:	af02      	add	r7, sp, #8
    e370:	4604      	mov	r4, r0
    e372:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    e376:	460e      	mov	r6, r1
    e378:	4693      	mov	fp, r2
    e37a:	4698      	mov	r8, r3
    e37c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    e37e:	f1ba 0f00 	cmp.w	sl, #0
    e382:	d015      	beq.n	e3b0 <z_impl_z_log_msg_runtime_vcreate+0x48>
		va_list ap2;

		va_copy(ap2, ap);
    e384:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    e388:	f8cd 9000 	str.w	r9, [sp]
    e38c:	2110      	movs	r1, #16
    e38e:	4653      	mov	r3, sl
    e390:	2000      	movs	r0, #0
    e392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e394:	f7fe fa3a 	bl	c80c <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    e398:	1e01      	subs	r1, r0, #0
    e39a:	da0a      	bge.n	e3b2 <z_impl_z_log_msg_runtime_vcreate+0x4a>
    e39c:	491f      	ldr	r1, [pc, #124]	; (e41c <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e39e:	2368      	movs	r3, #104	; 0x68
    e3a0:	4a1f      	ldr	r2, [pc, #124]	; (e420 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e3a2:	4820      	ldr	r0, [pc, #128]	; (e424 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    e3a4:	f016 fcbb 	bl	24d1e <assert_print>
    e3a8:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    e3aa:	481d      	ldr	r0, [pc, #116]	; (e420 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e3ac:	f016 fcb0 	bl	24d10 <assert_post_action>
		plen = 0;
    e3b0:	4651      	mov	r1, sl
	struct log_msg_desc desc =
    e3b2:	4a1d      	ldr	r2, [pc, #116]	; (e428 <z_impl_z_log_msg_runtime_vcreate+0xc0>)
    e3b4:	f004 0407 	and.w	r4, r4, #7
    e3b8:	f00b 0b07 	and.w	fp, fp, #7
    e3bc:	00e4      	lsls	r4, r4, #3
    e3be:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    e3c2:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    e3c6:	4314      	orrs	r4, r2
    e3c8:	4a18      	ldr	r2, [pc, #96]	; (e42c <z_impl_z_log_msg_runtime_vcreate+0xc4>)
    e3ca:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    e3ce:	3517      	adds	r5, #23
    e3d0:	440d      	add	r5, r1
		msg = alloca(msg_wlen * sizeof(int));
    e3d2:	f025 0507 	bic.w	r5, r5, #7
    e3d6:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    e3da:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    e3dc:	ad02      	add	r5, sp, #8
	if (pkg && fmt) {
    e3de:	f1ba 0f00 	cmp.w	sl, #0
    e3e2:	d011      	beq.n	e408 <z_impl_z_log_msg_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    e3e4:	f8cd 9000 	str.w	r9, [sp]
    e3e8:	4653      	mov	r3, sl
    e3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e3ec:	f105 0010 	add.w	r0, r5, #16
    e3f0:	f7fe fa0c 	bl	c80c <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    e3f4:	2800      	cmp	r0, #0
    e3f6:	da07      	bge.n	e408 <z_impl_z_log_msg_runtime_vcreate+0xa0>
    e3f8:	4908      	ldr	r1, [pc, #32]	; (e41c <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e3fa:	2382      	movs	r3, #130	; 0x82
    e3fc:	4a08      	ldr	r2, [pc, #32]	; (e420 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e3fe:	4809      	ldr	r0, [pc, #36]	; (e424 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    e400:	f016 fc8d 	bl	24d1e <assert_print>
    e404:	2182      	movs	r1, #130	; 0x82
    e406:	e7d0      	b.n	e3aa <z_impl_z_log_msg_runtime_vcreate+0x42>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    e408:	4643      	mov	r3, r8
    e40a:	4622      	mov	r2, r4
    e40c:	4631      	mov	r1, r6
    e40e:	4628      	mov	r0, r5
    e410:	f016 fd01 	bl	24e16 <z_log_msg_finalize>
	}
}
    e414:	370c      	adds	r7, #12
    e416:	46bd      	mov	sp, r7
    e418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e41c:	0002c8bc 	.word	0x0002c8bc
    e420:	0002c890 	.word	0x0002c890
    e424:	0002b6e9 	.word	0x0002b6e9
    e428:	0007fe00 	.word	0x0007fe00
    e42c:	7ff80000 	.word	0x7ff80000

0000e430 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    e430:	b40e      	push	{r1, r2, r3}
    e432:	b503      	push	{r0, r1, lr}
    e434:	ab03      	add	r3, sp, #12
    e436:	f853 2b04 	ldr.w	r2, [r3], #4
    e43a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e43c:	4804      	ldr	r0, [pc, #16]	; (e450 <print_formatted+0x20>)
	va_start(args, fmt);
    e43e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e440:	f016 fd2c 	bl	24e9c <cbvprintf>
	va_end(args);

	return length;
}
    e444:	b002      	add	sp, #8
    e446:	f85d eb04 	ldr.w	lr, [sp], #4
    e44a:	b003      	add	sp, #12
    e44c:	4770      	bx	lr
    e44e:	bf00      	nop
    e450:	00024e4b 	.word	0x00024e4b

0000e454 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e454:	06ca      	lsls	r2, r1, #27
    e456:	d405      	bmi.n	e464 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e458:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    e45a:	bf4c      	ite	mi
    e45c:	4902      	ldrmi	r1, [pc, #8]	; (e468 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    e45e:	4903      	ldrpl	r1, [pc, #12]	; (e46c <newline_print+0x18>)
    e460:	f7ff bfe6 	b.w	e430 <print_formatted>
	}
}
    e464:	4770      	bx	lr
    e466:	bf00      	nop
    e468:	0002f303 	.word	0x0002f303
    e46c:	0002be10 	.word	0x0002be10

0000e470 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e474:	b089      	sub	sp, #36	; 0x24
    e476:	469a      	mov	sl, r3
    e478:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    e47c:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    e480:	9305      	str	r3, [sp, #20]
    e482:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e484:	4604      	mov	r4, r0
    e486:	460d      	mov	r5, r1
    e488:	9e16      	ldr	r6, [sp, #88]	; 0x58
    e48a:	9206      	str	r2, [sp, #24]
    e48c:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    e48e:	f1bb 0f00 	cmp.w	fp, #0
    e492:	f000 8085 	beq.w	e5a0 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    e496:	f006 0308 	and.w	r3, r6, #8
    e49a:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    e49c:	f016 fcb9 	bl	24e12 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    e4a0:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    e4a4:	4602      	mov	r2, r0
    e4a6:	2800      	cmp	r0, #0
    e4a8:	d049      	beq.n	e53e <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    e4aa:	4620      	mov	r0, r4
    e4ac:	498c      	ldr	r1, [pc, #560]	; (e6e0 <log_output_process+0x270>)
    e4ae:	f7ff ffbf 	bl	e430 <print_formatted>
    e4b2:	4680      	mov	r8, r0
	if (stamp) {
    e4b4:	f1b9 0f00 	cmp.w	r9, #0
    e4b8:	d008      	beq.n	e4cc <log_output_process+0x5c>
	if (!format) {
    e4ba:	f016 0f44 	tst.w	r6, #68	; 0x44
    e4be:	d140      	bne.n	e542 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    e4c0:	462a      	mov	r2, r5
    e4c2:	4620      	mov	r0, r4
    e4c4:	4987      	ldr	r1, [pc, #540]	; (e6e4 <log_output_process+0x274>)
    e4c6:	f7ff ffb3 	bl	e430 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    e4ca:	4480      	add	r8, r0
	if (color) {
    e4cc:	f006 0301 	and.w	r3, r6, #1
    e4d0:	b153      	cbz	r3, e4e8 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    e4d2:	4b85      	ldr	r3, [pc, #532]	; (e6e8 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    e4d4:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    e4d6:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    e4da:	4b84      	ldr	r3, [pc, #528]	; (e6ec <log_output_process+0x27c>)
    e4dc:	4984      	ldr	r1, [pc, #528]	; (e6f0 <log_output_process+0x280>)
    e4de:	2a00      	cmp	r2, #0
    e4e0:	bf08      	it	eq
    e4e2:	461a      	moveq	r2, r3
    e4e4:	f7ff ffa4 	bl	e430 <print_formatted>
	if (level_on) {
    e4e8:	f006 0308 	and.w	r3, r6, #8
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d054      	beq.n	e59a <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    e4f0:	4b80      	ldr	r3, [pc, #512]	; (e6f4 <log_output_process+0x284>)
    e4f2:	4620      	mov	r0, r4
    e4f4:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    e4f8:	497f      	ldr	r1, [pc, #508]	; (e6f8 <log_output_process+0x288>)
    e4fa:	f7ff ff99 	bl	e430 <print_formatted>
    e4fe:	4605      	mov	r5, r0
	if (domain) {
    e500:	9b06      	ldr	r3, [sp, #24]
    e502:	b12b      	cbz	r3, e510 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    e504:	461a      	mov	r2, r3
    e506:	4620      	mov	r0, r4
    e508:	497c      	ldr	r1, [pc, #496]	; (e6fc <log_output_process+0x28c>)
    e50a:	f7ff ff91 	bl	e430 <print_formatted>
    e50e:	4405      	add	r5, r0
	if (source) {
    e510:	f1ba 0f00 	cmp.w	sl, #0
    e514:	d005      	beq.n	e522 <log_output_process+0xb2>
		total += print_formatted(output,
    e516:	4652      	mov	r2, sl
    e518:	4620      	mov	r0, r4
    e51a:	4979      	ldr	r1, [pc, #484]	; (e700 <log_output_process+0x290>)
    e51c:	f7ff ff88 	bl	e430 <print_formatted>
    e520:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    e522:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    e524:	2f00      	cmp	r7, #0
    e526:	d149      	bne.n	e5bc <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    e528:	9b04      	ldr	r3, [sp, #16]
    e52a:	2b00      	cmp	r3, #0
    e52c:	d160      	bne.n	e5f0 <log_output_process+0x180>
	if (color) {
    e52e:	07f3      	lsls	r3, r6, #31
    e530:	f100 80cf 	bmi.w	e6d2 <log_output_process+0x262>
	newline_print(output, flags);
    e534:	4631      	mov	r1, r6
    e536:	4620      	mov	r0, r4
    e538:	f7ff ff8c 	bl	e454 <newline_print>
}
    e53c:	e0c3      	b.n	e6c6 <log_output_process+0x256>
	uint32_t length = 0U;
    e53e:	4680      	mov	r8, r0
    e540:	e7b8      	b.n	e4b4 <log_output_process+0x44>
	} else if (freq != 0U) {
    e542:	4b70      	ldr	r3, [pc, #448]	; (e704 <log_output_process+0x294>)
    e544:	6818      	ldr	r0, [r3, #0]
    e546:	2800      	cmp	r0, #0
    e548:	d0bf      	beq.n	e4ca <log_output_process+0x5a>
		timestamp /= timestamp_div;
    e54a:	4b6f      	ldr	r3, [pc, #444]	; (e708 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    e54c:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    e550:	681b      	ldr	r3, [r3, #0]
    e552:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    e556:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    e55a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    e55e:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    e562:	fb09 f505 	mul.w	r5, r9, r5
    e566:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e56a:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    e56e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    e572:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e576:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    e57a:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e57e:	fb09 f505 	mul.w	r5, r9, r5
    e582:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    e586:	fb0c 1113 	mls	r1, ip, r3, r1
    e58a:	4620      	mov	r0, r4
    e58c:	9100      	str	r1, [sp, #0]
    e58e:	e9cd e501 	strd	lr, r5, [sp, #4]
    e592:	495e      	ldr	r1, [pc, #376]	; (e70c <log_output_process+0x29c>)
    e594:	f7ff ff4c 	bl	e430 <print_formatted>
    e598:	e797      	b.n	e4ca <log_output_process+0x5a>
	int total = 0;
    e59a:	f006 0508 	and.w	r5, r6, #8
    e59e:	e7af      	b.n	e500 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e5a0:	f1ba 0f01 	cmp.w	sl, #1
    e5a4:	d106      	bne.n	e5b4 <log_output_process+0x144>
	if (package) {
    e5a6:	b9ef      	cbnz	r7, e5e4 <log_output_process+0x174>
	if (data_len) {
    e5a8:	9b04      	ldr	r3, [sp, #16]
    e5aa:	2b00      	cmp	r3, #0
    e5ac:	f000 808b 	beq.w	e6c6 <log_output_process+0x256>
		prefix_offset = 0;
    e5b0:	2500      	movs	r5, #0
    e5b2:	e01d      	b.n	e5f0 <log_output_process+0x180>
	if (package) {
    e5b4:	2f00      	cmp	r7, #0
    e5b6:	d0f7      	beq.n	e5a8 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e5b8:	4855      	ldr	r0, [pc, #340]	; (e710 <log_output_process+0x2a0>)
    e5ba:	e014      	b.n	e5e6 <log_output_process+0x176>
		cb = out_func;
    e5bc:	4855      	ldr	r0, [pc, #340]	; (e714 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    e5be:	463b      	mov	r3, r7
    e5c0:	4622      	mov	r2, r4
    e5c2:	4955      	ldr	r1, [pc, #340]	; (e718 <log_output_process+0x2a8>)
    e5c4:	f016 f9a3 	bl	2490e <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    e5c8:	2800      	cmp	r0, #0
    e5ca:	da0e      	bge.n	e5ea <log_output_process+0x17a>
    e5cc:	4953      	ldr	r1, [pc, #332]	; (e71c <log_output_process+0x2ac>)
    e5ce:	4854      	ldr	r0, [pc, #336]	; (e720 <log_output_process+0x2b0>)
    e5d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    e5d4:	4a53      	ldr	r2, [pc, #332]	; (e724 <log_output_process+0x2b4>)
    e5d6:	f016 fba2 	bl	24d1e <assert_print>
    e5da:	f44f 7100 	mov.w	r1, #512	; 0x200
    e5de:	4851      	ldr	r0, [pc, #324]	; (e724 <log_output_process+0x2b4>)
    e5e0:	f016 fb96 	bl	24d10 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e5e4:	484b      	ldr	r0, [pc, #300]	; (e714 <log_output_process+0x2a4>)
		prefix_offset = 0;
    e5e6:	465d      	mov	r5, fp
    e5e8:	e7e9      	b.n	e5be <log_output_process+0x14e>
	if (data_len) {
    e5ea:	9b04      	ldr	r3, [sp, #16]
    e5ec:	2b00      	cmp	r3, #0
    e5ee:	d066      	beq.n	e6be <log_output_process+0x24e>
		print_formatted(output, " ");
    e5f0:	f8df 8134 	ldr.w	r8, [pc, #308]	; e728 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    e5f4:	f8df 9134 	ldr.w	r9, [pc, #308]	; e72c <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e5f8:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    e5fa:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e5fc:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    e5fe:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e600:	bf28      	it	cs
    e602:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    e604:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    e608:	f7ff ff24 	bl	e454 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    e60c:	4555      	cmp	r5, sl
    e60e:	dc43      	bgt.n	e698 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    e610:	9b05      	ldr	r3, [sp, #20]
    e612:	4649      	mov	r1, r9
    e614:	4620      	mov	r0, r4
    e616:	781a      	ldrb	r2, [r3, #0]
    e618:	f7ff ff0a 	bl	e430 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e61c:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    e620:	f01a 0f07 	tst.w	sl, #7
    e624:	d103      	bne.n	e62e <log_output_process+0x1be>
			print_formatted(output, " ");
    e626:	4641      	mov	r1, r8
    e628:	4620      	mov	r0, r4
    e62a:	f7ff ff01 	bl	e430 <print_formatted>
		if (i < length) {
    e62e:	4557      	cmp	r7, sl
    e630:	d939      	bls.n	e6a6 <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    e632:	9b05      	ldr	r3, [sp, #20]
    e634:	4649      	mov	r1, r9
    e636:	4620      	mov	r0, r4
    e638:	f813 200a 	ldrb.w	r2, [r3, sl]
    e63c:	f7ff fef8 	bl	e430 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e640:	f10a 0a01 	add.w	sl, sl, #1
    e644:	f1ba 0f10 	cmp.w	sl, #16
    e648:	d1ea      	bne.n	e620 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e64a:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    e64e:	4620      	mov	r0, r4
    e650:	4937      	ldr	r1, [pc, #220]	; (e730 <log_output_process+0x2c0>)
    e652:	f7ff feed 	bl	e430 <print_formatted>
		if (i < length) {
    e656:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    e658:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    e65a:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    e65c:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    e65e:	4b35      	ldr	r3, [pc, #212]	; (e734 <log_output_process+0x2c4>)
    e660:	5c99      	ldrb	r1, [r3, r2]
    e662:	f011 0f97 	tst.w	r1, #151	; 0x97
    e666:	bf08      	it	eq
    e668:	222e      	moveq	r2, #46	; 0x2e
    e66a:	4933      	ldr	r1, [pc, #204]	; (e738 <log_output_process+0x2c8>)
    e66c:	f7ff fee0 	bl	e430 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e670:	f10a 0a01 	add.w	sl, sl, #1
    e674:	f1ba 0f10 	cmp.w	sl, #16
    e678:	d01a      	beq.n	e6b0 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    e67a:	f01a 0f07 	tst.w	sl, #7
    e67e:	d103      	bne.n	e688 <log_output_process+0x218>
			print_formatted(output, " ");
    e680:	4641      	mov	r1, r8
    e682:	4620      	mov	r0, r4
    e684:	f7ff fed4 	bl	e430 <print_formatted>
		if (i < length) {
    e688:	4557      	cmp	r7, sl
    e68a:	4652      	mov	r2, sl
    e68c:	d8e4      	bhi.n	e658 <log_output_process+0x1e8>
			print_formatted(output, " ");
    e68e:	4641      	mov	r1, r8
    e690:	4620      	mov	r0, r4
    e692:	f7ff fecd 	bl	e430 <print_formatted>
    e696:	e7eb      	b.n	e670 <log_output_process+0x200>
		print_formatted(output, " ");
    e698:	4641      	mov	r1, r8
    e69a:	4620      	mov	r0, r4
    e69c:	f7ff fec8 	bl	e430 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    e6a0:	f10a 0a01 	add.w	sl, sl, #1
    e6a4:	e7b2      	b.n	e60c <log_output_process+0x19c>
			print_formatted(output, "   ");
    e6a6:	4620      	mov	r0, r4
    e6a8:	4924      	ldr	r1, [pc, #144]	; (e73c <log_output_process+0x2cc>)
    e6aa:	f7ff fec1 	bl	e430 <print_formatted>
    e6ae:	e7c7      	b.n	e640 <log_output_process+0x1d0>
		data += length;
    e6b0:	9b05      	ldr	r3, [sp, #20]
    e6b2:	443b      	add	r3, r7
    e6b4:	9305      	str	r3, [sp, #20]
	} while (len);
    e6b6:	9b04      	ldr	r3, [sp, #16]
    e6b8:	1bdb      	subs	r3, r3, r7
    e6ba:	9304      	str	r3, [sp, #16]
    e6bc:	d19c      	bne.n	e5f8 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    e6be:	f1bb 0f00 	cmp.w	fp, #0
    e6c2:	f47f af34 	bne.w	e52e <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    e6c6:	4620      	mov	r0, r4
}
    e6c8:	b009      	add	sp, #36	; 0x24
    e6ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    e6ce:	f016 bbec 	b.w	24eaa <log_output_flush>
		print_formatted(output, "%s", log_color);
    e6d2:	4620      	mov	r0, r4
    e6d4:	4a05      	ldr	r2, [pc, #20]	; (e6ec <log_output_process+0x27c>)
    e6d6:	4906      	ldr	r1, [pc, #24]	; (e6f0 <log_output_process+0x280>)
    e6d8:	f7ff feaa 	bl	e430 <print_formatted>
}
    e6dc:	e72a      	b.n	e534 <log_output_process+0xc4>
    e6de:	bf00      	nop
    e6e0:	0002c8cb 	.word	0x0002c8cb
    e6e4:	0002c8cf 	.word	0x0002c8cf
    e6e8:	0002ad24 	.word	0x0002ad24
    e6ec:	0002c8c6 	.word	0x0002c8c6
    e6f0:	0002b8b6 	.word	0x0002b8b6
    e6f4:	0002ad38 	.word	0x0002ad38
    e6f8:	0002c8f4 	.word	0x0002c8f4
    e6fc:	0002c8fa 	.word	0x0002c8fa
    e700:	0002c8fe 	.word	0x0002c8fe
    e704:	20020f6c 	.word	0x20020f6c
    e708:	20020f68 	.word	0x20020f68
    e70c:	0002c8d8 	.word	0x0002c8d8
    e710:	00024e67 	.word	0x00024e67
    e714:	00024e4b 	.word	0x00024e4b
    e718:	00024e9d 	.word	0x00024e9d
    e71c:	0002c932 	.word	0x0002c932
    e720:	0002b6e9 	.word	0x0002b6e9
    e724:	0002c903 	.word	0x0002c903
    e728:	00030481 	.word	0x00030481
    e72c:	0002c93b 	.word	0x0002c93b
    e730:	0002c941 	.word	0x0002c941
    e734:	00030fc1 	.word	0x00030fc1
    e738:	0002c943 	.word	0x0002c943
    e73c:	0003047f 	.word	0x0003047f

0000e740 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    e744:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    e746:	684b      	ldr	r3, [r1, #4]
    e748:	4605      	mov	r5, r0
    e74a:	460c      	mov	r4, r1
    e74c:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    e74e:	688e      	ldr	r6, [r1, #8]
    e750:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    e752:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    e756:	b15b      	cbz	r3, e770 <log_output_msg_process+0x30>
    e758:	4a13      	ldr	r2, [pc, #76]	; (e7a8 <log_output_msg_process+0x68>)
    e75a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    e75c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e760:	2900      	cmp	r1, #0
    e762:	db1f      	blt.n	e7a4 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    e764:	7820      	ldrb	r0, [r4, #0]
    e766:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e76a:	f7ff fdc9 	bl	e300 <log_source_name_get>
    e76e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    e770:	4621      	mov	r1, r4
    e772:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    e776:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    e778:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    e77c:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    e77e:	eb01 0402 	add.w	r4, r1, r2
    e782:	bf08      	it	eq
    e784:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    e786:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    e78a:	e9cd 0803 	strd	r0, r8, [sp, #12]
    e78e:	e9cd 1401 	strd	r1, r4, [sp, #4]
    e792:	2200      	movs	r2, #0
    e794:	4631      	mov	r1, r6
    e796:	4628      	mov	r0, r5
    e798:	9700      	str	r7, [sp, #0]
    e79a:	f7ff fe69 	bl	e470 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    e79e:	b006      	add	sp, #24
    e7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e7a4:	2300      	movs	r3, #0
    e7a6:	e7e3      	b.n	e770 <log_output_msg_process+0x30>
    e7a8:	0002a6e0 	.word	0x0002a6e0

0000e7ac <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    e7ac:	2100      	movs	r1, #0
    e7ae:	2301      	movs	r3, #1
    e7b0:	4a06      	ldr	r2, [pc, #24]	; (e7cc <log_output_timestamp_freq_set+0x20>)
    e7b2:	4290      	cmp	r0, r2
    e7b4:	d806      	bhi.n	e7c4 <log_output_timestamp_freq_set+0x18>
    e7b6:	4a06      	ldr	r2, [pc, #24]	; (e7d0 <log_output_timestamp_freq_set+0x24>)
    e7b8:	b901      	cbnz	r1, e7bc <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    e7ba:	2301      	movs	r3, #1
    e7bc:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    e7be:	4b05      	ldr	r3, [pc, #20]	; (e7d4 <log_output_timestamp_freq_set+0x28>)
    e7c0:	6018      	str	r0, [r3, #0]
}
    e7c2:	4770      	bx	lr
		timestamp_div *= 2U;
    e7c4:	2101      	movs	r1, #1
		frequency /= 2U;
    e7c6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    e7c8:	005b      	lsls	r3, r3, #1
    e7ca:	e7f2      	b.n	e7b2 <log_output_timestamp_freq_set+0x6>
    e7cc:	000f4240 	.word	0x000f4240
    e7d0:	20020f68 	.word	0x20020f68
    e7d4:	20020f6c 	.word	0x20020f6c

0000e7d8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    e7d8:	2201      	movs	r2, #1
    e7da:	4b01      	ldr	r3, [pc, #4]	; (e7e0 <log_backend_rtt_init+0x8>)
    e7dc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    e7de:	4770      	bx	lr
    e7e0:	20021d7f 	.word	0x20021d7f

0000e7e4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    e7e4:	4b01      	ldr	r3, [pc, #4]	; (e7ec <format_set+0x8>)
	return 0;
}
    e7e6:	2000      	movs	r0, #0
	log_format_current = log_type;
    e7e8:	6019      	str	r1, [r3, #0]
}
    e7ea:	4770      	bx	lr
    e7ec:	20020f84 	.word	0x20020f84

0000e7f0 <panic>:
	panic_mode = true;
    e7f0:	2201      	movs	r2, #1
    e7f2:	4b02      	ldr	r3, [pc, #8]	; (e7fc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    e7f4:	4802      	ldr	r0, [pc, #8]	; (e800 <panic+0x10>)
    e7f6:	701a      	strb	r2, [r3, #0]
    e7f8:	f016 bb57 	b.w	24eaa <log_output_flush>
    e7fc:	20021d80 	.word	0x20021d80
    e800:	0002ad68 	.word	0x0002ad68

0000e804 <process>:
{
    e804:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e806:	4b06      	ldr	r3, [pc, #24]	; (e820 <process+0x1c>)
{
    e808:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e80a:	6818      	ldr	r0, [r3, #0]
    e80c:	f7ff fcd4 	bl	e1b8 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    e810:	4621      	mov	r1, r4
}
    e812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e816:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    e818:	220f      	movs	r2, #15
    e81a:	4802      	ldr	r0, [pc, #8]	; (e824 <process+0x20>)
    e81c:	4718      	bx	r3
    e81e:	bf00      	nop
    e820:	20020f84 	.word	0x20020f84
    e824:	0002ad68 	.word	0x0002ad68

0000e828 <data_out_block_mode>:
{
    e828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e82a:	4607      	mov	r7, r0
    e82c:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    e82e:	2404      	movs	r4, #4
    e830:	4d17      	ldr	r5, [pc, #92]	; (e890 <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    e832:	4632      	mov	r2, r6
    e834:	4639      	mov	r1, r7
    e836:	2000      	movs	r0, #0
    e838:	f010 fb58 	bl	1eeec <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    e83c:	b1c8      	cbz	r0, e872 <data_out_block_mode+0x4a>
	host_present = true;
    e83e:	2301      	movs	r3, #1
    e840:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    e842:	4b14      	ldr	r3, [pc, #80]	; (e894 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    e844:	781b      	ldrb	r3, [r3, #0]
    e846:	b92b      	cbnz	r3, e854 <data_out_block_mode+0x2c>
}
    e848:	4630      	mov	r0, r6
    e84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    e84c:	b95c      	cbnz	r4, e866 <data_out_block_mode+0x3e>
		host_present = false;
    e84e:	702c      	strb	r4, [r5, #0]
    e850:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    e854:	2000      	movs	r0, #0
    e856:	f010 fb91 	bl	1ef7c <SEGGER_RTT_HasDataUp>
    e85a:	2800      	cmp	r0, #0
    e85c:	d0f4      	beq.n	e848 <data_out_block_mode+0x20>
    e85e:	782b      	ldrb	r3, [r5, #0]
    e860:	2b00      	cmp	r3, #0
    e862:	d1f3      	bne.n	e84c <data_out_block_mode+0x24>
    e864:	e7f0      	b.n	e848 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    e866:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    e868:	f241 3088 	movw	r0, #5000	; 0x1388
    e86c:	f01a feb4 	bl	295d8 <z_impl_k_busy_wait>
}
    e870:	e7f0      	b.n	e854 <data_out_block_mode+0x2c>
		} else if (host_present) {
    e872:	782b      	ldrb	r3, [r5, #0]
    e874:	b113      	cbz	r3, e87c <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    e876:	3c01      	subs	r4, #1
    e878:	d104      	bne.n	e884 <data_out_block_mode+0x5c>
		host_present = false;
    e87a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    e87c:	782b      	ldrb	r3, [r5, #0]
    e87e:	2b00      	cmp	r3, #0
    e880:	d1d7      	bne.n	e832 <data_out_block_mode+0xa>
    e882:	e7e1      	b.n	e848 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    e884:	f241 3088 	movw	r0, #5000	; 0x1388
    e888:	f01a fea6 	bl	295d8 <z_impl_k_busy_wait>
    e88c:	e7f6      	b.n	e87c <data_out_block_mode+0x54>
    e88e:	bf00      	nop
    e890:	20021d7f 	.word	0x20021d7f
    e894:	20021d80 	.word	0x20021d80

0000e898 <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    e898:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    e89a:	8983      	ldrh	r3, [r0, #12]
    e89c:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    e89e:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    e8a0:	0c09      	lsrs	r1, r1, #16
    e8a2:	fb03 5501 	mla	r5, r3, r1, r5
{
    e8a6:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    e8a8:	e9cd 5304 	strd	r5, r3, [sp, #16]
    e8ac:	4b11      	ldr	r3, [pc, #68]	; (e8f4 <nvs_flash_erase_sector+0x5c>)
    e8ae:	2208      	movs	r2, #8
    e8b0:	9303      	str	r3, [sp, #12]
    e8b2:	4b11      	ldr	r3, [pc, #68]	; (e8f8 <nvs_flash_erase_sector+0x60>)
{
    e8b4:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    e8b6:	9302      	str	r3, [sp, #8]
    e8b8:	2300      	movs	r3, #0
    e8ba:	4910      	ldr	r1, [pc, #64]	; (e8fc <nvs_flash_erase_sector+0x64>)
    e8bc:	4618      	mov	r0, r3
    e8be:	e9cd 3200 	strd	r3, r2, [sp]
    e8c2:	2204      	movs	r2, #4
    e8c4:	f016 fb71 	bl	24faa <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    e8c8:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    e8ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e8cc:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    e8ce:	6883      	ldr	r3, [r0, #8]
    e8d0:	4629      	mov	r1, r5
    e8d2:	689b      	ldr	r3, [r3, #8]
    e8d4:	4798      	blx	r3

	if (rc) {
    e8d6:	b950      	cbnz	r0, e8ee <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    e8d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e8da:	4631      	mov	r1, r6
    e8dc:	4620      	mov	r0, r4
    e8de:	89a3      	ldrh	r3, [r4, #12]
    e8e0:	7912      	ldrb	r2, [r2, #4]
    e8e2:	f016 fb3d 	bl	24f60 <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    e8e6:	2800      	cmp	r0, #0
    e8e8:	bf18      	it	ne
    e8ea:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    e8ee:	b006      	add	sp, #24
    e8f0:	bd70      	pop	{r4, r5, r6, pc}
    e8f2:	bf00      	nop
    e8f4:	0002cb39 	.word	0x0002cb39
    e8f8:	0002c976 	.word	0x0002c976
    e8fc:	0002a7b8 	.word	0x0002a7b8

0000e900 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    e900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    e904:	884b      	ldrh	r3, [r1, #2]
{
    e906:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    e908:	9304      	str	r3, [sp, #16]
    e90a:	4b1d      	ldr	r3, [pc, #116]	; (e980 <nvs_recover_last_ate+0x80>)
    e90c:	2408      	movs	r4, #8
    e90e:	9303      	str	r3, [sp, #12]
    e910:	4b1c      	ldr	r3, [pc, #112]	; (e984 <nvs_recover_last_ate+0x84>)
{
    e912:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    e914:	9302      	str	r3, [sp, #8]
    e916:	2300      	movs	r3, #0
{
    e918:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    e91a:	4618      	mov	r0, r3
    e91c:	e9cd 3400 	strd	r3, r4, [sp]
    e920:	4919      	ldr	r1, [pc, #100]	; (e988 <nvs_recover_last_ate+0x88>)
    e922:	2204      	movs	r2, #4
    e924:	f016 fb41 	bl	24faa <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e928:	4621      	mov	r1, r4
    e92a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e92c:	f016 fb4d 	bl	24fca <nvs_al_size.isra.0>
    e930:	4680      	mov	r8, r0

	*addr -= ate_size;
    e932:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    e934:	f8df 9054 	ldr.w	r9, [pc, #84]	; e98c <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    e938:	1a24      	subs	r4, r4, r0
    e93a:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    e93c:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    e940:	42b4      	cmp	r4, r6
    e942:	d803      	bhi.n	e94c <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    e944:	2000      	movs	r0, #0
}
    e946:	b009      	add	sp, #36	; 0x24
    e948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e94c:	2308      	movs	r3, #8
    e94e:	4621      	mov	r1, r4
    e950:	4638      	mov	r0, r7
    e952:	aa06      	add	r2, sp, #24
    e954:	f016 fab6 	bl	24ec4 <nvs_flash_rd>
		if (rc) {
    e958:	2800      	cmp	r0, #0
    e95a:	d1f4      	bne.n	e946 <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    e95c:	4638      	mov	r0, r7
    e95e:	a906      	add	r1, sp, #24
    e960:	f016 fb3d 	bl	24fde <nvs_ate_valid>
    e964:	b140      	cbz	r0, e978 <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    e966:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    e96a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    e96e:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    e972:	4413      	add	r3, r2
    e974:	441e      	add	r6, r3
			*addr = ate_end_addr;
    e976:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    e978:	eba4 0408 	sub.w	r4, r4, r8
    e97c:	e7e0      	b.n	e940 <nvs_recover_last_ate+0x40>
    e97e:	bf00      	nop
    e980:	0002cb24 	.word	0x0002cb24
    e984:	0002c997 	.word	0x0002c997
    e988:	0002a7b8 	.word	0x0002a7b8
    e98c:	ffff0000 	.word	0xffff0000

0000e990 <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    e990:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    e992:	8883      	ldrh	r3, [r0, #4]
{
    e994:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    e996:	9304      	str	r3, [sp, #16]
    e998:	4b10      	ldr	r3, [pc, #64]	; (e9dc <nvs_add_gc_done_ate+0x4c>)
    e99a:	2500      	movs	r5, #0
    e99c:	9303      	str	r3, [sp, #12]
    e99e:	4b10      	ldr	r3, [pc, #64]	; (e9e0 <nvs_add_gc_done_ate+0x50>)
{
    e9a0:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    e9a2:	9302      	str	r3, [sp, #8]
    e9a4:	2308      	movs	r3, #8
    e9a6:	2204      	movs	r2, #4
    e9a8:	4628      	mov	r0, r5
    e9aa:	e9cd 5300 	strd	r5, r3, [sp]
    e9ae:	490d      	ldr	r1, [pc, #52]	; (e9e4 <nvs_add_gc_done_ate+0x54>)
    e9b0:	462b      	mov	r3, r5
    e9b2:	f016 fafa 	bl	24faa <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    e9b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e9ba:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e9be:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    e9c0:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e9c2:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    e9c6:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    e9ca:	f016 fac0 	bl	24f4e <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    e9ce:	4620      	mov	r0, r4
    e9d0:	a906      	add	r1, sp, #24
    e9d2:	f016 fbc0 	bl	25156 <nvs_flash_ate_wrt>
}
    e9d6:	b009      	add	sp, #36	; 0x24
    e9d8:	bd30      	pop	{r4, r5, pc}
    e9da:	bf00      	nop
    e9dc:	0002cb09 	.word	0x0002cb09
    e9e0:	0002c9be 	.word	0x0002c9be
    e9e4:	0002a7b8 	.word	0x0002a7b8

0000e9e8 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e9ec:	2108      	movs	r1, #8
{
    e9ee:	b09b      	sub	sp, #108	; 0x6c
    e9f0:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e9f2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    e9f4:	f016 fae9 	bl	24fca <nvs_al_size.isra.0>
    e9f8:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    e9fa:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    e9fc:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    e9fe:	0c1b      	lsrs	r3, r3, #16
    ea00:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    ea02:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    ea04:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    ea06:	f016 fa6b 	bl	24ee0 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    ea0a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    ea0e:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ea10:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    ea12:	445e      	add	r6, fp
    ea14:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ea16:	2308      	movs	r3, #8
    ea18:	4631      	mov	r1, r6
    ea1a:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    ea1c:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ea1e:	f016 fa51 	bl	24ec4 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    ea22:	1e02      	subs	r2, r0, #0
    ea24:	f2c0 80bb 	blt.w	eb9e <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    ea28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ea2a:	aa0c      	add	r2, sp, #48	; 0x30
    ea2c:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    ea2e:	2300      	movs	r3, #0
		if (data8[i] != value) {
    ea30:	f812 0b01 	ldrb.w	r0, [r2], #1
    ea34:	4281      	cmp	r1, r0
    ea36:	f040 80a1 	bne.w	eb7c <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    ea3a:	3301      	adds	r3, #1
    ea3c:	2b08      	cmp	r3, #8
    ea3e:	d1f7      	bne.n	ea30 <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    ea40:	68a3      	ldr	r3, [r4, #8]
    ea42:	6862      	ldr	r2, [r4, #4]
    ea44:	442b      	add	r3, r5
    ea46:	429a      	cmp	r2, r3
    ea48:	f080 8090 	bcs.w	eb6c <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    ea4c:	4659      	mov	r1, fp
    ea4e:	4620      	mov	r0, r4
    ea50:	f7ff ff22 	bl	e898 <nvs_flash_erase_sector>
    ea54:	4602      	mov	r2, r0
	if (rc) {
    ea56:	e0a2      	b.n	eb9e <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    ea58:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    ea5c:	0c36      	lsrs	r6, r6, #16
    ea5e:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    ea60:	441e      	add	r6, r3
    ea62:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    ea64:	aa0e      	add	r2, sp, #56	; 0x38
    ea66:	4620      	mov	r0, r4
    ea68:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    ea6a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    ea6e:	f016 faee 	bl	2504e <nvs_prev_ate>
		if (rc) {
    ea72:	4602      	mov	r2, r0
    ea74:	2800      	cmp	r0, #0
    ea76:	f040 8092 	bne.w	eb9e <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    ea7a:	4620      	mov	r0, r4
    ea7c:	a90e      	add	r1, sp, #56	; 0x38
    ea7e:	f016 faae 	bl	24fde <nvs_ate_valid>
    ea82:	b918      	cbnz	r0, ea8c <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    ea84:	9b07      	ldr	r3, [sp, #28]
    ea86:	4553      	cmp	r3, sl
    ea88:	d1ec      	bne.n	ea64 <nvs_gc+0x7c>
    ea8a:	e7d9      	b.n	ea40 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    ea8c:	6863      	ldr	r3, [r4, #4]
    ea8e:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    ea90:	aa10      	add	r2, sp, #64	; 0x40
    ea92:	4620      	mov	r0, r4
    ea94:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    ea96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    ea98:	f016 fad9 	bl	2504e <nvs_prev_ate>
			if (rc) {
    ea9c:	4602      	mov	r2, r0
    ea9e:	2800      	cmp	r0, #0
    eaa0:	d17d      	bne.n	eb9e <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    eaa2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    eaa6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    eaaa:	429a      	cmp	r2, r3
    eaac:	d038      	beq.n	eb20 <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    eaae:	6862      	ldr	r2, [r4, #4]
    eab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eab2:	429a      	cmp	r2, r3
    eab4:	d1ec      	bne.n	ea90 <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    eab6:	45b2      	cmp	sl, r6
    eab8:	d1e4      	bne.n	ea84 <nvs_gc+0x9c>
    eaba:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    eabe:	2b00      	cmp	r3, #0
    eac0:	d0e0      	beq.n	ea84 <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    eac2:	9305      	str	r3, [sp, #20]
    eac4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    eac8:	2208      	movs	r2, #8
    eaca:	9304      	str	r3, [sp, #16]
    eacc:	4b36      	ldr	r3, [pc, #216]	; (eba8 <nvs_gc+0x1c0>)
    eace:	4937      	ldr	r1, [pc, #220]	; (ebac <nvs_gc+0x1c4>)
    ead0:	9303      	str	r3, [sp, #12]
    ead2:	4b37      	ldr	r3, [pc, #220]	; (ebb0 <nvs_gc+0x1c8>)
    ead4:	9302      	str	r3, [sp, #8]
    ead6:	2300      	movs	r3, #0
    ead8:	4618      	mov	r0, r3
    eada:	e9cd 3200 	strd	r3, r2, [sp]
    eade:	2204      	movs	r2, #4
    eae0:	f016 fa63 	bl	24faa <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    eae4:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    eae8:	ea4f 431a 	mov.w	r3, sl, lsr #16
    eaec:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    eaee:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    eaf0:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    eaf2:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    eaf4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    eaf8:	f016 fa29 	bl	24f4e <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    eafc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    eafe:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    eb02:	681e      	ldr	r6, [r3, #0]
    eb04:	4276      	negs	r6, r6
	block_size =
    eb06:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    eb0a:	f1b9 0f00 	cmp.w	r9, #0
    eb0e:	d10e      	bne.n	eb2e <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    eb10:	4620      	mov	r0, r4
    eb12:	a90e      	add	r1, sp, #56	; 0x38
    eb14:	f016 fb1f 	bl	25156 <nvs_flash_ate_wrt>
			if (rc) {
    eb18:	4602      	mov	r2, r0
    eb1a:	2800      	cmp	r0, #0
    eb1c:	d0b2      	beq.n	ea84 <nvs_gc+0x9c>
    eb1e:	e03e      	b.n	eb9e <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    eb20:	4620      	mov	r0, r4
    eb22:	a910      	add	r1, sp, #64	; 0x40
    eb24:	f016 fa5b 	bl	24fde <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    eb28:	2800      	cmp	r0, #0
    eb2a:	d0c0      	beq.n	eaae <nvs_gc+0xc6>
    eb2c:	e7c3      	b.n	eab6 <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    eb2e:	454e      	cmp	r6, r9
    eb30:	46b0      	mov	r8, r6
    eb32:	bf28      	it	cs
    eb34:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    eb36:	aa12      	add	r2, sp, #72	; 0x48
    eb38:	4643      	mov	r3, r8
    eb3a:	4639      	mov	r1, r7
    eb3c:	4620      	mov	r0, r4
    eb3e:	f016 f9c1 	bl	24ec4 <nvs_flash_rd>
		if (rc) {
    eb42:	4602      	mov	r2, r0
    eb44:	bb58      	cbnz	r0, eb9e <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    eb46:	4643      	mov	r3, r8
    eb48:	68a1      	ldr	r1, [r4, #8]
    eb4a:	aa12      	add	r2, sp, #72	; 0x48
    eb4c:	4620      	mov	r0, r4
    eb4e:	f016 fac8 	bl	250e2 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    eb52:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    eb54:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    eb56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    eb58:	f016 fa37 	bl	24fca <nvs_al_size.isra.0>
    eb5c:	68a3      	ldr	r3, [r4, #8]
    eb5e:	4403      	add	r3, r0
    eb60:	60a3      	str	r3, [r4, #8]
		if (rc) {
    eb62:	b9e2      	cbnz	r2, eb9e <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    eb64:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    eb68:	4447      	add	r7, r8
    eb6a:	e7ce      	b.n	eb0a <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    eb6c:	4620      	mov	r0, r4
    eb6e:	f7ff ff0f 	bl	e990 <nvs_add_gc_done_ate>
		if (rc) {
    eb72:	4602      	mov	r2, r0
    eb74:	2800      	cmp	r0, #0
    eb76:	f43f af69 	beq.w	ea4c <nvs_gc+0x64>
    eb7a:	e010      	b.n	eb9e <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    eb7c:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    eb7e:	4620      	mov	r0, r4
    eb80:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    eb82:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    eb84:	f016 fa45 	bl	25012 <nvs_close_ate_valid>
    eb88:	2800      	cmp	r0, #0
    eb8a:	f47f af65 	bne.w	ea58 <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    eb8e:	4620      	mov	r0, r4
    eb90:	a90a      	add	r1, sp, #40	; 0x28
    eb92:	f7ff feb5 	bl	e900 <nvs_recover_last_ate>
		if (rc) {
    eb96:	4602      	mov	r2, r0
    eb98:	2800      	cmp	r0, #0
    eb9a:	f43f af63 	beq.w	ea64 <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    eb9e:	4610      	mov	r0, r2
    eba0:	b01b      	add	sp, #108	; 0x6c
    eba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eba6:	bf00      	nop
    eba8:	0002cb1d 	.word	0x0002cb1d
    ebac:	0002a7b8 	.word	0x0002a7b8
    ebb0:	0002c9db 	.word	0x0002c9db

0000ebb4 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    ebb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ebb8:	4604      	mov	r4, r0
    ebba:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    ebbc:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    ebc0:	4638      	mov	r0, r7
    ebc2:	f01a fc29 	bl	29418 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    ebc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    ebc8:	6883      	ldr	r3, [r0, #8]
    ebca:	68db      	ldr	r3, [r3, #12]
    ebcc:	4798      	blx	r3
    ebce:	4603      	mov	r3, r0
    ebd0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    ebd2:	b930      	cbnz	r0, ebe2 <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    ebd4:	4a90      	ldr	r2, [pc, #576]	; (ee18 <nvs_mount+0x264>)
    ebd6:	9000      	str	r0, [sp, #0]
    ebd8:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    ebdc:	2201      	movs	r2, #1
    ebde:	498f      	ldr	r1, [pc, #572]	; (ee1c <nvs_mount+0x268>)
    ebe0:	e00f      	b.n	ec02 <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    ebe2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    ebe4:	6883      	ldr	r3, [r0, #8]
    ebe6:	68db      	ldr	r3, [r3, #12]
    ebe8:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    ebea:	6803      	ldr	r3, [r0, #0]
    ebec:	3b01      	subs	r3, #1
    ebee:	2b1f      	cmp	r3, #31
    ebf0:	d90f      	bls.n	ec12 <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    ebf2:	4b8b      	ldr	r3, [pc, #556]	; (ee20 <nvs_mount+0x26c>)
    ebf4:	9302      	str	r3, [sp, #8]
    ebf6:	2300      	movs	r3, #0
    ebf8:	2201      	movs	r2, #1
    ebfa:	4618      	mov	r0, r3
    ebfc:	e9cd 3300 	strd	r3, r3, [sp]
    ec00:	4986      	ldr	r1, [pc, #536]	; (ee1c <nvs_mount+0x268>)
    ec02:	f016 f9d2 	bl	24faa <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    ec06:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    ec0a:	4628      	mov	r0, r5
    ec0c:	b00e      	add	sp, #56	; 0x38
    ec0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    ec12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ec14:	6821      	ldr	r1, [r4, #0]
    ec16:	aa0b      	add	r2, sp, #44	; 0x2c
    ec18:	f019 fa43 	bl	280a2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    ec1c:	b108      	cbz	r0, ec22 <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    ec1e:	4b81      	ldr	r3, [pc, #516]	; (ee24 <nvs_mount+0x270>)
    ec20:	e7e8      	b.n	ebf4 <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    ec22:	89a5      	ldrh	r5, [r4, #12]
    ec24:	b12d      	cbz	r5, ec32 <nvs_mount+0x7e>
    ec26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ec28:	fbb5 f2f3 	udiv	r2, r5, r3
    ec2c:	fb03 5512 	mls	r5, r3, r2, r5
    ec30:	b10d      	cbz	r5, ec36 <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    ec32:	4b7d      	ldr	r3, [pc, #500]	; (ee28 <nvs_mount+0x274>)
    ec34:	e7de      	b.n	ebf4 <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    ec36:	89e3      	ldrh	r3, [r4, #14]
    ec38:	2b01      	cmp	r3, #1
    ec3a:	d805      	bhi.n	ec48 <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    ec3c:	4b7b      	ldr	r3, [pc, #492]	; (ee2c <nvs_mount+0x278>)
    ec3e:	9500      	str	r5, [sp, #0]
    ec40:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ec44:	462b      	mov	r3, r5
    ec46:	e7c9      	b.n	ebdc <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ec48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    ec4a:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ec4c:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    ec50:	f04f 33ff 	mov.w	r3, #4294967295
    ec54:	f04f 32ff 	mov.w	r2, #4294967295
    ec58:	4638      	mov	r0, r7
    ec5a:	f010 fe89 	bl	1f970 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ec5e:	2108      	movs	r1, #8
    ec60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec62:	f016 f9b2 	bl	24fca <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    ec66:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ec68:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    ec6a:	89e3      	ldrh	r3, [r4, #14]
    ec6c:	fa1f fa85 	uxth.w	sl, r5
    ec70:	4553      	cmp	r3, sl
    ec72:	d808      	bhi.n	ec86 <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    ec74:	89e3      	ldrh	r3, [r4, #14]
    ec76:	4543      	cmp	r3, r8
    ec78:	d123      	bne.n	ecc2 <nvs_mount+0x10e>
	return z_impl_k_mutex_unlock(mutex);
    ec7a:	4638      	mov	r0, r7
    ec7c:	f010 ff48 	bl	1fb10 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    ec80:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    ec84:	e7c1      	b.n	ec0a <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    ec86:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    ec88:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    ec8a:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    ec8c:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ec90:	464a      	mov	r2, r9
    ec92:	2308      	movs	r3, #8
    ec94:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    ec96:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ec98:	f016 f962 	bl	24f60 <nvs_flash_cmp_const>
		if (rc) {
    ec9c:	b178      	cbz	r0, ecbe <nvs_mount+0x10a>
			nvs_sector_advance(fs, &addr);
    ec9e:	4620      	mov	r0, r4
    eca0:	a906      	add	r1, sp, #24
    eca2:	f016 f91d 	bl	24ee0 <nvs_sector_advance>
			closed_sectors++;
    eca6:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ecaa:	2308      	movs	r3, #8
    ecac:	464a      	mov	r2, r9
    ecae:	4620      	mov	r0, r4
    ecb0:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
    ecb2:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ecb6:	f016 f953 	bl	24f60 <nvs_flash_cmp_const>
			if (!rc) {
    ecba:	2800      	cmp	r0, #0
    ecbc:	d0da      	beq.n	ec74 <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    ecbe:	3501      	adds	r5, #1
    ecc0:	e7d3      	b.n	ec6a <nvs_mount+0xb6>
	if (i == fs->sector_count) {
    ecc2:	4553      	cmp	r3, sl
    ecc4:	d10b      	bne.n	ecde <nvs_mount+0x12a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    ecc6:	9906      	ldr	r1, [sp, #24]
    ecc8:	2308      	movs	r3, #8
    ecca:	464a      	mov	r2, r9
    eccc:	4620      	mov	r0, r4
    ecce:	1b89      	subs	r1, r1, r6
    ecd0:	f016 f946 	bl	24f60 <nvs_flash_cmp_const>
		if (!rc) {
    ecd4:	b918      	cbnz	r0, ecde <nvs_mount+0x12a>
			nvs_sector_advance(fs, &addr);
    ecd6:	4620      	mov	r0, r4
    ecd8:	a906      	add	r1, sp, #24
    ecda:	f016 f901 	bl	24ee0 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    ecde:	4620      	mov	r0, r4
    ece0:	a906      	add	r1, sp, #24
    ece2:	f7ff fe0d 	bl	e900 <nvs_recover_last_ate>
	if (rc) {
    ece6:	4605      	mov	r5, r0
    ece8:	b118      	cbz	r0, ecf2 <nvs_mount+0x13e>
    ecea:	4638      	mov	r0, r7
    ecec:	f010 ff10 	bl	1fb10 <z_impl_k_mutex_unlock>
	if (rc) {
    ecf0:	e78b      	b.n	ec0a <nvs_mount+0x56>
	fs->ate_wra = addr;
    ecf2:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
    ecf4:	ea4f 4813 	mov.w	r8, r3, lsr #16
    ecf8:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
    ecfc:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    ecfe:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    ed02:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    ed06:	4299      	cmp	r1, r3
    ed08:	d30f      	bcc.n	ed2a <nvs_mount+0x176>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ed0a:	2308      	movs	r3, #8
    ed0c:	4620      	mov	r0, r4
    ed0e:	aa07      	add	r2, sp, #28
    ed10:	f016 f8d8 	bl	24ec4 <nvs_flash_rd>
		if (rc) {
    ed14:	4605      	mov	r5, r0
    ed16:	2800      	cmp	r0, #0
    ed18:	d1e7      	bne.n	ecea <nvs_mount+0x136>
    ed1a:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
    ed1c:	f813 2b01 	ldrb.w	r2, [r3], #1
    ed20:	4591      	cmp	r9, r2
    ed22:	d143      	bne.n	edac <nvs_mount+0x1f8>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    ed24:	3501      	adds	r5, #1
    ed26:	2d08      	cmp	r5, #8
    ed28:	d1f8      	bne.n	ed1c <nvs_mount+0x168>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ed2a:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    ed2c:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ed2e:	0c1b      	lsrs	r3, r3, #16
    ed30:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    ed32:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
    ed34:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
    ed36:	f016 f8d3 	bl	24ee0 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    ed3a:	464a      	mov	r2, r9
    ed3c:	4620      	mov	r0, r4
    ed3e:	89a3      	ldrh	r3, [r4, #12]
    ed40:	9906      	ldr	r1, [sp, #24]
    ed42:	f016 f90d 	bl	24f60 <nvs_flash_cmp_const>
	if (rc < 0) {
    ed46:	1e05      	subs	r5, r0, #0
    ed48:	dbcf      	blt.n	ecea <nvs_mount+0x136>
		addr = fs->ate_wra + ate_size;
    ed4a:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    ed4c:	f000 8082 	beq.w	ee54 <nvs_mount+0x2a0>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    ed50:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    ed54:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    ed58:	89a3      	ldrh	r3, [r4, #12]
    ed5a:	fa1f f288 	uxth.w	r2, r8
    ed5e:	1b9b      	subs	r3, r3, r6
    ed60:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    ed62:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    ed66:	d33d      	bcc.n	ede4 <nvs_mount+0x230>
		LOG_INF("No GC Done marker found: restarting gc");
    ed68:	4b31      	ldr	r3, [pc, #196]	; (ee30 <nvs_mount+0x27c>)
    ed6a:	2203      	movs	r2, #3
    ed6c:	9302      	str	r3, [sp, #8]
    ed6e:	2300      	movs	r3, #0
    ed70:	492a      	ldr	r1, [pc, #168]	; (ee1c <nvs_mount+0x268>)
    ed72:	4618      	mov	r0, r3
    ed74:	e9cd 3300 	strd	r3, r3, [sp]
    ed78:	f016 f917 	bl	24faa <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    ed7c:	4620      	mov	r0, r4
    ed7e:	6861      	ldr	r1, [r4, #4]
    ed80:	f7ff fd8a 	bl	e898 <nvs_flash_erase_sector>
		if (rc) {
    ed84:	4605      	mov	r5, r0
    ed86:	2800      	cmp	r0, #0
    ed88:	d1af      	bne.n	ecea <nvs_mount+0x136>
		fs->ate_wra &= ADDR_SECT_MASK;
    ed8a:	6863      	ldr	r3, [r4, #4]
    ed8c:	4a29      	ldr	r2, [pc, #164]	; (ee34 <nvs_mount+0x280>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    ed8e:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    ed90:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    ed92:	440b      	add	r3, r1
    ed94:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    ed98:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    ed9a:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    ed9c:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    ed9e:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    eda0:	f7ff fe22 	bl	e9e8 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    eda4:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    eda6:	2d00      	cmp	r5, #0
    eda8:	d070      	beq.n	ee8c <nvs_mount+0x2d8>
    edaa:	e79e      	b.n	ecea <nvs_mount+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
    edac:	4620      	mov	r0, r4
    edae:	a907      	add	r1, sp, #28
    edb0:	f016 f915 	bl	24fde <nvs_ate_valid>
    edb4:	6862      	ldr	r2, [r4, #4]
    edb6:	b910      	cbnz	r0, edbe <nvs_mount+0x20a>
		fs->ate_wra -= ate_size;
    edb8:	1b92      	subs	r2, r2, r6
    edba:	6062      	str	r2, [r4, #4]
    edbc:	e7a1      	b.n	ed02 <nvs_mount+0x14e>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    edbe:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    edc2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    edc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    edc8:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    edcc:	4429      	add	r1, r5
    edce:	f016 f8fc 	bl	24fca <nvs_al_size.isra.0>
    edd2:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    edd4:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    edd6:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    edd8:	d1ee      	bne.n	edb8 <nvs_mount+0x204>
    edda:	2d00      	cmp	r5, #0
    eddc:	d0ec      	beq.n	edb8 <nvs_mount+0x204>
				rc = -ESPIPE;
    edde:	f06f 051c 	mvn.w	r5, #28
    ede2:	e090      	b.n	ef06 <nvs_mount+0x352>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ede4:	2308      	movs	r3, #8
    ede6:	4641      	mov	r1, r8
    ede8:	4620      	mov	r0, r4
    edea:	aa09      	add	r2, sp, #36	; 0x24
    edec:	f016 f86a 	bl	24ec4 <nvs_flash_rd>
			if (rc) {
    edf0:	4605      	mov	r5, r0
    edf2:	2800      	cmp	r0, #0
    edf4:	f47f af79 	bne.w	ecea <nvs_mount+0x136>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    edf8:	4620      	mov	r0, r4
    edfa:	a909      	add	r1, sp, #36	; 0x24
    edfc:	f016 f8ef 	bl	24fde <nvs_ate_valid>
    ee00:	b138      	cbz	r0, ee12 <nvs_mount+0x25e>
    ee02:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ee06:	454b      	cmp	r3, r9
    ee08:	d103      	bne.n	ee12 <nvs_mount+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    ee0a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ee0e:	2b00      	cmp	r3, #0
    ee10:	d07f      	beq.n	ef12 <nvs_mount+0x35e>
			addr += ate_size;
    ee12:	44b0      	add	r8, r6
    ee14:	e7a0      	b.n	ed58 <nvs_mount+0x1a4>
    ee16:	bf00      	nop
    ee18:	0002ca05 	.word	0x0002ca05
    ee1c:	0002a7b8 	.word	0x0002a7b8
    ee20:	0002ca27 	.word	0x0002ca27
    ee24:	0002ca44 	.word	0x0002ca44
    ee28:	0002ca5c 	.word	0x0002ca5c
    ee2c:	0002ca70 	.word	0x0002ca70
    ee30:	0002cacd 	.word	0x0002cacd
    ee34:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    ee38:	464a      	mov	r2, r9
    ee3a:	4620      	mov	r0, r4
    ee3c:	1a5b      	subs	r3, r3, r1
    ee3e:	f016 f88f 	bl	24f60 <nvs_flash_cmp_const>
		if (rc < 0) {
    ee42:	1e05      	subs	r5, r0, #0
    ee44:	f6ff af51 	blt.w	ecea <nvs_mount+0x136>
		if (!rc) {
    ee48:	d008      	beq.n	ee5c <nvs_mount+0x2a8>
		fs->data_wra += fs->flash_parameters->write_block_size;
    ee4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    ee4c:	68a3      	ldr	r3, [r4, #8]
    ee4e:	6812      	ldr	r2, [r2, #0]
    ee50:	4413      	add	r3, r2
    ee52:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    ee54:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    ee58:	428b      	cmp	r3, r1
    ee5a:	d8ed      	bhi.n	ee38 <nvs_mount+0x284>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ee5c:	6861      	ldr	r1, [r4, #4]
    ee5e:	89a3      	ldrh	r3, [r4, #12]
    ee60:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    ee64:	429a      	cmp	r2, r3
    ee66:	d19e      	bne.n	eda6 <nvs_mount+0x1f2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    ee68:	f8df 80d4 	ldr.w	r8, [pc, #212]	; ef40 <nvs_mount+0x38c>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ee6c:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    ee6e:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    ee72:	429a      	cmp	r2, r3
    ee74:	d097      	beq.n	eda6 <nvs_mount+0x1f2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    ee76:	4620      	mov	r0, r4
    ee78:	f7ff fd0e 	bl	e898 <nvs_flash_erase_sector>
		if (rc) {
    ee7c:	4605      	mov	r5, r0
    ee7e:	2800      	cmp	r0, #0
    ee80:	f47f af33 	bne.w	ecea <nvs_mount+0x136>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    ee84:	6863      	ldr	r3, [r4, #4]
    ee86:	ea03 0308 	and.w	r3, r3, r8
    ee8a:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    ee8c:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    ee8e:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    ee90:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    ee94:	429a      	cmp	r2, r3
    ee96:	d032      	beq.n	eefe <nvs_mount+0x34a>
    ee98:	4638      	mov	r0, r7
    ee9a:	f010 fe39 	bl	1fb10 <z_impl_k_mutex_unlock>
	fs->ready = true;
    ee9e:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    eea0:	2500      	movs	r5, #0
	fs->ready = true;
    eea2:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    eea4:	89a3      	ldrh	r3, [r4, #12]
    eea6:	4628      	mov	r0, r5
    eea8:	9304      	str	r3, [sp, #16]
    eeaa:	89e3      	ldrh	r3, [r4, #14]
    eeac:	2203      	movs	r2, #3
    eeae:	9303      	str	r3, [sp, #12]
    eeb0:	4b24      	ldr	r3, [pc, #144]	; (ef44 <nvs_mount+0x390>)
    eeb2:	e9cd 5500 	strd	r5, r5, [sp]
    eeb6:	9302      	str	r3, [sp, #8]
    eeb8:	4923      	ldr	r1, [pc, #140]	; (ef48 <nvs_mount+0x394>)
    eeba:	462b      	mov	r3, r5
    eebc:	f016 f875 	bl	24faa <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    eec0:	6863      	ldr	r3, [r4, #4]
    eec2:	4628      	mov	r0, r5
    eec4:	b29a      	uxth	r2, r3
    eec6:	0c1b      	lsrs	r3, r3, #16
    eec8:	9303      	str	r3, [sp, #12]
    eeca:	4b20      	ldr	r3, [pc, #128]	; (ef4c <nvs_mount+0x398>)
    eecc:	9204      	str	r2, [sp, #16]
    eece:	e9cd 5301 	strd	r5, r3, [sp, #4]
    eed2:	2203      	movs	r2, #3
    eed4:	462b      	mov	r3, r5
    eed6:	491c      	ldr	r1, [pc, #112]	; (ef48 <nvs_mount+0x394>)
    eed8:	9500      	str	r5, [sp, #0]
    eeda:	f016 f866 	bl	24faa <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    eede:	68a3      	ldr	r3, [r4, #8]
    eee0:	4628      	mov	r0, r5
    eee2:	b29a      	uxth	r2, r3
    eee4:	0c1b      	lsrs	r3, r3, #16
    eee6:	9303      	str	r3, [sp, #12]
    eee8:	4b19      	ldr	r3, [pc, #100]	; (ef50 <nvs_mount+0x39c>)
    eeea:	9204      	str	r2, [sp, #16]
    eeec:	e9cd 5301 	strd	r5, r3, [sp, #4]
    eef0:	2203      	movs	r2, #3
    eef2:	462b      	mov	r3, r5
    eef4:	4914      	ldr	r1, [pc, #80]	; (ef48 <nvs_mount+0x394>)
    eef6:	9500      	str	r5, [sp, #0]
    eef8:	f016 f857 	bl	24faa <z_log_msg_runtime_create.constprop.0>
	return 0;
    eefc:	e685      	b.n	ec0a <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
    eefe:	4620      	mov	r0, r4
    ef00:	f7ff fd46 	bl	e990 <nvs_add_gc_done_ate>
    ef04:	4605      	mov	r5, r0
    ef06:	4638      	mov	r0, r7
    ef08:	f010 fe02 	bl	1fb10 <z_impl_k_mutex_unlock>
	if (rc) {
    ef0c:	2d00      	cmp	r5, #0
    ef0e:	d0c6      	beq.n	ee9e <nvs_mount+0x2ea>
    ef10:	e67b      	b.n	ec0a <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
    ef12:	4b10      	ldr	r3, [pc, #64]	; (ef54 <nvs_mount+0x3a0>)
    ef14:	2203      	movs	r2, #3
    ef16:	4628      	mov	r0, r5
    ef18:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ef1c:	490a      	ldr	r1, [pc, #40]	; (ef48 <nvs_mount+0x394>)
    ef1e:	462b      	mov	r3, r5
    ef20:	9500      	str	r5, [sp, #0]
    ef22:	f016 f842 	bl	24faa <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ef26:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    ef28:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ef2a:	0c1b      	lsrs	r3, r3, #16
    ef2c:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    ef2e:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ef30:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
    ef32:	f015 ffd5 	bl	24ee0 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    ef36:	4620      	mov	r0, r4
    ef38:	9906      	ldr	r1, [sp, #24]
    ef3a:	f7ff fcad 	bl	e898 <nvs_flash_erase_sector>
    ef3e:	e731      	b.n	eda4 <nvs_mount+0x1f0>
    ef40:	ffff0000 	.word	0xffff0000
    ef44:	0002ca93 	.word	0x0002ca93
    ef48:	0002a7b8 	.word	0x0002a7b8
    ef4c:	0002caaa 	.word	0x0002caaa
    ef50:	0002cabc 	.word	0x0002cabc
    ef54:	0002caf4 	.word	0x0002caf4

0000ef58 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef5c:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    ef5e:	7c03      	ldrb	r3, [r0, #16]
{
    ef60:	4604      	mov	r4, r0
    ef62:	4689      	mov	r9, r1
    ef64:	4690      	mov	r8, r2
    ef66:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    ef68:	b973      	cbnz	r3, ef88 <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
    ef6a:	4a66      	ldr	r2, [pc, #408]	; (f104 <nvs_write+0x1ac>)
    ef6c:	4618      	mov	r0, r3
    ef6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ef72:	4965      	ldr	r1, [pc, #404]	; (f108 <nvs_write+0x1b0>)
    ef74:	2201      	movs	r2, #1
    ef76:	9300      	str	r3, [sp, #0]
    ef78:	f016 f817 	bl	24faa <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    ef7c:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    ef80:	4630      	mov	r0, r6
    ef82:	b00d      	add	sp, #52	; 0x34
    ef84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ef88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    ef8a:	2108      	movs	r1, #8
    ef8c:	4610      	mov	r0, r2
    ef8e:	f016 f81c 	bl	24fca <nvs_al_size.isra.0>
    ef92:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    ef94:	4629      	mov	r1, r5
    ef96:	4610      	mov	r0, r2
    ef98:	f016 f817 	bl	24fca <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    ef9c:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    ef9e:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    efa0:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    efa4:	42ab      	cmp	r3, r5
    efa6:	f0c0 80a9 	bcc.w	f0fc <nvs_write+0x1a4>
    efaa:	b11d      	cbz	r5, efb4 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
    efac:	f1b8 0f00 	cmp.w	r8, #0
    efb0:	f000 80a4 	beq.w	f0fc <nvs_write+0x1a4>
	wlk_addr = fs->ate_wra;
    efb4:	6863      	ldr	r3, [r4, #4]
    efb6:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    efb8:	4620      	mov	r0, r4
    efba:	aa08      	add	r2, sp, #32
    efbc:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
    efbe:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    efc2:	f016 f844 	bl	2504e <nvs_prev_ate>
		if (rc) {
    efc6:	4606      	mov	r6, r0
    efc8:	2800      	cmp	r0, #0
    efca:	d1d9      	bne.n	ef80 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    efcc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    efd0:	454b      	cmp	r3, r9
    efd2:	d005      	beq.n	efe0 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
    efd4:	6862      	ldr	r2, [r4, #4]
    efd6:	9b07      	ldr	r3, [sp, #28]
    efd8:	429a      	cmp	r2, r3
    efda:	d1ed      	bne.n	efb8 <nvs_write+0x60>
		if (len == 0) {
    efdc:	b9e5      	cbnz	r5, f018 <nvs_write+0xc0>
    efde:	e7cf      	b.n	ef80 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    efe0:	4620      	mov	r0, r4
    efe2:	a908      	add	r1, sp, #32
    efe4:	f015 fffb 	bl	24fde <nvs_ate_valid>
    efe8:	2800      	cmp	r0, #0
    efea:	d0f3      	beq.n	efd4 <nvs_write+0x7c>
		rd_addr += wlk_ate.offset;
    efec:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
    eff0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
    eff4:	b175      	cbz	r5, f014 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
    eff6:	42ab      	cmp	r3, r5
    eff8:	d10e      	bne.n	f018 <nvs_write+0xc0>
		rd_addr &= ADDR_SECT_MASK;
    effa:	ea4f 411b 	mov.w	r1, fp, lsr #16
    effe:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    f000:	4401      	add	r1, r0
    f002:	462b      	mov	r3, r5
    f004:	4642      	mov	r2, r8
    f006:	4620      	mov	r0, r4
    f008:	f015 ff77 	bl	24efa <nvs_flash_block_cmp>
			if (rc <= 0) {
    f00c:	2800      	cmp	r0, #0
    f00e:	dc03      	bgt.n	f018 <nvs_write+0xc0>
    f010:	4606      	mov	r6, r0
    f012:	e7b5      	b.n	ef80 <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
    f014:	2b00      	cmp	r3, #0
    f016:	d0b3      	beq.n	ef80 <nvs_write+0x28>
	if (data_size) {
    f018:	2f00      	cmp	r7, #0
    f01a:	d13e      	bne.n	f09a <nvs_write+0x142>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    f01c:	f104 0314 	add.w	r3, r4, #20
    f020:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
    f022:	f04f 32ff 	mov.w	r2, #4294967295
    f026:	f04f 33ff 	mov.w	r3, #4294967295
    f02a:	f104 0014 	add.w	r0, r4, #20
    f02e:	f010 fc9f 	bl	1f970 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    f032:	f8df b0d8 	ldr.w	fp, [pc, #216]	; f10c <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    f036:	89e3      	ldrh	r3, [r4, #14]
    f038:	429e      	cmp	r6, r3
    f03a:	d05c      	beq.n	f0f6 <nvs_write+0x19e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    f03c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f040:	18f9      	adds	r1, r7, r3
    f042:	428a      	cmp	r2, r1
    f044:	d32c      	bcc.n	f0a0 <nvs_write+0x148>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f046:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
    f04a:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    f04c:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
    f04e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
    f052:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
    f056:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
    f05a:	f015 ff78 	bl	24f4e <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f05e:	462b      	mov	r3, r5
    f060:	4642      	mov	r2, r8
    f062:	68a1      	ldr	r1, [r4, #8]
    f064:	4620      	mov	r0, r4
    f066:	f016 f83c 	bl	250e2 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    f06a:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f06c:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    f06e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f070:	f015 ffab 	bl	24fca <nvs_al_size.isra.0>
    f074:	68a2      	ldr	r2, [r4, #8]
    f076:	4402      	add	r2, r0
    f078:	60a2      	str	r2, [r4, #8]
	if (rc) {
    f07a:	f1ba 0f00 	cmp.w	sl, #0
    f07e:	d107      	bne.n	f090 <nvs_write+0x138>
	rc = nvs_flash_ate_wrt(fs, &entry);
    f080:	4620      	mov	r0, r4
    f082:	a90a      	add	r1, sp, #40	; 0x28
    f084:	f016 f867 	bl	25156 <nvs_flash_ate_wrt>
	rc = len;
    f088:	2800      	cmp	r0, #0
    f08a:	bf14      	ite	ne
    f08c:	4682      	movne	sl, r0
    f08e:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    f090:	9805      	ldr	r0, [sp, #20]
    f092:	f010 fd3d 	bl	1fb10 <z_impl_k_mutex_unlock>
	return rc;
    f096:	4656      	mov	r6, sl
    f098:	e772      	b.n	ef80 <nvs_write+0x28>
		required_space = data_size + ate_size;
    f09a:	4457      	add	r7, sl
    f09c:	b2bf      	uxth	r7, r7
    f09e:	e7bd      	b.n	f01c <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f0a0:	2108      	movs	r1, #8
    f0a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f0a4:	f015 ff91 	bl	24fca <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    f0a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f0ac:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
    f0b0:	2300      	movs	r3, #0
    f0b2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    f0b6:	1813      	adds	r3, r2, r0
    f0b8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
    f0bc:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    f0be:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    f0c2:	441a      	add	r2, r3
    f0c4:	1a10      	subs	r0, r2, r0
    f0c6:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    f0c8:	a80a      	add	r0, sp, #40	; 0x28
    f0ca:	f015 ff40 	bl	24f4e <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    f0ce:	a90a      	add	r1, sp, #40	; 0x28
    f0d0:	4620      	mov	r0, r4
    f0d2:	f016 f840 	bl	25156 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    f0d6:	4620      	mov	r0, r4
    f0d8:	1d21      	adds	r1, r4, #4
    f0da:	f015 ff01 	bl	24ee0 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f0de:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    f0e0:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f0e2:	ea03 030b 	and.w	r3, r3, fp
    f0e6:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f0e8:	f7ff fc7e 	bl	e9e8 <nvs_gc>
		if (rc) {
    f0ec:	4682      	mov	sl, r0
    f0ee:	2800      	cmp	r0, #0
    f0f0:	d1ce      	bne.n	f090 <nvs_write+0x138>
		gc_count++;
    f0f2:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    f0f4:	e79f      	b.n	f036 <nvs_write+0xde>
			rc = -ENOSPC;
    f0f6:	f06f 0a1b 	mvn.w	sl, #27
    f0fa:	e7c9      	b.n	f090 <nvs_write+0x138>
		return -EINVAL;
    f0fc:	f06f 0615 	mvn.w	r6, #21
    f100:	e73e      	b.n	ef80 <nvs_write+0x28>
    f102:	bf00      	nop
    f104:	0002c9f1 	.word	0x0002c9f1
    f108:	0002a7b8 	.word	0x0002a7b8
    f10c:	ffff0000 	.word	0xffff0000

0000f110 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    f110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f114:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    f116:	7c03      	ldrb	r3, [r0, #16]
{
    f118:	b088      	sub	sp, #32
    f11a:	4604      	mov	r4, r0
    f11c:	460f      	mov	r7, r1
    f11e:	4690      	mov	r8, r2
    f120:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    f124:	b96b      	cbnz	r3, f142 <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
    f126:	4a2f      	ldr	r2, [pc, #188]	; (f1e4 <nvs_read_hist+0xd4>)
    f128:	4618      	mov	r0, r3
    f12a:	e9cd 3201 	strd	r3, r2, [sp, #4]
    f12e:	492e      	ldr	r1, [pc, #184]	; (f1e8 <nvs_read_hist+0xd8>)
    f130:	2201      	movs	r2, #1
    f132:	9300      	str	r3, [sp, #0]
    f134:	f015 ff39 	bl	24faa <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    f138:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    f13c:	b008      	add	sp, #32
    f13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f142:	2108      	movs	r1, #8
    f144:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f146:	f015 ff40 	bl	24fca <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    f14a:	89a3      	ldrh	r3, [r4, #12]
    f14c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    f150:	42b3      	cmp	r3, r6
    f152:	d343      	bcc.n	f1dc <nvs_read_hist+0xcc>
	cnt_his = 0U;
    f154:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    f156:	f8d4 a004 	ldr.w	sl, [r4, #4]
    f15a:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
    f15e:	454d      	cmp	r5, r9
    f160:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    f162:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
    f166:	d909      	bls.n	f17c <nvs_read_hist+0x6c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f168:	6863      	ldr	r3, [r4, #4]
    f16a:	4553      	cmp	r3, sl
    f16c:	d11e      	bne.n	f1ac <nvs_read_hist+0x9c>
    f16e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f172:	42bb      	cmp	r3, r7
    f174:	d01a      	beq.n	f1ac <nvs_read_hist+0x9c>
		return -ENOENT;
    f176:	f06f 0001 	mvn.w	r0, #1
    f17a:	e7df      	b.n	f13c <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f17c:	4620      	mov	r0, r4
    f17e:	aa06      	add	r2, sp, #24
    f180:	a905      	add	r1, sp, #20
    f182:	f015 ff64 	bl	2504e <nvs_prev_ate>
		if (rc) {
    f186:	2800      	cmp	r0, #0
    f188:	d1d8      	bne.n	f13c <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    f18a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f18e:	42bb      	cmp	r3, r7
    f190:	d106      	bne.n	f1a0 <nvs_read_hist+0x90>
    f192:	4620      	mov	r0, r4
    f194:	a906      	add	r1, sp, #24
    f196:	f015 ff22 	bl	24fde <nvs_ate_valid>
    f19a:	b108      	cbz	r0, f1a0 <nvs_read_hist+0x90>
			cnt_his++;
    f19c:	3501      	adds	r5, #1
    f19e:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    f1a0:	6862      	ldr	r2, [r4, #4]
    f1a2:	9b05      	ldr	r3, [sp, #20]
    f1a4:	429a      	cmp	r2, r3
    f1a6:	d1da      	bne.n	f15e <nvs_read_hist+0x4e>
		rd_addr = wlk_addr;
    f1a8:	4651      	mov	r1, sl
    f1aa:	e7e0      	b.n	f16e <nvs_read_hist+0x5e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f1ac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f1b0:	2b00      	cmp	r3, #0
    f1b2:	d0e0      	beq.n	f176 <nvs_read_hist+0x66>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f1b4:	45a9      	cmp	r9, r5
    f1b6:	d8de      	bhi.n	f176 <nvs_read_hist+0x66>
	rd_addr += wlk_ate.offset;
    f1b8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
    f1bc:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f1be:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    f1c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f1c4:	bf28      	it	cs
    f1c6:	4633      	movcs	r3, r6
    f1c8:	4401      	add	r1, r0
    f1ca:	4642      	mov	r2, r8
    f1cc:	4620      	mov	r0, r4
    f1ce:	f015 fe79 	bl	24ec4 <nvs_flash_rd>
	if (rc) {
    f1d2:	2800      	cmp	r0, #0
    f1d4:	d1b2      	bne.n	f13c <nvs_read_hist+0x2c>
	return wlk_ate.len;
    f1d6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    f1da:	e7af      	b.n	f13c <nvs_read_hist+0x2c>
		return -EINVAL;
    f1dc:	f06f 0015 	mvn.w	r0, #21
    f1e0:	e7ac      	b.n	f13c <nvs_read_hist+0x2c>
    f1e2:	bf00      	nop
    f1e4:	0002c9f1 	.word	0x0002c9f1
    f1e8:	0002a7b8 	.word	0x0002a7b8

0000f1ec <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    f1ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f1ee:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
    f1f0:	b960      	cbnz	r0, f20c <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
    f1f2:	4a11      	ldr	r2, [pc, #68]	; (f238 <ipc_service_open_instance+0x4c>)
    f1f4:	9000      	str	r0, [sp, #0]
    f1f6:	e9cd 0201 	strd	r0, r2, [sp, #4]
    f1fa:	4910      	ldr	r1, [pc, #64]	; (f23c <ipc_service_open_instance+0x50>)
    f1fc:	2201      	movs	r2, #1
    f1fe:	f015 ffc2 	bl	25186 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    f202:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    f206:	b005      	add	sp, #20
    f208:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    f20c:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    f20e:	b95b      	cbnz	r3, f228 <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
    f210:	4a0b      	ldr	r2, [pc, #44]	; (f240 <ipc_service_open_instance+0x54>)
    f212:	4618      	mov	r0, r3
    f214:	e9cd 3201 	strd	r3, r2, [sp, #4]
    f218:	4908      	ldr	r1, [pc, #32]	; (f23c <ipc_service_open_instance+0x50>)
    f21a:	2201      	movs	r2, #1
    f21c:	9300      	str	r3, [sp, #0]
    f21e:	f015 ffb2 	bl	25186 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    f222:	f06f 0004 	mvn.w	r0, #4
    f226:	e7ee      	b.n	f206 <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
    f228:	681b      	ldr	r3, [r3, #0]
    f22a:	b11b      	cbz	r3, f234 <ipc_service_open_instance+0x48>
}
    f22c:	b005      	add	sp, #20
    f22e:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    f232:	4718      	bx	r3
		return 0;
    f234:	4618      	mov	r0, r3
    f236:	e7e6      	b.n	f206 <ipc_service_open_instance+0x1a>
    f238:	0002cb57 	.word	0x0002cb57
    f23c:	0002a7c0 	.word	0x0002a7c0
    f240:	0002cb68 	.word	0x0002cb68

0000f244 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    f244:	b530      	push	{r4, r5, lr}
    f246:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    f248:	b108      	cbz	r0, f24e <ipc_service_register_endpoint+0xa>
    f24a:	b101      	cbz	r1, f24e <ipc_service_register_endpoint+0xa>
    f24c:	b96a      	cbnz	r2, f26a <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    f24e:	4b13      	ldr	r3, [pc, #76]	; (f29c <ipc_service_register_endpoint+0x58>)
    f250:	2201      	movs	r2, #1
    f252:	9302      	str	r3, [sp, #8]
    f254:	2300      	movs	r3, #0
    f256:	4912      	ldr	r1, [pc, #72]	; (f2a0 <ipc_service_register_endpoint+0x5c>)
    f258:	4618      	mov	r0, r3
    f25a:	e9cd 3300 	strd	r3, r3, [sp]
    f25e:	f015 ff92 	bl	25186 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    f262:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    f266:	b005      	add	sp, #20
    f268:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    f26a:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    f26c:	b10c      	cbz	r4, f272 <ipc_service_register_endpoint+0x2e>
    f26e:	68e5      	ldr	r5, [r4, #12]
    f270:	b965      	cbnz	r5, f28c <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    f272:	4b0c      	ldr	r3, [pc, #48]	; (f2a4 <ipc_service_register_endpoint+0x60>)
    f274:	2201      	movs	r2, #1
    f276:	9302      	str	r3, [sp, #8]
    f278:	2300      	movs	r3, #0
    f27a:	4909      	ldr	r1, [pc, #36]	; (f2a0 <ipc_service_register_endpoint+0x5c>)
    f27c:	4618      	mov	r0, r3
    f27e:	e9cd 3300 	strd	r3, r3, [sp]
    f282:	f015 ff80 	bl	25186 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    f286:	f06f 0004 	mvn.w	r0, #4
    f28a:	e7ec      	b.n	f266 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    f28c:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    f290:	68e3      	ldr	r3, [r4, #12]
}
    f292:	b005      	add	sp, #20
    f294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    f298:	4718      	bx	r3
    f29a:	bf00      	nop
    f29c:	0002cb86 	.word	0x0002cb86
    f2a0:	0002a7c0 	.word	0x0002a7c0
    f2a4:	0002cb68 	.word	0x0002cb68

0000f2a8 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    f2a8:	b530      	push	{r4, r5, lr}
    f2aa:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    f2ac:	4604      	mov	r4, r0
{
    f2ae:	b085      	sub	sp, #20
	if (!ept) {
    f2b0:	b960      	cbnz	r0, f2cc <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
    f2b2:	4b19      	ldr	r3, [pc, #100]	; (f318 <ipc_service_send+0x70>)
    f2b4:	9000      	str	r0, [sp, #0]
    f2b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
    f2ba:	2201      	movs	r2, #1
    f2bc:	4603      	mov	r3, r0
    f2be:	4917      	ldr	r1, [pc, #92]	; (f31c <ipc_service_send+0x74>)
    f2c0:	f015 ff61 	bl	25186 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    f2c4:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    f2c8:	b005      	add	sp, #20
    f2ca:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    f2cc:	6800      	ldr	r0, [r0, #0]
    f2ce:	b958      	cbnz	r0, f2e8 <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
    f2d0:	4b13      	ldr	r3, [pc, #76]	; (f320 <ipc_service_send+0x78>)
    f2d2:	9000      	str	r0, [sp, #0]
    f2d4:	e9cd 0301 	strd	r0, r3, [sp, #4]
    f2d8:	2201      	movs	r2, #1
    f2da:	4603      	mov	r3, r0
    f2dc:	490f      	ldr	r1, [pc, #60]	; (f31c <ipc_service_send+0x74>)
    f2de:	f015 ff52 	bl	25186 <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
    f2e2:	f06f 0001 	mvn.w	r0, #1
    f2e6:	e7ef      	b.n	f2c8 <ipc_service_send+0x20>
	backend = ept->instance->api;
    f2e8:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    f2ea:	b10a      	cbz	r2, f2f0 <ipc_service_send+0x48>
    f2ec:	6895      	ldr	r5, [r2, #8]
    f2ee:	b965      	cbnz	r5, f30a <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
    f2f0:	4b0c      	ldr	r3, [pc, #48]	; (f324 <ipc_service_send+0x7c>)
    f2f2:	2201      	movs	r2, #1
    f2f4:	9302      	str	r3, [sp, #8]
    f2f6:	2300      	movs	r3, #0
    f2f8:	4908      	ldr	r1, [pc, #32]	; (f31c <ipc_service_send+0x74>)
    f2fa:	4618      	mov	r0, r3
    f2fc:	e9cd 3300 	strd	r3, r3, [sp]
    f300:	f015 ff41 	bl	25186 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    f304:	f06f 0004 	mvn.w	r0, #4
    f308:	e7de      	b.n	f2c8 <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
    f30a:	460a      	mov	r2, r1
    f30c:	46ac      	mov	ip, r5
    f30e:	6861      	ldr	r1, [r4, #4]
}
    f310:	b005      	add	sp, #20
    f312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    f316:	4760      	bx	ip
    f318:	0002cbb2 	.word	0x0002cbb2
    f31c:	0002a7c0 	.word	0x0002a7c0
    f320:	0002cbc3 	.word	0x0002cbc3
    f324:	0002cb68 	.word	0x0002cb68

0000f328 <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
    f328:	2000      	movs	r0, #0
    f32a:	4b01      	ldr	r3, [pc, #4]	; (f330 <shared_memory_prepare+0x8>)
    f32c:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    f32e:	4770      	bx	lr
    f330:	20070000 	.word	0x20070000

0000f334 <advertise_ept>:
{
    f334:	b530      	push	{r4, r5, lr}
    f336:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f338:	490e      	ldr	r1, [pc, #56]	; (f374 <advertise_ept+0x40>)
{
    f33a:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f33c:	9102      	str	r1, [sp, #8]
    f33e:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    f342:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f344:	e9cd 3100 	strd	r3, r1, [sp]
    f348:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f34c:	f04f 33ff 	mov.w	r3, #4294967295
    f350:	4620      	mov	r0, r4
    f352:	f00f fa91 	bl	1e878 <rpmsg_create_ept>
	if (err != 0) {
    f356:	b950      	cbnz	r0, f36e <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    f358:	2301      	movs	r3, #1
    f35a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    f35e:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    f362:	b123      	cbz	r3, f36e <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    f364:	4620      	mov	r0, r4
}
    f366:	b005      	add	sp, #20
    f368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    f36c:	4718      	bx	r3
}
    f36e:	b005      	add	sp, #20
    f370:	bd30      	pop	{r4, r5, pc}
    f372:	bf00      	nop
    f374:	00025297 	.word	0x00025297

0000f378 <get_ept>:
{
    f378:	b538      	push	{r3, r4, r5, lr}
    f37a:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f37c:	4611      	mov	r1, r2
{
    f37e:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f380:	f015 ff8b 	bl	2529a <get_ept_slot_with_name>
	if (ept != NULL) {
    f384:	4603      	mov	r3, r0
    f386:	b938      	cbnz	r0, f398 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f388:	4628      	mov	r0, r5
    f38a:	4904      	ldr	r1, [pc, #16]	; (f39c <get_ept+0x24>)
    f38c:	f015 ff85 	bl	2529a <get_ept_slot_with_name>
    f390:	4603      	mov	r3, r0
	if (ept != NULL) {
    f392:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    f394:	6023      	str	r3, [r4, #0]
}
    f396:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    f398:	2001      	movs	r0, #1
    f39a:	e7fb      	b.n	f394 <get_ept+0x1c>
    f39c:	0002f304 	.word	0x0002f304

0000f3a0 <open>:
{
    f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f3a4:	2301      	movs	r3, #1
    f3a6:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    f3a8:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f3aa:	6846      	ldr	r6, [r0, #4]
{
    f3ac:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    f3ae:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f3b2:	e8d7 2fef 	ldaex	r2, [r7]
    f3b6:	2a00      	cmp	r2, #0
    f3b8:	d103      	bne.n	f3c2 <open+0x22>
    f3ba:	e8c7 3fe1 	stlex	r1, r3, [r7]
    f3be:	2900      	cmp	r1, #0
    f3c0:	d1f7      	bne.n	f3b2 <open+0x12>
    f3c2:	f040 80b8 	bne.w	f536 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    f3c6:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f3c8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    f3ca:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f3cc:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    f3ce:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    f3d2:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    f3d6:	bf26      	itte	cs
    f3d8:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    f3dc:	fab3 f383 	clzcs	r3, r3
		return 0;
    f3e0:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    f3e2:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    f3e6:	bf28      	it	cs
    f3e8:	f1c3 0320 	rsbcs	r3, r3, #32
    f3ec:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    f3ee:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    f3f0:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    f3f4:	f000 8099 	beq.w	f52a <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    f3f8:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f3fa:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    f3fc:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    f3fe:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    f400:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    f404:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f406:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    f408:	3209      	adds	r2, #9
    f40a:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    f40e:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    f410:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    f414:	440a      	add	r2, r1
	return (buf_size * num);
    f416:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f418:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    f41c:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    f41e:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    f422:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    f426:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f428:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    f42a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    f42e:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    f432:	3303      	adds	r3, #3
    f434:	4413      	add	r3, r2
    f436:	f023 0303 	bic.w	r3, r3, #3
    f43a:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    f43e:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    f440:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    f444:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    f448:	4b3c      	ldr	r3, [pc, #240]	; (f53c <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f44a:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    f44c:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f450:	6831      	ldr	r1, [r6, #0]
    f452:	f000 fa1d 	bl	f890 <ipc_static_vrings_init>
	if (err != 0) {
    f456:	4604      	mov	r4, r0
    f458:	bb30      	cbnz	r0, f4a8 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    f45a:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    f45e:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f462:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    f466:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f46a:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    f46c:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f46e:	bf08      	it	eq
    f470:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    f472:	f011 f853 	bl	2051c <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    f476:	2300      	movs	r3, #0
    f478:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    f47c:	4930      	ldr	r1, [pc, #192]	; (f540 <open+0x1a0>)
    f47e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f482:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    f486:	9300      	str	r3, [sp, #0]
    f488:	4658      	mov	r0, fp
    f48a:	4623      	mov	r3, r4
    f48c:	f011 f860 	bl	20550 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    f490:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    f494:	492b      	ldr	r1, [pc, #172]	; (f544 <open+0x1a4>)
    f496:	f010 ff75 	bl	20384 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    f49a:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    f49e:	6883      	ldr	r3, [r0, #8]
    f4a0:	685c      	ldr	r4, [r3, #4]
    f4a2:	b91c      	cbnz	r4, f4ac <open+0x10c>
		return -ENOSYS;
    f4a4:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    f4a8:	2100      	movs	r1, #0
    f4aa:	e037      	b.n	f51c <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f4ac:	464b      	mov	r3, r9
    f4ae:	4a26      	ldr	r2, [pc, #152]	; (f548 <open+0x1a8>)
    f4b0:	f8da 1018 	ldr.w	r1, [sl, #24]
    f4b4:	47a0      	blx	r4
	if (err != 0) {
    f4b6:	4604      	mov	r4, r0
    f4b8:	2800      	cmp	r0, #0
    f4ba:	d1f5      	bne.n	f4a8 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    f4bc:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    f4c0:	6883      	ldr	r3, [r0, #8]
    f4c2:	691b      	ldr	r3, [r3, #16]
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d0ed      	beq.n	f4a4 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    f4c8:	2201      	movs	r2, #1
    f4ca:	f8da 1018 	ldr.w	r1, [sl, #24]
    f4ce:	4798      	blx	r3
	if (err != 0) {
    f4d0:	4604      	mov	r4, r0
    f4d2:	2800      	cmp	r0, #0
    f4d4:	d1e8      	bne.n	f4a8 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    f4d6:	4b1d      	ldr	r3, [pc, #116]	; (f54c <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f4d8:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    f4da:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    f4de:	4b1c      	ldr	r3, [pc, #112]	; (f550 <open+0x1b0>)
    f4e0:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f4e4:	4b1b      	ldr	r3, [pc, #108]	; (f554 <open+0x1b4>)
    f4e6:	9303      	str	r3, [sp, #12]
    f4e8:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    f4ec:	9302      	str	r3, [sp, #8]
    f4ee:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    f4f2:	e9cd 8300 	strd	r8, r3, [sp]
    f4f6:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    f4fa:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    f4fc:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f500:	f000 f98e 	bl	f820 <ipc_rpmsg_init>
	if (err != 0) {
    f504:	4604      	mov	r4, r0
    f506:	2800      	cmp	r0, #0
    f508:	d1ce      	bne.n	f4a8 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f50a:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    f50e:	f00f fb57 	bl	1ebc0 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    f512:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f514:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    f518:	db0a      	blt.n	f530 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    f51a:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    f51c:	4638      	mov	r0, r7
    f51e:	f015 fef1 	bl	25304 <atomic_set.isra.0>
}
    f522:	4620      	mov	r0, r4
    f524:	b005      	add	sp, #20
    f526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f52a:	f06f 040b 	mvn.w	r4, #11
    f52e:	e7bb      	b.n	f4a8 <open+0x108>
		err = -EINVAL;
    f530:	f06f 0415 	mvn.w	r4, #21
    f534:	e7b8      	b.n	f4a8 <open+0x108>
		return -EALREADY;
    f536:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f53a:	e7f2      	b.n	f522 <open+0x182>
    f53c:	000252ed 	.word	0x000252ed
    f540:	200314f8 	.word	0x200314f8
    f544:	000252d3 	.word	0x000252d3
    f548:	000252c7 	.word	0x000252c7
    f54c:	0000f61d 	.word	0x0000f61d
    f550:	000253a5 	.word	0x000253a5
    f554:	00025335 	.word	0x00025335

0000f558 <close>:
{
    f558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f55c:	4606      	mov	r6, r0
    f55e:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    f562:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f564:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    f568:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f56c:	e8d7 3fef 	ldaex	r3, [r7]
    f570:	2b02      	cmp	r3, #2
    f572:	d103      	bne.n	f57c <close+0x24>
    f574:	e8c7 9fe2 	stlex	r2, r9, [r7]
    f578:	2a00      	cmp	r2, #0
    f57a:	d1f7      	bne.n	f56c <close+0x14>
    f57c:	d149      	bne.n	f612 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    f57e:	4826      	ldr	r0, [pc, #152]	; (f618 <close+0xc0>)
    f580:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f584:	f7f9 fee2 	bl	934c <strcmp>
    f588:	b120      	cbz	r0, f594 <close+0x3c>
		return -EBUSY;
    f58a:	f06f 040f 	mvn.w	r4, #15
}
    f58e:	4620      	mov	r0, r4
    f590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    f594:	4820      	ldr	r0, [pc, #128]	; (f618 <close+0xc0>)
    f596:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    f59a:	f7f9 fed7 	bl	934c <strcmp>
    f59e:	2800      	cmp	r0, #0
    f5a0:	d1f3      	bne.n	f58a <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    f5a2:	4628      	mov	r0, r5
    f5a4:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f5a8:	f015 ff2f 	bl	2540a <ipc_rpmsg_deinit>
	if (err != 0) {
    f5ac:	4604      	mov	r4, r0
    f5ae:	bb70      	cbnz	r0, f60e <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    f5b0:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    f5b2:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    f5b4:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    f5b6:	6883      	ldr	r3, [r0, #8]
    f5b8:	691b      	ldr	r3, [r3, #16]
    f5ba:	b333      	cbz	r3, f60a <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    f5bc:	4622      	mov	r2, r4
    f5be:	6989      	ldr	r1, [r1, #24]
    f5c0:	4798      	blx	r3
	if (err != 0) {
    f5c2:	4604      	mov	r4, r0
    f5c4:	bb18      	cbnz	r0, f60e <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    f5c6:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    f5ca:	4649      	mov	r1, r9
    f5cc:	4630      	mov	r0, r6
    f5ce:	f011 f827 	bl	20620 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    f5d2:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    f5d4:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    f5d8:	f001 fa8e 	bl	10af8 <z_impl_k_thread_abort>
    f5dc:	4630      	mov	r0, r6
    f5de:	f8d8 1000 	ldr.w	r1, [r8]
    f5e2:	f015 ff4f 	bl	25484 <ipc_static_vrings_deinit>
	if (err != 0) {
    f5e6:	4604      	mov	r4, r0
    f5e8:	b988      	cbnz	r0, f60e <close+0xb6>
    f5ea:	4601      	mov	r1, r0
    f5ec:	22e8      	movs	r2, #232	; 0xe8
    f5ee:	4630      	mov	r0, r6
    f5f0:	f01a f935 	bl	2985e <memset>
    f5f4:	4621      	mov	r1, r4
    f5f6:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    f5fa:	4628      	mov	r0, r5
    f5fc:	f01a f92f 	bl	2985e <memset>
	atomic_set(&data->state, STATE_READY);
    f600:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    f602:	4638      	mov	r0, r7
    f604:	f015 fe7e 	bl	25304 <atomic_set.isra.0>
	return err;
    f608:	e7c1      	b.n	f58e <close+0x36>
		return -ENOSYS;
    f60a:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    f60e:	2102      	movs	r1, #2
    f610:	e7f7      	b.n	f602 <close+0xaa>
		return -EALREADY;
    f612:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f616:	e7ba      	b.n	f58e <close+0x36>
    f618:	0002f304 	.word	0x0002f304

0000f61c <bound_cb>:
{
    f61c:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    f61e:	4604      	mov	r4, r0
    f620:	b140      	cbz	r0, f634 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    f622:	2300      	movs	r3, #0
    f624:	2201      	movs	r2, #1
    f626:	e9cd 3200 	strd	r3, r2, [sp]
    f62a:	4b07      	ldr	r3, [pc, #28]	; (f648 <bound_cb+0x2c>)
    f62c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f630:	f00f f8d6 	bl	1e7e0 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    f634:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f636:	681b      	ldr	r3, [r3, #0]
    f638:	b123      	cbz	r3, f644 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    f63a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    f63c:	b002      	add	sp, #8
    f63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    f642:	4718      	bx	r3
}
    f644:	b002      	add	sp, #8
    f646:	bd10      	pop	{r4, pc}
    f648:	0002f304 	.word	0x0002f304

0000f64c <send>:
{
    f64c:	b513      	push	{r0, r1, r4, lr}
    f64e:	4604      	mov	r4, r0
    f650:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f652:	6921      	ldr	r1, [r4, #16]
    f654:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    f658:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    f65c:	2902      	cmp	r1, #2
    f65e:	d110      	bne.n	f682 <send+0x36>
	if (len == 0) {
    f660:	b193      	cbz	r3, f688 <send+0x3c>
	if (!rpmsg_ept) {
    f662:	b1a0      	cbz	r0, f68e <send+0x42>
    f664:	2101      	movs	r1, #1
    f666:	e9cd 3100 	strd	r3, r1, [sp]
    f66a:	4613      	mov	r3, r2
    f66c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f670:	f00f f8b6 	bl	1e7e0 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    f674:	4b07      	ldr	r3, [pc, #28]	; (f694 <send+0x48>)
		return -ENOMEM;
    f676:	4298      	cmp	r0, r3
    f678:	bf08      	it	eq
    f67a:	f06f 000b 	mvneq.w	r0, #11
}
    f67e:	b002      	add	sp, #8
    f680:	bd10      	pop	{r4, pc}
		return -EBUSY;
    f682:	f06f 000f 	mvn.w	r0, #15
    f686:	e7fa      	b.n	f67e <send+0x32>
		return -EBADMSG;
    f688:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f68c:	e7f7      	b.n	f67e <send+0x32>
		return -ENOENT;
    f68e:	f06f 0001 	mvn.w	r0, #1
    f692:	e7f4      	b.n	f67e <send+0x32>
    f694:	fffff82e 	.word	0xfffff82e

0000f698 <register_ept>:
{
    f698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f69c:	4688      	mov	r8, r1
    f69e:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    f6a0:	6906      	ldr	r6, [r0, #16]
    f6a2:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    f6a6:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    f6aa:	2b02      	cmp	r3, #2
    f6ac:	d15f      	bne.n	f76e <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    f6ae:	6813      	ldr	r3, [r2, #0]
    f6b0:	b923      	cbnz	r3, f6bc <register_ept+0x24>
		return -EINVAL;
    f6b2:	f06f 0015 	mvn.w	r0, #21
}
    f6b6:	b003      	add	sp, #12
    f6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    f6bc:	781b      	ldrb	r3, [r3, #0]
    f6be:	2b00      	cmp	r3, #0
    f6c0:	d0f7      	beq.n	f6b2 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    f6c2:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    f6c6:	f1b9 0f00 	cmp.w	r9, #0
    f6ca:	d133      	bne.n	f734 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    f6cc:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    f6d0:	f04f 32ff 	mov.w	r2, #4294967295
    f6d4:	f04f 33ff 	mov.w	r3, #4294967295
    f6d8:	4638      	mov	r0, r7
    f6da:	f010 f949 	bl	1f970 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    f6de:	4630      	mov	r0, r6
    f6e0:	682a      	ldr	r2, [r5, #0]
    f6e2:	a901      	add	r1, sp, #4
    f6e4:	f7ff fe48 	bl	f378 <get_ept>
	if (rpmsg_ept == NULL) {
    f6e8:	9c01      	ldr	r4, [sp, #4]
    f6ea:	b91c      	cbnz	r4, f6f4 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f6ec:	4638      	mov	r0, r7
    f6ee:	f015 fe07 	bl	25300 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    f6f2:	e7de      	b.n	f6b2 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    f6f4:	f105 0308 	add.w	r3, r5, #8
    f6f8:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    f6fa:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    f6fc:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    f700:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    f702:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    f704:	b160      	cbz	r0, f720 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f706:	4638      	mov	r0, r7
    f708:	f015 fdfa 	bl	25300 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    f70c:	4621      	mov	r1, r4
    f70e:	4630      	mov	r0, r6
    f710:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f712:	682a      	ldr	r2, [r5, #0]
    f714:	f7ff fe0e 	bl	f334 <advertise_ept>
	return 0;
    f718:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    f71a:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    f71e:	e7ca      	b.n	f6b6 <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    f720:	2220      	movs	r2, #32
    f722:	6829      	ldr	r1, [r5, #0]
    f724:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f728:	f01a f9db 	bl	29ae2 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f72c:	4638      	mov	r0, r7
    f72e:	f015 fde7 	bl	25300 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    f732:	e7f1      	b.n	f718 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f734:	4630      	mov	r0, r6
    f736:	490f      	ldr	r1, [pc, #60]	; (f774 <register_ept+0xdc>)
    f738:	f015 fdaf 	bl	2529a <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    f73c:	4604      	mov	r4, r0
    f73e:	2800      	cmp	r0, #0
    f740:	d0b7      	beq.n	f6b2 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    f742:	f105 0308 	add.w	r3, r5, #8
    f746:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    f748:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    f74a:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    f74c:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    f74e:	2300      	movs	r3, #0
    f750:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    f754:	2220      	movs	r2, #32
    f756:	6829      	ldr	r1, [r5, #0]
    f758:	3040      	adds	r0, #64	; 0x40
    f75a:	f01a f9c2 	bl	29ae2 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    f75e:	4622      	mov	r2, r4
    f760:	2101      	movs	r1, #1
    f762:	4630      	mov	r0, r6
    f764:	f000 f83e 	bl	f7e4 <ipc_rpmsg_register_ept>
	if (err != 0) {
    f768:	2800      	cmp	r0, #0
    f76a:	d0d5      	beq.n	f718 <register_ept+0x80>
    f76c:	e7a1      	b.n	f6b2 <register_ept+0x1a>
		return -EBUSY;
    f76e:	f06f 000f 	mvn.w	r0, #15
    f772:	e7a0      	b.n	f6b6 <register_ept+0x1e>
    f774:	0002f304 	.word	0x0002f304

0000f778 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f77c:	4605      	mov	r5, r0
    f77e:	460e      	mov	r6, r1
    f780:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f782:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    f784:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    f788:	b085      	sub	sp, #20
    f78a:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    f78e:	4621      	mov	r1, r4
    f790:	4630      	mov	r0, r6
    f792:	f7f9 fddb 	bl	934c <strcmp>
    f796:	b9e0      	cbnz	r0, f7d2 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f798:	4b11      	ldr	r3, [pc, #68]	; (f7e0 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    f79a:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f79e:	9302      	str	r3, [sp, #8]
    f7a0:	f8da 3010 	ldr.w	r3, [sl, #16]
    f7a4:	4632      	mov	r2, r6
    f7a6:	e9cd 8300 	strd	r8, r3, [sp]
    f7aa:	4629      	mov	r1, r5
    f7ac:	f04f 33ff 	mov.w	r3, #4294967295
    f7b0:	4658      	mov	r0, fp
    f7b2:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    f7b6:	f00f f85f 	bl	1e878 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    f7ba:	b960      	cbnz	r0, f7d6 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    f7bc:	2370      	movs	r3, #112	; 0x70
    f7be:	2201      	movs	r2, #1
    f7c0:	fb03 9307 	mla	r3, r3, r7, r9
    f7c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    f7c8:	f8da 300c 	ldr.w	r3, [sl, #12]
    f7cc:	b10b      	cbz	r3, f7d2 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    f7ce:	4658      	mov	r0, fp
    f7d0:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f7d2:	3470      	adds	r4, #112	; 0x70
    f7d4:	b117      	cbz	r7, f7dc <ns_bind_cb+0x64>
			}
		}
	}
}
    f7d6:	b005      	add	sp, #20
    f7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f7dc:	2701      	movs	r7, #1
    f7de:	e7d6      	b.n	f78e <ns_bind_cb+0x16>
    f7e0:	00025407 	.word	0x00025407

0000f7e4 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    f7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f7e6:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    f7e8:	b190      	cbz	r0, f810 <ipc_rpmsg_register_ept+0x2c>
    f7ea:	b18a      	cbz	r2, f810 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    f7ec:	2901      	cmp	r1, #1
    f7ee:	d112      	bne.n	f816 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    f7f0:	4b0a      	ldr	r3, [pc, #40]	; (f81c <ipc_rpmsg_register_ept+0x38>)
    f7f2:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f7f6:	9302      	str	r3, [sp, #8]
    f7f8:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    f7fc:	3240      	adds	r2, #64	; 0x40
    f7fe:	9301      	str	r3, [sp, #4]
    f800:	f04f 33ff 	mov.w	r3, #4294967295
    f804:	4620      	mov	r0, r4
    f806:	9300      	str	r3, [sp, #0]
    f808:	f00f f836 	bl	1e878 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    f80c:	b004      	add	sp, #16
    f80e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f810:	f06f 0015 	mvn.w	r0, #21
    f814:	e7fa      	b.n	f80c <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    f816:	2000      	movs	r0, #0
    f818:	e7f8      	b.n	f80c <ipc_rpmsg_register_ept+0x28>
    f81a:	bf00      	nop
    f81c:	00025407 	.word	0x00025407

0000f820 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    f820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f824:	b087      	sub	sp, #28
    f826:	460e      	mov	r6, r1
    f828:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    f82c:	4614      	mov	r4, r2
    f82e:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    f832:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    f834:	b330      	cbz	r0, f884 <ipc_rpmsg_init+0x64>
    f836:	b329      	cbz	r1, f884 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    f838:	f8df c050 	ldr.w	ip, [pc, #80]	; f88c <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    f83c:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    f840:	2d00      	cmp	r5, #0
    f842:	bf08      	it	eq
    f844:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    f846:	b99e      	cbnz	r6, f870 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    f848:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    f84c:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    f850:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    f852:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    f854:	f019 fd6a 	bl	2932c <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    f858:	ab03      	add	r3, sp, #12
    f85a:	e9cd 4300 	strd	r4, r3, [sp]
    f85e:	462a      	mov	r2, r5
    f860:	463b      	mov	r3, r7
    f862:	4641      	mov	r1, r8
    f864:	4648      	mov	r0, r9
    f866:	f00f f9d1 	bl	1ec0c <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    f86a:	b007      	add	sp, #28
    f86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    f870:	2200      	movs	r2, #0
    f872:	4641      	mov	r1, r8
    f874:	920e      	str	r2, [sp, #56]	; 0x38
    f876:	4648      	mov	r0, r9
    f878:	462a      	mov	r2, r5
}
    f87a:	b007      	add	sp, #28
    f87c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    f880:	f00f baee 	b.w	1ee60 <rpmsg_init_vdev>
		return -EINVAL;
    f884:	f06f 0015 	mvn.w	r0, #21
    f888:	e7ef      	b.n	f86a <ipc_rpmsg_init+0x4a>
    f88a:	bf00      	nop
    f88c:	0000f779 	.word	0x0000f779

0000f890 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    f890:	b5f0      	push	{r4, r5, r6, r7, lr}
    f892:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    f894:	4604      	mov	r4, r0
{
    f896:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    f898:	2800      	cmp	r0, #0
    f89a:	d06f      	beq.n	f97c <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    f89c:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    f89e:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    f8a0:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f8a2:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    f8a4:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    f8a8:	4f36      	ldr	r7, [pc, #216]	; (f984 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f8aa:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    f8ac:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    f8b0:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f8b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f8b8:	f04f 33ff 	mov.w	r3, #4294967295
    f8bc:	9300      	str	r3, [sp, #0]
    f8be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    f8c0:	f019 f89d 	bl	289fe <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    f8c4:	4a30      	ldr	r2, [pc, #192]	; (f988 <ipc_static_vrings_init+0xf8>)
    f8c6:	ab06      	add	r3, sp, #24
    f8c8:	e892 0003 	ldmia.w	r2, {r0, r1}
    f8cc:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    f8d0:	4618      	mov	r0, r3
    f8d2:	f00e fea5 	bl	1e620 <metal_init>
	if (err != 0) {
    f8d6:	4605      	mov	r5, r0
    f8d8:	b9d8      	cbnz	r0, f912 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    f8da:	f104 0034 	add.w	r0, r4, #52	; 0x34
    f8de:	f00e fe7f 	bl	1e5e0 <metal_register_generic_device>
	if (err != 0) {
    f8e2:	4605      	mov	r5, r0
    f8e4:	b9a8      	cbnz	r0, f912 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    f8e6:	4639      	mov	r1, r7
    f8e8:	4828      	ldr	r0, [pc, #160]	; (f98c <ipc_static_vrings_init+0xfc>)
    f8ea:	aa05      	add	r2, sp, #20
    f8ec:	f019 f85f 	bl	289ae <metal_device_open>
	if (err != 0) {
    f8f0:	4605      	mov	r5, r0
    f8f2:	b970      	cbnz	r0, f912 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    f8f4:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    f8f6:	689a      	ldr	r2, [r3, #8]
    f8f8:	b172      	cbz	r2, f918 <ipc_static_vrings_init+0x88>
    f8fa:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    f8fc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    f900:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    f904:	f015 fdb0 	bl	25468 <virtqueue_allocate>
    f908:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    f90c:	b930      	cbnz	r0, f91c <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    f90e:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    f912:	4628      	mov	r0, r5
    f914:	b009      	add	sp, #36	; 0x24
    f916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f918:	4603      	mov	r3, r0
    f91a:	e7ef      	b.n	f8fc <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    f91c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    f920:	f015 fda2 	bl	25468 <virtqueue_allocate>
    f924:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    f928:	2800      	cmp	r0, #0
    f92a:	d0f0      	beq.n	f90e <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    f92c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    f930:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    f934:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    f938:	2304      	movs	r3, #4
    f93a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    f93e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    f942:	2302      	movs	r3, #2
    f944:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    f946:	4b12      	ldr	r3, [pc, #72]	; (f990 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    f948:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    f94c:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    f950:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    f954:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    f958:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    f95c:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    f95e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    f962:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    f966:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    f96a:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    f96e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    f972:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    f976:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    f978:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    f97a:	e7ca      	b.n	f912 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    f97c:	f06f 0515 	mvn.w	r5, #21
    f980:	e7c7      	b.n	f912 <ipc_static_vrings_init+0x82>
    f982:	bf00      	nop
    f984:	0002cbed 	.word	0x0002cbed
    f988:	0002a864 	.word	0x0002a864
    f98c:	0002cbf7 	.word	0x0002cbf7
    f990:	0002ada4 	.word	0x0002ada4

0000f994 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    f994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f998:	4605      	mov	r5, r0
	__asm__ volatile(
    f99a:	f04f 0320 	mov.w	r3, #32
    f99e:	f3ef 8611 	mrs	r6, BASEPRI
    f9a2:	f383 8812 	msr	BASEPRI_MAX, r3
    f9a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f9aa:	4820      	ldr	r0, [pc, #128]	; (fa2c <pm_state_notify+0x98>)
    f9ac:	f00f ff8a 	bl	1f8c4 <z_spin_lock_valid>
    f9b0:	b968      	cbnz	r0, f9ce <pm_state_notify+0x3a>
    f9b2:	2394      	movs	r3, #148	; 0x94
    f9b4:	4a1e      	ldr	r2, [pc, #120]	; (fa30 <pm_state_notify+0x9c>)
    f9b6:	491f      	ldr	r1, [pc, #124]	; (fa34 <pm_state_notify+0xa0>)
    f9b8:	481f      	ldr	r0, [pc, #124]	; (fa38 <pm_state_notify+0xa4>)
    f9ba:	f015 f9b0 	bl	24d1e <assert_print>
    f9be:	491b      	ldr	r1, [pc, #108]	; (fa2c <pm_state_notify+0x98>)
    f9c0:	481e      	ldr	r0, [pc, #120]	; (fa3c <pm_state_notify+0xa8>)
    f9c2:	f015 f9ac 	bl	24d1e <assert_print>
    f9c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f9c8:	4819      	ldr	r0, [pc, #100]	; (fa30 <pm_state_notify+0x9c>)
    f9ca:	f015 f9a1 	bl	24d10 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    f9ce:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    f9d2:	4816      	ldr	r0, [pc, #88]	; (fa2c <pm_state_notify+0x98>)
    f9d4:	f00f ff92 	bl	1f8fc <z_spin_lock_set_owner>
	return list->head;
    f9d8:	4b19      	ldr	r3, [pc, #100]	; (fa40 <pm_state_notify+0xac>)
    f9da:	4f1a      	ldr	r7, [pc, #104]	; (fa44 <pm_state_notify+0xb0>)
    f9dc:	681c      	ldr	r4, [r3, #0]
    f9de:	f8df 8068 	ldr.w	r8, [pc, #104]	; fa48 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    f9e2:	b97c      	cbnz	r4, fa04 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f9e4:	4811      	ldr	r0, [pc, #68]	; (fa2c <pm_state_notify+0x98>)
    f9e6:	f00f ff7b 	bl	1f8e0 <z_spin_unlock_valid>
    f9ea:	b9c8      	cbnz	r0, fa20 <pm_state_notify+0x8c>
    f9ec:	23c2      	movs	r3, #194	; 0xc2
    f9ee:	4a10      	ldr	r2, [pc, #64]	; (fa30 <pm_state_notify+0x9c>)
    f9f0:	4916      	ldr	r1, [pc, #88]	; (fa4c <pm_state_notify+0xb8>)
    f9f2:	4811      	ldr	r0, [pc, #68]	; (fa38 <pm_state_notify+0xa4>)
    f9f4:	f015 f993 	bl	24d1e <assert_print>
    f9f8:	490c      	ldr	r1, [pc, #48]	; (fa2c <pm_state_notify+0x98>)
    f9fa:	4815      	ldr	r0, [pc, #84]	; (fa50 <pm_state_notify+0xbc>)
    f9fc:	f015 f98f 	bl	24d1e <assert_print>
    fa00:	21c2      	movs	r1, #194	; 0xc2
    fa02:	e7e1      	b.n	f9c8 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    fa04:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    fa08:	2d00      	cmp	r5, #0
    fa0a:	bf18      	it	ne
    fa0c:	4613      	movne	r3, r2
		if (callback) {
    fa0e:	b12b      	cbz	r3, fa1c <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    fa10:	f898 2014 	ldrb.w	r2, [r8, #20]
    fa14:	fb09 f202 	mul.w	r2, r9, r2
    fa18:	5cb8      	ldrb	r0, [r7, r2]
    fa1a:	4798      	blx	r3
	return node->next;
    fa1c:	6824      	ldr	r4, [r4, #0]
    fa1e:	e7e0      	b.n	f9e2 <pm_state_notify+0x4e>
	__asm__ volatile(
    fa20:	f386 8811 	msr	BASEPRI, r6
    fa24:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    fa28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fa2c:	20020f88 	.word	0x20020f88
    fa30:	0002c4fc 	.word	0x0002c4fc
    fa34:	0002c555 	.word	0x0002c555
    fa38:	0002b6e9 	.word	0x0002b6e9
    fa3c:	0002c56a 	.word	0x0002c56a
    fa40:	20020fa8 	.word	0x20020fa8
    fa44:	20020f9c 	.word	0x20020f9c
    fa48:	20021504 	.word	0x20021504
    fa4c:	0002c529 	.word	0x0002c529
    fa50:	0002c540 	.word	0x0002c540

0000fa54 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    fa54:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    fa56:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    fa58:	4b16      	ldr	r3, [pc, #88]	; (fab4 <pm_system_resume+0x60>)
    fa5a:	7d1c      	ldrb	r4, [r3, #20]
    fa5c:	f004 031f 	and.w	r3, r4, #31
    fa60:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fa62:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fa64:	4b14      	ldr	r3, [pc, #80]	; (fab8 <pm_system_resume+0x64>)
    fa66:	0961      	lsrs	r1, r4, #5
    fa68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    fa6c:	e8d3 1fef 	ldaex	r1, [r3]
    fa70:	ea01 0500 	and.w	r5, r1, r0
    fa74:	e8c3 5fe6 	stlex	r6, r5, [r3]
    fa78:	2e00      	cmp	r6, #0
    fa7a:	d1f7      	bne.n	fa6c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    fa7c:	420a      	tst	r2, r1
    fa7e:	d013      	beq.n	faa8 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    fa80:	4b0e      	ldr	r3, [pc, #56]	; (fabc <pm_system_resume+0x68>)
    fa82:	4d0f      	ldr	r5, [pc, #60]	; (fac0 <pm_system_resume+0x6c>)
    fa84:	b18b      	cbz	r3, faaa <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    fa86:	230c      	movs	r3, #12
    fa88:	4363      	muls	r3, r4
    fa8a:	18ea      	adds	r2, r5, r3
    fa8c:	7851      	ldrb	r1, [r2, #1]
    fa8e:	5ce8      	ldrb	r0, [r5, r3]
    fa90:	f015 f98a 	bl	24da8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    fa94:	2000      	movs	r0, #0
    fa96:	f7ff ff7d 	bl	f994 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    fa9a:	230c      	movs	r3, #12
    fa9c:	435c      	muls	r4, r3
    fa9e:	2300      	movs	r3, #0
    faa0:	192a      	adds	r2, r5, r4
    faa2:	512b      	str	r3, [r5, r4]
    faa4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    faa8:	bd70      	pop	{r4, r5, r6, pc}
    faaa:	f383 8811 	msr	BASEPRI, r3
    faae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    fab2:	e7ef      	b.n	fa94 <pm_system_resume+0x40>
    fab4:	20021504 	.word	0x20021504
    fab8:	20020fb0 	.word	0x20020fb0
    fabc:	00024da9 	.word	0x00024da9
    fac0:	20020f9c 	.word	0x20020f9c

0000fac4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    fac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    fac8:	4b45      	ldr	r3, [pc, #276]	; (fbe0 <pm_system_suspend+0x11c>)
{
    faca:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    facc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    face:	f04f 0320 	mov.w	r3, #32
    fad2:	f3ef 8811 	mrs	r8, BASEPRI
    fad6:	f383 8812 	msr	BASEPRI_MAX, r3
    fada:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fade:	4841      	ldr	r0, [pc, #260]	; (fbe4 <pm_system_suspend+0x120>)
    fae0:	f00f fef0 	bl	1f8c4 <z_spin_lock_valid>
    fae4:	b968      	cbnz	r0, fb02 <pm_system_suspend+0x3e>
    fae6:	2394      	movs	r3, #148	; 0x94
    fae8:	4a3f      	ldr	r2, [pc, #252]	; (fbe8 <pm_system_suspend+0x124>)
    faea:	4940      	ldr	r1, [pc, #256]	; (fbec <pm_system_suspend+0x128>)
    faec:	4840      	ldr	r0, [pc, #256]	; (fbf0 <pm_system_suspend+0x12c>)
    faee:	f015 f916 	bl	24d1e <assert_print>
    faf2:	493c      	ldr	r1, [pc, #240]	; (fbe4 <pm_system_suspend+0x120>)
    faf4:	483f      	ldr	r0, [pc, #252]	; (fbf4 <pm_system_suspend+0x130>)
    faf6:	f015 f912 	bl	24d1e <assert_print>
    fafa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fafc:	483a      	ldr	r0, [pc, #232]	; (fbe8 <pm_system_suspend+0x124>)
    fafe:	f015 f907 	bl	24d10 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    fb02:	240c      	movs	r4, #12
    fb04:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    fb06:	4837      	ldr	r0, [pc, #220]	; (fbe4 <pm_system_suspend+0x120>)
    fb08:	f00f fef8 	bl	1f8fc <z_spin_lock_set_owner>
    fb0c:	4b3a      	ldr	r3, [pc, #232]	; (fbf8 <pm_system_suspend+0x134>)
    fb0e:	4e3b      	ldr	r6, [pc, #236]	; (fbfc <pm_system_suspend+0x138>)
    fb10:	5d19      	ldrb	r1, [r3, r4]
    fb12:	191a      	adds	r2, r3, r4
    fb14:	b1b9      	cbz	r1, fb46 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    fb16:	ca07      	ldmia	r2, {r0, r1, r2}
    fb18:	eb06 0c04 	add.w	ip, r6, r4
    fb1c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    fb20:	2200      	movs	r2, #0
    fb22:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fb24:	482f      	ldr	r0, [pc, #188]	; (fbe4 <pm_system_suspend+0x120>)
    fb26:	f00f fedb 	bl	1f8e0 <z_spin_unlock_valid>
    fb2a:	4604      	mov	r4, r0
    fb2c:	b9b0      	cbnz	r0, fb5c <pm_system_suspend+0x98>
    fb2e:	23c2      	movs	r3, #194	; 0xc2
    fb30:	4a2d      	ldr	r2, [pc, #180]	; (fbe8 <pm_system_suspend+0x124>)
    fb32:	4933      	ldr	r1, [pc, #204]	; (fc00 <pm_system_suspend+0x13c>)
    fb34:	482e      	ldr	r0, [pc, #184]	; (fbf0 <pm_system_suspend+0x12c>)
    fb36:	f015 f8f2 	bl	24d1e <assert_print>
    fb3a:	492a      	ldr	r1, [pc, #168]	; (fbe4 <pm_system_suspend+0x120>)
    fb3c:	4831      	ldr	r0, [pc, #196]	; (fc04 <pm_system_suspend+0x140>)
    fb3e:	f015 f8ee 	bl	24d1e <assert_print>
    fb42:	21c2      	movs	r1, #194	; 0xc2
    fb44:	e7da      	b.n	fafc <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    fb46:	4639      	mov	r1, r7
    fb48:	4628      	mov	r0, r5
    fb4a:	f000 f865 	bl	fc18 <pm_policy_next_state>
		if (info != NULL) {
    fb4e:	2800      	cmp	r0, #0
    fb50:	d0e8      	beq.n	fb24 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    fb52:	c807      	ldmia	r0, {r0, r1, r2}
    fb54:	4434      	add	r4, r6
    fb56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fb5a:	e7e3      	b.n	fb24 <pm_system_suspend+0x60>
	__asm__ volatile(
    fb5c:	f388 8811 	msr	BASEPRI, r8
    fb60:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    fb64:	230c      	movs	r3, #12
    fb66:	436b      	muls	r3, r5
    fb68:	18f2      	adds	r2, r6, r3
    fb6a:	5cf3      	ldrb	r3, [r6, r3]
    fb6c:	b3ab      	cbz	r3, fbda <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    fb6e:	1c7b      	adds	r3, r7, #1
    fb70:	d00f      	beq.n	fb92 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
    fb72:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    fb76:	2100      	movs	r1, #0
    fb78:	f8d2 e008 	ldr.w	lr, [r2, #8]
    fb7c:	4822      	ldr	r0, [pc, #136]	; (fc08 <pm_system_suspend+0x144>)
    fb7e:	2300      	movs	r3, #0
    fb80:	fbee 010c 	umlal	r0, r1, lr, ip
    fb84:	4a21      	ldr	r2, [pc, #132]	; (fc0c <pm_system_suspend+0x148>)
    fb86:	f7f9 f9b3 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    fb8a:	2101      	movs	r1, #1
    fb8c:	1a38      	subs	r0, r7, r0
    fb8e:	f012 fb77 	bl	22280 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    fb92:	f011 f9f5 	bl	20f80 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    fb96:	2001      	movs	r0, #1
    fb98:	f7ff fefc 	bl	f994 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fb9c:	4b1c      	ldr	r3, [pc, #112]	; (fc10 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fb9e:	096a      	lsrs	r2, r5, #5
    fba0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    fba4:	2201      	movs	r2, #1
    fba6:	f005 011f 	and.w	r1, r5, #31
    fbaa:	408a      	lsls	r2, r1
    fbac:	e8d3 0fef 	ldaex	r0, [r3]
    fbb0:	4310      	orrs	r0, r2
    fbb2:	e8c3 0fe1 	stlex	r1, r0, [r3]
    fbb6:	2900      	cmp	r1, #0
    fbb8:	d1f8      	bne.n	fbac <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    fbba:	4b16      	ldr	r3, [pc, #88]	; (fc14 <pm_system_suspend+0x150>)
    fbbc:	b133      	cbz	r3, fbcc <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    fbbe:	230c      	movs	r3, #12
    fbc0:	436b      	muls	r3, r5
    fbc2:	18f2      	adds	r2, r6, r3
    fbc4:	7851      	ldrb	r1, [r2, #1]
    fbc6:	5cf0      	ldrb	r0, [r6, r3]
    fbc8:	f015 f8e2 	bl	24d90 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    fbcc:	f7ff ff42 	bl	fa54 <pm_system_resume>
	k_sched_unlock();
    fbd0:	f011 fa42 	bl	21058 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    fbd4:	4620      	mov	r0, r4
    fbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    fbda:	461c      	mov	r4, r3
    fbdc:	e7fa      	b.n	fbd4 <pm_system_suspend+0x110>
    fbde:	bf00      	nop
    fbe0:	20021504 	.word	0x20021504
    fbe4:	20020f8c 	.word	0x20020f8c
    fbe8:	0002c4fc 	.word	0x0002c4fc
    fbec:	0002c555 	.word	0x0002c555
    fbf0:	0002b6e9 	.word	0x0002b6e9
    fbf4:	0002c56a 	.word	0x0002c56a
    fbf8:	20020f90 	.word	0x20020f90
    fbfc:	20020f9c 	.word	0x20020f9c
    fc00:	0002c529 	.word	0x0002c529
    fc04:	0002c540 	.word	0x0002c540
    fc08:	000f423f 	.word	0x000f423f
    fc0c:	000f4240 	.word	0x000f4240
    fc10:	20020fb0 	.word	0x20020fb0
    fc14:	00024d91 	.word	0x00024d91

0000fc18 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    fc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc1c:	b085      	sub	sp, #20
    fc1e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    fc20:	a903      	add	r1, sp, #12
    fc22:	f000 f843 	bl	fcac <pm_state_cpu_get_all>
    fc26:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    fc2a:	4604      	mov	r4, r0
    fc2c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    fc30:	4b1b      	ldr	r3, [pc, #108]	; (fca0 <pm_policy_next_state+0x88>)
    fc32:	9d03      	ldr	r5, [sp, #12]
    fc34:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    fc38:	1e43      	subs	r3, r0, #1
    fc3a:	b21b      	sxth	r3, r3
    fc3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fc40:	f8df 8060 	ldr.w	r8, [pc, #96]	; fca4 <pm_policy_next_state+0x8c>
    fc44:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    fc48:	b924      	cbnz	r4, fc54 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    fc4a:	46a1      	mov	r9, r4
}
    fc4c:	4648      	mov	r0, r9
    fc4e:	b005      	add	sp, #20
    fc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc54:	46c4      	mov	ip, r8
    fc56:	4659      	mov	r1, fp
    fc58:	6868      	ldr	r0, [r5, #4]
    fc5a:	2300      	movs	r3, #0
    fc5c:	fbe0 c107 	umlal	ip, r1, r0, r7
    fc60:	4a11      	ldr	r2, [pc, #68]	; (fca8 <pm_policy_next_state+0x90>)
    fc62:	4660      	mov	r0, ip
    fc64:	f7f9 f944 	bl	8ef0 <__aeabi_uldivmod>
    fc68:	46c4      	mov	ip, r8
    fc6a:	4659      	mov	r1, fp
    fc6c:	9001      	str	r0, [sp, #4]
    fc6e:	68a8      	ldr	r0, [r5, #8]
    fc70:	2300      	movs	r3, #0
    fc72:	fbe0 c107 	umlal	ip, r1, r0, r7
    fc76:	4a0c      	ldr	r2, [pc, #48]	; (fca8 <pm_policy_next_state+0x90>)
    fc78:	4660      	mov	r0, ip
    fc7a:	f7f9 f939 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    fc7e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    fc82:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    fc84:	d001      	beq.n	fc8a <pm_policy_next_state+0x72>
    fc86:	4582      	cmp	sl, r0
    fc88:	d905      	bls.n	fc96 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    fc8a:	1c73      	adds	r3, r6, #1
    fc8c:	d0de      	beq.n	fc4c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    fc8e:	9b01      	ldr	r3, [sp, #4]
    fc90:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    fc92:	42b0      	cmp	r0, r6
    fc94:	d9da      	bls.n	fc4c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    fc96:	3c01      	subs	r4, #1
    fc98:	b2a4      	uxth	r4, r4
    fc9a:	3d0c      	subs	r5, #12
    fc9c:	e7d4      	b.n	fc48 <pm_policy_next_state+0x30>
    fc9e:	bf00      	nop
    fca0:	2000842c 	.word	0x2000842c
    fca4:	000f423f 	.word	0x000f423f
    fca8:	000f4240 	.word	0x000f4240

0000fcac <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    fcac:	b908      	cbnz	r0, fcb2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    fcae:	4b02      	ldr	r3, [pc, #8]	; (fcb8 <pm_state_cpu_get_all+0xc>)
    fcb0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    fcb2:	2000      	movs	r0, #0
    fcb4:	4770      	bx	lr
    fcb6:	bf00      	nop
    fcb8:	0002adc8 	.word	0x0002adc8

0000fcbc <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
    fcbc:	4b03      	ldr	r3, [pc, #12]	; (fccc <nus_ccc_cfg_changed+0x10>)
    fcbe:	689b      	ldr	r3, [r3, #8]
    fcc0:	b11b      	cbz	r3, fcca <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
    fcc2:	1e48      	subs	r0, r1, #1
    fcc4:	bf18      	it	ne
    fcc6:	2001      	movne	r0, #1
    fcc8:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
    fcca:	4770      	bx	lr
    fccc:	20020fb4 	.word	0x20020fb4

0000fcd0 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
    fcd0:	b510      	push	{r4, lr}
    fcd2:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
    fcd4:	4b03      	ldr	r3, [pc, #12]	; (fce4 <on_receive+0x14>)
{
    fcd6:	4611      	mov	r1, r2
	if (nus_cb.received) {
    fcd8:	681b      	ldr	r3, [r3, #0]
    fcda:	b10b      	cbz	r3, fce0 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
    fcdc:	4622      	mov	r2, r4
    fcde:	4798      	blx	r3
}
	return len;
}
    fce0:	4620      	mov	r0, r4
    fce2:	bd10      	pop	{r4, pc}
    fce4:	20020fb4 	.word	0x20020fb4

0000fce8 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
    fce8:	4b02      	ldr	r3, [pc, #8]	; (fcf4 <on_sent+0xc>)
    fcea:	685b      	ldr	r3, [r3, #4]
    fcec:	b103      	cbz	r3, fcf0 <on_sent+0x8>
		nus_cb.sent(conn);
    fcee:	4718      	bx	r3
	}
}
    fcf0:	4770      	bx	lr
    fcf2:	bf00      	nop
    fcf4:	20020fb4 	.word	0x20020fb4

0000fcf8 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
    fcf8:	b130      	cbz	r0, fd08 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
    fcfa:	4b04      	ldr	r3, [pc, #16]	; (fd0c <bt_nus_init+0x14>)
    fcfc:	6802      	ldr	r2, [r0, #0]
    fcfe:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
    fd00:	6842      	ldr	r2, [r0, #4]
    fd02:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
    fd04:	6882      	ldr	r2, [r0, #8]
    fd06:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
    fd08:	2000      	movs	r0, #0
    fd0a:	4770      	bx	lr
    fd0c:	20020fb4 	.word	0x20020fb4

0000fd10 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
    fd10:	b570      	push	{r4, r5, r6, lr}
    fd12:	460e      	mov	r6, r1
    fd14:	4615      	mov	r5, r2
    fd16:	4604      	mov	r4, r0
    fd18:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
    fd1a:	2100      	movs	r1, #0
    fd1c:	2218      	movs	r2, #24
    fd1e:	4668      	mov	r0, sp
    fd20:	f019 fd9d 	bl	2985e <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
    fd24:	490b      	ldr	r1, [pc, #44]	; (fd54 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
    fd26:	4b0c      	ldr	r3, [pc, #48]	; (fd58 <bt_nus_send+0x48>)
	params.data = data;
    fd28:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
    fd2c:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
    fd30:	9304      	str	r3, [sp, #16]

	if (!conn) {
    fd32:	b92c      	cbnz	r4, fd40 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
    fd34:	4669      	mov	r1, sp
    fd36:	4620      	mov	r0, r4
    fd38:	f007 f866 	bl	16e08 <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
    fd3c:	b006      	add	sp, #24
    fd3e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
    fd40:	2201      	movs	r2, #1
    fd42:	4620      	mov	r0, r4
    fd44:	f006 fd26 	bl	16794 <bt_gatt_is_subscribed>
    fd48:	2800      	cmp	r0, #0
    fd4a:	d1f3      	bne.n	fd34 <bt_nus_send+0x24>
		return -EINVAL;
    fd4c:	f06f 0015 	mvn.w	r0, #21
    fd50:	e7f4      	b.n	fd3c <bt_nus_send+0x2c>
    fd52:	bf00      	nop
    fd54:	0002adf0 	.word	0x0002adf0
    fd58:	0000fce9 	.word	0x0000fce9

0000fd5c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    fd5c:	4904      	ldr	r1, [pc, #16]	; (fd70 <sub_bytes+0x14>)
    fd5e:	1e43      	subs	r3, r0, #1
    fd60:	300f      	adds	r0, #15
    fd62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    fd66:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    fd68:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    fd6a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    fd6c:	d1f9      	bne.n	fd62 <sub_bytes+0x6>
	}
}
    fd6e:	4770      	bx	lr
    fd70:	0002cc09 	.word	0x0002cc09

0000fd74 <tc_aes128_set_encrypt_key>:
{
    fd74:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd76:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    fd78:	4e26      	ldr	r6, [pc, #152]	; (fe14 <tc_aes128_set_encrypt_key+0xa0>)
{
    fd7a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    fd7c:	ad01      	add	r5, sp, #4
{
    fd7e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    fd80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fd82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fd84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fd86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fd88:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    fd8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    fd90:	4638      	mov	r0, r7
    fd92:	2f00      	cmp	r7, #0
    fd94:	d039      	beq.n	fe0a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    fd96:	2c00      	cmp	r4, #0
    fd98:	d039      	beq.n	fe0e <tc_aes128_set_encrypt_key+0x9a>
    fd9a:	1f38      	subs	r0, r7, #4
    fd9c:	4602      	mov	r2, r0
    fd9e:	4621      	mov	r1, r4
    fda0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    fda2:	784b      	ldrb	r3, [r1, #1]
    fda4:	780d      	ldrb	r5, [r1, #0]
    fda6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    fda8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    fdac:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    fdae:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    fdb0:	432b      	orrs	r3, r5
    fdb2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    fdb6:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    fdb8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    fdbc:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    fdc0:	d1ef      	bne.n	fda2 <tc_aes128_set_encrypt_key+0x2e>
    fdc2:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    fdc4:	4c14      	ldr	r4, [pc, #80]	; (fe18 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    fdc6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    fdc8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    fdca:	d116      	bne.n	fdfa <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    fdcc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    fdd0:	5ca5      	ldrb	r5, [r4, r2]
    fdd2:	0e1a      	lsrs	r2, r3, #24
    fdd4:	5ca2      	ldrb	r2, [r4, r2]
    fdd6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    fdda:	f3c3 2507 	ubfx	r5, r3, #8, #8
    fdde:	5d65      	ldrb	r5, [r4, r5]
    fde0:	b2db      	uxtb	r3, r3
    fde2:	5ce3      	ldrb	r3, [r4, r3]
    fde4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    fde8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    fdec:	f021 0303 	bic.w	r3, r1, #3
    fdf0:	3330      	adds	r3, #48	; 0x30
    fdf2:	446b      	add	r3, sp
    fdf4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    fdf8:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    fdfa:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    fdfe:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    fe00:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    fe02:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    fe04:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    fe06:	d1de      	bne.n	fdc6 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    fe08:	2001      	movs	r0, #1
}
    fe0a:	b00d      	add	sp, #52	; 0x34
    fe0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    fe0e:	4620      	mov	r0, r4
    fe10:	e7fb      	b.n	fe0a <tc_aes128_set_encrypt_key+0x96>
    fe12:	bf00      	nop
    fe14:	0002a86c 	.word	0x0002a86c
    fe18:	0002cc09 	.word	0x0002cc09

0000fe1c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    fe1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    fe20:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    fe22:	6803      	ldr	r3, [r0, #0]
{
    fe24:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    fe26:	9302      	str	r3, [sp, #8]
    fe28:	6843      	ldr	r3, [r0, #4]
    fe2a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; ffe8 <compress+0x1cc>
    fe2e:	9303      	str	r3, [sp, #12]
    fe30:	6883      	ldr	r3, [r0, #8]
    fe32:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    fe36:	9304      	str	r3, [sp, #16]
    fe38:	68c3      	ldr	r3, [r0, #12]
    fe3a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    fe3c:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    fe3e:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    fe42:	9306      	str	r3, [sp, #24]
    fe44:	6943      	ldr	r3, [r0, #20]
    fe46:	9307      	str	r3, [sp, #28]
    fe48:	6983      	ldr	r3, [r0, #24]
    fe4a:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    fe4e:	9308      	str	r3, [sp, #32]
    fe50:	69c3      	ldr	r3, [r0, #28]
    fe52:	4698      	mov	r8, r3
    fe54:	9309      	str	r3, [sp, #36]	; 0x24
    fe56:	9b08      	ldr	r3, [sp, #32]
    fe58:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    fe5a:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    fe5c:	ab0c      	add	r3, sp, #48	; 0x30
    fe5e:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fe60:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    fe64:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    fe66:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fe6a:	44a9      	add	r9, r5
    fe6c:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    fe70:	9d00      	ldr	r5, [sp, #0]
    fe72:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    fe76:	444b      	add	r3, r9
    fe78:	ea25 0502 	bic.w	r5, r5, r2
    fe7c:	ea02 090c 	and.w	r9, r2, ip
    fe80:	ea85 0509 	eor.w	r5, r5, r9
    fe84:	442b      	add	r3, r5
    fe86:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    fe88:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    fe8c:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    fe90:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    fe94:	4025      	ands	r5, r4
    fe96:	ea06 090b 	and.w	r9, r6, fp
    fe9a:	ea85 0509 	eor.w	r5, r5, r9
    fe9e:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    fea2:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    fea4:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    fea6:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    fea8:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    feac:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    feae:	46de      	mov	lr, fp
    feb0:	f8dd 8000 	ldr.w	r8, [sp]
    feb4:	f040 8088 	bne.w	ffc8 <compress+0x1ac>
    feb8:	f04f 0a10 	mov.w	sl, #16
    febc:	494b      	ldr	r1, [pc, #300]	; (ffec <compress+0x1d0>)
    febe:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    fec0:	4651      	mov	r1, sl
    fec2:	f10a 0a01 	add.w	sl, sl, #1
    fec6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    feca:	f00a 070f 	and.w	r7, sl, #15
    fece:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    fed2:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fed6:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    feda:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    fede:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    fee0:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    fee4:	f101 070e 	add.w	r7, r1, #14
    fee8:	f007 070f 	and.w	r7, r7, #15
    feec:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    fef0:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fef4:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    fef6:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    fefa:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    fefe:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ff02:	f001 010f 	and.w	r1, r1, #15
    ff06:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    ff0a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    ff0e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    ff12:	f859 ec40 	ldr.w	lr, [r9, #-64]
    ff16:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    ff1a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ff1e:	4471      	add	r1, lr
		s0 = sigma0(s0);
    ff20:	f8dd e004 	ldr.w	lr, [sp, #4]
    ff24:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    ff28:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ff2c:	4441      	add	r1, r8
		s1 = sigma1(s1);
    ff2e:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ff32:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ff34:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    ff38:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ff3c:	ea2c 0705 	bic.w	r7, ip, r5
    ff40:	ea87 0708 	eor.w	r7, r7, r8
    ff44:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    ff48:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ff4c:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    ff50:	4477      	add	r7, lr
    ff52:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ff56:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ff5a:	4477      	add	r7, lr
    ff5c:	440f      	add	r7, r1
    ff5e:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    ff60:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ff64:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    ff66:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ff6a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    ff6e:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    ff72:	ea07 0703 	and.w	r7, r7, r3
    ff76:	ea04 0806 	and.w	r8, r4, r6
    ff7a:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    ff7e:	ea87 0708 	eor.w	r7, r7, r8
    ff82:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    ff84:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    ff86:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    ff8a:	f8cd c000 	str.w	ip, [sp]
    ff8e:	46b3      	mov	fp, r6
    ff90:	d122      	bne.n	ffd8 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    ff92:	9902      	ldr	r1, [sp, #8]
    ff94:	4439      	add	r1, r7
    ff96:	6001      	str	r1, [r0, #0]
    ff98:	9903      	ldr	r1, [sp, #12]
    ff9a:	4419      	add	r1, r3
    ff9c:	9b04      	ldr	r3, [sp, #16]
    ff9e:	6041      	str	r1, [r0, #4]
    ffa0:	4423      	add	r3, r4
    ffa2:	6083      	str	r3, [r0, #8]
    ffa4:	9b05      	ldr	r3, [sp, #20]
    ffa6:	4433      	add	r3, r6
    ffa8:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    ffaa:	9b06      	ldr	r3, [sp, #24]
    ffac:	4473      	add	r3, lr
    ffae:	6103      	str	r3, [r0, #16]
    ffb0:	9b07      	ldr	r3, [sp, #28]
    ffb2:	442b      	add	r3, r5
    ffb4:	6143      	str	r3, [r0, #20]
    ffb6:	9b08      	ldr	r3, [sp, #32]
    ffb8:	4413      	add	r3, r2
    ffba:	6183      	str	r3, [r0, #24]
    ffbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ffbe:	4463      	add	r3, ip
    ffc0:	61c3      	str	r3, [r0, #28]
}
    ffc2:	b01d      	add	sp, #116	; 0x74
    ffc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffc8:	46b3      	mov	fp, r6
    ffca:	f8cd c000 	str.w	ip, [sp]
    ffce:	4626      	mov	r6, r4
    ffd0:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    ffd2:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    ffd4:	462a      	mov	r2, r5
    ffd6:	e740      	b.n	fe5a <compress+0x3e>
    ffd8:	4694      	mov	ip, r2
    ffda:	4626      	mov	r6, r4
    ffdc:	462a      	mov	r2, r5
    ffde:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    ffe0:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    ffe2:	463b      	mov	r3, r7
    ffe4:	e76c      	b.n	fec0 <compress+0xa4>
    ffe6:	bf00      	nop
    ffe8:	0002ae40 	.word	0x0002ae40
    ffec:	0002ae7c 	.word	0x0002ae7c

0000fff0 <tc_sha256_init>:
{
    fff0:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    fff2:	4604      	mov	r4, r0
    fff4:	b1c8      	cbz	r0, 1002a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    fff6:	2270      	movs	r2, #112	; 0x70
    fff8:	2100      	movs	r1, #0
    fffa:	f015 fa80 	bl	254fe <_set>
	s->iv[1] = 0xbb67ae85;
    fffe:	4b0b      	ldr	r3, [pc, #44]	; (1002c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2c>)
   10000:	4a0b      	ldr	r2, [pc, #44]	; (10030 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x30>)
	s->iv[3] = 0xa54ff53a;
   10002:	490c      	ldr	r1, [pc, #48]	; (10034 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x34>)
	s->iv[1] = 0xbb67ae85;
   10004:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   10008:	4b0b      	ldr	r3, [pc, #44]	; (10038 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x38>)
	s->iv[5] = 0x9b05688c;
   1000a:	480c      	ldr	r0, [pc, #48]	; (1003c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3c>)
	s->iv[3] = 0xa54ff53a;
   1000c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   10010:	4b0b      	ldr	r3, [pc, #44]	; (10040 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x40>)
   10012:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   10016:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   10018:	4b0a      	ldr	r3, [pc, #40]	; (10044 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x44>)
   1001a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   1001c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   10020:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   10024:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   10028:	61e3      	str	r3, [r4, #28]
}
   1002a:	bd10      	pop	{r4, pc}
   1002c:	bb67ae85 	.word	0xbb67ae85
   10030:	6a09e667 	.word	0x6a09e667
   10034:	3c6ef372 	.word	0x3c6ef372
   10038:	a54ff53a 	.word	0xa54ff53a
   1003c:	510e527f 	.word	0x510e527f
   10040:	9b05688c 	.word	0x9b05688c
   10044:	1f83d9ab 	.word	0x1f83d9ab

00010048 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10048:	4901      	ldr	r1, [pc, #4]	; (10050 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1004a:	2210      	movs	r2, #16
	str	r2, [r1]
   1004c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1004e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   10050:	e000ed10 	.word	0xe000ed10

00010054 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10054:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10056:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10058:	f380 8811 	msr	BASEPRI, r0
	isb
   1005c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   10060:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10064:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10066:	b662      	cpsie	i
	isb
   10068:	f3bf 8f6f 	isb	sy

	bx	lr
   1006c:	4770      	bx	lr
   1006e:	bf00      	nop

00010070 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   10070:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   10072:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10074:	f381 8811 	msr	BASEPRI, r1

	wfe
   10078:	bf20      	wfe

	msr	BASEPRI, r0
   1007a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1007e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   10080:	4770      	bx	lr
   10082:	bf00      	nop

00010084 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10084:	b570      	push	{r4, r5, r6, lr}
   10086:	4606      	mov	r6, r0

	if (esf != NULL) {
   10088:	460d      	mov	r5, r1
{
   1008a:	b086      	sub	sp, #24
	if (esf != NULL) {
   1008c:	2900      	cmp	r1, #0
   1008e:	d038      	beq.n	10102 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   10090:	2400      	movs	r4, #0
   10092:	688b      	ldr	r3, [r1, #8]
   10094:	2201      	movs	r2, #1
   10096:	9305      	str	r3, [sp, #20]
   10098:	684b      	ldr	r3, [r1, #4]
   1009a:	4620      	mov	r0, r4
   1009c:	9304      	str	r3, [sp, #16]
   1009e:	680b      	ldr	r3, [r1, #0]
   100a0:	491b      	ldr	r1, [pc, #108]	; (10110 <z_arm_fatal_error+0x8c>)
   100a2:	9303      	str	r3, [sp, #12]
   100a4:	4b1b      	ldr	r3, [pc, #108]	; (10114 <z_arm_fatal_error+0x90>)
   100a6:	e9cd 4400 	strd	r4, r4, [sp]
   100aa:	9302      	str	r3, [sp, #8]
   100ac:	4623      	mov	r3, r4
   100ae:	f015 fe64 	bl	25d7a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   100b2:	696b      	ldr	r3, [r5, #20]
   100b4:	2201      	movs	r2, #1
   100b6:	9305      	str	r3, [sp, #20]
   100b8:	692b      	ldr	r3, [r5, #16]
   100ba:	4620      	mov	r0, r4
   100bc:	9304      	str	r3, [sp, #16]
   100be:	68eb      	ldr	r3, [r5, #12]
   100c0:	4913      	ldr	r1, [pc, #76]	; (10110 <z_arm_fatal_error+0x8c>)
   100c2:	9303      	str	r3, [sp, #12]
   100c4:	4b14      	ldr	r3, [pc, #80]	; (10118 <z_arm_fatal_error+0x94>)
   100c6:	9400      	str	r4, [sp, #0]
   100c8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   100cc:	4623      	mov	r3, r4
   100ce:	f015 fe54 	bl	25d7a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   100d2:	69eb      	ldr	r3, [r5, #28]
   100d4:	2201      	movs	r2, #1
   100d6:	9303      	str	r3, [sp, #12]
   100d8:	4b10      	ldr	r3, [pc, #64]	; (1011c <z_arm_fatal_error+0x98>)
   100da:	4620      	mov	r0, r4
   100dc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   100e0:	490b      	ldr	r1, [pc, #44]	; (10110 <z_arm_fatal_error+0x8c>)
   100e2:	4623      	mov	r3, r4
   100e4:	9400      	str	r4, [sp, #0]
   100e6:	f015 fe48 	bl	25d7a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   100ea:	69ab      	ldr	r3, [r5, #24]
   100ec:	2201      	movs	r2, #1
   100ee:	9303      	str	r3, [sp, #12]
   100f0:	4b0b      	ldr	r3, [pc, #44]	; (10120 <z_arm_fatal_error+0x9c>)
   100f2:	4620      	mov	r0, r4
   100f4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   100f8:	4905      	ldr	r1, [pc, #20]	; (10110 <z_arm_fatal_error+0x8c>)
   100fa:	4623      	mov	r3, r4
   100fc:	9400      	str	r4, [sp, #0]
   100fe:	f015 fe3c 	bl	25d7a <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10102:	4629      	mov	r1, r5
   10104:	4630      	mov	r0, r6
}
   10106:	b006      	add	sp, #24
   10108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   1010c:	f00e bf46 	b.w	1ef9c <z_fatal_error>
   10110:	0002a7f8 	.word	0x0002a7f8
   10114:	0002cd09 	.word	0x0002cd09
   10118:	0002cd38 	.word	0x0002cd38
   1011c:	0002cd67 	.word	0x0002cd67
   10120:	0002cd76 	.word	0x0002cd76

00010124 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10124:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10126:	2800      	cmp	r0, #0
   10128:	db07      	blt.n	1013a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1012a:	2301      	movs	r3, #1
   1012c:	0941      	lsrs	r1, r0, #5
   1012e:	4a03      	ldr	r2, [pc, #12]	; (1013c <arch_irq_enable+0x18>)
   10130:	f000 001f 	and.w	r0, r0, #31
   10134:	4083      	lsls	r3, r0
   10136:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1013a:	4770      	bx	lr
   1013c:	e000e100 	.word	0xe000e100

00010140 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10140:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10142:	2800      	cmp	r0, #0
   10144:	db0c      	blt.n	10160 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10146:	2201      	movs	r2, #1
   10148:	4906      	ldr	r1, [pc, #24]	; (10164 <arch_irq_disable+0x24>)
   1014a:	0943      	lsrs	r3, r0, #5
   1014c:	f000 001f 	and.w	r0, r0, #31
   10150:	4082      	lsls	r2, r0
   10152:	3320      	adds	r3, #32
   10154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10158:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1015c:	f3bf 8f6f 	isb	sy
}
   10160:	4770      	bx	lr
   10162:	bf00      	nop
   10164:	e000e100 	.word	0xe000e100

00010168 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10168:	4b05      	ldr	r3, [pc, #20]	; (10180 <arch_irq_is_enabled+0x18>)
   1016a:	0942      	lsrs	r2, r0, #5
   1016c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10170:	2301      	movs	r3, #1
   10172:	f000 001f 	and.w	r0, r0, #31
   10176:	fa03 f000 	lsl.w	r0, r3, r0
}
   1017a:	4010      	ands	r0, r2
   1017c:	4770      	bx	lr
   1017e:	bf00      	nop
   10180:	e000e100 	.word	0xe000e100

00010184 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   10184:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   10186:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10188:	2b07      	cmp	r3, #7
{
   1018a:	4604      	mov	r4, r0
   1018c:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1018e:	d90f      	bls.n	101b0 <z_arm_irq_priority_set+0x2c>
   10190:	235b      	movs	r3, #91	; 0x5b
   10192:	4a10      	ldr	r2, [pc, #64]	; (101d4 <z_arm_irq_priority_set+0x50>)
   10194:	4910      	ldr	r1, [pc, #64]	; (101d8 <z_arm_irq_priority_set+0x54>)
   10196:	4811      	ldr	r0, [pc, #68]	; (101dc <z_arm_irq_priority_set+0x58>)
   10198:	f014 fdc1 	bl	24d1e <assert_print>
   1019c:	4629      	mov	r1, r5
   1019e:	4810      	ldr	r0, [pc, #64]	; (101e0 <z_arm_irq_priority_set+0x5c>)
   101a0:	2307      	movs	r3, #7
   101a2:	4622      	mov	r2, r4
   101a4:	f014 fdbb 	bl	24d1e <assert_print>
   101a8:	215b      	movs	r1, #91	; 0x5b
   101aa:	480a      	ldr	r0, [pc, #40]	; (101d4 <z_arm_irq_priority_set+0x50>)
   101ac:	f014 fdb0 	bl	24d10 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   101b0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   101b2:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   101b4:	bfac      	ite	ge
   101b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   101ba:	4a0a      	ldrlt	r2, [pc, #40]	; (101e4 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   101bc:	ea4f 1343 	mov.w	r3, r3, lsl #5
   101c0:	b2db      	uxtb	r3, r3
   101c2:	bfab      	itete	ge
   101c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   101c8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   101cc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   101d0:	5413      	strblt	r3, [r2, r0]
}
   101d2:	bd38      	pop	{r3, r4, r5, pc}
   101d4:	0002cda4 	.word	0x0002cda4
   101d8:	0002cdda 	.word	0x0002cdda
   101dc:	0002b6e9 	.word	0x0002b6e9
   101e0:	0002cdf5 	.word	0x0002cdf5
   101e4:	e000ed14 	.word	0xe000ed14

000101e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   101e8:	bf30      	wfi
    b z_SysNmiOnReset
   101ea:	f7ff bffd 	b.w	101e8 <z_SysNmiOnReset>
   101ee:	bf00      	nop

000101f0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   101f0:	4a0b      	ldr	r2, [pc, #44]	; (10220 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   101f2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   101f4:	4b0b      	ldr	r3, [pc, #44]	; (10224 <z_arm_prep_c+0x34>)
   101f6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   101fa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   101fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10200:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10204:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10208:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1020c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10210:	f00e ff7a 	bl	1f108 <z_bss_zero>
	z_data_copy();
   10214:	f011 fe74 	bl	21f00 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10218:	f000 fbe8 	bl	109ec <z_arm_interrupt_init>
	z_cstart();
   1021c:	f00e ffb4 	bl	1f188 <z_cstart>
   10220:	00008000 	.word	0x00008000
   10224:	e000ed00 	.word	0xe000ed00

00010228 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10228:	4a09      	ldr	r2, [pc, #36]	; (10250 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1022a:	490a      	ldr	r1, [pc, #40]	; (10254 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1022c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1022e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   10230:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   10232:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10234:	4908      	ldr	r1, [pc, #32]	; (10258 <arch_swap+0x30>)
   10236:	684b      	ldr	r3, [r1, #4]
   10238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1023c:	604b      	str	r3, [r1, #4]
   1023e:	2300      	movs	r3, #0
   10240:	f383 8811 	msr	BASEPRI, r3
   10244:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10248:	6893      	ldr	r3, [r2, #8]
}
   1024a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1024c:	4770      	bx	lr
   1024e:	bf00      	nop
   10250:	20021504 	.word	0x20021504
   10254:	0002b5c4 	.word	0x0002b5c4
   10258:	e000ed00 	.word	0xe000ed00

0001025c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1025c:	4915      	ldr	r1, [pc, #84]	; (102b4 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1025e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   10260:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10264:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10268:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1026a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1026e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10272:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   10274:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10278:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1027c:	4f0e      	ldr	r7, [pc, #56]	; (102b8 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1027e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10282:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   10284:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10286:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   10288:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1028c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1028e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10290:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10292:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10296:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1029a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1029e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   102a2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   102a6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   102a8:	f015 fd86 	bl	25db8 <configure_builtin_stack_guard>
    pop {r2, lr}
   102ac:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   102b0:	4770      	bx	lr
   102b2:	0000      	.short	0x0000
    ldr r1, =_kernel
   102b4:	20021504 	.word	0x20021504
    ldr v4, =_SCS_ICSR
   102b8:	e000ed04 	.word	0xe000ed04

000102bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   102bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   102c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   102c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   102c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   102ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   102cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   102d0:	2902      	cmp	r1, #2
    beq _oops
   102d2:	d0ff      	beq.n	102d4 <_oops>

000102d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   102d4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   102d6:	f015 fd60 	bl	25d9a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   102da:	bd01      	pop	{r0, pc}

000102dc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   102dc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   102e0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   102e2:	490d      	ldr	r1, [pc, #52]	; (10318 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   102e4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   102e8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   102ea:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   102ee:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   102f2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   102f4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   102f8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   102fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10300:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   10304:	2300      	movs	r3, #0
   10306:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   10308:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1030c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1030e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   10310:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10314:	4770      	bx	lr
   10316:	bf00      	nop
   10318:	000249cf 	.word	0x000249cf

0001031c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1031c:	4b08      	ldr	r3, [pc, #32]	; (10340 <arch_switch_to_main_thread+0x24>)
   1031e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   10320:	6e83      	ldr	r3, [r0, #104]	; 0x68
   10322:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10326:	4610      	mov	r0, r2
   10328:	f381 8809 	msr	PSP, r1
   1032c:	2100      	movs	r1, #0
   1032e:	b663      	cpsie	if
   10330:	f381 8811 	msr	BASEPRI, r1
   10334:	f3bf 8f6f 	isb	sy
   10338:	2200      	movs	r2, #0
   1033a:	2300      	movs	r3, #0
   1033c:	f014 fb47 	bl	249ce <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10340:	20021504 	.word	0x20021504

00010344 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10344:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10346:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10348:	4a0b      	ldr	r2, [pc, #44]	; (10378 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1034a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1034c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1034e:	bf1e      	ittt	ne
	movne	r1, #0
   10350:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10352:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   10354:	f019 f851 	blne	293fa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10358:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1035a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1035e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10362:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10366:	4905      	ldr	r1, [pc, #20]	; (1037c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10368:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1036a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1036c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1036e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   10372:	4903      	ldr	r1, [pc, #12]	; (10380 <_isr_wrapper+0x3c>)
	bx r1
   10374:	4708      	bx	r1
   10376:	0000      	.short	0x0000
	ldr r2, =_kernel
   10378:	20021504 	.word	0x20021504
	ldr r1, =_sw_isr_table
   1037c:	0002a288 	.word	0x0002a288
	ldr r1, =z_arm_int_exit
   10380:	00010385 	.word	0x00010385

00010384 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10384:	4b04      	ldr	r3, [pc, #16]	; (10398 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10386:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10388:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1038a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1038c:	d003      	beq.n	10396 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1038e:	4903      	ldr	r1, [pc, #12]	; (1039c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10394:	600a      	str	r2, [r1, #0]

00010396 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10396:	4770      	bx	lr
	ldr r3, =_kernel
   10398:	20021504 	.word	0x20021504
	ldr r1, =_SCS_ICSR
   1039c:	e000ed04 	.word	0xe000ed04

000103a0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   103a0:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   103a2:	2400      	movs	r4, #0
   103a4:	4b48      	ldr	r3, [pc, #288]	; (104c8 <mem_manage_fault.constprop.0+0x128>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   103a6:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   103a8:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   103aa:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   103ac:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   103ae:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   103b0:	2201      	movs	r2, #1
   103b2:	4620      	mov	r0, r4
   103b4:	e9cd 4400 	strd	r4, r4, [sp]
   103b8:	4944      	ldr	r1, [pc, #272]	; (104cc <mem_manage_fault.constprop.0+0x12c>)
   103ba:	f015 fd01 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   103be:	4b44      	ldr	r3, [pc, #272]	; (104d0 <mem_manage_fault.constprop.0+0x130>)
   103c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   103c2:	06dd      	lsls	r5, r3, #27
   103c4:	d509      	bpl.n	103da <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   103c6:	4b43      	ldr	r3, [pc, #268]	; (104d4 <mem_manage_fault.constprop.0+0x134>)
   103c8:	2201      	movs	r2, #1
   103ca:	e9cd 4301 	strd	r4, r3, [sp, #4]
   103ce:	4620      	mov	r0, r4
   103d0:	4623      	mov	r3, r4
   103d2:	493e      	ldr	r1, [pc, #248]	; (104cc <mem_manage_fault.constprop.0+0x12c>)
   103d4:	9400      	str	r4, [sp, #0]
   103d6:	f015 fcf3 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   103da:	4b3d      	ldr	r3, [pc, #244]	; (104d0 <mem_manage_fault.constprop.0+0x130>)
   103dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   103de:	0718      	lsls	r0, r3, #28
   103e0:	d509      	bpl.n	103f6 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   103e2:	4b3d      	ldr	r3, [pc, #244]	; (104d8 <mem_manage_fault.constprop.0+0x138>)
   103e4:	2201      	movs	r2, #1
   103e6:	9302      	str	r3, [sp, #8]
   103e8:	2300      	movs	r3, #0
   103ea:	4938      	ldr	r1, [pc, #224]	; (104cc <mem_manage_fault.constprop.0+0x12c>)
   103ec:	4618      	mov	r0, r3
   103ee:	e9cd 3300 	strd	r3, r3, [sp]
   103f2:	f015 fce5 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   103f6:	4d36      	ldr	r5, [pc, #216]	; (104d0 <mem_manage_fault.constprop.0+0x130>)
   103f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   103fa:	0799      	lsls	r1, r3, #30
   103fc:	d51e      	bpl.n	1043c <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   103fe:	2400      	movs	r4, #0
   10400:	4b36      	ldr	r3, [pc, #216]	; (104dc <mem_manage_fault.constprop.0+0x13c>)
   10402:	2201      	movs	r2, #1
   10404:	9302      	str	r3, [sp, #8]
   10406:	4620      	mov	r0, r4
   10408:	4623      	mov	r3, r4
   1040a:	e9cd 4400 	strd	r4, r4, [sp]
   1040e:	492f      	ldr	r1, [pc, #188]	; (104cc <mem_manage_fault.constprop.0+0x12c>)
   10410:	f015 fcd6 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   10414:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10416:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10418:	0612      	lsls	r2, r2, #24
   1041a:	d50f      	bpl.n	1043c <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1041c:	9303      	str	r3, [sp, #12]
   1041e:	4b30      	ldr	r3, [pc, #192]	; (104e0 <mem_manage_fault.constprop.0+0x140>)
   10420:	2201      	movs	r2, #1
   10422:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10426:	4620      	mov	r0, r4
   10428:	4623      	mov	r3, r4
   1042a:	4928      	ldr	r1, [pc, #160]	; (104cc <mem_manage_fault.constprop.0+0x12c>)
   1042c:	9400      	str	r4, [sp, #0]
   1042e:	f015 fcc7 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   10432:	b11f      	cbz	r7, 1043c <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10434:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1043a:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1043c:	4b24      	ldr	r3, [pc, #144]	; (104d0 <mem_manage_fault.constprop.0+0x130>)
   1043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10440:	07df      	lsls	r7, r3, #31
   10442:	d509      	bpl.n	10458 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   10444:	4b27      	ldr	r3, [pc, #156]	; (104e4 <mem_manage_fault.constprop.0+0x144>)
   10446:	2201      	movs	r2, #1
   10448:	9302      	str	r3, [sp, #8]
   1044a:	2300      	movs	r3, #0
   1044c:	491f      	ldr	r1, [pc, #124]	; (104cc <mem_manage_fault.constprop.0+0x12c>)
   1044e:	4618      	mov	r0, r3
   10450:	e9cd 3300 	strd	r3, r3, [sp]
   10454:	f015 fcb4 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10458:	4b1d      	ldr	r3, [pc, #116]	; (104d0 <mem_manage_fault.constprop.0+0x130>)
   1045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1045c:	069d      	lsls	r5, r3, #26
   1045e:	d509      	bpl.n	10474 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   10460:	4b21      	ldr	r3, [pc, #132]	; (104e8 <mem_manage_fault.constprop.0+0x148>)
   10462:	2201      	movs	r2, #1
   10464:	9302      	str	r3, [sp, #8]
   10466:	2300      	movs	r3, #0
   10468:	4918      	ldr	r1, [pc, #96]	; (104cc <mem_manage_fault.constprop.0+0x12c>)
   1046a:	4618      	mov	r0, r3
   1046c:	e9cd 3300 	strd	r3, r3, [sp]
   10470:	f015 fca6 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10474:	4b16      	ldr	r3, [pc, #88]	; (104d0 <mem_manage_fault.constprop.0+0x130>)
   10476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10478:	06d4      	lsls	r4, r2, #27
   1047a:	d402      	bmi.n	10482 <mem_manage_fault.constprop.0+0xe2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1047c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1047e:	0790      	lsls	r0, r2, #30
   10480:	d511      	bpl.n	104a6 <mem_manage_fault.constprop.0+0x106>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   10482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10484:	06d9      	lsls	r1, r3, #27
   10486:	d50e      	bpl.n	104a6 <mem_manage_fault.constprop.0+0x106>
   10488:	4918      	ldr	r1, [pc, #96]	; (104ec <mem_manage_fault.constprop.0+0x14c>)
   1048a:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   1048e:	4a18      	ldr	r2, [pc, #96]	; (104f0 <mem_manage_fault.constprop.0+0x150>)
   10490:	4818      	ldr	r0, [pc, #96]	; (104f4 <mem_manage_fault.constprop.0+0x154>)
   10492:	f014 fc44 	bl	24d1e <assert_print>
   10496:	4818      	ldr	r0, [pc, #96]	; (104f8 <mem_manage_fault.constprop.0+0x158>)
   10498:	f014 fc41 	bl	24d1e <assert_print>
   1049c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   104a0:	4813      	ldr	r0, [pc, #76]	; (104f0 <mem_manage_fault.constprop.0+0x150>)
   104a2:	f014 fc35 	bl	24d10 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   104a6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   104a8:	4b09      	ldr	r3, [pc, #36]	; (104d0 <mem_manage_fault.constprop.0+0x130>)
   104aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   104ac:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   104ae:	bf42      	ittt	mi
   104b0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   104b2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   104b6:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   104b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   104ba:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   104be:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   104c0:	7030      	strb	r0, [r6, #0]

	return reason;
}
   104c2:	b005      	add	sp, #20
   104c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104c6:	bf00      	nop
   104c8:	0002ce35 	.word	0x0002ce35
   104cc:	0002a7f8 	.word	0x0002a7f8
   104d0:	e000ed00 	.word	0xe000ed00
   104d4:	0002ce4b 	.word	0x0002ce4b
   104d8:	0002ce7e 	.word	0x0002ce7e
   104dc:	0002ce91 	.word	0x0002ce91
   104e0:	0002cea9 	.word	0x0002cea9
   104e4:	0002cebf 	.word	0x0002cebf
   104e8:	0002cede 	.word	0x0002cede
   104ec:	0002cf47 	.word	0x0002cf47
   104f0:	0002cf0d 	.word	0x0002cf0d
   104f4:	0002b6e9 	.word	0x0002b6e9
   104f8:	0002cf91 	.word	0x0002cf91

000104fc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   104fc:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   104fe:	2400      	movs	r4, #0
   10500:	4b3b      	ldr	r3, [pc, #236]	; (105f0 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10502:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   10504:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10506:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   10508:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1050a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1050c:	2201      	movs	r2, #1
   1050e:	4620      	mov	r0, r4
   10510:	e9cd 4400 	strd	r4, r4, [sp]
   10514:	4937      	ldr	r1, [pc, #220]	; (105f4 <bus_fault.constprop.0+0xf8>)
   10516:	f015 fc53 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1051a:	4b37      	ldr	r3, [pc, #220]	; (105f8 <bus_fault.constprop.0+0xfc>)
   1051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1051e:	04db      	lsls	r3, r3, #19
   10520:	d509      	bpl.n	10536 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   10522:	4b36      	ldr	r3, [pc, #216]	; (105fc <bus_fault.constprop.0+0x100>)
   10524:	2201      	movs	r2, #1
   10526:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1052a:	4620      	mov	r0, r4
   1052c:	4623      	mov	r3, r4
   1052e:	4931      	ldr	r1, [pc, #196]	; (105f4 <bus_fault.constprop.0+0xf8>)
   10530:	9400      	str	r4, [sp, #0]
   10532:	f015 fc45 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10536:	4b30      	ldr	r3, [pc, #192]	; (105f8 <bus_fault.constprop.0+0xfc>)
   10538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1053a:	051d      	lsls	r5, r3, #20
   1053c:	d509      	bpl.n	10552 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   1053e:	4b30      	ldr	r3, [pc, #192]	; (10600 <bus_fault.constprop.0+0x104>)
   10540:	2201      	movs	r2, #1
   10542:	9302      	str	r3, [sp, #8]
   10544:	2300      	movs	r3, #0
   10546:	492b      	ldr	r1, [pc, #172]	; (105f4 <bus_fault.constprop.0+0xf8>)
   10548:	4618      	mov	r0, r3
   1054a:	e9cd 3300 	strd	r3, r3, [sp]
   1054e:	f015 fc37 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10552:	4d29      	ldr	r5, [pc, #164]	; (105f8 <bus_fault.constprop.0+0xfc>)
   10554:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10556:	059c      	lsls	r4, r3, #22
   10558:	d51e      	bpl.n	10598 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   1055a:	2400      	movs	r4, #0
   1055c:	4b29      	ldr	r3, [pc, #164]	; (10604 <bus_fault.constprop.0+0x108>)
   1055e:	2201      	movs	r2, #1
   10560:	4620      	mov	r0, r4
   10562:	9302      	str	r3, [sp, #8]
   10564:	e9cd 4400 	strd	r4, r4, [sp]
   10568:	4623      	mov	r3, r4
   1056a:	4922      	ldr	r1, [pc, #136]	; (105f4 <bus_fault.constprop.0+0xf8>)
   1056c:	f015 fc28 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10570:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10572:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10574:	0410      	lsls	r0, r2, #16
   10576:	d50f      	bpl.n	10598 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10578:	9303      	str	r3, [sp, #12]
   1057a:	4b23      	ldr	r3, [pc, #140]	; (10608 <bus_fault.constprop.0+0x10c>)
   1057c:	2201      	movs	r2, #1
   1057e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10582:	4620      	mov	r0, r4
   10584:	4623      	mov	r3, r4
   10586:	491b      	ldr	r1, [pc, #108]	; (105f4 <bus_fault.constprop.0+0xf8>)
   10588:	9400      	str	r4, [sp, #0]
   1058a:	f015 fc19 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   1058e:	b11f      	cbz	r7, 10598 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10590:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10592:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10596:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10598:	4b17      	ldr	r3, [pc, #92]	; (105f8 <bus_fault.constprop.0+0xfc>)
   1059a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1059c:	0559      	lsls	r1, r3, #21
   1059e:	d509      	bpl.n	105b4 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   105a0:	4b1a      	ldr	r3, [pc, #104]	; (1060c <bus_fault.constprop.0+0x110>)
   105a2:	2201      	movs	r2, #1
   105a4:	9302      	str	r3, [sp, #8]
   105a6:	2300      	movs	r3, #0
   105a8:	4912      	ldr	r1, [pc, #72]	; (105f4 <bus_fault.constprop.0+0xf8>)
   105aa:	4618      	mov	r0, r3
   105ac:	e9cd 3300 	strd	r3, r3, [sp]
   105b0:	f015 fc06 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   105b4:	4a10      	ldr	r2, [pc, #64]	; (105f8 <bus_fault.constprop.0+0xfc>)
   105b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   105b8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   105bc:	d012      	beq.n	105e4 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   105be:	4b14      	ldr	r3, [pc, #80]	; (10610 <bus_fault.constprop.0+0x114>)
   105c0:	9302      	str	r3, [sp, #8]
   105c2:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   105c4:	2201      	movs	r2, #1
   105c6:	4618      	mov	r0, r3
   105c8:	e9cd 3300 	strd	r3, r3, [sp]
   105cc:	4909      	ldr	r1, [pc, #36]	; (105f4 <bus_fault.constprop.0+0xf8>)
   105ce:	f015 fbf7 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   105d2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   105d4:	4a08      	ldr	r2, [pc, #32]	; (105f8 <bus_fault.constprop.0+0xfc>)
   105d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   105d8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   105dc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   105de:	7030      	strb	r0, [r6, #0]

	return reason;
}
   105e0:	b005      	add	sp, #20
   105e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   105e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
   105e6:	0492      	lsls	r2, r2, #18
   105e8:	d5f3      	bpl.n	105d2 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   105ea:	4a0a      	ldr	r2, [pc, #40]	; (10614 <bus_fault.constprop.0+0x118>)
   105ec:	9202      	str	r2, [sp, #8]
   105ee:	e7e9      	b.n	105c4 <bus_fault.constprop.0+0xc8>
   105f0:	0002cff5 	.word	0x0002cff5
   105f4:	0002a7f8 	.word	0x0002a7f8
   105f8:	e000ed00 	.word	0xe000ed00
   105fc:	0002d00b 	.word	0x0002d00b
   10600:	0002ce7e 	.word	0x0002ce7e
   10604:	0002d01c 	.word	0x0002d01c
   10608:	0002d035 	.word	0x0002d035
   1060c:	0002d04a 	.word	0x0002d04a
   10610:	0002d065 	.word	0x0002d065
   10614:	0002cede 	.word	0x0002cede

00010618 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   10618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1061a:	2400      	movs	r4, #0
   1061c:	4b3b      	ldr	r3, [pc, #236]	; (1070c <usage_fault.constprop.0+0xf4>)
   1061e:	2201      	movs	r2, #1
   10620:	9302      	str	r3, [sp, #8]
   10622:	4620      	mov	r0, r4
   10624:	4623      	mov	r3, r4
   10626:	e9cd 4400 	strd	r4, r4, [sp]
   1062a:	4939      	ldr	r1, [pc, #228]	; (10710 <usage_fault.constprop.0+0xf8>)
   1062c:	f015 fbc8 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   10630:	4b38      	ldr	r3, [pc, #224]	; (10714 <usage_fault.constprop.0+0xfc>)
   10632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10634:	019b      	lsls	r3, r3, #6
   10636:	d509      	bpl.n	1064c <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   10638:	4b37      	ldr	r3, [pc, #220]	; (10718 <usage_fault.constprop.0+0x100>)
   1063a:	2201      	movs	r2, #1
   1063c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10640:	4620      	mov	r0, r4
   10642:	4623      	mov	r3, r4
   10644:	4932      	ldr	r1, [pc, #200]	; (10710 <usage_fault.constprop.0+0xf8>)
   10646:	9400      	str	r4, [sp, #0]
   10648:	f015 fbba 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1064c:	4b31      	ldr	r3, [pc, #196]	; (10714 <usage_fault.constprop.0+0xfc>)
   1064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10650:	01dc      	lsls	r4, r3, #7
   10652:	d509      	bpl.n	10668 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   10654:	4b31      	ldr	r3, [pc, #196]	; (1071c <usage_fault.constprop.0+0x104>)
   10656:	2201      	movs	r2, #1
   10658:	9302      	str	r3, [sp, #8]
   1065a:	2300      	movs	r3, #0
   1065c:	492c      	ldr	r1, [pc, #176]	; (10710 <usage_fault.constprop.0+0xf8>)
   1065e:	4618      	mov	r0, r3
   10660:	e9cd 3300 	strd	r3, r3, [sp]
   10664:	f015 fbac 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   10668:	4b2a      	ldr	r3, [pc, #168]	; (10714 <usage_fault.constprop.0+0xfc>)
   1066a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1066c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   10670:	d00a      	beq.n	10688 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   10672:	4b2b      	ldr	r3, [pc, #172]	; (10720 <usage_fault.constprop.0+0x108>)
   10674:	2201      	movs	r2, #1
   10676:	9302      	str	r3, [sp, #8]
   10678:	2300      	movs	r3, #0
   1067a:	4925      	ldr	r1, [pc, #148]	; (10710 <usage_fault.constprop.0+0xf8>)
   1067c:	4618      	mov	r0, r3
   1067e:	e9cd 3300 	strd	r3, r3, [sp]
   10682:	f015 fb9d 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   10686:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10688:	4b22      	ldr	r3, [pc, #136]	; (10714 <usage_fault.constprop.0+0xfc>)
   1068a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1068c:	0318      	lsls	r0, r3, #12
   1068e:	d509      	bpl.n	106a4 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   10690:	4b24      	ldr	r3, [pc, #144]	; (10724 <usage_fault.constprop.0+0x10c>)
   10692:	2201      	movs	r2, #1
   10694:	9302      	str	r3, [sp, #8]
   10696:	2300      	movs	r3, #0
   10698:	491d      	ldr	r1, [pc, #116]	; (10710 <usage_fault.constprop.0+0xf8>)
   1069a:	4618      	mov	r0, r3
   1069c:	e9cd 3300 	strd	r3, r3, [sp]
   106a0:	f015 fb8e 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   106a4:	4b1b      	ldr	r3, [pc, #108]	; (10714 <usage_fault.constprop.0+0xfc>)
   106a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   106a8:	0359      	lsls	r1, r3, #13
   106aa:	d509      	bpl.n	106c0 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   106ac:	4b1e      	ldr	r3, [pc, #120]	; (10728 <usage_fault.constprop.0+0x110>)
   106ae:	2201      	movs	r2, #1
   106b0:	9302      	str	r3, [sp, #8]
   106b2:	2300      	movs	r3, #0
   106b4:	4916      	ldr	r1, [pc, #88]	; (10710 <usage_fault.constprop.0+0xf8>)
   106b6:	4618      	mov	r0, r3
   106b8:	e9cd 3300 	strd	r3, r3, [sp]
   106bc:	f015 fb80 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   106c0:	4b14      	ldr	r3, [pc, #80]	; (10714 <usage_fault.constprop.0+0xfc>)
   106c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   106c4:	039a      	lsls	r2, r3, #14
   106c6:	d509      	bpl.n	106dc <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   106c8:	4b18      	ldr	r3, [pc, #96]	; (1072c <usage_fault.constprop.0+0x114>)
   106ca:	2201      	movs	r2, #1
   106cc:	9302      	str	r3, [sp, #8]
   106ce:	2300      	movs	r3, #0
   106d0:	490f      	ldr	r1, [pc, #60]	; (10710 <usage_fault.constprop.0+0xf8>)
   106d2:	4618      	mov	r0, r3
   106d4:	e9cd 3300 	strd	r3, r3, [sp]
   106d8:	f015 fb72 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   106dc:	4b0d      	ldr	r3, [pc, #52]	; (10714 <usage_fault.constprop.0+0xfc>)
   106de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   106e0:	03db      	lsls	r3, r3, #15
   106e2:	d509      	bpl.n	106f8 <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   106e4:	4b12      	ldr	r3, [pc, #72]	; (10730 <usage_fault.constprop.0+0x118>)
   106e6:	2201      	movs	r2, #1
   106e8:	9302      	str	r3, [sp, #8]
   106ea:	2300      	movs	r3, #0
   106ec:	4908      	ldr	r1, [pc, #32]	; (10710 <usage_fault.constprop.0+0xf8>)
   106ee:	4618      	mov	r0, r3
   106f0:	e9cd 3300 	strd	r3, r3, [sp]
   106f4:	f015 fb64 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   106f8:	4a06      	ldr	r2, [pc, #24]	; (10714 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   106fa:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   106fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   106fe:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   10702:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   10706:	6293      	str	r3, [r2, #40]	; 0x28
}
   10708:	b004      	add	sp, #16
   1070a:	bd10      	pop	{r4, pc}
   1070c:	0002d07d 	.word	0x0002d07d
   10710:	0002a7f8 	.word	0x0002a7f8
   10714:	e000ed00 	.word	0xe000ed00
   10718:	0002d095 	.word	0x0002d095
   1071c:	0002d0a8 	.word	0x0002d0a8
   10720:	0002d0c2 	.word	0x0002d0c2
   10724:	0002d0ec 	.word	0x0002d0ec
   10728:	0002d10a 	.word	0x0002d10a
   1072c:	0002d12f 	.word	0x0002d12f
   10730:	0002d149 	.word	0x0002d149

00010734 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   10734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10738:	4b8e      	ldr	r3, [pc, #568]	; (10974 <z_arm_fault+0x240>)
{
   1073a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1073c:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   10740:	4688      	mov	r8, r1
   10742:	4616      	mov	r6, r2
   10744:	2300      	movs	r3, #0
   10746:	b090      	sub	sp, #64	; 0x40
   10748:	f3ca 0708 	ubfx	r7, sl, #0, #9
   1074c:	f383 8811 	msr	BASEPRI, r3
   10750:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10754:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   10758:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1075c:	d00e      	beq.n	1077c <z_arm_fault+0x48>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1075e:	4986      	ldr	r1, [pc, #536]	; (10978 <z_arm_fault+0x244>)
   10760:	f44f 6384 	mov.w	r3, #1056	; 0x420
   10764:	4a85      	ldr	r2, [pc, #532]	; (1097c <z_arm_fault+0x248>)
   10766:	4886      	ldr	r0, [pc, #536]	; (10980 <z_arm_fault+0x24c>)
   10768:	f014 fad9 	bl	24d1e <assert_print>
   1076c:	4885      	ldr	r0, [pc, #532]	; (10984 <z_arm_fault+0x250>)
   1076e:	f014 fad6 	bl	24d1e <assert_print>
   10772:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   10776:	4881      	ldr	r0, [pc, #516]	; (1097c <z_arm_fault+0x248>)
   10778:	f014 faca 	bl	24d10 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1077c:	f012 0401 	ands.w	r4, r2, #1
   10780:	d1ed      	bne.n	1075e <z_arm_fault+0x2a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   10782:	0650      	lsls	r0, r2, #25
   10784:	d404      	bmi.n	10790 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10786:	0711      	lsls	r1, r2, #28
   10788:	d40e      	bmi.n	107a8 <z_arm_fault+0x74>
			*nested_exc = true;
   1078a:	f04f 0901 	mov.w	r9, #1
   1078e:	e00e      	b.n	107ae <z_arm_fault+0x7a>
		PR_FAULT_INFO("Exception occurred in Secure State");
   10790:	4b7d      	ldr	r3, [pc, #500]	; (10988 <z_arm_fault+0x254>)
   10792:	2201      	movs	r2, #1
   10794:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10798:	4620      	mov	r0, r4
   1079a:	4623      	mov	r3, r4
   1079c:	497b      	ldr	r1, [pc, #492]	; (1098c <z_arm_fault+0x258>)
   1079e:	9400      	str	r4, [sp, #0]
   107a0:	f015 fb0e 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   107a4:	0772      	lsls	r2, r6, #29
   107a6:	d500      	bpl.n	107aa <z_arm_fault+0x76>
			ptr_esf = (z_arch_esf_t *)psp;
   107a8:	4645      	mov	r5, r8
	*nested_exc = false;
   107aa:	f04f 0900 	mov.w	r9, #0
	__ASSERT(esf != NULL,
   107ae:	2d00      	cmp	r5, #0
   107b0:	d0d5      	beq.n	1075e <z_arm_fault+0x2a>
	*recoverable = false;
   107b2:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   107b6:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   107b8:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
   107bc:	2b09      	cmp	r3, #9
   107be:	f200 80bf 	bhi.w	10940 <z_arm_fault+0x20c>
   107c2:	e8df f003 	tbb	[pc, r3]
   107c6:	b305      	.short	0xb305
   107c8:	bdbd96b7 	.word	0xbdbd96b7
   107cc:	bbbdbdbd 	.word	0xbbbdbdbd
	PR_FAULT_INFO("***** HARD FAULT *****");
   107d0:	4b6f      	ldr	r3, [pc, #444]	; (10990 <z_arm_fault+0x25c>)
   107d2:	2201      	movs	r2, #1
   107d4:	e9cd 8301 	strd	r8, r3, [sp, #4]
   107d8:	2300      	movs	r3, #0
   107da:	496c      	ldr	r1, [pc, #432]	; (1098c <z_arm_fault+0x258>)
   107dc:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   107de:	4f65      	ldr	r7, [pc, #404]	; (10974 <z_arm_fault+0x240>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   107e0:	f8cd 8000 	str.w	r8, [sp]
   107e4:	f015 faec 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   107e8:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   107ec:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   107ee:	f016 0602 	ands.w	r6, r6, #2
   107f2:	d005      	beq.n	10800 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   107f4:	4b67      	ldr	r3, [pc, #412]	; (10994 <z_arm_fault+0x260>)
	PR_FAULT_INFO(
   107f6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   107fa:	f8cd 8000 	str.w	r8, [sp]
   107fe:	e006      	b.n	1080e <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   10800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10802:	2b00      	cmp	r3, #0
   10804:	da0a      	bge.n	1081c <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
   10806:	4b64      	ldr	r3, [pc, #400]	; (10998 <z_arm_fault+0x264>)
   10808:	9600      	str	r6, [sp, #0]
   1080a:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
   1080e:	2300      	movs	r3, #0
   10810:	2201      	movs	r2, #1
   10812:	4618      	mov	r0, r3
   10814:	495d      	ldr	r1, [pc, #372]	; (1098c <z_arm_fault+0x258>)
   10816:	f015 fad3 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
}
   1081a:	e03b      	b.n	10894 <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1081e:	005b      	lsls	r3, r3, #1
   10820:	d577      	bpl.n	10912 <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   10822:	4b5e      	ldr	r3, [pc, #376]	; (1099c <z_arm_fault+0x268>)
   10824:	2201      	movs	r2, #1
   10826:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1082a:	4630      	mov	r0, r6
   1082c:	4633      	mov	r3, r6
   1082e:	4957      	ldr	r1, [pc, #348]	; (1098c <z_arm_fault+0x258>)
   10830:	9600      	str	r6, [sp, #0]
   10832:	f015 fac5 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   10836:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   10838:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1083a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1083e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   10840:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10844:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   10848:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1084a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1084e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   10854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10858:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1085c:	f64d 7302 	movw	r3, #57090	; 0xdf02
   10860:	429a      	cmp	r2, r3
   10862:	d00a      	beq.n	1087a <z_arm_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   10864:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10866:	b2db      	uxtb	r3, r3
   10868:	2b00      	cmp	r3, #0
   1086a:	d034      	beq.n	108d6 <z_arm_fault+0x1a2>
			reason = mem_manage_fault(esf, 1, recoverable);
   1086c:	2001      	movs	r0, #1
   1086e:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   10872:	f7ff fd95 	bl	103a0 <mem_manage_fault.constprop.0>
   10876:	4604      	mov	r4, r0
		break;
   10878:	e00c      	b.n	10894 <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1087a:	682b      	ldr	r3, [r5, #0]
   1087c:	2201      	movs	r2, #1
   1087e:	9303      	str	r3, [sp, #12]
   10880:	4b47      	ldr	r3, [pc, #284]	; (109a0 <z_arm_fault+0x26c>)
   10882:	4630      	mov	r0, r6
   10884:	e9cd 6301 	strd	r6, r3, [sp, #4]
   10888:	4940      	ldr	r1, [pc, #256]	; (1098c <z_arm_fault+0x258>)
   1088a:	4633      	mov	r3, r6
   1088c:	9600      	str	r6, [sp, #0]
   1088e:	f015 fa97 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   10892:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10894:	f89d 301f 	ldrb.w	r3, [sp, #31]
   10898:	b9d3      	cbnz	r3, 108d0 <z_arm_fault+0x19c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1089a:	aa08      	add	r2, sp, #32
   1089c:	f105 0620 	add.w	r6, r5, #32
   108a0:	4613      	mov	r3, r2
   108a2:	6828      	ldr	r0, [r5, #0]
   108a4:	6869      	ldr	r1, [r5, #4]
   108a6:	3508      	adds	r5, #8
   108a8:	c303      	stmia	r3!, {r0, r1}
   108aa:	42b5      	cmp	r5, r6
   108ac:	461a      	mov	r2, r3
   108ae:	d1f7      	bne.n	108a0 <z_arm_fault+0x16c>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   108b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   108b2:	f1b9 0f00 	cmp.w	r9, #0
   108b6:	d057      	beq.n	10968 <z_arm_fault+0x234>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   108b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   108bc:	b922      	cbnz	r2, 108c8 <z_arm_fault+0x194>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   108be:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   108c2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   108c6:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   108c8:	4620      	mov	r0, r4
   108ca:	a908      	add	r1, sp, #32
   108cc:	f7ff fbda 	bl	10084 <z_arm_fatal_error>
}
   108d0:	b010      	add	sp, #64	; 0x40
   108d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   108d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   108d8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   108dc:	d005      	beq.n	108ea <z_arm_fault+0x1b6>
			reason = bus_fault(esf, 1, recoverable);
   108de:	2001      	movs	r0, #1
   108e0:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   108e4:	f7ff fe0a 	bl	104fc <bus_fault.constprop.0>
   108e8:	e7c5      	b.n	10876 <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   108ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   108ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   108f0:	d302      	bcc.n	108f8 <z_arm_fault+0x1c4>
		reason = usage_fault(esf);
   108f2:	f7ff fe91 	bl	10618 <usage_fault.constprop.0>
   108f6:	e7be      	b.n	10876 <z_arm_fault+0x142>
			__ASSERT(0,
   108f8:	492a      	ldr	r1, [pc, #168]	; (109a4 <z_arm_fault+0x270>)
   108fa:	f240 23f2 	movw	r3, #754	; 0x2f2
   108fe:	4a1f      	ldr	r2, [pc, #124]	; (1097c <z_arm_fault+0x248>)
   10900:	481f      	ldr	r0, [pc, #124]	; (10980 <z_arm_fault+0x24c>)
   10902:	f014 fa0c 	bl	24d1e <assert_print>
   10906:	4828      	ldr	r0, [pc, #160]	; (109a8 <z_arm_fault+0x274>)
   10908:	f014 fa09 	bl	24d1e <assert_print>
   1090c:	f240 21f2 	movw	r1, #754	; 0x2f2
   10910:	e731      	b.n	10776 <z_arm_fault+0x42>
		__ASSERT(0,
   10912:	4924      	ldr	r1, [pc, #144]	; (109a4 <z_arm_fault+0x270>)
   10914:	f240 23f6 	movw	r3, #758	; 0x2f6
   10918:	4a18      	ldr	r2, [pc, #96]	; (1097c <z_arm_fault+0x248>)
   1091a:	4819      	ldr	r0, [pc, #100]	; (10980 <z_arm_fault+0x24c>)
   1091c:	f014 f9ff 	bl	24d1e <assert_print>
   10920:	4822      	ldr	r0, [pc, #136]	; (109ac <z_arm_fault+0x278>)
   10922:	f014 f9fc 	bl	24d1e <assert_print>
   10926:	f240 21f6 	movw	r1, #758	; 0x2f6
   1092a:	e724      	b.n	10776 <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   1092c:	2000      	movs	r0, #0
   1092e:	f10d 011f 	add.w	r1, sp, #31
   10932:	e79e      	b.n	10872 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
   10934:	2000      	movs	r0, #0
   10936:	f10d 011f 	add.w	r1, sp, #31
   1093a:	e7d3      	b.n	108e4 <z_arm_fault+0x1b0>
	PR_FAULT_INFO(
   1093c:	4b1c      	ldr	r3, [pc, #112]	; (109b0 <z_arm_fault+0x27c>)
   1093e:	e75a      	b.n	107f6 <z_arm_fault+0xc2>
	PR_FAULT_INFO("***** %s %d) *****",
   10940:	4a1c      	ldr	r2, [pc, #112]	; (109b4 <z_arm_fault+0x280>)
   10942:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   10946:	4b1c      	ldr	r3, [pc, #112]	; (109b8 <z_arm_fault+0x284>)
   10948:	bf18      	it	ne
   1094a:	4613      	movne	r3, r2
   1094c:	3f10      	subs	r7, #16
   1094e:	e9cd 3703 	strd	r3, r7, [sp, #12]
   10952:	4b1a      	ldr	r3, [pc, #104]	; (109bc <z_arm_fault+0x288>)
   10954:	2201      	movs	r2, #1
   10956:	9302      	str	r3, [sp, #8]
   10958:	2300      	movs	r3, #0
   1095a:	490c      	ldr	r1, [pc, #48]	; (1098c <z_arm_fault+0x258>)
   1095c:	4618      	mov	r0, r3
   1095e:	e9cd 3300 	strd	r3, r3, [sp]
   10962:	f015 fa2d 	bl	25dc0 <z_log_msg_runtime_create.constprop.0>
}
   10966:	e795      	b.n	10894 <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10968:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1096c:	f023 0301 	bic.w	r3, r3, #1
   10970:	e7a9      	b.n	108c6 <z_arm_fault+0x192>
   10972:	bf00      	nop
   10974:	e000ed00 	.word	0xe000ed00
   10978:	0002d1a2 	.word	0x0002d1a2
   1097c:	0002cf0d 	.word	0x0002cf0d
   10980:	0002b6e9 	.word	0x0002b6e9
   10984:	0002d1b5 	.word	0x0002d1b5
   10988:	0002d1f3 	.word	0x0002d1f3
   1098c:	0002a7f8 	.word	0x0002a7f8
   10990:	0002d216 	.word	0x0002d216
   10994:	0002d22d 	.word	0x0002d22d
   10998:	0002d24e 	.word	0x0002d24e
   1099c:	0002d25c 	.word	0x0002d25c
   109a0:	0002d27b 	.word	0x0002d27b
   109a4:	00030f5f 	.word	0x00030f5f
   109a8:	0002d297 	.word	0x0002d297
   109ac:	0002d2bb 	.word	0x0002d2bb
   109b0:	0002d2eb 	.word	0x0002d2eb
   109b4:	0002d189 	.word	0x0002d189
   109b8:	0002d174 	.word	0x0002d174
   109bc:	0002d30f 	.word	0x0002d30f

000109c0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   109c0:	4b04      	ldr	r3, [pc, #16]	; (109d4 <z_arm_fault_init+0x14>)
   109c2:	695a      	ldr	r2, [r3, #20]
   109c4:	f042 0210 	orr.w	r2, r2, #16
   109c8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   109ca:	695a      	ldr	r2, [r3, #20]
   109cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   109d0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   109d2:	4770      	bx	lr
   109d4:	e000ed00 	.word	0xe000ed00

000109d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   109d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   109dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   109e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   109e2:	4672      	mov	r2, lr
	bl z_arm_fault
   109e4:	f7ff fea6 	bl	10734 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   109e8:	bd01      	pop	{r0, pc}
   109ea:	bf00      	nop

000109ec <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   109ec:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109ee:	2120      	movs	r1, #32
   109f0:	4803      	ldr	r0, [pc, #12]	; (10a00 <z_arm_interrupt_init+0x14>)
   109f2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   109f4:	3301      	adds	r3, #1
   109f6:	2b45      	cmp	r3, #69	; 0x45
   109f8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   109fc:	d1f9      	bne.n	109f2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   109fe:	4770      	bx	lr
   10a00:	e000e100 	.word	0xe000e100

00010a04 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   10a04:	2000      	movs	r0, #0
    msr CONTROL, r0
   10a06:	f380 8814 	msr	CONTROL, r0
    isb
   10a0a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   10a0e:	2000      	movs	r0, #0
    msr MSPLIM, r0
   10a10:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   10a14:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   10a18:	f7fd fb0a 	bl	e030 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   10a1c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   10a1e:	490e      	ldr	r1, [pc, #56]	; (10a58 <__start+0x54>)
    str r0, [r1]
   10a20:	6008      	str	r0, [r1, #0]
    dsb
   10a22:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10a26:	480d      	ldr	r0, [pc, #52]	; (10a5c <__start+0x58>)
    msr msp, r0
   10a28:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   10a2c:	f000 f83e 	bl	10aac <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10a30:	2020      	movs	r0, #32
    msr BASEPRI, r0
   10a32:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   10a36:	480a      	ldr	r0, [pc, #40]	; (10a60 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   10a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   10a3c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   10a3e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   10a42:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   10a46:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   10a48:	4308      	orrs	r0, r1
    msr CONTROL, r0
   10a4a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   10a4e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   10a52:	f7ff fbcd 	bl	101f0 <z_arm_prep_c>
   10a56:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   10a58:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10a5c:	200334f8 	.word	0x200334f8
    ldr r0, =z_interrupt_stacks
   10a60:	200327b8 	.word	0x200327b8

00010a64 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   10a64:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   10a68:	4905      	ldr	r1, [pc, #20]	; (10a80 <sys_arch_reboot+0x1c>)
   10a6a:	4b06      	ldr	r3, [pc, #24]	; (10a84 <sys_arch_reboot+0x20>)
   10a6c:	68ca      	ldr	r2, [r1, #12]
   10a6e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   10a72:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10a74:	60cb      	str	r3, [r1, #12]
   10a76:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   10a7a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   10a7c:	e7fd      	b.n	10a7a <sys_arch_reboot+0x16>
   10a7e:	bf00      	nop
   10a80:	e000ed00 	.word	0xe000ed00
   10a84:	05fa0004 	.word	0x05fa0004

00010a88 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   10a88:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   10a8a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   10a8c:	4906      	ldr	r1, [pc, #24]	; (10aa8 <z_arm_clear_arm_mpu_config+0x20>)
   10a8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   10a92:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   10a96:	4293      	cmp	r3, r2
   10a98:	db00      	blt.n	10a9c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   10a9a:	4770      	bx	lr
  mpu->RNR = rnr;
   10a9c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   10aa0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   10aa4:	3301      	adds	r3, #1
   10aa6:	e7f6      	b.n	10a96 <z_arm_clear_arm_mpu_config+0xe>
   10aa8:	e000ed00 	.word	0xe000ed00

00010aac <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   10aac:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   10aae:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   10ab0:	2400      	movs	r4, #0
   10ab2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   10ab6:	f7ff ffe7 	bl	10a88 <z_arm_clear_arm_mpu_config>
   10aba:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   10abc:	f04f 30ff 	mov.w	r0, #4294967295
   10ac0:	4a0c      	ldr	r2, [pc, #48]	; (10af4 <z_arm_init_arch_hw_at_boot+0x48>)
   10ac2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10ac6:	3301      	adds	r3, #1
   10ac8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   10aca:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10ace:	d1f8      	bne.n	10ac2 <z_arm_init_arch_hw_at_boot+0x16>
   10ad0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   10ad2:	f04f 30ff 	mov.w	r0, #4294967295
   10ad6:	4a07      	ldr	r2, [pc, #28]	; (10af4 <z_arm_init_arch_hw_at_boot+0x48>)
   10ad8:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10adc:	3301      	adds	r3, #1
   10ade:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   10ae0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10ae4:	d1f8      	bne.n	10ad8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   10ae6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   10ae8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10aec:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   10af0:	bd10      	pop	{r4, pc}
   10af2:	bf00      	nop
   10af4:	e000e100 	.word	0xe000e100

00010af8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   10af8:	4b08      	ldr	r3, [pc, #32]	; (10b1c <z_impl_k_thread_abort+0x24>)
   10afa:	689b      	ldr	r3, [r3, #8]
   10afc:	4283      	cmp	r3, r0
   10afe:	d10b      	bne.n	10b18 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10b00:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   10b04:	b143      	cbz	r3, 10b18 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10b06:	4b06      	ldr	r3, [pc, #24]	; (10b20 <z_impl_k_thread_abort+0x28>)
   10b08:	685a      	ldr	r2, [r3, #4]
   10b0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   10b0e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   10b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   10b16:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   10b18:	f011 b8ba 	b.w	21c90 <z_thread_abort>
   10b1c:	20021504 	.word	0x20021504
   10b20:	e000ed00 	.word	0xe000ed00

00010b24 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   10b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10b26:	4c09      	ldr	r4, [pc, #36]	; (10b4c <z_arm_configure_static_mpu_regions+0x28>)
   10b28:	4a09      	ldr	r2, [pc, #36]	; (10b50 <z_arm_configure_static_mpu_regions+0x2c>)
   10b2a:	4623      	mov	r3, r4
   10b2c:	2101      	movs	r1, #1
   10b2e:	4809      	ldr	r0, [pc, #36]	; (10b54 <z_arm_configure_static_mpu_regions+0x30>)
   10b30:	f000 f918 	bl	10d64 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   10b34:	2300      	movs	r3, #0
   10b36:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   10b38:	4b07      	ldr	r3, [pc, #28]	; (10b58 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10b3a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   10b3c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10b3e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   10b40:	9301      	str	r3, [sp, #4]
   10b42:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10b44:	f000 f932 	bl	10dac <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   10b48:	b004      	add	sp, #16
   10b4a:	bd10      	pop	{r4, pc}
   10b4c:	20070000 	.word	0x20070000
   10b50:	20008000 	.word	0x20008000
   10b54:	0002af40 	.word	0x0002af40
   10b58:	20008d70 	.word	0x20008d70

00010b5c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   10b5c:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   10b5e:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10b60:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   10b62:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10b66:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   10b6a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10b6c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10b6e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10b70:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   10b74:	4905      	ldr	r1, [pc, #20]	; (10b8c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10b76:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   10b7a:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   10b7e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   10b82:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   10b86:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   10b8a:	bd10      	pop	{r4, pc}
   10b8c:	e000ed00 	.word	0xe000ed00

00010b90 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   10b90:	2807      	cmp	r0, #7
{
   10b92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10b94:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   10b96:	d90f      	bls.n	10bb8 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   10b98:	4b09      	ldr	r3, [pc, #36]	; (10bc0 <region_allocate_and_init+0x30>)
   10b9a:	9003      	str	r0, [sp, #12]
   10b9c:	9302      	str	r3, [sp, #8]
   10b9e:	2300      	movs	r3, #0
   10ba0:	2201      	movs	r2, #1
   10ba2:	4618      	mov	r0, r3
   10ba4:	e9cd 3300 	strd	r3, r3, [sp]
   10ba8:	4906      	ldr	r1, [pc, #24]	; (10bc4 <region_allocate_and_init+0x34>)
   10baa:	f015 f924 	bl	25df6 <z_log_msg_runtime_create.constprop.0>
   10bae:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10bb2:	4620      	mov	r0, r4
   10bb4:	b004      	add	sp, #16
   10bb6:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   10bb8:	f7ff ffd0 	bl	10b5c <region_init>
	return index;
   10bbc:	e7f9      	b.n	10bb2 <region_allocate_and_init+0x22>
   10bbe:	bf00      	nop
   10bc0:	0002d326 	.word	0x0002d326
   10bc4:	0002a7e0 	.word	0x0002a7e0

00010bc8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bcc:	4689      	mov	r9, r1
   10bce:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   10bd0:	4606      	mov	r6, r0
   10bd2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   10bd6:	4d54      	ldr	r5, [pc, #336]	; (10d28 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10bd8:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   10bda:	45c8      	cmp	r8, r9
   10bdc:	da2d      	bge.n	10c3a <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   10bde:	f8d6 a004 	ldr.w	sl, [r6, #4]
   10be2:	f1ba 0f00 	cmp.w	sl, #0
   10be6:	d04a      	beq.n	10c7e <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   10be8:	f1ba 0f1f 	cmp.w	sl, #31
   10bec:	d917      	bls.n	10c1e <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   10bee:	f01a 0f1f 	tst.w	sl, #31
   10bf2:	d114      	bne.n	10c1e <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   10bf4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   10bf8:	f01b 0f1f 	tst.w	fp, #31
   10bfc:	d10f      	bne.n	10c1e <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10bfe:	4658      	mov	r0, fp
   10c00:	f015 f8f0 	bl	25de4 <arm_cmse_mpu_region_get>
   10c04:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10c06:	eb0a 000b 	add.w	r0, sl, fp
   10c0a:	3801      	subs	r0, #1
   10c0c:	f015 f8ea 	bl	25de4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10c10:	4287      	cmp	r7, r0
   10c12:	d016      	beq.n	10c42 <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   10c14:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   10c18:	4b44      	ldr	r3, [pc, #272]	; (10d2c <mpu_configure_regions_and_partition.constprop.0+0x164>)
   10c1a:	9703      	str	r7, [sp, #12]
   10c1c:	e002      	b.n	10c24 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10c1e:	4b44      	ldr	r3, [pc, #272]	; (10d30 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   10c20:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   10c24:	9302      	str	r3, [sp, #8]
   10c26:	2300      	movs	r3, #0
   10c28:	2201      	movs	r2, #1
   10c2a:	4618      	mov	r0, r3
   10c2c:	e9cd 3300 	strd	r3, r3, [sp]
   10c30:	4940      	ldr	r1, [pc, #256]	; (10d34 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   10c32:	f015 f8e0 	bl	25df6 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   10c36:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   10c3a:	4620      	mov	r0, r4
   10c3c:	b009      	add	sp, #36	; 0x24
   10c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10c42:	f117 0f16 	cmn.w	r7, #22
   10c46:	d0e7      	beq.n	10c18 <mpu_configure_regions_and_partition.constprop.0+0x50>
   10c48:	42bc      	cmp	r4, r7
   10c4a:	dde5      	ble.n	10c18 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   10c4c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   10c50:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   10c54:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   10c58:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   10c5c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10c60:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   10c64:	e9d6 3200 	ldrd	r3, r2, [r6]
   10c68:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   10c6a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   10c6c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   10c70:	d11d      	bne.n	10cae <mpu_configure_regions_and_partition.constprop.0+0xe6>
   10c72:	45d3      	cmp	fp, sl
   10c74:	d107      	bne.n	10c86 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   10c76:	4631      	mov	r1, r6
   10c78:	b2f8      	uxtb	r0, r7
   10c7a:	f015 f8cc 	bl	25e16 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10c7e:	f108 0801 	add.w	r8, r8, #1
   10c82:	360c      	adds	r6, #12
   10c84:	e7a9      	b.n	10bda <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   10c86:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   10c88:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   10c8c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   10c90:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   10c94:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   10c98:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   10c9a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   10c9e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   10ca0:	f015 f8b9 	bl	25e16 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10ca4:	f110 0f16 	cmn.w	r0, #22
   10ca8:	d0c5      	beq.n	10c36 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   10caa:	1c44      	adds	r4, r0, #1
   10cac:	e7e7      	b.n	10c7e <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   10cae:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   10cb2:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   10cb6:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10cb8:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   10cbc:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10cc0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   10cc2:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   10cc4:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   10cc6:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   10cc8:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   10ccc:	d0e8      	beq.n	10ca0 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   10cce:	f015 f8a2 	bl	25e16 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10cd2:	f110 0f16 	cmn.w	r0, #22
   10cd6:	d0ae      	beq.n	10c36 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   10cd8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   10cdc:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   10ce0:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   10ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
   10ce8:	f362 0304 	bfi	r3, r2, #0, #5
   10cec:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   10cf0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   10cf4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   10cf8:	085b      	lsrs	r3, r3, #1
   10cfa:	f363 1247 	bfi	r2, r3, #5, #3
   10cfe:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   10d02:	e9d6 3200 	ldrd	r3, r2, [r6]
   10d06:	4413      	add	r3, r2
   10d08:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   10d0a:	f023 031f 	bic.w	r3, r3, #31
   10d0e:	445b      	add	r3, fp
   10d10:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   10d14:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   10d16:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   10d1a:	a904      	add	r1, sp, #16
   10d1c:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   10d1e:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   10d20:	f7ff ff36 	bl	10b90 <region_allocate_and_init>
   10d24:	e7be      	b.n	10ca4 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   10d26:	bf00      	nop
   10d28:	e000ed00 	.word	0xe000ed00
   10d2c:	0002d36f 	.word	0x0002d36f
   10d30:	0002d34c 	.word	0x0002d34c
   10d34:	0002a7e0 	.word	0x0002a7e0

00010d38 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10d38:	2205      	movs	r2, #5
   10d3a:	4b04      	ldr	r3, [pc, #16]	; (10d4c <arm_core_mpu_enable+0x14>)
   10d3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   10d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10d44:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10d48:	4770      	bx	lr
   10d4a:	bf00      	nop
   10d4c:	e000ed00 	.word	0xe000ed00

00010d50 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   10d50:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10d54:	2200      	movs	r2, #0
   10d56:	4b02      	ldr	r3, [pc, #8]	; (10d60 <arm_core_mpu_disable+0x10>)
   10d58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   10d5c:	4770      	bx	lr
   10d5e:	bf00      	nop
   10d60:	e000ed00 	.word	0xe000ed00

00010d64 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   10d64:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10d66:	4d0c      	ldr	r5, [pc, #48]	; (10d98 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   10d68:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   10d6a:	782a      	ldrb	r2, [r5, #0]
   10d6c:	f7ff ff2c 	bl	10bc8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10d70:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   10d72:	3016      	adds	r0, #22
   10d74:	d10f      	bne.n	10d96 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   10d76:	f44f 738d 	mov.w	r3, #282	; 0x11a
   10d7a:	4a08      	ldr	r2, [pc, #32]	; (10d9c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   10d7c:	4908      	ldr	r1, [pc, #32]	; (10da0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   10d7e:	4809      	ldr	r0, [pc, #36]	; (10da4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   10d80:	f013 ffcd 	bl	24d1e <assert_print>
   10d84:	4621      	mov	r1, r4
   10d86:	4808      	ldr	r0, [pc, #32]	; (10da8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   10d88:	f013 ffc9 	bl	24d1e <assert_print>
   10d8c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   10d90:	4802      	ldr	r0, [pc, #8]	; (10d9c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   10d92:	f013 ffbd 	bl	24d10 <assert_post_action>
			regions_num);
	}
}
   10d96:	bd38      	pop	{r3, r4, r5, pc}
   10d98:	20021d82 	.word	0x20021d82
   10d9c:	0002d392 	.word	0x0002d392
   10da0:	00030f5f 	.word	0x00030f5f
   10da4:	0002b6e9 	.word	0x0002b6e9
   10da8:	0002d3c9 	.word	0x0002d3c9

00010dac <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   10dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10db0:	4e31      	ldr	r6, [pc, #196]	; (10e78 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   10db2:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10db4:	4605      	mov	r5, r0
   10db6:	f04f 0800 	mov.w	r8, #0
   10dba:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   10dbc:	4f2f      	ldr	r7, [pc, #188]	; (10e7c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10dbe:	45c8      	cmp	r8, r9
   10dc0:	db02      	blt.n	10dc8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   10dc2:	b003      	add	sp, #12
   10dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   10dc8:	f8d5 a004 	ldr.w	sl, [r5, #4]
   10dcc:	f1ba 0f00 	cmp.w	sl, #0
   10dd0:	d04c      	beq.n	10e6c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   10dd2:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10dd4:	4608      	mov	r0, r1
   10dd6:	9101      	str	r1, [sp, #4]
   10dd8:	f015 f804 	bl	25de4 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10ddc:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10dde:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10de0:	eb0a 0001 	add.w	r0, sl, r1
   10de4:	3801      	subs	r0, #1
   10de6:	f014 fffd 	bl	25de4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10dea:	4284      	cmp	r4, r0
   10dec:	f04f 0214 	mov.w	r2, #20
   10df0:	4b23      	ldr	r3, [pc, #140]	; (10e80 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   10df2:	d015      	beq.n	10e20 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   10df4:	fb02 f308 	mul.w	r3, r2, r8
   10df8:	f06f 0215 	mvn.w	r2, #21
   10dfc:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   10e00:	f44f 7395 	mov.w	r3, #298	; 0x12a
   10e04:	4a1f      	ldr	r2, [pc, #124]	; (10e84 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   10e06:	4920      	ldr	r1, [pc, #128]	; (10e88 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   10e08:	4820      	ldr	r0, [pc, #128]	; (10e8c <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   10e0a:	f013 ff88 	bl	24d1e <assert_print>
   10e0e:	4649      	mov	r1, r9
   10e10:	481f      	ldr	r0, [pc, #124]	; (10e90 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   10e12:	f013 ff84 	bl	24d1e <assert_print>
   10e16:	f44f 7195 	mov.w	r1, #298	; 0x12a
   10e1a:	481a      	ldr	r0, [pc, #104]	; (10e84 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   10e1c:	f013 ff78 	bl	24d10 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10e20:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   10e24:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10e26:	d0eb      	beq.n	10e00 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10e28:	7819      	ldrb	r1, [r3, #0]
   10e2a:	42a1      	cmp	r1, r4
   10e2c:	dde8      	ble.n	10e00 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   10e2e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   10e32:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   10e36:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   10e3a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   10e3e:	f100 0108 	add.w	r1, r0, #8
   10e42:	7b00      	ldrb	r0, [r0, #12]
   10e44:	f364 0004 	bfi	r0, r4, #0, #5
   10e48:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   10e4a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   10e4e:	790c      	ldrb	r4, [r1, #4]
   10e50:	0840      	lsrs	r0, r0, #1
   10e52:	f360 1447 	bfi	r4, r0, #5, #3
   10e56:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   10e58:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   10e5c:	f021 011f 	bic.w	r1, r1, #31
   10e60:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   10e62:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   10e66:	f021 011f 	bic.w	r1, r1, #31
   10e6a:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10e6c:	f108 0801 	add.w	r8, r8, #1
   10e70:	3614      	adds	r6, #20
   10e72:	350c      	adds	r5, #12
   10e74:	e7a3      	b.n	10dbe <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   10e76:	bf00      	nop
   10e78:	20020fc0 	.word	0x20020fc0
   10e7c:	e000ed00 	.word	0xe000ed00
   10e80:	20021d82 	.word	0x20021d82
   10e84:	0002d392 	.word	0x0002d392
   10e88:	00030f5f 	.word	0x00030f5f
   10e8c:	0002b6e9 	.word	0x0002b6e9
   10e90:	0002d3f5 	.word	0x0002d3f5

00010e94 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   10e94:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10e96:	4d1f      	ldr	r5, [pc, #124]	; (10f14 <z_arm_mpu_init+0x80>)
   10e98:	682c      	ldr	r4, [r5, #0]
   10e9a:	2c08      	cmp	r4, #8
   10e9c:	d910      	bls.n	10ec0 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   10e9e:	f240 1351 	movw	r3, #337	; 0x151
   10ea2:	4a1d      	ldr	r2, [pc, #116]	; (10f18 <z_arm_mpu_init+0x84>)
   10ea4:	491d      	ldr	r1, [pc, #116]	; (10f1c <z_arm_mpu_init+0x88>)
   10ea6:	481e      	ldr	r0, [pc, #120]	; (10f20 <z_arm_mpu_init+0x8c>)
   10ea8:	f013 ff39 	bl	24d1e <assert_print>
   10eac:	4621      	mov	r1, r4
   10eae:	2208      	movs	r2, #8
   10eb0:	481c      	ldr	r0, [pc, #112]	; (10f24 <z_arm_mpu_init+0x90>)
   10eb2:	f013 ff34 	bl	24d1e <assert_print>
   10eb6:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   10eba:	4817      	ldr	r0, [pc, #92]	; (10f18 <z_arm_mpu_init+0x84>)
   10ebc:	f013 ff28 	bl	24d10 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10ec0:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   10ec2:	f7ff ff45 	bl	10d50 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   10ec6:	4b18      	ldr	r3, [pc, #96]	; (10f28 <z_arm_mpu_init+0x94>)
   10ec8:	4a18      	ldr	r2, [pc, #96]	; (10f2c <z_arm_mpu_init+0x98>)
   10eca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10ece:	4284      	cmp	r4, r0
   10ed0:	d117      	bne.n	10f02 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   10ed2:	4b17      	ldr	r3, [pc, #92]	; (10f30 <z_arm_mpu_init+0x9c>)
   10ed4:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   10ed6:	f7ff ff2f 	bl	10d38 <arm_core_mpu_enable>
	__ASSERT(
   10eda:	4b13      	ldr	r3, [pc, #76]	; (10f28 <z_arm_mpu_init+0x94>)
   10edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   10ee0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   10ee4:	2b08      	cmp	r3, #8
   10ee6:	d013      	beq.n	10f10 <z_arm_mpu_init+0x7c>
   10ee8:	4912      	ldr	r1, [pc, #72]	; (10f34 <z_arm_mpu_init+0xa0>)
   10eea:	f240 13bb 	movw	r3, #443	; 0x1bb
   10eee:	4a0a      	ldr	r2, [pc, #40]	; (10f18 <z_arm_mpu_init+0x84>)
   10ef0:	480b      	ldr	r0, [pc, #44]	; (10f20 <z_arm_mpu_init+0x8c>)
   10ef2:	f013 ff14 	bl	24d1e <assert_print>
   10ef6:	4810      	ldr	r0, [pc, #64]	; (10f38 <z_arm_mpu_init+0xa4>)
   10ef8:	f013 ff11 	bl	24d1e <assert_print>
   10efc:	f240 11bb 	movw	r1, #443	; 0x1bb
   10f00:	e7db      	b.n	10eba <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10f02:	6869      	ldr	r1, [r5, #4]
   10f04:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   10f08:	f7ff fe28 	bl	10b5c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10f0c:	3001      	adds	r0, #1
   10f0e:	e7de      	b.n	10ece <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   10f10:	2000      	movs	r0, #0
   10f12:	bd38      	pop	{r3, r4, r5, pc}
   10f14:	0002af4c 	.word	0x0002af4c
   10f18:	0002d392 	.word	0x0002d392
   10f1c:	00030f5f 	.word	0x00030f5f
   10f20:	0002b6e9 	.word	0x0002b6e9
   10f24:	0002d424 	.word	0x0002d424
   10f28:	e000ed00 	.word	0xe000ed00
   10f2c:	0044ffaa 	.word	0x0044ffaa
   10f30:	20021d82 	.word	0x20021d82
   10f34:	0002d458 	.word	0x0002d458
   10f38:	0002d4a8 	.word	0x0002d4a8

00010f3c <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   10f3c:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   10f3e:	4b0b      	ldr	r3, [pc, #44]	; (10f6c <malloc_prepare+0x30>)
   10f40:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   10f44:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   10f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   10f4c:	d20c      	bcs.n	10f68 <malloc_prepare+0x2c>
   10f4e:	4908      	ldr	r1, [pc, #32]	; (10f70 <malloc_prepare+0x34>)
   10f50:	2381      	movs	r3, #129	; 0x81
   10f52:	4a08      	ldr	r2, [pc, #32]	; (10f74 <malloc_prepare+0x38>)
   10f54:	4808      	ldr	r0, [pc, #32]	; (10f78 <malloc_prepare+0x3c>)
   10f56:	f013 fee2 	bl	24d1e <assert_print>
   10f5a:	4808      	ldr	r0, [pc, #32]	; (10f7c <malloc_prepare+0x40>)
   10f5c:	f013 fedf 	bl	24d1e <assert_print>
   10f60:	2181      	movs	r1, #129	; 0x81
   10f62:	4804      	ldr	r0, [pc, #16]	; (10f74 <malloc_prepare+0x38>)
   10f64:	f013 fed4 	bl	24d10 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   10f68:	2000      	movs	r0, #0
   10f6a:	bd08      	pop	{r3, pc}
   10f6c:	20038438 	.word	0x20038438
   10f70:	0002d4f9 	.word	0x0002d4f9
   10f74:	0002d4c9 	.word	0x0002d4c9
   10f78:	0002b6e9 	.word	0x0002b6e9
   10f7c:	0002d540 	.word	0x0002d540

00010f80 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10f80:	4b01      	ldr	r3, [pc, #4]	; (10f88 <__stdout_hook_install+0x8>)
   10f82:	6018      	str	r0, [r3, #0]
}
   10f84:	4770      	bx	lr
   10f86:	bf00      	nop
   10f88:	20008468 	.word	0x20008468

00010f8c <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   10f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f8e:	4606      	mov	r6, r0
   10f90:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   10f92:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   10f94:	4f06      	ldr	r7, [pc, #24]	; (10fb0 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   10f96:	42ac      	cmp	r4, r5
   10f98:	da08      	bge.n	10fac <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   10f9a:	683b      	ldr	r3, [r7, #0]
   10f9c:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   10f9e:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   10fa0:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   10fa2:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   10fa6:	d001      	beq.n	10fac <z_impl_zephyr_read_stdin+0x20>
   10fa8:	280d      	cmp	r0, #13
   10faa:	d1f4      	bne.n	10f96 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   10fac:	4620      	mov	r0, r4
   10fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fb0:	20008464 	.word	0x20008464

00010fb4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   10fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10fb6:	460d      	mov	r5, r1
   10fb8:	4f09      	ldr	r7, [pc, #36]	; (10fe0 <z_impl_zephyr_write_stdout+0x2c>)
   10fba:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   10fbc:	f1c0 0401 	rsb	r4, r0, #1
   10fc0:	19a3      	adds	r3, r4, r6
   10fc2:	429d      	cmp	r5, r3
   10fc4:	dc01      	bgt.n	10fca <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   10fc6:	4628      	mov	r0, r5
   10fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   10fca:	7873      	ldrb	r3, [r6, #1]
   10fcc:	2b0a      	cmp	r3, #10
   10fce:	d102      	bne.n	10fd6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   10fd0:	200d      	movs	r0, #13
   10fd2:	683b      	ldr	r3, [r7, #0]
   10fd4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   10fd6:	683b      	ldr	r3, [r7, #0]
   10fd8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   10fdc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   10fde:	e7ef      	b.n	10fc0 <z_impl_zephyr_write_stdout+0xc>
   10fe0:	20008468 	.word	0x20008468

00010fe4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   10fe4:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   10fe6:	2105      	movs	r1, #5
   10fe8:	4801      	ldr	r0, [pc, #4]	; (10ff0 <_exit+0xc>)
   10fea:	f7ff ffe3 	bl	10fb4 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   10fee:	e7fe      	b.n	10fee <_exit+0xa>
   10ff0:	0002d5c7 	.word	0x0002d5c7

00010ff4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   10ff4:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   10ff6:	4c07      	ldr	r4, [pc, #28]	; (11014 <_sbrk+0x20>)
   10ff8:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   10ffa:	18c2      	adds	r2, r0, r3
   10ffc:	4806      	ldr	r0, [pc, #24]	; (11018 <_sbrk+0x24>)
   10ffe:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11002:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   11006:	428a      	cmp	r2, r1
		heap_sz += count;
   11008:	bf36      	itet	cc
   1100a:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1100c:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11010:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   11012:	bd10      	pop	{r4, pc}
   11014:	20020fd4 	.word	0x20020fd4
   11018:	20038438 	.word	0x20038438

0001101c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   1101c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1101e:	4604      	mov	r4, r0
   11020:	b958      	cbnz	r0, 1103a <__retarget_lock_init_recursive+0x1e>
   11022:	4911      	ldr	r1, [pc, #68]	; (11068 <__retarget_lock_init_recursive+0x4c>)
   11024:	f240 137b 	movw	r3, #379	; 0x17b
   11028:	4a10      	ldr	r2, [pc, #64]	; (1106c <__retarget_lock_init_recursive+0x50>)
   1102a:	4811      	ldr	r0, [pc, #68]	; (11070 <__retarget_lock_init_recursive+0x54>)
   1102c:	f013 fe77 	bl	24d1e <assert_print>
   11030:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11034:	480d      	ldr	r0, [pc, #52]	; (1106c <__retarget_lock_init_recursive+0x50>)
   11036:	f013 fe6b 	bl	24d10 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   1103a:	2014      	movs	r0, #20
   1103c:	f011 ff70 	bl	22f20 <malloc>
   11040:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   11042:	b960      	cbnz	r0, 1105e <__retarget_lock_init_recursive+0x42>
   11044:	490b      	ldr	r1, [pc, #44]	; (11074 <__retarget_lock_init_recursive+0x58>)
   11046:	f240 1383 	movw	r3, #387	; 0x183
   1104a:	4a08      	ldr	r2, [pc, #32]	; (1106c <__retarget_lock_init_recursive+0x50>)
   1104c:	4808      	ldr	r0, [pc, #32]	; (11070 <__retarget_lock_init_recursive+0x54>)
   1104e:	f013 fe66 	bl	24d1e <assert_print>
   11052:	4809      	ldr	r0, [pc, #36]	; (11078 <__retarget_lock_init_recursive+0x5c>)
   11054:	f013 fe63 	bl	24d1e <assert_print>
   11058:	f240 1183 	movw	r1, #387	; 0x183
   1105c:	e7ea      	b.n	11034 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   1105e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   11062:	f018 b9d9 	b.w	29418 <z_impl_k_mutex_init>
   11066:	bf00      	nop
   11068:	0002d5ce 	.word	0x0002d5ce
   1106c:	0002d4c9 	.word	0x0002d4c9
   11070:	0002b6e9 	.word	0x0002b6e9
   11074:	0002d5cd 	.word	0x0002d5cd
   11078:	0002d609 	.word	0x0002d609

0001107c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   1107c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1107e:	b958      	cbnz	r0, 11098 <__retarget_lock_acquire_recursive+0x1c>
   11080:	4909      	ldr	r1, [pc, #36]	; (110a8 <__retarget_lock_acquire_recursive+0x2c>)
   11082:	480a      	ldr	r0, [pc, #40]	; (110ac <__retarget_lock_acquire_recursive+0x30>)
   11084:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11088:	4a09      	ldr	r2, [pc, #36]	; (110b0 <__retarget_lock_acquire_recursive+0x34>)
   1108a:	f013 fe48 	bl	24d1e <assert_print>
   1108e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11092:	4807      	ldr	r0, [pc, #28]	; (110b0 <__retarget_lock_acquire_recursive+0x34>)
   11094:	f013 fe3c 	bl	24d10 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   11098:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   1109c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   110a0:	f04f 33ff 	mov.w	r3, #4294967295
   110a4:	f00e bc64 	b.w	1f970 <z_impl_k_mutex_lock>
   110a8:	0002d5ce 	.word	0x0002d5ce
   110ac:	0002b6e9 	.word	0x0002b6e9
   110b0:	0002d4c9 	.word	0x0002d4c9

000110b4 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   110b4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   110b6:	b958      	cbnz	r0, 110d0 <__retarget_lock_release_recursive+0x1c>
   110b8:	4907      	ldr	r1, [pc, #28]	; (110d8 <__retarget_lock_release_recursive+0x24>)
   110ba:	4808      	ldr	r0, [pc, #32]	; (110dc <__retarget_lock_release_recursive+0x28>)
   110bc:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   110c0:	4a07      	ldr	r2, [pc, #28]	; (110e0 <__retarget_lock_release_recursive+0x2c>)
   110c2:	f013 fe2c 	bl	24d1e <assert_print>
   110c6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   110ca:	4805      	ldr	r0, [pc, #20]	; (110e0 <__retarget_lock_release_recursive+0x2c>)
   110cc:	f013 fe20 	bl	24d10 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   110d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   110d4:	f00e bd1c 	b.w	1fb10 <z_impl_k_mutex_unlock>
   110d8:	0002d5ce 	.word	0x0002d5ce
   110dc:	0002b6e9 	.word	0x0002b6e9
   110e0:	0002d4c9 	.word	0x0002d4c9

000110e4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   110e4:	b508      	push	{r3, lr}
   110e6:	211d      	movs	r1, #29
   110e8:	4804      	ldr	r0, [pc, #16]	; (110fc <__chk_fail+0x18>)
   110ea:	f7ff ff63 	bl	10fb4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   110ee:	4040      	eors	r0, r0
   110f0:	f380 8811 	msr	BASEPRI, r0
   110f4:	f04f 0003 	mov.w	r0, #3
   110f8:	df02      	svc	2
	CODE_UNREACHABLE;
   110fa:	bf00      	nop
   110fc:	0002d62c 	.word	0x0002d62c

00011100 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11100:	2000      	movs	r0, #0
   11102:	4b02      	ldr	r3, [pc, #8]	; (1110c <remoteproc_mgr_boot+0xc>)
   11104:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11108:	4770      	bx	lr
   1110a:	bf00      	nop
   1110c:	40005000 	.word	0x40005000

00011110 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11110:	4b0e      	ldr	r3, [pc, #56]	; (1114c <bt_hex+0x3c>)
   11112:	2940      	cmp	r1, #64	; 0x40
   11114:	bf28      	it	cs
   11116:	2140      	movcs	r1, #64	; 0x40
{
   11118:	b570      	push	{r4, r5, r6, lr}
   1111a:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   1111c:	4c0c      	ldr	r4, [pc, #48]	; (11150 <bt_hex+0x40>)
   1111e:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   11120:	42b0      	cmp	r0, r6
   11122:	f103 0302 	add.w	r3, r3, #2
   11126:	d104      	bne.n	11132 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11128:	2300      	movs	r3, #0
   1112a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1112e:	4807      	ldr	r0, [pc, #28]	; (1114c <bt_hex+0x3c>)
   11130:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   11132:	7802      	ldrb	r2, [r0, #0]
   11134:	0912      	lsrs	r2, r2, #4
   11136:	5ca2      	ldrb	r2, [r4, r2]
   11138:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   1113c:	f810 2b01 	ldrb.w	r2, [r0], #1
   11140:	f002 020f 	and.w	r2, r2, #15
   11144:	5ca2      	ldrb	r2, [r4, r2]
   11146:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1114a:	e7e9      	b.n	11120 <bt_hex+0x10>
   1114c:	20021da1 	.word	0x20021da1
   11150:	0002d68c 	.word	0x0002d68c

00011154 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   11154:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   11156:	7803      	ldrb	r3, [r0, #0]
   11158:	b08b      	sub	sp, #44	; 0x2c
   1115a:	4604      	mov	r4, r0
   1115c:	ad07      	add	r5, sp, #28
   1115e:	2b03      	cmp	r3, #3
   11160:	d821      	bhi.n	111a6 <bt_addr_le_str+0x52>
   11162:	e8df f003 	tbb	[pc, r3]
   11166:	1a02      	.short	0x1a02
   11168:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1116a:	4912      	ldr	r1, [pc, #72]	; (111b4 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   1116c:	4628      	mov	r0, r5
   1116e:	f018 fc9e 	bl	29aae <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11172:	9505      	str	r5, [sp, #20]
   11174:	7863      	ldrb	r3, [r4, #1]
   11176:	211e      	movs	r1, #30
   11178:	9304      	str	r3, [sp, #16]
   1117a:	78a3      	ldrb	r3, [r4, #2]
   1117c:	4a0e      	ldr	r2, [pc, #56]	; (111b8 <bt_addr_le_str+0x64>)
   1117e:	9303      	str	r3, [sp, #12]
   11180:	78e3      	ldrb	r3, [r4, #3]
   11182:	480e      	ldr	r0, [pc, #56]	; (111bc <bt_addr_le_str+0x68>)
   11184:	9302      	str	r3, [sp, #8]
   11186:	7923      	ldrb	r3, [r4, #4]
   11188:	9301      	str	r3, [sp, #4]
   1118a:	7963      	ldrb	r3, [r4, #5]
   1118c:	9300      	str	r3, [sp, #0]
   1118e:	79a3      	ldrb	r3, [r4, #6]
   11190:	f013 fc10 	bl	249b4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11194:	4809      	ldr	r0, [pc, #36]	; (111bc <bt_addr_le_str+0x68>)
   11196:	b00b      	add	sp, #44	; 0x2c
   11198:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1119a:	4909      	ldr	r1, [pc, #36]	; (111c0 <bt_addr_le_str+0x6c>)
   1119c:	e7e6      	b.n	1116c <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   1119e:	4909      	ldr	r1, [pc, #36]	; (111c4 <bt_addr_le_str+0x70>)
   111a0:	e7e4      	b.n	1116c <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   111a2:	4909      	ldr	r1, [pc, #36]	; (111c8 <bt_addr_le_str+0x74>)
   111a4:	e7e2      	b.n	1116c <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   111a6:	210a      	movs	r1, #10
   111a8:	4628      	mov	r0, r5
   111aa:	4a08      	ldr	r2, [pc, #32]	; (111cc <bt_addr_le_str+0x78>)
   111ac:	f013 fc02 	bl	249b4 <snprintk>
		break;
   111b0:	e7df      	b.n	11172 <bt_addr_le_str+0x1e>
   111b2:	bf00      	nop
   111b4:	0002b7d7 	.word	0x0002b7d7
   111b8:	0002b7f9 	.word	0x0002b7f9
   111bc:	20021d83 	.word	0x20021d83
   111c0:	0002b7de 	.word	0x0002b7de
   111c4:	0002b7e5 	.word	0x0002b7e5
   111c8:	0002b7ef 	.word	0x0002b7ef
   111cc:	0002effc 	.word	0x0002effc

000111d0 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   111d0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   111d2:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   111d4:	4d09      	ldr	r5, [pc, #36]	; (111fc <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   111d6:	4b0a      	ldr	r3, [pc, #40]	; (11200 <long_wq_init+0x30>)
{
   111d8:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   111da:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   111dc:	9302      	str	r3, [sp, #8]
   111de:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   111e0:	f00f f99c 	bl	2051c <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   111e4:	ab02      	add	r3, sp, #8
   111e6:	4628      	mov	r0, r5
   111e8:	9300      	str	r3, [sp, #0]
   111ea:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   111ee:	230a      	movs	r3, #10
   111f0:	4904      	ldr	r1, [pc, #16]	; (11204 <long_wq_init+0x34>)
   111f2:	f00f f9ad 	bl	20550 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   111f6:	4620      	mov	r0, r4
   111f8:	b005      	add	sp, #20
   111fa:	bd30      	pop	{r4, r5, pc}
   111fc:	20009588 	.word	0x20009588
   11200:	0002d6a4 	.word	0x0002d6a4
   11204:	200318f8 	.word	0x200318f8

00011208 <bt_long_wq_schedule>:
{
   11208:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1120a:	4801      	ldr	r0, [pc, #4]	; (11210 <bt_long_wq_schedule+0x8>)
   1120c:	f00f bac2 	b.w	20794 <k_work_schedule_for_queue>
   11210:	20009588 	.word	0x20009588

00011214 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11214:	7803      	ldrb	r3, [r0, #0]
{
   11216:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   11218:	2b01      	cmp	r3, #1
   1121a:	d013      	beq.n	11244 <uuid_to_uuid128+0x30>
   1121c:	2b02      	cmp	r3, #2
   1121e:	d027      	beq.n	11270 <uuid_to_uuid128+0x5c>
   11220:	b97b      	cbnz	r3, 11242 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11222:	460a      	mov	r2, r1
   11224:	4b18      	ldr	r3, [pc, #96]	; (11288 <uuid_to_uuid128+0x74>)
   11226:	f103 0410 	add.w	r4, r3, #16
   1122a:	f853 5b04 	ldr.w	r5, [r3], #4
   1122e:	42a3      	cmp	r3, r4
   11230:	f842 5b04 	str.w	r5, [r2], #4
   11234:	d1f9      	bne.n	1122a <uuid_to_uuid128+0x16>
   11236:	781b      	ldrb	r3, [r3, #0]
   11238:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1123a:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   1123c:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   1123e:	0a1b      	lsrs	r3, r3, #8
   11240:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11242:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11244:	460a      	mov	r2, r1
   11246:	4b10      	ldr	r3, [pc, #64]	; (11288 <uuid_to_uuid128+0x74>)
   11248:	f103 0410 	add.w	r4, r3, #16
   1124c:	f853 5b04 	ldr.w	r5, [r3], #4
   11250:	42a3      	cmp	r3, r4
   11252:	f842 5b04 	str.w	r5, [r2], #4
   11256:	d1f9      	bne.n	1124c <uuid_to_uuid128+0x38>
   11258:	781b      	ldrb	r3, [r3, #0]
   1125a:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1125c:	6843      	ldr	r3, [r0, #4]
   1125e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11262:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   11264:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11266:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   11268:	0a1b      	lsrs	r3, r3, #8
   1126a:	738a      	strb	r2, [r1, #14]
   1126c:	740b      	strb	r3, [r1, #16]
}
   1126e:	e7e8      	b.n	11242 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11270:	f100 0310 	add.w	r3, r0, #16
   11274:	f850 2b04 	ldr.w	r2, [r0], #4
   11278:	4298      	cmp	r0, r3
   1127a:	f841 2b04 	str.w	r2, [r1], #4
   1127e:	d1f9      	bne.n	11274 <uuid_to_uuid128+0x60>
   11280:	7803      	ldrb	r3, [r0, #0]
   11282:	700b      	strb	r3, [r1, #0]
   11284:	e7dd      	b.n	11242 <uuid_to_uuid128+0x2e>
   11286:	bf00      	nop
   11288:	0002d6ad 	.word	0x0002d6ad

0001128c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1128c:	b538      	push	{r3, r4, r5, lr}
   1128e:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11290:	2d01      	cmp	r5, #1
{
   11292:	4610      	mov	r0, r2
   11294:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11296:	d010      	beq.n	112ba <bt_buf_get_rx+0x2e>
   11298:	2d03      	cmp	r5, #3
   1129a:	d01a      	beq.n	112d2 <bt_buf_get_rx+0x46>
   1129c:	2d05      	cmp	r5, #5
   1129e:	d018      	beq.n	112d2 <bt_buf_get_rx+0x46>
   112a0:	490e      	ldr	r1, [pc, #56]	; (112dc <bt_buf_get_rx+0x50>)
   112a2:	233d      	movs	r3, #61	; 0x3d
   112a4:	4a0e      	ldr	r2, [pc, #56]	; (112e0 <bt_buf_get_rx+0x54>)
   112a6:	480f      	ldr	r0, [pc, #60]	; (112e4 <bt_buf_get_rx+0x58>)
   112a8:	f013 fd39 	bl	24d1e <assert_print>
   112ac:	480e      	ldr	r0, [pc, #56]	; (112e8 <bt_buf_get_rx+0x5c>)
   112ae:	f013 fd36 	bl	24d1e <assert_print>
   112b2:	213d      	movs	r1, #61	; 0x3d
   112b4:	480a      	ldr	r0, [pc, #40]	; (112e0 <bt_buf_get_rx+0x54>)
   112b6:	f013 fd2b 	bl	24d10 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   112ba:	480c      	ldr	r0, [pc, #48]	; (112ec <bt_buf_get_rx+0x60>)
   112bc:	f016 fcfb 	bl	27cb6 <net_buf_alloc_fixed>
   112c0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   112c2:	b120      	cbz	r0, 112ce <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   112c4:	2101      	movs	r1, #1
   112c6:	300c      	adds	r0, #12
   112c8:	f007 ff44 	bl	19154 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   112cc:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   112ce:	4620      	mov	r0, r4
   112d0:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   112d2:	4602      	mov	r2, r0
   112d4:	460b      	mov	r3, r1
   112d6:	4806      	ldr	r0, [pc, #24]	; (112f0 <bt_buf_get_rx+0x64>)
   112d8:	e7f0      	b.n	112bc <bt_buf_get_rx+0x30>
   112da:	bf00      	nop
   112dc:	0002d6ed 	.word	0x0002d6ed
   112e0:	0002d6be 	.word	0x0002d6be
   112e4:	0002b6e9 	.word	0x0002b6e9
   112e8:	0002d732 	.word	0x0002d732
   112ec:	20008ca0 	.word	0x20008ca0
   112f0:	20008c04 	.word	0x20008c04

000112f4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   112f4:	b510      	push	{r4, lr}
   112f6:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   112f8:	490a      	ldr	r1, [pc, #40]	; (11324 <bt_buf_get_cmd_complete+0x30>)
{
   112fa:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   112fc:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   11300:	b920      	cbnz	r0, 1130c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11306:	2001      	movs	r0, #1
   11308:	f7ff bfc0 	b.w	1128c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   1130c:	f008 f878 	bl	19400 <net_buf_ref>
   11310:	2101      	movs	r1, #1
		buf->len = 0U;
   11312:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   11314:	4604      	mov	r4, r0
   11316:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   11318:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   1131a:	300c      	adds	r0, #12
   1131c:	f007 ff1a 	bl	19154 <net_buf_simple_reserve>
}
   11320:	4620      	mov	r0, r4
   11322:	bd10      	pop	{r4, pc}
   11324:	20008000 	.word	0x20008000

00011328 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11328:	b570      	push	{r4, r5, r6, lr}
   1132a:	4604      	mov	r4, r0
	switch (evt) {
   1132c:	2c0f      	cmp	r4, #15
{
   1132e:	460d      	mov	r5, r1
   11330:	4610      	mov	r0, r2
   11332:	4619      	mov	r1, r3
	switch (evt) {
   11334:	d805      	bhi.n	11342 <bt_buf_get_evt+0x1a>
   11336:	2c0d      	cmp	r4, #13
   11338:	d90d      	bls.n	11356 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1133a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1133e:	f7ff bfd9 	b.w	112f4 <bt_buf_get_cmd_complete>
	switch (evt) {
   11342:	2c13      	cmp	r4, #19
   11344:	d107      	bne.n	11356 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   11346:	480c      	ldr	r0, [pc, #48]	; (11378 <bt_buf_get_evt+0x50>)
   11348:	f016 fcb5 	bl	27cb6 <net_buf_alloc_fixed>
			if (buf) {
   1134c:	4604      	mov	r4, r0
   1134e:	b938      	cbnz	r0, 11360 <bt_buf_get_evt+0x38>
{
   11350:	2400      	movs	r4, #0
}
   11352:	4620      	mov	r0, r4
   11354:	bd70      	pop	{r4, r5, r6, pc}
   11356:	4602      	mov	r2, r0
   11358:	460b      	mov	r3, r1
		if (discardable) {
   1135a:	b145      	cbz	r5, 1136e <bt_buf_get_evt+0x46>
   1135c:	4807      	ldr	r0, [pc, #28]	; (1137c <bt_buf_get_evt+0x54>)
   1135e:	e7f3      	b.n	11348 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11360:	2101      	movs	r1, #1
   11362:	300c      	adds	r0, #12
   11364:	f007 fef6 	bl	19154 <net_buf_simple_reserve>
   11368:	2301      	movs	r3, #1
   1136a:	7623      	strb	r3, [r4, #24]
}
   1136c:	e7f1      	b.n	11352 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1136e:	2001      	movs	r0, #1
}
   11370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11374:	f7ff bf8a 	b.w	1128c <bt_buf_get_rx>
   11378:	20008d3c 	.word	0x20008d3c
   1137c:	20008c6c 	.word	0x20008c6c

00011380 <hci_disconn_complete_prio>:
{
   11380:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11382:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11384:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   11388:	781b      	ldrb	r3, [r3, #0]
   1138a:	b963      	cbnz	r3, 113a6 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   1138c:	4620      	mov	r0, r4
   1138e:	f002 ff09 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   11392:	4605      	mov	r5, r0
   11394:	b940      	cbnz	r0, 113a8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11396:	4b08      	ldr	r3, [pc, #32]	; (113b8 <hci_disconn_complete_prio+0x38>)
   11398:	881a      	ldrh	r2, [r3, #0]
   1139a:	b922      	cbnz	r2, 113a6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1139c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   113a0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   113a4:	8018      	strh	r0, [r3, #0]
}
   113a6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   113a8:	2101      	movs	r1, #1
   113aa:	f002 ff03 	bl	141b4 <bt_conn_set_state>
	bt_conn_unref(conn);
   113ae:	4628      	mov	r0, r5
}
   113b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   113b4:	f002 bec6 	b.w	14144 <bt_conn_unref>
   113b8:	2002158e 	.word	0x2002158e

000113bc <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   113bc:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   113be:	4c08      	ldr	r4, [pc, #32]	; (113e0 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   113c0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   113c2:	2205      	movs	r2, #5
   113c4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   113c8:	f003 f9c8 	bl	1475c <bt_conn_lookup_state_le>
		if (!conn) {
   113cc:	b938      	cbnz	r0, 113de <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   113ce:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   113d2:	2204      	movs	r2, #4
}
   113d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   113d8:	4902      	ldr	r1, [pc, #8]	; (113e4 <find_pending_connect.part.0+0x28>)
   113da:	f003 b9bf 	b.w	1475c <bt_conn_lookup_state_le>
}
   113de:	bd10      	pop	{r4, pc}
   113e0:	20008000 	.word	0x20008000
   113e4:	0002d672 	.word	0x0002d672

000113e8 <hci_data_buf_overflow>:
{
   113e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   113ea:	68c3      	ldr	r3, [r0, #12]
   113ec:	2202      	movs	r2, #2
   113ee:	781b      	ldrb	r3, [r3, #0]
   113f0:	4906      	ldr	r1, [pc, #24]	; (1140c <hci_data_buf_overflow+0x24>)
   113f2:	9303      	str	r3, [sp, #12]
   113f4:	4b06      	ldr	r3, [pc, #24]	; (11410 <hci_data_buf_overflow+0x28>)
   113f6:	9302      	str	r3, [sp, #8]
   113f8:	2300      	movs	r3, #0
   113fa:	4618      	mov	r0, r3
   113fc:	e9cd 3300 	strd	r3, r3, [sp]
   11400:	f014 fe0b 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   11404:	b005      	add	sp, #20
   11406:	f85d fb04 	ldr.w	pc, [sp], #4
   1140a:	bf00      	nop
   1140c:	0002a740 	.word	0x0002a740
   11410:	0002d752 	.word	0x0002d752

00011414 <rx_queue_put>:
{
   11414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11416:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   11418:	480b      	ldr	r0, [pc, #44]	; (11448 <rx_queue_put+0x34>)
   1141a:	f007 fec1 	bl	191a0 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1141e:	490b      	ldr	r1, [pc, #44]	; (1144c <rx_queue_put+0x38>)
   11420:	480b      	ldr	r0, [pc, #44]	; (11450 <rx_queue_put+0x3c>)
   11422:	f018 f891 	bl	29548 <k_work_submit_to_queue>
	if (err < 0) {
   11426:	2800      	cmp	r0, #0
   11428:	da0a      	bge.n	11440 <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   1142a:	4b0a      	ldr	r3, [pc, #40]	; (11454 <rx_queue_put+0x40>)
   1142c:	9003      	str	r0, [sp, #12]
   1142e:	9302      	str	r3, [sp, #8]
   11430:	2300      	movs	r3, #0
   11432:	2201      	movs	r2, #1
   11434:	4618      	mov	r0, r3
   11436:	e9cd 3300 	strd	r3, r3, [sp]
   1143a:	4907      	ldr	r1, [pc, #28]	; (11458 <rx_queue_put+0x44>)
   1143c:	f014 fded 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   11440:	b005      	add	sp, #20
   11442:	f85d fb04 	ldr.w	pc, [sp], #4
   11446:	bf00      	nop
   11448:	2000813c 	.word	0x2000813c
   1144c:	200084a8 	.word	0x200084a8
   11450:	200096b8 	.word	0x200096b8
   11454:	0002d77a 	.word	0x0002d77a
   11458:	0002a740 	.word	0x0002a740

0001145c <hci_hardware_error>:
{
   1145c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1145e:	2101      	movs	r1, #1
   11460:	300c      	adds	r0, #12
   11462:	f008 f88d 	bl	19580 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   11466:	7803      	ldrb	r3, [r0, #0]
   11468:	2201      	movs	r2, #1
   1146a:	9303      	str	r3, [sp, #12]
   1146c:	4b05      	ldr	r3, [pc, #20]	; (11484 <hci_hardware_error+0x28>)
   1146e:	4906      	ldr	r1, [pc, #24]	; (11488 <hci_hardware_error+0x2c>)
   11470:	9302      	str	r3, [sp, #8]
   11472:	2300      	movs	r3, #0
   11474:	4618      	mov	r0, r3
   11476:	e9cd 3300 	strd	r3, r3, [sp]
   1147a:	f014 fdce 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   1147e:	b005      	add	sp, #20
   11480:	f85d fb04 	ldr.w	pc, [sp], #4
   11484:	0002d797 	.word	0x0002d797
   11488:	0002a740 	.word	0x0002a740

0001148c <le_data_len_change>:
{
   1148c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1148e:	68c3      	ldr	r3, [r0, #12]
   11490:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   11492:	4620      	mov	r0, r4
   11494:	f002 fe86 	bl	141a4 <bt_conn_lookup_handle>
   11498:	4603      	mov	r3, r0
	if (!conn) {
   1149a:	b950      	cbnz	r0, 114b2 <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1149c:	4a07      	ldr	r2, [pc, #28]	; (114bc <le_data_len_change+0x30>)
   1149e:	4908      	ldr	r1, [pc, #32]	; (114c0 <le_data_len_change+0x34>)
   114a0:	e9cd 0201 	strd	r0, r2, [sp, #4]
   114a4:	9403      	str	r4, [sp, #12]
   114a6:	2201      	movs	r2, #1
   114a8:	9000      	str	r0, [sp, #0]
   114aa:	f014 fdb6 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   114ae:	b004      	add	sp, #16
   114b0:	bd10      	pop	{r4, pc}
   114b2:	b004      	add	sp, #16
   114b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   114b8:	f002 be44 	b.w	14144 <bt_conn_unref>
   114bc:	0002d7b9 	.word	0x0002d7b9
   114c0:	0002a740 	.word	0x0002a740

000114c4 <le_phy_update_complete>:
{
   114c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   114c6:	68c3      	ldr	r3, [r0, #12]
   114c8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   114cc:	4620      	mov	r0, r4
   114ce:	f002 fe69 	bl	141a4 <bt_conn_lookup_handle>
   114d2:	4603      	mov	r3, r0
	if (!conn) {
   114d4:	b950      	cbnz	r0, 114ec <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   114d6:	4a08      	ldr	r2, [pc, #32]	; (114f8 <le_phy_update_complete+0x34>)
   114d8:	4908      	ldr	r1, [pc, #32]	; (114fc <le_phy_update_complete+0x38>)
   114da:	e9cd 0201 	strd	r0, r2, [sp, #4]
   114de:	9403      	str	r4, [sp, #12]
   114e0:	2201      	movs	r2, #1
   114e2:	9000      	str	r0, [sp, #0]
   114e4:	f014 fd99 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   114e8:	b004      	add	sp, #16
   114ea:	bd10      	pop	{r4, pc}
   114ec:	b004      	add	sp, #16
   114ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   114f2:	f002 be27 	b.w	14144 <bt_conn_unref>
   114f6:	bf00      	nop
   114f8:	0002d7b9 	.word	0x0002d7b9
   114fc:	0002a740 	.word	0x0002a740

00011500 <hci_disconn_complete>:
{
   11500:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11502:	68c5      	ldr	r5, [r0, #12]
{
   11504:	b085      	sub	sp, #20
	if (evt->status) {
   11506:	782e      	ldrb	r6, [r5, #0]
   11508:	b986      	cbnz	r6, 1152c <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1150a:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1150e:	4638      	mov	r0, r7
   11510:	f002 fe48 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   11514:	4604      	mov	r4, r0
   11516:	b958      	cbnz	r0, 11530 <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   11518:	4b0b      	ldr	r3, [pc, #44]	; (11548 <hci_disconn_complete+0x48>)
   1151a:	2201      	movs	r2, #1
   1151c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11520:	490a      	ldr	r1, [pc, #40]	; (1154c <hci_disconn_complete+0x4c>)
   11522:	4603      	mov	r3, r0
   11524:	9703      	str	r7, [sp, #12]
   11526:	9000      	str	r0, [sp, #0]
   11528:	f014 fd77 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   1152c:	b005      	add	sp, #20
   1152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   11530:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11532:	4631      	mov	r1, r6
	conn->err = evt->reason;
   11534:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11536:	f002 fe3d 	bl	141b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   1153a:	4620      	mov	r0, r4
}
   1153c:	b005      	add	sp, #20
   1153e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   11542:	f002 bdff 	b.w	14144 <bt_conn_unref>
   11546:	bf00      	nop
   11548:	0002d7dd 	.word	0x0002d7dd
   1154c:	0002a740 	.word	0x0002a740

00011550 <handle_event>:
{
   11550:	b530      	push	{r4, r5, lr}
   11552:	4604      	mov	r4, r0
   11554:	4608      	mov	r0, r1
   11556:	b087      	sub	sp, #28
   11558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   1155c:	4293      	cmp	r3, r2
   1155e:	d112      	bne.n	11586 <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   11560:	8a05      	ldrh	r5, [r0, #16]
   11562:	68c0      	ldr	r0, [r0, #12]
   11564:	4629      	mov	r1, r5
   11566:	f7ff fdd3 	bl	11110 <bt_hex>
   1156a:	4b16      	ldr	r3, [pc, #88]	; (115c4 <handle_event+0x74>)
   1156c:	e9cd 5004 	strd	r5, r0, [sp, #16]
   11570:	9302      	str	r3, [sp, #8]
   11572:	2300      	movs	r3, #0
   11574:	2202      	movs	r2, #2
   11576:	4618      	mov	r0, r3
   11578:	e9cd 3300 	strd	r3, r3, [sp]
   1157c:	4912      	ldr	r1, [pc, #72]	; (115c8 <handle_event+0x78>)
   1157e:	9403      	str	r4, [sp, #12]
   11580:	f014 fd4b 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   11584:	e014      	b.n	115b0 <handle_event+0x60>
		if (handler->event != event) {
   11586:	4611      	mov	r1, r2
   11588:	f811 5b08 	ldrb.w	r5, [r1], #8
   1158c:	42a5      	cmp	r5, r4
   1158e:	d116      	bne.n	115be <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   11590:	8a03      	ldrh	r3, [r0, #16]
   11592:	7851      	ldrb	r1, [r2, #1]
   11594:	4299      	cmp	r1, r3
   11596:	d90d      	bls.n	115b4 <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   11598:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1159c:	4b0b      	ldr	r3, [pc, #44]	; (115cc <handle_event+0x7c>)
   1159e:	2201      	movs	r2, #1
   115a0:	9302      	str	r3, [sp, #8]
   115a2:	2300      	movs	r3, #0
   115a4:	4908      	ldr	r1, [pc, #32]	; (115c8 <handle_event+0x78>)
   115a6:	4618      	mov	r0, r3
   115a8:	e9cd 3300 	strd	r3, r3, [sp]
   115ac:	f014 fd35 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   115b0:	b007      	add	sp, #28
   115b2:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   115b4:	6853      	ldr	r3, [r2, #4]
}
   115b6:	b007      	add	sp, #28
   115b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   115bc:	4718      	bx	r3
   115be:	460a      	mov	r2, r1
   115c0:	e7cc      	b.n	1155c <handle_event+0xc>
   115c2:	bf00      	nop
   115c4:	0002d825 	.word	0x0002d825
   115c8:	0002a740 	.word	0x0002a740
   115cc:	0002d803 	.word	0x0002d803

000115d0 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   115d0:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   115d2:	4853      	ldr	r0, [pc, #332]	; (11720 <rx_work_handler+0x150>)
{
   115d4:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   115d6:	f007 fe4d 	bl	19274 <net_buf_slist_get>
	if (!buf) {
   115da:	4604      	mov	r4, r0
   115dc:	2800      	cmp	r0, #0
   115de:	d064      	beq.n	116aa <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   115e0:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   115e2:	2b01      	cmp	r3, #1
   115e4:	d063      	beq.n	116ae <rx_work_handler+0xde>
   115e6:	2b03      	cmp	r3, #3
   115e8:	f040 8090 	bne.w	1170c <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   115ec:	8a03      	ldrh	r3, [r0, #16]
   115ee:	2b03      	cmp	r3, #3
   115f0:	d80c      	bhi.n	1160c <rx_work_handler+0x3c>
   115f2:	f240 13ed 	movw	r3, #493	; 0x1ed
   115f6:	4a4b      	ldr	r2, [pc, #300]	; (11724 <rx_work_handler+0x154>)
   115f8:	494b      	ldr	r1, [pc, #300]	; (11728 <rx_work_handler+0x158>)
   115fa:	484c      	ldr	r0, [pc, #304]	; (1172c <rx_work_handler+0x15c>)
   115fc:	f013 fb8f 	bl	24d1e <assert_print>
   11600:	4040      	eors	r0, r0
   11602:	f380 8811 	msr	BASEPRI, r0
   11606:	f04f 0003 	mov.w	r0, #3
   1160a:	df02      	svc	2
   1160c:	2104      	movs	r1, #4
   1160e:	f104 000c 	add.w	r0, r4, #12
   11612:	f007 ffb5 	bl	19580 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11616:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   11618:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1161a:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1161c:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   1161e:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   11620:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   11624:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   11626:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   11628:	d00f      	beq.n	1164a <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1162a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1162e:	4b40      	ldr	r3, [pc, #256]	; (11730 <rx_work_handler+0x160>)
   11630:	2201      	movs	r2, #1
   11632:	9302      	str	r3, [sp, #8]
   11634:	2300      	movs	r3, #0
   11636:	493f      	ldr	r1, [pc, #252]	; (11734 <rx_work_handler+0x164>)
   11638:	4618      	mov	r0, r3
   1163a:	e9cd 3300 	strd	r3, r3, [sp]
   1163e:	f014 fcec 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   11642:	4620      	mov	r0, r4
   11644:	f007 fe98 	bl	19378 <net_buf_unref>
		break;
   11648:	e01a      	b.n	11680 <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1164a:	f002 fdab 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   1164e:	4605      	mov	r5, r0
   11650:	b958      	cbnz	r0, 1166a <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   11652:	8b63      	ldrh	r3, [r4, #26]
   11654:	2201      	movs	r2, #1
   11656:	9303      	str	r3, [sp, #12]
   11658:	4b37      	ldr	r3, [pc, #220]	; (11738 <rx_work_handler+0x168>)
   1165a:	4936      	ldr	r1, [pc, #216]	; (11734 <rx_work_handler+0x164>)
   1165c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11660:	4603      	mov	r3, r0
   11662:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   11664:	f014 fcd9 	bl	2601a <z_log_msg_runtime_create.constprop.0>
   11668:	e7eb      	b.n	11642 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   1166a:	f002 fe87 	bl	1437c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1166e:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   11670:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   11672:	0b32      	lsrs	r2, r6, #12
   11674:	4628      	mov	r0, r5
   11676:	f002 fc09 	bl	13e8c <bt_conn_recv>
	bt_conn_unref(conn);
   1167a:	4628      	mov	r0, r5
   1167c:	f002 fd62 	bl	14144 <bt_conn_unref>
	return list->head;
   11680:	4b2e      	ldr	r3, [pc, #184]	; (1173c <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   11682:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   11686:	b183      	cbz	r3, 116aa <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   11688:	492d      	ldr	r1, [pc, #180]	; (11740 <rx_work_handler+0x170>)
   1168a:	482e      	ldr	r0, [pc, #184]	; (11744 <rx_work_handler+0x174>)
   1168c:	f017 ff5c 	bl	29548 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   11690:	2800      	cmp	r0, #0
   11692:	da0a      	bge.n	116aa <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   11694:	4b2c      	ldr	r3, [pc, #176]	; (11748 <rx_work_handler+0x178>)
   11696:	9003      	str	r0, [sp, #12]
   11698:	9302      	str	r3, [sp, #8]
   1169a:	2300      	movs	r3, #0
   1169c:	2201      	movs	r2, #1
   1169e:	4618      	mov	r0, r3
   116a0:	e9cd 3300 	strd	r3, r3, [sp]
   116a4:	4923      	ldr	r1, [pc, #140]	; (11734 <rx_work_handler+0x164>)
   116a6:	f014 fcb8 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   116aa:	b006      	add	sp, #24
   116ac:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   116ae:	8a03      	ldrh	r3, [r0, #16]
   116b0:	2b01      	cmp	r3, #1
   116b2:	d80c      	bhi.n	116ce <rx_work_handler+0xfe>
   116b4:	f640 136d 	movw	r3, #2413	; 0x96d
   116b8:	4a1a      	ldr	r2, [pc, #104]	; (11724 <rx_work_handler+0x154>)
   116ba:	491b      	ldr	r1, [pc, #108]	; (11728 <rx_work_handler+0x158>)
   116bc:	481b      	ldr	r0, [pc, #108]	; (1172c <rx_work_handler+0x15c>)
   116be:	f013 fb2e 	bl	24d1e <assert_print>
   116c2:	4040      	eors	r0, r0
   116c4:	f380 8811 	msr	BASEPRI, r0
   116c8:	f04f 0003 	mov.w	r0, #3
   116cc:	df02      	svc	2
   116ce:	2102      	movs	r1, #2
   116d0:	f104 000c 	add.w	r0, r4, #12
   116d4:	f007 ff54 	bl	19580 <net_buf_simple_pull_mem>
   116d8:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   116da:	7800      	ldrb	r0, [r0, #0]
   116dc:	f014 fc5b 	bl	25f96 <bt_hci_evt_get_flags>
   116e0:	0783      	lsls	r3, r0, #30
   116e2:	d40c      	bmi.n	116fe <rx_work_handler+0x12e>
   116e4:	f640 1371 	movw	r3, #2417	; 0x971
   116e8:	4a0e      	ldr	r2, [pc, #56]	; (11724 <rx_work_handler+0x154>)
   116ea:	4918      	ldr	r1, [pc, #96]	; (1174c <rx_work_handler+0x17c>)
   116ec:	480f      	ldr	r0, [pc, #60]	; (1172c <rx_work_handler+0x15c>)
   116ee:	f013 fb16 	bl	24d1e <assert_print>
   116f2:	4040      	eors	r0, r0
   116f4:	f380 8811 	msr	BASEPRI, r0
   116f8:	f04f 0003 	mov.w	r0, #3
   116fc:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   116fe:	2306      	movs	r3, #6
   11700:	4621      	mov	r1, r4
   11702:	4a13      	ldr	r2, [pc, #76]	; (11750 <rx_work_handler+0x180>)
   11704:	7828      	ldrb	r0, [r5, #0]
   11706:	f7ff ff23 	bl	11550 <handle_event>
	net_buf_unref(buf);
   1170a:	e79a      	b.n	11642 <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   1170c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1170e:	4b11      	ldr	r3, [pc, #68]	; (11754 <rx_work_handler+0x184>)
   11710:	2201      	movs	r2, #1
   11712:	9302      	str	r3, [sp, #8]
   11714:	2300      	movs	r3, #0
   11716:	4907      	ldr	r1, [pc, #28]	; (11734 <rx_work_handler+0x164>)
   11718:	4618      	mov	r0, r3
   1171a:	e9cd 3300 	strd	r3, r3, [sp]
   1171e:	e7a1      	b.n	11664 <rx_work_handler+0x94>
   11720:	2000813c 	.word	0x2000813c
   11724:	0002d847 	.word	0x0002d847
   11728:	0002d87b 	.word	0x0002d87b
   1172c:	0002b6e9 	.word	0x0002b6e9
   11730:	0002d894 	.word	0x0002d894
   11734:	0002a740 	.word	0x0002a740
   11738:	0002d8b8 	.word	0x0002d8b8
   1173c:	20008000 	.word	0x20008000
   11740:	200084a8 	.word	0x200084a8
   11744:	200096b8 	.word	0x200096b8
   11748:	0002d77a 	.word	0x0002d77a
   1174c:	0002d8da 	.word	0x0002d8da
   11750:	0002afdc 	.word	0x0002afdc
   11754:	0002d908 	.word	0x0002d908

00011758 <hci_le_meta_event>:
{
   11758:	b510      	push	{r4, lr}
   1175a:	2101      	movs	r1, #1
   1175c:	4604      	mov	r4, r0
   1175e:	300c      	adds	r0, #12
   11760:	f007 ff0e 	bl	19580 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11764:	4621      	mov	r1, r4
}
   11766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1176a:	230a      	movs	r3, #10
   1176c:	4a01      	ldr	r2, [pc, #4]	; (11774 <hci_le_meta_event+0x1c>)
   1176e:	7800      	ldrb	r0, [r0, #0]
   11770:	f7ff beee 	b.w	11550 <handle_event>
   11774:	0002b00c 	.word	0x0002b00c

00011778 <le_remote_feat_complete>:
{
   11778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1177a:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1177c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   11780:	4630      	mov	r0, r6
   11782:	f002 fd0f 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   11786:	4604      	mov	r4, r0
   11788:	b958      	cbnz	r0, 117a2 <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1178a:	4b10      	ldr	r3, [pc, #64]	; (117cc <le_remote_feat_complete+0x54>)
   1178c:	2201      	movs	r2, #1
   1178e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11792:	490f      	ldr	r1, [pc, #60]	; (117d0 <le_remote_feat_complete+0x58>)
   11794:	4603      	mov	r3, r0
   11796:	9603      	str	r6, [sp, #12]
   11798:	9000      	str	r0, [sp, #0]
   1179a:	f014 fc3e 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   1179e:	b004      	add	sp, #16
   117a0:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   117a2:	782b      	ldrb	r3, [r5, #0]
   117a4:	b93b      	cbnz	r3, 117b6 <le_remote_feat_complete+0x3e>
   117a6:	f8d5 3003 	ldr.w	r3, [r5, #3]
   117aa:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   117ae:	f8d5 3007 	ldr.w	r3, [r5, #7]
   117b2:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   117b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   117ba:	1d20      	adds	r0, r4, #4
   117bc:	f014 fc16 	bl	25fec <atomic_or>
	bt_conn_unref(conn);
   117c0:	4620      	mov	r0, r4
}
   117c2:	b004      	add	sp, #16
   117c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   117c8:	f002 bcbc 	b.w	14144 <bt_conn_unref>
   117cc:	0002d7b9 	.word	0x0002d7b9
   117d0:	0002a740 	.word	0x0002a740

000117d4 <hci_cmd_done>:
{
   117d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117d8:	4606      	mov	r6, r0
   117da:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   117dc:	7a90      	ldrb	r0, [r2, #10]
{
   117de:	460f      	mov	r7, r1
   117e0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   117e2:	f007 fb8f 	bl	18f04 <net_buf_pool_get>
   117e6:	4d3d      	ldr	r5, [pc, #244]	; (118dc <hci_cmd_done+0x108>)
   117e8:	4285      	cmp	r5, r0
   117ea:	d014      	beq.n	11816 <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   117ec:	7aa4      	ldrb	r4, [r4, #10]
   117ee:	4620      	mov	r0, r4
   117f0:	f007 fb88 	bl	18f04 <net_buf_pool_get>
   117f4:	4b3a      	ldr	r3, [pc, #232]	; (118e0 <hci_cmd_done+0x10c>)
   117f6:	e9cd 0505 	strd	r0, r5, [sp, #20]
   117fa:	9302      	str	r3, [sp, #8]
   117fc:	2300      	movs	r3, #0
   117fe:	2202      	movs	r2, #2
   11800:	4618      	mov	r0, r3
   11802:	e9cd 6403 	strd	r6, r4, [sp, #12]
   11806:	e9cd 3300 	strd	r3, r3, [sp]
   1180a:	4936      	ldr	r1, [pc, #216]	; (118e4 <hci_cmd_done+0x110>)
   1180c:	f014 fc05 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   11810:	b008      	add	sp, #32
   11812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   11816:	4620      	mov	r0, r4
   11818:	f007 fb7c 	bl	18f14 <net_buf_id>
   1181c:	f04f 080c 	mov.w	r8, #12
   11820:	4d31      	ldr	r5, [pc, #196]	; (118e8 <hci_cmd_done+0x114>)
   11822:	fb08 5000 	mla	r0, r8, r0, r5
   11826:	8843      	ldrh	r3, [r0, #2]
   11828:	42b3      	cmp	r3, r6
   1182a:	d012      	beq.n	11852 <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1182c:	4620      	mov	r0, r4
   1182e:	f007 fb71 	bl	18f14 <net_buf_id>
   11832:	fb08 5000 	mla	r0, r8, r0, r5
   11836:	8843      	ldrh	r3, [r0, #2]
   11838:	2202      	movs	r2, #2
   1183a:	e9cd 6303 	strd	r6, r3, [sp, #12]
   1183e:	4b2b      	ldr	r3, [pc, #172]	; (118ec <hci_cmd_done+0x118>)
   11840:	4928      	ldr	r1, [pc, #160]	; (118e4 <hci_cmd_done+0x110>)
   11842:	9302      	str	r3, [sp, #8]
   11844:	2300      	movs	r3, #0
   11846:	4618      	mov	r0, r3
   11848:	e9cd 3300 	strd	r3, r3, [sp]
   1184c:	f014 fbe5 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		return;
   11850:	e7de      	b.n	11810 <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   11852:	4e27      	ldr	r6, [pc, #156]	; (118f0 <hci_cmd_done+0x11c>)
   11854:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   11858:	b120      	cbz	r0, 11864 <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   1185a:	f007 fd8d 	bl	19378 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1185e:	2300      	movs	r3, #0
   11860:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   11864:	4620      	mov	r0, r4
   11866:	f007 fb55 	bl	18f14 <net_buf_id>
   1186a:	260c      	movs	r6, #12
   1186c:	fb06 5000 	mla	r0, r6, r0, r5
   11870:	6843      	ldr	r3, [r0, #4]
   11872:	b19b      	cbz	r3, 1189c <hci_cmd_done+0xc8>
   11874:	b997      	cbnz	r7, 1189c <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   11876:	4620      	mov	r0, r4
   11878:	f007 fb4c 	bl	18f14 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1187c:	2101      	movs	r1, #1
   1187e:	fb06 5000 	mla	r0, r6, r0, r5
   11882:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   11884:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   11888:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1188a:	f003 061f 	and.w	r6, r3, #31
   1188e:	40b1      	lsls	r1, r6
	if (val) {
   11890:	095b      	lsrs	r3, r3, #5
   11892:	b1e2      	cbz	r2, 118ce <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11894:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11898:	f014 fba8 	bl	25fec <atomic_or>
	if (cmd(buf)->sync) {
   1189c:	4620      	mov	r0, r4
   1189e:	f007 fb39 	bl	18f14 <net_buf_id>
   118a2:	260c      	movs	r6, #12
   118a4:	fb06 5000 	mla	r0, r6, r0, r5
   118a8:	6883      	ldr	r3, [r0, #8]
   118aa:	2b00      	cmp	r3, #0
   118ac:	d0b0      	beq.n	11810 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   118ae:	4620      	mov	r0, r4
   118b0:	f007 fb30 	bl	18f14 <net_buf_id>
   118b4:	4370      	muls	r0, r6
   118b6:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   118b8:	4620      	mov	r0, r4
   118ba:	f007 fb2b 	bl	18f14 <net_buf_id>
   118be:	fb06 5500 	mla	r5, r6, r0, r5
   118c2:	68a8      	ldr	r0, [r5, #8]
}
   118c4:	b008      	add	sp, #32
   118c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   118ca:	f00e bab3 	b.w	1fe34 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   118ce:	43c9      	mvns	r1, r1
   118d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   118d4:	f014 fbb0 	bl	26038 <atomic_and.isra.0>
   118d8:	e7e0      	b.n	1189c <hci_cmd_done+0xc8>
   118da:	bf00      	nop
   118dc:	20008d08 	.word	0x20008d08
   118e0:	0002d91c 	.word	0x0002d91c
   118e4:	0002a740 	.word	0x0002a740
   118e8:	20020fd8 	.word	0x20020fd8
   118ec:	0002d951 	.word	0x0002d951
   118f0:	20008000 	.word	0x20008000

000118f4 <hci_cmd_status>:
{
   118f4:	b538      	push	{r3, r4, r5, lr}
   118f6:	2104      	movs	r1, #4
   118f8:	4604      	mov	r4, r0
   118fa:	300c      	adds	r0, #12
   118fc:	f007 fe40 	bl	19580 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   11900:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   11902:	7801      	ldrb	r1, [r0, #0]
   11904:	4622      	mov	r2, r4
   11906:	8840      	ldrh	r0, [r0, #2]
   11908:	f7ff ff64 	bl	117d4 <hci_cmd_done>
	if (ncmd) {
   1190c:	b125      	cbz	r5, 11918 <hci_cmd_status+0x24>
}
   1190e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11912:	4802      	ldr	r0, [pc, #8]	; (1191c <hci_cmd_status+0x28>)
   11914:	f00e ba8e 	b.w	1fe34 <z_impl_k_sem_give>
   11918:	bd38      	pop	{r3, r4, r5, pc}
   1191a:	bf00      	nop
   1191c:	20008120 	.word	0x20008120

00011920 <hci_cmd_complete>:
{
   11920:	b538      	push	{r3, r4, r5, lr}
   11922:	2103      	movs	r1, #3
   11924:	4604      	mov	r4, r0
   11926:	300c      	adds	r0, #12
   11928:	f007 fe2a 	bl	19580 <net_buf_simple_pull_mem>
	status = buf->data[0];
   1192c:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   1192e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   11930:	4622      	mov	r2, r4
   11932:	7819      	ldrb	r1, [r3, #0]
   11934:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   11938:	f7ff ff4c 	bl	117d4 <hci_cmd_done>
	if (ncmd) {
   1193c:	b125      	cbz	r5, 11948 <hci_cmd_complete+0x28>
}
   1193e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11942:	4802      	ldr	r0, [pc, #8]	; (1194c <hci_cmd_complete+0x2c>)
   11944:	f00e ba76 	b.w	1fe34 <z_impl_k_sem_give>
   11948:	bd38      	pop	{r3, r4, r5, pc}
   1194a:	bf00      	nop
   1194c:	20008120 	.word	0x20008120

00011950 <hci_num_completed_packets>:
{
   11950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   11954:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   11956:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   11958:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   1195a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 11a44 <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   1195e:	783b      	ldrb	r3, [r7, #0]
   11960:	429d      	cmp	r5, r3
   11962:	db02      	blt.n	1196a <hci_num_completed_packets+0x1a>
}
   11964:	b004      	add	sp, #16
   11966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1196a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   1196e:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   11972:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   11976:	4650      	mov	r0, sl
   11978:	f002 fc14 	bl	141a4 <bt_conn_lookup_handle>
		if (!conn) {
   1197c:	4604      	mov	r4, r0
   1197e:	b1d8      	cbz	r0, 119b8 <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   11980:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   11984:	2e00      	cmp	r6, #0
   11986:	d032      	beq.n	119ee <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   11988:	f04f 0320 	mov.w	r3, #32
   1198c:	f3ef 8211 	mrs	r2, BASEPRI
   11990:	f383 8812 	msr	BASEPRI_MAX, r3
   11994:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   11998:	69e3      	ldr	r3, [r4, #28]
   1199a:	b1d3      	cbz	r3, 119d2 <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   1199c:	3b01      	subs	r3, #1
   1199e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   119a0:	f382 8811 	msr	BASEPRI, r2
   119a4:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   119a8:	4620      	mov	r0, r4
   119aa:	f002 f9f3 	bl	13d94 <bt_conn_get_pkts>
   119ae:	3e01      	subs	r6, #1
   119b0:	f00e fa40 	bl	1fe34 <z_impl_k_sem_give>
   119b4:	b2b6      	uxth	r6, r6
   119b6:	e7e5      	b.n	11984 <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   119b8:	4b23      	ldr	r3, [pc, #140]	; (11a48 <hci_num_completed_packets+0xf8>)
   119ba:	2201      	movs	r2, #1
   119bc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   119c0:	4922      	ldr	r1, [pc, #136]	; (11a4c <hci_num_completed_packets+0xfc>)
   119c2:	4603      	mov	r3, r0
   119c4:	f8cd a00c 	str.w	sl, [sp, #12]
   119c8:	9000      	str	r0, [sp, #0]
   119ca:	f014 fb26 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   119ce:	3501      	adds	r5, #1
   119d0:	e7c5      	b.n	1195e <hci_num_completed_packets+0xe>
   119d2:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   119d4:	b97b      	cbnz	r3, 119f6 <hci_num_completed_packets+0xa6>
   119d6:	f382 8811 	msr	BASEPRI, r2
   119da:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   119de:	2201      	movs	r2, #1
   119e0:	4618      	mov	r0, r3
   119e2:	e9cd 3901 	strd	r3, r9, [sp, #4]
   119e6:	4919      	ldr	r1, [pc, #100]	; (11a4c <hci_num_completed_packets+0xfc>)
   119e8:	9300      	str	r3, [sp, #0]
   119ea:	f014 fb16 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   119ee:	4620      	mov	r0, r4
   119f0:	f002 fba8 	bl	14144 <bt_conn_unref>
   119f4:	e7eb      	b.n	119ce <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   119f6:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   119f8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   119fa:	4283      	cmp	r3, r0
	list->head = node;
   119fc:	6161      	str	r1, [r4, #20]
	list->tail = node;
   119fe:	bf08      	it	eq
   11a00:	61a1      	streq	r1, [r4, #24]
   11a02:	f382 8811 	msr	BASEPRI, r2
   11a06:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   11a0a:	f04f 0220 	mov.w	r2, #32
   11a0e:	f3ef 8111 	mrs	r1, BASEPRI
   11a12:	f382 8812 	msr	BASEPRI_MAX, r2
   11a16:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   11a1a:	68da      	ldr	r2, [r3, #12]
   11a1c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   11a1e:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   11a22:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   11a26:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   11a28:	b94a      	cbnz	r2, 11a3e <hci_num_completed_packets+0xee>
	list->head = node;
   11a2a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   11a2e:	f381 8811 	msr	BASEPRI, r1
   11a32:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   11a36:	4650      	mov	r0, sl
   11a38:	f00e fd6a 	bl	20510 <k_work_submit>
   11a3c:	e7b4      	b.n	119a8 <hci_num_completed_packets+0x58>
	parent->next = child;
   11a3e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11a40:	6263      	str	r3, [r4, #36]	; 0x24
}
   11a42:	e7f4      	b.n	11a2e <hci_num_completed_packets+0xde>
   11a44:	0002d9a0 	.word	0x0002d9a0
   11a48:	0002d984 	.word	0x0002d984
   11a4c:	0002a740 	.word	0x0002a740

00011a50 <le_conn_update_complete>:
{
   11a50:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   11a52:	68c5      	ldr	r5, [r0, #12]
{
   11a54:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   11a56:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   11a5a:	4630      	mov	r0, r6
   11a5c:	f002 fba2 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   11a60:	4604      	mov	r4, r0
   11a62:	b958      	cbnz	r0, 11a7c <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11a64:	4b2b      	ldr	r3, [pc, #172]	; (11b14 <le_conn_update_complete+0xc4>)
   11a66:	2201      	movs	r2, #1
   11a68:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11a6c:	492a      	ldr	r1, [pc, #168]	; (11b18 <le_conn_update_complete+0xc8>)
   11a6e:	4603      	mov	r3, r0
   11a70:	9603      	str	r6, [sp, #12]
   11a72:	9000      	str	r0, [sp, #0]
   11a74:	f014 fad1 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   11a78:	b006      	add	sp, #24
   11a7a:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   11a7c:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   11a7e:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   11a80:	2b1a      	cmp	r3, #26
   11a82:	d119      	bne.n	11ab8 <le_conn_update_complete+0x68>
   11a84:	78c3      	ldrb	r3, [r0, #3]
   11a86:	2b01      	cmp	r3, #1
   11a88:	d12a      	bne.n	11ae0 <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   11a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11a8e:	4630      	mov	r0, r6
   11a90:	f014 faac 	bl	25fec <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   11a94:	0542      	lsls	r2, r0, #21
   11a96:	d40f      	bmi.n	11ab8 <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   11a98:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   11a9c:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   11a9e:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   11aa0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   11aa4:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   11aa6:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   11aa8:	f003 f98a 	bl	14dc0 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   11aac:	4620      	mov	r0, r4
}
   11aae:	b006      	add	sp, #24
   11ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   11ab4:	f002 bb46 	b.w	14144 <bt_conn_unref>
		if (!evt->status) {
   11ab8:	782b      	ldrb	r3, [r5, #0]
   11aba:	b98b      	cbnz	r3, 11ae0 <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   11abc:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   11ac0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   11ac4:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   11ac8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11acc:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   11ad0:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11ad4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   11ad8:	4630      	mov	r0, r6
   11ada:	f014 faad 	bl	26038 <atomic_and.isra.0>
}
   11ade:	e014      	b.n	11b0a <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11ae0:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   11ae4:	05db      	lsls	r3, r3, #23
   11ae6:	d5f5      	bpl.n	11ad4 <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   11ae8:	782b      	ldrb	r3, [r5, #0]
   11aea:	2b20      	cmp	r3, #32
   11aec:	d1f2      	bne.n	11ad4 <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   11aee:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   11af2:	2b00      	cmp	r3, #0
   11af4:	d0ee      	beq.n	11ad4 <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   11af6:	3b01      	subs	r3, #1
   11af8:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   11afc:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   11b00:	2300      	movs	r3, #0
   11b02:	f104 0060 	add.w	r0, r4, #96	; 0x60
   11b06:	f00e febb 	bl	20880 <k_work_schedule>
		notify_le_param_updated(conn);
   11b0a:	4620      	mov	r0, r4
   11b0c:	f002 fc9a 	bl	14444 <notify_le_param_updated>
   11b10:	e7cc      	b.n	11aac <le_conn_update_complete+0x5c>
   11b12:	bf00      	nop
   11b14:	0002d7b9 	.word	0x0002d7b9
   11b18:	0002a740 	.word	0x0002a740

00011b1c <bt_hci_cmd_state_set_init>:
{
   11b1c:	b510      	push	{r4, lr}
	state->bit = bit;
   11b1e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   11b22:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   11b26:	460c      	mov	r4, r1
	state->val = val;
   11b28:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   11b2a:	f007 f9f3 	bl	18f14 <net_buf_id>
   11b2e:	220c      	movs	r2, #12
   11b30:	4b02      	ldr	r3, [pc, #8]	; (11b3c <bt_hci_cmd_state_set_init+0x20>)
   11b32:	fb02 3300 	mla	r3, r2, r0, r3
   11b36:	605c      	str	r4, [r3, #4]
}
   11b38:	bd10      	pop	{r4, pc}
   11b3a:	bf00      	nop
   11b3c:	20020fd8 	.word	0x20020fd8

00011b40 <bt_hci_cmd_create>:
{
   11b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   11b44:	f04f 32ff 	mov.w	r2, #4294967295
   11b48:	4606      	mov	r6, r0
   11b4a:	f04f 33ff 	mov.w	r3, #4294967295
   11b4e:	481e      	ldr	r0, [pc, #120]	; (11bc8 <bt_hci_cmd_create+0x88>)
   11b50:	460f      	mov	r7, r1
   11b52:	f016 f8b0 	bl	27cb6 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   11b56:	4604      	mov	r4, r0
   11b58:	b958      	cbnz	r0, 11b72 <bt_hci_cmd_create+0x32>
   11b5a:	491c      	ldr	r1, [pc, #112]	; (11bcc <bt_hci_cmd_create+0x8c>)
   11b5c:	481c      	ldr	r0, [pc, #112]	; (11bd0 <bt_hci_cmd_create+0x90>)
   11b5e:	f240 1301 	movw	r3, #257	; 0x101
   11b62:	4a1c      	ldr	r2, [pc, #112]	; (11bd4 <bt_hci_cmd_create+0x94>)
   11b64:	f013 f8db 	bl	24d1e <assert_print>
   11b68:	f240 1101 	movw	r1, #257	; 0x101
   11b6c:	4819      	ldr	r0, [pc, #100]	; (11bd4 <bt_hci_cmd_create+0x94>)
   11b6e:	f013 f8cf 	bl	24d10 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11b72:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   11b76:	f100 0a0c 	add.w	sl, r0, #12
   11b7a:	2101      	movs	r1, #1
   11b7c:	4650      	mov	r0, sl
   11b7e:	f007 fae9 	bl	19154 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   11b82:	4620      	mov	r0, r4
   11b84:	f884 8018 	strb.w	r8, [r4, #24]
   11b88:	f007 f9c4 	bl	18f14 <net_buf_id>
   11b8c:	f04f 090c 	mov.w	r9, #12
   11b90:	4d11      	ldr	r5, [pc, #68]	; (11bd8 <bt_hci_cmd_create+0x98>)
   11b92:	fb09 5000 	mla	r0, r9, r0, r5
   11b96:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   11b98:	4620      	mov	r0, r4
   11b9a:	f007 f9bb 	bl	18f14 <net_buf_id>
   11b9e:	fb09 5000 	mla	r0, r9, r0, r5
   11ba2:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   11ba6:	4620      	mov	r0, r4
   11ba8:	f007 f9b4 	bl	18f14 <net_buf_id>
   11bac:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   11bb0:	2103      	movs	r1, #3
   11bb2:	4650      	mov	r0, sl
   11bb4:	f8c5 8004 	str.w	r8, [r5, #4]
   11bb8:	f007 fd00 	bl	195bc <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   11bbc:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   11bbe:	7087      	strb	r7, [r0, #2]
}
   11bc0:	4620      	mov	r0, r4
   11bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11bc6:	bf00      	nop
   11bc8:	20008d08 	.word	0x20008d08
   11bcc:	0002f381 	.word	0x0002f381
   11bd0:	0002b6e9 	.word	0x0002b6e9
   11bd4:	0002d847 	.word	0x0002d847
   11bd8:	20020fd8 	.word	0x20020fd8

00011bdc <bt_hci_cmd_send_sync>:
{
   11bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11be0:	4607      	mov	r7, r0
   11be2:	4615      	mov	r5, r2
	if (!buf) {
   11be4:	460c      	mov	r4, r1
{
   11be6:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   11be8:	b921      	cbnz	r1, 11bf4 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   11bea:	f7ff ffa9 	bl	11b40 <bt_hci_cmd_create>
		if (!buf) {
   11bee:	4604      	mov	r4, r0
   11bf0:	2800      	cmp	r0, #0
   11bf2:	d056      	beq.n	11ca2 <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   11bf4:	ae06      	add	r6, sp, #24
   11bf6:	2201      	movs	r2, #1
   11bf8:	2100      	movs	r1, #0
   11bfa:	4630      	mov	r0, r6
   11bfc:	f017 fc41 	bl	29482 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   11c00:	4620      	mov	r0, r4
   11c02:	f007 f987 	bl	18f14 <net_buf_id>
   11c06:	230c      	movs	r3, #12
   11c08:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11ca8 <bt_hci_cmd_send_sync+0xcc>
   11c0c:	fb03 8000 	mla	r0, r3, r0, r8
   11c10:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   11c12:	4620      	mov	r0, r4
   11c14:	f007 fbf4 	bl	19400 <net_buf_ref>
   11c18:	4601      	mov	r1, r0
   11c1a:	4824      	ldr	r0, [pc, #144]	; (11cac <bt_hci_cmd_send_sync+0xd0>)
   11c1c:	f007 fb86 	bl	1932c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   11c20:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   11c24:	4630      	mov	r0, r6
   11c26:	2300      	movs	r3, #0
   11c28:	f00e f948 	bl	1febc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   11c2c:	4606      	mov	r6, r0
   11c2e:	b180      	cbz	r0, 11c52 <bt_hci_cmd_send_sync+0x76>
   11c30:	f240 1349 	movw	r3, #329	; 0x149
   11c34:	4a1e      	ldr	r2, [pc, #120]	; (11cb0 <bt_hci_cmd_send_sync+0xd4>)
   11c36:	491f      	ldr	r1, [pc, #124]	; (11cb4 <bt_hci_cmd_send_sync+0xd8>)
   11c38:	481f      	ldr	r0, [pc, #124]	; (11cb8 <bt_hci_cmd_send_sync+0xdc>)
   11c3a:	f013 f870 	bl	24d1e <assert_print>
   11c3e:	4631      	mov	r1, r6
   11c40:	481e      	ldr	r0, [pc, #120]	; (11cbc <bt_hci_cmd_send_sync+0xe0>)
   11c42:	f013 f86c 	bl	24d1e <assert_print>
   11c46:	4040      	eors	r0, r0
   11c48:	f380 8811 	msr	BASEPRI, r0
   11c4c:	f04f 0003 	mov.w	r0, #3
   11c50:	df02      	svc	2
	status = cmd(buf)->status;
   11c52:	4620      	mov	r0, r4
   11c54:	f007 f95e 	bl	18f14 <net_buf_id>
   11c58:	230c      	movs	r3, #12
   11c5a:	4358      	muls	r0, r3
   11c5c:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   11c60:	b1be      	cbz	r6, 11c92 <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   11c62:	4b17      	ldr	r3, [pc, #92]	; (11cc0 <bt_hci_cmd_send_sync+0xe4>)
   11c64:	2202      	movs	r2, #2
   11c66:	9302      	str	r3, [sp, #8]
   11c68:	2300      	movs	r3, #0
   11c6a:	4916      	ldr	r1, [pc, #88]	; (11cc4 <bt_hci_cmd_send_sync+0xe8>)
   11c6c:	4618      	mov	r0, r3
   11c6e:	e9cd 3300 	strd	r3, r3, [sp]
   11c72:	e9cd 7603 	strd	r7, r6, [sp, #12]
   11c76:	f014 f9d0 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   11c7a:	4620      	mov	r0, r4
   11c7c:	f007 fb7c 	bl	19378 <net_buf_unref>
			return -ECONNREFUSED;
   11c80:	2e09      	cmp	r6, #9
   11c82:	bf14      	ite	ne
   11c84:	f06f 0004 	mvnne.w	r0, #4
   11c88:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   11c8c:	b00c      	add	sp, #48	; 0x30
   11c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   11c92:	b115      	cbz	r5, 11c9a <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   11c94:	602c      	str	r4, [r5, #0]
	return 0;
   11c96:	2000      	movs	r0, #0
   11c98:	e7f8      	b.n	11c8c <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   11c9a:	4620      	mov	r0, r4
   11c9c:	f007 fb6c 	bl	19378 <net_buf_unref>
   11ca0:	e7f9      	b.n	11c96 <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   11ca2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11ca6:	e7f1      	b.n	11c8c <bt_hci_cmd_send_sync+0xb0>
   11ca8:	20020fd8 	.word	0x20020fd8
   11cac:	20008144 	.word	0x20008144
   11cb0:	0002d847 	.word	0x0002d847
   11cb4:	0002c6af 	.word	0x0002c6af
   11cb8:	0002b6e9 	.word	0x0002b6e9
   11cbc:	0002d9b7 	.word	0x0002d9b7
   11cc0:	0002d9d7 	.word	0x0002d9d7
   11cc4:	0002a740 	.word	0x0002a740

00011cc8 <hci_le_read_max_data_len>:
{
   11cc8:	b570      	push	{r4, r5, r6, lr}
   11cca:	b086      	sub	sp, #24
   11ccc:	4606      	mov	r6, r0
   11cce:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   11cd0:	f242 002f 	movw	r0, #8239	; 0x202f
   11cd4:	2100      	movs	r1, #0
   11cd6:	aa05      	add	r2, sp, #20
   11cd8:	f7ff ff80 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   11cdc:	4604      	mov	r4, r0
   11cde:	b160      	cbz	r0, 11cfa <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   11ce0:	4b0b      	ldr	r3, [pc, #44]	; (11d10 <hci_le_read_max_data_len+0x48>)
   11ce2:	2201      	movs	r2, #1
   11ce4:	9302      	str	r3, [sp, #8]
   11ce6:	2300      	movs	r3, #0
   11ce8:	490a      	ldr	r1, [pc, #40]	; (11d14 <hci_le_read_max_data_len+0x4c>)
   11cea:	4618      	mov	r0, r3
   11cec:	e9cd 3300 	strd	r3, r3, [sp]
   11cf0:	f014 f993 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   11cf4:	4620      	mov	r0, r4
   11cf6:	b006      	add	sp, #24
   11cf8:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   11cfa:	9805      	ldr	r0, [sp, #20]
   11cfc:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   11cfe:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11d02:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   11d04:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   11d08:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   11d0a:	f007 fb35 	bl	19378 <net_buf_unref>
	return 0;
   11d0e:	e7f1      	b.n	11cf4 <hci_le_read_max_data_len+0x2c>
   11d10:	0002d9f3 	.word	0x0002d9f3
   11d14:	0002a740 	.word	0x0002a740

00011d18 <bt_hci_le_rand>:
{
   11d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11d1a:	4b14      	ldr	r3, [pc, #80]	; (11d6c <bt_hci_le_rand+0x54>)
{
   11d1c:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11d1e:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   11d22:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11d24:	2b00      	cmp	r3, #0
   11d26:	da1d      	bge.n	11d64 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   11d28:	b914      	cbnz	r4, 11d30 <bt_hci_le_rand+0x18>
	return 0;
   11d2a:	4620      	mov	r0, r4
}
   11d2c:	b003      	add	sp, #12
   11d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   11d30:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11d32:	f04f 0100 	mov.w	r1, #0
   11d36:	f242 0018 	movw	r0, #8216	; 0x2018
   11d3a:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   11d3c:	4626      	mov	r6, r4
   11d3e:	bf28      	it	cs
   11d40:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11d42:	f7ff ff4b 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
   11d46:	2800      	cmp	r0, #0
   11d48:	d1f0      	bne.n	11d2c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   11d4a:	9f01      	ldr	r7, [sp, #4]
   11d4c:	4632      	mov	r2, r6
   11d4e:	68f9      	ldr	r1, [r7, #12]
   11d50:	4628      	mov	r0, r5
   11d52:	3101      	adds	r1, #1
   11d54:	f017 fd49 	bl	297ea <memcpy>
		net_buf_unref(rsp);
   11d58:	4638      	mov	r0, r7
   11d5a:	f007 fb0d 	bl	19378 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   11d5e:	4435      	add	r5, r6
		len -= count;
   11d60:	1ba4      	subs	r4, r4, r6
   11d62:	e7e1      	b.n	11d28 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   11d64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11d68:	e7e0      	b.n	11d2c <bt_hci_le_rand+0x14>
   11d6a:	bf00      	nop
   11d6c:	20008000 	.word	0x20008000

00011d70 <bt_hci_le_enh_conn_complete>:
{
   11d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11d74:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   11d78:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   11d7a:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   11d7e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   11d82:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   11d84:	4a9f      	ldr	r2, [pc, #636]	; (12004 <bt_hci_le_enh_conn_complete+0x294>)
   11d86:	b29b      	uxth	r3, r3
   11d88:	8811      	ldrh	r1, [r2, #0]
{
   11d8a:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   11d8c:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   11d8e:	bf04      	itt	eq
   11d90:	8017      	strheq	r7, [r2, #0]
			return true;
   11d92:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   11d94:	f000 fe96 	bl	12ac4 <bt_id_pending_keys_update>
	if (evt->status) {
   11d98:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11d9a:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   11d9e:	b37e      	cbz	r6, 11e00 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11da0:	2e3c      	cmp	r6, #60	; 0x3c
   11da2:	d121      	bne.n	11de8 <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11da4:	f001 fada 	bl	1335c <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11da8:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11dac:	3010      	adds	r0, #16
   11dae:	f014 f943 	bl	26038 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11db2:	2000      	movs	r0, #0
   11db4:	f7ff fb02 	bl	113bc <find_pending_connect.part.0>
		if (!conn) {
   11db8:	4604      	mov	r4, r0
   11dba:	b958      	cbnz	r0, 11dd4 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   11dbc:	4b92      	ldr	r3, [pc, #584]	; (12008 <bt_hci_le_enh_conn_complete+0x298>)
   11dbe:	2201      	movs	r2, #1
   11dc0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11dc4:	4991      	ldr	r1, [pc, #580]	; (1200c <bt_hci_le_enh_conn_complete+0x29c>)
   11dc6:	4603      	mov	r3, r0
   11dc8:	9000      	str	r0, [sp, #0]
   11dca:	f014 f926 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   11dce:	b00a      	add	sp, #40	; 0x28
   11dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   11dd4:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11dd6:	2100      	movs	r1, #0
   11dd8:	f002 f9ec 	bl	141b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   11ddc:	4620      	mov	r0, r4
}
   11dde:	b00a      	add	sp, #40	; 0x28
   11de0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   11de4:	f002 b9ae 	b.w	14144 <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   11de8:	4b89      	ldr	r3, [pc, #548]	; (12010 <bt_hci_le_enh_conn_complete+0x2a0>)
   11dea:	2202      	movs	r2, #2
   11dec:	9302      	str	r3, [sp, #8]
   11dee:	2300      	movs	r3, #0
   11df0:	4986      	ldr	r1, [pc, #536]	; (1200c <bt_hci_le_enh_conn_complete+0x29c>)
   11df2:	4618      	mov	r0, r3
   11df4:	e9cd 3300 	strd	r3, r3, [sp]
   11df8:	9603      	str	r6, [sp, #12]
   11dfa:	f014 f90e 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		return;
   11dfe:	e7e6      	b.n	11dce <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   11e00:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   11e02:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   11e06:	3b02      	subs	r3, #2
   11e08:	2b01      	cmp	r3, #1
   11e0a:	d827      	bhi.n	11e5c <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   11e0c:	4651      	mov	r1, sl
   11e0e:	a808      	add	r0, sp, #32
   11e10:	f014 f8fc 	bl	2600c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11e14:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11e18:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11e1c:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11e1e:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11e22:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11e26:	f014 f8ec 	bl	26002 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   11e2a:	2301      	movs	r3, #1
   11e2c:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11e30:	78eb      	ldrb	r3, [r5, #3]
   11e32:	2b01      	cmp	r3, #1
   11e34:	d025      	beq.n	11e82 <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   11e36:	4650      	mov	r0, sl
   11e38:	f7ff f98c 	bl	11154 <bt_addr_le_str>
   11e3c:	4b75      	ldr	r3, [pc, #468]	; (12014 <bt_hci_le_enh_conn_complete+0x2a4>)
   11e3e:	9003      	str	r0, [sp, #12]
   11e40:	9302      	str	r3, [sp, #8]
   11e42:	2300      	movs	r3, #0
   11e44:	2201      	movs	r2, #1
   11e46:	4618      	mov	r0, r3
   11e48:	e9cd 3300 	strd	r3, r3, [sp]
   11e4c:	496f      	ldr	r1, [pc, #444]	; (1200c <bt_hci_le_enh_conn_complete+0x29c>)
   11e4e:	f014 f8e4 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   11e52:	211f      	movs	r1, #31
   11e54:	4648      	mov	r0, r9
   11e56:	f014 f907 	bl	26068 <bt_hci_disconnect>
		return;
   11e5a:	e7b8      	b.n	11dce <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11e5c:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   11e5e:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11e60:	2b01      	cmp	r3, #1
   11e62:	bf04      	itt	eq
   11e64:	4b6c      	ldreq	r3, [pc, #432]	; (12018 <bt_hci_le_enh_conn_complete+0x2a8>)
   11e66:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   11e6a:	4630      	mov	r0, r6
   11e6c:	f014 fa29 	bl	262c2 <bt_lookup_id_addr>
   11e70:	4601      	mov	r1, r0
   11e72:	a808      	add	r0, sp, #32
   11e74:	f014 f8ca 	bl	2600c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   11e78:	4651      	mov	r1, sl
   11e7a:	a806      	add	r0, sp, #24
   11e7c:	f014 f8c6 	bl	2600c <bt_addr_le_copy>
   11e80:	e7d6      	b.n	11e30 <bt_hci_le_enh_conn_complete+0xc0>
   11e82:	a808      	add	r0, sp, #32
   11e84:	f7ff fa9a 	bl	113bc <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11e88:	78eb      	ldrb	r3, [r5, #3]
   11e8a:	4604      	mov	r4, r0
   11e8c:	2b01      	cmp	r3, #1
   11e8e:	d10a      	bne.n	11ea6 <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11e90:	f001 fa64 	bl	1335c <bt_le_adv_lookup_legacy>
   11e94:	4606      	mov	r6, r0
   11e96:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11e9a:	3010      	adds	r0, #16
   11e9c:	f014 f8cc 	bl	26038 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   11ea0:	4630      	mov	r0, r6
   11ea2:	f014 fb3c 	bl	2651e <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   11ea6:	2c00      	cmp	r4, #0
   11ea8:	d0c5      	beq.n	11e36 <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   11eaa:	4620      	mov	r0, r4
	conn->err = 0U;
   11eac:	2200      	movs	r2, #0
	conn->handle = handle;
   11eae:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   11eb2:	a908      	add	r1, sp, #32
   11eb4:	f014 f8aa 	bl	2600c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   11eb8:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   11ebc:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   11ec0:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   11ec4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11ec8:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   11ecc:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   11ed0:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   11ed2:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11ed4:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   11ed6:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11ed8:	d115      	bne.n	11f06 <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   11eda:	a906      	add	r1, sp, #24
   11edc:	f104 0097 	add.w	r0, r4, #151	; 0x97
   11ee0:	f014 f894 	bl	2600c <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11ee4:	f001 fa3a 	bl	1335c <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   11ee8:	7a21      	ldrb	r1, [r4, #8]
   11eea:	4a4b      	ldr	r2, [pc, #300]	; (12018 <bt_hci_le_enh_conn_complete+0x2a8>)
   11eec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   11ef0:	4411      	add	r1, r2
   11ef2:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   11ef6:	f014 f889 	bl	2600c <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   11efa:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   11efe:	065d      	lsls	r5, r3, #25
   11f00:	d501      	bpl.n	11f06 <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   11f02:	f001 fbef 	bl	136e4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   11f06:	2107      	movs	r1, #7
   11f08:	4620      	mov	r0, r4
   11f0a:	f002 f953 	bl	141b4 <bt_conn_set_state>
	if (is_disconnected) {
   11f0e:	b11f      	cbz	r7, 11f18 <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11f10:	2101      	movs	r1, #1
   11f12:	4620      	mov	r0, r4
   11f14:	f002 f94e 	bl	141b4 <bt_conn_set_state>
	bt_conn_connected(conn);
   11f18:	4620      	mov	r0, r4
   11f1a:	f014 fbb1 	bl	26680 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   11f1e:	7b63      	ldrb	r3, [r4, #13]
   11f20:	2b07      	cmp	r3, #7
   11f22:	d167      	bne.n	11ff4 <bt_hci_le_enh_conn_complete+0x284>
   11f24:	1d23      	adds	r3, r4, #4
   11f26:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   11f2a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   11f2e:	4e3a      	ldr	r6, [pc, #232]	; (12018 <bt_hci_le_enh_conn_complete+0x2a8>)
   11f30:	d125      	bne.n	11f7e <bt_hci_le_enh_conn_complete+0x20e>
   11f32:	78e3      	ldrb	r3, [r4, #3]
   11f34:	b11b      	cbz	r3, 11f3e <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   11f36:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   11f3a:	0718      	lsls	r0, r3, #28
   11f3c:	d51f      	bpl.n	11f7e <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   11f3e:	2102      	movs	r1, #2
   11f40:	f242 0016 	movw	r0, #8214	; 0x2016
   11f44:	f7ff fdfc 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   11f48:	4605      	mov	r5, r0
   11f4a:	2800      	cmp	r0, #0
   11f4c:	d056      	beq.n	11ffc <bt_hci_le_enh_conn_complete+0x28c>
   11f4e:	2102      	movs	r1, #2
   11f50:	300c      	adds	r0, #12
   11f52:	f007 fb33 	bl	195bc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   11f56:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   11f58:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   11f5a:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   11f5c:	4629      	mov	r1, r5
   11f5e:	f242 0016 	movw	r0, #8214	; 0x2016
   11f62:	f7ff fe3b 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
   11f66:	b150      	cbz	r0, 11f7e <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   11f68:	4b2c      	ldr	r3, [pc, #176]	; (1201c <bt_hci_le_enh_conn_complete+0x2ac>)
   11f6a:	9003      	str	r0, [sp, #12]
   11f6c:	9302      	str	r3, [sp, #8]
   11f6e:	2300      	movs	r3, #0
   11f70:	2201      	movs	r2, #1
   11f72:	4618      	mov	r0, r3
   11f74:	e9cd 3300 	strd	r3, r3, [sp]
   11f78:	4924      	ldr	r1, [pc, #144]	; (1200c <bt_hci_le_enh_conn_complete+0x29c>)
   11f7a:	f014 f84e 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   11f7e:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   11f82:	07d9      	lsls	r1, r3, #31
   11f84:	d513      	bpl.n	11fae <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   11f86:	2500      	movs	r5, #0
   11f88:	2302      	movs	r3, #2
   11f8a:	4629      	mov	r1, r5
   11f8c:	461a      	mov	r2, r3
   11f8e:	4620      	mov	r0, r4
   11f90:	9500      	str	r5, [sp, #0]
   11f92:	f014 f8a2 	bl	260da <bt_le_set_phy>
		if (err) {
   11f96:	b150      	cbz	r0, 11fae <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   11f98:	4b21      	ldr	r3, [pc, #132]	; (12020 <bt_hci_le_enh_conn_complete+0x2b0>)
   11f9a:	9003      	str	r0, [sp, #12]
   11f9c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   11fa0:	2201      	movs	r2, #1
   11fa2:	462b      	mov	r3, r5
   11fa4:	4628      	mov	r0, r5
   11fa6:	4919      	ldr	r1, [pc, #100]	; (1200c <bt_hci_le_enh_conn_complete+0x29c>)
   11fa8:	9500      	str	r5, [sp, #0]
   11faa:	f014 f836 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   11fae:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   11fb2:	069a      	lsls	r2, r3, #26
   11fb4:	d51e      	bpl.n	11ff4 <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   11fb6:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   11fba:	689b      	ldr	r3, [r3, #8]
   11fbc:	079b      	lsls	r3, r3, #30
   11fbe:	d519      	bpl.n	11ff4 <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11fc0:	f10d 0116 	add.w	r1, sp, #22
   11fc4:	a805      	add	r0, sp, #20
   11fc6:	f7ff fe7f 	bl	11cc8 <hci_le_read_max_data_len>
			if (!err) {
   11fca:	4605      	mov	r5, r0
   11fcc:	b990      	cbnz	r0, 11ff4 <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   11fce:	4620      	mov	r0, r4
   11fd0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   11fd4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   11fd8:	f014 f861 	bl	2609e <bt_le_set_data_len>
				if (err) {
   11fdc:	b150      	cbz	r0, 11ff4 <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   11fde:	4b11      	ldr	r3, [pc, #68]	; (12024 <bt_hci_le_enh_conn_complete+0x2b4>)
   11fe0:	9003      	str	r0, [sp, #12]
   11fe2:	e9cd 5301 	strd	r5, r3, [sp, #4]
   11fe6:	2201      	movs	r2, #1
   11fe8:	462b      	mov	r3, r5
   11fea:	4628      	mov	r0, r5
   11fec:	4907      	ldr	r1, [pc, #28]	; (1200c <bt_hci_le_enh_conn_complete+0x29c>)
   11fee:	9500      	str	r5, [sp, #0]
   11ff0:	f014 f813 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   11ff4:	4620      	mov	r0, r4
   11ff6:	f002 f8a5 	bl	14144 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11ffa:	e6e8      	b.n	11dce <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   11ffc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12000:	e7b2      	b.n	11f68 <bt_hci_le_enh_conn_complete+0x1f8>
   12002:	bf00      	nop
   12004:	2002158e 	.word	0x2002158e
   12008:	0002da13 	.word	0x0002da13
   1200c:	0002a740 	.word	0x0002a740
   12010:	0002da34 	.word	0x0002da34
   12014:	0002da4d 	.word	0x0002da4d
   12018:	20008000 	.word	0x20008000
   1201c:	0002da69 	.word	0x0002da69
   12020:	0002da8a 	.word	0x0002da8a
   12024:	0002daa1 	.word	0x0002daa1

00012028 <le_legacy_conn_complete>:
{
   12028:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1202a:	68c1      	ldr	r1, [r0, #12]
{
   1202c:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   1202e:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12030:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   12032:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   12036:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1203a:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1203c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   12040:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12044:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   12048:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1204c:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   12050:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12054:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   12058:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1205c:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   12060:	7b4b      	ldrb	r3, [r1, #13]
   12062:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12066:	f013 ffd1 	bl	2600c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1206a:	4907      	ldr	r1, [pc, #28]	; (12088 <le_legacy_conn_complete+0x60>)
   1206c:	f10d 000b 	add.w	r0, sp, #11
   12070:	f013 ffc7 	bl	26002 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12074:	f10d 0011 	add.w	r0, sp, #17
   12078:	f013 ffc3 	bl	26002 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1207c:	4668      	mov	r0, sp
   1207e:	f7ff fe77 	bl	11d70 <bt_hci_le_enh_conn_complete>
}
   12082:	b009      	add	sp, #36	; 0x24
   12084:	f85d fb04 	ldr.w	pc, [sp], #4
   12088:	0002d686 	.word	0x0002d686

0001208c <bt_security_err_get>:
	switch (hci_err) {
   1208c:	2829      	cmp	r0, #41	; 0x29
   1208e:	bf9a      	itte	ls
   12090:	4b01      	ldrls	r3, [pc, #4]	; (12098 <bt_security_err_get+0xc>)
   12092:	5c18      	ldrbls	r0, [r3, r0]
{
   12094:	2009      	movhi	r0, #9
}
   12096:	4770      	bx	lr
   12098:	0002dd43 	.word	0x0002dd43

0001209c <hci_encrypt_key_refresh_complete>:
{
   1209c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1209e:	68c3      	ldr	r3, [r0, #12]
{
   120a0:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   120a2:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   120a6:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   120a8:	4630      	mov	r0, r6
   120aa:	f002 f87b 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   120ae:	4604      	mov	r4, r0
   120b0:	b958      	cbnz	r0, 120ca <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   120b2:	4b1e      	ldr	r3, [pc, #120]	; (1212c <hci_encrypt_key_refresh_complete+0x90>)
   120b4:	2201      	movs	r2, #1
   120b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
   120ba:	491d      	ldr	r1, [pc, #116]	; (12130 <hci_encrypt_key_refresh_complete+0x94>)
   120bc:	4603      	mov	r3, r0
   120be:	9603      	str	r6, [sp, #12]
   120c0:	9000      	str	r0, [sp, #0]
   120c2:	f013 ffaa 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   120c6:	b005      	add	sp, #20
   120c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   120ca:	b16d      	cbz	r5, 120e8 <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   120cc:	4628      	mov	r0, r5
   120ce:	f7ff ffdd 	bl	1208c <bt_security_err_get>
   120d2:	4629      	mov	r1, r5
   120d4:	4602      	mov	r2, r0
   120d6:	4620      	mov	r0, r4
   120d8:	f002 faa4 	bl	14624 <bt_conn_security_changed>
	bt_conn_unref(conn);
   120dc:	4620      	mov	r0, r4
}
   120de:	b005      	add	sp, #20
   120e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   120e4:	f002 b82e 	b.w	14144 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   120e8:	7887      	ldrb	r7, [r0, #2]
   120ea:	2f01      	cmp	r7, #1
   120ec:	d1ee      	bne.n	120cc <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   120ee:	f006 fc2b 	bl	18948 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   120f2:	4620      	mov	r0, r4
   120f4:	f013 ff61 	bl	25fba <update_sec_level>
   120f8:	4606      	mov	r6, r0
   120fa:	2800      	cmp	r0, #0
   120fc:	d1e6      	bne.n	120cc <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   120fe:	2005      	movs	r0, #5
   12100:	f7ff ffc4 	bl	1208c <bt_security_err_get>
   12104:	2105      	movs	r1, #5
   12106:	4602      	mov	r2, r0
   12108:	4620      	mov	r0, r4
   1210a:	f002 fa8b 	bl	14624 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1210e:	4b09      	ldr	r3, [pc, #36]	; (12134 <hci_encrypt_key_refresh_complete+0x98>)
   12110:	4630      	mov	r0, r6
   12112:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12116:	463a      	mov	r2, r7
   12118:	4633      	mov	r3, r6
   1211a:	4905      	ldr	r1, [pc, #20]	; (12130 <hci_encrypt_key_refresh_complete+0x94>)
   1211c:	9600      	str	r6, [sp, #0]
   1211e:	f013 ff7c 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12122:	2105      	movs	r1, #5
   12124:	4620      	mov	r0, r4
   12126:	f014 fab4 	bl	26692 <bt_conn_disconnect>
   1212a:	e7d7      	b.n	120dc <hci_encrypt_key_refresh_complete+0x40>
   1212c:	0002d7dd 	.word	0x0002d7dd
   12130:	0002a740 	.word	0x0002a740
   12134:	0002dabd 	.word	0x0002dabd

00012138 <hci_encrypt_change>:
{
   12138:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1213a:	68c6      	ldr	r6, [r0, #12]
{
   1213c:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1213e:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   12142:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   12144:	4638      	mov	r0, r7
   12146:	f002 f82d 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   1214a:	4604      	mov	r4, r0
   1214c:	b958      	cbnz	r0, 12166 <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1214e:	4b23      	ldr	r3, [pc, #140]	; (121dc <hci_encrypt_change+0xa4>)
   12150:	2201      	movs	r2, #1
   12152:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12156:	4922      	ldr	r1, [pc, #136]	; (121e0 <hci_encrypt_change+0xa8>)
   12158:	4603      	mov	r3, r0
   1215a:	9703      	str	r7, [sp, #12]
   1215c:	9000      	str	r0, [sp, #0]
   1215e:	f013 ff5c 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   12162:	b005      	add	sp, #20
   12164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12166:	b16d      	cbz	r5, 12184 <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   12168:	4628      	mov	r0, r5
   1216a:	f7ff ff8f 	bl	1208c <bt_security_err_get>
   1216e:	4629      	mov	r1, r5
   12170:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12172:	4620      	mov	r0, r4
   12174:	f002 fa56 	bl	14624 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12178:	4620      	mov	r0, r4
}
   1217a:	b005      	add	sp, #20
   1217c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   12180:	f001 bfe0 	b.w	14144 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   12184:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   12186:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   12188:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   1218a:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1218c:	d005      	beq.n	1219a <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1218e:	2000      	movs	r0, #0
   12190:	f7ff ff7c 	bl	1208c <bt_security_err_get>
   12194:	2100      	movs	r1, #0
   12196:	4602      	mov	r2, r0
   12198:	e7eb      	b.n	12172 <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   1219a:	b10b      	cbz	r3, 121a0 <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   1219c:	f006 fbd4 	bl	18948 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   121a0:	4620      	mov	r0, r4
   121a2:	f013 ff0a 	bl	25fba <update_sec_level>
   121a6:	4605      	mov	r5, r0
   121a8:	2800      	cmp	r0, #0
   121aa:	d1f0      	bne.n	1218e <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   121ac:	2005      	movs	r0, #5
   121ae:	f7ff ff6d 	bl	1208c <bt_security_err_get>
   121b2:	2105      	movs	r1, #5
   121b4:	4602      	mov	r2, r0
   121b6:	4620      	mov	r0, r4
   121b8:	f002 fa34 	bl	14624 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   121bc:	4b09      	ldr	r3, [pc, #36]	; (121e4 <hci_encrypt_change+0xac>)
   121be:	4628      	mov	r0, r5
   121c0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   121c4:	2201      	movs	r2, #1
   121c6:	462b      	mov	r3, r5
   121c8:	4905      	ldr	r1, [pc, #20]	; (121e0 <hci_encrypt_change+0xa8>)
   121ca:	9500      	str	r5, [sp, #0]
   121cc:	f013 ff25 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   121d0:	2105      	movs	r1, #5
   121d2:	4620      	mov	r0, r4
   121d4:	f014 fa5d 	bl	26692 <bt_conn_disconnect>
   121d8:	e7ce      	b.n	12178 <hci_encrypt_change+0x40>
   121da:	bf00      	nop
   121dc:	0002d7dd 	.word	0x0002d7dd
   121e0:	0002a740 	.word	0x0002a740
   121e4:	0002dabd 	.word	0x0002dabd

000121e8 <bt_send>:
	return bt_dev.drv->send(buf);
   121e8:	4b02      	ldr	r3, [pc, #8]	; (121f4 <bt_send+0xc>)
   121ea:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   121ee:	695b      	ldr	r3, [r3, #20]
   121f0:	4718      	bx	r3
   121f2:	bf00      	nop
   121f4:	20008000 	.word	0x20008000

000121f8 <bt_hci_cmd_send>:
{
   121f8:	b530      	push	{r4, r5, lr}
   121fa:	4605      	mov	r5, r0
	if (!buf) {
   121fc:	460c      	mov	r4, r1
{
   121fe:	b085      	sub	sp, #20
	if (!buf) {
   12200:	b919      	cbnz	r1, 1220a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   12202:	f7ff fc9d 	bl	11b40 <bt_hci_cmd_create>
		if (!buf) {
   12206:	4604      	mov	r4, r0
   12208:	b1f8      	cbz	r0, 1224a <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1220a:	f640 4335 	movw	r3, #3125	; 0xc35
   1220e:	429d      	cmp	r5, r3
   12210:	d115      	bne.n	1223e <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   12212:	4620      	mov	r0, r4
   12214:	f7ff ffe8 	bl	121e8 <bt_send>
		if (err) {
   12218:	4605      	mov	r5, r0
   1221a:	b1a0      	cbz	r0, 12246 <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1221c:	4b0c      	ldr	r3, [pc, #48]	; (12250 <bt_hci_cmd_send+0x58>)
   1221e:	9003      	str	r0, [sp, #12]
   12220:	9302      	str	r3, [sp, #8]
   12222:	2300      	movs	r3, #0
   12224:	2201      	movs	r2, #1
   12226:	4618      	mov	r0, r3
   12228:	e9cd 3300 	strd	r3, r3, [sp]
   1222c:	4909      	ldr	r1, [pc, #36]	; (12254 <bt_hci_cmd_send+0x5c>)
   1222e:	f013 fef4 	bl	2601a <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   12232:	4620      	mov	r0, r4
   12234:	f007 f8a0 	bl	19378 <net_buf_unref>
}
   12238:	4628      	mov	r0, r5
   1223a:	b005      	add	sp, #20
   1223c:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1223e:	4621      	mov	r1, r4
   12240:	4805      	ldr	r0, [pc, #20]	; (12258 <bt_hci_cmd_send+0x60>)
   12242:	f007 f873 	bl	1932c <net_buf_put>
	return 0;
   12246:	2500      	movs	r5, #0
   12248:	e7f6      	b.n	12238 <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   1224a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1224e:	e7f3      	b.n	12238 <bt_hci_cmd_send+0x40>
   12250:	0002dae3 	.word	0x0002dae3
   12254:	0002a740 	.word	0x0002a740
   12258:	20008144 	.word	0x20008144

0001225c <bt_hci_host_num_completed_packets>:
{
   1225c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1225e:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   12260:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   12262:	7e46      	ldrb	r6, [r0, #25]
{
   12264:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12266:	7a80      	ldrb	r0, [r0, #10]
   12268:	f006 fe4c 	bl	18f04 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1226c:	4621      	mov	r1, r4
   1226e:	f017 f8fe 	bl	2946e <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   12272:	4b2a      	ldr	r3, [pc, #168]	; (1231c <bt_hci_host_num_completed_packets+0xc0>)
   12274:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   12278:	069b      	lsls	r3, r3, #26
   1227a:	d50e      	bpl.n	1229a <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   1227c:	4630      	mov	r0, r6
   1227e:	f002 fc2f 	bl	14ae0 <bt_conn_lookup_index>
	if (!conn) {
   12282:	4604      	mov	r4, r0
   12284:	b958      	cbnz	r0, 1229e <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   12286:	4b26      	ldr	r3, [pc, #152]	; (12320 <bt_hci_host_num_completed_packets+0xc4>)
   12288:	2202      	movs	r2, #2
   1228a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1228e:	4925      	ldr	r1, [pc, #148]	; (12324 <bt_hci_host_num_completed_packets+0xc8>)
   12290:	4603      	mov	r3, r0
   12292:	9603      	str	r6, [sp, #12]
   12294:	9000      	str	r0, [sp, #0]
   12296:	f013 fec0 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   1229a:	b005      	add	sp, #20
   1229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   1229e:	7b43      	ldrb	r3, [r0, #13]
   122a0:	3b07      	subs	r3, #7
   122a2:	2b01      	cmp	r3, #1
   122a4:	d90f      	bls.n	122c6 <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   122a6:	4b20      	ldr	r3, [pc, #128]	; (12328 <bt_hci_host_num_completed_packets+0xcc>)
   122a8:	2202      	movs	r2, #2
   122aa:	9302      	str	r3, [sp, #8]
   122ac:	2300      	movs	r3, #0
   122ae:	491d      	ldr	r1, [pc, #116]	; (12324 <bt_hci_host_num_completed_packets+0xc8>)
   122b0:	4618      	mov	r0, r3
   122b2:	e9cd 3300 	strd	r3, r3, [sp]
   122b6:	f013 feb0 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   122ba:	4620      	mov	r0, r4
}
   122bc:	b005      	add	sp, #20
   122be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   122c2:	f001 bf3f 	b.w	14144 <bt_conn_unref>
	bt_conn_unref(conn);
   122c6:	f001 ff3d 	bl	14144 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   122ca:	2105      	movs	r1, #5
   122cc:	f640 4035 	movw	r0, #3125	; 0xc35
   122d0:	f7ff fc36 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   122d4:	4604      	mov	r4, r0
   122d6:	b948      	cbnz	r0, 122ec <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   122d8:	4b14      	ldr	r3, [pc, #80]	; (1232c <bt_hci_host_num_completed_packets+0xd0>)
   122da:	2201      	movs	r2, #1
   122dc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   122e0:	4910      	ldr	r1, [pc, #64]	; (12324 <bt_hci_host_num_completed_packets+0xc8>)
   122e2:	4603      	mov	r3, r0
   122e4:	9000      	str	r0, [sp, #0]
   122e6:	f013 fe98 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		return;
   122ea:	e7d6      	b.n	1229a <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   122ec:	f100 070c 	add.w	r7, r0, #12
   122f0:	2101      	movs	r1, #1
   122f2:	4638      	mov	r0, r7
   122f4:	f007 f962 	bl	195bc <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   122f8:	2601      	movs	r6, #1
   122fa:	2104      	movs	r1, #4
   122fc:	7006      	strb	r6, [r0, #0]
   122fe:	4638      	mov	r0, r7
   12300:	f007 f95c 	bl	195bc <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   12304:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   12306:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   12308:	7086      	strb	r6, [r0, #2]
   1230a:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1230c:	4621      	mov	r1, r4
   1230e:	f640 4035 	movw	r0, #3125	; 0xc35
}
   12312:	b005      	add	sp, #20
   12314:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   12318:	f7ff bf6e 	b.w	121f8 <bt_hci_cmd_send>
   1231c:	20008000 	.word	0x20008000
   12320:	0002db05 	.word	0x0002db05
   12324:	0002a740 	.word	0x0002a740
   12328:	0002db2e 	.word	0x0002db2e
   1232c:	0002db5a 	.word	0x0002db5a

00012330 <le_ltk_request>:
{
   12330:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   12332:	68c6      	ldr	r6, [r0, #12]
{
   12334:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   12336:	8837      	ldrh	r7, [r6, #0]
   12338:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   1233a:	4628      	mov	r0, r5
   1233c:	f001 ff32 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   12340:	4604      	mov	r4, r0
   12342:	b958      	cbnz	r0, 1235c <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12344:	4b2a      	ldr	r3, [pc, #168]	; (123f0 <le_ltk_request+0xc0>)
   12346:	2201      	movs	r2, #1
   12348:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1234c:	4929      	ldr	r1, [pc, #164]	; (123f4 <le_ltk_request+0xc4>)
   1234e:	4603      	mov	r3, r0
   12350:	9503      	str	r5, [sp, #12]
   12352:	9000      	str	r0, [sp, #0]
   12354:	f013 fe61 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   12358:	b009      	add	sp, #36	; 0x24
   1235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1235c:	ad04      	add	r5, sp, #16
   1235e:	f8d6 2002 	ldr.w	r2, [r6, #2]
   12362:	f8d6 3006 	ldr.w	r3, [r6, #6]
   12366:	9501      	str	r5, [sp, #4]
   12368:	8971      	ldrh	r1, [r6, #10]
   1236a:	9100      	str	r1, [sp, #0]
   1236c:	f015 fafa 	bl	27964 <bt_smp_request_ltk>
   12370:	b360      	cbz	r0, 123cc <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   12372:	2112      	movs	r1, #18
   12374:	f242 001a 	movw	r0, #8218	; 0x201a
   12378:	f7ff fbe2 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   1237c:	4606      	mov	r6, r0
   1237e:	b968      	cbnz	r0, 1239c <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   12380:	4b1d      	ldr	r3, [pc, #116]	; (123f8 <le_ltk_request+0xc8>)
   12382:	2201      	movs	r2, #1
   12384:	9302      	str	r3, [sp, #8]
   12386:	2300      	movs	r3, #0
   12388:	491a      	ldr	r1, [pc, #104]	; (123f4 <le_ltk_request+0xc4>)
   1238a:	4618      	mov	r0, r3
   1238c:	e9cd 3300 	strd	r3, r3, [sp]
   12390:	f013 fe43 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   12394:	4620      	mov	r0, r4
   12396:	f001 fed5 	bl	14144 <bt_conn_unref>
   1239a:	e7dd      	b.n	12358 <le_ltk_request+0x28>
   1239c:	2112      	movs	r1, #18
   1239e:	300c      	adds	r0, #12
   123a0:	f007 f90c 	bl	195bc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   123a4:	4602      	mov	r2, r0
   123a6:	462b      	mov	r3, r5
   123a8:	f822 7b02 	strh.w	r7, [r2], #2
   123ac:	af08      	add	r7, sp, #32
   123ae:	461d      	mov	r5, r3
   123b0:	cd03      	ldmia	r5!, {r0, r1}
   123b2:	42bd      	cmp	r5, r7
   123b4:	6010      	str	r0, [r2, #0]
   123b6:	6051      	str	r1, [r2, #4]
   123b8:	462b      	mov	r3, r5
   123ba:	f102 0208 	add.w	r2, r2, #8
   123be:	d1f6      	bne.n	123ae <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   123c0:	4631      	mov	r1, r6
   123c2:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   123c6:	f7ff ff17 	bl	121f8 <bt_hci_cmd_send>
   123ca:	e7e3      	b.n	12394 <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   123cc:	2102      	movs	r1, #2
   123ce:	f242 001b 	movw	r0, #8219	; 0x201b
   123d2:	f7ff fbb5 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   123d6:	4605      	mov	r5, r0
   123d8:	2800      	cmp	r0, #0
   123da:	d0d1      	beq.n	12380 <le_ltk_request+0x50>
   123dc:	2102      	movs	r1, #2
   123de:	300c      	adds	r0, #12
   123e0:	f007 f8ec 	bl	195bc <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   123e4:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   123e6:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   123e8:	f242 001b 	movw	r0, #8219	; 0x201b
   123ec:	e7eb      	b.n	123c6 <le_ltk_request+0x96>
   123ee:	bf00      	nop
   123f0:	0002d7b9 	.word	0x0002d7b9
   123f4:	0002a740 	.word	0x0002a740
   123f8:	0002db7d 	.word	0x0002db7d

000123fc <le_conn_param_neg_reply>:
{
   123fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   123fe:	4606      	mov	r6, r0
   12400:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   12402:	f242 0021 	movw	r0, #8225	; 0x2021
   12406:	2103      	movs	r1, #3
   12408:	f7ff fb9a 	bl	11b40 <bt_hci_cmd_create>
   1240c:	4604      	mov	r4, r0
	if (!buf) {
   1240e:	b950      	cbnz	r0, 12426 <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   12410:	4b0c      	ldr	r3, [pc, #48]	; (12444 <le_conn_param_neg_reply+0x48>)
   12412:	2201      	movs	r2, #1
   12414:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12418:	490b      	ldr	r1, [pc, #44]	; (12448 <le_conn_param_neg_reply+0x4c>)
   1241a:	4603      	mov	r3, r0
   1241c:	9000      	str	r0, [sp, #0]
   1241e:	f013 fdfc 	bl	2601a <z_log_msg_runtime_create.constprop.0>
}
   12422:	b004      	add	sp, #16
   12424:	bd70      	pop	{r4, r5, r6, pc}
   12426:	2103      	movs	r1, #3
   12428:	300c      	adds	r0, #12
   1242a:	f007 f8c7 	bl	195bc <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1242e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   12430:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   12432:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   12434:	f242 0021 	movw	r0, #8225	; 0x2021
}
   12438:	b004      	add	sp, #16
   1243a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1243e:	f7ff bedb 	b.w	121f8 <bt_hci_cmd_send>
   12442:	bf00      	nop
   12444:	0002db94 	.word	0x0002db94
   12448:	0002a740 	.word	0x0002a740

0001244c <le_conn_param_req>:
{
   1244c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1244e:	68c3      	ldr	r3, [r0, #12]
{
   12450:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12452:	78d9      	ldrb	r1, [r3, #3]
   12454:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   12456:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12458:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1245c:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12460:	7959      	ldrb	r1, [r3, #5]
   12462:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   12464:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12466:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1246a:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   1246e:	799a      	ldrb	r2, [r3, #6]
   12470:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   12472:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   12474:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12478:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1247c:	7a1a      	ldrb	r2, [r3, #8]
   1247e:	7a5b      	ldrb	r3, [r3, #9]
   12480:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   12484:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   12488:	f001 fe8c 	bl	141a4 <bt_conn_lookup_handle>
	if (!conn) {
   1248c:	4604      	mov	r4, r0
   1248e:	b978      	cbnz	r0, 124b0 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12490:	4b1e      	ldr	r3, [pc, #120]	; (1250c <le_conn_param_req+0xc0>)
   12492:	491f      	ldr	r1, [pc, #124]	; (12510 <le_conn_param_req+0xc4>)
   12494:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12498:	9000      	str	r0, [sp, #0]
   1249a:	4603      	mov	r3, r0
   1249c:	2201      	movs	r2, #1
   1249e:	9503      	str	r5, [sp, #12]
   124a0:	f013 fdbb 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   124a4:	2102      	movs	r1, #2
   124a6:	4628      	mov	r0, r5
   124a8:	f7ff ffa8 	bl	123fc <le_conn_param_neg_reply>
}
   124ac:	b006      	add	sp, #24
   124ae:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   124b0:	a904      	add	r1, sp, #16
   124b2:	f002 f81f 	bl	144f4 <le_param_req>
   124b6:	b938      	cbnz	r0, 124c8 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   124b8:	211e      	movs	r1, #30
   124ba:	4628      	mov	r0, r5
   124bc:	f7ff ff9e 	bl	123fc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   124c0:	4620      	mov	r0, r4
   124c2:	f001 fe3f 	bl	14144 <bt_conn_unref>
   124c6:	e7f1      	b.n	124ac <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   124c8:	210e      	movs	r1, #14
   124ca:	f242 0020 	movw	r0, #8224	; 0x2020
   124ce:	f7ff fb37 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   124d2:	4605      	mov	r5, r0
   124d4:	2800      	cmp	r0, #0
   124d6:	d0f3      	beq.n	124c0 <le_conn_param_req+0x74>
   124d8:	210e      	movs	r1, #14
   124da:	300c      	adds	r0, #12
   124dc:	f007 f86e 	bl	195bc <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   124e0:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   124e2:	8006      	strh	r6, [r0, #0]
   124e4:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   124e8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   124ec:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   124ee:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   124f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   124f4:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   124f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   124fa:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   124fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   12500:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   12502:	f242 0020 	movw	r0, #8224	; 0x2020
   12506:	f7ff fe77 	bl	121f8 <bt_hci_cmd_send>
   1250a:	e7d9      	b.n	124c0 <le_conn_param_req+0x74>
   1250c:	0002d7b9 	.word	0x0002d7b9
   12510:	0002a740 	.word	0x0002a740

00012514 <hci_tx_thread>:
{
   12514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   12518:	f8df 8148 	ldr.w	r8, [pc, #328]	; 12664 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   1251c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 12668 <hci_tx_thread+0x154>
{
   12520:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   12522:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   12526:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1252a:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   1252c:	f36f 3394 	bfc	r3, #14, #7
   12530:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12534:	f001 fda6 	bl	14084 <bt_conn_prepare_events>
   12538:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1253a:	f04f 32ff 	mov.w	r2, #4294967295
   1253e:	f04f 33ff 	mov.w	r3, #4294967295
   12542:	4629      	mov	r1, r5
   12544:	4847      	ldr	r0, [pc, #284]	; (12664 <hci_tx_thread+0x150>)
   12546:	f010 fae7 	bl	22b18 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1254a:	b160      	cbz	r0, 12566 <hci_tx_thread+0x52>
   1254c:	f640 13e6 	movw	r3, #2534	; 0x9e6
   12550:	464a      	mov	r2, r9
   12552:	4946      	ldr	r1, [pc, #280]	; (1266c <hci_tx_thread+0x158>)
   12554:	4846      	ldr	r0, [pc, #280]	; (12670 <hci_tx_thread+0x15c>)
   12556:	f012 fbe2 	bl	24d1e <assert_print>
   1255a:	4040      	eors	r0, r0
   1255c:	f380 8811 	msr	BASEPRI, r0
   12560:	f04f 0003 	mov.w	r0, #3
   12564:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   12566:	f04f 0a00 	mov.w	sl, #0
{
   1256a:	4e3e      	ldr	r6, [pc, #248]	; (12664 <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   1256c:	b915      	cbnz	r5, 12574 <hci_tx_thread+0x60>
	z_impl_k_yield();
   1256e:	f00f fa1b 	bl	219a8 <z_impl_k_yield>
	while (1) {
   12572:	e7d8      	b.n	12526 <hci_tx_thread+0x12>
		switch (ev->state) {
   12574:	68f3      	ldr	r3, [r6, #12]
   12576:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1257a:	2b01      	cmp	r3, #1
   1257c:	d95a      	bls.n	12634 <hci_tx_thread+0x120>
   1257e:	2b04      	cmp	r3, #4
   12580:	d162      	bne.n	12648 <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12582:	7b33      	ldrb	r3, [r6, #12]
   12584:	2b00      	cmp	r3, #0
   12586:	d158      	bne.n	1263a <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12588:	2200      	movs	r2, #0
   1258a:	2300      	movs	r3, #0
   1258c:	4839      	ldr	r0, [pc, #228]	; (12674 <hci_tx_thread+0x160>)
   1258e:	f015 fb97 	bl	27cc0 <net_buf_get>
	BT_ASSERT(buf);
   12592:	4604      	mov	r4, r0
   12594:	b960      	cbnz	r0, 125b0 <hci_tx_thread+0x9c>
   12596:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1259a:	464a      	mov	r2, r9
   1259c:	4936      	ldr	r1, [pc, #216]	; (12678 <hci_tx_thread+0x164>)
   1259e:	4834      	ldr	r0, [pc, #208]	; (12670 <hci_tx_thread+0x15c>)
   125a0:	f012 fbbd 	bl	24d1e <assert_print>
   125a4:	4040      	eors	r0, r0
   125a6:	f380 8811 	msr	BASEPRI, r0
   125aa:	f04f 0003 	mov.w	r0, #3
   125ae:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   125b0:	4f32      	ldr	r7, [pc, #200]	; (1267c <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   125b2:	f04f 33ff 	mov.w	r3, #4294967295
   125b6:	f04f 32ff 	mov.w	r2, #4294967295
   125ba:	4831      	ldr	r0, [pc, #196]	; (12680 <hci_tx_thread+0x16c>)
   125bc:	f00d fc7e 	bl	1febc <z_impl_k_sem_take>
   125c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   125c4:	b183      	cbz	r3, 125e8 <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   125c6:	4b2f      	ldr	r3, [pc, #188]	; (12684 <hci_tx_thread+0x170>)
   125c8:	2201      	movs	r2, #1
   125ca:	9302      	str	r3, [sp, #8]
   125cc:	2300      	movs	r3, #0
   125ce:	492e      	ldr	r1, [pc, #184]	; (12688 <hci_tx_thread+0x174>)
   125d0:	4618      	mov	r0, r3
   125d2:	e9cd 3300 	strd	r3, r3, [sp]
   125d6:	f013 fd20 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   125da:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   125de:	f006 fecb 	bl	19378 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   125e2:	2300      	movs	r3, #0
   125e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   125e8:	4620      	mov	r0, r4
   125ea:	f006 ff09 	bl	19400 <net_buf_ref>
   125ee:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   125f2:	4620      	mov	r0, r4
   125f4:	f7ff fdf8 	bl	121e8 <bt_send>
	if (err) {
   125f8:	b1e0      	cbz	r0, 12634 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   125fa:	4b24      	ldr	r3, [pc, #144]	; (1268c <hci_tx_thread+0x178>)
   125fc:	9003      	str	r0, [sp, #12]
   125fe:	9302      	str	r3, [sp, #8]
   12600:	2300      	movs	r3, #0
   12602:	2201      	movs	r2, #1
   12604:	4618      	mov	r0, r3
   12606:	e9cd 3300 	strd	r3, r3, [sp]
   1260a:	491f      	ldr	r1, [pc, #124]	; (12688 <hci_tx_thread+0x174>)
   1260c:	f013 fd05 	bl	2601a <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   12610:	481b      	ldr	r0, [pc, #108]	; (12680 <hci_tx_thread+0x16c>)
   12612:	f00d fc0f 	bl	1fe34 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12616:	4620      	mov	r0, r4
   12618:	f006 fc7c 	bl	18f14 <net_buf_id>
   1261c:	220c      	movs	r2, #12
   1261e:	4b1c      	ldr	r3, [pc, #112]	; (12690 <hci_tx_thread+0x17c>)
   12620:	211f      	movs	r1, #31
   12622:	fb02 3000 	mla	r0, r2, r0, r3
   12626:	4622      	mov	r2, r4
   12628:	8840      	ldrh	r0, [r0, #2]
   1262a:	f7ff f8d3 	bl	117d4 <hci_cmd_done>
		net_buf_unref(buf);
   1262e:	4620      	mov	r0, r4
   12630:	f006 fea2 	bl	19378 <net_buf_unref>
	for (; count; ev++, count--) {
   12634:	3614      	adds	r6, #20
   12636:	3d01      	subs	r5, #1
   12638:	e798      	b.n	1256c <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1263a:	2b01      	cmp	r3, #1
   1263c:	d1fa      	bne.n	12634 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   1263e:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   12640:	3838      	subs	r0, #56	; 0x38
   12642:	f002 f9b7 	bl	149b4 <bt_conn_process_tx>
   12646:	e7f5      	b.n	12634 <hci_tx_thread+0x120>
		switch (ev->state) {
   12648:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1264a:	4b12      	ldr	r3, [pc, #72]	; (12694 <hci_tx_thread+0x180>)
   1264c:	2202      	movs	r2, #2
   1264e:	e9cd a301 	strd	sl, r3, [sp, #4]
   12652:	2300      	movs	r3, #0
   12654:	490c      	ldr	r1, [pc, #48]	; (12688 <hci_tx_thread+0x174>)
   12656:	4618      	mov	r0, r3
   12658:	f8cd a000 	str.w	sl, [sp]
   1265c:	f013 fcdd 	bl	2601a <z_log_msg_runtime_create.constprop.0>
   12660:	e7e8      	b.n	12634 <hci_tx_thread+0x120>
   12662:	bf00      	nop
   12664:	2000846c 	.word	0x2000846c
   12668:	0002d847 	.word	0x0002d847
   1266c:	0002c6af 	.word	0x0002c6af
   12670:	0002b6e9 	.word	0x0002b6e9
   12674:	20008144 	.word	0x20008144
   12678:	0002f381 	.word	0x0002f381
   1267c:	20008000 	.word	0x20008000
   12680:	20008120 	.word	0x20008120
   12684:	0002dbae 	.word	0x0002dbae
   12688:	0002a740 	.word	0x0002a740
   1268c:	0002dae3 	.word	0x0002dae3
   12690:	20020fd8 	.word	0x20020fd8
   12694:	0002dbc9 	.word	0x0002dbc9

00012698 <hci_event_prio>:
{
   12698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1269c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1269e:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   126a2:	4630      	mov	r0, r6
   126a4:	f015 fb1d 	bl	27ce2 <net_buf_simple_headroom>
	state->len = buf->len;
   126a8:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   126ac:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   126ae:	f1b8 0f01 	cmp.w	r8, #1
   126b2:	d80c      	bhi.n	126ce <hci_event_prio+0x36>
   126b4:	f640 537b 	movw	r3, #3451	; 0xd7b
   126b8:	4a1b      	ldr	r2, [pc, #108]	; (12728 <hci_event_prio+0x90>)
   126ba:	491c      	ldr	r1, [pc, #112]	; (1272c <hci_event_prio+0x94>)
   126bc:	481c      	ldr	r0, [pc, #112]	; (12730 <hci_event_prio+0x98>)
   126be:	f012 fb2e 	bl	24d1e <assert_print>
   126c2:	4040      	eors	r0, r0
   126c4:	f380 8811 	msr	BASEPRI, r0
   126c8:	f04f 0003 	mov.w	r0, #3
   126cc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   126ce:	4630      	mov	r0, r6
   126d0:	2102      	movs	r1, #2
   126d2:	f006 ff55 	bl	19580 <net_buf_simple_pull_mem>
   126d6:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   126d8:	7800      	ldrb	r0, [r0, #0]
   126da:	f013 fc5c 	bl	25f96 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   126de:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   126e0:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   126e2:	d40c      	bmi.n	126fe <hci_event_prio+0x66>
   126e4:	f640 537f 	movw	r3, #3455	; 0xd7f
   126e8:	4a0f      	ldr	r2, [pc, #60]	; (12728 <hci_event_prio+0x90>)
   126ea:	4912      	ldr	r1, [pc, #72]	; (12734 <hci_event_prio+0x9c>)
   126ec:	4810      	ldr	r0, [pc, #64]	; (12730 <hci_event_prio+0x98>)
   126ee:	f012 fb16 	bl	24d1e <assert_print>
   126f2:	4040      	eors	r0, r0
   126f4:	f380 8811 	msr	BASEPRI, r0
   126f8:	f04f 0003 	mov.w	r0, #3
   126fc:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   126fe:	2305      	movs	r3, #5
   12700:	4621      	mov	r1, r4
   12702:	4a0d      	ldr	r2, [pc, #52]	; (12738 <hci_event_prio+0xa0>)
   12704:	7838      	ldrb	r0, [r7, #0]
   12706:	f7fe ff23 	bl	11550 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1270a:	07b3      	lsls	r3, r6, #30
   1270c:	d507      	bpl.n	1271e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1270e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   12710:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   12714:	fa13 f585 	uxtah	r5, r3, r5
   12718:	60e5      	str	r5, [r4, #12]
}
   1271a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1271e:	4620      	mov	r0, r4
}
   12720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12724:	f006 be28 	b.w	19378 <net_buf_unref>
   12728:	0002d847 	.word	0x0002d847
   1272c:	0002d87b 	.word	0x0002d87b
   12730:	0002b6e9 	.word	0x0002b6e9
   12734:	0002dbea 	.word	0x0002dbea
   12738:	0002afb4 	.word	0x0002afb4

0001273c <bt_recv>:
{
   1273c:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1273e:	7e03      	ldrb	r3, [r0, #24]
   12740:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   12742:	2b01      	cmp	r3, #1
{
   12744:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   12746:	d006      	beq.n	12756 <bt_recv+0x1a>
   12748:	2b03      	cmp	r3, #3
   1274a:	d112      	bne.n	12772 <bt_recv+0x36>
			rx_queue_put(buf);
   1274c:	f7fe fe62 	bl	11414 <rx_queue_put>
		return 0;
   12750:	2000      	movs	r0, #0
}
   12752:	b005      	add	sp, #20
   12754:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12756:	68c3      	ldr	r3, [r0, #12]
   12758:	7818      	ldrb	r0, [r3, #0]
   1275a:	f013 fc1c 	bl	25f96 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1275e:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12760:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12762:	d502      	bpl.n	1276a <bt_recv+0x2e>
			hci_event_prio(buf);
   12764:	4620      	mov	r0, r4
   12766:	f7ff ff97 	bl	12698 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1276a:	07ab      	lsls	r3, r5, #30
   1276c:	d5f0      	bpl.n	12750 <bt_recv+0x14>
			rx_queue_put(buf);
   1276e:	4620      	mov	r0, r4
   12770:	e7ec      	b.n	1274c <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   12772:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   12774:	4b07      	ldr	r3, [pc, #28]	; (12794 <bt_recv+0x58>)
   12776:	2201      	movs	r2, #1
   12778:	9302      	str	r3, [sp, #8]
   1277a:	2300      	movs	r3, #0
   1277c:	4906      	ldr	r1, [pc, #24]	; (12798 <bt_recv+0x5c>)
   1277e:	4618      	mov	r0, r3
   12780:	e9cd 3300 	strd	r3, r3, [sp]
   12784:	f013 fc49 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   12788:	4620      	mov	r0, r4
   1278a:	f006 fdf5 	bl	19378 <net_buf_unref>
		return -EINVAL;
   1278e:	f06f 0015 	mvn.w	r0, #21
   12792:	e7de      	b.n	12752 <bt_recv+0x16>
   12794:	0002dc03 	.word	0x0002dc03
   12798:	0002a740 	.word	0x0002a740

0001279c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1279c:	4a08      	ldr	r2, [pc, #32]	; (127c0 <bt_hci_driver_register+0x24>)
{
   1279e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   127a0:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   127a4:	b930      	cbnz	r0, 127b4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   127a6:	68d9      	ldr	r1, [r3, #12]
   127a8:	b139      	cbz	r1, 127ba <bt_hci_driver_register+0x1e>
   127aa:	6959      	ldr	r1, [r3, #20]
   127ac:	b129      	cbz	r1, 127ba <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   127ae:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   127b2:	4770      	bx	lr
		return -EALREADY;
   127b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   127b8:	4770      	bx	lr
		return -EINVAL;
   127ba:	f06f 0015 	mvn.w	r0, #21
}
   127be:	4770      	bx	lr
   127c0:	20008000 	.word	0x20008000

000127c4 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   127c4:	2104      	movs	r1, #4
   127c6:	4801      	ldr	r0, [pc, #4]	; (127cc <bt_finalize_init+0x8>)
   127c8:	f013 bc10 	b.w	25fec <atomic_or>
   127cc:	200080cc 	.word	0x200080cc

000127d0 <init_work>:
{
   127d0:	b510      	push	{r4, lr}
	err = bt_init();
   127d2:	f7f6 fe35 	bl	9440 <bt_init>
	if (ready_cb) {
   127d6:	4b03      	ldr	r3, [pc, #12]	; (127e4 <init_work+0x14>)
   127d8:	681b      	ldr	r3, [r3, #0]
   127da:	b113      	cbz	r3, 127e2 <init_work+0x12>
}
   127dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   127e0:	4718      	bx	r3
}
   127e2:	bd10      	pop	{r4, pc}
   127e4:	20021050 	.word	0x20021050

000127e8 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   127e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   127ea:	4e38      	ldr	r6, [pc, #224]	; (128cc <bt_enable+0xe4>)
{
   127ec:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   127ee:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
{
   127f2:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   127f4:	b96b      	cbnz	r3, 12812 <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   127f6:	4a36      	ldr	r2, [pc, #216]	; (128d0 <bt_enable+0xe8>)
   127f8:	4618      	mov	r0, r3
   127fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
   127fe:	4935      	ldr	r1, [pc, #212]	; (128d4 <bt_enable+0xec>)
   12800:	2201      	movs	r2, #1
   12802:	9300      	str	r3, [sp, #0]
   12804:	f013 fc09 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   12808:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1280c:	4628      	mov	r0, r5
   1280e:	b009      	add	sp, #36	; 0x24
   12810:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12812:	f06f 0102 	mvn.w	r1, #2
   12816:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   1281a:	f013 fc0d 	bl	26038 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1281e:	2101      	movs	r1, #1
   12820:	f013 fbe4 	bl	25fec <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12824:	ea10 0401 	ands.w	r4, r0, r1
   12828:	d14d      	bne.n	128c6 <bt_enable+0xde>
	ready_cb = cb;
   1282a:	4b2b      	ldr	r3, [pc, #172]	; (128d8 <bt_enable+0xf0>)
   1282c:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1282e:	460a      	mov	r2, r1
   12830:	f506 7090 	add.w	r0, r6, #288	; 0x120
   12834:	f016 fe25 	bl	29482 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   12838:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   1283c:	f016 fdff 	bl	2943e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12840:	2200      	movs	r2, #0
   12842:	2300      	movs	r3, #0
   12844:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12848:	f06f 0308 	mvn.w	r3, #8
   1284c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12850:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12854:	e9cd 4400 	strd	r4, r4, [sp]
   12858:	4b20      	ldr	r3, [pc, #128]	; (128dc <bt_enable+0xf4>)
   1285a:	4921      	ldr	r1, [pc, #132]	; (128e0 <bt_enable+0xf8>)
   1285c:	9404      	str	r4, [sp, #16]
   1285e:	4821      	ldr	r0, [pc, #132]	; (128e4 <bt_enable+0xfc>)
   12860:	f00c ff66 	bl	1f730 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12864:	4920      	ldr	r1, [pc, #128]	; (128e8 <bt_enable+0x100>)
   12866:	481f      	ldr	r0, [pc, #124]	; (128e4 <bt_enable+0xfc>)
   12868:	f016 fdc0 	bl	293ec <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1286c:	481f      	ldr	r0, [pc, #124]	; (128ec <bt_enable+0x104>)
   1286e:	f00d fe55 	bl	2051c <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   12872:	f06f 0307 	mvn.w	r3, #7
   12876:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1287a:	491d      	ldr	r1, [pc, #116]	; (128f0 <bt_enable+0x108>)
   1287c:	481b      	ldr	r0, [pc, #108]	; (128ec <bt_enable+0x104>)
   1287e:	9400      	str	r4, [sp, #0]
   12880:	f00d fe66 	bl	20550 <k_work_queue_start>
   12884:	491b      	ldr	r1, [pc, #108]	; (128f4 <bt_enable+0x10c>)
   12886:	4819      	ldr	r0, [pc, #100]	; (128ec <bt_enable+0x104>)
   12888:	f016 fdb0 	bl	293ec <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1288c:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   12890:	68db      	ldr	r3, [r3, #12]
   12892:	4798      	blx	r3
	if (err) {
   12894:	4605      	mov	r5, r0
   12896:	b158      	cbz	r0, 128b0 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   12898:	4b17      	ldr	r3, [pc, #92]	; (128f8 <bt_enable+0x110>)
   1289a:	9003      	str	r0, [sp, #12]
   1289c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   128a0:	2201      	movs	r2, #1
   128a2:	4623      	mov	r3, r4
   128a4:	4620      	mov	r0, r4
   128a6:	490b      	ldr	r1, [pc, #44]	; (128d4 <bt_enable+0xec>)
   128a8:	9400      	str	r4, [sp, #0]
   128aa:	f013 fbb6 	bl	2601a <z_log_msg_runtime_create.constprop.0>
		return err;
   128ae:	e7ad      	b.n	1280c <bt_enable+0x24>
	if (!cb) {
   128b0:	b927      	cbnz	r7, 128bc <bt_enable+0xd4>
}
   128b2:	b009      	add	sp, #36	; 0x24
   128b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   128b8:	f7f6 bdc2 	b.w	9440 <bt_init>
	k_work_submit(&bt_dev.init);
   128bc:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   128c0:	f00d fe26 	bl	20510 <k_work_submit>
	return 0;
   128c4:	e7a2      	b.n	1280c <bt_enable+0x24>
		return -EALREADY;
   128c6:	f06f 0577 	mvn.w	r5, #119	; 0x77
   128ca:	e79f      	b.n	1280c <bt_enable+0x24>
   128cc:	20008000 	.word	0x20008000
   128d0:	0002dd02 	.word	0x0002dd02
   128d4:	0002a740 	.word	0x0002a740
   128d8:	20021050 	.word	0x20021050
   128dc:	00012515 	.word	0x00012515
   128e0:	20031e10 	.word	0x20031e10
   128e4:	20009630 	.word	0x20009630
   128e8:	0002dd1b 	.word	0x0002dd1b
   128ec:	200096b8 	.word	0x200096b8
   128f0:	20032210 	.word	0x20032210
   128f4:	0002dd21 	.word	0x0002dd21
   128f8:	0002dd27 	.word	0x0002dd27

000128fc <bt_is_ready>:
   128fc:	4b02      	ldr	r3, [pc, #8]	; (12908 <bt_is_ready+0xc>)
   128fe:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   12902:	f3c0 0080 	ubfx	r0, r0, #2, #1
   12906:	4770      	bx	lr
   12908:	200080cc 	.word	0x200080cc

0001290c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1290c:	4800      	ldr	r0, [pc, #0]	; (12910 <bt_get_name+0x4>)
   1290e:	4770      	bx	lr
   12910:	0002bfd3 	.word	0x0002bfd3

00012914 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   12914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12916:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   12918:	2500      	movs	r5, #0
   1291a:	4f09      	ldr	r7, [pc, #36]	; (12940 <id_find+0x2c>)
   1291c:	79fb      	ldrb	r3, [r7, #7]
   1291e:	b2ec      	uxtb	r4, r5
   12920:	42a3      	cmp	r3, r4
   12922:	d802      	bhi.n	1292a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   12924:	f06f 0001 	mvn.w	r0, #1
   12928:	e009      	b.n	1293e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1292a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1292e:	4630      	mov	r0, r6
   12930:	4439      	add	r1, r7
   12932:	f013 fc2a 	bl	2618a <bt_addr_le_eq>
   12936:	3501      	adds	r5, #1
   12938:	2800      	cmp	r0, #0
   1293a:	d0ef      	beq.n	1291c <id_find+0x8>
   1293c:	4620      	mov	r0, r4
}
   1293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12940:	20008000 	.word	0x20008000

00012944 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   12944:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12946:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   12948:	460d      	mov	r5, r1
   1294a:	b171      	cbz	r1, 1296a <id_create.constprop.0+0x26>
   1294c:	4628      	mov	r0, r5
   1294e:	4912      	ldr	r1, [pc, #72]	; (12998 <id_create.constprop.0+0x54>)
   12950:	f013 fc1b 	bl	2618a <bt_addr_le_eq>
   12954:	b948      	cbnz	r0, 1296a <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   12956:	4629      	mov	r1, r5
   12958:	4810      	ldr	r0, [pc, #64]	; (1299c <id_create.constprop.0+0x58>)
   1295a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1295e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12960:	f013 fc20 	bl	261a4 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   12964:	2000      	movs	r0, #0
}
   12966:	b003      	add	sp, #12
   12968:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1296a:	4668      	mov	r0, sp
   1296c:	f013 fb05 	bl	25f7a <bt_addr_le_create_static>
			if (err) {
   12970:	2800      	cmp	r0, #0
   12972:	d1f8      	bne.n	12966 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   12974:	4668      	mov	r0, sp
   12976:	f7ff ffcd 	bl	12914 <id_find>
   1297a:	2800      	cmp	r0, #0
   1297c:	daf5      	bge.n	1296a <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1297e:	4b07      	ldr	r3, [pc, #28]	; (1299c <id_create.constprop.0+0x58>)
   12980:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   12984:	4669      	mov	r1, sp
   12986:	4418      	add	r0, r3
   12988:	f013 fc0c 	bl	261a4 <bt_addr_le_copy>
		if (addr) {
   1298c:	2d00      	cmp	r5, #0
   1298e:	d0e9      	beq.n	12964 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12990:	4601      	mov	r1, r0
   12992:	4628      	mov	r0, r5
   12994:	e7e4      	b.n	12960 <id_create.constprop.0+0x1c>
   12996:	bf00      	nop
   12998:	0002d679 	.word	0x0002d679
   1299c:	20008000 	.word	0x20008000

000129a0 <set_random_address>:
{
   129a0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   129a2:	2206      	movs	r2, #6
   129a4:	4911      	ldr	r1, [pc, #68]	; (129ec <set_random_address+0x4c>)
   129a6:	4605      	mov	r5, r0
   129a8:	f016 ff0f 	bl	297ca <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   129ac:	b1c8      	cbz	r0, 129e2 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   129ae:	2106      	movs	r1, #6
   129b0:	f242 0005 	movw	r0, #8197	; 0x2005
   129b4:	f7ff f8c4 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   129b8:	4604      	mov	r4, r0
   129ba:	b1a0      	cbz	r0, 129e6 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   129bc:	2206      	movs	r2, #6
   129be:	4629      	mov	r1, r5
   129c0:	300c      	adds	r0, #12
   129c2:	f015 f99a 	bl	27cfa <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   129c6:	2200      	movs	r2, #0
   129c8:	4621      	mov	r1, r4
   129ca:	f242 0005 	movw	r0, #8197	; 0x2005
   129ce:	f7ff f905 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   129d2:	b938      	cbnz	r0, 129e4 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   129d4:	4805      	ldr	r0, [pc, #20]	; (129ec <set_random_address+0x4c>)
   129d6:	4629      	mov	r1, r5
   129d8:	f013 fbdf 	bl	2619a <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   129dc:	2301      	movs	r3, #1
   129de:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   129e2:	2000      	movs	r0, #0
}
   129e4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   129e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   129ea:	e7fb      	b.n	129e4 <set_random_address+0x44>
   129ec:	20008061 	.word	0x20008061

000129f0 <find_rl_conflict>:
{
   129f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129f4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   129f6:	460c      	mov	r4, r1
{
   129f8:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   129fa:	b959      	cbnz	r1, 12a14 <find_rl_conflict+0x24>
   129fc:	492b      	ldr	r1, [pc, #172]	; (12aac <find_rl_conflict+0xbc>)
   129fe:	f44f 7357 	mov.w	r3, #860	; 0x35c
   12a02:	4a2b      	ldr	r2, [pc, #172]	; (12ab0 <find_rl_conflict+0xc0>)
   12a04:	482b      	ldr	r0, [pc, #172]	; (12ab4 <find_rl_conflict+0xc4>)
   12a06:	f012 f98a 	bl	24d1e <assert_print>
   12a0a:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   12a0e:	4828      	ldr	r0, [pc, #160]	; (12ab0 <find_rl_conflict+0xc0>)
   12a10:	f012 f97e 	bl	24d10 <assert_post_action>
   12a14:	6808      	ldr	r0, [r1, #0]
   12a16:	b948      	cbnz	r0, 12a2c <find_rl_conflict+0x3c>
   12a18:	4927      	ldr	r1, [pc, #156]	; (12ab8 <find_rl_conflict+0xc8>)
   12a1a:	f240 335d 	movw	r3, #861	; 0x35d
   12a1e:	4a24      	ldr	r2, [pc, #144]	; (12ab0 <find_rl_conflict+0xc0>)
   12a20:	4824      	ldr	r0, [pc, #144]	; (12ab4 <find_rl_conflict+0xc4>)
   12a22:	f012 f97c 	bl	24d1e <assert_print>
   12a26:	f240 315d 	movw	r1, #861	; 0x35d
   12a2a:	e7f0      	b.n	12a0e <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   12a2c:	b94d      	cbnz	r5, 12a42 <find_rl_conflict+0x52>
   12a2e:	4923      	ldr	r1, [pc, #140]	; (12abc <find_rl_conflict+0xcc>)
   12a30:	f240 335e 	movw	r3, #862	; 0x35e
   12a34:	4a1e      	ldr	r2, [pc, #120]	; (12ab0 <find_rl_conflict+0xc0>)
   12a36:	481f      	ldr	r0, [pc, #124]	; (12ab4 <find_rl_conflict+0xc4>)
   12a38:	f012 f971 	bl	24d1e <assert_print>
   12a3c:	f240 315e 	movw	r1, #862	; 0x35e
   12a40:	e7e5      	b.n	12a0e <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   12a42:	7a03      	ldrb	r3, [r0, #8]
   12a44:	075a      	lsls	r2, r3, #29
   12a46:	d509      	bpl.n	12a5c <find_rl_conflict+0x6c>
   12a48:	491d      	ldr	r1, [pc, #116]	; (12ac0 <find_rl_conflict+0xd0>)
   12a4a:	f44f 7358 	mov.w	r3, #864	; 0x360
   12a4e:	4a18      	ldr	r2, [pc, #96]	; (12ab0 <find_rl_conflict+0xc0>)
   12a50:	4818      	ldr	r0, [pc, #96]	; (12ab4 <find_rl_conflict+0xc4>)
   12a52:	f012 f964 	bl	24d1e <assert_print>
   12a56:	f44f 7158 	mov.w	r1, #864	; 0x360
   12a5a:	e7d8      	b.n	12a0e <find_rl_conflict+0x1e>
	if (conflict->found) {
   12a5c:	684f      	ldr	r7, [r1, #4]
   12a5e:	b9f7      	cbnz	r7, 12a9e <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   12a60:	7a2b      	ldrb	r3, [r5, #8]
   12a62:	075b      	lsls	r3, r3, #29
   12a64:	d51b      	bpl.n	12a9e <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   12a66:	1c69      	adds	r1, r5, #1
   12a68:	3001      	adds	r0, #1
   12a6a:	f013 fb8e 	bl	2618a <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   12a6e:	f8d4 8000 	ldr.w	r8, [r4]
   12a72:	2216      	movs	r2, #22
   12a74:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   12a76:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   12a78:	4668      	mov	r0, sp
   12a7a:	f016 fef0 	bl	2985e <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   12a7e:	2210      	movs	r2, #16
   12a80:	4669      	mov	r1, sp
   12a82:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   12a86:	f016 fea0 	bl	297ca <memcmp>
   12a8a:	b158      	cbz	r0, 12aa4 <find_rl_conflict+0xb4>
   12a8c:	6820      	ldr	r0, [r4, #0]
   12a8e:	2210      	movs	r2, #16
   12a90:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   12a94:	302a      	adds	r0, #42	; 0x2a
   12a96:	f016 fe98 	bl	297ca <memcmp>
   12a9a:	b918      	cbnz	r0, 12aa4 <find_rl_conflict+0xb4>
		conflict->found = resident;
   12a9c:	6065      	str	r5, [r4, #4]
}
   12a9e:	b006      	add	sp, #24
   12aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   12aa4:	2e00      	cmp	r6, #0
   12aa6:	d1f9      	bne.n	12a9c <find_rl_conflict+0xac>
   12aa8:	e7f9      	b.n	12a9e <find_rl_conflict+0xae>
   12aaa:	bf00      	nop
   12aac:	0002dda7 	.word	0x0002dda7
   12ab0:	0002dd79 	.word	0x0002dd79
   12ab4:	0002b6e9 	.word	0x0002b6e9
   12ab8:	0002ddbf 	.word	0x0002ddbf
   12abc:	0002dde2 	.word	0x0002dde2
   12ac0:	0002ddfa 	.word	0x0002ddfa

00012ac4 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12ac4:	4b08      	ldr	r3, [pc, #32]	; (12ae8 <bt_id_pending_keys_update+0x24>)
   12ac6:	e8d3 2fef 	ldaex	r2, [r3]
   12aca:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   12ace:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12ad2:	2800      	cmp	r0, #0
   12ad4:	d1f7      	bne.n	12ac6 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   12ad6:	0413      	lsls	r3, r2, #16
   12ad8:	d504      	bpl.n	12ae4 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   12ada:	2200      	movs	r2, #0
   12adc:	2002      	movs	r0, #2
   12ade:	4903      	ldr	r1, [pc, #12]	; (12aec <bt_id_pending_keys_update+0x28>)
   12ae0:	f006 b818 	b.w	18b14 <bt_keys_foreach_type>
}
   12ae4:	4770      	bx	lr
   12ae6:	bf00      	nop
   12ae8:	200080cc 	.word	0x200080cc
   12aec:	00026321 	.word	0x00026321

00012af0 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   12af0:	2300      	movs	r3, #0
{
   12af2:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   12af4:	4905      	ldr	r1, [pc, #20]	; (12b0c <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   12af6:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   12afa:	466a      	mov	r2, sp
   12afc:	2002      	movs	r0, #2
   12afe:	f006 f809 	bl	18b14 <bt_keys_foreach_type>
}
   12b02:	9801      	ldr	r0, [sp, #4]
   12b04:	b003      	add	sp, #12
   12b06:	f85d fb04 	ldr.w	pc, [sp], #4
   12b0a:	bf00      	nop
   12b0c:	000129f1 	.word	0x000129f1

00012b10 <bt_id_add>:
{
   12b10:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   12b12:	4605      	mov	r5, r0
{
   12b14:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   12b16:	b170      	cbz	r0, 12b36 <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   12b18:	4c59      	ldr	r4, [pc, #356]	; (12c80 <bt_id_add+0x170>)
   12b1a:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   12b1e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12b22:	b10a      	cbz	r2, 12b28 <bt_id_add+0x18>
   12b24:	429a      	cmp	r2, r3
   12b26:	d208      	bcs.n	12b3a <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   12b28:	3301      	adds	r3, #1
   12b2a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   12b2e:	7a2b      	ldrb	r3, [r5, #8]
   12b30:	f043 0304 	orr.w	r3, r3, #4
   12b34:	722b      	strb	r3, [r5, #8]
}
   12b36:	b007      	add	sp, #28
   12b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   12b3a:	2100      	movs	r1, #0
   12b3c:	2206      	movs	r2, #6
   12b3e:	4608      	mov	r0, r1
   12b40:	f001 fe0c 	bl	1475c <bt_conn_lookup_state_le>
	if (conn) {
   12b44:	4606      	mov	r6, r0
   12b46:	b188      	cbz	r0, 12b6c <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12b48:	34cc      	adds	r4, #204	; 0xcc
   12b4a:	e8d4 3fef 	ldaex	r3, [r4]
   12b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   12b52:	e8c4 3fe2 	stlex	r2, r3, [r4]
   12b56:	2a00      	cmp	r2, #0
   12b58:	d1f7      	bne.n	12b4a <bt_id_add+0x3a>
	keys->state |= flag;
   12b5a:	7a2b      	ldrb	r3, [r5, #8]
   12b5c:	f043 0301 	orr.w	r3, r3, #1
   12b60:	722b      	strb	r3, [r5, #8]
}
   12b62:	b007      	add	sp, #28
   12b64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   12b68:	f001 baec 	b.w	14144 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   12b6c:	4601      	mov	r1, r0
   12b6e:	4845      	ldr	r0, [pc, #276]	; (12c84 <bt_id_add+0x174>)
   12b70:	f000 fbee 	bl	13350 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   12b74:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12b78:	b163      	cbz	r3, 12b94 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   12b7a:	4630      	mov	r0, r6
   12b7c:	f013 fb64 	bl	26248 <addr_res_enable>
		if (err) {
   12b80:	b140      	cbz	r0, 12b94 <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   12b82:	4b41      	ldr	r3, [pc, #260]	; (12c88 <bt_id_add+0x178>)
   12b84:	2202      	movs	r2, #2
   12b86:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12b8a:	4633      	mov	r3, r6
   12b8c:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   12b8e:	4618      	mov	r0, r3
   12b90:	493e      	ldr	r1, [pc, #248]	; (12c8c <bt_id_add+0x17c>)
   12b92:	e054      	b.n	12c3e <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   12b94:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   12b98:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   12b9c:	429a      	cmp	r2, r3
   12b9e:	d12b      	bne.n	12bf8 <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   12ba0:	2600      	movs	r6, #0
   12ba2:	4b3b      	ldr	r3, [pc, #236]	; (12c90 <bt_id_add+0x180>)
   12ba4:	2202      	movs	r2, #2
   12ba6:	4630      	mov	r0, r6
   12ba8:	4938      	ldr	r1, [pc, #224]	; (12c8c <bt_id_add+0x17c>)
   12baa:	9302      	str	r3, [sp, #8]
   12bac:	e9cd 6600 	strd	r6, r6, [sp]
   12bb0:	4633      	mov	r3, r6
   12bb2:	f013 fb3a 	bl	2622a <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   12bb6:	4632      	mov	r2, r6
   12bb8:	4631      	mov	r1, r6
   12bba:	f242 0029 	movw	r0, #8233	; 0x2029
   12bbe:	f7ff f80d 	bl	11bdc <bt_hci_cmd_send_sync>
		if (err) {
   12bc2:	b130      	cbz	r0, 12bd2 <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   12bc4:	4b33      	ldr	r3, [pc, #204]	; (12c94 <bt_id_add+0x184>)
   12bc6:	9600      	str	r6, [sp, #0]
   12bc8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12bcc:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   12bce:	2201      	movs	r2, #1
   12bd0:	e7dd      	b.n	12b8e <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   12bd2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12bd6:	3301      	adds	r3, #1
   12bd8:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   12bdc:	7a2b      	ldrb	r3, [r5, #8]
   12bde:	f043 0304 	orr.w	r3, r3, #4
   12be2:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   12be4:	2001      	movs	r0, #1
   12be6:	f013 fb2f 	bl	26248 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12bea:	2100      	movs	r1, #0
   12bec:	482a      	ldr	r0, [pc, #168]	; (12c98 <bt_id_add+0x188>)
}
   12bee:	b007      	add	sp, #28
   12bf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12bf4:	f000 bbac 	b.w	13350 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   12bf8:	462a      	mov	r2, r5
   12bfa:	1c6f      	adds	r7, r5, #1
   12bfc:	4639      	mov	r1, r7
   12bfe:	f812 0b2a 	ldrb.w	r0, [r2], #42
   12c02:	f013 fad6 	bl	261b2 <hci_id_add>
	if (err) {
   12c06:	4606      	mov	r6, r0
   12c08:	b128      	cbz	r0, 12c16 <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   12c0a:	4b24      	ldr	r3, [pc, #144]	; (12c9c <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   12c0c:	9302      	str	r3, [sp, #8]
   12c0e:	2300      	movs	r3, #0
   12c10:	e9cd 3300 	strd	r3, r3, [sp]
   12c14:	e7db      	b.n	12bce <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   12c16:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12c1a:	3301      	adds	r3, #1
   12c1c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   12c20:	7a2b      	ldrb	r3, [r5, #8]
   12c22:	f043 0304 	orr.w	r3, r3, #4
   12c26:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   12c28:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   12c2c:	f013 0304 	ands.w	r3, r3, #4
   12c30:	d108      	bne.n	12c44 <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   12c32:	4a1b      	ldr	r2, [pc, #108]	; (12ca0 <bt_id_add+0x190>)
   12c34:	4915      	ldr	r1, [pc, #84]	; (12c8c <bt_id_add+0x17c>)
   12c36:	e9cd 3201 	strd	r3, r2, [sp, #4]
   12c3a:	2202      	movs	r2, #2
   12c3c:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   12c3e:	f013 faf4 	bl	2622a <z_log_msg_runtime_create.constprop.0>
		goto done;
   12c42:	e7cf      	b.n	12be4 <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   12c44:	4639      	mov	r1, r7
   12c46:	a804      	add	r0, sp, #16
   12c48:	f013 faac 	bl	261a4 <bt_addr_le_copy>
	cp.mode = mode;
   12c4c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   12c4e:	2108      	movs	r1, #8
   12c50:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   12c54:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   12c58:	f7fe ff72 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   12c5c:	4604      	mov	r4, r0
   12c5e:	b160      	cbz	r0, 12c7a <bt_id_add+0x16a>
   12c60:	2208      	movs	r2, #8
   12c62:	a904      	add	r1, sp, #16
   12c64:	300c      	adds	r0, #12
   12c66:	f015 f848 	bl	27cfa <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   12c6a:	4632      	mov	r2, r6
   12c6c:	4621      	mov	r1, r4
   12c6e:	f242 004e 	movw	r0, #8270	; 0x204e
   12c72:	f7fe ffb3 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   12c76:	2800      	cmp	r0, #0
   12c78:	d0b4      	beq.n	12be4 <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   12c7a:	4b0a      	ldr	r3, [pc, #40]	; (12ca4 <bt_id_add+0x194>)
   12c7c:	e7c6      	b.n	12c0c <bt_id_add+0xfc>
   12c7e:	bf00      	nop
   12c80:	20008000 	.word	0x20008000
   12c84:	0002629f 	.word	0x0002629f
   12c88:	0002de2f 	.word	0x0002de2f
   12c8c:	0002a758 	.word	0x0002a758
   12c90:	0002de54 	.word	0x0002de54
   12c94:	0002de85 	.word	0x0002de85
   12c98:	00026279 	.word	0x00026279
   12c9c:	0002dea5 	.word	0x0002dea5
   12ca0:	0002dec5 	.word	0x0002dec5
   12ca4:	0002deef 	.word	0x0002deef

00012ca8 <bt_id_del>:
{
   12ca8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   12cac:	4605      	mov	r5, r0
   12cae:	b3a8      	cbz	r0, 12d1c <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   12cb0:	4c4c      	ldr	r4, [pc, #304]	; (12de4 <bt_id_del+0x13c>)
   12cb2:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   12cb6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   12cba:	b1da      	cbz	r2, 12cf4 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   12cbc:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   12cbe:	4293      	cmp	r3, r2
   12cc0:	dc25      	bgt.n	12d0e <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   12cc2:	2100      	movs	r1, #0
   12cc4:	2206      	movs	r2, #6
   12cc6:	4608      	mov	r0, r1
   12cc8:	f001 fd48 	bl	1475c <bt_conn_lookup_state_le>
	if (conn) {
   12ccc:	4606      	mov	r6, r0
   12cce:	b340      	cbz	r0, 12d22 <bt_id_del+0x7a>
   12cd0:	34cc      	adds	r4, #204	; 0xcc
   12cd2:	e8d4 3fef 	ldaex	r3, [r4]
   12cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   12cda:	e8c4 3fe2 	stlex	r2, r3, [r4]
   12cde:	2a00      	cmp	r2, #0
   12ce0:	d1f7      	bne.n	12cd2 <bt_id_del+0x2a>
	keys->state |= flag;
   12ce2:	7a2b      	ldrb	r3, [r5, #8]
   12ce4:	f043 0302 	orr.w	r3, r3, #2
   12ce8:	722b      	strb	r3, [r5, #8]
}
   12cea:	b004      	add	sp, #16
   12cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   12cf0:	f001 ba28 	b.w	14144 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   12cf4:	b95b      	cbnz	r3, 12d0e <bt_id_del+0x66>
   12cf6:	493c      	ldr	r1, [pc, #240]	; (12de8 <bt_id_del+0x140>)
   12cf8:	483c      	ldr	r0, [pc, #240]	; (12dec <bt_id_del+0x144>)
   12cfa:	f240 4323 	movw	r3, #1059	; 0x423
   12cfe:	4a3c      	ldr	r2, [pc, #240]	; (12df0 <bt_id_del+0x148>)
   12d00:	f012 f80d 	bl	24d1e <assert_print>
   12d04:	f240 4123 	movw	r1, #1059	; 0x423
   12d08:	4839      	ldr	r0, [pc, #228]	; (12df0 <bt_id_del+0x148>)
   12d0a:	f012 f801 	bl	24d10 <assert_post_action>
			bt_dev.le.rl_entries--;
   12d0e:	3b01      	subs	r3, #1
   12d10:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   12d14:	7a2b      	ldrb	r3, [r5, #8]
   12d16:	f023 0304 	bic.w	r3, r3, #4
   12d1a:	722b      	strb	r3, [r5, #8]
}
   12d1c:	b004      	add	sp, #16
   12d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   12d22:	4601      	mov	r1, r0
   12d24:	4833      	ldr	r0, [pc, #204]	; (12df4 <bt_id_del+0x14c>)
   12d26:	f000 fb13 	bl	13350 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   12d2a:	4630      	mov	r0, r6
   12d2c:	f013 fa8c 	bl	26248 <addr_res_enable>
	if (err) {
   12d30:	4607      	mov	r7, r0
   12d32:	b1b8      	cbz	r0, 12d64 <bt_id_del+0xbc>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   12d34:	4b30      	ldr	r3, [pc, #192]	; (12df8 <bt_id_del+0x150>)
   12d36:	9003      	str	r0, [sp, #12]
   12d38:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12d3c:	2201      	movs	r2, #1
   12d3e:	4633      	mov	r3, r6
   12d40:	4630      	mov	r0, r6
   12d42:	492e      	ldr	r1, [pc, #184]	; (12dfc <bt_id_del+0x154>)
   12d44:	9600      	str	r6, [sp, #0]
   12d46:	f013 fa70 	bl	2622a <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   12d4a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12d4e:	b113      	cbz	r3, 12d56 <bt_id_del+0xae>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   12d50:	2001      	movs	r0, #1
   12d52:	f013 fa79 	bl	26248 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12d56:	2100      	movs	r1, #0
   12d58:	4829      	ldr	r0, [pc, #164]	; (12e00 <bt_id_del+0x158>)
}
   12d5a:	b004      	add	sp, #16
   12d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12d60:	f000 baf6 	b.w	13350 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   12d64:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12d68:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   12d6c:	429a      	cmp	r2, r3
   12d6e:	d20c      	bcs.n	12d8a <bt_id_del+0xe2>
		bt_dev.le.rl_entries--;
   12d70:	3b01      	subs	r3, #1
   12d72:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   12d76:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12d78:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   12d7a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12d7e:	2002      	movs	r0, #2
   12d80:	4920      	ldr	r1, [pc, #128]	; (12e04 <bt_id_del+0x15c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   12d82:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12d84:	f005 fec6 	bl	18b14 <bt_keys_foreach_type>
		goto done;
   12d88:	e7df      	b.n	12d4a <bt_id_del+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   12d8a:	2107      	movs	r1, #7
   12d8c:	f242 0028 	movw	r0, #8232	; 0x2028
   12d90:	f7fe fed6 	bl	11b40 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   12d94:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   12d98:	4606      	mov	r6, r0
   12d9a:	b950      	cbnz	r0, 12db2 <bt_id_del+0x10a>
		LOG_ERR("Failed to remove IRK from controller");
   12d9c:	4b1a      	ldr	r3, [pc, #104]	; (12e08 <bt_id_del+0x160>)
   12d9e:	2201      	movs	r2, #1
   12da0:	9302      	str	r3, [sp, #8]
   12da2:	2300      	movs	r3, #0
   12da4:	4915      	ldr	r1, [pc, #84]	; (12dfc <bt_id_del+0x154>)
   12da6:	4618      	mov	r0, r3
   12da8:	e9cd 3300 	strd	r3, r3, [sp]
   12dac:	f013 fa3d 	bl	2622a <z_log_msg_runtime_create.constprop.0>
		goto done;
   12db0:	e7cb      	b.n	12d4a <bt_id_del+0xa2>
	return net_buf_simple_add(&buf->b, len);
   12db2:	2107      	movs	r1, #7
   12db4:	300c      	adds	r0, #12
   12db6:	f006 fc01 	bl	195bc <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   12dba:	4641      	mov	r1, r8
   12dbc:	f013 f9f2 	bl	261a4 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   12dc0:	463a      	mov	r2, r7
   12dc2:	4631      	mov	r1, r6
   12dc4:	f242 0028 	movw	r0, #8232	; 0x2028
   12dc8:	f7fe ff08 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   12dcc:	2800      	cmp	r0, #0
   12dce:	d1e5      	bne.n	12d9c <bt_id_del+0xf4>
	bt_dev.le.rl_entries--;
   12dd0:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12dd4:	3b01      	subs	r3, #1
   12dd6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   12dda:	7a2b      	ldrb	r3, [r5, #8]
   12ddc:	f023 0304 	bic.w	r3, r3, #4
   12de0:	722b      	strb	r3, [r5, #8]
   12de2:	e7b2      	b.n	12d4a <bt_id_del+0xa2>
   12de4:	20008000 	.word	0x20008000
   12de8:	0002df0a 	.word	0x0002df0a
   12dec:	0002b6e9 	.word	0x0002b6e9
   12df0:	0002dd79 	.word	0x0002dd79
   12df4:	0002629f 	.word	0x0002629f
   12df8:	0002df23 	.word	0x0002df23
   12dfc:	0002a758 	.word	0x0002a758
   12e00:	00026279 	.word	0x00026279
   12e04:	00026215 	.word	0x00026215
   12e08:	0002df50 	.word	0x0002df50

00012e0c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   12e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12e0e:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   12e10:	4604      	mov	r4, r0
   12e12:	b920      	cbnz	r0, 12e1e <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   12e14:	b31d      	cbz	r5, 12e5e <bt_id_create+0x52>
			return -EINVAL;
   12e16:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   12e1a:	b004      	add	sp, #16
   12e1c:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   12e1e:	4921      	ldr	r1, [pc, #132]	; (12ea4 <bt_id_create+0x98>)
   12e20:	f013 f9b3 	bl	2618a <bt_addr_le_eq>
   12e24:	2800      	cmp	r0, #0
   12e26:	d1f5      	bne.n	12e14 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   12e28:	7823      	ldrb	r3, [r4, #0]
   12e2a:	2b01      	cmp	r3, #1
   12e2c:	d104      	bne.n	12e38 <bt_id_create+0x2c>
   12e2e:	79a3      	ldrb	r3, [r4, #6]
   12e30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12e34:	2bc0      	cmp	r3, #192	; 0xc0
   12e36:	d00a      	beq.n	12e4e <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   12e38:	4b1b      	ldr	r3, [pc, #108]	; (12ea8 <bt_id_create+0x9c>)
   12e3a:	2201      	movs	r2, #1
   12e3c:	9302      	str	r3, [sp, #8]
   12e3e:	2300      	movs	r3, #0
   12e40:	491a      	ldr	r1, [pc, #104]	; (12eac <bt_id_create+0xa0>)
   12e42:	4618      	mov	r0, r3
   12e44:	e9cd 3300 	strd	r3, r3, [sp]
   12e48:	f013 f9ef 	bl	2622a <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   12e4c:	e7e3      	b.n	12e16 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   12e4e:	4620      	mov	r0, r4
   12e50:	f7ff fd60 	bl	12914 <id_find>
   12e54:	2800      	cmp	r0, #0
   12e56:	dbdd      	blt.n	12e14 <bt_id_create+0x8>
			return -EALREADY;
   12e58:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12e5c:	e7dd      	b.n	12e1a <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   12e5e:	4d14      	ldr	r5, [pc, #80]	; (12eb0 <bt_id_create+0xa4>)
   12e60:	79eb      	ldrb	r3, [r5, #7]
   12e62:	2b01      	cmp	r3, #1
   12e64:	d01a      	beq.n	12e9c <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e66:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   12e6a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12e6e:	07db      	lsls	r3, r3, #31
   12e70:	d50b      	bpl.n	12e8a <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   12e72:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   12e74:	4621      	mov	r1, r4
   12e76:	4630      	mov	r0, r6
   12e78:	f7ff fd64 	bl	12944 <id_create.constprop.0>
	if (err) {
   12e7c:	2800      	cmp	r0, #0
   12e7e:	d1cc      	bne.n	12e1a <bt_id_create+0xe>
		bt_dev.id_count++;
   12e80:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   12e82:	4630      	mov	r0, r6
		bt_dev.id_count++;
   12e84:	3301      	adds	r3, #1
   12e86:	71eb      	strb	r3, [r5, #7]
	return new_id;
   12e88:	e7c7      	b.n	12e1a <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   12e8a:	2c00      	cmp	r4, #0
   12e8c:	d0c3      	beq.n	12e16 <bt_id_create+0xa>
   12e8e:	4620      	mov	r0, r4
   12e90:	4904      	ldr	r1, [pc, #16]	; (12ea4 <bt_id_create+0x98>)
   12e92:	f013 f97a 	bl	2618a <bt_addr_le_eq>
   12e96:	2800      	cmp	r0, #0
   12e98:	d0eb      	beq.n	12e72 <bt_id_create+0x66>
   12e9a:	e7bc      	b.n	12e16 <bt_id_create+0xa>
		return -ENOMEM;
   12e9c:	f06f 000b 	mvn.w	r0, #11
   12ea0:	e7bb      	b.n	12e1a <bt_id_create+0xe>
   12ea2:	bf00      	nop
   12ea4:	0002d679 	.word	0x0002d679
   12ea8:	0002df75 	.word	0x0002df75
   12eac:	0002a758 	.word	0x0002a758
   12eb0:	20008000 	.word	0x20008000

00012eb4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   12eb4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   12eb6:	4604      	mov	r4, r0
{
   12eb8:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   12eba:	b958      	cbnz	r0, 12ed4 <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   12ebc:	4b1d      	ldr	r3, [pc, #116]	; (12f34 <bt_id_read_public_addr+0x80>)
   12ebe:	2202      	movs	r2, #2
   12ec0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12ec4:	4603      	mov	r3, r0
   12ec6:	491c      	ldr	r1, [pc, #112]	; (12f38 <bt_id_read_public_addr+0x84>)
   12ec8:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   12eca:	f013 f9ae 	bl	2622a <z_log_msg_runtime_create.constprop.0>
		return 0U;
   12ece:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   12ed0:	b006      	add	sp, #24
   12ed2:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   12ed4:	2100      	movs	r1, #0
   12ed6:	f241 0009 	movw	r0, #4105	; 0x1009
   12eda:	aa05      	add	r2, sp, #20
   12edc:	f7fe fe7e 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   12ee0:	4606      	mov	r6, r0
   12ee2:	b140      	cbz	r0, 12ef6 <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   12ee4:	4b15      	ldr	r3, [pc, #84]	; (12f3c <bt_id_read_public_addr+0x88>)
   12ee6:	2202      	movs	r2, #2
   12ee8:	9302      	str	r3, [sp, #8]
   12eea:	2300      	movs	r3, #0
   12eec:	4912      	ldr	r1, [pc, #72]	; (12f38 <bt_id_read_public_addr+0x84>)
   12eee:	4618      	mov	r0, r3
   12ef0:	e9cd 3300 	strd	r3, r3, [sp]
   12ef4:	e7e9      	b.n	12eca <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   12ef6:	9b05      	ldr	r3, [sp, #20]
   12ef8:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12efa:	68dd      	ldr	r5, [r3, #12]
   12efc:	4910      	ldr	r1, [pc, #64]	; (12f40 <bt_id_read_public_addr+0x8c>)
   12efe:	3501      	adds	r5, #1
   12f00:	4628      	mov	r0, r5
   12f02:	f016 fc62 	bl	297ca <memcmp>
   12f06:	b918      	cbnz	r0, 12f10 <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   12f08:	9805      	ldr	r0, [sp, #20]
   12f0a:	f006 fa35 	bl	19378 <net_buf_unref>
		return 0U;
   12f0e:	e7de      	b.n	12ece <bt_id_read_public_addr+0x1a>
   12f10:	2206      	movs	r2, #6
   12f12:	4628      	mov	r0, r5
   12f14:	490b      	ldr	r1, [pc, #44]	; (12f44 <bt_id_read_public_addr+0x90>)
   12f16:	f016 fc58 	bl	297ca <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12f1a:	2800      	cmp	r0, #0
   12f1c:	d0f4      	beq.n	12f08 <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   12f1e:	4629      	mov	r1, r5
   12f20:	1c60      	adds	r0, r4, #1
   12f22:	f013 f93a 	bl	2619a <bt_addr_copy>
	net_buf_unref(rsp);
   12f26:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   12f28:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   12f2a:	f006 fa25 	bl	19378 <net_buf_unref>
	return 1U;
   12f2e:	2001      	movs	r0, #1
   12f30:	e7ce      	b.n	12ed0 <bt_id_read_public_addr+0x1c>
   12f32:	bf00      	nop
   12f34:	0002dfa3 	.word	0x0002dfa3
   12f38:	0002a758 	.word	0x0002a758
   12f3c:	0002dfbc 	.word	0x0002dfbc
   12f40:	0002d686 	.word	0x0002d686
   12f44:	0002d680 	.word	0x0002d680

00012f48 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   12f48:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   12f4a:	4668      	mov	r0, sp
   12f4c:	f7ff ffb2 	bl	12eb4 <bt_id_read_public_addr>
   12f50:	4b04      	ldr	r3, [pc, #16]	; (12f64 <bt_setup_public_id_addr+0x1c>)
   12f52:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   12f54:	b118      	cbz	r0, 12f5e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   12f56:	4669      	mov	r1, sp
   12f58:	2000      	movs	r0, #0
   12f5a:	f7ff fcf3 	bl	12944 <id_create.constprop.0>
}
   12f5e:	b003      	add	sp, #12
   12f60:	f85d fb04 	ldr.w	pc, [sp], #4
   12f64:	20008000 	.word	0x20008000

00012f68 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   12f68:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12f6a:	4b25      	ldr	r3, [pc, #148]	; (13000 <bt_read_static_addr+0x98>)
{
   12f6c:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12f6e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   12f72:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12f74:	f013 0301 	ands.w	r3, r3, #1
{
   12f78:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12f7a:	d10c      	bne.n	12f96 <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   12f7c:	4a21      	ldr	r2, [pc, #132]	; (13004 <bt_read_static_addr+0x9c>)
   12f7e:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   12f80:	2202      	movs	r2, #2
   12f82:	4618      	mov	r0, r3
   12f84:	e9cd 3300 	strd	r3, r3, [sp]
   12f88:	491f      	ldr	r1, [pc, #124]	; (13008 <bt_read_static_addr+0xa0>)
   12f8a:	f013 f94e 	bl	2622a <z_log_msg_runtime_create.constprop.0>
		return 0;
   12f8e:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   12f90:	4620      	mov	r0, r4
   12f92:	b007      	add	sp, #28
   12f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   12f96:	2100      	movs	r1, #0
   12f98:	f64f 4009 	movw	r0, #64521	; 0xfc09
   12f9c:	aa05      	add	r2, sp, #20
   12f9e:	f7fe fe1d 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   12fa2:	4603      	mov	r3, r0
   12fa4:	b118      	cbz	r0, 12fae <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   12fa6:	4b19      	ldr	r3, [pc, #100]	; (1300c <bt_read_static_addr+0xa4>)
   12fa8:	9302      	str	r3, [sp, #8]
   12faa:	2300      	movs	r3, #0
   12fac:	e7e8      	b.n	12f80 <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   12fae:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   12fb0:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   12fb2:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   12fb4:	7854      	ldrb	r4, [r2, #1]
   12fb6:	3202      	adds	r2, #2
   12fb8:	42b4      	cmp	r4, r6
   12fba:	bf28      	it	cs
   12fbc:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   12fbe:	429c      	cmp	r4, r3
   12fc0:	dc0e      	bgt.n	12fe0 <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   12fc2:	f006 f9d9 	bl	19378 <net_buf_unref>
	if (!cnt) {
   12fc6:	2c00      	cmp	r4, #0
   12fc8:	d1e2      	bne.n	12f90 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   12fca:	4b11      	ldr	r3, [pc, #68]	; (13010 <bt_read_static_addr+0xa8>)
   12fcc:	2202      	movs	r2, #2
   12fce:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12fd2:	4620      	mov	r0, r4
   12fd4:	4623      	mov	r3, r4
   12fd6:	490c      	ldr	r1, [pc, #48]	; (13008 <bt_read_static_addr+0xa0>)
   12fd8:	9400      	str	r4, [sp, #0]
   12fda:	f013 f926 	bl	2622a <z_log_msg_runtime_create.constprop.0>
   12fde:	e7d7      	b.n	12f90 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12fe0:	4611      	mov	r1, r2
   12fe2:	fb07 5603 	mla	r6, r7, r3, r5
   12fe6:	f102 0c14 	add.w	ip, r2, #20
   12fea:	f851 eb04 	ldr.w	lr, [r1], #4
   12fee:	4561      	cmp	r1, ip
   12ff0:	f846 eb04 	str.w	lr, [r6], #4
   12ff4:	d1f9      	bne.n	12fea <bt_read_static_addr+0x82>
   12ff6:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   12ff8:	3301      	adds	r3, #1
   12ffa:	8031      	strh	r1, [r6, #0]
   12ffc:	3216      	adds	r2, #22
   12ffe:	e7de      	b.n	12fbe <bt_read_static_addr+0x56>
   13000:	20008000 	.word	0x20008000
   13004:	0002dfda 	.word	0x0002dfda
   13008:	0002a758 	.word	0x0002a758
   1300c:	0002e006 	.word	0x0002e006
   13010:	0002e026 	.word	0x0002e026

00013014 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13014:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13016:	4d15      	ldr	r5, [pc, #84]	; (1306c <bt_setup_random_id_addr+0x58>)
{
   13018:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1301a:	79ec      	ldrb	r4, [r5, #7]
   1301c:	b92c      	cbnz	r4, 1302a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1301e:	2101      	movs	r1, #1
   13020:	a802      	add	r0, sp, #8
   13022:	f7ff ffa1 	bl	12f68 <bt_read_static_addr>
   13026:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13028:	b9c0      	cbnz	r0, 1305c <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1302a:	2100      	movs	r1, #0
   1302c:	4608      	mov	r0, r1
}
   1302e:	b008      	add	sp, #32
   13030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13034:	f7ff beea 	b.w	12e0c <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13038:	ab02      	add	r3, sp, #8
   1303a:	fb06 3102 	mla	r1, r6, r2, r3
   1303e:	f10d 0001 	add.w	r0, sp, #1
   13042:	f013 f8aa 	bl	2619a <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13046:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13048:	4669      	mov	r1, sp
   1304a:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1304c:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13050:	f7ff fc78 	bl	12944 <id_create.constprop.0>
				if (err) {
   13054:	3401      	adds	r4, #1
   13056:	b110      	cbz	r0, 1305e <bt_setup_random_id_addr+0x4a>
}
   13058:	b008      	add	sp, #32
   1305a:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1305c:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1305e:	79eb      	ldrb	r3, [r5, #7]
   13060:	b2e2      	uxtb	r2, r4
   13062:	4293      	cmp	r3, r2
   13064:	d8e8      	bhi.n	13038 <bt_setup_random_id_addr+0x24>
			return 0;
   13066:	2000      	movs	r0, #0
   13068:	e7f6      	b.n	13058 <bt_setup_random_id_addr+0x44>
   1306a:	bf00      	nop
   1306c:	20008000 	.word	0x20008000

00013070 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13074:	4690      	mov	r8, r2
   13076:	460e      	mov	r6, r1
   13078:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1307a:	4602      	mov	r2, r0
   1307c:	2800      	cmp	r0, #0
   1307e:	d04b      	beq.n	13118 <bt_id_set_adv_own_addr+0xa8>
   13080:	2b00      	cmp	r3, #0
   13082:	d049      	beq.n	13118 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13084:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   13086:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13088:	d531      	bpl.n	130ee <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1308a:	4f25      	ldr	r7, [pc, #148]	; (13120 <bt_id_set_adv_own_addr+0xb0>)
   1308c:	f1b8 0f00 	cmp.w	r8, #0
   13090:	d013      	beq.n	130ba <bt_id_set_adv_own_addr+0x4a>
   13092:	0688      	lsls	r0, r1, #26
   13094:	d40a      	bmi.n	130ac <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13096:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1309a:	5cfb      	ldrb	r3, [r7, r3]
   1309c:	2b01      	cmp	r3, #1
   1309e:	d015      	beq.n	130cc <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   130a0:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   130a2:	06b2      	lsls	r2, r6, #26
   130a4:	d50f      	bpl.n	130c6 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   130a6:	f043 0302 	orr.w	r3, r3, #2
   130aa:	e00b      	b.n	130c4 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   130ac:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   130b0:	0659      	lsls	r1, r3, #25
   130b2:	d4f0      	bmi.n	13096 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   130b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   130b8:	e006      	b.n	130c8 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   130ba:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   130be:	5cfb      	ldrb	r3, [r7, r3]
   130c0:	2b01      	cmp	r3, #1
   130c2:	d003      	beq.n	130cc <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   130c4:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   130c6:	2000      	movs	r0, #0
}
   130c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   130cc:	2107      	movs	r1, #7
   130ce:	fb01 7104 	mla	r1, r1, r4, r7
   130d2:	4610      	mov	r0, r2
   130d4:	3101      	adds	r1, #1
   130d6:	f013 f900 	bl	262da <bt_id_set_adv_random_addr>
				if (err) {
   130da:	2800      	cmp	r0, #0
   130dc:	d1f4      	bne.n	130c8 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   130de:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   130e2:	5d3b      	ldrb	r3, [r7, r4]
   130e4:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   130e6:	f1b8 0f00 	cmp.w	r8, #0
   130ea:	d0ec      	beq.n	130c6 <bt_id_set_adv_own_addr+0x56>
   130ec:	e7d9      	b.n	130a2 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   130ee:	074b      	lsls	r3, r1, #29
   130f0:	d50e      	bpl.n	13110 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   130f2:	4e0b      	ldr	r6, [pc, #44]	; (13120 <bt_id_set_adv_own_addr+0xb0>)
   130f4:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   130f8:	5df3      	ldrb	r3, [r6, r7]
   130fa:	2b01      	cmp	r3, #1
   130fc:	d1e2      	bne.n	130c4 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   130fe:	2107      	movs	r1, #7
   13100:	fb11 3104 	smlabb	r1, r1, r4, r3
   13104:	4431      	add	r1, r6
   13106:	f013 f8e8 	bl	262da <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1310a:	5df3      	ldrb	r3, [r6, r7]
   1310c:	702b      	strb	r3, [r5, #0]
		if (err) {
   1310e:	e7db      	b.n	130c8 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   13110:	f013 f8eb 	bl	262ea <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13114:	2301      	movs	r3, #1
   13116:	e7f9      	b.n	1310c <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   13118:	f06f 0015 	mvn.w	r0, #21
   1311c:	e7d4      	b.n	130c8 <bt_id_set_adv_own_addr+0x58>
   1311e:	bf00      	nop
   13120:	20008000 	.word	0x20008000

00013124 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13124:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13126:	4e13      	ldr	r6, [pc, #76]	; (13174 <bt_id_init+0x50>)
   13128:	79f5      	ldrb	r5, [r6, #7]
   1312a:	b11d      	cbz	r5, 13134 <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1312c:	2400      	movs	r4, #0
}
   1312e:	4620      	mov	r0, r4
   13130:	b004      	add	sp, #16
   13132:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   13134:	f7ff ff08 	bl	12f48 <bt_setup_public_id_addr>
		if (err) {
   13138:	4604      	mov	r4, r0
   1313a:	b150      	cbz	r0, 13152 <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   1313c:	4b0e      	ldr	r3, [pc, #56]	; (13178 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   1313e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13142:	2201      	movs	r2, #1
   13144:	462b      	mov	r3, r5
   13146:	4628      	mov	r0, r5
   13148:	490c      	ldr	r1, [pc, #48]	; (1317c <bt_id_init+0x58>)
   1314a:	9500      	str	r5, [sp, #0]
   1314c:	f013 f86d 	bl	2622a <z_log_msg_runtime_create.constprop.0>
			return err;
   13150:	e7ed      	b.n	1312e <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13152:	79f5      	ldrb	r5, [r6, #7]
   13154:	2d00      	cmp	r5, #0
   13156:	d1e9      	bne.n	1312c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   13158:	f7ff ff5c 	bl	13014 <bt_setup_random_id_addr>
		if (err) {
   1315c:	4604      	mov	r4, r0
   1315e:	2800      	cmp	r0, #0
   13160:	d1ec      	bne.n	1313c <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   13162:	1c70      	adds	r0, r6, #1
   13164:	f7ff fc1c 	bl	129a0 <set_random_address>
		if (err) {
   13168:	4604      	mov	r4, r0
   1316a:	2800      	cmp	r0, #0
   1316c:	d0de      	beq.n	1312c <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   1316e:	4b04      	ldr	r3, [pc, #16]	; (13180 <bt_id_init+0x5c>)
   13170:	e7e5      	b.n	1313e <bt_id_init+0x1a>
   13172:	bf00      	nop
   13174:	20008000 	.word	0x20008000
   13178:	0002e04f 	.word	0x0002e04f
   1317c:	0002a758 	.word	0x0002a758
   13180:	0002e06e 	.word	0x0002e06e

00013184 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13188:	460c      	mov	r4, r1
   1318a:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1318c:	2120      	movs	r1, #32
{
   1318e:	4692      	mov	sl, r2
   13190:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13192:	f7fe fcd5 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   13196:	4605      	mov	r5, r0
   13198:	2800      	cmp	r0, #0
   1319a:	d05a      	beq.n	13252 <hci_set_ad+0xce>
   1319c:	2120      	movs	r1, #32
   1319e:	300c      	adds	r0, #12
   131a0:	f006 fa0c 	bl	195bc <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   131a4:	2220      	movs	r2, #32
   131a6:	4681      	mov	r9, r0
   131a8:	2100      	movs	r1, #0
   131aa:	f016 fb58 	bl	2985e <memset>
	uint8_t set_data_len = 0;
   131ae:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   131b0:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   131b4:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   131b8:	2300      	movs	r3, #0
   131ba:	f8d4 8000 	ldr.w	r8, [r4]
   131be:	6862      	ldr	r2, [r4, #4]
   131c0:	4293      	cmp	r3, r2
   131c2:	d30c      	bcc.n	131de <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   131c4:	3408      	adds	r4, #8
   131c6:	45a2      	cmp	sl, r4
   131c8:	d1f6      	bne.n	131b8 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   131ca:	2200      	movs	r2, #0
   131cc:	4629      	mov	r1, r5
   131ce:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   131d0:	f889 6000 	strb.w	r6, [r9]
}
   131d4:	b007      	add	sp, #28
   131d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   131da:	f7fe bcff 	b.w	11bdc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   131de:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   131e2:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   131e4:	1811      	adds	r1, r2, r0
   131e6:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   131e8:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   131ec:	d91a      	bls.n	13224 <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   131ee:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   131f2:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   131f6:	d101      	bne.n	131fc <hci_set_ad+0x78>
   131f8:	2a00      	cmp	r2, #0
   131fa:	dc11      	bgt.n	13220 <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   131fc:	4b16      	ldr	r3, [pc, #88]	; (13258 <hci_set_ad+0xd4>)
   131fe:	2201      	movs	r2, #1
   13200:	9302      	str	r3, [sp, #8]
   13202:	2300      	movs	r3, #0
   13204:	4915      	ldr	r1, [pc, #84]	; (1325c <hci_set_ad+0xd8>)
   13206:	4618      	mov	r0, r3
   13208:	e9cd 3300 	strd	r3, r3, [sp]
   1320c:	f013 f8bc 	bl	26388 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   13210:	4628      	mov	r0, r5
   13212:	f006 f8b1 	bl	19378 <net_buf_unref>
					return -EINVAL;
   13216:	f06f 0015 	mvn.w	r0, #21
}
   1321a:	b007      	add	sp, #28
   1321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13220:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13224:	b2d7      	uxtb	r7, r2
   13226:	1c79      	adds	r1, r7, #1
   13228:	f80b 1006 	strb.w	r1, [fp, r6]
   1322c:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1322e:	b2c9      	uxtb	r1, r1
   13230:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13234:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13238:	fa5b f080 	uxtab	r0, fp, r0
   1323c:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   1323e:	3702      	adds	r7, #2
   13240:	f016 fad3 	bl	297ea <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13244:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   13246:	4437      	add	r7, r6
   13248:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1324a:	3301      	adds	r3, #1
   1324c:	f108 0808 	add.w	r8, r8, #8
   13250:	e7b5      	b.n	131be <hci_set_ad+0x3a>
		return -ENOBUFS;
   13252:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13256:	e7e0      	b.n	1321a <hci_set_ad+0x96>
   13258:	0002e091 	.word	0x0002e091
   1325c:	0002a710 	.word	0x0002a710

00013260 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13260:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13262:	4605      	mov	r5, r0
   13264:	4b16      	ldr	r3, [pc, #88]	; (132c0 <le_adv_start_add_conn+0x60>)
   13266:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   1326a:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   1326c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13270:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   13272:	2207      	movs	r2, #7
   13274:	4628      	mov	r0, r5
   13276:	4913      	ldr	r1, [pc, #76]	; (132c4 <le_adv_start_add_conn+0x64>)
   13278:	f016 faa7 	bl	297ca <memcmp>
   1327c:	4603      	mov	r3, r0
   1327e:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13280:	b96b      	cbnz	r3, 1329e <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13282:	4911      	ldr	r1, [pc, #68]	; (132c8 <le_adv_start_add_conn+0x68>)
   13284:	f001 fa0c 	bl	146a0 <bt_conn_add_le>
		if (!conn) {
   13288:	4604      	mov	r4, r0
   1328a:	b910      	cbnz	r0, 13292 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   1328c:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   13290:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   13292:	2104      	movs	r1, #4
   13294:	f000 ff8e 	bl	141b4 <bt_conn_set_state>
		return 0;
   13298:	2000      	movs	r0, #0
		*out_conn = conn;
   1329a:	6034      	str	r4, [r6, #0]
   1329c:	e7f8      	b.n	13290 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1329e:	4629      	mov	r1, r5
   132a0:	f001 fa36 	bl	14710 <bt_conn_exists_le>
   132a4:	b940      	cbnz	r0, 132b8 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   132a6:	7820      	ldrb	r0, [r4, #0]
   132a8:	4629      	mov	r1, r5
   132aa:	f001 f9f9 	bl	146a0 <bt_conn_add_le>
	if (!conn) {
   132ae:	4604      	mov	r4, r0
   132b0:	2800      	cmp	r0, #0
   132b2:	d0eb      	beq.n	1328c <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   132b4:	2105      	movs	r1, #5
   132b6:	e7ed      	b.n	13294 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   132b8:	f06f 0015 	mvn.w	r0, #21
   132bc:	e7e8      	b.n	13290 <le_adv_start_add_conn+0x30>
   132be:	bf00      	nop
   132c0:	20008000 	.word	0x20008000
   132c4:	0002d679 	.word	0x0002d679
   132c8:	0002d672 	.word	0x0002d672

000132cc <valid_adv_param>:
{
   132cc:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   132ce:	6843      	ldr	r3, [r0, #4]
{
   132d0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   132d2:	0558      	lsls	r0, r3, #21
   132d4:	d501      	bpl.n	132da <valid_adv_param+0xe>
		return false;
   132d6:	2000      	movs	r0, #0
}
   132d8:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   132da:	6922      	ldr	r2, [r4, #16]
   132dc:	b10a      	cbz	r2, 132e2 <valid_adv_param+0x16>
   132de:	07d9      	lsls	r1, r3, #31
   132e0:	d5f9      	bpl.n	132d6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   132e2:	4d19      	ldr	r5, [pc, #100]	; (13348 <valid_adv_param+0x7c>)
   132e4:	7820      	ldrb	r0, [r4, #0]
   132e6:	79eb      	ldrb	r3, [r5, #7]
   132e8:	4283      	cmp	r3, r0
   132ea:	d9f4      	bls.n	132d6 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   132ec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   132f0:	2207      	movs	r2, #7
   132f2:	4916      	ldr	r1, [pc, #88]	; (1334c <valid_adv_param+0x80>)
   132f4:	4428      	add	r0, r5
   132f6:	f016 fa68 	bl	297ca <memcmp>
	if (param->id >= bt_dev.id_count ||
   132fa:	2800      	cmp	r0, #0
   132fc:	d0eb      	beq.n	132d6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   132fe:	6860      	ldr	r0, [r4, #4]
   13300:	07c2      	lsls	r2, r0, #31
   13302:	d406      	bmi.n	13312 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   13304:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   13308:	2b08      	cmp	r3, #8
   1330a:	d802      	bhi.n	13312 <valid_adv_param+0x46>
   1330c:	68a3      	ldr	r3, [r4, #8]
   1330e:	2b9f      	cmp	r3, #159	; 0x9f
   13310:	d9e1      	bls.n	132d6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   13312:	f010 0f30 	tst.w	r0, #48	; 0x30
   13316:	d002      	beq.n	1331e <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   13318:	6923      	ldr	r3, [r4, #16]
   1331a:	2b00      	cmp	r3, #0
   1331c:	d0db      	beq.n	132d6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1331e:	06c3      	lsls	r3, r0, #27
   13320:	d401      	bmi.n	13326 <valid_adv_param+0x5a>
   13322:	6923      	ldr	r3, [r4, #16]
   13324:	b943      	cbnz	r3, 13338 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   13326:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1332a:	429a      	cmp	r2, r3
   1332c:	d8d3      	bhi.n	132d6 <valid_adv_param+0xa>
   1332e:	2a1f      	cmp	r2, #31
   13330:	d9d1      	bls.n	132d6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   13332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13336:	d8ce      	bhi.n	132d6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   13338:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1333c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   13340:	bf18      	it	ne
   13342:	2001      	movne	r0, #1
   13344:	e7c8      	b.n	132d8 <valid_adv_param+0xc>
   13346:	bf00      	nop
   13348:	20008000 	.word	0x20008000
   1334c:	0002d679 	.word	0x0002d679

00013350 <bt_le_ext_adv_foreach>:
{
   13350:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   13352:	4801      	ldr	r0, [pc, #4]	; (13358 <bt_le_ext_adv_foreach+0x8>)
   13354:	4718      	bx	r3
   13356:	bf00      	nop
   13358:	20008018 	.word	0x20008018

0001335c <bt_le_adv_lookup_legacy>:
}
   1335c:	4800      	ldr	r0, [pc, #0]	; (13360 <bt_le_adv_lookup_legacy+0x4>)
   1335e:	4770      	bx	lr
   13360:	20008018 	.word	0x20008018

00013364 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   13364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13368:	b08d      	sub	sp, #52	; 0x34
   1336a:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   1336c:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1336e:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   13372:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   13374:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13378:	4890      	ldr	r0, [pc, #576]	; (135bc <bt_le_adv_start_legacy+0x258>)
   1337a:	bf18      	it	ne
   1337c:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   1337e:	9307      	str	r3, [sp, #28]
   13380:	f012 ffed 	bl	2635e <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13384:	0747      	lsls	r7, r0, #29
{
   13386:	460d      	mov	r5, r1
   13388:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1338a:	f140 810d 	bpl.w	135a8 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1338e:	4608      	mov	r0, r1
   13390:	f7ff ff9c 	bl	132cc <valid_adv_param>
   13394:	b928      	cbnz	r0, 133a2 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   13396:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1339a:	4620      	mov	r0, r4
   1339c:	b00d      	add	sp, #52	; 0x34
   1339e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   133a2:	4628      	mov	r0, r5
   133a4:	f012 ffb8 	bl	26318 <bt_id_adv_random_addr_check>
   133a8:	4681      	mov	r9, r0
   133aa:	2800      	cmp	r0, #0
   133ac:	d0f3      	beq.n	13396 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   133ae:	f106 0810 	add.w	r8, r6, #16
   133b2:	4640      	mov	r0, r8
   133b4:	f012 ffd3 	bl	2635e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   133b8:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   133bc:	0600      	lsls	r0, r0, #24
   133be:	f100 80f6 	bmi.w	135ae <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   133c2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   133c6:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   133ca:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   133cc:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   133ce:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   133d2:	68eb      	ldr	r3, [r5, #12]
   133d4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   133d8:	f012 ffb2 	bl	26340 <get_adv_channel_map>
	if (adv->id != param->id) {
   133dc:	7832      	ldrb	r2, [r6, #0]
   133de:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   133e0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   133e4:	429a      	cmp	r2, r3
   133e6:	d004      	beq.n	133f2 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   133e8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   133ec:	4873      	ldr	r0, [pc, #460]	; (135bc <bt_le_adv_start_legacy+0x258>)
   133ee:	f012 ffb9 	bl	26364 <atomic_and>
	adv->id = param->id;
   133f2:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   133f4:	4a72      	ldr	r2, [pc, #456]	; (135c0 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   133f6:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   133f8:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   133fc:	4630      	mov	r0, r6
   133fe:	4622      	mov	r2, r4
   13400:	6869      	ldr	r1, [r5, #4]
   13402:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   13406:	f7ff fe33 	bl	13070 <bt_id_set_adv_own_addr>
	if (err) {
   1340a:	4604      	mov	r4, r0
   1340c:	2800      	cmp	r0, #0
   1340e:	d1c4      	bne.n	1339a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   13410:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   13414:	f1ba 0f00 	cmp.w	sl, #0
   13418:	d013      	beq.n	13442 <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1341a:	6929      	ldr	r1, [r5, #16]
   1341c:	f012 ffad 	bl	2637a <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   13420:	4628      	mov	r0, r5
   13422:	f013 f845 	bl	264b0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13426:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   13428:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1342a:	07d9      	lsls	r1, r3, #31
   1342c:	d416      	bmi.n	1345c <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1342e:	059b      	lsls	r3, r3, #22
   13430:	d403      	bmi.n	1343a <bt_le_adv_start_legacy+0xd6>
   13432:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13434:	b90b      	cbnz	r3, 1343a <bt_le_adv_start_legacy+0xd6>
   13436:	2f02      	cmp	r7, #2
   13438:	d159      	bne.n	134ee <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1343a:	2302      	movs	r3, #2
   1343c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   13440:	e019      	b.n	13476 <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   13442:	4960      	ldr	r1, [pc, #384]	; (135c4 <bt_le_adv_start_legacy+0x260>)
   13444:	f012 ff99 	bl	2637a <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   13448:	4628      	mov	r0, r5
   1344a:	f013 f831 	bl	264b0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1344e:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   13450:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13452:	07da      	lsls	r2, r3, #31
   13454:	d5eb      	bpl.n	1342e <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   13456:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1345a:	e00c      	b.n	13476 <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1345c:	f013 0f10 	tst.w	r3, #16
   13460:	bf0c      	ite	eq
   13462:	2301      	moveq	r3, #1
   13464:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   13466:	6929      	ldr	r1, [r5, #16]
   13468:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1346c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   13470:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   13472:	f012 ff82 	bl	2637a <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   13476:	210f      	movs	r1, #15
   13478:	f242 0006 	movw	r0, #8198	; 0x2006
   1347c:	f7fe fb60 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   13480:	4604      	mov	r4, r0
   13482:	2800      	cmp	r0, #0
   13484:	f000 8096 	beq.w	135b4 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13488:	220f      	movs	r2, #15
   1348a:	a908      	add	r1, sp, #32
   1348c:	300c      	adds	r0, #12
   1348e:	f014 fc34 	bl	27cfa <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   13492:	4621      	mov	r1, r4
   13494:	2200      	movs	r2, #0
   13496:	f242 0006 	movw	r0, #8198	; 0x2006
   1349a:	f7fe fb9f 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   1349e:	4604      	mov	r4, r0
   134a0:	2800      	cmp	r0, #0
   134a2:	f47f af7a 	bne.w	1339a <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   134a6:	f1ba 0f00 	cmp.w	sl, #0
   134aa:	d026      	beq.n	134fa <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   134ac:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   134ae:	07dc      	lsls	r4, r3, #31
   134b0:	d431      	bmi.n	13516 <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   134b2:	4630      	mov	r0, r6
   134b4:	2101      	movs	r1, #1
   134b6:	f013 f80b 	bl	264d0 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   134ba:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   134bc:	4604      	mov	r4, r0
   134be:	2800      	cmp	r0, #0
   134c0:	d06a      	beq.n	13598 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   134c2:	2500      	movs	r5, #0
   134c4:	4b40      	ldr	r3, [pc, #256]	; (135c8 <bt_le_adv_start_legacy+0x264>)
   134c6:	2201      	movs	r2, #1
   134c8:	9302      	str	r3, [sp, #8]
   134ca:	4628      	mov	r0, r5
   134cc:	462b      	mov	r3, r5
   134ce:	e9cd 5500 	strd	r5, r5, [sp]
   134d2:	493e      	ldr	r1, [pc, #248]	; (135cc <bt_le_adv_start_legacy+0x268>)
   134d4:	f012 ff58 	bl	26388 <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   134d8:	2e00      	cmp	r6, #0
   134da:	f43f af5e 	beq.w	1339a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   134de:	4630      	mov	r0, r6
   134e0:	4629      	mov	r1, r5
   134e2:	f000 fe67 	bl	141b4 <bt_conn_set_state>
			bt_conn_unref(conn);
   134e6:	4630      	mov	r0, r6
   134e8:	f000 fe2c 	bl	14144 <bt_conn_unref>
   134ec:	e755      	b.n	1339a <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   134ee:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   134f0:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   134f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   134f8:	e7bd      	b.n	13476 <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   134fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   134fc:	4659      	mov	r1, fp
   134fe:	9300      	str	r3, [sp, #0]
   13500:	4630      	mov	r0, r6
   13502:	e9cd 9701 	strd	r9, r7, [sp, #4]
   13506:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13508:	9a05      	ldr	r2, [sp, #20]
   1350a:	f012 ff5f 	bl	263cc <le_adv_update.constprop.0>
		if (err) {
   1350e:	4604      	mov	r4, r0
   13510:	2800      	cmp	r0, #0
   13512:	d0cb      	beq.n	134ac <bt_le_adv_start_legacy+0x148>
   13514:	e741      	b.n	1339a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   13516:	4630      	mov	r0, r6
   13518:	a907      	add	r1, sp, #28
   1351a:	f7ff fea1 	bl	13260 <le_adv_start_add_conn>
		if (err) {
   1351e:	4604      	mov	r4, r0
   13520:	2800      	cmp	r0, #0
   13522:	d0c6      	beq.n	134b2 <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   13524:	f110 0f0c 	cmn.w	r0, #12
   13528:	f47f af37 	bne.w	1339a <bt_le_adv_start_legacy+0x36>
   1352c:	f1ba 0f00 	cmp.w	sl, #0
   13530:	f47f af33 	bne.w	1339a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   13534:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   13536:	0798      	lsls	r0, r3, #30
   13538:	f53f af2f 	bmi.w	1339a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1353c:	686c      	ldr	r4, [r5, #4]
   1353e:	f084 0402 	eor.w	r4, r4, #2
   13542:	f3c4 0440 	ubfx	r4, r4, #1, #1
   13546:	f004 0201 	and.w	r2, r4, #1
   1354a:	210e      	movs	r1, #14
   1354c:	4640      	mov	r0, r8
   1354e:	f012 ff2a 	bl	263a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   13552:	1e7b      	subs	r3, r7, #1
   13554:	425a      	negs	r2, r3
   13556:	415a      	adcs	r2, r3
   13558:	2108      	movs	r1, #8
   1355a:	4640      	mov	r0, r8
   1355c:	f012 ff23 	bl	263a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   13560:	1eb9      	subs	r1, r7, #2
   13562:	424a      	negs	r2, r1
   13564:	414a      	adcs	r2, r1
   13566:	4640      	mov	r0, r8
   13568:	2109      	movs	r1, #9
   1356a:	f012 ff1c 	bl	263a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1356e:	686a      	ldr	r2, [r5, #4]
   13570:	210a      	movs	r1, #10
   13572:	4640      	mov	r0, r8
   13574:	f002 0201 	and.w	r2, r2, #1
   13578:	f012 ff15 	bl	263a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1357c:	464a      	mov	r2, r9
   1357e:	210b      	movs	r1, #11
   13580:	4640      	mov	r0, r8
   13582:	f012 ff10 	bl	263a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   13586:	686a      	ldr	r2, [r5, #4]
   13588:	210d      	movs	r1, #13
   1358a:	4640      	mov	r0, r8
   1358c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13590:	f012 ff09 	bl	263a6 <atomic_set_bit_to>
	return 0;
   13594:	2400      	movs	r4, #0
   13596:	e700      	b.n	1339a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13598:	b116      	cbz	r6, 135a0 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   1359a:	4630      	mov	r0, r6
   1359c:	f000 fdd2 	bl	14144 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   135a0:	f1ba 0f00 	cmp.w	sl, #0
   135a4:	d1cf      	bne.n	13546 <bt_le_adv_start_legacy+0x1e2>
   135a6:	e7c9      	b.n	1353c <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   135a8:	f06f 040a 	mvn.w	r4, #10
   135ac:	e6f5      	b.n	1339a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   135ae:	f06f 0477 	mvn.w	r4, #119	; 0x77
   135b2:	e6f2      	b.n	1339a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   135b4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   135b8:	e6ef      	b.n	1339a <bt_le_adv_start_legacy+0x36>
   135ba:	bf00      	nop
   135bc:	200080cc 	.word	0x200080cc
   135c0:	20008000 	.word	0x20008000
   135c4:	0002d679 	.word	0x0002d679
   135c8:	0002e0aa 	.word	0x0002e0aa
   135cc:	0002a710 	.word	0x0002a710

000135d0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   135d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   135d2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   135d4:	9a06      	ldr	r2, [sp, #24]
{
   135d6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   135d8:	e9cd 3200 	strd	r3, r2, [sp]
   135dc:	462b      	mov	r3, r5
   135de:	460a      	mov	r2, r1
   135e0:	4601      	mov	r1, r0
   135e2:	4811      	ldr	r0, [pc, #68]	; (13628 <bt_le_adv_start+0x58>)
   135e4:	f7ff febe 	bl	13364 <bt_le_adv_start_legacy>
   135e8:	4621      	mov	r1, r4
   135ea:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   135ec:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   135ee:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   135f2:	429d      	cmp	r5, r3
   135f4:	d102      	bne.n	135fc <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   135f6:	4630      	mov	r0, r6
   135f8:	b002      	add	sp, #8
   135fa:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   135fc:	880a      	ldrh	r2, [r1, #0]
   135fe:	4282      	cmp	r2, r0
   13600:	d104      	bne.n	1360c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   13602:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   13604:	b112      	cbz	r2, 1360c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   13606:	7812      	ldrb	r2, [r2, #0]
   13608:	07d2      	lsls	r2, r2, #31
   1360a:	d402      	bmi.n	13612 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   1360c:	3301      	adds	r3, #1
   1360e:	3108      	adds	r1, #8
   13610:	e7ef      	b.n	135f2 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   13612:	4906      	ldr	r1, [pc, #24]	; (1362c <bt_le_adv_start+0x5c>)
   13614:	4806      	ldr	r0, [pc, #24]	; (13630 <bt_le_adv_start+0x60>)
   13616:	f00d f891 	bl	2073c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1361a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1361e:	2300      	movs	r3, #0
   13620:	4803      	ldr	r0, [pc, #12]	; (13630 <bt_le_adv_start+0x60>)
   13622:	f00d f9a7 	bl	20974 <k_work_reschedule>
   13626:	e7e6      	b.n	135f6 <bt_le_adv_start+0x26>
   13628:	20008018 	.word	0x20008018
   1362c:	000136b9 	.word	0x000136b9
   13630:	20008030 	.word	0x20008030

00013634 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   13634:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   13636:	481a      	ldr	r0, [pc, #104]	; (136a0 <bt_le_adv_stop+0x6c>)
   13638:	f012 ff71 	bl	2651e <bt_le_lim_adv_cancel_timeout>
   1363c:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   13640:	4818      	ldr	r0, [pc, #96]	; (136a4 <bt_le_adv_stop+0x70>)
   13642:	f012 fe8f 	bl	26364 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13646:	4817      	ldr	r0, [pc, #92]	; (136a4 <bt_le_adv_stop+0x70>)
   13648:	f012 fe89 	bl	2635e <atomic_get>
   1364c:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1364e:	061a      	lsls	r2, r3, #24
   13650:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   13654:	d523      	bpl.n	1369e <bt_le_adv_stop+0x6a>
   13656:	4813      	ldr	r0, [pc, #76]	; (136a4 <bt_le_adv_stop+0x70>)
   13658:	f012 fe81 	bl	2635e <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1365c:	0543      	lsls	r3, r0, #21
   1365e:	d514      	bpl.n	1368a <bt_le_adv_stop+0x56>
   13660:	2207      	movs	r2, #7
   13662:	4911      	ldr	r1, [pc, #68]	; (136a8 <bt_le_adv_stop+0x74>)
   13664:	4811      	ldr	r0, [pc, #68]	; (136ac <bt_le_adv_stop+0x78>)
   13666:	f016 f8b0 	bl	297ca <memcmp>
   1366a:	4b11      	ldr	r3, [pc, #68]	; (136b0 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1366c:	b998      	cbnz	r0, 13696 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1366e:	2204      	movs	r2, #4
   13670:	4910      	ldr	r1, [pc, #64]	; (136b4 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   13672:	7e18      	ldrb	r0, [r3, #24]
   13674:	f001 f872 	bl	1475c <bt_conn_lookup_state_le>
   13678:	4604      	mov	r4, r0
	if (conn) {
   1367a:	b130      	cbz	r0, 1368a <bt_le_adv_stop+0x56>
		conn->err = status;
   1367c:	2100      	movs	r1, #0
   1367e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13680:	f000 fd98 	bl	141b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   13684:	4620      	mov	r0, r4
   13686:	f000 fd5d 	bl	14144 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1368a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1368e:	2100      	movs	r1, #0
   13690:	4803      	ldr	r0, [pc, #12]	; (136a0 <bt_le_adv_stop+0x6c>)
   13692:	f012 bf1d 	b.w	264d0 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   13696:	2205      	movs	r2, #5
   13698:	f103 0121 	add.w	r1, r3, #33	; 0x21
   1369c:	e7e9      	b.n	13672 <bt_le_adv_stop+0x3e>
}
   1369e:	bd10      	pop	{r4, pc}
   136a0:	20008018 	.word	0x20008018
   136a4:	20008028 	.word	0x20008028
   136a8:	0002d679 	.word	0x0002d679
   136ac:	20008021 	.word	0x20008021
   136b0:	20008000 	.word	0x20008000
   136b4:	0002d672 	.word	0x0002d672

000136b8 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   136b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   136ba:	f7ff ffbb 	bl	13634 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   136be:	4b07      	ldr	r3, [pc, #28]	; (136dc <adv_timeout+0x24>)
   136c0:	9003      	str	r0, [sp, #12]
   136c2:	9302      	str	r3, [sp, #8]
   136c4:	2300      	movs	r3, #0
   136c6:	2202      	movs	r2, #2
   136c8:	4618      	mov	r0, r3
   136ca:	e9cd 3300 	strd	r3, r3, [sp]
   136ce:	4904      	ldr	r1, [pc, #16]	; (136e0 <adv_timeout+0x28>)
   136d0:	f012 fe5a 	bl	26388 <z_log_msg_runtime_create.constprop.0>
}
   136d4:	b005      	add	sp, #20
   136d6:	f85d fb04 	ldr.w	pc, [sp], #4
   136da:	bf00      	nop
   136dc:	0002e0c5 	.word	0x0002e0c5
   136e0:	0002a710 	.word	0x0002a710

000136e4 <bt_le_adv_resume>:
{
   136e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   136e6:	4c1e      	ldr	r4, [pc, #120]	; (13760 <bt_le_adv_resume+0x7c>)
   136e8:	4620      	mov	r0, r4
   136ea:	f012 fe38 	bl	2635e <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   136ee:	0440      	lsls	r0, r0, #17
   136f0:	d534      	bpl.n	1375c <bt_le_adv_resume+0x78>
   136f2:	4620      	mov	r0, r4
   136f4:	f012 fe33 	bl	2635e <atomic_get>
   136f8:	0601      	lsls	r1, r0, #24
   136fa:	d42f      	bmi.n	1375c <bt_le_adv_resume+0x78>
   136fc:	4620      	mov	r0, r4
   136fe:	f012 fe2e 	bl	2635e <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   13702:	0542      	lsls	r2, r0, #21
   13704:	d52a      	bpl.n	1375c <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   13706:	a901      	add	r1, sp, #4
   13708:	f1a4 0010 	sub.w	r0, r4, #16
   1370c:	f7ff fda8 	bl	13260 <le_adv_start_add_conn>
	if (err) {
   13710:	4605      	mov	r5, r0
   13712:	bb18      	cbnz	r0, 1375c <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   13714:	2101      	movs	r1, #1
   13716:	f1a4 0010 	sub.w	r0, r4, #16
   1371a:	f012 fed9 	bl	264d0 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1371e:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   13720:	b928      	cbnz	r0, 1372e <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   13722:	4630      	mov	r0, r6
}
   13724:	b002      	add	sp, #8
   13726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1372a:	f000 bd0b 	b.w	14144 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1372e:	4629      	mov	r1, r5
   13730:	4630      	mov	r0, r6
   13732:	f000 fd3f 	bl	141b4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13736:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1373a:	4620      	mov	r0, r4
   1373c:	f012 fe12 	bl	26364 <atomic_and>
   13740:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   13742:	4630      	mov	r0, r6
   13744:	f000 fcfe 	bl	14144 <bt_conn_unref>
	if (persist_paused) {
   13748:	046b      	lsls	r3, r5, #17
   1374a:	d507      	bpl.n	1375c <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1374c:	e8d4 3fef 	ldaex	r3, [r4]
   13750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   13754:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13758:	2a00      	cmp	r2, #0
   1375a:	d1f7      	bne.n	1374c <bt_le_adv_resume+0x68>
}
   1375c:	b002      	add	sp, #8
   1375e:	bd70      	pop	{r4, r5, r6, pc}
   13760:	20008028 	.word	0x20008028

00013764 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   13764:	b530      	push	{r4, r5, lr}
   13766:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   13768:	2120      	movs	r1, #32
   1376a:	a806      	add	r0, sp, #24
   1376c:	f7fe fad4 	bl	11d18 <bt_hci_le_rand>
	if (ret) {
   13770:	4604      	mov	r4, r0
   13772:	bb08      	cbnz	r0, 137b8 <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   13774:	f015 ff2e 	bl	295d4 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   13778:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1377c:	fba0 2305 	umull	r2, r3, r0, r5
   13780:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   13784:	2308      	movs	r3, #8
   13786:	0bd2      	lsrs	r2, r2, #15
   13788:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   1378c:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1378e:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   13792:	9300      	str	r3, [sp, #0]
   13794:	2220      	movs	r2, #32
   13796:	480a      	ldr	r0, [pc, #40]	; (137c0 <prng_reseed.constprop.0+0x5c>)
   13798:	ab04      	add	r3, sp, #16
   1379a:	a906      	add	r1, sp, #24
   1379c:	f012 fa8d 	bl	25cba <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   137a0:	b950      	cbnz	r0, 137b8 <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   137a2:	4b08      	ldr	r3, [pc, #32]	; (137c4 <prng_reseed.constprop.0+0x60>)
   137a4:	9400      	str	r4, [sp, #0]
   137a6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   137aa:	2201      	movs	r2, #1
   137ac:	4623      	mov	r3, r4
   137ae:	4906      	ldr	r1, [pc, #24]	; (137c8 <prng_reseed.constprop.0+0x64>)
   137b0:	f012 feb8 	bl	26524 <z_log_msg_runtime_create.constprop.0>
   137b4:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   137b8:	4620      	mov	r0, r4
   137ba:	b00f      	add	sp, #60	; 0x3c
   137bc:	bd30      	pop	{r4, r5, pc}
   137be:	bf00      	nop
   137c0:	20009760 	.word	0x20009760
   137c4:	0002e0eb 	.word	0x0002e0eb
   137c8:	0002a750 	.word	0x0002a750

000137cc <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   137cc:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   137ce:	b508      	push	{r3, lr}
   137d0:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   137d4:	d910      	bls.n	137f8 <sys_memcpy_swap.constprop.0+0x2c>
   137d6:	4298      	cmp	r0, r3
   137d8:	d213      	bcs.n	13802 <sys_memcpy_swap.constprop.0+0x36>
   137da:	490e      	ldr	r1, [pc, #56]	; (13814 <sys_memcpy_swap.constprop.0+0x48>)
   137dc:	f240 2315 	movw	r3, #533	; 0x215
   137e0:	4a0d      	ldr	r2, [pc, #52]	; (13818 <sys_memcpy_swap.constprop.0+0x4c>)
   137e2:	480e      	ldr	r0, [pc, #56]	; (1381c <sys_memcpy_swap.constprop.0+0x50>)
   137e4:	f011 fa9b 	bl	24d1e <assert_print>
   137e8:	480d      	ldr	r0, [pc, #52]	; (13820 <sys_memcpy_swap.constprop.0+0x54>)
   137ea:	f011 fa98 	bl	24d1e <assert_print>
   137ee:	f240 2115 	movw	r1, #533	; 0x215
   137f2:	4809      	ldr	r0, [pc, #36]	; (13818 <sys_memcpy_swap.constprop.0+0x4c>)
   137f4:	f011 fa8c 	bl	24d10 <assert_post_action>
   137f8:	d0ef      	beq.n	137da <sys_memcpy_swap.constprop.0+0xe>
   137fa:	f100 0210 	add.w	r2, r0, #16
   137fe:	4291      	cmp	r1, r2
   13800:	e7ea      	b.n	137d8 <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   13802:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   13804:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   13808:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   1380a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1380e:	d1f9      	bne.n	13804 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   13810:	bd08      	pop	{r3, pc}
   13812:	bf00      	nop
   13814:	0002e134 	.word	0x0002e134
   13818:	0002e102 	.word	0x0002e102
   1381c:	0002b6e9 	.word	0x0002b6e9
   13820:	0002e18b 	.word	0x0002e18b

00013824 <prng_init>:

int prng_init(void)
{
   13824:	b510      	push	{r4, lr}
   13826:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   13828:	2108      	movs	r1, #8
   1382a:	a804      	add	r0, sp, #16
   1382c:	f7fe fa74 	bl	11d18 <bt_hci_le_rand>
	if (ret) {
   13830:	4604      	mov	r4, r0
   13832:	b980      	cbnz	r0, 13856 <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   13834:	2208      	movs	r2, #8
   13836:	480b      	ldr	r0, [pc, #44]	; (13864 <prng_init+0x40>)
   13838:	a904      	add	r1, sp, #16
   1383a:	f012 fa1e 	bl	25c7a <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1383e:	b968      	cbnz	r0, 1385c <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   13840:	4b09      	ldr	r3, [pc, #36]	; (13868 <prng_init+0x44>)
   13842:	9400      	str	r4, [sp, #0]
   13844:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13848:	2201      	movs	r2, #1
   1384a:	4623      	mov	r3, r4
   1384c:	4907      	ldr	r1, [pc, #28]	; (1386c <prng_init+0x48>)
   1384e:	f012 fe69 	bl	26524 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   13852:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   13856:	4620      	mov	r0, r4
   13858:	b006      	add	sp, #24
   1385a:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1385c:	f7ff ff82 	bl	13764 <prng_reseed.constprop.0>
   13860:	4604      	mov	r4, r0
   13862:	e7f8      	b.n	13856 <prng_init+0x32>
   13864:	20009760 	.word	0x20009760
   13868:	0002e1bd 	.word	0x0002e1bd
   1386c:	0002a750 	.word	0x0002a750

00013870 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   13870:	b538      	push	{r3, r4, r5, lr}
   13872:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   13874:	4604      	mov	r4, r0
   13876:	b198      	cbz	r0, 138a0 <bt_rand+0x30>
   13878:	b191      	cbz	r1, 138a0 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1387a:	4a0b      	ldr	r2, [pc, #44]	; (138a8 <bt_rand+0x38>)
   1387c:	f012 fa36 	bl	25cec <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   13880:	1c43      	adds	r3, r0, #1
   13882:	d107      	bne.n	13894 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   13884:	f7ff ff6e 	bl	13764 <prng_reseed.constprop.0>
		if (ret) {
   13888:	b948      	cbnz	r0, 1389e <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1388a:	4629      	mov	r1, r5
   1388c:	4620      	mov	r0, r4
   1388e:	4a06      	ldr	r2, [pc, #24]	; (138a8 <bt_rand+0x38>)
   13890:	f012 fa2c 	bl	25cec <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   13894:	2801      	cmp	r0, #1
   13896:	bf0c      	ite	eq
   13898:	2000      	moveq	r0, #0
   1389a:	f06f 0004 	mvnne.w	r0, #4
}
   1389e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   138a0:	f06f 0015 	mvn.w	r0, #21
   138a4:	e7fb      	b.n	1389e <bt_rand+0x2e>
   138a6:	bf00      	nop
   138a8:	20009760 	.word	0x20009760

000138ac <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   138ac:	2240      	movs	r2, #64	; 0x40
{
   138ae:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   138b0:	4903      	ldr	r1, [pc, #12]	; (138c0 <bt_pub_key_is_debug+0x14>)
   138b2:	f015 ff8a 	bl	297ca <memcmp>
}
   138b6:	fab0 f080 	clz	r0, r0
   138ba:	0940      	lsrs	r0, r0, #5
   138bc:	bd08      	pop	{r3, pc}
   138be:	bf00      	nop
   138c0:	0002e26d 	.word	0x0002e26d

000138c4 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   138c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   138c6:	4b3c      	ldr	r3, [pc, #240]	; (139b8 <bt_pub_key_gen+0xf4>)
{
   138c8:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   138ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   138ce:	f003 0306 	and.w	r3, r3, #6
   138d2:	2b06      	cmp	r3, #6
   138d4:	d00e      	beq.n	138f4 <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   138d6:	4b39      	ldr	r3, [pc, #228]	; (139bc <bt_pub_key_gen+0xf8>)
   138d8:	2202      	movs	r2, #2
   138da:	9302      	str	r3, [sp, #8]
   138dc:	2300      	movs	r3, #0
   138de:	4938      	ldr	r1, [pc, #224]	; (139c0 <bt_pub_key_gen+0xfc>)
   138e0:	4618      	mov	r0, r3
   138e2:	e9cd 3300 	strd	r3, r3, [sp]
   138e6:	f012 fe59 	bl	2659c <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   138ea:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   138ee:	4628      	mov	r0, r5
   138f0:	b005      	add	sp, #20
   138f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   138f4:	2800      	cmp	r0, #0
   138f6:	d05b      	beq.n	139b0 <bt_pub_key_gen+0xec>
	return list->head;
   138f8:	4e32      	ldr	r6, [pc, #200]	; (139c4 <bt_pub_key_gen+0x100>)
   138fa:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   138fc:	b19a      	cbz	r2, 13926 <bt_pub_key_gen+0x62>
   138fe:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   13900:	4283      	cmp	r3, r0
   13902:	d10c      	bne.n	1391e <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   13904:	4b30      	ldr	r3, [pc, #192]	; (139c8 <bt_pub_key_gen+0x104>)
   13906:	2202      	movs	r2, #2
   13908:	9302      	str	r3, [sp, #8]
   1390a:	2300      	movs	r3, #0
   1390c:	492c      	ldr	r1, [pc, #176]	; (139c0 <bt_pub_key_gen+0xfc>)
   1390e:	4618      	mov	r0, r3
   13910:	e9cd 3300 	strd	r3, r3, [sp]
   13914:	f012 fe42 	bl	2659c <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   13918:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1391c:	e7e7      	b.n	138ee <bt_pub_key_gen+0x2a>
	return node->next;
   1391e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13920:	b10b      	cbz	r3, 13926 <bt_pub_key_gen+0x62>
   13922:	3b04      	subs	r3, #4
   13924:	e7ec      	b.n	13900 <bt_pub_key_gen+0x3c>
	parent->next = child;
   13926:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   13928:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1392a:	1d03      	adds	r3, r0, #4
	list->head = node;
   1392c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1392e:	b902      	cbnz	r2, 13932 <bt_pub_key_gen+0x6e>
	list->tail = node;
   13930:	6073      	str	r3, [r6, #4]
   13932:	4f26      	ldr	r7, [pc, #152]	; (139cc <bt_pub_key_gen+0x108>)
   13934:	e8d7 4fef 	ldaex	r4, [r7]
   13938:	f044 0320 	orr.w	r3, r4, #32
   1393c:	e8c7 3fe2 	stlex	r2, r3, [r7]
   13940:	2a00      	cmp	r2, #0
   13942:	d1f7      	bne.n	13934 <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   13944:	f014 0420 	ands.w	r4, r4, #32
   13948:	d001      	beq.n	1394e <bt_pub_key_gen+0x8a>
	return 0;
   1394a:	2500      	movs	r5, #0
   1394c:	e7cf      	b.n	138ee <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1394e:	e8d7 3fef 	ldaex	r3, [r7]
   13952:	f023 0310 	bic.w	r3, r3, #16
   13956:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1395a:	2a00      	cmp	r2, #0
   1395c:	d1f7      	bne.n	1394e <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1395e:	4622      	mov	r2, r4
   13960:	4621      	mov	r1, r4
   13962:	f242 0025 	movw	r0, #8229	; 0x2025
   13966:	f7fe f939 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   1396a:	4605      	mov	r5, r0
   1396c:	2800      	cmp	r0, #0
   1396e:	d0ec      	beq.n	1394a <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   13970:	4b17      	ldr	r3, [pc, #92]	; (139d0 <bt_pub_key_gen+0x10c>)
   13972:	2201      	movs	r2, #1
   13974:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13978:	4620      	mov	r0, r4
   1397a:	4623      	mov	r3, r4
   1397c:	4910      	ldr	r1, [pc, #64]	; (139c0 <bt_pub_key_gen+0xfc>)
   1397e:	9400      	str	r4, [sp, #0]
   13980:	f012 fe0c 	bl	2659c <z_log_msg_runtime_create.constprop.0>
   13984:	e8d7 3fef 	ldaex	r3, [r7]
   13988:	f023 0320 	bic.w	r3, r3, #32
   1398c:	e8c7 3fe2 	stlex	r2, r3, [r7]
   13990:	2a00      	cmp	r2, #0
   13992:	d1f7      	bne.n	13984 <bt_pub_key_gen+0xc0>
	return list->head;
   13994:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13996:	b13c      	cbz	r4, 139a8 <bt_pub_key_gen+0xe4>
			if (cb->func) {
   13998:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1399c:	3c04      	subs	r4, #4
			if (cb->func) {
   1399e:	b10b      	cbz	r3, 139a4 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   139a0:	2000      	movs	r0, #0
   139a2:	4798      	blx	r3
	return node->next;
   139a4:	6864      	ldr	r4, [r4, #4]
   139a6:	e7f6      	b.n	13996 <bt_pub_key_gen+0xd2>
	list->head = NULL;
   139a8:	2300      	movs	r3, #0
	list->tail = NULL;
   139aa:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   139ae:	e79e      	b.n	138ee <bt_pub_key_gen+0x2a>
		return -EINVAL;
   139b0:	f06f 0515 	mvn.w	r5, #21
   139b4:	e79b      	b.n	138ee <bt_pub_key_gen+0x2a>
   139b6:	bf00      	nop
   139b8:	20008000 	.word	0x20008000
   139bc:	0002e1e6 	.word	0x0002e1e6
   139c0:	0002a730 	.word	0x0002a730
   139c4:	20021058 	.word	0x20021058
   139c8:	0002e205 	.word	0x0002e205
   139cc:	200080cc 	.word	0x200080cc
   139d0:	0002e221 	.word	0x0002e221

000139d4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   139d4:	4b04      	ldr	r3, [pc, #16]	; (139e8 <bt_pub_key_get+0x14>)
   139d6:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   139da:	f013 0f10 	tst.w	r3, #16
}
   139de:	4803      	ldr	r0, [pc, #12]	; (139ec <bt_pub_key_get+0x18>)
   139e0:	bf08      	it	eq
   139e2:	2000      	moveq	r0, #0
   139e4:	4770      	bx	lr
   139e6:	bf00      	nop
   139e8:	200080cc 	.word	0x200080cc
   139ec:	20021e22 	.word	0x20021e22

000139f0 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   139f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   139f2:	4e24      	ldr	r6, [pc, #144]	; (13a84 <bt_dh_key_gen+0x94>)
{
   139f4:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   139f6:	6833      	ldr	r3, [r6, #0]
   139f8:	428b      	cmp	r3, r1
   139fa:	d03c      	beq.n	13a76 <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   139fc:	b123      	cbz	r3, 13a08 <bt_dh_key_gen+0x18>
		return -EBUSY;
   139fe:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   13a02:	4620      	mov	r0, r4
   13a04:	b004      	add	sp, #16
   13a06:	bd70      	pop	{r4, r5, r6, pc}
   13a08:	4b1f      	ldr	r3, [pc, #124]	; (13a88 <bt_dh_key_gen+0x98>)
   13a0a:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   13a0e:	0692      	lsls	r2, r2, #26
   13a10:	d4f5      	bmi.n	139fe <bt_dh_key_gen+0xe>
   13a12:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   13a16:	06db      	lsls	r3, r3, #27
   13a18:	d530      	bpl.n	13a7c <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   13a1a:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   13a1c:	f242 0026 	movw	r0, #8230	; 0x2026
   13a20:	2140      	movs	r1, #64	; 0x40
   13a22:	f7fe f88d 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   13a26:	4605      	mov	r5, r0
   13a28:	b310      	cbz	r0, 13a70 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   13a2a:	2140      	movs	r1, #64	; 0x40
   13a2c:	300c      	adds	r0, #12
   13a2e:	f005 fdc5 	bl	195bc <net_buf_simple_add>
   13a32:	4623      	mov	r3, r4
   13a34:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13a38:	f853 1b04 	ldr.w	r1, [r3], #4
   13a3c:	4293      	cmp	r3, r2
   13a3e:	f840 1b04 	str.w	r1, [r0], #4
   13a42:	d1f9      	bne.n	13a38 <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   13a44:	2200      	movs	r2, #0
   13a46:	4629      	mov	r1, r5
   13a48:	f242 0026 	movw	r0, #8230	; 0x2026
   13a4c:	f7fe f8c6 	bl	11bdc <bt_hci_cmd_send_sync>
	if (err) {
   13a50:	4604      	mov	r4, r0
   13a52:	2800      	cmp	r0, #0
   13a54:	d0d5      	beq.n	13a02 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   13a56:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   13a58:	4a0c      	ldr	r2, [pc, #48]	; (13a8c <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   13a5a:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   13a5c:	4618      	mov	r0, r3
   13a5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13a62:	490b      	ldr	r1, [pc, #44]	; (13a90 <bt_dh_key_gen+0xa0>)
   13a64:	2202      	movs	r2, #2
   13a66:	9403      	str	r4, [sp, #12]
   13a68:	9300      	str	r3, [sp, #0]
   13a6a:	f012 fd97 	bl	2659c <z_log_msg_runtime_create.constprop.0>
		return err;
   13a6e:	e7c8      	b.n	13a02 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   13a70:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13a74:	e7ef      	b.n	13a56 <bt_dh_key_gen+0x66>
		return -EALREADY;
   13a76:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13a7a:	e7c2      	b.n	13a02 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   13a7c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   13a80:	e7bf      	b.n	13a02 <bt_dh_key_gen+0x12>
   13a82:	bf00      	nop
   13a84:	20021054 	.word	0x20021054
   13a88:	200080cc 	.word	0x200080cc
   13a8c:	0002e24b 	.word	0x0002e24b
   13a90:	0002a730 	.word	0x0002a730

00013a94 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   13a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a96:	4b19      	ldr	r3, [pc, #100]	; (13afc <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   13a98:	68c5      	ldr	r5, [r0, #12]
   13a9a:	e8d3 2fef 	ldaex	r2, [r3]
   13a9e:	f022 0220 	bic.w	r2, r2, #32
   13aa2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13aa6:	2900      	cmp	r1, #0
   13aa8:	d1f7      	bne.n	13a9a <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   13aaa:	782a      	ldrb	r2, [r5, #0]
   13aac:	b98a      	cbnz	r2, 13ad2 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   13aae:	4914      	ldr	r1, [pc, #80]	; (13b00 <bt_hci_evt_le_pkey_complete+0x6c>)
   13ab0:	1c6a      	adds	r2, r5, #1
   13ab2:	f105 0041 	add.w	r0, r5, #65	; 0x41
   13ab6:	f852 4b04 	ldr.w	r4, [r2], #4
   13aba:	4282      	cmp	r2, r0
   13abc:	f841 4b04 	str.w	r4, [r1], #4
   13ac0:	d1f9      	bne.n	13ab6 <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13ac2:	e8d3 1fef 	ldaex	r1, [r3]
   13ac6:	f041 0110 	orr.w	r1, r1, #16
   13aca:	e8c3 1fe2 	stlex	r2, r1, [r3]
   13ace:	2a00      	cmp	r2, #0
   13ad0:	d1f7      	bne.n	13ac2 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   13ad2:	4e0c      	ldr	r6, [pc, #48]	; (13b04 <bt_hci_evt_le_pkey_complete+0x70>)
   13ad4:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13ad6:	b16c      	cbz	r4, 13af4 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   13ad8:	4f09      	ldr	r7, [pc, #36]	; (13b00 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13ada:	3c04      	subs	r4, #4
		if (cb->func) {
   13adc:	6823      	ldr	r3, [r4, #0]
   13ade:	b12b      	cbz	r3, 13aec <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   13ae0:	782a      	ldrb	r2, [r5, #0]
   13ae2:	2a00      	cmp	r2, #0
   13ae4:	bf0c      	ite	eq
   13ae6:	4638      	moveq	r0, r7
   13ae8:	2000      	movne	r0, #0
   13aea:	4798      	blx	r3
	return node->next;
   13aec:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13aee:	b10c      	cbz	r4, 13af4 <bt_hci_evt_le_pkey_complete+0x60>
   13af0:	3c04      	subs	r4, #4
   13af2:	e7f3      	b.n	13adc <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   13af4:	2300      	movs	r3, #0
	list->tail = NULL;
   13af6:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   13afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13afc:	200080cc 	.word	0x200080cc
   13b00:	20021e22 	.word	0x20021e22
   13b04:	20021058 	.word	0x20021058

00013b08 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   13b08:	4905      	ldr	r1, [pc, #20]	; (13b20 <bt_hci_evt_le_dhkey_complete+0x18>)
   13b0a:	680b      	ldr	r3, [r1, #0]
   13b0c:	b133      	cbz	r3, 13b1c <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   13b0e:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   13b10:	2000      	movs	r0, #0
   13b12:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   13b14:	7811      	ldrb	r1, [r2, #0]
   13b16:	b901      	cbnz	r1, 13b1a <bt_hci_evt_le_dhkey_complete+0x12>
   13b18:	1c50      	adds	r0, r2, #1
   13b1a:	4718      	bx	r3
	}
}
   13b1c:	4770      	bx	lr
   13b1e:	bf00      	nop
   13b20:	20021054 	.word	0x20021054

00013b24 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   13b24:	b570      	push	{r4, r5, r6, lr}
   13b26:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   13b28:	4b12      	ldr	r3, [pc, #72]	; (13b74 <notify_connected+0x50>)
   13b2a:	681d      	ldr	r5, [r3, #0]
   13b2c:	b995      	cbnz	r5, 13b54 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13b2e:	4d12      	ldr	r5, [pc, #72]	; (13b78 <notify_connected+0x54>)
   13b30:	4e12      	ldr	r6, [pc, #72]	; (13b7c <notify_connected+0x58>)
   13b32:	42b5      	cmp	r5, r6
   13b34:	d91c      	bls.n	13b70 <notify_connected+0x4c>
   13b36:	4912      	ldr	r1, [pc, #72]	; (13b80 <notify_connected+0x5c>)
   13b38:	f240 535b 	movw	r3, #1371	; 0x55b
   13b3c:	4a11      	ldr	r2, [pc, #68]	; (13b84 <notify_connected+0x60>)
   13b3e:	4812      	ldr	r0, [pc, #72]	; (13b88 <notify_connected+0x64>)
   13b40:	f011 f8ed 	bl	24d1e <assert_print>
   13b44:	4811      	ldr	r0, [pc, #68]	; (13b8c <notify_connected+0x68>)
   13b46:	f011 f8ea 	bl	24d1e <assert_print>
   13b4a:	f240 515b 	movw	r1, #1371	; 0x55b
   13b4e:	480d      	ldr	r0, [pc, #52]	; (13b84 <notify_connected+0x60>)
   13b50:	f011 f8de 	bl	24d10 <assert_post_action>
		if (cb->connected) {
   13b54:	682b      	ldr	r3, [r5, #0]
   13b56:	b113      	cbz	r3, 13b5e <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   13b58:	4620      	mov	r0, r4
   13b5a:	7b21      	ldrb	r1, [r4, #12]
   13b5c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   13b5e:	69ad      	ldr	r5, [r5, #24]
   13b60:	e7e4      	b.n	13b2c <notify_connected+0x8>
		if (cb->connected) {
   13b62:	682b      	ldr	r3, [r5, #0]
   13b64:	b113      	cbz	r3, 13b6c <notify_connected+0x48>
			cb->connected(conn, conn->err);
   13b66:	4620      	mov	r0, r4
   13b68:	7b21      	ldrb	r1, [r4, #12]
   13b6a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13b6c:	351c      	adds	r5, #28
   13b6e:	e7e0      	b.n	13b32 <notify_connected+0xe>
   13b70:	d3f7      	bcc.n	13b62 <notify_connected+0x3e>
		}
	}
}
   13b72:	bd70      	pop	{r4, r5, r6, pc}
   13b74:	20021080 	.word	0x20021080
   13b78:	0002a6ac 	.word	0x0002a6ac
   13b7c:	0002a6c8 	.word	0x0002a6c8
   13b80:	0002e2e4 	.word	0x0002e2e4
   13b84:	0002e2b4 	.word	0x0002e2b4
   13b88:	0002b6e9 	.word	0x0002b6e9
   13b8c:	0002c7cd 	.word	0x0002c7cd

00013b90 <tx_notify>:
{
   13b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b94:	4604      	mov	r4, r0
	tx->cb = NULL;
   13b96:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   13b9a:	4f14      	ldr	r7, [pc, #80]	; (13bec <tx_notify+0x5c>)
	__asm__ volatile(
   13b9c:	f04f 0220 	mov.w	r2, #32
   13ba0:	f3ef 8311 	mrs	r3, BASEPRI
   13ba4:	f382 8812 	msr	BASEPRI_MAX, r2
   13ba8:	f3bf 8f6f 	isb	sy
	return list->head;
   13bac:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   13bae:	b929      	cbnz	r1, 13bbc <tx_notify+0x2c>
	__asm__ volatile(
   13bb0:	f383 8811 	msr	BASEPRI, r3
   13bb4:	f3bf 8f6f 	isb	sy
}
   13bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13bbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   13bbe:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13bc0:	4281      	cmp	r1, r0
	list->tail = node;
   13bc2:	bf08      	it	eq
   13bc4:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   13bc6:	6222      	str	r2, [r4, #32]
   13bc8:	f383 8811 	msr	BASEPRI, r3
   13bcc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   13bd0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   13bd4:	4638      	mov	r0, r7
	tx->user_data = NULL;
   13bd6:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   13bda:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   13bde:	f015 fc3b 	bl	29458 <k_queue_append>
		cb(conn, user_data, 0);
   13be2:	2200      	movs	r2, #0
   13be4:	4631      	mov	r1, r6
   13be6:	4620      	mov	r0, r4
   13be8:	47a8      	blx	r5
	while (1) {
   13bea:	e7d7      	b.n	13b9c <tx_notify+0xc>
   13bec:	20008be8 	.word	0x20008be8

00013bf0 <conn_tx_destroy>:
{
   13bf0:	b570      	push	{r4, r5, r6, lr}
   13bf2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   13bf4:	b949      	cbnz	r1, 13c0a <conn_tx_destroy+0x1a>
   13bf6:	490d      	ldr	r1, [pc, #52]	; (13c2c <conn_tx_destroy+0x3c>)
   13bf8:	480d      	ldr	r0, [pc, #52]	; (13c30 <conn_tx_destroy+0x40>)
   13bfa:	2339      	movs	r3, #57	; 0x39
   13bfc:	4a0d      	ldr	r2, [pc, #52]	; (13c34 <conn_tx_destroy+0x44>)
   13bfe:	f011 f88e 	bl	24d1e <assert_print>
   13c02:	2139      	movs	r1, #57	; 0x39
   13c04:	480b      	ldr	r0, [pc, #44]	; (13c34 <conn_tx_destroy+0x44>)
   13c06:	f011 f883 	bl	24d10 <assert_post_action>
	tx->cb = NULL;
   13c0a:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   13c0c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   13c10:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   13c12:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   13c16:	4808      	ldr	r0, [pc, #32]	; (13c38 <conn_tx_destroy+0x48>)
   13c18:	f015 fc1e 	bl	29458 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   13c1c:	4631      	mov	r1, r6
   13c1e:	4620      	mov	r0, r4
   13c20:	462b      	mov	r3, r5
}
   13c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   13c26:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   13c2a:	4718      	bx	r3
   13c2c:	0002e2ff 	.word	0x0002e2ff
   13c30:	0002b6e9 	.word	0x0002b6e9
   13c34:	0002e2b4 	.word	0x0002e2b4
   13c38:	20008be8 	.word	0x20008be8

00013c3c <send_frag>:
{
   13c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c40:	4604      	mov	r4, r0
   13c42:	460e      	mov	r6, r1
   13c44:	4617      	mov	r7, r2
   13c46:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   13c48:	698d      	ldr	r5, [r1, #24]
{
   13c4a:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   13c4c:	f04f 33ff 	mov.w	r3, #4294967295
   13c50:	f04f 32ff 	mov.w	r2, #4294967295
   13c54:	4849      	ldr	r0, [pc, #292]	; (13d7c <send_frag+0x140>)
   13c56:	f00c f931 	bl	1febc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   13c5a:	7b63      	ldrb	r3, [r4, #13]
   13c5c:	2b07      	cmp	r3, #7
   13c5e:	f040 8081 	bne.w	13d64 <send_frag+0x128>
	__asm__ volatile(
   13c62:	f04f 0320 	mov.w	r3, #32
   13c66:	f3ef 8211 	mrs	r2, BASEPRI
   13c6a:	f383 8812 	msr	BASEPRI_MAX, r3
   13c6e:	f3bf 8f6f 	isb	sy
	if (tx) {
   13c72:	2d00      	cmp	r5, #0
   13c74:	d049      	beq.n	13d0a <send_frag+0xce>
	parent->next = child;
   13c76:	2300      	movs	r3, #0
   13c78:	602b      	str	r3, [r5, #0]
	return list->tail;
   13c7a:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d141      	bne.n	13d04 <send_frag+0xc8>
	list->head = node;
   13c80:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   13c84:	f382 8811 	msr	BASEPRI, r2
   13c88:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   13c8c:	2104      	movs	r1, #4
   13c8e:	f106 000c 	add.w	r0, r6, #12
   13c92:	f005 fc37 	bl	19504 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   13c96:	8823      	ldrh	r3, [r4, #0]
   13c98:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   13c9c:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   13ca0:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13ca2:	8a33      	ldrh	r3, [r6, #16]
   13ca4:	3b04      	subs	r3, #4
   13ca6:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13ca8:	2302      	movs	r3, #2
	return bt_send(buf);
   13caa:	4630      	mov	r0, r6
   13cac:	7633      	strb	r3, [r6, #24]
   13cae:	f7fe fa9b 	bl	121e8 <bt_send>
	if (err) {
   13cb2:	2800      	cmp	r0, #0
   13cb4:	d060      	beq.n	13d78 <send_frag+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   13cb6:	4b32      	ldr	r3, [pc, #200]	; (13d80 <send_frag+0x144>)
   13cb8:	9003      	str	r0, [sp, #12]
   13cba:	9302      	str	r3, [sp, #8]
   13cbc:	2300      	movs	r3, #0
   13cbe:	2201      	movs	r2, #1
   13cc0:	4618      	mov	r0, r3
   13cc2:	e9cd 3300 	strd	r3, r3, [sp]
   13cc6:	492f      	ldr	r1, [pc, #188]	; (13d84 <send_frag+0x148>)
   13cc8:	f012 fc9d 	bl	26606 <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   13ccc:	f04f 0320 	mov.w	r3, #32
   13cd0:	f3ef 8711 	mrs	r7, BASEPRI
   13cd4:	f383 8812 	msr	BASEPRI_MAX, r3
   13cd8:	f3bf 8f6f 	isb	sy
		if (tx) {
   13cdc:	b315      	cbz	r5, 13d24 <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   13cde:	4629      	mov	r1, r5
   13ce0:	f104 0014 	add.w	r0, r4, #20
   13ce4:	f012 fc69 	bl	265ba <sys_slist_find_and_remove>
	__asm__ volatile(
   13ce8:	f387 8811 	msr	BASEPRI, r7
   13cec:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   13cf0:	4822      	ldr	r0, [pc, #136]	; (13d7c <send_frag+0x140>)
   13cf2:	f00c f89f 	bl	1fe34 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   13cf6:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   13cf8:	4629      	mov	r1, r5
   13cfa:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   13cfc:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   13cfe:	f7ff ff77 	bl	13bf0 <conn_tx_destroy>
   13d02:	e028      	b.n	13d56 <send_frag+0x11a>
	parent->next = child;
   13d04:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13d06:	61a5      	str	r5, [r4, #24]
}
   13d08:	e7bc      	b.n	13c84 <send_frag+0x48>
	return list->tail;
   13d0a:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   13d0c:	b133      	cbz	r3, 13d1c <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   13d0e:	f103 080c 	add.w	r8, r3, #12
   13d12:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   13d14:	3301      	adds	r3, #1
   13d16:	f8c8 3000 	str.w	r3, [r8]
   13d1a:	e7b3      	b.n	13c84 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   13d1c:	69e3      	ldr	r3, [r4, #28]
   13d1e:	f104 081c 	add.w	r8, r4, #28
   13d22:	e7f7      	b.n	13d14 <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   13d24:	f8d8 2000 	ldr.w	r2, [r8]
   13d28:	b95a      	cbnz	r2, 13d42 <send_frag+0x106>
   13d2a:	4917      	ldr	r1, [pc, #92]	; (13d88 <send_frag+0x14c>)
   13d2c:	4817      	ldr	r0, [pc, #92]	; (13d8c <send_frag+0x150>)
   13d2e:	f240 2327 	movw	r3, #551	; 0x227
   13d32:	4a17      	ldr	r2, [pc, #92]	; (13d90 <send_frag+0x154>)
   13d34:	f010 fff3 	bl	24d1e <assert_print>
   13d38:	f240 2127 	movw	r1, #551	; 0x227
   13d3c:	4814      	ldr	r0, [pc, #80]	; (13d90 <send_frag+0x154>)
   13d3e:	f010 ffe7 	bl	24d10 <assert_post_action>
			(*pending_no_cb)--;
   13d42:	3a01      	subs	r2, #1
   13d44:	f8c8 2000 	str.w	r2, [r8]
   13d48:	f387 8811 	msr	BASEPRI, r7
   13d4c:	f3bf 8f6f 	isb	sy
   13d50:	480a      	ldr	r0, [pc, #40]	; (13d7c <send_frag+0x140>)
   13d52:	f00c f86f 	bl	1fe34 <z_impl_k_sem_give>
	if (always_consume) {
   13d56:	f1b9 0f00 	cmp.w	r9, #0
   13d5a:	d109      	bne.n	13d70 <send_frag+0x134>
	return false;
   13d5c:	2000      	movs	r0, #0
}
   13d5e:	b005      	add	sp, #20
   13d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13d64:	4805      	ldr	r0, [pc, #20]	; (13d7c <send_frag+0x140>)
   13d66:	f00c f865 	bl	1fe34 <z_impl_k_sem_give>
	if (tx) {
   13d6a:	2d00      	cmp	r5, #0
   13d6c:	d1c3      	bne.n	13cf6 <send_frag+0xba>
   13d6e:	e7f2      	b.n	13d56 <send_frag+0x11a>
		net_buf_unref(buf);
   13d70:	4630      	mov	r0, r6
   13d72:	f005 fb01 	bl	19378 <net_buf_unref>
   13d76:	e7f1      	b.n	13d5c <send_frag+0x120>
	return true;
   13d78:	2001      	movs	r0, #1
   13d7a:	e7f0      	b.n	13d5e <send_frag+0x122>
   13d7c:	20008100 	.word	0x20008100
   13d80:	0002dae3 	.word	0x0002dae3
   13d84:	0002a720 	.word	0x0002a720
   13d88:	0002e302 	.word	0x0002e302
   13d8c:	0002b6e9 	.word	0x0002b6e9
   13d90:	0002e2b4 	.word	0x0002e2b4

00013d94 <bt_conn_get_pkts>:
}
   13d94:	4800      	ldr	r0, [pc, #0]	; (13d98 <bt_conn_get_pkts+0x4>)
   13d96:	4770      	bx	lr
   13d98:	20008100 	.word	0x20008100

00013d9c <bt_conn_new>:
{
   13d9c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   13d9e:	2200      	movs	r2, #0
   13da0:	4604      	mov	r4, r0
   13da2:	428a      	cmp	r2, r1
   13da4:	d102      	bne.n	13dac <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13da6:	2400      	movs	r4, #0
}
   13da8:	4620      	mov	r0, r4
   13daa:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13dac:	2001      	movs	r0, #1
   13dae:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   13db2:	e8d3 5fef 	ldaex	r5, [r3]
   13db6:	2d00      	cmp	r5, #0
   13db8:	d104      	bne.n	13dc4 <bt_conn_new+0x28>
   13dba:	e8c3 0fec 	stlex	ip, r0, [r3]
   13dbe:	f1bc 0f00 	cmp.w	ip, #0
   13dc2:	d1f6      	bne.n	13db2 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13dc4:	d002      	beq.n	13dcc <bt_conn_new+0x30>
   13dc6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   13dc8:	4402      	add	r2, r0
   13dca:	e7ea      	b.n	13da2 <bt_conn_new+0x6>
	if (!conn) {
   13dcc:	2c00      	cmp	r4, #0
   13dce:	d0ea      	beq.n	13da6 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   13dd0:	22c4      	movs	r2, #196	; 0xc4
   13dd2:	2100      	movs	r1, #0
   13dd4:	4620      	mov	r0, r4
   13dd6:	f015 fd42 	bl	2985e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   13dda:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13dde:	4904      	ldr	r1, [pc, #16]	; (13df0 <bt_conn_new+0x54>)
   13de0:	f00c fcac 	bl	2073c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   13de4:	4903      	ldr	r1, [pc, #12]	; (13df4 <bt_conn_new+0x58>)
   13de6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13dea:	f00c facb 	bl	20384 <k_work_init>
	return conn;
   13dee:	e7db      	b.n	13da8 <bt_conn_new+0xc>
   13df0:	00014809 	.word	0x00014809
   13df4:	00026625 	.word	0x00026625

00013df8 <conn_cleanup>:
{
   13df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13dfc:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   13dfe:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   13e00:	f104 0638 	add.w	r6, r4, #56	; 0x38
   13e04:	2300      	movs	r3, #0
   13e06:	2200      	movs	r2, #0
   13e08:	4630      	mov	r0, r6
   13e0a:	f013 ff59 	bl	27cc0 <net_buf_get>
   13e0e:	4603      	mov	r3, r0
   13e10:	b980      	cbnz	r0, 13e34 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   13e12:	6963      	ldr	r3, [r4, #20]
   13e14:	b1cb      	cbz	r3, 13e4a <conn_cleanup+0x52>
   13e16:	4918      	ldr	r1, [pc, #96]	; (13e78 <conn_cleanup+0x80>)
   13e18:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   13e1c:	4a17      	ldr	r2, [pc, #92]	; (13e7c <conn_cleanup+0x84>)
   13e1e:	4818      	ldr	r0, [pc, #96]	; (13e80 <conn_cleanup+0x88>)
   13e20:	f010 ff7d 	bl	24d1e <assert_print>
   13e24:	4817      	ldr	r0, [pc, #92]	; (13e84 <conn_cleanup+0x8c>)
   13e26:	f010 ff7a 	bl	24d1e <assert_print>
   13e2a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   13e2e:	4813      	ldr	r0, [pc, #76]	; (13e7c <conn_cleanup+0x84>)
   13e30:	f010 ff6e 	bl	24d10 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   13e34:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   13e36:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   13e38:	f005 fa9e 	bl	19378 <net_buf_unref>
		if (tx) {
   13e3c:	2d00      	cmp	r5, #0
   13e3e:	d0e1      	beq.n	13e04 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   13e40:	4629      	mov	r1, r5
   13e42:	4620      	mov	r0, r4
   13e44:	f7ff fed4 	bl	13bf0 <conn_tx_destroy>
   13e48:	e7da      	b.n	13e00 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   13e4a:	69e3      	ldr	r3, [r4, #28]
   13e4c:	b14b      	cbz	r3, 13e62 <conn_cleanup+0x6a>
   13e4e:	490e      	ldr	r1, [pc, #56]	; (13e88 <conn_cleanup+0x90>)
   13e50:	f240 23b5 	movw	r3, #693	; 0x2b5
   13e54:	4a09      	ldr	r2, [pc, #36]	; (13e7c <conn_cleanup+0x84>)
   13e56:	480a      	ldr	r0, [pc, #40]	; (13e80 <conn_cleanup+0x88>)
   13e58:	f010 ff61 	bl	24d1e <assert_print>
   13e5c:	f240 21b5 	movw	r1, #693	; 0x2b5
   13e60:	e7e5      	b.n	13e2e <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   13e62:	4620      	mov	r0, r4
   13e64:	f012 fbe1 	bl	2662a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13e68:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13e6c:	2200      	movs	r2, #0
}
   13e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13e72:	2300      	movs	r3, #0
   13e74:	f00c bd7e 	b.w	20974 <k_work_reschedule>
   13e78:	0002e315 	.word	0x0002e315
   13e7c:	0002e2b4 	.word	0x0002e2b4
   13e80:	0002b6e9 	.word	0x0002b6e9
   13e84:	0002e33b 	.word	0x0002e33b
   13e88:	0002e350 	.word	0x0002e350

00013e8c <bt_conn_recv>:
{
   13e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e8e:	4616      	mov	r6, r2
   13e90:	b087      	sub	sp, #28
   13e92:	4604      	mov	r4, r0
   13e94:	460d      	mov	r5, r1
	tx_notify(conn);
   13e96:	f7ff fe7b 	bl	13b90 <tx_notify>
	switch (flags) {
   13e9a:	2e01      	cmp	r6, #1
   13e9c:	d02e      	beq.n	13efc <bt_conn_recv+0x70>
   13e9e:	2e02      	cmp	r6, #2
   13ea0:	d165      	bne.n	13f6e <bt_conn_recv+0xe2>
		if (conn->rx) {
   13ea2:	6923      	ldr	r3, [r4, #16]
   13ea4:	b163      	cbz	r3, 13ec0 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   13ea6:	4b3d      	ldr	r3, [pc, #244]	; (13f9c <bt_conn_recv+0x110>)
   13ea8:	2201      	movs	r2, #1
   13eaa:	9302      	str	r3, [sp, #8]
   13eac:	2300      	movs	r3, #0
   13eae:	493c      	ldr	r1, [pc, #240]	; (13fa0 <bt_conn_recv+0x114>)
   13eb0:	4618      	mov	r0, r3
   13eb2:	e9cd 3300 	strd	r3, r3, [sp]
   13eb6:	f012 fba6 	bl	26606 <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   13eba:	4620      	mov	r0, r4
   13ebc:	f012 fbb5 	bl	2662a <bt_conn_reset_rx_state>
		conn->rx = buf;
   13ec0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   13ec2:	6921      	ldr	r1, [r4, #16]
   13ec4:	8a0a      	ldrh	r2, [r1, #16]
   13ec6:	2a01      	cmp	r2, #1
   13ec8:	d966      	bls.n	13f98 <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   13eca:	68cb      	ldr	r3, [r1, #12]
   13ecc:	881b      	ldrh	r3, [r3, #0]
   13ece:	3304      	adds	r3, #4
   13ed0:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   13ed2:	429a      	cmp	r2, r3
   13ed4:	d360      	bcc.n	13f98 <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   13ed6:	d956      	bls.n	13f86 <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   13ed8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   13edc:	4b31      	ldr	r3, [pc, #196]	; (13fa4 <bt_conn_recv+0x118>)
   13ede:	2201      	movs	r2, #1
   13ee0:	9302      	str	r3, [sp, #8]
   13ee2:	2300      	movs	r3, #0
   13ee4:	492e      	ldr	r1, [pc, #184]	; (13fa0 <bt_conn_recv+0x114>)
   13ee6:	4618      	mov	r0, r3
   13ee8:	e9cd 3300 	strd	r3, r3, [sp]
   13eec:	f012 fb8b 	bl	26606 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   13ef0:	4620      	mov	r0, r4
}
   13ef2:	b007      	add	sp, #28
   13ef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   13ef8:	f012 bb97 	b.w	2662a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   13efc:	6923      	ldr	r3, [r4, #16]
   13efe:	b963      	cbnz	r3, 13f1a <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   13f00:	4a29      	ldr	r2, [pc, #164]	; (13fa8 <bt_conn_recv+0x11c>)
   13f02:	4618      	mov	r0, r3
   13f04:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13f08:	4925      	ldr	r1, [pc, #148]	; (13fa0 <bt_conn_recv+0x114>)
   13f0a:	4632      	mov	r2, r6
   13f0c:	9300      	str	r3, [sp, #0]
   13f0e:	f012 fb7a 	bl	26606 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   13f12:	4620      	mov	r0, r4
   13f14:	f012 fb89 	bl	2662a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   13f18:	e001      	b.n	13f1e <bt_conn_recv+0x92>
		if (!buf->len) {
   13f1a:	8a2f      	ldrh	r7, [r5, #16]
   13f1c:	b92f      	cbnz	r7, 13f2a <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   13f1e:	4628      	mov	r0, r5
}
   13f20:	b007      	add	sp, #28
   13f22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   13f26:	f005 ba27 	b.w	19378 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   13f2a:	f103 000c 	add.w	r0, r3, #12
   13f2e:	f013 fedc 	bl	27cea <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   13f32:	4287      	cmp	r7, r0
   13f34:	d911      	bls.n	13f5a <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   13f36:	2700      	movs	r7, #0
   13f38:	4b1c      	ldr	r3, [pc, #112]	; (13fac <bt_conn_recv+0x120>)
   13f3a:	4632      	mov	r2, r6
   13f3c:	4638      	mov	r0, r7
   13f3e:	4918      	ldr	r1, [pc, #96]	; (13fa0 <bt_conn_recv+0x114>)
   13f40:	9302      	str	r3, [sp, #8]
   13f42:	e9cd 7700 	strd	r7, r7, [sp]
   13f46:	463b      	mov	r3, r7
   13f48:	f012 fb5d 	bl	26606 <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   13f4c:	463a      	mov	r2, r7
   13f4e:	4620      	mov	r0, r4
   13f50:	6921      	ldr	r1, [r4, #16]
   13f52:	f000 fefd 	bl	14d50 <bt_l2cap_recv>
			conn->rx = NULL;
   13f56:	6127      	str	r7, [r4, #16]
   13f58:	e7e1      	b.n	13f1e <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13f5a:	6920      	ldr	r0, [r4, #16]
   13f5c:	8a2a      	ldrh	r2, [r5, #16]
   13f5e:	68e9      	ldr	r1, [r5, #12]
   13f60:	300c      	adds	r0, #12
   13f62:	f013 feca 	bl	27cfa <net_buf_simple_add_mem>
		net_buf_unref(buf);
   13f66:	4628      	mov	r0, r5
   13f68:	f005 fa06 	bl	19378 <net_buf_unref>
		break;
   13f6c:	e7a9      	b.n	13ec2 <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   13f6e:	4b10      	ldr	r3, [pc, #64]	; (13fb0 <bt_conn_recv+0x124>)
   13f70:	2201      	movs	r2, #1
   13f72:	9302      	str	r3, [sp, #8]
   13f74:	2300      	movs	r3, #0
   13f76:	490a      	ldr	r1, [pc, #40]	; (13fa0 <bt_conn_recv+0x114>)
   13f78:	4618      	mov	r0, r3
   13f7a:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   13f7e:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   13f80:	f012 fb41 	bl	26606 <z_log_msg_runtime_create.constprop.0>
   13f84:	e7c5      	b.n	13f12 <bt_conn_recv+0x86>
	conn->rx = NULL;
   13f86:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   13f88:	2201      	movs	r2, #1
   13f8a:	4620      	mov	r0, r4
	conn->rx = NULL;
   13f8c:	6123      	str	r3, [r4, #16]
}
   13f8e:	b007      	add	sp, #28
   13f90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   13f94:	f000 bedc 	b.w	14d50 <bt_l2cap_recv>
}
   13f98:	b007      	add	sp, #28
   13f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f9c:	0002e369 	.word	0x0002e369
   13fa0:	0002a720 	.word	0x0002a720
   13fa4:	0002e3e9 	.word	0x0002e3e9
   13fa8:	0002e386 	.word	0x0002e386
   13fac:	0002e3a4 	.word	0x0002e3a4
   13fb0:	0002e3cb 	.word	0x0002e3cb

00013fb4 <bt_conn_send_cb>:
{
   13fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13fb8:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   13fba:	7b43      	ldrb	r3, [r0, #13]
{
   13fbc:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13fbe:	2b07      	cmp	r3, #7
{
   13fc0:	4688      	mov	r8, r1
   13fc2:	4617      	mov	r7, r2
   13fc4:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   13fc6:	d00c      	beq.n	13fe2 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   13fc8:	4b28      	ldr	r3, [pc, #160]	; (1406c <bt_conn_send_cb+0xb8>)
   13fca:	2201      	movs	r2, #1
   13fcc:	9302      	str	r3, [sp, #8]
   13fce:	2300      	movs	r3, #0
   13fd0:	4927      	ldr	r1, [pc, #156]	; (14070 <bt_conn_send_cb+0xbc>)
   13fd2:	4618      	mov	r0, r3
   13fd4:	e9cd 3300 	strd	r3, r3, [sp]
   13fd8:	f012 fb15 	bl	26606 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   13fdc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   13fe0:	e01c      	b.n	1401c <bt_conn_send_cb+0x68>
	if (cb) {
   13fe2:	2a00      	cmp	r2, #0
   13fe4:	d03f      	beq.n	14066 <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   13fe6:	f00d fe4d 	bl	21c84 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   13fea:	4b22      	ldr	r3, [pc, #136]	; (14074 <bt_conn_send_cb+0xc0>)
   13fec:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   13fee:	4822      	ldr	r0, [pc, #136]	; (14078 <bt_conn_send_cb+0xc4>)
   13ff0:	bf07      	ittee	eq
   13ff2:	2200      	moveq	r2, #0
   13ff4:	2300      	moveq	r3, #0
   13ff6:	f04f 32ff 	movne.w	r2, #4294967295
   13ffa:	f04f 33ff 	movne.w	r3, #4294967295
   13ffe:	f00b feaf 	bl	1fd60 <z_impl_k_queue_get>
   14002:	4604      	mov	r4, r0
		if (!tx) {
   14004:	b968      	cbnz	r0, 14022 <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   14006:	4b1d      	ldr	r3, [pc, #116]	; (1407c <bt_conn_send_cb+0xc8>)
   14008:	9000      	str	r0, [sp, #0]
   1400a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1400e:	2201      	movs	r2, #1
   14010:	4603      	mov	r3, r0
   14012:	4917      	ldr	r1, [pc, #92]	; (14070 <bt_conn_send_cb+0xbc>)
   14014:	f012 faf7 	bl	26606 <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   14018:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1401c:	b005      	add	sp, #20
   1401e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14022:	7b73      	ldrb	r3, [r6, #13]
   14024:	2500      	movs	r5, #0
   14026:	2b07      	cmp	r3, #7
   14028:	d011      	beq.n	1404e <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   1402a:	4b15      	ldr	r3, [pc, #84]	; (14080 <bt_conn_send_cb+0xcc>)
   1402c:	4628      	mov	r0, r5
   1402e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14032:	2202      	movs	r2, #2
   14034:	462b      	mov	r3, r5
   14036:	490e      	ldr	r1, [pc, #56]	; (14070 <bt_conn_send_cb+0xbc>)
   14038:	9500      	str	r5, [sp, #0]
   1403a:	f012 fae4 	bl	26606 <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   1403e:	4621      	mov	r1, r4
	tx->user_data = NULL;
   14040:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   14044:	480c      	ldr	r0, [pc, #48]	; (14078 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   14046:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14048:	f015 fa06 	bl	29458 <k_queue_append>
}
   1404c:	e7c6      	b.n	13fdc <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   1404e:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   14052:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   14054:	f106 0038 	add.w	r0, r6, #56	; 0x38
   14058:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   1405a:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   1405e:	f005 f965 	bl	1932c <net_buf_put>
	return 0;
   14062:	2000      	movs	r0, #0
   14064:	e7da      	b.n	1401c <bt_conn_send_cb+0x68>
   14066:	4614      	mov	r4, r2
   14068:	e7f4      	b.n	14054 <bt_conn_send_cb+0xa0>
   1406a:	bf00      	nop
   1406c:	0002e404 	.word	0x0002e404
   14070:	0002a720 	.word	0x0002a720
   14074:	20009d18 	.word	0x20009d18
   14078:	20008be8 	.word	0x20008be8
   1407c:	0002e413 	.word	0x0002e413
   14080:	0002e431 	.word	0x0002e431

00014084 <bt_conn_prepare_events>:
{
   14084:	b570      	push	{r4, r5, r6, lr}
   14086:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   14088:	4817      	ldr	r0, [pc, #92]	; (140e8 <bt_conn_prepare_events+0x64>)
   1408a:	f015 fb8d 	bl	297a8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1408e:	2200      	movs	r2, #0
   14090:	2101      	movs	r1, #1
   14092:	4620      	mov	r0, r4
   14094:	4b14      	ldr	r3, [pc, #80]	; (140e8 <bt_conn_prepare_events+0x64>)
   14096:	f00e fcfd 	bl	22a94 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1409a:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1409e:	4b13      	ldr	r3, [pc, #76]	; (140ec <bt_conn_prepare_events+0x68>)
   140a0:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   140a4:	b90a      	cbnz	r2, 140aa <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   140a6:	2001      	movs	r0, #1
}
   140a8:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   140aa:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   140ae:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   140b2:	b953      	cbnz	r3, 140ca <bt_conn_prepare_events+0x46>
   140b4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   140b8:	1d28      	adds	r0, r5, #4
   140ba:	f012 fa99 	bl	265f0 <atomic_and>
   140be:	0643      	lsls	r3, r0, #25
   140c0:	d503      	bpl.n	140ca <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   140c2:	4628      	mov	r0, r5
   140c4:	f7ff fe98 	bl	13df8 <conn_cleanup>
		return -ENOTCONN;
   140c8:	e7ed      	b.n	140a6 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   140ca:	7b6b      	ldrb	r3, [r5, #13]
   140cc:	2b07      	cmp	r3, #7
   140ce:	d1ea      	bne.n	140a6 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   140d0:	4630      	mov	r0, r6
   140d2:	4b07      	ldr	r3, [pc, #28]	; (140f0 <bt_conn_prepare_events+0x6c>)
   140d4:	2200      	movs	r2, #0
   140d6:	2104      	movs	r1, #4
   140d8:	f00e fcdc 	bl	22a94 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   140dc:	2301      	movs	r3, #1
			ev_count++;
   140de:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   140e0:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   140e4:	e7e0      	b.n	140a8 <bt_conn_prepare_events+0x24>
   140e6:	bf00      	nop
   140e8:	200084b8 	.word	0x200084b8
   140ec:	2000995c 	.word	0x2000995c
   140f0:	200098d0 	.word	0x200098d0

000140f4 <bt_conn_ref>:
{
   140f4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   140f6:	b180      	cbz	r0, 1411a <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   140f8:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   140fc:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   14100:	b1bb      	cbz	r3, 14132 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   14102:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14104:	e8d2 4fef 	ldaex	r4, [r2]
   14108:	429c      	cmp	r4, r3
   1410a:	d104      	bne.n	14116 <bt_conn_ref+0x22>
   1410c:	e8c2 1fec 	stlex	ip, r1, [r2]
   14110:	f1bc 0f00 	cmp.w	ip, #0
   14114:	d1f6      	bne.n	14104 <bt_conn_ref+0x10>
   14116:	d1f1      	bne.n	140fc <bt_conn_ref+0x8>
}
   14118:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   1411a:	4907      	ldr	r1, [pc, #28]	; (14138 <bt_conn_ref+0x44>)
   1411c:	4807      	ldr	r0, [pc, #28]	; (1413c <bt_conn_ref+0x48>)
   1411e:	f240 437c 	movw	r3, #1148	; 0x47c
   14122:	4a07      	ldr	r2, [pc, #28]	; (14140 <bt_conn_ref+0x4c>)
   14124:	f010 fdfb 	bl	24d1e <assert_print>
   14128:	f240 417c 	movw	r1, #1148	; 0x47c
   1412c:	4804      	ldr	r0, [pc, #16]	; (14140 <bt_conn_ref+0x4c>)
   1412e:	f010 fdef 	bl	24d10 <assert_post_action>
			return NULL;
   14132:	4618      	mov	r0, r3
   14134:	e7f0      	b.n	14118 <bt_conn_ref+0x24>
   14136:	bf00      	nop
   14138:	0002db55 	.word	0x0002db55
   1413c:	0002b6e9 	.word	0x0002b6e9
   14140:	0002e2b4 	.word	0x0002e2b4

00014144 <bt_conn_unref>:
{
   14144:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   14146:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1414a:	e8d3 2fef 	ldaex	r2, [r3]
   1414e:	1e51      	subs	r1, r2, #1
   14150:	e8c3 1fe4 	stlex	r4, r1, [r3]
   14154:	2c00      	cmp	r4, #0
   14156:	d1f8      	bne.n	1414a <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   14158:	2a00      	cmp	r2, #0
   1415a:	dc0e      	bgt.n	1417a <bt_conn_unref+0x36>
   1415c:	490d      	ldr	r1, [pc, #52]	; (14194 <bt_conn_unref+0x50>)
   1415e:	f44f 6393 	mov.w	r3, #1176	; 0x498
   14162:	4a0d      	ldr	r2, [pc, #52]	; (14198 <bt_conn_unref+0x54>)
   14164:	480d      	ldr	r0, [pc, #52]	; (1419c <bt_conn_unref+0x58>)
   14166:	f010 fdda 	bl	24d1e <assert_print>
   1416a:	480d      	ldr	r0, [pc, #52]	; (141a0 <bt_conn_unref+0x5c>)
   1416c:	f010 fdd7 	bl	24d1e <assert_print>
   14170:	f44f 6193 	mov.w	r1, #1176	; 0x498
   14174:	4808      	ldr	r0, [pc, #32]	; (14198 <bt_conn_unref+0x54>)
   14176:	f010 fdcb 	bl	24d10 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1417a:	f240 1201 	movw	r2, #257	; 0x101
   1417e:	8841      	ldrh	r1, [r0, #2]
   14180:	4291      	cmp	r1, r2
   14182:	d106      	bne.n	14192 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14184:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   14188:	b91b      	cbnz	r3, 14192 <bt_conn_unref+0x4e>
}
   1418a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1418e:	f7ff baa9 	b.w	136e4 <bt_le_adv_resume>
}
   14192:	bd10      	pop	{r4, pc}
   14194:	0002e457 	.word	0x0002e457
   14198:	0002e2b4 	.word	0x0002e2b4
   1419c:	0002b6e9 	.word	0x0002b6e9
   141a0:	0002e45f 	.word	0x0002e45f

000141a4 <bt_conn_lookup_handle>:
{
   141a4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   141a6:	2101      	movs	r1, #1
   141a8:	4801      	ldr	r0, [pc, #4]	; (141b0 <bt_conn_lookup_handle+0xc>)
   141aa:	f012 ba47 	b.w	2663c <conn_lookup_handle>
   141ae:	bf00      	nop
   141b0:	20009898 	.word	0x20009898

000141b4 <bt_conn_set_state>:
{
   141b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   141b6:	7b46      	ldrb	r6, [r0, #13]
{
   141b8:	4604      	mov	r4, r0
	if (conn->state == state) {
   141ba:	428e      	cmp	r6, r1
{
   141bc:	460d      	mov	r5, r1
	if (conn->state == state) {
   141be:	d111      	bne.n	141e4 <bt_conn_set_state+0x30>
	switch (state) {
   141c0:	2e08      	cmp	r6, #8
   141c2:	bf96      	itet	ls
   141c4:	4b65      	ldrls	r3, [pc, #404]	; (1435c <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   141c6:	4b66      	ldrhi	r3, [pc, #408]	; (14360 <bt_conn_set_state+0x1ac>)
   141c8:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   141cc:	9303      	str	r3, [sp, #12]
   141ce:	4b65      	ldr	r3, [pc, #404]	; (14364 <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   141d0:	9302      	str	r3, [sp, #8]
   141d2:	2300      	movs	r3, #0
   141d4:	2202      	movs	r2, #2
   141d6:	4618      	mov	r0, r3
   141d8:	e9cd 3300 	strd	r3, r3, [sp]
   141dc:	4962      	ldr	r1, [pc, #392]	; (14368 <bt_conn_set_state+0x1b4>)
   141de:	f012 fa12 	bl	26606 <z_log_msg_runtime_create.constprop.0>
   141e2:	e098      	b.n	14316 <bt_conn_set_state+0x162>
	conn->state = state;
   141e4:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   141e6:	b926      	cbnz	r6, 141f2 <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   141e8:	7883      	ldrb	r3, [r0, #2]
   141ea:	2b08      	cmp	r3, #8
   141ec:	d001      	beq.n	141f2 <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   141ee:	f7ff ff81 	bl	140f4 <bt_conn_ref>
	switch (conn->state) {
   141f2:	7b63      	ldrb	r3, [r4, #13]
   141f4:	2b08      	cmp	r3, #8
   141f6:	f200 80ad 	bhi.w	14354 <bt_conn_set_state+0x1a0>
   141fa:	e8df f003 	tbb	[pc, r3]
   141fe:	053a      	.short	0x053a
   14200:	8c8c8c8c 	.word	0x8c8c8c8c
   14204:	1c8c      	.short	0x1c8c
   14206:	8c          	.byte	0x8c
   14207:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   14208:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   1420a:	4d58      	ldr	r5, [pc, #352]	; (1436c <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   1420c:	f04f 0220 	mov.w	r2, #32
   14210:	f3ef 8311 	mrs	r3, BASEPRI
   14214:	f382 8812 	msr	BASEPRI_MAX, r2
   14218:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1421c:	69e2      	ldr	r2, [r4, #28]
   1421e:	2a00      	cmp	r2, #0
   14220:	d073      	beq.n	1430a <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   14222:	3a01      	subs	r2, #1
   14224:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   14226:	f383 8811 	msr	BASEPRI, r3
   1422a:	f3bf 8f6f 	isb	sy
   1422e:	4628      	mov	r0, r5
   14230:	f00b fe00 	bl	1fe34 <z_impl_k_sem_give>
}
   14234:	e7ea      	b.n	1420c <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14236:	78a3      	ldrb	r3, [r4, #2]
   14238:	2b04      	cmp	r3, #4
   1423a:	d06c      	beq.n	14316 <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   1423c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14240:	f015 f8fd 	bl	2943e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   14244:	2100      	movs	r1, #0
   14246:	484a      	ldr	r0, [pc, #296]	; (14370 <bt_conn_set_state+0x1bc>)
   14248:	f00e fd42 	bl	22cd0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1424c:	2300      	movs	r3, #0
	list->tail = NULL;
   1424e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14252:	78e3      	ldrb	r3, [r4, #3]
   14254:	2b01      	cmp	r3, #1
   14256:	d15e      	bne.n	14316 <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   14258:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   1425a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   1425e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   14262:	2300      	movs	r3, #0
   14264:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   14268:	b004      	add	sp, #16
   1426a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1426e:	f00c bb07 	b.w	20880 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14272:	78a3      	ldrb	r3, [r4, #2]
   14274:	2b04      	cmp	r3, #4
   14276:	d105      	bne.n	14284 <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   14278:	4620      	mov	r0, r4
}
   1427a:	b004      	add	sp, #16
   1427c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   14280:	f7ff bf60 	b.w	14144 <bt_conn_unref>
		switch (old_state) {
   14284:	2e08      	cmp	r6, #8
   14286:	d846      	bhi.n	14316 <bt_conn_set_state+0x162>
   14288:	a301      	add	r3, pc, #4	; (adr r3, 14290 <bt_conn_set_state+0xdc>)
   1428a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1428e:	bf00      	nop
   14290:	00014305 	.word	0x00014305
   14294:	000142b5 	.word	0x000142b5
   14298:	000142f7 	.word	0x000142f7
   1429c:	00014279 	.word	0x00014279
   142a0:	00014279 	.word	0x00014279
   142a4:	000142f7 	.word	0x000142f7
   142a8:	000142f7 	.word	0x000142f7
   142ac:	00014317 	.word	0x00014317
   142b0:	00014305 	.word	0x00014305
			tx_notify(conn);
   142b4:	4620      	mov	r0, r4
   142b6:	f7ff fc6b 	bl	13b90 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   142ba:	78a3      	ldrb	r3, [r4, #2]
   142bc:	2b01      	cmp	r3, #1
   142be:	d10a      	bne.n	142d6 <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   142c0:	f104 0560 	add.w	r5, r4, #96	; 0x60
   142c4:	4628      	mov	r0, r5
   142c6:	f015 f950 	bl	2956a <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   142ca:	f010 0f0c 	tst.w	r0, #12
   142ce:	d002      	beq.n	142d6 <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   142d0:	4628      	mov	r0, r5
   142d2:	f00c fb55 	bl	20980 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   142d6:	3404      	adds	r4, #4
   142d8:	e8d4 3fef 	ldaex	r3, [r4]
   142dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   142e0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   142e4:	2a00      	cmp	r2, #0
   142e6:	d1f7      	bne.n	142d8 <bt_conn_set_state+0x124>
   142e8:	2100      	movs	r1, #0
   142ea:	4821      	ldr	r0, [pc, #132]	; (14370 <bt_conn_set_state+0x1bc>)
}
   142ec:	b004      	add	sp, #16
   142ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   142f2:	f00e bced 	b.w	22cd0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   142f6:	7b23      	ldrb	r3, [r4, #12]
   142f8:	2b00      	cmp	r3, #0
   142fa:	d0bd      	beq.n	14278 <bt_conn_set_state+0xc4>
				notify_connected(conn);
   142fc:	4620      	mov	r0, r4
   142fe:	f7ff fc11 	bl	13b24 <notify_connected>
   14302:	e7b9      	b.n	14278 <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   14304:	4b1b      	ldr	r3, [pc, #108]	; (14374 <bt_conn_set_state+0x1c0>)
   14306:	9503      	str	r5, [sp, #12]
   14308:	e762      	b.n	141d0 <bt_conn_set_state+0x1c>
	return list->head;
   1430a:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1430c:	b929      	cbnz	r1, 1431a <bt_conn_set_state+0x166>
   1430e:	f383 8811 	msr	BASEPRI, r3
   14312:	f3bf 8f6f 	isb	sy
}
   14316:	b004      	add	sp, #16
   14318:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1431a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1431c:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1431e:	4281      	cmp	r1, r0
	list->tail = node;
   14320:	bf08      	it	eq
   14322:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   14324:	6162      	str	r2, [r4, #20]
   14326:	f383 8811 	msr	BASEPRI, r3
   1432a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1432e:	f04f 0220 	mov.w	r2, #32
   14332:	f3ef 8311 	mrs	r3, BASEPRI
   14336:	f382 8812 	msr	BASEPRI_MAX, r2
   1433a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1433e:	68ca      	ldr	r2, [r1, #12]
   14340:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14342:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   14344:	f383 8811 	msr	BASEPRI, r3
   14348:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1434c:	4620      	mov	r0, r4
   1434e:	f7ff fc4f 	bl	13bf0 <conn_tx_destroy>
   14352:	e76c      	b.n	1422e <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   14354:	4b08      	ldr	r3, [pc, #32]	; (14378 <bt_conn_set_state+0x1c4>)
   14356:	9503      	str	r5, [sp, #12]
   14358:	e73a      	b.n	141d0 <bt_conn_set_state+0x1c>
   1435a:	bf00      	nop
   1435c:	0002b06c 	.word	0x0002b06c
   14360:	0002e47d 	.word	0x0002e47d
   14364:	0002e487 	.word	0x0002e487
   14368:	0002a720 	.word	0x0002a720
   1436c:	20008100 	.word	0x20008100
   14370:	200084b8 	.word	0x200084b8
   14374:	0002e498 	.word	0x0002e498
   14378:	0002e4af 	.word	0x0002e4af

0001437c <bt_conn_index>:
		index = conn - acl_conns;
   1437c:	4a0c      	ldr	r2, [pc, #48]	; (143b0 <bt_conn_index+0x34>)
{
   1437e:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   14380:	490c      	ldr	r1, [pc, #48]	; (143b4 <bt_conn_index+0x38>)
   14382:	1a83      	subs	r3, r0, r2
   14384:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14386:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   14388:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1438c:	d00e      	beq.n	143ac <bt_conn_index+0x30>
   1438e:	490a      	ldr	r1, [pc, #40]	; (143b8 <bt_conn_index+0x3c>)
   14390:	f240 43b6 	movw	r3, #1206	; 0x4b6
   14394:	4a09      	ldr	r2, [pc, #36]	; (143bc <bt_conn_index+0x40>)
   14396:	480a      	ldr	r0, [pc, #40]	; (143c0 <bt_conn_index+0x44>)
   14398:	f010 fcc1 	bl	24d1e <assert_print>
   1439c:	4809      	ldr	r0, [pc, #36]	; (143c4 <bt_conn_index+0x48>)
   1439e:	f010 fcbe 	bl	24d1e <assert_print>
   143a2:	f240 41b6 	movw	r1, #1206	; 0x4b6
   143a6:	4805      	ldr	r0, [pc, #20]	; (143bc <bt_conn_index+0x40>)
   143a8:	f010 fcb2 	bl	24d10 <assert_post_action>
}
   143ac:	b2d8      	uxtb	r0, r3
   143ae:	bd08      	pop	{r3, pc}
   143b0:	20009898 	.word	0x20009898
   143b4:	c28f5c29 	.word	0xc28f5c29
   143b8:	0002e4cb 	.word	0x0002e4cb
   143bc:	0002e2b4 	.word	0x0002e2b4
   143c0:	0002b6e9 	.word	0x0002b6e9
   143c4:	0002e594 	.word	0x0002e594

000143c8 <bt_conn_create_pdu_timeout>:
{
   143c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   143ca:	b085      	sub	sp, #20
   143cc:	4604      	mov	r4, r0
   143ce:	460d      	mov	r5, r1
   143d0:	4617      	mov	r7, r2
   143d2:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   143d4:	f015 f804 	bl	293e0 <k_is_in_isr>
   143d8:	b158      	cbz	r0, 143f2 <bt_conn_create_pdu_timeout+0x2a>
   143da:	4914      	ldr	r1, [pc, #80]	; (1442c <bt_conn_create_pdu_timeout+0x64>)
   143dc:	4814      	ldr	r0, [pc, #80]	; (14430 <bt_conn_create_pdu_timeout+0x68>)
   143de:	f240 43d2 	movw	r3, #1234	; 0x4d2
   143e2:	4a14      	ldr	r2, [pc, #80]	; (14434 <bt_conn_create_pdu_timeout+0x6c>)
   143e4:	f010 fc9b 	bl	24d1e <assert_print>
   143e8:	f240 41d2 	movw	r1, #1234	; 0x4d2
   143ec:	4811      	ldr	r0, [pc, #68]	; (14434 <bt_conn_create_pdu_timeout+0x6c>)
   143ee:	f010 fc8f 	bl	24d10 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   143f2:	4911      	ldr	r1, [pc, #68]	; (14438 <bt_conn_create_pdu_timeout+0x70>)
   143f4:	463a      	mov	r2, r7
   143f6:	2c00      	cmp	r4, #0
   143f8:	bf14      	ite	ne
   143fa:	4620      	movne	r0, r4
   143fc:	4608      	moveq	r0, r1
   143fe:	4633      	mov	r3, r6
   14400:	f013 fc59 	bl	27cb6 <net_buf_alloc_fixed>
	if (!buf) {
   14404:	4604      	mov	r4, r0
   14406:	b958      	cbnz	r0, 14420 <bt_conn_create_pdu_timeout+0x58>
		LOG_WRN("Unable to allocate buffer within timeout");
   14408:	4b0c      	ldr	r3, [pc, #48]	; (1443c <bt_conn_create_pdu_timeout+0x74>)
   1440a:	2202      	movs	r2, #2
   1440c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   14410:	490b      	ldr	r1, [pc, #44]	; (14440 <bt_conn_create_pdu_timeout+0x78>)
   14412:	4603      	mov	r3, r0
   14414:	9000      	str	r0, [sp, #0]
   14416:	f012 f8f6 	bl	26606 <z_log_msg_runtime_create.constprop.0>
}
   1441a:	4620      	mov	r0, r4
   1441c:	b005      	add	sp, #20
   1441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   14420:	1d69      	adds	r1, r5, #5
   14422:	300c      	adds	r0, #12
   14424:	f004 fe96 	bl	19154 <net_buf_simple_reserve>
	return buf;
   14428:	e7f7      	b.n	1441a <bt_conn_create_pdu_timeout+0x52>
   1442a:	bf00      	nop
   1442c:	0002e5ae 	.word	0x0002e5ae
   14430:	0002b6e9 	.word	0x0002b6e9
   14434:	0002e2b4 	.word	0x0002e2b4
   14438:	20008c38 	.word	0x20008c38
   1443c:	0002e5bd 	.word	0x0002e5bd
   14440:	0002a720 	.word	0x0002a720

00014444 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   14444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14446:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14448:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1444a:	e8d0 3faf 	lda	r3, [r0]
   1444e:	059b      	lsls	r3, r3, #22
   14450:	d511      	bpl.n	14476 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   14452:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14456:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   1445a:	429a      	cmp	r2, r3
   1445c:	d80b      	bhi.n	14476 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1445e:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   14462:	429a      	cmp	r2, r3
   14464:	d307      	bcc.n	14476 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14466:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   1446a:	429a      	cmp	r2, r3
   1446c:	d103      	bne.n	14476 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1446e:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14472:	f012 f8bd 	bl	265f0 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14476:	4b18      	ldr	r3, [pc, #96]	; (144d8 <notify_le_param_updated+0x94>)
   14478:	681d      	ldr	r5, [r3, #0]
   1447a:	b995      	cbnz	r5, 144a2 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1447c:	4d17      	ldr	r5, [pc, #92]	; (144dc <notify_le_param_updated+0x98>)
   1447e:	4f18      	ldr	r7, [pc, #96]	; (144e0 <notify_le_param_updated+0x9c>)
   14480:	42bd      	cmp	r5, r7
   14482:	d926      	bls.n	144d2 <notify_le_param_updated+0x8e>
   14484:	4917      	ldr	r1, [pc, #92]	; (144e4 <notify_le_param_updated+0xa0>)
   14486:	f240 53a5 	movw	r3, #1445	; 0x5a5
   1448a:	4a17      	ldr	r2, [pc, #92]	; (144e8 <notify_le_param_updated+0xa4>)
   1448c:	4817      	ldr	r0, [pc, #92]	; (144ec <notify_le_param_updated+0xa8>)
   1448e:	f010 fc46 	bl	24d1e <assert_print>
   14492:	4817      	ldr	r0, [pc, #92]	; (144f0 <notify_le_param_updated+0xac>)
   14494:	f010 fc43 	bl	24d1e <assert_print>
   14498:	f240 51a5 	movw	r1, #1445	; 0x5a5
   1449c:	4812      	ldr	r0, [pc, #72]	; (144e8 <notify_le_param_updated+0xa4>)
   1449e:	f010 fc37 	bl	24d10 <assert_post_action>
		if (cb->le_param_updated) {
   144a2:	68ee      	ldr	r6, [r5, #12]
   144a4:	b13e      	cbz	r6, 144b6 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   144a6:	4620      	mov	r0, r4
   144a8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   144ac:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   144b0:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   144b4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   144b6:	69ad      	ldr	r5, [r5, #24]
   144b8:	e7df      	b.n	1447a <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   144ba:	68ee      	ldr	r6, [r5, #12]
   144bc:	b13e      	cbz	r6, 144ce <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   144be:	4620      	mov	r0, r4
   144c0:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   144c4:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   144c8:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   144cc:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   144ce:	351c      	adds	r5, #28
   144d0:	e7d6      	b.n	14480 <notify_le_param_updated+0x3c>
   144d2:	d3f2      	bcc.n	144ba <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   144d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144d6:	bf00      	nop
   144d8:	20021080 	.word	0x20021080
   144dc:	0002a6ac 	.word	0x0002a6ac
   144e0:	0002a6c8 	.word	0x0002a6c8
   144e4:	0002e2e4 	.word	0x0002e2e4
   144e8:	0002e2b4 	.word	0x0002e2b4
   144ec:	0002b6e9 	.word	0x0002b6e9
   144f0:	0002c7cd 	.word	0x0002c7cd

000144f4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   144f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   144f8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   144fa:	4608      	mov	r0, r1
{
   144fc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   144fe:	f011 fe17 	bl	26130 <bt_le_conn_params_valid>
   14502:	4605      	mov	r5, r0
   14504:	b918      	cbnz	r0, 1450e <le_param_req+0x1a>
		return false;
   14506:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   14508:	4628      	mov	r0, r5
   1450a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1450e:	4b1b      	ldr	r3, [pc, #108]	; (1457c <le_param_req+0x88>)
   14510:	681e      	ldr	r6, [r3, #0]
   14512:	b99e      	cbnz	r6, 1453c <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14514:	4e1a      	ldr	r6, [pc, #104]	; (14580 <le_param_req+0x8c>)
   14516:	f8df 806c 	ldr.w	r8, [pc, #108]	; 14584 <le_param_req+0x90>
   1451a:	4546      	cmp	r6, r8
   1451c:	d927      	bls.n	1456e <le_param_req+0x7a>
   1451e:	491a      	ldr	r1, [pc, #104]	; (14588 <le_param_req+0x94>)
   14520:	f240 53ed 	movw	r3, #1517	; 0x5ed
   14524:	4a19      	ldr	r2, [pc, #100]	; (1458c <le_param_req+0x98>)
   14526:	481a      	ldr	r0, [pc, #104]	; (14590 <le_param_req+0x9c>)
   14528:	f010 fbf9 	bl	24d1e <assert_print>
   1452c:	4819      	ldr	r0, [pc, #100]	; (14594 <le_param_req+0xa0>)
   1452e:	f010 fbf6 	bl	24d1e <assert_print>
   14532:	f240 51ed 	movw	r1, #1517	; 0x5ed
   14536:	4815      	ldr	r0, [pc, #84]	; (1458c <le_param_req+0x98>)
   14538:	f010 fbea 	bl	24d10 <assert_post_action>
		if (!cb->le_param_req) {
   1453c:	68b3      	ldr	r3, [r6, #8]
   1453e:	b90b      	cbnz	r3, 14544 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   14540:	69b6      	ldr	r6, [r6, #24]
   14542:	e7e6      	b.n	14512 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   14544:	4621      	mov	r1, r4
   14546:	4638      	mov	r0, r7
   14548:	4798      	blx	r3
   1454a:	2800      	cmp	r0, #0
   1454c:	d0db      	beq.n	14506 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1454e:	4620      	mov	r0, r4
   14550:	f011 fdee 	bl	26130 <bt_le_conn_params_valid>
   14554:	2800      	cmp	r0, #0
   14556:	d1f3      	bne.n	14540 <le_param_req+0x4c>
   14558:	e7d5      	b.n	14506 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1455a:	4621      	mov	r1, r4
   1455c:	4638      	mov	r0, r7
   1455e:	4798      	blx	r3
   14560:	2800      	cmp	r0, #0
   14562:	d0d0      	beq.n	14506 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14564:	4620      	mov	r0, r4
   14566:	f011 fde3 	bl	26130 <bt_le_conn_params_valid>
   1456a:	b920      	cbnz	r0, 14576 <le_param_req+0x82>
   1456c:	e7cb      	b.n	14506 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1456e:	d2cb      	bcs.n	14508 <le_param_req+0x14>
		if (!cb->le_param_req) {
   14570:	68b3      	ldr	r3, [r6, #8]
   14572:	2b00      	cmp	r3, #0
   14574:	d1f1      	bne.n	1455a <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14576:	361c      	adds	r6, #28
   14578:	e7cf      	b.n	1451a <le_param_req+0x26>
   1457a:	bf00      	nop
   1457c:	20021080 	.word	0x20021080
   14580:	0002a6ac 	.word	0x0002a6ac
   14584:	0002a6c8 	.word	0x0002a6c8
   14588:	0002e2e4 	.word	0x0002e2e4
   1458c:	0002e2b4 	.word	0x0002e2b4
   14590:	0002b6e9 	.word	0x0002b6e9
   14594:	0002c7cd 	.word	0x0002c7cd

00014598 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   14598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1459c:	78c3      	ldrb	r3, [r0, #3]
{
   1459e:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   145a0:	b9db      	cbnz	r3, 145da <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   145a2:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   145a6:	4b18      	ldr	r3, [pc, #96]	; (14608 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   145a8:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   145ac:	681d      	ldr	r5, [r3, #0]
   145ae:	b9bd      	cbnz	r5, 145e0 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   145b0:	4d16      	ldr	r5, [pc, #88]	; (1460c <bt_conn_identity_resolved+0x74>)
   145b2:	4f17      	ldr	r7, [pc, #92]	; (14610 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   145b4:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   145b8:	42bd      	cmp	r5, r7
   145ba:	d921      	bls.n	14600 <bt_conn_identity_resolved+0x68>
   145bc:	4915      	ldr	r1, [pc, #84]	; (14614 <bt_conn_identity_resolved+0x7c>)
   145be:	f240 73bc 	movw	r3, #1980	; 0x7bc
   145c2:	4a15      	ldr	r2, [pc, #84]	; (14618 <bt_conn_identity_resolved+0x80>)
   145c4:	4815      	ldr	r0, [pc, #84]	; (1461c <bt_conn_identity_resolved+0x84>)
   145c6:	f010 fbaa 	bl	24d1e <assert_print>
   145ca:	4815      	ldr	r0, [pc, #84]	; (14620 <bt_conn_identity_resolved+0x88>)
   145cc:	f010 fba7 	bl	24d1e <assert_print>
   145d0:	f240 71bc 	movw	r1, #1980	; 0x7bc
   145d4:	4810      	ldr	r0, [pc, #64]	; (14618 <bt_conn_identity_resolved+0x80>)
   145d6:	f010 fb9b 	bl	24d10 <assert_post_action>
		rpa = &conn->le.init_addr;
   145da:	f100 0697 	add.w	r6, r0, #151	; 0x97
   145de:	e7e2      	b.n	145a6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   145e0:	692b      	ldr	r3, [r5, #16]
   145e2:	b11b      	cbz	r3, 145ec <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   145e4:	463a      	mov	r2, r7
   145e6:	4631      	mov	r1, r6
   145e8:	4620      	mov	r0, r4
   145ea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   145ec:	69ad      	ldr	r5, [r5, #24]
   145ee:	e7de      	b.n	145ae <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   145f0:	692b      	ldr	r3, [r5, #16]
   145f2:	b11b      	cbz	r3, 145fc <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   145f4:	4642      	mov	r2, r8
   145f6:	4631      	mov	r1, r6
   145f8:	4620      	mov	r0, r4
   145fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   145fc:	351c      	adds	r5, #28
   145fe:	e7db      	b.n	145b8 <bt_conn_identity_resolved+0x20>
   14600:	d3f6      	bcc.n	145f0 <bt_conn_identity_resolved+0x58>
		}
	}
}
   14602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14606:	bf00      	nop
   14608:	20021080 	.word	0x20021080
   1460c:	0002a6ac 	.word	0x0002a6ac
   14610:	0002a6c8 	.word	0x0002a6c8
   14614:	0002e2e4 	.word	0x0002e2e4
   14618:	0002e2b4 	.word	0x0002e2b4
   1461c:	0002b6e9 	.word	0x0002b6e9
   14620:	0002c7cd 	.word	0x0002c7cd

00014624 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   14624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   14626:	7a43      	ldrb	r3, [r0, #9]
{
   14628:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1462a:	7283      	strb	r3, [r0, #10]
{
   1462c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1462e:	f012 f906 	bl	2683e <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14632:	4b14      	ldr	r3, [pc, #80]	; (14684 <bt_conn_security_changed+0x60>)
   14634:	681d      	ldr	r5, [r3, #0]
   14636:	b995      	cbnz	r5, 1465e <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14638:	4d13      	ldr	r5, [pc, #76]	; (14688 <bt_conn_security_changed+0x64>)
   1463a:	4f14      	ldr	r7, [pc, #80]	; (1468c <bt_conn_security_changed+0x68>)
   1463c:	42bd      	cmp	r5, r7
   1463e:	d91e      	bls.n	1467e <bt_conn_security_changed+0x5a>
   14640:	4913      	ldr	r1, [pc, #76]	; (14690 <bt_conn_security_changed+0x6c>)
   14642:	f640 0328 	movw	r3, #2088	; 0x828
   14646:	4a13      	ldr	r2, [pc, #76]	; (14694 <bt_conn_security_changed+0x70>)
   14648:	4813      	ldr	r0, [pc, #76]	; (14698 <bt_conn_security_changed+0x74>)
   1464a:	f010 fb68 	bl	24d1e <assert_print>
   1464e:	4813      	ldr	r0, [pc, #76]	; (1469c <bt_conn_security_changed+0x78>)
   14650:	f010 fb65 	bl	24d1e <assert_print>
   14654:	f640 0128 	movw	r1, #2088	; 0x828
   14658:	480e      	ldr	r0, [pc, #56]	; (14694 <bt_conn_security_changed+0x70>)
   1465a:	f010 fb59 	bl	24d10 <assert_post_action>
		if (cb->security_changed) {
   1465e:	696b      	ldr	r3, [r5, #20]
   14660:	b11b      	cbz	r3, 1466a <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   14662:	4632      	mov	r2, r6
   14664:	4620      	mov	r0, r4
   14666:	7a61      	ldrb	r1, [r4, #9]
   14668:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1466a:	69ad      	ldr	r5, [r5, #24]
   1466c:	e7e3      	b.n	14636 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1466e:	696b      	ldr	r3, [r5, #20]
   14670:	b11b      	cbz	r3, 1467a <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   14672:	4632      	mov	r2, r6
   14674:	4620      	mov	r0, r4
   14676:	7a61      	ldrb	r1, [r4, #9]
   14678:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1467a:	351c      	adds	r5, #28
   1467c:	e7de      	b.n	1463c <bt_conn_security_changed+0x18>
   1467e:	d3f6      	bcc.n	1466e <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   14680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14682:	bf00      	nop
   14684:	20021080 	.word	0x20021080
   14688:	0002a6ac 	.word	0x0002a6ac
   1468c:	0002a6c8 	.word	0x0002a6c8
   14690:	0002e2e4 	.word	0x0002e2e4
   14694:	0002e2b4 	.word	0x0002e2b4
   14698:	0002b6e9 	.word	0x0002b6e9
   1469c:	0002c7cd 	.word	0x0002c7cd

000146a0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   146a0:	b538      	push	{r3, r4, r5, lr}
   146a2:	4605      	mov	r5, r0
   146a4:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   146a6:	480b      	ldr	r0, [pc, #44]	; (146d4 <bt_conn_add_le+0x34>)
   146a8:	2101      	movs	r1, #1
   146aa:	f7ff fb77 	bl	13d9c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   146ae:	b180      	cbz	r0, 146d2 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   146b0:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   146b2:	6823      	ldr	r3, [r4, #0]
   146b4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   146b8:	88a3      	ldrh	r3, [r4, #4]
   146ba:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   146be:	79a3      	ldrb	r3, [r4, #6]
   146c0:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   146c4:	2301      	movs	r3, #1
   146c6:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   146c8:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   146ca:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   146cc:	4b02      	ldr	r3, [pc, #8]	; (146d8 <bt_conn_add_le+0x38>)
   146ce:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   146d2:	bd38      	pop	{r3, r4, r5, pc}
   146d4:	20009898 	.word	0x20009898
   146d8:	00280018 	.word	0x00280018

000146dc <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   146dc:	b570      	push	{r4, r5, r6, lr}
   146de:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   146e0:	480a      	ldr	r0, [pc, #40]	; (1470c <bt_conn_lookup_addr_le+0x30>)
{
   146e2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   146e4:	f7ff fd06 	bl	140f4 <bt_conn_ref>
   146e8:	4604      	mov	r4, r0

		if (!conn) {
   146ea:	b120      	cbz	r0, 146f6 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   146ec:	7883      	ldrb	r3, [r0, #2]
   146ee:	2b01      	cmp	r3, #1
   146f0:	d004      	beq.n	146fc <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   146f2:	f7ff fd27 	bl	14144 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   146f6:	2400      	movs	r4, #0
}
   146f8:	4620      	mov	r0, r4
   146fa:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   146fc:	4632      	mov	r2, r6
   146fe:	4629      	mov	r1, r5
   14700:	f012 f815 	bl	2672e <bt_conn_is_peer_addr_le>
   14704:	2800      	cmp	r0, #0
   14706:	d1f7      	bne.n	146f8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   14708:	4620      	mov	r0, r4
   1470a:	e7f2      	b.n	146f2 <bt_conn_lookup_addr_le+0x16>
   1470c:	20009898 	.word	0x20009898

00014710 <bt_conn_exists_le>:
{
   14710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   14712:	f7ff ffe3 	bl	146dc <bt_conn_lookup_addr_le>
	if (conn) {
   14716:	4604      	mov	r4, r0
   14718:	b1a8      	cbz	r0, 14746 <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1471a:	7b43      	ldrb	r3, [r0, #13]
   1471c:	490b      	ldr	r1, [pc, #44]	; (1474c <bt_conn_exists_le+0x3c>)
   1471e:	2b08      	cmp	r3, #8
   14720:	bf96      	itet	ls
   14722:	4a0b      	ldrls	r2, [pc, #44]	; (14750 <bt_conn_exists_le+0x40>)
   14724:	4b0b      	ldrhi	r3, [pc, #44]	; (14754 <bt_conn_exists_le+0x44>)
   14726:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1472a:	2202      	movs	r2, #2
   1472c:	9303      	str	r3, [sp, #12]
   1472e:	4b0a      	ldr	r3, [pc, #40]	; (14758 <bt_conn_exists_le+0x48>)
   14730:	9302      	str	r3, [sp, #8]
   14732:	2300      	movs	r3, #0
   14734:	4618      	mov	r0, r3
   14736:	e9cd 3300 	strd	r3, r3, [sp]
   1473a:	f011 ff64 	bl	26606 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1473e:	4620      	mov	r0, r4
   14740:	f7ff fd00 	bl	14144 <bt_conn_unref>
		return true;
   14744:	2001      	movs	r0, #1
}
   14746:	b004      	add	sp, #16
   14748:	bd10      	pop	{r4, pc}
   1474a:	bf00      	nop
   1474c:	0002a720 	.word	0x0002a720
   14750:	0002b06c 	.word	0x0002b06c
   14754:	0002e47d 	.word	0x0002e47d
   14758:	0002e5e6 	.word	0x0002e5e6

0001475c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1475e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14760:	480e      	ldr	r0, [pc, #56]	; (1479c <bt_conn_lookup_state_le+0x40>)
{
   14762:	460e      	mov	r6, r1
   14764:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14766:	f7ff fcc5 	bl	140f4 <bt_conn_ref>

		if (!conn) {
   1476a:	4604      	mov	r4, r0
   1476c:	b120      	cbz	r0, 14778 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1476e:	7883      	ldrb	r3, [r0, #2]
   14770:	2b01      	cmp	r3, #1
   14772:	d003      	beq.n	1477c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   14774:	f7ff fce6 	bl	14144 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   14778:	2400      	movs	r4, #0
   1477a:	e00d      	b.n	14798 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1477c:	b136      	cbz	r6, 1478c <bt_conn_lookup_state_le+0x30>
   1477e:	4632      	mov	r2, r6
   14780:	4629      	mov	r1, r5
   14782:	f011 ffd4 	bl	2672e <bt_conn_is_peer_addr_le>
   14786:	b908      	cbnz	r0, 1478c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   14788:	4620      	mov	r0, r4
   1478a:	e7f3      	b.n	14774 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1478c:	7b63      	ldrb	r3, [r4, #13]
   1478e:	42bb      	cmp	r3, r7
   14790:	d1fa      	bne.n	14788 <bt_conn_lookup_state_le+0x2c>
   14792:	7a23      	ldrb	r3, [r4, #8]
   14794:	42ab      	cmp	r3, r5
   14796:	d1f7      	bne.n	14788 <bt_conn_lookup_state_le+0x2c>
}
   14798:	4620      	mov	r0, r4
   1479a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1479c:	20009898 	.word	0x20009898

000147a0 <send_conn_le_param_update>:
{
   147a0:	b538      	push	{r3, r4, r5, lr}
   147a2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   147a4:	4608      	mov	r0, r1
{
   147a6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   147a8:	f011 fcc2 	bl	26130 <bt_le_conn_params_valid>
   147ac:	b338      	cbz	r0, 147fe <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   147ae:	4b15      	ldr	r3, [pc, #84]	; (14804 <send_conn_le_param_update+0x64>)
   147b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   147b4:	0799      	lsls	r1, r3, #30
   147b6:	d407      	bmi.n	147c8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   147b8:	78e3      	ldrb	r3, [r4, #3]
   147ba:	b173      	cbz	r3, 147da <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   147bc:	4629      	mov	r1, r5
   147be:	4620      	mov	r0, r4
}
   147c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   147c4:	f000 bafc 	b.w	14dc0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   147c8:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   147cc:	079a      	lsls	r2, r3, #30
   147ce:	d5f3      	bpl.n	147b8 <send_conn_le_param_update+0x18>
   147d0:	1d23      	adds	r3, r4, #4
   147d2:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   147d6:	055b      	lsls	r3, r3, #21
   147d8:	d4ee      	bmi.n	147b8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   147da:	4629      	mov	r1, r5
   147dc:	4620      	mov	r0, r4
   147de:	f011 ffc8 	bl	26772 <bt_conn_le_conn_update>
		if (rc == 0) {
   147e2:	b958      	cbnz	r0, 147fc <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   147e4:	882b      	ldrh	r3, [r5, #0]
   147e6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   147ea:	886b      	ldrh	r3, [r5, #2]
   147ec:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   147f0:	88ab      	ldrh	r3, [r5, #4]
   147f2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   147f6:	88eb      	ldrh	r3, [r5, #6]
   147f8:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   147fc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   147fe:	f06f 0015 	mvn.w	r0, #21
   14802:	e7fb      	b.n	147fc <send_conn_le_param_update+0x5c>
   14804:	20008000 	.word	0x20008000

00014808 <deferred_work>:
{
   14808:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1480a:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   1480e:	4604      	mov	r4, r0
   14810:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   14812:	f1a0 0760 	sub.w	r7, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   14816:	bb7b      	cbnz	r3, 14878 <deferred_work+0x70>
		bt_l2cap_disconnected(conn);
   14818:	4638      	mov	r0, r7
   1481a:	f011 fff8 	bl	2680e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1481e:	4b3c      	ldr	r3, [pc, #240]	; (14910 <deferred_work+0x108>)
   14820:	681d      	ldr	r5, [r3, #0]
   14822:	b995      	cbnz	r5, 1484a <deferred_work+0x42>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14824:	4d3b      	ldr	r5, [pc, #236]	; (14914 <deferred_work+0x10c>)
   14826:	4e3c      	ldr	r6, [pc, #240]	; (14918 <deferred_work+0x110>)
   14828:	42b5      	cmp	r5, r6
   1482a:	d91e      	bls.n	1486a <deferred_work+0x62>
   1482c:	493b      	ldr	r1, [pc, #236]	; (1491c <deferred_work+0x114>)
   1482e:	f240 536c 	movw	r3, #1388	; 0x56c
   14832:	4a3b      	ldr	r2, [pc, #236]	; (14920 <deferred_work+0x118>)
   14834:	483b      	ldr	r0, [pc, #236]	; (14924 <deferred_work+0x11c>)
   14836:	f010 fa72 	bl	24d1e <assert_print>
   1483a:	483b      	ldr	r0, [pc, #236]	; (14928 <deferred_work+0x120>)
   1483c:	f010 fa6f 	bl	24d1e <assert_print>
   14840:	f240 516c 	movw	r1, #1388	; 0x56c
   14844:	4836      	ldr	r0, [pc, #216]	; (14920 <deferred_work+0x118>)
   14846:	f010 fa63 	bl	24d10 <assert_post_action>
		if (cb->disconnected) {
   1484a:	686b      	ldr	r3, [r5, #4]
   1484c:	b11b      	cbz	r3, 14856 <deferred_work+0x4e>
			cb->disconnected(conn, conn->err);
   1484e:	4638      	mov	r0, r7
   14850:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   14854:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14856:	69ad      	ldr	r5, [r5, #24]
   14858:	e7e3      	b.n	14822 <deferred_work+0x1a>
		if (cb->disconnected) {
   1485a:	686b      	ldr	r3, [r5, #4]
   1485c:	b11b      	cbz	r3, 14866 <deferred_work+0x5e>
			cb->disconnected(conn, conn->err);
   1485e:	4638      	mov	r0, r7
   14860:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   14864:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14866:	351c      	adds	r5, #28
   14868:	e7de      	b.n	14828 <deferred_work+0x20>
   1486a:	d3f6      	bcc.n	1485a <deferred_work+0x52>
		bt_conn_unref(conn);
   1486c:	4638      	mov	r0, r7
}
   1486e:	b007      	add	sp, #28
   14870:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   14874:	f7ff bc66 	b.w	14144 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   14878:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1487c:	2b01      	cmp	r3, #1
   1487e:	d11f      	bne.n	148c0 <deferred_work+0xb8>
	if (atomic_test_and_clear_bit(conn->flags,
   14880:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14884:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14888:	4628      	mov	r0, r5
   1488a:	f011 feb1 	bl	265f0 <atomic_and>
   1488e:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   14892:	d023      	beq.n	148dc <deferred_work+0xd4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14894:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   14896:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14898:	9304      	str	r3, [sp, #16]
   1489a:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   1489c:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1489e:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   148a0:	f7ff ff7e 	bl	147a0 <send_conn_le_param_update>
		if (!err) {
   148a4:	b970      	cbnz	r0, 148c4 <deferred_work+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   148a6:	f46f 7180 	mvn.w	r1, #256	; 0x100
   148aa:	4628      	mov	r0, r5
   148ac:	f011 fea0 	bl	265f0 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148b0:	e8d5 3fef 	ldaex	r3, [r5]
   148b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   148b8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   148bc:	2a00      	cmp	r2, #0
   148be:	d1f7      	bne.n	148b0 <deferred_work+0xa8>
}
   148c0:	b007      	add	sp, #28
   148c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   148c4:	4b19      	ldr	r3, [pc, #100]	; (1492c <deferred_work+0x124>)
   148c6:	9003      	str	r0, [sp, #12]
   148c8:	9302      	str	r3, [sp, #8]
   148ca:	2300      	movs	r3, #0
   148cc:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   148d0:	2202      	movs	r2, #2
   148d2:	4618      	mov	r0, r3
   148d4:	4916      	ldr	r1, [pc, #88]	; (14930 <deferred_work+0x128>)
   148d6:	f011 fe96 	bl	26606 <z_log_msg_runtime_create.constprop.0>
   148da:	e7e9      	b.n	148b0 <deferred_work+0xa8>
		param = BT_LE_CONN_PARAM(
   148dc:	4a15      	ldr	r2, [pc, #84]	; (14934 <deferred_work+0x12c>)
   148de:	ab04      	add	r3, sp, #16
   148e0:	6810      	ldr	r0, [r2, #0]
   148e2:	6851      	ldr	r1, [r2, #4]
   148e4:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   148e6:	4638      	mov	r0, r7
   148e8:	a904      	add	r1, sp, #16
   148ea:	f7ff ff59 	bl	147a0 <send_conn_le_param_update>
		if (!err) {
   148ee:	b940      	cbnz	r0, 14902 <deferred_work+0xfa>
   148f0:	e8d5 3fef 	ldaex	r3, [r5]
   148f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   148f8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   148fc:	2a00      	cmp	r2, #0
   148fe:	d0d7      	beq.n	148b0 <deferred_work+0xa8>
   14900:	e7f6      	b.n	148f0 <deferred_work+0xe8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   14902:	4b0d      	ldr	r3, [pc, #52]	; (14938 <deferred_work+0x130>)
   14904:	9003      	str	r0, [sp, #12]
   14906:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1490a:	9600      	str	r6, [sp, #0]
   1490c:	4633      	mov	r3, r6
   1490e:	e7df      	b.n	148d0 <deferred_work+0xc8>
   14910:	20021080 	.word	0x20021080
   14914:	0002a6ac 	.word	0x0002a6ac
   14918:	0002a6c8 	.word	0x0002a6c8
   1491c:	0002e2e4 	.word	0x0002e2e4
   14920:	0002e2b4 	.word	0x0002e2b4
   14924:	0002b6e9 	.word	0x0002b6e9
   14928:	0002c7cd 	.word	0x0002c7cd
   1492c:	0002e609 	.word	0x0002e609
   14930:	0002a720 	.word	0x0002a720
   14934:	0002a8a4 	.word	0x0002a8a4
   14938:	0002e62e 	.word	0x0002e62e

0001493c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1493c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1493e:	4801      	ldr	r0, [pc, #4]	; (14944 <bt_conn_create_frag_timeout+0x8>)
   14940:	f7ff bd42 	b.w	143c8 <bt_conn_create_pdu_timeout>
   14944:	20008cd4 	.word	0x20008cd4

00014948 <create_frag>:
{
   14948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1494c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1494e:	f04f 33ff 	mov.w	r3, #4294967295
   14952:	f04f 32ff 	mov.w	r2, #4294967295
   14956:	2000      	movs	r0, #0
{
   14958:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1495a:	f7ff ffef 	bl	1493c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1495e:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   14960:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14962:	2b07      	cmp	r3, #7
   14964:	f04f 0600 	mov.w	r6, #0
   14968:	d005      	beq.n	14976 <create_frag+0x2e>
		net_buf_unref(frag);
   1496a:	f004 fd05 	bl	19378 <net_buf_unref>
		return NULL;
   1496e:	4635      	mov	r5, r6
}
   14970:	4628      	mov	r0, r5
   14972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   14976:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   14978:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   1497c:	4e0c      	ldr	r6, [pc, #48]	; (149b0 <create_frag+0x68>)
   1497e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14980:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   14984:	f013 f9b1 	bl	27cea <net_buf_simple_tailroom>
   14988:	4580      	cmp	r8, r0
   1498a:	d20c      	bcs.n	149a6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1498c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14990:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   14994:	4632      	mov	r2, r6
   14996:	4638      	mov	r0, r7
   14998:	f013 f9af 	bl	27cfa <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1499c:	4631      	mov	r1, r6
   1499e:	4620      	mov	r0, r4
   149a0:	f004 fdd0 	bl	19544 <net_buf_simple_pull>
   149a4:	e7e4      	b.n	14970 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   149a6:	4638      	mov	r0, r7
   149a8:	f013 f99f 	bl	27cea <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   149ac:	b286      	uxth	r6, r0
   149ae:	e7ef      	b.n	14990 <create_frag+0x48>
   149b0:	20008000 	.word	0x20008000

000149b4 <bt_conn_process_tx>:
{
   149b4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   149b6:	7b43      	ldrb	r3, [r0, #13]
{
   149b8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   149ba:	b95b      	cbnz	r3, 149d4 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   149bc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   149c0:	3004      	adds	r0, #4
   149c2:	f011 fe15 	bl	265f0 <atomic_and>
   149c6:	0643      	lsls	r3, r0, #25
   149c8:	d504      	bpl.n	149d4 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   149ca:	4620      	mov	r0, r4
}
   149cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   149d0:	f7ff ba12 	b.w	13df8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   149d4:	2200      	movs	r2, #0
   149d6:	2300      	movs	r3, #0
   149d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   149dc:	f013 f970 	bl	27cc0 <net_buf_get>
	BT_ASSERT(buf);
   149e0:	4605      	mov	r5, r0
   149e2:	b960      	cbnz	r0, 149fe <bt_conn_process_tx+0x4a>
   149e4:	f240 331a 	movw	r3, #794	; 0x31a
   149e8:	4a22      	ldr	r2, [pc, #136]	; (14a74 <bt_conn_process_tx+0xc0>)
   149ea:	4923      	ldr	r1, [pc, #140]	; (14a78 <bt_conn_process_tx+0xc4>)
   149ec:	4823      	ldr	r0, [pc, #140]	; (14a7c <bt_conn_process_tx+0xc8>)
   149ee:	f010 f996 	bl	24d1e <assert_print>
   149f2:	4040      	eors	r0, r0
   149f4:	f380 8811 	msr	BASEPRI, r0
   149f8:	f04f 0003 	mov.w	r0, #3
   149fc:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   149fe:	4e20      	ldr	r6, [pc, #128]	; (14a80 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   14a00:	8a2a      	ldrh	r2, [r5, #16]
   14a02:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   14a06:	429a      	cmp	r2, r3
   14a08:	d807      	bhi.n	14a1a <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   14a0a:	2300      	movs	r3, #0
   14a0c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   14a0e:	4629      	mov	r1, r5
   14a10:	4620      	mov	r0, r4
   14a12:	f7ff f913 	bl	13c3c <send_frag>
	if (!send_buf(conn, buf)) {
   14a16:	b968      	cbnz	r0, 14a34 <bt_conn_process_tx+0x80>
   14a18:	e005      	b.n	14a26 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   14a1a:	4629      	mov	r1, r5
   14a1c:	4620      	mov	r0, r4
   14a1e:	f7ff ff93 	bl	14948 <create_frag>
	if (!frag) {
   14a22:	4601      	mov	r1, r0
   14a24:	b938      	cbnz	r0, 14a36 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   14a26:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14a28:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   14a2a:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   14a2c:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   14a2e:	f004 fca3 	bl	19378 <net_buf_unref>
		if (tx) {
   14a32:	b9ce      	cbnz	r6, 14a68 <bt_conn_process_tx+0xb4>
}
   14a34:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   14a36:	2301      	movs	r3, #1
   14a38:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14a3a:	4620      	mov	r0, r4
   14a3c:	f7ff f8fe 	bl	13c3c <send_frag>
   14a40:	2800      	cmp	r0, #0
   14a42:	d0f0      	beq.n	14a26 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   14a44:	8a2a      	ldrh	r2, [r5, #16]
   14a46:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   14a4a:	429a      	cmp	r2, r3
   14a4c:	d802      	bhi.n	14a54 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   14a4e:	2300      	movs	r3, #0
   14a50:	2203      	movs	r2, #3
   14a52:	e7dc      	b.n	14a0e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   14a54:	4629      	mov	r1, r5
   14a56:	4620      	mov	r0, r4
   14a58:	f7ff ff76 	bl	14948 <create_frag>
		if (!frag) {
   14a5c:	4601      	mov	r1, r0
   14a5e:	2800      	cmp	r0, #0
   14a60:	d0e1      	beq.n	14a26 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14a62:	2301      	movs	r3, #1
   14a64:	461a      	mov	r2, r3
   14a66:	e7e8      	b.n	14a3a <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   14a68:	4631      	mov	r1, r6
   14a6a:	4620      	mov	r0, r4
}
   14a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   14a70:	f7ff b8be 	b.w	13bf0 <conn_tx_destroy>
   14a74:	0002e2b4 	.word	0x0002e2b4
   14a78:	0002f381 	.word	0x0002f381
   14a7c:	0002b6e9 	.word	0x0002b6e9
   14a80:	20008000 	.word	0x20008000

00014a84 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   14a84:	4b0b      	ldr	r3, [pc, #44]	; (14ab4 <bt_conn_auth_cb_register+0x30>)
   14a86:	b158      	cbz	r0, 14aa0 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   14a88:	681a      	ldr	r2, [r3, #0]
   14a8a:	b962      	cbnz	r2, 14aa6 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   14a8c:	6902      	ldr	r2, [r0, #16]
   14a8e:	b93a      	cbnz	r2, 14aa0 <bt_conn_auth_cb_register+0x1c>
   14a90:	6802      	ldr	r2, [r0, #0]
   14a92:	b95a      	cbnz	r2, 14aac <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   14a94:	6842      	ldr	r2, [r0, #4]
   14a96:	b94a      	cbnz	r2, 14aac <bt_conn_auth_cb_register+0x28>
   14a98:	6882      	ldr	r2, [r0, #8]
   14a9a:	b93a      	cbnz	r2, 14aac <bt_conn_auth_cb_register+0x28>
   14a9c:	6942      	ldr	r2, [r0, #20]
   14a9e:	b92a      	cbnz	r2, 14aac <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   14aa0:	6018      	str	r0, [r3, #0]
		return 0;
   14aa2:	2000      	movs	r0, #0
   14aa4:	4770      	bx	lr
		return -EALREADY;
   14aa6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14aaa:	4770      	bx	lr
		return -EINVAL;
   14aac:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   14ab0:	4770      	bx	lr
   14ab2:	bf00      	nop
   14ab4:	2002108c 	.word	0x2002108c

00014ab8 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   14ab8:	b168      	cbz	r0, 14ad6 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   14aba:	2300      	movs	r3, #0
   14abc:	60c3      	str	r3, [r0, #12]
	return list->tail;
   14abe:	4b07      	ldr	r3, [pc, #28]	; (14adc <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   14ac0:	f100 020c 	add.w	r2, r0, #12
   14ac4:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   14ac6:	b919      	cbnz	r1, 14ad0 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   14ac8:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   14acc:	2000      	movs	r0, #0
   14ace:	4770      	bx	lr
	parent->next = child;
   14ad0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   14ad2:	605a      	str	r2, [r3, #4]
}
   14ad4:	e7fa      	b.n	14acc <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   14ad6:	f06f 0015 	mvn.w	r0, #21
}
   14ada:	4770      	bx	lr
   14adc:	20021084 	.word	0x20021084

00014ae0 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   14ae0:	b910      	cbnz	r0, 14ae8 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   14ae2:	4802      	ldr	r0, [pc, #8]	; (14aec <bt_conn_lookup_index+0xc>)
   14ae4:	f7ff bb06 	b.w	140f4 <bt_conn_ref>
}
   14ae8:	2000      	movs	r0, #0
   14aea:	4770      	bx	lr
   14aec:	20009898 	.word	0x20009898

00014af0 <bt_conn_init>:

int bt_conn_init(void)
{
   14af0:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   14af2:	480a      	ldr	r0, [pc, #40]	; (14b1c <bt_conn_init+0x2c>)
   14af4:	f014 fca3 	bl	2943e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   14af8:	4909      	ldr	r1, [pc, #36]	; (14b20 <bt_conn_init+0x30>)
   14afa:	4808      	ldr	r0, [pc, #32]	; (14b1c <bt_conn_init+0x2c>)
   14afc:	f014 fcac 	bl	29458 <k_queue_append>
   14b00:	4908      	ldr	r1, [pc, #32]	; (14b24 <bt_conn_init+0x34>)
   14b02:	4806      	ldr	r0, [pc, #24]	; (14b1c <bt_conn_init+0x2c>)
   14b04:	f014 fca8 	bl	29458 <k_queue_append>
	}

	bt_att_init();
   14b08:	f001 f8e4 	bl	15cd4 <bt_att_init>

	err = bt_smp_init();
   14b0c:	f003 ffb4 	bl	18a78 <bt_smp_init>
	if (err) {
   14b10:	4604      	mov	r4, r0
   14b12:	b908      	cbnz	r0, 14b18 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   14b14:	f011 fede 	bl	268d4 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   14b18:	4620      	mov	r0, r4
   14b1a:	bd10      	pop	{r4, pc}
   14b1c:	20008be8 	.word	0x20008be8
   14b20:	20021060 	.word	0x20021060
   14b24:	20021070 	.word	0x20021070

00014b28 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   14b28:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   14b2a:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   14b2c:	4605      	mov	r5, r0
   14b2e:	460f      	mov	r7, r1
   14b30:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   14b32:	2104      	movs	r1, #4
   14b34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14b38:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   14b3a:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   14b3c:	f7ff fc44 	bl	143c8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   14b40:	4604      	mov	r4, r0
   14b42:	b960      	cbnz	r0, 14b5e <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   14b44:	4b0a      	ldr	r3, [pc, #40]	; (14b70 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   14b46:	2201      	movs	r2, #1
   14b48:	e9cd 0301 	strd	r0, r3, [sp, #4]
   14b4c:	4909      	ldr	r1, [pc, #36]	; (14b74 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   14b4e:	4603      	mov	r3, r0
   14b50:	9503      	str	r5, [sp, #12]
   14b52:	9000      	str	r0, [sp, #0]
   14b54:	f011 fe36 	bl	267c4 <z_log_msg_runtime_create.constprop.0>
}
   14b58:	4620      	mov	r0, r4
   14b5a:	b005      	add	sp, #20
   14b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   14b5e:	2104      	movs	r1, #4
   14b60:	300c      	adds	r0, #12
   14b62:	f004 fd2b 	bl	195bc <net_buf_simple_add>
	hdr->code = code;
   14b66:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   14b68:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   14b6a:	8046      	strh	r6, [r0, #2]
	return buf;
   14b6c:	e7f4      	b.n	14b58 <l2cap_create_le_sig_pdu.constprop.0+0x30>
   14b6e:	bf00      	nop
   14b70:	0002e6d1 	.word	0x0002e6d1
   14b74:	0002a768 	.word	0x0002a768

00014b78 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   14b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   14b7a:	4c0b      	ldr	r4, [pc, #44]	; (14ba8 <l2cap_accept+0x30>)
   14b7c:	2300      	movs	r3, #0
   14b7e:	6822      	ldr	r2, [r4, #0]
   14b80:	b92a      	cbnz	r2, 14b8e <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   14b82:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   14b84:	4b09      	ldr	r3, [pc, #36]	; (14bac <l2cap_accept+0x34>)
   14b86:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   14b88:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   14b8a:	b004      	add	sp, #16
   14b8c:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   14b8e:	4a08      	ldr	r2, [pc, #32]	; (14bb0 <l2cap_accept+0x38>)
   14b90:	9003      	str	r0, [sp, #12]
   14b92:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14b96:	4618      	mov	r0, r3
   14b98:	2201      	movs	r2, #1
   14b9a:	4906      	ldr	r1, [pc, #24]	; (14bb4 <l2cap_accept+0x3c>)
   14b9c:	9300      	str	r3, [sp, #0]
   14b9e:	f011 fe11 	bl	267c4 <z_log_msg_runtime_create.constprop.0>
   14ba2:	f06f 000b 	mvn.w	r0, #11
   14ba6:	e7f0      	b.n	14b8a <l2cap_accept+0x12>
   14ba8:	20021090 	.word	0x20021090
   14bac:	0002b0b0 	.word	0x0002b0b0
   14bb0:	0002e6f9 	.word	0x0002e6f9
   14bb4:	0002a768 	.word	0x0002a768

00014bb8 <bt_l2cap_connected>:
{
   14bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14bba:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14bbc:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14bbe:	4d27      	ldr	r5, [pc, #156]	; (14c5c <bt_l2cap_connected+0xa4>)
   14bc0:	4f27      	ldr	r7, [pc, #156]	; (14c60 <bt_l2cap_connected+0xa8>)
   14bc2:	42bd      	cmp	r5, r7
   14bc4:	d946      	bls.n	14c54 <bt_l2cap_connected+0x9c>
   14bc6:	4927      	ldr	r1, [pc, #156]	; (14c64 <bt_l2cap_connected+0xac>)
   14bc8:	f240 1381 	movw	r3, #385	; 0x181
   14bcc:	4a26      	ldr	r2, [pc, #152]	; (14c68 <bt_l2cap_connected+0xb0>)
   14bce:	4827      	ldr	r0, [pc, #156]	; (14c6c <bt_l2cap_connected+0xb4>)
   14bd0:	f010 f8a5 	bl	24d1e <assert_print>
   14bd4:	4826      	ldr	r0, [pc, #152]	; (14c70 <bt_l2cap_connected+0xb8>)
   14bd6:	f010 f8a2 	bl	24d1e <assert_print>
   14bda:	f240 1181 	movw	r1, #385	; 0x181
   14bde:	4822      	ldr	r0, [pc, #136]	; (14c68 <bt_l2cap_connected+0xb0>)
   14be0:	f010 f896 	bl	24d10 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   14be4:	4620      	mov	r0, r4
   14be6:	686b      	ldr	r3, [r5, #4]
   14be8:	a901      	add	r1, sp, #4
   14bea:	4798      	blx	r3
   14bec:	2800      	cmp	r0, #0
   14bee:	db2c      	blt.n	14c4a <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   14bf0:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   14bf2:	882a      	ldrh	r2, [r5, #0]
   14bf4:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   14bf6:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   14bf8:	68a8      	ldr	r0, [r5, #8]
   14bfa:	f103 0210 	add.w	r2, r3, #16
   14bfe:	e8d2 1fef 	ldaex	r1, [r2]
   14c02:	e8c2 6fec 	stlex	ip, r6, [r2]
   14c06:	f1bc 0f00 	cmp.w	ip, #0
   14c0a:	d1f8      	bne.n	14bfe <bt_l2cap_connected+0x46>
	parent->next = child;
   14c0c:	609e      	str	r6, [r3, #8]
	return list->tail;
   14c0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   14c10:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   14c14:	b9d9      	cbnz	r1, 14c4e <bt_l2cap_connected+0x96>
	list->head = node;
   14c16:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   14c1a:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   14c1c:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   14c1e:	9801      	ldr	r0, [sp, #4]
   14c20:	6843      	ldr	r3, [r0, #4]
   14c22:	681b      	ldr	r3, [r3, #0]
   14c24:	b103      	cbz	r3, 14c28 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   14c26:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c28:	9b01      	ldr	r3, [sp, #4]
   14c2a:	3310      	adds	r3, #16
   14c2c:	e8d3 1fef 	ldaex	r1, [r3]
   14c30:	f041 0101 	orr.w	r1, r1, #1
   14c34:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14c38:	2a00      	cmp	r2, #0
   14c3a:	d1f7      	bne.n	14c2c <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   14c3c:	9801      	ldr	r0, [sp, #4]
   14c3e:	6843      	ldr	r3, [r0, #4]
   14c40:	69db      	ldr	r3, [r3, #28]
   14c42:	b113      	cbz	r3, 14c4a <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   14c44:	f100 0110 	add.w	r1, r0, #16
   14c48:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14c4a:	350c      	adds	r5, #12
   14c4c:	e7b9      	b.n	14bc2 <bt_l2cap_connected+0xa>
	parent->next = child;
   14c4e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   14c50:	65a2      	str	r2, [r4, #88]	; 0x58
}
   14c52:	e7e2      	b.n	14c1a <bt_l2cap_connected+0x62>
   14c54:	d3c6      	bcc.n	14be4 <bt_l2cap_connected+0x2c>
}
   14c56:	b003      	add	sp, #12
   14c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c5a:	bf00      	nop
   14c5c:	0002a688 	.word	0x0002a688
   14c60:	0002a6ac 	.word	0x0002a6ac
   14c64:	0002e751 	.word	0x0002e751
   14c68:	0002e720 	.word	0x0002e720
   14c6c:	0002b6e9 	.word	0x0002b6e9
   14c70:	0002c7cd 	.word	0x0002c7cd

00014c74 <l2cap_recv>:
{
   14c74:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   14c76:	8a0b      	ldrh	r3, [r1, #16]
{
   14c78:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   14c7a:	2b03      	cmp	r3, #3
{
   14c7c:	460c      	mov	r4, r1
   14c7e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   14c80:	d803      	bhi.n	14c8a <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   14c82:	4b2d      	ldr	r3, [pc, #180]	; (14d38 <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   14c84:	9302      	str	r3, [sp, #8]
   14c86:	2300      	movs	r3, #0
   14c88:	e01c      	b.n	14cc4 <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   14c8a:	2104      	movs	r1, #4
   14c8c:	f104 000c 	add.w	r0, r4, #12
   14c90:	f004 fc76 	bl	19580 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   14c94:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   14c96:	8842      	ldrh	r2, [r0, #2]
   14c98:	4605      	mov	r5, r0
	if (buf->len != len) {
   14c9a:	429a      	cmp	r2, r3
   14c9c:	d00e      	beq.n	14cbc <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   14c9e:	e9cd 3203 	strd	r3, r2, [sp, #12]
   14ca2:	4b26      	ldr	r3, [pc, #152]	; (14d3c <l2cap_recv+0xc8>)
   14ca4:	2201      	movs	r2, #1
   14ca6:	9302      	str	r3, [sp, #8]
   14ca8:	2300      	movs	r3, #0
   14caa:	4925      	ldr	r1, [pc, #148]	; (14d40 <l2cap_recv+0xcc>)
   14cac:	4618      	mov	r0, r3
   14cae:	e9cd 3300 	strd	r3, r3, [sp]
   14cb2:	f011 fd87 	bl	267c4 <z_log_msg_runtime_create.constprop.0>
}
   14cb6:	2000      	movs	r0, #0
   14cb8:	b006      	add	sp, #24
   14cba:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   14cbc:	7843      	ldrb	r3, [r0, #1]
   14cbe:	b94b      	cbnz	r3, 14cd4 <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   14cc0:	4a20      	ldr	r2, [pc, #128]	; (14d44 <l2cap_recv+0xd0>)
   14cc2:	9202      	str	r2, [sp, #8]
   14cc4:	2201      	movs	r2, #1
   14cc6:	4618      	mov	r0, r3
   14cc8:	e9cd 3300 	strd	r3, r3, [sp]
   14ccc:	491c      	ldr	r1, [pc, #112]	; (14d40 <l2cap_recv+0xcc>)
   14cce:	f011 fd79 	bl	267c4 <z_log_msg_runtime_create.constprop.0>
		return 0;
   14cd2:	e7f0      	b.n	14cb6 <l2cap_recv+0x42>
	switch (hdr->code) {
   14cd4:	7803      	ldrb	r3, [r0, #0]
   14cd6:	2b01      	cmp	r3, #1
   14cd8:	d0ed      	beq.n	14cb6 <l2cap_recv+0x42>
   14cda:	2b13      	cmp	r3, #19
   14cdc:	d103      	bne.n	14ce6 <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   14cde:	2a01      	cmp	r2, #1
   14ce0:	d8e9      	bhi.n	14cb6 <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   14ce2:	4b19      	ldr	r3, [pc, #100]	; (14d48 <l2cap_recv+0xd4>)
   14ce4:	e7ce      	b.n	14c84 <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   14ce6:	2400      	movs	r4, #0
	switch (hdr->code) {
   14ce8:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   14cea:	4b18      	ldr	r3, [pc, #96]	; (14d4c <l2cap_recv+0xd8>)
   14cec:	2202      	movs	r2, #2
   14cee:	4620      	mov	r0, r4
   14cf0:	4913      	ldr	r1, [pc, #76]	; (14d40 <l2cap_recv+0xcc>)
   14cf2:	9302      	str	r3, [sp, #8]
   14cf4:	e9cd 4400 	strd	r4, r4, [sp]
   14cf8:	4623      	mov	r3, r4
   14cfa:	f011 fd63 	bl	267c4 <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   14cfe:	7869      	ldrb	r1, [r5, #1]
   14d00:	2202      	movs	r2, #2
   14d02:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   14d04:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   14d06:	f7ff ff0f 	bl	14b28 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   14d0a:	4605      	mov	r5, r0
   14d0c:	2800      	cmp	r0, #0
   14d0e:	d0d2      	beq.n	14cb6 <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   14d10:	2102      	movs	r1, #2
   14d12:	300c      	adds	r0, #12
   14d14:	f004 fc52 	bl	195bc <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14d18:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   14d1a:	7004      	strb	r4, [r0, #0]
   14d1c:	7044      	strb	r4, [r0, #1]
   14d1e:	462a      	mov	r2, r5
   14d20:	2105      	movs	r1, #5
   14d22:	4630      	mov	r0, r6
   14d24:	9400      	str	r4, [sp, #0]
   14d26:	f011 fdaa 	bl	2687e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   14d2a:	2800      	cmp	r0, #0
   14d2c:	d0c3      	beq.n	14cb6 <l2cap_recv+0x42>
		net_buf_unref(buf);
   14d2e:	4628      	mov	r0, r5
   14d30:	f004 fb22 	bl	19378 <net_buf_unref>
   14d34:	e7bf      	b.n	14cb6 <l2cap_recv+0x42>
   14d36:	bf00      	nop
   14d38:	0002e778 	.word	0x0002e778
   14d3c:	0002e796 	.word	0x0002e796
   14d40:	0002a768 	.word	0x0002a768
   14d44:	0002e7b7 	.word	0x0002e7b7
   14d48:	0002e7d8 	.word	0x0002e7d8
   14d4c:	0002e7f4 	.word	0x0002e7f4

00014d50 <bt_l2cap_recv>:
{
   14d50:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   14d52:	8a0b      	ldrh	r3, [r1, #16]
{
   14d54:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   14d56:	2b03      	cmp	r3, #3
{
   14d58:	460c      	mov	r4, r1
   14d5a:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   14d5c:	d80f      	bhi.n	14d7e <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   14d5e:	4b15      	ldr	r3, [pc, #84]	; (14db4 <bt_l2cap_recv+0x64>)
   14d60:	2201      	movs	r2, #1
   14d62:	9302      	str	r3, [sp, #8]
   14d64:	2300      	movs	r3, #0
   14d66:	4914      	ldr	r1, [pc, #80]	; (14db8 <bt_l2cap_recv+0x68>)
   14d68:	4618      	mov	r0, r3
   14d6a:	e9cd 3300 	strd	r3, r3, [sp]
   14d6e:	f011 fd29 	bl	267c4 <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   14d72:	4620      	mov	r0, r4
}
   14d74:	b005      	add	sp, #20
   14d76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   14d7a:	f004 bafd 	b.w	19378 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   14d7e:	2104      	movs	r1, #4
   14d80:	f104 000c 	add.w	r0, r4, #12
   14d84:	f004 fbfc 	bl	19580 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   14d88:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   14d8a:	4628      	mov	r0, r5
   14d8c:	f011 fd99 	bl	268c2 <bt_l2cap_le_lookup_rx_cid>
   14d90:	4603      	mov	r3, r0
	if (!chan) {
   14d92:	b948      	cbnz	r0, 14da8 <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   14d94:	4a09      	ldr	r2, [pc, #36]	; (14dbc <bt_l2cap_recv+0x6c>)
   14d96:	9103      	str	r1, [sp, #12]
   14d98:	e9cd 0201 	strd	r0, r2, [sp, #4]
   14d9c:	4906      	ldr	r1, [pc, #24]	; (14db8 <bt_l2cap_recv+0x68>)
   14d9e:	2202      	movs	r2, #2
   14da0:	9000      	str	r0, [sp, #0]
   14da2:	f011 fd0f 	bl	267c4 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   14da6:	e7e4      	b.n	14d72 <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   14da8:	6843      	ldr	r3, [r0, #4]
   14daa:	4621      	mov	r1, r4
   14dac:	695b      	ldr	r3, [r3, #20]
   14dae:	4798      	blx	r3
   14db0:	e7df      	b.n	14d72 <bt_l2cap_recv+0x22>
   14db2:	bf00      	nop
   14db4:	0002e81c 	.word	0x0002e81c
   14db8:	0002a768 	.word	0x0002a768
   14dbc:	0002e839 	.word	0x0002e839

00014dc0 <bt_l2cap_update_conn_param>:
{
   14dc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   14dc2:	4b17      	ldr	r3, [pc, #92]	; (14e20 <bt_l2cap_update_conn_param+0x60>)
{
   14dc4:	460e      	mov	r6, r1
	ident++;
   14dc6:	7819      	ldrb	r1, [r3, #0]
{
   14dc8:	4605      	mov	r5, r0
	ident++;
   14dca:	3101      	adds	r1, #1
   14dcc:	b2c9      	uxtb	r1, r1
   14dce:	2901      	cmp	r1, #1
   14dd0:	bf38      	it	cc
   14dd2:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14dd4:	2208      	movs	r2, #8
   14dd6:	2012      	movs	r0, #18
	ident++;
   14dd8:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14dda:	f7ff fea5 	bl	14b28 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   14dde:	4604      	mov	r4, r0
   14de0:	b1d0      	cbz	r0, 14e18 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   14de2:	2108      	movs	r1, #8
   14de4:	300c      	adds	r0, #12
   14de6:	f004 fbe9 	bl	195bc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14dea:	8833      	ldrh	r3, [r6, #0]
   14dec:	4622      	mov	r2, r4
   14dee:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14df0:	8873      	ldrh	r3, [r6, #2]
   14df2:	2105      	movs	r1, #5
   14df4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   14df6:	88b3      	ldrh	r3, [r6, #4]
   14df8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14dfa:	88f3      	ldrh	r3, [r6, #6]
   14dfc:	80c3      	strh	r3, [r0, #6]
   14dfe:	2300      	movs	r3, #0
   14e00:	4628      	mov	r0, r5
   14e02:	9300      	str	r3, [sp, #0]
   14e04:	f011 fd3b 	bl	2687e <bt_l2cap_send_cb>
	if (err) {
   14e08:	4605      	mov	r5, r0
   14e0a:	b110      	cbz	r0, 14e12 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   14e0c:	4620      	mov	r0, r4
   14e0e:	f004 fab3 	bl	19378 <net_buf_unref>
}
   14e12:	4628      	mov	r0, r5
   14e14:	b002      	add	sp, #8
   14e16:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14e18:	f06f 050b 	mvn.w	r5, #11
   14e1c:	e7f9      	b.n	14e12 <bt_l2cap_update_conn_param+0x52>
   14e1e:	bf00      	nop
   14e20:	20021e62 	.word	0x20021e62

00014e24 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   14e24:	2823      	cmp	r0, #35	; 0x23
   14e26:	d81f      	bhi.n	14e68 <att_op_get_type+0x44>
   14e28:	281a      	cmp	r0, #26
   14e2a:	d804      	bhi.n	14e36 <att_op_get_type+0x12>
   14e2c:	1e43      	subs	r3, r0, #1
   14e2e:	2b18      	cmp	r3, #24
   14e30:	d90e      	bls.n	14e50 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   14e32:	2006      	movs	r0, #6
   14e34:	4770      	bx	lr
	switch (op) {
   14e36:	f1a0 031b 	sub.w	r3, r0, #27
   14e3a:	2b08      	cmp	r3, #8
   14e3c:	d81e      	bhi.n	14e7c <att_op_get_type+0x58>
   14e3e:	e8df f003 	tbb	[pc, r3]
   14e42:	1d05      	.short	0x1d05
   14e44:	191d231b 	.word	0x191d231b
   14e48:	1d25      	.short	0x1d25
   14e4a:	05          	.byte	0x05
   14e4b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   14e4c:	2003      	movs	r0, #3
   14e4e:	4770      	bx	lr
   14e50:	2301      	movs	r3, #1
	switch (op) {
   14e52:	4a0f      	ldr	r2, [pc, #60]	; (14e90 <att_op_get_type+0x6c>)
   14e54:	4083      	lsls	r3, r0
   14e56:	401a      	ands	r2, r3
   14e58:	b9c2      	cbnz	r2, 14e8c <att_op_get_type+0x68>
   14e5a:	4a0e      	ldr	r2, [pc, #56]	; (14e94 <att_op_get_type+0x70>)
   14e5c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   14e5e:	2a00      	cmp	r2, #0
   14e60:	bf14      	ite	ne
   14e62:	2001      	movne	r0, #1
   14e64:	2006      	moveq	r0, #6
   14e66:	4770      	bx	lr
	switch (op) {
   14e68:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   14e6c:	2b52      	cmp	r3, #82	; 0x52
   14e6e:	d105      	bne.n	14e7c <att_op_get_type+0x58>
		return ATT_COMMAND;
   14e70:	2000      	movs	r0, #0
}
   14e72:	4770      	bx	lr
		return ATT_REQUEST;
   14e74:	2001      	movs	r0, #1
   14e76:	4770      	bx	lr
		return ATT_INDICATION;
   14e78:	2005      	movs	r0, #5
   14e7a:	4770      	bx	lr
		return ATT_COMMAND;
   14e7c:	f010 0f40 	tst.w	r0, #64	; 0x40
   14e80:	bf0c      	ite	eq
   14e82:	2006      	moveq	r0, #6
   14e84:	2000      	movne	r0, #0
   14e86:	4770      	bx	lr
	switch (op) {
   14e88:	2004      	movs	r0, #4
   14e8a:	4770      	bx	lr
		return ATT_RESPONSE;
   14e8c:	2002      	movs	r0, #2
   14e8e:	4770      	bx	lr
   14e90:	028aaaaa 	.word	0x028aaaaa
   14e94:	01455554 	.word	0x01455554

00014e98 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14e98:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14e9a:	3804      	subs	r0, #4
   14e9c:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14e9e:	a901      	add	r1, sp, #4
   14ea0:	4802      	ldr	r0, [pc, #8]	; (14eac <bt_att_released+0x14>)
   14ea2:	f00a fb8f 	bl	1f5c4 <k_mem_slab_free>
}
   14ea6:	b003      	add	sp, #12
   14ea8:	f85d fb04 	ldr.w	pc, [sp], #4
   14eac:	20008a28 	.word	0x20008a28

00014eb0 <tx_meta_data_free>:
{
   14eb0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   14eb2:	4604      	mov	r4, r0
   14eb4:	b948      	cbnz	r0, 14eca <tx_meta_data_free+0x1a>
   14eb6:	490a      	ldr	r1, [pc, #40]	; (14ee0 <tx_meta_data_free+0x30>)
   14eb8:	480a      	ldr	r0, [pc, #40]	; (14ee4 <tx_meta_data_free+0x34>)
   14eba:	23a6      	movs	r3, #166	; 0xa6
   14ebc:	4a0a      	ldr	r2, [pc, #40]	; (14ee8 <tx_meta_data_free+0x38>)
   14ebe:	f00f ff2e 	bl	24d1e <assert_print>
   14ec2:	21a6      	movs	r1, #166	; 0xa6
   14ec4:	4808      	ldr	r0, [pc, #32]	; (14ee8 <tx_meta_data_free+0x38>)
   14ec6:	f00f ff23 	bl	24d10 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   14eca:	2100      	movs	r1, #0
   14ecc:	2214      	movs	r2, #20
   14ece:	f014 fcc6 	bl	2985e <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   14ed2:	4621      	mov	r1, r4
}
   14ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   14ed8:	4804      	ldr	r0, [pc, #16]	; (14eec <tx_meta_data_free+0x3c>)
   14eda:	f014 babd 	b.w	29458 <k_queue_append>
   14ede:	bf00      	nop
   14ee0:	0002e3c6 	.word	0x0002e3c6
   14ee4:	0002b6e9 	.word	0x0002b6e9
   14ee8:	0002e86e 	.word	0x0002e86e
   14eec:	20008bcc 	.word	0x20008bcc

00014ef0 <find_type_cb>:
{
   14ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14ef4:	f642 0301 	movw	r3, #10241	; 0x2801
   14ef8:	2500      	movs	r5, #0
{
   14efa:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   14efc:	f8d2 9000 	ldr.w	r9, [r2]
{
   14f00:	4607      	mov	r7, r0
   14f02:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14f04:	6800      	ldr	r0, [r0, #0]
   14f06:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   14f08:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   14f0c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14f0e:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   14f12:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   14f16:	f010 ffe2 	bl	25ede <bt_uuid_cmp>
   14f1a:	2800      	cmp	r0, #0
   14f1c:	d067      	beq.n	14fee <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   14f1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14f22:	6838      	ldr	r0, [r7, #0]
   14f24:	a90d      	add	r1, sp, #52	; 0x34
   14f26:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   14f2a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   14f2e:	f010 ffd6 	bl	25ede <bt_uuid_cmp>
   14f32:	b138      	cbz	r0, 14f44 <find_type_cb+0x54>
		if (data->group &&
   14f34:	68a3      	ldr	r3, [r4, #8]
   14f36:	b11b      	cbz	r3, 14f40 <find_type_cb+0x50>
   14f38:	885a      	ldrh	r2, [r3, #2]
   14f3a:	42b2      	cmp	r2, r6
   14f3c:	d200      	bcs.n	14f40 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   14f3e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   14f40:	2001      	movs	r0, #1
   14f42:	e009      	b.n	14f58 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   14f44:	6861      	ldr	r1, [r4, #4]
   14f46:	4608      	mov	r0, r1
   14f48:	f011 fccf 	bl	268ea <net_buf_frags_len>
   14f4c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   14f50:	1a1b      	subs	r3, r3, r0
   14f52:	2b03      	cmp	r3, #3
   14f54:	d803      	bhi.n	14f5e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   14f56:	2000      	movs	r0, #0
}
   14f58:	b013      	add	sp, #76	; 0x4c
   14f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   14f5e:	4608      	mov	r0, r1
   14f60:	f004 fa66 	bl	19430 <net_buf_frag_last>
   14f64:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   14f66:	6860      	ldr	r0, [r4, #4]
   14f68:	f011 fcbf 	bl	268ea <net_buf_frags_len>
   14f6c:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   14f70:	f105 0b0c 	add.w	fp, r5, #12
   14f74:	ebaa 0a00 	sub.w	sl, sl, r0
   14f78:	4658      	mov	r0, fp
   14f7a:	f012 feb6 	bl	27cea <net_buf_simple_tailroom>
   14f7e:	4582      	cmp	sl, r0
   14f80:	d238      	bcs.n	14ff4 <find_type_cb+0x104>
   14f82:	6860      	ldr	r0, [r4, #4]
   14f84:	f011 fcb1 	bl	268ea <net_buf_frags_len>
   14f88:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   14f8c:	1a18      	subs	r0, r3, r0
	if (!len) {
   14f8e:	b970      	cbnz	r0, 14fae <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   14f90:	6863      	ldr	r3, [r4, #4]
   14f92:	7a98      	ldrb	r0, [r3, #10]
   14f94:	f003 ffb6 	bl	18f04 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   14f98:	2200      	movs	r2, #0
   14f9a:	2300      	movs	r3, #0
   14f9c:	f012 fe8b 	bl	27cb6 <net_buf_alloc_fixed>
		if (!frag) {
   14fa0:	4605      	mov	r5, r0
   14fa2:	2800      	cmp	r0, #0
   14fa4:	d0d7      	beq.n	14f56 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   14fa6:	4601      	mov	r1, r0
   14fa8:	6860      	ldr	r0, [r4, #4]
   14faa:	f004 fa87 	bl	194bc <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   14fae:	2300      	movs	r3, #0
   14fb0:	9300      	str	r3, [sp, #0]
   14fb2:	2310      	movs	r3, #16
   14fb4:	4639      	mov	r1, r7
   14fb6:	f8d7 9004 	ldr.w	r9, [r7, #4]
   14fba:	4640      	mov	r0, r8
   14fbc:	eb0d 0203 	add.w	r2, sp, r3
   14fc0:	47c8      	blx	r9
	if (read < 0) {
   14fc2:	1e07      	subs	r7, r0, #0
   14fc4:	db13      	blt.n	14fee <find_type_cb+0xfe>
	if (read != data->value_len) {
   14fc6:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   14fc8:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   14fca:	42ba      	cmp	r2, r7
   14fcc:	d031      	beq.n	15032 <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   14fce:	4601      	mov	r1, r0
   14fd0:	a80d      	add	r0, sp, #52	; 0x34
   14fd2:	f010 ffb2 	bl	25f3a <bt_uuid_create>
   14fd6:	4603      	mov	r3, r0
   14fd8:	b980      	cbnz	r0, 14ffc <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   14fda:	7c22      	ldrb	r2, [r4, #16]
   14fdc:	9203      	str	r2, [sp, #12]
   14fde:	4a17      	ldr	r2, [pc, #92]	; (1503c <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   14fe0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14fe4:	4916      	ldr	r1, [pc, #88]	; (15040 <find_type_cb+0x150>)
   14fe6:	2202      	movs	r2, #2
   14fe8:	9300      	str	r3, [sp, #0]
   14fea:	f011 fd6d 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   14fee:	2300      	movs	r3, #0
   14ff0:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   14ff2:	e7a5      	b.n	14f40 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   14ff4:	4658      	mov	r0, fp
   14ff6:	f012 fe78 	bl	27cea <net_buf_simple_tailroom>
   14ffa:	e7c8      	b.n	14f8e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   14ffc:	b2fa      	uxtb	r2, r7
   14ffe:	a904      	add	r1, sp, #16
   15000:	a808      	add	r0, sp, #32
   15002:	f010 ff9a 	bl	25f3a <bt_uuid_create>
   15006:	4603      	mov	r3, r0
   15008:	b910      	cbnz	r0, 15010 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   1500a:	4a0e      	ldr	r2, [pc, #56]	; (15044 <find_type_cb+0x154>)
   1500c:	9703      	str	r7, [sp, #12]
   1500e:	e7e7      	b.n	14fe0 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15010:	a908      	add	r1, sp, #32
   15012:	a80d      	add	r0, sp, #52	; 0x34
   15014:	f010 ff63 	bl	25ede <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15018:	2800      	cmp	r0, #0
   1501a:	d1e8      	bne.n	14fee <find_type_cb+0xfe>
	data->err = 0x00;
   1501c:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1501e:	2104      	movs	r1, #4
   15020:	7463      	strb	r3, [r4, #17]
   15022:	f105 000c 	add.w	r0, r5, #12
   15026:	f004 fac9 	bl	195bc <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1502a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1502c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1502e:	68a3      	ldr	r3, [r4, #8]
   15030:	e785      	b.n	14f3e <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   15032:	a904      	add	r1, sp, #16
   15034:	f014 fbc9 	bl	297ca <memcmp>
   15038:	e7ee      	b.n	15018 <find_type_cb+0x128>
   1503a:	bf00      	nop
   1503c:	0002e89d 	.word	0x0002e89d
   15040:	0002a718 	.word	0x0002a718
   15044:	0002e8bc 	.word	0x0002e8bc

00015048 <chan_send>:
{
   15048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1504c:	4606      	mov	r6, r0
   1504e:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   15050:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   15054:	68cb      	ldr	r3, [r1, #12]
{
   15056:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15058:	2102      	movs	r1, #2
   1505a:	3098      	adds	r0, #152	; 0x98
   1505c:	f011 fc5f 	bl	2691e <atomic_test_bit>
   15060:	2800      	cmp	r0, #0
   15062:	d053      	beq.n	1510c <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15064:	781b      	ldrb	r3, [r3, #0]
   15066:	2bd2      	cmp	r3, #210	; 0xd2
   15068:	d11a      	bne.n	150a0 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1506a:	6833      	ldr	r3, [r6, #0]
   1506c:	4621      	mov	r1, r4
   1506e:	6818      	ldr	r0, [r3, #0]
   15070:	f012 fd02 	bl	27a78 <bt_smp_sign>
		if (err) {
   15074:	4605      	mov	r5, r0
   15076:	b198      	cbz	r0, 150a0 <chan_send+0x58>
			LOG_ERR("Error signing data");
   15078:	4b26      	ldr	r3, [pc, #152]	; (15114 <chan_send+0xcc>)
   1507a:	2201      	movs	r2, #1
   1507c:	9302      	str	r3, [sp, #8]
   1507e:	2300      	movs	r3, #0
   15080:	4925      	ldr	r1, [pc, #148]	; (15118 <chan_send+0xd0>)
   15082:	4618      	mov	r0, r3
   15084:	e9cd 3300 	strd	r3, r3, [sp]
   15088:	f011 fd1e 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1508c:	69a0      	ldr	r0, [r4, #24]
   1508e:	f7ff ff0f 	bl	14eb0 <tx_meta_data_free>
			net_buf_unref(buf);
   15092:	4620      	mov	r0, r4
   15094:	f004 f970 	bl	19378 <net_buf_unref>
}
   15098:	4628      	mov	r0, r5
   1509a:	b005      	add	sp, #20
   1509c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   150a0:	f104 000c 	add.w	r0, r4, #12
   150a4:	f012 fe1d 	bl	27ce2 <net_buf_simple_headroom>
	state->len = buf->len;
   150a8:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   150ac:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   150b0:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   150b2:	4607      	mov	r7, r0
   150b4:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   150b6:	68e3      	ldr	r3, [r4, #12]
   150b8:	7818      	ldrb	r0, [r3, #0]
   150ba:	f7ff feb3 	bl	14e24 <att_op_get_type>
   150be:	2805      	cmp	r0, #5
   150c0:	4605      	mov	r5, r0
	switch (op_type) {
   150c2:	d813      	bhi.n	150ec <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   150c4:	4b15      	ldr	r3, [pc, #84]	; (1511c <chan_send+0xd4>)
   150c6:	4622      	mov	r2, r4
   150c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   150cc:	2104      	movs	r1, #4
   150ce:	4630      	mov	r0, r6
   150d0:	f8cd 9000 	str.w	r9, [sp]
   150d4:	f011 fbd3 	bl	2687e <bt_l2cap_send_cb>
	if (err) {
   150d8:	4605      	mov	r5, r0
   150da:	2800      	cmp	r0, #0
   150dc:	d0dc      	beq.n	15098 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   150de:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   150e0:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   150e4:	fa13 f787 	uxtah	r7, r3, r7
   150e8:	60e7      	str	r7, [r4, #12]
}
   150ea:	e7d5      	b.n	15098 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   150ec:	f240 2357 	movw	r3, #599	; 0x257
   150f0:	4a0b      	ldr	r2, [pc, #44]	; (15120 <chan_send+0xd8>)
   150f2:	490c      	ldr	r1, [pc, #48]	; (15124 <chan_send+0xdc>)
   150f4:	480c      	ldr	r0, [pc, #48]	; (15128 <chan_send+0xe0>)
   150f6:	f00f fe12 	bl	24d1e <assert_print>
   150fa:	4629      	mov	r1, r5
   150fc:	480b      	ldr	r0, [pc, #44]	; (1512c <chan_send+0xe4>)
   150fe:	f00f fe0e 	bl	24d1e <assert_print>
   15102:	f240 2157 	movw	r1, #599	; 0x257
   15106:	4806      	ldr	r0, [pc, #24]	; (15120 <chan_send+0xd8>)
   15108:	f00f fe02 	bl	24d10 <assert_post_action>
		return -EINVAL;
   1510c:	f06f 0515 	mvn.w	r5, #21
   15110:	e7c2      	b.n	15098 <chan_send+0x50>
   15112:	bf00      	nop
   15114:	0002e8db 	.word	0x0002e8db
   15118:	0002a718 	.word	0x0002a718
   1511c:	0002b0d8 	.word	0x0002b0d8
   15120:	0002e86e 	.word	0x0002e86e
   15124:	00030f5f 	.word	0x00030f5f
   15128:	0002b6e9 	.word	0x0002b6e9
   1512c:	0002e8ee 	.word	0x0002e8ee

00015130 <bt_att_chan_req_send>:
{
   15130:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   15132:	b958      	cbnz	r0, 1514c <bt_att_chan_req_send+0x1c>
   15134:	4919      	ldr	r1, [pc, #100]	; (1519c <bt_att_chan_req_send+0x6c>)
   15136:	f44f 7346 	mov.w	r3, #792	; 0x318
   1513a:	4a19      	ldr	r2, [pc, #100]	; (151a0 <bt_att_chan_req_send+0x70>)
   1513c:	4819      	ldr	r0, [pc, #100]	; (151a4 <bt_att_chan_req_send+0x74>)
   1513e:	f00f fdee 	bl	24d1e <assert_print>
   15142:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   15146:	4816      	ldr	r0, [pc, #88]	; (151a0 <bt_att_chan_req_send+0x70>)
   15148:	f00f fde2 	bl	24d10 <assert_post_action>
   1514c:	b949      	cbnz	r1, 15162 <bt_att_chan_req_send+0x32>
   1514e:	4916      	ldr	r1, [pc, #88]	; (151a8 <bt_att_chan_req_send+0x78>)
   15150:	f240 3319 	movw	r3, #793	; 0x319
   15154:	4a12      	ldr	r2, [pc, #72]	; (151a0 <bt_att_chan_req_send+0x70>)
   15156:	4813      	ldr	r0, [pc, #76]	; (151a4 <bt_att_chan_req_send+0x74>)
   15158:	f00f fde1 	bl	24d1e <assert_print>
   1515c:	f240 3119 	movw	r1, #793	; 0x319
   15160:	e7f1      	b.n	15146 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   15162:	684a      	ldr	r2, [r1, #4]
   15164:	b94a      	cbnz	r2, 1517a <bt_att_chan_req_send+0x4a>
   15166:	4911      	ldr	r1, [pc, #68]	; (151ac <bt_att_chan_req_send+0x7c>)
   15168:	f240 331a 	movw	r3, #794	; 0x31a
   1516c:	4a0c      	ldr	r2, [pc, #48]	; (151a0 <bt_att_chan_req_send+0x70>)
   1516e:	480d      	ldr	r0, [pc, #52]	; (151a4 <bt_att_chan_req_send+0x74>)
   15170:	f00f fdd5 	bl	24d1e <assert_print>
   15174:	f240 311a 	movw	r1, #794	; 0x31a
   15178:	e7e5      	b.n	15146 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   1517a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1517e:	b14b      	cbz	r3, 15194 <bt_att_chan_req_send+0x64>
   15180:	490b      	ldr	r1, [pc, #44]	; (151b0 <bt_att_chan_req_send+0x80>)
   15182:	f240 331b 	movw	r3, #795	; 0x31b
   15186:	4a06      	ldr	r2, [pc, #24]	; (151a0 <bt_att_chan_req_send+0x70>)
   15188:	4806      	ldr	r0, [pc, #24]	; (151a4 <bt_att_chan_req_send+0x74>)
   1518a:	f00f fdc8 	bl	24d1e <assert_print>
   1518e:	f240 311b 	movw	r1, #795	; 0x31b
   15192:	e7d8      	b.n	15146 <bt_att_chan_req_send+0x16>
}
   15194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   15198:	f011 bca5 	b.w	26ae6 <chan_req_send>
   1519c:	0002e907 	.word	0x0002e907
   151a0:	0002e86e 	.word	0x0002e86e
   151a4:	0002b6e9 	.word	0x0002b6e9
   151a8:	0002e91d 	.word	0x0002e91d
   151ac:	0002e90c 	.word	0x0002e90c
   151b0:	0002e916 	.word	0x0002e916

000151b4 <att_get>:
{
   151b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   151b6:	7b43      	ldrb	r3, [r0, #13]
   151b8:	2b07      	cmp	r3, #7
   151ba:	d00d      	beq.n	151d8 <att_get+0x24>
		LOG_WRN("Not connected");
   151bc:	4b18      	ldr	r3, [pc, #96]	; (15220 <att_get+0x6c>)
   151be:	2202      	movs	r2, #2
   151c0:	9302      	str	r3, [sp, #8]
   151c2:	2300      	movs	r3, #0
   151c4:	4618      	mov	r0, r3
   151c6:	e9cd 3300 	strd	r3, r3, [sp]
   151ca:	4916      	ldr	r1, [pc, #88]	; (15224 <att_get+0x70>)
		LOG_ERR("Unable to find ATT channel");
   151cc:	f011 fc7c 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   151d0:	2000      	movs	r0, #0
}
   151d2:	b005      	add	sp, #20
   151d4:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   151d8:	2104      	movs	r1, #4
   151da:	f011 fb72 	bl	268c2 <bt_l2cap_le_lookup_rx_cid>
   151de:	4603      	mov	r3, r0
	if (!chan) {
   151e0:	b930      	cbnz	r0, 151f0 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   151e2:	4a11      	ldr	r2, [pc, #68]	; (15228 <att_get+0x74>)
   151e4:	490f      	ldr	r1, [pc, #60]	; (15224 <att_get+0x70>)
   151e6:	e9cd 0201 	strd	r0, r2, [sp, #4]
   151ea:	9000      	str	r0, [sp, #0]
   151ec:	2201      	movs	r2, #1
   151ee:	e7ed      	b.n	151cc <att_get+0x18>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   151f0:	2102      	movs	r1, #2
   151f2:	3094      	adds	r0, #148	; 0x94
   151f4:	f011 fb93 	bl	2691e <atomic_test_bit>
   151f8:	b970      	cbnz	r0, 15218 <att_get+0x64>
   151fa:	490c      	ldr	r1, [pc, #48]	; (1522c <att_get+0x78>)
   151fc:	f640 332a 	movw	r3, #2858	; 0xb2a
   15200:	4a0b      	ldr	r2, [pc, #44]	; (15230 <att_get+0x7c>)
   15202:	480c      	ldr	r0, [pc, #48]	; (15234 <att_get+0x80>)
   15204:	f00f fd8b 	bl	24d1e <assert_print>
   15208:	480b      	ldr	r0, [pc, #44]	; (15238 <att_get+0x84>)
   1520a:	f00f fd88 	bl	24d1e <assert_print>
   1520e:	f640 312a 	movw	r1, #2858	; 0xb2a
   15212:	4807      	ldr	r0, [pc, #28]	; (15230 <att_get+0x7c>)
   15214:	f00f fd7c 	bl	24d10 <assert_post_action>
	return att_chan->att;
   15218:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1521c:	e7d9      	b.n	151d2 <att_get+0x1e>
   1521e:	bf00      	nop
   15220:	0002e921 	.word	0x0002e921
   15224:	0002a718 	.word	0x0002a718
   15228:	0002e92f 	.word	0x0002e92f
   1522c:	0002e94a 	.word	0x0002e94a
   15230:	0002e86e 	.word	0x0002e86e
   15234:	0002b6e9 	.word	0x0002b6e9
   15238:	0002e97a 	.word	0x0002e97a

0001523c <bt_att_connected>:
{
   1523c:	b510      	push	{r4, lr}
   1523e:	4604      	mov	r4, r0
   15240:	f100 0394 	add.w	r3, r0, #148	; 0x94
   15244:	e8d3 1fef 	ldaex	r1, [r3]
   15248:	f041 0104 	orr.w	r1, r1, #4
   1524c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15250:	2a00      	cmp	r2, #0
   15252:	d1f7      	bne.n	15244 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15254:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   15256:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15258:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1525a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1525c:	f011 fba1 	bl	269a2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15260:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   15264:	4903      	ldr	r1, [pc, #12]	; (15274 <bt_att_connected+0x38>)
   15266:	f00b fa69 	bl	2073c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1526a:	6820      	ldr	r0, [r4, #0]
}
   1526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   15270:	f001 bf04 	b.w	1707c <bt_gatt_connected>
   15274:	00015ed1 	.word	0x00015ed1

00015278 <read_group_cb>:
{
   15278:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1527c:	f04f 0800 	mov.w	r8, #0
   15280:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   15284:	4605      	mov	r5, r0
   15286:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15288:	6800      	ldr	r0, [r0, #0]
   1528a:	a902      	add	r1, sp, #8
{
   1528c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1528e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15290:	f88d 8008 	strb.w	r8, [sp, #8]
   15294:	f8ad 300a 	strh.w	r3, [sp, #10]
   15298:	f010 fe21 	bl	25ede <bt_uuid_cmp>
   1529c:	b1a0      	cbz	r0, 152c8 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1529e:	f642 0301 	movw	r3, #10241	; 0x2801
   152a2:	6828      	ldr	r0, [r5, #0]
   152a4:	a903      	add	r1, sp, #12
   152a6:	f88d 800c 	strb.w	r8, [sp, #12]
   152aa:	f8ad 300e 	strh.w	r3, [sp, #14]
   152ae:	f010 fe16 	bl	25ede <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   152b2:	b148      	cbz	r0, 152c8 <read_group_cb+0x50>
		if (data->group &&
   152b4:	6923      	ldr	r3, [r4, #16]
   152b6:	b11b      	cbz	r3, 152c0 <read_group_cb+0x48>
   152b8:	885a      	ldrh	r2, [r3, #2]
   152ba:	42b2      	cmp	r2, r6
   152bc:	d200      	bcs.n	152c0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   152be:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   152c0:	2001      	movs	r0, #1
}
   152c2:	b004      	add	sp, #16
   152c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   152c8:	6861      	ldr	r1, [r4, #4]
   152ca:	6828      	ldr	r0, [r5, #0]
   152cc:	f010 fe07 	bl	25ede <bt_uuid_cmp>
   152d0:	b110      	cbz	r0, 152d8 <read_group_cb+0x60>
		data->group = NULL;
   152d2:	2300      	movs	r3, #0
   152d4:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   152d6:	e7f3      	b.n	152c0 <read_group_cb+0x48>
	if (data->rsp->len &&
   152d8:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   152da:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   152dc:	781a      	ldrb	r2, [r3, #0]
   152de:	b132      	cbz	r2, 152ee <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   152e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   152e2:	8a01      	ldrh	r1, [r0, #16]
   152e4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   152e6:	4293      	cmp	r3, r2
   152e8:	da01      	bge.n	152ee <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   152ea:	2000      	movs	r0, #0
   152ec:	e7e9      	b.n	152c2 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   152ee:	2104      	movs	r1, #4
   152f0:	300c      	adds	r0, #12
   152f2:	f004 f963 	bl	195bc <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   152f6:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   152f8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   152fa:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   152fc:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   152fe:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15300:	4b07      	ldr	r3, [pc, #28]	; (15320 <read_group_cb+0xa8>)
   15302:	9401      	str	r4, [sp, #4]
   15304:	9300      	str	r3, [sp, #0]
   15306:	4638      	mov	r0, r7
   15308:	2300      	movs	r3, #0
   1530a:	68a2      	ldr	r2, [r4, #8]
   1530c:	f011 fc2c 	bl	26b68 <att_chan_read>
	if (read < 0) {
   15310:	2800      	cmp	r0, #0
   15312:	dbea      	blt.n	152ea <read_group_cb+0x72>
	if (!data->group) {
   15314:	6920      	ldr	r0, [r4, #16]
   15316:	3800      	subs	r0, #0
   15318:	bf18      	it	ne
   1531a:	2001      	movne	r0, #1
   1531c:	e7d1      	b.n	152c2 <read_group_cb+0x4a>
   1531e:	bf00      	nop
   15320:	00026a09 	.word	0x00026a09

00015324 <read_type_cb>:
{
   15324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15328:	6817      	ldr	r7, [r2, #0]
{
   1532a:	4605      	mov	r5, r0
   1532c:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1532e:	6800      	ldr	r0, [r0, #0]
   15330:	6851      	ldr	r1, [r2, #4]
{
   15332:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   15334:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15336:	f010 fdd2 	bl	25ede <bt_uuid_cmp>
   1533a:	4681      	mov	r9, r0
   1533c:	2800      	cmp	r0, #0
   1533e:	d13c      	bne.n	153ba <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15340:	4630      	mov	r0, r6
   15342:	2295      	movs	r2, #149	; 0x95
   15344:	4629      	mov	r1, r5
   15346:	f012 f8d5 	bl	274f4 <bt_gatt_check_perm>
   1534a:	4606      	mov	r6, r0
   1534c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1534e:	b140      	cbz	r0, 15362 <read_type_cb+0x3e>
		if (data->rsp->len) {
   15350:	68e3      	ldr	r3, [r4, #12]
   15352:	781b      	ldrb	r3, [r3, #0]
   15354:	b10b      	cbz	r3, 1535a <read_type_cb+0x36>
			data->err = 0x00;
   15356:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1535a:	2000      	movs	r0, #0
}
   1535c:	b003      	add	sp, #12
   1535e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15362:	68a0      	ldr	r0, [r4, #8]
   15364:	f004 f864 	bl	19430 <net_buf_frag_last>
   15368:	2102      	movs	r1, #2
   1536a:	300c      	adds	r0, #12
   1536c:	f004 f926 	bl	195bc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15370:	4b13      	ldr	r3, [pc, #76]	; (153c0 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15372:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   15374:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15378:	9300      	str	r3, [sp, #0]
   1537a:	9401      	str	r4, [sp, #4]
   1537c:	4633      	mov	r3, r6
   1537e:	4629      	mov	r1, r5
   15380:	4638      	mov	r0, r7
   15382:	68a2      	ldr	r2, [r4, #8]
   15384:	f011 fbf0 	bl	26b68 <att_chan_read>
	if (read < 0) {
   15388:	2800      	cmp	r0, #0
   1538a:	da07      	bge.n	1539c <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1538c:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   15390:	bf32      	itee	cc
   15392:	200e      	movcc	r0, #14
		return -err;
   15394:	4240      	negcs	r0, r0
   15396:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   15398:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1539a:	e7de      	b.n	1535a <read_type_cb+0x36>
	if (!data->item) {
   1539c:	6923      	ldr	r3, [r4, #16]
   1539e:	2b00      	cmp	r3, #0
   153a0:	d0db      	beq.n	1535a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   153a2:	68a0      	ldr	r0, [r4, #8]
   153a4:	f011 faa1 	bl	268ea <net_buf_frags_len>
   153a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   153aa:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   153ac:	68e3      	ldr	r3, [r4, #12]
   153ae:	781b      	ldrb	r3, [r3, #0]
   153b0:	4298      	cmp	r0, r3
   153b2:	bf94      	ite	ls
   153b4:	2000      	movls	r0, #0
   153b6:	2001      	movhi	r0, #1
   153b8:	e7d0      	b.n	1535c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   153ba:	2001      	movs	r0, #1
   153bc:	e7ce      	b.n	1535c <read_type_cb+0x38>
   153be:	bf00      	nop
   153c0:	000268fb 	.word	0x000268fb

000153c4 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   153c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   153c6:	b087      	sub	sp, #28
   153c8:	4604      	mov	r4, r0
   153ca:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   153cc:	2200      	movs	r2, #0
   153ce:	2300      	movs	r3, #0
   153d0:	4831      	ldr	r0, [pc, #196]	; (15498 <bt_att_accept+0xd4>)
   153d2:	a904      	add	r1, sp, #16
   153d4:	f00a f88c 	bl	1f4f0 <k_mem_slab_alloc>
   153d8:	4605      	mov	r5, r0
   153da:	b178      	cbz	r0, 153fc <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   153dc:	4b2f      	ldr	r3, [pc, #188]	; (1549c <bt_att_accept+0xd8>)
   153de:	2201      	movs	r2, #1
   153e0:	9302      	str	r3, [sp, #8]
   153e2:	2300      	movs	r3, #0
   153e4:	e9cd 3300 	strd	r3, r3, [sp]
   153e8:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   153ea:	4618      	mov	r0, r3
   153ec:	492c      	ldr	r1, [pc, #176]	; (154a0 <bt_att_accept+0xdc>)
   153ee:	f011 fb6b 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   153f2:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   153f6:	4630      	mov	r0, r6
   153f8:	b007      	add	sp, #28
   153fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   153fc:	f00c fc42 	bl	21c84 <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   15400:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   15402:	4b28      	ldr	r3, [pc, #160]	; (154a4 <bt_att_accept+0xe0>)
   15404:	222c      	movs	r2, #44	; 0x2c
   15406:	6018      	str	r0, [r3, #0]
   15408:	4629      	mov	r1, r5
   1540a:	1d30      	adds	r0, r6, #4
   1540c:	f014 fa27 	bl	2985e <memset>
	att->conn = conn;
   15410:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   15412:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15414:	2200      	movs	r2, #0
   15416:	2300      	movs	r3, #0
	list->tail = NULL;
   15418:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1541c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   15420:	4821      	ldr	r0, [pc, #132]	; (154a8 <bt_att_accept+0xe4>)
   15422:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15424:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15426:	f00a f863 	bl	1f4f0 <k_mem_slab_alloc>
   1542a:	4606      	mov	r6, r0
   1542c:	b140      	cbz	r0, 15440 <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1542e:	6823      	ldr	r3, [r4, #0]
   15430:	2202      	movs	r2, #2
   15432:	9303      	str	r3, [sp, #12]
   15434:	4b1d      	ldr	r3, [pc, #116]	; (154ac <bt_att_accept+0xe8>)
   15436:	9500      	str	r5, [sp, #0]
   15438:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1543c:	462b      	mov	r3, r5
   1543e:	e7d4      	b.n	153ea <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   15440:	9b05      	ldr	r3, [sp, #20]
   15442:	4601      	mov	r1, r0
   15444:	22f8      	movs	r2, #248	; 0xf8
   15446:	4618      	mov	r0, r3
   15448:	f014 fa09 	bl	2985e <memset>
	chan->chan.chan.ops = &ops;
   1544c:	4a18      	ldr	r2, [pc, #96]	; (154b0 <bt_att_accept+0xec>)
   1544e:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   15450:	30a0      	adds	r0, #160	; 0xa0
   15452:	f013 fff4 	bl	2943e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15456:	9b05      	ldr	r3, [sp, #20]
   15458:	3398      	adds	r3, #152	; 0x98
   1545a:	e8d3 2fef 	ldaex	r2, [r3]
   1545e:	e8c3 6fe1 	stlex	r1, r6, [r3]
   15462:	2900      	cmp	r1, #0
   15464:	d1f9      	bne.n	1545a <bt_att_accept+0x96>
	chan->att = att;
   15466:	9b05      	ldr	r3, [sp, #20]
   15468:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1546a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   1546c:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   1546e:	b91b      	cbnz	r3, 15478 <bt_att_accept+0xb4>
   15470:	f104 000c 	add.w	r0, r4, #12
   15474:	f013 ffe3 	bl	2943e <z_impl_k_queue_init>
	return list->head;
   15478:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1547a:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
	parent->next = child;
   1547e:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   15482:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   15484:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   15486:	b902      	cbnz	r2, 1548a <bt_att_accept+0xc6>
	list->tail = node;
   15488:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   1548a:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   1548c:	2b00      	cmp	r3, #0
   1548e:	d0b0      	beq.n	153f2 <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   15490:	3304      	adds	r3, #4
   15492:	603b      	str	r3, [r7, #0]
	return 0;
   15494:	e7af      	b.n	153f6 <bt_att_accept+0x32>
   15496:	bf00      	nop
   15498:	20008a08 	.word	0x20008a08
   1549c:	0002e996 	.word	0x0002e996
   154a0:	0002a718 	.word	0x0002a718
   154a4:	2002114c 	.word	0x2002114c
   154a8:	20008a28 	.word	0x20008a28
   154ac:	0002e9bb 	.word	0x0002e9bb
   154b0:	200084c8 	.word	0x200084c8

000154b4 <bt_att_chan_create_pdu>:
{
   154b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   154b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   154b8:	3201      	adds	r2, #1
   154ba:	429a      	cmp	r2, r3
{
   154bc:	460d      	mov	r5, r1
   154be:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   154c0:	d90f      	bls.n	154e2 <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   154c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   154c6:	4b25      	ldr	r3, [pc, #148]	; (1555c <bt_att_chan_create_pdu+0xa8>)
   154c8:	2202      	movs	r2, #2
   154ca:	9302      	str	r3, [sp, #8]
   154cc:	2300      	movs	r3, #0
   154ce:	4924      	ldr	r1, [pc, #144]	; (15560 <bt_att_chan_create_pdu+0xac>)
   154d0:	4618      	mov	r0, r3
   154d2:	e9cd 3300 	strd	r3, r3, [sp]
   154d6:	f011 faf7 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   154da:	2400      	movs	r4, #0
}
   154dc:	4620      	mov	r0, r4
   154de:	b007      	add	sp, #28
   154e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   154e2:	4608      	mov	r0, r1
   154e4:	f7ff fc9e 	bl	14e24 <att_op_get_type>
   154e8:	2802      	cmp	r0, #2
   154ea:	d018      	beq.n	1551e <bt_att_chan_create_pdu+0x6a>
   154ec:	2804      	cmp	r0, #4
   154ee:	d016      	beq.n	1551e <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   154f0:	f04f 36ff 	mov.w	r6, #4294967295
   154f4:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   154f8:	2100      	movs	r1, #0
   154fa:	4632      	mov	r2, r6
   154fc:	463b      	mov	r3, r7
   154fe:	4608      	mov	r0, r1
   15500:	f011 f9ba 	bl	26878 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   15504:	4604      	mov	r4, r0
   15506:	b970      	cbnz	r0, 15526 <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   15508:	4b16      	ldr	r3, [pc, #88]	; (15564 <bt_att_chan_create_pdu+0xb0>)
   1550a:	2201      	movs	r2, #1
   1550c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15510:	4913      	ldr	r1, [pc, #76]	; (15560 <bt_att_chan_create_pdu+0xac>)
   15512:	4603      	mov	r3, r0
   15514:	9503      	str	r5, [sp, #12]
   15516:	9000      	str	r0, [sp, #0]
   15518:	f011 fad6 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1551c:	e7dd      	b.n	154da <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   1551e:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   15522:	2700      	movs	r7, #0
   15524:	e7e8      	b.n	154f8 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   15526:	4810      	ldr	r0, [pc, #64]	; (15568 <bt_att_chan_create_pdu+0xb4>)
   15528:	463b      	mov	r3, r7
   1552a:	4632      	mov	r2, r6
   1552c:	f00a fc18 	bl	1fd60 <z_impl_k_queue_get>
   15530:	4603      	mov	r3, r0
	if (!data) {
   15532:	b958      	cbnz	r0, 1554c <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   15534:	4a0d      	ldr	r2, [pc, #52]	; (1556c <bt_att_chan_create_pdu+0xb8>)
   15536:	9000      	str	r0, [sp, #0]
   15538:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1553c:	4908      	ldr	r1, [pc, #32]	; (15560 <bt_att_chan_create_pdu+0xac>)
   1553e:	2202      	movs	r2, #2
   15540:	f011 fac2 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   15544:	4620      	mov	r0, r4
   15546:	f003 ff17 	bl	19378 <net_buf_unref>
		return NULL;
   1554a:	e7c6      	b.n	154da <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   1554c:	61a0      	str	r0, [r4, #24]
   1554e:	2101      	movs	r1, #1
   15550:	f104 000c 	add.w	r0, r4, #12
   15554:	f004 f832 	bl	195bc <net_buf_simple_add>
	hdr->code = op;
   15558:	7005      	strb	r5, [r0, #0]
	return buf;
   1555a:	e7bf      	b.n	154dc <bt_att_chan_create_pdu+0x28>
   1555c:	0002e9e0 	.word	0x0002e9e0
   15560:	0002a718 	.word	0x0002a718
   15564:	0002e6d1 	.word	0x0002e6d1
   15568:	20008bcc 	.word	0x20008bcc
   1556c:	0002ea05 	.word	0x0002ea05

00015570 <bt_att_recv>:
{
   15570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   15574:	8a0b      	ldrh	r3, [r1, #16]
{
   15576:	4607      	mov	r7, r0
   15578:	460d      	mov	r5, r1
   1557a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1557c:	b963      	cbnz	r3, 15598 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   1557e:	4a42      	ldr	r2, [pc, #264]	; (15688 <bt_att_recv+0x118>)
   15580:	9300      	str	r3, [sp, #0]
   15582:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15586:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   15588:	4618      	mov	r0, r3
   1558a:	4940      	ldr	r1, [pc, #256]	; (1568c <bt_att_recv+0x11c>)
   1558c:	f011 fa9c 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
}
   15590:	2000      	movs	r0, #0
   15592:	b006      	add	sp, #24
   15594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15598:	2101      	movs	r1, #1
   1559a:	f105 000c 	add.w	r0, r5, #12
   1559e:	f003 ffef 	bl	19580 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   155a2:	f857 3c04 	ldr.w	r3, [r7, #-4]
   155a6:	4604      	mov	r4, r0
   155a8:	2b00      	cmp	r3, #0
   155aa:	d0f1      	beq.n	15590 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   155ac:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   155ae:	7802      	ldrb	r2, [r0, #0]
   155b0:	4e37      	ldr	r6, [pc, #220]	; (15690 <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   155b2:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   155b6:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   155ba:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   155be:	4290      	cmp	r0, r2
   155c0:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   155c4:	d111      	bne.n	155ea <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   155c6:	f891 9002 	ldrb.w	r9, [r1, #2]
   155ca:	f1b9 0f01 	cmp.w	r9, #1
   155ce:	d12b      	bne.n	15628 <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   155d0:	2100      	movs	r1, #0
   155d2:	f107 0094 	add.w	r0, r7, #148	; 0x94
   155d6:	f011 fb6d 	bl	26cb4 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   155da:	b380      	cbz	r0, 1563e <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   155dc:	4b2d      	ldr	r3, [pc, #180]	; (15694 <bt_att_recv+0x124>)
   155de:	9302      	str	r3, [sp, #8]
   155e0:	2300      	movs	r3, #0
   155e2:	2202      	movs	r2, #2
   155e4:	e9cd 3300 	strd	r3, r3, [sp]
   155e8:	e7ce      	b.n	15588 <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   155ea:	3301      	adds	r3, #1
   155ec:	2b0e      	cmp	r3, #14
   155ee:	d1e2      	bne.n	155b6 <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   155f0:	2500      	movs	r5, #0
   155f2:	4b29      	ldr	r3, [pc, #164]	; (15698 <bt_att_recv+0x128>)
   155f4:	4628      	mov	r0, r5
   155f6:	4925      	ldr	r1, [pc, #148]	; (1568c <bt_att_recv+0x11c>)
   155f8:	9203      	str	r2, [sp, #12]
   155fa:	9302      	str	r3, [sp, #8]
   155fc:	2202      	movs	r2, #2
   155fe:	462b      	mov	r3, r5
   15600:	e9cd 5500 	strd	r5, r5, [sp]
   15604:	f011 fa60 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   15608:	7821      	ldrb	r1, [r4, #0]
   1560a:	4608      	mov	r0, r1
   1560c:	f7ff fc0a 	bl	14e24 <att_op_get_type>
   15610:	2800      	cmp	r0, #0
   15612:	d0bd      	beq.n	15590 <bt_att_recv+0x20>
   15614:	2805      	cmp	r0, #5
   15616:	d0bb      	beq.n	15590 <bt_att_recv+0x20>
	if (!req) {
   15618:	2900      	cmp	r1, #0
   1561a:	d0b9      	beq.n	15590 <bt_att_recv+0x20>
   1561c:	2306      	movs	r3, #6
   1561e:	2200      	movs	r2, #0
   15620:	4640      	mov	r0, r8
   15622:	f011 fcab 	bl	26f7c <send_err_rsp.part.0>
   15626:	e7b3      	b.n	15590 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   15628:	f1b9 0f05 	cmp.w	r9, #5
   1562c:	d107      	bne.n	1563e <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   1562e:	2101      	movs	r1, #1
   15630:	f107 0094 	add.w	r0, r7, #148	; 0x94
   15634:	f011 fb3e 	bl	26cb4 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   15638:	b108      	cbz	r0, 1563e <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   1563a:	4b18      	ldr	r3, [pc, #96]	; (1569c <bt_att_recv+0x12c>)
   1563c:	e7cf      	b.n	155de <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   1563e:	4456      	add	r6, sl
   15640:	8a2b      	ldrh	r3, [r5, #16]
   15642:	7872      	ldrb	r2, [r6, #1]
   15644:	429a      	cmp	r2, r3
   15646:	d911      	bls.n	1566c <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   15648:	7822      	ldrb	r2, [r4, #0]
   1564a:	4910      	ldr	r1, [pc, #64]	; (1568c <bt_att_recv+0x11c>)
   1564c:	e9cd 3203 	strd	r3, r2, [sp, #12]
   15650:	4b13      	ldr	r3, [pc, #76]	; (156a0 <bt_att_recv+0x130>)
   15652:	2201      	movs	r2, #1
   15654:	9302      	str	r3, [sp, #8]
   15656:	2300      	movs	r3, #0
   15658:	4618      	mov	r0, r3
   1565a:	e9cd 3300 	strd	r3, r3, [sp]
   1565e:	f011 fa33 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   15662:	f1b9 0f01 	cmp.w	r9, #1
   15666:	d193      	bne.n	15590 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   15668:	2304      	movs	r3, #4
   1566a:	e009      	b.n	15680 <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   1566c:	6873      	ldr	r3, [r6, #4]
   1566e:	4629      	mov	r1, r5
   15670:	4640      	mov	r0, r8
   15672:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15674:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   15678:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1567a:	d189      	bne.n	15590 <bt_att_recv+0x20>
   1567c:	2800      	cmp	r0, #0
   1567e:	d087      	beq.n	15590 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15680:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   15682:	2900      	cmp	r1, #0
   15684:	d084      	beq.n	15590 <bt_att_recv+0x20>
   15686:	e7ca      	b.n	1561e <bt_att_recv+0xae>
   15688:	0002ea24 	.word	0x0002ea24
   1568c:	0002a718 	.word	0x0002a718
   15690:	0002b0f0 	.word	0x0002b0f0
   15694:	0002ea59 	.word	0x0002ea59
   15698:	0002ea3f 	.word	0x0002ea3f
   1569c:	0002ea75 	.word	0x0002ea75
   156a0:	0002ea94 	.word	0x0002ea94

000156a4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   156a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   156a6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   156a8:	6803      	ldr	r3, [r0, #0]
   156aa:	460d      	mov	r5, r1
   156ac:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   156ae:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   156b0:	bf18      	it	ne
   156b2:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   156b4:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   156b6:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   156b8:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   156ba:	f011 ff4f 	bl	2755c <bt_gatt_change_aware>
   156be:	b948      	cbnz	r0, 156d4 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   156c0:	2105      	movs	r1, #5
   156c2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   156c6:	f011 faf5 	bl	26cb4 <atomic_test_and_set_bit>
   156ca:	2800      	cmp	r0, #0
   156cc:	d048      	beq.n	15760 <att_write_rsp.constprop.0+0xbc>
			return 0;
   156ce:	2000      	movs	r0, #0
}
   156d0:	b007      	add	sp, #28
   156d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   156d4:	2e00      	cmp	r6, #0
   156d6:	d045      	beq.n	15764 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   156d8:	2218      	movs	r2, #24
   156da:	2100      	movs	r1, #0
   156dc:	4668      	mov	r0, sp
   156de:	f014 f8be 	bl	2985e <memset>
	if (rsp) {
   156e2:	bb67      	cbnz	r7, 1573e <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   156e4:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   156e6:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   156e8:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   156ea:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   156ec:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   156ee:	2300      	movs	r3, #0
   156f0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   156f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   156f6:	4a1c      	ldr	r2, [pc, #112]	; (15768 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   156f8:	9303      	str	r3, [sp, #12]
	data.len = len;
   156fa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   156fe:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   15702:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15706:	2301      	movs	r3, #1
   15708:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1570c:	466b      	mov	r3, sp
   1570e:	f011 f93d 	bl	2698c <bt_gatt_foreach_attr>
	if (data.err) {
   15712:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15716:	b1e3      	cbz	r3, 15752 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   15718:	2f00      	cmp	r7, #0
   1571a:	d0d8      	beq.n	156ce <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1571c:	9b01      	ldr	r3, [sp, #4]
   1571e:	6998      	ldr	r0, [r3, #24]
   15720:	f7ff fbc6 	bl	14eb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15724:	9801      	ldr	r0, [sp, #4]
   15726:	f003 fe27 	bl	19378 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1572a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1572e:	2d00      	cmp	r5, #0
   15730:	d0cd      	beq.n	156ce <att_write_rsp.constprop.0+0x2a>
   15732:	4632      	mov	r2, r6
   15734:	4629      	mov	r1, r5
   15736:	4620      	mov	r0, r4
   15738:	f011 fc20 	bl	26f7c <send_err_rsp.part.0>
   1573c:	e7c7      	b.n	156ce <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1573e:	2200      	movs	r2, #0
   15740:	4639      	mov	r1, r7
   15742:	4620      	mov	r0, r4
   15744:	f7ff feb6 	bl	154b4 <bt_att_chan_create_pdu>
   15748:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1574a:	2800      	cmp	r0, #0
   1574c:	d1ca      	bne.n	156e4 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1574e:	200e      	movs	r0, #14
   15750:	e7be      	b.n	156d0 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   15752:	9901      	ldr	r1, [sp, #4]
   15754:	2900      	cmp	r1, #0
   15756:	d0ba      	beq.n	156ce <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   15758:	4620      	mov	r0, r4
   1575a:	f011 f9f7 	bl	26b4c <bt_att_chan_send_rsp>
   1575e:	e7b6      	b.n	156ce <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15760:	2012      	movs	r0, #18
   15762:	e7b5      	b.n	156d0 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   15764:	2001      	movs	r0, #1
   15766:	e7b3      	b.n	156d0 <att_write_rsp.constprop.0+0x2c>
   15768:	0002692b 	.word	0x0002692b

0001576c <bt_att_create_pdu>:
{
   1576c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1576e:	460e      	mov	r6, r1
   15770:	4615      	mov	r5, r2
	att = att_get(conn);
   15772:	f7ff fd1f 	bl	151b4 <att_get>
	if (!att) {
   15776:	b1c0      	cbz	r0, 157aa <bt_att_create_pdu+0x3e>
	return list->head;
   15778:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1577a:	4618      	mov	r0, r3
   1577c:	b11b      	cbz	r3, 15786 <bt_att_create_pdu+0x1a>
	return node->next;
   1577e:	f850 39f0 	ldr.w	r3, [r0], #-240
   15782:	b103      	cbz	r3, 15786 <bt_att_create_pdu+0x1a>
   15784:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15786:	1c6c      	adds	r4, r5, #1
   15788:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1578a:	b118      	cbz	r0, 15794 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1578c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1578e:	42a1      	cmp	r1, r4
   15790:	d216      	bcs.n	157c0 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15792:	b96b      	cbnz	r3, 157b0 <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   15794:	4b0f      	ldr	r3, [pc, #60]	; (157d4 <bt_att_create_pdu+0x68>)
   15796:	2202      	movs	r2, #2
   15798:	9302      	str	r3, [sp, #8]
   1579a:	2300      	movs	r3, #0
   1579c:	490e      	ldr	r1, [pc, #56]	; (157d8 <bt_att_create_pdu+0x6c>)
   1579e:	4618      	mov	r0, r3
   157a0:	e9cd 3300 	strd	r3, r3, [sp]
   157a4:	9403      	str	r4, [sp, #12]
   157a6:	f011 f98f 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
}
   157aa:	2000      	movs	r0, #0
   157ac:	b004      	add	sp, #16
   157ae:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   157b0:	4618      	mov	r0, r3
   157b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   157b6:	b153      	cbz	r3, 157ce <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   157b8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   157ba:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   157bc:	428a      	cmp	r2, r1
   157be:	d8f7      	bhi.n	157b0 <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   157c0:	462a      	mov	r2, r5
   157c2:	4631      	mov	r1, r6
}
   157c4:	b004      	add	sp, #16
   157c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   157ca:	f7ff be73 	b.w	154b4 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   157ce:	4614      	mov	r4, r2
   157d0:	e7dc      	b.n	1578c <bt_att_create_pdu+0x20>
   157d2:	bf00      	nop
   157d4:	0002eab3 	.word	0x0002eab3
   157d8:	0002a718 	.word	0x0002a718

000157dc <att_read_group_req>:
{
   157dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   157e0:	8a0e      	ldrh	r6, [r1, #16]
{
   157e2:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   157e4:	3e04      	subs	r6, #4
   157e6:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   157e8:	2e02      	cmp	r6, #2
{
   157ea:	4608      	mov	r0, r1
   157ec:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   157ee:	d001      	beq.n	157f4 <att_read_group_req+0x18>
   157f0:	2e10      	cmp	r6, #16
   157f2:	d16a      	bne.n	158ca <att_read_group_req+0xee>
   157f4:	2104      	movs	r1, #4
   157f6:	300c      	adds	r0, #12
   157f8:	f003 fec2 	bl	19580 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   157fc:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   15800:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15802:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15804:	1d01      	adds	r1, r0, #4
   15806:	4632      	mov	r2, r6
   15808:	4640      	mov	r0, r8
   1580a:	f010 fb96 	bl	25f3a <bt_uuid_create>
   1580e:	2800      	cmp	r0, #0
   15810:	d05d      	beq.n	158ce <att_read_group_req+0xf2>
	if (!start || !end) {
   15812:	2d00      	cmp	r5, #0
   15814:	d03a      	beq.n	1588c <att_read_group_req+0xb0>
   15816:	2600      	movs	r6, #0
   15818:	2f00      	cmp	r7, #0
   1581a:	d036      	beq.n	1588a <att_read_group_req+0xae>
	if (start > end) {
   1581c:	42bd      	cmp	r5, r7
   1581e:	d835      	bhi.n	1588c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15820:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15824:	4640      	mov	r0, r8
   15826:	a901      	add	r1, sp, #4
   15828:	f88d 6004 	strb.w	r6, [sp, #4]
   1582c:	f8ad 3006 	strh.w	r3, [sp, #6]
   15830:	f010 fb55 	bl	25ede <bt_uuid_cmp>
   15834:	bb70      	cbnz	r0, 15894 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   15836:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15838:	2214      	movs	r2, #20
   1583a:	2100      	movs	r1, #0
   1583c:	a807      	add	r0, sp, #28
   1583e:	f014 f80e 	bl	2985e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15842:	2201      	movs	r2, #1
   15844:	2111      	movs	r1, #17
   15846:	4630      	mov	r0, r6
   15848:	f7ff ff90 	bl	1576c <bt_att_create_pdu>
   1584c:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1584e:	2800      	cmp	r0, #0
   15850:	d03d      	beq.n	158ce <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   15852:	2101      	movs	r1, #1
   15854:	300c      	adds	r0, #12
	data.uuid = uuid;
   15856:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1585a:	f003 feaf 	bl	195bc <net_buf_simple_add>
	data.rsp->len = 0U;
   1585e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15860:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15862:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   15864:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15866:	4a1b      	ldr	r2, [pc, #108]	; (158d4 <att_read_group_req+0xf8>)
	data.group = NULL;
   15868:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1586a:	4628      	mov	r0, r5
   1586c:	ab07      	add	r3, sp, #28
   1586e:	f011 f88d 	bl	2698c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   15872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15874:	781b      	ldrb	r3, [r3, #0]
   15876:	bb1b      	cbnz	r3, 158c0 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15878:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1587a:	6998      	ldr	r0, [r3, #24]
   1587c:	f7ff fb18 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15880:	9809      	ldr	r0, [sp, #36]	; 0x24
   15882:	f003 fd79 	bl	19378 <net_buf_unref>
	if (!req) {
   15886:	230a      	movs	r3, #10
   15888:	e001      	b.n	1588e <att_read_group_req+0xb2>
			*err = 0U;
   1588a:	463d      	mov	r5, r7
	if (!req) {
   1588c:	2301      	movs	r3, #1
   1588e:	462a      	mov	r2, r5
   15890:	2110      	movs	r1, #16
   15892:	e00e      	b.n	158b2 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   15894:	f642 0301 	movw	r3, #10241	; 0x2801
   15898:	4640      	mov	r0, r8
   1589a:	a907      	add	r1, sp, #28
   1589c:	f88d 601c 	strb.w	r6, [sp, #28]
   158a0:	f8ad 301e 	strh.w	r3, [sp, #30]
   158a4:	f010 fb1b 	bl	25ede <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   158a8:	2800      	cmp	r0, #0
   158aa:	d0c4      	beq.n	15836 <att_read_group_req+0x5a>
	if (!req) {
   158ac:	2310      	movs	r3, #16
   158ae:	462a      	mov	r2, r5
   158b0:	4619      	mov	r1, r3
   158b2:	4620      	mov	r0, r4
   158b4:	f011 fb62 	bl	26f7c <send_err_rsp.part.0>
		return 0;
   158b8:	2000      	movs	r0, #0
}
   158ba:	b00c      	add	sp, #48	; 0x30
   158bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   158c0:	4620      	mov	r0, r4
   158c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   158c4:	f011 f942 	bl	26b4c <bt_att_chan_send_rsp>
	return 0;
   158c8:	e7f6      	b.n	158b8 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   158ca:	2004      	movs	r0, #4
   158cc:	e7f5      	b.n	158ba <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   158ce:	200e      	movs	r0, #14
   158d0:	e7f3      	b.n	158ba <att_read_group_req+0xde>
   158d2:	bf00      	nop
   158d4:	00015279 	.word	0x00015279

000158d8 <att_read_mult_vl_req>:
{
   158d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   158dc:	6846      	ldr	r6, [r0, #4]
{
   158de:	4604      	mov	r4, r0
   158e0:	460d      	mov	r5, r1
   158e2:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   158e4:	2101      	movs	r1, #1
   158e6:	4630      	mov	r0, r6
   158e8:	f011 fe38 	bl	2755c <bt_gatt_change_aware>
   158ec:	b950      	cbnz	r0, 15904 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   158ee:	2105      	movs	r1, #5
   158f0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   158f4:	f011 f9de 	bl	26cb4 <atomic_test_and_set_bit>
   158f8:	2800      	cmp	r0, #0
   158fa:	d13b      	bne.n	15974 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   158fc:	2012      	movs	r0, #18
}
   158fe:	b005      	add	sp, #20
   15900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   15904:	2210      	movs	r2, #16
   15906:	2100      	movs	r1, #0
   15908:	4668      	mov	r0, sp
   1590a:	f013 ffa8 	bl	2985e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1590e:	2200      	movs	r2, #0
   15910:	2121      	movs	r1, #33	; 0x21
   15912:	4630      	mov	r0, r6
   15914:	f7ff ff2a 	bl	1576c <bt_att_create_pdu>
   15918:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1591a:	b368      	cbz	r0, 15978 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1591c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15920:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1597c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   15924:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15926:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1592a:	8a2b      	ldrh	r3, [r5, #16]
   1592c:	2b01      	cmp	r3, #1
   1592e:	d804      	bhi.n	1593a <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   15930:	4620      	mov	r0, r4
   15932:	9902      	ldr	r1, [sp, #8]
   15934:	f011 f90a 	bl	26b4c <bt_att_chan_send_rsp>
	return 0;
   15938:	e01c      	b.n	15974 <att_read_mult_vl_req+0x9c>
   1593a:	4638      	mov	r0, r7
   1593c:	f012 f9c9 	bl	27cd2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   15940:	466b      	mov	r3, sp
   15942:	464a      	mov	r2, r9
   15944:	4601      	mov	r1, r0
   15946:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15948:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1594c:	f011 f81e 	bl	2698c <bt_gatt_foreach_attr>
		if (data.err) {
   15950:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15954:	2b00      	cmp	r3, #0
   15956:	d0e8      	beq.n	1592a <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15958:	9b02      	ldr	r3, [sp, #8]
   1595a:	6998      	ldr	r0, [r3, #24]
   1595c:	f7ff faa8 	bl	14eb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15960:	9802      	ldr	r0, [sp, #8]
   15962:	f003 fd09 	bl	19378 <net_buf_unref>
	if (!req) {
   15966:	4632      	mov	r2, r6
   15968:	2120      	movs	r1, #32
   1596a:	4620      	mov	r0, r4
   1596c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15970:	f011 fb04 	bl	26f7c <send_err_rsp.part.0>
			return 0;
   15974:	2000      	movs	r0, #0
   15976:	e7c2      	b.n	158fe <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15978:	200e      	movs	r0, #14
   1597a:	e7c0      	b.n	158fe <att_read_mult_vl_req+0x26>
   1597c:	00026d1d 	.word	0x00026d1d

00015980 <att_read_mult_req>:
{
   15980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15984:	6846      	ldr	r6, [r0, #4]
{
   15986:	4604      	mov	r4, r0
   15988:	460d      	mov	r5, r1
   1598a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1598c:	2101      	movs	r1, #1
   1598e:	4630      	mov	r0, r6
   15990:	f011 fde4 	bl	2755c <bt_gatt_change_aware>
   15994:	b950      	cbnz	r0, 159ac <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15996:	2105      	movs	r1, #5
   15998:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1599c:	f011 f98a 	bl	26cb4 <atomic_test_and_set_bit>
   159a0:	2800      	cmp	r0, #0
   159a2:	d13b      	bne.n	15a1c <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   159a4:	2012      	movs	r0, #18
}
   159a6:	b005      	add	sp, #20
   159a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   159ac:	2210      	movs	r2, #16
   159ae:	2100      	movs	r1, #0
   159b0:	4668      	mov	r0, sp
   159b2:	f013 ff54 	bl	2985e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   159b6:	2200      	movs	r2, #0
   159b8:	210f      	movs	r1, #15
   159ba:	4630      	mov	r0, r6
   159bc:	f7ff fed6 	bl	1576c <bt_att_create_pdu>
   159c0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   159c2:	b368      	cbz	r0, 15a20 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   159c4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   159c8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15a24 <att_read_mult_req+0xa4>
	data.chan = chan;
   159cc:	9400      	str	r4, [sp, #0]
   159ce:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   159d2:	8a2b      	ldrh	r3, [r5, #16]
   159d4:	2b01      	cmp	r3, #1
   159d6:	d804      	bhi.n	159e2 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   159d8:	4620      	mov	r0, r4
   159da:	9902      	ldr	r1, [sp, #8]
   159dc:	f011 f8b6 	bl	26b4c <bt_att_chan_send_rsp>
	return 0;
   159e0:	e01c      	b.n	15a1c <att_read_mult_req+0x9c>
   159e2:	4638      	mov	r0, r7
   159e4:	f012 f975 	bl	27cd2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   159e8:	466b      	mov	r3, sp
   159ea:	464a      	mov	r2, r9
   159ec:	4601      	mov	r1, r0
   159ee:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   159f0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   159f4:	f010 ffca 	bl	2698c <bt_gatt_foreach_attr>
		if (data.err) {
   159f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   159fc:	2b00      	cmp	r3, #0
   159fe:	d0e8      	beq.n	159d2 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15a00:	9b02      	ldr	r3, [sp, #8]
   15a02:	6998      	ldr	r0, [r3, #24]
   15a04:	f7ff fa54 	bl	14eb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15a08:	9802      	ldr	r0, [sp, #8]
   15a0a:	f003 fcb5 	bl	19378 <net_buf_unref>
	if (!req) {
   15a0e:	4632      	mov	r2, r6
   15a10:	210e      	movs	r1, #14
   15a12:	4620      	mov	r0, r4
   15a14:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15a18:	f011 fab0 	bl	26f7c <send_err_rsp.part.0>
			return 0;
   15a1c:	2000      	movs	r0, #0
   15a1e:	e7c2      	b.n	159a6 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15a20:	200e      	movs	r0, #14
   15a22:	e7c0      	b.n	159a6 <att_read_mult_req+0x26>
   15a24:	00026cd7 	.word	0x00026cd7

00015a28 <att_read_rsp>:
{
   15a28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15a2c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   15a30:	4604      	mov	r4, r0
   15a32:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15a34:	4640      	mov	r0, r8
   15a36:	2101      	movs	r1, #1
{
   15a38:	4617      	mov	r7, r2
   15a3a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   15a3c:	f011 fd8e 	bl	2755c <bt_gatt_change_aware>
   15a40:	b948      	cbnz	r0, 15a56 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15a42:	2105      	movs	r1, #5
   15a44:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15a48:	f011 f934 	bl	26cb4 <atomic_test_and_set_bit>
   15a4c:	bb78      	cbnz	r0, 15aae <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15a4e:	2012      	movs	r0, #18
}
   15a50:	b004      	add	sp, #16
   15a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   15a56:	b38d      	cbz	r5, 15abc <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   15a58:	2210      	movs	r2, #16
   15a5a:	2100      	movs	r1, #0
   15a5c:	4668      	mov	r0, sp
   15a5e:	f013 fefe 	bl	2985e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   15a62:	2200      	movs	r2, #0
   15a64:	4639      	mov	r1, r7
   15a66:	4640      	mov	r0, r8
   15a68:	f7ff fe80 	bl	1576c <bt_att_create_pdu>
   15a6c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15a6e:	b338      	cbz	r0, 15ac0 <att_read_rsp+0x98>
	data.offset = offset;
   15a70:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15a74:	4629      	mov	r1, r5
	data.offset = offset;
   15a76:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15a7a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15a7c:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15a7e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15a82:	4a10      	ldr	r2, [pc, #64]	; (15ac4 <att_read_rsp+0x9c>)
   15a84:	466b      	mov	r3, sp
	data.chan = chan;
   15a86:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15a88:	f010 ff80 	bl	2698c <bt_gatt_foreach_attr>
	if (data.err) {
   15a8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15a90:	b17b      	cbz	r3, 15ab2 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15a92:	9b02      	ldr	r3, [sp, #8]
   15a94:	6998      	ldr	r0, [r3, #24]
   15a96:	f7ff fa0b 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15a9a:	9802      	ldr	r0, [sp, #8]
   15a9c:	f003 fc6c 	bl	19378 <net_buf_unref>
	if (!req) {
   15aa0:	462a      	mov	r2, r5
   15aa2:	4631      	mov	r1, r6
   15aa4:	4620      	mov	r0, r4
   15aa6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15aaa:	f011 fa67 	bl	26f7c <send_err_rsp.part.0>
			return 0;
   15aae:	2000      	movs	r0, #0
   15ab0:	e7ce      	b.n	15a50 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   15ab2:	4620      	mov	r0, r4
   15ab4:	9902      	ldr	r1, [sp, #8]
   15ab6:	f011 f849 	bl	26b4c <bt_att_chan_send_rsp>
	return 0;
   15aba:	e7f8      	b.n	15aae <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   15abc:	2001      	movs	r0, #1
   15abe:	e7c7      	b.n	15a50 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   15ac0:	200e      	movs	r0, #14
   15ac2:	e7c5      	b.n	15a50 <att_read_rsp+0x28>
   15ac4:	00026cd7 	.word	0x00026cd7

00015ac8 <att_read_type_req>:
{
   15ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15acc:	8a0d      	ldrh	r5, [r1, #16]
{
   15ace:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   15ad0:	3d04      	subs	r5, #4
   15ad2:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   15ad4:	2d02      	cmp	r5, #2
{
   15ad6:	4608      	mov	r0, r1
   15ad8:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   15ada:	d001      	beq.n	15ae0 <att_read_type_req+0x18>
   15adc:	2d10      	cmp	r5, #16
   15ade:	d150      	bne.n	15b82 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   15ae0:	2104      	movs	r1, #4
   15ae2:	300c      	adds	r0, #12
   15ae4:	f003 fd4c 	bl	19580 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15ae8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   15aec:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15aee:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15af0:	1d01      	adds	r1, r0, #4
   15af2:	462a      	mov	r2, r5
   15af4:	4640      	mov	r0, r8
   15af6:	f010 fa20 	bl	25f3a <bt_uuid_create>
   15afa:	b188      	cbz	r0, 15b20 <att_read_type_req+0x58>
	if (!start || !end) {
   15afc:	b19e      	cbz	r6, 15b26 <att_read_type_req+0x5e>
   15afe:	b18f      	cbz	r7, 15b24 <att_read_type_req+0x5c>
	if (start > end) {
   15b00:	42be      	cmp	r6, r7
   15b02:	d810      	bhi.n	15b26 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15b04:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15b06:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15b08:	2100      	movs	r1, #0
   15b0a:	eb0d 0002 	add.w	r0, sp, r2
   15b0e:	f013 fea6 	bl	2985e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15b12:	2201      	movs	r2, #1
   15b14:	2109      	movs	r1, #9
   15b16:	4628      	mov	r0, r5
   15b18:	f7ff fe28 	bl	1576c <bt_att_create_pdu>
   15b1c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   15b1e:	b960      	cbnz	r0, 15b3a <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   15b20:	200e      	movs	r0, #14
   15b22:	e007      	b.n	15b34 <att_read_type_req+0x6c>
			*err = 0U;
   15b24:	463e      	mov	r6, r7
	if (!req) {
   15b26:	2301      	movs	r3, #1
   15b28:	4632      	mov	r2, r6
   15b2a:	2108      	movs	r1, #8
   15b2c:	4620      	mov	r0, r4
   15b2e:	f011 fa25 	bl	26f7c <send_err_rsp.part.0>
		return 0;
   15b32:	2000      	movs	r0, #0
}
   15b34:	b00c      	add	sp, #48	; 0x30
   15b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   15b3a:	2101      	movs	r1, #1
   15b3c:	300c      	adds	r0, #12
	data.uuid = uuid;
   15b3e:	e9cd 4806 	strd	r4, r8, [sp, #24]
   15b42:	f003 fd3b 	bl	195bc <net_buf_simple_add>
	data.rsp->len = 0U;
   15b46:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15b48:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   15b4a:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15b4c:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15b4e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15b50:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15b54:	4630      	mov	r0, r6
   15b56:	ab06      	add	r3, sp, #24
   15b58:	4a0b      	ldr	r2, [pc, #44]	; (15b88 <att_read_type_req+0xc0>)
   15b5a:	f010 ff17 	bl	2698c <bt_gatt_foreach_attr>
	if (data.err) {
   15b5e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15b62:	b14b      	cbz	r3, 15b78 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15b64:	9b08      	ldr	r3, [sp, #32]
   15b66:	6998      	ldr	r0, [r3, #24]
   15b68:	f7ff f9a2 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15b6c:	9808      	ldr	r0, [sp, #32]
   15b6e:	f003 fc03 	bl	19378 <net_buf_unref>
	if (!req) {
   15b72:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15b76:	e7d7      	b.n	15b28 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   15b78:	4620      	mov	r0, r4
   15b7a:	9908      	ldr	r1, [sp, #32]
   15b7c:	f010 ffe6 	bl	26b4c <bt_att_chan_send_rsp>
	return 0;
   15b80:	e7d7      	b.n	15b32 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   15b82:	2004      	movs	r0, #4
   15b84:	e7d6      	b.n	15b34 <att_read_type_req+0x6c>
   15b86:	bf00      	nop
   15b88:	00015325 	.word	0x00015325

00015b8c <att_find_type_req>:
{
   15b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b90:	460f      	mov	r7, r1
   15b92:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   15b94:	2106      	movs	r1, #6
   15b96:	b086      	sub	sp, #24
   15b98:	f107 000c 	add.w	r0, r7, #12
   15b9c:	f003 fcf0 	bl	19580 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   15ba0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15ba2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   15ba6:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   15ba8:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   15bac:	b1c5      	cbz	r5, 15be0 <att_find_type_req+0x54>
   15bae:	2300      	movs	r3, #0
   15bb0:	f1b8 0f00 	cmp.w	r8, #0
   15bb4:	d013      	beq.n	15bde <att_find_type_req+0x52>
	if (start > end) {
   15bb6:	4545      	cmp	r5, r8
   15bb8:	d812      	bhi.n	15be0 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15bba:	f88d 3000 	strb.w	r3, [sp]
   15bbe:	f88d 3004 	strb.w	r3, [sp, #4]
   15bc2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15bc6:	4668      	mov	r0, sp
   15bc8:	a901      	add	r1, sp, #4
   15bca:	f8ad 2002 	strh.w	r2, [sp, #2]
   15bce:	f8ad 3006 	strh.w	r3, [sp, #6]
   15bd2:	f010 f984 	bl	25ede <bt_uuid_cmp>
   15bd6:	4606      	mov	r6, r0
   15bd8:	b160      	cbz	r0, 15bf4 <att_find_type_req+0x68>
	if (!req) {
   15bda:	230a      	movs	r3, #10
   15bdc:	e001      	b.n	15be2 <att_find_type_req+0x56>
			*err = 0U;
   15bde:	4645      	mov	r5, r8
	if (!req) {
   15be0:	2301      	movs	r3, #1
   15be2:	462a      	mov	r2, r5
   15be4:	2106      	movs	r1, #6
   15be6:	4620      	mov	r0, r4
   15be8:	f011 f9c8 	bl	26f7c <send_err_rsp.part.0>
		return 0;
   15bec:	2000      	movs	r0, #0
}
   15bee:	b006      	add	sp, #24
   15bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   15bf4:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   15bf8:	4601      	mov	r1, r0
   15bfa:	2214      	movs	r2, #20
   15bfc:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15bfe:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   15c00:	f013 fe2d 	bl	2985e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   15c04:	4632      	mov	r2, r6
   15c06:	2107      	movs	r1, #7
   15c08:	4650      	mov	r0, sl
   15c0a:	f7ff fdaf 	bl	1576c <bt_att_create_pdu>
   15c0e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15c10:	b1f8      	cbz	r0, 15c52 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15c12:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15c14:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15c16:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15c1a:	4628      	mov	r0, r5
   15c1c:	ab01      	add	r3, sp, #4
   15c1e:	4a0e      	ldr	r2, [pc, #56]	; (15c58 <att_find_type_req+0xcc>)
	data.value = value;
   15c20:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   15c24:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   15c26:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15c2a:	f010 feaf 	bl	2698c <bt_gatt_foreach_attr>
	if (data.err) {
   15c2e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15c32:	b14b      	cbz	r3, 15c48 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15c34:	9b02      	ldr	r3, [sp, #8]
   15c36:	6998      	ldr	r0, [r3, #24]
   15c38:	f7ff f93a 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15c3c:	9802      	ldr	r0, [sp, #8]
   15c3e:	f003 fb9b 	bl	19378 <net_buf_unref>
	if (!req) {
   15c42:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15c46:	e7cc      	b.n	15be2 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   15c48:	4620      	mov	r0, r4
   15c4a:	9902      	ldr	r1, [sp, #8]
   15c4c:	f010 ff7e 	bl	26b4c <bt_att_chan_send_rsp>
	return 0;
   15c50:	e7cc      	b.n	15bec <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   15c52:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15c54:	e7cb      	b.n	15bee <att_find_type_req+0x62>
   15c56:	bf00      	nop
   15c58:	00014ef1 	.word	0x00014ef1

00015c5c <att_find_info_req>:
{
   15c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   15c5e:	68cb      	ldr	r3, [r1, #12]
{
   15c60:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   15c62:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15c64:	885e      	ldrh	r6, [r3, #2]
{
   15c66:	b085      	sub	sp, #20
	if (!start || !end) {
   15c68:	b195      	cbz	r5, 15c90 <att_find_info_req+0x34>
   15c6a:	b186      	cbz	r6, 15c8e <att_find_info_req+0x32>
	if (start > end) {
   15c6c:	42ae      	cmp	r6, r5
   15c6e:	d30f      	bcc.n	15c90 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15c70:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   15c72:	2210      	movs	r2, #16
   15c74:	2100      	movs	r1, #0
   15c76:	4668      	mov	r0, sp
   15c78:	f013 fdf1 	bl	2985e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   15c7c:	2200      	movs	r2, #0
   15c7e:	2105      	movs	r1, #5
   15c80:	4638      	mov	r0, r7
   15c82:	f7ff fd73 	bl	1576c <bt_att_create_pdu>
   15c86:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15c88:	b958      	cbnz	r0, 15ca2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   15c8a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   15c8c:	e007      	b.n	15c9e <att_find_info_req+0x42>
			*err = 0U;
   15c8e:	4635      	mov	r5, r6
	if (!req) {
   15c90:	2301      	movs	r3, #1
   15c92:	462a      	mov	r2, r5
   15c94:	2104      	movs	r1, #4
   15c96:	4620      	mov	r0, r4
   15c98:	f011 f970 	bl	26f7c <send_err_rsp.part.0>
		return 0;
   15c9c:	2000      	movs	r0, #0
}
   15c9e:	b005      	add	sp, #20
   15ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15ca2:	466b      	mov	r3, sp
   15ca4:	4631      	mov	r1, r6
   15ca6:	4628      	mov	r0, r5
   15ca8:	4a09      	ldr	r2, [pc, #36]	; (15cd0 <att_find_info_req+0x74>)
	data.chan = chan;
   15caa:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15cac:	f010 fe6e 	bl	2698c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   15cb0:	9b02      	ldr	r3, [sp, #8]
   15cb2:	b943      	cbnz	r3, 15cc6 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15cb4:	9b01      	ldr	r3, [sp, #4]
   15cb6:	6998      	ldr	r0, [r3, #24]
   15cb8:	f7ff f8fa 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15cbc:	9801      	ldr	r0, [sp, #4]
   15cbe:	f003 fb5b 	bl	19378 <net_buf_unref>
	if (!req) {
   15cc2:	230a      	movs	r3, #10
   15cc4:	e7e5      	b.n	15c92 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   15cc6:	4620      	mov	r0, r4
   15cc8:	9901      	ldr	r1, [sp, #4]
   15cca:	f010 ff3f 	bl	26b4c <bt_att_chan_send_rsp>
	return 0;
   15cce:	e7e5      	b.n	15c9c <att_find_info_req+0x40>
   15cd0:	00026a29 	.word	0x00026a29

00015cd4 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   15cd4:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   15cd6:	4c09      	ldr	r4, [pc, #36]	; (15cfc <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   15cd8:	4d09      	ldr	r5, [pc, #36]	; (15d00 <bt_att_init+0x2c>)
   15cda:	4620      	mov	r0, r4
   15cdc:	f013 fbaf 	bl	2943e <z_impl_k_queue_init>
   15ce0:	4629      	mov	r1, r5
   15ce2:	4620      	mov	r0, r4
   15ce4:	f013 fbb8 	bl	29458 <k_queue_append>
   15ce8:	4620      	mov	r0, r4
   15cea:	f105 0114 	add.w	r1, r5, #20
   15cee:	f013 fbb3 	bl	29458 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   15cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   15cf6:	f000 bb9f 	b.w	16438 <bt_gatt_init>
   15cfa:	bf00      	nop
   15cfc:	20008bcc 	.word	0x20008bcc
   15d00:	20021124 	.word	0x20021124

00015d04 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   15d04:	2300      	movs	r3, #0
{
   15d06:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15d08:	4605      	mov	r5, r0
   15d0a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   15d0c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   15d0e:	f00b ffb9 	bl	21c84 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   15d12:	4b0c      	ldr	r3, [pc, #48]	; (15d44 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15d14:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   15d16:	681b      	ldr	r3, [r3, #0]
   15d18:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   15d1a:	bf04      	itt	eq
   15d1c:	2500      	moveq	r5, #0
   15d1e:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15d20:	462a      	mov	r2, r5
   15d22:	4623      	mov	r3, r4
   15d24:	4808      	ldr	r0, [pc, #32]	; (15d48 <bt_att_req_alloc+0x44>)
   15d26:	f009 fbe3 	bl	1f4f0 <k_mem_slab_alloc>
   15d2a:	4601      	mov	r1, r0
   15d2c:	b940      	cbnz	r0, 15d40 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   15d2e:	9b01      	ldr	r3, [sp, #4]
   15d30:	221c      	movs	r2, #28
   15d32:	4618      	mov	r0, r3
   15d34:	f013 fd93 	bl	2985e <memset>
   15d38:	4603      	mov	r3, r0

	return req;
}
   15d3a:	4618      	mov	r0, r3
   15d3c:	b003      	add	sp, #12
   15d3e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   15d40:	2300      	movs	r3, #0
   15d42:	e7fa      	b.n	15d3a <bt_att_req_alloc+0x36>
   15d44:	2002114c 	.word	0x2002114c
   15d48:	20008a48 	.word	0x20008a48

00015d4c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   15d4c:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   15d4e:	6883      	ldr	r3, [r0, #8]
{
   15d50:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   15d52:	b14b      	cbz	r3, 15d68 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   15d54:	6998      	ldr	r0, [r3, #24]
   15d56:	f7ff f8ab 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(req->buf);
   15d5a:	9b01      	ldr	r3, [sp, #4]
   15d5c:	6898      	ldr	r0, [r3, #8]
   15d5e:	f003 fb0b 	bl	19378 <net_buf_unref>
		req->buf = NULL;
   15d62:	2200      	movs	r2, #0
   15d64:	9b01      	ldr	r3, [sp, #4]
   15d66:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   15d68:	4803      	ldr	r0, [pc, #12]	; (15d78 <bt_att_req_free+0x2c>)
   15d6a:	a901      	add	r1, sp, #4
   15d6c:	f009 fc2a 	bl	1f5c4 <k_mem_slab_free>
}
   15d70:	b003      	add	sp, #12
   15d72:	f85d fb04 	ldr.w	pc, [sp], #4
   15d76:	bf00      	nop
   15d78:	20008a48 	.word	0x20008a48

00015d7c <att_handle_rsp>:
{
   15d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15d80:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15d82:	30c0      	adds	r0, #192	; 0xc0
{
   15d84:	461d      	mov	r5, r3
   15d86:	460e      	mov	r6, r1
   15d88:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   15d8a:	f00a fdf9 	bl	20980 <k_work_cancel_delayable>
	if (!chan->req) {
   15d8e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   15d92:	b97b      	cbnz	r3, 15db4 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   15d94:	4a19      	ldr	r2, [pc, #100]	; (15dfc <att_handle_rsp+0x80>)
   15d96:	4618      	mov	r0, r3
   15d98:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15d9c:	4918      	ldr	r1, [pc, #96]	; (15e00 <att_handle_rsp+0x84>)
   15d9e:	2202      	movs	r2, #2
   15da0:	9300      	str	r3, [sp, #0]
   15da2:	f010 fe91 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   15da6:	6820      	ldr	r0, [r4, #0]
   15da8:	f011 f820 	bl	26dec <att_req_send_process>
}
   15dac:	2000      	movs	r0, #0
   15dae:	b004      	add	sp, #16
   15db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   15db4:	4a13      	ldr	r2, [pc, #76]	; (15e04 <att_handle_rsp+0x88>)
   15db6:	f04f 0800 	mov.w	r8, #0
   15dba:	4293      	cmp	r3, r2
   15dbc:	d102      	bne.n	15dc4 <att_handle_rsp+0x48>
		chan->req = NULL;
   15dbe:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   15dc2:	e7f0      	b.n	15da6 <att_handle_rsp+0x2a>
	func = chan->req->func;
   15dc4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   15dc8:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   15dcc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   15dd0:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   15dd4:	f7ff ffba 	bl	15d4c <bt_att_req_free>
	att_req_send_process(chan->att);
   15dd8:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   15dda:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   15dde:	f011 f805 	bl	26dec <att_req_send_process>
	if (func) {
   15de2:	f1b9 0f00 	cmp.w	r9, #0
   15de6:	d0e1      	beq.n	15dac <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   15de8:	6820      	ldr	r0, [r4, #0]
   15dea:	f8cd a000 	str.w	sl, [sp]
   15dee:	463b      	mov	r3, r7
   15df0:	4632      	mov	r2, r6
   15df2:	4629      	mov	r1, r5
   15df4:	6800      	ldr	r0, [r0, #0]
   15df6:	47c8      	blx	r9
   15df8:	e7d8      	b.n	15dac <att_handle_rsp+0x30>
   15dfa:	bf00      	nop
   15dfc:	0002eace 	.word	0x0002eace
   15e00:	0002a718 	.word	0x0002a718
   15e04:	20021150 	.word	0x20021150

00015e08 <bt_att_disconnected>:
{
   15e08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   15e0c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   15e10:	4604      	mov	r4, r0
	if (!att_chan->att) {
   15e12:	2e00      	cmp	r6, #0
   15e14:	d056      	beq.n	15ec4 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   15e16:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   15e1a:	f106 0028 	add.w	r0, r6, #40	; 0x28
   15e1e:	f010 ff2e 	bl	26c7e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   15e22:	1f27      	subs	r7, r4, #4
   15e24:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   15e28:	2200      	movs	r2, #0
   15e2a:	2300      	movs	r3, #0
   15e2c:	4640      	mov	r0, r8
   15e2e:	f011 ff47 	bl	27cc0 <net_buf_get>
   15e32:	4605      	mov	r5, r0
   15e34:	bb28      	cbnz	r0, 15e82 <bt_att_disconnected+0x7a>
	if (chan->req) {
   15e36:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   15e3a:	b12b      	cbz	r3, 15e48 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   15e3c:	4602      	mov	r2, r0
   15e3e:	4601      	mov	r1, r0
   15e40:	230e      	movs	r3, #14
   15e42:	4638      	mov	r0, r7
   15e44:	f7ff ff9a 	bl	15d7c <att_handle_rsp>
	chan->att = NULL;
   15e48:	2300      	movs	r3, #0
   15e4a:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   15e4e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15e50:	2b00      	cmp	r3, #0
   15e52:	d137      	bne.n	15ec4 <bt_att_disconnected+0xbc>
	att_reset(att);
   15e54:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   15e56:	9803      	ldr	r0, [sp, #12]
   15e58:	2200      	movs	r2, #0
   15e5a:	2300      	movs	r3, #0
   15e5c:	300c      	adds	r0, #12
   15e5e:	f011 ff2f 	bl	27cc0 <net_buf_get>
   15e62:	4605      	mov	r5, r0
   15e64:	b9a0      	cbnz	r0, 15e90 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   15e66:	9803      	ldr	r0, [sp, #12]
	return list->head;
   15e68:	6845      	ldr	r5, [r0, #4]
   15e6a:	b9c5      	cbnz	r5, 15e9e <bt_att_disconnected+0x96>
	att->conn = NULL;
   15e6c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   15e6e:	a903      	add	r1, sp, #12
   15e70:	4816      	ldr	r0, [pc, #88]	; (15ecc <bt_att_disconnected+0xc4>)
   15e72:	f009 fba7 	bl	1f5c4 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   15e76:	6820      	ldr	r0, [r4, #0]
}
   15e78:	b004      	add	sp, #16
   15e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   15e7e:	f001 b94d 	b.w	1711c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15e82:	69a8      	ldr	r0, [r5, #24]
   15e84:	f7ff f814 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(buf);
   15e88:	4628      	mov	r0, r5
   15e8a:	f003 fa75 	bl	19378 <net_buf_unref>
   15e8e:	e7cb      	b.n	15e28 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15e90:	69a8      	ldr	r0, [r5, #24]
   15e92:	f7ff f80d 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(buf);
   15e96:	4628      	mov	r0, r5
   15e98:	f003 fa6e 	bl	19378 <net_buf_unref>
   15e9c:	e7db      	b.n	15e56 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15e9e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   15ea0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15ea2:	4295      	cmp	r5, r2
	list->head = node;
   15ea4:	6043      	str	r3, [r0, #4]
	list->tail = node;
   15ea6:	bf08      	it	eq
   15ea8:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   15eaa:	686e      	ldr	r6, [r5, #4]
   15eac:	b136      	cbz	r6, 15ebc <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15eae:	69ab      	ldr	r3, [r5, #24]
   15eb0:	210e      	movs	r1, #14
   15eb2:	9300      	str	r3, [sp, #0]
   15eb4:	2300      	movs	r3, #0
   15eb6:	6800      	ldr	r0, [r0, #0]
   15eb8:	461a      	mov	r2, r3
   15eba:	47b0      	blx	r6
		bt_att_req_free(req);
   15ebc:	4628      	mov	r0, r5
   15ebe:	f7ff ff45 	bl	15d4c <bt_att_req_free>
   15ec2:	e7d0      	b.n	15e66 <bt_att_disconnected+0x5e>
}
   15ec4:	b004      	add	sp, #16
   15ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15eca:	bf00      	nop
   15ecc:	20008a08 	.word	0x20008a08

00015ed0 <att_timeout>:
{
   15ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   15ed2:	4b09      	ldr	r3, [pc, #36]	; (15ef8 <att_timeout+0x28>)
{
   15ed4:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   15ed6:	9302      	str	r3, [sp, #8]
   15ed8:	2300      	movs	r3, #0
   15eda:	2201      	movs	r2, #1
   15edc:	4618      	mov	r0, r3
   15ede:	e9cd 3300 	strd	r3, r3, [sp]
   15ee2:	4906      	ldr	r1, [pc, #24]	; (15efc <att_timeout+0x2c>)
   15ee4:	f010 fdf0 	bl	26ac8 <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   15ee8:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   15eec:	b004      	add	sp, #16
   15eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   15ef2:	f7ff bf89 	b.w	15e08 <bt_att_disconnected>
   15ef6:	bf00      	nop
   15ef8:	0002eae5 	.word	0x0002eae5
   15efc:	0002a718 	.word	0x0002a718

00015f00 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   15f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f02:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   15f04:	b958      	cbnz	r0, 15f1e <bt_att_send+0x1e>
   15f06:	4929      	ldr	r1, [pc, #164]	; (15fac <bt_att_send+0xac>)
   15f08:	f640 63a4 	movw	r3, #3748	; 0xea4
   15f0c:	4a28      	ldr	r2, [pc, #160]	; (15fb0 <bt_att_send+0xb0>)
   15f0e:	4829      	ldr	r0, [pc, #164]	; (15fb4 <bt_att_send+0xb4>)
   15f10:	f00e ff05 	bl	24d1e <assert_print>
   15f14:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   15f18:	4825      	ldr	r0, [pc, #148]	; (15fb0 <bt_att_send+0xb0>)
   15f1a:	f00e fef9 	bl	24d10 <assert_post_action>
   15f1e:	b949      	cbnz	r1, 15f34 <bt_att_send+0x34>
   15f20:	4925      	ldr	r1, [pc, #148]	; (15fb8 <bt_att_send+0xb8>)
   15f22:	f640 63a5 	movw	r3, #3749	; 0xea5
   15f26:	4a22      	ldr	r2, [pc, #136]	; (15fb0 <bt_att_send+0xb0>)
   15f28:	4822      	ldr	r0, [pc, #136]	; (15fb4 <bt_att_send+0xb4>)
   15f2a:	f00e fef8 	bl	24d1e <assert_print>
   15f2e:	f640 61a5 	movw	r1, #3749	; 0xea5
   15f32:	e7f1      	b.n	15f18 <bt_att_send+0x18>

	att = att_get(conn);
   15f34:	f7ff f93e 	bl	151b4 <att_get>
	if (!att) {
   15f38:	4605      	mov	r5, r0
   15f3a:	b940      	cbnz	r0, 15f4e <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15f3c:	69a0      	ldr	r0, [r4, #24]
   15f3e:	f7fe ffb7 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(buf);
   15f42:	4620      	mov	r0, r4
   15f44:	f003 fa18 	bl	19378 <net_buf_unref>
		return -ENOTCONN;
   15f48:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   15f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   15f4e:	f100 060c 	add.w	r6, r0, #12
   15f52:	4621      	mov	r1, r4
   15f54:	4630      	mov	r0, r6
   15f56:	f003 f9e9 	bl	1932c <net_buf_put>
	return list->head;
   15f5a:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15f5c:	b14d      	cbz	r5, 15f72 <bt_att_send+0x72>
	return node->next;
   15f5e:	f855 49f0 	ldr.w	r4, [r5], #-240
   15f62:	b104      	cbz	r4, 15f66 <bt_att_send+0x66>
   15f64:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   15f66:	4631      	mov	r1, r6
   15f68:	4628      	mov	r0, r5
   15f6a:	f010 fdd6 	bl	26b1a <process_queue>
		if (!err) {
   15f6e:	4603      	mov	r3, r0
   15f70:	b980      	cbnz	r0, 15f94 <bt_att_send+0x94>
	return 0;
   15f72:	2000      	movs	r0, #0
   15f74:	e7ea      	b.n	15f4c <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   15f76:	2103      	movs	r1, #3
   15f78:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15f7c:	f010 fccf 	bl	2691e <atomic_test_bit>
   15f80:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   15f82:	f105 0098 	add.w	r0, r5, #152	; 0x98
   15f86:	f010 fcca 	bl	2691e <atomic_test_bit>
		if (err == -ENOENT && prev &&
   15f8a:	4287      	cmp	r7, r0
   15f8c:	f06f 0301 	mvn.w	r3, #1
   15f90:	d107      	bne.n	15fa2 <bt_att_send+0xa2>
   15f92:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15f94:	2c00      	cmp	r4, #0
   15f96:	d0ec      	beq.n	15f72 <bt_att_send+0x72>
   15f98:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   15f9c:	b922      	cbnz	r2, 15fa8 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   15f9e:	3302      	adds	r3, #2
   15fa0:	d0e9      	beq.n	15f76 <bt_att_send+0x76>
{
   15fa2:	4625      	mov	r5, r4
   15fa4:	4614      	mov	r4, r2
   15fa6:	e7de      	b.n	15f66 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15fa8:	3af0      	subs	r2, #240	; 0xf0
   15faa:	e7f8      	b.n	15f9e <bt_att_send+0x9e>
   15fac:	0002db55 	.word	0x0002db55
   15fb0:	0002e86e 	.word	0x0002e86e
   15fb4:	0002b6e9 	.word	0x0002b6e9
   15fb8:	0002f381 	.word	0x0002f381

00015fbc <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   15fbc:	b510      	push	{r4, lr}
   15fbe:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   15fc0:	b958      	cbnz	r0, 15fda <bt_att_req_send+0x1e>
   15fc2:	4915      	ldr	r1, [pc, #84]	; (16018 <bt_att_req_send+0x5c>)
   15fc4:	f640 63ba 	movw	r3, #3770	; 0xeba
   15fc8:	4a14      	ldr	r2, [pc, #80]	; (1601c <bt_att_req_send+0x60>)
   15fca:	4815      	ldr	r0, [pc, #84]	; (16020 <bt_att_req_send+0x64>)
   15fcc:	f00e fea7 	bl	24d1e <assert_print>
   15fd0:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   15fd4:	4811      	ldr	r0, [pc, #68]	; (1601c <bt_att_req_send+0x60>)
   15fd6:	f00e fe9b 	bl	24d10 <assert_post_action>
   15fda:	b949      	cbnz	r1, 15ff0 <bt_att_req_send+0x34>
   15fdc:	4911      	ldr	r1, [pc, #68]	; (16024 <bt_att_req_send+0x68>)
   15fde:	f640 63bb 	movw	r3, #3771	; 0xebb
   15fe2:	4a0e      	ldr	r2, [pc, #56]	; (1601c <bt_att_req_send+0x60>)
   15fe4:	480e      	ldr	r0, [pc, #56]	; (16020 <bt_att_req_send+0x64>)
   15fe6:	f00e fe9a 	bl	24d1e <assert_print>
   15fea:	f640 61bb 	movw	r1, #3771	; 0xebb
   15fee:	e7f1      	b.n	15fd4 <bt_att_req_send+0x18>

	att = att_get(conn);
   15ff0:	f7ff f8e0 	bl	151b4 <att_get>
	if (!att) {
   15ff4:	b160      	cbz	r0, 16010 <bt_att_req_send+0x54>
	parent->next = child;
   15ff6:	2300      	movs	r3, #0
   15ff8:	6023      	str	r3, [r4, #0]
	return list->tail;
   15ffa:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   15ffc:	b92b      	cbnz	r3, 1600a <bt_att_req_send+0x4e>
	list->head = node;
   15ffe:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   16002:	f010 fef3 	bl	26dec <att_req_send_process>

	return 0;
   16006:	2000      	movs	r0, #0
}
   16008:	bd10      	pop	{r4, pc}
	parent->next = child;
   1600a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1600c:	6084      	str	r4, [r0, #8]
}
   1600e:	e7f8      	b.n	16002 <bt_att_req_send+0x46>
		return -ENOTCONN;
   16010:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16014:	e7f8      	b.n	16008 <bt_att_req_send+0x4c>
   16016:	bf00      	nop
   16018:	0002db55 	.word	0x0002db55
   1601c:	0002e86e 	.word	0x0002e86e
   16020:	0002b6e9 	.word	0x0002b6e9
   16024:	0002e91d 	.word	0x0002e91d

00016028 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16028:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1602a:	4606      	mov	r6, r0
   1602c:	4d13      	ldr	r5, [pc, #76]	; (1607c <find_cf_cfg+0x54>)
   1602e:	b140      	cbz	r0, 16042 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16030:	462a      	mov	r2, r5
   16032:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16036:	1e6c      	subs	r4, r5, #1
   16038:	f010 fb79 	bl	2672e <bt_conn_is_peer_addr_le>
   1603c:	b198      	cbz	r0, 16066 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1603e:	4620      	mov	r0, r4
   16040:	e00c      	b.n	1605c <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16042:	4628      	mov	r0, r5
   16044:	490e      	ldr	r1, [pc, #56]	; (16080 <find_cf_cfg+0x58>)
   16046:	f011 f911 	bl	2726c <bt_addr_le_eq>
   1604a:	b940      	cbnz	r0, 1605e <find_cf_cfg+0x36>
   1604c:	490c      	ldr	r1, [pc, #48]	; (16080 <find_cf_cfg+0x58>)
   1604e:	f105 0010 	add.w	r0, r5, #16
   16052:	f011 f90b 	bl	2726c <bt_addr_le_eq>
   16056:	b120      	cbz	r0, 16062 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16058:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   1605c:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1605e:	1e68      	subs	r0, r5, #1
   16060:	e7fc      	b.n	1605c <find_cf_cfg+0x34>
	return NULL;
   16062:	2000      	movs	r0, #0
   16064:	e7fa      	b.n	1605c <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16066:	4630      	mov	r0, r6
   16068:	7c21      	ldrb	r1, [r4, #16]
   1606a:	f104 0211 	add.w	r2, r4, #17
   1606e:	f010 fb5e 	bl	2672e <bt_conn_is_peer_addr_le>
   16072:	2800      	cmp	r0, #0
   16074:	d0f5      	beq.n	16062 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16076:	f104 0010 	add.w	r0, r4, #16
   1607a:	e7ef      	b.n	1605c <find_cf_cfg+0x34>
   1607c:	20021185 	.word	0x20021185
   16080:	0002d679 	.word	0x0002d679

00016084 <find_sc_cfg>:
{
   16084:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16086:	4c0e      	ldr	r4, [pc, #56]	; (160c0 <find_sc_cfg+0x3c>)
{
   16088:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   1608a:	7823      	ldrb	r3, [r4, #0]
{
   1608c:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1608e:	4283      	cmp	r3, r0
   16090:	d00c      	beq.n	160ac <find_sc_cfg+0x28>
   16092:	7b23      	ldrb	r3, [r4, #12]
   16094:	42ab      	cmp	r3, r5
   16096:	d110      	bne.n	160ba <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16098:	4631      	mov	r1, r6
   1609a:	480a      	ldr	r0, [pc, #40]	; (160c4 <find_sc_cfg+0x40>)
   1609c:	f011 f8e6 	bl	2726c <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   160a0:	b158      	cbz	r0, 160ba <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   160a2:	2301      	movs	r3, #1
			return &sc_cfg[i];
   160a4:	220c      	movs	r2, #12
   160a6:	fb02 4003 	mla	r0, r2, r3, r4
   160aa:	e007      	b.n	160bc <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   160ac:	1c60      	adds	r0, r4, #1
   160ae:	f011 f8dd 	bl	2726c <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   160b2:	2800      	cmp	r0, #0
   160b4:	d0ed      	beq.n	16092 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   160b6:	2300      	movs	r3, #0
   160b8:	e7f4      	b.n	160a4 <find_sc_cfg+0x20>
	return NULL;
   160ba:	2000      	movs	r0, #0
}
   160bc:	bd70      	pop	{r4, r5, r6, pc}
   160be:	bf00      	nop
   160c0:	20021590 	.word	0x20021590
   160c4:	2002159d 	.word	0x2002159d

000160c8 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   160c8:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   160ca:	1c4a      	adds	r2, r1, #1
{
   160cc:	460c      	mov	r4, r1
		if (conn) {
   160ce:	4605      	mov	r5, r0
   160d0:	b968      	cbnz	r0, 160ee <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   160d2:	4610      	mov	r0, r2
   160d4:	490d      	ldr	r1, [pc, #52]	; (1610c <find_ccc_cfg+0x44>)
   160d6:	f011 f8c9 	bl	2726c <bt_addr_le_eq>
   160da:	b930      	cbnz	r0, 160ea <find_ccc_cfg+0x22>
   160dc:	490b      	ldr	r1, [pc, #44]	; (1610c <find_ccc_cfg+0x44>)
   160de:	f104 000b 	add.w	r0, r4, #11
   160e2:	f011 f8c3 	bl	2726c <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   160e6:	b170      	cbz	r0, 16106 <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   160e8:	340a      	adds	r4, #10
   160ea:	4620      	mov	r0, r4
   160ec:	e00c      	b.n	16108 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   160ee:	7809      	ldrb	r1, [r1, #0]
   160f0:	f010 fb1d 	bl	2672e <bt_conn_is_peer_addr_le>
   160f4:	2800      	cmp	r0, #0
   160f6:	d1f8      	bne.n	160ea <find_ccc_cfg+0x22>
   160f8:	4628      	mov	r0, r5
   160fa:	7aa1      	ldrb	r1, [r4, #10]
   160fc:	f104 020b 	add.w	r2, r4, #11
   16100:	f010 fb15 	bl	2672e <bt_conn_is_peer_addr_le>
   16104:	e7ef      	b.n	160e6 <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   16106:	2000      	movs	r0, #0
}
   16108:	bd38      	pop	{r3, r4, r5, pc}
   1610a:	bf00      	nop
   1610c:	0002d679 	.word	0x0002d679

00016110 <read_ppcp>:
{
   16110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16112:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16114:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   16118:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1611a:	4a06      	ldr	r2, [pc, #24]	; (16134 <read_ppcp+0x24>)
   1611c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   16120:	2308      	movs	r3, #8
   16122:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   16126:	9300      	str	r3, [sp, #0]
   16128:	446b      	add	r3, sp
   1612a:	f011 f8b3 	bl	27294 <bt_gatt_attr_read.constprop.0>
}
   1612e:	b005      	add	sp, #20
   16130:	f85d fb04 	ldr.w	pc, [sp], #4
   16134:	00280018 	.word	0x00280018

00016138 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   16138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1613c:	b085      	sub	sp, #20
   1613e:	461e      	mov	r6, r3
   16140:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   16144:	4681      	mov	r9, r0
   16146:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   16148:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1614c:	2b00      	cmp	r3, #0
   1614e:	d14a      	bne.n	161e6 <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   16150:	1e73      	subs	r3, r6, #1
   16152:	2b01      	cmp	r3, #1
   16154:	d84a      	bhi.n	161ec <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   16156:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   16158:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1615a:	7815      	ldrb	r5, [r2, #0]
   1615c:	bf18      	it	ne
   1615e:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   16160:	f7ff ffb2 	bl	160c8 <find_ccc_cfg>
	if (!cfg) {
   16164:	4604      	mov	r4, r0
   16166:	b9e8      	cbnz	r0, 161a4 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   16168:	b91d      	cbnz	r5, 16172 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1616a:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1616c:	b005      	add	sp, #20
   1616e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   16172:	4641      	mov	r1, r8
   16174:	f7ff ffa8 	bl	160c8 <find_ccc_cfg>
		if (!cfg) {
   16178:	4604      	mov	r4, r0
   1617a:	b958      	cbnz	r0, 16194 <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   1617c:	4b1d      	ldr	r3, [pc, #116]	; (161f4 <bt_gatt_attr_write_ccc+0xbc>)
   1617e:	9000      	str	r0, [sp, #0]
   16180:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16184:	2202      	movs	r2, #2
   16186:	4603      	mov	r3, r0
   16188:	491b      	ldr	r1, [pc, #108]	; (161f8 <bt_gatt_attr_write_ccc+0xc0>)
   1618a:	f011 f90b 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1618e:	f06f 0010 	mvn.w	r0, #16
   16192:	e7eb      	b.n	1616c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16194:	f109 0190 	add.w	r1, r9, #144	; 0x90
   16198:	3001      	adds	r0, #1
   1619a:	f011 f86f 	bl	2727c <bt_addr_le_copy>
		cfg->id = conn->id;
   1619e:	f899 3008 	ldrb.w	r3, [r9, #8]
   161a2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   161a4:	f8d8 301c 	ldr.w	r3, [r8, #28]
   161a8:	b98b      	cbnz	r3, 161ce <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   161aa:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   161ac:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   161b0:	42ab      	cmp	r3, r5
   161b2:	d003      	beq.n	161bc <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   161b4:	4641      	mov	r1, r8
   161b6:	4638      	mov	r0, r7
   161b8:	f010 ffe0 	bl	2717c <gatt_ccc_changed>
	if (!value) {
   161bc:	2d00      	cmp	r5, #0
   161be:	d1d4      	bne.n	1616a <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   161c0:	490e      	ldr	r1, [pc, #56]	; (161fc <bt_gatt_attr_write_ccc+0xc4>)
   161c2:	1c60      	adds	r0, r4, #1
   161c4:	f011 f85a 	bl	2727c <bt_addr_le_copy>
	cfg->id = 0U;
   161c8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   161ca:	8125      	strh	r5, [r4, #8]
}
   161cc:	e7cd      	b.n	1616a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   161ce:	462a      	mov	r2, r5
   161d0:	4639      	mov	r1, r7
   161d2:	4648      	mov	r0, r9
   161d4:	4798      	blx	r3
		if (write < 0) {
   161d6:	2800      	cmp	r0, #0
   161d8:	dbc8      	blt.n	1616c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   161da:	3801      	subs	r0, #1
   161dc:	2801      	cmp	r0, #1
   161de:	d9e4      	bls.n	161aa <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   161e0:	f06f 000d 	mvn.w	r0, #13
   161e4:	e7c2      	b.n	1616c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   161e6:	f06f 0006 	mvn.w	r0, #6
   161ea:	e7bf      	b.n	1616c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   161ec:	f06f 000c 	mvn.w	r0, #12
   161f0:	e7bc      	b.n	1616c <bt_gatt_attr_write_ccc+0x34>
   161f2:	bf00      	nop
   161f4:	0002eaf8 	.word	0x0002eaf8
   161f8:	0002a738 	.word	0x0002a738
   161fc:	0002d679 	.word	0x0002d679

00016200 <clear_cf_cfg>:
{
   16200:	4602      	mov	r2, r0
   16202:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16204:	4907      	ldr	r1, [pc, #28]	; (16224 <clear_cf_cfg+0x24>)
   16206:	3001      	adds	r0, #1
   16208:	f011 f838 	bl	2727c <bt_addr_le_copy>
   1620c:	2300      	movs	r3, #0
   1620e:	320c      	adds	r2, #12
   16210:	f802 3c04 	strb.w	r3, [r2, #-4]
   16214:	e8d2 1fef 	ldaex	r1, [r2]
   16218:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1621c:	2800      	cmp	r0, #0
   1621e:	d1f9      	bne.n	16214 <clear_cf_cfg+0x14>
}
   16220:	bd08      	pop	{r3, pc}
   16222:	bf00      	nop
   16224:	0002d679 	.word	0x0002d679

00016228 <sc_save>:
{
   16228:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1622c:	4680      	mov	r8, r0
   1622e:	460f      	mov	r7, r1
   16230:	4616      	mov	r6, r2
   16232:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   16234:	f7ff ff26 	bl	16084 <find_sc_cfg>
	if (!cfg) {
   16238:	4604      	mov	r4, r0
   1623a:	b9a8      	cbnz	r0, 16268 <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1623c:	4911      	ldr	r1, [pc, #68]	; (16284 <sc_save+0x5c>)
   1623e:	f7ff ff21 	bl	16084 <find_sc_cfg>
		if (!cfg) {
   16242:	4604      	mov	r4, r0
   16244:	b958      	cbnz	r0, 1625e <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   16246:	4b10      	ldr	r3, [pc, #64]	; (16288 <sc_save+0x60>)
   16248:	2201      	movs	r2, #1
   1624a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1624e:	490f      	ldr	r1, [pc, #60]	; (1628c <sc_save+0x64>)
   16250:	4603      	mov	r3, r0
   16252:	9000      	str	r0, [sp, #0]
   16254:	f011 f8a6 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
}
   16258:	b004      	add	sp, #16
   1625a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1625e:	4639      	mov	r1, r7
		cfg->id = id;
   16260:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   16264:	f011 f80a 	bl	2727c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   16268:	8922      	ldrh	r2, [r4, #8]
   1626a:	8963      	ldrh	r3, [r4, #10]
   1626c:	b91a      	cbnz	r2, 16276 <sc_save+0x4e>
   1626e:	b92b      	cbnz	r3, 1627c <sc_save+0x54>
		cfg->data.start = start;
   16270:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   16272:	8165      	strh	r5, [r4, #10]
   16274:	e7f0      	b.n	16258 <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   16276:	42b2      	cmp	r2, r6
		*start = new_start;
   16278:	bf88      	it	hi
   1627a:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1627c:	42ab      	cmp	r3, r5
   1627e:	d2eb      	bcs.n	16258 <sc_save+0x30>
   16280:	e7f7      	b.n	16272 <sc_save+0x4a>
   16282:	bf00      	nop
   16284:	0002d679 	.word	0x0002d679
   16288:	0002eb12 	.word	0x0002eb12
   1628c:	0002a738 	.word	0x0002a738

00016290 <cf_write>:
{
   16290:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16294:	461f      	mov	r7, r3
   16296:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1629a:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1629c:	2b01      	cmp	r3, #1
{
   1629e:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   162a0:	d83b      	bhi.n	1631a <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   162a2:	443b      	add	r3, r7
   162a4:	2b01      	cmp	r3, #1
   162a6:	463d      	mov	r5, r7
   162a8:	dc3a      	bgt.n	16320 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   162aa:	f7ff febd 	bl	16028 <find_cf_cfg>
	if (!cfg) {
   162ae:	4604      	mov	r4, r0
   162b0:	b990      	cbnz	r0, 162d8 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   162b2:	f7ff feb9 	bl	16028 <find_cf_cfg>
	if (!cfg) {
   162b6:	4604      	mov	r4, r0
   162b8:	b970      	cbnz	r0, 162d8 <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   162ba:	4b1c      	ldr	r3, [pc, #112]	; (1632c <cf_write+0x9c>)
   162bc:	2202      	movs	r2, #2
   162be:	e9cd 0301 	strd	r0, r3, [sp, #4]
   162c2:	491b      	ldr	r1, [pc, #108]	; (16330 <cf_write+0xa0>)
   162c4:	4603      	mov	r3, r0
   162c6:	9000      	str	r0, [sp, #0]
   162c8:	f011 f86c 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   162cc:	f06f 0510 	mvn.w	r5, #16
}
   162d0:	4628      	mov	r0, r5
   162d2:	b004      	add	sp, #16
   162d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   162d8:	b197      	cbz	r7, 16300 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   162da:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   162dc:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   162de:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   162e2:	fa21 f003 	lsr.w	r0, r1, r3
   162e6:	07c7      	lsls	r7, r0, #31
   162e8:	d503      	bpl.n	162f2 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   162ea:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   162ee:	07c0      	lsls	r0, r0, #31
   162f0:	d519      	bpl.n	16326 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   162f2:	3301      	adds	r3, #1
   162f4:	2b03      	cmp	r3, #3
   162f6:	d1f4      	bne.n	162e2 <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   162f8:	f002 0207 	and.w	r2, r2, #7
   162fc:	4311      	orrs	r1, r2
   162fe:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16300:	f106 0190 	add.w	r1, r6, #144	; 0x90
   16304:	1c60      	adds	r0, r4, #1
   16306:	f010 ffb9 	bl	2727c <bt_addr_le_copy>
	cfg->id = conn->id;
   1630a:	4620      	mov	r0, r4
   1630c:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1630e:	2100      	movs	r1, #0
	cfg->id = conn->id;
   16310:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16314:	f011 f876 	bl	27404 <atomic_set_bit>
	return len;
   16318:	e7da      	b.n	162d0 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1631a:	f06f 0506 	mvn.w	r5, #6
   1631e:	e7d7      	b.n	162d0 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   16320:	f06f 050c 	mvn.w	r5, #12
   16324:	e7d4      	b.n	162d0 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   16326:	f06f 0512 	mvn.w	r5, #18
   1632a:	e7d1      	b.n	162d0 <cf_write+0x40>
   1632c:	0002eb31 	.word	0x0002eb31
   16330:	0002a738 	.word	0x0002a738

00016334 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   16334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16338:	4b28      	ldr	r3, [pc, #160]	; (163dc <disconnected_cb+0xa8>)
{
   1633a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1633c:	6882      	ldr	r2, [r0, #8]
{
   1633e:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16340:	429a      	cmp	r2, r3
   16342:	d12b      	bne.n	1639c <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16344:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   16346:	8aab      	ldrh	r3, [r5, #20]
   16348:	b343      	cbz	r3, 1639c <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1634a:	f04f 0800 	mov.w	r8, #0
   1634e:	1c6c      	adds	r4, r5, #1
   16350:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   16354:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   16358:	b19b      	cbz	r3, 16382 <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1635a:	4622      	mov	r2, r4
   1635c:	4630      	mov	r0, r6
   1635e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   16362:	f010 f9e4 	bl	2672e <bt_conn_is_peer_addr_le>
   16366:	b9e0      	cbnz	r0, 163a2 <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16368:	4621      	mov	r1, r4
   1636a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1636e:	f7fe f9b5 	bl	146dc <bt_conn_lookup_addr_le>
			if (tmp) {
   16372:	b130      	cbz	r0, 16382 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   16374:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   16376:	2b07      	cmp	r3, #7
   16378:	bf08      	it	eq
   1637a:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   1637e:	f7fd fee1 	bl	14144 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16382:	340a      	adds	r4, #10
   16384:	454c      	cmp	r4, r9
   16386:	d1e5      	bne.n	16354 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   16388:	f1b8 0f00 	cmp.w	r8, #0
   1638c:	d106      	bne.n	1639c <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1638e:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   16390:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   16394:	b113      	cbz	r3, 1639c <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   16396:	4641      	mov	r1, r8
   16398:	4638      	mov	r0, r7
   1639a:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1639c:	2001      	movs	r0, #1
   1639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   163a2:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   163a6:	4651      	mov	r1, sl
   163a8:	7a30      	ldrb	r0, [r6, #8]
   163aa:	f00f fee5 	bl	26178 <bt_addr_le_is_bonded>
   163ae:	b978      	cbnz	r0, 163d0 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   163b0:	4b0b      	ldr	r3, [pc, #44]	; (163e0 <disconnected_cb+0xac>)
   163b2:	429d      	cmp	r5, r3
   163b4:	d102      	bne.n	163bc <disconnected_cb+0x88>
					sc_clear(conn);
   163b6:	4630      	mov	r0, r6
   163b8:	f011 f803 	bl	273c2 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   163bc:	4620      	mov	r0, r4
   163be:	4909      	ldr	r1, [pc, #36]	; (163e4 <disconnected_cb+0xb0>)
   163c0:	f010 ff5c 	bl	2727c <bt_addr_le_copy>
	cfg->id = 0U;
   163c4:	2300      	movs	r3, #0
   163c6:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   163ca:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   163ce:	e7d8      	b.n	16382 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   163d0:	4651      	mov	r1, sl
   163d2:	4620      	mov	r0, r4
   163d4:	f010 ff52 	bl	2727c <bt_addr_le_copy>
   163d8:	e7d3      	b.n	16382 <disconnected_cb+0x4e>
   163da:	bf00      	nop
   163dc:	00016139 	.word	0x00016139
   163e0:	20008508 	.word	0x20008508
   163e4:	0002d679 	.word	0x0002d679

000163e8 <sc_indicate_rsp>:
{
   163e8:	b510      	push	{r4, lr}
   163ea:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   163ec:	4811      	ldr	r0, [pc, #68]	; (16434 <sc_indicate_rsp+0x4c>)
   163ee:	e8d0 3fef 	ldaex	r3, [r0]
   163f2:	f023 0302 	bic.w	r3, r3, #2
   163f6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   163fa:	2a00      	cmp	r2, #0
   163fc:	d1f7      	bne.n	163ee <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   163fe:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   16402:	07da      	lsls	r2, r3, #31
   16404:	d504      	bpl.n	16410 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   16406:	2200      	movs	r2, #0
   16408:	2300      	movs	r3, #0
   1640a:	3830      	subs	r0, #48	; 0x30
   1640c:	f00a fab2 	bl	20974 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   16410:	4620      	mov	r0, r4
   16412:	f010 fe86 	bl	27122 <bt_att_fixed_chan_only>
   16416:	b160      	cbz	r0, 16432 <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   16418:	4620      	mov	r0, r4
   1641a:	f7ff fe05 	bl	16028 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1641e:	b140      	cbz	r0, 16432 <sc_indicate_rsp+0x4a>
   16420:	7a03      	ldrb	r3, [r0, #8]
   16422:	07db      	lsls	r3, r3, #31
   16424:	d505      	bpl.n	16432 <sc_indicate_rsp+0x4a>
}
   16426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1642a:	2100      	movs	r1, #0
   1642c:	300c      	adds	r0, #12
   1642e:	f010 bfe9 	b.w	27404 <atomic_set_bit>
}
   16432:	bd10      	pop	{r4, pc}
   16434:	20009a18 	.word	0x20009a18

00016438 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16438:	2201      	movs	r2, #1
{
   1643a:	b510      	push	{r4, lr}
   1643c:	4b24      	ldr	r3, [pc, #144]	; (164d0 <bt_gatt_init+0x98>)
   1643e:	e8d3 1fef 	ldaex	r1, [r3]
   16442:	2900      	cmp	r1, #0
   16444:	d103      	bne.n	1644e <bt_gatt_init+0x16>
   16446:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1644a:	2800      	cmp	r0, #0
   1644c:	d1f7      	bne.n	1643e <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1644e:	d13e      	bne.n	164ce <bt_gatt_init+0x96>
   16450:	4b20      	ldr	r3, [pc, #128]	; (164d4 <bt_gatt_init+0x9c>)
   16452:	e8d3 1fef 	ldaex	r1, [r3]
   16456:	2900      	cmp	r1, #0
   16458:	d103      	bne.n	16462 <bt_gatt_init+0x2a>
   1645a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1645e:	2800      	cmp	r0, #0
   16460:	d1f7      	bne.n	16452 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   16462:	d120      	bne.n	164a6 <bt_gatt_init+0x6e>
   16464:	2000      	movs	r0, #0
   16466:	491c      	ldr	r1, [pc, #112]	; (164d8 <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16468:	4a1c      	ldr	r2, [pc, #112]	; (164dc <bt_gatt_init+0xa4>)
   1646a:	880b      	ldrh	r3, [r1, #0]
   1646c:	4c1c      	ldr	r4, [pc, #112]	; (164e0 <bt_gatt_init+0xa8>)
   1646e:	42a2      	cmp	r2, r4
   16470:	d916      	bls.n	164a0 <bt_gatt_init+0x68>
   16472:	b100      	cbz	r0, 16476 <bt_gatt_init+0x3e>
   16474:	800b      	strh	r3, [r1, #0]
   16476:	491b      	ldr	r1, [pc, #108]	; (164e4 <bt_gatt_init+0xac>)
   16478:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   1647c:	4a1a      	ldr	r2, [pc, #104]	; (164e8 <bt_gatt_init+0xb0>)
   1647e:	481b      	ldr	r0, [pc, #108]	; (164ec <bt_gatt_init+0xb4>)
   16480:	f00e fc4d 	bl	24d1e <assert_print>
   16484:	481a      	ldr	r0, [pc, #104]	; (164f0 <bt_gatt_init+0xb8>)
   16486:	f00e fc4a 	bl	24d1e <assert_print>
   1648a:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1648e:	4816      	ldr	r0, [pc, #88]	; (164e8 <bt_gatt_init+0xb0>)
   16490:	f00e fc3e 	bl	24d10 <assert_post_action>
		last_static_handle += svc->attr_count;
   16494:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16496:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   16498:	4403      	add	r3, r0
   1649a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1649c:	2001      	movs	r0, #1
   1649e:	e7e6      	b.n	1646e <bt_gatt_init+0x36>
   164a0:	d3f8      	bcc.n	16494 <bt_gatt_init+0x5c>
   164a2:	b100      	cbz	r0, 164a6 <bt_gatt_init+0x6e>
   164a4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   164a6:	2200      	movs	r2, #0
   164a8:	4b12      	ldr	r3, [pc, #72]	; (164f4 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   164aa:	4913      	ldr	r1, [pc, #76]	; (164f8 <bt_gatt_init+0xc0>)
   164ac:	4813      	ldr	r0, [pc, #76]	; (164fc <bt_gatt_init+0xc4>)
	list->tail = NULL;
   164ae:	e9c3 2200 	strd	r2, r2, [r3]
   164b2:	f00a f943 	bl	2073c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   164b6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   164ba:	2300      	movs	r3, #0
   164bc:	480f      	ldr	r0, [pc, #60]	; (164fc <bt_gatt_init+0xc4>)
   164be:	f7fa fea3 	bl	11208 <bt_long_wq_schedule>
}
   164c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   164c6:	490e      	ldr	r1, [pc, #56]	; (16500 <bt_gatt_init+0xc8>)
   164c8:	480e      	ldr	r0, [pc, #56]	; (16504 <bt_gatt_init+0xcc>)
   164ca:	f00a b937 	b.w	2073c <k_work_init_delayable>
}
   164ce:	bd10      	pop	{r4, pc}
   164d0:	200211a8 	.word	0x200211a8
   164d4:	200211a4 	.word	0x200211a4
   164d8:	200215a8 	.word	0x200215a8
   164dc:	0002a6c8 	.word	0x0002a6c8
   164e0:	0002a6e0 	.word	0x0002a6e0
   164e4:	0002eb94 	.word	0x0002eb94
   164e8:	0002eb5d 	.word	0x0002eb5d
   164ec:	0002b6e9 	.word	0x0002b6e9
   164f0:	0002c7cd 	.word	0x0002c7cd
   164f4:	200211ac 	.word	0x200211ac
   164f8:	000274f1 	.word	0x000274f1
   164fc:	20009970 	.word	0x20009970
   16500:	00016b81 	.word	0x00016b81
   16504:	200099e8 	.word	0x200099e8

00016508 <bt_gatt_attr_get_handle>:
	if (!attr) {
   16508:	4603      	mov	r3, r0
{
   1650a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1650e:	b398      	cbz	r0, 16578 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   16510:	8a00      	ldrh	r0, [r0, #16]
   16512:	bb88      	cbnz	r0, 16578 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   16514:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16516:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1651a:	4919      	ldr	r1, [pc, #100]	; (16580 <bt_gatt_attr_get_handle+0x78>)
   1651c:	f8df e064 	ldr.w	lr, [pc, #100]	; 16584 <bt_gatt_attr_get_handle+0x7c>
   16520:	4571      	cmp	r1, lr
   16522:	d928      	bls.n	16576 <bt_gatt_attr_get_handle+0x6e>
   16524:	4918      	ldr	r1, [pc, #96]	; (16588 <bt_gatt_attr_get_handle+0x80>)
   16526:	f240 635d 	movw	r3, #1629	; 0x65d
   1652a:	4a18      	ldr	r2, [pc, #96]	; (1658c <bt_gatt_attr_get_handle+0x84>)
   1652c:	4818      	ldr	r0, [pc, #96]	; (16590 <bt_gatt_attr_get_handle+0x88>)
   1652e:	f00e fbf6 	bl	24d1e <assert_print>
   16532:	4818      	ldr	r0, [pc, #96]	; (16594 <bt_gatt_attr_get_handle+0x8c>)
   16534:	f00e fbf3 	bl	24d1e <assert_print>
   16538:	f240 615d 	movw	r1, #1629	; 0x65d
   1653c:	4813      	ldr	r0, [pc, #76]	; (1658c <bt_gatt_attr_get_handle+0x84>)
   1653e:	f00e fbe7 	bl	24d10 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16542:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   16546:	42bb      	cmp	r3, r7
   16548:	d304      	bcc.n	16554 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1654a:	fb0c 7206 	mla	r2, ip, r6, r7
   1654e:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   16550:	4293      	cmp	r3, r2
   16552:	d90e      	bls.n	16572 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   16554:	4434      	add	r4, r6
   16556:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16558:	4614      	mov	r4, r2
   1655a:	3108      	adds	r1, #8
   1655c:	e7e0      	b.n	16520 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1655e:	fb0c 7805 	mla	r8, ip, r5, r7
   16562:	4543      	cmp	r3, r8
   16564:	d00a      	beq.n	1657c <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16566:	3501      	adds	r5, #1
   16568:	1962      	adds	r2, r4, r5
   1656a:	42b5      	cmp	r5, r6
   1656c:	b292      	uxth	r2, r2
   1656e:	d1f6      	bne.n	1655e <bt_gatt_attr_get_handle+0x56>
   16570:	e7f2      	b.n	16558 <bt_gatt_attr_get_handle+0x50>
   16572:	2500      	movs	r5, #0
   16574:	e7f8      	b.n	16568 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16576:	d3e4      	bcc.n	16542 <bt_gatt_attr_get_handle+0x3a>
}
   16578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1657c:	4610      	mov	r0, r2
   1657e:	e7fb      	b.n	16578 <bt_gatt_attr_get_handle+0x70>
   16580:	0002a6c8 	.word	0x0002a6c8
   16584:	0002a6e0 	.word	0x0002a6e0
   16588:	0002eb8d 	.word	0x0002eb8d
   1658c:	0002eb5d 	.word	0x0002eb5d
   16590:	0002b6e9 	.word	0x0002b6e9
   16594:	0002c7cd 	.word	0x0002c7cd

00016598 <bt_gatt_foreach_attr_type>:
{
   16598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1659c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1659e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   165a2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   165a6:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   165a8:	2d00      	cmp	r5, #0
   165aa:	bf08      	it	eq
   165ac:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   165ae:	4b2b      	ldr	r3, [pc, #172]	; (1665c <bt_gatt_foreach_attr_type+0xc4>)
{
   165b0:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   165b2:	881b      	ldrh	r3, [r3, #0]
{
   165b4:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   165b6:	4283      	cmp	r3, r0
   165b8:	d232      	bcs.n	16620 <bt_gatt_foreach_attr_type+0x88>
}
   165ba:	b003      	add	sp, #12
   165bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   165c0:	4640      	mov	r0, r8
   165c2:	5889      	ldr	r1, [r1, r2]
   165c4:	9301      	str	r3, [sp, #4]
   165c6:	f00f fc8a 	bl	25ede <bt_uuid_cmp>
   165ca:	9b01      	ldr	r3, [sp, #4]
   165cc:	b190      	cbz	r0, 165f4 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   165ce:	3401      	adds	r4, #1
   165d0:	f10a 0a01 	add.w	sl, sl, #1
   165d4:	b2a4      	uxth	r4, r4
   165d6:	6873      	ldr	r3, [r6, #4]
   165d8:	4553      	cmp	r3, sl
   165da:	d92c      	bls.n	16636 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   165dc:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   165de:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   165e0:	429c      	cmp	r4, r3
   165e2:	d8ea      	bhi.n	165ba <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   165e4:	42bc      	cmp	r4, r7
   165e6:	d3f2      	bcc.n	165ce <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   165e8:	fb0b f20a 	mul.w	r2, fp, sl
   165ec:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   165ee:	f1b8 0f00 	cmp.w	r8, #0
   165f2:	d1e5      	bne.n	165c0 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   165f4:	f1b9 0f00 	cmp.w	r9, #0
   165f8:	d10b      	bne.n	16612 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   165fa:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   165fc:	4618      	mov	r0, r3
	*num_matches -= 1;
   165fe:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16600:	4621      	mov	r1, r4
   16602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16606:	4798      	blx	r3
	if (!*num_matches) {
   16608:	2d00      	cmp	r5, #0
   1660a:	d0d6      	beq.n	165ba <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1660c:	2800      	cmp	r0, #0
   1660e:	d1de      	bne.n	165ce <bt_gatt_foreach_attr_type+0x36>
   16610:	e7d3      	b.n	165ba <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   16612:	68da      	ldr	r2, [r3, #12]
   16614:	4591      	cmp	r9, r2
   16616:	d1da      	bne.n	165ce <bt_gatt_foreach_attr_type+0x36>
   16618:	e7ef      	b.n	165fa <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1661a:	f04f 0a00 	mov.w	sl, #0
   1661e:	e7da      	b.n	165d6 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   16620:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16622:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16626:	4e0e      	ldr	r6, [pc, #56]	; (16660 <bt_gatt_foreach_attr_type+0xc8>)
   16628:	e006      	b.n	16638 <bt_gatt_foreach_attr_type+0xa0>
   1662a:	d2c6      	bcs.n	165ba <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1662c:	6873      	ldr	r3, [r6, #4]
   1662e:	4423      	add	r3, r4
   16630:	42bb      	cmp	r3, r7
   16632:	d2f2      	bcs.n	1661a <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   16634:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16636:	3608      	adds	r6, #8
   16638:	4b0a      	ldr	r3, [pc, #40]	; (16664 <bt_gatt_foreach_attr_type+0xcc>)
   1663a:	429e      	cmp	r6, r3
   1663c:	d9f5      	bls.n	1662a <bt_gatt_foreach_attr_type+0x92>
   1663e:	490a      	ldr	r1, [pc, #40]	; (16668 <bt_gatt_foreach_attr_type+0xd0>)
   16640:	f240 7321 	movw	r3, #1825	; 0x721
   16644:	4a09      	ldr	r2, [pc, #36]	; (1666c <bt_gatt_foreach_attr_type+0xd4>)
   16646:	480a      	ldr	r0, [pc, #40]	; (16670 <bt_gatt_foreach_attr_type+0xd8>)
   16648:	f00e fb69 	bl	24d1e <assert_print>
   1664c:	4809      	ldr	r0, [pc, #36]	; (16674 <bt_gatt_foreach_attr_type+0xdc>)
   1664e:	f00e fb66 	bl	24d1e <assert_print>
   16652:	f240 7121 	movw	r1, #1825	; 0x721
   16656:	4805      	ldr	r0, [pc, #20]	; (1666c <bt_gatt_foreach_attr_type+0xd4>)
   16658:	f00e fb5a 	bl	24d10 <assert_post_action>
   1665c:	200215a8 	.word	0x200215a8
   16660:	0002a6c8 	.word	0x0002a6c8
   16664:	0002a6e0 	.word	0x0002a6e0
   16668:	0002eb8d 	.word	0x0002eb8d
   1666c:	0002eb5d 	.word	0x0002eb5d
   16670:	0002b6e9 	.word	0x0002b6e9
   16674:	0002c7cd 	.word	0x0002c7cd

00016678 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   16678:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   1667a:	b510      	push	{r4, lr}
   1667c:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1667e:	aa20      	add	r2, sp, #128	; 0x80
   16680:	a904      	add	r1, sp, #16
   16682:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   16684:	e9cd 3304 	strd	r3, r3, [sp, #16]
   16688:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1668c:	f00f f88a 	bl	257a4 <tc_cmac_setup>
   16690:	4603      	mov	r3, r0
   16692:	b948      	cbnz	r0, 166a8 <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   16694:	4a17      	ldr	r2, [pc, #92]	; (166f4 <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   16696:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1669a:	4917      	ldr	r1, [pc, #92]	; (166f8 <db_hash_gen.constprop.0+0x80>)
   1669c:	2201      	movs	r2, #1
   1669e:	9300      	str	r3, [sp, #0]
   166a0:	f010 fe80 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
}
   166a4:	b04c      	add	sp, #304	; 0x130
   166a6:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   166a8:	ab08      	add	r3, sp, #32
   166aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   166ae:	2001      	movs	r0, #1
   166b0:	4a12      	ldr	r2, [pc, #72]	; (166fc <db_hash_gen.constprop.0+0x84>)
   166b2:	f010 ff12 	bl	274da <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   166b6:	4812      	ldr	r0, [pc, #72]	; (16700 <db_hash_gen.constprop.0+0x88>)
   166b8:	a908      	add	r1, sp, #32
   166ba:	f00f f908 	bl	258ce <tc_cmac_final>
   166be:	4603      	mov	r3, r0
   166c0:	b908      	cbnz	r0, 166c6 <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   166c2:	4a10      	ldr	r2, [pc, #64]	; (16704 <db_hash_gen.constprop.0+0x8c>)
   166c4:	e7e7      	b.n	16696 <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   166c6:	2208      	movs	r2, #8
   166c8:	4b0d      	ldr	r3, [pc, #52]	; (16700 <db_hash_gen.constprop.0+0x88>)
   166ca:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   166ce:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   166d0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   166d4:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   166d6:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   166da:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   166dc:	d1f7      	bne.n	166ce <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   166de:	4b0a      	ldr	r3, [pc, #40]	; (16708 <db_hash_gen.constprop.0+0x90>)
   166e0:	e8d3 1fef 	ldaex	r1, [r3]
   166e4:	f041 0104 	orr.w	r1, r1, #4
   166e8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   166ec:	2a00      	cmp	r2, #0
   166ee:	d0d9      	beq.n	166a4 <db_hash_gen.constprop.0+0x2c>
   166f0:	e7f6      	b.n	166e0 <db_hash_gen.constprop.0+0x68>
   166f2:	bf00      	nop
   166f4:	0002ebbc 	.word	0x0002ebbc
   166f8:	0002a738 	.word	0x0002a738
   166fc:	000271c7 	.word	0x000271c7
   16700:	20009960 	.word	0x20009960
   16704:	0002ebd5 	.word	0x0002ebd5
   16708:	20009a18 	.word	0x20009a18

0001670c <db_hash_read>:
{
   1670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16710:	4914      	ldr	r1, [pc, #80]	; (16764 <db_hash_read+0x58>)
{
   16712:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16714:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16718:	4614      	mov	r4, r2
   1671a:	461d      	mov	r5, r3
   1671c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16720:	f00a f988 	bl	20a34 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16724:	4b10      	ldr	r3, [pc, #64]	; (16768 <db_hash_read+0x5c>)
   16726:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1672a:	0759      	lsls	r1, r3, #29
   1672c:	d401      	bmi.n	16732 <db_hash_read+0x26>
		db_hash_gen(true);
   1672e:	f7ff ffa3 	bl	16678 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   16732:	4630      	mov	r0, r6
   16734:	f7ff fc78 	bl	16028 <find_cf_cfg>
	if (cfg &&
   16738:	b150      	cbz	r0, 16750 <db_hash_read+0x44>
   1673a:	7a03      	ldrb	r3, [r0, #8]
   1673c:	07da      	lsls	r2, r3, #31
   1673e:	d507      	bpl.n	16750 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   16740:	300c      	adds	r0, #12
   16742:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   16746:	07db      	lsls	r3, r3, #31
   16748:	d402      	bmi.n	16750 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1674a:	2101      	movs	r1, #1
   1674c:	f010 fe5a 	bl	27404 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16750:	2310      	movs	r3, #16
   16752:	463a      	mov	r2, r7
   16754:	9306      	str	r3, [sp, #24]
   16756:	4629      	mov	r1, r5
   16758:	4620      	mov	r0, r4
}
   1675a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1675e:	4b03      	ldr	r3, [pc, #12]	; (1676c <db_hash_read+0x60>)
   16760:	f010 bd98 	b.w	27294 <bt_gatt_attr_read.constprop.0>
   16764:	200099a0 	.word	0x200099a0
   16768:	20009a18 	.word	0x20009a18
   1676c:	20009960 	.word	0x20009960

00016770 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   16770:	2300      	movs	r3, #0
{
   16772:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   16774:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   16776:	f7ff fec7 	bl	16508 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1677a:	1c41      	adds	r1, r0, #1
   1677c:	b289      	uxth	r1, r1
   1677e:	4608      	mov	r0, r1
   16780:	4a03      	ldr	r2, [pc, #12]	; (16790 <bt_gatt_attr_next+0x20>)
   16782:	ab01      	add	r3, sp, #4
   16784:	f010 fea9 	bl	274da <bt_gatt_foreach_attr>
}
   16788:	9801      	ldr	r0, [sp, #4]
   1678a:	b003      	add	sp, #12
   1678c:	f85d fb04 	ldr.w	pc, [sp], #4
   16790:	00027177 	.word	0x00027177

00016794 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   16794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16798:	460c      	mov	r4, r1
   1679a:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   1679c:	4605      	mov	r5, r0
   1679e:	b970      	cbnz	r0, 167be <bt_gatt_is_subscribed+0x2a>
   167a0:	4960      	ldr	r1, [pc, #384]	; (16924 <bt_gatt_is_subscribed+0x190>)
   167a2:	f640 434d 	movw	r3, #3149	; 0xc4d
   167a6:	4a60      	ldr	r2, [pc, #384]	; (16928 <bt_gatt_is_subscribed+0x194>)
   167a8:	4860      	ldr	r0, [pc, #384]	; (1692c <bt_gatt_is_subscribed+0x198>)
   167aa:	f00e fab8 	bl	24d1e <assert_print>
   167ae:	4860      	ldr	r0, [pc, #384]	; (16930 <bt_gatt_is_subscribed+0x19c>)
   167b0:	f00e fab5 	bl	24d1e <assert_print>
   167b4:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   167b8:	485b      	ldr	r0, [pc, #364]	; (16928 <bt_gatt_is_subscribed+0x194>)
   167ba:	f00e faa9 	bl	24d10 <assert_post_action>
   167be:	b961      	cbnz	r1, 167da <bt_gatt_is_subscribed+0x46>
   167c0:	495c      	ldr	r1, [pc, #368]	; (16934 <bt_gatt_is_subscribed+0x1a0>)
   167c2:	f640 434e 	movw	r3, #3150	; 0xc4e
   167c6:	4a58      	ldr	r2, [pc, #352]	; (16928 <bt_gatt_is_subscribed+0x194>)
   167c8:	4858      	ldr	r0, [pc, #352]	; (1692c <bt_gatt_is_subscribed+0x198>)
   167ca:	f00e faa8 	bl	24d1e <assert_print>
   167ce:	4858      	ldr	r0, [pc, #352]	; (16930 <bt_gatt_is_subscribed+0x19c>)
   167d0:	f00e faa5 	bl	24d1e <assert_print>
   167d4:	f640 414e 	movw	r1, #3150	; 0xc4e
   167d8:	e7ee      	b.n	167b8 <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   167da:	7b43      	ldrb	r3, [r0, #13]
   167dc:	2b07      	cmp	r3, #7
   167de:	d110      	bne.n	16802 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   167e0:	2300      	movs	r3, #0
   167e2:	f88d 300c 	strb.w	r3, [sp, #12]
   167e6:	f642 0303 	movw	r3, #10243	; 0x2803
   167ea:	6820      	ldr	r0, [r4, #0]
   167ec:	a903      	add	r1, sp, #12
   167ee:	f8ad 300e 	strh.w	r3, [sp, #14]
   167f2:	f00f fb74 	bl	25ede <bt_uuid_cmp>
   167f6:	b9d0      	cbnz	r0, 1682e <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   167f8:	68e3      	ldr	r3, [r4, #12]
   167fa:	799b      	ldrb	r3, [r3, #6]
   167fc:	f013 0f30 	tst.w	r3, #48	; 0x30
   16800:	d103      	bne.n	1680a <bt_gatt_is_subscribed+0x76>
		return false;
   16802:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   16804:	b004      	add	sp, #16
   16806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1680a:	4620      	mov	r0, r4
   1680c:	f7ff ffb0 	bl	16770 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   16810:	4604      	mov	r4, r0
   16812:	b960      	cbnz	r0, 1682e <bt_gatt_is_subscribed+0x9a>
   16814:	4947      	ldr	r1, [pc, #284]	; (16934 <bt_gatt_is_subscribed+0x1a0>)
   16816:	f640 435f 	movw	r3, #3167	; 0xc5f
   1681a:	4a43      	ldr	r2, [pc, #268]	; (16928 <bt_gatt_is_subscribed+0x194>)
   1681c:	4843      	ldr	r0, [pc, #268]	; (1692c <bt_gatt_is_subscribed+0x198>)
   1681e:	f00e fa7e 	bl	24d1e <assert_print>
   16822:	4845      	ldr	r0, [pc, #276]	; (16938 <bt_gatt_is_subscribed+0x1a4>)
   16824:	f00e fa7b 	bl	24d1e <assert_print>
   16828:	f640 415f 	movw	r1, #3167	; 0xc5f
   1682c:	e7c4      	b.n	167b8 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1682e:	2300      	movs	r3, #0
   16830:	6820      	ldr	r0, [r4, #0]
   16832:	f88d 300c 	strb.w	r3, [sp, #12]
   16836:	f642 1302 	movw	r3, #10498	; 0x2902
   1683a:	a903      	add	r1, sp, #12
   1683c:	f8ad 300e 	strh.w	r3, [sp, #14]
   16840:	f00f fb4d 	bl	25ede <bt_uuid_cmp>
   16844:	b188      	cbz	r0, 1686a <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   16846:	4620      	mov	r0, r4
   16848:	f7ff ff92 	bl	16770 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1684c:	4604      	mov	r4, r0
   1684e:	b960      	cbnz	r0, 1686a <bt_gatt_is_subscribed+0xd6>
   16850:	4938      	ldr	r1, [pc, #224]	; (16934 <bt_gatt_is_subscribed+0x1a0>)
   16852:	f640 4365 	movw	r3, #3173	; 0xc65
   16856:	4a34      	ldr	r2, [pc, #208]	; (16928 <bt_gatt_is_subscribed+0x194>)
   16858:	4834      	ldr	r0, [pc, #208]	; (1692c <bt_gatt_is_subscribed+0x198>)
   1685a:	f00e fa60 	bl	24d1e <assert_print>
   1685e:	4836      	ldr	r0, [pc, #216]	; (16938 <bt_gatt_is_subscribed+0x1a4>)
   16860:	f00e fa5d 	bl	24d1e <assert_print>
   16864:	f640 4165 	movw	r1, #3173	; 0xc65
   16868:	e7a6      	b.n	167b8 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1686a:	2700      	movs	r7, #0
   1686c:	f642 1802 	movw	r8, #10498	; 0x2902
   16870:	6820      	ldr	r0, [r4, #0]
   16872:	4669      	mov	r1, sp
   16874:	f88d 7000 	strb.w	r7, [sp]
   16878:	f8ad 8002 	strh.w	r8, [sp, #2]
   1687c:	f00f fb2f 	bl	25ede <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16880:	bb20      	cbnz	r0, 168cc <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   16882:	2300      	movs	r3, #0
   16884:	6820      	ldr	r0, [r4, #0]
   16886:	f88d 300c 	strb.w	r3, [sp, #12]
   1688a:	f642 1302 	movw	r3, #10498	; 0x2902
   1688e:	a903      	add	r1, sp, #12
   16890:	f8ad 300e 	strh.w	r3, [sp, #14]
   16894:	f00f fb23 	bl	25ede <bt_uuid_cmp>
   16898:	2800      	cmp	r0, #0
   1689a:	d1b2      	bne.n	16802 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   1689c:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1689e:	4628      	mov	r0, r5
   168a0:	4622      	mov	r2, r4
   168a2:	f812 1b01 	ldrb.w	r1, [r2], #1
   168a6:	f00f ff42 	bl	2672e <bt_conn_is_peer_addr_le>
   168aa:	b110      	cbz	r0, 168b2 <bt_gatt_is_subscribed+0x11e>
   168ac:	8923      	ldrh	r3, [r4, #8]
   168ae:	421e      	tst	r6, r3
   168b0:	d10a      	bne.n	168c8 <bt_gatt_is_subscribed+0x134>
   168b2:	4628      	mov	r0, r5
   168b4:	7aa1      	ldrb	r1, [r4, #10]
   168b6:	f104 020b 	add.w	r2, r4, #11
   168ba:	f00f ff38 	bl	2672e <bt_conn_is_peer_addr_le>
   168be:	2800      	cmp	r0, #0
   168c0:	d09f      	beq.n	16802 <bt_gatt_is_subscribed+0x6e>
   168c2:	8a63      	ldrh	r3, [r4, #18]
   168c4:	421e      	tst	r6, r3
   168c6:	d09c      	beq.n	16802 <bt_gatt_is_subscribed+0x6e>
			return true;
   168c8:	2001      	movs	r0, #1
   168ca:	e79b      	b.n	16804 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   168cc:	f642 0303 	movw	r3, #10243	; 0x2803
   168d0:	6820      	ldr	r0, [r4, #0]
   168d2:	a901      	add	r1, sp, #4
   168d4:	f88d 7004 	strb.w	r7, [sp, #4]
   168d8:	f8ad 3006 	strh.w	r3, [sp, #6]
   168dc:	f00f faff 	bl	25ede <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   168e0:	2800      	cmp	r0, #0
   168e2:	d0ce      	beq.n	16882 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   168e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   168e8:	6820      	ldr	r0, [r4, #0]
   168ea:	a902      	add	r1, sp, #8
   168ec:	f88d 7008 	strb.w	r7, [sp, #8]
   168f0:	f8ad 300a 	strh.w	r3, [sp, #10]
   168f4:	f00f faf3 	bl	25ede <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   168f8:	2800      	cmp	r0, #0
   168fa:	d0c2      	beq.n	16882 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   168fc:	f642 0301 	movw	r3, #10241	; 0x2801
   16900:	6820      	ldr	r0, [r4, #0]
   16902:	a903      	add	r1, sp, #12
   16904:	f88d 700c 	strb.w	r7, [sp, #12]
   16908:	f8ad 300e 	strh.w	r3, [sp, #14]
   1690c:	f00f fae7 	bl	25ede <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16910:	2800      	cmp	r0, #0
   16912:	d0b6      	beq.n	16882 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   16914:	4620      	mov	r0, r4
   16916:	f7ff ff2b 	bl	16770 <bt_gatt_attr_next>
		if (!attr) {
   1691a:	4604      	mov	r4, r0
   1691c:	2800      	cmp	r0, #0
   1691e:	d1a7      	bne.n	16870 <bt_gatt_is_subscribed+0xdc>
   16920:	e76f      	b.n	16802 <bt_gatt_is_subscribed+0x6e>
   16922:	bf00      	nop
   16924:	0002db55 	.word	0x0002db55
   16928:	0002eb5d 	.word	0x0002eb5d
   1692c:	0002b6e9 	.word	0x0002b6e9
   16930:	0002ebee 	.word	0x0002ebee
   16934:	0002ec03 	.word	0x0002ec03
   16938:	0002ec08 	.word	0x0002ec08

0001693c <gatt_indicate>:
{
   1693c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   16940:	4615      	mov	r5, r2
   16942:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16944:	2294      	movs	r2, #148	; 0x94
   16946:	6869      	ldr	r1, [r5, #4]
{
   16948:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1694a:	f010 fdd3 	bl	274f4 <bt_gatt_check_perm>
   1694e:	4680      	mov	r8, r0
   16950:	b178      	cbz	r0, 16972 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   16952:	4b35      	ldr	r3, [pc, #212]	; (16a28 <gatt_indicate+0xec>)
   16954:	2202      	movs	r2, #2
   16956:	9302      	str	r3, [sp, #8]
   16958:	2300      	movs	r3, #0
   1695a:	4934      	ldr	r1, [pc, #208]	; (16a2c <gatt_indicate+0xf0>)
   1695c:	4618      	mov	r0, r3
   1695e:	e9cd 3300 	strd	r3, r3, [sp]
   16962:	f010 fd1f 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   16966:	f04f 35ff 	mov.w	r5, #4294967295
}
   1696a:	4628      	mov	r0, r5
   1696c:	b004      	add	sp, #16
   1696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   16972:	2202      	movs	r2, #2
   16974:	4638      	mov	r0, r7
   16976:	6869      	ldr	r1, [r5, #4]
   16978:	f7ff ff0c 	bl	16794 <bt_gatt_is_subscribed>
   1697c:	4603      	mov	r3, r0
   1697e:	b950      	cbnz	r0, 16996 <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   16980:	4a2b      	ldr	r2, [pc, #172]	; (16a30 <gatt_indicate+0xf4>)
   16982:	492a      	ldr	r1, [pc, #168]	; (16a2c <gatt_indicate+0xf0>)
   16984:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16988:	9000      	str	r0, [sp, #0]
   1698a:	2202      	movs	r2, #2
   1698c:	f010 fd0a 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   16990:	f06f 0515 	mvn.w	r5, #21
   16994:	e7e9      	b.n	1696a <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16996:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1699a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1699c:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1699e:	f7ff f9b1 	bl	15d04 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   169a2:	3602      	adds	r6, #2
	if (!req) {
   169a4:	4604      	mov	r4, r0
   169a6:	b1c8      	cbz	r0, 169dc <gatt_indicate+0xa0>
	req->att_op = op;
   169a8:	211d      	movs	r1, #29
	req->func = func;
   169aa:	4b22      	ldr	r3, [pc, #136]	; (16a34 <gatt_indicate+0xf8>)
	req->len = len;
   169ac:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   169ae:	4632      	mov	r2, r6
	req->att_op = op;
   169b0:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   169b2:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   169b6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   169b8:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   169ba:	4638      	mov	r0, r7
   169bc:	f7fe fed6 	bl	1576c <bt_att_create_pdu>
	if (!buf) {
   169c0:	4606      	mov	r6, r0
   169c2:	b970      	cbnz	r0, 169e2 <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   169c4:	4b1c      	ldr	r3, [pc, #112]	; (16a38 <gatt_indicate+0xfc>)
   169c6:	9000      	str	r0, [sp, #0]
   169c8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   169cc:	2202      	movs	r2, #2
   169ce:	4603      	mov	r3, r0
   169d0:	4916      	ldr	r1, [pc, #88]	; (16a2c <gatt_indicate+0xf0>)
   169d2:	f010 fce7 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   169d6:	4620      	mov	r0, r4
   169d8:	f7ff f9b8 	bl	15d4c <bt_att_req_free>
		return -ENOMEM;
   169dc:	f06f 050b 	mvn.w	r5, #11
   169e0:	e7c3      	b.n	1696a <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   169e2:	2301      	movs	r3, #1
   169e4:	4642      	mov	r2, r8
   169e6:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   169e8:	f106 0a0c 	add.w	sl, r6, #12
   169ec:	f010 fbbc 	bl	27168 <bt_att_set_tx_meta_data>
   169f0:	2102      	movs	r1, #2
   169f2:	4650      	mov	r0, sl
   169f4:	f002 fde2 	bl	195bc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   169f8:	4680      	mov	r8, r0
   169fa:	f828 9b02 	strh.w	r9, [r8], #2
   169fe:	8aa9      	ldrh	r1, [r5, #20]
   16a00:	4650      	mov	r0, sl
   16a02:	f002 fddb 	bl	195bc <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16a06:	8aaa      	ldrh	r2, [r5, #20]
   16a08:	6929      	ldr	r1, [r5, #16]
   16a0a:	4640      	mov	r0, r8
   16a0c:	f012 feed 	bl	297ea <memcpy>
	err = bt_att_req_send(conn, req);
   16a10:	4621      	mov	r1, r4
   16a12:	4638      	mov	r0, r7
	req->buf = buf;
   16a14:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16a16:	f7ff fad1 	bl	15fbc <bt_att_req_send>
	if (err) {
   16a1a:	4605      	mov	r5, r0
   16a1c:	2800      	cmp	r0, #0
   16a1e:	d0a4      	beq.n	1696a <gatt_indicate+0x2e>
		bt_att_req_free(req);
   16a20:	4620      	mov	r0, r4
   16a22:	f7ff f993 	bl	15d4c <bt_att_req_free>
   16a26:	e7a0      	b.n	1696a <gatt_indicate+0x2e>
   16a28:	0002ec1e 	.word	0x0002ec1e
   16a2c:	0002a738 	.word	0x0002a738
   16a30:	0002ec34 	.word	0x0002ec34
   16a34:	00027199 	.word	0x00027199
   16a38:	0002ec5f 	.word	0x0002ec5f

00016a3c <bt_gatt_indicate>:
{
   16a3c:	b530      	push	{r4, r5, lr}
   16a3e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   16a40:	460c      	mov	r4, r1
{
   16a42:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   16a44:	b971      	cbnz	r1, 16a64 <bt_gatt_indicate+0x28>
   16a46:	4946      	ldr	r1, [pc, #280]	; (16b60 <bt_gatt_indicate+0x124>)
   16a48:	f640 330d 	movw	r3, #2829	; 0xb0d
   16a4c:	4a45      	ldr	r2, [pc, #276]	; (16b64 <bt_gatt_indicate+0x128>)
   16a4e:	4846      	ldr	r0, [pc, #280]	; (16b68 <bt_gatt_indicate+0x12c>)
   16a50:	f00e f965 	bl	24d1e <assert_print>
   16a54:	4845      	ldr	r0, [pc, #276]	; (16b6c <bt_gatt_indicate+0x130>)
   16a56:	f00e f962 	bl	24d1e <assert_print>
   16a5a:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   16a5e:	4841      	ldr	r0, [pc, #260]	; (16b64 <bt_gatt_indicate+0x128>)
   16a60:	f00e f956 	bl	24d10 <assert_post_action>
   16a64:	684b      	ldr	r3, [r1, #4]
   16a66:	b973      	cbnz	r3, 16a86 <bt_gatt_indicate+0x4a>
   16a68:	680b      	ldr	r3, [r1, #0]
   16a6a:	b963      	cbnz	r3, 16a86 <bt_gatt_indicate+0x4a>
   16a6c:	4940      	ldr	r1, [pc, #256]	; (16b70 <bt_gatt_indicate+0x134>)
   16a6e:	f640 330e 	movw	r3, #2830	; 0xb0e
   16a72:	4a3c      	ldr	r2, [pc, #240]	; (16b64 <bt_gatt_indicate+0x128>)
   16a74:	483c      	ldr	r0, [pc, #240]	; (16b68 <bt_gatt_indicate+0x12c>)
   16a76:	f00e f952 	bl	24d1e <assert_print>
   16a7a:	483c      	ldr	r0, [pc, #240]	; (16b6c <bt_gatt_indicate+0x130>)
   16a7c:	f00e f94f 	bl	24d1e <assert_print>
   16a80:	f640 310e 	movw	r1, #2830	; 0xb0e
   16a84:	e7eb      	b.n	16a5e <bt_gatt_indicate+0x22>
   16a86:	4b3b      	ldr	r3, [pc, #236]	; (16b74 <bt_gatt_indicate+0x138>)
   16a88:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16a8c:	075a      	lsls	r2, r3, #29
   16a8e:	d561      	bpl.n	16b54 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16a90:	b115      	cbz	r5, 16a98 <bt_gatt_indicate+0x5c>
   16a92:	7b6b      	ldrb	r3, [r5, #13]
   16a94:	2b07      	cmp	r3, #7
   16a96:	d160      	bne.n	16b5a <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   16a98:	6860      	ldr	r0, [r4, #4]
   16a9a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16a9c:	f7ff fd34 	bl	16508 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16aa0:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16aa2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16aa6:	b33a      	cbz	r2, 16af8 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16aa8:	a905      	add	r1, sp, #20
   16aaa:	9102      	str	r1, [sp, #8]
   16aac:	4932      	ldr	r1, [pc, #200]	; (16b78 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   16aae:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16ab0:	9101      	str	r1, [sp, #4]
   16ab2:	2101      	movs	r1, #1
   16ab4:	9100      	str	r1, [sp, #0]
   16ab6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16aba:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16abc:	f7ff fd6c 	bl	16598 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16ac0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16ac2:	b91b      	cbnz	r3, 16acc <bt_gatt_indicate+0x90>
			return -ENOENT;
   16ac4:	f06f 0001 	mvn.w	r0, #1
}
   16ac8:	b00b      	add	sp, #44	; 0x2c
   16aca:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16acc:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16ace:	9b05      	ldr	r3, [sp, #20]
   16ad0:	a904      	add	r1, sp, #16
   16ad2:	6818      	ldr	r0, [r3, #0]
   16ad4:	2300      	movs	r3, #0
   16ad6:	f88d 3010 	strb.w	r3, [sp, #16]
   16ada:	f642 0303 	movw	r3, #10243	; 0x2803
   16ade:	f8ad 3012 	strh.w	r3, [sp, #18]
   16ae2:	f00f f9fc 	bl	25ede <bt_uuid_cmp>
   16ae6:	b970      	cbnz	r0, 16b06 <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16ae8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16aea:	68c3      	ldr	r3, [r0, #12]
   16aec:	799b      	ldrb	r3, [r3, #6]
   16aee:	069b      	lsls	r3, r3, #26
   16af0:	d405      	bmi.n	16afe <bt_gatt_indicate+0xc2>
			return -EINVAL;
   16af2:	f06f 0015 	mvn.w	r0, #21
   16af6:	e7e7      	b.n	16ac8 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   16af8:	2800      	cmp	r0, #0
   16afa:	d1e8      	bne.n	16ace <bt_gatt_indicate+0x92>
   16afc:	e7e2      	b.n	16ac4 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16afe:	f010 fca5 	bl	2744c <bt_gatt_attr_value_handle>
   16b02:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   16b06:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16b0a:	b13d      	cbz	r5, 16b1c <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   16b0c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16b0e:	4601      	mov	r1, r0
   16b10:	4622      	mov	r2, r4
   16b12:	4628      	mov	r0, r5
		params->_ref = 1;
   16b14:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   16b16:	f7ff ff11 	bl	1693c <gatt_indicate>
   16b1a:	e7d5      	b.n	16ac8 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   16b1c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16b20:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16b22:	2302      	movs	r3, #2
   16b24:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16b28:	f642 1302 	movw	r3, #10498	; 0x2902
   16b2c:	f8ad 3012 	strh.w	r3, [sp, #18]
   16b30:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   16b32:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16b34:	9302      	str	r3, [sp, #8]
   16b36:	4b11      	ldr	r3, [pc, #68]	; (16b7c <bt_gatt_indicate+0x140>)
   16b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16b3c:	9301      	str	r3, [sp, #4]
   16b3e:	2301      	movs	r3, #1
   16b40:	aa04      	add	r2, sp, #16
   16b42:	9300      	str	r3, [sp, #0]
   16b44:	462b      	mov	r3, r5
	data.ind_params = params;
   16b46:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16b48:	f88d 5010 	strb.w	r5, [sp, #16]
   16b4c:	f7ff fd24 	bl	16598 <bt_gatt_foreach_attr_type>
	return data.err;
   16b50:	9807      	ldr	r0, [sp, #28]
   16b52:	e7b9      	b.n	16ac8 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   16b54:	f06f 000a 	mvn.w	r0, #10
   16b58:	e7b6      	b.n	16ac8 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   16b5a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16b5e:	e7b3      	b.n	16ac8 <bt_gatt_indicate+0x8c>
   16b60:	0002ec86 	.word	0x0002ec86
   16b64:	0002eb5d 	.word	0x0002eb5d
   16b68:	0002b6e9 	.word	0x0002b6e9
   16b6c:	0002ec8d 	.word	0x0002ec8d
   16b70:	0002eca3 	.word	0x0002eca3
   16b74:	200080cc 	.word	0x200080cc
   16b78:	000271bf 	.word	0x000271bf
   16b7c:	00016f45 	.word	0x00016f45

00016b80 <sc_process>:
{
   16b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16b82:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   16b84:	f1a0 0120 	sub.w	r1, r0, #32
   16b88:	f100 0430 	add.w	r4, r0, #48	; 0x30
   16b8c:	e8d4 2faf 	lda	r2, [r4]
   16b90:	f3c2 0040 	ubfx	r0, r2, #1, #1
   16b94:	0792      	lsls	r2, r2, #30
   16b96:	d50e      	bpl.n	16bb6 <sc_process+0x36>
   16b98:	4919      	ldr	r1, [pc, #100]	; (16c00 <sc_process+0x80>)
   16b9a:	f240 439a 	movw	r3, #1178	; 0x49a
   16b9e:	4a19      	ldr	r2, [pc, #100]	; (16c04 <sc_process+0x84>)
   16ba0:	4819      	ldr	r0, [pc, #100]	; (16c08 <sc_process+0x88>)
   16ba2:	f00e f8bc 	bl	24d1e <assert_print>
   16ba6:	4819      	ldr	r0, [pc, #100]	; (16c0c <sc_process+0x8c>)
   16ba8:	f00e f8b9 	bl	24d1e <assert_print>
   16bac:	f240 419a 	movw	r1, #1178	; 0x49a
   16bb0:	4814      	ldr	r0, [pc, #80]	; (16c04 <sc_process+0x84>)
   16bb2:	f00e f8ad 	bl	24d10 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16bb6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   16bba:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16bbc:	e8d4 2fef 	ldaex	r2, [r4]
   16bc0:	f022 0201 	bic.w	r2, r2, #1
   16bc4:	e8c4 2fe5 	stlex	r5, r2, [r4]
   16bc8:	2d00      	cmp	r5, #0
   16bca:	d1f7      	bne.n	16bbc <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16bcc:	4a10      	ldr	r2, [pc, #64]	; (16c10 <sc_process+0x90>)
	sc->start = 0U;
   16bce:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16bd2:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   16bd6:	4a0f      	ldr	r2, [pc, #60]	; (16c14 <sc_process+0x94>)
	sc->end = 0U;
   16bd8:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   16bdc:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16be0:	aa01      	add	r2, sp, #4
   16be2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16be6:	2204      	movs	r2, #4
   16be8:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16bec:	f7ff ff26 	bl	16a3c <bt_gatt_indicate>
   16bf0:	b918      	cbnz	r0, 16bfa <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16bf2:	2101      	movs	r1, #1
   16bf4:	4620      	mov	r0, r4
   16bf6:	f010 fc05 	bl	27404 <atomic_set_bit>
}
   16bfa:	b003      	add	sp, #12
   16bfc:	bd30      	pop	{r4, r5, pc}
   16bfe:	bf00      	nop
   16c00:	0002ecc0 	.word	0x0002ecc0
   16c04:	0002eb5d 	.word	0x0002eb5d
   16c08:	0002b6e9 	.word	0x0002b6e9
   16c0c:	0002ecf1 	.word	0x0002ecf1
   16c10:	0002b188 	.word	0x0002b188
   16c14:	000163e9 	.word	0x000163e9

00016c18 <update_ccc>:
{
   16c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16c1c:	4b3e      	ldr	r3, [pc, #248]	; (16d18 <update_ccc+0x100>)
{
   16c1e:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   16c20:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   16c22:	6882      	ldr	r2, [r0, #8]
{
   16c24:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16c26:	429a      	cmp	r2, r3
{
   16c28:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   16c2a:	d170      	bne.n	16d0e <update_ccc+0xf6>
	ccc = attr->user_data;
   16c2c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16c30:	f108 0601 	add.w	r6, r8, #1
   16c34:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   16c38:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   16c3c:	b1d3      	cbz	r3, 16c74 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16c3e:	4632      	mov	r2, r6
   16c40:	4620      	mov	r0, r4
   16c42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   16c46:	f00f fd72 	bl	2672e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16c4a:	b198      	cbz	r0, 16c74 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   16c4c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   16c50:	4629      	mov	r1, r5
   16c52:	4620      	mov	r0, r4
   16c54:	f010 fc4e 	bl	274f4 <bt_gatt_check_perm>
		if (err) {
   16c58:	b308      	cbz	r0, 16c9e <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16c5a:	2803      	cmp	r0, #3
   16c5c:	d10e      	bne.n	16c7c <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   16c5e:	4b2f      	ldr	r3, [pc, #188]	; (16d1c <update_ccc+0x104>)
   16c60:	2202      	movs	r2, #2
   16c62:	9302      	str	r3, [sp, #8]
   16c64:	2300      	movs	r3, #0
   16c66:	492e      	ldr	r1, [pc, #184]	; (16d20 <update_ccc+0x108>)
   16c68:	4618      	mov	r0, r3
   16c6a:	e9cd 3300 	strd	r3, r3, [sp]
   16c6e:	9503      	str	r5, [sp, #12]
   16c70:	f010 fb98 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16c74:	360a      	adds	r6, #10
   16c76:	454e      	cmp	r6, r9
   16c78:	d1de      	bne.n	16c38 <update_ccc+0x20>
   16c7a:	e048      	b.n	16d0e <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   16c7c:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   16c7e:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   16c80:	bf0c      	ite	eq
   16c82:	f04f 0a03 	moveq.w	sl, #3
   16c86:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   16c8a:	f00f fd4e 	bl	2672a <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   16c8e:	4582      	cmp	sl, r0
   16c90:	d905      	bls.n	16c9e <update_ccc+0x86>
				if (data->sec < sec) {
   16c92:	793b      	ldrb	r3, [r7, #4]
   16c94:	4553      	cmp	r3, sl
   16c96:	d2ed      	bcs.n	16c74 <update_ccc+0x5c>
					data->sec = sec;
   16c98:	f887 a004 	strb.w	sl, [r7, #4]
   16c9c:	e7ea      	b.n	16c74 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   16c9e:	4641      	mov	r1, r8
   16ca0:	4628      	mov	r0, r5
   16ca2:	f010 fa6b 	bl	2717c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   16ca6:	4b1f      	ldr	r3, [pc, #124]	; (16d24 <update_ccc+0x10c>)
   16ca8:	4598      	cmp	r8, r3
   16caa:	d130      	bne.n	16d0e <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16cac:	7a20      	ldrb	r0, [r4, #8]
   16cae:	f104 0190 	add.w	r1, r4, #144	; 0x90
   16cb2:	f7ff f9e7 	bl	16084 <find_sc_cfg>
	if (!cfg) {
   16cb6:	b350      	cbz	r0, 16d0e <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   16cb8:	8902      	ldrh	r2, [r0, #8]
   16cba:	8943      	ldrh	r3, [r0, #10]
   16cbc:	ea52 0103 	orrs.w	r1, r2, r3
   16cc0:	d025      	beq.n	16d0e <update_ccc+0xf6>
	index = bt_conn_index(conn);
   16cc2:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   16cc4:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16cc8:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   16ccc:	f7fd fb56 	bl	1437c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16cd0:	2318      	movs	r3, #24
   16cd2:	4915      	ldr	r1, [pc, #84]	; (16d28 <update_ccc+0x110>)
   16cd4:	4a15      	ldr	r2, [pc, #84]	; (16d2c <update_ccc+0x114>)
   16cd6:	fb03 1300 	mla	r3, r3, r0, r1
   16cda:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16cdc:	4a14      	ldr	r2, [pc, #80]	; (16d30 <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16cde:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   16ce0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   16ce2:	aa05      	add	r2, sp, #20
   16ce4:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   16ce6:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16ce8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16cec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   16cf0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16cf2:	4620      	mov	r0, r4
   16cf4:	f7ff fea2 	bl	16a3c <bt_gatt_indicate>
   16cf8:	b148      	cbz	r0, 16d0e <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   16cfa:	4b0e      	ldr	r3, [pc, #56]	; (16d34 <update_ccc+0x11c>)
   16cfc:	2201      	movs	r2, #1
   16cfe:	9302      	str	r3, [sp, #8]
   16d00:	2300      	movs	r3, #0
   16d02:	4907      	ldr	r1, [pc, #28]	; (16d20 <update_ccc+0x108>)
   16d04:	4618      	mov	r0, r3
   16d06:	e9cd 3300 	strd	r3, r3, [sp]
   16d0a:	f010 fb4b 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
}
   16d0e:	2001      	movs	r0, #1
   16d10:	b006      	add	sp, #24
   16d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16d16:	bf00      	nop
   16d18:	00016139 	.word	0x00016139
   16d1c:	0002ed0c 	.word	0x0002ed0c
   16d20:	0002a738 	.word	0x0002a738
   16d24:	20008508 	.word	0x20008508
   16d28:	2002116c 	.word	0x2002116c
   16d2c:	0002b188 	.word	0x0002b188
   16d30:	00027419 	.word	0x00027419
   16d34:	0002ed20 	.word	0x0002ed20

00016d38 <gatt_notify>:
{
   16d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16d3c:	4614      	mov	r4, r2
   16d3e:	4688      	mov	r8, r1
   16d40:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16d42:	2294      	movs	r2, #148	; 0x94
   16d44:	6861      	ldr	r1, [r4, #4]
{
   16d46:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16d48:	f010 fbd4 	bl	274f4 <bt_gatt_check_perm>
   16d4c:	b170      	cbz	r0, 16d6c <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   16d4e:	4b2a      	ldr	r3, [pc, #168]	; (16df8 <gatt_notify+0xc0>)
   16d50:	2202      	movs	r2, #2
   16d52:	9302      	str	r3, [sp, #8]
   16d54:	2300      	movs	r3, #0
   16d56:	4929      	ldr	r1, [pc, #164]	; (16dfc <gatt_notify+0xc4>)
   16d58:	4618      	mov	r0, r3
   16d5a:	e9cd 3300 	strd	r3, r3, [sp]
   16d5e:	f010 fb21 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   16d62:	f04f 30ff 	mov.w	r0, #4294967295
}
   16d66:	b005      	add	sp, #20
   16d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   16d6c:	2201      	movs	r2, #1
   16d6e:	4630      	mov	r0, r6
   16d70:	6861      	ldr	r1, [r4, #4]
   16d72:	f7ff fd0f 	bl	16794 <bt_gatt_is_subscribed>
   16d76:	4603      	mov	r3, r0
   16d78:	b950      	cbnz	r0, 16d90 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   16d7a:	4a21      	ldr	r2, [pc, #132]	; (16e00 <gatt_notify+0xc8>)
   16d7c:	9000      	str	r0, [sp, #0]
   16d7e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16d82:	491e      	ldr	r1, [pc, #120]	; (16dfc <gatt_notify+0xc4>)
   16d84:	2202      	movs	r2, #2
   16d86:	f010 fb0d 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   16d8a:	f06f 0015 	mvn.w	r0, #21
   16d8e:	e7ea      	b.n	16d66 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   16d90:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   16d92:	211b      	movs	r1, #27
   16d94:	4630      	mov	r0, r6
   16d96:	3202      	adds	r2, #2
   16d98:	f7fe fce8 	bl	1576c <bt_att_create_pdu>
	if (!buf) {
   16d9c:	4605      	mov	r5, r0
   16d9e:	b958      	cbnz	r0, 16db8 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   16da0:	4b18      	ldr	r3, [pc, #96]	; (16e04 <gatt_notify+0xcc>)
   16da2:	9000      	str	r0, [sp, #0]
   16da4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16da8:	2202      	movs	r2, #2
   16daa:	4603      	mov	r3, r0
   16dac:	4913      	ldr	r1, [pc, #76]	; (16dfc <gatt_notify+0xc4>)
   16dae:	f010 faf9 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   16db2:	f06f 000b 	mvn.w	r0, #11
   16db6:	e7d6      	b.n	16d66 <gatt_notify+0x2e>
   16db8:	f100 090c 	add.w	r9, r0, #12
   16dbc:	2102      	movs	r1, #2
   16dbe:	4648      	mov	r0, r9
   16dc0:	f002 fbfc 	bl	195bc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   16dc4:	4607      	mov	r7, r0
   16dc6:	f827 8b02 	strh.w	r8, [r7], #2
   16dca:	89a1      	ldrh	r1, [r4, #12]
   16dcc:	4648      	mov	r0, r9
   16dce:	f002 fbf5 	bl	195bc <net_buf_simple_add>
   16dd2:	89a2      	ldrh	r2, [r4, #12]
   16dd4:	68a1      	ldr	r1, [r4, #8]
   16dd6:	4638      	mov	r0, r7
   16dd8:	f012 fd07 	bl	297ea <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   16ddc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   16de0:	4628      	mov	r0, r5
   16de2:	2301      	movs	r3, #1
   16de4:	f010 f9c0 	bl	27168 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   16de8:	4629      	mov	r1, r5
   16dea:	4630      	mov	r0, r6
}
   16dec:	b005      	add	sp, #20
   16dee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   16df2:	f7ff b885 	b.w	15f00 <bt_att_send>
   16df6:	bf00      	nop
   16df8:	0002ec1e 	.word	0x0002ec1e
   16dfc:	0002a738 	.word	0x0002a738
   16e00:	0002ec34 	.word	0x0002ec34
   16e04:	0002ed3d 	.word	0x0002ed3d

00016e08 <bt_gatt_notify_cb>:
{
   16e08:	b530      	push	{r4, r5, lr}
   16e0a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   16e0c:	460c      	mov	r4, r1
{
   16e0e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   16e10:	b971      	cbnz	r1, 16e30 <bt_gatt_notify_cb+0x28>
   16e12:	4944      	ldr	r1, [pc, #272]	; (16f24 <bt_gatt_notify_cb+0x11c>)
   16e14:	f640 232d 	movw	r3, #2605	; 0xa2d
   16e18:	4a43      	ldr	r2, [pc, #268]	; (16f28 <bt_gatt_notify_cb+0x120>)
   16e1a:	4844      	ldr	r0, [pc, #272]	; (16f2c <bt_gatt_notify_cb+0x124>)
   16e1c:	f00d ff7f 	bl	24d1e <assert_print>
   16e20:	4843      	ldr	r0, [pc, #268]	; (16f30 <bt_gatt_notify_cb+0x128>)
   16e22:	f00d ff7c 	bl	24d1e <assert_print>
   16e26:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   16e2a:	483f      	ldr	r0, [pc, #252]	; (16f28 <bt_gatt_notify_cb+0x120>)
   16e2c:	f00d ff70 	bl	24d10 <assert_post_action>
   16e30:	684b      	ldr	r3, [r1, #4]
   16e32:	b973      	cbnz	r3, 16e52 <bt_gatt_notify_cb+0x4a>
   16e34:	680b      	ldr	r3, [r1, #0]
   16e36:	b963      	cbnz	r3, 16e52 <bt_gatt_notify_cb+0x4a>
   16e38:	493e      	ldr	r1, [pc, #248]	; (16f34 <bt_gatt_notify_cb+0x12c>)
   16e3a:	f640 232e 	movw	r3, #2606	; 0xa2e
   16e3e:	4a3a      	ldr	r2, [pc, #232]	; (16f28 <bt_gatt_notify_cb+0x120>)
   16e40:	483a      	ldr	r0, [pc, #232]	; (16f2c <bt_gatt_notify_cb+0x124>)
   16e42:	f00d ff6c 	bl	24d1e <assert_print>
   16e46:	483a      	ldr	r0, [pc, #232]	; (16f30 <bt_gatt_notify_cb+0x128>)
   16e48:	f00d ff69 	bl	24d1e <assert_print>
   16e4c:	f640 212e 	movw	r1, #2606	; 0xa2e
   16e50:	e7eb      	b.n	16e2a <bt_gatt_notify_cb+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e52:	4b39      	ldr	r3, [pc, #228]	; (16f38 <bt_gatt_notify_cb+0x130>)
   16e54:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16e58:	075a      	lsls	r2, r3, #29
   16e5a:	d55d      	bpl.n	16f18 <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16e5c:	b115      	cbz	r5, 16e64 <bt_gatt_notify_cb+0x5c>
   16e5e:	7b6b      	ldrb	r3, [r5, #13]
   16e60:	2b07      	cmp	r3, #7
   16e62:	d15c      	bne.n	16f1e <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   16e64:	6860      	ldr	r0, [r4, #4]
   16e66:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16e68:	f7ff fb4e 	bl	16508 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16e6c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16e6e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16e72:	b33a      	cbz	r2, 16ec4 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16e74:	a905      	add	r1, sp, #20
   16e76:	9102      	str	r1, [sp, #8]
   16e78:	4930      	ldr	r1, [pc, #192]	; (16f3c <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   16e7a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16e7c:	9101      	str	r1, [sp, #4]
   16e7e:	2101      	movs	r1, #1
   16e80:	9100      	str	r1, [sp, #0]
   16e82:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16e86:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16e88:	f7ff fb86 	bl	16598 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16e8c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16e8e:	b91b      	cbnz	r3, 16e98 <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   16e90:	f06f 0001 	mvn.w	r0, #1
}
   16e94:	b00b      	add	sp, #44	; 0x2c
   16e96:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16e98:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16e9a:	9b05      	ldr	r3, [sp, #20]
   16e9c:	a904      	add	r1, sp, #16
   16e9e:	6818      	ldr	r0, [r3, #0]
   16ea0:	2300      	movs	r3, #0
   16ea2:	f88d 3010 	strb.w	r3, [sp, #16]
   16ea6:	f642 0303 	movw	r3, #10243	; 0x2803
   16eaa:	f8ad 3012 	strh.w	r3, [sp, #18]
   16eae:	f00f f816 	bl	25ede <bt_uuid_cmp>
   16eb2:	b970      	cbnz	r0, 16ed2 <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16eb4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   16eb6:	68c3      	ldr	r3, [r0, #12]
   16eb8:	799b      	ldrb	r3, [r3, #6]
   16eba:	06db      	lsls	r3, r3, #27
   16ebc:	d405      	bmi.n	16eca <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   16ebe:	f06f 0015 	mvn.w	r0, #21
   16ec2:	e7e7      	b.n	16e94 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   16ec4:	2800      	cmp	r0, #0
   16ec6:	d1e8      	bne.n	16e9a <bt_gatt_notify_cb+0x92>
   16ec8:	e7e2      	b.n	16e90 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16eca:	f010 fabf 	bl	2744c <bt_gatt_attr_value_handle>
   16ece:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   16ed2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16ed6:	b12d      	cbz	r5, 16ee4 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   16ed8:	4601      	mov	r1, r0
   16eda:	4622      	mov	r2, r4
   16edc:	4628      	mov	r0, r5
   16ede:	f7ff ff2b 	bl	16d38 <gatt_notify>
   16ee2:	e7d7      	b.n	16e94 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   16ee4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16ee8:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   16eec:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   16eee:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16ef0:	f8ad 2012 	strh.w	r2, [sp, #18]
   16ef4:	aa05      	add	r2, sp, #20
   16ef6:	9202      	str	r2, [sp, #8]
   16ef8:	4a11      	ldr	r2, [pc, #68]	; (16f40 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   16efa:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16efe:	e9cd 3200 	strd	r3, r2, [sp]
   16f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16f06:	462b      	mov	r3, r5
   16f08:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   16f0a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f0c:	f88d 5010 	strb.w	r5, [sp, #16]
   16f10:	f7ff fb42 	bl	16598 <bt_gatt_foreach_attr_type>
	return data.err;
   16f14:	9807      	ldr	r0, [sp, #28]
   16f16:	e7bd      	b.n	16e94 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   16f18:	f06f 000a 	mvn.w	r0, #10
   16f1c:	e7ba      	b.n	16e94 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   16f1e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16f22:	e7b7      	b.n	16e94 <bt_gatt_notify_cb+0x8c>
   16f24:	0002ec86 	.word	0x0002ec86
   16f28:	0002eb5d 	.word	0x0002eb5d
   16f2c:	0002b6e9 	.word	0x0002b6e9
   16f30:	0002ec8d 	.word	0x0002ec8d
   16f34:	0002eca3 	.word	0x0002eca3
   16f38:	200080cc 	.word	0x200080cc
   16f3c:	000271bf 	.word	0x000271bf
   16f40:	00016f45 	.word	0x00016f45

00016f44 <notify_cb>:
{
   16f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16f48:	4b46      	ldr	r3, [pc, #280]	; (17064 <notify_cb+0x120>)
{
   16f4a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16f4c:	6882      	ldr	r2, [r0, #8]
{
   16f4e:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16f50:	429a      	cmp	r2, r3
{
   16f52:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   16f54:	d136      	bne.n	16fc4 <notify_cb+0x80>
	ccc = attr->user_data;
   16f56:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16f5a:	4b43      	ldr	r3, [pc, #268]	; (17068 <notify_cb+0x124>)
   16f5c:	459a      	cmp	sl, r3
   16f5e:	d119      	bne.n	16f94 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16f60:	2600      	movs	r6, #0
   16f62:	4c42      	ldr	r4, [pc, #264]	; (1706c <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16f64:	4f42      	ldr	r7, [pc, #264]	; (17070 <notify_cb+0x12c>)
   16f66:	4639      	mov	r1, r7
   16f68:	4620      	mov	r0, r4
   16f6a:	f010 f97f 	bl	2726c <bt_addr_le_eq>
   16f6e:	b978      	cbnz	r0, 16f90 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   16f70:	2207      	movs	r2, #7
   16f72:	4621      	mov	r1, r4
   16f74:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   16f78:	f7fd fbf0 	bl	1475c <bt_conn_lookup_state_le>
			if (!conn) {
   16f7c:	bb38      	cbnz	r0, 16fce <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   16f7e:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   16f80:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   16f82:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16f84:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   16f88:	8853      	ldrh	r3, [r2, #2]
   16f8a:	8812      	ldrh	r2, [r2, #0]
   16f8c:	f7ff f94c 	bl	16228 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16f90:	340c      	adds	r4, #12
   16f92:	b1d6      	cbz	r6, 16fca <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16f94:	f10a 0601 	add.w	r6, sl, #1
   16f98:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   16f9c:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   16fa0:	89ab      	ldrh	r3, [r5, #12]
   16fa2:	429a      	cmp	r2, r3
   16fa4:	d10b      	bne.n	16fbe <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16fa6:	4631      	mov	r1, r6
   16fa8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   16fac:	f7fd fb96 	bl	146dc <bt_conn_lookup_addr_le>
		if (!conn) {
   16fb0:	4604      	mov	r4, r0
   16fb2:	b120      	cbz	r0, 16fbe <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   16fb4:	7b43      	ldrb	r3, [r0, #13]
   16fb6:	2b07      	cmp	r3, #7
   16fb8:	d00c      	beq.n	16fd4 <notify_cb+0x90>
			bt_conn_unref(conn);
   16fba:	f7fd f8c3 	bl	14144 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16fbe:	360a      	adds	r6, #10
   16fc0:	45b3      	cmp	fp, r6
   16fc2:	d1eb      	bne.n	16f9c <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   16fc4:	f04f 0901 	mov.w	r9, #1
   16fc8:	e048      	b.n	1705c <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16fca:	2601      	movs	r6, #1
   16fcc:	e7cb      	b.n	16f66 <notify_cb+0x22>
			bt_conn_unref(conn);
   16fce:	f7fd f8b9 	bl	14144 <bt_conn_unref>
   16fd2:	e7dd      	b.n	16f90 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   16fd4:	f8da 3020 	ldr.w	r3, [sl, #32]
   16fd8:	b123      	cbz	r3, 16fe4 <notify_cb+0xa0>
   16fda:	4641      	mov	r1, r8
   16fdc:	4798      	blx	r3
   16fde:	b908      	cbnz	r0, 16fe4 <notify_cb+0xa0>
			bt_conn_unref(conn);
   16fe0:	4620      	mov	r0, r4
   16fe2:	e7ea      	b.n	16fba <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16fe4:	2294      	movs	r2, #148	; 0x94
   16fe6:	4641      	mov	r1, r8
   16fe8:	4620      	mov	r0, r4
   16fea:	f010 fa83 	bl	274f4 <bt_gatt_check_perm>
   16fee:	4681      	mov	r9, r0
   16ff0:	b150      	cbz	r0, 17008 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   16ff2:	4b20      	ldr	r3, [pc, #128]	; (17074 <notify_cb+0x130>)
   16ff4:	2202      	movs	r2, #2
   16ff6:	9302      	str	r3, [sp, #8]
   16ff8:	2300      	movs	r3, #0
   16ffa:	491f      	ldr	r1, [pc, #124]	; (17078 <notify_cb+0x134>)
   16ffc:	4618      	mov	r0, r3
   16ffe:	e9cd 3300 	strd	r3, r3, [sp]
   17002:	f010 f9cf 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   17006:	e7eb      	b.n	16fe0 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   17008:	89ab      	ldrh	r3, [r5, #12]
   1700a:	2b02      	cmp	r3, #2
   1700c:	d115      	bne.n	1703a <notify_cb+0xf6>
   1700e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   17012:	079a      	lsls	r2, r3, #30
   17014:	d405      	bmi.n	17022 <notify_cb+0xde>
		bt_conn_unref(conn);
   17016:	4620      	mov	r0, r4
   17018:	f7fd f894 	bl	14144 <bt_conn_unref>
		data->err = 0;
   1701c:	2300      	movs	r3, #0
   1701e:	60ab      	str	r3, [r5, #8]
   17020:	e7cd      	b.n	16fbe <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   17022:	4620      	mov	r0, r4
   17024:	692a      	ldr	r2, [r5, #16]
   17026:	88a9      	ldrh	r1, [r5, #4]
   17028:	f7ff fc88 	bl	1693c <gatt_indicate>
			if (err == 0) {
   1702c:	4607      	mov	r7, r0
   1702e:	b980      	cbnz	r0, 17052 <notify_cb+0x10e>
				data->ind_params->_ref++;
   17030:	692a      	ldr	r2, [r5, #16]
   17032:	7d93      	ldrb	r3, [r2, #22]
   17034:	3301      	adds	r3, #1
   17036:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17038:	e7ed      	b.n	17016 <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1703a:	2b01      	cmp	r3, #1
   1703c:	d1eb      	bne.n	17016 <notify_cb+0xd2>
   1703e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   17042:	07db      	lsls	r3, r3, #31
   17044:	d5e7      	bpl.n	17016 <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17046:	4620      	mov	r0, r4
   17048:	692a      	ldr	r2, [r5, #16]
   1704a:	88a9      	ldrh	r1, [r5, #4]
   1704c:	f7ff fe74 	bl	16d38 <gatt_notify>
   17050:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   17052:	4620      	mov	r0, r4
   17054:	f7fd f876 	bl	14144 <bt_conn_unref>
		if (err < 0) {
   17058:	2f00      	cmp	r7, #0
   1705a:	dadf      	bge.n	1701c <notify_cb+0xd8>
}
   1705c:	4648      	mov	r0, r9
   1705e:	b005      	add	sp, #20
   17060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17064:	00016139 	.word	0x00016139
   17068:	20008508 	.word	0x20008508
   1706c:	20021591 	.word	0x20021591
   17070:	0002d679 	.word	0x0002d679
   17074:	0002ec1e 	.word	0x0002ec1e
   17078:	0002a738 	.word	0x0002a738

0001707c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1707c:	b510      	push	{r4, lr}
   1707e:	b086      	sub	sp, #24
   17080:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   17082:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   17084:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17086:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1708a:	4a0f      	ldr	r2, [pc, #60]	; (170c8 <bt_gatt_connected+0x4c>)
   1708c:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   1708e:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17092:	f010 fa22 	bl	274da <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   17096:	4620      	mov	r0, r4
   17098:	f00f fb47 	bl	2672a <bt_conn_get_security>
   1709c:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   170a0:	4288      	cmp	r0, r1
   170a2:	d20e      	bcs.n	170c2 <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   170a4:	4620      	mov	r0, r4
   170a6:	f00f fb14 	bl	266d2 <bt_conn_set_security>

		if (err) {
   170aa:	b150      	cbz	r0, 170c2 <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   170ac:	4b07      	ldr	r3, [pc, #28]	; (170cc <bt_gatt_connected+0x50>)
   170ae:	9003      	str	r0, [sp, #12]
   170b0:	9302      	str	r3, [sp, #8]
   170b2:	2300      	movs	r3, #0
   170b4:	2202      	movs	r2, #2
   170b6:	4618      	mov	r0, r3
   170b8:	e9cd 3300 	strd	r3, r3, [sp]
   170bc:	4904      	ldr	r1, [pc, #16]	; (170d0 <bt_gatt_connected+0x54>)
   170be:	f010 f971 	bl	273a4 <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   170c2:	b006      	add	sp, #24
   170c4:	bd10      	pop	{r4, pc}
   170c6:	bf00      	nop
   170c8:	00016c19 	.word	0x00016c19
   170cc:	0002ed66 	.word	0x0002ed66
   170d0:	0002a738 	.word	0x0002a738

000170d4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   170d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   170d6:	4605      	mov	r5, r0
   170d8:	460e      	mov	r6, r1
   170da:	4617      	mov	r7, r2
	return list->head;
   170dc:	4b06      	ldr	r3, [pc, #24]	; (170f8 <bt_gatt_att_max_mtu_changed+0x24>)
   170de:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   170e0:	b14c      	cbz	r4, 170f6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   170e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   170e6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   170e8:	b11b      	cbz	r3, 170f2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   170ea:	463a      	mov	r2, r7
   170ec:	4631      	mov	r1, r6
   170ee:	4628      	mov	r0, r5
   170f0:	4798      	blx	r3
	return node->next;
   170f2:	6864      	ldr	r4, [r4, #4]
   170f4:	e7f4      	b.n	170e0 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   170f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   170f8:	200211ac 	.word	0x200211ac

000170fc <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   170fc:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   170fe:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   17100:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17102:	466b      	mov	r3, sp
   17104:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17108:	4a03      	ldr	r2, [pc, #12]	; (17118 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1710a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1710e:	f010 f9e4 	bl	274da <bt_gatt_foreach_attr>
}
   17112:	b003      	add	sp, #12
   17114:	f85d fb04 	ldr.w	pc, [sp], #4
   17118:	00016c19 	.word	0x00016c19

0001711c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1711c:	b570      	push	{r4, r5, r6, lr}
   1711e:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17120:	4603      	mov	r3, r0
   17122:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17126:	2001      	movs	r0, #1
   17128:	4a0d      	ldr	r2, [pc, #52]	; (17160 <bt_gatt_disconnected+0x44>)
   1712a:	f010 f9d6 	bl	274da <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1712e:	4620      	mov	r0, r4
   17130:	f7fe ff7a 	bl	16028 <find_cf_cfg>
	if (!cfg) {
   17134:	4605      	mov	r5, r0
   17136:	b188      	cbz	r0, 1715c <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17138:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1713c:	4631      	mov	r1, r6
   1713e:	7a20      	ldrb	r0, [r4, #8]
   17140:	f00f f81a 	bl	26178 <bt_addr_le_is_bonded>
   17144:	b920      	cbnz	r0, 17150 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   17146:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   17148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1714c:	f7ff b858 	b.w	16200 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17150:	4631      	mov	r1, r6
   17152:	1c68      	adds	r0, r5, #1
}
   17154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17158:	f010 b890 	b.w	2727c <bt_addr_le_copy>
}
   1715c:	bd70      	pop	{r4, r5, r6, pc}
   1715e:	bf00      	nop
   17160:	00016335 	.word	0x00016335

00017164 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   17164:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   17166:	4b05      	ldr	r3, [pc, #20]	; (1717c <smp_find+0x18>)
{
   17168:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1716a:	4618      	mov	r0, r3
   1716c:	f010 fa34 	bl	275d8 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   17170:	3b04      	subs	r3, #4
   17172:	2800      	cmp	r0, #0
}
   17174:	bf14      	ite	ne
   17176:	4618      	movne	r0, r3
   17178:	2000      	moveq	r0, #0
   1717a:	bd08      	pop	{r3, pc}
   1717c:	20009a24 	.word	0x20009a24

00017180 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   17180:	4b08      	ldr	r3, [pc, #32]	; (171a4 <latch_auth_cb+0x24>)
   17182:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17186:	681a      	ldr	r2, [r3, #0]
   17188:	4b07      	ldr	r3, [pc, #28]	; (171a8 <latch_auth_cb+0x28>)
   1718a:	e8d0 1fef 	ldaex	r1, [r0]
   1718e:	4299      	cmp	r1, r3
   17190:	d104      	bne.n	1719c <latch_auth_cb+0x1c>
   17192:	e8c0 2fec 	stlex	ip, r2, [r0]
   17196:	f1bc 0f00 	cmp.w	ip, #0
   1719a:	d1f6      	bne.n	1718a <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1719c:	e8d0 0faf 	lda	r0, [r0]
}
   171a0:	4770      	bx	lr
   171a2:	bf00      	nop
   171a4:	2002108c 	.word	0x2002108c
   171a8:	20009a20 	.word	0x20009a20

000171ac <get_io_capa>:
{
   171ac:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   171ae:	f7ff ffe7 	bl	17180 <latch_auth_cb>
	if (!smp_auth_cb) {
   171b2:	4603      	mov	r3, r0
   171b4:	b1c8      	cbz	r0, 171ea <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   171b6:	e9d0 1200 	ldrd	r1, r2, [r0]
   171ba:	b921      	cbnz	r1, 171c6 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   171bc:	2a00      	cmp	r2, #0
   171be:	bf0c      	ite	eq
   171c0:	2003      	moveq	r0, #3
   171c2:	2002      	movne	r0, #2
   171c4:	e010      	b.n	171e8 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   171c6:	b132      	cbz	r2, 171d6 <get_io_capa+0x2a>
   171c8:	6883      	ldr	r3, [r0, #8]
   171ca:	b913      	cbnz	r3, 171d2 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   171cc:	4b09      	ldr	r3, [pc, #36]	; (171f4 <get_io_capa+0x48>)
   171ce:	781b      	ldrb	r3, [r3, #0]
   171d0:	b933      	cbnz	r3, 171e0 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   171d2:	2004      	movs	r0, #4
   171d4:	e008      	b.n	171e8 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   171d6:	4907      	ldr	r1, [pc, #28]	; (171f4 <get_io_capa+0x48>)
   171d8:	7808      	ldrb	r0, [r1, #0]
   171da:	b128      	cbz	r0, 171e8 <get_io_capa+0x3c>
   171dc:	689b      	ldr	r3, [r3, #8]
   171de:	b933      	cbnz	r3, 171ee <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   171e0:	3a00      	subs	r2, #0
   171e2:	bf18      	it	ne
   171e4:	2201      	movne	r2, #1
   171e6:	0050      	lsls	r0, r2, #1
}
   171e8:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   171ea:	2003      	movs	r0, #3
   171ec:	e7fc      	b.n	171e8 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   171ee:	2001      	movs	r0, #1
   171f0:	e7fa      	b.n	171e8 <get_io_capa+0x3c>
   171f2:	bf00      	nop
   171f4:	20021e63 	.word	0x20021e63

000171f8 <get_auth>:
{
   171f8:	b510      	push	{r4, lr}
	if (sc_supported) {
   171fa:	4b0c      	ldr	r3, [pc, #48]	; (1722c <get_auth+0x34>)
   171fc:	781b      	ldrb	r3, [r3, #0]
   171fe:	b17b      	cbz	r3, 17220 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   17200:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   17204:	f7ff ffd2 	bl	171ac <get_io_capa>
	if (bondable) {
   17208:	4b09      	ldr	r3, [pc, #36]	; (17230 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1720a:	2803      	cmp	r0, #3
	if (bondable) {
   1720c:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   1720e:	bf0c      	ite	eq
   17210:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   17214:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   17218:	b12b      	cbz	r3, 17226 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1721a:	f044 0001 	orr.w	r0, r4, #1
}
   1721e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   17220:	f001 0407 	and.w	r4, r1, #7
   17224:	e7ee      	b.n	17204 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   17226:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1722a:	e7f8      	b.n	1721e <get_auth+0x26>
   1722c:	20021e63 	.word	0x20021e63
   17230:	200089e6 	.word	0x200089e6

00017234 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   17234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   17236:	4b0d      	ldr	r3, [pc, #52]	; (1726c <bt_smp_accept+0x38>)
{
   17238:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1723a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1723e:	b930      	cbnz	r0, 1724e <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   17240:	4a0b      	ldr	r2, [pc, #44]	; (17270 <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   17242:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   17244:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   17246:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   17248:	b005      	add	sp, #20
   1724a:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   1724e:	4b09      	ldr	r3, [pc, #36]	; (17274 <bt_smp_accept+0x40>)
   17250:	9203      	str	r2, [sp, #12]
   17252:	9302      	str	r3, [sp, #8]
   17254:	2300      	movs	r3, #0
   17256:	2201      	movs	r2, #1
   17258:	4618      	mov	r0, r3
   1725a:	e9cd 3300 	strd	r3, r3, [sp]
   1725e:	4906      	ldr	r1, [pc, #24]	; (17278 <bt_smp_accept+0x44>)
   17260:	f010 fa12 	bl	27688 <z_log_msg_runtime_create.constprop.0>
   17264:	f06f 000b 	mvn.w	r0, #11
   17268:	e7ee      	b.n	17248 <bt_smp_accept+0x14>
   1726a:	bf00      	nop
   1726c:	20009a20 	.word	0x20009a20
   17270:	0002b28c 	.word	0x0002b28c
   17274:	0002eda1 	.word	0x0002eda1
   17278:	0002a780 	.word	0x0002a780

0001727c <smp_chan_get>:
{
   1727c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1727e:	2106      	movs	r1, #6
   17280:	f00f fb1f 	bl	268c2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17284:	4604      	mov	r4, r0
   17286:	b958      	cbnz	r0, 172a0 <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   17288:	4b07      	ldr	r3, [pc, #28]	; (172a8 <smp_chan_get+0x2c>)
   1728a:	2201      	movs	r2, #1
   1728c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17290:	4906      	ldr	r1, [pc, #24]	; (172ac <smp_chan_get+0x30>)
   17292:	4603      	mov	r3, r0
   17294:	9000      	str	r0, [sp, #0]
   17296:	f010 f9f7 	bl	27688 <z_log_msg_runtime_create.constprop.0>
}
   1729a:	4620      	mov	r0, r4
   1729c:	b004      	add	sp, #16
   1729e:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   172a0:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   172a4:	e7f9      	b.n	1729a <smp_chan_get+0x1e>
   172a6:	bf00      	nop
   172a8:	0002edc6 	.word	0x0002edc6
   172ac:	0002a780 	.word	0x0002a780

000172b0 <smp_init>:
{
   172b0:	b538      	push	{r3, r4, r5, lr}
   172b2:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   172b4:	22ec      	movs	r2, #236	; 0xec
   172b6:	2100      	movs	r1, #0
   172b8:	f012 fad1 	bl	2985e <memset>
	if (bt_rand(smp->prnd, 16)) {
   172bc:	2110      	movs	r1, #16
   172be:	f105 0027 	add.w	r0, r5, #39	; 0x27
   172c2:	f7fc fad5 	bl	13870 <bt_rand>
   172c6:	4604      	mov	r4, r0
   172c8:	b948      	cbnz	r0, 172de <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   172ca:	2105      	movs	r1, #5
   172cc:	4628      	mov	r0, r5
   172ce:	f010 f9ea 	bl	276a6 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   172d2:	f7fc fb7f 	bl	139d4 <bt_pub_key_get>
   172d6:	4b03      	ldr	r3, [pc, #12]	; (172e4 <smp_init+0x34>)
   172d8:	6018      	str	r0, [r3, #0]
}
   172da:	4620      	mov	r0, r4
   172dc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   172de:	2408      	movs	r4, #8
   172e0:	e7fb      	b.n	172da <smp_init+0x2a>
   172e2:	bf00      	nop
   172e4:	200211b4 	.word	0x200211b4

000172e8 <smp_dhkey_generate>:
{
   172e8:	b530      	push	{r4, r5, lr}
   172ea:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   172ec:	1d05      	adds	r5, r0, #4
   172ee:	2108      	movs	r1, #8
   172f0:	4628      	mov	r0, r5
{
   172f2:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   172f4:	f010 f9d7 	bl	276a6 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   172f8:	490b      	ldr	r1, [pc, #44]	; (17328 <smp_dhkey_generate+0x40>)
   172fa:	f104 0057 	add.w	r0, r4, #87	; 0x57
   172fe:	f7fc fb77 	bl	139f0 <bt_dh_key_gen>
	if (err) {
   17302:	b170      	cbz	r0, 17322 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   17304:	2108      	movs	r1, #8
   17306:	4628      	mov	r0, r5
   17308:	f010 f98d 	bl	27626 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1730c:	4b07      	ldr	r3, [pc, #28]	; (1732c <smp_dhkey_generate+0x44>)
   1730e:	2201      	movs	r2, #1
   17310:	9302      	str	r3, [sp, #8]
   17312:	2300      	movs	r3, #0
   17314:	4906      	ldr	r1, [pc, #24]	; (17330 <smp_dhkey_generate+0x48>)
   17316:	4618      	mov	r0, r3
   17318:	e9cd 3300 	strd	r3, r3, [sp]
   1731c:	f010 f9b4 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17320:	2008      	movs	r0, #8
}
   17322:	b005      	add	sp, #20
   17324:	bd30      	pop	{r4, r5, pc}
   17326:	bf00      	nop
   17328:	00027a7f 	.word	0x00027a7f
   1732c:	0002ede1 	.word	0x0002ede1
   17330:	0002a780 	.word	0x0002a780

00017334 <smp_ident_info>:
{
   17334:	b5f0      	push	{r4, r5, r6, r7, lr}
   17336:	460b      	mov	r3, r1
   17338:	4606      	mov	r6, r0
   1733a:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1733c:	210d      	movs	r1, #13
   1733e:	3004      	adds	r0, #4
   17340:	f010 f94a 	bl	275d8 <atomic_test_bit>
   17344:	b330      	cbz	r0, 17394 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   17346:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   17348:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1734c:	2002      	movs	r0, #2
   1734e:	f103 0790 	add.w	r7, r3, #144	; 0x90
   17352:	463a      	mov	r2, r7
   17354:	7a19      	ldrb	r1, [r3, #8]
   17356:	f001 fcbf 	bl	18cd8 <bt_keys_get_type>
		if (!keys) {
   1735a:	4604      	mov	r4, r0
   1735c:	b980      	cbnz	r0, 17380 <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1735e:	4638      	mov	r0, r7
   17360:	f7f9 fef8 	bl	11154 <bt_addr_le_str>
   17364:	4b0e      	ldr	r3, [pc, #56]	; (173a0 <smp_ident_info+0x6c>)
   17366:	9003      	str	r0, [sp, #12]
   17368:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1736c:	4620      	mov	r0, r4
   1736e:	4623      	mov	r3, r4
   17370:	2201      	movs	r2, #1
   17372:	490c      	ldr	r1, [pc, #48]	; (173a4 <smp_ident_info+0x70>)
   17374:	9400      	str	r4, [sp, #0]
   17376:	f010 f987 	bl	27688 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1737a:	2008      	movs	r0, #8
}
   1737c:	b005      	add	sp, #20
   1737e:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17380:	462b      	mov	r3, r5
   17382:	342a      	adds	r4, #42	; 0x2a
   17384:	f105 0210 	add.w	r2, r5, #16
   17388:	f853 1b04 	ldr.w	r1, [r3], #4
   1738c:	4293      	cmp	r3, r2
   1738e:	f844 1b04 	str.w	r1, [r4], #4
   17392:	d1f9      	bne.n	17388 <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   17394:	4630      	mov	r0, r6
   17396:	2109      	movs	r1, #9
   17398:	f010 f985 	bl	276a6 <atomic_set_bit>
	return 0;
   1739c:	2000      	movs	r0, #0
   1739e:	e7ed      	b.n	1737c <smp_ident_info+0x48>
   173a0:	0002edfa 	.word	0x0002edfa
   173a4:	0002a780 	.word	0x0002a780

000173a8 <smp_encrypt_info>:
{
   173a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   173aa:	460b      	mov	r3, r1
   173ac:	4606      	mov	r6, r0
   173ae:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   173b0:	210d      	movs	r1, #13
   173b2:	3004      	adds	r0, #4
   173b4:	f010 f910 	bl	275d8 <atomic_test_bit>
   173b8:	b330      	cbz	r0, 17408 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   173ba:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   173bc:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   173c0:	2004      	movs	r0, #4
   173c2:	f103 0790 	add.w	r7, r3, #144	; 0x90
   173c6:	463a      	mov	r2, r7
   173c8:	7a19      	ldrb	r1, [r3, #8]
   173ca:	f001 fc85 	bl	18cd8 <bt_keys_get_type>
		if (!keys) {
   173ce:	4604      	mov	r4, r0
   173d0:	b980      	cbnz	r0, 173f4 <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   173d2:	4638      	mov	r0, r7
   173d4:	f7f9 febe 	bl	11154 <bt_addr_le_str>
   173d8:	4b0e      	ldr	r3, [pc, #56]	; (17414 <smp_encrypt_info+0x6c>)
   173da:	9003      	str	r0, [sp, #12]
   173dc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   173e0:	4620      	mov	r0, r4
   173e2:	4623      	mov	r3, r4
   173e4:	2201      	movs	r2, #1
   173e6:	490c      	ldr	r1, [pc, #48]	; (17418 <smp_encrypt_info+0x70>)
   173e8:	9400      	str	r4, [sp, #0]
   173ea:	f010 f94d 	bl	27688 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   173ee:	2008      	movs	r0, #8
}
   173f0:	b005      	add	sp, #20
   173f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   173f4:	462b      	mov	r3, r5
   173f6:	341a      	adds	r4, #26
   173f8:	f105 0210 	add.w	r2, r5, #16
   173fc:	f853 1b04 	ldr.w	r1, [r3], #4
   17400:	4293      	cmp	r3, r2
   17402:	f844 1b04 	str.w	r1, [r4], #4
   17406:	d1f9      	bne.n	173fc <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   17408:	4630      	mov	r0, r6
   1740a:	2107      	movs	r1, #7
   1740c:	f010 f94b 	bl	276a6 <atomic_set_bit>
	return 0;
   17410:	2000      	movs	r0, #0
   17412:	e7ed      	b.n	173f0 <smp_encrypt_info+0x48>
   17414:	0002edfa 	.word	0x0002edfa
   17418:	0002a780 	.word	0x0002a780

0001741c <smp_send_pairing_confirm>:
{
   1741c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   1741e:	7a04      	ldrb	r4, [r0, #8]
{
   17420:	4605      	mov	r5, r0
	switch (smp->method) {
   17422:	2c02      	cmp	r4, #2
   17424:	d823      	bhi.n	1746e <smp_send_pairing_confirm+0x52>
   17426:	b144      	cbz	r4, 1743a <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17428:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1742c:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   17430:	40dc      	lsrs	r4, r3
   17432:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   17436:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1743a:	2103      	movs	r1, #3
   1743c:	4628      	mov	r0, r5
   1743e:	f010 f942 	bl	276c6 <smp_create_pdu.constprop.0>
	if (!buf) {
   17442:	4606      	mov	r6, r0
   17444:	b308      	cbz	r0, 1748a <smp_send_pairing_confirm+0x6e>
   17446:	2110      	movs	r1, #16
   17448:	300c      	adds	r0, #12
   1744a:	f002 f8b7 	bl	195bc <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1744e:	9000      	str	r0, [sp, #0]
   17450:	4816      	ldr	r0, [pc, #88]	; (174ac <smp_send_pairing_confirm+0x90>)
   17452:	4623      	mov	r3, r4
   17454:	6800      	ldr	r0, [r0, #0]
   17456:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1745a:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1745e:	f010 fbb4 	bl	27bca <bt_crypto_f4>
   17462:	4604      	mov	r4, r0
   17464:	b1b0      	cbz	r0, 17494 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   17466:	4630      	mov	r0, r6
   17468:	f001 ff86 	bl	19378 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1746c:	e00d      	b.n	1748a <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1746e:	2c03      	cmp	r4, #3
   17470:	f04f 0300 	mov.w	r3, #0
   17474:	d00c      	beq.n	17490 <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17476:	4a0e      	ldr	r2, [pc, #56]	; (174b0 <smp_send_pairing_confirm+0x94>)
   17478:	4618      	mov	r0, r3
   1747a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1747e:	490d      	ldr	r1, [pc, #52]	; (174b4 <smp_send_pairing_confirm+0x98>)
   17480:	2201      	movs	r2, #1
	switch (smp->method) {
   17482:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17484:	9300      	str	r3, [sp, #0]
   17486:	f010 f8ff 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1748a:	2008      	movs	r0, #8
}
   1748c:	b004      	add	sp, #16
   1748e:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   17490:	461c      	mov	r4, r3
   17492:	e7d2      	b.n	1743a <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   17494:	4602      	mov	r2, r0
   17496:	4631      	mov	r1, r6
   17498:	4628      	mov	r0, r5
   1749a:	f010 f8d8 	bl	2764e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1749e:	1d28      	adds	r0, r5, #4
   174a0:	4621      	mov	r1, r4
   174a2:	f010 f8c0 	bl	27626 <atomic_clear_bit>
	return 0;
   174a6:	4620      	mov	r0, r4
   174a8:	e7f0      	b.n	1748c <smp_send_pairing_confirm+0x70>
   174aa:	bf00      	nop
   174ac:	200211b4 	.word	0x200211b4
   174b0:	0002ee14 	.word	0x0002ee14
   174b4:	0002a780 	.word	0x0002a780

000174b8 <smp_public_key_periph>:
{
   174b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   174ba:	4604      	mov	r4, r0
   174bc:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   174be:	f7ff fe5f 	bl	17180 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   174c2:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   174c4:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   174c6:	210e      	movs	r1, #14
   174c8:	4628      	mov	r0, r5
   174ca:	f010 f885 	bl	275d8 <atomic_test_bit>
   174ce:	b990      	cbnz	r0, 174f6 <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   174d0:	4b51      	ldr	r3, [pc, #324]	; (17618 <smp_public_key_periph+0x160>)
   174d2:	2220      	movs	r2, #32
   174d4:	6819      	ldr	r1, [r3, #0]
   174d6:	f104 0057 	add.w	r0, r4, #87	; 0x57
   174da:	f012 f976 	bl	297ca <memcmp>
   174de:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   174e0:	b948      	cbnz	r0, 174f6 <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   174e2:	4a4e      	ldr	r2, [pc, #312]	; (1761c <smp_public_key_periph+0x164>)
   174e4:	494e      	ldr	r1, [pc, #312]	; (17620 <smp_public_key_periph+0x168>)
   174e6:	e9cd 0201 	strd	r0, r2, [sp, #4]
   174ea:	9000      	str	r0, [sp, #0]
   174ec:	2202      	movs	r2, #2
   174ee:	f010 f8cb 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   174f2:	2008      	movs	r0, #8
   174f4:	e034      	b.n	17560 <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   174f6:	210c      	movs	r1, #12
   174f8:	4620      	mov	r0, r4
   174fa:	f010 f8e4 	bl	276c6 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   174fe:	4607      	mov	r7, r0
   17500:	2800      	cmp	r0, #0
   17502:	d0f6      	beq.n	174f2 <smp_public_key_periph+0x3a>
   17504:	2140      	movs	r1, #64	; 0x40
   17506:	300c      	adds	r0, #12
   17508:	f002 f858 	bl	195bc <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1750c:	4b42      	ldr	r3, [pc, #264]	; (17618 <smp_public_key_periph+0x160>)
   1750e:	4602      	mov	r2, r0
   17510:	681b      	ldr	r3, [r3, #0]
   17512:	4601      	mov	r1, r0
   17514:	f103 0020 	add.w	r0, r3, #32
   17518:	f853 cb04 	ldr.w	ip, [r3], #4
   1751c:	4283      	cmp	r3, r0
   1751e:	f841 cb04 	str.w	ip, [r1], #4
   17522:	d1f9      	bne.n	17518 <smp_public_key_periph+0x60>
   17524:	3220      	adds	r2, #32
   17526:	f103 0120 	add.w	r1, r3, #32
   1752a:	f853 0b04 	ldr.w	r0, [r3], #4
   1752e:	428b      	cmp	r3, r1
   17530:	f842 0b04 	str.w	r0, [r2], #4
   17534:	d1f9      	bne.n	1752a <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   17536:	2200      	movs	r2, #0
   17538:	4639      	mov	r1, r7
   1753a:	4620      	mov	r0, r4
   1753c:	f010 f887 	bl	2764e <smp_send.constprop.0>
	switch (smp->method) {
   17540:	7a23      	ldrb	r3, [r4, #8]
   17542:	2b05      	cmp	r3, #5
   17544:	d85a      	bhi.n	175fc <smp_public_key_periph+0x144>
   17546:	e8df f003 	tbb	[pc, r3]
   1754a:	3903      	.short	0x3903
   1754c:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17550:	2104      	movs	r1, #4
   17552:	4620      	mov	r0, r4
   17554:	f010 f8a7 	bl	276a6 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   17558:	f7ff ff60 	bl	1741c <smp_send_pairing_confirm>
		if (err) {
   1755c:	2800      	cmp	r0, #0
   1755e:	d03c      	beq.n	175da <smp_public_key_periph+0x122>
}
   17560:	b005      	add	sp, #20
   17562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17564:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   17566:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1756a:	f7ff fe09 	bl	17180 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1756e:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17570:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   17572:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   17576:	f7fc f97b 	bl	13870 <bt_rand>
   1757a:	2800      	cmp	r0, #0
   1757c:	d1b9      	bne.n	174f2 <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   1757e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   17582:	4a28      	ldr	r2, [pc, #160]	; (17624 <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   17584:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   17588:	fbb3 f1f2 	udiv	r1, r3, r2
   1758c:	fb02 3311 	mls	r3, r2, r1, r3
   17590:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   17594:	b156      	cbz	r6, 175ac <smp_public_key_periph+0xf4>
   17596:	6833      	ldr	r3, [r6, #0]
   17598:	b143      	cbz	r3, 175ac <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1759a:	210b      	movs	r1, #11
   1759c:	4628      	mov	r0, r5
   1759e:	f010 f882 	bl	276a6 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   175a2:	4638      	mov	r0, r7
   175a4:	6833      	ldr	r3, [r6, #0]
   175a6:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   175aa:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   175ac:	2103      	movs	r1, #3
   175ae:	4620      	mov	r0, r4
   175b0:	f010 f879 	bl	276a6 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   175b4:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   175b6:	f010 f876 	bl	276a6 <atomic_set_bit>
		break;
   175ba:	e00e      	b.n	175da <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   175bc:	4620      	mov	r0, r4
   175be:	2103      	movs	r1, #3
   175c0:	f010 f871 	bl	276a6 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   175c4:	210e      	movs	r1, #14
   175c6:	f010 f86e 	bl	276a6 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   175ca:	4628      	mov	r0, r5
   175cc:	210a      	movs	r1, #10
   175ce:	f010 f86a 	bl	276a6 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   175d2:	6873      	ldr	r3, [r6, #4]
   175d4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   175d8:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   175da:	4628      	mov	r0, r5
   175dc:	2107      	movs	r1, #7
   175de:	f010 f862 	bl	276a6 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   175e2:	2008      	movs	r0, #8
   175e4:	f7ff fdbe 	bl	17164 <smp_find>
   175e8:	b9a0      	cbnz	r0, 17614 <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   175ea:	4620      	mov	r0, r4
}
   175ec:	b005      	add	sp, #20
   175ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   175f2:	f7ff be79 	b.w	172e8 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   175f6:	2104      	movs	r1, #4
   175f8:	4620      	mov	r0, r4
   175fa:	e7dc      	b.n	175b6 <smp_public_key_periph+0xfe>
	switch (smp->method) {
   175fc:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   175fe:	4b0a      	ldr	r3, [pc, #40]	; (17628 <smp_public_key_periph+0x170>)
   17600:	2201      	movs	r2, #1
   17602:	9302      	str	r3, [sp, #8]
   17604:	2300      	movs	r3, #0
   17606:	4906      	ldr	r1, [pc, #24]	; (17620 <smp_public_key_periph+0x168>)
   17608:	4618      	mov	r0, r3
   1760a:	e9cd 3300 	strd	r3, r3, [sp]
   1760e:	f010 f83b 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17612:	e76e      	b.n	174f2 <smp_public_key_periph+0x3a>
	return 0;
   17614:	2000      	movs	r0, #0
   17616:	e7a3      	b.n	17560 <smp_public_key_periph+0xa8>
   17618:	200211b4 	.word	0x200211b4
   1761c:	0002ee30 	.word	0x0002ee30
   17620:	0002a780 	.word	0x0002a780
   17624:	000f4240 	.word	0x000f4240
   17628:	0002ee14 	.word	0x0002ee14

0001762c <smp_public_key>:
{
   1762c:	b530      	push	{r4, r5, lr}
   1762e:	4604      	mov	r4, r0
   17630:	460d      	mov	r5, r1
   17632:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17634:	f7ff fda4 	bl	17180 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   17638:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1763c:	4602      	mov	r2, r0
   1763e:	68eb      	ldr	r3, [r5, #12]
   17640:	f103 0120 	add.w	r1, r3, #32
   17644:	f853 5b04 	ldr.w	r5, [r3], #4
   17648:	428b      	cmp	r3, r1
   1764a:	f842 5b04 	str.w	r5, [r2], #4
   1764e:	d1f9      	bne.n	17644 <smp_public_key+0x18>
   17650:	f104 0277 	add.w	r2, r4, #119	; 0x77
   17654:	f103 0120 	add.w	r1, r3, #32
   17658:	f853 5b04 	ldr.w	r5, [r3], #4
   1765c:	428b      	cmp	r3, r1
   1765e:	f842 5b04 	str.w	r5, [r2], #4
   17662:	d1f9      	bne.n	17658 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   17664:	f7fc f922 	bl	138ac <bt_pub_key_is_debug>
   17668:	b940      	cbnz	r0, 1767c <smp_public_key+0x50>
	if (!sc_public_key) {
   1766a:	4b1c      	ldr	r3, [pc, #112]	; (176dc <smp_public_key+0xb0>)
   1766c:	681d      	ldr	r5, [r3, #0]
   1766e:	bb75      	cbnz	r5, 176ce <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   17670:	1d20      	adds	r0, r4, #4
   17672:	2106      	movs	r1, #6
   17674:	f010 f817 	bl	276a6 <atomic_set_bit>
	return 0;
   17678:	4628      	mov	r0, r5
		return 0;
   1767a:	e026      	b.n	176ca <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   1767c:	4b18      	ldr	r3, [pc, #96]	; (176e0 <smp_public_key+0xb4>)
   1767e:	2203      	movs	r2, #3
   17680:	9302      	str	r3, [sp, #8]
   17682:	2300      	movs	r3, #0
   17684:	4917      	ldr	r1, [pc, #92]	; (176e4 <smp_public_key+0xb8>)
   17686:	4618      	mov	r0, r3
   17688:	e9cd 3300 	strd	r3, r3, [sp]
   1768c:	f00f fffc 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   17690:	210e      	movs	r1, #14
   17692:	1d20      	adds	r0, r4, #4
   17694:	f010 f807 	bl	276a6 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   17698:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1769c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   176a0:	b933      	cbnz	r3, 176b0 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   176a2:	7a28      	ldrb	r0, [r5, #8]
   176a4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   176a8:	f001 f9fc 	bl	18aa4 <bt_keys_get_addr>
   176ac:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   176b0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   176b4:	2b00      	cmp	r3, #0
   176b6:	d0d8      	beq.n	1766a <smp_public_key+0x3e>
   176b8:	89da      	ldrh	r2, [r3, #14]
   176ba:	f002 0224 	and.w	r2, r2, #36	; 0x24
   176be:	2a00      	cmp	r2, #0
   176c0:	d0d3      	beq.n	1766a <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   176c2:	7b5b      	ldrb	r3, [r3, #13]
   176c4:	079b      	lsls	r3, r3, #30
   176c6:	d4d0      	bmi.n	1766a <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   176c8:	2003      	movs	r0, #3
}
   176ca:	b005      	add	sp, #20
   176cc:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   176ce:	4620      	mov	r0, r4
}
   176d0:	b005      	add	sp, #20
   176d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   176d6:	f7ff beef 	b.w	174b8 <smp_public_key_periph>
   176da:	bf00      	nop
   176dc:	200211b4 	.word	0x200211b4
   176e0:	0002ee4b 	.word	0x0002ee4b
   176e4:	0002a780 	.word	0x0002a780

000176e8 <smp_pairing_req>:
{
   176e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176ec:	460d      	mov	r5, r1
   176ee:	b086      	sub	sp, #24
   176f0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   176f2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   176f6:	f7ff fd43 	bl	17180 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   176fa:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   176fe:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   17700:	f898 3003 	ldrb.w	r3, [r8, #3]
   17704:	3b07      	subs	r3, #7
   17706:	2b09      	cmp	r3, #9
   17708:	d903      	bls.n	17712 <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1770a:	2006      	movs	r0, #6
}
   1770c:	b006      	add	sp, #24
   1770e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   17712:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   17716:	b15b      	cbz	r3, 17730 <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   17718:	1d25      	adds	r5, r4, #4
   1771a:	210f      	movs	r1, #15
   1771c:	4628      	mov	r0, r5
   1771e:	f00f ff5b 	bl	275d8 <atomic_test_bit>
   17722:	b980      	cbnz	r0, 17746 <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   17724:	4620      	mov	r0, r4
   17726:	f7ff fdc3 	bl	172b0 <smp_init>
		if (ret) {
   1772a:	b160      	cbz	r0, 17746 <smp_pairing_req+0x5e>
			return ret;
   1772c:	b2c0      	uxtb	r0, r0
   1772e:	e7ed      	b.n	1770c <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17730:	7a30      	ldrb	r0, [r6, #8]
   17732:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17736:	f001 f9b5 	bl	18aa4 <bt_keys_get_addr>
   1773a:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   1773e:	2800      	cmp	r0, #0
   17740:	d1ea      	bne.n	17718 <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   17742:	2008      	movs	r0, #8
   17744:	e7e2      	b.n	1770c <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   17746:	2301      	movs	r3, #1
   17748:	7263      	strb	r3, [r4, #9]
   1774a:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1774e:	4620      	mov	r0, r4
   17750:	f8c4 300a 	str.w	r3, [r4, #10]
   17754:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   17758:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1775a:	2302      	movs	r3, #2
   1775c:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1775e:	f898 1002 	ldrb.w	r1, [r8, #2]
   17762:	f7ff fd49 	bl	171f8 <get_auth>
   17766:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   17768:	4620      	mov	r0, r4
   1776a:	f7ff fd1f 	bl	171ac <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1776e:	4ba9      	ldr	r3, [pc, #676]	; (17a14 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   17770:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   17772:	781b      	ldrb	r3, [r3, #0]
   17774:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   17776:	2310      	movs	r3, #16
   17778:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1777a:	f898 3004 	ldrb.w	r3, [r8, #4]
   1777e:	f003 0303 	and.w	r3, r3, #3
   17782:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   17784:	f898 3005 	ldrb.w	r3, [r8, #5]
   17788:	f003 0301 	and.w	r3, r3, #1
   1778c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1778e:	7ce3      	ldrb	r3, [r4, #19]
   17790:	071b      	lsls	r3, r3, #28
   17792:	d50d      	bpl.n	177b0 <smp_pairing_req+0xc8>
   17794:	f898 3002 	ldrb.w	r3, [r8, #2]
   17798:	0718      	lsls	r0, r3, #28
   1779a:	d509      	bpl.n	177b0 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1779c:	2105      	movs	r1, #5
   1779e:	4628      	mov	r0, r5
   177a0:	f00f ff81 	bl	276a6 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   177a4:	7d63      	ldrb	r3, [r4, #21]
   177a6:	f003 0302 	and.w	r3, r3, #2
   177aa:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   177ac:	2300      	movs	r3, #0
   177ae:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   177b0:	7ce3      	ldrb	r3, [r4, #19]
   177b2:	0699      	lsls	r1, r3, #26
   177b4:	d507      	bpl.n	177c6 <smp_pairing_req+0xde>
   177b6:	f898 3002 	ldrb.w	r3, [r8, #2]
   177ba:	069a      	lsls	r2, r3, #26
   177bc:	d503      	bpl.n	177c6 <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   177be:	2114      	movs	r1, #20
   177c0:	4628      	mov	r0, r5
   177c2:	f00f ff70 	bl	276a6 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   177c6:	7da3      	ldrb	r3, [r4, #22]
   177c8:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   177cc:	7d63      	ldrb	r3, [r4, #21]
   177ce:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   177d2:	7ce3      	ldrb	r3, [r4, #19]
   177d4:	07db      	lsls	r3, r3, #31
   177d6:	d507      	bpl.n	177e8 <smp_pairing_req+0x100>
   177d8:	f898 3002 	ldrb.w	r3, [r8, #2]
   177dc:	07d8      	lsls	r0, r3, #31
   177de:	d503      	bpl.n	177e8 <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   177e0:	210d      	movs	r1, #13
   177e2:	4628      	mov	r0, r5
   177e4:	f00f ff5f 	bl	276a6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   177e8:	2103      	movs	r1, #3
   177ea:	4628      	mov	r0, r5
   177ec:	f00f ff5b 	bl	276a6 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   177f0:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   177f2:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   177f6:	f00f feef 	bl	275d8 <atomic_test_bit>
   177fa:	bb40      	cbnz	r0, 1784e <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   177fc:	f1b8 0f04 	cmp.w	r8, #4
   17800:	d845      	bhi.n	1788e <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   17802:	7ae3      	ldrb	r3, [r4, #11]
   17804:	7ca2      	ldrb	r2, [r4, #18]
   17806:	4013      	ands	r3, r2
   17808:	07d9      	lsls	r1, r3, #31
   1780a:	d43e      	bmi.n	1788a <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1780c:	7b21      	ldrb	r1, [r4, #12]
   1780e:	7ce3      	ldrb	r3, [r4, #19]
   17810:	4319      	orrs	r1, r3
   17812:	f011 0104 	ands.w	r1, r1, #4
   17816:	d011      	beq.n	1783c <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   17818:	4620      	mov	r0, r4
   1781a:	f7ff fcc7 	bl	171ac <get_io_capa>
   1781e:	4b7e      	ldr	r3, [pc, #504]	; (17a18 <smp_pairing_req+0x330>)
   17820:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   17824:	4498      	add	r8, r3
   17826:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1782a:	2904      	cmp	r1, #4
   1782c:	d106      	bne.n	1783c <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1782e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   17832:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   17834:	2b00      	cmp	r3, #0
   17836:	bf14      	ite	ne
   17838:	2101      	movne	r1, #1
   1783a:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1783c:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1783e:	4620      	mov	r0, r4
   17840:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   17844:	f00f fece 	bl	275e4 <update_keys_check>
   17848:	bb18      	cbnz	r0, 17892 <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1784a:	2003      	movs	r0, #3
   1784c:	e75e      	b.n	1770c <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1784e:	7b23      	ldrb	r3, [r4, #12]
   17850:	7ce0      	ldrb	r0, [r4, #19]
   17852:	ea03 0200 	and.w	r2, r3, r0
   17856:	0712      	lsls	r2, r2, #28
   17858:	d506      	bpl.n	17868 <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1785a:	7ae2      	ldrb	r2, [r4, #11]
   1785c:	f894 c012 	ldrb.w	ip, [r4, #18]
   17860:	ea42 020c 	orr.w	r2, r2, ip
   17864:	07d2      	lsls	r2, r2, #31
   17866:	d4e9      	bmi.n	1783c <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17868:	f1b8 0f04 	cmp.w	r8, #4
   1786c:	d80f      	bhi.n	1788e <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1786e:	ea43 0100 	orr.w	r1, r3, r0
   17872:	f011 0104 	ands.w	r1, r1, #4
   17876:	d0e1      	beq.n	1783c <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   17878:	4620      	mov	r0, r4
   1787a:	f7ff fc97 	bl	171ac <get_io_capa>
   1787e:	4b67      	ldr	r3, [pc, #412]	; (17a1c <smp_pairing_req+0x334>)
   17880:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   17884:	4443      	add	r3, r8
   17886:	5c19      	ldrb	r1, [r3, r0]
   17888:	e7d8      	b.n	1783c <smp_pairing_req+0x154>
		return LEGACY_OOB;
   1788a:	2106      	movs	r1, #6
   1788c:	e7d6      	b.n	1783c <smp_pairing_req+0x154>
		return JUST_WORKS;
   1788e:	2100      	movs	r1, #0
   17890:	e7d4      	b.n	1783c <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   17892:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   17896:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   17898:	2b03      	cmp	r3, #3
   1789a:	d03c      	beq.n	17916 <smp_pairing_req+0x22e>
   1789c:	d82a      	bhi.n	178f4 <smp_pairing_req+0x20c>
   1789e:	3b01      	subs	r3, #1
   178a0:	2b01      	cmp	r3, #1
   178a2:	f63f af4e 	bhi.w	17742 <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   178a6:	2105      	movs	r1, #5
   178a8:	4628      	mov	r0, r5
   178aa:	f00f fe95 	bl	275d8 <atomic_test_bit>
   178ae:	2800      	cmp	r0, #0
   178b0:	f040 80be 	bne.w	17a30 <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178b4:	4620      	mov	r0, r4
   178b6:	f7ff fc63 	bl	17180 <latch_auth_cb>
   178ba:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178bc:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   178be:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178c2:	f7ff fc5d 	bl	17180 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   178c6:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178ca:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   178cc:	f898 0008 	ldrb.w	r0, [r8, #8]
   178d0:	f001 f9c6 	bl	18c60 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   178d4:	7a23      	ldrb	r3, [r4, #8]
   178d6:	b310      	cbz	r0, 1791e <smp_pairing_req+0x236>
   178d8:	7b42      	ldrb	r2, [r0, #13]
   178da:	07d2      	lsls	r2, r2, #31
   178dc:	d51f      	bpl.n	1791e <smp_pairing_req+0x236>
   178de:	b9f3      	cbnz	r3, 1791e <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   178e0:	4a4f      	ldr	r2, [pc, #316]	; (17a20 <smp_pairing_req+0x338>)
   178e2:	4618      	mov	r0, r3
   178e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   178e8:	494e      	ldr	r1, [pc, #312]	; (17a24 <smp_pairing_req+0x33c>)
   178ea:	2201      	movs	r2, #1
   178ec:	9300      	str	r3, [sp, #0]
   178ee:	f00f fecb 	bl	27688 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   178f2:	e726      	b.n	17742 <smp_pairing_req+0x5a>
	switch (sec) {
   178f4:	2b04      	cmp	r3, #4
   178f6:	f47f af24 	bne.w	17742 <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   178fa:	7d23      	ldrb	r3, [r4, #20]
   178fc:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   178fe:	4293      	cmp	r3, r2
   17900:	bf28      	it	cs
   17902:	4613      	movcs	r3, r2
   17904:	2b10      	cmp	r3, #16
   17906:	f47f af00 	bne.w	1770a <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1790a:	2105      	movs	r1, #5
   1790c:	4628      	mov	r0, r5
   1790e:	f00f fe63 	bl	275d8 <atomic_test_bit>
   17912:	2800      	cmp	r0, #0
   17914:	d099      	beq.n	1784a <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   17916:	7a23      	ldrb	r3, [r4, #8]
   17918:	2b00      	cmp	r3, #0
   1791a:	d1c4      	bne.n	178a6 <smp_pairing_req+0x1be>
   1791c:	e795      	b.n	1784a <smp_pairing_req+0x162>
	switch (smp->method) {
   1791e:	2b06      	cmp	r3, #6
   17920:	d85d      	bhi.n	179de <smp_pairing_req+0x2f6>
   17922:	e8df f003 	tbb	[pc, r3]
   17926:	5418      	.short	0x5418
   17928:	5c5c5c2d 	.word	0x5c5c5c2d
   1792c:	04          	.byte	0x04
   1792d:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1792e:	2e00      	cmp	r6, #0
   17930:	d061      	beq.n	179f6 <smp_pairing_req+0x30e>
   17932:	68f3      	ldr	r3, [r6, #12]
   17934:	2b00      	cmp	r3, #0
   17936:	d05e      	beq.n	179f6 <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   17938:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1793a:	210a      	movs	r1, #10
   1793c:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1793e:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17942:	f00f feb0 	bl	276a6 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   17946:	68f3      	ldr	r3, [r6, #12]
   17948:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1794c:	a905      	add	r1, sp, #20
   1794e:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17950:	7a23      	ldrb	r3, [r4, #8]
   17952:	2b00      	cmp	r3, #0
   17954:	d151      	bne.n	179fa <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17956:	210f      	movs	r1, #15
   17958:	4628      	mov	r0, r5
   1795a:	f00f fe3d 	bl	275d8 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1795e:	2800      	cmp	r0, #0
   17960:	d14b      	bne.n	179fa <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17962:	2f00      	cmp	r7, #0
   17964:	d049      	beq.n	179fa <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   17966:	697b      	ldr	r3, [r7, #20]
   17968:	2b00      	cmp	r3, #0
   1796a:	d046      	beq.n	179fa <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1796c:	4628      	mov	r0, r5
   1796e:	210a      	movs	r1, #10
   17970:	f00f fe99 	bl	276a6 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   17974:	697b      	ldr	r3, [r7, #20]
   17976:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1797a:	4798      	blx	r3
		return 0;
   1797c:	2000      	movs	r0, #0
   1797e:	e6c5      	b.n	1770c <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   17980:	2104      	movs	r1, #4
   17982:	a805      	add	r0, sp, #20
   17984:	f7fb ff74 	bl	13870 <bt_rand>
   17988:	2800      	cmp	r0, #0
   1798a:	f47f aeda 	bne.w	17742 <smp_pairing_req+0x5a>
			passkey %= 1000000;
   1798e:	9b05      	ldr	r3, [sp, #20]
   17990:	4a25      	ldr	r2, [pc, #148]	; (17a28 <smp_pairing_req+0x340>)
   17992:	fbb3 f1f2 	udiv	r1, r3, r2
   17996:	fb02 3311 	mls	r3, r2, r1, r3
   1799a:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1799c:	b14e      	cbz	r6, 179b2 <smp_pairing_req+0x2ca>
   1799e:	6833      	ldr	r3, [r6, #0]
   179a0:	b13b      	cbz	r3, 179b2 <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   179a2:	210b      	movs	r1, #11
   179a4:	4628      	mov	r0, r5
   179a6:	f00f fe7e 	bl	276a6 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   179aa:	4640      	mov	r0, r8
   179ac:	6833      	ldr	r3, [r6, #0]
   179ae:	9905      	ldr	r1, [sp, #20]
   179b0:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   179b2:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   179b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   179b8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   179bc:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   179be:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   179c2:	0a1b      	lsrs	r3, r3, #8
   179c4:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   179c8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   179cc:	e7c0      	b.n	17950 <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   179ce:	4628      	mov	r0, r5
   179d0:	210a      	movs	r1, #10
   179d2:	f00f fe68 	bl	276a6 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   179d6:	4640      	mov	r0, r8
   179d8:	6873      	ldr	r3, [r6, #4]
   179da:	4798      	blx	r3
	if (ret) {
   179dc:	e7b8      	b.n	17950 <smp_pairing_req+0x268>
	switch (smp->method) {
   179de:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   179e0:	4b12      	ldr	r3, [pc, #72]	; (17a2c <smp_pairing_req+0x344>)
   179e2:	2201      	movs	r2, #1
   179e4:	9302      	str	r3, [sp, #8]
   179e6:	2300      	movs	r3, #0
   179e8:	490e      	ldr	r1, [pc, #56]	; (17a24 <smp_pairing_req+0x33c>)
   179ea:	4618      	mov	r0, r3
   179ec:	e9cd 3300 	strd	r3, r3, [sp]
   179f0:	f00f fe4a 	bl	27688 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   179f4:	e6a5      	b.n	17742 <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   179f6:	2002      	movs	r0, #2
   179f8:	e688      	b.n	1770c <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   179fa:	2103      	movs	r1, #3
   179fc:	4620      	mov	r0, r4
   179fe:	f00f fe52 	bl	276a6 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   17a02:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   17a04:	f00f fe4f 	bl	276a6 <atomic_set_bit>
}
   17a08:	b006      	add	sp, #24
   17a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   17a0e:	f00f be79 	b.w	27704 <send_pairing_rsp>
   17a12:	bf00      	nop
   17a14:	20021e64 	.word	0x20021e64
   17a18:	0002f1ec 	.word	0x0002f1ec
   17a1c:	0002f1d3 	.word	0x0002f1d3
   17a20:	0002ee6c 	.word	0x0002ee6c
   17a24:	0002a780 	.word	0x0002a780
   17a28:	000f4240 	.word	0x000f4240
   17a2c:	0002ee14 	.word	0x0002ee14
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   17a30:	7a23      	ldrb	r3, [r4, #8]
   17a32:	b973      	cbnz	r3, 17a52 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17a34:	210f      	movs	r1, #15
   17a36:	4628      	mov	r0, r5
   17a38:	f00f fdce 	bl	275d8 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17a3c:	b948      	cbnz	r0, 17a52 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   17a3e:	b147      	cbz	r7, 17a52 <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   17a40:	697b      	ldr	r3, [r7, #20]
   17a42:	b133      	cbz	r3, 17a52 <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17a44:	4628      	mov	r0, r5
   17a46:	210a      	movs	r1, #10
   17a48:	f00f fe2d 	bl	276a6 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   17a4c:	4630      	mov	r0, r6
   17a4e:	697b      	ldr	r3, [r7, #20]
   17a50:	e793      	b.n	1797a <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   17a52:	210c      	movs	r1, #12
   17a54:	4620      	mov	r0, r4
   17a56:	e7d5      	b.n	17a04 <smp_pairing_req+0x31c>

00017a58 <compute_and_check_and_send_periph_dhcheck>:
{
   17a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17a5c:	4604      	mov	r4, r0
   17a5e:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   17a60:	ad0c      	add	r5, sp, #48	; 0x30
   17a62:	2210      	movs	r2, #16
   17a64:	2100      	movs	r1, #0
   17a66:	4628      	mov	r0, r5
   17a68:	f011 fef9 	bl	2985e <memset>
	switch (smp->method) {
   17a6c:	7a23      	ldrb	r3, [r4, #8]
   17a6e:	2b05      	cmp	r3, #5
   17a70:	d83a      	bhi.n	17ae8 <compute_and_check_and_send_periph_dhcheck+0x90>
   17a72:	e8df f003 	tbb	[pc, r3]
   17a76:	0306      	.short	0x0306
   17a78:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   17a7c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   17a80:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   17a82:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   17a86:	f104 0247 	add.w	r2, r4, #71	; 0x47
   17a8a:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   17a8e:	e9cd 7201 	strd	r7, r2, [sp, #4]
   17a92:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   17a96:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   17a9a:	f104 0927 	add.w	r9, r4, #39	; 0x27
   17a9e:	9200      	str	r2, [sp, #0]
   17aa0:	4641      	mov	r1, r8
   17aa2:	464a      	mov	r2, r9
   17aa4:	3397      	adds	r3, #151	; 0x97
   17aa6:	f104 0097 	add.w	r0, r4, #151	; 0x97
   17aaa:	f001 f987 	bl	18dbc <bt_crypto_f5>
   17aae:	4682      	mov	sl, r0
   17ab0:	b348      	cbz	r0, 17b06 <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   17ab2:	4b4e      	ldr	r3, [pc, #312]	; (17bec <compute_and_check_and_send_periph_dhcheck+0x194>)
   17ab4:	9302      	str	r3, [sp, #8]
   17ab6:	2300      	movs	r3, #0
   17ab8:	e9cd 3300 	strd	r3, r3, [sp]
   17abc:	2201      	movs	r2, #1
   17abe:	4618      	mov	r0, r3
   17ac0:	494b      	ldr	r1, [pc, #300]	; (17bf0 <compute_and_check_and_send_periph_dhcheck+0x198>)
   17ac2:	f00f fde1 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17ac6:	e01a      	b.n	17afe <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   17ac8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   17acc:	2b00      	cmp	r3, #0
   17ace:	d0d8      	beq.n	17a82 <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   17ad0:	462e      	mov	r6, r5
   17ad2:	f103 0710 	add.w	r7, r3, #16
   17ad6:	4632      	mov	r2, r6
   17ad8:	6818      	ldr	r0, [r3, #0]
   17ada:	6859      	ldr	r1, [r3, #4]
   17adc:	3308      	adds	r3, #8
   17ade:	c203      	stmia	r2!, {r0, r1}
   17ae0:	42bb      	cmp	r3, r7
   17ae2:	4616      	mov	r6, r2
   17ae4:	d1f7      	bne.n	17ad6 <compute_and_check_and_send_periph_dhcheck+0x7e>
   17ae6:	e7cc      	b.n	17a82 <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   17ae8:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17aea:	4b42      	ldr	r3, [pc, #264]	; (17bf4 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   17aec:	2201      	movs	r2, #1
   17aee:	9302      	str	r3, [sp, #8]
   17af0:	2300      	movs	r3, #0
   17af2:	493f      	ldr	r1, [pc, #252]	; (17bf0 <compute_and_check_and_send_periph_dhcheck+0x198>)
   17af4:	4618      	mov	r0, r3
   17af6:	e9cd 3300 	strd	r3, r3, [sp]
   17afa:	f00f fdc5 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17afe:	2008      	movs	r0, #8
}
   17b00:	b010      	add	sp, #64	; 0x40
   17b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   17b06:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   17b0a:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   17b0c:	f103 0297 	add.w	r2, r3, #151	; 0x97
   17b10:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   17b12:	9301      	str	r3, [sp, #4]
   17b14:	f104 0311 	add.w	r3, r4, #17
   17b18:	9202      	str	r2, [sp, #8]
   17b1a:	9300      	str	r3, [sp, #0]
   17b1c:	4642      	mov	r2, r8
   17b1e:	462b      	mov	r3, r5
   17b20:	4649      	mov	r1, r9
   17b22:	4638      	mov	r0, r7
   17b24:	9603      	str	r6, [sp, #12]
   17b26:	f010 f875 	bl	27c14 <bt_crypto_f6>
   17b2a:	b130      	cbz	r0, 17b3a <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   17b2c:	4b32      	ldr	r3, [pc, #200]	; (17bf8 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   17b2e:	f8cd a000 	str.w	sl, [sp]
   17b32:	e9cd a301 	strd	sl, r3, [sp, #4]
   17b36:	4653      	mov	r3, sl
   17b38:	e7c0      	b.n	17abc <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   17b3a:	7a23      	ldrb	r3, [r4, #8]
   17b3c:	2b05      	cmp	r3, #5
   17b3e:	d10e      	bne.n	17b5e <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   17b40:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   17b44:	b311      	cbz	r1, 17b8c <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   17b46:	460b      	mov	r3, r1
   17b48:	46ac      	mov	ip, r5
   17b4a:	f101 0e10 	add.w	lr, r1, #16
   17b4e:	4662      	mov	r2, ip
   17b50:	6818      	ldr	r0, [r3, #0]
   17b52:	6859      	ldr	r1, [r3, #4]
   17b54:	3308      	adds	r3, #8
   17b56:	c203      	stmia	r2!, {r0, r1}
   17b58:	4573      	cmp	r3, lr
   17b5a:	4694      	mov	ip, r2
   17b5c:	d1f7      	bne.n	17b4e <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   17b5e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   17b62:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   17b66:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   17b6a:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   17b6c:	9301      	str	r3, [sp, #4]
   17b6e:	f104 030a 	add.w	r3, r4, #10
   17b72:	9202      	str	r2, [sp, #8]
   17b74:	9300      	str	r3, [sp, #0]
   17b76:	464a      	mov	r2, r9
   17b78:	462b      	mov	r3, r5
   17b7a:	4641      	mov	r1, r8
   17b7c:	4638      	mov	r0, r7
   17b7e:	f8cd a00c 	str.w	sl, [sp, #12]
   17b82:	f010 f847 	bl	27c14 <bt_crypto_f6>
   17b86:	b130      	cbz	r0, 17b96 <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   17b88:	4b1c      	ldr	r3, [pc, #112]	; (17bfc <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   17b8a:	e793      	b.n	17ab4 <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   17b8c:	2210      	movs	r2, #16
   17b8e:	4628      	mov	r0, r5
   17b90:	f011 fe65 	bl	2985e <memset>
   17b94:	e7e3      	b.n	17b5e <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   17b96:	2210      	movs	r2, #16
   17b98:	4651      	mov	r1, sl
   17b9a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   17b9e:	f011 fe14 	bl	297ca <memcmp>
   17ba2:	bb00      	cbnz	r0, 17be6 <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   17ba4:	210d      	movs	r1, #13
   17ba6:	4620      	mov	r0, r4
   17ba8:	f00f fd8d 	bl	276c6 <smp_create_pdu.constprop.0>
	if (!buf) {
   17bac:	4607      	mov	r7, r0
   17bae:	2800      	cmp	r0, #0
   17bb0:	d0a5      	beq.n	17afe <compute_and_check_and_send_periph_dhcheck+0xa6>
   17bb2:	2110      	movs	r1, #16
   17bb4:	300c      	adds	r0, #12
   17bb6:	f001 fd01 	bl	195bc <net_buf_simple_add>
   17bba:	4632      	mov	r2, r6
   17bbc:	4603      	mov	r3, r0
   17bbe:	4616      	mov	r6, r2
   17bc0:	ce03      	ldmia	r6!, {r0, r1}
   17bc2:	42ae      	cmp	r6, r5
   17bc4:	6018      	str	r0, [r3, #0]
   17bc6:	6059      	str	r1, [r3, #4]
   17bc8:	4632      	mov	r2, r6
   17bca:	f103 0308 	add.w	r3, r3, #8
   17bce:	d1f6      	bne.n	17bbe <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   17bd0:	2200      	movs	r2, #0
   17bd2:	4639      	mov	r1, r7
   17bd4:	4620      	mov	r0, r4
   17bd6:	f00f fd3a 	bl	2764e <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17bda:	1d20      	adds	r0, r4, #4
   17bdc:	2101      	movs	r1, #1
   17bde:	f00f fd62 	bl	276a6 <atomic_set_bit>
	return 0;
   17be2:	2000      	movs	r0, #0
   17be4:	e78c      	b.n	17b00 <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   17be6:	200b      	movs	r0, #11
   17be8:	e78a      	b.n	17b00 <compute_and_check_and_send_periph_dhcheck+0xa8>
   17bea:	bf00      	nop
   17bec:	0002ee99 	.word	0x0002ee99
   17bf0:	0002a780 	.word	0x0002a780
   17bf4:	0002ee14 	.word	0x0002ee14
   17bf8:	0002eeae 	.word	0x0002eeae
   17bfc:	0002eed1 	.word	0x0002eed1

00017c00 <bt_smp_connected>:
{
   17c00:	b538      	push	{r3, r4, r5, lr}
   17c02:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   17c04:	4908      	ldr	r1, [pc, #32]	; (17c28 <bt_smp_connected+0x28>)
   17c06:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   17c0a:	3094      	adds	r0, #148	; 0x94
   17c0c:	f008 fd96 	bl	2073c <k_work_init_delayable>
	smp_reset(smp);
   17c10:	4628      	mov	r0, r5
   17c12:	f00f fdf1 	bl	277f8 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17c16:	4b05      	ldr	r3, [pc, #20]	; (17c2c <bt_smp_connected+0x2c>)
   17c18:	34c4      	adds	r4, #196	; 0xc4
   17c1a:	e8d4 2fef 	ldaex	r2, [r4]
   17c1e:	e8c4 3fe1 	stlex	r1, r3, [r4]
   17c22:	2900      	cmp	r1, #0
   17c24:	d1f9      	bne.n	17c1a <bt_smp_connected+0x1a>
}
   17c26:	bd38      	pop	{r3, r4, r5, pc}
   17c28:	000188ad 	.word	0x000188ad
   17c2c:	20009a20 	.word	0x20009a20

00017c30 <smp_pairing_confirm>:
{
   17c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   17c32:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   17c34:	68cd      	ldr	r5, [r1, #12]
{
   17c36:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   17c38:	210b      	movs	r1, #11
   17c3a:	4630      	mov	r0, r6
   17c3c:	f00f fcf3 	bl	27626 <atomic_clear_bit>
   17c40:	462b      	mov	r3, r5
   17c42:	f104 0217 	add.w	r2, r4, #23
   17c46:	f105 0110 	add.w	r1, r5, #16
   17c4a:	f853 0b04 	ldr.w	r0, [r3], #4
   17c4e:	428b      	cmp	r3, r1
   17c50:	f842 0b04 	str.w	r0, [r2], #4
   17c54:	d1f9      	bne.n	17c4a <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17c56:	2105      	movs	r1, #5
   17c58:	4630      	mov	r0, r6
   17c5a:	f00f fcbd 	bl	275d8 <atomic_test_bit>
   17c5e:	b928      	cbnz	r0, 17c6c <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   17c60:	4620      	mov	r0, r4
}
   17c62:	b004      	add	sp, #16
   17c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   17c68:	f00f be3c 	b.w	278e4 <legacy_pairing_confirm>
	switch (smp->method) {
   17c6c:	7a23      	ldrb	r3, [r4, #8]
   17c6e:	2b01      	cmp	r3, #1
   17c70:	d00a      	beq.n	17c88 <smp_pairing_confirm+0x58>
   17c72:	2b02      	cmp	r3, #2
   17c74:	d115      	bne.n	17ca2 <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   17c76:	2104      	movs	r1, #4
   17c78:	4620      	mov	r0, r4
   17c7a:	f00f fd14 	bl	276a6 <atomic_set_bit>
}
   17c7e:	b004      	add	sp, #16
   17c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   17c84:	f7ff bbca 	b.w	1741c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   17c88:	210a      	movs	r1, #10
   17c8a:	4630      	mov	r0, r6
   17c8c:	f00f fca4 	bl	275d8 <atomic_test_bit>
   17c90:	2800      	cmp	r0, #0
   17c92:	d0f0      	beq.n	17c76 <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   17c94:	4630      	mov	r0, r6
   17c96:	2100      	movs	r1, #0
   17c98:	f00f fd05 	bl	276a6 <atomic_set_bit>
			return 0;
   17c9c:	2000      	movs	r0, #0
}
   17c9e:	b004      	add	sp, #16
   17ca0:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   17ca2:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17ca4:	4b05      	ldr	r3, [pc, #20]	; (17cbc <smp_pairing_confirm+0x8c>)
   17ca6:	2201      	movs	r2, #1
   17ca8:	9302      	str	r3, [sp, #8]
   17caa:	2300      	movs	r3, #0
   17cac:	4904      	ldr	r1, [pc, #16]	; (17cc0 <smp_pairing_confirm+0x90>)
   17cae:	4618      	mov	r0, r3
   17cb0:	e9cd 3300 	strd	r3, r3, [sp]
   17cb4:	f00f fce8 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17cb8:	2008      	movs	r0, #8
   17cba:	e7f0      	b.n	17c9e <smp_pairing_confirm+0x6e>
   17cbc:	0002ee14 	.word	0x0002ee14
   17cc0:	0002a780 	.word	0x0002a780

00017cc4 <smp_pairing_random>:
{
   17cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17cc8:	4604      	mov	r4, r0
   17cca:	b089      	sub	sp, #36	; 0x24
   17ccc:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17cce:	f7ff fa57 	bl	17180 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   17cd2:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17cd6:	4605      	mov	r5, r0
   17cd8:	464a      	mov	r2, r9
   17cda:	68f3      	ldr	r3, [r6, #12]
   17cdc:	f103 0110 	add.w	r1, r3, #16
   17ce0:	f853 0b04 	ldr.w	r0, [r3], #4
   17ce4:	428b      	cmp	r3, r1
   17ce6:	f842 0b04 	str.w	r0, [r2], #4
   17cea:	d1f9      	bne.n	17ce0 <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17cec:	1d27      	adds	r7, r4, #4
   17cee:	2105      	movs	r1, #5
   17cf0:	4638      	mov	r0, r7
   17cf2:	f00f fc71 	bl	275d8 <atomic_test_bit>
   17cf6:	2800      	cmp	r0, #0
   17cf8:	d14f      	bne.n	17d9a <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   17cfa:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17cfe:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   17d02:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17d06:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   17d08:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   17d0a:	9201      	str	r2, [sp, #4]
   17d0c:	9300      	str	r3, [sp, #0]
   17d0e:	4649      	mov	r1, r9
   17d10:	4630      	mov	r0, r6
   17d12:	9502      	str	r5, [sp, #8]
   17d14:	f104 0310 	add.w	r3, r4, #16
   17d18:	f104 0209 	add.w	r2, r4, #9
   17d1c:	f00f fd87 	bl	2782e <smp_c1>
	if (err) {
   17d20:	bb20      	cbnz	r0, 17d6c <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   17d22:	2210      	movs	r2, #16
   17d24:	4629      	mov	r1, r5
   17d26:	f104 0017 	add.w	r0, r4, #23
   17d2a:	f011 fd4e 	bl	297ca <memcmp>
   17d2e:	4680      	mov	r8, r0
   17d30:	2800      	cmp	r0, #0
   17d32:	d177      	bne.n	17e24 <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   17d34:	462b      	mov	r3, r5
   17d36:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   17d3a:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   17d3e:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   17d40:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   17d42:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   17d46:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   17d4a:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   17d4c:	4629      	mov	r1, r5
   17d4e:	4630      	mov	r0, r6
   17d50:	f00e fbf8 	bl	26544 <bt_encrypt_le>
		if (err) {
   17d54:	b170      	cbz	r0, 17d74 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   17d56:	4b62      	ldr	r3, [pc, #392]	; (17ee0 <smp_pairing_random+0x21c>)
   17d58:	f8cd 8000 	str.w	r8, [sp]
   17d5c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   17d60:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   17d62:	2201      	movs	r2, #1
   17d64:	4618      	mov	r0, r3
   17d66:	495f      	ldr	r1, [pc, #380]	; (17ee4 <smp_pairing_random+0x220>)
   17d68:	f00f fc8e 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17d6c:	2008      	movs	r0, #8
}
   17d6e:	b009      	add	sp, #36	; 0x24
   17d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17d74:	4633      	mov	r3, r6
   17d76:	ae08      	add	r6, sp, #32
   17d78:	462a      	mov	r2, r5
   17d7a:	ca03      	ldmia	r2!, {r0, r1}
   17d7c:	42b2      	cmp	r2, r6
   17d7e:	6018      	str	r0, [r3, #0]
   17d80:	6059      	str	r1, [r3, #4]
   17d82:	4615      	mov	r5, r2
   17d84:	f103 0308 	add.w	r3, r3, #8
   17d88:	d1f6      	bne.n	17d78 <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17d8a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17d8c:	4638      	mov	r0, r7
   17d8e:	f00f fc8a 	bl	276a6 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   17d92:	4620      	mov	r0, r4
   17d94:	f00f fcd0 	bl	27738 <smp_send_pairing_random>
   17d98:	e7e9      	b.n	17d6e <smp_pairing_random+0xaa>
	switch (smp->method) {
   17d9a:	7a23      	ldrb	r3, [r4, #8]
   17d9c:	2b05      	cmp	r3, #5
   17d9e:	f200 8091 	bhi.w	17ec4 <smp_pairing_random+0x200>
   17da2:	e8df f003 	tbb	[pc, r3]
   17da6:	1f19      	.short	0x1f19
   17da8:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   17dac:	ab04      	add	r3, sp, #16
   17dae:	494e      	ldr	r1, [pc, #312]	; (17ee8 <smp_pairing_random+0x224>)
   17db0:	9300      	str	r3, [sp, #0]
   17db2:	464a      	mov	r2, r9
   17db4:	6809      	ldr	r1, [r1, #0]
   17db6:	f104 0327 	add.w	r3, r4, #39	; 0x27
   17dba:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17dbe:	f001 f865 	bl	18e8c <bt_crypto_g2>
   17dc2:	2800      	cmp	r0, #0
   17dc4:	d1d2      	bne.n	17d6c <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17dc6:	210a      	movs	r1, #10
   17dc8:	4638      	mov	r0, r7
   17dca:	f00f fc6c 	bl	276a6 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   17dce:	68ab      	ldr	r3, [r5, #8]
   17dd0:	9904      	ldr	r1, [sp, #16]
   17dd2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17dd6:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   17dd8:	210d      	movs	r1, #13
   17dda:	4620      	mov	r0, r4
   17ddc:	f00f fc63 	bl	276a6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17de0:	2110      	movs	r1, #16
   17de2:	e7d3      	b.n	17d8c <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17de4:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   17de8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17dec:	493e      	ldr	r1, [pc, #248]	; (17ee8 <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17dee:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17df0:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17df2:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17df6:	9500      	str	r5, [sp, #0]
   17df8:	464a      	mov	r2, r9
   17dfa:	6809      	ldr	r1, [r1, #0]
   17dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17e00:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17e04:	f00f fee1 	bl	27bca <bt_crypto_f4>
   17e08:	b128      	cbz	r0, 17e16 <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   17e0a:	4b38      	ldr	r3, [pc, #224]	; (17eec <smp_pairing_random+0x228>)
   17e0c:	9302      	str	r3, [sp, #8]
   17e0e:	2300      	movs	r3, #0
   17e10:	e9cd 3300 	strd	r3, r3, [sp]
   17e14:	e7a5      	b.n	17d62 <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   17e16:	2210      	movs	r2, #16
   17e18:	4629      	mov	r1, r5
   17e1a:	f104 0017 	add.w	r0, r4, #23
   17e1e:	f011 fcd4 	bl	297ca <memcmp>
   17e22:	b108      	cbz	r0, 17e28 <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   17e24:	2004      	movs	r0, #4
   17e26:	e7a2      	b.n	17d6e <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   17e28:	2103      	movs	r1, #3
   17e2a:	4620      	mov	r0, r4
   17e2c:	f00f fc3b 	bl	276a6 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   17e30:	f00f fc82 	bl	27738 <smp_send_pairing_random>
		if (err) {
   17e34:	2800      	cmp	r0, #0
   17e36:	d19a      	bne.n	17d6e <smp_pairing_random+0xaa>
		smp->passkey_round++;
   17e38:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17e3c:	3301      	adds	r3, #1
   17e3e:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   17e40:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   17e42:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   17e46:	d109      	bne.n	17e5c <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   17e48:	210d      	movs	r1, #13
   17e4a:	4620      	mov	r0, r4
   17e4c:	f00f fc2b 	bl	276a6 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17e50:	2110      	movs	r1, #16
   17e52:	4638      	mov	r0, r7
   17e54:	f00f fc27 	bl	276a6 <atomic_set_bit>
			return 0;
   17e58:	2000      	movs	r0, #0
   17e5a:	e788      	b.n	17d6e <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   17e5c:	2110      	movs	r1, #16
   17e5e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17e62:	f7fb fd05 	bl	13870 <bt_rand>
   17e66:	3800      	subs	r0, #0
   17e68:	bf18      	it	ne
   17e6a:	2001      	movne	r0, #1
   17e6c:	00c0      	lsls	r0, r0, #3
   17e6e:	e77e      	b.n	17d6e <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   17e70:	2110      	movs	r1, #16
   17e72:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17e76:	f7fb fcfb 	bl	13870 <bt_rand>
   17e7a:	2800      	cmp	r0, #0
   17e7c:	f47f af76 	bne.w	17d6c <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   17e80:	b365      	cbz	r5, 17edc <smp_pairing_random+0x218>
   17e82:	68eb      	ldr	r3, [r5, #12]
   17e84:	b353      	cbz	r3, 17edc <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   17e86:	4b1a      	ldr	r3, [pc, #104]	; (17ef0 <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17e88:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   17e8a:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   17e8c:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   17e8e:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17e92:	7ca3      	ldrb	r3, [r4, #18]
   17e94:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   17e98:	d412      	bmi.n	17ec0 <smp_pairing_random+0x1fc>
   17e9a:	2b00      	cmp	r3, #0
   17e9c:	bf14      	ite	ne
   17e9e:	2301      	movne	r3, #1
   17ea0:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   17ea2:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   17ea6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   17ea8:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   17eaa:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   17eae:	210c      	movs	r1, #12
   17eb0:	f00f fbf9 	bl	276a6 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   17eb4:	68eb      	ldr	r3, [r5, #12]
   17eb6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17eba:	a904      	add	r1, sp, #16
   17ebc:	4798      	blx	r3
			return 0;
   17ebe:	e7cb      	b.n	17e58 <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   17ec0:	005b      	lsls	r3, r3, #1
   17ec2:	e7ee      	b.n	17ea2 <smp_pairing_random+0x1de>
	switch (smp->method) {
   17ec4:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17ec6:	4b0b      	ldr	r3, [pc, #44]	; (17ef4 <smp_pairing_random+0x230>)
   17ec8:	2201      	movs	r2, #1
   17eca:	9302      	str	r3, [sp, #8]
   17ecc:	2300      	movs	r3, #0
   17ece:	4905      	ldr	r1, [pc, #20]	; (17ee4 <smp_pairing_random+0x220>)
   17ed0:	4618      	mov	r0, r3
   17ed2:	e9cd 3300 	strd	r3, r3, [sp]
   17ed6:	f00f fbd7 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17eda:	e747      	b.n	17d6c <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   17edc:	2002      	movs	r0, #2
   17ede:	e746      	b.n	17d6e <smp_pairing_random+0xaa>
   17ee0:	0002eef5 	.word	0x0002eef5
   17ee4:	0002a780 	.word	0x0002a780
   17ee8:	200211b4 	.word	0x200211b4
   17eec:	0002ef0a 	.word	0x0002ef0a
   17ef0:	0002a8ca 	.word	0x0002a8ca
   17ef4:	0002ee14 	.word	0x0002ee14

00017ef8 <bt_smp_start_security>:
{
   17ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   17efc:	78c6      	ldrb	r6, [r0, #3]
{
   17efe:	4604      	mov	r4, r0
	switch (conn->role) {
   17f00:	2e01      	cmp	r6, #1
   17f02:	d005      	beq.n	17f10 <bt_smp_start_security+0x18>
		return -EINVAL;
   17f04:	f06f 0415 	mvn.w	r4, #21
}
   17f08:	4620      	mov	r0, r4
   17f0a:	b003      	add	sp, #12
   17f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   17f10:	f7ff f9b4 	bl	1727c <smp_chan_get>
	if (!smp) {
   17f14:	4605      	mov	r5, r0
   17f16:	2800      	cmp	r0, #0
   17f18:	f000 80ac 	beq.w	18074 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   17f1c:	1d07      	adds	r7, r0, #4
   17f1e:	2104      	movs	r1, #4
   17f20:	4638      	mov	r0, r7
   17f22:	f00f fb59 	bl	275d8 <atomic_test_bit>
   17f26:	2800      	cmp	r0, #0
   17f28:	f040 80a7 	bne.w	1807a <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   17f2c:	2103      	movs	r1, #3
   17f2e:	4638      	mov	r0, r7
   17f30:	f00f fb52 	bl	275d8 <atomic_test_bit>
   17f34:	b110      	cbz	r0, 17f3c <bt_smp_start_security+0x44>
		return -EBUSY;
   17f36:	f06f 040f 	mvn.w	r4, #15
   17f3a:	e7e5      	b.n	17f08 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   17f3c:	4631      	mov	r1, r6
   17f3e:	4638      	mov	r0, r7
   17f40:	f00f fb4a 	bl	275d8 <atomic_test_bit>
   17f44:	2800      	cmp	r0, #0
   17f46:	d1f6      	bne.n	17f36 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17f48:	4628      	mov	r0, r5
   17f4a:	f7ff f919 	bl	17180 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   17f4e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17f52:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   17f54:	7a9b      	ldrb	r3, [r3, #10]
   17f56:	2b03      	cmp	r3, #3
   17f58:	d042      	beq.n	17fe0 <bt_smp_start_security+0xe8>
   17f5a:	d832      	bhi.n	17fc2 <bt_smp_start_security+0xca>
   17f5c:	3b01      	subs	r3, #1
   17f5e:	2b01      	cmp	r3, #1
   17f60:	d948      	bls.n	17ff4 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   17f62:	210b      	movs	r1, #11
   17f64:	1d20      	adds	r0, r4, #4
   17f66:	f00f fb37 	bl	275d8 <atomic_test_bit>
   17f6a:	2800      	cmp	r0, #0
   17f6c:	d1ca      	bne.n	17f04 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   17f6e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17f72:	b983      	cbnz	r3, 17f96 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   17f74:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   17f78:	4632      	mov	r2, r6
   17f7a:	2020      	movs	r0, #32
   17f7c:	7a21      	ldrb	r1, [r4, #8]
   17f7e:	f000 fde9 	bl	18b54 <bt_keys_find>
   17f82:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   17f86:	b930      	cbnz	r0, 17f96 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   17f88:	4632      	mov	r2, r6
   17f8a:	2004      	movs	r0, #4
   17f8c:	7a21      	ldrb	r1, [r4, #8]
   17f8e:	f000 fde1 	bl	18b54 <bt_keys_find>
   17f92:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   17f96:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17f9a:	2b00      	cmp	r3, #0
   17f9c:	d0b2      	beq.n	17f04 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   17f9e:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   17fa0:	f012 0f24 	tst.w	r2, #36	; 0x24
   17fa4:	d0ae      	beq.n	17f04 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   17fa6:	7aa1      	ldrb	r1, [r4, #10]
   17fa8:	2902      	cmp	r1, #2
   17faa:	d923      	bls.n	17ff4 <bt_smp_start_security+0xfc>
   17fac:	7b58      	ldrb	r0, [r3, #13]
   17fae:	07c0      	lsls	r0, r0, #31
   17fb0:	d5a8      	bpl.n	17f04 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   17fb2:	2903      	cmp	r1, #3
   17fb4:	d01e      	beq.n	17ff4 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   17fb6:	0692      	lsls	r2, r2, #26
   17fb8:	d5a4      	bpl.n	17f04 <bt_smp_start_security+0xc>
   17fba:	7b1b      	ldrb	r3, [r3, #12]
   17fbc:	2b10      	cmp	r3, #16
   17fbe:	d1a1      	bne.n	17f04 <bt_smp_start_security+0xc>
   17fc0:	e018      	b.n	17ff4 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   17fc2:	2b04      	cmp	r3, #4
   17fc4:	d1cd      	bne.n	17f62 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17fc6:	4628      	mov	r0, r5
   17fc8:	f7ff f8f0 	bl	171ac <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   17fcc:	2803      	cmp	r0, #3
   17fce:	d104      	bne.n	17fda <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17fd0:	2e00      	cmp	r6, #0
   17fd2:	d0c6      	beq.n	17f62 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   17fd4:	68f3      	ldr	r3, [r6, #12]
   17fd6:	2b00      	cmp	r3, #0
   17fd8:	d0c3      	beq.n	17f62 <bt_smp_start_security+0x6a>
   17fda:	4b29      	ldr	r3, [pc, #164]	; (18080 <bt_smp_start_security+0x188>)
   17fdc:	781b      	ldrb	r3, [r3, #0]
   17fde:	e007      	b.n	17ff0 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17fe0:	4628      	mov	r0, r5
   17fe2:	f7ff f8e3 	bl	171ac <get_io_capa>
   17fe6:	2803      	cmp	r0, #3
   17fe8:	d104      	bne.n	17ff4 <bt_smp_start_security+0xfc>
   17fea:	2e00      	cmp	r6, #0
   17fec:	d0b9      	beq.n	17f62 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   17fee:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   17ff0:	2b00      	cmp	r3, #0
   17ff2:	d0b6      	beq.n	17f62 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   17ff4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17ff8:	b13b      	cbz	r3, 1800a <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   17ffa:	4628      	mov	r0, r5
   17ffc:	f7ff f958 	bl	172b0 <smp_init>
   18000:	4680      	mov	r8, r0
   18002:	b170      	cbz	r0, 18022 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   18004:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18008:	e77e      	b.n	17f08 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1800a:	7a20      	ldrb	r0, [r4, #8]
   1800c:	f104 0190 	add.w	r1, r4, #144	; 0x90
   18010:	f000 fd48 	bl	18aa4 <bt_keys_get_addr>
   18014:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   18018:	2800      	cmp	r0, #0
   1801a:	d1ee      	bne.n	17ffa <bt_smp_start_security+0x102>
			return -ENOMEM;
   1801c:	f06f 040b 	mvn.w	r4, #11
   18020:	e772      	b.n	17f08 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   18022:	210b      	movs	r1, #11
   18024:	4628      	mov	r0, r5
   18026:	f00f fb4e 	bl	276c6 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1802a:	4606      	mov	r6, r0
   1802c:	2800      	cmp	r0, #0
   1802e:	d0e9      	beq.n	18004 <bt_smp_start_security+0x10c>
   18030:	2101      	movs	r1, #1
   18032:	300c      	adds	r0, #12
   18034:	f001 fac2 	bl	195bc <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   18038:	2109      	movs	r1, #9
   1803a:	4681      	mov	r9, r0
   1803c:	4628      	mov	r0, r5
   1803e:	f7ff f8db 	bl	171f8 <get_auth>
   18042:	4643      	mov	r3, r8
   18044:	f889 0000 	strb.w	r0, [r9]
   18048:	4632      	mov	r2, r6
   1804a:	4620      	mov	r0, r4
   1804c:	2106      	movs	r1, #6
   1804e:	f8cd 8000 	str.w	r8, [sp]
   18052:	f00e fc14 	bl	2687e <bt_l2cap_send_cb>
	if (err) {
   18056:	4604      	mov	r4, r0
   18058:	b118      	cbz	r0, 18062 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1805a:	4630      	mov	r0, r6
   1805c:	f001 f98c 	bl	19378 <net_buf_unref>
		return err;
   18060:	e752      	b.n	17f08 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   18062:	4638      	mov	r0, r7
   18064:	210f      	movs	r1, #15
   18066:	f00f fb1e 	bl	276a6 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1806a:	2101      	movs	r1, #1
   1806c:	4628      	mov	r0, r5
   1806e:	f00f fb1a 	bl	276a6 <atomic_set_bit>
	return 0;
   18072:	e749      	b.n	17f08 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   18074:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   18078:	e746      	b.n	17f08 <bt_smp_start_security+0x10>
		return -EIO;
   1807a:	f06f 0404 	mvn.w	r4, #4
   1807e:	e743      	b.n	17f08 <bt_smp_start_security+0x10>
   18080:	20021e63 	.word	0x20021e63

00018084 <smp_pairing_complete>:
{
   18084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18086:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18088:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1808c:	1d04      	adds	r4, r0, #4
	if (!status) {
   1808e:	bb39      	cbnz	r1, 180e0 <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   18090:	210d      	movs	r1, #13
   18092:	4620      	mov	r0, r4
   18094:	f00f faa0 	bl	275d8 <atomic_test_bit>
	return list->head;
   18098:	4b36      	ldr	r3, [pc, #216]	; (18174 <smp_pairing_complete+0xf0>)
   1809a:	4607      	mov	r7, r0
   1809c:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1809e:	b19b      	cbz	r3, 180c8 <smp_pairing_complete+0x44>
	return node->next;
   180a0:	681c      	ldr	r4, [r3, #0]
   180a2:	b104      	cbz	r4, 180a6 <smp_pairing_complete+0x22>
   180a4:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   180a6:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   180aa:	b113      	cbz	r3, 180b2 <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   180ac:	4639      	mov	r1, r7
   180ae:	4628      	mov	r0, r5
   180b0:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   180b2:	b14c      	cbz	r4, 180c8 <smp_pairing_complete+0x44>
   180b4:	4623      	mov	r3, r4
   180b6:	68e4      	ldr	r4, [r4, #12]
   180b8:	681b      	ldr	r3, [r3, #0]
   180ba:	b11c      	cbz	r4, 180c4 <smp_pairing_complete+0x40>
   180bc:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   180be:	2b00      	cmp	r3, #0
   180c0:	d1f4      	bne.n	180ac <smp_pairing_complete+0x28>
   180c2:	e7f7      	b.n	180b4 <smp_pairing_complete+0x30>
   180c4:	2b00      	cmp	r3, #0
   180c6:	d1f1      	bne.n	180ac <smp_pairing_complete+0x28>
	smp_reset(smp);
   180c8:	4630      	mov	r0, r6
   180ca:	f00f fb95 	bl	277f8 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   180ce:	7a6a      	ldrb	r2, [r5, #9]
   180d0:	7aab      	ldrb	r3, [r5, #10]
   180d2:	429a      	cmp	r2, r3
   180d4:	d04d      	beq.n	18172 <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   180d6:	4628      	mov	r0, r5
}
   180d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   180dc:	f7ff bf0c 	b.w	17ef8 <bt_smp_start_security>
	switch (smp_err) {
   180e0:	3901      	subs	r1, #1
   180e2:	b2c9      	uxtb	r1, r1
   180e4:	290e      	cmp	r1, #14
   180e6:	bf96      	itet	ls
   180e8:	4b23      	ldrls	r3, [pc, #140]	; (18178 <smp_pairing_complete+0xf4>)
	if (!status) {
   180ea:	2709      	movhi	r7, #9
   180ec:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   180ee:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   180f2:	b143      	cbz	r3, 18106 <smp_pairing_complete+0x82>
   180f4:	7b1b      	ldrb	r3, [r3, #12]
   180f6:	bb33      	cbnz	r3, 18146 <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   180f8:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   180fc:	f000 fe10 	bl	18d20 <bt_keys_clear>
			conn->le.keys = NULL;
   18100:	2300      	movs	r3, #0
   18102:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   18106:	2102      	movs	r1, #2
   18108:	4620      	mov	r0, r4
   1810a:	f00f fa65 	bl	275d8 <atomic_test_bit>
   1810e:	b948      	cbnz	r0, 18124 <smp_pairing_complete+0xa0>
	switch (err) {
   18110:	2f07      	cmp	r7, #7
   18112:	bf94      	ite	ls
   18114:	4b19      	ldrls	r3, [pc, #100]	; (1817c <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   18116:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   18118:	463a      	mov	r2, r7
   1811a:	4628      	mov	r0, r5
   1811c:	bf98      	it	ls
   1811e:	5dd9      	ldrbls	r1, [r3, r7]
   18120:	f7fc fa80 	bl	14624 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18124:	2103      	movs	r1, #3
   18126:	4620      	mov	r0, r4
   18128:	f00f fa56 	bl	275d8 <atomic_test_bit>
   1812c:	2800      	cmp	r0, #0
   1812e:	d0cb      	beq.n	180c8 <smp_pairing_complete+0x44>
	return list->head;
   18130:	4b10      	ldr	r3, [pc, #64]	; (18174 <smp_pairing_complete+0xf0>)
   18132:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   18134:	2b00      	cmp	r3, #0
   18136:	d0c7      	beq.n	180c8 <smp_pairing_complete+0x44>
	return node->next;
   18138:	681c      	ldr	r4, [r3, #0]
   1813a:	b104      	cbz	r4, 1813e <smp_pairing_complete+0xba>
   1813c:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1813e:	f853 3c08 	ldr.w	r3, [r3, #-8]
   18142:	b94b      	cbnz	r3, 18158 <smp_pairing_complete+0xd4>
   18144:	e00b      	b.n	1815e <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   18146:	2102      	movs	r1, #2
   18148:	4620      	mov	r0, r4
   1814a:	f00f fa45 	bl	275d8 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1814e:	2800      	cmp	r0, #0
   18150:	d1d2      	bne.n	180f8 <smp_pairing_complete+0x74>
   18152:	e7d8      	b.n	18106 <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   18154:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   18156:	b123      	cbz	r3, 18162 <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   18158:	4639      	mov	r1, r7
   1815a:	4628      	mov	r0, r5
   1815c:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1815e:	2c00      	cmp	r4, #0
   18160:	d0b2      	beq.n	180c8 <smp_pairing_complete+0x44>
   18162:	4623      	mov	r3, r4
   18164:	68e4      	ldr	r4, [r4, #12]
   18166:	685b      	ldr	r3, [r3, #4]
   18168:	2c00      	cmp	r4, #0
   1816a:	d1f3      	bne.n	18154 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   1816c:	2b00      	cmp	r3, #0
   1816e:	d1f3      	bne.n	18158 <smp_pairing_complete+0xd4>
   18170:	e7aa      	b.n	180c8 <smp_pairing_complete+0x44>
}
   18172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18174:	20021084 	.word	0x20021084
   18178:	0002f1c4 	.word	0x0002f1c4
   1817c:	0002f1b3 	.word	0x0002f1b3

00018180 <smp_error>:
{
   18180:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   18182:	1d03      	adds	r3, r0, #4
{
   18184:	4606      	mov	r6, r0
   18186:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   18188:	4618      	mov	r0, r3
   1818a:	2102      	movs	r1, #2
{
   1818c:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1818e:	f00f fa23 	bl	275d8 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   18192:	4604      	mov	r4, r0
   18194:	b120      	cbz	r0, 181a0 <smp_error+0x20>
   18196:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1819a:	fab4 f484 	clz	r4, r4
   1819e:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   181a0:	2103      	movs	r1, #3
   181a2:	4618      	mov	r0, r3
   181a4:	f00f fa18 	bl	275d8 <atomic_test_bit>
   181a8:	b1b0      	cbz	r0, 181d8 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   181aa:	4639      	mov	r1, r7
   181ac:	4630      	mov	r0, r6
   181ae:	f7ff ff69 	bl	18084 <smp_pairing_complete>
	if (remote_already_completed) {
   181b2:	b1f4      	cbz	r4, 181f2 <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   181b4:	4b1d      	ldr	r3, [pc, #116]	; (1822c <smp_error+0xac>)
   181b6:	491e      	ldr	r1, [pc, #120]	; (18230 <smp_error+0xb0>)
   181b8:	9302      	str	r3, [sp, #8]
   181ba:	2300      	movs	r3, #0
   181bc:	2202      	movs	r2, #2
   181be:	4618      	mov	r0, r3
   181c0:	e9cd 3300 	strd	r3, r3, [sp]
   181c4:	f00f fa60 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   181c8:	2105      	movs	r1, #5
   181ca:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   181ce:	f00e fa60 	bl	26692 <bt_conn_disconnect>
		return 0;
   181d2:	2000      	movs	r0, #0
}
   181d4:	b005      	add	sp, #20
   181d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   181d8:	2101      	movs	r1, #1
   181da:	4618      	mov	r0, r3
   181dc:	f00f f9fc 	bl	275d8 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   181e0:	2800      	cmp	r0, #0
   181e2:	d1e2      	bne.n	181aa <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   181e4:	210f      	movs	r1, #15
   181e6:	4618      	mov	r0, r3
   181e8:	f00f f9f6 	bl	275d8 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   181ec:	2800      	cmp	r0, #0
   181ee:	d1dc      	bne.n	181aa <smp_error+0x2a>
   181f0:	e7df      	b.n	181b2 <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   181f2:	2105      	movs	r1, #5
   181f4:	4630      	mov	r0, r6
   181f6:	f00f fa66 	bl	276c6 <smp_create_pdu.constprop.0>
	if (!buf) {
   181fa:	4605      	mov	r5, r0
   181fc:	b190      	cbz	r0, 18224 <smp_error+0xa4>
   181fe:	2101      	movs	r1, #1
   18200:	300c      	adds	r0, #12
   18202:	f001 f9db 	bl	195bc <net_buf_simple_add>
	rsp->reason = reason;
   18206:	7007      	strb	r7, [r0, #0]
   18208:	9400      	str	r4, [sp, #0]
   1820a:	4623      	mov	r3, r4
   1820c:	462a      	mov	r2, r5
   1820e:	2106      	movs	r1, #6
   18210:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   18214:	f00e fb33 	bl	2687e <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   18218:	2800      	cmp	r0, #0
   1821a:	d0da      	beq.n	181d2 <smp_error+0x52>
		net_buf_unref(buf);
   1821c:	4628      	mov	r0, r5
   1821e:	f001 f8ab 	bl	19378 <net_buf_unref>
   18222:	e7d6      	b.n	181d2 <smp_error+0x52>
		return -ENOBUFS;
   18224:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18228:	e7d4      	b.n	181d4 <smp_error+0x54>
   1822a:	bf00      	nop
   1822c:	0002ef23 	.word	0x0002ef23
   18230:	0002a780 	.word	0x0002a780

00018234 <bt_smp_recv>:
{
   18234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   18238:	8a0b      	ldrh	r3, [r1, #16]
{
   1823a:	4604      	mov	r4, r0
   1823c:	460e      	mov	r6, r1
   1823e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   18240:	b963      	cbnz	r3, 1825c <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   18242:	4a3c      	ldr	r2, [pc, #240]	; (18334 <bt_smp_recv+0x100>)
   18244:	4618      	mov	r0, r3
   18246:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1824a:	493b      	ldr	r1, [pc, #236]	; (18338 <bt_smp_recv+0x104>)
   1824c:	2201      	movs	r2, #1
   1824e:	9300      	str	r3, [sp, #0]
   18250:	f00f fa1a 	bl	27688 <z_log_msg_runtime_create.constprop.0>
}
   18254:	2000      	movs	r0, #0
   18256:	b006      	add	sp, #24
   18258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1825c:	2101      	movs	r1, #1
   1825e:	f106 000c 	add.w	r0, r6, #12
   18262:	f001 f98d 	bl	19580 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18266:	2104      	movs	r1, #4
   18268:	4607      	mov	r7, r0
   1826a:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   1826e:	f00f f9b3 	bl	275d8 <atomic_test_bit>
   18272:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   18276:	7839      	ldrb	r1, [r7, #0]
   18278:	4604      	mov	r4, r0
   1827a:	b158      	cbz	r0, 18294 <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1827c:	4b2f      	ldr	r3, [pc, #188]	; (1833c <bt_smp_recv+0x108>)
   1827e:	2202      	movs	r2, #2
   18280:	9302      	str	r3, [sp, #8]
   18282:	2300      	movs	r3, #0
   18284:	4618      	mov	r0, r3
   18286:	e9cd 3300 	strd	r3, r3, [sp]
   1828a:	9103      	str	r1, [sp, #12]
   1828c:	492a      	ldr	r1, [pc, #168]	; (18338 <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1828e:	f00f f9fb 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return 0;
   18292:	e7df      	b.n	18254 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   18294:	290e      	cmp	r1, #14
   18296:	d908      	bls.n	182aa <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   18298:	4b29      	ldr	r3, [pc, #164]	; (18340 <bt_smp_recv+0x10c>)
   1829a:	9103      	str	r1, [sp, #12]
   1829c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   182a0:	2202      	movs	r2, #2
   182a2:	4603      	mov	r3, r0
   182a4:	4924      	ldr	r1, [pc, #144]	; (18338 <bt_smp_recv+0x104>)
   182a6:	9000      	str	r0, [sp, #0]
   182a8:	e7f1      	b.n	1828e <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   182aa:	f8df 8098 	ldr.w	r8, [pc, #152]	; 18344 <bt_smp_recv+0x110>
   182ae:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   182b2:	b96b      	cbnz	r3, 182d0 <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   182b4:	4a24      	ldr	r2, [pc, #144]	; (18348 <bt_smp_recv+0x114>)
   182b6:	9103      	str	r1, [sp, #12]
   182b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   182bc:	491e      	ldr	r1, [pc, #120]	; (18338 <bt_smp_recv+0x104>)
   182be:	2202      	movs	r2, #2
   182c0:	9300      	str	r3, [sp, #0]
   182c2:	f00f f9e1 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   182c6:	2107      	movs	r1, #7
		smp_error(smp, err);
   182c8:	4628      	mov	r0, r5
   182ca:	f7ff ff59 	bl	18180 <smp_error>
   182ce:	e7c1      	b.n	18254 <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   182d0:	4628      	mov	r0, r5
   182d2:	f00f fa7f 	bl	277d4 <atomic_test_and_clear_bit>
   182d6:	783a      	ldrb	r2, [r7, #0]
   182d8:	4603      	mov	r3, r0
   182da:	b968      	cbnz	r0, 182f8 <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   182dc:	9203      	str	r2, [sp, #12]
   182de:	4a1b      	ldr	r2, [pc, #108]	; (1834c <bt_smp_recv+0x118>)
   182e0:	4915      	ldr	r1, [pc, #84]	; (18338 <bt_smp_recv+0x104>)
   182e2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   182e6:	9000      	str	r0, [sp, #0]
   182e8:	2202      	movs	r2, #2
   182ea:	f00f f9cd 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   182ee:	783b      	ldrb	r3, [r7, #0]
   182f0:	2b05      	cmp	r3, #5
   182f2:	d0af      	beq.n	18254 <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   182f4:	2108      	movs	r1, #8
   182f6:	e7e7      	b.n	182c8 <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   182f8:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   182fc:	8a33      	ldrh	r3, [r6, #16]
   182fe:	7909      	ldrb	r1, [r1, #4]
   18300:	4299      	cmp	r1, r3
   18302:	d00d      	beq.n	18320 <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18304:	e9cd 3203 	strd	r3, r2, [sp, #12]
   18308:	4b11      	ldr	r3, [pc, #68]	; (18350 <bt_smp_recv+0x11c>)
   1830a:	490b      	ldr	r1, [pc, #44]	; (18338 <bt_smp_recv+0x104>)
   1830c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   18310:	2201      	movs	r2, #1
   18312:	4623      	mov	r3, r4
   18314:	4620      	mov	r0, r4
   18316:	9400      	str	r4, [sp, #0]
   18318:	f00f f9b6 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1831c:	210a      	movs	r1, #10
   1831e:	e7d3      	b.n	182c8 <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   18320:	4631      	mov	r1, r6
   18322:	4628      	mov	r0, r5
   18324:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   18328:	4798      	blx	r3
	if (err) {
   1832a:	4601      	mov	r1, r0
   1832c:	2800      	cmp	r0, #0
   1832e:	d091      	beq.n	18254 <bt_smp_recv+0x20>
   18330:	e7ca      	b.n	182c8 <bt_smp_recv+0x94>
   18332:	bf00      	nop
   18334:	0002ef7b 	.word	0x0002ef7b
   18338:	0002a780 	.word	0x0002a780
   1833c:	0002ef96 	.word	0x0002ef96
   18340:	0002efc7 	.word	0x0002efc7
   18344:	0002b2b4 	.word	0x0002b2b4
   18348:	0002efe9 	.word	0x0002efe9
   1834c:	0002f003 	.word	0x0002f003
   18350:	0002ea94 	.word	0x0002ea94

00018354 <bt_smp_pkey_ready>:
{
   18354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   18356:	4a10      	ldr	r2, [pc, #64]	; (18398 <bt_smp_pkey_ready+0x44>)
{
   18358:	4603      	mov	r3, r0
	sc_public_key = pkey;
   1835a:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   1835c:	b948      	cbnz	r0, 18372 <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   1835e:	4a0f      	ldr	r2, [pc, #60]	; (1839c <bt_smp_pkey_ready+0x48>)
   18360:	490f      	ldr	r1, [pc, #60]	; (183a0 <bt_smp_pkey_ready+0x4c>)
   18362:	e9cd 0201 	strd	r0, r2, [sp, #4]
   18366:	9000      	str	r0, [sp, #0]
   18368:	2202      	movs	r2, #2
   1836a:	f00f f98d 	bl	27688 <z_log_msg_runtime_create.constprop.0>
}
   1836e:	b004      	add	sp, #16
   18370:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   18372:	480c      	ldr	r0, [pc, #48]	; (183a4 <bt_smp_pkey_ready+0x50>)
   18374:	f007 fd5e 	bl	1fe34 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18378:	4b0b      	ldr	r3, [pc, #44]	; (183a8 <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   1837a:	1f1c      	subs	r4, r3, #4
   1837c:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   18380:	065b      	lsls	r3, r3, #25
   18382:	d5f4      	bpl.n	1836e <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   18384:	4620      	mov	r0, r4
   18386:	f7ff f897 	bl	174b8 <smp_public_key_periph>
		if (err) {
   1838a:	4601      	mov	r1, r0
   1838c:	2800      	cmp	r0, #0
   1838e:	d0ee      	beq.n	1836e <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   18390:	4620      	mov	r0, r4
   18392:	f7ff fef5 	bl	18180 <smp_error>
   18396:	e7ea      	b.n	1836e <bt_smp_pkey_ready+0x1a>
   18398:	200211b4 	.word	0x200211b4
   1839c:	0002f01e 	.word	0x0002f01e
   183a0:	0002a780 	.word	0x0002a780
   183a4:	20008b48 	.word	0x20008b48
   183a8:	20009a24 	.word	0x20009a24

000183ac <smp_ident_addr_info>:
{
   183ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   183b0:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   183b4:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   183b6:	f023 0302 	bic.w	r3, r3, #2
   183ba:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   183be:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   183c2:	783b      	ldrb	r3, [r7, #0]
{
   183c4:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   183c6:	f106 0890 	add.w	r8, r6, #144	; 0x90
   183ca:	b32b      	cbz	r3, 18418 <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   183cc:	79bb      	ldrb	r3, [r7, #6]
   183ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   183d2:	2bc0      	cmp	r3, #192	; 0xc0
   183d4:	d020      	beq.n	18418 <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   183d6:	4638      	mov	r0, r7
   183d8:	f7f8 febc 	bl	11154 <bt_addr_le_str>
   183dc:	2400      	movs	r4, #0
   183de:	4b5d      	ldr	r3, [pc, #372]	; (18554 <smp_ident_addr_info+0x1a8>)
   183e0:	2201      	movs	r2, #1
   183e2:	495d      	ldr	r1, [pc, #372]	; (18558 <smp_ident_addr_info+0x1ac>)
   183e4:	9003      	str	r0, [sp, #12]
   183e6:	9302      	str	r3, [sp, #8]
   183e8:	4620      	mov	r0, r4
   183ea:	4623      	mov	r3, r4
   183ec:	e9cd 4400 	strd	r4, r4, [sp]
   183f0:	f00f f94a 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   183f4:	4640      	mov	r0, r8
   183f6:	f7f8 fead 	bl	11154 <bt_addr_le_str>
   183fa:	4b58      	ldr	r3, [pc, #352]	; (1855c <smp_ident_addr_info+0x1b0>)
   183fc:	9003      	str	r0, [sp, #12]
   183fe:	e9cd 4301 	strd	r4, r3, [sp, #4]
   18402:	4620      	mov	r0, r4
   18404:	4623      	mov	r3, r4
   18406:	2201      	movs	r2, #1
   18408:	4953      	ldr	r1, [pc, #332]	; (18558 <smp_ident_addr_info+0x1ac>)
   1840a:	9400      	str	r4, [sp, #0]
   1840c:	f00f f93c 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   18410:	200a      	movs	r0, #10
}
   18412:	b004      	add	sp, #16
   18414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   18418:	2207      	movs	r2, #7
   1841a:	4639      	mov	r1, r7
   1841c:	4640      	mov	r0, r8
   1841e:	f011 f9d4 	bl	297ca <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   18422:	b168      	cbz	r0, 18440 <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   18424:	4639      	mov	r1, r7
   18426:	7a30      	ldrb	r0, [r6, #8]
   18428:	f000 fc1a 	bl	18c60 <bt_keys_find_addr>
		if (keys) {
   1842c:	4605      	mov	r5, r0
   1842e:	b138      	cbz	r0, 18440 <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   18430:	4601      	mov	r1, r0
   18432:	4620      	mov	r0, r4
   18434:	f00f f8d6 	bl	275e4 <update_keys_check>
   18438:	b1e8      	cbz	r0, 18476 <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   1843a:	4628      	mov	r0, r5
   1843c:	f000 fc70 	bl	18d20 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18440:	210d      	movs	r1, #13
   18442:	1d20      	adds	r0, r4, #4
   18444:	f00f f8c8 	bl	275d8 <atomic_test_bit>
   18448:	2800      	cmp	r0, #0
   1844a:	d071      	beq.n	18530 <smp_ident_addr_info+0x184>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1844c:	4642      	mov	r2, r8
   1844e:	2002      	movs	r0, #2
   18450:	7a31      	ldrb	r1, [r6, #8]
   18452:	f000 fc41 	bl	18cd8 <bt_keys_get_type>
		if (!keys) {
   18456:	4605      	mov	r5, r0
   18458:	b978      	cbnz	r0, 1847a <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1845a:	4640      	mov	r0, r8
   1845c:	f7f8 fe7a 	bl	11154 <bt_addr_le_str>
   18460:	4b3f      	ldr	r3, [pc, #252]	; (18560 <smp_ident_addr_info+0x1b4>)
   18462:	9003      	str	r0, [sp, #12]
   18464:	e9cd 5301 	strd	r5, r3, [sp, #4]
   18468:	2201      	movs	r2, #1
   1846a:	462b      	mov	r3, r5
   1846c:	4628      	mov	r0, r5
   1846e:	493a      	ldr	r1, [pc, #232]	; (18558 <smp_ident_addr_info+0x1ac>)
   18470:	9500      	str	r5, [sp, #0]
   18472:	f00f f909 	bl	27688 <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   18476:	2008      	movs	r0, #8
   18478:	e7cb      	b.n	18412 <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1847a:	78f3      	ldrb	r3, [r6, #3]
   1847c:	bba3      	cbnz	r3, 184e8 <smp_ident_addr_info+0x13c>
			dst = &conn->le.resp_addr;
   1847e:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   18482:	781a      	ldrb	r2, [r3, #0]
   18484:	2a01      	cmp	r2, #1
   18486:	d11e      	bne.n	184c6 <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   18488:	799a      	ldrb	r2, [r3, #6]
   1848a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1848e:	2a40      	cmp	r2, #64	; 0x40
   18490:	d119      	bne.n	184c6 <smp_ident_addr_info+0x11a>
   18492:	f8d3 2001 	ldr.w	r2, [r3, #1]
   18496:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   1849a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1849e:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   184a0:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   184a4:	b17b      	cbz	r3, 184c6 <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   184a6:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   184aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   184ae:	2bc0      	cmp	r3, #192	; 0xc0
   184b0:	d009      	beq.n	184c6 <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   184b2:	4639      	mov	r1, r7
   184b4:	1c68      	adds	r0, r5, #1
   184b6:	f00f f8c1 	bl	2763c <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   184ba:	4640      	mov	r0, r8
   184bc:	f00f f8be 	bl	2763c <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   184c0:	4630      	mov	r0, r6
   184c2:	f7fc f869 	bl	14598 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   184c6:	f894 60e9 	ldrb.w	r6, [r4, #233]	; 0xe9
   184ca:	f016 0602 	ands.w	r6, r6, #2
   184ce:	d00e      	beq.n	184ee <smp_ident_addr_info+0x142>
   184d0:	4924      	ldr	r1, [pc, #144]	; (18564 <smp_ident_addr_info+0x1b8>)
   184d2:	f640 6363 	movw	r3, #3683	; 0xe63
   184d6:	4a24      	ldr	r2, [pc, #144]	; (18568 <smp_ident_addr_info+0x1bc>)
   184d8:	4824      	ldr	r0, [pc, #144]	; (1856c <smp_ident_addr_info+0x1c0>)
   184da:	f00c fc20 	bl	24d1e <assert_print>
   184de:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   184e2:	4821      	ldr	r0, [pc, #132]	; (18568 <smp_ident_addr_info+0x1bc>)
   184e4:	f00c fc14 	bl	24d10 <assert_post_action>
			dst = &conn->le.init_addr;
   184e8:	f106 0397 	add.w	r3, r6, #151	; 0x97
   184ec:	e7c9      	b.n	18482 <smp_ident_addr_info+0xd6>
	conflict = bt_id_find_conflict(new_bond);
   184ee:	4628      	mov	r0, r5
   184f0:	f7fa fafe 	bl	12af0 <bt_id_find_conflict>
	if (conflict) {
   184f4:	b158      	cbz	r0, 1850e <smp_ident_addr_info+0x162>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   184f6:	4b1e      	ldr	r3, [pc, #120]	; (18570 <smp_ident_addr_info+0x1c4>)
   184f8:	4630      	mov	r0, r6
   184fa:	e9cd 6301 	strd	r6, r3, [sp, #4]
   184fe:	2202      	movs	r2, #2
   18500:	4633      	mov	r3, r6
   18502:	4915      	ldr	r1, [pc, #84]	; (18558 <smp_ident_addr_info+0x1ac>)
   18504:	9600      	str	r6, [sp, #0]
   18506:	f00f f8bf 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1850a:	2003      	movs	r0, #3
   1850c:	e781      	b.n	18412 <smp_ident_addr_info+0x66>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1850e:	4628      	mov	r0, r5
   18510:	f7fa faee 	bl	12af0 <bt_id_find_conflict>
   18514:	b148      	cbz	r0, 1852a <smp_ident_addr_info+0x17e>
   18516:	4917      	ldr	r1, [pc, #92]	; (18574 <smp_ident_addr_info+0x1c8>)
   18518:	f640 637f 	movw	r3, #3711	; 0xe7f
   1851c:	4a12      	ldr	r2, [pc, #72]	; (18568 <smp_ident_addr_info+0x1bc>)
   1851e:	4813      	ldr	r0, [pc, #76]	; (1856c <smp_ident_addr_info+0x1c0>)
   18520:	f00c fbfd 	bl	24d1e <assert_print>
   18524:	f640 617f 	movw	r1, #3711	; 0xe7f
   18528:	e7db      	b.n	184e2 <smp_ident_addr_info+0x136>
	bt_id_add(new_bond);
   1852a:	4628      	mov	r0, r5
   1852c:	f7fa faf0 	bl	12b10 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   18530:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   18534:	075b      	lsls	r3, r3, #29
   18536:	d503      	bpl.n	18540 <smp_ident_addr_info+0x194>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18538:	210a      	movs	r1, #10
   1853a:	4620      	mov	r0, r4
   1853c:	f00f f8b3 	bl	276a6 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   18540:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   18544:	b109      	cbz	r1, 1854a <smp_ident_addr_info+0x19e>
	return 0;
   18546:	2000      	movs	r0, #0
   18548:	e763      	b.n	18412 <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   1854a:	4620      	mov	r0, r4
   1854c:	f7ff fd9a 	bl	18084 <smp_pairing_complete>
   18550:	e7f9      	b.n	18546 <smp_ident_addr_info+0x19a>
   18552:	bf00      	nop
   18554:	0002f037 	.word	0x0002f037
   18558:	0002a780 	.word	0x0002a780
   1855c:	0002f11e 	.word	0x0002f11e
   18560:	0002edfa 	.word	0x0002edfa
   18564:	0002f07a 	.word	0x0002f07a
   18568:	0002f04b 	.word	0x0002f04b
   1856c:	0002b6e9 	.word	0x0002b6e9
   18570:	0002f095 	.word	0x0002f095
   18574:	0002f0d0 	.word	0x0002f0d0

00018578 <smp_central_ident>:
{
   18578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1857a:	460b      	mov	r3, r1
   1857c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1857e:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   18582:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18584:	210d      	movs	r1, #13
   18586:	3004      	adds	r0, #4
   18588:	f00f f826 	bl	275d8 <atomic_test_bit>
   1858c:	b318      	cbz	r0, 185d6 <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1858e:	f105 0790 	add.w	r7, r5, #144	; 0x90
   18592:	7a29      	ldrb	r1, [r5, #8]
   18594:	463a      	mov	r2, r7
   18596:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   18598:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1859a:	f000 fb9d 	bl	18cd8 <bt_keys_get_type>
		if (!keys) {
   1859e:	4605      	mov	r5, r0
   185a0:	b980      	cbnz	r0, 185c4 <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   185a2:	4638      	mov	r0, r7
   185a4:	f7f8 fdd6 	bl	11154 <bt_addr_le_str>
   185a8:	4b17      	ldr	r3, [pc, #92]	; (18608 <smp_central_ident+0x90>)
   185aa:	9003      	str	r0, [sp, #12]
   185ac:	e9cd 5301 	strd	r5, r3, [sp, #4]
   185b0:	4628      	mov	r0, r5
   185b2:	462b      	mov	r3, r5
   185b4:	2201      	movs	r2, #1
   185b6:	4915      	ldr	r1, [pc, #84]	; (1860c <smp_central_ident+0x94>)
   185b8:	9500      	str	r5, [sp, #0]
   185ba:	f00f f865 	bl	27688 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   185be:	2008      	movs	r0, #8
}
   185c0:	b005      	add	sp, #20
   185c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   185c4:	4632      	mov	r2, r6
   185c6:	f832 3b02 	ldrh.w	r3, [r2], #2
   185ca:	8303      	strh	r3, [r0, #24]
   185cc:	f8d6 3002 	ldr.w	r3, [r6, #2]
   185d0:	6103      	str	r3, [r0, #16]
   185d2:	6853      	ldr	r3, [r2, #4]
   185d4:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   185d6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   185da:	f023 0201 	bic.w	r2, r3, #1
   185de:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   185e2:	079a      	lsls	r2, r3, #30
   185e4:	d508      	bpl.n	185f8 <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   185e6:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   185e8:	4620      	mov	r0, r4
   185ea:	f00f f85c 	bl	276a6 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   185ee:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   185f2:	b129      	cbz	r1, 18600 <smp_central_ident+0x88>
	return 0;
   185f4:	2000      	movs	r0, #0
   185f6:	e7e3      	b.n	185c0 <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   185f8:	075b      	lsls	r3, r3, #29
   185fa:	d5f8      	bpl.n	185ee <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   185fc:	210a      	movs	r1, #10
   185fe:	e7f3      	b.n	185e8 <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   18600:	4620      	mov	r0, r4
   18602:	f7ff fd3f 	bl	18084 <smp_pairing_complete>
   18606:	e7f5      	b.n	185f4 <smp_central_ident+0x7c>
   18608:	0002edfa 	.word	0x0002edfa
   1860c:	0002a780 	.word	0x0002a780

00018610 <smp_pairing_failed>:
{
   18610:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18614:	460e      	mov	r6, r1
   18616:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18618:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1861c:	f7fe fdb0 	bl	17180 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   18620:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   18622:	4914      	ldr	r1, [pc, #80]	; (18674 <smp_pairing_failed+0x64>)
   18624:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18626:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   18628:	9303      	str	r3, [sp, #12]
   1862a:	4b13      	ldr	r3, [pc, #76]	; (18678 <smp_pairing_failed+0x68>)
   1862c:	2201      	movs	r2, #1
   1862e:	9302      	str	r3, [sp, #8]
   18630:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   18632:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   18634:	4618      	mov	r0, r3
   18636:	e9cd 3300 	strd	r3, r3, [sp]
   1863a:	f00f f825 	bl	27688 <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1863e:	210a      	movs	r1, #10
   18640:	4638      	mov	r0, r7
   18642:	f00f f8c7 	bl	277d4 <atomic_test_and_clear_bit>
   18646:	b140      	cbz	r0, 1865a <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   18648:	b975      	cbnz	r5, 18668 <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   1864a:	4620      	mov	r0, r4
   1864c:	7831      	ldrb	r1, [r6, #0]
   1864e:	f7ff fd19 	bl	18084 <smp_pairing_complete>
}
   18652:	2000      	movs	r0, #0
   18654:	b004      	add	sp, #16
   18656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1865a:	210b      	movs	r1, #11
   1865c:	4638      	mov	r0, r7
   1865e:	f00f f8b9 	bl	277d4 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   18662:	2800      	cmp	r0, #0
   18664:	d1f0      	bne.n	18648 <smp_pairing_failed+0x38>
   18666:	e7f0      	b.n	1864a <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   18668:	692b      	ldr	r3, [r5, #16]
   1866a:	2b00      	cmp	r3, #0
   1866c:	d0ed      	beq.n	1864a <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   1866e:	4640      	mov	r0, r8
   18670:	4798      	blx	r3
   18672:	e7ea      	b.n	1864a <smp_pairing_failed+0x3a>
   18674:	0002a780 	.word	0x0002a780
   18678:	0002f0ef 	.word	0x0002f0ef

0001867c <bt_smp_encrypt_change>:
{
   1867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   18680:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18682:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   18686:	4604      	mov	r4, r0
   18688:	460f      	mov	r7, r1
   1868a:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1868c:	2101      	movs	r1, #1
   1868e:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   18690:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18694:	f00f f89e 	bl	277d4 <atomic_test_and_clear_bit>
   18698:	2800      	cmp	r0, #0
   1869a:	d068      	beq.n	1876e <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   1869c:	b1e7      	cbz	r7, 186d8 <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1869e:	2103      	movs	r1, #3
   186a0:	4630      	mov	r0, r6
   186a2:	f00e ff99 	bl	275d8 <atomic_test_bit>
   186a6:	2800      	cmp	r0, #0
   186a8:	d061      	beq.n	1876e <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   186aa:	4638      	mov	r0, r7
   186ac:	f7f9 fcee 	bl	1208c <bt_security_err_get>
	switch (auth_err) {
   186b0:	3801      	subs	r0, #1
   186b2:	b2c0      	uxtb	r0, r0
   186b4:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   186b6:	bf8c      	ite	hi
   186b8:	2400      	movhi	r4, #0
   186ba:	4b75      	ldrls	r3, [pc, #468]	; (18890 <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   186bc:	f04f 0102 	mov.w	r1, #2
   186c0:	bf98      	it	ls
   186c2:	5c1c      	ldrbls	r4, [r3, r0]
   186c4:	4630      	mov	r0, r6
   186c6:	f00e ffee 	bl	276a6 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   186ca:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   186cc:	4628      	mov	r0, r5
}
   186ce:	b00c      	add	sp, #48	; 0x30
   186d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   186d4:	f7ff bcd6 	b.w	18084 <smp_pairing_complete>
	if (!conn->encrypt) {
   186d8:	f898 300b 	ldrb.w	r3, [r8, #11]
   186dc:	2b00      	cmp	r3, #0
   186de:	d046      	beq.n	1876e <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   186e0:	2103      	movs	r1, #3
   186e2:	4630      	mov	r0, r6
   186e4:	f00e ff78 	bl	275d8 <atomic_test_bit>
   186e8:	b928      	cbnz	r0, 186f6 <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   186ea:	4628      	mov	r0, r5
}
   186ec:	b00c      	add	sp, #48	; 0x30
   186ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   186f2:	f00f b881 	b.w	277f8 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   186f6:	2105      	movs	r1, #5
   186f8:	4630      	mov	r0, r6
   186fa:	f00e ff6d 	bl	275d8 <atomic_test_bit>
   186fe:	b1b8      	cbz	r0, 18730 <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   18700:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18704:	071b      	lsls	r3, r3, #28
   18706:	d507      	bpl.n	18718 <bt_smp_encrypt_change+0x9c>
   18708:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1870c:	071f      	lsls	r7, r3, #28
   1870e:	d503      	bpl.n	18718 <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   18710:	2111      	movs	r1, #17
   18712:	4630      	mov	r0, r6
   18714:	f00e ffc7 	bl	276a6 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   18718:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1871c:	f023 0308 	bic.w	r3, r3, #8
   18720:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   18724:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   18728:	f023 0308 	bic.w	r3, r3, #8
   1872c:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   18730:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   18734:	07d8      	lsls	r0, r3, #31
   18736:	d51d      	bpl.n	18774 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   18738:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1873a:	4628      	mov	r0, r5
   1873c:	f00e ffb3 	bl	276a6 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   18740:	2102      	movs	r1, #2
   18742:	4630      	mov	r0, r6
   18744:	f00e ffaf 	bl	276a6 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   18748:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1874a:	f8d3 70c0 	ldr.w	r7, [r3, #192]	; 0xc0
   1874e:	b9cf      	cbnz	r7, 18784 <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   18750:	f103 0090 	add.w	r0, r3, #144	; 0x90
   18754:	f7f8 fcfe 	bl	11154 <bt_addr_le_str>
   18758:	4b4e      	ldr	r3, [pc, #312]	; (18894 <bt_smp_encrypt_change+0x218>)
   1875a:	9003      	str	r0, [sp, #12]
   1875c:	e9cd 7301 	strd	r7, r3, [sp, #4]
   18760:	2201      	movs	r2, #1
   18762:	463b      	mov	r3, r7
   18764:	4638      	mov	r0, r7
   18766:	494c      	ldr	r1, [pc, #304]	; (18898 <bt_smp_encrypt_change+0x21c>)
   18768:	9700      	str	r7, [sp, #0]
   1876a:	f00e ff8d 	bl	27688 <z_log_msg_runtime_create.constprop.0>
}
   1876e:	b00c      	add	sp, #48	; 0x30
   18770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   18774:	0799      	lsls	r1, r3, #30
   18776:	d501      	bpl.n	1877c <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   18778:	2108      	movs	r1, #8
   1877a:	e7de      	b.n	1873a <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1877c:	075a      	lsls	r2, r3, #29
   1877e:	d5df      	bpl.n	18740 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18780:	210a      	movs	r1, #10
   18782:	e7da      	b.n	1873a <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18784:	2105      	movs	r1, #5
   18786:	f00e ff27 	bl	275d8 <atomic_test_bit>
   1878a:	4607      	mov	r7, r0
   1878c:	b9b0      	cbnz	r0, 187bc <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1878e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18792:	07db      	lsls	r3, r3, #31
   18794:	d512      	bpl.n	187bc <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   18796:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   18798:	211a      	movs	r1, #26
   1879a:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   1879c:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   187a0:	f7fb f866 	bl	13870 <bt_rand>
   187a4:	4681      	mov	r9, r0
   187a6:	b170      	cbz	r0, 187c6 <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   187a8:	4b3c      	ldr	r3, [pc, #240]	; (1889c <bt_smp_encrypt_change+0x220>)
   187aa:	2201      	movs	r2, #1
   187ac:	e9cd 7301 	strd	r7, r3, [sp, #4]
   187b0:	4638      	mov	r0, r7
   187b2:	463b      	mov	r3, r7
   187b4:	4938      	ldr	r1, [pc, #224]	; (18898 <bt_smp_encrypt_change+0x21c>)
   187b6:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   187b8:	f00e ff66 	bl	27688 <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   187bc:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   187c0:	2900      	cmp	r1, #0
   187c2:	d1d4      	bne.n	1876e <bt_smp_encrypt_change+0xf2>
   187c4:	e782      	b.n	186cc <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   187c6:	2106      	movs	r1, #6
   187c8:	4628      	mov	r0, r5
   187ca:	f00e ff7c 	bl	276c6 <smp_create_pdu.constprop.0>
		if (!buf) {
   187ce:	4607      	mov	r7, r0
   187d0:	b938      	cbnz	r0, 187e2 <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   187d2:	4b33      	ldr	r3, [pc, #204]	; (188a0 <bt_smp_encrypt_change+0x224>)
   187d4:	e9cd 7301 	strd	r7, r3, [sp, #4]
   187d8:	2201      	movs	r2, #1
   187da:	463b      	mov	r3, r7
   187dc:	492e      	ldr	r1, [pc, #184]	; (18898 <bt_smp_encrypt_change+0x21c>)
   187de:	9700      	str	r7, [sp, #0]
   187e0:	e7ea      	b.n	187b8 <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   187e2:	2110      	movs	r1, #16
   187e4:	300c      	adds	r0, #12
   187e6:	f000 fee9 	bl	195bc <net_buf_simple_add>
   187ea:	f898 200c 	ldrb.w	r2, [r8, #12]
   187ee:	a905      	add	r1, sp, #20
   187f0:	4682      	mov	sl, r0
   187f2:	f010 fffa 	bl	297ea <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   187f6:	f898 000c 	ldrb.w	r0, [r8, #12]
   187fa:	280f      	cmp	r0, #15
   187fc:	d805      	bhi.n	1880a <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   187fe:	f1c0 0210 	rsb	r2, r0, #16
   18802:	4649      	mov	r1, r9
   18804:	4450      	add	r0, sl
   18806:	f011 f82a 	bl	2985e <memset>
		smp_send(smp, buf, NULL, NULL);
   1880a:	4639      	mov	r1, r7
   1880c:	2200      	movs	r2, #0
   1880e:	4628      	mov	r0, r5
   18810:	f00e ff1d 	bl	2764e <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   18814:	2107      	movs	r1, #7
   18816:	4628      	mov	r0, r5
   18818:	f00e ff55 	bl	276c6 <smp_create_pdu.constprop.0>
		if (!buf) {
   1881c:	4607      	mov	r7, r0
   1881e:	b908      	cbnz	r0, 18824 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   18820:	4b20      	ldr	r3, [pc, #128]	; (188a4 <bt_smp_encrypt_change+0x228>)
   18822:	e7d7      	b.n	187d4 <bt_smp_encrypt_change+0x158>
   18824:	210a      	movs	r1, #10
   18826:	300c      	adds	r0, #12
   18828:	f000 fec8 	bl	195bc <net_buf_simple_add>
   1882c:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1882e:	aa09      	add	r2, sp, #36	; 0x24
   18830:	ca03      	ldmia	r2!, {r0, r1}
   18832:	f8c3 0002 	str.w	r0, [r3, #2]
   18836:	f8c3 1006 	str.w	r1, [r3, #6]
   1883a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   1883e:	4639      	mov	r1, r7
   18840:	4628      	mov	r0, r5
   18842:	801a      	strh	r2, [r3, #0]
   18844:	4a18      	ldr	r2, [pc, #96]	; (188a8 <bt_smp_encrypt_change+0x22c>)
   18846:	f00e ff02 	bl	2764e <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1884a:	4630      	mov	r0, r6
   1884c:	210d      	movs	r1, #13
   1884e:	f00e fec3 	bl	275d8 <atomic_test_bit>
   18852:	ae09      	add	r6, sp, #36	; 0x24
   18854:	2800      	cmp	r0, #0
   18856:	d0b1      	beq.n	187bc <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   18858:	2101      	movs	r1, #1
   1885a:	4640      	mov	r0, r8
   1885c:	f000 fa24 	bl	18ca8 <bt_keys_add_type>
   18860:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   18864:	ab05      	add	r3, sp, #20
   18866:	461a      	mov	r2, r3
   18868:	ca03      	ldmia	r2!, {r0, r1}
   1886a:	42b2      	cmp	r2, r6
   1886c:	6038      	str	r0, [r7, #0]
   1886e:	6079      	str	r1, [r7, #4]
   18870:	4613      	mov	r3, r2
   18872:	f107 0708 	add.w	r7, r7, #8
   18876:	d1f6      	bne.n	18866 <bt_smp_encrypt_change+0x1ea>
   18878:	4633      	mov	r3, r6
   1887a:	cb03      	ldmia	r3!, {r0, r1}
   1887c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   18880:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   18884:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   18888:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   1888c:	e796      	b.n	187bc <bt_smp_encrypt_change+0x140>
   1888e:	bf00      	nop
   18890:	0002f1bb 	.word	0x0002f1bb
   18894:	0002f111 	.word	0x0002f111
   18898:	0002a780 	.word	0x0002a780
   1889c:	0002f126 	.word	0x0002f126
   188a0:	0002f141 	.word	0x0002f141
   188a4:	0002f168 	.word	0x0002f168
   188a8:	000188e9 	.word	0x000188e9

000188ac <smp_timeout>:
{
   188ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   188ae:	4b0c      	ldr	r3, [pc, #48]	; (188e0 <smp_timeout+0x34>)
{
   188b0:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   188b2:	9302      	str	r3, [sp, #8]
   188b4:	2300      	movs	r3, #0
   188b6:	2201      	movs	r2, #1
   188b8:	4618      	mov	r0, r3
   188ba:	e9cd 3300 	strd	r3, r3, [sp]
   188be:	4909      	ldr	r1, [pc, #36]	; (188e4 <smp_timeout+0x38>)
   188c0:	f00e fee2 	bl	27688 <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   188c4:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   188c8:	2108      	movs	r1, #8
   188ca:	f7ff fbdb 	bl	18084 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   188ce:	2104      	movs	r1, #4
   188d0:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   188d4:	b004      	add	sp, #16
   188d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   188da:	f00e bee4 	b.w	276a6 <atomic_set_bit>
   188de:	bf00      	nop
   188e0:	0002f190 	.word	0x0002f190
   188e4:	0002a780 	.word	0x0002a780

000188e8 <smp_ident_sent>:
{
   188e8:	b508      	push	{r3, lr}
	if (!err) {
   188ea:	bb1a      	cbnz	r2, 18934 <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   188ec:	7883      	ldrb	r3, [r0, #2]
   188ee:	2b01      	cmp	r3, #1
   188f0:	d120      	bne.n	18934 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   188f2:	2106      	movs	r1, #6
   188f4:	f00d ffdc 	bl	268b0 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   188f8:	b970      	cbnz	r0, 18918 <smp_ident_sent+0x30>
   188fa:	490f      	ldr	r1, [pc, #60]	; (18938 <smp_ident_sent+0x50>)
   188fc:	f240 2365 	movw	r3, #613	; 0x265
   18900:	4a0e      	ldr	r2, [pc, #56]	; (1893c <smp_ident_sent+0x54>)
   18902:	480f      	ldr	r0, [pc, #60]	; (18940 <smp_ident_sent+0x58>)
   18904:	f00c fa0b 	bl	24d1e <assert_print>
   18908:	480e      	ldr	r0, [pc, #56]	; (18944 <smp_ident_sent+0x5c>)
   1890a:	f00c fa08 	bl	24d1e <assert_print>
   1890e:	f240 2165 	movw	r1, #613	; 0x265
   18912:	480a      	ldr	r0, [pc, #40]	; (1893c <smp_ident_sent+0x54>)
   18914:	f00c f9fc 	bl	24d10 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   18918:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1891c:	f023 0301 	bic.w	r3, r3, #1
   18920:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   18924:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   18928:	b921      	cbnz	r1, 18934 <smp_ident_sent+0x4c>
}
   1892a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1892e:	38ec      	subs	r0, #236	; 0xec
   18930:	f7ff bba8 	b.w	18084 <smp_pairing_complete>
}
   18934:	bd08      	pop	{r3, pc}
   18936:	bf00      	nop
   18938:	0002e907 	.word	0x0002e907
   1893c:	0002f04b 	.word	0x0002f04b
   18940:	0002b6e9 	.word	0x0002b6e9
   18944:	0002f19c 	.word	0x0002f19c

00018948 <bt_smp_update_keys>:
{
   18948:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1894c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1894e:	f7fe fc95 	bl	1727c <smp_chan_get>
	if (!smp) {
   18952:	4605      	mov	r5, r0
   18954:	2800      	cmp	r0, #0
   18956:	d074      	beq.n	18a42 <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18958:	1d07      	adds	r7, r0, #4
   1895a:	2103      	movs	r1, #3
   1895c:	4638      	mov	r0, r7
   1895e:	f00e fe3b 	bl	275d8 <atomic_test_bit>
   18962:	2800      	cmp	r0, #0
   18964:	d06d      	beq.n	18a42 <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   18966:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1896a:	b108      	cbz	r0, 18970 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1896c:	f000 f9d8 	bl	18d20 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18970:	f104 0890 	add.w	r8, r4, #144	; 0x90
   18974:	4641      	mov	r1, r8
   18976:	7a20      	ldrb	r0, [r4, #8]
   18978:	f000 f894 	bl	18aa4 <bt_keys_get_addr>
   1897c:	4606      	mov	r6, r0
   1897e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   18982:	b9a0      	cbnz	r0, 189ae <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18984:	4640      	mov	r0, r8
   18986:	f7f8 fbe5 	bl	11154 <bt_addr_le_str>
   1898a:	4b39      	ldr	r3, [pc, #228]	; (18a70 <bt_smp_update_keys+0x128>)
   1898c:	9003      	str	r0, [sp, #12]
   1898e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   18992:	4630      	mov	r0, r6
   18994:	4633      	mov	r3, r6
   18996:	2201      	movs	r2, #1
   18998:	4936      	ldr	r1, [pc, #216]	; (18a74 <bt_smp_update_keys+0x12c>)
   1899a:	9600      	str	r6, [sp, #0]
   1899c:	f00e fe74 	bl	27688 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   189a0:	2108      	movs	r1, #8
   189a2:	4628      	mov	r0, r5
}
   189a4:	b004      	add	sp, #16
   189a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   189aa:	f7ff bbe9 	b.w	18180 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   189ae:	210e      	movs	r1, #14
   189b0:	4638      	mov	r0, r7
   189b2:	f00e fe11 	bl	275d8 <atomic_test_bit>
   189b6:	b128      	cbz	r0, 189c4 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   189b8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   189bc:	7b53      	ldrb	r3, [r2, #13]
   189be:	f043 0302 	orr.w	r3, r3, #2
   189c2:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   189c4:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   189c6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   189ca:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   189cc:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   189ce:	d83b      	bhi.n	18a48 <bt_smp_update_keys+0x100>
   189d0:	2a00      	cmp	r2, #0
   189d2:	d040      	beq.n	18a56 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   189d4:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   189d8:	7b53      	ldrb	r3, [r2, #13]
   189da:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   189de:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   189e0:	7d2b      	ldrb	r3, [r5, #20]
   189e2:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   189e4:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   189e8:	428b      	cmp	r3, r1
   189ea:	bf28      	it	cs
   189ec:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   189ee:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   189f0:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   189f2:	2105      	movs	r1, #5
   189f4:	f00e fdf0 	bl	275d8 <atomic_test_bit>
   189f8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   189fc:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   189fe:	b398      	cbz	r0, 18a68 <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   18a00:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18a04:	210d      	movs	r1, #13
   18a06:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   18a08:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18a0a:	f00e fde5 	bl	275d8 <atomic_test_bit>
   18a0e:	b1c0      	cbz	r0, 18a42 <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   18a10:	2120      	movs	r1, #32
   18a12:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   18a16:	f000 f947 	bl	18ca8 <bt_keys_add_type>
   18a1a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18a1e:	f105 0247 	add.w	r2, r5, #71	; 0x47
   18a22:	331a      	adds	r3, #26
   18a24:	3557      	adds	r5, #87	; 0x57
   18a26:	f852 1b04 	ldr.w	r1, [r2], #4
   18a2a:	42aa      	cmp	r2, r5
   18a2c:	f843 1b04 	str.w	r1, [r3], #4
   18a30:	d1f9      	bne.n	18a26 <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   18a32:	2300      	movs	r3, #0
   18a34:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18a38:	6113      	str	r3, [r2, #16]
   18a3a:	6153      	str	r3, [r2, #20]
   18a3c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18a40:	8313      	strh	r3, [r2, #24]
}
   18a42:	b004      	add	sp, #16
   18a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   18a48:	3a05      	subs	r2, #5
   18a4a:	2a01      	cmp	r2, #1
   18a4c:	d803      	bhi.n	18a56 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   18a4e:	f043 0320 	orr.w	r3, r3, #32
   18a52:	734b      	strb	r3, [r1, #13]
   18a54:	e7be      	b.n	189d4 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   18a56:	f023 0320 	bic.w	r3, r3, #32
   18a5a:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   18a5c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18a60:	7b53      	ldrb	r3, [r2, #13]
   18a62:	f023 0301 	bic.w	r3, r3, #1
   18a66:	e7ba      	b.n	189de <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   18a68:	f022 0210 	bic.w	r2, r2, #16
   18a6c:	735a      	strb	r2, [r3, #13]
   18a6e:	e7e8      	b.n	18a42 <bt_smp_update_keys+0xfa>
   18a70:	0002edfa 	.word	0x0002edfa
   18a74:	0002a780 	.word	0x0002a780

00018a78 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   18a78:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18a7a:	4b07      	ldr	r3, [pc, #28]	; (18a98 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   18a7c:	4807      	ldr	r0, [pc, #28]	; (18a9c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18a7e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   18a82:	f003 0306 	and.w	r3, r3, #6
   18a86:	1f9a      	subs	r2, r3, #6
   18a88:	4253      	negs	r3, r2
   18a8a:	4153      	adcs	r3, r2
   18a8c:	4a04      	ldr	r2, [pc, #16]	; (18aa0 <bt_smp_init+0x28>)
   18a8e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   18a90:	f7fa ff18 	bl	138c4 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   18a94:	2000      	movs	r0, #0
   18a96:	bd08      	pop	{r3, pc}
   18a98:	20008000 	.word	0x20008000
   18a9c:	20008544 	.word	0x20008544
   18aa0:	20021e63 	.word	0x20021e63

00018aa4 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18aa4:	b570      	push	{r4, r5, r6, lr}
   18aa6:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	__ASSERT_NO_MSG(addr != NULL);
   18aa8:	460d      	mov	r5, r1
   18aaa:	b959      	cbnz	r1, 18ac4 <bt_keys_get_addr+0x20>
   18aac:	4913      	ldr	r1, [pc, #76]	; (18afc <bt_keys_get_addr+0x58>)
   18aae:	4814      	ldr	r0, [pc, #80]	; (18b00 <bt_keys_get_addr+0x5c>)
   18ab0:	2359      	movs	r3, #89	; 0x59
   18ab2:	4a14      	ldr	r2, [pc, #80]	; (18b04 <bt_keys_get_addr+0x60>)
   18ab4:	f00c f933 	bl	24d1e <assert_print>
   18ab8:	2159      	movs	r1, #89	; 0x59
   18aba:	4812      	ldr	r0, [pc, #72]	; (18b04 <bt_keys_get_addr+0x60>)
   18abc:	f00c f928 	bl	24d10 <assert_post_action>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   18ac0:	2000      	movs	r0, #0
   18ac2:	e019      	b.n	18af8 <bt_keys_get_addr+0x54>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   18ac4:	4c10      	ldr	r4, [pc, #64]	; (18b08 <bt_keys_get_addr+0x64>)
   18ac6:	f814 3b01 	ldrb.w	r3, [r4], #1
   18aca:	4283      	cmp	r3, r0
   18acc:	d104      	bne.n	18ad8 <bt_keys_get_addr+0x34>
	return memcmp(a, b, sizeof(*a));
   18ace:	2207      	movs	r2, #7
   18ad0:	4620      	mov	r0, r4
   18ad2:	f010 fe7a 	bl	297ca <memcmp>
   18ad6:	b170      	cbz	r0, 18af6 <bt_keys_get_addr+0x52>
   18ad8:	2207      	movs	r2, #7
   18ada:	490c      	ldr	r1, [pc, #48]	; (18b0c <bt_keys_get_addr+0x68>)
   18adc:	480c      	ldr	r0, [pc, #48]	; (18b10 <bt_keys_get_addr+0x6c>)
   18ade:	f010 fe74 	bl	297ca <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   18ae2:	2800      	cmp	r0, #0
   18ae4:	d1ec      	bne.n	18ac0 <bt_keys_get_addr+0x1c>
		keys->id = id;
   18ae6:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   18aea:	682b      	ldr	r3, [r5, #0]
   18aec:	6023      	str	r3, [r4, #0]
   18aee:	88ab      	ldrh	r3, [r5, #4]
   18af0:	80a3      	strh	r3, [r4, #4]
   18af2:	79ab      	ldrb	r3, [r5, #6]
   18af4:	71a3      	strb	r3, [r4, #6]
		keys = &key_pool[i];
   18af6:	4804      	ldr	r0, [pc, #16]	; (18b08 <bt_keys_get_addr+0x64>)
}
   18af8:	bd70      	pop	{r4, r5, r6, pc}
   18afa:	bf00      	nop
   18afc:	0002f23c 	.word	0x0002f23c
   18b00:	0002b6e9 	.word	0x0002b6e9
   18b04:	0002f20c 	.word	0x0002f20c
   18b08:	200211b8 	.word	0x200211b8
   18b0c:	0002d679 	.word	0x0002d679
   18b10:	200211b9 	.word	0x200211b9

00018b14 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   18b14:	460b      	mov	r3, r1
   18b16:	b510      	push	{r4, lr}
   18b18:	4611      	mov	r1, r2
   18b1a:	4604      	mov	r4, r0
	int i;

	__ASSERT_NO_MSG(func != NULL);
   18b1c:	b963      	cbnz	r3, 18b38 <bt_keys_foreach_type+0x24>
   18b1e:	4909      	ldr	r1, [pc, #36]	; (18b44 <bt_keys_foreach_type+0x30>)
   18b20:	4809      	ldr	r0, [pc, #36]	; (18b48 <bt_keys_foreach_type+0x34>)
   18b22:	23b3      	movs	r3, #179	; 0xb3
   18b24:	4a09      	ldr	r2, [pc, #36]	; (18b4c <bt_keys_foreach_type+0x38>)
   18b26:	f00c f8fa 	bl	24d1e <assert_print>
   18b2a:	21b3      	movs	r1, #179	; 0xb3
   18b2c:	4807      	ldr	r0, [pc, #28]	; (18b4c <bt_keys_foreach_type+0x38>)
   18b2e:	f00c f8ef 	bl	24d10 <assert_post_action>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   18b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   18b36:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   18b38:	4805      	ldr	r0, [pc, #20]	; (18b50 <bt_keys_foreach_type+0x3c>)
   18b3a:	89c2      	ldrh	r2, [r0, #14]
   18b3c:	4222      	tst	r2, r4
   18b3e:	d1f8      	bne.n	18b32 <bt_keys_foreach_type+0x1e>
}
   18b40:	bd10      	pop	{r4, pc}
   18b42:	bf00      	nop
   18b44:	0002f250 	.word	0x0002f250
   18b48:	0002b6e9 	.word	0x0002b6e9
   18b4c:	0002f20c 	.word	0x0002f20c
   18b50:	200211b8 	.word	0x200211b8

00018b54 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   18b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b56:	4605      	mov	r5, r0
   18b58:	460e      	mov	r6, r1
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   18b5a:	4614      	mov	r4, r2
   18b5c:	b9aa      	cbnz	r2, 18b8a <bt_keys_find+0x36>
   18b5e:	490f      	ldr	r1, [pc, #60]	; (18b9c <bt_keys_find+0x48>)
   18b60:	480f      	ldr	r0, [pc, #60]	; (18ba0 <bt_keys_find+0x4c>)
   18b62:	23c0      	movs	r3, #192	; 0xc0
   18b64:	4a0f      	ldr	r2, [pc, #60]	; (18ba4 <bt_keys_find+0x50>)
   18b66:	f00c f8da 	bl	24d1e <assert_print>
   18b6a:	21c0      	movs	r1, #192	; 0xc0
   18b6c:	480d      	ldr	r0, [pc, #52]	; (18ba4 <bt_keys_find+0x50>)
   18b6e:	f00c f8cf 	bl	24d10 <assert_post_action>

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18b72:	b18a      	cbz	r2, 18b98 <bt_keys_find+0x44>
   18b74:	42b1      	cmp	r1, r6
   18b76:	d10f      	bne.n	18b98 <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   18b78:	2207      	movs	r2, #7
   18b7a:	4621      	mov	r1, r4
   18b7c:	480a      	ldr	r0, [pc, #40]	; (18ba8 <bt_keys_find+0x54>)
   18b7e:	f010 fe24 	bl	297ca <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18b82:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18b84:	b918      	cbnz	r0, 18b8e <bt_keys_find+0x3a>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
   18b86:	4809      	ldr	r0, [pc, #36]	; (18bac <bt_keys_find+0x58>)
   18b88:	e007      	b.n	18b9a <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18b8a:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18b8c:	4f07      	ldr	r7, [pc, #28]	; (18bac <bt_keys_find+0x58>)
   18b8e:	89fa      	ldrh	r2, [r7, #14]
   18b90:	7839      	ldrb	r1, [r7, #0]
   18b92:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18b94:	2b00      	cmp	r3, #0
   18b96:	d0ec      	beq.n	18b72 <bt_keys_find+0x1e>
		}
	}

	return NULL;
   18b98:	2000      	movs	r0, #0
}
   18b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b9c:	0002f23c 	.word	0x0002f23c
   18ba0:	0002b6e9 	.word	0x0002b6e9
   18ba4:	0002f20c 	.word	0x0002f20c
   18ba8:	200211b9 	.word	0x200211b9
   18bac:	200211b8 	.word	0x200211b8

00018bb0 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   18bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18bb2:	4606      	mov	r6, r0
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   18bb4:	460c      	mov	r4, r1
   18bb6:	b949      	cbnz	r1, 18bcc <bt_keys_find_irk+0x1c>
   18bb8:	4923      	ldr	r1, [pc, #140]	; (18c48 <bt_keys_find_irk+0x98>)
   18bba:	4824      	ldr	r0, [pc, #144]	; (18c4c <bt_keys_find_irk+0x9c>)
   18bbc:	23e9      	movs	r3, #233	; 0xe9
   18bbe:	4a24      	ldr	r2, [pc, #144]	; (18c50 <bt_keys_find_irk+0xa0>)
   18bc0:	f00c f8ad 	bl	24d1e <assert_print>
   18bc4:	21e9      	movs	r1, #233	; 0xe9
   18bc6:	4822      	ldr	r0, [pc, #136]	; (18c50 <bt_keys_find_irk+0xa0>)
   18bc8:	f00c f8a2 	bl	24d10 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   18bcc:	780b      	ldrb	r3, [r1, #0]
   18bce:	2b01      	cmp	r3, #1
   18bd0:	d001      	beq.n	18bd6 <bt_keys_find_irk+0x26>

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   18bd2:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   18bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   18bd6:	798b      	ldrb	r3, [r1, #6]
   18bd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18bdc:	2b40      	cmp	r3, #64	; 0x40
   18bde:	d1f8      	bne.n	18bd2 <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18be0:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18be2:	4d1c      	ldr	r5, [pc, #112]	; (18c54 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   18be4:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   18be8:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   18bea:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18bec:	f002 0202 	and.w	r2, r2, #2
   18bf0:	b1db      	cbz	r3, 18c2a <bt_keys_find_irk+0x7a>
   18bf2:	2300      	movs	r3, #0
   18bf4:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   18bf6:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18bf8:	f002 0202 	and.w	r2, r2, #2
   18bfc:	2b00      	cmp	r3, #0
   18bfe:	d1e8      	bne.n	18bd2 <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18c00:	2a00      	cmp	r2, #0
   18c02:	d0e6      	beq.n	18bd2 <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   18c04:	42b1      	cmp	r1, r6
   18c06:	d1e4      	bne.n	18bd2 <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   18c08:	1c67      	adds	r7, r4, #1
   18c0a:	4639      	mov	r1, r7
   18c0c:	4812      	ldr	r0, [pc, #72]	; (18c58 <bt_keys_find_irk+0xa8>)
   18c0e:	f00d f93d 	bl	25e8c <bt_rpa_irk_matches>
   18c12:	2301      	movs	r3, #1
   18c14:	2800      	cmp	r0, #0
   18c16:	d0ed      	beq.n	18bf4 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   18c18:	f8d4 3001 	ldr.w	r3, [r4, #1]
   18c1c:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   18c20:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   18c24:	4b0d      	ldr	r3, [pc, #52]	; (18c5c <bt_keys_find_irk+0xac>)
   18c26:	809a      	strh	r2, [r3, #4]
}
   18c28:	e00b      	b.n	18c42 <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18c2a:	2a00      	cmp	r2, #0
   18c2c:	d0e2      	beq.n	18bf4 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   18c2e:	42b0      	cmp	r0, r6
   18c30:	d1e0      	bne.n	18bf4 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   18c32:	2206      	movs	r2, #6
   18c34:	4639      	mov	r1, r7
   18c36:	1c60      	adds	r0, r4, #1
   18c38:	f010 fdc7 	bl	297ca <memcmp>
   18c3c:	2301      	movs	r3, #1
   18c3e:	2800      	cmp	r0, #0
   18c40:	d1d2      	bne.n	18be8 <bt_keys_find_irk+0x38>
			return &key_pool[i];
   18c42:	4804      	ldr	r0, [pc, #16]	; (18c54 <bt_keys_find_irk+0xa4>)
   18c44:	e7c6      	b.n	18bd4 <bt_keys_find_irk+0x24>
   18c46:	bf00      	nop
   18c48:	0002f23c 	.word	0x0002f23c
   18c4c:	0002b6e9 	.word	0x0002b6e9
   18c50:	0002f20c 	.word	0x0002f20c
   18c54:	200211b8 	.word	0x200211b8
   18c58:	200211e2 	.word	0x200211e2
   18c5c:	200211f2 	.word	0x200211f2

00018c60 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18c60:	b510      	push	{r4, lr}
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   18c62:	b959      	cbnz	r1, 18c7c <bt_keys_find_addr+0x1c>
   18c64:	490c      	ldr	r1, [pc, #48]	; (18c98 <bt_keys_find_addr+0x38>)
   18c66:	480d      	ldr	r0, [pc, #52]	; (18c9c <bt_keys_find_addr+0x3c>)
   18c68:	f44f 738d 	mov.w	r3, #282	; 0x11a
   18c6c:	4a0c      	ldr	r2, [pc, #48]	; (18ca0 <bt_keys_find_addr+0x40>)
   18c6e:	f00c f856 	bl	24d1e <assert_print>
   18c72:	f44f 718d 	mov.w	r1, #282	; 0x11a
   18c76:	480a      	ldr	r0, [pc, #40]	; (18ca0 <bt_keys_find_addr+0x40>)
   18c78:	f00c f84a 	bl	24d10 <assert_post_action>

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   18c7c:	4c09      	ldr	r4, [pc, #36]	; (18ca4 <bt_keys_find_addr+0x44>)
   18c7e:	7823      	ldrb	r3, [r4, #0]
   18c80:	4283      	cmp	r3, r0
   18c82:	d104      	bne.n	18c8e <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   18c84:	2207      	movs	r2, #7
   18c86:	1c60      	adds	r0, r4, #1
   18c88:	f010 fd9f 	bl	297ca <memcmp>
   18c8c:	b108      	cbz	r0, 18c92 <bt_keys_find_addr+0x32>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   18c8e:	2000      	movs	r0, #0
}
   18c90:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   18c92:	4620      	mov	r0, r4
   18c94:	e7fc      	b.n	18c90 <bt_keys_find_addr+0x30>
   18c96:	bf00      	nop
   18c98:	0002f23c 	.word	0x0002f23c
   18c9c:	0002b6e9 	.word	0x0002b6e9
   18ca0:	0002f20c 	.word	0x0002f20c
   18ca4:	200211b8 	.word	0x200211b8

00018ca8 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
   18ca8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   18caa:	b958      	cbnz	r0, 18cc4 <bt_keys_add_type+0x1c>
   18cac:	4907      	ldr	r1, [pc, #28]	; (18ccc <bt_keys_add_type+0x24>)
   18cae:	4808      	ldr	r0, [pc, #32]	; (18cd0 <bt_keys_add_type+0x28>)
   18cb0:	f44f 7395 	mov.w	r3, #298	; 0x12a
   18cb4:	4a07      	ldr	r2, [pc, #28]	; (18cd4 <bt_keys_add_type+0x2c>)
   18cb6:	f00c f832 	bl	24d1e <assert_print>
   18cba:	f44f 7195 	mov.w	r1, #298	; 0x12a
   18cbe:	4805      	ldr	r0, [pc, #20]	; (18cd4 <bt_keys_add_type+0x2c>)
   18cc0:	f00c f826 	bl	24d10 <assert_post_action>

	keys->keys |= type;
   18cc4:	89c3      	ldrh	r3, [r0, #14]
   18cc6:	4319      	orrs	r1, r3
   18cc8:	81c1      	strh	r1, [r0, #14]
}
   18cca:	bd08      	pop	{r3, pc}
   18ccc:	0002f264 	.word	0x0002f264
   18cd0:	0002b6e9 	.word	0x0002b6e9
   18cd4:	0002f20c 	.word	0x0002f20c

00018cd8 <bt_keys_get_type>:
{
   18cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cda:	4606      	mov	r6, r0
   18cdc:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   18cde:	4615      	mov	r5, r2
   18ce0:	b94a      	cbnz	r2, 18cf6 <bt_keys_get_type+0x1e>
   18ce2:	490c      	ldr	r1, [pc, #48]	; (18d14 <bt_keys_get_type+0x3c>)
   18ce4:	480c      	ldr	r0, [pc, #48]	; (18d18 <bt_keys_get_type+0x40>)
   18ce6:	23d2      	movs	r3, #210	; 0xd2
   18ce8:	4a0c      	ldr	r2, [pc, #48]	; (18d1c <bt_keys_get_type+0x44>)
   18cea:	f00c f818 	bl	24d1e <assert_print>
   18cee:	21d2      	movs	r1, #210	; 0xd2
   18cf0:	480a      	ldr	r0, [pc, #40]	; (18d1c <bt_keys_get_type+0x44>)
   18cf2:	f00c f80d 	bl	24d10 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   18cf6:	f7ff ff2d 	bl	18b54 <bt_keys_find>
	if (keys) {
   18cfa:	4604      	mov	r4, r0
   18cfc:	b940      	cbnz	r0, 18d10 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   18cfe:	4629      	mov	r1, r5
   18d00:	4638      	mov	r0, r7
   18d02:	f7ff fecf 	bl	18aa4 <bt_keys_get_addr>
	if (!keys) {
   18d06:	4604      	mov	r4, r0
   18d08:	b110      	cbz	r0, 18d10 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   18d0a:	4631      	mov	r1, r6
   18d0c:	f7ff ffcc 	bl	18ca8 <bt_keys_add_type>
}
   18d10:	4620      	mov	r0, r4
   18d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d14:	0002f23c 	.word	0x0002f23c
   18d18:	0002b6e9 	.word	0x0002b6e9
   18d1c:	0002f20c 	.word	0x0002f20c

00018d20 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   18d20:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   18d22:	4604      	mov	r4, r0
   18d24:	b958      	cbnz	r0, 18d3e <bt_keys_clear+0x1e>
   18d26:	490c      	ldr	r1, [pc, #48]	; (18d58 <bt_keys_clear+0x38>)
   18d28:	480c      	ldr	r0, [pc, #48]	; (18d5c <bt_keys_clear+0x3c>)
   18d2a:	f240 1331 	movw	r3, #305	; 0x131
   18d2e:	4a0c      	ldr	r2, [pc, #48]	; (18d60 <bt_keys_clear+0x40>)
   18d30:	f00b fff5 	bl	24d1e <assert_print>
   18d34:	f240 1131 	movw	r1, #305	; 0x131
   18d38:	4809      	ldr	r0, [pc, #36]	; (18d60 <bt_keys_clear+0x40>)
   18d3a:	f00b ffe9 	bl	24d10 <assert_post_action>

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   18d3e:	7a03      	ldrb	r3, [r0, #8]
   18d40:	075b      	lsls	r3, r3, #29
   18d42:	d501      	bpl.n	18d48 <bt_keys_clear+0x28>
		bt_id_del(keys);
   18d44:	f7f9 ffb0 	bl	12ca8 <bt_id_del>
   18d48:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   18d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18d4e:	225c      	movs	r2, #92	; 0x5c
   18d50:	2100      	movs	r1, #0
   18d52:	f010 bd84 	b.w	2985e <memset>
   18d56:	bf00      	nop
   18d58:	0002f264 	.word	0x0002f264
   18d5c:	0002b6e9 	.word	0x0002b6e9
   18d60:	0002f20c 	.word	0x0002f20c

00018d64 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   18d64:	4288      	cmp	r0, r1
{
   18d66:	b510      	push	{r4, lr}
   18d68:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   18d6c:	d911      	bls.n	18d92 <sys_memcpy_swap+0x2e>
   18d6e:	188c      	adds	r4, r1, r2
   18d70:	42a0      	cmp	r0, r4
   18d72:	d211      	bcs.n	18d98 <sys_memcpy_swap+0x34>
   18d74:	490d      	ldr	r1, [pc, #52]	; (18dac <sys_memcpy_swap+0x48>)
   18d76:	f240 2315 	movw	r3, #533	; 0x215
   18d7a:	4a0d      	ldr	r2, [pc, #52]	; (18db0 <sys_memcpy_swap+0x4c>)
   18d7c:	480d      	ldr	r0, [pc, #52]	; (18db4 <sys_memcpy_swap+0x50>)
   18d7e:	f00b ffce 	bl	24d1e <assert_print>
   18d82:	480d      	ldr	r0, [pc, #52]	; (18db8 <sys_memcpy_swap+0x54>)
   18d84:	f00b ffcb 	bl	24d1e <assert_print>
   18d88:	f240 2115 	movw	r1, #533	; 0x215
   18d8c:	4808      	ldr	r0, [pc, #32]	; (18db0 <sys_memcpy_swap+0x4c>)
   18d8e:	f00b ffbf 	bl	24d10 <assert_post_action>
   18d92:	d0ef      	beq.n	18d74 <sys_memcpy_swap+0x10>
   18d94:	4299      	cmp	r1, r3
   18d96:	e7ec      	b.n	18d72 <sys_memcpy_swap+0xe>
	psrc += length - 1;
   18d98:	3a01      	subs	r2, #1
   18d9a:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   18d9c:	f811 2901 	ldrb.w	r2, [r1], #-1
   18da0:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   18da4:	4283      	cmp	r3, r0
   18da6:	d1f9      	bne.n	18d9c <sys_memcpy_swap+0x38>
}
   18da8:	bd10      	pop	{r4, pc}
   18daa:	bf00      	nop
   18dac:	0002e134 	.word	0x0002e134
   18db0:	0002e102 	.word	0x0002e102
   18db4:	0002b6e9 	.word	0x0002b6e9
   18db8:	0002e18b 	.word	0x0002e18b

00018dbc <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   18dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18dc0:	b09a      	sub	sp, #104	; 0x68
   18dc2:	4616      	mov	r6, r2
   18dc4:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   18dc8:	aa0c      	add	r2, sp, #48	; 0x30
{
   18dca:	4684      	mov	ip, r0
   18dcc:	468a      	mov	sl, r1
   18dce:	4690      	mov	r8, r2
   18dd0:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   18dd2:	4b2c      	ldr	r3, [pc, #176]	; (18e84 <bt_crypto_f5+0xc8>)
   18dd4:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   18dd8:	4614      	mov	r4, r2
   18dda:	6818      	ldr	r0, [r3, #0]
   18ddc:	6859      	ldr	r1, [r3, #4]
   18dde:	3308      	adds	r3, #8
   18de0:	c403      	stmia	r4!, {r0, r1}
   18de2:	4573      	cmp	r3, lr
   18de4:	4622      	mov	r2, r4
   18de6:	d1f7      	bne.n	18dd8 <bt_crypto_f5+0x1c>
   18de8:	6818      	ldr	r0, [r3, #0]
   18dea:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   18dec:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   18dee:	6020      	str	r0, [r4, #0]
   18df0:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   18df2:	2220      	movs	r2, #32
   18df4:	a804      	add	r0, sp, #16
   18df6:	f7ff ffb5 	bl	18d64 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   18dfa:	466b      	mov	r3, sp
   18dfc:	2220      	movs	r2, #32
   18dfe:	4822      	ldr	r0, [pc, #136]	; (18e88 <bt_crypto_f5+0xcc>)
   18e00:	a904      	add	r1, sp, #16
   18e02:	f00e fec4 	bl	27b8e <bt_crypto_aes_cmac>
	if (err) {
   18e06:	4604      	mov	r4, r0
   18e08:	bbc0      	cbnz	r0, 18e7c <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   18e0a:	2210      	movs	r2, #16
   18e0c:	4651      	mov	r1, sl
   18e0e:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   18e12:	f7ff ffa7 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   18e16:	2210      	movs	r2, #16
   18e18:	4631      	mov	r1, r6
   18e1a:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   18e1e:	f7ff ffa1 	bl	18d64 <sys_memcpy_swap>
	m[37] = a1->type;
   18e22:	4629      	mov	r1, r5
   18e24:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18e28:	2206      	movs	r2, #6
   18e2a:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   18e2e:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18e32:	f7ff ff97 	bl	18d64 <sys_memcpy_swap>
	m[44] = a2->type;
   18e36:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18e38:	2206      	movs	r2, #6
	m[44] = a2->type;
   18e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18e3e:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   18e42:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18e46:	f7ff ff8d 	bl	18d64 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   18e4a:	464b      	mov	r3, r9
   18e4c:	2235      	movs	r2, #53	; 0x35
   18e4e:	4641      	mov	r1, r8
   18e50:	4668      	mov	r0, sp
   18e52:	f00e fe9c 	bl	27b8e <bt_crypto_aes_cmac>
	if (err) {
   18e56:	4604      	mov	r4, r0
   18e58:	b980      	cbnz	r0, 18e7c <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   18e5a:	4648      	mov	r0, r9
   18e5c:	f00e fe89 	bl	27b72 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   18e60:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   18e62:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   18e64:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   18e68:	4641      	mov	r1, r8
   18e6a:	463b      	mov	r3, r7
   18e6c:	4668      	mov	r0, sp
   18e6e:	f00e fe8e 	bl	27b8e <bt_crypto_aes_cmac>
	if (err) {
   18e72:	4604      	mov	r4, r0
   18e74:	b910      	cbnz	r0, 18e7c <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   18e76:	4638      	mov	r0, r7
   18e78:	f00e fe7b 	bl	27b72 <sys_mem_swap.constprop.0>

	return 0;
}
   18e7c:	4620      	mov	r0, r4
   18e7e:	b01a      	add	sp, #104	; 0x68
   18e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e84:	0002a8cc 	.word	0x0002a8cc
   18e88:	0002f280 	.word	0x0002f280

00018e8c <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   18e8c:	b570      	push	{r4, r5, r6, lr}
   18e8e:	460e      	mov	r6, r1
   18e90:	461d      	mov	r5, r3
   18e92:	4614      	mov	r4, r2
   18e94:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   18e96:	4601      	mov	r1, r0
   18e98:	2220      	movs	r2, #32
   18e9a:	a804      	add	r0, sp, #16
   18e9c:	f7ff ff62 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   18ea0:	2220      	movs	r2, #32
   18ea2:	4631      	mov	r1, r6
   18ea4:	a80c      	add	r0, sp, #48	; 0x30
   18ea6:	f7ff ff5d 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   18eaa:	2210      	movs	r2, #16
   18eac:	4629      	mov	r1, r5
   18eae:	a814      	add	r0, sp, #80	; 0x50
   18eb0:	f7ff ff58 	bl	18d64 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   18eb4:	2210      	movs	r2, #16
   18eb6:	4621      	mov	r1, r4
   18eb8:	4668      	mov	r0, sp
   18eba:	f7ff ff53 	bl	18d64 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   18ebe:	466b      	mov	r3, sp
   18ec0:	2250      	movs	r2, #80	; 0x50
   18ec2:	4618      	mov	r0, r3
   18ec4:	a904      	add	r1, sp, #16
   18ec6:	f00e fe62 	bl	27b8e <bt_crypto_aes_cmac>
	if (err) {
   18eca:	b940      	cbnz	r0, 18ede <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   18ecc:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18ece:	4a05      	ldr	r2, [pc, #20]	; (18ee4 <bt_crypto_g2+0x58>)
   18ed0:	ba1b      	rev	r3, r3
   18ed2:	fbb3 f1f2 	udiv	r1, r3, r2
   18ed6:	fb02 3311 	mls	r3, r2, r1, r3
   18eda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   18edc:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   18ede:	b018      	add	sp, #96	; 0x60
   18ee0:	bd70      	pop	{r4, r5, r6, pc}
   18ee2:	bf00      	nop
   18ee4:	000f4240 	.word	0x000f4240

00018ee8 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   18ee8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   18eea:	4804      	ldr	r0, [pc, #16]	; (18efc <fs_init+0x14>)
   18eec:	f010 fa94 	bl	29418 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   18ef0:	4b03      	ldr	r3, [pc, #12]	; (18f00 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   18ef2:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   18ef4:	e9c3 3300 	strd	r3, r3, [r3]
   18ef8:	bd08      	pop	{r3, pc}
   18efa:	bf00      	nop
   18efc:	20021214 	.word	0x20021214
   18f00:	20021228 	.word	0x20021228

00018f04 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18f04:	2234      	movs	r2, #52	; 0x34
   18f06:	4b02      	ldr	r3, [pc, #8]	; (18f10 <net_buf_pool_get+0xc>)
   18f08:	fb02 3000 	mla	r0, r2, r0, r3
   18f0c:	4770      	bx	lr
   18f0e:	bf00      	nop
   18f10:	20008c04 	.word	0x20008c04

00018f14 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18f14:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18f16:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18f18:	4b06      	ldr	r3, [pc, #24]	; (18f34 <net_buf_id+0x20>)
   18f1a:	fb01 3302 	mla	r3, r1, r2, r3
   18f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18f24:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18f26:	331b      	adds	r3, #27
   18f28:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   18f2c:	fbb0 f0f3 	udiv	r0, r0, r3
   18f30:	4770      	bx	lr
   18f32:	bf00      	nop
   18f34:	20008c04 	.word	0x20008c04

00018f38 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   18f38:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18f3a:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18f3c:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18f3e:	4b09      	ldr	r3, [pc, #36]	; (18f64 <fixed_data_alloc+0x2c>)
   18f40:	fb04 3302 	mla	r3, r4, r2, r3
   18f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   18f46:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18f48:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   18f4a:	681a      	ldr	r2, [r3, #0]
   18f4c:	4294      	cmp	r4, r2
   18f4e:	bf94      	ite	ls
   18f50:	600c      	strls	r4, [r1, #0]
   18f52:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   18f54:	e9d3 5400 	ldrd	r5, r4, [r3]
   18f58:	f7ff ffdc 	bl	18f14 <net_buf_id>
}
   18f5c:	fb05 4000 	mla	r0, r5, r0, r4
   18f60:	bd38      	pop	{r3, r4, r5, pc}
   18f62:	bf00      	nop
   18f64:	20008c04 	.word	0x20008c04

00018f68 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   18f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f6c:	b085      	sub	sp, #20
   18f6e:	9103      	str	r1, [sp, #12]
   18f70:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18f72:	4619      	mov	r1, r3
   18f74:	4610      	mov	r0, r2
{
   18f76:	4692      	mov	sl, r2
   18f78:	4699      	mov	r9, r3
   18f7a:	4690      	mov	r8, r2
   18f7c:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18f7e:	f010 fb2f 	bl	295e0 <sys_clock_timeout_end_calc>
   18f82:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   18f86:	b945      	cbnz	r5, 18f9a <net_buf_alloc_len+0x32>
   18f88:	4966      	ldr	r1, [pc, #408]	; (19124 <net_buf_alloc_len+0x1bc>)
   18f8a:	23f4      	movs	r3, #244	; 0xf4
   18f8c:	4a66      	ldr	r2, [pc, #408]	; (19128 <net_buf_alloc_len+0x1c0>)
   18f8e:	4867      	ldr	r0, [pc, #412]	; (1912c <net_buf_alloc_len+0x1c4>)
   18f90:	f00b fec5 	bl	24d1e <assert_print>
   18f94:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   18f96:	4864      	ldr	r0, [pc, #400]	; (19128 <net_buf_alloc_len+0x1c0>)
   18f98:	e019      	b.n	18fce <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   18f9a:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   18f9e:	f04f 0320 	mov.w	r3, #32
   18fa2:	f3ef 8b11 	mrs	fp, BASEPRI
   18fa6:	f383 8812 	msr	BASEPRI_MAX, r3
   18faa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fae:	4630      	mov	r0, r6
   18fb0:	f006 fc88 	bl	1f8c4 <z_spin_lock_valid>
   18fb4:	b968      	cbnz	r0, 18fd2 <net_buf_alloc_len+0x6a>
   18fb6:	2394      	movs	r3, #148	; 0x94
   18fb8:	4a5d      	ldr	r2, [pc, #372]	; (19130 <net_buf_alloc_len+0x1c8>)
   18fba:	495e      	ldr	r1, [pc, #376]	; (19134 <net_buf_alloc_len+0x1cc>)
   18fbc:	485b      	ldr	r0, [pc, #364]	; (1912c <net_buf_alloc_len+0x1c4>)
   18fbe:	f00b feae 	bl	24d1e <assert_print>
   18fc2:	4631      	mov	r1, r6
   18fc4:	485c      	ldr	r0, [pc, #368]	; (19138 <net_buf_alloc_len+0x1d0>)
   18fc6:	f00b feaa 	bl	24d1e <assert_print>
   18fca:	2194      	movs	r1, #148	; 0x94
   18fcc:	4858      	ldr	r0, [pc, #352]	; (19130 <net_buf_alloc_len+0x1c8>)
   18fce:	f00b fe9f 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   18fd2:	4630      	mov	r0, r6
   18fd4:	f006 fc92 	bl	1f8fc <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   18fd8:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   18fda:	2b00      	cmp	r3, #0
   18fdc:	d070      	beq.n	190c0 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   18fde:	8c2a      	ldrh	r2, [r5, #32]
   18fe0:	429a      	cmp	r2, r3
   18fe2:	d94d      	bls.n	19080 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   18fe4:	2200      	movs	r2, #0
   18fe6:	2300      	movs	r3, #0
   18fe8:	4628      	mov	r0, r5
   18fea:	f006 feb9 	bl	1fd60 <z_impl_k_queue_get>
			if (buf) {
   18fee:	4604      	mov	r4, r0
   18ff0:	2800      	cmp	r0, #0
   18ff2:	d045      	beq.n	19080 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ff4:	4630      	mov	r0, r6
   18ff6:	f006 fc73 	bl	1f8e0 <z_spin_unlock_valid>
   18ffa:	b958      	cbnz	r0, 19014 <net_buf_alloc_len+0xac>
   18ffc:	23c2      	movs	r3, #194	; 0xc2
   18ffe:	4a4c      	ldr	r2, [pc, #304]	; (19130 <net_buf_alloc_len+0x1c8>)
   19000:	494e      	ldr	r1, [pc, #312]	; (1913c <net_buf_alloc_len+0x1d4>)
   19002:	484a      	ldr	r0, [pc, #296]	; (1912c <net_buf_alloc_len+0x1c4>)
   19004:	f00b fe8b 	bl	24d1e <assert_print>
   19008:	4631      	mov	r1, r6
   1900a:	484d      	ldr	r0, [pc, #308]	; (19140 <net_buf_alloc_len+0x1d8>)
   1900c:	f00b fe87 	bl	24d1e <assert_print>
   19010:	21c2      	movs	r1, #194	; 0xc2
   19012:	e7db      	b.n	18fcc <net_buf_alloc_len+0x64>
	__asm__ volatile(
   19014:	f38b 8811 	msr	BASEPRI, fp
   19018:	f3bf 8f6f 	isb	sy
	if (size) {
   1901c:	9d03      	ldr	r5, [sp, #12]
   1901e:	2d00      	cmp	r5, #0
   19020:	d074      	beq.n	1910c <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19022:	ea59 030a 	orrs.w	r3, r9, sl
   19026:	d012      	beq.n	1904e <net_buf_alloc_len+0xe6>
   19028:	f1b9 3fff 	cmp.w	r9, #4294967295
   1902c:	bf08      	it	eq
   1902e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   19032:	d00c      	beq.n	1904e <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   19034:	f009 fa14 	bl	22460 <sys_clock_tick_get>
   19038:	9b01      	ldr	r3, [sp, #4]
   1903a:	ebb3 0800 	subs.w	r8, r3, r0
   1903e:	9b02      	ldr	r3, [sp, #8]
   19040:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   19044:	2f00      	cmp	r7, #0
   19046:	bfbc      	itt	lt
   19048:	f04f 0800 	movlt.w	r8, #0
   1904c:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1904e:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19052:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19054:	4e3b      	ldr	r6, [pc, #236]	; (19144 <net_buf_alloc_len+0x1dc>)
   19056:	4642      	mov	r2, r8
   19058:	fb09 6303 	mla	r3, r9, r3, r6
   1905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1905e:	4620      	mov	r0, r4
   19060:	681b      	ldr	r3, [r3, #0]
   19062:	a903      	add	r1, sp, #12
   19064:	f8d3 a000 	ldr.w	sl, [r3]
   19068:	463b      	mov	r3, r7
   1906a:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1906c:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1906e:	2800      	cmp	r0, #0
   19070:	d13c      	bne.n	190ec <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   19072:	7aa0      	ldrb	r0, [r4, #10]
   19074:	4621      	mov	r1, r4
   19076:	fb00 6009 	mla	r0, r0, r9, r6
   1907a:	f010 f9f8 	bl	2946e <k_queue_prepend>
}
   1907e:	e030      	b.n	190e2 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   19080:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   19082:	4630      	mov	r0, r6
   19084:	1e63      	subs	r3, r4, #1
   19086:	846b      	strh	r3, [r5, #34]	; 0x22
   19088:	f006 fc2a 	bl	1f8e0 <z_spin_unlock_valid>
   1908c:	2800      	cmp	r0, #0
   1908e:	d0b5      	beq.n	18ffc <net_buf_alloc_len+0x94>
   19090:	f38b 8811 	msr	BASEPRI, fp
   19094:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19098:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1909c:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1909e:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   190a0:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   190a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   190a4:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   190a8:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   190ac:	4b25      	ldr	r3, [pc, #148]	; (19144 <net_buf_alloc_len+0x1dc>)
   190ae:	4a26      	ldr	r2, [pc, #152]	; (19148 <net_buf_alloc_len+0x1e0>)
   190b0:	1aeb      	subs	r3, r5, r3
   190b2:	109b      	asrs	r3, r3, #2
   190b4:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   190b6:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   190b8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   190bc:	72e3      	strb	r3, [r4, #11]
		goto success;
   190be:	e7ad      	b.n	1901c <net_buf_alloc_len+0xb4>
   190c0:	4630      	mov	r0, r6
   190c2:	f006 fc0d 	bl	1f8e0 <z_spin_unlock_valid>
   190c6:	2800      	cmp	r0, #0
   190c8:	d098      	beq.n	18ffc <net_buf_alloc_len+0x94>
   190ca:	f38b 8811 	msr	BASEPRI, fp
   190ce:	f3bf 8f6f 	isb	sy
   190d2:	4652      	mov	r2, sl
   190d4:	464b      	mov	r3, r9
   190d6:	4628      	mov	r0, r5
   190d8:	f006 fe42 	bl	1fd60 <z_impl_k_queue_get>
	if (!buf) {
   190dc:	4604      	mov	r4, r0
   190de:	2800      	cmp	r0, #0
   190e0:	d19c      	bne.n	1901c <net_buf_alloc_len+0xb4>
		return NULL;
   190e2:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   190e4:	4620      	mov	r0, r4
   190e6:	b005      	add	sp, #20
   190e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   190ec:	9b03      	ldr	r3, [sp, #12]
   190ee:	429d      	cmp	r5, r3
   190f0:	d90d      	bls.n	1910e <net_buf_alloc_len+0x1a6>
   190f2:	4916      	ldr	r1, [pc, #88]	; (1914c <net_buf_alloc_len+0x1e4>)
   190f4:	f240 1355 	movw	r3, #341	; 0x155
   190f8:	4a0b      	ldr	r2, [pc, #44]	; (19128 <net_buf_alloc_len+0x1c0>)
   190fa:	480c      	ldr	r0, [pc, #48]	; (1912c <net_buf_alloc_len+0x1c4>)
   190fc:	f00b fe0f 	bl	24d1e <assert_print>
   19100:	4813      	ldr	r0, [pc, #76]	; (19150 <net_buf_alloc_len+0x1e8>)
   19102:	f00b fe0c 	bl	24d1e <assert_print>
   19106:	f240 1155 	movw	r1, #341	; 0x155
   1910a:	e744      	b.n	18f96 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1910c:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1910e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19110:	2201      	movs	r2, #1
	buf->frags = NULL;
   19112:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   19114:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   19116:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   19118:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1911a:	6963      	ldr	r3, [r4, #20]
   1911c:	8262      	strh	r2, [r4, #18]
   1911e:	60e3      	str	r3, [r4, #12]
}
   19120:	e7e0      	b.n	190e4 <net_buf_alloc_len+0x17c>
   19122:	bf00      	nop
   19124:	0002f2ec 	.word	0x0002f2ec
   19128:	0002f29d 	.word	0x0002f29d
   1912c:	0002b6e9 	.word	0x0002b6e9
   19130:	0002c4fc 	.word	0x0002c4fc
   19134:	0002c555 	.word	0x0002c555
   19138:	0002c56a 	.word	0x0002c56a
   1913c:	0002c529 	.word	0x0002c529
   19140:	0002c540 	.word	0x0002c540
   19144:	20008c04 	.word	0x20008c04
   19148:	c4ec4ec5 	.word	0xc4ec4ec5
   1914c:	0002f2f1 	.word	0x0002f2f1
   19150:	0002f302 	.word	0x0002f302

00019154 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   19154:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   19156:	b958      	cbnz	r0, 19170 <net_buf_simple_reserve+0x1c>
   19158:	490d      	ldr	r1, [pc, #52]	; (19190 <net_buf_simple_reserve+0x3c>)
   1915a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1915e:	4a0d      	ldr	r2, [pc, #52]	; (19194 <net_buf_simple_reserve+0x40>)
   19160:	480d      	ldr	r0, [pc, #52]	; (19198 <net_buf_simple_reserve+0x44>)
   19162:	f00b fddc 	bl	24d1e <assert_print>
   19166:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1916a:	480a      	ldr	r0, [pc, #40]	; (19194 <net_buf_simple_reserve+0x40>)
   1916c:	f00b fdd0 	bl	24d10 <assert_post_action>
   19170:	8883      	ldrh	r3, [r0, #4]
   19172:	b14b      	cbz	r3, 19188 <net_buf_simple_reserve+0x34>
   19174:	4909      	ldr	r1, [pc, #36]	; (1919c <net_buf_simple_reserve+0x48>)
   19176:	f240 13b9 	movw	r3, #441	; 0x1b9
   1917a:	4a06      	ldr	r2, [pc, #24]	; (19194 <net_buf_simple_reserve+0x40>)
   1917c:	4806      	ldr	r0, [pc, #24]	; (19198 <net_buf_simple_reserve+0x44>)
   1917e:	f00b fdce 	bl	24d1e <assert_print>
   19182:	f240 11b9 	movw	r1, #441	; 0x1b9
   19186:	e7f0      	b.n	1916a <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   19188:	6883      	ldr	r3, [r0, #8]
   1918a:	440b      	add	r3, r1
   1918c:	6003      	str	r3, [r0, #0]
}
   1918e:	bd08      	pop	{r3, pc}
   19190:	0002f381 	.word	0x0002f381
   19194:	0002f29d 	.word	0x0002f29d
   19198:	0002b6e9 	.word	0x0002b6e9
   1919c:	0002f305 	.word	0x0002f305

000191a0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   191a0:	b570      	push	{r4, r5, r6, lr}
   191a2:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   191a4:	4605      	mov	r5, r0
   191a6:	b958      	cbnz	r0, 191c0 <net_buf_slist_put+0x20>
   191a8:	4928      	ldr	r1, [pc, #160]	; (1924c <net_buf_slist_put+0xac>)
   191aa:	f240 13c5 	movw	r3, #453	; 0x1c5
   191ae:	4a28      	ldr	r2, [pc, #160]	; (19250 <net_buf_slist_put+0xb0>)
   191b0:	4828      	ldr	r0, [pc, #160]	; (19254 <net_buf_slist_put+0xb4>)
   191b2:	f00b fdb4 	bl	24d1e <assert_print>
   191b6:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   191ba:	4825      	ldr	r0, [pc, #148]	; (19250 <net_buf_slist_put+0xb0>)
   191bc:	f00b fda8 	bl	24d10 <assert_post_action>
   191c0:	b949      	cbnz	r1, 191d6 <net_buf_slist_put+0x36>
   191c2:	4925      	ldr	r1, [pc, #148]	; (19258 <net_buf_slist_put+0xb8>)
   191c4:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   191c8:	4a21      	ldr	r2, [pc, #132]	; (19250 <net_buf_slist_put+0xb0>)
   191ca:	4822      	ldr	r0, [pc, #136]	; (19254 <net_buf_slist_put+0xb4>)
   191cc:	f00b fda7 	bl	24d1e <assert_print>
   191d0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   191d4:	e7f1      	b.n	191ba <net_buf_slist_put+0x1a>
	__asm__ volatile(
   191d6:	f04f 0320 	mov.w	r3, #32
   191da:	f3ef 8611 	mrs	r6, BASEPRI
   191de:	f383 8812 	msr	BASEPRI_MAX, r3
   191e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   191e6:	481d      	ldr	r0, [pc, #116]	; (1925c <net_buf_slist_put+0xbc>)
   191e8:	f006 fb6c 	bl	1f8c4 <z_spin_lock_valid>
   191ec:	b960      	cbnz	r0, 19208 <net_buf_slist_put+0x68>
   191ee:	2394      	movs	r3, #148	; 0x94
   191f0:	4a1b      	ldr	r2, [pc, #108]	; (19260 <net_buf_slist_put+0xc0>)
   191f2:	491c      	ldr	r1, [pc, #112]	; (19264 <net_buf_slist_put+0xc4>)
   191f4:	4817      	ldr	r0, [pc, #92]	; (19254 <net_buf_slist_put+0xb4>)
   191f6:	f00b fd92 	bl	24d1e <assert_print>
   191fa:	4918      	ldr	r1, [pc, #96]	; (1925c <net_buf_slist_put+0xbc>)
   191fc:	481a      	ldr	r0, [pc, #104]	; (19268 <net_buf_slist_put+0xc8>)
   191fe:	f00b fd8e 	bl	24d1e <assert_print>
   19202:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19204:	4816      	ldr	r0, [pc, #88]	; (19260 <net_buf_slist_put+0xc0>)
   19206:	e7d9      	b.n	191bc <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   19208:	4814      	ldr	r0, [pc, #80]	; (1925c <net_buf_slist_put+0xbc>)
   1920a:	f006 fb77 	bl	1f8fc <z_spin_lock_set_owner>
	parent->next = child;
   1920e:	2300      	movs	r3, #0
   19210:	6023      	str	r3, [r4, #0]
	return list->tail;
   19212:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   19214:	b98b      	cbnz	r3, 1923a <net_buf_slist_put+0x9a>
	list->head = node;
   19216:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1921a:	4810      	ldr	r0, [pc, #64]	; (1925c <net_buf_slist_put+0xbc>)
   1921c:	f006 fb60 	bl	1f8e0 <z_spin_unlock_valid>
   19220:	b970      	cbnz	r0, 19240 <net_buf_slist_put+0xa0>
   19222:	23c2      	movs	r3, #194	; 0xc2
   19224:	4a0e      	ldr	r2, [pc, #56]	; (19260 <net_buf_slist_put+0xc0>)
   19226:	4911      	ldr	r1, [pc, #68]	; (1926c <net_buf_slist_put+0xcc>)
   19228:	480a      	ldr	r0, [pc, #40]	; (19254 <net_buf_slist_put+0xb4>)
   1922a:	f00b fd78 	bl	24d1e <assert_print>
   1922e:	490b      	ldr	r1, [pc, #44]	; (1925c <net_buf_slist_put+0xbc>)
   19230:	480f      	ldr	r0, [pc, #60]	; (19270 <net_buf_slist_put+0xd0>)
   19232:	f00b fd74 	bl	24d1e <assert_print>
   19236:	21c2      	movs	r1, #194	; 0xc2
   19238:	e7e4      	b.n	19204 <net_buf_slist_put+0x64>
	parent->next = child;
   1923a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1923c:	606c      	str	r4, [r5, #4]
}
   1923e:	e7ec      	b.n	1921a <net_buf_slist_put+0x7a>
	__asm__ volatile(
   19240:	f386 8811 	msr	BASEPRI, r6
   19244:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   19248:	bd70      	pop	{r4, r5, r6, pc}
   1924a:	bf00      	nop
   1924c:	0002dea0 	.word	0x0002dea0
   19250:	0002f29d 	.word	0x0002f29d
   19254:	0002b6e9 	.word	0x0002b6e9
   19258:	0002f381 	.word	0x0002f381
   1925c:	20021230 	.word	0x20021230
   19260:	0002c4fc 	.word	0x0002c4fc
   19264:	0002c555 	.word	0x0002c555
   19268:	0002c56a 	.word	0x0002c56a
   1926c:	0002c529 	.word	0x0002c529
   19270:	0002c540 	.word	0x0002c540

00019274 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   19274:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   19276:	4604      	mov	r4, r0
   19278:	b958      	cbnz	r0, 19292 <net_buf_slist_get+0x1e>
   1927a:	4923      	ldr	r1, [pc, #140]	; (19308 <net_buf_slist_get+0x94>)
   1927c:	4823      	ldr	r0, [pc, #140]	; (1930c <net_buf_slist_get+0x98>)
   1927e:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   19282:	4a23      	ldr	r2, [pc, #140]	; (19310 <net_buf_slist_get+0x9c>)
   19284:	f00b fd4b 	bl	24d1e <assert_print>
   19288:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1928c:	4820      	ldr	r0, [pc, #128]	; (19310 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1928e:	f00b fd3f 	bl	24d10 <assert_post_action>
	__asm__ volatile(
   19292:	f04f 0320 	mov.w	r3, #32
   19296:	f3ef 8611 	mrs	r6, BASEPRI
   1929a:	f383 8812 	msr	BASEPRI_MAX, r3
   1929e:	f3bf 8f6f 	isb	sy
   192a2:	481c      	ldr	r0, [pc, #112]	; (19314 <net_buf_slist_get+0xa0>)
   192a4:	f006 fb0e 	bl	1f8c4 <z_spin_lock_valid>
   192a8:	b960      	cbnz	r0, 192c4 <net_buf_slist_get+0x50>
   192aa:	2394      	movs	r3, #148	; 0x94
   192ac:	4a1a      	ldr	r2, [pc, #104]	; (19318 <net_buf_slist_get+0xa4>)
   192ae:	491b      	ldr	r1, [pc, #108]	; (1931c <net_buf_slist_get+0xa8>)
   192b0:	4816      	ldr	r0, [pc, #88]	; (1930c <net_buf_slist_get+0x98>)
   192b2:	f00b fd34 	bl	24d1e <assert_print>
   192b6:	4917      	ldr	r1, [pc, #92]	; (19314 <net_buf_slist_get+0xa0>)
   192b8:	4819      	ldr	r0, [pc, #100]	; (19320 <net_buf_slist_get+0xac>)
   192ba:	f00b fd30 	bl	24d1e <assert_print>
   192be:	2194      	movs	r1, #148	; 0x94
   192c0:	4815      	ldr	r0, [pc, #84]	; (19318 <net_buf_slist_get+0xa4>)
   192c2:	e7e4      	b.n	1928e <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   192c4:	4813      	ldr	r0, [pc, #76]	; (19314 <net_buf_slist_get+0xa0>)
   192c6:	f006 fb19 	bl	1f8fc <z_spin_lock_set_owner>
	return list->head;
   192ca:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   192cc:	b12d      	cbz	r5, 192da <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   192ce:	6862      	ldr	r2, [r4, #4]
	return node->next;
   192d0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   192d2:	4295      	cmp	r5, r2
	list->head = node;
   192d4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   192d6:	bf08      	it	eq
   192d8:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   192da:	480e      	ldr	r0, [pc, #56]	; (19314 <net_buf_slist_get+0xa0>)
   192dc:	f006 fb00 	bl	1f8e0 <z_spin_unlock_valid>
   192e0:	b958      	cbnz	r0, 192fa <net_buf_slist_get+0x86>
   192e2:	23c2      	movs	r3, #194	; 0xc2
   192e4:	4a0c      	ldr	r2, [pc, #48]	; (19318 <net_buf_slist_get+0xa4>)
   192e6:	490f      	ldr	r1, [pc, #60]	; (19324 <net_buf_slist_get+0xb0>)
   192e8:	4808      	ldr	r0, [pc, #32]	; (1930c <net_buf_slist_get+0x98>)
   192ea:	f00b fd18 	bl	24d1e <assert_print>
   192ee:	4909      	ldr	r1, [pc, #36]	; (19314 <net_buf_slist_get+0xa0>)
   192f0:	480d      	ldr	r0, [pc, #52]	; (19328 <net_buf_slist_get+0xb4>)
   192f2:	f00b fd14 	bl	24d1e <assert_print>
   192f6:	21c2      	movs	r1, #194	; 0xc2
   192f8:	e7e2      	b.n	192c0 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   192fa:	f386 8811 	msr	BASEPRI, r6
   192fe:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   19302:	4628      	mov	r0, r5
   19304:	bd70      	pop	{r4, r5, r6, pc}
   19306:	bf00      	nop
   19308:	0002dea0 	.word	0x0002dea0
   1930c:	0002b6e9 	.word	0x0002b6e9
   19310:	0002f29d 	.word	0x0002f29d
   19314:	20021230 	.word	0x20021230
   19318:	0002c4fc 	.word	0x0002c4fc
   1931c:	0002c555 	.word	0x0002c555
   19320:	0002c56a 	.word	0x0002c56a
   19324:	0002c529 	.word	0x0002c529
   19328:	0002c540 	.word	0x0002c540

0001932c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1932c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1932e:	b958      	cbnz	r0, 19348 <net_buf_put+0x1c>
   19330:	490d      	ldr	r1, [pc, #52]	; (19368 <net_buf_put+0x3c>)
   19332:	f240 13df 	movw	r3, #479	; 0x1df
   19336:	4a0d      	ldr	r2, [pc, #52]	; (1936c <net_buf_put+0x40>)
   19338:	480d      	ldr	r0, [pc, #52]	; (19370 <net_buf_put+0x44>)
   1933a:	f00b fcf0 	bl	24d1e <assert_print>
   1933e:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   19342:	480a      	ldr	r0, [pc, #40]	; (1936c <net_buf_put+0x40>)
   19344:	f00b fce4 	bl	24d10 <assert_post_action>
   19348:	b949      	cbnz	r1, 1935e <net_buf_put+0x32>
   1934a:	490a      	ldr	r1, [pc, #40]	; (19374 <net_buf_put+0x48>)
   1934c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   19350:	4a06      	ldr	r2, [pc, #24]	; (1936c <net_buf_put+0x40>)
   19352:	4807      	ldr	r0, [pc, #28]	; (19370 <net_buf_put+0x44>)
   19354:	f00b fce3 	bl	24d1e <assert_print>
   19358:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1935c:	e7f1      	b.n	19342 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1935e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   19362:	f010 b879 	b.w	29458 <k_queue_append>
   19366:	bf00      	nop
   19368:	0002f314 	.word	0x0002f314
   1936c:	0002f29d 	.word	0x0002f29d
   19370:	0002b6e9 	.word	0x0002b6e9
   19374:	0002f381 	.word	0x0002f381

00019378 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1937c:	4605      	mov	r5, r0
   1937e:	b328      	cbz	r0, 193cc <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19380:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   19382:	f04f 0834 	mov.w	r8, #52	; 0x34
   19386:	4e1a      	ldr	r6, [pc, #104]	; (193f0 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   19388:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1938a:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1938c:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1938e:	3b01      	subs	r3, #1
   19390:	b2db      	uxtb	r3, r3
   19392:	7223      	strb	r3, [r4, #8]
   19394:	b9c3      	cbnz	r3, 193c8 <net_buf_unref+0x50>
		if (buf->__buf) {
   19396:	6961      	ldr	r1, [r4, #20]
   19398:	b159      	cbz	r1, 193b2 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1939a:	7a63      	ldrb	r3, [r4, #9]
   1939c:	07db      	lsls	r3, r3, #31
   1939e:	d407      	bmi.n	193b0 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   193a0:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   193a2:	4620      	mov	r0, r4
   193a4:	fb08 6303 	mla	r3, r8, r3, r6
   193a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   193aa:	681b      	ldr	r3, [r3, #0]
   193ac:	689b      	ldr	r3, [r3, #8]
   193ae:	4798      	blx	r3
			buf->__buf = NULL;
   193b0:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   193b2:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   193b4:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   193b6:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   193ba:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   193bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   193be:	b18b      	cbz	r3, 193e4 <net_buf_unref+0x6c>
			pool->destroy(buf);
   193c0:	4620      	mov	r0, r4
   193c2:	4798      	blx	r3
	while (buf) {
   193c4:	2d00      	cmp	r5, #0
   193c6:	d1df      	bne.n	19388 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   193c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   193cc:	4909      	ldr	r1, [pc, #36]	; (193f4 <net_buf_unref+0x7c>)
   193ce:	480a      	ldr	r0, [pc, #40]	; (193f8 <net_buf_unref+0x80>)
   193d0:	f240 13eb 	movw	r3, #491	; 0x1eb
   193d4:	4a09      	ldr	r2, [pc, #36]	; (193fc <net_buf_unref+0x84>)
   193d6:	f00b fca2 	bl	24d1e <assert_print>
   193da:	f240 11eb 	movw	r1, #491	; 0x1eb
   193de:	4807      	ldr	r0, [pc, #28]	; (193fc <net_buf_unref+0x84>)
   193e0:	f00b fc96 	bl	24d10 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   193e4:	4621      	mov	r1, r4
   193e6:	fb00 6008 	mla	r0, r0, r8, r6
   193ea:	f010 f840 	bl	2946e <k_queue_prepend>
}
   193ee:	e7e9      	b.n	193c4 <net_buf_unref+0x4c>
   193f0:	20008c04 	.word	0x20008c04
   193f4:	0002f381 	.word	0x0002f381
   193f8:	0002b6e9 	.word	0x0002b6e9
   193fc:	0002f29d 	.word	0x0002f29d

00019400 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   19400:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   19402:	b958      	cbnz	r0, 1941c <net_buf_ref+0x1c>
   19404:	4907      	ldr	r1, [pc, #28]	; (19424 <net_buf_ref+0x24>)
   19406:	4808      	ldr	r0, [pc, #32]	; (19428 <net_buf_ref+0x28>)
   19408:	f240 231a 	movw	r3, #538	; 0x21a
   1940c:	4a07      	ldr	r2, [pc, #28]	; (1942c <net_buf_ref+0x2c>)
   1940e:	f00b fc86 	bl	24d1e <assert_print>
   19412:	f240 211a 	movw	r1, #538	; 0x21a
   19416:	4805      	ldr	r0, [pc, #20]	; (1942c <net_buf_ref+0x2c>)
   19418:	f00b fc7a 	bl	24d10 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1941c:	7a02      	ldrb	r2, [r0, #8]
   1941e:	3201      	adds	r2, #1
   19420:	7202      	strb	r2, [r0, #8]
	return buf;
}
   19422:	bd08      	pop	{r3, pc}
   19424:	0002f381 	.word	0x0002f381
   19428:	0002b6e9 	.word	0x0002b6e9
   1942c:	0002f29d 	.word	0x0002f29d

00019430 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   19430:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   19432:	4603      	mov	r3, r0
   19434:	b958      	cbnz	r0, 1944e <net_buf_frag_last+0x1e>
   19436:	4908      	ldr	r1, [pc, #32]	; (19458 <net_buf_frag_last+0x28>)
   19438:	4808      	ldr	r0, [pc, #32]	; (1945c <net_buf_frag_last+0x2c>)
   1943a:	f240 2357 	movw	r3, #599	; 0x257
   1943e:	4a08      	ldr	r2, [pc, #32]	; (19460 <net_buf_frag_last+0x30>)
   19440:	f00b fc6d 	bl	24d1e <assert_print>
   19444:	f240 2157 	movw	r1, #599	; 0x257
   19448:	4805      	ldr	r0, [pc, #20]	; (19460 <net_buf_frag_last+0x30>)
   1944a:	f00b fc61 	bl	24d10 <assert_post_action>

	while (buf->frags) {
   1944e:	4618      	mov	r0, r3
   19450:	685b      	ldr	r3, [r3, #4]
   19452:	2b00      	cmp	r3, #0
   19454:	d1fb      	bne.n	1944e <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   19456:	bd08      	pop	{r3, pc}
   19458:	0002f381 	.word	0x0002f381
   1945c:	0002b6e9 	.word	0x0002b6e9
   19460:	0002f29d 	.word	0x0002f29d

00019464 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   19464:	b570      	push	{r4, r5, r6, lr}
   19466:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   19468:	4604      	mov	r4, r0
   1946a:	b958      	cbnz	r0, 19484 <net_buf_frag_insert+0x20>
   1946c:	490f      	ldr	r1, [pc, #60]	; (194ac <net_buf_frag_insert+0x48>)
   1946e:	f240 2362 	movw	r3, #610	; 0x262
   19472:	4a0f      	ldr	r2, [pc, #60]	; (194b0 <net_buf_frag_insert+0x4c>)
   19474:	480f      	ldr	r0, [pc, #60]	; (194b4 <net_buf_frag_insert+0x50>)
   19476:	f00b fc52 	bl	24d1e <assert_print>
   1947a:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1947e:	480c      	ldr	r0, [pc, #48]	; (194b0 <net_buf_frag_insert+0x4c>)
   19480:	f00b fc46 	bl	24d10 <assert_post_action>
   19484:	b949      	cbnz	r1, 1949a <net_buf_frag_insert+0x36>
   19486:	490c      	ldr	r1, [pc, #48]	; (194b8 <net_buf_frag_insert+0x54>)
   19488:	f240 2363 	movw	r3, #611	; 0x263
   1948c:	4a08      	ldr	r2, [pc, #32]	; (194b0 <net_buf_frag_insert+0x4c>)
   1948e:	4809      	ldr	r0, [pc, #36]	; (194b4 <net_buf_frag_insert+0x50>)
   19490:	f00b fc45 	bl	24d1e <assert_print>
   19494:	f240 2163 	movw	r1, #611	; 0x263
   19498:	e7f1      	b.n	1947e <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1949a:	6846      	ldr	r6, [r0, #4]
   1949c:	b11e      	cbz	r6, 194a6 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1949e:	4608      	mov	r0, r1
   194a0:	f7ff ffc6 	bl	19430 <net_buf_frag_last>
   194a4:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   194a6:	6065      	str	r5, [r4, #4]
}
   194a8:	bd70      	pop	{r4, r5, r6, pc}
   194aa:	bf00      	nop
   194ac:	0002f319 	.word	0x0002f319
   194b0:	0002f29d 	.word	0x0002f29d
   194b4:	0002b6e9 	.word	0x0002b6e9
   194b8:	0002f320 	.word	0x0002f320

000194bc <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   194bc:	b538      	push	{r3, r4, r5, lr}
   194be:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   194c0:	460c      	mov	r4, r1
   194c2:	b959      	cbnz	r1, 194dc <net_buf_frag_add+0x20>
   194c4:	490c      	ldr	r1, [pc, #48]	; (194f8 <net_buf_frag_add+0x3c>)
   194c6:	480d      	ldr	r0, [pc, #52]	; (194fc <net_buf_frag_add+0x40>)
   194c8:	f240 236e 	movw	r3, #622	; 0x26e
   194cc:	4a0c      	ldr	r2, [pc, #48]	; (19500 <net_buf_frag_add+0x44>)
   194ce:	f00b fc26 	bl	24d1e <assert_print>
   194d2:	f240 216e 	movw	r1, #622	; 0x26e
   194d6:	480a      	ldr	r0, [pc, #40]	; (19500 <net_buf_frag_add+0x44>)
   194d8:	f00b fc1a 	bl	24d10 <assert_post_action>

	if (!head) {
   194dc:	b920      	cbnz	r0, 194e8 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   194de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   194e2:	4608      	mov	r0, r1
   194e4:	f7ff bf8c 	b.w	19400 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   194e8:	f7ff ffa2 	bl	19430 <net_buf_frag_last>
   194ec:	4621      	mov	r1, r4
   194ee:	f7ff ffb9 	bl	19464 <net_buf_frag_insert>
}
   194f2:	4628      	mov	r0, r5
   194f4:	bd38      	pop	{r3, r4, r5, pc}
   194f6:	bf00      	nop
   194f8:	0002f320 	.word	0x0002f320
   194fc:	0002b6e9 	.word	0x0002b6e9
   19500:	0002f29d 	.word	0x0002f29d

00019504 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   19504:	b508      	push	{r3, lr}
   19506:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19508:	6800      	ldr	r0, [r0, #0]
   1950a:	689a      	ldr	r2, [r3, #8]
   1950c:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1950e:	4291      	cmp	r1, r2
   19510:	d90b      	bls.n	1952a <net_buf_simple_push+0x26>
   19512:	4909      	ldr	r1, [pc, #36]	; (19538 <net_buf_simple_push+0x34>)
   19514:	4809      	ldr	r0, [pc, #36]	; (1953c <net_buf_simple_push+0x38>)
   19516:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1951a:	4a09      	ldr	r2, [pc, #36]	; (19540 <net_buf_simple_push+0x3c>)
   1951c:	f00b fbff 	bl	24d1e <assert_print>
   19520:	f240 31f2 	movw	r1, #1010	; 0x3f2
   19524:	4806      	ldr	r0, [pc, #24]	; (19540 <net_buf_simple_push+0x3c>)
   19526:	f00b fbf3 	bl	24d10 <assert_post_action>
	buf->len += len;
   1952a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1952c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1952e:	4411      	add	r1, r2
	buf->data -= len;
   19530:	6018      	str	r0, [r3, #0]
	buf->len += len;
   19532:	8099      	strh	r1, [r3, #4]
}
   19534:	bd08      	pop	{r3, pc}
   19536:	bf00      	nop
   19538:	0002f335 	.word	0x0002f335
   1953c:	0002b6e9 	.word	0x0002b6e9
   19540:	0002f29d 	.word	0x0002f29d

00019544 <net_buf_simple_pull>:
{
   19544:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   19546:	8882      	ldrh	r2, [r0, #4]
{
   19548:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1954a:	428a      	cmp	r2, r1
   1954c:	d20b      	bcs.n	19566 <net_buf_simple_pull+0x22>
   1954e:	4909      	ldr	r1, [pc, #36]	; (19574 <net_buf_simple_pull+0x30>)
   19550:	4809      	ldr	r0, [pc, #36]	; (19578 <net_buf_simple_pull+0x34>)
   19552:	f240 4352 	movw	r3, #1106	; 0x452
   19556:	4a09      	ldr	r2, [pc, #36]	; (1957c <net_buf_simple_pull+0x38>)
   19558:	f00b fbe1 	bl	24d1e <assert_print>
   1955c:	f240 4152 	movw	r1, #1106	; 0x452
   19560:	4806      	ldr	r0, [pc, #24]	; (1957c <net_buf_simple_pull+0x38>)
   19562:	f00b fbd5 	bl	24d10 <assert_post_action>
	buf->len -= len;
   19566:	1a52      	subs	r2, r2, r1
   19568:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1956a:	6800      	ldr	r0, [r0, #0]
   1956c:	4408      	add	r0, r1
   1956e:	6018      	str	r0, [r3, #0]
}
   19570:	bd08      	pop	{r3, pc}
   19572:	bf00      	nop
   19574:	0002f325 	.word	0x0002f325
   19578:	0002b6e9 	.word	0x0002b6e9
   1957c:	0002f29d 	.word	0x0002f29d

00019580 <net_buf_simple_pull_mem>:
{
   19580:	b508      	push	{r3, lr}
   19582:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   19584:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   19586:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   19588:	428a      	cmp	r2, r1
   1958a:	d20b      	bcs.n	195a4 <net_buf_simple_pull_mem+0x24>
   1958c:	4908      	ldr	r1, [pc, #32]	; (195b0 <net_buf_simple_pull_mem+0x30>)
   1958e:	4809      	ldr	r0, [pc, #36]	; (195b4 <net_buf_simple_pull_mem+0x34>)
   19590:	f240 435e 	movw	r3, #1118	; 0x45e
   19594:	4a08      	ldr	r2, [pc, #32]	; (195b8 <net_buf_simple_pull_mem+0x38>)
   19596:	f00b fbc2 	bl	24d1e <assert_print>
   1959a:	f240 415e 	movw	r1, #1118	; 0x45e
   1959e:	4806      	ldr	r0, [pc, #24]	; (195b8 <net_buf_simple_pull_mem+0x38>)
   195a0:	f00b fbb6 	bl	24d10 <assert_post_action>
	buf->len -= len;
   195a4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   195a6:	4401      	add	r1, r0
	buf->len -= len;
   195a8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   195aa:	6019      	str	r1, [r3, #0]
}
   195ac:	bd08      	pop	{r3, pc}
   195ae:	bf00      	nop
   195b0:	0002f325 	.word	0x0002f325
   195b4:	0002b6e9 	.word	0x0002b6e9
   195b8:	0002f29d 	.word	0x0002f29d

000195bc <net_buf_simple_add>:
{
   195bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   195be:	8885      	ldrh	r5, [r0, #4]
   195c0:	6803      	ldr	r3, [r0, #0]
   195c2:	460e      	mov	r6, r1
   195c4:	4604      	mov	r4, r0
   195c6:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   195c8:	f00e fb8f 	bl	27cea <net_buf_simple_tailroom>
   195cc:	42b0      	cmp	r0, r6
   195ce:	d20b      	bcs.n	195e8 <net_buf_simple_add+0x2c>
   195d0:	4907      	ldr	r1, [pc, #28]	; (195f0 <net_buf_simple_add+0x34>)
   195d2:	4808      	ldr	r0, [pc, #32]	; (195f4 <net_buf_simple_add+0x38>)
   195d4:	f240 3303 	movw	r3, #771	; 0x303
   195d8:	4a07      	ldr	r2, [pc, #28]	; (195f8 <net_buf_simple_add+0x3c>)
   195da:	f00b fba0 	bl	24d1e <assert_print>
   195de:	f240 3103 	movw	r1, #771	; 0x303
   195e2:	4805      	ldr	r0, [pc, #20]	; (195f8 <net_buf_simple_add+0x3c>)
   195e4:	f00b fb94 	bl	24d10 <assert_post_action>
	buf->len += len;
   195e8:	4435      	add	r5, r6
   195ea:	80a5      	strh	r5, [r4, #4]
}
   195ec:	4638      	mov	r0, r7
   195ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   195f0:	0002f359 	.word	0x0002f359
   195f4:	0002b6e9 	.word	0x0002b6e9
   195f8:	0002f29d 	.word	0x0002f29d

000195fc <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   195fc:	b508      	push	{r3, lr}
   195fe:	4804      	ldr	r0, [pc, #16]	; (19610 <xoshiro128_initialize+0x14>)
   19600:	f00f feb1 	bl	29366 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   19604:	2800      	cmp	r0, #0
}
   19606:	bf0c      	ite	eq
   19608:	f06f 0012 	mvneq.w	r0, #18
   1960c:	2000      	movne	r0, #0
   1960e:	bd08      	pop	{r3, pc}
   19610:	0002a1b0 	.word	0x0002a1b0

00019614 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   19614:	2813      	cmp	r0, #19
   19616:	d80e      	bhi.n	19636 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   19618:	4a08      	ldr	r2, [pc, #32]	; (1963c <adc_gain_invert+0x28>)
   1961a:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1961e:	b153      	cbz	r3, 19636 <adc_gain_invert+0x22>
   19620:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   19624:	7852      	ldrb	r2, [r2, #1]
   19626:	b132      	cbz	r2, 19636 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   19628:	6808      	ldr	r0, [r1, #0]
   1962a:	4343      	muls	r3, r0
   1962c:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   19630:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   19632:	600b      	str	r3, [r1, #0]
			rv = 0;
   19634:	4770      	bx	lr
	int rv = -EINVAL;
   19636:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1963a:	4770      	bx	lr
   1963c:	0002f385 	.word	0x0002f385

00019640 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   19640:	2201      	movs	r2, #1
   19642:	4b05      	ldr	r3, [pc, #20]	; (19658 <adc_context_start_sampling+0x18>)
   19644:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   19648:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1964c:	b109      	cbz	r1, 19652 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1964e:	60da      	str	r2, [r3, #12]
}
   19650:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19652:	601a      	str	r2, [r3, #0]
   19654:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   19656:	4770      	bx	lr
   19658:	4000e000 	.word	0x4000e000

0001965c <adc_nrfx_channel_setup>:
{
   1965c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1965e:	790d      	ldrb	r5, [r1, #4]
   19660:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   19664:	2c07      	cmp	r4, #7
   19666:	d825      	bhi.n	196b4 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   19668:	780a      	ldrb	r2, [r1, #0]
   1966a:	2a0b      	cmp	r2, #11
   1966c:	d818      	bhi.n	196a0 <adc_nrfx_channel_setup+0x44>
   1966e:	e8df f002 	tbb	[pc, r2]
   19672:	0707      	.short	0x0707
   19674:	06170707 	.word	0x06170707
   19678:	13111717 	.word	0x13111717
   1967c:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   1967e:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   19680:	784b      	ldrb	r3, [r1, #1]
   19682:	2b03      	cmp	r3, #3
   19684:	d01a      	beq.n	196bc <adc_nrfx_channel_setup+0x60>
   19686:	2b04      	cmp	r3, #4
   19688:	f04f 0300 	mov.w	r3, #0
   1968c:	d017      	beq.n	196be <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   1968e:	4a30      	ldr	r2, [pc, #192]	; (19750 <adc_nrfx_channel_setup+0xf4>)
   19690:	9202      	str	r2, [sp, #8]
   19692:	e008      	b.n	196a6 <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   19694:	2205      	movs	r2, #5
		break;
   19696:	e7f3      	b.n	19680 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   19698:	2206      	movs	r2, #6
		break;
   1969a:	e7f1      	b.n	19680 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   1969c:	2207      	movs	r2, #7
		break;
   1969e:	e7ef      	b.n	19680 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   196a0:	4b2c      	ldr	r3, [pc, #176]	; (19754 <adc_nrfx_channel_setup+0xf8>)
   196a2:	9302      	str	r3, [sp, #8]
   196a4:	2300      	movs	r3, #0
   196a6:	2201      	movs	r2, #1
   196a8:	4618      	mov	r0, r3
   196aa:	e9cd 3300 	strd	r3, r3, [sp]
   196ae:	492a      	ldr	r1, [pc, #168]	; (19758 <adc_nrfx_channel_setup+0xfc>)
   196b0:	f00e fb36 	bl	27d20 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   196b4:	f06f 0015 	mvn.w	r0, #21
}
   196b8:	b004      	add	sp, #16
   196ba:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   196bc:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   196be:	f244 060a 	movw	r6, #16394	; 0x400a
   196c2:	8848      	ldrh	r0, [r1, #2]
   196c4:	42b0      	cmp	r0, r6
   196c6:	d03d      	beq.n	19744 <adc_nrfx_channel_setup+0xe8>
   196c8:	d80a      	bhi.n	196e0 <adc_nrfx_channel_setup+0x84>
   196ca:	f244 0603 	movw	r6, #16387	; 0x4003
   196ce:	42b0      	cmp	r0, r6
   196d0:	d014      	beq.n	196fc <adc_nrfx_channel_setup+0xa0>
   196d2:	f244 0605 	movw	r6, #16389	; 0x4005
   196d6:	42b0      	cmp	r0, r6
   196d8:	d032      	beq.n	19740 <adc_nrfx_channel_setup+0xe4>
   196da:	b398      	cbz	r0, 19744 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   196dc:	4b1f      	ldr	r3, [pc, #124]	; (1975c <adc_nrfx_channel_setup+0x100>)
   196de:	e7e0      	b.n	196a2 <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   196e0:	f244 0614 	movw	r6, #16404	; 0x4014
   196e4:	42b0      	cmp	r0, r6
   196e6:	d02f      	beq.n	19748 <adc_nrfx_channel_setup+0xec>
   196e8:	f244 0628 	movw	r6, #16424	; 0x4028
   196ec:	42b0      	cmp	r0, r6
   196ee:	d02d      	beq.n	1974c <adc_nrfx_channel_setup+0xf0>
   196f0:	f244 060f 	movw	r6, #16399	; 0x400f
   196f4:	42b0      	cmp	r0, r6
   196f6:	d1f1      	bne.n	196dc <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   196f8:	2003      	movs	r0, #3
   196fa:	e000      	b.n	196fe <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   196fc:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   196fe:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   19702:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   19704:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   19708:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1970c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   19710:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   19712:	0123      	lsls	r3, r4, #4
   19714:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19718:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1971c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   19720:	0123      	lsls	r3, r4, #4
   19722:	798a      	ldrb	r2, [r1, #6]
   19724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19728:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1972c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   19730:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   19734:	4b0a      	ldr	r3, [pc, #40]	; (19760 <adc_nrfx_channel_setup+0x104>)
   19736:	794a      	ldrb	r2, [r1, #5]
   19738:	4423      	add	r3, r4
   1973a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1973e:	e7bb      	b.n	196b8 <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   19740:	2001      	movs	r0, #1
   19742:	e7dc      	b.n	196fe <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   19744:	2002      	movs	r0, #2
   19746:	e7da      	b.n	196fe <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   19748:	2004      	movs	r0, #4
   1974a:	e7d8      	b.n	196fe <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1974c:	2005      	movs	r0, #5
   1974e:	e7d6      	b.n	196fe <adc_nrfx_channel_setup+0xa2>
   19750:	0002f3cc 	.word	0x0002f3cc
   19754:	0002f3ad 	.word	0x0002f3ad
   19758:	0002a708 	.word	0x0002a708
   1975c:	0002f3f0 	.word	0x0002f3f0
   19760:	20008168 	.word	0x20008168

00019764 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   19764:	b5f0      	push	{r4, r5, r6, r7, lr}
   19766:	460c      	mov	r4, r1
   19768:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   1976a:	f04f 33ff 	mov.w	r3, #4294967295
   1976e:	f04f 32ff 	mov.w	r2, #4294967295
   19772:	486d      	ldr	r0, [pc, #436]	; (19928 <adc_nrfx_read+0x1c4>)
   19774:	f006 fba2 	bl	1febc <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   19778:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1977a:	1e73      	subs	r3, r6, #1
   1977c:	2bfe      	cmp	r3, #254	; 0xfe
   1977e:	f04f 0300 	mov.w	r3, #0
   19782:	d909      	bls.n	19798 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   19784:	4a69      	ldr	r2, [pc, #420]	; (1992c <adc_nrfx_read+0x1c8>)
   19786:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   19788:	2201      	movs	r2, #1
   1978a:	4618      	mov	r0, r3
   1978c:	e9cd 3300 	strd	r3, r3, [sp]
   19790:	4967      	ldr	r1, [pc, #412]	; (19930 <adc_nrfx_read+0x1cc>)
   19792:	f00e fac5 	bl	27d20 <z_log_msg_runtime_create.constprop.0>
	if (error) {
   19796:	e014      	b.n	197c2 <adc_nrfx_read+0x5e>
   19798:	461a      	mov	r2, r3
	active_channels = 0U;
   1979a:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   1979c:	4d65      	ldr	r5, [pc, #404]	; (19934 <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1979e:	4f66      	ldr	r7, [pc, #408]	; (19938 <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   197a0:	fa26 f302 	lsr.w	r3, r6, r2
   197a4:	f013 0301 	ands.w	r3, r3, #1
   197a8:	d039      	beq.n	1981e <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   197aa:	5cbb      	ldrb	r3, [r7, r2]
   197ac:	b98b      	cbnz	r3, 197d2 <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   197ae:	9203      	str	r2, [sp, #12]
   197b0:	4a62      	ldr	r2, [pc, #392]	; (1993c <adc_nrfx_read+0x1d8>)
   197b2:	9202      	str	r2, [sp, #8]
   197b4:	e9cd 3300 	strd	r3, r3, [sp]
   197b8:	2201      	movs	r2, #1
   197ba:	4618      	mov	r0, r3
   197bc:	495c      	ldr	r1, [pc, #368]	; (19930 <adc_nrfx_read+0x1cc>)
   197be:	f00e faaf 	bl	27d20 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   197c2:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   197c6:	4858      	ldr	r0, [pc, #352]	; (19928 <adc_nrfx_read+0x1c4>)
   197c8:	f006 fb34 	bl	1fe34 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   197cc:	4620      	mov	r0, r4
   197ce:	b007      	add	sp, #28
   197d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   197d2:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   197d6:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   197da:	f1bc 0c00 	subs.w	ip, ip, #0
   197de:	bf18      	it	ne
   197e0:	f04f 0c01 	movne.w	ip, #1
   197e4:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   197e8:	3001      	adds	r0, #1
   197ea:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   197ee:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   197f2:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   197f6:	f102 0151 	add.w	r1, r2, #81	; 0x51
   197fa:	0109      	lsls	r1, r1, #4
   197fc:	506b      	str	r3, [r5, r1]
   197fe:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   19800:	3201      	adds	r2, #1
   19802:	2a08      	cmp	r2, #8
   19804:	d1cc      	bne.n	197a0 <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   19806:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   19808:	2300      	movs	r3, #0
   1980a:	f1a2 0108 	sub.w	r1, r2, #8
   1980e:	2906      	cmp	r1, #6
   19810:	d818      	bhi.n	19844 <adc_nrfx_read+0xe0>
   19812:	e8df f001 	tbb	[pc, r1]
   19816:	171e      	.short	0x171e
   19818:	17091720 	.word	0x17091720
   1981c:	15          	.byte	0x15
   1981d:	00          	.byte	0x00
   1981e:	f102 0151 	add.w	r1, r2, #81	; 0x51
   19822:	0109      	lsls	r1, r1, #4
   19824:	506b      	str	r3, [r5, r1]
}
   19826:	e7eb      	b.n	19800 <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   19828:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1982a:	4a42      	ldr	r2, [pc, #264]	; (19934 <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1982c:	2801      	cmp	r0, #1
   1982e:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   19832:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   19834:	d911      	bls.n	1985a <adc_nrfx_read+0xf6>
   19836:	b193      	cbz	r3, 1985e <adc_nrfx_read+0xfa>
		LOG_ERR(
   19838:	4b41      	ldr	r3, [pc, #260]	; (19940 <adc_nrfx_read+0x1dc>)
   1983a:	9302      	str	r3, [sp, #8]
   1983c:	2300      	movs	r3, #0
   1983e:	e7a3      	b.n	19788 <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   19840:	2303      	movs	r3, #3
		break;
   19842:	e7f2      	b.n	1982a <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   19844:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   19846:	4a3f      	ldr	r2, [pc, #252]	; (19944 <adc_nrfx_read+0x1e0>)
   19848:	9300      	str	r3, [sp, #0]
   1984a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1984e:	2300      	movs	r3, #0
   19850:	e7b2      	b.n	197b8 <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   19852:	2300      	movs	r3, #0
   19854:	e7e9      	b.n	1982a <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   19856:	2301      	movs	r3, #1
   19858:	e7e7      	b.n	1982a <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   1985a:	2b08      	cmp	r3, #8
   1985c:	d816      	bhi.n	1988c <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   1985e:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   19862:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   19864:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   19866:	b9b2      	cbnz	r2, 19896 <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   19868:	68e2      	ldr	r2, [r4, #12]
   1986a:	429a      	cmp	r2, r3
   1986c:	d217      	bcs.n	1989e <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1986e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   19872:	4b35      	ldr	r3, [pc, #212]	; (19948 <adc_nrfx_read+0x1e4>)
   19874:	2201      	movs	r2, #1
   19876:	9302      	str	r3, [sp, #8]
   19878:	2300      	movs	r3, #0
   1987a:	492d      	ldr	r1, [pc, #180]	; (19930 <adc_nrfx_read+0x1cc>)
   1987c:	4618      	mov	r0, r3
   1987e:	e9cd 3300 	strd	r3, r3, [sp]
   19882:	f00e fa4d 	bl	27d20 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   19886:	f06f 040b 	mvn.w	r4, #11
   1988a:	e79c      	b.n	197c6 <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   1988c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   1988e:	4b2f      	ldr	r3, [pc, #188]	; (1994c <adc_nrfx_read+0x1e8>)
   19890:	9302      	str	r3, [sp, #8]
   19892:	2300      	movs	r3, #0
   19894:	e78e      	b.n	197b4 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   19896:	8992      	ldrh	r2, [r2, #12]
   19898:	fb02 3303 	mla	r3, r2, r3, r3
   1989c:	e7e4      	b.n	19868 <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1989e:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   198a0:	68a2      	ldr	r2, [r4, #8]
   198a2:	4b24      	ldr	r3, [pc, #144]	; (19934 <adc_nrfx_read+0x1d0>)
   198a4:	4f2a      	ldr	r7, [pc, #168]	; (19950 <adc_nrfx_read+0x1ec>)
   198a6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   198aa:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   198ae:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   198b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   198b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   198b6:	6833      	ldr	r3, [r6, #0]
   198b8:	463e      	mov	r6, r7
   198ba:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   198bc:	2500      	movs	r5, #0
   198be:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   198c0:	6823      	ldr	r3, [r4, #0]
   198c2:	b36b      	cbz	r3, 19920 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   198c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   198c6:	f107 0488 	add.w	r4, r7, #136	; 0x88
   198ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   198ce:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   198d0:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   198d4:	b320      	cbz	r0, 19920 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   198d6:	e8d6 3fef 	ldaex	r3, [r6]
   198da:	e8c6 5fe2 	stlex	r2, r5, [r6]
   198de:	2a00      	cmp	r2, #0
   198e0:	d1f9      	bne.n	198d6 <adc_nrfx_read+0x172>
   198e2:	491c      	ldr	r1, [pc, #112]	; (19954 <adc_nrfx_read+0x1f0>)
   198e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   198e8:	460e      	mov	r6, r1
   198ea:	4629      	mov	r1, r5
   198ec:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   198f0:	2300      	movs	r3, #0
   198f2:	fbe4 6100 	umlal	r6, r1, r4, r0
   198f6:	4a18      	ldr	r2, [pc, #96]	; (19958 <adc_nrfx_read+0x1f4>)
   198f8:	4630      	mov	r0, r6
   198fa:	f7ef faf9 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   198fe:	2200      	movs	r2, #0
   19900:	e9cd 0100 	strd	r0, r1, [sp]
   19904:	2300      	movs	r3, #0
   19906:	f107 0008 	add.w	r0, r7, #8
   1990a:	f008 fea5 	bl	22658 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1990e:	f04f 32ff 	mov.w	r2, #4294967295
   19912:	f04f 33ff 	mov.w	r3, #4294967295
   19916:	4811      	ldr	r0, [pc, #68]	; (1995c <adc_nrfx_read+0x1f8>)
   19918:	f006 fad0 	bl	1febc <z_impl_k_sem_take>
	return ctx->status;
   1991c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   1991e:	e752      	b.n	197c6 <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   19920:	480b      	ldr	r0, [pc, #44]	; (19950 <adc_nrfx_read+0x1ec>)
   19922:	f7ff fe8d 	bl	19640 <adc_context_start_sampling>
   19926:	e7f2      	b.n	1990e <adc_nrfx_read+0x1aa>
   19928:	200081a8 	.word	0x200081a8
   1992c:	0002f41b 	.word	0x0002f41b
   19930:	0002a708 	.word	0x0002a708
   19934:	4000e000 	.word	0x4000e000
   19938:	20008208 	.word	0x20008208
   1993c:	0002f439 	.word	0x0002f439
   19940:	0002f478 	.word	0x0002f478
   19944:	0002f453 	.word	0x0002f453
   19948:	0002f4cd 	.word	0x0002f4cd
   1994c:	0002f4aa 	.word	0x0002f4aa
   19950:	20008168 	.word	0x20008168
   19954:	000f423f 	.word	0x000f423f
   19958:	000f4240 	.word	0x000f4240
   1995c:	200081c0 	.word	0x200081c0

00019960 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   19960:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19962:	2400      	movs	r4, #0
   19964:	4b0d      	ldr	r3, [pc, #52]	; (1999c <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   19966:	200e      	movs	r0, #14
   19968:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1996c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   19970:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   19974:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   19978:	2212      	movs	r2, #18
   1997a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1997e:	f7f6 fbd1 	bl	10124 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19982:	4622      	mov	r2, r4
   19984:	2101      	movs	r1, #1
   19986:	200e      	movs	r0, #14
   19988:	f7f6 fbfc 	bl	10184 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1998c:	4804      	ldr	r0, [pc, #16]	; (199a0 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1998e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   19990:	b913      	cbnz	r3, 19998 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   19992:	3040      	adds	r0, #64	; 0x40
   19994:	f006 fa4e 	bl	1fe34 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   19998:	2000      	movs	r0, #0
   1999a:	bd10      	pop	{r4, pc}
   1999c:	4000e000 	.word	0x4000e000
   199a0:	20008168 	.word	0x20008168

000199a4 <saadc_irq_handler>:
{
   199a4:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   199a6:	4b2d      	ldr	r3, [pc, #180]	; (19a5c <saadc_irq_handler+0xb8>)
   199a8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   199ac:	2a00      	cmp	r2, #0
   199ae:	d048      	beq.n	19a42 <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   199b0:	2200      	movs	r2, #0
   199b2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   199b6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   199ba:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   199bc:	4c28      	ldr	r4, [pc, #160]	; (19a60 <saadc_irq_handler+0xbc>)
   199be:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   199c0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   199c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   199c6:	4625      	mov	r5, r4
   199c8:	b3b3      	cbz	r3, 19a38 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   199ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   199ce:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   199d2:	b133      	cbz	r3, 199e2 <saadc_irq_handler+0x3e>
			action = callback(dev,
   199d4:	f104 0174 	add.w	r1, r4, #116	; 0x74
   199d8:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   199da:	2801      	cmp	r0, #1
   199dc:	d014      	beq.n	19a08 <saadc_irq_handler+0x64>
   199de:	2802      	cmp	r0, #2
   199e0:	d024      	beq.n	19a2c <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   199e2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   199e6:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   199ea:	429a      	cmp	r2, r3
   199ec:	d91e      	bls.n	19a2c <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   199ee:	3301      	adds	r3, #1
   199f0:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   199f4:	4b19      	ldr	r3, [pc, #100]	; (19a5c <saadc_irq_handler+0xb8>)
   199f6:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   199fa:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   199fe:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   19a00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   19a04:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   19a08:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   19a0c:	b923      	cbnz	r3, 19a18 <saadc_irq_handler+0x74>
}
   19a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   19a12:	4813      	ldr	r0, [pc, #76]	; (19a60 <saadc_irq_handler+0xbc>)
   19a14:	f7ff be14 	b.w	19640 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19a18:	e8d5 3fef 	ldaex	r3, [r5]
   19a1c:	1e5a      	subs	r2, r3, #1
   19a1e:	e8c5 2fe1 	stlex	r1, r2, [r5]
   19a22:	2900      	cmp	r1, #0
   19a24:	d1f8      	bne.n	19a18 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   19a26:	2b01      	cmp	r3, #1
   19a28:	dcf1      	bgt.n	19a0e <saadc_irq_handler+0x6a>
   19a2a:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   19a2c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   19a30:	b113      	cbz	r3, 19a38 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   19a32:	480c      	ldr	r0, [pc, #48]	; (19a64 <saadc_irq_handler+0xc0>)
   19a34:	f00f fe02 	bl	2963c <z_impl_k_timer_stop>
   19a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   19a3c:	480a      	ldr	r0, [pc, #40]	; (19a68 <saadc_irq_handler+0xc4>)
   19a3e:	f006 b9f9 	b.w	1fe34 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19a42:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   19a46:	2900      	cmp	r1, #0
   19a48:	d0ef      	beq.n	19a2a <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19a4a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   19a4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19a52:	2201      	movs	r2, #1
   19a54:	609a      	str	r2, [r3, #8]
   19a56:	601a      	str	r2, [r3, #0]
   19a58:	605a      	str	r2, [r3, #4]
}
   19a5a:	e7e6      	b.n	19a2a <saadc_irq_handler+0x86>
   19a5c:	4000e000 	.word	0x4000e000
   19a60:	20008168 	.word	0x20008168
   19a64:	20008170 	.word	0x20008170
   19a68:	200081c0 	.word	0x200081c0

00019a6c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19a6e:	2340      	movs	r3, #64	; 0x40
{
   19a70:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   19a72:	490a      	ldr	r1, [pc, #40]	; (19a9c <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19a74:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   19a76:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19a78:	1149      	asrs	r1, r1, #5
{
   19a7a:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19a7c:	4623      	mov	r3, r4
   19a7e:	4a08      	ldr	r2, [pc, #32]	; (19aa0 <onoff_start+0x34>)
   19a80:	4808      	ldr	r0, [pc, #32]	; (19aa4 <onoff_start+0x38>)
   19a82:	f00e f983 	bl	27d8c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   19a86:	1e01      	subs	r1, r0, #0
   19a88:	da05      	bge.n	19a96 <onoff_start+0x2a>
		notify(mgr, err);
   19a8a:	4628      	mov	r0, r5
   19a8c:	4623      	mov	r3, r4
	}
}
   19a8e:	b003      	add	sp, #12
   19a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   19a94:	4718      	bx	r3
}
   19a96:	b003      	add	sp, #12
   19a98:	bd30      	pop	{r4, r5, pc}
   19a9a:	bf00      	nop
   19a9c:	20021248 	.word	0x20021248
   19aa0:	00027dfb 	.word	0x00027dfb
   19aa4:	0002a150 	.word	0x0002a150

00019aa8 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19aa8:	b2c9      	uxtb	r1, r1
   19aaa:	2903      	cmp	r1, #3
{
   19aac:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19aae:	d909      	bls.n	19ac4 <get_status+0x1c>
   19ab0:	4909      	ldr	r1, [pc, #36]	; (19ad8 <get_status+0x30>)
   19ab2:	480a      	ldr	r0, [pc, #40]	; (19adc <get_status+0x34>)
   19ab4:	237a      	movs	r3, #122	; 0x7a
   19ab6:	4a0a      	ldr	r2, [pc, #40]	; (19ae0 <get_status+0x38>)
   19ab8:	f00b f931 	bl	24d1e <assert_print>
   19abc:	217a      	movs	r1, #122	; 0x7a
   19abe:	4808      	ldr	r0, [pc, #32]	; (19ae0 <get_status+0x38>)
   19ac0:	f00b f926 	bl	24d10 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   19ac4:	220c      	movs	r2, #12
   19ac6:	6903      	ldr	r3, [r0, #16]
   19ac8:	fb01 3302 	mla	r3, r1, r2, r3
   19acc:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   19ad0:	f000 0007 	and.w	r0, r0, #7
   19ad4:	bd08      	pop	{r3, pc}
   19ad6:	bf00      	nop
   19ad8:	0002f547 	.word	0x0002f547
   19adc:	0002b6e9 	.word	0x0002b6e9
   19ae0:	0002f50a 	.word	0x0002f50a

00019ae4 <stop>:
{
   19ae4:	b570      	push	{r4, r5, r6, lr}
   19ae6:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19ae8:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   19aea:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19aec:	d90b      	bls.n	19b06 <stop+0x22>
   19aee:	491a      	ldr	r1, [pc, #104]	; (19b58 <stop+0x74>)
   19af0:	481a      	ldr	r0, [pc, #104]	; (19b5c <stop+0x78>)
   19af2:	f240 135d 	movw	r3, #349	; 0x15d
   19af6:	4a1a      	ldr	r2, [pc, #104]	; (19b60 <stop+0x7c>)
   19af8:	f00b f911 	bl	24d1e <assert_print>
   19afc:	f240 115d 	movw	r1, #349	; 0x15d
   19b00:	4817      	ldr	r0, [pc, #92]	; (19b60 <stop+0x7c>)
   19b02:	f00b f905 	bl	24d10 <assert_post_action>
	__asm__ volatile(
   19b06:	f04f 0420 	mov.w	r4, #32
   19b0a:	f3ef 8511 	mrs	r5, BASEPRI
   19b0e:	f384 8812 	msr	BASEPRI_MAX, r4
   19b12:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19b16:	260c      	movs	r6, #12
   19b18:	fb06 3401 	mla	r4, r6, r1, r3
   19b1c:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   19b20:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   19b24:	d008      	beq.n	19b38 <stop+0x54>
   19b26:	42a2      	cmp	r2, r4
   19b28:	d006      	beq.n	19b38 <stop+0x54>
	__asm__ volatile(
   19b2a:	f385 8811 	msr	BASEPRI, r5
   19b2e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   19b32:	f04f 30ff 	mov.w	r0, #4294967295
}
   19b36:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19b38:	2201      	movs	r2, #1
   19b3a:	4371      	muls	r1, r6
   19b3c:	440b      	add	r3, r1
   19b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   19b42:	f385 8811 	msr	BASEPRI, r5
   19b46:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   19b4a:	6843      	ldr	r3, [r0, #4]
   19b4c:	440b      	add	r3, r1
   19b4e:	685b      	ldr	r3, [r3, #4]
   19b50:	4798      	blx	r3
	return 0;
   19b52:	2000      	movs	r0, #0
   19b54:	e7ef      	b.n	19b36 <stop+0x52>
   19b56:	bf00      	nop
   19b58:	0002f547 	.word	0x0002f547
   19b5c:	0002b6e9 	.word	0x0002b6e9
   19b60:	0002f50a 	.word	0x0002f50a

00019b64 <onoff_stop>:
{
   19b64:	b570      	push	{r4, r5, r6, lr}
   19b66:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   19b68:	4906      	ldr	r1, [pc, #24]	; (19b84 <onoff_stop+0x20>)
{
   19b6a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   19b6c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19b6e:	1149      	asrs	r1, r1, #5
   19b70:	2240      	movs	r2, #64	; 0x40
   19b72:	4805      	ldr	r0, [pc, #20]	; (19b88 <onoff_stop+0x24>)
   19b74:	f7ff ffb6 	bl	19ae4 <stop>
	notify(mgr, res);
   19b78:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19b7a:	4601      	mov	r1, r0
	notify(mgr, res);
   19b7c:	4620      	mov	r0, r4
}
   19b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   19b82:	4718      	bx	r3
   19b84:	20021248 	.word	0x20021248
   19b88:	0002a150 	.word	0x0002a150

00019b8c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   19b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19b90:	2200      	movs	r2, #0
   19b92:	2101      	movs	r1, #1
{
   19b94:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19b96:	2005      	movs	r0, #5
   19b98:	f7f6 faf4 	bl	10184 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   19b9c:	4811      	ldr	r0, [pc, #68]	; (19be4 <clk_init+0x58>)
   19b9e:	f002 ff81 	bl	1caa4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   19ba2:	4b11      	ldr	r3, [pc, #68]	; (19be8 <clk_init+0x5c>)
   19ba4:	4298      	cmp	r0, r3
   19ba6:	d119      	bne.n	19bdc <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   19ba8:	f002 ffa0 	bl	1caec <nrfx_clock_enable>
   19bac:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19bae:	f04f 080c 	mov.w	r8, #12
   19bb2:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   19bb4:	f8df 9034 	ldr.w	r9, [pc, #52]	; 19bec <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   19bb8:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   19bba:	4649      	mov	r1, r9
   19bbc:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   19bc0:	f00b f868 	bl	24c94 <onoff_manager_init>
		if (err < 0) {
   19bc4:	2800      	cmp	r0, #0
   19bc6:	db07      	blt.n	19bd8 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19bc8:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   19bcc:	3401      	adds	r4, #1
   19bce:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19bd0:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   19bd4:	d1f0      	bne.n	19bb8 <clk_init+0x2c>
	}

	return 0;
   19bd6:	2000      	movs	r0, #0
}
   19bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   19bdc:	f06f 0004 	mvn.w	r0, #4
   19be0:	e7fa      	b.n	19bd8 <clk_init+0x4c>
   19be2:	bf00      	nop
   19be4:	00019c29 	.word	0x00019c29
   19be8:	0bad0000 	.word	0x0bad0000
   19bec:	0002b344 	.word	0x0002b344

00019bf0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   19bf0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   19bf2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   19bf4:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   19bf6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   19bf8:	434b      	muls	r3, r1
   19bfa:	4809      	ldr	r0, [pc, #36]	; (19c20 <clkstarted_handle.constprop.0+0x30>)
   19bfc:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   19bfe:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   19c00:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   19c04:	4418      	add	r0, r3
	sub_data->cb = NULL;
   19c06:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   19c0a:	f00e f8ac 	bl	27d66 <set_on_state>
	if (callback) {
   19c0e:	b12d      	cbz	r5, 19c1c <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   19c10:	4632      	mov	r2, r6
   19c12:	462b      	mov	r3, r5
}
   19c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   19c18:	4802      	ldr	r0, [pc, #8]	; (19c24 <clkstarted_handle.constprop.0+0x34>)
   19c1a:	4718      	bx	r3
}
   19c1c:	bd70      	pop	{r4, r5, r6, pc}
   19c1e:	bf00      	nop
   19c20:	20021248 	.word	0x20021248
   19c24:	0002a150 	.word	0x0002a150

00019c28 <clock_event_handler>:
{
   19c28:	b508      	push	{r3, lr}
	switch (event) {
   19c2a:	2805      	cmp	r0, #5
   19c2c:	d820      	bhi.n	19c70 <clock_event_handler+0x48>
   19c2e:	e8df f000 	tbb	[pc, r0]
   19c32:	1103      	.short	0x1103
   19c34:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   19c38:	4b13      	ldr	r3, [pc, #76]	; (19c88 <clock_event_handler+0x60>)
   19c3a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   19c3e:	f010 0007 	ands.w	r0, r0, #7
   19c42:	d11f      	bne.n	19c84 <clock_event_handler+0x5c>
}
   19c44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   19c48:	f7ff bfd2 	b.w	19bf0 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   19c4c:	2002      	movs	r0, #2
   19c4e:	e7f9      	b.n	19c44 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   19c50:	2003      	movs	r0, #3
   19c52:	e7f7      	b.n	19c44 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   19c54:	2001      	movs	r0, #1
   19c56:	e7f5      	b.n	19c44 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   19c58:	490c      	ldr	r1, [pc, #48]	; (19c8c <clock_event_handler+0x64>)
   19c5a:	f240 236e 	movw	r3, #622	; 0x26e
   19c5e:	4a0c      	ldr	r2, [pc, #48]	; (19c90 <clock_event_handler+0x68>)
   19c60:	480c      	ldr	r0, [pc, #48]	; (19c94 <clock_event_handler+0x6c>)
   19c62:	f00b f85c 	bl	24d1e <assert_print>
   19c66:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   19c6a:	4809      	ldr	r0, [pc, #36]	; (19c90 <clock_event_handler+0x68>)
   19c6c:	f00b f850 	bl	24d10 <assert_post_action>
   19c70:	4906      	ldr	r1, [pc, #24]	; (19c8c <clock_event_handler+0x64>)
   19c72:	f240 2372 	movw	r3, #626	; 0x272
   19c76:	4a06      	ldr	r2, [pc, #24]	; (19c90 <clock_event_handler+0x68>)
   19c78:	4806      	ldr	r0, [pc, #24]	; (19c94 <clock_event_handler+0x6c>)
   19c7a:	f00b f850 	bl	24d1e <assert_print>
   19c7e:	f240 2172 	movw	r1, #626	; 0x272
   19c82:	e7f2      	b.n	19c6a <clock_event_handler+0x42>
}
   19c84:	bd08      	pop	{r3, pc}
   19c86:	bf00      	nop
   19c88:	20021248 	.word	0x20021248
   19c8c:	00030f5f 	.word	0x00030f5f
   19c90:	0002f50a 	.word	0x0002f50a
   19c94:	0002b6e9 	.word	0x0002b6e9

00019c98 <generic_hfclk_start>:
{
   19c98:	b508      	push	{r3, lr}
	__asm__ volatile(
   19c9a:	f04f 0320 	mov.w	r3, #32
   19c9e:	f3ef 8111 	mrs	r1, BASEPRI
   19ca2:	f383 8812 	msr	BASEPRI_MAX, r3
   19ca6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   19caa:	4a11      	ldr	r2, [pc, #68]	; (19cf0 <generic_hfclk_start+0x58>)
   19cac:	6813      	ldr	r3, [r2, #0]
   19cae:	f043 0002 	orr.w	r0, r3, #2
   19cb2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   19cb4:	07da      	lsls	r2, r3, #31
   19cb6:	d408      	bmi.n	19cca <generic_hfclk_start+0x32>
	__asm__ volatile(
   19cb8:	f381 8811 	msr	BASEPRI, r1
   19cbc:	f3bf 8f6f 	isb	sy
}
   19cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   19cc4:	2001      	movs	r0, #1
   19cc6:	f002 bf3b 	b.w	1cb40 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19cca:	4b0a      	ldr	r3, [pc, #40]	; (19cf4 <generic_hfclk_start+0x5c>)
   19ccc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19cd0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   19cd4:	07d3      	lsls	r3, r2, #31
   19cd6:	d5ef      	bpl.n	19cb8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   19cd8:	4807      	ldr	r0, [pc, #28]	; (19cf8 <generic_hfclk_start+0x60>)
   19cda:	f00e f844 	bl	27d66 <set_on_state>
   19cde:	f381 8811 	msr	BASEPRI, r1
   19ce2:	f3bf 8f6f 	isb	sy
}
   19ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   19cea:	2000      	movs	r0, #0
   19cec:	f7ff bf80 	b.w	19bf0 <clkstarted_handle.constprop.0>
   19cf0:	200212f8 	.word	0x200212f8
   19cf4:	40005000 	.word	0x40005000
   19cf8:	200212d0 	.word	0x200212d0

00019cfc <api_blocking_start>:
{
   19cfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19cfe:	2200      	movs	r2, #0
   19d00:	2301      	movs	r3, #1
   19d02:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19d06:	ab04      	add	r3, sp, #16
   19d08:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19d0c:	4a09      	ldr	r2, [pc, #36]	; (19d34 <api_blocking_start+0x38>)
   19d0e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19d10:	f8cd d000 	str.w	sp, [sp]
   19d14:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19d18:	f00e f868 	bl	27dec <api_start>
	if (err < 0) {
   19d1c:	2800      	cmp	r0, #0
   19d1e:	db05      	blt.n	19d2c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   19d20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19d24:	2300      	movs	r3, #0
   19d26:	4668      	mov	r0, sp
   19d28:	f006 f8c8 	bl	1febc <z_impl_k_sem_take>
}
   19d2c:	b007      	add	sp, #28
   19d2e:	f85d fb04 	ldr.w	pc, [sp], #4
   19d32:	bf00      	nop
   19d34:	00027e2b 	.word	0x00027e2b

00019d38 <generic_hfclk_stop>:
{
   19d38:	b510      	push	{r4, lr}
	__asm__ volatile(
   19d3a:	f04f 0320 	mov.w	r3, #32
   19d3e:	f3ef 8411 	mrs	r4, BASEPRI
   19d42:	f383 8812 	msr	BASEPRI_MAX, r3
   19d46:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   19d4a:	4a07      	ldr	r2, [pc, #28]	; (19d68 <generic_hfclk_stop+0x30>)
   19d4c:	6813      	ldr	r3, [r2, #0]
   19d4e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   19d52:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   19d54:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   19d56:	d402      	bmi.n	19d5e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   19d58:	2001      	movs	r0, #1
   19d5a:	f002 ff6f 	bl	1cc3c <nrfx_clock_stop>
	__asm__ volatile(
   19d5e:	f384 8811 	msr	BASEPRI, r4
   19d62:	f3bf 8f6f 	isb	sy
}
   19d66:	bd10      	pop	{r4, pc}
   19d68:	200212f8 	.word	0x200212f8

00019d6c <z_nrf_clock_control_lf_on>:
{
   19d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19d70:	2201      	movs	r2, #1
   19d72:	4606      	mov	r6, r0
   19d74:	4941      	ldr	r1, [pc, #260]	; (19e7c <z_nrf_clock_control_lf_on+0x110>)
   19d76:	e8d1 3fef 	ldaex	r3, [r1]
   19d7a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   19d7e:	2800      	cmp	r0, #0
   19d80:	d1f9      	bne.n	19d76 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   19d82:	b9a3      	cbnz	r3, 19dae <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19d84:	493e      	ldr	r1, [pc, #248]	; (19e80 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   19d86:	483f      	ldr	r0, [pc, #252]	; (19e84 <z_nrf_clock_control_lf_on+0x118>)
   19d88:	604b      	str	r3, [r1, #4]
   19d8a:	60cb      	str	r3, [r1, #12]
   19d8c:	608a      	str	r2, [r1, #8]
   19d8e:	f7f3 fae3 	bl	d358 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   19d92:	2800      	cmp	r0, #0
   19d94:	da0b      	bge.n	19dae <z_nrf_clock_control_lf_on+0x42>
   19d96:	493c      	ldr	r1, [pc, #240]	; (19e88 <z_nrf_clock_control_lf_on+0x11c>)
   19d98:	f44f 730c 	mov.w	r3, #560	; 0x230
   19d9c:	4a3b      	ldr	r2, [pc, #236]	; (19e8c <z_nrf_clock_control_lf_on+0x120>)
   19d9e:	483c      	ldr	r0, [pc, #240]	; (19e90 <z_nrf_clock_control_lf_on+0x124>)
   19da0:	f00a ffbd 	bl	24d1e <assert_print>
   19da4:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   19da8:	4838      	ldr	r0, [pc, #224]	; (19e8c <z_nrf_clock_control_lf_on+0x120>)
   19daa:	f00a ffb1 	bl	24d10 <assert_post_action>
	switch (start_mode) {
   19dae:	b35e      	cbz	r6, 19e08 <z_nrf_clock_control_lf_on+0x9c>
   19db0:	1e73      	subs	r3, r6, #1
   19db2:	2b01      	cmp	r3, #1
   19db4:	d858      	bhi.n	19e68 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   19db6:	2e01      	cmp	r6, #1
   19db8:	d106      	bne.n	19dc8 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   19dba:	4b36      	ldr	r3, [pc, #216]	; (19e94 <z_nrf_clock_control_lf_on+0x128>)
   19dbc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   19dc0:	f003 0303 	and.w	r3, r3, #3
   19dc4:	2b02      	cmp	r3, #2
   19dc6:	d01f      	beq.n	19e08 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19dc8:	f00f fb0a 	bl	293e0 <k_is_in_isr>
   19dcc:	4605      	mov	r5, r0
   19dce:	b9e8      	cbnz	r0, 19e0c <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   19dd0:	4b31      	ldr	r3, [pc, #196]	; (19e98 <z_nrf_clock_control_lf_on+0x12c>)
   19dd2:	781b      	ldrb	r3, [r3, #0]
   19dd4:	b1d3      	cbz	r3, 19e0c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   19dd6:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   19dd8:	4607      	mov	r7, r0
   19dda:	4b2e      	ldr	r3, [pc, #184]	; (19e94 <z_nrf_clock_control_lf_on+0x128>)
   19ddc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19de0:	4c2c      	ldr	r4, [pc, #176]	; (19e94 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19de2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 19e9c <z_nrf_clock_control_lf_on+0x130>
   19de6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19dea:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   19dee:	03d2      	lsls	r2, r2, #15
   19df0:	d516      	bpl.n	19e20 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   19df2:	f003 0303 	and.w	r3, r3, #3
   19df6:	2b02      	cmp	r3, #2
   19df8:	d001      	beq.n	19dfe <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   19dfa:	2e01      	cmp	r6, #1
   19dfc:	d110      	bne.n	19e20 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   19dfe:	b375      	cbz	r5, 19e5e <z_nrf_clock_control_lf_on+0xf2>
   19e00:	f387 8811 	msr	BASEPRI, r7
   19e04:	f3bf 8f6f 	isb	sy
}
   19e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   19e0c:	f04f 0320 	mov.w	r3, #32
   19e10:	f3ef 8711 	mrs	r7, BASEPRI
   19e14:	f383 8812 	msr	BASEPRI_MAX, r3
   19e18:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19e1c:	2501      	movs	r5, #1
   19e1e:	e7df      	b.n	19de0 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19e20:	b1c5      	cbz	r5, 19e54 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   19e22:	4638      	mov	r0, r7
   19e24:	f7f6 f924 	bl	10070 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   19e28:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19e2c:	b2db      	uxtb	r3, r3
   19e2e:	2b01      	cmp	r3, #1
   19e30:	d1d9      	bne.n	19de6 <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19e32:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   19e36:	2a00      	cmp	r2, #0
   19e38:	d0d5      	beq.n	19de6 <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19e3a:	2200      	movs	r2, #0
   19e3c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19e40:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   19e44:	2202      	movs	r2, #2
   19e46:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   19e4a:	2220      	movs	r2, #32
   19e4c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19e50:	60a3      	str	r3, [r4, #8]
}
   19e52:	e7c8      	b.n	19de6 <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   19e54:	2100      	movs	r1, #0
   19e56:	2021      	movs	r0, #33	; 0x21
   19e58:	f007 fee0 	bl	21c1c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19e5c:	e7e4      	b.n	19e28 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   19e5e:	2202      	movs	r2, #2
   19e60:	4b0c      	ldr	r3, [pc, #48]	; (19e94 <z_nrf_clock_control_lf_on+0x128>)
   19e62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19e66:	e7cf      	b.n	19e08 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   19e68:	490d      	ldr	r1, [pc, #52]	; (19ea0 <z_nrf_clock_control_lf_on+0x134>)
   19e6a:	f240 2342 	movw	r3, #578	; 0x242
   19e6e:	4a07      	ldr	r2, [pc, #28]	; (19e8c <z_nrf_clock_control_lf_on+0x120>)
   19e70:	4807      	ldr	r0, [pc, #28]	; (19e90 <z_nrf_clock_control_lf_on+0x124>)
   19e72:	f00a ff54 	bl	24d1e <assert_print>
   19e76:	f240 2142 	movw	r1, #578	; 0x242
   19e7a:	e795      	b.n	19da8 <z_nrf_clock_control_lf_on+0x3c>
   19e7c:	20021244 	.word	0x20021244
   19e80:	20021234 	.word	0x20021234
   19e84:	20021268 	.word	0x20021268
   19e88:	0002c932 	.word	0x0002c932
   19e8c:	0002f50a 	.word	0x0002f50a
   19e90:	0002b6e9 	.word	0x0002b6e9
   19e94:	40005000 	.word	0x40005000
   19e98:	20022292 	.word	0x20022292
   19e9c:	e000e100 	.word	0xe000e100
   19ea0:	00030f5f 	.word	0x00030f5f

00019ea4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   19ea4:	b508      	push	{r3, lr}
   19ea6:	4807      	ldr	r0, [pc, #28]	; (19ec4 <uart_console_init+0x20>)
   19ea8:	f00f fa5d 	bl	29366 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   19eac:	b138      	cbz	r0, 19ebe <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   19eae:	4806      	ldr	r0, [pc, #24]	; (19ec8 <uart_console_init+0x24>)
   19eb0:	f7f7 f866 	bl	10f80 <__stdout_hook_install>
	__printk_hook_install(console_out);
   19eb4:	4804      	ldr	r0, [pc, #16]	; (19ec8 <uart_console_init+0x24>)
   19eb6:	f7f2 fecd 	bl	cc54 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   19eba:	2000      	movs	r0, #0
}
   19ebc:	bd08      	pop	{r3, pc}
		return -ENODEV;
   19ebe:	f06f 0012 	mvn.w	r0, #18
   19ec2:	e7fb      	b.n	19ebc <uart_console_init+0x18>
   19ec4:	0002a1e0 	.word	0x0002a1e0
   19ec8:	00019ecd 	.word	0x00019ecd

00019ecc <console_out>:
	if ('\n' == c) {
   19ecc:	280a      	cmp	r0, #10
{
   19ece:	b538      	push	{r3, r4, r5, lr}
   19ed0:	4604      	mov	r4, r0
   19ed2:	4d07      	ldr	r5, [pc, #28]	; (19ef0 <console_out+0x24>)
	if ('\n' == c) {
   19ed4:	d104      	bne.n	19ee0 <console_out+0x14>
	api->poll_out(dev, out_char);
   19ed6:	68ab      	ldr	r3, [r5, #8]
   19ed8:	210d      	movs	r1, #13
   19eda:	4628      	mov	r0, r5
   19edc:	69db      	ldr	r3, [r3, #28]
   19ede:	4798      	blx	r3
   19ee0:	68ab      	ldr	r3, [r5, #8]
   19ee2:	4803      	ldr	r0, [pc, #12]	; (19ef0 <console_out+0x24>)
   19ee4:	69db      	ldr	r3, [r3, #28]
   19ee6:	b2e1      	uxtb	r1, r4
   19ee8:	4798      	blx	r3
}
   19eea:	4620      	mov	r0, r4
   19eec:	bd38      	pop	{r3, r4, r5, pc}
   19eee:	bf00      	nop
   19ef0:	0002a1e0 	.word	0x0002a1e0

00019ef4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   19ef4:	b510      	push	{r4, lr}
	return port->data;
   19ef6:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   19ef8:	b961      	cbnz	r1, 19f14 <gpio_nrfx_manage_callback+0x20>
   19efa:	4920      	ldr	r1, [pc, #128]	; (19f7c <gpio_nrfx_manage_callback+0x88>)
   19efc:	232a      	movs	r3, #42	; 0x2a
   19efe:	4a20      	ldr	r2, [pc, #128]	; (19f80 <gpio_nrfx_manage_callback+0x8c>)
   19f00:	4820      	ldr	r0, [pc, #128]	; (19f84 <gpio_nrfx_manage_callback+0x90>)
   19f02:	f00a ff0c 	bl	24d1e <assert_print>
   19f06:	4820      	ldr	r0, [pc, #128]	; (19f88 <gpio_nrfx_manage_callback+0x94>)
   19f08:	f00a ff09 	bl	24d1e <assert_print>
   19f0c:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   19f0e:	481c      	ldr	r0, [pc, #112]	; (19f80 <gpio_nrfx_manage_callback+0x8c>)
   19f10:	f00a fefe 	bl	24d10 <assert_post_action>
   19f14:	6848      	ldr	r0, [r1, #4]
   19f16:	b950      	cbnz	r0, 19f2e <gpio_nrfx_manage_callback+0x3a>
   19f18:	491c      	ldr	r1, [pc, #112]	; (19f8c <gpio_nrfx_manage_callback+0x98>)
   19f1a:	232b      	movs	r3, #43	; 0x2b
   19f1c:	4a18      	ldr	r2, [pc, #96]	; (19f80 <gpio_nrfx_manage_callback+0x8c>)
   19f1e:	4819      	ldr	r0, [pc, #100]	; (19f84 <gpio_nrfx_manage_callback+0x90>)
   19f20:	f00a fefd 	bl	24d1e <assert_print>
   19f24:	481a      	ldr	r0, [pc, #104]	; (19f90 <gpio_nrfx_manage_callback+0x9c>)
   19f26:	f00a fefa 	bl	24d1e <assert_print>
   19f2a:	212b      	movs	r1, #43	; 0x2b
   19f2c:	e7ef      	b.n	19f0e <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   19f2e:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   19f30:	b1f8      	cbz	r0, 19f72 <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19f32:	4288      	cmp	r0, r1
   19f34:	d119      	bne.n	19f6a <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   19f36:	689c      	ldr	r4, [r3, #8]
	return node->next;
   19f38:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   19f3a:	42a1      	cmp	r1, r4
	list->head = node;
   19f3c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   19f3e:	d100      	bne.n	19f42 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   19f40:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19f42:	2000      	movs	r0, #0
   19f44:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   19f46:	b12a      	cbz	r2, 19f54 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   19f48:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   19f4a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   19f4c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   19f4e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19f50:	b902      	cbnz	r2, 19f54 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   19f52:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   19f54:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   19f56:	e010      	b.n	19f7a <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19f58:	4281      	cmp	r1, r0
   19f5a:	d106      	bne.n	19f6a <gpio_nrfx_manage_callback+0x76>
	return node->next;
   19f5c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   19f5e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   19f60:	6898      	ldr	r0, [r3, #8]
   19f62:	4281      	cmp	r1, r0
   19f64:	d1ed      	bne.n	19f42 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   19f66:	609c      	str	r4, [r3, #8]
}
   19f68:	e7eb      	b.n	19f42 <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   19f6a:	4604      	mov	r4, r0
   19f6c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19f6e:	2800      	cmp	r0, #0
   19f70:	d1f2      	bne.n	19f58 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   19f72:	2a00      	cmp	r2, #0
   19f74:	d1e8      	bne.n	19f48 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   19f76:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   19f7a:	bd10      	pop	{r4, pc}
   19f7c:	0002bde3 	.word	0x0002bde3
   19f80:	0002f5a5 	.word	0x0002f5a5
   19f84:	0002b6e9 	.word	0x0002b6e9
   19f88:	0002f5e1 	.word	0x0002f5e1
   19f8c:	0002f5f0 	.word	0x0002f5f0
   19f90:	0002f602 	.word	0x0002f602

00019f94 <gpio_nrfx_pin_interrupt_configure>:
{
   19f94:	b530      	push	{r4, r5, lr}
	return port->config;
   19f96:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19f98:	f001 041f 	and.w	r4, r1, #31
   19f9c:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   19f9e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   19fa2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19fa4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   19fa8:	d105      	bne.n	19fb6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   19faa:	4620      	mov	r0, r4
   19fac:	f003 f990 	bl	1d2d0 <nrfx_gpiote_trigger_disable>
		return 0;
   19fb0:	2000      	movs	r0, #0
}
   19fb2:	b005      	add	sp, #20
   19fb4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   19fb6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   19fb8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   19fbc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   19fc0:	d114      	bne.n	19fec <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   19fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   19fc6:	bf0c      	ite	eq
   19fc8:	2304      	moveq	r3, #4
   19fca:	2305      	movne	r3, #5
   19fcc:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19fd0:	2300      	movs	r3, #0
   19fd2:	4620      	mov	r0, r4
   19fd4:	4619      	mov	r1, r3
   19fd6:	aa02      	add	r2, sp, #8
   19fd8:	f002 ff84 	bl	1cee4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19fdc:	4b2a      	ldr	r3, [pc, #168]	; (1a088 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   19fde:	4298      	cmp	r0, r3
   19fe0:	d14f      	bne.n	1a082 <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   19fe2:	2101      	movs	r1, #1
   19fe4:	4620      	mov	r0, r4
   19fe6:	f003 f909 	bl	1d1fc <nrfx_gpiote_trigger_enable>
	return 0;
   19fea:	e7e1      	b.n	19fb0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19fec:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   19ff0:	d024      	beq.n	1a03c <gpio_nrfx_pin_interrupt_configure+0xa8>
   19ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   19ff6:	bf14      	ite	ne
   19ff8:	2301      	movne	r3, #1
   19ffa:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   19ffc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1a000:	6883      	ldr	r3, [r0, #8]
   1a002:	40cb      	lsrs	r3, r1
   1a004:	07d8      	lsls	r0, r3, #31
   1a006:	d4e3      	bmi.n	19fd0 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1a008:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1a00c:	d1e0      	bne.n	19fd0 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1a00e:	0962      	lsrs	r2, r4, #5
   1a010:	f004 031f 	and.w	r3, r4, #31
   1a014:	d014      	beq.n	1a040 <gpio_nrfx_pin_interrupt_configure+0xac>
   1a016:	2a01      	cmp	r2, #1
   1a018:	d104      	bne.n	1a024 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1a01a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a01e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1a020:	07d1      	lsls	r1, r2, #31
   1a022:	d414      	bmi.n	1a04e <gpio_nrfx_pin_interrupt_configure+0xba>
   1a024:	4919      	ldr	r1, [pc, #100]	; (1a08c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1a026:	481a      	ldr	r0, [pc, #104]	; (1a090 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1a028:	f240 2347 	movw	r3, #583	; 0x247
   1a02c:	4a19      	ldr	r2, [pc, #100]	; (1a094 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1a02e:	f00a fe76 	bl	24d1e <assert_print>
   1a032:	f240 2147 	movw	r1, #583	; 0x247
   1a036:	4817      	ldr	r0, [pc, #92]	; (1a094 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1a038:	f00a fe6a 	bl	24d10 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1a03c:	2303      	movs	r3, #3
   1a03e:	e7dd      	b.n	19ffc <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1a040:	f04f 32ff 	mov.w	r2, #4294967295
   1a044:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1a046:	07d2      	lsls	r2, r2, #31
   1a048:	d5ec      	bpl.n	1a024 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1a04a:	4a13      	ldr	r2, [pc, #76]	; (1a098 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1a04c:	e000      	b.n	1a050 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1a04e:	4a13      	ldr	r2, [pc, #76]	; (1a09c <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a050:	3380      	adds	r3, #128	; 0x80
   1a052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1a056:	07db      	lsls	r3, r3, #31
   1a058:	d4ba      	bmi.n	19fd0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a05a:	f10d 0507 	add.w	r5, sp, #7
   1a05e:	4629      	mov	r1, r5
   1a060:	4620      	mov	r0, r4
   1a062:	f003 f865 	bl	1d130 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1a066:	4b0e      	ldr	r3, [pc, #56]	; (1a0a0 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1a068:	4298      	cmp	r0, r3
   1a06a:	d001      	beq.n	1a070 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1a06c:	9503      	str	r5, [sp, #12]
   1a06e:	e7af      	b.n	19fd0 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1a070:	4628      	mov	r0, r5
   1a072:	f003 f8bd 	bl	1d1f0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1a076:	4b04      	ldr	r3, [pc, #16]	; (1a088 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1a078:	4298      	cmp	r0, r3
   1a07a:	d0f7      	beq.n	1a06c <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1a07c:	f06f 000b 	mvn.w	r0, #11
   1a080:	e797      	b.n	19fb2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1a082:	f06f 0015 	mvn.w	r0, #21
   1a086:	e794      	b.n	19fb2 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1a088:	0bad0000 	.word	0x0bad0000
   1a08c:	0002f64c 	.word	0x0002f64c
   1a090:	0002b6e9 	.word	0x0002b6e9
   1a094:	0002f619 	.word	0x0002f619
   1a098:	40842500 	.word	0x40842500
   1a09c:	40842800 	.word	0x40842800
   1a0a0:	0bad0004 	.word	0x0bad0004

0001a0a4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1a0a4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1a0a6:	f003 f893 	bl	1d1d0 <nrfx_gpiote_is_init>
   1a0aa:	4604      	mov	r4, r0
   1a0ac:	b968      	cbnz	r0, 1a0ca <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1a0ae:	f003 f867 	bl	1d180 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1a0b2:	4b08      	ldr	r3, [pc, #32]	; (1a0d4 <gpio_nrfx_init+0x30>)
   1a0b4:	4298      	cmp	r0, r3
   1a0b6:	d10a      	bne.n	1a0ce <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1a0b8:	4621      	mov	r1, r4
   1a0ba:	4807      	ldr	r0, [pc, #28]	; (1a0d8 <gpio_nrfx_init+0x34>)
   1a0bc:	f003 f832 	bl	1d124 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a0c0:	4622      	mov	r2, r4
   1a0c2:	2105      	movs	r1, #5
   1a0c4:	202f      	movs	r0, #47	; 0x2f
   1a0c6:	f7f6 f85d 	bl	10184 <z_arm_irq_priority_set>
		return 0;
   1a0ca:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1a0cc:	bd10      	pop	{r4, pc}
		return -EIO;
   1a0ce:	f06f 0004 	mvn.w	r0, #4
   1a0d2:	e7fb      	b.n	1a0cc <gpio_nrfx_init+0x28>
   1a0d4:	0bad0000 	.word	0x0bad0000
   1a0d8:	0001a0dd 	.word	0x0001a0dd

0001a0dc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a0dc:	0942      	lsrs	r2, r0, #5
{
   1a0de:	4603      	mov	r3, r0
   1a0e0:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a0e2:	d002      	beq.n	1a0ea <nrfx_gpio_handler+0xe>
   1a0e4:	2a01      	cmp	r2, #1
   1a0e6:	d01e      	beq.n	1a126 <nrfx_gpio_handler+0x4a>
}
   1a0e8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a0ea:	4e14      	ldr	r6, [pc, #80]	; (1a13c <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1a0ec:	6932      	ldr	r2, [r6, #16]
   1a0ee:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a0f0:	2900      	cmp	r1, #0
   1a0f2:	d0f9      	beq.n	1a0e8 <nrfx_gpio_handler+0xc>
   1a0f4:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1a0f6:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1a0fa:	680c      	ldr	r4, [r1, #0]
   1a0fc:	409d      	lsls	r5, r3
   1a0fe:	2900      	cmp	r1, #0
   1a100:	d0f2      	beq.n	1a0e8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1a102:	688a      	ldr	r2, [r1, #8]
   1a104:	402a      	ands	r2, r5
   1a106:	d012      	beq.n	1a12e <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1a108:	684b      	ldr	r3, [r1, #4]
   1a10a:	b973      	cbnz	r3, 1a12a <nrfx_gpio_handler+0x4e>
   1a10c:	490c      	ldr	r1, [pc, #48]	; (1a140 <nrfx_gpio_handler+0x64>)
   1a10e:	234d      	movs	r3, #77	; 0x4d
   1a110:	4a0c      	ldr	r2, [pc, #48]	; (1a144 <nrfx_gpio_handler+0x68>)
   1a112:	480d      	ldr	r0, [pc, #52]	; (1a148 <nrfx_gpio_handler+0x6c>)
   1a114:	f00a fe03 	bl	24d1e <assert_print>
   1a118:	480c      	ldr	r0, [pc, #48]	; (1a14c <nrfx_gpio_handler+0x70>)
   1a11a:	f00a fe00 	bl	24d1e <assert_print>
   1a11e:	214d      	movs	r1, #77	; 0x4d
   1a120:	4808      	ldr	r0, [pc, #32]	; (1a144 <nrfx_gpio_handler+0x68>)
   1a122:	f00a fdf5 	bl	24d10 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a126:	4e0a      	ldr	r6, [pc, #40]	; (1a150 <nrfx_gpio_handler+0x74>)
   1a128:	e7e0      	b.n	1a0ec <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1a12a:	4630      	mov	r0, r6
   1a12c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a12e:	b11c      	cbz	r4, 1a138 <nrfx_gpio_handler+0x5c>
   1a130:	6823      	ldr	r3, [r4, #0]
   1a132:	4621      	mov	r1, r4
   1a134:	461c      	mov	r4, r3
   1a136:	e7e2      	b.n	1a0fe <nrfx_gpio_handler+0x22>
   1a138:	4623      	mov	r3, r4
   1a13a:	e7fa      	b.n	1a132 <nrfx_gpio_handler+0x56>
   1a13c:	0002a180 	.word	0x0002a180
   1a140:	0003037b 	.word	0x0003037b
   1a144:	0002f5a5 	.word	0x0002f5a5
   1a148:	0002b6e9 	.word	0x0002b6e9
   1a14c:	0002f602 	.word	0x0002f602
   1a150:	0002a168 	.word	0x0002a168

0001a154 <gpio_nrfx_pin_configure>:
{
   1a154:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1a158:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a15c:	f001 051f 	and.w	r5, r1, #31
   1a160:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1a164:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a166:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1a16a:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a16c:	4628      	mov	r0, r5
   1a16e:	f10d 0103 	add.w	r1, sp, #3
   1a172:	f002 ffdd 	bl	1d130 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1a176:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a17a:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1a17c:	d115      	bne.n	1a1aa <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1a17e:	4628      	mov	r0, r5
   1a180:	f003 f8d0 	bl	1d324 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1a184:	4b48      	ldr	r3, [pc, #288]	; (1a2a8 <gpio_nrfx_pin_configure+0x154>)
   1a186:	429e      	cmp	r6, r3
   1a188:	d170      	bne.n	1a26c <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1a18a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1a18e:	f003 f829 	bl	1d1e4 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1a192:	42b0      	cmp	r0, r6
   1a194:	d06a      	beq.n	1a26c <gpio_nrfx_pin_configure+0x118>
   1a196:	4945      	ldr	r1, [pc, #276]	; (1a2ac <gpio_nrfx_pin_configure+0x158>)
   1a198:	236a      	movs	r3, #106	; 0x6a
   1a19a:	4a45      	ldr	r2, [pc, #276]	; (1a2b0 <gpio_nrfx_pin_configure+0x15c>)
   1a19c:	4845      	ldr	r0, [pc, #276]	; (1a2b4 <gpio_nrfx_pin_configure+0x160>)
   1a19e:	f00a fdbe 	bl	24d1e <assert_print>
   1a1a2:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1a1a4:	4842      	ldr	r0, [pc, #264]	; (1a2b0 <gpio_nrfx_pin_configure+0x15c>)
   1a1a6:	f00a fdb3 	bl	24d10 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a1aa:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a1ac:	4628      	mov	r0, r5
   1a1ae:	4619      	mov	r1, r3
   1a1b0:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a1b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a1b6:	f002 fe95 	bl	1cee4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1a1ba:	4b3b      	ldr	r3, [pc, #236]	; (1a2a8 <gpio_nrfx_pin_configure+0x154>)
   1a1bc:	4298      	cmp	r0, r3
   1a1be:	d004      	beq.n	1a1ca <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1a1c0:	f06f 0015 	mvn.w	r0, #21
}
   1a1c4:	b004      	add	sp, #16
   1a1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1a1ca:	4286      	cmp	r6, r0
   1a1cc:	d10d      	bne.n	1a1ea <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1a1ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1a1d2:	f003 f807 	bl	1d1e4 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1a1d6:	42b0      	cmp	r0, r6
   1a1d8:	d007      	beq.n	1a1ea <gpio_nrfx_pin_configure+0x96>
   1a1da:	4934      	ldr	r1, [pc, #208]	; (1a2ac <gpio_nrfx_pin_configure+0x158>)
   1a1dc:	237c      	movs	r3, #124	; 0x7c
   1a1de:	4a34      	ldr	r2, [pc, #208]	; (1a2b0 <gpio_nrfx_pin_configure+0x15c>)
   1a1e0:	4834      	ldr	r0, [pc, #208]	; (1a2b4 <gpio_nrfx_pin_configure+0x160>)
   1a1e2:	f00a fd9c 	bl	24d1e <assert_print>
   1a1e6:	217c      	movs	r1, #124	; 0x7c
   1a1e8:	e7dc      	b.n	1a1a4 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1a1ea:	03a6      	lsls	r6, r4, #14
   1a1ec:	d54c      	bpl.n	1a288 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a1ee:	f240 3306 	movw	r3, #774	; 0x306
   1a1f2:	4023      	ands	r3, r4
   1a1f4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1a1f8:	d019      	beq.n	1a22e <gpio_nrfx_pin_configure+0xda>
   1a1fa:	d80c      	bhi.n	1a216 <gpio_nrfx_pin_configure+0xc2>
   1a1fc:	2b06      	cmp	r3, #6
   1a1fe:	d017      	beq.n	1a230 <gpio_nrfx_pin_configure+0xdc>
   1a200:	d804      	bhi.n	1a20c <gpio_nrfx_pin_configure+0xb8>
   1a202:	b1ab      	cbz	r3, 1a230 <gpio_nrfx_pin_configure+0xdc>
   1a204:	2b02      	cmp	r3, #2
   1a206:	d1db      	bne.n	1a1c0 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1a208:	2304      	movs	r3, #4
   1a20a:	e011      	b.n	1a230 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a20c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1a210:	d1d6      	bne.n	1a1c0 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1a212:	2301      	movs	r3, #1
   1a214:	e00c      	b.n	1a230 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a216:	f240 2202 	movw	r2, #514	; 0x202
   1a21a:	4293      	cmp	r3, r2
   1a21c:	d028      	beq.n	1a270 <gpio_nrfx_pin_configure+0x11c>
   1a21e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1a222:	d027      	beq.n	1a274 <gpio_nrfx_pin_configure+0x120>
   1a224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1a228:	d1ca      	bne.n	1a1c0 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1a22a:	2302      	movs	r3, #2
   1a22c:	e000      	b.n	1a230 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1a22e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1a230:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1a234:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1a238:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1a23c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1a23e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1a242:	bf4c      	ite	mi
   1a244:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1a246:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1a24a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1a24c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1a250:	d512      	bpl.n	1a278 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1a252:	2301      	movs	r3, #1
   1a254:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1a258:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1a25a:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1a25c:	2200      	movs	r2, #0
   1a25e:	4628      	mov	r0, r5
   1a260:	a901      	add	r1, sp, #4
   1a262:	f002 fee7 	bl	1d034 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1a266:	4b10      	ldr	r3, [pc, #64]	; (1a2a8 <gpio_nrfx_pin_configure+0x154>)
   1a268:	4298      	cmp	r0, r3
   1a26a:	d1a9      	bne.n	1a1c0 <gpio_nrfx_pin_configure+0x6c>
   1a26c:	2000      	movs	r0, #0
   1a26e:	e7a9      	b.n	1a1c4 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1a270:	2305      	movs	r3, #5
   1a272:	e7dd      	b.n	1a230 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a274:	2303      	movs	r3, #3
   1a276:	e7db      	b.n	1a230 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1a278:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1a27a:	bf41      	itttt	mi
   1a27c:	2301      	movmi	r3, #1
   1a27e:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1a282:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1a284:	60d3      	strmi	r3, [r2, #12]
}
   1a286:	e7e9      	b.n	1a25c <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1a288:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a28a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1a28e:	bf4c      	ite	mi
   1a290:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1a292:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a296:	461a      	mov	r2, r3
   1a298:	4628      	mov	r0, r5
   1a29a:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1a29c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a2a0:	f002 fe20 	bl	1cee4 <nrfx_gpiote_input_configure>
   1a2a4:	e7df      	b.n	1a266 <gpio_nrfx_pin_configure+0x112>
   1a2a6:	bf00      	nop
   1a2a8:	0bad0000 	.word	0x0bad0000
   1a2ac:	0002c69b 	.word	0x0002c69b
   1a2b0:	0002f66f 	.word	0x0002f66f
   1a2b4:	0002b6e9 	.word	0x0002b6e9

0001a2b8 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1a2b8:	4603      	mov	r3, r0
   1a2ba:	b510      	push	{r4, lr}
   1a2bc:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a2be:	7919      	ldrb	r1, [r3, #4]
   1a2c0:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1a2c2:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a2c4:	fa03 f101 	lsl.w	r1, r3, r1
   1a2c8:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1a2ca:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a2cc:	681b      	ldr	r3, [r3, #0]
   1a2ce:	4219      	tst	r1, r3
   1a2d0:	d10e      	bne.n	1a2f0 <gpio_pin_set_dt.isra.0+0x38>
   1a2d2:	490e      	ldr	r1, [pc, #56]	; (1a30c <gpio_pin_set_dt.isra.0+0x54>)
   1a2d4:	f240 533d 	movw	r3, #1341	; 0x53d
   1a2d8:	4a0d      	ldr	r2, [pc, #52]	; (1a310 <gpio_pin_set_dt.isra.0+0x58>)
   1a2da:	480e      	ldr	r0, [pc, #56]	; (1a314 <gpio_pin_set_dt.isra.0+0x5c>)
   1a2dc:	f00a fd1f 	bl	24d1e <assert_print>
   1a2e0:	480d      	ldr	r0, [pc, #52]	; (1a318 <gpio_pin_set_dt.isra.0+0x60>)
   1a2e2:	f00a fd1c 	bl	24d1e <assert_print>
   1a2e6:	f240 513d 	movw	r1, #1341	; 0x53d
   1a2ea:	4809      	ldr	r0, [pc, #36]	; (1a310 <gpio_pin_set_dt.isra.0+0x58>)
   1a2ec:	f00a fd10 	bl	24d10 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1a2f0:	6823      	ldr	r3, [r4, #0]
   1a2f2:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1a2f4:	bf18      	it	ne
   1a2f6:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1a2fa:	b122      	cbz	r2, 1a306 <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1a2fc:	6883      	ldr	r3, [r0, #8]
   1a2fe:	68db      	ldr	r3, [r3, #12]
}
   1a300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1a304:	4718      	bx	r3
   1a306:	6883      	ldr	r3, [r0, #8]
   1a308:	691b      	ldr	r3, [r3, #16]
   1a30a:	e7f9      	b.n	1a300 <gpio_pin_set_dt.isra.0+0x48>
   1a30c:	0002b6ab 	.word	0x0002b6ab
   1a310:	0002b67a 	.word	0x0002b67a
   1a314:	0002b6e9 	.word	0x0002b6e9
   1a318:	0002b706 	.word	0x0002b706

0001a31c <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   1a320:	6844      	ldr	r4, [r0, #4]
{
   1a322:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1a324:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1a326:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1a328:	2100      	movs	r1, #0
   1a32a:	4630      	mov	r0, r6
   1a32c:	aa07      	add	r2, sp, #28
   1a32e:	f00e f90e 	bl	2854e <pinctrl_lookup_state>
	if (ret < 0) {
   1a332:	2800      	cmp	r0, #0
   1a334:	db2a      	blt.n	1a38c <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1a336:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a338:	6832      	ldr	r2, [r6, #0]
   1a33a:	7919      	ldrb	r1, [r3, #4]
   1a33c:	6818      	ldr	r0, [r3, #0]
   1a33e:	f00e f919 	bl	28574 <pinctrl_configure_pins>
	if (err < 0) {
   1a342:	2800      	cmp	r0, #0
   1a344:	db22      	blt.n	1a38c <spi_nrfx_init+0x70>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a346:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1a348:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a34a:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1a34c:	68ac      	ldr	r4, [r5, #8]
   1a34e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1a352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1a356:	429c      	cmp	r4, r3
   1a358:	d304      	bcc.n	1a364 <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1a35a:	4628      	mov	r0, r5
   1a35c:	f00d fdd9 	bl	27f12 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1a360:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1a362:	e013      	b.n	1a38c <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   1a364:	6820      	ldr	r0, [r4, #0]
   1a366:	f00e fffe 	bl	29366 <z_device_is_ready>
   1a36a:	4603      	mov	r3, r0
   1a36c:	b988      	cbnz	r0, 1a392 <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1a36e:	7922      	ldrb	r2, [r4, #4]
   1a370:	4932      	ldr	r1, [pc, #200]	; (1a43c <spi_nrfx_init+0x120>)
   1a372:	9204      	str	r2, [sp, #16]
   1a374:	6822      	ldr	r2, [r4, #0]
   1a376:	6812      	ldr	r2, [r2, #0]
   1a378:	9000      	str	r0, [sp, #0]
   1a37a:	9203      	str	r2, [sp, #12]
   1a37c:	4a30      	ldr	r2, [pc, #192]	; (1a440 <spi_nrfx_init+0x124>)
   1a37e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1a382:	2201      	movs	r2, #1
   1a384:	f00d fd93 	bl	27eae <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   1a388:	f06f 0012 	mvn.w	r0, #18
#endif
}
   1a38c:	b008      	add	sp, #32
   1a38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   1a392:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1a394:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1a396:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1a398:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1a39c:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1a39e:	f8d0 e010 	ldr.w	lr, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1a3a2:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1a3a6:	d10e      	bne.n	1a3c6 <spi_nrfx_init+0xaa>
   1a3a8:	4926      	ldr	r1, [pc, #152]	; (1a444 <spi_nrfx_init+0x128>)
   1a3aa:	f240 23b7 	movw	r3, #695	; 0x2b7
   1a3ae:	4a26      	ldr	r2, [pc, #152]	; (1a448 <spi_nrfx_init+0x12c>)
   1a3b0:	4826      	ldr	r0, [pc, #152]	; (1a44c <spi_nrfx_init+0x130>)
   1a3b2:	f00a fcb4 	bl	24d1e <assert_print>
   1a3b6:	4826      	ldr	r0, [pc, #152]	; (1a450 <spi_nrfx_init+0x134>)
   1a3b8:	f00a fcb1 	bl	24d1e <assert_print>
   1a3bc:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1a3c0:	4821      	ldr	r0, [pc, #132]	; (1a448 <spi_nrfx_init+0x12c>)
   1a3c2:	f00a fca5 	bl	24d10 <assert_post_action>
   1a3c6:	f003 0206 	and.w	r2, r3, #6
   1a3ca:	2a04      	cmp	r2, #4
   1a3cc:	d109      	bne.n	1a3e2 <spi_nrfx_init+0xc6>
   1a3ce:	4921      	ldr	r1, [pc, #132]	; (1a454 <spi_nrfx_init+0x138>)
   1a3d0:	f240 23bf 	movw	r3, #703	; 0x2bf
   1a3d4:	4a1c      	ldr	r2, [pc, #112]	; (1a448 <spi_nrfx_init+0x12c>)
   1a3d6:	481d      	ldr	r0, [pc, #116]	; (1a44c <spi_nrfx_init+0x130>)
   1a3d8:	f00a fca1 	bl	24d1e <assert_print>
   1a3dc:	f240 21bf 	movw	r1, #703	; 0x2bf
   1a3e0:	e7ee      	b.n	1a3c0 <spi_nrfx_init+0xa4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a3e2:	683f      	ldr	r7, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a3e4:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a3e6:	fa06 fc01 	lsl.w	ip, r6, r1
	return gpio_pin_configure(spec->port,
   1a3ea:	bf54      	ite	pl
   1a3ec:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a3f0:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a3f4:	ea1c 0f07 	tst.w	ip, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a3f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a3fc:	d10c      	bne.n	1a418 <spi_nrfx_init+0xfc>
   1a3fe:	4916      	ldr	r1, [pc, #88]	; (1a458 <spi_nrfx_init+0x13c>)
   1a400:	f240 23d2 	movw	r3, #722	; 0x2d2
   1a404:	4a10      	ldr	r2, [pc, #64]	; (1a448 <spi_nrfx_init+0x12c>)
   1a406:	4811      	ldr	r0, [pc, #68]	; (1a44c <spi_nrfx_init+0x130>)
   1a408:	f00a fc89 	bl	24d1e <assert_print>
   1a40c:	4813      	ldr	r0, [pc, #76]	; (1a45c <spi_nrfx_init+0x140>)
   1a40e:	f00a fc86 	bl	24d1e <assert_print>
   1a412:	f240 21d2 	movw	r1, #722	; 0x2d2
   1a416:	e7d3      	b.n	1a3c0 <spi_nrfx_init+0xa4>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a418:	f8de 7000 	ldr.w	r7, [lr]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a41c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a41e:	bf4c      	ite	mi
   1a420:	ea4c 0707 	orrmi.w	r7, ip, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a424:	ea27 070c 	bicpl.w	r7, r7, ip
   1a428:	f8ce 7000 	str.w	r7, [lr]
	return api->pin_configure(port, pin, flags);
   1a42c:	f8d8 3000 	ldr.w	r3, [r8]
   1a430:	4798      	blx	r3
		if (ret < 0) {
   1a432:	2800      	cmp	r0, #0
   1a434:	dbaa      	blt.n	1a38c <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1a436:	3408      	adds	r4, #8
   1a438:	e789      	b.n	1a34e <spi_nrfx_init+0x32>
   1a43a:	bf00      	nop
   1a43c:	0002a820 	.word	0x0002a820
   1a440:	0002f6b3 	.word	0x0002f6b3
   1a444:	0002b99c 	.word	0x0002b99c
   1a448:	0002b67a 	.word	0x0002b67a
   1a44c:	0002b6e9 	.word	0x0002b6e9
   1a450:	0002b9d5 	.word	0x0002b9d5
   1a454:	0002ba99 	.word	0x0002ba99
   1a458:	0002b6ab 	.word	0x0002b6ab
   1a45c:	0002b706 	.word	0x0002b706

0001a460 <transfer_next_chunk>:
{
   1a460:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1a462:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a464:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1a466:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1a468:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1a46a:	b98d      	cbnz	r5, 1a490 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1a46c:	2b00      	cmp	r3, #0
   1a46e:	d137      	bne.n	1a4e0 <transfer_next_chunk+0x80>
	int error = 0;
   1a470:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1a472:	2200      	movs	r2, #0
   1a474:	4620      	mov	r0, r4
   1a476:	4611      	mov	r1, r2
   1a478:	f00d fd29 	bl	27ece <_spi_context_cs_control>
	ctx->sync_status = status;
   1a47c:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1a47e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a482:	f005 fcd7 	bl	1fe34 <z_impl_k_sem_give>
	dev_data->busy = false;
   1a486:	2300      	movs	r3, #0
   1a488:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1a48c:	b004      	add	sp, #16
   1a48e:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1a490:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1a492:	bb0b      	cbnz	r3, 1a4d8 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1a494:	bb39      	cbnz	r1, 1a4e6 <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1a496:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a49a:	42aa      	cmp	r2, r5
   1a49c:	bf28      	it	cs
   1a49e:	462a      	movcs	r2, r5
   1a4a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1a4a2:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1a4a4:	9100      	str	r1, [sp, #0]
   1a4a6:	b11b      	cbz	r3, 1a4b0 <transfer_next_chunk+0x50>
   1a4a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1a4aa:	2b00      	cmp	r3, #0
   1a4ac:	bf18      	it	ne
   1a4ae:	4613      	movne	r3, r2
   1a4b0:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1a4b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a4b4:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1a4b6:	b11b      	cbz	r3, 1a4c0 <transfer_next_chunk+0x60>
   1a4b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a4ba:	2b00      	cmp	r3, #0
   1a4bc:	bf18      	it	ne
   1a4be:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1a4c0:	2200      	movs	r2, #0
   1a4c2:	4669      	mov	r1, sp
   1a4c4:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a4c6:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1a4c8:	f003 fed0 	bl	1e26c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1a4cc:	4b0d      	ldr	r3, [pc, #52]	; (1a504 <transfer_next_chunk+0xa4>)
   1a4ce:	4298      	cmp	r0, r3
   1a4d0:	d0dc      	beq.n	1a48c <transfer_next_chunk+0x2c>
			error = -EIO;
   1a4d2:	f06f 0504 	mvn.w	r5, #4
   1a4d6:	e7cc      	b.n	1a472 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1a4d8:	429d      	cmp	r5, r3
   1a4da:	bf28      	it	cs
   1a4dc:	461d      	movcs	r5, r3
   1a4de:	e7d9      	b.n	1a494 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1a4e0:	461d      	mov	r5, r3
   1a4e2:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1a4e4:	e7d7      	b.n	1a496 <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a4e6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1a4ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a4ee:	d0d2      	beq.n	1a496 <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1a4f0:	2d08      	cmp	r5, #8
   1a4f2:	bf28      	it	cs
   1a4f4:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a4f6:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1a4f8:	462a      	mov	r2, r5
   1a4fa:	f00f f976 	bl	297ea <memcpy>
			tx_buf = dev_data->buffer;
   1a4fe:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1a500:	e7c9      	b.n	1a496 <transfer_next_chunk+0x36>
   1a502:	bf00      	nop
   1a504:	0bad0000 	.word	0x0bad0000

0001a508 <event_handler>:
{
   1a508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1a50a:	7803      	ldrb	r3, [r0, #0]
{
   1a50c:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1a50e:	2b00      	cmp	r3, #0
   1a510:	d154      	bne.n	1a5bc <event_handler+0xb4>
	if (!ctx->tx_len) {
   1a512:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a514:	6e89      	ldr	r1, [r1, #104]	; 0x68
   1a516:	b152      	cbz	r2, 1a52e <event_handler+0x26>
	if (len > ctx->tx_len) {
   1a518:	4291      	cmp	r1, r2
   1a51a:	d91d      	bls.n	1a558 <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   1a51c:	4a28      	ldr	r2, [pc, #160]	; (1a5c0 <event_handler+0xb8>)
   1a51e:	4618      	mov	r0, r3
   1a520:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a524:	4927      	ldr	r1, [pc, #156]	; (1a5c4 <event_handler+0xbc>)
   1a526:	2201      	movs	r2, #1
   1a528:	9300      	str	r3, [sp, #0]
   1a52a:	f00d fcc0 	bl	27eae <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   1a52e:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a530:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1a532:	b15b      	cbz	r3, 1a54c <event_handler+0x44>
	if (len > ctx->rx_len) {
   1a534:	429a      	cmp	r2, r3
   1a536:	d928      	bls.n	1a58a <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   1a538:	4b21      	ldr	r3, [pc, #132]	; (1a5c0 <event_handler+0xb8>)
   1a53a:	2201      	movs	r2, #1
   1a53c:	9302      	str	r3, [sp, #8]
   1a53e:	2300      	movs	r3, #0
   1a540:	4920      	ldr	r1, [pc, #128]	; (1a5c4 <event_handler+0xbc>)
   1a542:	4618      	mov	r0, r3
   1a544:	e9cd 3300 	strd	r3, r3, [sp]
   1a548:	f00d fcb1 	bl	27eae <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1a54c:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1a54e:	b004      	add	sp, #16
   1a550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1a554:	f7ff bf84 	b.w	1a460 <transfer_next_chunk>
	ctx->tx_len -= len;
   1a558:	1a52      	subs	r2, r2, r1
   1a55a:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   1a55c:	b97a      	cbnz	r2, 1a57e <event_handler+0x76>
		++ctx->current_tx;
   1a55e:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1a560:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   1a564:	3308      	adds	r3, #8
   1a566:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   1a568:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1a56a:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   1a56e:	3b01      	subs	r3, #1
   1a570:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1a572:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1a576:	f00d fc87 	bl	27e88 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1a57a:	6560      	str	r0, [r4, #84]	; 0x54
   1a57c:	e7d7      	b.n	1a52e <event_handler+0x26>
	} else if (ctx->tx_buf) {
   1a57e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1a580:	2b00      	cmp	r3, #0
   1a582:	d0d4      	beq.n	1a52e <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   1a584:	440b      	add	r3, r1
   1a586:	6563      	str	r3, [r4, #84]	; 0x54
   1a588:	e7d1      	b.n	1a52e <event_handler+0x26>
	ctx->rx_len -= len;
   1a58a:	1a9b      	subs	r3, r3, r2
   1a58c:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1a58e:	b97b      	cbnz	r3, 1a5b0 <event_handler+0xa8>
		++ctx->current_rx;
   1a590:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1a592:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1a596:	3308      	adds	r3, #8
   1a598:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1a59a:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1a59c:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1a5a0:	3b01      	subs	r3, #1
   1a5a2:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1a5a4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a5a8:	f00d fc6e 	bl	27e88 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1a5ac:	65e0      	str	r0, [r4, #92]	; 0x5c
   1a5ae:	e7cd      	b.n	1a54c <event_handler+0x44>
	} else if (ctx->rx_buf) {
   1a5b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a5b2:	2b00      	cmp	r3, #0
   1a5b4:	d0ca      	beq.n	1a54c <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   1a5b6:	4413      	add	r3, r2
   1a5b8:	65e3      	str	r3, [r4, #92]	; 0x5c
   1a5ba:	e7c7      	b.n	1a54c <event_handler+0x44>
}
   1a5bc:	b004      	add	sp, #16
   1a5be:	bd10      	pop	{r4, pc}
   1a5c0:	0002f6d7 	.word	0x0002f6d7
   1a5c4:	0002a820 	.word	0x0002a820

0001a5c8 <spi_nrfx_transceive>:
{
   1a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5cc:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a5ce:	888b      	ldrh	r3, [r1, #4]
   1a5d0:	460f      	mov	r7, r1
   1a5d2:	0499      	lsls	r1, r3, #18
   1a5d4:	4680      	mov	r8, r0
   1a5d6:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   1a5d8:	6904      	ldr	r4, [r0, #16]
{
   1a5da:	b08f      	sub	sp, #60	; 0x3c
   1a5dc:	d435      	bmi.n	1a64a <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1a5de:	f04f 32ff 	mov.w	r2, #4294967295
   1a5e2:	f04f 33ff 	mov.w	r3, #4294967295
   1a5e6:	f104 0010 	add.w	r0, r4, #16
   1a5ea:	f005 fc67 	bl	1febc <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1a5ee:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a5f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1a5f4:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1a5f8:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a5fa:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1a5fc:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   1a600:	9306      	str	r3, [sp, #24]
   1a602:	b123      	cbz	r3, 1a60e <spi_nrfx_transceive+0x46>
   1a604:	f8da 3000 	ldr.w	r3, [sl]
   1a608:	429f      	cmp	r7, r3
   1a60a:	f000 80da 	beq.w	1a7c2 <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1a60e:	88be      	ldrh	r6, [r7, #4]
   1a610:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   1a614:	d020      	beq.n	1a658 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1a616:	4ba1      	ldr	r3, [pc, #644]	; (1a89c <spi_nrfx_transceive+0x2d4>)
   1a618:	2201      	movs	r2, #1
   1a61a:	9302      	str	r3, [sp, #8]
   1a61c:	2300      	movs	r3, #0
   1a61e:	49a0      	ldr	r1, [pc, #640]	; (1a8a0 <spi_nrfx_transceive+0x2d8>)
   1a620:	4618      	mov	r0, r3
   1a622:	e9cd 3300 	strd	r3, r3, [sp]
   1a626:	f00d fc42 	bl	27eae <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1a62a:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1a62e:	6823      	ldr	r3, [r4, #0]
   1a630:	889b      	ldrh	r3, [r3, #4]
   1a632:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1a636:	d104      	bne.n	1a642 <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   1a638:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1a63a:	f104 0010 	add.w	r0, r4, #16
   1a63e:	f005 fbf9 	bl	1fe34 <z_impl_k_sem_give>
}
   1a642:	4628      	mov	r0, r5
   1a644:	b00f      	add	sp, #60	; 0x3c
   1a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a64a:	69a3      	ldr	r3, [r4, #24]
   1a64c:	2b00      	cmp	r3, #0
   1a64e:	d1c6      	bne.n	1a5de <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1a650:	6863      	ldr	r3, [r4, #4]
   1a652:	429f      	cmp	r7, r3
   1a654:	d1c3      	bne.n	1a5de <spi_nrfx_transceive+0x16>
   1a656:	e7cb      	b.n	1a5f0 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1a658:	f016 0201 	ands.w	r2, r6, #1
   1a65c:	d00e      	beq.n	1a67c <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1a65e:	f8d8 2000 	ldr.w	r2, [r8]
   1a662:	4618      	mov	r0, r3
   1a664:	9203      	str	r2, [sp, #12]
   1a666:	4a8f      	ldr	r2, [pc, #572]	; (1a8a4 <spi_nrfx_transceive+0x2dc>)
   1a668:	498d      	ldr	r1, [pc, #564]	; (1a8a0 <spi_nrfx_transceive+0x2d8>)
   1a66a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a66e:	9300      	str	r3, [sp, #0]
   1a670:	2201      	movs	r2, #1
   1a672:	f00d fc1c 	bl	27eae <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a676:	f06f 0515 	mvn.w	r5, #21
   1a67a:	e7d8      	b.n	1a62e <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1a67c:	f016 0308 	ands.w	r3, r6, #8
   1a680:	d00a      	beq.n	1a698 <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   1a682:	4b89      	ldr	r3, [pc, #548]	; (1a8a8 <spi_nrfx_transceive+0x2e0>)
   1a684:	9200      	str	r2, [sp, #0]
   1a686:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1a68a:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1a68c:	2201      	movs	r2, #1
   1a68e:	4618      	mov	r0, r3
   1a690:	4983      	ldr	r1, [pc, #524]	; (1a8a0 <spi_nrfx_transceive+0x2d8>)
   1a692:	f00d fc0c 	bl	27eae <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   1a696:	e7ee      	b.n	1a676 <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1a698:	f3c6 1245 	ubfx	r2, r6, #5, #6
   1a69c:	2a08      	cmp	r2, #8
   1a69e:	d004      	beq.n	1a6aa <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1a6a0:	4a82      	ldr	r2, [pc, #520]	; (1a8ac <spi_nrfx_transceive+0x2e4>)
   1a6a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a6a6:	9300      	str	r3, [sp, #0]
   1a6a8:	e7f0      	b.n	1a68c <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   1a6aa:	683a      	ldr	r2, [r7, #0]
   1a6ac:	9207      	str	r2, [sp, #28]
   1a6ae:	9907      	ldr	r1, [sp, #28]
   1a6b0:	4a7f      	ldr	r2, [pc, #508]	; (1a8b0 <spi_nrfx_transceive+0x2e8>)
   1a6b2:	4291      	cmp	r1, r2
   1a6b4:	d801      	bhi.n	1a6ba <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1a6b6:	4a7f      	ldr	r2, [pc, #508]	; (1a8b4 <spi_nrfx_transceive+0x2ec>)
   1a6b8:	e7f3      	b.n	1a6a2 <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   1a6ba:	4b7f      	ldr	r3, [pc, #508]	; (1a8b8 <spi_nrfx_transceive+0x2f0>)
   1a6bc:	429d      	cmp	r5, r3
   1a6be:	d906      	bls.n	1a6ce <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1a6c0:	4a7e      	ldr	r2, [pc, #504]	; (1a8bc <spi_nrfx_transceive+0x2f4>)
   1a6c2:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1a6c6:	f012 0f03 	tst.w	r2, #3
   1a6ca:	bf18      	it	ne
   1a6cc:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1a6ce:	9b05      	ldr	r3, [sp, #20]
   1a6d0:	f10d 0c20 	add.w	ip, sp, #32
   1a6d4:	f103 0e0c 	add.w	lr, r3, #12
   1a6d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1a6dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a6e0:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   1a6e2:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a6e6:	42ab      	cmp	r3, r5
   1a6e8:	bf28      	it	cs
   1a6ea:	462b      	movcs	r3, r5
   1a6ec:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1a6ee:	4b74      	ldr	r3, [pc, #464]	; (1a8c0 <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   1a6f0:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   1a6f4:	429d      	cmp	r5, r3
   1a6f6:	d946      	bls.n	1a786 <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   1a6f8:	4b72      	ldr	r3, [pc, #456]	; (1a8c4 <spi_nrfx_transceive+0x2fc>)
   1a6fa:	429d      	cmp	r5, r3
   1a6fc:	d946      	bls.n	1a78c <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   1a6fe:	4b72      	ldr	r3, [pc, #456]	; (1a8c8 <spi_nrfx_transceive+0x300>)
   1a700:	429d      	cmp	r5, r3
   1a702:	d946      	bls.n	1a792 <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   1a704:	4b71      	ldr	r3, [pc, #452]	; (1a8cc <spi_nrfx_transceive+0x304>)
   1a706:	429d      	cmp	r5, r3
   1a708:	d946      	bls.n	1a798 <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   1a70a:	4b71      	ldr	r3, [pc, #452]	; (1a8d0 <spi_nrfx_transceive+0x308>)
   1a70c:	429d      	cmp	r5, r3
   1a70e:	d946      	bls.n	1a79e <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   1a710:	4b70      	ldr	r3, [pc, #448]	; (1a8d4 <spi_nrfx_transceive+0x30c>)
   1a712:	429d      	cmp	r5, r3
   1a714:	d346      	bcc.n	1a7a4 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   1a716:	4b68      	ldr	r3, [pc, #416]	; (1a8b8 <spi_nrfx_transceive+0x2f0>)
   1a718:	429d      	cmp	r5, r3
   1a71a:	d346      	bcc.n	1a7aa <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   1a71c:	4b6e      	ldr	r3, [pc, #440]	; (1a8d8 <spi_nrfx_transceive+0x310>)
   1a71e:	429d      	cmp	r5, r3
   1a720:	bf2c      	ite	cs
   1a722:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1a726:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1a72a:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a72c:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1a72e:	f006 0304 	and.w	r3, r6, #4
   1a732:	d53d      	bpl.n	1a7b0 <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   1a734:	2b00      	cmp	r3, #0
   1a736:	bf14      	ite	ne
   1a738:	2303      	movne	r3, #3
   1a73a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1a73c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   1a740:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   1a742:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1a746:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   1a74a:	b12b      	cbz	r3, 1a758 <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   1a74c:	9805      	ldr	r0, [sp, #20]
   1a74e:	f003 fd23 	bl	1e198 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1a752:	2300      	movs	r3, #0
   1a754:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1a758:	4653      	mov	r3, sl
   1a75a:	4a60      	ldr	r2, [pc, #384]	; (1a8dc <spi_nrfx_transceive+0x314>)
   1a75c:	9805      	ldr	r0, [sp, #20]
   1a75e:	a908      	add	r1, sp, #32
   1a760:	f003 fbe8 	bl	1df34 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1a764:	4b5e      	ldr	r3, [pc, #376]	; (1a8e0 <spi_nrfx_transceive+0x318>)
   1a766:	4298      	cmp	r0, r3
   1a768:	d026      	beq.n	1a7b8 <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1a76a:	4b5e      	ldr	r3, [pc, #376]	; (1a8e4 <spi_nrfx_transceive+0x31c>)
   1a76c:	9003      	str	r0, [sp, #12]
   1a76e:	9302      	str	r3, [sp, #8]
   1a770:	2300      	movs	r3, #0
   1a772:	2201      	movs	r2, #1
   1a774:	4618      	mov	r0, r3
   1a776:	e9cd 3300 	strd	r3, r3, [sp]
   1a77a:	4949      	ldr	r1, [pc, #292]	; (1a8a0 <spi_nrfx_transceive+0x2d8>)
   1a77c:	f00d fb97 	bl	27eae <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1a780:	f06f 0504 	mvn.w	r5, #4
   1a784:	e753      	b.n	1a62e <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   1a786:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1a78a:	e7ce      	b.n	1a72a <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   1a78c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1a790:	e7cb      	b.n	1a72a <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   1a792:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1a796:	e7c8      	b.n	1a72a <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   1a798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1a79c:	e7c5      	b.n	1a72a <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   1a79e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1a7a2:	e7c2      	b.n	1a72a <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   1a7a4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1a7a8:	e7bf      	b.n	1a72a <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   1a7aa:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1a7ae:	e7bc      	b.n	1a72a <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1a7b0:	3b00      	subs	r3, #0
   1a7b2:	bf18      	it	ne
   1a7b4:	2301      	movne	r3, #1
   1a7b6:	e7c1      	b.n	1a73c <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   1a7b8:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1a7ba:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   1a7be:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   1a7c2:	2301      	movs	r3, #1
   1a7c4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1a7c8:	f1b9 0f00 	cmp.w	r9, #0
   1a7cc:	d154      	bne.n	1a878 <spi_nrfx_transceive+0x2b0>
   1a7ce:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1a7d2:	2300      	movs	r3, #0
   1a7d4:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1a7d6:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1a7da:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1a7de:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1a7e2:	f00d fb51 	bl	27e88 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1a7e6:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1a7e8:	f1bb 0f00 	cmp.w	fp, #0
   1a7ec:	d14c      	bne.n	1a888 <spi_nrfx_transceive+0x2c0>
   1a7ee:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1a7f2:	2300      	movs	r3, #0
   1a7f4:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1a7f6:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1a7fa:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1a7fe:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a802:	f00d fb41 	bl	27e88 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1a806:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1a808:	2101      	movs	r1, #1
   1a80a:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1a80c:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1a80e:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1a810:	4620      	mov	r0, r4
   1a812:	f00d fb5c 	bl	27ece <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1a816:	4640      	mov	r0, r8
   1a818:	f7ff fe22 	bl	1a460 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a81c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1a81e:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1a820:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a822:	429d      	cmp	r5, r3
   1a824:	bf38      	it	cc
   1a826:	461d      	movcc	r5, r3
   1a828:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1a82c:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1a82e:	f857 3b28 	ldr.w	r3, [r7], #40
   1a832:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a836:	681b      	ldr	r3, [r3, #0]
   1a838:	4631      	mov	r1, r6
   1a83a:	fbb5 f5f3 	udiv	r5, r5, r3
   1a83e:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1a842:	35c8      	adds	r5, #200	; 0xc8
   1a844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a848:	2300      	movs	r3, #0
   1a84a:	fbe5 010c 	umlal	r0, r1, r5, ip
   1a84e:	f7ee fb4f 	bl	8ef0 <__aeabi_uldivmod>
   1a852:	4602      	mov	r2, r0
   1a854:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1a856:	4638      	mov	r0, r7
   1a858:	f005 fb30 	bl	1febc <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1a85c:	b1e0      	cbz	r0, 1a898 <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   1a85e:	4b22      	ldr	r3, [pc, #136]	; (1a8e8 <spi_nrfx_transceive+0x320>)
   1a860:	2201      	movs	r2, #1
   1a862:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1a866:	4630      	mov	r0, r6
   1a868:	4633      	mov	r3, r6
   1a86a:	490d      	ldr	r1, [pc, #52]	; (1a8a0 <spi_nrfx_transceive+0x2d8>)
   1a86c:	9600      	str	r6, [sp, #0]
   1a86e:	f00d fb1e 	bl	27eae <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   1a872:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1a876:	e6da      	b.n	1a62e <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1a878:	f8d9 3000 	ldr.w	r3, [r9]
   1a87c:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1a87e:	2b00      	cmp	r3, #0
   1a880:	d0a7      	beq.n	1a7d2 <spi_nrfx_transceive+0x20a>
   1a882:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1a886:	e7a5      	b.n	1a7d4 <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1a888:	f8db 3000 	ldr.w	r3, [fp]
   1a88c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1a88e:	2b00      	cmp	r3, #0
   1a890:	d0af      	beq.n	1a7f2 <spi_nrfx_transceive+0x22a>
   1a892:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a896:	e7ad      	b.n	1a7f4 <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   1a898:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1a89a:	e6c8      	b.n	1a62e <spi_nrfx_transceive+0x66>
   1a89c:	0002f6f5 	.word	0x0002f6f5
   1a8a0:	0002a820 	.word	0x0002a820
   1a8a4:	0002f70f 	.word	0x0002f70f
   1a8a8:	0002f731 	.word	0x0002f731
   1a8ac:	0002f750 	.word	0x0002f750
   1a8b0:	0001e847 	.word	0x0001e847
   1a8b4:	0002f77f 	.word	0x0002f77f
   1a8b8:	00f42400 	.word	0x00f42400
   1a8bc:	40005000 	.word	0x40005000
   1a8c0:	0003d08f 	.word	0x0003d08f
   1a8c4:	0007a11f 	.word	0x0007a11f
   1a8c8:	000f423f 	.word	0x000f423f
   1a8cc:	001e847f 	.word	0x001e847f
   1a8d0:	003d08ff 	.word	0x003d08ff
   1a8d4:	007a1200 	.word	0x007a1200
   1a8d8:	01e84800 	.word	0x01e84800
   1a8dc:	0001a509 	.word	0x0001a509
   1a8e0:	0bad0000 	.word	0x0bad0000
   1a8e4:	0002f7b0 	.word	0x0002f7b0
   1a8e8:	0002f7d7 	.word	0x0002f7d7

0001a8ec <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1a8ec:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1a8f0:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1a8f4:	280a      	cmp	r0, #10
   1a8f6:	bf9a      	itte	ls
   1a8f8:	4b02      	ldrls	r3, [pc, #8]	; (1a904 <qspi_get_zephyr_ret_code+0x18>)
   1a8fa:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1a8fe:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1a902:	4770      	bx	lr
   1a904:	0002b664 	.word	0x0002b664

0001a908 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1a908:	4b02      	ldr	r3, [pc, #8]	; (1a914 <qspi_nor_pages_layout+0xc>)
   1a90a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1a90c:	2301      	movs	r3, #1
   1a90e:	6013      	str	r3, [r2, #0]
}
   1a910:	4770      	bx	lr
   1a912:	bf00      	nop
   1a914:	0002b4a8 	.word	0x0002b4a8

0001a918 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1a918:	4800      	ldr	r0, [pc, #0]	; (1a91c <qspi_flash_get_parameters+0x4>)
   1a91a:	4770      	bx	lr
   1a91c:	0002b43c 	.word	0x0002b43c

0001a920 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1a920:	4b05      	ldr	r3, [pc, #20]	; (1a938 <qspi_wait_for_completion.isra.0+0x18>)
   1a922:	4299      	cmp	r1, r3
   1a924:	d106      	bne.n	1a934 <qspi_wait_for_completion.isra.0+0x14>
   1a926:	f04f 32ff 	mov.w	r2, #4294967295
   1a92a:	f04f 33ff 	mov.w	r3, #4294967295
   1a92e:	3030      	adds	r0, #48	; 0x30
   1a930:	f005 bac4 	b.w	1febc <z_impl_k_sem_take>
}
   1a934:	4770      	bx	lr
   1a936:	bf00      	nop
   1a938:	0bad0000 	.word	0x0bad0000

0001a93c <qspi_device_init>:
{
   1a93c:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1a93e:	6905      	ldr	r5, [r0, #16]
{
   1a940:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1a942:	4e0f      	ldr	r6, [pc, #60]	; (1a980 <qspi_device_init+0x44>)
	qspi_lock(dev);
   1a944:	4628      	mov	r0, r5
   1a946:	f00d fb1d 	bl	27f84 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1a94a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1a94e:	f00d fb02 	bl	27f56 <k_sem_give>
	if (!qspi_initialized) {
   1a952:	7833      	ldrb	r3, [r6, #0]
   1a954:	b98b      	cbnz	r3, 1a97a <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1a956:	462a      	mov	r2, r5
   1a958:	490a      	ldr	r1, [pc, #40]	; (1a984 <qspi_device_init+0x48>)
   1a95a:	6860      	ldr	r0, [r4, #4]
   1a95c:	f003 f86a 	bl	1da34 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1a960:	f7ff ffc4 	bl	1a8ec <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1a964:	fab0 f380 	clz	r3, r0
   1a968:	4605      	mov	r5, r0
   1a96a:	095b      	lsrs	r3, r3, #5
   1a96c:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1a96e:	6920      	ldr	r0, [r4, #16]
   1a970:	3018      	adds	r0, #24
   1a972:	f00d faf0 	bl	27f56 <k_sem_give>
}
   1a976:	4628      	mov	r0, r5
   1a978:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1a97a:	2500      	movs	r5, #0
   1a97c:	e7f7      	b.n	1a96e <qspi_device_init+0x32>
   1a97e:	bf00      	nop
   1a980:	20021e6d 	.word	0x20021e6d
   1a984:	00027f5b 	.word	0x00027f5b

0001a988 <qspi_send_cmd>:
{
   1a988:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   1a98a:	684c      	ldr	r4, [r1, #4]
{
   1a98c:	4605      	mov	r5, r0
   1a98e:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   1a990:	b1ec      	cbz	r4, 1a9ce <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   1a992:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1a996:	6888      	ldr	r0, [r1, #8]
   1a998:	b1d8      	cbz	r0, 1a9d2 <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   1a99a:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1a99e:	b1c8      	cbz	r0, 1a9d4 <qspi_send_cmd+0x4c>
   1a9a0:	b1c3      	cbz	r3, 1a9d4 <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   1a9a2:	4283      	cmp	r3, r0
   1a9a4:	d10f      	bne.n	1a9c6 <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   1a9a6:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1a9a8:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1a9aa:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1a9ac:	d915      	bls.n	1a9da <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1a9ae:	e9cd 1303 	strd	r1, r3, [sp, #12]
   1a9b2:	4b1a      	ldr	r3, [pc, #104]	; (1aa1c <qspi_send_cmd+0x94>)
   1a9b4:	2202      	movs	r2, #2
   1a9b6:	9302      	str	r3, [sp, #8]
   1a9b8:	2300      	movs	r3, #0
   1a9ba:	4919      	ldr	r1, [pc, #100]	; (1aa20 <qspi_send_cmd+0x98>)
   1a9bc:	4618      	mov	r0, r3
   1a9be:	e9cd 3300 	strd	r3, r3, [sp]
   1a9c2:	f00d fad0 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
}
   1a9c6:	f06f 0015 	mvn.w	r0, #21
   1a9ca:	b008      	add	sp, #32
   1a9cc:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   1a9ce:	4623      	mov	r3, r4
   1a9d0:	e7e1      	b.n	1a996 <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   1a9d2:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1a9d4:	3301      	adds	r3, #1
   1a9d6:	4403      	add	r3, r0
   1a9d8:	e7e6      	b.n	1a9a8 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1a9da:	f88d 3019 	strb.w	r3, [sp, #25]
   1a9de:	f240 1301 	movw	r3, #257	; 0x101
   1a9e2:	f8ad 301a 	strh.w	r3, [sp, #26]
   1a9e6:	2300      	movs	r3, #0
	qspi_lock(dev);
   1a9e8:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1a9ea:	f88d 301c 	strb.w	r3, [sp, #28]
   1a9ee:	f88d 1018 	strb.w	r1, [sp, #24]
   1a9f2:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   1a9f6:	f00d fac5 	bl	27f84 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1a9fa:	4621      	mov	r1, r4
   1a9fc:	4632      	mov	r2, r6
   1a9fe:	a806      	add	r0, sp, #24
   1aa00:	f003 f90a 	bl	1dc18 <nrfx_qspi_cinstr_xfer>
   1aa04:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1aa06:	6928      	ldr	r0, [r5, #16]
   1aa08:	3018      	adds	r0, #24
   1aa0a:	f00d faa4 	bl	27f56 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1aa0e:	4620      	mov	r0, r4
}
   1aa10:	b008      	add	sp, #32
   1aa12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   1aa16:	f7ff bf69 	b.w	1a8ec <qspi_get_zephyr_ret_code>
   1aa1a:	bf00      	nop
   1aa1c:	0002f814 	.word	0x0002f814
   1aa20:	0002a810 	.word	0x0002a810

0001aa24 <qspi_device_uninit>:
{
   1aa24:	b538      	push	{r3, r4, r5, lr}
   1aa26:	4604      	mov	r4, r0
	qspi_lock(dev);
   1aa28:	6900      	ldr	r0, [r0, #16]
   1aa2a:	f00d faab 	bl	27f84 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1aa2e:	6925      	ldr	r5, [r4, #16]
   1aa30:	2200      	movs	r2, #0
   1aa32:	2300      	movs	r3, #0
   1aa34:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1aa38:	f005 fa40 	bl	1febc <z_impl_k_sem_take>
	if (last) {
   1aa3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1aa3e:	b94b      	cbnz	r3, 1aa54 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1aa40:	4d0a      	ldr	r5, [pc, #40]	; (1aa6c <qspi_device_uninit+0x48>)
   1aa42:	f003 f94b 	bl	1dcdc <nrfx_qspi_mem_busy_check>
   1aa46:	42a8      	cmp	r0, r5
   1aa48:	d10a      	bne.n	1aa60 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1aa4a:	f003 f969 	bl	1dd20 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1aa4e:	2200      	movs	r2, #0
   1aa50:	4b07      	ldr	r3, [pc, #28]	; (1aa70 <qspi_device_uninit+0x4c>)
   1aa52:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1aa54:	6920      	ldr	r0, [r4, #16]
}
   1aa56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1aa5a:	3018      	adds	r0, #24
   1aa5c:	f00d ba7b 	b.w	27f56 <k_sem_give>
	return z_impl_k_sleep(timeout);
   1aa60:	2100      	movs	r1, #0
   1aa62:	f240 6067 	movw	r0, #1639	; 0x667
   1aa66:	f007 f8d9 	bl	21c1c <z_impl_k_sleep>
   1aa6a:	e7ea      	b.n	1aa42 <qspi_device_uninit+0x1e>
   1aa6c:	0bad0000 	.word	0x0bad0000
   1aa70:	20021e6d 	.word	0x20021e6d

0001aa74 <qspi_nor_read>:
{
   1aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa78:	4681      	mov	r9, r0
   1aa7a:	460e      	mov	r6, r1
   1aa7c:	461c      	mov	r4, r3
	if (!dest) {
   1aa7e:	4690      	mov	r8, r2
{
   1aa80:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   1aa82:	b1aa      	cbz	r2, 1aab0 <qspi_nor_read+0x3c>
	if (!size) {
   1aa84:	2b00      	cmp	r3, #0
   1aa86:	f000 809f 	beq.w	1abc8 <qspi_nor_read+0x154>
	if (addr < 0 ||
   1aa8a:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1aa8c:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1aa8e:	db03      	blt.n	1aa98 <qspi_nor_read+0x24>
   1aa90:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1aa92:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1aa94:	4293      	cmp	r3, r2
   1aa96:	d911      	bls.n	1aabc <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   1aa98:	4b4c      	ldr	r3, [pc, #304]	; (1abcc <qspi_nor_read+0x158>)
   1aa9a:	2201      	movs	r2, #1
   1aa9c:	9302      	str	r3, [sp, #8]
   1aa9e:	2300      	movs	r3, #0
   1aaa0:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1aaa4:	4618      	mov	r0, r3
   1aaa6:	e9cd 3300 	strd	r3, r3, [sp]
   1aaaa:	4949      	ldr	r1, [pc, #292]	; (1abd0 <qspi_nor_read+0x15c>)
   1aaac:	f00d fa5b 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1aab0:	f06f 0515 	mvn.w	r5, #21
}
   1aab4:	4628      	mov	r0, r5
   1aab6:	b00b      	add	sp, #44	; 0x2c
   1aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1aabc:	f7ff ff3e 	bl	1a93c <qspi_device_init>
	if (rc != 0) {
   1aac0:	4605      	mov	r5, r0
   1aac2:	2800      	cmp	r0, #0
   1aac4:	d17c      	bne.n	1abc0 <qspi_nor_read+0x14c>
	qspi_lock(dev);
   1aac6:	4275      	negs	r5, r6
   1aac8:	f005 0503 	and.w	r5, r5, #3
   1aacc:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1aad0:	f00d fa58 	bl	27f84 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1aad4:	42a5      	cmp	r5, r4
   1aad6:	bf28      	it	cs
   1aad8:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1aada:	f1d8 0300 	rsbs	r3, r8, #0
   1aade:	f003 0303 	and.w	r3, r3, #3
   1aae2:	f008 0703 	and.w	r7, r8, #3
   1aae6:	bf58      	it	pl
   1aae8:	425f      	negpl	r7, r3
   1aaea:	427f      	negs	r7, r7
   1aaec:	f007 0703 	and.w	r7, r7, #3
   1aaf0:	42a7      	cmp	r7, r4
   1aaf2:	bf28      	it	cs
   1aaf4:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1aaf6:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1aaf8:	1be4      	subs	r4, r4, r7
   1aafa:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1aafe:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   1ab02:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1ab04:	bfc8      	it	gt
   1ab06:	46a2      	movgt	sl, r4
   1ab08:	f003 0b03 	and.w	fp, r3, #3
   1ab0c:	bfc8      	it	gt
   1ab0e:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   1ab12:	f1ba 0f00 	cmp.w	sl, #0
   1ab16:	d019      	beq.n	1ab4c <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1ab18:	eb08 0307 	add.w	r3, r8, r7
   1ab1c:	1972      	adds	r2, r6, r5
   1ab1e:	4651      	mov	r1, sl
   1ab20:	4618      	mov	r0, r3
   1ab22:	9307      	str	r3, [sp, #28]
   1ab24:	f00d fee9 	bl	288fa <nrfx_qspi_read>
   1ab28:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ab2a:	4601      	mov	r1, r0
   1ab2c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ab30:	f7ff fef6 	bl	1a920 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ab34:	4a27      	ldr	r2, [pc, #156]	; (1abd4 <qspi_nor_read+0x160>)
   1ab36:	4294      	cmp	r4, r2
   1ab38:	d139      	bne.n	1abae <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   1ab3a:	42bd      	cmp	r5, r7
   1ab3c:	d006      	beq.n	1ab4c <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   1ab3e:	9b07      	ldr	r3, [sp, #28]
   1ab40:	4652      	mov	r2, sl
   1ab42:	4619      	mov	r1, r3
   1ab44:	eb08 0005 	add.w	r0, r8, r5
   1ab48:	f00e fe6f 	bl	2982a <memmove>
	if (flash_prefix != 0) {
   1ab4c:	b1ad      	cbz	r5, 1ab7a <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   1ab4e:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1ab52:	2104      	movs	r1, #4
   1ab54:	1bf2      	subs	r2, r6, r7
   1ab56:	a808      	add	r0, sp, #32
   1ab58:	f00d fecf 	bl	288fa <nrfx_qspi_read>
   1ab5c:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ab5e:	4601      	mov	r1, r0
   1ab60:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ab64:	f7ff fedc 	bl	1a920 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ab68:	4b1a      	ldr	r3, [pc, #104]	; (1abd4 <qspi_nor_read+0x160>)
   1ab6a:	429c      	cmp	r4, r3
   1ab6c:	d11f      	bne.n	1abae <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ab6e:	ab08      	add	r3, sp, #32
   1ab70:	462a      	mov	r2, r5
   1ab72:	4640      	mov	r0, r8
   1ab74:	19d9      	adds	r1, r3, r7
   1ab76:	f00e fe38 	bl	297ea <memcpy>
	if (flash_suffix != 0) {
   1ab7a:	f1bb 0f00 	cmp.w	fp, #0
   1ab7e:	d015      	beq.n	1abac <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   1ab80:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1ab82:	2108      	movs	r1, #8
   1ab84:	4452      	add	r2, sl
   1ab86:	a808      	add	r0, sp, #32
   1ab88:	f00d feb7 	bl	288fa <nrfx_qspi_read>
   1ab8c:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1ab8e:	4601      	mov	r1, r0
   1ab90:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1ab94:	f7ff fec4 	bl	1a920 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1ab98:	4b0e      	ldr	r3, [pc, #56]	; (1abd4 <qspi_nor_read+0x160>)
   1ab9a:	429c      	cmp	r4, r3
   1ab9c:	d107      	bne.n	1abae <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1ab9e:	eb0a 0005 	add.w	r0, sl, r5
   1aba2:	465a      	mov	r2, fp
   1aba4:	a908      	add	r1, sp, #32
   1aba6:	4440      	add	r0, r8
   1aba8:	f00e fe1f 	bl	297ea <memcpy>
	return res;
   1abac:	4c09      	ldr	r4, [pc, #36]	; (1abd4 <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   1abae:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1abb2:	3018      	adds	r0, #24
   1abb4:	f00d f9cf 	bl	27f56 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1abb8:	4620      	mov	r0, r4
   1abba:	f7ff fe97 	bl	1a8ec <qspi_get_zephyr_ret_code>
   1abbe:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1abc0:	4648      	mov	r0, r9
   1abc2:	f7ff ff2f 	bl	1aa24 <qspi_device_uninit>
	return rc;
   1abc6:	e775      	b.n	1aab4 <qspi_nor_read+0x40>
		return 0;
   1abc8:	461d      	mov	r5, r3
   1abca:	e773      	b.n	1aab4 <qspi_nor_read+0x40>
   1abcc:	0002f837 	.word	0x0002f837
   1abd0:	0002a810 	.word	0x0002a810
   1abd4:	0bad0000 	.word	0x0bad0000

0001abd8 <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1abd8:	2202      	movs	r2, #2
{
   1abda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abde:	4b64      	ldr	r3, [pc, #400]	; (1ad70 <qspi_nor_init+0x198>)
   1abe0:	b090      	sub	sp, #64	; 0x40
   1abe2:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1abe6:	6843      	ldr	r3, [r0, #4]
{
   1abe8:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1abea:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1abec:	2100      	movs	r1, #0
   1abee:	4630      	mov	r0, r6
   1abf0:	aa0d      	add	r2, sp, #52	; 0x34
   1abf2:	f00d fcac 	bl	2854e <pinctrl_lookup_state>
	if (ret < 0) {
   1abf6:	1e04      	subs	r4, r0, #0
   1abf8:	db35      	blt.n	1ac66 <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   1abfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1abfc:	6832      	ldr	r2, [r6, #0]
   1abfe:	7919      	ldrb	r1, [r3, #4]
   1ac00:	6818      	ldr	r0, [r3, #0]
   1ac02:	f00d fcb7 	bl	28574 <pinctrl_configure_pins>
	if (ret < 0) {
   1ac06:	1e04      	subs	r4, r0, #0
   1ac08:	db2d      	blt.n	1ac66 <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1ac0a:	2200      	movs	r2, #0
   1ac0c:	2101      	movs	r1, #1
   1ac0e:	202b      	movs	r0, #43	; 0x2b
   1ac10:	f7f5 fab8 	bl	10184 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1ac14:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1ac16:	692a      	ldr	r2, [r5, #16]
   1ac18:	4630      	mov	r0, r6
   1ac1a:	4956      	ldr	r1, [pc, #344]	; (1ad74 <qspi_nor_init+0x19c>)
   1ac1c:	f002 ff0a 	bl	1da34 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1ac20:	f7ff fe64 	bl	1a8ec <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1ac24:	1e04      	subs	r4, r0, #0
   1ac26:	db1e      	blt.n	1ac66 <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1ac28:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1ac2a:	3b02      	subs	r3, #2
   1ac2c:	2b01      	cmp	r3, #1
   1ac2e:	d91e      	bls.n	1ac6e <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1ac30:	f896 800a 	ldrb.w	r8, [r6, #10]
   1ac34:	f1a8 0803 	sub.w	r8, r8, #3
   1ac38:	f1b8 0f01 	cmp.w	r8, #1
   1ac3c:	bf8c      	ite	hi
   1ac3e:	f04f 0800 	movhi.w	r8, #0
   1ac42:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1ac46:	4628      	mov	r0, r5
   1ac48:	f00d f9be 	bl	27fc8 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1ac4c:	1e04      	subs	r4, r0, #0
   1ac4e:	da11      	bge.n	1ac74 <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   1ac50:	4b49      	ldr	r3, [pc, #292]	; (1ad78 <qspi_nor_init+0x1a0>)
   1ac52:	2201      	movs	r2, #1
   1ac54:	9302      	str	r3, [sp, #8]
   1ac56:	2300      	movs	r3, #0
   1ac58:	4948      	ldr	r1, [pc, #288]	; (1ad7c <qspi_nor_init+0x1a4>)
   1ac5a:	4618      	mov	r0, r3
   1ac5c:	e9cd 3300 	strd	r3, r3, [sp]
   1ac60:	9403      	str	r4, [sp, #12]
   1ac62:	f00d f980 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
}
   1ac66:	4620      	mov	r0, r4
   1ac68:	b010      	add	sp, #64	; 0x40
   1ac6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1ac6e:	f04f 0801 	mov.w	r8, #1
   1ac72:	e7e8      	b.n	1ac46 <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   1ac74:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1ac76:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1ac7a:	45a0      	cmp	r8, r4
   1ac7c:	ae0a      	add	r6, sp, #40	; 0x28
   1ac7e:	af0b      	add	r7, sp, #44	; 0x2c
   1ac80:	d02f      	beq.n	1ace2 <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   1ac82:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1ac84:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1ac88:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   1ac8c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   1ac90:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1ac92:	4628      	mov	r0, r5
   1ac94:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   1ac96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   1ac9a:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   1ac9c:	930f      	str	r3, [sp, #60]	; 0x3c
   1ac9e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   1aca2:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   1aca4:	f7ff fe70 	bl	1a988 <qspi_send_cmd>
	if (ret == 0) {
   1aca8:	1e04      	subs	r4, r0, #0
   1acaa:	d013      	beq.n	1acd4 <qspi_nor_init+0xfc>
		if (ret < 0) {
   1acac:	dadb      	bge.n	1ac66 <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1acae:	4a34      	ldr	r2, [pc, #208]	; (1ad80 <qspi_nor_init+0x1a8>)
   1acb0:	4b34      	ldr	r3, [pc, #208]	; (1ad84 <qspi_nor_init+0x1ac>)
   1acb2:	4932      	ldr	r1, [pc, #200]	; (1ad7c <qspi_nor_init+0x1a4>)
   1acb4:	f1b8 0f00 	cmp.w	r8, #0
   1acb8:	bf18      	it	ne
   1acba:	4613      	movne	r3, r2
   1acbc:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1acc0:	4b31      	ldr	r3, [pc, #196]	; (1ad88 <qspi_nor_init+0x1b0>)
   1acc2:	2201      	movs	r2, #1
   1acc4:	9302      	str	r3, [sp, #8]
   1acc6:	2300      	movs	r3, #0
   1acc8:	4618      	mov	r0, r3
   1acca:	e9cd 3300 	strd	r3, r3, [sp]
   1acce:	f00d f94a 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   1acd2:	e7c8      	b.n	1ac66 <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   1acd4:	4628      	mov	r0, r5
   1acd6:	f00d f977 	bl	27fc8 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1acda:	1e04      	subs	r4, r0, #0
   1acdc:	dbe7      	blt.n	1acae <qspi_nor_init+0xd6>
   1acde:	07e3      	lsls	r3, r4, #31
   1ace0:	d4f8      	bmi.n	1acd4 <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   1ace2:	4628      	mov	r0, r5
   1ace4:	f7ff fe9e 	bl	1aa24 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1ace8:	2403      	movs	r4, #3
   1acea:	2300      	movs	r3, #0
   1acec:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   1acf0:	930e      	str	r3, [sp, #56]	; 0x38
   1acf2:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1acf4:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1acf6:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   1acf8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1acfc:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   1acfe:	f7ff fe1d 	bl	1a93c <qspi_device_init>
	if (ret == 0) {
   1ad02:	4602      	mov	r2, r0
   1ad04:	b128      	cbz	r0, 1ad12 <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   1ad06:	4628      	mov	r0, r5
   1ad08:	f7ff fe8c 	bl	1aa24 <qspi_device_uninit>
		return -ENODEV;
   1ad0c:	f06f 0412 	mvn.w	r4, #18
   1ad10:	e7a9      	b.n	1ac66 <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   1ad12:	4628      	mov	r0, r5
   1ad14:	a90d      	add	r1, sp, #52	; 0x34
   1ad16:	f7ff fe37 	bl	1a988 <qspi_send_cmd>
   1ad1a:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   1ad1c:	4628      	mov	r0, r5
   1ad1e:	f7ff fe81 	bl	1aa24 <qspi_device_uninit>
	if (ret != 0) {
   1ad22:	2f00      	cmp	r7, #0
   1ad24:	d1f2      	bne.n	1ad0c <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   1ad26:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1ad28:	4622      	mov	r2, r4
   1ad2a:	4631      	mov	r1, r6
   1ad2c:	f105 001c 	add.w	r0, r5, #28
   1ad30:	f00e fd4b 	bl	297ca <memcmp>
   1ad34:	4604      	mov	r4, r0
   1ad36:	2800      	cmp	r0, #0
   1ad38:	d095      	beq.n	1ac66 <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1ad3a:	7fab      	ldrb	r3, [r5, #30]
   1ad3c:	2201      	movs	r2, #1
   1ad3e:	9308      	str	r3, [sp, #32]
   1ad40:	7f6b      	ldrb	r3, [r5, #29]
   1ad42:	4638      	mov	r0, r7
   1ad44:	9307      	str	r3, [sp, #28]
   1ad46:	7f2b      	ldrb	r3, [r5, #28]
   1ad48:	490c      	ldr	r1, [pc, #48]	; (1ad7c <qspi_nor_init+0x1a4>)
   1ad4a:	9306      	str	r3, [sp, #24]
   1ad4c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1ad50:	9700      	str	r7, [sp, #0]
   1ad52:	9305      	str	r3, [sp, #20]
   1ad54:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1ad58:	9304      	str	r3, [sp, #16]
   1ad5a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1ad5e:	9303      	str	r3, [sp, #12]
   1ad60:	4b0a      	ldr	r3, [pc, #40]	; (1ad8c <qspi_nor_init+0x1b4>)
   1ad62:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1ad66:	463b      	mov	r3, r7
   1ad68:	f00d f8fd 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1ad6c:	e7ce      	b.n	1ad0c <qspi_nor_init+0x134>
   1ad6e:	bf00      	nop
   1ad70:	40005000 	.word	0x40005000
   1ad74:	00027f5b 	.word	0x00027f5b
   1ad78:	0002f886 	.word	0x0002f886
   1ad7c:	0002a810 	.word	0x0002a810
   1ad80:	0002e4c7 	.word	0x0002e4c7
   1ad84:	0002f880 	.word	0x0002f880
   1ad88:	0002f896 	.word	0x0002f896
   1ad8c:	0002f8a7 	.word	0x0002f8a7

0001ad90 <qspi_nor_erase>:
{
   1ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1ad94:	2900      	cmp	r1, #0
{
   1ad96:	4606      	mov	r6, r0
   1ad98:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1ad9a:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1ad9e:	b087      	sub	sp, #28
	if (addr < 0 ||
   1ada0:	db05      	blt.n	1adae <qspi_nor_erase+0x1e>
   1ada2:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   1ada6:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   1ada8:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   1adaa:	4688      	mov	r8, r1
	if (addr < 0 ||
   1adac:	d911      	bls.n	1add2 <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   1adae:	4b46      	ldr	r3, [pc, #280]	; (1aec8 <qspi_nor_erase+0x138>)
   1adb0:	e9cd 1503 	strd	r1, r5, [sp, #12]
   1adb4:	9302      	str	r3, [sp, #8]
   1adb6:	2300      	movs	r3, #0
   1adb8:	2201      	movs	r2, #1
   1adba:	4618      	mov	r0, r3
   1adbc:	e9cd 3300 	strd	r3, r3, [sp]
   1adc0:	4942      	ldr	r1, [pc, #264]	; (1aecc <qspi_nor_erase+0x13c>)
   1adc2:	f00d f8d0 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1adc6:	f06f 0415 	mvn.w	r4, #21
}
   1adca:	4620      	mov	r0, r4
   1adcc:	b007      	add	sp, #28
   1adce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1add2:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1add6:	2d00      	cmp	r5, #0
   1add8:	d0f5      	beq.n	1adc6 <qspi_nor_erase+0x36>
   1adda:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1adde:	4313      	orrs	r3, r2
   1ade0:	d1f1      	bne.n	1adc6 <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   1ade2:	f7ff fdab 	bl	1a93c <qspi_device_init>
	if (rv != 0) {
   1ade6:	4604      	mov	r4, r0
   1ade8:	bb68      	cbnz	r0, 1ae46 <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   1adea:	6930      	ldr	r0, [r6, #16]
   1adec:	f00d f8d1 	bl	27f92 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1adf0:	4621      	mov	r1, r4
   1adf2:	4630      	mov	r0, r6
   1adf4:	f00d f8d3 	bl	27f9e <qspi_nor_write_protection_set>
	if (rv != 0) {
   1adf8:	4604      	mov	r4, r0
   1adfa:	bb08      	cbnz	r0, 1ae40 <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   1adfc:	6930      	ldr	r0, [r6, #16]
   1adfe:	f00d f8c1 	bl	27f84 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   1ae02:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1aed0 <qspi_nor_erase+0x140>
		if (size == params->size) {
   1ae06:	f8da 3018 	ldr.w	r3, [sl, #24]
   1ae0a:	42ab      	cmp	r3, r5
   1ae0c:	d11f      	bne.n	1ae4e <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   1ae0e:	f00d fd77 	bl	28900 <nrfx_qspi_chip_erase>
   1ae12:	46a9      	mov	r9, r5
   1ae14:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   1ae16:	4639      	mov	r1, r7
   1ae18:	6930      	ldr	r0, [r6, #16]
   1ae1a:	f7ff fd81 	bl	1a920 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1ae1e:	455f      	cmp	r7, fp
   1ae20:	d141      	bne.n	1aea6 <qspi_nor_erase+0x116>
	while (size > 0) {
   1ae22:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   1ae26:	44c8      	add	r8, r9
	while (size > 0) {
   1ae28:	d1ed      	bne.n	1ae06 <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   1ae2a:	6930      	ldr	r0, [r6, #16]
   1ae2c:	3018      	adds	r0, #24
   1ae2e:	f00d f892 	bl	27f56 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1ae32:	2101      	movs	r1, #1
   1ae34:	4630      	mov	r0, r6
   1ae36:	f00d f8b2 	bl	27f9e <qspi_nor_write_protection_set>
   1ae3a:	2c00      	cmp	r4, #0
   1ae3c:	bf08      	it	eq
   1ae3e:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1ae40:	6930      	ldr	r0, [r6, #16]
   1ae42:	f00d f888 	bl	27f56 <k_sem_give>
	qspi_device_uninit(dev);
   1ae46:	4630      	mov	r0, r6
   1ae48:	f7ff fdec 	bl	1aa24 <qspi_device_uninit>
	return rv;
   1ae4c:	e7bd      	b.n	1adca <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1ae4e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1ae52:	d30a      	bcc.n	1ae6a <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1ae54:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1ae58:	b953      	cbnz	r3, 1ae70 <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1ae5a:	4641      	mov	r1, r8
   1ae5c:	2001      	movs	r0, #1
   1ae5e:	f002 ffc1 	bl	1dde4 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1ae62:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1ae66:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1ae68:	e7d5      	b.n	1ae16 <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1ae6a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1ae6e:	d309      	bcc.n	1ae84 <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1ae70:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1ae74:	b930      	cbnz	r0, 1ae84 <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1ae76:	4641      	mov	r1, r8
   1ae78:	f002 ffb4 	bl	1dde4 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1ae7c:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1ae80:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1ae82:	e7c8      	b.n	1ae16 <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1ae84:	4b13      	ldr	r3, [pc, #76]	; (1aed4 <qspi_nor_erase+0x144>)
   1ae86:	2201      	movs	r2, #1
   1ae88:	9302      	str	r3, [sp, #8]
   1ae8a:	2300      	movs	r3, #0
   1ae8c:	490f      	ldr	r1, [pc, #60]	; (1aecc <qspi_nor_erase+0x13c>)
   1ae8e:	4618      	mov	r0, r3
   1ae90:	e9cd 3300 	strd	r3, r3, [sp]
   1ae94:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1ae98:	f00d f865 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   1ae9c:	490e      	ldr	r1, [pc, #56]	; (1aed8 <qspi_nor_erase+0x148>)
   1ae9e:	6930      	ldr	r0, [r6, #16]
   1aea0:	f7ff fd3e 	bl	1a920 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1aea4:	4f0c      	ldr	r7, [pc, #48]	; (1aed8 <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1aea6:	4b0d      	ldr	r3, [pc, #52]	; (1aedc <qspi_nor_erase+0x14c>)
   1aea8:	2201      	movs	r2, #1
   1aeaa:	9302      	str	r3, [sp, #8]
   1aeac:	2300      	movs	r3, #0
   1aeae:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1aeb2:	4618      	mov	r0, r3
   1aeb4:	e9cd 3300 	strd	r3, r3, [sp]
   1aeb8:	4904      	ldr	r1, [pc, #16]	; (1aecc <qspi_nor_erase+0x13c>)
   1aeba:	f00d f854 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   1aebe:	4638      	mov	r0, r7
   1aec0:	f7ff fd14 	bl	1a8ec <qspi_get_zephyr_ret_code>
   1aec4:	4604      	mov	r4, r0
			break;
   1aec6:	e7b0      	b.n	1ae2a <qspi_nor_erase+0x9a>
   1aec8:	0002f8d9 	.word	0x0002f8d9
   1aecc:	0002a810 	.word	0x0002a810
   1aed0:	0bad0000 	.word	0x0bad0000
   1aed4:	0002f923 	.word	0x0002f923
   1aed8:	0bad0004 	.word	0x0bad0004
   1aedc:	0002f941 	.word	0x0002f941

0001aee0 <qspi_nor_write>:
{
   1aee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aee4:	4605      	mov	r5, r0
   1aee6:	460f      	mov	r7, r1
   1aee8:	461e      	mov	r6, r3
	if (!src) {
   1aeea:	4690      	mov	r8, r2
{
   1aeec:	b088      	sub	sp, #32
	if (!src) {
   1aeee:	b1ca      	cbz	r2, 1af24 <qspi_nor_write+0x44>
	if ((size == 0)
   1aef0:	b1c3      	cbz	r3, 1af24 <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1aef2:	2b04      	cmp	r3, #4
   1aef4:	d901      	bls.n	1aefa <qspi_nor_write+0x1a>
   1aef6:	079a      	lsls	r2, r3, #30
   1aef8:	d114      	bne.n	1af24 <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   1aefa:	07bb      	lsls	r3, r7, #30
   1aefc:	d112      	bne.n	1af24 <qspi_nor_write+0x44>
	if (addr < 0 ||
   1aefe:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1af00:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1af02:	db03      	blt.n	1af0c <qspi_nor_write+0x2c>
   1af04:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1af06:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1af08:	4293      	cmp	r3, r2
   1af0a:	d911      	bls.n	1af30 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   1af0c:	4b40      	ldr	r3, [pc, #256]	; (1b010 <qspi_nor_write+0x130>)
   1af0e:	2201      	movs	r2, #1
   1af10:	9302      	str	r3, [sp, #8]
   1af12:	2300      	movs	r3, #0
   1af14:	e9cd 7603 	strd	r7, r6, [sp, #12]
   1af18:	4618      	mov	r0, r3
   1af1a:	e9cd 3300 	strd	r3, r3, [sp]
   1af1e:	493d      	ldr	r1, [pc, #244]	; (1b014 <qspi_nor_write+0x134>)
   1af20:	f00d f821 	bl	27f66 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1af24:	f06f 0415 	mvn.w	r4, #21
}
   1af28:	4620      	mov	r0, r4
   1af2a:	b008      	add	sp, #32
   1af2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   1af30:	4628      	mov	r0, r5
   1af32:	f7ff fd03 	bl	1a93c <qspi_device_init>
	if (rc != 0) {
   1af36:	4604      	mov	r4, r0
   1af38:	2800      	cmp	r0, #0
   1af3a:	d160      	bne.n	1affe <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   1af3c:	6928      	ldr	r0, [r5, #16]
   1af3e:	f00d f828 	bl	27f92 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1af42:	4621      	mov	r1, r4
   1af44:	4628      	mov	r0, r5
   1af46:	f00d f82a 	bl	27f9e <qspi_nor_write_protection_set>
   1af4a:	4604      	mov	r4, r0
	qspi_lock(dev);
   1af4c:	6928      	ldr	r0, [r5, #16]
   1af4e:	f00d f819 	bl	27f84 <qspi_lock.isra.0>
	if (!res) {
   1af52:	2c00      	cmp	r4, #0
   1af54:	d140      	bne.n	1afd8 <qspi_nor_write+0xf8>
		if (size < 4U) {
   1af56:	2e03      	cmp	r6, #3
   1af58:	d81c      	bhi.n	1af94 <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1af5a:	463a      	mov	r2, r7
   1af5c:	2104      	movs	r1, #4
   1af5e:	a807      	add	r0, sp, #28
   1af60:	f00d fccb 	bl	288fa <nrfx_qspi_read>
   1af64:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1af66:	4601      	mov	r1, r0
   1af68:	6928      	ldr	r0, [r5, #16]
   1af6a:	f7ff fcd9 	bl	1a920 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1af6e:	4b2a      	ldr	r3, [pc, #168]	; (1b018 <qspi_nor_write+0x138>)
   1af70:	429c      	cmp	r4, r3
   1af72:	d131      	bne.n	1afd8 <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   1af74:	4632      	mov	r2, r6
   1af76:	4641      	mov	r1, r8
   1af78:	a807      	add	r0, sp, #28
   1af7a:	f00e fc36 	bl	297ea <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1af7e:	463a      	mov	r2, r7
   1af80:	2104      	movs	r1, #4
   1af82:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   1af84:	f00d fcb6 	bl	288f4 <nrfx_qspi_write>
   1af88:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1af8a:	4601      	mov	r1, r0
   1af8c:	6928      	ldr	r0, [r5, #16]
   1af8e:	f7ff fcc7 	bl	1a920 <qspi_wait_for_completion.isra.0>
   1af92:	e021      	b.n	1afd8 <qspi_nor_write+0xf8>
   1af94:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1af98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1af9c:	d033      	beq.n	1b006 <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   1af9e:	f8df a078 	ldr.w	sl, [pc, #120]	; 1b018 <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   1afa2:	2e04      	cmp	r6, #4
   1afa4:	46b1      	mov	r9, r6
   1afa6:	bf28      	it	cs
   1afa8:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1afac:	4641      	mov	r1, r8
   1afae:	464a      	mov	r2, r9
   1afb0:	a807      	add	r0, sp, #28
   1afb2:	f00e fc1a 	bl	297ea <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1afb6:	463a      	mov	r2, r7
   1afb8:	2104      	movs	r1, #4
   1afba:	a807      	add	r0, sp, #28
   1afbc:	f00d fc9a 	bl	288f4 <nrfx_qspi_write>
   1afc0:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1afc2:	4601      	mov	r1, r0
   1afc4:	6928      	ldr	r0, [r5, #16]
   1afc6:	f7ff fcab 	bl	1a920 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1afca:	4554      	cmp	r4, sl
   1afcc:	d104      	bne.n	1afd8 <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1afce:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1afd2:	44c8      	add	r8, r9
				addr += len;
   1afd4:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1afd6:	d1e4      	bne.n	1afa2 <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   1afd8:	6928      	ldr	r0, [r5, #16]
   1afda:	3018      	adds	r0, #24
   1afdc:	f00c ffbb 	bl	27f56 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1afe0:	2101      	movs	r1, #1
   1afe2:	4628      	mov	r0, r5
   1afe4:	f00c ffdb 	bl	27f9e <qspi_nor_write_protection_set>
   1afe8:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1afea:	6928      	ldr	r0, [r5, #16]
   1afec:	f00c ffb3 	bl	27f56 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1aff0:	2c00      	cmp	r4, #0
   1aff2:	bf14      	ite	ne
   1aff4:	4620      	movne	r0, r4
   1aff6:	4630      	moveq	r0, r6
   1aff8:	f7ff fc78 	bl	1a8ec <qspi_get_zephyr_ret_code>
   1affc:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1affe:	4628      	mov	r0, r5
   1b000:	f7ff fd10 	bl	1aa24 <qspi_device_uninit>
	return rc;
   1b004:	e790      	b.n	1af28 <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   1b006:	463a      	mov	r2, r7
   1b008:	4631      	mov	r1, r6
   1b00a:	4640      	mov	r0, r8
   1b00c:	e7ba      	b.n	1af84 <qspi_nor_write+0xa4>
   1b00e:	bf00      	nop
   1b010:	0002f95f 	.word	0x0002f95f
   1b014:	0002a810 	.word	0x0002a810
   1b018:	0bad0000 	.word	0x0bad0000

0001b01c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1b01c:	4b02      	ldr	r3, [pc, #8]	; (1b028 <flash_nrf_pages_layout+0xc>)
   1b01e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1b020:	2301      	movs	r3, #1
   1b022:	6013      	str	r3, [r2, #0]
}
   1b024:	4770      	bx	lr
   1b026:	bf00      	nop
   1b028:	20021314 	.word	0x20021314

0001b02c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1b02c:	4800      	ldr	r0, [pc, #0]	; (1b030 <flash_nrf_get_parameters+0x4>)
   1b02e:	4770      	bx	lr
   1b030:	0002b4c4 	.word	0x0002b4c4

0001b034 <flash_nrf_read>:
{
   1b034:	b570      	push	{r4, r5, r6, lr}
   1b036:	460c      	mov	r4, r1
   1b038:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1b03a:	4619      	mov	r1, r3
   1b03c:	4620      	mov	r0, r4
{
   1b03e:	461d      	mov	r5, r3
   1b040:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1b042:	f00c ffdc 	bl	27ffe <is_regular_addr_valid>
   1b046:	4603      	mov	r3, r0
   1b048:	b968      	cbnz	r0, 1b066 <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b04a:	4a0f      	ldr	r2, [pc, #60]	; (1b088 <flash_nrf_read+0x54>)
   1b04c:	9000      	str	r0, [sp, #0]
   1b04e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1b052:	e9cd 4503 	strd	r4, r5, [sp, #12]
   1b056:	2201      	movs	r2, #1
   1b058:	490c      	ldr	r1, [pc, #48]	; (1b08c <flash_nrf_read+0x58>)
   1b05a:	f00c ffe1 	bl	28020 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1b05e:	f06f 0015 	mvn.w	r0, #21
}
   1b062:	b006      	add	sp, #24
   1b064:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1b066:	b165      	cbz	r5, 1b082 <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   1b068:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1b06c:	462a      	mov	r2, r5
   1b06e:	4621      	mov	r1, r4
   1b070:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   1b072:	da04      	bge.n	1b07e <flash_nrf_read+0x4a>
}
   1b074:	b006      	add	sp, #24
   1b076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   1b07a:	f009 be9b 	b.w	24db4 <soc_secure_mem_read>
   1b07e:	f00e fbb4 	bl	297ea <memcpy>
		return 0;
   1b082:	2000      	movs	r0, #0
   1b084:	e7ed      	b.n	1b062 <flash_nrf_read+0x2e>
   1b086:	bf00      	nop
   1b088:	0002f9bf 	.word	0x0002f9bf
   1b08c:	0002a7a8 	.word	0x0002a7a8

0001b090 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1b090:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b092:	2201      	movs	r2, #1
   1b094:	4806      	ldr	r0, [pc, #24]	; (1b0b0 <nrf_flash_init+0x20>)
   1b096:	4611      	mov	r1, r2
   1b098:	f00e f9f3 	bl	29482 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1b09c:	f00d fc24 	bl	288e8 <nrfx_nvmc_flash_page_count_get>
   1b0a0:	4c04      	ldr	r4, [pc, #16]	; (1b0b4 <nrf_flash_init+0x24>)
   1b0a2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1b0a4:	f00d fc1d 	bl	288e2 <nrfx_nvmc_flash_page_size_get>
   1b0a8:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1b0aa:	2000      	movs	r0, #0
   1b0ac:	bd10      	pop	{r4, pc}
   1b0ae:	bf00      	nop
   1b0b0:	2002131c 	.word	0x2002131c
   1b0b4:	20021314 	.word	0x20021314

0001b0b8 <flash_nrf_erase>:
{
   1b0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0ba:	b087      	sub	sp, #28
   1b0bc:	460e      	mov	r6, r1
   1b0be:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1b0c0:	f00d fc0f 	bl	288e2 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1b0c4:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1b0c6:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1b0c8:	4630      	mov	r0, r6
   1b0ca:	f00c ff98 	bl	27ffe <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1b0ce:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   1b0d0:	4603      	mov	r3, r0
   1b0d2:	b388      	cbz	r0, 1b138 <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1b0d4:	fbb6 f3f5 	udiv	r3, r6, r5
   1b0d8:	fb05 6313 	mls	r3, r5, r3, r6
   1b0dc:	b923      	cbnz	r3, 1b0e8 <flash_nrf_erase+0x30>
   1b0de:	fbb4 f3f5 	udiv	r3, r4, r5
   1b0e2:	fb05 4313 	mls	r3, r5, r3, r4
   1b0e6:	b173      	cbz	r3, 1b106 <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1b0e8:	4b18      	ldr	r3, [pc, #96]	; (1b14c <flash_nrf_erase+0x94>)
   1b0ea:	2201      	movs	r2, #1
   1b0ec:	9302      	str	r3, [sp, #8]
   1b0ee:	2300      	movs	r3, #0
   1b0f0:	4618      	mov	r0, r3
   1b0f2:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b0f6:	e9cd 3300 	strd	r3, r3, [sp]
   1b0fa:	4915      	ldr	r1, [pc, #84]	; (1b150 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b0fc:	f00c ff90 	bl	28020 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1b100:	f06f 0015 	mvn.w	r0, #21
   1b104:	e002      	b.n	1b10c <flash_nrf_erase+0x54>
		if (!n_pages) {
   1b106:	42a5      	cmp	r5, r4
   1b108:	d902      	bls.n	1b110 <flash_nrf_erase+0x58>
			return 0;
   1b10a:	2000      	movs	r0, #0
}
   1b10c:	b007      	add	sp, #28
   1b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   1b110:	f04f 32ff 	mov.w	r2, #4294967295
   1b114:	f04f 33ff 	mov.w	r3, #4294967295
   1b118:	480e      	ldr	r0, [pc, #56]	; (1b154 <flash_nrf_erase+0x9c>)
   1b11a:	f004 fecf 	bl	1febc <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1b11e:	f00d fbe0 	bl	288e2 <nrfx_nvmc_flash_page_size_get>
   1b122:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1b124:	4638      	mov	r0, r7
   1b126:	f002 fad5 	bl	1d6d4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1b12a:	1b64      	subs	r4, r4, r5
   1b12c:	442f      	add	r7, r5
   1b12e:	d1f9      	bne.n	1b124 <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   1b130:	4808      	ldr	r0, [pc, #32]	; (1b154 <flash_nrf_erase+0x9c>)
   1b132:	f004 fe7f 	bl	1fe34 <z_impl_k_sem_give>
}
   1b136:	e7e8      	b.n	1b10a <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b138:	4a07      	ldr	r2, [pc, #28]	; (1b158 <flash_nrf_erase+0xa0>)
   1b13a:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b13e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1b142:	4903      	ldr	r1, [pc, #12]	; (1b150 <flash_nrf_erase+0x98>)
   1b144:	2201      	movs	r2, #1
   1b146:	9000      	str	r0, [sp, #0]
   1b148:	e7d8      	b.n	1b0fc <flash_nrf_erase+0x44>
   1b14a:	bf00      	nop
   1b14c:	0002f9dc 	.word	0x0002f9dc
   1b150:	0002a7a8 	.word	0x0002a7a8
   1b154:	2002131c 	.word	0x2002131c
   1b158:	0002f9bf 	.word	0x0002f9bf

0001b15c <flash_nrf_write>:
{
   1b15c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b15e:	460e      	mov	r6, r1
   1b160:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1b162:	4619      	mov	r1, r3
   1b164:	4630      	mov	r0, r6
{
   1b166:	461c      	mov	r4, r3
   1b168:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   1b16a:	f00c ff48 	bl	27ffe <is_regular_addr_valid>
   1b16e:	4603      	mov	r3, r0
   1b170:	b968      	cbnz	r0, 1b18e <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b172:	4a1d      	ldr	r2, [pc, #116]	; (1b1e8 <flash_nrf_write+0x8c>)
   1b174:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b178:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1b17c:	2201      	movs	r2, #1
   1b17e:	491b      	ldr	r1, [pc, #108]	; (1b1ec <flash_nrf_write+0x90>)
   1b180:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1b182:	f00c ff4d 	bl	28020 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1b186:	f06f 0015 	mvn.w	r0, #21
}
   1b18a:	b007      	add	sp, #28
   1b18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1b18e:	ea46 0504 	orr.w	r5, r6, r4
   1b192:	f015 0503 	ands.w	r5, r5, #3
   1b196:	d00a      	beq.n	1b1ae <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1b198:	4b15      	ldr	r3, [pc, #84]	; (1b1f0 <flash_nrf_write+0x94>)
   1b19a:	2201      	movs	r2, #1
   1b19c:	9302      	str	r3, [sp, #8]
   1b19e:	2300      	movs	r3, #0
   1b1a0:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1b1a4:	4618      	mov	r0, r3
   1b1a6:	e9cd 3300 	strd	r3, r3, [sp]
   1b1aa:	4910      	ldr	r1, [pc, #64]	; (1b1ec <flash_nrf_write+0x90>)
   1b1ac:	e7e9      	b.n	1b182 <flash_nrf_write+0x26>
	if (!len) {
   1b1ae:	b1a4      	cbz	r4, 1b1da <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   1b1b0:	f04f 32ff 	mov.w	r2, #4294967295
   1b1b4:	f04f 33ff 	mov.w	r3, #4294967295
   1b1b8:	480e      	ldr	r0, [pc, #56]	; (1b1f4 <flash_nrf_write+0x98>)
   1b1ba:	f004 fe7f 	bl	1febc <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1b1be:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1b1c2:	42a5      	cmp	r5, r4
   1b1c4:	eb05 0006 	add.w	r0, r5, r6
   1b1c8:	d109      	bne.n	1b1de <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1b1ca:	4a0b      	ldr	r2, [pc, #44]	; (1b1f8 <flash_nrf_write+0x9c>)
   1b1cc:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1b1d0:	07db      	lsls	r3, r3, #31
   1b1d2:	d5fb      	bpl.n	1b1cc <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   1b1d4:	4807      	ldr	r0, [pc, #28]	; (1b1f4 <flash_nrf_write+0x98>)
   1b1d6:	f004 fe2d 	bl	1fe34 <z_impl_k_sem_give>
	return ret;
   1b1da:	2000      	movs	r0, #0
   1b1dc:	e7d5      	b.n	1b18a <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1b1de:	5979      	ldr	r1, [r7, r5]
   1b1e0:	f002 faaa 	bl	1d738 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1b1e4:	3504      	adds	r5, #4
}
   1b1e6:	e7ec      	b.n	1b1c2 <flash_nrf_write+0x66>
   1b1e8:	0002f9bf 	.word	0x0002f9bf
   1b1ec:	0002a7a8 	.word	0x0002a7a8
   1b1f0:	0002f9fb 	.word	0x0002f9fb
   1b1f4:	2002131c 	.word	0x2002131c
   1b1f8:	40039000 	.word	0x40039000

0001b1fc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1b1fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1b1fe:	ab0b      	add	r3, sp, #44	; 0x2c
   1b200:	9305      	str	r3, [sp, #20]
   1b202:	9303      	str	r3, [sp, #12]
   1b204:	4b05      	ldr	r3, [pc, #20]	; (1b21c <z_log_msg_runtime_create.constprop.0+0x20>)
   1b206:	2201      	movs	r2, #1
   1b208:	9302      	str	r3, [sp, #8]
   1b20a:	2300      	movs	r3, #0
   1b20c:	4618      	mov	r0, r3
   1b20e:	e9cd 3300 	strd	r3, r3, [sp]
   1b212:	f7f3 f8a9 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   1b216:	b007      	add	sp, #28
   1b218:	f85d fb04 	ldr.w	pc, [sp], #4
   1b21c:	0002fa3a 	.word	0x0002fa3a

0001b220 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1b220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b222:	461d      	mov	r5, r3
	return config->uarte_regs;
   1b224:	6843      	ldr	r3, [r0, #4]
{
   1b226:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1b228:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1b22a:	f8d3 c000 	ldr.w	ip, [r3]
   1b22e:	f04f 0320 	mov.w	r3, #32
   1b232:	f3ef 8711 	mrs	r7, BASEPRI
   1b236:	f383 8812 	msr	BASEPRI_MAX, r3
   1b23a:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1b23e:	68e3      	ldr	r3, [r4, #12]
   1b240:	68d8      	ldr	r0, [r3, #12]
   1b242:	b138      	cbz	r0, 1b254 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1b244:	f387 8811 	msr	BASEPRI, r7
   1b248:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1b24c:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1b250:	b003      	add	sp, #12
   1b252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1b254:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1b256:	68e3      	ldr	r3, [r4, #12]
   1b258:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1b25a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1b25e:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1b262:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1b266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1b26a:	68e3      	ldr	r3, [r4, #12]
   1b26c:	d111      	bne.n	1b292 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1b26e:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1b270:	68e3      	ldr	r3, [r4, #12]
   1b272:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1b274:	4621      	mov	r1, r4
   1b276:	4630      	mov	r0, r6
   1b278:	f00d f88d 	bl	28396 <start_tx_locked>
   1b27c:	f387 8811 	msr	BASEPRI, r7
   1b280:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1b284:	7ae3      	ldrb	r3, [r4, #11]
   1b286:	2b01      	cmp	r3, #1
   1b288:	d101      	bne.n	1b28e <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1b28a:	1c6b      	adds	r3, r5, #1
   1b28c:	d106      	bne.n	1b29c <uarte_nrfx_tx+0x7c>
	return 0;
   1b28e:	2000      	movs	r0, #0
   1b290:	e7de      	b.n	1b250 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1b292:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1b294:	4620      	mov	r0, r4
   1b296:	f00c fff7 	bl	28288 <setup_tx_cache>
   1b29a:	e7eb      	b.n	1b274 <uarte_nrfx_tx+0x54>
   1b29c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b2a0:	2100      	movs	r1, #0
   1b2a2:	480a      	ldr	r0, [pc, #40]	; (1b2cc <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1b2a4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1b2a8:	2300      	movs	r3, #0
   1b2aa:	fbc5 0106 	smlal	r0, r1, r5, r6
   1b2ae:	4a08      	ldr	r2, [pc, #32]	; (1b2d0 <uarte_nrfx_tx+0xb0>)
   1b2b0:	f7ed fe1e 	bl	8ef0 <__aeabi_uldivmod>
   1b2b4:	68e4      	ldr	r4, [r4, #12]
   1b2b6:	4602      	mov	r2, r0
   1b2b8:	460b      	mov	r3, r1
   1b2ba:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1b2bc:	2000      	movs	r0, #0
   1b2be:	2100      	movs	r1, #0
   1b2c0:	e9cd 0100 	strd	r0, r1, [sp]
   1b2c4:	4620      	mov	r0, r4
   1b2c6:	f007 f9c7 	bl	22658 <z_impl_k_timer_start>
   1b2ca:	e7e0      	b.n	1b28e <uarte_nrfx_tx+0x6e>
   1b2cc:	000f423f 	.word	0x000f423f
   1b2d0:	000f4240 	.word	0x000f4240

0001b2d4 <uarte_nrfx_configure>:
{
   1b2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1b2d6:	794b      	ldrb	r3, [r1, #5]
   1b2d8:	2b01      	cmp	r3, #1
   1b2da:	d029      	beq.n	1b330 <uarte_nrfx_configure+0x5c>
   1b2dc:	2b03      	cmp	r3, #3
   1b2de:	d124      	bne.n	1b32a <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1b2e0:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1b2e2:	798b      	ldrb	r3, [r1, #6]
   1b2e4:	2b03      	cmp	r3, #3
   1b2e6:	d120      	bne.n	1b32a <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1b2e8:	79ce      	ldrb	r6, [r1, #7]
   1b2ea:	b10e      	cbz	r6, 1b2f0 <uarte_nrfx_configure+0x1c>
   1b2ec:	2e01      	cmp	r6, #1
   1b2ee:	d11c      	bne.n	1b32a <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1b2f0:	790a      	ldrb	r2, [r1, #4]
   1b2f2:	2a01      	cmp	r2, #1
   1b2f4:	d01e      	beq.n	1b334 <uarte_nrfx_configure+0x60>
   1b2f6:	2a02      	cmp	r2, #2
   1b2f8:	d020      	beq.n	1b33c <uarte_nrfx_configure+0x68>
   1b2fa:	b9b2      	cbnz	r2, 1b32a <uarte_nrfx_configure+0x56>
   1b2fc:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1b2fe:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1b300:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1b302:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1b306:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1b30a:	d06e      	beq.n	1b3ea <uarte_nrfx_configure+0x116>
   1b30c:	d833      	bhi.n	1b376 <uarte_nrfx_configure+0xa2>
   1b30e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1b312:	d06d      	beq.n	1b3f0 <uarte_nrfx_configure+0x11c>
   1b314:	d81c      	bhi.n	1b350 <uarte_nrfx_configure+0x7c>
   1b316:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1b31a:	d06b      	beq.n	1b3f4 <uarte_nrfx_configure+0x120>
   1b31c:	d810      	bhi.n	1b340 <uarte_nrfx_configure+0x6c>
   1b31e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1b322:	d06a      	beq.n	1b3fa <uarte_nrfx_configure+0x126>
   1b324:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1b328:	d06a      	beq.n	1b400 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1b32a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b32e:	e05b      	b.n	1b3e8 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1b330:	2700      	movs	r7, #0
   1b332:	e7d6      	b.n	1b2e2 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1b334:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1b338:	220e      	movs	r2, #14
   1b33a:	e7e0      	b.n	1b2fe <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1b33c:	2400      	movs	r4, #0
   1b33e:	e7fb      	b.n	1b338 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1b340:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1b344:	d05f      	beq.n	1b406 <uarte_nrfx_configure+0x132>
   1b346:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1b34a:	d1ee      	bne.n	1b32a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1b34c:	4b38      	ldr	r3, [pc, #224]	; (1b430 <uarte_nrfx_configure+0x15c>)
   1b34e:	e03c      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b350:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1b354:	d05a      	beq.n	1b40c <uarte_nrfx_configure+0x138>
   1b356:	d807      	bhi.n	1b368 <uarte_nrfx_configure+0x94>
   1b358:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1b35c:	d058      	beq.n	1b410 <uarte_nrfx_configure+0x13c>
   1b35e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1b362:	d1e2      	bne.n	1b32a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1b364:	4b33      	ldr	r3, [pc, #204]	; (1b434 <uarte_nrfx_configure+0x160>)
   1b366:	e030      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b368:	f647 2512 	movw	r5, #31250	; 0x7a12
   1b36c:	42ab      	cmp	r3, r5
   1b36e:	d1dc      	bne.n	1b32a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1b370:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1b374:	e029      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b376:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1b37a:	d04b      	beq.n	1b414 <uarte_nrfx_configure+0x140>
   1b37c:	d813      	bhi.n	1b3a6 <uarte_nrfx_configure+0xd2>
   1b37e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1b382:	d04a      	beq.n	1b41a <uarte_nrfx_configure+0x146>
   1b384:	d809      	bhi.n	1b39a <uarte_nrfx_configure+0xc6>
   1b386:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1b38a:	42ab      	cmp	r3, r5
   1b38c:	d047      	beq.n	1b41e <uarte_nrfx_configure+0x14a>
   1b38e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1b392:	d1ca      	bne.n	1b32a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1b394:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1b398:	e017      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b39a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1b39e:	d1c4      	bne.n	1b32a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1b3a0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1b3a4:	e011      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b3a6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1b3aa:	d03b      	beq.n	1b424 <uarte_nrfx_configure+0x150>
   1b3ac:	d808      	bhi.n	1b3c0 <uarte_nrfx_configure+0xec>
   1b3ae:	4d22      	ldr	r5, [pc, #136]	; (1b438 <uarte_nrfx_configure+0x164>)
   1b3b0:	42ab      	cmp	r3, r5
   1b3b2:	d03a      	beq.n	1b42a <uarte_nrfx_configure+0x156>
   1b3b4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1b3b8:	d1b7      	bne.n	1b32a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1b3ba:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1b3be:	e004      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b3c0:	4d1e      	ldr	r5, [pc, #120]	; (1b43c <uarte_nrfx_configure+0x168>)
   1b3c2:	42ab      	cmp	r3, r5
   1b3c4:	d1b1      	bne.n	1b32a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1b3c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1b3ca:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1b3cc:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1b3d0:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1b3d2:	433a      	orrs	r2, r7
   1b3d4:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1b3d6:	4334      	orrs	r4, r6
   1b3d8:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b3da:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1b3de:	1d2b      	adds	r3, r5, #4
   1b3e0:	c903      	ldmia	r1, {r0, r1}
   1b3e2:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1b3e6:	2000      	movs	r0, #0
}
   1b3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1b3ea:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1b3ee:	e7ec      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1b3f0:	4b13      	ldr	r3, [pc, #76]	; (1b440 <uarte_nrfx_configure+0x16c>)
   1b3f2:	e7ea      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1b3f4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1b3f8:	e7e7      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1b3fa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1b3fe:	e7e4      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b400:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1b404:	e7e1      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1b406:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1b40a:	e7de      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1b40c:	4b0d      	ldr	r3, [pc, #52]	; (1b444 <uarte_nrfx_configure+0x170>)
   1b40e:	e7dc      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1b410:	4b0d      	ldr	r3, [pc, #52]	; (1b448 <uarte_nrfx_configure+0x174>)
   1b412:	e7da      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1b414:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1b418:	e7d7      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1b41a:	4b0c      	ldr	r3, [pc, #48]	; (1b44c <uarte_nrfx_configure+0x178>)
   1b41c:	e7d5      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1b41e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1b422:	e7d2      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1b424:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b428:	e7cf      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1b42a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b42e:	e7cc      	b.n	1b3ca <uarte_nrfx_configure+0xf6>
   1b430:	0013b000 	.word	0x0013b000
   1b434:	004ea000 	.word	0x004ea000
   1b438:	0003d090 	.word	0x0003d090
   1b43c:	000f4240 	.word	0x000f4240
   1b440:	00275000 	.word	0x00275000
   1b444:	0075c000 	.word	0x0075c000
   1b448:	003af000 	.word	0x003af000
   1b44c:	013a9000 	.word	0x013a9000

0001b450 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b450:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1b452:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1b456:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1b45a:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1b45c:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   1b460:	b087      	sub	sp, #28
   1b462:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1b466:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1b468:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1b46c:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1b46e:	aa05      	add	r2, sp, #20
   1b470:	4640      	mov	r0, r8
   1b472:	f00d f86c 	bl	2854e <pinctrl_lookup_state>
	if (ret < 0) {
   1b476:	1e04      	subs	r4, r0, #0
   1b478:	db25      	blt.n	1b4c6 <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   1b47a:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1b47c:	f8d8 2000 	ldr.w	r2, [r8]
   1b480:	7919      	ldrb	r1, [r3, #4]
   1b482:	6818      	ldr	r0, [r3, #0]
   1b484:	f00d f876 	bl	28574 <pinctrl_configure_pins>
	if (err < 0) {
   1b488:	1e04      	subs	r4, r0, #0
   1b48a:	db1c      	blt.n	1b4c6 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1b48c:	4638      	mov	r0, r7
   1b48e:	1d31      	adds	r1, r6, #4
   1b490:	f7ff ff20 	bl	1b2d4 <uarte_nrfx_configure>
	if (err) {
   1b494:	4604      	mov	r4, r0
   1b496:	b9b0      	cbnz	r0, 1b4c6 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1b498:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1b49c:	0799      	lsls	r1, r3, #30
   1b49e:	d532      	bpl.n	1b506 <uarte_instance_init.constprop.0+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1b4a0:	f106 001c 	add.w	r0, r6, #28
   1b4a4:	f001 fc3c 	bl	1cd20 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1b4a8:	4b4f      	ldr	r3, [pc, #316]	; (1b5e8 <uarte_instance_init.constprop.0+0x198>)
   1b4aa:	4298      	cmp	r0, r3
   1b4ac:	d00f      	beq.n	1b4ce <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   1b4ae:	4b4f      	ldr	r3, [pc, #316]	; (1b5ec <uarte_instance_init.constprop.0+0x19c>)
   1b4b0:	4620      	mov	r0, r4
   1b4b2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b4b6:	9400      	str	r4, [sp, #0]
   1b4b8:	4623      	mov	r3, r4
   1b4ba:	2201      	movs	r2, #1
   1b4bc:	494c      	ldr	r1, [pc, #304]	; (1b5f0 <uarte_instance_init.constprop.0+0x1a0>)
   1b4be:	f7ff fe9d 	bl	1b1fc <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1b4c2:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1b4c6:	4620      	mov	r0, r4
   1b4c8:	b007      	add	sp, #28
   1b4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b4ce:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1b4d0:	f115 0f0c 	cmn.w	r5, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b4d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b4d8:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1b4dc:	d10b      	bne.n	1b4f6 <uarte_instance_init.constprop.0+0xa6>
   1b4de:	4945      	ldr	r1, [pc, #276]	; (1b5f4 <uarte_instance_init.constprop.0+0x1a4>)
   1b4e0:	4845      	ldr	r0, [pc, #276]	; (1b5f8 <uarte_instance_init.constprop.0+0x1a8>)
   1b4e2:	f240 234e 	movw	r3, #590	; 0x24e
   1b4e6:	4a45      	ldr	r2, [pc, #276]	; (1b5fc <uarte_instance_init.constprop.0+0x1ac>)
   1b4e8:	f009 fc19 	bl	24d1e <assert_print>
   1b4ec:	f240 214e 	movw	r1, #590	; 0x24e
   1b4f0:	4842      	ldr	r0, [pc, #264]	; (1b5fc <uarte_instance_init.constprop.0+0x1ac>)
   1b4f2:	f009 fc0d 	bl	24d10 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b4f6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1b4fa:	2301      	movs	r3, #1
   1b4fc:	7f32      	ldrb	r2, [r6, #28]
   1b4fe:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1b500:	4a3f      	ldr	r2, [pc, #252]	; (1b600 <uarte_instance_init.constprop.0+0x1b0>)
   1b502:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1b506:	68f3      	ldr	r3, [r6, #12]
   1b508:	2b00      	cmp	r3, #0
   1b50a:	d059      	beq.n	1b5c0 <uarte_instance_init.constprop.0+0x170>
    p_reg->INTENSET = mask;
   1b50c:	2204      	movs	r2, #4
	return config->uarte_regs;
   1b50e:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1b510:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1b514:	681b      	ldr	r3, [r3, #0]
   1b516:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1b51a:	2201      	movs	r2, #1
   1b51c:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1b520:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1b524:	4937      	ldr	r1, [pc, #220]	; (1b604 <uarte_instance_init.constprop.0+0x1b4>)
   1b526:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b52a:	2108      	movs	r1, #8
   1b52c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b530:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1b534:	b1a1      	cbz	r1, 1b560 <uarte_instance_init.constprop.0+0x110>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b536:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b538:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1b53c:	b91a      	cbnz	r2, 1b546 <uarte_instance_init.constprop.0+0xf6>
   1b53e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1b542:	2a00      	cmp	r2, #0
   1b544:	d0f8      	beq.n	1b538 <uarte_instance_init.constprop.0+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b546:	2200      	movs	r2, #0
   1b548:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1b54c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1b550:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1b554:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1b558:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1b55c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1b560:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1b564:	2200      	movs	r2, #0
   1b566:	4928      	ldr	r1, [pc, #160]	; (1b608 <uarte_instance_init.constprop.0+0x1b8>)
   1b568:	3080      	adds	r0, #128	; 0x80
   1b56a:	f00e f85b 	bl	29624 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1b56e:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1b572:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1b576:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1b57a:	2200      	movs	r2, #0
   1b57c:	4923      	ldr	r1, [pc, #140]	; (1b60c <uarte_instance_init.constprop.0+0x1bc>)
   1b57e:	3020      	adds	r0, #32
   1b580:	f00e f850 	bl	29624 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1b584:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1b588:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1b58c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b590:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1b592:	bf5c      	itt	pl
   1b594:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1b598:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b59c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b5a0:	06db      	lsls	r3, r3, #27
   1b5a2:	bf44      	itt	mi
   1b5a4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1b5a8:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b5ac:	6973      	ldr	r3, [r6, #20]
   1b5ae:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b5b2:	2300      	movs	r3, #0
   1b5b4:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b5b8:	2301      	movs	r3, #1
   1b5ba:	60ab      	str	r3, [r5, #8]
   1b5bc:	60eb      	str	r3, [r5, #12]
	return 0;
   1b5be:	e782      	b.n	1b4c6 <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b5c0:	2308      	movs	r3, #8
   1b5c2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1b5c6:	f899 3008 	ldrb.w	r3, [r9, #8]
   1b5ca:	2b00      	cmp	r3, #0
   1b5cc:	d1de      	bne.n	1b58c <uarte_instance_init.constprop.0+0x13c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b5ce:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1b5d2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b5d6:	69b3      	ldr	r3, [r6, #24]
   1b5d8:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b5dc:	2301      	movs	r3, #1
   1b5de:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b5e2:	602b      	str	r3, [r5, #0]
}
   1b5e4:	e7d2      	b.n	1b58c <uarte_instance_init.constprop.0+0x13c>
   1b5e6:	bf00      	nop
   1b5e8:	0bad0000 	.word	0x0bad0000
   1b5ec:	0002fa3a 	.word	0x0002fa3a
   1b5f0:	0002a830 	.word	0x0002a830
   1b5f4:	0002c65c 	.word	0x0002c65c
   1b5f8:	0002b6e9 	.word	0x0002b6e9
   1b5fc:	0002c624 	.word	0x0002c624
   1b600:	40017000 	.word	0x40017000
   1b604:	000a0210 	.word	0x000a0210
   1b608:	00028409 	.word	0x00028409
   1b60c:	000284d9 	.word	0x000284d9

0001b610 <uarte_nrfx_poll_out>:
{
   1b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b614:	4604      	mov	r4, r0
   1b616:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1b618:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b61a:	f00d fee1 	bl	293e0 <k_is_in_isr>
   1b61e:	b9b0      	cbnz	r0, 1b64e <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1b620:	4b2a      	ldr	r3, [pc, #168]	; (1b6cc <uarte_nrfx_poll_out+0xbc>)
   1b622:	781b      	ldrb	r3, [r3, #0]
   1b624:	b19b      	cbz	r3, 1b64e <uarte_nrfx_poll_out+0x3e>
{
   1b626:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1b628:	6860      	ldr	r0, [r4, #4]
   1b62a:	f00c fea4 	bl	28376 <is_tx_ready.isra.0>
   1b62e:	2800      	cmp	r0, #0
   1b630:	d138      	bne.n	1b6a4 <uarte_nrfx_poll_out+0x94>
   1b632:	2001      	movs	r0, #1
   1b634:	f00d f8d8 	bl	287e8 <nrfx_busy_wait>
   1b638:	3f01      	subs	r7, #1
   1b63a:	d1f5      	bne.n	1b628 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1b63c:	2100      	movs	r1, #0
   1b63e:	2021      	movs	r0, #33	; 0x21
   1b640:	f006 faec 	bl	21c1c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b644:	e7ef      	b.n	1b626 <uarte_nrfx_poll_out+0x16>
   1b646:	f381 8811 	msr	BASEPRI, r1
   1b64a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b64e:	f04f 0320 	mov.w	r3, #32
   1b652:	f3ef 8111 	mrs	r1, BASEPRI
   1b656:	f383 8812 	msr	BASEPRI_MAX, r3
   1b65a:	f3bf 8f6f 	isb	sy
   1b65e:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1b662:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1b664:	4640      	mov	r0, r8
   1b666:	f00c fe86 	bl	28376 <is_tx_ready.isra.0>
   1b66a:	2800      	cmp	r0, #0
   1b66c:	d0eb      	beq.n	1b646 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1b66e:	68eb      	ldr	r3, [r5, #12]
   1b670:	b15b      	cbz	r3, 1b68a <uarte_nrfx_poll_out+0x7a>
   1b672:	68da      	ldr	r2, [r3, #12]
   1b674:	b14a      	cbz	r2, 1b68a <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1b676:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1b67a:	2a00      	cmp	r2, #0
   1b67c:	da05      	bge.n	1b68a <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1b67e:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1b682:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1b686:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1b68a:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1b68c:	2201      	movs	r2, #1
	*data->char_out = c;
   1b68e:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1b690:	4620      	mov	r0, r4
   1b692:	6969      	ldr	r1, [r5, #20]
   1b694:	f00c fd18 	bl	280c8 <tx_start>
	__asm__ volatile(
   1b698:	f387 8811 	msr	BASEPRI, r7
   1b69c:	f3bf 8f6f 	isb	sy
}
   1b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b6a4:	f04f 0320 	mov.w	r3, #32
   1b6a8:	f3ef 8111 	mrs	r1, BASEPRI
   1b6ac:	f383 8812 	msr	BASEPRI_MAX, r3
   1b6b0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1b6b4:	6860      	ldr	r0, [r4, #4]
   1b6b6:	460f      	mov	r7, r1
   1b6b8:	f00c fe5d 	bl	28376 <is_tx_ready.isra.0>
   1b6bc:	2800      	cmp	r0, #0
   1b6be:	d1e4      	bne.n	1b68a <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1b6c0:	f381 8811 	msr	BASEPRI, r1
   1b6c4:	f3bf 8f6f 	isb	sy
}
   1b6c8:	e7b8      	b.n	1b63c <uarte_nrfx_poll_out+0x2c>
   1b6ca:	bf00      	nop
   1b6cc:	20022292 	.word	0x20022292

0001b6d0 <uarte_nrfx_rx_enable>:
{
   1b6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1b6d4:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1b6d8:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1b6da:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1b6de:	4605      	mov	r5, r0
   1b6e0:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1b6e2:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1b6e4:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1b6e8:	b172      	cbz	r2, 1b708 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1b6ea:	4944      	ldr	r1, [pc, #272]	; (1b7fc <uarte_nrfx_rx_enable+0x12c>)
   1b6ec:	f240 337d 	movw	r3, #893	; 0x37d
   1b6f0:	4a43      	ldr	r2, [pc, #268]	; (1b800 <uarte_nrfx_rx_enable+0x130>)
   1b6f2:	4844      	ldr	r0, [pc, #272]	; (1b804 <uarte_nrfx_rx_enable+0x134>)
   1b6f4:	f009 fb13 	bl	24d1e <assert_print>
   1b6f8:	4843      	ldr	r0, [pc, #268]	; (1b808 <uarte_nrfx_rx_enable+0x138>)
   1b6fa:	f009 fb10 	bl	24d1e <assert_print>
   1b6fe:	f240 317d 	movw	r1, #893	; 0x37d
   1b702:	483f      	ldr	r0, [pc, #252]	; (1b800 <uarte_nrfx_rx_enable+0x130>)
   1b704:	f009 fb04 	bl	24d10 <assert_post_action>
	if (data->async->rx_enabled) {
   1b708:	68e2      	ldr	r2, [r4, #12]
   1b70a:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1b70e:	2900      	cmp	r1, #0
   1b710:	d170      	bne.n	1b7f4 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1b712:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1b716:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1b718:	bfca      	itet	gt
   1b71a:	2205      	movgt	r2, #5
   1b71c:	235c      	movle	r3, #92	; 0x5c
   1b71e:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1b722:	68e2      	ldr	r2, [r4, #12]
   1b724:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1b726:	68e3      	ldr	r3, [r4, #12]
   1b728:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1b72c:	68e3      	ldr	r3, [r4, #12]
   1b72e:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1b730:	2300      	movs	r3, #0
   1b732:	68e2      	ldr	r2, [r4, #12]
   1b734:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1b736:	68e2      	ldr	r2, [r4, #12]
   1b738:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1b73a:	68e2      	ldr	r2, [r4, #12]
   1b73c:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b73e:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b742:	06da      	lsls	r2, r3, #27
   1b744:	d523      	bpl.n	1b78e <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1b746:	68e1      	ldr	r1, [r4, #12]
   1b748:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1b74c:	b1fe      	cbz	r6, 1b78e <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1b74e:	42be      	cmp	r6, r7
   1b750:	bf28      	it	cs
   1b752:	463e      	movcs	r6, r7
   1b754:	4640      	mov	r0, r8
   1b756:	4632      	mov	r2, r6
   1b758:	31c4      	adds	r1, #196	; 0xc4
   1b75a:	f00e f846 	bl	297ea <memcpy>
			if (!len) {
   1b75e:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1b760:	44b0      	add	r8, r6
			if (!len) {
   1b762:	d114      	bne.n	1b78e <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1b764:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1b766:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1b768:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1b76c:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1b76e:	1b9b      	subs	r3, r3, r6
   1b770:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1b774:	f00c fcd7 	bl	28126 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1b778:	68e1      	ldr	r1, [r4, #12]
   1b77a:	4628      	mov	r0, r5
   1b77c:	3158      	adds	r1, #88	; 0x58
   1b77e:	f00c fceb 	bl	28158 <rx_buf_release>
				notify_rx_disable(dev);
   1b782:	4628      	mov	r0, r5
   1b784:	f00c fd00 	bl	28188 <notify_rx_disable>
	return 0;
   1b788:	2000      	movs	r0, #0
}
   1b78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b78e:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b790:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b794:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b798:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1b79c:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1b7a0:	2201      	movs	r2, #1
   1b7a2:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1b7a6:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1b7aa:	68e3      	ldr	r3, [r4, #12]
   1b7ac:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b7b0:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b7b4:	06db      	lsls	r3, r3, #27
   1b7b6:	d519      	bpl.n	1b7ec <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1b7b8:	f04f 0320 	mov.w	r3, #32
   1b7bc:	f3ef 8111 	mrs	r1, BASEPRI
   1b7c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7c4:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1b7c8:	692b      	ldr	r3, [r5, #16]
   1b7ca:	68db      	ldr	r3, [r3, #12]
   1b7cc:	b12b      	cbz	r3, 1b7da <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1b7ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1b7d2:	f042 0202 	orr.w	r2, r2, #2
   1b7d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b7da:	2208      	movs	r2, #8
	return config->uarte_regs;
   1b7dc:	686b      	ldr	r3, [r5, #4]
   1b7de:	681b      	ldr	r3, [r3, #0]
   1b7e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1b7e4:	f381 8811 	msr	BASEPRI, r1
   1b7e8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b7ec:	2301      	movs	r3, #1
   1b7ee:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1b7f2:	e7c9      	b.n	1b788 <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1b7f4:	f06f 000f 	mvn.w	r0, #15
   1b7f8:	e7c7      	b.n	1b78a <uarte_nrfx_rx_enable+0xba>
   1b7fa:	bf00      	nop
   1b7fc:	00030f5f 	.word	0x00030f5f
   1b800:	0002fa59 	.word	0x0002fa59
   1b804:	0002b6e9 	.word	0x0002b6e9
   1b808:	0002fa8d 	.word	0x0002fa8d

0001b80c <uarte_nrfx_isr_async>:
{
   1b80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1b810:	6843      	ldr	r3, [r0, #4]
{
   1b812:	4604      	mov	r4, r0
	return config->uarte_regs;
   1b814:	681d      	ldr	r5, [r3, #0]
{
   1b816:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b818:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1b81c:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1b81e:	b169      	cbz	r1, 1b83c <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b820:	2200      	movs	r2, #0
   1b822:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1b826:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1b82a:	68da      	ldr	r2, [r3, #12]
   1b82c:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1b830:	3301      	adds	r3, #1
   1b832:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1b836:	b008      	add	sp, #32
   1b838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b83c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1b840:	b323      	cbz	r3, 1b88c <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b842:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1b846:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1b84a:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1b84c:	2214      	movs	r2, #20
	return config->uarte_regs;
   1b84e:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1b850:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b852:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b856:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1b85a:	f00e f800 	bl	2985e <memset>
   1b85e:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1b860:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1b862:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1b866:	f100 8103 	bmi.w	1ba70 <uarte_nrfx_isr_async+0x264>
   1b86a:	07b3      	lsls	r3, r6, #30
   1b86c:	f100 8102 	bmi.w	1ba74 <uarte_nrfx_isr_async+0x268>
   1b870:	0777      	lsls	r7, r6, #29
   1b872:	f100 8101 	bmi.w	1ba78 <uarte_nrfx_isr_async+0x26c>
   1b876:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1b87a:	4620      	mov	r0, r4
   1b87c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1b87e:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1b882:	f00c fc49 	bl	28118 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1b886:	4620      	mov	r0, r4
   1b888:	f00c fcdc 	bl	28244 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b88c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1b890:	b38b      	cbz	r3, 1b8f6 <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1b892:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1b896:	06d8      	lsls	r0, r3, #27
   1b898:	d52d      	bpl.n	1b8f6 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b89a:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1b89e:	2201      	movs	r2, #1
   1b8a0:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1b8a4:	6926      	ldr	r6, [r4, #16]
   1b8a6:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1b8aa:	6863      	ldr	r3, [r4, #4]
   1b8ac:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1b8ae:	68f3      	ldr	r3, [r6, #12]
   1b8b0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1b8b4:	68f0      	ldr	r0, [r6, #12]
   1b8b6:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1b8b8:	f00d fec0 	bl	2963c <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1b8bc:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1b8be:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1b8c2:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1b8c6:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1b8ca:	68f2      	ldr	r2, [r6, #12]
   1b8cc:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1b8ce:	1a1b      	subs	r3, r3, r0
   1b8d0:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1b8d2:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1b8d4:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1b8d8:	4408      	add	r0, r1
	if (rx_len > 0) {
   1b8da:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1b8dc:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1b8de:	dd02      	ble.n	1b8e6 <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1b8e0:	4620      	mov	r0, r4
   1b8e2:	f00c fc20 	bl	28126 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1b8e6:	68f1      	ldr	r1, [r6, #12]
   1b8e8:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1b8ec:	2b00      	cmp	r3, #0
   1b8ee:	f040 80c5 	bne.w	1ba7c <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1b8f2:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b8f6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1b8fa:	b383      	cbz	r3, 1b95e <uarte_nrfx_isr_async+0x152>
   1b8fc:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1b900:	bb6e      	cbnz	r6, 1b95e <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1b902:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b904:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1b908:	4631      	mov	r1, r6
   1b90a:	a803      	add	r0, sp, #12
   1b90c:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1b910:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1b912:	f00d ffa4 	bl	2985e <memset>
   1b916:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1b918:	a903      	add	r1, sp, #12
   1b91a:	4620      	mov	r0, r4
	struct uart_event evt = {
   1b91c:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1b920:	f00c fbfa 	bl	28118 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1b924:	68fb      	ldr	r3, [r7, #12]
   1b926:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1b928:	1c51      	adds	r1, r2, #1
   1b92a:	d018      	beq.n	1b95e <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1b92c:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1b92e:	68ff      	ldr	r7, [r7, #12]
   1b930:	498e      	ldr	r1, [pc, #568]	; (1bb6c <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1b932:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1b934:	468e      	mov	lr, r1
   1b936:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1b93a:	4631      	mov	r1, r6
   1b93c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1b940:	fbcc e100 	smlal	lr, r1, ip, r0
   1b944:	2300      	movs	r3, #0
   1b946:	4670      	mov	r0, lr
   1b948:	4a89      	ldr	r2, [pc, #548]	; (1bb70 <uarte_nrfx_isr_async+0x364>)
   1b94a:	f7ed fad1 	bl	8ef0 <__aeabi_uldivmod>
   1b94e:	4602      	mov	r2, r0
   1b950:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1b952:	e9cd 0100 	strd	r0, r1, [sp]
   1b956:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1b95a:	f006 fe7d 	bl	22658 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b95e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1b962:	b333      	cbz	r3, 1b9b2 <uarte_nrfx_isr_async+0x1a6>
   1b964:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1b968:	bb1e      	cbnz	r6, 1b9b2 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b96a:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1b96e:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1b970:	4620      	mov	r0, r4
   1b972:	68f9      	ldr	r1, [r7, #12]
   1b974:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1b978:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1b97a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1b97e:	f00c fbeb 	bl	28158 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1b982:	68f9      	ldr	r1, [r7, #12]
   1b984:	4620      	mov	r0, r4
   1b986:	3164      	adds	r1, #100	; 0x64
   1b988:	f00c fbe6 	bl	28158 <rx_buf_release>
	if (data->async->rx_enabled) {
   1b98c:	68fb      	ldr	r3, [r7, #12]
   1b98e:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1b992:	2a00      	cmp	r2, #0
   1b994:	f000 80a3 	beq.w	1bade <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1b998:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b99c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b9a0:	06d8      	lsls	r0, r3, #27
   1b9a2:	d503      	bpl.n	1b9ac <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1b9a4:	2102      	movs	r1, #2
   1b9a6:	4620      	mov	r0, r4
   1b9a8:	f00c fcbb 	bl	28322 <async_uart_release>
	notify_rx_disable(dev);
   1b9ac:	4620      	mov	r0, r4
   1b9ae:	f00c fbeb 	bl	28188 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b9b2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1b9b6:	b1db      	cbz	r3, 1b9f0 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1b9b8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1b9bc:	05d9      	lsls	r1, r3, #23
   1b9be:	d517      	bpl.n	1b9f0 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1b9c0:	6863      	ldr	r3, [r4, #4]
   1b9c2:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1b9c4:	f04f 0120 	mov.w	r1, #32
   1b9c8:	f3ef 8211 	mrs	r2, BASEPRI
   1b9cc:	f381 8812 	msr	BASEPRI_MAX, r1
   1b9d0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b9d4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b9d8:	b131      	cbz	r1, 1b9e8 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b9da:	2100      	movs	r1, #0
   1b9dc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1b9e0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b9e4:	2101      	movs	r1, #1
   1b9e6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1b9e8:	f382 8811 	msr	BASEPRI, r2
   1b9ec:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b9f0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1b9f4:	2b00      	cmp	r3, #0
   1b9f6:	f43f af1e 	beq.w	1b836 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1b9fa:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1b9fe:	025a      	lsls	r2, r3, #9
   1ba00:	f57f af19 	bpl.w	1b836 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1ba04:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1ba06:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ba08:	e9d3 7300 	ldrd	r7, r3, [r3]
   1ba0c:	06db      	lsls	r3, r3, #27
   1ba0e:	d46b      	bmi.n	1bae8 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1ba10:	68eb      	ldr	r3, [r5, #12]
   1ba12:	689b      	ldr	r3, [r3, #8]
   1ba14:	2b00      	cmp	r3, #0
   1ba16:	f43f af0e 	beq.w	1b836 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1ba1a:	f04f 0320 	mov.w	r3, #32
   1ba1e:	f3ef 8211 	mrs	r2, BASEPRI
   1ba22:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba26:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1ba2a:	68eb      	ldr	r3, [r5, #12]
   1ba2c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1ba30:	2900      	cmp	r1, #0
   1ba32:	bfac      	ite	ge
   1ba34:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1ba38:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1ba3c:	f382 8811 	msr	BASEPRI, r2
   1ba40:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1ba44:	68eb      	ldr	r3, [r5, #12]
   1ba46:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1ba4a:	2a00      	cmp	r2, #0
   1ba4c:	d059      	beq.n	1bb02 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1ba4e:	f04f 0320 	mov.w	r3, #32
   1ba52:	f3ef 8611 	mrs	r6, BASEPRI
   1ba56:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba5a:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1ba5e:	4629      	mov	r1, r5
   1ba60:	4620      	mov	r0, r4
   1ba62:	f00c fc98 	bl	28396 <start_tx_locked>
	__asm__ volatile(
   1ba66:	f386 8811 	msr	BASEPRI, r6
   1ba6a:	f3bf 8f6f 	isb	sy
				return;
   1ba6e:	e6e2      	b.n	1b836 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1ba70:	2601      	movs	r6, #1
   1ba72:	e702      	b.n	1b87a <uarte_nrfx_isr_async+0x6e>
   1ba74:	2602      	movs	r6, #2
   1ba76:	e700      	b.n	1b87a <uarte_nrfx_isr_async+0x6e>
   1ba78:	2604      	movs	r6, #4
   1ba7a:	e6fe      	b.n	1b87a <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1ba7c:	4620      	mov	r0, r4
   1ba7e:	3158      	adds	r1, #88	; 0x58
   1ba80:	f00c fb6a 	bl	28158 <rx_buf_release>
	__asm__ volatile(
   1ba84:	f04f 0320 	mov.w	r3, #32
   1ba88:	f3ef 8111 	mrs	r1, BASEPRI
   1ba8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba90:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1ba94:	68f3      	ldr	r3, [r6, #12]
   1ba96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1ba98:	b1f2      	cbz	r2, 1bad8 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1ba9a:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1ba9c:	68f3      	ldr	r3, [r6, #12]
   1ba9e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1baa0:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1baa2:	2300      	movs	r3, #0
   1baa4:	68f2      	ldr	r2, [r6, #12]
   1baa6:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1baa8:	68f2      	ldr	r2, [r6, #12]
   1baaa:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1baac:	68f2      	ldr	r2, [r6, #12]
   1baae:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1bab4:	b90b      	cbnz	r3, 1baba <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bab6:	2301      	movs	r3, #1
   1bab8:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1baba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1babe:	f023 0320 	bic.w	r3, r3, #32
   1bac2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1bac6:	f381 8811 	msr	BASEPRI, r1
   1baca:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1bace:	2200      	movs	r2, #0
   1bad0:	68f3      	ldr	r3, [r6, #12]
   1bad2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1bad6:	e70e      	b.n	1b8f6 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bad8:	2301      	movs	r3, #1
   1bada:	607b      	str	r3, [r7, #4]
}
   1badc:	e7f3      	b.n	1bac6 <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1bade:	4611      	mov	r1, r2
   1bae0:	6860      	ldr	r0, [r4, #4]
   1bae2:	f00c fbe9 	bl	282b8 <rx_flush.isra.0>
   1bae6:	e759      	b.n	1b99c <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1bae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1baec:	2101      	movs	r1, #1
   1baee:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1baf2:	4620      	mov	r0, r4
   1baf4:	f00c fc15 	bl	28322 <async_uart_release>
		if (!data->async->tx_size) {
   1baf8:	68eb      	ldr	r3, [r5, #12]
   1bafa:	68db      	ldr	r3, [r3, #12]
   1bafc:	2b00      	cmp	r3, #0
   1bafe:	d187      	bne.n	1ba10 <uarte_nrfx_isr_async+0x204>
   1bb00:	e699      	b.n	1b836 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1bb02:	6899      	ldr	r1, [r3, #8]
   1bb04:	691a      	ldr	r2, [r3, #16]
   1bb06:	4291      	cmp	r1, r2
   1bb08:	d00c      	beq.n	1bb24 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1bb0a:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1bb0c:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1bb0e:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1bb10:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1bb12:	d128      	bne.n	1bb66 <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1bb14:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1bb16:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1bb18:	f00c fbb6 	bl	28288 <setup_tx_cache>
   1bb1c:	2800      	cmp	r0, #0
   1bb1e:	d196      	bne.n	1ba4e <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1bb20:	68eb      	ldr	r3, [r5, #12]
   1bb22:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1bb24:	68e8      	ldr	r0, [r5, #12]
   1bb26:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1bb28:	f00d fd88 	bl	2963c <z_impl_k_timer_stop>
	struct uart_event evt = {
   1bb2c:	2214      	movs	r2, #20
   1bb2e:	2100      	movs	r1, #0
   1bb30:	a803      	add	r0, sp, #12
   1bb32:	f00d fe94 	bl	2985e <memset>
		.data.tx.buf = data->async->tx_buf,
   1bb36:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1bb38:	4620      	mov	r0, r4
	struct uart_event evt = {
   1bb3a:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1bb3c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1bb3e:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1bb42:	68db      	ldr	r3, [r3, #12]
   1bb44:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1bb46:	bf1c      	itt	ne
   1bb48:	2301      	movne	r3, #1
   1bb4a:	f88d 300c 	strbne.w	r3, [sp, #12]
   1bb4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1bb52:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1bb56:	2300      	movs	r3, #0
   1bb58:	68ea      	ldr	r2, [r5, #12]
   1bb5a:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1bb5c:	68ea      	ldr	r2, [r5, #12]
   1bb5e:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1bb60:	f00c fada 	bl	28118 <user_callback>
   1bb64:	e667      	b.n	1b836 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1bb66:	4616      	mov	r6, r2
   1bb68:	e7dc      	b.n	1bb24 <uarte_nrfx_isr_async+0x318>
   1bb6a:	bf00      	nop
   1bb6c:	000f423f 	.word	0x000f423f
   1bb70:	000f4240 	.word	0x000f4240

0001bb74 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1bb74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1bb76:	7e01      	ldrb	r1, [r0, #24]
   1bb78:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1bb7a:	2902      	cmp	r1, #2
   1bb7c:	d014      	beq.n	1bba8 <bt_rpmsg_send+0x34>
   1bb7e:	2904      	cmp	r1, #4
   1bb80:	d011      	beq.n	1bba6 <bt_rpmsg_send+0x32>
   1bb82:	b1f9      	cbz	r1, 1bbc4 <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1bb84:	4b10      	ldr	r3, [pc, #64]	; (1bbc8 <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   1bb86:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1bb88:	9302      	str	r3, [sp, #8]
   1bb8a:	2300      	movs	r3, #0
   1bb8c:	2201      	movs	r2, #1
   1bb8e:	4618      	mov	r0, r3
   1bb90:	e9cd 3300 	strd	r3, r3, [sp]
   1bb94:	490d      	ldr	r1, [pc, #52]	; (1bbcc <bt_rpmsg_send+0x58>)
   1bb96:	f00c fca3 	bl	284e0 <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   1bb9a:	4620      	mov	r0, r4
   1bb9c:	f7fd fbec 	bl	19378 <net_buf_unref>
	return 0;
}
   1bba0:	2000      	movs	r0, #0
   1bba2:	b004      	add	sp, #16
   1bba4:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   1bba6:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1bba8:	f104 000c 	add.w	r0, r4, #12
   1bbac:	f00c f88a 	bl	27cc4 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1bbb0:	8a22      	ldrh	r2, [r4, #16]
   1bbb2:	68e1      	ldr	r1, [r4, #12]
   1bbb4:	4806      	ldr	r0, [pc, #24]	; (1bbd0 <bt_rpmsg_send+0x5c>)
   1bbb6:	f7f3 fb77 	bl	f2a8 <ipc_service_send>
	if (err < 0) {
   1bbba:	2800      	cmp	r0, #0
   1bbbc:	daed      	bge.n	1bb9a <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   1bbbe:	4b05      	ldr	r3, [pc, #20]	; (1bbd4 <bt_rpmsg_send+0x60>)
   1bbc0:	9003      	str	r0, [sp, #12]
   1bbc2:	e7e1      	b.n	1bb88 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   1bbc4:	2101      	movs	r1, #1
   1bbc6:	e7ef      	b.n	1bba8 <bt_rpmsg_send+0x34>
   1bbc8:	0002fac9 	.word	0x0002fac9
   1bbcc:	0002a748 	.word	0x0002a748
   1bbd0:	20021334 	.word	0x20021334
   1bbd4:	0002fad9 	.word	0x0002fad9

0001bbd8 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1bbd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1bbda:	4809      	ldr	r0, [pc, #36]	; (1bc00 <bt_rpmsg_init+0x28>)
   1bbdc:	f7f6 fdde 	bl	1279c <bt_hci_driver_register>
	if (err < 0) {
   1bbe0:	1e04      	subs	r4, r0, #0
   1bbe2:	da0a      	bge.n	1bbfa <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1bbe4:	4b07      	ldr	r3, [pc, #28]	; (1bc04 <bt_rpmsg_init+0x2c>)
   1bbe6:	2201      	movs	r2, #1
   1bbe8:	9302      	str	r3, [sp, #8]
   1bbea:	2300      	movs	r3, #0
   1bbec:	4906      	ldr	r1, [pc, #24]	; (1bc08 <bt_rpmsg_init+0x30>)
   1bbee:	4618      	mov	r0, r3
   1bbf0:	e9cd 3300 	strd	r3, r3, [sp]
   1bbf4:	9403      	str	r4, [sp, #12]
   1bbf6:	f00c fc73 	bl	284e0 <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   1bbfa:	4620      	mov	r0, r4
   1bbfc:	b004      	add	sp, #16
   1bbfe:	bd10      	pop	{r4, pc}
   1bc00:	0002b568 	.word	0x0002b568
   1bc04:	0002faf1 	.word	0x0002faf1
   1bc08:	0002a748 	.word	0x0002a748

0001bc0c <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1bc0c:	4801      	ldr	r0, [pc, #4]	; (1bc14 <hci_ept_bound+0x8>)
   1bc0e:	f004 b911 	b.w	1fe34 <z_impl_k_sem_give>
   1bc12:	bf00      	nop
   1bc14:	20008b18 	.word	0x20008b18

0001bc18 <bt_rpmsg_open>:
{
   1bc18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1bc1a:	4816      	ldr	r0, [pc, #88]	; (1bc74 <bt_rpmsg_open+0x5c>)
   1bc1c:	f7f3 fae6 	bl	f1ec <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1bc20:	4604      	mov	r4, r0
   1bc22:	b180      	cbz	r0, 1bc46 <bt_rpmsg_open+0x2e>
   1bc24:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1bc28:	d00d      	beq.n	1bc46 <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1bc2a:	4b13      	ldr	r3, [pc, #76]	; (1bc78 <bt_rpmsg_open+0x60>)
   1bc2c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   1bc2e:	9302      	str	r3, [sp, #8]
   1bc30:	2300      	movs	r3, #0
   1bc32:	2201      	movs	r2, #1
   1bc34:	4618      	mov	r0, r3
   1bc36:	e9cd 3300 	strd	r3, r3, [sp]
   1bc3a:	4910      	ldr	r1, [pc, #64]	; (1bc7c <bt_rpmsg_open+0x64>)
   1bc3c:	f00c fc50 	bl	284e0 <z_log_msg_runtime_create.constprop.0>
}
   1bc40:	4620      	mov	r0, r4
   1bc42:	b004      	add	sp, #16
   1bc44:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1bc46:	4a0e      	ldr	r2, [pc, #56]	; (1bc80 <bt_rpmsg_open+0x68>)
   1bc48:	490e      	ldr	r1, [pc, #56]	; (1bc84 <bt_rpmsg_open+0x6c>)
   1bc4a:	480a      	ldr	r0, [pc, #40]	; (1bc74 <bt_rpmsg_open+0x5c>)
   1bc4c:	f7f3 fafa 	bl	f244 <ipc_service_register_endpoint>
	if (err) {
   1bc50:	4604      	mov	r4, r0
   1bc52:	b110      	cbz	r0, 1bc5a <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   1bc54:	4b0c      	ldr	r3, [pc, #48]	; (1bc88 <bt_rpmsg_open+0x70>)
   1bc56:	9003      	str	r0, [sp, #12]
   1bc58:	e7e9      	b.n	1bc2e <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   1bc5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1bc5e:	2300      	movs	r3, #0
   1bc60:	480a      	ldr	r0, [pc, #40]	; (1bc8c <bt_rpmsg_open+0x74>)
   1bc62:	f004 f92b 	bl	1febc <z_impl_k_sem_take>
	if (err) {
   1bc66:	4604      	mov	r4, r0
   1bc68:	2800      	cmp	r0, #0
   1bc6a:	d0e9      	beq.n	1bc40 <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   1bc6c:	4b08      	ldr	r3, [pc, #32]	; (1bc90 <bt_rpmsg_open+0x78>)
   1bc6e:	9003      	str	r0, [sp, #12]
   1bc70:	e7dd      	b.n	1bc2e <bt_rpmsg_open+0x16>
   1bc72:	bf00      	nop
   1bc74:	0002a1f8 	.word	0x0002a1f8
   1bc78:	0002fb1b 	.word	0x0002fb1b
   1bc7c:	0002a748 	.word	0x0002a748
   1bc80:	20008664 	.word	0x20008664
   1bc84:	20021334 	.word	0x20021334
   1bc88:	0002fb4b 	.word	0x0002fb4b
   1bc8c:	20008b18 	.word	0x20008b18
   1bc90:	0002fb6f 	.word	0x0002fb6f

0001bc94 <hci_ept_recv>:
{
   1bc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc98:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   1bc9a:	7800      	ldrb	r0, [r0, #0]
{
   1bc9c:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   1bc9e:	2804      	cmp	r0, #4
{
   1bca0:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   1bca2:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1bca6:	d009      	beq.n	1bcbc <hci_ept_recv+0x28>
   1bca8:	2805      	cmp	r0, #5
   1bcaa:	f000 8099 	beq.w	1bde0 <hci_ept_recv+0x14c>
   1bcae:	2802      	cmp	r0, #2
   1bcb0:	f040 80bd 	bne.w	1be2e <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   1bcb4:	2b03      	cmp	r3, #3
   1bcb6:	d867      	bhi.n	1bd88 <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   1bcb8:	4b63      	ldr	r3, [pc, #396]	; (1be48 <hci_ept_recv+0x1b4>)
   1bcba:	e002      	b.n	1bcc2 <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   1bcbc:	2b01      	cmp	r3, #1
   1bcbe:	d80c      	bhi.n	1bcda <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   1bcc0:	4b62      	ldr	r3, [pc, #392]	; (1be4c <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   1bcc2:	9302      	str	r3, [sp, #8]
   1bcc4:	2300      	movs	r3, #0
   1bcc6:	2201      	movs	r2, #1
   1bcc8:	4618      	mov	r0, r3
   1bcca:	e9cd 3300 	strd	r3, r3, [sp]
   1bcce:	4960      	ldr	r1, [pc, #384]	; (1be50 <hci_ept_recv+0x1bc>)
   1bcd0:	f00c fc06 	bl	284e0 <z_log_msg_runtime_create.constprop.0>
}
   1bcd4:	b009      	add	sp, #36	; 0x24
   1bcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1bcda:	7873      	ldrb	r3, [r6, #1]
   1bcdc:	2b3e      	cmp	r3, #62	; 0x3e
   1bcde:	d136      	bne.n	1bd4e <hci_ept_recv+0xba>
		switch (subevt_type) {
   1bce0:	78f7      	ldrb	r7, [r6, #3]
   1bce2:	1ebb      	subs	r3, r7, #2
   1bce4:	425f      	negs	r7, r3
   1bce6:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1bce8:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1bcec:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   1bcee:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1bcf2:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   1bcf6:	d12f      	bne.n	1bd58 <hci_ept_recv+0xc4>
   1bcf8:	b35f      	cbz	r7, 1bd52 <hci_ept_recv+0xbe>
   1bcfa:	f04f 0800 	mov.w	r8, #0
   1bcfe:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1bd02:	f8df b150 	ldr.w	fp, [pc, #336]	; 1be54 <hci_ept_recv+0x1c0>
   1bd06:	f8df a148 	ldr.w	sl, [pc, #328]	; 1be50 <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1bd0a:	4642      	mov	r2, r8
   1bd0c:	464b      	mov	r3, r9
   1bd0e:	4639      	mov	r1, r7
   1bd10:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1bd14:	f7f5 fb08 	bl	11328 <bt_buf_get_evt>
		if (!buf) {
   1bd18:	4604      	mov	r4, r0
   1bd1a:	b1f8      	cbz	r0, 1bd5c <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bd1c:	f100 070c 	add.w	r7, r0, #12
   1bd20:	2202      	movs	r2, #2
   1bd22:	a907      	add	r1, sp, #28
   1bd24:	4638      	mov	r0, r7
   1bd26:	f00b ffe8 	bl	27cfa <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1bd2a:	4638      	mov	r0, r7
   1bd2c:	f00b ffdd 	bl	27cea <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1bd30:	4285      	cmp	r5, r0
   1bd32:	d91e      	bls.n	1bd72 <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1bd34:	4b48      	ldr	r3, [pc, #288]	; (1be58 <hci_ept_recv+0x1c4>)
   1bd36:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1bd3a:	9302      	str	r3, [sp, #8]
   1bd3c:	2300      	movs	r3, #0
   1bd3e:	2201      	movs	r2, #1
   1bd40:	4618      	mov	r0, r3
   1bd42:	e9cd 3300 	strd	r3, r3, [sp]
   1bd46:	4942      	ldr	r1, [pc, #264]	; (1be50 <hci_ept_recv+0x1bc>)
   1bd48:	f00c fbca 	bl	284e0 <z_log_msg_runtime_create.constprop.0>
   1bd4c:	e03c      	b.n	1bdc8 <hci_ept_recv+0x134>
			return false;
   1bd4e:	2700      	movs	r7, #0
   1bd50:	e7ca      	b.n	1bce8 <hci_ept_recv+0x54>
   1bd52:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1bd56:	e7d2      	b.n	1bcfe <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   1bd58:	4b40      	ldr	r3, [pc, #256]	; (1be5c <hci_ept_recv+0x1c8>)
   1bd5a:	e7b2      	b.n	1bcc2 <hci_ept_recv+0x2e>
			if (discardable) {
   1bd5c:	2f00      	cmp	r7, #0
   1bd5e:	d1b9      	bne.n	1bcd4 <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1bd60:	463b      	mov	r3, r7
   1bd62:	2202      	movs	r2, #2
   1bd64:	4651      	mov	r1, sl
   1bd66:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1bd6a:	9700      	str	r7, [sp, #0]
   1bd6c:	f00c fbb8 	bl	284e0 <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   1bd70:	e7cb      	b.n	1bd0a <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bd72:	462a      	mov	r2, r5
   1bd74:	1cf1      	adds	r1, r6, #3
   1bd76:	4638      	mov	r0, r7
   1bd78:	f00b ffbf 	bl	27cfa <net_buf_simple_add_mem>
		bt_recv(buf);
   1bd7c:	4620      	mov	r0, r4
}
   1bd7e:	b009      	add	sp, #36	; 0x24
   1bd80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   1bd84:	f7f6 bcda 	b.w	1273c <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1bd88:	2200      	movs	r2, #0
   1bd8a:	2300      	movs	r3, #0
   1bd8c:	2003      	movs	r0, #3
   1bd8e:	f7f5 fa7d 	bl	1128c <bt_buf_get_rx>
	if (buf) {
   1bd92:	4604      	mov	r4, r0
   1bd94:	b1e0      	cbz	r0, 1bdd0 <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1bd96:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1bd9a:	f100 070c 	add.w	r7, r0, #12
   1bd9e:	2204      	movs	r2, #4
   1bda0:	4638      	mov	r0, r7
   1bda2:	a907      	add	r1, sp, #28
   1bda4:	9307      	str	r3, [sp, #28]
   1bda6:	f00b ffa8 	bl	27cfa <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1bdaa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1bdae:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1bdb0:	429d      	cmp	r5, r3
   1bdb2:	d034      	beq.n	1be1e <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   1bdb4:	4b2a      	ldr	r3, [pc, #168]	; (1be60 <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   1bdb6:	9302      	str	r3, [sp, #8]
   1bdb8:	2300      	movs	r3, #0
   1bdba:	2201      	movs	r2, #1
   1bdbc:	4618      	mov	r0, r3
   1bdbe:	e9cd 3300 	strd	r3, r3, [sp]
   1bdc2:	4923      	ldr	r1, [pc, #140]	; (1be50 <hci_ept_recv+0x1bc>)
   1bdc4:	f00c fb8c 	bl	284e0 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1bdc8:	4620      	mov	r0, r4
   1bdca:	f7fd fad5 	bl	19378 <net_buf_unref>
	if (buf) {
   1bdce:	e781      	b.n	1bcd4 <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   1bdd0:	4b24      	ldr	r3, [pc, #144]	; (1be64 <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   1bdd2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1bdd6:	2201      	movs	r2, #1
   1bdd8:	4623      	mov	r3, r4
   1bdda:	491d      	ldr	r1, [pc, #116]	; (1be50 <hci_ept_recv+0x1bc>)
   1bddc:	9400      	str	r4, [sp, #0]
   1bdde:	e777      	b.n	1bcd0 <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   1bde0:	2b03      	cmp	r3, #3
   1bde2:	d801      	bhi.n	1bde8 <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   1bde4:	4b20      	ldr	r3, [pc, #128]	; (1be68 <hci_ept_recv+0x1d4>)
   1bde6:	e76c      	b.n	1bcc2 <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1bde8:	2200      	movs	r2, #0
   1bdea:	2300      	movs	r3, #0
   1bdec:	f7f5 fa4e 	bl	1128c <bt_buf_get_rx>
	if (buf) {
   1bdf0:	4604      	mov	r4, r0
   1bdf2:	b190      	cbz	r0, 1be1a <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1bdf4:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1bdf8:	f100 070c 	add.w	r7, r0, #12
   1bdfc:	2204      	movs	r2, #4
   1bdfe:	4638      	mov	r0, r7
   1be00:	a907      	add	r1, sp, #28
   1be02:	9307      	str	r3, [sp, #28]
   1be04:	f00b ff79 	bl	27cfa <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1be08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1be0c:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1be0e:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1be12:	429d      	cmp	r5, r3
   1be14:	d003      	beq.n	1be1e <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   1be16:	4b15      	ldr	r3, [pc, #84]	; (1be6c <hci_ept_recv+0x1d8>)
   1be18:	e7cd      	b.n	1bdb6 <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   1be1a:	4b15      	ldr	r3, [pc, #84]	; (1be70 <hci_ept_recv+0x1dc>)
   1be1c:	e7d9      	b.n	1bdd2 <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   1be1e:	4638      	mov	r0, r7
   1be20:	f00b ff63 	bl	27cea <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1be24:	4285      	cmp	r5, r0
   1be26:	d885      	bhi.n	1bd34 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1be28:	462a      	mov	r2, r5
   1be2a:	1d71      	adds	r1, r6, #5
   1be2c:	e7a3      	b.n	1bd76 <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1be2e:	4b11      	ldr	r3, [pc, #68]	; (1be74 <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   1be30:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1be32:	9302      	str	r3, [sp, #8]
   1be34:	2300      	movs	r3, #0
   1be36:	2201      	movs	r2, #1
   1be38:	4618      	mov	r0, r3
   1be3a:	e9cd 3300 	strd	r3, r3, [sp]
   1be3e:	4904      	ldr	r1, [pc, #16]	; (1be50 <hci_ept_recv+0x1bc>)
   1be40:	f00c fb4e 	bl	284e0 <z_log_msg_runtime_create.constprop.0>
   1be44:	e746      	b.n	1bcd4 <hci_ept_recv+0x40>
   1be46:	bf00      	nop
   1be48:	0002fc2c 	.word	0x0002fc2c
   1be4c:	0002fb8f 	.word	0x0002fb8f
   1be50:	0002a748 	.word	0x0002a748
   1be54:	0002fbd4 	.word	0x0002fbd4
   1be58:	0002fc09 	.word	0x0002fc09
   1be5c:	0002fbb0 	.word	0x0002fbb0
   1be60:	0002fc65 	.word	0x0002fc65
   1be64:	0002fc4b 	.word	0x0002fc4b
   1be68:	0002fc87 	.word	0x0002fc87
   1be6c:	0002fcc0 	.word	0x0002fcc0
   1be70:	0002fca6 	.word	0x0002fca6
   1be74:	0002fce2 	.word	0x0002fce2

0001be78 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1be78:	2301      	movs	r3, #1
   1be7a:	4083      	lsls	r3, r0
{
   1be7c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1be7e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1be80:	4a0b      	ldr	r2, [pc, #44]	; (1beb0 <compare_int_lock+0x38>)
   1be82:	e8d2 1fef 	ldaex	r1, [r2]
   1be86:	ea01 0504 	and.w	r5, r1, r4
   1be8a:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1be8e:	2e00      	cmp	r6, #0
   1be90:	d1f7      	bne.n	1be82 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1be92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1be96:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1be98:	4806      	ldr	r0, [pc, #24]	; (1beb4 <compare_int_lock+0x3c>)
   1be9a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1be9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bea2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1bea6:	420b      	tst	r3, r1
}
   1bea8:	bf14      	ite	ne
   1beaa:	2001      	movne	r0, #1
   1beac:	2000      	moveq	r0, #0
   1beae:	bd70      	pop	{r4, r5, r6, pc}
   1beb0:	20021344 	.word	0x20021344
   1beb4:	40015000 	.word	0x40015000

0001beb8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1beb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1beba:	491b      	ldr	r1, [pc, #108]	; (1bf28 <sys_clock_timeout_handler+0x70>)
{
   1bebc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1bebe:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bec2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1bec4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1bec8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1becc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1bece:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1bed2:	d30f      	bcc.n	1bef4 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1bed4:	f006 fa24 	bl	22320 <sys_clock_announce>
    return p_reg->CC[ch];
   1bed8:	00a3      	lsls	r3, r4, #2
   1beda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bede:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1bee2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1bee6:	4295      	cmp	r5, r2
   1bee8:	d11d      	bne.n	1bf26 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1beea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1beee:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1bef2:	e012      	b.n	1bf1a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1bef4:	4b0d      	ldr	r3, [pc, #52]	; (1bf2c <sys_clock_timeout_handler+0x74>)
   1bef6:	681b      	ldr	r3, [r3, #0]
   1bef8:	0a1a      	lsrs	r2, r3, #8
   1befa:	061b      	lsls	r3, r3, #24
   1befc:	195e      	adds	r6, r3, r5
   1befe:	4b0c      	ldr	r3, [pc, #48]	; (1bf30 <sys_clock_timeout_handler+0x78>)
   1bf00:	f142 0700 	adc.w	r7, r2, #0
   1bf04:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1bf08:	f006 fa0a 	bl	22320 <sys_clock_announce>
    return p_reg->CC[ch];
   1bf0c:	4a09      	ldr	r2, [pc, #36]	; (1bf34 <sys_clock_timeout_handler+0x7c>)
   1bf0e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1bf12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1bf16:	429d      	cmp	r5, r3
   1bf18:	d105      	bne.n	1bf26 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bf1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1bf1e:	4a05      	ldr	r2, [pc, #20]	; (1bf34 <sys_clock_timeout_handler+0x7c>)
   1bf20:	40a3      	lsls	r3, r4
   1bf22:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1bf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf28:	20009bf8 	.word	0x20009bf8
   1bf2c:	20021348 	.word	0x20021348
   1bf30:	20009c00 	.word	0x20009c00
   1bf34:	40015000 	.word	0x40015000

0001bf38 <compare_int_unlock>:
	if (key) {
   1bf38:	b1d9      	cbz	r1, 1bf72 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1bf3a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bf3c:	4a0d      	ldr	r2, [pc, #52]	; (1bf74 <compare_int_unlock+0x3c>)
   1bf3e:	4083      	lsls	r3, r0
   1bf40:	e8d2 cfef 	ldaex	ip, [r2]
   1bf44:	ea4c 0c03 	orr.w	ip, ip, r3
   1bf48:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1bf4c:	2900      	cmp	r1, #0
   1bf4e:	d1f7      	bne.n	1bf40 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bf50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1bf54:	4a08      	ldr	r2, [pc, #32]	; (1bf78 <compare_int_unlock+0x40>)
   1bf56:	4083      	lsls	r3, r0
   1bf58:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bf5c:	4b07      	ldr	r3, [pc, #28]	; (1bf7c <compare_int_unlock+0x44>)
   1bf5e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1bf62:	40c3      	lsrs	r3, r0
   1bf64:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bf66:	bf42      	ittt	mi
   1bf68:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1bf6c:	4b04      	ldrmi	r3, [pc, #16]	; (1bf80 <compare_int_unlock+0x48>)
   1bf6e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1bf72:	4770      	bx	lr
   1bf74:	20021344 	.word	0x20021344
   1bf78:	40015000 	.word	0x40015000
   1bf7c:	2002133c 	.word	0x2002133c
   1bf80:	e000e100 	.word	0xe000e100

0001bf84 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bf84:	2801      	cmp	r0, #1
{
   1bf86:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bf88:	d909      	bls.n	1bf9e <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1bf8a:	4907      	ldr	r1, [pc, #28]	; (1bfa8 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1bf8c:	4807      	ldr	r0, [pc, #28]	; (1bfac <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1bf8e:	237c      	movs	r3, #124	; 0x7c
   1bf90:	4a07      	ldr	r2, [pc, #28]	; (1bfb0 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1bf92:	f008 fec4 	bl	24d1e <assert_print>
   1bf96:	217c      	movs	r1, #124	; 0x7c
   1bf98:	4805      	ldr	r0, [pc, #20]	; (1bfb0 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1bf9a:	f008 feb9 	bl	24d10 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1bf9e:	0083      	lsls	r3, r0, #2
}
   1bfa0:	4804      	ldr	r0, [pc, #16]	; (1bfb4 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1bfa2:	4418      	add	r0, r3
   1bfa4:	bd08      	pop	{r3, pc}
   1bfa6:	bf00      	nop
   1bfa8:	0002fd5d 	.word	0x0002fd5d
   1bfac:	0002b6e9 	.word	0x0002b6e9
   1bfb0:	0002fd2c 	.word	0x0002fd2c
   1bfb4:	40015140 	.word	0x40015140

0001bfb8 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bfb8:	2801      	cmp	r0, #1
{
   1bfba:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bfbc:	d909      	bls.n	1bfd2 <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1bfbe:	4907      	ldr	r1, [pc, #28]	; (1bfdc <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1bfc0:	4807      	ldr	r0, [pc, #28]	; (1bfe0 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1bfc2:	2383      	movs	r3, #131	; 0x83
   1bfc4:	4a07      	ldr	r2, [pc, #28]	; (1bfe4 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1bfc6:	f008 feaa 	bl	24d1e <assert_print>
   1bfca:	2183      	movs	r1, #131	; 0x83
   1bfcc:	4805      	ldr	r0, [pc, #20]	; (1bfe4 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1bfce:	f008 fe9f 	bl	24d10 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1bfd2:	2800      	cmp	r0, #0
}
   1bfd4:	4804      	ldr	r0, [pc, #16]	; (1bfe8 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1bfd6:	bf08      	it	eq
   1bfd8:	2000      	moveq	r0, #0
   1bfda:	bd08      	pop	{r3, pc}
   1bfdc:	0002fd5d 	.word	0x0002fd5d
   1bfe0:	0002b6e9 	.word	0x0002b6e9
   1bfe4:	0002fd2c 	.word	0x0002fd2c
   1bfe8:	40015044 	.word	0x40015044

0001bfec <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bfec:	2801      	cmp	r0, #1
{
   1bfee:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bff0:	d909      	bls.n	1c006 <z_nrf_rtc_timer_compare_read+0x1a>
   1bff2:	4908      	ldr	r1, [pc, #32]	; (1c014 <z_nrf_rtc_timer_compare_read+0x28>)
   1bff4:	4808      	ldr	r0, [pc, #32]	; (1c018 <z_nrf_rtc_timer_compare_read+0x2c>)
   1bff6:	23b9      	movs	r3, #185	; 0xb9
   1bff8:	4a08      	ldr	r2, [pc, #32]	; (1c01c <z_nrf_rtc_timer_compare_read+0x30>)
   1bffa:	f008 fe90 	bl	24d1e <assert_print>
   1bffe:	21b9      	movs	r1, #185	; 0xb9
   1c000:	4806      	ldr	r0, [pc, #24]	; (1c01c <z_nrf_rtc_timer_compare_read+0x30>)
   1c002:	f008 fe85 	bl	24d10 <assert_post_action>
    return p_reg->CC[ch];
   1c006:	4b06      	ldr	r3, [pc, #24]	; (1c020 <z_nrf_rtc_timer_compare_read+0x34>)
   1c008:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c00c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1c010:	bd08      	pop	{r3, pc}
   1c012:	bf00      	nop
   1c014:	0002fd5d 	.word	0x0002fd5d
   1c018:	0002b6e9 	.word	0x0002b6e9
   1c01c:	0002fd2c 	.word	0x0002fd2c
   1c020:	40015000 	.word	0x40015000

0001c024 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1c024:	4b0d      	ldr	r3, [pc, #52]	; (1c05c <z_nrf_rtc_timer_read+0x38>)
   1c026:	6818      	ldr	r0, [r3, #0]
   1c028:	0a01      	lsrs	r1, r0, #8
   1c02a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1c02c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1c030:	4b0b      	ldr	r3, [pc, #44]	; (1c060 <z_nrf_rtc_timer_read+0x3c>)
   1c032:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1c036:	1818      	adds	r0, r3, r0
   1c038:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1c03c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1c040:	d20a      	bcs.n	1c058 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1c042:	4b08      	ldr	r3, [pc, #32]	; (1c064 <z_nrf_rtc_timer_read+0x40>)
   1c044:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c048:	4290      	cmp	r0, r2
   1c04a:	eb71 0303 	sbcs.w	r3, r1, r3
   1c04e:	d203      	bcs.n	1c058 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1c050:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1c054:	f141 0100 	adc.w	r1, r1, #0
}
   1c058:	4770      	bx	lr
   1c05a:	bf00      	nop
   1c05c:	20021348 	.word	0x20021348
   1c060:	40015000 	.word	0x40015000
   1c064:	20009c00 	.word	0x20009c00

0001c068 <compare_set>:
{
   1c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c06c:	b085      	sub	sp, #20
   1c06e:	4614      	mov	r4, r2
   1c070:	461d      	mov	r5, r3
   1c072:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1c074:	f7ff ff00 	bl	1be78 <compare_int_lock>
   1c078:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1c07a:	f7ff ffd3 	bl	1c024 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1c07e:	42a0      	cmp	r0, r4
   1c080:	eb71 0305 	sbcs.w	r3, r1, r5
   1c084:	f080 8086 	bcs.w	1c194 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1c088:	4b49      	ldr	r3, [pc, #292]	; (1c1b0 <compare_set+0x148>)
   1c08a:	1a20      	subs	r0, r4, r0
   1c08c:	eb65 0101 	sbc.w	r1, r5, r1
   1c090:	4298      	cmp	r0, r3
   1c092:	f171 0100 	sbcs.w	r1, r1, #0
   1c096:	f080 8088 	bcs.w	1c1aa <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1c09a:	4b46      	ldr	r3, [pc, #280]	; (1c1b4 <compare_set+0x14c>)
   1c09c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1c0a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1c0a4:	429d      	cmp	r5, r3
   1c0a6:	bf08      	it	eq
   1c0a8:	4294      	cmpeq	r4, r2
   1c0aa:	d05e      	beq.n	1c16a <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1c0ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1c0b0:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1c0b4:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1c0b6:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1c0ba:	f06f 0101 	mvn.w	r1, #1
   1c0be:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1c0c2:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1c0c6:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1c0ca:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1c0ce:	40bb      	lsls	r3, r7
   1c0d0:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c0d4:	fa1f f888 	uxth.w	r8, r8
   1c0d8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1c0dc:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1c0de:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1c0e2:	4b35      	ldr	r3, [pc, #212]	; (1c1b8 <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c0e4:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1c0e8:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1c0ec:	eba0 000a 	sub.w	r0, r0, sl
   1c0f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1c0f4:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1c0f8:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1c0fa:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1c0fe:	d107      	bne.n	1c110 <compare_set+0xa8>
   1c100:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1c102:	2013      	movs	r0, #19
   1c104:	f00d fa68 	bl	295d8 <z_impl_k_busy_wait>
   1c108:	f06f 0101 	mvn.w	r1, #1
   1c10c:	4b2a      	ldr	r3, [pc, #168]	; (1c1b8 <compare_set+0x150>)
   1c10e:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1c110:	eba1 000a 	sub.w	r0, r1, sl
   1c114:	4430      	add	r0, r6
   1c116:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1c11a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c11e:	f04f 0000 	mov.w	r0, #0
   1c122:	f8c8 0000 	str.w	r0, [r8]
   1c126:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1c12a:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1c12c:	bf88      	it	hi
   1c12e:	eb0a 060b 	addhi.w	r6, sl, fp
   1c132:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1c136:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1c13a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1c13e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1c142:	bf88      	it	hi
   1c144:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1c148:	4582      	cmp	sl, r0
   1c14a:	d006      	beq.n	1c15a <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1c14c:	1a08      	subs	r0, r1, r0
   1c14e:	4430      	add	r0, r6
   1c150:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1c154:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c158:	d81a      	bhi.n	1c190 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1c15a:	1ab6      	subs	r6, r6, r2
   1c15c:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1c160:	1936      	adds	r6, r6, r4
   1c162:	f145 0300 	adc.w	r3, r5, #0
   1c166:	4634      	mov	r4, r6
   1c168:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1c16a:	4912      	ldr	r1, [pc, #72]	; (1c1b4 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1c16c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1c16e:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1c172:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1c176:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1c178:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1c17a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1c17c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c17e:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1c180:	4638      	mov	r0, r7
   1c182:	9901      	ldr	r1, [sp, #4]
   1c184:	f7ff fed8 	bl	1bf38 <compare_int_unlock>
}
   1c188:	4620      	mov	r0, r4
   1c18a:	b005      	add	sp, #20
   1c18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c190:	4630      	mov	r0, r6
   1c192:	e7a9      	b.n	1c0e8 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1c194:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c196:	4a09      	ldr	r2, [pc, #36]	; (1c1bc <compare_set+0x154>)
   1c198:	40bb      	lsls	r3, r7
   1c19a:	e8d2 0fef 	ldaex	r0, [r2]
   1c19e:	4318      	orrs	r0, r3
   1c1a0:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1c1a4:	2900      	cmp	r1, #0
   1c1a6:	d0e0      	beq.n	1c16a <compare_set+0x102>
   1c1a8:	e7f7      	b.n	1c19a <compare_set+0x132>
			return -EINVAL;
   1c1aa:	f06f 0415 	mvn.w	r4, #21
   1c1ae:	e7e7      	b.n	1c180 <compare_set+0x118>
   1c1b0:	01000001 	.word	0x01000001
   1c1b4:	20009bd8 	.word	0x20009bd8
   1c1b8:	40015000 	.word	0x40015000
   1c1bc:	2002133c 	.word	0x2002133c

0001c1c0 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c1c0:	2801      	cmp	r0, #1
{
   1c1c2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c1c4:	d00b      	beq.n	1c1de <z_nrf_rtc_timer_set+0x1e>
   1c1c6:	4908      	ldr	r1, [pc, #32]	; (1c1e8 <z_nrf_rtc_timer_set+0x28>)
   1c1c8:	4808      	ldr	r0, [pc, #32]	; (1c1ec <z_nrf_rtc_timer_set+0x2c>)
   1c1ca:	f240 1353 	movw	r3, #339	; 0x153
   1c1ce:	4a08      	ldr	r2, [pc, #32]	; (1c1f0 <z_nrf_rtc_timer_set+0x30>)
   1c1d0:	f008 fda5 	bl	24d1e <assert_print>
   1c1d4:	f240 1153 	movw	r1, #339	; 0x153
   1c1d8:	4805      	ldr	r0, [pc, #20]	; (1c1f0 <z_nrf_rtc_timer_set+0x30>)
   1c1da:	f008 fd99 	bl	24d10 <assert_post_action>
}
   1c1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1c1e2:	f7ff bf41 	b.w	1c068 <compare_set>
   1c1e6:	bf00      	nop
   1c1e8:	0002fd79 	.word	0x0002fd79
   1c1ec:	0002b6e9 	.word	0x0002b6e9
   1c1f0:	0002fd2c 	.word	0x0002fd2c

0001c1f4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1c1f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1c1f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1c1fa:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c1fc:	f04f 30ff 	mov.w	r0, #4294967295
   1c200:	f04f 31ff 	mov.w	r1, #4294967295
   1c204:	4c19      	ldr	r4, [pc, #100]	; (1c26c <sys_clock_driver_init+0x78>)
   1c206:	4b1a      	ldr	r3, [pc, #104]	; (1c270 <sys_clock_driver_init+0x7c>)
   1c208:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1c20c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1c210:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1c214:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1c218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1c21c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c21e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1c222:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1c226:	4b13      	ldr	r3, [pc, #76]	; (1c274 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1c228:	2101      	movs	r1, #1
   1c22a:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1c22e:	2015      	movs	r0, #21
   1c230:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1c234:	462a      	mov	r2, r5
   1c236:	f7f3 ffa5 	bl	10184 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1c23a:	2015      	movs	r0, #21
   1c23c:	f7f3 ff72 	bl	10124 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c240:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1c242:	2203      	movs	r2, #3
   1c244:	60a3      	str	r3, [r4, #8]
   1c246:	6023      	str	r3, [r4, #0]
   1c248:	4b0b      	ldr	r3, [pc, #44]	; (1c278 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1c24a:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1c24c:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1c24e:	4b0b      	ldr	r3, [pc, #44]	; (1c27c <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1c250:	4a0b      	ldr	r2, [pc, #44]	; (1c280 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1c252:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1c254:	4b0b      	ldr	r3, [pc, #44]	; (1c284 <sys_clock_driver_init+0x90>)
   1c256:	9501      	str	r5, [sp, #4]
   1c258:	9300      	str	r3, [sp, #0]
   1c25a:	2300      	movs	r3, #0
   1c25c:	f7ff ff04 	bl	1c068 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1c260:	4630      	mov	r0, r6
   1c262:	f7fd fd83 	bl	19d6c <z_nrf_clock_control_lf_on>

	return 0;
}
   1c266:	4628      	mov	r0, r5
   1c268:	b002      	add	sp, #8
   1c26a:	bd70      	pop	{r4, r5, r6, pc}
   1c26c:	40015000 	.word	0x40015000
   1c270:	20009bd8 	.word	0x20009bd8
   1c274:	e000e100 	.word	0xe000e100
   1c278:	20021344 	.word	0x20021344
   1c27c:	20021340 	.word	0x20021340
   1c280:	007fffff 	.word	0x007fffff
   1c284:	0001beb9 	.word	0x0001beb9

0001c288 <rtc_nrf_isr>:
{
   1c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1c28c:	4b3f      	ldr	r3, [pc, #252]	; (1c38c <rtc_nrf_isr+0x104>)
   1c28e:	b085      	sub	sp, #20
   1c290:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1c294:	0792      	lsls	r2, r2, #30
   1c296:	d50b      	bpl.n	1c2b0 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c298:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1c29c:	b142      	cbz	r2, 1c2b0 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c29e:	2200      	movs	r2, #0
   1c2a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1c2a4:	4a3a      	ldr	r2, [pc, #232]	; (1c390 <rtc_nrf_isr+0x108>)
   1c2a6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1c2aa:	6813      	ldr	r3, [r2, #0]
   1c2ac:	3301      	adds	r3, #1
   1c2ae:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c2b0:	4d38      	ldr	r5, [pc, #224]	; (1c394 <rtc_nrf_isr+0x10c>)
   1c2b2:	2400      	movs	r4, #0
   1c2b4:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1c2b6:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1c2ba:	4e34      	ldr	r6, [pc, #208]	; (1c38c <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1c2bc:	f04f 0320 	mov.w	r3, #32
   1c2c0:	f3ef 8211 	mrs	r2, BASEPRI
   1c2c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2c8:	f3bf 8f6f 	isb	sy
   1c2cc:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1c2d0:	fa0b f904 	lsl.w	r9, fp, r4
   1c2d4:	ea19 0f03 	tst.w	r9, r3
   1c2d8:	d10a      	bne.n	1c2f0 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1c2da:	f382 8811 	msr	BASEPRI, r2
   1c2de:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c2e2:	3510      	adds	r5, #16
   1c2e4:	b114      	cbz	r4, 1c2ec <rtc_nrf_isr+0x64>
}
   1c2e6:	b005      	add	sp, #20
   1c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1c2ec:	2401      	movs	r4, #1
   1c2ee:	e7e5      	b.n	1c2bc <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1c2f0:	2301      	movs	r3, #1
   1c2f2:	40a3      	lsls	r3, r4
   1c2f4:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c2f6:	4928      	ldr	r1, [pc, #160]	; (1c398 <rtc_nrf_isr+0x110>)
   1c2f8:	e8d1 0fef 	ldaex	r0, [r1]
   1c2fc:	ea00 0c03 	and.w	ip, r0, r3
   1c300:	e8c1 cfee 	stlex	lr, ip, [r1]
   1c304:	f1be 0f00 	cmp.w	lr, #0
   1c308:	d1f6      	bne.n	1c2f8 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c30a:	4b24      	ldr	r3, [pc, #144]	; (1c39c <rtc_nrf_isr+0x114>)
   1c30c:	00a1      	lsls	r1, r4, #2
   1c30e:	b918      	cbnz	r0, 1c318 <rtc_nrf_isr+0x90>
   1c310:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1c314:	2800      	cmp	r0, #0
   1c316:	d0e0      	beq.n	1c2da <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c318:	f04f 0a00 	mov.w	sl, #0
   1c31c:	f841 a003 	str.w	sl, [r1, r3]
   1c320:	58cb      	ldr	r3, [r1, r3]
   1c322:	f382 8811 	msr	BASEPRI, r2
   1c326:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1c32a:	f7ff fe7b 	bl	1c024 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1c32e:	f04f 0320 	mov.w	r3, #32
   1c332:	f3ef 8c11 	mrs	ip, BASEPRI
   1c336:	f383 8812 	msr	BASEPRI_MAX, r3
   1c33a:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1c33e:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1c342:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1c346:	4290      	cmp	r0, r2
   1c348:	4199      	sbcs	r1, r3
   1c34a:	d204      	bcs.n	1c356 <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1c34c:	f38c 8811 	msr	BASEPRI, ip
   1c350:	f3bf 8f6f 	isb	sy
		if (handler) {
   1c354:	e7c5      	b.n	1c2e2 <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1c356:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c35a:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1c35e:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c360:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1c364:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c368:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1c36c:	4907      	ldr	r1, [pc, #28]	; (1c38c <rtc_nrf_isr+0x104>)
   1c36e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1c372:	f38c 8811 	msr	BASEPRI, ip
   1c376:	f3bf 8f6f 	isb	sy
		if (handler) {
   1c37a:	f1b8 0f00 	cmp.w	r8, #0
   1c37e:	d0b0      	beq.n	1c2e2 <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1c380:	9903      	ldr	r1, [sp, #12]
   1c382:	4620      	mov	r0, r4
   1c384:	9100      	str	r1, [sp, #0]
   1c386:	47c0      	blx	r8
   1c388:	e7ab      	b.n	1c2e2 <rtc_nrf_isr+0x5a>
   1c38a:	bf00      	nop
   1c38c:	40015000 	.word	0x40015000
   1c390:	20021348 	.word	0x20021348
   1c394:	20009bd8 	.word	0x20009bd8
   1c398:	2002133c 	.word	0x2002133c
   1c39c:	40015140 	.word	0x40015140

0001c3a0 <z_nrf_rtc_timer_chan_alloc>:
{
   1c3a0:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1c3a2:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1c3a4:	4b0c      	ldr	r3, [pc, #48]	; (1c3d8 <z_nrf_rtc_timer_chan_alloc+0x38>)
   1c3a6:	6818      	ldr	r0, [r3, #0]
   1c3a8:	b190      	cbz	r0, 1c3d0 <z_nrf_rtc_timer_chan_alloc+0x30>
   1c3aa:	fab0 f080 	clz	r0, r0
   1c3ae:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1c3b2:	fa04 f100 	lsl.w	r1, r4, r0
   1c3b6:	43c9      	mvns	r1, r1
   1c3b8:	e8d3 2fef 	ldaex	r2, [r3]
   1c3bc:	ea02 0501 	and.w	r5, r2, r1
   1c3c0:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1c3c4:	2e00      	cmp	r6, #0
   1c3c6:	d1f7      	bne.n	1c3b8 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1c3c8:	40c2      	lsrs	r2, r0
   1c3ca:	07d2      	lsls	r2, r2, #31
   1c3cc:	d5eb      	bpl.n	1c3a6 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1c3ce:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1c3d0:	f06f 000b 	mvn.w	r0, #11
   1c3d4:	e7fb      	b.n	1c3ce <z_nrf_rtc_timer_chan_alloc+0x2e>
   1c3d6:	bf00      	nop
   1c3d8:	20021340 	.word	0x20021340

0001c3dc <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c3dc:	2801      	cmp	r0, #1
{
   1c3de:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c3e0:	d00b      	beq.n	1c3fa <z_nrf_rtc_timer_chan_free+0x1e>
   1c3e2:	490b      	ldr	r1, [pc, #44]	; (1c410 <z_nrf_rtc_timer_chan_free+0x34>)
   1c3e4:	480b      	ldr	r0, [pc, #44]	; (1c414 <z_nrf_rtc_timer_chan_free+0x38>)
   1c3e6:	f240 2321 	movw	r3, #545	; 0x221
   1c3ea:	4a0b      	ldr	r2, [pc, #44]	; (1c418 <z_nrf_rtc_timer_chan_free+0x3c>)
   1c3ec:	f008 fc97 	bl	24d1e <assert_print>
   1c3f0:	f240 2121 	movw	r1, #545	; 0x221
   1c3f4:	4808      	ldr	r0, [pc, #32]	; (1c418 <z_nrf_rtc_timer_chan_free+0x3c>)
   1c3f6:	f008 fc8b 	bl	24d10 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c3fa:	4b08      	ldr	r3, [pc, #32]	; (1c41c <z_nrf_rtc_timer_chan_free+0x40>)
   1c3fc:	e8d3 1fef 	ldaex	r1, [r3]
   1c400:	f041 0102 	orr.w	r1, r1, #2
   1c404:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1c408:	2a00      	cmp	r2, #0
   1c40a:	d1f7      	bne.n	1c3fc <z_nrf_rtc_timer_chan_free+0x20>
}
   1c40c:	bd08      	pop	{r3, pc}
   1c40e:	bf00      	nop
   1c410:	0002fd79 	.word	0x0002fd79
   1c414:	0002b6e9 	.word	0x0002b6e9
   1c418:	0002fd2c 	.word	0x0002fd2c
   1c41c:	20021340 	.word	0x20021340

0001c420 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c420:	1c43      	adds	r3, r0, #1
{
   1c422:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c424:	d020      	beq.n	1c468 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1c426:	2801      	cmp	r0, #1
   1c428:	dd20      	ble.n	1c46c <sys_clock_set_timeout+0x4c>
   1c42a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c42e:	da1f      	bge.n	1c470 <sys_clock_set_timeout+0x50>
   1c430:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1c432:	f7ff fdf7 	bl	1c024 <z_nrf_rtc_timer_read>
   1c436:	4b0f      	ldr	r3, [pc, #60]	; (1c474 <sys_clock_set_timeout+0x54>)
   1c438:	e9d3 1300 	ldrd	r1, r3, [r3]
   1c43c:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1c43e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1c442:	bf28      	it	cs
   1c444:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1c446:	480c      	ldr	r0, [pc, #48]	; (1c478 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1c448:	3201      	adds	r2, #1
   1c44a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1c44c:	4282      	cmp	r2, r0
   1c44e:	bf28      	it	cs
   1c450:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1c452:	2000      	movs	r0, #0
   1c454:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1c456:	4909      	ldr	r1, [pc, #36]	; (1c47c <sys_clock_set_timeout+0x5c>)
   1c458:	9001      	str	r0, [sp, #4]
   1c45a:	9100      	str	r1, [sp, #0]
   1c45c:	f143 0300 	adc.w	r3, r3, #0
   1c460:	f7ff fe02 	bl	1c068 <compare_set>
}
   1c464:	b002      	add	sp, #8
   1c466:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c468:	4803      	ldr	r0, [pc, #12]	; (1c478 <sys_clock_set_timeout+0x58>)
   1c46a:	e7e1      	b.n	1c430 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1c46c:	2400      	movs	r4, #0
   1c46e:	e7e0      	b.n	1c432 <sys_clock_set_timeout+0x12>
   1c470:	4c01      	ldr	r4, [pc, #4]	; (1c478 <sys_clock_set_timeout+0x58>)
   1c472:	e7de      	b.n	1c432 <sys_clock_set_timeout+0x12>
   1c474:	20009bf8 	.word	0x20009bf8
   1c478:	007fffff 	.word	0x007fffff
   1c47c:	0001beb9 	.word	0x0001beb9

0001c480 <sys_clock_elapsed>:
{
   1c480:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1c482:	f7ff fdcf 	bl	1c024 <z_nrf_rtc_timer_read>
   1c486:	4b02      	ldr	r3, [pc, #8]	; (1c490 <sys_clock_elapsed+0x10>)
   1c488:	681b      	ldr	r3, [r3, #0]
}
   1c48a:	1ac0      	subs	r0, r0, r3
   1c48c:	bd08      	pop	{r3, pc}
   1c48e:	bf00      	nop
   1c490:	20009bf8 	.word	0x20009bf8

0001c494 <nrf_gpio_pin_port_decode>:
{
   1c494:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c496:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1c498:	095a      	lsrs	r2, r3, #5
   1c49a:	d00d      	beq.n	1c4b8 <nrf_gpio_pin_port_decode+0x24>
   1c49c:	2a01      	cmp	r2, #1
   1c49e:	d013      	beq.n	1c4c8 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c4a0:	490e      	ldr	r1, [pc, #56]	; (1c4dc <nrf_gpio_pin_port_decode+0x48>)
   1c4a2:	480f      	ldr	r0, [pc, #60]	; (1c4e0 <nrf_gpio_pin_port_decode+0x4c>)
   1c4a4:	f240 2347 	movw	r3, #583	; 0x247
   1c4a8:	4a0e      	ldr	r2, [pc, #56]	; (1c4e4 <nrf_gpio_pin_port_decode+0x50>)
   1c4aa:	f008 fc38 	bl	24d1e <assert_print>
   1c4ae:	f240 2147 	movw	r1, #583	; 0x247
   1c4b2:	480c      	ldr	r0, [pc, #48]	; (1c4e4 <nrf_gpio_pin_port_decode+0x50>)
   1c4b4:	f008 fc2c 	bl	24d10 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1c4b8:	f04f 32ff 	mov.w	r2, #4294967295
   1c4bc:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c4c0:	07d9      	lsls	r1, r3, #31
   1c4c2:	d5ed      	bpl.n	1c4a0 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1c4c4:	4808      	ldr	r0, [pc, #32]	; (1c4e8 <nrf_gpio_pin_port_decode+0x54>)
   1c4c6:	e008      	b.n	1c4da <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1c4c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1c4cc:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1c4d0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c4d2:	07d2      	lsls	r2, r2, #31
   1c4d4:	d5e4      	bpl.n	1c4a0 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1c4d6:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1c4d8:	4804      	ldr	r0, [pc, #16]	; (1c4ec <nrf_gpio_pin_port_decode+0x58>)
}
   1c4da:	bd08      	pop	{r3, pc}
   1c4dc:	0002f64c 	.word	0x0002f64c
   1c4e0:	0002b6e9 	.word	0x0002b6e9
   1c4e4:	0002f619 	.word	0x0002f619
   1c4e8:	40842500 	.word	0x40842500
   1c4ec:	40842800 	.word	0x40842800

0001c4f0 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1c4f0:	b510      	push	{r4, lr}
   1c4f2:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1c4f4:	6902      	ldr	r2, [r0, #16]
{
   1c4f6:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   1c4f8:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1c4fc:	4924      	ldr	r1, [pc, #144]	; (1c590 <mbox_nrf_init+0xa0>)
   1c4fe:	2000      	movs	r0, #0
   1c500:	f001 f812 	bl	1d528 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c504:	2200      	movs	r2, #0
   1c506:	2101      	movs	r1, #1
   1c508:	202a      	movs	r0, #42	; 0x2a
   1c50a:	f7f3 fe3b 	bl	10184 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1c50e:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1c510:	2284      	movs	r2, #132	; 0x84
   1c512:	2100      	movs	r1, #0
   1c514:	a805      	add	r0, sp, #20
   1c516:	f00d f9a2 	bl	2985e <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1c51a:	6863      	ldr	r3, [r4, #4]
   1c51c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1c520:	d309      	bcc.n	1c536 <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1c522:	4b1c      	ldr	r3, [pc, #112]	; (1c594 <mbox_nrf_init+0xa4>)
   1c524:	2202      	movs	r2, #2
   1c526:	9302      	str	r3, [sp, #8]
   1c528:	2300      	movs	r3, #0
   1c52a:	491b      	ldr	r1, [pc, #108]	; (1c598 <mbox_nrf_init+0xa8>)
   1c52c:	4618      	mov	r0, r3
   1c52e:	e9cd 3300 	strd	r3, r3, [sp]
   1c532:	f00c f8e3 	bl	286fc <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1c536:	6823      	ldr	r3, [r4, #0]
   1c538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1c53c:	d309      	bcc.n	1c552 <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1c53e:	4b17      	ldr	r3, [pc, #92]	; (1c59c <mbox_nrf_init+0xac>)
   1c540:	2202      	movs	r2, #2
   1c542:	9302      	str	r3, [sp, #8]
   1c544:	2300      	movs	r3, #0
   1c546:	4914      	ldr	r1, [pc, #80]	; (1c598 <mbox_nrf_init+0xa8>)
   1c548:	4618      	mov	r0, r3
   1c54a:	e9cd 3300 	strd	r3, r3, [sp]
   1c54e:	f00c f8d5 	bl	286fc <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   1c552:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1c554:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1c556:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c558:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   1c55a:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c55c:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1c55e:	40d9      	lsrs	r1, r3
   1c560:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1c562:	bf44      	itt	mi
   1c564:	fa00 f103 	lslmi.w	r1, r0, r3
   1c568:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1c56c:	6821      	ldr	r1, [r4, #0]
   1c56e:	40d9      	lsrs	r1, r3
   1c570:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1c572:	bf48      	it	mi
   1c574:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c578:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1c57c:	bf48      	it	mi
   1c57e:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c580:	2b10      	cmp	r3, #16
   1c582:	d1ea      	bne.n	1c55a <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   1c584:	a805      	add	r0, sp, #20
   1c586:	f000 ffe7 	bl	1d558 <nrfx_ipc_config_load>

	return 0;
}
   1c58a:	2000      	movs	r0, #0
   1c58c:	b026      	add	sp, #152	; 0x98
   1c58e:	bd10      	pop	{r4, pc}
   1c590:	0001c5f1 	.word	0x0001c5f1
   1c594:	0002fd94 	.word	0x0002fd94
   1c598:	0002a7d8 	.word	0x0002a7d8
   1c59c:	0002fdc0 	.word	0x0002fdc0

0001c5a0 <mbox_nrf_send>:
{
   1c5a0:	b530      	push	{r4, r5, lr}
   1c5a2:	4605      	mov	r5, r0
   1c5a4:	460c      	mov	r4, r1
   1c5a6:	b085      	sub	sp, #20
	if (msg) {
   1c5a8:	b14a      	cbz	r2, 1c5be <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   1c5aa:	4b0f      	ldr	r3, [pc, #60]	; (1c5e8 <mbox_nrf_send+0x48>)
   1c5ac:	2202      	movs	r2, #2
   1c5ae:	9302      	str	r3, [sp, #8]
   1c5b0:	2300      	movs	r3, #0
   1c5b2:	490e      	ldr	r1, [pc, #56]	; (1c5ec <mbox_nrf_send+0x4c>)
   1c5b4:	4618      	mov	r0, r3
   1c5b6:	e9cd 3300 	strd	r3, r3, [sp]
   1c5ba:	f00c f89f 	bl	286fc <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1c5be:	2c0f      	cmp	r4, #15
   1c5c0:	d80f      	bhi.n	1c5e2 <mbox_nrf_send+0x42>
   1c5c2:	686b      	ldr	r3, [r5, #4]
   1c5c4:	685b      	ldr	r3, [r3, #4]
   1c5c6:	40e3      	lsrs	r3, r4
   1c5c8:	07db      	lsls	r3, r3, #31
   1c5ca:	d50a      	bpl.n	1c5e2 <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5cc:	2301      	movs	r3, #1
	return 0;
   1c5ce:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1c5d0:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5d2:	b2e4      	uxtb	r4, r4
   1c5d4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1c5d8:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1c5dc:	6023      	str	r3, [r4, #0]
}
   1c5de:	b005      	add	sp, #20
   1c5e0:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1c5e2:	f06f 0015 	mvn.w	r0, #21
   1c5e6:	e7fa      	b.n	1c5de <mbox_nrf_send+0x3e>
   1c5e8:	0002fdec 	.word	0x0002fdec
   1c5ec:	0002a7d8 	.word	0x0002a7d8

0001c5f0 <mbox_dispatcher>:
{
   1c5f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1c5f2:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c5f6:	280f      	cmp	r0, #15
{
   1c5f8:	4604      	mov	r4, r0
   1c5fa:	460d      	mov	r5, r1
   1c5fc:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c5fe:	d803      	bhi.n	1c608 <mbox_dispatcher+0x18>
   1c600:	681b      	ldr	r3, [r3, #0]
   1c602:	40c3      	lsrs	r3, r0
   1c604:	07db      	lsls	r3, r3, #31
   1c606:	d409      	bmi.n	1c61c <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   1c608:	4b14      	ldr	r3, [pc, #80]	; (1c65c <mbox_dispatcher+0x6c>)
   1c60a:	2202      	movs	r2, #2
   1c60c:	9302      	str	r3, [sp, #8]
   1c60e:	2300      	movs	r3, #0
   1c610:	4913      	ldr	r1, [pc, #76]	; (1c660 <mbox_dispatcher+0x70>)
   1c612:	4618      	mov	r0, r3
   1c614:	e9cd 3300 	strd	r3, r3, [sp]
   1c618:	f00c f870 	bl	286fc <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   1c61c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c620:	40e3      	lsrs	r3, r4
   1c622:	f013 0301 	ands.w	r3, r3, #1
   1c626:	d108      	bne.n	1c63a <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   1c628:	4a0e      	ldr	r2, [pc, #56]	; (1c664 <mbox_dispatcher+0x74>)
   1c62a:	4618      	mov	r0, r3
   1c62c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c630:	490b      	ldr	r1, [pc, #44]	; (1c660 <mbox_dispatcher+0x70>)
   1c632:	2202      	movs	r2, #2
   1c634:	9300      	str	r3, [sp, #0]
   1c636:	f00c f861 	bl	286fc <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   1c63a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1c63e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1c642:	b145      	cbz	r5, 1c656 <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1c644:	2300      	movs	r3, #0
   1c646:	4621      	mov	r1, r4
   1c648:	4630      	mov	r0, r6
   1c64a:	46ac      	mov	ip, r5
   1c64c:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1c64e:	b004      	add	sp, #16
   1c650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1c654:	4760      	bx	ip
}
   1c656:	b004      	add	sp, #16
   1c658:	bd70      	pop	{r4, r5, r6, pc}
   1c65a:	bf00      	nop
   1c65c:	0002fe07 	.word	0x0002fe07
   1c660:	0002a7d8 	.word	0x0002a7d8
   1c664:	0002fe23 	.word	0x0002fe23

0001c668 <mbox_nrf_set_enabled>:
{
   1c668:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c66a:	290f      	cmp	r1, #15
{
   1c66c:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1c66e:	6905      	ldr	r5, [r0, #16]
{
   1c670:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c672:	d841      	bhi.n	1c6f8 <mbox_nrf_set_enabled+0x90>
   1c674:	6843      	ldr	r3, [r0, #4]
   1c676:	681b      	ldr	r3, [r3, #0]
   1c678:	40cb      	lsrs	r3, r1
   1c67a:	07db      	lsls	r3, r3, #31
   1c67c:	d53c      	bpl.n	1c6f8 <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1c67e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c682:	40cb      	lsrs	r3, r1
   1c684:	f003 0301 	and.w	r3, r3, #1
   1c688:	b91a      	cbnz	r2, 1c692 <mbox_nrf_set_enabled+0x2a>
   1c68a:	bb0b      	cbnz	r3, 1c6d0 <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   1c68c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1c690:	e030      	b.n	1c6f4 <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1c692:	2b00      	cmp	r3, #0
   1c694:	d1fa      	bne.n	1c68c <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1c696:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1c69a:	b943      	cbnz	r3, 1c6ae <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   1c69c:	4a18      	ldr	r2, [pc, #96]	; (1c700 <mbox_nrf_set_enabled+0x98>)
   1c69e:	4618      	mov	r0, r3
   1c6a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c6a4:	4917      	ldr	r1, [pc, #92]	; (1c704 <mbox_nrf_set_enabled+0x9c>)
   1c6a6:	2202      	movs	r2, #2
   1c6a8:	9300      	str	r3, [sp, #0]
   1c6aa:	f00c f827 	bl	286fc <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   1c6ae:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c6b2:	b913      	cbnz	r3, 1c6ba <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   1c6b4:	202a      	movs	r0, #42	; 0x2a
   1c6b6:	f7f3 fd35 	bl	10124 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1c6ba:	2201      	movs	r2, #1
   1c6bc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c6c0:	40a2      	lsls	r2, r4
   1c6c2:	4313      	orrs	r3, r2
   1c6c4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1c6c8:	b2e0      	uxtb	r0, r4
   1c6ca:	f000 ff87 	bl	1d5dc <nrfx_ipc_receive_event_enable>
   1c6ce:	e00a      	b.n	1c6e6 <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   1c6d0:	b2c8      	uxtb	r0, r1
   1c6d2:	f000 ffa1 	bl	1d618 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1c6d6:	2201      	movs	r2, #1
   1c6d8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c6dc:	40a2      	lsls	r2, r4
   1c6de:	ea23 0302 	bic.w	r3, r3, r2
   1c6e2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1c6e6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c6ea:	b913      	cbnz	r3, 1c6f2 <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   1c6ec:	202a      	movs	r0, #42	; 0x2a
   1c6ee:	f7f3 fd27 	bl	10140 <arch_irq_disable>
	return 0;
   1c6f2:	2000      	movs	r0, #0
}
   1c6f4:	b005      	add	sp, #20
   1c6f6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1c6f8:	f06f 0015 	mvn.w	r0, #21
   1c6fc:	e7fa      	b.n	1c6f4 <mbox_nrf_set_enabled+0x8c>
   1c6fe:	bf00      	nop
   1c700:	0002fe40 	.word	0x0002fe40
   1c704:	0002a7d8 	.word	0x0002a7d8

0001c708 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1c708:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1c70a:	ab0b      	add	r3, sp, #44	; 0x2c
   1c70c:	9305      	str	r3, [sp, #20]
   1c70e:	9303      	str	r3, [sp, #12]
   1c710:	4b05      	ldr	r3, [pc, #20]	; (1c728 <z_log_msg_runtime_create.constprop.0+0x20>)
   1c712:	2201      	movs	r2, #1
   1c714:	9302      	str	r3, [sp, #8]
   1c716:	2300      	movs	r3, #0
   1c718:	4618      	mov	r0, r3
   1c71a:	e9cd 3300 	strd	r3, r3, [sp]
   1c71e:	f7f1 fe23 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   1c722:	b007      	add	sp, #28
   1c724:	f85d fb04 	ldr.w	pc, [sp], #4
   1c728:	0002fe9d 	.word	0x0002fe9d

0001c72c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1c72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1c72e:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1c730:	f7f1 fd68 	bl	e204 <z_impl_log_panic>
   1c734:	4b06      	ldr	r3, [pc, #24]	; (1c750 <k_sys_fatal_error_handler+0x24>)
   1c736:	4620      	mov	r0, r4
   1c738:	9302      	str	r3, [sp, #8]
   1c73a:	2201      	movs	r2, #1
   1c73c:	4623      	mov	r3, r4
   1c73e:	e9cd 4400 	strd	r4, r4, [sp]
   1c742:	4904      	ldr	r1, [pc, #16]	; (1c754 <k_sys_fatal_error_handler+0x28>)
   1c744:	f7ff ffe0 	bl	1c708 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   1c748:	4620      	mov	r0, r4
   1c74a:	f7f4 f98b 	bl	10a64 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1c74e:	bf00      	nop
   1c750:	0002fe9d 	.word	0x0002fe9d
   1c754:	0002a7a0 	.word	0x0002a7a0

0001c758 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1c758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c75c:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1c75e:	4b15      	ldr	r3, [pc, #84]	; (1c7b4 <tfm_ns_interface_dispatch+0x5c>)
   1c760:	4604      	mov	r4, r0
   1c762:	f893 8000 	ldrb.w	r8, [r3]
   1c766:	460d      	mov	r5, r1
   1c768:	4616      	mov	r6, r2
   1c76a:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1c76c:	f1b8 0f00 	cmp.w	r8, #0
   1c770:	d115      	bne.n	1c79e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1c772:	4668      	mov	r0, sp
   1c774:	f009 fb34 	bl	25de0 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1c778:	463a      	mov	r2, r7
   1c77a:	4631      	mov	r1, r6
   1c77c:	4628      	mov	r0, r5
   1c77e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1c780:	47a0      	blx	r4
   1c782:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1c784:	4668      	mov	r0, sp
   1c786:	f009 fb2c 	bl	25de2 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1c78a:	f1b8 0f00 	cmp.w	r8, #0
   1c78e:	d002      	beq.n	1c796 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1c790:	4809      	ldr	r0, [pc, #36]	; (1c7b8 <tfm_ns_interface_dispatch+0x60>)
   1c792:	f003 f9bd 	bl	1fb10 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1c796:	4620      	mov	r0, r4
   1c798:	b022      	add	sp, #136	; 0x88
   1c79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1c79e:	f04f 32ff 	mov.w	r2, #4294967295
   1c7a2:	f04f 33ff 	mov.w	r3, #4294967295
   1c7a6:	4804      	ldr	r0, [pc, #16]	; (1c7b8 <tfm_ns_interface_dispatch+0x60>)
   1c7a8:	f003 f8e2 	bl	1f970 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1c7ac:	2800      	cmp	r0, #0
   1c7ae:	d0e0      	beq.n	1c772 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1c7b0:	241f      	movs	r4, #31
   1c7b2:	e7f0      	b.n	1c796 <tfm_ns_interface_dispatch+0x3e>
   1c7b4:	20022292 	.word	0x20022292
   1c7b8:	20008abc 	.word	0x20008abc

0001c7bc <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1c7bc:	b530      	push	{r4, r5, lr}
   1c7be:	b095      	sub	sp, #84	; 0x54
   1c7c0:	4605      	mov	r5, r0
   1c7c2:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1c7c4:	2230      	movs	r2, #48	; 0x30
   1c7c6:	2100      	movs	r1, #0
   1c7c8:	a808      	add	r0, sp, #32
   1c7ca:	f00d f848 	bl	2985e <memset>
   1c7ce:	233f      	movs	r3, #63	; 0x3f
   1c7d0:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1c7d2:	ab07      	add	r3, sp, #28
   1c7d4:	9303      	str	r3, [sp, #12]
   1c7d6:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1c7d8:	9406      	str	r4, [sp, #24]
   1c7da:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1c7de:	b154      	cbz	r4, 1c7f6 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1c7e0:	2301      	movs	r3, #1
   1c7e2:	aa05      	add	r2, sp, #20
   1c7e4:	9200      	str	r2, [sp, #0]
   1c7e6:	2100      	movs	r1, #0
   1c7e8:	4804      	ldr	r0, [pc, #16]	; (1c7fc <psa_generate_random+0x40>)
   1c7ea:	9301      	str	r3, [sp, #4]
   1c7ec:	aa03      	add	r2, sp, #12
   1c7ee:	f000 f807 	bl	1c800 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1c7f2:	b015      	add	sp, #84	; 0x54
   1c7f4:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1c7f6:	4620      	mov	r0, r4
   1c7f8:	e7fb      	b.n	1c7f2 <psa_generate_random+0x36>
   1c7fa:	bf00      	nop
   1c7fc:	40000100 	.word	0x40000100

0001c800 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1c800:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1c802:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1c806:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1c80a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1c80c:	d20d      	bcs.n	1c82a <psa_call+0x2a>
        (type < INT16_MIN) ||
   1c80e:	ea43 0504 	orr.w	r5, r3, r4
   1c812:	2dff      	cmp	r5, #255	; 0xff
   1c814:	d809      	bhi.n	1c82a <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1c816:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1c81a:	4613      	mov	r3, r2
   1c81c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1c820:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1c822:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1c824:	4803      	ldr	r0, [pc, #12]	; (1c834 <psa_call+0x34>)
   1c826:	f7ff bf97 	b.w	1c758 <tfm_ns_interface_dispatch>
}
   1c82a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1c82e:	bc30      	pop	{r4, r5}
   1c830:	4770      	bx	lr
   1c832:	bf00      	nop
   1c834:	00007c21 	.word	0x00007c21

0001c838 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1c838:	2300      	movs	r3, #0
{
   1c83a:	b507      	push	{r0, r1, r2, lr}
   1c83c:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1c83e:	9300      	str	r3, [sp, #0]
   1c840:	4601      	mov	r1, r0
   1c842:	4803      	ldr	r0, [pc, #12]	; (1c850 <psa_connect+0x18>)
   1c844:	f7ff ff88 	bl	1c758 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1c848:	b003      	add	sp, #12
   1c84a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c84e:	bf00      	nop
   1c850:	00007c19 	.word	0x00007c19

0001c854 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1c854:	2300      	movs	r3, #0
{
   1c856:	b507      	push	{r0, r1, r2, lr}
   1c858:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1c85a:	461a      	mov	r2, r3
   1c85c:	9300      	str	r3, [sp, #0]
   1c85e:	4803      	ldr	r0, [pc, #12]	; (1c86c <psa_close+0x18>)
   1c860:	f7ff ff7a 	bl	1c758 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1c864:	b003      	add	sp, #12
   1c866:	f85d fb04 	ldr.w	pc, [sp], #4
   1c86a:	bf00      	nop
   1c86c:	00007c11 	.word	0x00007c11

0001c870 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1c870:	4b04      	ldr	r3, [pc, #16]	; (1c884 <SystemCoreClockUpdate+0x14>)
   1c872:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1c876:	4b04      	ldr	r3, [pc, #16]	; (1c888 <SystemCoreClockUpdate+0x18>)
   1c878:	f002 0203 	and.w	r2, r2, #3
   1c87c:	40d3      	lsrs	r3, r2
   1c87e:	4a03      	ldr	r2, [pc, #12]	; (1c88c <SystemCoreClockUpdate+0x1c>)
   1c880:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1c882:	4770      	bx	lr
   1c884:	40005000 	.word	0x40005000
   1c888:	07a12000 	.word	0x07a12000
   1c88c:	20008684 	.word	0x20008684

0001c890 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1c890:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c892:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1c894:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1c896:	fab2 f382 	clz	r3, r2
   1c89a:	f1c3 031f 	rsb	r3, r3, #31
   1c89e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c8a0:	fa05 f403 	lsl.w	r4, r5, r3
   1c8a4:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c8a8:	e8d0 6fef 	ldaex	r6, [r0]
   1c8ac:	4296      	cmp	r6, r2
   1c8ae:	d104      	bne.n	1c8ba <nrfx_flag32_alloc+0x2a>
   1c8b0:	e8c0 4fec 	stlex	ip, r4, [r0]
   1c8b4:	f1bc 0f00 	cmp.w	ip, #0
   1c8b8:	d1f6      	bne.n	1c8a8 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c8ba:	d1eb      	bne.n	1c894 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1c8bc:	4801      	ldr	r0, [pc, #4]	; (1c8c4 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1c8be:	700b      	strb	r3, [r1, #0]
}
   1c8c0:	bd70      	pop	{r4, r5, r6, pc}
   1c8c2:	bf00      	nop
   1c8c4:	0bad0000 	.word	0x0bad0000

0001c8c8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1c8c8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1c8ca:	6803      	ldr	r3, [r0, #0]
   1c8cc:	40cb      	lsrs	r3, r1
   1c8ce:	07db      	lsls	r3, r3, #31
   1c8d0:	d410      	bmi.n	1c8f4 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1c8d2:	2301      	movs	r3, #1
   1c8d4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1c8d6:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1c8d8:	ea43 0102 	orr.w	r1, r3, r2
   1c8dc:	e8d0 4fef 	ldaex	r4, [r0]
   1c8e0:	4294      	cmp	r4, r2
   1c8e2:	d104      	bne.n	1c8ee <nrfx_flag32_free+0x26>
   1c8e4:	e8c0 1fec 	stlex	ip, r1, [r0]
   1c8e8:	f1bc 0f00 	cmp.w	ip, #0
   1c8ec:	d1f6      	bne.n	1c8dc <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c8ee:	d1f2      	bne.n	1c8d6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1c8f0:	4801      	ldr	r0, [pc, #4]	; (1c8f8 <nrfx_flag32_free+0x30>)
}
   1c8f2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c8f4:	4801      	ldr	r0, [pc, #4]	; (1c8fc <nrfx_flag32_free+0x34>)
   1c8f6:	e7fc      	b.n	1c8f2 <nrfx_flag32_free+0x2a>
   1c8f8:	0bad0000 	.word	0x0bad0000
   1c8fc:	0bad0004 	.word	0x0bad0004

0001c900 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1c900:	2200      	movs	r2, #0
{
   1c902:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c904:	4b62      	ldr	r3, [pc, #392]	; (1ca90 <clock_stop+0x190>)
    switch (domain)
   1c906:	2803      	cmp	r0, #3
   1c908:	d838      	bhi.n	1c97c <clock_stop+0x7c>
   1c90a:	e8df f000 	tbb	[pc, r0]
   1c90e:	0d02      	.short	0x0d02
   1c910:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1c912:	2102      	movs	r1, #2
   1c914:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c918:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1c91c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c920:	2201      	movs	r2, #1
   1c922:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1c924:	2400      	movs	r4, #0
   1c926:	e009      	b.n	1c93c <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1c928:	2101      	movs	r1, #1
   1c92a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c92e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c932:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c936:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c93a:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1c93c:	2301      	movs	r3, #1
   1c93e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1c942:	2803      	cmp	r0, #3
   1c944:	f200 8093 	bhi.w	1ca6e <clock_stop+0x16e>
   1c948:	e8df f000 	tbb	[pc, r0]
   1c94c:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1c950:	f44f 7100 	mov.w	r1, #512	; 0x200
   1c954:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c958:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1c95c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c960:	2201      	movs	r2, #1
   1c962:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1c964:	e7de      	b.n	1c924 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1c966:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c96a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c96e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1c972:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c976:	2201      	movs	r2, #1
   1c978:	61da      	str	r2, [r3, #28]
   1c97a:	e7d3      	b.n	1c924 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1c97c:	4945      	ldr	r1, [pc, #276]	; (1ca94 <clock_stop+0x194>)
   1c97e:	4846      	ldr	r0, [pc, #280]	; (1ca98 <clock_stop+0x198>)
   1c980:	23d8      	movs	r3, #216	; 0xd8
   1c982:	4a46      	ldr	r2, [pc, #280]	; (1ca9c <clock_stop+0x19c>)
   1c984:	f008 f9cb 	bl	24d1e <assert_print>
   1c988:	21d8      	movs	r1, #216	; 0xd8
   1c98a:	4844      	ldr	r0, [pc, #272]	; (1ca9c <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1c98c:	f008 f9c0 	bl	24d10 <assert_post_action>
    switch (domain)
   1c990:	f242 7510 	movw	r5, #10000	; 0x2710
   1c994:	4e3e      	ldr	r6, [pc, #248]	; (1ca90 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1c996:	b194      	cbz	r4, 1c9be <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c998:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1c99c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1c9a0:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c9a2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1c9a6:	03d9      	lsls	r1, r3, #15
   1c9a8:	d507      	bpl.n	1c9ba <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1c9aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c9ae:	2801      	cmp	r0, #1
   1c9b0:	d103      	bne.n	1c9ba <clock_stop+0xba>
   1c9b2:	f00b ff19 	bl	287e8 <nrfx_busy_wait>
   1c9b6:	3d01      	subs	r5, #1
   1c9b8:	d1ed      	bne.n	1c996 <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1c9ba:	b002      	add	sp, #8
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1c9c2:	03da      	lsls	r2, r3, #15
   1c9c4:	d5f9      	bpl.n	1c9ba <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1c9c6:	2001      	movs	r0, #1
   1c9c8:	f00b ff0e 	bl	287e8 <nrfx_busy_wait>
   1c9cc:	3d01      	subs	r5, #1
   1c9ce:	d1f6      	bne.n	1c9be <clock_stop+0xbe>
   1c9d0:	e7f3      	b.n	1c9ba <clock_stop+0xba>
    switch (domain)
   1c9d2:	f242 7510 	movw	r5, #10000	; 0x2710
   1c9d6:	4e2e      	ldr	r6, [pc, #184]	; (1ca90 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1c9d8:	b18c      	cbz	r4, 1c9fe <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c9da:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1c9de:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1c9e2:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c9e4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1c9e8:	03db      	lsls	r3, r3, #15
   1c9ea:	d5e6      	bpl.n	1c9ba <clock_stop+0xba>
   1c9ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c9f0:	2801      	cmp	r0, #1
   1c9f2:	d1e2      	bne.n	1c9ba <clock_stop+0xba>
   1c9f4:	f00b fef8 	bl	287e8 <nrfx_busy_wait>
   1c9f8:	3d01      	subs	r5, #1
   1c9fa:	d1ed      	bne.n	1c9d8 <clock_stop+0xd8>
   1c9fc:	e7dd      	b.n	1c9ba <clock_stop+0xba>
   1c9fe:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ca02:	03d8      	lsls	r0, r3, #15
   1ca04:	d5d9      	bpl.n	1c9ba <clock_stop+0xba>
   1ca06:	2001      	movs	r0, #1
   1ca08:	f00b feee 	bl	287e8 <nrfx_busy_wait>
   1ca0c:	3d01      	subs	r5, #1
   1ca0e:	d1f6      	bne.n	1c9fe <clock_stop+0xfe>
   1ca10:	e7d3      	b.n	1c9ba <clock_stop+0xba>
    switch (domain)
   1ca12:	f242 7510 	movw	r5, #10000	; 0x2710
   1ca16:	4e1e      	ldr	r6, [pc, #120]	; (1ca90 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ca18:	b18c      	cbz	r4, 1ca3e <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1ca1a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ca1e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1ca22:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1ca24:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ca28:	03d9      	lsls	r1, r3, #15
   1ca2a:	d5c6      	bpl.n	1c9ba <clock_stop+0xba>
   1ca2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ca30:	2801      	cmp	r0, #1
   1ca32:	d1c2      	bne.n	1c9ba <clock_stop+0xba>
   1ca34:	f00b fed8 	bl	287e8 <nrfx_busy_wait>
   1ca38:	3d01      	subs	r5, #1
   1ca3a:	d1ed      	bne.n	1ca18 <clock_stop+0x118>
   1ca3c:	e7bd      	b.n	1c9ba <clock_stop+0xba>
   1ca3e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ca42:	03da      	lsls	r2, r3, #15
   1ca44:	d5b9      	bpl.n	1c9ba <clock_stop+0xba>
   1ca46:	2001      	movs	r0, #1
   1ca48:	f00b fece 	bl	287e8 <nrfx_busy_wait>
   1ca4c:	3d01      	subs	r5, #1
   1ca4e:	d1f6      	bne.n	1ca3e <clock_stop+0x13e>
   1ca50:	e7b3      	b.n	1c9ba <clock_stop+0xba>
    switch (domain)
   1ca52:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1ca56:	4e0e      	ldr	r6, [pc, #56]	; (1ca90 <clock_stop+0x190>)
   1ca58:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1ca5c:	03db      	lsls	r3, r3, #15
   1ca5e:	d5ac      	bpl.n	1c9ba <clock_stop+0xba>
   1ca60:	b984      	cbnz	r4, 1ca84 <clock_stop+0x184>
   1ca62:	2001      	movs	r0, #1
   1ca64:	f00b fec0 	bl	287e8 <nrfx_busy_wait>
   1ca68:	3d01      	subs	r5, #1
   1ca6a:	d1f5      	bne.n	1ca58 <clock_stop+0x158>
   1ca6c:	e7a5      	b.n	1c9ba <clock_stop+0xba>
            NRFX_ASSERT(0);
   1ca6e:	4909      	ldr	r1, [pc, #36]	; (1ca94 <clock_stop+0x194>)
   1ca70:	4809      	ldr	r0, [pc, #36]	; (1ca98 <clock_stop+0x198>)
   1ca72:	f240 3347 	movw	r3, #839	; 0x347
   1ca76:	4a0a      	ldr	r2, [pc, #40]	; (1caa0 <clock_stop+0x1a0>)
   1ca78:	f008 f951 	bl	24d1e <assert_print>
   1ca7c:	f240 3147 	movw	r1, #839	; 0x347
   1ca80:	4807      	ldr	r0, [pc, #28]	; (1caa0 <clock_stop+0x1a0>)
   1ca82:	e783      	b.n	1c98c <clock_stop+0x8c>
   1ca84:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ca88:	2801      	cmp	r0, #1
   1ca8a:	d0eb      	beq.n	1ca64 <clock_stop+0x164>
   1ca8c:	e795      	b.n	1c9ba <clock_stop+0xba>
   1ca8e:	bf00      	nop
   1ca90:	40005000 	.word	0x40005000
   1ca94:	00030f5f 	.word	0x00030f5f
   1ca98:	0002b6e9 	.word	0x0002b6e9
   1ca9c:	0002feba 	.word	0x0002feba
   1caa0:	0002fef7 	.word	0x0002fef7

0001caa4 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1caa4:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1caa6:	b958      	cbnz	r0, 1cac0 <nrfx_clock_init+0x1c>
   1caa8:	490a      	ldr	r1, [pc, #40]	; (1cad4 <nrfx_clock_init+0x30>)
   1caaa:	480b      	ldr	r0, [pc, #44]	; (1cad8 <nrfx_clock_init+0x34>)
   1caac:	f240 1315 	movw	r3, #277	; 0x115
   1cab0:	4a0a      	ldr	r2, [pc, #40]	; (1cadc <nrfx_clock_init+0x38>)
   1cab2:	f008 f934 	bl	24d1e <assert_print>
   1cab6:	f240 1115 	movw	r1, #277	; 0x115
   1caba:	4808      	ldr	r0, [pc, #32]	; (1cadc <nrfx_clock_init+0x38>)
   1cabc:	f008 f928 	bl	24d10 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1cac0:	4b07      	ldr	r3, [pc, #28]	; (1cae0 <nrfx_clock_init+0x3c>)
   1cac2:	791a      	ldrb	r2, [r3, #4]
   1cac4:	b922      	cbnz	r2, 1cad0 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1cac6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1cac8:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1caca:	4806      	ldr	r0, [pc, #24]	; (1cae4 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1cacc:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1cace:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1cad0:	4805      	ldr	r0, [pc, #20]	; (1cae8 <nrfx_clock_init+0x44>)
    return err_code;
   1cad2:	e7fc      	b.n	1cace <nrfx_clock_init+0x2a>
   1cad4:	0002ff2b 	.word	0x0002ff2b
   1cad8:	0002b6e9 	.word	0x0002b6e9
   1cadc:	0002feba 	.word	0x0002feba
   1cae0:	200213d4 	.word	0x200213d4
   1cae4:	0bad0000 	.word	0x0bad0000
   1cae8:	0bad000c 	.word	0x0bad000c

0001caec <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1caec:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1caee:	4b0f      	ldr	r3, [pc, #60]	; (1cb2c <nrfx_clock_enable+0x40>)
   1caf0:	791b      	ldrb	r3, [r3, #4]
   1caf2:	b95b      	cbnz	r3, 1cb0c <nrfx_clock_enable+0x20>
   1caf4:	490e      	ldr	r1, [pc, #56]	; (1cb30 <nrfx_clock_enable+0x44>)
   1caf6:	480f      	ldr	r0, [pc, #60]	; (1cb34 <nrfx_clock_enable+0x48>)
   1caf8:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1cafc:	4a0e      	ldr	r2, [pc, #56]	; (1cb38 <nrfx_clock_enable+0x4c>)
   1cafe:	f008 f90e 	bl	24d1e <assert_print>
   1cb02:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1cb06:	480c      	ldr	r0, [pc, #48]	; (1cb38 <nrfx_clock_enable+0x4c>)
   1cb08:	f008 f902 	bl	24d10 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1cb0c:	2005      	movs	r0, #5
   1cb0e:	f7f3 fb2b 	bl	10168 <arch_irq_is_enabled>
   1cb12:	b910      	cbnz	r0, 1cb1a <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1cb14:	2005      	movs	r0, #5
   1cb16:	f7f3 fb05 	bl	10124 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1cb1a:	2201      	movs	r2, #1
   1cb1c:	4b07      	ldr	r3, [pc, #28]	; (1cb3c <nrfx_clock_enable+0x50>)
   1cb1e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1cb22:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1cb26:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1cb2a:	bd08      	pop	{r3, pc}
   1cb2c:	200213d4 	.word	0x200213d4
   1cb30:	0002ff39 	.word	0x0002ff39
   1cb34:	0002b6e9 	.word	0x0002b6e9
   1cb38:	0002feba 	.word	0x0002feba
   1cb3c:	40005000 	.word	0x40005000

0001cb40 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1cb40:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1cb42:	4b38      	ldr	r3, [pc, #224]	; (1cc24 <nrfx_clock_start+0xe4>)
   1cb44:	791b      	ldrb	r3, [r3, #4]
   1cb46:	b95b      	cbnz	r3, 1cb60 <nrfx_clock_start+0x20>
   1cb48:	4937      	ldr	r1, [pc, #220]	; (1cc28 <nrfx_clock_start+0xe8>)
   1cb4a:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1cb4e:	4a37      	ldr	r2, [pc, #220]	; (1cc2c <nrfx_clock_start+0xec>)
   1cb50:	4837      	ldr	r0, [pc, #220]	; (1cc30 <nrfx_clock_start+0xf0>)
   1cb52:	f008 f8e4 	bl	24d1e <assert_print>
   1cb56:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1cb5a:	4834      	ldr	r0, [pc, #208]	; (1cc2c <nrfx_clock_start+0xec>)
   1cb5c:	f008 f8d8 	bl	24d10 <assert_post_action>
    switch (domain)
   1cb60:	4b34      	ldr	r3, [pc, #208]	; (1cc34 <nrfx_clock_start+0xf4>)
   1cb62:	2803      	cmp	r0, #3
   1cb64:	d853      	bhi.n	1cc0e <nrfx_clock_start+0xce>
   1cb66:	e8df f000 	tbb	[pc, r0]
   1cb6a:	3002      	.short	0x3002
   1cb6c:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1cb6e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1cb72:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1cb76:	03c9      	lsls	r1, r1, #15
   1cb78:	d511      	bpl.n	1cb9e <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1cb7a:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1cb7e:	2b02      	cmp	r3, #2
   1cb80:	d11c      	bne.n	1cbbc <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1cb82:	4a2c      	ldr	r2, [pc, #176]	; (1cc34 <nrfx_clock_start+0xf4>)
   1cb84:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cb88:	2300      	movs	r3, #0
   1cb8a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1cb8e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1cb92:	2302      	movs	r3, #2
   1cb94:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb98:	2301      	movs	r3, #1
   1cb9a:	6093      	str	r3, [r2, #8]
}
   1cb9c:	e00d      	b.n	1cbba <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1cb9e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1cba2:	07d2      	lsls	r2, r2, #31
   1cba4:	d50f      	bpl.n	1cbc6 <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1cba6:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1cbaa:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1cbae:	3a01      	subs	r2, #1
   1cbb0:	2a01      	cmp	r2, #1
   1cbb2:	d805      	bhi.n	1cbc0 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1cbb4:	2202      	movs	r2, #2
   1cbb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1cbba:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1cbbc:	2b01      	cmp	r3, #1
   1cbbe:	d002      	beq.n	1cbc6 <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1cbc0:	2000      	movs	r0, #0
   1cbc2:	f7ff fe9d 	bl	1c900 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1cbc6:	2301      	movs	r3, #1
   1cbc8:	e7db      	b.n	1cb82 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cbca:	2200      	movs	r2, #0
   1cbcc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1cbd0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1cbd4:	2201      	movs	r2, #1
   1cbd6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cbda:	601a      	str	r2, [r3, #0]
}
   1cbdc:	e7ed      	b.n	1cbba <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cbde:	2200      	movs	r2, #0
   1cbe0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1cbe4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1cbe8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cbec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cbf0:	2201      	movs	r2, #1
   1cbf2:	621a      	str	r2, [r3, #32]
}
   1cbf4:	e7e1      	b.n	1cbba <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cbf6:	2200      	movs	r2, #0
   1cbf8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1cbfc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1cc00:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cc04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc08:	2201      	movs	r2, #1
   1cc0a:	619a      	str	r2, [r3, #24]
}
   1cc0c:	e7d5      	b.n	1cbba <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1cc0e:	490a      	ldr	r1, [pc, #40]	; (1cc38 <nrfx_clock_start+0xf8>)
   1cc10:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1cc14:	4a05      	ldr	r2, [pc, #20]	; (1cc2c <nrfx_clock_start+0xec>)
   1cc16:	4806      	ldr	r0, [pc, #24]	; (1cc30 <nrfx_clock_start+0xf0>)
   1cc18:	f008 f881 	bl	24d1e <assert_print>
   1cc1c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1cc20:	e79b      	b.n	1cb5a <nrfx_clock_start+0x1a>
   1cc22:	bf00      	nop
   1cc24:	200213d4 	.word	0x200213d4
   1cc28:	0002ff39 	.word	0x0002ff39
   1cc2c:	0002feba 	.word	0x0002feba
   1cc30:	0002b6e9 	.word	0x0002b6e9
   1cc34:	40005000 	.word	0x40005000
   1cc38:	00030f5f 	.word	0x00030f5f

0001cc3c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1cc3c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1cc3e:	4b09      	ldr	r3, [pc, #36]	; (1cc64 <nrfx_clock_stop+0x28>)
   1cc40:	791b      	ldrb	r3, [r3, #4]
   1cc42:	b95b      	cbnz	r3, 1cc5c <nrfx_clock_stop+0x20>
   1cc44:	4908      	ldr	r1, [pc, #32]	; (1cc68 <nrfx_clock_stop+0x2c>)
   1cc46:	4809      	ldr	r0, [pc, #36]	; (1cc6c <nrfx_clock_stop+0x30>)
   1cc48:	f240 13ad 	movw	r3, #429	; 0x1ad
   1cc4c:	4a08      	ldr	r2, [pc, #32]	; (1cc70 <nrfx_clock_stop+0x34>)
   1cc4e:	f008 f866 	bl	24d1e <assert_print>
   1cc52:	f240 11ad 	movw	r1, #429	; 0x1ad
   1cc56:	4806      	ldr	r0, [pc, #24]	; (1cc70 <nrfx_clock_stop+0x34>)
   1cc58:	f008 f85a 	bl	24d10 <assert_post_action>
    clock_stop(domain);
}
   1cc5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1cc60:	f7ff be4e 	b.w	1c900 <clock_stop>
   1cc64:	200213d4 	.word	0x200213d4
   1cc68:	0002ff39 	.word	0x0002ff39
   1cc6c:	0002b6e9 	.word	0x0002b6e9
   1cc70:	0002feba 	.word	0x0002feba

0001cc74 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1cc74:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cc76:	4b28      	ldr	r3, [pc, #160]	; (1cd18 <nrfx_power_clock_irq_handler+0xa4>)
   1cc78:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1cc7c:	b152      	cbz	r2, 1cc94 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cc7e:	2000      	movs	r0, #0
   1cc80:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1cc84:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1cc88:	2201      	movs	r2, #1
   1cc8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1cc8e:	4b23      	ldr	r3, [pc, #140]	; (1cd1c <nrfx_power_clock_irq_handler+0xa8>)
   1cc90:	681b      	ldr	r3, [r3, #0]
   1cc92:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cc94:	4b20      	ldr	r3, [pc, #128]	; (1cd18 <nrfx_power_clock_irq_handler+0xa4>)
   1cc96:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1cc9a:	b18a      	cbz	r2, 1ccc0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cc9c:	2200      	movs	r2, #0
   1cc9e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1cca2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1cca6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ccaa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1ccae:	f002 0203 	and.w	r2, r2, #3
   1ccb2:	2a01      	cmp	r2, #1
   1ccb4:	f04f 0102 	mov.w	r1, #2
   1ccb8:	d126      	bne.n	1cd08 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ccba:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ccbe:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ccc0:	4b15      	ldr	r3, [pc, #84]	; (1cd18 <nrfx_power_clock_irq_handler+0xa4>)
   1ccc2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1ccc6:	b162      	cbz	r2, 1cce2 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ccc8:	2200      	movs	r2, #0
   1ccca:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ccce:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1ccd2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ccd6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1ccda:	4b10      	ldr	r3, [pc, #64]	; (1cd1c <nrfx_power_clock_irq_handler+0xa8>)
   1ccdc:	2004      	movs	r0, #4
   1ccde:	681b      	ldr	r3, [r3, #0]
   1cce0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cce2:	4b0d      	ldr	r3, [pc, #52]	; (1cd18 <nrfx_power_clock_irq_handler+0xa4>)
   1cce4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1cce8:	b1aa      	cbz	r2, 1cd16 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ccea:	2200      	movs	r2, #0
   1ccec:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ccf0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1ccf4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ccf8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1ccfc:	4b07      	ldr	r3, [pc, #28]	; (1cd1c <nrfx_power_clock_irq_handler+0xa8>)
   1ccfe:	2005      	movs	r0, #5
    }
#endif
}
   1cd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1cd04:	681b      	ldr	r3, [r3, #0]
   1cd06:	4718      	bx	r3
   1cd08:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1cd0c:	4b03      	ldr	r3, [pc, #12]	; (1cd1c <nrfx_power_clock_irq_handler+0xa8>)
   1cd0e:	2001      	movs	r0, #1
   1cd10:	681b      	ldr	r3, [r3, #0]
   1cd12:	4798      	blx	r3
   1cd14:	e7d4      	b.n	1ccc0 <nrfx_power_clock_irq_handler+0x4c>
}
   1cd16:	bd10      	pop	{r4, pc}
   1cd18:	40005000 	.word	0x40005000
   1cd1c:	200213d4 	.word	0x200213d4

0001cd20 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1cd20:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1cd22:	4801      	ldr	r0, [pc, #4]	; (1cd28 <nrfx_dppi_channel_alloc+0x8>)
   1cd24:	f7ff bdb4 	b.w	1c890 <nrfx_flag32_alloc>
   1cd28:	20008688 	.word	0x20008688

0001cd2c <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1cd2c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1cd2e:	4a04      	ldr	r2, [pc, #16]	; (1cd40 <nrfx_dppi_channel_free+0x14>)
   1cd30:	4083      	lsls	r3, r0
{
   1cd32:	4601      	mov	r1, r0
   1cd34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1cd38:	4802      	ldr	r0, [pc, #8]	; (1cd44 <nrfx_dppi_channel_free+0x18>)
   1cd3a:	f7ff bdc5 	b.w	1c8c8 <nrfx_flag32_free>
   1cd3e:	bf00      	nop
   1cd40:	40017000 	.word	0x40017000
   1cd44:	20008688 	.word	0x20008688

0001cd48 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1cd48:	4b03      	ldr	r3, [pc, #12]	; (1cd58 <pin_in_use_by_te+0x10>)
   1cd4a:	3008      	adds	r0, #8
   1cd4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1cd50:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1cd54:	4770      	bx	lr
   1cd56:	bf00      	nop
   1cd58:	2000868c 	.word	0x2000868c

0001cd5c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1cd5c:	4b04      	ldr	r3, [pc, #16]	; (1cd70 <pin_has_trigger+0x14>)
   1cd5e:	3008      	adds	r0, #8
   1cd60:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1cd64:	f010 001c 	ands.w	r0, r0, #28
   1cd68:	bf18      	it	ne
   1cd6a:	2001      	movne	r0, #1
   1cd6c:	4770      	bx	lr
   1cd6e:	bf00      	nop
   1cd70:	2000868c 	.word	0x2000868c

0001cd74 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1cd74:	4b03      	ldr	r3, [pc, #12]	; (1cd84 <pin_is_output+0x10>)
   1cd76:	3008      	adds	r0, #8
   1cd78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1cd7c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1cd80:	4770      	bx	lr
   1cd82:	bf00      	nop
   1cd84:	2000868c 	.word	0x2000868c

0001cd88 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1cd88:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1cd8a:	4c0d      	ldr	r4, [pc, #52]	; (1cdc0 <call_handler+0x38>)
   1cd8c:	f100 0308 	add.w	r3, r0, #8
   1cd90:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1cd94:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1cd96:	05da      	lsls	r2, r3, #23
{
   1cd98:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1cd9a:	d507      	bpl.n	1cdac <call_handler+0x24>
   1cd9c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1cda0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1cda4:	6852      	ldr	r2, [r2, #4]
   1cda6:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1cdaa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1cdac:	68a3      	ldr	r3, [r4, #8]
   1cdae:	b12b      	cbz	r3, 1cdbc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1cdb0:	4631      	mov	r1, r6
   1cdb2:	4628      	mov	r0, r5
   1cdb4:	68e2      	ldr	r2, [r4, #12]
    }
}
   1cdb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1cdba:	4718      	bx	r3
}
   1cdbc:	bd70      	pop	{r4, r5, r6, pc}
   1cdbe:	bf00      	nop
   1cdc0:	2000868c 	.word	0x2000868c

0001cdc4 <release_handler>:
{
   1cdc4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1cdc6:	4a18      	ldr	r2, [pc, #96]	; (1ce28 <release_handler+0x64>)
   1cdc8:	3008      	adds	r0, #8
   1cdca:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1cdce:	05d9      	lsls	r1, r3, #23
   1cdd0:	d51d      	bpl.n	1ce0e <release_handler+0x4a>
   1cdd2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1cdd6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1cdda:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1cdde:	2000      	movs	r0, #0
   1cde0:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1cde4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1cde8:	f413 7f80 	tst.w	r3, #256	; 0x100
   1cdec:	d003      	beq.n	1cdf6 <release_handler+0x32>
   1cdee:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1cdf2:	4299      	cmp	r1, r3
   1cdf4:	d00b      	beq.n	1ce0e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1cdf6:	3001      	adds	r0, #1
   1cdf8:	2830      	cmp	r0, #48	; 0x30
   1cdfa:	d1f3      	bne.n	1cde4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1cdfc:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1cdfe:	480b      	ldr	r0, [pc, #44]	; (1ce2c <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1ce00:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1ce04:	f7ff fd60 	bl	1c8c8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1ce08:	4b09      	ldr	r3, [pc, #36]	; (1ce30 <release_handler+0x6c>)
   1ce0a:	4298      	cmp	r0, r3
   1ce0c:	d100      	bne.n	1ce10 <release_handler+0x4c>
}
   1ce0e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1ce10:	4908      	ldr	r1, [pc, #32]	; (1ce34 <release_handler+0x70>)
   1ce12:	4809      	ldr	r0, [pc, #36]	; (1ce38 <release_handler+0x74>)
   1ce14:	f44f 7399 	mov.w	r3, #306	; 0x132
   1ce18:	4a08      	ldr	r2, [pc, #32]	; (1ce3c <release_handler+0x78>)
   1ce1a:	f007 ff80 	bl	24d1e <assert_print>
   1ce1e:	f44f 7199 	mov.w	r1, #306	; 0x132
   1ce22:	4806      	ldr	r0, [pc, #24]	; (1ce3c <release_handler+0x78>)
   1ce24:	f007 ff74 	bl	24d10 <assert_post_action>
   1ce28:	2000868c 	.word	0x2000868c
   1ce2c:	20008700 	.word	0x20008700
   1ce30:	0bad0000 	.word	0x0bad0000
   1ce34:	0002c69b 	.word	0x0002c69b
   1ce38:	0002b6e9 	.word	0x0002b6e9
   1ce3c:	0002ff6c 	.word	0x0002ff6c

0001ce40 <pin_handler_trigger_uninit>:
{
   1ce40:	b538      	push	{r3, r4, r5, lr}
   1ce42:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1ce44:	f7ff ff80 	bl	1cd48 <pin_in_use_by_te>
   1ce48:	4c0b      	ldr	r4, [pc, #44]	; (1ce78 <pin_handler_trigger_uninit+0x38>)
   1ce4a:	f102 0508 	add.w	r5, r2, #8
   1ce4e:	b160      	cbz	r0, 1ce6a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1ce50:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ce52:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1ce56:	0b5b      	lsrs	r3, r3, #13
   1ce58:	009b      	lsls	r3, r3, #2
   1ce5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ce5e:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1ce62:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1ce66:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1ce6a:	4610      	mov	r0, r2
   1ce6c:	f7ff ffaa 	bl	1cdc4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1ce70:	2300      	movs	r3, #0
   1ce72:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1ce76:	bd38      	pop	{r3, r4, r5, pc}
   1ce78:	2000868c 	.word	0x2000868c

0001ce7c <nrf_gpio_pin_port_decode>:
{
   1ce7c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ce7e:	6802      	ldr	r2, [r0, #0]
{
   1ce80:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ce82:	4610      	mov	r0, r2
   1ce84:	f00b fcb2 	bl	287ec <nrf_gpio_pin_present_check>
   1ce88:	b958      	cbnz	r0, 1cea2 <nrf_gpio_pin_port_decode+0x26>
   1ce8a:	4910      	ldr	r1, [pc, #64]	; (1cecc <nrf_gpio_pin_port_decode+0x50>)
   1ce8c:	f240 2347 	movw	r3, #583	; 0x247
   1ce90:	4a0f      	ldr	r2, [pc, #60]	; (1ced0 <nrf_gpio_pin_port_decode+0x54>)
   1ce92:	4810      	ldr	r0, [pc, #64]	; (1ced4 <nrf_gpio_pin_port_decode+0x58>)
   1ce94:	f007 ff43 	bl	24d1e <assert_print>
   1ce98:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1ce9c:	480c      	ldr	r0, [pc, #48]	; (1ced0 <nrf_gpio_pin_port_decode+0x54>)
   1ce9e:	f007 ff37 	bl	24d10 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1cea2:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cea6:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1cea8:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ceaa:	d00b      	beq.n	1cec4 <nrf_gpio_pin_port_decode+0x48>
   1ceac:	2a01      	cmp	r2, #1
   1ceae:	d00b      	beq.n	1cec8 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1ceb0:	4909      	ldr	r1, [pc, #36]	; (1ced8 <nrf_gpio_pin_port_decode+0x5c>)
   1ceb2:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1ceb6:	4a06      	ldr	r2, [pc, #24]	; (1ced0 <nrf_gpio_pin_port_decode+0x54>)
   1ceb8:	4806      	ldr	r0, [pc, #24]	; (1ced4 <nrf_gpio_pin_port_decode+0x58>)
   1ceba:	f007 ff30 	bl	24d1e <assert_print>
   1cebe:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1cec2:	e7eb      	b.n	1ce9c <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1cec4:	4805      	ldr	r0, [pc, #20]	; (1cedc <nrf_gpio_pin_port_decode+0x60>)
}
   1cec6:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cec8:	4805      	ldr	r0, [pc, #20]	; (1cee0 <nrf_gpio_pin_port_decode+0x64>)
   1ceca:	e7fc      	b.n	1cec6 <nrf_gpio_pin_port_decode+0x4a>
   1cecc:	0002f64c 	.word	0x0002f64c
   1ced0:	0002f619 	.word	0x0002f619
   1ced4:	0002b6e9 	.word	0x0002b6e9
   1ced8:	00030f5f 	.word	0x00030f5f
   1cedc:	40842500 	.word	0x40842500
   1cee0:	40842800 	.word	0x40842800

0001cee4 <nrfx_gpiote_input_configure>:
{
   1cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cee6:	4604      	mov	r4, r0
   1cee8:	4617      	mov	r7, r2
   1ceea:	461d      	mov	r5, r3
   1ceec:	b085      	sub	sp, #20
    if (p_input_config)
   1ceee:	b1d9      	cbz	r1, 1cf28 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1cef0:	f00b fc8d 	bl	2880e <pin_is_task_output>
   1cef4:	bb00      	cbnz	r0, 1cf38 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1cef6:	460b      	mov	r3, r1
   1cef8:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1cefc:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1cf00:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1cf04:	f10d 020f 	add.w	r2, sp, #15
   1cf08:	f10d 010e 	add.w	r1, sp, #14
   1cf0c:	4620      	mov	r0, r4
   1cf0e:	f00b fc89 	bl	28824 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1cf12:	4a44      	ldr	r2, [pc, #272]	; (1d024 <nrfx_gpiote_input_configure+0x140>)
   1cf14:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1cf18:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1cf1c:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1cf20:	f043 0301 	orr.w	r3, r3, #1
   1cf24:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1cf28:	b36f      	cbz	r7, 1cf86 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1cf2a:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1cf2c:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1cf2e:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1cf30:	f7ff ff20 	bl	1cd74 <pin_is_output>
   1cf34:	b110      	cbz	r0, 1cf3c <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1cf36:	b1da      	cbz	r2, 1cf70 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1cf38:	483b      	ldr	r0, [pc, #236]	; (1d028 <nrfx_gpiote_input_configure+0x144>)
   1cf3a:	e026      	b.n	1cf8a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1cf3c:	4839      	ldr	r0, [pc, #228]	; (1d024 <nrfx_gpiote_input_configure+0x140>)
   1cf3e:	f104 0c08 	add.w	ip, r4, #8
   1cf42:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1cf46:	f021 0120 	bic.w	r1, r1, #32
   1cf4a:	04c9      	lsls	r1, r1, #19
   1cf4c:	0cc9      	lsrs	r1, r1, #19
   1cf4e:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1cf52:	b16a      	cbz	r2, 1cf70 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1cf54:	2e03      	cmp	r6, #3
   1cf56:	d8ef      	bhi.n	1cf38 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1cf58:	687b      	ldr	r3, [r7, #4]
   1cf5a:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1cf5c:	00ba      	lsls	r2, r7, #2
   1cf5e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1cf62:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1cf66:	b996      	cbnz	r6, 1cf8e <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1cf68:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1cf6c:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1cf70:	4a2c      	ldr	r2, [pc, #176]	; (1d024 <nrfx_gpiote_input_configure+0x140>)
   1cf72:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1cf76:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1cf7a:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1cf7e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1cf82:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1cf86:	bb15      	cbnz	r5, 1cfce <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1cf88:	4828      	ldr	r0, [pc, #160]	; (1d02c <nrfx_gpiote_input_configure+0x148>)
}
   1cf8a:	b005      	add	sp, #20
   1cf8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1cf8e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1cf92:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1cf96:	f023 0303 	bic.w	r3, r3, #3
   1cf9a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cf9e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1cfa2:	f041 0120 	orr.w	r1, r1, #32
   1cfa6:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1cfaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1cfae:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cfb2:	0223      	lsls	r3, r4, #8
   1cfb4:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1cfb8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1cfbc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1cfc0:	ea43 030e 	orr.w	r3, r3, lr
   1cfc4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1cfc8:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1cfcc:	e7d0      	b.n	1cf70 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1cfce:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1cfd0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1cfd4:	f7ff fef6 	bl	1cdc4 <release_handler>
    if (!handler)
   1cfd8:	2e00      	cmp	r6, #0
   1cfda:	d0d5      	beq.n	1cf88 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1cfdc:	4d11      	ldr	r5, [pc, #68]	; (1d024 <nrfx_gpiote_input_configure+0x140>)
   1cfde:	e9d5 2300 	ldrd	r2, r3, [r5]
   1cfe2:	4296      	cmp	r6, r2
   1cfe4:	d101      	bne.n	1cfea <nrfx_gpiote_input_configure+0x106>
   1cfe6:	429f      	cmp	r7, r3
   1cfe8:	d019      	beq.n	1d01e <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1cfea:	4811      	ldr	r0, [pc, #68]	; (1d030 <nrfx_gpiote_input_configure+0x14c>)
   1cfec:	f10d 010f 	add.w	r1, sp, #15
   1cff0:	f7ff fc4e 	bl	1c890 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1cff4:	4b0d      	ldr	r3, [pc, #52]	; (1d02c <nrfx_gpiote_input_configure+0x148>)
   1cff6:	4298      	cmp	r0, r3
   1cff8:	d1c7      	bne.n	1cf8a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1cffa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1cffe:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1d002:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1d006:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1d008:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1d00c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1d010:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1d014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1d018:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1d01c:	e7b4      	b.n	1cf88 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1d01e:	2200      	movs	r2, #0
   1d020:	e7ed      	b.n	1cffe <nrfx_gpiote_input_configure+0x11a>
   1d022:	bf00      	nop
   1d024:	2000868c 	.word	0x2000868c
   1d028:	0bad0004 	.word	0x0bad0004
   1d02c:	0bad0000 	.word	0x0bad0000
   1d030:	20008700 	.word	0x20008700

0001d034 <nrfx_gpiote_output_configure>:
{
   1d034:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d036:	4604      	mov	r4, r0
   1d038:	4615      	mov	r5, r2
   1d03a:	b085      	sub	sp, #20
    if (p_config)
   1d03c:	b321      	cbz	r1, 1d088 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1d03e:	f7ff fe99 	bl	1cd74 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1d042:	b920      	cbnz	r0, 1d04e <nrfx_gpiote_output_configure+0x1a>
   1d044:	4620      	mov	r0, r4
   1d046:	f7ff fe7f 	bl	1cd48 <pin_in_use_by_te>
   1d04a:	2800      	cmp	r0, #0
   1d04c:	d161      	bne.n	1d112 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1d04e:	4620      	mov	r0, r4
   1d050:	f7ff fe84 	bl	1cd5c <pin_has_trigger>
   1d054:	b110      	cbz	r0, 1d05c <nrfx_gpiote_output_configure+0x28>
   1d056:	784b      	ldrb	r3, [r1, #1]
   1d058:	2b01      	cmp	r3, #1
   1d05a:	d05a      	beq.n	1d112 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1d05c:	2301      	movs	r3, #1
   1d05e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1d062:	2300      	movs	r3, #0
   1d064:	1c4a      	adds	r2, r1, #1
   1d066:	e9cd 1300 	strd	r1, r3, [sp]
   1d06a:	4620      	mov	r0, r4
   1d06c:	1c8b      	adds	r3, r1, #2
   1d06e:	f10d 010f 	add.w	r1, sp, #15
   1d072:	f00b fbd7 	bl	28824 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1d076:	4a28      	ldr	r2, [pc, #160]	; (1d118 <nrfx_gpiote_output_configure+0xe4>)
   1d078:	f104 0108 	add.w	r1, r4, #8
   1d07c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1d080:	f043 0303 	orr.w	r3, r3, #3
   1d084:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1d088:	b915      	cbnz	r5, 1d090 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1d08a:	4824      	ldr	r0, [pc, #144]	; (1d11c <nrfx_gpiote_output_configure+0xe8>)
}
   1d08c:	b005      	add	sp, #20
   1d08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1d090:	4620      	mov	r0, r4
   1d092:	f7ff fe6f 	bl	1cd74 <pin_is_output>
        if (pin_is_input(pin))
   1d096:	2800      	cmp	r0, #0
   1d098:	d03b      	beq.n	1d112 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1d09a:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1d09e:	2300      	movs	r3, #0
   1d0a0:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1d0a2:	4e1d      	ldr	r6, [pc, #116]	; (1d118 <nrfx_gpiote_output_configure+0xe4>)
   1d0a4:	f104 0708 	add.w	r7, r4, #8
   1d0a8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1d0ac:	0089      	lsls	r1, r1, #2
   1d0ae:	f020 0020 	bic.w	r0, r0, #32
   1d0b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1d0b6:	04c0      	lsls	r0, r0, #19
   1d0b8:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1d0bc:	0cc0      	lsrs	r0, r0, #19
   1d0be:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1d0c2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1d0c6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1d0ca:	786a      	ldrb	r2, [r5, #1]
   1d0cc:	2a00      	cmp	r2, #0
   1d0ce:	d0dc      	beq.n	1d08a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1d0d0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1d0d4:	78ad      	ldrb	r5, [r5, #2]
   1d0d6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1d0da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1d0de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d0e2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1d0e6:	0223      	lsls	r3, r4, #8
   1d0e8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1d0ec:	0412      	lsls	r2, r2, #16
   1d0ee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d0f2:	ea43 030e 	orr.w	r3, r3, lr
   1d0f6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1d0f8:	052a      	lsls	r2, r5, #20
   1d0fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1d0fe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d102:	4313      	orrs	r3, r2
   1d104:	f040 0020 	orr.w	r0, r0, #32
   1d108:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1d10c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1d110:	e7bb      	b.n	1d08a <nrfx_gpiote_output_configure+0x56>
{
   1d112:	4803      	ldr	r0, [pc, #12]	; (1d120 <nrfx_gpiote_output_configure+0xec>)
   1d114:	e7ba      	b.n	1d08c <nrfx_gpiote_output_configure+0x58>
   1d116:	bf00      	nop
   1d118:	2000868c 	.word	0x2000868c
   1d11c:	0bad0000 	.word	0x0bad0000
   1d120:	0bad0004 	.word	0x0bad0004

0001d124 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1d124:	4b01      	ldr	r3, [pc, #4]	; (1d12c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1d126:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1d12a:	4770      	bx	lr
   1d12c:	2000868c 	.word	0x2000868c

0001d130 <nrfx_gpiote_channel_get>:
{
   1d130:	4602      	mov	r2, r0
   1d132:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1d134:	b959      	cbnz	r1, 1d14e <nrfx_gpiote_channel_get+0x1e>
   1d136:	490c      	ldr	r1, [pc, #48]	; (1d168 <nrfx_gpiote_channel_get+0x38>)
   1d138:	480c      	ldr	r0, [pc, #48]	; (1d16c <nrfx_gpiote_channel_get+0x3c>)
   1d13a:	f240 2335 	movw	r3, #565	; 0x235
   1d13e:	4a0c      	ldr	r2, [pc, #48]	; (1d170 <nrfx_gpiote_channel_get+0x40>)
   1d140:	f007 fded 	bl	24d1e <assert_print>
   1d144:	f240 2135 	movw	r1, #565	; 0x235
   1d148:	4809      	ldr	r0, [pc, #36]	; (1d170 <nrfx_gpiote_channel_get+0x40>)
   1d14a:	f007 fde1 	bl	24d10 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1d14e:	f7ff fdfb 	bl	1cd48 <pin_in_use_by_te>
   1d152:	b138      	cbz	r0, 1d164 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d154:	4b07      	ldr	r3, [pc, #28]	; (1d174 <nrfx_gpiote_channel_get+0x44>)
   1d156:	3208      	adds	r2, #8
   1d158:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1d15c:	4806      	ldr	r0, [pc, #24]	; (1d178 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d15e:	0b5b      	lsrs	r3, r3, #13
   1d160:	700b      	strb	r3, [r1, #0]
}
   1d162:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d164:	4805      	ldr	r0, [pc, #20]	; (1d17c <nrfx_gpiote_channel_get+0x4c>)
   1d166:	e7fc      	b.n	1d162 <nrfx_gpiote_channel_get+0x32>
   1d168:	0002ffaa 	.word	0x0002ffaa
   1d16c:	0002b6e9 	.word	0x0002b6e9
   1d170:	0002ff6c 	.word	0x0002ff6c
   1d174:	2000868c 	.word	0x2000868c
   1d178:	0bad0000 	.word	0x0bad0000
   1d17c:	0bad0004 	.word	0x0bad0004

0001d180 <nrfx_gpiote_init>:
{
   1d180:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d182:	4c0f      	ldr	r4, [pc, #60]	; (1d1c0 <nrfx_gpiote_init+0x40>)
   1d184:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1d188:	b9bd      	cbnz	r5, 1d1ba <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1d18a:	2260      	movs	r2, #96	; 0x60
   1d18c:	4629      	mov	r1, r5
   1d18e:	f104 0010 	add.w	r0, r4, #16
   1d192:	f00c fb64 	bl	2985e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1d196:	202f      	movs	r0, #47	; 0x2f
   1d198:	f7f2 ffc4 	bl	10124 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d19c:	4b09      	ldr	r3, [pc, #36]	; (1d1c4 <nrfx_gpiote_init+0x44>)
    return err_code;
   1d19e:	480a      	ldr	r0, [pc, #40]	; (1d1c8 <nrfx_gpiote_init+0x48>)
   1d1a0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1d1a4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1d1a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d1ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d1b0:	2301      	movs	r3, #1
   1d1b2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1d1b6:	6763      	str	r3, [r4, #116]	; 0x74
}
   1d1b8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1d1ba:	4804      	ldr	r0, [pc, #16]	; (1d1cc <nrfx_gpiote_init+0x4c>)
   1d1bc:	e7fc      	b.n	1d1b8 <nrfx_gpiote_init+0x38>
   1d1be:	bf00      	nop
   1d1c0:	2000868c 	.word	0x2000868c
   1d1c4:	4002f000 	.word	0x4002f000
   1d1c8:	0bad0000 	.word	0x0bad0000
   1d1cc:	0bad0005 	.word	0x0bad0005

0001d1d0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1d1d0:	4b03      	ldr	r3, [pc, #12]	; (1d1e0 <nrfx_gpiote_is_init+0x10>)
   1d1d2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1d1d6:	3800      	subs	r0, #0
   1d1d8:	bf18      	it	ne
   1d1da:	2001      	movne	r0, #1
   1d1dc:	4770      	bx	lr
   1d1de:	bf00      	nop
   1d1e0:	2000868c 	.word	0x2000868c

0001d1e4 <nrfx_gpiote_channel_free>:
{
   1d1e4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1d1e6:	4801      	ldr	r0, [pc, #4]	; (1d1ec <nrfx_gpiote_channel_free+0x8>)
   1d1e8:	f7ff bb6e 	b.w	1c8c8 <nrfx_flag32_free>
   1d1ec:	200086fc 	.word	0x200086fc

0001d1f0 <nrfx_gpiote_channel_alloc>:
{
   1d1f0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1d1f2:	4801      	ldr	r0, [pc, #4]	; (1d1f8 <nrfx_gpiote_channel_alloc+0x8>)
   1d1f4:	f7ff bb4c 	b.w	1c890 <nrfx_flag32_alloc>
   1d1f8:	200086fc 	.word	0x200086fc

0001d1fc <nrfx_gpiote_trigger_enable>:
{
   1d1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d1fe:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1d200:	f7ff fdac 	bl	1cd5c <pin_has_trigger>
   1d204:	b958      	cbnz	r0, 1d21e <nrfx_gpiote_trigger_enable+0x22>
   1d206:	492b      	ldr	r1, [pc, #172]	; (1d2b4 <nrfx_gpiote_trigger_enable+0xb8>)
   1d208:	f240 33df 	movw	r3, #991	; 0x3df
   1d20c:	4a2a      	ldr	r2, [pc, #168]	; (1d2b8 <nrfx_gpiote_trigger_enable+0xbc>)
   1d20e:	482b      	ldr	r0, [pc, #172]	; (1d2bc <nrfx_gpiote_trigger_enable+0xc0>)
   1d210:	f007 fd85 	bl	24d1e <assert_print>
   1d214:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1d218:	4827      	ldr	r0, [pc, #156]	; (1d2b8 <nrfx_gpiote_trigger_enable+0xbc>)
   1d21a:	f007 fd79 	bl	24d10 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d21e:	4620      	mov	r0, r4
   1d220:	f7ff fd92 	bl	1cd48 <pin_in_use_by_te>
   1d224:	4a26      	ldr	r2, [pc, #152]	; (1d2c0 <nrfx_gpiote_trigger_enable+0xc4>)
   1d226:	f104 0508 	add.w	r5, r4, #8
   1d22a:	b1e0      	cbz	r0, 1d266 <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1d22c:	4620      	mov	r0, r4
   1d22e:	f7ff fda1 	bl	1cd74 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d232:	b9c0      	cbnz	r0, 1d266 <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d234:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1d238:	4c22      	ldr	r4, [pc, #136]	; (1d2c4 <nrfx_gpiote_trigger_enable+0xc8>)
   1d23a:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1d23c:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d23e:	50e0      	str	r0, [r4, r3]
   1d240:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d242:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d246:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1d24a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1d24e:	f040 0001 	orr.w	r0, r0, #1
   1d252:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1d256:	b121      	cbz	r1, 1d262 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1d258:	2301      	movs	r3, #1
   1d25a:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1d25c:	4a1a      	ldr	r2, [pc, #104]	; (1d2c8 <nrfx_gpiote_trigger_enable+0xcc>)
   1d25e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d262:	b003      	add	sp, #12
   1d264:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1d266:	b949      	cbnz	r1, 1d27c <nrfx_gpiote_trigger_enable+0x80>
   1d268:	4918      	ldr	r1, [pc, #96]	; (1d2cc <nrfx_gpiote_trigger_enable+0xd0>)
   1d26a:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1d26e:	4a12      	ldr	r2, [pc, #72]	; (1d2b8 <nrfx_gpiote_trigger_enable+0xbc>)
   1d270:	4812      	ldr	r0, [pc, #72]	; (1d2bc <nrfx_gpiote_trigger_enable+0xc0>)
   1d272:	f007 fd54 	bl	24d1e <assert_print>
   1d276:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1d27a:	e7cd      	b.n	1d218 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d27c:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1d280:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1d284:	2b04      	cmp	r3, #4
   1d286:	d011      	beq.n	1d2ac <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1d288:	2b05      	cmp	r3, #5
   1d28a:	d011      	beq.n	1d2b0 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d28c:	a801      	add	r0, sp, #4
   1d28e:	9401      	str	r4, [sp, #4]
   1d290:	f7ff fdf4 	bl	1ce7c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1d294:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1d296:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1d298:	40d9      	lsrs	r1, r3
   1d29a:	f001 0101 	and.w	r1, r1, #1
   1d29e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1d2a0:	4620      	mov	r0, r4
}
   1d2a2:	b003      	add	sp, #12
   1d2a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1d2a8:	f00b bb09 	b.w	288be <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1d2ac:	2103      	movs	r1, #3
   1d2ae:	e7f7      	b.n	1d2a0 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1d2b0:	2102      	movs	r1, #2
   1d2b2:	e7f5      	b.n	1d2a0 <nrfx_gpiote_trigger_enable+0xa4>
   1d2b4:	0002ffb4 	.word	0x0002ffb4
   1d2b8:	0002ff6c 	.word	0x0002ff6c
   1d2bc:	0002b6e9 	.word	0x0002b6e9
   1d2c0:	2000868c 	.word	0x2000868c
   1d2c4:	4002f100 	.word	0x4002f100
   1d2c8:	4002f000 	.word	0x4002f000
   1d2cc:	0002ffc9 	.word	0x0002ffc9

0001d2d0 <nrfx_gpiote_trigger_disable>:
{
   1d2d0:	b508      	push	{r3, lr}
   1d2d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d2d4:	f7ff fd38 	bl	1cd48 <pin_in_use_by_te>
   1d2d8:	b1c8      	cbz	r0, 1d30e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1d2da:	4610      	mov	r0, r2
   1d2dc:	f7ff fd4a 	bl	1cd74 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1d2e0:	b9a8      	cbnz	r0, 1d30e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d2e2:	4b0e      	ldr	r3, [pc, #56]	; (1d31c <nrfx_gpiote_trigger_disable+0x4c>)
   1d2e4:	3208      	adds	r2, #8
   1d2e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1d2ea:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1d2ec:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1d2ee:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1d2f0:	490b      	ldr	r1, [pc, #44]	; (1d320 <nrfx_gpiote_trigger_disable+0x50>)
   1d2f2:	009b      	lsls	r3, r3, #2
   1d2f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d2f8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1d2fc:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1d300:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d304:	f022 0203 	bic.w	r2, r2, #3
   1d308:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1d30c:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d30e:	2100      	movs	r1, #0
}
   1d310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d314:	4610      	mov	r0, r2
   1d316:	f00b bad2 	b.w	288be <nrf_gpio_cfg_sense_set>
   1d31a:	bf00      	nop
   1d31c:	2000868c 	.word	0x2000868c
   1d320:	4002f000 	.word	0x4002f000

0001d324 <nrfx_gpiote_pin_uninit>:
{
   1d324:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1d326:	4b10      	ldr	r3, [pc, #64]	; (1d368 <nrfx_gpiote_pin_uninit+0x44>)
   1d328:	f100 0208 	add.w	r2, r0, #8
   1d32c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1d330:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1d332:	07db      	lsls	r3, r3, #31
   1d334:	d516      	bpl.n	1d364 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1d336:	f7ff ffcb 	bl	1d2d0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1d33a:	4620      	mov	r0, r4
   1d33c:	f7ff fd80 	bl	1ce40 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d340:	a801      	add	r0, sp, #4
   1d342:	9401      	str	r4, [sp, #4]
   1d344:	f7ff fd9a 	bl	1ce7c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d348:	9b01      	ldr	r3, [sp, #4]
   1d34a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d34e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1d352:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1d356:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1d35a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1d35e:	4803      	ldr	r0, [pc, #12]	; (1d36c <nrfx_gpiote_pin_uninit+0x48>)
}
   1d360:	b002      	add	sp, #8
   1d362:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d364:	4802      	ldr	r0, [pc, #8]	; (1d370 <nrfx_gpiote_pin_uninit+0x4c>)
   1d366:	e7fb      	b.n	1d360 <nrfx_gpiote_pin_uninit+0x3c>
   1d368:	2000868c 	.word	0x2000868c
   1d36c:	0bad0000 	.word	0x0bad0000
   1d370:	0bad0004 	.word	0x0bad0004

0001d374 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1d378:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1d37a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d37c:	4634      	mov	r4, r6
{
   1d37e:	4b64      	ldr	r3, [pc, #400]	; (1d510 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1d380:	4864      	ldr	r0, [pc, #400]	; (1d514 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d382:	4965      	ldr	r1, [pc, #404]	; (1d518 <nrfx_gpiote_irq_handler+0x1a4>)
{
   1d384:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d386:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1d388:	b135      	cbz	r5, 1d398 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1d38a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1d38e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d390:	bf1e      	ittt	ne
   1d392:	601c      	strne	r4, [r3, #0]
   1d394:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1d396:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d398:	3304      	adds	r3, #4
   1d39a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1d39c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d3a0:	d1f1      	bne.n	1d386 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d3a2:	f8df a170 	ldr.w	sl, [pc, #368]	; 1d514 <nrfx_gpiote_irq_handler+0x1a0>
   1d3a6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1d3aa:	2b00      	cmp	r3, #0
   1d3ac:	f000 8093 	beq.w	1d4d6 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1d3b0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1d51c <nrfx_gpiote_irq_handler+0x1a8>
   1d3b4:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1d3b8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1d3ba:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1d3be:	4b58      	ldr	r3, [pc, #352]	; (1d520 <nrfx_gpiote_irq_handler+0x1ac>)
   1d3c0:	6a1a      	ldr	r2, [r3, #32]
   1d3c2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1d3c4:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d3c6:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1d3ca:	f10d 0b10 	add.w	fp, sp, #16
   1d3ce:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1d3d2:	9300      	str	r3, [sp, #0]
   1d3d4:	e04a      	b.n	1d46c <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1d3d6:	fa94 f4a4 	rbit	r4, r4
   1d3da:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1d3de:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d3e0:	4a50      	ldr	r2, [pc, #320]	; (1d524 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1d3e2:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d3e4:	f104 0308 	add.w	r3, r4, #8
   1d3e8:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1d3ec:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1d3ee:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1d3f0:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1d3f4:	fa03 f101 	lsl.w	r1, r3, r1
   1d3f8:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1d3fc:	08ba      	lsrs	r2, r7, #2
   1d3fe:	ea23 0301 	bic.w	r3, r3, r1
   1d402:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d406:	a803      	add	r0, sp, #12
   1d408:	9201      	str	r2, [sp, #4]
   1d40a:	9403      	str	r4, [sp, #12]
   1d40c:	f7ff fd36 	bl	1ce7c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d410:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1d412:	9a01      	ldr	r2, [sp, #4]
   1d414:	3380      	adds	r3, #128	; 0x80
   1d416:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d41a:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1d41e:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d420:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1d422:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1d426:	d52b      	bpl.n	1d480 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1d428:	4639      	mov	r1, r7
   1d42a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d42c:	b2dd      	uxtb	r5, r3
   1d42e:	f7ff fcab 	bl	1cd88 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d432:	a803      	add	r0, sp, #12
   1d434:	9403      	str	r4, [sp, #12]
   1d436:	f7ff fd21 	bl	1ce7c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d43a:	9b03      	ldr	r3, [sp, #12]
   1d43c:	3380      	adds	r3, #128	; 0x80
   1d43e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1d442:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1d446:	429d      	cmp	r5, r3
   1d448:	d107      	bne.n	1d45a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d44a:	2100      	movs	r1, #0
   1d44c:	4620      	mov	r0, r4
   1d44e:	f00b fa36 	bl	288be <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1d452:	4629      	mov	r1, r5
   1d454:	4620      	mov	r0, r4
   1d456:	f00b fa32 	bl	288be <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d45a:	a803      	add	r0, sp, #12
   1d45c:	9403      	str	r4, [sp, #12]
   1d45e:	f7ff fd0d 	bl	1ce7c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1d462:	2201      	movs	r2, #1
   1d464:	9b03      	ldr	r3, [sp, #12]
   1d466:	fa02 f303 	lsl.w	r3, r2, r3
   1d46a:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1d46c:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1d470:	2c00      	cmp	r4, #0
   1d472:	d1b0      	bne.n	1d3d6 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d474:	f1b9 0f00 	cmp.w	r9, #0
   1d478:	d11d      	bne.n	1d4b6 <nrfx_gpiote_irq_handler+0x142>
   1d47a:	f04f 0901 	mov.w	r9, #1
   1d47e:	e7a6      	b.n	1d3ce <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1d480:	2b02      	cmp	r3, #2
   1d482:	d10c      	bne.n	1d49e <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d484:	2103      	movs	r1, #3
   1d486:	4620      	mov	r0, r4
   1d488:	f00b fa19 	bl	288be <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d48c:	f005 0305 	and.w	r3, r5, #5
   1d490:	2b01      	cmp	r3, #1
   1d492:	d1e2      	bne.n	1d45a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1d494:	4639      	mov	r1, r7
   1d496:	4620      	mov	r0, r4
   1d498:	f7ff fc76 	bl	1cd88 <call_handler>
   1d49c:	e7dd      	b.n	1d45a <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d49e:	2102      	movs	r1, #2
   1d4a0:	4620      	mov	r0, r4
   1d4a2:	9301      	str	r3, [sp, #4]
   1d4a4:	f00b fa0b 	bl	288be <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d4a8:	2d03      	cmp	r5, #3
   1d4aa:	d0f3      	beq.n	1d494 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1d4ac:	9b01      	ldr	r3, [sp, #4]
   1d4ae:	2b03      	cmp	r3, #3
   1d4b0:	d1d3      	bne.n	1d45a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1d4b2:	2d02      	cmp	r5, #2
   1d4b4:	e7ed      	b.n	1d492 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d4b6:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1d4ba:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1d4be:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1d4c2:	4917      	ldr	r1, [pc, #92]	; (1d520 <nrfx_gpiote_irq_handler+0x1ac>)
   1d4c4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1d4c6:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1d4ca:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1d4cc:	4313      	orrs	r3, r2
   1d4ce:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1d4d0:	620a      	str	r2, [r1, #32]
   1d4d2:	f47f af78 	bne.w	1d3c6 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1d4d6:	2401      	movs	r4, #1
    while (mask)
   1d4d8:	b916      	cbnz	r6, 1d4e0 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1d4da:	b007      	add	sp, #28
   1d4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1d4e0:	fa96 f3a6 	rbit	r3, r6
   1d4e4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1d4e8:	fa04 f203 	lsl.w	r2, r4, r3
   1d4ec:	009b      	lsls	r3, r3, #2
   1d4ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d4f2:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d4f6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1d4fa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1d4fe:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1d502:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1d506:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1d50a:	f7ff fc3d 	bl	1cd88 <call_handler>
   1d50e:	e7e3      	b.n	1d4d8 <nrfx_gpiote_irq_handler+0x164>
   1d510:	4002f100 	.word	0x4002f100
   1d514:	4002f000 	.word	0x4002f000
   1d518:	4002f120 	.word	0x4002f120
   1d51c:	40842500 	.word	0x40842500
   1d520:	40842800 	.word	0x40842800
   1d524:	2000868c 	.word	0x2000868c

0001d528 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1d528:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d52a:	4c08      	ldr	r4, [pc, #32]	; (1d54c <nrfx_ipc_init+0x24>)
{
   1d52c:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d52e:	7923      	ldrb	r3, [r4, #4]
{
   1d530:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d532:	b943      	cbnz	r3, 1d546 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1d534:	202a      	movs	r0, #42	; 0x2a
   1d536:	f7f2 fdf5 	bl	10124 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d53a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1d53c:	4804      	ldr	r0, [pc, #16]	; (1d550 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d53e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1d540:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1d542:	60a5      	str	r5, [r4, #8]
}
   1d544:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1d546:	4803      	ldr	r0, [pc, #12]	; (1d554 <nrfx_ipc_init+0x2c>)
   1d548:	e7fc      	b.n	1d544 <nrfx_ipc_init+0x1c>
   1d54a:	bf00      	nop
   1d54c:	200213dc 	.word	0x200213dc
   1d550:	0bad0000 	.word	0x0bad0000
   1d554:	0bad000c 	.word	0x0bad000c

0001d558 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1d558:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1d55a:	b948      	cbnz	r0, 1d570 <nrfx_ipc_config_load+0x18>
   1d55c:	4919      	ldr	r1, [pc, #100]	; (1d5c4 <nrfx_ipc_config_load+0x6c>)
   1d55e:	2345      	movs	r3, #69	; 0x45
   1d560:	4a19      	ldr	r2, [pc, #100]	; (1d5c8 <nrfx_ipc_config_load+0x70>)
   1d562:	481a      	ldr	r0, [pc, #104]	; (1d5cc <nrfx_ipc_config_load+0x74>)
   1d564:	f007 fbdb 	bl	24d1e <assert_print>
   1d568:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d56a:	4817      	ldr	r0, [pc, #92]	; (1d5c8 <nrfx_ipc_config_load+0x70>)
   1d56c:	f007 fbd0 	bl	24d10 <assert_post_action>
   1d570:	4b17      	ldr	r3, [pc, #92]	; (1d5d0 <nrfx_ipc_config_load+0x78>)
   1d572:	791b      	ldrb	r3, [r3, #4]
   1d574:	2b01      	cmp	r3, #1
   1d576:	d007      	beq.n	1d588 <nrfx_ipc_config_load+0x30>
   1d578:	4916      	ldr	r1, [pc, #88]	; (1d5d4 <nrfx_ipc_config_load+0x7c>)
   1d57a:	2346      	movs	r3, #70	; 0x46
   1d57c:	4a12      	ldr	r2, [pc, #72]	; (1d5c8 <nrfx_ipc_config_load+0x70>)
   1d57e:	4813      	ldr	r0, [pc, #76]	; (1d5cc <nrfx_ipc_config_load+0x74>)
   1d580:	f007 fbcd 	bl	24d1e <assert_print>
   1d584:	2146      	movs	r1, #70	; 0x46
   1d586:	e7f0      	b.n	1d56a <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d588:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1d58a:	4a13      	ldr	r2, [pc, #76]	; (1d5d8 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1d58c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1d590:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d594:	3301      	adds	r3, #1
   1d596:	2b10      	cmp	r3, #16
   1d598:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1d59c:	d1f6      	bne.n	1d58c <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d59e:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1d5a0:	4a0d      	ldr	r2, [pc, #52]	; (1d5d8 <nrfx_ipc_config_load+0x80>)
   1d5a2:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1d5a6:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1d5aa:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d5ae:	3301      	adds	r3, #1
   1d5b0:	2b10      	cmp	r3, #16
   1d5b2:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1d5b6:	d1f6      	bne.n	1d5a6 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1d5b8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1d5bc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d5c0:	bd38      	pop	{r3, r4, r5, pc}
   1d5c2:	bf00      	nop
   1d5c4:	0003001b 	.word	0x0003001b
   1d5c8:	0002ffe0 	.word	0x0002ffe0
   1d5cc:	0002b6e9 	.word	0x0002b6e9
   1d5d0:	200213dc 	.word	0x200213dc
   1d5d4:	00030024 	.word	0x00030024
   1d5d8:	4002a000 	.word	0x4002a000

0001d5dc <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1d5dc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d5de:	4b09      	ldr	r3, [pc, #36]	; (1d604 <nrfx_ipc_receive_event_enable+0x28>)
   1d5e0:	791b      	ldrb	r3, [r3, #4]
   1d5e2:	2b01      	cmp	r3, #1
   1d5e4:	d009      	beq.n	1d5fa <nrfx_ipc_receive_event_enable+0x1e>
   1d5e6:	4908      	ldr	r1, [pc, #32]	; (1d608 <nrfx_ipc_receive_event_enable+0x2c>)
   1d5e8:	4808      	ldr	r0, [pc, #32]	; (1d60c <nrfx_ipc_receive_event_enable+0x30>)
   1d5ea:	236b      	movs	r3, #107	; 0x6b
   1d5ec:	4a08      	ldr	r2, [pc, #32]	; (1d610 <nrfx_ipc_receive_event_enable+0x34>)
   1d5ee:	f007 fb96 	bl	24d1e <assert_print>
   1d5f2:	216b      	movs	r1, #107	; 0x6b
   1d5f4:	4806      	ldr	r0, [pc, #24]	; (1d610 <nrfx_ipc_receive_event_enable+0x34>)
   1d5f6:	f007 fb8b 	bl	24d10 <assert_post_action>
   1d5fa:	4a06      	ldr	r2, [pc, #24]	; (1d614 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1d5fc:	4083      	lsls	r3, r0
   1d5fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d602:	bd08      	pop	{r3, pc}
   1d604:	200213dc 	.word	0x200213dc
   1d608:	00030024 	.word	0x00030024
   1d60c:	0002b6e9 	.word	0x0002b6e9
   1d610:	0002ffe0 	.word	0x0002ffe0
   1d614:	4002a000 	.word	0x4002a000

0001d618 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1d618:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d61a:	4b09      	ldr	r3, [pc, #36]	; (1d640 <nrfx_ipc_receive_event_disable+0x28>)
   1d61c:	791b      	ldrb	r3, [r3, #4]
   1d61e:	2b01      	cmp	r3, #1
   1d620:	d009      	beq.n	1d636 <nrfx_ipc_receive_event_disable+0x1e>
   1d622:	4908      	ldr	r1, [pc, #32]	; (1d644 <nrfx_ipc_receive_event_disable+0x2c>)
   1d624:	4808      	ldr	r0, [pc, #32]	; (1d648 <nrfx_ipc_receive_event_disable+0x30>)
   1d626:	2371      	movs	r3, #113	; 0x71
   1d628:	4a08      	ldr	r2, [pc, #32]	; (1d64c <nrfx_ipc_receive_event_disable+0x34>)
   1d62a:	f007 fb78 	bl	24d1e <assert_print>
   1d62e:	2171      	movs	r1, #113	; 0x71
   1d630:	4806      	ldr	r0, [pc, #24]	; (1d64c <nrfx_ipc_receive_event_disable+0x34>)
   1d632:	f007 fb6d 	bl	24d10 <assert_post_action>
    p_reg->INTENCLR = mask;
   1d636:	4a06      	ldr	r2, [pc, #24]	; (1d650 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1d638:	4083      	lsls	r3, r0
   1d63a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1d63e:	bd08      	pop	{r3, pc}
   1d640:	200213dc 	.word	0x200213dc
   1d644:	00030024 	.word	0x00030024
   1d648:	0002b6e9 	.word	0x0002b6e9
   1d64c:	0002ffe0 	.word	0x0002ffe0
   1d650:	4002a000 	.word	0x4002a000

0001d654 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1d656:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d658:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1d65a:	4b12      	ldr	r3, [pc, #72]	; (1d6a4 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1d65c:	4d12      	ldr	r5, [pc, #72]	; (1d6a8 <nrfx_ipc_irq_handler+0x54>)
   1d65e:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1d662:	b904      	cbnz	r4, 1d666 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1d664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1d666:	fa94 f0a4 	rbit	r0, r4
   1d66a:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1d66e:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1d672:	280f      	cmp	r0, #15
   1d674:	ea24 0403 	bic.w	r4, r4, r3
   1d678:	dd0b      	ble.n	1d692 <nrfx_ipc_irq_handler+0x3e>
   1d67a:	490c      	ldr	r1, [pc, #48]	; (1d6ac <nrfx_ipc_irq_handler+0x58>)
   1d67c:	480c      	ldr	r0, [pc, #48]	; (1d6b0 <nrfx_ipc_irq_handler+0x5c>)
   1d67e:	f240 13e7 	movw	r3, #487	; 0x1e7
   1d682:	4a0c      	ldr	r2, [pc, #48]	; (1d6b4 <nrfx_ipc_irq_handler+0x60>)
   1d684:	f007 fb4b 	bl	24d1e <assert_print>
   1d688:	f240 11e7 	movw	r1, #487	; 0x1e7
   1d68c:	4809      	ldr	r0, [pc, #36]	; (1d6b4 <nrfx_ipc_irq_handler+0x60>)
   1d68e:	f007 fb3f 	bl	24d10 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d692:	4b09      	ldr	r3, [pc, #36]	; (1d6b8 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1d694:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d696:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1d698:	682b      	ldr	r3, [r5, #0]
   1d69a:	2b00      	cmp	r3, #0
   1d69c:	d0e1      	beq.n	1d662 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1d69e:	68a9      	ldr	r1, [r5, #8]
   1d6a0:	4798      	blx	r3
   1d6a2:	e7de      	b.n	1d662 <nrfx_ipc_irq_handler+0xe>
   1d6a4:	4002a000 	.word	0x4002a000
   1d6a8:	200213dc 	.word	0x200213dc
   1d6ac:	0002c619 	.word	0x0002c619
   1d6b0:	0002b6e9 	.word	0x0002b6e9
   1d6b4:	0002c5e7 	.word	0x0002c5e7
   1d6b8:	4002a100 	.word	0x4002a100

0001d6bc <nvmc_word_write>:
   1d6bc:	4a04      	ldr	r2, [pc, #16]	; (1d6d0 <nvmc_word_write+0x14>)
   1d6be:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1d6c2:	07db      	lsls	r3, r3, #31
   1d6c4:	d5fb      	bpl.n	1d6be <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1d6c6:	6001      	str	r1, [r0, #0]
   1d6c8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1d6cc:	4770      	bx	lr
   1d6ce:	bf00      	nop
   1d6d0:	40039000 	.word	0x40039000

0001d6d4 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d6d4:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1d6d8:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d6da:	d30b      	bcc.n	1d6f4 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1d6dc:	4910      	ldr	r1, [pc, #64]	; (1d720 <nrfx_nvmc_page_erase+0x4c>)
   1d6de:	4811      	ldr	r0, [pc, #68]	; (1d724 <nrfx_nvmc_page_erase+0x50>)
   1d6e0:	f44f 7383 	mov.w	r3, #262	; 0x106
   1d6e4:	4a10      	ldr	r2, [pc, #64]	; (1d728 <nrfx_nvmc_page_erase+0x54>)
   1d6e6:	f007 fb1a 	bl	24d1e <assert_print>
   1d6ea:	f44f 7183 	mov.w	r1, #262	; 0x106
   1d6ee:	480e      	ldr	r0, [pc, #56]	; (1d728 <nrfx_nvmc_page_erase+0x54>)
   1d6f0:	f007 fb0e 	bl	24d10 <assert_post_action>
    return !(addr % flash_page_size_get());
   1d6f4:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1d6f8:	b97b      	cbnz	r3, 1d71a <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1d6fa:	2202      	movs	r2, #2
   1d6fc:	4b0b      	ldr	r3, [pc, #44]	; (1d72c <nrfx_nvmc_page_erase+0x58>)
   1d6fe:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1d702:	f04f 32ff 	mov.w	r2, #4294967295
   1d706:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d708:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1d70c:	07d2      	lsls	r2, r2, #31
   1d70e:	d5fb      	bpl.n	1d708 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1d710:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1d712:	4807      	ldr	r0, [pc, #28]	; (1d730 <nrfx_nvmc_page_erase+0x5c>)
   1d714:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1d718:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1d71a:	4806      	ldr	r0, [pc, #24]	; (1d734 <nrfx_nvmc_page_erase+0x60>)
   1d71c:	e7fc      	b.n	1d718 <nrfx_nvmc_page_erase+0x44>
   1d71e:	bf00      	nop
   1d720:	000300ad 	.word	0x000300ad
   1d724:	0002b6e9 	.word	0x0002b6e9
   1d728:	00030051 	.word	0x00030051
   1d72c:	40039000 	.word	0x40039000
   1d730:	0bad0000 	.word	0x0bad0000
   1d734:	0bad000a 	.word	0x0bad000a

0001d738 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d738:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1d73c:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d73e:	d30b      	bcc.n	1d758 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1d740:	4910      	ldr	r1, [pc, #64]	; (1d784 <nrfx_nvmc_word_write+0x4c>)
   1d742:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1d746:	4a10      	ldr	r2, [pc, #64]	; (1d788 <nrfx_nvmc_word_write+0x50>)
   1d748:	4810      	ldr	r0, [pc, #64]	; (1d78c <nrfx_nvmc_word_write+0x54>)
   1d74a:	f007 fae8 	bl	24d1e <assert_print>
   1d74e:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1d752:	480d      	ldr	r0, [pc, #52]	; (1d788 <nrfx_nvmc_word_write+0x50>)
   1d754:	f007 fadc 	bl	24d10 <assert_post_action>
   1d758:	f010 0403 	ands.w	r4, r0, #3
   1d75c:	d009      	beq.n	1d772 <nrfx_nvmc_word_write+0x3a>
   1d75e:	490c      	ldr	r1, [pc, #48]	; (1d790 <nrfx_nvmc_word_write+0x58>)
   1d760:	f240 1395 	movw	r3, #405	; 0x195
   1d764:	4a08      	ldr	r2, [pc, #32]	; (1d788 <nrfx_nvmc_word_write+0x50>)
   1d766:	4809      	ldr	r0, [pc, #36]	; (1d78c <nrfx_nvmc_word_write+0x54>)
   1d768:	f007 fad9 	bl	24d1e <assert_print>
   1d76c:	f240 1195 	movw	r1, #405	; 0x195
   1d770:	e7ef      	b.n	1d752 <nrfx_nvmc_word_write+0x1a>
   1d772:	2301      	movs	r3, #1
   1d774:	4d07      	ldr	r5, [pc, #28]	; (1d794 <nrfx_nvmc_word_write+0x5c>)
   1d776:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1d77a:	f7ff ff9f 	bl	1d6bc <nvmc_word_write>
   1d77e:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1d782:	bd38      	pop	{r3, r4, r5, pc}
   1d784:	000300c7 	.word	0x000300c7
   1d788:	00030051 	.word	0x00030051
   1d78c:	0002b6e9 	.word	0x0002b6e9
   1d790:	000300e1 	.word	0x000300e1
   1d794:	40039000 	.word	0x40039000

0001d798 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1d798:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1d79a:	4d43      	ldr	r5, [pc, #268]	; (1d8a8 <qspi_xfer+0x110>)
   1d79c:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1d7a0:	b94c      	cbnz	r4, 1d7b6 <qspi_xfer+0x1e>
   1d7a2:	4942      	ldr	r1, [pc, #264]	; (1d8ac <qspi_xfer+0x114>)
   1d7a4:	2368      	movs	r3, #104	; 0x68
   1d7a6:	4a42      	ldr	r2, [pc, #264]	; (1d8b0 <qspi_xfer+0x118>)
   1d7a8:	4842      	ldr	r0, [pc, #264]	; (1d8b4 <qspi_xfer+0x11c>)
   1d7aa:	f007 fab8 	bl	24d1e <assert_print>
   1d7ae:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1d7b0:	483f      	ldr	r0, [pc, #252]	; (1d8b0 <qspi_xfer+0x118>)
   1d7b2:	f007 faad 	bl	24d10 <assert_post_action>
   1d7b6:	b938      	cbnz	r0, 1d7c8 <qspi_xfer+0x30>
   1d7b8:	493f      	ldr	r1, [pc, #252]	; (1d8b8 <qspi_xfer+0x120>)
   1d7ba:	2369      	movs	r3, #105	; 0x69
   1d7bc:	4a3c      	ldr	r2, [pc, #240]	; (1d8b0 <qspi_xfer+0x118>)
   1d7be:	483d      	ldr	r0, [pc, #244]	; (1d8b4 <qspi_xfer+0x11c>)
   1d7c0:	f007 faad 	bl	24d1e <assert_print>
   1d7c4:	2169      	movs	r1, #105	; 0x69
   1d7c6:	e7f3      	b.n	1d7b0 <qspi_xfer+0x18>
   1d7c8:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1d7cc:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1d7d0:	d165      	bne.n	1d89e <qspi_xfer+0x106>
   1d7d2:	0786      	lsls	r6, r0, #30
   1d7d4:	d163      	bne.n	1d89e <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1d7d6:	2c01      	cmp	r4, #1
   1d7d8:	d001      	beq.n	1d7de <qspi_xfer+0x46>
   1d7da:	429c      	cmp	r4, r3
   1d7dc:	d161      	bne.n	1d8a2 <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1d7de:	682c      	ldr	r4, [r5, #0]
   1d7e0:	bb04      	cbnz	r4, 1d824 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d7e2:	2b02      	cmp	r3, #2
   1d7e4:	4b35      	ldr	r3, [pc, #212]	; (1d8bc <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1d7e6:	bf0b      	itete	eq
   1d7e8:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1d7ec:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d7f0:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d7f4:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1d7f8:	bf0b      	itete	eq
   1d7fa:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1d7fe:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1d802:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1d804:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d806:	2100      	movs	r1, #0
   1d808:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d80c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1d810:	2201      	movs	r2, #1
   1d812:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1d816:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d818:	4a28      	ldr	r2, [pc, #160]	; (1d8bc <qspi_xfer+0x124>)
   1d81a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1d81e:	2b00      	cmp	r3, #0
   1d820:	d0fb      	beq.n	1d81a <qspi_xfer+0x82>
   1d822:	e00d      	b.n	1d840 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1d824:	68ae      	ldr	r6, [r5, #8]
   1d826:	4c25      	ldr	r4, [pc, #148]	; (1d8bc <qspi_xfer+0x124>)
   1d828:	b166      	cbz	r6, 1d844 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d82a:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1d82c:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1d82e:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1d830:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d832:	d12d      	bne.n	1d890 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1d834:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d838:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1d83c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1d840:	481f      	ldr	r0, [pc, #124]	; (1d8c0 <qspi_xfer+0x128>)
}
   1d842:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d844:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1d846:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1d84a:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1d84c:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1d84e:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1d850:	bf0c      	ite	eq
   1d852:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1d856:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d85a:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d85e:	bf0b      	itete	eq
   1d860:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d864:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1d868:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1d86c:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1d870:	bf08      	it	eq
   1d872:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d874:	4911      	ldr	r1, [pc, #68]	; (1d8bc <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1d876:	bf18      	it	ne
   1d878:	2304      	movne	r3, #4
   1d87a:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1d87e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d884:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1d888:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d88c:	601a      	str	r2, [r3, #0]
}
   1d88e:	e7d7      	b.n	1d840 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1d890:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d894:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1d898:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1d89c:	e7d0      	b.n	1d840 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1d89e:	4809      	ldr	r0, [pc, #36]	; (1d8c4 <qspi_xfer+0x12c>)
   1d8a0:	e7cf      	b.n	1d842 <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1d8a2:	4809      	ldr	r0, [pc, #36]	; (1d8c8 <qspi_xfer+0x130>)
   1d8a4:	e7cd      	b.n	1d842 <qspi_xfer+0xaa>
   1d8a6:	bf00      	nop
   1d8a8:	200213e8 	.word	0x200213e8
   1d8ac:	00030146 	.word	0x00030146
   1d8b0:	0003010a 	.word	0x0003010a
   1d8b4:	0002b6e9 	.word	0x0002b6e9
   1d8b8:	00030172 	.word	0x00030172
   1d8bc:	4002b000 	.word	0x4002b000
   1d8c0:	0bad0000 	.word	0x0bad0000
   1d8c4:	0bad000a 	.word	0x0bad000a
   1d8c8:	0bad000b 	.word	0x0bad000b

0001d8cc <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1d8cc:	b538      	push	{r3, r4, r5, lr}
   1d8ce:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8d0:	4d06      	ldr	r5, [pc, #24]	; (1d8ec <qspi_ready_wait+0x20>)
   1d8d2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1d8d6:	b933      	cbnz	r3, 1d8e6 <qspi_ready_wait+0x1a>
   1d8d8:	200a      	movs	r0, #10
   1d8da:	f00a ff85 	bl	287e8 <nrfx_busy_wait>
   1d8de:	3c01      	subs	r4, #1
   1d8e0:	d1f7      	bne.n	1d8d2 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1d8e2:	4803      	ldr	r0, [pc, #12]	; (1d8f0 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1d8e4:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1d8e6:	4803      	ldr	r0, [pc, #12]	; (1d8f4 <qspi_ready_wait+0x28>)
   1d8e8:	e7fc      	b.n	1d8e4 <qspi_ready_wait+0x18>
   1d8ea:	bf00      	nop
   1d8ec:	4002b000 	.word	0x4002b000
   1d8f0:	0bad0007 	.word	0x0bad0007
   1d8f4:	0bad0000 	.word	0x0bad0000

0001d8f8 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1d8f8:	4b08      	ldr	r3, [pc, #32]	; (1d91c <qspi_event_xfer_handle.constprop.0+0x24>)
   1d8fa:	689a      	ldr	r2, [r3, #8]
   1d8fc:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1d8fe:	691a      	ldr	r2, [r3, #16]
   1d900:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1d902:	699a      	ldr	r2, [r3, #24]
   1d904:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1d906:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1d908:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1d90a:	b132      	cbz	r2, 1d91a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1d90c:	695a      	ldr	r2, [r3, #20]
   1d90e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1d910:	69da      	ldr	r2, [r3, #28]
   1d912:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1d914:	2200      	movs	r2, #0
   1d916:	60da      	str	r2, [r3, #12]
   1d918:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1d91a:	4770      	bx	lr
   1d91c:	200213e8 	.word	0x200213e8

0001d920 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1d920:	b508      	push	{r3, lr}
    switch (port)
   1d922:	0943      	lsrs	r3, r0, #5
   1d924:	d00d      	beq.n	1d942 <nrf_gpio_cfg.constprop.0+0x22>
   1d926:	2b01      	cmp	r3, #1
   1d928:	d01e      	beq.n	1d968 <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d92a:	4914      	ldr	r1, [pc, #80]	; (1d97c <nrf_gpio_cfg.constprop.0+0x5c>)
   1d92c:	4814      	ldr	r0, [pc, #80]	; (1d980 <nrf_gpio_cfg.constprop.0+0x60>)
   1d92e:	f240 2347 	movw	r3, #583	; 0x247
   1d932:	4a14      	ldr	r2, [pc, #80]	; (1d984 <nrf_gpio_cfg.constprop.0+0x64>)
   1d934:	f007 f9f3 	bl	24d1e <assert_print>
   1d938:	f240 2147 	movw	r1, #583	; 0x247
   1d93c:	4811      	ldr	r0, [pc, #68]	; (1d984 <nrf_gpio_cfg.constprop.0+0x64>)
   1d93e:	f007 f9e7 	bl	24d10 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1d942:	f04f 33ff 	mov.w	r3, #4294967295
   1d946:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d948:	07da      	lsls	r2, r3, #31
   1d94a:	d5ee      	bpl.n	1d92a <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1d94c:	4a0e      	ldr	r2, [pc, #56]	; (1d988 <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d94e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1d952:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d956:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1d95a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1d95e:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1d962:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1d966:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1d968:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d96c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d970:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d972:	07db      	lsls	r3, r3, #31
   1d974:	d5d9      	bpl.n	1d92a <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1d976:	4a05      	ldr	r2, [pc, #20]	; (1d98c <nrf_gpio_cfg.constprop.0+0x6c>)
   1d978:	e7e9      	b.n	1d94e <nrf_gpio_cfg.constprop.0+0x2e>
   1d97a:	bf00      	nop
   1d97c:	0002f64c 	.word	0x0002f64c
   1d980:	0002b6e9 	.word	0x0002b6e9
   1d984:	0002f619 	.word	0x0002f619
   1d988:	40842500 	.word	0x40842500
   1d98c:	40842800 	.word	0x40842800

0001d990 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1d990:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1d992:	4b0e      	ldr	r3, [pc, #56]	; (1d9cc <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1d994:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1d996:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1d99a:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1d99e:	2807      	cmp	r0, #7
   1d9a0:	d813      	bhi.n	1d9ca <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1d9a2:	e8df f000 	tbb	[pc, r0]
   1d9a6:	0f11      	.short	0x0f11
   1d9a8:	080a0b0d 	.word	0x080a0b0d
   1d9ac:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1d9ae:	0e10      	lsrs	r0, r2, #24
   1d9b0:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1d9b2:	0c10      	lsrs	r0, r2, #16
   1d9b4:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1d9b6:	0a10      	lsrs	r0, r2, #8
   1d9b8:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1d9ba:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1d9bc:	0e1a      	lsrs	r2, r3, #24
   1d9be:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1d9c0:	0c1a      	lsrs	r2, r3, #16
   1d9c2:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1d9c4:	0a1a      	lsrs	r2, r3, #8
   1d9c6:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1d9c8:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1d9ca:	bd10      	pop	{r4, pc}
   1d9cc:	4002b000 	.word	0x4002b000

0001d9d0 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1d9d0:	3802      	subs	r0, #2
   1d9d2:	2807      	cmp	r0, #7
   1d9d4:	d81f      	bhi.n	1da16 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1d9d6:	e8df f000 	tbb	[pc, r0]
   1d9da:	2729      	.short	0x2729
   1d9dc:	21231125 	.word	0x21231125
   1d9e0:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1d9e2:	79cb      	ldrb	r3, [r1, #7]
   1d9e4:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1d9e6:	798a      	ldrb	r2, [r1, #6]
   1d9e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1d9ec:	794a      	ldrb	r2, [r1, #5]
   1d9ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1d9f2:	790a      	ldrb	r2, [r1, #4]
   1d9f4:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1d9f6:	4a0e      	ldr	r2, [pc, #56]	; (1da30 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1d9f8:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1d9fc:	78cb      	ldrb	r3, [r1, #3]
   1d9fe:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1da00:	788a      	ldrb	r2, [r1, #2]
   1da02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1da06:	784a      	ldrb	r2, [r1, #1]
   1da08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1da0c:	780a      	ldrb	r2, [r1, #0]
   1da0e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1da10:	4a07      	ldr	r2, [pc, #28]	; (1da30 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1da12:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1da16:	4770      	bx	lr
    switch (length)
   1da18:	2300      	movs	r3, #0
   1da1a:	e7e4      	b.n	1d9e6 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1da1c:	2300      	movs	r3, #0
   1da1e:	e7e5      	b.n	1d9ec <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1da20:	2300      	movs	r3, #0
   1da22:	e7e6      	b.n	1d9f2 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1da24:	2300      	movs	r3, #0
   1da26:	e7eb      	b.n	1da00 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1da28:	2300      	movs	r3, #0
   1da2a:	e7ec      	b.n	1da06 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1da2c:	2300      	movs	r3, #0
   1da2e:	e7ed      	b.n	1da0c <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1da30:	4002b000 	.word	0x4002b000

0001da34 <nrfx_qspi_init>:
{
   1da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da36:	460d      	mov	r5, r1
   1da38:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1da3a:	4604      	mov	r4, r0
   1da3c:	b958      	cbnz	r0, 1da56 <nrfx_qspi_init+0x22>
   1da3e:	496e      	ldr	r1, [pc, #440]	; (1dbf8 <nrfx_qspi_init+0x1c4>)
   1da40:	486e      	ldr	r0, [pc, #440]	; (1dbfc <nrfx_qspi_init+0x1c8>)
   1da42:	f44f 7388 	mov.w	r3, #272	; 0x110
   1da46:	4a6e      	ldr	r2, [pc, #440]	; (1dc00 <nrfx_qspi_init+0x1cc>)
   1da48:	f007 f969 	bl	24d1e <assert_print>
   1da4c:	f44f 7188 	mov.w	r1, #272	; 0x110
   1da50:	486b      	ldr	r0, [pc, #428]	; (1dc00 <nrfx_qspi_init+0x1cc>)
   1da52:	f007 f95d 	bl	24d10 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1da56:	4f6b      	ldr	r7, [pc, #428]	; (1dc04 <nrfx_qspi_init+0x1d0>)
   1da58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1da5c:	2b00      	cmp	r3, #0
   1da5e:	f040 80c6 	bne.w	1dbee <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1da62:	7cc2      	ldrb	r2, [r0, #19]
   1da64:	b112      	cbz	r2, 1da6c <nrfx_qspi_init+0x38>
   1da66:	7d03      	ldrb	r3, [r0, #20]
   1da68:	2b00      	cmp	r3, #0
   1da6a:	d170      	bne.n	1db4e <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1da6c:	7920      	ldrb	r0, [r4, #4]
   1da6e:	28ff      	cmp	r0, #255	; 0xff
   1da70:	f000 80bf 	beq.w	1dbf2 <nrfx_qspi_init+0x1be>
   1da74:	7963      	ldrb	r3, [r4, #5]
   1da76:	2bff      	cmp	r3, #255	; 0xff
   1da78:	f000 80bb 	beq.w	1dbf2 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1da7c:	79a3      	ldrb	r3, [r4, #6]
   1da7e:	2bff      	cmp	r3, #255	; 0xff
   1da80:	f000 80b7 	beq.w	1dbf2 <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1da84:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1da86:	29ff      	cmp	r1, #255	; 0xff
   1da88:	f000 80b3 	beq.w	1dbf2 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1da8c:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1da8e:	f8df c178 	ldr.w	ip, [pc, #376]	; 1dc08 <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1da92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1da96:	4563      	cmp	r3, ip
   1da98:	f040 80ab 	bne.w	1dbf2 <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1da9c:	290e      	cmp	r1, #14
   1da9e:	f040 80a8 	bne.w	1dbf2 <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1daa2:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1daa4:	2bff      	cmp	r3, #255	; 0xff
   1daa6:	d002      	beq.n	1daae <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1daa8:	2b0f      	cmp	r3, #15
   1daaa:	f040 80a2 	bne.w	1dbf2 <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1daae:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1dab0:	2bff      	cmp	r3, #255	; 0xff
   1dab2:	d002      	beq.n	1daba <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1dab4:	2b10      	cmp	r3, #16
   1dab6:	f040 809c 	bne.w	1dbf2 <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1daba:	b9d2      	cbnz	r2, 1daf2 <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1dabc:	2103      	movs	r1, #3
   1dabe:	f7ff ff2f 	bl	1d920 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1dac2:	2103      	movs	r1, #3
   1dac4:	7960      	ldrb	r0, [r4, #5]
   1dac6:	f7ff ff2b 	bl	1d920 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1daca:	2103      	movs	r1, #3
   1dacc:	79a0      	ldrb	r0, [r4, #6]
   1dace:	f7ff ff27 	bl	1d920 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1dad2:	79e0      	ldrb	r0, [r4, #7]
   1dad4:	2103      	movs	r1, #3
   1dad6:	f7ff ff23 	bl	1d920 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1dada:	7a20      	ldrb	r0, [r4, #8]
   1dadc:	28ff      	cmp	r0, #255	; 0xff
   1dade:	d002      	beq.n	1dae6 <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1dae0:	2103      	movs	r1, #3
   1dae2:	f7ff ff1d 	bl	1d920 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1dae6:	7a60      	ldrb	r0, [r4, #9]
   1dae8:	28ff      	cmp	r0, #255	; 0xff
   1daea:	d002      	beq.n	1daf2 <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1daec:	2103      	movs	r1, #3
   1daee:	f7ff ff17 	bl	1d920 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1daf2:	7d23      	ldrb	r3, [r4, #20]
   1daf4:	bb5b      	cbnz	r3, 1db4e <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1daf6:	7923      	ldrb	r3, [r4, #4]
   1daf8:	2bff      	cmp	r3, #255	; 0xff
   1dafa:	bf14      	ite	ne
   1dafc:	461a      	movne	r2, r3
   1dafe:	f04f 32ff 	moveq.w	r2, #4294967295
   1db02:	4b42      	ldr	r3, [pc, #264]	; (1dc0c <nrfx_qspi_init+0x1d8>)
   1db04:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1db08:	7962      	ldrb	r2, [r4, #5]
   1db0a:	2aff      	cmp	r2, #255	; 0xff
   1db0c:	bf08      	it	eq
   1db0e:	f04f 32ff 	moveq.w	r2, #4294967295
   1db12:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1db16:	79a2      	ldrb	r2, [r4, #6]
   1db18:	2aff      	cmp	r2, #255	; 0xff
   1db1a:	bf08      	it	eq
   1db1c:	f04f 32ff 	moveq.w	r2, #4294967295
   1db20:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1db24:	79e2      	ldrb	r2, [r4, #7]
   1db26:	2aff      	cmp	r2, #255	; 0xff
   1db28:	bf08      	it	eq
   1db2a:	f04f 32ff 	moveq.w	r2, #4294967295
   1db2e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1db32:	7a22      	ldrb	r2, [r4, #8]
   1db34:	2aff      	cmp	r2, #255	; 0xff
   1db36:	bf08      	it	eq
   1db38:	f04f 32ff 	moveq.w	r2, #4294967295
   1db3c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1db40:	7a62      	ldrb	r2, [r4, #9]
   1db42:	2aff      	cmp	r2, #255	; 0xff
   1db44:	bf08      	it	eq
   1db46:	f04f 32ff 	moveq.w	r2, #4294967295
   1db4a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1db4e:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1db50:	4a2e      	ldr	r2, [pc, #184]	; (1dc0c <nrfx_qspi_init+0x1d8>)
   1db52:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1db56:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1db58:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1db5a:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1db5c:	019b      	lsls	r3, r3, #6
   1db5e:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1db62:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1db64:	7b61      	ldrb	r1, [r4, #13]
   1db66:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1db6a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1db6e:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1db70:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1db74:	bbb1      	cbnz	r1, 1dbe4 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1db76:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1db7a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1db7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1db82:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1db86:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1db8a:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1db8c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1db90:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1db94:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1db96:	7be1      	ldrb	r1, [r4, #15]
   1db98:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1db9c:	7c21      	ldrb	r1, [r4, #16]
   1db9e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1dba2:	7c61      	ldrb	r1, [r4, #17]
   1dba4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1dba8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1dbac:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1dbae:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1dbb2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1dbb6:	2301      	movs	r3, #1
   1dbb8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1dbbc:	b115      	cbz	r5, 1dbc4 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1dbbe:	202b      	movs	r0, #43	; 0x2b
   1dbc0:	f7f2 fab0 	bl	10124 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1dbc4:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1dbc6:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1dbc8:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1dbcc:	4b0f      	ldr	r3, [pc, #60]	; (1dc0c <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1dbce:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1dbd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbd6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbda:	601a      	str	r2, [r3, #0]
}
   1dbdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1dbe0:	f7ff be74 	b.w	1d8cc <qspi_ready_wait>
        regval &= ~(1 << 17);
   1dbe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1dbe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1dbec:	e7c5      	b.n	1db7a <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1dbee:	4808      	ldr	r0, [pc, #32]	; (1dc10 <nrfx_qspi_init+0x1dc>)
}
   1dbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1dbf2:	4808      	ldr	r0, [pc, #32]	; (1dc14 <nrfx_qspi_init+0x1e0>)
   1dbf4:	e7fc      	b.n	1dbf0 <nrfx_qspi_init+0x1bc>
   1dbf6:	bf00      	nop
   1dbf8:	0003001b 	.word	0x0003001b
   1dbfc:	0002b6e9 	.word	0x0002b6e9
   1dc00:	0003010a 	.word	0x0003010a
   1dc04:	200213e8 	.word	0x200213e8
   1dc08:	000d1211 	.word	0x000d1211
   1dc0c:	4002b000 	.word	0x4002b000
   1dc10:	0bad0005 	.word	0x0bad0005
   1dc14:	0bad0004 	.word	0x0bad0004

0001dc18 <nrfx_qspi_cinstr_xfer>:
{
   1dc18:	b570      	push	{r4, r5, r6, lr}
   1dc1a:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1dc1c:	4a26      	ldr	r2, [pc, #152]	; (1dcb8 <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1dc1e:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1dc20:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1dc24:	b95a      	cbnz	r2, 1dc3e <nrfx_qspi_cinstr_xfer+0x26>
   1dc26:	4925      	ldr	r1, [pc, #148]	; (1dcbc <nrfx_qspi_cinstr_xfer+0xa4>)
   1dc28:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1dc2c:	4a24      	ldr	r2, [pc, #144]	; (1dcc0 <nrfx_qspi_cinstr_xfer+0xa8>)
   1dc2e:	4825      	ldr	r0, [pc, #148]	; (1dcc4 <nrfx_qspi_cinstr_xfer+0xac>)
   1dc30:	f007 f875 	bl	24d1e <assert_print>
   1dc34:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1dc38:	4821      	ldr	r0, [pc, #132]	; (1dcc0 <nrfx_qspi_cinstr_xfer+0xa8>)
   1dc3a:	f007 f869 	bl	24d10 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1dc3e:	2a01      	cmp	r2, #1
   1dc40:	d137      	bne.n	1dcb2 <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc42:	2200      	movs	r2, #0
   1dc44:	4e20      	ldr	r6, [pc, #128]	; (1dcc8 <nrfx_qspi_cinstr_xfer+0xb0>)
   1dc46:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1dc4a:	b111      	cbz	r1, 1dc52 <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1dc4c:	7840      	ldrb	r0, [r0, #1]
   1dc4e:	f7ff febf 	bl	1d9d0 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1dc52:	2301      	movs	r3, #1
   1dc54:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1dc58:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1dc5a:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1dc5c:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1dc5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1dc62:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1dc64:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1dc66:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1dc68:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1dc6c:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1dc6e:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1dc72:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1dc74:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1dc78:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1dc7c:	f7ff fe26 	bl	1d8cc <qspi_ready_wait>
   1dc80:	4b12      	ldr	r3, [pc, #72]	; (1dccc <nrfx_qspi_cinstr_xfer+0xb4>)
   1dc82:	4298      	cmp	r0, r3
   1dc84:	d10b      	bne.n	1dc9e <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1dc86:	792b      	ldrb	r3, [r5, #4]
   1dc88:	b993      	cbnz	r3, 1dcb0 <nrfx_qspi_cinstr_xfer+0x98>
   1dc8a:	4911      	ldr	r1, [pc, #68]	; (1dcd0 <nrfx_qspi_cinstr_xfer+0xb8>)
   1dc8c:	f240 136b 	movw	r3, #363	; 0x16b
   1dc90:	4a0b      	ldr	r2, [pc, #44]	; (1dcc0 <nrfx_qspi_cinstr_xfer+0xa8>)
   1dc92:	480c      	ldr	r0, [pc, #48]	; (1dcc4 <nrfx_qspi_cinstr_xfer+0xac>)
   1dc94:	f007 f843 	bl	24d1e <assert_print>
   1dc98:	f240 116b 	movw	r1, #363	; 0x16b
   1dc9c:	e7cc      	b.n	1dc38 <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc9e:	2300      	movs	r3, #0
   1dca0:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1dca4:	b11c      	cbz	r4, 1dcae <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1dca6:	4621      	mov	r1, r4
   1dca8:	7868      	ldrb	r0, [r5, #1]
   1dcaa:	f7ff fe71 	bl	1d990 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1dcae:	4809      	ldr	r0, [pc, #36]	; (1dcd4 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1dcb0:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1dcb2:	4809      	ldr	r0, [pc, #36]	; (1dcd8 <nrfx_qspi_cinstr_xfer+0xc0>)
   1dcb4:	e7fc      	b.n	1dcb0 <nrfx_qspi_cinstr_xfer+0x98>
   1dcb6:	bf00      	nop
   1dcb8:	200213e8 	.word	0x200213e8
   1dcbc:	00030146 	.word	0x00030146
   1dcc0:	0003010a 	.word	0x0003010a
   1dcc4:	0002b6e9 	.word	0x0002b6e9
   1dcc8:	4002b000 	.word	0x4002b000
   1dccc:	0bad0007 	.word	0x0bad0007
   1dcd0:	0003018a 	.word	0x0003018a
   1dcd4:	0bad0000 	.word	0x0bad0000
   1dcd8:	0bad000b 	.word	0x0bad000b

0001dcdc <nrfx_qspi_mem_busy_check>:
{
   1dcdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   1dcde:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   1dce0:	4a0c      	ldr	r2, [pc, #48]	; (1dd14 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1dce2:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   1dce4:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1dce6:	f10d 0207 	add.w	r2, sp, #7
   1dcea:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   1dcec:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   1dcf0:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1dcf4:	f7ff ff90 	bl	1dc18 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1dcf8:	4b07      	ldr	r3, [pc, #28]	; (1dd18 <nrfx_qspi_mem_busy_check+0x3c>)
   1dcfa:	4298      	cmp	r0, r3
   1dcfc:	d106      	bne.n	1dd0c <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   1dcfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   1dd02:	f013 0f01 	tst.w	r3, #1
   1dd06:	4b05      	ldr	r3, [pc, #20]	; (1dd1c <nrfx_qspi_mem_busy_check+0x40>)
   1dd08:	bf18      	it	ne
   1dd0a:	4618      	movne	r0, r3
}
   1dd0c:	b005      	add	sp, #20
   1dd0e:	f85d fb04 	ldr.w	pc, [sp], #4
   1dd12:	bf00      	nop
   1dd14:	01000205 	.word	0x01000205
   1dd18:	0bad0000 	.word	0x0bad0000
   1dd1c:	0bad000b 	.word	0x0bad000b

0001dd20 <nrfx_qspi_uninit>:
{
   1dd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1dd24:	4e29      	ldr	r6, [pc, #164]	; (1ddcc <nrfx_qspi_uninit+0xac>)
   1dd26:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1dd2a:	b95b      	cbnz	r3, 1dd44 <nrfx_qspi_uninit+0x24>
   1dd2c:	4928      	ldr	r1, [pc, #160]	; (1ddd0 <nrfx_qspi_uninit+0xb0>)
   1dd2e:	4829      	ldr	r0, [pc, #164]	; (1ddd4 <nrfx_qspi_uninit+0xb4>)
   1dd30:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1dd34:	4a28      	ldr	r2, [pc, #160]	; (1ddd8 <nrfx_qspi_uninit+0xb8>)
   1dd36:	f006 fff2 	bl	24d1e <assert_print>
   1dd3a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1dd3e:	4826      	ldr	r0, [pc, #152]	; (1ddd8 <nrfx_qspi_uninit+0xb8>)
   1dd40:	f006 ffe6 	bl	24d10 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1dd44:	202b      	movs	r0, #43	; 0x2b
   1dd46:	f7f2 f9fb 	bl	10140 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   1dd4a:	4b24      	ldr	r3, [pc, #144]	; (1dddc <nrfx_qspi_uninit+0xbc>)
   1dd4c:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   1dd50:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1dd54:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   1dd58:	bf04      	itt	eq
   1dd5a:	4a21      	ldreq	r2, [pc, #132]	; (1dde0 <nrfx_qspi_uninit+0xc0>)
   1dd5c:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   1dd60:	2201      	movs	r2, #1
   1dd62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dd66:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1dd68:	2200      	movs	r2, #0
   1dd6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dd6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   1dd72:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   1dd76:	bb22      	cbnz	r2, 1ddc2 <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   1dd78:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   1dd7c:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   1dd80:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   1dd82:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   1dd86:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   1dd8a:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   1dd8e:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   1dd92:	f00a fdac 	bl	288ee <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   1dd96:	fa5f f089 	uxtb.w	r0, r9
   1dd9a:	f00a fda8 	bl	288ee <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   1dd9e:	fa5f f088 	uxtb.w	r0, r8
   1dda2:	f00a fda4 	bl	288ee <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   1dda6:	b2f8      	uxtb	r0, r7
   1dda8:	f00a fda1 	bl	288ee <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1ddac:	b2e8      	uxtb	r0, r5
   1ddae:	28ff      	cmp	r0, #255	; 0xff
   1ddb0:	b2e4      	uxtb	r4, r4
   1ddb2:	d001      	beq.n	1ddb8 <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   1ddb4:	f00a fd9b 	bl	288ee <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1ddb8:	2cff      	cmp	r4, #255	; 0xff
   1ddba:	d002      	beq.n	1ddc2 <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   1ddbc:	4620      	mov	r0, r4
   1ddbe:	f00a fd96 	bl	288ee <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1ddc2:	2300      	movs	r3, #0
   1ddc4:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1ddc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ddcc:	200213e8 	.word	0x200213e8
   1ddd0:	00030146 	.word	0x00030146
   1ddd4:	0002b6e9 	.word	0x0002b6e9
   1ddd8:	0003010a 	.word	0x0003010a
   1dddc:	4002b000 	.word	0x4002b000
   1dde0:	00030100 	.word	0x00030100

0001dde4 <nrfx_qspi_erase>:
{
   1dde4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1dde6:	4a1a      	ldr	r2, [pc, #104]	; (1de50 <nrfx_qspi_erase+0x6c>)
   1dde8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1ddec:	b95b      	cbnz	r3, 1de06 <nrfx_qspi_erase+0x22>
   1ddee:	4919      	ldr	r1, [pc, #100]	; (1de54 <nrfx_qspi_erase+0x70>)
   1ddf0:	4819      	ldr	r0, [pc, #100]	; (1de58 <nrfx_qspi_erase+0x74>)
   1ddf2:	f44f 730a 	mov.w	r3, #552	; 0x228
   1ddf6:	4a19      	ldr	r2, [pc, #100]	; (1de5c <nrfx_qspi_erase+0x78>)
   1ddf8:	f006 ff91 	bl	24d1e <assert_print>
   1ddfc:	f44f 710a 	mov.w	r1, #552	; 0x228
   1de00:	4816      	ldr	r0, [pc, #88]	; (1de5c <nrfx_qspi_erase+0x78>)
   1de02:	f006 ff85 	bl	24d10 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   1de06:	078c      	lsls	r4, r1, #30
   1de08:	d11e      	bne.n	1de48 <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   1de0a:	6814      	ldr	r4, [r2, #0]
   1de0c:	b10c      	cbz	r4, 1de12 <nrfx_qspi_erase+0x2e>
   1de0e:	2b01      	cmp	r3, #1
   1de10:	d11c      	bne.n	1de4c <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   1de12:	2304      	movs	r3, #4
   1de14:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   1de18:	4b11      	ldr	r3, [pc, #68]	; (1de60 <nrfx_qspi_erase+0x7c>)
   1de1a:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de1e:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   1de20:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de24:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de28:	2101      	movs	r1, #1
   1de2a:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   1de2c:	6810      	ldr	r0, [r2, #0]
   1de2e:	b940      	cbnz	r0, 1de42 <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1de30:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1de34:	2900      	cmp	r1, #0
   1de36:	d0fb      	beq.n	1de30 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   1de38:	2301      	movs	r3, #1
   1de3a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   1de3e:	4809      	ldr	r0, [pc, #36]	; (1de64 <nrfx_qspi_erase+0x80>)
}
   1de40:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   1de42:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   1de46:	e7fa      	b.n	1de3e <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   1de48:	4807      	ldr	r0, [pc, #28]	; (1de68 <nrfx_qspi_erase+0x84>)
   1de4a:	e7f9      	b.n	1de40 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   1de4c:	4807      	ldr	r0, [pc, #28]	; (1de6c <nrfx_qspi_erase+0x88>)
   1de4e:	e7f7      	b.n	1de40 <nrfx_qspi_erase+0x5c>
   1de50:	200213e8 	.word	0x200213e8
   1de54:	00030146 	.word	0x00030146
   1de58:	0002b6e9 	.word	0x0002b6e9
   1de5c:	0003010a 	.word	0x0003010a
   1de60:	4002b000 	.word	0x4002b000
   1de64:	0bad0000 	.word	0x0bad0000
   1de68:	0bad000a 	.word	0x0bad000a
   1de6c:	0bad000b 	.word	0x0bad000b

0001de70 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   1de70:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1de72:	4b17      	ldr	r3, [pc, #92]	; (1ded0 <nrfx_qspi_irq_handler+0x60>)
   1de74:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1de78:	b1e2      	cbz	r2, 1deb4 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de7a:	2200      	movs	r2, #0
    switch (m_cb.state)
   1de7c:	4c15      	ldr	r4, [pc, #84]	; (1ded4 <nrfx_qspi_irq_handler+0x64>)
   1de7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1de82:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1de86:	2a03      	cmp	r2, #3
   1de88:	d015      	beq.n	1deb6 <nrfx_qspi_irq_handler+0x46>
   1de8a:	2a04      	cmp	r2, #4
   1de8c:	d015      	beq.n	1deba <nrfx_qspi_irq_handler+0x4a>
   1de8e:	2a02      	cmp	r2, #2
   1de90:	d104      	bne.n	1de9c <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   1de92:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1de94:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   1de98:	f7ff fd2e 	bl	1d8f8 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   1de9c:	68a3      	ldr	r3, [r4, #8]
   1de9e:	b913      	cbnz	r3, 1dea6 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1dea0:	2301      	movs	r3, #1
   1dea2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1dea6:	e9d4 3100 	ldrd	r3, r1, [r4]
   1deaa:	2000      	movs	r0, #0
   1deac:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1deae:	2300      	movs	r3, #0
   1deb0:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1deb4:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1deb6:	2302      	movs	r3, #2
   1deb8:	e7ec      	b.n	1de94 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   1deba:	2203      	movs	r2, #3
   1debc:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1dec0:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   1dec4:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   1dec6:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1deca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1dece:	e7e5      	b.n	1de9c <nrfx_qspi_irq_handler+0x2c>
   1ded0:	4002b000 	.word	0x4002b000
   1ded4:	200213e8 	.word	0x200213e8

0001ded8 <nrf_gpio_pin_port_decode>:
{
   1ded8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1deda:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1dedc:	095a      	lsrs	r2, r3, #5
   1dede:	d00d      	beq.n	1defc <nrf_gpio_pin_port_decode+0x24>
   1dee0:	2a01      	cmp	r2, #1
   1dee2:	d013      	beq.n	1df0c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dee4:	490e      	ldr	r1, [pc, #56]	; (1df20 <nrf_gpio_pin_port_decode+0x48>)
   1dee6:	480f      	ldr	r0, [pc, #60]	; (1df24 <nrf_gpio_pin_port_decode+0x4c>)
   1dee8:	f240 2347 	movw	r3, #583	; 0x247
   1deec:	4a0e      	ldr	r2, [pc, #56]	; (1df28 <nrf_gpio_pin_port_decode+0x50>)
   1deee:	f006 ff16 	bl	24d1e <assert_print>
   1def2:	f240 2147 	movw	r1, #583	; 0x247
   1def6:	480c      	ldr	r0, [pc, #48]	; (1df28 <nrf_gpio_pin_port_decode+0x50>)
   1def8:	f006 ff0a 	bl	24d10 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1defc:	f04f 32ff 	mov.w	r2, #4294967295
   1df00:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1df04:	07d9      	lsls	r1, r3, #31
   1df06:	d5ed      	bpl.n	1dee4 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1df08:	4808      	ldr	r0, [pc, #32]	; (1df2c <nrf_gpio_pin_port_decode+0x54>)
   1df0a:	e008      	b.n	1df1e <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1df0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1df10:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1df14:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1df16:	07d2      	lsls	r2, r2, #31
   1df18:	d5e4      	bpl.n	1dee4 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1df1a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1df1c:	4804      	ldr	r0, [pc, #16]	; (1df30 <nrf_gpio_pin_port_decode+0x58>)
}
   1df1e:	bd08      	pop	{r3, pc}
   1df20:	0002f64c 	.word	0x0002f64c
   1df24:	0002b6e9 	.word	0x0002b6e9
   1df28:	0002f619 	.word	0x0002f619
   1df2c:	40842500 	.word	0x40842500
   1df30:	40842800 	.word	0x40842800

0001df34 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1df34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1df38:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   1df3a:	460c      	mov	r4, r1
   1df3c:	b959      	cbnz	r1, 1df56 <nrfx_spim_init+0x22>
   1df3e:	498d      	ldr	r1, [pc, #564]	; (1e174 <nrfx_spim_init+0x240>)
   1df40:	488d      	ldr	r0, [pc, #564]	; (1e178 <nrfx_spim_init+0x244>)
   1df42:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1df46:	4a8d      	ldr	r2, [pc, #564]	; (1e17c <nrfx_spim_init+0x248>)
   1df48:	f006 fee9 	bl	24d1e <assert_print>
   1df4c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1df50:	488a      	ldr	r0, [pc, #552]	; (1e17c <nrfx_spim_init+0x248>)
   1df52:	f006 fedd 	bl	24d10 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1df56:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1df58:	4d89      	ldr	r5, [pc, #548]	; (1e180 <nrfx_spim_init+0x24c>)
   1df5a:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   1df5e:	7f09      	ldrb	r1, [r1, #28]
   1df60:	2900      	cmp	r1, #0
   1df62:	f040 8100 	bne.w	1e166 <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1df66:	2f00      	cmp	r7, #0
   1df68:	f040 80ff 	bne.w	1e16a <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1df6c:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1df70:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   1df72:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1df74:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1df78:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1df7a:	d027      	beq.n	1dfcc <nrfx_spim_init+0x98>
   1df7c:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   1df80:	d124      	bne.n	1dfcc <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1df82:	b119      	cbz	r1, 1df8c <nrfx_spim_init+0x58>
   1df84:	7d20      	ldrb	r0, [r4, #20]
   1df86:	2800      	cmp	r0, #0
   1df88:	f040 80d5 	bne.w	1e136 <nrfx_spim_init+0x202>
   1df8c:	487d      	ldr	r0, [pc, #500]	; (1e184 <nrfx_spim_init+0x250>)
   1df8e:	4581      	cmp	r9, r0
   1df90:	d11c      	bne.n	1dfcc <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1df92:	7820      	ldrb	r0, [r4, #0]
   1df94:	28ff      	cmp	r0, #255	; 0xff
   1df96:	d002      	beq.n	1df9e <nrfx_spim_init+0x6a>
   1df98:	2808      	cmp	r0, #8
   1df9a:	f040 80e8 	bne.w	1e16e <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1df9e:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1dfa0:	28ff      	cmp	r0, #255	; 0xff
   1dfa2:	d002      	beq.n	1dfaa <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1dfa4:	280b      	cmp	r0, #11
   1dfa6:	f040 80e2 	bne.w	1e16e <nrfx_spim_init+0x23a>
   1dfaa:	2eff      	cmp	r6, #255	; 0xff
   1dfac:	d002      	beq.n	1dfb4 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1dfae:	2e0c      	cmp	r6, #12
   1dfb0:	f040 80dd 	bne.w	1e16e <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1dfb4:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1dfb6:	28ff      	cmp	r0, #255	; 0xff
   1dfb8:	d002      	beq.n	1dfc0 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1dfba:	2809      	cmp	r0, #9
   1dfbc:	f040 80d7 	bne.w	1e16e <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1dfc0:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1dfc2:	28ff      	cmp	r0, #255	; 0xff
   1dfc4:	d002      	beq.n	1dfcc <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1dfc6:	280a      	cmp	r0, #10
   1dfc8:	f040 80d1 	bne.w	1e16e <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1dfcc:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1dfd0:	7fab      	ldrb	r3, [r5, #30]
   1dfd2:	f361 0300 	bfi	r3, r1, #0, #1
   1dfd6:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1dfd8:	7922      	ldrb	r2, [r4, #4]
   1dfda:	b2db      	uxtb	r3, r3
   1dfdc:	f362 0341 	bfi	r3, r2, #1, #1
   1dfe0:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   1dfe2:	7c62      	ldrb	r2, [r4, #17]
   1dfe4:	b2db      	uxtb	r3, r3
   1dfe6:	f362 0382 	bfi	r3, r2, #2, #1
   1dfea:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1dfec:	78e3      	ldrb	r3, [r4, #3]
   1dfee:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   1dff0:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1dff2:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   1dff6:	2b00      	cmp	r3, #0
   1dff8:	d142      	bne.n	1e080 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1dffa:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1dffc:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1dffe:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   1e002:	7b23      	ldrb	r3, [r4, #12]
   1e004:	bf08      	it	eq
   1e006:	2703      	moveq	r7, #3
   1e008:	2b01      	cmp	r3, #1
   1e00a:	f200 8096 	bhi.w	1e13a <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1e00e:	f00a fc7b 	bl	28908 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1e012:	2300      	movs	r3, #0
   1e014:	9700      	str	r7, [sp, #0]
   1e016:	7820      	ldrb	r0, [r4, #0]
   1e018:	461a      	mov	r2, r3
   1e01a:	2101      	movs	r1, #1
   1e01c:	f00a fc9c 	bl	28958 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1e020:	7860      	ldrb	r0, [r4, #1]
   1e022:	28ff      	cmp	r0, #255	; 0xff
   1e024:	d008      	beq.n	1e038 <nrfx_spim_init+0x104>
   1e026:	f00a fc6f 	bl	28908 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1e02a:	2201      	movs	r2, #1
   1e02c:	9700      	str	r7, [sp, #0]
   1e02e:	2300      	movs	r3, #0
   1e030:	4611      	mov	r1, r2
   1e032:	7860      	ldrb	r0, [r4, #1]
   1e034:	f00a fc90 	bl	28958 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1e038:	78a0      	ldrb	r0, [r4, #2]
   1e03a:	28ff      	cmp	r0, #255	; 0xff
   1e03c:	d005      	beq.n	1e04a <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   1e03e:	2200      	movs	r2, #0
   1e040:	9700      	str	r7, [sp, #0]
   1e042:	4611      	mov	r1, r2
   1e044:	7ba3      	ldrb	r3, [r4, #14]
   1e046:	f00a fc87 	bl	28958 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1e04a:	78e0      	ldrb	r0, [r4, #3]
   1e04c:	28ff      	cmp	r0, #255	; 0xff
   1e04e:	d00b      	beq.n	1e068 <nrfx_spim_init+0x134>
    if (value == 0)
   1e050:	7923      	ldrb	r3, [r4, #4]
   1e052:	2b00      	cmp	r3, #0
   1e054:	d074      	beq.n	1e140 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   1e056:	f00a fc57 	bl	28908 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1e05a:	2201      	movs	r2, #1
   1e05c:	9700      	str	r7, [sp, #0]
   1e05e:	2300      	movs	r3, #0
   1e060:	4611      	mov	r1, r2
   1e062:	78e0      	ldrb	r0, [r4, #3]
   1e064:	f00a fc78 	bl	28958 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1e068:	7be0      	ldrb	r0, [r4, #15]
   1e06a:	28ff      	cmp	r0, #255	; 0xff
   1e06c:	d008      	beq.n	1e080 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   1e06e:	f00a fc57 	bl	28920 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1e072:	2201      	movs	r2, #1
   1e074:	9700      	str	r7, [sp, #0]
   1e076:	2300      	movs	r3, #0
   1e078:	4611      	mov	r1, r2
   1e07a:	7be0      	ldrb	r0, [r4, #15]
   1e07c:	f00a fc6c 	bl	28958 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1e080:	7d23      	ldrb	r3, [r4, #20]
   1e082:	bb6b      	cbnz	r3, 1e0e0 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1e084:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1e086:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1e088:	2bff      	cmp	r3, #255	; 0xff
   1e08a:	bf18      	it	ne
   1e08c:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1e08e:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1e090:	bf08      	it	eq
   1e092:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1e096:	2bff      	cmp	r3, #255	; 0xff
   1e098:	bf08      	it	eq
   1e09a:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1e09e:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1e0a2:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1e0a6:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1e0aa:	f898 3004 	ldrb.w	r3, [r8, #4]
   1e0ae:	b9bb      	cbnz	r3, 1e0e0 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1e0b0:	78e3      	ldrb	r3, [r4, #3]
   1e0b2:	2bff      	cmp	r3, #255	; 0xff
   1e0b4:	d047      	beq.n	1e146 <nrfx_spim_init+0x212>
   1e0b6:	7c62      	ldrb	r2, [r4, #17]
   1e0b8:	2a00      	cmp	r2, #0
   1e0ba:	d044      	beq.n	1e146 <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1e0bc:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1e0be:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1e0c0:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1e0c4:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1e0c8:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1e0cc:	f898 3004 	ldrb.w	r3, [r8, #4]
   1e0d0:	b933      	cbnz	r3, 1e0e0 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1e0d2:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1e0d4:	2bff      	cmp	r3, #255	; 0xff
   1e0d6:	bf08      	it	eq
   1e0d8:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1e0dc:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1e0e0:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1e0e2:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1e0e6:	68a3      	ldr	r3, [r4, #8]
   1e0e8:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1e0ec:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1e0ee:	7b22      	ldrb	r2, [r4, #12]
   1e0f0:	3b00      	subs	r3, #0
   1e0f2:	bf18      	it	ne
   1e0f4:	2301      	movne	r3, #1
    switch (spi_mode)
   1e0f6:	2a02      	cmp	r2, #2
   1e0f8:	d02f      	beq.n	1e15a <nrfx_spim_init+0x226>
   1e0fa:	2a03      	cmp	r2, #3
   1e0fc:	d030      	beq.n	1e160 <nrfx_spim_init+0x22c>
   1e0fe:	2a01      	cmp	r2, #1
   1e100:	d101      	bne.n	1e106 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1e102:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1e106:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1e10a:	79a3      	ldrb	r3, [r4, #6]
   1e10c:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1e110:	2307      	movs	r3, #7
   1e112:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1e116:	682b      	ldr	r3, [r5, #0]
   1e118:	b12b      	cbz	r3, 1e126 <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1e11a:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1e11e:	f340 3007 	sbfx	r0, r0, #12, #8
   1e122:	f7f1 ffff 	bl	10124 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1e126:	2300      	movs	r3, #0
   1e128:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1e12a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1e12c:	4816      	ldr	r0, [pc, #88]	; (1e188 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1e12e:	772b      	strb	r3, [r5, #28]
}
   1e130:	b003      	add	sp, #12
   1e132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1e136:	4601      	mov	r1, r0
   1e138:	e748      	b.n	1dfcc <nrfx_spim_init+0x98>
   1e13a:	f00a fbf1 	bl	28920 <nrf_gpio_pin_set>
   1e13e:	e768      	b.n	1e012 <nrfx_spim_init+0xde>
   1e140:	f00a fbee 	bl	28920 <nrf_gpio_pin_set>
   1e144:	e789      	b.n	1e05a <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   1e146:	f04f 33ff 	mov.w	r3, #4294967295
   1e14a:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1e14e:	2300      	movs	r3, #0
   1e150:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1e154:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   1e158:	e7b8      	b.n	1e0cc <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1e15a:	f043 0304 	orr.w	r3, r3, #4
        break;
   1e15e:	e7d2      	b.n	1e106 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1e160:	f043 0306 	orr.w	r3, r3, #6
        break;
   1e164:	e7cf      	b.n	1e106 <nrfx_spim_init+0x1d2>
        return err_code;
   1e166:	4809      	ldr	r0, [pc, #36]	; (1e18c <nrfx_spim_init+0x258>)
   1e168:	e7e2      	b.n	1e130 <nrfx_spim_init+0x1fc>
        return err_code;
   1e16a:	4809      	ldr	r0, [pc, #36]	; (1e190 <nrfx_spim_init+0x25c>)
   1e16c:	e7e0      	b.n	1e130 <nrfx_spim_init+0x1fc>
            return err_code;
   1e16e:	4809      	ldr	r0, [pc, #36]	; (1e194 <nrfx_spim_init+0x260>)
   1e170:	e7de      	b.n	1e130 <nrfx_spim_init+0x1fc>
   1e172:	bf00      	nop
   1e174:	0003001b 	.word	0x0003001b
   1e178:	0002b6e9 	.word	0x0002b6e9
   1e17c:	0003019c 	.word	0x0003019c
   1e180:	2002141c 	.word	0x2002141c
   1e184:	4000a000 	.word	0x4000a000
   1e188:	0bad0000 	.word	0x0bad0000
   1e18c:	0bad0005 	.word	0x0bad0005
   1e190:	0bad0003 	.word	0x0bad0003
   1e194:	0bad0004 	.word	0x0bad0004

0001e198 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1e198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1e19c:	4d2e      	ldr	r5, [pc, #184]	; (1e258 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1e19e:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   1e1a2:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1e1a4:	ea4f 1648 	mov.w	r6, r8, lsl #5
   1e1a8:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1e1ac:	f898 301c 	ldrb.w	r3, [r8, #28]
   1e1b0:	b95b      	cbnz	r3, 1e1ca <nrfx_spim_uninit+0x32>
   1e1b2:	492a      	ldr	r1, [pc, #168]	; (1e25c <nrfx_spim_uninit+0xc4>)
   1e1b4:	482a      	ldr	r0, [pc, #168]	; (1e260 <nrfx_spim_uninit+0xc8>)
   1e1b6:	f240 230f 	movw	r3, #527	; 0x20f
   1e1ba:	4a2a      	ldr	r2, [pc, #168]	; (1e264 <nrfx_spim_uninit+0xcc>)
   1e1bc:	f006 fdaf 	bl	24d1e <assert_print>
   1e1c0:	f240 210f 	movw	r1, #527	; 0x20f
   1e1c4:	4827      	ldr	r0, [pc, #156]	; (1e264 <nrfx_spim_uninit+0xcc>)
   1e1c6:	f006 fda3 	bl	24d10 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1e1ca:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1e1cc:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1e1ce:	b1cb      	cbz	r3, 1e204 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1e1d0:	f344 3007 	sbfx	r0, r4, #12, #8
   1e1d4:	f7f1 ffb4 	bl	10140 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1e1d8:	4b23      	ldr	r3, [pc, #140]	; (1e268 <nrfx_spim_uninit+0xd0>)
   1e1da:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1e1de:	f898 301d 	ldrb.w	r3, [r8, #29]
   1e1e2:	b17b      	cbz	r3, 1e204 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e1e4:	2301      	movs	r3, #1
   1e1e6:	f04f 0864 	mov.w	r8, #100	; 0x64
   1e1ea:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e1ec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1e1f0:	b92b      	cbnz	r3, 1e1fe <nrfx_spim_uninit+0x66>
   1e1f2:	2001      	movs	r0, #1
   1e1f4:	f00a faf8 	bl	287e8 <nrfx_busy_wait>
   1e1f8:	f1b8 0801 	subs.w	r8, r8, #1
   1e1fc:	d1f6      	bne.n	1e1ec <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1e1fe:	2200      	movs	r2, #0
   1e200:	19ab      	adds	r3, r5, r6
   1e202:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1e204:	2300      	movs	r3, #0
   1e206:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1e20a:	19ab      	adds	r3, r5, r6
   1e20c:	7f9b      	ldrb	r3, [r3, #30]
   1e20e:	07db      	lsls	r3, r3, #31
   1e210:	d41b      	bmi.n	1e24a <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   1e212:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1e216:	f00a fbbe 	bl	28996 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1e21a:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1e21e:	f00a fbba 	bl	28996 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1e222:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1e226:	f00a fbb6 	bl	28996 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1e22a:	793b      	ldrb	r3, [r7, #4]
   1e22c:	b91b      	cbnz	r3, 1e236 <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   1e22e:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1e232:	f00a fbb0 	bl	28996 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1e236:	19ab      	adds	r3, r5, r6
   1e238:	7fd8      	ldrb	r0, [r3, #31]
   1e23a:	28ff      	cmp	r0, #255	; 0xff
   1e23c:	d005      	beq.n	1e24a <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   1e23e:	2300      	movs	r3, #0
   1e240:	2201      	movs	r2, #1
   1e242:	4619      	mov	r1, r3
   1e244:	9300      	str	r3, [sp, #0]
   1e246:	f00a fb87 	bl	28958 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1e24a:	2300      	movs	r3, #0
   1e24c:	4435      	add	r5, r6
   1e24e:	772b      	strb	r3, [r5, #28]
}
   1e250:	b002      	add	sp, #8
   1e252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e256:	bf00      	nop
   1e258:	2002141c 	.word	0x2002141c
   1e25c:	000301d8 	.word	0x000301d8
   1e260:	0002b6e9 	.word	0x0002b6e9
   1e264:	0003019c 	.word	0x0003019c
   1e268:	00080152 	.word	0x00080152

0001e26c <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1e26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1e270:	4e60      	ldr	r6, [pc, #384]	; (1e3f4 <nrfx_spim_xfer+0x188>)
   1e272:	7903      	ldrb	r3, [r0, #4]
{
   1e274:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1e276:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1e27a:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   1e27e:	4607      	mov	r7, r0
   1e280:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1e282:	b95a      	cbnz	r2, 1e29c <nrfx_spim_xfer+0x30>
   1e284:	495c      	ldr	r1, [pc, #368]	; (1e3f8 <nrfx_spim_xfer+0x18c>)
   1e286:	f240 23de 	movw	r3, #734	; 0x2de
   1e28a:	4a5c      	ldr	r2, [pc, #368]	; (1e3fc <nrfx_spim_xfer+0x190>)
   1e28c:	485c      	ldr	r0, [pc, #368]	; (1e400 <nrfx_spim_xfer+0x194>)
   1e28e:	f006 fd46 	bl	24d1e <assert_print>
   1e292:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   1e296:	4859      	ldr	r0, [pc, #356]	; (1e3fc <nrfx_spim_xfer+0x190>)
   1e298:	f006 fd3a 	bl	24d10 <assert_post_action>
   1e29c:	680a      	ldr	r2, [r1, #0]
   1e29e:	b95a      	cbnz	r2, 1e2b8 <nrfx_spim_xfer+0x4c>
   1e2a0:	684a      	ldr	r2, [r1, #4]
   1e2a2:	b14a      	cbz	r2, 1e2b8 <nrfx_spim_xfer+0x4c>
   1e2a4:	4957      	ldr	r1, [pc, #348]	; (1e404 <nrfx_spim_xfer+0x198>)
   1e2a6:	f240 23df 	movw	r3, #735	; 0x2df
   1e2aa:	4a54      	ldr	r2, [pc, #336]	; (1e3fc <nrfx_spim_xfer+0x190>)
   1e2ac:	4854      	ldr	r0, [pc, #336]	; (1e400 <nrfx_spim_xfer+0x194>)
   1e2ae:	f006 fd36 	bl	24d1e <assert_print>
   1e2b2:	f240 21df 	movw	r1, #735	; 0x2df
   1e2b6:	e7ee      	b.n	1e296 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   1e2b8:	68a2      	ldr	r2, [r4, #8]
   1e2ba:	b96a      	cbnz	r2, 1e2d8 <nrfx_spim_xfer+0x6c>
   1e2bc:	68e2      	ldr	r2, [r4, #12]
   1e2be:	2a00      	cmp	r2, #0
   1e2c0:	f000 8094 	beq.w	1e3ec <nrfx_spim_xfer+0x180>
   1e2c4:	4950      	ldr	r1, [pc, #320]	; (1e408 <nrfx_spim_xfer+0x19c>)
   1e2c6:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   1e2ca:	4a4c      	ldr	r2, [pc, #304]	; (1e3fc <nrfx_spim_xfer+0x190>)
   1e2cc:	484c      	ldr	r0, [pc, #304]	; (1e400 <nrfx_spim_xfer+0x194>)
   1e2ce:	f006 fd26 	bl	24d1e <assert_print>
   1e2d2:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   1e2d6:	e7de      	b.n	1e296 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1e2d8:	b93b      	cbnz	r3, 1e2ea <nrfx_spim_xfer+0x7e>
   1e2da:	68e3      	ldr	r3, [r4, #12]
   1e2dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e2e0:	d203      	bcs.n	1e2ea <nrfx_spim_xfer+0x7e>
   1e2e2:	6863      	ldr	r3, [r4, #4]
   1e2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e2e8:	d309      	bcc.n	1e2fe <nrfx_spim_xfer+0x92>
   1e2ea:	4948      	ldr	r1, [pc, #288]	; (1e40c <nrfx_spim_xfer+0x1a0>)
   1e2ec:	f240 23e1 	movw	r3, #737	; 0x2e1
   1e2f0:	4a42      	ldr	r2, [pc, #264]	; (1e3fc <nrfx_spim_xfer+0x190>)
   1e2f2:	4843      	ldr	r0, [pc, #268]	; (1e400 <nrfx_spim_xfer+0x194>)
   1e2f4:	f006 fd13 	bl	24d1e <assert_print>
   1e2f8:	f240 21e1 	movw	r1, #737	; 0x2e1
   1e2fc:	e7cb      	b.n	1e296 <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   1e2fe:	f015 0908 	ands.w	r9, r5, #8
   1e302:	d00f      	beq.n	1e324 <nrfx_spim_xfer+0xb8>
   1e304:	7fb3      	ldrb	r3, [r6, #30]
   1e306:	075b      	lsls	r3, r3, #29
   1e308:	d40c      	bmi.n	1e324 <nrfx_spim_xfer+0xb8>
   1e30a:	7ff3      	ldrb	r3, [r6, #31]
   1e30c:	2bff      	cmp	r3, #255	; 0xff
   1e30e:	d009      	beq.n	1e324 <nrfx_spim_xfer+0xb8>
   1e310:	493f      	ldr	r1, [pc, #252]	; (1e410 <nrfx_spim_xfer+0x1a4>)
   1e312:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   1e316:	4a39      	ldr	r2, [pc, #228]	; (1e3fc <nrfx_spim_xfer+0x190>)
   1e318:	4839      	ldr	r0, [pc, #228]	; (1e400 <nrfx_spim_xfer+0x194>)
   1e31a:	f006 fd00 	bl	24d1e <assert_print>
   1e31e:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   1e322:	e7b8      	b.n	1e296 <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1e324:	7f73      	ldrb	r3, [r6, #29]
   1e326:	2b00      	cmp	r3, #0
   1e328:	d15e      	bne.n	1e3e8 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1e32a:	6833      	ldr	r3, [r6, #0]
   1e32c:	b123      	cbz	r3, 1e338 <nrfx_spim_xfer+0xcc>
   1e32e:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1e332:	bf04      	itt	eq
   1e334:	2301      	moveq	r3, #1
   1e336:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1e338:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1e414 <nrfx_spim_xfer+0x1a8>
   1e33c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1e340:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1e344:	2101      	movs	r1, #1
   1e346:	4640      	mov	r0, r8
   1e348:	f00a faf6 	bl	28938 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1e34c:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1e34e:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1e350:	b121      	cbz	r1, 1e35c <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1e352:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   1e356:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1e35a:	d106      	bne.n	1e36a <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1e35c:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1e35e:	b14a      	cbz	r2, 1e374 <nrfx_spim_xfer+0x108>
   1e360:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1e364:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1e368:	d004      	beq.n	1e374 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   1e36a:	2300      	movs	r3, #0
        return err_code;
   1e36c:	482a      	ldr	r0, [pc, #168]	; (1e418 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   1e36e:	7773      	strb	r3, [r6, #29]
}
   1e370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1e374:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e376:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e37a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e37e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   1e382:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e386:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e38a:	2200      	movs	r2, #0
   1e38c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1e390:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1e394:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1e398:	bf18      	it	ne
   1e39a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1e39c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1e3a0:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1e3a4:	bf18      	it	ne
   1e3a6:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1e3a8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   1e3ac:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1e3ae:	f1b9 0f00 	cmp.w	r9, #0
   1e3b2:	d006      	beq.n	1e3c2 <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   1e3b4:	b96a      	cbnz	r2, 1e3d2 <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   1e3b6:	2100      	movs	r1, #0
   1e3b8:	4640      	mov	r0, r8
   1e3ba:	f00a fabd 	bl	28938 <set_ss_pin_state>
    return err_code;
   1e3be:	4817      	ldr	r0, [pc, #92]	; (1e41c <nrfx_spim_xfer+0x1b0>)
   1e3c0:	e7d6      	b.n	1e370 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e3c2:	2101      	movs	r1, #1
   1e3c4:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   1e3c6:	b922      	cbnz	r2, 1e3d2 <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e3c8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1e3cc:	2a00      	cmp	r2, #0
   1e3ce:	d0fb      	beq.n	1e3c8 <nrfx_spim_xfer+0x15c>
   1e3d0:	e7f1      	b.n	1e3b6 <nrfx_spim_xfer+0x14a>
    if (!enable)
   1e3d2:	f015 0f04 	tst.w	r5, #4
   1e3d6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e3da:	d002      	beq.n	1e3e2 <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   1e3dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1e3e0:	e7ed      	b.n	1e3be <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   1e3e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e3e6:	e7ea      	b.n	1e3be <nrfx_spim_xfer+0x152>
        return err_code;
   1e3e8:	480d      	ldr	r0, [pc, #52]	; (1e420 <nrfx_spim_xfer+0x1b4>)
   1e3ea:	e7c1      	b.n	1e370 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1e3ec:	2b00      	cmp	r3, #0
   1e3ee:	f43f af78 	beq.w	1e2e2 <nrfx_spim_xfer+0x76>
   1e3f2:	e77a      	b.n	1e2ea <nrfx_spim_xfer+0x7e>
   1e3f4:	2002141c 	.word	0x2002141c
   1e3f8:	000301d8 	.word	0x000301d8
   1e3fc:	0003019c 	.word	0x0003019c
   1e400:	0002b6e9 	.word	0x0002b6e9
   1e404:	00030204 	.word	0x00030204
   1e408:	0003024b 	.word	0x0003024b
   1e40c:	00030292 	.word	0x00030292
   1e410:	00030336 	.word	0x00030336
   1e414:	20021428 	.word	0x20021428
   1e418:	0bad000a 	.word	0x0bad000a
   1e41c:	0bad0000 	.word	0x0bad0000
   1e420:	0bad000b 	.word	0x0bad000b

0001e424 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   1e424:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e426:	4b13      	ldr	r3, [pc, #76]	; (1e474 <nrfx_spim_4_irq_handler+0x50>)
   1e428:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1e42c:	b302      	cbz	r2, 1e470 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e42e:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   1e430:	4c11      	ldr	r4, [pc, #68]	; (1e478 <nrfx_spim_4_irq_handler+0x54>)
   1e432:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   1e436:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1e43a:	6823      	ldr	r3, [r4, #0]
   1e43c:	b95b      	cbnz	r3, 1e456 <nrfx_spim_4_irq_handler+0x32>
   1e43e:	490f      	ldr	r1, [pc, #60]	; (1e47c <nrfx_spim_4_irq_handler+0x58>)
   1e440:	480f      	ldr	r0, [pc, #60]	; (1e480 <nrfx_spim_4_irq_handler+0x5c>)
   1e442:	f240 333b 	movw	r3, #827	; 0x33b
   1e446:	4a0f      	ldr	r2, [pc, #60]	; (1e484 <nrfx_spim_4_irq_handler+0x60>)
   1e448:	f006 fc69 	bl	24d1e <assert_print>
   1e44c:	f240 313b 	movw	r1, #827	; 0x33b
   1e450:	480c      	ldr	r0, [pc, #48]	; (1e484 <nrfx_spim_4_irq_handler+0x60>)
   1e452:	f006 fc5d 	bl	24d10 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   1e456:	4629      	mov	r1, r5
   1e458:	4620      	mov	r0, r4
   1e45a:	f00a fa6d 	bl	28938 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e45e:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   1e462:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1e464:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e466:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   1e46a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e46e:	4718      	bx	r3
}
   1e470:	bd70      	pop	{r4, r5, r6, pc}
   1e472:	bf00      	nop
   1e474:	4000a000 	.word	0x4000a000
   1e478:	2002141c 	.word	0x2002141c
   1e47c:	00030379 	.word	0x00030379
   1e480:	0002b6e9 	.word	0x0002b6e9
   1e484:	0003019c 	.word	0x0003019c

0001e488 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   1e488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e48c:	460e      	mov	r6, r1
   1e48e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1e490:	4d0c      	ldr	r5, [pc, #48]	; (1e4c4 <metal_generic_dev_open+0x3c>)
   1e492:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1e496:	42ac      	cmp	r4, r5
   1e498:	d103      	bne.n	1e4a2 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1e49a:	f06f 0012 	mvn.w	r0, #18
   1e49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1e4a2:	4631      	mov	r1, r6
   1e4a4:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   1e4a8:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1e4ac:	f7ea ff4e 	bl	934c <strcmp>
   1e4b0:	b930      	cbnz	r0, 1e4c0 <metal_generic_dev_open+0x38>
			*device = dev;
   1e4b2:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   1e4b6:	4640      	mov	r0, r8
}
   1e4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1e4bc:	f00a bb70 	b.w	28ba0 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1e4c0:	6824      	ldr	r4, [r4, #0]
   1e4c2:	e7e8      	b.n	1e496 <metal_generic_dev_open+0xe>
   1e4c4:	2002143c 	.word	0x2002143c

0001e4c8 <metal_bus_unregister>:
{
   1e4c8:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1e4ca:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1e4ce:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1e4d0:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   1e4d2:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1e4d6:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1e4d8:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1e4dc:	6843      	ldr	r3, [r0, #4]
{
   1e4de:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   1e4e0:	b103      	cbz	r3, 1e4e4 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   1e4e2:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   1e4e4:	4b05      	ldr	r3, [pc, #20]	; (1e4fc <metal_bus_unregister+0x34>)
   1e4e6:	781a      	ldrb	r2, [r3, #0]
   1e4e8:	2a06      	cmp	r2, #6
   1e4ea:	d905      	bls.n	1e4f8 <metal_bus_unregister+0x30>
   1e4ec:	685b      	ldr	r3, [r3, #4]
   1e4ee:	b11b      	cbz	r3, 1e4f8 <metal_bus_unregister+0x30>
   1e4f0:	2007      	movs	r0, #7
   1e4f2:	6822      	ldr	r2, [r4, #0]
   1e4f4:	4902      	ldr	r1, [pc, #8]	; (1e500 <metal_bus_unregister+0x38>)
   1e4f6:	4798      	blx	r3
}
   1e4f8:	2000      	movs	r0, #0
   1e4fa:	bd10      	pop	{r4, pc}
   1e4fc:	2002143c 	.word	0x2002143c
   1e500:	0003039c 	.word	0x0003039c

0001e504 <metal_bus_find>:
{
   1e504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e508:	4607      	mov	r7, r0
   1e50a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1e50c:	4e0b      	ldr	r6, [pc, #44]	; (1e53c <metal_bus_find+0x38>)
   1e50e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1e512:	42b4      	cmp	r4, r6
   1e514:	d102      	bne.n	1e51c <metal_bus_find+0x18>
	return -ENOENT;
   1e516:	f06f 0001 	mvn.w	r0, #1
   1e51a:	e00a      	b.n	1e532 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1e51c:	4639      	mov	r1, r7
   1e51e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1e522:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1e526:	f7ea ff11 	bl	934c <strcmp>
   1e52a:	b920      	cbnz	r0, 1e536 <metal_bus_find+0x32>
   1e52c:	b11d      	cbz	r5, 1e536 <metal_bus_find+0x32>
			*result = bus;
   1e52e:	f8c5 8000 	str.w	r8, [r5]
}
   1e532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1e536:	6824      	ldr	r4, [r4, #0]
   1e538:	e7eb      	b.n	1e512 <metal_bus_find+0xe>
   1e53a:	bf00      	nop
   1e53c:	2002143c 	.word	0x2002143c

0001e540 <metal_bus_register>:
{
   1e540:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1e542:	4604      	mov	r4, r0
   1e544:	b910      	cbnz	r0, 1e54c <metal_bus_register+0xc>
		return -EINVAL;
   1e546:	f06f 0015 	mvn.w	r0, #21
}
   1e54a:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1e54c:	6800      	ldr	r0, [r0, #0]
   1e54e:	2800      	cmp	r0, #0
   1e550:	d0f9      	beq.n	1e546 <metal_bus_register+0x6>
   1e552:	f7ea ff05 	bl	9360 <strlen>
   1e556:	2800      	cmp	r0, #0
   1e558:	d0f5      	beq.n	1e546 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1e55a:	2100      	movs	r1, #0
   1e55c:	6820      	ldr	r0, [r4, #0]
   1e55e:	f7ff ffd1 	bl	1e504 <metal_bus_find>
   1e562:	b1c8      	cbz	r0, 1e598 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   1e564:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   1e568:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1e56c:	4b0c      	ldr	r3, [pc, #48]	; (1e5a0 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1e56e:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1e572:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1e574:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   1e578:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1e57a:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1e57c:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1e57e:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1e580:	781a      	ldrb	r2, [r3, #0]
   1e582:	2a06      	cmp	r2, #6
   1e584:	d901      	bls.n	1e58a <metal_bus_register+0x4a>
   1e586:	685b      	ldr	r3, [r3, #4]
   1e588:	b90b      	cbnz	r3, 1e58e <metal_bus_register+0x4e>
	return 0;
   1e58a:	2000      	movs	r0, #0
   1e58c:	e7dd      	b.n	1e54a <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1e58e:	2007      	movs	r0, #7
   1e590:	6822      	ldr	r2, [r4, #0]
   1e592:	4904      	ldr	r1, [pc, #16]	; (1e5a4 <metal_bus_register+0x64>)
   1e594:	4798      	blx	r3
   1e596:	e7f8      	b.n	1e58a <metal_bus_register+0x4a>
		return -EEXIST;
   1e598:	f06f 0010 	mvn.w	r0, #16
   1e59c:	e7d5      	b.n	1e54a <metal_bus_register+0xa>
   1e59e:	bf00      	nop
   1e5a0:	2002143c 	.word	0x2002143c
   1e5a4:	0003039e 	.word	0x0003039e

0001e5a8 <metal_device_close>:
	metal_assert(device && device->bus);
   1e5a8:	4601      	mov	r1, r0
{
   1e5aa:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   1e5ac:	b108      	cbz	r0, 1e5b2 <metal_device_close+0xa>
   1e5ae:	6840      	ldr	r0, [r0, #4]
   1e5b0:	b948      	cbnz	r0, 1e5c6 <metal_device_close+0x1e>
   1e5b2:	4908      	ldr	r1, [pc, #32]	; (1e5d4 <metal_device_close+0x2c>)
   1e5b4:	4808      	ldr	r0, [pc, #32]	; (1e5d8 <metal_device_close+0x30>)
   1e5b6:	2351      	movs	r3, #81	; 0x51
   1e5b8:	4a08      	ldr	r2, [pc, #32]	; (1e5dc <metal_device_close+0x34>)
   1e5ba:	f006 fbb0 	bl	24d1e <assert_print>
   1e5be:	2151      	movs	r1, #81	; 0x51
   1e5c0:	4806      	ldr	r0, [pc, #24]	; (1e5dc <metal_device_close+0x34>)
   1e5c2:	f006 fba5 	bl	24d10 <assert_post_action>
	if (device->bus->ops.dev_close)
   1e5c6:	68c3      	ldr	r3, [r0, #12]
   1e5c8:	b113      	cbz	r3, 1e5d0 <metal_device_close+0x28>
}
   1e5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   1e5ce:	4718      	bx	r3
}
   1e5d0:	bd10      	pop	{r4, pc}
   1e5d2:	bf00      	nop
   1e5d4:	000303e8 	.word	0x000303e8
   1e5d8:	0002b6e9 	.word	0x0002b6e9
   1e5dc:	000303b1 	.word	0x000303b1

0001e5e0 <metal_register_generic_device>:
{
   1e5e0:	b510      	push	{r4, lr}
   1e5e2:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1e5e4:	6800      	ldr	r0, [r0, #0]
   1e5e6:	b910      	cbnz	r0, 1e5ee <metal_register_generic_device+0xe>
		return -EINVAL;
   1e5e8:	f06f 0015 	mvn.w	r0, #21
}
   1e5ec:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1e5ee:	f7ea feb7 	bl	9360 <strlen>
   1e5f2:	2800      	cmp	r0, #0
   1e5f4:	d0f8      	beq.n	1e5e8 <metal_register_generic_device+0x8>
   1e5f6:	68a3      	ldr	r3, [r4, #8]
   1e5f8:	2b01      	cmp	r3, #1
   1e5fa:	d8f5      	bhi.n	1e5e8 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   1e5fc:	4b06      	ldr	r3, [pc, #24]	; (1e618 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1e5fe:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1e602:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1e604:	4b05      	ldr	r3, [pc, #20]	; (1e61c <metal_register_generic_device+0x3c>)
   1e606:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1e608:	f103 0018 	add.w	r0, r3, #24
   1e60c:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1e60e:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1e610:	61d9      	str	r1, [r3, #28]
	return 0;
   1e612:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1e614:	6011      	str	r1, [r2, #0]
}
   1e616:	e7e9      	b.n	1e5ec <metal_register_generic_device+0xc>
   1e618:	20008708 	.word	0x20008708
   1e61c:	2002143c 	.word	0x2002143c

0001e620 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1e620:	4b0e      	ldr	r3, [pc, #56]	; (1e65c <metal_init+0x3c>)
{
   1e622:	b510      	push	{r4, lr}
   1e624:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   1e626:	2220      	movs	r2, #32
   1e628:	2100      	movs	r1, #0
   1e62a:	4618      	mov	r0, r3
   1e62c:	f00b f917 	bl	2985e <memset>

	_metal.common.log_handler   = params->log_handler;
   1e630:	6822      	ldr	r2, [r4, #0]
   1e632:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   1e634:	4602      	mov	r2, r0
   1e636:	7921      	ldrb	r1, [r4, #4]
   1e638:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   1e63c:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   1e640:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   1e644:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   1e648:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   1e64c:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1e650:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   1e652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   1e656:	f000 b80f 	b.w	1e678 <metal_sys_init>
   1e65a:	bf00      	nop
   1e65c:	2002143c 	.word	0x2002143c

0001e660 <metal_finish>:

void metal_finish(void)
{
   1e660:	b508      	push	{r3, lr}
	metal_sys_finish();
   1e662:	f000 f811 	bl	1e688 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   1e666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   1e66a:	2220      	movs	r2, #32
   1e66c:	2100      	movs	r1, #0
   1e66e:	4801      	ldr	r0, [pc, #4]	; (1e674 <metal_finish+0x14>)
   1e670:	f00b b8f5 	b.w	2985e <memset>
   1e674:	2002143c 	.word	0x2002143c

0001e678 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   1e678:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1e67a:	4802      	ldr	r0, [pc, #8]	; (1e684 <metal_sys_init+0xc>)
   1e67c:	f7ff ff60 	bl	1e540 <metal_bus_register>
	return 0;
}
   1e680:	2000      	movs	r0, #0
   1e682:	bd08      	pop	{r3, pc}
   1e684:	20008708 	.word	0x20008708

0001e688 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   1e688:	4801      	ldr	r0, [pc, #4]	; (1e690 <metal_sys_finish+0x8>)
   1e68a:	f7ff bf1d 	b.w	1e4c8 <metal_bus_unregister>
   1e68e:	bf00      	nop
   1e690:	20008708 	.word	0x20008708

0001e694 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1e694:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1e696:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   1e698:	2b06      	cmp	r3, #6
{
   1e69a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1e69c:	bf88      	it	hi
   1e69e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   1e6a0:	4b09      	ldr	r3, [pc, #36]	; (1e6c8 <metal_zephyr_log_handler+0x34>)
{
   1e6a2:	ac05      	add	r4, sp, #20
   1e6a4:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   1e6a8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1e6ac:	4807      	ldr	r0, [pc, #28]	; (1e6cc <metal_zephyr_log_handler+0x38>)
   1e6ae:	f006 f974 	bl	2499a <printk>

	va_start(args, format);
	vprintk(format, args);
   1e6b2:	4621      	mov	r1, r4
   1e6b4:	4628      	mov	r0, r5
	va_start(args, format);
   1e6b6:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   1e6b8:	f7ee fad2 	bl	cc60 <vprintk>
	va_end(args);
}
   1e6bc:	b002      	add	sp, #8
   1e6be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1e6c2:	b003      	add	sp, #12
   1e6c4:	4770      	bx	lr
   1e6c6:	bf00      	nop
   1e6c8:	0002b5a4 	.word	0x0002b5a4
   1e6cc:	0002b8b6 	.word	0x0002b8b6

0001e6d0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   1e6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6d4:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1e6d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1e6d8:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   1e6da:	4293      	cmp	r3, r2
{
   1e6dc:	4617      	mov	r7, r2
   1e6de:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   1e6e0:	d341      	bcc.n	1e766 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1e6e2:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   1e6e4:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   1e6e8:	42bd      	cmp	r5, r7
   1e6ea:	d103      	bne.n	1e6f4 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1e6ec:	2000      	movs	r0, #0
}
   1e6ee:	b007      	add	sp, #28
   1e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1e6f4:	fb0b f805 	mul.w	r8, fp, r5
   1e6f8:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1e6fc:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1e6fe:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1e702:	1d23      	adds	r3, r4, #4
   1e704:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1e706:	b9ca      	cbnz	r2, 1e73c <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   1e708:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e70a:	6861      	ldr	r1, [r4, #4]
   1e70c:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1e70e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1e712:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   1e714:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1e716:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   1e71a:	1e5c      	subs	r4, r3, #1
   1e71c:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1e720:	425b      	negs	r3, r3
   1e722:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   1e726:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   1e728:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   1e72c:	6884      	ldr	r4, [r0, #8]
   1e72e:	3306      	adds	r3, #6
   1e730:	42a1      	cmp	r1, r4
   1e732:	bf28      	it	cs
   1e734:	f04f 31ff 	movcs.w	r1, #4294967295
   1e738:	f00a f9fe 	bl	28b38 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1e73c:	f859 3008 	ldr.w	r3, [r9, r8]
   1e740:	4630      	mov	r0, r6
   1e742:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   1e744:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1e746:	b2a9      	uxth	r1, r5
   1e748:	6a1b      	ldr	r3, [r3, #32]
   1e74a:	9301      	str	r3, [sp, #4]
   1e74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e74e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1e752:	9300      	str	r3, [sp, #0]
   1e754:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   1e758:	9b05      	ldr	r3, [sp, #20]
   1e75a:	f00a fa66 	bl	28c2a <virtqueue_create>
		if (ret)
   1e75e:	2800      	cmp	r0, #0
   1e760:	d1c5      	bne.n	1e6ee <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1e762:	3501      	adds	r5, #1
   1e764:	e7c0      	b.n	1e6e8 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1e766:	4801      	ldr	r0, [pc, #4]	; (1e76c <virtio_create_virtqueues+0x9c>)
   1e768:	e7c1      	b.n	1e6ee <virtio_create_virtqueues+0x1e>
   1e76a:	bf00      	nop
   1e76c:	fffff440 	.word	0xfffff440

0001e770 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1e770:	b510      	push	{r4, lr}
	if (vq) {
   1e772:	4604      	mov	r4, r0
   1e774:	b190      	cbz	r0, 1e79c <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   1e776:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1e778:	8943      	ldrh	r3, [r0, #10]
   1e77a:	429a      	cmp	r2, r3
   1e77c:	d009      	beq.n	1e792 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1e77e:	4b08      	ldr	r3, [pc, #32]	; (1e7a0 <virtqueue_free+0x30>)
   1e780:	781a      	ldrb	r2, [r3, #0]
   1e782:	2a03      	cmp	r2, #3
   1e784:	d905      	bls.n	1e792 <virtqueue_free+0x22>
   1e786:	685b      	ldr	r3, [r3, #4]
   1e788:	b11b      	cbz	r3, 1e792 <virtqueue_free+0x22>
   1e78a:	6842      	ldr	r2, [r0, #4]
   1e78c:	4905      	ldr	r1, [pc, #20]	; (1e7a4 <virtqueue_free+0x34>)
   1e78e:	2004      	movs	r0, #4
   1e790:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1e792:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   1e794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e798:	f00b b80b 	b.w	297b2 <k_free>
   1e79c:	bd10      	pop	{r4, pc}
   1e79e:	bf00      	nop
   1e7a0:	2002143c 	.word	0x2002143c
   1e7a4:	00030496 	.word	0x00030496

0001e7a8 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1e7a8:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   1e7aa:	8944      	ldrh	r4, [r0, #10]
   1e7ac:	428c      	cmp	r4, r1
   1e7ae:	d912      	bls.n	1e7d6 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1e7b0:	6a03      	ldr	r3, [r0, #32]
   1e7b2:	3c01      	subs	r4, #1
   1e7b4:	885d      	ldrh	r5, [r3, #2]
   1e7b6:	402c      	ands	r4, r5
   1e7b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   1e7bc:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   1e7be:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1e7c0:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1e7c4:	6a02      	ldr	r2, [r0, #32]
   1e7c6:	8853      	ldrh	r3, [r2, #2]
   1e7c8:	3301      	adds	r3, #1
   1e7ca:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1e7cc:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1e7ce:	3301      	adds	r3, #1
   1e7d0:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1e7d2:	2000      	movs	r0, #0
}
   1e7d4:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1e7d6:	4801      	ldr	r0, [pc, #4]	; (1e7dc <virtqueue_add_consumed_buffer+0x34>)
   1e7d8:	e7fc      	b.n	1e7d4 <virtqueue_add_consumed_buffer+0x2c>
   1e7da:	bf00      	nop
   1e7dc:	fffff441 	.word	0xfffff441

0001e7e0 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   1e7e0:	b470      	push	{r4, r5, r6}
   1e7e2:	9e03      	ldr	r6, [sp, #12]
   1e7e4:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1e7e6:	b158      	cbz	r0, 1e800 <rpmsg_send_offchannel_raw+0x20>
   1e7e8:	6a00      	ldr	r0, [r0, #32]
   1e7ea:	b148      	cbz	r0, 1e800 <rpmsg_send_offchannel_raw+0x20>
   1e7ec:	b143      	cbz	r3, 1e800 <rpmsg_send_offchannel_raw+0x20>
   1e7ee:	3401      	adds	r4, #1
   1e7f0:	d006      	beq.n	1e800 <rpmsg_send_offchannel_raw+0x20>
   1e7f2:	2e00      	cmp	r6, #0
   1e7f4:	db04      	blt.n	1e800 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   1e7f6:	6f84      	ldr	r4, [r0, #120]	; 0x78
   1e7f8:	b114      	cbz	r4, 1e800 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1e7fa:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   1e7fc:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1e7fe:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1e800:	4801      	ldr	r0, [pc, #4]	; (1e808 <rpmsg_send_offchannel_raw+0x28>)
}
   1e802:	bc70      	pop	{r4, r5, r6}
   1e804:	4770      	bx	lr
   1e806:	bf00      	nop
   1e808:	fffff82d 	.word	0xfffff82d

0001e80c <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   1e80c:	b470      	push	{r4, r5, r6}
   1e80e:	9e03      	ldr	r6, [sp, #12]
   1e810:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1e812:	b160      	cbz	r0, 1e82e <rpmsg_send_offchannel_nocopy+0x22>
   1e814:	6a00      	ldr	r0, [r0, #32]
   1e816:	b150      	cbz	r0, 1e82e <rpmsg_send_offchannel_nocopy+0x22>
   1e818:	b14b      	cbz	r3, 1e82e <rpmsg_send_offchannel_nocopy+0x22>
   1e81a:	3401      	adds	r4, #1
   1e81c:	d007      	beq.n	1e82e <rpmsg_send_offchannel_nocopy+0x22>
   1e81e:	2e00      	cmp	r6, #0
   1e820:	db05      	blt.n	1e82e <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   1e822:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   1e826:	b114      	cbz	r4, 1e82e <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1e828:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   1e82a:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1e82c:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1e82e:	4801      	ldr	r0, [pc, #4]	; (1e834 <rpmsg_send_offchannel_nocopy+0x28>)
}
   1e830:	bc70      	pop	{r4, r5, r6}
   1e832:	4770      	bx	lr
   1e834:	fffff82d 	.word	0xfffff82d

0001e838 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   1e838:	b570      	push	{r4, r5, r6, lr}
   1e83a:	460c      	mov	r4, r1
   1e83c:	4611      	mov	r1, r2
   1e83e:	4605      	mov	r5, r0
   1e840:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1e842:	4b0c      	ldr	r3, [pc, #48]	; (1e874 <rpmsg_register_endpoint+0x3c>)
   1e844:	2220      	movs	r2, #32
   1e846:	2900      	cmp	r1, #0
   1e848:	bf08      	it	eq
   1e84a:	4619      	moveq	r1, r3
   1e84c:	4620      	mov	r0, r4
   1e84e:	f00b f948 	bl	29ae2 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   1e852:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   1e854:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   1e856:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   1e858:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   1e85a:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   1e85c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1e85e:	9b06      	ldr	r3, [sp, #24]
   1e860:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1e862:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1e864:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   1e868:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   1e86c:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1e86e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1e870:	6013      	str	r3, [r2, #0]
}
   1e872:	bd70      	pop	{r4, r5, r6, pc}
   1e874:	0002f304 	.word	0x0002f304

0001e878 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1e878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e87c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1e880:	460d      	mov	r5, r1
   1e882:	4692      	mov	sl, r2
   1e884:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   1e886:	4606      	mov	r6, r0
   1e888:	2800      	cmp	r0, #0
   1e88a:	d06c      	beq.n	1e966 <rpmsg_create_ept+0xee>
   1e88c:	2900      	cmp	r1, #0
   1e88e:	d06a      	beq.n	1e966 <rpmsg_create_ept+0xee>
   1e890:	f1b9 0f00 	cmp.w	r9, #0
   1e894:	d067      	beq.n	1e966 <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1e896:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1e89a:	4640      	mov	r0, r8
   1e89c:	f00a fb2e 	bl	28efc <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1e8a0:	1c78      	adds	r0, r7, #1
   1e8a2:	d140      	bne.n	1e926 <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1e8a4:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1e8a6:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e8aa:	f014 0401 	ands.w	r4, r4, #1
   1e8ae:	d00b      	beq.n	1e8c8 <rpmsg_create_ept+0x50>
	for (bit = start;
   1e8b0:	2400      	movs	r4, #0
	     bit++)
   1e8b2:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e8b4:	2c80      	cmp	r4, #128	; 0x80
   1e8b6:	d054      	beq.n	1e962 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1e8b8:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1e8ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1e8be:	f004 011f 	and.w	r1, r4, #31
   1e8c2:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e8c4:	07d1      	lsls	r1, r2, #31
   1e8c6:	d4f4      	bmi.n	1e8b2 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e8c8:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1e8ca:	0960      	lsrs	r0, r4, #5
   1e8cc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1e8d0:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e8d4:	f004 041f 	and.w	r4, r4, #31
   1e8d8:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1e8da:	430a      	orrs	r2, r1
   1e8dc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   1e8e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e8e2:	4652      	mov	r2, sl
   1e8e4:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1e8e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e8ea:	4631      	mov	r1, r6
   1e8ec:	9300      	str	r3, [sp, #0]
   1e8ee:	4628      	mov	r0, r5
   1e8f0:	463b      	mov	r3, r7
   1e8f2:	f7ff ffa1 	bl	1e838 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1e8f6:	4640      	mov	r0, r8
   1e8f8:	f001 fa9c 	bl	1fe34 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1e8fc:	7834      	ldrb	r4, [r6, #0]
   1e8fe:	b174      	cbz	r4, 1e91e <rpmsg_create_ept+0xa6>
   1e900:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   1e904:	b15c      	cbz	r4, 1e91e <rpmsg_create_ept+0xa6>
   1e906:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1e908:	3301      	adds	r3, #1
   1e90a:	d12e      	bne.n	1e96a <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1e90c:	2100      	movs	r1, #0
   1e90e:	4630      	mov	r0, r6
   1e910:	f00a fb23 	bl	28f5a <rpmsg_send_ns_message>

	if (status)
   1e914:	4604      	mov	r4, r0
   1e916:	b110      	cbz	r0, 1e91e <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   1e918:	4630      	mov	r0, r6
   1e91a:	f00a faf5 	bl	28f08 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1e91e:	4620      	mov	r0, r4
   1e920:	b004      	add	sp, #16
   1e922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1e926:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1e92a:	d3d9      	bcc.n	1e8e0 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1e92c:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1e930:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1e932:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   1e936:	d80f      	bhi.n	1e958 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1e938:	0958      	lsrs	r0, r3, #5
   1e93a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1e93e:	f003 031f 	and.w	r3, r3, #31
   1e942:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   1e946:	07d2      	lsls	r2, r2, #31
   1e948:	d40b      	bmi.n	1e962 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e94a:	2201      	movs	r2, #1
   1e94c:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1e950:	4323      	orrs	r3, r4
   1e952:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   1e956:	e7c3      	b.n	1e8e0 <rpmsg_create_ept+0x68>
   1e958:	4c05      	ldr	r4, [pc, #20]	; (1e970 <rpmsg_create_ept+0xf8>)
   1e95a:	4640      	mov	r0, r8
   1e95c:	f001 fa6a 	bl	1fe34 <z_impl_k_sem_give>
}
   1e960:	e7dd      	b.n	1e91e <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   1e962:	4c04      	ldr	r4, [pc, #16]	; (1e974 <rpmsg_create_ept+0xfc>)
   1e964:	e7f9      	b.n	1e95a <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   1e966:	4c02      	ldr	r4, [pc, #8]	; (1e970 <rpmsg_create_ept+0xf8>)
   1e968:	e7d9      	b.n	1e91e <rpmsg_create_ept+0xa6>
   1e96a:	2400      	movs	r4, #0
   1e96c:	e7d7      	b.n	1e91e <rpmsg_create_ept+0xa6>
   1e96e:	bf00      	nop
   1e970:	fffff82d 	.word	0xfffff82d
   1e974:	fffff829 	.word	0xfffff829

0001e978 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   1e978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   1e97c:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   1e980:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   1e984:	2300      	movs	r3, #0
{
   1e986:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1e988:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1e98a:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1e98e:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1e990:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1e994:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e996:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   1e998:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1e99c:	f8ad 501c 	strh.w	r5, [sp, #28]
   1e9a0:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e9a2:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e9a4:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1e9a8:	42b1      	cmp	r1, r6
   1e9aa:	bf28      	it	cs
   1e9ac:	f04f 31ff 	movcs.w	r1, #4294967295
   1e9b0:	eb0d 0203 	add.w	r2, sp, r3
   1e9b4:	f00a f886 	bl	28ac4 <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1e9b8:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   1e9ba:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1e9bc:	d00b      	beq.n	1e9d6 <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   1e9be:	4924      	ldr	r1, [pc, #144]	; (1ea50 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   1e9c0:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1e9c4:	4a23      	ldr	r2, [pc, #140]	; (1ea54 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1e9c6:	4824      	ldr	r0, [pc, #144]	; (1ea58 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1e9c8:	f006 f9a9 	bl	24d1e <assert_print>
   1e9cc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1e9d0:	4820      	ldr	r0, [pc, #128]	; (1ea54 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1e9d2:	f006 f99d 	bl	24d10 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   1e9d6:	f104 0658 	add.w	r6, r4, #88	; 0x58
   1e9da:	4630      	mov	r0, r6
   1e9dc:	f00a fb4d 	bl	2907a <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   1e9e0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1e9e4:	699b      	ldr	r3, [r3, #24]
   1e9e6:	b9d3      	cbnz	r3, 1ea1e <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   1e9e8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1e9ec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1e9f0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1e9f4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1e9f6:	b9cb      	cbnz	r3, 1ea2c <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   1e9f8:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1e9fc:	f8cd 8000 	str.w	r8, [sp]
   1ea00:	2201      	movs	r2, #1
   1ea02:	a902      	add	r1, sp, #8
   1ea04:	f00a f93e 	bl	28c84 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1ea08:	b1b0      	cbz	r0, 1ea38 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   1ea0a:	4914      	ldr	r1, [pc, #80]	; (1ea5c <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   1ea0c:	f240 13b9 	movw	r3, #441	; 0x1b9
   1ea10:	4a10      	ldr	r2, [pc, #64]	; (1ea54 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1ea12:	4811      	ldr	r0, [pc, #68]	; (1ea58 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1ea14:	f006 f983 	bl	24d1e <assert_print>
   1ea18:	f240 11b9 	movw	r1, #441	; 0x1b9
   1ea1c:	e7d8      	b.n	1e9d0 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1ea1e:	4639      	mov	r1, r7
   1ea20:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1ea24:	f00a f9c4 	bl	28db0 <virtqueue_get_buffer_length>
   1ea28:	4602      	mov	r2, r0
   1ea2a:	e7df      	b.n	1e9ec <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   1ea2c:	2b01      	cmp	r3, #1
   1ea2e:	d103      	bne.n	1ea38 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1ea30:	4639      	mov	r1, r7
   1ea32:	f7ff feb9 	bl	1e7a8 <virtqueue_add_consumed_buffer>
   1ea36:	e7e7      	b.n	1ea08 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   1ea38:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1ea3c:	f00a fa0f 	bl	28e5e <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   1ea40:	4630      	mov	r0, r6
   1ea42:	f00a fb18 	bl	29076 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   1ea46:	4628      	mov	r0, r5
   1ea48:	b008      	add	sp, #32
   1ea4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ea4e:	bf00      	nop
   1ea50:	000304fb 	.word	0x000304fb
   1ea54:	000304b8 	.word	0x000304b8
   1ea58:	0002b6e9 	.word	0x0002b6e9
   1ea5c:	00030514 	.word	0x00030514

0001ea60 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   1ea60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1ea64:	6803      	ldr	r3, [r0, #0]
   1ea66:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   1ea68:	f107 0658 	add.w	r6, r7, #88	; 0x58
   1ea6c:	4630      	mov	r0, r6
   1ea6e:	f00a fb04 	bl	2907a <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1ea72:	4638      	mov	r0, r7
   1ea74:	f10d 020a 	add.w	r2, sp, #10
   1ea78:	a903      	add	r1, sp, #12
   1ea7a:	f00a fb71 	bl	29160 <rpmsg_virtio_get_rx_buffer>
   1ea7e:	4604      	mov	r4, r0
   1ea80:	4630      	mov	r0, r6
   1ea82:	f00a faf8 	bl	29076 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   1ea86:	2c00      	cmp	r4, #0
   1ea88:	d04f      	beq.n	1eb2a <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   1ea8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1ea8e:	4630      	mov	r0, r6
   1ea90:	60a3      	str	r3, [r4, #8]
   1ea92:	f00a faf2 	bl	2907a <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1ea96:	f04f 33ff 	mov.w	r3, #4294967295
   1ea9a:	2100      	movs	r1, #0
   1ea9c:	4638      	mov	r0, r7
   1ea9e:	6862      	ldr	r2, [r4, #4]
   1eaa0:	f00a fa8f 	bl	28fc2 <rpmsg_get_endpoint>
   1eaa4:	4605      	mov	r5, r0
   1eaa6:	4630      	mov	r0, r6
   1eaa8:	f00a fae5 	bl	29076 <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   1eaac:	b1ed      	cbz	r5, 1eaea <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1eaae:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1eab0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1eab2:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1eab4:	bf08      	it	eq
   1eab6:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1eab8:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1eaba:	bf08      	it	eq
   1eabc:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1eabe:	6823      	ldr	r3, [r4, #0]
   1eac0:	89a2      	ldrh	r2, [r4, #12]
   1eac2:	9100      	str	r1, [sp, #0]
   1eac4:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1eac8:	f104 0110 	add.w	r1, r4, #16
   1eacc:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   1eace:	2800      	cmp	r0, #0
   1ead0:	da0b      	bge.n	1eaea <rpmsg_virtio_rx_callback+0x8a>
   1ead2:	4917      	ldr	r1, [pc, #92]	; (1eb30 <rpmsg_virtio_rx_callback+0xd0>)
   1ead4:	4817      	ldr	r0, [pc, #92]	; (1eb34 <rpmsg_virtio_rx_callback+0xd4>)
   1ead6:	f240 2343 	movw	r3, #579	; 0x243
   1eada:	4a17      	ldr	r2, [pc, #92]	; (1eb38 <rpmsg_virtio_rx_callback+0xd8>)
   1eadc:	f006 f91f 	bl	24d1e <assert_print>
   1eae0:	f240 2143 	movw	r1, #579	; 0x243
   1eae4:	4814      	ldr	r0, [pc, #80]	; (1eb38 <rpmsg_virtio_rx_callback+0xd8>)
   1eae6:	f006 f913 	bl	24d10 <assert_post_action>
   1eaea:	4630      	mov	r0, r6
   1eaec:	f00a fac5 	bl	2907a <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1eaf0:	68a3      	ldr	r3, [r4, #8]
   1eaf2:	2b00      	cmp	r3, #0
   1eaf4:	db06      	blt.n	1eb04 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1eaf6:	4621      	mov	r1, r4
   1eaf8:	4638      	mov	r0, r7
   1eafa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1eafe:	9a03      	ldr	r2, [sp, #12]
   1eb00:	f00a fb45 	bl	2918e <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1eb04:	4638      	mov	r0, r7
   1eb06:	f10d 020a 	add.w	r2, sp, #10
   1eb0a:	a903      	add	r1, sp, #12
   1eb0c:	f00a fb28 	bl	29160 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1eb10:	4604      	mov	r4, r0
   1eb12:	b118      	cbz	r0, 1eb1c <rpmsg_virtio_rx_callback+0xbc>
   1eb14:	4630      	mov	r0, r6
   1eb16:	f00a faae 	bl	29076 <k_sem_give>
	while (rp_hdr) {
   1eb1a:	e7b6      	b.n	1ea8a <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   1eb1c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1eb20:	f00a f99d 	bl	28e5e <virtqueue_kick>
   1eb24:	4630      	mov	r0, r6
   1eb26:	f00a faa6 	bl	29076 <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   1eb2a:	b004      	add	sp, #16
   1eb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb30:	00030520 	.word	0x00030520
   1eb34:	0002b6e9 	.word	0x0002b6e9
   1eb38:	000304b8 	.word	0x000304b8

0001eb3c <rpmsg_virtio_send_offchannel_raw>:
{
   1eb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eb40:	b085      	sub	sp, #20
   1eb42:	460f      	mov	r7, r1
   1eb44:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1eb46:	a903      	add	r1, sp, #12
   1eb48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1eb4a:	4606      	mov	r6, r0
   1eb4c:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1eb4e:	f00a fb69 	bl	29224 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   1eb52:	4604      	mov	r4, r0
   1eb54:	b350      	cbz	r0, 1ebac <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   1eb56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1eb58:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1eb5a:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   1eb5e:	429d      	cmp	r5, r3
   1eb60:	bfa8      	it	ge
   1eb62:	461d      	movge	r5, r3
   1eb64:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1eb66:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1eb6a:	1a61      	subs	r1, r4, r1
   1eb6c:	4561      	cmp	r1, ip
   1eb6e:	bf28      	it	cs
   1eb70:	f04f 31ff 	movcs.w	r1, #4294967295
   1eb74:	462b      	mov	r3, r5
   1eb76:	464a      	mov	r2, r9
   1eb78:	f009 ffa4 	bl	28ac4 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   1eb7c:	4285      	cmp	r5, r0
   1eb7e:	d00b      	beq.n	1eb98 <rpmsg_virtio_send_offchannel_raw+0x5c>
   1eb80:	490b      	ldr	r1, [pc, #44]	; (1ebb0 <rpmsg_virtio_send_offchannel_raw+0x74>)
   1eb82:	480c      	ldr	r0, [pc, #48]	; (1ebb4 <rpmsg_virtio_send_offchannel_raw+0x78>)
   1eb84:	f240 2303 	movw	r3, #515	; 0x203
   1eb88:	4a0b      	ldr	r2, [pc, #44]	; (1ebb8 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1eb8a:	f006 f8c8 	bl	24d1e <assert_print>
   1eb8e:	f240 2103 	movw	r1, #515	; 0x203
   1eb92:	4809      	ldr	r0, [pc, #36]	; (1ebb8 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1eb94:	f006 f8bc 	bl	24d10 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   1eb98:	4623      	mov	r3, r4
   1eb9a:	4642      	mov	r2, r8
   1eb9c:	4639      	mov	r1, r7
   1eb9e:	4630      	mov	r0, r6
   1eba0:	9500      	str	r5, [sp, #0]
   1eba2:	f7ff fee9 	bl	1e978 <rpmsg_virtio_send_offchannel_nocopy>
}
   1eba6:	b005      	add	sp, #20
   1eba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   1ebac:	4803      	ldr	r0, [pc, #12]	; (1ebbc <rpmsg_virtio_send_offchannel_raw+0x80>)
   1ebae:	e7fa      	b.n	1eba6 <rpmsg_virtio_send_offchannel_raw+0x6a>
   1ebb0:	0003052c 	.word	0x0003052c
   1ebb4:	0002b6e9 	.word	0x0002b6e9
   1ebb8:	000304b8 	.word	0x000304b8
   1ebbc:	fffff82e 	.word	0xfffff82e

0001ebc0 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   1ebc0:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1ebc2:	4604      	mov	r4, r0
   1ebc4:	b1e0      	cbz	r0, 1ec00 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   1ebc6:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1ebca:	4628      	mov	r0, r5
   1ebcc:	f00a fa55 	bl	2907a <__metal_mutex_acquire>
   1ebd0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1ebd4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1ebd6:	b953      	cbnz	r3, 1ebee <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   1ebd8:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   1ebdc:	3c10      	subs	r4, #16
	if (length <= 0) {
   1ebde:	2c00      	cmp	r4, #0
   1ebe0:	dc00      	bgt.n	1ebe4 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   1ebe2:	4c08      	ldr	r4, [pc, #32]	; (1ec04 <rpmsg_virtio_get_buffer_size+0x44>)
   1ebe4:	4628      	mov	r0, r5
   1ebe6:	f00a fa46 	bl	29076 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   1ebea:	4620      	mov	r0, r4
   1ebec:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   1ebee:	2b01      	cmp	r3, #1
   1ebf0:	d1f7      	bne.n	1ebe2 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1ebf2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1ebf6:	f00a f969 	bl	28ecc <virtqueue_get_desc_size>
   1ebfa:	f1a0 0410 	sub.w	r4, r0, #16
   1ebfe:	e7ee      	b.n	1ebde <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   1ec00:	4c01      	ldr	r4, [pc, #4]	; (1ec08 <rpmsg_virtio_get_buffer_size+0x48>)
   1ec02:	e7f2      	b.n	1ebea <rpmsg_virtio_get_buffer_size+0x2a>
   1ec04:	fffff82e 	.word	0xfffff82e
   1ec08:	fffff82d 	.word	0xfffff82d

0001ec0c <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   1ec0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ec10:	b08a      	sub	sp, #40	; 0x28
   1ec12:	460d      	mov	r5, r1
   1ec14:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   1ec18:	4690      	mov	r8, r2
   1ec1a:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   1ec1c:	4604      	mov	r4, r0
   1ec1e:	b920      	cbnz	r0, 1ec2a <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   1ec20:	4f81      	ldr	r7, [pc, #516]	; (1ee28 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   1ec22:	4638      	mov	r0, r7
   1ec24:	b00a      	add	sp, #40	; 0x28
   1ec26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   1ec2a:	2900      	cmp	r1, #0
   1ec2c:	d0f8      	beq.n	1ec20 <rpmsg_init_vdev_with_config+0x14>
   1ec2e:	2b00      	cmp	r3, #0
   1ec30:	d0f6      	beq.n	1ec20 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   1ec32:	2294      	movs	r2, #148	; 0x94
   1ec34:	2100      	movs	r1, #0
   1ec36:	f00a fe12 	bl	2985e <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ec3a:	2201      	movs	r2, #1
   1ec3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1ec40:	4611      	mov	r1, r2
   1ec42:	f00a fc1e 	bl	29482 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1ec46:	4b79      	ldr	r3, [pc, #484]	; (1ee2c <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   1ec48:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   1ec4c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1ec50:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1ec52:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   1ec54:	4b76      	ldr	r3, [pc, #472]	; (1ee30 <rpmsg_init_vdev_with_config+0x224>)
   1ec56:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   1ec58:	4b76      	ldr	r3, [pc, #472]	; (1ee34 <rpmsg_init_vdev_with_config+0x228>)
   1ec5a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   1ec5e:	4b76      	ldr	r3, [pc, #472]	; (1ee38 <rpmsg_init_vdev_with_config+0x22c>)
   1ec60:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   1ec64:	4b75      	ldr	r3, [pc, #468]	; (1ee3c <rpmsg_init_vdev_with_config+0x230>)
   1ec66:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   1ec6a:	4b75      	ldr	r3, [pc, #468]	; (1ee40 <rpmsg_init_vdev_with_config+0x234>)
   1ec6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1ec70:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1ec74:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   1ec78:	f1b8 0f00 	cmp.w	r8, #0
   1ec7c:	d16e      	bne.n	1ed5c <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   1ec7e:	2f00      	cmp	r7, #0
   1ec80:	d0ce      	beq.n	1ec20 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   1ec82:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1ec86:	f104 0394 	add.w	r3, r4, #148	; 0x94
   1ec8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1ec8e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1ec92:	6a03      	ldr	r3, [r0, #32]
   1ec94:	689b      	ldr	r3, [r3, #8]
   1ec96:	4798      	blx	r3
   1ec98:	2300      	movs	r3, #0
   1ec9a:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1ec9c:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1eca0:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1eca2:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   1eca6:	f1b8 0f00 	cmp.w	r8, #0
   1ecaa:	d16d      	bne.n	1ed88 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   1ecac:	7a3b      	ldrb	r3, [r7, #8]
   1ecae:	2b00      	cmp	r3, #0
   1ecb0:	d068      	beq.n	1ed84 <rpmsg_init_vdev_with_config+0x178>
   1ecb2:	f109 030c 	add.w	r3, r9, #12
   1ecb6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   1ecba:	f1b9 0f00 	cmp.w	r9, #0
   1ecbe:	d0af      	beq.n	1ec20 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   1ecc0:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1ecc4:	2a00      	cmp	r2, #0
   1ecc6:	f000 80ad 	beq.w	1ee24 <rpmsg_init_vdev_with_config+0x218>
   1ecca:	689b      	ldr	r3, [r3, #8]
   1eccc:	2b00      	cmp	r3, #0
   1ecce:	f000 80a9 	beq.w	1ee24 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   1ecd2:	4b5c      	ldr	r3, [pc, #368]	; (1ee44 <rpmsg_init_vdev_with_config+0x238>)
   1ecd4:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   1ecd6:	4b5c      	ldr	r3, [pc, #368]	; (1ee48 <rpmsg_init_vdev_with_config+0x23c>)
   1ecd8:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   1ecda:	4b5c      	ldr	r3, [pc, #368]	; (1ee4c <rpmsg_init_vdev_with_config+0x240>)
   1ecdc:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   1ecde:	4b5c      	ldr	r3, [pc, #368]	; (1ee50 <rpmsg_init_vdev_with_config+0x244>)
   1ece0:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1ece2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ece4:	681b      	ldr	r3, [r3, #0]
   1ece6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   1ecea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ecec:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1ecee:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   1ecf2:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   1ecf6:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1ecfa:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   1ecfc:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   1ed00:	9300      	str	r3, [sp, #0]
   1ed02:	2202      	movs	r2, #2
   1ed04:	2100      	movs	r1, #0
   1ed06:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1ed0a:	ab04      	add	r3, sp, #16
   1ed0c:	f7ff fce0 	bl	1e6d0 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   1ed10:	4607      	mov	r7, r0
   1ed12:	2800      	cmp	r0, #0
   1ed14:	d185      	bne.n	1ec22 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   1ed16:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1ed1a:	f00a f872 	bl	28e02 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   1ed1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ed20:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   1ed22:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   1ed24:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ed26:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   1ed28:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   1ed2a:	f1b8 0f00 	cmp.w	r8, #0
   1ed2e:	d161      	bne.n	1edf4 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1ed30:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   1ed32:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1ed36:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1ed38:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1ed3c:	895b      	ldrh	r3, [r3, #10]
   1ed3e:	4553      	cmp	r3, sl
   1ed40:	d834      	bhi.n	1edac <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   1ed42:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1ed46:	e9c4 4400 	strd	r4, r4, [r4]
   1ed4a:	2b00      	cmp	r3, #0
   1ed4c:	d159      	bne.n	1ee02 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1ed4e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1ed52:	2104      	movs	r1, #4
   1ed54:	6a03      	ldr	r3, [r0, #32]
   1ed56:	685b      	ldr	r3, [r3, #4]
   1ed58:	4798      	blx	r3
}
   1ed5a:	e762      	b.n	1ec22 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   1ed5c:	f1b8 0f01 	cmp.w	r8, #1
   1ed60:	d195      	bne.n	1ec8e <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   1ed62:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1ed66:	6a03      	ldr	r3, [r0, #32]
   1ed68:	681b      	ldr	r3, [r3, #0]
   1ed6a:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1ed6c:	0642      	lsls	r2, r0, #25
   1ed6e:	d506      	bpl.n	1ed7e <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   1ed70:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1ed74:	2100      	movs	r1, #0
   1ed76:	6a03      	ldr	r3, [r0, #32]
   1ed78:	685b      	ldr	r3, [r3, #4]
   1ed7a:	4798      	blx	r3
}
   1ed7c:	e7f1      	b.n	1ed62 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1ed7e:	0743      	lsls	r3, r0, #29
   1ed80:	d5ef      	bpl.n	1ed62 <rpmsg_init_vdev_with_config+0x156>
   1ed82:	e784      	b.n	1ec8e <rpmsg_init_vdev_with_config+0x82>
   1ed84:	464b      	mov	r3, r9
   1ed86:	e796      	b.n	1ecb6 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   1ed88:	f1b8 0f01 	cmp.w	r8, #1
   1ed8c:	d1b1      	bne.n	1ecf2 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   1ed8e:	4b2e      	ldr	r3, [pc, #184]	; (1ee48 <rpmsg_init_vdev_with_config+0x23c>)
   1ed90:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   1ed92:	4b2c      	ldr	r3, [pc, #176]	; (1ee44 <rpmsg_init_vdev_with_config+0x238>)
   1ed94:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   1ed96:	4b2e      	ldr	r3, [pc, #184]	; (1ee50 <rpmsg_init_vdev_with_config+0x244>)
   1ed98:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   1ed9a:	4b2c      	ldr	r3, [pc, #176]	; (1ee4c <rpmsg_init_vdev_with_config+0x240>)
   1ed9c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1ed9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1eda0:	699b      	ldr	r3, [r3, #24]
   1eda2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   1eda6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1eda8:	681b      	ldr	r3, [r3, #0]
   1edaa:	e7a0      	b.n	1ecee <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1edac:	4648      	mov	r0, r9
   1edae:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   1edb2:	f00a fa28 	bl	29206 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1edb6:	4605      	mov	r5, r0
   1edb8:	b1c8      	cbz	r0, 1edee <rpmsg_init_vdev_with_config+0x1e2>
   1edba:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1edbc:	9008      	str	r0, [sp, #32]
   1edbe:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1edc0:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1edc2:	2200      	movs	r2, #0
   1edc4:	4281      	cmp	r1, r0
   1edc6:	bf28      	it	cs
   1edc8:	f04f 31ff 	movcs.w	r1, #4294967295
   1edcc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1edd0:	4630      	mov	r0, r6
   1edd2:	f009 feb1 	bl	28b38 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1edd6:	9500      	str	r5, [sp, #0]
   1edd8:	2301      	movs	r3, #1
   1edda:	2200      	movs	r2, #0
   1eddc:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1ede0:	a908      	add	r1, sp, #32
   1ede2:	f009 ff4f 	bl	28c84 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1ede6:	b918      	cbnz	r0, 1edf0 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1ede8:	f10a 0a01 	add.w	sl, sl, #1
   1edec:	e7a4      	b.n	1ed38 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   1edee:	4819      	ldr	r0, [pc, #100]	; (1ee54 <rpmsg_init_vdev_with_config+0x248>)
   1edf0:	4607      	mov	r7, r0
   1edf2:	e716      	b.n	1ec22 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   1edf4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1edf8:	e9c4 4400 	strd	r4, r4, [r4]
   1edfc:	2b00      	cmp	r3, #0
   1edfe:	f43f af10 	beq.w	1ec22 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   1ee02:	2300      	movs	r3, #0
   1ee04:	9302      	str	r3, [sp, #8]
   1ee06:	4b14      	ldr	r3, [pc, #80]	; (1ee58 <rpmsg_init_vdev_with_config+0x24c>)
   1ee08:	4620      	mov	r0, r4
   1ee0a:	9301      	str	r3, [sp, #4]
   1ee0c:	2335      	movs	r3, #53	; 0x35
   1ee0e:	4a13      	ldr	r2, [pc, #76]	; (1ee5c <rpmsg_init_vdev_with_config+0x250>)
   1ee10:	9300      	str	r3, [sp, #0]
   1ee12:	f104 0108 	add.w	r1, r4, #8
   1ee16:	f7ff fd0f 	bl	1e838 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   1ee1a:	f1b8 0f00 	cmp.w	r8, #0
   1ee1e:	f47f af00 	bne.w	1ec22 <rpmsg_init_vdev_with_config+0x16>
   1ee22:	e794      	b.n	1ed4e <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   1ee24:	4f0b      	ldr	r7, [pc, #44]	; (1ee54 <rpmsg_init_vdev_with_config+0x248>)
   1ee26:	e6fc      	b.n	1ec22 <rpmsg_init_vdev_with_config+0x16>
   1ee28:	fffff82d 	.word	0xfffff82d
   1ee2c:	0001eb3d 	.word	0x0001eb3d
   1ee30:	00029067 	.word	0x00029067
   1ee34:	000291c7 	.word	0x000291c7
   1ee38:	00029225 	.word	0x00029225
   1ee3c:	0001e979 	.word	0x0001e979
   1ee40:	00029087 	.word	0x00029087
   1ee44:	0003053a 	.word	0x0003053a
   1ee48:	00030540 	.word	0x00030540
   1ee4c:	0001ea61 	.word	0x0001ea61
   1ee50:	00029075 	.word	0x00029075
   1ee54:	fffff82e 	.word	0xfffff82e
   1ee58:	000290c9 	.word	0x000290c9
   1ee5c:	00030546 	.word	0x00030546

0001ee60 <rpmsg_init_vdev>:
{
   1ee60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee62:	4605      	mov	r5, r0
   1ee64:	460e      	mov	r6, r1
   1ee66:	4617      	mov	r7, r2
   1ee68:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1ee6a:	4a07      	ldr	r2, [pc, #28]	; (1ee88 <rpmsg_init_vdev+0x28>)
   1ee6c:	ac03      	add	r4, sp, #12
   1ee6e:	ca07      	ldmia	r2, {r0, r1, r2}
   1ee70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   1ee74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ee76:	4631      	mov	r1, r6
   1ee78:	9200      	str	r2, [sp, #0]
   1ee7a:	4628      	mov	r0, r5
   1ee7c:	463a      	mov	r2, r7
   1ee7e:	9401      	str	r4, [sp, #4]
   1ee80:	f7ff fec4 	bl	1ec0c <rpmsg_init_vdev_with_config>
}
   1ee84:	b007      	add	sp, #28
   1ee86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee88:	0002a898 	.word	0x0002a898

0001ee8c <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1ee8c:	2203      	movs	r2, #3
   1ee8e:	4b11      	ldr	r3, [pc, #68]	; (1eed4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1ee90:	4911      	ldr	r1, [pc, #68]	; (1eed8 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1ee92:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1ee94:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ee96:	4a11      	ldr	r2, [pc, #68]	; (1eedc <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1ee98:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ee9a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1ee9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1eea0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1eea2:	2200      	movs	r2, #0
   1eea4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1eea6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1eea8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1eeaa:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1eeac:	490c      	ldr	r1, [pc, #48]	; (1eee0 <_DoInit+0x54>)
   1eeae:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1eeb0:	2110      	movs	r1, #16
   1eeb2:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1eeb4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1eeb6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1eeb8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1eeba:	4a0a      	ldr	r2, [pc, #40]	; (1eee4 <_DoInit+0x58>)
   1eebc:	6812      	ldr	r2, [r2, #0]
   1eebe:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1eec2:	4a09      	ldr	r2, [pc, #36]	; (1eee8 <_DoInit+0x5c>)
   1eec4:	6810      	ldr	r0, [r2, #0]
   1eec6:	8892      	ldrh	r2, [r2, #4]
   1eec8:	6018      	str	r0, [r3, #0]
   1eeca:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1eecc:	2220      	movs	r2, #32
   1eece:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1eed0:	4770      	bx	lr
   1eed2:	bf00      	nop
   1eed4:	2002145c 	.word	0x2002145c
   1eed8:	00030549 	.word	0x00030549
   1eedc:	20021e92 	.word	0x20021e92
   1eee0:	20021e82 	.word	0x20021e82
   1eee4:	00030552 	.word	0x00030552
   1eee8:	00030556 	.word	0x00030556

0001eeec <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1eeec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1eef0:	f04f 0b18 	mov.w	fp, #24
   1eef4:	4f20      	ldr	r7, [pc, #128]	; (1ef78 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1eef6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1eef8:	fb0b 7200 	mla	r2, fp, r0, r7
   1eefc:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1eefe:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ef00:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ef02:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ef04:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ef06:	d831      	bhi.n	1ef6c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1ef08:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1ef0c:	ebaa 0905 	sub.w	r9, sl, r5
   1ef10:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1ef14:	4294      	cmp	r4, r2
   1ef16:	d811      	bhi.n	1ef3c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ef18:	2318      	movs	r3, #24
   1ef1a:	fb06 3303 	mla	r3, r6, r3, r3
   1ef1e:	443b      	add	r3, r7
   1ef20:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ef22:	4622      	mov	r2, r4
   1ef24:	4641      	mov	r1, r8
   1ef26:	4428      	add	r0, r5
   1ef28:	f00a fc5f 	bl	297ea <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1ef2c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1ef2e:	2318      	movs	r3, #24
      return 1;
   1ef30:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1ef32:	fb03 7306 	mla	r3, r3, r6, r7
   1ef36:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1ef38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1ef3c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1ef3e:	429c      	cmp	r4, r3
   1ef40:	d818      	bhi.n	1ef74 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ef42:	fb00 bb0b 	mla	fp, r0, fp, fp
   1ef46:	44bb      	add	fp, r7
   1ef48:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ef4c:	464a      	mov	r2, r9
   1ef4e:	4428      	add	r0, r5
   1ef50:	442c      	add	r4, r5
   1ef52:	f00a fc4a 	bl	297ea <memcpy>
      if (NumBytes) {
   1ef56:	ebb4 040a 	subs.w	r4, r4, sl
   1ef5a:	d0e8      	beq.n	1ef2e <SEGGER_RTT_WriteSkipNoLock+0x42>
   1ef5c:	4622      	mov	r2, r4
   1ef5e:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ef62:	eb08 0109 	add.w	r1, r8, r9
   1ef66:	f00a fc40 	bl	297ea <memcpy>
      return 1;
   1ef6a:	e7e0      	b.n	1ef2e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1ef6c:	3b01      	subs	r3, #1
   1ef6e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1ef70:	42a3      	cmp	r3, r4
   1ef72:	d2d1      	bcs.n	1ef18 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1ef74:	2000      	movs	r0, #0
   1ef76:	e7df      	b.n	1ef38 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1ef78:	2002145c 	.word	0x2002145c

0001ef7c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1ef7c:	2218      	movs	r2, #24
   1ef7e:	4b03      	ldr	r3, [pc, #12]	; (1ef8c <SEGGER_RTT_HasDataUp+0x10>)
   1ef80:	fb02 3300 	mla	r3, r2, r0, r3
   1ef84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1ef86:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1ef88:	1a80      	subs	r0, r0, r2
   1ef8a:	4770      	bx	lr
   1ef8c:	2002145c 	.word	0x2002145c

0001ef90 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1ef90:	4b01      	ldr	r3, [pc, #4]	; (1ef98 <z_impl_z_errno+0x8>)
   1ef92:	6898      	ldr	r0, [r3, #8]
}
   1ef94:	3064      	adds	r0, #100	; 0x64
   1ef96:	4770      	bx	lr
   1ef98:	20021504 	.word	0x20021504

0001ef9c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ef9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efa0:	4605      	mov	r5, r0
   1efa2:	b086      	sub	sp, #24
   1efa4:	460f      	mov	r7, r1
	__asm__ volatile(
   1efa6:	f04f 0320 	mov.w	r3, #32
   1efaa:	f3ef 8811 	mrs	r8, BASEPRI
   1efae:	f383 8812 	msr	BASEPRI_MAX, r3
   1efb2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1efb6:	f002 fe65 	bl	21c84 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1efba:	2400      	movs	r4, #0
   1efbc:	2d04      	cmp	r5, #4
   1efbe:	bf96      	itet	ls
   1efc0:	4b28      	ldrls	r3, [pc, #160]	; (1f064 <z_fatal_error+0xc8>)
   1efc2:	4b29      	ldrhi	r3, [pc, #164]	; (1f068 <z_fatal_error+0xcc>)
   1efc4:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1efc8:	4606      	mov	r6, r0
   1efca:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1efce:	4b27      	ldr	r3, [pc, #156]	; (1f06c <z_fatal_error+0xd0>)
   1efd0:	2201      	movs	r2, #1
   1efd2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1efd6:	4620      	mov	r0, r4
   1efd8:	4623      	mov	r3, r4
   1efda:	4925      	ldr	r1, [pc, #148]	; (1f070 <z_fatal_error+0xd4>)
   1efdc:	9503      	str	r5, [sp, #12]
   1efde:	9400      	str	r4, [sp, #0]
   1efe0:	f00a f9cc 	bl	2937c <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1efe4:	b16f      	cbz	r7, 1f002 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1efe6:	69fb      	ldr	r3, [r7, #28]
   1efe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1efec:	b14b      	cbz	r3, 1f002 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   1efee:	4b21      	ldr	r3, [pc, #132]	; (1f074 <z_fatal_error+0xd8>)
   1eff0:	2201      	movs	r2, #1
   1eff2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1eff6:	4620      	mov	r0, r4
   1eff8:	4623      	mov	r3, r4
   1effa:	491d      	ldr	r1, [pc, #116]	; (1f070 <z_fatal_error+0xd4>)
   1effc:	9400      	str	r4, [sp, #0]
   1effe:	f00a f9bd 	bl	2937c <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f002:	b12e      	cbz	r6, 1f010 <z_fatal_error+0x74>
   1f004:	4630      	mov	r0, r6
   1f006:	f00a f9f4 	bl	293f2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f00a:	b108      	cbz	r0, 1f010 <z_fatal_error+0x74>
   1f00c:	7803      	ldrb	r3, [r0, #0]
   1f00e:	b903      	cbnz	r3, 1f012 <z_fatal_error+0x76>
		thread_name = "unknown";
   1f010:	4819      	ldr	r0, [pc, #100]	; (1f078 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f012:	4b1a      	ldr	r3, [pc, #104]	; (1f07c <z_fatal_error+0xe0>)
   1f014:	2201      	movs	r2, #1
   1f016:	9302      	str	r3, [sp, #8]
   1f018:	2300      	movs	r3, #0
   1f01a:	e9cd 6003 	strd	r6, r0, [sp, #12]
   1f01e:	e9cd 3300 	strd	r3, r3, [sp]
   1f022:	4618      	mov	r0, r3
   1f024:	4912      	ldr	r1, [pc, #72]	; (1f070 <z_fatal_error+0xd4>)
   1f026:	f00a f9a9 	bl	2937c <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1f02a:	4639      	mov	r1, r7
   1f02c:	4628      	mov	r0, r5
   1f02e:	f7fd fb7d 	bl	1c72c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1f032:	2d04      	cmp	r5, #4
   1f034:	d10c      	bne.n	1f050 <z_fatal_error+0xb4>
   1f036:	4912      	ldr	r1, [pc, #72]	; (1f080 <z_fatal_error+0xe4>)
   1f038:	2393      	movs	r3, #147	; 0x93
   1f03a:	4a12      	ldr	r2, [pc, #72]	; (1f084 <z_fatal_error+0xe8>)
   1f03c:	4812      	ldr	r0, [pc, #72]	; (1f088 <z_fatal_error+0xec>)
   1f03e:	f005 fe6e 	bl	24d1e <assert_print>
   1f042:	4812      	ldr	r0, [pc, #72]	; (1f08c <z_fatal_error+0xf0>)
   1f044:	f005 fe6b 	bl	24d1e <assert_print>
   1f048:	2193      	movs	r1, #147	; 0x93
   1f04a:	480e      	ldr	r0, [pc, #56]	; (1f084 <z_fatal_error+0xe8>)
   1f04c:	f005 fe60 	bl	24d10 <assert_post_action>
	__asm__ volatile(
   1f050:	f388 8811 	msr	BASEPRI, r8
   1f054:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f058:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1f05a:	b006      	add	sp, #24
   1f05c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f060:	f7f1 bd4a 	b.w	10af8 <z_impl_k_thread_abort>
   1f064:	0002b5c8 	.word	0x0002b5c8
   1f068:	0003055d 	.word	0x0003055d
   1f06c:	00030573 	.word	0x00030573
   1f070:	0002a7f8 	.word	0x0002a7f8
   1f074:	0003059b 	.word	0x0003059b
   1f078:	0003056b 	.word	0x0003056b
   1f07c:	000305bc 	.word	0x000305bc
   1f080:	000305f6 	.word	0x000305f6
   1f084:	000305d4 	.word	0x000305d4
   1f088:	0002b6e9 	.word	0x0002b6e9
   1f08c:	00030613 	.word	0x00030613

0001f090 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f090:	4b0f      	ldr	r3, [pc, #60]	; (1f0d0 <z_sys_init_run_level+0x40>)
{
   1f092:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f094:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f098:	3001      	adds	r0, #1
   1f09a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f09e:	42a6      	cmp	r6, r4
   1f0a0:	d800      	bhi.n	1f0a4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1f0a2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1f0a4:	e9d4 3500 	ldrd	r3, r5, [r4]
   1f0a8:	4628      	mov	r0, r5
   1f0aa:	4798      	blx	r3
		if (dev != NULL) {
   1f0ac:	b16d      	cbz	r5, 1f0ca <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1f0ae:	b138      	cbz	r0, 1f0c0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1f0b0:	2800      	cmp	r0, #0
   1f0b2:	bfb8      	it	lt
   1f0b4:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1f0b6:	28ff      	cmp	r0, #255	; 0xff
   1f0b8:	bfa8      	it	ge
   1f0ba:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1f0bc:	68eb      	ldr	r3, [r5, #12]
   1f0be:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1f0c0:	68ea      	ldr	r2, [r5, #12]
   1f0c2:	7853      	ldrb	r3, [r2, #1]
   1f0c4:	f043 0301 	orr.w	r3, r3, #1
   1f0c8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f0ca:	3408      	adds	r4, #8
   1f0cc:	e7e7      	b.n	1f09e <z_sys_init_run_level+0xe>
   1f0ce:	bf00      	nop
   1f0d0:	0002b5dc 	.word	0x0002b5dc

0001f0d4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f0d4:	2201      	movs	r2, #1
{
   1f0d6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1f0d8:	4b09      	ldr	r3, [pc, #36]	; (1f100 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f0da:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1f0dc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f0de:	f7ff ffd7 	bl	1f090 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f0e2:	f003 fed7 	bl	22e94 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1f0e6:	2004      	movs	r0, #4
   1f0e8:	f7ff ffd2 	bl	1f090 <z_sys_init_run_level>

	z_init_static_threads();
   1f0ec:	f000 fb66 	bl	1f7bc <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1f0f0:	f7ec fc90 	bl	ba14 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f0f4:	4a03      	ldr	r2, [pc, #12]	; (1f104 <bg_thread_main+0x30>)
   1f0f6:	7b13      	ldrb	r3, [r2, #12]
   1f0f8:	f023 0301 	bic.w	r3, r3, #1
   1f0fc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f0fe:	bd08      	pop	{r3, pc}
   1f100:	20022292 	.word	0x20022292
   1f104:	20009c90 	.word	0x20009c90

0001f108 <z_bss_zero>:
{
   1f108:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1f10a:	4803      	ldr	r0, [pc, #12]	; (1f118 <z_bss_zero+0x10>)
   1f10c:	4a03      	ldr	r2, [pc, #12]	; (1f11c <z_bss_zero+0x14>)
   1f10e:	2100      	movs	r1, #0
   1f110:	1a12      	subs	r2, r2, r0
   1f112:	f00a f943 	bl	2939c <z_early_memset>
}
   1f116:	bd08      	pop	{r3, pc}
   1f118:	20008d70 	.word	0x20008d70
   1f11c:	20022294 	.word	0x20022294

0001f120 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   1f120:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1f122:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1f124:	4e13      	ldr	r6, [pc, #76]	; (1f174 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1f126:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   1f128:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1f12c:	2300      	movs	r3, #0
{
   1f12e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1f130:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f134:	220f      	movs	r2, #15
   1f136:	9301      	str	r3, [sp, #4]
   1f138:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f13c:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   1f13e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f142:	4d0d      	ldr	r5, [pc, #52]	; (1f178 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   1f144:	490d      	ldr	r1, [pc, #52]	; (1f17c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f146:	fb03 5500 	mla	r5, r3, r0, r5
{
   1f14a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1f14c:	fb02 1100 	mla	r1, r2, r0, r1
   1f150:	4b0b      	ldr	r3, [pc, #44]	; (1f180 <z_init_cpu+0x60>)
   1f152:	4630      	mov	r0, r6
   1f154:	9500      	str	r5, [sp, #0]
   1f156:	f000 fa97 	bl	1f688 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f15a:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   1f15c:	752c      	strb	r4, [r5, #20]
   1f15e:	f023 0304 	bic.w	r3, r3, #4
   1f162:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f164:	4b07      	ldr	r3, [pc, #28]	; (1f184 <z_init_cpu+0x64>)
   1f166:	3401      	adds	r4, #1
   1f168:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1f16c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1f16e:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1f170:	b006      	add	sp, #24
   1f172:	bd70      	pop	{r4, r5, r6, pc}
   1f174:	20009c08 	.word	0x20009c08
   1f178:	20021504 	.word	0x20021504
   1f17c:	20032fb8 	.word	0x20032fb8
   1f180:	0001f90d 	.word	0x0001f90d
   1f184:	200327b8 	.word	0x200327b8

0001f188 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1f188:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f18a:	2000      	movs	r0, #0
{
   1f18c:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f18e:	f7ff ff7f 	bl	1f090 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1f192:	4b2f      	ldr	r3, [pc, #188]	; (1f250 <z_cstart+0xc8>)
	uint32_t msp =
   1f194:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f198:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1f19c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f1a0:	2400      	movs	r4, #0
   1f1a2:	23e0      	movs	r3, #224	; 0xe0
   1f1a4:	4d2b      	ldr	r5, [pc, #172]	; (1f254 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1f1a6:	4e2c      	ldr	r6, [pc, #176]	; (1f258 <z_cstart+0xd0>)
   1f1a8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f1ac:	77ec      	strb	r4, [r5, #31]
   1f1ae:	762c      	strb	r4, [r5, #24]
   1f1b0:	766c      	strb	r4, [r5, #25]
   1f1b2:	76ac      	strb	r4, [r5, #26]
   1f1b4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f1b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f1ba:	4f28      	ldr	r7, [pc, #160]	; (1f25c <z_cstart+0xd4>)
   1f1bc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f1c0:	626b      	str	r3, [r5, #36]	; 0x24
   1f1c2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f1c6:	f7f1 fbfb 	bl	109c0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f1ca:	f7f0 ff3d 	bl	10048 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f1ce:	f04f 33ff 	mov.w	r3, #4294967295
   1f1d2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f1d4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1f1d6:	f7f1 fe5d 	bl	10e94 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1f1da:	f7f1 fca3 	bl	10b24 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1f1de:	f7ef f801 	bl	e1e4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f1e2:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1f1e6:	ad06      	add	r5, sp, #24
   1f1e8:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f1ea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1f1ee:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1f1f2:	f003 fe31 	bl	22e58 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1f1f6:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1f1f8:	f00a f8b4 	bl	29364 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1f1fc:	2001      	movs	r0, #1
   1f1fe:	f7ff ff47 	bl	1f090 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f202:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1f204:	4d16      	ldr	r5, [pc, #88]	; (1f260 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f206:	f7ff ff43 	bl	1f090 <z_sys_init_run_level>
	z_sched_init();
   1f20a:	f002 fbc1 	bl	21990 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f20e:	4b15      	ldr	r3, [pc, #84]	; (1f264 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1f210:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f212:	9305      	str	r3, [sp, #20]
   1f214:	2301      	movs	r3, #1
   1f216:	4914      	ldr	r1, [pc, #80]	; (1f268 <z_cstart+0xe0>)
   1f218:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f21c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1f220:	4628      	mov	r0, r5
   1f222:	463b      	mov	r3, r7
   1f224:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f228:	9400      	str	r4, [sp, #0]
   1f22a:	f000 fa2d 	bl	1f688 <z_setup_new_thread>
   1f22e:	4606      	mov	r6, r0
   1f230:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1f232:	4628      	mov	r0, r5
   1f234:	f022 0204 	bic.w	r2, r2, #4
   1f238:	736a      	strb	r2, [r5, #13]
   1f23a:	f001 fd81 	bl	20d40 <z_ready_thread>
	z_init_cpu(0);
   1f23e:	4620      	mov	r0, r4
   1f240:	f7ff ff6e 	bl	1f120 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f244:	463a      	mov	r2, r7
   1f246:	4631      	mov	r1, r6
   1f248:	4628      	mov	r0, r5
   1f24a:	f7f1 f867 	bl	1031c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f24e:	bf00      	nop
   1f250:	200327b8 	.word	0x200327b8
   1f254:	e000ed00 	.word	0xe000ed00
   1f258:	20021504 	.word	0x20021504
   1f25c:	0001f0d5 	.word	0x0001f0d5
   1f260:	20009c90 	.word	0x20009c90
   1f264:	00030692 	.word	0x00030692
   1f268:	200330f8 	.word	0x200330f8

0001f26c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1f26c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f26e:	4c0d      	ldr	r4, [pc, #52]	; (1f2a4 <statics_init+0x38>)
   1f270:	4d0d      	ldr	r5, [pc, #52]	; (1f2a8 <statics_init+0x3c>)
   1f272:	42ac      	cmp	r4, r5
   1f274:	d913      	bls.n	1f29e <statics_init+0x32>
   1f276:	490d      	ldr	r1, [pc, #52]	; (1f2ac <statics_init+0x40>)
   1f278:	2318      	movs	r3, #24
   1f27a:	4a0d      	ldr	r2, [pc, #52]	; (1f2b0 <statics_init+0x44>)
   1f27c:	480d      	ldr	r0, [pc, #52]	; (1f2b4 <statics_init+0x48>)
   1f27e:	f005 fd4e 	bl	24d1e <assert_print>
   1f282:	480d      	ldr	r0, [pc, #52]	; (1f2b8 <statics_init+0x4c>)
   1f284:	f005 fd4b 	bl	24d1e <assert_print>
   1f288:	2118      	movs	r1, #24
   1f28a:	4809      	ldr	r0, [pc, #36]	; (1f2b0 <statics_init+0x44>)
   1f28c:	f005 fd40 	bl	24d10 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f290:	4620      	mov	r0, r4
   1f292:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f296:	f00a f885 	bl	293a4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f29a:	3418      	adds	r4, #24
   1f29c:	e7e9      	b.n	1f272 <statics_init+0x6>
   1f29e:	d3f7      	bcc.n	1f290 <statics_init+0x24>
		}
	}
	return 0;
}
   1f2a0:	2000      	movs	r0, #0
   1f2a2:	bd38      	pop	{r3, r4, r5, pc}
   1f2a4:	20008a68 	.word	0x20008a68
   1f2a8:	20008a80 	.word	0x20008a80
   1f2ac:	000306bc 	.word	0x000306bc
   1f2b0:	0003069a 	.word	0x0003069a
   1f2b4:	0002b6e9 	.word	0x0002b6e9
   1f2b8:	0002c7cd 	.word	0x0002c7cd

0001f2bc <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1f2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2c0:	b085      	sub	sp, #20
   1f2c2:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1f2c6:	4680      	mov	r8, r0
   1f2c8:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f2ca:	4648      	mov	r0, r9
   1f2cc:	4659      	mov	r1, fp
{
   1f2ce:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f2d0:	f00a f986 	bl	295e0 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1f2d4:	f1bb 3fff 	cmp.w	fp, #4294967295
   1f2d8:	bf08      	it	eq
   1f2da:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f2de:	4606      	mov	r6, r0
   1f2e0:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1f2e2:	bf04      	itt	eq
   1f2e4:	f04f 36ff 	moveq.w	r6, #4294967295
   1f2e8:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f2ec:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   1f2f0:	f04f 0320 	mov.w	r3, #32
   1f2f4:	f3ef 8511 	mrs	r5, BASEPRI
   1f2f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f300:	4620      	mov	r0, r4
   1f302:	f000 fadf 	bl	1f8c4 <z_spin_lock_valid>
   1f306:	b960      	cbnz	r0, 1f322 <k_heap_aligned_alloc+0x66>
   1f308:	2394      	movs	r3, #148	; 0x94
   1f30a:	4a33      	ldr	r2, [pc, #204]	; (1f3d8 <k_heap_aligned_alloc+0x11c>)
   1f30c:	4933      	ldr	r1, [pc, #204]	; (1f3dc <k_heap_aligned_alloc+0x120>)
   1f30e:	4834      	ldr	r0, [pc, #208]	; (1f3e0 <k_heap_aligned_alloc+0x124>)
   1f310:	f005 fd05 	bl	24d1e <assert_print>
   1f314:	4621      	mov	r1, r4
   1f316:	4833      	ldr	r0, [pc, #204]	; (1f3e4 <k_heap_aligned_alloc+0x128>)
   1f318:	f005 fd01 	bl	24d1e <assert_print>
   1f31c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f31e:	482e      	ldr	r0, [pc, #184]	; (1f3d8 <k_heap_aligned_alloc+0x11c>)
   1f320:	e031      	b.n	1f386 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   1f322:	4620      	mov	r0, r4
   1f324:	f000 faea 	bl	1f8fc <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f328:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1f32c:	b113      	cbz	r3, 1f334 <k_heap_aligned_alloc+0x78>
   1f32e:	ea5b 0909 	orrs.w	r9, fp, r9
   1f332:	d11d      	bne.n	1f370 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f334:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1f338:	4652      	mov	r2, sl
   1f33a:	4640      	mov	r0, r8
   1f33c:	9903      	ldr	r1, [sp, #12]
   1f33e:	f7ed fcf9 	bl	cd34 <sys_heap_aligned_alloc>
   1f342:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1f344:	f003 f88c 	bl	22460 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1f348:	f1b9 0f00 	cmp.w	r9, #0
   1f34c:	d01d      	beq.n	1f38a <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f34e:	4620      	mov	r0, r4
   1f350:	f000 fac6 	bl	1f8e0 <z_spin_unlock_valid>
   1f354:	2800      	cmp	r0, #0
   1f356:	d137      	bne.n	1f3c8 <k_heap_aligned_alloc+0x10c>
   1f358:	23c2      	movs	r3, #194	; 0xc2
   1f35a:	4a1f      	ldr	r2, [pc, #124]	; (1f3d8 <k_heap_aligned_alloc+0x11c>)
   1f35c:	4922      	ldr	r1, [pc, #136]	; (1f3e8 <k_heap_aligned_alloc+0x12c>)
   1f35e:	4820      	ldr	r0, [pc, #128]	; (1f3e0 <k_heap_aligned_alloc+0x124>)
   1f360:	f005 fcdd 	bl	24d1e <assert_print>
   1f364:	4621      	mov	r1, r4
   1f366:	4821      	ldr	r0, [pc, #132]	; (1f3ec <k_heap_aligned_alloc+0x130>)
   1f368:	f005 fcd9 	bl	24d1e <assert_print>
   1f36c:	21c2      	movs	r1, #194	; 0xc2
   1f36e:	e7d6      	b.n	1f31e <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1f370:	491f      	ldr	r1, [pc, #124]	; (1f3f0 <k_heap_aligned_alloc+0x134>)
   1f372:	234c      	movs	r3, #76	; 0x4c
   1f374:	4a1f      	ldr	r2, [pc, #124]	; (1f3f4 <k_heap_aligned_alloc+0x138>)
   1f376:	481a      	ldr	r0, [pc, #104]	; (1f3e0 <k_heap_aligned_alloc+0x124>)
   1f378:	f005 fcd1 	bl	24d1e <assert_print>
   1f37c:	481e      	ldr	r0, [pc, #120]	; (1f3f8 <k_heap_aligned_alloc+0x13c>)
   1f37e:	f005 fcce 	bl	24d1e <assert_print>
   1f382:	214c      	movs	r1, #76	; 0x4c
   1f384:	481b      	ldr	r0, [pc, #108]	; (1f3f4 <k_heap_aligned_alloc+0x138>)
   1f386:	f005 fcc3 	bl	24d10 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1f38a:	1a30      	subs	r0, r6, r0
   1f38c:	eb67 0101 	sbc.w	r1, r7, r1
   1f390:	2801      	cmp	r0, #1
   1f392:	f171 0300 	sbcs.w	r3, r1, #0
   1f396:	dbda      	blt.n	1f34e <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f398:	e9cd 0100 	strd	r0, r1, [sp]
   1f39c:	465a      	mov	r2, fp
   1f39e:	4629      	mov	r1, r5
   1f3a0:	4620      	mov	r0, r4
   1f3a2:	f002 f827 	bl	213f4 <z_pend_curr>
   1f3a6:	f04f 0320 	mov.w	r3, #32
   1f3aa:	f3ef 8511 	mrs	r5, BASEPRI
   1f3ae:	f383 8812 	msr	BASEPRI_MAX, r3
   1f3b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f3b6:	4620      	mov	r0, r4
   1f3b8:	f000 fa84 	bl	1f8c4 <z_spin_lock_valid>
   1f3bc:	2800      	cmp	r0, #0
   1f3be:	d0a3      	beq.n	1f308 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1f3c0:	4620      	mov	r0, r4
   1f3c2:	f000 fa9b 	bl	1f8fc <z_spin_lock_set_owner>
	return k;
   1f3c6:	e7b7      	b.n	1f338 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   1f3c8:	f385 8811 	msr	BASEPRI, r5
   1f3cc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1f3d0:	4648      	mov	r0, r9
   1f3d2:	b005      	add	sp, #20
   1f3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3d8:	0002c4fc 	.word	0x0002c4fc
   1f3dc:	0002c555 	.word	0x0002c555
   1f3e0:	0002b6e9 	.word	0x0002b6e9
   1f3e4:	0002c56a 	.word	0x0002c56a
   1f3e8:	0002c529 	.word	0x0002c529
   1f3ec:	0002c540 	.word	0x0002c540
   1f3f0:	000306d2 	.word	0x000306d2
   1f3f4:	0003069a 	.word	0x0003069a
   1f3f8:	0002f302 	.word	0x0002f302

0001f3fc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1f3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3fe:	4605      	mov	r5, r0
   1f400:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f402:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   1f406:	f04f 0320 	mov.w	r3, #32
   1f40a:	f3ef 8711 	mrs	r7, BASEPRI
   1f40e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f412:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f416:	4620      	mov	r0, r4
   1f418:	f000 fa54 	bl	1f8c4 <z_spin_lock_valid>
   1f41c:	b968      	cbnz	r0, 1f43a <k_heap_free+0x3e>
   1f41e:	2394      	movs	r3, #148	; 0x94
   1f420:	4a19      	ldr	r2, [pc, #100]	; (1f488 <k_heap_free+0x8c>)
   1f422:	491a      	ldr	r1, [pc, #104]	; (1f48c <k_heap_free+0x90>)
   1f424:	481a      	ldr	r0, [pc, #104]	; (1f490 <k_heap_free+0x94>)
   1f426:	f005 fc7a 	bl	24d1e <assert_print>
   1f42a:	4621      	mov	r1, r4
   1f42c:	4819      	ldr	r0, [pc, #100]	; (1f494 <k_heap_free+0x98>)
   1f42e:	f005 fc76 	bl	24d1e <assert_print>
   1f432:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f434:	4814      	ldr	r0, [pc, #80]	; (1f488 <k_heap_free+0x8c>)
   1f436:	f005 fc6b 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f43a:	4620      	mov	r0, r4
   1f43c:	f000 fa5e 	bl	1f8fc <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1f440:	4628      	mov	r0, r5
   1f442:	4631      	mov	r1, r6
   1f444:	f7ed fc30 	bl	cca8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1f448:	f105 000c 	add.w	r0, r5, #12
   1f44c:	f00a f8ae 	bl	295ac <z_unpend_all>
   1f450:	b128      	cbz	r0, 1f45e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   1f452:	4639      	mov	r1, r7
   1f454:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1f456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1f45a:	f001 bcfd 	b.w	20e58 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f45e:	4620      	mov	r0, r4
   1f460:	f000 fa3e 	bl	1f8e0 <z_spin_unlock_valid>
   1f464:	b958      	cbnz	r0, 1f47e <k_heap_free+0x82>
   1f466:	23c2      	movs	r3, #194	; 0xc2
   1f468:	4a07      	ldr	r2, [pc, #28]	; (1f488 <k_heap_free+0x8c>)
   1f46a:	490b      	ldr	r1, [pc, #44]	; (1f498 <k_heap_free+0x9c>)
   1f46c:	4808      	ldr	r0, [pc, #32]	; (1f490 <k_heap_free+0x94>)
   1f46e:	f005 fc56 	bl	24d1e <assert_print>
   1f472:	4621      	mov	r1, r4
   1f474:	4809      	ldr	r0, [pc, #36]	; (1f49c <k_heap_free+0xa0>)
   1f476:	f005 fc52 	bl	24d1e <assert_print>
   1f47a:	21c2      	movs	r1, #194	; 0xc2
   1f47c:	e7da      	b.n	1f434 <k_heap_free+0x38>
	__asm__ volatile(
   1f47e:	f387 8811 	msr	BASEPRI, r7
   1f482:	f3bf 8f6f 	isb	sy
}
   1f486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f488:	0002c4fc 	.word	0x0002c4fc
   1f48c:	0002c555 	.word	0x0002c555
   1f490:	0002b6e9 	.word	0x0002b6e9
   1f494:	0002c56a 	.word	0x0002c56a
   1f498:	0002c529 	.word	0x0002c529
   1f49c:	0002c540 	.word	0x0002c540

0001f4a0 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   1f4a0:	2000      	movs	r0, #0
{
   1f4a2:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f4a4:	4c0c      	ldr	r4, [pc, #48]	; (1f4d8 <init_mem_slab_module+0x38>)
   1f4a6:	4d0d      	ldr	r5, [pc, #52]	; (1f4dc <init_mem_slab_module+0x3c>)
   1f4a8:	42ac      	cmp	r4, r5
   1f4aa:	d913      	bls.n	1f4d4 <init_mem_slab_module+0x34>
   1f4ac:	490c      	ldr	r1, [pc, #48]	; (1f4e0 <init_mem_slab_module+0x40>)
   1f4ae:	233d      	movs	r3, #61	; 0x3d
   1f4b0:	4a0c      	ldr	r2, [pc, #48]	; (1f4e4 <init_mem_slab_module+0x44>)
   1f4b2:	480d      	ldr	r0, [pc, #52]	; (1f4e8 <init_mem_slab_module+0x48>)
   1f4b4:	f005 fc33 	bl	24d1e <assert_print>
   1f4b8:	480c      	ldr	r0, [pc, #48]	; (1f4ec <init_mem_slab_module+0x4c>)
   1f4ba:	f005 fc30 	bl	24d1e <assert_print>
   1f4be:	213d      	movs	r1, #61	; 0x3d
   1f4c0:	4808      	ldr	r0, [pc, #32]	; (1f4e4 <init_mem_slab_module+0x44>)
   1f4c2:	f005 fc25 	bl	24d10 <assert_post_action>
		rc = create_free_list(slab);
   1f4c6:	4620      	mov	r0, r4
   1f4c8:	f009 ff74 	bl	293b4 <create_free_list>
		if (rc < 0) {
   1f4cc:	2800      	cmp	r0, #0
   1f4ce:	db02      	blt.n	1f4d6 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f4d0:	3420      	adds	r4, #32
   1f4d2:	e7e9      	b.n	1f4a8 <init_mem_slab_module+0x8>
   1f4d4:	d3f7      	bcc.n	1f4c6 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   1f4d6:	bd38      	pop	{r3, r4, r5, pc}
   1f4d8:	20008a08 	.word	0x20008a08
   1f4dc:	20008a68 	.word	0x20008a68
   1f4e0:	0003073d 	.word	0x0003073d
   1f4e4:	00030718 	.word	0x00030718
   1f4e8:	0002b6e9 	.word	0x0002b6e9
   1f4ec:	0002c7cd 	.word	0x0002c7cd

0001f4f0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f4f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f4f4:	4604      	mov	r4, r0
   1f4f6:	460e      	mov	r6, r1
   1f4f8:	4690      	mov	r8, r2
   1f4fa:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1f4fc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f500:	f04f 0320 	mov.w	r3, #32
   1f504:	f3ef 8911 	mrs	r9, BASEPRI
   1f508:	f383 8812 	msr	BASEPRI_MAX, r3
   1f50c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f510:	4628      	mov	r0, r5
   1f512:	f000 f9d7 	bl	1f8c4 <z_spin_lock_valid>
   1f516:	b968      	cbnz	r0, 1f534 <k_mem_slab_alloc+0x44>
   1f518:	2394      	movs	r3, #148	; 0x94
   1f51a:	4a23      	ldr	r2, [pc, #140]	; (1f5a8 <k_mem_slab_alloc+0xb8>)
   1f51c:	4923      	ldr	r1, [pc, #140]	; (1f5ac <k_mem_slab_alloc+0xbc>)
   1f51e:	4824      	ldr	r0, [pc, #144]	; (1f5b0 <k_mem_slab_alloc+0xc0>)
   1f520:	f005 fbfd 	bl	24d1e <assert_print>
   1f524:	4629      	mov	r1, r5
   1f526:	4823      	ldr	r0, [pc, #140]	; (1f5b4 <k_mem_slab_alloc+0xc4>)
   1f528:	f005 fbf9 	bl	24d1e <assert_print>
   1f52c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f52e:	481e      	ldr	r0, [pc, #120]	; (1f5a8 <k_mem_slab_alloc+0xb8>)
   1f530:	f005 fbee 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f534:	4628      	mov	r0, r5
   1f536:	f000 f9e1 	bl	1f8fc <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1f53a:	69a3      	ldr	r3, [r4, #24]
   1f53c:	b1b3      	cbz	r3, 1f56c <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   1f53e:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f540:	681b      	ldr	r3, [r3, #0]
   1f542:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1f544:	69e3      	ldr	r3, [r4, #28]
   1f546:	3301      	adds	r3, #1
   1f548:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f54a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f54c:	4628      	mov	r0, r5
   1f54e:	f000 f9c7 	bl	1f8e0 <z_spin_unlock_valid>
   1f552:	bb18      	cbnz	r0, 1f59c <k_mem_slab_alloc+0xac>
   1f554:	23c2      	movs	r3, #194	; 0xc2
   1f556:	4a14      	ldr	r2, [pc, #80]	; (1f5a8 <k_mem_slab_alloc+0xb8>)
   1f558:	4917      	ldr	r1, [pc, #92]	; (1f5b8 <k_mem_slab_alloc+0xc8>)
   1f55a:	4815      	ldr	r0, [pc, #84]	; (1f5b0 <k_mem_slab_alloc+0xc0>)
   1f55c:	f005 fbdf 	bl	24d1e <assert_print>
   1f560:	4629      	mov	r1, r5
   1f562:	4816      	ldr	r0, [pc, #88]	; (1f5bc <k_mem_slab_alloc+0xcc>)
   1f564:	f005 fbdb 	bl	24d1e <assert_print>
   1f568:	21c2      	movs	r1, #194	; 0xc2
   1f56a:	e7e0      	b.n	1f52e <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1f56c:	ea58 0207 	orrs.w	r2, r8, r7
   1f570:	d103      	bne.n	1f57a <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   1f572:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   1f576:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1f578:	e7e8      	b.n	1f54c <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1f57a:	4622      	mov	r2, r4
   1f57c:	4649      	mov	r1, r9
   1f57e:	4628      	mov	r0, r5
   1f580:	e9cd 8700 	strd	r8, r7, [sp]
   1f584:	f001 ff36 	bl	213f4 <z_pend_curr>
		if (result == 0) {
   1f588:	4604      	mov	r4, r0
   1f58a:	b918      	cbnz	r0, 1f594 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   1f58c:	4b0c      	ldr	r3, [pc, #48]	; (1f5c0 <k_mem_slab_alloc+0xd0>)
   1f58e:	689b      	ldr	r3, [r3, #8]
   1f590:	695b      	ldr	r3, [r3, #20]
   1f592:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1f594:	4620      	mov	r0, r4
   1f596:	b003      	add	sp, #12
   1f598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1f59c:	f389 8811 	msr	BASEPRI, r9
   1f5a0:	f3bf 8f6f 	isb	sy
	return result;
   1f5a4:	e7f6      	b.n	1f594 <k_mem_slab_alloc+0xa4>
   1f5a6:	bf00      	nop
   1f5a8:	0002c4fc 	.word	0x0002c4fc
   1f5ac:	0002c555 	.word	0x0002c555
   1f5b0:	0002b6e9 	.word	0x0002b6e9
   1f5b4:	0002c56a 	.word	0x0002c56a
   1f5b8:	0002c529 	.word	0x0002c529
   1f5bc:	0002c540 	.word	0x0002c540
   1f5c0:	20021504 	.word	0x20021504

0001f5c4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f5c8:	4604      	mov	r4, r0
   1f5ca:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1f5cc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f5d0:	f04f 0320 	mov.w	r3, #32
   1f5d4:	f3ef 8711 	mrs	r7, BASEPRI
   1f5d8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f5dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f5e0:	4628      	mov	r0, r5
   1f5e2:	f000 f96f 	bl	1f8c4 <z_spin_lock_valid>
   1f5e6:	b968      	cbnz	r0, 1f604 <k_mem_slab_free+0x40>
   1f5e8:	2394      	movs	r3, #148	; 0x94
   1f5ea:	4a21      	ldr	r2, [pc, #132]	; (1f670 <k_mem_slab_free+0xac>)
   1f5ec:	4921      	ldr	r1, [pc, #132]	; (1f674 <k_mem_slab_free+0xb0>)
   1f5ee:	4822      	ldr	r0, [pc, #136]	; (1f678 <k_mem_slab_free+0xb4>)
   1f5f0:	f005 fb95 	bl	24d1e <assert_print>
   1f5f4:	4629      	mov	r1, r5
   1f5f6:	4821      	ldr	r0, [pc, #132]	; (1f67c <k_mem_slab_free+0xb8>)
   1f5f8:	f005 fb91 	bl	24d1e <assert_print>
   1f5fc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f5fe:	481c      	ldr	r0, [pc, #112]	; (1f670 <k_mem_slab_free+0xac>)
   1f600:	f005 fb86 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f604:	4628      	mov	r0, r5
   1f606:	f000 f979 	bl	1f8fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f60a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1f60e:	f1b8 0f00 	cmp.w	r8, #0
   1f612:	d10f      	bne.n	1f634 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f614:	4620      	mov	r0, r4
   1f616:	f002 f96b 	bl	218f0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f61a:	b158      	cbz	r0, 1f634 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f61c:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f61e:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f622:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1f624:	f001 fb8c 	bl	20d40 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1f628:	4639      	mov	r1, r7
   1f62a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1f62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1f630:	f001 bc12 	b.w	20e58 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f634:	6833      	ldr	r3, [r6, #0]
   1f636:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f638:	4628      	mov	r0, r5
   1f63a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f63c:	6833      	ldr	r3, [r6, #0]
   1f63e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1f640:	69e3      	ldr	r3, [r4, #28]
   1f642:	3b01      	subs	r3, #1
   1f644:	61e3      	str	r3, [r4, #28]
   1f646:	f000 f94b 	bl	1f8e0 <z_spin_unlock_valid>
   1f64a:	b958      	cbnz	r0, 1f664 <k_mem_slab_free+0xa0>
   1f64c:	23c2      	movs	r3, #194	; 0xc2
   1f64e:	4a08      	ldr	r2, [pc, #32]	; (1f670 <k_mem_slab_free+0xac>)
   1f650:	490b      	ldr	r1, [pc, #44]	; (1f680 <k_mem_slab_free+0xbc>)
   1f652:	4809      	ldr	r0, [pc, #36]	; (1f678 <k_mem_slab_free+0xb4>)
   1f654:	f005 fb63 	bl	24d1e <assert_print>
   1f658:	4629      	mov	r1, r5
   1f65a:	480a      	ldr	r0, [pc, #40]	; (1f684 <k_mem_slab_free+0xc0>)
   1f65c:	f005 fb5f 	bl	24d1e <assert_print>
   1f660:	21c2      	movs	r1, #194	; 0xc2
   1f662:	e7cc      	b.n	1f5fe <k_mem_slab_free+0x3a>
	__asm__ volatile(
   1f664:	f387 8811 	msr	BASEPRI, r7
   1f668:	f3bf 8f6f 	isb	sy
}
   1f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f670:	0002c4fc 	.word	0x0002c4fc
   1f674:	0002c555 	.word	0x0002c555
   1f678:	0002b6e9 	.word	0x0002b6e9
   1f67c:	0002c56a 	.word	0x0002c56a
   1f680:	0002c529 	.word	0x0002c529
   1f684:	0002c540 	.word	0x0002c540

0001f688 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f68a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1f68c:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1f68e:	2e0f      	cmp	r6, #15
   1f690:	d12a      	bne.n	1f6e8 <z_setup_new_thread+0x60>
   1f692:	4821      	ldr	r0, [pc, #132]	; (1f718 <z_setup_new_thread+0x90>)
   1f694:	4283      	cmp	r3, r0
   1f696:	d12b      	bne.n	1f6f0 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f698:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1f69c:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1f6a0:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1f6a2:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   1f6a4:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1f6a6:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f6a8:	3207      	adds	r2, #7
   1f6aa:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1f6ae:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   1f6b2:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   1f6b4:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f6b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   1f6b8:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1f6ba:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   1f6be:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   1f6c0:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1f6c2:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f6c4:	9202      	str	r2, [sp, #8]
   1f6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	9201      	str	r2, [sp, #4]
   1f6cc:	9a08      	ldr	r2, [sp, #32]
   1f6ce:	9200      	str	r2, [sp, #0]
   1f6d0:	4632      	mov	r2, r6
   1f6d2:	f7f0 fe03 	bl	102dc <arch_new_thread>
	if (!_current) {
   1f6d6:	4b11      	ldr	r3, [pc, #68]	; (1f71c <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   1f6d8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1f6da:	689b      	ldr	r3, [r3, #8]
   1f6dc:	b103      	cbz	r3, 1f6e0 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   1f6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1f6e0:	4630      	mov	r0, r6
   1f6e2:	6763      	str	r3, [r4, #116]	; 0x74
   1f6e4:	b004      	add	sp, #16
   1f6e6:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1f6e8:	f106 0010 	add.w	r0, r6, #16
   1f6ec:	281e      	cmp	r0, #30
   1f6ee:	d9d3      	bls.n	1f698 <z_setup_new_thread+0x10>
   1f6f0:	f44f 7306 	mov.w	r3, #536	; 0x218
   1f6f4:	4a0a      	ldr	r2, [pc, #40]	; (1f720 <z_setup_new_thread+0x98>)
   1f6f6:	490b      	ldr	r1, [pc, #44]	; (1f724 <z_setup_new_thread+0x9c>)
   1f6f8:	480b      	ldr	r0, [pc, #44]	; (1f728 <z_setup_new_thread+0xa0>)
   1f6fa:	f005 fb10 	bl	24d1e <assert_print>
   1f6fe:	4631      	mov	r1, r6
   1f700:	480a      	ldr	r0, [pc, #40]	; (1f72c <z_setup_new_thread+0xa4>)
   1f702:	f06f 030f 	mvn.w	r3, #15
   1f706:	220e      	movs	r2, #14
   1f708:	f005 fb09 	bl	24d1e <assert_print>
   1f70c:	f44f 7106 	mov.w	r1, #536	; 0x218
   1f710:	4803      	ldr	r0, [pc, #12]	; (1f720 <z_setup_new_thread+0x98>)
   1f712:	f005 fafd 	bl	24d10 <assert_post_action>
   1f716:	bf00      	nop
   1f718:	0001f90d 	.word	0x0001f90d
   1f71c:	20021504 	.word	0x20021504
   1f720:	0003075a 	.word	0x0003075a
   1f724:	0003077d 	.word	0x0003077d
   1f728:	0002b6e9 	.word	0x0002b6e9
   1f72c:	000307fd 	.word	0x000307fd

0001f730 <z_impl_k_thread_create>:
{
   1f730:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f732:	b087      	sub	sp, #28
   1f734:	4604      	mov	r4, r0
   1f736:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1f73a:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1f73e:	b175      	cbz	r5, 1f75e <z_impl_k_thread_create+0x2e>
   1f740:	4919      	ldr	r1, [pc, #100]	; (1f7a8 <z_impl_k_thread_create+0x78>)
   1f742:	f240 2387 	movw	r3, #647	; 0x287
   1f746:	4a19      	ldr	r2, [pc, #100]	; (1f7ac <z_impl_k_thread_create+0x7c>)
   1f748:	4819      	ldr	r0, [pc, #100]	; (1f7b0 <z_impl_k_thread_create+0x80>)
   1f74a:	f005 fae8 	bl	24d1e <assert_print>
   1f74e:	4819      	ldr	r0, [pc, #100]	; (1f7b4 <z_impl_k_thread_create+0x84>)
   1f750:	f005 fae5 	bl	24d1e <assert_print>
   1f754:	f240 2187 	movw	r1, #647	; 0x287
   1f758:	4814      	ldr	r0, [pc, #80]	; (1f7ac <z_impl_k_thread_create+0x7c>)
   1f75a:	f005 fad9 	bl	24d10 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f75e:	9505      	str	r5, [sp, #20]
   1f760:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1f762:	9504      	str	r5, [sp, #16]
   1f764:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f766:	9503      	str	r5, [sp, #12]
   1f768:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f76a:	9502      	str	r5, [sp, #8]
   1f76c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f76e:	9501      	str	r5, [sp, #4]
   1f770:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1f772:	9500      	str	r5, [sp, #0]
   1f774:	f7ff ff88 	bl	1f688 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1f778:	f1b6 3fff 	cmp.w	r6, #4294967295
   1f77c:	bf08      	it	eq
   1f77e:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1f782:	d005      	beq.n	1f790 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f784:	ea56 0307 	orrs.w	r3, r6, r7
   1f788:	d105      	bne.n	1f796 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   1f78a:	4620      	mov	r0, r4
   1f78c:	f001 fba6 	bl	20edc <z_sched_start>
}
   1f790:	4620      	mov	r0, r4
   1f792:	b007      	add	sp, #28
   1f794:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1f796:	463a      	mov	r2, r7
   1f798:	4633      	mov	r3, r6
   1f79a:	4907      	ldr	r1, [pc, #28]	; (1f7b8 <z_impl_k_thread_create+0x88>)
   1f79c:	f104 0018 	add.w	r0, r4, #24
   1f7a0:	f002 fc16 	bl	21fd0 <z_add_timeout>
   1f7a4:	e7f4      	b.n	1f790 <z_impl_k_thread_create+0x60>
   1f7a6:	bf00      	nop
   1f7a8:	0003082e 	.word	0x0003082e
   1f7ac:	0003075a 	.word	0x0003075a
   1f7b0:	0002b6e9 	.word	0x0002b6e9
   1f7b4:	00030840 	.word	0x00030840
   1f7b8:	000217a9 	.word	0x000217a9

0001f7bc <z_init_static_threads>:
{
   1f7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f7c0:	4c39      	ldr	r4, [pc, #228]	; (1f8a8 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1f7c2:	4d3a      	ldr	r5, [pc, #232]	; (1f8ac <z_init_static_threads+0xf0>)
{
   1f7c4:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1f7c6:	42ac      	cmp	r4, r5
   1f7c8:	4626      	mov	r6, r4
   1f7ca:	d92a      	bls.n	1f822 <z_init_static_threads+0x66>
   1f7cc:	4938      	ldr	r1, [pc, #224]	; (1f8b0 <z_init_static_threads+0xf4>)
   1f7ce:	f240 23ee 	movw	r3, #750	; 0x2ee
   1f7d2:	4a38      	ldr	r2, [pc, #224]	; (1f8b4 <z_init_static_threads+0xf8>)
   1f7d4:	4838      	ldr	r0, [pc, #224]	; (1f8b8 <z_init_static_threads+0xfc>)
   1f7d6:	f005 faa2 	bl	24d1e <assert_print>
   1f7da:	4838      	ldr	r0, [pc, #224]	; (1f8bc <z_init_static_threads+0x100>)
   1f7dc:	f005 fa9f 	bl	24d1e <assert_print>
   1f7e0:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   1f7e4:	4833      	ldr	r0, [pc, #204]	; (1f8b4 <z_init_static_threads+0xf8>)
   1f7e6:	f005 fa93 	bl	24d10 <assert_post_action>
		z_setup_new_thread(
   1f7ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1f7ee:	9305      	str	r3, [sp, #20]
   1f7f0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1f7f4:	9304      	str	r3, [sp, #16]
   1f7f6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1f7fa:	9303      	str	r3, [sp, #12]
   1f7fc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1f800:	9302      	str	r3, [sp, #8]
   1f802:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1f806:	9301      	str	r3, [sp, #4]
   1f808:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1f80c:	9300      	str	r3, [sp, #0]
   1f80e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1f812:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1f816:	f7ff ff37 	bl	1f688 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1f81a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1f81e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1f820:	e7d1      	b.n	1f7c6 <z_init_static_threads+0xa>
   1f822:	42ae      	cmp	r6, r5
   1f824:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1f828:	d3df      	bcc.n	1f7ea <z_init_static_threads+0x2e>
	k_sched_lock();
   1f82a:	f001 fba9 	bl	20f80 <k_sched_lock>
   1f82e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f832:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   1f836:	4c1c      	ldr	r4, [pc, #112]	; (1f8a8 <z_init_static_threads+0xec>)
   1f838:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1f8c0 <z_init_static_threads+0x104>
   1f83c:	42ac      	cmp	r4, r5
   1f83e:	d92c      	bls.n	1f89a <z_init_static_threads+0xde>
   1f840:	491b      	ldr	r1, [pc, #108]	; (1f8b0 <z_init_static_threads+0xf4>)
   1f842:	f240 330d 	movw	r3, #781	; 0x30d
   1f846:	4a1b      	ldr	r2, [pc, #108]	; (1f8b4 <z_init_static_threads+0xf8>)
   1f848:	481b      	ldr	r0, [pc, #108]	; (1f8b8 <z_init_static_threads+0xfc>)
   1f84a:	f005 fa68 	bl	24d1e <assert_print>
   1f84e:	481b      	ldr	r0, [pc, #108]	; (1f8bc <z_init_static_threads+0x100>)
   1f850:	f005 fa65 	bl	24d1e <assert_print>
   1f854:	f240 310d 	movw	r1, #781	; 0x30d
   1f858:	e7c4      	b.n	1f7e4 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1f85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f85c:	1c5a      	adds	r2, r3, #1
   1f85e:	d00d      	beq.n	1f87c <z_init_static_threads+0xc0>
   1f860:	2100      	movs	r1, #0
   1f862:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   1f864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f868:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f86c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1f870:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f874:	d104      	bne.n	1f880 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   1f876:	4640      	mov	r0, r8
   1f878:	f001 fb30 	bl	20edc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f87c:	3430      	adds	r4, #48	; 0x30
   1f87e:	e7dd      	b.n	1f83c <z_init_static_threads+0x80>
   1f880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f884:	2300      	movs	r3, #0
   1f886:	f7e9 fb33 	bl	8ef0 <__aeabi_uldivmod>
   1f88a:	4602      	mov	r2, r0
   1f88c:	460b      	mov	r3, r1
   1f88e:	f108 0018 	add.w	r0, r8, #24
   1f892:	4649      	mov	r1, r9
   1f894:	f002 fb9c 	bl	21fd0 <z_add_timeout>
   1f898:	e7f0      	b.n	1f87c <z_init_static_threads+0xc0>
   1f89a:	d3de      	bcc.n	1f85a <z_init_static_threads+0x9e>
}
   1f89c:	b007      	add	sp, #28
   1f89e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1f8a2:	f001 bbd9 	b.w	21058 <k_sched_unlock>
   1f8a6:	bf00      	nop
   1f8a8:	0002a4b0 	.word	0x0002a4b0
   1f8ac:	0002a630 	.word	0x0002a630
   1f8b0:	00030865 	.word	0x00030865
   1f8b4:	0003075a 	.word	0x0003075a
   1f8b8:	0002b6e9 	.word	0x0002b6e9
   1f8bc:	0002c7cd 	.word	0x0002c7cd
   1f8c0:	000217a9 	.word	0x000217a9

0001f8c4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1f8c4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1f8c6:	b138      	cbz	r0, 1f8d8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1f8c8:	4b04      	ldr	r3, [pc, #16]	; (1f8dc <z_spin_lock_valid+0x18>)
   1f8ca:	f000 0003 	and.w	r0, r0, #3
   1f8ce:	7d1b      	ldrb	r3, [r3, #20]
   1f8d0:	1ac0      	subs	r0, r0, r3
   1f8d2:	bf18      	it	ne
   1f8d4:	2001      	movne	r0, #1
   1f8d6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1f8d8:	2001      	movs	r0, #1
}
   1f8da:	4770      	bx	lr
   1f8dc:	20021504 	.word	0x20021504

0001f8e0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1f8e0:	4a05      	ldr	r2, [pc, #20]	; (1f8f8 <z_spin_unlock_valid+0x18>)
{
   1f8e2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1f8e4:	7d11      	ldrb	r1, [r2, #20]
   1f8e6:	6892      	ldr	r2, [r2, #8]
   1f8e8:	430a      	orrs	r2, r1
   1f8ea:	6801      	ldr	r1, [r0, #0]
   1f8ec:	2000      	movs	r0, #0
   1f8ee:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   1f8f0:	bf04      	itt	eq
   1f8f2:	6018      	streq	r0, [r3, #0]
	return true;
   1f8f4:	2001      	moveq	r0, #1
}
   1f8f6:	4770      	bx	lr
   1f8f8:	20021504 	.word	0x20021504

0001f8fc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1f8fc:	4b02      	ldr	r3, [pc, #8]	; (1f908 <z_spin_lock_set_owner+0xc>)
   1f8fe:	7d1a      	ldrb	r2, [r3, #20]
   1f900:	689b      	ldr	r3, [r3, #8]
   1f902:	4313      	orrs	r3, r2
   1f904:	6003      	str	r3, [r0, #0]
}
   1f906:	4770      	bx	lr
   1f908:	20021504 	.word	0x20021504

0001f90c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1f90c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1f90e:	4c13      	ldr	r4, [pc, #76]	; (1f95c <idle+0x50>)
   1f910:	68a3      	ldr	r3, [r4, #8]
   1f912:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f916:	2b00      	cmp	r3, #0
   1f918:	db10      	blt.n	1f93c <idle+0x30>
   1f91a:	4d11      	ldr	r5, [pc, #68]	; (1f960 <idle+0x54>)
	__asm__ volatile(
   1f91c:	f04f 0220 	mov.w	r2, #32
   1f920:	f3ef 8311 	mrs	r3, BASEPRI
   1f924:	f382 8812 	msr	BASEPRI_MAX, r2
   1f928:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1f92c:	f002 fc62 	bl	221f4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f930:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1f932:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f934:	b963      	cbnz	r3, 1f950 <idle+0x44>
	arch_cpu_idle();
   1f936:	f7f0 fb8d 	bl	10054 <arch_cpu_idle>
}
   1f93a:	e7ef      	b.n	1f91c <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1f93c:	4909      	ldr	r1, [pc, #36]	; (1f964 <idle+0x58>)
   1f93e:	480a      	ldr	r0, [pc, #40]	; (1f968 <idle+0x5c>)
   1f940:	2327      	movs	r3, #39	; 0x27
   1f942:	4a0a      	ldr	r2, [pc, #40]	; (1f96c <idle+0x60>)
   1f944:	f005 f9eb 	bl	24d1e <assert_print>
   1f948:	2127      	movs	r1, #39	; 0x27
   1f94a:	4808      	ldr	r0, [pc, #32]	; (1f96c <idle+0x60>)
   1f94c:	f005 f9e0 	bl	24d10 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f950:	f7f0 f8b8 	bl	fac4 <pm_system_suspend>
   1f954:	2800      	cmp	r0, #0
   1f956:	d1e1      	bne.n	1f91c <idle+0x10>
   1f958:	e7ed      	b.n	1f936 <idle+0x2a>
   1f95a:	bf00      	nop
   1f95c:	20021504 	.word	0x20021504
   1f960:	20022292 	.word	0x20022292
   1f964:	000308b3 	.word	0x000308b3
   1f968:	0002b6e9 	.word	0x0002b6e9
   1f96c:	00030892 	.word	0x00030892

0001f970 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f974:	4604      	mov	r4, r0
   1f976:	4617      	mov	r7, r2
   1f978:	461e      	mov	r6, r3
   1f97a:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1f97e:	b165      	cbz	r5, 1f99a <z_impl_k_mutex_lock+0x2a>
   1f980:	4958      	ldr	r1, [pc, #352]	; (1fae4 <z_impl_k_mutex_lock+0x174>)
   1f982:	2365      	movs	r3, #101	; 0x65
   1f984:	4a58      	ldr	r2, [pc, #352]	; (1fae8 <z_impl_k_mutex_lock+0x178>)
   1f986:	4859      	ldr	r0, [pc, #356]	; (1faec <z_impl_k_mutex_lock+0x17c>)
   1f988:	f005 f9c9 	bl	24d1e <assert_print>
   1f98c:	4858      	ldr	r0, [pc, #352]	; (1faf0 <z_impl_k_mutex_lock+0x180>)
   1f98e:	f005 f9c6 	bl	24d1e <assert_print>
   1f992:	2165      	movs	r1, #101	; 0x65
   1f994:	4854      	ldr	r0, [pc, #336]	; (1fae8 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f996:	f005 f9bb 	bl	24d10 <assert_post_action>
   1f99a:	f04f 0320 	mov.w	r3, #32
   1f99e:	f3ef 8811 	mrs	r8, BASEPRI
   1f9a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1f9a6:	f3bf 8f6f 	isb	sy
   1f9aa:	4852      	ldr	r0, [pc, #328]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1f9ac:	f7ff ff8a 	bl	1f8c4 <z_spin_lock_valid>
   1f9b0:	b960      	cbnz	r0, 1f9cc <z_impl_k_mutex_lock+0x5c>
   1f9b2:	2394      	movs	r3, #148	; 0x94
   1f9b4:	4a50      	ldr	r2, [pc, #320]	; (1faf8 <z_impl_k_mutex_lock+0x188>)
   1f9b6:	4951      	ldr	r1, [pc, #324]	; (1fafc <z_impl_k_mutex_lock+0x18c>)
   1f9b8:	484c      	ldr	r0, [pc, #304]	; (1faec <z_impl_k_mutex_lock+0x17c>)
   1f9ba:	f005 f9b0 	bl	24d1e <assert_print>
   1f9be:	494d      	ldr	r1, [pc, #308]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1f9c0:	484f      	ldr	r0, [pc, #316]	; (1fb00 <z_impl_k_mutex_lock+0x190>)
   1f9c2:	f005 f9ac 	bl	24d1e <assert_print>
   1f9c6:	2194      	movs	r1, #148	; 0x94
   1f9c8:	484b      	ldr	r0, [pc, #300]	; (1faf8 <z_impl_k_mutex_lock+0x188>)
   1f9ca:	e7e4      	b.n	1f996 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   1f9cc:	4849      	ldr	r0, [pc, #292]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1f9ce:	f7ff ff95 	bl	1f8fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f9d2:	68e3      	ldr	r3, [r4, #12]
   1f9d4:	4a4b      	ldr	r2, [pc, #300]	; (1fb04 <z_impl_k_mutex_lock+0x194>)
   1f9d6:	b19b      	cbz	r3, 1fa00 <z_impl_k_mutex_lock+0x90>
   1f9d8:	68a0      	ldr	r0, [r4, #8]
   1f9da:	6891      	ldr	r1, [r2, #8]
   1f9dc:	4288      	cmp	r0, r1
   1f9de:	d027      	beq.n	1fa30 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f9e0:	ea57 0306 	orrs.w	r3, r7, r6
   1f9e4:	d12c      	bne.n	1fa40 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f9e6:	4843      	ldr	r0, [pc, #268]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1f9e8:	f7ff ff7a 	bl	1f8e0 <z_spin_unlock_valid>
   1f9ec:	b1a0      	cbz	r0, 1fa18 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1f9ee:	f388 8811 	msr	BASEPRI, r8
   1f9f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1f9f6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1f9fa:	b002      	add	sp, #8
   1f9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1fa00:	6891      	ldr	r1, [r2, #8]
   1fa02:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1fa06:	3301      	adds	r3, #1
   1fa08:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1fa0a:	6893      	ldr	r3, [r2, #8]
   1fa0c:	4839      	ldr	r0, [pc, #228]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fa0e:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1fa10:	60a3      	str	r3, [r4, #8]
   1fa12:	f7ff ff65 	bl	1f8e0 <z_spin_unlock_valid>
   1fa16:	b968      	cbnz	r0, 1fa34 <z_impl_k_mutex_lock+0xc4>
   1fa18:	23c2      	movs	r3, #194	; 0xc2
   1fa1a:	4a37      	ldr	r2, [pc, #220]	; (1faf8 <z_impl_k_mutex_lock+0x188>)
   1fa1c:	493a      	ldr	r1, [pc, #232]	; (1fb08 <z_impl_k_mutex_lock+0x198>)
   1fa1e:	4833      	ldr	r0, [pc, #204]	; (1faec <z_impl_k_mutex_lock+0x17c>)
   1fa20:	f005 f97d 	bl	24d1e <assert_print>
   1fa24:	4933      	ldr	r1, [pc, #204]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1fa26:	4839      	ldr	r0, [pc, #228]	; (1fb0c <z_impl_k_mutex_lock+0x19c>)
   1fa28:	f005 f979 	bl	24d1e <assert_print>
   1fa2c:	21c2      	movs	r1, #194	; 0xc2
   1fa2e:	e7cb      	b.n	1f9c8 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   1fa30:	6921      	ldr	r1, [r4, #16]
   1fa32:	e7e8      	b.n	1fa06 <z_impl_k_mutex_lock+0x96>
   1fa34:	f388 8811 	msr	BASEPRI, r8
   1fa38:	f3bf 8f6f 	isb	sy
		return 0;
   1fa3c:	2000      	movs	r0, #0
   1fa3e:	e7dc      	b.n	1f9fa <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1fa40:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1fa44:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1fa48:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1fa4c:	4299      	cmp	r1, r3
   1fa4e:	bfa8      	it	ge
   1fa50:	4619      	movge	r1, r3
   1fa52:	4291      	cmp	r1, r2
   1fa54:	bfb8      	it	lt
   1fa56:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1fa58:	428b      	cmp	r3, r1
   1fa5a:	dd02      	ble.n	1fa62 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   1fa5c:	f009 fcd4 	bl	29408 <adjust_owner_prio.isra.0>
   1fa60:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1fa62:	4622      	mov	r2, r4
   1fa64:	4641      	mov	r1, r8
   1fa66:	e9cd 7600 	strd	r7, r6, [sp]
   1fa6a:	4822      	ldr	r0, [pc, #136]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1fa6c:	f001 fcc2 	bl	213f4 <z_pend_curr>
	if (got_mutex == 0) {
   1fa70:	2800      	cmp	r0, #0
   1fa72:	d0e3      	beq.n	1fa3c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1fa74:	f04f 0320 	mov.w	r3, #32
   1fa78:	f3ef 8611 	mrs	r6, BASEPRI
   1fa7c:	f383 8812 	msr	BASEPRI_MAX, r3
   1fa80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fa84:	481b      	ldr	r0, [pc, #108]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1fa86:	f7ff ff1d 	bl	1f8c4 <z_spin_lock_valid>
   1fa8a:	2800      	cmp	r0, #0
   1fa8c:	d091      	beq.n	1f9b2 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   1fa8e:	4819      	ldr	r0, [pc, #100]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1fa90:	f7ff ff34 	bl	1f8fc <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   1fa94:	68a0      	ldr	r0, [r4, #8]
   1fa96:	b1c0      	cbz	r0, 1faca <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1fa98:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1fa9a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fa9c:	429c      	cmp	r4, r3
   1fa9e:	d00a      	beq.n	1fab6 <z_impl_k_mutex_lock+0x146>
   1faa0:	b14b      	cbz	r3, 1fab6 <z_impl_k_mutex_lock+0x146>
   1faa2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1faa6:	4299      	cmp	r1, r3
   1faa8:	bfa8      	it	ge
   1faaa:	4619      	movge	r1, r3
   1faac:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1fab0:	4299      	cmp	r1, r3
   1fab2:	bfb8      	it	lt
   1fab4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fab6:	f009 fca7 	bl	29408 <adjust_owner_prio.isra.0>
   1faba:	b130      	cbz	r0, 1faca <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   1fabc:	4631      	mov	r1, r6
   1fabe:	480d      	ldr	r0, [pc, #52]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1fac0:	f001 f9ca 	bl	20e58 <z_reschedule>
	return -EAGAIN;
   1fac4:	f06f 000a 	mvn.w	r0, #10
   1fac8:	e797      	b.n	1f9fa <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   1faca:	2d00      	cmp	r5, #0
   1facc:	d1f6      	bne.n	1fabc <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1face:	4809      	ldr	r0, [pc, #36]	; (1faf4 <z_impl_k_mutex_lock+0x184>)
   1fad0:	f7ff ff06 	bl	1f8e0 <z_spin_unlock_valid>
   1fad4:	2800      	cmp	r0, #0
   1fad6:	d09f      	beq.n	1fa18 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1fad8:	f386 8811 	msr	BASEPRI, r6
   1fadc:	f3bf 8f6f 	isb	sy
   1fae0:	e7f0      	b.n	1fac4 <z_impl_k_mutex_lock+0x154>
   1fae2:	bf00      	nop
   1fae4:	0003082e 	.word	0x0003082e
   1fae8:	000308db 	.word	0x000308db
   1faec:	0002b6e9 	.word	0x0002b6e9
   1faf0:	000308fd 	.word	0x000308fd
   1faf4:	2002152c 	.word	0x2002152c
   1faf8:	0002c4fc 	.word	0x0002c4fc
   1fafc:	0002c555 	.word	0x0002c555
   1fb00:	0002c56a 	.word	0x0002c56a
   1fb04:	20021504 	.word	0x20021504
   1fb08:	0002c529 	.word	0x0002c529
   1fb0c:	0002c540 	.word	0x0002c540

0001fb10 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1fb10:	b570      	push	{r4, r5, r6, lr}
   1fb12:	4604      	mov	r4, r0
   1fb14:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1fb18:	b166      	cbz	r6, 1fb34 <z_impl_k_mutex_unlock+0x24>
   1fb1a:	4938      	ldr	r1, [pc, #224]	; (1fbfc <z_impl_k_mutex_unlock+0xec>)
   1fb1c:	23cd      	movs	r3, #205	; 0xcd
   1fb1e:	4a38      	ldr	r2, [pc, #224]	; (1fc00 <z_impl_k_mutex_unlock+0xf0>)
   1fb20:	4838      	ldr	r0, [pc, #224]	; (1fc04 <z_impl_k_mutex_unlock+0xf4>)
   1fb22:	f005 f8fc 	bl	24d1e <assert_print>
   1fb26:	4838      	ldr	r0, [pc, #224]	; (1fc08 <z_impl_k_mutex_unlock+0xf8>)
   1fb28:	f005 f8f9 	bl	24d1e <assert_print>
   1fb2c:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1fb2e:	4834      	ldr	r0, [pc, #208]	; (1fc00 <z_impl_k_mutex_unlock+0xf0>)
   1fb30:	f005 f8ee 	bl	24d10 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   1fb34:	6883      	ldr	r3, [r0, #8]
   1fb36:	2b00      	cmp	r3, #0
   1fb38:	d059      	beq.n	1fbee <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   1fb3a:	4a34      	ldr	r2, [pc, #208]	; (1fc0c <z_impl_k_mutex_unlock+0xfc>)
   1fb3c:	6892      	ldr	r2, [r2, #8]
   1fb3e:	4293      	cmp	r3, r2
   1fb40:	d158      	bne.n	1fbf4 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1fb42:	68c3      	ldr	r3, [r0, #12]
   1fb44:	b93b      	cbnz	r3, 1fb56 <z_impl_k_mutex_unlock+0x46>
   1fb46:	4932      	ldr	r1, [pc, #200]	; (1fc10 <z_impl_k_mutex_unlock+0x100>)
   1fb48:	23e5      	movs	r3, #229	; 0xe5
   1fb4a:	4a2d      	ldr	r2, [pc, #180]	; (1fc00 <z_impl_k_mutex_unlock+0xf0>)
   1fb4c:	482d      	ldr	r0, [pc, #180]	; (1fc04 <z_impl_k_mutex_unlock+0xf4>)
   1fb4e:	f005 f8e6 	bl	24d1e <assert_print>
   1fb52:	21e5      	movs	r1, #229	; 0xe5
   1fb54:	e7eb      	b.n	1fb2e <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1fb56:	2b01      	cmp	r3, #1
   1fb58:	d003      	beq.n	1fb62 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   1fb5a:	3b01      	subs	r3, #1
   1fb5c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1fb5e:	2000      	movs	r0, #0
}
   1fb60:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1fb62:	f04f 0320 	mov.w	r3, #32
   1fb66:	f3ef 8511 	mrs	r5, BASEPRI
   1fb6a:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb72:	4828      	ldr	r0, [pc, #160]	; (1fc14 <z_impl_k_mutex_unlock+0x104>)
   1fb74:	f7ff fea6 	bl	1f8c4 <z_spin_lock_valid>
   1fb78:	b960      	cbnz	r0, 1fb94 <z_impl_k_mutex_unlock+0x84>
   1fb7a:	2394      	movs	r3, #148	; 0x94
   1fb7c:	4a26      	ldr	r2, [pc, #152]	; (1fc18 <z_impl_k_mutex_unlock+0x108>)
   1fb7e:	4927      	ldr	r1, [pc, #156]	; (1fc1c <z_impl_k_mutex_unlock+0x10c>)
   1fb80:	4820      	ldr	r0, [pc, #128]	; (1fc04 <z_impl_k_mutex_unlock+0xf4>)
   1fb82:	f005 f8cc 	bl	24d1e <assert_print>
   1fb86:	4923      	ldr	r1, [pc, #140]	; (1fc14 <z_impl_k_mutex_unlock+0x104>)
   1fb88:	4825      	ldr	r0, [pc, #148]	; (1fc20 <z_impl_k_mutex_unlock+0x110>)
   1fb8a:	f005 f8c8 	bl	24d1e <assert_print>
   1fb8e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb90:	4821      	ldr	r0, [pc, #132]	; (1fc18 <z_impl_k_mutex_unlock+0x108>)
   1fb92:	e7cd      	b.n	1fb30 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   1fb94:	481f      	ldr	r0, [pc, #124]	; (1fc14 <z_impl_k_mutex_unlock+0x104>)
   1fb96:	f7ff feb1 	bl	1f8fc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1fb9a:	6921      	ldr	r1, [r4, #16]
   1fb9c:	68a0      	ldr	r0, [r4, #8]
   1fb9e:	f009 fc33 	bl	29408 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1fba2:	4620      	mov	r0, r4
   1fba4:	f001 fea4 	bl	218f0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1fba8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1fbaa:	b150      	cbz	r0, 1fbc2 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   1fbac:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1fbb0:	6122      	str	r2, [r4, #16]
   1fbb2:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1fbb4:	f001 f8c4 	bl	20d40 <z_ready_thread>
		z_reschedule(&lock, key);
   1fbb8:	4629      	mov	r1, r5
   1fbba:	4816      	ldr	r0, [pc, #88]	; (1fc14 <z_impl_k_mutex_unlock+0x104>)
   1fbbc:	f001 f94c 	bl	20e58 <z_reschedule>
   1fbc0:	e7cd      	b.n	1fb5e <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   1fbc2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fbc4:	4813      	ldr	r0, [pc, #76]	; (1fc14 <z_impl_k_mutex_unlock+0x104>)
   1fbc6:	f7ff fe8b 	bl	1f8e0 <z_spin_unlock_valid>
   1fbca:	b958      	cbnz	r0, 1fbe4 <z_impl_k_mutex_unlock+0xd4>
   1fbcc:	23c2      	movs	r3, #194	; 0xc2
   1fbce:	4a12      	ldr	r2, [pc, #72]	; (1fc18 <z_impl_k_mutex_unlock+0x108>)
   1fbd0:	4914      	ldr	r1, [pc, #80]	; (1fc24 <z_impl_k_mutex_unlock+0x114>)
   1fbd2:	480c      	ldr	r0, [pc, #48]	; (1fc04 <z_impl_k_mutex_unlock+0xf4>)
   1fbd4:	f005 f8a3 	bl	24d1e <assert_print>
   1fbd8:	490e      	ldr	r1, [pc, #56]	; (1fc14 <z_impl_k_mutex_unlock+0x104>)
   1fbda:	4813      	ldr	r0, [pc, #76]	; (1fc28 <z_impl_k_mutex_unlock+0x118>)
   1fbdc:	f005 f89f 	bl	24d1e <assert_print>
   1fbe0:	21c2      	movs	r1, #194	; 0xc2
   1fbe2:	e7d5      	b.n	1fb90 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   1fbe4:	f385 8811 	msr	BASEPRI, r5
   1fbe8:	f3bf 8f6f 	isb	sy
   1fbec:	e7b7      	b.n	1fb5e <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   1fbee:	f06f 0015 	mvn.w	r0, #21
   1fbf2:	e7b5      	b.n	1fb60 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   1fbf4:	f04f 30ff 	mov.w	r0, #4294967295
   1fbf8:	e7b2      	b.n	1fb60 <z_impl_k_mutex_unlock+0x50>
   1fbfa:	bf00      	nop
   1fbfc:	0003082e 	.word	0x0003082e
   1fc00:	000308db 	.word	0x000308db
   1fc04:	0002b6e9 	.word	0x0002b6e9
   1fc08:	000308fd 	.word	0x000308fd
   1fc0c:	20021504 	.word	0x20021504
   1fc10:	00030922 	.word	0x00030922
   1fc14:	2002152c 	.word	0x2002152c
   1fc18:	0002c4fc 	.word	0x0002c4fc
   1fc1c:	0002c555 	.word	0x0002c555
   1fc20:	0002c56a 	.word	0x0002c56a
   1fc24:	0002c529 	.word	0x0002c529
   1fc28:	0002c540 	.word	0x0002c540

0001fc2c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1fc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc30:	4604      	mov	r4, r0
   1fc32:	460e      	mov	r6, r1
   1fc34:	4690      	mov	r8, r2
   1fc36:	4699      	mov	r9, r3
   1fc38:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fc3c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1fc40:	f04f 0320 	mov.w	r3, #32
   1fc44:	f3ef 8711 	mrs	r7, BASEPRI
   1fc48:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc50:	4628      	mov	r0, r5
   1fc52:	f7ff fe37 	bl	1f8c4 <z_spin_lock_valid>
   1fc56:	b968      	cbnz	r0, 1fc74 <queue_insert+0x48>
   1fc58:	2394      	movs	r3, #148	; 0x94
   1fc5a:	4a3b      	ldr	r2, [pc, #236]	; (1fd48 <queue_insert+0x11c>)
   1fc5c:	493b      	ldr	r1, [pc, #236]	; (1fd4c <queue_insert+0x120>)
   1fc5e:	483c      	ldr	r0, [pc, #240]	; (1fd50 <queue_insert+0x124>)
   1fc60:	f005 f85d 	bl	24d1e <assert_print>
   1fc64:	4629      	mov	r1, r5
   1fc66:	483b      	ldr	r0, [pc, #236]	; (1fd54 <queue_insert+0x128>)
   1fc68:	f005 f859 	bl	24d1e <assert_print>
   1fc6c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fc6e:	4836      	ldr	r0, [pc, #216]	; (1fd48 <queue_insert+0x11c>)
   1fc70:	f005 f84e 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fc74:	4628      	mov	r0, r5
   1fc76:	f7ff fe41 	bl	1f8fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1fc7a:	f1ba 0f00 	cmp.w	sl, #0
   1fc7e:	d000      	beq.n	1fc82 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1fc80:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1fc82:	f104 000c 	add.w	r0, r4, #12
   1fc86:	f001 fe33 	bl	218f0 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1fc8a:	b158      	cbz	r0, 1fca4 <queue_insert+0x78>
   1fc8c:	2300      	movs	r3, #0
   1fc8e:	f8c0 8014 	str.w	r8, [r0, #20]
   1fc92:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1fc94:	f001 f854 	bl	20d40 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1fc98:	4628      	mov	r0, r5
   1fc9a:	4639      	mov	r1, r7
   1fc9c:	f001 f8dc 	bl	20e58 <z_reschedule>
		return 0;
   1fca0:	2000      	movs	r0, #0
   1fca2:	e01c      	b.n	1fcde <queue_insert+0xb2>
	if (alloc) {
   1fca4:	f1b9 0f00 	cmp.w	r9, #0
   1fca8:	d02b      	beq.n	1fd02 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   1fcaa:	2108      	movs	r1, #8
   1fcac:	f003 f8da 	bl	22e64 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1fcb0:	b9b8      	cbnz	r0, 1fce2 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fcb2:	4628      	mov	r0, r5
   1fcb4:	f7ff fe14 	bl	1f8e0 <z_spin_unlock_valid>
   1fcb8:	b958      	cbnz	r0, 1fcd2 <queue_insert+0xa6>
   1fcba:	23c2      	movs	r3, #194	; 0xc2
   1fcbc:	4a22      	ldr	r2, [pc, #136]	; (1fd48 <queue_insert+0x11c>)
   1fcbe:	4926      	ldr	r1, [pc, #152]	; (1fd58 <queue_insert+0x12c>)
   1fcc0:	4823      	ldr	r0, [pc, #140]	; (1fd50 <queue_insert+0x124>)
   1fcc2:	f005 f82c 	bl	24d1e <assert_print>
   1fcc6:	4629      	mov	r1, r5
   1fcc8:	4824      	ldr	r0, [pc, #144]	; (1fd5c <queue_insert+0x130>)
   1fcca:	f005 f828 	bl	24d1e <assert_print>
   1fcce:	21c2      	movs	r1, #194	; 0xc2
   1fcd0:	e7cd      	b.n	1fc6e <queue_insert+0x42>
	__asm__ volatile(
   1fcd2:	f387 8811 	msr	BASEPRI, r7
   1fcd6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1fcda:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   1fcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1fce2:	2201      	movs	r2, #1
		anode->data = data;
   1fce4:	f8c0 8004 	str.w	r8, [r0, #4]
   1fce8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fcea:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fcec:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1fcf0:	b95e      	cbnz	r6, 1fd0a <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fcf2:	6822      	ldr	r2, [r4, #0]
   1fcf4:	430a      	orrs	r2, r1
   1fcf6:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fcf8:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1fcfa:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fcfc:	b96a      	cbnz	r2, 1fd1a <queue_insert+0xee>
	list->tail = node;
   1fcfe:	6060      	str	r0, [r4, #4]
}
   1fd00:	e00b      	b.n	1fd1a <queue_insert+0xee>
}
   1fd02:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1fd04:	f8c8 9000 	str.w	r9, [r8]
}
   1fd08:	e7ef      	b.n	1fcea <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fd0a:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fd0c:	2a03      	cmp	r2, #3
   1fd0e:	d810      	bhi.n	1fd32 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd10:	6001      	str	r1, [r0, #0]
	return list->tail;
   1fd12:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1fd14:	b939      	cbnz	r1, 1fd26 <queue_insert+0xfa>
	list->head = node;
   1fd16:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fd1a:	2104      	movs	r1, #4
   1fd1c:	f104 0014 	add.w	r0, r4, #20
   1fd20:	f009 fd34 	bl	2978c <z_handle_obj_poll_events>
   1fd24:	e7b8      	b.n	1fc98 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fd26:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd28:	f002 0203 	and.w	r2, r2, #3
   1fd2c:	4302      	orrs	r2, r0
   1fd2e:	600a      	str	r2, [r1, #0]
   1fd30:	e7e5      	b.n	1fcfe <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fd32:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd36:	430a      	orrs	r2, r1
   1fd38:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fd3a:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fd3c:	f002 0203 	and.w	r2, r2, #3
   1fd40:	ea40 0302 	orr.w	r3, r0, r2
   1fd44:	6033      	str	r3, [r6, #0]
}
   1fd46:	e7e8      	b.n	1fd1a <queue_insert+0xee>
   1fd48:	0002c4fc 	.word	0x0002c4fc
   1fd4c:	0002c555 	.word	0x0002c555
   1fd50:	0002b6e9 	.word	0x0002b6e9
   1fd54:	0002c56a 	.word	0x0002c56a
   1fd58:	0002c529 	.word	0x0002c529
   1fd5c:	0002c540 	.word	0x0002c540

0001fd60 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1fd60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fd64:	4606      	mov	r6, r0
   1fd66:	4691      	mov	r9, r2
   1fd68:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fd6a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1fd6e:	f04f 0320 	mov.w	r3, #32
   1fd72:	f3ef 8811 	mrs	r8, BASEPRI
   1fd76:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd7e:	4628      	mov	r0, r5
   1fd80:	f7ff fda0 	bl	1f8c4 <z_spin_lock_valid>
   1fd84:	b968      	cbnz	r0, 1fda2 <z_impl_k_queue_get+0x42>
   1fd86:	2394      	movs	r3, #148	; 0x94
   1fd88:	4a23      	ldr	r2, [pc, #140]	; (1fe18 <z_impl_k_queue_get+0xb8>)
   1fd8a:	4924      	ldr	r1, [pc, #144]	; (1fe1c <z_impl_k_queue_get+0xbc>)
   1fd8c:	4824      	ldr	r0, [pc, #144]	; (1fe20 <z_impl_k_queue_get+0xc0>)
   1fd8e:	f004 ffc6 	bl	24d1e <assert_print>
   1fd92:	4629      	mov	r1, r5
   1fd94:	4823      	ldr	r0, [pc, #140]	; (1fe24 <z_impl_k_queue_get+0xc4>)
   1fd96:	f004 ffc2 	bl	24d1e <assert_print>
   1fd9a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd9c:	481e      	ldr	r0, [pc, #120]	; (1fe18 <z_impl_k_queue_get+0xb8>)
   1fd9e:	f004 ffb7 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fda2:	4628      	mov	r0, r5
   1fda4:	f7ff fdaa 	bl	1f8fc <z_spin_lock_set_owner>
	return list->head;
   1fda8:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1fdaa:	b1ec      	cbz	r4, 1fde8 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fdac:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fdae:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fdb0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fdb4:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fdb6:	4620      	mov	r0, r4
   1fdb8:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1fdbc:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1fdbe:	bf08      	it	eq
   1fdc0:	6073      	streq	r3, [r6, #4]
   1fdc2:	f009 fb30 	bl	29426 <z_queue_node_peek>
   1fdc6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fdc8:	4628      	mov	r0, r5
   1fdca:	f7ff fd89 	bl	1f8e0 <z_spin_unlock_valid>
   1fdce:	b9d8      	cbnz	r0, 1fe08 <z_impl_k_queue_get+0xa8>
   1fdd0:	23c2      	movs	r3, #194	; 0xc2
   1fdd2:	4a11      	ldr	r2, [pc, #68]	; (1fe18 <z_impl_k_queue_get+0xb8>)
   1fdd4:	4914      	ldr	r1, [pc, #80]	; (1fe28 <z_impl_k_queue_get+0xc8>)
   1fdd6:	4812      	ldr	r0, [pc, #72]	; (1fe20 <z_impl_k_queue_get+0xc0>)
   1fdd8:	f004 ffa1 	bl	24d1e <assert_print>
   1fddc:	4629      	mov	r1, r5
   1fdde:	4813      	ldr	r0, [pc, #76]	; (1fe2c <z_impl_k_queue_get+0xcc>)
   1fde0:	f004 ff9d 	bl	24d1e <assert_print>
   1fde4:	21c2      	movs	r1, #194	; 0xc2
   1fde6:	e7d9      	b.n	1fd9c <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fde8:	ea59 0307 	orrs.w	r3, r9, r7
   1fdec:	d0ec      	beq.n	1fdc8 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fdee:	4641      	mov	r1, r8
   1fdf0:	4628      	mov	r0, r5
   1fdf2:	e9cd 9700 	strd	r9, r7, [sp]
   1fdf6:	f106 020c 	add.w	r2, r6, #12
   1fdfa:	f001 fafb 	bl	213f4 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   1fdfe:	b938      	cbnz	r0, 1fe10 <z_impl_k_queue_get+0xb0>
   1fe00:	4b0b      	ldr	r3, [pc, #44]	; (1fe30 <z_impl_k_queue_get+0xd0>)
   1fe02:	689b      	ldr	r3, [r3, #8]
   1fe04:	695c      	ldr	r4, [r3, #20]
   1fe06:	e003      	b.n	1fe10 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   1fe08:	f388 8811 	msr	BASEPRI, r8
   1fe0c:	f3bf 8f6f 	isb	sy
}
   1fe10:	4620      	mov	r0, r4
   1fe12:	b003      	add	sp, #12
   1fe14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fe18:	0002c4fc 	.word	0x0002c4fc
   1fe1c:	0002c555 	.word	0x0002c555
   1fe20:	0002b6e9 	.word	0x0002b6e9
   1fe24:	0002c56a 	.word	0x0002c56a
   1fe28:	0002c529 	.word	0x0002c529
   1fe2c:	0002c540 	.word	0x0002c540
   1fe30:	20021504 	.word	0x20021504

0001fe34 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1fe34:	b538      	push	{r3, r4, r5, lr}
   1fe36:	4604      	mov	r4, r0
	__asm__ volatile(
   1fe38:	f04f 0320 	mov.w	r3, #32
   1fe3c:	f3ef 8511 	mrs	r5, BASEPRI
   1fe40:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe48:	4817      	ldr	r0, [pc, #92]	; (1fea8 <z_impl_k_sem_give+0x74>)
   1fe4a:	f7ff fd3b 	bl	1f8c4 <z_spin_lock_valid>
   1fe4e:	b968      	cbnz	r0, 1fe6c <z_impl_k_sem_give+0x38>
   1fe50:	2394      	movs	r3, #148	; 0x94
   1fe52:	4a16      	ldr	r2, [pc, #88]	; (1feac <z_impl_k_sem_give+0x78>)
   1fe54:	4916      	ldr	r1, [pc, #88]	; (1feb0 <z_impl_k_sem_give+0x7c>)
   1fe56:	4817      	ldr	r0, [pc, #92]	; (1feb4 <z_impl_k_sem_give+0x80>)
   1fe58:	f004 ff61 	bl	24d1e <assert_print>
   1fe5c:	4912      	ldr	r1, [pc, #72]	; (1fea8 <z_impl_k_sem_give+0x74>)
   1fe5e:	4816      	ldr	r0, [pc, #88]	; (1feb8 <z_impl_k_sem_give+0x84>)
   1fe60:	f004 ff5d 	bl	24d1e <assert_print>
   1fe64:	2194      	movs	r1, #148	; 0x94
   1fe66:	4811      	ldr	r0, [pc, #68]	; (1feac <z_impl_k_sem_give+0x78>)
   1fe68:	f004 ff52 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fe6c:	480e      	ldr	r0, [pc, #56]	; (1fea8 <z_impl_k_sem_give+0x74>)
   1fe6e:	f7ff fd45 	bl	1f8fc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1fe72:	4620      	mov	r0, r4
   1fe74:	f001 fd3c 	bl	218f0 <z_unpend_first_thread>

	if (thread != NULL) {
   1fe78:	b148      	cbz	r0, 1fe8e <z_impl_k_sem_give+0x5a>
   1fe7a:	2200      	movs	r2, #0
   1fe7c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1fe7e:	f000 ff5f 	bl	20d40 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1fe82:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1fe84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1fe88:	4807      	ldr	r0, [pc, #28]	; (1fea8 <z_impl_k_sem_give+0x74>)
   1fe8a:	f000 bfe5 	b.w	20e58 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fe8e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1fe92:	429a      	cmp	r2, r3
   1fe94:	bf18      	it	ne
   1fe96:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fe98:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fe9a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fe9c:	f104 0010 	add.w	r0, r4, #16
   1fea0:	f009 fc74 	bl	2978c <z_handle_obj_poll_events>
}
   1fea4:	e7ed      	b.n	1fe82 <z_impl_k_sem_give+0x4e>
   1fea6:	bf00      	nop
   1fea8:	20021530 	.word	0x20021530
   1feac:	0002c4fc 	.word	0x0002c4fc
   1feb0:	0002c555 	.word	0x0002c555
   1feb4:	0002b6e9 	.word	0x0002b6e9
   1feb8:	0002c56a 	.word	0x0002c56a

0001febc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1febc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1febe:	4604      	mov	r4, r0
   1fec0:	4616      	mov	r6, r2
   1fec2:	461d      	mov	r5, r3
   1fec4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1fec8:	b17b      	cbz	r3, 1feea <z_impl_k_sem_take+0x2e>
   1feca:	ea52 0305 	orrs.w	r3, r2, r5
   1fece:	d00c      	beq.n	1feea <z_impl_k_sem_take+0x2e>
   1fed0:	492d      	ldr	r1, [pc, #180]	; (1ff88 <z_impl_k_sem_take+0xcc>)
   1fed2:	2379      	movs	r3, #121	; 0x79
   1fed4:	4a2d      	ldr	r2, [pc, #180]	; (1ff8c <z_impl_k_sem_take+0xd0>)
   1fed6:	482e      	ldr	r0, [pc, #184]	; (1ff90 <z_impl_k_sem_take+0xd4>)
   1fed8:	f004 ff21 	bl	24d1e <assert_print>
   1fedc:	482d      	ldr	r0, [pc, #180]	; (1ff94 <z_impl_k_sem_take+0xd8>)
   1fede:	f004 ff1e 	bl	24d1e <assert_print>
   1fee2:	2179      	movs	r1, #121	; 0x79
   1fee4:	4829      	ldr	r0, [pc, #164]	; (1ff8c <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fee6:	f004 ff13 	bl	24d10 <assert_post_action>
   1feea:	f04f 0320 	mov.w	r3, #32
   1feee:	f3ef 8711 	mrs	r7, BASEPRI
   1fef2:	f383 8812 	msr	BASEPRI_MAX, r3
   1fef6:	f3bf 8f6f 	isb	sy
   1fefa:	4827      	ldr	r0, [pc, #156]	; (1ff98 <z_impl_k_sem_take+0xdc>)
   1fefc:	f7ff fce2 	bl	1f8c4 <z_spin_lock_valid>
   1ff00:	b960      	cbnz	r0, 1ff1c <z_impl_k_sem_take+0x60>
   1ff02:	2394      	movs	r3, #148	; 0x94
   1ff04:	4a25      	ldr	r2, [pc, #148]	; (1ff9c <z_impl_k_sem_take+0xe0>)
   1ff06:	4926      	ldr	r1, [pc, #152]	; (1ffa0 <z_impl_k_sem_take+0xe4>)
   1ff08:	4821      	ldr	r0, [pc, #132]	; (1ff90 <z_impl_k_sem_take+0xd4>)
   1ff0a:	f004 ff08 	bl	24d1e <assert_print>
   1ff0e:	4922      	ldr	r1, [pc, #136]	; (1ff98 <z_impl_k_sem_take+0xdc>)
   1ff10:	4824      	ldr	r0, [pc, #144]	; (1ffa4 <z_impl_k_sem_take+0xe8>)
   1ff12:	f004 ff04 	bl	24d1e <assert_print>
   1ff16:	2194      	movs	r1, #148	; 0x94
   1ff18:	4820      	ldr	r0, [pc, #128]	; (1ff9c <z_impl_k_sem_take+0xe0>)
   1ff1a:	e7e4      	b.n	1fee6 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   1ff1c:	481e      	ldr	r0, [pc, #120]	; (1ff98 <z_impl_k_sem_take+0xdc>)
   1ff1e:	f7ff fced 	bl	1f8fc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1ff22:	68a3      	ldr	r3, [r4, #8]
   1ff24:	b1c3      	cbz	r3, 1ff58 <z_impl_k_sem_take+0x9c>
		sem->count--;
   1ff26:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff28:	481b      	ldr	r0, [pc, #108]	; (1ff98 <z_impl_k_sem_take+0xdc>)
   1ff2a:	60a3      	str	r3, [r4, #8]
   1ff2c:	f7ff fcd8 	bl	1f8e0 <z_spin_unlock_valid>
   1ff30:	b958      	cbnz	r0, 1ff4a <z_impl_k_sem_take+0x8e>
   1ff32:	23c2      	movs	r3, #194	; 0xc2
   1ff34:	4a19      	ldr	r2, [pc, #100]	; (1ff9c <z_impl_k_sem_take+0xe0>)
   1ff36:	491c      	ldr	r1, [pc, #112]	; (1ffa8 <z_impl_k_sem_take+0xec>)
   1ff38:	4815      	ldr	r0, [pc, #84]	; (1ff90 <z_impl_k_sem_take+0xd4>)
   1ff3a:	f004 fef0 	bl	24d1e <assert_print>
   1ff3e:	4916      	ldr	r1, [pc, #88]	; (1ff98 <z_impl_k_sem_take+0xdc>)
   1ff40:	481a      	ldr	r0, [pc, #104]	; (1ffac <z_impl_k_sem_take+0xf0>)
   1ff42:	f004 feec 	bl	24d1e <assert_print>
   1ff46:	21c2      	movs	r1, #194	; 0xc2
   1ff48:	e7e6      	b.n	1ff18 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   1ff4a:	f387 8811 	msr	BASEPRI, r7
   1ff4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1ff52:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1ff54:	b003      	add	sp, #12
   1ff56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ff58:	ea56 0305 	orrs.w	r3, r6, r5
   1ff5c:	d10b      	bne.n	1ff76 <z_impl_k_sem_take+0xba>
   1ff5e:	480e      	ldr	r0, [pc, #56]	; (1ff98 <z_impl_k_sem_take+0xdc>)
   1ff60:	f7ff fcbe 	bl	1f8e0 <z_spin_unlock_valid>
   1ff64:	2800      	cmp	r0, #0
   1ff66:	d0e4      	beq.n	1ff32 <z_impl_k_sem_take+0x76>
   1ff68:	f387 8811 	msr	BASEPRI, r7
   1ff6c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1ff70:	f06f 000f 	mvn.w	r0, #15
   1ff74:	e7ee      	b.n	1ff54 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1ff76:	4622      	mov	r2, r4
   1ff78:	4639      	mov	r1, r7
   1ff7a:	e9cd 6500 	strd	r6, r5, [sp]
   1ff7e:	4806      	ldr	r0, [pc, #24]	; (1ff98 <z_impl_k_sem_take+0xdc>)
   1ff80:	f001 fa38 	bl	213f4 <z_pend_curr>
	return ret;
   1ff84:	e7e6      	b.n	1ff54 <z_impl_k_sem_take+0x98>
   1ff86:	bf00      	nop
   1ff88:	00030959 	.word	0x00030959
   1ff8c:	00030939 	.word	0x00030939
   1ff90:	0002b6e9 	.word	0x0002b6e9
   1ff94:	0002f302 	.word	0x0002f302
   1ff98:	20021530 	.word	0x20021530
   1ff9c:	0002c4fc 	.word	0x0002c4fc
   1ffa0:	0002c555 	.word	0x0002c555
   1ffa4:	0002c56a 	.word	0x0002c56a
   1ffa8:	0002c529 	.word	0x0002c529
   1ffac:	0002c540 	.word	0x0002c540

0001ffb0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1ffb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1ffb2:	2400      	movs	r4, #0
   1ffb4:	4b08      	ldr	r3, [pc, #32]	; (1ffd8 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1ffb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   1ffba:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   1ffbc:	ab02      	add	r3, sp, #8
   1ffbe:	9300      	str	r3, [sp, #0]
   1ffc0:	4906      	ldr	r1, [pc, #24]	; (1ffdc <k_sys_work_q_init+0x2c>)
   1ffc2:	f04f 33ff 	mov.w	r3, #4294967295
   1ffc6:	4806      	ldr	r0, [pc, #24]	; (1ffe0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1ffc8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1ffcc:	f000 fac0 	bl	20550 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1ffd0:	4620      	mov	r0, r4
   1ffd2:	b004      	add	sp, #16
   1ffd4:	bd10      	pop	{r4, pc}
   1ffd6:	bf00      	nop
   1ffd8:	000309a7 	.word	0x000309a7
   1ffdc:	200334f8 	.word	0x200334f8
   1ffe0:	20009d18 	.word	0x20009d18

0001ffe4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffe8:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ffea:	4e6e      	ldr	r6, [pc, #440]	; (201a4 <work_queue_main+0x1c0>)
	return list->head;
   1ffec:	4f6e      	ldr	r7, [pc, #440]	; (201a8 <work_queue_main+0x1c4>)
   1ffee:	b085      	sub	sp, #20
	__asm__ volatile(
   1fff0:	f04f 0320 	mov.w	r3, #32
   1fff4:	f3ef 8811 	mrs	r8, BASEPRI
   1fff8:	f383 8812 	msr	BASEPRI_MAX, r3
   1fffc:	f3bf 8f6f 	isb	sy
   20000:	4630      	mov	r0, r6
   20002:	f7ff fc5f 	bl	1f8c4 <z_spin_lock_valid>
   20006:	b968      	cbnz	r0, 20024 <work_queue_main+0x40>
   20008:	2394      	movs	r3, #148	; 0x94
   2000a:	4a68      	ldr	r2, [pc, #416]	; (201ac <work_queue_main+0x1c8>)
   2000c:	4968      	ldr	r1, [pc, #416]	; (201b0 <work_queue_main+0x1cc>)
   2000e:	4869      	ldr	r0, [pc, #420]	; (201b4 <work_queue_main+0x1d0>)
   20010:	f004 fe85 	bl	24d1e <assert_print>
   20014:	4963      	ldr	r1, [pc, #396]	; (201a4 <work_queue_main+0x1c0>)
   20016:	4868      	ldr	r0, [pc, #416]	; (201b8 <work_queue_main+0x1d4>)
   20018:	f004 fe81 	bl	24d1e <assert_print>
   2001c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2001e:	4863      	ldr	r0, [pc, #396]	; (201ac <work_queue_main+0x1c8>)
   20020:	f004 fe76 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   20024:	4630      	mov	r0, r6
   20026:	f7ff fc69 	bl	1f8fc <z_spin_lock_set_owner>
   2002a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   2002e:	b9ad      	cbnz	r5, 2005c <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   20030:	2102      	movs	r1, #2
   20032:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   20036:	f009 fa34 	bl	294a2 <flag_test_and_clear>
   2003a:	2800      	cmp	r0, #0
   2003c:	d135      	bne.n	200aa <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2003e:	2300      	movs	r3, #0
   20040:	f04f 32ff 	mov.w	r2, #4294967295
   20044:	9302      	str	r3, [sp, #8]
   20046:	f04f 33ff 	mov.w	r3, #4294967295
   2004a:	4641      	mov	r1, r8
   2004c:	e9cd 2300 	strd	r2, r3, [sp]
   20050:	4630      	mov	r0, r6
   20052:	f104 0290 	add.w	r2, r4, #144	; 0x90
   20056:	f001 ff41 	bl	21edc <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   2005a:	e7c9      	b.n	1fff0 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2005c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   20060:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20062:	4295      	cmp	r5, r2
	list->tail = node;
   20064:	bf08      	it	eq
   20066:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   2006a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   2006e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20072:	4630      	mov	r0, r6
   20074:	f043 0302 	orr.w	r3, r3, #2
   20078:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   2007c:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   2007e:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   20082:	f023 0304 	bic.w	r3, r3, #4
   20086:	f043 0301 	orr.w	r3, r3, #1
   2008a:	60eb      	str	r3, [r5, #12]
   2008c:	f7ff fc28 	bl	1f8e0 <z_spin_unlock_valid>
   20090:	b9a8      	cbnz	r0, 200be <work_queue_main+0xda>
   20092:	23c2      	movs	r3, #194	; 0xc2
   20094:	4a45      	ldr	r2, [pc, #276]	; (201ac <work_queue_main+0x1c8>)
   20096:	4949      	ldr	r1, [pc, #292]	; (201bc <work_queue_main+0x1d8>)
   20098:	4846      	ldr	r0, [pc, #280]	; (201b4 <work_queue_main+0x1d0>)
   2009a:	f004 fe40 	bl	24d1e <assert_print>
   2009e:	4941      	ldr	r1, [pc, #260]	; (201a4 <work_queue_main+0x1c0>)
   200a0:	4847      	ldr	r0, [pc, #284]	; (201c0 <work_queue_main+0x1dc>)
   200a2:	f004 fe3c 	bl	24d1e <assert_print>
   200a6:	21c2      	movs	r1, #194	; 0xc2
   200a8:	e7b9      	b.n	2001e <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   200aa:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   200ae:	2200      	movs	r2, #0
   200b0:	2101      	movs	r1, #1
   200b2:	4628      	mov	r0, r5
   200b4:	f001 feb4 	bl	21e20 <z_sched_wake>
   200b8:	2800      	cmp	r0, #0
   200ba:	d1f8      	bne.n	200ae <work_queue_main+0xca>
   200bc:	e7bf      	b.n	2003e <work_queue_main+0x5a>
	__asm__ volatile(
   200be:	f388 8811 	msr	BASEPRI, r8
   200c2:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   200c6:	f1b9 0f00 	cmp.w	r9, #0
   200ca:	d10a      	bne.n	200e2 <work_queue_main+0xfe>
   200cc:	493d      	ldr	r1, [pc, #244]	; (201c4 <work_queue_main+0x1e0>)
   200ce:	4839      	ldr	r0, [pc, #228]	; (201b4 <work_queue_main+0x1d0>)
   200d0:	f240 239b 	movw	r3, #667	; 0x29b
   200d4:	4a3c      	ldr	r2, [pc, #240]	; (201c8 <work_queue_main+0x1e4>)
   200d6:	f004 fe22 	bl	24d1e <assert_print>
   200da:	f240 219b 	movw	r1, #667	; 0x29b
   200de:	483a      	ldr	r0, [pc, #232]	; (201c8 <work_queue_main+0x1e4>)
   200e0:	e79e      	b.n	20020 <work_queue_main+0x3c>
		handler(work);
   200e2:	4628      	mov	r0, r5
   200e4:	47c8      	blx	r9
	__asm__ volatile(
   200e6:	f04f 0320 	mov.w	r3, #32
   200ea:	f3ef 8a11 	mrs	sl, BASEPRI
   200ee:	f383 8812 	msr	BASEPRI_MAX, r3
   200f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   200f6:	4630      	mov	r0, r6
   200f8:	f7ff fbe4 	bl	1f8c4 <z_spin_lock_valid>
   200fc:	2800      	cmp	r0, #0
   200fe:	d083      	beq.n	20008 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   20100:	4630      	mov	r0, r6
   20102:	f7ff fbfb 	bl	1f8fc <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   20106:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20108:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2010a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2010e:	d417      	bmi.n	20140 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   20110:	60ea      	str	r2, [r5, #12]
   20112:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20116:	4630      	mov	r0, r6
   20118:	f023 0302 	bic.w	r3, r3, #2
   2011c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   20120:	f3c3 2500 	ubfx	r5, r3, #8, #1
   20124:	f7ff fbdc 	bl	1f8e0 <z_spin_unlock_valid>
   20128:	2800      	cmp	r0, #0
   2012a:	d0b2      	beq.n	20092 <work_queue_main+0xae>
	__asm__ volatile(
   2012c:	f38a 8811 	msr	BASEPRI, sl
   20130:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   20134:	2d00      	cmp	r5, #0
   20136:	f47f af5b 	bne.w	1fff0 <work_queue_main+0xc>
	z_impl_k_yield();
   2013a:	f001 fc35 	bl	219a8 <z_impl_k_yield>
}
   2013e:	e757      	b.n	1fff0 <work_queue_main+0xc>
	return list->head;
   20140:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   20142:	f023 0303 	bic.w	r3, r3, #3
   20146:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20148:	2800      	cmp	r0, #0
   2014a:	d0e2      	beq.n	20112 <work_queue_main+0x12e>
	return node->next;
   2014c:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   20150:	46c3      	mov	fp, r8
	return node->next;
   20152:	f8d0 9000 	ldr.w	r9, [r0]
   20156:	2800      	cmp	r0, #0
   20158:	d0db      	beq.n	20112 <work_queue_main+0x12e>
		if (wc->work == work) {
   2015a:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2015c:	4602      	mov	r2, r0
		if (wc->work == work) {
   2015e:	429d      	cmp	r5, r3
   20160:	d10d      	bne.n	2017e <work_queue_main+0x19a>
   20162:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20164:	f1b8 0f00 	cmp.w	r8, #0
   20168:	d112      	bne.n	20190 <work_queue_main+0x1ac>
   2016a:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   2016c:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2016e:	4283      	cmp	r3, r0
   20170:	d100      	bne.n	20174 <work_queue_main+0x190>
	list->tail = node;
   20172:	607a      	str	r2, [r7, #4]
	parent->next = child;
   20174:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   20178:	f7ff fe5c 	bl	1fe34 <z_impl_k_sem_give>
}
   2017c:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2017e:	f1b9 0f00 	cmp.w	r9, #0
   20182:	d00d      	beq.n	201a0 <work_queue_main+0x1bc>
	return node->next;
   20184:	f8d9 3000 	ldr.w	r3, [r9]
   20188:	4648      	mov	r0, r9
   2018a:	4690      	mov	r8, r2
   2018c:	4699      	mov	r9, r3
   2018e:	e7e2      	b.n	20156 <work_queue_main+0x172>
	parent->next = child;
   20190:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   20194:	687b      	ldr	r3, [r7, #4]
   20196:	4283      	cmp	r3, r0
	list->tail = node;
   20198:	bf08      	it	eq
   2019a:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   2019e:	e7e9      	b.n	20174 <work_queue_main+0x190>
   201a0:	464b      	mov	r3, r9
   201a2:	e7f1      	b.n	20188 <work_queue_main+0x1a4>
   201a4:	2002153c 	.word	0x2002153c
   201a8:	20021534 	.word	0x20021534
   201ac:	0002c4fc 	.word	0x0002c4fc
   201b0:	0002c555 	.word	0x0002c555
   201b4:	0002b6e9 	.word	0x0002b6e9
   201b8:	0002c56a 	.word	0x0002c56a
   201bc:	0002c529 	.word	0x0002c529
   201c0:	0002c540 	.word	0x0002c540
   201c4:	000309d1 	.word	0x000309d1
   201c8:	000309b0 	.word	0x000309b0

000201cc <cancel_sync_locked>:
{
   201cc:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   201ce:	68c3      	ldr	r3, [r0, #12]
{
   201d0:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   201d2:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   201d6:	079b      	lsls	r3, r3, #30
{
   201d8:	460c      	mov	r4, r1
	if (ret) {
   201da:	d50d      	bpl.n	201f8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   201dc:	2201      	movs	r2, #1
   201de:	2100      	movs	r1, #0
   201e0:	f104 0008 	add.w	r0, r4, #8
   201e4:	f009 f94d 	bl	29482 <z_impl_k_sem_init>
	parent->next = child;
   201e8:	2300      	movs	r3, #0
   201ea:	6023      	str	r3, [r4, #0]
	return list->tail;
   201ec:	4b05      	ldr	r3, [pc, #20]	; (20204 <cancel_sync_locked+0x38>)
	canceler->work = work;
   201ee:	6065      	str	r5, [r4, #4]
   201f0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   201f2:	b91a      	cbnz	r2, 201fc <cancel_sync_locked+0x30>
	list->head = node;
   201f4:	e9c3 4400 	strd	r4, r4, [r3]
}
   201f8:	4630      	mov	r0, r6
   201fa:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   201fc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   201fe:	605c      	str	r4, [r3, #4]
}
   20200:	e7fa      	b.n	201f8 <cancel_sync_locked+0x2c>
   20202:	bf00      	nop
   20204:	20021534 	.word	0x20021534

00020208 <submit_to_queue_locked>:
{
   20208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2020a:	68c3      	ldr	r3, [r0, #12]
{
   2020c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2020e:	079a      	lsls	r2, r3, #30
{
   20210:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20212:	f3c3 0640 	ubfx	r6, r3, #1, #1
   20216:	d439      	bmi.n	2028c <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   20218:	075b      	lsls	r3, r3, #29
   2021a:	d425      	bmi.n	20268 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   2021c:	680b      	ldr	r3, [r1, #0]
   2021e:	b90b      	cbnz	r3, 20224 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   20220:	6883      	ldr	r3, [r0, #8]
   20222:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   20224:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   20226:	07dd      	lsls	r5, r3, #31
   20228:	d521      	bpl.n	2026e <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   2022a:	68a3      	ldr	r3, [r4, #8]
   2022c:	b95b      	cbnz	r3, 20246 <submit_to_queue_locked+0x3e>
   2022e:	4928      	ldr	r1, [pc, #160]	; (202d0 <submit_to_queue_locked+0xc8>)
   20230:	4828      	ldr	r0, [pc, #160]	; (202d4 <submit_to_queue_locked+0xcc>)
   20232:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   20236:	4a28      	ldr	r2, [pc, #160]	; (202d8 <submit_to_queue_locked+0xd0>)
   20238:	f004 fd71 	bl	24d1e <assert_print>
   2023c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   20240:	4825      	ldr	r0, [pc, #148]	; (202d8 <submit_to_queue_locked+0xd0>)
   20242:	f004 fd65 	bl	24d10 <assert_post_action>
			ret = 2;
   20246:	2602      	movs	r6, #2
			*queuep = work->queue;
   20248:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   2024a:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   2024c:	2d00      	cmp	r5, #0
   2024e:	d03c      	beq.n	202ca <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20250:	4b22      	ldr	r3, [pc, #136]	; (202dc <submit_to_queue_locked+0xd4>)
   20252:	689b      	ldr	r3, [r3, #8]
   20254:	42ab      	cmp	r3, r5
   20256:	d00c      	beq.n	20272 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   20258:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2025c:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2025e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20262:	d416      	bmi.n	20292 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   20264:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   20268:	2300      	movs	r3, #0
   2026a:	603b      	str	r3, [r7, #0]
	return ret;
   2026c:	e027      	b.n	202be <submit_to_queue_locked+0xb6>
		ret = 1;
   2026e:	2601      	movs	r6, #1
   20270:	e7eb      	b.n	2024a <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20272:	f009 f8b5 	bl	293e0 <k_is_in_isr>
   20276:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   2027a:	2800      	cmp	r0, #0
   2027c:	d1ee      	bne.n	2025c <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2027e:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   20280:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20284:	d5ee      	bpl.n	20264 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   20286:	b152      	cbz	r2, 2029e <submit_to_queue_locked+0x96>
   20288:	075b      	lsls	r3, r3, #29
   2028a:	d408      	bmi.n	2029e <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   2028c:	f06f 060f 	mvn.w	r6, #15
   20290:	e7ea      	b.n	20268 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   20292:	2a00      	cmp	r2, #0
   20294:	d1fa      	bne.n	2028c <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   20296:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   2029a:	2b00      	cmp	r3, #0
   2029c:	d1f6      	bne.n	2028c <submit_to_queue_locked+0x84>
	parent->next = child;
   2029e:	2300      	movs	r3, #0
   202a0:	6023      	str	r3, [r4, #0]
	return list->tail;
   202a2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   202a6:	b963      	cbnz	r3, 202c2 <submit_to_queue_locked+0xba>
	list->head = node;
   202a8:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   202ac:	4628      	mov	r0, r5
   202ae:	f009 f911 	bl	294d4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   202b2:	68e3      	ldr	r3, [r4, #12]
   202b4:	f043 0304 	orr.w	r3, r3, #4
   202b8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   202ba:	683b      	ldr	r3, [r7, #0]
   202bc:	60a3      	str	r3, [r4, #8]
}
   202be:	4630      	mov	r0, r6
   202c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   202c2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   202c4:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   202c8:	e7f0      	b.n	202ac <submit_to_queue_locked+0xa4>
		return -EINVAL;
   202ca:	f06f 0615 	mvn.w	r6, #21
   202ce:	e7cb      	b.n	20268 <submit_to_queue_locked+0x60>
   202d0:	000309e8 	.word	0x000309e8
   202d4:	0002b6e9 	.word	0x0002b6e9
   202d8:	000309b0 	.word	0x000309b0
   202dc:	20021504 	.word	0x20021504

000202e0 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   202e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   202e2:	4604      	mov	r4, r0
	__asm__ volatile(
   202e4:	f04f 0320 	mov.w	r3, #32
   202e8:	f3ef 8511 	mrs	r5, BASEPRI
   202ec:	f383 8812 	msr	BASEPRI_MAX, r3
   202f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   202f4:	481c      	ldr	r0, [pc, #112]	; (20368 <work_timeout+0x88>)
   202f6:	f7ff fae5 	bl	1f8c4 <z_spin_lock_valid>
   202fa:	b968      	cbnz	r0, 20318 <work_timeout+0x38>
   202fc:	2394      	movs	r3, #148	; 0x94
   202fe:	4a1b      	ldr	r2, [pc, #108]	; (2036c <work_timeout+0x8c>)
   20300:	491b      	ldr	r1, [pc, #108]	; (20370 <work_timeout+0x90>)
   20302:	481c      	ldr	r0, [pc, #112]	; (20374 <work_timeout+0x94>)
   20304:	f004 fd0b 	bl	24d1e <assert_print>
   20308:	4917      	ldr	r1, [pc, #92]	; (20368 <work_timeout+0x88>)
   2030a:	481b      	ldr	r0, [pc, #108]	; (20378 <work_timeout+0x98>)
   2030c:	f004 fd07 	bl	24d1e <assert_print>
   20310:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20312:	4816      	ldr	r0, [pc, #88]	; (2036c <work_timeout+0x8c>)
   20314:	f004 fcfc 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   20318:	4813      	ldr	r0, [pc, #76]	; (20368 <work_timeout+0x88>)
   2031a:	f7ff faef 	bl	1f8fc <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   2031e:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20320:	2103      	movs	r1, #3
   20322:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   20324:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20326:	f1a4 0610 	sub.w	r6, r4, #16
   2032a:	f009 f8ba 	bl	294a2 <flag_test_and_clear>
   2032e:	b128      	cbz	r0, 2033c <work_timeout+0x5c>
		queue = dw->queue;
   20330:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   20332:	4630      	mov	r0, r6
   20334:	a901      	add	r1, sp, #4
		queue = dw->queue;
   20336:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   20338:	f7ff ff66 	bl	20208 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2033c:	480a      	ldr	r0, [pc, #40]	; (20368 <work_timeout+0x88>)
   2033e:	f7ff facf 	bl	1f8e0 <z_spin_unlock_valid>
   20342:	b958      	cbnz	r0, 2035c <work_timeout+0x7c>
   20344:	23c2      	movs	r3, #194	; 0xc2
   20346:	4a09      	ldr	r2, [pc, #36]	; (2036c <work_timeout+0x8c>)
   20348:	490c      	ldr	r1, [pc, #48]	; (2037c <work_timeout+0x9c>)
   2034a:	480a      	ldr	r0, [pc, #40]	; (20374 <work_timeout+0x94>)
   2034c:	f004 fce7 	bl	24d1e <assert_print>
   20350:	4905      	ldr	r1, [pc, #20]	; (20368 <work_timeout+0x88>)
   20352:	480b      	ldr	r0, [pc, #44]	; (20380 <work_timeout+0xa0>)
   20354:	f004 fce3 	bl	24d1e <assert_print>
   20358:	21c2      	movs	r1, #194	; 0xc2
   2035a:	e7da      	b.n	20312 <work_timeout+0x32>
	__asm__ volatile(
   2035c:	f385 8811 	msr	BASEPRI, r5
   20360:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   20364:	b002      	add	sp, #8
   20366:	bd70      	pop	{r4, r5, r6, pc}
   20368:	2002153c 	.word	0x2002153c
   2036c:	0002c4fc 	.word	0x0002c4fc
   20370:	0002c555 	.word	0x0002c555
   20374:	0002b6e9 	.word	0x0002b6e9
   20378:	0002c56a 	.word	0x0002c56a
   2037c:	0002c529 	.word	0x0002c529
   20380:	0002c540 	.word	0x0002c540

00020384 <k_work_init>:
{
   20384:	b538      	push	{r3, r4, r5, lr}
   20386:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   20388:	4604      	mov	r4, r0
   2038a:	b948      	cbnz	r0, 203a0 <k_work_init+0x1c>
   2038c:	490c      	ldr	r1, [pc, #48]	; (203c0 <k_work_init+0x3c>)
   2038e:	2389      	movs	r3, #137	; 0x89
   20390:	4a0c      	ldr	r2, [pc, #48]	; (203c4 <k_work_init+0x40>)
   20392:	480d      	ldr	r0, [pc, #52]	; (203c8 <k_work_init+0x44>)
   20394:	f004 fcc3 	bl	24d1e <assert_print>
   20398:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   2039a:	480a      	ldr	r0, [pc, #40]	; (203c4 <k_work_init+0x40>)
   2039c:	f004 fcb8 	bl	24d10 <assert_post_action>
   203a0:	b939      	cbnz	r1, 203b2 <k_work_init+0x2e>
   203a2:	490a      	ldr	r1, [pc, #40]	; (203cc <k_work_init+0x48>)
   203a4:	238a      	movs	r3, #138	; 0x8a
   203a6:	4a07      	ldr	r2, [pc, #28]	; (203c4 <k_work_init+0x40>)
   203a8:	4807      	ldr	r0, [pc, #28]	; (203c8 <k_work_init+0x44>)
   203aa:	f004 fcb8 	bl	24d1e <assert_print>
   203ae:	218a      	movs	r1, #138	; 0x8a
   203b0:	e7f3      	b.n	2039a <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   203b2:	2210      	movs	r2, #16
   203b4:	2100      	movs	r1, #0
   203b6:	f009 fa52 	bl	2985e <memset>
   203ba:	6065      	str	r5, [r4, #4]
}
   203bc:	bd38      	pop	{r3, r4, r5, pc}
   203be:	bf00      	nop
   203c0:	00030a87 	.word	0x00030a87
   203c4:	000309b0 	.word	0x000309b0
   203c8:	0002b6e9 	.word	0x0002b6e9
   203cc:	000309d1 	.word	0x000309d1

000203d0 <k_work_busy_get>:
{
   203d0:	b538      	push	{r3, r4, r5, lr}
   203d2:	4604      	mov	r4, r0
	__asm__ volatile(
   203d4:	f04f 0320 	mov.w	r3, #32
   203d8:	f3ef 8511 	mrs	r5, BASEPRI
   203dc:	f383 8812 	msr	BASEPRI_MAX, r3
   203e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203e4:	4816      	ldr	r0, [pc, #88]	; (20440 <k_work_busy_get+0x70>)
   203e6:	f7ff fa6d 	bl	1f8c4 <z_spin_lock_valid>
   203ea:	b968      	cbnz	r0, 20408 <k_work_busy_get+0x38>
   203ec:	2394      	movs	r3, #148	; 0x94
   203ee:	4a15      	ldr	r2, [pc, #84]	; (20444 <k_work_busy_get+0x74>)
   203f0:	4915      	ldr	r1, [pc, #84]	; (20448 <k_work_busy_get+0x78>)
   203f2:	4816      	ldr	r0, [pc, #88]	; (2044c <k_work_busy_get+0x7c>)
   203f4:	f004 fc93 	bl	24d1e <assert_print>
   203f8:	4911      	ldr	r1, [pc, #68]	; (20440 <k_work_busy_get+0x70>)
   203fa:	4815      	ldr	r0, [pc, #84]	; (20450 <k_work_busy_get+0x80>)
   203fc:	f004 fc8f 	bl	24d1e <assert_print>
   20400:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20402:	4810      	ldr	r0, [pc, #64]	; (20444 <k_work_busy_get+0x74>)
   20404:	f004 fc84 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   20408:	480d      	ldr	r0, [pc, #52]	; (20440 <k_work_busy_get+0x70>)
   2040a:	f7ff fa77 	bl	1f8fc <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2040e:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20410:	480b      	ldr	r0, [pc, #44]	; (20440 <k_work_busy_get+0x70>)
   20412:	f004 040f 	and.w	r4, r4, #15
   20416:	f7ff fa63 	bl	1f8e0 <z_spin_unlock_valid>
   2041a:	b958      	cbnz	r0, 20434 <k_work_busy_get+0x64>
   2041c:	23c2      	movs	r3, #194	; 0xc2
   2041e:	4a09      	ldr	r2, [pc, #36]	; (20444 <k_work_busy_get+0x74>)
   20420:	490c      	ldr	r1, [pc, #48]	; (20454 <k_work_busy_get+0x84>)
   20422:	480a      	ldr	r0, [pc, #40]	; (2044c <k_work_busy_get+0x7c>)
   20424:	f004 fc7b 	bl	24d1e <assert_print>
   20428:	4905      	ldr	r1, [pc, #20]	; (20440 <k_work_busy_get+0x70>)
   2042a:	480b      	ldr	r0, [pc, #44]	; (20458 <k_work_busy_get+0x88>)
   2042c:	f004 fc77 	bl	24d1e <assert_print>
   20430:	21c2      	movs	r1, #194	; 0xc2
   20432:	e7e6      	b.n	20402 <k_work_busy_get+0x32>
	__asm__ volatile(
   20434:	f385 8811 	msr	BASEPRI, r5
   20438:	f3bf 8f6f 	isb	sy
}
   2043c:	4620      	mov	r0, r4
   2043e:	bd38      	pop	{r3, r4, r5, pc}
   20440:	2002153c 	.word	0x2002153c
   20444:	0002c4fc 	.word	0x0002c4fc
   20448:	0002c555 	.word	0x0002c555
   2044c:	0002b6e9 	.word	0x0002b6e9
   20450:	0002c56a 	.word	0x0002c56a
   20454:	0002c529 	.word	0x0002c529
   20458:	0002c540 	.word	0x0002c540

0002045c <z_work_submit_to_queue>:
{
   2045c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   2045e:	460c      	mov	r4, r1
{
   20460:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   20462:	b959      	cbnz	r1, 2047c <z_work_submit_to_queue+0x20>
   20464:	4921      	ldr	r1, [pc, #132]	; (204ec <z_work_submit_to_queue+0x90>)
   20466:	4822      	ldr	r0, [pc, #136]	; (204f0 <z_work_submit_to_queue+0x94>)
   20468:	f44f 73ba 	mov.w	r3, #372	; 0x174
   2046c:	4a21      	ldr	r2, [pc, #132]	; (204f4 <z_work_submit_to_queue+0x98>)
   2046e:	f004 fc56 	bl	24d1e <assert_print>
   20472:	f44f 71ba 	mov.w	r1, #372	; 0x174
   20476:	481f      	ldr	r0, [pc, #124]	; (204f4 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20478:	f004 fc4a 	bl	24d10 <assert_post_action>
	__asm__ volatile(
   2047c:	f04f 0320 	mov.w	r3, #32
   20480:	f3ef 8511 	mrs	r5, BASEPRI
   20484:	f383 8812 	msr	BASEPRI_MAX, r3
   20488:	f3bf 8f6f 	isb	sy
   2048c:	481a      	ldr	r0, [pc, #104]	; (204f8 <z_work_submit_to_queue+0x9c>)
   2048e:	f7ff fa19 	bl	1f8c4 <z_spin_lock_valid>
   20492:	b960      	cbnz	r0, 204ae <z_work_submit_to_queue+0x52>
   20494:	2394      	movs	r3, #148	; 0x94
   20496:	4a19      	ldr	r2, [pc, #100]	; (204fc <z_work_submit_to_queue+0xa0>)
   20498:	4919      	ldr	r1, [pc, #100]	; (20500 <z_work_submit_to_queue+0xa4>)
   2049a:	4815      	ldr	r0, [pc, #84]	; (204f0 <z_work_submit_to_queue+0x94>)
   2049c:	f004 fc3f 	bl	24d1e <assert_print>
   204a0:	4915      	ldr	r1, [pc, #84]	; (204f8 <z_work_submit_to_queue+0x9c>)
   204a2:	4818      	ldr	r0, [pc, #96]	; (20504 <z_work_submit_to_queue+0xa8>)
   204a4:	f004 fc3b 	bl	24d1e <assert_print>
   204a8:	2194      	movs	r1, #148	; 0x94
   204aa:	4814      	ldr	r0, [pc, #80]	; (204fc <z_work_submit_to_queue+0xa0>)
   204ac:	e7e4      	b.n	20478 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   204ae:	4812      	ldr	r0, [pc, #72]	; (204f8 <z_work_submit_to_queue+0x9c>)
   204b0:	f7ff fa24 	bl	1f8fc <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   204b4:	4620      	mov	r0, r4
   204b6:	a901      	add	r1, sp, #4
   204b8:	f7ff fea6 	bl	20208 <submit_to_queue_locked>
   204bc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204be:	480e      	ldr	r0, [pc, #56]	; (204f8 <z_work_submit_to_queue+0x9c>)
   204c0:	f7ff fa0e 	bl	1f8e0 <z_spin_unlock_valid>
   204c4:	b958      	cbnz	r0, 204de <z_work_submit_to_queue+0x82>
   204c6:	23c2      	movs	r3, #194	; 0xc2
   204c8:	4a0c      	ldr	r2, [pc, #48]	; (204fc <z_work_submit_to_queue+0xa0>)
   204ca:	490f      	ldr	r1, [pc, #60]	; (20508 <z_work_submit_to_queue+0xac>)
   204cc:	4808      	ldr	r0, [pc, #32]	; (204f0 <z_work_submit_to_queue+0x94>)
   204ce:	f004 fc26 	bl	24d1e <assert_print>
   204d2:	4909      	ldr	r1, [pc, #36]	; (204f8 <z_work_submit_to_queue+0x9c>)
   204d4:	480d      	ldr	r0, [pc, #52]	; (2050c <z_work_submit_to_queue+0xb0>)
   204d6:	f004 fc22 	bl	24d1e <assert_print>
   204da:	21c2      	movs	r1, #194	; 0xc2
   204dc:	e7e5      	b.n	204aa <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   204de:	f385 8811 	msr	BASEPRI, r5
   204e2:	f3bf 8f6f 	isb	sy
}
   204e6:	4620      	mov	r0, r4
   204e8:	b003      	add	sp, #12
   204ea:	bd30      	pop	{r4, r5, pc}
   204ec:	00030a87 	.word	0x00030a87
   204f0:	0002b6e9 	.word	0x0002b6e9
   204f4:	000309b0 	.word	0x000309b0
   204f8:	2002153c 	.word	0x2002153c
   204fc:	0002c4fc 	.word	0x0002c4fc
   20500:	0002c555 	.word	0x0002c555
   20504:	0002c56a 	.word	0x0002c56a
   20508:	0002c529 	.word	0x0002c529
   2050c:	0002c540 	.word	0x0002c540

00020510 <k_work_submit>:
{
   20510:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   20512:	4801      	ldr	r0, [pc, #4]	; (20518 <k_work_submit+0x8>)
   20514:	f009 b818 	b.w	29548 <k_work_submit_to_queue>
   20518:	20009d18 	.word	0x20009d18

0002051c <k_work_queue_init>:
{
   2051c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   2051e:	b958      	cbnz	r0, 20538 <k_work_queue_init+0x1c>
   20520:	4908      	ldr	r1, [pc, #32]	; (20544 <k_work_queue_init+0x28>)
   20522:	4809      	ldr	r0, [pc, #36]	; (20548 <k_work_queue_init+0x2c>)
   20524:	f240 23b9 	movw	r3, #697	; 0x2b9
   20528:	4a08      	ldr	r2, [pc, #32]	; (2054c <k_work_queue_init+0x30>)
   2052a:	f004 fbf8 	bl	24d1e <assert_print>
   2052e:	f240 21b9 	movw	r1, #697	; 0x2b9
   20532:	4806      	ldr	r0, [pc, #24]	; (2054c <k_work_queue_init+0x30>)
   20534:	f004 fbec 	bl	24d10 <assert_post_action>
	*queue = (struct k_work_q) {
   20538:	22a8      	movs	r2, #168	; 0xa8
   2053a:	2100      	movs	r1, #0
   2053c:	f009 f98f 	bl	2985e <memset>
}
   20540:	bd08      	pop	{r3, pc}
   20542:	bf00      	nop
   20544:	000309ee 	.word	0x000309ee
   20548:	0002b6e9 	.word	0x0002b6e9
   2054c:	000309b0 	.word	0x000309b0

00020550 <k_work_queue_start>:
{
   20550:	b5f0      	push	{r4, r5, r6, r7, lr}
   20552:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   20554:	4604      	mov	r4, r0
{
   20556:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   20558:	b958      	cbnz	r0, 20572 <k_work_queue_start+0x22>
   2055a:	492b      	ldr	r1, [pc, #172]	; (20608 <k_work_queue_start+0xb8>)
   2055c:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   20560:	4a2a      	ldr	r2, [pc, #168]	; (2060c <k_work_queue_start+0xbc>)
   20562:	482b      	ldr	r0, [pc, #172]	; (20610 <k_work_queue_start+0xc0>)
   20564:	f004 fbdb 	bl	24d1e <assert_print>
   20568:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   2056c:	4827      	ldr	r0, [pc, #156]	; (2060c <k_work_queue_start+0xbc>)
   2056e:	f004 fbcf 	bl	24d10 <assert_post_action>
   20572:	b949      	cbnz	r1, 20588 <k_work_queue_start+0x38>
   20574:	4927      	ldr	r1, [pc, #156]	; (20614 <k_work_queue_start+0xc4>)
   20576:	f240 23c9 	movw	r3, #713	; 0x2c9
   2057a:	4a24      	ldr	r2, [pc, #144]	; (2060c <k_work_queue_start+0xbc>)
   2057c:	4824      	ldr	r0, [pc, #144]	; (20610 <k_work_queue_start+0xc0>)
   2057e:	f004 fbce 	bl	24d1e <assert_print>
   20582:	f240 21c9 	movw	r1, #713	; 0x2c9
   20586:	e7f1      	b.n	2056c <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   20588:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   2058c:	f010 0001 	ands.w	r0, r0, #1
   20590:	d009      	beq.n	205a6 <k_work_queue_start+0x56>
   20592:	4921      	ldr	r1, [pc, #132]	; (20618 <k_work_queue_start+0xc8>)
   20594:	f240 23ca 	movw	r3, #714	; 0x2ca
   20598:	4a1c      	ldr	r2, [pc, #112]	; (2060c <k_work_queue_start+0xbc>)
   2059a:	481d      	ldr	r0, [pc, #116]	; (20610 <k_work_queue_start+0xc0>)
   2059c:	f004 fbbf 	bl	24d1e <assert_print>
   205a0:	f240 21ca 	movw	r1, #714	; 0x2ca
   205a4:	e7e2      	b.n	2056c <k_work_queue_start+0x1c>
	list->tail = NULL;
   205a6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   205aa:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   205ae:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   205b2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   205b6:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   205ba:	b31d      	cbz	r5, 20604 <k_work_queue_start+0xb4>
   205bc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   205be:	2800      	cmp	r0, #0
   205c0:	f240 1001 	movw	r0, #257	; 0x101
   205c4:	bf08      	it	eq
   205c6:	2001      	moveq	r0, #1
	*flagp = flags;
   205c8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   205cc:	2000      	movs	r0, #0
   205ce:	f04f 36ff 	mov.w	r6, #4294967295
   205d2:	f04f 37ff 	mov.w	r7, #4294967295
   205d6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   205da:	e9cd 0001 	strd	r0, r0, [sp, #4]
   205de:	e9cd 6706 	strd	r6, r7, [sp, #24]
   205e2:	4620      	mov	r0, r4
   205e4:	4b0d      	ldr	r3, [pc, #52]	; (2061c <k_work_queue_start+0xcc>)
   205e6:	9400      	str	r4, [sp, #0]
   205e8:	f7ff f8a2 	bl	1f730 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   205ec:	b125      	cbz	r5, 205f8 <k_work_queue_start+0xa8>
   205ee:	6829      	ldr	r1, [r5, #0]
   205f0:	b111      	cbz	r1, 205f8 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   205f2:	4620      	mov	r0, r4
   205f4:	f008 fefa 	bl	293ec <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   205f8:	4620      	mov	r0, r4
}
   205fa:	b009      	add	sp, #36	; 0x24
   205fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20600:	f008 bef9 	b.w	293f6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20604:	2001      	movs	r0, #1
   20606:	e7df      	b.n	205c8 <k_work_queue_start+0x78>
   20608:	00030a46 	.word	0x00030a46
   2060c:	000309b0 	.word	0x000309b0
   20610:	0002b6e9 	.word	0x0002b6e9
   20614:	00030a4c 	.word	0x00030a4c
   20618:	00030a52 	.word	0x00030a52
   2061c:	0001ffe5 	.word	0x0001ffe5

00020620 <k_work_queue_drain>:
{
   20620:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20622:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   20624:	4604      	mov	r4, r0
   20626:	b958      	cbnz	r0, 20640 <k_work_queue_drain+0x20>
   20628:	493a      	ldr	r1, [pc, #232]	; (20714 <k_work_queue_drain+0xf4>)
   2062a:	f240 23ed 	movw	r3, #749	; 0x2ed
   2062e:	4a3a      	ldr	r2, [pc, #232]	; (20718 <k_work_queue_drain+0xf8>)
   20630:	483a      	ldr	r0, [pc, #232]	; (2071c <k_work_queue_drain+0xfc>)
   20632:	f004 fb74 	bl	24d1e <assert_print>
   20636:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   2063a:	4837      	ldr	r0, [pc, #220]	; (20718 <k_work_queue_drain+0xf8>)
   2063c:	f004 fb68 	bl	24d10 <assert_post_action>
   20640:	f008 fece 	bl	293e0 <k_is_in_isr>
   20644:	b148      	cbz	r0, 2065a <k_work_queue_drain+0x3a>
   20646:	4936      	ldr	r1, [pc, #216]	; (20720 <k_work_queue_drain+0x100>)
   20648:	f240 23ee 	movw	r3, #750	; 0x2ee
   2064c:	4a32      	ldr	r2, [pc, #200]	; (20718 <k_work_queue_drain+0xf8>)
   2064e:	4833      	ldr	r0, [pc, #204]	; (2071c <k_work_queue_drain+0xfc>)
   20650:	f004 fb65 	bl	24d1e <assert_print>
   20654:	f240 21ee 	movw	r1, #750	; 0x2ee
   20658:	e7ef      	b.n	2063a <k_work_queue_drain+0x1a>
	__asm__ volatile(
   2065a:	f04f 0320 	mov.w	r3, #32
   2065e:	f3ef 8611 	mrs	r6, BASEPRI
   20662:	f383 8812 	msr	BASEPRI_MAX, r3
   20666:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2066a:	482e      	ldr	r0, [pc, #184]	; (20724 <k_work_queue_drain+0x104>)
   2066c:	f7ff f92a 	bl	1f8c4 <z_spin_lock_valid>
   20670:	b960      	cbnz	r0, 2068c <k_work_queue_drain+0x6c>
   20672:	2394      	movs	r3, #148	; 0x94
   20674:	4a2c      	ldr	r2, [pc, #176]	; (20728 <k_work_queue_drain+0x108>)
   20676:	492d      	ldr	r1, [pc, #180]	; (2072c <k_work_queue_drain+0x10c>)
   20678:	4828      	ldr	r0, [pc, #160]	; (2071c <k_work_queue_drain+0xfc>)
   2067a:	f004 fb50 	bl	24d1e <assert_print>
   2067e:	4929      	ldr	r1, [pc, #164]	; (20724 <k_work_queue_drain+0x104>)
   20680:	482b      	ldr	r0, [pc, #172]	; (20730 <k_work_queue_drain+0x110>)
   20682:	f004 fb4c 	bl	24d1e <assert_print>
   20686:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20688:	4827      	ldr	r0, [pc, #156]	; (20728 <k_work_queue_drain+0x108>)
   2068a:	e7d7      	b.n	2063c <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   2068c:	4825      	ldr	r0, [pc, #148]	; (20724 <k_work_queue_drain+0x104>)
   2068e:	f7ff f935 	bl	1f8fc <z_spin_lock_set_owner>
	return *flagp;
   20692:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   20696:	f013 0f06 	tst.w	r3, #6
   2069a:	d11d      	bne.n	206d8 <k_work_queue_drain+0xb8>
	    || plug
   2069c:	b1b5      	cbz	r5, 206cc <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   2069e:	f043 030c 	orr.w	r3, r3, #12
   206a2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   206a6:	4620      	mov	r0, r4
   206a8:	f008 ff14 	bl	294d4 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   206ac:	2300      	movs	r3, #0
   206ae:	f04f 32ff 	mov.w	r2, #4294967295
   206b2:	9302      	str	r3, [sp, #8]
   206b4:	f04f 33ff 	mov.w	r3, #4294967295
   206b8:	4631      	mov	r1, r6
   206ba:	e9cd 2300 	strd	r2, r3, [sp]
   206be:	4819      	ldr	r0, [pc, #100]	; (20724 <k_work_queue_drain+0x104>)
   206c0:	f104 0298 	add.w	r2, r4, #152	; 0x98
   206c4:	f001 fc0a 	bl	21edc <z_sched_wait>
}
   206c8:	b004      	add	sp, #16
   206ca:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   206cc:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   206d0:	b14d      	cbz	r5, 206e6 <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   206d2:	f043 0304 	orr.w	r3, r3, #4
   206d6:	e7e4      	b.n	206a2 <k_work_queue_drain+0x82>
   206d8:	f043 0204 	orr.w	r2, r3, #4
   206dc:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   206e0:	2d00      	cmp	r5, #0
   206e2:	d0e0      	beq.n	206a6 <k_work_queue_drain+0x86>
   206e4:	e7db      	b.n	2069e <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   206e6:	480f      	ldr	r0, [pc, #60]	; (20724 <k_work_queue_drain+0x104>)
   206e8:	f7ff f8fa 	bl	1f8e0 <z_spin_unlock_valid>
   206ec:	b958      	cbnz	r0, 20706 <k_work_queue_drain+0xe6>
   206ee:	23c2      	movs	r3, #194	; 0xc2
   206f0:	4a0d      	ldr	r2, [pc, #52]	; (20728 <k_work_queue_drain+0x108>)
   206f2:	4910      	ldr	r1, [pc, #64]	; (20734 <k_work_queue_drain+0x114>)
   206f4:	4809      	ldr	r0, [pc, #36]	; (2071c <k_work_queue_drain+0xfc>)
   206f6:	f004 fb12 	bl	24d1e <assert_print>
   206fa:	490a      	ldr	r1, [pc, #40]	; (20724 <k_work_queue_drain+0x104>)
   206fc:	480e      	ldr	r0, [pc, #56]	; (20738 <k_work_queue_drain+0x118>)
   206fe:	f004 fb0e 	bl	24d1e <assert_print>
   20702:	21c2      	movs	r1, #194	; 0xc2
   20704:	e7c0      	b.n	20688 <k_work_queue_drain+0x68>
	__asm__ volatile(
   20706:	f386 8811 	msr	BASEPRI, r6
   2070a:	f3bf 8f6f 	isb	sy
	int ret = 0;
   2070e:	4628      	mov	r0, r5
	return ret;
   20710:	e7da      	b.n	206c8 <k_work_queue_drain+0xa8>
   20712:	bf00      	nop
   20714:	00030a46 	.word	0x00030a46
   20718:	000309b0 	.word	0x000309b0
   2071c:	0002b6e9 	.word	0x0002b6e9
   20720:	0002e5ae 	.word	0x0002e5ae
   20724:	2002153c 	.word	0x2002153c
   20728:	0002c4fc 	.word	0x0002c4fc
   2072c:	0002c555 	.word	0x0002c555
   20730:	0002c56a 	.word	0x0002c56a
   20734:	0002c529 	.word	0x0002c529
   20738:	0002c540 	.word	0x0002c540

0002073c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   2073c:	b538      	push	{r3, r4, r5, lr}
   2073e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   20740:	4604      	mov	r4, r0
   20742:	b958      	cbnz	r0, 2075c <k_work_init_delayable+0x20>
   20744:	490f      	ldr	r1, [pc, #60]	; (20784 <k_work_init_delayable+0x48>)
   20746:	f44f 7350 	mov.w	r3, #832	; 0x340
   2074a:	4a0f      	ldr	r2, [pc, #60]	; (20788 <k_work_init_delayable+0x4c>)
   2074c:	480f      	ldr	r0, [pc, #60]	; (2078c <k_work_init_delayable+0x50>)
   2074e:	f004 fae6 	bl	24d1e <assert_print>
   20752:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   20756:	480c      	ldr	r0, [pc, #48]	; (20788 <k_work_init_delayable+0x4c>)
   20758:	f004 fada 	bl	24d10 <assert_post_action>
   2075c:	b949      	cbnz	r1, 20772 <k_work_init_delayable+0x36>
   2075e:	490c      	ldr	r1, [pc, #48]	; (20790 <k_work_init_delayable+0x54>)
   20760:	f240 3341 	movw	r3, #833	; 0x341
   20764:	4a08      	ldr	r2, [pc, #32]	; (20788 <k_work_init_delayable+0x4c>)
   20766:	4809      	ldr	r0, [pc, #36]	; (2078c <k_work_init_delayable+0x50>)
   20768:	f004 fad9 	bl	24d1e <assert_print>
   2076c:	f240 3141 	movw	r1, #833	; 0x341
   20770:	e7f1      	b.n	20756 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   20772:	2230      	movs	r2, #48	; 0x30
   20774:	2100      	movs	r1, #0
   20776:	f009 f872 	bl	2985e <memset>
   2077a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2077e:	6065      	str	r5, [r4, #4]
   20780:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   20782:	bd38      	pop	{r3, r4, r5, pc}
   20784:	00030a86 	.word	0x00030a86
   20788:	000309b0 	.word	0x000309b0
   2078c:	0002b6e9 	.word	0x0002b6e9
   20790:	000309d1 	.word	0x000309d1

00020794 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   20794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20796:	4616      	mov	r6, r2
   20798:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2079a:	460c      	mov	r4, r1
{
   2079c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2079e:	b959      	cbnz	r1, 207b8 <k_work_schedule_for_queue+0x24>
   207a0:	492d      	ldr	r1, [pc, #180]	; (20858 <k_work_schedule_for_queue+0xc4>)
   207a2:	482e      	ldr	r0, [pc, #184]	; (2085c <k_work_schedule_for_queue+0xc8>)
   207a4:	f240 33b7 	movw	r3, #951	; 0x3b7
   207a8:	4a2d      	ldr	r2, [pc, #180]	; (20860 <k_work_schedule_for_queue+0xcc>)
   207aa:	f004 fab8 	bl	24d1e <assert_print>
   207ae:	f240 31b7 	movw	r1, #951	; 0x3b7
   207b2:	482b      	ldr	r0, [pc, #172]	; (20860 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   207b4:	f004 faac 	bl	24d10 <assert_post_action>
	__asm__ volatile(
   207b8:	f04f 0320 	mov.w	r3, #32
   207bc:	f3ef 8711 	mrs	r7, BASEPRI
   207c0:	f383 8812 	msr	BASEPRI_MAX, r3
   207c4:	f3bf 8f6f 	isb	sy
   207c8:	4826      	ldr	r0, [pc, #152]	; (20864 <k_work_schedule_for_queue+0xd0>)
   207ca:	f7ff f87b 	bl	1f8c4 <z_spin_lock_valid>
   207ce:	b960      	cbnz	r0, 207ea <k_work_schedule_for_queue+0x56>
   207d0:	2394      	movs	r3, #148	; 0x94
   207d2:	4a25      	ldr	r2, [pc, #148]	; (20868 <k_work_schedule_for_queue+0xd4>)
   207d4:	4925      	ldr	r1, [pc, #148]	; (2086c <k_work_schedule_for_queue+0xd8>)
   207d6:	4821      	ldr	r0, [pc, #132]	; (2085c <k_work_schedule_for_queue+0xc8>)
   207d8:	f004 faa1 	bl	24d1e <assert_print>
   207dc:	4921      	ldr	r1, [pc, #132]	; (20864 <k_work_schedule_for_queue+0xd0>)
   207de:	4824      	ldr	r0, [pc, #144]	; (20870 <k_work_schedule_for_queue+0xdc>)
   207e0:	f004 fa9d 	bl	24d1e <assert_print>
   207e4:	2194      	movs	r1, #148	; 0x94
   207e6:	4820      	ldr	r0, [pc, #128]	; (20868 <k_work_schedule_for_queue+0xd4>)
   207e8:	e7e4      	b.n	207b4 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   207ea:	481e      	ldr	r0, [pc, #120]	; (20864 <k_work_schedule_for_queue+0xd0>)
   207ec:	f7ff f886 	bl	1f8fc <z_spin_lock_set_owner>
	return *flagp;
   207f0:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   207f2:	f013 0f0e 	tst.w	r3, #14
   207f6:	d125      	bne.n	20844 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   207f8:	ea55 0206 	orrs.w	r2, r5, r6
   207fc:	d114      	bne.n	20828 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   207fe:	4620      	mov	r0, r4
   20800:	a901      	add	r1, sp, #4
   20802:	f7ff fd01 	bl	20208 <submit_to_queue_locked>
   20806:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20808:	4816      	ldr	r0, [pc, #88]	; (20864 <k_work_schedule_for_queue+0xd0>)
   2080a:	f7ff f869 	bl	1f8e0 <z_spin_unlock_valid>
   2080e:	b9d8      	cbnz	r0, 20848 <k_work_schedule_for_queue+0xb4>
   20810:	23c2      	movs	r3, #194	; 0xc2
   20812:	4a15      	ldr	r2, [pc, #84]	; (20868 <k_work_schedule_for_queue+0xd4>)
   20814:	4917      	ldr	r1, [pc, #92]	; (20874 <k_work_schedule_for_queue+0xe0>)
   20816:	4811      	ldr	r0, [pc, #68]	; (2085c <k_work_schedule_for_queue+0xc8>)
   20818:	f004 fa81 	bl	24d1e <assert_print>
   2081c:	4911      	ldr	r1, [pc, #68]	; (20864 <k_work_schedule_for_queue+0xd0>)
   2081e:	4816      	ldr	r0, [pc, #88]	; (20878 <k_work_schedule_for_queue+0xe4>)
   20820:	f004 fa7d 	bl	24d1e <assert_print>
   20824:	21c2      	movs	r1, #194	; 0xc2
   20826:	e7de      	b.n	207e6 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   20828:	f043 0308 	orr.w	r3, r3, #8
   2082c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2082e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20830:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   20834:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20836:	4632      	mov	r2, r6
   20838:	462b      	mov	r3, r5
   2083a:	4910      	ldr	r1, [pc, #64]	; (2087c <k_work_schedule_for_queue+0xe8>)
   2083c:	f001 fbc8 	bl	21fd0 <z_add_timeout>
	return ret;
   20840:	2401      	movs	r4, #1
   20842:	e7e1      	b.n	20808 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   20844:	2400      	movs	r4, #0
   20846:	e7df      	b.n	20808 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   20848:	f387 8811 	msr	BASEPRI, r7
   2084c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   20850:	4620      	mov	r0, r4
   20852:	b003      	add	sp, #12
   20854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20856:	bf00      	nop
   20858:	00030a86 	.word	0x00030a86
   2085c:	0002b6e9 	.word	0x0002b6e9
   20860:	000309b0 	.word	0x000309b0
   20864:	2002153c 	.word	0x2002153c
   20868:	0002c4fc 	.word	0x0002c4fc
   2086c:	0002c555 	.word	0x0002c555
   20870:	0002c56a 	.word	0x0002c56a
   20874:	0002c529 	.word	0x0002c529
   20878:	0002c540 	.word	0x0002c540
   2087c:	000202e1 	.word	0x000202e1

00020880 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   20880:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   20882:	4801      	ldr	r0, [pc, #4]	; (20888 <k_work_schedule+0x8>)
   20884:	f7ff bf86 	b.w	20794 <k_work_schedule_for_queue>
   20888:	20009d18 	.word	0x20009d18

0002088c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   2088c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2088e:	4616      	mov	r6, r2
   20890:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   20892:	460c      	mov	r4, r1
{
   20894:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   20896:	b959      	cbnz	r1, 208b0 <k_work_reschedule_for_queue+0x24>
   20898:	492c      	ldr	r1, [pc, #176]	; (2094c <k_work_reschedule_for_queue+0xc0>)
   2089a:	482d      	ldr	r0, [pc, #180]	; (20950 <k_work_reschedule_for_queue+0xc4>)
   2089c:	f240 33db 	movw	r3, #987	; 0x3db
   208a0:	4a2c      	ldr	r2, [pc, #176]	; (20954 <k_work_reschedule_for_queue+0xc8>)
   208a2:	f004 fa3c 	bl	24d1e <assert_print>
   208a6:	f240 31db 	movw	r1, #987	; 0x3db
   208aa:	482a      	ldr	r0, [pc, #168]	; (20954 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   208ac:	f004 fa30 	bl	24d10 <assert_post_action>
	__asm__ volatile(
   208b0:	f04f 0320 	mov.w	r3, #32
   208b4:	f3ef 8711 	mrs	r7, BASEPRI
   208b8:	f383 8812 	msr	BASEPRI_MAX, r3
   208bc:	f3bf 8f6f 	isb	sy
   208c0:	4825      	ldr	r0, [pc, #148]	; (20958 <k_work_reschedule_for_queue+0xcc>)
   208c2:	f7fe ffff 	bl	1f8c4 <z_spin_lock_valid>
   208c6:	b960      	cbnz	r0, 208e2 <k_work_reschedule_for_queue+0x56>
   208c8:	2394      	movs	r3, #148	; 0x94
   208ca:	4a24      	ldr	r2, [pc, #144]	; (2095c <k_work_reschedule_for_queue+0xd0>)
   208cc:	4924      	ldr	r1, [pc, #144]	; (20960 <k_work_reschedule_for_queue+0xd4>)
   208ce:	4820      	ldr	r0, [pc, #128]	; (20950 <k_work_reschedule_for_queue+0xc4>)
   208d0:	f004 fa25 	bl	24d1e <assert_print>
   208d4:	4920      	ldr	r1, [pc, #128]	; (20958 <k_work_reschedule_for_queue+0xcc>)
   208d6:	4823      	ldr	r0, [pc, #140]	; (20964 <k_work_reschedule_for_queue+0xd8>)
   208d8:	f004 fa21 	bl	24d1e <assert_print>
   208dc:	2194      	movs	r1, #148	; 0x94
   208de:	481f      	ldr	r0, [pc, #124]	; (2095c <k_work_reschedule_for_queue+0xd0>)
   208e0:	e7e4      	b.n	208ac <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   208e2:	481d      	ldr	r0, [pc, #116]	; (20958 <k_work_reschedule_for_queue+0xcc>)
   208e4:	f7ff f80a 	bl	1f8fc <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   208e8:	4620      	mov	r0, r4
   208ea:	f008 fde5 	bl	294b8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   208ee:	ea55 0306 	orrs.w	r3, r5, r6
   208f2:	d114      	bne.n	2091e <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   208f4:	4620      	mov	r0, r4
   208f6:	a901      	add	r1, sp, #4
   208f8:	f7ff fc86 	bl	20208 <submit_to_queue_locked>
   208fc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208fe:	4816      	ldr	r0, [pc, #88]	; (20958 <k_work_reschedule_for_queue+0xcc>)
   20900:	f7fe ffee 	bl	1f8e0 <z_spin_unlock_valid>
   20904:	b9d0      	cbnz	r0, 2093c <k_work_reschedule_for_queue+0xb0>
   20906:	23c2      	movs	r3, #194	; 0xc2
   20908:	4a14      	ldr	r2, [pc, #80]	; (2095c <k_work_reschedule_for_queue+0xd0>)
   2090a:	4917      	ldr	r1, [pc, #92]	; (20968 <k_work_reschedule_for_queue+0xdc>)
   2090c:	4810      	ldr	r0, [pc, #64]	; (20950 <k_work_reschedule_for_queue+0xc4>)
   2090e:	f004 fa06 	bl	24d1e <assert_print>
   20912:	4911      	ldr	r1, [pc, #68]	; (20958 <k_work_reschedule_for_queue+0xcc>)
   20914:	4815      	ldr	r0, [pc, #84]	; (2096c <k_work_reschedule_for_queue+0xe0>)
   20916:	f004 fa02 	bl	24d1e <assert_print>
   2091a:	21c2      	movs	r1, #194	; 0xc2
   2091c:	e7df      	b.n	208de <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   2091e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20920:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   20924:	f043 0308 	orr.w	r3, r3, #8
   20928:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2092a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2092c:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   2092e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20930:	490f      	ldr	r1, [pc, #60]	; (20970 <k_work_reschedule_for_queue+0xe4>)
   20932:	462b      	mov	r3, r5
   20934:	f001 fb4c 	bl	21fd0 <z_add_timeout>
	return ret;
   20938:	2401      	movs	r4, #1
   2093a:	e7e0      	b.n	208fe <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   2093c:	f387 8811 	msr	BASEPRI, r7
   20940:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   20944:	4620      	mov	r0, r4
   20946:	b003      	add	sp, #12
   20948:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2094a:	bf00      	nop
   2094c:	00030a86 	.word	0x00030a86
   20950:	0002b6e9 	.word	0x0002b6e9
   20954:	000309b0 	.word	0x000309b0
   20958:	2002153c 	.word	0x2002153c
   2095c:	0002c4fc 	.word	0x0002c4fc
   20960:	0002c555 	.word	0x0002c555
   20964:	0002c56a 	.word	0x0002c56a
   20968:	0002c529 	.word	0x0002c529
   2096c:	0002c540 	.word	0x0002c540
   20970:	000202e1 	.word	0x000202e1

00020974 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   20974:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   20976:	4801      	ldr	r0, [pc, #4]	; (2097c <k_work_reschedule+0x8>)
   20978:	f7ff bf88 	b.w	2088c <k_work_reschedule_for_queue>
   2097c:	20009d18 	.word	0x20009d18

00020980 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   20980:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   20982:	4604      	mov	r4, r0
   20984:	b958      	cbnz	r0, 2099e <k_work_cancel_delayable+0x1e>
   20986:	4922      	ldr	r1, [pc, #136]	; (20a10 <k_work_cancel_delayable+0x90>)
   20988:	4822      	ldr	r0, [pc, #136]	; (20a14 <k_work_cancel_delayable+0x94>)
   2098a:	f240 33fd 	movw	r3, #1021	; 0x3fd
   2098e:	4a22      	ldr	r2, [pc, #136]	; (20a18 <k_work_cancel_delayable+0x98>)
   20990:	f004 f9c5 	bl	24d1e <assert_print>
   20994:	f240 31fd 	movw	r1, #1021	; 0x3fd
   20998:	481f      	ldr	r0, [pc, #124]	; (20a18 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2099a:	f004 f9b9 	bl	24d10 <assert_post_action>
	__asm__ volatile(
   2099e:	f04f 0320 	mov.w	r3, #32
   209a2:	f3ef 8511 	mrs	r5, BASEPRI
   209a6:	f383 8812 	msr	BASEPRI_MAX, r3
   209aa:	f3bf 8f6f 	isb	sy
   209ae:	481b      	ldr	r0, [pc, #108]	; (20a1c <k_work_cancel_delayable+0x9c>)
   209b0:	f7fe ff88 	bl	1f8c4 <z_spin_lock_valid>
   209b4:	b960      	cbnz	r0, 209d0 <k_work_cancel_delayable+0x50>
   209b6:	2394      	movs	r3, #148	; 0x94
   209b8:	4a19      	ldr	r2, [pc, #100]	; (20a20 <k_work_cancel_delayable+0xa0>)
   209ba:	491a      	ldr	r1, [pc, #104]	; (20a24 <k_work_cancel_delayable+0xa4>)
   209bc:	4815      	ldr	r0, [pc, #84]	; (20a14 <k_work_cancel_delayable+0x94>)
   209be:	f004 f9ae 	bl	24d1e <assert_print>
   209c2:	4916      	ldr	r1, [pc, #88]	; (20a1c <k_work_cancel_delayable+0x9c>)
   209c4:	4818      	ldr	r0, [pc, #96]	; (20a28 <k_work_cancel_delayable+0xa8>)
   209c6:	f004 f9aa 	bl	24d1e <assert_print>
   209ca:	2194      	movs	r1, #148	; 0x94
   209cc:	4814      	ldr	r0, [pc, #80]	; (20a20 <k_work_cancel_delayable+0xa0>)
   209ce:	e7e4      	b.n	2099a <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   209d0:	4812      	ldr	r0, [pc, #72]	; (20a1c <k_work_cancel_delayable+0x9c>)
   209d2:	f7fe ff93 	bl	1f8fc <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   209d6:	4620      	mov	r0, r4
   209d8:	f008 fd6e 	bl	294b8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   209dc:	4620      	mov	r0, r4
   209de:	f008 fd80 	bl	294e2 <cancel_async_locked>
   209e2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209e4:	480d      	ldr	r0, [pc, #52]	; (20a1c <k_work_cancel_delayable+0x9c>)
   209e6:	f7fe ff7b 	bl	1f8e0 <z_spin_unlock_valid>
   209ea:	b958      	cbnz	r0, 20a04 <k_work_cancel_delayable+0x84>
   209ec:	23c2      	movs	r3, #194	; 0xc2
   209ee:	4a0c      	ldr	r2, [pc, #48]	; (20a20 <k_work_cancel_delayable+0xa0>)
   209f0:	490e      	ldr	r1, [pc, #56]	; (20a2c <k_work_cancel_delayable+0xac>)
   209f2:	4808      	ldr	r0, [pc, #32]	; (20a14 <k_work_cancel_delayable+0x94>)
   209f4:	f004 f993 	bl	24d1e <assert_print>
   209f8:	4908      	ldr	r1, [pc, #32]	; (20a1c <k_work_cancel_delayable+0x9c>)
   209fa:	480d      	ldr	r0, [pc, #52]	; (20a30 <k_work_cancel_delayable+0xb0>)
   209fc:	f004 f98f 	bl	24d1e <assert_print>
   20a00:	21c2      	movs	r1, #194	; 0xc2
   20a02:	e7e3      	b.n	209cc <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   20a04:	f385 8811 	msr	BASEPRI, r5
   20a08:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   20a0c:	4620      	mov	r0, r4
   20a0e:	bd38      	pop	{r3, r4, r5, pc}
   20a10:	00030a86 	.word	0x00030a86
   20a14:	0002b6e9 	.word	0x0002b6e9
   20a18:	000309b0 	.word	0x000309b0
   20a1c:	2002153c 	.word	0x2002153c
   20a20:	0002c4fc 	.word	0x0002c4fc
   20a24:	0002c555 	.word	0x0002c555
   20a28:	0002c56a 	.word	0x0002c56a
   20a2c:	0002c529 	.word	0x0002c529
   20a30:	0002c540 	.word	0x0002c540

00020a34 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   20a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a38:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   20a3a:	4605      	mov	r5, r0
   20a3c:	b958      	cbnz	r0, 20a56 <k_work_cancel_delayable_sync+0x22>
   20a3e:	493a      	ldr	r1, [pc, #232]	; (20b28 <k_work_cancel_delayable_sync+0xf4>)
   20a40:	f240 430e 	movw	r3, #1038	; 0x40e
   20a44:	4a39      	ldr	r2, [pc, #228]	; (20b2c <k_work_cancel_delayable_sync+0xf8>)
   20a46:	483a      	ldr	r0, [pc, #232]	; (20b30 <k_work_cancel_delayable_sync+0xfc>)
   20a48:	f004 f969 	bl	24d1e <assert_print>
   20a4c:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   20a50:	4836      	ldr	r0, [pc, #216]	; (20b2c <k_work_cancel_delayable_sync+0xf8>)
   20a52:	f004 f95d 	bl	24d10 <assert_post_action>
   20a56:	b949      	cbnz	r1, 20a6c <k_work_cancel_delayable_sync+0x38>
   20a58:	4936      	ldr	r1, [pc, #216]	; (20b34 <k_work_cancel_delayable_sync+0x100>)
   20a5a:	f240 430f 	movw	r3, #1039	; 0x40f
   20a5e:	4a33      	ldr	r2, [pc, #204]	; (20b2c <k_work_cancel_delayable_sync+0xf8>)
   20a60:	4833      	ldr	r0, [pc, #204]	; (20b30 <k_work_cancel_delayable_sync+0xfc>)
   20a62:	f004 f95c 	bl	24d1e <assert_print>
   20a66:	f240 410f 	movw	r1, #1039	; 0x40f
   20a6a:	e7f1      	b.n	20a50 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   20a6c:	f008 fcb8 	bl	293e0 <k_is_in_isr>
   20a70:	4604      	mov	r4, r0
   20a72:	b148      	cbz	r0, 20a88 <k_work_cancel_delayable_sync+0x54>
   20a74:	4930      	ldr	r1, [pc, #192]	; (20b38 <k_work_cancel_delayable_sync+0x104>)
   20a76:	f44f 6382 	mov.w	r3, #1040	; 0x410
   20a7a:	4a2c      	ldr	r2, [pc, #176]	; (20b2c <k_work_cancel_delayable_sync+0xf8>)
   20a7c:	482c      	ldr	r0, [pc, #176]	; (20b30 <k_work_cancel_delayable_sync+0xfc>)
   20a7e:	f004 f94e 	bl	24d1e <assert_print>
   20a82:	f44f 6182 	mov.w	r1, #1040	; 0x410
   20a86:	e7e3      	b.n	20a50 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   20a88:	f04f 0320 	mov.w	r3, #32
   20a8c:	f3ef 8811 	mrs	r8, BASEPRI
   20a90:	f383 8812 	msr	BASEPRI_MAX, r3
   20a94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a98:	4828      	ldr	r0, [pc, #160]	; (20b3c <k_work_cancel_delayable_sync+0x108>)
   20a9a:	f7fe ff13 	bl	1f8c4 <z_spin_lock_valid>
   20a9e:	b960      	cbnz	r0, 20aba <k_work_cancel_delayable_sync+0x86>
   20aa0:	2394      	movs	r3, #148	; 0x94
   20aa2:	4a27      	ldr	r2, [pc, #156]	; (20b40 <k_work_cancel_delayable_sync+0x10c>)
   20aa4:	4927      	ldr	r1, [pc, #156]	; (20b44 <k_work_cancel_delayable_sync+0x110>)
   20aa6:	4822      	ldr	r0, [pc, #136]	; (20b30 <k_work_cancel_delayable_sync+0xfc>)
   20aa8:	f004 f939 	bl	24d1e <assert_print>
   20aac:	4923      	ldr	r1, [pc, #140]	; (20b3c <k_work_cancel_delayable_sync+0x108>)
   20aae:	4826      	ldr	r0, [pc, #152]	; (20b48 <k_work_cancel_delayable_sync+0x114>)
   20ab0:	f004 f935 	bl	24d1e <assert_print>
   20ab4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ab6:	4822      	ldr	r0, [pc, #136]	; (20b40 <k_work_cancel_delayable_sync+0x10c>)
   20ab8:	e7cb      	b.n	20a52 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   20aba:	4820      	ldr	r0, [pc, #128]	; (20b3c <k_work_cancel_delayable_sync+0x108>)
   20abc:	f7fe ff1e 	bl	1f8fc <z_spin_lock_set_owner>
	return *flagp;
   20ac0:	68eb      	ldr	r3, [r5, #12]
   20ac2:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   20ac6:	2b00      	cmp	r3, #0
   20ac8:	bf14      	ite	ne
   20aca:	2701      	movne	r7, #1
   20acc:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   20ace:	d00a      	beq.n	20ae6 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   20ad0:	4628      	mov	r0, r5
   20ad2:	f008 fcf1 	bl	294b8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20ad6:	4628      	mov	r0, r5
   20ad8:	f008 fd03 	bl	294e2 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   20adc:	4631      	mov	r1, r6
   20ade:	4628      	mov	r0, r5
   20ae0:	f7ff fb74 	bl	201cc <cancel_sync_locked>
   20ae4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ae6:	4815      	ldr	r0, [pc, #84]	; (20b3c <k_work_cancel_delayable_sync+0x108>)
   20ae8:	f7fe fefa 	bl	1f8e0 <z_spin_unlock_valid>
   20aec:	b958      	cbnz	r0, 20b06 <k_work_cancel_delayable_sync+0xd2>
   20aee:	23c2      	movs	r3, #194	; 0xc2
   20af0:	4a13      	ldr	r2, [pc, #76]	; (20b40 <k_work_cancel_delayable_sync+0x10c>)
   20af2:	4916      	ldr	r1, [pc, #88]	; (20b4c <k_work_cancel_delayable_sync+0x118>)
   20af4:	480e      	ldr	r0, [pc, #56]	; (20b30 <k_work_cancel_delayable_sync+0xfc>)
   20af6:	f004 f912 	bl	24d1e <assert_print>
   20afa:	4910      	ldr	r1, [pc, #64]	; (20b3c <k_work_cancel_delayable_sync+0x108>)
   20afc:	4814      	ldr	r0, [pc, #80]	; (20b50 <k_work_cancel_delayable_sync+0x11c>)
   20afe:	f004 f90e 	bl	24d1e <assert_print>
   20b02:	21c2      	movs	r1, #194	; 0xc2
   20b04:	e7d7      	b.n	20ab6 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   20b06:	f388 8811 	msr	BASEPRI, r8
   20b0a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   20b0e:	b13c      	cbz	r4, 20b20 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   20b10:	f04f 32ff 	mov.w	r2, #4294967295
   20b14:	f04f 33ff 	mov.w	r3, #4294967295
   20b18:	f106 0008 	add.w	r0, r6, #8
   20b1c:	f7ff f9ce 	bl	1febc <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20b20:	4638      	mov	r0, r7
   20b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20b26:	bf00      	nop
   20b28:	00030a86 	.word	0x00030a86
   20b2c:	000309b0 	.word	0x000309b0
   20b30:	0002b6e9 	.word	0x0002b6e9
   20b34:	00030a32 	.word	0x00030a32
   20b38:	0002e5ae 	.word	0x0002e5ae
   20b3c:	2002153c 	.word	0x2002153c
   20b40:	0002c4fc 	.word	0x0002c4fc
   20b44:	0002c555 	.word	0x0002c555
   20b48:	0002c56a 	.word	0x0002c56a
   20b4c:	0002c529 	.word	0x0002c529
   20b50:	0002c540 	.word	0x0002c540

00020b54 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   20b54:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   20b56:	4d07      	ldr	r5, [pc, #28]	; (20b74 <z_reset_time_slice+0x20>)
   20b58:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   20b5a:	b154      	cbz	r4, 20b72 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   20b5c:	f7fb fc90 	bl	1c480 <sys_clock_elapsed>
   20b60:	4b05      	ldr	r3, [pc, #20]	; (20b78 <z_reset_time_slice+0x24>)
   20b62:	4404      	add	r4, r0
   20b64:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   20b66:	6828      	ldr	r0, [r5, #0]
   20b68:	2100      	movs	r1, #0
	}
}
   20b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   20b6e:	f001 bb87 	b.w	22280 <z_set_timeout_expiry>
}
   20b72:	bd38      	pop	{r3, r4, r5, pc}
   20b74:	20021548 	.word	0x20021548
   20b78:	20021504 	.word	0x20021504

00020b7c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   20b7c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   20b7e:	4d14      	ldr	r5, [pc, #80]	; (20bd0 <update_cache+0x54>)
   20b80:	462b      	mov	r3, r5
   20b82:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20b86:	429c      	cmp	r4, r3
   20b88:	d000      	beq.n	20b8c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   20b8a:	b904      	cbnz	r4, 20b8e <update_cache+0x12>
   20b8c:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   20b8e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   20b90:	b9a8      	cbnz	r0, 20bbe <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   20b92:	b963      	cbnz	r3, 20bae <update_cache+0x32>
   20b94:	490f      	ldr	r1, [pc, #60]	; (20bd4 <update_cache+0x58>)
   20b96:	2389      	movs	r3, #137	; 0x89
   20b98:	4a0f      	ldr	r2, [pc, #60]	; (20bd8 <update_cache+0x5c>)
   20b9a:	4810      	ldr	r0, [pc, #64]	; (20bdc <update_cache+0x60>)
   20b9c:	f004 f8bf 	bl	24d1e <assert_print>
   20ba0:	480f      	ldr	r0, [pc, #60]	; (20be0 <update_cache+0x64>)
   20ba2:	f004 f8bc 	bl	24d1e <assert_print>
   20ba6:	2189      	movs	r1, #137	; 0x89
   20ba8:	480b      	ldr	r0, [pc, #44]	; (20bd8 <update_cache+0x5c>)
   20baa:	f004 f8b1 	bl	24d10 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   20bae:	7b5a      	ldrb	r2, [r3, #13]
   20bb0:	06d2      	lsls	r2, r2, #27
   20bb2:	d104      	bne.n	20bbe <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20bb4:	69a2      	ldr	r2, [r4, #24]
   20bb6:	b912      	cbnz	r2, 20bbe <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   20bb8:	89da      	ldrh	r2, [r3, #14]
   20bba:	2a7f      	cmp	r2, #127	; 0x7f
   20bbc:	d805      	bhi.n	20bca <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   20bbe:	429c      	cmp	r4, r3
   20bc0:	d002      	beq.n	20bc8 <update_cache+0x4c>
			z_reset_time_slice(thread);
   20bc2:	4620      	mov	r0, r4
   20bc4:	f7ff ffc6 	bl	20b54 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   20bc8:	4623      	mov	r3, r4
   20bca:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   20bcc:	bd38      	pop	{r3, r4, r5, pc}
   20bce:	bf00      	nop
   20bd0:	20021504 	.word	0x20021504
   20bd4:	00030abd 	.word	0x00030abd
   20bd8:	00030a9b 	.word	0x00030a9b
   20bdc:	0002b6e9 	.word	0x0002b6e9
   20be0:	0002f302 	.word	0x0002f302

00020be4 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   20be4:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   20be6:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   20bea:	7b42      	ldrb	r2, [r0, #13]
   20bec:	2b00      	cmp	r3, #0
   20bee:	db38      	blt.n	20c62 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20bf0:	06d3      	lsls	r3, r2, #27
   20bf2:	d136      	bne.n	20c62 <ready_thread+0x7e>
	return node->next != NULL;
   20bf4:	6983      	ldr	r3, [r0, #24]
   20bf6:	2b00      	cmp	r3, #0
   20bf8:	d133      	bne.n	20c62 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   20bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20bfe:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20c00:	4a18      	ldr	r2, [pc, #96]	; (20c64 <ready_thread+0x80>)
   20c02:	4290      	cmp	r0, r2
   20c04:	d109      	bne.n	20c1a <ready_thread+0x36>
   20c06:	4918      	ldr	r1, [pc, #96]	; (20c68 <ready_thread+0x84>)
   20c08:	4818      	ldr	r0, [pc, #96]	; (20c6c <ready_thread+0x88>)
   20c0a:	23ba      	movs	r3, #186	; 0xba
   20c0c:	4a18      	ldr	r2, [pc, #96]	; (20c70 <ready_thread+0x8c>)
   20c0e:	f004 f886 	bl	24d1e <assert_print>
   20c12:	21ba      	movs	r1, #186	; 0xba
   20c14:	4816      	ldr	r0, [pc, #88]	; (20c70 <ready_thread+0x8c>)
   20c16:	f004 f87b 	bl	24d10 <assert_post_action>
	return list->head == list;
   20c1a:	4916      	ldr	r1, [pc, #88]	; (20c74 <ready_thread+0x90>)
   20c1c:	460a      	mov	r2, r1
   20c1e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20c22:	4294      	cmp	r4, r2
   20c24:	bf18      	it	ne
   20c26:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   20c28:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20c2a:	b923      	cbnz	r3, 20c36 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   20c2c:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   20c30:	6020      	str	r0, [r4, #0]
	list->tail = node;
   20c32:	6248      	str	r0, [r1, #36]	; 0x24
}
   20c34:	e00c      	b.n	20c50 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   20c36:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   20c3a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   20c3e:	42b5      	cmp	r5, r6
   20c40:	d00b      	beq.n	20c5a <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20c42:	42ae      	cmp	r6, r5
   20c44:	dd09      	ble.n	20c5a <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   20c46:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   20c48:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   20c4c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   20c4e:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   20c50:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   20c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   20c56:	f7ff bf91 	b.w	20b7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20c5a:	42a3      	cmp	r3, r4
   20c5c:	d0e6      	beq.n	20c2c <ready_thread+0x48>
   20c5e:	681b      	ldr	r3, [r3, #0]
   20c60:	e7e3      	b.n	20c2a <ready_thread+0x46>
}
   20c62:	bd70      	pop	{r4, r5, r6, pc}
   20c64:	20009c08 	.word	0x20009c08
   20c68:	00030ae4 	.word	0x00030ae4
   20c6c:	0002b6e9 	.word	0x0002b6e9
   20c70:	00030a9b 	.word	0x00030a9b
   20c74:	20021504 	.word	0x20021504

00020c78 <k_sched_time_slice_set>:
{
   20c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c7a:	4604      	mov	r4, r0
   20c7c:	460d      	mov	r5, r1
	__asm__ volatile(
   20c7e:	f04f 0320 	mov.w	r3, #32
   20c82:	f3ef 8711 	mrs	r7, BASEPRI
   20c86:	f383 8812 	msr	BASEPRI_MAX, r3
   20c8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c8e:	4822      	ldr	r0, [pc, #136]	; (20d18 <k_sched_time_slice_set+0xa0>)
   20c90:	f7fe fe18 	bl	1f8c4 <z_spin_lock_valid>
   20c94:	b968      	cbnz	r0, 20cb2 <k_sched_time_slice_set+0x3a>
   20c96:	2394      	movs	r3, #148	; 0x94
   20c98:	4a20      	ldr	r2, [pc, #128]	; (20d1c <k_sched_time_slice_set+0xa4>)
   20c9a:	4921      	ldr	r1, [pc, #132]	; (20d20 <k_sched_time_slice_set+0xa8>)
   20c9c:	4821      	ldr	r0, [pc, #132]	; (20d24 <k_sched_time_slice_set+0xac>)
   20c9e:	f004 f83e 	bl	24d1e <assert_print>
   20ca2:	491d      	ldr	r1, [pc, #116]	; (20d18 <k_sched_time_slice_set+0xa0>)
   20ca4:	4820      	ldr	r0, [pc, #128]	; (20d28 <k_sched_time_slice_set+0xb0>)
   20ca6:	f004 f83a 	bl	24d1e <assert_print>
   20caa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cac:	481b      	ldr	r0, [pc, #108]	; (20d1c <k_sched_time_slice_set+0xa4>)
   20cae:	f004 f82f 	bl	24d10 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   20cb2:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   20cb4:	4818      	ldr	r0, [pc, #96]	; (20d18 <k_sched_time_slice_set+0xa0>)
   20cb6:	f7fe fe21 	bl	1f8fc <z_spin_lock_set_owner>
   20cba:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   20cbe:	f240 30e7 	movw	r0, #999	; 0x3e7
   20cc2:	4631      	mov	r1, r6
   20cc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20cc8:	2300      	movs	r3, #0
   20cca:	fbe4 010c 	umlal	r0, r1, r4, ip
   20cce:	f7e8 f90f 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   20cd2:	42b4      	cmp	r4, r6
   20cd4:	dd02      	ble.n	20cdc <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   20cd6:	2802      	cmp	r0, #2
   20cd8:	bfb8      	it	lt
   20cda:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   20cdc:	4a13      	ldr	r2, [pc, #76]	; (20d2c <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   20cde:	4b14      	ldr	r3, [pc, #80]	; (20d30 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   20ce0:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   20ce2:	4a14      	ldr	r2, [pc, #80]	; (20d34 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   20ce4:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   20ce6:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   20ce8:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   20cea:	f7ff ff33 	bl	20b54 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cee:	480a      	ldr	r0, [pc, #40]	; (20d18 <k_sched_time_slice_set+0xa0>)
   20cf0:	f7fe fdf6 	bl	1f8e0 <z_spin_unlock_valid>
   20cf4:	b958      	cbnz	r0, 20d0e <k_sched_time_slice_set+0x96>
   20cf6:	23c2      	movs	r3, #194	; 0xc2
   20cf8:	4a08      	ldr	r2, [pc, #32]	; (20d1c <k_sched_time_slice_set+0xa4>)
   20cfa:	490f      	ldr	r1, [pc, #60]	; (20d38 <k_sched_time_slice_set+0xc0>)
   20cfc:	4809      	ldr	r0, [pc, #36]	; (20d24 <k_sched_time_slice_set+0xac>)
   20cfe:	f004 f80e 	bl	24d1e <assert_print>
   20d02:	4905      	ldr	r1, [pc, #20]	; (20d18 <k_sched_time_slice_set+0xa0>)
   20d04:	480d      	ldr	r0, [pc, #52]	; (20d3c <k_sched_time_slice_set+0xc4>)
   20d06:	f004 f80a 	bl	24d1e <assert_print>
   20d0a:	21c2      	movs	r1, #194	; 0xc2
   20d0c:	e7ce      	b.n	20cac <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   20d0e:	f387 8811 	msr	BASEPRI, r7
   20d12:	f3bf 8f6f 	isb	sy
}
   20d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d18:	2002154c 	.word	0x2002154c
   20d1c:	0002c4fc 	.word	0x0002c4fc
   20d20:	0002c555 	.word	0x0002c555
   20d24:	0002b6e9 	.word	0x0002b6e9
   20d28:	0002c56a 	.word	0x0002c56a
   20d2c:	20021548 	.word	0x20021548
   20d30:	20021504 	.word	0x20021504
   20d34:	20021544 	.word	0x20021544
   20d38:	0002c529 	.word	0x0002c529
   20d3c:	0002c540 	.word	0x0002c540

00020d40 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   20d40:	b538      	push	{r3, r4, r5, lr}
   20d42:	4604      	mov	r4, r0
	__asm__ volatile(
   20d44:	f04f 0320 	mov.w	r3, #32
   20d48:	f3ef 8511 	mrs	r5, BASEPRI
   20d4c:	f383 8812 	msr	BASEPRI_MAX, r3
   20d50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d54:	4816      	ldr	r0, [pc, #88]	; (20db0 <z_ready_thread+0x70>)
   20d56:	f7fe fdb5 	bl	1f8c4 <z_spin_lock_valid>
   20d5a:	b968      	cbnz	r0, 20d78 <z_ready_thread+0x38>
   20d5c:	2394      	movs	r3, #148	; 0x94
   20d5e:	4a15      	ldr	r2, [pc, #84]	; (20db4 <z_ready_thread+0x74>)
   20d60:	4915      	ldr	r1, [pc, #84]	; (20db8 <z_ready_thread+0x78>)
   20d62:	4816      	ldr	r0, [pc, #88]	; (20dbc <z_ready_thread+0x7c>)
   20d64:	f003 ffdb 	bl	24d1e <assert_print>
   20d68:	4911      	ldr	r1, [pc, #68]	; (20db0 <z_ready_thread+0x70>)
   20d6a:	4815      	ldr	r0, [pc, #84]	; (20dc0 <z_ready_thread+0x80>)
   20d6c:	f003 ffd7 	bl	24d1e <assert_print>
   20d70:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d72:	4810      	ldr	r0, [pc, #64]	; (20db4 <z_ready_thread+0x74>)
   20d74:	f003 ffcc 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   20d78:	480d      	ldr	r0, [pc, #52]	; (20db0 <z_ready_thread+0x70>)
   20d7a:	f7fe fdbf 	bl	1f8fc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   20d7e:	4620      	mov	r0, r4
   20d80:	f7ff ff30 	bl	20be4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d84:	480a      	ldr	r0, [pc, #40]	; (20db0 <z_ready_thread+0x70>)
   20d86:	f7fe fdab 	bl	1f8e0 <z_spin_unlock_valid>
   20d8a:	b958      	cbnz	r0, 20da4 <z_ready_thread+0x64>
   20d8c:	23c2      	movs	r3, #194	; 0xc2
   20d8e:	4a09      	ldr	r2, [pc, #36]	; (20db4 <z_ready_thread+0x74>)
   20d90:	490c      	ldr	r1, [pc, #48]	; (20dc4 <z_ready_thread+0x84>)
   20d92:	480a      	ldr	r0, [pc, #40]	; (20dbc <z_ready_thread+0x7c>)
   20d94:	f003 ffc3 	bl	24d1e <assert_print>
   20d98:	4905      	ldr	r1, [pc, #20]	; (20db0 <z_ready_thread+0x70>)
   20d9a:	480b      	ldr	r0, [pc, #44]	; (20dc8 <z_ready_thread+0x88>)
   20d9c:	f003 ffbf 	bl	24d1e <assert_print>
   20da0:	21c2      	movs	r1, #194	; 0xc2
   20da2:	e7e6      	b.n	20d72 <z_ready_thread+0x32>
	__asm__ volatile(
   20da4:	f385 8811 	msr	BASEPRI, r5
   20da8:	f3bf 8f6f 	isb	sy
		}
	}
}
   20dac:	bd38      	pop	{r3, r4, r5, pc}
   20dae:	bf00      	nop
   20db0:	2002154c 	.word	0x2002154c
   20db4:	0002c4fc 	.word	0x0002c4fc
   20db8:	0002c555 	.word	0x0002c555
   20dbc:	0002b6e9 	.word	0x0002b6e9
   20dc0:	0002c56a 	.word	0x0002c56a
   20dc4:	0002c529 	.word	0x0002c529
   20dc8:	0002c540 	.word	0x0002c540

00020dcc <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   20dcc:	b538      	push	{r3, r4, r5, lr}
   20dce:	4604      	mov	r4, r0
	__asm__ volatile(
   20dd0:	f04f 0320 	mov.w	r3, #32
   20dd4:	f3ef 8511 	mrs	r5, BASEPRI
   20dd8:	f383 8812 	msr	BASEPRI_MAX, r3
   20ddc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20de0:	4816      	ldr	r0, [pc, #88]	; (20e3c <z_unpend_thread_no_timeout+0x70>)
   20de2:	f7fe fd6f 	bl	1f8c4 <z_spin_lock_valid>
   20de6:	b968      	cbnz	r0, 20e04 <z_unpend_thread_no_timeout+0x38>
   20de8:	2394      	movs	r3, #148	; 0x94
   20dea:	4a15      	ldr	r2, [pc, #84]	; (20e40 <z_unpend_thread_no_timeout+0x74>)
   20dec:	4915      	ldr	r1, [pc, #84]	; (20e44 <z_unpend_thread_no_timeout+0x78>)
   20dee:	4816      	ldr	r0, [pc, #88]	; (20e48 <z_unpend_thread_no_timeout+0x7c>)
   20df0:	f003 ff95 	bl	24d1e <assert_print>
   20df4:	4911      	ldr	r1, [pc, #68]	; (20e3c <z_unpend_thread_no_timeout+0x70>)
   20df6:	4815      	ldr	r0, [pc, #84]	; (20e4c <z_unpend_thread_no_timeout+0x80>)
   20df8:	f003 ff91 	bl	24d1e <assert_print>
   20dfc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dfe:	4810      	ldr	r0, [pc, #64]	; (20e40 <z_unpend_thread_no_timeout+0x74>)
   20e00:	f003 ff86 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   20e04:	480d      	ldr	r0, [pc, #52]	; (20e3c <z_unpend_thread_no_timeout+0x70>)
   20e06:	f7fe fd79 	bl	1f8fc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   20e0a:	4620      	mov	r0, r4
   20e0c:	f000 fc62 	bl	216d4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e10:	480a      	ldr	r0, [pc, #40]	; (20e3c <z_unpend_thread_no_timeout+0x70>)
   20e12:	f7fe fd65 	bl	1f8e0 <z_spin_unlock_valid>
   20e16:	b958      	cbnz	r0, 20e30 <z_unpend_thread_no_timeout+0x64>
   20e18:	23c2      	movs	r3, #194	; 0xc2
   20e1a:	4a09      	ldr	r2, [pc, #36]	; (20e40 <z_unpend_thread_no_timeout+0x74>)
   20e1c:	490c      	ldr	r1, [pc, #48]	; (20e50 <z_unpend_thread_no_timeout+0x84>)
   20e1e:	480a      	ldr	r0, [pc, #40]	; (20e48 <z_unpend_thread_no_timeout+0x7c>)
   20e20:	f003 ff7d 	bl	24d1e <assert_print>
   20e24:	4905      	ldr	r1, [pc, #20]	; (20e3c <z_unpend_thread_no_timeout+0x70>)
   20e26:	480b      	ldr	r0, [pc, #44]	; (20e54 <z_unpend_thread_no_timeout+0x88>)
   20e28:	f003 ff79 	bl	24d1e <assert_print>
   20e2c:	21c2      	movs	r1, #194	; 0xc2
   20e2e:	e7e6      	b.n	20dfe <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   20e30:	f385 8811 	msr	BASEPRI, r5
   20e34:	f3bf 8f6f 	isb	sy
	}
}
   20e38:	bd38      	pop	{r3, r4, r5, pc}
   20e3a:	bf00      	nop
   20e3c:	2002154c 	.word	0x2002154c
   20e40:	0002c4fc 	.word	0x0002c4fc
   20e44:	0002c555 	.word	0x0002c555
   20e48:	0002b6e9 	.word	0x0002b6e9
   20e4c:	0002c56a 	.word	0x0002c56a
   20e50:	0002c529 	.word	0x0002c529
   20e54:	0002c540 	.word	0x0002c540

00020e58 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20e58:	b570      	push	{r4, r5, r6, lr}
   20e5a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20e5c:	460d      	mov	r5, r1
   20e5e:	b9e9      	cbnz	r1, 20e9c <z_reschedule+0x44>
   20e60:	f3ef 8605 	mrs	r6, IPSR
   20e64:	b9d6      	cbnz	r6, 20e9c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   20e66:	4b18      	ldr	r3, [pc, #96]	; (20ec8 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   20e68:	69da      	ldr	r2, [r3, #28]
   20e6a:	689b      	ldr	r3, [r3, #8]
   20e6c:	429a      	cmp	r2, r3
   20e6e:	d015      	beq.n	20e9c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e70:	f7fe fd36 	bl	1f8e0 <z_spin_unlock_valid>
   20e74:	b968      	cbnz	r0, 20e92 <z_reschedule+0x3a>
   20e76:	23e1      	movs	r3, #225	; 0xe1
   20e78:	4a14      	ldr	r2, [pc, #80]	; (20ecc <z_reschedule+0x74>)
   20e7a:	4915      	ldr	r1, [pc, #84]	; (20ed0 <z_reschedule+0x78>)
   20e7c:	4815      	ldr	r0, [pc, #84]	; (20ed4 <z_reschedule+0x7c>)
   20e7e:	f003 ff4e 	bl	24d1e <assert_print>
   20e82:	4621      	mov	r1, r4
   20e84:	4814      	ldr	r0, [pc, #80]	; (20ed8 <z_reschedule+0x80>)
   20e86:	f003 ff4a 	bl	24d1e <assert_print>
   20e8a:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e8c:	480f      	ldr	r0, [pc, #60]	; (20ecc <z_reschedule+0x74>)
   20e8e:	f003 ff3f 	bl	24d10 <assert_post_action>
	ret = arch_swap(key);
   20e92:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   20e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20e98:	f7ef b9c6 	b.w	10228 <arch_swap>
   20e9c:	4620      	mov	r0, r4
   20e9e:	f7fe fd1f 	bl	1f8e0 <z_spin_unlock_valid>
   20ea2:	b958      	cbnz	r0, 20ebc <z_reschedule+0x64>
   20ea4:	23c2      	movs	r3, #194	; 0xc2
   20ea6:	4a09      	ldr	r2, [pc, #36]	; (20ecc <z_reschedule+0x74>)
   20ea8:	4909      	ldr	r1, [pc, #36]	; (20ed0 <z_reschedule+0x78>)
   20eaa:	480a      	ldr	r0, [pc, #40]	; (20ed4 <z_reschedule+0x7c>)
   20eac:	f003 ff37 	bl	24d1e <assert_print>
   20eb0:	4621      	mov	r1, r4
   20eb2:	4809      	ldr	r0, [pc, #36]	; (20ed8 <z_reschedule+0x80>)
   20eb4:	f003 ff33 	bl	24d1e <assert_print>
   20eb8:	21c2      	movs	r1, #194	; 0xc2
   20eba:	e7e7      	b.n	20e8c <z_reschedule+0x34>
   20ebc:	f385 8811 	msr	BASEPRI, r5
   20ec0:	f3bf 8f6f 	isb	sy
   20ec4:	bd70      	pop	{r4, r5, r6, pc}
   20ec6:	bf00      	nop
   20ec8:	20021504 	.word	0x20021504
   20ecc:	0002c4fc 	.word	0x0002c4fc
   20ed0:	0002c529 	.word	0x0002c529
   20ed4:	0002b6e9 	.word	0x0002b6e9
   20ed8:	0002c540 	.word	0x0002c540

00020edc <z_sched_start>:
{
   20edc:	b538      	push	{r3, r4, r5, lr}
   20ede:	4604      	mov	r4, r0
	__asm__ volatile(
   20ee0:	f04f 0320 	mov.w	r3, #32
   20ee4:	f3ef 8511 	mrs	r5, BASEPRI
   20ee8:	f383 8812 	msr	BASEPRI_MAX, r3
   20eec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ef0:	481c      	ldr	r0, [pc, #112]	; (20f64 <z_sched_start+0x88>)
   20ef2:	f7fe fce7 	bl	1f8c4 <z_spin_lock_valid>
   20ef6:	b968      	cbnz	r0, 20f14 <z_sched_start+0x38>
   20ef8:	2394      	movs	r3, #148	; 0x94
   20efa:	4a1b      	ldr	r2, [pc, #108]	; (20f68 <z_sched_start+0x8c>)
   20efc:	491b      	ldr	r1, [pc, #108]	; (20f6c <z_sched_start+0x90>)
   20efe:	481c      	ldr	r0, [pc, #112]	; (20f70 <z_sched_start+0x94>)
   20f00:	f003 ff0d 	bl	24d1e <assert_print>
   20f04:	4917      	ldr	r1, [pc, #92]	; (20f64 <z_sched_start+0x88>)
   20f06:	481b      	ldr	r0, [pc, #108]	; (20f74 <z_sched_start+0x98>)
   20f08:	f003 ff09 	bl	24d1e <assert_print>
   20f0c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f0e:	4816      	ldr	r0, [pc, #88]	; (20f68 <z_sched_start+0x8c>)
   20f10:	f003 fefe 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   20f14:	4813      	ldr	r0, [pc, #76]	; (20f64 <z_sched_start+0x88>)
   20f16:	f7fe fcf1 	bl	1f8fc <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   20f1a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   20f1c:	075a      	lsls	r2, r3, #29
   20f1e:	d414      	bmi.n	20f4a <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f20:	4810      	ldr	r0, [pc, #64]	; (20f64 <z_sched_start+0x88>)
   20f22:	f7fe fcdd 	bl	1f8e0 <z_spin_unlock_valid>
   20f26:	b958      	cbnz	r0, 20f40 <z_sched_start+0x64>
   20f28:	23c2      	movs	r3, #194	; 0xc2
   20f2a:	4a0f      	ldr	r2, [pc, #60]	; (20f68 <z_sched_start+0x8c>)
   20f2c:	4912      	ldr	r1, [pc, #72]	; (20f78 <z_sched_start+0x9c>)
   20f2e:	4810      	ldr	r0, [pc, #64]	; (20f70 <z_sched_start+0x94>)
   20f30:	f003 fef5 	bl	24d1e <assert_print>
   20f34:	490b      	ldr	r1, [pc, #44]	; (20f64 <z_sched_start+0x88>)
   20f36:	4811      	ldr	r0, [pc, #68]	; (20f7c <z_sched_start+0xa0>)
   20f38:	f003 fef1 	bl	24d1e <assert_print>
   20f3c:	21c2      	movs	r1, #194	; 0xc2
   20f3e:	e7e6      	b.n	20f0e <z_sched_start+0x32>
	__asm__ volatile(
   20f40:	f385 8811 	msr	BASEPRI, r5
   20f44:	f3bf 8f6f 	isb	sy
}
   20f48:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20f4a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   20f4e:	4620      	mov	r0, r4
   20f50:	7363      	strb	r3, [r4, #13]
   20f52:	f7ff fe47 	bl	20be4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20f56:	4629      	mov	r1, r5
}
   20f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   20f5c:	4801      	ldr	r0, [pc, #4]	; (20f64 <z_sched_start+0x88>)
   20f5e:	f7ff bf7b 	b.w	20e58 <z_reschedule>
   20f62:	bf00      	nop
   20f64:	2002154c 	.word	0x2002154c
   20f68:	0002c4fc 	.word	0x0002c4fc
   20f6c:	0002c555 	.word	0x0002c555
   20f70:	0002b6e9 	.word	0x0002b6e9
   20f74:	0002c56a 	.word	0x0002c56a
   20f78:	0002c529 	.word	0x0002c529
   20f7c:	0002c540 	.word	0x0002c540

00020f80 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   20f80:	b510      	push	{r4, lr}
	__asm__ volatile(
   20f82:	f04f 0320 	mov.w	r3, #32
   20f86:	f3ef 8411 	mrs	r4, BASEPRI
   20f8a:	f383 8812 	msr	BASEPRI_MAX, r3
   20f8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f92:	4825      	ldr	r0, [pc, #148]	; (21028 <k_sched_lock+0xa8>)
   20f94:	f7fe fc96 	bl	1f8c4 <z_spin_lock_valid>
   20f98:	b960      	cbnz	r0, 20fb4 <k_sched_lock+0x34>
   20f9a:	2394      	movs	r3, #148	; 0x94
   20f9c:	4a23      	ldr	r2, [pc, #140]	; (2102c <k_sched_lock+0xac>)
   20f9e:	4924      	ldr	r1, [pc, #144]	; (21030 <k_sched_lock+0xb0>)
   20fa0:	4824      	ldr	r0, [pc, #144]	; (21034 <k_sched_lock+0xb4>)
   20fa2:	f003 febc 	bl	24d1e <assert_print>
   20fa6:	4920      	ldr	r1, [pc, #128]	; (21028 <k_sched_lock+0xa8>)
   20fa8:	4823      	ldr	r0, [pc, #140]	; (21038 <k_sched_lock+0xb8>)
   20faa:	f003 feb8 	bl	24d1e <assert_print>
   20fae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fb0:	481e      	ldr	r0, [pc, #120]	; (2102c <k_sched_lock+0xac>)
   20fb2:	e010      	b.n	20fd6 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   20fb4:	481c      	ldr	r0, [pc, #112]	; (21028 <k_sched_lock+0xa8>)
   20fb6:	f7fe fca1 	bl	1f8fc <z_spin_lock_set_owner>
   20fba:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   20fbe:	b163      	cbz	r3, 20fda <k_sched_lock+0x5a>
   20fc0:	491e      	ldr	r1, [pc, #120]	; (2103c <k_sched_lock+0xbc>)
   20fc2:	23fd      	movs	r3, #253	; 0xfd
   20fc4:	4a1e      	ldr	r2, [pc, #120]	; (21040 <k_sched_lock+0xc0>)
   20fc6:	481b      	ldr	r0, [pc, #108]	; (21034 <k_sched_lock+0xb4>)
   20fc8:	f003 fea9 	bl	24d1e <assert_print>
   20fcc:	481d      	ldr	r0, [pc, #116]	; (21044 <k_sched_lock+0xc4>)
   20fce:	f003 fea6 	bl	24d1e <assert_print>
   20fd2:	21fd      	movs	r1, #253	; 0xfd
   20fd4:	481a      	ldr	r0, [pc, #104]	; (21040 <k_sched_lock+0xc0>)
   20fd6:	f003 fe9b 	bl	24d10 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   20fda:	4b1b      	ldr	r3, [pc, #108]	; (21048 <k_sched_lock+0xc8>)
   20fdc:	689a      	ldr	r2, [r3, #8]
   20fde:	7bd3      	ldrb	r3, [r2, #15]
   20fe0:	2b01      	cmp	r3, #1
   20fe2:	d10a      	bne.n	20ffa <k_sched_lock+0x7a>
   20fe4:	4919      	ldr	r1, [pc, #100]	; (2104c <k_sched_lock+0xcc>)
   20fe6:	23fe      	movs	r3, #254	; 0xfe
   20fe8:	4a15      	ldr	r2, [pc, #84]	; (21040 <k_sched_lock+0xc0>)
   20fea:	4812      	ldr	r0, [pc, #72]	; (21034 <k_sched_lock+0xb4>)
   20fec:	f003 fe97 	bl	24d1e <assert_print>
   20ff0:	4814      	ldr	r0, [pc, #80]	; (21044 <k_sched_lock+0xc4>)
   20ff2:	f003 fe94 	bl	24d1e <assert_print>
   20ff6:	21fe      	movs	r1, #254	; 0xfe
   20ff8:	e7ec      	b.n	20fd4 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   20ffa:	3b01      	subs	r3, #1
   20ffc:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ffe:	480a      	ldr	r0, [pc, #40]	; (21028 <k_sched_lock+0xa8>)
   21000:	f7fe fc6e 	bl	1f8e0 <z_spin_unlock_valid>
   21004:	b958      	cbnz	r0, 2101e <k_sched_lock+0x9e>
   21006:	23c2      	movs	r3, #194	; 0xc2
   21008:	4a08      	ldr	r2, [pc, #32]	; (2102c <k_sched_lock+0xac>)
   2100a:	4911      	ldr	r1, [pc, #68]	; (21050 <k_sched_lock+0xd0>)
   2100c:	4809      	ldr	r0, [pc, #36]	; (21034 <k_sched_lock+0xb4>)
   2100e:	f003 fe86 	bl	24d1e <assert_print>
   21012:	4905      	ldr	r1, [pc, #20]	; (21028 <k_sched_lock+0xa8>)
   21014:	480f      	ldr	r0, [pc, #60]	; (21054 <k_sched_lock+0xd4>)
   21016:	f003 fe82 	bl	24d1e <assert_print>
   2101a:	21c2      	movs	r1, #194	; 0xc2
   2101c:	e7c8      	b.n	20fb0 <k_sched_lock+0x30>
	__asm__ volatile(
   2101e:	f384 8811 	msr	BASEPRI, r4
   21022:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21026:	bd10      	pop	{r4, pc}
   21028:	2002154c 	.word	0x2002154c
   2102c:	0002c4fc 	.word	0x0002c4fc
   21030:	0002c555 	.word	0x0002c555
   21034:	0002b6e9 	.word	0x0002b6e9
   21038:	0002c56a 	.word	0x0002c56a
   2103c:	0003082e 	.word	0x0003082e
   21040:	00030b05 	.word	0x00030b05
   21044:	0002f302 	.word	0x0002f302
   21048:	20021504 	.word	0x20021504
   2104c:	00030b30 	.word	0x00030b30
   21050:	0002c529 	.word	0x0002c529
   21054:	0002c540 	.word	0x0002c540

00021058 <k_sched_unlock>:

void k_sched_unlock(void)
{
   21058:	b510      	push	{r4, lr}
	__asm__ volatile(
   2105a:	f04f 0320 	mov.w	r3, #32
   2105e:	f3ef 8411 	mrs	r4, BASEPRI
   21062:	f383 8812 	msr	BASEPRI_MAX, r3
   21066:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2106a:	4829      	ldr	r0, [pc, #164]	; (21110 <k_sched_unlock+0xb8>)
   2106c:	f7fe fc2a 	bl	1f8c4 <z_spin_lock_valid>
   21070:	b960      	cbnz	r0, 2108c <k_sched_unlock+0x34>
   21072:	2394      	movs	r3, #148	; 0x94
   21074:	4a27      	ldr	r2, [pc, #156]	; (21114 <k_sched_unlock+0xbc>)
   21076:	4928      	ldr	r1, [pc, #160]	; (21118 <k_sched_unlock+0xc0>)
   21078:	4828      	ldr	r0, [pc, #160]	; (2111c <k_sched_unlock+0xc4>)
   2107a:	f003 fe50 	bl	24d1e <assert_print>
   2107e:	4924      	ldr	r1, [pc, #144]	; (21110 <k_sched_unlock+0xb8>)
   21080:	4827      	ldr	r0, [pc, #156]	; (21120 <k_sched_unlock+0xc8>)
   21082:	f003 fe4c 	bl	24d1e <assert_print>
   21086:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21088:	4822      	ldr	r0, [pc, #136]	; (21114 <k_sched_unlock+0xbc>)
   2108a:	e013      	b.n	210b4 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   2108c:	4820      	ldr	r0, [pc, #128]	; (21110 <k_sched_unlock+0xb8>)
   2108e:	f7fe fc35 	bl	1f8fc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   21092:	4b24      	ldr	r3, [pc, #144]	; (21124 <k_sched_unlock+0xcc>)
   21094:	689a      	ldr	r2, [r3, #8]
   21096:	7bd3      	ldrb	r3, [r2, #15]
   21098:	b973      	cbnz	r3, 210b8 <k_sched_unlock+0x60>
   2109a:	4923      	ldr	r1, [pc, #140]	; (21128 <k_sched_unlock+0xd0>)
   2109c:	f240 33e7 	movw	r3, #999	; 0x3e7
   210a0:	4a22      	ldr	r2, [pc, #136]	; (2112c <k_sched_unlock+0xd4>)
   210a2:	481e      	ldr	r0, [pc, #120]	; (2111c <k_sched_unlock+0xc4>)
   210a4:	f003 fe3b 	bl	24d1e <assert_print>
   210a8:	4821      	ldr	r0, [pc, #132]	; (21130 <k_sched_unlock+0xd8>)
   210aa:	f003 fe38 	bl	24d1e <assert_print>
   210ae:	f240 31e7 	movw	r1, #999	; 0x3e7
   210b2:	481e      	ldr	r0, [pc, #120]	; (2112c <k_sched_unlock+0xd4>)
   210b4:	f003 fe2c 	bl	24d10 <assert_post_action>
   210b8:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   210bc:	b160      	cbz	r0, 210d8 <k_sched_unlock+0x80>
   210be:	491d      	ldr	r1, [pc, #116]	; (21134 <k_sched_unlock+0xdc>)
   210c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   210c4:	4a19      	ldr	r2, [pc, #100]	; (2112c <k_sched_unlock+0xd4>)
   210c6:	4815      	ldr	r0, [pc, #84]	; (2111c <k_sched_unlock+0xc4>)
   210c8:	f003 fe29 	bl	24d1e <assert_print>
   210cc:	4818      	ldr	r0, [pc, #96]	; (21130 <k_sched_unlock+0xd8>)
   210ce:	f003 fe26 	bl	24d1e <assert_print>
   210d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   210d6:	e7ec      	b.n	210b2 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   210d8:	3301      	adds	r3, #1
   210da:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   210dc:	f7ff fd4e 	bl	20b7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210e0:	480b      	ldr	r0, [pc, #44]	; (21110 <k_sched_unlock+0xb8>)
   210e2:	f7fe fbfd 	bl	1f8e0 <z_spin_unlock_valid>
   210e6:	b958      	cbnz	r0, 21100 <k_sched_unlock+0xa8>
   210e8:	23c2      	movs	r3, #194	; 0xc2
   210ea:	4a0a      	ldr	r2, [pc, #40]	; (21114 <k_sched_unlock+0xbc>)
   210ec:	4912      	ldr	r1, [pc, #72]	; (21138 <k_sched_unlock+0xe0>)
   210ee:	480b      	ldr	r0, [pc, #44]	; (2111c <k_sched_unlock+0xc4>)
   210f0:	f003 fe15 	bl	24d1e <assert_print>
   210f4:	4906      	ldr	r1, [pc, #24]	; (21110 <k_sched_unlock+0xb8>)
   210f6:	4811      	ldr	r0, [pc, #68]	; (2113c <k_sched_unlock+0xe4>)
   210f8:	f003 fe11 	bl	24d1e <assert_print>
   210fc:	21c2      	movs	r1, #194	; 0xc2
   210fe:	e7c3      	b.n	21088 <k_sched_unlock+0x30>
	__asm__ volatile(
   21100:	f384 8811 	msr	BASEPRI, r4
   21104:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   21108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2110c:	f008 ba44 	b.w	29598 <z_reschedule_unlocked>
   21110:	2002154c 	.word	0x2002154c
   21114:	0002c4fc 	.word	0x0002c4fc
   21118:	0002c555 	.word	0x0002c555
   2111c:	0002b6e9 	.word	0x0002b6e9
   21120:	0002c56a 	.word	0x0002c56a
   21124:	20021504 	.word	0x20021504
   21128:	00030b61 	.word	0x00030b61
   2112c:	00030a9b 	.word	0x00030a9b
   21130:	0002f302 	.word	0x0002f302
   21134:	0003082e 	.word	0x0003082e
   21138:	0002c529 	.word	0x0002c529
   2113c:	0002c540 	.word	0x0002c540

00021140 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   21140:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21142:	4b0b      	ldr	r3, [pc, #44]	; (21170 <z_priq_dumb_remove+0x30>)
   21144:	4299      	cmp	r1, r3
   21146:	d10b      	bne.n	21160 <z_priq_dumb_remove+0x20>
   21148:	490a      	ldr	r1, [pc, #40]	; (21174 <z_priq_dumb_remove+0x34>)
   2114a:	480b      	ldr	r0, [pc, #44]	; (21178 <z_priq_dumb_remove+0x38>)
   2114c:	f240 4373 	movw	r3, #1139	; 0x473
   21150:	4a0a      	ldr	r2, [pc, #40]	; (2117c <z_priq_dumb_remove+0x3c>)
   21152:	f003 fde4 	bl	24d1e <assert_print>
   21156:	f240 4173 	movw	r1, #1139	; 0x473
   2115a:	4808      	ldr	r0, [pc, #32]	; (2117c <z_priq_dumb_remove+0x3c>)
   2115c:	f003 fdd8 	bl	24d10 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   21160:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   21164:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21166:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21168:	2300      	movs	r3, #0
	node->prev = NULL;
   2116a:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2116e:	bd08      	pop	{r3, pc}
   21170:	20009c08 	.word	0x20009c08
   21174:	00030ae4 	.word	0x00030ae4
   21178:	0002b6e9 	.word	0x0002b6e9
   2117c:	00030a9b 	.word	0x00030a9b

00021180 <move_thread_to_end_of_prio_q>:
{
   21180:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21182:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   21186:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21188:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2118a:	7b43      	ldrb	r3, [r0, #13]
   2118c:	da06      	bge.n	2119c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2118e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21192:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21194:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21196:	481d      	ldr	r0, [pc, #116]	; (2120c <move_thread_to_end_of_prio_q+0x8c>)
   21198:	f7ff ffd2 	bl	21140 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2119c:	7b63      	ldrb	r3, [r4, #13]
   2119e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   211a2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   211a4:	4b1a      	ldr	r3, [pc, #104]	; (21210 <move_thread_to_end_of_prio_q+0x90>)
   211a6:	429c      	cmp	r4, r3
   211a8:	d109      	bne.n	211be <move_thread_to_end_of_prio_q+0x3e>
   211aa:	491a      	ldr	r1, [pc, #104]	; (21214 <move_thread_to_end_of_prio_q+0x94>)
   211ac:	481a      	ldr	r0, [pc, #104]	; (21218 <move_thread_to_end_of_prio_q+0x98>)
   211ae:	23ba      	movs	r3, #186	; 0xba
   211b0:	4a1a      	ldr	r2, [pc, #104]	; (2121c <move_thread_to_end_of_prio_q+0x9c>)
   211b2:	f003 fdb4 	bl	24d1e <assert_print>
   211b6:	21ba      	movs	r1, #186	; 0xba
   211b8:	4818      	ldr	r0, [pc, #96]	; (2121c <move_thread_to_end_of_prio_q+0x9c>)
   211ba:	f003 fda9 	bl	24d10 <assert_post_action>
	return list->head == list;
   211be:	4a18      	ldr	r2, [pc, #96]	; (21220 <move_thread_to_end_of_prio_q+0xa0>)
   211c0:	4611      	mov	r1, r2
   211c2:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   211c6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211c8:	428b      	cmp	r3, r1
   211ca:	bf08      	it	eq
   211cc:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   211ce:	b923      	cbnz	r3, 211da <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   211d0:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   211d4:	6004      	str	r4, [r0, #0]
	list->tail = node;
   211d6:	6254      	str	r4, [r2, #36]	; 0x24
}
   211d8:	e00c      	b.n	211f4 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   211da:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   211de:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   211e2:	42b5      	cmp	r5, r6
   211e4:	d00e      	beq.n	21204 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   211e6:	42ae      	cmp	r6, r5
   211e8:	dd0c      	ble.n	21204 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   211ea:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   211ec:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   211f0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   211f2:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   211f4:	6890      	ldr	r0, [r2, #8]
   211f6:	1b03      	subs	r3, r0, r4
   211f8:	4258      	negs	r0, r3
   211fa:	4158      	adcs	r0, r3
}
   211fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   21200:	f7ff bcbc 	b.w	20b7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21204:	4298      	cmp	r0, r3
   21206:	d0e3      	beq.n	211d0 <move_thread_to_end_of_prio_q+0x50>
   21208:	681b      	ldr	r3, [r3, #0]
   2120a:	e7e0      	b.n	211ce <move_thread_to_end_of_prio_q+0x4e>
   2120c:	20021524 	.word	0x20021524
   21210:	20009c08 	.word	0x20009c08
   21214:	00030ae4 	.word	0x00030ae4
   21218:	0002b6e9 	.word	0x0002b6e9
   2121c:	00030a9b 	.word	0x00030a9b
   21220:	20021504 	.word	0x20021504

00021224 <z_time_slice>:
{
   21224:	b570      	push	{r4, r5, r6, lr}
   21226:	4605      	mov	r5, r0
	__asm__ volatile(
   21228:	f04f 0320 	mov.w	r3, #32
   2122c:	f3ef 8611 	mrs	r6, BASEPRI
   21230:	f383 8812 	msr	BASEPRI_MAX, r3
   21234:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21238:	4829      	ldr	r0, [pc, #164]	; (212e0 <z_time_slice+0xbc>)
   2123a:	f7fe fb43 	bl	1f8c4 <z_spin_lock_valid>
   2123e:	b968      	cbnz	r0, 2125c <z_time_slice+0x38>
   21240:	2394      	movs	r3, #148	; 0x94
   21242:	4a28      	ldr	r2, [pc, #160]	; (212e4 <z_time_slice+0xc0>)
   21244:	4928      	ldr	r1, [pc, #160]	; (212e8 <z_time_slice+0xc4>)
   21246:	4829      	ldr	r0, [pc, #164]	; (212ec <z_time_slice+0xc8>)
   21248:	f003 fd69 	bl	24d1e <assert_print>
   2124c:	4924      	ldr	r1, [pc, #144]	; (212e0 <z_time_slice+0xbc>)
   2124e:	4828      	ldr	r0, [pc, #160]	; (212f0 <z_time_slice+0xcc>)
   21250:	f003 fd65 	bl	24d1e <assert_print>
   21254:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21256:	4823      	ldr	r0, [pc, #140]	; (212e4 <z_time_slice+0xc0>)
   21258:	f003 fd5a 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   2125c:	4820      	ldr	r0, [pc, #128]	; (212e0 <z_time_slice+0xbc>)
   2125e:	f7fe fb4d 	bl	1f8fc <z_spin_lock_set_owner>
	if (pending_current == _current) {
   21262:	4b24      	ldr	r3, [pc, #144]	; (212f4 <z_time_slice+0xd0>)
   21264:	4a24      	ldr	r2, [pc, #144]	; (212f8 <z_time_slice+0xd4>)
   21266:	689c      	ldr	r4, [r3, #8]
   21268:	6811      	ldr	r1, [r2, #0]
   2126a:	428c      	cmp	r4, r1
   2126c:	d112      	bne.n	21294 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   2126e:	4620      	mov	r0, r4
   21270:	f7ff fc70 	bl	20b54 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21274:	481a      	ldr	r0, [pc, #104]	; (212e0 <z_time_slice+0xbc>)
   21276:	f7fe fb33 	bl	1f8e0 <z_spin_unlock_valid>
   2127a:	bb58      	cbnz	r0, 212d4 <z_time_slice+0xb0>
   2127c:	23c2      	movs	r3, #194	; 0xc2
   2127e:	4a19      	ldr	r2, [pc, #100]	; (212e4 <z_time_slice+0xc0>)
   21280:	491e      	ldr	r1, [pc, #120]	; (212fc <z_time_slice+0xd8>)
   21282:	481a      	ldr	r0, [pc, #104]	; (212ec <z_time_slice+0xc8>)
   21284:	f003 fd4b 	bl	24d1e <assert_print>
   21288:	4915      	ldr	r1, [pc, #84]	; (212e0 <z_time_slice+0xbc>)
   2128a:	481d      	ldr	r0, [pc, #116]	; (21300 <z_time_slice+0xdc>)
   2128c:	f003 fd47 	bl	24d1e <assert_print>
   21290:	21c2      	movs	r1, #194	; 0xc2
   21292:	e7e0      	b.n	21256 <z_time_slice+0x32>
	pending_current = NULL;
   21294:	2100      	movs	r1, #0
   21296:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   21298:	4a1a      	ldr	r2, [pc, #104]	; (21304 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   2129a:	6812      	ldr	r2, [r2, #0]
   2129c:	b1c2      	cbz	r2, 212d0 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   2129e:	89e2      	ldrh	r2, [r4, #14]
   212a0:	2a7f      	cmp	r2, #127	; 0x7f
   212a2:	d815      	bhi.n	212d0 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   212a4:	7b62      	ldrb	r2, [r4, #13]
   212a6:	06d2      	lsls	r2, r2, #27
   212a8:	d112      	bne.n	212d0 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   212aa:	4a17      	ldr	r2, [pc, #92]	; (21308 <z_time_slice+0xe4>)
   212ac:	f994 100e 	ldrsb.w	r1, [r4, #14]
   212b0:	6812      	ldr	r2, [r2, #0]
   212b2:	4291      	cmp	r1, r2
   212b4:	db0c      	blt.n	212d0 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   212b6:	4a15      	ldr	r2, [pc, #84]	; (2130c <z_time_slice+0xe8>)
   212b8:	4294      	cmp	r4, r2
   212ba:	d009      	beq.n	212d0 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   212bc:	691a      	ldr	r2, [r3, #16]
   212be:	42aa      	cmp	r2, r5
   212c0:	dc03      	bgt.n	212ca <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   212c2:	4620      	mov	r0, r4
   212c4:	f7ff ff5c 	bl	21180 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   212c8:	e7d1      	b.n	2126e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   212ca:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   212cc:	611a      	str	r2, [r3, #16]
   212ce:	e7d1      	b.n	21274 <z_time_slice+0x50>
   212d0:	2200      	movs	r2, #0
   212d2:	e7fb      	b.n	212cc <z_time_slice+0xa8>
	__asm__ volatile(
   212d4:	f386 8811 	msr	BASEPRI, r6
   212d8:	f3bf 8f6f 	isb	sy
}
   212dc:	bd70      	pop	{r4, r5, r6, pc}
   212de:	bf00      	nop
   212e0:	2002154c 	.word	0x2002154c
   212e4:	0002c4fc 	.word	0x0002c4fc
   212e8:	0002c555 	.word	0x0002c555
   212ec:	0002b6e9 	.word	0x0002b6e9
   212f0:	0002c56a 	.word	0x0002c56a
   212f4:	20021504 	.word	0x20021504
   212f8:	20021540 	.word	0x20021540
   212fc:	0002c529 	.word	0x0002c529
   21300:	0002c540 	.word	0x0002c540
   21304:	20021548 	.word	0x20021548
   21308:	20021544 	.word	0x20021544
   2130c:	20009c08 	.word	0x20009c08

00021310 <unready_thread>:
{
   21310:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   21312:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   21316:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21318:	2a00      	cmp	r2, #0
   2131a:	7b43      	ldrb	r3, [r0, #13]
   2131c:	da06      	bge.n	2132c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2131e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21322:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21324:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21326:	4806      	ldr	r0, [pc, #24]	; (21340 <unready_thread+0x30>)
   21328:	f7ff ff0a 	bl	21140 <z_priq_dumb_remove>
	update_cache(thread == _current);
   2132c:	4b05      	ldr	r3, [pc, #20]	; (21344 <unready_thread+0x34>)
   2132e:	6898      	ldr	r0, [r3, #8]
   21330:	1b03      	subs	r3, r0, r4
   21332:	4258      	negs	r0, r3
   21334:	4158      	adcs	r0, r3
}
   21336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2133a:	f7ff bc1f 	b.w	20b7c <update_cache>
   2133e:	bf00      	nop
   21340:	20021524 	.word	0x20021524
   21344:	20021504 	.word	0x20021504

00021348 <add_to_waitq_locked>:
{
   21348:	b538      	push	{r3, r4, r5, lr}
   2134a:	4604      	mov	r4, r0
   2134c:	460d      	mov	r5, r1
	unready_thread(thread);
   2134e:	f7ff ffdf 	bl	21310 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   21352:	7b63      	ldrb	r3, [r4, #13]
   21354:	f043 0302 	orr.w	r3, r3, #2
   21358:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2135a:	b34d      	cbz	r5, 213b0 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2135c:	4b15      	ldr	r3, [pc, #84]	; (213b4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   2135e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21360:	429c      	cmp	r4, r3
   21362:	d109      	bne.n	21378 <add_to_waitq_locked+0x30>
   21364:	4914      	ldr	r1, [pc, #80]	; (213b8 <add_to_waitq_locked+0x70>)
   21366:	4815      	ldr	r0, [pc, #84]	; (213bc <add_to_waitq_locked+0x74>)
   21368:	23ba      	movs	r3, #186	; 0xba
   2136a:	4a15      	ldr	r2, [pc, #84]	; (213c0 <add_to_waitq_locked+0x78>)
   2136c:	f003 fcd7 	bl	24d1e <assert_print>
   21370:	21ba      	movs	r1, #186	; 0xba
   21372:	4813      	ldr	r0, [pc, #76]	; (213c0 <add_to_waitq_locked+0x78>)
   21374:	f003 fccc 	bl	24d10 <assert_post_action>
	return list->head == list;
   21378:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2137a:	429d      	cmp	r5, r3
   2137c:	d109      	bne.n	21392 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   2137e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   21380:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21384:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21386:	606c      	str	r4, [r5, #4]
}
   21388:	e012      	b.n	213b0 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   2138a:	686a      	ldr	r2, [r5, #4]
   2138c:	4293      	cmp	r3, r2
   2138e:	d0f6      	beq.n	2137e <add_to_waitq_locked+0x36>
   21390:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21392:	2b00      	cmp	r3, #0
   21394:	d0f3      	beq.n	2137e <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   21396:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2139a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2139e:	428a      	cmp	r2, r1
   213a0:	d0f3      	beq.n	2138a <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   213a2:	4291      	cmp	r1, r2
   213a4:	ddf1      	ble.n	2138a <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   213a6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   213a8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   213ac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   213ae:	605c      	str	r4, [r3, #4]
}
   213b0:	bd38      	pop	{r3, r4, r5, pc}
   213b2:	bf00      	nop
   213b4:	20009c08 	.word	0x20009c08
   213b8:	00030ae4 	.word	0x00030ae4
   213bc:	0002b6e9 	.word	0x0002b6e9
   213c0:	00030a9b 	.word	0x00030a9b

000213c4 <pend_locked>:
{
   213c4:	b570      	push	{r4, r5, r6, lr}
   213c6:	4615      	mov	r5, r2
   213c8:	461c      	mov	r4, r3
   213ca:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   213cc:	f7ff ffbc 	bl	21348 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   213d0:	f1b4 3fff 	cmp.w	r4, #4294967295
   213d4:	bf08      	it	eq
   213d6:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   213da:	d008      	beq.n	213ee <pend_locked+0x2a>
   213dc:	462a      	mov	r2, r5
   213de:	4623      	mov	r3, r4
   213e0:	f106 0018 	add.w	r0, r6, #24
   213e4:	4902      	ldr	r1, [pc, #8]	; (213f0 <pend_locked+0x2c>)
}
   213e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   213ea:	f000 bdf1 	b.w	21fd0 <z_add_timeout>
   213ee:	bd70      	pop	{r4, r5, r6, pc}
   213f0:	000217a9 	.word	0x000217a9

000213f4 <z_pend_curr>:
{
   213f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   213f8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   213fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 214b4 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21400:	4c2d      	ldr	r4, [pc, #180]	; (214b8 <z_pend_curr+0xc4>)
{
   21402:	4617      	mov	r7, r2
	pending_current = _current;
   21404:	4b2d      	ldr	r3, [pc, #180]	; (214bc <z_pend_curr+0xc8>)
   21406:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2140a:	42a0      	cmp	r0, r4
{
   2140c:	4605      	mov	r5, r0
   2140e:	460e      	mov	r6, r1
	pending_current = _current;
   21410:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21412:	d10b      	bne.n	2142c <z_pend_curr+0x38>
   21414:	492a      	ldr	r1, [pc, #168]	; (214c0 <z_pend_curr+0xcc>)
   21416:	482b      	ldr	r0, [pc, #172]	; (214c4 <z_pend_curr+0xd0>)
   21418:	f240 334e 	movw	r3, #846	; 0x34e
   2141c:	4a2a      	ldr	r2, [pc, #168]	; (214c8 <z_pend_curr+0xd4>)
   2141e:	f003 fc7e 	bl	24d1e <assert_print>
   21422:	f240 314e 	movw	r1, #846	; 0x34e
   21426:	4828      	ldr	r0, [pc, #160]	; (214c8 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21428:	f003 fc72 	bl	24d10 <assert_post_action>
	__asm__ volatile(
   2142c:	f04f 0220 	mov.w	r2, #32
   21430:	f3ef 8311 	mrs	r3, BASEPRI
   21434:	f382 8812 	msr	BASEPRI_MAX, r2
   21438:	f3bf 8f6f 	isb	sy
   2143c:	4620      	mov	r0, r4
   2143e:	f7fe fa41 	bl	1f8c4 <z_spin_lock_valid>
   21442:	b960      	cbnz	r0, 2145e <z_pend_curr+0x6a>
   21444:	2394      	movs	r3, #148	; 0x94
   21446:	4a21      	ldr	r2, [pc, #132]	; (214cc <z_pend_curr+0xd8>)
   21448:	4921      	ldr	r1, [pc, #132]	; (214d0 <z_pend_curr+0xdc>)
   2144a:	481e      	ldr	r0, [pc, #120]	; (214c4 <z_pend_curr+0xd0>)
   2144c:	f003 fc67 	bl	24d1e <assert_print>
   21450:	4621      	mov	r1, r4
   21452:	4820      	ldr	r0, [pc, #128]	; (214d4 <z_pend_curr+0xe0>)
   21454:	f003 fc63 	bl	24d1e <assert_print>
   21458:	2194      	movs	r1, #148	; 0x94
   2145a:	481c      	ldr	r0, [pc, #112]	; (214cc <z_pend_curr+0xd8>)
   2145c:	e7e4      	b.n	21428 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   2145e:	4620      	mov	r0, r4
   21460:	f7fe fa4c 	bl	1f8fc <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   21464:	f8da 0008 	ldr.w	r0, [sl, #8]
   21468:	4642      	mov	r2, r8
   2146a:	464b      	mov	r3, r9
   2146c:	4639      	mov	r1, r7
   2146e:	f7ff ffa9 	bl	213c4 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21472:	4628      	mov	r0, r5
   21474:	f7fe fa34 	bl	1f8e0 <z_spin_unlock_valid>
   21478:	b958      	cbnz	r0, 21492 <z_pend_curr+0x9e>
   2147a:	4917      	ldr	r1, [pc, #92]	; (214d8 <z_pend_curr+0xe4>)
   2147c:	23e1      	movs	r3, #225	; 0xe1
   2147e:	4a13      	ldr	r2, [pc, #76]	; (214cc <z_pend_curr+0xd8>)
   21480:	4810      	ldr	r0, [pc, #64]	; (214c4 <z_pend_curr+0xd0>)
   21482:	f003 fc4c 	bl	24d1e <assert_print>
   21486:	4629      	mov	r1, r5
   21488:	4814      	ldr	r0, [pc, #80]	; (214dc <z_pend_curr+0xe8>)
   2148a:	f003 fc48 	bl	24d1e <assert_print>
   2148e:	21e1      	movs	r1, #225	; 0xe1
   21490:	e7e3      	b.n	2145a <z_pend_curr+0x66>
   21492:	4620      	mov	r0, r4
   21494:	f7fe fa24 	bl	1f8e0 <z_spin_unlock_valid>
   21498:	b938      	cbnz	r0, 214aa <z_pend_curr+0xb6>
   2149a:	490f      	ldr	r1, [pc, #60]	; (214d8 <z_pend_curr+0xe4>)
   2149c:	23e1      	movs	r3, #225	; 0xe1
   2149e:	4a0b      	ldr	r2, [pc, #44]	; (214cc <z_pend_curr+0xd8>)
   214a0:	4808      	ldr	r0, [pc, #32]	; (214c4 <z_pend_curr+0xd0>)
   214a2:	f003 fc3c 	bl	24d1e <assert_print>
   214a6:	4621      	mov	r1, r4
   214a8:	e7ee      	b.n	21488 <z_pend_curr+0x94>
   214aa:	4630      	mov	r0, r6
}
   214ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   214b0:	f7ee beba 	b.w	10228 <arch_swap>
   214b4:	20021504 	.word	0x20021504
   214b8:	2002154c 	.word	0x2002154c
   214bc:	20021540 	.word	0x20021540
   214c0:	00030b92 	.word	0x00030b92
   214c4:	0002b6e9 	.word	0x0002b6e9
   214c8:	00030a9b 	.word	0x00030a9b
   214cc:	0002c4fc 	.word	0x0002c4fc
   214d0:	0002c555 	.word	0x0002c555
   214d4:	0002c56a 	.word	0x0002c56a
   214d8:	0002c529 	.word	0x0002c529
   214dc:	0002c540 	.word	0x0002c540

000214e0 <z_set_prio>:
{
   214e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   214e4:	4604      	mov	r4, r0
   214e6:	460e      	mov	r6, r1
   214e8:	f04f 0320 	mov.w	r3, #32
   214ec:	f3ef 8911 	mrs	r9, BASEPRI
   214f0:	f383 8812 	msr	BASEPRI_MAX, r3
   214f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214f8:	4837      	ldr	r0, [pc, #220]	; (215d8 <z_set_prio+0xf8>)
   214fa:	f7fe f9e3 	bl	1f8c4 <z_spin_lock_valid>
   214fe:	4607      	mov	r7, r0
   21500:	b960      	cbnz	r0, 2151c <z_set_prio+0x3c>
   21502:	2394      	movs	r3, #148	; 0x94
   21504:	4a35      	ldr	r2, [pc, #212]	; (215dc <z_set_prio+0xfc>)
   21506:	4936      	ldr	r1, [pc, #216]	; (215e0 <z_set_prio+0x100>)
   21508:	4836      	ldr	r0, [pc, #216]	; (215e4 <z_set_prio+0x104>)
   2150a:	f003 fc08 	bl	24d1e <assert_print>
   2150e:	4932      	ldr	r1, [pc, #200]	; (215d8 <z_set_prio+0xf8>)
   21510:	4835      	ldr	r0, [pc, #212]	; (215e8 <z_set_prio+0x108>)
   21512:	f003 fc04 	bl	24d1e <assert_print>
   21516:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21518:	4830      	ldr	r0, [pc, #192]	; (215dc <z_set_prio+0xfc>)
   2151a:	e021      	b.n	21560 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   2151c:	482e      	ldr	r0, [pc, #184]	; (215d8 <z_set_prio+0xf8>)
   2151e:	f7fe f9ed 	bl	1f8fc <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   21522:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   21524:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21526:	06da      	lsls	r2, r3, #27
   21528:	d11c      	bne.n	21564 <z_set_prio+0x84>
	return node->next != NULL;
   2152a:	69a5      	ldr	r5, [r4, #24]
   2152c:	b9d5      	cbnz	r5, 21564 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   2152e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 215ec <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21536:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21538:	4621      	mov	r1, r4
   2153a:	4640      	mov	r0, r8
   2153c:	f7ff fe00 	bl	21140 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21540:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   21542:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   21544:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21548:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2154a:	4b29      	ldr	r3, [pc, #164]	; (215f0 <z_set_prio+0x110>)
   2154c:	429c      	cmp	r4, r3
   2154e:	d11b      	bne.n	21588 <z_set_prio+0xa8>
   21550:	4928      	ldr	r1, [pc, #160]	; (215f4 <z_set_prio+0x114>)
   21552:	4824      	ldr	r0, [pc, #144]	; (215e4 <z_set_prio+0x104>)
   21554:	23ba      	movs	r3, #186	; 0xba
   21556:	4a28      	ldr	r2, [pc, #160]	; (215f8 <z_set_prio+0x118>)
   21558:	f003 fbe1 	bl	24d1e <assert_print>
   2155c:	21ba      	movs	r1, #186	; 0xba
   2155e:	4826      	ldr	r0, [pc, #152]	; (215f8 <z_set_prio+0x118>)
   21560:	f003 fbd6 	bl	24d10 <assert_post_action>
   21564:	2700      	movs	r7, #0
			thread->base.prio = prio;
   21566:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21568:	481b      	ldr	r0, [pc, #108]	; (215d8 <z_set_prio+0xf8>)
   2156a:	f7fe f9b9 	bl	1f8e0 <z_spin_unlock_valid>
   2156e:	bb58      	cbnz	r0, 215c8 <z_set_prio+0xe8>
   21570:	23c2      	movs	r3, #194	; 0xc2
   21572:	4a1a      	ldr	r2, [pc, #104]	; (215dc <z_set_prio+0xfc>)
   21574:	4921      	ldr	r1, [pc, #132]	; (215fc <z_set_prio+0x11c>)
   21576:	481b      	ldr	r0, [pc, #108]	; (215e4 <z_set_prio+0x104>)
   21578:	f003 fbd1 	bl	24d1e <assert_print>
   2157c:	4916      	ldr	r1, [pc, #88]	; (215d8 <z_set_prio+0xf8>)
   2157e:	4820      	ldr	r0, [pc, #128]	; (21600 <z_set_prio+0x120>)
   21580:	f003 fbcd 	bl	24d1e <assert_print>
   21584:	21c2      	movs	r1, #194	; 0xc2
   21586:	e7c7      	b.n	21518 <z_set_prio+0x38>
	return list->head == list;
   21588:	4643      	mov	r3, r8
   2158a:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2158e:	4542      	cmp	r2, r8
   21590:	bf18      	it	ne
   21592:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   21594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21596:	b925      	cbnz	r5, 215a2 <z_set_prio+0xc2>
	node->prev = tail;
   21598:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   2159c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2159e:	625c      	str	r4, [r3, #36]	; 0x24
}
   215a0:	e00a      	b.n	215b8 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   215a2:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   215a6:	428e      	cmp	r6, r1
   215a8:	d00a      	beq.n	215c0 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   215aa:	42b1      	cmp	r1, r6
   215ac:	dd08      	ble.n	215c0 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   215ae:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   215b0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   215b4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   215b6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   215b8:	2001      	movs	r0, #1
   215ba:	f7ff fadf 	bl	20b7c <update_cache>
   215be:	e7d3      	b.n	21568 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   215c0:	42aa      	cmp	r2, r5
   215c2:	d0e9      	beq.n	21598 <z_set_prio+0xb8>
   215c4:	682d      	ldr	r5, [r5, #0]
   215c6:	e7e6      	b.n	21596 <z_set_prio+0xb6>
	__asm__ volatile(
   215c8:	f389 8811 	msr	BASEPRI, r9
   215cc:	f3bf 8f6f 	isb	sy
}
   215d0:	4638      	mov	r0, r7
   215d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   215d6:	bf00      	nop
   215d8:	2002154c 	.word	0x2002154c
   215dc:	0002c4fc 	.word	0x0002c4fc
   215e0:	0002c555 	.word	0x0002c555
   215e4:	0002b6e9 	.word	0x0002b6e9
   215e8:	0002c56a 	.word	0x0002c56a
   215ec:	20021524 	.word	0x20021524
   215f0:	20009c08 	.word	0x20009c08
   215f4:	00030ae4 	.word	0x00030ae4
   215f8:	00030a9b 	.word	0x00030a9b
   215fc:	0002c529 	.word	0x0002c529
   21600:	0002c540 	.word	0x0002c540

00021604 <z_impl_k_thread_suspend>:
{
   21604:	b570      	push	{r4, r5, r6, lr}
   21606:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21608:	3018      	adds	r0, #24
   2160a:	f000 fda7 	bl	2215c <z_abort_timeout>
	__asm__ volatile(
   2160e:	f04f 0320 	mov.w	r3, #32
   21612:	f3ef 8611 	mrs	r6, BASEPRI
   21616:	f383 8812 	msr	BASEPRI_MAX, r3
   2161a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2161e:	4824      	ldr	r0, [pc, #144]	; (216b0 <z_impl_k_thread_suspend+0xac>)
   21620:	f7fe f950 	bl	1f8c4 <z_spin_lock_valid>
   21624:	b968      	cbnz	r0, 21642 <z_impl_k_thread_suspend+0x3e>
   21626:	2394      	movs	r3, #148	; 0x94
   21628:	4a22      	ldr	r2, [pc, #136]	; (216b4 <z_impl_k_thread_suspend+0xb0>)
   2162a:	4923      	ldr	r1, [pc, #140]	; (216b8 <z_impl_k_thread_suspend+0xb4>)
   2162c:	4823      	ldr	r0, [pc, #140]	; (216bc <z_impl_k_thread_suspend+0xb8>)
   2162e:	f003 fb76 	bl	24d1e <assert_print>
   21632:	491f      	ldr	r1, [pc, #124]	; (216b0 <z_impl_k_thread_suspend+0xac>)
   21634:	4822      	ldr	r0, [pc, #136]	; (216c0 <z_impl_k_thread_suspend+0xbc>)
   21636:	f003 fb72 	bl	24d1e <assert_print>
   2163a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2163c:	481d      	ldr	r0, [pc, #116]	; (216b4 <z_impl_k_thread_suspend+0xb0>)
   2163e:	f003 fb67 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   21642:	481b      	ldr	r0, [pc, #108]	; (216b0 <z_impl_k_thread_suspend+0xac>)
   21644:	f7fe f95a 	bl	1f8fc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21648:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2164c:	7b63      	ldrb	r3, [r4, #13]
   2164e:	2a00      	cmp	r2, #0
   21650:	da06      	bge.n	21660 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21656:	4621      	mov	r1, r4
   21658:	481a      	ldr	r0, [pc, #104]	; (216c4 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2165a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2165c:	f7ff fd70 	bl	21140 <z_priq_dumb_remove>
		update_cache(thread == _current);
   21660:	4d19      	ldr	r5, [pc, #100]	; (216c8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21662:	7b63      	ldrb	r3, [r4, #13]
   21664:	68a8      	ldr	r0, [r5, #8]
   21666:	f043 0310 	orr.w	r3, r3, #16
   2166a:	7363      	strb	r3, [r4, #13]
   2166c:	1b03      	subs	r3, r0, r4
   2166e:	4258      	negs	r0, r3
   21670:	4158      	adcs	r0, r3
   21672:	f7ff fa83 	bl	20b7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21676:	480e      	ldr	r0, [pc, #56]	; (216b0 <z_impl_k_thread_suspend+0xac>)
   21678:	f7fe f932 	bl	1f8e0 <z_spin_unlock_valid>
   2167c:	b958      	cbnz	r0, 21696 <z_impl_k_thread_suspend+0x92>
   2167e:	23c2      	movs	r3, #194	; 0xc2
   21680:	4a0c      	ldr	r2, [pc, #48]	; (216b4 <z_impl_k_thread_suspend+0xb0>)
   21682:	4912      	ldr	r1, [pc, #72]	; (216cc <z_impl_k_thread_suspend+0xc8>)
   21684:	480d      	ldr	r0, [pc, #52]	; (216bc <z_impl_k_thread_suspend+0xb8>)
   21686:	f003 fb4a 	bl	24d1e <assert_print>
   2168a:	4909      	ldr	r1, [pc, #36]	; (216b0 <z_impl_k_thread_suspend+0xac>)
   2168c:	4810      	ldr	r0, [pc, #64]	; (216d0 <z_impl_k_thread_suspend+0xcc>)
   2168e:	f003 fb46 	bl	24d1e <assert_print>
   21692:	21c2      	movs	r1, #194	; 0xc2
   21694:	e7d2      	b.n	2163c <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   21696:	f386 8811 	msr	BASEPRI, r6
   2169a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2169e:	68ab      	ldr	r3, [r5, #8]
   216a0:	42a3      	cmp	r3, r4
   216a2:	d103      	bne.n	216ac <z_impl_k_thread_suspend+0xa8>
}
   216a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   216a8:	f007 bf76 	b.w	29598 <z_reschedule_unlocked>
}
   216ac:	bd70      	pop	{r4, r5, r6, pc}
   216ae:	bf00      	nop
   216b0:	2002154c 	.word	0x2002154c
   216b4:	0002c4fc 	.word	0x0002c4fc
   216b8:	0002c555 	.word	0x0002c555
   216bc:	0002b6e9 	.word	0x0002b6e9
   216c0:	0002c56a 	.word	0x0002c56a
   216c4:	20021524 	.word	0x20021524
   216c8:	20021504 	.word	0x20021504
   216cc:	0002c529 	.word	0x0002c529
   216d0:	0002c540 	.word	0x0002c540

000216d4 <unpend_thread_no_timeout>:
{
   216d4:	b510      	push	{r4, lr}
   216d6:	4604      	mov	r4, r0
   216d8:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   216da:	b958      	cbnz	r0, 216f4 <unpend_thread_no_timeout+0x20>
   216dc:	490a      	ldr	r1, [pc, #40]	; (21708 <unpend_thread_no_timeout+0x34>)
   216de:	480b      	ldr	r0, [pc, #44]	; (2170c <unpend_thread_no_timeout+0x38>)
   216e0:	f240 23d6 	movw	r3, #726	; 0x2d6
   216e4:	4a0a      	ldr	r2, [pc, #40]	; (21710 <unpend_thread_no_timeout+0x3c>)
   216e6:	f003 fb1a 	bl	24d1e <assert_print>
   216ea:	f240 21d6 	movw	r1, #726	; 0x2d6
   216ee:	4808      	ldr	r0, [pc, #32]	; (21710 <unpend_thread_no_timeout+0x3c>)
   216f0:	f003 fb0e 	bl	24d10 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   216f4:	4621      	mov	r1, r4
   216f6:	f7ff fd23 	bl	21140 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   216fa:	7b63      	ldrb	r3, [r4, #13]
   216fc:	f023 0302 	bic.w	r3, r3, #2
   21700:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21702:	2300      	movs	r3, #0
   21704:	60a3      	str	r3, [r4, #8]
}
   21706:	bd10      	pop	{r4, pc}
   21708:	00030bc9 	.word	0x00030bc9
   2170c:	0002b6e9 	.word	0x0002b6e9
   21710:	00030a9b 	.word	0x00030a9b

00021714 <z_unpend_thread>:
{
   21714:	b538      	push	{r3, r4, r5, lr}
   21716:	4604      	mov	r4, r0
	__asm__ volatile(
   21718:	f04f 0320 	mov.w	r3, #32
   2171c:	f3ef 8511 	mrs	r5, BASEPRI
   21720:	f383 8812 	msr	BASEPRI_MAX, r3
   21724:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21728:	4818      	ldr	r0, [pc, #96]	; (2178c <z_unpend_thread+0x78>)
   2172a:	f7fe f8cb 	bl	1f8c4 <z_spin_lock_valid>
   2172e:	b968      	cbnz	r0, 2174c <z_unpend_thread+0x38>
   21730:	2394      	movs	r3, #148	; 0x94
   21732:	4a17      	ldr	r2, [pc, #92]	; (21790 <z_unpend_thread+0x7c>)
   21734:	4917      	ldr	r1, [pc, #92]	; (21794 <z_unpend_thread+0x80>)
   21736:	4818      	ldr	r0, [pc, #96]	; (21798 <z_unpend_thread+0x84>)
   21738:	f003 faf1 	bl	24d1e <assert_print>
   2173c:	4913      	ldr	r1, [pc, #76]	; (2178c <z_unpend_thread+0x78>)
   2173e:	4817      	ldr	r0, [pc, #92]	; (2179c <z_unpend_thread+0x88>)
   21740:	f003 faed 	bl	24d1e <assert_print>
   21744:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21746:	4812      	ldr	r0, [pc, #72]	; (21790 <z_unpend_thread+0x7c>)
   21748:	f003 fae2 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   2174c:	480f      	ldr	r0, [pc, #60]	; (2178c <z_unpend_thread+0x78>)
   2174e:	f7fe f8d5 	bl	1f8fc <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   21752:	4620      	mov	r0, r4
   21754:	f7ff ffbe 	bl	216d4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21758:	480c      	ldr	r0, [pc, #48]	; (2178c <z_unpend_thread+0x78>)
   2175a:	f7fe f8c1 	bl	1f8e0 <z_spin_unlock_valid>
   2175e:	b958      	cbnz	r0, 21778 <z_unpend_thread+0x64>
   21760:	23c2      	movs	r3, #194	; 0xc2
   21762:	4a0b      	ldr	r2, [pc, #44]	; (21790 <z_unpend_thread+0x7c>)
   21764:	490e      	ldr	r1, [pc, #56]	; (217a0 <z_unpend_thread+0x8c>)
   21766:	480c      	ldr	r0, [pc, #48]	; (21798 <z_unpend_thread+0x84>)
   21768:	f003 fad9 	bl	24d1e <assert_print>
   2176c:	4907      	ldr	r1, [pc, #28]	; (2178c <z_unpend_thread+0x78>)
   2176e:	480d      	ldr	r0, [pc, #52]	; (217a4 <z_unpend_thread+0x90>)
   21770:	f003 fad5 	bl	24d1e <assert_print>
   21774:	21c2      	movs	r1, #194	; 0xc2
   21776:	e7e6      	b.n	21746 <z_unpend_thread+0x32>
	__asm__ volatile(
   21778:	f385 8811 	msr	BASEPRI, r5
   2177c:	f3bf 8f6f 	isb	sy
   21780:	f104 0018 	add.w	r0, r4, #24
}
   21784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21788:	f000 bce8 	b.w	2215c <z_abort_timeout>
   2178c:	2002154c 	.word	0x2002154c
   21790:	0002c4fc 	.word	0x0002c4fc
   21794:	0002c555 	.word	0x0002c555
   21798:	0002b6e9 	.word	0x0002b6e9
   2179c:	0002c56a 	.word	0x0002c56a
   217a0:	0002c529 	.word	0x0002c529
   217a4:	0002c540 	.word	0x0002c540

000217a8 <z_thread_timeout>:
{
   217a8:	b570      	push	{r4, r5, r6, lr}
   217aa:	4604      	mov	r4, r0
	__asm__ volatile(
   217ac:	f04f 0320 	mov.w	r3, #32
   217b0:	f3ef 8611 	mrs	r6, BASEPRI
   217b4:	f383 8812 	msr	BASEPRI_MAX, r3
   217b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217bc:	481f      	ldr	r0, [pc, #124]	; (2183c <z_thread_timeout+0x94>)
   217be:	f7fe f881 	bl	1f8c4 <z_spin_lock_valid>
   217c2:	b968      	cbnz	r0, 217e0 <z_thread_timeout+0x38>
   217c4:	2394      	movs	r3, #148	; 0x94
   217c6:	4a1e      	ldr	r2, [pc, #120]	; (21840 <z_thread_timeout+0x98>)
   217c8:	491e      	ldr	r1, [pc, #120]	; (21844 <z_thread_timeout+0x9c>)
   217ca:	481f      	ldr	r0, [pc, #124]	; (21848 <z_thread_timeout+0xa0>)
   217cc:	f003 faa7 	bl	24d1e <assert_print>
   217d0:	491a      	ldr	r1, [pc, #104]	; (2183c <z_thread_timeout+0x94>)
   217d2:	481e      	ldr	r0, [pc, #120]	; (2184c <z_thread_timeout+0xa4>)
   217d4:	f003 faa3 	bl	24d1e <assert_print>
   217d8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217da:	4819      	ldr	r0, [pc, #100]	; (21840 <z_thread_timeout+0x98>)
   217dc:	f003 fa98 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   217e0:	4816      	ldr	r0, [pc, #88]	; (2183c <z_thread_timeout+0x94>)
   217e2:	f7fe f88b 	bl	1f8fc <z_spin_lock_set_owner>
		if (!killed) {
   217e6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   217ea:	f013 0f28 	tst.w	r3, #40	; 0x28
   217ee:	d110      	bne.n	21812 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   217f0:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   217f4:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   217f8:	b113      	cbz	r3, 21800 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   217fa:	4628      	mov	r0, r5
   217fc:	f7ff ff6a 	bl	216d4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21800:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   21804:	4628      	mov	r0, r5
   21806:	f023 0314 	bic.w	r3, r3, #20
   2180a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2180e:	f7ff f9e9 	bl	20be4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21812:	480a      	ldr	r0, [pc, #40]	; (2183c <z_thread_timeout+0x94>)
   21814:	f7fe f864 	bl	1f8e0 <z_spin_unlock_valid>
   21818:	b958      	cbnz	r0, 21832 <z_thread_timeout+0x8a>
   2181a:	23c2      	movs	r3, #194	; 0xc2
   2181c:	4a08      	ldr	r2, [pc, #32]	; (21840 <z_thread_timeout+0x98>)
   2181e:	490c      	ldr	r1, [pc, #48]	; (21850 <z_thread_timeout+0xa8>)
   21820:	4809      	ldr	r0, [pc, #36]	; (21848 <z_thread_timeout+0xa0>)
   21822:	f003 fa7c 	bl	24d1e <assert_print>
   21826:	4905      	ldr	r1, [pc, #20]	; (2183c <z_thread_timeout+0x94>)
   21828:	480a      	ldr	r0, [pc, #40]	; (21854 <z_thread_timeout+0xac>)
   2182a:	f003 fa78 	bl	24d1e <assert_print>
   2182e:	21c2      	movs	r1, #194	; 0xc2
   21830:	e7d3      	b.n	217da <z_thread_timeout+0x32>
	__asm__ volatile(
   21832:	f386 8811 	msr	BASEPRI, r6
   21836:	f3bf 8f6f 	isb	sy
}
   2183a:	bd70      	pop	{r4, r5, r6, pc}
   2183c:	2002154c 	.word	0x2002154c
   21840:	0002c4fc 	.word	0x0002c4fc
   21844:	0002c555 	.word	0x0002c555
   21848:	0002b6e9 	.word	0x0002b6e9
   2184c:	0002c56a 	.word	0x0002c56a
   21850:	0002c529 	.word	0x0002c529
   21854:	0002c540 	.word	0x0002c540

00021858 <z_unpend1_no_timeout>:
{
   21858:	b570      	push	{r4, r5, r6, lr}
   2185a:	4605      	mov	r5, r0
	__asm__ volatile(
   2185c:	f04f 0320 	mov.w	r3, #32
   21860:	f3ef 8611 	mrs	r6, BASEPRI
   21864:	f383 8812 	msr	BASEPRI_MAX, r3
   21868:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2186c:	4819      	ldr	r0, [pc, #100]	; (218d4 <z_unpend1_no_timeout+0x7c>)
   2186e:	f7fe f829 	bl	1f8c4 <z_spin_lock_valid>
   21872:	b968      	cbnz	r0, 21890 <z_unpend1_no_timeout+0x38>
   21874:	2394      	movs	r3, #148	; 0x94
   21876:	4a18      	ldr	r2, [pc, #96]	; (218d8 <z_unpend1_no_timeout+0x80>)
   21878:	4918      	ldr	r1, [pc, #96]	; (218dc <z_unpend1_no_timeout+0x84>)
   2187a:	4819      	ldr	r0, [pc, #100]	; (218e0 <z_unpend1_no_timeout+0x88>)
   2187c:	f003 fa4f 	bl	24d1e <assert_print>
   21880:	4914      	ldr	r1, [pc, #80]	; (218d4 <z_unpend1_no_timeout+0x7c>)
   21882:	4818      	ldr	r0, [pc, #96]	; (218e4 <z_unpend1_no_timeout+0x8c>)
   21884:	f003 fa4b 	bl	24d1e <assert_print>
   21888:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2188a:	4813      	ldr	r0, [pc, #76]	; (218d8 <z_unpend1_no_timeout+0x80>)
   2188c:	f003 fa40 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   21890:	4810      	ldr	r0, [pc, #64]	; (218d4 <z_unpend1_no_timeout+0x7c>)
   21892:	f7fe f833 	bl	1f8fc <z_spin_lock_set_owner>
	return list->head == list;
   21896:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21898:	42a5      	cmp	r5, r4
   2189a:	d013      	beq.n	218c4 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   2189c:	b114      	cbz	r4, 218a4 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2189e:	4620      	mov	r0, r4
   218a0:	f7ff ff18 	bl	216d4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218a4:	480b      	ldr	r0, [pc, #44]	; (218d4 <z_unpend1_no_timeout+0x7c>)
   218a6:	f7fe f81b 	bl	1f8e0 <z_spin_unlock_valid>
   218aa:	b968      	cbnz	r0, 218c8 <z_unpend1_no_timeout+0x70>
   218ac:	23c2      	movs	r3, #194	; 0xc2
   218ae:	4a0a      	ldr	r2, [pc, #40]	; (218d8 <z_unpend1_no_timeout+0x80>)
   218b0:	490d      	ldr	r1, [pc, #52]	; (218e8 <z_unpend1_no_timeout+0x90>)
   218b2:	480b      	ldr	r0, [pc, #44]	; (218e0 <z_unpend1_no_timeout+0x88>)
   218b4:	f003 fa33 	bl	24d1e <assert_print>
   218b8:	4906      	ldr	r1, [pc, #24]	; (218d4 <z_unpend1_no_timeout+0x7c>)
   218ba:	480c      	ldr	r0, [pc, #48]	; (218ec <z_unpend1_no_timeout+0x94>)
   218bc:	f003 fa2f 	bl	24d1e <assert_print>
   218c0:	21c2      	movs	r1, #194	; 0xc2
   218c2:	e7e2      	b.n	2188a <z_unpend1_no_timeout+0x32>
   218c4:	2400      	movs	r4, #0
   218c6:	e7ed      	b.n	218a4 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   218c8:	f386 8811 	msr	BASEPRI, r6
   218cc:	f3bf 8f6f 	isb	sy
}
   218d0:	4620      	mov	r0, r4
   218d2:	bd70      	pop	{r4, r5, r6, pc}
   218d4:	2002154c 	.word	0x2002154c
   218d8:	0002c4fc 	.word	0x0002c4fc
   218dc:	0002c555 	.word	0x0002c555
   218e0:	0002b6e9 	.word	0x0002b6e9
   218e4:	0002c56a 	.word	0x0002c56a
   218e8:	0002c529 	.word	0x0002c529
   218ec:	0002c540 	.word	0x0002c540

000218f0 <z_unpend_first_thread>:
{
   218f0:	b570      	push	{r4, r5, r6, lr}
   218f2:	4605      	mov	r5, r0
	__asm__ volatile(
   218f4:	f04f 0320 	mov.w	r3, #32
   218f8:	f3ef 8611 	mrs	r6, BASEPRI
   218fc:	f383 8812 	msr	BASEPRI_MAX, r3
   21900:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21904:	481b      	ldr	r0, [pc, #108]	; (21974 <z_unpend_first_thread+0x84>)
   21906:	f7fd ffdd 	bl	1f8c4 <z_spin_lock_valid>
   2190a:	b968      	cbnz	r0, 21928 <z_unpend_first_thread+0x38>
   2190c:	2394      	movs	r3, #148	; 0x94
   2190e:	4a1a      	ldr	r2, [pc, #104]	; (21978 <z_unpend_first_thread+0x88>)
   21910:	491a      	ldr	r1, [pc, #104]	; (2197c <z_unpend_first_thread+0x8c>)
   21912:	481b      	ldr	r0, [pc, #108]	; (21980 <z_unpend_first_thread+0x90>)
   21914:	f003 fa03 	bl	24d1e <assert_print>
   21918:	4916      	ldr	r1, [pc, #88]	; (21974 <z_unpend_first_thread+0x84>)
   2191a:	481a      	ldr	r0, [pc, #104]	; (21984 <z_unpend_first_thread+0x94>)
   2191c:	f003 f9ff 	bl	24d1e <assert_print>
   21920:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21922:	4815      	ldr	r0, [pc, #84]	; (21978 <z_unpend_first_thread+0x88>)
   21924:	f003 f9f4 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   21928:	4812      	ldr	r0, [pc, #72]	; (21974 <z_unpend_first_thread+0x84>)
   2192a:	f7fd ffe7 	bl	1f8fc <z_spin_lock_set_owner>
	return list->head == list;
   2192e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21930:	42a5      	cmp	r5, r4
   21932:	d017      	beq.n	21964 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   21934:	b134      	cbz	r4, 21944 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   21936:	4620      	mov	r0, r4
   21938:	f7ff fecc 	bl	216d4 <unpend_thread_no_timeout>
   2193c:	f104 0018 	add.w	r0, r4, #24
   21940:	f000 fc0c 	bl	2215c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21944:	480b      	ldr	r0, [pc, #44]	; (21974 <z_unpend_first_thread+0x84>)
   21946:	f7fd ffcb 	bl	1f8e0 <z_spin_unlock_valid>
   2194a:	b968      	cbnz	r0, 21968 <z_unpend_first_thread+0x78>
   2194c:	23c2      	movs	r3, #194	; 0xc2
   2194e:	4a0a      	ldr	r2, [pc, #40]	; (21978 <z_unpend_first_thread+0x88>)
   21950:	490d      	ldr	r1, [pc, #52]	; (21988 <z_unpend_first_thread+0x98>)
   21952:	480b      	ldr	r0, [pc, #44]	; (21980 <z_unpend_first_thread+0x90>)
   21954:	f003 f9e3 	bl	24d1e <assert_print>
   21958:	4906      	ldr	r1, [pc, #24]	; (21974 <z_unpend_first_thread+0x84>)
   2195a:	480c      	ldr	r0, [pc, #48]	; (2198c <z_unpend_first_thread+0x9c>)
   2195c:	f003 f9df 	bl	24d1e <assert_print>
   21960:	21c2      	movs	r1, #194	; 0xc2
   21962:	e7de      	b.n	21922 <z_unpend_first_thread+0x32>
   21964:	2400      	movs	r4, #0
   21966:	e7ed      	b.n	21944 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   21968:	f386 8811 	msr	BASEPRI, r6
   2196c:	f3bf 8f6f 	isb	sy
}
   21970:	4620      	mov	r0, r4
   21972:	bd70      	pop	{r4, r5, r6, pc}
   21974:	2002154c 	.word	0x2002154c
   21978:	0002c4fc 	.word	0x0002c4fc
   2197c:	0002c555 	.word	0x0002c555
   21980:	0002b6e9 	.word	0x0002b6e9
   21984:	0002c56a 	.word	0x0002c56a
   21988:	0002c529 	.word	0x0002c529
   2198c:	0002c540 	.word	0x0002c540

00021990 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21990:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   21992:	4b04      	ldr	r3, [pc, #16]	; (219a4 <z_sched_init+0x14>)
   21994:	4608      	mov	r0, r1
   21996:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2199a:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2199e:	f7ff b96b 	b.w	20c78 <k_sched_time_slice_set>
   219a2:	bf00      	nop
   219a4:	20021504 	.word	0x20021504

000219a8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   219a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   219aa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   219ae:	b16b      	cbz	r3, 219cc <z_impl_k_yield+0x24>
   219b0:	493c      	ldr	r1, [pc, #240]	; (21aa4 <z_impl_k_yield+0xfc>)
   219b2:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   219b6:	4a3c      	ldr	r2, [pc, #240]	; (21aa8 <z_impl_k_yield+0x100>)
   219b8:	483c      	ldr	r0, [pc, #240]	; (21aac <z_impl_k_yield+0x104>)
   219ba:	f003 f9b0 	bl	24d1e <assert_print>
   219be:	483c      	ldr	r0, [pc, #240]	; (21ab0 <z_impl_k_yield+0x108>)
   219c0:	f003 f9ad 	bl	24d1e <assert_print>
   219c4:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   219c8:	4837      	ldr	r0, [pc, #220]	; (21aa8 <z_impl_k_yield+0x100>)
   219ca:	e017      	b.n	219fc <z_impl_k_yield+0x54>
	__asm__ volatile(
   219cc:	f04f 0320 	mov.w	r3, #32
   219d0:	f3ef 8611 	mrs	r6, BASEPRI
   219d4:	f383 8812 	msr	BASEPRI_MAX, r3
   219d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219dc:	4835      	ldr	r0, [pc, #212]	; (21ab4 <z_impl_k_yield+0x10c>)
   219de:	f7fd ff71 	bl	1f8c4 <z_spin_lock_valid>
   219e2:	b968      	cbnz	r0, 21a00 <z_impl_k_yield+0x58>
   219e4:	2394      	movs	r3, #148	; 0x94
   219e6:	4a34      	ldr	r2, [pc, #208]	; (21ab8 <z_impl_k_yield+0x110>)
   219e8:	4934      	ldr	r1, [pc, #208]	; (21abc <z_impl_k_yield+0x114>)
   219ea:	4830      	ldr	r0, [pc, #192]	; (21aac <z_impl_k_yield+0x104>)
   219ec:	f003 f997 	bl	24d1e <assert_print>
   219f0:	4930      	ldr	r1, [pc, #192]	; (21ab4 <z_impl_k_yield+0x10c>)
   219f2:	4833      	ldr	r0, [pc, #204]	; (21ac0 <z_impl_k_yield+0x118>)
   219f4:	f003 f993 	bl	24d1e <assert_print>
   219f8:	2194      	movs	r1, #148	; 0x94
   219fa:	482f      	ldr	r0, [pc, #188]	; (21ab8 <z_impl_k_yield+0x110>)
   219fc:	f003 f988 	bl	24d10 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   21a00:	4c30      	ldr	r4, [pc, #192]	; (21ac4 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   21a02:	482c      	ldr	r0, [pc, #176]	; (21ab4 <z_impl_k_yield+0x10c>)
   21a04:	f7fd ff7a 	bl	1f8fc <z_spin_lock_set_owner>
   21a08:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   21a0a:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a0e:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21a10:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21a16:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21a18:	f7ff fb92 	bl	21140 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   21a1c:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21a1e:	7b5a      	ldrb	r2, [r3, #13]
   21a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21a24:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21a26:	4a28      	ldr	r2, [pc, #160]	; (21ac8 <z_impl_k_yield+0x120>)
   21a28:	4293      	cmp	r3, r2
   21a2a:	d107      	bne.n	21a3c <z_impl_k_yield+0x94>
   21a2c:	4927      	ldr	r1, [pc, #156]	; (21acc <z_impl_k_yield+0x124>)
   21a2e:	23ba      	movs	r3, #186	; 0xba
   21a30:	4a1d      	ldr	r2, [pc, #116]	; (21aa8 <z_impl_k_yield+0x100>)
   21a32:	481e      	ldr	r0, [pc, #120]	; (21aac <z_impl_k_yield+0x104>)
   21a34:	f003 f973 	bl	24d1e <assert_print>
   21a38:	21ba      	movs	r1, #186	; 0xba
   21a3a:	e7c5      	b.n	219c8 <z_impl_k_yield+0x20>
	return list->head == list;
   21a3c:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   21a3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a40:	42aa      	cmp	r2, r5
   21a42:	bf08      	it	eq
   21a44:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21a46:	b922      	cbnz	r2, 21a52 <z_impl_k_yield+0xaa>
	node->prev = tail;
   21a48:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   21a4c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   21a4e:	6263      	str	r3, [r4, #36]	; 0x24
}
   21a50:	e00c      	b.n	21a6c <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   21a52:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   21a56:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   21a5a:	42b8      	cmp	r0, r7
   21a5c:	d019      	beq.n	21a92 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21a5e:	4287      	cmp	r7, r0
   21a60:	dd17      	ble.n	21a92 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   21a62:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21a64:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   21a68:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21a6a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   21a6c:	2001      	movs	r0, #1
   21a6e:	f7ff f885 	bl	20b7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a72:	4810      	ldr	r0, [pc, #64]	; (21ab4 <z_impl_k_yield+0x10c>)
   21a74:	f7fd ff34 	bl	1f8e0 <z_spin_unlock_valid>
   21a78:	b978      	cbnz	r0, 21a9a <z_impl_k_yield+0xf2>
   21a7a:	23e1      	movs	r3, #225	; 0xe1
   21a7c:	4a0e      	ldr	r2, [pc, #56]	; (21ab8 <z_impl_k_yield+0x110>)
   21a7e:	4914      	ldr	r1, [pc, #80]	; (21ad0 <z_impl_k_yield+0x128>)
   21a80:	480a      	ldr	r0, [pc, #40]	; (21aac <z_impl_k_yield+0x104>)
   21a82:	f003 f94c 	bl	24d1e <assert_print>
   21a86:	490b      	ldr	r1, [pc, #44]	; (21ab4 <z_impl_k_yield+0x10c>)
   21a88:	4812      	ldr	r0, [pc, #72]	; (21ad4 <z_impl_k_yield+0x12c>)
   21a8a:	f003 f948 	bl	24d1e <assert_print>
   21a8e:	21e1      	movs	r1, #225	; 0xe1
   21a90:	e7b3      	b.n	219fa <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   21a92:	428a      	cmp	r2, r1
   21a94:	d0d8      	beq.n	21a48 <z_impl_k_yield+0xa0>
   21a96:	6812      	ldr	r2, [r2, #0]
   21a98:	e7d5      	b.n	21a46 <z_impl_k_yield+0x9e>
   21a9a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   21a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21aa0:	f7ee bbc2 	b.w	10228 <arch_swap>
   21aa4:	0003082e 	.word	0x0003082e
   21aa8:	00030a9b 	.word	0x00030a9b
   21aac:	0002b6e9 	.word	0x0002b6e9
   21ab0:	0002f302 	.word	0x0002f302
   21ab4:	2002154c 	.word	0x2002154c
   21ab8:	0002c4fc 	.word	0x0002c4fc
   21abc:	0002c555 	.word	0x0002c555
   21ac0:	0002c56a 	.word	0x0002c56a
   21ac4:	20021504 	.word	0x20021504
   21ac8:	20009c08 	.word	0x20009c08
   21acc:	00030ae4 	.word	0x00030ae4
   21ad0:	0002c529 	.word	0x0002c529
   21ad4:	0002c540 	.word	0x0002c540

00021ad8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   21ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21adc:	4605      	mov	r5, r0
   21ade:	460e      	mov	r6, r1
   21ae0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21ae4:	b16b      	cbz	r3, 21b02 <z_tick_sleep+0x2a>
   21ae6:	493f      	ldr	r1, [pc, #252]	; (21be4 <z_tick_sleep+0x10c>)
   21ae8:	f240 538c 	movw	r3, #1420	; 0x58c
   21aec:	4a3e      	ldr	r2, [pc, #248]	; (21be8 <z_tick_sleep+0x110>)
   21aee:	483f      	ldr	r0, [pc, #252]	; (21bec <z_tick_sleep+0x114>)
   21af0:	f003 f915 	bl	24d1e <assert_print>
   21af4:	483e      	ldr	r0, [pc, #248]	; (21bf0 <z_tick_sleep+0x118>)
   21af6:	f003 f912 	bl	24d1e <assert_print>
   21afa:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21afe:	483a      	ldr	r0, [pc, #232]	; (21be8 <z_tick_sleep+0x110>)
   21b00:	e025      	b.n	21b4e <z_tick_sleep+0x76>
	if (ticks == 0) {
   21b02:	ea50 0301 	orrs.w	r3, r0, r1
   21b06:	d103      	bne.n	21b10 <z_tick_sleep+0x38>
	z_impl_k_yield();
   21b08:	f7ff ff4e 	bl	219a8 <z_impl_k_yield>
		return 0;
   21b0c:	2000      	movs	r0, #0
   21b0e:	e066      	b.n	21bde <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   21b10:	1c82      	adds	r2, r0, #2
   21b12:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   21b16:	db1c      	blt.n	21b52 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21b18:	f007 fd58 	bl	295cc <sys_clock_tick_get_32>
   21b1c:	1944      	adds	r4, r0, r5
   21b1e:	f04f 0320 	mov.w	r3, #32
   21b22:	f3ef 8811 	mrs	r8, BASEPRI
   21b26:	f383 8812 	msr	BASEPRI_MAX, r3
   21b2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b2e:	4831      	ldr	r0, [pc, #196]	; (21bf4 <z_tick_sleep+0x11c>)
   21b30:	f7fd fec8 	bl	1f8c4 <z_spin_lock_valid>
   21b34:	b988      	cbnz	r0, 21b5a <z_tick_sleep+0x82>
   21b36:	2394      	movs	r3, #148	; 0x94
   21b38:	4a2f      	ldr	r2, [pc, #188]	; (21bf8 <z_tick_sleep+0x120>)
   21b3a:	4930      	ldr	r1, [pc, #192]	; (21bfc <z_tick_sleep+0x124>)
   21b3c:	482b      	ldr	r0, [pc, #172]	; (21bec <z_tick_sleep+0x114>)
   21b3e:	f003 f8ee 	bl	24d1e <assert_print>
   21b42:	492c      	ldr	r1, [pc, #176]	; (21bf4 <z_tick_sleep+0x11c>)
   21b44:	482e      	ldr	r0, [pc, #184]	; (21c00 <z_tick_sleep+0x128>)
   21b46:	f003 f8ea 	bl	24d1e <assert_print>
   21b4a:	2194      	movs	r1, #148	; 0x94
   21b4c:	482a      	ldr	r0, [pc, #168]	; (21bf8 <z_tick_sleep+0x120>)
   21b4e:	f003 f8df 	bl	24d10 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   21b52:	f06f 0401 	mvn.w	r4, #1
   21b56:	1a24      	subs	r4, r4, r0
   21b58:	e7e1      	b.n	21b1e <z_tick_sleep+0x46>
	pending_current = _current;
   21b5a:	4f2a      	ldr	r7, [pc, #168]	; (21c04 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   21b5c:	4825      	ldr	r0, [pc, #148]	; (21bf4 <z_tick_sleep+0x11c>)
   21b5e:	f7fd fecd 	bl	1f8fc <z_spin_lock_set_owner>
   21b62:	68b8      	ldr	r0, [r7, #8]
   21b64:	4b28      	ldr	r3, [pc, #160]	; (21c08 <z_tick_sleep+0x130>)
   21b66:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21b68:	f7ff fbd2 	bl	21310 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21b6c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21b6e:	462a      	mov	r2, r5
   21b70:	4633      	mov	r3, r6
   21b72:	3018      	adds	r0, #24
   21b74:	4925      	ldr	r1, [pc, #148]	; (21c0c <z_tick_sleep+0x134>)
   21b76:	f000 fa2b 	bl	21fd0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21b7a:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b7c:	481d      	ldr	r0, [pc, #116]	; (21bf4 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21b7e:	7b53      	ldrb	r3, [r2, #13]
   21b80:	f043 0310 	orr.w	r3, r3, #16
   21b84:	7353      	strb	r3, [r2, #13]
   21b86:	f7fd feab 	bl	1f8e0 <z_spin_unlock_valid>
   21b8a:	b958      	cbnz	r0, 21ba4 <z_tick_sleep+0xcc>
   21b8c:	23e1      	movs	r3, #225	; 0xe1
   21b8e:	4a1a      	ldr	r2, [pc, #104]	; (21bf8 <z_tick_sleep+0x120>)
   21b90:	491f      	ldr	r1, [pc, #124]	; (21c10 <z_tick_sleep+0x138>)
   21b92:	4816      	ldr	r0, [pc, #88]	; (21bec <z_tick_sleep+0x114>)
   21b94:	f003 f8c3 	bl	24d1e <assert_print>
   21b98:	4916      	ldr	r1, [pc, #88]	; (21bf4 <z_tick_sleep+0x11c>)
   21b9a:	481e      	ldr	r0, [pc, #120]	; (21c14 <z_tick_sleep+0x13c>)
   21b9c:	f003 f8bf 	bl	24d1e <assert_print>
   21ba0:	21e1      	movs	r1, #225	; 0xe1
   21ba2:	e7d3      	b.n	21b4c <z_tick_sleep+0x74>
   21ba4:	4640      	mov	r0, r8
   21ba6:	f7ee fb3f 	bl	10228 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   21baa:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21bac:	7b5b      	ldrb	r3, [r3, #13]
   21bae:	06db      	lsls	r3, r3, #27
   21bb0:	d50c      	bpl.n	21bcc <z_tick_sleep+0xf4>
   21bb2:	4919      	ldr	r1, [pc, #100]	; (21c18 <z_tick_sleep+0x140>)
   21bb4:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   21bb8:	4a0b      	ldr	r2, [pc, #44]	; (21be8 <z_tick_sleep+0x110>)
   21bba:	480c      	ldr	r0, [pc, #48]	; (21bec <z_tick_sleep+0x114>)
   21bbc:	f003 f8af 	bl	24d1e <assert_print>
   21bc0:	480b      	ldr	r0, [pc, #44]	; (21bf0 <z_tick_sleep+0x118>)
   21bc2:	f003 f8ac 	bl	24d1e <assert_print>
   21bc6:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   21bca:	e798      	b.n	21afe <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21bcc:	f007 fcfe 	bl	295cc <sys_clock_tick_get_32>
   21bd0:	1a20      	subs	r0, r4, r0
   21bd2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   21bd6:	2801      	cmp	r0, #1
   21bd8:	f173 0300 	sbcs.w	r3, r3, #0
   21bdc:	db96      	blt.n	21b0c <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   21bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21be2:	bf00      	nop
   21be4:	0003082e 	.word	0x0003082e
   21be8:	00030a9b 	.word	0x00030a9b
   21bec:	0002b6e9 	.word	0x0002b6e9
   21bf0:	0002f302 	.word	0x0002f302
   21bf4:	2002154c 	.word	0x2002154c
   21bf8:	0002c4fc 	.word	0x0002c4fc
   21bfc:	0002c555 	.word	0x0002c555
   21c00:	0002c56a 	.word	0x0002c56a
   21c04:	20021504 	.word	0x20021504
   21c08:	20021540 	.word	0x20021540
   21c0c:	000217a9 	.word	0x000217a9
   21c10:	0002c529 	.word	0x0002c529
   21c14:	0002c540 	.word	0x0002c540
   21c18:	00030be0 	.word	0x00030be0

00021c1c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21c1c:	b508      	push	{r3, lr}
   21c1e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21c22:	b173      	cbz	r3, 21c42 <z_impl_k_sleep+0x26>
   21c24:	4912      	ldr	r1, [pc, #72]	; (21c70 <z_impl_k_sleep+0x54>)
   21c26:	f240 53b7 	movw	r3, #1463	; 0x5b7
   21c2a:	4a12      	ldr	r2, [pc, #72]	; (21c74 <z_impl_k_sleep+0x58>)
   21c2c:	4812      	ldr	r0, [pc, #72]	; (21c78 <z_impl_k_sleep+0x5c>)
   21c2e:	f003 f876 	bl	24d1e <assert_print>
   21c32:	4812      	ldr	r0, [pc, #72]	; (21c7c <z_impl_k_sleep+0x60>)
   21c34:	f003 f873 	bl	24d1e <assert_print>
   21c38:	f240 51b7 	movw	r1, #1463	; 0x5b7
   21c3c:	480d      	ldr	r0, [pc, #52]	; (21c74 <z_impl_k_sleep+0x58>)
   21c3e:	f003 f867 	bl	24d10 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21c42:	f1b1 3fff 	cmp.w	r1, #4294967295
   21c46:	bf08      	it	eq
   21c48:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   21c4c:	d106      	bne.n	21c5c <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   21c4e:	4b0c      	ldr	r3, [pc, #48]	; (21c80 <z_impl_k_sleep+0x64>)
   21c50:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21c52:	f7ff fcd7 	bl	21604 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   21c56:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   21c5a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   21c5c:	f7ff ff3c 	bl	21ad8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   21c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21c64:	fb80 0303 	smull	r0, r3, r0, r3
   21c68:	0bc0      	lsrs	r0, r0, #15
   21c6a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   21c6e:	e7f4      	b.n	21c5a <z_impl_k_sleep+0x3e>
   21c70:	0003082e 	.word	0x0003082e
   21c74:	00030a9b 	.word	0x00030a9b
   21c78:	0002b6e9 	.word	0x0002b6e9
   21c7c:	0002f302 	.word	0x0002f302
   21c80:	20021504 	.word	0x20021504

00021c84 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21c84:	4b01      	ldr	r3, [pc, #4]	; (21c8c <z_impl_z_current_get+0x8>)
   21c86:	6898      	ldr	r0, [r3, #8]
   21c88:	4770      	bx	lr
   21c8a:	bf00      	nop
   21c8c:	20021504 	.word	0x20021504

00021c90 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   21c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c94:	4604      	mov	r4, r0
   21c96:	f04f 0320 	mov.w	r3, #32
   21c9a:	f3ef 8611 	mrs	r6, BASEPRI
   21c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   21ca2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ca6:	4851      	ldr	r0, [pc, #324]	; (21dec <z_thread_abort+0x15c>)
   21ca8:	f7fd fe0c 	bl	1f8c4 <z_spin_lock_valid>
   21cac:	b968      	cbnz	r0, 21cca <z_thread_abort+0x3a>
   21cae:	2394      	movs	r3, #148	; 0x94
   21cb0:	4a4f      	ldr	r2, [pc, #316]	; (21df0 <z_thread_abort+0x160>)
   21cb2:	4950      	ldr	r1, [pc, #320]	; (21df4 <z_thread_abort+0x164>)
   21cb4:	4850      	ldr	r0, [pc, #320]	; (21df8 <z_thread_abort+0x168>)
   21cb6:	f003 f832 	bl	24d1e <assert_print>
   21cba:	494c      	ldr	r1, [pc, #304]	; (21dec <z_thread_abort+0x15c>)
   21cbc:	484f      	ldr	r0, [pc, #316]	; (21dfc <z_thread_abort+0x16c>)
   21cbe:	f003 f82e 	bl	24d1e <assert_print>
   21cc2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cc4:	484a      	ldr	r0, [pc, #296]	; (21df0 <z_thread_abort+0x160>)
   21cc6:	f003 f823 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   21cca:	4848      	ldr	r0, [pc, #288]	; (21dec <z_thread_abort+0x15c>)
   21ccc:	f7fd fe16 	bl	1f8fc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   21cd0:	7b23      	ldrb	r3, [r4, #12]
   21cd2:	07d9      	lsls	r1, r3, #31
   21cd4:	d522      	bpl.n	21d1c <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cd6:	4845      	ldr	r0, [pc, #276]	; (21dec <z_thread_abort+0x15c>)
   21cd8:	f7fd fe02 	bl	1f8e0 <z_spin_unlock_valid>
   21cdc:	b958      	cbnz	r0, 21cf6 <z_thread_abort+0x66>
   21cde:	23c2      	movs	r3, #194	; 0xc2
   21ce0:	4a43      	ldr	r2, [pc, #268]	; (21df0 <z_thread_abort+0x160>)
   21ce2:	4947      	ldr	r1, [pc, #284]	; (21e00 <z_thread_abort+0x170>)
   21ce4:	4844      	ldr	r0, [pc, #272]	; (21df8 <z_thread_abort+0x168>)
   21ce6:	f003 f81a 	bl	24d1e <assert_print>
   21cea:	4940      	ldr	r1, [pc, #256]	; (21dec <z_thread_abort+0x15c>)
   21cec:	4845      	ldr	r0, [pc, #276]	; (21e04 <z_thread_abort+0x174>)
   21cee:	f003 f816 	bl	24d1e <assert_print>
   21cf2:	21c2      	movs	r1, #194	; 0xc2
   21cf4:	e7e6      	b.n	21cc4 <z_thread_abort+0x34>
	__asm__ volatile(
   21cf6:	f386 8811 	msr	BASEPRI, r6
   21cfa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   21cfe:	f240 63c3 	movw	r3, #1731	; 0x6c3
   21d02:	4a41      	ldr	r2, [pc, #260]	; (21e08 <z_thread_abort+0x178>)
   21d04:	4941      	ldr	r1, [pc, #260]	; (21e0c <z_thread_abort+0x17c>)
   21d06:	483c      	ldr	r0, [pc, #240]	; (21df8 <z_thread_abort+0x168>)
   21d08:	f003 f809 	bl	24d1e <assert_print>
   21d0c:	4621      	mov	r1, r4
   21d0e:	4840      	ldr	r0, [pc, #256]	; (21e10 <z_thread_abort+0x180>)
   21d10:	f003 f805 	bl	24d1e <assert_print>
   21d14:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   21d18:	483b      	ldr	r0, [pc, #236]	; (21e08 <z_thread_abort+0x178>)
   21d1a:	e7d4      	b.n	21cc6 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21d1c:	7b63      	ldrb	r3, [r4, #13]
   21d1e:	071a      	lsls	r2, r3, #28
   21d20:	d50a      	bpl.n	21d38 <z_thread_abort+0xa8>
   21d22:	4832      	ldr	r0, [pc, #200]	; (21dec <z_thread_abort+0x15c>)
   21d24:	f7fd fddc 	bl	1f8e0 <z_spin_unlock_valid>
   21d28:	2800      	cmp	r0, #0
   21d2a:	d0d8      	beq.n	21cde <z_thread_abort+0x4e>
   21d2c:	f386 8811 	msr	BASEPRI, r6
   21d30:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   21d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21d38:	f023 0220 	bic.w	r2, r3, #32
   21d3c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   21d40:	09d2      	lsrs	r2, r2, #7
   21d42:	d12c      	bne.n	21d9e <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21d44:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   21d46:	68a3      	ldr	r3, [r4, #8]
   21d48:	b113      	cbz	r3, 21d50 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   21d4a:	4620      	mov	r0, r4
   21d4c:	f7ff fcc2 	bl	216d4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   21d50:	f104 0018 	add.w	r0, r4, #24
   21d54:	f000 fa02 	bl	2215c <z_abort_timeout>
   21d58:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21d5c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   21d60:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21d62:	42bd      	cmp	r5, r7
   21d64:	d000      	beq.n	21d68 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21d66:	bb25      	cbnz	r5, 21db2 <z_thread_abort+0x122>
		update_cache(1);
   21d68:	2001      	movs	r0, #1
   21d6a:	f7fe ff07 	bl	20b7c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   21d6e:	4b29      	ldr	r3, [pc, #164]	; (21e14 <z_thread_abort+0x184>)
   21d70:	689b      	ldr	r3, [r3, #8]
   21d72:	42a3      	cmp	r3, r4
   21d74:	d1d5      	bne.n	21d22 <z_thread_abort+0x92>
   21d76:	f3ef 8305 	mrs	r3, IPSR
   21d7a:	2b00      	cmp	r3, #0
   21d7c:	d1d1      	bne.n	21d22 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d7e:	481b      	ldr	r0, [pc, #108]	; (21dec <z_thread_abort+0x15c>)
   21d80:	f7fd fdae 	bl	1f8e0 <z_spin_unlock_valid>
   21d84:	bb10      	cbnz	r0, 21dcc <z_thread_abort+0x13c>
   21d86:	23e1      	movs	r3, #225	; 0xe1
   21d88:	4a19      	ldr	r2, [pc, #100]	; (21df0 <z_thread_abort+0x160>)
   21d8a:	491d      	ldr	r1, [pc, #116]	; (21e00 <z_thread_abort+0x170>)
   21d8c:	481a      	ldr	r0, [pc, #104]	; (21df8 <z_thread_abort+0x168>)
   21d8e:	f002 ffc6 	bl	24d1e <assert_print>
   21d92:	4916      	ldr	r1, [pc, #88]	; (21dec <z_thread_abort+0x15c>)
   21d94:	481b      	ldr	r0, [pc, #108]	; (21e04 <z_thread_abort+0x174>)
   21d96:	f002 ffc2 	bl	24d1e <assert_print>
   21d9a:	21e1      	movs	r1, #225	; 0xe1
   21d9c:	e792      	b.n	21cc4 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21d9e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   21da2:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   21da6:	4621      	mov	r1, r4
   21da8:	481b      	ldr	r0, [pc, #108]	; (21e18 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21daa:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21dac:	f7ff f9c8 	bl	21140 <z_priq_dumb_remove>
}
   21db0:	e7c9      	b.n	21d46 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   21db2:	4628      	mov	r0, r5
   21db4:	f7ff fc8e 	bl	216d4 <unpend_thread_no_timeout>
   21db8:	f105 0018 	add.w	r0, r5, #24
   21dbc:	f000 f9ce 	bl	2215c <z_abort_timeout>
		ready_thread(thread);
   21dc0:	4628      	mov	r0, r5
   21dc2:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   21dc6:	f7fe ff0d 	bl	20be4 <ready_thread>
   21dca:	e7c9      	b.n	21d60 <z_thread_abort+0xd0>
   21dcc:	4630      	mov	r0, r6
   21dce:	f7ee fa2b 	bl	10228 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   21dd2:	490e      	ldr	r1, [pc, #56]	; (21e0c <z_thread_abort+0x17c>)
   21dd4:	f240 63f2 	movw	r3, #1778	; 0x6f2
   21dd8:	4a0b      	ldr	r2, [pc, #44]	; (21e08 <z_thread_abort+0x178>)
   21dda:	4807      	ldr	r0, [pc, #28]	; (21df8 <z_thread_abort+0x168>)
   21ddc:	f002 ff9f 	bl	24d1e <assert_print>
   21de0:	480e      	ldr	r0, [pc, #56]	; (21e1c <z_thread_abort+0x18c>)
   21de2:	f002 ff9c 	bl	24d1e <assert_print>
   21de6:	f240 61f2 	movw	r1, #1778	; 0x6f2
   21dea:	e795      	b.n	21d18 <z_thread_abort+0x88>
   21dec:	2002154c 	.word	0x2002154c
   21df0:	0002c4fc 	.word	0x0002c4fc
   21df4:	0002c555 	.word	0x0002c555
   21df8:	0002b6e9 	.word	0x0002b6e9
   21dfc:	0002c56a 	.word	0x0002c56a
   21e00:	0002c529 	.word	0x0002c529
   21e04:	0002c540 	.word	0x0002c540
   21e08:	00030a9b 	.word	0x00030a9b
   21e0c:	00030f5f 	.word	0x00030f5f
   21e10:	00030c20 	.word	0x00030c20
   21e14:	20021504 	.word	0x20021504
   21e18:	20021524 	.word	0x20021524
   21e1c:	00030c3f 	.word	0x00030c3f

00021e20 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   21e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21e24:	4606      	mov	r6, r0
   21e26:	4688      	mov	r8, r1
   21e28:	4617      	mov	r7, r2
	__asm__ volatile(
   21e2a:	f04f 0320 	mov.w	r3, #32
   21e2e:	f3ef 8911 	mrs	r9, BASEPRI
   21e32:	f383 8812 	msr	BASEPRI_MAX, r3
   21e36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e3a:	4821      	ldr	r0, [pc, #132]	; (21ec0 <z_sched_wake+0xa0>)
   21e3c:	f7fd fd42 	bl	1f8c4 <z_spin_lock_valid>
   21e40:	4605      	mov	r5, r0
   21e42:	b968      	cbnz	r0, 21e60 <z_sched_wake+0x40>
   21e44:	2394      	movs	r3, #148	; 0x94
   21e46:	4a1f      	ldr	r2, [pc, #124]	; (21ec4 <z_sched_wake+0xa4>)
   21e48:	491f      	ldr	r1, [pc, #124]	; (21ec8 <z_sched_wake+0xa8>)
   21e4a:	4820      	ldr	r0, [pc, #128]	; (21ecc <z_sched_wake+0xac>)
   21e4c:	f002 ff67 	bl	24d1e <assert_print>
   21e50:	491b      	ldr	r1, [pc, #108]	; (21ec0 <z_sched_wake+0xa0>)
   21e52:	481f      	ldr	r0, [pc, #124]	; (21ed0 <z_sched_wake+0xb0>)
   21e54:	f002 ff63 	bl	24d1e <assert_print>
   21e58:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e5a:	481a      	ldr	r0, [pc, #104]	; (21ec4 <z_sched_wake+0xa4>)
   21e5c:	f002 ff58 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   21e60:	4817      	ldr	r0, [pc, #92]	; (21ec0 <z_sched_wake+0xa0>)
   21e62:	f7fd fd4b 	bl	1f8fc <z_spin_lock_set_owner>
	return list->head == list;
   21e66:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21e68:	42a6      	cmp	r6, r4
   21e6a:	d01d      	beq.n	21ea8 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   21e6c:	b1f4      	cbz	r4, 21eac <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   21e6e:	4620      	mov	r0, r4
   21e70:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   21e74:	6167      	str	r7, [r4, #20]
   21e76:	f7ff fc2d 	bl	216d4 <unpend_thread_no_timeout>
   21e7a:	f104 0018 	add.w	r0, r4, #24
   21e7e:	f000 f96d 	bl	2215c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   21e82:	4620      	mov	r0, r4
   21e84:	f7fe feae 	bl	20be4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e88:	480d      	ldr	r0, [pc, #52]	; (21ec0 <z_sched_wake+0xa0>)
   21e8a:	f7fd fd29 	bl	1f8e0 <z_spin_unlock_valid>
   21e8e:	b978      	cbnz	r0, 21eb0 <z_sched_wake+0x90>
   21e90:	23c2      	movs	r3, #194	; 0xc2
   21e92:	4a0c      	ldr	r2, [pc, #48]	; (21ec4 <z_sched_wake+0xa4>)
   21e94:	490f      	ldr	r1, [pc, #60]	; (21ed4 <z_sched_wake+0xb4>)
   21e96:	480d      	ldr	r0, [pc, #52]	; (21ecc <z_sched_wake+0xac>)
   21e98:	f002 ff41 	bl	24d1e <assert_print>
   21e9c:	4908      	ldr	r1, [pc, #32]	; (21ec0 <z_sched_wake+0xa0>)
   21e9e:	480e      	ldr	r0, [pc, #56]	; (21ed8 <z_sched_wake+0xb8>)
   21ea0:	f002 ff3d 	bl	24d1e <assert_print>
   21ea4:	21c2      	movs	r1, #194	; 0xc2
   21ea6:	e7d8      	b.n	21e5a <z_sched_wake+0x3a>
	bool ret = false;
   21ea8:	2500      	movs	r5, #0
   21eaa:	e7ed      	b.n	21e88 <z_sched_wake+0x68>
   21eac:	4625      	mov	r5, r4
   21eae:	e7eb      	b.n	21e88 <z_sched_wake+0x68>
	__asm__ volatile(
   21eb0:	f389 8811 	msr	BASEPRI, r9
   21eb4:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   21eb8:	4628      	mov	r0, r5
   21eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21ebe:	bf00      	nop
   21ec0:	2002154c 	.word	0x2002154c
   21ec4:	0002c4fc 	.word	0x0002c4fc
   21ec8:	0002c555 	.word	0x0002c555
   21ecc:	0002b6e9 	.word	0x0002b6e9
   21ed0:	0002c56a 	.word	0x0002c56a
   21ed4:	0002c529 	.word	0x0002c529
   21ed8:	0002c540 	.word	0x0002c540

00021edc <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21edc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21ede:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   21ee2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21ee4:	e9cd 6700 	strd	r6, r7, [sp]
   21ee8:	f7ff fa84 	bl	213f4 <z_pend_curr>

	if (data != NULL) {
   21eec:	b11c      	cbz	r4, 21ef6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21eee:	4b03      	ldr	r3, [pc, #12]	; (21efc <z_sched_wait+0x20>)
   21ef0:	689b      	ldr	r3, [r3, #8]
   21ef2:	695b      	ldr	r3, [r3, #20]
   21ef4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   21ef6:	b002      	add	sp, #8
   21ef8:	bdd0      	pop	{r4, r6, r7, pc}
   21efa:	bf00      	nop
   21efc:	20021504 	.word	0x20021504

00021f00 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   21f00:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   21f02:	4806      	ldr	r0, [pc, #24]	; (21f1c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   21f04:	4a06      	ldr	r2, [pc, #24]	; (21f20 <z_data_copy+0x20>)
   21f06:	4907      	ldr	r1, [pc, #28]	; (21f24 <z_data_copy+0x24>)
   21f08:	1a12      	subs	r2, r2, r0
   21f0a:	f007 fa49 	bl	293a0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   21f12:	4a05      	ldr	r2, [pc, #20]	; (21f28 <z_data_copy+0x28>)
   21f14:	4905      	ldr	r1, [pc, #20]	; (21f2c <z_data_copy+0x2c>)
   21f16:	4806      	ldr	r0, [pc, #24]	; (21f30 <z_data_copy+0x30>)
   21f18:	f007 ba42 	b.w	293a0 <z_early_memcpy>
   21f1c:	20008000 	.word	0x20008000
   21f20:	20008d70 	.word	0x20008d70
   21f24:	00031260 	.word	0x00031260
   21f28:	00000000 	.word	0x00000000
   21f2c:	00031260 	.word	0x00031260
   21f30:	20008000 	.word	0x20008000

00021f34 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21f34:	4b03      	ldr	r3, [pc, #12]	; (21f44 <elapsed+0x10>)
   21f36:	681b      	ldr	r3, [r3, #0]
   21f38:	b90b      	cbnz	r3, 21f3e <elapsed+0xa>
   21f3a:	f7fa baa1 	b.w	1c480 <sys_clock_elapsed>
}
   21f3e:	2000      	movs	r0, #0
   21f40:	4770      	bx	lr
   21f42:	bf00      	nop
   21f44:	20021550 	.word	0x20021550

00021f48 <next_timeout>:

static int32_t next_timeout(void)
{
   21f48:	b510      	push	{r4, lr}
	return list->head == list;
   21f4a:	4b11      	ldr	r3, [pc, #68]	; (21f90 <next_timeout+0x48>)
   21f4c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f4e:	429c      	cmp	r4, r3
   21f50:	d10a      	bne.n	21f68 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   21f52:	f7ff ffef 	bl	21f34 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   21f56:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   21f5a:	4b0e      	ldr	r3, [pc, #56]	; (21f94 <next_timeout+0x4c>)
   21f5c:	691b      	ldr	r3, [r3, #16]
   21f5e:	b113      	cbz	r3, 21f66 <next_timeout+0x1e>
   21f60:	4298      	cmp	r0, r3
   21f62:	bfa8      	it	ge
   21f64:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   21f66:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   21f68:	f7ff ffe4 	bl	21f34 <elapsed>
	if ((to == NULL) ||
   21f6c:	2c00      	cmp	r4, #0
   21f6e:	d0f2      	beq.n	21f56 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   21f70:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   21f74:	1a1b      	subs	r3, r3, r0
   21f76:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   21f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21f7e:	f172 0100 	sbcs.w	r1, r2, #0
   21f82:	dae8      	bge.n	21f56 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   21f84:	2a00      	cmp	r2, #0
   21f86:	bfac      	ite	ge
   21f88:	4618      	movge	r0, r3
   21f8a:	2000      	movlt	r0, #0
   21f8c:	e7e5      	b.n	21f5a <next_timeout+0x12>
   21f8e:	bf00      	nop
   21f90:	20008734 	.word	0x20008734
   21f94:	20021504 	.word	0x20021504

00021f98 <remove_timeout>:
{
   21f98:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21f9a:	b170      	cbz	r0, 21fba <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   21f9c:	4b0b      	ldr	r3, [pc, #44]	; (21fcc <remove_timeout+0x34>)
   21f9e:	685b      	ldr	r3, [r3, #4]
   21fa0:	4298      	cmp	r0, r3
   21fa2:	d00a      	beq.n	21fba <remove_timeout+0x22>
   21fa4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   21fa6:	b143      	cbz	r3, 21fba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   21fa8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   21fac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   21fb0:	1912      	adds	r2, r2, r4
   21fb2:	eb41 0105 	adc.w	r1, r1, r5
   21fb6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   21fba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21fbe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21fc0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21fc2:	2300      	movs	r3, #0
	node->prev = NULL;
   21fc4:	e9c0 3300 	strd	r3, r3, [r0]
}
   21fc8:	bd30      	pop	{r4, r5, pc}
   21fca:	bf00      	nop
   21fcc:	20008734 	.word	0x20008734

00021fd0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
   21fd4:	bf08      	it	eq
   21fd6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   21fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21fde:	4604      	mov	r4, r0
   21fe0:	4692      	mov	sl, r2
   21fe2:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21fe4:	f000 809e 	beq.w	22124 <z_add_timeout+0x154>
	return node->next != NULL;
   21fe8:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   21fea:	b166      	cbz	r6, 22006 <z_add_timeout+0x36>
   21fec:	494e      	ldr	r1, [pc, #312]	; (22128 <z_add_timeout+0x158>)
   21fee:	2363      	movs	r3, #99	; 0x63
   21ff0:	4a4e      	ldr	r2, [pc, #312]	; (2212c <z_add_timeout+0x15c>)
   21ff2:	484f      	ldr	r0, [pc, #316]	; (22130 <z_add_timeout+0x160>)
   21ff4:	f002 fe93 	bl	24d1e <assert_print>
   21ff8:	484e      	ldr	r0, [pc, #312]	; (22134 <z_add_timeout+0x164>)
   21ffa:	f002 fe90 	bl	24d1e <assert_print>
   21ffe:	2163      	movs	r1, #99	; 0x63
   22000:	484a      	ldr	r0, [pc, #296]	; (2212c <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22002:	f002 fe85 	bl	24d10 <assert_post_action>
	to->fn = fn;
   22006:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22008:	f04f 0320 	mov.w	r3, #32
   2200c:	f3ef 8711 	mrs	r7, BASEPRI
   22010:	f383 8812 	msr	BASEPRI_MAX, r3
   22014:	f3bf 8f6f 	isb	sy
   22018:	4847      	ldr	r0, [pc, #284]	; (22138 <z_add_timeout+0x168>)
   2201a:	f7fd fc53 	bl	1f8c4 <z_spin_lock_valid>
   2201e:	b960      	cbnz	r0, 2203a <z_add_timeout+0x6a>
   22020:	2394      	movs	r3, #148	; 0x94
   22022:	4a46      	ldr	r2, [pc, #280]	; (2213c <z_add_timeout+0x16c>)
   22024:	4946      	ldr	r1, [pc, #280]	; (22140 <z_add_timeout+0x170>)
   22026:	4842      	ldr	r0, [pc, #264]	; (22130 <z_add_timeout+0x160>)
   22028:	f002 fe79 	bl	24d1e <assert_print>
   2202c:	4942      	ldr	r1, [pc, #264]	; (22138 <z_add_timeout+0x168>)
   2202e:	4845      	ldr	r0, [pc, #276]	; (22144 <z_add_timeout+0x174>)
   22030:	f002 fe75 	bl	24d1e <assert_print>
   22034:	2194      	movs	r1, #148	; 0x94
   22036:	4841      	ldr	r0, [pc, #260]	; (2213c <z_add_timeout+0x16c>)
   22038:	e7e3      	b.n	22002 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   2203a:	483f      	ldr	r0, [pc, #252]	; (22138 <z_add_timeout+0x168>)
   2203c:	f7fd fc5e 	bl	1f8fc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22040:	f1ba 3fff 	cmp.w	sl, #4294967295
   22044:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   22048:	da23      	bge.n	22092 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2204a:	f06f 0301 	mvn.w	r3, #1
   2204e:	493e      	ldr	r1, [pc, #248]	; (22148 <z_add_timeout+0x178>)
   22050:	e9d1 2000 	ldrd	r2, r0, [r1]
   22054:	1a9b      	subs	r3, r3, r2
   22056:	f04f 32ff 	mov.w	r2, #4294967295
   2205a:	eb62 0000 	sbc.w	r0, r2, r0
   2205e:	ebb3 030a 	subs.w	r3, r3, sl
   22062:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   22066:	2b01      	cmp	r3, #1
   22068:	f170 0200 	sbcs.w	r2, r0, #0
   2206c:	da01      	bge.n	22072 <z_add_timeout+0xa2>
   2206e:	2301      	movs	r3, #1
   22070:	4630      	mov	r0, r6
   22072:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   22076:	4b35      	ldr	r3, [pc, #212]	; (2214c <z_add_timeout+0x17c>)
   22078:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   2207a:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2207e:	429a      	cmp	r2, r3
   22080:	bf18      	it	ne
   22082:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   22084:	b986      	cbnz	r6, 220a8 <z_add_timeout+0xd8>
	node->prev = tail;
   22086:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   2208a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2208e:	605c      	str	r4, [r3, #4]
}
   22090:	e01c      	b.n	220cc <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   22092:	f7ff ff4f 	bl	21f34 <elapsed>
   22096:	f11a 0801 	adds.w	r8, sl, #1
   2209a:	f145 0500 	adc.w	r5, r5, #0
   2209e:	eb18 0300 	adds.w	r3, r8, r0
   220a2:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   220a6:	e7e4      	b.n	22072 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   220a8:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   220ac:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   220b0:	428a      	cmp	r2, r1
   220b2:	eb70 0e05 	sbcs.w	lr, r0, r5
   220b6:	da28      	bge.n	2210a <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   220b8:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   220ba:	6872      	ldr	r2, [r6, #4]
   220bc:	eb65 0500 	sbc.w	r5, r5, r0
   220c0:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   220c4:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   220c8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   220ca:	6074      	str	r4, [r6, #4]
	return list->head == list;
   220cc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   220ce:	429a      	cmp	r2, r3
   220d0:	d00b      	beq.n	220ea <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   220d2:	4294      	cmp	r4, r2
   220d4:	d109      	bne.n	220ea <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   220d6:	f7ff ff37 	bl	21f48 <next_timeout>

			if (next_time == 0 ||
   220da:	b118      	cbz	r0, 220e4 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   220dc:	4b1c      	ldr	r3, [pc, #112]	; (22150 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   220de:	691b      	ldr	r3, [r3, #16]
   220e0:	4283      	cmp	r3, r0
   220e2:	d002      	beq.n	220ea <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   220e4:	2100      	movs	r1, #0
   220e6:	f7fa f99b 	bl	1c420 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220ea:	4813      	ldr	r0, [pc, #76]	; (22138 <z_add_timeout+0x168>)
   220ec:	f7fd fbf8 	bl	1f8e0 <z_spin_unlock_valid>
   220f0:	b9a0      	cbnz	r0, 2211c <z_add_timeout+0x14c>
   220f2:	23c2      	movs	r3, #194	; 0xc2
   220f4:	4a11      	ldr	r2, [pc, #68]	; (2213c <z_add_timeout+0x16c>)
   220f6:	4917      	ldr	r1, [pc, #92]	; (22154 <z_add_timeout+0x184>)
   220f8:	480d      	ldr	r0, [pc, #52]	; (22130 <z_add_timeout+0x160>)
   220fa:	f002 fe10 	bl	24d1e <assert_print>
   220fe:	490e      	ldr	r1, [pc, #56]	; (22138 <z_add_timeout+0x168>)
   22100:	4815      	ldr	r0, [pc, #84]	; (22158 <z_add_timeout+0x188>)
   22102:	f002 fe0c 	bl	24d1e <assert_print>
   22106:	21c2      	movs	r1, #194	; 0xc2
   22108:	e795      	b.n	22036 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   2210a:	1a52      	subs	r2, r2, r1
   2210c:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   22110:	4566      	cmp	r6, ip
   22112:	e9c4 2004 	strd	r2, r0, [r4, #16]
   22116:	d0b6      	beq.n	22086 <z_add_timeout+0xb6>
   22118:	6836      	ldr	r6, [r6, #0]
   2211a:	e7b3      	b.n	22084 <z_add_timeout+0xb4>
	__asm__ volatile(
   2211c:	f387 8811 	msr	BASEPRI, r7
   22120:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22128:	00030c85 	.word	0x00030c85
   2212c:	00030c61 	.word	0x00030c61
   22130:	0002b6e9 	.word	0x0002b6e9
   22134:	0002f302 	.word	0x0002f302
   22138:	20021554 	.word	0x20021554
   2213c:	0002c4fc 	.word	0x0002c4fc
   22140:	0002c555 	.word	0x0002c555
   22144:	0002c56a 	.word	0x0002c56a
   22148:	20009dc0 	.word	0x20009dc0
   2214c:	20008734 	.word	0x20008734
   22150:	20021504 	.word	0x20021504
   22154:	0002c529 	.word	0x0002c529
   22158:	0002c540 	.word	0x0002c540

0002215c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2215c:	b538      	push	{r3, r4, r5, lr}
   2215e:	4604      	mov	r4, r0
	__asm__ volatile(
   22160:	f04f 0320 	mov.w	r3, #32
   22164:	f3ef 8511 	mrs	r5, BASEPRI
   22168:	f383 8812 	msr	BASEPRI_MAX, r3
   2216c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22170:	4819      	ldr	r0, [pc, #100]	; (221d8 <z_abort_timeout+0x7c>)
   22172:	f7fd fba7 	bl	1f8c4 <z_spin_lock_valid>
   22176:	b968      	cbnz	r0, 22194 <z_abort_timeout+0x38>
   22178:	2394      	movs	r3, #148	; 0x94
   2217a:	4a18      	ldr	r2, [pc, #96]	; (221dc <z_abort_timeout+0x80>)
   2217c:	4918      	ldr	r1, [pc, #96]	; (221e0 <z_abort_timeout+0x84>)
   2217e:	4819      	ldr	r0, [pc, #100]	; (221e4 <z_abort_timeout+0x88>)
   22180:	f002 fdcd 	bl	24d1e <assert_print>
   22184:	4914      	ldr	r1, [pc, #80]	; (221d8 <z_abort_timeout+0x7c>)
   22186:	4818      	ldr	r0, [pc, #96]	; (221e8 <z_abort_timeout+0x8c>)
   22188:	f002 fdc9 	bl	24d1e <assert_print>
   2218c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2218e:	4813      	ldr	r0, [pc, #76]	; (221dc <z_abort_timeout+0x80>)
   22190:	f002 fdbe 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   22194:	4810      	ldr	r0, [pc, #64]	; (221d8 <z_abort_timeout+0x7c>)
   22196:	f7fd fbb1 	bl	1f8fc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2219a:	6823      	ldr	r3, [r4, #0]
   2219c:	b19b      	cbz	r3, 221c6 <z_abort_timeout+0x6a>
			remove_timeout(to);
   2219e:	4620      	mov	r0, r4
   221a0:	f7ff fefa 	bl	21f98 <remove_timeout>
			ret = 0;
   221a4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221a6:	480c      	ldr	r0, [pc, #48]	; (221d8 <z_abort_timeout+0x7c>)
   221a8:	f7fd fb9a 	bl	1f8e0 <z_spin_unlock_valid>
   221ac:	b970      	cbnz	r0, 221cc <z_abort_timeout+0x70>
   221ae:	23c2      	movs	r3, #194	; 0xc2
   221b0:	4a0a      	ldr	r2, [pc, #40]	; (221dc <z_abort_timeout+0x80>)
   221b2:	490e      	ldr	r1, [pc, #56]	; (221ec <z_abort_timeout+0x90>)
   221b4:	480b      	ldr	r0, [pc, #44]	; (221e4 <z_abort_timeout+0x88>)
   221b6:	f002 fdb2 	bl	24d1e <assert_print>
   221ba:	4907      	ldr	r1, [pc, #28]	; (221d8 <z_abort_timeout+0x7c>)
   221bc:	480c      	ldr	r0, [pc, #48]	; (221f0 <z_abort_timeout+0x94>)
   221be:	f002 fdae 	bl	24d1e <assert_print>
   221c2:	21c2      	movs	r1, #194	; 0xc2
   221c4:	e7e3      	b.n	2218e <z_abort_timeout+0x32>
	int ret = -EINVAL;
   221c6:	f06f 0415 	mvn.w	r4, #21
   221ca:	e7ec      	b.n	221a6 <z_abort_timeout+0x4a>
	__asm__ volatile(
   221cc:	f385 8811 	msr	BASEPRI, r5
   221d0:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   221d4:	4620      	mov	r0, r4
   221d6:	bd38      	pop	{r3, r4, r5, pc}
   221d8:	20021554 	.word	0x20021554
   221dc:	0002c4fc 	.word	0x0002c4fc
   221e0:	0002c555 	.word	0x0002c555
   221e4:	0002b6e9 	.word	0x0002b6e9
   221e8:	0002c56a 	.word	0x0002c56a
   221ec:	0002c529 	.word	0x0002c529
   221f0:	0002c540 	.word	0x0002c540

000221f4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   221f4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   221f6:	f04f 0320 	mov.w	r3, #32
   221fa:	f3ef 8511 	mrs	r5, BASEPRI
   221fe:	f383 8812 	msr	BASEPRI_MAX, r3
   22202:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22206:	4817      	ldr	r0, [pc, #92]	; (22264 <z_get_next_timeout_expiry+0x70>)
   22208:	f7fd fb5c 	bl	1f8c4 <z_spin_lock_valid>
   2220c:	b968      	cbnz	r0, 2222a <z_get_next_timeout_expiry+0x36>
   2220e:	2394      	movs	r3, #148	; 0x94
   22210:	4a15      	ldr	r2, [pc, #84]	; (22268 <z_get_next_timeout_expiry+0x74>)
   22212:	4916      	ldr	r1, [pc, #88]	; (2226c <z_get_next_timeout_expiry+0x78>)
   22214:	4816      	ldr	r0, [pc, #88]	; (22270 <z_get_next_timeout_expiry+0x7c>)
   22216:	f002 fd82 	bl	24d1e <assert_print>
   2221a:	4912      	ldr	r1, [pc, #72]	; (22264 <z_get_next_timeout_expiry+0x70>)
   2221c:	4815      	ldr	r0, [pc, #84]	; (22274 <z_get_next_timeout_expiry+0x80>)
   2221e:	f002 fd7e 	bl	24d1e <assert_print>
   22222:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22224:	4810      	ldr	r0, [pc, #64]	; (22268 <z_get_next_timeout_expiry+0x74>)
   22226:	f002 fd73 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   2222a:	480e      	ldr	r0, [pc, #56]	; (22264 <z_get_next_timeout_expiry+0x70>)
   2222c:	f7fd fb66 	bl	1f8fc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   22230:	f7ff fe8a 	bl	21f48 <next_timeout>
   22234:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22236:	480b      	ldr	r0, [pc, #44]	; (22264 <z_get_next_timeout_expiry+0x70>)
   22238:	f7fd fb52 	bl	1f8e0 <z_spin_unlock_valid>
   2223c:	b958      	cbnz	r0, 22256 <z_get_next_timeout_expiry+0x62>
   2223e:	23c2      	movs	r3, #194	; 0xc2
   22240:	4a09      	ldr	r2, [pc, #36]	; (22268 <z_get_next_timeout_expiry+0x74>)
   22242:	490d      	ldr	r1, [pc, #52]	; (22278 <z_get_next_timeout_expiry+0x84>)
   22244:	480a      	ldr	r0, [pc, #40]	; (22270 <z_get_next_timeout_expiry+0x7c>)
   22246:	f002 fd6a 	bl	24d1e <assert_print>
   2224a:	4906      	ldr	r1, [pc, #24]	; (22264 <z_get_next_timeout_expiry+0x70>)
   2224c:	480b      	ldr	r0, [pc, #44]	; (2227c <z_get_next_timeout_expiry+0x88>)
   2224e:	f002 fd66 	bl	24d1e <assert_print>
   22252:	21c2      	movs	r1, #194	; 0xc2
   22254:	e7e6      	b.n	22224 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   22256:	f385 8811 	msr	BASEPRI, r5
   2225a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2225e:	4620      	mov	r0, r4
   22260:	bd38      	pop	{r3, r4, r5, pc}
   22262:	bf00      	nop
   22264:	20021554 	.word	0x20021554
   22268:	0002c4fc 	.word	0x0002c4fc
   2226c:	0002c555 	.word	0x0002c555
   22270:	0002b6e9 	.word	0x0002b6e9
   22274:	0002c56a 	.word	0x0002c56a
   22278:	0002c529 	.word	0x0002c529
   2227c:	0002c540 	.word	0x0002c540

00022280 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   22280:	b570      	push	{r4, r5, r6, lr}
   22282:	4604      	mov	r4, r0
   22284:	460d      	mov	r5, r1
	__asm__ volatile(
   22286:	f04f 0320 	mov.w	r3, #32
   2228a:	f3ef 8611 	mrs	r6, BASEPRI
   2228e:	f383 8812 	msr	BASEPRI_MAX, r3
   22292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22296:	481b      	ldr	r0, [pc, #108]	; (22304 <z_set_timeout_expiry+0x84>)
   22298:	f7fd fb14 	bl	1f8c4 <z_spin_lock_valid>
   2229c:	b968      	cbnz	r0, 222ba <z_set_timeout_expiry+0x3a>
   2229e:	2394      	movs	r3, #148	; 0x94
   222a0:	4a19      	ldr	r2, [pc, #100]	; (22308 <z_set_timeout_expiry+0x88>)
   222a2:	491a      	ldr	r1, [pc, #104]	; (2230c <z_set_timeout_expiry+0x8c>)
   222a4:	481a      	ldr	r0, [pc, #104]	; (22310 <z_set_timeout_expiry+0x90>)
   222a6:	f002 fd3a 	bl	24d1e <assert_print>
   222aa:	4916      	ldr	r1, [pc, #88]	; (22304 <z_set_timeout_expiry+0x84>)
   222ac:	4819      	ldr	r0, [pc, #100]	; (22314 <z_set_timeout_expiry+0x94>)
   222ae:	f002 fd36 	bl	24d1e <assert_print>
   222b2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222b4:	4814      	ldr	r0, [pc, #80]	; (22308 <z_set_timeout_expiry+0x88>)
   222b6:	f002 fd2b 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   222ba:	4812      	ldr	r0, [pc, #72]	; (22304 <z_set_timeout_expiry+0x84>)
   222bc:	f7fd fb1e 	bl	1f8fc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   222c0:	f7ff fe42 	bl	21f48 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   222c4:	2801      	cmp	r0, #1
   222c6:	dd07      	ble.n	222d8 <z_set_timeout_expiry+0x58>
   222c8:	42a0      	cmp	r0, r4
   222ca:	db05      	blt.n	222d8 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   222cc:	42a0      	cmp	r0, r4
   222ce:	4629      	mov	r1, r5
   222d0:	bfa8      	it	ge
   222d2:	4620      	movge	r0, r4
   222d4:	f7fa f8a4 	bl	1c420 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222d8:	480a      	ldr	r0, [pc, #40]	; (22304 <z_set_timeout_expiry+0x84>)
   222da:	f7fd fb01 	bl	1f8e0 <z_spin_unlock_valid>
   222de:	b958      	cbnz	r0, 222f8 <z_set_timeout_expiry+0x78>
   222e0:	23c2      	movs	r3, #194	; 0xc2
   222e2:	4a09      	ldr	r2, [pc, #36]	; (22308 <z_set_timeout_expiry+0x88>)
   222e4:	490c      	ldr	r1, [pc, #48]	; (22318 <z_set_timeout_expiry+0x98>)
   222e6:	480a      	ldr	r0, [pc, #40]	; (22310 <z_set_timeout_expiry+0x90>)
   222e8:	f002 fd19 	bl	24d1e <assert_print>
   222ec:	4905      	ldr	r1, [pc, #20]	; (22304 <z_set_timeout_expiry+0x84>)
   222ee:	480b      	ldr	r0, [pc, #44]	; (2231c <z_set_timeout_expiry+0x9c>)
   222f0:	f002 fd15 	bl	24d1e <assert_print>
   222f4:	21c2      	movs	r1, #194	; 0xc2
   222f6:	e7dd      	b.n	222b4 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   222f8:	f386 8811 	msr	BASEPRI, r6
   222fc:	f3bf 8f6f 	isb	sy
		}
	}
}
   22300:	bd70      	pop	{r4, r5, r6, pc}
   22302:	bf00      	nop
   22304:	20021554 	.word	0x20021554
   22308:	0002c4fc 	.word	0x0002c4fc
   2230c:	0002c555 	.word	0x0002c555
   22310:	0002b6e9 	.word	0x0002b6e9
   22314:	0002c56a 	.word	0x0002c56a
   22318:	0002c529 	.word	0x0002c529
   2231c:	0002c540 	.word	0x0002c540

00022320 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   22320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22324:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22326:	f7fe ff7d 	bl	21224 <z_time_slice>
	__asm__ volatile(
   2232a:	f04f 0320 	mov.w	r3, #32
   2232e:	f3ef 8711 	mrs	r7, BASEPRI
   22332:	f383 8812 	msr	BASEPRI_MAX, r3
   22336:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2233a:	483f      	ldr	r0, [pc, #252]	; (22438 <sys_clock_announce+0x118>)
   2233c:	f7fd fac2 	bl	1f8c4 <z_spin_lock_valid>
   22340:	b968      	cbnz	r0, 2235e <sys_clock_announce+0x3e>
   22342:	2394      	movs	r3, #148	; 0x94
   22344:	4a3d      	ldr	r2, [pc, #244]	; (2243c <sys_clock_announce+0x11c>)
   22346:	493e      	ldr	r1, [pc, #248]	; (22440 <sys_clock_announce+0x120>)
   22348:	483e      	ldr	r0, [pc, #248]	; (22444 <sys_clock_announce+0x124>)
   2234a:	f002 fce8 	bl	24d1e <assert_print>
   2234e:	493a      	ldr	r1, [pc, #232]	; (22438 <sys_clock_announce+0x118>)
   22350:	483d      	ldr	r0, [pc, #244]	; (22448 <sys_clock_announce+0x128>)
   22352:	f002 fce4 	bl	24d1e <assert_print>
   22356:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22358:	4838      	ldr	r0, [pc, #224]	; (2243c <sys_clock_announce+0x11c>)
   2235a:	f002 fcd9 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   2235e:	4836      	ldr	r0, [pc, #216]	; (22438 <sys_clock_announce+0x118>)
   22360:	f7fd facc 	bl	1f8fc <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   22364:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 2244c <sys_clock_announce+0x12c>
	return list->head == list;
   22368:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 22450 <sys_clock_announce+0x130>
   2236c:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   22370:	4a38      	ldr	r2, [pc, #224]	; (22454 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22372:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   22374:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   22378:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   2237c:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22380:	d00b      	beq.n	2239a <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22382:	b155      	cbz	r5, 2239a <sys_clock_announce+0x7a>
   22384:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   22388:	42b4      	cmp	r4, r6
   2238a:	eb71 0e00 	sbcs.w	lr, r1, r0
   2238e:	da1c      	bge.n	223ca <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22390:	1b36      	subs	r6, r6, r4
   22392:	eb60 0001 	sbc.w	r0, r0, r1
   22396:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   2239a:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   2239c:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   223a0:	eb4c 0101 	adc.w	r1, ip, r1
   223a4:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   223a8:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   223ac:	f7ff fdcc 	bl	21f48 <next_timeout>
   223b0:	4621      	mov	r1, r4
   223b2:	f7fa f835 	bl	1c420 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223b6:	4820      	ldr	r0, [pc, #128]	; (22438 <sys_clock_announce+0x118>)
   223b8:	f7fd fa92 	bl	1f8e0 <z_spin_unlock_valid>
   223bc:	b1a8      	cbz	r0, 223ea <sys_clock_announce+0xca>
	__asm__ volatile(
   223be:	f387 8811 	msr	BASEPRI, r7
   223c2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   223c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   223ca:	18f3      	adds	r3, r6, r3
   223cc:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   223d0:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   223d4:	2200      	movs	r2, #0
   223d6:	2300      	movs	r3, #0
		remove_timeout(t);
   223d8:	4628      	mov	r0, r5
		t->dticks = 0;
   223da:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   223de:	f7ff fddb 	bl	21f98 <remove_timeout>
   223e2:	4815      	ldr	r0, [pc, #84]	; (22438 <sys_clock_announce+0x118>)
   223e4:	f7fd fa7c 	bl	1f8e0 <z_spin_unlock_valid>
   223e8:	b958      	cbnz	r0, 22402 <sys_clock_announce+0xe2>
   223ea:	23c2      	movs	r3, #194	; 0xc2
   223ec:	4a13      	ldr	r2, [pc, #76]	; (2243c <sys_clock_announce+0x11c>)
   223ee:	491a      	ldr	r1, [pc, #104]	; (22458 <sys_clock_announce+0x138>)
   223f0:	4814      	ldr	r0, [pc, #80]	; (22444 <sys_clock_announce+0x124>)
   223f2:	f002 fc94 	bl	24d1e <assert_print>
   223f6:	4910      	ldr	r1, [pc, #64]	; (22438 <sys_clock_announce+0x118>)
   223f8:	4818      	ldr	r0, [pc, #96]	; (2245c <sys_clock_announce+0x13c>)
   223fa:	f002 fc90 	bl	24d1e <assert_print>
   223fe:	21c2      	movs	r1, #194	; 0xc2
   22400:	e7aa      	b.n	22358 <sys_clock_announce+0x38>
   22402:	f387 8811 	msr	BASEPRI, r7
   22406:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2240a:	4628      	mov	r0, r5
   2240c:	68ab      	ldr	r3, [r5, #8]
   2240e:	4798      	blx	r3
	__asm__ volatile(
   22410:	f04f 0320 	mov.w	r3, #32
   22414:	f3ef 8711 	mrs	r7, BASEPRI
   22418:	f383 8812 	msr	BASEPRI_MAX, r3
   2241c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22420:	4805      	ldr	r0, [pc, #20]	; (22438 <sys_clock_announce+0x118>)
   22422:	f7fd fa4f 	bl	1f8c4 <z_spin_lock_valid>
   22426:	2800      	cmp	r0, #0
   22428:	d08b      	beq.n	22342 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   2242a:	4803      	ldr	r0, [pc, #12]	; (22438 <sys_clock_announce+0x118>)
   2242c:	f7fd fa66 	bl	1f8fc <z_spin_lock_set_owner>
		announce_remaining -= dt;
   22430:	f8d8 4000 	ldr.w	r4, [r8]
   22434:	1ba4      	subs	r4, r4, r6
   22436:	e799      	b.n	2236c <sys_clock_announce+0x4c>
   22438:	20021554 	.word	0x20021554
   2243c:	0002c4fc 	.word	0x0002c4fc
   22440:	0002c555 	.word	0x0002c555
   22444:	0002b6e9 	.word	0x0002b6e9
   22448:	0002c56a 	.word	0x0002c56a
   2244c:	20021550 	.word	0x20021550
   22450:	20008734 	.word	0x20008734
   22454:	20009dc0 	.word	0x20009dc0
   22458:	0002c529 	.word	0x0002c529
   2245c:	0002c540 	.word	0x0002c540

00022460 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   22460:	b570      	push	{r4, r5, r6, lr}
   22462:	f04f 0320 	mov.w	r3, #32
   22466:	f3ef 8611 	mrs	r6, BASEPRI
   2246a:	f383 8812 	msr	BASEPRI_MAX, r3
   2246e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22472:	481a      	ldr	r0, [pc, #104]	; (224dc <sys_clock_tick_get+0x7c>)
   22474:	f7fd fa26 	bl	1f8c4 <z_spin_lock_valid>
   22478:	b968      	cbnz	r0, 22496 <sys_clock_tick_get+0x36>
   2247a:	2394      	movs	r3, #148	; 0x94
   2247c:	4a18      	ldr	r2, [pc, #96]	; (224e0 <sys_clock_tick_get+0x80>)
   2247e:	4919      	ldr	r1, [pc, #100]	; (224e4 <sys_clock_tick_get+0x84>)
   22480:	4819      	ldr	r0, [pc, #100]	; (224e8 <sys_clock_tick_get+0x88>)
   22482:	f002 fc4c 	bl	24d1e <assert_print>
   22486:	4915      	ldr	r1, [pc, #84]	; (224dc <sys_clock_tick_get+0x7c>)
   22488:	4818      	ldr	r0, [pc, #96]	; (224ec <sys_clock_tick_get+0x8c>)
   2248a:	f002 fc48 	bl	24d1e <assert_print>
   2248e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22490:	4813      	ldr	r0, [pc, #76]	; (224e0 <sys_clock_tick_get+0x80>)
   22492:	f002 fc3d 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   22496:	4811      	ldr	r0, [pc, #68]	; (224dc <sys_clock_tick_get+0x7c>)
   22498:	f7fd fa30 	bl	1f8fc <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2249c:	f7ff fd4a 	bl	21f34 <elapsed>
   224a0:	4a13      	ldr	r2, [pc, #76]	; (224f0 <sys_clock_tick_get+0x90>)
   224a2:	e9d2 4500 	ldrd	r4, r5, [r2]
   224a6:	1904      	adds	r4, r0, r4
   224a8:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224ac:	480b      	ldr	r0, [pc, #44]	; (224dc <sys_clock_tick_get+0x7c>)
   224ae:	f7fd fa17 	bl	1f8e0 <z_spin_unlock_valid>
   224b2:	b958      	cbnz	r0, 224cc <sys_clock_tick_get+0x6c>
   224b4:	23c2      	movs	r3, #194	; 0xc2
   224b6:	4a0a      	ldr	r2, [pc, #40]	; (224e0 <sys_clock_tick_get+0x80>)
   224b8:	490e      	ldr	r1, [pc, #56]	; (224f4 <sys_clock_tick_get+0x94>)
   224ba:	480b      	ldr	r0, [pc, #44]	; (224e8 <sys_clock_tick_get+0x88>)
   224bc:	f002 fc2f 	bl	24d1e <assert_print>
   224c0:	4906      	ldr	r1, [pc, #24]	; (224dc <sys_clock_tick_get+0x7c>)
   224c2:	480d      	ldr	r0, [pc, #52]	; (224f8 <sys_clock_tick_get+0x98>)
   224c4:	f002 fc2b 	bl	24d1e <assert_print>
   224c8:	21c2      	movs	r1, #194	; 0xc2
   224ca:	e7e1      	b.n	22490 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   224cc:	f386 8811 	msr	BASEPRI, r6
   224d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   224d4:	4620      	mov	r0, r4
   224d6:	4629      	mov	r1, r5
   224d8:	bd70      	pop	{r4, r5, r6, pc}
   224da:	bf00      	nop
   224dc:	20021554 	.word	0x20021554
   224e0:	0002c4fc 	.word	0x0002c4fc
   224e4:	0002c555 	.word	0x0002c555
   224e8:	0002b6e9 	.word	0x0002b6e9
   224ec:	0002c56a 	.word	0x0002c56a
   224f0:	20009dc0 	.word	0x20009dc0
   224f4:	0002c529 	.word	0x0002c529
   224f8:	0002c540 	.word	0x0002c540

000224fc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   224fc:	b570      	push	{r4, r5, r6, lr}
   224fe:	4604      	mov	r4, r0
	__asm__ volatile(
   22500:	f04f 0320 	mov.w	r3, #32
   22504:	f3ef 8511 	mrs	r5, BASEPRI
   22508:	f383 8812 	msr	BASEPRI_MAX, r3
   2250c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22510:	4849      	ldr	r0, [pc, #292]	; (22638 <z_timer_expiration_handler+0x13c>)
   22512:	f7fd f9d7 	bl	1f8c4 <z_spin_lock_valid>
   22516:	b968      	cbnz	r0, 22534 <z_timer_expiration_handler+0x38>
   22518:	2394      	movs	r3, #148	; 0x94
   2251a:	4a48      	ldr	r2, [pc, #288]	; (2263c <z_timer_expiration_handler+0x140>)
   2251c:	4948      	ldr	r1, [pc, #288]	; (22640 <z_timer_expiration_handler+0x144>)
   2251e:	4849      	ldr	r0, [pc, #292]	; (22644 <z_timer_expiration_handler+0x148>)
   22520:	f002 fbfd 	bl	24d1e <assert_print>
   22524:	4944      	ldr	r1, [pc, #272]	; (22638 <z_timer_expiration_handler+0x13c>)
   22526:	4848      	ldr	r0, [pc, #288]	; (22648 <z_timer_expiration_handler+0x14c>)
   22528:	f002 fbf9 	bl	24d1e <assert_print>
   2252c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2252e:	4843      	ldr	r0, [pc, #268]	; (2263c <z_timer_expiration_handler+0x140>)
   22530:	f002 fbee 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   22534:	4840      	ldr	r0, [pc, #256]	; (22638 <z_timer_expiration_handler+0x13c>)
   22536:	f7fd f9e1 	bl	1f8fc <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2253a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   2253e:	3301      	adds	r3, #1
   22540:	f142 0200 	adc.w	r2, r2, #0
   22544:	2b02      	cmp	r3, #2
   22546:	f172 0200 	sbcs.w	r2, r2, #0
   2254a:	d322      	bcc.n	22592 <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   2254c:	f007 f842 	bl	295d4 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   22550:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   22554:	3001      	adds	r0, #1
   22556:	f141 0100 	adc.w	r1, r1, #0
   2255a:	18c0      	adds	r0, r0, r3
   2255c:	eb41 0102 	adc.w	r1, r1, r2
   22560:	2801      	cmp	r0, #1
   22562:	f171 0100 	sbcs.w	r1, r1, #0
   22566:	db29      	blt.n	225bc <z_timer_expiration_handler+0xc0>
   22568:	f007 f834 	bl	295d4 <z_impl_k_uptime_ticks>
   2256c:	3001      	adds	r0, #1
   2256e:	f141 0300 	adc.w	r3, r1, #0
   22572:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   22576:	1880      	adds	r0, r0, r2
   22578:	f06f 0201 	mvn.w	r2, #1
   2257c:	eb43 0301 	adc.w	r3, r3, r1
   22580:	f04f 31ff 	mov.w	r1, #4294967295
   22584:	1a12      	subs	r2, r2, r0
   22586:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2258a:	4620      	mov	r0, r4
   2258c:	492f      	ldr	r1, [pc, #188]	; (2264c <z_timer_expiration_handler+0x150>)
   2258e:	f7ff fd1f 	bl	21fd0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   22592:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22594:	3301      	adds	r3, #1
   22596:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22598:	6a23      	ldr	r3, [r4, #32]
   2259a:	b35b      	cbz	r3, 225f4 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2259c:	4826      	ldr	r0, [pc, #152]	; (22638 <z_timer_expiration_handler+0x13c>)
   2259e:	f7fd f99f 	bl	1f8e0 <z_spin_unlock_valid>
   225a2:	b980      	cbnz	r0, 225c6 <z_timer_expiration_handler+0xca>
   225a4:	23c2      	movs	r3, #194	; 0xc2
   225a6:	4a25      	ldr	r2, [pc, #148]	; (2263c <z_timer_expiration_handler+0x140>)
   225a8:	4929      	ldr	r1, [pc, #164]	; (22650 <z_timer_expiration_handler+0x154>)
   225aa:	4826      	ldr	r0, [pc, #152]	; (22644 <z_timer_expiration_handler+0x148>)
   225ac:	f002 fbb7 	bl	24d1e <assert_print>
   225b0:	4921      	ldr	r1, [pc, #132]	; (22638 <z_timer_expiration_handler+0x13c>)
   225b2:	4828      	ldr	r0, [pc, #160]	; (22654 <z_timer_expiration_handler+0x158>)
   225b4:	f002 fbb3 	bl	24d1e <assert_print>
   225b8:	21c2      	movs	r1, #194	; 0xc2
   225ba:	e7b8      	b.n	2252e <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   225bc:	f06f 0201 	mvn.w	r2, #1
   225c0:	f04f 33ff 	mov.w	r3, #4294967295
   225c4:	e7e1      	b.n	2258a <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   225c6:	f385 8811 	msr	BASEPRI, r5
   225ca:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   225ce:	4620      	mov	r0, r4
   225d0:	6a23      	ldr	r3, [r4, #32]
   225d2:	4798      	blx	r3
	__asm__ volatile(
   225d4:	f04f 0320 	mov.w	r3, #32
   225d8:	f3ef 8511 	mrs	r5, BASEPRI
   225dc:	f383 8812 	msr	BASEPRI_MAX, r3
   225e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225e4:	4814      	ldr	r0, [pc, #80]	; (22638 <z_timer_expiration_handler+0x13c>)
   225e6:	f7fd f96d 	bl	1f8c4 <z_spin_lock_valid>
   225ea:	2800      	cmp	r0, #0
   225ec:	d094      	beq.n	22518 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   225ee:	4812      	ldr	r0, [pc, #72]	; (22638 <z_timer_expiration_handler+0x13c>)
   225f0:	f7fd f984 	bl	1f8fc <z_spin_lock_set_owner>
	return list->head == list;
   225f4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225f8:	42a6      	cmp	r6, r4
   225fa:	d000      	beq.n	225fe <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   225fc:	b94e      	cbnz	r6, 22612 <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225fe:	480e      	ldr	r0, [pc, #56]	; (22638 <z_timer_expiration_handler+0x13c>)
   22600:	f7fd f96e 	bl	1f8e0 <z_spin_unlock_valid>
   22604:	2800      	cmp	r0, #0
   22606:	d0cd      	beq.n	225a4 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   22608:	f385 8811 	msr	BASEPRI, r5
   2260c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   22610:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   22612:	4630      	mov	r0, r6
   22614:	f7fe fbda 	bl	20dcc <z_unpend_thread_no_timeout>
   22618:	2300      	movs	r3, #0
   2261a:	4807      	ldr	r0, [pc, #28]	; (22638 <z_timer_expiration_handler+0x13c>)
   2261c:	67f3      	str	r3, [r6, #124]	; 0x7c
   2261e:	f7fd f95f 	bl	1f8e0 <z_spin_unlock_valid>
   22622:	2800      	cmp	r0, #0
   22624:	d0be      	beq.n	225a4 <z_timer_expiration_handler+0xa8>
   22626:	f385 8811 	msr	BASEPRI, r5
   2262a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2262e:	4630      	mov	r0, r6
}
   22630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   22634:	f7fe bb84 	b.w	20d40 <z_ready_thread>
   22638:	20021558 	.word	0x20021558
   2263c:	0002c4fc 	.word	0x0002c4fc
   22640:	0002c555 	.word	0x0002c555
   22644:	0002b6e9 	.word	0x0002b6e9
   22648:	0002c56a 	.word	0x0002c56a
   2264c:	000224fd 	.word	0x000224fd
   22650:	0002c529 	.word	0x0002c529
   22654:	0002c540 	.word	0x0002c540

00022658 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22658:	f1b3 3fff 	cmp.w	r3, #4294967295
   2265c:	bf08      	it	eq
   2265e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22666:	4619      	mov	r1, r3
   22668:	4605      	mov	r5, r0
   2266a:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   2266e:	4614      	mov	r4, r2
   22670:	4691      	mov	r9, r2
   22672:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22674:	d037      	beq.n	226e6 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22676:	f1b0 3fff 	cmp.w	r0, #4294967295
   2267a:	bf08      	it	eq
   2267c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22680:	4637      	mov	r7, r6
   22682:	4682      	mov	sl, r0
   22684:	d011      	beq.n	226aa <z_impl_k_timer_start+0x52>
   22686:	ea50 0306 	orrs.w	r3, r0, r6
   2268a:	d00e      	beq.n	226aa <z_impl_k_timer_start+0x52>
   2268c:	1c72      	adds	r2, r6, #1
   2268e:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   22692:	db0a      	blt.n	226aa <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   22694:	2e02      	cmp	r6, #2
   22696:	4684      	mov	ip, r0
   22698:	f170 0000 	sbcs.w	r0, r0, #0
   2269c:	bfbc      	itt	lt
   2269e:	2702      	movlt	r7, #2
   226a0:	f04f 0c00 	movlt.w	ip, #0
   226a4:	3f01      	subs	r7, #1
   226a6:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   226aa:	1c63      	adds	r3, r4, #1
   226ac:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   226b0:	db0a      	blt.n	226c8 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   226b2:	2c01      	cmp	r4, #1
   226b4:	f171 0300 	sbcs.w	r3, r1, #0
   226b8:	4622      	mov	r2, r4
   226ba:	bfbc      	itt	lt
   226bc:	2201      	movlt	r2, #1
   226be:	2100      	movlt	r1, #0
   226c0:	f112 39ff 	adds.w	r9, r2, #4294967295
   226c4:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   226c8:	4628      	mov	r0, r5
   226ca:	f7ff fd47 	bl	2215c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   226ce:	2300      	movs	r3, #0
	timer->period = period;
   226d0:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   226d4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   226d6:	464a      	mov	r2, r9
   226d8:	4643      	mov	r3, r8
   226da:	4628      	mov	r0, r5
		     duration);
}
   226dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   226e0:	4902      	ldr	r1, [pc, #8]	; (226ec <z_impl_k_timer_start+0x94>)
   226e2:	f7ff bc75 	b.w	21fd0 <z_add_timeout>
}
   226e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   226ea:	bf00      	nop
   226ec:	000224fd 	.word	0x000224fd

000226f0 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   226f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   226f4:	2600      	movs	r6, #0
{
   226f6:	4688      	mov	r8, r1
   226f8:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   226fa:	4604      	mov	r4, r0
	int events_registered = 0;
   226fc:	4637      	mov	r7, r6
	event->poller = NULL;
   226fe:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22700:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 228c0 <register_events+0x1d0>
{
   22704:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   22706:	4546      	cmp	r6, r8
   22708:	db03      	blt.n	22712 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2270a:	4638      	mov	r0, r7
   2270c:	b003      	add	sp, #12
   2270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   22712:	f04f 0320 	mov.w	r3, #32
   22716:	f3ef 8b11 	mrs	fp, BASEPRI
   2271a:	f383 8812 	msr	BASEPRI_MAX, r3
   2271e:	f3bf 8f6f 	isb	sy
   22722:	4648      	mov	r0, r9
   22724:	f7fd f8ce 	bl	1f8c4 <z_spin_lock_valid>
   22728:	b960      	cbnz	r0, 22744 <register_events+0x54>
   2272a:	2394      	movs	r3, #148	; 0x94
   2272c:	4a65      	ldr	r2, [pc, #404]	; (228c4 <register_events+0x1d4>)
   2272e:	4966      	ldr	r1, [pc, #408]	; (228c8 <register_events+0x1d8>)
   22730:	4866      	ldr	r0, [pc, #408]	; (228cc <register_events+0x1dc>)
   22732:	f002 faf4 	bl	24d1e <assert_print>
   22736:	4962      	ldr	r1, [pc, #392]	; (228c0 <register_events+0x1d0>)
   22738:	4865      	ldr	r0, [pc, #404]	; (228d0 <register_events+0x1e0>)
   2273a:	f002 faf0 	bl	24d1e <assert_print>
   2273e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22740:	4860      	ldr	r0, [pc, #384]	; (228c4 <register_events+0x1d4>)
   22742:	e060      	b.n	22806 <register_events+0x116>
	z_spin_lock_set_owner(l);
   22744:	4648      	mov	r0, r9
   22746:	f7fd f8d9 	bl	1f8fc <z_spin_lock_set_owner>
	switch (event->type) {
   2274a:	7b63      	ldrb	r3, [r4, #13]
   2274c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22750:	2b08      	cmp	r3, #8
   22752:	d84a      	bhi.n	227ea <register_events+0xfa>
   22754:	e8df f003 	tbb	[pc, r3]
   22758:	49053d2b 	.word	0x49053d2b
   2275c:	49494927 	.word	0x49494927
   22760:	43          	.byte	0x43
   22761:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   22762:	6923      	ldr	r3, [r4, #16]
   22764:	689b      	ldr	r3, [r3, #8]
   22766:	b313      	cbz	r3, 227ae <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22768:	2302      	movs	r3, #2
	event->state |= state;
   2276a:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   2276c:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   22770:	f3c2 3186 	ubfx	r1, r2, #14, #7
   22774:	430b      	orrs	r3, r1
   22776:	f363 3294 	bfi	r2, r3, #14, #7
   2277a:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   2277c:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22780:	4648      	mov	r0, r9
   22782:	f7fd f8ad 	bl	1f8e0 <z_spin_unlock_valid>
   22786:	3414      	adds	r4, #20
   22788:	2800      	cmp	r0, #0
   2278a:	f040 8092 	bne.w	228b2 <register_events+0x1c2>
   2278e:	23c2      	movs	r3, #194	; 0xc2
   22790:	4a4c      	ldr	r2, [pc, #304]	; (228c4 <register_events+0x1d4>)
   22792:	4950      	ldr	r1, [pc, #320]	; (228d4 <register_events+0x1e4>)
   22794:	484d      	ldr	r0, [pc, #308]	; (228cc <register_events+0x1dc>)
   22796:	f002 fac2 	bl	24d1e <assert_print>
   2279a:	4949      	ldr	r1, [pc, #292]	; (228c0 <register_events+0x1d0>)
   2279c:	484e      	ldr	r0, [pc, #312]	; (228d8 <register_events+0x1e8>)
   2279e:	f002 fabe 	bl	24d1e <assert_print>
   227a2:	21c2      	movs	r1, #194	; 0xc2
   227a4:	e7cc      	b.n	22740 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   227a6:	6923      	ldr	r3, [r4, #16]
   227a8:	681b      	ldr	r3, [r3, #0]
   227aa:	2b00      	cmp	r3, #0
   227ac:	d12d      	bne.n	2280a <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   227ae:	9b01      	ldr	r3, [sp, #4]
   227b0:	2b00      	cmp	r3, #0
   227b2:	d1e5      	bne.n	22780 <register_events+0x90>
   227b4:	782b      	ldrb	r3, [r5, #0]
   227b6:	2b00      	cmp	r3, #0
   227b8:	d0e2      	beq.n	22780 <register_events+0x90>
	switch (event->type) {
   227ba:	7b63      	ldrb	r3, [r4, #13]
   227bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   227c0:	2b08      	cmp	r3, #8
   227c2:	d86b      	bhi.n	2289c <register_events+0x1ac>
   227c4:	e8df f003 	tbb	[pc, r3]
   227c8:	6a234935 	.word	0x6a234935
   227cc:	6a6a6a38 	.word	0x6a6a6a38
   227d0:	59          	.byte	0x59
   227d1:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   227d2:	6923      	ldr	r3, [r4, #16]
   227d4:	689b      	ldr	r3, [r3, #8]
   227d6:	2b00      	cmp	r3, #0
   227d8:	d0e9      	beq.n	227ae <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   227da:	2301      	movs	r3, #1
   227dc:	e7c5      	b.n	2276a <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   227de:	6923      	ldr	r3, [r4, #16]
   227e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   227e2:	2b00      	cmp	r3, #0
   227e4:	d0e3      	beq.n	227ae <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   227e6:	2310      	movs	r3, #16
   227e8:	e7bf      	b.n	2276a <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   227ea:	2363      	movs	r3, #99	; 0x63
   227ec:	4a3b      	ldr	r2, [pc, #236]	; (228dc <register_events+0x1ec>)
   227ee:	493c      	ldr	r1, [pc, #240]	; (228e0 <register_events+0x1f0>)
   227f0:	4836      	ldr	r0, [pc, #216]	; (228cc <register_events+0x1dc>)
   227f2:	f002 fa94 	bl	24d1e <assert_print>
   227f6:	7b61      	ldrb	r1, [r4, #13]
   227f8:	483a      	ldr	r0, [pc, #232]	; (228e4 <register_events+0x1f4>)
   227fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   227fe:	f002 fa8e 	bl	24d1e <assert_print>
   22802:	2163      	movs	r1, #99	; 0x63
   22804:	4835      	ldr	r0, [pc, #212]	; (228dc <register_events+0x1ec>)
   22806:	f002 fa83 	bl	24d10 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2280a:	2304      	movs	r3, #4
   2280c:	e7ad      	b.n	2276a <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2280e:	6920      	ldr	r0, [r4, #16]
   22810:	b950      	cbnz	r0, 22828 <register_events+0x138>
   22812:	4935      	ldr	r1, [pc, #212]	; (228e8 <register_events+0x1f8>)
   22814:	238d      	movs	r3, #141	; 0x8d
   22816:	4a31      	ldr	r2, [pc, #196]	; (228dc <register_events+0x1ec>)
   22818:	482c      	ldr	r0, [pc, #176]	; (228cc <register_events+0x1dc>)
   2281a:	f002 fa80 	bl	24d1e <assert_print>
   2281e:	4833      	ldr	r0, [pc, #204]	; (228ec <register_events+0x1fc>)
   22820:	f002 fa7d 	bl	24d1e <assert_print>
   22824:	218d      	movs	r1, #141	; 0x8d
   22826:	e7ed      	b.n	22804 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   22828:	462a      	mov	r2, r5
   2282a:	4621      	mov	r1, r4
   2282c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2282e:	f006 ff22 	bl	29676 <add_event>
	event->poller = poller;
   22832:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   22834:	3701      	adds	r7, #1
   22836:	e7a3      	b.n	22780 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22838:	6920      	ldr	r0, [r4, #16]
   2283a:	b950      	cbnz	r0, 22852 <register_events+0x162>
   2283c:	492c      	ldr	r1, [pc, #176]	; (228f0 <register_events+0x200>)
   2283e:	2391      	movs	r3, #145	; 0x91
   22840:	4a26      	ldr	r2, [pc, #152]	; (228dc <register_events+0x1ec>)
   22842:	4822      	ldr	r0, [pc, #136]	; (228cc <register_events+0x1dc>)
   22844:	f002 fa6b 	bl	24d1e <assert_print>
   22848:	482a      	ldr	r0, [pc, #168]	; (228f4 <register_events+0x204>)
   2284a:	f002 fa68 	bl	24d1e <assert_print>
   2284e:	2191      	movs	r1, #145	; 0x91
   22850:	e7d8      	b.n	22804 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   22852:	462a      	mov	r2, r5
   22854:	4621      	mov	r1, r4
   22856:	3014      	adds	r0, #20
   22858:	e7e9      	b.n	2282e <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2285a:	6920      	ldr	r0, [r4, #16]
   2285c:	b950      	cbnz	r0, 22874 <register_events+0x184>
   2285e:	4926      	ldr	r1, [pc, #152]	; (228f8 <register_events+0x208>)
   22860:	2395      	movs	r3, #149	; 0x95
   22862:	4a1e      	ldr	r2, [pc, #120]	; (228dc <register_events+0x1ec>)
   22864:	4819      	ldr	r0, [pc, #100]	; (228cc <register_events+0x1dc>)
   22866:	f002 fa5a 	bl	24d1e <assert_print>
   2286a:	4824      	ldr	r0, [pc, #144]	; (228fc <register_events+0x20c>)
   2286c:	f002 fa57 	bl	24d1e <assert_print>
   22870:	2195      	movs	r1, #149	; 0x95
   22872:	e7c7      	b.n	22804 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   22874:	462a      	mov	r2, r5
   22876:	4621      	mov	r1, r4
   22878:	e7d9      	b.n	2282e <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2287a:	6920      	ldr	r0, [r4, #16]
   2287c:	b950      	cbnz	r0, 22894 <register_events+0x1a4>
   2287e:	4920      	ldr	r1, [pc, #128]	; (22900 <register_events+0x210>)
   22880:	2399      	movs	r3, #153	; 0x99
   22882:	4a16      	ldr	r2, [pc, #88]	; (228dc <register_events+0x1ec>)
   22884:	4811      	ldr	r0, [pc, #68]	; (228cc <register_events+0x1dc>)
   22886:	f002 fa4a 	bl	24d1e <assert_print>
   2288a:	481e      	ldr	r0, [pc, #120]	; (22904 <register_events+0x214>)
   2288c:	f002 fa47 	bl	24d1e <assert_print>
   22890:	2199      	movs	r1, #153	; 0x99
   22892:	e7b7      	b.n	22804 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   22894:	462a      	mov	r2, r5
   22896:	4621      	mov	r1, r4
   22898:	3028      	adds	r0, #40	; 0x28
   2289a:	e7c8      	b.n	2282e <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   2289c:	4910      	ldr	r1, [pc, #64]	; (228e0 <register_events+0x1f0>)
   2289e:	23a6      	movs	r3, #166	; 0xa6
   228a0:	4a0e      	ldr	r2, [pc, #56]	; (228dc <register_events+0x1ec>)
   228a2:	480a      	ldr	r0, [pc, #40]	; (228cc <register_events+0x1dc>)
   228a4:	f002 fa3b 	bl	24d1e <assert_print>
   228a8:	4817      	ldr	r0, [pc, #92]	; (22908 <register_events+0x218>)
   228aa:	f002 fa38 	bl	24d1e <assert_print>
   228ae:	21a6      	movs	r1, #166	; 0xa6
   228b0:	e7a8      	b.n	22804 <register_events+0x114>
	__asm__ volatile(
   228b2:	f38b 8811 	msr	BASEPRI, fp
   228b6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   228ba:	3601      	adds	r6, #1
   228bc:	e723      	b.n	22706 <register_events+0x16>
   228be:	bf00      	nop
   228c0:	2002155c 	.word	0x2002155c
   228c4:	0002c4fc 	.word	0x0002c4fc
   228c8:	0002c555 	.word	0x0002c555
   228cc:	0002b6e9 	.word	0x0002b6e9
   228d0:	0002c56a 	.word	0x0002c56a
   228d4:	0002c529 	.word	0x0002c529
   228d8:	0002c540 	.word	0x0002c540
   228dc:	00030ca5 	.word	0x00030ca5
   228e0:	00030f5f 	.word	0x00030f5f
   228e4:	00030cc6 	.word	0x00030cc6
   228e8:	00030ce3 	.word	0x00030ce3
   228ec:	00030cfd 	.word	0x00030cfd
   228f0:	00030d12 	.word	0x00030d12
   228f4:	00030d2e 	.word	0x00030d2e
   228f8:	00030d3f 	.word	0x00030d3f
   228fc:	00030d5c 	.word	0x00030d5c
   22900:	00030d73 	.word	0x00030d73
   22904:	00030d8e 	.word	0x00030d8e
   22908:	00030da7 	.word	0x00030da7

0002290c <clear_event_registrations>:
{
   2290c:	2314      	movs	r3, #20
   2290e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22912:	4615      	mov	r5, r2
	while (num_events--) {
   22914:	460c      	mov	r4, r1
	event->poller = NULL;
   22916:	2600      	movs	r6, #0
   22918:	fb03 0001 	mla	r0, r3, r1, r0
   2291c:	4f4b      	ldr	r7, [pc, #300]	; (22a4c <clear_event_registrations+0x140>)
	while (num_events--) {
   2291e:	b90c      	cbnz	r4, 22924 <clear_event_registrations+0x18>
}
   22920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   22924:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   22928:	f1a0 0814 	sub.w	r8, r0, #20
   2292c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   22930:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   22934:	2b08      	cmp	r3, #8
   22936:	d842      	bhi.n	229be <clear_event_registrations+0xb2>
   22938:	e8df f003 	tbb	[pc, r3]
   2293c:	41052555 	.word	0x41052555
   22940:	41414116 	.word	0x41414116
   22944:	33          	.byte	0x33
   22945:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22946:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2294a:	2b00      	cmp	r3, #0
   2294c:	d142      	bne.n	229d4 <clear_event_registrations+0xc8>
   2294e:	4940      	ldr	r1, [pc, #256]	; (22a50 <clear_event_registrations+0x144>)
   22950:	23b6      	movs	r3, #182	; 0xb6
   22952:	4a40      	ldr	r2, [pc, #256]	; (22a54 <clear_event_registrations+0x148>)
   22954:	4840      	ldr	r0, [pc, #256]	; (22a58 <clear_event_registrations+0x14c>)
   22956:	f002 f9e2 	bl	24d1e <assert_print>
   2295a:	4840      	ldr	r0, [pc, #256]	; (22a5c <clear_event_registrations+0x150>)
   2295c:	f002 f9df 	bl	24d1e <assert_print>
   22960:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22962:	483c      	ldr	r0, [pc, #240]	; (22a54 <clear_event_registrations+0x148>)
   22964:	f002 f9d4 	bl	24d10 <assert_post_action>
   22968:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2296c:	2b00      	cmp	r3, #0
   2296e:	d131      	bne.n	229d4 <clear_event_registrations+0xc8>
   22970:	493b      	ldr	r1, [pc, #236]	; (22a60 <clear_event_registrations+0x154>)
   22972:	23ba      	movs	r3, #186	; 0xba
   22974:	4a37      	ldr	r2, [pc, #220]	; (22a54 <clear_event_registrations+0x148>)
   22976:	4838      	ldr	r0, [pc, #224]	; (22a58 <clear_event_registrations+0x14c>)
   22978:	f002 f9d1 	bl	24d1e <assert_print>
   2297c:	4839      	ldr	r0, [pc, #228]	; (22a64 <clear_event_registrations+0x158>)
   2297e:	f002 f9ce 	bl	24d1e <assert_print>
   22982:	21ba      	movs	r1, #186	; 0xba
   22984:	e7ed      	b.n	22962 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22986:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2298a:	bb1b      	cbnz	r3, 229d4 <clear_event_registrations+0xc8>
   2298c:	4936      	ldr	r1, [pc, #216]	; (22a68 <clear_event_registrations+0x15c>)
   2298e:	23be      	movs	r3, #190	; 0xbe
   22990:	4a30      	ldr	r2, [pc, #192]	; (22a54 <clear_event_registrations+0x148>)
   22992:	4831      	ldr	r0, [pc, #196]	; (22a58 <clear_event_registrations+0x14c>)
   22994:	f002 f9c3 	bl	24d1e <assert_print>
   22998:	4834      	ldr	r0, [pc, #208]	; (22a6c <clear_event_registrations+0x160>)
   2299a:	f002 f9c0 	bl	24d1e <assert_print>
   2299e:	21be      	movs	r1, #190	; 0xbe
   229a0:	e7df      	b.n	22962 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   229a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   229a6:	b9ab      	cbnz	r3, 229d4 <clear_event_registrations+0xc8>
   229a8:	4931      	ldr	r1, [pc, #196]	; (22a70 <clear_event_registrations+0x164>)
   229aa:	23c2      	movs	r3, #194	; 0xc2
   229ac:	4a29      	ldr	r2, [pc, #164]	; (22a54 <clear_event_registrations+0x148>)
   229ae:	482a      	ldr	r0, [pc, #168]	; (22a58 <clear_event_registrations+0x14c>)
   229b0:	f002 f9b5 	bl	24d1e <assert_print>
   229b4:	482f      	ldr	r0, [pc, #188]	; (22a74 <clear_event_registrations+0x168>)
   229b6:	f002 f9b2 	bl	24d1e <assert_print>
   229ba:	21c2      	movs	r1, #194	; 0xc2
   229bc:	e7d1      	b.n	22962 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   229be:	492e      	ldr	r1, [pc, #184]	; (22a78 <clear_event_registrations+0x16c>)
   229c0:	23cf      	movs	r3, #207	; 0xcf
   229c2:	4a24      	ldr	r2, [pc, #144]	; (22a54 <clear_event_registrations+0x148>)
   229c4:	4824      	ldr	r0, [pc, #144]	; (22a58 <clear_event_registrations+0x14c>)
   229c6:	f002 f9aa 	bl	24d1e <assert_print>
   229ca:	482c      	ldr	r0, [pc, #176]	; (22a7c <clear_event_registrations+0x170>)
   229cc:	f002 f9a7 	bl	24d1e <assert_print>
   229d0:	21cf      	movs	r1, #207	; 0xcf
   229d2:	e7c6      	b.n	22962 <clear_event_registrations+0x56>
	return node->next != NULL;
   229d4:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   229d8:	b12b      	cbz	r3, 229e6 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   229da:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   229de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   229e0:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   229e2:	e940 6605 	strd	r6, r6, [r0, #-20]
   229e6:	4638      	mov	r0, r7
   229e8:	f7fc ff7a 	bl	1f8e0 <z_spin_unlock_valid>
   229ec:	b960      	cbnz	r0, 22a08 <clear_event_registrations+0xfc>
   229ee:	23c2      	movs	r3, #194	; 0xc2
   229f0:	4a23      	ldr	r2, [pc, #140]	; (22a80 <clear_event_registrations+0x174>)
   229f2:	4924      	ldr	r1, [pc, #144]	; (22a84 <clear_event_registrations+0x178>)
   229f4:	4818      	ldr	r0, [pc, #96]	; (22a58 <clear_event_registrations+0x14c>)
   229f6:	f002 f992 	bl	24d1e <assert_print>
   229fa:	4914      	ldr	r1, [pc, #80]	; (22a4c <clear_event_registrations+0x140>)
   229fc:	4822      	ldr	r0, [pc, #136]	; (22a88 <clear_event_registrations+0x17c>)
   229fe:	f002 f98e 	bl	24d1e <assert_print>
   22a02:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a04:	481e      	ldr	r0, [pc, #120]	; (22a80 <clear_event_registrations+0x174>)
   22a06:	e7ad      	b.n	22964 <clear_event_registrations+0x58>
   22a08:	f385 8811 	msr	BASEPRI, r5
   22a0c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22a10:	f04f 0320 	mov.w	r3, #32
   22a14:	f3ef 8511 	mrs	r5, BASEPRI
   22a18:	f383 8812 	msr	BASEPRI_MAX, r3
   22a1c:	f3bf 8f6f 	isb	sy
   22a20:	4638      	mov	r0, r7
   22a22:	f7fc ff4f 	bl	1f8c4 <z_spin_lock_valid>
   22a26:	3c01      	subs	r4, #1
   22a28:	b958      	cbnz	r0, 22a42 <clear_event_registrations+0x136>
   22a2a:	2394      	movs	r3, #148	; 0x94
   22a2c:	4a14      	ldr	r2, [pc, #80]	; (22a80 <clear_event_registrations+0x174>)
   22a2e:	4917      	ldr	r1, [pc, #92]	; (22a8c <clear_event_registrations+0x180>)
   22a30:	4809      	ldr	r0, [pc, #36]	; (22a58 <clear_event_registrations+0x14c>)
   22a32:	f002 f974 	bl	24d1e <assert_print>
   22a36:	4905      	ldr	r1, [pc, #20]	; (22a4c <clear_event_registrations+0x140>)
   22a38:	4815      	ldr	r0, [pc, #84]	; (22a90 <clear_event_registrations+0x184>)
   22a3a:	f002 f970 	bl	24d1e <assert_print>
   22a3e:	2194      	movs	r1, #148	; 0x94
   22a40:	e7e0      	b.n	22a04 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   22a42:	4638      	mov	r0, r7
   22a44:	f7fc ff5a 	bl	1f8fc <z_spin_lock_set_owner>
	return k;
   22a48:	4640      	mov	r0, r8
   22a4a:	e768      	b.n	2291e <clear_event_registrations+0x12>
   22a4c:	2002155c 	.word	0x2002155c
   22a50:	00030ce3 	.word	0x00030ce3
   22a54:	00030ca5 	.word	0x00030ca5
   22a58:	0002b6e9 	.word	0x0002b6e9
   22a5c:	00030cfd 	.word	0x00030cfd
   22a60:	00030d12 	.word	0x00030d12
   22a64:	00030d2e 	.word	0x00030d2e
   22a68:	00030d3f 	.word	0x00030d3f
   22a6c:	00030d5c 	.word	0x00030d5c
   22a70:	00030d73 	.word	0x00030d73
   22a74:	00030d8e 	.word	0x00030d8e
   22a78:	00030f5f 	.word	0x00030f5f
   22a7c:	00030da7 	.word	0x00030da7
   22a80:	0002c4fc 	.word	0x0002c4fc
   22a84:	0002c529 	.word	0x0002c529
   22a88:	0002c540 	.word	0x0002c540
   22a8c:	0002c555 	.word	0x0002c555
   22a90:	0002c56a 	.word	0x0002c56a

00022a94 <k_poll_event_init>:
{
   22a94:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   22a96:	b162      	cbz	r2, 22ab2 <k_poll_event_init+0x1e>
   22a98:	4917      	ldr	r1, [pc, #92]	; (22af8 <k_poll_event_init+0x64>)
   22a9a:	232d      	movs	r3, #45	; 0x2d
   22a9c:	4a17      	ldr	r2, [pc, #92]	; (22afc <k_poll_event_init+0x68>)
   22a9e:	4818      	ldr	r0, [pc, #96]	; (22b00 <k_poll_event_init+0x6c>)
   22aa0:	f002 f93d 	bl	24d1e <assert_print>
   22aa4:	4817      	ldr	r0, [pc, #92]	; (22b04 <k_poll_event_init+0x70>)
   22aa6:	f002 f93a 	bl	24d1e <assert_print>
   22aaa:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22aac:	4813      	ldr	r0, [pc, #76]	; (22afc <k_poll_event_init+0x68>)
   22aae:	f002 f92f 	bl	24d10 <assert_post_action>
   22ab2:	293f      	cmp	r1, #63	; 0x3f
   22ab4:	d90a      	bls.n	22acc <k_poll_event_init+0x38>
   22ab6:	4914      	ldr	r1, [pc, #80]	; (22b08 <k_poll_event_init+0x74>)
   22ab8:	232f      	movs	r3, #47	; 0x2f
   22aba:	4a10      	ldr	r2, [pc, #64]	; (22afc <k_poll_event_init+0x68>)
   22abc:	4810      	ldr	r0, [pc, #64]	; (22b00 <k_poll_event_init+0x6c>)
   22abe:	f002 f92e 	bl	24d1e <assert_print>
   22ac2:	4812      	ldr	r0, [pc, #72]	; (22b0c <k_poll_event_init+0x78>)
   22ac4:	f002 f92b 	bl	24d1e <assert_print>
   22ac8:	212f      	movs	r1, #47	; 0x2f
   22aca:	e7ef      	b.n	22aac <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   22acc:	b953      	cbnz	r3, 22ae4 <k_poll_event_init+0x50>
   22ace:	4910      	ldr	r1, [pc, #64]	; (22b10 <k_poll_event_init+0x7c>)
   22ad0:	2330      	movs	r3, #48	; 0x30
   22ad2:	4a0a      	ldr	r2, [pc, #40]	; (22afc <k_poll_event_init+0x68>)
   22ad4:	480a      	ldr	r0, [pc, #40]	; (22b00 <k_poll_event_init+0x6c>)
   22ad6:	f002 f922 	bl	24d1e <assert_print>
   22ada:	480e      	ldr	r0, [pc, #56]	; (22b14 <k_poll_event_init+0x80>)
   22adc:	f002 f91f 	bl	24d1e <assert_print>
   22ae0:	2130      	movs	r1, #48	; 0x30
   22ae2:	e7e3      	b.n	22aac <k_poll_event_init+0x18>
	event->poller = NULL;
   22ae4:	6082      	str	r2, [r0, #8]
	event->type = type;
   22ae6:	0209      	lsls	r1, r1, #8
   22ae8:	7b02      	ldrb	r2, [r0, #12]
   22aea:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   22aee:	4311      	orrs	r1, r2
	event->obj = obj;
   22af0:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   22af4:	bd08      	pop	{r3, pc}
   22af6:	bf00      	nop
   22af8:	00030dbd 	.word	0x00030dbd
   22afc:	00030ca5 	.word	0x00030ca5
   22b00:	0002b6e9 	.word	0x0002b6e9
   22b04:	00030ddd 	.word	0x00030ddd
   22b08:	00030e03 	.word	0x00030e03
   22b0c:	00030e27 	.word	0x00030e27
   22b10:	00030e37 	.word	0x00030e37
   22b14:	00030e4a 	.word	0x00030e4a

00022b18 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b1c:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   22b1e:	4b5c      	ldr	r3, [pc, #368]	; (22c90 <z_impl_k_poll+0x178>)
{
   22b20:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   22b22:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   22b26:	2301      	movs	r3, #1
{
   22b28:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   22b2a:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   22b2e:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   22b32:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   22b36:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   22b3a:	f1bb 0f00 	cmp.w	fp, #0
   22b3e:	d00e      	beq.n	22b5e <z_impl_k_poll+0x46>
   22b40:	4954      	ldr	r1, [pc, #336]	; (22c94 <z_impl_k_poll+0x17c>)
   22b42:	f240 132d 	movw	r3, #301	; 0x12d
   22b46:	4a54      	ldr	r2, [pc, #336]	; (22c98 <z_impl_k_poll+0x180>)
   22b48:	4854      	ldr	r0, [pc, #336]	; (22c9c <z_impl_k_poll+0x184>)
   22b4a:	f002 f8e8 	bl	24d1e <assert_print>
   22b4e:	4854      	ldr	r0, [pc, #336]	; (22ca0 <z_impl_k_poll+0x188>)
   22b50:	f002 f8e5 	bl	24d1e <assert_print>
   22b54:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   22b58:	484f      	ldr	r0, [pc, #316]	; (22c98 <z_impl_k_poll+0x180>)
   22b5a:	f002 f8d9 	bl	24d10 <assert_post_action>
   22b5e:	b960      	cbnz	r0, 22b7a <z_impl_k_poll+0x62>
   22b60:	4950      	ldr	r1, [pc, #320]	; (22ca4 <z_impl_k_poll+0x18c>)
   22b62:	f44f 7397 	mov.w	r3, #302	; 0x12e
   22b66:	4a4c      	ldr	r2, [pc, #304]	; (22c98 <z_impl_k_poll+0x180>)
   22b68:	484c      	ldr	r0, [pc, #304]	; (22c9c <z_impl_k_poll+0x184>)
   22b6a:	f002 f8d8 	bl	24d1e <assert_print>
   22b6e:	484e      	ldr	r0, [pc, #312]	; (22ca8 <z_impl_k_poll+0x190>)
   22b70:	f002 f8d5 	bl	24d1e <assert_print>
   22b74:	f44f 7197 	mov.w	r1, #302	; 0x12e
   22b78:	e7ee      	b.n	22b58 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   22b7a:	2900      	cmp	r1, #0
   22b7c:	da0c      	bge.n	22b98 <z_impl_k_poll+0x80>
   22b7e:	494b      	ldr	r1, [pc, #300]	; (22cac <z_impl_k_poll+0x194>)
   22b80:	f240 132f 	movw	r3, #303	; 0x12f
   22b84:	4a44      	ldr	r2, [pc, #272]	; (22c98 <z_impl_k_poll+0x180>)
   22b86:	4845      	ldr	r0, [pc, #276]	; (22c9c <z_impl_k_poll+0x184>)
   22b88:	f002 f8c9 	bl	24d1e <assert_print>
   22b8c:	4848      	ldr	r0, [pc, #288]	; (22cb0 <z_impl_k_poll+0x198>)
   22b8e:	f002 f8c6 	bl	24d1e <assert_print>
   22b92:	f240 112f 	movw	r1, #303	; 0x12f
   22b96:	e7df      	b.n	22b58 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22b98:	ea57 0306 	orrs.w	r3, r7, r6
   22b9c:	bf0c      	ite	eq
   22b9e:	2301      	moveq	r3, #1
   22ba0:	2300      	movne	r3, #0
   22ba2:	f7ff fda5 	bl	226f0 <register_events>
   22ba6:	4681      	mov	r9, r0
   22ba8:	f04f 0320 	mov.w	r3, #32
   22bac:	f3ef 8a11 	mrs	sl, BASEPRI
   22bb0:	f383 8812 	msr	BASEPRI_MAX, r3
   22bb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bb8:	483e      	ldr	r0, [pc, #248]	; (22cb4 <z_impl_k_poll+0x19c>)
   22bba:	f7fc fe83 	bl	1f8c4 <z_spin_lock_valid>
   22bbe:	b960      	cbnz	r0, 22bda <z_impl_k_poll+0xc2>
   22bc0:	2394      	movs	r3, #148	; 0x94
   22bc2:	4a3d      	ldr	r2, [pc, #244]	; (22cb8 <z_impl_k_poll+0x1a0>)
   22bc4:	493d      	ldr	r1, [pc, #244]	; (22cbc <z_impl_k_poll+0x1a4>)
   22bc6:	4835      	ldr	r0, [pc, #212]	; (22c9c <z_impl_k_poll+0x184>)
   22bc8:	f002 f8a9 	bl	24d1e <assert_print>
   22bcc:	4939      	ldr	r1, [pc, #228]	; (22cb4 <z_impl_k_poll+0x19c>)
   22bce:	483c      	ldr	r0, [pc, #240]	; (22cc0 <z_impl_k_poll+0x1a8>)
   22bd0:	f002 f8a5 	bl	24d1e <assert_print>
   22bd4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bd6:	4838      	ldr	r0, [pc, #224]	; (22cb8 <z_impl_k_poll+0x1a0>)
   22bd8:	e7bf      	b.n	22b5a <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   22bda:	4836      	ldr	r0, [pc, #216]	; (22cb4 <z_impl_k_poll+0x19c>)
   22bdc:	f7fc fe8e 	bl	1f8fc <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22be0:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   22be4:	b9e4      	cbnz	r4, 22c20 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   22be6:	4628      	mov	r0, r5
   22be8:	4652      	mov	r2, sl
   22bea:	4649      	mov	r1, r9
   22bec:	f7ff fe8e 	bl	2290c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bf0:	4830      	ldr	r0, [pc, #192]	; (22cb4 <z_impl_k_poll+0x19c>)
   22bf2:	f7fc fe75 	bl	1f8e0 <z_spin_unlock_valid>
   22bf6:	b958      	cbnz	r0, 22c10 <z_impl_k_poll+0xf8>
   22bf8:	23c2      	movs	r3, #194	; 0xc2
   22bfa:	4a2f      	ldr	r2, [pc, #188]	; (22cb8 <z_impl_k_poll+0x1a0>)
   22bfc:	4931      	ldr	r1, [pc, #196]	; (22cc4 <z_impl_k_poll+0x1ac>)
   22bfe:	4827      	ldr	r0, [pc, #156]	; (22c9c <z_impl_k_poll+0x184>)
   22c00:	f002 f88d 	bl	24d1e <assert_print>
   22c04:	492b      	ldr	r1, [pc, #172]	; (22cb4 <z_impl_k_poll+0x19c>)
   22c06:	4830      	ldr	r0, [pc, #192]	; (22cc8 <z_impl_k_poll+0x1b0>)
   22c08:	f002 f889 	bl	24d1e <assert_print>
   22c0c:	21c2      	movs	r1, #194	; 0xc2
   22c0e:	e7e2      	b.n	22bd6 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   22c10:	f38a 8811 	msr	BASEPRI, sl
   22c14:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22c18:	4620      	mov	r0, r4
   22c1a:	b003      	add	sp, #12
   22c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22c20:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   22c24:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22c28:	d10b      	bne.n	22c42 <z_impl_k_poll+0x12a>
   22c2a:	4822      	ldr	r0, [pc, #136]	; (22cb4 <z_impl_k_poll+0x19c>)
   22c2c:	f7fc fe58 	bl	1f8e0 <z_spin_unlock_valid>
   22c30:	2800      	cmp	r0, #0
   22c32:	d0e1      	beq.n	22bf8 <z_impl_k_poll+0xe0>
   22c34:	f38a 8811 	msr	BASEPRI, sl
   22c38:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22c3c:	f06f 040a 	mvn.w	r4, #10
   22c40:	e7ea      	b.n	22c18 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22c42:	4651      	mov	r1, sl
   22c44:	e9cd 7600 	strd	r7, r6, [sp]
   22c48:	4a20      	ldr	r2, [pc, #128]	; (22ccc <z_impl_k_poll+0x1b4>)
   22c4a:	481a      	ldr	r0, [pc, #104]	; (22cb4 <z_impl_k_poll+0x19c>)
   22c4c:	f7fe fbd2 	bl	213f4 <z_pend_curr>
   22c50:	4604      	mov	r4, r0
	__asm__ volatile(
   22c52:	f04f 0320 	mov.w	r3, #32
   22c56:	f3ef 8611 	mrs	r6, BASEPRI
   22c5a:	f383 8812 	msr	BASEPRI_MAX, r3
   22c5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c62:	4814      	ldr	r0, [pc, #80]	; (22cb4 <z_impl_k_poll+0x19c>)
   22c64:	f7fc fe2e 	bl	1f8c4 <z_spin_lock_valid>
   22c68:	2800      	cmp	r0, #0
   22c6a:	d0a9      	beq.n	22bc0 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   22c6c:	4811      	ldr	r0, [pc, #68]	; (22cb4 <z_impl_k_poll+0x19c>)
   22c6e:	f7fc fe45 	bl	1f8fc <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   22c72:	4628      	mov	r0, r5
   22c74:	4632      	mov	r2, r6
   22c76:	4649      	mov	r1, r9
   22c78:	f7ff fe48 	bl	2290c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c7c:	480d      	ldr	r0, [pc, #52]	; (22cb4 <z_impl_k_poll+0x19c>)
   22c7e:	f7fc fe2f 	bl	1f8e0 <z_spin_unlock_valid>
   22c82:	2800      	cmp	r0, #0
   22c84:	d0b8      	beq.n	22bf8 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   22c86:	f386 8811 	msr	BASEPRI, r6
   22c8a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22c8e:	e7c3      	b.n	22c18 <z_impl_k_poll+0x100>
   22c90:	20021504 	.word	0x20021504
   22c94:	0003082e 	.word	0x0003082e
   22c98:	00030ca5 	.word	0x00030ca5
   22c9c:	0002b6e9 	.word	0x0002b6e9
   22ca0:	0002f302 	.word	0x0002f302
   22ca4:	00030e64 	.word	0x00030e64
   22ca8:	00030e7a 	.word	0x00030e7a
   22cac:	00030e89 	.word	0x00030e89
   22cb0:	00030e99 	.word	0x00030e99
   22cb4:	2002155c 	.word	0x2002155c
   22cb8:	0002c4fc 	.word	0x0002c4fc
   22cbc:	0002c555 	.word	0x0002c555
   22cc0:	0002c56a 	.word	0x0002c56a
   22cc4:	0002c529 	.word	0x0002c529
   22cc8:	0002c540 	.word	0x0002c540
   22ccc:	2000873c 	.word	0x2000873c

00022cd0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22cd0:	b570      	push	{r4, r5, r6, lr}
   22cd2:	4604      	mov	r4, r0
   22cd4:	460d      	mov	r5, r1
	__asm__ volatile(
   22cd6:	f04f 0320 	mov.w	r3, #32
   22cda:	f3ef 8611 	mrs	r6, BASEPRI
   22cde:	f383 8812 	msr	BASEPRI_MAX, r3
   22ce2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ce6:	4820      	ldr	r0, [pc, #128]	; (22d68 <z_impl_k_poll_signal_raise+0x98>)
   22ce8:	f7fc fdec 	bl	1f8c4 <z_spin_lock_valid>
   22cec:	b968      	cbnz	r0, 22d0a <z_impl_k_poll_signal_raise+0x3a>
   22cee:	2394      	movs	r3, #148	; 0x94
   22cf0:	4a1e      	ldr	r2, [pc, #120]	; (22d6c <z_impl_k_poll_signal_raise+0x9c>)
   22cf2:	491f      	ldr	r1, [pc, #124]	; (22d70 <z_impl_k_poll_signal_raise+0xa0>)
   22cf4:	481f      	ldr	r0, [pc, #124]	; (22d74 <z_impl_k_poll_signal_raise+0xa4>)
   22cf6:	f002 f812 	bl	24d1e <assert_print>
   22cfa:	491b      	ldr	r1, [pc, #108]	; (22d68 <z_impl_k_poll_signal_raise+0x98>)
   22cfc:	481e      	ldr	r0, [pc, #120]	; (22d78 <z_impl_k_poll_signal_raise+0xa8>)
   22cfe:	f002 f80e 	bl	24d1e <assert_print>
   22d02:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d04:	4819      	ldr	r0, [pc, #100]	; (22d6c <z_impl_k_poll_signal_raise+0x9c>)
   22d06:	f002 f803 	bl	24d10 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d0a:	4817      	ldr	r0, [pc, #92]	; (22d68 <z_impl_k_poll_signal_raise+0x98>)
   22d0c:	f7fc fdf6 	bl	1f8fc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   22d10:	2101      	movs	r1, #1
	return list->head == list;
   22d12:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   22d14:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22d16:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   22d18:	60a1      	str	r1, [r4, #8]
   22d1a:	d10f      	bne.n	22d3c <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d1c:	4812      	ldr	r0, [pc, #72]	; (22d68 <z_impl_k_poll_signal_raise+0x98>)
   22d1e:	f7fc fddf 	bl	1f8e0 <z_spin_unlock_valid>
   22d22:	b9d8      	cbnz	r0, 22d5c <z_impl_k_poll_signal_raise+0x8c>
   22d24:	23c2      	movs	r3, #194	; 0xc2
   22d26:	4a11      	ldr	r2, [pc, #68]	; (22d6c <z_impl_k_poll_signal_raise+0x9c>)
   22d28:	4914      	ldr	r1, [pc, #80]	; (22d7c <z_impl_k_poll_signal_raise+0xac>)
   22d2a:	4812      	ldr	r0, [pc, #72]	; (22d74 <z_impl_k_poll_signal_raise+0xa4>)
   22d2c:	f001 fff7 	bl	24d1e <assert_print>
   22d30:	490d      	ldr	r1, [pc, #52]	; (22d68 <z_impl_k_poll_signal_raise+0x98>)
   22d32:	4813      	ldr	r0, [pc, #76]	; (22d80 <z_impl_k_poll_signal_raise+0xb0>)
   22d34:	f001 fff3 	bl	24d1e <assert_print>
   22d38:	21c2      	movs	r1, #194	; 0xc2
   22d3a:	e7e3      	b.n	22d04 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   22d3c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22d40:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22d42:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22d44:	2300      	movs	r3, #0
	node->prev = NULL;
   22d46:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22d4a:	f006 fcc5 	bl	296d8 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   22d4e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22d50:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   22d52:	4805      	ldr	r0, [pc, #20]	; (22d68 <z_impl_k_poll_signal_raise+0x98>)
   22d54:	f7fe f880 	bl	20e58 <z_reschedule>
	return rc;
}
   22d58:	4620      	mov	r0, r4
   22d5a:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   22d5c:	f386 8811 	msr	BASEPRI, r6
   22d60:	f3bf 8f6f 	isb	sy
		return 0;
   22d64:	2400      	movs	r4, #0
   22d66:	e7f7      	b.n	22d58 <z_impl_k_poll_signal_raise+0x88>
   22d68:	2002155c 	.word	0x2002155c
   22d6c:	0002c4fc 	.word	0x0002c4fc
   22d70:	0002c555 	.word	0x0002c555
   22d74:	0002b6e9 	.word	0x0002b6e9
   22d78:	0002c56a 	.word	0x0002c56a
   22d7c:	0002c529 	.word	0x0002c529
   22d80:	0002c540 	.word	0x0002c540

00022d84 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22d84:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   22d86:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   22d8a:	4606      	mov	r6, r0
   22d8c:	460d      	mov	r5, r1
   22d8e:	d220      	bcs.n	22dd2 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22d90:	f04f 0800 	mov.w	r8, #0
   22d94:	f04f 0900 	mov.w	r9, #0
   22d98:	f041 0104 	orr.w	r1, r1, #4
   22d9c:	e9cd 8900 	strd	r8, r9, [sp]
   22da0:	f7fc fa8c 	bl	1f2bc <k_heap_aligned_alloc>
	if (mem == NULL) {
   22da4:	4604      	mov	r4, r0
   22da6:	b1a0      	cbz	r0, 22dd2 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   22da8:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   22dac:	b195      	cbz	r5, 22dd4 <z_heap_aligned_alloc+0x50>
   22dae:	1e6b      	subs	r3, r5, #1
   22db0:	421c      	tst	r4, r3
   22db2:	d00f      	beq.n	22dd4 <z_heap_aligned_alloc+0x50>
   22db4:	2325      	movs	r3, #37	; 0x25
   22db6:	4a09      	ldr	r2, [pc, #36]	; (22ddc <z_heap_aligned_alloc+0x58>)
   22db8:	4909      	ldr	r1, [pc, #36]	; (22de0 <z_heap_aligned_alloc+0x5c>)
   22dba:	480a      	ldr	r0, [pc, #40]	; (22de4 <z_heap_aligned_alloc+0x60>)
   22dbc:	f001 ffaf 	bl	24d1e <assert_print>
   22dc0:	4621      	mov	r1, r4
   22dc2:	4809      	ldr	r0, [pc, #36]	; (22de8 <z_heap_aligned_alloc+0x64>)
   22dc4:	462a      	mov	r2, r5
   22dc6:	f001 ffaa 	bl	24d1e <assert_print>
   22dca:	2125      	movs	r1, #37	; 0x25
   22dcc:	4803      	ldr	r0, [pc, #12]	; (22ddc <z_heap_aligned_alloc+0x58>)
   22dce:	f001 ff9f 	bl	24d10 <assert_post_action>
		return NULL;
   22dd2:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   22dd4:	4620      	mov	r0, r4
   22dd6:	b002      	add	sp, #8
   22dd8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   22ddc:	00030ea6 	.word	0x00030ea6
   22de0:	00030eca 	.word	0x00030eca
   22de4:	0002b6e9 	.word	0x0002b6e9
   22de8:	00030efc 	.word	0x00030efc

00022dec <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   22dec:	2803      	cmp	r0, #3
{
   22dee:	460a      	mov	r2, r1
   22df0:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   22df2:	d901      	bls.n	22df8 <k_aligned_alloc+0xc>
   22df4:	0783      	lsls	r3, r0, #30
   22df6:	d00c      	beq.n	22e12 <k_aligned_alloc+0x26>
   22df8:	4910      	ldr	r1, [pc, #64]	; (22e3c <k_aligned_alloc+0x50>)
   22dfa:	2342      	movs	r3, #66	; 0x42
   22dfc:	4a10      	ldr	r2, [pc, #64]	; (22e40 <k_aligned_alloc+0x54>)
   22dfe:	4811      	ldr	r0, [pc, #68]	; (22e44 <k_aligned_alloc+0x58>)
   22e00:	f001 ff8d 	bl	24d1e <assert_print>
   22e04:	4810      	ldr	r0, [pc, #64]	; (22e48 <k_aligned_alloc+0x5c>)
   22e06:	f001 ff8a 	bl	24d1e <assert_print>
   22e0a:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   22e0c:	480c      	ldr	r0, [pc, #48]	; (22e40 <k_aligned_alloc+0x54>)
   22e0e:	f001 ff7f 	bl	24d10 <assert_post_action>
   22e12:	1e43      	subs	r3, r0, #1
   22e14:	4203      	tst	r3, r0
   22e16:	d00a      	beq.n	22e2e <k_aligned_alloc+0x42>
   22e18:	490c      	ldr	r1, [pc, #48]	; (22e4c <k_aligned_alloc+0x60>)
   22e1a:	2346      	movs	r3, #70	; 0x46
   22e1c:	4a08      	ldr	r2, [pc, #32]	; (22e40 <k_aligned_alloc+0x54>)
   22e1e:	4809      	ldr	r0, [pc, #36]	; (22e44 <k_aligned_alloc+0x58>)
   22e20:	f001 ff7d 	bl	24d1e <assert_print>
   22e24:	480a      	ldr	r0, [pc, #40]	; (22e50 <k_aligned_alloc+0x64>)
   22e26:	f001 ff7a 	bl	24d1e <assert_print>
   22e2a:	2146      	movs	r1, #70	; 0x46
   22e2c:	e7ee      	b.n	22e0c <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   22e2e:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   22e30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   22e34:	4807      	ldr	r0, [pc, #28]	; (22e54 <k_aligned_alloc+0x68>)
   22e36:	f7ff bfa5 	b.w	22d84 <z_heap_aligned_alloc>
   22e3a:	bf00      	nop
   22e3c:	00030f24 	.word	0x00030f24
   22e40:	00030ea6 	.word	0x00030ea6
   22e44:	0002b6e9 	.word	0x0002b6e9
   22e48:	00030f61 	.word	0x00030f61
   22e4c:	0002c366 	.word	0x0002c366
   22e50:	0002c381 	.word	0x0002c381
   22e54:	20008a68 	.word	0x20008a68

00022e58 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   22e58:	4b01      	ldr	r3, [pc, #4]	; (22e60 <k_thread_system_pool_assign+0x8>)
   22e5a:	6743      	str	r3, [r0, #116]	; 0x74
}
   22e5c:	4770      	bx	lr
   22e5e:	bf00      	nop
   22e60:	20008a68 	.word	0x20008a68

00022e64 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   22e64:	b538      	push	{r3, r4, r5, lr}
   22e66:	4604      	mov	r4, r0
   22e68:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22e6a:	f006 fab9 	bl	293e0 <k_is_in_isr>
   22e6e:	b920      	cbnz	r0, 22e7a <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22e70:	4b06      	ldr	r3, [pc, #24]	; (22e8c <z_thread_aligned_alloc+0x28>)
   22e72:	689b      	ldr	r3, [r3, #8]
   22e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   22e76:	b90b      	cbnz	r3, 22e7c <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   22e78:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   22e7a:	4b05      	ldr	r3, [pc, #20]	; (22e90 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   22e7c:	462a      	mov	r2, r5
   22e7e:	4621      	mov	r1, r4
   22e80:	4618      	mov	r0, r3
}
   22e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   22e86:	f7ff bf7d 	b.w	22d84 <z_heap_aligned_alloc>
   22e8a:	bf00      	nop
   22e8c:	20021504 	.word	0x20021504
   22e90:	20008a68 	.word	0x20008a68

00022e94 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   22e94:	4801      	ldr	r0, [pc, #4]	; (22e9c <boot_banner+0x8>)
   22e96:	f001 bd80 	b.w	2499a <printk>
   22e9a:	bf00      	nop
   22e9c:	00030f8e 	.word	0x00030f8e

00022ea0 <log>:
   22ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ea2:	4604      	mov	r4, r0
   22ea4:	460d      	mov	r5, r1
   22ea6:	f7e6 fd37 	bl	9918 <__ieee754_log>
   22eaa:	4b17      	ldr	r3, [pc, #92]	; (22f08 <log+0x68>)
   22eac:	4606      	mov	r6, r0
   22eae:	460f      	mov	r7, r1
   22eb0:	f993 3000 	ldrsb.w	r3, [r3]
   22eb4:	3301      	adds	r3, #1
   22eb6:	d01a      	beq.n	22eee <log+0x4e>
   22eb8:	4622      	mov	r2, r4
   22eba:	462b      	mov	r3, r5
   22ebc:	4620      	mov	r0, r4
   22ebe:	4629      	mov	r1, r5
   22ec0:	f7e6 f8b8 	bl	9034 <__aeabi_dcmpun>
   22ec4:	b998      	cbnz	r0, 22eee <log+0x4e>
   22ec6:	2200      	movs	r2, #0
   22ec8:	2300      	movs	r3, #0
   22eca:	4620      	mov	r0, r4
   22ecc:	4629      	mov	r1, r5
   22ece:	f7e6 f8a7 	bl	9020 <__aeabi_dcmpgt>
   22ed2:	b960      	cbnz	r0, 22eee <log+0x4e>
   22ed4:	2200      	movs	r2, #0
   22ed6:	2300      	movs	r3, #0
   22ed8:	4620      	mov	r0, r4
   22eda:	4629      	mov	r1, r5
   22edc:	f7e6 f878 	bl	8fd0 <__aeabi_dcmpeq>
   22ee0:	b140      	cbz	r0, 22ef4 <log+0x54>
   22ee2:	f002 ffd1 	bl	25e88 <__errno>
   22ee6:	2600      	movs	r6, #0
   22ee8:	2322      	movs	r3, #34	; 0x22
   22eea:	4f08      	ldr	r7, [pc, #32]	; (22f0c <log+0x6c>)
   22eec:	6003      	str	r3, [r0, #0]
   22eee:	4630      	mov	r0, r6
   22ef0:	4639      	mov	r1, r7
   22ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22ef4:	f002 ffc8 	bl	25e88 <__errno>
   22ef8:	2321      	movs	r3, #33	; 0x21
   22efa:	6003      	str	r3, [r0, #0]
   22efc:	4804      	ldr	r0, [pc, #16]	; (22f10 <log+0x70>)
   22efe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22f02:	f000 b807 	b.w	22f14 <nan>
   22f06:	bf00      	nop
   22f08:	200089e7 	.word	0x200089e7
   22f0c:	fff00000 	.word	0xfff00000
   22f10:	0002f304 	.word	0x0002f304

00022f14 <nan>:
   22f14:	2000      	movs	r0, #0
   22f16:	4901      	ldr	r1, [pc, #4]	; (22f1c <nan+0x8>)
   22f18:	4770      	bx	lr
   22f1a:	bf00      	nop
   22f1c:	7ff80000 	.word	0x7ff80000

00022f20 <malloc>:
   22f20:	4b02      	ldr	r3, [pc, #8]	; (22f2c <malloc+0xc>)
   22f22:	4601      	mov	r1, r0
   22f24:	6818      	ldr	r0, [r3, #0]
   22f26:	f000 b84d 	b.w	22fc4 <_malloc_r>
   22f2a:	bf00      	nop
   22f2c:	20008744 	.word	0x20008744

00022f30 <_free_r>:
   22f30:	b538      	push	{r3, r4, r5, lr}
   22f32:	4605      	mov	r5, r0
   22f34:	2900      	cmp	r1, #0
   22f36:	d041      	beq.n	22fbc <_free_r+0x8c>
   22f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22f3c:	1f0c      	subs	r4, r1, #4
   22f3e:	2b00      	cmp	r3, #0
   22f40:	bfb8      	it	lt
   22f42:	18e4      	addlt	r4, r4, r3
   22f44:	f000 fd18 	bl	23978 <__malloc_lock>
   22f48:	4a1d      	ldr	r2, [pc, #116]	; (22fc0 <_free_r+0x90>)
   22f4a:	6813      	ldr	r3, [r2, #0]
   22f4c:	b933      	cbnz	r3, 22f5c <_free_r+0x2c>
   22f4e:	6063      	str	r3, [r4, #4]
   22f50:	6014      	str	r4, [r2, #0]
   22f52:	4628      	mov	r0, r5
   22f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22f58:	f000 bd14 	b.w	23984 <__malloc_unlock>
   22f5c:	42a3      	cmp	r3, r4
   22f5e:	d908      	bls.n	22f72 <_free_r+0x42>
   22f60:	6820      	ldr	r0, [r4, #0]
   22f62:	1821      	adds	r1, r4, r0
   22f64:	428b      	cmp	r3, r1
   22f66:	bf01      	itttt	eq
   22f68:	6819      	ldreq	r1, [r3, #0]
   22f6a:	685b      	ldreq	r3, [r3, #4]
   22f6c:	1809      	addeq	r1, r1, r0
   22f6e:	6021      	streq	r1, [r4, #0]
   22f70:	e7ed      	b.n	22f4e <_free_r+0x1e>
   22f72:	461a      	mov	r2, r3
   22f74:	685b      	ldr	r3, [r3, #4]
   22f76:	b10b      	cbz	r3, 22f7c <_free_r+0x4c>
   22f78:	42a3      	cmp	r3, r4
   22f7a:	d9fa      	bls.n	22f72 <_free_r+0x42>
   22f7c:	6811      	ldr	r1, [r2, #0]
   22f7e:	1850      	adds	r0, r2, r1
   22f80:	42a0      	cmp	r0, r4
   22f82:	d10b      	bne.n	22f9c <_free_r+0x6c>
   22f84:	6820      	ldr	r0, [r4, #0]
   22f86:	4401      	add	r1, r0
   22f88:	1850      	adds	r0, r2, r1
   22f8a:	6011      	str	r1, [r2, #0]
   22f8c:	4283      	cmp	r3, r0
   22f8e:	d1e0      	bne.n	22f52 <_free_r+0x22>
   22f90:	6818      	ldr	r0, [r3, #0]
   22f92:	685b      	ldr	r3, [r3, #4]
   22f94:	4408      	add	r0, r1
   22f96:	6053      	str	r3, [r2, #4]
   22f98:	6010      	str	r0, [r2, #0]
   22f9a:	e7da      	b.n	22f52 <_free_r+0x22>
   22f9c:	d902      	bls.n	22fa4 <_free_r+0x74>
   22f9e:	230c      	movs	r3, #12
   22fa0:	602b      	str	r3, [r5, #0]
   22fa2:	e7d6      	b.n	22f52 <_free_r+0x22>
   22fa4:	6820      	ldr	r0, [r4, #0]
   22fa6:	1821      	adds	r1, r4, r0
   22fa8:	428b      	cmp	r3, r1
   22faa:	bf02      	ittt	eq
   22fac:	6819      	ldreq	r1, [r3, #0]
   22fae:	685b      	ldreq	r3, [r3, #4]
   22fb0:	1809      	addeq	r1, r1, r0
   22fb2:	6063      	str	r3, [r4, #4]
   22fb4:	bf08      	it	eq
   22fb6:	6021      	streq	r1, [r4, #0]
   22fb8:	6054      	str	r4, [r2, #4]
   22fba:	e7ca      	b.n	22f52 <_free_r+0x22>
   22fbc:	bd38      	pop	{r3, r4, r5, pc}
   22fbe:	bf00      	nop
   22fc0:	20021564 	.word	0x20021564

00022fc4 <_malloc_r>:
   22fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22fc6:	1ccd      	adds	r5, r1, #3
   22fc8:	4606      	mov	r6, r0
   22fca:	f025 0503 	bic.w	r5, r5, #3
   22fce:	3508      	adds	r5, #8
   22fd0:	2d0c      	cmp	r5, #12
   22fd2:	bf38      	it	cc
   22fd4:	250c      	movcc	r5, #12
   22fd6:	2d00      	cmp	r5, #0
   22fd8:	db01      	blt.n	22fde <_malloc_r+0x1a>
   22fda:	42a9      	cmp	r1, r5
   22fdc:	d903      	bls.n	22fe6 <_malloc_r+0x22>
   22fde:	230c      	movs	r3, #12
   22fe0:	6033      	str	r3, [r6, #0]
   22fe2:	2000      	movs	r0, #0
   22fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22fe6:	f000 fcc7 	bl	23978 <__malloc_lock>
   22fea:	4921      	ldr	r1, [pc, #132]	; (23070 <_malloc_r+0xac>)
   22fec:	680a      	ldr	r2, [r1, #0]
   22fee:	4614      	mov	r4, r2
   22ff0:	b99c      	cbnz	r4, 2301a <_malloc_r+0x56>
   22ff2:	4f20      	ldr	r7, [pc, #128]	; (23074 <_malloc_r+0xb0>)
   22ff4:	683b      	ldr	r3, [r7, #0]
   22ff6:	b923      	cbnz	r3, 23002 <_malloc_r+0x3e>
   22ff8:	4621      	mov	r1, r4
   22ffa:	4630      	mov	r0, r6
   22ffc:	f000 fbb8 	bl	23770 <_sbrk_r>
   23000:	6038      	str	r0, [r7, #0]
   23002:	4629      	mov	r1, r5
   23004:	4630      	mov	r0, r6
   23006:	f000 fbb3 	bl	23770 <_sbrk_r>
   2300a:	1c43      	adds	r3, r0, #1
   2300c:	d123      	bne.n	23056 <_malloc_r+0x92>
   2300e:	230c      	movs	r3, #12
   23010:	4630      	mov	r0, r6
   23012:	6033      	str	r3, [r6, #0]
   23014:	f000 fcb6 	bl	23984 <__malloc_unlock>
   23018:	e7e3      	b.n	22fe2 <_malloc_r+0x1e>
   2301a:	6823      	ldr	r3, [r4, #0]
   2301c:	1b5b      	subs	r3, r3, r5
   2301e:	d417      	bmi.n	23050 <_malloc_r+0x8c>
   23020:	2b0b      	cmp	r3, #11
   23022:	d903      	bls.n	2302c <_malloc_r+0x68>
   23024:	6023      	str	r3, [r4, #0]
   23026:	441c      	add	r4, r3
   23028:	6025      	str	r5, [r4, #0]
   2302a:	e004      	b.n	23036 <_malloc_r+0x72>
   2302c:	6863      	ldr	r3, [r4, #4]
   2302e:	42a2      	cmp	r2, r4
   23030:	bf0c      	ite	eq
   23032:	600b      	streq	r3, [r1, #0]
   23034:	6053      	strne	r3, [r2, #4]
   23036:	4630      	mov	r0, r6
   23038:	f000 fca4 	bl	23984 <__malloc_unlock>
   2303c:	f104 000b 	add.w	r0, r4, #11
   23040:	1d23      	adds	r3, r4, #4
   23042:	f020 0007 	bic.w	r0, r0, #7
   23046:	1ac2      	subs	r2, r0, r3
   23048:	bf1c      	itt	ne
   2304a:	1a1b      	subne	r3, r3, r0
   2304c:	50a3      	strne	r3, [r4, r2]
   2304e:	e7c9      	b.n	22fe4 <_malloc_r+0x20>
   23050:	4622      	mov	r2, r4
   23052:	6864      	ldr	r4, [r4, #4]
   23054:	e7cc      	b.n	22ff0 <_malloc_r+0x2c>
   23056:	1cc4      	adds	r4, r0, #3
   23058:	f024 0403 	bic.w	r4, r4, #3
   2305c:	42a0      	cmp	r0, r4
   2305e:	d0e3      	beq.n	23028 <_malloc_r+0x64>
   23060:	1a21      	subs	r1, r4, r0
   23062:	4630      	mov	r0, r6
   23064:	f000 fb84 	bl	23770 <_sbrk_r>
   23068:	3001      	adds	r0, #1
   2306a:	d1dd      	bne.n	23028 <_malloc_r+0x64>
   2306c:	e7cf      	b.n	2300e <_malloc_r+0x4a>
   2306e:	bf00      	nop
   23070:	20021564 	.word	0x20021564
   23074:	20021560 	.word	0x20021560

00023078 <_printf_float>:
   23078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2307c:	b091      	sub	sp, #68	; 0x44
   2307e:	460c      	mov	r4, r1
   23080:	4616      	mov	r6, r2
   23082:	461f      	mov	r7, r3
   23084:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   23088:	4605      	mov	r5, r0
   2308a:	f000 fc71 	bl	23970 <_localeconv_r>
   2308e:	6803      	ldr	r3, [r0, #0]
   23090:	4618      	mov	r0, r3
   23092:	9308      	str	r3, [sp, #32]
   23094:	f7e6 f964 	bl	9360 <strlen>
   23098:	2300      	movs	r3, #0
   2309a:	9009      	str	r0, [sp, #36]	; 0x24
   2309c:	930e      	str	r3, [sp, #56]	; 0x38
   2309e:	f8d8 3000 	ldr.w	r3, [r8]
   230a2:	f894 a018 	ldrb.w	sl, [r4, #24]
   230a6:	3307      	adds	r3, #7
   230a8:	f8d4 b000 	ldr.w	fp, [r4]
   230ac:	f023 0307 	bic.w	r3, r3, #7
   230b0:	f103 0208 	add.w	r2, r3, #8
   230b4:	f8c8 2000 	str.w	r2, [r8]
   230b8:	f04f 32ff 	mov.w	r2, #4294967295
   230bc:	e9d3 8900 	ldrd	r8, r9, [r3]
   230c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   230c4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   230c8:	930b      	str	r3, [sp, #44]	; 0x2c
   230ca:	4b9d      	ldr	r3, [pc, #628]	; (23340 <_printf_float+0x2c8>)
   230cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   230d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   230d4:	f7e5 ffae 	bl	9034 <__aeabi_dcmpun>
   230d8:	bb70      	cbnz	r0, 23138 <_printf_float+0xc0>
   230da:	f04f 32ff 	mov.w	r2, #4294967295
   230de:	4b98      	ldr	r3, [pc, #608]	; (23340 <_printf_float+0x2c8>)
   230e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   230e4:	f7e5 ff88 	bl	8ff8 <__aeabi_dcmple>
   230e8:	bb30      	cbnz	r0, 23138 <_printf_float+0xc0>
   230ea:	2200      	movs	r2, #0
   230ec:	2300      	movs	r3, #0
   230ee:	4640      	mov	r0, r8
   230f0:	4649      	mov	r1, r9
   230f2:	f7e5 ff77 	bl	8fe4 <__aeabi_dcmplt>
   230f6:	b110      	cbz	r0, 230fe <_printf_float+0x86>
   230f8:	232d      	movs	r3, #45	; 0x2d
   230fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   230fe:	4a91      	ldr	r2, [pc, #580]	; (23344 <_printf_float+0x2cc>)
   23100:	4b91      	ldr	r3, [pc, #580]	; (23348 <_printf_float+0x2d0>)
   23102:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   23106:	bf94      	ite	ls
   23108:	4690      	movls	r8, r2
   2310a:	4698      	movhi	r8, r3
   2310c:	2303      	movs	r3, #3
   2310e:	f04f 0900 	mov.w	r9, #0
   23112:	6123      	str	r3, [r4, #16]
   23114:	f02b 0304 	bic.w	r3, fp, #4
   23118:	6023      	str	r3, [r4, #0]
   2311a:	4633      	mov	r3, r6
   2311c:	aa0f      	add	r2, sp, #60	; 0x3c
   2311e:	4621      	mov	r1, r4
   23120:	4628      	mov	r0, r5
   23122:	9700      	str	r7, [sp, #0]
   23124:	f006 fc51 	bl	299ca <_printf_common>
   23128:	3001      	adds	r0, #1
   2312a:	f040 8099 	bne.w	23260 <_printf_float+0x1e8>
   2312e:	f04f 30ff 	mov.w	r0, #4294967295
   23132:	b011      	add	sp, #68	; 0x44
   23134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23138:	4642      	mov	r2, r8
   2313a:	464b      	mov	r3, r9
   2313c:	4640      	mov	r0, r8
   2313e:	4649      	mov	r1, r9
   23140:	f7e5 ff78 	bl	9034 <__aeabi_dcmpun>
   23144:	b140      	cbz	r0, 23158 <_printf_float+0xe0>
   23146:	464b      	mov	r3, r9
   23148:	4a80      	ldr	r2, [pc, #512]	; (2334c <_printf_float+0x2d4>)
   2314a:	2b00      	cmp	r3, #0
   2314c:	bfbc      	itt	lt
   2314e:	232d      	movlt	r3, #45	; 0x2d
   23150:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   23154:	4b7e      	ldr	r3, [pc, #504]	; (23350 <_printf_float+0x2d8>)
   23156:	e7d4      	b.n	23102 <_printf_float+0x8a>
   23158:	6863      	ldr	r3, [r4, #4]
   2315a:	1c5a      	adds	r2, r3, #1
   2315c:	d129      	bne.n	231b2 <_printf_float+0x13a>
   2315e:	2306      	movs	r3, #6
   23160:	6063      	str	r3, [r4, #4]
   23162:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   23166:	2200      	movs	r2, #0
   23168:	4628      	mov	r0, r5
   2316a:	6023      	str	r3, [r4, #0]
   2316c:	9206      	str	r2, [sp, #24]
   2316e:	aa0e      	add	r2, sp, #56	; 0x38
   23170:	e9cd a204 	strd	sl, r2, [sp, #16]
   23174:	aa0d      	add	r2, sp, #52	; 0x34
   23176:	9203      	str	r2, [sp, #12]
   23178:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2317c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   23180:	6863      	ldr	r3, [r4, #4]
   23182:	4642      	mov	r2, r8
   23184:	9300      	str	r3, [sp, #0]
   23186:	464b      	mov	r3, r9
   23188:	f006 fb7f 	bl	2988a <__cvt>
   2318c:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   23190:	4680      	mov	r8, r0
   23192:	990d      	ldr	r1, [sp, #52]	; 0x34
   23194:	d115      	bne.n	231c2 <_printf_float+0x14a>
   23196:	1ccb      	adds	r3, r1, #3
   23198:	db3b      	blt.n	23212 <_printf_float+0x19a>
   2319a:	6863      	ldr	r3, [r4, #4]
   2319c:	4299      	cmp	r1, r3
   2319e:	dc38      	bgt.n	23212 <_printf_float+0x19a>
   231a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   231a2:	4299      	cmp	r1, r3
   231a4:	db55      	blt.n	23252 <_printf_float+0x1da>
   231a6:	6823      	ldr	r3, [r4, #0]
   231a8:	6121      	str	r1, [r4, #16]
   231aa:	07d8      	lsls	r0, r3, #31
   231ac:	d545      	bpl.n	2323a <_printf_float+0x1c2>
   231ae:	1c4b      	adds	r3, r1, #1
   231b0:	e042      	b.n	23238 <_printf_float+0x1c0>
   231b2:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   231b6:	2a47      	cmp	r2, #71	; 0x47
   231b8:	d1d3      	bne.n	23162 <_printf_float+0xea>
   231ba:	2b00      	cmp	r3, #0
   231bc:	d1d1      	bne.n	23162 <_printf_float+0xea>
   231be:	2301      	movs	r3, #1
   231c0:	e7ce      	b.n	23160 <_printf_float+0xe8>
   231c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   231c6:	d107      	bne.n	231d8 <_printf_float+0x160>
   231c8:	1cc8      	adds	r0, r1, #3
   231ca:	db25      	blt.n	23218 <_printf_float+0x1a0>
   231cc:	6863      	ldr	r3, [r4, #4]
   231ce:	428b      	cmp	r3, r1
   231d0:	db22      	blt.n	23218 <_printf_float+0x1a0>
   231d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
   231d6:	e7e3      	b.n	231a0 <_printf_float+0x128>
   231d8:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   231dc:	d81f      	bhi.n	2321e <_printf_float+0x1a6>
   231de:	3901      	subs	r1, #1
   231e0:	4652      	mov	r2, sl
   231e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   231e6:	910d      	str	r1, [sp, #52]	; 0x34
   231e8:	f006 fbb6 	bl	29958 <__exponent>
   231ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   231ee:	4681      	mov	r9, r0
   231f0:	1813      	adds	r3, r2, r0
   231f2:	2a01      	cmp	r2, #1
   231f4:	6123      	str	r3, [r4, #16]
   231f6:	dc02      	bgt.n	231fe <_printf_float+0x186>
   231f8:	6822      	ldr	r2, [r4, #0]
   231fa:	07d2      	lsls	r2, r2, #31
   231fc:	d501      	bpl.n	23202 <_printf_float+0x18a>
   231fe:	3301      	adds	r3, #1
   23200:	6123      	str	r3, [r4, #16]
   23202:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   23206:	2b00      	cmp	r3, #0
   23208:	d087      	beq.n	2311a <_printf_float+0xa2>
   2320a:	232d      	movs	r3, #45	; 0x2d
   2320c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23210:	e783      	b.n	2311a <_printf_float+0xa2>
   23212:	f04f 0a65 	mov.w	sl, #101	; 0x65
   23216:	e7e2      	b.n	231de <_printf_float+0x166>
   23218:	f04f 0a45 	mov.w	sl, #69	; 0x45
   2321c:	e7df      	b.n	231de <_printf_float+0x166>
   2321e:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   23222:	d1bd      	bne.n	231a0 <_printf_float+0x128>
   23224:	2900      	cmp	r1, #0
   23226:	6863      	ldr	r3, [r4, #4]
   23228:	dd0b      	ble.n	23242 <_printf_float+0x1ca>
   2322a:	6121      	str	r1, [r4, #16]
   2322c:	b913      	cbnz	r3, 23234 <_printf_float+0x1bc>
   2322e:	6822      	ldr	r2, [r4, #0]
   23230:	07d0      	lsls	r0, r2, #31
   23232:	d502      	bpl.n	2323a <_printf_float+0x1c2>
   23234:	3301      	adds	r3, #1
   23236:	440b      	add	r3, r1
   23238:	6123      	str	r3, [r4, #16]
   2323a:	f04f 0900 	mov.w	r9, #0
   2323e:	65a1      	str	r1, [r4, #88]	; 0x58
   23240:	e7df      	b.n	23202 <_printf_float+0x18a>
   23242:	b913      	cbnz	r3, 2324a <_printf_float+0x1d2>
   23244:	6822      	ldr	r2, [r4, #0]
   23246:	07d2      	lsls	r2, r2, #31
   23248:	d501      	bpl.n	2324e <_printf_float+0x1d6>
   2324a:	3302      	adds	r3, #2
   2324c:	e7f4      	b.n	23238 <_printf_float+0x1c0>
   2324e:	2301      	movs	r3, #1
   23250:	e7f2      	b.n	23238 <_printf_float+0x1c0>
   23252:	2900      	cmp	r1, #0
   23254:	bfd4      	ite	le
   23256:	f1c1 0202 	rsble	r2, r1, #2
   2325a:	2201      	movgt	r2, #1
   2325c:	4413      	add	r3, r2
   2325e:	e7eb      	b.n	23238 <_printf_float+0x1c0>
   23260:	6823      	ldr	r3, [r4, #0]
   23262:	055a      	lsls	r2, r3, #21
   23264:	d407      	bmi.n	23276 <_printf_float+0x1fe>
   23266:	6923      	ldr	r3, [r4, #16]
   23268:	4642      	mov	r2, r8
   2326a:	4631      	mov	r1, r6
   2326c:	4628      	mov	r0, r5
   2326e:	47b8      	blx	r7
   23270:	3001      	adds	r0, #1
   23272:	d12b      	bne.n	232cc <_printf_float+0x254>
   23274:	e75b      	b.n	2312e <_printf_float+0xb6>
   23276:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2327a:	f240 80dc 	bls.w	23436 <_printf_float+0x3be>
   2327e:	2200      	movs	r2, #0
   23280:	2300      	movs	r3, #0
   23282:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   23286:	f7e5 fea3 	bl	8fd0 <__aeabi_dcmpeq>
   2328a:	2800      	cmp	r0, #0
   2328c:	d033      	beq.n	232f6 <_printf_float+0x27e>
   2328e:	2301      	movs	r3, #1
   23290:	4a30      	ldr	r2, [pc, #192]	; (23354 <_printf_float+0x2dc>)
   23292:	4631      	mov	r1, r6
   23294:	4628      	mov	r0, r5
   23296:	47b8      	blx	r7
   23298:	3001      	adds	r0, #1
   2329a:	f43f af48 	beq.w	2312e <_printf_float+0xb6>
   2329e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   232a2:	4543      	cmp	r3, r8
   232a4:	db02      	blt.n	232ac <_printf_float+0x234>
   232a6:	6823      	ldr	r3, [r4, #0]
   232a8:	07d8      	lsls	r0, r3, #31
   232aa:	d50f      	bpl.n	232cc <_printf_float+0x254>
   232ac:	4631      	mov	r1, r6
   232ae:	4628      	mov	r0, r5
   232b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   232b4:	47b8      	blx	r7
   232b6:	3001      	adds	r0, #1
   232b8:	f43f af39 	beq.w	2312e <_printf_float+0xb6>
   232bc:	f04f 0900 	mov.w	r9, #0
   232c0:	f108 38ff 	add.w	r8, r8, #4294967295
   232c4:	f104 0a1a 	add.w	sl, r4, #26
   232c8:	45c8      	cmp	r8, r9
   232ca:	dc09      	bgt.n	232e0 <_printf_float+0x268>
   232cc:	6823      	ldr	r3, [r4, #0]
   232ce:	079b      	lsls	r3, r3, #30
   232d0:	f100 8102 	bmi.w	234d8 <_printf_float+0x460>
   232d4:	68e0      	ldr	r0, [r4, #12]
   232d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   232d8:	4298      	cmp	r0, r3
   232da:	bfb8      	it	lt
   232dc:	4618      	movlt	r0, r3
   232de:	e728      	b.n	23132 <_printf_float+0xba>
   232e0:	2301      	movs	r3, #1
   232e2:	4652      	mov	r2, sl
   232e4:	4631      	mov	r1, r6
   232e6:	4628      	mov	r0, r5
   232e8:	47b8      	blx	r7
   232ea:	3001      	adds	r0, #1
   232ec:	f43f af1f 	beq.w	2312e <_printf_float+0xb6>
   232f0:	f109 0901 	add.w	r9, r9, #1
   232f4:	e7e8      	b.n	232c8 <_printf_float+0x250>
   232f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   232f8:	2b00      	cmp	r3, #0
   232fa:	dc38      	bgt.n	2336e <_printf_float+0x2f6>
   232fc:	2301      	movs	r3, #1
   232fe:	4a15      	ldr	r2, [pc, #84]	; (23354 <_printf_float+0x2dc>)
   23300:	4631      	mov	r1, r6
   23302:	4628      	mov	r0, r5
   23304:	47b8      	blx	r7
   23306:	3001      	adds	r0, #1
   23308:	f43f af11 	beq.w	2312e <_printf_float+0xb6>
   2330c:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   23310:	ea59 0303 	orrs.w	r3, r9, r3
   23314:	d102      	bne.n	2331c <_printf_float+0x2a4>
   23316:	6823      	ldr	r3, [r4, #0]
   23318:	07d9      	lsls	r1, r3, #31
   2331a:	d5d7      	bpl.n	232cc <_printf_float+0x254>
   2331c:	4631      	mov	r1, r6
   2331e:	4628      	mov	r0, r5
   23320:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   23324:	47b8      	blx	r7
   23326:	3001      	adds	r0, #1
   23328:	f43f af01 	beq.w	2312e <_printf_float+0xb6>
   2332c:	f04f 0a00 	mov.w	sl, #0
   23330:	f104 0b1a 	add.w	fp, r4, #26
   23334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23336:	425b      	negs	r3, r3
   23338:	4553      	cmp	r3, sl
   2333a:	dc0d      	bgt.n	23358 <_printf_float+0x2e0>
   2333c:	464b      	mov	r3, r9
   2333e:	e793      	b.n	23268 <_printf_float+0x1f0>
   23340:	7fefffff 	.word	0x7fefffff
   23344:	000310c1 	.word	0x000310c1
   23348:	0002c95e 	.word	0x0002c95e
   2334c:	000310c5 	.word	0x000310c5
   23350:	000310c9 	.word	0x000310c9
   23354:	00030f5f 	.word	0x00030f5f
   23358:	2301      	movs	r3, #1
   2335a:	465a      	mov	r2, fp
   2335c:	4631      	mov	r1, r6
   2335e:	4628      	mov	r0, r5
   23360:	47b8      	blx	r7
   23362:	3001      	adds	r0, #1
   23364:	f43f aee3 	beq.w	2312e <_printf_float+0xb6>
   23368:	f10a 0a01 	add.w	sl, sl, #1
   2336c:	e7e2      	b.n	23334 <_printf_float+0x2bc>
   2336e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   23370:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   23374:	4553      	cmp	r3, sl
   23376:	bfa8      	it	ge
   23378:	4653      	movge	r3, sl
   2337a:	2b00      	cmp	r3, #0
   2337c:	4699      	mov	r9, r3
   2337e:	dc36      	bgt.n	233ee <_printf_float+0x376>
   23380:	f04f 0b00 	mov.w	fp, #0
   23384:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   23388:	f104 021a 	add.w	r2, r4, #26
   2338c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2338e:	930a      	str	r3, [sp, #40]	; 0x28
   23390:	eba3 0309 	sub.w	r3, r3, r9
   23394:	455b      	cmp	r3, fp
   23396:	dc31      	bgt.n	233fc <_printf_float+0x384>
   23398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2339a:	459a      	cmp	sl, r3
   2339c:	dc3a      	bgt.n	23414 <_printf_float+0x39c>
   2339e:	6823      	ldr	r3, [r4, #0]
   233a0:	07da      	lsls	r2, r3, #31
   233a2:	d437      	bmi.n	23414 <_printf_float+0x39c>
   233a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   233a6:	ebaa 0903 	sub.w	r9, sl, r3
   233aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   233ac:	ebaa 0303 	sub.w	r3, sl, r3
   233b0:	4599      	cmp	r9, r3
   233b2:	bfa8      	it	ge
   233b4:	4699      	movge	r9, r3
   233b6:	f1b9 0f00 	cmp.w	r9, #0
   233ba:	dc33      	bgt.n	23424 <_printf_float+0x3ac>
   233bc:	f04f 0800 	mov.w	r8, #0
   233c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   233c4:	f104 0b1a 	add.w	fp, r4, #26
   233c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   233ca:	ebaa 0303 	sub.w	r3, sl, r3
   233ce:	eba3 0309 	sub.w	r3, r3, r9
   233d2:	4543      	cmp	r3, r8
   233d4:	f77f af7a 	ble.w	232cc <_printf_float+0x254>
   233d8:	2301      	movs	r3, #1
   233da:	465a      	mov	r2, fp
   233dc:	4631      	mov	r1, r6
   233de:	4628      	mov	r0, r5
   233e0:	47b8      	blx	r7
   233e2:	3001      	adds	r0, #1
   233e4:	f43f aea3 	beq.w	2312e <_printf_float+0xb6>
   233e8:	f108 0801 	add.w	r8, r8, #1
   233ec:	e7ec      	b.n	233c8 <_printf_float+0x350>
   233ee:	4642      	mov	r2, r8
   233f0:	4631      	mov	r1, r6
   233f2:	4628      	mov	r0, r5
   233f4:	47b8      	blx	r7
   233f6:	3001      	adds	r0, #1
   233f8:	d1c2      	bne.n	23380 <_printf_float+0x308>
   233fa:	e698      	b.n	2312e <_printf_float+0xb6>
   233fc:	2301      	movs	r3, #1
   233fe:	4631      	mov	r1, r6
   23400:	4628      	mov	r0, r5
   23402:	920a      	str	r2, [sp, #40]	; 0x28
   23404:	47b8      	blx	r7
   23406:	3001      	adds	r0, #1
   23408:	f43f ae91 	beq.w	2312e <_printf_float+0xb6>
   2340c:	f10b 0b01 	add.w	fp, fp, #1
   23410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23412:	e7bb      	b.n	2338c <_printf_float+0x314>
   23414:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   23418:	4631      	mov	r1, r6
   2341a:	4628      	mov	r0, r5
   2341c:	47b8      	blx	r7
   2341e:	3001      	adds	r0, #1
   23420:	d1c0      	bne.n	233a4 <_printf_float+0x32c>
   23422:	e684      	b.n	2312e <_printf_float+0xb6>
   23424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23426:	464b      	mov	r3, r9
   23428:	4631      	mov	r1, r6
   2342a:	4628      	mov	r0, r5
   2342c:	4442      	add	r2, r8
   2342e:	47b8      	blx	r7
   23430:	3001      	adds	r0, #1
   23432:	d1c3      	bne.n	233bc <_printf_float+0x344>
   23434:	e67b      	b.n	2312e <_printf_float+0xb6>
   23436:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2343a:	f1ba 0f01 	cmp.w	sl, #1
   2343e:	dc01      	bgt.n	23444 <_printf_float+0x3cc>
   23440:	07db      	lsls	r3, r3, #31
   23442:	d536      	bpl.n	234b2 <_printf_float+0x43a>
   23444:	2301      	movs	r3, #1
   23446:	4642      	mov	r2, r8
   23448:	4631      	mov	r1, r6
   2344a:	4628      	mov	r0, r5
   2344c:	47b8      	blx	r7
   2344e:	3001      	adds	r0, #1
   23450:	f43f ae6d 	beq.w	2312e <_printf_float+0xb6>
   23454:	4631      	mov	r1, r6
   23456:	4628      	mov	r0, r5
   23458:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2345c:	47b8      	blx	r7
   2345e:	3001      	adds	r0, #1
   23460:	f43f ae65 	beq.w	2312e <_printf_float+0xb6>
   23464:	2200      	movs	r2, #0
   23466:	2300      	movs	r3, #0
   23468:	f10a 3aff 	add.w	sl, sl, #4294967295
   2346c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   23470:	f7e5 fdae 	bl	8fd0 <__aeabi_dcmpeq>
   23474:	b9c0      	cbnz	r0, 234a8 <_printf_float+0x430>
   23476:	4653      	mov	r3, sl
   23478:	f108 0201 	add.w	r2, r8, #1
   2347c:	4631      	mov	r1, r6
   2347e:	4628      	mov	r0, r5
   23480:	47b8      	blx	r7
   23482:	3001      	adds	r0, #1
   23484:	d10c      	bne.n	234a0 <_printf_float+0x428>
   23486:	e652      	b.n	2312e <_printf_float+0xb6>
   23488:	2301      	movs	r3, #1
   2348a:	465a      	mov	r2, fp
   2348c:	4631      	mov	r1, r6
   2348e:	4628      	mov	r0, r5
   23490:	47b8      	blx	r7
   23492:	3001      	adds	r0, #1
   23494:	f43f ae4b 	beq.w	2312e <_printf_float+0xb6>
   23498:	f108 0801 	add.w	r8, r8, #1
   2349c:	45d0      	cmp	r8, sl
   2349e:	dbf3      	blt.n	23488 <_printf_float+0x410>
   234a0:	464b      	mov	r3, r9
   234a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
   234a6:	e6e0      	b.n	2326a <_printf_float+0x1f2>
   234a8:	f04f 0800 	mov.w	r8, #0
   234ac:	f104 0b1a 	add.w	fp, r4, #26
   234b0:	e7f4      	b.n	2349c <_printf_float+0x424>
   234b2:	2301      	movs	r3, #1
   234b4:	4642      	mov	r2, r8
   234b6:	e7e1      	b.n	2347c <_printf_float+0x404>
   234b8:	2301      	movs	r3, #1
   234ba:	464a      	mov	r2, r9
   234bc:	4631      	mov	r1, r6
   234be:	4628      	mov	r0, r5
   234c0:	47b8      	blx	r7
   234c2:	3001      	adds	r0, #1
   234c4:	f43f ae33 	beq.w	2312e <_printf_float+0xb6>
   234c8:	f108 0801 	add.w	r8, r8, #1
   234cc:	68e3      	ldr	r3, [r4, #12]
   234ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
   234d0:	1a5b      	subs	r3, r3, r1
   234d2:	4543      	cmp	r3, r8
   234d4:	dcf0      	bgt.n	234b8 <_printf_float+0x440>
   234d6:	e6fd      	b.n	232d4 <_printf_float+0x25c>
   234d8:	f04f 0800 	mov.w	r8, #0
   234dc:	f104 0919 	add.w	r9, r4, #25
   234e0:	e7f4      	b.n	234cc <_printf_float+0x454>
   234e2:	bf00      	nop

000234e4 <_printf_i>:
   234e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   234e8:	7e0f      	ldrb	r7, [r1, #24]
   234ea:	4691      	mov	r9, r2
   234ec:	4680      	mov	r8, r0
   234ee:	460c      	mov	r4, r1
   234f0:	2f78      	cmp	r7, #120	; 0x78
   234f2:	469a      	mov	sl, r3
   234f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   234f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
   234fa:	d807      	bhi.n	2350c <_printf_i+0x28>
   234fc:	2f62      	cmp	r7, #98	; 0x62
   234fe:	d80a      	bhi.n	23516 <_printf_i+0x32>
   23500:	2f00      	cmp	r7, #0
   23502:	f000 80e0 	beq.w	236c6 <_printf_i+0x1e2>
   23506:	2f58      	cmp	r7, #88	; 0x58
   23508:	f000 80bb 	beq.w	23682 <_printf_i+0x19e>
   2350c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   23510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   23514:	e03a      	b.n	2358c <_printf_i+0xa8>
   23516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2351a:	2b15      	cmp	r3, #21
   2351c:	d8f6      	bhi.n	2350c <_printf_i+0x28>
   2351e:	a101      	add	r1, pc, #4	; (adr r1, 23524 <_printf_i+0x40>)
   23520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   23524:	0002357d 	.word	0x0002357d
   23528:	00023591 	.word	0x00023591
   2352c:	0002350d 	.word	0x0002350d
   23530:	0002350d 	.word	0x0002350d
   23534:	0002350d 	.word	0x0002350d
   23538:	0002350d 	.word	0x0002350d
   2353c:	00023591 	.word	0x00023591
   23540:	0002350d 	.word	0x0002350d
   23544:	0002350d 	.word	0x0002350d
   23548:	0002350d 	.word	0x0002350d
   2354c:	0002350d 	.word	0x0002350d
   23550:	000236ad 	.word	0x000236ad
   23554:	00023621 	.word	0x00023621
   23558:	00023663 	.word	0x00023663
   2355c:	0002350d 	.word	0x0002350d
   23560:	0002350d 	.word	0x0002350d
   23564:	000236cf 	.word	0x000236cf
   23568:	0002350d 	.word	0x0002350d
   2356c:	00023621 	.word	0x00023621
   23570:	0002350d 	.word	0x0002350d
   23574:	0002350d 	.word	0x0002350d
   23578:	0002366b 	.word	0x0002366b
   2357c:	682b      	ldr	r3, [r5, #0]
   2357e:	f104 0642 	add.w	r6, r4, #66	; 0x42
   23582:	1d1a      	adds	r2, r3, #4
   23584:	681b      	ldr	r3, [r3, #0]
   23586:	602a      	str	r2, [r5, #0]
   23588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2358c:	2301      	movs	r3, #1
   2358e:	e0ab      	b.n	236e8 <_printf_i+0x204>
   23590:	6823      	ldr	r3, [r4, #0]
   23592:	6829      	ldr	r1, [r5, #0]
   23594:	061f      	lsls	r7, r3, #24
   23596:	f101 0004 	add.w	r0, r1, #4
   2359a:	6028      	str	r0, [r5, #0]
   2359c:	d501      	bpl.n	235a2 <_printf_i+0xbe>
   2359e:	680d      	ldr	r5, [r1, #0]
   235a0:	e003      	b.n	235aa <_printf_i+0xc6>
   235a2:	065e      	lsls	r6, r3, #25
   235a4:	d5fb      	bpl.n	2359e <_printf_i+0xba>
   235a6:	f9b1 5000 	ldrsh.w	r5, [r1]
   235aa:	2d00      	cmp	r5, #0
   235ac:	6861      	ldr	r1, [r4, #4]
   235ae:	da7a      	bge.n	236a6 <_printf_i+0x1c2>
   235b0:	202d      	movs	r0, #45	; 0x2d
   235b2:	2900      	cmp	r1, #0
   235b4:	60a1      	str	r1, [r4, #8]
   235b6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   235ba:	da2d      	bge.n	23618 <_printf_i+0x134>
   235bc:	426d      	negs	r5, r5
   235be:	485e      	ldr	r0, [pc, #376]	; (23738 <_printf_i+0x254>)
   235c0:	230a      	movs	r3, #10
   235c2:	4616      	mov	r6, r2
   235c4:	fbb5 f1f3 	udiv	r1, r5, r3
   235c8:	fb03 5711 	mls	r7, r3, r1, r5
   235cc:	5dc7      	ldrb	r7, [r0, r7]
   235ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
   235d2:	462f      	mov	r7, r5
   235d4:	460d      	mov	r5, r1
   235d6:	42bb      	cmp	r3, r7
   235d8:	d9f4      	bls.n	235c4 <_printf_i+0xe0>
   235da:	2b08      	cmp	r3, #8
   235dc:	d10b      	bne.n	235f6 <_printf_i+0x112>
   235de:	6823      	ldr	r3, [r4, #0]
   235e0:	07df      	lsls	r7, r3, #31
   235e2:	d508      	bpl.n	235f6 <_printf_i+0x112>
   235e4:	6923      	ldr	r3, [r4, #16]
   235e6:	6861      	ldr	r1, [r4, #4]
   235e8:	4299      	cmp	r1, r3
   235ea:	bfde      	ittt	le
   235ec:	2330      	movle	r3, #48	; 0x30
   235ee:	f806 3c01 	strble.w	r3, [r6, #-1]
   235f2:	f106 36ff 	addle.w	r6, r6, #4294967295
   235f6:	1b92      	subs	r2, r2, r6
   235f8:	6122      	str	r2, [r4, #16]
   235fa:	464b      	mov	r3, r9
   235fc:	aa03      	add	r2, sp, #12
   235fe:	4621      	mov	r1, r4
   23600:	4640      	mov	r0, r8
   23602:	f8cd a000 	str.w	sl, [sp]
   23606:	f006 f9e0 	bl	299ca <_printf_common>
   2360a:	3001      	adds	r0, #1
   2360c:	d171      	bne.n	236f2 <_printf_i+0x20e>
   2360e:	f04f 30ff 	mov.w	r0, #4294967295
   23612:	b004      	add	sp, #16
   23614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23618:	f023 0304 	bic.w	r3, r3, #4
   2361c:	6023      	str	r3, [r4, #0]
   2361e:	e7cd      	b.n	235bc <_printf_i+0xd8>
   23620:	682b      	ldr	r3, [r5, #0]
   23622:	6820      	ldr	r0, [r4, #0]
   23624:	1d19      	adds	r1, r3, #4
   23626:	6029      	str	r1, [r5, #0]
   23628:	0605      	lsls	r5, r0, #24
   2362a:	d501      	bpl.n	23630 <_printf_i+0x14c>
   2362c:	681d      	ldr	r5, [r3, #0]
   2362e:	e002      	b.n	23636 <_printf_i+0x152>
   23630:	0641      	lsls	r1, r0, #25
   23632:	d5fb      	bpl.n	2362c <_printf_i+0x148>
   23634:	881d      	ldrh	r5, [r3, #0]
   23636:	2f6f      	cmp	r7, #111	; 0x6f
   23638:	483f      	ldr	r0, [pc, #252]	; (23738 <_printf_i+0x254>)
   2363a:	bf14      	ite	ne
   2363c:	230a      	movne	r3, #10
   2363e:	2308      	moveq	r3, #8
   23640:	2100      	movs	r1, #0
   23642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   23646:	6866      	ldr	r6, [r4, #4]
   23648:	2e00      	cmp	r6, #0
   2364a:	60a6      	str	r6, [r4, #8]
   2364c:	dbb9      	blt.n	235c2 <_printf_i+0xde>
   2364e:	6821      	ldr	r1, [r4, #0]
   23650:	f021 0104 	bic.w	r1, r1, #4
   23654:	6021      	str	r1, [r4, #0]
   23656:	2d00      	cmp	r5, #0
   23658:	d1b3      	bne.n	235c2 <_printf_i+0xde>
   2365a:	2e00      	cmp	r6, #0
   2365c:	d1b1      	bne.n	235c2 <_printf_i+0xde>
   2365e:	4616      	mov	r6, r2
   23660:	e7bb      	b.n	235da <_printf_i+0xf6>
   23662:	6823      	ldr	r3, [r4, #0]
   23664:	f043 0320 	orr.w	r3, r3, #32
   23668:	6023      	str	r3, [r4, #0]
   2366a:	2778      	movs	r7, #120	; 0x78
   2366c:	4833      	ldr	r0, [pc, #204]	; (2373c <_printf_i+0x258>)
   2366e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   23672:	6829      	ldr	r1, [r5, #0]
   23674:	6823      	ldr	r3, [r4, #0]
   23676:	1d0e      	adds	r6, r1, #4
   23678:	602e      	str	r6, [r5, #0]
   2367a:	061e      	lsls	r6, r3, #24
   2367c:	d503      	bpl.n	23686 <_printf_i+0x1a2>
   2367e:	680d      	ldr	r5, [r1, #0]
   23680:	e004      	b.n	2368c <_printf_i+0x1a8>
   23682:	482d      	ldr	r0, [pc, #180]	; (23738 <_printf_i+0x254>)
   23684:	e7f3      	b.n	2366e <_printf_i+0x18a>
   23686:	065d      	lsls	r5, r3, #25
   23688:	d5f9      	bpl.n	2367e <_printf_i+0x19a>
   2368a:	880d      	ldrh	r5, [r1, #0]
   2368c:	07d9      	lsls	r1, r3, #31
   2368e:	bf44      	itt	mi
   23690:	f043 0320 	orrmi.w	r3, r3, #32
   23694:	6023      	strmi	r3, [r4, #0]
   23696:	b10d      	cbz	r5, 2369c <_printf_i+0x1b8>
   23698:	2310      	movs	r3, #16
   2369a:	e7d1      	b.n	23640 <_printf_i+0x15c>
   2369c:	6823      	ldr	r3, [r4, #0]
   2369e:	f023 0320 	bic.w	r3, r3, #32
   236a2:	6023      	str	r3, [r4, #0]
   236a4:	e7f8      	b.n	23698 <_printf_i+0x1b4>
   236a6:	4824      	ldr	r0, [pc, #144]	; (23738 <_printf_i+0x254>)
   236a8:	230a      	movs	r3, #10
   236aa:	e7cc      	b.n	23646 <_printf_i+0x162>
   236ac:	682b      	ldr	r3, [r5, #0]
   236ae:	6826      	ldr	r6, [r4, #0]
   236b0:	1d18      	adds	r0, r3, #4
   236b2:	6961      	ldr	r1, [r4, #20]
   236b4:	6028      	str	r0, [r5, #0]
   236b6:	0635      	lsls	r5, r6, #24
   236b8:	681b      	ldr	r3, [r3, #0]
   236ba:	d501      	bpl.n	236c0 <_printf_i+0x1dc>
   236bc:	6019      	str	r1, [r3, #0]
   236be:	e002      	b.n	236c6 <_printf_i+0x1e2>
   236c0:	0670      	lsls	r0, r6, #25
   236c2:	d5fb      	bpl.n	236bc <_printf_i+0x1d8>
   236c4:	8019      	strh	r1, [r3, #0]
   236c6:	2300      	movs	r3, #0
   236c8:	4616      	mov	r6, r2
   236ca:	6123      	str	r3, [r4, #16]
   236cc:	e795      	b.n	235fa <_printf_i+0x116>
   236ce:	682b      	ldr	r3, [r5, #0]
   236d0:	2100      	movs	r1, #0
   236d2:	1d1a      	adds	r2, r3, #4
   236d4:	602a      	str	r2, [r5, #0]
   236d6:	681e      	ldr	r6, [r3, #0]
   236d8:	6862      	ldr	r2, [r4, #4]
   236da:	4630      	mov	r0, r6
   236dc:	f006 fae2 	bl	29ca4 <memchr>
   236e0:	b108      	cbz	r0, 236e6 <_printf_i+0x202>
   236e2:	1b80      	subs	r0, r0, r6
   236e4:	6060      	str	r0, [r4, #4]
   236e6:	6863      	ldr	r3, [r4, #4]
   236e8:	6123      	str	r3, [r4, #16]
   236ea:	2300      	movs	r3, #0
   236ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   236f0:	e783      	b.n	235fa <_printf_i+0x116>
   236f2:	6923      	ldr	r3, [r4, #16]
   236f4:	4632      	mov	r2, r6
   236f6:	4649      	mov	r1, r9
   236f8:	4640      	mov	r0, r8
   236fa:	47d0      	blx	sl
   236fc:	3001      	adds	r0, #1
   236fe:	d086      	beq.n	2360e <_printf_i+0x12a>
   23700:	6823      	ldr	r3, [r4, #0]
   23702:	079b      	lsls	r3, r3, #30
   23704:	d414      	bmi.n	23730 <_printf_i+0x24c>
   23706:	68e0      	ldr	r0, [r4, #12]
   23708:	9b03      	ldr	r3, [sp, #12]
   2370a:	4298      	cmp	r0, r3
   2370c:	bfb8      	it	lt
   2370e:	4618      	movlt	r0, r3
   23710:	e77f      	b.n	23612 <_printf_i+0x12e>
   23712:	2301      	movs	r3, #1
   23714:	4632      	mov	r2, r6
   23716:	4649      	mov	r1, r9
   23718:	4640      	mov	r0, r8
   2371a:	47d0      	blx	sl
   2371c:	3001      	adds	r0, #1
   2371e:	f43f af76 	beq.w	2360e <_printf_i+0x12a>
   23722:	3501      	adds	r5, #1
   23724:	68e3      	ldr	r3, [r4, #12]
   23726:	9903      	ldr	r1, [sp, #12]
   23728:	1a5b      	subs	r3, r3, r1
   2372a:	42ab      	cmp	r3, r5
   2372c:	dcf1      	bgt.n	23712 <_printf_i+0x22e>
   2372e:	e7ea      	b.n	23706 <_printf_i+0x222>
   23730:	2500      	movs	r5, #0
   23732:	f104 0619 	add.w	r6, r4, #25
   23736:	e7f5      	b.n	23724 <_printf_i+0x240>
   23738:	000310cd 	.word	0x000310cd
   2373c:	000310de 	.word	0x000310de

00023740 <iprintf>:
   23740:	b40f      	push	{r0, r1, r2, r3}
   23742:	4b0a      	ldr	r3, [pc, #40]	; (2376c <iprintf+0x2c>)
   23744:	b513      	push	{r0, r1, r4, lr}
   23746:	681c      	ldr	r4, [r3, #0]
   23748:	b124      	cbz	r4, 23754 <iprintf+0x14>
   2374a:	69a3      	ldr	r3, [r4, #24]
   2374c:	b913      	cbnz	r3, 23754 <iprintf+0x14>
   2374e:	4620      	mov	r0, r4
   23750:	f000 f87e 	bl	23850 <__sinit>
   23754:	ab05      	add	r3, sp, #20
   23756:	9a04      	ldr	r2, [sp, #16]
   23758:	68a1      	ldr	r1, [r4, #8]
   2375a:	4620      	mov	r0, r4
   2375c:	9301      	str	r3, [sp, #4]
   2375e:	f000 fc35 	bl	23fcc <_vfiprintf_r>
   23762:	b002      	add	sp, #8
   23764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23768:	b004      	add	sp, #16
   2376a:	4770      	bx	lr
   2376c:	20008744 	.word	0x20008744

00023770 <_sbrk_r>:
   23770:	b538      	push	{r3, r4, r5, lr}
   23772:	2300      	movs	r3, #0
   23774:	4d05      	ldr	r5, [pc, #20]	; (2378c <_sbrk_r+0x1c>)
   23776:	4604      	mov	r4, r0
   23778:	4608      	mov	r0, r1
   2377a:	602b      	str	r3, [r5, #0]
   2377c:	f7ed fc3a 	bl	10ff4 <_sbrk>
   23780:	1c43      	adds	r3, r0, #1
   23782:	d102      	bne.n	2378a <_sbrk_r+0x1a>
   23784:	682b      	ldr	r3, [r5, #0]
   23786:	b103      	cbz	r3, 2378a <_sbrk_r+0x1a>
   23788:	6023      	str	r3, [r4, #0]
   2378a:	bd38      	pop	{r3, r4, r5, pc}
   2378c:	20021568 	.word	0x20021568

00023790 <__assert_func>:
   23790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   23792:	4614      	mov	r4, r2
   23794:	461a      	mov	r2, r3
   23796:	4b09      	ldr	r3, [pc, #36]	; (237bc <__assert_func+0x2c>)
   23798:	4605      	mov	r5, r0
   2379a:	681b      	ldr	r3, [r3, #0]
   2379c:	68d8      	ldr	r0, [r3, #12]
   2379e:	b954      	cbnz	r4, 237b6 <__assert_func+0x26>
   237a0:	4b07      	ldr	r3, [pc, #28]	; (237c0 <__assert_func+0x30>)
   237a2:	461c      	mov	r4, r3
   237a4:	9100      	str	r1, [sp, #0]
   237a6:	4907      	ldr	r1, [pc, #28]	; (237c4 <__assert_func+0x34>)
   237a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
   237ac:	462b      	mov	r3, r5
   237ae:	f000 f8cd 	bl	2394c <fiprintf>
   237b2:	f006 fb59 	bl	29e68 <abort>
   237b6:	4b04      	ldr	r3, [pc, #16]	; (237c8 <__assert_func+0x38>)
   237b8:	e7f4      	b.n	237a4 <__assert_func+0x14>
   237ba:	bf00      	nop
   237bc:	20008744 	.word	0x20008744
   237c0:	0002f304 	.word	0x0002f304
   237c4:	000310fc 	.word	0x000310fc
   237c8:	000310ef 	.word	0x000310ef

000237cc <std>:
   237cc:	2300      	movs	r3, #0
   237ce:	b510      	push	{r4, lr}
   237d0:	4604      	mov	r4, r0
   237d2:	6083      	str	r3, [r0, #8]
   237d4:	8181      	strh	r1, [r0, #12]
   237d6:	4619      	mov	r1, r3
   237d8:	6643      	str	r3, [r0, #100]	; 0x64
   237da:	81c2      	strh	r2, [r0, #14]
   237dc:	2208      	movs	r2, #8
   237de:	6183      	str	r3, [r0, #24]
   237e0:	e9c0 3300 	strd	r3, r3, [r0]
   237e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   237e8:	305c      	adds	r0, #92	; 0x5c
   237ea:	f006 f838 	bl	2985e <memset>
   237ee:	4b05      	ldr	r3, [pc, #20]	; (23804 <std+0x38>)
   237f0:	6224      	str	r4, [r4, #32]
   237f2:	6263      	str	r3, [r4, #36]	; 0x24
   237f4:	4b04      	ldr	r3, [pc, #16]	; (23808 <std+0x3c>)
   237f6:	62a3      	str	r3, [r4, #40]	; 0x28
   237f8:	4b04      	ldr	r3, [pc, #16]	; (2380c <std+0x40>)
   237fa:	62e3      	str	r3, [r4, #44]	; 0x2c
   237fc:	4b04      	ldr	r3, [pc, #16]	; (23810 <std+0x44>)
   237fe:	6323      	str	r3, [r4, #48]	; 0x30
   23800:	bd10      	pop	{r4, pc}
   23802:	bf00      	nop
   23804:	00029de3 	.word	0x00029de3
   23808:	00029e05 	.word	0x00029e05
   2380c:	00029e3d 	.word	0x00029e3d
   23810:	00029e61 	.word	0x00029e61

00023814 <_cleanup_r>:
   23814:	4901      	ldr	r1, [pc, #4]	; (2381c <_cleanup_r+0x8>)
   23816:	f006 ba26 	b.w	29c66 <_fwalk_reent>
   2381a:	bf00      	nop
   2381c:	000243e5 	.word	0x000243e5

00023820 <__sfp_lock_acquire>:
   23820:	4801      	ldr	r0, [pc, #4]	; (23828 <__sfp_lock_acquire+0x8>)
   23822:	f7ed bc2b 	b.w	1107c <__retarget_lock_acquire_recursive>
   23826:	bf00      	nop
   23828:	20008a94 	.word	0x20008a94

0002382c <__sfp_lock_release>:
   2382c:	4801      	ldr	r0, [pc, #4]	; (23834 <__sfp_lock_release+0x8>)
   2382e:	f7ed bc41 	b.w	110b4 <__retarget_lock_release_recursive>
   23832:	bf00      	nop
   23834:	20008a94 	.word	0x20008a94

00023838 <__sinit_lock_acquire>:
   23838:	4801      	ldr	r0, [pc, #4]	; (23840 <__sinit_lock_acquire+0x8>)
   2383a:	f7ed bc1f 	b.w	1107c <__retarget_lock_acquire_recursive>
   2383e:	bf00      	nop
   23840:	20008aa8 	.word	0x20008aa8

00023844 <__sinit_lock_release>:
   23844:	4801      	ldr	r0, [pc, #4]	; (2384c <__sinit_lock_release+0x8>)
   23846:	f7ed bc35 	b.w	110b4 <__retarget_lock_release_recursive>
   2384a:	bf00      	nop
   2384c:	20008aa8 	.word	0x20008aa8

00023850 <__sinit>:
   23850:	b510      	push	{r4, lr}
   23852:	4604      	mov	r4, r0
   23854:	f7ff fff0 	bl	23838 <__sinit_lock_acquire>
   23858:	69a3      	ldr	r3, [r4, #24]
   2385a:	b11b      	cbz	r3, 23864 <__sinit+0x14>
   2385c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23860:	f7ff bff0 	b.w	23844 <__sinit_lock_release>
   23864:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   23868:	6523      	str	r3, [r4, #80]	; 0x50
   2386a:	4620      	mov	r0, r4
   2386c:	4b12      	ldr	r3, [pc, #72]	; (238b8 <__sinit+0x68>)
   2386e:	4a13      	ldr	r2, [pc, #76]	; (238bc <__sinit+0x6c>)
   23870:	681b      	ldr	r3, [r3, #0]
   23872:	62a2      	str	r2, [r4, #40]	; 0x28
   23874:	42a3      	cmp	r3, r4
   23876:	bf04      	itt	eq
   23878:	2301      	moveq	r3, #1
   2387a:	61a3      	streq	r3, [r4, #24]
   2387c:	f000 f820 	bl	238c0 <__sfp>
   23880:	6060      	str	r0, [r4, #4]
   23882:	4620      	mov	r0, r4
   23884:	f000 f81c 	bl	238c0 <__sfp>
   23888:	60a0      	str	r0, [r4, #8]
   2388a:	4620      	mov	r0, r4
   2388c:	f000 f818 	bl	238c0 <__sfp>
   23890:	2200      	movs	r2, #0
   23892:	2104      	movs	r1, #4
   23894:	60e0      	str	r0, [r4, #12]
   23896:	6860      	ldr	r0, [r4, #4]
   23898:	f7ff ff98 	bl	237cc <std>
   2389c:	2201      	movs	r2, #1
   2389e:	2109      	movs	r1, #9
   238a0:	68a0      	ldr	r0, [r4, #8]
   238a2:	f7ff ff93 	bl	237cc <std>
   238a6:	2202      	movs	r2, #2
   238a8:	2112      	movs	r1, #18
   238aa:	68e0      	ldr	r0, [r4, #12]
   238ac:	f7ff ff8e 	bl	237cc <std>
   238b0:	2301      	movs	r3, #1
   238b2:	61a3      	str	r3, [r4, #24]
   238b4:	e7d2      	b.n	2385c <__sinit+0xc>
   238b6:	bf00      	nop
   238b8:	0002b5f4 	.word	0x0002b5f4
   238bc:	00023815 	.word	0x00023815

000238c0 <__sfp>:
   238c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   238c2:	4607      	mov	r7, r0
   238c4:	f7ff ffac 	bl	23820 <__sfp_lock_acquire>
   238c8:	4b1e      	ldr	r3, [pc, #120]	; (23944 <__sfp+0x84>)
   238ca:	681e      	ldr	r6, [r3, #0]
   238cc:	69b3      	ldr	r3, [r6, #24]
   238ce:	b913      	cbnz	r3, 238d6 <__sfp+0x16>
   238d0:	4630      	mov	r0, r6
   238d2:	f7ff ffbd 	bl	23850 <__sinit>
   238d6:	3648      	adds	r6, #72	; 0x48
   238d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   238dc:	3b01      	subs	r3, #1
   238de:	d503      	bpl.n	238e8 <__sfp+0x28>
   238e0:	6833      	ldr	r3, [r6, #0]
   238e2:	b30b      	cbz	r3, 23928 <__sfp+0x68>
   238e4:	6836      	ldr	r6, [r6, #0]
   238e6:	e7f7      	b.n	238d8 <__sfp+0x18>
   238e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   238ec:	b9d5      	cbnz	r5, 23924 <__sfp+0x64>
   238ee:	4b16      	ldr	r3, [pc, #88]	; (23948 <__sfp+0x88>)
   238f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   238f4:	6665      	str	r5, [r4, #100]	; 0x64
   238f6:	60e3      	str	r3, [r4, #12]
   238f8:	f7ed fb90 	bl	1101c <__retarget_lock_init_recursive>
   238fc:	f7ff ff96 	bl	2382c <__sfp_lock_release>
   23900:	2208      	movs	r2, #8
   23902:	4629      	mov	r1, r5
   23904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   23908:	6025      	str	r5, [r4, #0]
   2390a:	61a5      	str	r5, [r4, #24]
   2390c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   23910:	e9c4 5504 	strd	r5, r5, [r4, #16]
   23914:	f005 ffa3 	bl	2985e <memset>
   23918:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   2391c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   23920:	4620      	mov	r0, r4
   23922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23924:	3468      	adds	r4, #104	; 0x68
   23926:	e7d9      	b.n	238dc <__sfp+0x1c>
   23928:	2104      	movs	r1, #4
   2392a:	4638      	mov	r0, r7
   2392c:	f006 f985 	bl	29c3a <__sfmoreglue>
   23930:	4604      	mov	r4, r0
   23932:	6030      	str	r0, [r6, #0]
   23934:	2800      	cmp	r0, #0
   23936:	d1d5      	bne.n	238e4 <__sfp+0x24>
   23938:	f7ff ff78 	bl	2382c <__sfp_lock_release>
   2393c:	230c      	movs	r3, #12
   2393e:	603b      	str	r3, [r7, #0]
   23940:	e7ee      	b.n	23920 <__sfp+0x60>
   23942:	bf00      	nop
   23944:	0002b5f4 	.word	0x0002b5f4
   23948:	ffff0001 	.word	0xffff0001

0002394c <fiprintf>:
   2394c:	b40e      	push	{r1, r2, r3}
   2394e:	b503      	push	{r0, r1, lr}
   23950:	ab03      	add	r3, sp, #12
   23952:	4601      	mov	r1, r0
   23954:	4805      	ldr	r0, [pc, #20]	; (2396c <fiprintf+0x20>)
   23956:	f853 2b04 	ldr.w	r2, [r3], #4
   2395a:	6800      	ldr	r0, [r0, #0]
   2395c:	9301      	str	r3, [sp, #4]
   2395e:	f000 fb35 	bl	23fcc <_vfiprintf_r>
   23962:	b002      	add	sp, #8
   23964:	f85d eb04 	ldr.w	lr, [sp], #4
   23968:	b003      	add	sp, #12
   2396a:	4770      	bx	lr
   2396c:	20008744 	.word	0x20008744

00023970 <_localeconv_r>:
   23970:	4800      	ldr	r0, [pc, #0]	; (23974 <_localeconv_r+0x4>)
   23972:	4770      	bx	lr
   23974:	20008898 	.word	0x20008898

00023978 <__malloc_lock>:
   23978:	4801      	ldr	r0, [pc, #4]	; (23980 <__malloc_lock+0x8>)
   2397a:	f7ed bb7f 	b.w	1107c <__retarget_lock_acquire_recursive>
   2397e:	bf00      	nop
   23980:	20008a80 	.word	0x20008a80

00023984 <__malloc_unlock>:
   23984:	4801      	ldr	r0, [pc, #4]	; (2398c <__malloc_unlock+0x8>)
   23986:	f7ed bb95 	b.w	110b4 <__retarget_lock_release_recursive>
   2398a:	bf00      	nop
   2398c:	20008a80 	.word	0x20008a80

00023990 <_Balloc>:
   23990:	b570      	push	{r4, r5, r6, lr}
   23992:	6a46      	ldr	r6, [r0, #36]	; 0x24
   23994:	4604      	mov	r4, r0
   23996:	460d      	mov	r5, r1
   23998:	b976      	cbnz	r6, 239b8 <_Balloc+0x28>
   2399a:	2010      	movs	r0, #16
   2399c:	f7ff fac0 	bl	22f20 <malloc>
   239a0:	4602      	mov	r2, r0
   239a2:	6260      	str	r0, [r4, #36]	; 0x24
   239a4:	b920      	cbnz	r0, 239b0 <_Balloc+0x20>
   239a6:	4b18      	ldr	r3, [pc, #96]	; (23a08 <_Balloc+0x78>)
   239a8:	2166      	movs	r1, #102	; 0x66
   239aa:	4818      	ldr	r0, [pc, #96]	; (23a0c <_Balloc+0x7c>)
   239ac:	f7ff fef0 	bl	23790 <__assert_func>
   239b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   239b4:	6006      	str	r6, [r0, #0]
   239b6:	60c6      	str	r6, [r0, #12]
   239b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   239ba:	68f3      	ldr	r3, [r6, #12]
   239bc:	b183      	cbz	r3, 239e0 <_Balloc+0x50>
   239be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   239c0:	68db      	ldr	r3, [r3, #12]
   239c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   239c6:	b9b8      	cbnz	r0, 239f8 <_Balloc+0x68>
   239c8:	2101      	movs	r1, #1
   239ca:	4620      	mov	r0, r4
   239cc:	fa01 f605 	lsl.w	r6, r1, r5
   239d0:	1d72      	adds	r2, r6, #5
   239d2:	0092      	lsls	r2, r2, #2
   239d4:	f005 ff4b 	bl	2986e <_calloc_r>
   239d8:	b160      	cbz	r0, 239f4 <_Balloc+0x64>
   239da:	e9c0 5601 	strd	r5, r6, [r0, #4]
   239de:	e00e      	b.n	239fe <_Balloc+0x6e>
   239e0:	2221      	movs	r2, #33	; 0x21
   239e2:	2104      	movs	r1, #4
   239e4:	4620      	mov	r0, r4
   239e6:	f005 ff42 	bl	2986e <_calloc_r>
   239ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   239ec:	60f0      	str	r0, [r6, #12]
   239ee:	68db      	ldr	r3, [r3, #12]
   239f0:	2b00      	cmp	r3, #0
   239f2:	d1e4      	bne.n	239be <_Balloc+0x2e>
   239f4:	2000      	movs	r0, #0
   239f6:	bd70      	pop	{r4, r5, r6, pc}
   239f8:	6802      	ldr	r2, [r0, #0]
   239fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   239fe:	2300      	movs	r3, #0
   23a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
   23a04:	e7f7      	b.n	239f6 <_Balloc+0x66>
   23a06:	bf00      	nop
   23a08:	00031138 	.word	0x00031138
   23a0c:	000311d4 	.word	0x000311d4

00023a10 <_Bfree>:
   23a10:	b570      	push	{r4, r5, r6, lr}
   23a12:	6a46      	ldr	r6, [r0, #36]	; 0x24
   23a14:	4605      	mov	r5, r0
   23a16:	460c      	mov	r4, r1
   23a18:	b976      	cbnz	r6, 23a38 <_Bfree+0x28>
   23a1a:	2010      	movs	r0, #16
   23a1c:	f7ff fa80 	bl	22f20 <malloc>
   23a20:	4602      	mov	r2, r0
   23a22:	6268      	str	r0, [r5, #36]	; 0x24
   23a24:	b920      	cbnz	r0, 23a30 <_Bfree+0x20>
   23a26:	4b09      	ldr	r3, [pc, #36]	; (23a4c <_Bfree+0x3c>)
   23a28:	218a      	movs	r1, #138	; 0x8a
   23a2a:	4809      	ldr	r0, [pc, #36]	; (23a50 <_Bfree+0x40>)
   23a2c:	f7ff feb0 	bl	23790 <__assert_func>
   23a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
   23a34:	6006      	str	r6, [r0, #0]
   23a36:	60c6      	str	r6, [r0, #12]
   23a38:	b13c      	cbz	r4, 23a4a <_Bfree+0x3a>
   23a3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23a3c:	6862      	ldr	r2, [r4, #4]
   23a3e:	68db      	ldr	r3, [r3, #12]
   23a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   23a44:	6021      	str	r1, [r4, #0]
   23a46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   23a4a:	bd70      	pop	{r4, r5, r6, pc}
   23a4c:	00031138 	.word	0x00031138
   23a50:	000311d4 	.word	0x000311d4

00023a54 <__multadd>:
   23a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a58:	f101 0c14 	add.w	ip, r1, #20
   23a5c:	4607      	mov	r7, r0
   23a5e:	460c      	mov	r4, r1
   23a60:	461e      	mov	r6, r3
   23a62:	690d      	ldr	r5, [r1, #16]
   23a64:	2000      	movs	r0, #0
   23a66:	f8dc 3000 	ldr.w	r3, [ip]
   23a6a:	3001      	adds	r0, #1
   23a6c:	b299      	uxth	r1, r3
   23a6e:	4285      	cmp	r5, r0
   23a70:	fb02 6101 	mla	r1, r2, r1, r6
   23a74:	ea4f 4613 	mov.w	r6, r3, lsr #16
   23a78:	ea4f 4311 	mov.w	r3, r1, lsr #16
   23a7c:	b289      	uxth	r1, r1
   23a7e:	fb02 3306 	mla	r3, r2, r6, r3
   23a82:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   23a86:	ea4f 4613 	mov.w	r6, r3, lsr #16
   23a8a:	f84c 1b04 	str.w	r1, [ip], #4
   23a8e:	dcea      	bgt.n	23a66 <__multadd+0x12>
   23a90:	b30e      	cbz	r6, 23ad6 <__multadd+0x82>
   23a92:	68a3      	ldr	r3, [r4, #8]
   23a94:	42ab      	cmp	r3, r5
   23a96:	dc19      	bgt.n	23acc <__multadd+0x78>
   23a98:	6861      	ldr	r1, [r4, #4]
   23a9a:	4638      	mov	r0, r7
   23a9c:	3101      	adds	r1, #1
   23a9e:	f7ff ff77 	bl	23990 <_Balloc>
   23aa2:	4680      	mov	r8, r0
   23aa4:	b928      	cbnz	r0, 23ab2 <__multadd+0x5e>
   23aa6:	4602      	mov	r2, r0
   23aa8:	4b0c      	ldr	r3, [pc, #48]	; (23adc <__multadd+0x88>)
   23aaa:	21b5      	movs	r1, #181	; 0xb5
   23aac:	480c      	ldr	r0, [pc, #48]	; (23ae0 <__multadd+0x8c>)
   23aae:	f7ff fe6f 	bl	23790 <__assert_func>
   23ab2:	6922      	ldr	r2, [r4, #16]
   23ab4:	f104 010c 	add.w	r1, r4, #12
   23ab8:	300c      	adds	r0, #12
   23aba:	3202      	adds	r2, #2
   23abc:	0092      	lsls	r2, r2, #2
   23abe:	f005 fe94 	bl	297ea <memcpy>
   23ac2:	4621      	mov	r1, r4
   23ac4:	4644      	mov	r4, r8
   23ac6:	4638      	mov	r0, r7
   23ac8:	f7ff ffa2 	bl	23a10 <_Bfree>
   23acc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   23ad0:	3501      	adds	r5, #1
   23ad2:	615e      	str	r6, [r3, #20]
   23ad4:	6125      	str	r5, [r4, #16]
   23ad6:	4620      	mov	r0, r4
   23ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23adc:	000311c3 	.word	0x000311c3
   23ae0:	000311d4 	.word	0x000311d4

00023ae4 <__i2b>:
   23ae4:	b510      	push	{r4, lr}
   23ae6:	460c      	mov	r4, r1
   23ae8:	2101      	movs	r1, #1
   23aea:	f7ff ff51 	bl	23990 <_Balloc>
   23aee:	4602      	mov	r2, r0
   23af0:	b928      	cbnz	r0, 23afe <__i2b+0x1a>
   23af2:	4b05      	ldr	r3, [pc, #20]	; (23b08 <__i2b+0x24>)
   23af4:	f44f 71a0 	mov.w	r1, #320	; 0x140
   23af8:	4804      	ldr	r0, [pc, #16]	; (23b0c <__i2b+0x28>)
   23afa:	f7ff fe49 	bl	23790 <__assert_func>
   23afe:	2301      	movs	r3, #1
   23b00:	6144      	str	r4, [r0, #20]
   23b02:	6103      	str	r3, [r0, #16]
   23b04:	bd10      	pop	{r4, pc}
   23b06:	bf00      	nop
   23b08:	000311c3 	.word	0x000311c3
   23b0c:	000311d4 	.word	0x000311d4

00023b10 <__multiply>:
   23b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b14:	4614      	mov	r4, r2
   23b16:	690a      	ldr	r2, [r1, #16]
   23b18:	460f      	mov	r7, r1
   23b1a:	b085      	sub	sp, #20
   23b1c:	6923      	ldr	r3, [r4, #16]
   23b1e:	429a      	cmp	r2, r3
   23b20:	bfa2      	ittt	ge
   23b22:	4623      	movge	r3, r4
   23b24:	460c      	movge	r4, r1
   23b26:	461f      	movge	r7, r3
   23b28:	f8d4 a010 	ldr.w	sl, [r4, #16]
   23b2c:	68a3      	ldr	r3, [r4, #8]
   23b2e:	f8d7 9010 	ldr.w	r9, [r7, #16]
   23b32:	6861      	ldr	r1, [r4, #4]
   23b34:	eb0a 0609 	add.w	r6, sl, r9
   23b38:	42b3      	cmp	r3, r6
   23b3a:	bfb8      	it	lt
   23b3c:	3101      	addlt	r1, #1
   23b3e:	f7ff ff27 	bl	23990 <_Balloc>
   23b42:	b930      	cbnz	r0, 23b52 <__multiply+0x42>
   23b44:	4602      	mov	r2, r0
   23b46:	4b45      	ldr	r3, [pc, #276]	; (23c5c <__multiply+0x14c>)
   23b48:	f240 115d 	movw	r1, #349	; 0x15d
   23b4c:	4844      	ldr	r0, [pc, #272]	; (23c60 <__multiply+0x150>)
   23b4e:	f7ff fe1f 	bl	23790 <__assert_func>
   23b52:	f100 0514 	add.w	r5, r0, #20
   23b56:	2200      	movs	r2, #0
   23b58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   23b5c:	462b      	mov	r3, r5
   23b5e:	4543      	cmp	r3, r8
   23b60:	d321      	bcc.n	23ba6 <__multiply+0x96>
   23b62:	f107 0114 	add.w	r1, r7, #20
   23b66:	f104 0214 	add.w	r2, r4, #20
   23b6a:	f104 0715 	add.w	r7, r4, #21
   23b6e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   23b72:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   23b76:	9302      	str	r3, [sp, #8]
   23b78:	1b13      	subs	r3, r2, r4
   23b7a:	3b15      	subs	r3, #21
   23b7c:	f023 0303 	bic.w	r3, r3, #3
   23b80:	3304      	adds	r3, #4
   23b82:	42ba      	cmp	r2, r7
   23b84:	bf38      	it	cc
   23b86:	2304      	movcc	r3, #4
   23b88:	9301      	str	r3, [sp, #4]
   23b8a:	9b02      	ldr	r3, [sp, #8]
   23b8c:	9103      	str	r1, [sp, #12]
   23b8e:	428b      	cmp	r3, r1
   23b90:	d80c      	bhi.n	23bac <__multiply+0x9c>
   23b92:	2e00      	cmp	r6, #0
   23b94:	dd03      	ble.n	23b9e <__multiply+0x8e>
   23b96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   23b9a:	2b00      	cmp	r3, #0
   23b9c:	d05b      	beq.n	23c56 <__multiply+0x146>
   23b9e:	6106      	str	r6, [r0, #16]
   23ba0:	b005      	add	sp, #20
   23ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ba6:	f843 2b04 	str.w	r2, [r3], #4
   23baa:	e7d8      	b.n	23b5e <__multiply+0x4e>
   23bac:	f8b1 a000 	ldrh.w	sl, [r1]
   23bb0:	f1ba 0f00 	cmp.w	sl, #0
   23bb4:	d024      	beq.n	23c00 <__multiply+0xf0>
   23bb6:	f104 0e14 	add.w	lr, r4, #20
   23bba:	46a9      	mov	r9, r5
   23bbc:	f04f 0c00 	mov.w	ip, #0
   23bc0:	f85e 7b04 	ldr.w	r7, [lr], #4
   23bc4:	f8d9 3000 	ldr.w	r3, [r9]
   23bc8:	fa1f fb87 	uxth.w	fp, r7
   23bcc:	4572      	cmp	r2, lr
   23bce:	b29b      	uxth	r3, r3
   23bd0:	ea4f 4717 	mov.w	r7, r7, lsr #16
   23bd4:	fb0a 330b 	mla	r3, sl, fp, r3
   23bd8:	4463      	add	r3, ip
   23bda:	f8d9 c000 	ldr.w	ip, [r9]
   23bde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   23be2:	fb0a c707 	mla	r7, sl, r7, ip
   23be6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   23bea:	b29b      	uxth	r3, r3
   23bec:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   23bf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   23bf4:	f849 3b04 	str.w	r3, [r9], #4
   23bf8:	d8e2      	bhi.n	23bc0 <__multiply+0xb0>
   23bfa:	9b01      	ldr	r3, [sp, #4]
   23bfc:	f845 c003 	str.w	ip, [r5, r3]
   23c00:	9b03      	ldr	r3, [sp, #12]
   23c02:	3104      	adds	r1, #4
   23c04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   23c08:	f1b9 0f00 	cmp.w	r9, #0
   23c0c:	d021      	beq.n	23c52 <__multiply+0x142>
   23c0e:	682b      	ldr	r3, [r5, #0]
   23c10:	f104 0c14 	add.w	ip, r4, #20
   23c14:	46ae      	mov	lr, r5
   23c16:	f04f 0a00 	mov.w	sl, #0
   23c1a:	f8bc b000 	ldrh.w	fp, [ip]
   23c1e:	b29b      	uxth	r3, r3
   23c20:	f8be 7002 	ldrh.w	r7, [lr, #2]
   23c24:	fb09 770b 	mla	r7, r9, fp, r7
   23c28:	4457      	add	r7, sl
   23c2a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   23c2e:	f84e 3b04 	str.w	r3, [lr], #4
   23c32:	f85c 3b04 	ldr.w	r3, [ip], #4
   23c36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   23c3a:	f8be 3000 	ldrh.w	r3, [lr]
   23c3e:	4562      	cmp	r2, ip
   23c40:	fb09 330a 	mla	r3, r9, sl, r3
   23c44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   23c48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   23c4c:	d8e5      	bhi.n	23c1a <__multiply+0x10a>
   23c4e:	9f01      	ldr	r7, [sp, #4]
   23c50:	51eb      	str	r3, [r5, r7]
   23c52:	3504      	adds	r5, #4
   23c54:	e799      	b.n	23b8a <__multiply+0x7a>
   23c56:	3e01      	subs	r6, #1
   23c58:	e79b      	b.n	23b92 <__multiply+0x82>
   23c5a:	bf00      	nop
   23c5c:	000311c3 	.word	0x000311c3
   23c60:	000311d4 	.word	0x000311d4

00023c64 <__pow5mult>:
   23c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23c68:	4615      	mov	r5, r2
   23c6a:	f012 0203 	ands.w	r2, r2, #3
   23c6e:	4607      	mov	r7, r0
   23c70:	460e      	mov	r6, r1
   23c72:	d007      	beq.n	23c84 <__pow5mult+0x20>
   23c74:	3a01      	subs	r2, #1
   23c76:	4c25      	ldr	r4, [pc, #148]	; (23d0c <__pow5mult+0xa8>)
   23c78:	2300      	movs	r3, #0
   23c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   23c7e:	f7ff fee9 	bl	23a54 <__multadd>
   23c82:	4606      	mov	r6, r0
   23c84:	10ad      	asrs	r5, r5, #2
   23c86:	d03d      	beq.n	23d04 <__pow5mult+0xa0>
   23c88:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   23c8a:	b97c      	cbnz	r4, 23cac <__pow5mult+0x48>
   23c8c:	2010      	movs	r0, #16
   23c8e:	f7ff f947 	bl	22f20 <malloc>
   23c92:	4602      	mov	r2, r0
   23c94:	6278      	str	r0, [r7, #36]	; 0x24
   23c96:	b928      	cbnz	r0, 23ca4 <__pow5mult+0x40>
   23c98:	4b1d      	ldr	r3, [pc, #116]	; (23d10 <__pow5mult+0xac>)
   23c9a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   23c9e:	481d      	ldr	r0, [pc, #116]	; (23d14 <__pow5mult+0xb0>)
   23ca0:	f7ff fd76 	bl	23790 <__assert_func>
   23ca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   23ca8:	6004      	str	r4, [r0, #0]
   23caa:	60c4      	str	r4, [r0, #12]
   23cac:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   23cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   23cb4:	b94c      	cbnz	r4, 23cca <__pow5mult+0x66>
   23cb6:	f240 2171 	movw	r1, #625	; 0x271
   23cba:	4638      	mov	r0, r7
   23cbc:	f7ff ff12 	bl	23ae4 <__i2b>
   23cc0:	2300      	movs	r3, #0
   23cc2:	4604      	mov	r4, r0
   23cc4:	f8c8 0008 	str.w	r0, [r8, #8]
   23cc8:	6003      	str	r3, [r0, #0]
   23cca:	f04f 0900 	mov.w	r9, #0
   23cce:	07eb      	lsls	r3, r5, #31
   23cd0:	d50a      	bpl.n	23ce8 <__pow5mult+0x84>
   23cd2:	4631      	mov	r1, r6
   23cd4:	4622      	mov	r2, r4
   23cd6:	4638      	mov	r0, r7
   23cd8:	f7ff ff1a 	bl	23b10 <__multiply>
   23cdc:	4680      	mov	r8, r0
   23cde:	4631      	mov	r1, r6
   23ce0:	4638      	mov	r0, r7
   23ce2:	4646      	mov	r6, r8
   23ce4:	f7ff fe94 	bl	23a10 <_Bfree>
   23ce8:	106d      	asrs	r5, r5, #1
   23cea:	d00b      	beq.n	23d04 <__pow5mult+0xa0>
   23cec:	6820      	ldr	r0, [r4, #0]
   23cee:	b938      	cbnz	r0, 23d00 <__pow5mult+0x9c>
   23cf0:	4622      	mov	r2, r4
   23cf2:	4621      	mov	r1, r4
   23cf4:	4638      	mov	r0, r7
   23cf6:	f7ff ff0b 	bl	23b10 <__multiply>
   23cfa:	6020      	str	r0, [r4, #0]
   23cfc:	f8c0 9000 	str.w	r9, [r0]
   23d00:	4604      	mov	r4, r0
   23d02:	e7e4      	b.n	23cce <__pow5mult+0x6a>
   23d04:	4630      	mov	r0, r6
   23d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23d0a:	bf00      	nop
   23d0c:	0002b658 	.word	0x0002b658
   23d10:	00031138 	.word	0x00031138
   23d14:	000311d4 	.word	0x000311d4

00023d18 <__lshift>:
   23d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23d1c:	460c      	mov	r4, r1
   23d1e:	4607      	mov	r7, r0
   23d20:	4691      	mov	r9, r2
   23d22:	ea4f 1a62 	mov.w	sl, r2, asr #5
   23d26:	6923      	ldr	r3, [r4, #16]
   23d28:	6849      	ldr	r1, [r1, #4]
   23d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   23d2e:	68a3      	ldr	r3, [r4, #8]
   23d30:	f108 0601 	add.w	r6, r8, #1
   23d34:	42b3      	cmp	r3, r6
   23d36:	db0b      	blt.n	23d50 <__lshift+0x38>
   23d38:	4638      	mov	r0, r7
   23d3a:	f7ff fe29 	bl	23990 <_Balloc>
   23d3e:	4605      	mov	r5, r0
   23d40:	b948      	cbnz	r0, 23d56 <__lshift+0x3e>
   23d42:	4602      	mov	r2, r0
   23d44:	4b28      	ldr	r3, [pc, #160]	; (23de8 <__lshift+0xd0>)
   23d46:	f240 11d9 	movw	r1, #473	; 0x1d9
   23d4a:	4828      	ldr	r0, [pc, #160]	; (23dec <__lshift+0xd4>)
   23d4c:	f7ff fd20 	bl	23790 <__assert_func>
   23d50:	3101      	adds	r1, #1
   23d52:	005b      	lsls	r3, r3, #1
   23d54:	e7ee      	b.n	23d34 <__lshift+0x1c>
   23d56:	2300      	movs	r3, #0
   23d58:	f100 0114 	add.w	r1, r0, #20
   23d5c:	f100 0210 	add.w	r2, r0, #16
   23d60:	4618      	mov	r0, r3
   23d62:	4553      	cmp	r3, sl
   23d64:	db33      	blt.n	23dce <__lshift+0xb6>
   23d66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   23d6a:	f104 0314 	add.w	r3, r4, #20
   23d6e:	6920      	ldr	r0, [r4, #16]
   23d70:	f019 091f 	ands.w	r9, r9, #31
   23d74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   23d78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   23d7c:	d02b      	beq.n	23dd6 <__lshift+0xbe>
   23d7e:	f1c9 0e20 	rsb	lr, r9, #32
   23d82:	468a      	mov	sl, r1
   23d84:	2200      	movs	r2, #0
   23d86:	6818      	ldr	r0, [r3, #0]
   23d88:	fa00 f009 	lsl.w	r0, r0, r9
   23d8c:	4310      	orrs	r0, r2
   23d8e:	f84a 0b04 	str.w	r0, [sl], #4
   23d92:	f853 2b04 	ldr.w	r2, [r3], #4
   23d96:	459c      	cmp	ip, r3
   23d98:	fa22 f20e 	lsr.w	r2, r2, lr
   23d9c:	d8f3      	bhi.n	23d86 <__lshift+0x6e>
   23d9e:	ebac 0304 	sub.w	r3, ip, r4
   23da2:	f104 0015 	add.w	r0, r4, #21
   23da6:	3b15      	subs	r3, #21
   23da8:	f023 0303 	bic.w	r3, r3, #3
   23dac:	3304      	adds	r3, #4
   23dae:	4584      	cmp	ip, r0
   23db0:	bf38      	it	cc
   23db2:	2304      	movcc	r3, #4
   23db4:	50ca      	str	r2, [r1, r3]
   23db6:	b10a      	cbz	r2, 23dbc <__lshift+0xa4>
   23db8:	f108 0602 	add.w	r6, r8, #2
   23dbc:	3e01      	subs	r6, #1
   23dbe:	4638      	mov	r0, r7
   23dc0:	4621      	mov	r1, r4
   23dc2:	612e      	str	r6, [r5, #16]
   23dc4:	f7ff fe24 	bl	23a10 <_Bfree>
   23dc8:	4628      	mov	r0, r5
   23dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23dce:	3301      	adds	r3, #1
   23dd0:	f842 0f04 	str.w	r0, [r2, #4]!
   23dd4:	e7c5      	b.n	23d62 <__lshift+0x4a>
   23dd6:	3904      	subs	r1, #4
   23dd8:	f853 2b04 	ldr.w	r2, [r3], #4
   23ddc:	459c      	cmp	ip, r3
   23dde:	f841 2f04 	str.w	r2, [r1, #4]!
   23de2:	d8f9      	bhi.n	23dd8 <__lshift+0xc0>
   23de4:	e7ea      	b.n	23dbc <__lshift+0xa4>
   23de6:	bf00      	nop
   23de8:	000311c3 	.word	0x000311c3
   23dec:	000311d4 	.word	0x000311d4

00023df0 <__mdiff>:
   23df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23df4:	4689      	mov	r9, r1
   23df6:	4606      	mov	r6, r0
   23df8:	4611      	mov	r1, r2
   23dfa:	4614      	mov	r4, r2
   23dfc:	4648      	mov	r0, r9
   23dfe:	f005 ffae 	bl	29d5e <__mcmp>
   23e02:	1e05      	subs	r5, r0, #0
   23e04:	d112      	bne.n	23e2c <__mdiff+0x3c>
   23e06:	4629      	mov	r1, r5
   23e08:	4630      	mov	r0, r6
   23e0a:	f7ff fdc1 	bl	23990 <_Balloc>
   23e0e:	4602      	mov	r2, r0
   23e10:	b928      	cbnz	r0, 23e1e <__mdiff+0x2e>
   23e12:	4b40      	ldr	r3, [pc, #256]	; (23f14 <__mdiff+0x124>)
   23e14:	f240 2132 	movw	r1, #562	; 0x232
   23e18:	483f      	ldr	r0, [pc, #252]	; (23f18 <__mdiff+0x128>)
   23e1a:	f7ff fcb9 	bl	23790 <__assert_func>
   23e1e:	2301      	movs	r3, #1
   23e20:	e9c0 3504 	strd	r3, r5, [r0, #16]
   23e24:	4610      	mov	r0, r2
   23e26:	b003      	add	sp, #12
   23e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e2c:	bfbc      	itt	lt
   23e2e:	464b      	movlt	r3, r9
   23e30:	46a1      	movlt	r9, r4
   23e32:	4630      	mov	r0, r6
   23e34:	bfb8      	it	lt
   23e36:	2501      	movlt	r5, #1
   23e38:	f8d9 1004 	ldr.w	r1, [r9, #4]
   23e3c:	bfb4      	ite	lt
   23e3e:	461c      	movlt	r4, r3
   23e40:	2500      	movge	r5, #0
   23e42:	f7ff fda5 	bl	23990 <_Balloc>
   23e46:	4602      	mov	r2, r0
   23e48:	b918      	cbnz	r0, 23e52 <__mdiff+0x62>
   23e4a:	4b32      	ldr	r3, [pc, #200]	; (23f14 <__mdiff+0x124>)
   23e4c:	f44f 7110 	mov.w	r1, #576	; 0x240
   23e50:	e7e2      	b.n	23e18 <__mdiff+0x28>
   23e52:	f8d9 7010 	ldr.w	r7, [r9, #16]
   23e56:	f104 0e14 	add.w	lr, r4, #20
   23e5a:	6926      	ldr	r6, [r4, #16]
   23e5c:	f100 0b14 	add.w	fp, r0, #20
   23e60:	60c5      	str	r5, [r0, #12]
   23e62:	f109 0514 	add.w	r5, r9, #20
   23e66:	f109 0310 	add.w	r3, r9, #16
   23e6a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   23e6e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   23e72:	46d9      	mov	r9, fp
   23e74:	f04f 0c00 	mov.w	ip, #0
   23e78:	9301      	str	r3, [sp, #4]
   23e7a:	9b01      	ldr	r3, [sp, #4]
   23e7c:	f85e 0b04 	ldr.w	r0, [lr], #4
   23e80:	f853 af04 	ldr.w	sl, [r3, #4]!
   23e84:	b281      	uxth	r1, r0
   23e86:	4576      	cmp	r6, lr
   23e88:	9301      	str	r3, [sp, #4]
   23e8a:	fa1f f38a 	uxth.w	r3, sl
   23e8e:	ea4f 4010 	mov.w	r0, r0, lsr #16
   23e92:	eba3 0301 	sub.w	r3, r3, r1
   23e96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   23e9a:	4463      	add	r3, ip
   23e9c:	eb00 4023 	add.w	r0, r0, r3, asr #16
   23ea0:	b29b      	uxth	r3, r3
   23ea2:	ea4f 4c20 	mov.w	ip, r0, asr #16
   23ea6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   23eaa:	f849 3b04 	str.w	r3, [r9], #4
   23eae:	d8e4      	bhi.n	23e7a <__mdiff+0x8a>
   23eb0:	1b33      	subs	r3, r6, r4
   23eb2:	3415      	adds	r4, #21
   23eb4:	3b15      	subs	r3, #21
   23eb6:	f023 0303 	bic.w	r3, r3, #3
   23eba:	3304      	adds	r3, #4
   23ebc:	42a6      	cmp	r6, r4
   23ebe:	bf38      	it	cc
   23ec0:	2304      	movcc	r3, #4
   23ec2:	441d      	add	r5, r3
   23ec4:	445b      	add	r3, fp
   23ec6:	462c      	mov	r4, r5
   23ec8:	461e      	mov	r6, r3
   23eca:	4544      	cmp	r4, r8
   23ecc:	d30e      	bcc.n	23eec <__mdiff+0xfc>
   23ece:	f108 0103 	add.w	r1, r8, #3
   23ed2:	1b49      	subs	r1, r1, r5
   23ed4:	3d03      	subs	r5, #3
   23ed6:	f021 0103 	bic.w	r1, r1, #3
   23eda:	45a8      	cmp	r8, r5
   23edc:	bf38      	it	cc
   23ede:	2100      	movcc	r1, #0
   23ee0:	440b      	add	r3, r1
   23ee2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   23ee6:	b199      	cbz	r1, 23f10 <__mdiff+0x120>
   23ee8:	6117      	str	r7, [r2, #16]
   23eea:	e79b      	b.n	23e24 <__mdiff+0x34>
   23eec:	f854 1b04 	ldr.w	r1, [r4], #4
   23ef0:	46e6      	mov	lr, ip
   23ef2:	fa1f fc81 	uxth.w	ip, r1
   23ef6:	0c08      	lsrs	r0, r1, #16
   23ef8:	4471      	add	r1, lr
   23efa:	44f4      	add	ip, lr
   23efc:	b289      	uxth	r1, r1
   23efe:	eb00 402c 	add.w	r0, r0, ip, asr #16
   23f02:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   23f06:	ea4f 4c20 	mov.w	ip, r0, asr #16
   23f0a:	f846 1b04 	str.w	r1, [r6], #4
   23f0e:	e7dc      	b.n	23eca <__mdiff+0xda>
   23f10:	3f01      	subs	r7, #1
   23f12:	e7e6      	b.n	23ee2 <__mdiff+0xf2>
   23f14:	000311c3 	.word	0x000311c3
   23f18:	000311d4 	.word	0x000311d4

00023f1c <__d2b>:
   23f1c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   23f20:	2101      	movs	r1, #1
   23f22:	4690      	mov	r8, r2
   23f24:	4699      	mov	r9, r3
   23f26:	9e08      	ldr	r6, [sp, #32]
   23f28:	f7ff fd32 	bl	23990 <_Balloc>
   23f2c:	4604      	mov	r4, r0
   23f2e:	b930      	cbnz	r0, 23f3e <__d2b+0x22>
   23f30:	4602      	mov	r2, r0
   23f32:	4b24      	ldr	r3, [pc, #144]	; (23fc4 <__d2b+0xa8>)
   23f34:	f240 310a 	movw	r1, #778	; 0x30a
   23f38:	4823      	ldr	r0, [pc, #140]	; (23fc8 <__d2b+0xac>)
   23f3a:	f7ff fc29 	bl	23790 <__assert_func>
   23f3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
   23f42:	f3c9 0313 	ubfx	r3, r9, #0, #20
   23f46:	b10d      	cbz	r5, 23f4c <__d2b+0x30>
   23f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23f4c:	9301      	str	r3, [sp, #4]
   23f4e:	f1b8 0300 	subs.w	r3, r8, #0
   23f52:	d024      	beq.n	23f9e <__d2b+0x82>
   23f54:	4668      	mov	r0, sp
   23f56:	9300      	str	r3, [sp, #0]
   23f58:	f005 fed4 	bl	29d04 <__lo0bits>
   23f5c:	e9dd 1200 	ldrd	r1, r2, [sp]
   23f60:	b1d8      	cbz	r0, 23f9a <__d2b+0x7e>
   23f62:	f1c0 0320 	rsb	r3, r0, #32
   23f66:	fa02 f303 	lsl.w	r3, r2, r3
   23f6a:	40c2      	lsrs	r2, r0
   23f6c:	430b      	orrs	r3, r1
   23f6e:	9201      	str	r2, [sp, #4]
   23f70:	6163      	str	r3, [r4, #20]
   23f72:	9b01      	ldr	r3, [sp, #4]
   23f74:	2b00      	cmp	r3, #0
   23f76:	61a3      	str	r3, [r4, #24]
   23f78:	bf0c      	ite	eq
   23f7a:	2201      	moveq	r2, #1
   23f7c:	2202      	movne	r2, #2
   23f7e:	6122      	str	r2, [r4, #16]
   23f80:	b1ad      	cbz	r5, 23fae <__d2b+0x92>
   23f82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   23f86:	4405      	add	r5, r0
   23f88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   23f8c:	6035      	str	r5, [r6, #0]
   23f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23f90:	6018      	str	r0, [r3, #0]
   23f92:	4620      	mov	r0, r4
   23f94:	b002      	add	sp, #8
   23f96:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   23f9a:	6161      	str	r1, [r4, #20]
   23f9c:	e7e9      	b.n	23f72 <__d2b+0x56>
   23f9e:	a801      	add	r0, sp, #4
   23fa0:	f005 feb0 	bl	29d04 <__lo0bits>
   23fa4:	9b01      	ldr	r3, [sp, #4]
   23fa6:	3020      	adds	r0, #32
   23fa8:	2201      	movs	r2, #1
   23faa:	6163      	str	r3, [r4, #20]
   23fac:	e7e7      	b.n	23f7e <__d2b+0x62>
   23fae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   23fb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   23fb6:	6030      	str	r0, [r6, #0]
   23fb8:	6918      	ldr	r0, [r3, #16]
   23fba:	f005 fe81 	bl	29cc0 <__hi0bits>
   23fbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   23fc2:	e7e4      	b.n	23f8e <__d2b+0x72>
   23fc4:	000311c3 	.word	0x000311c3
   23fc8:	000311d4 	.word	0x000311d4

00023fcc <_vfiprintf_r>:
   23fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fd0:	460d      	mov	r5, r1
   23fd2:	b09d      	sub	sp, #116	; 0x74
   23fd4:	4614      	mov	r4, r2
   23fd6:	4698      	mov	r8, r3
   23fd8:	4606      	mov	r6, r0
   23fda:	b118      	cbz	r0, 23fe4 <_vfiprintf_r+0x18>
   23fdc:	6983      	ldr	r3, [r0, #24]
   23fde:	b90b      	cbnz	r3, 23fe4 <_vfiprintf_r+0x18>
   23fe0:	f7ff fc36 	bl	23850 <__sinit>
   23fe4:	4b87      	ldr	r3, [pc, #540]	; (24204 <_vfiprintf_r+0x238>)
   23fe6:	429d      	cmp	r5, r3
   23fe8:	d11b      	bne.n	24022 <_vfiprintf_r+0x56>
   23fea:	6875      	ldr	r5, [r6, #4]
   23fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23fee:	07d9      	lsls	r1, r3, #31
   23ff0:	d405      	bmi.n	23ffe <_vfiprintf_r+0x32>
   23ff2:	89ab      	ldrh	r3, [r5, #12]
   23ff4:	059a      	lsls	r2, r3, #22
   23ff6:	d402      	bmi.n	23ffe <_vfiprintf_r+0x32>
   23ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23ffa:	f7ed f83f 	bl	1107c <__retarget_lock_acquire_recursive>
   23ffe:	89ab      	ldrh	r3, [r5, #12]
   24000:	071b      	lsls	r3, r3, #28
   24002:	d501      	bpl.n	24008 <_vfiprintf_r+0x3c>
   24004:	692b      	ldr	r3, [r5, #16]
   24006:	b9eb      	cbnz	r3, 24044 <_vfiprintf_r+0x78>
   24008:	4629      	mov	r1, r5
   2400a:	4630      	mov	r0, r6
   2400c:	f000 f96e 	bl	242ec <__swsetup_r>
   24010:	b1c0      	cbz	r0, 24044 <_vfiprintf_r+0x78>
   24012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   24014:	07dc      	lsls	r4, r3, #31
   24016:	d50e      	bpl.n	24036 <_vfiprintf_r+0x6a>
   24018:	f04f 30ff 	mov.w	r0, #4294967295
   2401c:	b01d      	add	sp, #116	; 0x74
   2401e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24022:	4b79      	ldr	r3, [pc, #484]	; (24208 <_vfiprintf_r+0x23c>)
   24024:	429d      	cmp	r5, r3
   24026:	d101      	bne.n	2402c <_vfiprintf_r+0x60>
   24028:	68b5      	ldr	r5, [r6, #8]
   2402a:	e7df      	b.n	23fec <_vfiprintf_r+0x20>
   2402c:	4b77      	ldr	r3, [pc, #476]	; (2420c <_vfiprintf_r+0x240>)
   2402e:	429d      	cmp	r5, r3
   24030:	bf08      	it	eq
   24032:	68f5      	ldreq	r5, [r6, #12]
   24034:	e7da      	b.n	23fec <_vfiprintf_r+0x20>
   24036:	89ab      	ldrh	r3, [r5, #12]
   24038:	0598      	lsls	r0, r3, #22
   2403a:	d4ed      	bmi.n	24018 <_vfiprintf_r+0x4c>
   2403c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2403e:	f7ed f839 	bl	110b4 <__retarget_lock_release_recursive>
   24042:	e7e9      	b.n	24018 <_vfiprintf_r+0x4c>
   24044:	2300      	movs	r3, #0
   24046:	f8cd 800c 	str.w	r8, [sp, #12]
   2404a:	f04f 0901 	mov.w	r9, #1
   2404e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 24210 <_vfiprintf_r+0x244>
   24052:	9309      	str	r3, [sp, #36]	; 0x24
   24054:	2320      	movs	r3, #32
   24056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2405a:	2330      	movs	r3, #48	; 0x30
   2405c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   24060:	4623      	mov	r3, r4
   24062:	469a      	mov	sl, r3
   24064:	f813 2b01 	ldrb.w	r2, [r3], #1
   24068:	b10a      	cbz	r2, 2406e <_vfiprintf_r+0xa2>
   2406a:	2a25      	cmp	r2, #37	; 0x25
   2406c:	d1f9      	bne.n	24062 <_vfiprintf_r+0x96>
   2406e:	ebba 0b04 	subs.w	fp, sl, r4
   24072:	d00b      	beq.n	2408c <_vfiprintf_r+0xc0>
   24074:	465b      	mov	r3, fp
   24076:	4622      	mov	r2, r4
   24078:	4629      	mov	r1, r5
   2407a:	4630      	mov	r0, r6
   2407c:	f005 fe9f 	bl	29dbe <__sfputs_r>
   24080:	3001      	adds	r0, #1
   24082:	f000 80a6 	beq.w	241d2 <_vfiprintf_r+0x206>
   24086:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24088:	445a      	add	r2, fp
   2408a:	9209      	str	r2, [sp, #36]	; 0x24
   2408c:	f89a 3000 	ldrb.w	r3, [sl]
   24090:	2b00      	cmp	r3, #0
   24092:	f000 809e 	beq.w	241d2 <_vfiprintf_r+0x206>
   24096:	2300      	movs	r3, #0
   24098:	f04f 32ff 	mov.w	r2, #4294967295
   2409c:	f10a 0a01 	add.w	sl, sl, #1
   240a0:	9304      	str	r3, [sp, #16]
   240a2:	9307      	str	r3, [sp, #28]
   240a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   240a8:	931a      	str	r3, [sp, #104]	; 0x68
   240aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
   240ae:	4654      	mov	r4, sl
   240b0:	2205      	movs	r2, #5
   240b2:	4857      	ldr	r0, [pc, #348]	; (24210 <_vfiprintf_r+0x244>)
   240b4:	f814 1b01 	ldrb.w	r1, [r4], #1
   240b8:	f005 fdf4 	bl	29ca4 <memchr>
   240bc:	9b04      	ldr	r3, [sp, #16]
   240be:	b9d0      	cbnz	r0, 240f6 <_vfiprintf_r+0x12a>
   240c0:	06d9      	lsls	r1, r3, #27
   240c2:	bf44      	itt	mi
   240c4:	2220      	movmi	r2, #32
   240c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   240ca:	071a      	lsls	r2, r3, #28
   240cc:	bf44      	itt	mi
   240ce:	222b      	movmi	r2, #43	; 0x2b
   240d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   240d4:	f89a 2000 	ldrb.w	r2, [sl]
   240d8:	2a2a      	cmp	r2, #42	; 0x2a
   240da:	d014      	beq.n	24106 <_vfiprintf_r+0x13a>
   240dc:	9a07      	ldr	r2, [sp, #28]
   240de:	4654      	mov	r4, sl
   240e0:	2000      	movs	r0, #0
   240e2:	f04f 0c0a 	mov.w	ip, #10
   240e6:	4621      	mov	r1, r4
   240e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   240ec:	3b30      	subs	r3, #48	; 0x30
   240ee:	2b09      	cmp	r3, #9
   240f0:	d94a      	bls.n	24188 <_vfiprintf_r+0x1bc>
   240f2:	b970      	cbnz	r0, 24112 <_vfiprintf_r+0x146>
   240f4:	e014      	b.n	24120 <_vfiprintf_r+0x154>
   240f6:	eba0 0008 	sub.w	r0, r0, r8
   240fa:	46a2      	mov	sl, r4
   240fc:	fa09 f000 	lsl.w	r0, r9, r0
   24100:	4318      	orrs	r0, r3
   24102:	9004      	str	r0, [sp, #16]
   24104:	e7d3      	b.n	240ae <_vfiprintf_r+0xe2>
   24106:	9a03      	ldr	r2, [sp, #12]
   24108:	1d11      	adds	r1, r2, #4
   2410a:	6812      	ldr	r2, [r2, #0]
   2410c:	2a00      	cmp	r2, #0
   2410e:	9103      	str	r1, [sp, #12]
   24110:	db01      	blt.n	24116 <_vfiprintf_r+0x14a>
   24112:	9207      	str	r2, [sp, #28]
   24114:	e004      	b.n	24120 <_vfiprintf_r+0x154>
   24116:	4252      	negs	r2, r2
   24118:	f043 0302 	orr.w	r3, r3, #2
   2411c:	9207      	str	r2, [sp, #28]
   2411e:	9304      	str	r3, [sp, #16]
   24120:	7823      	ldrb	r3, [r4, #0]
   24122:	2b2e      	cmp	r3, #46	; 0x2e
   24124:	d10a      	bne.n	2413c <_vfiprintf_r+0x170>
   24126:	7863      	ldrb	r3, [r4, #1]
   24128:	2b2a      	cmp	r3, #42	; 0x2a
   2412a:	d132      	bne.n	24192 <_vfiprintf_r+0x1c6>
   2412c:	9b03      	ldr	r3, [sp, #12]
   2412e:	3402      	adds	r4, #2
   24130:	1d1a      	adds	r2, r3, #4
   24132:	681b      	ldr	r3, [r3, #0]
   24134:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   24138:	9203      	str	r2, [sp, #12]
   2413a:	9305      	str	r3, [sp, #20]
   2413c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 24214 <_vfiprintf_r+0x248>
   24140:	2203      	movs	r2, #3
   24142:	7821      	ldrb	r1, [r4, #0]
   24144:	4650      	mov	r0, sl
   24146:	f005 fdad 	bl	29ca4 <memchr>
   2414a:	b138      	cbz	r0, 2415c <_vfiprintf_r+0x190>
   2414c:	eba0 000a 	sub.w	r0, r0, sl
   24150:	2240      	movs	r2, #64	; 0x40
   24152:	9b04      	ldr	r3, [sp, #16]
   24154:	3401      	adds	r4, #1
   24156:	4082      	lsls	r2, r0
   24158:	4313      	orrs	r3, r2
   2415a:	9304      	str	r3, [sp, #16]
   2415c:	f814 1b01 	ldrb.w	r1, [r4], #1
   24160:	2206      	movs	r2, #6
   24162:	482d      	ldr	r0, [pc, #180]	; (24218 <_vfiprintf_r+0x24c>)
   24164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   24168:	f005 fd9c 	bl	29ca4 <memchr>
   2416c:	2800      	cmp	r0, #0
   2416e:	d03f      	beq.n	241f0 <_vfiprintf_r+0x224>
   24170:	4b2a      	ldr	r3, [pc, #168]	; (2421c <_vfiprintf_r+0x250>)
   24172:	bb1b      	cbnz	r3, 241bc <_vfiprintf_r+0x1f0>
   24174:	9b03      	ldr	r3, [sp, #12]
   24176:	3307      	adds	r3, #7
   24178:	f023 0307 	bic.w	r3, r3, #7
   2417c:	3308      	adds	r3, #8
   2417e:	9303      	str	r3, [sp, #12]
   24180:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24182:	443b      	add	r3, r7
   24184:	9309      	str	r3, [sp, #36]	; 0x24
   24186:	e76b      	b.n	24060 <_vfiprintf_r+0x94>
   24188:	fb0c 3202 	mla	r2, ip, r2, r3
   2418c:	460c      	mov	r4, r1
   2418e:	2001      	movs	r0, #1
   24190:	e7a9      	b.n	240e6 <_vfiprintf_r+0x11a>
   24192:	2300      	movs	r3, #0
   24194:	3401      	adds	r4, #1
   24196:	f04f 0c0a 	mov.w	ip, #10
   2419a:	4619      	mov	r1, r3
   2419c:	9305      	str	r3, [sp, #20]
   2419e:	4620      	mov	r0, r4
   241a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   241a4:	3a30      	subs	r2, #48	; 0x30
   241a6:	2a09      	cmp	r2, #9
   241a8:	d903      	bls.n	241b2 <_vfiprintf_r+0x1e6>
   241aa:	2b00      	cmp	r3, #0
   241ac:	d0c6      	beq.n	2413c <_vfiprintf_r+0x170>
   241ae:	9105      	str	r1, [sp, #20]
   241b0:	e7c4      	b.n	2413c <_vfiprintf_r+0x170>
   241b2:	fb0c 2101 	mla	r1, ip, r1, r2
   241b6:	4604      	mov	r4, r0
   241b8:	2301      	movs	r3, #1
   241ba:	e7f0      	b.n	2419e <_vfiprintf_r+0x1d2>
   241bc:	ab03      	add	r3, sp, #12
   241be:	462a      	mov	r2, r5
   241c0:	a904      	add	r1, sp, #16
   241c2:	4630      	mov	r0, r6
   241c4:	9300      	str	r3, [sp, #0]
   241c6:	4b16      	ldr	r3, [pc, #88]	; (24220 <_vfiprintf_r+0x254>)
   241c8:	f7fe ff56 	bl	23078 <_printf_float>
   241cc:	4607      	mov	r7, r0
   241ce:	1c78      	adds	r0, r7, #1
   241d0:	d1d6      	bne.n	24180 <_vfiprintf_r+0x1b4>
   241d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   241d4:	07d9      	lsls	r1, r3, #31
   241d6:	d405      	bmi.n	241e4 <_vfiprintf_r+0x218>
   241d8:	89ab      	ldrh	r3, [r5, #12]
   241da:	059a      	lsls	r2, r3, #22
   241dc:	d402      	bmi.n	241e4 <_vfiprintf_r+0x218>
   241de:	6da8      	ldr	r0, [r5, #88]	; 0x58
   241e0:	f7ec ff68 	bl	110b4 <__retarget_lock_release_recursive>
   241e4:	89ab      	ldrh	r3, [r5, #12]
   241e6:	065b      	lsls	r3, r3, #25
   241e8:	f53f af16 	bmi.w	24018 <_vfiprintf_r+0x4c>
   241ec:	9809      	ldr	r0, [sp, #36]	; 0x24
   241ee:	e715      	b.n	2401c <_vfiprintf_r+0x50>
   241f0:	ab03      	add	r3, sp, #12
   241f2:	462a      	mov	r2, r5
   241f4:	a904      	add	r1, sp, #16
   241f6:	4630      	mov	r0, r6
   241f8:	9300      	str	r3, [sp, #0]
   241fa:	4b09      	ldr	r3, [pc, #36]	; (24220 <_vfiprintf_r+0x254>)
   241fc:	f7ff f972 	bl	234e4 <_printf_i>
   24200:	e7e4      	b.n	241cc <_vfiprintf_r+0x200>
   24202:	bf00      	nop
   24204:	0002b638 	.word	0x0002b638
   24208:	0002b618 	.word	0x0002b618
   2420c:	0002b5f8 	.word	0x0002b5f8
   24210:	00031249 	.word	0x00031249
   24214:	0003124f 	.word	0x0003124f
   24218:	00031253 	.word	0x00031253
   2421c:	00023079 	.word	0x00023079
   24220:	00029dbf 	.word	0x00029dbf

00024224 <__swbuf_r>:
   24224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24226:	460e      	mov	r6, r1
   24228:	4614      	mov	r4, r2
   2422a:	4605      	mov	r5, r0
   2422c:	b118      	cbz	r0, 24236 <__swbuf_r+0x12>
   2422e:	6983      	ldr	r3, [r0, #24]
   24230:	b90b      	cbnz	r3, 24236 <__swbuf_r+0x12>
   24232:	f7ff fb0d 	bl	23850 <__sinit>
   24236:	4b21      	ldr	r3, [pc, #132]	; (242bc <__swbuf_r+0x98>)
   24238:	429c      	cmp	r4, r3
   2423a:	d110      	bne.n	2425e <__swbuf_r+0x3a>
   2423c:	686c      	ldr	r4, [r5, #4]
   2423e:	69a3      	ldr	r3, [r4, #24]
   24240:	60a3      	str	r3, [r4, #8]
   24242:	89a3      	ldrh	r3, [r4, #12]
   24244:	071a      	lsls	r2, r3, #28
   24246:	d501      	bpl.n	2424c <__swbuf_r+0x28>
   24248:	6923      	ldr	r3, [r4, #16]
   2424a:	b993      	cbnz	r3, 24272 <__swbuf_r+0x4e>
   2424c:	4621      	mov	r1, r4
   2424e:	4628      	mov	r0, r5
   24250:	f000 f84c 	bl	242ec <__swsetup_r>
   24254:	b168      	cbz	r0, 24272 <__swbuf_r+0x4e>
   24256:	f04f 37ff 	mov.w	r7, #4294967295
   2425a:	4638      	mov	r0, r7
   2425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2425e:	4b18      	ldr	r3, [pc, #96]	; (242c0 <__swbuf_r+0x9c>)
   24260:	429c      	cmp	r4, r3
   24262:	d101      	bne.n	24268 <__swbuf_r+0x44>
   24264:	68ac      	ldr	r4, [r5, #8]
   24266:	e7ea      	b.n	2423e <__swbuf_r+0x1a>
   24268:	4b16      	ldr	r3, [pc, #88]	; (242c4 <__swbuf_r+0xa0>)
   2426a:	429c      	cmp	r4, r3
   2426c:	bf08      	it	eq
   2426e:	68ec      	ldreq	r4, [r5, #12]
   24270:	e7e5      	b.n	2423e <__swbuf_r+0x1a>
   24272:	6923      	ldr	r3, [r4, #16]
   24274:	b2f6      	uxtb	r6, r6
   24276:	6820      	ldr	r0, [r4, #0]
   24278:	4637      	mov	r7, r6
   2427a:	1ac0      	subs	r0, r0, r3
   2427c:	6963      	ldr	r3, [r4, #20]
   2427e:	4283      	cmp	r3, r0
   24280:	dc05      	bgt.n	2428e <__swbuf_r+0x6a>
   24282:	4621      	mov	r1, r4
   24284:	4628      	mov	r0, r5
   24286:	f000 f8ad 	bl	243e4 <_fflush_r>
   2428a:	2800      	cmp	r0, #0
   2428c:	d1e3      	bne.n	24256 <__swbuf_r+0x32>
   2428e:	68a3      	ldr	r3, [r4, #8]
   24290:	3001      	adds	r0, #1
   24292:	3b01      	subs	r3, #1
   24294:	60a3      	str	r3, [r4, #8]
   24296:	6823      	ldr	r3, [r4, #0]
   24298:	1c5a      	adds	r2, r3, #1
   2429a:	6022      	str	r2, [r4, #0]
   2429c:	701e      	strb	r6, [r3, #0]
   2429e:	6963      	ldr	r3, [r4, #20]
   242a0:	4283      	cmp	r3, r0
   242a2:	d004      	beq.n	242ae <__swbuf_r+0x8a>
   242a4:	89a3      	ldrh	r3, [r4, #12]
   242a6:	07db      	lsls	r3, r3, #31
   242a8:	d5d7      	bpl.n	2425a <__swbuf_r+0x36>
   242aa:	2e0a      	cmp	r6, #10
   242ac:	d1d5      	bne.n	2425a <__swbuf_r+0x36>
   242ae:	4621      	mov	r1, r4
   242b0:	4628      	mov	r0, r5
   242b2:	f000 f897 	bl	243e4 <_fflush_r>
   242b6:	2800      	cmp	r0, #0
   242b8:	d0cf      	beq.n	2425a <__swbuf_r+0x36>
   242ba:	e7cc      	b.n	24256 <__swbuf_r+0x32>
   242bc:	0002b638 	.word	0x0002b638
   242c0:	0002b618 	.word	0x0002b618
   242c4:	0002b5f8 	.word	0x0002b5f8

000242c8 <_write_r>:
   242c8:	b538      	push	{r3, r4, r5, lr}
   242ca:	4604      	mov	r4, r0
   242cc:	4d06      	ldr	r5, [pc, #24]	; (242e8 <_write_r+0x20>)
   242ce:	4608      	mov	r0, r1
   242d0:	4611      	mov	r1, r2
   242d2:	2200      	movs	r2, #0
   242d4:	602a      	str	r2, [r5, #0]
   242d6:	461a      	mov	r2, r3
   242d8:	f001 fdbf 	bl	25e5a <_write>
   242dc:	1c43      	adds	r3, r0, #1
   242de:	d102      	bne.n	242e6 <_write_r+0x1e>
   242e0:	682b      	ldr	r3, [r5, #0]
   242e2:	b103      	cbz	r3, 242e6 <_write_r+0x1e>
   242e4:	6023      	str	r3, [r4, #0]
   242e6:	bd38      	pop	{r3, r4, r5, pc}
   242e8:	20021568 	.word	0x20021568

000242ec <__swsetup_r>:
   242ec:	4b31      	ldr	r3, [pc, #196]	; (243b4 <__swsetup_r+0xc8>)
   242ee:	b570      	push	{r4, r5, r6, lr}
   242f0:	681d      	ldr	r5, [r3, #0]
   242f2:	4606      	mov	r6, r0
   242f4:	460c      	mov	r4, r1
   242f6:	b125      	cbz	r5, 24302 <__swsetup_r+0x16>
   242f8:	69ab      	ldr	r3, [r5, #24]
   242fa:	b913      	cbnz	r3, 24302 <__swsetup_r+0x16>
   242fc:	4628      	mov	r0, r5
   242fe:	f7ff faa7 	bl	23850 <__sinit>
   24302:	4b2d      	ldr	r3, [pc, #180]	; (243b8 <__swsetup_r+0xcc>)
   24304:	429c      	cmp	r4, r3
   24306:	d10e      	bne.n	24326 <__swsetup_r+0x3a>
   24308:	686c      	ldr	r4, [r5, #4]
   2430a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2430e:	071a      	lsls	r2, r3, #28
   24310:	d42c      	bmi.n	2436c <__swsetup_r+0x80>
   24312:	06dd      	lsls	r5, r3, #27
   24314:	d411      	bmi.n	2433a <__swsetup_r+0x4e>
   24316:	2209      	movs	r2, #9
   24318:	6032      	str	r2, [r6, #0]
   2431a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2431e:	f04f 30ff 	mov.w	r0, #4294967295
   24322:	81a3      	strh	r3, [r4, #12]
   24324:	e03d      	b.n	243a2 <__swsetup_r+0xb6>
   24326:	4b25      	ldr	r3, [pc, #148]	; (243bc <__swsetup_r+0xd0>)
   24328:	429c      	cmp	r4, r3
   2432a:	d101      	bne.n	24330 <__swsetup_r+0x44>
   2432c:	68ac      	ldr	r4, [r5, #8]
   2432e:	e7ec      	b.n	2430a <__swsetup_r+0x1e>
   24330:	4b23      	ldr	r3, [pc, #140]	; (243c0 <__swsetup_r+0xd4>)
   24332:	429c      	cmp	r4, r3
   24334:	bf08      	it	eq
   24336:	68ec      	ldreq	r4, [r5, #12]
   24338:	e7e7      	b.n	2430a <__swsetup_r+0x1e>
   2433a:	0758      	lsls	r0, r3, #29
   2433c:	d512      	bpl.n	24364 <__swsetup_r+0x78>
   2433e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24340:	b141      	cbz	r1, 24354 <__swsetup_r+0x68>
   24342:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24346:	4299      	cmp	r1, r3
   24348:	d002      	beq.n	24350 <__swsetup_r+0x64>
   2434a:	4630      	mov	r0, r6
   2434c:	f7fe fdf0 	bl	22f30 <_free_r>
   24350:	2300      	movs	r3, #0
   24352:	6363      	str	r3, [r4, #52]	; 0x34
   24354:	89a3      	ldrh	r3, [r4, #12]
   24356:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2435a:	81a3      	strh	r3, [r4, #12]
   2435c:	2300      	movs	r3, #0
   2435e:	6063      	str	r3, [r4, #4]
   24360:	6923      	ldr	r3, [r4, #16]
   24362:	6023      	str	r3, [r4, #0]
   24364:	89a3      	ldrh	r3, [r4, #12]
   24366:	f043 0308 	orr.w	r3, r3, #8
   2436a:	81a3      	strh	r3, [r4, #12]
   2436c:	6923      	ldr	r3, [r4, #16]
   2436e:	b94b      	cbnz	r3, 24384 <__swsetup_r+0x98>
   24370:	89a3      	ldrh	r3, [r4, #12]
   24372:	f403 7320 	and.w	r3, r3, #640	; 0x280
   24376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2437a:	d003      	beq.n	24384 <__swsetup_r+0x98>
   2437c:	4621      	mov	r1, r4
   2437e:	4630      	mov	r0, r6
   24380:	f000 f87e 	bl	24480 <__smakebuf_r>
   24384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24388:	f013 0201 	ands.w	r2, r3, #1
   2438c:	d00a      	beq.n	243a4 <__swsetup_r+0xb8>
   2438e:	2200      	movs	r2, #0
   24390:	60a2      	str	r2, [r4, #8]
   24392:	6962      	ldr	r2, [r4, #20]
   24394:	4252      	negs	r2, r2
   24396:	61a2      	str	r2, [r4, #24]
   24398:	6922      	ldr	r2, [r4, #16]
   2439a:	b942      	cbnz	r2, 243ae <__swsetup_r+0xc2>
   2439c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   243a0:	d1bb      	bne.n	2431a <__swsetup_r+0x2e>
   243a2:	bd70      	pop	{r4, r5, r6, pc}
   243a4:	0799      	lsls	r1, r3, #30
   243a6:	bf58      	it	pl
   243a8:	6962      	ldrpl	r2, [r4, #20]
   243aa:	60a2      	str	r2, [r4, #8]
   243ac:	e7f4      	b.n	24398 <__swsetup_r+0xac>
   243ae:	2000      	movs	r0, #0
   243b0:	e7f7      	b.n	243a2 <__swsetup_r+0xb6>
   243b2:	bf00      	nop
   243b4:	20008744 	.word	0x20008744
   243b8:	0002b638 	.word	0x0002b638
   243bc:	0002b618 	.word	0x0002b618
   243c0:	0002b5f8 	.word	0x0002b5f8

000243c4 <_close_r>:
   243c4:	b538      	push	{r3, r4, r5, lr}
   243c6:	2300      	movs	r3, #0
   243c8:	4d05      	ldr	r5, [pc, #20]	; (243e0 <_close_r+0x1c>)
   243ca:	4604      	mov	r4, r0
   243cc:	4608      	mov	r0, r1
   243ce:	602b      	str	r3, [r5, #0]
   243d0:	f001 fd47 	bl	25e62 <_close>
   243d4:	1c43      	adds	r3, r0, #1
   243d6:	d102      	bne.n	243de <_close_r+0x1a>
   243d8:	682b      	ldr	r3, [r5, #0]
   243da:	b103      	cbz	r3, 243de <_close_r+0x1a>
   243dc:	6023      	str	r3, [r4, #0]
   243de:	bd38      	pop	{r3, r4, r5, pc}
   243e0:	20021568 	.word	0x20021568

000243e4 <_fflush_r>:
   243e4:	b538      	push	{r3, r4, r5, lr}
   243e6:	690b      	ldr	r3, [r1, #16]
   243e8:	4605      	mov	r5, r0
   243ea:	460c      	mov	r4, r1
   243ec:	b913      	cbnz	r3, 243f4 <_fflush_r+0x10>
   243ee:	2500      	movs	r5, #0
   243f0:	4628      	mov	r0, r5
   243f2:	bd38      	pop	{r3, r4, r5, pc}
   243f4:	b118      	cbz	r0, 243fe <_fflush_r+0x1a>
   243f6:	6983      	ldr	r3, [r0, #24]
   243f8:	b90b      	cbnz	r3, 243fe <_fflush_r+0x1a>
   243fa:	f7ff fa29 	bl	23850 <__sinit>
   243fe:	4b14      	ldr	r3, [pc, #80]	; (24450 <_fflush_r+0x6c>)
   24400:	429c      	cmp	r4, r3
   24402:	d11b      	bne.n	2443c <_fflush_r+0x58>
   24404:	686c      	ldr	r4, [r5, #4]
   24406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2440a:	2b00      	cmp	r3, #0
   2440c:	d0ef      	beq.n	243ee <_fflush_r+0xa>
   2440e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   24410:	07d0      	lsls	r0, r2, #31
   24412:	d404      	bmi.n	2441e <_fflush_r+0x3a>
   24414:	0599      	lsls	r1, r3, #22
   24416:	d402      	bmi.n	2441e <_fflush_r+0x3a>
   24418:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2441a:	f7ec fe2f 	bl	1107c <__retarget_lock_acquire_recursive>
   2441e:	4628      	mov	r0, r5
   24420:	4621      	mov	r1, r4
   24422:	f005 fd28 	bl	29e76 <__sflush_r>
   24426:	6e63      	ldr	r3, [r4, #100]	; 0x64
   24428:	4605      	mov	r5, r0
   2442a:	07da      	lsls	r2, r3, #31
   2442c:	d4e0      	bmi.n	243f0 <_fflush_r+0xc>
   2442e:	89a3      	ldrh	r3, [r4, #12]
   24430:	059b      	lsls	r3, r3, #22
   24432:	d4dd      	bmi.n	243f0 <_fflush_r+0xc>
   24434:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24436:	f7ec fe3d 	bl	110b4 <__retarget_lock_release_recursive>
   2443a:	e7d9      	b.n	243f0 <_fflush_r+0xc>
   2443c:	4b05      	ldr	r3, [pc, #20]	; (24454 <_fflush_r+0x70>)
   2443e:	429c      	cmp	r4, r3
   24440:	d101      	bne.n	24446 <_fflush_r+0x62>
   24442:	68ac      	ldr	r4, [r5, #8]
   24444:	e7df      	b.n	24406 <_fflush_r+0x22>
   24446:	4b04      	ldr	r3, [pc, #16]	; (24458 <_fflush_r+0x74>)
   24448:	429c      	cmp	r4, r3
   2444a:	bf08      	it	eq
   2444c:	68ec      	ldreq	r4, [r5, #12]
   2444e:	e7da      	b.n	24406 <_fflush_r+0x22>
   24450:	0002b638 	.word	0x0002b638
   24454:	0002b618 	.word	0x0002b618
   24458:	0002b5f8 	.word	0x0002b5f8

0002445c <_lseek_r>:
   2445c:	b538      	push	{r3, r4, r5, lr}
   2445e:	4604      	mov	r4, r0
   24460:	4d06      	ldr	r5, [pc, #24]	; (2447c <_lseek_r+0x20>)
   24462:	4608      	mov	r0, r1
   24464:	4611      	mov	r1, r2
   24466:	2200      	movs	r2, #0
   24468:	602a      	str	r2, [r5, #0]
   2446a:	461a      	mov	r2, r3
   2446c:	f001 fcfc 	bl	25e68 <_lseek>
   24470:	1c43      	adds	r3, r0, #1
   24472:	d102      	bne.n	2447a <_lseek_r+0x1e>
   24474:	682b      	ldr	r3, [r5, #0]
   24476:	b103      	cbz	r3, 2447a <_lseek_r+0x1e>
   24478:	6023      	str	r3, [r4, #0]
   2447a:	bd38      	pop	{r3, r4, r5, pc}
   2447c:	20021568 	.word	0x20021568

00024480 <__smakebuf_r>:
   24480:	898b      	ldrh	r3, [r1, #12]
   24482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24484:	079d      	lsls	r5, r3, #30
   24486:	4606      	mov	r6, r0
   24488:	460c      	mov	r4, r1
   2448a:	d507      	bpl.n	2449c <__smakebuf_r+0x1c>
   2448c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   24490:	6023      	str	r3, [r4, #0]
   24492:	6123      	str	r3, [r4, #16]
   24494:	2301      	movs	r3, #1
   24496:	6163      	str	r3, [r4, #20]
   24498:	b003      	add	sp, #12
   2449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2449c:	ab01      	add	r3, sp, #4
   2449e:	466a      	mov	r2, sp
   244a0:	f005 fd68 	bl	29f74 <__swhatbuf_r>
   244a4:	9f00      	ldr	r7, [sp, #0]
   244a6:	4605      	mov	r5, r0
   244a8:	4630      	mov	r0, r6
   244aa:	4639      	mov	r1, r7
   244ac:	f7fe fd8a 	bl	22fc4 <_malloc_r>
   244b0:	b948      	cbnz	r0, 244c6 <__smakebuf_r+0x46>
   244b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   244b6:	059a      	lsls	r2, r3, #22
   244b8:	d4ee      	bmi.n	24498 <__smakebuf_r+0x18>
   244ba:	f023 0303 	bic.w	r3, r3, #3
   244be:	f043 0302 	orr.w	r3, r3, #2
   244c2:	81a3      	strh	r3, [r4, #12]
   244c4:	e7e2      	b.n	2448c <__smakebuf_r+0xc>
   244c6:	4b0d      	ldr	r3, [pc, #52]	; (244fc <__smakebuf_r+0x7c>)
   244c8:	62b3      	str	r3, [r6, #40]	; 0x28
   244ca:	89a3      	ldrh	r3, [r4, #12]
   244cc:	6020      	str	r0, [r4, #0]
   244ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   244d2:	81a3      	strh	r3, [r4, #12]
   244d4:	9b01      	ldr	r3, [sp, #4]
   244d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
   244da:	b15b      	cbz	r3, 244f4 <__smakebuf_r+0x74>
   244dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   244e0:	4630      	mov	r0, r6
   244e2:	f000 f84b 	bl	2457c <_isatty_r>
   244e6:	b128      	cbz	r0, 244f4 <__smakebuf_r+0x74>
   244e8:	89a3      	ldrh	r3, [r4, #12]
   244ea:	f023 0303 	bic.w	r3, r3, #3
   244ee:	f043 0301 	orr.w	r3, r3, #1
   244f2:	81a3      	strh	r3, [r4, #12]
   244f4:	89a3      	ldrh	r3, [r4, #12]
   244f6:	431d      	orrs	r5, r3
   244f8:	81a5      	strh	r5, [r4, #12]
   244fa:	e7cd      	b.n	24498 <__smakebuf_r+0x18>
   244fc:	00023815 	.word	0x00023815

00024500 <_read_r>:
   24500:	b538      	push	{r3, r4, r5, lr}
   24502:	4604      	mov	r4, r0
   24504:	4d06      	ldr	r5, [pc, #24]	; (24520 <_read_r+0x20>)
   24506:	4608      	mov	r0, r1
   24508:	4611      	mov	r1, r2
   2450a:	2200      	movs	r2, #0
   2450c:	602a      	str	r2, [r5, #0]
   2450e:	461a      	mov	r2, r3
   24510:	f001 fc9f 	bl	25e52 <_read>
   24514:	1c43      	adds	r3, r0, #1
   24516:	d102      	bne.n	2451e <_read_r+0x1e>
   24518:	682b      	ldr	r3, [r5, #0]
   2451a:	b103      	cbz	r3, 2451e <_read_r+0x1e>
   2451c:	6023      	str	r3, [r4, #0]
   2451e:	bd38      	pop	{r3, r4, r5, pc}
   24520:	20021568 	.word	0x20021568

00024524 <raise>:
   24524:	4b02      	ldr	r3, [pc, #8]	; (24530 <raise+0xc>)
   24526:	4601      	mov	r1, r0
   24528:	6818      	ldr	r0, [r3, #0]
   2452a:	f005 bd5a 	b.w	29fe2 <_raise_r>
   2452e:	bf00      	nop
   24530:	20008744 	.word	0x20008744

00024534 <_kill_r>:
   24534:	b538      	push	{r3, r4, r5, lr}
   24536:	2300      	movs	r3, #0
   24538:	4d06      	ldr	r5, [pc, #24]	; (24554 <_kill_r+0x20>)
   2453a:	4604      	mov	r4, r0
   2453c:	4608      	mov	r0, r1
   2453e:	4611      	mov	r1, r2
   24540:	602b      	str	r3, [r5, #0]
   24542:	f001 fc98 	bl	25e76 <_kill>
   24546:	1c43      	adds	r3, r0, #1
   24548:	d102      	bne.n	24550 <_kill_r+0x1c>
   2454a:	682b      	ldr	r3, [r5, #0]
   2454c:	b103      	cbz	r3, 24550 <_kill_r+0x1c>
   2454e:	6023      	str	r3, [r4, #0]
   24550:	bd38      	pop	{r3, r4, r5, pc}
   24552:	bf00      	nop
   24554:	20021568 	.word	0x20021568

00024558 <_fstat_r>:
   24558:	b538      	push	{r3, r4, r5, lr}
   2455a:	2300      	movs	r3, #0
   2455c:	4d06      	ldr	r5, [pc, #24]	; (24578 <_fstat_r+0x20>)
   2455e:	4604      	mov	r4, r0
   24560:	4608      	mov	r0, r1
   24562:	4611      	mov	r1, r2
   24564:	602b      	str	r3, [r5, #0]
   24566:	f001 fc8a 	bl	25e7e <_fstat>
   2456a:	1c43      	adds	r3, r0, #1
   2456c:	d102      	bne.n	24574 <_fstat_r+0x1c>
   2456e:	682b      	ldr	r3, [r5, #0]
   24570:	b103      	cbz	r3, 24574 <_fstat_r+0x1c>
   24572:	6023      	str	r3, [r4, #0]
   24574:	bd38      	pop	{r3, r4, r5, pc}
   24576:	bf00      	nop
   24578:	20021568 	.word	0x20021568

0002457c <_isatty_r>:
   2457c:	b538      	push	{r3, r4, r5, lr}
   2457e:	2300      	movs	r3, #0
   24580:	4d05      	ldr	r5, [pc, #20]	; (24598 <_isatty_r+0x1c>)
   24582:	4604      	mov	r4, r0
   24584:	4608      	mov	r0, r1
   24586:	602b      	str	r3, [r5, #0]
   24588:	f001 fc70 	bl	25e6c <_isatty>
   2458c:	1c43      	adds	r3, r0, #1
   2458e:	d102      	bne.n	24596 <_isatty_r+0x1a>
   24590:	682b      	ldr	r3, [r5, #0]
   24592:	b103      	cbz	r3, 24596 <_isatty_r+0x1a>
   24594:	6023      	str	r3, [r4, #0]
   24596:	bd38      	pop	{r3, r4, r5, pc}
   24598:	20021568 	.word	0x20021568

0002459c <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   2459c:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   2459e:	f7fd fb71 	bl	21c84 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   245a2:	f7fe fc59 	bl	22e58 <k_thread_system_pool_assign>
    return 0;
}
   245a6:	2000      	movs	r0, #0
   245a8:	bd08      	pop	{r3, pc}

000245aa <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   245aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   245ac:	ab0b      	add	r3, sp, #44	; 0x2c
   245ae:	9305      	str	r3, [sp, #20]
   245b0:	9303      	str	r3, [sp, #12]
   245b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   245b4:	9302      	str	r3, [sp, #8]
   245b6:	2300      	movs	r3, #0
   245b8:	4618      	mov	r0, r3
   245ba:	e9cd 3300 	strd	r3, r3, [sp]
   245be:	f7e9 fed3 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   245c2:	b007      	add	sp, #28
   245c4:	f85d fb04 	ldr.w	pc, [sp], #4

000245c8 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   245c8:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   245ca:	6883      	ldr	r3, [r0, #8]
   245cc:	2256      	movs	r2, #86	; 0x56
   245ce:	68dc      	ldr	r4, [r3, #12]
   245d0:	2332      	movs	r3, #50	; 0x32
   245d2:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   245d4:	bc10      	pop	{r4}
   245d6:	4760      	bx	ip

000245d8 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   245d8:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   245da:	6883      	ldr	r3, [r0, #8]
   245dc:	685c      	ldr	r4, [r3, #4]
   245de:	f04f 33ff 	mov.w	r3, #4294967295
   245e2:	46a4      	mov	ip, r4
}
   245e4:	bc10      	pop	{r4}
   245e6:	4760      	bx	ip

000245e8 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   245e8:	f7fb bc68 	b.w	1febc <z_impl_k_sem_take>

000245ec <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   245ec:	6883      	ldr	r3, [r0, #8]
   245ee:	69db      	ldr	r3, [r3, #28]
   245f0:	b10b      	cbz	r3, 245f6 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   245f2:	2201      	movs	r2, #1
   245f4:	4718      	bx	r3
}
   245f6:	4770      	bx	lr

000245f8 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   245f8:	f7fd bb10 	b.w	21c1c <z_impl_k_sleep>

000245fc <blink>:
void blink(struct gpio_dt_spec *led,uint8_t times){
   245fc:	b570      	push	{r4, r5, r6, lr}
   245fe:	4604      	mov	r4, r0
   24600:	460d      	mov	r5, r1
  while(i<times){
   24602:	2600      	movs	r6, #0
   24604:	42ae      	cmp	r6, r5
   24606:	d100      	bne.n	2460a <blink+0xe>
}
   24608:	bd70      	pop	{r4, r5, r6, pc}
	gpio_pin_set_dt(led, ON);
   2460a:	2101      	movs	r1, #1
   2460c:	4620      	mov	r0, r4
   2460e:	f7e6 fbfd 	bl	ae0c <gpio_pin_set_dt.isra.0>
    gpio_pin_set_dt(led, OFF);
   24612:	2100      	movs	r1, #0
   24614:	4620      	mov	r0, r4
   24616:	f7e6 fbf9 	bl	ae0c <gpio_pin_set_dt.isra.0>
	i++;
   2461a:	3601      	adds	r6, #1
   2461c:	e7f2      	b.n	24604 <blink+0x8>

0002461e <send_protobuf>:
void send_protobuf(void){
   2461e:	b510      	push	{r4, lr}
   24620:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
    buf_proto=send_array_dd_v0(); 
   24624:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   24628:	4620      	mov	r0, r4
   2462a:	f7e7 fc87 	bl	bf3c <send_array_dd_v0>
    send_bluetooth(buf_proto);
   2462e:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   24632:	f240 72cc 	movw	r2, #1996	; 0x7cc
   24636:	4668      	mov	r0, sp
   24638:	f005 f8d7 	bl	297ea <memcpy>
   2463c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   24640:	f7e7 f83e 	bl	b6c0 <send_bluetooth>
}
   24644:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   24648:	bd10      	pop	{r4, pc}

0002464a <error>:
{
   2464a:	b508      	push	{r3, lr}
	turn_off_all_leds();
   2464c:	f7e7 f998 	bl	b980 <turn_off_all_leds>
		k_sleep(K_MSEC(1000));
   24650:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   24654:	2100      	movs	r1, #0
   24656:	f7ff ffcf 	bl	245f8 <k_sleep.isra.0>
	while (true) {
   2465a:	e7f9      	b.n	24650 <error+0x6>

0002465c <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   2465c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   2465e:	6806      	ldr	r6, [r0, #0]
   24660:	8902      	ldrh	r2, [r0, #8]
   24662:	8a33      	ldrh	r3, [r6, #16]
   24664:	429a      	cmp	r2, r3
   24666:	d271      	bcs.n	2474c <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   24668:	6831      	ldr	r1, [r6, #0]
   2466a:	8942      	ldrh	r2, [r0, #10]
   2466c:	0093      	lsls	r3, r2, #2
   2466e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   24672:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   24676:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   2467a:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   2467c:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   2467e:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   24682:	d01f      	beq.n	246c4 <load_descriptor_values+0x68>
   24684:	2902      	cmp	r1, #2
   24686:	d02a      	beq.n	246de <load_descriptor_values+0x82>
   24688:	2900      	cmp	r1, #0
   2468a:	d135      	bne.n	246f8 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   2468c:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   24690:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   24694:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   24698:	0f12      	lsrs	r2, r2, #28
   2469a:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   2469c:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   2469e:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   246a2:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   246a4:	2a00      	cmp	r2, #0
   246a6:	d134      	bne.n	24712 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   246a8:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   246aa:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   246ac:	f004 040e 	and.w	r4, r4, #14
   246b0:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   246b2:	bf11      	iteee	ne
   246b4:	2300      	movne	r3, #0
   246b6:	89c2      	ldrheq	r2, [r0, #14]
   246b8:	6873      	ldreq	r3, [r6, #4]
   246ba:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   246be:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   246c0:	2001      	movs	r0, #1
}
   246c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   246c4:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   246c6:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   246ca:	4419      	add	r1, r3
   246cc:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   246ce:	0f0b      	lsrs	r3, r1, #28
   246d0:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   246d4:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   246d6:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   246d8:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   246dc:	e7dd      	b.n	2469a <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   246de:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   246e0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   246e4:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   246e6:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   246ea:	0a1a      	lsrs	r2, r3, #8
   246ec:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   246f0:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   246f2:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   246f4:	898a      	ldrh	r2, [r1, #12]
            break;
   246f6:	e7d0      	b.n	2469a <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   246f8:	6832      	ldr	r2, [r6, #0]
   246fa:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   246fc:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   24700:	0a19      	lsrs	r1, r3, #8
   24702:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   24706:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   2470a:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   2470c:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   2470e:	b25b      	sxtb	r3, r3
            break;
   24710:	e7c3      	b.n	2469a <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   24712:	443a      	add	r2, r7
   24714:	6182      	str	r2, [r0, #24]
        if (size_offset)
   24716:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   2471a:	b123      	cbz	r3, 24726 <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   2471c:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   2471e:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   24720:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   24722:	d109      	bne.n	24738 <load_descriptor_values+0xdc>
   24724:	e00f      	b.n	24746 <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   24726:	f004 0530 	and.w	r5, r4, #48	; 0x30
   2472a:	2d20      	cmp	r5, #32
   2472c:	d1f7      	bne.n	2471e <load_descriptor_values+0xc2>
   2472e:	2c3f      	cmp	r4, #63	; 0x3f
   24730:	d804      	bhi.n	2473c <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   24732:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   24736:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   24738:	61c2      	str	r2, [r0, #28]
   2473a:	e7b7      	b.n	246ac <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   2473c:	2980      	cmp	r1, #128	; 0x80
   2473e:	d1fa      	bne.n	24736 <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   24740:	f100 0314 	add.w	r3, r0, #20
   24744:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   24746:	6813      	ldr	r3, [r2, #0]
   24748:	61c3      	str	r3, [r0, #28]
   2474a:	e7af      	b.n	246ac <load_descriptor_values+0x50>
        return false;
   2474c:	2000      	movs	r0, #0
   2474e:	e7b8      	b.n	246c2 <load_descriptor_values+0x66>

00024750 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   24750:	8903      	ldrh	r3, [r0, #8]
{
   24752:	b510      	push	{r4, lr}
    iter->index++;
   24754:	3301      	adds	r3, #1
   24756:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   24758:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   2475a:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   2475c:	8a0a      	ldrh	r2, [r1, #16]
   2475e:	429a      	cmp	r2, r3
   24760:	d803      	bhi.n	2476a <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   24762:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   24764:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   24768:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2476a:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   2476c:	680b      	ldr	r3, [r1, #0]
   2476e:	8942      	ldrh	r2, [r0, #10]
   24770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   24774:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   24776:	f001 0103 	and.w	r1, r1, #3
   2477a:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   2477e:	440a      	add	r2, r1
   24780:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   24782:	8982      	ldrh	r2, [r0, #12]
   24784:	f003 0130 	and.w	r1, r3, #48	; 0x30
   24788:	2900      	cmp	r1, #0
   2478a:	bf08      	it	eq
   2478c:	3201      	addeq	r2, #1
   2478e:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   24790:	89c2      	ldrh	r2, [r0, #14]
   24792:	f003 030e 	and.w	r3, r3, #14
   24796:	2b08      	cmp	r3, #8
   24798:	bf08      	it	eq
   2479a:	3201      	addeq	r2, #1
   2479c:	81c2      	strh	r2, [r0, #14]
}
   2479e:	e7e3      	b.n	24768 <advance_iterator+0x18>

000247a0 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   247a0:	b570      	push	{r4, r5, r6, lr}
   247a2:	4604      	mov	r4, r0
   247a4:	460e      	mov	r6, r1
   247a6:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   247a8:	2100      	movs	r1, #0
   247aa:	2220      	movs	r2, #32
   247ac:	3008      	adds	r0, #8
   247ae:	f005 f856 	bl	2985e <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   247b2:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   247b6:	4620      	mov	r0, r4
}
   247b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   247bc:	f7ff bf4e 	b.w	2465c <load_descriptor_values>

000247c0 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   247c0:	b538      	push	{r3, r4, r5, lr}
   247c2:	460c      	mov	r4, r1
   247c4:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   247c6:	680b      	ldr	r3, [r1, #0]
   247c8:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   247ca:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   247cc:	681b      	ldr	r3, [r3, #0]
   247ce:	0a1b      	lsrs	r3, r3, #8
   247d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   247d4:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   247d6:	bf14      	ite	ne
   247d8:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   247da:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   247dc:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   247de:	f7ff ffdf 	bl	247a0 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   247e2:	622c      	str	r4, [r5, #32]
    return status;
}
   247e4:	bd38      	pop	{r3, r4, r5, pc}

000247e6 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   247e6:	b510      	push	{r4, lr}
   247e8:	4604      	mov	r4, r0
    advance_iterator(iter);
   247ea:	f7ff ffb1 	bl	24750 <advance_iterator>
    (void)load_descriptor_values(iter);
   247ee:	f7ff ff35 	bl	2465c <load_descriptor_values>
    return iter->index != 0;
   247f2:	8920      	ldrh	r0, [r4, #8]
}
   247f4:	3800      	subs	r0, #0
   247f6:	bf18      	it	ne
   247f8:	2001      	movne	r0, #1
   247fa:	bd10      	pop	{r4, pc}

000247fc <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   247fc:	f7ff bfd0 	b.w	247a0 <pb_field_iter_begin>

00024800 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   24800:	f7ff bfde 	b.w	247c0 <pb_field_iter_begin_extension>

00024804 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   24804:	b410      	push	{r4}
   24806:	460b      	mov	r3, r1
   24808:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   2480a:	8a52      	ldrh	r2, [r2, #18]
   2480c:	2a08      	cmp	r2, #8
   2480e:	d10e      	bne.n	2482e <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   24810:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   24812:	b162      	cbz	r2, 2482e <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   24814:	b128      	cbz	r0, 24822 <pb_default_field_callback+0x1e>
   24816:	6814      	ldr	r4, [r2, #0]
   24818:	b11c      	cbz	r4, 24822 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   2481a:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2481c:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   2481e:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   24820:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   24822:	b123      	cbz	r3, 2482e <pb_default_field_callback+0x2a>
   24824:	6814      	ldr	r4, [r2, #0]
   24826:	b114      	cbz	r4, 2482e <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   24828:	4618      	mov	r0, r3
   2482a:	3204      	adds	r2, #4
   2482c:	e7f6      	b.n	2481c <pb_default_field_callback+0x18>
}
   2482e:	2001      	movs	r0, #1
   24830:	bc10      	pop	{r4}
   24832:	4770      	bx	lr

00024834 <buf_write>:
{
   24834:	4603      	mov	r3, r0
   24836:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   24838:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   2483a:	1884      	adds	r4, r0, r2
   2483c:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2483e:	f004 ffd4 	bl	297ea <memcpy>
}
   24842:	2001      	movs	r0, #1
   24844:	bd10      	pop	{r4, pc}

00024846 <pb_encode_varint>:
{
   24846:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   24848:	2a80      	cmp	r2, #128	; 0x80
{
   2484a:	b085      	sub	sp, #20
    if (value <= 0x7F)
   2484c:	f173 0100 	sbcs.w	r1, r3, #0
{
   24850:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   24852:	b2d4      	uxtb	r4, r2
   24854:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   24856:	d206      	bcs.n	24866 <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   24858:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   2485a:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   2485e:	f7e7 fd27 	bl	c2b0 <pb_write>
}
   24862:	b005      	add	sp, #20
   24864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   24866:	09d5      	lsrs	r5, r2, #7
   24868:	4608      	mov	r0, r1
    size_t i = 0;
   2486a:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   2486c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   24870:	ea53 0c05 	orrs.w	ip, r3, r5
   24874:	4617      	mov	r7, r2
        buffer[i++] = byte;
   24876:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   2487a:	d108      	bne.n	2488e <pb_encode_varint+0x48>
   2487c:	463a      	mov	r2, r7
    buffer[i++] = byte;
   2487e:	f102 0310 	add.w	r3, r2, #16
   24882:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   24884:	4630      	mov	r0, r6
    buffer[i++] = byte;
   24886:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   2488a:	3201      	adds	r2, #1
   2488c:	e7e7      	b.n	2485e <pb_encode_varint+0x18>
        byte |= 0x80;
   2488e:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   24892:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   24894:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   24898:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   2489c:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   248a0:	d1e6      	bne.n	24870 <pb_encode_varint+0x2a>
    if (high)
   248a2:	2b00      	cmp	r3, #0
   248a4:	d0eb      	beq.n	2487e <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   248a6:	0118      	lsls	r0, r3, #4
   248a8:	f000 0070 	and.w	r0, r0, #112	; 0x70
   248ac:	4304      	orrs	r4, r0
        high >>= 3;
   248ae:	08db      	lsrs	r3, r3, #3
        while (high)
   248b0:	2b00      	cmp	r3, #0
   248b2:	d0e4      	beq.n	2487e <pb_encode_varint+0x38>
            byte |= 0x80;
   248b4:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   248b8:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   248ba:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   248be:	3201      	adds	r2, #1
   248c0:	09db      	lsrs	r3, r3, #7
   248c2:	e7f5      	b.n	248b0 <pb_encode_varint+0x6a>

000248c4 <pb_encode_svarint>:
    if (value < 0)
   248c4:	1892      	adds	r2, r2, r2
   248c6:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   248ca:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   248ce:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   248d2:	f7ff bfb8 	b.w	24846 <pb_encode_varint>

000248d6 <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   248d6:	2204      	movs	r2, #4
   248d8:	f7e7 bcea 	b.w	c2b0 <pb_write>

000248dc <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   248dc:	2208      	movs	r2, #8
   248de:	f7e7 bce7 	b.w	c2b0 <pb_write>

000248e2 <pb_encode_tag>:
{
   248e2:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   248e4:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   248e8:	0f5b      	lsrs	r3, r3, #29
   248ea:	f7ff bfac 	b.w	24846 <pb_encode_varint>

000248ee <pb_encode_string>:
{
   248ee:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   248f0:	2300      	movs	r3, #0
{
   248f2:	4604      	mov	r4, r0
   248f4:	460d      	mov	r5, r1
   248f6:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   248f8:	f7ff ffa5 	bl	24846 <pb_encode_varint>
   248fc:	b130      	cbz	r0, 2490c <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   248fe:	4632      	mov	r2, r6
   24900:	4629      	mov	r1, r5
   24902:	4620      	mov	r0, r4
}
   24904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   24908:	f7e7 bcd2 	b.w	c2b0 <pb_write>
}
   2490c:	bd70      	pop	{r4, r5, r6, pc}

0002490e <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   2490e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24912:	4606      	mov	r6, r0
   24914:	460d      	mov	r5, r1
   24916:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   24918:	4698      	mov	r8, r3
   2491a:	b32b      	cbz	r3, 24968 <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   2491c:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   24920:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   24924:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   24928:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2492a:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2492c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   24930:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   24934:	441c      	add	r4, r3
   24936:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   24938:	45ca      	cmp	sl, r9
   2493a:	d309      	bcc.n	24950 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2493c:	4639      	mov	r1, r7
   2493e:	4630      	mov	r0, r6
   24940:	46ac      	mov	ip, r5
   24942:	f8d8 2004 	ldr.w	r2, [r8, #4]
   24946:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   2494a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2494e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   24950:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   24954:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   24958:	4620      	mov	r0, r4
		*ps = s;
   2495a:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2495e:	f7e4 fcff 	bl	9360 <strlen>
   24962:	3001      	adds	r0, #1
   24964:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   24966:	e7e7      	b.n	24938 <cbpprintf_external+0x2a>
}
   24968:	f06f 0015 	mvn.w	r0, #21
   2496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024970 <arch_printk_char_out>:
}
   24970:	2000      	movs	r0, #0
   24972:	4770      	bx	lr

00024974 <str_out>:
{
   24974:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24976:	688a      	ldr	r2, [r1, #8]
   24978:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2497a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2497c:	b114      	cbz	r4, 24984 <str_out+0x10>
   2497e:	684b      	ldr	r3, [r1, #4]
   24980:	4293      	cmp	r3, r2
   24982:	dc01      	bgt.n	24988 <str_out+0x14>
		ctx->count++;
   24984:	608d      	str	r5, [r1, #8]
}
   24986:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   24988:	3b01      	subs	r3, #1
   2498a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2498c:	bf08      	it	eq
   2498e:	2200      	moveq	r2, #0
   24990:	608d      	str	r5, [r1, #8]
   24992:	bf0c      	ite	eq
   24994:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   24996:	54a0      	strbne	r0, [r4, r2]
   24998:	e7f5      	b.n	24986 <str_out+0x12>

0002499a <printk>:
{
   2499a:	b40f      	push	{r0, r1, r2, r3}
   2499c:	b507      	push	{r0, r1, r2, lr}
   2499e:	a904      	add	r1, sp, #16
   249a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   249a4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   249a6:	f7e8 f95b 	bl	cc60 <vprintk>
}
   249aa:	b003      	add	sp, #12
   249ac:	f85d eb04 	ldr.w	lr, [sp], #4
   249b0:	b004      	add	sp, #16
   249b2:	4770      	bx	lr

000249b4 <snprintk>:
{
   249b4:	b40c      	push	{r2, r3}
   249b6:	b507      	push	{r0, r1, r2, lr}
   249b8:	ab04      	add	r3, sp, #16
   249ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   249be:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   249c0:	f7e8 f95c 	bl	cc7c <vsnprintk>
}
   249c4:	b003      	add	sp, #12
   249c6:	f85d eb04 	ldr.w	lr, [sp], #4
   249ca:	b002      	add	sp, #8
   249cc:	4770      	bx	lr

000249ce <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   249ce:	4604      	mov	r4, r0
   249d0:	b508      	push	{r3, lr}
   249d2:	4608      	mov	r0, r1
   249d4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   249d6:	461a      	mov	r2, r3
   249d8:	47a0      	blx	r4
	return z_impl_z_current_get();
   249da:	f7fd f953 	bl	21c84 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   249de:	f7ec f88b 	bl	10af8 <z_impl_k_thread_abort>

000249e2 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   249e2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   249e6:	8840      	ldrh	r0, [r0, #2]
}
   249e8:	0840      	lsrs	r0, r0, #1
   249ea:	4770      	bx	lr

000249ec <free_list_add>:
{
   249ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249ee:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   249f0:	f7ff fff7 	bl	249e2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   249f4:	fab0 f080 	clz	r0, r0
   249f8:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   249fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   24a00:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   24a04:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   24a06:	1d17      	adds	r7, r2, #4
{
   24a08:	460c      	mov	r4, r1
   24a0a:	3206      	adds	r2, #6
   24a0c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   24a0e:	b956      	cbnz	r6, 24a26 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   24a10:	2101      	movs	r1, #1
   24a12:	fa01 f000 	lsl.w	r0, r1, r0
   24a16:	68d9      	ldr	r1, [r3, #12]
   24a18:	4301      	orrs	r1, r0
   24a1a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   24a1c:	f8cc 4010 	str.w	r4, [ip, #16]
   24a20:	53dd      	strh	r5, [r3, r7]
   24a22:	529d      	strh	r5, [r3, r2]
}
   24a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   24a26:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   24a28:	3104      	adds	r1, #4
   24a2a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   24a2c:	53d8      	strh	r0, [r3, r7]
   24a2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   24a32:	529e      	strh	r6, [r3, r2]
   24a34:	80c5      	strh	r5, [r0, #6]
   24a36:	525d      	strh	r5, [r3, r1]
   24a38:	e7f4      	b.n	24a24 <free_list_add+0x38>

00024a3a <free_list_remove_bidx>:
{
   24a3a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   24a3c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   24a40:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   24a42:	4299      	cmp	r1, r3
   24a44:	f102 0104 	add.w	r1, r2, #4
   24a48:	d10a      	bne.n	24a60 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   24a4a:	2301      	movs	r3, #1
   24a4c:	fa03 f202 	lsl.w	r2, r3, r2
   24a50:	68c3      	ldr	r3, [r0, #12]
   24a52:	ea23 0302 	bic.w	r3, r3, r2
   24a56:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   24a58:	2300      	movs	r3, #0
   24a5a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   24a5e:	bd10      	pop	{r4, pc}
   24a60:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   24a62:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   24a66:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   24a6a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   24a6e:	80cb      	strh	r3, [r1, #6]
   24a70:	8082      	strh	r2, [r0, #4]
}
   24a72:	e7f4      	b.n	24a5e <free_list_remove_bidx+0x24>

00024a74 <free_list_remove>:
{
   24a74:	b508      	push	{r3, lr}
   24a76:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   24a78:	f7ff ffb3 	bl	249e2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   24a7c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   24a80:	4618      	mov	r0, r3
}
   24a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   24a86:	f1c2 021f 	rsb	r2, r2, #31
   24a8a:	f7ff bfd6 	b.w	24a3a <free_list_remove_bidx>

00024a8e <alloc_chunk>:
{
   24a8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24a92:	fab1 f581 	clz	r5, r1
   24a96:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   24a9a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   24a9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   24aa2:	4603      	mov	r3, r0
   24aa4:	460e      	mov	r6, r1
	if (b->next) {
   24aa6:	b1c2      	cbz	r2, 24ada <alloc_chunk+0x4c>
   24aa8:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   24aaa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   24aae:	4618      	mov	r0, r3
   24ab0:	4621      	mov	r1, r4
   24ab2:	f7ff ff96 	bl	249e2 <chunk_size>
   24ab6:	42b0      	cmp	r0, r6
   24ab8:	d306      	bcc.n	24ac8 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   24aba:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   24abc:	4618      	mov	r0, r3
   24abe:	f7ff ffbc 	bl	24a3a <free_list_remove_bidx>
}
   24ac2:	4620      	mov	r0, r4
   24ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   24ac8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   24acc:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   24ace:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   24ad0:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   24ad4:	d001      	beq.n	24ada <alloc_chunk+0x4c>
   24ad6:	4282      	cmp	r2, r0
   24ad8:	d1e7      	bne.n	24aaa <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   24ada:	f04f 34ff 	mov.w	r4, #4294967295
   24ade:	f1c5 0220 	rsb	r2, r5, #32
   24ae2:	4094      	lsls	r4, r2
   24ae4:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   24ae6:	4014      	ands	r4, r2
   24ae8:	d0eb      	beq.n	24ac2 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   24aea:	fa94 f2a4 	rbit	r2, r4
   24aee:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   24af2:	1d11      	adds	r1, r2, #4
   24af4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   24af8:	4621      	mov	r1, r4
   24afa:	e7df      	b.n	24abc <alloc_chunk+0x2e>

00024afc <merge_chunks>:
{
   24afc:	b538      	push	{r3, r4, r5, lr}
   24afe:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24b00:	f7ff ff6f 	bl	249e2 <chunk_size>
{
   24b04:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24b06:	4604      	mov	r4, r0
   24b08:	4611      	mov	r1, r2
   24b0a:	4618      	mov	r0, r3
   24b0c:	f7ff ff69 	bl	249e2 <chunk_size>
   24b10:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24b12:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   24b14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   24b18:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   24b1a:	4618      	mov	r0, r3
   24b1c:	f7ff ff61 	bl	249e2 <chunk_size>
	void *cmem = &buf[c];
   24b20:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   24b22:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   24b26:	bd38      	pop	{r3, r4, r5, pc}

00024b28 <split_chunks>:
{
   24b28:	b538      	push	{r3, r4, r5, lr}
   24b2a:	460c      	mov	r4, r1
   24b2c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   24b2e:	f7ff ff58 	bl	249e2 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   24b32:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   24b34:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   24b36:	4405      	add	r5, r0
   24b38:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24b3c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   24b3e:	8060      	strh	r0, [r4, #2]
   24b40:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24b44:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   24b46:	8044      	strh	r4, [r0, #2]
   24b48:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   24b4c:	4618      	mov	r0, r3
   24b4e:	4611      	mov	r1, r2
   24b50:	f7ff ff47 	bl	249e2 <chunk_size>
	void *cmem = &buf[c];
   24b54:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   24b56:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   24b5a:	bd38      	pop	{r3, r4, r5, pc}

00024b5c <free_chunk>:
{
   24b5c:	b538      	push	{r3, r4, r5, lr}
   24b5e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   24b60:	f7ff ff3f 	bl	249e2 <chunk_size>
   24b64:	460c      	mov	r4, r1
   24b66:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   24b68:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24b6c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   24b6e:	07da      	lsls	r2, r3, #31
   24b70:	d40a      	bmi.n	24b88 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   24b72:	4628      	mov	r0, r5
   24b74:	f7ff ff7e 	bl	24a74 <free_list_remove>
	return c + chunk_size(h, c);
   24b78:	4621      	mov	r1, r4
   24b7a:	4628      	mov	r0, r5
   24b7c:	f7ff ff31 	bl	249e2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24b80:	1822      	adds	r2, r4, r0
   24b82:	4628      	mov	r0, r5
   24b84:	f7ff ffba 	bl	24afc <merge_chunks>
		return ((uint16_t *)cmem)[f];
   24b88:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24b8c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   24b8e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24b92:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   24b94:	07db      	lsls	r3, r3, #31
   24b96:	d40c      	bmi.n	24bb2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   24b98:	4628      	mov	r0, r5
   24b9a:	f7ff ff6b 	bl	24a74 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   24b9e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   24ba2:	4622      	mov	r2, r4
   24ba4:	1a61      	subs	r1, r4, r1
   24ba6:	4628      	mov	r0, r5
   24ba8:	f7ff ffa8 	bl	24afc <merge_chunks>
   24bac:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24bb0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   24bb2:	4621      	mov	r1, r4
   24bb4:	4628      	mov	r0, r5
}
   24bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   24bba:	f7ff bf17 	b.w	249ec <free_list_add>

00024bbe <sys_heap_alloc>:
{
   24bbe:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   24bc0:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   24bc2:	b909      	cbnz	r1, 24bc8 <sys_heap_alloc+0xa>
		return NULL;
   24bc4:	2000      	movs	r0, #0
}
   24bc6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   24bc8:	68ab      	ldr	r3, [r5, #8]
   24bca:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   24bce:	d9f9      	bls.n	24bc4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24bd0:	310b      	adds	r1, #11
   24bd2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   24bd4:	4621      	mov	r1, r4
   24bd6:	4628      	mov	r0, r5
   24bd8:	f7ff ff59 	bl	24a8e <alloc_chunk>
	if (c == 0U) {
   24bdc:	4606      	mov	r6, r0
   24bde:	2800      	cmp	r0, #0
   24be0:	d0f0      	beq.n	24bc4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   24be2:	4601      	mov	r1, r0
   24be4:	4628      	mov	r0, r5
   24be6:	f7ff fefc 	bl	249e2 <chunk_size>
   24bea:	42a0      	cmp	r0, r4
   24bec:	d907      	bls.n	24bfe <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   24bee:	4628      	mov	r0, r5
   24bf0:	1932      	adds	r2, r6, r4
   24bf2:	f7ff ff99 	bl	24b28 <split_chunks>
		free_list_add(h, c + chunk_sz);
   24bf6:	4611      	mov	r1, r2
   24bf8:	4628      	mov	r0, r5
   24bfa:	f7ff fef7 	bl	249ec <free_list_add>
	void *cmem = &buf[c];
   24bfe:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   24c02:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24c04:	8853      	ldrh	r3, [r2, #2]
   24c06:	3004      	adds	r0, #4
   24c08:	f043 0301 	orr.w	r3, r3, #1
   24c0c:	8053      	strh	r3, [r2, #2]
	return mem;
   24c0e:	e7da      	b.n	24bc6 <sys_heap_alloc+0x8>

00024c10 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24c10:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   24c12:	f013 0307 	ands.w	r3, r3, #7
   24c16:	d105      	bne.n	24c24 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24c18:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   24c1a:	2b00      	cmp	r3, #0
   24c1c:	bf0c      	ite	eq
   24c1e:	2000      	moveq	r0, #0
   24c20:	2003      	movne	r0, #3
   24c22:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24c24:	2b02      	cmp	r3, #2
   24c26:	d105      	bne.n	24c34 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24c28:	8bc0      	ldrh	r0, [r0, #30]
   24c2a:	fab0 f080 	clz	r0, r0
   24c2e:	0940      	lsrs	r0, r0, #5
   24c30:	0080      	lsls	r0, r0, #2
   24c32:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24c34:	2b01      	cmp	r3, #1
   24c36:	d105      	bne.n	24c44 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24c38:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   24c3a:	2b00      	cmp	r3, #0
   24c3c:	bf0c      	ite	eq
   24c3e:	2000      	moveq	r0, #0
   24c40:	2005      	movne	r0, #5
   24c42:	4770      	bx	lr
	int evt = EVT_NOP;
   24c44:	2000      	movs	r0, #0
}
   24c46:	4770      	bx	lr

00024c48 <validate_args>:
{
   24c48:	b510      	push	{r4, lr}
   24c4a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   24c4c:	b100      	cbz	r0, 24c50 <validate_args+0x8>
   24c4e:	b911      	cbnz	r1, 24c56 <validate_args+0xe>
		return -EINVAL;
   24c50:	f06f 0015 	mvn.w	r0, #21
}
   24c54:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   24c56:	1d08      	adds	r0, r1, #4
   24c58:	f000 f82f 	bl	24cba <sys_notify_validate>
	if ((rv == 0)
   24c5c:	2800      	cmp	r0, #0
   24c5e:	d1f9      	bne.n	24c54 <validate_args+0xc>
	    && ((cli->notify.flags
   24c60:	68a3      	ldr	r3, [r4, #8]
   24c62:	2b03      	cmp	r3, #3
   24c64:	d9f6      	bls.n	24c54 <validate_args+0xc>
   24c66:	e7f3      	b.n	24c50 <validate_args+0x8>

00024c68 <notify_one>:
{
   24c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24c6c:	460d      	mov	r5, r1
   24c6e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24c70:	4619      	mov	r1, r3
   24c72:	1d28      	adds	r0, r5, #4
{
   24c74:	4690      	mov	r8, r2
   24c76:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24c78:	f7e8 fc06 	bl	d488 <sys_notify_finalize>
	if (cb) {
   24c7c:	4604      	mov	r4, r0
   24c7e:	b138      	cbz	r0, 24c90 <notify_one+0x28>
		cb(mgr, cli, state, res);
   24c80:	4633      	mov	r3, r6
   24c82:	4642      	mov	r2, r8
   24c84:	4629      	mov	r1, r5
   24c86:	4638      	mov	r0, r7
   24c88:	46a4      	mov	ip, r4
}
   24c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   24c8e:	4760      	bx	ip
}
   24c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024c94 <onoff_manager_init>:
{
   24c94:	b538      	push	{r3, r4, r5, lr}
   24c96:	460c      	mov	r4, r1
	if ((mgr == NULL)
   24c98:	4605      	mov	r5, r0
   24c9a:	b158      	cbz	r0, 24cb4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   24c9c:	b151      	cbz	r1, 24cb4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   24c9e:	680b      	ldr	r3, [r1, #0]
   24ca0:	b143      	cbz	r3, 24cb4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   24ca2:	684b      	ldr	r3, [r1, #4]
   24ca4:	b133      	cbz	r3, 24cb4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24ca6:	2220      	movs	r2, #32
   24ca8:	2100      	movs	r1, #0
   24caa:	f004 fdd8 	bl	2985e <memset>
	return 0;
   24cae:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24cb0:	612c      	str	r4, [r5, #16]
}
   24cb2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24cb4:	f06f 0015 	mvn.w	r0, #21
   24cb8:	e7fb      	b.n	24cb2 <onoff_manager_init+0x1e>

00024cba <sys_notify_validate>:
	if (notify == NULL) {
   24cba:	4603      	mov	r3, r0
   24cbc:	b140      	cbz	r0, 24cd0 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24cbe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24cc0:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   24cc4:	2a02      	cmp	r2, #2
   24cc6:	d006      	beq.n	24cd6 <sys_notify_validate+0x1c>
   24cc8:	2a03      	cmp	r2, #3
   24cca:	d004      	beq.n	24cd6 <sys_notify_validate+0x1c>
   24ccc:	2a01      	cmp	r2, #1
   24cce:	d005      	beq.n	24cdc <sys_notify_validate+0x22>
   24cd0:	f06f 0015 	mvn.w	r0, #21
}
   24cd4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24cd6:	681a      	ldr	r2, [r3, #0]
   24cd8:	2a00      	cmp	r2, #0
   24cda:	d0f9      	beq.n	24cd0 <sys_notify_validate+0x16>
		notify->result = 0;
   24cdc:	2000      	movs	r0, #0
   24cde:	6098      	str	r0, [r3, #8]
   24ce0:	4770      	bx	lr

00024ce2 <outs>:
{
   24ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ce6:	4607      	mov	r7, r0
   24ce8:	4688      	mov	r8, r1
   24cea:	4615      	mov	r5, r2
   24cec:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24cee:	4614      	mov	r4, r2
   24cf0:	42b4      	cmp	r4, r6
   24cf2:	d305      	bcc.n	24d00 <outs+0x1e>
   24cf4:	b10e      	cbz	r6, 24cfa <outs+0x18>
	return (int)count;
   24cf6:	1b60      	subs	r0, r4, r5
   24cf8:	e008      	b.n	24d0c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24cfa:	7823      	ldrb	r3, [r4, #0]
   24cfc:	2b00      	cmp	r3, #0
   24cfe:	d0fa      	beq.n	24cf6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   24d00:	4641      	mov	r1, r8
   24d02:	f814 0b01 	ldrb.w	r0, [r4], #1
   24d06:	47b8      	blx	r7
		if (rc < 0) {
   24d08:	2800      	cmp	r0, #0
   24d0a:	daf1      	bge.n	24cf0 <outs+0xe>
}
   24d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024d10 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   24d10:	4040      	eors	r0, r0
   24d12:	f380 8811 	msr	BASEPRI, r0
   24d16:	f04f 0004 	mov.w	r0, #4
   24d1a:	df02      	svc	2
}
   24d1c:	4770      	bx	lr

00024d1e <assert_print>:

void assert_print(const char *fmt, ...)
{
   24d1e:	b40f      	push	{r0, r1, r2, r3}
   24d20:	b507      	push	{r0, r1, r2, lr}
   24d22:	a904      	add	r1, sp, #16
   24d24:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   24d28:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   24d2a:	f7e7 ff99 	bl	cc60 <vprintk>

	va_end(ap);
}
   24d2e:	b003      	add	sp, #12
   24d30:	f85d eb04 	ldr.w	lr, [sp], #4
   24d34:	b004      	add	sp, #16
   24d36:	4770      	bx	lr

00024d38 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 86);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   24d38:	4770      	bx	lr

00024d3a <nordicsemi_nrf53_init>:
{
   24d3a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24d3c:	f04f 0320 	mov.w	r3, #32
   24d40:	f3ef 8511 	mrs	r5, BASEPRI
   24d44:	f383 8812 	msr	BASEPRI_MAX, r3
   24d48:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   24d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   24d50:	2401      	movs	r4, #1
   24d52:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   24d54:	4621      	mov	r1, r4
   24d56:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   24d5a:	2021      	movs	r0, #33	; 0x21
   24d5c:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   24d60:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   24d64:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   24d68:	f7e9 f964 	bl	e034 <soc_secure_gpio_pin_mcu_select>
   24d6c:	4621      	mov	r1, r4
   24d6e:	2020      	movs	r0, #32
   24d70:	f7e9 f960 	bl	e034 <soc_secure_gpio_pin_mcu_select>
   24d74:	4621      	mov	r1, r4
   24d76:	200b      	movs	r0, #11
   24d78:	f7e9 f95c 	bl	e034 <soc_secure_gpio_pin_mcu_select>
   24d7c:	4621      	mov	r1, r4
   24d7e:	200a      	movs	r0, #10
   24d80:	f7e9 f958 	bl	e034 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   24d84:	f385 8811 	msr	BASEPRI, r5
   24d88:	f3bf 8f6f 	isb	sy
}
   24d8c:	2000      	movs	r0, #0
   24d8e:	bd38      	pop	{r3, r4, r5, pc}

00024d90 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   24d90:	2806      	cmp	r0, #6
   24d92:	d108      	bne.n	24da6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   24d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24d98:	2201      	movs	r2, #1
   24d9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24d9e:	f3bf 8f4f 	dsb	sy
        __WFE();
   24da2:	bf20      	wfe
    while (true)
   24da4:	e7fd      	b.n	24da2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   24da6:	4770      	bx	lr

00024da8 <pm_state_exit_post_ops>:
   24da8:	2300      	movs	r3, #0
   24daa:	f383 8811 	msr	BASEPRI, r3
   24dae:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24db2:	4770      	bx	lr

00024db4 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   24db4:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   24db6:	ab01      	add	r3, sp, #4
   24db8:	f003 fce2 	bl	28780 <tfm_platform_mem_read>

	switch (status) {
   24dbc:	2802      	cmp	r0, #2
   24dbe:	d00a      	beq.n	24dd6 <soc_secure_mem_read+0x22>
   24dc0:	2803      	cmp	r0, #3
   24dc2:	d00b      	beq.n	24ddc <soc_secure_mem_read+0x28>
   24dc4:	b968      	cbnz	r0, 24de2 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   24dc6:	9801      	ldr	r0, [sp, #4]
   24dc8:	3800      	subs	r0, #0
   24dca:	bf18      	it	ne
   24dcc:	2001      	movne	r0, #1
   24dce:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   24dd0:	b003      	add	sp, #12
   24dd2:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   24dd6:	f06f 0015 	mvn.w	r0, #21
   24dda:	e7f9      	b.n	24dd0 <soc_secure_mem_read+0x1c>
	switch (status) {
   24ddc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24de0:	e7f6      	b.n	24dd0 <soc_secure_mem_read+0x1c>
		return -EPERM;
   24de2:	f04f 30ff 	mov.w	r0, #4294967295
   24de6:	e7f3      	b.n	24dd0 <soc_secure_mem_read+0x1c>

00024de8 <dummy_timestamp>:
}
   24de8:	2000      	movs	r0, #0
   24dea:	4770      	bx	lr

00024dec <default_get_timestamp>:
   24dec:	f003 bbab 	b.w	28546 <sys_clock_cycle_get_32>

00024df0 <atomic_inc>:
{
   24df0:	4603      	mov	r3, r0
}
   24df2:	e8d3 0fef 	ldaex	r0, [r3]
   24df6:	1c42      	adds	r2, r0, #1
   24df8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24dfc:	2900      	cmp	r1, #0
   24dfe:	d1f8      	bne.n	24df2 <atomic_inc+0x2>
   24e00:	4770      	bx	lr

00024e02 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   24e02:	2100      	movs	r1, #0
{
   24e04:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   24e06:	4608      	mov	r0, r1
   24e08:	f7e9 f944 	bl	e094 <z_log_init.isra.0>
	}

	return 0;
}
   24e0c:	2000      	movs	r0, #0
   24e0e:	bd08      	pop	{r3, pc}

00024e10 <z_log_notify_backend_enabled>:
}
   24e10:	4770      	bx	lr

00024e12 <z_log_get_tag>:
}
   24e12:	2000      	movs	r0, #0
   24e14:	4770      	bx	lr

00024e16 <z_log_msg_finalize>:
{
   24e16:	b570      	push	{r4, r5, r6, lr}
   24e18:	460e      	mov	r6, r1
   24e1a:	4615      	mov	r5, r2
   24e1c:	4619      	mov	r1, r3
	if (!msg) {
   24e1e:	4604      	mov	r4, r0
   24e20:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   24e24:	b918      	cbnz	r0, 24e2e <z_log_msg_finalize+0x18>
}
   24e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   24e2a:	f7e9 ba21 	b.w	e270 <z_log_dropped>
	if (data) {
   24e2e:	b12b      	cbz	r3, 24e3c <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   24e30:	3010      	adds	r0, #16
   24e32:	f3c5 2349 	ubfx	r3, r5, #9, #10
   24e36:	4418      	add	r0, r3
   24e38:	f004 fcd7 	bl	297ea <memcpy>
	msg->hdr.source = source;
   24e3c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   24e40:	4620      	mov	r0, r4
}
   24e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   24e46:	f7e9 ba27 	b.w	e298 <z_log_msg_commit>

00024e4a <out_func>:
{
   24e4a:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   24e4c:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   24e50:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   24e54:	2101      	movs	r1, #1
   24e56:	6852      	ldr	r2, [r2, #4]
   24e58:	f10d 0007 	add.w	r0, sp, #7
   24e5c:	4798      	blx	r3
}
   24e5e:	2000      	movs	r0, #0
   24e60:	b003      	add	sp, #12
   24e62:	f85d fb04 	ldr.w	pc, [sp], #4

00024e66 <cr_out_func>:
	if (c == '\n') {
   24e66:	280a      	cmp	r0, #10
{
   24e68:	b538      	push	{r3, r4, r5, lr}
   24e6a:	4604      	mov	r4, r0
   24e6c:	460d      	mov	r5, r1
	if (c == '\n') {
   24e6e:	d102      	bne.n	24e76 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   24e70:	200d      	movs	r0, #13
   24e72:	f7ff ffea 	bl	24e4a <out_func>
	out_func(c, ctx);
   24e76:	4629      	mov	r1, r5
   24e78:	4620      	mov	r0, r4
   24e7a:	f7ff ffe6 	bl	24e4a <out_func>
}
   24e7e:	2000      	movs	r0, #0
   24e80:	bd38      	pop	{r3, r4, r5, pc}

00024e82 <buffer_write>:
{
   24e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e84:	4606      	mov	r6, r0
   24e86:	460d      	mov	r5, r1
   24e88:	4614      	mov	r4, r2
   24e8a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   24e8c:	4621      	mov	r1, r4
   24e8e:	4628      	mov	r0, r5
   24e90:	463a      	mov	r2, r7
   24e92:	47b0      	blx	r6
	} while (len != 0);
   24e94:	1a24      	subs	r4, r4, r0
		buf += processed;
   24e96:	4405      	add	r5, r0
	} while (len != 0);
   24e98:	d1f8      	bne.n	24e8c <buffer_write+0xa>
}
   24e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024e9c <cbvprintf>:
{
   24e9c:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   24e9e:	2400      	movs	r4, #0
   24ea0:	9400      	str	r4, [sp, #0]
   24ea2:	f7e8 fb95 	bl	d5d0 <z_cbvprintf_impl>
}
   24ea6:	b002      	add	sp, #8
   24ea8:	bd10      	pop	{r4, pc}

00024eaa <log_output_flush>:
{
   24eaa:	b510      	push	{r4, lr}
		     output->control_block->offset,
   24eac:	6842      	ldr	r2, [r0, #4]
{
   24eae:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   24eb0:	e9d2 2300 	ldrd	r2, r3, [r2]
   24eb4:	6881      	ldr	r1, [r0, #8]
   24eb6:	6800      	ldr	r0, [r0, #0]
   24eb8:	f7ff ffe3 	bl	24e82 <buffer_write>
	output->control_block->offset = 0;
   24ebc:	2200      	movs	r2, #0
   24ebe:	6863      	ldr	r3, [r4, #4]
   24ec0:	601a      	str	r2, [r3, #0]
}
   24ec2:	bd10      	pop	{r4, pc}

00024ec4 <nvs_flash_rd>:
{
   24ec4:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   24ec6:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24ec8:	8984      	ldrh	r4, [r0, #12]
   24eca:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   24ecc:	fa16 f181 	uxtah	r1, r6, r1
   24ed0:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   24ed4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   24ed6:	6884      	ldr	r4, [r0, #8]
   24ed8:	6824      	ldr	r4, [r4, #0]
   24eda:	46a4      	mov	ip, r4
}
   24edc:	bc70      	pop	{r4, r5, r6}
   24ede:	4760      	bx	ip

00024ee0 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   24ee0:	680b      	ldr	r3, [r1, #0]
   24ee2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   24ee6:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   24ee8:	89c0      	ldrh	r0, [r0, #14]
   24eea:	0c1a      	lsrs	r2, r3, #16
   24eec:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   24ef0:	bf04      	itt	eq
   24ef2:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   24ef6:	600b      	streq	r3, [r1, #0]
}
   24ef8:	4770      	bx	lr

00024efa <nvs_flash_block_cmp>:
{
   24efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24efe:	4681      	mov	r9, r0
   24f00:	460e      	mov	r6, r1
   24f02:	4617      	mov	r7, r2
   24f04:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24f06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   24f08:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24f0a:	681d      	ldr	r5, [r3, #0]
   24f0c:	426d      	negs	r5, r5
	block_size =
   24f0e:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   24f12:	b91c      	cbnz	r4, 24f1c <nvs_flash_block_cmp+0x22>
	return 0;
   24f14:	4620      	mov	r0, r4
}
   24f16:	b009      	add	sp, #36	; 0x24
   24f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   24f1c:	42ac      	cmp	r4, r5
   24f1e:	46a0      	mov	r8, r4
   24f20:	bf28      	it	cs
   24f22:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   24f24:	466a      	mov	r2, sp
   24f26:	4643      	mov	r3, r8
   24f28:	4631      	mov	r1, r6
   24f2a:	4648      	mov	r0, r9
   24f2c:	f7ff ffca 	bl	24ec4 <nvs_flash_rd>
		if (rc) {
   24f30:	2800      	cmp	r0, #0
   24f32:	d1f0      	bne.n	24f16 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   24f34:	4642      	mov	r2, r8
   24f36:	4669      	mov	r1, sp
   24f38:	4638      	mov	r0, r7
   24f3a:	f004 fc46 	bl	297ca <memcmp>
		if (rc) {
   24f3e:	b920      	cbnz	r0, 24f4a <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   24f40:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   24f44:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   24f46:	4447      	add	r7, r8
   24f48:	e7e3      	b.n	24f12 <nvs_flash_block_cmp+0x18>
			return 1;
   24f4a:	2001      	movs	r0, #1
   24f4c:	e7e3      	b.n	24f16 <nvs_flash_block_cmp+0x1c>

00024f4e <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24f4e:	4601      	mov	r1, r0
{
   24f50:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24f52:	2207      	movs	r2, #7
{
   24f54:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24f56:	20ff      	movs	r0, #255	; 0xff
   24f58:	f7e8 fac2 	bl	d4e0 <crc8_ccitt>
	entry->crc8 = crc8;
   24f5c:	71e0      	strb	r0, [r4, #7]
}
   24f5e:	bd10      	pop	{r4, pc}

00024f60 <nvs_flash_cmp_const>:
{
   24f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f64:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24f66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   24f68:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24f6a:	681d      	ldr	r5, [r3, #0]
{
   24f6c:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24f6e:	426d      	negs	r5, r5
	block_size =
   24f70:	f005 0520 	and.w	r5, r5, #32
{
   24f74:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   24f76:	4668      	mov	r0, sp
{
   24f78:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   24f7a:	462a      	mov	r2, r5
   24f7c:	f004 fc6f 	bl	2985e <memset>
	while (len) {
   24f80:	b91c      	cbnz	r4, 24f8a <nvs_flash_cmp_const+0x2a>
	return 0;
   24f82:	4620      	mov	r0, r4
}
   24f84:	b008      	add	sp, #32
   24f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   24f8a:	42ac      	cmp	r4, r5
   24f8c:	46a0      	mov	r8, r4
   24f8e:	bf28      	it	cs
   24f90:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   24f92:	466a      	mov	r2, sp
   24f94:	4643      	mov	r3, r8
   24f96:	4631      	mov	r1, r6
   24f98:	4638      	mov	r0, r7
   24f9a:	f7ff ffae 	bl	24efa <nvs_flash_block_cmp>
		if (rc) {
   24f9e:	2800      	cmp	r0, #0
   24fa0:	d1f0      	bne.n	24f84 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   24fa2:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   24fa6:	4446      	add	r6, r8
   24fa8:	e7ea      	b.n	24f80 <nvs_flash_cmp_const+0x20>

00024faa <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   24faa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24fac:	ab0b      	add	r3, sp, #44	; 0x2c
   24fae:	9305      	str	r3, [sp, #20]
   24fb0:	9303      	str	r3, [sp, #12]
   24fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24fb4:	9302      	str	r3, [sp, #8]
   24fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24fb8:	9301      	str	r3, [sp, #4]
   24fba:	2300      	movs	r3, #0
   24fbc:	4618      	mov	r0, r3
   24fbe:	9300      	str	r3, [sp, #0]
   24fc0:	f7e9 f9d2 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   24fc4:	b007      	add	sp, #28
   24fc6:	f85d fb04 	ldr.w	pc, [sp], #4

00024fca <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   24fca:	7803      	ldrb	r3, [r0, #0]
   24fcc:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   24fce:	bf81      	itttt	hi
   24fd0:	f101 31ff 	addhi.w	r1, r1, #4294967295
   24fd4:	18c9      	addhi	r1, r1, r3
   24fd6:	425b      	neghi	r3, r3
   24fd8:	4019      	andhi	r1, r3
}
   24fda:	4608      	mov	r0, r1
   24fdc:	4770      	bx	lr

00024fde <nvs_ate_valid>:
{
   24fde:	b570      	push	{r4, r5, r6, lr}
   24fe0:	460c      	mov	r4, r1
   24fe2:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24fe4:	2108      	movs	r1, #8
   24fe6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   24fe8:	f7ff ffef 	bl	24fca <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24fec:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24fee:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24ff0:	4621      	mov	r1, r4
   24ff2:	20ff      	movs	r0, #255	; 0xff
   24ff4:	f7e8 fa74 	bl	d4e0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   24ff8:	79e3      	ldrb	r3, [r4, #7]
   24ffa:	4283      	cmp	r3, r0
   24ffc:	d107      	bne.n	2500e <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   24ffe:	89aa      	ldrh	r2, [r5, #12]
   25000:	8863      	ldrh	r3, [r4, #2]
   25002:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   25004:	4283      	cmp	r3, r0
   25006:	bf2c      	ite	cs
   25008:	2000      	movcs	r0, #0
   2500a:	2001      	movcc	r0, #1
}
   2500c:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2500e:	2000      	movs	r0, #0
   25010:	e7fc      	b.n	2500c <nvs_ate_valid+0x2e>

00025012 <nvs_close_ate_valid>:
{
   25012:	b538      	push	{r3, r4, r5, lr}
   25014:	4605      	mov	r5, r0
   25016:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   25018:	f7ff ffe1 	bl	24fde <nvs_ate_valid>
   2501c:	b1a0      	cbz	r0, 25048 <nvs_close_ate_valid+0x36>
   2501e:	88a0      	ldrh	r0, [r4, #4]
   25020:	b998      	cbnz	r0, 2504a <nvs_close_ate_valid+0x38>
   25022:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25026:	8822      	ldrh	r2, [r4, #0]
   25028:	429a      	cmp	r2, r3
   2502a:	d10d      	bne.n	25048 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2502c:	2108      	movs	r1, #8
   2502e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   25030:	f7ff ffcb 	bl	24fca <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   25034:	8862      	ldrh	r2, [r4, #2]
   25036:	89ab      	ldrh	r3, [r5, #12]
   25038:	1a9b      	subs	r3, r3, r2
   2503a:	fbb3 f2f0 	udiv	r2, r3, r0
   2503e:	fb02 3010 	mls	r0, r2, r0, r3
   25042:	fab0 f080 	clz	r0, r0
   25046:	0940      	lsrs	r0, r0, #5
}
   25048:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2504a:	2000      	movs	r0, #0
   2504c:	e7fc      	b.n	25048 <nvs_close_ate_valid+0x36>

0002504e <nvs_prev_ate>:
{
   2504e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25050:	4604      	mov	r4, r0
   25052:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25054:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   25056:	2108      	movs	r1, #8
   25058:	f7ff ffb7 	bl	24fca <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2505c:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2505e:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25060:	6829      	ldr	r1, [r5, #0]
   25062:	4620      	mov	r0, r4
   25064:	f7ff ff2e 	bl	24ec4 <nvs_flash_rd>
	if (rc) {
   25068:	4606      	mov	r6, r0
   2506a:	2800      	cmp	r0, #0
   2506c:	d136      	bne.n	250dc <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2506e:	682b      	ldr	r3, [r5, #0]
   25070:	443b      	add	r3, r7
   25072:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   25074:	89a2      	ldrh	r2, [r4, #12]
   25076:	b299      	uxth	r1, r3
   25078:	1bd2      	subs	r2, r2, r7
   2507a:	4291      	cmp	r1, r2
   2507c:	d12e      	bne.n	250dc <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2507e:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   25080:	bf09      	itett	eq
   25082:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   25084:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   25088:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2508c:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25090:	4620      	mov	r0, r4
   25092:	2308      	movs	r3, #8
   25094:	466a      	mov	r2, sp
   25096:	6029      	str	r1, [r5, #0]
   25098:	f7ff ff14 	bl	24ec4 <nvs_flash_rd>
	if (rc) {
   2509c:	b9e8      	cbnz	r0, 250da <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2509e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   250a0:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   250a2:	466b      	mov	r3, sp
		if (data8[i] != value) {
   250a4:	f813 1b01 	ldrb.w	r1, [r3], #1
   250a8:	428a      	cmp	r2, r1
   250aa:	d10c      	bne.n	250c6 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   250ac:	3001      	adds	r0, #1
   250ae:	2808      	cmp	r0, #8
   250b0:	d1f8      	bne.n	250a4 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   250b2:	6863      	ldr	r3, [r4, #4]
   250b4:	e005      	b.n	250c2 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   250b6:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   250b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   250bc:	0c1b      	lsrs	r3, r3, #16
   250be:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   250c0:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   250c2:	602b      	str	r3, [r5, #0]
		return 0;
   250c4:	e00a      	b.n	250dc <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   250c6:	4669      	mov	r1, sp
   250c8:	4620      	mov	r0, r4
   250ca:	f7ff ffa2 	bl	25012 <nvs_close_ate_valid>
   250ce:	2800      	cmp	r0, #0
   250d0:	d1f1      	bne.n	250b6 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   250d2:	4629      	mov	r1, r5
   250d4:	4620      	mov	r0, r4
   250d6:	f7e9 fc13 	bl	e900 <nvs_recover_last_ate>
   250da:	4606      	mov	r6, r0
}
   250dc:	4630      	mov	r0, r6
   250de:	b003      	add	sp, #12
   250e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000250e2 <nvs_flash_al_wrt>:
{
   250e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   250e6:	4607      	mov	r7, r0
   250e8:	4690      	mov	r8, r2
	if (!len) {
   250ea:	461e      	mov	r6, r3
{
   250ec:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   250ee:	b91b      	cbnz	r3, 250f8 <nvs_flash_al_wrt+0x16>
		return 0;
   250f0:	2000      	movs	r0, #0
}
   250f2:	b009      	add	sp, #36	; 0x24
   250f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   250f8:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   250fa:	8983      	ldrh	r3, [r0, #12]
   250fc:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   250fe:	fa14 f181 	uxtah	r1, r4, r1
   25102:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   25106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25108:	681d      	ldr	r5, [r3, #0]
   2510a:	426d      	negs	r5, r5
	if (blen > 0) {
   2510c:	4035      	ands	r5, r6
   2510e:	d00c      	beq.n	2512a <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   25110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   25112:	6883      	ldr	r3, [r0, #8]
   25114:	4621      	mov	r1, r4
   25116:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2511a:	462b      	mov	r3, r5
   2511c:	47c8      	blx	r9
		if (rc) {
   2511e:	2800      	cmp	r0, #0
   25120:	d1e7      	bne.n	250f2 <nvs_flash_al_wrt+0x10>
	if (len) {
   25122:	1b76      	subs	r6, r6, r5
   25124:	d0e4      	beq.n	250f0 <nvs_flash_al_wrt+0xe>
		offset += blen;
   25126:	442c      	add	r4, r5
		data8 += blen;
   25128:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2512a:	2320      	movs	r3, #32
   2512c:	4632      	mov	r2, r6
   2512e:	4641      	mov	r1, r8
   25130:	4668      	mov	r0, sp
   25132:	f004 fb67 	bl	29804 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   25136:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   25138:	eb0d 0006 	add.w	r0, sp, r6
   2513c:	682a      	ldr	r2, [r5, #0]
   2513e:	7929      	ldrb	r1, [r5, #4]
   25140:	1b92      	subs	r2, r2, r6
   25142:	f004 fb8c 	bl	2985e <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   25146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   25148:	682b      	ldr	r3, [r5, #0]
   2514a:	6882      	ldr	r2, [r0, #8]
   2514c:	4621      	mov	r1, r4
   2514e:	6855      	ldr	r5, [r2, #4]
   25150:	466a      	mov	r2, sp
   25152:	47a8      	blx	r5
	return rc;
   25154:	e7cd      	b.n	250f2 <nvs_flash_al_wrt+0x10>

00025156 <nvs_flash_ate_wrt>:
{
   25156:	b510      	push	{r4, lr}
   25158:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2515a:	2308      	movs	r3, #8
   2515c:	6841      	ldr	r1, [r0, #4]
{
   2515e:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   25160:	f7ff ffbf 	bl	250e2 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   25164:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   25166:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   25168:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2516a:	f7ff ff2e 	bl	24fca <nvs_al_size.isra.0>
   2516e:	6863      	ldr	r3, [r4, #4]
   25170:	1a1b      	subs	r3, r3, r0
   25172:	6063      	str	r3, [r4, #4]
}
   25174:	4610      	mov	r0, r2
   25176:	bd10      	pop	{r4, pc}

00025178 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   25178:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2517a:	2400      	movs	r4, #0
   2517c:	9400      	str	r4, [sp, #0]
   2517e:	f7e9 ffc7 	bl	f110 <nvs_read_hist>
	return rc;
}
   25182:	b002      	add	sp, #8
   25184:	bd10      	pop	{r4, pc}

00025186 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25186:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25188:	ab0b      	add	r3, sp, #44	; 0x2c
   2518a:	9305      	str	r3, [sp, #20]
   2518c:	9303      	str	r3, [sp, #12]
   2518e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25190:	2201      	movs	r2, #1
   25192:	9302      	str	r3, [sp, #8]
   25194:	2300      	movs	r3, #0
   25196:	4618      	mov	r0, r3
   25198:	e9cd 3300 	strd	r3, r3, [sp]
   2519c:	f7e9 f8e4 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   251a0:	b007      	add	sp, #28
   251a2:	f85d fb04 	ldr.w	pc, [sp], #4

000251a6 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   251a6:	6903      	ldr	r3, [r0, #16]
}
   251a8:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   251ac:	4770      	bx	lr

000251ae <drop_tx_buffer>:
}
   251ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   251b2:	4770      	bx	lr

000251b4 <release_rx_buffer>:
{
   251b4:	4608      	mov	r0, r1
   251b6:	b508      	push	{r3, lr}
   251b8:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   251ba:	b118      	cbz	r0, 251c4 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   251bc:	f003 feee 	bl	28f9c <rpmsg_release_rx_buffer>
	return 0;
   251c0:	2000      	movs	r0, #0
}
   251c2:	bd08      	pop	{r3, pc}
		return -ENOENT;
   251c4:	f06f 0001 	mvn.w	r0, #1
   251c8:	e7fb      	b.n	251c2 <release_rx_buffer+0xe>

000251ca <hold_rx_buffer>:
{
   251ca:	4608      	mov	r0, r1
   251cc:	b508      	push	{r3, lr}
   251ce:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   251d0:	b118      	cbz	r0, 251da <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   251d2:	f003 fedb 	bl	28f8c <rpmsg_hold_rx_buffer>
	return 0;
   251d6:	2000      	movs	r0, #0
}
   251d8:	bd08      	pop	{r3, pc}
		return -ENOENT;
   251da:	f06f 0001 	mvn.w	r0, #1
   251de:	e7fb      	b.n	251d8 <hold_rx_buffer+0xe>

000251e0 <send_nocopy>:
{
   251e0:	b513      	push	{r0, r1, r4, lr}
   251e2:	4604      	mov	r4, r0
   251e4:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   251e6:	6921      	ldr	r1, [r4, #16]
   251e8:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   251ec:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   251f0:	2902      	cmp	r1, #2
   251f2:	d109      	bne.n	25208 <send_nocopy+0x28>
	if (len == 0) {
   251f4:	b15b      	cbz	r3, 2520e <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   251f6:	b168      	cbz	r0, 25214 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   251f8:	9300      	str	r3, [sp, #0]
   251fa:	4613      	mov	r3, r2
   251fc:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   25200:	f7f9 fb04 	bl	1e80c <rpmsg_send_offchannel_nocopy>
}
   25204:	b002      	add	sp, #8
   25206:	bd10      	pop	{r4, pc}
		return -EBUSY;
   25208:	f06f 000f 	mvn.w	r0, #15
   2520c:	e7fa      	b.n	25204 <send_nocopy+0x24>
		return -EBADMSG;
   2520e:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   25212:	e7f7      	b.n	25204 <send_nocopy+0x24>
		return -ENOENT;
   25214:	f06f 0001 	mvn.w	r0, #1
   25218:	e7f4      	b.n	25204 <send_nocopy+0x24>

0002521a <get_tx_buffer>:
{
   2521a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2521e:	461c      	mov	r4, r3
   25220:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   25224:	4616      	mov	r6, r2
   25226:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   25228:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2522a:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2522c:	b339      	cbz	r1, 2527e <get_tx_buffer+0x64>
	if (!r_data || !size) {
   2522e:	b34a      	cbz	r2, 25284 <get_tx_buffer+0x6a>
   25230:	b344      	cbz	r4, 25284 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   25232:	1c6a      	adds	r2, r5, #1
   25234:	f143 0300 	adc.w	r3, r3, #0
   25238:	2a02      	cmp	r2, #2
   2523a:	f173 0300 	sbcs.w	r3, r3, #0
   2523e:	d224      	bcs.n	2528a <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   25240:	6822      	ldr	r2, [r4, #0]
   25242:	b142      	cbz	r2, 25256 <get_tx_buffer+0x3c>
   25244:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   25248:	429a      	cmp	r2, r3
   2524a:	d904      	bls.n	25256 <get_tx_buffer+0x3c>
		return -ENOMEM;
   2524c:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   25250:	6023      	str	r3, [r4, #0]
}
   25252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   25256:	ea05 0908 	and.w	r9, r5, r8
   2525a:	f109 0301 	add.w	r3, r9, #1
   2525e:	425a      	negs	r2, r3
   25260:	415a      	adcs	r2, r3
   25262:	4621      	mov	r1, r4
   25264:	4638      	mov	r0, r7
   25266:	f003 fea2 	bl	28fae <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2526a:	b988      	cbnz	r0, 25290 <get_tx_buffer+0x76>
   2526c:	f1b8 3fff 	cmp.w	r8, #4294967295
   25270:	bf08      	it	eq
   25272:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   25276:	d0f0      	beq.n	2525a <get_tx_buffer+0x40>
		return -ENOBUFS;
   25278:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2527c:	e7e9      	b.n	25252 <get_tx_buffer+0x38>
		return -ENOENT;
   2527e:	f06f 0001 	mvn.w	r0, #1
   25282:	e7e6      	b.n	25252 <get_tx_buffer+0x38>
		return -EINVAL;
   25284:	f06f 0015 	mvn.w	r0, #21
   25288:	e7e3      	b.n	25252 <get_tx_buffer+0x38>
		return -ENOTSUP;
   2528a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2528e:	e7e0      	b.n	25252 <get_tx_buffer+0x38>
	(*r_data) = payload;
   25290:	6030      	str	r0, [r6, #0]
	return 0;
   25292:	2000      	movs	r0, #0
   25294:	e7dd      	b.n	25252 <get_tx_buffer+0x38>

00025296 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   25296:	f003 becf 	b.w	29038 <rpmsg_destroy_ept>

0002529a <get_ept_slot_with_name>:
{
   2529a:	b538      	push	{r3, r4, r5, lr}
   2529c:	460d      	mov	r5, r1
   2529e:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   252a0:	f100 0140 	add.w	r1, r0, #64	; 0x40
   252a4:	4628      	mov	r0, r5
   252a6:	f7e4 f851 	bl	934c <strcmp>
   252aa:	b130      	cbz	r0, 252ba <get_ept_slot_with_name+0x20>
   252ac:	4628      	mov	r0, r5
   252ae:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   252b2:	f7e4 f84b 	bl	934c <strcmp>
   252b6:	b920      	cbnz	r0, 252c2 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   252b8:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   252ba:	2370      	movs	r3, #112	; 0x70
   252bc:	fb03 4000 	mla	r0, r3, r0, r4
}
   252c0:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   252c2:	2000      	movs	r0, #0
   252c4:	e7fc      	b.n	252c0 <get_ept_slot_with_name+0x26>

000252c6 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   252c6:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   252ca:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   252ce:	f004 b93b 	b.w	29548 <k_work_submit_to_queue>

000252d2 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   252d2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   252d6:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   252da:	3b00      	subs	r3, #0
   252dc:	bf18      	it	ne
   252de:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   252e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   252e4:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   252e8:	f003 be02 	b.w	28ef0 <virtqueue_notification>

000252ec <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   252ec:	68cb      	ldr	r3, [r1, #12]
   252ee:	b133      	cbz	r3, 252fe <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   252f0:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   252f2:	6883      	ldr	r3, [r0, #8]
   252f4:	681b      	ldr	r3, [r3, #0]
   252f6:	b113      	cbz	r3, 252fe <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   252f8:	2200      	movs	r2, #0
   252fa:	6909      	ldr	r1, [r1, #16]
   252fc:	4718      	bx	r3
}
   252fe:	4770      	bx	lr

00025300 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   25300:	f7fa bc06 	b.w	1fb10 <z_impl_k_mutex_unlock>

00025304 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25304:	e8d0 3fef 	ldaex	r3, [r0]
   25308:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2530c:	2a00      	cmp	r2, #0
   2530e:	d1f9      	bne.n	25304 <atomic_set.isra.0>
}
   25310:	4770      	bx	lr

00025312 <backend_init>:
{
   25312:	b510      	push	{r4, lr}
	data->role = conf->role;
   25314:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   25316:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   25318:	681b      	ldr	r3, [r3, #0]
   2531a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   2531e:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   25322:	f004 f879 	bl	29418 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   25326:	2100      	movs	r1, #0
   25328:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   2532c:	f7ff ffea 	bl	25304 <atomic_set.isra.0>
}
   25330:	4608      	mov	r0, r1
   25332:	bd10      	pop	{r4, pc}

00025334 <ns_bind_cb>:
{
   25334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25338:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2533a:	460d      	mov	r5, r1
   2533c:	b379      	cbz	r1, 2539e <ns_bind_cb+0x6a>
   2533e:	780b      	ldrb	r3, [r1, #0]
   25340:	b36b      	cbz	r3, 2539e <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   25342:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   25346:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2534a:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2534c:	f04f 32ff 	mov.w	r2, #4294967295
   25350:	f04f 33ff 	mov.w	r3, #4294967295
   25354:	4620      	mov	r0, r4
   25356:	f7fa fb0b 	bl	1f970 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2535a:	462a      	mov	r2, r5
   2535c:	4640      	mov	r0, r8
   2535e:	a901      	add	r1, sp, #4
   25360:	f7ea f80a 	bl	f378 <get_ept>
	if (rpmsg_ept == NULL) {
   25364:	9e01      	ldr	r6, [sp, #4]
   25366:	b92e      	cbnz	r6, 25374 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   25368:	4620      	mov	r0, r4
}
   2536a:	b002      	add	sp, #8
   2536c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   25370:	f7ff bfc6 	b.w	25300 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   25374:	b158      	cbz	r0, 2538e <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   25376:	4620      	mov	r0, r4
   25378:	f7ff ffc2 	bl	25300 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2537c:	463b      	mov	r3, r7
   2537e:	462a      	mov	r2, r5
   25380:	4631      	mov	r1, r6
   25382:	4640      	mov	r0, r8
}
   25384:	b002      	add	sp, #8
   25386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2538a:	f7e9 bfd3 	b.w	f334 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2538e:	2220      	movs	r2, #32
   25390:	4629      	mov	r1, r5
   25392:	f106 0040 	add.w	r0, r6, #64	; 0x40
   25396:	f004 fba4 	bl	29ae2 <strncpy>
		rpmsg_ept->dest = dest;
   2539a:	6637      	str	r7, [r6, #96]	; 0x60
   2539c:	e7e4      	b.n	25368 <ns_bind_cb+0x34>
}
   2539e:	b002      	add	sp, #8
   253a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000253a4 <ept_cb>:
{
   253a4:	b510      	push	{r4, lr}
   253a6:	4608      	mov	r0, r1
   253a8:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   253aa:	4611      	mov	r1, r2
   253ac:	b952      	cbnz	r2, 253c4 <ept_cb+0x20>
		if (!ept->bound) {
   253ae:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   253b2:	b92a      	cbnz	r2, 253c0 <ept_cb+0x1c>
			ept->bound = true;
   253b4:	2201      	movs	r2, #1
			bound_cb(ept);
   253b6:	4618      	mov	r0, r3
			ept->bound = true;
   253b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   253bc:	f7ea f92e 	bl	f61c <bound_cb>
}
   253c0:	2000      	movs	r0, #0
   253c2:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   253c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   253c6:	6854      	ldr	r4, [r2, #4]
   253c8:	2c00      	cmp	r4, #0
   253ca:	d0f9      	beq.n	253c0 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   253cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   253ce:	47a0      	blx	r4
   253d0:	e7f6      	b.n	253c0 <ept_cb+0x1c>

000253d2 <deregister_ept>:
{
   253d2:	b510      	push	{r4, lr}
   253d4:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   253d6:	6903      	ldr	r3, [r0, #16]
   253d8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   253dc:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   253e0:	2b02      	cmp	r3, #2
   253e2:	d10a      	bne.n	253fa <deregister_ept+0x28>
	if (!rpmsg_ept) {
   253e4:	b161      	cbz	r1, 25400 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   253e6:	4608      	mov	r0, r1
   253e8:	f003 fe26 	bl	29038 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   253ec:	2270      	movs	r2, #112	; 0x70
   253ee:	2100      	movs	r1, #0
   253f0:	4620      	mov	r0, r4
   253f2:	f004 fa34 	bl	2985e <memset>
	return 0;
   253f6:	2000      	movs	r0, #0
}
   253f8:	bd10      	pop	{r4, pc}
		return -EBUSY;
   253fa:	f06f 000f 	mvn.w	r0, #15
   253fe:	e7fb      	b.n	253f8 <deregister_ept+0x26>
		return -ENOENT;
   25400:	f06f 0001 	mvn.w	r0, #1
   25404:	e7f8      	b.n	253f8 <deregister_ept+0x26>

00025406 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   25406:	f003 be17 	b.w	29038 <rpmsg_destroy_ept>

0002540a <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2540a:	b538      	push	{r3, r4, r5, lr}
   2540c:	460d      	mov	r5, r1
	if (!instance) {
   2540e:	4604      	mov	r4, r0
   25410:	b160      	cbz	r0, 2542c <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   25412:	30e0      	adds	r0, #224	; 0xe0
   25414:	f003 ff91 	bl	2933a <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   25418:	b10d      	cbz	r5, 2541e <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2541a:	2000      	movs	r0, #0
}
   2541c:	bd38      	pop	{r3, r4, r5, pc}
   2541e:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   25422:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   25426:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2542a:	e7f6      	b.n	2541a <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2542c:	f06f 0015 	mvn.w	r0, #21
   25430:	e7f4      	b.n	2541c <ipc_rpmsg_deinit+0x12>

00025432 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   25432:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   25434:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   25438:	b113      	cbz	r3, 25440 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2543a:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2543e:	4718      	bx	r3
}
   25440:	4770      	bx	lr

00025442 <virtio_set_features>:
}
   25442:	4770      	bx	lr

00025444 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   25444:	6983      	ldr	r3, [r0, #24]
   25446:	b913      	cbnz	r3, 2544e <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   25448:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2544c:	7019      	strb	r1, [r3, #0]
}
   2544e:	4770      	bx	lr

00025450 <virtio_get_features>:
}
   25450:	2001      	movs	r0, #1
   25452:	4770      	bx	lr

00025454 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   25454:	6983      	ldr	r3, [r0, #24]
   25456:	2b01      	cmp	r3, #1
   25458:	d104      	bne.n	25464 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2545a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2545e:	7818      	ldrb	r0, [r3, #0]
   25460:	b2c0      	uxtb	r0, r0
   25462:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   25464:	2004      	movs	r0, #4
}
   25466:	4770      	bx	lr

00025468 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   25468:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2546a:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   2546c:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   2546e:	4620      	mov	r0, r4
   25470:	f004 f9a6 	bl	297c0 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   25474:	4605      	mov	r5, r0
   25476:	b118      	cbz	r0, 25480 <virtqueue_allocate+0x18>
   25478:	4622      	mov	r2, r4
   2547a:	2100      	movs	r1, #0
   2547c:	f004 f9ef 	bl	2985e <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   25480:	4628      	mov	r0, r5
   25482:	bd38      	pop	{r3, r4, r5, pc}

00025484 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   25484:	b538      	push	{r3, r4, r5, lr}
   25486:	4604      	mov	r4, r0
   25488:	2230      	movs	r2, #48	; 0x30
   2548a:	2100      	movs	r1, #0
   2548c:	f004 f9e7 	bl	2985e <memset>
   25490:	2218      	movs	r2, #24
   25492:	2100      	movs	r1, #0
   25494:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   25498:	f004 f9e1 	bl	2985e <memset>
   2549c:	2218      	movs	r2, #24
   2549e:	2100      	movs	r1, #0
   254a0:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   254a4:	f004 f9db 	bl	2985e <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   254a8:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   254ac:	f7f9 f960 	bl	1e770 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   254b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   254b4:	f7f9 f95c 	bl	1e770 <virtqueue_free>
	vr->shm_io = 0;
   254b8:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   254ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   254be:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   254c2:	f7f9 f871 	bl	1e5a8 <metal_device_close>
	metal_finish();
   254c6:	f7f9 f8cb 	bl	1e660 <metal_finish>
	if (io->ops.close)
   254ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   254cc:	f104 0540 	add.w	r5, r4, #64	; 0x40
   254d0:	b10b      	cbz	r3, 254d6 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   254d2:	4628      	mov	r0, r5
   254d4:	4798      	blx	r3
   254d6:	2238      	movs	r2, #56	; 0x38
   254d8:	2100      	movs	r1, #0
   254da:	4628      	mov	r0, r5
   254dc:	f004 f9bf 	bl	2985e <memset>

	return 0;
}
   254e0:	2000      	movs	r0, #0
   254e2:	bd38      	pop	{r3, r4, r5, pc}

000254e4 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   254e4:	b538      	push	{r3, r4, r5, lr}
   254e6:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   254e8:	42ab      	cmp	r3, r5
{
   254ea:	4611      	mov	r1, r2
   254ec:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   254ee:	d804      	bhi.n	254fa <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   254f0:	461a      	mov	r2, r3
   254f2:	f004 f97a 	bl	297ea <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   254f6:	4620      	mov	r0, r4
   254f8:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   254fa:	2400      	movs	r4, #0
   254fc:	e7fb      	b.n	254f6 <_copy+0x12>

000254fe <_set>:
__ssp_bos_icheck3(memset, void *, int)
   254fe:	f004 b9ae 	b.w	2985e <memset>

00025502 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   25502:	09c3      	lsrs	r3, r0, #7
   25504:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25508:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2550c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   25510:	b2c0      	uxtb	r0, r0
   25512:	4770      	bx	lr

00025514 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   25514:	78cb      	ldrb	r3, [r1, #3]
   25516:	7802      	ldrb	r2, [r0, #0]
   25518:	4053      	eors	r3, r2
   2551a:	7003      	strb	r3, [r0, #0]
   2551c:	884b      	ldrh	r3, [r1, #2]
   2551e:	7842      	ldrb	r2, [r0, #1]
   25520:	4053      	eors	r3, r2
   25522:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   25524:	680a      	ldr	r2, [r1, #0]
   25526:	7883      	ldrb	r3, [r0, #2]
   25528:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2552c:	7083      	strb	r3, [r0, #2]
   2552e:	680a      	ldr	r2, [r1, #0]
   25530:	78c3      	ldrb	r3, [r0, #3]
   25532:	4053      	eors	r3, r2
   25534:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   25536:	79cb      	ldrb	r3, [r1, #7]
   25538:	7902      	ldrb	r2, [r0, #4]
   2553a:	4053      	eors	r3, r2
   2553c:	7103      	strb	r3, [r0, #4]
   2553e:	88cb      	ldrh	r3, [r1, #6]
   25540:	7942      	ldrb	r2, [r0, #5]
   25542:	4053      	eors	r3, r2
   25544:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   25546:	684a      	ldr	r2, [r1, #4]
   25548:	7983      	ldrb	r3, [r0, #6]
   2554a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2554e:	7183      	strb	r3, [r0, #6]
   25550:	684a      	ldr	r2, [r1, #4]
   25552:	79c3      	ldrb	r3, [r0, #7]
   25554:	4053      	eors	r3, r2
   25556:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   25558:	7acb      	ldrb	r3, [r1, #11]
   2555a:	7a02      	ldrb	r2, [r0, #8]
   2555c:	4053      	eors	r3, r2
   2555e:	7203      	strb	r3, [r0, #8]
   25560:	7a42      	ldrb	r2, [r0, #9]
   25562:	894b      	ldrh	r3, [r1, #10]
   25564:	4053      	eors	r3, r2
   25566:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   25568:	688a      	ldr	r2, [r1, #8]
   2556a:	7a83      	ldrb	r3, [r0, #10]
   2556c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25570:	7283      	strb	r3, [r0, #10]
   25572:	688a      	ldr	r2, [r1, #8]
   25574:	7ac3      	ldrb	r3, [r0, #11]
   25576:	4053      	eors	r3, r2
   25578:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2557a:	7bcb      	ldrb	r3, [r1, #15]
   2557c:	7b02      	ldrb	r2, [r0, #12]
   2557e:	4053      	eors	r3, r2
   25580:	7303      	strb	r3, [r0, #12]
   25582:	89cb      	ldrh	r3, [r1, #14]
   25584:	7b42      	ldrb	r2, [r0, #13]
   25586:	4053      	eors	r3, r2
   25588:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2558a:	68ca      	ldr	r2, [r1, #12]
   2558c:	7b83      	ldrb	r3, [r0, #14]
   2558e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25592:	7383      	strb	r3, [r0, #14]
   25594:	68ca      	ldr	r2, [r1, #12]
   25596:	7bc3      	ldrb	r3, [r0, #15]
   25598:	4053      	eors	r3, r2
   2559a:	73c3      	strb	r3, [r0, #15]
}
   2559c:	4770      	bx	lr

0002559e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2559e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   255a0:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   255a2:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   255a4:	f88d 2000 	strb.w	r2, [sp]
   255a8:	7942      	ldrb	r2, [r0, #5]
   255aa:	f88d 2001 	strb.w	r2, [sp, #1]
   255ae:	7a82      	ldrb	r2, [r0, #10]
   255b0:	f88d 2002 	strb.w	r2, [sp, #2]
   255b4:	7bc2      	ldrb	r2, [r0, #15]
   255b6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   255ba:	7902      	ldrb	r2, [r0, #4]
   255bc:	f88d 2004 	strb.w	r2, [sp, #4]
   255c0:	7a42      	ldrb	r2, [r0, #9]
   255c2:	f88d 2005 	strb.w	r2, [sp, #5]
   255c6:	7b82      	ldrb	r2, [r0, #14]
   255c8:	f88d 2006 	strb.w	r2, [sp, #6]
   255cc:	78c2      	ldrb	r2, [r0, #3]
   255ce:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   255d2:	7a02      	ldrb	r2, [r0, #8]
   255d4:	f88d 2008 	strb.w	r2, [sp, #8]
   255d8:	7b42      	ldrb	r2, [r0, #13]
   255da:	f88d 2009 	strb.w	r2, [sp, #9]
   255de:	7882      	ldrb	r2, [r0, #2]
   255e0:	f88d 200a 	strb.w	r2, [sp, #10]
   255e4:	79c2      	ldrb	r2, [r0, #7]
   255e6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   255ea:	7b02      	ldrb	r2, [r0, #12]
   255ec:	f88d 200c 	strb.w	r2, [sp, #12]
   255f0:	7842      	ldrb	r2, [r0, #1]
   255f2:	f88d 200d 	strb.w	r2, [sp, #13]
   255f6:	7982      	ldrb	r2, [r0, #6]
   255f8:	f88d 200e 	strb.w	r2, [sp, #14]
   255fc:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   25600:	2310      	movs	r3, #16
   25602:	466a      	mov	r2, sp
   25604:	4619      	mov	r1, r3
   25606:	f7ff ff6d 	bl	254e4 <_copy>
}
   2560a:	b005      	add	sp, #20
   2560c:	f85d fb04 	ldr.w	pc, [sp], #4

00025610 <mult_row_column>:
{
   25610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25612:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   25614:	7808      	ldrb	r0, [r1, #0]
{
   25616:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   25618:	f7ff ff73 	bl	25502 <_double_byte>
   2561c:	4605      	mov	r5, r0
   2561e:	7860      	ldrb	r0, [r4, #1]
   25620:	f7ff ff6f 	bl	25502 <_double_byte>
   25624:	78a2      	ldrb	r2, [r4, #2]
   25626:	7863      	ldrb	r3, [r4, #1]
   25628:	4053      	eors	r3, r2
   2562a:	78e2      	ldrb	r2, [r4, #3]
   2562c:	4053      	eors	r3, r2
   2562e:	405d      	eors	r5, r3
   25630:	4068      	eors	r0, r5
   25632:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   25634:	7860      	ldrb	r0, [r4, #1]
   25636:	7827      	ldrb	r7, [r4, #0]
   25638:	f7ff ff63 	bl	25502 <_double_byte>
   2563c:	4605      	mov	r5, r0
   2563e:	78a0      	ldrb	r0, [r4, #2]
   25640:	f7ff ff5f 	bl	25502 <_double_byte>
   25644:	78a3      	ldrb	r3, [r4, #2]
   25646:	405f      	eors	r7, r3
   25648:	78e3      	ldrb	r3, [r4, #3]
   2564a:	405f      	eors	r7, r3
   2564c:	407d      	eors	r5, r7
   2564e:	4068      	eors	r0, r5
   25650:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   25652:	7863      	ldrb	r3, [r4, #1]
   25654:	7827      	ldrb	r7, [r4, #0]
   25656:	78a0      	ldrb	r0, [r4, #2]
   25658:	405f      	eors	r7, r3
   2565a:	f7ff ff52 	bl	25502 <_double_byte>
   2565e:	4605      	mov	r5, r0
   25660:	78e0      	ldrb	r0, [r4, #3]
   25662:	f7ff ff4e 	bl	25502 <_double_byte>
   25666:	78e3      	ldrb	r3, [r4, #3]
   25668:	405f      	eors	r7, r3
   2566a:	407d      	eors	r5, r7
   2566c:	4068      	eors	r0, r5
   2566e:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   25670:	7820      	ldrb	r0, [r4, #0]
   25672:	f7ff ff46 	bl	25502 <_double_byte>
   25676:	7862      	ldrb	r2, [r4, #1]
   25678:	7823      	ldrb	r3, [r4, #0]
   2567a:	4053      	eors	r3, r2
   2567c:	78a2      	ldrb	r2, [r4, #2]
   2567e:	4053      	eors	r3, r2
   25680:	ea80 0503 	eor.w	r5, r0, r3
   25684:	78e0      	ldrb	r0, [r4, #3]
   25686:	f7ff ff3c 	bl	25502 <_double_byte>
   2568a:	b2ed      	uxtb	r5, r5
   2568c:	4045      	eors	r5, r0
   2568e:	70f5      	strb	r5, [r6, #3]
}
   25690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025692 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   25692:	b570      	push	{r4, r5, r6, lr}
   25694:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   25696:	4605      	mov	r5, r0
{
   25698:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2569a:	2800      	cmp	r0, #0
   2569c:	d049      	beq.n	25732 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2569e:	2900      	cmp	r1, #0
   256a0:	d049      	beq.n	25736 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   256a2:	2a00      	cmp	r2, #0
   256a4:	d049      	beq.n	2573a <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   256a6:	2310      	movs	r3, #16
   256a8:	460a      	mov	r2, r1
   256aa:	4668      	mov	r0, sp
   256ac:	4619      	mov	r1, r3
   256ae:	f7ff ff19 	bl	254e4 <_copy>
	add_round_key(state, s->words);
   256b2:	4621      	mov	r1, r4
   256b4:	4668      	mov	r0, sp
   256b6:	f7ff ff2d 	bl	25514 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   256ba:	3410      	adds	r4, #16
   256bc:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   256c0:	4668      	mov	r0, sp
   256c2:	f7ea fb4b 	bl	fd5c <sub_bytes>
		shift_rows(state);
   256c6:	4668      	mov	r0, sp
   256c8:	f7ff ff69 	bl	2559e <shift_rows>
	mult_row_column(t, s);
   256cc:	4669      	mov	r1, sp
   256ce:	a804      	add	r0, sp, #16
   256d0:	f7ff ff9e 	bl	25610 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   256d4:	a901      	add	r1, sp, #4
   256d6:	a805      	add	r0, sp, #20
   256d8:	f7ff ff9a 	bl	25610 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   256dc:	a902      	add	r1, sp, #8
   256de:	a806      	add	r0, sp, #24
   256e0:	f7ff ff96 	bl	25610 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   256e4:	a903      	add	r1, sp, #12
   256e6:	a807      	add	r0, sp, #28
   256e8:	f7ff ff92 	bl	25610 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   256ec:	2310      	movs	r3, #16
   256ee:	4668      	mov	r0, sp
   256f0:	4619      	mov	r1, r3
   256f2:	eb0d 0203 	add.w	r2, sp, r3
   256f6:	f7ff fef5 	bl	254e4 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   256fa:	4621      	mov	r1, r4
   256fc:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   256fe:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   25700:	f7ff ff08 	bl	25514 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   25704:	42b4      	cmp	r4, r6
   25706:	d1db      	bne.n	256c0 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   25708:	f7ea fb28 	bl	fd5c <sub_bytes>
	shift_rows(state);
   2570c:	4668      	mov	r0, sp
   2570e:	f7ff ff46 	bl	2559e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   25712:	4621      	mov	r1, r4
   25714:	4668      	mov	r0, sp
   25716:	f7ff fefd 	bl	25514 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2571a:	2310      	movs	r3, #16
   2571c:	466a      	mov	r2, sp
   2571e:	4619      	mov	r1, r3
   25720:	4628      	mov	r0, r5
   25722:	f7ff fedf 	bl	254e4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   25726:	4668      	mov	r0, sp
   25728:	2210      	movs	r2, #16
   2572a:	2100      	movs	r1, #0
   2572c:	f7ff fee7 	bl	254fe <_set>

	return TC_CRYPTO_SUCCESS;
   25730:	2001      	movs	r0, #1
}
   25732:	b008      	add	sp, #32
   25734:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   25736:	4608      	mov	r0, r1
   25738:	e7fb      	b.n	25732 <tc_aes_encrypt+0xa0>
   2573a:	4610      	mov	r0, r2
   2573c:	e7f9      	b.n	25732 <tc_aes_encrypt+0xa0>

0002573e <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2573e:	460a      	mov	r2, r1
{
   25740:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   25742:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   25746:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   25748:	2b00      	cmp	r3, #0
   2574a:	bfac      	ite	ge
   2574c:	2300      	movge	r3, #0
   2574e:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   25750:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   25754:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   25758:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2575a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2575e:	d002      	beq.n	25766 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   25760:	7813      	ldrb	r3, [r2, #0]
   25762:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   25764:	e7f4      	b.n	25750 <gf_double+0x12>
	}
}
   25766:	bd10      	pop	{r4, pc}

00025768 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   25768:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2576a:	b120      	cbz	r0, 25776 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2576c:	2258      	movs	r2, #88	; 0x58
   2576e:	2100      	movs	r1, #0
   25770:	f7ff fec5 	bl	254fe <_set>
   25774:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   25776:	bd08      	pop	{r3, pc}

00025778 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   25778:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2577a:	4604      	mov	r4, r0
   2577c:	b188      	cbz	r0, 257a2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2577e:	2210      	movs	r2, #16
   25780:	2100      	movs	r1, #0
   25782:	f7ff febc 	bl	254fe <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   25786:	2210      	movs	r2, #16
   25788:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2578c:	2100      	movs	r1, #0
   2578e:	f7ff feb6 	bl	254fe <_set>
	s->leftover_offset = 0;
   25792:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   25794:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   25796:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   25798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2579c:	2001      	movs	r0, #1
   2579e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   257a2:	bd10      	pop	{r4, pc}

000257a4 <tc_cmac_setup>:
{
   257a4:	b570      	push	{r4, r5, r6, lr}
   257a6:	4604      	mov	r4, r0
   257a8:	460d      	mov	r5, r1
   257aa:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   257ac:	b310      	cbz	r0, 257f4 <tc_cmac_setup+0x50>
   257ae:	b311      	cbz	r1, 257f6 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   257b0:	2258      	movs	r2, #88	; 0x58
   257b2:	2100      	movs	r1, #0
   257b4:	f7ff fea3 	bl	254fe <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   257b8:	4629      	mov	r1, r5
   257ba:	4630      	mov	r0, r6
	s->sched = sched;
   257bc:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   257be:	f7ea fad9 	bl	fd74 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   257c2:	2210      	movs	r2, #16
   257c4:	2100      	movs	r1, #0
   257c6:	4620      	mov	r0, r4
   257c8:	f7ff fe99 	bl	254fe <_set>
	gf_double (s->K1, s->iv);
   257cc:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   257d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   257d2:	4621      	mov	r1, r4
   257d4:	4620      	mov	r0, r4
   257d6:	f7ff ff5c 	bl	25692 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   257da:	4621      	mov	r1, r4
   257dc:	4628      	mov	r0, r5
   257de:	f7ff ffae 	bl	2573e <gf_double>
	gf_double (s->K2, s->K1);
   257e2:	4629      	mov	r1, r5
   257e4:	f104 0020 	add.w	r0, r4, #32
   257e8:	f7ff ffa9 	bl	2573e <gf_double>
	tc_cmac_init(s);
   257ec:	4620      	mov	r0, r4
   257ee:	f7ff ffc3 	bl	25778 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   257f2:	2001      	movs	r0, #1
}
   257f4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   257f6:	4608      	mov	r0, r1
   257f8:	e7fc      	b.n	257f4 <tc_cmac_setup+0x50>

000257fa <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   257fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   257fe:	460e      	mov	r6, r1
   25800:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   25802:	4604      	mov	r4, r0
   25804:	2800      	cmp	r0, #0
   25806:	d060      	beq.n	258ca <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   25808:	b1fa      	cbz	r2, 2584a <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2580a:	2900      	cmp	r1, #0
   2580c:	d05d      	beq.n	258ca <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2580e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   25812:	ea53 0102 	orrs.w	r1, r3, r2
   25816:	d058      	beq.n	258ca <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   25818:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2581a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2581e:	f142 32ff 	adc.w	r2, r2, #4294967295
   25822:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   25826:	f1b8 0f00 	cmp.w	r8, #0
   2582a:	d02c      	beq.n	25886 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2582c:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   25830:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   25834:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   25836:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   25838:	d20a      	bcs.n	25850 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2583a:	462b      	mov	r3, r5
   2583c:	4632      	mov	r2, r6
   2583e:	4629      	mov	r1, r5
   25840:	f7ff fe50 	bl	254e4 <_copy>
			s->leftover_offset += data_length;
   25844:	6c63      	ldr	r3, [r4, #68]	; 0x44
   25846:	442b      	add	r3, r5
   25848:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2584a:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2584c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   25850:	463b      	mov	r3, r7
   25852:	4632      	mov	r2, r6
   25854:	4639      	mov	r1, r7
   25856:	f7ff fe45 	bl	254e4 <_copy>
		s->leftover_offset = 0;
   2585a:	2300      	movs	r3, #0
   2585c:	3d10      	subs	r5, #16
   2585e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   25860:	4445      	add	r5, r8
		data += remaining_space;
   25862:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25864:	1e63      	subs	r3, r4, #1
   25866:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2586a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2586e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25872:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   25874:	ea82 0200 	eor.w	r2, r2, r0
   25878:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2587a:	d1f6      	bne.n	2586a <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2587c:	4621      	mov	r1, r4
   2587e:	4620      	mov	r0, r4
   25880:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25882:	f7ff ff06 	bl	25692 <tc_aes_encrypt>
   25886:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2588a:	2d10      	cmp	r5, #16
   2588c:	d80a      	bhi.n	258a4 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2588e:	2d00      	cmp	r5, #0
   25890:	d0db      	beq.n	2584a <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   25892:	462b      	mov	r3, r5
   25894:	4632      	mov	r2, r6
   25896:	4629      	mov	r1, r5
   25898:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2589c:	f7ff fe22 	bl	254e4 <_copy>
		s->leftover_offset = data_length;
   258a0:	6465      	str	r5, [r4, #68]	; 0x44
   258a2:	e7d2      	b.n	2584a <tc_cmac_update+0x50>
   258a4:	1e63      	subs	r3, r4, #1
   258a6:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   258a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   258ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   258b0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   258b2:	ea82 0200 	eor.w	r2, r2, r0
   258b6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   258b8:	d1f6      	bne.n	258a8 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   258ba:	4621      	mov	r1, r4
   258bc:	4620      	mov	r0, r4
   258be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   258c0:	f7ff fee7 	bl	25692 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   258c4:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   258c6:	3d10      	subs	r5, #16
   258c8:	e7df      	b.n	2588a <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   258ca:	2000      	movs	r0, #0
   258cc:	e7be      	b.n	2584c <tc_cmac_update+0x52>

000258ce <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   258ce:	b570      	push	{r4, r5, r6, lr}
   258d0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   258d2:	4605      	mov	r5, r0
   258d4:	b1f0      	cbz	r0, 25914 <tc_cmac_final+0x46>
   258d6:	b371      	cbz	r1, 25936 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   258d8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   258da:	2a10      	cmp	r2, #16
   258dc:	d11b      	bne.n	25916 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   258de:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   258e0:	1e63      	subs	r3, r4, #1
   258e2:	3901      	subs	r1, #1
   258e4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   258e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   258ec:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   258f0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   258f2:	ea82 0206 	eor.w	r2, r2, r6
   258f6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   258fa:	ea82 0206 	eor.w	r2, r2, r6
   258fe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25900:	d1f2      	bne.n	258e8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   25902:	4621      	mov	r1, r4
   25904:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25906:	4628      	mov	r0, r5
   25908:	f7ff fec3 	bl	25692 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2590c:	4620      	mov	r0, r4
   2590e:	f7ff ff2b 	bl	25768 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   25912:	2001      	movs	r0, #1
}
   25914:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   25916:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2591a:	2100      	movs	r1, #0
   2591c:	f1c2 0210 	rsb	r2, r2, #16
   25920:	4420      	add	r0, r4
   25922:	f7ff fdec 	bl	254fe <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   25926:	2280      	movs	r2, #128	; 0x80
   25928:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2592a:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2592e:	4423      	add	r3, r4
   25930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   25934:	e7d4      	b.n	258e0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   25936:	4608      	mov	r0, r1
   25938:	e7ec      	b.n	25914 <tc_cmac_final+0x46>

0002593a <tc_sha256_update>:
{
   2593a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2593c:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2593e:	b110      	cbz	r0, 25946 <tc_sha256_update+0xc>
   25940:	b1f9      	cbz	r1, 25982 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   25942:	b90a      	cbnz	r2, 25948 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   25944:	2001      	movs	r0, #1
}
   25946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   25948:	2700      	movs	r7, #0
   2594a:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2594c:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   25950:	6e83      	ldr	r3, [r0, #104]	; 0x68
   25952:	1c5a      	adds	r2, r3, #1
   25954:	6682      	str	r2, [r0, #104]	; 0x68
   25956:	f814 1b01 	ldrb.w	r1, [r4], #1
   2595a:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2595c:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2595e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   25962:	d90b      	bls.n	2597c <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   25964:	4631      	mov	r1, r6
   25966:	f7ea fa59 	bl	fe1c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2596a:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2596e:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   25972:	f142 0200 	adc.w	r2, r2, #0
   25976:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2597a:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2597c:	42a5      	cmp	r5, r4
   2597e:	d1e7      	bne.n	25950 <tc_sha256_update+0x16>
   25980:	e7e0      	b.n	25944 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   25982:	4608      	mov	r0, r1
   25984:	e7df      	b.n	25946 <tc_sha256_update+0xc>

00025986 <tc_sha256_final>:
{
   25986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25988:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2598a:	4605      	mov	r5, r0
   2598c:	2800      	cmp	r0, #0
   2598e:	d054      	beq.n	25a3a <tc_sha256_final+0xb4>
   25990:	2900      	cmp	r1, #0
   25992:	d053      	beq.n	25a3c <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   25994:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   25996:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2599a:	00d8      	lsls	r0, r3, #3
   2599c:	1812      	adds	r2, r2, r0
   2599e:	f141 0100 	adc.w	r1, r1, #0
   259a2:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   259a6:	2280      	movs	r2, #128	; 0x80
   259a8:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   259aa:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   259ac:	4423      	add	r3, r4
   259ae:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   259b0:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   259b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   259b8:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   259bc:	d90a      	bls.n	259d4 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   259be:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   259c2:	4639      	mov	r1, r7
   259c4:	4430      	add	r0, r6
   259c6:	f7ff fd9a 	bl	254fe <_set>
		compress(s->iv, s->leftover);
   259ca:	4631      	mov	r1, r6
   259cc:	4620      	mov	r0, r4
   259ce:	f7ea fa25 	bl	fe1c <compress>
		s->leftover_offset = 0;
   259d2:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   259d4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   259d6:	2100      	movs	r1, #0
   259d8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   259dc:	4430      	add	r0, r6
   259de:	f7ff fd8e 	bl	254fe <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   259e2:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   259e4:	4631      	mov	r1, r6
   259e6:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   259e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   259ea:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   259ec:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   259ee:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   259f2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   259f6:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   259f8:	0e1b      	lsrs	r3, r3, #24
   259fa:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   259fe:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   25a00:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   25a04:	f7ea fa0a 	bl	fe1c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   25a08:	1d2b      	adds	r3, r5, #4
   25a0a:	1f21      	subs	r1, r4, #4
   25a0c:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   25a0e:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   25a12:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   25a14:	0e10      	lsrs	r0, r2, #24
   25a16:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   25a1a:	0c10      	lsrs	r0, r2, #16
   25a1c:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   25a20:	0a10      	lsrs	r0, r2, #8
   25a22:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   25a26:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   25a2a:	42ab      	cmp	r3, r5
   25a2c:	d1ef      	bne.n	25a0e <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   25a2e:	4620      	mov	r0, r4
   25a30:	2270      	movs	r2, #112	; 0x70
   25a32:	2100      	movs	r1, #0
   25a34:	f7ff fd63 	bl	254fe <_set>
	return TC_CRYPTO_SUCCESS;
   25a38:	2001      	movs	r0, #1
}
   25a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   25a3c:	4608      	mov	r0, r1
   25a3e:	e7fc      	b.n	25a3a <tc_sha256_final+0xb4>

00025a40 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   25a40:	b530      	push	{r4, r5, lr}
   25a42:	1e43      	subs	r3, r0, #1
   25a44:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   25a46:	42a9      	cmp	r1, r5
   25a48:	d106      	bne.n	25a58 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   25a4a:	2136      	movs	r1, #54	; 0x36
   25a4c:	245c      	movs	r4, #92	; 0x5c
   25a4e:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   25a50:	1a13      	subs	r3, r2, r0
   25a52:	2b3f      	cmp	r3, #63	; 0x3f
   25a54:	d90c      	bls.n	25a70 <rekey+0x30>
	}
}
   25a56:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   25a58:	780c      	ldrb	r4, [r1, #0]
   25a5a:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   25a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   25a62:	f811 4b01 	ldrb.w	r4, [r1], #1
   25a66:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   25a6a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   25a6e:	e7ea      	b.n	25a46 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   25a70:	f802 1b01 	strb.w	r1, [r2], #1
   25a74:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   25a78:	e7ea      	b.n	25a50 <rekey+0x10>

00025a7a <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   25a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   25a7c:	460e      	mov	r6, r1
   25a7e:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   25a80:	4605      	mov	r5, r0
{
   25a82:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   25a84:	b1b8      	cbz	r0, 25ab6 <tc_hmac_set_key+0x3c>
   25a86:	b341      	cbz	r1, 25ada <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   25a88:	b34a      	cbz	r2, 25ade <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   25a8a:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   25a8c:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   25a90:	d813      	bhi.n	25aba <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   25a92:	a810      	add	r0, sp, #64	; 0x40
   25a94:	f7ea faac 	bl	fff0 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   25a98:	4622      	mov	r2, r4
   25a9a:	4669      	mov	r1, sp
   25a9c:	a810      	add	r0, sp, #64	; 0x40
   25a9e:	f7ff ff4c 	bl	2593a <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   25aa2:	a910      	add	r1, sp, #64	; 0x40
   25aa4:	a834      	add	r0, sp, #208	; 0xd0
   25aa6:	f7ff ff6e 	bl	25986 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   25aaa:	4622      	mov	r2, r4
   25aac:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   25aae:	4638      	mov	r0, r7
   25ab0:	f7ff ffc6 	bl	25a40 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   25ab4:	2001      	movs	r0, #1
}
   25ab6:	b04d      	add	sp, #308	; 0x134
   25ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   25aba:	f7ea fa99 	bl	fff0 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   25abe:	4622      	mov	r2, r4
   25ac0:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   25ac2:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   25ac6:	4628      	mov	r0, r5
   25ac8:	f7ff ff37 	bl	2593a <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   25acc:	4629      	mov	r1, r5
   25ace:	4620      	mov	r0, r4
   25ad0:	f7ff ff59 	bl	25986 <tc_sha256_final>
		rekey(ctx->key,
   25ad4:	2220      	movs	r2, #32
   25ad6:	4621      	mov	r1, r4
   25ad8:	e7e9      	b.n	25aae <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   25ada:	4608      	mov	r0, r1
   25adc:	e7eb      	b.n	25ab6 <tc_hmac_set_key+0x3c>
   25ade:	4610      	mov	r0, r2
   25ae0:	e7e9      	b.n	25ab6 <tc_hmac_set_key+0x3c>

00025ae2 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   25ae2:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   25ae4:	4604      	mov	r4, r0
   25ae6:	b140      	cbz	r0, 25afa <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   25ae8:	f7ea fa82 	bl	fff0 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   25aec:	2240      	movs	r2, #64	; 0x40
   25aee:	4620      	mov	r0, r4
   25af0:	f104 0170 	add.w	r1, r4, #112	; 0x70
   25af4:	f7ff ff21 	bl	2593a <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   25af8:	2001      	movs	r0, #1
}
   25afa:	bd10      	pop	{r4, pc}

00025afc <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   25afc:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   25afe:	b110      	cbz	r0, 25b06 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   25b00:	f7ff ff1b 	bl	2593a <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   25b04:	2001      	movs	r0, #1
}
   25b06:	bd08      	pop	{r3, pc}

00025b08 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   25b08:	b570      	push	{r4, r5, r6, lr}
   25b0a:	460e      	mov	r6, r1
   25b0c:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   25b0e:	4605      	mov	r5, r0
   25b10:	b1f0      	cbz	r0, 25b50 <tc_hmac_final+0x48>
   25b12:	2920      	cmp	r1, #32
   25b14:	d11c      	bne.n	25b50 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   25b16:	b1ea      	cbz	r2, 25b54 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   25b18:	4611      	mov	r1, r2
   25b1a:	f7ff ff34 	bl	25986 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   25b1e:	4620      	mov	r0, r4
   25b20:	f7ea fa66 	bl	fff0 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   25b24:	2240      	movs	r2, #64	; 0x40
   25b26:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   25b2a:	4620      	mov	r0, r4
   25b2c:	f7ff ff05 	bl	2593a <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   25b30:	4632      	mov	r2, r6
   25b32:	4629      	mov	r1, r5
   25b34:	4620      	mov	r0, r4
   25b36:	f7ff ff00 	bl	2593a <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   25b3a:	4621      	mov	r1, r4
   25b3c:	4628      	mov	r0, r5
   25b3e:	f7ff ff22 	bl	25986 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   25b42:	4620      	mov	r0, r4
   25b44:	22f0      	movs	r2, #240	; 0xf0
   25b46:	2100      	movs	r1, #0
   25b48:	f7ff fcd9 	bl	254fe <_set>

	return TC_CRYPTO_SUCCESS;
   25b4c:	2001      	movs	r0, #1
}
   25b4e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   25b50:	2000      	movs	r0, #0
   25b52:	e7fc      	b.n	25b4e <tc_hmac_final+0x46>
   25b54:	4610      	mov	r0, r2
   25b56:	e7fa      	b.n	25b4e <tc_hmac_final+0x46>

00025b58 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   25b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b5c:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   25b5e:	f04f 0b01 	mov.w	fp, #1
{
   25b62:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   25b64:	2300      	movs	r3, #0
{
   25b66:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25b68:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   25b6c:	4631      	mov	r1, r6
{
   25b6e:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25b70:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   25b72:	f88d 3006 	strb.w	r3, [sp, #6]
{
   25b76:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   25b7a:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25b7e:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25b82:	f7ff ff7a 	bl	25a7a <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   25b86:	4620      	mov	r0, r4
   25b88:	f7ff ffab 	bl	25ae2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25b8c:	2220      	movs	r2, #32
   25b8e:	4629      	mov	r1, r5
   25b90:	4620      	mov	r0, r4
   25b92:	f7ff ffb3 	bl	25afc <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   25b96:	465a      	mov	r2, fp
   25b98:	4620      	mov	r0, r4
   25b9a:	f10d 0106 	add.w	r1, sp, #6
   25b9e:	f7ff ffad 	bl	25afc <tc_hmac_update>

	if (data && datalen)
   25ba2:	f1b8 0f00 	cmp.w	r8, #0
   25ba6:	d007      	beq.n	25bb8 <update+0x60>
   25ba8:	f1b9 0f00 	cmp.w	r9, #0
   25bac:	d004      	beq.n	25bb8 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   25bae:	464a      	mov	r2, r9
   25bb0:	4641      	mov	r1, r8
   25bb2:	4620      	mov	r0, r4
   25bb4:	f7ff ffa2 	bl	25afc <tc_hmac_update>
	if (additional_data && additional_datalen)
   25bb8:	b13f      	cbz	r7, 25bca <update+0x72>
   25bba:	f1ba 0f00 	cmp.w	sl, #0
   25bbe:	d004      	beq.n	25bca <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   25bc0:	4652      	mov	r2, sl
   25bc2:	4639      	mov	r1, r7
   25bc4:	4620      	mov	r0, r4
   25bc6:	f7ff ff99 	bl	25afc <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   25bca:	4622      	mov	r2, r4
   25bcc:	2120      	movs	r1, #32
   25bce:	4630      	mov	r0, r6
   25bd0:	f7ff ff9a 	bl	25b08 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25bd4:	2220      	movs	r2, #32
   25bd6:	4631      	mov	r1, r6
   25bd8:	4620      	mov	r0, r4
   25bda:	f7ff ff4e 	bl	25a7a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   25bde:	4620      	mov	r0, r4
   25be0:	f7ff ff7f 	bl	25ae2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25be4:	2220      	movs	r2, #32
   25be6:	4629      	mov	r1, r5
   25be8:	4620      	mov	r0, r4
   25bea:	f7ff ff87 	bl	25afc <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   25bee:	4622      	mov	r2, r4
   25bf0:	2120      	movs	r1, #32
   25bf2:	4628      	mov	r0, r5
   25bf4:	f7ff ff88 	bl	25b08 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   25bf8:	f1b8 0f00 	cmp.w	r8, #0
   25bfc:	d03a      	beq.n	25c74 <update+0x11c>
   25bfe:	f1b9 0f00 	cmp.w	r9, #0
   25c02:	d037      	beq.n	25c74 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25c04:	2220      	movs	r2, #32
   25c06:	4631      	mov	r1, r6
   25c08:	4620      	mov	r0, r4
   25c0a:	f7ff ff36 	bl	25a7a <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   25c0e:	4620      	mov	r0, r4
   25c10:	f7ff ff67 	bl	25ae2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25c14:	2220      	movs	r2, #32
   25c16:	4629      	mov	r1, r5
   25c18:	4620      	mov	r0, r4
   25c1a:	f7ff ff6f 	bl	25afc <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   25c1e:	2201      	movs	r2, #1
   25c20:	f10d 0107 	add.w	r1, sp, #7
   25c24:	4620      	mov	r0, r4
   25c26:	f7ff ff69 	bl	25afc <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   25c2a:	464a      	mov	r2, r9
   25c2c:	4641      	mov	r1, r8
   25c2e:	4620      	mov	r0, r4
   25c30:	f7ff ff64 	bl	25afc <tc_hmac_update>
	if (additional_data && additional_datalen)
   25c34:	b13f      	cbz	r7, 25c46 <update+0xee>
   25c36:	f1ba 0f00 	cmp.w	sl, #0
   25c3a:	d004      	beq.n	25c46 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   25c3c:	4652      	mov	r2, sl
   25c3e:	4639      	mov	r1, r7
   25c40:	4620      	mov	r0, r4
   25c42:	f7ff ff5b 	bl	25afc <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   25c46:	4622      	mov	r2, r4
   25c48:	2120      	movs	r1, #32
   25c4a:	4630      	mov	r0, r6
   25c4c:	f7ff ff5c 	bl	25b08 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25c50:	2220      	movs	r2, #32
   25c52:	4631      	mov	r1, r6
   25c54:	4620      	mov	r0, r4
   25c56:	f7ff ff10 	bl	25a7a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   25c5a:	4620      	mov	r0, r4
   25c5c:	f7ff ff41 	bl	25ae2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25c60:	2220      	movs	r2, #32
   25c62:	4629      	mov	r1, r5
   25c64:	4620      	mov	r0, r4
   25c66:	f7ff ff49 	bl	25afc <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   25c6a:	4622      	mov	r2, r4
   25c6c:	2120      	movs	r1, #32
   25c6e:	4628      	mov	r0, r5
   25c70:	f7ff ff4a 	bl	25b08 <tc_hmac_final>
}
   25c74:	b003      	add	sp, #12
   25c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025c7a <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   25c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25c7c:	460c      	mov	r4, r1
   25c7e:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   25c80:	4605      	mov	r5, r0
   25c82:	b1b0      	cbz	r0, 25cb2 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   25c84:	b1b9      	cbz	r1, 25cb6 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   25c86:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   25c88:	2220      	movs	r2, #32
   25c8a:	2100      	movs	r1, #0
   25c8c:	30f0      	adds	r0, #240	; 0xf0
   25c8e:	f7ff fc36 	bl	254fe <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   25c92:	2220      	movs	r2, #32
   25c94:	2101      	movs	r1, #1
   25c96:	f505 7088 	add.w	r0, r5, #272	; 0x110
   25c9a:	f7ff fc30 	bl	254fe <_set>
	update(prng, personalization, plen, 0, 0);
   25c9e:	4628      	mov	r0, r5
   25ca0:	4633      	mov	r3, r6
   25ca2:	463a      	mov	r2, r7
   25ca4:	4621      	mov	r1, r4
   25ca6:	9600      	str	r6, [sp, #0]
   25ca8:	f7ff ff56 	bl	25b58 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   25cac:	2001      	movs	r0, #1
	prng->countdown = 0;
   25cae:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   25cb2:	b003      	add	sp, #12
   25cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   25cb6:	4608      	mov	r0, r1
   25cb8:	e7fb      	b.n	25cb2 <tc_hmac_prng_init+0x38>

00025cba <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   25cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25cbc:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   25cbe:	4605      	mov	r5, r0
   25cc0:	b180      	cbz	r0, 25ce4 <tc_hmac_prng_reseed+0x2a>
   25cc2:	b179      	cbz	r1, 25ce4 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   25cc4:	2a1f      	cmp	r2, #31
   25cc6:	d90d      	bls.n	25ce4 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   25cc8:	b153      	cbz	r3, 25ce0 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   25cca:	b16c      	cbz	r4, 25ce8 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   25ccc:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   25cce:	f7ff ff43 	bl	25b58 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   25cd2:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   25cd6:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   25cd8:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   25cdc:	b003      	add	sp, #12
   25cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   25ce0:	9300      	str	r3, [sp, #0]
   25ce2:	e7f4      	b.n	25cce <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   25ce4:	2000      	movs	r0, #0
   25ce6:	e7f9      	b.n	25cdc <tc_hmac_prng_reseed+0x22>
   25ce8:	4620      	mov	r0, r4
   25cea:	e7f7      	b.n	25cdc <tc_hmac_prng_reseed+0x22>

00025cec <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   25cec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25cf0:	460d      	mov	r5, r1
   25cf2:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   25cf4:	4680      	mov	r8, r0
   25cf6:	b3d8      	cbz	r0, 25d70 <tc_hmac_prng_generate+0x84>
   25cf8:	b3d2      	cbz	r2, 25d70 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   25cfa:	1e4b      	subs	r3, r1, #1
   25cfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   25d00:	d236      	bcs.n	25d70 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   25d02:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   25d06:	b3ab      	cbz	r3, 25d74 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   25d08:	3b01      	subs	r3, #1
   25d0a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25d0e:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25d12:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25d16:	2220      	movs	r2, #32
   25d18:	4649      	mov	r1, r9
   25d1a:	4620      	mov	r0, r4
   25d1c:	f7ff fead 	bl	25a7a <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   25d20:	4620      	mov	r0, r4
   25d22:	f7ff fede 	bl	25ae2 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25d26:	2220      	movs	r2, #32
   25d28:	4639      	mov	r1, r7
   25d2a:	4620      	mov	r0, r4
   25d2c:	f7ff fee6 	bl	25afc <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   25d30:	4622      	mov	r2, r4
   25d32:	2120      	movs	r1, #32
   25d34:	4638      	mov	r0, r7
   25d36:	f7ff fee7 	bl	25b08 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   25d3a:	2d20      	cmp	r5, #32
   25d3c:	462e      	mov	r6, r5
   25d3e:	bf28      	it	cs
   25d40:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   25d42:	4640      	mov	r0, r8
   25d44:	4633      	mov	r3, r6
   25d46:	463a      	mov	r2, r7
   25d48:	4631      	mov	r1, r6
   25d4a:	f7ff fbcb 	bl	254e4 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   25d4e:	2d20      	cmp	r5, #32
   25d50:	bf38      	it	cc
   25d52:	2520      	movcc	r5, #32
	while (outlen != 0) {
   25d54:	3d20      	subs	r5, #32
		out += bufferlen;
   25d56:	44b0      	add	r8, r6
	while (outlen != 0) {
   25d58:	d1dd      	bne.n	25d16 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   25d5a:	4620      	mov	r0, r4
   25d5c:	462b      	mov	r3, r5
   25d5e:	462a      	mov	r2, r5
   25d60:	4629      	mov	r1, r5
   25d62:	9500      	str	r5, [sp, #0]
   25d64:	f7ff fef8 	bl	25b58 <update>

	return TC_CRYPTO_SUCCESS;
   25d68:	2001      	movs	r0, #1
}
   25d6a:	b003      	add	sp, #12
   25d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   25d70:	2000      	movs	r0, #0
   25d72:	e7fa      	b.n	25d6a <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   25d74:	f04f 30ff 	mov.w	r0, #4294967295
   25d78:	e7f7      	b.n	25d6a <tc_hmac_prng_generate+0x7e>

00025d7a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25d7a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25d7c:	ab0b      	add	r3, sp, #44	; 0x2c
   25d7e:	9305      	str	r3, [sp, #20]
   25d80:	9303      	str	r3, [sp, #12]
   25d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25d84:	2201      	movs	r2, #1
   25d86:	9302      	str	r3, [sp, #8]
   25d88:	2300      	movs	r3, #0
   25d8a:	4618      	mov	r0, r3
   25d8c:	e9cd 3300 	strd	r3, r3, [sp]
   25d90:	f7e8 faea 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   25d94:	b007      	add	sp, #28
   25d96:	f85d fb04 	ldr.w	pc, [sp], #4

00025d9a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   25d9a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   25d9c:	6800      	ldr	r0, [r0, #0]
   25d9e:	f7ea b971 	b.w	10084 <z_arm_fatal_error>

00025da2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   25da2:	2100      	movs	r1, #0
   25da4:	2001      	movs	r0, #1
   25da6:	f7ea b96d 	b.w	10084 <z_arm_fatal_error>

00025daa <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   25daa:	b508      	push	{r3, lr}
	handler();
   25dac:	f7ea fa1c 	bl	101e8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   25db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   25db4:	f7ea bae6 	b.w	10384 <z_arm_exc_exit>

00025db8 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   25db8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   25dba:	f383 880b 	msr	PSPLIM, r3
}
   25dbe:	4770      	bx	lr

00025dc0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25dc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25dc2:	ab0b      	add	r3, sp, #44	; 0x2c
   25dc4:	9305      	str	r3, [sp, #20]
   25dc6:	9303      	str	r3, [sp, #12]
   25dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25dca:	2201      	movs	r2, #1
   25dcc:	9302      	str	r3, [sp, #8]
   25dce:	2300      	movs	r3, #0
   25dd0:	4618      	mov	r0, r3
   25dd2:	e9cd 3300 	strd	r3, r3, [sp]
   25dd6:	f7e8 fac7 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   25dda:	b007      	add	sp, #28
   25ddc:	f85d fb04 	ldr.w	pc, [sp], #4

00025de0 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   25de0:	4770      	bx	lr

00025de2 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   25de2:	4770      	bx	lr

00025de4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   25de4:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   25de8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   25dec:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   25dee:	bf08      	it	eq
   25df0:	f06f 0015 	mvneq.w	r0, #21
   25df4:	4770      	bx	lr

00025df6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25df6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25df8:	ab0b      	add	r3, sp, #44	; 0x2c
   25dfa:	9305      	str	r3, [sp, #20]
   25dfc:	9303      	str	r3, [sp, #12]
   25dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25e00:	2201      	movs	r2, #1
   25e02:	9302      	str	r3, [sp, #8]
   25e04:	2300      	movs	r3, #0
   25e06:	4618      	mov	r0, r3
   25e08:	e9cd 3300 	strd	r3, r3, [sp]
   25e0c:	f7e8 faac 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   25e10:	b007      	add	sp, #28
   25e12:	f85d fb04 	ldr.w	pc, [sp], #4

00025e16 <mpu_configure_region>:
{
   25e16:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   25e18:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   25e1a:	684b      	ldr	r3, [r1, #4]
{
   25e1c:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   25e1e:	890a      	ldrh	r2, [r1, #8]
   25e20:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   25e22:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25e24:	3b01      	subs	r3, #1
   25e26:	f024 041f 	bic.w	r4, r4, #31
   25e2a:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   25e2c:	f002 021f 	and.w	r2, r2, #31
   25e30:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25e34:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   25e38:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   25e3a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25e3e:	9303      	str	r3, [sp, #12]
   25e40:	f7ea fea6 	bl	10b90 <region_allocate_and_init>
}
   25e44:	b005      	add	sp, #20
   25e46:	bd30      	pop	{r4, r5, pc}

00025e48 <_stdout_hook_default>:
}
   25e48:	f04f 30ff 	mov.w	r0, #4294967295
   25e4c:	4770      	bx	lr

00025e4e <_stdin_hook_default>:
}
   25e4e:	2000      	movs	r0, #0
   25e50:	4770      	bx	lr

00025e52 <_read>:
{
   25e52:	4608      	mov	r0, r1
   25e54:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   25e56:	f7eb b899 	b.w	10f8c <z_impl_zephyr_read_stdin>

00025e5a <_write>:
{
   25e5a:	4608      	mov	r0, r1
   25e5c:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   25e5e:	f7eb b8a9 	b.w	10fb4 <z_impl_zephyr_write_stdout>

00025e62 <_close>:
int _close(int file)
   25e62:	f04f 30ff 	mov.w	r0, #4294967295
   25e66:	4770      	bx	lr

00025e68 <_lseek>:
}
   25e68:	2000      	movs	r0, #0
   25e6a:	4770      	bx	lr

00025e6c <_isatty>:
}
   25e6c:	2802      	cmp	r0, #2
   25e6e:	bfcc      	ite	gt
   25e70:	2000      	movgt	r0, #0
   25e72:	2001      	movle	r0, #1
   25e74:	4770      	bx	lr

00025e76 <_kill>:
}
   25e76:	2000      	movs	r0, #0
   25e78:	4770      	bx	lr

00025e7a <_getpid>:
}
   25e7a:	2000      	movs	r0, #0
   25e7c:	4770      	bx	lr

00025e7e <_fstat>:
	st->st_mode = S_IFCHR;
   25e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   25e82:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   25e84:	604b      	str	r3, [r1, #4]
}
   25e86:	4770      	bx	lr

00025e88 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   25e88:	f7f9 b882 	b.w	1ef90 <z_impl_z_errno>

00025e8c <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   25e8c:	b530      	push	{r4, r5, lr}
   25e8e:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   25e90:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   25e94:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   25e96:	794b      	ldrb	r3, [r1, #5]
   25e98:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   25e9c:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   25e9e:	220d      	movs	r2, #13
   25ea0:	2100      	movs	r1, #0
   25ea2:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   25ea6:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   25eaa:	f003 fcd8 	bl	2985e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   25eae:	aa02      	add	r2, sp, #8
   25eb0:	4611      	mov	r1, r2
   25eb2:	4628      	mov	r0, r5
   25eb4:	f000 fb46 	bl	26544 <bt_encrypt_le>
	if (err) {
   25eb8:	b110      	cbz	r0, 25ec0 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   25eba:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   25ebc:	b007      	add	sp, #28
   25ebe:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   25ec0:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   25ec2:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   25ec4:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   25ec8:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   25eca:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   25ecc:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   25ece:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   25ed2:	f003 fc7a 	bl	297ca <memcmp>
   25ed6:	fab0 f080 	clz	r0, r0
   25eda:	0940      	lsrs	r0, r0, #5
   25edc:	e7ee      	b.n	25ebc <bt_rpa_irk_matches+0x30>

00025ede <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   25ede:	b510      	push	{r4, lr}
   25ee0:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   25ee2:	7801      	ldrb	r1, [r0, #0]
   25ee4:	7822      	ldrb	r2, [r4, #0]
{
   25ee6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   25ee8:	428a      	cmp	r2, r1
   25eea:	d00f      	beq.n	25f0c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   25eec:	4669      	mov	r1, sp
   25eee:	f7eb f991 	bl	11214 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   25ef2:	4620      	mov	r0, r4
   25ef4:	a905      	add	r1, sp, #20
   25ef6:	f7eb f98d 	bl	11214 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   25efa:	2210      	movs	r2, #16
   25efc:	f10d 0115 	add.w	r1, sp, #21
   25f00:	f10d 0001 	add.w	r0, sp, #1
   25f04:	f003 fc61 	bl	297ca <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   25f08:	b00a      	add	sp, #40	; 0x28
   25f0a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   25f0c:	2a01      	cmp	r2, #1
   25f0e:	d006      	beq.n	25f1e <bt_uuid_cmp+0x40>
   25f10:	2a02      	cmp	r2, #2
   25f12:	d007      	beq.n	25f24 <bt_uuid_cmp+0x46>
   25f14:	b972      	cbnz	r2, 25f34 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   25f16:	8840      	ldrh	r0, [r0, #2]
   25f18:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   25f1a:	1ac0      	subs	r0, r0, r3
   25f1c:	e7f4      	b.n	25f08 <bt_uuid_cmp+0x2a>
   25f1e:	6840      	ldr	r0, [r0, #4]
   25f20:	6863      	ldr	r3, [r4, #4]
   25f22:	e7fa      	b.n	25f1a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25f24:	2210      	movs	r2, #16
   25f26:	1c61      	adds	r1, r4, #1
   25f28:	3001      	adds	r0, #1
}
   25f2a:	b00a      	add	sp, #40	; 0x28
   25f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25f30:	f003 bc4b 	b.w	297ca <memcmp>
	switch (u1->type) {
   25f34:	f06f 0015 	mvn.w	r0, #21
   25f38:	e7e6      	b.n	25f08 <bt_uuid_cmp+0x2a>

00025f3a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   25f3a:	2a04      	cmp	r2, #4
   25f3c:	d00a      	beq.n	25f54 <bt_uuid_create+0x1a>
   25f3e:	2a10      	cmp	r2, #16
   25f40:	d00d      	beq.n	25f5e <bt_uuid_create+0x24>
   25f42:	2a02      	cmp	r2, #2
   25f44:	f04f 0300 	mov.w	r3, #0
   25f48:	d115      	bne.n	25f76 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   25f4a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   25f4c:	880b      	ldrh	r3, [r1, #0]
   25f4e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   25f50:	2001      	movs	r0, #1
   25f52:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   25f54:	2301      	movs	r3, #1
   25f56:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   25f58:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   25f5a:	6043      	str	r3, [r0, #4]
		break;
   25f5c:	e7f8      	b.n	25f50 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   25f5e:	2302      	movs	r3, #2
   25f60:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25f64:	f101 0310 	add.w	r3, r1, #16
   25f68:	f851 2b04 	ldr.w	r2, [r1], #4
   25f6c:	4299      	cmp	r1, r3
   25f6e:	f840 2b04 	str.w	r2, [r0], #4
   25f72:	d1f9      	bne.n	25f68 <bt_uuid_create+0x2e>
   25f74:	e7ec      	b.n	25f50 <bt_uuid_create+0x16>
	switch (data_len) {
   25f76:	4618      	mov	r0, r3
}
   25f78:	4770      	bx	lr

00025f7a <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   25f7a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   25f7c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   25f7e:	2106      	movs	r1, #6
{
   25f80:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   25f82:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   25f86:	f7ed fc73 	bl	13870 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   25f8a:	b918      	cbnz	r0, 25f94 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   25f8c:	79a3      	ldrb	r3, [r4, #6]
   25f8e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   25f92:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   25f94:	bd10      	pop	{r4, pc}

00025f96 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   25f96:	280f      	cmp	r0, #15
   25f98:	d807      	bhi.n	25faa <bt_hci_evt_get_flags+0x14>
   25f9a:	280d      	cmp	r0, #13
   25f9c:	d80b      	bhi.n	25fb6 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   25f9e:	2805      	cmp	r0, #5
   25fa0:	bf08      	it	eq
   25fa2:	2003      	moveq	r0, #3
   25fa4:	bf18      	it	ne
   25fa6:	2002      	movne	r0, #2
   25fa8:	4770      	bx	lr
	switch (evt) {
   25faa:	2813      	cmp	r0, #19
   25fac:	d003      	beq.n	25fb6 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   25fae:	281a      	cmp	r0, #26
   25fb0:	bf08      	it	eq
   25fb2:	2001      	moveq	r0, #1
   25fb4:	e7f6      	b.n	25fa4 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   25fb6:	2001      	movs	r0, #1
	}
}
   25fb8:	4770      	bx	lr

00025fba <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   25fba:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   25fbe:	b183      	cbz	r3, 25fe2 <update_sec_level+0x28>
   25fc0:	7b5a      	ldrb	r2, [r3, #13]
   25fc2:	07d1      	lsls	r1, r2, #31
   25fc4:	d50d      	bpl.n	25fe2 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   25fc6:	06d2      	lsls	r2, r2, #27
   25fc8:	d50d      	bpl.n	25fe6 <update_sec_level+0x2c>
   25fca:	7b1b      	ldrb	r3, [r3, #12]
   25fcc:	2b10      	cmp	r3, #16
   25fce:	bf14      	ite	ne
   25fd0:	2303      	movne	r3, #3
   25fd2:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   25fd4:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   25fd6:	7a80      	ldrb	r0, [r0, #10]
}
   25fd8:	4298      	cmp	r0, r3
   25fda:	bf8c      	ite	hi
   25fdc:	2000      	movhi	r0, #0
   25fde:	2001      	movls	r0, #1
   25fe0:	4770      	bx	lr
   25fe2:	2302      	movs	r3, #2
   25fe4:	e7f6      	b.n	25fd4 <update_sec_level+0x1a>
   25fe6:	2303      	movs	r3, #3
   25fe8:	e7f4      	b.n	25fd4 <update_sec_level+0x1a>

00025fea <hci_vendor_event>:
}
   25fea:	4770      	bx	lr

00025fec <atomic_or>:
{
   25fec:	4603      	mov	r3, r0
   25fee:	b510      	push	{r4, lr}
}
   25ff0:	e8d3 0fef 	ldaex	r0, [r3]
   25ff4:	ea40 0201 	orr.w	r2, r0, r1
   25ff8:	e8c3 2fe4 	stlex	r4, r2, [r3]
   25ffc:	2c00      	cmp	r4, #0
   25ffe:	d1f7      	bne.n	25ff0 <atomic_or+0x4>
   26000:	bd10      	pop	{r4, pc}

00026002 <bt_addr_copy>:
   26002:	680b      	ldr	r3, [r1, #0]
   26004:	6003      	str	r3, [r0, #0]
   26006:	888b      	ldrh	r3, [r1, #4]
   26008:	8083      	strh	r3, [r0, #4]
}
   2600a:	4770      	bx	lr

0002600c <bt_addr_le_copy>:
   2600c:	680b      	ldr	r3, [r1, #0]
   2600e:	6003      	str	r3, [r0, #0]
   26010:	888b      	ldrh	r3, [r1, #4]
   26012:	8083      	strh	r3, [r0, #4]
   26014:	798b      	ldrb	r3, [r1, #6]
   26016:	7183      	strb	r3, [r0, #6]
}
   26018:	4770      	bx	lr

0002601a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2601a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2601c:	ab0b      	add	r3, sp, #44	; 0x2c
   2601e:	9305      	str	r3, [sp, #20]
   26020:	9303      	str	r3, [sp, #12]
   26022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26024:	9302      	str	r3, [sp, #8]
   26026:	2300      	movs	r3, #0
   26028:	4618      	mov	r0, r3
   2602a:	e9cd 3300 	strd	r3, r3, [sp]
   2602e:	f7e8 f99b 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   26032:	b007      	add	sp, #28
   26034:	f85d fb04 	ldr.w	pc, [sp], #4

00026038 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26038:	e8d0 3fef 	ldaex	r3, [r0]
   2603c:	400b      	ands	r3, r1
   2603e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   26042:	2a00      	cmp	r2, #0
   26044:	d1f8      	bne.n	26038 <atomic_and.isra.0>
}
   26046:	4770      	bx	lr

00026048 <sys_put_le64>:
	dst[1] = val >> 8;
   26048:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2604c:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2604e:	2300      	movs	r3, #0
   26050:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   26052:	0e00      	lsrs	r0, r0, #24
   26054:	70d0      	strb	r0, [r2, #3]
   26056:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2605a:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2605c:	7093      	strb	r3, [r2, #2]
   2605e:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26060:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   26062:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   26064:	71d1      	strb	r1, [r2, #7]
}
   26066:	4770      	bx	lr

00026068 <bt_hci_disconnect>:
{
   26068:	b570      	push	{r4, r5, r6, lr}
   2606a:	4606      	mov	r6, r0
   2606c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2606e:	f240 4006 	movw	r0, #1030	; 0x406
   26072:	2103      	movs	r1, #3
   26074:	f7eb fd64 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   26078:	4604      	mov	r4, r0
   2607a:	b168      	cbz	r0, 26098 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2607c:	2103      	movs	r1, #3
   2607e:	300c      	adds	r0, #12
   26080:	f7f3 fa9c 	bl	195bc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   26084:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   26086:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26088:	4621      	mov	r1, r4
}
   2608a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2608e:	2200      	movs	r2, #0
   26090:	f240 4006 	movw	r0, #1030	; 0x406
   26094:	f7eb bda2 	b.w	11bdc <bt_hci_cmd_send_sync>
}
   26098:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2609c:	bd70      	pop	{r4, r5, r6, pc}

0002609e <bt_le_set_data_len>:
{
   2609e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260a0:	4607      	mov	r7, r0
   260a2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   260a4:	f242 0022 	movw	r0, #8226	; 0x2022
   260a8:	2106      	movs	r1, #6
{
   260aa:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   260ac:	f7eb fd48 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   260b0:	4604      	mov	r4, r0
   260b2:	b178      	cbz	r0, 260d4 <bt_le_set_data_len+0x36>
   260b4:	2106      	movs	r1, #6
   260b6:	300c      	adds	r0, #12
   260b8:	f7f3 fa80 	bl	195bc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   260bc:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   260be:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   260c0:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   260c2:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   260c4:	4621      	mov	r1, r4
}
   260c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   260ca:	2200      	movs	r2, #0
   260cc:	f242 0022 	movw	r0, #8226	; 0x2022
   260d0:	f7eb bd84 	b.w	11bdc <bt_hci_cmd_send_sync>
}
   260d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   260d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000260da <bt_le_set_phy>:
{
   260da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   260de:	4681      	mov	r9, r0
   260e0:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   260e2:	f242 0032 	movw	r0, #8242	; 0x2032
   260e6:	2107      	movs	r1, #7
{
   260e8:	4617      	mov	r7, r2
   260ea:	461e      	mov	r6, r3
   260ec:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   260f0:	f7eb fd26 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   260f4:	4605      	mov	r5, r0
   260f6:	b1a0      	cbz	r0, 26122 <bt_le_set_phy+0x48>
   260f8:	2107      	movs	r1, #7
   260fa:	300c      	adds	r0, #12
   260fc:	f7f3 fa5e 	bl	195bc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26100:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   26104:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   26108:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2610a:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2610c:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2610e:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   26112:	4629      	mov	r1, r5
}
   26114:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   26118:	2200      	movs	r2, #0
   2611a:	f242 0032 	movw	r0, #8242	; 0x2032
   2611e:	f7eb bd5d 	b.w	11bdc <bt_hci_cmd_send_sync>
}
   26122:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002612a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2612a:	68c0      	ldr	r0, [r0, #12]
   2612c:	f7eb be20 	b.w	11d70 <bt_hci_le_enh_conn_complete>

00026130 <bt_le_conn_params_valid>:
{
   26130:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   26132:	8803      	ldrh	r3, [r0, #0]
   26134:	8842      	ldrh	r2, [r0, #2]
   26136:	4293      	cmp	r3, r2
   26138:	d819      	bhi.n	2616e <bt_le_conn_params_valid+0x3e>
   2613a:	2b05      	cmp	r3, #5
   2613c:	d917      	bls.n	2616e <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2613e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   26142:	d814      	bhi.n	2616e <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   26144:	8883      	ldrh	r3, [r0, #4]
   26146:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2614a:	d210      	bcs.n	2616e <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2614c:	f640 4476 	movw	r4, #3190	; 0xc76
   26150:	88c0      	ldrh	r0, [r0, #6]
   26152:	f1a0 010a 	sub.w	r1, r0, #10
   26156:	b289      	uxth	r1, r1
   26158:	42a1      	cmp	r1, r4
   2615a:	d808      	bhi.n	2616e <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2615c:	3301      	adds	r3, #1
   2615e:	b29b      	uxth	r3, r3
   26160:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   26162:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   26166:	bf34      	ite	cc
   26168:	2001      	movcc	r0, #1
   2616a:	2000      	movcs	r0, #0
}
   2616c:	bd10      	pop	{r4, pc}
		return false;
   2616e:	2000      	movs	r0, #0
   26170:	e7fc      	b.n	2616c <bt_le_conn_params_valid+0x3c>

00026172 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   26172:	f240 3041 	movw	r0, #833	; 0x341
   26176:	4770      	bx	lr

00026178 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   26178:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2617a:	f7f2 fd71 	bl	18c60 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2617e:	b118      	cbz	r0, 26188 <bt_addr_le_is_bonded+0x10>
   26180:	89c0      	ldrh	r0, [r0, #14]
   26182:	3800      	subs	r0, #0
   26184:	bf18      	it	ne
   26186:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   26188:	bd08      	pop	{r3, pc}

0002618a <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2618a:	2207      	movs	r2, #7
{
   2618c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2618e:	f003 fb1c 	bl	297ca <memcmp>
}
   26192:	fab0 f080 	clz	r0, r0
   26196:	0940      	lsrs	r0, r0, #5
   26198:	bd08      	pop	{r3, pc}

0002619a <bt_addr_copy>:
   2619a:	680b      	ldr	r3, [r1, #0]
   2619c:	6003      	str	r3, [r0, #0]
   2619e:	888b      	ldrh	r3, [r1, #4]
   261a0:	8083      	strh	r3, [r0, #4]
}
   261a2:	4770      	bx	lr

000261a4 <bt_addr_le_copy>:
   261a4:	680b      	ldr	r3, [r1, #0]
   261a6:	6003      	str	r3, [r0, #0]
   261a8:	888b      	ldrh	r3, [r1, #4]
   261aa:	8083      	strh	r3, [r0, #4]
   261ac:	798b      	ldrb	r3, [r1, #6]
   261ae:	7183      	strb	r3, [r0, #6]
}
   261b0:	4770      	bx	lr

000261b2 <hci_id_add>:
{
   261b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   261b4:	460f      	mov	r7, r1
   261b6:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   261b8:	bb30      	cbnz	r0, 26208 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   261ba:	2127      	movs	r1, #39	; 0x27
   261bc:	f242 0027 	movw	r0, #8231	; 0x2027
   261c0:	f7eb fcbe 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   261c4:	4605      	mov	r5, r0
   261c6:	b310      	cbz	r0, 2620e <hci_id_add+0x5c>
   261c8:	2127      	movs	r1, #39	; 0x27
   261ca:	300c      	adds	r0, #12
   261cc:	f7f3 f9f6 	bl	195bc <net_buf_simple_add>
   261d0:	4622      	mov	r2, r4
   261d2:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   261d4:	4639      	mov	r1, r7
   261d6:	f7ff ffe5 	bl	261a4 <bt_addr_le_copy>
   261da:	1dc3      	adds	r3, r0, #7
   261dc:	f104 0110 	add.w	r1, r4, #16
   261e0:	f852 0b04 	ldr.w	r0, [r2], #4
   261e4:	428a      	cmp	r2, r1
   261e6:	f843 0b04 	str.w	r0, [r3], #4
   261ea:	d1f9      	bne.n	261e0 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   261ec:	2210      	movs	r2, #16
   261ee:	2100      	movs	r1, #0
   261f0:	f106 0017 	add.w	r0, r6, #23
   261f4:	f003 fb33 	bl	2985e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   261f8:	4629      	mov	r1, r5
}
   261fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   261fe:	2200      	movs	r2, #0
   26200:	f242 0027 	movw	r0, #8231	; 0x2027
   26204:	f7eb bcea 	b.w	11bdc <bt_hci_cmd_send_sync>
		return -EINVAL;
   26208:	f06f 0015 	mvn.w	r0, #21
}
   2620c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2620e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26212:	e7fb      	b.n	2620c <hci_id_add+0x5a>

00026214 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   26214:	7a03      	ldrb	r3, [r0, #8]
{
   26216:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   26218:	075b      	lsls	r3, r3, #29
   2621a:	d505      	bpl.n	26228 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2621c:	4601      	mov	r1, r0
   2621e:	322a      	adds	r2, #42	; 0x2a
   26220:	f811 0b01 	ldrb.w	r0, [r1], #1
   26224:	f7ff bfc5 	b.w	261b2 <hci_id_add>
}
   26228:	4770      	bx	lr

0002622a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2622a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2622c:	ab0b      	add	r3, sp, #44	; 0x2c
   2622e:	9305      	str	r3, [sp, #20]
   26230:	9303      	str	r3, [sp, #12]
   26232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26234:	9302      	str	r3, [sp, #8]
   26236:	2300      	movs	r3, #0
   26238:	4618      	mov	r0, r3
   2623a:	e9cd 3300 	strd	r3, r3, [sp]
   2623e:	f7e8 f893 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   26242:	b007      	add	sp, #28
   26244:	f85d fb04 	ldr.w	pc, [sp], #4

00026248 <addr_res_enable>:
{
   26248:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2624a:	2101      	movs	r1, #1
{
   2624c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2624e:	f242 002d 	movw	r0, #8237	; 0x202d
   26252:	f7eb fc75 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   26256:	4604      	mov	r4, r0
   26258:	b158      	cbz	r0, 26272 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2625a:	4629      	mov	r1, r5
   2625c:	300c      	adds	r0, #12
   2625e:	f001 fd58 	bl	27d12 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   26262:	4621      	mov	r1, r4
}
   26264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   26268:	2200      	movs	r2, #0
   2626a:	f242 002d 	movw	r0, #8237	; 0x202d
   2626e:	f7eb bcb5 	b.w	11bdc <bt_hci_cmd_send_sync>
}
   26272:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26276:	bd38      	pop	{r3, r4, r5, pc}

00026278 <adv_unpause_enabled>:
{
   26278:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2627a:	f100 0310 	add.w	r3, r0, #16
   2627e:	e8d3 2fef 	ldaex	r2, [r3]
   26282:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   26286:	e8c3 1fe4 	stlex	r4, r1, [r3]
   2628a:	2c00      	cmp	r4, #0
   2628c:	d1f7      	bne.n	2627e <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2628e:	0413      	lsls	r3, r2, #16
   26290:	d503      	bpl.n	2629a <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   26292:	2101      	movs	r1, #1
}
   26294:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   26296:	f000 b940 	b.w	2651a <bt_le_adv_set_enable>
}
   2629a:	bc10      	pop	{r4}
   2629c:	4770      	bx	lr

0002629e <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2629e:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   262a2:	e8d3 2faf 	lda	r2, [r3]
   262a6:	0612      	lsls	r2, r2, #24
   262a8:	d50a      	bpl.n	262c0 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   262aa:	e8d3 1fef 	ldaex	r1, [r3]
   262ae:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   262b2:	e8c3 1fe2 	stlex	r2, r1, [r3]
   262b6:	2a00      	cmp	r2, #0
   262b8:	d1f7      	bne.n	262aa <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   262ba:	2100      	movs	r1, #0
   262bc:	f000 b92d 	b.w	2651a <bt_le_adv_set_enable>
}
   262c0:	4770      	bx	lr

000262c2 <bt_lookup_id_addr>:
{
   262c2:	b510      	push	{r4, lr}
   262c4:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   262c6:	b930      	cbnz	r0, 262d6 <bt_lookup_id_addr+0x14>
   262c8:	b119      	cbz	r1, 262d2 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   262ca:	f7f2 fc71 	bl	18bb0 <bt_keys_find_irk>
		if (keys) {
   262ce:	b100      	cbz	r0, 262d2 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   262d0:	1c44      	adds	r4, r0, #1
}
   262d2:	4620      	mov	r0, r4
   262d4:	bd10      	pop	{r4, pc}
		return NULL;
   262d6:	2400      	movs	r4, #0
   262d8:	e7fb      	b.n	262d2 <bt_lookup_id_addr+0x10>

000262da <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   262da:	b118      	cbz	r0, 262e4 <bt_id_set_adv_random_addr+0xa>
   262dc:	b111      	cbz	r1, 262e4 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   262de:	4608      	mov	r0, r1
   262e0:	f7ec bb5e 	b.w	129a0 <set_random_address>
}
   262e4:	f06f 0015 	mvn.w	r0, #21
   262e8:	4770      	bx	lr

000262ea <bt_id_set_adv_private_addr>:
{
   262ea:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   262ec:	4604      	mov	r4, r0
   262ee:	b180      	cbz	r0, 26312 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   262f0:	2106      	movs	r1, #6
   262f2:	4668      	mov	r0, sp
   262f4:	f7ed fabc 	bl	13870 <bt_rand>
	if (err) {
   262f8:	b948      	cbnz	r0, 2630e <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   262fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   262fe:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   26300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   26304:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   26306:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2630a:	f7ff ffe6 	bl	262da <bt_id_set_adv_random_addr>
}
   2630e:	b002      	add	sp, #8
   26310:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26312:	f06f 0015 	mvn.w	r0, #21
   26316:	e7fa      	b.n	2630e <bt_id_set_adv_private_addr+0x24>

00026318 <bt_id_adv_random_addr_check>:
}
   26318:	3800      	subs	r0, #0
   2631a:	bf18      	it	ne
   2631c:	2001      	movne	r0, #1
   2631e:	4770      	bx	lr

00026320 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   26320:	7a03      	ldrb	r3, [r0, #8]
   26322:	07d9      	lsls	r1, r3, #31
   26324:	d504      	bpl.n	26330 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   26326:	f023 0301 	bic.w	r3, r3, #1
   2632a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2632c:	f7ec bbf0 	b.w	12b10 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   26330:	0799      	lsls	r1, r3, #30
   26332:	d504      	bpl.n	2633e <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   26334:	f023 0302 	bic.w	r3, r3, #2
   26338:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2633a:	f7ec bcb5 	b.w	12ca8 <bt_id_del>
}
   2633e:	4770      	bx	lr

00026340 <get_adv_channel_map>:
{
   26340:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   26342:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   26346:	bf0c      	ite	eq
   26348:	2007      	moveq	r0, #7
   2634a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2634c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2634e:	bf48      	it	mi
   26350:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   26354:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   26356:	bf48      	it	mi
   26358:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2635c:	4770      	bx	lr

0002635e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2635e:	e8d0 0faf 	lda	r0, [r0]
}
   26362:	4770      	bx	lr

00026364 <atomic_and>:
{
   26364:	4603      	mov	r3, r0
   26366:	b510      	push	{r4, lr}
}
   26368:	e8d3 0fef 	ldaex	r0, [r3]
   2636c:	ea00 0201 	and.w	r2, r0, r1
   26370:	e8c3 2fe4 	stlex	r4, r2, [r3]
   26374:	2c00      	cmp	r4, #0
   26376:	d1f7      	bne.n	26368 <atomic_and+0x4>
   26378:	bd10      	pop	{r4, pc}

0002637a <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2637a:	680b      	ldr	r3, [r1, #0]
   2637c:	6003      	str	r3, [r0, #0]
   2637e:	888b      	ldrh	r3, [r1, #4]
   26380:	8083      	strh	r3, [r0, #4]
   26382:	798b      	ldrb	r3, [r1, #6]
   26384:	7183      	strb	r3, [r0, #6]
   26386:	4770      	bx	lr

00026388 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2638a:	ab0b      	add	r3, sp, #44	; 0x2c
   2638c:	9305      	str	r3, [sp, #20]
   2638e:	9303      	str	r3, [sp, #12]
   26390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26392:	9302      	str	r3, [sp, #8]
   26394:	2300      	movs	r3, #0
   26396:	4618      	mov	r0, r3
   26398:	e9cd 3300 	strd	r3, r3, [sp]
   2639c:	f7e7 ffe4 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   263a0:	b007      	add	sp, #28
   263a2:	f85d fb04 	ldr.w	pc, [sp], #4

000263a6 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   263a6:	2301      	movs	r3, #1
{
   263a8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   263aa:	fa03 f101 	lsl.w	r1, r3, r1
{
   263ae:	4604      	mov	r4, r0
	if (val) {
   263b0:	b142      	cbz	r2, 263c4 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   263b2:	e8d4 3fef 	ldaex	r3, [r4]
   263b6:	430b      	orrs	r3, r1
   263b8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   263bc:	2a00      	cmp	r2, #0
   263be:	d1f8      	bne.n	263b2 <atomic_set_bit_to+0xc>
	}
}
   263c0:	bc10      	pop	{r4}
   263c2:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   263c4:	43c9      	mvns	r1, r1
}
   263c6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   263c8:	f7ff bfcc 	b.w	26364 <atomic_and>

000263cc <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   263cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263d0:	b087      	sub	sp, #28
   263d2:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   263d6:	4605      	mov	r5, r0
   263d8:	460c      	mov	r4, r1
   263da:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   263dc:	2100      	movs	r1, #0
   263de:	2210      	movs	r2, #16
   263e0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   263e2:	461f      	mov	r7, r3
   263e4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   263e8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   263ec:	f003 fa37 	bl	2985e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   263f0:	b9ce      	cbnz	r6, 26426 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   263f2:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   263f6:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   263f8:	f242 0008 	movw	r0, #8200	; 0x2008
   263fc:	a902      	add	r1, sp, #8
   263fe:	f7ec fec1 	bl	13184 <hci_set_ad>
		if (err) {
   26402:	4604      	mov	r4, r0
   26404:	b958      	cbnz	r0, 2641e <le_adv_update.constprop.0+0x52>
	if (scannable) {
   26406:	f1ba 0f00 	cmp.w	sl, #0
   2640a:	d13a      	bne.n	26482 <le_adv_update.constprop.0+0xb6>
   2640c:	3510      	adds	r5, #16
   2640e:	e8d5 3fef 	ldaex	r3, [r5]
   26412:	f043 0304 	orr.w	r3, r3, #4
   26416:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2641a:	2a00      	cmp	r2, #0
   2641c:	d1f7      	bne.n	2640e <le_adv_update.constprop.0+0x42>
}
   2641e:	4620      	mov	r0, r4
   26420:	b007      	add	sp, #28
   26422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   26426:	f7ec fa71 	bl	1290c <bt_get_name>
   2642a:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2642c:	b9e4      	cbnz	r4, 26468 <le_adv_update.constprop.0+0x9c>
   2642e:	bb37      	cbnz	r7, 2647e <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   26430:	4658      	mov	r0, fp
   26432:	f7e2 ff95 	bl	9360 <strlen>
   26436:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   26438:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2643a:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2643e:	f88d 3000 	strb.w	r3, [sp]
   26442:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   26446:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2644a:	d1d4      	bne.n	263f6 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2644c:	2202      	movs	r2, #2
			d[1].data = &data;
   2644e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   26452:	9605      	str	r6, [sp, #20]
			d_len = 2;
   26454:	e7d0      	b.n	263f8 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   26456:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2645a:	3a08      	subs	r2, #8
   2645c:	2a01      	cmp	r2, #1
   2645e:	d924      	bls.n	264aa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   26460:	3301      	adds	r3, #1
   26462:	4598      	cmp	r8, r3
   26464:	d1f7      	bne.n	26456 <le_adv_update.constprop.0+0x8a>
   26466:	e7e2      	b.n	2642e <le_adv_update.constprop.0+0x62>
   26468:	2300      	movs	r3, #0
   2646a:	e7fa      	b.n	26462 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2646c:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   26470:	3a08      	subs	r2, #8
   26472:	2a01      	cmp	r2, #1
   26474:	d919      	bls.n	264aa <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   26476:	3301      	adds	r3, #1
   26478:	4599      	cmp	r9, r3
   2647a:	d1f7      	bne.n	2646c <le_adv_update.constprop.0+0xa0>
   2647c:	e7d8      	b.n	26430 <le_adv_update.constprop.0+0x64>
   2647e:	2300      	movs	r3, #0
   26480:	e7fa      	b.n	26478 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   26482:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   26484:	2e02      	cmp	r6, #2
			d[1].len = 1;
   26486:	bf08      	it	eq
   26488:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2648a:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   2648e:	bf08      	it	eq
   26490:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   26492:	a902      	add	r1, sp, #8
			d[1].data = &data;
   26494:	bf08      	it	eq
   26496:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2649a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2649e:	f7ec fe71 	bl	13184 <hci_set_ad>
		if (err) {
   264a2:	2800      	cmp	r0, #0
   264a4:	d0b2      	beq.n	2640c <le_adv_update.constprop.0+0x40>
   264a6:	4604      	mov	r4, r0
   264a8:	e7b9      	b.n	2641e <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   264aa:	f06f 0415 	mvn.w	r4, #21
   264ae:	e7b6      	b.n	2641e <le_adv_update.constprop.0+0x52>

000264b0 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   264b0:	6843      	ldr	r3, [r0, #4]
   264b2:	f013 0008 	ands.w	r0, r3, #8
   264b6:	d00a      	beq.n	264ce <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   264b8:	035a      	lsls	r2, r3, #13
   264ba:	d407      	bmi.n	264cc <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   264bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   264c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   264c4:	bf14      	ite	ne
   264c6:	2002      	movne	r0, #2
   264c8:	2001      	moveq	r0, #1
   264ca:	4770      	bx	lr
   264cc:	2001      	movs	r0, #1
}
   264ce:	4770      	bx	lr

000264d0 <bt_le_adv_set_enable_legacy>:
{
   264d0:	b570      	push	{r4, r5, r6, lr}
   264d2:	4606      	mov	r6, r0
   264d4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   264d6:	f242 000a 	movw	r0, #8202	; 0x200a
   264da:	2101      	movs	r1, #1
{
   264dc:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   264de:	f7eb fb2f 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   264e2:	4604      	mov	r4, r0
   264e4:	b1b0      	cbz	r0, 26514 <bt_le_adv_set_enable_legacy+0x44>
   264e6:	300c      	adds	r0, #12
	if (enable) {
   264e8:	b195      	cbz	r5, 26510 <bt_le_adv_set_enable_legacy+0x40>
   264ea:	2101      	movs	r1, #1
   264ec:	f001 fc11 	bl	27d12 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   264f0:	4620      	mov	r0, r4
   264f2:	f106 0210 	add.w	r2, r6, #16
   264f6:	a903      	add	r1, sp, #12
   264f8:	2307      	movs	r3, #7
   264fa:	9500      	str	r5, [sp, #0]
   264fc:	f7eb fb0e 	bl	11b1c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   26500:	2200      	movs	r2, #0
   26502:	4621      	mov	r1, r4
   26504:	f242 000a 	movw	r0, #8202	; 0x200a
   26508:	f7eb fb68 	bl	11bdc <bt_hci_cmd_send_sync>
}
   2650c:	b006      	add	sp, #24
   2650e:	bd70      	pop	{r4, r5, r6, pc}
   26510:	4629      	mov	r1, r5
   26512:	e7eb      	b.n	264ec <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   26514:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26518:	e7f8      	b.n	2650c <bt_le_adv_set_enable_legacy+0x3c>

0002651a <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2651a:	f7ff bfd9 	b.w	264d0 <bt_le_adv_set_enable_legacy>

0002651e <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2651e:	3018      	adds	r0, #24
   26520:	f7fa ba2e 	b.w	20980 <k_work_cancel_delayable>

00026524 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26526:	ab0b      	add	r3, sp, #44	; 0x2c
   26528:	9305      	str	r3, [sp, #20]
   2652a:	9303      	str	r3, [sp, #12]
   2652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2652e:	2201      	movs	r2, #1
   26530:	9302      	str	r3, [sp, #8]
   26532:	2300      	movs	r3, #0
   26534:	4618      	mov	r0, r3
   26536:	e9cd 3300 	strd	r3, r3, [sp]
   2653a:	f7e7 ff15 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   2653e:	b007      	add	sp, #28
   26540:	f85d fb04 	ldr.w	pc, [sp], #4

00026544 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   26544:	b530      	push	{r4, r5, lr}
   26546:	460d      	mov	r5, r1
   26548:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2654a:	4601      	mov	r1, r0
{
   2654c:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2654e:	b310      	cbz	r0, 26596 <bt_encrypt_le+0x52>
   26550:	b30d      	cbz	r5, 26596 <bt_encrypt_le+0x52>
   26552:	b302      	cbz	r2, 26596 <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   26554:	4668      	mov	r0, sp
   26556:	f7ed f939 	bl	137cc <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2655a:	4669      	mov	r1, sp
   2655c:	a804      	add	r0, sp, #16
   2655e:	f7e9 fc09 	bl	fd74 <tc_aes128_set_encrypt_key>
   26562:	b1c0      	cbz	r0, 26596 <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   26564:	4629      	mov	r1, r5
   26566:	4668      	mov	r0, sp
   26568:	f7ed f930 	bl	137cc <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2656c:	4669      	mov	r1, sp
   2656e:	4620      	mov	r0, r4
   26570:	aa04      	add	r2, sp, #16
   26572:	f7ff f88e 	bl	25692 <tc_aes_encrypt>
   26576:	b170      	cbz	r0, 26596 <bt_encrypt_le+0x52>
   26578:	1e63      	subs	r3, r4, #1
   2657a:	f104 0210 	add.w	r2, r4, #16
   2657e:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   26580:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26584:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   26588:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2658a:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2658c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2658e:	d1f7      	bne.n	26580 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   26590:	2000      	movs	r0, #0
}
   26592:	b031      	add	sp, #196	; 0xc4
   26594:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   26596:	f06f 0015 	mvn.w	r0, #21
   2659a:	e7fa      	b.n	26592 <bt_encrypt_le+0x4e>

0002659c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2659c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2659e:	ab0b      	add	r3, sp, #44	; 0x2c
   265a0:	9305      	str	r3, [sp, #20]
   265a2:	9303      	str	r3, [sp, #12]
   265a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   265a6:	9302      	str	r3, [sp, #8]
   265a8:	2300      	movs	r3, #0
   265aa:	4618      	mov	r0, r3
   265ac:	e9cd 3300 	strd	r3, r3, [sp]
   265b0:	f7e7 feda 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   265b4:	b007      	add	sp, #28
   265b6:	f85d fb04 	ldr.w	pc, [sp], #4

000265ba <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   265ba:	2200      	movs	r2, #0
	return list->head;
   265bc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   265be:	b90b      	cbnz	r3, 265c4 <sys_slist_find_and_remove+0xa>
   265c0:	4618      	mov	r0, r3
   265c2:	4770      	bx	lr
   265c4:	428b      	cmp	r3, r1
   265c6:	d110      	bne.n	265ea <sys_slist_find_and_remove+0x30>
	return node->next;
   265c8:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   265ca:	b942      	cbnz	r2, 265de <sys_slist_find_and_remove+0x24>
   265cc:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   265ce:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   265d0:	4291      	cmp	r1, r2
   265d2:	d100      	bne.n	265d6 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   265d4:	6043      	str	r3, [r0, #4]
	parent->next = child;
   265d6:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   265d8:	2001      	movs	r0, #1
	parent->next = child;
   265da:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   265dc:	4770      	bx	lr
	parent->next = child;
   265de:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   265e0:	6843      	ldr	r3, [r0, #4]
   265e2:	4299      	cmp	r1, r3
	list->tail = node;
   265e4:	bf08      	it	eq
   265e6:	6042      	streq	r2, [r0, #4]
}
   265e8:	e7f5      	b.n	265d6 <sys_slist_find_and_remove+0x1c>
	return node->next;
   265ea:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   265ec:	681b      	ldr	r3, [r3, #0]
   265ee:	e7e6      	b.n	265be <sys_slist_find_and_remove+0x4>

000265f0 <atomic_and>:
{
   265f0:	4603      	mov	r3, r0
   265f2:	b510      	push	{r4, lr}
}
   265f4:	e8d3 0fef 	ldaex	r0, [r3]
   265f8:	ea00 0201 	and.w	r2, r0, r1
   265fc:	e8c3 2fe4 	stlex	r4, r2, [r3]
   26600:	2c00      	cmp	r4, #0
   26602:	d1f7      	bne.n	265f4 <atomic_and+0x4>
   26604:	bd10      	pop	{r4, pc}

00026606 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26606:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26608:	ab0b      	add	r3, sp, #44	; 0x2c
   2660a:	9305      	str	r3, [sp, #20]
   2660c:	9303      	str	r3, [sp, #12]
   2660e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26610:	9302      	str	r3, [sp, #8]
   26612:	2300      	movs	r3, #0
   26614:	4618      	mov	r0, r3
   26616:	e9cd 3300 	strd	r3, r3, [sp]
   2661a:	f7e7 fea5 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   2661e:	b007      	add	sp, #28
   26620:	f85d fb04 	ldr.w	pc, [sp], #4

00026624 <tx_complete_work>:
	tx_notify(conn);
   26624:	3828      	subs	r0, #40	; 0x28
   26626:	f7ed bab3 	b.w	13b90 <tx_notify>

0002662a <bt_conn_reset_rx_state>:
{
   2662a:	b510      	push	{r4, lr}
   2662c:	4604      	mov	r4, r0
	if (!conn->rx) {
   2662e:	6900      	ldr	r0, [r0, #16]
   26630:	b118      	cbz	r0, 2663a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   26632:	f7f2 fea1 	bl	19378 <net_buf_unref>
	conn->rx = NULL;
   26636:	2300      	movs	r3, #0
   26638:	6123      	str	r3, [r4, #16]
}
   2663a:	bd10      	pop	{r4, pc}

0002663c <conn_lookup_handle>:
{
   2663c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26640:	4607      	mov	r7, r0
   26642:	460e      	mov	r6, r1
   26644:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   26646:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   26648:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2664c:	42b4      	cmp	r4, r6
   2664e:	d103      	bne.n	26658 <conn_lookup_handle+0x1c>
	return NULL;
   26650:	2300      	movs	r3, #0
}
   26652:	4618      	mov	r0, r3
   26654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   26658:	fb09 7004 	mla	r0, r9, r4, r7
   2665c:	f7ed fd4a 	bl	140f4 <bt_conn_ref>
   26660:	4603      	mov	r3, r0
		if (!conn) {
   26662:	b158      	cbz	r0, 2667c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   26664:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   26666:	2d01      	cmp	r5, #1
   26668:	d002      	beq.n	26670 <conn_lookup_handle+0x34>
   2666a:	3d07      	subs	r5, #7
   2666c:	2d01      	cmp	r5, #1
   2666e:	d803      	bhi.n	26678 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   26670:	881a      	ldrh	r2, [r3, #0]
   26672:	4542      	cmp	r2, r8
   26674:	d0ed      	beq.n	26652 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   26676:	4618      	mov	r0, r3
   26678:	f7ed fd64 	bl	14144 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2667c:	3401      	adds	r4, #1
   2667e:	e7e5      	b.n	2664c <conn_lookup_handle+0x10>

00026680 <bt_conn_connected>:
{
   26680:	b510      	push	{r4, lr}
   26682:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   26684:	f7ee fa98 	bl	14bb8 <bt_l2cap_connected>
	notify_connected(conn);
   26688:	4620      	mov	r0, r4
}
   2668a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2668e:	f7ed ba49 	b.w	13b24 <notify_connected>

00026692 <bt_conn_disconnect>:
{
   26692:	b510      	push	{r4, lr}
	switch (conn->state) {
   26694:	7b43      	ldrb	r3, [r0, #13]
{
   26696:	4604      	mov	r4, r0
	switch (conn->state) {
   26698:	3b02      	subs	r3, #2
   2669a:	2b06      	cmp	r3, #6
   2669c:	d816      	bhi.n	266cc <bt_conn_disconnect+0x3a>
   2669e:	e8df f003 	tbb	[pc, r3]
   266a2:	1504      	.short	0x1504
   266a4:	0b091515 	.word	0x0b091515
   266a8:	09          	.byte	0x09
   266a9:	00          	.byte	0x00
		conn->err = reason;
   266aa:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   266ac:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   266ae:	4620      	mov	r0, r4
   266b0:	f7ed fd80 	bl	141b4 <bt_conn_set_state>
{
   266b4:	2000      	movs	r0, #0
}
   266b6:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   266b8:	8800      	ldrh	r0, [r0, #0]
   266ba:	f7ff fcd5 	bl	26068 <bt_hci_disconnect>
	if (err) {
   266be:	2800      	cmp	r0, #0
   266c0:	d1f9      	bne.n	266b6 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   266c2:	7b63      	ldrb	r3, [r4, #13]
   266c4:	2b07      	cmp	r3, #7
   266c6:	d1f5      	bne.n	266b4 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   266c8:	2108      	movs	r1, #8
   266ca:	e7f0      	b.n	266ae <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   266cc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   266d0:	e7f1      	b.n	266b6 <bt_conn_disconnect+0x24>

000266d2 <bt_conn_set_security>:
{
   266d2:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   266d4:	7b43      	ldrb	r3, [r0, #13]
{
   266d6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   266d8:	2b07      	cmp	r3, #7
{
   266da:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   266dc:	d122      	bne.n	26724 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   266de:	7a43      	ldrb	r3, [r0, #9]
   266e0:	428b      	cmp	r3, r1
   266e2:	d215      	bcs.n	26710 <bt_conn_set_security+0x3e>
   266e4:	7a83      	ldrb	r3, [r0, #10]
   266e6:	428b      	cmp	r3, r1
   266e8:	d212      	bcs.n	26710 <bt_conn_set_security+0x3e>
	if (val) {
   266ea:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   266ec:	f100 0004 	add.w	r0, r0, #4
   266f0:	d510      	bpl.n	26714 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   266f2:	e8d0 3fef 	ldaex	r3, [r0]
   266f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   266fa:	e8c0 3fe2 	stlex	r2, r3, [r0]
   266fe:	2a00      	cmp	r2, #0
   26700:	d1f7      	bne.n	266f2 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   26702:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   26706:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   26708:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2670a:	f7f1 fbf5 	bl	17ef8 <bt_smp_start_security>
	if (err) {
   2670e:	b930      	cbnz	r0, 2671e <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   26710:	2000      	movs	r0, #0
}
   26712:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26714:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   26718:	f7ff ff6a 	bl	265f0 <atomic_and>
   2671c:	e7f1      	b.n	26702 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   2671e:	7a63      	ldrb	r3, [r4, #9]
   26720:	72a3      	strb	r3, [r4, #10]
   26722:	e7f6      	b.n	26712 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   26724:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   26728:	e7f3      	b.n	26712 <bt_conn_set_security+0x40>

0002672a <bt_conn_get_security>:
}
   2672a:	7a40      	ldrb	r0, [r0, #9]
   2672c:	4770      	bx	lr

0002672e <bt_conn_is_peer_addr_le>:
{
   2672e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   26730:	7a03      	ldrb	r3, [r0, #8]
{
   26732:	4604      	mov	r4, r0
	if (id != conn->id) {
   26734:	428b      	cmp	r3, r1
{
   26736:	4615      	mov	r5, r2
	if (id != conn->id) {
   26738:	d115      	bne.n	26766 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2673a:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2673e:	2207      	movs	r2, #7
   26740:	4628      	mov	r0, r5
   26742:	f003 f842 	bl	297ca <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   26746:	b180      	cbz	r0, 2676a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   26748:	78e3      	ldrb	r3, [r4, #3]
   2674a:	2207      	movs	r2, #7
   2674c:	b943      	cbnz	r3, 26760 <bt_conn_is_peer_addr_le+0x32>
   2674e:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   26752:	4628      	mov	r0, r5
   26754:	f003 f839 	bl	297ca <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   26758:	fab0 f080 	clz	r0, r0
   2675c:	0940      	lsrs	r0, r0, #5
}
   2675e:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   26760:	f104 0197 	add.w	r1, r4, #151	; 0x97
   26764:	e7f5      	b.n	26752 <bt_conn_is_peer_addr_le+0x24>
		return false;
   26766:	2000      	movs	r0, #0
   26768:	e7f9      	b.n	2675e <bt_conn_is_peer_addr_le+0x30>
		return true;
   2676a:	2001      	movs	r0, #1
   2676c:	e7f7      	b.n	2675e <bt_conn_is_peer_addr_le+0x30>

0002676e <bt_conn_get_dst>:
}
   2676e:	3090      	adds	r0, #144	; 0x90
   26770:	4770      	bx	lr

00026772 <bt_conn_le_conn_update>:
{
   26772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26774:	4607      	mov	r7, r0
   26776:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   26778:	f242 0013 	movw	r0, #8211	; 0x2013
   2677c:	210e      	movs	r1, #14
   2677e:	f7eb f9df 	bl	11b40 <bt_hci_cmd_create>
	if (!buf) {
   26782:	4606      	mov	r6, r0
   26784:	b1d0      	cbz	r0, 267bc <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   26786:	210e      	movs	r1, #14
   26788:	300c      	adds	r0, #12
   2678a:	f7f2 ff17 	bl	195bc <net_buf_simple_add>
   2678e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   26790:	220e      	movs	r2, #14
   26792:	2100      	movs	r1, #0
   26794:	f003 f863 	bl	2985e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   26798:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2679a:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2679c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2679e:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   267a0:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   267a2:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   267a4:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   267a6:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   267aa:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   267ac:	88ab      	ldrh	r3, [r5, #4]
   267ae:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   267b0:	88eb      	ldrh	r3, [r5, #6]
   267b2:	8123      	strh	r3, [r4, #8]
}
   267b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   267b8:	f7eb ba10 	b.w	11bdc <bt_hci_cmd_send_sync>
}
   267bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   267c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000267c2 <l2cap_connected>:
}
   267c2:	4770      	bx	lr

000267c4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   267c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   267c6:	ab0b      	add	r3, sp, #44	; 0x2c
   267c8:	9305      	str	r3, [sp, #20]
   267ca:	9303      	str	r3, [sp, #12]
   267cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   267ce:	9302      	str	r3, [sp, #8]
   267d0:	2300      	movs	r3, #0
   267d2:	4618      	mov	r0, r3
   267d4:	e9cd 3300 	strd	r3, r3, [sp]
   267d8:	f7e7 fdc6 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   267dc:	b007      	add	sp, #28
   267de:	f85d fb04 	ldr.w	pc, [sp], #4

000267e2 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   267e2:	4770      	bx	lr

000267e4 <bt_l2cap_chan_del>:
{
   267e4:	b570      	push	{r4, r5, r6, lr}
   267e6:	4604      	mov	r4, r0
	if (!chan->conn) {
   267e8:	e9d0 3500 	ldrd	r3, r5, [r0]
   267ec:	b123      	cbz	r3, 267f8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   267ee:	686b      	ldr	r3, [r5, #4]
   267f0:	b103      	cbz	r3, 267f4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   267f2:	4798      	blx	r3
	chan->conn = NULL;
   267f4:	2300      	movs	r3, #0
   267f6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   267f8:	68e3      	ldr	r3, [r4, #12]
   267fa:	b10b      	cbz	r3, 26800 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   267fc:	4620      	mov	r0, r4
   267fe:	4798      	blx	r3
	if (ops->released) {
   26800:	6a2b      	ldr	r3, [r5, #32]
   26802:	b11b      	cbz	r3, 2680c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   26804:	4620      	mov	r0, r4
}
   26806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2680a:	4718      	bx	r3
}
   2680c:	bd70      	pop	{r4, r5, r6, pc}

0002680e <bt_l2cap_disconnected>:
{
   2680e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   26810:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26812:	b130      	cbz	r0, 26822 <bt_l2cap_disconnected+0x14>
	return node->next;
   26814:	f850 4908 	ldr.w	r4, [r0], #-8
   26818:	b104      	cbz	r4, 2681c <bt_l2cap_disconnected+0xe>
   2681a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2681c:	f7ff ffe2 	bl	267e4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26820:	b904      	cbnz	r4, 26824 <bt_l2cap_disconnected+0x16>
}
   26822:	bd38      	pop	{r3, r4, r5, pc}
   26824:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26826:	b12d      	cbz	r5, 26834 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   26828:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2682a:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2682c:	f7ff ffda 	bl	267e4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26830:	462c      	mov	r4, r5
   26832:	e7f7      	b.n	26824 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   26834:	4620      	mov	r0, r4
}
   26836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2683a:	f7ff bfd3 	b.w	267e4 <bt_l2cap_chan_del>

0002683e <bt_l2cap_security_changed>:
{
   2683e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   26840:	6d43      	ldr	r3, [r0, #84]	; 0x54
   26842:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26844:	b1bb      	cbz	r3, 26876 <bt_l2cap_security_changed+0x38>
   26846:	4618      	mov	r0, r3
	return node->next;
   26848:	f850 4908 	ldr.w	r4, [r0], #-8
   2684c:	b104      	cbz	r4, 26850 <bt_l2cap_security_changed+0x12>
   2684e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   26850:	f853 3c04 	ldr.w	r3, [r3, #-4]
   26854:	689b      	ldr	r3, [r3, #8]
   26856:	b10b      	cbz	r3, 2685c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   26858:	4629      	mov	r1, r5
   2685a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2685c:	b15c      	cbz	r4, 26876 <bt_l2cap_security_changed+0x38>
   2685e:	4620      	mov	r0, r4
   26860:	68a4      	ldr	r4, [r4, #8]
   26862:	6843      	ldr	r3, [r0, #4]
   26864:	b124      	cbz	r4, 26870 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   26866:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26868:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2686a:	2b00      	cmp	r3, #0
   2686c:	d1f4      	bne.n	26858 <bt_l2cap_security_changed+0x1a>
   2686e:	e7f6      	b.n	2685e <bt_l2cap_security_changed+0x20>
   26870:	689b      	ldr	r3, [r3, #8]
   26872:	2b00      	cmp	r3, #0
   26874:	d1f0      	bne.n	26858 <bt_l2cap_security_changed+0x1a>
}
   26876:	bd38      	pop	{r3, r4, r5, pc}

00026878 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   26878:	3104      	adds	r1, #4
   2687a:	f7ed bda5 	b.w	143c8 <bt_conn_create_pdu_timeout>

0002687e <bt_l2cap_send_cb>:
{
   2687e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26882:	4614      	mov	r4, r2
   26884:	4605      	mov	r5, r0
   26886:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   26888:	f102 000c 	add.w	r0, r2, #12
   2688c:	2104      	movs	r1, #4
   2688e:	461e      	mov	r6, r3
   26890:	f8dd 8018 	ldr.w	r8, [sp, #24]
   26894:	f7f2 fe36 	bl	19504 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26898:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2689a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2689c:	3a04      	subs	r2, #4
   2689e:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   268a0:	4643      	mov	r3, r8
   268a2:	4632      	mov	r2, r6
   268a4:	4621      	mov	r1, r4
   268a6:	4628      	mov	r0, r5
}
   268a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   268ac:	f7ed bb82 	b.w	13fb4 <bt_conn_send_cb>

000268b0 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   268b0:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   268b2:	b128      	cbz	r0, 268c0 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   268b4:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   268b6:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   268b8:	428b      	cmp	r3, r1
   268ba:	d001      	beq.n	268c0 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   268bc:	6880      	ldr	r0, [r0, #8]
   268be:	e7f8      	b.n	268b2 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   268c0:	4770      	bx	lr

000268c2 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   268c2:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   268c4:	b128      	cbz	r0, 268d2 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   268c6:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   268c8:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   268ca:	428b      	cmp	r3, r1
   268cc:	d001      	beq.n	268d2 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   268ce:	6880      	ldr	r0, [r0, #8]
   268d0:	e7f8      	b.n	268c4 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   268d2:	4770      	bx	lr

000268d4 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   268d4:	4770      	bx	lr

000268d6 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   268d6:	4603      	mov	r3, r0
	return list->head;
   268d8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   268da:	b128      	cbz	r0, 268e8 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   268dc:	6859      	ldr	r1, [r3, #4]
	return node->next;
   268de:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   268e0:	4288      	cmp	r0, r1
	list->head = node;
   268e2:	601a      	str	r2, [r3, #0]
	list->tail = node;
   268e4:	bf08      	it	eq
   268e6:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   268e8:	4770      	bx	lr

000268ea <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   268ea:	4603      	mov	r3, r0
	size_t bytes = 0;
   268ec:	2000      	movs	r0, #0

	while (buf) {
   268ee:	b903      	cbnz	r3, 268f2 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   268f0:	4770      	bx	lr
		bytes += buf->len;
   268f2:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   268f4:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   268f6:	4410      	add	r0, r2
		buf = buf->frags;
   268f8:	e7f9      	b.n	268ee <net_buf_frags_len+0x4>

000268fa <attr_read_type_cb>:
{
   268fa:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   268fc:	68d4      	ldr	r4, [r2, #12]
   268fe:	3102      	adds	r1, #2
   26900:	7823      	ldrb	r3, [r4, #0]
   26902:	b913      	cbnz	r3, 2690a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   26904:	7021      	strb	r1, [r4, #0]
	return true;
   26906:	2001      	movs	r0, #1
}
   26908:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2690a:	428b      	cmp	r3, r1
   2690c:	d0fb      	beq.n	26906 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2690e:	8a03      	ldrh	r3, [r0, #16]
   26910:	3b02      	subs	r3, #2
   26912:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   26914:	2000      	movs	r0, #0
   26916:	6110      	str	r0, [r2, #16]
		return false;
   26918:	e7f6      	b.n	26908 <attr_read_type_cb+0xe>

0002691a <att_prepare_write_req>:
}
   2691a:	2006      	movs	r0, #6
   2691c:	4770      	bx	lr

0002691e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2691e:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26922:	4108      	asrs	r0, r1
}
   26924:	f000 0001 	and.w	r0, r0, #1
   26928:	4770      	bx	lr

0002692a <write_cb>:
{
   2692a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2692c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2692e:	4601      	mov	r1, r0
{
   26930:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   26932:	f44f 7295 	mov.w	r2, #298	; 0x12a
   26936:	6820      	ldr	r0, [r4, #0]
   26938:	f000 fddc 	bl	274f4 <bt_gatt_check_perm>
   2693c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2693e:	bb00      	cbnz	r0, 26982 <write_cb+0x58>
	if (!data->req) {
   26940:	7a23      	ldrb	r3, [r4, #8]
   26942:	b1b3      	cbz	r3, 26972 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   26944:	f1a3 0218 	sub.w	r2, r3, #24
   26948:	4253      	negs	r3, r2
   2694a:	4153      	adcs	r3, r2
   2694c:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2694e:	9301      	str	r3, [sp, #4]
   26950:	8a63      	ldrh	r3, [r4, #18]
   26952:	4629      	mov	r1, r5
   26954:	9300      	str	r3, [sp, #0]
   26956:	68ae      	ldr	r6, [r5, #8]
   26958:	8a23      	ldrh	r3, [r4, #16]
   2695a:	68e2      	ldr	r2, [r4, #12]
   2695c:	6820      	ldr	r0, [r4, #0]
   2695e:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   26960:	2800      	cmp	r0, #0
   26962:	db08      	blt.n	26976 <write_cb+0x4c>
   26964:	8a23      	ldrh	r3, [r4, #16]
   26966:	4283      	cmp	r3, r0
   26968:	d10e      	bne.n	26988 <write_cb+0x5e>
	data->err = 0U;
   2696a:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2696c:	2001      	movs	r0, #1
	data->err = 0U;
   2696e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   26970:	e008      	b.n	26984 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   26972:	2302      	movs	r3, #2
   26974:	e7eb      	b.n	2694e <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   26976:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2697a:	d305      	bcc.n	26988 <write_cb+0x5e>
		return -err;
   2697c:	4240      	negs	r0, r0
   2697e:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   26980:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   26982:	2000      	movs	r0, #0
}
   26984:	b002      	add	sp, #8
   26986:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   26988:	200e      	movs	r0, #14
   2698a:	e7f9      	b.n	26980 <write_cb+0x56>

0002698c <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2698c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2698e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   26992:	2300      	movs	r3, #0
   26994:	461a      	mov	r2, r3
   26996:	9300      	str	r3, [sp, #0]
   26998:	f7ef fdfe 	bl	16598 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2699c:	b005      	add	sp, #20
   2699e:	f85d fb04 	ldr.w	pc, [sp], #4

000269a2 <att_chan_mtu_updated>:
{
   269a2:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   269a4:	6805      	ldr	r5, [r0, #0]
	return list->head;
   269a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   269a8:	b352      	cbz	r2, 26a00 <att_chan_mtu_updated+0x5e>
	return node->next;
   269aa:	6813      	ldr	r3, [r2, #0]
   269ac:	b103      	cbz	r3, 269b0 <att_chan_mtu_updated+0xe>
   269ae:	3bf0      	subs	r3, #240	; 0xf0
   269b0:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   269b4:	2200      	movs	r2, #0
   269b6:	4611      	mov	r1, r2
   269b8:	e000      	b.n	269bc <att_chan_mtu_updated+0x1a>
   269ba:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   269bc:	4284      	cmp	r4, r0
   269be:	d007      	beq.n	269d0 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   269c0:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   269c2:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   269c4:	42b1      	cmp	r1, r6
   269c6:	bf38      	it	cc
   269c8:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   269ca:	42a2      	cmp	r2, r4
   269cc:	bf38      	it	cc
   269ce:	4622      	movcc	r2, r4
   269d0:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   269d2:	b12b      	cbz	r3, 269e0 <att_chan_mtu_updated+0x3e>
   269d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   269d8:	2b00      	cmp	r3, #0
   269da:	d1ee      	bne.n	269ba <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   269dc:	4284      	cmp	r4, r0
   269de:	d1ef      	bne.n	269c0 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   269e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   269e2:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   269e4:	428b      	cmp	r3, r1
   269e6:	d801      	bhi.n	269ec <att_chan_mtu_updated+0x4a>
   269e8:	4290      	cmp	r0, r2
   269ea:	d90b      	bls.n	26a04 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   269ec:	4282      	cmp	r2, r0
   269ee:	bf38      	it	cc
   269f0:	4602      	movcc	r2, r0
   269f2:	4299      	cmp	r1, r3
   269f4:	6828      	ldr	r0, [r5, #0]
   269f6:	bf38      	it	cc
   269f8:	4619      	movcc	r1, r3
}
   269fa:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   269fc:	f7f0 bb6a 	b.w	170d4 <bt_gatt_att_max_mtu_changed>
   26a00:	4611      	mov	r1, r2
   26a02:	e7ed      	b.n	269e0 <att_chan_mtu_updated+0x3e>
}
   26a04:	bc70      	pop	{r4, r5, r6}
   26a06:	4770      	bx	lr

00026a08 <attr_read_group_cb>:
	if (!data->rsp->len) {
   26a08:	68d0      	ldr	r0, [r2, #12]
   26a0a:	3104      	adds	r1, #4
   26a0c:	7803      	ldrb	r3, [r0, #0]
   26a0e:	b913      	cbnz	r3, 26a16 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   26a10:	7001      	strb	r1, [r0, #0]
	return true;
   26a12:	2001      	movs	r0, #1
   26a14:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   26a16:	428b      	cmp	r3, r1
   26a18:	d0fb      	beq.n	26a12 <attr_read_group_cb+0xa>
		data->group = NULL;
   26a1a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   26a1c:	6891      	ldr	r1, [r2, #8]
   26a1e:	8a0b      	ldrh	r3, [r1, #16]
   26a20:	3b04      	subs	r3, #4
   26a22:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   26a24:	6110      	str	r0, [r2, #16]
}
   26a26:	4770      	bx	lr

00026a28 <find_info_cb>:
{
   26a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   26a2a:	6893      	ldr	r3, [r2, #8]
{
   26a2c:	4605      	mov	r5, r0
   26a2e:	460f      	mov	r7, r1
   26a30:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   26a32:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   26a34:	b963      	cbnz	r3, 26a50 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   26a36:	6850      	ldr	r0, [r2, #4]
   26a38:	2101      	movs	r1, #1
   26a3a:	300c      	adds	r0, #12
   26a3c:	f7f2 fdbe 	bl	195bc <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   26a40:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   26a42:	682b      	ldr	r3, [r5, #0]
   26a44:	781b      	ldrb	r3, [r3, #0]
   26a46:	2b00      	cmp	r3, #0
   26a48:	bf14      	ite	ne
   26a4a:	2302      	movne	r3, #2
   26a4c:	2301      	moveq	r3, #1
   26a4e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   26a50:	68a3      	ldr	r3, [r4, #8]
   26a52:	781b      	ldrb	r3, [r3, #0]
   26a54:	2b01      	cmp	r3, #1
   26a56:	d003      	beq.n	26a60 <find_info_cb+0x38>
   26a58:	2b02      	cmp	r3, #2
   26a5a:	d019      	beq.n	26a90 <find_info_cb+0x68>
   26a5c:	2000      	movs	r0, #0
   26a5e:	e016      	b.n	26a8e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   26a60:	682b      	ldr	r3, [r5, #0]
   26a62:	781b      	ldrb	r3, [r3, #0]
   26a64:	2b00      	cmp	r3, #0
   26a66:	d1f9      	bne.n	26a5c <find_info_cb+0x34>
   26a68:	6860      	ldr	r0, [r4, #4]
   26a6a:	2104      	movs	r1, #4
   26a6c:	300c      	adds	r0, #12
   26a6e:	f7f2 fda5 	bl	195bc <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   26a72:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   26a74:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   26a76:	682a      	ldr	r2, [r5, #0]
   26a78:	68e3      	ldr	r3, [r4, #12]
   26a7a:	8852      	ldrh	r2, [r2, #2]
   26a7c:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   26a7e:	6863      	ldr	r3, [r4, #4]
   26a80:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   26a82:	8a1b      	ldrh	r3, [r3, #16]
   26a84:	1ac0      	subs	r0, r0, r3
   26a86:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   26a88:	bf94      	ite	ls
   26a8a:	2000      	movls	r0, #0
   26a8c:	2001      	movhi	r0, #1
}
   26a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   26a90:	682b      	ldr	r3, [r5, #0]
   26a92:	781b      	ldrb	r3, [r3, #0]
   26a94:	2b02      	cmp	r3, #2
   26a96:	d1e1      	bne.n	26a5c <find_info_cb+0x34>
   26a98:	6860      	ldr	r0, [r4, #4]
   26a9a:	2112      	movs	r1, #18
   26a9c:	300c      	adds	r0, #12
   26a9e:	f7f2 fd8d 	bl	195bc <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   26aa2:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   26aa4:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26aa6:	682b      	ldr	r3, [r5, #0]
   26aa8:	68e2      	ldr	r2, [r4, #12]
   26aaa:	1c59      	adds	r1, r3, #1
   26aac:	3202      	adds	r2, #2
   26aae:	3311      	adds	r3, #17
   26ab0:	f851 0b04 	ldr.w	r0, [r1], #4
   26ab4:	4299      	cmp	r1, r3
   26ab6:	f842 0b04 	str.w	r0, [r2], #4
   26aba:	d1f9      	bne.n	26ab0 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   26abc:	6863      	ldr	r3, [r4, #4]
   26abe:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   26ac0:	8a1b      	ldrh	r3, [r3, #16]
   26ac2:	1ac0      	subs	r0, r0, r3
   26ac4:	2812      	cmp	r0, #18
   26ac6:	e7df      	b.n	26a88 <find_info_cb+0x60>

00026ac8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26aca:	ab0b      	add	r3, sp, #44	; 0x2c
   26acc:	9305      	str	r3, [sp, #20]
   26ace:	9303      	str	r3, [sp, #12]
   26ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26ad2:	9302      	str	r3, [sp, #8]
   26ad4:	2300      	movs	r3, #0
   26ad6:	4618      	mov	r0, r3
   26ad8:	e9cd 3300 	strd	r3, r3, [sp]
   26adc:	f7e7 fc44 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   26ae0:	b007      	add	sp, #28
   26ae2:	f85d fb04 	ldr.w	pc, [sp], #4

00026ae6 <chan_req_send>:
{
   26ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ae8:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26aea:	6888      	ldr	r0, [r1, #8]
   26aec:	f7ff fefd 	bl	268ea <net_buf_frags_len>
   26af0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   26af2:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26af4:	4283      	cmp	r3, r0
   26af6:	d30d      	bcc.n	26b14 <chan_req_send+0x2e>
	req->buf = NULL;
   26af8:	2600      	movs	r6, #0
	chan->req = req;
   26afa:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   26afe:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   26b00:	4628      	mov	r0, r5
	req->buf = NULL;
   26b02:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   26b04:	4639      	mov	r1, r7
   26b06:	f7ee fa9f 	bl	15048 <chan_send>
	if (err) {
   26b0a:	b110      	cbz	r0, 26b12 <chan_req_send+0x2c>
		req->buf = buf;
   26b0c:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   26b0e:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   26b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   26b14:	f06f 0079 	mvn.w	r0, #121	; 0x79
   26b18:	e7fb      	b.n	26b12 <chan_req_send+0x2c>

00026b1a <process_queue>:
{
   26b1a:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   26b1c:	2200      	movs	r2, #0
{
   26b1e:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   26b20:	2300      	movs	r3, #0
   26b22:	4608      	mov	r0, r1
{
   26b24:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   26b26:	f001 f8cb 	bl	27cc0 <net_buf_get>
	if (buf) {
   26b2a:	4605      	mov	r5, r0
   26b2c:	b158      	cbz	r0, 26b46 <process_queue+0x2c>
	return chan_send(chan, buf);
   26b2e:	4601      	mov	r1, r0
   26b30:	4620      	mov	r0, r4
   26b32:	f7ee fa89 	bl	15048 <chan_send>
		if (err) {
   26b36:	4604      	mov	r4, r0
   26b38:	b118      	cbz	r0, 26b42 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   26b3a:	4629      	mov	r1, r5
   26b3c:	4630      	mov	r0, r6
   26b3e:	f002 fc96 	bl	2946e <k_queue_prepend>
}
   26b42:	4620      	mov	r0, r4
   26b44:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   26b46:	f06f 0401 	mvn.w	r4, #1
   26b4a:	e7fa      	b.n	26b42 <process_queue+0x28>

00026b4c <bt_att_chan_send_rsp>:
{
   26b4c:	b538      	push	{r3, r4, r5, lr}
   26b4e:	4604      	mov	r4, r0
   26b50:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   26b52:	f7ee fa79 	bl	15048 <chan_send>
	if (err) {
   26b56:	b130      	cbz	r0, 26b66 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   26b58:	4629      	mov	r1, r5
   26b5a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   26b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   26b62:	f7f2 bbe3 	b.w	1932c <net_buf_put>
}
   26b66:	bd38      	pop	{r3, r4, r5, pc}

00026b68 <att_chan_read>:
{
   26b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b6c:	4680      	mov	r8, r0
   26b6e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26b70:	4610      	mov	r0, r2
{
   26b72:	4699      	mov	r9, r3
   26b74:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26b76:	f7ff feb8 	bl	268ea <net_buf_frags_len>
   26b7a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   26b7e:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26b80:	4283      	cmp	r3, r0
   26b82:	d97a      	bls.n	26c7a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   26b84:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   26b88:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   26b8a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   26b8c:	f7f2 fc50 	bl	19430 <net_buf_frag_last>
	size_t len, total = 0;
   26b90:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   26b94:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   26b96:	4630      	mov	r0, r6
   26b98:	f7ff fea7 	bl	268ea <net_buf_frags_len>
   26b9c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   26ba0:	f105 070c 	add.w	r7, r5, #12
   26ba4:	1a24      	subs	r4, r4, r0
   26ba6:	4638      	mov	r0, r7
   26ba8:	f001 f89f 	bl	27cea <net_buf_simple_tailroom>
   26bac:	4284      	cmp	r4, r0
   26bae:	d211      	bcs.n	26bd4 <att_chan_read+0x6c>
   26bb0:	4630      	mov	r0, r6
   26bb2:	f7ff fe9a 	bl	268ea <net_buf_frags_len>
   26bb6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26bba:	1a24      	subs	r4, r4, r0
		if (!len) {
   26bbc:	bb34      	cbnz	r4, 26c0c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   26bbe:	7ab0      	ldrb	r0, [r6, #10]
   26bc0:	f7f2 f9a0 	bl	18f04 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   26bc4:	2200      	movs	r2, #0
   26bc6:	2300      	movs	r3, #0
   26bc8:	f001 f875 	bl	27cb6 <net_buf_alloc_fixed>
			if (!frag) {
   26bcc:	4605      	mov	r5, r0
   26bce:	b930      	cbnz	r0, 26bde <att_chan_read+0x76>
	return total;
   26bd0:	4657      	mov	r7, sl
   26bd2:	e02c      	b.n	26c2e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   26bd4:	4638      	mov	r0, r7
   26bd6:	f001 f888 	bl	27cea <net_buf_simple_tailroom>
   26bda:	4604      	mov	r4, r0
   26bdc:	e7ee      	b.n	26bbc <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   26bde:	4601      	mov	r1, r0
   26be0:	4630      	mov	r0, r6
   26be2:	f7f2 fc6b 	bl	194bc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   26be6:	4630      	mov	r0, r6
   26be8:	f7ff fe7f 	bl	268ea <net_buf_frags_len>
   26bec:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26bf0:	f105 070c 	add.w	r7, r5, #12
   26bf4:	1a24      	subs	r4, r4, r0
   26bf6:	4638      	mov	r0, r7
   26bf8:	f001 f877 	bl	27cea <net_buf_simple_tailroom>
   26bfc:	4284      	cmp	r4, r0
   26bfe:	d21a      	bcs.n	26c36 <att_chan_read+0xce>
   26c00:	4630      	mov	r0, r6
   26c02:	f7ff fe72 	bl	268ea <net_buf_frags_len>
   26c06:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26c0a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   26c0c:	68e9      	ldr	r1, [r5, #12]
   26c0e:	8a2a      	ldrh	r2, [r5, #16]
   26c10:	f8cd 9000 	str.w	r9, [sp]
   26c14:	f8db 7004 	ldr.w	r7, [fp, #4]
   26c18:	440a      	add	r2, r1
   26c1a:	9803      	ldr	r0, [sp, #12]
   26c1c:	4659      	mov	r1, fp
   26c1e:	b2a3      	uxth	r3, r4
   26c20:	47b8      	blx	r7
		if (read < 0) {
   26c22:	1e07      	subs	r7, r0, #0
   26c24:	da0c      	bge.n	26c40 <att_chan_read+0xd8>
				return total;
   26c26:	f1ba 0f00 	cmp.w	sl, #0
   26c2a:	bf18      	it	ne
   26c2c:	4657      	movne	r7, sl
}
   26c2e:	4638      	mov	r0, r7
   26c30:	b005      	add	sp, #20
   26c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c36:	4638      	mov	r0, r7
   26c38:	f001 f857 	bl	27cea <net_buf_simple_tailroom>
   26c3c:	4604      	mov	r4, r0
   26c3e:	e7e5      	b.n	26c0c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   26c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26c42:	b993      	cbnz	r3, 26c6a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   26c44:	4639      	mov	r1, r7
   26c46:	f105 000c 	add.w	r0, r5, #12
   26c4a:	f7f2 fcb7 	bl	195bc <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26c4e:	4630      	mov	r0, r6
   26c50:	f7ff fe4b 	bl	268ea <net_buf_frags_len>
   26c54:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   26c58:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26c5a:	4283      	cmp	r3, r0
		total += read;
   26c5c:	44ba      	add	sl, r7
		offset += read;
   26c5e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26c62:	d9b5      	bls.n	26bd0 <att_chan_read+0x68>
   26c64:	42a7      	cmp	r7, r4
   26c66:	d096      	beq.n	26b96 <att_chan_read+0x2e>
   26c68:	e7b2      	b.n	26bd0 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   26c6a:	4639      	mov	r1, r7
   26c6c:	4628      	mov	r0, r5
   26c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26c72:	4798      	blx	r3
   26c74:	2800      	cmp	r0, #0
   26c76:	d1e5      	bne.n	26c44 <att_chan_read+0xdc>
   26c78:	e7aa      	b.n	26bd0 <att_chan_read+0x68>
		return 0;
   26c7a:	2700      	movs	r7, #0
   26c7c:	e7d7      	b.n	26c2e <att_chan_read+0xc6>

00026c7e <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26c7e:	2200      	movs	r2, #0
	return list->head;
   26c80:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26c82:	b903      	cbnz	r3, 26c86 <sys_slist_find_and_remove.isra.0+0x8>
   26c84:	4770      	bx	lr
   26c86:	428b      	cmp	r3, r1
   26c88:	d10f      	bne.n	26caa <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   26c8a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26c8c:	b93a      	cbnz	r2, 26c9e <sys_slist_find_and_remove.isra.0+0x20>
   26c8e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   26c90:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26c92:	4291      	cmp	r1, r2
   26c94:	d100      	bne.n	26c98 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   26c96:	6043      	str	r3, [r0, #4]
	parent->next = child;
   26c98:	2300      	movs	r3, #0
   26c9a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26c9c:	4770      	bx	lr
	parent->next = child;
   26c9e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26ca0:	6843      	ldr	r3, [r0, #4]
   26ca2:	4299      	cmp	r1, r3
	list->tail = node;
   26ca4:	bf08      	it	eq
   26ca6:	6042      	streq	r2, [r0, #4]
}
   26ca8:	e7f6      	b.n	26c98 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   26caa:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26cac:	681b      	ldr	r3, [r3, #0]
   26cae:	e7e8      	b.n	26c82 <sys_slist_find_and_remove.isra.0+0x4>

00026cb0 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   26cb0:	2006      	movs	r0, #6
   26cb2:	4770      	bx	lr

00026cb4 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26cb4:	2301      	movs	r3, #1
{
   26cb6:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26cb8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26cbc:	e8d0 3fef 	ldaex	r3, [r0]
   26cc0:	ea43 0201 	orr.w	r2, r3, r1
   26cc4:	e8c0 2fe4 	stlex	r4, r2, [r0]
   26cc8:	2c00      	cmp	r4, #0
   26cca:	d1f7      	bne.n	26cbc <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   26ccc:	4219      	tst	r1, r3
}
   26cce:	bf14      	ite	ne
   26cd0:	2001      	movne	r0, #1
   26cd2:	2000      	moveq	r0, #0
   26cd4:	bd10      	pop	{r4, pc}

00026cd6 <read_cb>:
{
   26cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   26cd8:	2300      	movs	r3, #0
{
   26cda:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   26cdc:	6816      	ldr	r6, [r2, #0]
{
   26cde:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   26ce0:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26ce2:	4629      	mov	r1, r5
	data->err = 0x00;
   26ce4:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26ce6:	2295      	movs	r2, #149	; 0x95
   26ce8:	f000 fc04 	bl	274f4 <bt_gatt_check_perm>
   26cec:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   26cee:	b980      	cbnz	r0, 26d12 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   26cf0:	e9cd 0000 	strd	r0, r0, [sp]
   26cf4:	4629      	mov	r1, r5
   26cf6:	4630      	mov	r0, r6
   26cf8:	88a3      	ldrh	r3, [r4, #4]
   26cfa:	68a2      	ldr	r2, [r4, #8]
   26cfc:	f7ff ff34 	bl	26b68 <att_chan_read>
	if (ret < 0) {
   26d00:	2800      	cmp	r0, #0
   26d02:	da09      	bge.n	26d18 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   26d04:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   26d08:	bf32      	itee	cc
   26d0a:	200e      	movcc	r0, #14
		return -err;
   26d0c:	4240      	negcs	r0, r0
   26d0e:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   26d10:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   26d12:	2000      	movs	r0, #0
}
   26d14:	b002      	add	sp, #8
   26d16:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   26d18:	2001      	movs	r0, #1
   26d1a:	e7fb      	b.n	26d14 <read_cb+0x3e>

00026d1c <read_vl_cb>:
{
   26d1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   26d20:	2300      	movs	r3, #0
{
   26d22:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   26d24:	f8d2 8000 	ldr.w	r8, [r2]
{
   26d28:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   26d2a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26d2e:	4631      	mov	r1, r6
	data->err = 0x00;
   26d30:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   26d32:	2295      	movs	r2, #149	; 0x95
   26d34:	f000 fbde 	bl	274f4 <bt_gatt_check_perm>
   26d38:	4605      	mov	r5, r0
   26d3a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   26d3c:	b9e0      	cbnz	r0, 26d78 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   26d3e:	68a0      	ldr	r0, [r4, #8]
   26d40:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   26d44:	8a02      	ldrh	r2, [r0, #16]
   26d46:	1a9b      	subs	r3, r3, r2
   26d48:	2b01      	cmp	r3, #1
   26d4a:	dd15      	ble.n	26d78 <read_vl_cb+0x5c>
   26d4c:	2102      	movs	r1, #2
   26d4e:	300c      	adds	r0, #12
   26d50:	f7f2 fc34 	bl	195bc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   26d54:	e9cd 5500 	strd	r5, r5, [sp]
   26d58:	4607      	mov	r7, r0
   26d5a:	88a3      	ldrh	r3, [r4, #4]
   26d5c:	4631      	mov	r1, r6
   26d5e:	4640      	mov	r0, r8
   26d60:	68a2      	ldr	r2, [r4, #8]
   26d62:	f7ff ff01 	bl	26b68 <att_chan_read>
	if (read < 0) {
   26d66:	1e03      	subs	r3, r0, #0
   26d68:	da0a      	bge.n	26d80 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   26d6a:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   26d6e:	bf32      	itee	cc
   26d70:	230e      	movcc	r3, #14
		return -err;
   26d72:	425b      	negcs	r3, r3
   26d74:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   26d76:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   26d78:	2000      	movs	r0, #0
}
   26d7a:	b002      	add	sp, #8
   26d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   26d80:	2001      	movs	r0, #1
	rsp->len = read;
   26d82:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   26d84:	e7f9      	b.n	26d7a <read_vl_cb+0x5e>

00026d86 <bt_att_sent>:
{
   26d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d88:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   26d8a:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   26d8e:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26d90:	f100 0394 	add.w	r3, r0, #148	; 0x94
   26d94:	e8d3 1fef 	ldaex	r1, [r3]
   26d98:	f021 0110 	bic.w	r1, r1, #16
   26d9c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26da0:	2a00      	cmp	r2, #0
   26da2:	d1f7      	bne.n	26d94 <bt_att_sent+0xe>
	if (!att) {
   26da4:	b30c      	cbz	r4, 26dea <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   26da6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   26daa:	b98b      	cbnz	r3, 26dd0 <bt_att_sent+0x4a>
   26dac:	6863      	ldr	r3, [r4, #4]
   26dae:	b17b      	cbz	r3, 26dd0 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   26db0:	1d20      	adds	r0, r4, #4
   26db2:	f7ff fd90 	bl	268d6 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26db6:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   26db8:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26dba:	4638      	mov	r0, r7
   26dbc:	f7ff fe93 	bl	26ae6 <chan_req_send>
   26dc0:	2800      	cmp	r0, #0
   26dc2:	da12      	bge.n	26dea <bt_att_sent+0x64>
	return list->head;
   26dc4:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   26dc6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   26dc8:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   26dca:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   26dcc:	b903      	cbnz	r3, 26dd0 <bt_att_sent+0x4a>
	list->tail = node;
   26dce:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   26dd0:	4638      	mov	r0, r7
   26dd2:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   26dd6:	f7ff fea0 	bl	26b1a <process_queue>
	if (!err) {
   26dda:	b130      	cbz	r0, 26dea <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   26ddc:	4638      	mov	r0, r7
   26dde:	f104 010c 	add.w	r1, r4, #12
}
   26de2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   26de6:	f7ff be98 	b.w	26b1a <process_queue>
}
   26dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026dec <att_req_send_process>:
{
   26dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   26df0:	6a84      	ldr	r4, [r0, #40]	; 0x28
   26df2:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26df4:	2c00      	cmp	r4, #0
   26df6:	d03b      	beq.n	26e70 <att_req_send_process+0x84>
	return node->next;
   26df8:	f854 69f0 	ldr.w	r6, [r4], #-240
   26dfc:	b106      	cbz	r6, 26e00 <att_req_send_process+0x14>
   26dfe:	3ef0      	subs	r6, #240	; 0xf0
{
   26e00:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   26e02:	f108 0704 	add.w	r7, r8, #4
{
   26e06:	461d      	mov	r5, r3
   26e08:	e013      	b.n	26e32 <att_req_send_process+0x46>
		if (!req && prev &&
   26e0a:	b1c3      	cbz	r3, 26e3e <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   26e0c:	2103      	movs	r1, #3
   26e0e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   26e12:	f7ff fd84 	bl	2691e <atomic_test_bit>
   26e16:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   26e18:	f103 0098 	add.w	r0, r3, #152	; 0x98
   26e1c:	f7ff fd7f 	bl	2691e <atomic_test_bit>
		if (!req && prev &&
   26e20:	4282      	cmp	r2, r0
   26e22:	d10c      	bne.n	26e3e <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26e24:	b326      	cbz	r6, 26e70 <att_req_send_process+0x84>
   26e26:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   26e2a:	b102      	cbz	r2, 26e2e <att_req_send_process+0x42>
   26e2c:	3af0      	subs	r2, #240	; 0xf0
{
   26e2e:	4634      	mov	r4, r6
   26e30:	4616      	mov	r6, r2
		if (chan->req) {
   26e32:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   26e36:	2a00      	cmp	r2, #0
   26e38:	d1f4      	bne.n	26e24 <att_req_send_process+0x38>
		if (!req && prev &&
   26e3a:	2d00      	cmp	r5, #0
   26e3c:	d0e5      	beq.n	26e0a <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   26e3e:	4638      	mov	r0, r7
   26e40:	f7ff fd49 	bl	268d6 <sys_slist_get>
	if (node) {
   26e44:	4605      	mov	r5, r0
   26e46:	b908      	cbnz	r0, 26e4c <att_req_send_process+0x60>
   26e48:	4623      	mov	r3, r4
   26e4a:	e7eb      	b.n	26e24 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   26e4c:	4601      	mov	r1, r0
   26e4e:	4620      	mov	r0, r4
   26e50:	f7ee f96e 	bl	15130 <bt_att_chan_req_send>
   26e54:	2800      	cmp	r0, #0
   26e56:	da0b      	bge.n	26e70 <att_req_send_process+0x84>
	return list->head;
   26e58:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   26e5c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   26e5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   26e62:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   26e66:	2b00      	cmp	r3, #0
   26e68:	d1ee      	bne.n	26e48 <att_req_send_process+0x5c>
	list->tail = node;
   26e6a:	f8c8 5008 	str.w	r5, [r8, #8]
}
   26e6e:	e7eb      	b.n	26e48 <att_req_send_process+0x5c>
}
   26e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026e74 <bt_att_status>:
{
   26e74:	b538      	push	{r3, r4, r5, lr}
   26e76:	4605      	mov	r5, r0
   26e78:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   26e7a:	2100      	movs	r1, #0
   26e7c:	f7ff fd4f 	bl	2691e <atomic_test_bit>
   26e80:	b1c0      	cbz	r0, 26eb4 <bt_att_status+0x40>
	if (!chan->att) {
   26e82:	f855 0c04 	ldr.w	r0, [r5, #-4]
   26e86:	b1a8      	cbz	r0, 26eb4 <bt_att_status+0x40>
	if (chan->req) {
   26e88:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   26e8c:	b993      	cbnz	r3, 26eb4 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   26e8e:	3004      	adds	r0, #4
   26e90:	f7ff fd21 	bl	268d6 <sys_slist_get>
	if (!node) {
   26e94:	4604      	mov	r4, r0
   26e96:	b168      	cbz	r0, 26eb4 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26e98:	4601      	mov	r1, r0
   26e9a:	1f28      	subs	r0, r5, #4
   26e9c:	f7ee f948 	bl	15130 <bt_att_chan_req_send>
   26ea0:	2800      	cmp	r0, #0
   26ea2:	da07      	bge.n	26eb4 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   26ea4:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   26ea8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   26eaa:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   26eac:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   26eae:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26eb0:	b902      	cbnz	r2, 26eb4 <bt_att_status+0x40>
	list->tail = node;
   26eb2:	609c      	str	r4, [r3, #8]
}
   26eb4:	bd38      	pop	{r3, r4, r5, pc}

00026eb6 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   26eb6:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   26eb8:	6883      	ldr	r3, [r0, #8]
   26eba:	699b      	ldr	r3, [r3, #24]
   26ebc:	b10b      	cbz	r3, 26ec2 <att_sent+0xc>
		chan->ops->sent(chan);
   26ebe:	3004      	adds	r0, #4
   26ec0:	4718      	bx	r3
}
   26ec2:	4770      	bx	lr

00026ec4 <att_tx_complete>:
{
   26ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ec8:	4606      	mov	r6, r0
   26eca:	460d      	mov	r5, r1
	if (!err) {
   26ecc:	4614      	mov	r4, r2
   26ece:	b122      	cbz	r2, 26eda <att_tx_complete+0x16>
}
   26ed0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   26ed4:	4608      	mov	r0, r1
   26ed6:	f7ed bfeb 	b.w	14eb0 <tx_meta_data_free>
		att_sent(conn, user_data);
   26eda:	f7ff ffec 	bl	26eb6 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   26ede:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   26ee0:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   26ee2:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   26ee6:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   26eea:	f7ed ffe1 	bl	14eb0 <tx_meta_data_free>
	if (!err && func) {
   26eee:	b92f      	cbnz	r7, 26efc <att_tx_complete+0x38>
}
   26ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   26ef4:	4649      	mov	r1, r9
   26ef6:	4630      	mov	r0, r6
   26ef8:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   26efa:	3401      	adds	r4, #1
   26efc:	b2a3      	uxth	r3, r4
   26efe:	4543      	cmp	r3, r8
   26f00:	d3f8      	bcc.n	26ef4 <att_tx_complete+0x30>
   26f02:	e7f5      	b.n	26ef0 <att_tx_complete+0x2c>

00026f04 <att_req_sent>:
{
   26f04:	b510      	push	{r4, lr}
   26f06:	460c      	mov	r4, r1
	if (!err) {
   26f08:	b90a      	cbnz	r2, 26f0e <att_req_sent+0xa>
		att_sent(conn, user_data);
   26f0a:	f7ff ffd4 	bl	26eb6 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   26f0e:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   26f10:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   26f14:	b12b      	cbz	r3, 26f22 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   26f16:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   26f1a:	2300      	movs	r3, #0
   26f1c:	30c0      	adds	r0, #192	; 0xc0
   26f1e:	f7f9 fd29 	bl	20974 <k_work_reschedule>
	tx_meta_data_free(user_data);
   26f22:	4620      	mov	r0, r4
}
   26f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   26f28:	f7ed bfc2 	b.w	14eb0 <tx_meta_data_free>

00026f2c <att_cfm_sent>:
{
   26f2c:	b510      	push	{r4, lr}
   26f2e:	460c      	mov	r4, r1
	if (!err) {
   26f30:	b90a      	cbnz	r2, 26f36 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   26f32:	f7ff ffc0 	bl	26eb6 <att_sent>
   26f36:	6823      	ldr	r3, [r4, #0]
   26f38:	3398      	adds	r3, #152	; 0x98
   26f3a:	e8d3 1fef 	ldaex	r1, [r3]
   26f3e:	f021 0102 	bic.w	r1, r1, #2
   26f42:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26f46:	2a00      	cmp	r2, #0
   26f48:	d1f7      	bne.n	26f3a <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   26f4a:	4620      	mov	r0, r4
}
   26f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   26f50:	f7ed bfae 	b.w	14eb0 <tx_meta_data_free>

00026f54 <att_rsp_sent>:
{
   26f54:	b510      	push	{r4, lr}
   26f56:	460c      	mov	r4, r1
	if (!err) {
   26f58:	b90a      	cbnz	r2, 26f5e <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   26f5a:	f7ff ffac 	bl	26eb6 <att_sent>
   26f5e:	6823      	ldr	r3, [r4, #0]
   26f60:	3398      	adds	r3, #152	; 0x98
   26f62:	e8d3 1fef 	ldaex	r1, [r3]
   26f66:	f021 0101 	bic.w	r1, r1, #1
   26f6a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26f6e:	2a00      	cmp	r2, #0
   26f70:	d1f7      	bne.n	26f62 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   26f72:	4620      	mov	r0, r4
}
   26f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   26f78:	f7ed bf9a 	b.w	14eb0 <tx_meta_data_free>

00026f7c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   26f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f80:	4688      	mov	r8, r1
   26f82:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   26f84:	2101      	movs	r1, #1
   26f86:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   26f88:	4605      	mov	r5, r0
   26f8a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   26f8c:	f7ee fa92 	bl	154b4 <bt_att_chan_create_pdu>
	if (!buf) {
   26f90:	4604      	mov	r4, r0
   26f92:	b170      	cbz	r0, 26fb2 <send_err_rsp.part.0+0x36>
   26f94:	2104      	movs	r1, #4
   26f96:	300c      	adds	r0, #12
   26f98:	f7f2 fb10 	bl	195bc <net_buf_simple_add>
	rsp->request = req;
   26f9c:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   26fa0:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   26fa4:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   26fa6:	4621      	mov	r1, r4
   26fa8:	4628      	mov	r0, r5
}
   26faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   26fae:	f7ff bdcd 	b.w	26b4c <bt_att_chan_send_rsp>
}
   26fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026fb6 <att_write_req>:
{
   26fb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26fb8:	460c      	mov	r4, r1
   26fba:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   26fbc:	f101 000c 	add.w	r0, r1, #12
   26fc0:	f000 fe87 	bl	27cd2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   26fc4:	8a22      	ldrh	r2, [r4, #16]
   26fc6:	4603      	mov	r3, r0
   26fc8:	9201      	str	r2, [sp, #4]
   26fca:	68e2      	ldr	r2, [r4, #12]
   26fcc:	2112      	movs	r1, #18
   26fce:	9200      	str	r2, [sp, #0]
   26fd0:	4628      	mov	r0, r5
   26fd2:	2213      	movs	r2, #19
   26fd4:	f7ee fb66 	bl	156a4 <att_write_rsp.constprop.0>
}
   26fd8:	b003      	add	sp, #12
   26fda:	bd30      	pop	{r4, r5, pc}

00026fdc <att_write_cmd>:
{
   26fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26fde:	460c      	mov	r4, r1
   26fe0:	4605      	mov	r5, r0
   26fe2:	f101 000c 	add.w	r0, r1, #12
   26fe6:	f000 fe74 	bl	27cd2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   26fea:	8a22      	ldrh	r2, [r4, #16]
   26fec:	4603      	mov	r3, r0
   26fee:	9201      	str	r2, [sp, #4]
   26ff0:	68e2      	ldr	r2, [r4, #12]
   26ff2:	4628      	mov	r0, r5
   26ff4:	9200      	str	r2, [sp, #0]
   26ff6:	2200      	movs	r2, #0
   26ff8:	4611      	mov	r1, r2
   26ffa:	f7ee fb53 	bl	156a4 <att_write_rsp.constprop.0>
}
   26ffe:	b003      	add	sp, #12
   27000:	bd30      	pop	{r4, r5, pc}

00027002 <att_read_blob_req>:
{
   27002:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   27004:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   27006:	210c      	movs	r1, #12
   27008:	8813      	ldrh	r3, [r2, #0]
   2700a:	8852      	ldrh	r2, [r2, #2]
   2700c:	9200      	str	r2, [sp, #0]
   2700e:	220d      	movs	r2, #13
   27010:	f7ee fd0a 	bl	15a28 <att_read_rsp>
}
   27014:	b003      	add	sp, #12
   27016:	f85d fb04 	ldr.w	pc, [sp], #4

0002701a <att_read_req>:
{
   2701a:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2701c:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2701e:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   27020:	210a      	movs	r1, #10
   27022:	881b      	ldrh	r3, [r3, #0]
   27024:	9200      	str	r2, [sp, #0]
   27026:	220b      	movs	r2, #11
   27028:	f7ee fcfe 	bl	15a28 <att_read_rsp>
}
   2702c:	b003      	add	sp, #12
   2702e:	f85d fb04 	ldr.w	pc, [sp], #4

00027032 <att_mtu_req>:
{
   27032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27034:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   27036:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2703a:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2703c:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2703e:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27040:	f7ff fc6d 	bl	2691e <atomic_test_bit>
   27044:	4604      	mov	r4, r0
   27046:	b9f0      	cbnz	r0, 27086 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   27048:	68db      	ldr	r3, [r3, #12]
   2704a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2704c:	2e16      	cmp	r6, #22
   2704e:	d91c      	bls.n	2708a <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   27050:	4638      	mov	r0, r7
   27052:	2202      	movs	r2, #2
   27054:	f7ee fb8a 	bl	1576c <bt_att_create_pdu>
	if (!pdu) {
   27058:	4607      	mov	r7, r0
   2705a:	b1c0      	cbz	r0, 2708e <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2705c:	2102      	movs	r1, #2
   2705e:	300c      	adds	r0, #12
   27060:	f7f2 faac 	bl	195bc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   27064:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   27066:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   27068:	7003      	strb	r3, [r0, #0]
   2706a:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2706c:	4628      	mov	r0, r5
   2706e:	f7ff fd6d 	bl	26b4c <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27072:	2e41      	cmp	r6, #65	; 0x41
   27074:	bf28      	it	cs
   27076:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   27078:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2707a:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2707c:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2707e:	f7ff fc90 	bl	269a2 <att_chan_mtu_updated>
	return 0;
   27082:	4620      	mov	r0, r4
}
   27084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   27086:	2006      	movs	r0, #6
   27088:	e7fc      	b.n	27084 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2708a:	2004      	movs	r0, #4
   2708c:	e7fa      	b.n	27084 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2708e:	200e      	movs	r0, #14
   27090:	e7f8      	b.n	27084 <att_mtu_req+0x52>

00027092 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   27092:	8a0a      	ldrh	r2, [r1, #16]
   27094:	2300      	movs	r3, #0
   27096:	68c9      	ldr	r1, [r1, #12]
   27098:	f7ee be70 	b.w	15d7c <att_handle_rsp>

0002709c <bt_att_encrypt_change>:
{
   2709c:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2709e:	4606      	mov	r6, r0
	if (!att_chan->att) {
   270a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   270a4:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   270a6:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   270aa:	2b00      	cmp	r3, #0
   270ac:	d038      	beq.n	27120 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   270ae:	b141      	cbz	r1, 270c2 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   270b0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   270b4:	2b00      	cmp	r3, #0
   270b6:	d033      	beq.n	27120 <bt_att_encrypt_change+0x84>
   270b8:	7c1b      	ldrb	r3, [r3, #16]
   270ba:	07da      	lsls	r2, r3, #31
   270bc:	d530      	bpl.n	27120 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   270be:	2305      	movs	r3, #5
   270c0:	e021      	b.n	27106 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   270c2:	4628      	mov	r0, r5
   270c4:	f7f0 f81a 	bl	170fc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   270c8:	7a6b      	ldrb	r3, [r5, #9]
   270ca:	2b01      	cmp	r3, #1
   270cc:	d028      	beq.n	27120 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   270ce:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   270d2:	b32d      	cbz	r5, 27120 <bt_att_encrypt_change+0x84>
   270d4:	7c2b      	ldrb	r3, [r5, #16]
   270d6:	07db      	lsls	r3, r3, #31
   270d8:	d522      	bpl.n	27120 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   270da:	68eb      	ldr	r3, [r5, #12]
   270dc:	2b00      	cmp	r3, #0
   270de:	d0ee      	beq.n	270be <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   270e0:	4630      	mov	r0, r6
   270e2:	696a      	ldr	r2, [r5, #20]
   270e4:	7c69      	ldrb	r1, [r5, #17]
   270e6:	f7ee f9e5 	bl	154b4 <bt_att_chan_create_pdu>
	if (!buf) {
   270ea:	4604      	mov	r4, r0
   270ec:	b150      	cbz	r0, 27104 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   270ee:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   270f2:	68eb      	ldr	r3, [r5, #12]
   270f4:	4798      	blx	r3
   270f6:	b168      	cbz	r0, 27114 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   270f8:	69a0      	ldr	r0, [r4, #24]
   270fa:	f7ed fed9 	bl	14eb0 <tx_meta_data_free>
		net_buf_unref(buf);
   270fe:	4620      	mov	r0, r4
   27100:	f7f2 f93a 	bl	19378 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   27104:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   27106:	2200      	movs	r2, #0
   27108:	4630      	mov	r0, r6
}
   2710a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2710e:	4611      	mov	r1, r2
   27110:	f7ee be34 	b.w	15d7c <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   27114:	4621      	mov	r1, r4
   27116:	4630      	mov	r0, r6
   27118:	f7ed ff96 	bl	15048 <chan_send>
   2711c:	2800      	cmp	r0, #0
   2711e:	d1eb      	bne.n	270f8 <bt_att_encrypt_change+0x5c>
}
   27120:	bd70      	pop	{r4, r5, r6, pc}

00027122 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   27122:	2001      	movs	r0, #1
   27124:	4770      	bx	lr

00027126 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   27126:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   27128:	f7ee f844 	bl	151b4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2712c:	b178      	cbz	r0, 2714e <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2712e:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   27130:	b16b      	cbz	r3, 2714e <bt_att_clear_out_of_sync_sent+0x28>
   27132:	3bf0      	subs	r3, #240	; 0xf0
   27134:	f103 0298 	add.w	r2, r3, #152	; 0x98
   27138:	e8d2 0fef 	ldaex	r0, [r2]
   2713c:	f020 0020 	bic.w	r0, r0, #32
   27140:	e8c2 0fe1 	stlex	r1, r0, [r2]
   27144:	2900      	cmp	r1, #0
   27146:	d1f7      	bne.n	27138 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   27148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2714c:	e7f0      	b.n	27130 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2714e:	bd08      	pop	{r3, pc}

00027150 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   27150:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   27152:	2104      	movs	r1, #4
   27154:	f7ff fbb5 	bl	268c2 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   27158:	b128      	cbz	r0, 27166 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2715a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2715e:	2105      	movs	r1, #5
   27160:	3094      	adds	r0, #148	; 0x94
   27162:	f7ff bbdc 	b.w	2691e <atomic_test_bit>
}
   27166:	bd08      	pop	{r3, pc}

00027168 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   27168:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2716a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2716e:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   27170:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   27172:	8082      	strh	r2, [r0, #4]
}
   27174:	4770      	bx	lr

00027176 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   27176:	6010      	str	r0, [r2, #0]
}
   27178:	2000      	movs	r0, #0
   2717a:	4770      	bx	lr

0002717c <gatt_ccc_changed>:
{
   2717c:	460b      	mov	r3, r1
   2717e:	8909      	ldrh	r1, [r1, #8]
   27180:	8a5a      	ldrh	r2, [r3, #18]
   27182:	4291      	cmp	r1, r2
   27184:	bf38      	it	cc
   27186:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   27188:	8a9a      	ldrh	r2, [r3, #20]
   2718a:	428a      	cmp	r2, r1
   2718c:	d003      	beq.n	27196 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2718e:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   27190:	699b      	ldr	r3, [r3, #24]
   27192:	b103      	cbz	r3, 27196 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   27194:	4718      	bx	r3
}
   27196:	4770      	bx	lr

00027198 <gatt_indicate_rsp>:
{
   27198:	b510      	push	{r4, lr}
   2719a:	9c02      	ldr	r4, [sp, #8]
   2719c:	460a      	mov	r2, r1
	if (params->func) {
   2719e:	68a3      	ldr	r3, [r4, #8]
   271a0:	b10b      	cbz	r3, 271a6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   271a2:	4621      	mov	r1, r4
   271a4:	4798      	blx	r3
	params->_ref--;
   271a6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   271a8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   271aa:	3b01      	subs	r3, #1
   271ac:	b2db      	uxtb	r3, r3
   271ae:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   271b0:	b122      	cbz	r2, 271bc <gatt_indicate_rsp+0x24>
   271b2:	b91b      	cbnz	r3, 271bc <gatt_indicate_rsp+0x24>
		params->destroy(params);
   271b4:	4620      	mov	r0, r4
}
   271b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   271ba:	4710      	bx	r2
}
   271bc:	bd10      	pop	{r4, pc}

000271be <match_uuid>:
	data->attr = attr;
   271be:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   271c0:	8091      	strh	r1, [r2, #4]
}
   271c2:	2000      	movs	r0, #0
   271c4:	4770      	bx	lr

000271c6 <gen_hash_m>:
{
   271c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   271c8:	6807      	ldr	r7, [r0, #0]
{
   271ca:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   271cc:	783d      	ldrb	r5, [r7, #0]
{
   271ce:	4614      	mov	r4, r2
   271d0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   271d2:	b9dd      	cbnz	r5, 2720c <gen_hash_m+0x46>
	switch (u16->val) {
   271d4:	887b      	ldrh	r3, [r7, #2]
   271d6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   271da:	d004      	beq.n	271e6 <gen_hash_m+0x20>
   271dc:	d810      	bhi.n	27200 <gen_hash_m+0x3a>
   271de:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   271e2:	2b03      	cmp	r3, #3
   271e4:	d812      	bhi.n	2720c <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   271e6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   271ea:	2202      	movs	r2, #2
   271ec:	4620      	mov	r0, r4
   271ee:	f10d 010a 	add.w	r1, sp, #10
   271f2:	f7fe fb02 	bl	257fa <tc_cmac_update>
   271f6:	b968      	cbnz	r0, 27214 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   271f8:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   271fc:	65a2      	str	r2, [r4, #88]	; 0x58
   271fe:	e006      	b.n	2720e <gen_hash_m+0x48>
	switch (u16->val) {
   27200:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   27204:	33ff      	adds	r3, #255	; 0xff
   27206:	b29b      	uxth	r3, r3
   27208:	2b04      	cmp	r3, #4
   2720a:	d91e      	bls.n	2724a <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2720c:	2501      	movs	r5, #1
}
   2720e:	4628      	mov	r0, r5
   27210:	b009      	add	sp, #36	; 0x24
   27212:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   27214:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27216:	2202      	movs	r2, #2
   27218:	4620      	mov	r0, r4
   2721a:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2721e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27222:	f7fe faea 	bl	257fa <tc_cmac_update>
   27226:	2800      	cmp	r0, #0
   27228:	d0e6      	beq.n	271f8 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2722a:	2000      	movs	r0, #0
   2722c:	9000      	str	r0, [sp, #0]
   2722e:	aa03      	add	r2, sp, #12
   27230:	2313      	movs	r3, #19
   27232:	4631      	mov	r1, r6
   27234:	6877      	ldr	r7, [r6, #4]
   27236:	47b8      	blx	r7
		if (len < 0) {
   27238:	1e02      	subs	r2, r0, #0
   2723a:	dbdf      	blt.n	271fc <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2723c:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2723e:	4620      	mov	r0, r4
   27240:	f7fe fadb 	bl	257fa <tc_cmac_update>
   27244:	2800      	cmp	r0, #0
   27246:	d1e1      	bne.n	2720c <gen_hash_m+0x46>
   27248:	e7d6      	b.n	271f8 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2724a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2724e:	2202      	movs	r2, #2
   27250:	4620      	mov	r0, r4
   27252:	f10d 010a 	add.w	r1, sp, #10
   27256:	f7fe fad0 	bl	257fa <tc_cmac_update>
   2725a:	2800      	cmp	r0, #0
   2725c:	d0cc      	beq.n	271f8 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2725e:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27260:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   27262:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27266:	f10d 010a 	add.w	r1, sp, #10
   2726a:	e7e8      	b.n	2723e <gen_hash_m+0x78>

0002726c <bt_addr_le_eq>:
   2726c:	2207      	movs	r2, #7
{
   2726e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   27270:	f002 faab 	bl	297ca <memcmp>
}
   27274:	fab0 f080 	clz	r0, r0
   27278:	0940      	lsrs	r0, r0, #5
   2727a:	bd08      	pop	{r3, pc}

0002727c <bt_addr_le_copy>:
   2727c:	680b      	ldr	r3, [r1, #0]
   2727e:	6003      	str	r3, [r0, #0]
   27280:	888b      	ldrh	r3, [r1, #4]
   27282:	8083      	strh	r3, [r0, #4]
   27284:	798b      	ldrb	r3, [r1, #6]
   27286:	7183      	strb	r3, [r0, #6]
}
   27288:	4770      	bx	lr

0002728a <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2728a:	2300      	movs	r3, #0
   2728c:	6003      	str	r3, [r0, #0]
   2728e:	6043      	str	r3, [r0, #4]
   27290:	6083      	str	r3, [r0, #8]
}
   27292:	4770      	bx	lr

00027294 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   27294:	b538      	push	{r3, r4, r5, lr}
   27296:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2729a:	4615      	mov	r5, r2
	if (offset > value_len) {
   2729c:	4294      	cmp	r4, r2
   2729e:	d30a      	bcc.n	272b6 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   272a0:	1aa4      	subs	r4, r4, r2
   272a2:	428c      	cmp	r4, r1
   272a4:	bfa8      	it	ge
   272a6:	460c      	movge	r4, r1
   272a8:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   272aa:	4622      	mov	r2, r4
   272ac:	1959      	adds	r1, r3, r5
   272ae:	f002 fa9c 	bl	297ea <memcpy>
}
   272b2:	4620      	mov	r0, r4
   272b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   272b6:	f06f 0406 	mvn.w	r4, #6
   272ba:	e7fa      	b.n	272b2 <bt_gatt_attr_read.constprop.0+0x1e>

000272bc <bt_gatt_attr_read_ccc>:
{
   272bc:	b530      	push	{r4, r5, lr}
   272be:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   272c0:	68c9      	ldr	r1, [r1, #12]
{
   272c2:	4614      	mov	r4, r2
   272c4:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   272c6:	f7ee feff 	bl	160c8 <find_ccc_cfg>
	if (cfg) {
   272ca:	b100      	cbz	r0, 272ce <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   272cc:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   272ce:	2302      	movs	r3, #2
   272d0:	f8ad 000e 	strh.w	r0, [sp, #14]
   272d4:	9300      	str	r3, [sp, #0]
   272d6:	4629      	mov	r1, r5
   272d8:	4620      	mov	r0, r4
   272da:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   272de:	f10d 030e 	add.w	r3, sp, #14
   272e2:	f7ff ffd7 	bl	27294 <bt_gatt_attr_read.constprop.0>
}
   272e6:	b005      	add	sp, #20
   272e8:	bd30      	pop	{r4, r5, pc}

000272ea <bt_gatt_attr_read_service>:
{
   272ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   272ec:	460c      	mov	r4, r1
   272ee:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   272f0:	68e3      	ldr	r3, [r4, #12]
{
   272f2:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   272f4:	781c      	ldrb	r4, [r3, #0]
{
   272f6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   272fa:	b13c      	cbz	r4, 2730c <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   272fc:	2410      	movs	r4, #16
   272fe:	3301      	adds	r3, #1
   27300:	9406      	str	r4, [sp, #24]
}
   27302:	b004      	add	sp, #16
   27304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   27308:	f7ff bfc4 	b.w	27294 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2730c:	885b      	ldrh	r3, [r3, #2]
   2730e:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   27312:	2302      	movs	r3, #2
   27314:	9300      	str	r3, [sp, #0]
   27316:	f10d 030e 	add.w	r3, sp, #14
   2731a:	f7ff ffbb 	bl	27294 <bt_gatt_attr_read.constprop.0>
}
   2731e:	b004      	add	sp, #16
   27320:	bd10      	pop	{r4, pc}

00027322 <cf_read>:
{
   27322:	b530      	push	{r4, r5, lr}
   27324:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   27326:	2300      	movs	r3, #0
{
   27328:	b085      	sub	sp, #20
   2732a:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2732c:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   27330:	f7ee fe7a 	bl	16028 <find_cf_cfg>
	if (cfg) {
   27334:	b110      	cbz	r0, 2733c <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   27336:	7a03      	ldrb	r3, [r0, #8]
   27338:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2733c:	2301      	movs	r3, #1
   2733e:	4629      	mov	r1, r5
   27340:	9300      	str	r3, [sp, #0]
   27342:	4620      	mov	r0, r4
   27344:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   27348:	ab03      	add	r3, sp, #12
   2734a:	f7ff ffa3 	bl	27294 <bt_gatt_attr_read.constprop.0>
}
   2734e:	b005      	add	sp, #20
   27350:	bd30      	pop	{r4, r5, pc}

00027352 <read_name>:
{
   27352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27356:	4614      	mov	r4, r2
   27358:	461d      	mov	r5, r3
   2735a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2735e:	f7eb fad5 	bl	1290c <bt_get_name>
   27362:	4606      	mov	r6, r0
				 strlen(name));
   27364:	f7e1 fffc 	bl	9360 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   27368:	b280      	uxth	r0, r0
   2736a:	9006      	str	r0, [sp, #24]
   2736c:	4633      	mov	r3, r6
   2736e:	463a      	mov	r2, r7
   27370:	4629      	mov	r1, r5
   27372:	4620      	mov	r0, r4
}
   27374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   27378:	f7ff bf8c 	b.w	27294 <bt_gatt_attr_read.constprop.0>

0002737c <read_appearance>:
{
   2737c:	b530      	push	{r4, r5, lr}
   2737e:	b085      	sub	sp, #20
   27380:	4614      	mov	r4, r2
   27382:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   27384:	f7fe fef5 	bl	26172 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   27388:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2738a:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2738e:	9300      	str	r3, [sp, #0]
   27390:	4629      	mov	r1, r5
   27392:	4620      	mov	r0, r4
   27394:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   27398:	f10d 030e 	add.w	r3, sp, #14
   2739c:	f7ff ff7a 	bl	27294 <bt_gatt_attr_read.constprop.0>
}
   273a0:	b005      	add	sp, #20
   273a2:	bd30      	pop	{r4, r5, pc}

000273a4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   273a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   273a6:	ab0b      	add	r3, sp, #44	; 0x2c
   273a8:	9305      	str	r3, [sp, #20]
   273aa:	9303      	str	r3, [sp, #12]
   273ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   273ae:	9302      	str	r3, [sp, #8]
   273b0:	2300      	movs	r3, #0
   273b2:	4618      	mov	r0, r3
   273b4:	e9cd 3300 	strd	r3, r3, [sp]
   273b8:	f7e6 ffd6 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   273bc:	b007      	add	sp, #28
   273be:	f85d fb04 	ldr.w	pc, [sp], #4

000273c2 <sc_clear>:
{
   273c2:	b538      	push	{r3, r4, r5, lr}
   273c4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   273c6:	f100 0590 	add.w	r5, r0, #144	; 0x90
   273ca:	4629      	mov	r1, r5
   273cc:	7a00      	ldrb	r0, [r0, #8]
   273ce:	f7fe fed3 	bl	26178 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   273d2:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   273d4:	7a20      	ldrb	r0, [r4, #8]
   273d6:	f7ee fe55 	bl	16084 <find_sc_cfg>
		if (cfg) {
   273da:	b118      	cbz	r0, 273e4 <sc_clear+0x22>
}
   273dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   273e0:	f7ff bf53 	b.w	2728a <clear_sc_cfg>
}
   273e4:	bd38      	pop	{r3, r4, r5, pc}

000273e6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   273e6:	2a02      	cmp	r2, #2
{
   273e8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   273ea:	d108      	bne.n	273fe <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   273ec:	2300      	movs	r3, #0
   273ee:	f100 0190 	add.w	r1, r0, #144	; 0x90
   273f2:	461a      	mov	r2, r3
   273f4:	7a00      	ldrb	r0, [r0, #8]
   273f6:	f7ee ff17 	bl	16228 <sc_save>
}
   273fa:	2002      	movs	r0, #2
   273fc:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   273fe:	f7ff ffe0 	bl	273c2 <sc_clear>
   27402:	e7fa      	b.n	273fa <sc_ccc_cfg_write+0x14>

00027404 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27404:	2301      	movs	r3, #1
   27406:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27408:	e8d0 2fef 	ldaex	r2, [r0]
   2740c:	431a      	orrs	r2, r3
   2740e:	e8c0 2fe1 	stlex	r1, r2, [r0]
   27412:	2900      	cmp	r1, #0
   27414:	d1f8      	bne.n	27408 <atomic_set_bit+0x4>
}
   27416:	4770      	bx	lr

00027418 <sc_restore_rsp>:
{
   27418:	b538      	push	{r3, r4, r5, lr}
   2741a:	4604      	mov	r4, r0
   2741c:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2741e:	f7ff fe80 	bl	27122 <bt_att_fixed_chan_only>
   27422:	b150      	cbz	r0, 2743a <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   27424:	4620      	mov	r0, r4
   27426:	f7ee fdff 	bl	16028 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2742a:	b130      	cbz	r0, 2743a <sc_restore_rsp+0x22>
   2742c:	7a03      	ldrb	r3, [r0, #8]
   2742e:	07db      	lsls	r3, r3, #31
   27430:	d503      	bpl.n	2743a <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   27432:	2100      	movs	r1, #0
   27434:	300c      	adds	r0, #12
   27436:	f7ff ffe5 	bl	27404 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2743a:	b935      	cbnz	r5, 2744a <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2743c:	7a20      	ldrb	r0, [r4, #8]
   2743e:	f104 0190 	add.w	r1, r4, #144	; 0x90
   27442:	f7ee fe1f 	bl	16084 <find_sc_cfg>
		if (sc_cfg) {
   27446:	b100      	cbz	r0, 2744a <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   27448:	6085      	str	r5, [r0, #8]
}
   2744a:	bd38      	pop	{r3, r4, r5, pc}

0002744c <bt_gatt_attr_value_handle>:
{
   2744c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2744e:	4604      	mov	r4, r0
   27450:	b910      	cbnz	r0, 27458 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   27452:	2000      	movs	r0, #0
}
   27454:	b002      	add	sp, #8
   27456:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   27458:	2300      	movs	r3, #0
   2745a:	f88d 3004 	strb.w	r3, [sp, #4]
   2745e:	f642 0303 	movw	r3, #10243	; 0x2803
   27462:	6800      	ldr	r0, [r0, #0]
   27464:	a901      	add	r1, sp, #4
   27466:	f8ad 3006 	strh.w	r3, [sp, #6]
   2746a:	f7fe fd38 	bl	25ede <bt_uuid_cmp>
   2746e:	2800      	cmp	r0, #0
   27470:	d1ef      	bne.n	27452 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   27472:	68e3      	ldr	r3, [r4, #12]
   27474:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   27476:	2800      	cmp	r0, #0
   27478:	d1ec      	bne.n	27454 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2747a:	4620      	mov	r0, r4
   2747c:	f7ef f844 	bl	16508 <bt_gatt_attr_get_handle>
   27480:	3001      	adds	r0, #1
   27482:	b280      	uxth	r0, r0
	return handle;
   27484:	e7e6      	b.n	27454 <bt_gatt_attr_value_handle+0x8>

00027486 <bt_gatt_attr_read_chrc>:
{
   27486:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   27488:	68cc      	ldr	r4, [r1, #12]
{
   2748a:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2748c:	79a3      	ldrb	r3, [r4, #6]
{
   2748e:	b088      	sub	sp, #32
   27490:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   27492:	f88d 300c 	strb.w	r3, [sp, #12]
{
   27496:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   27498:	f7ff ffd8 	bl	2744c <bt_gatt_attr_value_handle>
   2749c:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   274a0:	6824      	ldr	r4, [r4, #0]
   274a2:	7823      	ldrb	r3, [r4, #0]
   274a4:	b96b      	cbnz	r3, 274c2 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   274a6:	8863      	ldrh	r3, [r4, #2]
   274a8:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   274ac:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   274ae:	9300      	str	r3, [sp, #0]
   274b0:	4631      	mov	r1, r6
   274b2:	4628      	mov	r0, r5
   274b4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   274b8:	ab03      	add	r3, sp, #12
   274ba:	f7ff feeb 	bl	27294 <bt_gatt_attr_read.constprop.0>
}
   274be:	b008      	add	sp, #32
   274c0:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   274c2:	1c63      	adds	r3, r4, #1
   274c4:	f10d 020f 	add.w	r2, sp, #15
   274c8:	3411      	adds	r4, #17
   274ca:	f853 1b04 	ldr.w	r1, [r3], #4
   274ce:	42a3      	cmp	r3, r4
   274d0:	f842 1b04 	str.w	r1, [r2], #4
   274d4:	d1f9      	bne.n	274ca <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   274d6:	2313      	movs	r3, #19
   274d8:	e7e9      	b.n	274ae <bt_gatt_attr_read_chrc+0x28>

000274da <bt_gatt_foreach_attr>:
{
   274da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   274dc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   274e0:	2300      	movs	r3, #0
   274e2:	461a      	mov	r2, r3
   274e4:	9300      	str	r3, [sp, #0]
   274e6:	f7ef f857 	bl	16598 <bt_gatt_foreach_attr_type>
}
   274ea:	b005      	add	sp, #20
   274ec:	f85d fb04 	ldr.w	pc, [sp], #4

000274f0 <db_hash_process>:
	db_hash_gen(true);
   274f0:	f7ef b8c2 	b.w	16678 <db_hash_gen.constprop.0>

000274f4 <bt_gatt_check_perm>:
{
   274f4:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   274f6:	07d4      	lsls	r4, r2, #31
{
   274f8:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   274fa:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   274fc:	d504      	bpl.n	27508 <bt_gatt_check_perm+0x14>
   274fe:	f013 0f95 	tst.w	r3, #149	; 0x95
   27502:	d027      	beq.n	27554 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   27504:	6848      	ldr	r0, [r1, #4]
   27506:	b328      	cbz	r0, 27554 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   27508:	0790      	lsls	r0, r2, #30
   2750a:	d504      	bpl.n	27516 <bt_gatt_check_perm+0x22>
   2750c:	f413 7f95 	tst.w	r3, #298	; 0x12a
   27510:	d022      	beq.n	27558 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   27512:	6889      	ldr	r1, [r1, #8]
   27514:	b301      	cbz	r1, 27558 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   27516:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2751a:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2751e:	d007      	beq.n	27530 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   27520:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   27524:	b90b      	cbnz	r3, 2752a <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   27526:	2005      	movs	r0, #5
}
   27528:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2752a:	7b5b      	ldrb	r3, [r3, #13]
   2752c:	06db      	lsls	r3, r3, #27
   2752e:	d5fa      	bpl.n	27526 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   27530:	f014 0f30 	tst.w	r4, #48	; 0x30
   27534:	d108      	bne.n	27548 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   27536:	f014 000c 	ands.w	r0, r4, #12
   2753a:	d0f5      	beq.n	27528 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2753c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2753e:	2b00      	cmp	r3, #0
   27540:	bf14      	ite	ne
   27542:	2000      	movne	r0, #0
   27544:	200f      	moveq	r0, #15
   27546:	e7ef      	b.n	27528 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   27548:	4628      	mov	r0, r5
   2754a:	f7ff f8ee 	bl	2672a <bt_conn_get_security>
   2754e:	2802      	cmp	r0, #2
   27550:	d8f1      	bhi.n	27536 <bt_gatt_check_perm+0x42>
   27552:	e7e8      	b.n	27526 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   27554:	2002      	movs	r0, #2
   27556:	e7e7      	b.n	27528 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   27558:	2003      	movs	r0, #3
   2755a:	e7e5      	b.n	27528 <bt_gatt_check_perm+0x34>

0002755c <bt_gatt_change_aware>:
{
   2755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2755e:	4606      	mov	r6, r0
   27560:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   27562:	f7ee fd61 	bl	16028 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   27566:	b1e0      	cbz	r0, 275a2 <bt_gatt_change_aware+0x46>
   27568:	7a03      	ldrb	r3, [r0, #8]
   2756a:	07db      	lsls	r3, r3, #31
   2756c:	d519      	bpl.n	275a2 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2756e:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27572:	e8d4 5faf 	lda	r5, [r4]
   27576:	f015 0501 	ands.w	r5, r5, #1
   2757a:	d112      	bne.n	275a2 <bt_gatt_change_aware+0x46>
	if (!req) {
   2757c:	b197      	cbz	r7, 275a4 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2757e:	e8d4 1fef 	ldaex	r1, [r4]
   27582:	f021 0302 	bic.w	r3, r1, #2
   27586:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2758a:	2a00      	cmp	r2, #0
   2758c:	d1f7      	bne.n	2757e <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2758e:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   27592:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   27594:	d008      	beq.n	275a8 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   27596:	f7ff fdc6 	bl	27126 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2759a:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2759c:	4620      	mov	r0, r4
   2759e:	f7ff ff31 	bl	27404 <atomic_set_bit>
		return true;
   275a2:	2501      	movs	r5, #1
}
   275a4:	4628      	mov	r0, r5
   275a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   275a8:	f7ff fdbb 	bl	27122 <bt_att_fixed_chan_only>
   275ac:	2800      	cmp	r0, #0
   275ae:	d0f9      	beq.n	275a4 <bt_gatt_change_aware+0x48>
   275b0:	4630      	mov	r0, r6
   275b2:	f7ff fdcd 	bl	27150 <bt_att_out_of_sync_sent_on_fixed>
   275b6:	2800      	cmp	r0, #0
   275b8:	d0f4      	beq.n	275a4 <bt_gatt_change_aware+0x48>
   275ba:	e8d4 3fef 	ldaex	r3, [r4]
   275be:	f023 0302 	bic.w	r3, r3, #2
   275c2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   275c6:	2a00      	cmp	r2, #0
   275c8:	d1f7      	bne.n	275ba <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   275ca:	4630      	mov	r0, r6
   275cc:	f7ff fdab 	bl	27126 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   275d0:	4639      	mov	r1, r7
   275d2:	e7e3      	b.n	2759c <bt_gatt_change_aware+0x40>

000275d4 <smp_pairing_rsp>:
}
   275d4:	2007      	movs	r0, #7
   275d6:	4770      	bx	lr

000275d8 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   275d8:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   275dc:	4108      	asrs	r0, r1
}
   275de:	f000 0001 	and.w	r0, r0, #1
   275e2:	4770      	bx	lr

000275e4 <update_keys_check>:
{
   275e4:	4603      	mov	r3, r0
   275e6:	b510      	push	{r4, lr}
	if (!keys ||
   275e8:	b1d9      	cbz	r1, 27622 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   275ea:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   275ec:	f010 0f24 	tst.w	r0, #36	; 0x24
   275f0:	d017      	beq.n	27622 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   275f2:	7d1a      	ldrb	r2, [r3, #20]
   275f4:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   275f6:	7b09      	ldrb	r1, [r1, #12]
   275f8:	42a2      	cmp	r2, r4
   275fa:	bf28      	it	cs
   275fc:	4622      	movcs	r2, r4
   275fe:	4291      	cmp	r1, r2
   27600:	d901      	bls.n	27606 <update_keys_check+0x22>
			return false;
   27602:	2000      	movs	r0, #0
}
   27604:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   27606:	0682      	lsls	r2, r0, #26
   27608:	d404      	bmi.n	27614 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2760a:	7a18      	ldrb	r0, [r3, #8]
   2760c:	3800      	subs	r0, #0
   2760e:	bf18      	it	ne
   27610:	2001      	movne	r0, #1
   27612:	e7f7      	b.n	27604 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   27614:	2105      	movs	r1, #5
   27616:	1d18      	adds	r0, r3, #4
   27618:	f7ff ffde 	bl	275d8 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2761c:	2800      	cmp	r0, #0
   2761e:	d1f4      	bne.n	2760a <update_keys_check+0x26>
   27620:	e7ef      	b.n	27602 <update_keys_check+0x1e>
	return true;
   27622:	2001      	movs	r0, #1
   27624:	e7ee      	b.n	27604 <update_keys_check+0x20>

00027626 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27626:	2301      	movs	r3, #1
   27628:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2762a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2762c:	e8d0 2fef 	ldaex	r2, [r0]
   27630:	401a      	ands	r2, r3
   27632:	e8c0 2fe1 	stlex	r1, r2, [r0]
   27636:	2900      	cmp	r1, #0
   27638:	d1f8      	bne.n	2762c <atomic_clear_bit+0x6>
}
   2763a:	4770      	bx	lr

0002763c <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2763c:	680b      	ldr	r3, [r1, #0]
   2763e:	6003      	str	r3, [r0, #0]
   27640:	888b      	ldrh	r3, [r1, #4]
   27642:	8083      	strh	r3, [r0, #4]
   27644:	798b      	ldrb	r3, [r1, #6]
   27646:	7183      	strb	r3, [r0, #6]
   27648:	4770      	bx	lr

0002764a <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2764a:	2007      	movs	r0, #7
   2764c:	4770      	bx	lr

0002764e <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2764e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27650:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   27652:	2200      	movs	r2, #0
   27654:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   27656:	4604      	mov	r4, r0
   27658:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2765a:	460a      	mov	r2, r1
   2765c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   27660:	2106      	movs	r1, #6
   27662:	f7ff f90c 	bl	2687e <bt_l2cap_send_cb>
   27666:	b128      	cbz	r0, 27674 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   27668:	4628      	mov	r0, r5
}
   2766a:	b003      	add	sp, #12
   2766c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   27670:	f7f1 be82 	b.w	19378 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   27674:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27678:	2300      	movs	r3, #0
   2767a:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   2767e:	b003      	add	sp, #12
   27680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   27684:	f7f9 b976 	b.w	20974 <k_work_reschedule>

00027688 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2768a:	ab0b      	add	r3, sp, #44	; 0x2c
   2768c:	9305      	str	r3, [sp, #20]
   2768e:	9303      	str	r3, [sp, #12]
   27690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27692:	9302      	str	r3, [sp, #8]
   27694:	2300      	movs	r3, #0
   27696:	4618      	mov	r0, r3
   27698:	e9cd 3300 	strd	r3, r3, [sp]
   2769c:	f7e6 fe64 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   276a0:	b007      	add	sp, #28
   276a2:	f85d fb04 	ldr.w	pc, [sp], #4

000276a6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   276a6:	2301      	movs	r3, #1
   276a8:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   276aa:	e8d0 2fef 	ldaex	r2, [r0]
   276ae:	431a      	orrs	r2, r3
   276b0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   276b4:	2900      	cmp	r1, #0
   276b6:	d1f8      	bne.n	276aa <atomic_set_bit+0x4>
}
   276b8:	4770      	bx	lr

000276ba <smp_keypress_notif>:
{
   276ba:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   276bc:	210e      	movs	r1, #14
   276be:	f7ff fff2 	bl	276a6 <atomic_set_bit>
}
   276c2:	2000      	movs	r0, #0
   276c4:	bd08      	pop	{r3, pc}

000276c6 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   276c6:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   276c8:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   276ca:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   276cc:	4628      	mov	r0, r5
   276ce:	2104      	movs	r1, #4
   276d0:	f7ff ff82 	bl	275d8 <atomic_test_bit>
   276d4:	b168      	cbz	r0, 276f2 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   276d6:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   276d8:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   276da:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   276dc:	4608      	mov	r0, r1
   276de:	f7ff f8cb 	bl	26878 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   276e2:	4604      	mov	r4, r0
   276e4:	b940      	cbnz	r0, 276f8 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   276e6:	2104      	movs	r1, #4
   276e8:	4628      	mov	r0, r5
   276ea:	f7ff ffdc 	bl	276a6 <atomic_set_bit>
}
   276ee:	4620      	mov	r0, r4
   276f0:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   276f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   276f6:	e7ef      	b.n	276d8 <smp_create_pdu.constprop.0+0x12>
   276f8:	2101      	movs	r1, #1
   276fa:	300c      	adds	r0, #12
   276fc:	f7f1 ff5e 	bl	195bc <net_buf_simple_add>
	hdr->code = op;
   27700:	7006      	strb	r6, [r0, #0]
	return buf;
   27702:	e7f4      	b.n	276ee <smp_create_pdu.constprop.0+0x28>

00027704 <send_pairing_rsp>:
{
   27704:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   27706:	2102      	movs	r1, #2
{
   27708:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2770a:	f7ff ffdc 	bl	276c6 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2770e:	4605      	mov	r5, r0
   27710:	b180      	cbz	r0, 27734 <send_pairing_rsp+0x30>
   27712:	2106      	movs	r1, #6
   27714:	300c      	adds	r0, #12
   27716:	f7f1 ff51 	bl	195bc <net_buf_simple_add>
   2771a:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   2771e:	2200      	movs	r2, #0
   27720:	6003      	str	r3, [r0, #0]
   27722:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   27726:	4629      	mov	r1, r5
   27728:	8083      	strh	r3, [r0, #4]
   2772a:	4620      	mov	r0, r4
   2772c:	f7ff ff8f 	bl	2764e <smp_send.constprop.0>
	return 0;
   27730:	2000      	movs	r0, #0
}
   27732:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   27734:	2008      	movs	r0, #8
   27736:	e7fc      	b.n	27732 <send_pairing_rsp+0x2e>

00027738 <smp_send_pairing_random>:
{
   27738:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2773a:	2104      	movs	r1, #4
{
   2773c:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2773e:	f7ff ffc2 	bl	276c6 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   27742:	4605      	mov	r5, r0
   27744:	b1a0      	cbz	r0, 27770 <smp_send_pairing_random+0x38>
   27746:	2110      	movs	r1, #16
   27748:	300c      	adds	r0, #12
   2774a:	f7f1 ff37 	bl	195bc <net_buf_simple_add>
   2774e:	f104 0327 	add.w	r3, r4, #39	; 0x27
   27752:	f104 0237 	add.w	r2, r4, #55	; 0x37
   27756:	f853 1b04 	ldr.w	r1, [r3], #4
   2775a:	4293      	cmp	r3, r2
   2775c:	f840 1b04 	str.w	r1, [r0], #4
   27760:	d1f9      	bne.n	27756 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   27762:	4620      	mov	r0, r4
   27764:	2200      	movs	r2, #0
   27766:	4629      	mov	r1, r5
   27768:	f7ff ff71 	bl	2764e <smp_send.constprop.0>
	return 0;
   2776c:	2000      	movs	r0, #0
}
   2776e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   27770:	2008      	movs	r0, #8
   27772:	e7fc      	b.n	2776e <smp_send_pairing_random+0x36>

00027774 <smp_dhkey_check>:
{
   27774:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   27776:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   2777a:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2777c:	78db      	ldrb	r3, [r3, #3]
   2777e:	2b01      	cmp	r3, #1
   27780:	d119      	bne.n	277b6 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   27782:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   27784:	1d06      	adds	r6, r0, #4
   27786:	2110      	movs	r1, #16
   27788:	4630      	mov	r0, r6
   2778a:	f7ff ff4c 	bl	27626 <atomic_clear_bit>
   2778e:	462b      	mov	r3, r5
   27790:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   27794:	f105 0110 	add.w	r1, r5, #16
   27798:	f853 0b04 	ldr.w	r0, [r3], #4
   2779c:	428b      	cmp	r3, r1
   2779e:	f842 0b04 	str.w	r0, [r2], #4
   277a2:	d1f9      	bne.n	27798 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   277a4:	2107      	movs	r1, #7
   277a6:	4630      	mov	r0, r6
   277a8:	f7ff ff16 	bl	275d8 <atomic_test_bit>
   277ac:	b128      	cbz	r0, 277ba <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   277ae:	2109      	movs	r1, #9
   277b0:	4630      	mov	r0, r6
   277b2:	f7ff ff78 	bl	276a6 <atomic_set_bit>
}
   277b6:	2000      	movs	r0, #0
   277b8:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   277ba:	210a      	movs	r1, #10
   277bc:	4630      	mov	r0, r6
   277be:	f7ff ff0b 	bl	275d8 <atomic_test_bit>
   277c2:	2800      	cmp	r0, #0
   277c4:	d1f3      	bne.n	277ae <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   277c6:	4620      	mov	r0, r4
}
   277c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   277cc:	f7f0 b944 	b.w	17a58 <compute_and_check_and_send_periph_dhcheck>

000277d0 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   277d0:	2007      	movs	r0, #7
   277d2:	4770      	bx	lr

000277d4 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   277d4:	2301      	movs	r3, #1
   277d6:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   277da:	43ca      	mvns	r2, r1
{
   277dc:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   277de:	e8d0 3fef 	ldaex	r3, [r0]
   277e2:	ea03 0402 	and.w	r4, r3, r2
   277e6:	e8c0 4fe5 	stlex	r5, r4, [r0]
   277ea:	2d00      	cmp	r5, #0
   277ec:	d1f7      	bne.n	277de <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   277ee:	4219      	tst	r1, r3
}
   277f0:	bf14      	ite	ne
   277f2:	2001      	movne	r0, #1
   277f4:	2000      	moveq	r0, #0
   277f6:	bd30      	pop	{r4, r5, pc}

000277f8 <smp_reset>:
{
   277f8:	b538      	push	{r3, r4, r5, lr}
   277fa:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   277fc:	2500      	movs	r5, #0
   277fe:	1d03      	adds	r3, r0, #4
   27800:	e8d3 2fef 	ldaex	r2, [r3]
   27804:	e8c3 5fe1 	stlex	r1, r5, [r3]
   27808:	2900      	cmp	r1, #0
   2780a:	d1f9      	bne.n	27800 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2780c:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   27810:	f7f9 f8b6 	bl	20980 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   27814:	7225      	strb	r5, [r4, #8]
   27816:	e8d4 3fef 	ldaex	r3, [r4]
   2781a:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2781e:	2a00      	cmp	r2, #0
   27820:	d1f9      	bne.n	27816 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   27822:	4620      	mov	r0, r4
}
   27824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   27828:	2101      	movs	r1, #1
   2782a:	f7ff bf3c 	b.w	276a6 <atomic_set_bit>

0002782e <smp_c1>:
{
   2782e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27830:	b089      	sub	sp, #36	; 0x24
   27832:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   27836:	4605      	mov	r5, r0
	p1[0] = ia->type;
   27838:	7830      	ldrb	r0, [r6, #0]
{
   2783a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2783c:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   27840:	7838      	ldrb	r0, [r7, #0]
   27842:	f101 0c10 	add.w	ip, r1, #16
   27846:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2784a:	6810      	ldr	r0, [r2, #0]
   2784c:	f8cd 0002 	str.w	r0, [sp, #2]
   27850:	8890      	ldrh	r0, [r2, #4]
   27852:	7992      	ldrb	r2, [r2, #6]
   27854:	f8ad 0006 	strh.w	r0, [sp, #6]
   27858:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2785c:	681a      	ldr	r2, [r3, #0]
   2785e:	4668      	mov	r0, sp
   27860:	f8cd 2009 	str.w	r2, [sp, #9]
   27864:	889a      	ldrh	r2, [r3, #4]
   27866:	799b      	ldrb	r3, [r3, #6]
   27868:	f8ad 200d 	strh.w	r2, [sp, #13]
   2786c:	4622      	mov	r2, r4
   2786e:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   27872:	f811 3b01 	ldrb.w	r3, [r1], #1
   27876:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   2787a:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   2787c:	ea83 030e 	eor.w	r3, r3, lr
   27880:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   27884:	d1f5      	bne.n	27872 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   27886:	4622      	mov	r2, r4
   27888:	4621      	mov	r1, r4
   2788a:	4628      	mov	r0, r5
   2788c:	f7fe fe5a 	bl	26544 <bt_encrypt_le>
	if (err) {
   27890:	4603      	mov	r3, r0
   27892:	bb28      	cbnz	r0, 278e0 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   27894:	9307      	str	r3, [sp, #28]
   27896:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   27898:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2789c:	f8d7 0001 	ldr.w	r0, [r7, #1]
   278a0:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   278a4:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   278a8:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   278aa:	f8cd 2016 	str.w	r2, [sp, #22]
   278ae:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   278b2:	f104 0010 	add.w	r0, r4, #16
   278b6:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   278ba:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   278bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   278c0:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   278c4:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   278c6:	ea82 0206 	eor.w	r2, r2, r6
   278ca:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   278ce:	d1f5      	bne.n	278bc <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   278d0:	4622      	mov	r2, r4
   278d2:	4621      	mov	r1, r4
   278d4:	4628      	mov	r0, r5
}
   278d6:	b009      	add	sp, #36	; 0x24
   278d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   278dc:	f7fe be32 	b.w	26544 <bt_encrypt_le>
}
   278e0:	b009      	add	sp, #36	; 0x24
   278e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000278e4 <legacy_pairing_confirm>:
{
   278e4:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   278e6:	1d07      	adds	r7, r0, #4
{
   278e8:	4604      	mov	r4, r0
   278ea:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   278ec:	210a      	movs	r1, #10
   278ee:	4638      	mov	r0, r7
   278f0:	f7ff fe72 	bl	275d8 <atomic_test_bit>
   278f4:	bb88      	cbnz	r0, 2795a <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   278f6:	2104      	movs	r1, #4
   278f8:	4620      	mov	r0, r4
   278fa:	f7ff fed4 	bl	276a6 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   278fe:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   27900:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   27904:	f7ff fedf 	bl	276c6 <smp_create_pdu.constprop.0>
	if (!buf) {
   27908:	4605      	mov	r5, r0
   2790a:	b1c0      	cbz	r0, 2793e <legacy_pairing_confirm+0x5a>
   2790c:	2110      	movs	r1, #16
   2790e:	300c      	adds	r0, #12
   27910:	f7f1 fe54 	bl	195bc <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   27914:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   27918:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2791a:	9002      	str	r0, [sp, #8]
   2791c:	9301      	str	r3, [sp, #4]
   2791e:	9600      	str	r6, [sp, #0]
   27920:	f104 0310 	add.w	r3, r4, #16
   27924:	f104 0209 	add.w	r2, r4, #9
   27928:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2792c:	f104 0047 	add.w	r0, r4, #71	; 0x47
   27930:	f7ff ff7d 	bl	2782e <smp_c1>
   27934:	4606      	mov	r6, r0
   27936:	b128      	cbz	r0, 27944 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   27938:	4628      	mov	r0, r5
   2793a:	f7f1 fd1d 	bl	19378 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2793e:	2008      	movs	r0, #8
}
   27940:	b005      	add	sp, #20
   27942:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   27944:	4602      	mov	r2, r0
   27946:	4629      	mov	r1, r5
   27948:	4620      	mov	r0, r4
   2794a:	f7ff fe80 	bl	2764e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2794e:	4631      	mov	r1, r6
   27950:	4638      	mov	r0, r7
   27952:	f7ff fe68 	bl	27626 <atomic_clear_bit>
	return 0;
   27956:	2000      	movs	r0, #0
   27958:	e7f2      	b.n	27940 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2795a:	2100      	movs	r1, #0
   2795c:	4638      	mov	r0, r7
   2795e:	f7ff fea2 	bl	276a6 <atomic_set_bit>
	return 0;
   27962:	e7f8      	b.n	27956 <legacy_pairing_confirm+0x72>

00027964 <bt_smp_request_ltk>:
{
   27964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27968:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2796a:	4604      	mov	r4, r0
   2796c:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   27970:	f7ef fc84 	bl	1727c <smp_chan_get>
	if (!smp) {
   27974:	4605      	mov	r5, r0
   27976:	2800      	cmp	r0, #0
   27978:	d07c      	beq.n	27a74 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2797a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2797e:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   27980:	f1b8 0f00 	cmp.w	r8, #0
   27984:	d128      	bne.n	279d8 <bt_smp_request_ltk+0x74>
   27986:	e9dd 3200 	ldrd	r3, r2, [sp]
   2798a:	4313      	orrs	r3, r2
   2798c:	d124      	bne.n	279d8 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2798e:	2103      	movs	r1, #3
   27990:	4630      	mov	r0, r6
   27992:	f7ff fe21 	bl	275d8 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   27996:	b1f8      	cbz	r0, 279d8 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   27998:	2101      	movs	r1, #1
   2799a:	4630      	mov	r0, r6
   2799c:	f7ff fe1c 	bl	275d8 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   279a0:	b1d0      	cbz	r0, 279d8 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   279a2:	7d2c      	ldrb	r4, [r5, #20]
   279a4:	7b6b      	ldrb	r3, [r5, #13]
   279a6:	f105 0147 	add.w	r1, r5, #71	; 0x47
   279aa:	429c      	cmp	r4, r3
   279ac:	bf28      	it	cs
   279ae:	461c      	movcs	r4, r3
   279b0:	4622      	mov	r2, r4
   279b2:	4638      	mov	r0, r7
   279b4:	f001 ff19 	bl	297ea <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   279b8:	2c0f      	cmp	r4, #15
   279ba:	d805      	bhi.n	279c8 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   279bc:	4641      	mov	r1, r8
   279be:	f1c4 0210 	rsb	r2, r4, #16
   279c2:	1938      	adds	r0, r7, r4
   279c4:	f001 ff4b 	bl	2985e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   279c8:	4630      	mov	r0, r6
   279ca:	2101      	movs	r1, #1
   279cc:	f7ff fe6b 	bl	276a6 <atomic_set_bit>
		return true;
   279d0:	2001      	movs	r0, #1
}
   279d2:	b002      	add	sp, #8
   279d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   279d8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   279dc:	b983      	cbnz	r3, 27a00 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   279de:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   279e2:	4642      	mov	r2, r8
   279e4:	2020      	movs	r0, #32
   279e6:	7a21      	ldrb	r1, [r4, #8]
   279e8:	f7f1 f8b4 	bl	18b54 <bt_keys_find>
   279ec:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   279f0:	b930      	cbnz	r0, 27a00 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   279f2:	4642      	mov	r2, r8
   279f4:	2001      	movs	r0, #1
   279f6:	7a21      	ldrb	r1, [r4, #8]
   279f8:	f7f1 f8ac 	bl	18b54 <bt_keys_find>
   279fc:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   27a00:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   27a04:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   27a08:	f1b8 0f00 	cmp.w	r8, #0
   27a0c:	d10c      	bne.n	27a28 <bt_smp_request_ltk+0xc4>
   27a0e:	e9dd 3200 	ldrd	r3, r2, [sp]
   27a12:	4313      	orrs	r3, r2
   27a14:	d108      	bne.n	27a28 <bt_smp_request_ltk+0xc4>
   27a16:	b300      	cbz	r0, 27a5a <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   27a18:	89c3      	ldrh	r3, [r0, #14]
   27a1a:	069a      	lsls	r2, r3, #26
   27a1c:	d505      	bpl.n	27a2a <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   27a1e:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27a20:	f100 011a 	add.w	r1, r0, #26
   27a24:	4622      	mov	r2, r4
   27a26:	e7c4      	b.n	279b2 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   27a28:	b1b8      	cbz	r0, 27a5a <bt_smp_request_ltk+0xf6>
   27a2a:	89c3      	ldrh	r3, [r0, #14]
   27a2c:	07db      	lsls	r3, r3, #31
   27a2e:	d514      	bpl.n	27a5a <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   27a30:	2208      	movs	r2, #8
   27a32:	4669      	mov	r1, sp
   27a34:	3040      	adds	r0, #64	; 0x40
   27a36:	f001 fec8 	bl	297ca <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   27a3a:	b970      	cbnz	r0, 27a5a <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   27a3c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   27a40:	2202      	movs	r2, #2
   27a42:	a908      	add	r1, sp, #32
   27a44:	3048      	adds	r0, #72	; 0x48
   27a46:	f001 fec0 	bl	297ca <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   27a4a:	4680      	mov	r8, r0
   27a4c:	b928      	cbnz	r0, 27a5a <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   27a4e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   27a52:	7b0c      	ldrb	r4, [r1, #12]
   27a54:	314a      	adds	r1, #74	; 0x4a
   27a56:	4622      	mov	r2, r4
   27a58:	e7ab      	b.n	279b2 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27a5a:	210f      	movs	r1, #15
   27a5c:	4630      	mov	r0, r6
   27a5e:	f7ff fdbb 	bl	275d8 <atomic_test_bit>
   27a62:	b120      	cbz	r0, 27a6e <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   27a64:	2202      	movs	r2, #2
   27a66:	2106      	movs	r1, #6
   27a68:	4620      	mov	r0, r4
   27a6a:	f7ec fddb 	bl	14624 <bt_conn_security_changed>
	smp_reset(smp);
   27a6e:	4628      	mov	r0, r5
   27a70:	f7ff fec2 	bl	277f8 <smp_reset>
		return false;
   27a74:	2000      	movs	r0, #0
   27a76:	e7ac      	b.n	279d2 <bt_smp_request_ltk+0x6e>

00027a78 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   27a78:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27a7c:	4770      	bx	lr

00027a7e <bt_smp_dhkey_ready>:
{
   27a7e:	b570      	push	{r4, r5, r6, lr}
   27a80:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   27a82:	2008      	movs	r0, #8
   27a84:	f7ef fb6e 	bl	17164 <smp_find>
	if (smp) {
   27a88:	4605      	mov	r5, r0
   27a8a:	b1e0      	cbz	r0, 27ac6 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   27a8c:	1d06      	adds	r6, r0, #4
   27a8e:	2108      	movs	r1, #8
   27a90:	4630      	mov	r0, r6
   27a92:	f7ff fdc8 	bl	27626 <atomic_clear_bit>
	if (!dhkey) {
   27a96:	b3bc      	cbz	r4, 27b08 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   27a98:	2107      	movs	r1, #7
   27a9a:	f7ff fdc4 	bl	27626 <atomic_clear_bit>
   27a9e:	4623      	mov	r3, r4
   27aa0:	f105 0297 	add.w	r2, r5, #151	; 0x97
   27aa4:	f104 0120 	add.w	r1, r4, #32
   27aa8:	f853 0b04 	ldr.w	r0, [r3], #4
   27aac:	428b      	cmp	r3, r1
   27aae:	f842 0b04 	str.w	r0, [r2], #4
   27ab2:	d1f9      	bne.n	27aa8 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   27ab4:	210a      	movs	r1, #10
   27ab6:	4630      	mov	r0, r6
   27ab8:	f7ff fd8e 	bl	275d8 <atomic_test_bit>
   27abc:	b170      	cbz	r0, 27adc <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27abe:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27ac0:	4630      	mov	r0, r6
   27ac2:	f7ff fdf0 	bl	276a6 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   27ac6:	2007      	movs	r0, #7
   27ac8:	f7ef fb4c 	bl	17164 <smp_find>
		if (smp) {
   27acc:	4604      	mov	r4, r0
   27ace:	b1e8      	cbz	r0, 27b0c <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   27ad0:	f7ef fc0a 	bl	172e8 <smp_dhkey_generate>
			if (err) {
   27ad4:	4601      	mov	r1, r0
   27ad6:	b1c8      	cbz	r0, 27b0c <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   27ad8:	4620      	mov	r0, r4
   27ada:	e012      	b.n	27b02 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   27adc:	2110      	movs	r1, #16
   27ade:	4630      	mov	r0, r6
   27ae0:	f7ff fd7a 	bl	275d8 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27ae4:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   27ae6:	2800      	cmp	r0, #0
   27ae8:	d1ea      	bne.n	27ac0 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   27aea:	4630      	mov	r0, r6
   27aec:	f7ff fd74 	bl	275d8 <atomic_test_bit>
   27af0:	2800      	cmp	r0, #0
   27af2:	d0e8      	beq.n	27ac6 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   27af4:	4628      	mov	r0, r5
   27af6:	f7ef ffaf 	bl	17a58 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   27afa:	4601      	mov	r1, r0
   27afc:	2800      	cmp	r0, #0
   27afe:	d0e2      	beq.n	27ac6 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   27b00:	4628      	mov	r0, r5
   27b02:	f7f0 fb3d 	bl	18180 <smp_error>
   27b06:	e7de      	b.n	27ac6 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   27b08:	210b      	movs	r1, #11
   27b0a:	e7f9      	b.n	27b00 <bt_smp_dhkey_ready+0x82>
}
   27b0c:	bd70      	pop	{r4, r5, r6, pc}

00027b0e <bt_smp_disconnected>:
{
   27b0e:	b570      	push	{r4, r5, r6, lr}
   27b10:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   27b12:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   27b16:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27b1a:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   27b1c:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   27b20:	f7f8 ff2e 	bl	20980 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27b24:	2103      	movs	r1, #3
   27b26:	4620      	mov	r0, r4
   27b28:	f7ff fd56 	bl	275d8 <atomic_test_bit>
   27b2c:	b1a0      	cbz	r0, 27b58 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   27b2e:	2108      	movs	r1, #8
   27b30:	4630      	mov	r0, r6
   27b32:	f7f0 faa7 	bl	18084 <smp_pairing_complete>
	if (keys) {
   27b36:	b13d      	cbz	r5, 27b48 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   27b38:	89eb      	ldrh	r3, [r5, #14]
   27b3a:	b113      	cbz	r3, 27b42 <bt_smp_disconnected+0x34>
   27b3c:	7b6b      	ldrb	r3, [r5, #13]
   27b3e:	079b      	lsls	r3, r3, #30
   27b40:	d502      	bpl.n	27b48 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   27b42:	4628      	mov	r0, r5
   27b44:	f7f1 f8ec 	bl	18d20 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   27b48:	4630      	mov	r0, r6
}
   27b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27b4e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   27b52:	2100      	movs	r1, #0
   27b54:	f001 be83 	b.w	2985e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   27b58:	2101      	movs	r1, #1
   27b5a:	4620      	mov	r0, r4
   27b5c:	f7ff fd3c 	bl	275d8 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27b60:	2800      	cmp	r0, #0
   27b62:	d1e4      	bne.n	27b2e <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27b64:	210f      	movs	r1, #15
   27b66:	4620      	mov	r0, r4
   27b68:	f7ff fd36 	bl	275d8 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   27b6c:	2800      	cmp	r0, #0
   27b6e:	d1de      	bne.n	27b2e <bt_smp_disconnected+0x20>
   27b70:	e7e1      	b.n	27b36 <bt_smp_disconnected+0x28>

00027b72 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   27b72:	b510      	push	{r4, lr}
   27b74:	1e43      	subs	r3, r0, #1
   27b76:	f100 0210 	add.w	r2, r0, #16
   27b7a:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   27b7c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27b80:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   27b84:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27b86:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   27b88:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   27b8a:	d1f7      	bne.n	27b7c <sys_mem_swap.constprop.0+0xa>
	}
}
   27b8c:	bd10      	pop	{r4, pc}

00027b8e <bt_crypto_aes_cmac>:
{
   27b8e:	b570      	push	{r4, r5, r6, lr}
   27b90:	b0c2      	sub	sp, #264	; 0x108
   27b92:	460d      	mov	r5, r1
   27b94:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   27b96:	4601      	mov	r1, r0
   27b98:	aa16      	add	r2, sp, #88	; 0x58
   27b9a:	4668      	mov	r0, sp
{
   27b9c:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   27b9e:	f7fd fe01 	bl	257a4 <tc_cmac_setup>
   27ba2:	b918      	cbnz	r0, 27bac <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   27ba4:	f06f 0004 	mvn.w	r0, #4
}
   27ba8:	b042      	add	sp, #264	; 0x108
   27baa:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   27bac:	4632      	mov	r2, r6
   27bae:	4629      	mov	r1, r5
   27bb0:	4668      	mov	r0, sp
   27bb2:	f7fd fe22 	bl	257fa <tc_cmac_update>
   27bb6:	2800      	cmp	r0, #0
   27bb8:	d0f4      	beq.n	27ba4 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   27bba:	4669      	mov	r1, sp
   27bbc:	4620      	mov	r0, r4
   27bbe:	f7fd fe86 	bl	258ce <tc_cmac_final>
   27bc2:	2800      	cmp	r0, #0
   27bc4:	d0ee      	beq.n	27ba4 <bt_crypto_aes_cmac+0x16>
	return 0;
   27bc6:	2000      	movs	r0, #0
   27bc8:	e7ee      	b.n	27ba8 <bt_crypto_aes_cmac+0x1a>

00027bca <bt_crypto_f4>:
{
   27bca:	b5f0      	push	{r4, r5, r6, r7, lr}
   27bcc:	460e      	mov	r6, r1
   27bce:	4614      	mov	r4, r2
   27bd0:	461d      	mov	r5, r3
   27bd2:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   27bd4:	4601      	mov	r1, r0
   27bd6:	2220      	movs	r2, #32
   27bd8:	a805      	add	r0, sp, #20
{
   27bda:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   27bdc:	f7f1 f8c2 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   27be0:	2220      	movs	r2, #32
   27be2:	4631      	mov	r1, r6
   27be4:	a80d      	add	r0, sp, #52	; 0x34
   27be6:	f7f1 f8bd 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   27bea:	4621      	mov	r1, r4
   27bec:	2210      	movs	r2, #16
   27bee:	a801      	add	r0, sp, #4
	m[64] = z;
   27bf0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   27bf4:	f7f1 f8b6 	bl	18d64 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   27bf8:	463b      	mov	r3, r7
   27bfa:	2241      	movs	r2, #65	; 0x41
   27bfc:	a905      	add	r1, sp, #20
   27bfe:	a801      	add	r0, sp, #4
   27c00:	f7ff ffc5 	bl	27b8e <bt_crypto_aes_cmac>
	if (err) {
   27c04:	4604      	mov	r4, r0
   27c06:	b910      	cbnz	r0, 27c0e <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   27c08:	4638      	mov	r0, r7
   27c0a:	f7ff ffb2 	bl	27b72 <sys_mem_swap.constprop.0>
}
   27c0e:	4620      	mov	r0, r4
   27c10:	b017      	add	sp, #92	; 0x5c
   27c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027c14 <bt_crypto_f6>:
{
   27c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27c18:	4616      	mov	r6, r2
   27c1a:	461d      	mov	r5, r3
   27c1c:	b097      	sub	sp, #92	; 0x5c
   27c1e:	4604      	mov	r4, r0
   27c20:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   27c24:	2210      	movs	r2, #16
   27c26:	a805      	add	r0, sp, #20
{
   27c28:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   27c2a:	f7f1 f89b 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   27c2e:	2210      	movs	r2, #16
   27c30:	4631      	mov	r1, r6
   27c32:	a809      	add	r0, sp, #36	; 0x24
   27c34:	f7f1 f896 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   27c38:	2210      	movs	r2, #16
   27c3a:	4629      	mov	r1, r5
   27c3c:	a80d      	add	r0, sp, #52	; 0x34
   27c3e:	f7f1 f891 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   27c42:	2203      	movs	r2, #3
   27c44:	991e      	ldr	r1, [sp, #120]	; 0x78
   27c46:	a811      	add	r0, sp, #68	; 0x44
   27c48:	f7f1 f88c 	bl	18d64 <sys_memcpy_swap>
	m[51] = a1->type;
   27c4c:	4649      	mov	r1, r9
   27c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   27c52:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   27c56:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   27c5a:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   27c5c:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   27c5e:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   27c60:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   27c62:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   27c66:	f7f1 f87d 	bl	18d64 <sys_memcpy_swap>
	m[58] = a2->type;
   27c6a:	4641      	mov	r1, r8
   27c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27c70:	2206      	movs	r2, #6
	m[58] = a2->type;
   27c72:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   27c76:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27c7a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   27c7e:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   27c82:	888b      	ldrh	r3, [r1, #4]
   27c84:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27c88:	f7f1 f86c 	bl	18d64 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   27c8c:	4621      	mov	r1, r4
   27c8e:	2210      	movs	r2, #16
   27c90:	a801      	add	r0, sp, #4
   27c92:	f7f1 f867 	bl	18d64 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   27c96:	463b      	mov	r3, r7
   27c98:	2241      	movs	r2, #65	; 0x41
   27c9a:	a905      	add	r1, sp, #20
   27c9c:	a801      	add	r0, sp, #4
   27c9e:	f7ff ff76 	bl	27b8e <bt_crypto_aes_cmac>
	if (err) {
   27ca2:	4604      	mov	r4, r0
   27ca4:	b910      	cbnz	r0, 27cac <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   27ca6:	4638      	mov	r0, r7
   27ca8:	f7ff ff63 	bl	27b72 <sys_mem_swap.constprop.0>
}
   27cac:	4620      	mov	r0, r4
   27cae:	b017      	add	sp, #92	; 0x5c
   27cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00027cb4 <fixed_data_unref>:
}
   27cb4:	4770      	bx	lr

00027cb6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   27cb6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   27cb8:	6849      	ldr	r1, [r1, #4]
   27cba:	6809      	ldr	r1, [r1, #0]
   27cbc:	f7f1 b954 	b.w	18f68 <net_buf_alloc_len>

00027cc0 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   27cc0:	f7f8 b84e 	b.w	1fd60 <z_impl_k_queue_get>

00027cc4 <net_buf_simple_push_u8>:
{
   27cc4:	b510      	push	{r4, lr}
   27cc6:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   27cc8:	2101      	movs	r1, #1
   27cca:	f7f1 fc1b 	bl	19504 <net_buf_simple_push>
	*data = val;
   27cce:	7004      	strb	r4, [r0, #0]
}
   27cd0:	bd10      	pop	{r4, pc}

00027cd2 <net_buf_simple_pull_le16>:
{
   27cd2:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   27cd4:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27cd6:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   27cd8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27cda:	f7f1 fc33 	bl	19544 <net_buf_simple_pull>
}
   27cde:	4620      	mov	r0, r4
   27ce0:	bd10      	pop	{r4, pc}

00027ce2 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   27ce2:	6802      	ldr	r2, [r0, #0]
   27ce4:	6880      	ldr	r0, [r0, #8]
}
   27ce6:	1a10      	subs	r0, r2, r0
   27ce8:	4770      	bx	lr

00027cea <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27cea:	8883      	ldrh	r3, [r0, #4]
   27cec:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   27cee:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27cf0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   27cf2:	6803      	ldr	r3, [r0, #0]
   27cf4:	1a5b      	subs	r3, r3, r1
}
   27cf6:	1ad0      	subs	r0, r2, r3
   27cf8:	4770      	bx	lr

00027cfa <net_buf_simple_add_mem>:
{
   27cfa:	b538      	push	{r3, r4, r5, lr}
   27cfc:	460d      	mov	r5, r1
   27cfe:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27d00:	4611      	mov	r1, r2
   27d02:	f7f1 fc5b 	bl	195bc <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27d06:	4622      	mov	r2, r4
   27d08:	4629      	mov	r1, r5
}
   27d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27d0e:	f001 bd6c 	b.w	297ea <memcpy>

00027d12 <net_buf_simple_add_u8>:
{
   27d12:	b510      	push	{r4, lr}
   27d14:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   27d16:	2101      	movs	r1, #1
   27d18:	f7f1 fc50 	bl	195bc <net_buf_simple_add>
	*u8 = val;
   27d1c:	7004      	strb	r4, [r0, #0]
}
   27d1e:	bd10      	pop	{r4, pc}

00027d20 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27d22:	ab0b      	add	r3, sp, #44	; 0x2c
   27d24:	9305      	str	r3, [sp, #20]
   27d26:	9303      	str	r3, [sp, #12]
   27d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27d2a:	2201      	movs	r2, #1
   27d2c:	9302      	str	r3, [sp, #8]
   27d2e:	2300      	movs	r3, #0
   27d30:	4618      	mov	r0, r3
   27d32:	e9cd 3300 	strd	r3, r3, [sp]
   27d36:	f7e6 fb17 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   27d3a:	b007      	add	sp, #28
   27d3c:	f85d fb04 	ldr.w	pc, [sp], #4

00027d40 <adc_context_on_timer_expired>:
{
   27d40:	b410      	push	{r4}
   27d42:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   27d44:	3808      	subs	r0, #8
   27d46:	e8d0 2fef 	ldaex	r2, [r0]
   27d4a:	1c51      	adds	r1, r2, #1
   27d4c:	e8c0 1fe4 	stlex	r4, r1, [r0]
   27d50:	2c00      	cmp	r4, #0
   27d52:	d1f8      	bne.n	27d46 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   27d54:	b912      	cbnz	r2, 27d5c <adc_context_on_timer_expired+0x1c>
}
   27d56:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   27d58:	f7f1 bc72 	b.w	19640 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   27d5c:	f06f 020f 	mvn.w	r2, #15
}
   27d60:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   27d62:	669a      	str	r2, [r3, #104]	; 0x68
}
   27d64:	4770      	bx	lr

00027d66 <set_on_state>:
	__asm__ volatile(
   27d66:	f04f 0320 	mov.w	r3, #32
   27d6a:	f3ef 8211 	mrs	r2, BASEPRI
   27d6e:	f383 8812 	msr	BASEPRI_MAX, r3
   27d72:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   27d76:	6803      	ldr	r3, [r0, #0]
   27d78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   27d7c:	f043 0302 	orr.w	r3, r3, #2
   27d80:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   27d82:	f382 8811 	msr	BASEPRI, r2
   27d86:	f3bf 8f6f 	isb	sy
}
   27d8a:	4770      	bx	lr

00027d8c <async_start>:
{
   27d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d8e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   27d90:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   27d92:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   27d94:	f04f 0520 	mov.w	r5, #32
   27d98:	f3ef 8611 	mrs	r6, BASEPRI
   27d9c:	f385 8812 	msr	BASEPRI_MAX, r5
   27da0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   27da4:	250c      	movs	r5, #12
   27da6:	4369      	muls	r1, r5
   27da8:	440c      	add	r4, r1
   27daa:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   27dae:	f005 0c07 	and.w	ip, r5, #7
   27db2:	f1bc 0f01 	cmp.w	ip, #1
   27db6:	d10c      	bne.n	27dd2 <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   27db8:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   27dbc:	f386 8811 	msr	BASEPRI, r6
   27dc0:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   27dc4:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   27dc8:	6843      	ldr	r3, [r0, #4]
   27dca:	585b      	ldr	r3, [r3, r1]
   27dcc:	4798      	blx	r3
	return 0;
   27dce:	2000      	movs	r0, #0
}
   27dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   27dd2:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   27dd6:	42af      	cmp	r7, r5
   27dd8:	f386 8811 	msr	BASEPRI, r6
   27ddc:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   27de0:	bf0c      	ite	eq
   27de2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   27de6:	f04f 30ff 	movne.w	r0, #4294967295
   27dea:	e7f1      	b.n	27dd0 <async_start+0x44>

00027dec <api_start>:
{
   27dec:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   27dee:	2480      	movs	r4, #128	; 0x80
   27df0:	9400      	str	r4, [sp, #0]
   27df2:	f7ff ffcb 	bl	27d8c <async_start>
}
   27df6:	b002      	add	sp, #8
   27df8:	bd10      	pop	{r4, pc}

00027dfa <onoff_started_callback>:
	return &data->mgr[type];
   27dfa:	6900      	ldr	r0, [r0, #16]
   27dfc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   27dfe:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   27e02:	2100      	movs	r1, #0
   27e04:	4710      	bx	r2

00027e06 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   27e06:	2003      	movs	r0, #3
   27e08:	f7f4 be9a 	b.w	1cb40 <nrfx_clock_start>

00027e0c <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   27e0c:	2002      	movs	r0, #2
   27e0e:	f7f4 be97 	b.w	1cb40 <nrfx_clock_start>

00027e12 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   27e12:	2000      	movs	r0, #0
   27e14:	f7f4 be94 	b.w	1cb40 <nrfx_clock_start>

00027e18 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   27e18:	2003      	movs	r0, #3
   27e1a:	f7f4 bf0f 	b.w	1cc3c <nrfx_clock_stop>

00027e1e <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   27e1e:	2002      	movs	r0, #2
   27e20:	f7f4 bf0c 	b.w	1cc3c <nrfx_clock_stop>

00027e24 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   27e24:	2000      	movs	r0, #0
   27e26:	f7f4 bf09 	b.w	1cc3c <nrfx_clock_stop>

00027e2a <blocking_start_callback>:
{
   27e2a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   27e2c:	f7f8 b802 	b.w	1fe34 <z_impl_k_sem_give>

00027e30 <api_stop>:
	return stop(dev, subsys, CTX_API);
   27e30:	2280      	movs	r2, #128	; 0x80
   27e32:	f7f1 be57 	b.w	19ae4 <stop>

00027e36 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e36:	6843      	ldr	r3, [r0, #4]
}
   27e38:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e3a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   27e3c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   27e3e:	600b      	str	r3, [r1, #0]
}
   27e40:	4770      	bx	lr

00027e42 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e42:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   27e44:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e48:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   27e4a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   27e4e:	6098      	str	r0, [r3, #8]
}
   27e50:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   27e52:	60d9      	str	r1, [r3, #12]
   27e54:	4770      	bx	lr

00027e56 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e56:	6843      	ldr	r3, [r0, #4]
}
   27e58:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e5a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   27e5c:	6099      	str	r1, [r3, #8]
}
   27e5e:	4770      	bx	lr

00027e60 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e60:	6843      	ldr	r3, [r0, #4]
}
   27e62:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e64:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   27e66:	60d9      	str	r1, [r3, #12]
}
   27e68:	4770      	bx	lr

00027e6a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27e6a:	6843      	ldr	r3, [r0, #4]
   27e6c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   27e6e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   27e70:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   27e74:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   27e76:	6090      	str	r0, [r2, #8]
}
   27e78:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   27e7a:	60d3      	str	r3, [r2, #12]
   27e7c:	4770      	bx	lr

00027e7e <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   27e7e:	2200      	movs	r2, #0
   27e80:	2101      	movs	r1, #1
   27e82:	200a      	movs	r0, #10
   27e84:	f7e8 b97e 	b.w	10184 <z_arm_irq_priority_set>

00027e88 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   27e88:	b510      	push	{r4, lr}
	while (*count) {
   27e8a:	680b      	ldr	r3, [r1, #0]
   27e8c:	b913      	cbnz	r3, 27e94 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   27e8e:	4618      	mov	r0, r3
	*buf_len = 0;
   27e90:	6013      	str	r3, [r2, #0]
	return NULL;
   27e92:	e005      	b.n	27ea0 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   27e94:	6803      	ldr	r3, [r0, #0]
   27e96:	685c      	ldr	r4, [r3, #4]
   27e98:	b11c      	cbz	r4, 27ea2 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   27e9a:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   27e9c:	6803      	ldr	r3, [r0, #0]
   27e9e:	6818      	ldr	r0, [r3, #0]
}
   27ea0:	bd10      	pop	{r4, pc}
		++(*current);
   27ea2:	3308      	adds	r3, #8
   27ea4:	6003      	str	r3, [r0, #0]
		--(*count);
   27ea6:	680b      	ldr	r3, [r1, #0]
   27ea8:	3b01      	subs	r3, #1
   27eaa:	600b      	str	r3, [r1, #0]
   27eac:	e7ed      	b.n	27e8a <spi_context_get_next_buf.constprop.0+0x2>

00027eae <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27eae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27eb0:	ab0b      	add	r3, sp, #44	; 0x2c
   27eb2:	9305      	str	r3, [sp, #20]
   27eb4:	9303      	str	r3, [sp, #12]
   27eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27eb8:	2201      	movs	r2, #1
   27eba:	9302      	str	r3, [sp, #8]
   27ebc:	2300      	movs	r3, #0
   27ebe:	4618      	mov	r0, r3
   27ec0:	e9cd 3300 	strd	r3, r3, [sp]
   27ec4:	f7e6 fa50 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   27ec8:	b007      	add	sp, #28
   27eca:	f85d fb04 	ldr.w	pc, [sp], #4

00027ece <_spi_context_cs_control>:
{
   27ece:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   27ed0:	6803      	ldr	r3, [r0, #0]
{
   27ed2:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   27ed4:	b1e3      	cbz	r3, 27f10 <_spi_context_cs_control+0x42>
   27ed6:	6898      	ldr	r0, [r3, #8]
   27ed8:	b1d0      	cbz	r0, 27f10 <_spi_context_cs_control+0x42>
   27eda:	6805      	ldr	r5, [r0, #0]
   27edc:	b1c5      	cbz	r5, 27f10 <_spi_context_cs_control+0x42>
		if (on) {
   27ede:	b149      	cbz	r1, 27ef4 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   27ee0:	2101      	movs	r1, #1
   27ee2:	f7f2 f9e9 	bl	1a2b8 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   27ee6:	6823      	ldr	r3, [r4, #0]
   27ee8:	689b      	ldr	r3, [r3, #8]
   27eea:	6898      	ldr	r0, [r3, #8]
}
   27eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   27ef0:	f001 bb72 	b.w	295d8 <z_impl_k_busy_wait>
			if (!force_off &&
   27ef4:	b912      	cbnz	r2, 27efc <_spi_context_cs_control+0x2e>
   27ef6:	889b      	ldrh	r3, [r3, #4]
   27ef8:	04db      	lsls	r3, r3, #19
   27efa:	d409      	bmi.n	27f10 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   27efc:	6880      	ldr	r0, [r0, #8]
   27efe:	f001 fb6b 	bl	295d8 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   27f02:	6823      	ldr	r3, [r4, #0]
   27f04:	2100      	movs	r1, #0
   27f06:	6898      	ldr	r0, [r3, #8]
}
   27f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   27f0c:	f7f2 b9d4 	b.w	1a2b8 <gpio_pin_set_dt.isra.0>
}
   27f10:	bd38      	pop	{r3, r4, r5, pc}

00027f12 <spi_context_unlock_unconditionally>:
{
   27f12:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   27f14:	2201      	movs	r2, #1
   27f16:	2100      	movs	r1, #0
{
   27f18:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   27f1a:	f7ff ffd8 	bl	27ece <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   27f1e:	69a3      	ldr	r3, [r4, #24]
   27f20:	b933      	cbnz	r3, 27f30 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   27f22:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   27f24:	f104 0010 	add.w	r0, r4, #16
}
   27f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27f2c:	f7f7 bf82 	b.w	1fe34 <z_impl_k_sem_give>
   27f30:	bd10      	pop	{r4, pc}

00027f32 <spi_nrfx_release>:
{
   27f32:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   27f34:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   27f36:	6803      	ldr	r3, [r0, #0]
   27f38:	428b      	cmp	r3, r1
   27f3a:	d106      	bne.n	27f4a <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   27f3c:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   27f40:	b934      	cbnz	r4, 27f50 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   27f42:	f7ff ffe6 	bl	27f12 <spi_context_unlock_unconditionally>
	return 0;
   27f46:	4620      	mov	r0, r4
}
   27f48:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27f4a:	f06f 0015 	mvn.w	r0, #21
   27f4e:	e7fb      	b.n	27f48 <spi_nrfx_release+0x16>
		return -EBUSY;
   27f50:	f06f 000f 	mvn.w	r0, #15
   27f54:	e7f8      	b.n	27f48 <spi_nrfx_release+0x16>

00027f56 <k_sem_give>:
   27f56:	f7f7 bf6d 	b.w	1fe34 <z_impl_k_sem_give>

00027f5a <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   27f5a:	b918      	cbnz	r0, 27f64 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   27f5c:	f101 0030 	add.w	r0, r1, #48	; 0x30
   27f60:	f7ff bff9 	b.w	27f56 <k_sem_give>
}
   27f64:	4770      	bx	lr

00027f66 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27f66:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27f68:	ab0b      	add	r3, sp, #44	; 0x2c
   27f6a:	9305      	str	r3, [sp, #20]
   27f6c:	9303      	str	r3, [sp, #12]
   27f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27f70:	9302      	str	r3, [sp, #8]
   27f72:	2300      	movs	r3, #0
   27f74:	4618      	mov	r0, r3
   27f76:	e9cd 3300 	strd	r3, r3, [sp]
   27f7a:	f7e6 f9f5 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   27f7e:	b007      	add	sp, #28
   27f80:	f85d fb04 	ldr.w	pc, [sp], #4

00027f84 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   27f84:	f04f 32ff 	mov.w	r2, #4294967295
   27f88:	f04f 33ff 	mov.w	r3, #4294967295
   27f8c:	3018      	adds	r0, #24
   27f8e:	f7f7 bf95 	b.w	1febc <z_impl_k_sem_take>

00027f92 <qspi_trans_lock.isra.0>:
   27f92:	f04f 32ff 	mov.w	r2, #4294967295
   27f96:	f04f 33ff 	mov.w	r3, #4294967295
   27f9a:	f7f7 bf8f 	b.w	1febc <z_impl_k_sem_take>

00027f9e <qspi_nor_write_protection_set>:
{
   27f9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   27fa0:	2200      	movs	r2, #0
   27fa2:	4291      	cmp	r1, r2
   27fa4:	bf0c      	ite	eq
   27fa6:	2306      	moveq	r3, #6
   27fa8:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   27faa:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   27fac:	e9cd 2201 	strd	r2, r2, [sp, #4]
   27fb0:	9203      	str	r2, [sp, #12]
   27fb2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   27fb6:	f7f2 fce7 	bl	1a988 <qspi_send_cmd>
		ret = -EIO;
   27fba:	2800      	cmp	r0, #0
}
   27fbc:	bf18      	it	ne
   27fbe:	f06f 0004 	mvnne.w	r0, #4
   27fc2:	b005      	add	sp, #20
   27fc4:	f85d fb04 	ldr.w	pc, [sp], #4

00027fc8 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   27fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   27fca:	23ff      	movs	r3, #255	; 0xff
   27fcc:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   27fd0:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   27fd4:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   27fd6:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   27fd8:	2301      	movs	r3, #1
   27fda:	e9cd 3202 	strd	r3, r2, [sp, #8]
   27fde:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   27fe0:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   27fe2:	f88d 300c 	strb.w	r3, [sp, #12]
   27fe6:	ab01      	add	r3, sp, #4
   27fe8:	9204      	str	r2, [sp, #16]
   27fea:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   27fec:	f7f2 fccc 	bl	1a988 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   27ff0:	2800      	cmp	r0, #0
   27ff2:	bfa8      	it	ge
   27ff4:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   27ff8:	b007      	add	sp, #28
   27ffa:	f85d fb04 	ldr.w	pc, [sp], #4

00027ffe <is_regular_addr_valid>:
{
   27ffe:	b538      	push	{r3, r4, r5, lr}
   28000:	4605      	mov	r5, r0
   28002:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   28004:	f000 fc6a 	bl	288dc <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   28008:	2d00      	cmp	r5, #0
   2800a:	db07      	blt.n	2801c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2800c:	42a8      	cmp	r0, r5
   2800e:	d905      	bls.n	2801c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   28010:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   28012:	4284      	cmp	r4, r0
   28014:	bf8c      	ite	hi
   28016:	2000      	movhi	r0, #0
   28018:	2001      	movls	r0, #1
}
   2801a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2801c:	2000      	movs	r0, #0
   2801e:	e7fc      	b.n	2801a <is_regular_addr_valid+0x1c>

00028020 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28020:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28022:	ab0b      	add	r3, sp, #44	; 0x2c
   28024:	9305      	str	r3, [sp, #20]
   28026:	9303      	str	r3, [sp, #12]
   28028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2802a:	2201      	movs	r2, #1
   2802c:	9302      	str	r3, [sp, #8]
   2802e:	2300      	movs	r3, #0
   28030:	4618      	mov	r0, r3
   28032:	e9cd 3300 	strd	r3, r3, [sp]
   28036:	f7e6 f997 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   2803a:	b007      	add	sp, #28
   2803c:	f85d fb04 	ldr.w	pc, [sp], #4

00028040 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   28040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28042:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   28044:	2300      	movs	r3, #0
{
   28046:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   28048:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2804a:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2804c:	60a3      	str	r3, [r4, #8]
{
   2804e:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   28050:	6913      	ldr	r3, [r2, #16]
   28052:	4669      	mov	r1, sp
   28054:	aa01      	add	r2, sp, #4
   28056:	4798      	blx	r3

	while (layout_size--) {
   28058:	9b01      	ldr	r3, [sp, #4]
   2805a:	1e5a      	subs	r2, r3, #1
   2805c:	9201      	str	r2, [sp, #4]
   2805e:	b91b      	cbnz	r3, 28068 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   28060:	f06f 0015 	mvn.w	r0, #21
}
   28064:	b003      	add	sp, #12
   28066:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   28068:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2806a:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2806c:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2806e:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   28070:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   28072:	b985      	cbnz	r5, 28096 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   28074:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   28076:	f8d0 c000 	ldr.w	ip, [r0]
   2807a:	4563      	cmp	r3, ip
   2807c:	bf28      	it	cs
   2807e:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   28080:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   28084:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   28086:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   28088:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2808a:	6802      	ldr	r2, [r0, #0]
   2808c:	429a      	cmp	r2, r3
   2808e:	d806      	bhi.n	2809e <flash_get_page_info+0x5e>
		layout++;
   28090:	3008      	adds	r0, #8
   28092:	9000      	str	r0, [sp, #0]
   28094:	e7e0      	b.n	28058 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   28096:	1a6b      	subs	r3, r5, r1
   28098:	fbb3 f3f7 	udiv	r3, r3, r7
   2809c:	e7eb      	b.n	28076 <flash_get_page_info+0x36>
			return 0;
   2809e:	2000      	movs	r0, #0
   280a0:	e7e0      	b.n	28064 <flash_get_page_info+0x24>

000280a2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   280a2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   280a4:	2200      	movs	r2, #0
   280a6:	f7ff bfcb 	b.w	28040 <flash_get_page_info>

000280aa <uarte_nrfx_config_get>:
{
   280aa:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   280ac:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   280ae:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   280b2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   280b6:	2000      	movs	r0, #0
   280b8:	4770      	bx	lr

000280ba <uarte_nrfx_err_check>:
	return config->uarte_regs;
   280ba:	6843      	ldr	r3, [r0, #4]
   280bc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   280be:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   280c2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   280c6:	4770      	bx	lr

000280c8 <tx_start>:
{
   280c8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   280ca:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   280cc:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   280ce:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   280d2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   280d6:	2200      	movs	r2, #0
   280d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   280dc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   280e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   280e4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   280e8:	6862      	ldr	r2, [r4, #4]
   280ea:	06d2      	lsls	r2, r2, #27
   280ec:	d511      	bpl.n	28112 <tx_start+0x4a>
	if (data->async) {
   280ee:	6902      	ldr	r2, [r0, #16]
   280f0:	68d2      	ldr	r2, [r2, #12]
   280f2:	b12a      	cbz	r2, 28100 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   280f4:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   280f8:	f041 0101 	orr.w	r1, r1, #1
   280fc:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28100:	2108      	movs	r1, #8
	return config->uarte_regs;
   28102:	6842      	ldr	r2, [r0, #4]
   28104:	6812      	ldr	r2, [r2, #0]
   28106:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2810a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2810e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28112:	2201      	movs	r2, #1
   28114:	609a      	str	r2, [r3, #8]
}
   28116:	bd10      	pop	{r4, pc}

00028118 <user_callback>:
	if (data->async->user_callback) {
   28118:	6903      	ldr	r3, [r0, #16]
   2811a:	68da      	ldr	r2, [r3, #12]
   2811c:	6813      	ldr	r3, [r2, #0]
   2811e:	b10b      	cbz	r3, 28124 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   28120:	6852      	ldr	r2, [r2, #4]
   28122:	4718      	bx	r3
}
   28124:	4770      	bx	lr

00028126 <notify_uart_rx_rdy>:
{
   28126:	b570      	push	{r4, r5, r6, lr}
   28128:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2812a:	6906      	ldr	r6, [r0, #16]
{
   2812c:	4604      	mov	r4, r0
   2812e:	460d      	mov	r5, r1
	struct uart_event evt = {
   28130:	2214      	movs	r2, #20
   28132:	2100      	movs	r1, #0
   28134:	a801      	add	r0, sp, #4
   28136:	f001 fb92 	bl	2985e <memset>
   2813a:	2302      	movs	r3, #2
   2813c:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   28140:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   28142:	4620      	mov	r0, r4
	struct uart_event evt = {
   28144:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   28146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   28148:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2814a:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2814e:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   28150:	f7ff ffe2 	bl	28118 <user_callback>
}
   28154:	b006      	add	sp, #24
   28156:	bd70      	pop	{r4, r5, r6, pc}

00028158 <rx_buf_release>:
{
   28158:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2815a:	680e      	ldr	r6, [r1, #0]
{
   2815c:	4605      	mov	r5, r0
   2815e:	460c      	mov	r4, r1
   28160:	b086      	sub	sp, #24
	if (*buf) {
   28162:	b17e      	cbz	r6, 28184 <rx_buf_release+0x2c>
		struct uart_event evt = {
   28164:	2214      	movs	r2, #20
   28166:	2100      	movs	r1, #0
   28168:	a801      	add	r0, sp, #4
   2816a:	f001 fb78 	bl	2985e <memset>
   2816e:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   28170:	4628      	mov	r0, r5
   28172:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   28176:	f88d 3004 	strb.w	r3, [sp, #4]
   2817a:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2817c:	f7ff ffcc 	bl	28118 <user_callback>
		*buf = NULL;
   28180:	2300      	movs	r3, #0
   28182:	6023      	str	r3, [r4, #0]
}
   28184:	b006      	add	sp, #24
   28186:	bd70      	pop	{r4, r5, r6, pc}

00028188 <notify_rx_disable>:
{
   28188:	b510      	push	{r4, lr}
   2818a:	b086      	sub	sp, #24
   2818c:	4604      	mov	r4, r0
	struct uart_event evt = {
   2818e:	2214      	movs	r2, #20
   28190:	2100      	movs	r1, #0
   28192:	a801      	add	r0, sp, #4
   28194:	f001 fb63 	bl	2985e <memset>
   28198:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2819a:	4620      	mov	r0, r4
   2819c:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2819e:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   281a2:	f7ff ffb9 	bl	28118 <user_callback>
}
   281a6:	b006      	add	sp, #24
   281a8:	bd10      	pop	{r4, pc}

000281aa <uarte_nrfx_rx_buf_rsp>:
{
   281aa:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   281ac:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   281ae:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   281b0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   281b2:	f04f 0020 	mov.w	r0, #32
   281b6:	f3ef 8611 	mrs	r6, BASEPRI
   281ba:	f380 8812 	msr	BASEPRI_MAX, r0
   281be:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   281c2:	68ec      	ldr	r4, [r5, #12]
   281c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   281c6:	b198      	cbz	r0, 281f0 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   281c8:	6e60      	ldr	r0, [r4, #100]	; 0x64
   281ca:	b9a0      	cbnz	r0, 281f6 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   281cc:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   281ce:	68ec      	ldr	r4, [r5, #12]
   281d0:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   281d2:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   281d6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   281da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   281de:	f042 0220 	orr.w	r2, r2, #32
   281e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   281e6:	f386 8811 	msr	BASEPRI, r6
   281ea:	f3bf 8f6f 	isb	sy
}
   281ee:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   281f0:	f06f 000c 	mvn.w	r0, #12
   281f4:	e7f7      	b.n	281e6 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   281f6:	f06f 000f 	mvn.w	r0, #15
   281fa:	e7f4      	b.n	281e6 <uarte_nrfx_rx_buf_rsp+0x3c>

000281fc <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   281fc:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   281fe:	68d8      	ldr	r0, [r3, #12]
   28200:	b120      	cbz	r0, 2820c <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   28202:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   28204:	68db      	ldr	r3, [r3, #12]
	return 0;
   28206:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   28208:	605a      	str	r2, [r3, #4]
	return 0;
   2820a:	4770      	bx	lr
		return -ENOTSUP;
   2820c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   28210:	4770      	bx	lr

00028212 <uarte_nrfx_poll_in>:
{
   28212:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   28214:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   28216:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   28218:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2821a:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2821c:	b960      	cbnz	r0, 28238 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2821e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   28222:	b164      	cbz	r4, 2823e <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   28224:	6992      	ldr	r2, [r2, #24]
   28226:	7812      	ldrb	r2, [r2, #0]
   28228:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2822a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2822e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28232:	2201      	movs	r2, #1
   28234:	601a      	str	r2, [r3, #0]
}
   28236:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   28238:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2823c:	e7fb      	b.n	28236 <uarte_nrfx_poll_in+0x24>
		return -1;
   2823e:	f04f 30ff 	mov.w	r0, #4294967295
   28242:	e7f8      	b.n	28236 <uarte_nrfx_poll_in+0x24>

00028244 <uarte_nrfx_rx_disable>:
{
   28244:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   28246:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   28248:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2824a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2824c:	68eb      	ldr	r3, [r5, #12]
   2824e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   28250:	b1ba      	cbz	r2, 28282 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   28252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   28254:	b153      	cbz	r3, 2826c <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   28256:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2825a:	f023 0320 	bic.w	r3, r3, #32
   2825e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28262:	2300      	movs	r3, #0
   28264:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   28268:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2826c:	68e8      	ldr	r0, [r5, #12]
   2826e:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   28270:	f001 f9e4 	bl	2963c <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   28274:	2000      	movs	r0, #0
   28276:	68eb      	ldr	r3, [r5, #12]
   28278:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2827c:	2301      	movs	r3, #1
   2827e:	6063      	str	r3, [r4, #4]
}
   28280:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   28282:	f06f 000d 	mvn.w	r0, #13
   28286:	e7fb      	b.n	28280 <uarte_nrfx_rx_disable+0x3c>

00028288 <setup_tx_cache>:
{
   28288:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2828a:	68c3      	ldr	r3, [r0, #12]
   2828c:	68da      	ldr	r2, [r3, #12]
   2828e:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   28290:	1a52      	subs	r2, r2, r1
   28292:	d00f      	beq.n	282b4 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   28294:	2a08      	cmp	r2, #8
   28296:	bf28      	it	cs
   28298:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2829a:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2829c:	68c3      	ldr	r3, [r0, #12]
   2829e:	6999      	ldr	r1, [r3, #24]
   282a0:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   282a2:	68c3      	ldr	r3, [r0, #12]
   282a4:	6898      	ldr	r0, [r3, #8]
   282a6:	69d9      	ldr	r1, [r3, #28]
   282a8:	4401      	add	r1, r0
   282aa:	6998      	ldr	r0, [r3, #24]
   282ac:	f001 fa9d 	bl	297ea <memcpy>
	return true;
   282b0:	2001      	movs	r0, #1
}
   282b2:	bd08      	pop	{r3, pc}
		return false;
   282b4:	4610      	mov	r0, r2
   282b6:	e7fc      	b.n	282b2 <setup_tx_cache+0x2a>

000282b8 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   282b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   282ba:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   282bc:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   282be:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   282c0:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   282c4:	b1f1      	cbz	r1, 28304 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   282c6:	2100      	movs	r1, #0
   282c8:	4618      	mov	r0, r3
   282ca:	f001 fac8 	bl	2985e <memset>
   282ce:	4603      	mov	r3, r0
   282d0:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   282d2:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   282d6:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   282d8:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   282da:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   282de:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   282e2:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   282e6:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   282e8:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   282ec:	2800      	cmp	r0, #0
   282ee:	d0fb      	beq.n	282e8 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   282f0:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   282f4:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   282f8:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   282fc:	b92b      	cbnz	r3, 2830a <rx_flush.isra.0+0x52>
			return rx_amount;
   282fe:	b2c0      	uxtb	r0, r0
}
   28300:	b002      	add	sp, #8
   28302:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   28304:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   28306:	4669      	mov	r1, sp
   28308:	e7e3      	b.n	282d2 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2830a:	4285      	cmp	r5, r0
   2830c:	d1f7      	bne.n	282fe <rx_flush.isra.0+0x46>
   2830e:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   28310:	4293      	cmp	r3, r2
   28312:	d101      	bne.n	28318 <rx_flush.isra.0+0x60>
	return 0;
   28314:	2000      	movs	r0, #0
   28316:	e7f3      	b.n	28300 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   28318:	f813 1b01 	ldrb.w	r1, [r3], #1
   2831c:	2900      	cmp	r1, #0
   2831e:	d0f7      	beq.n	28310 <rx_flush.isra.0+0x58>
   28320:	e7ed      	b.n	282fe <rx_flush.isra.0+0x46>

00028322 <async_uart_release>:
{
   28322:	b570      	push	{r4, r5, r6, lr}
   28324:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   28326:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   28328:	f04f 0320 	mov.w	r3, #32
   2832c:	f3ef 8611 	mrs	r6, BASEPRI
   28330:	f383 8812 	msr	BASEPRI_MAX, r3
   28334:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   28338:	68d0      	ldr	r0, [r2, #12]
   2833a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2833e:	ea23 0301 	bic.w	r3, r3, r1
   28342:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   28346:	68d5      	ldr	r5, [r2, #12]
   28348:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2834c:	b973      	cbnz	r3, 2836c <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2834e:	2902      	cmp	r1, #2
   28350:	d107      	bne.n	28362 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   28352:	2205      	movs	r2, #5
   28354:	6860      	ldr	r0, [r4, #4]
   28356:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2835a:	f7ff ffad 	bl	282b8 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2835e:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28362:	2200      	movs	r2, #0
	return config->uarte_regs;
   28364:	6863      	ldr	r3, [r4, #4]
   28366:	681b      	ldr	r3, [r3, #0]
   28368:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2836c:	f386 8811 	msr	BASEPRI, r6
   28370:	f3bf 8f6f 	isb	sy
}
   28374:	bd70      	pop	{r4, r5, r6, pc}

00028376 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   28376:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   28378:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2837a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2837e:	b940      	cbnz	r0, 28392 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   28380:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28382:	079b      	lsls	r3, r3, #30
   28384:	d406      	bmi.n	28394 <is_tx_ready.isra.0+0x1e>
   28386:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2838a:	3800      	subs	r0, #0
   2838c:	bf18      	it	ne
   2838e:	2001      	movne	r0, #1
   28390:	4770      	bx	lr
   28392:	2001      	movs	r0, #1
}
   28394:	4770      	bx	lr

00028396 <start_tx_locked>:
{
   28396:	b510      	push	{r4, lr}
   28398:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2839a:	6840      	ldr	r0, [r0, #4]
   2839c:	f7ff ffeb 	bl	28376 <is_tx_ready.isra.0>
   283a0:	68cb      	ldr	r3, [r1, #12]
   283a2:	b918      	cbnz	r0, 283ac <start_tx_locked+0x16>
		data->async->pending_tx = true;
   283a4:	2201      	movs	r2, #1
   283a6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   283aa:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   283ac:	2200      	movs	r2, #0
   283ae:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   283b2:	f04f 32ff 	mov.w	r2, #4294967295
   283b6:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   283b8:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   283ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   283be:	68cb      	ldr	r3, [r1, #12]
}
   283c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   283c4:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   283c8:	f7ff be7e 	b.w	280c8 <tx_start>

000283cc <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   283cc:	b510      	push	{r4, lr}
   283ce:	4604      	mov	r4, r0
   283d0:	2200      	movs	r2, #0
   283d2:	2101      	movs	r1, #1
   283d4:	200b      	movs	r0, #11
   283d6:	f7e7 fed5 	bl	10184 <z_arm_irq_priority_set>
   283da:	200b      	movs	r0, #11
   283dc:	f7e7 fea2 	bl	10124 <arch_irq_enable>
   283e0:	4620      	mov	r0, r4
   283e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   283e6:	f7f3 b833 	b.w	1b450 <uarte_instance_init.constprop.0>

000283ea <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   283ea:	b510      	push	{r4, lr}
   283ec:	4604      	mov	r4, r0
   283ee:	2200      	movs	r2, #0
   283f0:	2101      	movs	r1, #1
   283f2:	2008      	movs	r0, #8
   283f4:	f7e7 fec6 	bl	10184 <z_arm_irq_priority_set>
   283f8:	2008      	movs	r0, #8
   283fa:	f7e7 fe93 	bl	10124 <arch_irq_enable>
   283fe:	4620      	mov	r0, r4
   28400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28404:	f7f3 b824 	b.w	1b450 <uarte_instance_init.constprop.0>

00028408 <rx_timeout>:
{
   28408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2840a:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2840c:	68e3      	ldr	r3, [r4, #12]
   2840e:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   28412:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   28416:	bb13      	cbnz	r3, 2845e <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   28418:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2841a:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2841c:	6873      	ldr	r3, [r6, #4]
   2841e:	681b      	ldr	r3, [r3, #0]
   28420:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   28424:	68e3      	ldr	r3, [r4, #12]
   28426:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2842a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2842c:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2842e:	bf1f      	itttt	ne
   28430:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   28432:	68e3      	ldrne	r3, [r4, #12]
   28434:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   28436:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   28438:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2843a:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2843e:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   28440:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   28442:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   28444:	da0c      	bge.n	28460 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   28446:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2844a:	68e3      	ldr	r3, [r4, #12]
   2844c:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   28450:	4281      	cmp	r1, r0
   28452:	d80b      	bhi.n	2846c <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   28454:	2210      	movs	r2, #16
	return config->uarte_regs;
   28456:	6873      	ldr	r3, [r6, #4]
   28458:	681b      	ldr	r3, [r3, #0]
   2845a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   28460:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   28464:	eb02 0c01 	add.w	ip, r2, r1
   28468:	4584      	cmp	ip, r0
   2846a:	d904      	bls.n	28476 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2846c:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2846e:	2d00      	cmp	r5, #0
   28470:	ddf0      	ble.n	28454 <rx_timeout+0x4c>
		clipped = true;
   28472:	2701      	movs	r7, #1
   28474:	e005      	b.n	28482 <rx_timeout+0x7a>
	if (len > 0) {
   28476:	2a00      	cmp	r2, #0
   28478:	d0ec      	beq.n	28454 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2847a:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2847e:	428a      	cmp	r2, r1
   28480:	da12      	bge.n	284a8 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   28482:	4629      	mov	r1, r5
   28484:	4630      	mov	r0, r6
   28486:	f7ff fe4e 	bl	28126 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2848a:	68e2      	ldr	r2, [r4, #12]
   2848c:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2848e:	442b      	add	r3, r5
   28490:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   28492:	68e2      	ldr	r2, [r4, #12]
   28494:	6f13      	ldr	r3, [r2, #112]	; 0x70
   28496:	442b      	add	r3, r5
   28498:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2849a:	2f00      	cmp	r7, #0
   2849c:	d0da      	beq.n	28454 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2849e:	68e0      	ldr	r0, [r4, #12]
   284a0:	3080      	adds	r0, #128	; 0x80
   284a2:	f001 f8cb 	bl	2963c <z_impl_k_timer_stop>
}
   284a6:	e7d5      	b.n	28454 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   284a8:	1a52      	subs	r2, r2, r1
   284aa:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   284ac:	e7d2      	b.n	28454 <rx_timeout+0x4c>

000284ae <uarte_nrfx_tx_abort>:
{
   284ae:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   284b0:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   284b2:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   284b4:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   284b6:	68da      	ldr	r2, [r3, #12]
   284b8:	6891      	ldr	r1, [r2, #8]
   284ba:	b151      	cbz	r1, 284d2 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   284bc:	2400      	movs	r4, #0
   284be:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   284c2:	68d8      	ldr	r0, [r3, #12]
   284c4:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   284c6:	f001 f8b9 	bl	2963c <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   284ca:	2301      	movs	r3, #1
	return 0;
   284cc:	4620      	mov	r0, r4
   284ce:	60eb      	str	r3, [r5, #12]
}
   284d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   284d2:	f06f 000d 	mvn.w	r0, #13
   284d6:	e7fb      	b.n	284d0 <uarte_nrfx_tx_abort+0x22>

000284d8 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   284d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   284da:	6818      	ldr	r0, [r3, #0]
   284dc:	f7ff bfe7 	b.w	284ae <uarte_nrfx_tx_abort>

000284e0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   284e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   284e2:	ab0b      	add	r3, sp, #44	; 0x2c
   284e4:	9305      	str	r3, [sp, #20]
   284e6:	9303      	str	r3, [sp, #12]
   284e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   284ea:	9302      	str	r3, [sp, #8]
   284ec:	2300      	movs	r3, #0
   284ee:	4618      	mov	r0, r3
   284f0:	e9cd 3300 	strd	r3, r3, [sp]
   284f4:	f7e5 ff38 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   284f8:	b007      	add	sp, #28
   284fa:	f85d fb04 	ldr.w	pc, [sp], #4

000284fe <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   284fe:	2000      	movs	r0, #0
   28500:	4770      	bx	lr

00028502 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   28502:	b538      	push	{r3, r4, r5, lr}
   28504:	460c      	mov	r4, r1
   28506:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   28508:	f7ea f9f8 	bl	128fc <bt_is_ready>
   2850c:	b128      	cbz	r0, 2851a <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2850e:	4629      	mov	r1, r5
   28510:	4620      	mov	r0, r4
}
   28512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   28516:	f7e9 bbff 	b.w	11d18 <bt_hci_le_rand>
}
   2851a:	f06f 000a 	mvn.w	r0, #10
   2851e:	bd38      	pop	{r3, r4, r5, pc}

00028520 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   28520:	4608      	mov	r0, r1
   28522:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   28524:	4611      	mov	r1, r2
   28526:	f7f4 f949 	bl	1c7bc <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2852a:	2800      	cmp	r0, #0
	}

	return 0;
}
   2852c:	bf18      	it	ne
   2852e:	f06f 0004 	mvnne.w	r0, #4
   28532:	bd08      	pop	{r3, pc}

00028534 <entropy_psa_crypto_rng_init>:
{
   28534:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   28536:	f000 f921 	bl	2877c <psa_crypto_init>
		return -EIO;
   2853a:	2800      	cmp	r0, #0
}
   2853c:	bf18      	it	ne
   2853e:	f06f 0004 	mvnne.w	r0, #4
   28542:	bd08      	pop	{r3, pc}

00028544 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   28544:	4770      	bx	lr

00028546 <sys_clock_cycle_get_32>:
{
   28546:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   28548:	f7f3 fd6c 	bl	1c024 <z_nrf_rtc_timer_read>
}
   2854c:	bd08      	pop	{r3, pc}

0002854e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2854e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   28550:	6843      	ldr	r3, [r0, #4]
   28552:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   28554:	7a05      	ldrb	r5, [r0, #8]
   28556:	6844      	ldr	r4, [r0, #4]
   28558:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2855c:	42a3      	cmp	r3, r4
   2855e:	d302      	bcc.n	28566 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   28560:	f06f 0001 	mvn.w	r0, #1
}
   28564:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   28566:	795c      	ldrb	r4, [r3, #5]
   28568:	428c      	cmp	r4, r1
   2856a:	d001      	beq.n	28570 <pinctrl_lookup_state+0x22>
		(*state)++;
   2856c:	3308      	adds	r3, #8
   2856e:	e7f0      	b.n	28552 <pinctrl_lookup_state+0x4>
			return 0;
   28570:	2000      	movs	r0, #0
   28572:	e7f7      	b.n	28564 <pinctrl_lookup_state+0x16>

00028574 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   28574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28578:	4615      	mov	r5, r2
   2857a:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2857c:	f04f 0901 	mov.w	r9, #1
   28580:	b085      	sub	sp, #20
   28582:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   28586:	45d0      	cmp	r8, sl
   28588:	d103      	bne.n	28592 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2858a:	2000      	movs	r0, #0
}
   2858c:	b005      	add	sp, #20
   2858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28592:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   28596:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2859a:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2859e:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   285a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   285a4:	bf08      	it	eq
   285a6:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   285aa:	2b22      	cmp	r3, #34	; 0x22
   285ac:	f200 8091 	bhi.w	286d2 <pinctrl_configure_pins+0x15e>
   285b0:	e8df f003 	tbb	[pc, r3]
   285b4:	38231e12 	.word	0x38231e12
   285b8:	8f383426 	.word	0x8f383426
   285bc:	3b8f8f8f 	.word	0x3b8f8f8f
   285c0:	8f8f8f65 	.word	0x8f8f8f65
   285c4:	8f8f8f8f 	.word	0x8f8f8f8f
   285c8:	71688f8f 	.word	0x71688f8f
   285cc:	8f8f7774 	.word	0x8f8f7774
   285d0:	83807a8f 	.word	0x83807a8f
   285d4:	8986      	.short	0x8986
   285d6:	8c          	.byte	0x8c
   285d7:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   285d8:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   285dc:	a803      	add	r0, sp, #12
   285de:	9403      	str	r4, [sp, #12]
   285e0:	f7f3 ff58 	bl	1c494 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   285e4:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   285e6:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   285e8:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   285ec:	6083      	str	r3, [r0, #8]
   285ee:	e002      	b.n	285f6 <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   285f0:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   285f4:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   285f6:	46b3      	mov	fp, r6
   285f8:	e01e      	b.n	28638 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   285fa:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   285fe:	e7ed      	b.n	285dc <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   28600:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   28602:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28606:	a803      	add	r0, sp, #12
   28608:	9403      	str	r4, [sp, #12]
   2860a:	f7f3 ff43 	bl	1c494 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2860e:	9b03      	ldr	r3, [sp, #12]
   28610:	f04f 0b01 	mov.w	fp, #1
   28614:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   28618:	60c3      	str	r3, [r0, #12]
   2861a:	e00d      	b.n	28638 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2861c:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   28620:	2601      	movs	r6, #1
   28622:	e7f0      	b.n	28606 <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   28624:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   28628:	e7e4      	b.n	285f4 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2862a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2862e:	2f00      	cmp	r7, #0
   28630:	d1e0      	bne.n	285f4 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   28632:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   28634:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   28636:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   28638:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2863c:	a803      	add	r0, sp, #12
   2863e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   28642:	2a00      	cmp	r2, #0
   28644:	bf1c      	itt	ne
   28646:	2601      	movne	r6, #1
   28648:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2864c:	9301      	str	r3, [sp, #4]
   2864e:	9403      	str	r4, [sp, #12]
   28650:	f7f3 ff20 	bl	1c494 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   28654:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28656:	9b01      	ldr	r3, [sp, #4]
   28658:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2865c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28660:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   28664:	023b      	lsls	r3, r7, #8
   28666:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2866a:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2866e:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   28672:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   28674:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   28678:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2867c:	e783      	b.n	28586 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2867e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   28682:	e7d4      	b.n	2862e <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   28684:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   28688:	f8da 3000 	ldr.w	r3, [sl]
   2868c:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   28690:	2b00      	cmp	r3, #0
   28692:	d0c5      	beq.n	28620 <pinctrl_configure_pins+0xac>
   28694:	e7a2      	b.n	285dc <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   28696:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2869a:	e7f5      	b.n	28688 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2869c:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   286a0:	e7f2      	b.n	28688 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   286a2:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   286a6:	e7ef      	b.n	28688 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   286a8:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   286ac:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   286ae:	f04f 0b00 	mov.w	fp, #0
   286b2:	e7c1      	b.n	28638 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   286b4:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   286b8:	e790      	b.n	285dc <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   286ba:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   286be:	e7f5      	b.n	286ac <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   286c0:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   286c4:	e7f2      	b.n	286ac <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   286c6:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   286ca:	e7ef      	b.n	286ac <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   286cc:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   286d0:	e7ec      	b.n	286ac <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   286d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   286d6:	e759      	b.n	2858c <pinctrl_configure_pins+0x18>

000286d8 <mbox_nrf_register_callback>:
{
   286d8:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   286da:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   286dc:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   286de:	bf9f      	itttt	ls
   286e0:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   286e4:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   286e8:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   286ea:	2000      	movls	r0, #0
		return -EINVAL;
   286ec:	bf88      	it	hi
   286ee:	f06f 0015 	mvnhi.w	r0, #21
}
   286f2:	bd10      	pop	{r4, pc}

000286f4 <mbox_nrf_mtu_get>:
}
   286f4:	2000      	movs	r0, #0
   286f6:	4770      	bx	lr

000286f8 <mbox_nrf_max_channels_get>:
}
   286f8:	2010      	movs	r0, #16
   286fa:	4770      	bx	lr

000286fc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   286fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   286fe:	ab0b      	add	r3, sp, #44	; 0x2c
   28700:	9305      	str	r3, [sp, #20]
   28702:	9303      	str	r3, [sp, #12]
   28704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28706:	2202      	movs	r2, #2
   28708:	9302      	str	r3, [sp, #8]
   2870a:	2300      	movs	r3, #0
   2870c:	4618      	mov	r0, r3
   2870e:	e9cd 3300 	strd	r3, r3, [sp]
   28712:	f7e5 fe29 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   28716:	b007      	add	sp, #28
   28718:	f85d fb04 	ldr.w	pc, [sp], #4

0002871c <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2871c:	2000      	movs	r0, #0
   2871e:	4770      	bx	lr

00028720 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   28720:	2300      	movs	r3, #0
{
   28722:	b570      	push	{r4, r5, r6, lr}
   28724:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   28726:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2872a:	ab03      	add	r3, sp, #12
   2872c:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2872e:	2304      	movs	r3, #4
{
   28730:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   28732:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   28734:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   28736:	b169      	cbz	r1, 28754 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   28738:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2873a:	680b      	ldr	r3, [r1, #0]
   2873c:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2873e:	684b      	ldr	r3, [r1, #4]
   28740:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   28742:	2101      	movs	r1, #1
   28744:	2041      	movs	r0, #65	; 0x41
   28746:	f7f4 f877 	bl	1c838 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2874a:	1e05      	subs	r5, r0, #0
   2874c:	dc04      	bgt.n	28758 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2874e:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   28750:	b008      	add	sp, #32
   28752:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   28754:	2601      	movs	r6, #1
   28756:	e7f4      	b.n	28742 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   28758:	1e23      	subs	r3, r4, #0
   2875a:	bf18      	it	ne
   2875c:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2875e:	2100      	movs	r1, #0
   28760:	e9cd 4300 	strd	r4, r3, [sp]
   28764:	aa04      	add	r2, sp, #16
   28766:	4633      	mov	r3, r6
   28768:	f7f4 f84a 	bl	1c800 <psa_call>
   2876c:	4604      	mov	r4, r0
    psa_close(handle);
   2876e:	4628      	mov	r0, r5
   28770:	f7f4 f870 	bl	1c854 <psa_close>
    if (status < PSA_SUCCESS) {
   28774:	2c00      	cmp	r4, #0
   28776:	dbea      	blt.n	2874e <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   28778:	4620      	mov	r0, r4
   2877a:	e7e9      	b.n	28750 <tfm_platform_ioctl+0x30>

0002877c <psa_crypto_init>:
}
   2877c:	2000      	movs	r0, #0
   2877e:	4770      	bx	lr

00028780 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   28780:	b510      	push	{r4, lr}
   28782:	b088      	sub	sp, #32
   28784:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   28786:	ab05      	add	r3, sp, #20
   28788:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2878a:	230c      	movs	r3, #12
   2878c:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2878e:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   28790:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   28794:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   28798:	eb0d 0103 	add.w	r1, sp, r3
   2879c:	aa03      	add	r2, sp, #12
   2879e:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   287a0:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   287a4:	f7ff ffbc 	bl	28720 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   287a8:	9b00      	ldr	r3, [sp, #0]
   287aa:	6023      	str	r3, [r4, #0]

	return ret;
}
   287ac:	b008      	add	sp, #32
   287ae:	bd10      	pop	{r4, pc}

000287b0 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   287b0:	2300      	movs	r3, #0
{
   287b2:	b510      	push	{r4, lr}
   287b4:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   287b6:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   287ba:	ab05      	add	r3, sp, #20
   287bc:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   287be:	230c      	movs	r3, #12
   287c0:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   287c2:	2304      	movs	r3, #4
{
   287c4:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   287c6:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   287c8:	aa03      	add	r2, sp, #12
   287ca:	eb0d 0103 	add.w	r1, sp, r3
   287ce:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   287d0:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   287d2:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   287d6:	f7ff ffa3 	bl	28720 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   287da:	9b00      	ldr	r3, [sp, #0]
   287dc:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   287de:	b008      	add	sp, #32
   287e0:	bd10      	pop	{r4, pc}

000287e2 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   287e2:	f7f4 b845 	b.w	1c870 <SystemCoreClockUpdate>

000287e6 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   287e6:	4700      	bx	r0

000287e8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   287e8:	f000 bef6 	b.w	295d8 <z_impl_k_busy_wait>

000287ec <nrf_gpio_pin_present_check>:
    switch (port)
   287ec:	0943      	lsrs	r3, r0, #5
   287ee:	d00b      	beq.n	28808 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   287f0:	2b01      	cmp	r3, #1
   287f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   287f6:	bf18      	it	ne
   287f8:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   287fa:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   287fe:	fa23 f000 	lsr.w	r0, r3, r0
}
   28802:	f000 0001 	and.w	r0, r0, #1
   28806:	4770      	bx	lr
    switch (port)
   28808:	f04f 33ff 	mov.w	r3, #4294967295
   2880c:	e7f5      	b.n	287fa <nrf_gpio_pin_present_check+0xe>

0002880e <pin_is_task_output>:
{
   2880e:	b508      	push	{r3, lr}
   28810:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   28812:	f7f4 faaf 	bl	1cd74 <pin_is_output>
   28816:	b110      	cbz	r0, 2881e <pin_is_task_output+0x10>
   28818:	4610      	mov	r0, r2
   2881a:	f7f4 fa95 	bl	1cd48 <pin_in_use_by_te>
}
   2881e:	f000 0001 	and.w	r0, r0, #1
   28822:	bd08      	pop	{r3, pc}

00028824 <nrf_gpio_reconfigure>:
{
   28824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28828:	4617      	mov	r7, r2
   2882a:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2882e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28830:	a801      	add	r0, sp, #4
{
   28832:	460c      	mov	r4, r1
   28834:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28836:	f7f4 fb21 	bl	1ce7c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2883a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2883c:	1e39      	subs	r1, r7, #0
   2883e:	bf18      	it	ne
   28840:	2101      	movne	r1, #1
   28842:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   28846:	1e23      	subs	r3, r4, #0
   28848:	bf18      	it	ne
   2884a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2884c:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2884e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   28852:	bf14      	ite	ne
   28854:	210c      	movne	r1, #12
   28856:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   28858:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2885a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2885e:	bf14      	ite	ne
   28860:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   28864:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   28866:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2886a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2886e:	bf14      	ite	ne
   28870:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   28874:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   28876:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2887a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2887c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   28880:	b104      	cbz	r4, 28884 <nrf_gpio_reconfigure+0x60>
   28882:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   28884:	b10f      	cbz	r7, 2888a <nrf_gpio_reconfigure+0x66>
   28886:	783f      	ldrb	r7, [r7, #0]
   28888:	007f      	lsls	r7, r7, #1
   2888a:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2888c:	b10e      	cbz	r6, 28892 <nrf_gpio_reconfigure+0x6e>
   2888e:	7836      	ldrb	r6, [r6, #0]
   28890:	00b6      	lsls	r6, r6, #2
   28892:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   28894:	b18d      	cbz	r5, 288ba <nrf_gpio_reconfigure+0x96>
   28896:	7829      	ldrb	r1, [r5, #0]
   28898:	0209      	lsls	r1, r1, #8
   2889a:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2889c:	f1b8 0f00 	cmp.w	r8, #0
   288a0:	d003      	beq.n	288aa <nrf_gpio_reconfigure+0x86>
   288a2:	f898 8000 	ldrb.w	r8, [r8]
   288a6:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   288aa:	4321      	orrs	r1, r4
   288ac:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   288b0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   288b4:	b002      	add	sp, #8
   288b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   288ba:	4629      	mov	r1, r5
   288bc:	e7ed      	b.n	2889a <nrf_gpio_reconfigure+0x76>

000288be <nrf_gpio_cfg_sense_set>:
{
   288be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   288c0:	f10d 030f 	add.w	r3, sp, #15
   288c4:	9301      	str	r3, [sp, #4]
   288c6:	2300      	movs	r3, #0
{
   288c8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   288cc:	461a      	mov	r2, r3
   288ce:	4619      	mov	r1, r3
   288d0:	9300      	str	r3, [sp, #0]
   288d2:	f7ff ffa7 	bl	28824 <nrf_gpio_reconfigure>
}
   288d6:	b005      	add	sp, #20
   288d8:	f85d fb04 	ldr.w	pc, [sp], #4

000288dc <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   288dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   288e0:	4770      	bx	lr

000288e2 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   288e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   288e6:	4770      	bx	lr

000288e8 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   288e8:	f44f 7080 	mov.w	r0, #256	; 0x100
   288ec:	4770      	bx	lr

000288ee <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   288ee:	2100      	movs	r1, #0
   288f0:	f7f5 b816 	b.w	1d920 <nrf_gpio_cfg.constprop.0>

000288f4 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   288f4:	2302      	movs	r3, #2
   288f6:	f7f4 bf4f 	b.w	1d798 <qspi_xfer>

000288fa <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   288fa:	2303      	movs	r3, #3
   288fc:	f7f4 bf4c 	b.w	1d798 <qspi_xfer>

00028900 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   28900:	2100      	movs	r1, #0
   28902:	2002      	movs	r0, #2
   28904:	f7f5 ba6e 	b.w	1dde4 <nrfx_qspi_erase>

00028908 <nrf_gpio_pin_clear>:
{
   28908:	b507      	push	{r0, r1, r2, lr}
   2890a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2890c:	a801      	add	r0, sp, #4
   2890e:	f7f5 fae3 	bl	1ded8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   28912:	2301      	movs	r3, #1
   28914:	9a01      	ldr	r2, [sp, #4]
   28916:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   28918:	60c3      	str	r3, [r0, #12]
}
   2891a:	b003      	add	sp, #12
   2891c:	f85d fb04 	ldr.w	pc, [sp], #4

00028920 <nrf_gpio_pin_set>:
{
   28920:	b507      	push	{r0, r1, r2, lr}
   28922:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28924:	a801      	add	r0, sp, #4
   28926:	f7f5 fad7 	bl	1ded8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2892a:	2301      	movs	r3, #1
   2892c:	9a01      	ldr	r2, [sp, #4]
   2892e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   28930:	6083      	str	r3, [r0, #8]
}
   28932:	b003      	add	sp, #12
   28934:	f85d fb04 	ldr.w	pc, [sp], #4

00028938 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   28938:	7f83      	ldrb	r3, [r0, #30]
   2893a:	075a      	lsls	r2, r3, #29
   2893c:	d40b      	bmi.n	28956 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2893e:	7fc0      	ldrb	r0, [r0, #31]
   28940:	28ff      	cmp	r0, #255	; 0xff
   28942:	d008      	beq.n	28956 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   28944:	079b      	lsls	r3, r3, #30
   28946:	bf58      	it	pl
   28948:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2894c:	b909      	cbnz	r1, 28952 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   2894e:	f7ff bfdb 	b.w	28908 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   28952:	f7ff bfe5 	b.w	28920 <nrf_gpio_pin_set>
}
   28956:	4770      	bx	lr

00028958 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   28958:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2895c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2895e:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   28960:	4698      	mov	r8, r3
   28962:	460f      	mov	r7, r1
   28964:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28966:	f7f5 fab7 	bl	1ded8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2896a:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2896c:	f89d 4020 	ldrb.w	r4, [sp, #32]
   28970:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   28974:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   28976:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2897a:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   2897e:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   28982:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28986:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2898a:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   2898c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   28990:	b002      	add	sp, #8
   28992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028996 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   28996:	1c43      	adds	r3, r0, #1
{
   28998:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2899a:	d005      	beq.n	289a8 <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   2899c:	2300      	movs	r3, #0
   2899e:	2201      	movs	r2, #1
   289a0:	4619      	mov	r1, r3
   289a2:	9300      	str	r3, [sp, #0]
   289a4:	f7ff ffd8 	bl	28958 <nrf_gpio_cfg.constprop.0>
}
   289a8:	b003      	add	sp, #12
   289aa:	f85d fb04 	ldr.w	pc, [sp], #4

000289ae <metal_device_open>:
{
   289ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   289b0:	460c      	mov	r4, r1
   289b2:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   289b4:	4606      	mov	r6, r0
   289b6:	b918      	cbnz	r0, 289c0 <metal_device_open+0x12>
		return -EINVAL;
   289b8:	f06f 0015 	mvn.w	r0, #21
}
   289bc:	b002      	add	sp, #8
   289be:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   289c0:	f7e0 fcce 	bl	9360 <strlen>
   289c4:	2800      	cmp	r0, #0
   289c6:	d0f7      	beq.n	289b8 <metal_device_open+0xa>
   289c8:	2c00      	cmp	r4, #0
   289ca:	d0f5      	beq.n	289b8 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   289cc:	4620      	mov	r0, r4
   289ce:	f7e0 fcc7 	bl	9360 <strlen>
   289d2:	2800      	cmp	r0, #0
   289d4:	d0f0      	beq.n	289b8 <metal_device_open+0xa>
   289d6:	2d00      	cmp	r5, #0
   289d8:	d0ee      	beq.n	289b8 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   289da:	4630      	mov	r0, r6
   289dc:	a901      	add	r1, sp, #4
   289de:	f7f5 fd91 	bl	1e504 <metal_bus_find>
	if (error)
   289e2:	2800      	cmp	r0, #0
   289e4:	d1ea      	bne.n	289bc <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   289e6:	9801      	ldr	r0, [sp, #4]
   289e8:	6883      	ldr	r3, [r0, #8]
   289ea:	b12b      	cbz	r3, 289f8 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   289ec:	462a      	mov	r2, r5
   289ee:	4621      	mov	r1, r4
}
   289f0:	b002      	add	sp, #8
   289f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   289f6:	4718      	bx	r3
		return -ENODEV;
   289f8:	f06f 0012 	mvn.w	r0, #18
   289fc:	e7de      	b.n	289bc <metal_device_open+0xe>

000289fe <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   289fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28a02:	b089      	sub	sp, #36	; 0x24
   28a04:	9e10      	ldr	r6, [sp, #64]	; 0x40
   28a06:	4604      	mov	r4, r0
   28a08:	4689      	mov	r9, r1
   28a0a:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   28a0c:	2100      	movs	r1, #0
   28a0e:	2220      	movs	r2, #32
   28a10:	4668      	mov	r0, sp
{
   28a12:	461f      	mov	r7, r3
   28a14:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   28a16:	f000 ff22 	bl	2985e <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   28a1a:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   28a1c:	bf97      	itett	ls
   28a1e:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   28a20:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   28a24:	40b3      	lslls	r3, r6
   28a26:	f103 33ff 	addls.w	r3, r3, #4294967295
   28a2a:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   28a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   28a2e:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   28a32:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   28a36:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   28a38:	3418      	adds	r4, #24
   28a3a:	b145      	cbz	r5, 28a4e <metal_io_init+0x50>
   28a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   28a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   28a40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   28a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   28a48:	b009      	add	sp, #36	; 0x24
   28a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   28a4e:	466d      	mov	r5, sp
   28a50:	e7f4      	b.n	28a3c <metal_io_init+0x3e>

00028a52 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   28a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   28a54:	6804      	ldr	r4, [r0, #0]
		: NULL);
   28a56:	1c66      	adds	r6, r4, #1
   28a58:	d031      	beq.n	28abe <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28a5a:	6885      	ldr	r5, [r0, #8]
   28a5c:	42a9      	cmp	r1, r5
   28a5e:	d22e      	bcs.n	28abe <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   28a60:	1864      	adds	r4, r4, r1
   28a62:	d02c      	beq.n	28abe <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   28a64:	185e      	adds	r6, r3, r1
   28a66:	42ae      	cmp	r6, r5
		len = io->size - offset;
   28a68:	bf88      	it	hi
   28a6a:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   28a6c:	6a05      	ldr	r5, [r0, #32]
   28a6e:	b135      	cbz	r5, 28a7e <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   28a70:	9300      	str	r3, [sp, #0]
   28a72:	2305      	movs	r3, #5
   28a74:	47a8      	blx	r5
   28a76:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   28a78:	4618      	mov	r0, r3
   28a7a:	b002      	add	sp, #8
   28a7c:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   28a7e:	f3bf 8f5b 	dmb	ish
		while ( len && (
   28a82:	4619      	mov	r1, r3
   28a84:	1aa4      	subs	r4, r4, r2
   28a86:	1910      	adds	r0, r2, r4
   28a88:	b119      	cbz	r1, 28a92 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   28a8a:	ea40 0502 	orr.w	r5, r0, r2
   28a8e:	07ad      	lsls	r5, r5, #30
   28a90:	d10a      	bne.n	28aa8 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   28a92:	2903      	cmp	r1, #3
   28a94:	dc0d      	bgt.n	28ab2 <metal_io_block_read+0x60>
   28a96:	3801      	subs	r0, #1
   28a98:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   28a9a:	428a      	cmp	r2, r1
   28a9c:	d0ec      	beq.n	28a78 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   28a9e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   28aa2:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   28aa6:	e7f8      	b.n	28a9a <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   28aa8:	7800      	ldrb	r0, [r0, #0]
			len--;
   28aaa:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   28aac:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   28ab0:	e7e9      	b.n	28a86 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   28ab2:	f850 4b04 	ldr.w	r4, [r0], #4
   28ab6:	3904      	subs	r1, #4
   28ab8:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   28abc:	e7e9      	b.n	28a92 <metal_io_block_read+0x40>
		return -ERANGE;
   28abe:	f06f 0321 	mvn.w	r3, #33	; 0x21
   28ac2:	e7d9      	b.n	28a78 <metal_io_block_read+0x26>

00028ac4 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   28ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28ac6:	6804      	ldr	r4, [r0, #0]
		: NULL);
   28ac8:	1c65      	adds	r5, r4, #1
   28aca:	d032      	beq.n	28b32 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28acc:	6885      	ldr	r5, [r0, #8]
   28ace:	42a9      	cmp	r1, r5
   28ad0:	d22f      	bcs.n	28b32 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   28ad2:	1864      	adds	r4, r4, r1
   28ad4:	d02d      	beq.n	28b32 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   28ad6:	185e      	adds	r6, r3, r1
   28ad8:	42ae      	cmp	r6, r5
		len = io->size - offset;
   28ada:	bf88      	it	hi
   28adc:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   28ade:	6a45      	ldr	r5, [r0, #36]	; 0x24
   28ae0:	b1cd      	cbz	r5, 28b16 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   28ae2:	9300      	str	r3, [sp, #0]
   28ae4:	2305      	movs	r3, #5
   28ae6:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   28ae8:	b002      	add	sp, #8
   28aea:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   28aec:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   28af0:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   28af2:	7005      	strb	r5, [r0, #0]
			len--;
   28af4:	4615      	mov	r5, r2
   28af6:	18a0      	adds	r0, r4, r2
		while ( len && (
   28af8:	b119      	cbz	r1, 28b02 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   28afa:	ea40 0602 	orr.w	r6, r0, r2
   28afe:	07b6      	lsls	r6, r6, #30
   28b00:	d1f4      	bne.n	28aec <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   28b02:	2903      	cmp	r1, #3
   28b04:	dc0a      	bgt.n	28b1c <metal_io_block_write+0x58>
   28b06:	3d01      	subs	r5, #1
   28b08:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   28b0a:	4288      	cmp	r0, r1
   28b0c:	d10c      	bne.n	28b28 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   28b0e:	f3bf 8f5b 	dmb	ish
	retlen = len;
   28b12:	4618      	mov	r0, r3
   28b14:	e7e8      	b.n	28ae8 <metal_io_block_write+0x24>
   28b16:	4619      	mov	r1, r3
   28b18:	1aa4      	subs	r4, r4, r2
   28b1a:	e7eb      	b.n	28af4 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   28b1c:	f855 2b04 	ldr.w	r2, [r5], #4
   28b20:	3904      	subs	r1, #4
   28b22:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   28b26:	e7ec      	b.n	28b02 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   28b28:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   28b2c:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   28b30:	e7eb      	b.n	28b0a <metal_io_block_write+0x46>
		return -ERANGE;
   28b32:	f06f 0021 	mvn.w	r0, #33	; 0x21
   28b36:	e7d7      	b.n	28ae8 <metal_io_block_write+0x24>

00028b38 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   28b38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28b3a:	6804      	ldr	r4, [r0, #0]
   28b3c:	461d      	mov	r5, r3
		: NULL);
   28b3e:	1c66      	adds	r6, r4, #1
   28b40:	d02b      	beq.n	28b9a <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28b42:	6883      	ldr	r3, [r0, #8]
   28b44:	4299      	cmp	r1, r3
   28b46:	d228      	bcs.n	28b9a <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   28b48:	1864      	adds	r4, r4, r1
   28b4a:	d026      	beq.n	28b9a <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   28b4c:	186e      	adds	r6, r5, r1
   28b4e:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   28b50:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   28b52:	bf88      	it	hi
   28b54:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   28b56:	b12e      	cbz	r6, 28b64 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   28b58:	2305      	movs	r3, #5
   28b5a:	9500      	str	r5, [sp, #0]
   28b5c:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   28b5e:	4628      	mov	r0, r5
}
   28b60:	b002      	add	sp, #8
   28b62:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   28b64:	4621      	mov	r1, r4
   28b66:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   28b68:	b94b      	cbnz	r3, 28b7e <metal_io_block_set+0x46>
   28b6a:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   28b6c:	4299      	cmp	r1, r3
   28b6e:	d111      	bne.n	28b94 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   28b70:	f3bf 8f5b 	dmb	ish
   28b74:	e7f3      	b.n	28b5e <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   28b76:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   28b7a:	3b01      	subs	r3, #1
   28b7c:	e7f4      	b.n	28b68 <metal_io_block_set+0x30>
   28b7e:	0788      	lsls	r0, r1, #30
   28b80:	d1f9      	bne.n	28b76 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   28b82:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   28b86:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   28b88:	2b03      	cmp	r3, #3
   28b8a:	ddee      	ble.n	28b6a <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   28b8c:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   28b90:	3b04      	subs	r3, #4
   28b92:	e7f9      	b.n	28b88 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   28b94:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   28b98:	e7e8      	b.n	28b6c <metal_io_block_set+0x34>
		return -ERANGE;
   28b9a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   28b9e:	e7df      	b.n	28b60 <metal_io_block_set+0x28>

00028ba0 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   28ba0:	2000      	movs	r0, #0
   28ba2:	4770      	bx	lr

00028ba4 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   28ba4:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   28ba6:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   28ba8:	4602      	mov	r2, r0
   28baa:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   28bac:	b984      	cbnz	r4, 28bd0 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   28bae:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   28bb0:	291f      	cmp	r1, #31
   28bb2:	bf98      	it	ls
   28bb4:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   28bb8:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   28bba:	b161      	cbz	r1, 28bd6 <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   28bbc:	6880      	ldr	r0, [r0, #8]
   28bbe:	4283      	cmp	r3, r0
   28bc0:	d209      	bcs.n	28bd6 <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   28bc2:	6910      	ldr	r0, [r2, #16]
   28bc4:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   28bc6:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   28bca:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   28bcc:	bc10      	pop	{r4}
   28bce:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   28bd0:	4623      	mov	r3, r4
}
   28bd2:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   28bd4:	4718      	bx	r3
			: METAL_BAD_PHYS);
   28bd6:	f04f 30ff 	mov.w	r0, #4294967295
   28bda:	e7f7      	b.n	28bcc <metal_io_phys+0x28>

00028bdc <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   28bdc:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   28bde:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   28be0:	4605      	mov	r5, r0
   28be2:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   28be4:	b9e3      	cbnz	r3, 28c20 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   28be6:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   28be8:	1c62      	adds	r2, r4, #1
   28bea:	bf09      	itett	eq
   28bec:	6843      	ldreq	r3, [r0, #4]
   28bee:	400c      	andne	r4, r1
   28bf0:	681c      	ldreq	r4, [r3, #0]
   28bf2:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   28bf4:	4621      	mov	r1, r4
   28bf6:	4628      	mov	r0, r5
   28bf8:	f7ff ffd4 	bl	28ba4 <metal_io_phys>
   28bfc:	4286      	cmp	r6, r0
   28bfe:	d007      	beq.n	28c10 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   28c00:	692b      	ldr	r3, [r5, #16]
   28c02:	3301      	adds	r3, #1
   28c04:	441c      	add	r4, r3
		} while (offset < io->size);
   28c06:	68ab      	ldr	r3, [r5, #8]
   28c08:	429c      	cmp	r4, r3
   28c0a:	d3f3      	bcc.n	28bf4 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   28c0c:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   28c10:	6828      	ldr	r0, [r5, #0]
		: NULL);
   28c12:	1c43      	adds	r3, r0, #1
   28c14:	d007      	beq.n	28c26 <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28c16:	68ab      	ldr	r3, [r5, #8]
   28c18:	42a3      	cmp	r3, r4
   28c1a:	d904      	bls.n	28c26 <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   28c1c:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   28c1e:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   28c20:	4798      	blx	r3
   28c22:	4604      	mov	r4, r0
   28c24:	e7f4      	b.n	28c10 <metal_io_phys_to_virt+0x34>
		: NULL);
   28c26:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   28c28:	e7f9      	b.n	28c1e <metal_io_phys_to_virt+0x42>

00028c2a <virtqueue_create>:
{
   28c2a:	b530      	push	{r4, r5, lr}
   28c2c:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   28c2e:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   28c32:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   28c34:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   28c36:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   28c38:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   28c3a:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   28c3c:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   28c3e:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   28c40:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   28c42:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   28c46:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   28c4a:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   28c4e:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   28c50:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   28c52:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   28c56:	1c6a      	adds	r2, r5, #1
   28c58:	4413      	add	r3, r2
   28c5a:	426d      	negs	r5, r5
   28c5c:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   28c5e:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28c60:	6983      	ldr	r3, [r0, #24]
   28c62:	b953      	cbnz	r3, 28c7a <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   28c64:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   28c66:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   28c68:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   28c6a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   28c6e:	db06      	blt.n	28c7e <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   28c70:	2300      	movs	r3, #0
   28c72:	7393      	strb	r3, [r2, #14]
   28c74:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   28c78:	73d3      	strb	r3, [r2, #15]
}
   28c7a:	2000      	movs	r0, #0
   28c7c:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   28c7e:	3301      	adds	r3, #1
   28c80:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   28c82:	e7f0      	b.n	28c66 <virtqueue_create+0x3c>

00028c84 <virtqueue_add_buffer>:
{
   28c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   28c88:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   28c8c:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28c8e:	4655      	mov	r5, sl
   28c90:	2600      	movs	r6, #0
{
   28c92:	b085      	sub	sp, #20
	needed = readable + writable;
   28c94:	eb02 0803 	add.w	r8, r2, r3
{
   28c98:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   28c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28c9c:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   28ca0:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   28ca4:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   28ca6:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   28caa:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   28cae:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28cb0:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   28cb2:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28cb4:	45b0      	cmp	r8, r6
   28cb6:	dc1a      	bgt.n	28cee <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   28cb8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   28cba:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   28cbc:	eba3 030b 	sub.w	r3, r3, fp
   28cc0:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   28cc2:	69e3      	ldr	r3, [r4, #28]
   28cc4:	8961      	ldrh	r1, [r4, #10]
   28cc6:	885a      	ldrh	r2, [r3, #2]
   28cc8:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   28cca:	400a      	ands	r2, r1
   28ccc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   28cd0:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   28cd4:	f3bf 8f5b 	dmb	ish
}
   28cd8:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   28cda:	69e2      	ldr	r2, [r4, #28]
   28cdc:	8853      	ldrh	r3, [r2, #2]
   28cde:	3301      	adds	r3, #1
   28ce0:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   28ce2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   28ce4:	3301      	adds	r3, #1
   28ce6:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   28ce8:	b005      	add	sp, #20
   28cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   28cee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   28cf0:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   28cf2:	f857 1c04 	ldr.w	r1, [r7, #-4]
   28cf6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   28cfa:	9302      	str	r3, [sp, #8]
   28cfc:	6803      	ldr	r3, [r0, #0]
   28cfe:	9203      	str	r2, [sp, #12]
   28d00:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   28d02:	6883      	ldr	r3, [r0, #8]
   28d04:	3708      	adds	r7, #8
   28d06:	4299      	cmp	r1, r3
   28d08:	bf28      	it	cs
   28d0a:	f04f 31ff 	movcs.w	r1, #4294967295
   28d0e:	f7ff ff49 	bl	28ba4 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   28d12:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   28d16:	5098      	str	r0, [r3, r2]
   28d18:	2200      	movs	r2, #0
   28d1a:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   28d1c:	f857 2c08 	ldr.w	r2, [r7, #-8]
   28d20:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   28d22:	9a01      	ldr	r2, [sp, #4]
   28d24:	4296      	cmp	r6, r2
   28d26:	bfac      	ite	ge
   28d28:	2200      	movge	r2, #0
   28d2a:	2201      	movlt	r2, #1
		if (i >= readable)
   28d2c:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   28d2e:	bfd8      	it	le
   28d30:	f042 0202 	orrle.w	r2, r2, #2
   28d34:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28d36:	3601      	adds	r6, #1
   28d38:	89ed      	ldrh	r5, [r5, #14]
   28d3a:	e7bb      	b.n	28cb4 <virtqueue_add_buffer+0x30>

00028d3c <virtqueue_get_buffer>:
{
   28d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   28d3e:	b350      	cbz	r0, 28d96 <virtqueue_get_buffer+0x5a>
   28d40:	6a05      	ldr	r5, [r0, #32]
   28d42:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   28d44:	886b      	ldrh	r3, [r5, #2]
   28d46:	42a3      	cmp	r3, r4
   28d48:	d030      	beq.n	28dac <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   28d4a:	1c63      	adds	r3, r4, #1
   28d4c:	85c3      	strh	r3, [r0, #46]	; 0x2e
   28d4e:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   28d50:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   28d54:	3b01      	subs	r3, #1
   28d56:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   28d58:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   28d5c:	686b      	ldr	r3, [r5, #4]
   28d5e:	b29e      	uxth	r6, r3
	if (len)
   28d60:	b109      	cbz	r1, 28d66 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   28d62:	68ad      	ldr	r5, [r5, #8]
   28d64:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   28d66:	f8d0 c018 	ldr.w	ip, [r0, #24]
   28d6a:	b29b      	uxth	r3, r3
   28d6c:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   28d70:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   28d74:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   28d76:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   28d78:	442f      	add	r7, r5
	dxp->ndescs--;
   28d7a:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   28d7c:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   28d7e:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   28d80:	898d      	ldrh	r5, [r1, #12]
   28d82:	076f      	lsls	r7, r5, #29
   28d84:	d50e      	bpl.n	28da4 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   28d86:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   28d88:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   28d8a:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   28d8c:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   28d8e:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   28d90:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   28d92:	b102      	cbz	r2, 28d96 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   28d94:	8014      	strh	r4, [r2, #0]
}
   28d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   28d98:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   28d9a:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   28d9c:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   28d9e:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   28da2:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   28da4:	898d      	ldrh	r5, [r1, #12]
   28da6:	07ed      	lsls	r5, r5, #31
   28da8:	d4f6      	bmi.n	28d98 <virtqueue_get_buffer+0x5c>
   28daa:	e7ec      	b.n	28d86 <virtqueue_get_buffer+0x4a>
		return NULL;
   28dac:	2000      	movs	r0, #0
   28dae:	e7f2      	b.n	28d96 <virtqueue_get_buffer+0x5a>

00028db0 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   28db0:	6983      	ldr	r3, [r0, #24]
   28db2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   28db6:	6898      	ldr	r0, [r3, #8]
   28db8:	4770      	bx	lr

00028dba <virtqueue_get_available_buffer>:
{
   28dba:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   28dbc:	f3bf 8f5b 	dmb	ish
{
   28dc0:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28dc2:	69c1      	ldr	r1, [r0, #28]
{
   28dc4:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28dc6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   28dc8:	884a      	ldrh	r2, [r1, #2]
{
   28dca:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28dcc:	429a      	cmp	r2, r3
   28dce:	d016      	beq.n	28dfe <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   28dd0:	1c5a      	adds	r2, r3, #1
   28dd2:	8602      	strh	r2, [r0, #48]	; 0x30
   28dd4:	8942      	ldrh	r2, [r0, #10]
   28dd6:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   28dd8:	4013      	ands	r3, r2
   28dda:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   28dde:	888a      	ldrh	r2, [r1, #4]
   28de0:	802a      	strh	r2, [r5, #0]
   28de2:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   28de4:	6982      	ldr	r2, [r0, #24]
   28de6:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   28de8:	58d1      	ldr	r1, [r2, r3]
   28dea:	6a80      	ldr	r0, [r0, #40]	; 0x28
   28dec:	f7ff fef6 	bl	28bdc <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   28df0:	882a      	ldrh	r2, [r5, #0]
   28df2:	69a3      	ldr	r3, [r4, #24]
   28df4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   28df8:	689b      	ldr	r3, [r3, #8]
   28dfa:	6033      	str	r3, [r6, #0]
}
   28dfc:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   28dfe:	2000      	movs	r0, #0
   28e00:	e7fc      	b.n	28dfc <virtqueue_get_available_buffer+0x42>

00028e02 <virtqueue_disable_cb>:
{
   28e02:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28e04:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28e06:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28e08:	6912      	ldr	r2, [r2, #16]
   28e0a:	0092      	lsls	r2, r2, #2
   28e0c:	d517      	bpl.n	28e3e <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28e0e:	b943      	cbnz	r3, 28e22 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   28e10:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   28e12:	69c2      	ldr	r2, [r0, #28]
   28e14:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   28e16:	8944      	ldrh	r4, [r0, #10]
   28e18:	3b01      	subs	r3, #1
   28e1a:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   28e1c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   28e20:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28e22:	6803      	ldr	r3, [r0, #0]
   28e24:	699b      	ldr	r3, [r3, #24]
   28e26:	2b01      	cmp	r3, #1
   28e28:	d108      	bne.n	28e3c <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   28e2a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   28e2c:	6a02      	ldr	r2, [r0, #32]
   28e2e:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   28e30:	8940      	ldrh	r0, [r0, #10]
   28e32:	3b01      	subs	r3, #1
   28e34:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   28e36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   28e3a:	8093      	strh	r3, [r2, #4]
}
   28e3c:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28e3e:	b923      	cbnz	r3, 28e4a <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   28e40:	69c2      	ldr	r2, [r0, #28]
   28e42:	8813      	ldrh	r3, [r2, #0]
   28e44:	f043 0301 	orr.w	r3, r3, #1
   28e48:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28e4a:	6803      	ldr	r3, [r0, #0]
   28e4c:	699b      	ldr	r3, [r3, #24]
   28e4e:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   28e50:	bf01      	itttt	eq
   28e52:	6a02      	ldreq	r2, [r0, #32]
   28e54:	8813      	ldrheq	r3, [r2, #0]
   28e56:	f043 0301 	orreq.w	r3, r3, #1
   28e5a:	8013      	strheq	r3, [r2, #0]
}
   28e5c:	e7ee      	b.n	28e3c <virtqueue_disable_cb+0x3a>

00028e5e <virtqueue_kick>:
{
   28e5e:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   28e60:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28e64:	6803      	ldr	r3, [r0, #0]
{
   28e66:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28e68:	691a      	ldr	r2, [r3, #16]
   28e6a:	699b      	ldr	r3, [r3, #24]
   28e6c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   28e70:	d01a      	beq.n	28ea8 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28e72:	b97b      	cbnz	r3, 28e94 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   28e74:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   28e76:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   28e78:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   28e7a:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   28e7c:	3b01      	subs	r3, #1
   28e7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   28e82:	8892      	ldrh	r2, [r2, #4]
   28e84:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   28e86:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   28e88:	b29b      	uxth	r3, r3
   28e8a:	429a      	cmp	r2, r3
   28e8c:	d814      	bhi.n	28eb8 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   28e8e:	2300      	movs	r3, #0
   28e90:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   28e92:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28e94:	2b01      	cmp	r3, #1
   28e96:	d1fa      	bne.n	28e8e <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   28e98:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   28e9a:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   28e9c:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   28e9e:	6941      	ldr	r1, [r0, #20]
   28ea0:	3b01      	subs	r3, #1
   28ea2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   28ea6:	e7ec      	b.n	28e82 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28ea8:	b963      	cbnz	r3, 28ec4 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   28eaa:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   28eac:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   28eae:	43db      	mvns	r3, r3
   28eb0:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   28eb4:	2b00      	cmp	r3, #0
   28eb6:	d0ea      	beq.n	28e8e <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   28eb8:	6923      	ldr	r3, [r4, #16]
   28eba:	2b00      	cmp	r3, #0
   28ebc:	d0e7      	beq.n	28e8e <virtqueue_kick+0x30>
		vq->notify(vq);
   28ebe:	4620      	mov	r0, r4
   28ec0:	4798      	blx	r3
   28ec2:	e7e4      	b.n	28e8e <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28ec4:	2b01      	cmp	r3, #1
   28ec6:	d1e2      	bne.n	28e8e <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   28ec8:	69c3      	ldr	r3, [r0, #28]
   28eca:	e7ef      	b.n	28eac <virtqueue_kick+0x4e>

00028ecc <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28ecc:	69c3      	ldr	r3, [r0, #28]
   28ece:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   28ed0:	8859      	ldrh	r1, [r3, #2]
   28ed2:	4291      	cmp	r1, r2
   28ed4:	d00a      	beq.n	28eec <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   28ed6:	8941      	ldrh	r1, [r0, #10]
   28ed8:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   28eda:	400a      	ands	r2, r1
   28edc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   28ee0:	889a      	ldrh	r2, [r3, #4]
   28ee2:	6983      	ldr	r3, [r0, #24]
   28ee4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   28ee8:	6898      	ldr	r0, [r3, #8]
	return len;
   28eea:	4770      	bx	lr
		return 0;
   28eec:	2000      	movs	r0, #0
}
   28eee:	4770      	bx	lr

00028ef0 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   28ef0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   28ef4:	68c3      	ldr	r3, [r0, #12]
   28ef6:	b103      	cbz	r3, 28efa <virtqueue_notification+0xa>
		vq->callback(vq);
   28ef8:	4718      	bx	r3
}
   28efa:	4770      	bx	lr

00028efc <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   28efc:	f04f 32ff 	mov.w	r2, #4294967295
   28f00:	f04f 33ff 	mov.w	r3, #4294967295
   28f04:	f7f6 bfda 	b.w	1febc <z_impl_k_sem_take>

00028f08 <rpmsg_unregister_endpoint>:
{
   28f08:	b570      	push	{r4, r5, r6, lr}
   28f0a:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   28f0c:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   28f0e:	f105 0658 	add.w	r6, r5, #88	; 0x58
   28f12:	4630      	mov	r0, r6
   28f14:	f7ff fff2 	bl	28efc <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   28f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28f1a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   28f1e:	2b7f      	cmp	r3, #127	; 0x7f
   28f20:	d80b      	bhi.n	28f3a <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   28f22:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   28f24:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   28f26:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   28f28:	f003 031f 	and.w	r3, r3, #31
   28f2c:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   28f2e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   28f32:	ea23 0302 	bic.w	r3, r3, r2
   28f36:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   28f3a:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   28f3e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   28f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   28f42:	f104 0334 	add.w	r3, r4, #52	; 0x34
   28f46:	6011      	str	r1, [r2, #0]
	node->next = node;
   28f48:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   28f4c:	2300      	movs	r3, #0
   28f4e:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   28f50:	4630      	mov	r0, r6
}
   28f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28f56:	f7f6 bf6d 	b.w	1fe34 <z_impl_k_sem_give>

00028f5a <rpmsg_send_ns_message>:
{
   28f5a:	b530      	push	{r4, r5, lr}
   28f5c:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   28f5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   28f60:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   28f62:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   28f64:	2220      	movs	r2, #32
   28f66:	4601      	mov	r1, r0
   28f68:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   28f6a:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   28f6c:	f000 fdb9 	bl	29ae2 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   28f70:	2328      	movs	r3, #40	; 0x28
   28f72:	2201      	movs	r2, #1
   28f74:	4629      	mov	r1, r5
   28f76:	e9cd 3200 	strd	r3, r2, [sp]
   28f7a:	4620      	mov	r0, r4
   28f7c:	2235      	movs	r2, #53	; 0x35
   28f7e:	ab02      	add	r3, sp, #8
   28f80:	f7f5 fc2e 	bl	1e7e0 <rpmsg_send_offchannel_raw>
}
   28f84:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   28f88:	b00d      	add	sp, #52	; 0x34
   28f8a:	bd30      	pop	{r4, r5, pc}

00028f8c <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   28f8c:	b128      	cbz	r0, 28f9a <rpmsg_hold_rx_buffer+0xe>
   28f8e:	6a00      	ldr	r0, [r0, #32]
   28f90:	b118      	cbz	r0, 28f9a <rpmsg_hold_rx_buffer+0xe>
   28f92:	b111      	cbz	r1, 28f9a <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   28f94:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   28f96:	b103      	cbz	r3, 28f9a <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   28f98:	4718      	bx	r3
}
   28f9a:	4770      	bx	lr

00028f9c <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   28f9c:	b130      	cbz	r0, 28fac <rpmsg_release_rx_buffer+0x10>
   28f9e:	6a00      	ldr	r0, [r0, #32]
   28fa0:	b120      	cbz	r0, 28fac <rpmsg_release_rx_buffer+0x10>
   28fa2:	b119      	cbz	r1, 28fac <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   28fa4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   28fa8:	b103      	cbz	r3, 28fac <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   28faa:	4718      	bx	r3
}
   28fac:	4770      	bx	lr

00028fae <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   28fae:	b130      	cbz	r0, 28fbe <rpmsg_get_tx_payload_buffer+0x10>
   28fb0:	6a00      	ldr	r0, [r0, #32]
   28fb2:	b120      	cbz	r0, 28fbe <rpmsg_get_tx_payload_buffer+0x10>
   28fb4:	b119      	cbz	r1, 28fbe <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   28fb6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   28fba:	b103      	cbz	r3, 28fbe <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   28fbc:	4718      	bx	r3
}
   28fbe:	2000      	movs	r0, #0
   28fc0:	4770      	bx	lr

00028fc2 <rpmsg_get_endpoint>:
{
   28fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28fc6:	4606      	mov	r6, r0
   28fc8:	4688      	mov	r8, r1
   28fca:	4617      	mov	r7, r2
   28fcc:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   28fce:	6804      	ldr	r4, [r0, #0]
   28fd0:	42a6      	cmp	r6, r4
   28fd2:	d101      	bne.n	28fd8 <rpmsg_get_endpoint+0x16>
	return NULL;
   28fd4:	2500      	movs	r5, #0
   28fd6:	e023      	b.n	29020 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   28fd8:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   28fda:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   28fde:	d002      	beq.n	28fe6 <rpmsg_get_endpoint+0x24>
   28fe0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   28fe2:	42bb      	cmp	r3, r7
   28fe4:	d01c      	beq.n	29020 <rpmsg_get_endpoint+0x5e>
		if (name)
   28fe6:	f1b8 0f00 	cmp.w	r8, #0
   28fea:	d101      	bne.n	28ff0 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   28fec:	6824      	ldr	r4, [r4, #0]
   28fee:	e7ef      	b.n	28fd0 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   28ff0:	2220      	movs	r2, #32
   28ff2:	4641      	mov	r1, r8
   28ff4:	4628      	mov	r0, r5
   28ff6:	f000 fd62 	bl	29abe <strncmp>
		if (!name || !name_match)
   28ffa:	2800      	cmp	r0, #0
   28ffc:	d1f6      	bne.n	28fec <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   28ffe:	f1b9 3fff 	cmp.w	r9, #4294967295
   29002:	d002      	beq.n	2900a <rpmsg_get_endpoint+0x48>
   29004:	6aab      	ldr	r3, [r5, #40]	; 0x28
   29006:	454b      	cmp	r3, r9
   29008:	d00a      	beq.n	29020 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2900a:	1c7b      	adds	r3, r7, #1
   2900c:	d00b      	beq.n	29026 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2900e:	6824      	ldr	r4, [r4, #0]
   29010:	42b4      	cmp	r4, r6
   29012:	d0df      	beq.n	28fd4 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   29014:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   29018:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2901c:	429f      	cmp	r7, r3
   2901e:	d1e7      	bne.n	28ff0 <rpmsg_get_endpoint+0x2e>
}
   29020:	4628      	mov	r0, r5
   29022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   29026:	6aab      	ldr	r3, [r5, #40]	; 0x28
   29028:	3301      	adds	r3, #1
   2902a:	d0f9      	beq.n	29020 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2902c:	6824      	ldr	r4, [r4, #0]
   2902e:	42b4      	cmp	r4, r6
   29030:	d0d0      	beq.n	28fd4 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   29032:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   29036:	e7d6      	b.n	28fe6 <rpmsg_get_endpoint+0x24>

00029038 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   29038:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2903a:	4604      	mov	r4, r0
   2903c:	b190      	cbz	r0, 29064 <rpmsg_destroy_ept+0x2c>
   2903e:	6a03      	ldr	r3, [r0, #32]
   29040:	b183      	cbz	r3, 29064 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   29042:	7802      	ldrb	r2, [r0, #0]
   29044:	b14a      	cbz	r2, 2905a <rpmsg_destroy_ept+0x22>
   29046:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2904a:	b133      	cbz	r3, 2905a <rpmsg_destroy_ept+0x22>
   2904c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2904e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   29052:	d302      	bcc.n	2905a <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   29054:	2101      	movs	r1, #1
   29056:	f7ff ff80 	bl	28f5a <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2905a:	4620      	mov	r0, r4
}
   2905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   29060:	f7ff bf52 	b.w	28f08 <rpmsg_unregister_endpoint>
}
   29064:	bd10      	pop	{r4, pc}

00029066 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   29066:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2906a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2906e:	f841 3c08 	str.w	r3, [r1, #-8]
}
   29072:	4770      	bx	lr

00029074 <rpmsg_virtio_tx_callback>:
}
   29074:	4770      	bx	lr

00029076 <k_sem_give>:
   29076:	f7f6 bedd 	b.w	1fe34 <z_impl_k_sem_give>

0002907a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2907a:	f04f 32ff 	mov.w	r2, #4294967295
   2907e:	f04f 33ff 	mov.w	r3, #4294967295
   29082:	f7f6 bf1b 	b.w	1febc <z_impl_k_sem_take>

00029086 <rpmsg_virtio_release_tx_buffer>:
{
   29086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29088:	460c      	mov	r4, r1
   2908a:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2908c:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   29090:	f100 0758 	add.w	r7, r0, #88	; 0x58
   29094:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   29096:	b2b6      	uxth	r6, r6
   29098:	f7ff ffef 	bl	2907a <__metal_mutex_acquire>
	r_desc->idx = idx;
   2909c:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   290a0:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   290a4:	f1a4 0310 	sub.w	r3, r4, #16
   290a8:	f844 2c0c 	str.w	r2, [r4, #-12]
   290ac:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   290b0:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   290b4:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   290b8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   290bc:	4638      	mov	r0, r7
   290be:	6013      	str	r3, [r2, #0]
   290c0:	f7ff ffd9 	bl	29076 <k_sem_give>
}
   290c4:	2000      	movs	r0, #0
   290c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000290c8 <rpmsg_virtio_ns_callback>:
{
   290c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   290cc:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   290ce:	2a28      	cmp	r2, #40	; 0x28
{
   290d0:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   290d2:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   290d6:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   290d8:	d126      	bne.n	29128 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   290da:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   290dc:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   290de:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   290e0:	42a1      	cmp	r1, r4
   290e2:	bf28      	it	cs
   290e4:	f04f 31ff 	movcs.w	r1, #4294967295
   290e8:	2320      	movs	r3, #32
   290ea:	466a      	mov	r2, sp
   290ec:	f7ff fcb1 	bl	28a52 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   290f0:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   290f4:	f8d7 8020 	ldr.w	r8, [r7, #32]
   290f8:	4630      	mov	r0, r6
   290fa:	f7ff ffbe 	bl	2907a <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   290fe:	4643      	mov	r3, r8
   29100:	f04f 32ff 	mov.w	r2, #4294967295
   29104:	4669      	mov	r1, sp
   29106:	4628      	mov	r0, r5
   29108:	f7ff ff5b 	bl	28fc2 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2910e:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   29110:	07db      	lsls	r3, r3, #31
   29112:	d519      	bpl.n	29148 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   29114:	b960      	cbnz	r0, 29130 <rpmsg_virtio_ns_callback+0x68>
   29116:	4630      	mov	r0, r6
   29118:	f7ff ffad 	bl	29076 <k_sem_give>
		if (rdev->ns_unbind_cb)
   2911c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2911e:	b11b      	cbz	r3, 29128 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   29120:	4642      	mov	r2, r8
   29122:	4669      	mov	r1, sp
   29124:	4628      	mov	r0, r5
   29126:	4798      	blx	r3
}
   29128:	2000      	movs	r0, #0
   2912a:	b008      	add	sp, #32
   2912c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   29130:	f04f 33ff 	mov.w	r3, #4294967295
   29134:	6283      	str	r3, [r0, #40]	; 0x28
   29136:	4630      	mov	r0, r6
   29138:	f7ff ff9d 	bl	29076 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2913c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2913e:	2b00      	cmp	r3, #0
   29140:	d0ec      	beq.n	2911c <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   29142:	4620      	mov	r0, r4
   29144:	4798      	blx	r3
   29146:	e7e9      	b.n	2911c <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   29148:	b920      	cbnz	r0, 29154 <rpmsg_virtio_ns_callback+0x8c>
   2914a:	4630      	mov	r0, r6
   2914c:	f7ff ff93 	bl	29076 <k_sem_give>
			if (rdev->ns_bind_cb)
   29150:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   29152:	e7e4      	b.n	2911e <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   29154:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   29158:	4630      	mov	r0, r6
   2915a:	f7ff ff8c 	bl	29076 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2915e:	e7e3      	b.n	29128 <rpmsg_virtio_ns_callback+0x60>

00029160 <rpmsg_virtio_get_rx_buffer>:
{
   29160:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   29162:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   29166:	4613      	mov	r3, r2
   29168:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2916a:	b925      	cbnz	r5, 29176 <rpmsg_virtio_get_rx_buffer+0x16>
}
   2916c:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2916e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   29172:	f7ff bde3 	b.w	28d3c <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   29176:	2d01      	cmp	r5, #1
   29178:	d106      	bne.n	29188 <rpmsg_virtio_get_rx_buffer+0x28>
}
   2917a:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2917c:	460a      	mov	r2, r1
   2917e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   29182:	4619      	mov	r1, r3
   29184:	f7ff be19 	b.w	28dba <virtqueue_get_available_buffer>
}
   29188:	2000      	movs	r0, #0
   2918a:	bc30      	pop	{r4, r5}
   2918c:	4770      	bx	lr

0002918e <rpmsg_virtio_return_buffer>:
{
   2918e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   29190:	460c      	mov	r4, r1
   29192:	4619      	mov	r1, r3
   29194:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   29198:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2919a:	b95d      	cbnz	r5, 291b4 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2919c:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2919e:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   291a2:	2301      	movs	r3, #1
   291a4:	462a      	mov	r2, r5
   291a6:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   291aa:	a902      	add	r1, sp, #8
   291ac:	f7ff fd6a 	bl	28c84 <virtqueue_add_buffer>
}
   291b0:	b004      	add	sp, #16
   291b2:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   291b4:	2d01      	cmp	r5, #1
   291b6:	d1fb      	bne.n	291b0 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   291b8:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   291bc:	b004      	add	sp, #16
   291be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   291c2:	f7f5 baf1 	b.w	1e7a8 <virtqueue_add_consumed_buffer>

000291c6 <rpmsg_virtio_release_rx_buffer>:
{
   291c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   291c8:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   291ca:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   291ce:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   291d2:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   291d4:	b2b6      	uxth	r6, r6
{
   291d6:	460d      	mov	r5, r1
   291d8:	f7ff ff4f 	bl	2907a <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   291dc:	4631      	mov	r1, r6
   291de:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   291e2:	f7ff fde5 	bl	28db0 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   291e6:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   291e8:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   291ea:	f1a5 0110 	sub.w	r1, r5, #16
   291ee:	4620      	mov	r0, r4
   291f0:	f7ff ffcd 	bl	2918e <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   291f4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   291f8:	f7ff fe31 	bl	28e5e <virtqueue_kick>
   291fc:	4638      	mov	r0, r7
}
   291fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29202:	f7ff bf38 	b.w	29076 <k_sem_give>

00029206 <rpmsg_virtio_shm_pool_get_buffer>:
{
   29206:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   29208:	b148      	cbz	r0, 2921e <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2920a:	b149      	cbz	r1, 29220 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2920c:	6843      	ldr	r3, [r0, #4]
   2920e:	428b      	cmp	r3, r1
   29210:	d306      	bcc.n	29220 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   29212:	6882      	ldr	r2, [r0, #8]
   29214:	6804      	ldr	r4, [r0, #0]
   29216:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   29218:	1a5b      	subs	r3, r3, r1
   2921a:	6043      	str	r3, [r0, #4]
	return buffer;
   2921c:	18a0      	adds	r0, r4, r2
}
   2921e:	bd10      	pop	{r4, pc}
		return NULL;
   29220:	2000      	movs	r0, #0
   29222:	e7fc      	b.n	2921e <rpmsg_virtio_shm_pool_get_buffer+0x18>

00029224 <rpmsg_virtio_get_tx_payload_buffer>:
{
   29224:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29228:	4605      	mov	r5, r0
   2922a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2922e:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   29230:	6a03      	ldr	r3, [r0, #32]
   29232:	4617      	mov	r7, r2
   29234:	681b      	ldr	r3, [r3, #0]
   29236:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   29238:	0743      	lsls	r3, r0, #29
   2923a:	d403      	bmi.n	29244 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2923c:	2000      	movs	r0, #0
}
   2923e:	b002      	add	sp, #8
   29240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   29244:	f643 2398 	movw	r3, #15000	; 0x3a98
   29248:	2f00      	cmp	r7, #0
   2924a:	bf18      	it	ne
   2924c:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2924e:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   29252:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   29256:	4640      	mov	r0, r8
   29258:	f7ff ff0f 	bl	2907a <__metal_mutex_acquire>
	return list->next == list;
   2925c:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   29260:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   29264:	4554      	cmp	r4, sl
   29266:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2926a:	d025      	beq.n	292b8 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   2926c:	b324      	cbz	r4, 292b8 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   2926e:	e9d4 2300 	ldrd	r2, r3, [r4]
   29272:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   29274:	6822      	ldr	r2, [r4, #0]
   29276:	601a      	str	r2, [r3, #0]
	node->next = node;
   29278:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   2927c:	f1b9 0f00 	cmp.w	r9, #0
   29280:	d10e      	bne.n	292a0 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   29282:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   29286:	6033      	str	r3, [r6, #0]
   29288:	4640      	mov	r0, r8
   2928a:	f7ff fef4 	bl	29076 <k_sem_give>
	rp_hdr->reserved = idx;
   2928e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   29292:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   29296:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   29298:	6833      	ldr	r3, [r6, #0]
   2929a:	3b10      	subs	r3, #16
   2929c:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2929e:	e7ce      	b.n	2923e <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   292a0:	f1b9 0f01 	cmp.w	r9, #1
   292a4:	d1f0      	bne.n	29288 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   292a6:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   292a8:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   292ac:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   292b0:	f7ff fd7e 	bl	28db0 <virtqueue_get_buffer_length>
   292b4:	6030      	str	r0, [r6, #0]
   292b6:	e7e7      	b.n	29288 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   292b8:	f1b9 0f00 	cmp.w	r9, #0
   292bc:	d12a      	bne.n	29314 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   292be:	4631      	mov	r1, r6
   292c0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   292c4:	f10d 0206 	add.w	r2, sp, #6
   292c8:	f7ff fd38 	bl	28d3c <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   292cc:	4604      	mov	r4, r0
   292ce:	2800      	cmp	r0, #0
   292d0:	d1da      	bne.n	29288 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   292d2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   292d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   292d8:	b953      	cbnz	r3, 292f0 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   292da:	4640      	mov	r0, r8
   292dc:	f7ff fecb 	bl	29076 <k_sem_give>
		if (rp_hdr || !tick_count)
   292e0:	2f00      	cmp	r7, #0
   292e2:	d0ab      	beq.n	2923c <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   292e4:	2021      	movs	r0, #33	; 0x21
   292e6:	2100      	movs	r1, #0
   292e8:	f7f8 fc98 	bl	21c1c <z_impl_k_sleep>
		tick_count--;
   292ec:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   292ee:	e7b2      	b.n	29256 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   292f0:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   292f4:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   292f8:	f7ff ff85 	bl	29206 <rpmsg_virtio_shm_pool_get_buffer>
   292fc:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   292fe:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   29302:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   29306:	6033      	str	r3, [r6, #0]
   29308:	4640      	mov	r0, r8
   2930a:	f7ff feb4 	bl	29076 <k_sem_give>
		if (rp_hdr || !tick_count)
   2930e:	2c00      	cmp	r4, #0
   29310:	d0e6      	beq.n	292e0 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   29312:	e7bc      	b.n	2928e <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   29314:	f1b9 0f01 	cmp.w	r9, #1
   29318:	d1df      	bne.n	292da <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   2931a:	4632      	mov	r2, r6
   2931c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   29320:	f10d 0106 	add.w	r1, sp, #6
   29324:	f7ff fd49 	bl	28dba <virtqueue_get_available_buffer>
   29328:	4604      	mov	r4, r0
   2932a:	e7ed      	b.n	29308 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0002932c <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   2932c:	b120      	cbz	r0, 29338 <rpmsg_virtio_init_shm_pool+0xc>
   2932e:	b119      	cbz	r1, 29338 <rpmsg_virtio_init_shm_pool+0xc>
   29330:	b112      	cbz	r2, 29338 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   29332:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   29336:	6001      	str	r1, [r0, #0]
}
   29338:	4770      	bx	lr

0002933a <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   2933a:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   2933c:	4604      	mov	r4, r0
   2933e:	b918      	cbnz	r0, 29348 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   29340:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   29342:	3834      	subs	r0, #52	; 0x34
   29344:	f7ff fe78 	bl	29038 <rpmsg_destroy_ept>
	return list->next == list;
   29348:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   2934a:	4284      	cmp	r4, r0
   2934c:	d1f9      	bne.n	29342 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   2934e:	2300      	movs	r3, #0
		rvdev->svq = 0;
   29350:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   29354:	e7f4      	b.n	29340 <rpmsg_deinit_vdev+0x6>

00029356 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   29356:	f7f5 bd99 	b.w	1ee8c <_DoInit>

0002935a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2935a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2935c:	f7ff fffb 	bl	29356 <SEGGER_RTT_Init>

	return 0;
}
   29360:	2000      	movs	r0, #0
   29362:	bd08      	pop	{r3, pc}

00029364 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   29364:	4770      	bx	lr

00029366 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   29366:	b140      	cbz	r0, 2937a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29368:	68c3      	ldr	r3, [r0, #12]
   2936a:	7858      	ldrb	r0, [r3, #1]
   2936c:	f010 0001 	ands.w	r0, r0, #1
   29370:	bf1e      	ittt	ne
   29372:	7818      	ldrbne	r0, [r3, #0]
   29374:	fab0 f080 	clzne	r0, r0
   29378:	0940      	lsrne	r0, r0, #5
}
   2937a:	4770      	bx	lr

0002937c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2937c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2937e:	ab0b      	add	r3, sp, #44	; 0x2c
   29380:	9305      	str	r3, [sp, #20]
   29382:	9303      	str	r3, [sp, #12]
   29384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29386:	2201      	movs	r2, #1
   29388:	9302      	str	r3, [sp, #8]
   2938a:	2300      	movs	r3, #0
   2938c:	4618      	mov	r0, r3
   2938e:	e9cd 3300 	strd	r3, r3, [sp]
   29392:	f7e4 ffe9 	bl	e368 <z_impl_z_log_msg_runtime_vcreate>
}
   29396:	b007      	add	sp, #28
   29398:	f85d fb04 	ldr.w	pc, [sp], #4

0002939c <z_early_memset>:
   2939c:	f000 ba5f 	b.w	2985e <memset>

000293a0 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   293a0:	f000 ba23 	b.w	297ea <memcpy>

000293a4 <k_heap_init>:
{
   293a4:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   293a6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   293aa:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   293ae:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   293b0:	f7e3 bd42 	b.w	ce38 <sys_heap_init>

000293b4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   293b4:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   293b8:	4313      	orrs	r3, r2
   293ba:	f013 0303 	ands.w	r3, r3, #3
   293be:	d10c      	bne.n	293da <create_free_list+0x26>
	slab->free_list = NULL;
   293c0:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   293c2:	68c1      	ldr	r1, [r0, #12]
   293c4:	4299      	cmp	r1, r3
   293c6:	d801      	bhi.n	293cc <create_free_list+0x18>
	return 0;
   293c8:	2000      	movs	r0, #0
   293ca:	4770      	bx	lr
		*(char **)p = slab->free_list;
   293cc:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   293ce:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   293d0:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   293d2:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   293d4:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   293d6:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   293d8:	e7f3      	b.n	293c2 <create_free_list+0xe>
		return -EINVAL;
   293da:	f06f 0015 	mvn.w	r0, #21
}
   293de:	4770      	bx	lr

000293e0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   293e0:	f3ef 8005 	mrs	r0, IPSR
}
   293e4:	3800      	subs	r0, #0
   293e6:	bf18      	it	ne
   293e8:	2001      	movne	r0, #1
   293ea:	4770      	bx	lr

000293ec <z_impl_k_thread_name_set>:
}
   293ec:	f06f 0057 	mvn.w	r0, #87	; 0x57
   293f0:	4770      	bx	lr

000293f2 <k_thread_name_get>:
}
   293f2:	2000      	movs	r0, #0
   293f4:	4770      	bx	lr

000293f6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   293f6:	f7f7 bd71 	b.w	20edc <z_sched_start>

000293fa <z_pm_save_idle_exit>:
{
   293fa:	b508      	push	{r3, lr}
	pm_system_resume();
   293fc:	f7e6 fb2a 	bl	fa54 <pm_system_resume>
}
   29400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   29404:	f7ff b89e 	b.w	28544 <sys_clock_idle_exit>

00029408 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   29408:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2940c:	428b      	cmp	r3, r1
   2940e:	d001      	beq.n	29414 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   29410:	f7f8 b866 	b.w	214e0 <z_set_prio>
}
   29414:	2000      	movs	r0, #0
   29416:	4770      	bx	lr

00029418 <z_impl_k_mutex_init>:
{
   29418:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2941a:	2000      	movs	r0, #0
   2941c:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   29420:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   29424:	4770      	bx	lr

00029426 <z_queue_node_peek>:
{
   29426:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   29428:	4604      	mov	r4, r0
   2942a:	b130      	cbz	r0, 2943a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2942c:	6802      	ldr	r2, [r0, #0]
   2942e:	0793      	lsls	r3, r2, #30
   29430:	d003      	beq.n	2943a <z_queue_node_peek+0x14>
		ret = anode->data;
   29432:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   29434:	b109      	cbz	r1, 2943a <z_queue_node_peek+0x14>
			k_free(anode);
   29436:	f000 f9bc 	bl	297b2 <k_free>
}
   2943a:	4620      	mov	r0, r4
   2943c:	bd10      	pop	{r4, pc}

0002943e <z_impl_k_queue_init>:
	list->head = NULL;
   2943e:	2300      	movs	r3, #0
	list->tail = NULL;
   29440:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   29444:	6083      	str	r3, [r0, #8]
   29446:	f100 030c 	add.w	r3, r0, #12
   2944a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2944e:	f100 0314 	add.w	r3, r0, #20
   29452:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   29456:	4770      	bx	lr

00029458 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   29458:	2301      	movs	r3, #1
{
   2945a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2945c:	9300      	str	r3, [sp, #0]
   2945e:	2300      	movs	r3, #0
{
   29460:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   29462:	4619      	mov	r1, r3
   29464:	f7f6 fbe2 	bl	1fc2c <queue_insert>
}
   29468:	b003      	add	sp, #12
   2946a:	f85d fb04 	ldr.w	pc, [sp], #4

0002946e <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   2946e:	2300      	movs	r3, #0
{
   29470:	b507      	push	{r0, r1, r2, lr}
   29472:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   29474:	9300      	str	r3, [sp, #0]
   29476:	4619      	mov	r1, r3
   29478:	f7f6 fbd8 	bl	1fc2c <queue_insert>
}
   2947c:	b003      	add	sp, #12
   2947e:	f85d fb04 	ldr.w	pc, [sp], #4

00029482 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   29482:	b15a      	cbz	r2, 2949c <z_impl_k_sem_init+0x1a>
   29484:	428a      	cmp	r2, r1
   29486:	d309      	bcc.n	2949c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   29488:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2948c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   29490:	e9c0 0000 	strd	r0, r0, [r0]
   29494:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29498:	2000      	movs	r0, #0
   2949a:	4770      	bx	lr
		return -EINVAL;
   2949c:	f06f 0015 	mvn.w	r0, #21
}
   294a0:	4770      	bx	lr

000294a2 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   294a2:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   294a4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   294a6:	408b      	lsls	r3, r1
   294a8:	ea22 0303 	bic.w	r3, r2, r3
   294ac:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   294ae:	fa22 f001 	lsr.w	r0, r2, r1
}
   294b2:	f000 0001 	and.w	r0, r0, #1
   294b6:	4770      	bx	lr

000294b8 <unschedule_locked>:
{
   294b8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   294ba:	2103      	movs	r1, #3
{
   294bc:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   294be:	300c      	adds	r0, #12
   294c0:	f7ff ffef 	bl	294a2 <flag_test_and_clear>
   294c4:	4604      	mov	r4, r0
   294c6:	b118      	cbz	r0, 294d0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   294c8:	f105 0010 	add.w	r0, r5, #16
   294cc:	f7f8 fe46 	bl	2215c <z_abort_timeout>
}
   294d0:	4620      	mov	r0, r4
   294d2:	bd38      	pop	{r3, r4, r5, pc}

000294d4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   294d4:	b120      	cbz	r0, 294e0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   294d6:	2200      	movs	r2, #0
   294d8:	3090      	adds	r0, #144	; 0x90
   294da:	4611      	mov	r1, r2
   294dc:	f7f8 bca0 	b.w	21e20 <z_sched_wake>
}
   294e0:	4770      	bx	lr

000294e2 <cancel_async_locked>:
{
   294e2:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   294e4:	68c3      	ldr	r3, [r0, #12]
{
   294e6:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   294e8:	f3c3 0640 	ubfx	r6, r3, #1, #1
   294ec:	079b      	lsls	r3, r3, #30
   294ee:	d416      	bmi.n	2951e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   294f0:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   294f2:	2102      	movs	r1, #2
   294f4:	300c      	adds	r0, #12
   294f6:	f7ff ffd4 	bl	294a2 <flag_test_and_clear>
   294fa:	b180      	cbz	r0, 2951e <cancel_async_locked+0x3c>
	return list->head;
   294fc:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29500:	b16a      	cbz	r2, 2951e <cancel_async_locked+0x3c>
   29502:	4294      	cmp	r4, r2
   29504:	d11d      	bne.n	29542 <cancel_async_locked+0x60>
	return node->next;
   29506:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   29508:	b99e      	cbnz	r6, 29532 <cancel_async_locked+0x50>
   2950a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   2950e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   29512:	429c      	cmp	r4, r3
   29514:	d101      	bne.n	2951a <cancel_async_locked+0x38>
	list->tail = node;
   29516:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   2951a:	2300      	movs	r3, #0
   2951c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2951e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   29520:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   29524:	bf1e      	ittt	ne
   29526:	f043 0302 	orrne.w	r3, r3, #2
   2952a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2952c:	f040 0002 	orrne.w	r0, r0, #2
}
   29530:	bd70      	pop	{r4, r5, r6, pc}
   29532:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   29534:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   29538:	4294      	cmp	r4, r2
	list->tail = node;
   2953a:	bf08      	it	eq
   2953c:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   29540:	e7eb      	b.n	2951a <cancel_async_locked+0x38>
	return node->next;
   29542:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29544:	6812      	ldr	r2, [r2, #0]
   29546:	e7db      	b.n	29500 <cancel_async_locked+0x1e>

00029548 <k_work_submit_to_queue>:
{
   29548:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2954a:	f7f6 ff87 	bl	2045c <z_work_submit_to_queue>
	if (ret > 0) {
   2954e:	1e04      	subs	r4, r0, #0
   29550:	dd09      	ble.n	29566 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   29552:	f04f 0320 	mov.w	r3, #32
   29556:	f3ef 8011 	mrs	r0, BASEPRI
   2955a:	f383 8812 	msr	BASEPRI_MAX, r3
   2955e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   29562:	f000 f80d 	bl	29580 <z_reschedule_irqlock>
}
   29566:	4620      	mov	r0, r4
   29568:	bd10      	pop	{r4, pc}

0002956a <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2956a:	f7f6 bf31 	b.w	203d0 <k_work_busy_get>

0002956e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2956e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   29572:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   29576:	4283      	cmp	r3, r0
		return b2 - b1;
   29578:	bf14      	ite	ne
   2957a:	1ac0      	subne	r0, r0, r3
	return 0;
   2957c:	2000      	moveq	r0, #0
}
   2957e:	4770      	bx	lr

00029580 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29580:	4603      	mov	r3, r0
   29582:	b920      	cbnz	r0, 2958e <z_reschedule_irqlock+0xe>
   29584:	f3ef 8205 	mrs	r2, IPSR
   29588:	b90a      	cbnz	r2, 2958e <z_reschedule_irqlock+0xe>
   2958a:	f7e6 be4d 	b.w	10228 <arch_swap>
	__asm__ volatile(
   2958e:	f383 8811 	msr	BASEPRI, r3
   29592:	f3bf 8f6f 	isb	sy
}
   29596:	4770      	bx	lr

00029598 <z_reschedule_unlocked>:
	__asm__ volatile(
   29598:	f04f 0320 	mov.w	r3, #32
   2959c:	f3ef 8011 	mrs	r0, BASEPRI
   295a0:	f383 8812 	msr	BASEPRI_MAX, r3
   295a4:	f3bf 8f6f 	isb	sy
   295a8:	f7ff bfea 	b.w	29580 <z_reschedule_irqlock>

000295ac <z_unpend_all>:
{
   295ac:	b538      	push	{r3, r4, r5, lr}
   295ae:	4605      	mov	r5, r0
	int need_sched = 0;
   295b0:	2000      	movs	r0, #0
	return list->head == list;
   295b2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   295b4:	42a5      	cmp	r5, r4
   295b6:	d000      	beq.n	295ba <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   295b8:	b904      	cbnz	r4, 295bc <z_unpend_all+0x10>
}
   295ba:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   295bc:	4620      	mov	r0, r4
   295be:	f7f8 f8a9 	bl	21714 <z_unpend_thread>
		z_ready_thread(thread);
   295c2:	4620      	mov	r0, r4
   295c4:	f7f7 fbbc 	bl	20d40 <z_ready_thread>
		need_sched = 1;
   295c8:	2001      	movs	r0, #1
   295ca:	e7f2      	b.n	295b2 <z_unpend_all+0x6>

000295cc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   295cc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   295ce:	f7f8 ff47 	bl	22460 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   295d2:	bd08      	pop	{r3, pc}

000295d4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   295d4:	f7f8 bf44 	b.w	22460 <sys_clock_tick_get>

000295d8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   295d8:	b108      	cbz	r0, 295de <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   295da:	f7e4 bb9d 	b.w	dd18 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   295de:	4770      	bx	lr

000295e0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   295e0:	f1b1 3fff 	cmp.w	r1, #4294967295
   295e4:	bf08      	it	eq
   295e6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   295ea:	b538      	push	{r3, r4, r5, lr}
   295ec:	460c      	mov	r4, r1
   295ee:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   295f0:	d014      	beq.n	2961c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   295f2:	4308      	orrs	r0, r1
   295f4:	d103      	bne.n	295fe <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   295f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   295fa:	f7f8 bf31 	b.w	22460 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   295fe:	f06f 0001 	mvn.w	r0, #1
   29602:	f04f 33ff 	mov.w	r3, #4294967295
   29606:	1b40      	subs	r0, r0, r5
   29608:	eb63 0101 	sbc.w	r1, r3, r1
   2960c:	2900      	cmp	r1, #0
   2960e:	da04      	bge.n	2961a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   29610:	f7f8 ff26 	bl	22460 <sys_clock_tick_get>
   29614:	1940      	adds	r0, r0, r5
   29616:	eb41 0104 	adc.w	r1, r1, r4
}
   2961a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2961c:	f04f 30ff 	mov.w	r0, #4294967295
   29620:	4601      	mov	r1, r0
   29622:	e7fa      	b.n	2961a <sys_clock_timeout_end_calc+0x3a>

00029624 <k_timer_init>:
	timer->status = 0U;
   29624:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   29626:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2962a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2962e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   29632:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   29636:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   29638:	6343      	str	r3, [r0, #52]	; 0x34
}
   2963a:	4770      	bx	lr

0002963c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2963c:	b510      	push	{r4, lr}
   2963e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   29640:	f7f8 fd8c 	bl	2215c <z_abort_timeout>

	if (inactive) {
   29644:	b9b0      	cbnz	r0, 29674 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   29646:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29648:	b10b      	cbz	r3, 2964e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2964a:	4620      	mov	r0, r4
   2964c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2964e:	f104 0018 	add.w	r0, r4, #24
   29652:	f7f8 f901 	bl	21858 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   29656:	b168      	cbz	r0, 29674 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   29658:	f7f7 fb72 	bl	20d40 <z_ready_thread>
   2965c:	f04f 0320 	mov.w	r3, #32
   29660:	f3ef 8011 	mrs	r0, BASEPRI
   29664:	f383 8812 	msr	BASEPRI_MAX, r3
   29668:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2966c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29670:	f7ff bf86 	b.w	29580 <z_reschedule_irqlock>
   29674:	bd10      	pop	{r4, pc}

00029676 <add_event>:
{
   29676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29678:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2967a:	e9d0 1300 	ldrd	r1, r3, [r0]
   2967e:	4288      	cmp	r0, r1
   29680:	4604      	mov	r4, r0
   29682:	d105      	bne.n	29690 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   29684:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   29686:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2968a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2968c:	6065      	str	r5, [r4, #4]
   2968e:	e01d      	b.n	296cc <add_event+0x56>
	if ((pending == NULL) ||
   29690:	2b00      	cmp	r3, #0
   29692:	d0f7      	beq.n	29684 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29694:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29696:	b100      	cbz	r0, 2969a <add_event+0x24>
   29698:	3860      	subs	r0, #96	; 0x60
   2969a:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2969e:	4639      	mov	r1, r7
   296a0:	f7ff ff65 	bl	2956e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   296a4:	2800      	cmp	r0, #0
   296a6:	dced      	bgt.n	29684 <add_event+0xe>
	return list->head == list;
   296a8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   296aa:	42b4      	cmp	r4, r6
   296ac:	d0ea      	beq.n	29684 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   296ae:	2e00      	cmp	r6, #0
   296b0:	d0e8      	beq.n	29684 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   296b2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   296b4:	b101      	cbz	r1, 296b8 <add_event+0x42>
   296b6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   296b8:	4638      	mov	r0, r7
   296ba:	f7ff ff58 	bl	2956e <z_sched_prio_cmp>
   296be:	2800      	cmp	r0, #0
   296c0:	dd05      	ble.n	296ce <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   296c2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   296c4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   296c8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   296ca:	6075      	str	r5, [r6, #4]
}
   296cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   296ce:	6863      	ldr	r3, [r4, #4]
   296d0:	429e      	cmp	r6, r3
   296d2:	d0d7      	beq.n	29684 <add_event+0xe>
   296d4:	6836      	ldr	r6, [r6, #0]
   296d6:	e7ea      	b.n	296ae <add_event+0x38>

000296d8 <signal_poll_event>:
{
   296d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   296dc:	6884      	ldr	r4, [r0, #8]
{
   296de:	4605      	mov	r5, r0
   296e0:	460e      	mov	r6, r1
	if (poller != NULL) {
   296e2:	b144      	cbz	r4, 296f6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   296e4:	7863      	ldrb	r3, [r4, #1]
   296e6:	2b01      	cmp	r3, #1
   296e8:	d12e      	bne.n	29748 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   296ea:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   296ee:	f013 0302 	ands.w	r3, r3, #2
   296f2:	d10a      	bne.n	2970a <signal_poll_event+0x32>
		poller->is_polling = false;
   296f4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   296f6:	2000      	movs	r0, #0
	event->state |= state;
   296f8:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   296fa:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   296fc:	f3c3 3286 	ubfx	r2, r3, #14, #7
   29700:	4316      	orrs	r6, r2
   29702:	f366 3394 	bfi	r3, r6, #14, #7
   29706:	60eb      	str	r3, [r5, #12]
	return retcode;
   29708:	e03e      	b.n	29788 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2970a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2970e:	f1b3 3fff 	cmp.w	r3, #4294967295
   29712:	bf08      	it	eq
   29714:	f112 0f02 	cmneq.w	r2, #2
   29718:	d032      	beq.n	29780 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2971a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2971e:	4640      	mov	r0, r8
   29720:	f7f7 fff8 	bl	21714 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   29724:	2e08      	cmp	r6, #8
   29726:	bf0c      	ite	eq
   29728:	f06f 0303 	mvneq.w	r3, #3
   2972c:	2300      	movne	r3, #0
   2972e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   29730:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29734:	06db      	lsls	r3, r3, #27
   29736:	d109      	bne.n	2974c <signal_poll_event+0x74>
   29738:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2973c:	b937      	cbnz	r7, 2974c <signal_poll_event+0x74>
	z_ready_thread(thread);
   2973e:	4640      	mov	r0, r8
   29740:	f7f7 fafe 	bl	20d40 <z_ready_thread>
		poller->is_polling = false;
   29744:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   29746:	e7d6      	b.n	296f6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   29748:	2b02      	cmp	r3, #2
   2974a:	d001      	beq.n	29750 <signal_poll_event+0x78>
		poller->is_polling = false;
   2974c:	2300      	movs	r3, #0
   2974e:	e7d1      	b.n	296f4 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   29750:	7823      	ldrb	r3, [r4, #0]
   29752:	2b00      	cmp	r3, #0
   29754:	d0cf      	beq.n	296f6 <signal_poll_event+0x1e>
   29756:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2975a:	2f00      	cmp	r7, #0
   2975c:	d0f2      	beq.n	29744 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2975e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   29762:	f1a4 0914 	sub.w	r9, r4, #20
   29766:	f104 0014 	add.w	r0, r4, #20
   2976a:	f7f8 fcf7 	bl	2215c <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2976e:	4649      	mov	r1, r9
   29770:	4638      	mov	r0, r7
		twork->poll_result = 0;
   29772:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   29776:	f7f6 fe71 	bl	2045c <z_work_submit_to_queue>
		poller->is_polling = false;
   2977a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2977e:	e7ba      	b.n	296f6 <signal_poll_event+0x1e>
		poller->is_polling = false;
   29780:	2300      	movs	r3, #0
		return -EAGAIN;
   29782:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   29786:	7023      	strb	r3, [r4, #0]
}
   29788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002978c <z_handle_obj_poll_events>:
{
   2978c:	4603      	mov	r3, r0
	return list->head == list;
   2978e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   29790:	4283      	cmp	r3, r0
   29792:	d008      	beq.n	297a6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   29794:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29798:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2979a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2979c:	2300      	movs	r3, #0
	node->prev = NULL;
   2979e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   297a2:	f7ff bf99 	b.w	296d8 <signal_poll_event>
}
   297a6:	4770      	bx	lr

000297a8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   297a8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   297aa:	e9c0 0000 	strd	r0, r0, [r0]
   297ae:	6083      	str	r3, [r0, #8]
}
   297b0:	4770      	bx	lr

000297b2 <k_free>:
	if (ptr != NULL) {
   297b2:	b120      	cbz	r0, 297be <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   297b4:	1f01      	subs	r1, r0, #4
   297b6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   297ba:	f7f5 be1f 	b.w	1f3fc <k_heap_free>
}
   297be:	4770      	bx	lr

000297c0 <k_malloc>:
{
   297c0:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   297c2:	2004      	movs	r0, #4
   297c4:	f7f9 bb12 	b.w	22dec <k_aligned_alloc>

000297c8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   297c8:	4770      	bx	lr

000297ca <memcmp>:
   297ca:	3901      	subs	r1, #1
   297cc:	4402      	add	r2, r0
   297ce:	b510      	push	{r4, lr}
   297d0:	4290      	cmp	r0, r2
   297d2:	d101      	bne.n	297d8 <memcmp+0xe>
   297d4:	2000      	movs	r0, #0
   297d6:	e005      	b.n	297e4 <memcmp+0x1a>
   297d8:	7803      	ldrb	r3, [r0, #0]
   297da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   297de:	42a3      	cmp	r3, r4
   297e0:	d001      	beq.n	297e6 <memcmp+0x1c>
   297e2:	1b18      	subs	r0, r3, r4
   297e4:	bd10      	pop	{r4, pc}
   297e6:	3001      	adds	r0, #1
   297e8:	e7f2      	b.n	297d0 <memcmp+0x6>

000297ea <memcpy>:
   297ea:	440a      	add	r2, r1
   297ec:	1e43      	subs	r3, r0, #1
   297ee:	4291      	cmp	r1, r2
   297f0:	d100      	bne.n	297f4 <memcpy+0xa>
   297f2:	4770      	bx	lr
   297f4:	b510      	push	{r4, lr}
   297f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   297fa:	4291      	cmp	r1, r2
   297fc:	f803 4f01 	strb.w	r4, [r3, #1]!
   29800:	d1f9      	bne.n	297f6 <memcpy+0xc>
   29802:	bd10      	pop	{r4, pc}

00029804 <__memcpy_chk>:
   29804:	429a      	cmp	r2, r3
   29806:	b508      	push	{r3, lr}
   29808:	d901      	bls.n	2980e <__memcpy_chk+0xa>
   2980a:	f7e7 fc6b 	bl	110e4 <__chk_fail>
   2980e:	4281      	cmp	r1, r0
   29810:	d804      	bhi.n	2981c <__memcpy_chk+0x18>
   29812:	188b      	adds	r3, r1, r2
   29814:	4298      	cmp	r0, r3
   29816:	d3f8      	bcc.n	2980a <__memcpy_chk+0x6>
   29818:	4281      	cmp	r1, r0
   2981a:	d102      	bne.n	29822 <__memcpy_chk+0x1e>
   2981c:	1883      	adds	r3, r0, r2
   2981e:	4299      	cmp	r1, r3
   29820:	d3f3      	bcc.n	2980a <__memcpy_chk+0x6>
   29822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29826:	f7ff bfe0 	b.w	297ea <memcpy>

0002982a <memmove>:
   2982a:	4288      	cmp	r0, r1
   2982c:	b510      	push	{r4, lr}
   2982e:	eb01 0402 	add.w	r4, r1, r2
   29832:	d902      	bls.n	2983a <memmove+0x10>
   29834:	4284      	cmp	r4, r0
   29836:	4623      	mov	r3, r4
   29838:	d807      	bhi.n	2984a <memmove+0x20>
   2983a:	1e43      	subs	r3, r0, #1
   2983c:	42a1      	cmp	r1, r4
   2983e:	d008      	beq.n	29852 <memmove+0x28>
   29840:	f811 2b01 	ldrb.w	r2, [r1], #1
   29844:	f803 2f01 	strb.w	r2, [r3, #1]!
   29848:	e7f8      	b.n	2983c <memmove+0x12>
   2984a:	4402      	add	r2, r0
   2984c:	4601      	mov	r1, r0
   2984e:	428a      	cmp	r2, r1
   29850:	d100      	bne.n	29854 <memmove+0x2a>
   29852:	bd10      	pop	{r4, pc}
   29854:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   29858:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2985c:	e7f7      	b.n	2984e <memmove+0x24>

0002985e <memset>:
   2985e:	4402      	add	r2, r0
   29860:	4603      	mov	r3, r0
   29862:	4293      	cmp	r3, r2
   29864:	d100      	bne.n	29868 <memset+0xa>
   29866:	4770      	bx	lr
   29868:	f803 1b01 	strb.w	r1, [r3], #1
   2986c:	e7f9      	b.n	29862 <memset+0x4>

0002986e <_calloc_r>:
   2986e:	b538      	push	{r3, r4, r5, lr}
   29870:	fb02 f501 	mul.w	r5, r2, r1
   29874:	4629      	mov	r1, r5
   29876:	f7f9 fba5 	bl	22fc4 <_malloc_r>
   2987a:	4604      	mov	r4, r0
   2987c:	b118      	cbz	r0, 29886 <_calloc_r+0x18>
   2987e:	462a      	mov	r2, r5
   29880:	2100      	movs	r1, #0
   29882:	f7ff ffec 	bl	2985e <memset>
   29886:	4620      	mov	r0, r4
   29888:	bd38      	pop	{r3, r4, r5, pc}

0002988a <__cvt>:
   2988a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2988e:	b089      	sub	sp, #36	; 0x24
   29890:	2b00      	cmp	r3, #0
   29892:	461d      	mov	r5, r3
   29894:	4614      	mov	r4, r2
   29896:	bfba      	itte	lt
   29898:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2989c:	4614      	movlt	r4, r2
   2989e:	2300      	movge	r3, #0
   298a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   298a2:	bfbc      	itt	lt
   298a4:	461d      	movlt	r5, r3
   298a6:	232d      	movlt	r3, #45	; 0x2d
   298a8:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   298ac:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   298b0:	f028 0a20 	bic.w	sl, r8, #32
   298b4:	7013      	strb	r3, [r2, #0]
   298b6:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   298ba:	d005      	beq.n	298c8 <__cvt+0x3e>
   298bc:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   298c0:	d100      	bne.n	298c4 <__cvt+0x3a>
   298c2:	3601      	adds	r6, #1
   298c4:	2302      	movs	r3, #2
   298c6:	e000      	b.n	298ca <__cvt+0x40>
   298c8:	2303      	movs	r3, #3
   298ca:	aa07      	add	r2, sp, #28
   298cc:	9204      	str	r2, [sp, #16]
   298ce:	aa06      	add	r2, sp, #24
   298d0:	e9cd 3600 	strd	r3, r6, [sp]
   298d4:	e9cd 9202 	strd	r9, r2, [sp, #8]
   298d8:	462b      	mov	r3, r5
   298da:	4622      	mov	r2, r4
   298dc:	f7e0 f9cc 	bl	9c78 <_dtoa_r>
   298e0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   298e4:	4607      	mov	r7, r0
   298e6:	d119      	bne.n	2991c <__cvt+0x92>
   298e8:	f01b 0f01 	tst.w	fp, #1
   298ec:	d00e      	beq.n	2990c <__cvt+0x82>
   298ee:	eb07 0806 	add.w	r8, r7, r6
   298f2:	2200      	movs	r2, #0
   298f4:	2300      	movs	r3, #0
   298f6:	4620      	mov	r0, r4
   298f8:	4629      	mov	r1, r5
   298fa:	f7df fb69 	bl	8fd0 <__aeabi_dcmpeq>
   298fe:	b108      	cbz	r0, 29904 <__cvt+0x7a>
   29900:	f8cd 801c 	str.w	r8, [sp, #28]
   29904:	2230      	movs	r2, #48	; 0x30
   29906:	9b07      	ldr	r3, [sp, #28]
   29908:	4543      	cmp	r3, r8
   2990a:	d321      	bcc.n	29950 <__cvt+0xc6>
   2990c:	9b07      	ldr	r3, [sp, #28]
   2990e:	4638      	mov	r0, r7
   29910:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   29912:	1bdb      	subs	r3, r3, r7
   29914:	6013      	str	r3, [r2, #0]
   29916:	b009      	add	sp, #36	; 0x24
   29918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2991c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   29920:	d0e2      	beq.n	298e8 <__cvt+0x5e>
   29922:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   29926:	eb00 0806 	add.w	r8, r0, r6
   2992a:	d1e2      	bne.n	298f2 <__cvt+0x68>
   2992c:	7803      	ldrb	r3, [r0, #0]
   2992e:	2b30      	cmp	r3, #48	; 0x30
   29930:	d10a      	bne.n	29948 <__cvt+0xbe>
   29932:	2200      	movs	r2, #0
   29934:	2300      	movs	r3, #0
   29936:	4620      	mov	r0, r4
   29938:	4629      	mov	r1, r5
   2993a:	f7df fb49 	bl	8fd0 <__aeabi_dcmpeq>
   2993e:	b918      	cbnz	r0, 29948 <__cvt+0xbe>
   29940:	f1c6 0601 	rsb	r6, r6, #1
   29944:	f8c9 6000 	str.w	r6, [r9]
   29948:	f8d9 3000 	ldr.w	r3, [r9]
   2994c:	4498      	add	r8, r3
   2994e:	e7d0      	b.n	298f2 <__cvt+0x68>
   29950:	1c59      	adds	r1, r3, #1
   29952:	9107      	str	r1, [sp, #28]
   29954:	701a      	strb	r2, [r3, #0]
   29956:	e7d6      	b.n	29906 <__cvt+0x7c>

00029958 <__exponent>:
   29958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2995a:	2900      	cmp	r1, #0
   2995c:	7002      	strb	r2, [r0, #0]
   2995e:	bfba      	itte	lt
   29960:	4249      	neglt	r1, r1
   29962:	232d      	movlt	r3, #45	; 0x2d
   29964:	232b      	movge	r3, #43	; 0x2b
   29966:	2909      	cmp	r1, #9
   29968:	7043      	strb	r3, [r0, #1]
   2996a:	dd28      	ble.n	299be <__exponent+0x66>
   2996c:	f10d 0307 	add.w	r3, sp, #7
   29970:	270a      	movs	r7, #10
   29972:	461d      	mov	r5, r3
   29974:	461a      	mov	r2, r3
   29976:	3b01      	subs	r3, #1
   29978:	fbb1 f6f7 	udiv	r6, r1, r7
   2997c:	fb07 1416 	mls	r4, r7, r6, r1
   29980:	3430      	adds	r4, #48	; 0x30
   29982:	f802 4c01 	strb.w	r4, [r2, #-1]
   29986:	460c      	mov	r4, r1
   29988:	4631      	mov	r1, r6
   2998a:	2c63      	cmp	r4, #99	; 0x63
   2998c:	dcf2      	bgt.n	29974 <__exponent+0x1c>
   2998e:	3130      	adds	r1, #48	; 0x30
   29990:	1e94      	subs	r4, r2, #2
   29992:	f803 1c01 	strb.w	r1, [r3, #-1]
   29996:	1c41      	adds	r1, r0, #1
   29998:	4623      	mov	r3, r4
   2999a:	42ab      	cmp	r3, r5
   2999c:	d30a      	bcc.n	299b4 <__exponent+0x5c>
   2999e:	f10d 0309 	add.w	r3, sp, #9
   299a2:	1a9b      	subs	r3, r3, r2
   299a4:	42ac      	cmp	r4, r5
   299a6:	bf88      	it	hi
   299a8:	2300      	movhi	r3, #0
   299aa:	3302      	adds	r3, #2
   299ac:	4403      	add	r3, r0
   299ae:	1a18      	subs	r0, r3, r0
   299b0:	b003      	add	sp, #12
   299b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   299b4:	f813 6b01 	ldrb.w	r6, [r3], #1
   299b8:	f801 6f01 	strb.w	r6, [r1, #1]!
   299bc:	e7ed      	b.n	2999a <__exponent+0x42>
   299be:	2330      	movs	r3, #48	; 0x30
   299c0:	3130      	adds	r1, #48	; 0x30
   299c2:	7083      	strb	r3, [r0, #2]
   299c4:	1d03      	adds	r3, r0, #4
   299c6:	70c1      	strb	r1, [r0, #3]
   299c8:	e7f1      	b.n	299ae <__exponent+0x56>

000299ca <_printf_common>:
   299ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   299ce:	4616      	mov	r6, r2
   299d0:	4698      	mov	r8, r3
   299d2:	688a      	ldr	r2, [r1, #8]
   299d4:	4607      	mov	r7, r0
   299d6:	690b      	ldr	r3, [r1, #16]
   299d8:	460c      	mov	r4, r1
   299da:	f8dd 9020 	ldr.w	r9, [sp, #32]
   299de:	4293      	cmp	r3, r2
   299e0:	bfb8      	it	lt
   299e2:	4613      	movlt	r3, r2
   299e4:	6033      	str	r3, [r6, #0]
   299e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   299ea:	b10a      	cbz	r2, 299f0 <_printf_common+0x26>
   299ec:	3301      	adds	r3, #1
   299ee:	6033      	str	r3, [r6, #0]
   299f0:	6823      	ldr	r3, [r4, #0]
   299f2:	0699      	lsls	r1, r3, #26
   299f4:	bf42      	ittt	mi
   299f6:	6833      	ldrmi	r3, [r6, #0]
   299f8:	3302      	addmi	r3, #2
   299fa:	6033      	strmi	r3, [r6, #0]
   299fc:	6825      	ldr	r5, [r4, #0]
   299fe:	f015 0506 	ands.w	r5, r5, #6
   29a02:	d106      	bne.n	29a12 <_printf_common+0x48>
   29a04:	f104 0a19 	add.w	sl, r4, #25
   29a08:	68e3      	ldr	r3, [r4, #12]
   29a0a:	6832      	ldr	r2, [r6, #0]
   29a0c:	1a9b      	subs	r3, r3, r2
   29a0e:	42ab      	cmp	r3, r5
   29a10:	dc2b      	bgt.n	29a6a <_printf_common+0xa0>
   29a12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   29a16:	6822      	ldr	r2, [r4, #0]
   29a18:	3b00      	subs	r3, #0
   29a1a:	bf18      	it	ne
   29a1c:	2301      	movne	r3, #1
   29a1e:	0692      	lsls	r2, r2, #26
   29a20:	d430      	bmi.n	29a84 <_printf_common+0xba>
   29a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
   29a26:	4641      	mov	r1, r8
   29a28:	4638      	mov	r0, r7
   29a2a:	47c8      	blx	r9
   29a2c:	3001      	adds	r0, #1
   29a2e:	d023      	beq.n	29a78 <_printf_common+0xae>
   29a30:	6823      	ldr	r3, [r4, #0]
   29a32:	341a      	adds	r4, #26
   29a34:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   29a38:	f003 0306 	and.w	r3, r3, #6
   29a3c:	2b04      	cmp	r3, #4
   29a3e:	bf0a      	itet	eq
   29a40:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   29a44:	2500      	movne	r5, #0
   29a46:	6833      	ldreq	r3, [r6, #0]
   29a48:	f04f 0600 	mov.w	r6, #0
   29a4c:	bf08      	it	eq
   29a4e:	1aed      	subeq	r5, r5, r3
   29a50:	f854 3c12 	ldr.w	r3, [r4, #-18]
   29a54:	bf08      	it	eq
   29a56:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   29a5a:	4293      	cmp	r3, r2
   29a5c:	bfc4      	itt	gt
   29a5e:	1a9b      	subgt	r3, r3, r2
   29a60:	18ed      	addgt	r5, r5, r3
   29a62:	42b5      	cmp	r5, r6
   29a64:	d11a      	bne.n	29a9c <_printf_common+0xd2>
   29a66:	2000      	movs	r0, #0
   29a68:	e008      	b.n	29a7c <_printf_common+0xb2>
   29a6a:	2301      	movs	r3, #1
   29a6c:	4652      	mov	r2, sl
   29a6e:	4641      	mov	r1, r8
   29a70:	4638      	mov	r0, r7
   29a72:	47c8      	blx	r9
   29a74:	3001      	adds	r0, #1
   29a76:	d103      	bne.n	29a80 <_printf_common+0xb6>
   29a78:	f04f 30ff 	mov.w	r0, #4294967295
   29a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29a80:	3501      	adds	r5, #1
   29a82:	e7c1      	b.n	29a08 <_printf_common+0x3e>
   29a84:	18e1      	adds	r1, r4, r3
   29a86:	1c5a      	adds	r2, r3, #1
   29a88:	2030      	movs	r0, #48	; 0x30
   29a8a:	3302      	adds	r3, #2
   29a8c:	4422      	add	r2, r4
   29a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   29a92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   29a96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   29a9a:	e7c2      	b.n	29a22 <_printf_common+0x58>
   29a9c:	2301      	movs	r3, #1
   29a9e:	4622      	mov	r2, r4
   29aa0:	4641      	mov	r1, r8
   29aa2:	4638      	mov	r0, r7
   29aa4:	47c8      	blx	r9
   29aa6:	3001      	adds	r0, #1
   29aa8:	d0e6      	beq.n	29a78 <_printf_common+0xae>
   29aaa:	3601      	adds	r6, #1
   29aac:	e7d9      	b.n	29a62 <_printf_common+0x98>

00029aae <strcpy>:
   29aae:	4603      	mov	r3, r0
   29ab0:	f811 2b01 	ldrb.w	r2, [r1], #1
   29ab4:	f803 2b01 	strb.w	r2, [r3], #1
   29ab8:	2a00      	cmp	r2, #0
   29aba:	d1f9      	bne.n	29ab0 <strcpy+0x2>
   29abc:	4770      	bx	lr

00029abe <strncmp>:
   29abe:	b510      	push	{r4, lr}
   29ac0:	b16a      	cbz	r2, 29ade <strncmp+0x20>
   29ac2:	3901      	subs	r1, #1
   29ac4:	1884      	adds	r4, r0, r2
   29ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
   29aca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   29ace:	429a      	cmp	r2, r3
   29ad0:	d103      	bne.n	29ada <strncmp+0x1c>
   29ad2:	42a0      	cmp	r0, r4
   29ad4:	d001      	beq.n	29ada <strncmp+0x1c>
   29ad6:	2a00      	cmp	r2, #0
   29ad8:	d1f5      	bne.n	29ac6 <strncmp+0x8>
   29ada:	1ad0      	subs	r0, r2, r3
   29adc:	bd10      	pop	{r4, pc}
   29ade:	4610      	mov	r0, r2
   29ae0:	e7fc      	b.n	29adc <strncmp+0x1e>

00029ae2 <strncpy>:
   29ae2:	3901      	subs	r1, #1
   29ae4:	4603      	mov	r3, r0
   29ae6:	b510      	push	{r4, lr}
   29ae8:	b132      	cbz	r2, 29af8 <strncpy+0x16>
   29aea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29aee:	3a01      	subs	r2, #1
   29af0:	f803 4b01 	strb.w	r4, [r3], #1
   29af4:	2c00      	cmp	r4, #0
   29af6:	d1f7      	bne.n	29ae8 <strncpy+0x6>
   29af8:	441a      	add	r2, r3
   29afa:	2100      	movs	r1, #0
   29afc:	4293      	cmp	r3, r2
   29afe:	d100      	bne.n	29b02 <strncpy+0x20>
   29b00:	bd10      	pop	{r4, pc}
   29b02:	f803 1b01 	strb.w	r1, [r3], #1
   29b06:	e7f9      	b.n	29afc <strncpy+0x1a>

00029b08 <strnlen>:
   29b08:	4602      	mov	r2, r0
   29b0a:	4401      	add	r1, r0
   29b0c:	b510      	push	{r4, lr}
   29b0e:	428a      	cmp	r2, r1
   29b10:	4613      	mov	r3, r2
   29b12:	d003      	beq.n	29b1c <strnlen+0x14>
   29b14:	781c      	ldrb	r4, [r3, #0]
   29b16:	3201      	adds	r2, #1
   29b18:	2c00      	cmp	r4, #0
   29b1a:	d1f8      	bne.n	29b0e <strnlen+0x6>
   29b1c:	1a18      	subs	r0, r3, r0
   29b1e:	bd10      	pop	{r4, pc}

00029b20 <quorem>:
   29b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b24:	6903      	ldr	r3, [r0, #16]
   29b26:	4607      	mov	r7, r0
   29b28:	690c      	ldr	r4, [r1, #16]
   29b2a:	42a3      	cmp	r3, r4
   29b2c:	f2c0 8083 	blt.w	29c36 <quorem+0x116>
   29b30:	3c01      	subs	r4, #1
   29b32:	f100 0514 	add.w	r5, r0, #20
   29b36:	f101 0814 	add.w	r8, r1, #20
   29b3a:	00a3      	lsls	r3, r4, #2
   29b3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   29b40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   29b44:	9300      	str	r3, [sp, #0]
   29b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   29b4a:	9301      	str	r3, [sp, #4]
   29b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   29b50:	3301      	adds	r3, #1
   29b52:	429a      	cmp	r2, r3
   29b54:	fbb2 f6f3 	udiv	r6, r2, r3
   29b58:	d331      	bcc.n	29bbe <quorem+0x9e>
   29b5a:	f04f 0a00 	mov.w	sl, #0
   29b5e:	46c4      	mov	ip, r8
   29b60:	46ae      	mov	lr, r5
   29b62:	46d3      	mov	fp, sl
   29b64:	f85c 3b04 	ldr.w	r3, [ip], #4
   29b68:	b298      	uxth	r0, r3
   29b6a:	45e1      	cmp	r9, ip
   29b6c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   29b70:	fb06 a000 	mla	r0, r6, r0, sl
   29b74:	ea4f 4210 	mov.w	r2, r0, lsr #16
   29b78:	b280      	uxth	r0, r0
   29b7a:	fb06 2303 	mla	r3, r6, r3, r2
   29b7e:	f8de 2000 	ldr.w	r2, [lr]
   29b82:	b292      	uxth	r2, r2
   29b84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   29b88:	eba2 0200 	sub.w	r2, r2, r0
   29b8c:	b29b      	uxth	r3, r3
   29b8e:	f8de 0000 	ldr.w	r0, [lr]
   29b92:	445a      	add	r2, fp
   29b94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   29b98:	b292      	uxth	r2, r2
   29b9a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   29b9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   29ba2:	ea4f 4b23 	mov.w	fp, r3, asr #16
   29ba6:	f84e 2b04 	str.w	r2, [lr], #4
   29baa:	d2db      	bcs.n	29b64 <quorem+0x44>
   29bac:	9b00      	ldr	r3, [sp, #0]
   29bae:	58eb      	ldr	r3, [r5, r3]
   29bb0:	b92b      	cbnz	r3, 29bbe <quorem+0x9e>
   29bb2:	9b01      	ldr	r3, [sp, #4]
   29bb4:	3b04      	subs	r3, #4
   29bb6:	429d      	cmp	r5, r3
   29bb8:	461a      	mov	r2, r3
   29bba:	d330      	bcc.n	29c1e <quorem+0xfe>
   29bbc:	613c      	str	r4, [r7, #16]
   29bbe:	4638      	mov	r0, r7
   29bc0:	f000 f8cd 	bl	29d5e <__mcmp>
   29bc4:	2800      	cmp	r0, #0
   29bc6:	db26      	blt.n	29c16 <quorem+0xf6>
   29bc8:	4629      	mov	r1, r5
   29bca:	2000      	movs	r0, #0
   29bcc:	f858 2b04 	ldr.w	r2, [r8], #4
   29bd0:	f8d1 c000 	ldr.w	ip, [r1]
   29bd4:	fa1f fe82 	uxth.w	lr, r2
   29bd8:	45c1      	cmp	r9, r8
   29bda:	fa1f f38c 	uxth.w	r3, ip
   29bde:	ea4f 4212 	mov.w	r2, r2, lsr #16
   29be2:	eba3 030e 	sub.w	r3, r3, lr
   29be6:	4403      	add	r3, r0
   29be8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   29bec:	b29b      	uxth	r3, r3
   29bee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   29bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   29bf6:	ea4f 4022 	mov.w	r0, r2, asr #16
   29bfa:	f841 3b04 	str.w	r3, [r1], #4
   29bfe:	d2e5      	bcs.n	29bcc <quorem+0xac>
   29c00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   29c04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   29c08:	b922      	cbnz	r2, 29c14 <quorem+0xf4>
   29c0a:	3b04      	subs	r3, #4
   29c0c:	429d      	cmp	r5, r3
   29c0e:	461a      	mov	r2, r3
   29c10:	d30b      	bcc.n	29c2a <quorem+0x10a>
   29c12:	613c      	str	r4, [r7, #16]
   29c14:	3601      	adds	r6, #1
   29c16:	4630      	mov	r0, r6
   29c18:	b003      	add	sp, #12
   29c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c1e:	6812      	ldr	r2, [r2, #0]
   29c20:	3b04      	subs	r3, #4
   29c22:	2a00      	cmp	r2, #0
   29c24:	d1ca      	bne.n	29bbc <quorem+0x9c>
   29c26:	3c01      	subs	r4, #1
   29c28:	e7c5      	b.n	29bb6 <quorem+0x96>
   29c2a:	6812      	ldr	r2, [r2, #0]
   29c2c:	3b04      	subs	r3, #4
   29c2e:	2a00      	cmp	r2, #0
   29c30:	d1ef      	bne.n	29c12 <quorem+0xf2>
   29c32:	3c01      	subs	r4, #1
   29c34:	e7ea      	b.n	29c0c <quorem+0xec>
   29c36:	2000      	movs	r0, #0
   29c38:	e7ee      	b.n	29c18 <quorem+0xf8>

00029c3a <__sfmoreglue>:
   29c3a:	b570      	push	{r4, r5, r6, lr}
   29c3c:	2368      	movs	r3, #104	; 0x68
   29c3e:	1e4d      	subs	r5, r1, #1
   29c40:	460e      	mov	r6, r1
   29c42:	435d      	muls	r5, r3
   29c44:	f105 0174 	add.w	r1, r5, #116	; 0x74
   29c48:	f7f9 f9bc 	bl	22fc4 <_malloc_r>
   29c4c:	4604      	mov	r4, r0
   29c4e:	b140      	cbz	r0, 29c62 <__sfmoreglue+0x28>
   29c50:	2100      	movs	r1, #0
   29c52:	f105 0268 	add.w	r2, r5, #104	; 0x68
   29c56:	e9c0 1600 	strd	r1, r6, [r0]
   29c5a:	300c      	adds	r0, #12
   29c5c:	60a0      	str	r0, [r4, #8]
   29c5e:	f7ff fdfe 	bl	2985e <memset>
   29c62:	4620      	mov	r0, r4
   29c64:	bd70      	pop	{r4, r5, r6, pc}

00029c66 <_fwalk_reent>:
   29c66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29c6a:	4606      	mov	r6, r0
   29c6c:	4688      	mov	r8, r1
   29c6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   29c72:	2700      	movs	r7, #0
   29c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   29c78:	f1b9 0901 	subs.w	r9, r9, #1
   29c7c:	d505      	bpl.n	29c8a <_fwalk_reent+0x24>
   29c7e:	6824      	ldr	r4, [r4, #0]
   29c80:	2c00      	cmp	r4, #0
   29c82:	d1f7      	bne.n	29c74 <_fwalk_reent+0xe>
   29c84:	4638      	mov	r0, r7
   29c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29c8a:	89ab      	ldrh	r3, [r5, #12]
   29c8c:	2b01      	cmp	r3, #1
   29c8e:	d907      	bls.n	29ca0 <_fwalk_reent+0x3a>
   29c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   29c94:	3301      	adds	r3, #1
   29c96:	d003      	beq.n	29ca0 <_fwalk_reent+0x3a>
   29c98:	4629      	mov	r1, r5
   29c9a:	4630      	mov	r0, r6
   29c9c:	47c0      	blx	r8
   29c9e:	4307      	orrs	r7, r0
   29ca0:	3568      	adds	r5, #104	; 0x68
   29ca2:	e7e9      	b.n	29c78 <_fwalk_reent+0x12>

00029ca4 <memchr>:
   29ca4:	b2c9      	uxtb	r1, r1
   29ca6:	4603      	mov	r3, r0
   29ca8:	4402      	add	r2, r0
   29caa:	b510      	push	{r4, lr}
   29cac:	4293      	cmp	r3, r2
   29cae:	4618      	mov	r0, r3
   29cb0:	d101      	bne.n	29cb6 <memchr+0x12>
   29cb2:	2000      	movs	r0, #0
   29cb4:	e003      	b.n	29cbe <memchr+0x1a>
   29cb6:	7804      	ldrb	r4, [r0, #0]
   29cb8:	3301      	adds	r3, #1
   29cba:	428c      	cmp	r4, r1
   29cbc:	d1f6      	bne.n	29cac <memchr+0x8>
   29cbe:	bd10      	pop	{r4, pc}

00029cc0 <__hi0bits>:
   29cc0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   29cc4:	4603      	mov	r3, r0
   29cc6:	bf36      	itet	cc
   29cc8:	0403      	lslcc	r3, r0, #16
   29cca:	2000      	movcs	r0, #0
   29ccc:	2010      	movcc	r0, #16
   29cce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   29cd2:	bf3c      	itt	cc
   29cd4:	021b      	lslcc	r3, r3, #8
   29cd6:	3008      	addcc	r0, #8
   29cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   29cdc:	bf3c      	itt	cc
   29cde:	011b      	lslcc	r3, r3, #4
   29ce0:	3004      	addcc	r0, #4
   29ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   29ce6:	d303      	bcc.n	29cf0 <__hi0bits+0x30>
   29ce8:	2b00      	cmp	r3, #0
   29cea:	db0a      	blt.n	29d02 <__hi0bits+0x42>
   29cec:	3001      	adds	r0, #1
   29cee:	4770      	bx	lr
   29cf0:	009b      	lsls	r3, r3, #2
   29cf2:	d501      	bpl.n	29cf8 <__hi0bits+0x38>
   29cf4:	3002      	adds	r0, #2
   29cf6:	4770      	bx	lr
   29cf8:	005b      	lsls	r3, r3, #1
   29cfa:	d501      	bpl.n	29d00 <__hi0bits+0x40>
   29cfc:	3003      	adds	r0, #3
   29cfe:	4770      	bx	lr
   29d00:	2020      	movs	r0, #32
   29d02:	4770      	bx	lr

00029d04 <__lo0bits>:
   29d04:	6803      	ldr	r3, [r0, #0]
   29d06:	4602      	mov	r2, r0
   29d08:	f013 0007 	ands.w	r0, r3, #7
   29d0c:	d00b      	beq.n	29d26 <__lo0bits+0x22>
   29d0e:	07d9      	lsls	r1, r3, #31
   29d10:	d421      	bmi.n	29d56 <__lo0bits+0x52>
   29d12:	0798      	lsls	r0, r3, #30
   29d14:	bf47      	ittee	mi
   29d16:	085b      	lsrmi	r3, r3, #1
   29d18:	2001      	movmi	r0, #1
   29d1a:	089b      	lsrpl	r3, r3, #2
   29d1c:	2002      	movpl	r0, #2
   29d1e:	bf4c      	ite	mi
   29d20:	6013      	strmi	r3, [r2, #0]
   29d22:	6013      	strpl	r3, [r2, #0]
   29d24:	4770      	bx	lr
   29d26:	b299      	uxth	r1, r3
   29d28:	b909      	cbnz	r1, 29d2e <__lo0bits+0x2a>
   29d2a:	0c1b      	lsrs	r3, r3, #16
   29d2c:	2010      	movs	r0, #16
   29d2e:	b2d9      	uxtb	r1, r3
   29d30:	b909      	cbnz	r1, 29d36 <__lo0bits+0x32>
   29d32:	3008      	adds	r0, #8
   29d34:	0a1b      	lsrs	r3, r3, #8
   29d36:	0719      	lsls	r1, r3, #28
   29d38:	bf04      	itt	eq
   29d3a:	091b      	lsreq	r3, r3, #4
   29d3c:	3004      	addeq	r0, #4
   29d3e:	0799      	lsls	r1, r3, #30
   29d40:	bf04      	itt	eq
   29d42:	089b      	lsreq	r3, r3, #2
   29d44:	3002      	addeq	r0, #2
   29d46:	07d9      	lsls	r1, r3, #31
   29d48:	d403      	bmi.n	29d52 <__lo0bits+0x4e>
   29d4a:	085b      	lsrs	r3, r3, #1
   29d4c:	f100 0001 	add.w	r0, r0, #1
   29d50:	d003      	beq.n	29d5a <__lo0bits+0x56>
   29d52:	6013      	str	r3, [r2, #0]
   29d54:	4770      	bx	lr
   29d56:	2000      	movs	r0, #0
   29d58:	4770      	bx	lr
   29d5a:	2020      	movs	r0, #32
   29d5c:	4770      	bx	lr

00029d5e <__mcmp>:
   29d5e:	4603      	mov	r3, r0
   29d60:	690a      	ldr	r2, [r1, #16]
   29d62:	6900      	ldr	r0, [r0, #16]
   29d64:	1a80      	subs	r0, r0, r2
   29d66:	b530      	push	{r4, r5, lr}
   29d68:	d10e      	bne.n	29d88 <__mcmp+0x2a>
   29d6a:	3314      	adds	r3, #20
   29d6c:	3114      	adds	r1, #20
   29d6e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   29d72:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   29d76:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   29d7a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   29d7e:	4295      	cmp	r5, r2
   29d80:	d003      	beq.n	29d8a <__mcmp+0x2c>
   29d82:	d205      	bcs.n	29d90 <__mcmp+0x32>
   29d84:	f04f 30ff 	mov.w	r0, #4294967295
   29d88:	bd30      	pop	{r4, r5, pc}
   29d8a:	42a3      	cmp	r3, r4
   29d8c:	d3f3      	bcc.n	29d76 <__mcmp+0x18>
   29d8e:	e7fb      	b.n	29d88 <__mcmp+0x2a>
   29d90:	2001      	movs	r0, #1
   29d92:	e7f9      	b.n	29d88 <__mcmp+0x2a>

00029d94 <__sfputc_r>:
   29d94:	6893      	ldr	r3, [r2, #8]
   29d96:	3b01      	subs	r3, #1
   29d98:	2b00      	cmp	r3, #0
   29d9a:	6093      	str	r3, [r2, #8]
   29d9c:	b410      	push	{r4}
   29d9e:	da07      	bge.n	29db0 <__sfputc_r+0x1c>
   29da0:	6994      	ldr	r4, [r2, #24]
   29da2:	42a3      	cmp	r3, r4
   29da4:	db01      	blt.n	29daa <__sfputc_r+0x16>
   29da6:	290a      	cmp	r1, #10
   29da8:	d102      	bne.n	29db0 <__sfputc_r+0x1c>
   29daa:	bc10      	pop	{r4}
   29dac:	f7fa ba3a 	b.w	24224 <__swbuf_r>
   29db0:	6813      	ldr	r3, [r2, #0]
   29db2:	1c58      	adds	r0, r3, #1
   29db4:	6010      	str	r0, [r2, #0]
   29db6:	4608      	mov	r0, r1
   29db8:	7019      	strb	r1, [r3, #0]
   29dba:	bc10      	pop	{r4}
   29dbc:	4770      	bx	lr

00029dbe <__sfputs_r>:
   29dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29dc0:	4606      	mov	r6, r0
   29dc2:	460f      	mov	r7, r1
   29dc4:	4614      	mov	r4, r2
   29dc6:	18d5      	adds	r5, r2, r3
   29dc8:	42ac      	cmp	r4, r5
   29dca:	d101      	bne.n	29dd0 <__sfputs_r+0x12>
   29dcc:	2000      	movs	r0, #0
   29dce:	e007      	b.n	29de0 <__sfputs_r+0x22>
   29dd0:	463a      	mov	r2, r7
   29dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
   29dd6:	4630      	mov	r0, r6
   29dd8:	f7ff ffdc 	bl	29d94 <__sfputc_r>
   29ddc:	1c43      	adds	r3, r0, #1
   29dde:	d1f3      	bne.n	29dc8 <__sfputs_r+0xa>
   29de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029de2 <__sread>:
   29de2:	b510      	push	{r4, lr}
   29de4:	460c      	mov	r4, r1
   29de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29dea:	f7fa fb89 	bl	24500 <_read_r>
   29dee:	2800      	cmp	r0, #0
   29df0:	bfab      	itete	ge
   29df2:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   29df4:	89a3      	ldrhlt	r3, [r4, #12]
   29df6:	181b      	addge	r3, r3, r0
   29df8:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   29dfc:	bfac      	ite	ge
   29dfe:	6563      	strge	r3, [r4, #84]	; 0x54
   29e00:	81a3      	strhlt	r3, [r4, #12]
   29e02:	bd10      	pop	{r4, pc}

00029e04 <__swrite>:
   29e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e08:	461f      	mov	r7, r3
   29e0a:	898b      	ldrh	r3, [r1, #12]
   29e0c:	4605      	mov	r5, r0
   29e0e:	460c      	mov	r4, r1
   29e10:	05db      	lsls	r3, r3, #23
   29e12:	4616      	mov	r6, r2
   29e14:	d505      	bpl.n	29e22 <__swrite+0x1e>
   29e16:	2302      	movs	r3, #2
   29e18:	2200      	movs	r2, #0
   29e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29e1e:	f7fa fb1d 	bl	2445c <_lseek_r>
   29e22:	89a3      	ldrh	r3, [r4, #12]
   29e24:	4632      	mov	r2, r6
   29e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29e2a:	4628      	mov	r0, r5
   29e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   29e30:	81a3      	strh	r3, [r4, #12]
   29e32:	463b      	mov	r3, r7
   29e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29e38:	f7fa ba46 	b.w	242c8 <_write_r>

00029e3c <__sseek>:
   29e3c:	b510      	push	{r4, lr}
   29e3e:	460c      	mov	r4, r1
   29e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29e44:	f7fa fb0a 	bl	2445c <_lseek_r>
   29e48:	1c43      	adds	r3, r0, #1
   29e4a:	89a3      	ldrh	r3, [r4, #12]
   29e4c:	bf15      	itete	ne
   29e4e:	6560      	strne	r0, [r4, #84]	; 0x54
   29e50:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   29e54:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   29e58:	81a3      	strheq	r3, [r4, #12]
   29e5a:	bf18      	it	ne
   29e5c:	81a3      	strhne	r3, [r4, #12]
   29e5e:	bd10      	pop	{r4, pc}

00029e60 <__sclose>:
   29e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29e64:	f7fa baae 	b.w	243c4 <_close_r>

00029e68 <abort>:
   29e68:	2006      	movs	r0, #6
   29e6a:	b508      	push	{r3, lr}
   29e6c:	f7fa fb5a 	bl	24524 <raise>
   29e70:	2001      	movs	r0, #1
   29e72:	f7e7 f8b7 	bl	10fe4 <_exit>

00029e76 <__sflush_r>:
   29e76:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   29e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29e7c:	0717      	lsls	r7, r2, #28
   29e7e:	4605      	mov	r5, r0
   29e80:	460c      	mov	r4, r1
   29e82:	d456      	bmi.n	29f32 <__sflush_r+0xbc>
   29e84:	684b      	ldr	r3, [r1, #4]
   29e86:	2b00      	cmp	r3, #0
   29e88:	dc02      	bgt.n	29e90 <__sflush_r+0x1a>
   29e8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   29e8c:	2b00      	cmp	r3, #0
   29e8e:	dd3d      	ble.n	29f0c <__sflush_r+0x96>
   29e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   29e92:	2e00      	cmp	r6, #0
   29e94:	d03a      	beq.n	29f0c <__sflush_r+0x96>
   29e96:	2300      	movs	r3, #0
   29e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   29e9c:	682f      	ldr	r7, [r5, #0]
   29e9e:	6a21      	ldr	r1, [r4, #32]
   29ea0:	602b      	str	r3, [r5, #0]
   29ea2:	d025      	beq.n	29ef0 <__sflush_r+0x7a>
   29ea4:	6d62      	ldr	r2, [r4, #84]	; 0x54
   29ea6:	89a3      	ldrh	r3, [r4, #12]
   29ea8:	0758      	lsls	r0, r3, #29
   29eaa:	d505      	bpl.n	29eb8 <__sflush_r+0x42>
   29eac:	6863      	ldr	r3, [r4, #4]
   29eae:	1ad2      	subs	r2, r2, r3
   29eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29eb2:	b10b      	cbz	r3, 29eb8 <__sflush_r+0x42>
   29eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   29eb6:	1ad2      	subs	r2, r2, r3
   29eb8:	6a21      	ldr	r1, [r4, #32]
   29eba:	2300      	movs	r3, #0
   29ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   29ebe:	4628      	mov	r0, r5
   29ec0:	47b0      	blx	r6
   29ec2:	1c41      	adds	r1, r0, #1
   29ec4:	d024      	beq.n	29f10 <__sflush_r+0x9a>
   29ec6:	2300      	movs	r3, #0
   29ec8:	6063      	str	r3, [r4, #4]
   29eca:	6923      	ldr	r3, [r4, #16]
   29ecc:	6023      	str	r3, [r4, #0]
   29ece:	89a3      	ldrh	r3, [r4, #12]
   29ed0:	04da      	lsls	r2, r3, #19
   29ed2:	d500      	bpl.n	29ed6 <__sflush_r+0x60>
   29ed4:	6560      	str	r0, [r4, #84]	; 0x54
   29ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29ed8:	602f      	str	r7, [r5, #0]
   29eda:	b1b9      	cbz	r1, 29f0c <__sflush_r+0x96>
   29edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29ee0:	4299      	cmp	r1, r3
   29ee2:	d002      	beq.n	29eea <__sflush_r+0x74>
   29ee4:	4628      	mov	r0, r5
   29ee6:	f7f9 f823 	bl	22f30 <_free_r>
   29eea:	2300      	movs	r3, #0
   29eec:	6363      	str	r3, [r4, #52]	; 0x34
   29eee:	e00d      	b.n	29f0c <__sflush_r+0x96>
   29ef0:	2301      	movs	r3, #1
   29ef2:	4628      	mov	r0, r5
   29ef4:	47b0      	blx	r6
   29ef6:	1c46      	adds	r6, r0, #1
   29ef8:	4602      	mov	r2, r0
   29efa:	d1d4      	bne.n	29ea6 <__sflush_r+0x30>
   29efc:	682b      	ldr	r3, [r5, #0]
   29efe:	2b00      	cmp	r3, #0
   29f00:	d0d1      	beq.n	29ea6 <__sflush_r+0x30>
   29f02:	2b1d      	cmp	r3, #29
   29f04:	d001      	beq.n	29f0a <__sflush_r+0x94>
   29f06:	2b16      	cmp	r3, #22
   29f08:	d129      	bne.n	29f5e <__sflush_r+0xe8>
   29f0a:	602f      	str	r7, [r5, #0]
   29f0c:	2000      	movs	r0, #0
   29f0e:	e02d      	b.n	29f6c <__sflush_r+0xf6>
   29f10:	682a      	ldr	r2, [r5, #0]
   29f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29f16:	b142      	cbz	r2, 29f2a <__sflush_r+0xb4>
   29f18:	2a1d      	cmp	r2, #29
   29f1a:	d001      	beq.n	29f20 <__sflush_r+0xaa>
   29f1c:	2a16      	cmp	r2, #22
   29f1e:	d120      	bne.n	29f62 <__sflush_r+0xec>
   29f20:	2300      	movs	r3, #0
   29f22:	6063      	str	r3, [r4, #4]
   29f24:	6923      	ldr	r3, [r4, #16]
   29f26:	6023      	str	r3, [r4, #0]
   29f28:	e7d5      	b.n	29ed6 <__sflush_r+0x60>
   29f2a:	6062      	str	r2, [r4, #4]
   29f2c:	6922      	ldr	r2, [r4, #16]
   29f2e:	6022      	str	r2, [r4, #0]
   29f30:	e7ce      	b.n	29ed0 <__sflush_r+0x5a>
   29f32:	690f      	ldr	r7, [r1, #16]
   29f34:	2f00      	cmp	r7, #0
   29f36:	d0e9      	beq.n	29f0c <__sflush_r+0x96>
   29f38:	0793      	lsls	r3, r2, #30
   29f3a:	680e      	ldr	r6, [r1, #0]
   29f3c:	600f      	str	r7, [r1, #0]
   29f3e:	bf0c      	ite	eq
   29f40:	694b      	ldreq	r3, [r1, #20]
   29f42:	2300      	movne	r3, #0
   29f44:	1bf6      	subs	r6, r6, r7
   29f46:	608b      	str	r3, [r1, #8]
   29f48:	2e00      	cmp	r6, #0
   29f4a:	dddf      	ble.n	29f0c <__sflush_r+0x96>
   29f4c:	4633      	mov	r3, r6
   29f4e:	463a      	mov	r2, r7
   29f50:	6a21      	ldr	r1, [r4, #32]
   29f52:	4628      	mov	r0, r5
   29f54:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   29f58:	47e0      	blx	ip
   29f5a:	2800      	cmp	r0, #0
   29f5c:	dc07      	bgt.n	29f6e <__sflush_r+0xf8>
   29f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29f66:	f04f 30ff 	mov.w	r0, #4294967295
   29f6a:	81a3      	strh	r3, [r4, #12]
   29f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29f6e:	4407      	add	r7, r0
   29f70:	1a36      	subs	r6, r6, r0
   29f72:	e7e9      	b.n	29f48 <__sflush_r+0xd2>

00029f74 <__swhatbuf_r>:
   29f74:	b570      	push	{r4, r5, r6, lr}
   29f76:	460c      	mov	r4, r1
   29f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29f7c:	b096      	sub	sp, #88	; 0x58
   29f7e:	4615      	mov	r5, r2
   29f80:	2900      	cmp	r1, #0
   29f82:	461e      	mov	r6, r3
   29f84:	da0c      	bge.n	29fa0 <__swhatbuf_r+0x2c>
   29f86:	89a3      	ldrh	r3, [r4, #12]
   29f88:	2100      	movs	r1, #0
   29f8a:	f013 0f80 	tst.w	r3, #128	; 0x80
   29f8e:	bf14      	ite	ne
   29f90:	2340      	movne	r3, #64	; 0x40
   29f92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   29f96:	2000      	movs	r0, #0
   29f98:	6031      	str	r1, [r6, #0]
   29f9a:	602b      	str	r3, [r5, #0]
   29f9c:	b016      	add	sp, #88	; 0x58
   29f9e:	bd70      	pop	{r4, r5, r6, pc}
   29fa0:	466a      	mov	r2, sp
   29fa2:	f7fa fad9 	bl	24558 <_fstat_r>
   29fa6:	2800      	cmp	r0, #0
   29fa8:	dbed      	blt.n	29f86 <__swhatbuf_r+0x12>
   29faa:	9901      	ldr	r1, [sp, #4]
   29fac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   29fb0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   29fb4:	4259      	negs	r1, r3
   29fb6:	4159      	adcs	r1, r3
   29fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   29fbc:	e7eb      	b.n	29f96 <__swhatbuf_r+0x22>

00029fbe <__ascii_mbtowc>:
   29fbe:	b082      	sub	sp, #8
   29fc0:	b901      	cbnz	r1, 29fc4 <__ascii_mbtowc+0x6>
   29fc2:	a901      	add	r1, sp, #4
   29fc4:	b142      	cbz	r2, 29fd8 <_flash_used+0x4>
   29fc6:	b14b      	cbz	r3, 29fdc <_flash_used+0x8>
   29fc8:	7813      	ldrb	r3, [r2, #0]
   29fca:	600b      	str	r3, [r1, #0]
   29fcc:	7812      	ldrb	r2, [r2, #0]
   29fce:	1e10      	subs	r0, r2, #0
   29fd0:	bf18      	it	ne
   29fd2:	2001      	movne	r0, #1
   29fd4:	b002      	add	sp, #8
   29fd6:	4770      	bx	lr
   29fd8:	4610      	mov	r0, r2
   29fda:	e7fb      	b.n	29fd4 <_flash_used>
   29fdc:	f06f 0001 	mvn.w	r0, #1
   29fe0:	e7f8      	b.n	29fd4 <_flash_used>

00029fe2 <_raise_r>:
   29fe2:	291f      	cmp	r1, #31
   29fe4:	b538      	push	{r3, r4, r5, lr}
   29fe6:	4605      	mov	r5, r0
   29fe8:	460c      	mov	r4, r1
   29fea:	d904      	bls.n	29ff6 <_raise_r+0x14>
   29fec:	2316      	movs	r3, #22
   29fee:	6003      	str	r3, [r0, #0]
   29ff0:	f04f 30ff 	mov.w	r0, #4294967295
   29ff4:	bd38      	pop	{r3, r4, r5, pc}
   29ff6:	6c42      	ldr	r2, [r0, #68]	; 0x44
   29ff8:	b112      	cbz	r2, 2a000 <_raise_r+0x1e>
   29ffa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   29ffe:	b94b      	cbnz	r3, 2a014 <_raise_r+0x32>
   2a000:	4628      	mov	r0, r5
   2a002:	f000 f816 	bl	2a032 <_getpid_r>
   2a006:	4622      	mov	r2, r4
   2a008:	4601      	mov	r1, r0
   2a00a:	4628      	mov	r0, r5
   2a00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a010:	f7fa ba90 	b.w	24534 <_kill_r>
   2a014:	2b01      	cmp	r3, #1
   2a016:	d00a      	beq.n	2a02e <_raise_r+0x4c>
   2a018:	1c59      	adds	r1, r3, #1
   2a01a:	d103      	bne.n	2a024 <_raise_r+0x42>
   2a01c:	2316      	movs	r3, #22
   2a01e:	6003      	str	r3, [r0, #0]
   2a020:	2001      	movs	r0, #1
   2a022:	e7e7      	b.n	29ff4 <_raise_r+0x12>
   2a024:	2100      	movs	r1, #0
   2a026:	4620      	mov	r0, r4
   2a028:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   2a02c:	4798      	blx	r3
   2a02e:	2000      	movs	r0, #0
   2a030:	e7e0      	b.n	29ff4 <_raise_r+0x12>

0002a032 <_getpid_r>:
   2a032:	f7fb bf22 	b.w	25e7a <_getpid>

0002a036 <__ascii_wctomb>:
   2a036:	4603      	mov	r3, r0
   2a038:	4608      	mov	r0, r1
   2a03a:	b141      	cbz	r1, 2a04e <__ascii_wctomb+0x18>
   2a03c:	2aff      	cmp	r2, #255	; 0xff
   2a03e:	d904      	bls.n	2a04a <__ascii_wctomb+0x14>
   2a040:	228a      	movs	r2, #138	; 0x8a
   2a042:	f04f 30ff 	mov.w	r0, #4294967295
   2a046:	601a      	str	r2, [r3, #0]
   2a048:	4770      	bx	lr
   2a04a:	2001      	movs	r0, #1
   2a04c:	700a      	strb	r2, [r1, #0]
   2a04e:	4770      	bx	lr
